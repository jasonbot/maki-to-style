'Type library'
__all__ = ['IProtectNameCarto', 'IDimensionProtectNames', 'ILayer', 'IFeatureIDSet', 'IAction', 'IActionCollection', 'IActionProcessor', 'ILocationTrigger', 'IConditionalAction', 'IConditionalAction2', 'IConditionalAction3', 'IConditionalAction4', 'ILayerAction', 'IActionState', 'IHighlightSuppressionAction', 'IDirectData', 'ITemporalSearch', 'IRasterRenderer', 'IRasterLayer', 'IRasterRenderer2', 'IRasterRendererInfo', 'IRasterRendererColorRamp', 'IRasterRendererMaker', 'IRasterRendererMaker2', 'IRasterDisplayProps', 'IRasterUniqueValueRenderer', 'IRasterRendererUniqueValues', 'IRasterClassifyColorRampRenderer', 'IRasterDataExclusion', 'IRasterClassifyUIProperties', 'IRasterStretch', 'IRasterStretch2', 'IRasterStretch3', 'IGlobeRasterStretch', 'IRasterStretchMinMax', 'IRasterRGBRenderer', 'IRasterRGBRenderer2', 'IRasterStretchColorRampRenderer', 'IRasterRendererClassInfo', 'IEnumRasterUniqueValueColor', 'IRasterCatalogRendererPicker', 'IColorChannelMapping', 'IHillShadeInfo', 'IDisplayTableExchange', 'IRasterDiscreteColorRenderer', 'IRenderedRaster', 'IRenderedRaster2', 'IRasterStretchAdvancedLabels', 'IRasterRendererUpdate', 'IIdentify', 'ILegendClassFormat', 'ILegendClass', 'ILegendGroup', 'ILegendFormat', 'IElement', 'IEnumElement', 'ILegendItem', 'ILegendInfo', 'ILayer2', 'ILayerDrawSetup', 'ITemporaryLayer', 'ILayerExtensions', 'ITableExtensions', 'IDataLayerExtension', 'ICompositeLayer', 'ICompositeLayer2', 'IEnumLayer', 'ILayerFactory', 'IFeatureServiceLayerFactory', 'IBarrierProperties', 'IBarrierProperties2', 'ILayerEvents', 'IDataLayer', 'IDataLayer2', 'ILayerDrawingProperties', 'ILayerInfo', 'ILayerEffects', 'ILayerEffectDIM', 'ILayerPosition', 'IAttributeTable', 'ILayerStatus', 'IPublishLayer', 'ISecureLayer', 'ILayerDrawingPhase', 'ILicensedComponent', 'ILayerGeneralProperties', 'IDrawAnnotationGeometry', 'ILayerSymbologyExtents', 'IFeatureGeometryAccess', 'ISecureLayer2', 'ITimeData', 'ITimeTableDefinition', 'ITimeDataDisplay', 'ITimeDimensionDefinition', 'ITimeData2', 'IIdentifyObj', 'IIdentify2', 'IIdentifyObject', 'IIdentifyObjWindow', 'IIdentifyDisplay', 'ILegendGroups', 'ILegendClasses', 'IFind', 'IFindObj', 'IFindObject', 'IRemoteFindObj', 'IGeoReference', 'IGeoRefSaveAsDlg', 'IPatch', 'ILegendFormat2', 'ILegendLayout', 'IDynamicLegendItem', 'ILegendItem2', 'ILegendItem3', 'IDynamicLegendClass', 'IDynamicLegendLayer', 'IDynamicLegendRenderer', 'IBorder', 'IBackground', 'IFrameElement', 'IElementCollection', 'IElementCollection2', 'ILayerFactoryHelper', 'ILayerPropertySheet', 'IElementProperties', 'IElementProperties2', 'IElementProperties3', 'IGraphicElement', 'IBoundsProperties', 'IFrameDraw', 'IShadow', 'IFrameProperties', 'IPictureElement', 'IPictureElement2', 'IPictureElement3', 'IPictureElement4', 'IPictureElement5', 'IOlePictureElement', 'IGraphicsLayer', 'ISelection', 'ISelectionEnvironment', 'IBarrierCollection', 'IFeatureLayer', 'IGroupElement', 'IGraphicsContainer', 'IAnnotateLayerProperties', 'IAnnotateLayerPropertiesCollection', 'IAnnotateMapProperties', 'IFrameDecoration', 'ISymbolBorder', 'ISymbolBackground', 'IQuerySize', 'ISymbolShadow', 'IElementShutdown', 'IElementEditVertices', 'IElementEditCallout', 'IGraphicsComposite', 'ILineElement', 'IMarkerElement', 'IFillShapeElement', 'ITextElement', 'IGroupElement2', 'IGroupElement3', 'IMultiPartTextElement', 'ISelectionEvents', 'IOverflowGraphicsContainer', 'IElementOperation', 'IElementEditVerticesOperation', 'IGraphicsContainerSelect', 'IAnnotationElement', 'IGroupSymbolElement', 'ISymbolCollectionElement', 'IInkGraphic', 'IColumnProperties', 'IOleFrame', 'IGraphicsContainerProperty', 'IGraphicsLayerScale', 'IText3DElement', 'IGraphicElements', 'IFeatureIdentifyObj', 'IRowIdentifyObject', 'IFeatureFindData2', 'ILineLabelPosition', 'ILineLabelPlacementPriorities', 'IPointPlacementPriorities', 'IBasicOverposterLayerProperties', 'IAnnotationExpressionParser', 'IAnnotationExpressionEngine', 'ILabelEngineLayerProperties', 'IPlacedObject', 'IPlacedObject2', 'IPlacedObject3', 'IOverposterLayerProperties', 'IOverposterLayerProperties2', 'IOverposterProperties', 'IOverposterOptions', 'IOverposterOptions2', 'IOverposter', 'IOverposter2', 'IOverposter3', 'IOverposter4', 'IBasicOverposterLayerProperties2', 'IBasicOverposterLayerProperties3', 'IBasicOverposterLayerProperties4', 'IBasicOverposterEvents', 'IMaplexRotationProperties', 'IMaplexRotationProperties2', 'IMaplexLabelStackingProperties', 'IMaplexOffsetAlongLineProperties', 'IMaplexOverposterLayerProperties', 'IMaplexOverposterLayerProperties2', 'IMaplexOverposterLayerProperties3', 'IMaplexOverposterLayerProperties4', 'IMaplexDictionaryEntry', 'IMaplexDictionary', 'IMaplexDictionaries', 'IMaplexKeyNumberGroup', 'IMaplexKeyNumberGroups', 'IMaplexOverposterProperties', 'IMaplexOverposterProperties2', 'ILabelEngineLayerProperties2', 'IAnnotateLayerTransformationProperties', 'IAnnotationPropertiesConverter', 'ILabelStyle', 'ILabelStyle2', 'ILayerFields', 'IAnnotateLayerPropertiesCollection2', 'IAnnotationExpressionParser2', 'ICodedValueAttributes', 'IHotLinkExpressionProperties', 'ILabelEnvironment', 'IRotationRenderer', 'IHyperlink', 'IHyperlinkContainer', 'IHotlinkContainer', 'IFeatureExportInfoGenerator', 'IExportSupport', 'IFeatureRenderer', 'IFeatureRendererUpdate', 'IClassBreaksUIProperties', 'IClassBreaksUIProperties2', 'IDataSampling', 'IDataNormalization', 'IProportionalSymbolRenderer', 'ITransparencyRenderer', 'ILevelRenderer', 'ILookupSymbol', 'ILookupLegendClass', 'IBivariateRenderer', 'IScaleDependentRenderer', 'IRendererFields', 'IChartRenderer', 'IPieChartRenderer', 'ICalcRendererValues', 'ICalcRendererValues2', 'IDotDensityRenderer', 'IDotDensityRenderer2', 'IDotDensityUIRenderer', 'IHorizontalLegendItem', 'IVerticalLegendItem', 'INestedLegendItem', 'IHorizontalBarLegendItem', 'IFeatureSelectionRenderer', 'IUniqueValueInfo', 'IClassBreakInfo', 'IUniqueValueInfos', 'IClassBreakInfos', 'IDataExclusion', 'IDataExclusion2', 'IRotationRenderer2', 'ISelectionEnvironmentThreshold', 'ISelectionEnvironmentStorage', 'ISelectionEnvironmentLayer', 'IFeatureLayerSelectionEvents', 'IHotlinkMacro', 'IDisplayTable', 'IFeatureLayer2', 'IGeoFeatureLayer', 'ITopologyLayer', 'ITopologyErrorSelection', 'ITableSelection', 'IFeatureSelection', 'IDefinitionExpressionEvents', 'IFeatureLayerDefinition', 'IFeatureLayerDefinition2', 'ITableDefinition', 'ISelectionLayerDefinition', 'IDisplayRelationshipClass', 'IFieldInfoSet', 'IOrderedLayerFields', 'IDisplayExpressionProperties', 'IDisplayString', 'IHotlinkExpression', 'ICompositeGraphicsLayer', 'ICompositeGraphicsLayer2', 'IFeatureLayerSymbology', 'IRelationshipClassCollection', 'IRelationshipClassCollectionEdit', 'ISimpleRenderer', 'IClassBreaksRenderer', 'IUniqueValueRenderer', 'IUniqueValueRenderer2', 'IMarker3DRotationAngles', 'ISizeRenderer', 'IRendererClasses', 'IBasicHistogram', 'ITableHistogram', 'ITableHistogram2', 'IGraphicsContainerEvents', 'ILayerExtensionDraw', 'ILayerExtensionInvalidate', 'ISymbolLevels', 'IFeatureCache', 'IFeatureCache2', 'IInteractiveSearch', 'IHTMLPopupInfo', 'IHTMLPopupInfo2', 'IHTMLPopupIdentify', 'IHTMLPopupIdentify2', 'IEditTemplate', 'IEditTemplateFactory', 'IEditTemplateManager', 'ITimeDisplayTable', 'ITimeDisplayTable2', 'IExpression', 'ICoverageAnnotationLayerFactory', 'IGroupLayer', 'ILayerMasking', 'ILevelMasking', 'ICoverageAnnotationLayer', 'ICoverageAnnotationLayer2', 'ICoverageAnnotationSel', 'ICoverageAnnotationLayerWrite', 'IDimensionStyle', 'IDimensionStyleDisplay', 'IDimensionStyleText', 'IDimensionShape', 'IDimensionFeature', 'IEnumDimensionStyle', 'IDimensionStyles', 'IDimensionClassExtension', 'IDimensionGraphic', 'IDimensionClassExtension2', 'INewDimensionFeedback', 'IModifyDimensionFeedback', 'IAnnotateFeature', 'IAnnotateFeature2', 'IAnnotationErrorEvents', 'IMapOverposter', 'IExtentStack', 'IFDOGraphicsLayer', 'IFDOGraphicsLayer2', 'IAnnotationLayer', 'IFDOGraphicsLayerRead', 'IFDOAttributeConversion', 'IFDOGraphicsLayerFactory', 'IAnnotationLayerFactory', 'ISymbolSubstitution', 'IAnnotationFeature', 'IAnnotationFeature2', 'IAnnoClass', 'IAnnotationClassExtension', 'IAnnotationClassExtension2', 'IAnnoClassAdmin', 'IAnnoClassAdmin2', 'IAnnoClassAdmin3', 'IConvertFDOAnnoToCoverageAnno', 'IFDOGraphicsContainer', 'IAnnotationSublayer', 'IBasemapSubLayer', 'IShader', 'IArrayOfIShader', 'IReadingDirection', 'ICompositeMapSurround', 'IMapEvents', 'IMapEvents2', 'IMapSurroundEvents', 'IContextAnalyzer', 'IViewManager', 'IBasicMap2', 'IBasicMap', 'IMapClipOptions', 'IMapLayers', 'IMapLayers2', 'IMapBarriers', 'IMapBarriers2', 'IMapAdmin', 'IMapAdmin2', 'IMapAdmin3', 'IMapAdmin4', 'IMapCache', 'ITableCollection', 'IStandaloneTable', 'IStandaloneTableCollection', 'IDataBrowser', 'IScaleBar2', 'IScaleLine', 'ISingleFillScaleBar', 'IDoubleFillScaleBar', 'IScaleMarks', 'IMapInset2', 'IMarkerNorthArrow', 'IPictureNorthArrow', 'IFeatureCursorBuffer', 'IFeatureCursorBuffer2', 'IBufferProcessingSymbology', 'IBufferProcessingParameter', 'IFeatureIndex', 'IIndexQuery', 'IIndexQuery2', 'IFeatureIndex2', 'IBasicMapIdentifyObject', 'IBasicGeoprocessor', 'IMapGeographicTransformations', 'IViewRefresh', 'IInvalidArea2', 'IInvalidArea3', 'ITableFactory', 'ILODInfo', 'ILODInfos', 'ILayerCacheInfo', 'ILayerCacheInfos', 'ICacheStorageInfo', 'ICacheDatasetInfo', 'ITileCacheInfo', 'ITileImageInfo', 'ITileImageInfo2', 'ICacheControlInfo', 'ICacheDescriptionInfo', 'ICacheDescriptionInfo2', 'ICacheInfo', 'ITileCacheStats', 'ICacheInfo2', 'IMapCooker3', 'ITilesTable', 'IMapCacheStorageFormatConvertor', 'IMapCacheExporter', 'IMapCacheToRasterFunctionArgument', 'IDynamicMap', 'IChangeDatabaseVersion', 'IMapNavigator', 'IDocumentPreview', 'IDocumentInfo', 'IDocumentInfo2', 'IDocumentInfo3', 'IAdvancedShader', 'IRasterShader', 'IRasterDRAShader', 'IMapTimeDisplay', 'IMapTimeDisplay2', 'ITileCacheInfoEx', 'IServiceLayerCredits', 'IPage', 'IRulerSettings', 'ISnapGrid', 'ISnapGuides', 'IImageInset', 'IMapGridBorder', 'IGridLabelExport', 'IDMSGridLabel', 'IFormattedGridLabel', 'IMixedFontGridLabel', 'IMixedFontGridLabel2', 'IIndexGridTabStyle', 'IBackgroundTabStyle', 'ISimpleMapGridBorder', 'ICalibratedMapGridBorder', 'IMeasuredGrid', 'IProjectedGrid', 'IMapFrameEvents', 'IGridAxisTicks', 'IGridHatch', 'IGridInteriorLabels', 'IDMSGridLabel2', 'IDMSGridLabel3', 'ICornerGridLabel', 'IMgrsGrid', 'IGridLadderLabels', 'IPrincipalDigitsGridLabel', 'IPageLayoutExtensions', 'IPageEvents', 'IGraphicSnap', 'IGraphicSnapEnvironment', 'IGraphicSnapEnvironment2', 'IGlobeDocument', 'ILayerFile', 'ICartoItemInfoHelper', 'IRasterFormatInfo', 'IRasterDefaultsEnv', 'IRasterDefaultsEnv2', 'IRasterDefaultsEnv3', 'IRasterDefaultsEnv4', 'IRasterDefaultsEnv5', 'IRasterDefaultsEnv6', 'IRasterDefaultsEnv7', 'IRasterDefaultsEnv8', 'IRasterDefaultsEnv9', 'IImageServiceInfo', 'IImageServerLayer', 'IMosaicLayer', 'IWCSLayer', 'IRasterIdentifyObj', 'IRasterIdentifyObj2', 'IRasterCatalogLayer', 'IColorRampSymbol', 'IColorRampSymbol2', 'IRasterSpatialSelection', 'IGeoReferenceEvents', 'IGdbRasterCatalogLayer', 'IRasterCatalogDisplayProps', 'IRasterCatalogDisplayProps2', 'IRasterLayerExport', 'IRasterLayerExport2', 'IRasterLayerExport3', 'IRasterExporter', 'IRenderedThumbnailBuilder', 'INITFGraphicsLayer', 'IRasterBasemapLayer', 'IRasterBasemapLayerFactory', 'ILayerDescriptor', 'ITOCClass', 'ITOCGroup', 'IMxdServerQuery', 'IQueryByLayer', 'IMxdServerStatus', 'ILayerDescription', 'ILayerDescription2', 'ILayerResultOptions', 'ILayerDescription3', 'IMapArea', 'ILayerDescriptions', 'IMapDescription', 'ITileDescription', 'IMapDescription2', 'IMapDescriptions', 'IMapFrameDescription', 'IMapFrameDescriptions', 'IMapLayerInfo', 'IImageType', 'IImageDisplay', 'IImageDescription', 'IImageResult', 'IImageResult2', 'IMapImage', 'IMapImages', 'ILayoutImage', 'ISQLSyntaxInfo', 'IMapLayerInfos', 'IMapServerBookmark', 'IMapServerBookmarks', 'IMapServerFindResult', 'IMapServerFindResults', 'IMapServerHyperlink', 'IMapServerHyperlinks', 'IMapServerLegendPatch', 'IMapServerLegendClass', 'IMapServerLegendClasses', 'IMapServerLegendGroup', 'IMapServerLegendGroups', 'IMapServerLegendInfo', 'IMapServerLegendInfos', 'IImageDisplay2', 'IQueryResultOptions', 'IQueryResult', 'IMapTableDescription', 'IRelateInfo', 'IRelateInfos', 'IMapTableInfo', 'IStandaloneTableInfo', 'IRelateDescription', 'IFieldDomainInfo', 'IFieldDomainInfos', 'ISubtypeInfo', 'ISubtypeInfos', 'IImageResults', 'IMapLayerInfo3', 'ILabelClassDescription', 'ILabelClassDescriptions', 'ILabelingDescription', 'ILabelClassDescription2', 'IPointLabelPlacementDescription', 'ILineLabelPlacementDescription', 'IPolygonLabelPlacementDescription', 'ILayerDrawingDescriptions', 'IMapTableSubtypeInfo', 'IMapTableSubtypeInfos', 'IServerSymbolOutputOptions', 'IMapLayerInfo4', 'IDynamicLayerDescription', 'IDataSourceDescription', 'ITableDataSourceDescription', 'IQueryTableDataSourceDescription', 'IStatisticDescription', 'IStatisticDescriptions', 'IStatisticsRequest', 'IDataClassificationDef', 'IUniqueValuesDef', 'IClassBreaksDef', 'IJoinTableSourceDescription', 'IMapTableSourceDescription', 'IMapLayerInfo2', 'IMapServerInfo', 'IMapServerInfo2', 'IMapDescription3', 'IPageDescription', 'IMapServerInit', 'IMapServerInit2', 'IMapServerData', 'ICenterAndScale', 'ICenterAndSize', 'IFeatureExtent', 'IMapExtent', 'ITiledMapServer', 'ITiledMapServer2', 'ITiledMapServer3', 'IFeatureLayerDrawingDescription', 'IFeatureLayerDrawingDescription2', 'ILayerDrawingDescriptionFactory', 'IRasterLayerDrawingDescription', 'IServerLayerExtension', 'IMapServerGeoTransformation', 'IMapTableInfo2', 'IStandaloneTableInfos', 'IStandaloneTableDescriptions', 'IMapServerInfo3', 'IMapServerInfo4', 'IMapServerTimeInfo', 'IMapServerTimeInfo2', 'IRelatedRecordGroup', 'IRelatedRecordGroups', 'IRelatedRecordSet', 'IServiceLayerImageFormat', 'IMapServerDataAccess', 'IMapTableTimeInfo', 'IMapTableTimeDescription', 'IMapTimeDescription', 'IMapTimeDescription2', 'IDynamicMapTableDescription', 'IRasterDataSourceDescription', 'IRelateInfo2', 'IMapTableInfo3', 'IMapServerObjectLANProxy', 'IMapServerProxyImpl', 'IMapServerSublayer', 'IMapServerLayer', 'IMapServerSublayer2', 'IMapServerGroupLayer', 'IMapServerRESTLayer', 'IWMTSLayer', 'ITinRenderer', 'ITinIllumination', 'ITinSingleSymbolRenderer', 'ITinContourRenderer', 'ITinColorRampRenderer', 'ITinUniqueValueRenderer', 'ITerrainRenderer', 'ITerrainRenderer2', 'IDatasetRenderer', 'IMultiResolutionRenderer', 'ITerrainAttributeRenderer', 'ILasAttributeRenderer', 'ITinLayer', 'ITinLayer2', 'ITinIdentifyObj', 'ITinIdentifyObj2', 'ITerrainLayer', 'ITerrainLayer2', 'ILasDatasetLayer', 'ICadLayer', 'ICad3DRenderMode', 'ICadIdentifyObj2', 'IFeatureLayerExtendedDefinition', 'IACLayer', 'IACMap', 'IACSymbol', 'IACLayer2', 'IACAxl', 'IACConnector', 'IACMapAdmin', 'IACLayerAdmin', 'IACFeatureLayer', 'IACFeatureLayerAdmin', 'IACImageLayerAdmin', 'IACAcetateLayer', 'IACAcetateLayerAdmin', 'IACSimpleRenderer', 'IACGroupRenderer', 'IACScaleDependentRenderer', 'IACValueMapRenderer', 'IACLineLabelPosition', 'IACLabelRenderer', 'IACSimpleLineSymbol', 'IACHashLineSymbol', 'IACSimplePolygonSymbol', 'IACSimpleFillSymbol', 'IACRasterFillSymbol', 'IACGradientFillSymbol', 'IACSimpleMarkerSymbol', 'IACTrueTypeMarkerSymbol', 'IACRasterMarkerSymbol', 'IACCalloutMarkerSymbol', 'IACRasterShieldSymbol', 'IACTextSymbol', 'IACTextMarkerSymbol', 'IACShieldSymbol', 'IIMSSubLayer', 'IIMSMapLayer', 'IIMSSymbolImporter', 'IIMSGlobeSubServiceDescription', 'IIMSGlobeXMLNode', 'IIMSGlobeXMLParser', 'IIMSGlobeConnection', 'IRealTimeFeed', 'IPositionTrails', 'IRealTimeLog', 'IRealTimeDestination', 'IRealTimeFeedSnap', 'IGpsDisplayProperties', 'IGpsConnection', 'IGpsFeed', 'IRealTimeFeedEvents', 'IRealTimeFeedSimulator', 'IRealTimeFeedManagerEvents', 'IMobileLayerInfo', 'IMobileLayerInfos', 'IMobileMapInfo', 'IWMSServer', 'IWCSServer', 'IWMSLayer', 'IWMSGroupLayer', 'IWMSMapLayer', 'IWMSIdentifyObject', 'IWMSLayer2', 'IEnumLocatedNetworkElement', 'INetworkLayer', 'INetworkRenderer', 'ILocatedNetworkTrafficValue', 'INetworkRendererCollection', 'INetworkIdentifyObj', 'INetworkLayerSymbology', 'ISimpleNetworkRenderer', 'INetworkTrafficRenderer', 'INetworkEdgeRenderer', 'INetworkEdgeRenderer2', 'INetworkSourceRenderer', 'IRepresentationRenderer', 'IRepresentationLegendClass', 'IDataGraphBase', 'IDataGraphTPenProperties', 'ISeriesProperties', 'IDataGraphTGeneralProperties', 'IDataGraphTLegendProperties', 'IDataGraphTAxisProperties', 'IDataGraphT', 'IDataGraphCollectionEvents', 'IDataGraphTEvents', 'IDataGraphCollection', 'IDataGraphTSymbolProperties', 'IBarSeriesProperties', 'IPointSeriesProperties', 'IHistogramSeriesProperties', 'IBoxPlotSeriesProperties', 'IPieSeriesProperties', 'IAreaSeriesProperties', 'ILineSeriesProperties', 'IFunctionSeriesProperties', 'IBubbleSeriesProperties', 'IPolarSeriesProperties', 'IDataSortSeriesProperties', 'IDataGroupSeriesProperties', 'IScatterPlotMatrixSeriesProperties', 'IDataGraphTPrivate', 'IDataGraphTElement', 'IParameterInfo', 'ICadastralFabricLayer', 'ICadastralFabricParcelLayer', 'ICFDataSourcePageExtension', 'ICadastralFabricLayerEvents', 'ICadastralFabricSelection', 'ICadastralFabricSubLayer', 'ICadastralFabricSubLayer2', 'IDynamicLayer', 'IDynamicLayer2', 'IDynamicHit', 'IGeoImageDescription', 'IAISRequest', 'IImageServer', 'IImageServer2', 'IImageServerDownloadResult', 'IImageServerDownloadResults', 'IMosaicRule', 'IImageServerIdentifyResult', 'IRenderingRule', 'IImageServer3', 'ITiledImageServer', 'IPrivateServerObjectLANProxy', 'IImageServerObjectLANProxy', 'IImageServerProxyImpl', 'IImageServerIdentifyResults', 'IImageServerEditResult', 'IImageServerEditResults', 'IImageServerMeasureResult', 'IRasterFunctionInfo', 'IRasterFunctionInfos', 'IRasterTypeInfo', 'IRasterTypeInfos', 'IImageView', 'IImageServiceInfo2', 'IImageServiceInfo3', 'IImageQueryFilter', 'IGeoImageDescription2', 'IGeoImageDescription3', 'IRasterItemDescription', 'IRasterItemDescriptions', 'IImageServer4', 'IImageServerInit', 'IImageServerInit2', 'IImageServerInit3', 'IImageServerObjects', 'IPluginImageLayer', 'IMosaicLODInfoHelper', 'ISimpleMapImage', 'IImageServerIdentifyResultEdit', 'IImageCooker', 'IImageServerName', 'IImageServerLayer2', 'IImageServerLayer3', 'IISLFootprintDisplayProps', 'IDataObjectEx', 'IDataObjectArray', 'IDataObjects', 'IPropertyInfo', 'IPropertyInfos', 'ITemplateInfo', 'ITemplateInfos', 'IDataObjectType', 'IDataObjectTypes', 'IDataObjectTable', 'IDataObjectTables', 'IDomainInfo', 'IGraphicFeature', 'IGraphicFeatures', 'IGraphicFeatureLayer', 'IGraphicFeatureLayers', 'IGFSTableDescription', 'IGFSTableDescriptions', 'IGFSReplicaDescription', 'IGFLayerTableDataMapping', 'IGFLayerTableDataMappings', 'IDataObjectGroup', 'IDataObjectGroupArray', 'IDataObjectGroups', 'ITableEdit', 'ITableEdits', 'IEditResult', 'IEditResults', 'ITableEditResult', 'ITableEditResults', 'IServiceDataOptions', 'IServiceData', 'IGraphicFeatureServer', 'IGraphicFeatureServerReplication', 'ITableIdentity', 'ITableIdentities', 'IFeatureServerInfo', 'IDataObjectTable2', 'IGraphicFeatureLayer2', 'IGraphicFeatureServer2', 'IMosaicSubLayer', 'IJPIPServer', 'ILayerTablesAndDataMappings', 'IGFSReplicationAgent', 'IDataSourceHelperMap', 'IDataSourceHelperLayer', 'IDataSourceHelperStandaloneTable', 'IMSDHelper', 'IMSDHelper2', 'IFeatureServiceEditExtension', 'IFeatureServiceLayerEditExtension', 'IMapSurroundFrame', 'IMapSurround', 'IEnumMapSurround', 'ILegend', 'IScaleBar', 'IMapInset', 'IScaleText', 'IScaleText2', 'INorthArrow', 'INorthArrow2', 'IOverview', 'IOverview2', 'IMapDescriptor', 'IMapServerLayout', 'IMap', 'IAnnotateMap', 'IExportInfoGenerator', 'IAnnotateMap2', 'ILabelCache', 'IStandardAnnotateMap', 'IActiveView', 'IActiveViewEvents', 'IConvertLabelsToAnnotation', 'IBasemapLayer', 'IMapSurroundFactory', 'IMapEvents3', 'IMapAutoExtentOptions', 'IMaps2', 'IMaps', 'IEnumMap', 'ISpatialBookmark', 'IPushPin', 'IAOIBookmark', 'IFeatureBookmark', 'IEnumSpatialBookmark', 'IMapBookmarks', 'IMapBookmarks2', 'ILegend2', 'ILegend3', 'IFeatureFindData', 'IMXFeatureFindData', 'IMapIdentifyObject', 'IRotateOperation', 'IMapCooker', 'IMapCooker2', 'IPageLayout', 'IMxdContents', 'IPrintAndExport', 'IPageLayoutSnap', 'IPageLayout2', 'IPageLayout3', 'IMapDocument', 'IMxdServer', 'IMxdServerObjects', 'IMapServerObjects', 'IMapServerObjects2', 'IMapReader', 'IMapServerObjects3', 'IRealTimeFeedManager', 'IMobileSync', 'IDynamicCacheLayerManager', 'IDynamicCacheLayerManager2', 'IDataSourceHelperMapDocument', 'IMapFrame', 'ILocatorRectangle', 'ILocatorRectangle2', 'IMapGrid', 'IGridLabel', 'IReferenceSystem', 'IGridLabel2', 'IGraticule', 'IIndexGrid', 'ICustomOverlayGrid', 'IMapGrids', 'IMapServerIdentifyResults', 'IMapServer', 'IMapServer2', 'IKmlConversion', 'IMapServer3', 'IMapServer4', 'IMobileSync2', 'IGraphicFeatureServerInit', 'ISDGenerator', 'IMapServerIdentifyResult', 'IMapServerIdentifyObject', 'IMapServerRelationships', 'IMapServerRow', 'IMapServerRows', 'IMapServerRelationship', 'IMapServerRow2', 'IMapServerIdentifyResult2', 'RasterRendererMakerDefault', 'RasterUniqueValueRenderer', 'RasterClassifyColorRampRenderer', 'RasterRGBRenderer', 'RasterStretchColorRampRenderer', 'RasterColormapRenderer', 'RasterDiscreteColorRenderer', 'RasterCatalogRendererPickerDefault', 'RenderedRaster', 'LegendGroups', 'LegendClasses', 'LegendClass', 'LegendClassFormat', 'LegendGroup', 'AreaPatch', 'LinePatch', 'FieldInfo', 'FrameElement', 'PictureElement', 'LayerEventsHelper', 'DummyLayer', 'DummyGraduatedMarkerLayer', 'LayerFactoryHelper', 'InkGraphic', 'LineElement', 'MarkerElement', 'RectangleElement', 'PolygonElement', 'TextElement', 'ParagraphTextElement', 'CircleElement', 'EllipseElement', 'GroupElement', 'MultiPatchElement', 'ElementCollection', 'SymbolBorder', 'SymbolBackground', 'SymbolShadow', 'SimpleElementSelection', 'Text3DElement', 'GraphicElements', 'AnnotationElement', 'PMFTitleTextElement', 'FeatureFindData', 'BarrierCollection', 'BasicOverposter', 'BasicOverposterLayerProperties', 'LineLabelPosition', 'LineLabelPlacementPriorities', 'PointPlacementPriorities', 'BasicOverposterProperties', 'MaplexDictionaryEntry', 'MaplexDictionary', 'MaplexDictionaries', 'MaplexKeyNumberGroup', 'MaplexKeyNumberGroups', 'MaplexOverposterProperties', 'MaplexLabelEngineLayerProperties', 'MaplexOverposterLayerProperties', 'MaplexRotationProperties', 'MaplexLabelStackingProperties', 'MaplexOffsetAlongLineProperties', 'MaplexAnnotationPropertiesConverter', 'MaplexLabelStyle', 'BasicPlacedObject', 'AnnotateLayerPropertiesCollection', 'AnnotationVBScriptEngine', 'AnnotationJScriptEngine', 'AnnotationPythonEngine', 'LabelStyle', 'LabelEnvironment', 'LabelEngineLayerProperties', 'AnnotationExpressionParser', 'HotLinkExpressionProperties', 'HotLinkVBScriptEngine', 'HotLinkJScriptEngine', 'HotLinkPythonEngine', 'HotLinkExpressionParser', 'ScaleDependentRenderer', 'ProportionalSymbolRenderer', 'BiUniqueValueRenderer', 'ChartRenderer', 'CalcRendererValues', 'DotDensityRenderer', 'HorizontalLegendItem', 'VerticalLegendItem', 'HorizontalBarLegendItem', 'NestedLegendItem', 'UniqueValueInfo', 'ClassBreakInfo', 'UniqueValueInfos', 'ClassBreakInfos', 'FeatureLayer', 'Hyperlink', 'FieldInfoSet', 'DisplayExpressionProperties', 'FeatureLayerSelectionEvents', 'GraphicsContainerEvents', 'SelectionEnvironment', 'CompositeGraphicsLayer', 'FeatureIDSet', 'SimpleRenderer', 'UniqueValueRenderer', 'ClassBreaksRenderer', 'SimpleIdentifyObject', 'BasicTableHistogram', 'FeatureCache', 'GraphicsSubLayer', 'TopologyLayer', 'FeatureLayerFactory', 'EngineTopologyLayerFactory', 'EngineCoverageAnnotationLayerFactory', 'ExportInfoGenerator', 'EditTemplate', 'EditTemplateFactory', 'EditTemplateManager', 'TimeQueryFilter', 'GroupLayerFactory', 'GroupLayer', 'CoverageAnnotationLayer', 'DimensionClassExtension', 'DimensionStyle', 'DimensionStyles', 'DimensionFeature', 'DimensionGraphic', 'DimensionClassDescription', 'NewDimensionFeedback', 'ModifyDimensionFeedback', 'DimensionShape', 'DimensionLayer', 'LabelCache', 'AnnotateMap', 'AnnotateFeature', 'AnnotateMapProperties', 'ConvertFDOAnnoToCoverageAnno', 'FDOGraphicsLayerFactory', 'AnnotationFeature', 'AnnotationFeatureClassExtension', 'FDOGraphicsLayer', 'AnnotationFeatureClassDescription', 'GraphicsLayerScale', 'FDOGraphicsSublayer', 'ConvertLabelsToAnnotation', 'Map', 'MapEvents', 'MapEvents2', 'MapEvents3', 'DynamicMapEvents', 'ScaleLine', 'SteppedScaleLine', 'HollowScaleBar', 'SingleDivisionScaleBar', 'Scalebar', 'AlternatingScaleBar', 'DoubleAlternatingScaleBar', 'ScaleText', 'MarkerNorthArrow', 'Overview', 'MapTitle', 'MapInset', 'Legend', 'LegendFormat', 'AOIBookmark', 'FeatureBookmark', 'FeatureCursorBuffer', 'FeatureIndex', 'BasicGeoprocessor', 'InvalidArea', 'TilesTable', 'StandaloneTable', 'MapSelection', 'MapCooker', 'TrackCancel', 'DynamicDisplay', 'DynamicGlyph', 'DynamicGlyphFactory', 'ChangeDatabaseVersion', 'DocumentInfo', 'BasemapLayer', 'BasemapSubLayer', 'ArrayOfIShader', 'RasterShader', 'RasterDRAShader', 'ImageInset', 'MapFrame', 'MapSurroundFrame', 'DMSGridLabel', 'FormattedGridLabel', 'MixedFontGridLabel', 'BackgroundTabStyle', 'ContinuousTabStyle', 'RoundedTabStyle', 'ButtonTabStyle', 'SimpleMapGridBorder', 'CalibratedMapGridBorder', 'Graticule', 'MeasuredGrid', 'IndexGrid', 'CustomOverlayGrid', 'LocatorRectangle', 'MgrsGrid', 'CornerGridLabel', 'PrintAndExport', 'PageLayout', 'Page', 'RulerSettings', 'SnapGrid', 'SnapGuides', 'GraphicSnapEnvironment', 'GridSnap', 'GuideSnap', 'MarginSnap', 'RulerSnap', 'MapDocument', 'LayerFile', 'RasterDefaultsEnv', 'RasterFormatInfo', 'RasterLayer', 'WCSLayer', 'RasterCatalogLayer', 'GdbRasterCatalogLayer', 'ColorSymbol', 'ColorRampSymbol', 'RasterRGBSymbol', 'SimpleRasterIdentifyObj', 'RasterIdentifyObj', 'GeoReferenceEvents', 'RasterLayerExport', 'RasterExporter', 'RasterThumbnailBuilder', 'RasterLayerFactory', 'WCSLayerFactory', 'RasterCatalogLayerFactory', 'NetCDFLayerFactory', 'NetCDFTableFactory', 'NITFGraphicsLayer', 'RasterServiceHelper', 'RasterBasemapLayer', 'RasterBasemapLayerFactory', 'BmpPictureElement', 'EmfPictureElement', 'TifPictureElement', 'JpgPictureElement', 'ImgPictureElement', 'SidPictureElement', 'GifPictureElement', 'PngPictureElement', 'Jp2PictureElement', 'QueryByLayer', 'MxdServer', 'MapDescriptor', 'LayerDescriptor', 'MapServerConfigurationFactory', 'MapServer', 'MapReader', 'MapServerInfo', 'MapLayerInfo', 'MapDescription', 'LayerDescription', 'MapFrameDescription', 'PageDescription', 'ImageType', 'ImageDisplay', 'ImageDescription', 'MapImage', 'ImageResult', 'LayoutImage', 'MapServerIdentifyResult', 'MapServerFindResult', 'MapServerBookmark', 'CenterAndScale', 'CenterAndSize', 'FeatureExtent', 'MapExtent', 'MapServerHyperlink', 'MapServerRelationship', 'MapServerRow', 'SQLSyntaxInfo', 'MapServerLegendPatch', 'MapServerLegendClass', 'MapServerLegendGroup', 'MapServerLegendInfo', 'MapDescriptions', 'MapFrameDescriptions', 'LayerDescriptions', 'MapServerBookmarks', 'MapServerIdentifyResults', 'MapServerFindResults', 'MapLayerInfos', 'MapServerRows', 'MapServerRelationships', 'MapServerHyperlinks', 'MapImages', 'MapServerLegendGroups', 'MapServerLegendClasses', 'MapServerLegendInfos', 'CacheInfo', 'CacheDescriptionInfo', 'CacheControlInfo', 'TileImageInfo', 'CacheStorageInfo', 'CacheDatasetInfo', 'TileCacheInfo', 'LODInfo', 'LODInfos', 'LayerCacheInfo', 'LayerCacheInfos', 'FeatureLayerDrawingDescription', 'FeatureLayerDrawingDescriptionFactory', 'RasterLayerDrawingDescription', 'RasterLayerDrawingDescriptionFactory', 'LayerDrawingDescriptionFactory', 'ServerLayerExtension', 'LayerResultOptions', 'QueryResultOptions', 'QueryResult', 'StandaloneTableDescription', 'StandaloneTableInfo', 'StandaloneTableDescriptions', 'StandaloneTableInfos', 'RelateInfo', 'RelateInfos', 'RelateDescription', 'RelatedRecordGroup', 'RelatedRecordGroups', 'RelatedRecordSet', 'SubtypeInfo', 'SubtypeInfos', 'FieldDomainInfo', 'FieldDomainInfos', 'ImageResults', 'LabelingDescription', 'LabelClassDescription', 'LabelClassDescriptions', 'PointLabelPlacementDescription', 'LineLabelPlacementDescription', 'PolygonLabelPlacementDescription', 'LayerDrawingDescriptions', 'MapTableSubtypeInfo', 'MapTableSubtypeInfos', 'ServerSymbolOutputOptions', 'JoinTableSourceDescription', 'MapTableSourceDescription', 'TableDataSourceDescription', 'QueryTableDataSourceDescription', 'RasterDataSourceDescription', 'StatisticDescription', 'StatisticDescriptions', 'StatisticsRequest', 'UniqueValuesDef', 'ClassBreaksDef', 'MapServerLP', 'MapServerIP', 'MapServerObjectDescription', 'CacheRasterDatasetName', 'MapServerLayer', 'MapServerLayerFactory', 'FeatureServerLayerFactory', 'SimpleMapServerIdentifyObject', 'MapServerBasicSublayer', 'MapServerIdentifySublayer', 'MapServerFindSublayer', 'MapServerQuerySublayer', 'MapServerRESTLayer', 'MapServerRESTSubLayer', 'WMTSLayerFactory', 'WMTSLayer', 'TinFaceRenderer', 'TinEdgeRenderer', 'TinNodeRenderer', 'TinSlopeRenderer', 'TinAspectRenderer', 'TinElevationRenderer', 'TinFaceValueRenderer', 'TinNodeValueRenderer', 'TinNodeElevationRenderer', 'TinBreaklineRenderer', 'TinContourRenderer', 'TerrainDirtyAreaRenderer', 'TerrainPointElevationRenderer', 'TerrainPointAttributeRenderer', 'TerrainPointUniqueValueRenderer', 'LasUniqueValueRenderer', 'LasPointElevationRenderer', 'TinLayer', 'SimpleTinIdentifyObj', 'TinLayerFactory', 'TerrainLayer', 'TerrainLayerFactory', 'LasDatasetLayer', 'LasDatasetLayerFactory', 'CadLayer', 'EngineCadLayerFactory', 'CadFeatureLayer', 'EngineCadFeatureLayerFactory', 'CadAnnotationLayer', 'EngineCadAnnotationLayerFactory', 'ACConnector', 'ACSimpleRenderer', 'ACGroupRenderer', 'ACScaleDependentRenderer', 'ACSimpleLineSymbol', 'ACSimpleFillSymbol', 'ACSimplePolygonSymbol', 'ACSimpleMarkerSymbol', 'ACTextSymbol', 'ACValueMapRenderer', 'ACTrueTypeMarkerSymbol', 'ACRasterMarkerSymbol', 'ACRasterShieldSymbol', 'ACHashLineSymbol', 'ACRasterFillSymbol', 'ACGradientFillSymbol', 'ACCalloutMarkerSymbol', 'ACShieldSymbol', 'ACTextMarkerSymbol', 'ACSimpleLabelRenderer', 'ACValueMapLabelRenderer', 'ACMap', 'ACFeatureLayer', 'ACImageLayer', 'ACAcetateLayer', 'EngineIMSLayerFactory', 'IMSMapLayer', 'IMSSymbolImporter', 'IMSGlobeConnection', 'IMSGlobeXMLParser', 'IMSGlobeXMLNode', 'IMSSubFeatureLayer', 'IMSSubLayer', 'GpsFeed', 'GpsConnection', 'RealTimeFeedManager', 'RealTimeFeedSimulator', 'ColorStyleGalleryClass', 'FillSymbolStyleGalleryClass', 'LineSymbolStyleGalleryClass', 'MarkerSymbolStyleGalleryClass', 'TextSymbolStyleGalleryClass', 'LegendItemStyleGalleryClass', 'NorthArrowStyleGalleryClass', 'ScaleBarStyleGalleryClass', 'ScaleTextStyleGalleryClass', 'ColorRampStyleGalleryClass', 'LabelStyleGalleryClass', 'MaplexLabelStyleGalleryClass', 'BorderStyleGalleryClass', 'BackgroundStyleGalleryClass', 'ShadowStyleGalleryClass', 'AreaPatchStyleGalleryClass', 'LinePatchStyleGalleryClass', 'RepresentationMarkerStyleGalleryClass', 'RepresentationRuleStyleGalleryClass', 'MobileServer', 'MobileSync', 'MobileMapInfo', 'MobileLayerInfo', 'MobileLayerInfos', 'WMSServer', 'WMSImageServer', 'WCSServer', 'WCSImageServer', 'WMSMapLayer', 'SimpleWMSIdentifyObject', 'WMSLayer', 'WMSGroupLayer', 'EngineWMSMapLayerFactory', 'DefaultNetworkLayerSymbology', 'NetworkLayer', 'EngineNetworkLayerFactory', 'SimpleNetworkRenderer', 'NetworkDirtyAreaRenderer', 'NetworkTrafficRenderer', 'RepresentationRenderer', 'RepresentationLegendClass', 'CadastralFabricLayer', 'CadastralFabricLayerEventsHelper', 'CadastralFabricLayerFactory', 'CadastralFabricSubLayer', 'DynamicCacheLayerManager', 'DynamicHit', 'ImageServerLP', 'ImageServerIP', 'ImageServerObjectDescription', 'MultithreadedCommander', 'ImageServiceInfo', 'GeoImageDescription', 'ImageServer', 'ImageServerConfigurationFactory', 'AISRequest', 'MosaicRule', 'RenderingRule', 'RasterItemDescription', 'RasterItemDescriptions', 'MosaicLODInfoHelper', 'ImageQueryFilter', 'SimpleMapImage', 'ImageServerIdentifyResult', 'ImageServerIdentifyResults', 'ImageServerDownloadResult', 'ImageServerDownloadResults', 'ImageServerEditResult', 'ImageServerEditResults', 'ImageServerMeasureResult', 'RasterFunctionInfo', 'RasterFunctionInfos', 'RasterTypeInfo', 'RasterTypeInfos', 'ImageView', 'ImageCooker', 'ImageServerName', 'ImageServerLayer', 'ImageServerLayerFactory', 'MobileServerLP', 'MobileServerIP', 'MobileServerObjectDescription', 'DataObjectType', 'DataObjectTypes', 'DataObjectTable', 'GraphicFeatureLayer', 'GraphicFeatureLayers', 'DataObjectTables', 'PropertyInfo', 'PropertyInfos', 'DataObject', 'GraphicFeature', 'DataObjectArray', 'DataObjects', 'GraphicFeatures', 'GFLayerTableDataMapping', 'GFLayerTableDataMappings', 'DomainInfo', 'TemplateInfo', 'TemplateInfos', 'GraphicFeatureServer', 'FeatureServerConfigurationFactory', 'GFSReplicaDescription', 'GFSTableDescription', 'GFSTableDescriptions', 'EditResult', 'EditResults', 'ServiceDataOptions', 'ServiceData', 'DataObjectGroup', 'DataObjectGroupArray', 'DataObjectGroups', 'TableEdit', 'TableEdits', 'TableEditResult', 'TableEditResults', 'FeatureServerInfo', 'TableIdentities', 'TableIdentity', 'MosaicLayer', 'JPIPServer', 'GraphicFeatureServerLP', 'GraphicFeatureServerIP', 'GraphicFeatureServerObjectDescription', 'LayerTablesAndDataMappings', 'GFSReplicationAgent', 'DataSourceHelper', 'MSDHelper', 'FeatureServiceEditExtension', 'FeatureServiceLayerEditExtension', 'FeatureServiceWorkspaceFactory', 'IID_IProtectNameCarto', 'IID_IDimensionProtectNames', 'IID_ILayer', 'IID_IFeatureIDSet', 'IID_IAction', 'IID_IActionCollection', 'IID_IActionProcessor', 'IID_ILocationTrigger', 'IID_IConditionalAction', 'IID_IConditionalAction2', 'IID_IConditionalAction3', 'IID_IConditionalAction4', 'IID_ILayerAction', 'IID_IActionState', 'IID_IHighlightSuppressionAction', 'IID_IDirectData', 'IID_ITemporalSearch', 'IID_IRasterRenderer', 'IID_IRasterLayer', 'IID_IRasterRenderer2', 'IID_IRasterRendererInfo', 'IID_IRasterRendererColorRamp', 'IID_IRasterRendererMaker', 'IID_IRasterRendererMaker2', 'IID_IRasterDisplayProps', 'IID_IRasterUniqueValueRenderer', 'IID_IRasterRendererUniqueValues', 'IID_IRasterClassifyColorRampRenderer', 'IID_IRasterDataExclusion', 'IID_IRasterClassifyUIProperties', 'IID_IRasterStretch', 'IID_IRasterStretch2', 'IID_IRasterStretch3', 'IID_IGlobeRasterStretch', 'IID_IRasterStretchMinMax', 'IID_IRasterRGBRenderer', 'IID_IRasterRGBRenderer2', 'IID_IRasterStretchColorRampRenderer', 'IID_IRasterRendererClassInfo', 'IID_IEnumRasterUniqueValueColor', 'IID_IRasterCatalogRendererPicker', 'IID_IColorChannelMapping', 'IID_IHillShadeInfo', 'IID_IDisplayTableExchange', 'IID_IRasterDiscreteColorRenderer', 'IID_IRenderedRaster', 'IID_IRenderedRaster2', 'IID_IRasterStretchAdvancedLabels', 'IID_IRasterRendererUpdate', 'IID_IIdentify', 'IID_ILegendClassFormat', 'IID_ILegendClass', 'IID_ILegendGroup', 'IID_ILegendFormat', 'IID_IElement', 'IID_IEnumElement', 'IID_ILegendItem', 'IID_ILegendInfo', 'IID_ILayer2', 'IID_ILayerDrawSetup', 'IID_ITemporaryLayer', 'IID_ILayerExtensions', 'IID_ITableExtensions', 'IID_IDataLayerExtension', 'IID_ICompositeLayer', 'IID_ICompositeLayer2', 'IID_IEnumLayer', 'IID_ILayerFactory', 'IID_IFeatureServiceLayerFactory', 'IID_IBarrierProperties', 'IID_IBarrierProperties2', 'IID_ILayerEvents', 'IID_IDataLayer', 'IID_IDataLayer2', 'IID_ILayerDrawingProperties', 'IID_ILayerInfo', 'IID_ILayerEffects', 'IID_ILayerEffectDIM', 'IID_ILayerPosition', 'IID_IAttributeTable', 'IID_ILayerStatus', 'IID_IPublishLayer', 'IID_ISecureLayer', 'IID_ILayerDrawingPhase', 'IID_ILicensedComponent', 'IID_ILayerGeneralProperties', 'IID_IDrawAnnotationGeometry', 'IID_ILayerSymbologyExtents', 'IID_IFeatureGeometryAccess', 'IID_ISecureLayer2', 'IID_ITimeData', 'IID_ITimeTableDefinition', 'IID_ITimeDataDisplay', 'IID_ITimeDimensionDefinition', 'IID_ITimeData2', 'IID_IIdentifyObj', 'IID_IIdentify2', 'IID_IIdentifyObject', 'IID_IIdentifyObjWindow', 'IID_IIdentifyDisplay', 'IID_ILegendGroups', 'IID_ILegendClasses', 'IID_IFind', 'IID_IFindObj', 'IID_IFindObject', 'IID_IRemoteFindObj', 'IID_IGeoReference', 'IID_IGeoRefSaveAsDlg', 'IID_IPatch', 'IID_ILegendFormat2', 'IID_ILegendLayout', 'IID_IDynamicLegendItem', 'IID_ILegendItem2', 'IID_ILegendItem3', 'IID_IDynamicLegendClass', 'IID_IDynamicLegendLayer', 'IID_IDynamicLegendRenderer', 'IID_IBorder', 'IID_IBackground', 'IID_IFrameElement', 'IID_IElementCollection', 'IID_IElementCollection2', 'IID_ILayerFactoryHelper', 'IID_ILayerPropertySheet', 'IID_IElementProperties', 'IID_IElementProperties2', 'IID_IElementProperties3', 'IID_IGraphicElement', 'IID_IBoundsProperties', 'IID_IFrameDraw', 'IID_IShadow', 'IID_IFrameProperties', 'IID_IPictureElement', 'IID_IPictureElement2', 'IID_IPictureElement3', 'IID_IPictureElement4', 'IID_IPictureElement5', 'IID_IOlePictureElement', 'IID_IGraphicsLayer', 'IID_ISelection', 'IID_ISelectionEnvironment', 'IID_IBarrierCollection', 'IID_IFeatureLayer', 'IID_IGroupElement', 'IID_IGraphicsContainer', 'IID_IAnnotateLayerProperties', 'IID_IAnnotateLayerPropertiesCollection', 'IID_IAnnotateMapProperties', 'IID_IFrameDecoration', 'IID_ISymbolBorder', 'IID_ISymbolBackground', 'IID_IQuerySize', 'IID_ISymbolShadow', 'IID_IElementShutdown', 'IID_IElementEditVertices', 'IID_IElementEditCallout', 'IID_IGraphicsComposite', 'IID_ILineElement', 'IID_IMarkerElement', 'IID_IFillShapeElement', 'IID_ITextElement', 'IID_IGroupElement2', 'IID_IGroupElement3', 'IID_IMultiPartTextElement', 'IID_ISelectionEvents', 'IID_IOverflowGraphicsContainer', 'IID_IElementOperation', 'IID_IElementEditVerticesOperation', 'IID_IGraphicsContainerSelect', 'IID_IAnnotationElement', 'IID_IGroupSymbolElement', 'IID_ISymbolCollectionElement', 'IID_IInkGraphic', 'IID_IColumnProperties', 'IID_IOleFrame', 'IID_IGraphicsContainerProperty', 'IID_IGraphicsLayerScale', 'IID_IText3DElement', 'IID_IGraphicElements', 'IID_IFeatureIdentifyObj', 'IID_IRowIdentifyObject', 'IID_IFeatureFindData2', 'IID_ILineLabelPosition', 'IID_ILineLabelPlacementPriorities', 'IID_IPointPlacementPriorities', 'IID_IBasicOverposterLayerProperties', 'IID_IAnnotationExpressionParser', 'IID_IAnnotationExpressionEngine', 'IID_ILabelEngineLayerProperties', 'IID_IPlacedObject', 'IID_IPlacedObject2', 'IID_IPlacedObject3', 'IID_IOverposterLayerProperties', 'IID_IOverposterLayerProperties2', 'IID_IOverposterProperties', 'IID_IOverposterOptions', 'IID_IOverposterOptions2', 'IID_IOverposter', 'IID_IOverposter2', 'IID_IOverposter3', 'IID_IOverposter4', 'IID_IBasicOverposterLayerProperties2', 'IID_IBasicOverposterLayerProperties3', 'IID_IBasicOverposterLayerProperties4', 'IID_IBasicOverposterEvents', 'IID_IMaplexRotationProperties', 'IID_IMaplexRotationProperties2', 'IID_IMaplexLabelStackingProperties', 'IID_IMaplexOffsetAlongLineProperties', 'IID_IMaplexOverposterLayerProperties', 'IID_IMaplexOverposterLayerProperties2', 'IID_IMaplexOverposterLayerProperties3', 'IID_IMaplexOverposterLayerProperties4', 'IID_IMaplexDictionaryEntry', 'IID_IMaplexDictionary', 'IID_IMaplexDictionaries', 'IID_IMaplexKeyNumberGroup', 'IID_IMaplexKeyNumberGroups', 'IID_IMaplexOverposterProperties', 'IID_IMaplexOverposterProperties2', 'IID_ILabelEngineLayerProperties2', 'IID_IAnnotateLayerTransformationProperties', 'IID_IAnnotationPropertiesConverter', 'IID_ILabelStyle', 'IID_ILabelStyle2', 'IID_ILayerFields', 'IID_IAnnotateLayerPropertiesCollection2', 'IID_IAnnotationExpressionParser2', 'IID_ICodedValueAttributes', 'IID_IHotLinkExpressionProperties', 'IID_ILabelEnvironment', 'IID_IRotationRenderer', 'IID_IHyperlink', 'IID_IHyperlinkContainer', 'IID_IHotlinkContainer', 'IID_IFeatureExportInfoGenerator', 'IID_IExportSupport', 'IID_IFeatureRenderer', 'IID_IFeatureRendererUpdate', 'IID_IClassBreaksUIProperties', 'IID_IClassBreaksUIProperties2', 'IID_IDataSampling', 'IID_IDataNormalization', 'IID_IProportionalSymbolRenderer', 'IID_ITransparencyRenderer', 'IID_ILevelRenderer', 'IID_ILookupSymbol', 'IID_ILookupLegendClass', 'IID_IBivariateRenderer', 'IID_IScaleDependentRenderer', 'IID_IRendererFields', 'IID_IChartRenderer', 'IID_IPieChartRenderer', 'IID_ICalcRendererValues', 'IID_ICalcRendererValues2', 'IID_IDotDensityRenderer', 'IID_IDotDensityRenderer2', 'IID_IDotDensityUIRenderer', 'IID_IHorizontalLegendItem', 'IID_IVerticalLegendItem', 'IID_INestedLegendItem', 'IID_IHorizontalBarLegendItem', 'IID_IFeatureSelectionRenderer', 'IID_IUniqueValueInfo', 'IID_IClassBreakInfo', 'IID_IUniqueValueInfos', 'IID_IClassBreakInfos', 'IID_IDataExclusion', 'IID_IDataExclusion2', 'IID_IRotationRenderer2', 'IID_ISelectionEnvironmentThreshold', 'IID_ISelectionEnvironmentStorage', 'IID_ISelectionEnvironmentLayer', 'IID_IFeatureLayerSelectionEvents', 'IID_IHotlinkMacro', 'IID_IDisplayTable', 'IID_IFeatureLayer2', 'IID_IGeoFeatureLayer', 'IID_ITopologyLayer', 'IID_ITopologyErrorSelection', 'IID_ITableSelection', 'IID_IFeatureSelection', 'IID_IDefinitionExpressionEvents', 'IID_IFeatureLayerDefinition', 'IID_IFeatureLayerDefinition2', 'IID_ITableDefinition', 'IID_ISelectionLayerDefinition', 'IID_IDisplayRelationshipClass', 'IID_IFieldInfoSet', 'IID_IOrderedLayerFields', 'IID_IDisplayExpressionProperties', 'IID_IDisplayString', 'IID_IHotlinkExpression', 'IID_ICompositeGraphicsLayer', 'IID_ICompositeGraphicsLayer2', 'IID_IFeatureLayerSymbology', 'IID_IRelationshipClassCollection', 'IID_IRelationshipClassCollectionEdit', 'IID_ISimpleRenderer', 'IID_IClassBreaksRenderer', 'IID_IUniqueValueRenderer', 'IID_IUniqueValueRenderer2', 'IID_IMarker3DRotationAngles', 'IID_ISizeRenderer', 'IID_IRendererClasses', 'IID_IBasicHistogram', 'IID_ITableHistogram', 'IID_ITableHistogram2', 'IID_IGraphicsContainerEvents', 'IID_ILayerExtensionDraw', 'IID_ILayerExtensionInvalidate', 'IID_ISymbolLevels', 'IID_IFeatureCache', 'IID_IFeatureCache2', 'IID_IInteractiveSearch', 'IID_IHTMLPopupInfo', 'IID_IHTMLPopupInfo2', 'IID_IHTMLPopupIdentify', 'IID_IHTMLPopupIdentify2', 'IID_IEditTemplate', 'IID_IEditTemplateFactory', 'IID_IEditTemplateManager', 'IID_ITimeDisplayTable', 'IID_ITimeDisplayTable2', 'IID_IExpression', 'IID_ICoverageAnnotationLayerFactory', 'IID_IGroupLayer', 'IID_ILayerMasking', 'IID_ILevelMasking', 'IID_ICoverageAnnotationLayer', 'IID_ICoverageAnnotationLayer2', 'IID_ICoverageAnnotationSel', 'IID_ICoverageAnnotationLayerWrite', 'IID_IDimensionStyle', 'IID_IDimensionStyleDisplay', 'IID_IDimensionStyleText', 'IID_IDimensionShape', 'IID_IDimensionFeature', 'IID_IEnumDimensionStyle', 'IID_IDimensionStyles', 'IID_IDimensionClassExtension', 'IID_IDimensionGraphic', 'IID_IDimensionClassExtension2', 'IID_INewDimensionFeedback', 'IID_IModifyDimensionFeedback', 'IID_IAnnotateFeature', 'IID_IAnnotateFeature2', 'IID_IAnnotationErrorEvents', 'IID_IMapOverposter', 'IID_IExtentStack', 'IID_IFDOGraphicsLayer', 'IID_IFDOGraphicsLayer2', 'IID_IAnnotationLayer', 'IID_IFDOGraphicsLayerRead', 'IID_IFDOAttributeConversion', 'IID_IFDOGraphicsLayerFactory', 'IID_IAnnotationLayerFactory', 'IID_ISymbolSubstitution', 'IID_IAnnotationFeature', 'IID_IAnnotationFeature2', 'IID_IAnnoClass', 'IID_IAnnotationClassExtension', 'IID_IAnnotationClassExtension2', 'IID_IAnnoClassAdmin', 'IID_IAnnoClassAdmin2', 'IID_IAnnoClassAdmin3', 'IID_IConvertFDOAnnoToCoverageAnno', 'IID_IFDOGraphicsContainer', 'IID_IAnnotationSublayer', 'IID_IBasemapSubLayer', 'IID_IShader', 'IID_IArrayOfIShader', 'IID_IReadingDirection', 'IID_ICompositeMapSurround', 'IID_IMapEvents', 'IID_IMapEvents2', 'IID_IMapSurroundEvents', 'IID_IContextAnalyzer', 'IID_IViewManager', 'IID_IBasicMap2', 'IID_IBasicMap', 'IID_IMapClipOptions', 'IID_IMapLayers', 'IID_IMapLayers2', 'IID_IMapBarriers', 'IID_IMapBarriers2', 'IID_IMapAdmin', 'IID_IMapAdmin2', 'IID_IMapAdmin3', 'IID_IMapAdmin4', 'IID_IMapCache', 'IID_ITableCollection', 'IID_IStandaloneTable', 'IID_IStandaloneTableCollection', 'IID_IDataBrowser', 'IID_IScaleBar2', 'IID_IScaleLine', 'IID_ISingleFillScaleBar', 'IID_IDoubleFillScaleBar', 'IID_IScaleMarks', 'IID_IMapInset2', 'IID_IMarkerNorthArrow', 'IID_IPictureNorthArrow', 'IID_IFeatureCursorBuffer', 'IID_IFeatureCursorBuffer2', 'IID_IBufferProcessingSymbology', 'IID_IBufferProcessingParameter', 'IID_IFeatureIndex', 'IID_IIndexQuery', 'IID_IIndexQuery2', 'IID_IFeatureIndex2', 'IID_IBasicMapIdentifyObject', 'IID_IBasicGeoprocessor', 'IID_IMapGeographicTransformations', 'IID_IViewRefresh', 'IID_IInvalidArea2', 'IID_IInvalidArea3', 'IID_ITableFactory', 'IID_ILODInfo', 'IID_ILODInfos', 'IID_ILayerCacheInfo', 'IID_ILayerCacheInfos', 'IID_ICacheStorageInfo', 'IID_ICacheDatasetInfo', 'IID_ITileCacheInfo', 'IID_ITileImageInfo', 'IID_ITileImageInfo2', 'IID_ICacheControlInfo', 'IID_ICacheDescriptionInfo', 'IID_ICacheDescriptionInfo2', 'IID_ICacheInfo', 'IID_ITileCacheStats', 'IID_ICacheInfo2', 'IID_IMapCooker3', 'IID_ITilesTable', 'IID_IMapCacheStorageFormatConvertor', 'IID_IMapCacheExporter', 'IID_IMapCacheToRasterFunctionArgument', 'IID_IDynamicMap', 'IID_IChangeDatabaseVersion', 'IID_IMapNavigator', 'IID_IDocumentPreview', 'IID_IDocumentInfo', 'IID_IDocumentInfo2', 'IID_IDocumentInfo3', 'IID_IAdvancedShader', 'IID_IRasterShader', 'IID_IRasterDRAShader', 'IID_IMapTimeDisplay', 'IID_IMapTimeDisplay2', 'IID_ITileCacheInfoEx', 'IID_IServiceLayerCredits', 'IID_IPage', 'IID_IRulerSettings', 'IID_ISnapGrid', 'IID_ISnapGuides', 'IID_IImageInset', 'IID_IMapGridBorder', 'IID_IGridLabelExport', 'IID_IDMSGridLabel', 'IID_IFormattedGridLabel', 'IID_IMixedFontGridLabel', 'IID_IMixedFontGridLabel2', 'IID_IIndexGridTabStyle', 'IID_IBackgroundTabStyle', 'IID_ISimpleMapGridBorder', 'IID_ICalibratedMapGridBorder', 'IID_IMeasuredGrid', 'IID_IProjectedGrid', 'IID_IMapFrameEvents', 'IID_IGridAxisTicks', 'IID_IGridHatch', 'IID_IGridInteriorLabels', 'IID_IDMSGridLabel2', 'IID_IDMSGridLabel3', 'IID_ICornerGridLabel', 'IID_IMgrsGrid', 'IID_IGridLadderLabels', 'IID_IPrincipalDigitsGridLabel', 'IID_IPageLayoutExtensions', 'IID_IPageEvents', 'IID_IGraphicSnap', 'IID_IGraphicSnapEnvironment', 'IID_IGraphicSnapEnvironment2', 'IID_IGlobeDocument', 'IID_ILayerFile', 'IID_ICartoItemInfoHelper', 'IID_IRasterFormatInfo', 'IID_IRasterDefaultsEnv', 'IID_IRasterDefaultsEnv2', 'IID_IRasterDefaultsEnv3', 'IID_IRasterDefaultsEnv4', 'IID_IRasterDefaultsEnv5', 'IID_IRasterDefaultsEnv6', 'IID_IRasterDefaultsEnv7', 'IID_IRasterDefaultsEnv8', 'IID_IRasterDefaultsEnv9', 'IID_IImageServiceInfo', 'IID_IImageServerLayer', 'IID_IMosaicLayer', 'IID_IWCSLayer', 'IID_IRasterIdentifyObj', 'IID_IRasterIdentifyObj2', 'IID_IRasterCatalogLayer', 'IID_IColorRampSymbol', 'IID_IColorRampSymbol2', 'IID_IRasterSpatialSelection', 'IID_IGeoReferenceEvents', 'IID_IGdbRasterCatalogLayer', 'IID_IRasterCatalogDisplayProps', 'IID_IRasterCatalogDisplayProps2', 'IID_IRasterLayerExport', 'IID_IRasterLayerExport2', 'IID_IRasterLayerExport3', 'IID_IRasterExporter', 'IID_IRenderedThumbnailBuilder', 'IID_INITFGraphicsLayer', 'IID_IRasterBasemapLayer', 'IID_IRasterBasemapLayerFactory', 'IID_ILayerDescriptor', 'IID_ITOCClass', 'IID_ITOCGroup', 'IID_IMxdServerQuery', 'IID_IQueryByLayer', 'IID_IMxdServerStatus', 'IID_ILayerDescription', 'IID_ILayerDescription2', 'IID_ILayerResultOptions', 'IID_ILayerDescription3', 'IID_IMapArea', 'IID_ILayerDescriptions', 'IID_IMapDescription', 'IID_ITileDescription', 'IID_IMapDescription2', 'IID_IMapDescriptions', 'IID_IMapFrameDescription', 'IID_IMapFrameDescriptions', 'IID_IMapLayerInfo', 'IID_IImageType', 'IID_IImageDisplay', 'IID_IImageDescription', 'IID_IImageResult', 'IID_IImageResult2', 'IID_IMapImage', 'IID_IMapImages', 'IID_ILayoutImage', 'IID_ISQLSyntaxInfo', 'IID_IMapLayerInfos', 'IID_IMapServerBookmark', 'IID_IMapServerBookmarks', 'IID_IMapServerFindResult', 'IID_IMapServerFindResults', 'IID_IMapServerHyperlink', 'IID_IMapServerHyperlinks', 'IID_IMapServerLegendPatch', 'IID_IMapServerLegendClass', 'IID_IMapServerLegendClasses', 'IID_IMapServerLegendGroup', 'IID_IMapServerLegendGroups', 'IID_IMapServerLegendInfo', 'IID_IMapServerLegendInfos', 'IID_IImageDisplay2', 'IID_IQueryResultOptions', 'IID_IQueryResult', 'IID_IMapTableDescription', 'IID_IRelateInfo', 'IID_IRelateInfos', 'IID_IMapTableInfo', 'IID_IStandaloneTableInfo', 'IID_IRelateDescription', 'IID_IFieldDomainInfo', 'IID_IFieldDomainInfos', 'IID_ISubtypeInfo', 'IID_ISubtypeInfos', 'IID_IImageResults', 'IID_IMapLayerInfo3', 'IID_ILabelClassDescription', 'IID_ILabelClassDescriptions', 'IID_ILabelingDescription', 'IID_ILabelClassDescription2', 'IID_IPointLabelPlacementDescription', 'IID_ILineLabelPlacementDescription', 'IID_IPolygonLabelPlacementDescription', 'IID_ILayerDrawingDescriptions', 'IID_IMapTableSubtypeInfo', 'IID_IMapTableSubtypeInfos', 'IID_IServerSymbolOutputOptions', 'IID_IMapLayerInfo4', 'IID_IDynamicLayerDescription', 'IID_IDataSourceDescription', 'IID_ITableDataSourceDescription', 'IID_IQueryTableDataSourceDescription', 'IID_IStatisticDescription', 'IID_IStatisticDescriptions', 'IID_IStatisticsRequest', 'IID_IDataClassificationDef', 'IID_IUniqueValuesDef', 'IID_IClassBreaksDef', 'IID_IJoinTableSourceDescription', 'IID_IMapTableSourceDescription', 'IID_IMapLayerInfo2', 'IID_IMapServerInfo', 'IID_IMapServerInfo2', 'IID_IMapDescription3', 'IID_IPageDescription', 'IID_IMapServerInit', 'IID_IMapServerInit2', 'IID_IMapServerData', 'IID_ICenterAndScale', 'IID_ICenterAndSize', 'IID_IFeatureExtent', 'IID_IMapExtent', 'IID_ITiledMapServer', 'IID_ITiledMapServer2', 'IID_ITiledMapServer3', 'IID_IFeatureLayerDrawingDescription', 'IID_IFeatureLayerDrawingDescription2', 'IID_ILayerDrawingDescriptionFactory', 'IID_IRasterLayerDrawingDescription', 'IID_IServerLayerExtension', 'IID_IMapServerGeoTransformation', 'IID_IMapTableInfo2', 'IID_IStandaloneTableInfos', 'IID_IStandaloneTableDescriptions', 'IID_IMapServerInfo3', 'IID_IMapServerInfo4', 'IID_IMapServerTimeInfo', 'IID_IMapServerTimeInfo2', 'IID_IRelatedRecordGroup', 'IID_IRelatedRecordGroups', 'IID_IRelatedRecordSet', 'IID_IServiceLayerImageFormat', 'IID_IMapServerDataAccess', 'IID_IMapTableTimeInfo', 'IID_IMapTableTimeDescription', 'IID_IMapTimeDescription', 'IID_IMapTimeDescription2', 'IID_IDynamicMapTableDescription', 'IID_IRasterDataSourceDescription', 'IID_IRelateInfo2', 'IID_IMapTableInfo3', 'IID_IMapServerObjectLANProxy', 'IID_IMapServerProxyImpl', 'IID_IMapServerSublayer', 'IID_IMapServerLayer', 'IID_IMapServerSublayer2', 'IID_IMapServerGroupLayer', 'IID_IMapServerRESTLayer', 'IID_IWMTSLayer', 'IID_ITinRenderer', 'IID_ITinIllumination', 'IID_ITinSingleSymbolRenderer', 'IID_ITinContourRenderer', 'IID_ITinColorRampRenderer', 'IID_ITinUniqueValueRenderer', 'IID_ITerrainRenderer', 'IID_ITerrainRenderer2', 'IID_IDatasetRenderer', 'IID_IMultiResolutionRenderer', 'IID_ITerrainAttributeRenderer', 'IID_ILasAttributeRenderer', 'IID_ITinLayer', 'IID_ITinLayer2', 'IID_ITinIdentifyObj', 'IID_ITinIdentifyObj2', 'IID_ITerrainLayer', 'IID_ITerrainLayer2', 'IID_ILasDatasetLayer', 'IID_ICadLayer', 'IID_ICad3DRenderMode', 'IID_ICadIdentifyObj2', 'IID_IFeatureLayerExtendedDefinition', 'IID_IACLayer', 'IID_IACMap', 'IID_IACSymbol', 'IID_IACLayer2', 'IID_IACAxl', 'IID_IACConnector', 'IID_IACMapAdmin', 'IID_IACLayerAdmin', 'IID_IACFeatureLayer', 'IID_IACFeatureLayerAdmin', 'IID_IACImageLayerAdmin', 'IID_IACAcetateLayer', 'IID_IACAcetateLayerAdmin', 'IID_IACSimpleRenderer', 'IID_IACGroupRenderer', 'IID_IACScaleDependentRenderer', 'IID_IACValueMapRenderer', 'IID_IACLineLabelPosition', 'IID_IACLabelRenderer', 'IID_IACSimpleLineSymbol', 'IID_IACHashLineSymbol', 'IID_IACSimplePolygonSymbol', 'IID_IACSimpleFillSymbol', 'IID_IACRasterFillSymbol', 'IID_IACGradientFillSymbol', 'IID_IACSimpleMarkerSymbol', 'IID_IACTrueTypeMarkerSymbol', 'IID_IACRasterMarkerSymbol', 'IID_IACCalloutMarkerSymbol', 'IID_IACRasterShieldSymbol', 'IID_IACTextSymbol', 'IID_IACTextMarkerSymbol', 'IID_IACShieldSymbol', 'IID_IIMSSubLayer', 'IID_IIMSMapLayer', 'IID_IIMSSymbolImporter', 'IID_IIMSGlobeSubServiceDescription', 'IID_IIMSGlobeXMLNode', 'IID_IIMSGlobeXMLParser', 'IID_IIMSGlobeConnection', 'IID_IRealTimeFeed', 'IID_IPositionTrails', 'IID_IRealTimeLog', 'IID_IRealTimeDestination', 'IID_IRealTimeFeedSnap', 'IID_IGpsDisplayProperties', 'IID_IGpsConnection', 'IID_IGpsFeed', 'IID_IRealTimeFeedEvents', 'IID_IRealTimeFeedSimulator', 'IID_IRealTimeFeedManagerEvents', 'IID_IMobileLayerInfo', 'IID_IMobileLayerInfos', 'IID_IMobileMapInfo', 'IID_IWMSServer', 'IID_IWCSServer', 'IID_IWMSLayer', 'IID_IWMSGroupLayer', 'IID_IWMSMapLayer', 'IID_IWMSIdentifyObject', 'IID_IWMSLayer2', 'IID_IEnumLocatedNetworkElement', 'IID_INetworkLayer', 'IID_INetworkRenderer', 'IID_ILocatedNetworkTrafficValue', 'IID_INetworkRendererCollection', 'IID_INetworkIdentifyObj', 'IID_INetworkLayerSymbology', 'IID_ISimpleNetworkRenderer', 'IID_INetworkTrafficRenderer', 'IID_INetworkEdgeRenderer', 'IID_INetworkEdgeRenderer2', 'IID_INetworkSourceRenderer', 'IID_IRepresentationRenderer', 'IID_IRepresentationLegendClass', 'IID_IDataGraphBase', 'IID_IDataGraphTPenProperties', 'IID_ISeriesProperties', 'IID_IDataGraphTGeneralProperties', 'IID_IDataGraphTLegendProperties', 'IID_IDataGraphTAxisProperties', 'IID_IDataGraphT', 'IID_IDataGraphCollectionEvents', 'IID_IDataGraphTEvents', 'IID_IDataGraphCollection', 'IID_IDataGraphTSymbolProperties', 'IID_IBarSeriesProperties', 'IID_IPointSeriesProperties', 'IID_IHistogramSeriesProperties', 'IID_IBoxPlotSeriesProperties', 'IID_IPieSeriesProperties', 'IID_IAreaSeriesProperties', 'IID_ILineSeriesProperties', 'IID_IFunctionSeriesProperties', 'IID_IBubbleSeriesProperties', 'IID_IPolarSeriesProperties', 'IID_IDataSortSeriesProperties', 'IID_IDataGroupSeriesProperties', 'IID_IScatterPlotMatrixSeriesProperties', 'IID_IDataGraphTPrivate', 'IID_IDataGraphTElement', 'IID_IParameterInfo', 'IID_ICadastralFabricLayer', 'IID_ICadastralFabricParcelLayer', 'IID_ICFDataSourcePageExtension', 'IID_ICadastralFabricLayerEvents', 'IID_ICadastralFabricSelection', 'IID_ICadastralFabricSubLayer', 'IID_ICadastralFabricSubLayer2', 'IID_IDynamicLayer', 'IID_IDynamicLayer2', 'IID_IDynamicHit', 'IID_IGeoImageDescription', 'IID_IAISRequest', 'IID_IImageServer', 'IID_IImageServer2', 'IID_IImageServerDownloadResult', 'IID_IImageServerDownloadResults', 'IID_IMosaicRule', 'IID_IImageServerIdentifyResult', 'IID_IRenderingRule', 'IID_IImageServer3', 'IID_ITiledImageServer', 'IID_IPrivateServerObjectLANProxy', 'IID_IImageServerObjectLANProxy', 'IID_IImageServerProxyImpl', 'IID_IImageServerIdentifyResults', 'IID_IImageServerEditResult', 'IID_IImageServerEditResults', 'IID_IImageServerMeasureResult', 'IID_IRasterFunctionInfo', 'IID_IRasterFunctionInfos', 'IID_IRasterTypeInfo', 'IID_IRasterTypeInfos', 'IID_IImageView', 'IID_IImageServiceInfo2', 'IID_IImageServiceInfo3', 'IID_IImageQueryFilter', 'IID_IGeoImageDescription2', 'IID_IGeoImageDescription3', 'IID_IRasterItemDescription', 'IID_IRasterItemDescriptions', 'IID_IImageServer4', 'IID_IImageServerInit', 'IID_IImageServerInit2', 'IID_IImageServerInit3', 'IID_IImageServerObjects', 'IID_IPluginImageLayer', 'IID_IMosaicLODInfoHelper', 'IID_ISimpleMapImage', 'IID_IImageServerIdentifyResultEdit', 'IID_IImageCooker', 'IID_IImageServerName', 'IID_IImageServerLayer2', 'IID_IImageServerLayer3', 'IID_IISLFootprintDisplayProps', 'IID_IDataObjectEx', 'IID_IDataObjectArray', 'IID_IDataObjects', 'IID_IPropertyInfo', 'IID_IPropertyInfos', 'IID_ITemplateInfo', 'IID_ITemplateInfos', 'IID_IDataObjectType', 'IID_IDataObjectTypes', 'IID_IDataObjectTable', 'IID_IDataObjectTables', 'IID_IDomainInfo', 'IID_IGraphicFeature', 'IID_IGraphicFeatures', 'IID_IGraphicFeatureLayer', 'IID_IGraphicFeatureLayers', 'IID_IGFSTableDescription', 'IID_IGFSTableDescriptions', 'IID_IGFSReplicaDescription', 'IID_IGFLayerTableDataMapping', 'IID_IGFLayerTableDataMappings', 'IID_IDataObjectGroup', 'IID_IDataObjectGroupArray', 'IID_IDataObjectGroups', 'IID_ITableEdit', 'IID_ITableEdits', 'IID_IEditResult', 'IID_IEditResults', 'IID_ITableEditResult', 'IID_ITableEditResults', 'IID_IServiceDataOptions', 'IID_IServiceData', 'IID_IGraphicFeatureServer', 'IID_IGraphicFeatureServerReplication', 'IID_ITableIdentity', 'IID_ITableIdentities', 'IID_IFeatureServerInfo', 'IID_IDataObjectTable2', 'IID_IGraphicFeatureLayer2', 'IID_IGraphicFeatureServer2', 'IID_IMosaicSubLayer', 'IID_IJPIPServer', 'IID_ILayerTablesAndDataMappings', 'IID_IGFSReplicationAgent', 'IID_IDataSourceHelperMap', 'IID_IDataSourceHelperLayer', 'IID_IDataSourceHelperStandaloneTable', 'IID_IMSDHelper', 'IID_IMSDHelper2', 'IID_IFeatureServiceEditExtension', 'IID_IFeatureServiceLayerEditExtension', 'IID_IMapSurroundFrame', 'IID_IMapSurround', 'IID_IEnumMapSurround', 'IID_ILegend', 'IID_IScaleBar', 'IID_IMapInset', 'IID_IScaleText', 'IID_IScaleText2', 'IID_INorthArrow', 'IID_INorthArrow2', 'IID_IOverview', 'IID_IOverview2', 'IID_IMapDescriptor', 'IID_IMapServerLayout', 'IID_IMap', 'IID_IAnnotateMap', 'IID_IExportInfoGenerator', 'IID_IAnnotateMap2', 'IID_ILabelCache', 'IID_IStandardAnnotateMap', 'IID_IActiveView', 'IID_IActiveViewEvents', 'IID_IConvertLabelsToAnnotation', 'IID_IBasemapLayer', 'IID_IMapSurroundFactory', 'IID_IMapEvents3', 'IID_IMapAutoExtentOptions', 'IID_IMaps2', 'IID_IMaps', 'IID_IEnumMap', 'IID_ISpatialBookmark', 'IID_IPushPin', 'IID_IAOIBookmark', 'IID_IFeatureBookmark', 'IID_IEnumSpatialBookmark', 'IID_IMapBookmarks', 'IID_IMapBookmarks2', 'IID_ILegend2', 'IID_ILegend3', 'IID_IFeatureFindData', 'IID_IMXFeatureFindData', 'IID_IMapIdentifyObject', 'IID_IRotateOperation', 'IID_IMapCooker', 'IID_IMapCooker2', 'IID_IPageLayout', 'IID_IMxdContents', 'IID_IPrintAndExport', 'IID_IPageLayoutSnap', 'IID_IPageLayout2', 'IID_IPageLayout3', 'IID_IMapDocument', 'IID_IMxdServer', 'IID_IMxdServerObjects', 'IID_IMapServerObjects', 'IID_IMapServerObjects2', 'IID_IMapReader', 'IID_IMapServerObjects3', 'IID_IRealTimeFeedManager', 'IID_IMobileSync', 'IID_IDynamicCacheLayerManager', 'IID_IDynamicCacheLayerManager2', 'IID_IDataSourceHelperMapDocument', 'IID_IMapFrame', 'IID_ILocatorRectangle', 'IID_ILocatorRectangle2', 'IID_IMapGrid', 'IID_IGridLabel', 'IID_IReferenceSystem', 'IID_IGridLabel2', 'IID_IGraticule', 'IID_IIndexGrid', 'IID_ICustomOverlayGrid', 'IID_IMapGrids', 'IID_IMapServerIdentifyResults', 'IID_IMapServer', 'IID_IMapServer2', 'IID_IKmlConversion', 'IID_IMapServer3', 'IID_IMapServer4', 'IID_IMobileSync2', 'IID_IGraphicFeatureServerInit', 'IID_ISDGenerator', 'IID_IMapServerIdentifyResult', 'IID_IMapServerIdentifyObject', 'IID_IMapServerRelationships', 'IID_IMapServerRow', 'IID_IMapServerRows', 'IID_IMapServerRelationship', 'IID_IMapServerRow2', 'IID_IMapServerIdentifyResult2', 'CLSID_RasterRendererMakerDefault', 'CLSID_RasterUniqueValueRenderer', 'CLSID_RasterClassifyColorRampRenderer', 'CLSID_RasterRGBRenderer', 'CLSID_RasterStretchColorRampRenderer', 'CLSID_RasterColormapRenderer', 'CLSID_RasterDiscreteColorRenderer', 'CLSID_RasterCatalogRendererPickerDefault', 'CLSID_RenderedRaster', 'CLSID_LegendGroups', 'CLSID_LegendClasses', 'CLSID_LegendClass', 'CLSID_LegendClassFormat', 'CLSID_LegendGroup', 'CLSID_AreaPatch', 'CLSID_LinePatch', 'CLSID_FieldInfo', 'CLSID_FrameElement', 'CLSID_PictureElement', 'CLSID_LayerEventsHelper', 'CLSID_DummyLayer', 'CLSID_DummyGraduatedMarkerLayer', 'CLSID_LayerFactoryHelper', 'CLSID_InkGraphic', 'CLSID_LineElement', 'CLSID_MarkerElement', 'CLSID_RectangleElement', 'CLSID_PolygonElement', 'CLSID_TextElement', 'CLSID_ParagraphTextElement', 'CLSID_CircleElement', 'CLSID_EllipseElement', 'CLSID_GroupElement', 'CLSID_MultiPatchElement', 'CLSID_ElementCollection', 'CLSID_SymbolBorder', 'CLSID_SymbolBackground', 'CLSID_SymbolShadow', 'CLSID_SimpleElementSelection', 'CLSID_Text3DElement', 'CLSID_GraphicElements', 'CLSID_AnnotationElement', 'CLSID_PMFTitleTextElement', 'CLSID_FeatureFindData', 'CLSID_BarrierCollection', 'CLSID_BasicOverposter', 'CLSID_BasicOverposterLayerProperties', 'CLSID_LineLabelPosition', 'CLSID_LineLabelPlacementPriorities', 'CLSID_PointPlacementPriorities', 'CLSID_BasicOverposterProperties', 'CLSID_MaplexDictionaryEntry', 'CLSID_MaplexDictionary', 'CLSID_MaplexDictionaries', 'CLSID_MaplexKeyNumberGroup', 'CLSID_MaplexKeyNumberGroups', 'CLSID_MaplexOverposterProperties', 'CLSID_MaplexLabelEngineLayerProperties', 'CLSID_MaplexOverposterLayerProperties', 'CLSID_MaplexRotationProperties', 'CLSID_MaplexLabelStackingProperties', 'CLSID_MaplexOffsetAlongLineProperties', 'CLSID_MaplexAnnotationPropertiesConverter', 'CLSID_MaplexLabelStyle', 'CLSID_BasicPlacedObject', 'CLSID_AnnotateLayerPropertiesCollection', 'CLSID_AnnotationVBScriptEngine', 'CLSID_AnnotationJScriptEngine', 'CLSID_AnnotationPythonEngine', 'CLSID_LabelStyle', 'CLSID_LabelEnvironment', 'CLSID_LabelEngineLayerProperties', 'CLSID_AnnotationExpressionParser', 'CLSID_HotLinkExpressionProperties', 'CLSID_HotLinkVBScriptEngine', 'CLSID_HotLinkJScriptEngine', 'CLSID_HotLinkPythonEngine', 'CLSID_HotLinkExpressionParser', 'CLSID_ScaleDependentRenderer', 'CLSID_ProportionalSymbolRenderer', 'CLSID_BiUniqueValueRenderer', 'CLSID_ChartRenderer', 'CLSID_CalcRendererValues', 'CLSID_DotDensityRenderer', 'CLSID_HorizontalLegendItem', 'CLSID_VerticalLegendItem', 'CLSID_HorizontalBarLegendItem', 'CLSID_NestedLegendItem', 'CLSID_UniqueValueInfo', 'CLSID_ClassBreakInfo', 'CLSID_UniqueValueInfos', 'CLSID_ClassBreakInfos', 'CLSID_FeatureLayer', 'CLSID_Hyperlink', 'CLSID_FieldInfoSet', 'CLSID_DisplayExpressionProperties', 'CLSID_FeatureLayerSelectionEvents', 'CLSID_GraphicsContainerEvents', 'CLSID_SelectionEnvironment', 'CLSID_CompositeGraphicsLayer', 'CLSID_FeatureIDSet', 'CLSID_SimpleRenderer', 'CLSID_UniqueValueRenderer', 'CLSID_ClassBreaksRenderer', 'CLSID_SimpleIdentifyObject', 'CLSID_BasicTableHistogram', 'CLSID_FeatureCache', 'CLSID_GraphicsSubLayer', 'CLSID_TopologyLayer', 'CLSID_FeatureLayerFactory', 'CLSID_EngineTopologyLayerFactory', 'CLSID_EngineCoverageAnnotationLayerFactory', 'CLSID_ExportInfoGenerator', 'CLSID_EditTemplate', 'CLSID_EditTemplateFactory', 'CLSID_EditTemplateManager', 'CLSID_TimeQueryFilter', 'CLSID_GroupLayerFactory', 'CLSID_GroupLayer', 'CLSID_CoverageAnnotationLayer', 'CLSID_DimensionClassExtension', 'CLSID_DimensionStyle', 'CLSID_DimensionStyles', 'CLSID_DimensionFeature', 'CLSID_DimensionGraphic', 'CLSID_DimensionClassDescription', 'CLSID_NewDimensionFeedback', 'CLSID_ModifyDimensionFeedback', 'CLSID_DimensionShape', 'CLSID_DimensionLayer', 'CLSID_LabelCache', 'CLSID_AnnotateMap', 'CLSID_AnnotateFeature', 'CLSID_AnnotateMapProperties', 'CLSID_ConvertFDOAnnoToCoverageAnno', 'CLSID_FDOGraphicsLayerFactory', 'CLSID_AnnotationFeature', 'CLSID_AnnotationFeatureClassExtension', 'CLSID_FDOGraphicsLayer', 'CLSID_AnnotationFeatureClassDescription', 'CLSID_GraphicsLayerScale', 'CLSID_FDOGraphicsSublayer', 'CLSID_ConvertLabelsToAnnotation', 'CLSID_Map', 'CLSID_MapEvents', 'CLSID_MapEvents2', 'CLSID_MapEvents3', 'CLSID_DynamicMapEvents', 'CLSID_ScaleLine', 'CLSID_SteppedScaleLine', 'CLSID_HollowScaleBar', 'CLSID_SingleDivisionScaleBar', 'CLSID_Scalebar', 'CLSID_AlternatingScaleBar', 'CLSID_DoubleAlternatingScaleBar', 'CLSID_ScaleText', 'CLSID_MarkerNorthArrow', 'CLSID_Overview', 'CLSID_MapTitle', 'CLSID_MapInset', 'CLSID_Legend', 'CLSID_LegendFormat', 'CLSID_AOIBookmark', 'CLSID_FeatureBookmark', 'CLSID_FeatureCursorBuffer', 'CLSID_FeatureIndex', 'CLSID_BasicGeoprocessor', 'CLSID_InvalidArea', 'CLSID_TilesTable', 'CLSID_StandaloneTable', 'CLSID_MapSelection', 'CLSID_MapCooker', 'CLSID_TrackCancel', 'CLSID_DynamicDisplay', 'CLSID_DynamicGlyph', 'CLSID_DynamicGlyphFactory', 'CLSID_ChangeDatabaseVersion', 'CLSID_DocumentInfo', 'CLSID_BasemapLayer', 'CLSID_BasemapSubLayer', 'CLSID_ArrayOfIShader', 'CLSID_RasterShader', 'CLSID_RasterDRAShader', 'CLSID_ImageInset', 'CLSID_MapFrame', 'CLSID_MapSurroundFrame', 'CLSID_DMSGridLabel', 'CLSID_FormattedGridLabel', 'CLSID_MixedFontGridLabel', 'CLSID_BackgroundTabStyle', 'CLSID_ContinuousTabStyle', 'CLSID_RoundedTabStyle', 'CLSID_ButtonTabStyle', 'CLSID_SimpleMapGridBorder', 'CLSID_CalibratedMapGridBorder', 'CLSID_Graticule', 'CLSID_MeasuredGrid', 'CLSID_IndexGrid', 'CLSID_CustomOverlayGrid', 'CLSID_LocatorRectangle', 'CLSID_MgrsGrid', 'CLSID_CornerGridLabel', 'CLSID_PrintAndExport', 'CLSID_PageLayout', 'CLSID_Page', 'CLSID_RulerSettings', 'CLSID_SnapGrid', 'CLSID_SnapGuides', 'CLSID_GraphicSnapEnvironment', 'CLSID_GridSnap', 'CLSID_GuideSnap', 'CLSID_MarginSnap', 'CLSID_RulerSnap', 'CLSID_MapDocument', 'CLSID_LayerFile', 'CLSID_RasterDefaultsEnv', 'CLSID_RasterFormatInfo', 'CLSID_RasterLayer', 'CLSID_WCSLayer', 'CLSID_RasterCatalogLayer', 'CLSID_GdbRasterCatalogLayer', 'CLSID_ColorSymbol', 'CLSID_ColorRampSymbol', 'CLSID_RasterRGBSymbol', 'CLSID_SimpleRasterIdentifyObj', 'CLSID_RasterIdentifyObj', 'CLSID_GeoReferenceEvents', 'CLSID_RasterLayerExport', 'CLSID_RasterExporter', 'CLSID_RasterThumbnailBuilder', 'CLSID_RasterLayerFactory', 'CLSID_WCSLayerFactory', 'CLSID_RasterCatalogLayerFactory', 'CLSID_NetCDFLayerFactory', 'CLSID_NetCDFTableFactory', 'CLSID_NITFGraphicsLayer', 'CLSID_RasterServiceHelper', 'CLSID_RasterBasemapLayer', 'CLSID_RasterBasemapLayerFactory', 'CLSID_BmpPictureElement', 'CLSID_EmfPictureElement', 'CLSID_TifPictureElement', 'CLSID_JpgPictureElement', 'CLSID_ImgPictureElement', 'CLSID_SidPictureElement', 'CLSID_GifPictureElement', 'CLSID_PngPictureElement', 'CLSID_Jp2PictureElement', 'CLSID_QueryByLayer', 'CLSID_MxdServer', 'CLSID_MapDescriptor', 'CLSID_LayerDescriptor', 'CLSID_MapServerConfigurationFactory', 'CLSID_MapServer', 'CLSID_MapReader', 'CLSID_MapServerInfo', 'CLSID_MapLayerInfo', 'CLSID_MapDescription', 'CLSID_LayerDescription', 'CLSID_MapFrameDescription', 'CLSID_PageDescription', 'CLSID_ImageType', 'CLSID_ImageDisplay', 'CLSID_ImageDescription', 'CLSID_MapImage', 'CLSID_ImageResult', 'CLSID_LayoutImage', 'CLSID_MapServerIdentifyResult', 'CLSID_MapServerFindResult', 'CLSID_MapServerBookmark', 'CLSID_CenterAndScale', 'CLSID_CenterAndSize', 'CLSID_FeatureExtent', 'CLSID_MapExtent', 'CLSID_MapServerHyperlink', 'CLSID_MapServerRelationship', 'CLSID_MapServerRow', 'CLSID_SQLSyntaxInfo', 'CLSID_MapServerLegendPatch', 'CLSID_MapServerLegendClass', 'CLSID_MapServerLegendGroup', 'CLSID_MapServerLegendInfo', 'CLSID_MapDescriptions', 'CLSID_MapFrameDescriptions', 'CLSID_LayerDescriptions', 'CLSID_MapServerBookmarks', 'CLSID_MapServerIdentifyResults', 'CLSID_MapServerFindResults', 'CLSID_MapLayerInfos', 'CLSID_MapServerRows', 'CLSID_MapServerRelationships', 'CLSID_MapServerHyperlinks', 'CLSID_MapImages', 'CLSID_MapServerLegendGroups', 'CLSID_MapServerLegendClasses', 'CLSID_MapServerLegendInfos', 'CLSID_CacheInfo', 'CLSID_CacheDescriptionInfo', 'CLSID_CacheControlInfo', 'CLSID_TileImageInfo', 'CLSID_CacheStorageInfo', 'CLSID_CacheDatasetInfo', 'CLSID_TileCacheInfo', 'CLSID_LODInfo', 'CLSID_LODInfos', 'CLSID_LayerCacheInfo', 'CLSID_LayerCacheInfos', 'CLSID_FeatureLayerDrawingDescription', 'CLSID_FeatureLayerDrawingDescriptionFactory', 'CLSID_RasterLayerDrawingDescription', 'CLSID_RasterLayerDrawingDescriptionFactory', 'CLSID_LayerDrawingDescriptionFactory', 'CLSID_ServerLayerExtension', 'CLSID_LayerResultOptions', 'CLSID_QueryResultOptions', 'CLSID_QueryResult', 'CLSID_StandaloneTableDescription', 'CLSID_StandaloneTableInfo', 'CLSID_StandaloneTableDescriptions', 'CLSID_StandaloneTableInfos', 'CLSID_RelateInfo', 'CLSID_RelateInfos', 'CLSID_RelateDescription', 'CLSID_RelatedRecordGroup', 'CLSID_RelatedRecordGroups', 'CLSID_RelatedRecordSet', 'CLSID_SubtypeInfo', 'CLSID_SubtypeInfos', 'CLSID_FieldDomainInfo', 'CLSID_FieldDomainInfos', 'CLSID_ImageResults', 'CLSID_LabelingDescription', 'CLSID_LabelClassDescription', 'CLSID_LabelClassDescriptions', 'CLSID_PointLabelPlacementDescription', 'CLSID_LineLabelPlacementDescription', 'CLSID_PolygonLabelPlacementDescription', 'CLSID_LayerDrawingDescriptions', 'CLSID_MapTableSubtypeInfo', 'CLSID_MapTableSubtypeInfos', 'CLSID_ServerSymbolOutputOptions', 'CLSID_JoinTableSourceDescription', 'CLSID_MapTableSourceDescription', 'CLSID_TableDataSourceDescription', 'CLSID_QueryTableDataSourceDescription', 'CLSID_RasterDataSourceDescription', 'CLSID_StatisticDescription', 'CLSID_StatisticDescriptions', 'CLSID_StatisticsRequest', 'CLSID_UniqueValuesDef', 'CLSID_ClassBreaksDef', 'CLSID_MapServerLP', 'CLSID_MapServerIP', 'CLSID_MapServerObjectDescription', 'CLSID_CacheRasterDatasetName', 'CLSID_MapServerLayer', 'CLSID_MapServerLayerFactory', 'CLSID_FeatureServerLayerFactory', 'CLSID_SimpleMapServerIdentifyObject', 'CLSID_MapServerBasicSublayer', 'CLSID_MapServerIdentifySublayer', 'CLSID_MapServerFindSublayer', 'CLSID_MapServerQuerySublayer', 'CLSID_MapServerRESTLayer', 'CLSID_MapServerRESTSubLayer', 'CLSID_WMTSLayerFactory', 'CLSID_WMTSLayer', 'CLSID_TinFaceRenderer', 'CLSID_TinEdgeRenderer', 'CLSID_TinNodeRenderer', 'CLSID_TinSlopeRenderer', 'CLSID_TinAspectRenderer', 'CLSID_TinElevationRenderer', 'CLSID_TinFaceValueRenderer', 'CLSID_TinNodeValueRenderer', 'CLSID_TinNodeElevationRenderer', 'CLSID_TinBreaklineRenderer', 'CLSID_TinContourRenderer', 'CLSID_TerrainDirtyAreaRenderer', 'CLSID_TerrainPointElevationRenderer', 'CLSID_TerrainPointAttributeRenderer', 'CLSID_TerrainPointUniqueValueRenderer', 'CLSID_LasUniqueValueRenderer', 'CLSID_LasPointElevationRenderer', 'CLSID_TinLayer', 'CLSID_SimpleTinIdentifyObj', 'CLSID_TinLayerFactory', 'CLSID_TerrainLayer', 'CLSID_TerrainLayerFactory', 'CLSID_LasDatasetLayer', 'CLSID_LasDatasetLayerFactory', 'CLSID_CadLayer', 'CLSID_EngineCadLayerFactory', 'CLSID_CadFeatureLayer', 'CLSID_EngineCadFeatureLayerFactory', 'CLSID_CadAnnotationLayer', 'CLSID_EngineCadAnnotationLayerFactory', 'CLSID_ACConnector', 'CLSID_ACSimpleRenderer', 'CLSID_ACGroupRenderer', 'CLSID_ACScaleDependentRenderer', 'CLSID_ACSimpleLineSymbol', 'CLSID_ACSimpleFillSymbol', 'CLSID_ACSimplePolygonSymbol', 'CLSID_ACSimpleMarkerSymbol', 'CLSID_ACTextSymbol', 'CLSID_ACValueMapRenderer', 'CLSID_ACTrueTypeMarkerSymbol', 'CLSID_ACRasterMarkerSymbol', 'CLSID_ACRasterShieldSymbol', 'CLSID_ACHashLineSymbol', 'CLSID_ACRasterFillSymbol', 'CLSID_ACGradientFillSymbol', 'CLSID_ACCalloutMarkerSymbol', 'CLSID_ACShieldSymbol', 'CLSID_ACTextMarkerSymbol', 'CLSID_ACSimpleLabelRenderer', 'CLSID_ACValueMapLabelRenderer', 'CLSID_ACMap', 'CLSID_ACFeatureLayer', 'CLSID_ACImageLayer', 'CLSID_ACAcetateLayer', 'CLSID_EngineIMSLayerFactory', 'CLSID_IMSMapLayer', 'CLSID_IMSSymbolImporter', 'CLSID_IMSGlobeConnection', 'CLSID_IMSGlobeXMLParser', 'CLSID_IMSGlobeXMLNode', 'CLSID_IMSSubFeatureLayer', 'CLSID_IMSSubLayer', 'CLSID_GpsFeed', 'CLSID_GpsConnection', 'CLSID_RealTimeFeedManager', 'CLSID_RealTimeFeedSimulator', 'CLSID_ColorStyleGalleryClass', 'CLSID_FillSymbolStyleGalleryClass', 'CLSID_LineSymbolStyleGalleryClass', 'CLSID_MarkerSymbolStyleGalleryClass', 'CLSID_TextSymbolStyleGalleryClass', 'CLSID_LegendItemStyleGalleryClass', 'CLSID_NorthArrowStyleGalleryClass', 'CLSID_ScaleBarStyleGalleryClass', 'CLSID_ScaleTextStyleGalleryClass', 'CLSID_ColorRampStyleGalleryClass', 'CLSID_LabelStyleGalleryClass', 'CLSID_MaplexLabelStyleGalleryClass', 'CLSID_BorderStyleGalleryClass', 'CLSID_BackgroundStyleGalleryClass', 'CLSID_ShadowStyleGalleryClass', 'CLSID_AreaPatchStyleGalleryClass', 'CLSID_LinePatchStyleGalleryClass', 'CLSID_RepresentationMarkerStyleGalleryClass', 'CLSID_RepresentationRuleStyleGalleryClass', 'CLSID_MobileServer', 'CLSID_MobileSync', 'CLSID_MobileMapInfo', 'CLSID_MobileLayerInfo', 'CLSID_MobileLayerInfos', 'CLSID_WMSServer', 'CLSID_WMSImageServer', 'CLSID_WCSServer', 'CLSID_WCSImageServer', 'CLSID_WMSMapLayer', 'CLSID_SimpleWMSIdentifyObject', 'CLSID_WMSLayer', 'CLSID_WMSGroupLayer', 'CLSID_EngineWMSMapLayerFactory', 'CLSID_DefaultNetworkLayerSymbology', 'CLSID_NetworkLayer', 'CLSID_EngineNetworkLayerFactory', 'CLSID_SimpleNetworkRenderer', 'CLSID_NetworkDirtyAreaRenderer', 'CLSID_NetworkTrafficRenderer', 'CLSID_RepresentationRenderer', 'CLSID_RepresentationLegendClass', 'CLSID_CadastralFabricLayer', 'CLSID_CadastralFabricLayerEventsHelper', 'CLSID_CadastralFabricLayerFactory', 'CLSID_CadastralFabricSubLayer', 'CLSID_DynamicCacheLayerManager', 'CLSID_DynamicHit', 'CLSID_ImageServerLP', 'CLSID_ImageServerIP', 'CLSID_ImageServerObjectDescription', 'CLSID_MultithreadedCommander', 'CLSID_ImageServiceInfo', 'CLSID_GeoImageDescription', 'CLSID_ImageServer', 'CLSID_ImageServerConfigurationFactory', 'CLSID_AISRequest', 'CLSID_MosaicRule', 'CLSID_RenderingRule', 'CLSID_RasterItemDescription', 'CLSID_RasterItemDescriptions', 'CLSID_MosaicLODInfoHelper', 'CLSID_ImageQueryFilter', 'CLSID_SimpleMapImage', 'CLSID_ImageServerIdentifyResult', 'CLSID_ImageServerIdentifyResults', 'CLSID_ImageServerDownloadResult', 'CLSID_ImageServerDownloadResults', 'CLSID_ImageServerEditResult', 'CLSID_ImageServerEditResults', 'CLSID_ImageServerMeasureResult', 'CLSID_RasterFunctionInfo', 'CLSID_RasterFunctionInfos', 'CLSID_RasterTypeInfo', 'CLSID_RasterTypeInfos', 'CLSID_ImageView', 'CLSID_ImageCooker', 'CLSID_ImageServerName', 'CLSID_ImageServerLayer', 'CLSID_ImageServerLayerFactory', 'CLSID_MobileServerLP', 'CLSID_MobileServerIP', 'CLSID_MobileServerObjectDescription', 'CLSID_DataObjectType', 'CLSID_DataObjectTypes', 'CLSID_DataObjectTable', 'CLSID_GraphicFeatureLayer', 'CLSID_GraphicFeatureLayers', 'CLSID_DataObjectTables', 'CLSID_PropertyInfo', 'CLSID_PropertyInfos', 'CLSID_DataObject', 'CLSID_GraphicFeature', 'CLSID_DataObjectArray', 'CLSID_DataObjects', 'CLSID_GraphicFeatures', 'CLSID_GFLayerTableDataMapping', 'CLSID_GFLayerTableDataMappings', 'CLSID_DomainInfo', 'CLSID_TemplateInfo', 'CLSID_TemplateInfos', 'CLSID_GraphicFeatureServer', 'CLSID_FeatureServerConfigurationFactory', 'CLSID_GFSReplicaDescription', 'CLSID_GFSTableDescription', 'CLSID_GFSTableDescriptions', 'CLSID_EditResult', 'CLSID_EditResults', 'CLSID_ServiceDataOptions', 'CLSID_ServiceData', 'CLSID_DataObjectGroup', 'CLSID_DataObjectGroupArray', 'CLSID_DataObjectGroups', 'CLSID_TableEdit', 'CLSID_TableEdits', 'CLSID_TableEditResult', 'CLSID_TableEditResults', 'CLSID_FeatureServerInfo', 'CLSID_TableIdentities', 'CLSID_TableIdentity', 'CLSID_MosaicLayer', 'CLSID_JPIPServer', 'CLSID_GraphicFeatureServerLP', 'CLSID_GraphicFeatureServerIP', 'CLSID_GraphicFeatureServerObjectDescription', 'CLSID_LayerTablesAndDataMappings', 'CLSID_GFSReplicationAgent', 'CLSID_DataSourceHelper', 'CLSID_MSDHelper', 'CLSID_FeatureServiceEditExtension', 'CLSID_FeatureServiceLayerEditExtension', 'CLSID_FeatureServiceWorkspaceFactory', 'enumActionCategory', 'enumTriggerType', 'enumHighlightSuppression', 'esriRasterTransparencyStateEnum', 'esriRasterUniqueRendererKeyTypesEnum', 'esriRasterStretchTypesEnum', 'esriRasterStretchStatsTypeEnum', 'esriRectanglePosition', 'esriViewDrawPhase', 'esriDynamicLegendType', 'esriAnnotationStatus', 'esriAnchorPointEnum', 'esriSelectionResultEnum', 'esriBasicOverposterWeight', 'esriLabelWhichFeatures', 'esriExtentTypeEnum', 'esriSymbolOverrideEnum', 'ESRITPCPenType', 'ESRITPCStylusType', 'esriT3DJustification', 'esriT3DOrientationPlane', 'esriT3DAlignment', 'esriT3DRotationAxis', 'esriBasicOverposterFeatureType', 'esriBasicNumLabelsOption', 'esriOverposterPointPlacementMethod', 'esriSymbolRotationType', 'esriOverposterCaps', 'esriOverposterPolygonPlacementMethod', 'esriPlacedObjectType', 'esriPlacementCode', 'esriLabelRotationType', 'esriMaplexPlacementQuality', 'esriMaplexUnit', 'esriMaplexPointPlacementMethod', 'esriMaplexOffsetAlongLineMethod', 'esriMaplexLinePlacementMethod', 'esriMaplexPolygonPlacementMethod', 'esriMaplexConstrainOffset', 'esriMaplexLabelAnchorPoint', 'esriMaplexStackingJustification', 'esriMaplexMultiPartOption', 'esriMaplexRotationAlignmentType', 'esriMaplexZoneIdentifier', 'esriMaplexGraticuleAlignmentType', 'esriMaplexLineFeatureType', 'esriMaplexPolygonFeatureType', 'esriMaplexStrategyIdentifier', 'esriMaplexAnchorPointType', 'esriMaplexContourAlignmentType', 'esriMaplexContourLadderType', 'esriMaplexConnectionType', 'esriMaplexAbbrevType', 'esriMaplexKeyNumberHorizontalAlignment', 'esriMaplexKeyNumberResetType', 'esriLabelEnvLabelStyleMethod', 'esriLabelEnvPlacement', 'esriHyperlinkType', 'esriDataSampling', 'esriDataNormalization', 'esriValueRepresentations', 'esriLegendItemArrangement', 'esriMaintainDensityBy', 'esriSymbolRotation3DFlags', 'esriHTMLPopupStyle', 'esriTopologyRenderer', 'esriSizeRendererFlags', 'esriDimensionType', 'esriDimensionDisplay', 'esriDimensionTextDisplay', 'esriDimensionMarkerFit', 'esriDimensionTextFit', 'dimError', 'annoError', 'esriSymbolSubstituteType', 'esriAnnotationStorageType', 'esriLayerEventHint', 'esriConversionStatus', 'esriCachedMapServiceType', 'esriVertPosEnum', 'esriHorzPosEnum', 'esriCacheCompressionMode', 'esriCacheExporterMode', 'esriMapCacheStorageFormat', 'esriMapCacheUpdateMode', 'esriMappingMsgCodeEnum', 'esriMapTimePlayOption', 'esriMapTimeExtentOption', 'esriMapClipType', 'esriScaleBarPos', 'esriScaleBarFrequency', 'esriScaleBarResizeHint', 'esriScaleTextStyleEnum', 'esriNorthArrowType', 'esriBufferType', 'esriBufferSpatialReferenceType', 'esriScreenPosition', 'esriPageFormID', 'esriPageToPrinterMapping', 'esriGridAxisEnum', 'esriGridCornerEnum', 'esriDMSGridLabelType', 'esriBackgroundTabType', 'esriGridSquareLabelStyleEnum', 'esriMapDocumentType', 'esriMapDocumentVersionInfo', 'esriGlobeDocumentType', 'esriGlobeDocumentVersionInfo', 'esriRasterPyramidOptEnum', 'esriRasterRenderingModeEnum', 'esriImageServiceDataType', 'esriImageServiceSourceType', 'esriRasterLayerError', 'esriRasterSelectionMaskFileFormat', 'esriRasterSelectionMaskOp', 'esriLayerSelectionMethod', 'esriImageFormat', 'esriImageReturnType', 'esriQueryResultFormat', 'esriServerHTMLPopupType', 'esriRelateResultFormat', 'esriLabelExpressionType', 'esriServerPointLabelPlacementType', 'esriServerLineLabelPlacementType', 'esriServerPolygonLabelPlacementType', 'esriServerPictureOutputType', 'esriDataStatType', 'esriClassifyMethod', 'esriIdentifyOption', 'esriFindOption', 'esriMapServerMsgCodeEnum', 'esriCad3DRenderMode', 'acGeometryType', 'acLineType', 'acCapType', 'acJoinType', 'acFillType', 'acMarkerType', 'acFontStyle', 'acPrintMode', 'acRangeType', 'acLabelMode', 'acHashLineType', 'acGradientFillType', 'acShieldSymbolType', 'acHTextAlignment', 'acVTextAlignment', 'acLabelWeight', 'acNumLabels', 'acLineLabelPosition', 'esriGpsConnectionStatus', 'esriGpsConnectionError', 'esriGpsLatLongFormat', 'esriGpsStopBits', 'esriGpsParity', 'esriGpsSpeedUnits', 'esriGpsBaudRate', 'esriMobileServerMessageCodeEnum', 'esriWMSServerMessageCodeEnum', 'esriWCSServerMessageCodeEnum', 'wmsError', 'esriNetworkRendererType', 'esriNetworkArrowType', 'esriNetworkArrowSymbolType', 'esriGraphColorType', 'esriDataGraphTPenType', 'esriDataGraphTLegendAlignment', 'esriDataGraphTLegendTextSyle', 'esriBarStyle', 'esriMultiBarType', 'esriMultiAreaType', 'esriDataGraphTSymbolType', 'esriCadastralFabricRenderer', 'esriCadastralFeature', 'esriCadastralParcelType', 'esriCadastralParcelLayerType', 'esriImageServerError', 'esriImageServerMessageCodeEnum', 'esriMensurationOperation', 'esriISLFootprintDisplayOptEnum', 'esriFeatureEditTool', 'esriGraphicFeatureServerMsgCodeEnum', 'esriGraphicFeatureServerErrors', 'esriJPIPServerMessageCodeEnum']
from cartocomutils import _esriCarto
from cartocomutils._esriCarto import RasterRendererMakerDefault, RasterUniqueValueRenderer, RasterClassifyColorRampRenderer, RasterRGBRenderer, RasterStretchColorRampRenderer, RasterColormapRenderer, RasterDiscreteColorRenderer, RasterCatalogRendererPickerDefault, RenderedRaster, LegendGroups, LegendClasses, LegendClass, LegendClassFormat, LegendGroup, AreaPatch, LinePatch, FieldInfo, FrameElement, PictureElement, LayerEventsHelper, DummyLayer, DummyGraduatedMarkerLayer, LayerFactoryHelper, InkGraphic, LineElement, MarkerElement, RectangleElement, PolygonElement, TextElement, ParagraphTextElement, CircleElement, EllipseElement, GroupElement, MultiPatchElement, ElementCollection, SymbolBorder, SymbolBackground, SymbolShadow, SimpleElementSelection, Text3DElement, GraphicElements, AnnotationElement, PMFTitleTextElement, FeatureFindData, BarrierCollection, BasicOverposter, BasicOverposterLayerProperties, LineLabelPosition, LineLabelPlacementPriorities, PointPlacementPriorities, BasicOverposterProperties, MaplexDictionaryEntry, MaplexDictionary, MaplexDictionaries, MaplexKeyNumberGroup, MaplexKeyNumberGroups, MaplexOverposterProperties, MaplexLabelEngineLayerProperties, MaplexOverposterLayerProperties, MaplexRotationProperties, MaplexLabelStackingProperties, MaplexOffsetAlongLineProperties, MaplexAnnotationPropertiesConverter, MaplexLabelStyle, BasicPlacedObject, AnnotateLayerPropertiesCollection, AnnotationVBScriptEngine, AnnotationJScriptEngine, AnnotationPythonEngine, LabelStyle, LabelEnvironment, LabelEngineLayerProperties, AnnotationExpressionParser, HotLinkExpressionProperties, HotLinkVBScriptEngine, HotLinkJScriptEngine, HotLinkPythonEngine, HotLinkExpressionParser, ScaleDependentRenderer, ProportionalSymbolRenderer, BiUniqueValueRenderer, ChartRenderer, CalcRendererValues, DotDensityRenderer, HorizontalLegendItem, VerticalLegendItem, HorizontalBarLegendItem, NestedLegendItem, UniqueValueInfo, ClassBreakInfo, UniqueValueInfos, ClassBreakInfos, FeatureLayer, Hyperlink, FieldInfoSet, DisplayExpressionProperties, FeatureLayerSelectionEvents, GraphicsContainerEvents, SelectionEnvironment, CompositeGraphicsLayer, FeatureIDSet, SimpleRenderer, UniqueValueRenderer, ClassBreaksRenderer, SimpleIdentifyObject, BasicTableHistogram, FeatureCache, GraphicsSubLayer, TopologyLayer, FeatureLayerFactory, EngineTopologyLayerFactory, EngineCoverageAnnotationLayerFactory, ExportInfoGenerator, EditTemplate, EditTemplateFactory, EditTemplateManager, TimeQueryFilter, GroupLayerFactory, GroupLayer, CoverageAnnotationLayer, DimensionClassExtension, DimensionStyle, DimensionStyles, DimensionFeature, DimensionGraphic, DimensionClassDescription, NewDimensionFeedback, ModifyDimensionFeedback, DimensionShape, DimensionLayer, LabelCache, AnnotateMap, AnnotateFeature, AnnotateMapProperties, ConvertFDOAnnoToCoverageAnno, FDOGraphicsLayerFactory, AnnotationFeature, AnnotationFeatureClassExtension, FDOGraphicsLayer, AnnotationFeatureClassDescription, GraphicsLayerScale, FDOGraphicsSublayer, ConvertLabelsToAnnotation, Map, MapEvents, MapEvents2, MapEvents3, DynamicMapEvents, ScaleLine, SteppedScaleLine, HollowScaleBar, SingleDivisionScaleBar, Scalebar, AlternatingScaleBar, DoubleAlternatingScaleBar, ScaleText, MarkerNorthArrow, Overview, MapTitle, MapInset, Legend, LegendFormat, AOIBookmark, FeatureBookmark, FeatureCursorBuffer, FeatureIndex, BasicGeoprocessor, InvalidArea, TilesTable, StandaloneTable, MapSelection, MapCooker, TrackCancel, DynamicDisplay, DynamicGlyph, DynamicGlyphFactory, ChangeDatabaseVersion, DocumentInfo, BasemapLayer, BasemapSubLayer, ArrayOfIShader, RasterShader, RasterDRAShader, ImageInset, MapFrame, MapSurroundFrame, DMSGridLabel, FormattedGridLabel, MixedFontGridLabel, BackgroundTabStyle, ContinuousTabStyle, RoundedTabStyle, ButtonTabStyle, SimpleMapGridBorder, CalibratedMapGridBorder, Graticule, MeasuredGrid, IndexGrid, CustomOverlayGrid, LocatorRectangle, MgrsGrid, CornerGridLabel, PrintAndExport, PageLayout, Page, RulerSettings, SnapGrid, SnapGuides, GraphicSnapEnvironment, GridSnap, GuideSnap, MarginSnap, RulerSnap, MapDocument, LayerFile, RasterDefaultsEnv, RasterFormatInfo, RasterLayer, WCSLayer, RasterCatalogLayer, GdbRasterCatalogLayer, ColorSymbol, ColorRampSymbol, RasterRGBSymbol, SimpleRasterIdentifyObj, RasterIdentifyObj, GeoReferenceEvents, RasterLayerExport, RasterExporter, RasterThumbnailBuilder, RasterLayerFactory, WCSLayerFactory, RasterCatalogLayerFactory, NetCDFLayerFactory, NetCDFTableFactory, NITFGraphicsLayer, RasterServiceHelper, RasterBasemapLayer, RasterBasemapLayerFactory, BmpPictureElement, EmfPictureElement, TifPictureElement, JpgPictureElement, ImgPictureElement, SidPictureElement, GifPictureElement, PngPictureElement, Jp2PictureElement, QueryByLayer, MxdServer, MapDescriptor, LayerDescriptor, MapServerConfigurationFactory, MapServer, MapReader, MapServerInfo, MapLayerInfo, MapDescription, LayerDescription, MapFrameDescription, PageDescription, ImageType, ImageDisplay, ImageDescription, MapImage, ImageResult, LayoutImage, MapServerIdentifyResult, MapServerFindResult, MapServerBookmark, CenterAndScale, CenterAndSize, FeatureExtent, MapExtent, MapServerHyperlink, MapServerRelationship, MapServerRow, SQLSyntaxInfo, MapServerLegendPatch, MapServerLegendClass, MapServerLegendGroup, MapServerLegendInfo, MapDescriptions, MapFrameDescriptions, LayerDescriptions, MapServerBookmarks, MapServerIdentifyResults, MapServerFindResults, MapLayerInfos, MapServerRows, MapServerRelationships, MapServerHyperlinks, MapImages, MapServerLegendGroups, MapServerLegendClasses, MapServerLegendInfos, CacheInfo, CacheDescriptionInfo, CacheControlInfo, TileImageInfo, CacheStorageInfo, CacheDatasetInfo, TileCacheInfo, LODInfo, LODInfos, LayerCacheInfo, LayerCacheInfos, FeatureLayerDrawingDescription, FeatureLayerDrawingDescriptionFactory, RasterLayerDrawingDescription, RasterLayerDrawingDescriptionFactory, LayerDrawingDescriptionFactory, ServerLayerExtension, LayerResultOptions, QueryResultOptions, QueryResult, StandaloneTableDescription, StandaloneTableInfo, StandaloneTableDescriptions, StandaloneTableInfos, RelateInfo, RelateInfos, RelateDescription, RelatedRecordGroup, RelatedRecordGroups, RelatedRecordSet, SubtypeInfo, SubtypeInfos, FieldDomainInfo, FieldDomainInfos, ImageResults, LabelingDescription, LabelClassDescription, LabelClassDescriptions, PointLabelPlacementDescription, LineLabelPlacementDescription, PolygonLabelPlacementDescription, LayerDrawingDescriptions, MapTableSubtypeInfo, MapTableSubtypeInfos, ServerSymbolOutputOptions, JoinTableSourceDescription, MapTableSourceDescription, TableDataSourceDescription, QueryTableDataSourceDescription, RasterDataSourceDescription, StatisticDescription, StatisticDescriptions, StatisticsRequest, UniqueValuesDef, ClassBreaksDef, MapServerLP, MapServerIP, MapServerObjectDescription, CacheRasterDatasetName, MapServerLayer, MapServerLayerFactory, FeatureServerLayerFactory, SimpleMapServerIdentifyObject, MapServerBasicSublayer, MapServerIdentifySublayer, MapServerFindSublayer, MapServerQuerySublayer, MapServerRESTLayer, MapServerRESTSubLayer, WMTSLayerFactory, WMTSLayer, TinFaceRenderer, TinEdgeRenderer, TinNodeRenderer, TinSlopeRenderer, TinAspectRenderer, TinElevationRenderer, TinFaceValueRenderer, TinNodeValueRenderer, TinNodeElevationRenderer, TinBreaklineRenderer, TinContourRenderer, TerrainDirtyAreaRenderer, TerrainPointElevationRenderer, TerrainPointAttributeRenderer, TerrainPointUniqueValueRenderer, LasUniqueValueRenderer, LasPointElevationRenderer, TinLayer, SimpleTinIdentifyObj, TinLayerFactory, TerrainLayer, TerrainLayerFactory, LasDatasetLayer, LasDatasetLayerFactory, CadLayer, EngineCadLayerFactory, CadFeatureLayer, EngineCadFeatureLayerFactory, CadAnnotationLayer, EngineCadAnnotationLayerFactory, ACConnector, ACSimpleRenderer, ACGroupRenderer, ACScaleDependentRenderer, ACSimpleLineSymbol, ACSimpleFillSymbol, ACSimplePolygonSymbol, ACSimpleMarkerSymbol, ACTextSymbol, ACValueMapRenderer, ACTrueTypeMarkerSymbol, ACRasterMarkerSymbol, ACRasterShieldSymbol, ACHashLineSymbol, ACRasterFillSymbol, ACGradientFillSymbol, ACCalloutMarkerSymbol, ACShieldSymbol, ACTextMarkerSymbol, ACSimpleLabelRenderer, ACValueMapLabelRenderer, ACMap, ACFeatureLayer, ACImageLayer, ACAcetateLayer, EngineIMSLayerFactory, IMSMapLayer, IMSSymbolImporter, IMSGlobeConnection, IMSGlobeXMLParser, IMSGlobeXMLNode, IMSSubFeatureLayer, IMSSubLayer, GpsFeed, GpsConnection, RealTimeFeedManager, RealTimeFeedSimulator, ColorStyleGalleryClass, FillSymbolStyleGalleryClass, LineSymbolStyleGalleryClass, MarkerSymbolStyleGalleryClass, TextSymbolStyleGalleryClass, LegendItemStyleGalleryClass, NorthArrowStyleGalleryClass, ScaleBarStyleGalleryClass, ScaleTextStyleGalleryClass, ColorRampStyleGalleryClass, LabelStyleGalleryClass, MaplexLabelStyleGalleryClass, BorderStyleGalleryClass, BackgroundStyleGalleryClass, ShadowStyleGalleryClass, AreaPatchStyleGalleryClass, LinePatchStyleGalleryClass, RepresentationMarkerStyleGalleryClass, RepresentationRuleStyleGalleryClass, MobileServer, MobileSync, MobileMapInfo, MobileLayerInfo, MobileLayerInfos, WMSServer, WMSImageServer, WCSServer, WCSImageServer, WMSMapLayer, SimpleWMSIdentifyObject, WMSLayer, WMSGroupLayer, EngineWMSMapLayerFactory, DefaultNetworkLayerSymbology, NetworkLayer, EngineNetworkLayerFactory, SimpleNetworkRenderer, NetworkDirtyAreaRenderer, NetworkTrafficRenderer, RepresentationRenderer, RepresentationLegendClass, CadastralFabricLayer, CadastralFabricLayerEventsHelper, CadastralFabricLayerFactory, CadastralFabricSubLayer, DynamicCacheLayerManager, DynamicHit, ImageServerLP, ImageServerIP, ImageServerObjectDescription, MultithreadedCommander, ImageServiceInfo, GeoImageDescription, ImageServer, ImageServerConfigurationFactory, AISRequest, MosaicRule, RenderingRule, RasterItemDescription, RasterItemDescriptions, MosaicLODInfoHelper, ImageQueryFilter, SimpleMapImage, ImageServerIdentifyResult, ImageServerIdentifyResults, ImageServerDownloadResult, ImageServerDownloadResults, ImageServerEditResult, ImageServerEditResults, ImageServerMeasureResult, RasterFunctionInfo, RasterFunctionInfos, RasterTypeInfo, RasterTypeInfos, ImageView, ImageCooker, ImageServerName, ImageServerLayer, ImageServerLayerFactory, MobileServerLP, MobileServerIP, MobileServerObjectDescription, DataObjectType, DataObjectTypes, DataObjectTable, GraphicFeatureLayer, GraphicFeatureLayers, DataObjectTables, PropertyInfo, PropertyInfos, DataObject, GraphicFeature, DataObjectArray, DataObjects, GraphicFeatures, GFLayerTableDataMapping, GFLayerTableDataMappings, DomainInfo, TemplateInfo, TemplateInfos, GraphicFeatureServer, FeatureServerConfigurationFactory, GFSReplicaDescription, GFSTableDescription, GFSTableDescriptions, EditResult, EditResults, ServiceDataOptions, ServiceData, DataObjectGroup, DataObjectGroupArray, DataObjectGroups, TableEdit, TableEdits, TableEditResult, TableEditResults, FeatureServerInfo, TableIdentities, TableIdentity, MosaicLayer, JPIPServer, GraphicFeatureServerLP, GraphicFeatureServerIP, GraphicFeatureServerObjectDescription, LayerTablesAndDataMappings, GFSReplicationAgent, DataSourceHelper, MSDHelper, FeatureServiceEditExtension, FeatureServiceLayerEditExtension, FeatureServiceWorkspaceFactory
from cartocomutils import Enumeration, IndexProperty, _IIDMap, _CLSIDMap, _RecordMap
import uuid


# Interfaces
class IProtectNameCarto(_esriCarto.IProtectNameCarto):
    _IID = uuid.UUID('9c43d8c6-db4c-44d7-8038-15de4ef965a6')
    def ProtectOLE_HANDLE(self, aHandle):
        '''Method IProtectNameCarto.ProtectOLE_HANDLE

           INPUT
            aHandle             : OLE_HANDLE'''
        return super(IProtectNameCarto, self).ProtectOLE_HANDLE(aHandle)
    def ProtectOLE_COLOR(self, aColor):
        '''Method IProtectNameCarto.ProtectOLE_COLOR

           INPUT
            aColor              : OLE_COLOR'''
        return super(IProtectNameCarto, self).ProtectOLE_COLOR(aColor)
    def altitude(self):
        '''Method IProtectNameCarto.altitude'''
        return super(IProtectNameCarto, self).altitude()

class IDimensionProtectNames(_esriCarto.IDimensionProtectNames):
    _IID = uuid.UUID('9da49c58-0ef8-4dc0-8db4-2713887d4fd3')
    def FieldIndexes(self):
        '''Method IDimensionProtectNames.FieldIndexes'''
        return super(IDimensionProtectNames, self).FieldIndexes()

class ILayer(_esriCarto.ILayer):
    _IID = uuid.UUID('34c20002-4d3c-11d0-92d8-00805f7c28b0')

    def __init__(self, *args, **kw):
        super(ILayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILayer.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name

           INPUT
            Name                : BSTR'''
        return super(ILayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ILayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ILayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale

           OUTPUT
            MinScale            : double*'''
        return super(ILayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale

           INPUT
            MinScale            : double'''
        return super(ILayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale

           OUTPUT
            MaxScale            : double*'''
        return super(ILayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale

           INPUT
            MaxScale            : double'''
        return super(ILayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ILayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ILayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ILayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases

           OUTPUT
            drawPhases          : long*'''
        return super(ILayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ILayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ILayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class IFeatureIDSet(_esriCarto.IFeatureIDSet):
    _IID = uuid.UUID('d5bb4b87-e0a1-11d2-9f4d-00c04f6bc78e')
    def get_Contains(self, FID):
        '''Method IFeatureIDSet.get_Contains

           INPUT
            FID                 : long

           OUTPUT
            Contains            : VARIANT_BOOL*'''
        return super(IFeatureIDSet, self).get_Contains(FID)
    def get_Count(self):
        '''Method IFeatureIDSet.get_Count

           OUTPUT
            Count               : long*'''
        return super(IFeatureIDSet, self).get_Count()
    def Add(self, FID):
        '''Method IFeatureIDSet.Add

           INPUT
            FID                 : long'''
        return super(IFeatureIDSet, self).Add(FID)
    def Remove(self, FID):
        '''Method IFeatureIDSet.Remove

           INPUT
            FID                 : long'''
        return super(IFeatureIDSet, self).Remove(FID)
    def Clear(self):
        '''Method IFeatureIDSet.Clear'''
        return super(IFeatureIDSet, self).Clear()
    def get_Members(self):
        '''Method IFeatureIDSet.get_Members

           OUTPUT
            FIDs                : VARIANT*'''
        return super(IFeatureIDSet, self).get_Members()
    Count = property(get_Count, None, None)
    Members = property(get_Members, None, None)
    Contains = IndexProperty(get_Contains, None)

class IAction(_esriCarto.IAction):
    _IID = uuid.UUID('cc018a6e-24fb-11d4-b34c-00104ba2abcc')

    def __init__(self, *args, **kw):
        super(IAction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Version(self):
        '''Method IAction.get_Version

           OUTPUT
            pVal                : double*'''
        return super(IAction, self).get_Version()
    def get_Name(self):
        '''Method IAction.get_Name

           OUTPUT
            pbstrName           : BSTR*'''
        return super(IAction, self).get_Name()
    def get_RulesDescription(self):
        '''Method IAction.get_RulesDescription

           OUTPUT
            pbstrRulesDescription: BSTR*'''
        return super(IAction, self).get_RulesDescription()
    def get_ContinueProcessing(self):
        '''Method IAction.get_ContinueProcessing

           OUTPUT
            pbvarContinueProcessing: VARIANT_BOOL*'''
        return super(IAction, self).get_ContinueProcessing()
    def get_Alias(self):
        '''Method IAction.get_Alias

           OUTPUT
            pbstrAlias          : BSTR*'''
        return super(IAction, self).get_Alias()
    def put_Alias(self, pbstrAlias):
        '''Method IAction.put_Alias

           INPUT
            pbstrAlias          : BSTR'''
        return super(IAction, self).put_Alias(pbstrAlias)
    def get_Label(self):
        '''Method IAction.get_Label

           OUTPUT
            pbstrLabel          : BSTR*'''
        return super(IAction, self).get_Label()
    def put_Label(self, pbstrLabel):
        '''Method IAction.put_Label

           INPUT
            pbstrLabel          : BSTR'''
        return super(IAction, self).put_Label(pbstrLabel)
    def get_Type(self):
        '''Method IAction.get_Type

           OUTPUT
            pbstrType           : BSTR*'''
        return super(IAction, self).get_Type()
    def get_IsEnabled(self):
        '''Method IAction.get_IsEnabled

           OUTPUT
            pbvarIsEnabled      : VARIANT_BOOL*'''
        return super(IAction, self).get_IsEnabled()
    def put_IsEnabled(self, pbvarIsEnabled):
        '''Method IAction.put_IsEnabled

           INPUT
            pbvarIsEnabled      : VARIANT_BOOL'''
        return super(IAction, self).put_IsEnabled(pbvarIsEnabled)
    def put_StopProcessing(self, pbvarStopProcessing):
        '''Method IAction.put_StopProcessing

           INPUT
            pbvarStopProcessing : VARIANT_BOOL'''
        return super(IAction, self).put_StopProcessing(pbvarStopProcessing)
    def Evaluate(self, piObject):
        '''Method IAction.Evaluate

           INPUT
            piObject            : IUnknown*

           OUTPUT
            pvarReturnedObjects : VARIANT*'''
        return super(IAction, self).Evaluate(piObject)
    def get_StopProcessing(self):
        '''Method IAction.get_StopProcessing

           OUTPUT
            pbvarStopProcessing : VARIANT_BOOL*'''
        return super(IAction, self).get_StopProcessing()
    def get_EvaluationCount(self):
        '''Method IAction.get_EvaluationCount

           OUTPUT
            pVal                : int*'''
        return super(IAction, self).get_EvaluationCount()
    def get_StopProcessingCount(self):
        '''Method IAction.get_StopProcessingCount

           OUTPUT
            pVal                : int*'''
        return super(IAction, self).get_StopProcessingCount()
    def get_FilteredCount(self):
        '''Method IAction.get_FilteredCount

           OUTPUT
            pVal                : int*'''
        return super(IAction, self).get_FilteredCount()
    def get_ModifiedCount(self):
        '''Method IAction.get_ModifiedCount

           OUTPUT
            pVal                : int*'''
        return super(IAction, self).get_ModifiedCount()
    def get_ProcessedCount(self):
        '''Method IAction.get_ProcessedCount

           OUTPUT
            pVal                : int*'''
        return super(IAction, self).get_ProcessedCount()
    def ClearCounts(self):
        '''Method IAction.ClearCounts'''
        return super(IAction, self).ClearCounts()
    def get_ActionCategory(self):
        '''Method IAction.get_ActionCategory

           OUTPUT
            pVal                : enumActionCategory*'''
        return super(IAction, self).get_ActionCategory()
    def put_ActionCategory(self, pVal):
        '''Method IAction.put_ActionCategory

           INPUT
            pVal                : enumActionCategory'''
        return super(IAction, self).put_ActionCategory(pVal)
    ActionCategory = property(get_ActionCategory, put_ActionCategory, None)
    Alias = property(get_Alias, put_Alias, None)
    ContinueProcessing = property(get_ContinueProcessing, None, None)
    EvaluationCount = property(get_EvaluationCount, None, None)
    FilteredCount = property(get_FilteredCount, None, None)
    IsEnabled = property(get_IsEnabled, put_IsEnabled, None)
    Label = property(get_Label, put_Label, None)
    ModifiedCount = property(get_ModifiedCount, None, None)
    Name = property(get_Name, None, None)
    ProcessedCount = property(get_ProcessedCount, None, None)
    RulesDescription = property(get_RulesDescription, None, None)
    StopProcessing = property(get_StopProcessing, put_StopProcessing, None)
    StopProcessingCount = property(get_StopProcessingCount, None, None)
    Type = property(get_Type, None, None)
    Version = property(get_Version, None, None)

class IActionCollection(_esriCarto.IActionCollection):
    _IID = uuid.UUID('cc018a6d-24fb-11d4-b34c-00104ba2abcc')

    def __init__(self, *args, **kw):
        super(IActionCollection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Add(self, piAction, nIndex):
        '''Method IActionCollection.Add

           INPUTS
            piAction            : IAction*
            nIndex              : int'''
        return super(IActionCollection, self).Add(piAction, nIndex)
    def Remove(self, nIndex):
        '''Method IActionCollection.Remove

           INPUT
            nIndex              : int'''
        return super(IActionCollection, self).Remove(nIndex)
    def Move(self, nSourceIndex, nDestinationIndex):
        '''Method IActionCollection.Move

           INPUTS
            nSourceIndex        : int
            nDestinationIndex   : int'''
        return super(IActionCollection, self).Move(nSourceIndex, nDestinationIndex)
    def RemoveAll(self):
        '''Method IActionCollection.RemoveAll'''
        return super(IActionCollection, self).RemoveAll()
    def get_Action(self, nIndex):
        '''Method IActionCollection.get_Action

           INPUT
            nIndex              : int

           OUTPUT
            ppiAction           : IAction**'''
        return super(IActionCollection, self).get_Action(nIndex)
    def get_Count(self):
        '''Method IActionCollection.get_Count

           OUTPUT
            pVal                : int*'''
        return super(IActionCollection, self).get_Count()
    def Find(self, piAction):
        '''Method IActionCollection.Find

           INPUT
            piAction            : IAction*

           OUTPUT
            pnIndex             : int*'''
        return super(IActionCollection, self).Find(piAction)
    def get_MaximumDepth(self):
        '''Method IActionCollection.get_MaximumDepth

           OUTPUT
            pVal                : int*'''
        return super(IActionCollection, self).get_MaximumDepth()
    def put_MaximumDepth(self, pVal):
        '''Method IActionCollection.put_MaximumDepth

           INPUT
            pVal                : int'''
        return super(IActionCollection, self).put_MaximumDepth(pVal)
    def get_NextActionNumber(self):
        '''Method IActionCollection.get_NextActionNumber

           OUTPUT
            pVal                : long*'''
        return super(IActionCollection, self).get_NextActionNumber()
    def put_NextActionNumber(self, pVal):
        '''Method IActionCollection.put_NextActionNumber

           INPUT
            pVal                : long'''
        return super(IActionCollection, self).put_NextActionNumber(pVal)
    def get_ExclusionCategory(self):
        '''Method IActionCollection.get_ExclusionCategory

           OUTPUT
            pVal                : enumActionCategory*'''
        return super(IActionCollection, self).get_ExclusionCategory()
    def put_ExclusionCategory(self, pVal):
        '''Method IActionCollection.put_ExclusionCategory

           INPUT
            pVal                : enumActionCategory'''
        return super(IActionCollection, self).put_ExclusionCategory(pVal)
    def get_ActionCount(self):
        '''Method IActionCollection.get_ActionCount

           OUTPUT
            pVal                : long*'''
        return super(IActionCollection, self).get_ActionCount()
    def get_EnabledActionCount(self):
        '''Method IActionCollection.get_EnabledActionCount

           OUTPUT
            pVal                : long*'''
        return super(IActionCollection, self).get_EnabledActionCount()
    def DependsUponFeatureClass(self, piFeatureClass):
        '''Method IActionCollection.DependsUponFeatureClass

           INPUT
            piFeatureClass      : IFeatureClass*

           OUTPUT
            bResult             : VARIANT_BOOL*'''
        return super(IActionCollection, self).DependsUponFeatureClass(piFeatureClass)
    def DisableActionsUsingLayer(self, piLayer):
        '''Method IActionCollection.DisableActionsUsingLayer

           INPUT
            piLayer             : ILayer*

           OUTPUT
            bResult             : VARIANT_BOOL*'''
        return super(IActionCollection, self).DisableActionsUsingLayer(piLayer)
    def ReenableActionsUsingLayer(self, piLayer):
        '''Method IActionCollection.ReenableActionsUsingLayer

           INPUT
            piLayer             : ILayer*

           OUTPUT
            bResult             : VARIANT_BOOL*'''
        return super(IActionCollection, self).ReenableActionsUsingLayer(piLayer)
    def CheckLayers(self, bRebuildGeometry):
        '''Method IActionCollection.CheckLayers

           INPUT
            bRebuildGeometry    : VARIANT_BOOL'''
        return super(IActionCollection, self).CheckLayers(bRebuildGeometry)
    ActionCount = property(get_ActionCount, None, None)
    Count = property(get_Count, None, None)
    EnabledActionCount = property(get_EnabledActionCount, None, None)
    ExclusionCategory = property(get_ExclusionCategory, put_ExclusionCategory, None)
    MaximumDepth = property(get_MaximumDepth, put_MaximumDepth, None)
    NextActionNumber = property(get_NextActionNumber, put_NextActionNumber, None)
    Action = IndexProperty(get_Action, None)

class IActionProcessor(_esriCarto.IActionProcessor):
    _IID = uuid.UUID('cc018a6f-24fb-11d4-b34c-00104ba2abcc')

    def __init__(self, *args, **kw):
        super(IActionProcessor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ProcessData(self, piObject, bQueueProcessing, pvarReturnedObjects):
        '''Method IActionProcessor.ProcessData

           INPUTS
            piObject            : IUnknown*
            bQueueProcessing    : VARIANT_BOOL
            pvarReturnedObjects : VARIANT*'''
        return super(IActionProcessor, self).ProcessData(piObject, bQueueProcessing, pvarReturnedObjects)
    def ClearQueue(self):
        '''Method IActionProcessor.ClearQueue'''
        return super(IActionProcessor, self).ClearQueue()
    def get_Suspended(self):
        '''Method IActionProcessor.get_Suspended

           OUTPUT
            pbvarSuspended      : VARIANT_BOOL*'''
        return super(IActionProcessor, self).get_Suspended()
    def put_Suspended(self, pbvarSuspended):
        '''Method IActionProcessor.put_Suspended

           INPUT
            pbvarSuspended      : VARIANT_BOOL'''
        return super(IActionProcessor, self).put_Suspended(pbvarSuspended)
    def get_Actions(self):
        '''Method IActionProcessor.get_Actions

           OUTPUT
            piActions           : IActionCollection**'''
        return super(IActionProcessor, self).get_Actions()
    def putref_Actions(self, piActions):
        '''Method IActionProcessor.putref_Actions

           INPUT
            piActions           : IActionCollection*'''
        return super(IActionProcessor, self).putref_Actions(piActions)
    def get_ProcessorWaitTimeOut(self):
        '''Method IActionProcessor.get_ProcessorWaitTimeOut

           OUTPUT
            plProcessorWaitTimeOut: long*'''
        return super(IActionProcessor, self).get_ProcessorWaitTimeOut()
    def put_ProcessorWaitTimeOut(self, plProcessorWaitTimeOut):
        '''Method IActionProcessor.put_ProcessorWaitTimeOut

           INPUT
            plProcessorWaitTimeOut: long'''
        return super(IActionProcessor, self).put_ProcessorWaitTimeOut(plProcessorWaitTimeOut)
    def get_ExcludeRealtimeActions(self):
        '''Method IActionProcessor.get_ExcludeRealtimeActions

           OUTPUT
            pbvarExclude        : VARIANT_BOOL*'''
        return super(IActionProcessor, self).get_ExcludeRealtimeActions()
    def put_ExcludeRealtimeActions(self, pbvarExclude):
        '''Method IActionProcessor.put_ExcludeRealtimeActions

           INPUT
            pbvarExclude        : VARIANT_BOOL'''
        return super(IActionProcessor, self).put_ExcludeRealtimeActions(pbvarExclude)
    def CheckLayers(self):
        '''Method IActionProcessor.CheckLayers'''
        return super(IActionProcessor, self).CheckLayers()
    Actions = property(get_Actions, putref_Actions, None)
    ExcludeRealtimeActions = property(get_ExcludeRealtimeActions, put_ExcludeRealtimeActions, None)
    ProcessorWaitTimeOut = property(get_ProcessorWaitTimeOut, put_ProcessorWaitTimeOut, None)
    Suspended = property(get_Suspended, put_Suspended, None)

class ILocationTrigger(_esriCarto.ILocationTrigger):
    _IID = uuid.UUID('53053771-6ea2-42a6-a4e4-6f6f2746530c')

    def __init__(self, *args, **kw):
        super(ILocationTrigger, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILocationTrigger.get_Name

           OUTPUT
            pVal                : BSTR*'''
        return super(ILocationTrigger, self).get_Name()
    def get_Description(self):
        '''Method ILocationTrigger.get_Description

           OUTPUT
            pVal                : BSTR*'''
        return super(ILocationTrigger, self).get_Description()
    def get_Invertable(self):
        '''Method ILocationTrigger.get_Invertable

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(ILocationTrigger, self).get_Invertable()
    def get_Inverted(self):
        '''Method ILocationTrigger.get_Inverted

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(ILocationTrigger, self).get_Inverted()
    def put_Inverted(self, pVal):
        '''Method ILocationTrigger.put_Inverted

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(ILocationTrigger, self).put_Inverted(pVal)
    def put_ShapeColumn(self, _arg1):
        '''Method ILocationTrigger.put_ShapeColumn

           INPUT
            _arg1               : long'''
        return super(ILocationTrigger, self).put_ShapeColumn(_arg1)
    def put_EventIdColumn(self, _arg1):
        '''Method ILocationTrigger.put_EventIdColumn

           INPUT
            _arg1               : long'''
        return super(ILocationTrigger, self).put_EventIdColumn(_arg1)
    def put_TestFeatureClass(self, _arg1):
        '''Method ILocationTrigger.put_TestFeatureClass

           INPUT
            _arg1               : IFeatureClass*'''
        return super(ILocationTrigger, self).put_TestFeatureClass(_arg1)
    def GeometryIsCompatible(self, eTypeA, eTypeB):
        '''Method ILocationTrigger.GeometryIsCompatible

           INPUTS
            eTypeA              : esriGeometryType
            eTypeB              : esriGeometryType'''
        return super(ILocationTrigger, self).GeometryIsCompatible(eTypeA, eTypeB)
    def EvaluateFeature(self, piFeature):
        '''Method ILocationTrigger.EvaluateFeature

           INPUT
            piFeature           : IFeature*'''
        return super(ILocationTrigger, self).EvaluateFeature(piFeature)
    def EvaluateDataMessage(self, piDataMessage):
        '''Method ILocationTrigger.EvaluateDataMessage

           INPUT
            piDataMessage       : IDataMessage*'''
        return super(ILocationTrigger, self).EvaluateDataMessage(piDataMessage)
    def put_TestGeometry(self, ppiTestGeometry):
        '''Method ILocationTrigger.put_TestGeometry

           INPUT
            ppiTestGeometry     : IGeometry*'''
        return super(ILocationTrigger, self).put_TestGeometry(ppiTestGeometry)
    def get_TestGeometry(self):
        '''Method ILocationTrigger.get_TestGeometry

           OUTPUT
            ppiTestGeometry     : IGeometry**'''
        return super(ILocationTrigger, self).get_TestGeometry()
    Description = property(get_Description, None, None)
    EventIdColumn = property(None, put_EventIdColumn, None)
    Invertable = property(get_Invertable, None, None)
    Inverted = property(get_Inverted, put_Inverted, None)
    Name = property(get_Name, None, None)
    ShapeColumn = property(None, put_ShapeColumn, None)
    TestFeatureClass = property(None, put_TestFeatureClass, None)
    TestGeometry = property(get_TestGeometry, put_TestGeometry, None)

class IConditionalAction(_esriCarto.IConditionalAction):
    _IID = uuid.UUID('aa2e34e9-4278-4391-9e14-6c3a4dd2ae2a')

    def __init__(self, *args, **kw):
        super(IConditionalAction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TriggerType(self):
        '''Method IConditionalAction.get_TriggerType

           OUTPUT
            pVal                : enumTriggerType*'''
        return super(IConditionalAction, self).get_TriggerType()
    def put_TriggerType(self, pVal):
        '''Method IConditionalAction.put_TriggerType

           INPUT
            pVal                : enumTriggerType'''
        return super(IConditionalAction, self).put_TriggerType(pVal)
    def get_LocationTriggerType(self):
        '''Method IConditionalAction.get_LocationTriggerType

           OUTPUT
            pVal                : esriSpatialRelEnum*'''
        return super(IConditionalAction, self).get_LocationTriggerType()
    def put_LocationTriggerType(self, pVal):
        '''Method IConditionalAction.put_LocationTriggerType

           INPUT
            pVal                : esriSpatialRelEnum'''
        return super(IConditionalAction, self).put_LocationTriggerType(pVal)
    def get_QueryString(self):
        '''Method IConditionalAction.get_QueryString

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction, self).get_QueryString()
    def put_QueryString(self, pVal):
        '''Method IConditionalAction.put_QueryString

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction, self).put_QueryString(pVal)
    def get_TriggerLayer(self):
        '''Method IConditionalAction.get_TriggerLayer

           OUTPUT
            pVal                : ILayer**'''
        return super(IConditionalAction, self).get_TriggerLayer()
    def putref_TriggerLayer(self, pVal):
        '''Method IConditionalAction.putref_TriggerLayer

           INPUT
            pVal                : ILayer*'''
        return super(IConditionalAction, self).putref_TriggerLayer(pVal)
    def get_NegateLocationTrigger(self):
        '''Method IConditionalAction.get_NegateLocationTrigger

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IConditionalAction, self).get_NegateLocationTrigger()
    def put_NegateLocationTrigger(self, pVal):
        '''Method IConditionalAction.put_NegateLocationTrigger

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IConditionalAction, self).put_NegateLocationTrigger(pVal)
    def get_PolygonSource(self):
        '''Method IConditionalAction.get_PolygonSource

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction, self).get_PolygonSource()
    def put_PolygonSource(self, pVal):
        '''Method IConditionalAction.put_PolygonSource

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction, self).put_PolygonSource(pVal)
    def get_ColumnList(self):
        '''Method IConditionalAction.get_ColumnList

           OUTPUT
            pVal                : VARIANT*'''
        return super(IConditionalAction, self).get_ColumnList()
    def put_ColumnList(self, pVal):
        '''Method IConditionalAction.put_ColumnList

           INPUT
            pVal                : VARIANT'''
        return super(IConditionalAction, self).put_ColumnList(pVal)
    def get_TriggerLayerName(self):
        '''Method IConditionalAction.get_TriggerLayerName

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction, self).get_TriggerLayerName()
    def put_LocationTriggerName(self, pVal):
        '''Method IConditionalAction.put_LocationTriggerName

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction, self).put_LocationTriggerName(pVal)
    def get_LocationTriggerName(self):
        '''Method IConditionalAction.get_LocationTriggerName

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction, self).get_LocationTriggerName()
    def put_TestGeometry(self, ppiTestGeometry):
        '''Method IConditionalAction.put_TestGeometry

           INPUT
            ppiTestGeometry     : IGeometry*'''
        return super(IConditionalAction, self).put_TestGeometry(ppiTestGeometry)
    def get_TestGeometry(self):
        '''Method IConditionalAction.get_TestGeometry

           OUTPUT
            ppiTestGeometry     : IGeometry**'''
        return super(IConditionalAction, self).get_TestGeometry()
    def put_SpatialReference(self, pVal):
        '''Method IConditionalAction.put_SpatialReference

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction, self).put_SpatialReference(pVal)
    def get_SpatialReference(self):
        '''Method IConditionalAction.get_SpatialReference

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction, self).get_SpatialReference()
    ColumnList = property(get_ColumnList, put_ColumnList, None)
    LocationTriggerName = property(get_LocationTriggerName, put_LocationTriggerName, None)
    LocationTriggerType = property(get_LocationTriggerType, put_LocationTriggerType, None)
    NegateLocationTrigger = property(get_NegateLocationTrigger, put_NegateLocationTrigger, None)
    PolygonSource = property(get_PolygonSource, put_PolygonSource, None)
    QueryString = property(get_QueryString, put_QueryString, None)
    SpatialReference = property(get_SpatialReference, put_SpatialReference, None)
    TestGeometry = property(get_TestGeometry, put_TestGeometry, None)
    TriggerLayer = property(get_TriggerLayer, putref_TriggerLayer, None)
    TriggerLayerName = property(get_TriggerLayerName, None, None)
    TriggerType = property(get_TriggerType, put_TriggerType, None)

class IConditionalAction2(_esriCarto.IConditionalAction2):
    _IID = uuid.UUID('daf384e0-8a7a-11d7-b87f-00010265adc5')

    def __init__(self, *args, **kw):
        super(IConditionalAction2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TriggerType(self):
        '''Method IConditionalAction2.get_TriggerType

           OUTPUT
            pVal                : enumTriggerType*'''
        return super(IConditionalAction2, self).get_TriggerType()
    def put_TriggerType(self, pVal):
        '''Method IConditionalAction2.put_TriggerType

           INPUT
            pVal                : enumTriggerType'''
        return super(IConditionalAction2, self).put_TriggerType(pVal)
    def get_LocationTriggerType(self):
        '''Method IConditionalAction2.get_LocationTriggerType

           OUTPUT
            pVal                : esriSpatialRelEnum*'''
        return super(IConditionalAction2, self).get_LocationTriggerType()
    def put_LocationTriggerType(self, pVal):
        '''Method IConditionalAction2.put_LocationTriggerType

           INPUT
            pVal                : esriSpatialRelEnum'''
        return super(IConditionalAction2, self).put_LocationTriggerType(pVal)
    def get_QueryString(self):
        '''Method IConditionalAction2.get_QueryString

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction2, self).get_QueryString()
    def put_QueryString(self, pVal):
        '''Method IConditionalAction2.put_QueryString

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction2, self).put_QueryString(pVal)
    def get_TriggerLayer(self):
        '''Method IConditionalAction2.get_TriggerLayer

           OUTPUT
            pVal                : ILayer**'''
        return super(IConditionalAction2, self).get_TriggerLayer()
    def putref_TriggerLayer(self, pVal):
        '''Method IConditionalAction2.putref_TriggerLayer

           INPUT
            pVal                : ILayer*'''
        return super(IConditionalAction2, self).putref_TriggerLayer(pVal)
    def get_NegateLocationTrigger(self):
        '''Method IConditionalAction2.get_NegateLocationTrigger

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IConditionalAction2, self).get_NegateLocationTrigger()
    def put_NegateLocationTrigger(self, pVal):
        '''Method IConditionalAction2.put_NegateLocationTrigger

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IConditionalAction2, self).put_NegateLocationTrigger(pVal)
    def get_PolygonSourceName(self):
        '''Method IConditionalAction2.get_PolygonSourceName

           OUTPUT
            ppiSourceName       : IName**'''
        return super(IConditionalAction2, self).get_PolygonSourceName()
    def putref_PolygonSourceName(self, ppiSourceName):
        '''Method IConditionalAction2.putref_PolygonSourceName

           INPUT
            ppiSourceName       : IName*'''
        return super(IConditionalAction2, self).putref_PolygonSourceName(ppiSourceName)
    def get_ColumnList(self):
        '''Method IConditionalAction2.get_ColumnList

           OUTPUT
            pVal                : VARIANT*'''
        return super(IConditionalAction2, self).get_ColumnList()
    def put_ColumnList(self, pVal):
        '''Method IConditionalAction2.put_ColumnList

           INPUT
            pVal                : VARIANT'''
        return super(IConditionalAction2, self).put_ColumnList(pVal)
    def get_TriggerLayerName(self):
        '''Method IConditionalAction2.get_TriggerLayerName

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction2, self).get_TriggerLayerName()
    def put_LocationTriggerName(self, pVal):
        '''Method IConditionalAction2.put_LocationTriggerName

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction2, self).put_LocationTriggerName(pVal)
    def get_LocationTriggerName(self):
        '''Method IConditionalAction2.get_LocationTriggerName

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction2, self).get_LocationTriggerName()
    def put_TestGeometry(self, ppiTestGeometry):
        '''Method IConditionalAction2.put_TestGeometry

           INPUT
            ppiTestGeometry     : IGeometry*'''
        return super(IConditionalAction2, self).put_TestGeometry(ppiTestGeometry)
    def get_TestGeometry(self):
        '''Method IConditionalAction2.get_TestGeometry

           OUTPUT
            ppiTestGeometry     : IGeometry**'''
        return super(IConditionalAction2, self).get_TestGeometry()
    def put_SpatialReference(self, pVal):
        '''Method IConditionalAction2.put_SpatialReference

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction2, self).put_SpatialReference(pVal)
    def get_SpatialReference(self):
        '''Method IConditionalAction2.get_SpatialReference

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction2, self).get_SpatialReference()
    ColumnList = property(get_ColumnList, put_ColumnList, None)
    LocationTriggerName = property(get_LocationTriggerName, put_LocationTriggerName, None)
    LocationTriggerType = property(get_LocationTriggerType, put_LocationTriggerType, None)
    NegateLocationTrigger = property(get_NegateLocationTrigger, put_NegateLocationTrigger, None)
    PolygonSourceName = property(get_PolygonSourceName, putref_PolygonSourceName, None)
    QueryString = property(get_QueryString, put_QueryString, None)
    SpatialReference = property(get_SpatialReference, put_SpatialReference, None)
    TestGeometry = property(get_TestGeometry, put_TestGeometry, None)
    TriggerLayer = property(get_TriggerLayer, putref_TriggerLayer, None)
    TriggerLayerName = property(get_TriggerLayerName, None, None)
    TriggerType = property(get_TriggerType, put_TriggerType, None)

class IConditionalAction3(_esriCarto.IConditionalAction3):
    _IID = uuid.UUID('5441a7de-2109-4863-80af-637b4971a6ea')

    def __init__(self, *args, **kw):
        super(IConditionalAction3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FavorQuery(self):
        '''Method IConditionalAction3.get_FavorQuery

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IConditionalAction3, self).get_FavorQuery()
    def put_FavorQuery(self, pVal):
        '''Method IConditionalAction3.put_FavorQuery

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IConditionalAction3, self).put_FavorQuery(pVal)
    def get_ConditionalActionDescription(self):
        '''Method IConditionalAction3.get_ConditionalActionDescription

           OUTPUT
            pbstrDesc           : BSTR*'''
        return super(IConditionalAction3, self).get_ConditionalActionDescription()
    ConditionalActionDescription = property(get_ConditionalActionDescription, None, None)
    FavorQuery = property(get_FavorQuery, put_FavorQuery, None)

class IConditionalAction4(_esriCarto.IConditionalAction4):
    _IID = uuid.UUID('9ea7fb9c-109f-48e8-91d5-50bb5170244e')

    def __init__(self, *args, **kw):
        super(IConditionalAction4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FavorQuery(self):
        '''Method IConditionalAction4.get_FavorQuery

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IConditionalAction4, self).get_FavorQuery()
    def put_FavorQuery(self, pVal):
        '''Method IConditionalAction4.put_FavorQuery

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IConditionalAction4, self).put_FavorQuery(pVal)
    def putref_LocationTrigger(self, ppLocationTrigger):
        '''Method IConditionalAction4.putref_LocationTrigger

           INPUT
            ppLocationTrigger   : ILocationTrigger*'''
        return super(IConditionalAction4, self).putref_LocationTrigger(ppLocationTrigger)
    def get_LocationTrigger(self):
        '''Method IConditionalAction4.get_LocationTrigger

           OUTPUT
            ppLocationTrigger   : ILocationTrigger**'''
        return super(IConditionalAction4, self).get_LocationTrigger()
    def get_TriggerType(self):
        '''Method IConditionalAction2.get_TriggerType (from IConditionalAction2)

           OUTPUT
            pVal                : enumTriggerType*'''
        return super(IConditionalAction4, self).get_TriggerType()
    def put_TriggerType(self, pVal):
        '''Method IConditionalAction2.put_TriggerType (from IConditionalAction2)

           INPUT
            pVal                : enumTriggerType'''
        return super(IConditionalAction4, self).put_TriggerType(pVal)
    def get_LocationTriggerType(self):
        '''Method IConditionalAction2.get_LocationTriggerType (from IConditionalAction2)

           OUTPUT
            pVal                : esriSpatialRelEnum*'''
        return super(IConditionalAction4, self).get_LocationTriggerType()
    def put_LocationTriggerType(self, pVal):
        '''Method IConditionalAction2.put_LocationTriggerType (from IConditionalAction2)

           INPUT
            pVal                : esriSpatialRelEnum'''
        return super(IConditionalAction4, self).put_LocationTriggerType(pVal)
    def get_QueryString(self):
        '''Method IConditionalAction2.get_QueryString (from IConditionalAction2)

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction4, self).get_QueryString()
    def put_QueryString(self, pVal):
        '''Method IConditionalAction2.put_QueryString (from IConditionalAction2)

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction4, self).put_QueryString(pVal)
    def get_TriggerLayer(self):
        '''Method IConditionalAction2.get_TriggerLayer (from IConditionalAction2)

           OUTPUT
            pVal                : ILayer**'''
        return super(IConditionalAction4, self).get_TriggerLayer()
    def putref_TriggerLayer(self, pVal):
        '''Method IConditionalAction2.putref_TriggerLayer (from IConditionalAction2)

           INPUT
            pVal                : ILayer*'''
        return super(IConditionalAction4, self).putref_TriggerLayer(pVal)
    def get_NegateLocationTrigger(self):
        '''Method IConditionalAction2.get_NegateLocationTrigger (from IConditionalAction2)

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IConditionalAction4, self).get_NegateLocationTrigger()
    def put_NegateLocationTrigger(self, pVal):
        '''Method IConditionalAction2.put_NegateLocationTrigger (from IConditionalAction2)

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IConditionalAction4, self).put_NegateLocationTrigger(pVal)
    def get_PolygonSourceName(self):
        '''Method IConditionalAction2.get_PolygonSourceName (from IConditionalAction2)

           OUTPUT
            ppiSourceName       : IName**'''
        return super(IConditionalAction4, self).get_PolygonSourceName()
    def putref_PolygonSourceName(self, ppiSourceName):
        '''Method IConditionalAction2.putref_PolygonSourceName (from IConditionalAction2)

           INPUT
            ppiSourceName       : IName*'''
        return super(IConditionalAction4, self).putref_PolygonSourceName(ppiSourceName)
    def get_ColumnList(self):
        '''Method IConditionalAction2.get_ColumnList (from IConditionalAction2)

           OUTPUT
            pVal                : VARIANT*'''
        return super(IConditionalAction4, self).get_ColumnList()
    def put_ColumnList(self, pVal):
        '''Method IConditionalAction2.put_ColumnList (from IConditionalAction2)

           INPUT
            pVal                : VARIANT'''
        return super(IConditionalAction4, self).put_ColumnList(pVal)
    def get_TriggerLayerName(self):
        '''Method IConditionalAction2.get_TriggerLayerName (from IConditionalAction2)

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction4, self).get_TriggerLayerName()
    def put_LocationTriggerName(self, pVal):
        '''Method IConditionalAction2.put_LocationTriggerName (from IConditionalAction2)

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction4, self).put_LocationTriggerName(pVal)
    def get_LocationTriggerName(self):
        '''Method IConditionalAction2.get_LocationTriggerName (from IConditionalAction2)

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction4, self).get_LocationTriggerName()
    def put_TestGeometry(self, ppiTestGeometry):
        '''Method IConditionalAction2.put_TestGeometry (from IConditionalAction2)

           INPUT
            ppiTestGeometry     : IGeometry*'''
        return super(IConditionalAction4, self).put_TestGeometry(ppiTestGeometry)
    def get_TestGeometry(self):
        '''Method IConditionalAction2.get_TestGeometry (from IConditionalAction2)

           OUTPUT
            ppiTestGeometry     : IGeometry**'''
        return super(IConditionalAction4, self).get_TestGeometry()
    def put_SpatialReference(self, pVal):
        '''Method IConditionalAction2.put_SpatialReference (from IConditionalAction2)

           INPUT
            pVal                : BSTR'''
        return super(IConditionalAction4, self).put_SpatialReference(pVal)
    def get_SpatialReference(self):
        '''Method IConditionalAction2.get_SpatialReference (from IConditionalAction2)

           OUTPUT
            pVal                : BSTR*'''
        return super(IConditionalAction4, self).get_SpatialReference()
    ColumnList = property(get_ColumnList, put_ColumnList, None)
    FavorQuery = property(get_FavorQuery, put_FavorQuery, None)
    LocationTrigger = property(get_LocationTrigger, putref_LocationTrigger, None)
    LocationTriggerName = property(get_LocationTriggerName, put_LocationTriggerName, None)
    LocationTriggerType = property(get_LocationTriggerType, put_LocationTriggerType, None)
    NegateLocationTrigger = property(get_NegateLocationTrigger, put_NegateLocationTrigger, None)
    PolygonSourceName = property(get_PolygonSourceName, putref_PolygonSourceName, None)
    QueryString = property(get_QueryString, put_QueryString, None)
    SpatialReference = property(get_SpatialReference, put_SpatialReference, None)
    TestGeometry = property(get_TestGeometry, put_TestGeometry, None)
    TriggerLayer = property(get_TriggerLayer, putref_TriggerLayer, None)
    TriggerLayerName = property(get_TriggerLayerName, None, None)
    TriggerType = property(get_TriggerType, put_TriggerType, None)

class ILayerAction(_esriCarto.ILayerAction):
    _IID = uuid.UUID('cc018a6c-24fb-11d4-b34c-00104ba2abcc')

    def __init__(self, *args, **kw):
        super(ILayerAction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Layer(self):
        '''Method ILayerAction.get_Layer

           OUTPUT
            Layer               : ILayer**'''
        return super(ILayerAction, self).get_Layer()
    def putref_Layer(self, Layer):
        '''Method ILayerAction.putref_Layer

           INPUT
            Layer               : ILayer*'''
        return super(ILayerAction, self).putref_Layer(Layer)
    def get_EventIdColumnNumber(self):
        '''Method ILayerAction.get_EventIdColumnNumber

           OUTPUT
            columnIndex         : int*'''
        return super(ILayerAction, self).get_EventIdColumnNumber()
    def put_EventIdColumnNumber(self, columnIndex):
        '''Method ILayerAction.put_EventIdColumnNumber

           INPUT
            columnIndex         : int'''
        return super(ILayerAction, self).put_EventIdColumnNumber(columnIndex)
    EventIdColumnNumber = property(get_EventIdColumnNumber, put_EventIdColumnNumber, None)
    Layer = property(get_Layer, putref_Layer, None)

class IActionState(_esriCarto.IActionState):
    _IID = uuid.UUID('4ff83f84-8159-46e6-9d6f-db91860190d7')
    def ResetToDefaultState(self):
        '''Method IActionState.ResetToDefaultState'''
        return super(IActionState, self).ResetToDefaultState()

class IHighlightSuppressionAction(_esriCarto.IHighlightSuppressionAction):
    _IID = uuid.UUID('705aafe4-568b-4818-a312-2386d3cfbdba')

    def __init__(self, *args, **kw):
        super(IHighlightSuppressionAction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ActionType(self):
        '''Method IHighlightSuppressionAction.get_ActionType

           OUTPUT
            pVal                : enumHighlightSuppression*'''
        return super(IHighlightSuppressionAction, self).get_ActionType()
    def put_ActionType(self, pVal):
        '''Method IHighlightSuppressionAction.put_ActionType

           INPUT
            pVal                : enumHighlightSuppression'''
        return super(IHighlightSuppressionAction, self).put_ActionType(pVal)
    def get_HighlightSymbol(self):
        '''Method IHighlightSuppressionAction.get_HighlightSymbol

           OUTPUT
            pVal                : ISymbol**'''
        return super(IHighlightSuppressionAction, self).get_HighlightSymbol()
    def putref_HighlightSymbol(self, pVal):
        '''Method IHighlightSuppressionAction.putref_HighlightSymbol

           INPUT
            pVal                : ISymbol*'''
        return super(IHighlightSuppressionAction, self).putref_HighlightSymbol(pVal)
    def IsSuppression(self):
        '''Method IHighlightSuppressionAction.IsSuppression

           OUTPUT
            bResult             : VARIANT_BOOL*'''
        return super(IHighlightSuppressionAction, self).IsSuppression()
    def ContainsFeature(self, OID):
        '''Method IHighlightSuppressionAction.ContainsFeature

           INPUT
            OID                 : long

           OUTPUT
            bResult             : VARIANT_BOOL*'''
        return super(IHighlightSuppressionAction, self).ContainsFeature(OID)
    def ClearObjectArray(self):
        '''Method IHighlightSuppressionAction.ClearObjectArray'''
        return super(IHighlightSuppressionAction, self).ClearObjectArray()
    ActionType = property(get_ActionType, put_ActionType, None)
    HighlightSymbol = property(get_HighlightSymbol, putref_HighlightSymbol, None)

class IDirectData(_esriCarto.IDirectData):
    _IID = uuid.UUID('1c6ba521-2f59-11d5-b7e2-00010265adc5')

    def __init__(self, *args, **kw):
        super(IDirectData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def WriteProperties(self, piStream):
        '''Method IDirectData.WriteProperties

           INPUT
            piStream            : IStream*'''
        return super(IDirectData, self).WriteProperties(piStream)
    def ReadProperties(self, piStream):
        '''Method IDirectData.ReadProperties

           INPUT
            piStream            : IStream*'''
        return super(IDirectData, self).ReadProperties(piStream)
    def PostMessage(self, piMsg):
        '''Method IDirectData.PostMessage

           INPUT
            piMsg               : IDataMessage*'''
        return super(IDirectData, self).PostMessage(piMsg)
    def get_PreActionProcessor(self):
        '''Method IDirectData.get_PreActionProcessor

           OUTPUT
            ppiProcessor        : IActionProcessor**'''
        return super(IDirectData, self).get_PreActionProcessor()
    def putref_PreActionProcessor(self, ppiProcessor):
        '''Method IDirectData.putref_PreActionProcessor

           INPUT
            ppiProcessor        : IActionProcessor*'''
        return super(IDirectData, self).putref_PreActionProcessor(ppiProcessor)
    def get_PreActions(self):
        '''Method IDirectData.get_PreActions

           OUTPUT
            ppiActions          : IActionCollection**'''
        return super(IDirectData, self).get_PreActions()
    def putref_PreActions(self, ppiActions):
        '''Method IDirectData.putref_PreActions

           INPUT
            ppiActions          : IActionCollection*'''
        return super(IDirectData, self).putref_PreActions(ppiActions)
    PreActionProcessor = property(get_PreActionProcessor, putref_PreActionProcessor, None)
    PreActions = property(get_PreActions, putref_PreActions, None)

class ITemporalSearch(_esriCarto.ITemporalSearch):
    _IID = uuid.UUID('df2b7788-6450-4c78-b43f-c80c3c2730cc')
    def LastKnownOIDs(self, varStartingTime, varEndingTime):
        '''Method ITemporalSearch.LastKnownOIDs

           INPUTS
            varStartingTime     : VARIANT
            varEndingTime       : VARIANT

           OUTPUT
            ppiOIDs             : IFeatureIDSet**'''
        return super(ITemporalSearch, self).LastKnownOIDs(varStartingTime, varEndingTime)
    def LastKnownFeatures(self, varStartingTime, varEndingTime):
        '''Method ITemporalSearch.LastKnownFeatures

           INPUTS
            varStartingTime     : VARIANT
            varEndingTime       : VARIANT

           OUTPUT
            ppiCursor           : ICursor**'''
        return super(ITemporalSearch, self).LastKnownFeatures(varStartingTime, varEndingTime)
    def QueryTemporalExtent(self):
        '''Method ITemporalSearch.QueryTemporalExtent

           OUTPUTS
            pvarStartTime       : VARIANT*
            pvarEndTime         : VARIANT*'''
        return super(ITemporalSearch, self).QueryTemporalExtent()

class IRasterRenderer(_esriCarto.IRasterRenderer):
    _IID = uuid.UUID('6f5322d1-3790-11d2-8d26-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRasterRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def CanRender(self, Raster):
        '''Method IRasterRenderer.CanRender

           INPUT
            Raster              : IRaster*

           OUTPUT
            pCanRender          : VARIANT_BOOL*'''
        return super(IRasterRenderer, self).CanRender(Raster)
    def putref_Raster(self, Raster):
        '''Method IRasterRenderer.putref_Raster

           INPUT
            Raster              : IRaster*'''
        return super(IRasterRenderer, self).putref_Raster(Raster)
    def get_Raster(self):
        '''Method IRasterRenderer.get_Raster

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterRenderer, self).get_Raster()
    def Draw(self, Raster, DrawPhase, pDisplay, pTrackCancel):
        '''Method IRasterRenderer.Draw

           INPUTS
            Raster              : IRaster*
            DrawPhase           : esriDrawPhase
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(IRasterRenderer, self).Draw(Raster, DrawPhase, pDisplay, pTrackCancel)
    def get_Updated(self):
        '''Method IRasterRenderer.get_Updated

           OUTPUT
            pUpdated            : VARIANT_BOOL*'''
        return super(IRasterRenderer, self).get_Updated()
    def Update(self):
        '''Method IRasterRenderer.Update'''
        return super(IRasterRenderer, self).Update()
    def Copy(self, pSource):
        '''Method IRasterRenderer.Copy

           INPUT
            pSource             : IRasterRenderer*'''
        return super(IRasterRenderer, self).Copy(pSource)
    def get_ResamplingType(self):
        '''Method IRasterRenderer.get_ResamplingType

           OUTPUT
            pResamplingType     : rstResamplingTypes*'''
        return super(IRasterRenderer, self).get_ResamplingType()
    def put_ResamplingType(self, pResamplingType):
        '''Method IRasterRenderer.put_ResamplingType

           INPUT
            pResamplingType     : rstResamplingTypes'''
        return super(IRasterRenderer, self).put_ResamplingType(pResamplingType)
    def put_DisplayResolutionFactor(self, pnFactor):
        '''Method IRasterRenderer.put_DisplayResolutionFactor

           INPUT
            pnFactor            : long'''
        return super(IRasterRenderer, self).put_DisplayResolutionFactor(pnFactor)
    def get_DisplayResolutionFactor(self):
        '''Method IRasterRenderer.get_DisplayResolutionFactor

           OUTPUT
            pnFactor            : long*'''
        return super(IRasterRenderer, self).get_DisplayResolutionFactor()
    DisplayResolutionFactor = property(get_DisplayResolutionFactor, put_DisplayResolutionFactor, None)
    Raster = property(get_Raster, putref_Raster, None)
    ResamplingType = property(get_ResamplingType, put_ResamplingType, None)
    Updated = property(get_Updated, None, None)

class IRasterLayer(_esriCarto.IRasterLayer):
    _IID = uuid.UUID('d02371c7-35f7-11d2-b1f2-00c04f8edeff')

    def __init__(self, *args, **kw):
        super(IRasterLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FilePath(self):
        '''Method IRasterLayer.get_FilePath

           OUTPUT
            FilePath            : BSTR*'''
        return super(IRasterLayer, self).get_FilePath()
    def get_Raster(self):
        '''Method IRasterLayer.get_Raster

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterLayer, self).get_Raster()
    def CreateFromRaster(self, Raster):
        '''Method IRasterLayer.CreateFromRaster

           INPUT
            Raster              : IRaster*'''
        return super(IRasterLayer, self).CreateFromRaster(Raster)
    def CreateFromDataset(self, RasterDataset):
        '''Method IRasterLayer.CreateFromDataset

           INPUT
            RasterDataset       : IRasterDataset*'''
        return super(IRasterLayer, self).CreateFromDataset(RasterDataset)
    def CreateFromFilePath(self, FilePath):
        '''Method IRasterLayer.CreateFromFilePath

           INPUT
            FilePath            : BSTR'''
        return super(IRasterLayer, self).CreateFromFilePath(FilePath)
    def get_Renderer(self):
        '''Method IRasterLayer.get_Renderer

           OUTPUT
            Renderer            : IRasterRenderer**'''
        return super(IRasterLayer, self).get_Renderer()
    def putref_Renderer(self, Renderer):
        '''Method IRasterLayer.putref_Renderer

           INPUT
            Renderer            : IRasterRenderer*'''
        return super(IRasterLayer, self).putref_Renderer(Renderer)
    def get_BandCount(self):
        '''Method IRasterLayer.get_BandCount

           OUTPUT
            BandCount           : long*'''
        return super(IRasterLayer, self).get_BandCount()
    def get_ColumnCount(self):
        '''Method IRasterLayer.get_ColumnCount

           OUTPUT
            ColumnCount         : long*'''
        return super(IRasterLayer, self).get_ColumnCount()
    def get_RowCount(self):
        '''Method IRasterLayer.get_RowCount

           OUTPUT
            RowCount            : long*'''
        return super(IRasterLayer, self).get_RowCount()
    def get_PyramidPresent(self):
        '''Method IRasterLayer.get_PyramidPresent

           OUTPUT
            pbPyramidPresent    : VARIANT_BOOL*'''
        return super(IRasterLayer, self).get_PyramidPresent()
    def put_PyramidPresent(self, pbPyramidPresent):
        '''Method IRasterLayer.put_PyramidPresent

           INPUT
            pbPyramidPresent    : VARIANT_BOOL'''
        return super(IRasterLayer, self).put_PyramidPresent(pbPyramidPresent)
    def get_DataFrameExtent(self):
        '''Method IRasterLayer.get_DataFrameExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterLayer, self).get_DataFrameExtent()
    def put_VisibleExtent(self, ppVisibleExtent):
        '''Method IRasterLayer.put_VisibleExtent

           INPUT
            ppVisibleExtent     : IEnvelope*'''
        return super(IRasterLayer, self).put_VisibleExtent(ppVisibleExtent)
    def get_VisibleExtent(self):
        '''Method IRasterLayer.get_VisibleExtent

           OUTPUT
            ppVisibleExtent     : IEnvelope**'''
        return super(IRasterLayer, self).get_VisibleExtent()
    def put_PrimaryField(self, pnField):
        '''Method IRasterLayer.put_PrimaryField

           INPUT
            pnField             : long'''
        return super(IRasterLayer, self).put_PrimaryField(pnField)
    def get_PrimaryField(self):
        '''Method IRasterLayer.get_PrimaryField

           OUTPUT
            pnField             : long*'''
        return super(IRasterLayer, self).get_PrimaryField()
    def put_ShowResolution(self, b):
        '''Method IRasterLayer.put_ShowResolution

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterLayer, self).put_ShowResolution(b)
    def get_ShowResolution(self):
        '''Method IRasterLayer.get_ShowResolution

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterLayer, self).get_ShowResolution()
    def put_DisplayResolutionFactor(self, pnFactor):
        '''Method IRasterLayer.put_DisplayResolutionFactor

           INPUT
            pnFactor            : long'''
        return super(IRasterLayer, self).put_DisplayResolutionFactor(pnFactor)
    def get_DisplayResolutionFactor(self):
        '''Method IRasterLayer.get_DisplayResolutionFactor

           OUTPUT
            pnFactor            : long*'''
        return super(IRasterLayer, self).get_DisplayResolutionFactor()
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(IRasterLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(IRasterLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IRasterLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(IRasterLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(IRasterLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(IRasterLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(IRasterLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(IRasterLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IRasterLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IRasterLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IRasterLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IRasterLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(IRasterLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IRasterLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IRasterLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(IRasterLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IRasterLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IRasterLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    BandCount = property(get_BandCount, None, None)
    Cached = property(get_Cached, put_Cached, None)
    ColumnCount = property(get_ColumnCount, None, None)
    DataFrameExtent = property(get_DataFrameExtent, None, None)
    DisplayResolutionFactor = property(get_DisplayResolutionFactor, put_DisplayResolutionFactor, None)
    FilePath = property(get_FilePath, None, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    PrimaryField = property(get_PrimaryField, put_PrimaryField, None)
    PyramidPresent = property(get_PyramidPresent, put_PyramidPresent, None)
    Raster = property(get_Raster, None, None)
    Renderer = property(get_Renderer, putref_Renderer, None)
    RowCount = property(get_RowCount, None, None)
    ShowResolution = property(get_ShowResolution, put_ShowResolution, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)
    VisibleExtent = property(get_VisibleExtent, put_VisibleExtent, None)

class IRasterRenderer2(_esriCarto.IRasterRenderer2):
    _IID = uuid.UUID('36695416-2a62-4f24-a97c-5b60f40cf311')
    def RecreateRaster(self, pDataset, pRaster):
        '''Method IRasterRenderer2.RecreateRaster

           INPUTS
            pDataset            : IRasterDataset*
            pRaster             : IRaster*'''
        return super(IRasterRenderer2, self).RecreateRaster(pDataset, pRaster)
    def AdaptRaster(self, pRaster):
        '''Method IRasterRenderer2.AdaptRaster

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterRenderer2, self).AdaptRaster(pRaster)

class IRasterRendererInfo(_esriCarto.IRasterRendererInfo):
    _IID = uuid.UUID('2546feb5-7334-41c7-9160-0b15ba62c809')
    def get_Name(self):
        '''Method IRasterRendererInfo.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterRendererInfo, self).get_Name()
    def get_Description(self):
        '''Method IRasterRendererInfo.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRasterRendererInfo, self).get_Description()
    Description = property(get_Description, None, None)
    Name = property(get_Name, None, None)

class IRasterRendererColorRamp(_esriCarto.IRasterRendererColorRamp):
    _IID = uuid.UUID('04402b9e-6136-4ba4-a5f7-50fdbc245d9c')

    def __init__(self, *args, **kw):
        super(IRasterRendererColorRamp, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ColorScheme(self):
        '''Method IRasterRendererColorRamp.get_ColorScheme

           OUTPUT
            ColorScheme         : BSTR*'''
        return super(IRasterRendererColorRamp, self).get_ColorScheme()
    def put_ColorScheme(self, ColorScheme):
        '''Method IRasterRendererColorRamp.put_ColorScheme

           INPUT
            ColorScheme         : BSTR'''
        return super(IRasterRendererColorRamp, self).put_ColorScheme(ColorScheme)
    def get_ColorRamp(self):
        '''Method IRasterRendererColorRamp.get_ColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IRasterRendererColorRamp, self).get_ColorRamp()
    def put_ColorRamp(self, ppColorRamp):
        '''Method IRasterRendererColorRamp.put_ColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IRasterRendererColorRamp, self).put_ColorRamp(ppColorRamp)
    ColorRamp = property(get_ColorRamp, put_ColorRamp, None)
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)

class IRasterRendererMaker(_esriCarto.IRasterRendererMaker):
    _IID = uuid.UUID('7c84e06a-c743-11d4-b290-00508bcdc7c8')
    def CreateDefaultRasterRenderer(self, pRaster):
        '''Method IRasterRendererMaker.CreateDefaultRasterRenderer

           INPUT
            pRaster             : IRaster*

           OUTPUT
            ppRasterRenderer    : IRasterRenderer**'''
        return super(IRasterRendererMaker, self).CreateDefaultRasterRenderer(pRaster)
    def get_Priority(self):
        '''Method IRasterRendererMaker.get_Priority

           OUTPUT
            Value               : long*'''
        return super(IRasterRendererMaker, self).get_Priority()
    Priority = property(get_Priority, None, None)

class IRasterRendererMaker2(_esriCarto.IRasterRendererMaker2):
    _IID = uuid.UUID('f21306ec-f028-4325-ad52-52b616b81184')
    def CreateDefaultRasterRenderer(self, pRasterDataset):
        '''Method IRasterRendererMaker2.CreateDefaultRasterRenderer

           INPUT
            pRasterDataset      : IRasterDataset*

           OUTPUT
            ppRasterRenderer    : IRasterRenderer**'''
        return super(IRasterRendererMaker2, self).CreateDefaultRasterRenderer(pRasterDataset)

class IRasterDisplayProps(_esriCarto.IRasterDisplayProps):
    _IID = uuid.UUID('a6a46058-92f3-11d3-aba5-0008c73fca1c')

    def __init__(self, *args, **kw):
        super(IRasterDisplayProps, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ContrastValue(self, iValue):
        '''Method IRasterDisplayProps.put_ContrastValue

           INPUT
            iValue              : int'''
        return super(IRasterDisplayProps, self).put_ContrastValue(iValue)
    def get_ContrastValue(self):
        '''Method IRasterDisplayProps.get_ContrastValue

           OUTPUT
            iValue              : int*'''
        return super(IRasterDisplayProps, self).get_ContrastValue()
    def put_BrightnessValue(self, pValue):
        '''Method IRasterDisplayProps.put_BrightnessValue

           INPUT
            pValue              : int'''
        return super(IRasterDisplayProps, self).put_BrightnessValue(pValue)
    def get_BrightnessValue(self):
        '''Method IRasterDisplayProps.get_BrightnessValue

           OUTPUT
            pValue              : int*'''
        return super(IRasterDisplayProps, self).get_BrightnessValue()
    def put_TransparencyValue(self, pValue):
        '''Method IRasterDisplayProps.put_TransparencyValue

           INPUT
            pValue              : int'''
        return super(IRasterDisplayProps, self).put_TransparencyValue(pValue)
    def get_TransparencyValue(self):
        '''Method IRasterDisplayProps.get_TransparencyValue

           OUTPUT
            pValue              : int*'''
        return super(IRasterDisplayProps, self).get_TransparencyValue()
    def get_NoDataColor(self):
        '''Method IRasterDisplayProps.get_NoDataColor

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDisplayProps, self).get_NoDataColor()
    def putref_NoDataColor(self, ppColor):
        '''Method IRasterDisplayProps.putref_NoDataColor

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDisplayProps, self).putref_NoDataColor(ppColor)
    BrightnessValue = property(get_BrightnessValue, put_BrightnessValue, None)
    ContrastValue = property(get_ContrastValue, put_ContrastValue, None)
    NoDataColor = property(get_NoDataColor, putref_NoDataColor, None)
    TransparencyValue = property(get_TransparencyValue, put_TransparencyValue, None)

class IRasterUniqueValueRenderer(_esriCarto.IRasterUniqueValueRenderer):
    _IID = uuid.UUID('279369a8-57da-11d2-aab1-00c04fa33416')

    def __init__(self, *args, **kw):
        super(IRasterUniqueValueRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseDefaultSymbol(self, pFlag):
        '''Method IRasterUniqueValueRenderer.put_UseDefaultSymbol

           INPUT
            pFlag               : VARIANT_BOOL'''
        return super(IRasterUniqueValueRenderer, self).put_UseDefaultSymbol(pFlag)
    def get_UseDefaultSymbol(self):
        '''Method IRasterUniqueValueRenderer.get_UseDefaultSymbol

           OUTPUT
            pFlag               : VARIANT_BOOL*'''
        return super(IRasterUniqueValueRenderer, self).get_UseDefaultSymbol()
    def putref_DefaultSymbol(self, ppSymbol):
        '''Method IRasterUniqueValueRenderer.putref_DefaultSymbol

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IRasterUniqueValueRenderer, self).putref_DefaultSymbol(ppSymbol)
    def get_DefaultSymbol(self):
        '''Method IRasterUniqueValueRenderer.get_DefaultSymbol

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IRasterUniqueValueRenderer, self).get_DefaultSymbol()
    def put_DefaultLabel(self, pLabel):
        '''Method IRasterUniqueValueRenderer.put_DefaultLabel

           INPUT
            pLabel              : BSTR'''
        return super(IRasterUniqueValueRenderer, self).put_DefaultLabel(pLabel)
    def get_DefaultLabel(self):
        '''Method IRasterUniqueValueRenderer.get_DefaultLabel

           OUTPUT
            pLabel              : BSTR*'''
        return super(IRasterUniqueValueRenderer, self).get_DefaultLabel()
    def put_Field(self, pField):
        '''Method IRasterUniqueValueRenderer.put_Field

           INPUT
            pField              : BSTR'''
        return super(IRasterUniqueValueRenderer, self).put_Field(pField)
    def get_Field(self):
        '''Method IRasterUniqueValueRenderer.get_Field

           OUTPUT
            pField              : BSTR*'''
        return super(IRasterUniqueValueRenderer, self).get_Field()
    def put_ColorScheme(self, pName):
        '''Method IRasterUniqueValueRenderer.put_ColorScheme

           INPUT
            pName               : BSTR'''
        return super(IRasterUniqueValueRenderer, self).put_ColorScheme(pName)
    def get_ColorScheme(self):
        '''Method IRasterUniqueValueRenderer.get_ColorScheme

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterUniqueValueRenderer, self).get_ColorScheme()
    def put_HeadingCount(self, pCount):
        '''Method IRasterUniqueValueRenderer.put_HeadingCount

           INPUT
            pCount              : long'''
        return super(IRasterUniqueValueRenderer, self).put_HeadingCount(pCount)
    def get_HeadingCount(self):
        '''Method IRasterUniqueValueRenderer.get_HeadingCount

           OUTPUT
            pCount              : long*'''
        return super(IRasterUniqueValueRenderer, self).get_HeadingCount()
    def put_Heading(self, iHeading, pHeading):
        '''Method IRasterUniqueValueRenderer.put_Heading

           INPUTS
            iHeading            : long
            pHeading            : BSTR'''
        return super(IRasterUniqueValueRenderer, self).put_Heading(iHeading, pHeading)
    def get_Heading(self, iHeading):
        '''Method IRasterUniqueValueRenderer.get_Heading

           INPUT
            iHeading            : long

           OUTPUT
            pHeading            : BSTR*'''
        return super(IRasterUniqueValueRenderer, self).get_Heading(iHeading)
    def put_ClassCount(self, iHeading, pCount):
        '''Method IRasterUniqueValueRenderer.put_ClassCount

           INPUTS
            iHeading            : long
            pCount              : long'''
        return super(IRasterUniqueValueRenderer, self).put_ClassCount(iHeading, pCount)
    def get_ClassCount(self, iHeading):
        '''Method IRasterUniqueValueRenderer.get_ClassCount

           INPUT
            iHeading            : long

           OUTPUT
            pCount              : long*'''
        return super(IRasterUniqueValueRenderer, self).get_ClassCount(iHeading)
    def put_Symbol(self, iHeading, iClass, pSymbol):
        '''Method IRasterUniqueValueRenderer.put_Symbol

           INPUTS
            iHeading            : long
            iClass              : long
            pSymbol             : ISymbol*'''
        return super(IRasterUniqueValueRenderer, self).put_Symbol(iHeading, iClass, pSymbol)
    def get_Symbol(self, iHeading, iClass):
        '''Method IRasterUniqueValueRenderer.get_Symbol

           INPUTS
            iHeading            : long
            iClass              : long

           OUTPUT
            pSymbol             : ISymbol**'''
        return super(IRasterUniqueValueRenderer, self).get_Symbol(iHeading, iClass)
    def put_Label(self, iHeading, iClass, pLabel):
        '''Method IRasterUniqueValueRenderer.put_Label

           INPUTS
            iHeading            : long
            iClass              : long
            pLabel              : BSTR'''
        return super(IRasterUniqueValueRenderer, self).put_Label(iHeading, iClass, pLabel)
    def get_Label(self, iHeading, iClass):
        '''Method IRasterUniqueValueRenderer.get_Label

           INPUTS
            iHeading            : long
            iClass              : long

           OUTPUT
            pLabel              : BSTR*'''
        return super(IRasterUniqueValueRenderer, self).get_Label(iHeading, iClass)
    def put_Description(self, iHeading, iClass, pDescription):
        '''Method IRasterUniqueValueRenderer.put_Description

           INPUTS
            iHeading            : long
            iClass              : long
            pDescription        : BSTR'''
        return super(IRasterUniqueValueRenderer, self).put_Description(iHeading, iClass, pDescription)
    def get_Description(self, iHeading, iClass):
        '''Method IRasterUniqueValueRenderer.get_Description

           INPUTS
            iHeading            : long
            iClass              : long

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRasterUniqueValueRenderer, self).get_Description(iHeading, iClass)
    def AddValue(self, iHeading, iClass, Value):
        '''Method IRasterUniqueValueRenderer.AddValue

           INPUTS
            iHeading            : long
            iClass              : long
            Value               : VARIANT'''
        return super(IRasterUniqueValueRenderer, self).AddValue(iHeading, iClass, Value)
    def RemoveValues(self, iHeading, iClass):
        '''Method IRasterUniqueValueRenderer.RemoveValues

           INPUTS
            iHeading            : long
            iClass              : long'''
        return super(IRasterUniqueValueRenderer, self).RemoveValues(iHeading, iClass)
    def get_ValueCount(self, iHeading, iClass):
        '''Method IRasterUniqueValueRenderer.get_ValueCount

           INPUTS
            iHeading            : long
            iClass              : long

           OUTPUT
            pCount              : long*'''
        return super(IRasterUniqueValueRenderer, self).get_ValueCount(iHeading, iClass)
    def get_Value(self, iHeading, iClass, iValue):
        '''Method IRasterUniqueValueRenderer.get_Value

           INPUTS
            iHeading            : long
            iClass              : long
            iValue              : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IRasterUniqueValueRenderer, self).get_Value(iHeading, iClass, iValue)
    ClassCount = property(None, put_ClassCount, None)
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)
    DefaultLabel = property(get_DefaultLabel, put_DefaultLabel, None)
    DefaultSymbol = property(get_DefaultSymbol, putref_DefaultSymbol, None)
    Description = property(None, put_Description, None)
    Field = property(get_Field, put_Field, None)
    Heading = property(None, put_Heading, None)
    HeadingCount = property(get_HeadingCount, put_HeadingCount, None)
    Label = property(None, put_Label, None)
    Symbol = property(None, put_Symbol, None)
    UseDefaultSymbol = property(get_UseDefaultSymbol, put_UseDefaultSymbol, None)
    ClassCount = IndexProperty(get_ClassCount, None)
    Heading = IndexProperty(get_Heading, None)

class IRasterRendererUniqueValues(_esriCarto.IRasterRendererUniqueValues):
    _IID = uuid.UUID('58e9fbff-c3ad-4baa-9258-aa3902e73bc9')

    def __init__(self, *args, **kw):
        super(IRasterRendererUniqueValues, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_UniqueValues(self, ppUniqueValues):
        '''Method IRasterRendererUniqueValues.putref_UniqueValues

           INPUT
            ppUniqueValues      : IUniqueValues*'''
        return super(IRasterRendererUniqueValues, self).putref_UniqueValues(ppUniqueValues)
    def get_UniqueValues(self):
        '''Method IRasterRendererUniqueValues.get_UniqueValues

           OUTPUT
            ppUniqueValues      : IUniqueValues**'''
        return super(IRasterRendererUniqueValues, self).get_UniqueValues()
    UniqueValues = property(get_UniqueValues, putref_UniqueValues, None)

class IRasterClassifyColorRampRenderer(_esriCarto.IRasterClassifyColorRampRenderer):
    _IID = uuid.UUID('4de26f22-a01f-11d2-aae7-00c04fa33416')

    def __init__(self, *args, **kw):
        super(IRasterClassifyColorRampRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassField(self):
        '''Method IRasterClassifyColorRampRenderer.get_ClassField

           OUTPUT
            Field               : BSTR*'''
        return super(IRasterClassifyColorRampRenderer, self).get_ClassField()
    def put_ClassField(self, Field):
        '''Method IRasterClassifyColorRampRenderer.put_ClassField

           INPUT
            Field               : BSTR'''
        return super(IRasterClassifyColorRampRenderer, self).put_ClassField(Field)
    def get_NormField(self):
        '''Method IRasterClassifyColorRampRenderer.get_NormField

           OUTPUT
            Field               : BSTR*'''
        return super(IRasterClassifyColorRampRenderer, self).get_NormField()
    def put_NormField(self, Field):
        '''Method IRasterClassifyColorRampRenderer.put_NormField

           INPUT
            Field               : BSTR'''
        return super(IRasterClassifyColorRampRenderer, self).put_NormField(Field)
    def get_ClassCount(self):
        '''Method IRasterClassifyColorRampRenderer.get_ClassCount

           OUTPUT
            Value               : long*'''
        return super(IRasterClassifyColorRampRenderer, self).get_ClassCount()
    def put_ClassCount(self, Value):
        '''Method IRasterClassifyColorRampRenderer.put_ClassCount

           INPUT
            Value               : long'''
        return super(IRasterClassifyColorRampRenderer, self).put_ClassCount(Value)
    def get_Break(self, Index):
        '''Method IRasterClassifyColorRampRenderer.get_Break

           INPUT
            Index               : long

           OUTPUT
            Value               : double*'''
        return super(IRasterClassifyColorRampRenderer, self).get_Break(Index)
    def put_Break(self, Index, Value):
        '''Method IRasterClassifyColorRampRenderer.put_Break

           INPUTS
            Index               : long
            Value               : double'''
        return super(IRasterClassifyColorRampRenderer, self).put_Break(Index, Value)
    def get_Symbol(self, Index):
        '''Method IRasterClassifyColorRampRenderer.get_Symbol

           INPUT
            Index               : long

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IRasterClassifyColorRampRenderer, self).get_Symbol(Index)
    def put_Symbol(self, Index, Symbol):
        '''Method IRasterClassifyColorRampRenderer.put_Symbol

           INPUTS
            Index               : long
            Symbol              : ISymbol*'''
        return super(IRasterClassifyColorRampRenderer, self).put_Symbol(Index, Symbol)
    def get_Label(self, Index):
        '''Method IRasterClassifyColorRampRenderer.get_Label

           INPUT
            Index               : long

           OUTPUT
            Label               : BSTR*'''
        return super(IRasterClassifyColorRampRenderer, self).get_Label(Index)
    def put_Label(self, Index, Label):
        '''Method IRasterClassifyColorRampRenderer.put_Label

           INPUTS
            Index               : long
            Label               : BSTR'''
        return super(IRasterClassifyColorRampRenderer, self).put_Label(Index, Label)
    def get_Description(self, Index):
        '''Method IRasterClassifyColorRampRenderer.get_Description

           INPUT
            Index               : long

           OUTPUT
            Description         : BSTR*'''
        return super(IRasterClassifyColorRampRenderer, self).get_Description(Index)
    def put_Description(self, Index, Description):
        '''Method IRasterClassifyColorRampRenderer.put_Description

           INPUTS
            Index               : long
            Description         : BSTR'''
        return super(IRasterClassifyColorRampRenderer, self).put_Description(Index, Description)
    def get_SortClassesAscending(self):
        '''Method IRasterClassifyColorRampRenderer.get_SortClassesAscending

           OUTPUT
            Ascending           : VARIANT_BOOL*'''
        return super(IRasterClassifyColorRampRenderer, self).get_SortClassesAscending()
    def put_SortClassesAscending(self, Ascending):
        '''Method IRasterClassifyColorRampRenderer.put_SortClassesAscending

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(IRasterClassifyColorRampRenderer, self).put_SortClassesAscending(Ascending)
    Break = property(None, put_Break, None)
    ClassCount = property(get_ClassCount, put_ClassCount, None)
    ClassField = property(get_ClassField, put_ClassField, None)
    Description = property(None, put_Description, None)
    Label = property(None, put_Label, None)
    NormField = property(get_NormField, put_NormField, None)
    SortClassesAscending = property(get_SortClassesAscending, put_SortClassesAscending, None)
    Symbol = property(None, put_Symbol, None)
    Break = IndexProperty(get_Break, None)
    Description = IndexProperty(get_Description, None)
    Label = IndexProperty(get_Label, None)
    Symbol = IndexProperty(get_Symbol, None)

class IRasterDataExclusion(_esriCarto.IRasterDataExclusion):
    _IID = uuid.UUID('3fe0401e-8806-11d3-a64f-0008c7df8989')

    def __init__(self, *args, **kw):
        super(IRasterDataExclusion, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ExcludeValues(self, Values):
        '''Method IRasterDataExclusion.put_ExcludeValues

           INPUT
            Values              : VARIANT'''
        return super(IRasterDataExclusion, self).put_ExcludeValues(Values)
    def get_ExcludeValues(self):
        '''Method IRasterDataExclusion.get_ExcludeValues

           OUTPUT
            Values              : VARIANT*'''
        return super(IRasterDataExclusion, self).get_ExcludeValues()
    def put_ExcludeRanges(self, Values):
        '''Method IRasterDataExclusion.put_ExcludeRanges

           INPUT
            Values              : VARIANT'''
        return super(IRasterDataExclusion, self).put_ExcludeRanges(Values)
    def get_ExcludeRanges(self):
        '''Method IRasterDataExclusion.get_ExcludeRanges

           OUTPUT
            Values              : VARIANT*'''
        return super(IRasterDataExclusion, self).get_ExcludeRanges()
    def put_ExcludeShowClass(self, Show):
        '''Method IRasterDataExclusion.put_ExcludeShowClass

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IRasterDataExclusion, self).put_ExcludeShowClass(Show)
    def get_ExcludeShowClass(self):
        '''Method IRasterDataExclusion.get_ExcludeShowClass

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IRasterDataExclusion, self).get_ExcludeShowClass()
    def put_ExcludeColor(self, Color):
        '''Method IRasterDataExclusion.put_ExcludeColor

           INPUT
            Color               : IColor*'''
        return super(IRasterDataExclusion, self).put_ExcludeColor(Color)
    def get_ExcludeColor(self):
        '''Method IRasterDataExclusion.get_ExcludeColor

           OUTPUT
            Color               : IColor**'''
        return super(IRasterDataExclusion, self).get_ExcludeColor()
    def put_ExcludeLabel(self, Label):
        '''Method IRasterDataExclusion.put_ExcludeLabel

           INPUT
            Label               : BSTR'''
        return super(IRasterDataExclusion, self).put_ExcludeLabel(Label)
    def get_ExcludeLabel(self):
        '''Method IRasterDataExclusion.get_ExcludeLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IRasterDataExclusion, self).get_ExcludeLabel()
    def put_ExcludeDescription(self, Description):
        '''Method IRasterDataExclusion.put_ExcludeDescription

           INPUT
            Description         : BSTR'''
        return super(IRasterDataExclusion, self).put_ExcludeDescription(Description)
    def get_ExcludeDescription(self):
        '''Method IRasterDataExclusion.get_ExcludeDescription

           OUTPUT
            Description         : BSTR*'''
        return super(IRasterDataExclusion, self).get_ExcludeDescription()
    ExcludeColor = property(get_ExcludeColor, put_ExcludeColor, None)
    ExcludeDescription = property(get_ExcludeDescription, put_ExcludeDescription, None)
    ExcludeLabel = property(get_ExcludeLabel, put_ExcludeLabel, None)
    ExcludeRanges = property(get_ExcludeRanges, put_ExcludeRanges, None)
    ExcludeShowClass = property(get_ExcludeShowClass, put_ExcludeShowClass, None)
    ExcludeValues = property(get_ExcludeValues, put_ExcludeValues, None)

class IRasterClassifyUIProperties(_esriCarto.IRasterClassifyUIProperties):
    _IID = uuid.UUID('75f3c010-7a8c-11d3-9c4f-00c04f5aa6ed')

    def __init__(self, *args, **kw):
        super(IRasterClassifyUIProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassificationMethod(self):
        '''Method IRasterClassifyUIProperties.get_ClassificationMethod

           OUTPUT
            ppClsid             : IUID**'''
        return super(IRasterClassifyUIProperties, self).get_ClassificationMethod()
    def putref_ClassificationMethod(self, ppClsid):
        '''Method IRasterClassifyUIProperties.putref_ClassificationMethod

           INPUT
            ppClsid             : IUID*'''
        return super(IRasterClassifyUIProperties, self).putref_ClassificationMethod(ppClsid)
    def get_ColorRamp(self):
        '''Method IRasterClassifyUIProperties.get_ColorRamp

           OUTPUT
            ColorRamp           : BSTR*'''
        return super(IRasterClassifyUIProperties, self).get_ColorRamp()
    def put_ColorRamp(self, ColorRamp):
        '''Method IRasterClassifyUIProperties.put_ColorRamp

           INPUT
            ColorRamp           : BSTR'''
        return super(IRasterClassifyUIProperties, self).put_ColorRamp(ColorRamp)
    def get_NumberFormat(self):
        '''Method IRasterClassifyUIProperties.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IRasterClassifyUIProperties, self).get_NumberFormat()
    def putref_NumberFormat(self, Format):
        '''Method IRasterClassifyUIProperties.putref_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IRasterClassifyUIProperties, self).putref_NumberFormat(Format)
    def get_ShowClassGaps(self):
        '''Method IRasterClassifyUIProperties.get_ShowClassGaps

           OUTPUT
            showGaps            : VARIANT_BOOL*'''
        return super(IRasterClassifyUIProperties, self).get_ShowClassGaps()
    def put_ShowClassGaps(self, showGaps):
        '''Method IRasterClassifyUIProperties.put_ShowClassGaps

           INPUT
            showGaps            : VARIANT_BOOL'''
        return super(IRasterClassifyUIProperties, self).put_ShowClassGaps(showGaps)
    def get_DeviationInterval(self):
        '''Method IRasterClassifyUIProperties.get_DeviationInterval

           OUTPUT
            Interval            : double*'''
        return super(IRasterClassifyUIProperties, self).get_DeviationInterval()
    def put_DeviationInterval(self, Interval):
        '''Method IRasterClassifyUIProperties.put_DeviationInterval

           INPUT
            Interval            : double'''
        return super(IRasterClassifyUIProperties, self).put_DeviationInterval(Interval)
    ClassificationMethod = property(get_ClassificationMethod, putref_ClassificationMethod, None)
    ColorRamp = property(get_ColorRamp, put_ColorRamp, None)
    DeviationInterval = property(get_DeviationInterval, put_DeviationInterval, None)
    NumberFormat = property(get_NumberFormat, putref_NumberFormat, None)
    ShowClassGaps = property(get_ShowClassGaps, put_ShowClassGaps, None)

class IRasterStretch(_esriCarto.IRasterStretch):
    _IID = uuid.UUID('48bb9988-8250-11d3-aba2-0008c73fca1c')

    def __init__(self, *args, **kw):
        super(IRasterStretch, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_StretchType(self, en_stretch):
        '''Method IRasterStretch.put_StretchType

           INPUT
            en_stretch          : esriRasterStretchTypesEnum'''
        return super(IRasterStretch, self).put_StretchType(en_stretch)
    def get_StretchType(self):
        '''Method IRasterStretch.get_StretchType

           OUTPUT
            en_stretch          : esriRasterStretchTypesEnum*'''
        return super(IRasterStretch, self).get_StretchType()
    def put_StandardDeviationsParam(self, param):
        '''Method IRasterStretch.put_StandardDeviationsParam

           INPUT
            param               : double'''
        return super(IRasterStretch, self).put_StandardDeviationsParam(param)
    def get_StandardDeviationsParam(self):
        '''Method IRasterStretch.get_StandardDeviationsParam

           OUTPUT
            param               : double*'''
        return super(IRasterStretch, self).get_StandardDeviationsParam()
    def put_Invert(self, pInvert):
        '''Method IRasterStretch.put_Invert

           INPUT
            pInvert             : VARIANT_BOOL'''
        return super(IRasterStretch, self).put_Invert(pInvert)
    def get_Invert(self):
        '''Method IRasterStretch.get_Invert

           OUTPUT
            pInvert             : VARIANT_BOOL*'''
        return super(IRasterStretch, self).get_Invert()
    def put_Background(self, b):
        '''Method IRasterStretch.put_Background

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterStretch, self).put_Background(b)
    def get_Background(self):
        '''Method IRasterStretch.get_Background

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterStretch, self).get_Background()
    def get_BackgroundValues(self):
        '''Method IRasterStretch.get_BackgroundValues

           OUTPUT
            pBkg                : double*'''
        return super(IRasterStretch, self).get_BackgroundValues()
    def put_BackgroundValues(self, pBkg):
        '''Method IRasterStretch.put_BackgroundValues

           INPUT
            pBkg                : double*'''
        return super(IRasterStretch, self).put_BackgroundValues(pBkg)
    def get_BackgroundColor(self):
        '''Method IRasterStretch.get_BackgroundColor

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterStretch, self).get_BackgroundColor()
    def putref_BackgroundColor(self, ppColor):
        '''Method IRasterStretch.putref_BackgroundColor

           INPUT
            ppColor             : IColor*'''
        return super(IRasterStretch, self).putref_BackgroundColor(ppColor)
    Background = property(get_Background, put_Background, None)
    BackgroundColor = property(get_BackgroundColor, putref_BackgroundColor, None)
    BackgroundValues = property(get_BackgroundValues, put_BackgroundValues, None)
    Invert = property(get_Invert, put_Invert, None)
    StandardDeviationsParam = property(get_StandardDeviationsParam, put_StandardDeviationsParam, None)
    StretchType = property(get_StretchType, put_StretchType, None)

class IRasterStretch2(_esriCarto.IRasterStretch2):
    _IID = uuid.UUID('51ee1518-7261-4fdd-99c7-b4e35cfc7da0')

    def __init__(self, *args, **kw):
        super(IRasterStretch2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_StretchType(self, stretch):
        '''Method IRasterStretch2.put_StretchType

           INPUT
            stretch             : esriRasterStretchTypesEnum'''
        return super(IRasterStretch2, self).put_StretchType(stretch)
    def get_StretchType(self):
        '''Method IRasterStretch2.get_StretchType

           OUTPUT
            stretch             : esriRasterStretchTypesEnum*'''
        return super(IRasterStretch2, self).get_StretchType()
    def put_StandardDeviationsParam(self, param):
        '''Method IRasterStretch2.put_StandardDeviationsParam

           INPUT
            param               : double'''
        return super(IRasterStretch2, self).put_StandardDeviationsParam(param)
    def get_StandardDeviationsParam(self):
        '''Method IRasterStretch2.get_StandardDeviationsParam

           OUTPUT
            param               : double*'''
        return super(IRasterStretch2, self).get_StandardDeviationsParam()
    def put_Invert(self, pInvert):
        '''Method IRasterStretch2.put_Invert

           INPUT
            pInvert             : VARIANT_BOOL'''
        return super(IRasterStretch2, self).put_Invert(pInvert)
    def get_Invert(self):
        '''Method IRasterStretch2.get_Invert

           OUTPUT
            pInvert             : VARIANT_BOOL*'''
        return super(IRasterStretch2, self).get_Invert()
    def put_Background(self, b):
        '''Method IRasterStretch2.put_Background

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterStretch2, self).put_Background(b)
    def get_Background(self):
        '''Method IRasterStretch2.get_Background

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterStretch2, self).get_Background()
    def get_BackgroundValue(self):
        '''Method IRasterStretch2.get_BackgroundValue

           OUTPUT
            Background          : VARIANT*'''
        return super(IRasterStretch2, self).get_BackgroundValue()
    def put_BackgroundValue(self, Background):
        '''Method IRasterStretch2.put_BackgroundValue

           INPUT
            Background          : VARIANT'''
        return super(IRasterStretch2, self).put_BackgroundValue(Background)
    def get_BackgroundColor(self):
        '''Method IRasterStretch2.get_BackgroundColor

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterStretch2, self).get_BackgroundColor()
    def putref_BackgroundColor(self, ppColor):
        '''Method IRasterStretch2.putref_BackgroundColor

           INPUT
            ppColor             : IColor*'''
        return super(IRasterStretch2, self).putref_BackgroundColor(ppColor)
    def put_StretchStatsType(self, stats):
        '''Method IRasterStretch2.put_StretchStatsType

           INPUT
            stats               : esriRasterStretchStatsTypeEnum'''
        return super(IRasterStretch2, self).put_StretchStatsType(stats)
    def get_StretchStatsType(self):
        '''Method IRasterStretch2.get_StretchStatsType

           OUTPUT
            stats               : esriRasterStretchStatsTypeEnum*'''
        return super(IRasterStretch2, self).get_StretchStatsType()
    def putref_StretchStats(self, ppRGBStats):
        '''Method IRasterStretch2.putref_StretchStats

           INPUT
            ppRGBStats          : IArray*'''
        return super(IRasterStretch2, self).putref_StretchStats(ppRGBStats)
    def get_StretchStats(self):
        '''Method IRasterStretch2.get_StretchStats

           OUTPUT
            ppRGBStats          : IArray**'''
        return super(IRasterStretch2, self).get_StretchStats()
    def putref_SpecificationHistogram(self, pRGBStats):
        '''Method IRasterStretch2.putref_SpecificationHistogram

           INPUT
            pRGBStats           : IArray*'''
        return super(IRasterStretch2, self).putref_SpecificationHistogram(pRGBStats)
    def get_SpecificationHistogram(self):
        '''Method IRasterStretch2.get_SpecificationHistogram

           OUTPUT
            pRGBStats           : IArray**'''
        return super(IRasterStretch2, self).get_SpecificationHistogram()
    Background = property(get_Background, put_Background, None)
    BackgroundColor = property(get_BackgroundColor, putref_BackgroundColor, None)
    BackgroundValue = property(get_BackgroundValue, put_BackgroundValue, None)
    Invert = property(get_Invert, put_Invert, None)
    SpecificationHistogram = property(get_SpecificationHistogram, putref_SpecificationHistogram, None)
    StandardDeviationsParam = property(get_StandardDeviationsParam, put_StandardDeviationsParam, None)
    StretchStats = property(get_StretchStats, putref_StretchStats, None)
    StretchStatsType = property(get_StretchStatsType, put_StretchStatsType, None)
    StretchType = property(get_StretchType, put_StretchType, None)

class IRasterStretch3(_esriCarto.IRasterStretch3):
    _IID = uuid.UUID('30f1c42e-4a45-4564-8f08-76a2cd42f661')

    def __init__(self, *args, **kw):
        super(IRasterStretch3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseGamma(self, pUseGamma):
        '''Method IRasterStretch3.put_UseGamma

           INPUT
            pUseGamma           : VARIANT_BOOL'''
        return super(IRasterStretch3, self).put_UseGamma(pUseGamma)
    def get_UseGamma(self):
        '''Method IRasterStretch3.get_UseGamma

           OUTPUT
            pUseGamma           : VARIANT_BOOL*'''
        return super(IRasterStretch3, self).get_UseGamma()
    def put_GammaValue(self, pGamma):
        '''Method IRasterStretch3.put_GammaValue

           INPUT
            pGamma              : VARIANT'''
        return super(IRasterStretch3, self).put_GammaValue(pGamma)
    def get_GammaValue(self):
        '''Method IRasterStretch3.get_GammaValue

           OUTPUT
            pGamma              : VARIANT*'''
        return super(IRasterStretch3, self).get_GammaValue()
    GammaValue = property(get_GammaValue, put_GammaValue, None)
    UseGamma = property(get_UseGamma, put_UseGamma, None)

class IGlobeRasterStretch(_esriCarto.IGlobeRasterStretch):
    _IID = uuid.UUID('b055b13e-ceb8-406f-a179-1e838f51e30b')

    def __init__(self, *args, **kw):
        super(IGlobeRasterStretch, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsGlobeLayerRenderer(self):
        '''Method IGlobeRasterStretch.get_IsGlobeLayerRenderer

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IGlobeRasterStretch, self).get_IsGlobeLayerRenderer()
    def put_IsGlobeLayerRenderer(self, flag):
        '''Method IGlobeRasterStretch.put_IsGlobeLayerRenderer

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IGlobeRasterStretch, self).put_IsGlobeLayerRenderer(flag)
    IsGlobeLayerRenderer = property(get_IsGlobeLayerRenderer, put_IsGlobeLayerRenderer, None)

class IRasterStretchMinMax(_esriCarto.IRasterStretchMinMax):
    _IID = uuid.UUID('ca38a249-94fe-45d0-9403-d3a8a3911943')

    def __init__(self, *args, **kw):
        super(IRasterStretchMinMax, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StretchMin(self):
        '''Method IRasterStretchMinMax.get_StretchMin

           OUTPUT
            param               : double*'''
        return super(IRasterStretchMinMax, self).get_StretchMin()
    def get_StretchMax(self):
        '''Method IRasterStretchMinMax.get_StretchMax

           OUTPUT
            param               : double*'''
        return super(IRasterStretchMinMax, self).get_StretchMax()
    def put_CustomStretchMin(self, param):
        '''Method IRasterStretchMinMax.put_CustomStretchMin

           INPUT
            param               : double'''
        return super(IRasterStretchMinMax, self).put_CustomStretchMin(param)
    def get_CustomStretchMin(self):
        '''Method IRasterStretchMinMax.get_CustomStretchMin

           OUTPUT
            param               : double*'''
        return super(IRasterStretchMinMax, self).get_CustomStretchMin()
    def put_CustomStretchMax(self, param):
        '''Method IRasterStretchMinMax.put_CustomStretchMax

           INPUT
            param               : double'''
        return super(IRasterStretchMinMax, self).put_CustomStretchMax(param)
    def get_CustomStretchMax(self):
        '''Method IRasterStretchMinMax.get_CustomStretchMax

           OUTPUT
            param               : double*'''
        return super(IRasterStretchMinMax, self).get_CustomStretchMax()
    def put_UseCustomStretchMinMax(self, pUse):
        '''Method IRasterStretchMinMax.put_UseCustomStretchMinMax

           INPUT
            pUse                : VARIANT_BOOL'''
        return super(IRasterStretchMinMax, self).put_UseCustomStretchMinMax(pUse)
    def get_UseCustomStretchMinMax(self):
        '''Method IRasterStretchMinMax.get_UseCustomStretchMinMax

           OUTPUT
            pUse                : VARIANT_BOOL*'''
        return super(IRasterStretchMinMax, self).get_UseCustomStretchMinMax()
    CustomStretchMax = property(get_CustomStretchMax, put_CustomStretchMax, None)
    CustomStretchMin = property(get_CustomStretchMin, put_CustomStretchMin, None)
    StretchMax = property(get_StretchMax, None, None)
    StretchMin = property(get_StretchMin, None, None)
    UseCustomStretchMinMax = property(get_UseCustomStretchMinMax, put_UseCustomStretchMinMax, None)

class IRasterRGBRenderer(_esriCarto.IRasterRGBRenderer):
    _IID = uuid.UUID('577f186f-7037-11d2-9f29-00c04f8ed1d7')

    def __init__(self, *args, **kw):
        super(IRasterRGBRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SetBandIndices(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterRGBRenderer.SetBandIndices

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterRGBRenderer, self).SetBandIndices(redIndex, greenIndex, blueIndex)
    def QueryBandIndices(self):
        '''Method IRasterRGBRenderer.QueryBandIndices

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterRGBRenderer, self).QueryBandIndices()
    def get_RedBandIndex(self):
        '''Method IRasterRGBRenderer.get_RedBandIndex

           OUTPUT
            redIndex            : long*'''
        return super(IRasterRGBRenderer, self).get_RedBandIndex()
    def put_RedBandIndex(self, redIndex):
        '''Method IRasterRGBRenderer.put_RedBandIndex

           INPUT
            redIndex            : long'''
        return super(IRasterRGBRenderer, self).put_RedBandIndex(redIndex)
    def get_GreenBandIndex(self):
        '''Method IRasterRGBRenderer.get_GreenBandIndex

           OUTPUT
            greenIndex          : long*'''
        return super(IRasterRGBRenderer, self).get_GreenBandIndex()
    def put_GreenBandIndex(self, greenIndex):
        '''Method IRasterRGBRenderer.put_GreenBandIndex

           INPUT
            greenIndex          : long'''
        return super(IRasterRGBRenderer, self).put_GreenBandIndex(greenIndex)
    def get_BlueBandIndex(self):
        '''Method IRasterRGBRenderer.get_BlueBandIndex

           OUTPUT
            blueIndex           : long*'''
        return super(IRasterRGBRenderer, self).get_BlueBandIndex()
    def put_BlueBandIndex(self, blueIndex):
        '''Method IRasterRGBRenderer.put_BlueBandIndex

           INPUT
            blueIndex           : long'''
        return super(IRasterRGBRenderer, self).put_BlueBandIndex(blueIndex)
    def get_UseRedBand(self):
        '''Method IRasterRGBRenderer.get_UseRedBand

           OUTPUT
            bBand               : VARIANT_BOOL*'''
        return super(IRasterRGBRenderer, self).get_UseRedBand()
    def put_UseRedBand(self, bBand):
        '''Method IRasterRGBRenderer.put_UseRedBand

           INPUT
            bBand               : VARIANT_BOOL'''
        return super(IRasterRGBRenderer, self).put_UseRedBand(bBand)
    def get_UseGreenBand(self):
        '''Method IRasterRGBRenderer.get_UseGreenBand

           OUTPUT
            bBand               : VARIANT_BOOL*'''
        return super(IRasterRGBRenderer, self).get_UseGreenBand()
    def put_UseGreenBand(self, bBand):
        '''Method IRasterRGBRenderer.put_UseGreenBand

           INPUT
            bBand               : VARIANT_BOOL'''
        return super(IRasterRGBRenderer, self).put_UseGreenBand(bBand)
    def get_UseBlueBand(self):
        '''Method IRasterRGBRenderer.get_UseBlueBand

           OUTPUT
            bBand               : VARIANT_BOOL*'''
        return super(IRasterRGBRenderer, self).get_UseBlueBand()
    def put_UseBlueBand(self, bBand):
        '''Method IRasterRGBRenderer.put_UseBlueBand

           INPUT
            bBand               : VARIANT_BOOL'''
        return super(IRasterRGBRenderer, self).put_UseBlueBand(bBand)
    BlueBandIndex = property(get_BlueBandIndex, put_BlueBandIndex, None)
    GreenBandIndex = property(get_GreenBandIndex, put_GreenBandIndex, None)
    RedBandIndex = property(get_RedBandIndex, put_RedBandIndex, None)
    UseBlueBand = property(get_UseBlueBand, put_UseBlueBand, None)
    UseGreenBand = property(get_UseGreenBand, put_UseGreenBand, None)
    UseRedBand = property(get_UseRedBand, put_UseRedBand, None)

class IRasterRGBRenderer2(_esriCarto.IRasterRGBRenderer2):
    _IID = uuid.UUID('9e69b838-e78f-44c1-867f-b5932d5eeb49')

    def __init__(self, *args, **kw):
        super(IRasterRGBRenderer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AlphaBandIndex(self):
        '''Method IRasterRGBRenderer2.get_AlphaBandIndex

           OUTPUT
            pIndex              : long*'''
        return super(IRasterRGBRenderer2, self).get_AlphaBandIndex()
    def put_AlphaBandIndex(self, pIndex):
        '''Method IRasterRGBRenderer2.put_AlphaBandIndex

           INPUT
            pIndex              : long'''
        return super(IRasterRGBRenderer2, self).put_AlphaBandIndex(pIndex)
    def get_UseAlphaBand(self):
        '''Method IRasterRGBRenderer2.get_UseAlphaBand

           OUTPUT
            pUse                : VARIANT_BOOL*'''
        return super(IRasterRGBRenderer2, self).get_UseAlphaBand()
    def put_UseAlphaBand(self, pUse):
        '''Method IRasterRGBRenderer2.put_UseAlphaBand

           INPUT
            pUse                : VARIANT_BOOL'''
        return super(IRasterRGBRenderer2, self).put_UseAlphaBand(pUse)
    def SetBandIndices(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterRGBRenderer.SetBandIndices (from IRasterRGBRenderer)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterRGBRenderer2, self).SetBandIndices(redIndex, greenIndex, blueIndex)
    def QueryBandIndices(self):
        '''Method IRasterRGBRenderer.QueryBandIndices (from IRasterRGBRenderer)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterRGBRenderer2, self).QueryBandIndices()
    def get_RedBandIndex(self):
        '''Method IRasterRGBRenderer.get_RedBandIndex (from IRasterRGBRenderer)

           OUTPUT
            redIndex            : long*'''
        return super(IRasterRGBRenderer2, self).get_RedBandIndex()
    def put_RedBandIndex(self, redIndex):
        '''Method IRasterRGBRenderer.put_RedBandIndex (from IRasterRGBRenderer)

           INPUT
            redIndex            : long'''
        return super(IRasterRGBRenderer2, self).put_RedBandIndex(redIndex)
    def get_GreenBandIndex(self):
        '''Method IRasterRGBRenderer.get_GreenBandIndex (from IRasterRGBRenderer)

           OUTPUT
            greenIndex          : long*'''
        return super(IRasterRGBRenderer2, self).get_GreenBandIndex()
    def put_GreenBandIndex(self, greenIndex):
        '''Method IRasterRGBRenderer.put_GreenBandIndex (from IRasterRGBRenderer)

           INPUT
            greenIndex          : long'''
        return super(IRasterRGBRenderer2, self).put_GreenBandIndex(greenIndex)
    def get_BlueBandIndex(self):
        '''Method IRasterRGBRenderer.get_BlueBandIndex (from IRasterRGBRenderer)

           OUTPUT
            blueIndex           : long*'''
        return super(IRasterRGBRenderer2, self).get_BlueBandIndex()
    def put_BlueBandIndex(self, blueIndex):
        '''Method IRasterRGBRenderer.put_BlueBandIndex (from IRasterRGBRenderer)

           INPUT
            blueIndex           : long'''
        return super(IRasterRGBRenderer2, self).put_BlueBandIndex(blueIndex)
    def get_UseRedBand(self):
        '''Method IRasterRGBRenderer.get_UseRedBand (from IRasterRGBRenderer)

           OUTPUT
            bBand               : VARIANT_BOOL*'''
        return super(IRasterRGBRenderer2, self).get_UseRedBand()
    def put_UseRedBand(self, bBand):
        '''Method IRasterRGBRenderer.put_UseRedBand (from IRasterRGBRenderer)

           INPUT
            bBand               : VARIANT_BOOL'''
        return super(IRasterRGBRenderer2, self).put_UseRedBand(bBand)
    def get_UseGreenBand(self):
        '''Method IRasterRGBRenderer.get_UseGreenBand (from IRasterRGBRenderer)

           OUTPUT
            bBand               : VARIANT_BOOL*'''
        return super(IRasterRGBRenderer2, self).get_UseGreenBand()
    def put_UseGreenBand(self, bBand):
        '''Method IRasterRGBRenderer.put_UseGreenBand (from IRasterRGBRenderer)

           INPUT
            bBand               : VARIANT_BOOL'''
        return super(IRasterRGBRenderer2, self).put_UseGreenBand(bBand)
    def get_UseBlueBand(self):
        '''Method IRasterRGBRenderer.get_UseBlueBand (from IRasterRGBRenderer)

           OUTPUT
            bBand               : VARIANT_BOOL*'''
        return super(IRasterRGBRenderer2, self).get_UseBlueBand()
    def put_UseBlueBand(self, bBand):
        '''Method IRasterRGBRenderer.put_UseBlueBand (from IRasterRGBRenderer)

           INPUT
            bBand               : VARIANT_BOOL'''
        return super(IRasterRGBRenderer2, self).put_UseBlueBand(bBand)
    AlphaBandIndex = property(get_AlphaBandIndex, put_AlphaBandIndex, None)
    BlueBandIndex = property(get_BlueBandIndex, put_BlueBandIndex, None)
    GreenBandIndex = property(get_GreenBandIndex, put_GreenBandIndex, None)
    RedBandIndex = property(get_RedBandIndex, put_RedBandIndex, None)
    UseAlphaBand = property(get_UseAlphaBand, put_UseAlphaBand, None)
    UseBlueBand = property(get_UseBlueBand, put_UseBlueBand, None)
    UseGreenBand = property(get_UseGreenBand, put_UseGreenBand, None)
    UseRedBand = property(get_UseRedBand, put_UseRedBand, None)

class IRasterStretchColorRampRenderer(_esriCarto.IRasterStretchColorRampRenderer):
    _IID = uuid.UUID('a301a3b1-74d7-11d2-9f29-00c04f8ed1d7')

    def __init__(self, *args, **kw):
        super(IRasterStretchColorRampRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_BandIndex(self, BandIndex):
        '''Method IRasterStretchColorRampRenderer.put_BandIndex

           INPUT
            BandIndex           : long'''
        return super(IRasterStretchColorRampRenderer, self).put_BandIndex(BandIndex)
    def get_BandIndex(self):
        '''Method IRasterStretchColorRampRenderer.get_BandIndex

           OUTPUT
            BandIndex           : long*'''
        return super(IRasterStretchColorRampRenderer, self).get_BandIndex()
    def get_ColorScheme(self):
        '''Method IRasterStretchColorRampRenderer.get_ColorScheme

           OUTPUT
            ColorScheme         : BSTR*'''
        return super(IRasterStretchColorRampRenderer, self).get_ColorScheme()
    def put_ColorScheme(self, ColorScheme):
        '''Method IRasterStretchColorRampRenderer.put_ColorScheme

           INPUT
            ColorScheme         : BSTR'''
        return super(IRasterStretchColorRampRenderer, self).put_ColorScheme(ColorScheme)
    def get_ColorRamp(self):
        '''Method IRasterStretchColorRampRenderer.get_ColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IRasterStretchColorRampRenderer, self).get_ColorRamp()
    def put_ColorRamp(self, ppColorRamp):
        '''Method IRasterStretchColorRampRenderer.put_ColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IRasterStretchColorRampRenderer, self).put_ColorRamp(ppColorRamp)
    def get_LabelLow(self):
        '''Method IRasterStretchColorRampRenderer.get_LabelLow

           OUTPUT
            Label               : BSTR*'''
        return super(IRasterStretchColorRampRenderer, self).get_LabelLow()
    def put_LabelLow(self, Label):
        '''Method IRasterStretchColorRampRenderer.put_LabelLow

           INPUT
            Label               : BSTR'''
        return super(IRasterStretchColorRampRenderer, self).put_LabelLow(Label)
    def get_LabelMedium(self):
        '''Method IRasterStretchColorRampRenderer.get_LabelMedium

           OUTPUT
            Label               : BSTR*'''
        return super(IRasterStretchColorRampRenderer, self).get_LabelMedium()
    def put_LabelMedium(self, Label):
        '''Method IRasterStretchColorRampRenderer.put_LabelMedium

           INPUT
            Label               : BSTR'''
        return super(IRasterStretchColorRampRenderer, self).put_LabelMedium(Label)
    def get_LabelHigh(self):
        '''Method IRasterStretchColorRampRenderer.get_LabelHigh

           OUTPUT
            Label               : BSTR*'''
        return super(IRasterStretchColorRampRenderer, self).get_LabelHigh()
    def put_LabelHigh(self, Label):
        '''Method IRasterStretchColorRampRenderer.put_LabelHigh

           INPUT
            Label               : BSTR'''
        return super(IRasterStretchColorRampRenderer, self).put_LabelHigh(Label)
    def ResetLabels(self):
        '''Method IRasterStretchColorRampRenderer.ResetLabels'''
        return super(IRasterStretchColorRampRenderer, self).ResetLabels()
    BandIndex = property(get_BandIndex, put_BandIndex, None)
    ColorRamp = property(get_ColorRamp, put_ColorRamp, None)
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)
    LabelHigh = property(get_LabelHigh, put_LabelHigh, None)
    LabelLow = property(get_LabelLow, put_LabelLow, None)
    LabelMedium = property(get_LabelMedium, put_LabelMedium, None)

class IRasterRendererClassInfo(_esriCarto.IRasterRendererClassInfo):
    _IID = uuid.UUID('0f3e50d0-3194-11d4-a66c-0008c7df8989')
    def get_ClassificationField(self):
        '''Method IRasterRendererClassInfo.get_ClassificationField

           OUTPUT
            classFieldName      : BSTR*'''
        return super(IRasterRendererClassInfo, self).get_ClassificationField()
    def get_NormalizationField(self):
        '''Method IRasterRendererClassInfo.get_NormalizationField

           OUTPUT
            normFieldName       : BSTR*'''
        return super(IRasterRendererClassInfo, self).get_NormalizationField()
    def get_IsNumericClasses(self):
        '''Method IRasterRendererClassInfo.get_IsNumericClasses

           OUTPUT
            bNumeric            : VARIANT_BOOL*'''
        return super(IRasterRendererClassInfo, self).get_IsNumericClasses()
    def get_ClassCount(self):
        '''Method IRasterRendererClassInfo.get_ClassCount

           OUTPUT
            ClassCount          : long*'''
        return super(IRasterRendererClassInfo, self).get_ClassCount()
    def QueryNumberClass(self, ClassIndex):
        '''Method IRasterRendererClassInfo.QueryNumberClass

           INPUT
            ClassIndex          : long

           OUTPUTS
            MinValue            : double*
            maxValue            : double*
            outValue            : long*'''
        return super(IRasterRendererClassInfo, self).QueryNumberClass(ClassIndex)
    def QueryStringClass(self, ClassIndex):
        '''Method IRasterRendererClassInfo.QueryStringClass

           INPUT
            ClassIndex          : long

           OUTPUTS
            inValue             : BSTR*
            outValue            : long*'''
        return super(IRasterRendererClassInfo, self).QueryStringClass(ClassIndex)
    ClassCount = property(get_ClassCount, None, None)
    ClassificationField = property(get_ClassificationField, None, None)
    IsNumericClasses = property(get_IsNumericClasses, None, None)
    NormalizationField = property(get_NormalizationField, None, None)

class IEnumRasterUniqueValueColor(_esriCarto.IEnumRasterUniqueValueColor):
    _IID = uuid.UUID('fafdb8b5-5fe3-11d2-9f24-00c04f8ed1d7')
    def get_nClasses(self):
        '''Method IEnumRasterUniqueValueColor.get_nClasses

           OUTPUT
            nClasses            : long*'''
        return super(IEnumRasterUniqueValueColor, self).get_nClasses()
    def set_Class(self, iClass):
        '''Method IEnumRasterUniqueValueColor.set_Class

           INPUT
            iClass              : long'''
        return super(IEnumRasterUniqueValueColor, self).set_Class(iClass)
    def Next(self):
        '''Method IEnumRasterUniqueValueColor.Next

           OUTPUT
            Index               : long*'''
        return super(IEnumRasterUniqueValueColor, self).Next()
    def __iter__(self):
        try:
            super(IEnumRasterUniqueValueColor, self).Reset()
            val = super(IEnumRasterUniqueValueColor, self).Next()
            while val:
                yield val
                val = super(IEnumRasterUniqueValueColor, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumRasterUniqueValueColor.Reset'''
        return super(IEnumRasterUniqueValueColor, self).Reset()
    def get_KeyType(self):
        '''Method IEnumRasterUniqueValueColor.get_KeyType

           OUTPUT
            eKeyType            : esriRasterUniqueRendererKeyTypesEnum*'''
        return super(IEnumRasterUniqueValueColor, self).get_KeyType()
    def get_DoubleKey(self):
        '''Method IEnumRasterUniqueValueColor.get_DoubleKey

           OUTPUT
            DoubleKey           : double*'''
        return super(IEnumRasterUniqueValueColor, self).get_DoubleKey()
    def get_StringKey(self):
        '''Method IEnumRasterUniqueValueColor.get_StringKey

           OUTPUT
            bstrKey             : BSTR*'''
        return super(IEnumRasterUniqueValueColor, self).get_StringKey()
    DoubleKey = property(get_DoubleKey, None, None)
    KeyType = property(get_KeyType, None, None)
    StringKey = property(get_StringKey, None, None)
    nClasses = property(get_nClasses, None, None)

class IRasterCatalogRendererPicker(_esriCarto.IRasterCatalogRendererPicker):
    _IID = uuid.UUID('9f6d682c-1e2e-4b27-a1fb-37c64cd136f9')
    def get_Priority(self):
        '''Method IRasterCatalogRendererPicker.get_Priority

           OUTPUT
            pPriority           : long*'''
        return super(IRasterCatalogRendererPicker, self).get_Priority()
    def get_DefaultUseRenderersCLSID(self):
        '''Method IRasterCatalogRendererPicker.get_DefaultUseRenderersCLSID

           OUTPUT
            pCLSIDArrayy        : SAFEARRAY**'''
        return super(IRasterCatalogRendererPicker, self).get_DefaultUseRenderersCLSID()
    def get_AllAvailableRenderersCLSID(self):
        '''Method IRasterCatalogRendererPicker.get_AllAvailableRenderersCLSID

           OUTPUT
            pCLSIDArrayy        : SAFEARRAY**'''
        return super(IRasterCatalogRendererPicker, self).get_AllAvailableRenderersCLSID()
    def Pick(self, pRenderers, pRasterDataset):
        '''Method IRasterCatalogRendererPicker.Pick

           INPUTS
            pRenderers          : IArray*
            pRasterDataset      : IRasterDataset*

           OUTPUT
            ppRenderer          : IRasterRenderer**'''
        return super(IRasterCatalogRendererPicker, self).Pick(pRenderers, pRasterDataset)
    AllAvailableRenderersCLSID = property(get_AllAvailableRenderersCLSID, None, None)
    DefaultUseRenderersCLSID = property(get_DefaultUseRenderersCLSID, None, None)
    Priority = property(get_Priority, None, None)

class IColorChannelMapping(_esriCarto.IColorChannelMapping):
    _IID = uuid.UUID('8d12e222-2507-41b5-a21c-5a56a031705b')

    def __init__(self, *args, **kw):
        super(IColorChannelMapping, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseDefaultMapping(self):
        '''Method IColorChannelMapping.get_UseDefaultMapping

           OUTPUT
            bIsDefault          : VARIANT_BOOL*'''
        return super(IColorChannelMapping, self).get_UseDefaultMapping()
    def put_UseDefaultMapping(self, bIsDefault):
        '''Method IColorChannelMapping.put_UseDefaultMapping

           INPUT
            bIsDefault          : VARIANT_BOOL'''
        return super(IColorChannelMapping, self).put_UseDefaultMapping(bIsDefault)
    def get_BandIndices(self):
        '''Method IColorChannelMapping.get_BandIndices

           OUTPUT
            vIndex              : VARIANT*'''
        return super(IColorChannelMapping, self).get_BandIndices()
    def put_BandIndices(self, vIndex):
        '''Method IColorChannelMapping.put_BandIndices

           INPUT
            vIndex              : VARIANT'''
        return super(IColorChannelMapping, self).put_BandIndices(vIndex)
    BandIndices = property(get_BandIndices, put_BandIndices, None)
    UseDefaultMapping = property(get_UseDefaultMapping, put_UseDefaultMapping, None)

class IHillShadeInfo(_esriCarto.IHillShadeInfo):
    _IID = uuid.UUID('0a6f1d1a-9a84-40c9-ba10-b5bf139f06ff')

    def __init__(self, *args, **kw):
        super(IHillShadeInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseHillShade(self):
        '''Method IHillShadeInfo.get_UseHillShade

           OUTPUT
            bUse                : VARIANT_BOOL*'''
        return super(IHillShadeInfo, self).get_UseHillShade()
    def put_UseHillShade(self, bUse):
        '''Method IHillShadeInfo.put_UseHillShade

           INPUT
            bUse                : VARIANT_BOOL'''
        return super(IHillShadeInfo, self).put_UseHillShade(bUse)
    def get_ZScale(self):
        '''Method IHillShadeInfo.get_ZScale

           OUTPUT
            pZScale             : double*'''
        return super(IHillShadeInfo, self).get_ZScale()
    def put_ZScale(self, pZScale):
        '''Method IHillShadeInfo.put_ZScale

           INPUT
            pZScale             : double'''
        return super(IHillShadeInfo, self).put_ZScale(pZScale)
    UseHillShade = property(get_UseHillShade, put_UseHillShade, None)
    ZScale = property(get_ZScale, put_ZScale, None)

class IDisplayTableExchange(_esriCarto.IDisplayTableExchange):
    _IID = uuid.UUID('56448e92-9ef7-11d4-b286-00508bcdc7c8')

    def __init__(self, *args, **kw):
        super(IDisplayTableExchange, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DisplayTable(self, ppTable):
        '''Method IDisplayTableExchange.putref_DisplayTable

           INPUT
            ppTable             : ITable*'''
        return super(IDisplayTableExchange, self).putref_DisplayTable(ppTable)
    def get_DisplayTable(self):
        '''Method IDisplayTableExchange.get_DisplayTable

           OUTPUT
            ppTable             : ITable**'''
        return super(IDisplayTableExchange, self).get_DisplayTable()
    DisplayTable = property(get_DisplayTable, putref_DisplayTable, None)

class IRasterDiscreteColorRenderer(_esriCarto.IRasterDiscreteColorRenderer):
    _IID = uuid.UUID('7eda4f65-67e5-4bab-9916-80aea4a414c0')

    def __init__(self, *args, **kw):
        super(IRasterDiscreteColorRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_NumColors(self, pNumColors):
        '''Method IRasterDiscreteColorRenderer.put_NumColors

           INPUT
            pNumColors          : long'''
        return super(IRasterDiscreteColorRenderer, self).put_NumColors(pNumColors)
    def get_NumColors(self):
        '''Method IRasterDiscreteColorRenderer.get_NumColors

           OUTPUT
            pNumColors          : long*'''
        return super(IRasterDiscreteColorRenderer, self).get_NumColors()
    def put_Colormap(self, _arg1):
        '''Method IRasterDiscreteColorRenderer.put_Colormap

           INPUT
            _arg1               : IRasterColormap*'''
        return super(IRasterDiscreteColorRenderer, self).put_Colormap(_arg1)
    Colormap = property(None, put_Colormap, None)
    NumColors = property(get_NumColors, put_NumColors, None)

class IRenderedRaster(_esriCarto.IRenderedRaster):
    _IID = uuid.UUID('7d93e3c6-86ff-48b8-88d5-345049233889')

    def __init__(self, *args, **kw):
        super(IRenderedRaster, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, LayerFile):
        '''Method IRenderedRaster.Init

           INPUT
            LayerFile           : BSTR'''
        return super(IRenderedRaster, self).Init(LayerFile)
    def get_FullName(self):
        '''Method IRenderedRaster.get_FullName

           OUTPUT
            ppName              : IName**'''
        return super(IRenderedRaster, self).get_FullName()
    def get_ForceRGB(self):
        '''Method IRenderedRaster.get_ForceRGB

           OUTPUT
            pForceRGB           : VARIANT_BOOL*'''
        return super(IRenderedRaster, self).get_ForceRGB()
    def put_ForceRGB(self, pForceRGB):
        '''Method IRenderedRaster.put_ForceRGB

           INPUT
            pForceRGB           : VARIANT_BOOL'''
        return super(IRenderedRaster, self).put_ForceRGB(pForceRGB)
    def get_Layer(self):
        '''Method IRenderedRaster.get_Layer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IRenderedRaster, self).get_Layer()
    ForceRGB = property(get_ForceRGB, put_ForceRGB, None)
    FullName = property(get_FullName, None, None)
    Layer = property(get_Layer, None, None)

class IRenderedRaster2(_esriCarto.IRenderedRaster2):
    _IID = uuid.UUID('8c15bd4c-cecb-4af1-89a7-a25e3f89e840')

    def __init__(self, *args, **kw):
        super(IRenderedRaster2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IRenderedRaster2.get_Raster

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IRenderedRaster2, self).get_Raster()
    def put_Raster(self, ppRaster):
        '''Method IRenderedRaster2.put_Raster

           INPUT
            ppRaster            : IRaster*'''
        return super(IRenderedRaster2, self).put_Raster(ppRaster)
    def get_Renderer(self):
        '''Method IRenderedRaster2.get_Renderer

           OUTPUT
            ppRenderer          : IRasterRenderer**'''
        return super(IRenderedRaster2, self).get_Renderer()
    def putref_Renderer(self, ppRenderer):
        '''Method IRenderedRaster2.putref_Renderer

           INPUT
            ppRenderer          : IRasterRenderer*'''
        return super(IRenderedRaster2, self).putref_Renderer(ppRenderer)
    def get_RGB32(self):
        '''Method IRenderedRaster2.get_RGB32

           OUTPUT
            pRGB32              : VARIANT_BOOL*'''
        return super(IRenderedRaster2, self).get_RGB32()
    def put_RGB32(self, pRGB32):
        '''Method IRenderedRaster2.put_RGB32

           INPUT
            pRGB32              : VARIANT_BOOL'''
        return super(IRenderedRaster2, self).put_RGB32(pRGB32)
    def Init(self, LayerFile):
        '''Method IRenderedRaster.Init (from IRenderedRaster)

           INPUT
            LayerFile           : BSTR'''
        return super(IRenderedRaster2, self).Init(LayerFile)
    def get_FullName(self):
        '''Method IRenderedRaster.get_FullName (from IRenderedRaster)

           OUTPUT
            ppName              : IName**'''
        return super(IRenderedRaster2, self).get_FullName()
    def get_ForceRGB(self):
        '''Method IRenderedRaster.get_ForceRGB (from IRenderedRaster)

           OUTPUT
            pForceRGB           : VARIANT_BOOL*'''
        return super(IRenderedRaster2, self).get_ForceRGB()
    def put_ForceRGB(self, pForceRGB):
        '''Method IRenderedRaster.put_ForceRGB (from IRenderedRaster)

           INPUT
            pForceRGB           : VARIANT_BOOL'''
        return super(IRenderedRaster2, self).put_ForceRGB(pForceRGB)
    def get_Layer(self):
        '''Method IRenderedRaster.get_Layer (from IRenderedRaster)

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IRenderedRaster2, self).get_Layer()
    ForceRGB = property(get_ForceRGB, put_ForceRGB, None)
    FullName = property(get_FullName, None, None)
    Layer = property(get_Layer, None, None)
    RGB32 = property(get_RGB32, put_RGB32, None)
    Raster = property(get_Raster, put_Raster, None)
    Renderer = property(get_Renderer, putref_Renderer, None)

class IRasterStretchAdvancedLabels(_esriCarto.IRasterStretchAdvancedLabels):
    _IID = uuid.UUID('75a23444-cedf-4609-b92c-8d45617ebd3a')

    def __init__(self, *args, **kw):
        super(IRasterStretchAdvancedLabels, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_NumLabels(self, NumLabels):
        '''Method IRasterStretchAdvancedLabels.put_NumLabels

           INPUT
            NumLabels           : long'''
        return super(IRasterStretchAdvancedLabels, self).put_NumLabels(NumLabels)
    def get_NumLabels(self):
        '''Method IRasterStretchAdvancedLabels.get_NumLabels

           OUTPUT
            NumLabels           : long*'''
        return super(IRasterStretchAdvancedLabels, self).get_NumLabels()
    def get_LabelText(self, Index):
        '''Method IRasterStretchAdvancedLabels.get_LabelText

           INPUT
            Index               : long

           OUTPUT
            Text                : BSTR*'''
        return super(IRasterStretchAdvancedLabels, self).get_LabelText(Index)
    def put_LabelText(self, Index, Text):
        '''Method IRasterStretchAdvancedLabels.put_LabelText

           INPUTS
            Index               : long
            Text                : BSTR'''
        return super(IRasterStretchAdvancedLabels, self).put_LabelText(Index, Text)
    def get_LabelValue(self, Index):
        '''Method IRasterStretchAdvancedLabels.get_LabelValue

           INPUT
            Index               : long

           OUTPUT
            Value               : double*'''
        return super(IRasterStretchAdvancedLabels, self).get_LabelValue(Index)
    def put_LabelValue(self, Index, Value):
        '''Method IRasterStretchAdvancedLabels.put_LabelValue

           INPUTS
            Index               : long
            Value               : double'''
        return super(IRasterStretchAdvancedLabels, self).put_LabelValue(Index, Value)
    def get_UseAdvancedLabeling(self):
        '''Method IRasterStretchAdvancedLabels.get_UseAdvancedLabeling

           OUTPUT
            bAdvanced           : VARIANT_BOOL*'''
        return super(IRasterStretchAdvancedLabels, self).get_UseAdvancedLabeling()
    def put_UseAdvancedLabeling(self, bAdvanced):
        '''Method IRasterStretchAdvancedLabels.put_UseAdvancedLabeling

           INPUT
            bAdvanced           : VARIANT_BOOL'''
        return super(IRasterStretchAdvancedLabels, self).put_UseAdvancedLabeling(bAdvanced)
    LabelText = property(None, put_LabelText, None)
    LabelValue = property(None, put_LabelValue, None)
    NumLabels = property(get_NumLabels, put_NumLabels, None)
    UseAdvancedLabeling = property(get_UseAdvancedLabeling, put_UseAdvancedLabeling, None)
    LabelText = IndexProperty(get_LabelText, None)
    LabelValue = IndexProperty(get_LabelValue, None)

class IRasterRendererUpdate(_esriCarto.IRasterRendererUpdate):
    _IID = uuid.UUID('76877c54-c010-4550-a202-bc882196af40')
    def Update(self, pRasterLayer):
        '''Method IRasterRendererUpdate.Update

           INPUT
            pRasterLayer        : IRasterLayer*'''
        return super(IRasterRendererUpdate, self).Update(pRasterLayer)

class IIdentify(_esriCarto.IIdentify):
    _IID = uuid.UUID('83033a90-d19f-11d2-8cd0-00c04f5b951e')
    def Identify(self, pGeom):
        '''Method IIdentify.Identify

           INPUT
            pGeom               : IGeometry*

           OUTPUT
            ppArrObj            : IArray**'''
        return super(IIdentify, self).Identify(pGeom)

class ILegendClassFormat(_esriCarto.ILegendClassFormat):
    _IID = uuid.UUID('52aa5bc2-cb21-11d0-87f9-080009ec732a')

    def __init__(self, *args, **kw):
        super(ILegendClassFormat, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LabelSymbol(self):
        '''Method ILegendClassFormat.get_LabelSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendClassFormat, self).get_LabelSymbol()
    def put_LabelSymbol(self, Symbol):
        '''Method ILegendClassFormat.put_LabelSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendClassFormat, self).put_LabelSymbol(Symbol)
    def get_DescriptionSymbol(self):
        '''Method ILegendClassFormat.get_DescriptionSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendClassFormat, self).get_DescriptionSymbol()
    def put_DescriptionSymbol(self, Symbol):
        '''Method ILegendClassFormat.put_DescriptionSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendClassFormat, self).put_DescriptionSymbol(Symbol)
    def get_PatchWidth(self):
        '''Method ILegendClassFormat.get_PatchWidth

           OUTPUT
            Width               : double*'''
        return super(ILegendClassFormat, self).get_PatchWidth()
    def put_PatchWidth(self, Width):
        '''Method ILegendClassFormat.put_PatchWidth

           INPUT
            Width               : double'''
        return super(ILegendClassFormat, self).put_PatchWidth(Width)
    def get_PatchHeight(self):
        '''Method ILegendClassFormat.get_PatchHeight

           OUTPUT
            Height              : double*'''
        return super(ILegendClassFormat, self).get_PatchHeight()
    def put_PatchHeight(self, Height):
        '''Method ILegendClassFormat.put_PatchHeight

           INPUT
            Height              : double'''
        return super(ILegendClassFormat, self).put_PatchHeight(Height)
    def get_LinePatch(self):
        '''Method ILegendClassFormat.get_LinePatch

           OUTPUT
            Shape               : ILinePatch**'''
        return super(ILegendClassFormat, self).get_LinePatch()
    def put_LinePatch(self, Shape):
        '''Method ILegendClassFormat.put_LinePatch

           INPUT
            Shape               : ILinePatch*'''
        return super(ILegendClassFormat, self).put_LinePatch(Shape)
    def get_AreaPatch(self):
        '''Method ILegendClassFormat.get_AreaPatch

           OUTPUT
            Shape               : IAreaPatch**'''
        return super(ILegendClassFormat, self).get_AreaPatch()
    def put_AreaPatch(self, Shape):
        '''Method ILegendClassFormat.put_AreaPatch

           INPUT
            Shape               : IAreaPatch*'''
        return super(ILegendClassFormat, self).put_AreaPatch(Shape)
    AreaPatch = property(get_AreaPatch, put_AreaPatch, None)
    DescriptionSymbol = property(get_DescriptionSymbol, put_DescriptionSymbol, None)
    LabelSymbol = property(get_LabelSymbol, put_LabelSymbol, None)
    LinePatch = property(get_LinePatch, put_LinePatch, None)
    PatchHeight = property(get_PatchHeight, put_PatchHeight, None)
    PatchWidth = property(get_PatchWidth, put_PatchWidth, None)

class ILegendClass(_esriCarto.ILegendClass):
    _IID = uuid.UUID('167c5e9e-af20-11d1-8817-080009ec732a')

    def __init__(self, *args, **kw):
        super(ILegendClass, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method ILegendClass.get_Symbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ILegendClass, self).get_Symbol()
    def putref_Symbol(self, Symbol):
        '''Method ILegendClass.putref_Symbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ILegendClass, self).putref_Symbol(Symbol)
    def get_Label(self):
        '''Method ILegendClass.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(ILegendClass, self).get_Label()
    def put_Label(self, Label):
        '''Method ILegendClass.put_Label

           INPUT
            Label               : BSTR'''
        return super(ILegendClass, self).put_Label(Label)
    def get_Description(self):
        '''Method ILegendClass.get_Description

           OUTPUT
            Label               : BSTR*'''
        return super(ILegendClass, self).get_Description()
    def put_Description(self, Label):
        '''Method ILegendClass.put_Description

           INPUT
            Label               : BSTR'''
        return super(ILegendClass, self).put_Description(Label)
    def get_Format(self):
        '''Method ILegendClass.get_Format

           OUTPUT
            Format              : ILegendClassFormat**'''
        return super(ILegendClass, self).get_Format()
    def put_Format(self, Format):
        '''Method ILegendClass.put_Format

           INPUT
            Format              : ILegendClassFormat*'''
        return super(ILegendClass, self).put_Format(Format)
    Description = property(get_Description, put_Description, None)
    Format = property(get_Format, put_Format, None)
    Label = property(get_Label, put_Label, None)
    Symbol = property(get_Symbol, putref_Symbol, None)

class ILegendGroup(_esriCarto.ILegendGroup):
    _IID = uuid.UUID('167c5e9f-af20-11d1-8817-080009ec732a')

    def __init__(self, *args, **kw):
        super(ILegendGroup, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method ILegendGroup.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILegendGroup, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILegendGroup.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILegendGroup, self).put_Visible(Visible)
    def get_Editable(self):
        '''Method ILegendGroup.get_Editable

           OUTPUT
            Editable            : VARIANT_BOOL*'''
        return super(ILegendGroup, self).get_Editable()
    def put_Editable(self, Editable):
        '''Method ILegendGroup.put_Editable

           INPUT
            Editable            : VARIANT_BOOL'''
        return super(ILegendGroup, self).put_Editable(Editable)
    def get_Heading(self):
        '''Method ILegendGroup.get_Heading

           OUTPUT
            Heading             : BSTR*'''
        return super(ILegendGroup, self).get_Heading()
    def put_Heading(self, Heading):
        '''Method ILegendGroup.put_Heading

           INPUT
            Heading             : BSTR'''
        return super(ILegendGroup, self).put_Heading(Heading)
    def get_ClassCount(self):
        '''Method ILegendGroup.get_ClassCount

           OUTPUT
            Count               : long*'''
        return super(ILegendGroup, self).get_ClassCount()
    def get_Class(self, Index):
        '''Method ILegendGroup.get_Class

           INPUT
            Index               : long

           OUTPUT
            LegendClass         : ILegendClass**'''
        return super(ILegendGroup, self).get_Class(Index)
    def AddClass(self, LegendClass):
        '''Method ILegendGroup.AddClass

           INPUT
            LegendClass         : ILegendClass*'''
        return super(ILegendGroup, self).AddClass(LegendClass)
    def InsertClass(self, Index, LegendClass):
        '''Method ILegendGroup.InsertClass

           INPUTS
            Index               : long
            LegendClass         : ILegendClass*'''
        return super(ILegendGroup, self).InsertClass(Index, LegendClass)
    def RemoveClass(self, Index):
        '''Method ILegendGroup.RemoveClass

           INPUT
            Index               : long'''
        return super(ILegendGroup, self).RemoveClass(Index)
    def ClearClasses(self):
        '''Method ILegendGroup.ClearClasses'''
        return super(ILegendGroup, self).ClearClasses()
    ClassCount = property(get_ClassCount, None, None)
    Editable = property(get_Editable, put_Editable, None)
    Heading = property(get_Heading, put_Heading, None)
    Visible = property(get_Visible, put_Visible, None)
    Class = IndexProperty(get_Class, None)

class ILegendFormat(_esriCarto.ILegendFormat):
    _IID = uuid.UUID('52aa5bc1-cb21-11d0-87f9-080009ec732a')

    def __init__(self, *args, **kw):
        super(ILegendFormat, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowTitle(self):
        '''Method ILegendFormat.get_ShowTitle

           OUTPUT
            ShowTitle           : VARIANT_BOOL*'''
        return super(ILegendFormat, self).get_ShowTitle()
    def put_ShowTitle(self, ShowTitle):
        '''Method ILegendFormat.put_ShowTitle

           INPUT
            ShowTitle           : VARIANT_BOOL'''
        return super(ILegendFormat, self).put_ShowTitle(ShowTitle)
    def get_TitleSymbol(self):
        '''Method ILegendFormat.get_TitleSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendFormat, self).get_TitleSymbol()
    def put_TitleSymbol(self, Symbol):
        '''Method ILegendFormat.put_TitleSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendFormat, self).put_TitleSymbol(Symbol)
    def get_TitlePosition(self):
        '''Method ILegendFormat.get_TitlePosition

           OUTPUT
            pos                 : esriRectanglePosition*'''
        return super(ILegendFormat, self).get_TitlePosition()
    def put_TitlePosition(self, pos):
        '''Method ILegendFormat.put_TitlePosition

           INPUT
            pos                 : esriRectanglePosition'''
        return super(ILegendFormat, self).put_TitlePosition(pos)
    def get_TitleGap(self):
        '''Method ILegendFormat.get_TitleGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_TitleGap()
    def put_TitleGap(self, Gap):
        '''Method ILegendFormat.put_TitleGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_TitleGap(Gap)
    def get_VerticalItemGap(self):
        '''Method ILegendFormat.get_VerticalItemGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_VerticalItemGap()
    def put_VerticalItemGap(self, Gap):
        '''Method ILegendFormat.put_VerticalItemGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_VerticalItemGap(Gap)
    def get_HorizontalItemGap(self):
        '''Method ILegendFormat.get_HorizontalItemGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_HorizontalItemGap()
    def put_HorizontalItemGap(self, Gap):
        '''Method ILegendFormat.put_HorizontalItemGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_HorizontalItemGap(Gap)
    def get_LayerNameGap(self):
        '''Method ILegendFormat.get_LayerNameGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_LayerNameGap()
    def put_LayerNameGap(self, Gap):
        '''Method ILegendFormat.put_LayerNameGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_LayerNameGap(Gap)
    def get_GroupGap(self):
        '''Method ILegendFormat.get_GroupGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_GroupGap()
    def put_GroupGap(self, Gap):
        '''Method ILegendFormat.put_GroupGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_GroupGap(Gap)
    def get_HeadingGap(self):
        '''Method ILegendFormat.get_HeadingGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_HeadingGap()
    def put_HeadingGap(self, Gap):
        '''Method ILegendFormat.put_HeadingGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_HeadingGap(Gap)
    def get_TextGap(self):
        '''Method ILegendFormat.get_TextGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_TextGap()
    def put_TextGap(self, Gap):
        '''Method ILegendFormat.put_TextGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_TextGap(Gap)
    def get_VerticalPatchGap(self):
        '''Method ILegendFormat.get_VerticalPatchGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_VerticalPatchGap()
    def put_VerticalPatchGap(self, Gap):
        '''Method ILegendFormat.put_VerticalPatchGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_VerticalPatchGap(Gap)
    def get_HorizontalPatchGap(self):
        '''Method ILegendFormat.get_HorizontalPatchGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat, self).get_HorizontalPatchGap()
    def put_HorizontalPatchGap(self, Gap):
        '''Method ILegendFormat.put_HorizontalPatchGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat, self).put_HorizontalPatchGap(Gap)
    def get_DefaultPatchWidth(self):
        '''Method ILegendFormat.get_DefaultPatchWidth

           OUTPUT
            Width               : double*'''
        return super(ILegendFormat, self).get_DefaultPatchWidth()
    def put_DefaultPatchWidth(self, Width):
        '''Method ILegendFormat.put_DefaultPatchWidth

           INPUT
            Width               : double'''
        return super(ILegendFormat, self).put_DefaultPatchWidth(Width)
    def get_DefaultPatchHeight(self):
        '''Method ILegendFormat.get_DefaultPatchHeight

           OUTPUT
            Height              : double*'''
        return super(ILegendFormat, self).get_DefaultPatchHeight()
    def put_DefaultPatchHeight(self, Height):
        '''Method ILegendFormat.put_DefaultPatchHeight

           INPUT
            Height              : double'''
        return super(ILegendFormat, self).put_DefaultPatchHeight(Height)
    def get_DefaultLinePatch(self):
        '''Method ILegendFormat.get_DefaultLinePatch

           OUTPUT
            patch               : ILinePatch**'''
        return super(ILegendFormat, self).get_DefaultLinePatch()
    def put_DefaultLinePatch(self, patch):
        '''Method ILegendFormat.put_DefaultLinePatch

           INPUT
            patch               : ILinePatch*'''
        return super(ILegendFormat, self).put_DefaultLinePatch(patch)
    def get_DefaultAreaPatch(self):
        '''Method ILegendFormat.get_DefaultAreaPatch

           OUTPUT
            patch               : IAreaPatch**'''
        return super(ILegendFormat, self).get_DefaultAreaPatch()
    def put_DefaultAreaPatch(self, patch):
        '''Method ILegendFormat.put_DefaultAreaPatch

           INPUT
            patch               : IAreaPatch*'''
        return super(ILegendFormat, self).put_DefaultAreaPatch(patch)
    def Scale(self, xScale, yScale):
        '''Method ILegendFormat.Scale

           INPUTS
            xScale              : double
            yScale              : double'''
        return super(ILegendFormat, self).Scale(xScale, yScale)
    DefaultAreaPatch = property(get_DefaultAreaPatch, put_DefaultAreaPatch, None)
    DefaultLinePatch = property(get_DefaultLinePatch, put_DefaultLinePatch, None)
    DefaultPatchHeight = property(get_DefaultPatchHeight, put_DefaultPatchHeight, None)
    DefaultPatchWidth = property(get_DefaultPatchWidth, put_DefaultPatchWidth, None)
    GroupGap = property(get_GroupGap, put_GroupGap, None)
    HeadingGap = property(get_HeadingGap, put_HeadingGap, None)
    HorizontalItemGap = property(get_HorizontalItemGap, put_HorizontalItemGap, None)
    HorizontalPatchGap = property(get_HorizontalPatchGap, put_HorizontalPatchGap, None)
    LayerNameGap = property(get_LayerNameGap, put_LayerNameGap, None)
    ShowTitle = property(get_ShowTitle, put_ShowTitle, None)
    TextGap = property(get_TextGap, put_TextGap, None)
    TitleGap = property(get_TitleGap, put_TitleGap, None)
    TitlePosition = property(get_TitlePosition, put_TitlePosition, None)
    TitleSymbol = property(get_TitleSymbol, put_TitleSymbol, None)
    VerticalItemGap = property(get_VerticalItemGap, put_VerticalItemGap, None)
    VerticalPatchGap = property(get_VerticalPatchGap, put_VerticalPatchGap, None)

class IElement(_esriCarto.IElement):
    _IID = uuid.UUID('9b001319-9ed7-11d0-859e-0800091a2a72')

    def __init__(self, *args, **kw):
        super(IElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Geometry(self):
        '''Method IElement.get_Geometry

           OUTPUT
            pGeometry           : IGeometry**'''
        return super(IElement, self).get_Geometry()
    def put_Geometry(self, pGeometry):
        '''Method IElement.put_Geometry

           INPUT
            pGeometry           : IGeometry*'''
        return super(IElement, self).put_Geometry(pGeometry)
    def QueryBounds(self, Display, Bounds):
        '''Method IElement.QueryBounds

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*'''
        return super(IElement, self).QueryBounds(Display, Bounds)
    def QueryOutline(self, Display, Outline):
        '''Method IElement.QueryOutline

           INPUTS
            Display             : IDisplay*
            Outline             : IPolygon*'''
        return super(IElement, self).QueryOutline(Display, Outline)
    def get_SelectionTracker(self):
        '''Method IElement.get_SelectionTracker

           OUTPUT
            tracker             : ISelectionTracker**'''
        return super(IElement, self).get_SelectionTracker()
    def HitTest(self, x, y, Tolerance):
        '''Method IElement.HitTest

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            hit                 : VARIANT_BOOL*'''
        return super(IElement, self).HitTest(x, y, Tolerance)
    def Draw(self, Display, TrackCancel):
        '''Method IElement.Draw

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IElement, self).Draw(Display, TrackCancel)
    def Activate(self, Display):
        '''Method IElement.Activate

           INPUT
            Display             : IDisplay*'''
        return super(IElement, self).Activate(Display)
    def Deactivate(self):
        '''Method IElement.Deactivate'''
        return super(IElement, self).Deactivate()
    def get_Locked(self):
        '''Method IElement.get_Locked

           OUTPUT
            pLocked             : VARIANT_BOOL*'''
        return super(IElement, self).get_Locked()
    def put_Locked(self, pLocked):
        '''Method IElement.put_Locked

           INPUT
            pLocked             : VARIANT_BOOL'''
        return super(IElement, self).put_Locked(pLocked)
    Geometry = property(get_Geometry, put_Geometry, None)
    Locked = property(get_Locked, put_Locked, None)
    SelectionTracker = property(get_SelectionTracker, None, None)

class IEnumElement(_esriCarto.IEnumElement):
    _IID = uuid.UUID('dd94d769-836d-11d0-87ec-080009ec732a')
    def Next(self):
        '''Method IEnumElement.Next

           OUTPUT
            pElement            : IElement**'''
        return super(IEnumElement, self).Next()
    def __iter__(self):
        try:
            super(IEnumElement, self).Reset()
            val = super(IEnumElement, self).Next()
            while val:
                yield val
                val = super(IEnumElement, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumElement.Reset'''
        return super(IEnumElement, self).Reset()

class ILegendItem(_esriCarto.ILegendItem):
    _IID = uuid.UUID('52aa5bc0-cb21-11d0-87f9-080009ec732a')

    def __init__(self, *args, **kw):
        super(ILegendItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILegendItem.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILegendItem, self).get_Name()
    def get_CanDisplay(self, Layer):
        '''Method ILegendItem.get_CanDisplay

           INPUT
            Layer               : ILayer*

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ILegendItem, self).get_CanDisplay(Layer)
    def get_Layer(self):
        '''Method ILegendItem.get_Layer

           OUTPUT
            Layer               : ILayer**'''
        return super(ILegendItem, self).get_Layer()
    def putref_Layer(self, Layer):
        '''Method ILegendItem.putref_Layer

           INPUT
            Layer               : ILayer*'''
        return super(ILegendItem, self).putref_Layer(Layer)
    def get_NewColumn(self):
        '''Method ILegendItem.get_NewColumn

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegendItem, self).get_NewColumn()
    def put_NewColumn(self, flag):
        '''Method ILegendItem.put_NewColumn

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegendItem, self).put_NewColumn(flag)
    def get_Columns(self):
        '''Method ILegendItem.get_Columns

           OUTPUT
            Columns             : short*'''
        return super(ILegendItem, self).get_Columns()
    def put_Columns(self, Columns):
        '''Method ILegendItem.put_Columns

           INPUT
            Columns             : short'''
        return super(ILegendItem, self).put_Columns(Columns)
    def get_KeepTogether(self):
        '''Method ILegendItem.get_KeepTogether

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegendItem, self).get_KeepTogether()
    def put_KeepTogether(self, flag):
        '''Method ILegendItem.put_KeepTogether

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegendItem, self).put_KeepTogether(flag)
    def get_ShowLayerName(self):
        '''Method ILegendItem.get_ShowLayerName

           OUTPUT
            ShowLayerName       : VARIANT_BOOL*'''
        return super(ILegendItem, self).get_ShowLayerName()
    def put_ShowLayerName(self, ShowLayerName):
        '''Method ILegendItem.put_ShowLayerName

           INPUT
            ShowLayerName       : VARIANT_BOOL'''
        return super(ILegendItem, self).put_ShowLayerName(ShowLayerName)
    def get_LayerNameSymbol(self):
        '''Method ILegendItem.get_LayerNameSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendItem, self).get_LayerNameSymbol()
    def put_LayerNameSymbol(self, Symbol):
        '''Method ILegendItem.put_LayerNameSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendItem, self).put_LayerNameSymbol(Symbol)
    def get_GroupIndex(self):
        '''Method ILegendItem.get_GroupIndex

           OUTPUT
            Index               : long*'''
        return super(ILegendItem, self).get_GroupIndex()
    def put_GroupIndex(self, Index):
        '''Method ILegendItem.put_GroupIndex

           INPUT
            Index               : long'''
        return super(ILegendItem, self).put_GroupIndex(Index)
    def get_ShowHeading(self):
        '''Method ILegendItem.get_ShowHeading

           OUTPUT
            ShowHeading         : VARIANT_BOOL*'''
        return super(ILegendItem, self).get_ShowHeading()
    def put_ShowHeading(self, ShowHeading):
        '''Method ILegendItem.put_ShowHeading

           INPUT
            ShowHeading         : VARIANT_BOOL'''
        return super(ILegendItem, self).put_ShowHeading(ShowHeading)
    def get_HeadingSymbol(self):
        '''Method ILegendItem.get_HeadingSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendItem, self).get_HeadingSymbol()
    def put_HeadingSymbol(self, Symbol):
        '''Method ILegendItem.put_HeadingSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendItem, self).put_HeadingSymbol(Symbol)
    def get_LegendClassFormat(self):
        '''Method ILegendItem.get_LegendClassFormat

           OUTPUT
            Format              : ILegendClassFormat**'''
        return super(ILegendItem, self).get_LegendClassFormat()
    def put_LegendClassFormat(self, Format):
        '''Method ILegendItem.put_LegendClassFormat

           INPUT
            Format              : ILegendClassFormat*'''
        return super(ILegendItem, self).put_LegendClassFormat(Format)
    def get_ShowLabels(self):
        '''Method ILegendItem.get_ShowLabels

           OUTPUT
            ShowLabels          : VARIANT_BOOL*'''
        return super(ILegendItem, self).get_ShowLabels()
    def put_ShowLabels(self, ShowLabels):
        '''Method ILegendItem.put_ShowLabels

           INPUT
            ShowLabels          : VARIANT_BOOL'''
        return super(ILegendItem, self).put_ShowLabels(ShowLabels)
    def get_ShowDescriptions(self):
        '''Method ILegendItem.get_ShowDescriptions

           OUTPUT
            ShowDescriptions    : VARIANT_BOOL*'''
        return super(ILegendItem, self).get_ShowDescriptions()
    def put_ShowDescriptions(self, ShowDescriptions):
        '''Method ILegendItem.put_ShowDescriptions

           INPUT
            ShowDescriptions    : VARIANT_BOOL'''
        return super(ILegendItem, self).put_ShowDescriptions(ShowDescriptions)
    def CreateGraphics(self, Display, LegendFormat):
        '''Method ILegendItem.CreateGraphics

           INPUTS
            Display             : IDisplay*
            LegendFormat        : ILegendFormat*'''
        return super(ILegendItem, self).CreateGraphics(Display, LegendFormat)
    def get_Width(self):
        '''Method ILegendItem.get_Width

           OUTPUT
            Width               : double*'''
        return super(ILegendItem, self).get_Width()
    def get_Height(self):
        '''Method ILegendItem.get_Height

           OUTPUT
            Height              : double*'''
        return super(ILegendItem, self).get_Height()
    def get_Graphics(self):
        '''Method ILegendItem.get_Graphics

           OUTPUT
            Graphics            : IEnumElement**'''
        return super(ILegendItem, self).get_Graphics()
    Columns = property(get_Columns, put_Columns, None)
    Graphics = property(get_Graphics, None, None)
    GroupIndex = property(get_GroupIndex, put_GroupIndex, None)
    HeadingSymbol = property(get_HeadingSymbol, put_HeadingSymbol, None)
    Height = property(get_Height, None, None)
    KeepTogether = property(get_KeepTogether, put_KeepTogether, None)
    Layer = property(get_Layer, putref_Layer, None)
    LayerNameSymbol = property(get_LayerNameSymbol, put_LayerNameSymbol, None)
    LegendClassFormat = property(get_LegendClassFormat, put_LegendClassFormat, None)
    Name = property(get_Name, None, None)
    NewColumn = property(get_NewColumn, put_NewColumn, None)
    ShowDescriptions = property(get_ShowDescriptions, put_ShowDescriptions, None)
    ShowHeading = property(get_ShowHeading, put_ShowHeading, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    ShowLayerName = property(get_ShowLayerName, put_ShowLayerName, None)
    Width = property(get_Width, None, None)
    CanDisplay = IndexProperty(get_CanDisplay, None)

class ILegendInfo(_esriCarto.ILegendInfo):
    _IID = uuid.UUID('167c5ea1-af20-11d1-8817-080009ec732a')

    def __init__(self, *args, **kw):
        super(ILegendInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LegendGroupCount(self):
        '''Method ILegendInfo.get_LegendGroupCount

           OUTPUT
            Count               : long*'''
        return super(ILegendInfo, self).get_LegendGroupCount()
    def get_LegendGroup(self, Index):
        '''Method ILegendInfo.get_LegendGroup

           INPUT
            Index               : long

           OUTPUT
            LegendGroup         : ILegendGroup**'''
        return super(ILegendInfo, self).get_LegendGroup(Index)
    def get_LegendItem(self):
        '''Method ILegendInfo.get_LegendItem

           OUTPUT
            Format              : ILegendItem**'''
        return super(ILegendInfo, self).get_LegendItem()
    def get_SymbolsAreGraduated(self):
        '''Method ILegendInfo.get_SymbolsAreGraduated

           OUTPUT
            SymbolsAreGraduated : VARIANT_BOOL*'''
        return super(ILegendInfo, self).get_SymbolsAreGraduated()
    def put_SymbolsAreGraduated(self, SymbolsAreGraduated):
        '''Method ILegendInfo.put_SymbolsAreGraduated

           INPUT
            SymbolsAreGraduated : VARIANT_BOOL'''
        return super(ILegendInfo, self).put_SymbolsAreGraduated(SymbolsAreGraduated)
    LegendGroupCount = property(get_LegendGroupCount, None, None)
    LegendItem = property(get_LegendItem, None, None)
    SymbolsAreGraduated = property(get_SymbolsAreGraduated, put_SymbolsAreGraduated, None)
    LegendGroup = IndexProperty(get_LegendGroup, None)

class ILayer2(_esriCarto.ILayer2):
    _IID = uuid.UUID('599dee2e-2182-4e54-8a86-725145c9d989')

    def __init__(self, *args, **kw):
        super(ILayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILayer2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILayer2, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer2.put_Name

           INPUT
            Name                : BSTR'''
        return super(ILayer2, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer2.get_Valid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ILayer2, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer2.get_AreaOfInterest

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ILayer2, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer2.get_MinimumScale

           OUTPUT
            MinScale            : double*'''
        return super(ILayer2, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer2.put_MinimumScale

           INPUT
            MinScale            : double'''
        return super(ILayer2, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer2.get_MaximumScale

           OUTPUT
            MaxScale            : double*'''
        return super(ILayer2, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer2.put_MaximumScale

           INPUT
            MaxScale            : double'''
        return super(ILayer2, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer2.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILayer2, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer2.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILayer2, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer2.get_ShowTips

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayer2, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer2.put_ShowTips

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayer2, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer2.get_TipText

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ILayer2, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer2.get_Cached

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ILayer2, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer2.put_Cached

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ILayer2, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer2.get_SupportedDrawPhases

           OUTPUT
            drawPhases          : long*'''
        return super(ILayer2, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer2.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ILayer2, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer2.Draw

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ILayer2, self).Draw(DrawPhase, Display, TrackCancel)
    def get_ScaleRangeReadOnly(self):
        '''Method ILayer2.get_ScaleRangeReadOnly

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILayer2, self).get_ScaleRangeReadOnly()
    def put_AreaOfInterest(self, aoi):
        '''Method ILayer2.put_AreaOfInterest

           INPUT
            aoi                 : IEnvelope*'''
        return super(ILayer2, self).put_AreaOfInterest(aoi)
    AreaOfInterest = property(get_AreaOfInterest, put_AreaOfInterest, None)
    Cached = property(get_Cached, put_Cached, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    ScaleRangeReadOnly = property(get_ScaleRangeReadOnly, None, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ILayerDrawSetup(_esriCarto.ILayerDrawSetup):
    _IID = uuid.UUID('be9dc638-bd42-4319-8254-9f23fb866deb')
    def BeforeDraw(self, viewPhase, Display, TrackCancel):
        '''Method ILayerDrawSetup.BeforeDraw

           INPUTS
            viewPhase           : esriViewDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ILayerDrawSetup, self).BeforeDraw(viewPhase, Display, TrackCancel)
    def AfterDraw(self, viewPhase, Display, TrackCancel):
        '''Method ILayerDrawSetup.AfterDraw

           INPUTS
            viewPhase           : esriViewDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ILayerDrawSetup, self).AfterDraw(viewPhase, Display, TrackCancel)

class ITemporaryLayer(_esriCarto.ITemporaryLayer):
    _IID = uuid.UUID('fceff094-8e6a-4972-9bb4-429c71b07289')

    def __init__(self, *args, **kw):
        super(ITemporaryLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Temporary(self, Temporary):
        '''Method ITemporaryLayer.put_Temporary

           INPUT
            Temporary           : VARIANT_BOOL'''
        return super(ITemporaryLayer, self).put_Temporary(Temporary)
    def get_Temporary(self):
        '''Method ITemporaryLayer.get_Temporary

           OUTPUT
            Temporary           : VARIANT_BOOL*'''
        return super(ITemporaryLayer, self).get_Temporary()
    Temporary = property(get_Temporary, put_Temporary, None)

class ILayerExtensions(_esriCarto.ILayerExtensions):
    _IID = uuid.UUID('bb6a78ca-9c28-4f75-899f-dff65174082c')
    def get_ExtensionCount(self):
        '''Method ILayerExtensions.get_ExtensionCount

           OUTPUT
            Count               : long*'''
        return super(ILayerExtensions, self).get_ExtensionCount()
    def get_Extension(self, Index):
        '''Method ILayerExtensions.get_Extension

           INPUT
            Index               : long

           OUTPUT
            ext                 : IUnknown**'''
        return super(ILayerExtensions, self).get_Extension(Index)
    def AddExtension(self, ext):
        '''Method ILayerExtensions.AddExtension

           INPUT
            ext                 : IUnknown*'''
        return super(ILayerExtensions, self).AddExtension(ext)
    def RemoveExtension(self, Index):
        '''Method ILayerExtensions.RemoveExtension

           INPUT
            Index               : long'''
        return super(ILayerExtensions, self).RemoveExtension(Index)
    ExtensionCount = property(get_ExtensionCount, None, None)
    Extension = IndexProperty(get_Extension, None)

class ITableExtensions(_esriCarto.ITableExtensions):
    _IID = uuid.UUID('5e0cb456-f494-4c34-9396-1197c3afa734')
    def get_ExtensionCount(self):
        '''Method ITableExtensions.get_ExtensionCount

           OUTPUT
            Count               : long*'''
        return super(ITableExtensions, self).get_ExtensionCount()
    def get_Extension(self, Index):
        '''Method ITableExtensions.get_Extension

           INPUT
            Index               : long

           OUTPUT
            ext                 : IUnknown**'''
        return super(ITableExtensions, self).get_Extension(Index)
    def AddExtension(self, ext):
        '''Method ITableExtensions.AddExtension

           INPUT
            ext                 : IUnknown*'''
        return super(ITableExtensions, self).AddExtension(ext)
    def RemoveExtension(self, Index):
        '''Method ITableExtensions.RemoveExtension

           INPUT
            Index               : long'''
        return super(ITableExtensions, self).RemoveExtension(Index)
    ExtensionCount = property(get_ExtensionCount, None, None)
    Extension = IndexProperty(get_Extension, None)

class IDataLayerExtension(_esriCarto.IDataLayerExtension):
    _IID = uuid.UUID('e89f2d52-64d3-11d4-80f0-00c04fa0adf8')

    def __init__(self, *args, **kw):
        super(IDataLayerExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RelativeBase(self):
        '''Method IDataLayerExtension.get_RelativeBase

           OUTPUT
            basePath            : BSTR*'''
        return super(IDataLayerExtension, self).get_RelativeBase()
    def put_RelativeBase(self, basePath):
        '''Method IDataLayerExtension.put_RelativeBase

           INPUT
            basePath            : BSTR'''
        return super(IDataLayerExtension, self).put_RelativeBase(basePath)
    def Connect(self, pOptRepairName):
        '''Method IDataLayerExtension.Connect

           INPUT
            pOptRepairName      : IName*

           OUTPUT
            Succeeded           : VARIANT_BOOL*'''
        return super(IDataLayerExtension, self).Connect(pOptRepairName)
    RelativeBase = property(get_RelativeBase, put_RelativeBase, None)

class ICompositeLayer(_esriCarto.ICompositeLayer):
    _IID = uuid.UUID('ba119bc4-939a-11d2-a2f4-080009b6f22b')
    def get_Count(self):
        '''Method ICompositeLayer.get_Count

           OUTPUT
            LayerCount          : long*'''
        return super(ICompositeLayer, self).get_Count()
    def get_Layer(self, Index):
        '''Method ICompositeLayer.get_Layer

           INPUT
            Index               : long

           OUTPUT
            Layer               : ILayer**'''
        return super(ICompositeLayer, self).get_Layer(Index)
    Count = property(get_Count, None, None)
    Layer = IndexProperty(get_Layer, None)

class ICompositeLayer2(_esriCarto.ICompositeLayer2):
    _IID = uuid.UUID('88130d17-5762-453a-96cf-8e7503fa1aa0')

    def __init__(self, *args, **kw):
        super(ICompositeLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method ICompositeLayer2.get_Count

           OUTPUT
            LayerCount          : long*'''
        return super(ICompositeLayer2, self).get_Count()
    def get_Layer(self, Index):
        '''Method ICompositeLayer2.get_Layer

           INPUT
            Index               : long

           OUTPUT
            Layer               : ILayer**'''
        return super(ICompositeLayer2, self).get_Layer(Index)
    def get_Expanded(self):
        '''Method ICompositeLayer2.get_Expanded

           OUTPUT
            Expanded            : VARIANT_BOOL*'''
        return super(ICompositeLayer2, self).get_Expanded()
    def put_Expanded(self, Expanded):
        '''Method ICompositeLayer2.put_Expanded

           INPUT
            Expanded            : VARIANT_BOOL'''
        return super(ICompositeLayer2, self).put_Expanded(Expanded)
    Count = property(get_Count, None, None)
    Expanded = property(get_Expanded, put_Expanded, None)
    Layer = IndexProperty(get_Layer, None)

class IEnumLayer(_esriCarto.IEnumLayer):
    _IID = uuid.UUID('95d967b0-4eea-11d0-98be-00805f7ced21')
    def Next(self):
        '''Method IEnumLayer.Next

           OUTPUT
            Layer               : ILayer**'''
        return super(IEnumLayer, self).Next()
    def __iter__(self):
        try:
            super(IEnumLayer, self).Reset()
            val = super(IEnumLayer, self).Next()
            while val:
                yield val
                val = super(IEnumLayer, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumLayer.Reset'''
        return super(IEnumLayer, self).Reset()

class ILayerFactory(_esriCarto.ILayerFactory):
    _IID = uuid.UUID('cc6d3d71-48b4-11d0-92d7-00805f7c28b0')
    def get_PublicName(self):
        '''Method ILayerFactory.get_PublicName

           OUTPUT
            Name                : BSTR*'''
        return super(ILayerFactory, self).get_PublicName()
    def get_LayerCategory(self):
        '''Method ILayerFactory.get_LayerCategory

           OUTPUT
            Category            : BSTR*'''
        return super(ILayerFactory, self).get_LayerCategory()
    def LoadLayers(self):
        '''Method ILayerFactory.LoadLayers

           OUTPUT
            Layers              : IEnumLayer**'''
        return super(ILayerFactory, self).LoadLayers()
    def get_CanCreate(self, inputObject):
        '''Method ILayerFactory.get_CanCreate

           INPUT
            inputObject         : IUnknown*

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(ILayerFactory, self).get_CanCreate(inputObject)
    def Create(self, inputObject):
        '''Method ILayerFactory.Create

           INPUT
            inputObject         : IUnknown*

           OUTPUT
            Layers              : IEnumLayer**'''
        return super(ILayerFactory, self).Create(inputObject)
    LayerCategory = property(get_LayerCategory, None, None)
    PublicName = property(get_PublicName, None, None)
    CanCreate = IndexProperty(get_CanCreate, None)

class IFeatureServiceLayerFactory(_esriCarto.IFeatureServiceLayerFactory):
    _IID = uuid.UUID('a27a6b0c-6f1f-45bd-b91f-8e878939764f')
    def Create(self, inputObject):
        '''Method IFeatureServiceLayerFactory.Create

           INPUT
            inputObject         : IUnknown*

           OUTPUTS
            tables              : IEnumTable**
            Layers              : IEnumLayer**'''
        return super(IFeatureServiceLayerFactory, self).Create(inputObject)
    def CreateSubLayer(self, inputObject, LayerID):
        '''Method IFeatureServiceLayerFactory.CreateSubLayer

           INPUTS
            inputObject         : IUnknown*
            LayerID             : BSTR

           OUTPUTS
            tables              : IEnumTable**
            Layers              : IEnumLayer**'''
        return super(IFeatureServiceLayerFactory, self).CreateSubLayer(inputObject, LayerID)

class IBarrierProperties(_esriCarto.IBarrierProperties):
    _IID = uuid.UUID('01c12b91-a3fb-11d2-a2fe-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IBarrierProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Weight(self):
        '''Method IBarrierProperties.get_Weight

           OUTPUT
            Weight              : long*'''
        return super(IBarrierProperties, self).get_Weight()
    def put_Weight(self, Weight):
        '''Method IBarrierProperties.put_Weight

           INPUT
            Weight              : long'''
        return super(IBarrierProperties, self).put_Weight(Weight)
    def get_Barriers(self, Display, pBarriers, Extent):
        '''Method IBarrierProperties.get_Barriers

           INPUTS
            Display             : IDisplay*
            pBarriers           : IGeometryCollection*
            Extent              : IEnvelope*'''
        return super(IBarrierProperties, self).get_Barriers(Display, pBarriers, Extent)
    Weight = property(get_Weight, put_Weight, None)

class IBarrierProperties2(_esriCarto.IBarrierProperties2):
    _IID = uuid.UUID('e2d07333-5605-4ea6-87bd-7830927452e0')

    def __init__(self, *args, **kw):
        super(IBarrierProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Weight(self):
        '''Method IBarrierProperties2.get_Weight

           OUTPUT
            Weight              : long*'''
        return super(IBarrierProperties2, self).get_Weight()
    def put_Weight(self, Weight):
        '''Method IBarrierProperties2.put_Weight

           INPUT
            Weight              : long'''
        return super(IBarrierProperties2, self).put_Weight(Weight)
    def QueryBarriers(self, Display, pBarriers, Extent, TrackCancel):
        '''Method IBarrierProperties2.QueryBarriers

           INPUTS
            Display             : IDisplay*
            pBarriers           : IGeometryCollection*
            Extent              : IEnvelope*
            TrackCancel         : ITrackCancel*'''
        return super(IBarrierProperties2, self).QueryBarriers(Display, pBarriers, Extent, TrackCancel)
    Weight = property(get_Weight, put_Weight, None)

class ILayerEvents(_esriCarto.ILayerEvents):
    _IID = uuid.UUID('bda426b2-a692-11d2-a300-080009b6f22b')
    def VisibilityChanged(self, currentState):
        '''Method ILayerEvents.VisibilityChanged

           INPUT
            currentState        : VARIANT_BOOL'''
        return super(ILayerEvents, self).VisibilityChanged(currentState)

class IDataLayer(_esriCarto.IDataLayer):
    _IID = uuid.UUID('6ca416b1-e160-11d2-9f4e-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IDataLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DataSourceName(self):
        '''Method IDataLayer.get_DataSourceName

           OUTPUT
            Name                : IName**'''
        return super(IDataLayer, self).get_DataSourceName()
    def put_DataSourceName(self, Name):
        '''Method IDataLayer.put_DataSourceName

           INPUT
            Name                : IName*'''
        return super(IDataLayer, self).put_DataSourceName(Name)
    def get_DataSourceSupported(self, Name):
        '''Method IDataLayer.get_DataSourceSupported

           INPUT
            Name                : IName*

           OUTPUT
            supported           : VARIANT_BOOL*'''
        return super(IDataLayer, self).get_DataSourceSupported(Name)
    def Connect(self, pOptRepairName):
        '''Method IDataLayer.Connect

           INPUT
            pOptRepairName      : IName*

           OUTPUT
            Succeeded           : VARIANT_BOOL*'''
        return super(IDataLayer, self).Connect(pOptRepairName)
    def get_RelativeBase(self):
        '''Method IDataLayer.get_RelativeBase

           OUTPUT
            basePath            : BSTR*'''
        return super(IDataLayer, self).get_RelativeBase()
    def put_RelativeBase(self, basePath):
        '''Method IDataLayer.put_RelativeBase

           INPUT
            basePath            : BSTR'''
        return super(IDataLayer, self).put_RelativeBase(basePath)
    DataSourceName = property(get_DataSourceName, put_DataSourceName, None)
    RelativeBase = property(get_RelativeBase, put_RelativeBase, None)
    DataSourceSupported = IndexProperty(get_DataSourceSupported, None)

class IDataLayer2(_esriCarto.IDataLayer2):
    _IID = uuid.UUID('e9d11f65-6936-4408-b69f-d91552eb9c4a')

    def __init__(self, *args, **kw):
        super(IDataLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DataSourceName(self):
        '''Method IDataLayer2.get_DataSourceName

           OUTPUT
            Name                : IName**'''
        return super(IDataLayer2, self).get_DataSourceName()
    def put_DataSourceName(self, Name):
        '''Method IDataLayer2.put_DataSourceName

           INPUT
            Name                : IName*'''
        return super(IDataLayer2, self).put_DataSourceName(Name)
    def get_DataSourceSupported(self, Name):
        '''Method IDataLayer2.get_DataSourceSupported

           INPUT
            Name                : IName*

           OUTPUT
            supported           : VARIANT_BOOL*'''
        return super(IDataLayer2, self).get_DataSourceSupported(Name)
    def Connect(self, pOptRepairName):
        '''Method IDataLayer2.Connect

           INPUT
            pOptRepairName      : IName*

           OUTPUT
            Succeeded           : VARIANT_BOOL*'''
        return super(IDataLayer2, self).Connect(pOptRepairName)
    def get_RelativeBase(self):
        '''Method IDataLayer2.get_RelativeBase

           OUTPUT
            basePath            : BSTR*'''
        return super(IDataLayer2, self).get_RelativeBase()
    def put_RelativeBase(self, basePath):
        '''Method IDataLayer2.put_RelativeBase

           INPUT
            basePath            : BSTR'''
        return super(IDataLayer2, self).put_RelativeBase(basePath)
    def Disconnect(self):
        '''Method IDataLayer2.Disconnect'''
        return super(IDataLayer2, self).Disconnect()
    def InWorkspace(self, Workspace):
        '''Method IDataLayer2.InWorkspace

           INPUT
            Workspace           : IWorkspace*

           OUTPUT
            InWorkspace         : VARIANT_BOOL*'''
        return super(IDataLayer2, self).InWorkspace(Workspace)
    DataSourceName = property(get_DataSourceName, put_DataSourceName, None)
    RelativeBase = property(get_RelativeBase, put_RelativeBase, None)
    DataSourceSupported = IndexProperty(get_DataSourceSupported, None)

class ILayerDrawingProperties(_esriCarto.ILayerDrawingProperties):
    _IID = uuid.UUID('251c3e11-f119-11d2-9f5e-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(ILayerDrawingProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DrawingPropsDirty(self):
        '''Method ILayerDrawingProperties.get_DrawingPropsDirty

           OUTPUT
            Dirty               : VARIANT_BOOL*'''
        return super(ILayerDrawingProperties, self).get_DrawingPropsDirty()
    def put_DrawingPropsDirty(self, Dirty):
        '''Method ILayerDrawingProperties.put_DrawingPropsDirty

           INPUT
            Dirty               : VARIANT_BOOL'''
        return super(ILayerDrawingProperties, self).put_DrawingPropsDirty(Dirty)
    DrawingPropsDirty = property(get_DrawingPropsDirty, put_DrawingPropsDirty, None)

class ILayerInfo(_esriCarto.ILayerInfo):
    _IID = uuid.UUID('274419e1-0f5c-11d3-9bfd-00c04f5b951e')
    def get_SmallImage(self):
        '''Method ILayerInfo.get_SmallImage

           OUTPUT
            hBitmap             : OLE_HANDLE*'''
        return super(ILayerInfo, self).get_SmallImage()
    def get_SmallSelectedImage(self):
        '''Method ILayerInfo.get_SmallSelectedImage

           OUTPUT
            hBitmap             : OLE_HANDLE*'''
        return super(ILayerInfo, self).get_SmallSelectedImage()
    def get_LargeImage(self):
        '''Method ILayerInfo.get_LargeImage

           OUTPUT
            hBitmap             : OLE_HANDLE*'''
        return super(ILayerInfo, self).get_LargeImage()
    def get_LargeSelectedImage(self):
        '''Method ILayerInfo.get_LargeSelectedImage

           OUTPUT
            hBitmap             : OLE_HANDLE*'''
        return super(ILayerInfo, self).get_LargeSelectedImage()
    LargeImage = property(get_LargeImage, None, None)
    LargeSelectedImage = property(get_LargeSelectedImage, None, None)
    SmallImage = property(get_SmallImage, None, None)
    SmallSelectedImage = property(get_SmallSelectedImage, None, None)

class ILayerEffects(_esriCarto.ILayerEffects):
    _IID = uuid.UUID('09998199-1fb8-11d3-ab4e-000000000000')

    def __init__(self, *args, **kw):
        super(ILayerEffects, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SupportsTransparency(self):
        '''Method ILayerEffects.get_SupportsTransparency

           OUTPUT
            supported           : VARIANT_BOOL*'''
        return super(ILayerEffects, self).get_SupportsTransparency()
    def get_SupportsContrastChange(self):
        '''Method ILayerEffects.get_SupportsContrastChange

           OUTPUT
            supported           : VARIANT_BOOL*'''
        return super(ILayerEffects, self).get_SupportsContrastChange()
    def get_SupportsBrightnessChange(self):
        '''Method ILayerEffects.get_SupportsBrightnessChange

           OUTPUT
            supported           : VARIANT_BOOL*'''
        return super(ILayerEffects, self).get_SupportsBrightnessChange()
    def put_SupportsInteractive(self, supported):
        '''Method ILayerEffects.put_SupportsInteractive

           INPUT
            supported           : VARIANT_BOOL'''
        return super(ILayerEffects, self).put_SupportsInteractive(supported)
    def get_SupportsInteractive(self):
        '''Method ILayerEffects.get_SupportsInteractive

           OUTPUT
            supported           : VARIANT_BOOL*'''
        return super(ILayerEffects, self).get_SupportsInteractive()
    def get_Transparency(self):
        '''Method ILayerEffects.get_Transparency

           OUTPUT
            alpha               : short*'''
        return super(ILayerEffects, self).get_Transparency()
    def put_Transparency(self, alpha):
        '''Method ILayerEffects.put_Transparency

           INPUT
            alpha               : short'''
        return super(ILayerEffects, self).put_Transparency(alpha)
    def get_Contrast(self):
        '''Method ILayerEffects.get_Contrast

           OUTPUT
            ContrastValue       : short*'''
        return super(ILayerEffects, self).get_Contrast()
    def put_Contrast(self, ContrastValue):
        '''Method ILayerEffects.put_Contrast

           INPUT
            ContrastValue       : short'''
        return super(ILayerEffects, self).put_Contrast(ContrastValue)
    def get_Brightness(self):
        '''Method ILayerEffects.get_Brightness

           OUTPUT
            BrightnessValue     : short*'''
        return super(ILayerEffects, self).get_Brightness()
    def put_Brightness(self, BrightnessValue):
        '''Method ILayerEffects.put_Brightness

           INPUT
            BrightnessValue     : short'''
        return super(ILayerEffects, self).put_Brightness(BrightnessValue)
    Brightness = property(get_Brightness, put_Brightness, None)
    Contrast = property(get_Contrast, put_Contrast, None)
    SupportsBrightnessChange = property(get_SupportsBrightnessChange, None, None)
    SupportsContrastChange = property(get_SupportsContrastChange, None, None)
    SupportsInteractive = property(get_SupportsInteractive, put_SupportsInteractive, None)
    SupportsTransparency = property(get_SupportsTransparency, None, None)
    Transparency = property(get_Transparency, put_Transparency, None)

class ILayerEffectDIM(_esriCarto.ILayerEffectDIM):
    _IID = uuid.UUID('c67c6655-6540-442b-8659-a286c2bfa205')

    def __init__(self, *args, **kw):
        super(ILayerEffectDIM, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DimPercentage(self):
        '''Method ILayerEffectDIM.get_DimPercentage

           OUTPUT
            dimValue            : short*'''
        return super(ILayerEffectDIM, self).get_DimPercentage()
    def put_DimPercentage(self, dimValue):
        '''Method ILayerEffectDIM.put_DimPercentage

           INPUT
            dimValue            : short'''
        return super(ILayerEffectDIM, self).put_DimPercentage(dimValue)
    DimPercentage = property(get_DimPercentage, put_DimPercentage, None)

class ILayerPosition(_esriCarto.ILayerPosition):
    _IID = uuid.UUID('c0dc8820-e10f-4285-aab1-6c6b685dbb84')

    def __init__(self, *args, **kw):
        super(ILayerPosition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LayerWeight(self):
        '''Method ILayerPosition.get_LayerWeight

           OUTPUT
            LayerWeight         : double*'''
        return super(ILayerPosition, self).get_LayerWeight()
    def put_LayerWeight(self, LayerWeight):
        '''Method ILayerPosition.put_LayerWeight

           INPUT
            LayerWeight         : double'''
        return super(ILayerPosition, self).put_LayerWeight(LayerWeight)
    LayerWeight = property(get_LayerWeight, put_LayerWeight, None)

class IAttributeTable(_esriCarto.IAttributeTable):
    _IID = uuid.UUID('07f3186c-af91-4ad6-bf67-11167d0f8f60')
    def get_AttributeTable(self):
        '''Method IAttributeTable.get_AttributeTable

           OUTPUT
            ppTable             : ITable**'''
        return super(IAttributeTable, self).get_AttributeTable()
    AttributeTable = property(get_AttributeTable, None, None)

class ILayerStatus(_esriCarto.ILayerStatus):
    _IID = uuid.UUID('ed4721d6-3e0d-4110-9324-8cce8d2801ef')

    def __init__(self, *args, **kw):
        super(ILayerStatus, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_StepProgressor(self, _arg1):
        '''Method ILayerStatus.put_StepProgressor

           INPUT
            _arg1               : IStepProgressor*'''
        return super(ILayerStatus, self).put_StepProgressor(_arg1)
    StepProgressor = property(None, put_StepProgressor, None)

class IPublishLayer(_esriCarto.IPublishLayer):
    _IID = uuid.UUID('7453c805-9d64-44a6-bf2f-73e477dce18f')
    def get_SupportsPublishing(self):
        '''Method IPublishLayer.get_SupportsPublishing

           OUTPUT
            bValid              : VARIANT_BOOL*'''
        return super(IPublishLayer, self).get_SupportsPublishing()
    def get_PublishingDescription(self):
        '''Method IPublishLayer.get_PublishingDescription

           OUTPUT
            bsDescription       : BSTR*'''
        return super(IPublishLayer, self).get_PublishingDescription()
    def get_DataValid(self):
        '''Method IPublishLayer.get_DataValid

           OUTPUT
            bDataValid          : VARIANT_BOOL*'''
        return super(IPublishLayer, self).get_DataValid()
    def get_DataDetails(self, bsPadding):
        '''Method IPublishLayer.get_DataDetails

           INPUT
            bsPadding           : BSTR

           OUTPUT
            bsDataDetails       : BSTR*'''
        return super(IPublishLayer, self).get_DataDetails(bsPadding)
    def PrepareForPublishing(self):
        '''Method IPublishLayer.PrepareForPublishing'''
        return super(IPublishLayer, self).PrepareForPublishing()
    DataValid = property(get_DataValid, None, None)
    PublishingDescription = property(get_PublishingDescription, None, None)
    SupportsPublishing = property(get_SupportsPublishing, None, None)
    DataDetails = IndexProperty(get_DataDetails, None)

class ISecureLayer(_esriCarto.ISecureLayer):
    _IID = uuid.UUID('d047a6a9-d445-4921-a1e9-72d8b8a2813a')
    def ClearPassword(self, bForceReconnect):
        '''Method ISecureLayer.ClearPassword

           INPUT
            bForceReconnect     : VARIANT_BOOL'''
        return super(ISecureLayer, self).ClearPassword(bForceReconnect)

class ILayerDrawingPhase(_esriCarto.ILayerDrawingPhase):
    _IID = uuid.UUID('eef01b2d-8fe1-4759-8b93-51ee22ded70a')

    def __init__(self, *args, **kw):
        super(ILayerDrawingPhase, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DrawPhase(self):
        '''Method ILayerDrawingPhase.get_DrawPhase

           OUTPUT
            pDrawPhase          : esriDrawPhase*'''
        return super(ILayerDrawingPhase, self).get_DrawPhase()
    def put_DrawPhase(self, pDrawPhase):
        '''Method ILayerDrawingPhase.put_DrawPhase

           INPUT
            pDrawPhase          : esriDrawPhase'''
        return super(ILayerDrawingPhase, self).put_DrawPhase(pDrawPhase)
    DrawPhase = property(get_DrawPhase, put_DrawPhase, None)

class ILicensedComponent(_esriCarto.ILicensedComponent):
    _IID = uuid.UUID('aaa6c7a9-8c4c-4fd6-a81c-8eaeacb0b94a')
    def get_ValidLicense(self, initData):
        '''Method ILicensedComponent.get_ValidLicense

           INPUT
            initData            : VARIANT*

           OUTPUT
            ret                 : VARIANT_BOOL*'''
        return super(ILicensedComponent, self).get_ValidLicense(initData)
    ValidLicense = IndexProperty(get_ValidLicense, None)

class ILayerGeneralProperties(_esriCarto.ILayerGeneralProperties):
    _IID = uuid.UUID('2425b413-1ffc-4407-b9f0-b4ac9ed50bde')

    def __init__(self, *args, **kw):
        super(ILayerGeneralProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LastMinimumScale(self):
        '''Method ILayerGeneralProperties.get_LastMinimumScale

           OUTPUT
            MinScale            : double*'''
        return super(ILayerGeneralProperties, self).get_LastMinimumScale()
    def get_LastMaximumScale(self):
        '''Method ILayerGeneralProperties.get_LastMaximumScale

           OUTPUT
            MaxScale            : double*'''
        return super(ILayerGeneralProperties, self).get_LastMaximumScale()
    def get_LayerDescription(self):
        '''Method ILayerGeneralProperties.get_LayerDescription

           OUTPUT
            Text                : BSTR*'''
        return super(ILayerGeneralProperties, self).get_LayerDescription()
    def put_LayerDescription(self, Text):
        '''Method ILayerGeneralProperties.put_LayerDescription

           INPUT
            Text                : BSTR'''
        return super(ILayerGeneralProperties, self).put_LayerDescription(Text)
    LastMaximumScale = property(get_LastMaximumScale, None, None)
    LastMinimumScale = property(get_LastMinimumScale, None, None)
    LayerDescription = property(get_LayerDescription, put_LayerDescription, None)

class IDrawAnnotationGeometry(_esriCarto.IDrawAnnotationGeometry):
    _IID = uuid.UUID('4944d2af-6a5e-42d0-a33c-4129285720fc')

    def __init__(self, *args, **kw):
        super(IDrawAnnotationGeometry, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DrawGeometry(self):
        '''Method IDrawAnnotationGeometry.get_DrawGeometry

           OUTPUT
            pUseScale           : VARIANT_BOOL*'''
        return super(IDrawAnnotationGeometry, self).get_DrawGeometry()
    def put_DrawGeometry(self, pUseScale):
        '''Method IDrawAnnotationGeometry.put_DrawGeometry

           INPUT
            pUseScale           : VARIANT_BOOL'''
        return super(IDrawAnnotationGeometry, self).put_DrawGeometry(pUseScale)
    def get_DrawGeometryLineSymbol(self):
        '''Method IDrawAnnotationGeometry.get_DrawGeometryLineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IDrawAnnotationGeometry, self).get_DrawGeometryLineSymbol()
    def putref_DrawGeometryLineSymbol(self, Symbol):
        '''Method IDrawAnnotationGeometry.putref_DrawGeometryLineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IDrawAnnotationGeometry, self).putref_DrawGeometryLineSymbol(Symbol)
    def get_DrawGeometryMarkerSymbol(self):
        '''Method IDrawAnnotationGeometry.get_DrawGeometryMarkerSymbol

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IDrawAnnotationGeometry, self).get_DrawGeometryMarkerSymbol()
    def putref_DrawGeometryMarkerSymbol(self, Symbol):
        '''Method IDrawAnnotationGeometry.putref_DrawGeometryMarkerSymbol

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IDrawAnnotationGeometry, self).putref_DrawGeometryMarkerSymbol(Symbol)
    DrawGeometry = property(get_DrawGeometry, put_DrawGeometry, None)
    DrawGeometryLineSymbol = property(get_DrawGeometryLineSymbol, putref_DrawGeometryLineSymbol, None)
    DrawGeometryMarkerSymbol = property(get_DrawGeometryMarkerSymbol, putref_DrawGeometryMarkerSymbol, None)

class ILayerSymbologyExtents(_esriCarto.ILayerSymbologyExtents):
    _IID = uuid.UUID('02cbda2f-d2e8-4b28-af9c-71cb096213e1')
    def ExpandRegionForSymbols(self, pDisplay, pRegion):
        '''Method ILayerSymbologyExtents.ExpandRegionForSymbols

           INPUTS
            pDisplay            : IDisplay*
            pRegion             : IGeometry*'''
        return super(ILayerSymbologyExtents, self).ExpandRegionForSymbols(pDisplay, pRegion)

class IFeatureGeometryAccess(_esriCarto.IFeatureGeometryAccess):
    _IID = uuid.UUID('addf1b83-7d75-49c6-a587-73a0aba90e99')
    def get_CanAccessGeometry(self):
        '''Method IFeatureGeometryAccess.get_CanAccessGeometry

           OUTPUT
            canAccess           : VARIANT_BOOL*'''
        return super(IFeatureGeometryAccess, self).get_CanAccessGeometry()
    CanAccessGeometry = property(get_CanAccessGeometry, None, None)

class ISecureLayer2(_esriCarto.ISecureLayer2):
    _IID = uuid.UUID('67f66590-d48d-4c8d-b6c4-7e5f9fb009c7')
    def ClearPassword(self, bForceReconnect):
        '''Method ISecureLayer2.ClearPassword

           INPUT
            bForceReconnect     : VARIANT_BOOL'''
        return super(ISecureLayer2, self).ClearPassword(bForceReconnect)
    def get_HasAuthentication(self):
        '''Method ISecureLayer2.get_HasAuthentication

           OUTPUT
            HasAuthentication   : VARIANT_BOOL*'''
        return super(ISecureLayer2, self).get_HasAuthentication()
    HasAuthentication = property(get_HasAuthentication, None, None)

class ITimeData(_esriCarto.ITimeData):
    _IID = uuid.UUID('008331d0-1225-4fe7-ad19-c3431625d337')

    def __init__(self, *args, **kw):
        super(ITimeData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SupportsTime(self):
        '''Method ITimeData.get_SupportsTime

           OUTPUT
            hasTime             : VARIANT_BOOL*'''
        return super(ITimeData, self).get_SupportsTime()
    def get_UseTime(self):
        '''Method ITimeData.get_UseTime

           OUTPUT
            UseTime             : VARIANT_BOOL*'''
        return super(ITimeData, self).get_UseTime()
    def put_UseTime(self, UseTime):
        '''Method ITimeData.put_UseTime

           INPUT
            UseTime             : VARIANT_BOOL'''
        return super(ITimeData, self).put_UseTime(UseTime)
    def get_TimeReference(self):
        '''Method ITimeData.get_TimeReference

           OUTPUT
            layerTimeReference  : ITimeReference**'''
        return super(ITimeData, self).get_TimeReference()
    def GetFullTimeExtent(self):
        '''Method ITimeData.GetFullTimeExtent

           OUTPUT
            dataTimeSpan        : ITimeExtent**'''
        return super(ITimeData, self).GetFullTimeExtent()
    SupportsTime = property(get_SupportsTime, None, None)
    TimeReference = property(get_TimeReference, None, None)
    UseTime = property(get_UseTime, put_UseTime, None)

class ITimeTableDefinition(_esriCarto.ITimeTableDefinition):
    _IID = uuid.UUID('9f45df65-de39-4a88-b174-b2ad3d3020a8')

    def __init__(self, *args, **kw):
        super(ITimeTableDefinition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StartTimeFieldName(self):
        '''Method ITimeTableDefinition.get_StartTimeFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(ITimeTableDefinition, self).get_StartTimeFieldName()
    def put_StartTimeFieldName(self, FieldName):
        '''Method ITimeTableDefinition.put_StartTimeFieldName

           INPUT
            FieldName           : BSTR'''
        return super(ITimeTableDefinition, self).put_StartTimeFieldName(FieldName)
    def get_EndTimeFieldName(self):
        '''Method ITimeTableDefinition.get_EndTimeFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(ITimeTableDefinition, self).get_EndTimeFieldName()
    def put_EndTimeFieldName(self, FieldName):
        '''Method ITimeTableDefinition.put_EndTimeFieldName

           INPUT
            FieldName           : BSTR'''
        return super(ITimeTableDefinition, self).put_EndTimeFieldName(FieldName)
    def get_TimeValueFormat(self):
        '''Method ITimeTableDefinition.get_TimeValueFormat

           OUTPUT
            Format              : BSTR*'''
        return super(ITimeTableDefinition, self).get_TimeValueFormat()
    def put_TimeValueFormat(self, Format):
        '''Method ITimeTableDefinition.put_TimeValueFormat

           INPUT
            Format              : BSTR'''
        return super(ITimeTableDefinition, self).put_TimeValueFormat(Format)
    def get_TrackIDFieldName(self):
        '''Method ITimeTableDefinition.get_TrackIDFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(ITimeTableDefinition, self).get_TrackIDFieldName()
    def put_TrackIDFieldName(self, FieldName):
        '''Method ITimeTableDefinition.put_TrackIDFieldName

           INPUT
            FieldName           : BSTR'''
        return super(ITimeTableDefinition, self).put_TrackIDFieldName(FieldName)
    def get_TimeReference(self):
        '''Method ITimeTableDefinition.get_TimeReference

           OUTPUT
            nativeTimeReference : ITimeReference**'''
        return super(ITimeTableDefinition, self).get_TimeReference()
    def putref_TimeReference(self, nativeTimeReference):
        '''Method ITimeTableDefinition.putref_TimeReference

           INPUT
            nativeTimeReference : ITimeReference*'''
        return super(ITimeTableDefinition, self).putref_TimeReference(nativeTimeReference)
    def get_CustomTimeExtent(self):
        '''Method ITimeTableDefinition.get_CustomTimeExtent

           OUTPUT
            layerVisibiltyTime  : ITimeExtent**'''
        return super(ITimeTableDefinition, self).get_CustomTimeExtent()
    def putref_CustomTimeExtent(self, layerVisibiltyTime):
        '''Method ITimeTableDefinition.putref_CustomTimeExtent

           INPUT
            layerVisibiltyTime  : ITimeExtent*'''
        return super(ITimeTableDefinition, self).putref_CustomTimeExtent(layerVisibiltyTime)
    CustomTimeExtent = property(get_CustomTimeExtent, putref_CustomTimeExtent, None)
    EndTimeFieldName = property(get_EndTimeFieldName, put_EndTimeFieldName, None)
    StartTimeFieldName = property(get_StartTimeFieldName, put_StartTimeFieldName, None)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)
    TimeValueFormat = property(get_TimeValueFormat, put_TimeValueFormat, None)
    TrackIDFieldName = property(get_TrackIDFieldName, put_TrackIDFieldName, None)

class ITimeDataDisplay(_esriCarto.ITimeDataDisplay):
    _IID = uuid.UUID('f12874c3-3358-40a5-8e32-c824dd1d75fa')

    def __init__(self, *args, **kw):
        super(ITimeDataDisplay, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TimeDataCumulative(self, cumilative):
        '''Method ITimeDataDisplay.put_TimeDataCumulative

           INPUT
            cumilative          : VARIANT_BOOL'''
        return super(ITimeDataDisplay, self).put_TimeDataCumulative(cumilative)
    def get_TimeDataCumulative(self):
        '''Method ITimeDataDisplay.get_TimeDataCumulative

           OUTPUT
            cumilative          : VARIANT_BOOL*'''
        return super(ITimeDataDisplay, self).get_TimeDataCumulative()
    def put_TimeInterval(self, Interval):
        '''Method ITimeDataDisplay.put_TimeInterval

           INPUT
            Interval            : double'''
        return super(ITimeDataDisplay, self).put_TimeInterval(Interval)
    def get_TimeInterval(self):
        '''Method ITimeDataDisplay.get_TimeInterval

           OUTPUT
            Interval            : double*'''
        return super(ITimeDataDisplay, self).get_TimeInterval()
    def put_TimeIntervalUnits(self, Units):
        '''Method ITimeDataDisplay.put_TimeIntervalUnits

           INPUT
            Units               : esriTimeUnits'''
        return super(ITimeDataDisplay, self).put_TimeIntervalUnits(Units)
    def get_TimeIntervalUnits(self):
        '''Method ITimeDataDisplay.get_TimeIntervalUnits

           OUTPUT
            Units               : esriTimeUnits*'''
        return super(ITimeDataDisplay, self).get_TimeIntervalUnits()
    def put_TimeOffset(self, TimeOffset):
        '''Method ITimeDataDisplay.put_TimeOffset

           INPUT
            TimeOffset          : double'''
        return super(ITimeDataDisplay, self).put_TimeOffset(TimeOffset)
    def get_TimeOffset(self):
        '''Method ITimeDataDisplay.get_TimeOffset

           OUTPUT
            TimeOffset          : double*'''
        return super(ITimeDataDisplay, self).get_TimeOffset()
    def put_TimeOffsetUnits(self, Units):
        '''Method ITimeDataDisplay.put_TimeOffsetUnits

           INPUT
            Units               : esriTimeUnits'''
        return super(ITimeDataDisplay, self).put_TimeOffsetUnits(Units)
    def get_TimeOffsetUnits(self):
        '''Method ITimeDataDisplay.get_TimeOffsetUnits

           OUTPUT
            Units               : esriTimeUnits*'''
        return super(ITimeDataDisplay, self).get_TimeOffsetUnits()
    TimeDataCumulative = property(get_TimeDataCumulative, put_TimeDataCumulative, None)
    TimeInterval = property(get_TimeInterval, put_TimeInterval, None)
    TimeIntervalUnits = property(get_TimeIntervalUnits, put_TimeIntervalUnits, None)
    TimeOffset = property(get_TimeOffset, put_TimeOffset, None)
    TimeOffsetUnits = property(get_TimeOffsetUnits, put_TimeOffsetUnits, None)

class ITimeDimensionDefinition(_esriCarto.ITimeDimensionDefinition):
    _IID = uuid.UUID('f1f9cc71-5f24-4176-9ba4-9d8af7195a3e')

    def __init__(self, *args, **kw):
        super(ITimeDimensionDefinition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MultiDimensional(self):
        '''Method ITimeDimensionDefinition.get_MultiDimensional

           OUTPUT
            isMultidimensional  : VARIANT_BOOL*'''
        return super(ITimeDimensionDefinition, self).get_MultiDimensional()
    def get_TimeDimensionName(self):
        '''Method ITimeDimensionDefinition.get_TimeDimensionName

           OUTPUT
            FieldName           : BSTR*'''
        return super(ITimeDimensionDefinition, self).get_TimeDimensionName()
    def put_TimeDimensionName(self, FieldName):
        '''Method ITimeDimensionDefinition.put_TimeDimensionName

           INPUT
            FieldName           : BSTR'''
        return super(ITimeDimensionDefinition, self).put_TimeDimensionName(FieldName)
    def get_TimeDimensionFormat(self):
        '''Method ITimeDimensionDefinition.get_TimeDimensionFormat

           OUTPUT
            Format              : BSTR*'''
        return super(ITimeDimensionDefinition, self).get_TimeDimensionFormat()
    def put_TimeDimensionFormat(self, Format):
        '''Method ITimeDimensionDefinition.put_TimeDimensionFormat

           INPUT
            Format              : BSTR'''
        return super(ITimeDimensionDefinition, self).put_TimeDimensionFormat(Format)
    def get_TimeReference(self):
        '''Method ITimeDimensionDefinition.get_TimeReference

           OUTPUT
            nativeTimeReference : ITimeReference**'''
        return super(ITimeDimensionDefinition, self).get_TimeReference()
    def putref_TimeReference(self, nativeTimeReference):
        '''Method ITimeDimensionDefinition.putref_TimeReference

           INPUT
            nativeTimeReference : ITimeReference*'''
        return super(ITimeDimensionDefinition, self).putref_TimeReference(nativeTimeReference)
    MultiDimensional = property(get_MultiDimensional, None, None)
    TimeDimensionFormat = property(get_TimeDimensionFormat, put_TimeDimensionFormat, None)
    TimeDimensionName = property(get_TimeDimensionName, put_TimeDimensionName, None)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)

class ITimeData2(_esriCarto.ITimeData2):
    _IID = uuid.UUID('6308f920-d4ef-4e5f-b0fc-7a63ed132b27')

    def __init__(self, *args, **kw):
        super(ITimeData2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HasLiveData(self):
        '''Method ITimeData2.get_HasLiveData

           OUTPUT
            UseTime             : VARIANT_BOOL*'''
        return super(ITimeData2, self).get_HasLiveData()
    def put_HasLiveData(self, UseTime):
        '''Method ITimeData2.put_HasLiveData

           INPUT
            UseTime             : VARIANT_BOOL'''
        return super(ITimeData2, self).put_HasLiveData(UseTime)
    def get_SupportsTime(self):
        '''Method ITimeData.get_SupportsTime (from ITimeData)

           OUTPUT
            hasTime             : VARIANT_BOOL*'''
        return super(ITimeData2, self).get_SupportsTime()
    def get_UseTime(self):
        '''Method ITimeData.get_UseTime (from ITimeData)

           OUTPUT
            UseTime             : VARIANT_BOOL*'''
        return super(ITimeData2, self).get_UseTime()
    def put_UseTime(self, UseTime):
        '''Method ITimeData.put_UseTime (from ITimeData)

           INPUT
            UseTime             : VARIANT_BOOL'''
        return super(ITimeData2, self).put_UseTime(UseTime)
    def get_TimeReference(self):
        '''Method ITimeData.get_TimeReference (from ITimeData)

           OUTPUT
            layerTimeReference  : ITimeReference**'''
        return super(ITimeData2, self).get_TimeReference()
    def GetFullTimeExtent(self):
        '''Method ITimeData.GetFullTimeExtent (from ITimeData)

           OUTPUT
            dataTimeSpan        : ITimeExtent**'''
        return super(ITimeData2, self).GetFullTimeExtent()
    HasLiveData = property(get_HasLiveData, put_HasLiveData, None)
    SupportsTime = property(get_SupportsTime, None, None)
    TimeReference = property(get_TimeReference, None, None)
    UseTime = property(get_UseTime, put_UseTime, None)

class IIdentifyObj(_esriCarto.IIdentifyObj):
    _IID = uuid.UUID('3947c520-d34a-11d2-8cd0-00c04f5b951e')
    def CanIdentify(self, pLayer):
        '''Method IIdentifyObj.CanIdentify

           INPUT
            pLayer              : ILayer*

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IIdentifyObj, self).CanIdentify(pLayer)
    def get_hWnd(self):
        '''Method IIdentifyObj.get_hWnd

           OUTPUT
            hWnd                : OLE_HANDLE*'''
        return super(IIdentifyObj, self).get_hWnd()
    def get_Name(self):
        '''Method IIdentifyObj.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IIdentifyObj, self).get_Name()
    def get_Layer(self):
        '''Method IIdentifyObj.get_Layer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IIdentifyObj, self).get_Layer()
    def Flash(self, pDisplay):
        '''Method IIdentifyObj.Flash

           INPUT
            pDisplay            : IScreenDisplay*'''
        return super(IIdentifyObj, self).Flash(pDisplay)
    def PopUpMenu(self, x, y):
        '''Method IIdentifyObj.PopUpMenu

           INPUTS
            x                   : long
            y                   : long'''
        return super(IIdentifyObj, self).PopUpMenu(x, y)
    Layer = property(get_Layer, None, None)
    Name = property(get_Name, None, None)
    hWnd = property(get_hWnd, None, None)

class IIdentify2(_esriCarto.IIdentify2):
    _IID = uuid.UUID('0483dc2f-8726-4640-98cd-5888ff1a4fa4')

    def __init__(self, *args, **kw):
        super(IIdentify2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Identify(self, pGeom, pTrackCancel):
        '''Method IIdentify2.Identify

           INPUTS
            pGeom               : IGeometry*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppArrObj            : IArray**'''
        return super(IIdentify2, self).Identify(pGeom, pTrackCancel)
    def put_Scale(self, _arg1):
        '''Method IIdentify2.put_Scale

           INPUT
            _arg1               : double'''
        return super(IIdentify2, self).put_Scale(_arg1)
    Scale = property(None, put_Scale, None)

class IIdentifyObject(_esriCarto.IIdentifyObject):
    _IID = uuid.UUID('ef0720ee-761e-4bed-a548-61596690e714')

    def __init__(self, *args, **kw):
        super(IIdentifyObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IIdentifyObject.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IIdentifyObject, self).get_Name()
    def put_Name(self, Name):
        '''Method IIdentifyObject.put_Name

           INPUT
            Name                : BSTR'''
        return super(IIdentifyObject, self).put_Name(Name)
    def get_PropertySet(self):
        '''Method IIdentifyObject.get_PropertySet

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IIdentifyObject, self).get_PropertySet()
    def putref_PropertySet(self, PropertySet):
        '''Method IIdentifyObject.putref_PropertySet

           INPUT
            PropertySet         : IPropertySet*'''
        return super(IIdentifyObject, self).putref_PropertySet(PropertySet)
    Name = property(get_Name, put_Name, None)
    PropertySet = property(get_PropertySet, putref_PropertySet, None)

class IIdentifyObjWindow(_esriCarto.IIdentifyObjWindow):
    _IID = uuid.UUID('702cf60d-fdcf-426a-bbb0-d3eaac17a634')
    def get_UseWindow(self):
        '''Method IIdentifyObjWindow.get_UseWindow

           OUTPUT
            UseWindow           : VARIANT_BOOL*'''
        return super(IIdentifyObjWindow, self).get_UseWindow()
    UseWindow = property(get_UseWindow, None, None)

class IIdentifyDisplay(_esriCarto.IIdentifyDisplay):
    _IID = uuid.UUID('25188498-8a07-49f1-9fae-3aefb14c1778')
    def IdentifyEx(self, pDisplay, pGeom, pTrackCancel):
        '''Method IIdentifyDisplay.IdentifyEx

           INPUTS
            pDisplay            : IDisplay*
            pGeom               : IGeometry*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppArrObj            : IArray**'''
        return super(IIdentifyDisplay, self).IdentifyEx(pDisplay, pGeom, pTrackCancel)

class ILegendGroups(_esriCarto.ILegendGroups):
    _IID = uuid.UUID('5115c4f3-e87b-45f3-9e11-0cde2aef2bef')
    def get_Count(self):
        '''Method ILegendGroups.get_Count

           OUTPUT
            Count               : long*'''
        return super(ILegendGroups, self).get_Count()
    def get_Element(self, Index):
        '''Method ILegendGroups.get_Element

           INPUT
            Index               : long

           OUTPUT
            LegendGroup         : ILegendGroup**'''
        return super(ILegendGroups, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ILegendGroups.Remove

           INPUT
            Index               : long'''
        return super(ILegendGroups, self).Remove(Index)
    def RemoveAll(self):
        '''Method ILegendGroups.RemoveAll'''
        return super(ILegendGroups, self).RemoveAll()
    def Add(self, LegendGroup):
        '''Method ILegendGroups.Add

           INPUT
            LegendGroup         : ILegendGroup*'''
        return super(ILegendGroups, self).Add(LegendGroup)
    def Insert(self, Index, LegendGroup):
        '''Method ILegendGroups.Insert

           INPUTS
            Index               : long
            LegendGroup         : ILegendGroup*'''
        return super(ILegendGroups, self).Insert(Index, LegendGroup)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ILegendClasses(_esriCarto.ILegendClasses):
    _IID = uuid.UUID('0314af0b-5f97-4be4-aa97-bc8eb1460e81')
    def get_Count(self):
        '''Method ILegendClasses.get_Count

           OUTPUT
            Count               : long*'''
        return super(ILegendClasses, self).get_Count()
    def get_Element(self, Index):
        '''Method ILegendClasses.get_Element

           INPUT
            Index               : long

           OUTPUT
            LegendClass         : ILegendClass**'''
        return super(ILegendClasses, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ILegendClasses.Remove

           INPUT
            Index               : long'''
        return super(ILegendClasses, self).Remove(Index)
    def RemoveAll(self):
        '''Method ILegendClasses.RemoveAll'''
        return super(ILegendClasses, self).RemoveAll()
    def Add(self, LegendClass):
        '''Method ILegendClasses.Add

           INPUT
            LegendClass         : ILegendClass*'''
        return super(ILegendClasses, self).Add(LegendClass)
    def Insert(self, Index, LegendClass):
        '''Method ILegendClasses.Insert

           INPUTS
            Index               : long
            LegendClass         : ILegendClass*'''
        return super(ILegendClasses, self).Insert(Index, LegendClass)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IFind(_esriCarto.IFind):
    _IID = uuid.UUID('9fe681e6-ba4e-4729-8301-8f15a1544140')
    def Find(self, Search, Contains, Fields, TrackCancel):
        '''Method IFind.Find

           INPUTS
            Search              : BSTR
            Contains            : VARIANT_BOOL
            Fields              : VARIANT
            TrackCancel         : ITrackCancel*

           OUTPUT
            ppArrObj            : IArray**'''
        return super(IFind, self).Find(Search, Contains, Fields, TrackCancel)
    def get_FindFields(self):
        '''Method IFind.get_FindFields

           OUTPUT
            Fields              : VARIANT*'''
        return super(IFind, self).get_FindFields()
    def get_FindDisplayField(self):
        '''Method IFind.get_FindDisplayField

           OUTPUT
            Field               : BSTR*'''
        return super(IFind, self).get_FindDisplayField()
    FindDisplayField = property(get_FindDisplayField, None, None)
    FindFields = property(get_FindFields, None, None)

class IFindObj(_esriCarto.IFindObj):
    _IID = uuid.UUID('fa4d443a-de20-4c9f-a576-7f466a85c961')

    def __init__(self, *args, **kw):
        super(IFindObj, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Value(self, Value):
        '''Method IFindObj.put_Value

           INPUT
            Value               : BSTR'''
        return super(IFindObj, self).put_Value(Value)
    def get_Value(self):
        '''Method IFindObj.get_Value

           OUTPUT
            Value               : BSTR*'''
        return super(IFindObj, self).get_Value()
    def put_FieldName(self, FieldName):
        '''Method IFindObj.put_FieldName

           INPUT
            FieldName           : BSTR'''
        return super(IFindObj, self).put_FieldName(FieldName)
    def get_FieldName(self):
        '''Method IFindObj.get_FieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IFindObj, self).get_FieldName()
    def put_LayerName(self, LayerName):
        '''Method IFindObj.put_LayerName

           INPUT
            LayerName           : BSTR'''
        return super(IFindObj, self).put_LayerName(LayerName)
    def get_LayerName(self):
        '''Method IFindObj.get_LayerName

           OUTPUT
            LayerName           : BSTR*'''
        return super(IFindObj, self).get_LayerName()
    FieldName = property(get_FieldName, put_FieldName, None)
    LayerName = property(get_LayerName, put_LayerName, None)
    Value = property(get_Value, put_Value, None)

class IFindObject(_esriCarto.IFindObject):
    _IID = uuid.UUID('66c47e6a-eb84-42e6-aeb9-686108f49c1c')

    def __init__(self, *args, **kw):
        super(IFindObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FID(self, FID):
        '''Method IFindObject.put_FID

           INPUT
            FID                 : long'''
        return super(IFindObject, self).put_FID(FID)
    def get_FID(self):
        '''Method IFindObject.get_FID

           OUTPUT
            FID                 : long*'''
        return super(IFindObject, self).get_FID()
    def put_Value(self, Value):
        '''Method IFindObj.put_Value (from IFindObj)

           INPUT
            Value               : BSTR'''
        return super(IFindObject, self).put_Value(Value)
    def get_Value(self):
        '''Method IFindObj.get_Value (from IFindObj)

           OUTPUT
            Value               : BSTR*'''
        return super(IFindObject, self).get_Value()
    def put_FieldName(self, FieldName):
        '''Method IFindObj.put_FieldName (from IFindObj)

           INPUT
            FieldName           : BSTR'''
        return super(IFindObject, self).put_FieldName(FieldName)
    def get_FieldName(self):
        '''Method IFindObj.get_FieldName (from IFindObj)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IFindObject, self).get_FieldName()
    def put_LayerName(self, LayerName):
        '''Method IFindObj.put_LayerName (from IFindObj)

           INPUT
            LayerName           : BSTR'''
        return super(IFindObject, self).put_LayerName(LayerName)
    def get_LayerName(self):
        '''Method IFindObj.get_LayerName (from IFindObj)

           OUTPUT
            LayerName           : BSTR*'''
        return super(IFindObject, self).get_LayerName()
    FID = property(get_FID, put_FID, None)
    FieldName = property(get_FieldName, put_FieldName, None)
    LayerName = property(get_LayerName, put_LayerName, None)
    Value = property(get_Value, put_Value, None)

class IRemoteFindObj(_esriCarto.IRemoteFindObj):
    _IID = uuid.UUID('50052f3b-0b42-47f1-87f7-b661a186105c')
    def Flash(self, pDisplay):
        '''Method IRemoteFindObj.Flash

           INPUT
            pDisplay            : IScreenDisplay*'''
        return super(IRemoteFindObj, self).Flash(pDisplay)
    def ZoomTo(self, pDisplay):
        '''Method IRemoteFindObj.ZoomTo

           INPUT
            pDisplay            : IScreenDisplay*'''
        return super(IRemoteFindObj, self).ZoomTo(pDisplay)
    def Identify(self, pDisplay, vIdentifyDialog):
        '''Method IRemoteFindObj.Identify

           INPUTS
            pDisplay            : IScreenDisplay*
            vIdentifyDialog     : VARIANT'''
        return super(IRemoteFindObj, self).Identify(pDisplay, vIdentifyDialog)
    def SetBookmark(self, pDisplay):
        '''Method IRemoteFindObj.SetBookmark

           INPUT
            pDisplay            : IScreenDisplay*'''
        return super(IRemoteFindObj, self).SetBookmark(pDisplay)
    def get_Selectable(self):
        '''Method IRemoteFindObj.get_Selectable

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IRemoteFindObj, self).get_Selectable()
    def Select(self, pDisplay):
        '''Method IRemoteFindObj.Select

           INPUT
            pDisplay            : IScreenDisplay*'''
        return super(IRemoteFindObj, self).Select(pDisplay)
    def Unselect(self, pDisplay):
        '''Method IRemoteFindObj.Unselect

           INPUT
            pDisplay            : IScreenDisplay*'''
        return super(IRemoteFindObj, self).Unselect(pDisplay)
    Selectable = property(get_Selectable, None, None)

class IGeoReference(_esriCarto.IGeoReference):
    _IID = uuid.UUID('e70e1cc1-e5c6-11d3-b9c5-00c0f0567a4a')
    def get_CanGeoRef(self):
        '''Method IGeoReference.get_CanGeoRef

           OUTPUT
            CanGeoRef           : VARIANT_BOOL*'''
        return super(IGeoReference, self).get_CanGeoRef()
    def Shift(self, deltaX, deltaY):
        '''Method IGeoReference.Shift

           INPUTS
            deltaX              : double
            deltaY              : double'''
        return super(IGeoReference, self).Shift(deltaX, deltaY)
    def ReScale(self, xScale, yScale):
        '''Method IGeoReference.ReScale

           INPUTS
            xScale              : double
            yScale              : double'''
        return super(IGeoReference, self).ReScale(xScale, yScale)
    def Flip(self):
        '''Method IGeoReference.Flip'''
        return super(IGeoReference, self).Flip()
    def Mirror(self):
        '''Method IGeoReference.Mirror'''
        return super(IGeoReference, self).Mirror()
    def Rotate(self, ipPivotPoint, Angle):
        '''Method IGeoReference.Rotate

           INPUTS
            ipPivotPoint        : IPoint*
            Angle               : double'''
        return super(IGeoReference, self).Rotate(ipPivotPoint, Angle)
    def PointsTransform(self, inPoints, isForward):
        '''Method IGeoReference.PointsTransform

           INPUTS
            inPoints            : IPointCollection*
            isForward           : VARIANT_BOOL

           OUTPUT
            outPoints           : IPointCollection**'''
        return super(IGeoReference, self).PointsTransform(inPoints, isForward)
    def TwoPointsAdjust(self, fromPoints, toPoints):
        '''Method IGeoReference.TwoPointsAdjust

           INPUTS
            fromPoints          : IPointCollection*
            toPoints            : IPointCollection*'''
        return super(IGeoReference, self).TwoPointsAdjust(fromPoints, toPoints)
    def Warp(self, fromPoints, toPoints, order):
        '''Method IGeoReference.Warp

           INPUTS
            fromPoints          : IPointCollection*
            toPoints            : IPointCollection*
            order               : long'''
        return super(IGeoReference, self).Warp(fromPoints, toPoints, order)
    def Reset(self):
        '''Method IGeoReference.Reset'''
        return super(IGeoReference, self).Reset()
    def Register(self):
        '''Method IGeoReference.Register'''
        return super(IGeoReference, self).Register()
    def Rectify(self, fullpath, Format):
        '''Method IGeoReference.Rectify

           INPUTS
            fullpath            : BSTR
            Format              : BSTR'''
        return super(IGeoReference, self).Rectify(fullpath, Format)
    def GetOutputName(self, Filter, Name):
        '''Method IGeoReference.GetOutputName

           INPUTS
            Filter              : IUnknown*
            Name                : BSTR

           OUTPUT
            FullName            : BSTR*'''
        return super(IGeoReference, self).GetOutputName(Filter, Name)
    def GetOutputFormat(self, Filter):
        '''Method IGeoReference.GetOutputFormat

           INPUT
            Filter              : IUnknown*

           OUTPUT
            outputFormat        : BSTR*'''
        return super(IGeoReference, self).GetOutputFormat(Filter)
    def SetOutputFormatFilters(self, outputFormatFilters):
        '''Method IGeoReference.SetOutputFormatFilters

           INPUT
            outputFormatFilters : IUnknown*'''
        return super(IGeoReference, self).SetOutputFormatFilters(outputFormatFilters)
    CanGeoRef = property(get_CanGeoRef, None, None)

class IGeoRefSaveAsDlg(_esriCarto.IGeoRefSaveAsDlg):
    _IID = uuid.UUID('6c0b842c-feb1-4380-9211-caf87e732030')
    def CanSaveAs(self, pLayer):
        '''Method IGeoRefSaveAsDlg.CanSaveAs

           INPUT
            pLayer              : ILayer*

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IGeoRefSaveAsDlg, self).CanSaveAs(pLayer)
    def DoSaveAs(self, pLayer):
        '''Method IGeoRefSaveAsDlg.DoSaveAs

           INPUT
            pLayer              : ILayer*'''
        return super(IGeoRefSaveAsDlg, self).DoSaveAs(pLayer)

class IPatch(_esriCarto.IPatch):
    _IID = uuid.UUID('beb4edb5-e3b4-11d2-b868-00600802e603')

    def __init__(self, *args, **kw):
        super(IPatch, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IPatch.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IPatch, self).get_Name()
    def put_Name(self, Name):
        '''Method IPatch.put_Name

           INPUT
            Name                : BSTR'''
        return super(IPatch, self).put_Name(Name)
    def get_PreserveAspectRatio(self):
        '''Method IPatch.get_PreserveAspectRatio

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPatch, self).get_PreserveAspectRatio()
    def put_PreserveAspectRatio(self, flag):
        '''Method IPatch.put_PreserveAspectRatio

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IPatch, self).put_PreserveAspectRatio(flag)
    def put_Geometry(self, _arg1):
        '''Method IPatch.put_Geometry

           INPUT
            _arg1               : IGeometry*'''
        return super(IPatch, self).put_Geometry(_arg1)
    def get_Geometry(self, Bounds):
        '''Method IPatch.get_Geometry

           INPUT
            Bounds              : IEnvelope*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IPatch, self).get_Geometry(Bounds)
    Geometry = property(None, put_Geometry, None)
    Name = property(get_Name, put_Name, None)
    PreserveAspectRatio = property(get_PreserveAspectRatio, put_PreserveAspectRatio, None)
    Geometry = IndexProperty(get_Geometry, None)

class ILegendFormat2(_esriCarto.ILegendFormat2):
    _IID = uuid.UUID('9189da4d-05a6-4746-86b5-4d214b742147')

    def __init__(self, *args, **kw):
        super(ILegendFormat2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowTitle(self):
        '''Method ILegendFormat2.get_ShowTitle

           OUTPUT
            ShowTitle           : VARIANT_BOOL*'''
        return super(ILegendFormat2, self).get_ShowTitle()
    def put_ShowTitle(self, ShowTitle):
        '''Method ILegendFormat2.put_ShowTitle

           INPUT
            ShowTitle           : VARIANT_BOOL'''
        return super(ILegendFormat2, self).put_ShowTitle(ShowTitle)
    def get_TitleSymbol(self):
        '''Method ILegendFormat2.get_TitleSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendFormat2, self).get_TitleSymbol()
    def put_TitleSymbol(self, Symbol):
        '''Method ILegendFormat2.put_TitleSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendFormat2, self).put_TitleSymbol(Symbol)
    def get_TitlePosition(self):
        '''Method ILegendFormat2.get_TitlePosition

           OUTPUT
            pos                 : esriRectanglePosition*'''
        return super(ILegendFormat2, self).get_TitlePosition()
    def put_TitlePosition(self, pos):
        '''Method ILegendFormat2.put_TitlePosition

           INPUT
            pos                 : esriRectanglePosition'''
        return super(ILegendFormat2, self).put_TitlePosition(pos)
    def get_TitleGap(self):
        '''Method ILegendFormat2.get_TitleGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_TitleGap()
    def put_TitleGap(self, Gap):
        '''Method ILegendFormat2.put_TitleGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_TitleGap(Gap)
    def get_VerticalItemGap(self):
        '''Method ILegendFormat2.get_VerticalItemGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_VerticalItemGap()
    def put_VerticalItemGap(self, Gap):
        '''Method ILegendFormat2.put_VerticalItemGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_VerticalItemGap(Gap)
    def get_HorizontalItemGap(self):
        '''Method ILegendFormat2.get_HorizontalItemGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_HorizontalItemGap()
    def put_HorizontalItemGap(self, Gap):
        '''Method ILegendFormat2.put_HorizontalItemGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_HorizontalItemGap(Gap)
    def get_LayerNameGap(self):
        '''Method ILegendFormat2.get_LayerNameGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_LayerNameGap()
    def put_LayerNameGap(self, Gap):
        '''Method ILegendFormat2.put_LayerNameGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_LayerNameGap(Gap)
    def get_GroupGap(self):
        '''Method ILegendFormat2.get_GroupGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_GroupGap()
    def put_GroupGap(self, Gap):
        '''Method ILegendFormat2.put_GroupGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_GroupGap(Gap)
    def get_HeadingGap(self):
        '''Method ILegendFormat2.get_HeadingGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_HeadingGap()
    def put_HeadingGap(self, Gap):
        '''Method ILegendFormat2.put_HeadingGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_HeadingGap(Gap)
    def get_TextGap(self):
        '''Method ILegendFormat2.get_TextGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_TextGap()
    def put_TextGap(self, Gap):
        '''Method ILegendFormat2.put_TextGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_TextGap(Gap)
    def get_VerticalPatchGap(self):
        '''Method ILegendFormat2.get_VerticalPatchGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_VerticalPatchGap()
    def put_VerticalPatchGap(self, Gap):
        '''Method ILegendFormat2.put_VerticalPatchGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_VerticalPatchGap(Gap)
    def get_HorizontalPatchGap(self):
        '''Method ILegendFormat2.get_HorizontalPatchGap

           OUTPUT
            Gap                 : double*'''
        return super(ILegendFormat2, self).get_HorizontalPatchGap()
    def put_HorizontalPatchGap(self, Gap):
        '''Method ILegendFormat2.put_HorizontalPatchGap

           INPUT
            Gap                 : double'''
        return super(ILegendFormat2, self).put_HorizontalPatchGap(Gap)
    def get_DefaultPatchWidth(self):
        '''Method ILegendFormat2.get_DefaultPatchWidth

           OUTPUT
            Width               : double*'''
        return super(ILegendFormat2, self).get_DefaultPatchWidth()
    def put_DefaultPatchWidth(self, Width):
        '''Method ILegendFormat2.put_DefaultPatchWidth

           INPUT
            Width               : double'''
        return super(ILegendFormat2, self).put_DefaultPatchWidth(Width)
    def get_DefaultPatchHeight(self):
        '''Method ILegendFormat2.get_DefaultPatchHeight

           OUTPUT
            Height              : double*'''
        return super(ILegendFormat2, self).get_DefaultPatchHeight()
    def put_DefaultPatchHeight(self, Height):
        '''Method ILegendFormat2.put_DefaultPatchHeight

           INPUT
            Height              : double'''
        return super(ILegendFormat2, self).put_DefaultPatchHeight(Height)
    def get_DefaultLinePatch(self):
        '''Method ILegendFormat2.get_DefaultLinePatch

           OUTPUT
            patch               : ILinePatch**'''
        return super(ILegendFormat2, self).get_DefaultLinePatch()
    def put_DefaultLinePatch(self, patch):
        '''Method ILegendFormat2.put_DefaultLinePatch

           INPUT
            patch               : ILinePatch*'''
        return super(ILegendFormat2, self).put_DefaultLinePatch(patch)
    def get_DefaultAreaPatch(self):
        '''Method ILegendFormat2.get_DefaultAreaPatch

           OUTPUT
            patch               : IAreaPatch**'''
        return super(ILegendFormat2, self).get_DefaultAreaPatch()
    def put_DefaultAreaPatch(self, patch):
        '''Method ILegendFormat2.put_DefaultAreaPatch

           INPUT
            patch               : IAreaPatch*'''
        return super(ILegendFormat2, self).put_DefaultAreaPatch(patch)
    def Scale(self, xScale, yScale):
        '''Method ILegendFormat2.Scale

           INPUTS
            xScale              : double
            yScale              : double'''
        return super(ILegendFormat2, self).Scale(xScale, yScale)
    def get_LabelWidth(self):
        '''Method ILegendFormat2.get_LabelWidth

           OUTPUT
            Width               : double*'''
        return super(ILegendFormat2, self).get_LabelWidth()
    def put_LabelWidth(self, Width):
        '''Method ILegendFormat2.put_LabelWidth

           INPUT
            Width               : double'''
        return super(ILegendFormat2, self).put_LabelWidth(Width)
    def get_DescriptionWidth(self):
        '''Method ILegendFormat2.get_DescriptionWidth

           OUTPUT
            Width               : double*'''
        return super(ILegendFormat2, self).get_DescriptionWidth()
    def put_DescriptionWidth(self, Width):
        '''Method ILegendFormat2.put_DescriptionWidth

           INPUT
            Width               : double'''
        return super(ILegendFormat2, self).put_DescriptionWidth(Width)
    DefaultAreaPatch = property(get_DefaultAreaPatch, put_DefaultAreaPatch, None)
    DefaultLinePatch = property(get_DefaultLinePatch, put_DefaultLinePatch, None)
    DefaultPatchHeight = property(get_DefaultPatchHeight, put_DefaultPatchHeight, None)
    DefaultPatchWidth = property(get_DefaultPatchWidth, put_DefaultPatchWidth, None)
    DescriptionWidth = property(get_DescriptionWidth, put_DescriptionWidth, None)
    GroupGap = property(get_GroupGap, put_GroupGap, None)
    HeadingGap = property(get_HeadingGap, put_HeadingGap, None)
    HorizontalItemGap = property(get_HorizontalItemGap, put_HorizontalItemGap, None)
    HorizontalPatchGap = property(get_HorizontalPatchGap, put_HorizontalPatchGap, None)
    LabelWidth = property(get_LabelWidth, put_LabelWidth, None)
    LayerNameGap = property(get_LayerNameGap, put_LayerNameGap, None)
    ShowTitle = property(get_ShowTitle, put_ShowTitle, None)
    TextGap = property(get_TextGap, put_TextGap, None)
    TitleGap = property(get_TitleGap, put_TitleGap, None)
    TitlePosition = property(get_TitlePosition, put_TitlePosition, None)
    TitleSymbol = property(get_TitleSymbol, put_TitleSymbol, None)
    VerticalItemGap = property(get_VerticalItemGap, put_VerticalItemGap, None)
    VerticalPatchGap = property(get_VerticalPatchGap, put_VerticalPatchGap, None)

class ILegendLayout(_esriCarto.ILegendLayout):
    _IID = uuid.UUID('a7e5770d-ec6a-11d2-b86e-00600802e603')

    def __init__(self, *args, **kw):
        super(ILegendLayout, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ScaleGraphicsOnResize(self, ScaleGraphicsOnResize):
        '''Method ILegendLayout.put_ScaleGraphicsOnResize

           INPUT
            ScaleGraphicsOnResize: VARIANT_BOOL'''
        return super(ILegendLayout, self).put_ScaleGraphicsOnResize(ScaleGraphicsOnResize)
    def get_ScaleGraphicsOnResize(self):
        '''Method ILegendLayout.get_ScaleGraphicsOnResize

           OUTPUT
            ScaleGraphicsOnResize: VARIANT_BOOL*'''
        return super(ILegendLayout, self).get_ScaleGraphicsOnResize()
    ScaleGraphicsOnResize = property(get_ScaleGraphicsOnResize, put_ScaleGraphicsOnResize, None)

class IDynamicLegendItem(_esriCarto.IDynamicLegendItem):
    _IID = uuid.UUID('815e4b50-152a-4b7b-b3e8-4778c59dc699')

    def __init__(self, *args, **kw):
        super(IDynamicLegendItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AutoVisibility(self):
        '''Method IDynamicLegendItem.get_AutoVisibility

           OUTPUT
            AutoVisibility      : VARIANT_BOOL*'''
        return super(IDynamicLegendItem, self).get_AutoVisibility()
    def put_AutoVisibility(self, AutoVisibility):
        '''Method IDynamicLegendItem.put_AutoVisibility

           INPUT
            AutoVisibility      : VARIANT_BOOL'''
        return super(IDynamicLegendItem, self).put_AutoVisibility(AutoVisibility)
    def get_UseSimpleExtent(self):
        '''Method IDynamicLegendItem.get_UseSimpleExtent

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IDynamicLegendItem, self).get_UseSimpleExtent()
    def put_UseSimpleExtent(self, flag):
        '''Method IDynamicLegendItem.put_UseSimpleExtent

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IDynamicLegendItem, self).put_UseSimpleExtent(flag)
    def get_ShowCounts(self):
        '''Method IDynamicLegendItem.get_ShowCounts

           OUTPUT
            AutoVisibility      : VARIANT_BOOL*'''
        return super(IDynamicLegendItem, self).get_ShowCounts()
    def put_ShowCounts(self, AutoVisibility):
        '''Method IDynamicLegendItem.put_ShowCounts

           INPUT
            AutoVisibility      : VARIANT_BOOL'''
        return super(IDynamicLegendItem, self).put_ShowCounts(AutoVisibility)
    def get_CountPrefix(self):
        '''Method IDynamicLegendItem.get_CountPrefix

           OUTPUT
            str                 : BSTR*'''
        return super(IDynamicLegendItem, self).get_CountPrefix()
    def put_CountSuffix(self, str):
        '''Method IDynamicLegendItem.put_CountSuffix

           INPUT
            str                 : BSTR'''
        return super(IDynamicLegendItem, self).put_CountSuffix(str)
    def get_CountSuffix(self):
        '''Method IDynamicLegendItem.get_CountSuffix

           OUTPUT
            str                 : BSTR*'''
        return super(IDynamicLegendItem, self).get_CountSuffix()
    def put_CountPrefix(self, str):
        '''Method IDynamicLegendItem.put_CountPrefix

           INPUT
            str                 : BSTR'''
        return super(IDynamicLegendItem, self).put_CountPrefix(str)
    def get_CountNumberFormat(self):
        '''Method IDynamicLegendItem.get_CountNumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IDynamicLegendItem, self).get_CountNumberFormat()
    def putref_CountNumberFormat(self, Format):
        '''Method IDynamicLegendItem.putref_CountNumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IDynamicLegendItem, self).putref_CountNumberFormat(Format)
    AutoVisibility = property(get_AutoVisibility, put_AutoVisibility, None)
    CountNumberFormat = property(get_CountNumberFormat, putref_CountNumberFormat, None)
    CountPrefix = property(get_CountPrefix, put_CountPrefix, None)
    CountSuffix = property(get_CountSuffix, put_CountSuffix, None)
    ShowCounts = property(get_ShowCounts, put_ShowCounts, None)
    UseSimpleExtent = property(get_UseSimpleExtent, put_UseSimpleExtent, None)

class ILegendItem2(_esriCarto.ILegendItem2):
    _IID = uuid.UUID('7d23f970-d5a6-4c1c-8618-3cc7b5839efa')

    def __init__(self, *args, **kw):
        super(ILegendItem2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILegendItem2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILegendItem2, self).get_Name()
    def get_CanDisplay(self, Layer):
        '''Method ILegendItem2.get_CanDisplay

           INPUT
            Layer               : ILayer*

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ILegendItem2, self).get_CanDisplay(Layer)
    def get_Layer(self):
        '''Method ILegendItem2.get_Layer

           OUTPUT
            Layer               : ILayer**'''
        return super(ILegendItem2, self).get_Layer()
    def putref_Layer(self, Layer):
        '''Method ILegendItem2.putref_Layer

           INPUT
            Layer               : ILayer*'''
        return super(ILegendItem2, self).putref_Layer(Layer)
    def get_NewColumn(self):
        '''Method ILegendItem2.get_NewColumn

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegendItem2, self).get_NewColumn()
    def put_NewColumn(self, flag):
        '''Method ILegendItem2.put_NewColumn

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegendItem2, self).put_NewColumn(flag)
    def get_Columns(self):
        '''Method ILegendItem2.get_Columns

           OUTPUT
            Columns             : short*'''
        return super(ILegendItem2, self).get_Columns()
    def put_Columns(self, Columns):
        '''Method ILegendItem2.put_Columns

           INPUT
            Columns             : short'''
        return super(ILegendItem2, self).put_Columns(Columns)
    def get_KeepTogether(self):
        '''Method ILegendItem2.get_KeepTogether

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegendItem2, self).get_KeepTogether()
    def put_KeepTogether(self, flag):
        '''Method ILegendItem2.put_KeepTogether

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegendItem2, self).put_KeepTogether(flag)
    def get_ShowLayerName(self):
        '''Method ILegendItem2.get_ShowLayerName

           OUTPUT
            ShowLayerName       : VARIANT_BOOL*'''
        return super(ILegendItem2, self).get_ShowLayerName()
    def put_ShowLayerName(self, ShowLayerName):
        '''Method ILegendItem2.put_ShowLayerName

           INPUT
            ShowLayerName       : VARIANT_BOOL'''
        return super(ILegendItem2, self).put_ShowLayerName(ShowLayerName)
    def get_LayerNameSymbol(self):
        '''Method ILegendItem2.get_LayerNameSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendItem2, self).get_LayerNameSymbol()
    def put_LayerNameSymbol(self, Symbol):
        '''Method ILegendItem2.put_LayerNameSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendItem2, self).put_LayerNameSymbol(Symbol)
    def get_GroupIndex(self):
        '''Method ILegendItem2.get_GroupIndex

           OUTPUT
            Index               : long*'''
        return super(ILegendItem2, self).get_GroupIndex()
    def put_GroupIndex(self, Index):
        '''Method ILegendItem2.put_GroupIndex

           INPUT
            Index               : long'''
        return super(ILegendItem2, self).put_GroupIndex(Index)
    def get_ShowHeading(self):
        '''Method ILegendItem2.get_ShowHeading

           OUTPUT
            ShowHeading         : VARIANT_BOOL*'''
        return super(ILegendItem2, self).get_ShowHeading()
    def put_ShowHeading(self, ShowHeading):
        '''Method ILegendItem2.put_ShowHeading

           INPUT
            ShowHeading         : VARIANT_BOOL'''
        return super(ILegendItem2, self).put_ShowHeading(ShowHeading)
    def get_HeadingSymbol(self):
        '''Method ILegendItem2.get_HeadingSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendItem2, self).get_HeadingSymbol()
    def put_HeadingSymbol(self, Symbol):
        '''Method ILegendItem2.put_HeadingSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendItem2, self).put_HeadingSymbol(Symbol)
    def get_LegendClassFormat(self):
        '''Method ILegendItem2.get_LegendClassFormat

           OUTPUT
            Format              : ILegendClassFormat**'''
        return super(ILegendItem2, self).get_LegendClassFormat()
    def put_LegendClassFormat(self, Format):
        '''Method ILegendItem2.put_LegendClassFormat

           INPUT
            Format              : ILegendClassFormat*'''
        return super(ILegendItem2, self).put_LegendClassFormat(Format)
    def get_ShowLabels(self):
        '''Method ILegendItem2.get_ShowLabels

           OUTPUT
            ShowLabels          : VARIANT_BOOL*'''
        return super(ILegendItem2, self).get_ShowLabels()
    def put_ShowLabels(self, ShowLabels):
        '''Method ILegendItem2.put_ShowLabels

           INPUT
            ShowLabels          : VARIANT_BOOL'''
        return super(ILegendItem2, self).put_ShowLabels(ShowLabels)
    def get_ShowDescriptions(self):
        '''Method ILegendItem2.get_ShowDescriptions

           OUTPUT
            ShowDescriptions    : VARIANT_BOOL*'''
        return super(ILegendItem2, self).get_ShowDescriptions()
    def put_ShowDescriptions(self, ShowDescriptions):
        '''Method ILegendItem2.put_ShowDescriptions

           INPUT
            ShowDescriptions    : VARIANT_BOOL'''
        return super(ILegendItem2, self).put_ShowDescriptions(ShowDescriptions)
    def CreateGraphics(self, Display, LegendFormat):
        '''Method ILegendItem2.CreateGraphics

           INPUTS
            Display             : IDisplay*
            LegendFormat        : ILegendFormat*'''
        return super(ILegendItem2, self).CreateGraphics(Display, LegendFormat)
    def get_Width(self):
        '''Method ILegendItem2.get_Width

           OUTPUT
            Width               : double*'''
        return super(ILegendItem2, self).get_Width()
    def get_Height(self):
        '''Method ILegendItem2.get_Height

           OUTPUT
            Height              : double*'''
        return super(ILegendItem2, self).get_Height()
    def get_Graphics(self):
        '''Method ILegendItem2.get_Graphics

           OUTPUT
            Graphics            : IEnumElement**'''
        return super(ILegendItem2, self).get_Graphics()
    def ChangeFlowDirection(self, RightToLeft):
        '''Method ILegendItem2.ChangeFlowDirection

           INPUT
            RightToLeft         : VARIANT_BOOL'''
        return super(ILegendItem2, self).ChangeFlowDirection(RightToLeft)
    Columns = property(get_Columns, put_Columns, None)
    Graphics = property(get_Graphics, None, None)
    GroupIndex = property(get_GroupIndex, put_GroupIndex, None)
    HeadingSymbol = property(get_HeadingSymbol, put_HeadingSymbol, None)
    Height = property(get_Height, None, None)
    KeepTogether = property(get_KeepTogether, put_KeepTogether, None)
    Layer = property(get_Layer, putref_Layer, None)
    LayerNameSymbol = property(get_LayerNameSymbol, put_LayerNameSymbol, None)
    LegendClassFormat = property(get_LegendClassFormat, put_LegendClassFormat, None)
    Name = property(get_Name, None, None)
    NewColumn = property(get_NewColumn, put_NewColumn, None)
    ShowDescriptions = property(get_ShowDescriptions, put_ShowDescriptions, None)
    ShowHeading = property(get_ShowHeading, put_ShowHeading, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    ShowLayerName = property(get_ShowLayerName, put_ShowLayerName, None)
    Width = property(get_Width, None, None)
    CanDisplay = IndexProperty(get_CanDisplay, None)

class ILegendItem3(_esriCarto.ILegendItem3):
    _IID = uuid.UUID('1dc64b35-9613-4007-bec5-3ad4f1b9dfb7')

    def __init__(self, *args, **kw):
        super(ILegendItem3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILegendItem3.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILegendItem3, self).get_Name()
    def get_CanDisplay(self, Layer):
        '''Method ILegendItem3.get_CanDisplay

           INPUT
            Layer               : ILayer*

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ILegendItem3, self).get_CanDisplay(Layer)
    def get_Layer(self):
        '''Method ILegendItem3.get_Layer

           OUTPUT
            Layer               : ILayer**'''
        return super(ILegendItem3, self).get_Layer()
    def putref_Layer(self, Layer):
        '''Method ILegendItem3.putref_Layer

           INPUT
            Layer               : ILayer*'''
        return super(ILegendItem3, self).putref_Layer(Layer)
    def get_NewColumn(self):
        '''Method ILegendItem3.get_NewColumn

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegendItem3, self).get_NewColumn()
    def put_NewColumn(self, flag):
        '''Method ILegendItem3.put_NewColumn

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegendItem3, self).put_NewColumn(flag)
    def get_Columns(self):
        '''Method ILegendItem3.get_Columns

           OUTPUT
            Columns             : short*'''
        return super(ILegendItem3, self).get_Columns()
    def put_Columns(self, Columns):
        '''Method ILegendItem3.put_Columns

           INPUT
            Columns             : short'''
        return super(ILegendItem3, self).put_Columns(Columns)
    def get_KeepTogether(self):
        '''Method ILegendItem3.get_KeepTogether

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegendItem3, self).get_KeepTogether()
    def put_KeepTogether(self, flag):
        '''Method ILegendItem3.put_KeepTogether

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegendItem3, self).put_KeepTogether(flag)
    def get_ShowLayerName(self):
        '''Method ILegendItem3.get_ShowLayerName

           OUTPUT
            ShowLayerName       : VARIANT_BOOL*'''
        return super(ILegendItem3, self).get_ShowLayerName()
    def put_ShowLayerName(self, ShowLayerName):
        '''Method ILegendItem3.put_ShowLayerName

           INPUT
            ShowLayerName       : VARIANT_BOOL'''
        return super(ILegendItem3, self).put_ShowLayerName(ShowLayerName)
    def get_LayerNameSymbol(self):
        '''Method ILegendItem3.get_LayerNameSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendItem3, self).get_LayerNameSymbol()
    def put_LayerNameSymbol(self, Symbol):
        '''Method ILegendItem3.put_LayerNameSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendItem3, self).put_LayerNameSymbol(Symbol)
    def get_GroupIndex(self):
        '''Method ILegendItem3.get_GroupIndex

           OUTPUT
            Index               : long*'''
        return super(ILegendItem3, self).get_GroupIndex()
    def put_GroupIndex(self, Index):
        '''Method ILegendItem3.put_GroupIndex

           INPUT
            Index               : long'''
        return super(ILegendItem3, self).put_GroupIndex(Index)
    def get_ShowHeading(self):
        '''Method ILegendItem3.get_ShowHeading

           OUTPUT
            ShowHeading         : VARIANT_BOOL*'''
        return super(ILegendItem3, self).get_ShowHeading()
    def put_ShowHeading(self, ShowHeading):
        '''Method ILegendItem3.put_ShowHeading

           INPUT
            ShowHeading         : VARIANT_BOOL'''
        return super(ILegendItem3, self).put_ShowHeading(ShowHeading)
    def get_HeadingSymbol(self):
        '''Method ILegendItem3.get_HeadingSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ILegendItem3, self).get_HeadingSymbol()
    def put_HeadingSymbol(self, Symbol):
        '''Method ILegendItem3.put_HeadingSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ILegendItem3, self).put_HeadingSymbol(Symbol)
    def get_LegendClassFormat(self):
        '''Method ILegendItem3.get_LegendClassFormat

           OUTPUT
            Format              : ILegendClassFormat**'''
        return super(ILegendItem3, self).get_LegendClassFormat()
    def put_LegendClassFormat(self, Format):
        '''Method ILegendItem3.put_LegendClassFormat

           INPUT
            Format              : ILegendClassFormat*'''
        return super(ILegendItem3, self).put_LegendClassFormat(Format)
    def get_ShowLabels(self):
        '''Method ILegendItem3.get_ShowLabels

           OUTPUT
            ShowLabels          : VARIANT_BOOL*'''
        return super(ILegendItem3, self).get_ShowLabels()
    def put_ShowLabels(self, ShowLabels):
        '''Method ILegendItem3.put_ShowLabels

           INPUT
            ShowLabels          : VARIANT_BOOL'''
        return super(ILegendItem3, self).put_ShowLabels(ShowLabels)
    def get_ShowDescriptions(self):
        '''Method ILegendItem3.get_ShowDescriptions

           OUTPUT
            ShowDescriptions    : VARIANT_BOOL*'''
        return super(ILegendItem3, self).get_ShowDescriptions()
    def put_ShowDescriptions(self, ShowDescriptions):
        '''Method ILegendItem3.put_ShowDescriptions

           INPUT
            ShowDescriptions    : VARIANT_BOOL'''
        return super(ILegendItem3, self).put_ShowDescriptions(ShowDescriptions)
    def CreateGraphics(self, Display, LegendFormat):
        '''Method ILegendItem3.CreateGraphics

           INPUTS
            Display             : IDisplay*
            LegendFormat        : ILegendFormat*'''
        return super(ILegendItem3, self).CreateGraphics(Display, LegendFormat)
    def get_Width(self):
        '''Method ILegendItem3.get_Width

           OUTPUT
            Width               : double*'''
        return super(ILegendItem3, self).get_Width()
    def get_Height(self):
        '''Method ILegendItem3.get_Height

           OUTPUT
            Height              : double*'''
        return super(ILegendItem3, self).get_Height()
    def get_Graphics(self):
        '''Method ILegendItem3.get_Graphics

           OUTPUT
            Graphics            : IEnumElement**'''
        return super(ILegendItem3, self).get_Graphics()
    def ChangeFlowDirection(self, RightToLeft):
        '''Method ILegendItem3.ChangeFlowDirection

           INPUT
            RightToLeft         : VARIANT_BOOL'''
        return super(ILegendItem3, self).ChangeFlowDirection(RightToLeft)
    def get_ReferenceScaleRatio(self):
        '''Method ILegendItem3.get_ReferenceScaleRatio

           OUTPUT
            ratio               : double*'''
        return super(ILegendItem3, self).get_ReferenceScaleRatio()
    def put_ReferenceScaleRatio(self, ratio):
        '''Method ILegendItem3.put_ReferenceScaleRatio

           INPUT
            ratio               : double'''
        return super(ILegendItem3, self).put_ReferenceScaleRatio(ratio)
    Columns = property(get_Columns, put_Columns, None)
    Graphics = property(get_Graphics, None, None)
    GroupIndex = property(get_GroupIndex, put_GroupIndex, None)
    HeadingSymbol = property(get_HeadingSymbol, put_HeadingSymbol, None)
    Height = property(get_Height, None, None)
    KeepTogether = property(get_KeepTogether, put_KeepTogether, None)
    Layer = property(get_Layer, putref_Layer, None)
    LayerNameSymbol = property(get_LayerNameSymbol, put_LayerNameSymbol, None)
    LegendClassFormat = property(get_LegendClassFormat, put_LegendClassFormat, None)
    Name = property(get_Name, None, None)
    NewColumn = property(get_NewColumn, put_NewColumn, None)
    ReferenceScaleRatio = property(get_ReferenceScaleRatio, put_ReferenceScaleRatio, None)
    ShowDescriptions = property(get_ShowDescriptions, put_ShowDescriptions, None)
    ShowHeading = property(get_ShowHeading, put_ShowHeading, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    ShowLayerName = property(get_ShowLayerName, put_ShowLayerName, None)
    Width = property(get_Width, None, None)
    CanDisplay = IndexProperty(get_CanDisplay, None)

class IDynamicLegendClass(_esriCarto.IDynamicLegendClass):
    _IID = uuid.UUID('19479dcb-5ec5-4f51-82ac-8083ee14ba23')

    def __init__(self, *args, **kw):
        super(IDynamicLegendClass, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IDynamicLegendClass.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDynamicLegendClass, self).get_Count()
    def put_Count(self, Count):
        '''Method IDynamicLegendClass.put_Count

           INPUT
            Count               : long'''
        return super(IDynamicLegendClass, self).put_Count(Count)
    Count = property(get_Count, put_Count, None)

class IDynamicLegendLayer(_esriCarto.IDynamicLegendLayer):
    _IID = uuid.UUID('34b10157-671f-4ec2-8a75-a2f3710e5dcf')
    def get_IsDynamicLegendInfoDirty(self):
        '''Method IDynamicLegendLayer.get_IsDynamicLegendInfoDirty

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IDynamicLegendLayer, self).get_IsDynamicLegendInfoDirty()
    def RefreshDynamicLegendInfo(self):
        '''Method IDynamicLegendLayer.RefreshDynamicLegendInfo'''
        return super(IDynamicLegendLayer, self).RefreshDynamicLegendInfo()
    def InstrumentedDraw(self, Type, pMapDisplay, MapExtent, TrackCancel):
        '''Method IDynamicLegendLayer.InstrumentedDraw

           INPUTS
            Type                : esriDynamicLegendType
            pMapDisplay         : IDisplay*
            MapExtent           : IGeometry*
            TrackCancel         : ITrackCancel*'''
        return super(IDynamicLegendLayer, self).InstrumentedDraw(Type, pMapDisplay, MapExtent, TrackCancel)
    IsDynamicLegendInfoDirty = property(get_IsDynamicLegendInfoDirty, None, None)

class IDynamicLegendRenderer(_esriCarto.IDynamicLegendRenderer):
    _IID = uuid.UUID('34b10158-671f-4ec2-8a75-a2f3710e5dcf')
    def get_SupportsCounts(self):
        '''Method IDynamicLegendRenderer.get_SupportsCounts

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IDynamicLegendRenderer, self).get_SupportsCounts()
    def get_InstrumentedDrawPhases(self):
        '''Method IDynamicLegendRenderer.get_InstrumentedDrawPhases

           OUTPUT
            drawPhases          : long*'''
        return super(IDynamicLegendRenderer, self).get_InstrumentedDrawPhases()
    def StartInstrumentedDraw(self, Type, mapDisplay, visibleArea):
        '''Method IDynamicLegendRenderer.StartInstrumentedDraw

           INPUTS
            Type                : esriDynamicLegendType
            mapDisplay          : IDisplay*
            visibleArea         : IGeometry*'''
        return super(IDynamicLegendRenderer, self).StartInstrumentedDraw(Type, mapDisplay, visibleArea)
    def FinishInstrumentedDraw(self):
        '''Method IDynamicLegendRenderer.FinishInstrumentedDraw'''
        return super(IDynamicLegendRenderer, self).FinishInstrumentedDraw()
    InstrumentedDrawPhases = property(get_InstrumentedDrawPhases, None, None)
    SupportsCounts = property(get_SupportsCounts, None, None)

class IBorder(_esriCarto.IBorder):
    _IID = uuid.UUID('e4240307-dd41-11d2-b868-00600802e603')

    def __init__(self, *args, **kw):
        super(IBorder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IBorder.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IBorder, self).get_Name()
    def put_Name(self, Name):
        '''Method IBorder.put_Name

           INPUT
            Name                : BSTR'''
        return super(IBorder, self).put_Name(Name)
    def get_Gap(self):
        '''Method IBorder.get_Gap

           OUTPUT
            Gap                 : double*'''
        return super(IBorder, self).get_Gap()
    def put_Gap(self, Gap):
        '''Method IBorder.put_Gap

           INPUT
            Gap                 : double'''
        return super(IBorder, self).put_Gap(Gap)
    def QueryBounds(self, Display, Geometry, Bounds):
        '''Method IBorder.QueryBounds

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*
            Bounds              : IEnvelope*'''
        return super(IBorder, self).QueryBounds(Display, Geometry, Bounds)
    def GetGeometry(self, Display, Shape):
        '''Method IBorder.GetGeometry

           INPUTS
            Display             : IDisplay*
            Shape               : IGeometry*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IBorder, self).GetGeometry(Display, Shape)
    def Draw(self, Display, Geometry):
        '''Method IBorder.Draw

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*'''
        return super(IBorder, self).Draw(Display, Geometry)
    Gap = property(get_Gap, put_Gap, None)
    Name = property(get_Name, put_Name, None)

class IBackground(_esriCarto.IBackground):
    _IID = uuid.UUID('e4240309-dd41-11d2-b868-00600802e603')

    def __init__(self, *args, **kw):
        super(IBackground, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IBackground.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IBackground, self).get_Name()
    def put_Name(self, Name):
        '''Method IBackground.put_Name

           INPUT
            Name                : BSTR'''
        return super(IBackground, self).put_Name(Name)
    def get_Gap(self):
        '''Method IBackground.get_Gap

           OUTPUT
            Gap                 : double*'''
        return super(IBackground, self).get_Gap()
    def put_Gap(self, Gap):
        '''Method IBackground.put_Gap

           INPUT
            Gap                 : double'''
        return super(IBackground, self).put_Gap(Gap)
    def QueryBounds(self, Display, Geometry, Bounds):
        '''Method IBackground.QueryBounds

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*
            Bounds              : IEnvelope*'''
        return super(IBackground, self).QueryBounds(Display, Geometry, Bounds)
    def GetGeometry(self, Display, Shape):
        '''Method IBackground.GetGeometry

           INPUTS
            Display             : IDisplay*
            Shape               : IGeometry*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IBackground, self).GetGeometry(Display, Shape)
    def Draw(self, Display, Geometry):
        '''Method IBackground.Draw

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*'''
        return super(IBackground, self).Draw(Display, Geometry)
    Gap = property(get_Gap, put_Gap, None)
    Name = property(get_Name, put_Name, None)

class IFrameElement(_esriCarto.IFrameElement):
    _IID = uuid.UUID('9b00131a-9ed7-11d0-859e-0800091a2a72')

    def __init__(self, *args, **kw):
        super(IFrameElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Object(self):
        '''Method IFrameElement.get_Object

           OUTPUT
            framedObject        : VARIANT*'''
        return super(IFrameElement, self).get_Object()
    def get_Border(self):
        '''Method IFrameElement.get_Border

           OUTPUT
            Border              : IBorder**'''
        return super(IFrameElement, self).get_Border()
    def put_Border(self, Border):
        '''Method IFrameElement.put_Border

           INPUT
            Border              : IBorder*'''
        return super(IFrameElement, self).put_Border(Border)
    def get_Background(self):
        '''Method IFrameElement.get_Background

           OUTPUT
            Background          : IBackground**'''
        return super(IFrameElement, self).get_Background()
    def put_Background(self, Background):
        '''Method IFrameElement.put_Background

           INPUT
            Background          : IBackground*'''
        return super(IFrameElement, self).put_Background(Background)
    def get_Thumbnail(self):
        '''Method IFrameElement.get_Thumbnail

           OUTPUT
            bitmapHandle        : OLE_HANDLE*'''
        return super(IFrameElement, self).get_Thumbnail()
    def get_DraftMode(self):
        '''Method IFrameElement.get_DraftMode

           OUTPUT
            DraftMode           : VARIANT_BOOL*'''
        return super(IFrameElement, self).get_DraftMode()
    def put_DraftMode(self, DraftMode):
        '''Method IFrameElement.put_DraftMode

           INPUT
            DraftMode           : VARIANT_BOOL'''
        return super(IFrameElement, self).put_DraftMode(DraftMode)
    Background = property(get_Background, put_Background, None)
    Border = property(get_Border, put_Border, None)
    DraftMode = property(get_DraftMode, put_DraftMode, None)
    Object = property(get_Object, None, None)
    Thumbnail = property(get_Thumbnail, None, None)

class IElementCollection(_esriCarto.IElementCollection):
    _IID = uuid.UUID('ce8f3971-e9be-11d1-a232-080009b6f22b')
    def Add(self, Element, LinkedFeatureID):
        '''Method IElementCollection.Add

           INPUTS
            Element             : IElement*
            LinkedFeatureID     : long'''
        return super(IElementCollection, self).Add(Element, LinkedFeatureID)
    def get_Count(self):
        '''Method IElementCollection.get_Count

           OUTPUT
            Count               : long*'''
        return super(IElementCollection, self).get_Count()
    def QueryItem(self, Index):
        '''Method IElementCollection.QueryItem

           INPUT
            Index               : long

           OUTPUTS
            Element             : IElement**
            LinkedFeatureID     : long*'''
        return super(IElementCollection, self).QueryItem(Index)
    def Clear(self):
        '''Method IElementCollection.Clear'''
        return super(IElementCollection, self).Clear()
    def Remove(self, Element):
        '''Method IElementCollection.Remove

           INPUT
            Element             : IElement*'''
        return super(IElementCollection, self).Remove(Element)
    Count = property(get_Count, None, None)

class IElementCollection2(_esriCarto.IElementCollection2):
    _IID = uuid.UUID('b2bfc403-6b4c-4490-8878-ea62c4f49720')
    def Add(self, Element, LinkedFeatureID, AnnotationClassID, Status):
        '''Method IElementCollection2.Add

           INPUTS
            Element             : IElement*
            LinkedFeatureID     : long
            AnnotationClassID   : long
            Status              : esriAnnotationStatus'''
        return super(IElementCollection2, self).Add(Element, LinkedFeatureID, AnnotationClassID, Status)
    def get_Count(self):
        '''Method IElementCollection2.get_Count

           OUTPUT
            Count               : long*'''
        return super(IElementCollection2, self).get_Count()
    def QueryItem(self, Index):
        '''Method IElementCollection2.QueryItem

           INPUT
            Index               : long

           OUTPUTS
            Element             : IElement**
            LinkedFeatureID     : long*
            AnnotationClassID   : long*
            Status              : esriAnnotationStatus*'''
        return super(IElementCollection2, self).QueryItem(Index)
    def Clear(self):
        '''Method IElementCollection2.Clear'''
        return super(IElementCollection2, self).Clear()
    def Remove(self, Element):
        '''Method IElementCollection2.Remove

           INPUT
            Element             : IElement*'''
        return super(IElementCollection2, self).Remove(Element)
    Count = property(get_Count, None, None)

class ILayerFactoryHelper(_esriCarto.ILayerFactoryHelper):
    _IID = uuid.UUID('cc527850-cee4-11d5-a9e6-00104bb6fc1c')
    def CreateLayersFromName(self, Name):
        '''Method ILayerFactoryHelper.CreateLayersFromName

           INPUT
            Name                : IName*

           OUTPUT
            Layer               : IEnumLayer**'''
        return super(ILayerFactoryHelper, self).CreateLayersFromName(Name)

class ILayerPropertySheet(_esriCarto.ILayerPropertySheet):
    _IID = uuid.UUID('2eef47a6-9527-4d1a-a452-cdddf4c5e080')
    def ShowPropertySheet(self):
        '''Method ILayerPropertySheet.ShowPropertySheet

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(ILayerPropertySheet, self).ShowPropertySheet()

class IElementProperties(_esriCarto.IElementProperties):
    _IID = uuid.UUID('86f32b61-7667-11d2-a2d3-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IElementProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IElementProperties.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IElementProperties, self).get_Name()
    def put_Name(self, Name):
        '''Method IElementProperties.put_Name

           INPUT
            Name                : BSTR'''
        return super(IElementProperties, self).put_Name(Name)
    def get_Type(self):
        '''Method IElementProperties.get_Type

           OUTPUT
            Name                : BSTR*'''
        return super(IElementProperties, self).get_Type()
    def put_Type(self, Name):
        '''Method IElementProperties.put_Type

           INPUT
            Name                : BSTR'''
        return super(IElementProperties, self).put_Type(Name)
    def get_AutoTransform(self):
        '''Method IElementProperties.get_AutoTransform

           OUTPUT
            AutoTransform       : VARIANT_BOOL*'''
        return super(IElementProperties, self).get_AutoTransform()
    def put_AutoTransform(self, AutoTransform):
        '''Method IElementProperties.put_AutoTransform

           INPUT
            AutoTransform       : VARIANT_BOOL'''
        return super(IElementProperties, self).put_AutoTransform(AutoTransform)
    def get_CustomProperty(self):
        '''Method IElementProperties.get_CustomProperty

           OUTPUT
            CustomProperty      : VARIANT*'''
        return super(IElementProperties, self).get_CustomProperty()
    def put_CustomProperty(self, CustomProperty):
        '''Method IElementProperties.put_CustomProperty

           INPUT
            CustomProperty      : VARIANT'''
        return super(IElementProperties, self).put_CustomProperty(CustomProperty)
    AutoTransform = property(get_AutoTransform, put_AutoTransform, None)
    CustomProperty = property(get_CustomProperty, put_CustomProperty, None)
    Name = property(get_Name, put_Name, None)
    Type = property(get_Type, put_Type, None)

class IElementProperties2(_esriCarto.IElementProperties2):
    _IID = uuid.UUID('7d019a0d-f450-48fe-8a78-a2f0cb8ef3a4')

    def __init__(self, *args, **kw):
        super(IElementProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IElementProperties2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IElementProperties2, self).get_Name()
    def put_Name(self, Name):
        '''Method IElementProperties2.put_Name

           INPUT
            Name                : BSTR'''
        return super(IElementProperties2, self).put_Name(Name)
    def get_Type(self):
        '''Method IElementProperties2.get_Type

           OUTPUT
            Name                : BSTR*'''
        return super(IElementProperties2, self).get_Type()
    def put_Type(self, Name):
        '''Method IElementProperties2.put_Type

           INPUT
            Name                : BSTR'''
        return super(IElementProperties2, self).put_Type(Name)
    def get_AutoTransform(self):
        '''Method IElementProperties2.get_AutoTransform

           OUTPUT
            AutoTransform       : VARIANT_BOOL*'''
        return super(IElementProperties2, self).get_AutoTransform()
    def put_AutoTransform(self, AutoTransform):
        '''Method IElementProperties2.put_AutoTransform

           INPUT
            AutoTransform       : VARIANT_BOOL'''
        return super(IElementProperties2, self).put_AutoTransform(AutoTransform)
    def get_CustomProperty(self):
        '''Method IElementProperties2.get_CustomProperty

           OUTPUT
            CustomProperty      : VARIANT*'''
        return super(IElementProperties2, self).get_CustomProperty()
    def put_CustomProperty(self, CustomProperty):
        '''Method IElementProperties2.put_CustomProperty

           INPUT
            CustomProperty      : VARIANT'''
        return super(IElementProperties2, self).put_CustomProperty(CustomProperty)
    def CanRotate(self):
        '''Method IElementProperties2.CanRotate

           OUTPUT
            CanRotate           : VARIANT_BOOL*'''
        return super(IElementProperties2, self).CanRotate()
    def get_ReferenceScale(self):
        '''Method IElementProperties2.get_ReferenceScale

           OUTPUT
            ReferenceScale      : double*'''
        return super(IElementProperties2, self).get_ReferenceScale()
    def put_ReferenceScale(self, ReferenceScale):
        '''Method IElementProperties2.put_ReferenceScale

           INPUT
            ReferenceScale      : double'''
        return super(IElementProperties2, self).put_ReferenceScale(ReferenceScale)
    AutoTransform = property(get_AutoTransform, put_AutoTransform, None)
    CustomProperty = property(get_CustomProperty, put_CustomProperty, None)
    Name = property(get_Name, put_Name, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    Type = property(get_Type, put_Type, None)

class IElementProperties3(_esriCarto.IElementProperties3):
    _IID = uuid.UUID('7d019a0e-f450-48fe-8a78-a2f0cb8ef3a4')

    def __init__(self, *args, **kw):
        super(IElementProperties3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IElementProperties3.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IElementProperties3, self).get_Name()
    def put_Name(self, Name):
        '''Method IElementProperties3.put_Name

           INPUT
            Name                : BSTR'''
        return super(IElementProperties3, self).put_Name(Name)
    def get_Type(self):
        '''Method IElementProperties3.get_Type

           OUTPUT
            Name                : BSTR*'''
        return super(IElementProperties3, self).get_Type()
    def put_Type(self, Name):
        '''Method IElementProperties3.put_Type

           INPUT
            Name                : BSTR'''
        return super(IElementProperties3, self).put_Type(Name)
    def get_AutoTransform(self):
        '''Method IElementProperties3.get_AutoTransform

           OUTPUT
            AutoTransform       : VARIANT_BOOL*'''
        return super(IElementProperties3, self).get_AutoTransform()
    def put_AutoTransform(self, AutoTransform):
        '''Method IElementProperties3.put_AutoTransform

           INPUT
            AutoTransform       : VARIANT_BOOL'''
        return super(IElementProperties3, self).put_AutoTransform(AutoTransform)
    def get_CustomProperty(self):
        '''Method IElementProperties3.get_CustomProperty

           OUTPUT
            CustomProperty      : VARIANT*'''
        return super(IElementProperties3, self).get_CustomProperty()
    def put_CustomProperty(self, CustomProperty):
        '''Method IElementProperties3.put_CustomProperty

           INPUT
            CustomProperty      : VARIANT'''
        return super(IElementProperties3, self).put_CustomProperty(CustomProperty)
    def CanRotate(self):
        '''Method IElementProperties3.CanRotate

           OUTPUT
            CanRotate           : VARIANT_BOOL*'''
        return super(IElementProperties3, self).CanRotate()
    def get_ReferenceScale(self):
        '''Method IElementProperties3.get_ReferenceScale

           OUTPUT
            ReferenceScale      : double*'''
        return super(IElementProperties3, self).get_ReferenceScale()
    def put_ReferenceScale(self, ReferenceScale):
        '''Method IElementProperties3.put_ReferenceScale

           INPUT
            ReferenceScale      : double'''
        return super(IElementProperties3, self).put_ReferenceScale(ReferenceScale)
    def get_AnchorPoint(self):
        '''Method IElementProperties3.get_AnchorPoint

           OUTPUT
            AnchorPoint         : esriAnchorPointEnum*'''
        return super(IElementProperties3, self).get_AnchorPoint()
    def put_AnchorPoint(self, AnchorPoint):
        '''Method IElementProperties3.put_AnchorPoint

           INPUT
            AnchorPoint         : esriAnchorPointEnum'''
        return super(IElementProperties3, self).put_AnchorPoint(AnchorPoint)
    def get_SpatialReference(self):
        '''Method IElementProperties3.get_SpatialReference

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IElementProperties3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IElementProperties3.putref_SpatialReference

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IElementProperties3, self).putref_SpatialReference(spatialRef)
    AnchorPoint = property(get_AnchorPoint, put_AnchorPoint, None)
    AutoTransform = property(get_AutoTransform, put_AutoTransform, None)
    CustomProperty = property(get_CustomProperty, put_CustomProperty, None)
    Name = property(get_Name, put_Name, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Type = property(get_Type, put_Type, None)

class IGraphicElement(_esriCarto.IGraphicElement):
    _IID = uuid.UUID('c5c980f9-145e-11d3-9f88-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IGraphicElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method IGraphicElement.get_SpatialReference

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IGraphicElement, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGraphicElement.putref_SpatialReference

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IGraphicElement, self).putref_SpatialReference(spatialRef)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IBoundsProperties(_esriCarto.IBoundsProperties):
    _IID = uuid.UUID('7ad72c5d-eb8a-11d3-9314-00600802e603')

    def __init__(self, *args, **kw):
        super(IBoundsProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FixedAspectRatio(self):
        '''Method IBoundsProperties.get_FixedAspectRatio

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBoundsProperties, self).get_FixedAspectRatio()
    def put_FixedAspectRatio(self, flag):
        '''Method IBoundsProperties.put_FixedAspectRatio

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBoundsProperties, self).put_FixedAspectRatio(flag)
    def get_FixedSize(self):
        '''Method IBoundsProperties.get_FixedSize

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBoundsProperties, self).get_FixedSize()
    FixedAspectRatio = property(get_FixedAspectRatio, put_FixedAspectRatio, None)
    FixedSize = property(get_FixedSize, None, None)

class IFrameDraw(_esriCarto.IFrameDraw):
    _IID = uuid.UUID('cf387183-1698-4463-b5f5-67925465812e')
    def DrawBackground(self, Display, CancelTracker):
        '''Method IFrameDraw.DrawBackground

           INPUTS
            Display             : IDisplay*
            CancelTracker       : ITrackCancel*'''
        return super(IFrameDraw, self).DrawBackground(Display, CancelTracker)
    def DrawDraftMode(self, Display, CancelTracker):
        '''Method IFrameDraw.DrawDraftMode

           INPUTS
            Display             : IDisplay*
            CancelTracker       : ITrackCancel*'''
        return super(IFrameDraw, self).DrawDraftMode(Display, CancelTracker)
    def DrawForeground(self, Display, CancelTracker):
        '''Method IFrameDraw.DrawForeground

           INPUTS
            Display             : IDisplay*
            CancelTracker       : ITrackCancel*'''
        return super(IFrameDraw, self).DrawForeground(Display, CancelTracker)

class IShadow(_esriCarto.IShadow):
    _IID = uuid.UUID('a9258348-1753-4b99-820a-fcf74429abc1')

    def __init__(self, *args, **kw):
        super(IShadow, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IShadow.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IShadow, self).get_Name()
    def put_Name(self, Name):
        '''Method IShadow.put_Name

           INPUT
            Name                : BSTR'''
        return super(IShadow, self).put_Name(Name)
    def get_HorizontalSpacing(self):
        '''Method IShadow.get_HorizontalSpacing

           OUTPUT
            points              : double*'''
        return super(IShadow, self).get_HorizontalSpacing()
    def put_HorizontalSpacing(self, points):
        '''Method IShadow.put_HorizontalSpacing

           INPUT
            points              : double'''
        return super(IShadow, self).put_HorizontalSpacing(points)
    def get_VerticalSpacing(self):
        '''Method IShadow.get_VerticalSpacing

           OUTPUT
            points              : double*'''
        return super(IShadow, self).get_VerticalSpacing()
    def put_VerticalSpacing(self, points):
        '''Method IShadow.put_VerticalSpacing

           INPUT
            points              : double'''
        return super(IShadow, self).put_VerticalSpacing(points)
    def QueryBounds(self, Display, Geometry, Bounds):
        '''Method IShadow.QueryBounds

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*
            Bounds              : IEnvelope*'''
        return super(IShadow, self).QueryBounds(Display, Geometry, Bounds)
    def GetGeometry(self, Display, Shape):
        '''Method IShadow.GetGeometry

           INPUTS
            Display             : IDisplay*
            Shape               : IGeometry*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IShadow, self).GetGeometry(Display, Shape)
    def Draw(self, Display, Geometry):
        '''Method IShadow.Draw

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*'''
        return super(IShadow, self).Draw(Display, Geometry)
    HorizontalSpacing = property(get_HorizontalSpacing, put_HorizontalSpacing, None)
    Name = property(get_Name, put_Name, None)
    VerticalSpacing = property(get_VerticalSpacing, put_VerticalSpacing, None)

class IFrameProperties(_esriCarto.IFrameProperties):
    _IID = uuid.UUID('d1b1b855-5885-4d7f-a444-a02e3e1078c3')

    def __init__(self, *args, **kw):
        super(IFrameProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Border(self):
        '''Method IFrameProperties.get_Border

           OUTPUT
            Border              : IBorder**'''
        return super(IFrameProperties, self).get_Border()
    def put_Border(self, Border):
        '''Method IFrameProperties.put_Border

           INPUT
            Border              : IBorder*'''
        return super(IFrameProperties, self).put_Border(Border)
    def get_Background(self):
        '''Method IFrameProperties.get_Background

           OUTPUT
            Background          : IBackground**'''
        return super(IFrameProperties, self).get_Background()
    def put_Background(self, Background):
        '''Method IFrameProperties.put_Background

           INPUT
            Background          : IBackground*'''
        return super(IFrameProperties, self).put_Background(Background)
    def get_Shadow(self):
        '''Method IFrameProperties.get_Shadow

           OUTPUT
            Shadow              : IShadow**'''
        return super(IFrameProperties, self).get_Shadow()
    def put_Shadow(self, Shadow):
        '''Method IFrameProperties.put_Shadow

           INPUT
            Shadow              : IShadow*'''
        return super(IFrameProperties, self).put_Shadow(Shadow)
    Background = property(get_Background, put_Background, None)
    Border = property(get_Border, put_Border, None)
    Shadow = property(get_Shadow, put_Shadow, None)

class IPictureElement(_esriCarto.IPictureElement):
    _IID = uuid.UUID('c0a341c2-cfe2-11d1-9140-0000f87808ee')

    def __init__(self, *args, **kw):
        super(IPictureElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PictureDescription(self):
        '''Method IPictureElement.get_PictureDescription

           OUTPUT
            Description         : BSTR*'''
        return super(IPictureElement, self).get_PictureDescription()
    def get_Filter(self):
        '''Method IPictureElement.get_Filter

           OUTPUT
            Filter              : BSTR*'''
        return super(IPictureElement, self).get_Filter()
    def get_PictureAspectRatio(self):
        '''Method IPictureElement.get_PictureAspectRatio

           OUTPUT
            ratio               : double*'''
        return super(IPictureElement, self).get_PictureAspectRatio()
    def get_MaintainAspectRatio(self):
        '''Method IPictureElement.get_MaintainAspectRatio

           OUTPUT
            bRatio              : VARIANT_BOOL*'''
        return super(IPictureElement, self).get_MaintainAspectRatio()
    def put_MaintainAspectRatio(self, bRatio):
        '''Method IPictureElement.put_MaintainAspectRatio

           INPUT
            bRatio              : VARIANT_BOOL'''
        return super(IPictureElement, self).put_MaintainAspectRatio(bRatio)
    def get_SavePictureInDocument(self):
        '''Method IPictureElement.get_SavePictureInDocument

           OUTPUT
            bSaveInDoc          : VARIANT_BOOL*'''
        return super(IPictureElement, self).get_SavePictureInDocument()
    def put_SavePictureInDocument(self, bSaveInDoc):
        '''Method IPictureElement.put_SavePictureInDocument

           INPUT
            bSaveInDoc          : VARIANT_BOOL'''
        return super(IPictureElement, self).put_SavePictureInDocument(bSaveInDoc)
    def ImportPictureFromFile(self, Name):
        '''Method IPictureElement.ImportPictureFromFile

           INPUT
            Name                : BSTR'''
        return super(IPictureElement, self).ImportPictureFromFile(Name)
    Filter = property(get_Filter, None, None)
    MaintainAspectRatio = property(get_MaintainAspectRatio, put_MaintainAspectRatio, None)
    PictureAspectRatio = property(get_PictureAspectRatio, None, None)
    PictureDescription = property(get_PictureDescription, None, None)
    SavePictureInDocument = property(get_SavePictureInDocument, put_SavePictureInDocument, None)

class IPictureElement2(_esriCarto.IPictureElement2):
    _IID = uuid.UUID('c0a341c3-cfe2-11d1-9140-0000f87808ee')

    def __init__(self, *args, **kw):
        super(IPictureElement2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PictureDescription(self):
        '''Method IPictureElement2.get_PictureDescription

           OUTPUT
            Description         : BSTR*'''
        return super(IPictureElement2, self).get_PictureDescription()
    def get_Filter(self):
        '''Method IPictureElement2.get_Filter

           OUTPUT
            Filter              : BSTR*'''
        return super(IPictureElement2, self).get_Filter()
    def get_PictureAspectRatio(self):
        '''Method IPictureElement2.get_PictureAspectRatio

           OUTPUT
            ratio               : double*'''
        return super(IPictureElement2, self).get_PictureAspectRatio()
    def get_MaintainAspectRatio(self):
        '''Method IPictureElement2.get_MaintainAspectRatio

           OUTPUT
            bRatio              : VARIANT_BOOL*'''
        return super(IPictureElement2, self).get_MaintainAspectRatio()
    def put_MaintainAspectRatio(self, bRatio):
        '''Method IPictureElement2.put_MaintainAspectRatio

           INPUT
            bRatio              : VARIANT_BOOL'''
        return super(IPictureElement2, self).put_MaintainAspectRatio(bRatio)
    def get_SavePictureInDocument(self):
        '''Method IPictureElement2.get_SavePictureInDocument

           OUTPUT
            bSaveInDoc          : VARIANT_BOOL*'''
        return super(IPictureElement2, self).get_SavePictureInDocument()
    def put_SavePictureInDocument(self, bSaveInDoc):
        '''Method IPictureElement2.put_SavePictureInDocument

           INPUT
            bSaveInDoc          : VARIANT_BOOL'''
        return super(IPictureElement2, self).put_SavePictureInDocument(bSaveInDoc)
    def ImportPictureFromFile(self, Name):
        '''Method IPictureElement2.ImportPictureFromFile

           INPUT
            Name                : BSTR'''
        return super(IPictureElement2, self).ImportPictureFromFile(Name)
    def QueryIntrinsicSize(self):
        '''Method IPictureElement2.QueryIntrinsicSize

           OUTPUTS
            widthPoints         : double*
            heightPoints        : double*'''
        return super(IPictureElement2, self).QueryIntrinsicSize()
    def get_IsVector(self):
        '''Method IPictureElement2.get_IsVector

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPictureElement2, self).get_IsVector()
    Filter = property(get_Filter, None, None)
    IsVector = property(get_IsVector, None, None)
    MaintainAspectRatio = property(get_MaintainAspectRatio, put_MaintainAspectRatio, None)
    PictureAspectRatio = property(get_PictureAspectRatio, None, None)
    PictureDescription = property(get_PictureDescription, None, None)
    SavePictureInDocument = property(get_SavePictureInDocument, put_SavePictureInDocument, None)

class IPictureElement3(_esriCarto.IPictureElement3):
    _IID = uuid.UUID('c0a341c4-cfe2-11d1-9140-0000f87808ee')

    def __init__(self, *args, **kw):
        super(IPictureElement3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PictureDescription(self):
        '''Method IPictureElement3.get_PictureDescription

           OUTPUT
            Description         : BSTR*'''
        return super(IPictureElement3, self).get_PictureDescription()
    def get_Filter(self):
        '''Method IPictureElement3.get_Filter

           OUTPUT
            Filter              : BSTR*'''
        return super(IPictureElement3, self).get_Filter()
    def get_PictureAspectRatio(self):
        '''Method IPictureElement3.get_PictureAspectRatio

           OUTPUT
            ratio               : double*'''
        return super(IPictureElement3, self).get_PictureAspectRatio()
    def get_MaintainAspectRatio(self):
        '''Method IPictureElement3.get_MaintainAspectRatio

           OUTPUT
            bRatio              : VARIANT_BOOL*'''
        return super(IPictureElement3, self).get_MaintainAspectRatio()
    def put_MaintainAspectRatio(self, bRatio):
        '''Method IPictureElement3.put_MaintainAspectRatio

           INPUT
            bRatio              : VARIANT_BOOL'''
        return super(IPictureElement3, self).put_MaintainAspectRatio(bRatio)
    def get_SavePictureInDocument(self):
        '''Method IPictureElement3.get_SavePictureInDocument

           OUTPUT
            bSaveInDoc          : VARIANT_BOOL*'''
        return super(IPictureElement3, self).get_SavePictureInDocument()
    def put_SavePictureInDocument(self, bSaveInDoc):
        '''Method IPictureElement3.put_SavePictureInDocument

           INPUT
            bSaveInDoc          : VARIANT_BOOL'''
        return super(IPictureElement3, self).put_SavePictureInDocument(bSaveInDoc)
    def ImportPictureFromFile(self, Name):
        '''Method IPictureElement3.ImportPictureFromFile

           INPUT
            Name                : BSTR'''
        return super(IPictureElement3, self).ImportPictureFromFile(Name)
    def QueryIntrinsicSize(self):
        '''Method IPictureElement3.QueryIntrinsicSize

           OUTPUTS
            widthPoints         : double*
            heightPoints        : double*'''
        return super(IPictureElement3, self).QueryIntrinsicSize()
    def get_IsVector(self):
        '''Method IPictureElement3.get_IsVector

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPictureElement3, self).get_IsVector()
    def get_Handle(self):
        '''Method IPictureElement3.get_Handle

           OUTPUT
            Handle              : OLE_HANDLE*'''
        return super(IPictureElement3, self).get_Handle()
    Filter = property(get_Filter, None, None)
    Handle = property(get_Handle, None, None)
    IsVector = property(get_IsVector, None, None)
    MaintainAspectRatio = property(get_MaintainAspectRatio, put_MaintainAspectRatio, None)
    PictureAspectRatio = property(get_PictureAspectRatio, None, None)
    PictureDescription = property(get_PictureDescription, None, None)
    SavePictureInDocument = property(get_SavePictureInDocument, put_SavePictureInDocument, None)

class IPictureElement4(_esriCarto.IPictureElement4):
    _IID = uuid.UUID('c0a341c5-cfe2-11d1-9140-0000f87808ee')

    def __init__(self, *args, **kw):
        super(IPictureElement4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PictureDescription(self):
        '''Method IPictureElement4.get_PictureDescription

           OUTPUT
            Description         : BSTR*'''
        return super(IPictureElement4, self).get_PictureDescription()
    def get_Filter(self):
        '''Method IPictureElement4.get_Filter

           OUTPUT
            Filter              : BSTR*'''
        return super(IPictureElement4, self).get_Filter()
    def get_PictureAspectRatio(self):
        '''Method IPictureElement4.get_PictureAspectRatio

           OUTPUT
            ratio               : double*'''
        return super(IPictureElement4, self).get_PictureAspectRatio()
    def get_MaintainAspectRatio(self):
        '''Method IPictureElement4.get_MaintainAspectRatio

           OUTPUT
            bRatio              : VARIANT_BOOL*'''
        return super(IPictureElement4, self).get_MaintainAspectRatio()
    def put_MaintainAspectRatio(self, bRatio):
        '''Method IPictureElement4.put_MaintainAspectRatio

           INPUT
            bRatio              : VARIANT_BOOL'''
        return super(IPictureElement4, self).put_MaintainAspectRatio(bRatio)
    def get_SavePictureInDocument(self):
        '''Method IPictureElement4.get_SavePictureInDocument

           OUTPUT
            bSaveInDoc          : VARIANT_BOOL*'''
        return super(IPictureElement4, self).get_SavePictureInDocument()
    def put_SavePictureInDocument(self, bSaveInDoc):
        '''Method IPictureElement4.put_SavePictureInDocument

           INPUT
            bSaveInDoc          : VARIANT_BOOL'''
        return super(IPictureElement4, self).put_SavePictureInDocument(bSaveInDoc)
    def ImportPictureFromFile(self, Name):
        '''Method IPictureElement4.ImportPictureFromFile

           INPUT
            Name                : BSTR'''
        return super(IPictureElement4, self).ImportPictureFromFile(Name)
    def QueryIntrinsicSize(self):
        '''Method IPictureElement4.QueryIntrinsicSize

           OUTPUTS
            widthPoints         : double*
            heightPoints        : double*'''
        return super(IPictureElement4, self).QueryIntrinsicSize()
    def get_IsVector(self):
        '''Method IPictureElement4.get_IsVector

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPictureElement4, self).get_IsVector()
    def get_Handle(self):
        '''Method IPictureElement4.get_Handle

           OUTPUT
            Handle              : OLE_HANDLE*'''
        return super(IPictureElement4, self).get_Handle()
    def put_Path(self, Path):
        '''Method IPictureElement4.put_Path

           INPUT
            Path                : BSTR'''
        return super(IPictureElement4, self).put_Path(Path)
    def get_Path(self):
        '''Method IPictureElement4.get_Path

           OUTPUT
            Path                : BSTR*'''
        return super(IPictureElement4, self).get_Path()
    Filter = property(get_Filter, None, None)
    Handle = property(get_Handle, None, None)
    IsVector = property(get_IsVector, None, None)
    MaintainAspectRatio = property(get_MaintainAspectRatio, put_MaintainAspectRatio, None)
    Path = property(get_Path, put_Path, None)
    PictureAspectRatio = property(get_PictureAspectRatio, None, None)
    PictureDescription = property(get_PictureDescription, None, None)
    SavePictureInDocument = property(get_SavePictureInDocument, put_SavePictureInDocument, None)

class IPictureElement5(_esriCarto.IPictureElement5):
    _IID = uuid.UUID('c0a341c6-cfe2-11d1-9140-0000f87808ee')

    def __init__(self, *args, **kw):
        super(IPictureElement5, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PictureDescription(self):
        '''Method IPictureElement5.get_PictureDescription

           OUTPUT
            Description         : BSTR*'''
        return super(IPictureElement5, self).get_PictureDescription()
    def get_Filter(self):
        '''Method IPictureElement5.get_Filter

           OUTPUT
            Filter              : BSTR*'''
        return super(IPictureElement5, self).get_Filter()
    def get_PictureAspectRatio(self):
        '''Method IPictureElement5.get_PictureAspectRatio

           OUTPUT
            ratio               : double*'''
        return super(IPictureElement5, self).get_PictureAspectRatio()
    def get_MaintainAspectRatio(self):
        '''Method IPictureElement5.get_MaintainAspectRatio

           OUTPUT
            bRatio              : VARIANT_BOOL*'''
        return super(IPictureElement5, self).get_MaintainAspectRatio()
    def put_MaintainAspectRatio(self, bRatio):
        '''Method IPictureElement5.put_MaintainAspectRatio

           INPUT
            bRatio              : VARIANT_BOOL'''
        return super(IPictureElement5, self).put_MaintainAspectRatio(bRatio)
    def get_SavePictureInDocument(self):
        '''Method IPictureElement5.get_SavePictureInDocument

           OUTPUT
            bSaveInDoc          : VARIANT_BOOL*'''
        return super(IPictureElement5, self).get_SavePictureInDocument()
    def put_SavePictureInDocument(self, bSaveInDoc):
        '''Method IPictureElement5.put_SavePictureInDocument

           INPUT
            bSaveInDoc          : VARIANT_BOOL'''
        return super(IPictureElement5, self).put_SavePictureInDocument(bSaveInDoc)
    def ImportPictureFromFile(self, Name):
        '''Method IPictureElement5.ImportPictureFromFile

           INPUT
            Name                : BSTR'''
        return super(IPictureElement5, self).ImportPictureFromFile(Name)
    def QueryIntrinsicSize(self):
        '''Method IPictureElement5.QueryIntrinsicSize

           OUTPUTS
            widthPoints         : double*
            heightPoints        : double*'''
        return super(IPictureElement5, self).QueryIntrinsicSize()
    def get_IsVector(self):
        '''Method IPictureElement5.get_IsVector

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPictureElement5, self).get_IsVector()
    def get_Handle(self):
        '''Method IPictureElement5.get_Handle

           OUTPUT
            Handle              : OLE_HANDLE*'''
        return super(IPictureElement5, self).get_Handle()
    def put_Path(self, Path):
        '''Method IPictureElement5.put_Path

           INPUT
            Path                : BSTR'''
        return super(IPictureElement5, self).put_Path(Path)
    def get_Path(self):
        '''Method IPictureElement5.get_Path

           OUTPUT
            Path                : BSTR*'''
        return super(IPictureElement5, self).get_Path()
    def get_PictureField(self):
        '''Method IPictureElement5.get_PictureField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IPictureElement5, self).get_PictureField()
    def put_PictureField(self, FieldName):
        '''Method IPictureElement5.put_PictureField

           INPUT
            FieldName           : BSTR'''
        return super(IPictureElement5, self).put_PictureField(FieldName)
    def get_UseAttachment(self):
        '''Method IPictureElement5.get_UseAttachment

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPictureElement5, self).get_UseAttachment()
    def put_UseAttachment(self, flag):
        '''Method IPictureElement5.put_UseAttachment

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IPictureElement5, self).put_UseAttachment(flag)
    def get_AttachmentFilter(self):
        '''Method IPictureElement5.get_AttachmentFilter

           OUTPUT
            Filter              : BSTR*'''
        return super(IPictureElement5, self).get_AttachmentFilter()
    def put_AttachmentFilter(self, Filter):
        '''Method IPictureElement5.put_AttachmentFilter

           INPUT
            Filter              : BSTR'''
        return super(IPictureElement5, self).put_AttachmentFilter(Filter)
    def ImportFromVariant(self, v):
        '''Method IPictureElement5.ImportFromVariant

           INPUT
            v                   : VARIANT'''
        return super(IPictureElement5, self).ImportFromVariant(v)
    AttachmentFilter = property(get_AttachmentFilter, put_AttachmentFilter, None)
    Filter = property(get_Filter, None, None)
    Handle = property(get_Handle, None, None)
    IsVector = property(get_IsVector, None, None)
    MaintainAspectRatio = property(get_MaintainAspectRatio, put_MaintainAspectRatio, None)
    Path = property(get_Path, put_Path, None)
    PictureAspectRatio = property(get_PictureAspectRatio, None, None)
    PictureDescription = property(get_PictureDescription, None, None)
    PictureField = property(get_PictureField, put_PictureField, None)
    SavePictureInDocument = property(get_SavePictureInDocument, put_SavePictureInDocument, None)
    UseAttachment = property(get_UseAttachment, put_UseAttachment, None)

class IOlePictureElement(_esriCarto.IOlePictureElement):
    _IID = uuid.UUID('1a082f15-c06f-11d2-9f22-00c04f6bc8dd')
    def ImportPicture(self, pictureDisp):
        '''Method IOlePictureElement.ImportPicture

           INPUT
            pictureDisp         : IPictureDisp*'''
        return super(IOlePictureElement, self).ImportPicture(pictureDisp)

class IGraphicsLayer(_esriCarto.IGraphicsLayer):
    _IID = uuid.UUID('34b2ef81-f4ac-11d1-a245-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IGraphicsLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Activate(self, containerScreen):
        '''Method IGraphicsLayer.Activate

           INPUT
            containerScreen     : IScreenDisplay*'''
        return super(IGraphicsLayer, self).Activate(containerScreen)
    def Deactivate(self):
        '''Method IGraphicsLayer.Deactivate'''
        return super(IGraphicsLayer, self).Deactivate()
    def get_UseAssociatedLayerVisibility(self):
        '''Method IGraphicsLayer.get_UseAssociatedLayerVisibility

           OUTPUT
            useLayer            : VARIANT_BOOL*'''
        return super(IGraphicsLayer, self).get_UseAssociatedLayerVisibility()
    def put_UseAssociatedLayerVisibility(self, useLayer):
        '''Method IGraphicsLayer.put_UseAssociatedLayerVisibility

           INPUT
            useLayer            : VARIANT_BOOL'''
        return super(IGraphicsLayer, self).put_UseAssociatedLayerVisibility(useLayer)
    def get_AssociatedLayer(self):
        '''Method IGraphicsLayer.get_AssociatedLayer

           OUTPUT
            Layer               : ILayer**'''
        return super(IGraphicsLayer, self).get_AssociatedLayer()
    def putref_AssociatedLayer(self, Layer):
        '''Method IGraphicsLayer.putref_AssociatedLayer

           INPUT
            Layer               : ILayer*'''
        return super(IGraphicsLayer, self).putref_AssociatedLayer(Layer)
    AssociatedLayer = property(get_AssociatedLayer, putref_AssociatedLayer, None)
    UseAssociatedLayerVisibility = property(get_UseAssociatedLayerVisibility, put_UseAssociatedLayerVisibility, None)

class ISelection(_esriCarto.ISelection):
    _IID = uuid.UUID('b1a1ca6d-a96c-11d1-8745-0000f8751720')
    def CanCut(self):
        '''Method ISelection.CanCut

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ISelection, self).CanCut()
    def CanCopy(self):
        '''Method ISelection.CanCopy

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ISelection, self).CanCopy()
    def CanPaste(self):
        '''Method ISelection.CanPaste

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ISelection, self).CanPaste()
    def CanClear(self):
        '''Method ISelection.CanClear

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ISelection, self).CanClear()
    def CanSelectAll(self):
        '''Method ISelection.CanSelectAll

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(ISelection, self).CanSelectAll()
    def Cut(self):
        '''Method ISelection.Cut'''
        return super(ISelection, self).Cut()
    def Copy(self):
        '''Method ISelection.Copy'''
        return super(ISelection, self).Copy()
    def Paste(self):
        '''Method ISelection.Paste'''
        return super(ISelection, self).Paste()
    def Clear(self):
        '''Method ISelection.Clear'''
        return super(ISelection, self).Clear()
    def SelectAll(self):
        '''Method ISelection.SelectAll'''
        return super(ISelection, self).SelectAll()
    def Draw(self, Display, CancelTracker):
        '''Method ISelection.Draw

           INPUTS
            Display             : IDisplay*
            CancelTracker       : ITrackCancel*'''
        return super(ISelection, self).Draw(Display, CancelTracker)

class ISelectionEnvironment(_esriCarto.ISelectionEnvironment):
    _IID = uuid.UUID('e3875b6f-d9f5-11d1-add4-080009ec732a')

    def __init__(self, *args, **kw):
        super(ISelectionEnvironment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PointSelectionMethod(self):
        '''Method ISelectionEnvironment.get_PointSelectionMethod

           OUTPUT
            Method              : esriSpatialRelEnum*'''
        return super(ISelectionEnvironment, self).get_PointSelectionMethod()
    def put_PointSelectionMethod(self, Method):
        '''Method ISelectionEnvironment.put_PointSelectionMethod

           INPUT
            Method              : esriSpatialRelEnum'''
        return super(ISelectionEnvironment, self).put_PointSelectionMethod(Method)
    def get_PointSearchDistance(self):
        '''Method ISelectionEnvironment.get_PointSearchDistance

           OUTPUT
            Distance            : double*'''
        return super(ISelectionEnvironment, self).get_PointSearchDistance()
    def put_PointSearchDistance(self, Distance):
        '''Method ISelectionEnvironment.put_PointSearchDistance

           INPUT
            Distance            : double'''
        return super(ISelectionEnvironment, self).put_PointSearchDistance(Distance)
    def get_LinearSelectionMethod(self):
        '''Method ISelectionEnvironment.get_LinearSelectionMethod

           OUTPUT
            Method              : esriSpatialRelEnum*'''
        return super(ISelectionEnvironment, self).get_LinearSelectionMethod()
    def put_LinearSelectionMethod(self, Method):
        '''Method ISelectionEnvironment.put_LinearSelectionMethod

           INPUT
            Method              : esriSpatialRelEnum'''
        return super(ISelectionEnvironment, self).put_LinearSelectionMethod(Method)
    def get_LinearSearchDistance(self):
        '''Method ISelectionEnvironment.get_LinearSearchDistance

           OUTPUT
            Distance            : double*'''
        return super(ISelectionEnvironment, self).get_LinearSearchDistance()
    def put_LinearSearchDistance(self, Distance):
        '''Method ISelectionEnvironment.put_LinearSearchDistance

           INPUT
            Distance            : double'''
        return super(ISelectionEnvironment, self).put_LinearSearchDistance(Distance)
    def get_AreaSelectionMethod(self):
        '''Method ISelectionEnvironment.get_AreaSelectionMethod

           OUTPUT
            Method              : esriSpatialRelEnum*'''
        return super(ISelectionEnvironment, self).get_AreaSelectionMethod()
    def put_AreaSelectionMethod(self, Method):
        '''Method ISelectionEnvironment.put_AreaSelectionMethod

           INPUT
            Method              : esriSpatialRelEnum'''
        return super(ISelectionEnvironment, self).put_AreaSelectionMethod(Method)
    def get_AreaSearchDistance(self):
        '''Method ISelectionEnvironment.get_AreaSearchDistance

           OUTPUT
            Distance            : double*'''
        return super(ISelectionEnvironment, self).get_AreaSearchDistance()
    def put_AreaSearchDistance(self, Distance):
        '''Method ISelectionEnvironment.put_AreaSearchDistance

           INPUT
            Distance            : double'''
        return super(ISelectionEnvironment, self).put_AreaSearchDistance(Distance)
    def get_CombinationMethod(self):
        '''Method ISelectionEnvironment.get_CombinationMethod

           OUTPUT
            Method              : esriSelectionResultEnum*'''
        return super(ISelectionEnvironment, self).get_CombinationMethod()
    def put_CombinationMethod(self, Method):
        '''Method ISelectionEnvironment.put_CombinationMethod

           INPUT
            Method              : esriSelectionResultEnum'''
        return super(ISelectionEnvironment, self).put_CombinationMethod(Method)
    def get_SearchTolerance(self):
        '''Method ISelectionEnvironment.get_SearchTolerance

           OUTPUT
            Tolerance           : long*'''
        return super(ISelectionEnvironment, self).get_SearchTolerance()
    def put_SearchTolerance(self, Tolerance):
        '''Method ISelectionEnvironment.put_SearchTolerance

           INPUT
            Tolerance           : long'''
        return super(ISelectionEnvironment, self).put_SearchTolerance(Tolerance)
    def get_DefaultColor(self):
        '''Method ISelectionEnvironment.get_DefaultColor

           OUTPUT
            Color               : IColor**'''
        return super(ISelectionEnvironment, self).get_DefaultColor()
    def putref_DefaultColor(self, Color):
        '''Method ISelectionEnvironment.putref_DefaultColor

           INPUT
            Color               : IColor*'''
        return super(ISelectionEnvironment, self).putref_DefaultColor(Color)
    AreaSearchDistance = property(get_AreaSearchDistance, put_AreaSearchDistance, None)
    AreaSelectionMethod = property(get_AreaSelectionMethod, put_AreaSelectionMethod, None)
    CombinationMethod = property(get_CombinationMethod, put_CombinationMethod, None)
    DefaultColor = property(get_DefaultColor, putref_DefaultColor, None)
    LinearSearchDistance = property(get_LinearSearchDistance, put_LinearSearchDistance, None)
    LinearSelectionMethod = property(get_LinearSelectionMethod, put_LinearSelectionMethod, None)
    PointSearchDistance = property(get_PointSearchDistance, put_PointSearchDistance, None)
    PointSelectionMethod = property(get_PointSelectionMethod, put_PointSelectionMethod, None)
    SearchTolerance = property(get_SearchTolerance, put_SearchTolerance, None)

class IBarrierCollection(_esriCarto.IBarrierCollection):
    _IID = uuid.UUID('01c12b92-a3fb-11d2-a2fe-080009b6f22b')
    def Add(self, Barriers, Weight):
        '''Method IBarrierCollection.Add

           INPUTS
            Barriers            : IGeometryCollection*
            Weight              : esriBasicOverposterWeight'''
        return super(IBarrierCollection, self).Add(Barriers, Weight)
    def get_Count(self):
        '''Method IBarrierCollection.get_Count

           OUTPUT
            Count               : long*'''
        return super(IBarrierCollection, self).get_Count()
    def QueryItem(self, Index):
        '''Method IBarrierCollection.QueryItem

           INPUT
            Index               : long

           OUTPUTS
            barrier             : IGeometryCollection**
            Weight              : esriBasicOverposterWeight*'''
        return super(IBarrierCollection, self).QueryItem(Index)
    def Clear(self):
        '''Method IBarrierCollection.Clear'''
        return super(IBarrierCollection, self).Clear()
    Count = property(get_Count, None, None)

class IFeatureLayer(_esriCarto.IFeatureLayer):
    _IID = uuid.UUID('40a9e885-5533-11d0-98be-00805f7ced21')

    def __init__(self, *args, **kw):
        super(IFeatureLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureClass(self):
        '''Method IFeatureLayer.get_FeatureClass

           OUTPUT
            fclass              : IFeatureClass**'''
        return super(IFeatureLayer, self).get_FeatureClass()
    def putref_FeatureClass(self, fclass):
        '''Method IFeatureLayer.putref_FeatureClass

           INPUT
            fclass              : IFeatureClass*'''
        return super(IFeatureLayer, self).putref_FeatureClass(fclass)
    def get_DataSourceType(self):
        '''Method IFeatureLayer.get_DataSourceType

           OUTPUT
            Text                : BSTR*'''
        return super(IFeatureLayer, self).get_DataSourceType()
    def put_DataSourceType(self, Text):
        '''Method IFeatureLayer.put_DataSourceType

           INPUT
            Text                : BSTR'''
        return super(IFeatureLayer, self).put_DataSourceType(Text)
    def get_DisplayField(self):
        '''Method IFeatureLayer.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IFeatureLayer, self).get_DisplayField()
    def put_DisplayField(self, FieldName):
        '''Method IFeatureLayer.put_DisplayField

           INPUT
            FieldName           : BSTR'''
        return super(IFeatureLayer, self).put_DisplayField(FieldName)
    def get_Selectable(self):
        '''Method IFeatureLayer.get_Selectable

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IFeatureLayer, self).get_Selectable()
    def put_Selectable(self, Value):
        '''Method IFeatureLayer.put_Selectable

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IFeatureLayer, self).put_Selectable(Value)
    def Search(self, queryFilter, recycling):
        '''Method IFeatureLayer.Search

           INPUTS
            queryFilter         : IQueryFilter*
            recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IFeatureLayer, self).Search(queryFilter, recycling)
    def get_ScaleSymbols(self):
        '''Method IFeatureLayer.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(IFeatureLayer, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method IFeatureLayer.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(IFeatureLayer, self).put_ScaleSymbols(Scale)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(IFeatureLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IFeatureLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(IFeatureLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(IFeatureLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(IFeatureLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(IFeatureLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(IFeatureLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IFeatureLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IFeatureLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IFeatureLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IFeatureLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(IFeatureLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IFeatureLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IFeatureLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(IFeatureLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IFeatureLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IFeatureLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    DataSourceType = property(get_DataSourceType, put_DataSourceType, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    FeatureClass = property(get_FeatureClass, putref_FeatureClass, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    Selectable = property(get_Selectable, put_Selectable, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class IGroupElement(_esriCarto.IGroupElement):
    _IID = uuid.UUID('803577d1-f8a3-11d0-83af-080009b996cc')

    def __init__(self, *args, **kw):
        super(IGroupElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Elements(self):
        '''Method IGroupElement.get_Elements

           OUTPUT
            Elements            : IEnumElement**'''
        return super(IGroupElement, self).get_Elements()
    def putref_Elements(self, Elements):
        '''Method IGroupElement.putref_Elements

           INPUT
            Elements            : IEnumElement*'''
        return super(IGroupElement, self).putref_Elements(Elements)
    def get_ElementCount(self):
        '''Method IGroupElement.get_ElementCount

           OUTPUT
            Count               : long*'''
        return super(IGroupElement, self).get_ElementCount()
    def get_Element(self, Index):
        '''Method IGroupElement.get_Element

           INPUT
            Index               : long

           OUTPUT
            Element             : IElement**'''
        return super(IGroupElement, self).get_Element(Index)
    def AddElement(self, Element):
        '''Method IGroupElement.AddElement

           INPUT
            Element             : IElement*'''
        return super(IGroupElement, self).AddElement(Element)
    def DeleteElement(self, Element):
        '''Method IGroupElement.DeleteElement

           INPUT
            Element             : IElement*'''
        return super(IGroupElement, self).DeleteElement(Element)
    def ClearElements(self):
        '''Method IGroupElement.ClearElements'''
        return super(IGroupElement, self).ClearElements()
    ElementCount = property(get_ElementCount, None, None)
    Elements = property(get_Elements, putref_Elements, None)
    Element = IndexProperty(get_Element, None)

class IGraphicsContainer(_esriCarto.IGraphicsContainer):
    _IID = uuid.UUID('d09411d1-4bb4-11d1-b6cc-080009b996cc')
    def Next(self):
        '''Method IGraphicsContainer.Next

           OUTPUT
            Element             : IElement**'''
        return super(IGraphicsContainer, self).Next()
    def __iter__(self):
        try:
            super(IGraphicsContainer, self).Reset()
            val = super(IGraphicsContainer, self).Next()
            while val:
                yield val
                val = super(IGraphicsContainer, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IGraphicsContainer.Reset'''
        return super(IGraphicsContainer, self).Reset()
    def AddElement(self, Element, zorder):
        '''Method IGraphicsContainer.AddElement

           INPUTS
            Element             : IElement*
            zorder              : long'''
        return super(IGraphicsContainer, self).AddElement(Element, zorder)
    def AddElements(self, Elements, zorder):
        '''Method IGraphicsContainer.AddElements

           INPUTS
            Elements            : IElementCollection*
            zorder              : long'''
        return super(IGraphicsContainer, self).AddElements(Elements, zorder)
    def DeleteElement(self, Element):
        '''Method IGraphicsContainer.DeleteElement

           INPUT
            Element             : IElement*'''
        return super(IGraphicsContainer, self).DeleteElement(Element)
    def DeleteAllElements(self):
        '''Method IGraphicsContainer.DeleteAllElements'''
        return super(IGraphicsContainer, self).DeleteAllElements()
    def MoveElementToGroup(self, Element, group):
        '''Method IGraphicsContainer.MoveElementToGroup

           INPUTS
            Element             : IElement*
            group               : IGroupElement*'''
        return super(IGraphicsContainer, self).MoveElementToGroup(Element, group)
    def MoveElementFromGroup(self, group, Element, zorder):
        '''Method IGraphicsContainer.MoveElementFromGroup

           INPUTS
            group               : IGroupElement*
            Element             : IElement*
            zorder              : long'''
        return super(IGraphicsContainer, self).MoveElementFromGroup(group, Element, zorder)
    def LocateElements(self, point, Tolerance):
        '''Method IGraphicsContainer.LocateElements

           INPUTS
            point               : IPoint*
            Tolerance           : double

           OUTPUT
            Elements            : IEnumElement**'''
        return super(IGraphicsContainer, self).LocateElements(point, Tolerance)
    def LocateElementsByEnvelope(self, envelope):
        '''Method IGraphicsContainer.LocateElementsByEnvelope

           INPUT
            envelope            : IEnvelope*

           OUTPUT
            Elements            : IEnumElement**'''
        return super(IGraphicsContainer, self).LocateElementsByEnvelope(envelope)
    def FindFrame(self, frameObject):
        '''Method IGraphicsContainer.FindFrame

           INPUT
            frameObject         : VARIANT

           OUTPUT
            frame               : IFrameElement**'''
        return super(IGraphicsContainer, self).FindFrame(frameObject)
    def UpdateElement(self, Element):
        '''Method IGraphicsContainer.UpdateElement

           INPUT
            Element             : IElement*'''
        return super(IGraphicsContainer, self).UpdateElement(Element)
    def GetElementOrder(self, Elements):
        '''Method IGraphicsContainer.GetElementOrder

           INPUT
            Elements            : IEnumElement*

           OUTPUT
            order               : VARIANT*'''
        return super(IGraphicsContainer, self).GetElementOrder(Elements)
    def PutElementOrder(self, order):
        '''Method IGraphicsContainer.PutElementOrder

           INPUT
            order               : VARIANT'''
        return super(IGraphicsContainer, self).PutElementOrder(order)
    def BringToFront(self, Elements):
        '''Method IGraphicsContainer.BringToFront

           INPUT
            Elements            : IEnumElement*'''
        return super(IGraphicsContainer, self).BringToFront(Elements)
    def SendToBack(self, Elements):
        '''Method IGraphicsContainer.SendToBack

           INPUT
            Elements            : IEnumElement*'''
        return super(IGraphicsContainer, self).SendToBack(Elements)
    def SendBackward(self, Elements):
        '''Method IGraphicsContainer.SendBackward

           INPUT
            Elements            : IEnumElement*'''
        return super(IGraphicsContainer, self).SendBackward(Elements)
    def BringForward(self, Elements):
        '''Method IGraphicsContainer.BringForward

           INPUT
            Elements            : IEnumElement*'''
        return super(IGraphicsContainer, self).BringForward(Elements)

class IAnnotateLayerProperties(_esriCarto.IAnnotateLayerProperties):
    _IID = uuid.UUID('01004142-0d1c-11d2-a26f-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IAnnotateLayerProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseOutput(self, set):
        '''Method IAnnotateLayerProperties.put_UseOutput

           INPUT
            set                 : VARIANT_BOOL'''
        return super(IAnnotateLayerProperties, self).put_UseOutput(set)
    def get_UseOutput(self):
        '''Method IAnnotateLayerProperties.get_UseOutput

           OUTPUT
            set                 : VARIANT_BOOL*'''
        return super(IAnnotateLayerProperties, self).get_UseOutput()
    def get_Extent(self):
        '''Method IAnnotateLayerProperties.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IAnnotateLayerProperties, self).get_Extent()
    def put_Extent(self, Extent):
        '''Method IAnnotateLayerProperties.put_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IAnnotateLayerProperties, self).put_Extent(Extent)
    def get_FeatureLayer(self):
        '''Method IAnnotateLayerProperties.get_FeatureLayer

           OUTPUT
            FeatureLayer        : IFeatureLayer**'''
        return super(IAnnotateLayerProperties, self).get_FeatureLayer()
    def putref_FeatureLayer(self, FeatureLayer):
        '''Method IAnnotateLayerProperties.putref_FeatureLayer

           INPUT
            FeatureLayer        : IFeatureLayer*'''
        return super(IAnnotateLayerProperties, self).putref_FeatureLayer(FeatureLayer)
    def put_Class(self, ClassName):
        '''Method IAnnotateLayerProperties.put_Class

           INPUT
            ClassName           : BSTR'''
        return super(IAnnotateLayerProperties, self).put_Class(ClassName)
    def get_Class(self):
        '''Method IAnnotateLayerProperties.get_Class

           OUTPUT
            ClassName           : BSTR*'''
        return super(IAnnotateLayerProperties, self).get_Class()
    def put_LabelWhichFeatures(self, Type):
        '''Method IAnnotateLayerProperties.put_LabelWhichFeatures

           INPUT
            Type                : esriLabelWhichFeatures'''
        return super(IAnnotateLayerProperties, self).put_LabelWhichFeatures(Type)
    def get_LabelWhichFeatures(self):
        '''Method IAnnotateLayerProperties.get_LabelWhichFeatures

           OUTPUT
            Type                : esriLabelWhichFeatures*'''
        return super(IAnnotateLayerProperties, self).get_LabelWhichFeatures()
    def put_CreateUnplacedElements(self, flag):
        '''Method IAnnotateLayerProperties.put_CreateUnplacedElements

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IAnnotateLayerProperties, self).put_CreateUnplacedElements(flag)
    def get_CreateUnplacedElements(self):
        '''Method IAnnotateLayerProperties.get_CreateUnplacedElements

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnotateLayerProperties, self).get_CreateUnplacedElements()
    def get_AnnotationMinimumScale(self):
        '''Method IAnnotateLayerProperties.get_AnnotationMinimumScale

           OUTPUT
            MinScale            : double*'''
        return super(IAnnotateLayerProperties, self).get_AnnotationMinimumScale()
    def put_AnnotationMinimumScale(self, MinScale):
        '''Method IAnnotateLayerProperties.put_AnnotationMinimumScale

           INPUT
            MinScale            : double'''
        return super(IAnnotateLayerProperties, self).put_AnnotationMinimumScale(MinScale)
    def get_AnnotationMaximumScale(self):
        '''Method IAnnotateLayerProperties.get_AnnotationMaximumScale

           OUTPUT
            MaxScale            : double*'''
        return super(IAnnotateLayerProperties, self).get_AnnotationMaximumScale()
    def put_AnnotationMaximumScale(self, MaxScale):
        '''Method IAnnotateLayerProperties.put_AnnotationMaximumScale

           INPUT
            MaxScale            : double'''
        return super(IAnnotateLayerProperties, self).put_AnnotationMaximumScale(MaxScale)
    def put_FeatureLinked(self, flag):
        '''Method IAnnotateLayerProperties.put_FeatureLinked

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IAnnotateLayerProperties, self).put_FeatureLinked(flag)
    def get_FeatureLinked(self):
        '''Method IAnnotateLayerProperties.get_FeatureLinked

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnotateLayerProperties, self).get_FeatureLinked()
    def put_Priority(self, Priority):
        '''Method IAnnotateLayerProperties.put_Priority

           INPUT
            Priority            : long'''
        return super(IAnnotateLayerProperties, self).put_Priority(Priority)
    def get_Priority(self):
        '''Method IAnnotateLayerProperties.get_Priority

           OUTPUT
            Priority            : long*'''
        return super(IAnnotateLayerProperties, self).get_Priority()
    def get_DisplayAnnotation(self):
        '''Method IAnnotateLayerProperties.get_DisplayAnnotation

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IAnnotateLayerProperties, self).get_DisplayAnnotation()
    def put_DisplayAnnotation(self, Value):
        '''Method IAnnotateLayerProperties.put_DisplayAnnotation

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IAnnotateLayerProperties, self).put_DisplayAnnotation(Value)
    def put_WhereClause(self, WhereClause):
        '''Method IAnnotateLayerProperties.put_WhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(IAnnotateLayerProperties, self).put_WhereClause(WhereClause)
    def get_WhereClause(self):
        '''Method IAnnotateLayerProperties.get_WhereClause

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IAnnotateLayerProperties, self).get_WhereClause()
    def putref_GraphicsContainer(self, GraphicsContainer):
        '''Method IAnnotateLayerProperties.putref_GraphicsContainer

           INPUT
            GraphicsContainer   : IGraphicsContainer*'''
        return super(IAnnotateLayerProperties, self).putref_GraphicsContainer(GraphicsContainer)
    def get_GraphicsContainer(self):
        '''Method IAnnotateLayerProperties.get_GraphicsContainer

           OUTPUT
            GraphicsContainer   : IGraphicsContainer**'''
        return super(IAnnotateLayerProperties, self).get_GraphicsContainer()
    def get_AddUnplacedToGraphicsContainer(self):
        '''Method IAnnotateLayerProperties.get_AddUnplacedToGraphicsContainer

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IAnnotateLayerProperties, self).get_AddUnplacedToGraphicsContainer()
    def put_AddUnplacedToGraphicsContainer(self, Value):
        '''Method IAnnotateLayerProperties.put_AddUnplacedToGraphicsContainer

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IAnnotateLayerProperties, self).put_AddUnplacedToGraphicsContainer(Value)
    AddUnplacedToGraphicsContainer = property(get_AddUnplacedToGraphicsContainer, put_AddUnplacedToGraphicsContainer, None)
    AnnotationMaximumScale = property(get_AnnotationMaximumScale, put_AnnotationMaximumScale, None)
    AnnotationMinimumScale = property(get_AnnotationMinimumScale, put_AnnotationMinimumScale, None)
    Class = property(get_Class, put_Class, None)
    CreateUnplacedElements = property(get_CreateUnplacedElements, put_CreateUnplacedElements, None)
    DisplayAnnotation = property(get_DisplayAnnotation, put_DisplayAnnotation, None)
    Extent = property(get_Extent, put_Extent, None)
    FeatureLayer = property(get_FeatureLayer, putref_FeatureLayer, None)
    FeatureLinked = property(get_FeatureLinked, put_FeatureLinked, None)
    GraphicsContainer = property(get_GraphicsContainer, putref_GraphicsContainer, None)
    LabelWhichFeatures = property(get_LabelWhichFeatures, put_LabelWhichFeatures, None)
    Priority = property(get_Priority, put_Priority, None)
    UseOutput = property(get_UseOutput, put_UseOutput, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IAnnotateLayerPropertiesCollection(_esriCarto.IAnnotateLayerPropertiesCollection):
    _IID = uuid.UUID('1d5849f2-0d33-11d2-a26f-080009b6f22b')
    def Add(self, Item):
        '''Method IAnnotateLayerPropertiesCollection.Add

           INPUT
            Item                : IAnnotateLayerProperties*'''
        return super(IAnnotateLayerPropertiesCollection, self).Add(Item)
    def get_Count(self):
        '''Method IAnnotateLayerPropertiesCollection.get_Count

           OUTPUT
            Count               : long*'''
        return super(IAnnotateLayerPropertiesCollection, self).get_Count()
    def QueryItem(self, Index):
        '''Method IAnnotateLayerPropertiesCollection.QueryItem

           INPUT
            Index               : long

           OUTPUTS
            Item                : IAnnotateLayerProperties**
            placedElements      : IElementCollection**
            unplacedElements    : IElementCollection**'''
        return super(IAnnotateLayerPropertiesCollection, self).QueryItem(Index)
    def Clear(self):
        '''Method IAnnotateLayerPropertiesCollection.Clear'''
        return super(IAnnotateLayerPropertiesCollection, self).Clear()
    def Remove(self, Layerprops):
        '''Method IAnnotateLayerPropertiesCollection.Remove

           INPUT
            Layerprops          : IAnnotateLayerProperties*'''
        return super(IAnnotateLayerPropertiesCollection, self).Remove(Layerprops)
    def Sort(self):
        '''Method IAnnotateLayerPropertiesCollection.Sort'''
        return super(IAnnotateLayerPropertiesCollection, self).Sort()
    Count = property(get_Count, None, None)

class IAnnotateMapProperties(_esriCarto.IAnnotateMapProperties):
    _IID = uuid.UUID('027f41b3-0f77-11d2-a270-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IAnnotateMapProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_AnnotateLayerPropertiesCollection(self, annoLayerPropsCol):
        '''Method IAnnotateMapProperties.putref_AnnotateLayerPropertiesCollection

           INPUT
            annoLayerPropsCol   : IAnnotateLayerPropertiesCollection*'''
        return super(IAnnotateMapProperties, self).putref_AnnotateLayerPropertiesCollection(annoLayerPropsCol)
    def get_AnnotateLayerPropertiesCollection(self):
        '''Method IAnnotateMapProperties.get_AnnotateLayerPropertiesCollection

           OUTPUT
            annoLayerPropsCol   : IAnnotateLayerPropertiesCollection**'''
        return super(IAnnotateMapProperties, self).get_AnnotateLayerPropertiesCollection()
    AnnotateLayerPropertiesCollection = property(get_AnnotateLayerPropertiesCollection, putref_AnnotateLayerPropertiesCollection, None)

class IFrameDecoration(_esriCarto.IFrameDecoration):
    _IID = uuid.UUID('6a75a961-36fc-44a9-8baf-30195de20c58')

    def __init__(self, *args, **kw):
        super(IFrameDecoration, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IFrameDecoration.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IFrameDecoration, self).get_Name()
    def put_Name(self, Name):
        '''Method IFrameDecoration.put_Name

           INPUT
            Name                : BSTR'''
        return super(IFrameDecoration, self).put_Name(Name)
    def get_Color(self):
        '''Method IFrameDecoration.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IFrameDecoration, self).get_Color()
    def put_Color(self, Color):
        '''Method IFrameDecoration.put_Color

           INPUT
            Color               : IColor*'''
        return super(IFrameDecoration, self).put_Color(Color)
    def get_HorizontalSpacing(self):
        '''Method IFrameDecoration.get_HorizontalSpacing

           OUTPUT
            points              : double*'''
        return super(IFrameDecoration, self).get_HorizontalSpacing()
    def put_HorizontalSpacing(self, points):
        '''Method IFrameDecoration.put_HorizontalSpacing

           INPUT
            points              : double'''
        return super(IFrameDecoration, self).put_HorizontalSpacing(points)
    def get_VerticalSpacing(self):
        '''Method IFrameDecoration.get_VerticalSpacing

           OUTPUT
            points              : double*'''
        return super(IFrameDecoration, self).get_VerticalSpacing()
    def put_VerticalSpacing(self, points):
        '''Method IFrameDecoration.put_VerticalSpacing

           INPUT
            points              : double'''
        return super(IFrameDecoration, self).put_VerticalSpacing(points)
    def get_CornerRounding(self):
        '''Method IFrameDecoration.get_CornerRounding

           OUTPUT
            rounding            : short*'''
        return super(IFrameDecoration, self).get_CornerRounding()
    def put_CornerRounding(self, rounding):
        '''Method IFrameDecoration.put_CornerRounding

           INPUT
            rounding            : short'''
        return super(IFrameDecoration, self).put_CornerRounding(rounding)
    def QueryBounds(self, Display, Geometry, Bounds):
        '''Method IFrameDecoration.QueryBounds

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*
            Bounds              : IEnvelope*'''
        return super(IFrameDecoration, self).QueryBounds(Display, Geometry, Bounds)
    def GetGeometry(self, Display, Shape):
        '''Method IFrameDecoration.GetGeometry

           INPUTS
            Display             : IDisplay*
            Shape               : IGeometry*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IFrameDecoration, self).GetGeometry(Display, Shape)
    def Draw(self, Display, Geometry):
        '''Method IFrameDecoration.Draw

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*'''
        return super(IFrameDecoration, self).Draw(Display, Geometry)
    Color = property(get_Color, put_Color, None)
    CornerRounding = property(get_CornerRounding, put_CornerRounding, None)
    HorizontalSpacing = property(get_HorizontalSpacing, put_HorizontalSpacing, None)
    Name = property(get_Name, put_Name, None)
    VerticalSpacing = property(get_VerticalSpacing, put_VerticalSpacing, None)

class ISymbolBorder(_esriCarto.ISymbolBorder):
    _IID = uuid.UUID('e4240308-dd41-11d2-b868-00600802e603')

    def __init__(self, *args, **kw):
        super(ISymbolBorder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LineSymbol(self):
        '''Method ISymbolBorder.get_LineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ISymbolBorder, self).get_LineSymbol()
    def put_LineSymbol(self, Symbol):
        '''Method ISymbolBorder.put_LineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ISymbolBorder, self).put_LineSymbol(Symbol)
    def get_CornerRounding(self):
        '''Method ISymbolBorder.get_CornerRounding

           OUTPUT
            rounding            : short*'''
        return super(ISymbolBorder, self).get_CornerRounding()
    def put_CornerRounding(self, rounding):
        '''Method ISymbolBorder.put_CornerRounding

           INPUT
            rounding            : short'''
        return super(ISymbolBorder, self).put_CornerRounding(rounding)
    def get_Name(self):
        '''Method IBorder.get_Name (from IBorder)

           OUTPUT
            Name                : BSTR*'''
        return super(ISymbolBorder, self).get_Name()
    def put_Name(self, Name):
        '''Method IBorder.put_Name (from IBorder)

           INPUT
            Name                : BSTR'''
        return super(ISymbolBorder, self).put_Name(Name)
    def get_Gap(self):
        '''Method IBorder.get_Gap (from IBorder)

           OUTPUT
            Gap                 : double*'''
        return super(ISymbolBorder, self).get_Gap()
    def put_Gap(self, Gap):
        '''Method IBorder.put_Gap (from IBorder)

           INPUT
            Gap                 : double'''
        return super(ISymbolBorder, self).put_Gap(Gap)
    def QueryBounds(self, Display, Geometry, Bounds):
        '''Method IBorder.QueryBounds (from IBorder)

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*
            Bounds              : IEnvelope*'''
        return super(ISymbolBorder, self).QueryBounds(Display, Geometry, Bounds)
    def GetGeometry(self, Display, Shape):
        '''Method IBorder.GetGeometry (from IBorder)

           INPUTS
            Display             : IDisplay*
            Shape               : IGeometry*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(ISymbolBorder, self).GetGeometry(Display, Shape)
    def Draw(self, Display, Geometry):
        '''Method IBorder.Draw (from IBorder)

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*'''
        return super(ISymbolBorder, self).Draw(Display, Geometry)
    CornerRounding = property(get_CornerRounding, put_CornerRounding, None)
    Gap = property(get_Gap, put_Gap, None)
    LineSymbol = property(get_LineSymbol, put_LineSymbol, None)
    Name = property(get_Name, put_Name, None)

class ISymbolBackground(_esriCarto.ISymbolBackground):
    _IID = uuid.UUID('4fd8cbb7-e13b-11d2-b868-00600802e603')

    def __init__(self, *args, **kw):
        super(ISymbolBackground, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FillSymbol(self):
        '''Method ISymbolBackground.get_FillSymbol

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(ISymbolBackground, self).get_FillSymbol()
    def put_FillSymbol(self, Symbol):
        '''Method ISymbolBackground.put_FillSymbol

           INPUT
            Symbol              : IFillSymbol*'''
        return super(ISymbolBackground, self).put_FillSymbol(Symbol)
    def get_CornerRounding(self):
        '''Method ISymbolBackground.get_CornerRounding

           OUTPUT
            rounding            : short*'''
        return super(ISymbolBackground, self).get_CornerRounding()
    def put_CornerRounding(self, rounding):
        '''Method ISymbolBackground.put_CornerRounding

           INPUT
            rounding            : short'''
        return super(ISymbolBackground, self).put_CornerRounding(rounding)
    def get_Name(self):
        '''Method IBackground.get_Name (from IBackground)

           OUTPUT
            Name                : BSTR*'''
        return super(ISymbolBackground, self).get_Name()
    def put_Name(self, Name):
        '''Method IBackground.put_Name (from IBackground)

           INPUT
            Name                : BSTR'''
        return super(ISymbolBackground, self).put_Name(Name)
    def get_Gap(self):
        '''Method IBackground.get_Gap (from IBackground)

           OUTPUT
            Gap                 : double*'''
        return super(ISymbolBackground, self).get_Gap()
    def put_Gap(self, Gap):
        '''Method IBackground.put_Gap (from IBackground)

           INPUT
            Gap                 : double'''
        return super(ISymbolBackground, self).put_Gap(Gap)
    def QueryBounds(self, Display, Geometry, Bounds):
        '''Method IBackground.QueryBounds (from IBackground)

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*
            Bounds              : IEnvelope*'''
        return super(ISymbolBackground, self).QueryBounds(Display, Geometry, Bounds)
    def GetGeometry(self, Display, Shape):
        '''Method IBackground.GetGeometry (from IBackground)

           INPUTS
            Display             : IDisplay*
            Shape               : IGeometry*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(ISymbolBackground, self).GetGeometry(Display, Shape)
    def Draw(self, Display, Geometry):
        '''Method IBackground.Draw (from IBackground)

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*'''
        return super(ISymbolBackground, self).Draw(Display, Geometry)
    CornerRounding = property(get_CornerRounding, put_CornerRounding, None)
    FillSymbol = property(get_FillSymbol, put_FillSymbol, None)
    Gap = property(get_Gap, put_Gap, None)
    Name = property(get_Name, put_Name, None)

class IQuerySize(_esriCarto.IQuerySize):
    _IID = uuid.UUID('4d582692-c52a-4287-9fcf-d6286c4775af')
    def QuerySize(self):
        '''Method IQuerySize.QuerySize

           OUTPUTS
            widthPoints         : double*
            heightPoints        : double*'''
        return super(IQuerySize, self).QuerySize()

class ISymbolShadow(_esriCarto.ISymbolShadow):
    _IID = uuid.UUID('19b9edd2-fd44-4a45-b25c-9b76fc7045c2')

    def __init__(self, *args, **kw):
        super(ISymbolShadow, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FillSymbol(self):
        '''Method ISymbolShadow.get_FillSymbol

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(ISymbolShadow, self).get_FillSymbol()
    def put_FillSymbol(self, Symbol):
        '''Method ISymbolShadow.put_FillSymbol

           INPUT
            Symbol              : IFillSymbol*'''
        return super(ISymbolShadow, self).put_FillSymbol(Symbol)
    def get_CornerRounding(self):
        '''Method ISymbolShadow.get_CornerRounding

           OUTPUT
            rounding            : short*'''
        return super(ISymbolShadow, self).get_CornerRounding()
    def put_CornerRounding(self, rounding):
        '''Method ISymbolShadow.put_CornerRounding

           INPUT
            rounding            : short'''
        return super(ISymbolShadow, self).put_CornerRounding(rounding)
    def get_Name(self):
        '''Method IShadow.get_Name (from IShadow)

           OUTPUT
            Name                : BSTR*'''
        return super(ISymbolShadow, self).get_Name()
    def put_Name(self, Name):
        '''Method IShadow.put_Name (from IShadow)

           INPUT
            Name                : BSTR'''
        return super(ISymbolShadow, self).put_Name(Name)
    def get_HorizontalSpacing(self):
        '''Method IShadow.get_HorizontalSpacing (from IShadow)

           OUTPUT
            points              : double*'''
        return super(ISymbolShadow, self).get_HorizontalSpacing()
    def put_HorizontalSpacing(self, points):
        '''Method IShadow.put_HorizontalSpacing (from IShadow)

           INPUT
            points              : double'''
        return super(ISymbolShadow, self).put_HorizontalSpacing(points)
    def get_VerticalSpacing(self):
        '''Method IShadow.get_VerticalSpacing (from IShadow)

           OUTPUT
            points              : double*'''
        return super(ISymbolShadow, self).get_VerticalSpacing()
    def put_VerticalSpacing(self, points):
        '''Method IShadow.put_VerticalSpacing (from IShadow)

           INPUT
            points              : double'''
        return super(ISymbolShadow, self).put_VerticalSpacing(points)
    def QueryBounds(self, Display, Geometry, Bounds):
        '''Method IShadow.QueryBounds (from IShadow)

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*
            Bounds              : IEnvelope*'''
        return super(ISymbolShadow, self).QueryBounds(Display, Geometry, Bounds)
    def GetGeometry(self, Display, Shape):
        '''Method IShadow.GetGeometry (from IShadow)

           INPUTS
            Display             : IDisplay*
            Shape               : IGeometry*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(ISymbolShadow, self).GetGeometry(Display, Shape)
    def Draw(self, Display, Geometry):
        '''Method IShadow.Draw (from IShadow)

           INPUTS
            Display             : IDisplay*
            Geometry            : IGeometry*'''
        return super(ISymbolShadow, self).Draw(Display, Geometry)
    CornerRounding = property(get_CornerRounding, put_CornerRounding, None)
    FillSymbol = property(get_FillSymbol, put_FillSymbol, None)
    HorizontalSpacing = property(get_HorizontalSpacing, put_HorizontalSpacing, None)
    Name = property(get_Name, put_Name, None)
    VerticalSpacing = property(get_VerticalSpacing, put_VerticalSpacing, None)

class IElementShutdown(_esriCarto.IElementShutdown):
    _IID = uuid.UUID('36313019-58b7-4509-89d8-0f573b69fd18')
    def Shutdown(self):
        '''Method IElementShutdown.Shutdown'''
        return super(IElementShutdown, self).Shutdown()

class IElementEditVertices(_esriCarto.IElementEditVertices):
    _IID = uuid.UUID('86f32b62-7667-11d2-a2d3-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IElementEditVertices, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetMoveVerticesSelectionTracker(self):
        '''Method IElementEditVertices.GetMoveVerticesSelectionTracker

           OUTPUT
            tracker             : ISelectionTracker**'''
        return super(IElementEditVertices, self).GetMoveVerticesSelectionTracker()
    def get_MovingVertices(self):
        '''Method IElementEditVertices.get_MovingVertices

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IElementEditVertices, self).get_MovingVertices()
    def put_MovingVertices(self, flag):
        '''Method IElementEditVertices.put_MovingVertices

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IElementEditVertices, self).put_MovingVertices(flag)
    MovingVertices = property(get_MovingVertices, put_MovingVertices, None)

class IElementEditCallout(_esriCarto.IElementEditCallout):
    _IID = uuid.UUID('b6c88d50-e8b6-11d4-8408-0080c79f0371')

    def __init__(self, *args, **kw):
        super(IElementEditCallout, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetMoveTextSelectionTracker(self):
        '''Method IElementEditCallout.GetMoveTextSelectionTracker

           OUTPUT
            tracker             : ISelectionTracker**'''
        return super(IElementEditCallout, self).GetMoveTextSelectionTracker()
    def get_EditingCallout(self):
        '''Method IElementEditCallout.get_EditingCallout

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IElementEditCallout, self).get_EditingCallout()
    def put_EditingCallout(self, flag):
        '''Method IElementEditCallout.put_EditingCallout

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IElementEditCallout, self).put_EditingCallout(flag)
    EditingCallout = property(get_EditingCallout, put_EditingCallout, None)

class IGraphicsComposite(_esriCarto.IGraphicsComposite):
    _IID = uuid.UUID('969cde4a-82d4-11d2-87dd-0000f8751720')
    def get_Graphics(self, Display, Data):
        '''Method IGraphicsComposite.get_Graphics

           INPUTS
            Display             : IDisplay*
            Data                : IUnknown*

           OUTPUT
            Graphics            : IEnumElement**'''
        return super(IGraphicsComposite, self).get_Graphics(Display, Data)

class ILineElement(_esriCarto.ILineElement):
    _IID = uuid.UUID('ff44a611-dcf6-11d0-838b-080009b996cc')

    def __init__(self, *args, **kw):
        super(ILineElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method ILineElement.get_Symbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ILineElement, self).get_Symbol()
    def put_Symbol(self, Symbol):
        '''Method ILineElement.put_Symbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ILineElement, self).put_Symbol(Symbol)
    Symbol = property(get_Symbol, put_Symbol, None)

class IMarkerElement(_esriCarto.IMarkerElement):
    _IID = uuid.UUID('530fd711-ef0c-11d0-83a0-080009b996cc')

    def __init__(self, *args, **kw):
        super(IMarkerElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method IMarkerElement.get_Symbol

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IMarkerElement, self).get_Symbol()
    def put_Symbol(self, Symbol):
        '''Method IMarkerElement.put_Symbol

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IMarkerElement, self).put_Symbol(Symbol)
    Symbol = property(get_Symbol, put_Symbol, None)

class IFillShapeElement(_esriCarto.IFillShapeElement):
    _IID = uuid.UUID('3e150c0d-19f5-11d3-9f9e-00c04f6bc8dd')

    def __init__(self, *args, **kw):
        super(IFillShapeElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method IFillShapeElement.get_Symbol

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(IFillShapeElement, self).get_Symbol()
    def put_Symbol(self, Symbol):
        '''Method IFillShapeElement.put_Symbol

           INPUT
            Symbol              : IFillSymbol*'''
        return super(IFillShapeElement, self).put_Symbol(Symbol)
    Symbol = property(get_Symbol, put_Symbol, None)

class ITextElement(_esriCarto.ITextElement):
    _IID = uuid.UUID('204034d2-f6ea-11d0-83ad-080009b996cc')

    def __init__(self, *args, **kw):
        super(ITextElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method ITextElement.get_Symbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ITextElement, self).get_Symbol()
    def put_Symbol(self, Symbol):
        '''Method ITextElement.put_Symbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(ITextElement, self).put_Symbol(Symbol)
    def get_Text(self):
        '''Method ITextElement.get_Text

           OUTPUT
            Text                : BSTR*'''
        return super(ITextElement, self).get_Text()
    def put_Text(self, Text):
        '''Method ITextElement.put_Text

           INPUT
            Text                : BSTR'''
        return super(ITextElement, self).put_Text(Text)
    def get_ScaleText(self):
        '''Method ITextElement.get_ScaleText

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ITextElement, self).get_ScaleText()
    def put_ScaleText(self, Scale):
        '''Method ITextElement.put_ScaleText

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ITextElement, self).put_ScaleText(Scale)
    ScaleText = property(get_ScaleText, put_ScaleText, None)
    Symbol = property(get_Symbol, put_Symbol, None)
    Text = property(get_Text, put_Text, None)

class IGroupElement2(_esriCarto.IGroupElement2):
    _IID = uuid.UUID('980e4829-83f1-42dd-a1bd-1b30a1824de2')

    def __init__(self, *args, **kw):
        super(IGroupElement2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Elements(self):
        '''Method IGroupElement2.get_Elements

           OUTPUT
            Elements            : IEnumElement**'''
        return super(IGroupElement2, self).get_Elements()
    def putref_Elements(self, Elements):
        '''Method IGroupElement2.putref_Elements

           INPUT
            Elements            : IEnumElement*'''
        return super(IGroupElement2, self).putref_Elements(Elements)
    def get_ElementCount(self):
        '''Method IGroupElement2.get_ElementCount

           OUTPUT
            Count               : long*'''
        return super(IGroupElement2, self).get_ElementCount()
    def get_Element(self, Index):
        '''Method IGroupElement2.get_Element

           INPUT
            Index               : long

           OUTPUT
            Element             : IElement**'''
        return super(IGroupElement2, self).get_Element(Index)
    def AddElement(self, Element):
        '''Method IGroupElement2.AddElement

           INPUT
            Element             : IElement*'''
        return super(IGroupElement2, self).AddElement(Element)
    def DeleteElement(self, Element):
        '''Method IGroupElement2.DeleteElement

           INPUT
            Element             : IElement*'''
        return super(IGroupElement2, self).DeleteElement(Element)
    def ClearElements(self):
        '''Method IGroupElement2.ClearElements'''
        return super(IGroupElement2, self).ClearElements()
    def Refresh(self):
        '''Method IGroupElement2.Refresh'''
        return super(IGroupElement2, self).Refresh()
    ElementCount = property(get_ElementCount, None, None)
    Elements = property(get_Elements, putref_Elements, None)
    Element = IndexProperty(get_Element, None)

class IGroupElement3(_esriCarto.IGroupElement3):
    _IID = uuid.UUID('980e4829-83f1-42dd-a1bd-1b30a1824de3')

    def __init__(self, *args, **kw):
        super(IGroupElement3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Elements(self):
        '''Method IGroupElement3.get_Elements

           OUTPUT
            Elements            : IEnumElement**'''
        return super(IGroupElement3, self).get_Elements()
    def putref_Elements(self, Elements):
        '''Method IGroupElement3.putref_Elements

           INPUT
            Elements            : IEnumElement*'''
        return super(IGroupElement3, self).putref_Elements(Elements)
    def get_ElementCount(self):
        '''Method IGroupElement3.get_ElementCount

           OUTPUT
            Count               : long*'''
        return super(IGroupElement3, self).get_ElementCount()
    def get_Element(self, Index):
        '''Method IGroupElement3.get_Element

           INPUT
            Index               : long

           OUTPUT
            Element             : IElement**'''
        return super(IGroupElement3, self).get_Element(Index)
    def AddElement(self, Element):
        '''Method IGroupElement3.AddElement

           INPUT
            Element             : IElement*'''
        return super(IGroupElement3, self).AddElement(Element)
    def DeleteElement(self, Element):
        '''Method IGroupElement3.DeleteElement

           INPUT
            Element             : IElement*'''
        return super(IGroupElement3, self).DeleteElement(Element)
    def ClearElements(self):
        '''Method IGroupElement3.ClearElements'''
        return super(IGroupElement3, self).ClearElements()
    def Refresh(self):
        '''Method IGroupElement3.Refresh'''
        return super(IGroupElement3, self).Refresh()
    def ReplaceElement(self, existingElement, newElement):
        '''Method IGroupElement3.ReplaceElement

           INPUTS
            existingElement     : IElement*
            newElement          : IElement*'''
        return super(IGroupElement3, self).ReplaceElement(existingElement, newElement)
    ElementCount = property(get_ElementCount, None, None)
    Elements = property(get_Elements, putref_Elements, None)
    Element = IndexProperty(get_Element, None)

class IMultiPartTextElement(_esriCarto.IMultiPartTextElement):
    _IID = uuid.UUID('b0db3a18-85c0-4c1b-97d2-a9501552ecaf')
    def ConvertToMultiPart(self, pDisplay):
        '''Method IMultiPartTextElement.ConvertToMultiPart

           INPUT
            pDisplay            : IDisplay*'''
        return super(IMultiPartTextElement, self).ConvertToMultiPart(pDisplay)
    def ConvertToSinglePart(self):
        '''Method IMultiPartTextElement.ConvertToSinglePart'''
        return super(IMultiPartTextElement, self).ConvertToSinglePart()
    def get_IsMultipart(self):
        '''Method IMultiPartTextElement.get_IsMultipart

           OUTPUT
            IsMultiPartElement  : VARIANT_BOOL*'''
        return super(IMultiPartTextElement, self).get_IsMultipart()
    def get_PartCount(self):
        '''Method IMultiPartTextElement.get_PartCount

           OUTPUT
            Count               : long*'''
        return super(IMultiPartTextElement, self).get_PartCount()
    def QueryPart(self, Index):
        '''Method IMultiPartTextElement.QueryPart

           INPUT
            Index               : long

           OUTPUT
            Element             : IElement**'''
        return super(IMultiPartTextElement, self).QueryPart(Index)
    def ReplacePart(self, Index, Text, Geometry):
        '''Method IMultiPartTextElement.ReplacePart

           INPUTS
            Index               : long
            Text                : BSTR
            Geometry            : IGeometry*'''
        return super(IMultiPartTextElement, self).ReplacePart(Index, Text, Geometry)
    def InsertPart(self, Index, Text, Geometry):
        '''Method IMultiPartTextElement.InsertPart

           INPUTS
            Index               : long
            Text                : BSTR
            Geometry            : IGeometry*'''
        return super(IMultiPartTextElement, self).InsertPart(Index, Text, Geometry)
    def DeletePart(self, Index):
        '''Method IMultiPartTextElement.DeletePart

           INPUT
            Index               : long'''
        return super(IMultiPartTextElement, self).DeletePart(Index)
    def SynchronizeParts(self, pDisplay):
        '''Method IMultiPartTextElement.SynchronizeParts

           INPUT
            pDisplay            : IDisplay*'''
        return super(IMultiPartTextElement, self).SynchronizeParts(pDisplay)
    IsMultipart = property(get_IsMultipart, None, None)
    PartCount = property(get_PartCount, None, None)

class ISelectionEvents(_esriCarto.ISelectionEvents):
    _IID = uuid.UUID('07e11311-d615-11d1-a21b-080009b6f22b')
    def SelectionChanged(self):
        '''Method ISelectionEvents.SelectionChanged'''
        return super(ISelectionEvents, self).SelectionChanged()

class IOverflowGraphicsContainer(_esriCarto.IOverflowGraphicsContainer):
    _IID = uuid.UUID('9c0520c1-a0d8-11d2-a2fe-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IOverflowGraphicsContainer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_OverflowElements(self):
        '''Method IOverflowGraphicsContainer.get_OverflowElements

           OUTPUT
            Elements            : IElementCollection**'''
        return super(IOverflowGraphicsContainer, self).get_OverflowElements()
    def putref_OverflowElements(self, Elements):
        '''Method IOverflowGraphicsContainer.putref_OverflowElements

           INPUT
            Elements            : IElementCollection*'''
        return super(IOverflowGraphicsContainer, self).putref_OverflowElements(Elements)
    def DeleteAllOverflowElements(self):
        '''Method IOverflowGraphicsContainer.DeleteAllOverflowElements'''
        return super(IOverflowGraphicsContainer, self).DeleteAllOverflowElements()
    def DeleteOverflowElement(self, pElement):
        '''Method IOverflowGraphicsContainer.DeleteOverflowElement

           INPUT
            pElement            : IElement*'''
        return super(IOverflowGraphicsContainer, self).DeleteOverflowElement(pElement)
    def AddOverflowElement(self, pElement):
        '''Method IOverflowGraphicsContainer.AddOverflowElement

           INPUT
            pElement            : IElement*'''
        return super(IOverflowGraphicsContainer, self).AddOverflowElement(pElement)
    OverflowElements = property(get_OverflowElements, putref_OverflowElements, None)

class IElementOperation(_esriCarto.IElementOperation):
    _IID = uuid.UUID('4b96a442-fa41-11d0-83af-080009b996cc')

    def __init__(self, *args, **kw):
        super(IElementOperation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IElementOperation.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IElementOperation, self).put_Name(_arg1)
    def putref_Elements(self, _arg1):
        '''Method IElementOperation.putref_Elements

           INPUT
            _arg1               : IEnumElement*'''
        return super(IElementOperation, self).putref_Elements(_arg1)
    Elements = property(None, putref_Elements, None)
    Name = property(None, put_Name, None)

class IElementEditVerticesOperation(_esriCarto.IElementEditVerticesOperation):
    _IID = uuid.UUID('bf4fad52-798a-11d2-a2d4-080009b6f22b')

    def __init__(self, *args, **kw):
        super(IElementEditVerticesOperation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Geometry(self, _arg1):
        '''Method IElementEditVerticesOperation.put_Geometry

           INPUT
            _arg1               : IGeometry*'''
        return super(IElementEditVerticesOperation, self).put_Geometry(_arg1)
    def put_Name(self, _arg1):
        '''Method IElementOperation.put_Name (from IElementOperation)

           INPUT
            _arg1               : BSTR'''
        return super(IElementEditVerticesOperation, self).put_Name(_arg1)
    def putref_Elements(self, _arg1):
        '''Method IElementOperation.putref_Elements (from IElementOperation)

           INPUT
            _arg1               : IEnumElement*'''
        return super(IElementEditVerticesOperation, self).putref_Elements(_arg1)
    Elements = property(None, putref_Elements, None)
    Geometry = property(None, put_Geometry, None)
    Name = property(None, put_Name, None)

class IGraphicsContainerSelect(_esriCarto.IGraphicsContainerSelect):
    _IID = uuid.UUID('d09411d2-4bb4-11d1-b6cc-080009b996cc')

    def __init__(self, *args, **kw):
        super(IGraphicsContainerSelect, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SelectElement(self, Element):
        '''Method IGraphicsContainerSelect.SelectElement

           INPUT
            Element             : IElement*'''
        return super(IGraphicsContainerSelect, self).SelectElement(Element)
    def SelectElements(self, Elements):
        '''Method IGraphicsContainerSelect.SelectElements

           INPUT
            Elements            : IEnumElement*'''
        return super(IGraphicsContainerSelect, self).SelectElements(Elements)
    def SelectAllElements(self):
        '''Method IGraphicsContainerSelect.SelectAllElements'''
        return super(IGraphicsContainerSelect, self).SelectAllElements()
    def UnselectElement(self, Element):
        '''Method IGraphicsContainerSelect.UnselectElement

           INPUT
            Element             : IElement*'''
        return super(IGraphicsContainerSelect, self).UnselectElement(Element)
    def UnselectElements(self, Elements):
        '''Method IGraphicsContainerSelect.UnselectElements

           INPUT
            Elements            : IEnumElement*'''
        return super(IGraphicsContainerSelect, self).UnselectElements(Elements)
    def UnselectAllElements(self):
        '''Method IGraphicsContainerSelect.UnselectAllElements'''
        return super(IGraphicsContainerSelect, self).UnselectAllElements()
    def get_SelectedElements(self):
        '''Method IGraphicsContainerSelect.get_SelectedElements

           OUTPUT
            Elements            : IEnumElement**'''
        return super(IGraphicsContainerSelect, self).get_SelectedElements()
    def get_ElementSelectionCount(self):
        '''Method IGraphicsContainerSelect.get_ElementSelectionCount

           OUTPUT
            Count               : long*'''
        return super(IGraphicsContainerSelect, self).get_ElementSelectionCount()
    def SelectedElement(self, Index):
        '''Method IGraphicsContainerSelect.SelectedElement

           INPUT
            Index               : long

           OUTPUT
            Element             : IElement**'''
        return super(IGraphicsContainerSelect, self).SelectedElement(Index)
    def SelectionTracker(self, Index):
        '''Method IGraphicsContainerSelect.SelectionTracker

           INPUT
            Index               : long

           OUTPUT
            tracker             : ISelectionTracker**'''
        return super(IGraphicsContainerSelect, self).SelectionTracker(Index)
    def ElementSelected(self, Element):
        '''Method IGraphicsContainerSelect.ElementSelected

           INPUT
            Element             : IElement*

           OUTPUT
            ElementSelected     : VARIANT_BOOL*'''
        return super(IGraphicsContainerSelect, self).ElementSelected(Element)
    def get_DominantElement(self):
        '''Method IGraphicsContainerSelect.get_DominantElement

           OUTPUT
            dominantItem        : IElement**'''
        return super(IGraphicsContainerSelect, self).get_DominantElement()
    def putref_DominantElement(self, dominantItem):
        '''Method IGraphicsContainerSelect.putref_DominantElement

           INPUT
            dominantItem        : IElement*'''
        return super(IGraphicsContainerSelect, self).putref_DominantElement(dominantItem)
    def get_SelectionBounds(self, Display):
        '''Method IGraphicsContainerSelect.get_SelectionBounds

           INPUT
            Display             : IDisplay*

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IGraphicsContainerSelect, self).get_SelectionBounds(Display)
    DominantElement = property(get_DominantElement, putref_DominantElement, None)
    ElementSelectionCount = property(get_ElementSelectionCount, None, None)
    SelectedElements = property(get_SelectedElements, None, None)
    SelectionBounds = IndexProperty(get_SelectionBounds, None)

class IAnnotationElement(_esriCarto.IAnnotationElement):
    _IID = uuid.UUID('72266121-d4b9-11d2-a800-af8c10f4c95a')
    def get_Feature(self):
        '''Method IAnnotationElement.get_Feature

           OUTPUT
            Feature             : IFeature**'''
        return super(IAnnotationElement, self).get_Feature()
    Feature = property(get_Feature, None, None)

class IGroupSymbolElement(_esriCarto.IGroupSymbolElement):
    _IID = uuid.UUID('9e65c825-858c-11d3-9fc6-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IGroupSymbolElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SymbolID(self):
        '''Method IGroupSymbolElement.get_SymbolID

           OUTPUT
            SymbolID            : long*'''
        return super(IGroupSymbolElement, self).get_SymbolID()
    def put_SymbolID(self, SymbolID):
        '''Method IGroupSymbolElement.put_SymbolID

           INPUT
            SymbolID            : long'''
        return super(IGroupSymbolElement, self).put_SymbolID(SymbolID)
    def put_GroupSymbol(self, SymbolID, _arg2):
        '''Method IGroupSymbolElement.put_GroupSymbol

           INPUTS
            SymbolID            : long
            _arg2               : ISymbol*'''
        return super(IGroupSymbolElement, self).put_GroupSymbol(SymbolID, _arg2)
    def ExportToESRIAnno(self, stream):
        '''Method IGroupSymbolElement.ExportToESRIAnno

           INPUT
            stream              : IStream*'''
        return super(IGroupSymbolElement, self).ExportToESRIAnno(stream)
    def ImportFromESRIAnno(self, stream, SpatialReference):
        '''Method IGroupSymbolElement.ImportFromESRIAnno

           INPUTS
            stream              : IStream*
            SpatialReference    : ISpatialReference*'''
        return super(IGroupSymbolElement, self).ImportFromESRIAnno(stream, SpatialReference)
    def DrawESRIAnno(self, stream, SymbolCollection, spatialRef, Display):
        '''Method IGroupSymbolElement.DrawESRIAnno

           INPUTS
            stream              : IStream*
            SymbolCollection    : ISymbolCollection*
            spatialRef          : ISpatialReference*
            Display             : IDisplay*'''
        return super(IGroupSymbolElement, self).DrawESRIAnno(stream, SymbolCollection, spatialRef, Display)
    def get_XOffset(self):
        '''Method IGroupSymbolElement.get_XOffset

           OUTPUT
            XOffset             : double*'''
        return super(IGroupSymbolElement, self).get_XOffset()
    def put_XOffset(self, XOffset):
        '''Method IGroupSymbolElement.put_XOffset

           INPUT
            XOffset             : double'''
        return super(IGroupSymbolElement, self).put_XOffset(XOffset)
    def get_YOffset(self):
        '''Method IGroupSymbolElement.get_YOffset

           OUTPUT
            YOffset             : double*'''
        return super(IGroupSymbolElement, self).get_YOffset()
    def put_YOffset(self, YOffset):
        '''Method IGroupSymbolElement.put_YOffset

           INPUT
            YOffset             : double'''
        return super(IGroupSymbolElement, self).put_YOffset(YOffset)
    def get_VerticalAlignment(self):
        '''Method IGroupSymbolElement.get_VerticalAlignment

           OUTPUT
            vertAlignment       : esriTextVerticalAlignment*'''
        return super(IGroupSymbolElement, self).get_VerticalAlignment()
    def put_VerticalAlignment(self, vertAlignment):
        '''Method IGroupSymbolElement.put_VerticalAlignment

           INPUT
            vertAlignment       : esriTextVerticalAlignment'''
        return super(IGroupSymbolElement, self).put_VerticalAlignment(vertAlignment)
    def get_HorizontalAlignment(self):
        '''Method IGroupSymbolElement.get_HorizontalAlignment

           OUTPUT
            horizAlignment      : esriTextHorizontalAlignment*'''
        return super(IGroupSymbolElement, self).get_HorizontalAlignment()
    def put_HorizontalAlignment(self, horizAlignment):
        '''Method IGroupSymbolElement.put_HorizontalAlignment

           INPUT
            horizAlignment      : esriTextHorizontalAlignment'''
        return super(IGroupSymbolElement, self).put_HorizontalAlignment(horizAlignment)
    def get_FlipAngle(self):
        '''Method IGroupSymbolElement.get_FlipAngle

           OUTPUT
            FlipAngle           : double*'''
        return super(IGroupSymbolElement, self).get_FlipAngle()
    def put_FlipAngle(self, FlipAngle):
        '''Method IGroupSymbolElement.put_FlipAngle

           INPUT
            FlipAngle           : double'''
        return super(IGroupSymbolElement, self).put_FlipAngle(FlipAngle)
    def get_AnchorPoint(self):
        '''Method IGroupSymbolElement.get_AnchorPoint

           OUTPUT
            AnchorPoint         : IPoint**'''
        return super(IGroupSymbolElement, self).get_AnchorPoint()
    def put_AnchorPoint(self, AnchorPoint):
        '''Method IGroupSymbolElement.put_AnchorPoint

           INPUT
            AnchorPoint         : IPoint*'''
        return super(IGroupSymbolElement, self).put_AnchorPoint(AnchorPoint)
    def get_Size(self):
        '''Method IGroupSymbolElement.get_Size

           OUTPUT
            pointSize           : double*'''
        return super(IGroupSymbolElement, self).get_Size()
    def put_Size(self, pointSize):
        '''Method IGroupSymbolElement.put_Size

           INPUT
            pointSize           : double'''
        return super(IGroupSymbolElement, self).put_Size(pointSize)
    def get_Color(self):
        '''Method IGroupSymbolElement.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IGroupSymbolElement, self).get_Color()
    def put_Color(self, Color):
        '''Method IGroupSymbolElement.put_Color

           INPUT
            Color               : IColor*'''
        return super(IGroupSymbolElement, self).put_Color(Color)
    def get_TextPath(self):
        '''Method IGroupSymbolElement.get_TextPath

           OUTPUT
            TextPath            : ITextPath**'''
        return super(IGroupSymbolElement, self).get_TextPath()
    def putref_TextPath(self, TextPath):
        '''Method IGroupSymbolElement.putref_TextPath

           INPUT
            TextPath            : ITextPath*'''
        return super(IGroupSymbolElement, self).putref_TextPath(TextPath)
    AnchorPoint = property(get_AnchorPoint, put_AnchorPoint, None)
    Color = property(get_Color, put_Color, None)
    FlipAngle = property(get_FlipAngle, put_FlipAngle, None)
    GroupSymbol = property(None, put_GroupSymbol, None)
    HorizontalAlignment = property(get_HorizontalAlignment, put_HorizontalAlignment, None)
    Size = property(get_Size, put_Size, None)
    SymbolID = property(get_SymbolID, put_SymbolID, None)
    TextPath = property(get_TextPath, putref_TextPath, None)
    VerticalAlignment = property(get_VerticalAlignment, put_VerticalAlignment, None)
    XOffset = property(get_XOffset, put_XOffset, None)
    YOffset = property(get_YOffset, put_YOffset, None)

class ISymbolCollectionElement(_esriCarto.ISymbolCollectionElement):
    _IID = uuid.UUID('9aec8465-b8c8-4099-95a8-49815539a8a7')

    def __init__(self, *args, **kw):
        super(ISymbolCollectionElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SymbolID(self):
        '''Method ISymbolCollectionElement.get_SymbolID

           OUTPUT
            SymbolID            : long*'''
        return super(ISymbolCollectionElement, self).get_SymbolID()
    def put_SharedSymbol(self, SymbolID, _arg2):
        '''Method ISymbolCollectionElement.put_SharedSymbol

           INPUTS
            SymbolID            : long
            _arg2               : ISymbol*'''
        return super(ISymbolCollectionElement, self).put_SharedSymbol(SymbolID, _arg2)
    def GetSharedSymbol(self):
        '''Method ISymbolCollectionElement.GetSharedSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ISymbolCollectionElement, self).GetSharedSymbol()
    def ExportToESRIAnno(self, stream):
        '''Method ISymbolCollectionElement.ExportToESRIAnno

           INPUT
            stream              : IStream*'''
        return super(ISymbolCollectionElement, self).ExportToESRIAnno(stream)
    def ImportFromESRIAnno(self, stream, SpatialReference, SymbolCollection):
        '''Method ISymbolCollectionElement.ImportFromESRIAnno

           INPUTS
            stream              : IStream*
            SpatialReference    : ISpatialReference*
            SymbolCollection    : ISymbolCollection*'''
        return super(ISymbolCollectionElement, self).ImportFromESRIAnno(stream, SpatialReference, SymbolCollection)
    def DrawESRIAnno(self, stream, SymbolCollection, spatialRef, Display):
        '''Method ISymbolCollectionElement.DrawESRIAnno

           INPUTS
            stream              : IStream*
            SymbolCollection    : ISymbolCollection*
            spatialRef          : ISpatialReference*
            Display             : IDisplay*'''
        return super(ISymbolCollectionElement, self).DrawESRIAnno(stream, SymbolCollection, spatialRef, Display)
    def get_XOffset(self):
        '''Method ISymbolCollectionElement.get_XOffset

           OUTPUT
            XOffset             : double*'''
        return super(ISymbolCollectionElement, self).get_XOffset()
    def put_XOffset(self, XOffset):
        '''Method ISymbolCollectionElement.put_XOffset

           INPUT
            XOffset             : double'''
        return super(ISymbolCollectionElement, self).put_XOffset(XOffset)
    def get_YOffset(self):
        '''Method ISymbolCollectionElement.get_YOffset

           OUTPUT
            YOffset             : double*'''
        return super(ISymbolCollectionElement, self).get_YOffset()
    def put_YOffset(self, YOffset):
        '''Method ISymbolCollectionElement.put_YOffset

           INPUT
            YOffset             : double'''
        return super(ISymbolCollectionElement, self).put_YOffset(YOffset)
    def get_VerticalAlignment(self):
        '''Method ISymbolCollectionElement.get_VerticalAlignment

           OUTPUT
            vertAlignment       : esriTextVerticalAlignment*'''
        return super(ISymbolCollectionElement, self).get_VerticalAlignment()
    def put_VerticalAlignment(self, vertAlignment):
        '''Method ISymbolCollectionElement.put_VerticalAlignment

           INPUT
            vertAlignment       : esriTextVerticalAlignment'''
        return super(ISymbolCollectionElement, self).put_VerticalAlignment(vertAlignment)
    def get_HorizontalAlignment(self):
        '''Method ISymbolCollectionElement.get_HorizontalAlignment

           OUTPUT
            horizAlignment      : esriTextHorizontalAlignment*'''
        return super(ISymbolCollectionElement, self).get_HorizontalAlignment()
    def put_HorizontalAlignment(self, horizAlignment):
        '''Method ISymbolCollectionElement.put_HorizontalAlignment

           INPUT
            horizAlignment      : esriTextHorizontalAlignment'''
        return super(ISymbolCollectionElement, self).put_HorizontalAlignment(horizAlignment)
    def get_FlipAngle(self):
        '''Method ISymbolCollectionElement.get_FlipAngle

           OUTPUT
            FlipAngle           : double*'''
        return super(ISymbolCollectionElement, self).get_FlipAngle()
    def put_FlipAngle(self, FlipAngle):
        '''Method ISymbolCollectionElement.put_FlipAngle

           INPUT
            FlipAngle           : double'''
        return super(ISymbolCollectionElement, self).put_FlipAngle(FlipAngle)
    def get_AnchorPoint(self):
        '''Method ISymbolCollectionElement.get_AnchorPoint

           OUTPUT
            AnchorPoint         : IPoint**'''
        return super(ISymbolCollectionElement, self).get_AnchorPoint()
    def put_AnchorPoint(self, AnchorPoint):
        '''Method ISymbolCollectionElement.put_AnchorPoint

           INPUT
            AnchorPoint         : IPoint*'''
        return super(ISymbolCollectionElement, self).put_AnchorPoint(AnchorPoint)
    def get_Size(self):
        '''Method ISymbolCollectionElement.get_Size

           OUTPUT
            pointSize           : double*'''
        return super(ISymbolCollectionElement, self).get_Size()
    def put_Size(self, pointSize):
        '''Method ISymbolCollectionElement.put_Size

           INPUT
            pointSize           : double'''
        return super(ISymbolCollectionElement, self).put_Size(pointSize)
    def get_Color(self):
        '''Method ISymbolCollectionElement.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(ISymbolCollectionElement, self).get_Color()
    def put_Color(self, Color):
        '''Method ISymbolCollectionElement.put_Color

           INPUT
            Color               : IColor*'''
        return super(ISymbolCollectionElement, self).put_Color(Color)
    def get_TextPath(self):
        '''Method ISymbolCollectionElement.get_TextPath

           OUTPUT
            TextPath            : ITextPath**'''
        return super(ISymbolCollectionElement, self).get_TextPath()
    def putref_TextPath(self, TextPath):
        '''Method ISymbolCollectionElement.putref_TextPath

           INPUT
            TextPath            : ITextPath*'''
        return super(ISymbolCollectionElement, self).putref_TextPath(TextPath)
    def get_CharacterSpacing(self):
        '''Method ISymbolCollectionElement.get_CharacterSpacing

           OUTPUT
            CharacterSpacing    : double*'''
        return super(ISymbolCollectionElement, self).get_CharacterSpacing()
    def put_CharacterSpacing(self, CharacterSpacing):
        '''Method ISymbolCollectionElement.put_CharacterSpacing

           INPUT
            CharacterSpacing    : double'''
        return super(ISymbolCollectionElement, self).put_CharacterSpacing(CharacterSpacing)
    def get_CharacterWidth(self):
        '''Method ISymbolCollectionElement.get_CharacterWidth

           OUTPUT
            CharacterWidth      : double*'''
        return super(ISymbolCollectionElement, self).get_CharacterWidth()
    def put_CharacterWidth(self, CharacterWidth):
        '''Method ISymbolCollectionElement.put_CharacterWidth

           INPUT
            CharacterWidth      : double'''
        return super(ISymbolCollectionElement, self).put_CharacterWidth(CharacterWidth)
    def get_WordSpacing(self):
        '''Method ISymbolCollectionElement.get_WordSpacing

           OUTPUT
            WordSpacing         : double*'''
        return super(ISymbolCollectionElement, self).get_WordSpacing()
    def put_WordSpacing(self, WordSpacing):
        '''Method ISymbolCollectionElement.put_WordSpacing

           INPUT
            WordSpacing         : double'''
        return super(ISymbolCollectionElement, self).put_WordSpacing(WordSpacing)
    def get_Leading(self):
        '''Method ISymbolCollectionElement.get_Leading

           OUTPUT
            Leading             : double*'''
        return super(ISymbolCollectionElement, self).get_Leading()
    def put_Leading(self, Leading):
        '''Method ISymbolCollectionElement.put_Leading

           INPUT
            Leading             : double'''
        return super(ISymbolCollectionElement, self).put_Leading(Leading)
    def get_Bold(self):
        '''Method ISymbolCollectionElement.get_Bold

           OUTPUT
            Bold                : VARIANT_BOOL*'''
        return super(ISymbolCollectionElement, self).get_Bold()
    def put_Bold(self, Bold):
        '''Method ISymbolCollectionElement.put_Bold

           INPUT
            Bold                : VARIANT_BOOL'''
        return super(ISymbolCollectionElement, self).put_Bold(Bold)
    def get_FontName(self):
        '''Method ISymbolCollectionElement.get_FontName

           OUTPUT
            FontName            : BSTR*'''
        return super(ISymbolCollectionElement, self).get_FontName()
    def put_FontName(self, FontName):
        '''Method ISymbolCollectionElement.put_FontName

           INPUT
            FontName            : BSTR'''
        return super(ISymbolCollectionElement, self).put_FontName(FontName)
    def get_Italic(self):
        '''Method ISymbolCollectionElement.get_Italic

           OUTPUT
            Italic              : VARIANT_BOOL*'''
        return super(ISymbolCollectionElement, self).get_Italic()
    def put_Italic(self, Italic):
        '''Method ISymbolCollectionElement.put_Italic

           INPUT
            Italic              : VARIANT_BOOL'''
        return super(ISymbolCollectionElement, self).put_Italic(Italic)
    def get_Underline(self):
        '''Method ISymbolCollectionElement.get_Underline

           OUTPUT
            Underline           : VARIANT_BOOL*'''
        return super(ISymbolCollectionElement, self).get_Underline()
    def put_Underline(self, Underline):
        '''Method ISymbolCollectionElement.put_Underline

           INPUT
            Underline           : VARIANT_BOOL'''
        return super(ISymbolCollectionElement, self).put_Underline(Underline)
    def get_Background(self):
        '''Method ISymbolCollectionElement.get_Background

           OUTPUT
            Symbol              : ITextBackground**'''
        return super(ISymbolCollectionElement, self).get_Background()
    def putref_Background(self, Symbol):
        '''Method ISymbolCollectionElement.putref_Background

           INPUT
            Symbol              : ITextBackground*'''
        return super(ISymbolCollectionElement, self).putref_Background(Symbol)
    def put_OverriddenProperties(self, props):
        '''Method ISymbolCollectionElement.put_OverriddenProperties

           INPUT
            props               : long'''
        return super(ISymbolCollectionElement, self).put_OverriddenProperties(props)
    def get_OverriddenProperties(self):
        '''Method ISymbolCollectionElement.get_OverriddenProperties

           OUTPUT
            props               : long*'''
        return super(ISymbolCollectionElement, self).get_OverriddenProperties()
    def put_OverriddenPropertiesExclusionMask(self, Mask):
        '''Method ISymbolCollectionElement.put_OverriddenPropertiesExclusionMask

           INPUT
            Mask                : long'''
        return super(ISymbolCollectionElement, self).put_OverriddenPropertiesExclusionMask(Mask)
    def get_OverriddenPropertiesExclusionMask(self):
        '''Method ISymbolCollectionElement.get_OverriddenPropertiesExclusionMask

           OUTPUT
            Mask                : long*'''
        return super(ISymbolCollectionElement, self).get_OverriddenPropertiesExclusionMask()
    def get_Text(self):
        '''Method ISymbolCollectionElement.get_Text

           OUTPUT
            Text                : BSTR*'''
        return super(ISymbolCollectionElement, self).get_Text()
    def put_Text(self, Text):
        '''Method ISymbolCollectionElement.put_Text

           INPUT
            Text                : BSTR'''
        return super(ISymbolCollectionElement, self).put_Text(Text)
    def get_Geometry(self):
        '''Method ISymbolCollectionElement.get_Geometry

           OUTPUT
            pGeometry           : IGeometry**'''
        return super(ISymbolCollectionElement, self).get_Geometry()
    def put_Geometry(self, pGeometry):
        '''Method ISymbolCollectionElement.put_Geometry

           INPUT
            pGeometry           : IGeometry*'''
        return super(ISymbolCollectionElement, self).put_Geometry(pGeometry)
    AnchorPoint = property(get_AnchorPoint, put_AnchorPoint, None)
    Background = property(get_Background, putref_Background, None)
    Bold = property(get_Bold, put_Bold, None)
    CharacterSpacing = property(get_CharacterSpacing, put_CharacterSpacing, None)
    CharacterWidth = property(get_CharacterWidth, put_CharacterWidth, None)
    Color = property(get_Color, put_Color, None)
    FlipAngle = property(get_FlipAngle, put_FlipAngle, None)
    FontName = property(get_FontName, put_FontName, None)
    Geometry = property(get_Geometry, put_Geometry, None)
    HorizontalAlignment = property(get_HorizontalAlignment, put_HorizontalAlignment, None)
    Italic = property(get_Italic, put_Italic, None)
    Leading = property(get_Leading, put_Leading, None)
    OverriddenProperties = property(get_OverriddenProperties, put_OverriddenProperties, None)
    OverriddenPropertiesExclusionMask = property(get_OverriddenPropertiesExclusionMask, put_OverriddenPropertiesExclusionMask, None)
    SharedSymbol = property(None, put_SharedSymbol, None)
    Size = property(get_Size, put_Size, None)
    SymbolID = property(get_SymbolID, None, None)
    Text = property(get_Text, put_Text, None)
    TextPath = property(get_TextPath, putref_TextPath, None)
    Underline = property(get_Underline, put_Underline, None)
    VerticalAlignment = property(get_VerticalAlignment, put_VerticalAlignment, None)
    WordSpacing = property(get_WordSpacing, put_WordSpacing, None)
    XOffset = property(get_XOffset, put_XOffset, None)
    YOffset = property(get_YOffset, put_YOffset, None)

class IInkGraphic(_esriCarto.IInkGraphic):
    _IID = uuid.UUID('9a36b19b-2258-4046-bde3-0d4f647e9c37')

    def __init__(self, *args, **kw):
        super(IInkGraphic, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Create(self, pDisplay, pInk):
        '''Method IInkGraphic.Create

           INPUTS
            pDisplay            : IUnknown*
            pInk                : IUnknown*'''
        return super(IInkGraphic, self).Create(pDisplay, pInk)
    def get_Ink(self):
        '''Method IInkGraphic.get_Ink

           OUTPUT
            pVal                : IUnknown**'''
        return super(IInkGraphic, self).get_Ink()
    def get_Renderer(self):
        '''Method IInkGraphic.get_Renderer

           OUTPUT
            pVal                : IUnknown**'''
        return super(IInkGraphic, self).get_Renderer()
    def Recognize(self):
        '''Method IInkGraphic.Recognize

           OUTPUT
            Text                : BSTR*'''
        return super(IInkGraphic, self).Recognize()
    def put_Tag(self, pTag):
        '''Method IInkGraphic.put_Tag

           INPUT
            pTag                : VARIANT'''
        return super(IInkGraphic, self).put_Tag(pTag)
    def get_Tag(self):
        '''Method IInkGraphic.get_Tag

           OUTPUT
            pTag                : VARIANT*'''
        return super(IInkGraphic, self).get_Tag()
    def get_Color(self):
        '''Method IInkGraphic.get_Color

           OUTPUT
            pColor              : long*'''
        return super(IInkGraphic, self).get_Color()
    def put_Color(self, pColor):
        '''Method IInkGraphic.put_Color

           INPUT
            pColor              : long'''
        return super(IInkGraphic, self).put_Color(pColor)
    def put_Width(self, pWidth):
        '''Method IInkGraphic.put_Width

           INPUT
            pWidth              : long'''
        return super(IInkGraphic, self).put_Width(pWidth)
    def get_Width(self):
        '''Method IInkGraphic.get_Width

           OUTPUT
            pWidth              : long*'''
        return super(IInkGraphic, self).get_Width()
    def get_InkGeometry(self):
        '''Method IInkGraphic.get_InkGeometry

           OUTPUT
            ppGeom              : IUnknown**'''
        return super(IInkGraphic, self).get_InkGeometry()
    def get_InkType(self):
        '''Method IInkGraphic.get_InkType

           OUTPUT
            InkType             : ESRITPCPenType*'''
        return super(IInkGraphic, self).get_InkType()
    def put_TipType(self, pTipType):
        '''Method IInkGraphic.put_TipType

           INPUT
            pTipType            : ESRITPCStylusType'''
        return super(IInkGraphic, self).put_TipType(pTipType)
    def get_TipType(self):
        '''Method IInkGraphic.get_TipType

           OUTPUT
            pTipType            : ESRITPCStylusType*'''
        return super(IInkGraphic, self).get_TipType()
    def UpdateRecognitionResult(self, newResultText):
        '''Method IInkGraphic.UpdateRecognitionResult

           INPUT
            newResultText       : BSTR'''
        return super(IInkGraphic, self).UpdateRecognitionResult(newResultText)
    Color = property(get_Color, put_Color, None)
    Ink = property(get_Ink, None, None)
    InkGeometry = property(get_InkGeometry, None, None)
    InkType = property(get_InkType, None, None)
    Renderer = property(get_Renderer, None, None)
    Tag = property(get_Tag, put_Tag, None)
    TipType = property(get_TipType, put_TipType, None)
    Width = property(get_Width, put_Width, None)

class IColumnProperties(_esriCarto.IColumnProperties):
    _IID = uuid.UUID('7dd7a8db-ecd2-49bb-8f60-52021a00e460')

    def __init__(self, *args, **kw):
        super(IColumnProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IColumnProperties.get_Count

           OUTPUT
            Count               : long*'''
        return super(IColumnProperties, self).get_Count()
    def put_Count(self, Count):
        '''Method IColumnProperties.put_Count

           INPUT
            Count               : long'''
        return super(IColumnProperties, self).put_Count(Count)
    def get_Gap(self):
        '''Method IColumnProperties.get_Gap

           OUTPUT
            Gap                 : double*'''
        return super(IColumnProperties, self).get_Gap()
    def put_Gap(self, Gap):
        '''Method IColumnProperties.put_Gap

           INPUT
            Gap                 : double'''
        return super(IColumnProperties, self).put_Gap(Gap)
    Count = property(get_Count, put_Count, None)
    Gap = property(get_Gap, put_Gap, None)

class IOleFrame(_esriCarto.IOleFrame):
    _IID = uuid.UUID('f8fb5e03-546f-11d1-86ea-0000f8751720')
    def get_OleClientItem(self):
        '''Method IOleFrame.get_OleClientItem

           OUTPUT
            OleClientItem       : void**'''
        return super(IOleFrame, self).get_OleClientItem()
    def CreateOleClientItem(self, oleDocument):
        '''Method IOleFrame.CreateOleClientItem

           INPUT
            oleDocument         : void*'''
        return super(IOleFrame, self).CreateOleClientItem(oleDocument)
    def Open(self):
        '''Method IOleFrame.Open'''
        return super(IOleFrame, self).Open()
    def Edit(self):
        '''Method IOleFrame.Edit'''
        return super(IOleFrame, self).Edit()
    def Hide(self):
        '''Method IOleFrame.Hide'''
        return super(IOleFrame, self).Hide()
    def EditProperties(self):
        '''Method IOleFrame.EditProperties

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(IOleFrame, self).EditProperties()
    OleClientItem = property(get_OleClientItem, None, None)

class IGraphicsContainerProperty(_esriCarto.IGraphicsContainerProperty):
    _IID = uuid.UUID('e46bdc13-40b1-11d4-a683-0008c7df88db')

    def __init__(self, *args, **kw):
        super(IGraphicsContainerProperty, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GraphicsContainer(self):
        '''Method IGraphicsContainerProperty.get_GraphicsContainer

           OUTPUT
            Container           : IGraphicsContainer**'''
        return super(IGraphicsContainerProperty, self).get_GraphicsContainer()
    def putref_GraphicsContainer(self, Container):
        '''Method IGraphicsContainerProperty.putref_GraphicsContainer

           INPUT
            Container           : IGraphicsContainer*'''
        return super(IGraphicsContainerProperty, self).putref_GraphicsContainer(Container)
    GraphicsContainer = property(get_GraphicsContainer, putref_GraphicsContainer, None)

class IGraphicsLayerScale(_esriCarto.IGraphicsLayerScale):
    _IID = uuid.UUID('85c3dac5-6578-11d3-9fba-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IGraphicsLayerScale, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ReferenceScale(self):
        '''Method IGraphicsLayerScale.get_ReferenceScale

           OUTPUT
            pScaleRF            : double*'''
        return super(IGraphicsLayerScale, self).get_ReferenceScale()
    def put_ReferenceScale(self, pScaleRF):
        '''Method IGraphicsLayerScale.put_ReferenceScale

           INPUT
            pScaleRF            : double'''
        return super(IGraphicsLayerScale, self).put_ReferenceScale(pScaleRF)
    def get_Units(self):
        '''Method IGraphicsLayerScale.get_Units

           OUTPUT
            Units               : esriUnits*'''
        return super(IGraphicsLayerScale, self).get_Units()
    def put_Units(self, Units):
        '''Method IGraphicsLayerScale.put_Units

           INPUT
            Units               : esriUnits'''
        return super(IGraphicsLayerScale, self).put_Units(Units)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    Units = property(get_Units, put_Units, None)

class IText3DElement(_esriCarto.IText3DElement):
    _IID = uuid.UUID('e9290dcb-f710-11d4-a117-00508bd60cb9')

    def __init__(self, *args, **kw):
        super(IText3DElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Text(self):
        '''Method IText3DElement.get_Text

           OUTPUT
            pText               : BSTR*'''
        return super(IText3DElement, self).get_Text()
    def put_Text(self, pText):
        '''Method IText3DElement.put_Text

           INPUT
            pText               : BSTR'''
        return super(IText3DElement, self).put_Text(pText)
    def get_FontName(self):
        '''Method IText3DElement.get_FontName

           OUTPUT
            pFontName           : BSTR*'''
        return super(IText3DElement, self).get_FontName()
    def put_FontName(self, pFontName):
        '''Method IText3DElement.put_FontName

           INPUT
            pFontName           : BSTR'''
        return super(IText3DElement, self).put_FontName(pFontName)
    def get_BoldFont(self):
        '''Method IText3DElement.get_BoldFont

           OUTPUT
            pBoldFont           : VARIANT_BOOL*'''
        return super(IText3DElement, self).get_BoldFont()
    def put_BoldFont(self, pBoldFont):
        '''Method IText3DElement.put_BoldFont

           INPUT
            pBoldFont           : VARIANT_BOOL'''
        return super(IText3DElement, self).put_BoldFont(pBoldFont)
    def get_ItalicFont(self):
        '''Method IText3DElement.get_ItalicFont

           OUTPUT
            pItalicFont         : VARIANT_BOOL*'''
        return super(IText3DElement, self).get_ItalicFont()
    def put_ItalicFont(self, pItalicFont):
        '''Method IText3DElement.put_ItalicFont

           INPUT
            pItalicFont         : VARIANT_BOOL'''
        return super(IText3DElement, self).put_ItalicFont(pItalicFont)
    def get_AnchorPoint(self):
        '''Method IText3DElement.get_AnchorPoint

           OUTPUT
            ppAnchorPt          : IPoint**'''
        return super(IText3DElement, self).get_AnchorPoint()
    def put_AnchorPoint(self, ppAnchorPt):
        '''Method IText3DElement.put_AnchorPoint

           INPUT
            ppAnchorPt          : IPoint*'''
        return super(IText3DElement, self).put_AnchorPoint(ppAnchorPt)
    def get_Height(self):
        '''Method IText3DElement.get_Height

           OUTPUT
            pHeight             : double*'''
        return super(IText3DElement, self).get_Height()
    def put_Height(self, pHeight):
        '''Method IText3DElement.put_Height

           INPUT
            pHeight             : double'''
        return super(IText3DElement, self).put_Height(pHeight)
    def get_Depth(self):
        '''Method IText3DElement.get_Depth

           OUTPUT
            pDepth              : double*'''
        return super(IText3DElement, self).get_Depth()
    def put_Depth(self, pDepth):
        '''Method IText3DElement.put_Depth

           INPUT
            pDepth              : double'''
        return super(IText3DElement, self).put_Depth(pDepth)
    def get_Justification(self):
        '''Method IText3DElement.get_Justification

           OUTPUT
            pJustification      : esriT3DJustification*'''
        return super(IText3DElement, self).get_Justification()
    def put_Justification(self, pJustification):
        '''Method IText3DElement.put_Justification

           INPUT
            pJustification      : esriT3DJustification'''
        return super(IText3DElement, self).put_Justification(pJustification)
    def get_OrientationPlane(self):
        '''Method IText3DElement.get_OrientationPlane

           OUTPUT
            pPlane              : esriT3DOrientationPlane*'''
        return super(IText3DElement, self).get_OrientationPlane()
    def put_OrientationPlane(self, pPlane):
        '''Method IText3DElement.put_OrientationPlane

           INPUT
            pPlane              : esriT3DOrientationPlane'''
        return super(IText3DElement, self).put_OrientationPlane(pPlane)
    def get_Alignment(self):
        '''Method IText3DElement.get_Alignment

           OUTPUT
            pAlignment          : esriT3DAlignment*'''
        return super(IText3DElement, self).get_Alignment()
    def put_Alignment(self, pAlignment):
        '''Method IText3DElement.put_Alignment

           INPUT
            pAlignment          : esriT3DAlignment'''
        return super(IText3DElement, self).put_Alignment(pAlignment)
    def get_AxisRotation(self):
        '''Method IText3DElement.get_AxisRotation

           OUTPUT
            pAxis               : esriT3DRotationAxis*'''
        return super(IText3DElement, self).get_AxisRotation()
    def put_AxisRotation(self, pAxis):
        '''Method IText3DElement.put_AxisRotation

           INPUT
            pAxis               : esriT3DRotationAxis'''
        return super(IText3DElement, self).put_AxisRotation(pAxis)
    def get_RotationAngle(self):
        '''Method IText3DElement.get_RotationAngle

           OUTPUT
            pAngle              : double*'''
        return super(IText3DElement, self).get_RotationAngle()
    def put_RotationAngle(self, pAngle):
        '''Method IText3DElement.put_RotationAngle

           INPUT
            pAngle              : double'''
        return super(IText3DElement, self).put_RotationAngle(pAngle)
    def get_ZAxisScale(self):
        '''Method IText3DElement.get_ZAxisScale

           OUTPUT
            pZScale             : double*'''
        return super(IText3DElement, self).get_ZAxisScale()
    def put_ZAxisScale(self, pZScale):
        '''Method IText3DElement.put_ZAxisScale

           INPUT
            pZScale             : double'''
        return super(IText3DElement, self).put_ZAxisScale(pZScale)
    def put_Surface(self, _arg1):
        '''Method IText3DElement.put_Surface

           INPUT
            _arg1               : IFunctionalSurface*'''
        return super(IText3DElement, self).put_Surface(_arg1)
    def Update(self):
        '''Method IText3DElement.Update

           OUTPUT
            pUpdated            : VARIANT_BOOL*'''
        return super(IText3DElement, self).Update()
    Alignment = property(get_Alignment, put_Alignment, None)
    AnchorPoint = property(get_AnchorPoint, put_AnchorPoint, None)
    AxisRotation = property(get_AxisRotation, put_AxisRotation, None)
    BoldFont = property(get_BoldFont, put_BoldFont, None)
    Depth = property(get_Depth, put_Depth, None)
    FontName = property(get_FontName, put_FontName, None)
    Height = property(get_Height, put_Height, None)
    ItalicFont = property(get_ItalicFont, put_ItalicFont, None)
    Justification = property(get_Justification, put_Justification, None)
    OrientationPlane = property(get_OrientationPlane, put_OrientationPlane, None)
    RotationAngle = property(get_RotationAngle, put_RotationAngle, None)
    Surface = property(None, put_Surface, None)
    Text = property(get_Text, put_Text, None)
    ZAxisScale = property(get_ZAxisScale, put_ZAxisScale, None)

class IGraphicElements(_esriCarto.IGraphicElements):
    _IID = uuid.UUID('35f37b7c-f2d0-485d-b0c5-ad260ef67132')
    def get_Count(self):
        '''Method IGraphicElements.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGraphicElements, self).get_Count()
    def get_Element(self, Index):
        '''Method IGraphicElements.get_Element

           INPUT
            Index               : long

           OUTPUT
            Element             : IGraphicElement**'''
        return super(IGraphicElements, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGraphicElements.Remove

           INPUT
            Index               : long'''
        return super(IGraphicElements, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGraphicElements.RemoveAll'''
        return super(IGraphicElements, self).RemoveAll()
    def Add(self, Element):
        '''Method IGraphicElements.Add

           INPUT
            Element             : IGraphicElement*'''
        return super(IGraphicElements, self).Add(Element)
    def Insert(self, Index, Element):
        '''Method IGraphicElements.Insert

           INPUTS
            Index               : long
            Element             : IGraphicElement*'''
        return super(IGraphicElements, self).Insert(Index, Element)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IFeatureIdentifyObj(_esriCarto.IFeatureIdentifyObj):
    _IID = uuid.UUID('4e08d830-d361-11d2-8cd0-00c04f5b951e')

    def __init__(self, *args, **kw):
        super(IFeatureIdentifyObj, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Feature(self, _arg1):
        '''Method IFeatureIdentifyObj.put_Feature

           INPUT
            _arg1               : IFeature*'''
        return super(IFeatureIdentifyObj, self).put_Feature(_arg1)
    Feature = property(None, put_Feature, None)

class IRowIdentifyObject(_esriCarto.IRowIdentifyObject):
    _IID = uuid.UUID('061bded1-1486-11d4-9fec-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IRowIdentifyObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Row(self, Row):
        '''Method IRowIdentifyObject.put_Row

           INPUT
            Row                 : IRow*'''
        return super(IRowIdentifyObject, self).put_Row(Row)
    def get_Row(self):
        '''Method IRowIdentifyObject.get_Row

           OUTPUT
            Row                 : IRow**'''
        return super(IRowIdentifyObject, self).get_Row()
    Row = property(get_Row, put_Row, None)

class IFeatureFindData2(_esriCarto.IFeatureFindData2):
    _IID = uuid.UUID('35467434-9d21-4df8-833e-9af2e66241ba')

    def __init__(self, *args, **kw):
        super(IFeatureFindData2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Feature(self):
        '''Method IFeatureFindData2.get_Feature

           OUTPUT
            ppFeature           : IFeature**'''
        return super(IFeatureFindData2, self).get_Feature()
    def get_Layer(self):
        '''Method IFeatureFindData2.get_Layer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IFeatureFindData2, self).get_Layer()
    def putref_Feature(self, ppFeature):
        '''Method IFeatureFindData2.putref_Feature

           INPUT
            ppFeature           : IFeature*'''
        return super(IFeatureFindData2, self).putref_Feature(ppFeature)
    def putref_Layer(self, ppLayer):
        '''Method IFeatureFindData2.putref_Layer

           INPUT
            ppLayer             : ILayer*'''
        return super(IFeatureFindData2, self).putref_Layer(ppLayer)
    Feature = property(get_Feature, putref_Feature, None)
    Layer = property(get_Layer, putref_Layer, None)

class ILineLabelPosition(_esriCarto.ILineLabelPosition):
    _IID = uuid.UUID('2442958b-d711-11d2-9f41-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(ILineLabelPosition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ProduceCurvedLabels(self):
        '''Method ILineLabelPosition.get_ProduceCurvedLabels

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_ProduceCurvedLabels()
    def put_ProduceCurvedLabels(self, flag):
        '''Method ILineLabelPosition.put_ProduceCurvedLabels

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_ProduceCurvedLabels(flag)
    def get_Above(self):
        '''Method ILineLabelPosition.get_Above

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_Above()
    def put_Above(self, flag):
        '''Method ILineLabelPosition.put_Above

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_Above(flag)
    def get_Below(self):
        '''Method ILineLabelPosition.get_Below

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_Below()
    def put_Below(self, flag):
        '''Method ILineLabelPosition.put_Below

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_Below(flag)
    def get_OnTop(self):
        '''Method ILineLabelPosition.get_OnTop

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_OnTop()
    def put_OnTop(self, flag):
        '''Method ILineLabelPosition.put_OnTop

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_OnTop(flag)
    def get_Left(self):
        '''Method ILineLabelPosition.get_Left

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_Left()
    def put_Left(self, flag):
        '''Method ILineLabelPosition.put_Left

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_Left(flag)
    def get_Right(self):
        '''Method ILineLabelPosition.get_Right

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_Right()
    def put_Right(self, flag):
        '''Method ILineLabelPosition.put_Right

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_Right(flag)
    def get_InLine(self):
        '''Method ILineLabelPosition.get_InLine

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_InLine()
    def put_InLine(self, flag):
        '''Method ILineLabelPosition.put_InLine

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_InLine(flag)
    def get_AtStart(self):
        '''Method ILineLabelPosition.get_AtStart

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_AtStart()
    def put_AtStart(self, flag):
        '''Method ILineLabelPosition.put_AtStart

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_AtStart(flag)
    def get_AtEnd(self):
        '''Method ILineLabelPosition.get_AtEnd

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_AtEnd()
    def put_AtEnd(self, flag):
        '''Method ILineLabelPosition.put_AtEnd

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_AtEnd(flag)
    def get_Parallel(self):
        '''Method ILineLabelPosition.get_Parallel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_Parallel()
    def put_Parallel(self, flag):
        '''Method ILineLabelPosition.put_Parallel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_Parallel(flag)
    def get_Perpendicular(self):
        '''Method ILineLabelPosition.get_Perpendicular

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_Perpendicular()
    def put_Perpendicular(self, flag):
        '''Method ILineLabelPosition.put_Perpendicular

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_Perpendicular(flag)
    def get_Horizontal(self):
        '''Method ILineLabelPosition.get_Horizontal

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILineLabelPosition, self).get_Horizontal()
    def put_Horizontal(self, flag):
        '''Method ILineLabelPosition.put_Horizontal

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILineLabelPosition, self).put_Horizontal(flag)
    def get_Offset(self):
        '''Method ILineLabelPosition.get_Offset

           OUTPUT
            Offset              : double*'''
        return super(ILineLabelPosition, self).get_Offset()
    def put_Offset(self, Offset):
        '''Method ILineLabelPosition.put_Offset

           INPUT
            Offset              : double'''
        return super(ILineLabelPosition, self).put_Offset(Offset)
    Above = property(get_Above, put_Above, None)
    AtEnd = property(get_AtEnd, put_AtEnd, None)
    AtStart = property(get_AtStart, put_AtStart, None)
    Below = property(get_Below, put_Below, None)
    Horizontal = property(get_Horizontal, put_Horizontal, None)
    InLine = property(get_InLine, put_InLine, None)
    Left = property(get_Left, put_Left, None)
    Offset = property(get_Offset, put_Offset, None)
    OnTop = property(get_OnTop, put_OnTop, None)
    Parallel = property(get_Parallel, put_Parallel, None)
    Perpendicular = property(get_Perpendicular, put_Perpendicular, None)
    ProduceCurvedLabels = property(get_ProduceCurvedLabels, put_ProduceCurvedLabels, None)
    Right = property(get_Right, put_Right, None)

class ILineLabelPlacementPriorities(_esriCarto.ILineLabelPlacementPriorities):
    _IID = uuid.UUID('261a4376-d9d5-11d2-a806-cc9f870bcd5a')

    def __init__(self, *args, **kw):
        super(ILineLabelPlacementPriorities, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AboveBefore(self):
        '''Method ILineLabelPlacementPriorities.get_AboveBefore

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_AboveBefore()
    def put_AboveBefore(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_AboveBefore

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_AboveBefore(Priority)
    def get_AboveStart(self):
        '''Method ILineLabelPlacementPriorities.get_AboveStart

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_AboveStart()
    def put_AboveStart(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_AboveStart

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_AboveStart(Priority)
    def get_AboveAlong(self):
        '''Method ILineLabelPlacementPriorities.get_AboveAlong

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_AboveAlong()
    def put_AboveAlong(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_AboveAlong

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_AboveAlong(Priority)
    def get_AboveEnd(self):
        '''Method ILineLabelPlacementPriorities.get_AboveEnd

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_AboveEnd()
    def put_AboveEnd(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_AboveEnd

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_AboveEnd(Priority)
    def get_AboveAfter(self):
        '''Method ILineLabelPlacementPriorities.get_AboveAfter

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_AboveAfter()
    def put_AboveAfter(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_AboveAfter

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_AboveAfter(Priority)
    def get_CenterBefore(self):
        '''Method ILineLabelPlacementPriorities.get_CenterBefore

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_CenterBefore()
    def put_CenterBefore(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_CenterBefore

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_CenterBefore(Priority)
    def get_CenterStart(self):
        '''Method ILineLabelPlacementPriorities.get_CenterStart

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_CenterStart()
    def put_CenterStart(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_CenterStart

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_CenterStart(Priority)
    def get_CenterAlong(self):
        '''Method ILineLabelPlacementPriorities.get_CenterAlong

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_CenterAlong()
    def put_CenterAlong(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_CenterAlong

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_CenterAlong(Priority)
    def get_CenterEnd(self):
        '''Method ILineLabelPlacementPriorities.get_CenterEnd

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_CenterEnd()
    def put_CenterEnd(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_CenterEnd

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_CenterEnd(Priority)
    def get_CenterAfter(self):
        '''Method ILineLabelPlacementPriorities.get_CenterAfter

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_CenterAfter()
    def put_CenterAfter(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_CenterAfter

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_CenterAfter(Priority)
    def get_BelowBefore(self):
        '''Method ILineLabelPlacementPriorities.get_BelowBefore

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_BelowBefore()
    def put_BelowBefore(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_BelowBefore

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_BelowBefore(Priority)
    def get_BelowStart(self):
        '''Method ILineLabelPlacementPriorities.get_BelowStart

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_BelowStart()
    def put_BelowStart(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_BelowStart

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_BelowStart(Priority)
    def get_BelowAlong(self):
        '''Method ILineLabelPlacementPriorities.get_BelowAlong

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_BelowAlong()
    def put_BelowAlong(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_BelowAlong

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_BelowAlong(Priority)
    def get_BelowEnd(self):
        '''Method ILineLabelPlacementPriorities.get_BelowEnd

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_BelowEnd()
    def put_BelowEnd(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_BelowEnd

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_BelowEnd(Priority)
    def get_BelowAfter(self):
        '''Method ILineLabelPlacementPriorities.get_BelowAfter

           OUTPUT
            Priority            : long*'''
        return super(ILineLabelPlacementPriorities, self).get_BelowAfter()
    def put_BelowAfter(self, Priority):
        '''Method ILineLabelPlacementPriorities.put_BelowAfter

           INPUT
            Priority            : long'''
        return super(ILineLabelPlacementPriorities, self).put_BelowAfter(Priority)
    AboveAfter = property(get_AboveAfter, put_AboveAfter, None)
    AboveAlong = property(get_AboveAlong, put_AboveAlong, None)
    AboveBefore = property(get_AboveBefore, put_AboveBefore, None)
    AboveEnd = property(get_AboveEnd, put_AboveEnd, None)
    AboveStart = property(get_AboveStart, put_AboveStart, None)
    BelowAfter = property(get_BelowAfter, put_BelowAfter, None)
    BelowAlong = property(get_BelowAlong, put_BelowAlong, None)
    BelowBefore = property(get_BelowBefore, put_BelowBefore, None)
    BelowEnd = property(get_BelowEnd, put_BelowEnd, None)
    BelowStart = property(get_BelowStart, put_BelowStart, None)
    CenterAfter = property(get_CenterAfter, put_CenterAfter, None)
    CenterAlong = property(get_CenterAlong, put_CenterAlong, None)
    CenterBefore = property(get_CenterBefore, put_CenterBefore, None)
    CenterEnd = property(get_CenterEnd, put_CenterEnd, None)
    CenterStart = property(get_CenterStart, put_CenterStart, None)

class IPointPlacementPriorities(_esriCarto.IPointPlacementPriorities):
    _IID = uuid.UUID('261a4371-d9d5-11d2-a806-cc9f870bcd5a')

    def __init__(self, *args, **kw):
        super(IPointPlacementPriorities, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AboveLeft(self):
        '''Method IPointPlacementPriorities.get_AboveLeft

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_AboveLeft()
    def put_AboveLeft(self, Priority):
        '''Method IPointPlacementPriorities.put_AboveLeft

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_AboveLeft(Priority)
    def get_AboveCenter(self):
        '''Method IPointPlacementPriorities.get_AboveCenter

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_AboveCenter()
    def put_AboveCenter(self, Priority):
        '''Method IPointPlacementPriorities.put_AboveCenter

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_AboveCenter(Priority)
    def get_AboveRight(self):
        '''Method IPointPlacementPriorities.get_AboveRight

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_AboveRight()
    def put_AboveRight(self, Priority):
        '''Method IPointPlacementPriorities.put_AboveRight

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_AboveRight(Priority)
    def get_CenterRight(self):
        '''Method IPointPlacementPriorities.get_CenterRight

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_CenterRight()
    def put_CenterRight(self, Priority):
        '''Method IPointPlacementPriorities.put_CenterRight

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_CenterRight(Priority)
    def get_BelowRight(self):
        '''Method IPointPlacementPriorities.get_BelowRight

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_BelowRight()
    def put_BelowRight(self, Priority):
        '''Method IPointPlacementPriorities.put_BelowRight

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_BelowRight(Priority)
    def get_BelowCenter(self):
        '''Method IPointPlacementPriorities.get_BelowCenter

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_BelowCenter()
    def put_BelowCenter(self, Priority):
        '''Method IPointPlacementPriorities.put_BelowCenter

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_BelowCenter(Priority)
    def get_BelowLeft(self):
        '''Method IPointPlacementPriorities.get_BelowLeft

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_BelowLeft()
    def put_BelowLeft(self, Priority):
        '''Method IPointPlacementPriorities.put_BelowLeft

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_BelowLeft(Priority)
    def get_CenterLeft(self):
        '''Method IPointPlacementPriorities.get_CenterLeft

           OUTPUT
            Priority            : long*'''
        return super(IPointPlacementPriorities, self).get_CenterLeft()
    def put_CenterLeft(self, Priority):
        '''Method IPointPlacementPriorities.put_CenterLeft

           INPUT
            Priority            : long'''
        return super(IPointPlacementPriorities, self).put_CenterLeft(Priority)
    AboveCenter = property(get_AboveCenter, put_AboveCenter, None)
    AboveLeft = property(get_AboveLeft, put_AboveLeft, None)
    AboveRight = property(get_AboveRight, put_AboveRight, None)
    BelowCenter = property(get_BelowCenter, put_BelowCenter, None)
    BelowLeft = property(get_BelowLeft, put_BelowLeft, None)
    BelowRight = property(get_BelowRight, put_BelowRight, None)
    CenterLeft = property(get_CenterLeft, put_CenterLeft, None)
    CenterRight = property(get_CenterRight, put_CenterRight, None)

class IBasicOverposterLayerProperties(_esriCarto.IBasicOverposterLayerProperties):
    _IID = uuid.UUID('3141f2fb-38e2-11d1-8809-080009ec732a')

    def __init__(self, *args, **kw):
        super(IBasicOverposterLayerProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureType(self):
        '''Method IBasicOverposterLayerProperties.get_FeatureType

           OUTPUT
            Type                : esriBasicOverposterFeatureType*'''
        return super(IBasicOverposterLayerProperties, self).get_FeatureType()
    def put_FeatureType(self, Type):
        '''Method IBasicOverposterLayerProperties.put_FeatureType

           INPUT
            Type                : esriBasicOverposterFeatureType'''
        return super(IBasicOverposterLayerProperties, self).put_FeatureType(Type)
    def get_FeatureWeight(self):
        '''Method IBasicOverposterLayerProperties.get_FeatureWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties, self).get_FeatureWeight()
    def put_FeatureWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties.put_FeatureWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties, self).put_FeatureWeight(Weight)
    def get_LabelWeight(self):
        '''Method IBasicOverposterLayerProperties.get_LabelWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties, self).get_LabelWeight()
    def put_LabelWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties.put_LabelWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties, self).put_LabelWeight(Weight)
    def get_NumLabelsOption(self):
        '''Method IBasicOverposterLayerProperties.get_NumLabelsOption

           OUTPUT
            option              : esriBasicNumLabelsOption*'''
        return super(IBasicOverposterLayerProperties, self).get_NumLabelsOption()
    def put_NumLabelsOption(self, option):
        '''Method IBasicOverposterLayerProperties.put_NumLabelsOption

           INPUT
            option              : esriBasicNumLabelsOption'''
        return super(IBasicOverposterLayerProperties, self).put_NumLabelsOption(option)
    def get_LineLabelPosition(self):
        '''Method IBasicOverposterLayerProperties.get_LineLabelPosition

           OUTPUT
            position            : ILineLabelPosition**'''
        return super(IBasicOverposterLayerProperties, self).get_LineLabelPosition()
    def put_LineLabelPosition(self, position):
        '''Method IBasicOverposterLayerProperties.put_LineLabelPosition

           INPUT
            position            : ILineLabelPosition*'''
        return super(IBasicOverposterLayerProperties, self).put_LineLabelPosition(position)
    def get_LineLabelPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties.get_LineLabelPlacementPriorities

           OUTPUT
            linePlacementPriorities: ILineLabelPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties, self).get_LineLabelPlacementPriorities()
    def put_LineLabelPlacementPriorities(self, linePlacementPriorities):
        '''Method IBasicOverposterLayerProperties.put_LineLabelPlacementPriorities

           INPUT
            linePlacementPriorities: ILineLabelPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties, self).put_LineLabelPlacementPriorities(linePlacementPriorities)
    def get_GenerateUnplacedLabels(self):
        '''Method IBasicOverposterLayerProperties.get_GenerateUnplacedLabels

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties, self).get_GenerateUnplacedLabels()
    def put_GenerateUnplacedLabels(self, flag):
        '''Method IBasicOverposterLayerProperties.put_GenerateUnplacedLabels

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties, self).put_GenerateUnplacedLabels(flag)
    def get_PointPlacementMethod(self):
        '''Method IBasicOverposterLayerProperties.get_PointPlacementMethod

           OUTPUT
            Method              : esriOverposterPointPlacementMethod*'''
        return super(IBasicOverposterLayerProperties, self).get_PointPlacementMethod()
    def put_PointPlacementMethod(self, Method):
        '''Method IBasicOverposterLayerProperties.put_PointPlacementMethod

           INPUT
            Method              : esriOverposterPointPlacementMethod'''
        return super(IBasicOverposterLayerProperties, self).put_PointPlacementMethod(Method)
    def get_PointPlacementOnTop(self):
        '''Method IBasicOverposterLayerProperties.get_PointPlacementOnTop

           OUTPUT
            OnTop               : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties, self).get_PointPlacementOnTop()
    def put_PointPlacementOnTop(self, OnTop):
        '''Method IBasicOverposterLayerProperties.put_PointPlacementOnTop

           INPUT
            OnTop               : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties, self).put_PointPlacementOnTop(OnTop)
    def get_PointPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties.get_PointPlacementPriorities

           OUTPUT
            PointPlacementPriorities: IPointPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties, self).get_PointPlacementPriorities()
    def put_PointPlacementPriorities(self, PointPlacementPriorities):
        '''Method IBasicOverposterLayerProperties.put_PointPlacementPriorities

           INPUT
            PointPlacementPriorities: IPointPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties, self).put_PointPlacementPriorities(PointPlacementPriorities)
    def get_PointPlacementAngles(self):
        '''Method IBasicOverposterLayerProperties.get_PointPlacementAngles

           OUTPUT
            angles              : VARIANT*'''
        return super(IBasicOverposterLayerProperties, self).get_PointPlacementAngles()
    def put_PointPlacementAngles(self, angles):
        '''Method IBasicOverposterLayerProperties.put_PointPlacementAngles

           INPUT
            angles              : VARIANT'''
        return super(IBasicOverposterLayerProperties, self).put_PointPlacementAngles(angles)
    def get_BufferRatio(self):
        '''Method IBasicOverposterLayerProperties.get_BufferRatio

           OUTPUT
            BufferRatio         : double*'''
        return super(IBasicOverposterLayerProperties, self).get_BufferRatio()
    def put_BufferRatio(self, BufferRatio):
        '''Method IBasicOverposterLayerProperties.put_BufferRatio

           INPUT
            BufferRatio         : double'''
        return super(IBasicOverposterLayerProperties, self).put_BufferRatio(BufferRatio)
    def get_LineOffset(self):
        '''Method IBasicOverposterLayerProperties.get_LineOffset

           OUTPUT
            LineOffset          : double*'''
        return super(IBasicOverposterLayerProperties, self).get_LineOffset()
    def put_LineOffset(self, LineOffset):
        '''Method IBasicOverposterLayerProperties.put_LineOffset

           INPUT
            LineOffset          : double'''
        return super(IBasicOverposterLayerProperties, self).put_LineOffset(LineOffset)
    BufferRatio = property(get_BufferRatio, put_BufferRatio, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    FeatureWeight = property(get_FeatureWeight, put_FeatureWeight, None)
    GenerateUnplacedLabels = property(get_GenerateUnplacedLabels, put_GenerateUnplacedLabels, None)
    LabelWeight = property(get_LabelWeight, put_LabelWeight, None)
    LineLabelPlacementPriorities = property(get_LineLabelPlacementPriorities, put_LineLabelPlacementPriorities, None)
    LineLabelPosition = property(get_LineLabelPosition, put_LineLabelPosition, None)
    LineOffset = property(get_LineOffset, put_LineOffset, None)
    NumLabelsOption = property(get_NumLabelsOption, put_NumLabelsOption, None)
    PointPlacementAngles = property(get_PointPlacementAngles, put_PointPlacementAngles, None)
    PointPlacementMethod = property(get_PointPlacementMethod, put_PointPlacementMethod, None)
    PointPlacementOnTop = property(get_PointPlacementOnTop, put_PointPlacementOnTop, None)
    PointPlacementPriorities = property(get_PointPlacementPriorities, put_PointPlacementPriorities, None)

class IAnnotationExpressionParser(_esriCarto.IAnnotationExpressionParser):
    _IID = uuid.UUID('aa157205-e079-11d2-9f48-00c04f6bc6a5')
    def get_Expression(self):
        '''Method IAnnotationExpressionParser.get_Expression

           OUTPUT
            Expression          : BSTR*'''
        return super(IAnnotationExpressionParser, self).get_Expression()
    def get_AttributeCount(self):
        '''Method IAnnotationExpressionParser.get_AttributeCount

           OUTPUT
            attributes          : long*'''
        return super(IAnnotationExpressionParser, self).get_AttributeCount()
    def get_Attribute(self, Index):
        '''Method IAnnotationExpressionParser.get_Attribute

           INPUT
            Index               : long

           OUTPUT
            Attribute           : BSTR*'''
        return super(IAnnotationExpressionParser, self).get_Attribute(Index)
    def FindLabel(self, Feature):
        '''Method IAnnotationExpressionParser.FindLabel

           INPUT
            Feature             : IFeature*

           OUTPUT
            Label               : BSTR*'''
        return super(IAnnotationExpressionParser, self).FindLabel(Feature)
    def LastError(self):
        '''Method IAnnotationExpressionParser.LastError

           OUTPUTS
            number              : long*
            line                : long*
            Description         : BSTR*'''
        return super(IAnnotationExpressionParser, self).LastError()
    AttributeCount = property(get_AttributeCount, None, None)
    Expression = property(get_Expression, None, None)
    Attribute = IndexProperty(get_Attribute, None)

class IAnnotationExpressionEngine(_esriCarto.IAnnotationExpressionEngine):
    _IID = uuid.UUID('aa157206-e079-11d2-9f48-00c04f6bc6a5')
    def get_Name(self):
        '''Method IAnnotationExpressionEngine.get_Name

           OUTPUT
            Expression          : BSTR*'''
        return super(IAnnotationExpressionEngine, self).get_Name()
    def get_AppendCode(self):
        '''Method IAnnotationExpressionEngine.get_AppendCode

           OUTPUT
            AppendCode          : BSTR*'''
        return super(IAnnotationExpressionEngine, self).get_AppendCode()
    def CreateFunction(self, Name, parameters, Expression):
        '''Method IAnnotationExpressionEngine.CreateFunction

           INPUTS
            Name                : BSTR
            parameters          : BSTR
            Expression          : BSTR

           OUTPUT
            Function            : BSTR*'''
        return super(IAnnotationExpressionEngine, self).CreateFunction(Name, parameters, Expression)
    def SetExpression(self, preCode, Expression):
        '''Method IAnnotationExpressionEngine.SetExpression

           INPUTS
            preCode             : BSTR
            Expression          : BSTR

           OUTPUT
            ExpressionParser    : IAnnotationExpressionParser**'''
        return super(IAnnotationExpressionEngine, self).SetExpression(preCode, Expression)
    def SetCode(self, fullCode, runFunction):
        '''Method IAnnotationExpressionEngine.SetCode

           INPUTS
            fullCode            : BSTR
            runFunction         : BSTR

           OUTPUT
            ExpressionParser    : IAnnotationExpressionParser**'''
        return super(IAnnotationExpressionEngine, self).SetCode(fullCode, runFunction)
    AppendCode = property(get_AppendCode, None, None)
    Name = property(get_Name, None, None)

class ILabelEngineLayerProperties(_esriCarto.ILabelEngineLayerProperties):
    _IID = uuid.UUID('01004143-0d1c-11d2-a26f-080009b6f22b')

    def __init__(self, *args, **kw):
        super(ILabelEngineLayerProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Symbol(self, TextSymbol):
        '''Method ILabelEngineLayerProperties.putref_Symbol

           INPUT
            TextSymbol          : ITextSymbol*'''
        return super(ILabelEngineLayerProperties, self).putref_Symbol(TextSymbol)
    def get_Symbol(self):
        '''Method ILabelEngineLayerProperties.get_Symbol

           OUTPUT
            TextSymbol          : ITextSymbol**'''
        return super(ILabelEngineLayerProperties, self).get_Symbol()
    def put_SymbolID(self, pSymbolID):
        '''Method ILabelEngineLayerProperties.put_SymbolID

           INPUT
            pSymbolID           : long'''
        return super(ILabelEngineLayerProperties, self).put_SymbolID(pSymbolID)
    def get_SymbolID(self):
        '''Method ILabelEngineLayerProperties.get_SymbolID

           OUTPUT
            pSymbolID           : long*'''
        return super(ILabelEngineLayerProperties, self).get_SymbolID()
    def put_Offset(self, Offset):
        '''Method ILabelEngineLayerProperties.put_Offset

           INPUT
            Offset              : double'''
        return super(ILabelEngineLayerProperties, self).put_Offset(Offset)
    def get_Offset(self):
        '''Method ILabelEngineLayerProperties.get_Offset

           OUTPUT
            Offset              : double*'''
        return super(ILabelEngineLayerProperties, self).get_Offset()
    def putref_BasicOverposterLayerProperties(self, props):
        '''Method ILabelEngineLayerProperties.putref_BasicOverposterLayerProperties

           INPUT
            props               : IBasicOverposterLayerProperties*'''
        return super(ILabelEngineLayerProperties, self).putref_BasicOverposterLayerProperties(props)
    def get_BasicOverposterLayerProperties(self):
        '''Method ILabelEngineLayerProperties.get_BasicOverposterLayerProperties

           OUTPUT
            props               : IBasicOverposterLayerProperties**'''
        return super(ILabelEngineLayerProperties, self).get_BasicOverposterLayerProperties()
    def put_Expression(self, Expression):
        '''Method ILabelEngineLayerProperties.put_Expression

           INPUT
            Expression          : BSTR'''
        return super(ILabelEngineLayerProperties, self).put_Expression(Expression)
    def get_Expression(self):
        '''Method ILabelEngineLayerProperties.get_Expression

           OUTPUT
            Expression          : BSTR*'''
        return super(ILabelEngineLayerProperties, self).get_Expression()
    def put_IsExpressionSimple(self, simpleExpression):
        '''Method ILabelEngineLayerProperties.put_IsExpressionSimple

           INPUT
            simpleExpression    : VARIANT_BOOL'''
        return super(ILabelEngineLayerProperties, self).put_IsExpressionSimple(simpleExpression)
    def get_IsExpressionSimple(self):
        '''Method ILabelEngineLayerProperties.get_IsExpressionSimple

           OUTPUT
            simpleExpression    : VARIANT_BOOL*'''
        return super(ILabelEngineLayerProperties, self).get_IsExpressionSimple()
    def putref_ExpressionParser(self, engine):
        '''Method ILabelEngineLayerProperties.putref_ExpressionParser

           INPUT
            engine              : IAnnotationExpressionEngine*'''
        return super(ILabelEngineLayerProperties, self).putref_ExpressionParser(engine)
    def get_ExpressionParser(self):
        '''Method ILabelEngineLayerProperties.get_ExpressionParser

           OUTPUT
            engine              : IAnnotationExpressionEngine**'''
        return super(ILabelEngineLayerProperties, self).get_ExpressionParser()
    BasicOverposterLayerProperties = property(get_BasicOverposterLayerProperties, putref_BasicOverposterLayerProperties, None)
    Expression = property(get_Expression, put_Expression, None)
    ExpressionParser = property(get_ExpressionParser, putref_ExpressionParser, None)
    IsExpressionSimple = property(get_IsExpressionSimple, put_IsExpressionSimple, None)
    Offset = property(get_Offset, put_Offset, None)
    Symbol = property(get_Symbol, putref_Symbol, None)
    SymbolID = property(get_SymbolID, put_SymbolID, None)

class IPlacedObject(_esriCarto.IPlacedObject):
    _IID = uuid.UUID('3141f2f2-38e2-11d1-8809-080009ec732a')

    def __init__(self, *args, **kw):
        super(IPlacedObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ObjectType(self):
        '''Method IPlacedObject.get_ObjectType

           OUTPUT
            Type                : esriPlacedObjectType*'''
        return super(IPlacedObject, self).get_ObjectType()
    def put_ObjectType(self, Type):
        '''Method IPlacedObject.put_ObjectType

           INPUT
            Type                : esriPlacedObjectType'''
        return super(IPlacedObject, self).put_ObjectType(Type)
    def get_FeatureId(self):
        '''Method IPlacedObject.get_FeatureId

           OUTPUT
            FeatureId           : long*'''
        return super(IPlacedObject, self).get_FeatureId()
    def put_FeatureId(self, FeatureId):
        '''Method IPlacedObject.put_FeatureId

           INPUT
            FeatureId           : long'''
        return super(IPlacedObject, self).put_FeatureId(FeatureId)
    def get_ControlShape(self):
        '''Method IPlacedObject.get_ControlShape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IPlacedObject, self).get_ControlShape()
    def put_ControlShape(self, Shape):
        '''Method IPlacedObject.put_ControlShape

           INPUT
            Shape               : IGeometry*'''
        return super(IPlacedObject, self).put_ControlShape(Shape)
    def get_Label(self):
        '''Method IPlacedObject.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(IPlacedObject, self).get_Label()
    def put_Label(self, Label):
        '''Method IPlacedObject.put_Label

           INPUT
            Label               : BSTR'''
        return super(IPlacedObject, self).put_Label(Label)
    def get_ClassIndex(self):
        '''Method IPlacedObject.get_ClassIndex

           OUTPUT
            Index               : long*'''
        return super(IPlacedObject, self).get_ClassIndex()
    def put_ClassIndex(self, Index):
        '''Method IPlacedObject.put_ClassIndex

           INPUT
            Index               : long'''
        return super(IPlacedObject, self).put_ClassIndex(Index)
    def get_PlacementCode(self):
        '''Method IPlacedObject.get_PlacementCode

           OUTPUT
            PlacementCode       : esriPlacementCode*'''
        return super(IPlacedObject, self).get_PlacementCode()
    def put_PlacementCode(self, PlacementCode):
        '''Method IPlacedObject.put_PlacementCode

           INPUT
            PlacementCode       : esriPlacementCode'''
        return super(IPlacedObject, self).put_PlacementCode(PlacementCode)
    def get_PlacementMessage(self):
        '''Method IPlacedObject.get_PlacementMessage

           OUTPUT
            message             : BSTR*'''
        return super(IPlacedObject, self).get_PlacementMessage()
    def put_PlacementMessage(self, message):
        '''Method IPlacedObject.put_PlacementMessage

           INPUT
            message             : BSTR'''
        return super(IPlacedObject, self).put_PlacementMessage(message)
    def get_Angle(self):
        '''Method IPlacedObject.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(IPlacedObject, self).get_Angle()
    Angle = property(get_Angle, None, None)
    ClassIndex = property(get_ClassIndex, put_ClassIndex, None)
    ControlShape = property(get_ControlShape, put_ControlShape, None)
    FeatureId = property(get_FeatureId, put_FeatureId, None)
    Label = property(get_Label, put_Label, None)
    ObjectType = property(get_ObjectType, put_ObjectType, None)
    PlacementCode = property(get_PlacementCode, put_PlacementCode, None)
    PlacementMessage = property(get_PlacementMessage, put_PlacementMessage, None)

class IPlacedObject2(_esriCarto.IPlacedObject2):
    _IID = uuid.UUID('bddfa62b-1810-4e9c-85c3-2c2b50ea70b6')

    def __init__(self, *args, **kw):
        super(IPlacedObject2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ObjectType(self):
        '''Method IPlacedObject2.get_ObjectType

           OUTPUT
            Type                : esriPlacedObjectType*'''
        return super(IPlacedObject2, self).get_ObjectType()
    def put_ObjectType(self, Type):
        '''Method IPlacedObject2.put_ObjectType

           INPUT
            Type                : esriPlacedObjectType'''
        return super(IPlacedObject2, self).put_ObjectType(Type)
    def get_FeatureId(self):
        '''Method IPlacedObject2.get_FeatureId

           OUTPUT
            FeatureId           : long*'''
        return super(IPlacedObject2, self).get_FeatureId()
    def put_FeatureId(self, FeatureId):
        '''Method IPlacedObject2.put_FeatureId

           INPUT
            FeatureId           : long'''
        return super(IPlacedObject2, self).put_FeatureId(FeatureId)
    def get_ControlShape(self):
        '''Method IPlacedObject2.get_ControlShape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IPlacedObject2, self).get_ControlShape()
    def put_ControlShape(self, Shape):
        '''Method IPlacedObject2.put_ControlShape

           INPUT
            Shape               : IGeometry*'''
        return super(IPlacedObject2, self).put_ControlShape(Shape)
    def get_Label(self):
        '''Method IPlacedObject2.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(IPlacedObject2, self).get_Label()
    def put_Label(self, Label):
        '''Method IPlacedObject2.put_Label

           INPUT
            Label               : BSTR'''
        return super(IPlacedObject2, self).put_Label(Label)
    def get_ClassIndex(self):
        '''Method IPlacedObject2.get_ClassIndex

           OUTPUT
            Index               : long*'''
        return super(IPlacedObject2, self).get_ClassIndex()
    def put_ClassIndex(self, Index):
        '''Method IPlacedObject2.put_ClassIndex

           INPUT
            Index               : long'''
        return super(IPlacedObject2, self).put_ClassIndex(Index)
    def get_PlacementCode(self):
        '''Method IPlacedObject2.get_PlacementCode

           OUTPUT
            PlacementCode       : esriPlacementCode*'''
        return super(IPlacedObject2, self).get_PlacementCode()
    def put_PlacementCode(self, PlacementCode):
        '''Method IPlacedObject2.put_PlacementCode

           INPUT
            PlacementCode       : esriPlacementCode'''
        return super(IPlacedObject2, self).put_PlacementCode(PlacementCode)
    def get_PlacementMessage(self):
        '''Method IPlacedObject2.get_PlacementMessage

           OUTPUT
            message             : BSTR*'''
        return super(IPlacedObject2, self).get_PlacementMessage()
    def put_PlacementMessage(self, message):
        '''Method IPlacedObject2.put_PlacementMessage

           INPUT
            message             : BSTR'''
        return super(IPlacedObject2, self).put_PlacementMessage(message)
    def get_Angle(self):
        '''Method IPlacedObject2.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(IPlacedObject2, self).get_Angle()
    def get_ControlShapeEndPoint(self):
        '''Method IPlacedObject2.get_ControlShapeEndPoint

           OUTPUT
            point               : WKSPoint*'''
        return super(IPlacedObject2, self).get_ControlShapeEndPoint()
    def get_LabelWidth(self):
        '''Method IPlacedObject2.get_LabelWidth

           OUTPUT
            Width               : double*'''
        return super(IPlacedObject2, self).get_LabelWidth()
    def get_LabelHeight(self):
        '''Method IPlacedObject2.get_LabelHeight

           OUTPUT
            Height              : double*'''
        return super(IPlacedObject2, self).get_LabelHeight()
    Angle = property(get_Angle, None, None)
    ClassIndex = property(get_ClassIndex, put_ClassIndex, None)
    ControlShape = property(get_ControlShape, put_ControlShape, None)
    ControlShapeEndPoint = property(get_ControlShapeEndPoint, None, None)
    FeatureId = property(get_FeatureId, put_FeatureId, None)
    Label = property(get_Label, put_Label, None)
    LabelHeight = property(get_LabelHeight, None, None)
    LabelWidth = property(get_LabelWidth, None, None)
    ObjectType = property(get_ObjectType, put_ObjectType, None)
    PlacementCode = property(get_PlacementCode, put_PlacementCode, None)
    PlacementMessage = property(get_PlacementMessage, put_PlacementMessage, None)

class IPlacedObject3(_esriCarto.IPlacedObject3):
    _IID = uuid.UUID('2f68dd01-d7e6-4e21-8ef9-14165ef00552')

    def __init__(self, *args, **kw):
        super(IPlacedObject3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ObjectType(self):
        '''Method IPlacedObject3.get_ObjectType

           OUTPUT
            Type                : esriPlacedObjectType*'''
        return super(IPlacedObject3, self).get_ObjectType()
    def put_ObjectType(self, Type):
        '''Method IPlacedObject3.put_ObjectType

           INPUT
            Type                : esriPlacedObjectType'''
        return super(IPlacedObject3, self).put_ObjectType(Type)
    def get_FeatureId(self):
        '''Method IPlacedObject3.get_FeatureId

           OUTPUT
            FeatureId           : long*'''
        return super(IPlacedObject3, self).get_FeatureId()
    def put_FeatureId(self, FeatureId):
        '''Method IPlacedObject3.put_FeatureId

           INPUT
            FeatureId           : long'''
        return super(IPlacedObject3, self).put_FeatureId(FeatureId)
    def get_ControlShape(self):
        '''Method IPlacedObject3.get_ControlShape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IPlacedObject3, self).get_ControlShape()
    def put_ControlShape(self, Shape):
        '''Method IPlacedObject3.put_ControlShape

           INPUT
            Shape               : IGeometry*'''
        return super(IPlacedObject3, self).put_ControlShape(Shape)
    def get_Label(self):
        '''Method IPlacedObject3.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(IPlacedObject3, self).get_Label()
    def put_Label(self, Label):
        '''Method IPlacedObject3.put_Label

           INPUT
            Label               : BSTR'''
        return super(IPlacedObject3, self).put_Label(Label)
    def get_ClassIndex(self):
        '''Method IPlacedObject3.get_ClassIndex

           OUTPUT
            Index               : long*'''
        return super(IPlacedObject3, self).get_ClassIndex()
    def put_ClassIndex(self, Index):
        '''Method IPlacedObject3.put_ClassIndex

           INPUT
            Index               : long'''
        return super(IPlacedObject3, self).put_ClassIndex(Index)
    def get_PlacementCode(self):
        '''Method IPlacedObject3.get_PlacementCode

           OUTPUT
            PlacementCode       : esriPlacementCode*'''
        return super(IPlacedObject3, self).get_PlacementCode()
    def put_PlacementCode(self, PlacementCode):
        '''Method IPlacedObject3.put_PlacementCode

           INPUT
            PlacementCode       : esriPlacementCode'''
        return super(IPlacedObject3, self).put_PlacementCode(PlacementCode)
    def get_PlacementMessage(self):
        '''Method IPlacedObject3.get_PlacementMessage

           OUTPUT
            message             : BSTR*'''
        return super(IPlacedObject3, self).get_PlacementMessage()
    def put_PlacementMessage(self, message):
        '''Method IPlacedObject3.put_PlacementMessage

           INPUT
            message             : BSTR'''
        return super(IPlacedObject3, self).put_PlacementMessage(message)
    def get_Angle(self):
        '''Method IPlacedObject3.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(IPlacedObject3, self).get_Angle()
    def get_ControlShapeEndPoint(self):
        '''Method IPlacedObject3.get_ControlShapeEndPoint

           OUTPUT
            point               : WKSPoint*'''
        return super(IPlacedObject3, self).get_ControlShapeEndPoint()
    def get_LabelWidth(self):
        '''Method IPlacedObject3.get_LabelWidth

           OUTPUT
            Width               : double*'''
        return super(IPlacedObject3, self).get_LabelWidth()
    def get_LabelHeight(self):
        '''Method IPlacedObject3.get_LabelHeight

           OUTPUT
            Height              : double*'''
        return super(IPlacedObject3, self).get_LabelHeight()
    def get_AreaCentroid(self):
        '''Method IPlacedObject3.get_AreaCentroid

           OUTPUT
            bestLabelPt         : WKSPoint*'''
        return super(IPlacedObject3, self).get_AreaCentroid()
    def get_LabelInsidePolygon(self):
        '''Method IPlacedObject3.get_LabelInsidePolygon

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPlacedObject3, self).get_LabelInsidePolygon()
    Angle = property(get_Angle, None, None)
    AreaCentroid = property(get_AreaCentroid, None, None)
    ClassIndex = property(get_ClassIndex, put_ClassIndex, None)
    ControlShape = property(get_ControlShape, put_ControlShape, None)
    ControlShapeEndPoint = property(get_ControlShapeEndPoint, None, None)
    FeatureId = property(get_FeatureId, put_FeatureId, None)
    Label = property(get_Label, put_Label, None)
    LabelHeight = property(get_LabelHeight, None, None)
    LabelInsidePolygon = property(get_LabelInsidePolygon, None, None)
    LabelWidth = property(get_LabelWidth, None, None)
    ObjectType = property(get_ObjectType, put_ObjectType, None)
    PlacementCode = property(get_PlacementCode, put_PlacementCode, None)
    PlacementMessage = property(get_PlacementMessage, put_PlacementMessage, None)

class IOverposterLayerProperties(_esriCarto.IOverposterLayerProperties):
    _IID = uuid.UUID('3141f2f7-38e2-11d1-8809-080009ec732a')

    def __init__(self, *args, **kw):
        super(IOverposterLayerProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PlaceLabels(self, place):
        '''Method IOverposterLayerProperties.put_PlaceLabels

           INPUT
            place               : VARIANT_BOOL'''
        return super(IOverposterLayerProperties, self).put_PlaceLabels(place)
    def get_PlaceLabels(self):
        '''Method IOverposterLayerProperties.get_PlaceLabels

           OUTPUT
            place               : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties, self).get_PlaceLabels()
    def put_PlaceSymbols(self, place):
        '''Method IOverposterLayerProperties.put_PlaceSymbols

           INPUT
            place               : VARIANT_BOOL'''
        return super(IOverposterLayerProperties, self).put_PlaceSymbols(place)
    def get_PlaceSymbols(self):
        '''Method IOverposterLayerProperties.get_PlaceSymbols

           OUTPUT
            place               : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties, self).get_PlaceSymbols()
    def put_IsBarrier(self, IsBarrier):
        '''Method IOverposterLayerProperties.put_IsBarrier

           INPUT
            IsBarrier           : VARIANT_BOOL'''
        return super(IOverposterLayerProperties, self).put_IsBarrier(IsBarrier)
    def get_IsBarrier(self):
        '''Method IOverposterLayerProperties.get_IsBarrier

           OUTPUT
            IsBarrier           : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties, self).get_IsBarrier()
    IsBarrier = property(get_IsBarrier, put_IsBarrier, None)
    PlaceLabels = property(get_PlaceLabels, put_PlaceLabels, None)
    PlaceSymbols = property(get_PlaceSymbols, put_PlaceSymbols, None)

class IOverposterLayerProperties2(_esriCarto.IOverposterLayerProperties2):
    _IID = uuid.UUID('c1e3c2fd-dcc1-4f7e-be2d-2f989b0b7e6a')

    def __init__(self, *args, **kw):
        super(IOverposterLayerProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PlaceLabels(self, place):
        '''Method IOverposterLayerProperties2.put_PlaceLabels

           INPUT
            place               : VARIANT_BOOL'''
        return super(IOverposterLayerProperties2, self).put_PlaceLabels(place)
    def get_PlaceLabels(self):
        '''Method IOverposterLayerProperties2.get_PlaceLabels

           OUTPUT
            place               : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties2, self).get_PlaceLabels()
    def put_PlaceSymbols(self, place):
        '''Method IOverposterLayerProperties2.put_PlaceSymbols

           INPUT
            place               : VARIANT_BOOL'''
        return super(IOverposterLayerProperties2, self).put_PlaceSymbols(place)
    def get_PlaceSymbols(self):
        '''Method IOverposterLayerProperties2.get_PlaceSymbols

           OUTPUT
            place               : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties2, self).get_PlaceSymbols()
    def put_IsBarrier(self, IsBarrier):
        '''Method IOverposterLayerProperties2.put_IsBarrier

           INPUT
            IsBarrier           : VARIANT_BOOL'''
        return super(IOverposterLayerProperties2, self).put_IsBarrier(IsBarrier)
    def get_IsBarrier(self):
        '''Method IOverposterLayerProperties2.get_IsBarrier

           OUTPUT
            IsBarrier           : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties2, self).get_IsBarrier()
    def get_TagUnplaced(self):
        '''Method IOverposterLayerProperties2.get_TagUnplaced

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties2, self).get_TagUnplaced()
    def put_TagUnplaced(self, Value):
        '''Method IOverposterLayerProperties2.put_TagUnplaced

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IOverposterLayerProperties2, self).put_TagUnplaced(Value)
    def get_HasFeatureWeight(self):
        '''Method IOverposterLayerProperties2.get_HasFeatureWeight

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IOverposterLayerProperties2, self).get_HasFeatureWeight()
    HasFeatureWeight = property(get_HasFeatureWeight, None, None)
    IsBarrier = property(get_IsBarrier, put_IsBarrier, None)
    PlaceLabels = property(get_PlaceLabels, put_PlaceLabels, None)
    PlaceSymbols = property(get_PlaceSymbols, put_PlaceSymbols, None)
    TagUnplaced = property(get_TagUnplaced, put_TagUnplaced, None)

class IOverposterProperties(_esriCarto.IOverposterProperties):
    _IID = uuid.UUID('e265c5b5-4513-4bb9-b280-27b03aae5957')
    def get_Name(self):
        '''Method IOverposterProperties.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IOverposterProperties, self).get_Name()
    def get_AnnotateFeatureID(self):
        '''Method IOverposterProperties.get_AnnotateFeatureID

           OUTPUT
            uid                 : IUID**'''
        return super(IOverposterProperties, self).get_AnnotateFeatureID()
    def get_AnnotateMapID(self):
        '''Method IOverposterProperties.get_AnnotateMapID

           OUTPUT
            uid                 : IUID**'''
        return super(IOverposterProperties, self).get_AnnotateMapID()
    def get_FeatureLayerPropertiesID(self):
        '''Method IOverposterProperties.get_FeatureLayerPropertiesID

           OUTPUT
            uid                 : IUID**'''
        return super(IOverposterProperties, self).get_FeatureLayerPropertiesID()
    def get_LabelStyleID(self):
        '''Method IOverposterProperties.get_LabelStyleID

           OUTPUT
            uid                 : IUID**'''
        return super(IOverposterProperties, self).get_LabelStyleID()
    AnnotateFeatureID = property(get_AnnotateFeatureID, None, None)
    AnnotateMapID = property(get_AnnotateMapID, None, None)
    FeatureLayerPropertiesID = property(get_FeatureLayerPropertiesID, None, None)
    LabelStyleID = property(get_LabelStyleID, None, None)
    Name = property(get_Name, None, None)

class IOverposterOptions(_esriCarto.IOverposterOptions):
    _IID = uuid.UUID('8112f1a9-0ecd-4e5e-977c-80b358a574b9')

    def __init__(self, *args, **kw):
        super(IOverposterOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def TranslateLabel(self, Layerprops, labelIn):
        '''Method IOverposterOptions.TranslateLabel

           INPUTS
            Layerprops          : ILabelEngineLayerProperties*
            labelIn             : BSTR

           OUTPUTS
            translated          : VARIANT_BOOL*
            labelOut            : BSTR*'''
        return super(IOverposterOptions, self).TranslateLabel(Layerprops, labelIn)
    def StackLabel(self, Layerprops, forceStack, labelIn):
        '''Method IOverposterOptions.StackLabel

           INPUTS
            Layerprops          : ILabelEngineLayerProperties*
            forceStack          : VARIANT_BOOL
            labelIn             : BSTR

           OUTPUTS
            stacked             : VARIANT_BOOL*
            labelOut            : BSTR*'''
        return super(IOverposterOptions, self).StackLabel(Layerprops, forceStack, labelIn)
    def get_EnableLabelCache(self):
        '''Method IOverposterOptions.get_EnableLabelCache

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IOverposterOptions, self).get_EnableLabelCache()
    def put_EnableLabelCache(self, flag):
        '''Method IOverposterOptions.put_EnableLabelCache

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IOverposterOptions, self).put_EnableLabelCache(flag)
    def get_EnableDrawUnplaced(self):
        '''Method IOverposterOptions.get_EnableDrawUnplaced

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IOverposterOptions, self).get_EnableDrawUnplaced()
    def put_EnableDrawUnplaced(self, flag):
        '''Method IOverposterOptions.put_EnableDrawUnplaced

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IOverposterOptions, self).put_EnableDrawUnplaced(flag)
    def putref_UnplacedLabelColor(self, Color):
        '''Method IOverposterOptions.putref_UnplacedLabelColor

           INPUT
            Color               : IColor*'''
        return super(IOverposterOptions, self).putref_UnplacedLabelColor(Color)
    def get_UnplacedLabelColor(self):
        '''Method IOverposterOptions.get_UnplacedLabelColor

           OUTPUT
            Color               : IColor**'''
        return super(IOverposterOptions, self).get_UnplacedLabelColor()
    def put_InvertedLabelTolerance(self, Angle):
        '''Method IOverposterOptions.put_InvertedLabelTolerance

           INPUT
            Angle               : double'''
        return super(IOverposterOptions, self).put_InvertedLabelTolerance(Angle)
    def get_InvertedLabelTolerance(self):
        '''Method IOverposterOptions.get_InvertedLabelTolerance

           OUTPUT
            Angle               : double*'''
        return super(IOverposterOptions, self).get_InvertedLabelTolerance()
    def put_RotateLabelWithDataFrame(self, flag):
        '''Method IOverposterOptions.put_RotateLabelWithDataFrame

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IOverposterOptions, self).put_RotateLabelWithDataFrame(flag)
    def get_RotateLabelWithDataFrame(self):
        '''Method IOverposterOptions.get_RotateLabelWithDataFrame

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IOverposterOptions, self).get_RotateLabelWithDataFrame()
    EnableDrawUnplaced = property(get_EnableDrawUnplaced, put_EnableDrawUnplaced, None)
    EnableLabelCache = property(get_EnableLabelCache, put_EnableLabelCache, None)
    InvertedLabelTolerance = property(get_InvertedLabelTolerance, put_InvertedLabelTolerance, None)
    RotateLabelWithDataFrame = property(get_RotateLabelWithDataFrame, put_RotateLabelWithDataFrame, None)
    UnplacedLabelColor = property(get_UnplacedLabelColor, putref_UnplacedLabelColor, None)

class IOverposterOptions2(_esriCarto.IOverposterOptions2):
    _IID = uuid.UUID('6745de4a-83b1-4f1b-717e-ff3ed195aa42')

    def __init__(self, *args, **kw):
        super(IOverposterOptions2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PauseLabeling(self):
        '''Method IOverposterOptions2.get_PauseLabeling

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IOverposterOptions2, self).get_PauseLabeling()
    def put_PauseLabeling(self, flag):
        '''Method IOverposterOptions2.put_PauseLabeling

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IOverposterOptions2, self).put_PauseLabeling(flag)
    PauseLabeling = property(get_PauseLabeling, put_PauseLabeling, None)

class IOverposter(_esriCarto.IOverposter):
    _IID = uuid.UUID('3141f2f5-38e2-11d1-8809-080009ec732a')
    def get_NumClasses(self):
        '''Method IOverposter.get_NumClasses

           OUTPUT
            Count               : long*'''
        return super(IOverposter, self).get_NumClasses()
    def get_Capabilities(self, Layer):
        '''Method IOverposter.get_Capabilities

           INPUT
            Layer               : ILayer*

           OUTPUT
            caps                : esriOverposterCaps*'''
        return super(IOverposter, self).get_Capabilities(Layer)
    def AddClass(self, props):
        '''Method IOverposter.AddClass

           INPUT
            props               : IOverposterLayerProperties*

           OUTPUT
            ClassIndex          : long*'''
        return super(IOverposter, self).AddClass(props)
    def InsertClass(self, Index, props):
        '''Method IOverposter.InsertClass

           INPUTS
            Index               : long
            props               : IOverposterLayerProperties*'''
        return super(IOverposter, self).InsertClass(Index, props)
    def RemoveClass(self, ClassIndex):
        '''Method IOverposter.RemoveClass

           INPUT
            ClassIndex          : long'''
        return super(IOverposter, self).RemoveClass(ClassIndex)
    def ResetClasses(self):
        '''Method IOverposter.ResetClasses'''
        return super(IOverposter, self).ResetClasses()
    def Initialize(self, Extent, Display):
        '''Method IOverposter.Initialize

           INPUTS
            Extent              : IEnvelope*
            Display             : IDisplay*'''
        return super(IOverposter, self).Initialize(Extent, Display)
    def AddBarriers(self, Weight, Barriers):
        '''Method IOverposter.AddBarriers

           INPUTS
            Weight              : esriBasicOverposterWeight
            Barriers            : IGeometryCollection*'''
        return super(IOverposter, self).AddBarriers(Weight, Barriers)
    def AddLabel(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol):
        '''Method IOverposter.AddLabel

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            Width               : double
            Height              : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*'''
        return super(IOverposter, self).AddLabel(ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol)
    def AddCurvedLabel(self, ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol):
        '''Method IOverposter.AddCurvedLabel

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            widths              : VARIANT
            ascents             : VARIANT
            descents            : VARIANT
            fontHeight          : double
            fontDescent         : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*'''
        return super(IOverposter, self).AddCurvedLabel(ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol)
    def AddSymbol(self, ClassIndex, Symbol, Geometry, FeatureId):
        '''Method IOverposter.AddSymbol

           INPUTS
            ClassIndex          : long
            Symbol              : ISymbol*
            Geometry            : IGeometry*
            FeatureId           : long'''
        return super(IOverposter, self).AddSymbol(ClassIndex, Symbol, Geometry, FeatureId)
    def PlaceObjects(self):
        '''Method IOverposter.PlaceObjects'''
        return super(IOverposter, self).PlaceObjects()
    def NextPlaced(self, TrackCancel, StepProgressor):
        '''Method IOverposter.NextPlaced

           INPUTS
            TrackCancel         : ITrackCancel*
            StepProgressor      : IStepProgressor*

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter, self).NextPlaced(TrackCancel, StepProgressor)
    def NextUnplaced(self):
        '''Method IOverposter.NextUnplaced

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter, self).NextUnplaced()
    def NextUnused(self):
        '''Method IOverposter.NextUnused

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter, self).NextUnused()
    def ReleaseResources(self):
        '''Method IOverposter.ReleaseResources'''
        return super(IOverposter, self).ReleaseResources()
    def get_NumberOfUnplacedLabels(self):
        '''Method IOverposter.get_NumberOfUnplacedLabels

           OUTPUT
            Count               : long*'''
        return super(IOverposter, self).get_NumberOfUnplacedLabels()
    def get_NumberOfPlacedLabels(self):
        '''Method IOverposter.get_NumberOfPlacedLabels

           OUTPUT
            Count               : long*'''
        return super(IOverposter, self).get_NumberOfPlacedLabels()
    NumClasses = property(get_NumClasses, None, None)
    NumberOfPlacedLabels = property(get_NumberOfPlacedLabels, None, None)
    NumberOfUnplacedLabels = property(get_NumberOfUnplacedLabels, None, None)
    Capabilities = IndexProperty(get_Capabilities, None)

class IOverposter2(_esriCarto.IOverposter2):
    _IID = uuid.UUID('ffec8117-ec4f-4329-bb7d-420453d29edd')
    def get_NumClasses(self):
        '''Method IOverposter2.get_NumClasses

           OUTPUT
            Count               : long*'''
        return super(IOverposter2, self).get_NumClasses()
    def get_Capabilities(self, Layer):
        '''Method IOverposter2.get_Capabilities

           INPUT
            Layer               : ILayer*

           OUTPUT
            caps                : esriOverposterCaps*'''
        return super(IOverposter2, self).get_Capabilities(Layer)
    def AddClass(self, props):
        '''Method IOverposter2.AddClass

           INPUT
            props               : IOverposterLayerProperties*

           OUTPUT
            ClassIndex          : long*'''
        return super(IOverposter2, self).AddClass(props)
    def InsertClass(self, Index, props):
        '''Method IOverposter2.InsertClass

           INPUTS
            Index               : long
            props               : IOverposterLayerProperties*'''
        return super(IOverposter2, self).InsertClass(Index, props)
    def RemoveClass(self, ClassIndex):
        '''Method IOverposter2.RemoveClass

           INPUT
            ClassIndex          : long'''
        return super(IOverposter2, self).RemoveClass(ClassIndex)
    def ResetClasses(self):
        '''Method IOverposter2.ResetClasses'''
        return super(IOverposter2, self).ResetClasses()
    def Initialize(self, Extent, Display):
        '''Method IOverposter2.Initialize

           INPUTS
            Extent              : IEnvelope*
            Display             : IDisplay*'''
        return super(IOverposter2, self).Initialize(Extent, Display)
    def AddBarriers(self, Weight, Barriers):
        '''Method IOverposter2.AddBarriers

           INPUTS
            Weight              : esriBasicOverposterWeight
            Barriers            : IGeometryCollection*'''
        return super(IOverposter2, self).AddBarriers(Weight, Barriers)
    def AddLabel(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol):
        '''Method IOverposter2.AddLabel

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            Width               : double
            Height              : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*'''
        return super(IOverposter2, self).AddLabel(ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol)
    def AddCurvedLabel(self, ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol):
        '''Method IOverposter2.AddCurvedLabel

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            widths              : VARIANT
            ascents             : VARIANT
            descents            : VARIANT
            fontHeight          : double
            fontDescent         : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*'''
        return super(IOverposter2, self).AddCurvedLabel(ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol)
    def AddSymbol(self, ClassIndex, Symbol, Geometry, FeatureId):
        '''Method IOverposter2.AddSymbol

           INPUTS
            ClassIndex          : long
            Symbol              : ISymbol*
            Geometry            : IGeometry*
            FeatureId           : long'''
        return super(IOverposter2, self).AddSymbol(ClassIndex, Symbol, Geometry, FeatureId)
    def PlaceObjects(self):
        '''Method IOverposter2.PlaceObjects'''
        return super(IOverposter2, self).PlaceObjects()
    def NextPlaced(self, TrackCancel, StepProgressor):
        '''Method IOverposter2.NextPlaced

           INPUTS
            TrackCancel         : ITrackCancel*
            StepProgressor      : IStepProgressor*

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter2, self).NextPlaced(TrackCancel, StepProgressor)
    def NextUnplaced(self):
        '''Method IOverposter2.NextUnplaced

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter2, self).NextUnplaced()
    def NextUnused(self):
        '''Method IOverposter2.NextUnused

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter2, self).NextUnused()
    def ReleaseResources(self):
        '''Method IOverposter2.ReleaseResources'''
        return super(IOverposter2, self).ReleaseResources()
    def get_NumberOfUnplacedLabels(self):
        '''Method IOverposter2.get_NumberOfUnplacedLabels

           OUTPUT
            Count               : long*'''
        return super(IOverposter2, self).get_NumberOfUnplacedLabels()
    def get_NumberOfPlacedLabels(self):
        '''Method IOverposter2.get_NumberOfPlacedLabels

           OUTPUT
            Count               : long*'''
        return super(IOverposter2, self).get_NumberOfPlacedLabels()
    def AddLabel2(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol, Angle):
        '''Method IOverposter2.AddLabel2

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            Width               : double
            Height              : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*
            Angle               : double'''
        return super(IOverposter2, self).AddLabel2(ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol, Angle)
    NumClasses = property(get_NumClasses, None, None)
    NumberOfPlacedLabels = property(get_NumberOfPlacedLabels, None, None)
    NumberOfUnplacedLabels = property(get_NumberOfUnplacedLabels, None, None)
    Capabilities = IndexProperty(get_Capabilities, None)

class IOverposter3(_esriCarto.IOverposter3):
    _IID = uuid.UUID('75dddcde-ca45-49da-a5c3-7663e2977dd5')
    def get_NumClasses(self):
        '''Method IOverposter3.get_NumClasses

           OUTPUT
            Count               : long*'''
        return super(IOverposter3, self).get_NumClasses()
    def get_Capabilities(self, Layer):
        '''Method IOverposter3.get_Capabilities

           INPUT
            Layer               : ILayer*

           OUTPUT
            caps                : esriOverposterCaps*'''
        return super(IOverposter3, self).get_Capabilities(Layer)
    def AddClass(self, props):
        '''Method IOverposter3.AddClass

           INPUT
            props               : IOverposterLayerProperties*

           OUTPUT
            ClassIndex          : long*'''
        return super(IOverposter3, self).AddClass(props)
    def InsertClass(self, Index, props):
        '''Method IOverposter3.InsertClass

           INPUTS
            Index               : long
            props               : IOverposterLayerProperties*'''
        return super(IOverposter3, self).InsertClass(Index, props)
    def RemoveClass(self, ClassIndex):
        '''Method IOverposter3.RemoveClass

           INPUT
            ClassIndex          : long'''
        return super(IOverposter3, self).RemoveClass(ClassIndex)
    def ResetClasses(self):
        '''Method IOverposter3.ResetClasses'''
        return super(IOverposter3, self).ResetClasses()
    def Initialize(self, Extent, Display, pOverposterProps):
        '''Method IOverposter3.Initialize

           INPUTS
            Extent              : IEnvelope*
            Display             : IDisplay*
            pOverposterProps    : IOverposterProperties*'''
        return super(IOverposter3, self).Initialize(Extent, Display, pOverposterProps)
    def AddBarriers(self, Weight, Barriers):
        '''Method IOverposter3.AddBarriers

           INPUTS
            Weight              : esriBasicOverposterWeight
            Barriers            : IGeometryCollection*'''
        return super(IOverposter3, self).AddBarriers(Weight, Barriers)
    def AddLabel(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol):
        '''Method IOverposter3.AddLabel

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            Width               : double
            Height              : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*'''
        return super(IOverposter3, self).AddLabel(ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol)
    def AddCurvedLabel(self, ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol):
        '''Method IOverposter3.AddCurvedLabel

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            widths              : VARIANT
            ascents             : VARIANT
            descents            : VARIANT
            fontHeight          : double
            fontDescent         : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*'''
        return super(IOverposter3, self).AddCurvedLabel(ClassIndex, Label, widths, ascents, descents, fontHeight, fontDescent, ControlShape, FeatureId, Symbol)
    def AddSymbol(self, ClassIndex, Symbol, Geometry, FeatureId):
        '''Method IOverposter3.AddSymbol

           INPUTS
            ClassIndex          : long
            Symbol              : ISymbol*
            Geometry            : IGeometry*
            FeatureId           : long'''
        return super(IOverposter3, self).AddSymbol(ClassIndex, Symbol, Geometry, FeatureId)
    def PlaceObjects(self):
        '''Method IOverposter3.PlaceObjects'''
        return super(IOverposter3, self).PlaceObjects()
    def NextPlaced(self, TrackCancel, StepProgressor):
        '''Method IOverposter3.NextPlaced

           INPUTS
            TrackCancel         : ITrackCancel*
            StepProgressor      : IStepProgressor*

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter3, self).NextPlaced(TrackCancel, StepProgressor)
    def NextUnplaced(self):
        '''Method IOverposter3.NextUnplaced

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter3, self).NextUnplaced()
    def NextUnused(self):
        '''Method IOverposter3.NextUnused

           OUTPUT
            Object              : IPlacedObject**'''
        return super(IOverposter3, self).NextUnused()
    def ReleaseResources(self):
        '''Method IOverposter3.ReleaseResources'''
        return super(IOverposter3, self).ReleaseResources()
    def get_NumberOfUnplacedLabels(self):
        '''Method IOverposter3.get_NumberOfUnplacedLabels

           OUTPUT
            Count               : long*'''
        return super(IOverposter3, self).get_NumberOfUnplacedLabels()
    def get_NumberOfPlacedLabels(self):
        '''Method IOverposter3.get_NumberOfPlacedLabels

           OUTPUT
            Count               : long*'''
        return super(IOverposter3, self).get_NumberOfPlacedLabels()
    def AddLabel2(self, ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol, Angle):
        '''Method IOverposter3.AddLabel2

           INPUTS
            ClassIndex          : long
            Label               : BSTR
            Width               : double
            Height              : double
            ControlShape        : IGeometry*
            FeatureId           : long
            Symbol              : ISymbol*
            Angle               : double'''
        return super(IOverposter3, self).AddLabel2(ClassIndex, Label, Width, Height, ControlShape, FeatureId, Symbol, Angle)
    NumClasses = property(get_NumClasses, None, None)
    NumberOfPlacedLabels = property(get_NumberOfPlacedLabels, None, None)
    NumberOfUnplacedLabels = property(get_NumberOfUnplacedLabels, None, None)
    Capabilities = IndexProperty(get_Capabilities, None)

class IOverposter4(_esriCarto.IOverposter4):
    _IID = uuid.UUID('655ef2f1-880a-34bb-1dfa-7e00af2e442a')
    def AddClass(self, props, Symbol):
        '''Method IOverposter4.AddClass

           INPUTS
            props               : IOverposterLayerProperties*
            Symbol              : ITextSymbol*

           OUTPUT
            ClassIndex          : long*'''
        return super(IOverposter4, self).AddClass(props, Symbol)

class IBasicOverposterLayerProperties2(_esriCarto.IBasicOverposterLayerProperties2):
    _IID = uuid.UUID('6cc4facb-5f13-418a-bf24-d2c61d56fe66')

    def __init__(self, *args, **kw):
        super(IBasicOverposterLayerProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureType(self):
        '''Method IBasicOverposterLayerProperties2.get_FeatureType

           OUTPUT
            Type                : esriBasicOverposterFeatureType*'''
        return super(IBasicOverposterLayerProperties2, self).get_FeatureType()
    def put_FeatureType(self, Type):
        '''Method IBasicOverposterLayerProperties2.put_FeatureType

           INPUT
            Type                : esriBasicOverposterFeatureType'''
        return super(IBasicOverposterLayerProperties2, self).put_FeatureType(Type)
    def get_FeatureWeight(self):
        '''Method IBasicOverposterLayerProperties2.get_FeatureWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties2, self).get_FeatureWeight()
    def put_FeatureWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties2.put_FeatureWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties2, self).put_FeatureWeight(Weight)
    def get_LabelWeight(self):
        '''Method IBasicOverposterLayerProperties2.get_LabelWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties2, self).get_LabelWeight()
    def put_LabelWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties2.put_LabelWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties2, self).put_LabelWeight(Weight)
    def get_NumLabelsOption(self):
        '''Method IBasicOverposterLayerProperties2.get_NumLabelsOption

           OUTPUT
            option              : esriBasicNumLabelsOption*'''
        return super(IBasicOverposterLayerProperties2, self).get_NumLabelsOption()
    def put_NumLabelsOption(self, option):
        '''Method IBasicOverposterLayerProperties2.put_NumLabelsOption

           INPUT
            option              : esriBasicNumLabelsOption'''
        return super(IBasicOverposterLayerProperties2, self).put_NumLabelsOption(option)
    def get_LineLabelPosition(self):
        '''Method IBasicOverposterLayerProperties2.get_LineLabelPosition

           OUTPUT
            position            : ILineLabelPosition**'''
        return super(IBasicOverposterLayerProperties2, self).get_LineLabelPosition()
    def put_LineLabelPosition(self, position):
        '''Method IBasicOverposterLayerProperties2.put_LineLabelPosition

           INPUT
            position            : ILineLabelPosition*'''
        return super(IBasicOverposterLayerProperties2, self).put_LineLabelPosition(position)
    def get_LineLabelPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties2.get_LineLabelPlacementPriorities

           OUTPUT
            linePlacementPriorities: ILineLabelPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties2, self).get_LineLabelPlacementPriorities()
    def put_LineLabelPlacementPriorities(self, linePlacementPriorities):
        '''Method IBasicOverposterLayerProperties2.put_LineLabelPlacementPriorities

           INPUT
            linePlacementPriorities: ILineLabelPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties2, self).put_LineLabelPlacementPriorities(linePlacementPriorities)
    def get_GenerateUnplacedLabels(self):
        '''Method IBasicOverposterLayerProperties2.get_GenerateUnplacedLabels

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties2, self).get_GenerateUnplacedLabels()
    def put_GenerateUnplacedLabels(self, flag):
        '''Method IBasicOverposterLayerProperties2.put_GenerateUnplacedLabels

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties2, self).put_GenerateUnplacedLabels(flag)
    def get_PointPlacementMethod(self):
        '''Method IBasicOverposterLayerProperties2.get_PointPlacementMethod

           OUTPUT
            Method              : esriOverposterPointPlacementMethod*'''
        return super(IBasicOverposterLayerProperties2, self).get_PointPlacementMethod()
    def put_PointPlacementMethod(self, Method):
        '''Method IBasicOverposterLayerProperties2.put_PointPlacementMethod

           INPUT
            Method              : esriOverposterPointPlacementMethod'''
        return super(IBasicOverposterLayerProperties2, self).put_PointPlacementMethod(Method)
    def get_PointPlacementOnTop(self):
        '''Method IBasicOverposterLayerProperties2.get_PointPlacementOnTop

           OUTPUT
            OnTop               : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties2, self).get_PointPlacementOnTop()
    def put_PointPlacementOnTop(self, OnTop):
        '''Method IBasicOverposterLayerProperties2.put_PointPlacementOnTop

           INPUT
            OnTop               : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties2, self).put_PointPlacementOnTop(OnTop)
    def get_PointPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties2.get_PointPlacementPriorities

           OUTPUT
            PointPlacementPriorities: IPointPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties2, self).get_PointPlacementPriorities()
    def put_PointPlacementPriorities(self, PointPlacementPriorities):
        '''Method IBasicOverposterLayerProperties2.put_PointPlacementPriorities

           INPUT
            PointPlacementPriorities: IPointPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties2, self).put_PointPlacementPriorities(PointPlacementPriorities)
    def get_PointPlacementAngles(self):
        '''Method IBasicOverposterLayerProperties2.get_PointPlacementAngles

           OUTPUT
            angles              : VARIANT*'''
        return super(IBasicOverposterLayerProperties2, self).get_PointPlacementAngles()
    def put_PointPlacementAngles(self, angles):
        '''Method IBasicOverposterLayerProperties2.put_PointPlacementAngles

           INPUT
            angles              : VARIANT'''
        return super(IBasicOverposterLayerProperties2, self).put_PointPlacementAngles(angles)
    def get_BufferRatio(self):
        '''Method IBasicOverposterLayerProperties2.get_BufferRatio

           OUTPUT
            BufferRatio         : double*'''
        return super(IBasicOverposterLayerProperties2, self).get_BufferRatio()
    def put_BufferRatio(self, BufferRatio):
        '''Method IBasicOverposterLayerProperties2.put_BufferRatio

           INPUT
            BufferRatio         : double'''
        return super(IBasicOverposterLayerProperties2, self).put_BufferRatio(BufferRatio)
    def get_LineOffset(self):
        '''Method IBasicOverposterLayerProperties2.get_LineOffset

           OUTPUT
            LineOffset          : double*'''
        return super(IBasicOverposterLayerProperties2, self).get_LineOffset()
    def put_LineOffset(self, LineOffset):
        '''Method IBasicOverposterLayerProperties2.put_LineOffset

           INPUT
            LineOffset          : double'''
        return super(IBasicOverposterLayerProperties2, self).put_LineOffset(LineOffset)
    def get_MaxDistanceFromTarget(self):
        '''Method IBasicOverposterLayerProperties2.get_MaxDistanceFromTarget

           OUTPUT
            Distance            : double*'''
        return super(IBasicOverposterLayerProperties2, self).get_MaxDistanceFromTarget()
    def put_MaxDistanceFromTarget(self, Distance):
        '''Method IBasicOverposterLayerProperties2.put_MaxDistanceFromTarget

           INPUT
            Distance            : double'''
        return super(IBasicOverposterLayerProperties2, self).put_MaxDistanceFromTarget(Distance)
    BufferRatio = property(get_BufferRatio, put_BufferRatio, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    FeatureWeight = property(get_FeatureWeight, put_FeatureWeight, None)
    GenerateUnplacedLabels = property(get_GenerateUnplacedLabels, put_GenerateUnplacedLabels, None)
    LabelWeight = property(get_LabelWeight, put_LabelWeight, None)
    LineLabelPlacementPriorities = property(get_LineLabelPlacementPriorities, put_LineLabelPlacementPriorities, None)
    LineLabelPosition = property(get_LineLabelPosition, put_LineLabelPosition, None)
    LineOffset = property(get_LineOffset, put_LineOffset, None)
    MaxDistanceFromTarget = property(get_MaxDistanceFromTarget, put_MaxDistanceFromTarget, None)
    NumLabelsOption = property(get_NumLabelsOption, put_NumLabelsOption, None)
    PointPlacementAngles = property(get_PointPlacementAngles, put_PointPlacementAngles, None)
    PointPlacementMethod = property(get_PointPlacementMethod, put_PointPlacementMethod, None)
    PointPlacementOnTop = property(get_PointPlacementOnTop, put_PointPlacementOnTop, None)
    PointPlacementPriorities = property(get_PointPlacementPriorities, put_PointPlacementPriorities, None)

class IBasicOverposterLayerProperties3(_esriCarto.IBasicOverposterLayerProperties3):
    _IID = uuid.UUID('7bdbb1ec-e951-4058-8140-d5cd88556613')

    def __init__(self, *args, **kw):
        super(IBasicOverposterLayerProperties3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureType(self):
        '''Method IBasicOverposterLayerProperties3.get_FeatureType

           OUTPUT
            Type                : esriBasicOverposterFeatureType*'''
        return super(IBasicOverposterLayerProperties3, self).get_FeatureType()
    def put_FeatureType(self, Type):
        '''Method IBasicOverposterLayerProperties3.put_FeatureType

           INPUT
            Type                : esriBasicOverposterFeatureType'''
        return super(IBasicOverposterLayerProperties3, self).put_FeatureType(Type)
    def get_FeatureWeight(self):
        '''Method IBasicOverposterLayerProperties3.get_FeatureWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties3, self).get_FeatureWeight()
    def put_FeatureWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties3.put_FeatureWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties3, self).put_FeatureWeight(Weight)
    def get_LabelWeight(self):
        '''Method IBasicOverposterLayerProperties3.get_LabelWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties3, self).get_LabelWeight()
    def put_LabelWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties3.put_LabelWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties3, self).put_LabelWeight(Weight)
    def get_NumLabelsOption(self):
        '''Method IBasicOverposterLayerProperties3.get_NumLabelsOption

           OUTPUT
            option              : esriBasicNumLabelsOption*'''
        return super(IBasicOverposterLayerProperties3, self).get_NumLabelsOption()
    def put_NumLabelsOption(self, option):
        '''Method IBasicOverposterLayerProperties3.put_NumLabelsOption

           INPUT
            option              : esriBasicNumLabelsOption'''
        return super(IBasicOverposterLayerProperties3, self).put_NumLabelsOption(option)
    def get_LineLabelPosition(self):
        '''Method IBasicOverposterLayerProperties3.get_LineLabelPosition

           OUTPUT
            position            : ILineLabelPosition**'''
        return super(IBasicOverposterLayerProperties3, self).get_LineLabelPosition()
    def put_LineLabelPosition(self, position):
        '''Method IBasicOverposterLayerProperties3.put_LineLabelPosition

           INPUT
            position            : ILineLabelPosition*'''
        return super(IBasicOverposterLayerProperties3, self).put_LineLabelPosition(position)
    def get_LineLabelPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties3.get_LineLabelPlacementPriorities

           OUTPUT
            linePlacementPriorities: ILineLabelPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties3, self).get_LineLabelPlacementPriorities()
    def put_LineLabelPlacementPriorities(self, linePlacementPriorities):
        '''Method IBasicOverposterLayerProperties3.put_LineLabelPlacementPriorities

           INPUT
            linePlacementPriorities: ILineLabelPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties3, self).put_LineLabelPlacementPriorities(linePlacementPriorities)
    def get_GenerateUnplacedLabels(self):
        '''Method IBasicOverposterLayerProperties3.get_GenerateUnplacedLabels

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties3, self).get_GenerateUnplacedLabels()
    def put_GenerateUnplacedLabels(self, flag):
        '''Method IBasicOverposterLayerProperties3.put_GenerateUnplacedLabels

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties3, self).put_GenerateUnplacedLabels(flag)
    def get_PointPlacementMethod(self):
        '''Method IBasicOverposterLayerProperties3.get_PointPlacementMethod

           OUTPUT
            Method              : esriOverposterPointPlacementMethod*'''
        return super(IBasicOverposterLayerProperties3, self).get_PointPlacementMethod()
    def put_PointPlacementMethod(self, Method):
        '''Method IBasicOverposterLayerProperties3.put_PointPlacementMethod

           INPUT
            Method              : esriOverposterPointPlacementMethod'''
        return super(IBasicOverposterLayerProperties3, self).put_PointPlacementMethod(Method)
    def get_PointPlacementOnTop(self):
        '''Method IBasicOverposterLayerProperties3.get_PointPlacementOnTop

           OUTPUT
            OnTop               : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties3, self).get_PointPlacementOnTop()
    def put_PointPlacementOnTop(self, OnTop):
        '''Method IBasicOverposterLayerProperties3.put_PointPlacementOnTop

           INPUT
            OnTop               : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties3, self).put_PointPlacementOnTop(OnTop)
    def get_PointPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties3.get_PointPlacementPriorities

           OUTPUT
            PointPlacementPriorities: IPointPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties3, self).get_PointPlacementPriorities()
    def put_PointPlacementPriorities(self, PointPlacementPriorities):
        '''Method IBasicOverposterLayerProperties3.put_PointPlacementPriorities

           INPUT
            PointPlacementPriorities: IPointPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties3, self).put_PointPlacementPriorities(PointPlacementPriorities)
    def get_PointPlacementAngles(self):
        '''Method IBasicOverposterLayerProperties3.get_PointPlacementAngles

           OUTPUT
            angles              : VARIANT*'''
        return super(IBasicOverposterLayerProperties3, self).get_PointPlacementAngles()
    def put_PointPlacementAngles(self, angles):
        '''Method IBasicOverposterLayerProperties3.put_PointPlacementAngles

           INPUT
            angles              : VARIANT'''
        return super(IBasicOverposterLayerProperties3, self).put_PointPlacementAngles(angles)
    def get_BufferRatio(self):
        '''Method IBasicOverposterLayerProperties3.get_BufferRatio

           OUTPUT
            BufferRatio         : double*'''
        return super(IBasicOverposterLayerProperties3, self).get_BufferRatio()
    def put_BufferRatio(self, BufferRatio):
        '''Method IBasicOverposterLayerProperties3.put_BufferRatio

           INPUT
            BufferRatio         : double'''
        return super(IBasicOverposterLayerProperties3, self).put_BufferRatio(BufferRatio)
    def get_LineOffset(self):
        '''Method IBasicOverposterLayerProperties3.get_LineOffset

           OUTPUT
            LineOffset          : double*'''
        return super(IBasicOverposterLayerProperties3, self).get_LineOffset()
    def put_LineOffset(self, LineOffset):
        '''Method IBasicOverposterLayerProperties3.put_LineOffset

           INPUT
            LineOffset          : double'''
        return super(IBasicOverposterLayerProperties3, self).put_LineOffset(LineOffset)
    def get_MaxDistanceFromTarget(self):
        '''Method IBasicOverposterLayerProperties3.get_MaxDistanceFromTarget

           OUTPUT
            Distance            : double*'''
        return super(IBasicOverposterLayerProperties3, self).get_MaxDistanceFromTarget()
    def put_MaxDistanceFromTarget(self, Distance):
        '''Method IBasicOverposterLayerProperties3.put_MaxDistanceFromTarget

           INPUT
            Distance            : double'''
        return super(IBasicOverposterLayerProperties3, self).put_MaxDistanceFromTarget(Distance)
    def get_RotationType(self):
        '''Method IBasicOverposterLayerProperties3.get_RotationType

           OUTPUT
            Type                : esriLabelRotationType*'''
        return super(IBasicOverposterLayerProperties3, self).get_RotationType()
    def put_RotationType(self, Type):
        '''Method IBasicOverposterLayerProperties3.put_RotationType

           INPUT
            Type                : esriLabelRotationType'''
        return super(IBasicOverposterLayerProperties3, self).put_RotationType(Type)
    def get_RotationField(self):
        '''Method IBasicOverposterLayerProperties3.get_RotationField

           OUTPUT
            Field               : BSTR*'''
        return super(IBasicOverposterLayerProperties3, self).get_RotationField()
    def put_RotationField(self, Field):
        '''Method IBasicOverposterLayerProperties3.put_RotationField

           INPUT
            Field               : BSTR'''
        return super(IBasicOverposterLayerProperties3, self).put_RotationField(Field)
    def get_PerpendicularToAngle(self):
        '''Method IBasicOverposterLayerProperties3.get_PerpendicularToAngle

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties3, self).get_PerpendicularToAngle()
    def put_PerpendicularToAngle(self, flag):
        '''Method IBasicOverposterLayerProperties3.put_PerpendicularToAngle

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties3, self).put_PerpendicularToAngle(flag)
    BufferRatio = property(get_BufferRatio, put_BufferRatio, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    FeatureWeight = property(get_FeatureWeight, put_FeatureWeight, None)
    GenerateUnplacedLabels = property(get_GenerateUnplacedLabels, put_GenerateUnplacedLabels, None)
    LabelWeight = property(get_LabelWeight, put_LabelWeight, None)
    LineLabelPlacementPriorities = property(get_LineLabelPlacementPriorities, put_LineLabelPlacementPriorities, None)
    LineLabelPosition = property(get_LineLabelPosition, put_LineLabelPosition, None)
    LineOffset = property(get_LineOffset, put_LineOffset, None)
    MaxDistanceFromTarget = property(get_MaxDistanceFromTarget, put_MaxDistanceFromTarget, None)
    NumLabelsOption = property(get_NumLabelsOption, put_NumLabelsOption, None)
    PerpendicularToAngle = property(get_PerpendicularToAngle, put_PerpendicularToAngle, None)
    PointPlacementAngles = property(get_PointPlacementAngles, put_PointPlacementAngles, None)
    PointPlacementMethod = property(get_PointPlacementMethod, put_PointPlacementMethod, None)
    PointPlacementOnTop = property(get_PointPlacementOnTop, put_PointPlacementOnTop, None)
    PointPlacementPriorities = property(get_PointPlacementPriorities, put_PointPlacementPriorities, None)
    RotationField = property(get_RotationField, put_RotationField, None)
    RotationType = property(get_RotationType, put_RotationType, None)

class IBasicOverposterLayerProperties4(_esriCarto.IBasicOverposterLayerProperties4):
    _IID = uuid.UUID('f64b3a44-c14c-4b12-994f-ae72196eec56')

    def __init__(self, *args, **kw):
        super(IBasicOverposterLayerProperties4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureType(self):
        '''Method IBasicOverposterLayerProperties4.get_FeatureType

           OUTPUT
            Type                : esriBasicOverposterFeatureType*'''
        return super(IBasicOverposterLayerProperties4, self).get_FeatureType()
    def put_FeatureType(self, Type):
        '''Method IBasicOverposterLayerProperties4.put_FeatureType

           INPUT
            Type                : esriBasicOverposterFeatureType'''
        return super(IBasicOverposterLayerProperties4, self).put_FeatureType(Type)
    def get_FeatureWeight(self):
        '''Method IBasicOverposterLayerProperties4.get_FeatureWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties4, self).get_FeatureWeight()
    def put_FeatureWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties4.put_FeatureWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties4, self).put_FeatureWeight(Weight)
    def get_LabelWeight(self):
        '''Method IBasicOverposterLayerProperties4.get_LabelWeight

           OUTPUT
            Weight              : esriBasicOverposterWeight*'''
        return super(IBasicOverposterLayerProperties4, self).get_LabelWeight()
    def put_LabelWeight(self, Weight):
        '''Method IBasicOverposterLayerProperties4.put_LabelWeight

           INPUT
            Weight              : esriBasicOverposterWeight'''
        return super(IBasicOverposterLayerProperties4, self).put_LabelWeight(Weight)
    def get_NumLabelsOption(self):
        '''Method IBasicOverposterLayerProperties4.get_NumLabelsOption

           OUTPUT
            option              : esriBasicNumLabelsOption*'''
        return super(IBasicOverposterLayerProperties4, self).get_NumLabelsOption()
    def put_NumLabelsOption(self, option):
        '''Method IBasicOverposterLayerProperties4.put_NumLabelsOption

           INPUT
            option              : esriBasicNumLabelsOption'''
        return super(IBasicOverposterLayerProperties4, self).put_NumLabelsOption(option)
    def get_LineLabelPosition(self):
        '''Method IBasicOverposterLayerProperties4.get_LineLabelPosition

           OUTPUT
            position            : ILineLabelPosition**'''
        return super(IBasicOverposterLayerProperties4, self).get_LineLabelPosition()
    def put_LineLabelPosition(self, position):
        '''Method IBasicOverposterLayerProperties4.put_LineLabelPosition

           INPUT
            position            : ILineLabelPosition*'''
        return super(IBasicOverposterLayerProperties4, self).put_LineLabelPosition(position)
    def get_LineLabelPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties4.get_LineLabelPlacementPriorities

           OUTPUT
            linePlacementPriorities: ILineLabelPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties4, self).get_LineLabelPlacementPriorities()
    def put_LineLabelPlacementPriorities(self, linePlacementPriorities):
        '''Method IBasicOverposterLayerProperties4.put_LineLabelPlacementPriorities

           INPUT
            linePlacementPriorities: ILineLabelPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties4, self).put_LineLabelPlacementPriorities(linePlacementPriorities)
    def get_GenerateUnplacedLabels(self):
        '''Method IBasicOverposterLayerProperties4.get_GenerateUnplacedLabels

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties4, self).get_GenerateUnplacedLabels()
    def put_GenerateUnplacedLabels(self, flag):
        '''Method IBasicOverposterLayerProperties4.put_GenerateUnplacedLabels

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties4, self).put_GenerateUnplacedLabels(flag)
    def get_PointPlacementMethod(self):
        '''Method IBasicOverposterLayerProperties4.get_PointPlacementMethod

           OUTPUT
            Method              : esriOverposterPointPlacementMethod*'''
        return super(IBasicOverposterLayerProperties4, self).get_PointPlacementMethod()
    def put_PointPlacementMethod(self, Method):
        '''Method IBasicOverposterLayerProperties4.put_PointPlacementMethod

           INPUT
            Method              : esriOverposterPointPlacementMethod'''
        return super(IBasicOverposterLayerProperties4, self).put_PointPlacementMethod(Method)
    def get_PointPlacementOnTop(self):
        '''Method IBasicOverposterLayerProperties4.get_PointPlacementOnTop

           OUTPUT
            OnTop               : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties4, self).get_PointPlacementOnTop()
    def put_PointPlacementOnTop(self, OnTop):
        '''Method IBasicOverposterLayerProperties4.put_PointPlacementOnTop

           INPUT
            OnTop               : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties4, self).put_PointPlacementOnTop(OnTop)
    def get_PointPlacementPriorities(self):
        '''Method IBasicOverposterLayerProperties4.get_PointPlacementPriorities

           OUTPUT
            PointPlacementPriorities: IPointPlacementPriorities**'''
        return super(IBasicOverposterLayerProperties4, self).get_PointPlacementPriorities()
    def put_PointPlacementPriorities(self, PointPlacementPriorities):
        '''Method IBasicOverposterLayerProperties4.put_PointPlacementPriorities

           INPUT
            PointPlacementPriorities: IPointPlacementPriorities*'''
        return super(IBasicOverposterLayerProperties4, self).put_PointPlacementPriorities(PointPlacementPriorities)
    def get_PointPlacementAngles(self):
        '''Method IBasicOverposterLayerProperties4.get_PointPlacementAngles

           OUTPUT
            angles              : VARIANT*'''
        return super(IBasicOverposterLayerProperties4, self).get_PointPlacementAngles()
    def put_PointPlacementAngles(self, angles):
        '''Method IBasicOverposterLayerProperties4.put_PointPlacementAngles

           INPUT
            angles              : VARIANT'''
        return super(IBasicOverposterLayerProperties4, self).put_PointPlacementAngles(angles)
    def get_BufferRatio(self):
        '''Method IBasicOverposterLayerProperties4.get_BufferRatio

           OUTPUT
            BufferRatio         : double*'''
        return super(IBasicOverposterLayerProperties4, self).get_BufferRatio()
    def put_BufferRatio(self, BufferRatio):
        '''Method IBasicOverposterLayerProperties4.put_BufferRatio

           INPUT
            BufferRatio         : double'''
        return super(IBasicOverposterLayerProperties4, self).put_BufferRatio(BufferRatio)
    def get_LineOffset(self):
        '''Method IBasicOverposterLayerProperties4.get_LineOffset

           OUTPUT
            LineOffset          : double*'''
        return super(IBasicOverposterLayerProperties4, self).get_LineOffset()
    def put_LineOffset(self, LineOffset):
        '''Method IBasicOverposterLayerProperties4.put_LineOffset

           INPUT
            LineOffset          : double'''
        return super(IBasicOverposterLayerProperties4, self).put_LineOffset(LineOffset)
    def get_MaxDistanceFromTarget(self):
        '''Method IBasicOverposterLayerProperties4.get_MaxDistanceFromTarget

           OUTPUT
            Distance            : double*'''
        return super(IBasicOverposterLayerProperties4, self).get_MaxDistanceFromTarget()
    def put_MaxDistanceFromTarget(self, Distance):
        '''Method IBasicOverposterLayerProperties4.put_MaxDistanceFromTarget

           INPUT
            Distance            : double'''
        return super(IBasicOverposterLayerProperties4, self).put_MaxDistanceFromTarget(Distance)
    def get_RotationType(self):
        '''Method IBasicOverposterLayerProperties4.get_RotationType

           OUTPUT
            Type                : esriLabelRotationType*'''
        return super(IBasicOverposterLayerProperties4, self).get_RotationType()
    def put_RotationType(self, Type):
        '''Method IBasicOverposterLayerProperties4.put_RotationType

           INPUT
            Type                : esriLabelRotationType'''
        return super(IBasicOverposterLayerProperties4, self).put_RotationType(Type)
    def get_RotationField(self):
        '''Method IBasicOverposterLayerProperties4.get_RotationField

           OUTPUT
            Field               : BSTR*'''
        return super(IBasicOverposterLayerProperties4, self).get_RotationField()
    def put_RotationField(self, Field):
        '''Method IBasicOverposterLayerProperties4.put_RotationField

           INPUT
            Field               : BSTR'''
        return super(IBasicOverposterLayerProperties4, self).put_RotationField(Field)
    def get_PerpendicularToAngle(self):
        '''Method IBasicOverposterLayerProperties4.get_PerpendicularToAngle

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties4, self).get_PerpendicularToAngle()
    def put_PerpendicularToAngle(self, flag):
        '''Method IBasicOverposterLayerProperties4.put_PerpendicularToAngle

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties4, self).put_PerpendicularToAngle(flag)
    def get_PolygonPlacementMethod(self):
        '''Method IBasicOverposterLayerProperties4.get_PolygonPlacementMethod

           OUTPUT
            Method              : esriOverposterPolygonPlacementMethod*'''
        return super(IBasicOverposterLayerProperties4, self).get_PolygonPlacementMethod()
    def put_PolygonPlacementMethod(self, Method):
        '''Method IBasicOverposterLayerProperties4.put_PolygonPlacementMethod

           INPUT
            Method              : esriOverposterPolygonPlacementMethod'''
        return super(IBasicOverposterLayerProperties4, self).put_PolygonPlacementMethod(Method)
    def get_PlaceOnlyInsidePolygon(self):
        '''Method IBasicOverposterLayerProperties4.get_PlaceOnlyInsidePolygon

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasicOverposterLayerProperties4, self).get_PlaceOnlyInsidePolygon()
    def put_PlaceOnlyInsidePolygon(self, flag):
        '''Method IBasicOverposterLayerProperties4.put_PlaceOnlyInsidePolygon

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IBasicOverposterLayerProperties4, self).put_PlaceOnlyInsidePolygon(flag)
    BufferRatio = property(get_BufferRatio, put_BufferRatio, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    FeatureWeight = property(get_FeatureWeight, put_FeatureWeight, None)
    GenerateUnplacedLabels = property(get_GenerateUnplacedLabels, put_GenerateUnplacedLabels, None)
    LabelWeight = property(get_LabelWeight, put_LabelWeight, None)
    LineLabelPlacementPriorities = property(get_LineLabelPlacementPriorities, put_LineLabelPlacementPriorities, None)
    LineLabelPosition = property(get_LineLabelPosition, put_LineLabelPosition, None)
    LineOffset = property(get_LineOffset, put_LineOffset, None)
    MaxDistanceFromTarget = property(get_MaxDistanceFromTarget, put_MaxDistanceFromTarget, None)
    NumLabelsOption = property(get_NumLabelsOption, put_NumLabelsOption, None)
    PerpendicularToAngle = property(get_PerpendicularToAngle, put_PerpendicularToAngle, None)
    PlaceOnlyInsidePolygon = property(get_PlaceOnlyInsidePolygon, put_PlaceOnlyInsidePolygon, None)
    PointPlacementAngles = property(get_PointPlacementAngles, put_PointPlacementAngles, None)
    PointPlacementMethod = property(get_PointPlacementMethod, put_PointPlacementMethod, None)
    PointPlacementOnTop = property(get_PointPlacementOnTop, put_PointPlacementOnTop, None)
    PointPlacementPriorities = property(get_PointPlacementPriorities, put_PointPlacementPriorities, None)
    PolygonPlacementMethod = property(get_PolygonPlacementMethod, put_PolygonPlacementMethod, None)
    RotationField = property(get_RotationField, put_RotationField, None)
    RotationType = property(get_RotationType, put_RotationType, None)

class IBasicOverposterEvents(_esriCarto.IBasicOverposterEvents):
    _IID = uuid.UUID('c4541861-5a4f-11d2-a2c0-080009b6f22b')
    def Label(self, placedObject):
        '''Method IBasicOverposterEvents.Label

           INPUT
            placedObject        : IPlacedObject*

           OUTPUT
            Cancel              : VARIANT_BOOL*'''
        return super(IBasicOverposterEvents, self).Label(placedObject)

class IMaplexRotationProperties(_esriCarto.IMaplexRotationProperties):
    _IID = uuid.UUID('20664808-77af-65e1-faef-18e6f9ec732a')

    def __init__(self, *args, **kw):
        super(IMaplexRotationProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Enable(self):
        '''Method IMaplexRotationProperties.get_Enable

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexRotationProperties, self).get_Enable()
    def put_Enable(self, flag):
        '''Method IMaplexRotationProperties.put_Enable

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexRotationProperties, self).put_Enable(flag)
    def get_RotationType(self):
        '''Method IMaplexRotationProperties.get_RotationType

           OUTPUT
            Type                : esriLabelRotationType*'''
        return super(IMaplexRotationProperties, self).get_RotationType()
    def put_RotationType(self, Type):
        '''Method IMaplexRotationProperties.put_RotationType

           INPUT
            Type                : esriLabelRotationType'''
        return super(IMaplexRotationProperties, self).put_RotationType(Type)
    def get_RotationField(self):
        '''Method IMaplexRotationProperties.get_RotationField

           OUTPUT
            Field               : BSTR*'''
        return super(IMaplexRotationProperties, self).get_RotationField()
    def put_RotationField(self, Field):
        '''Method IMaplexRotationProperties.put_RotationField

           INPUT
            Field               : BSTR'''
        return super(IMaplexRotationProperties, self).put_RotationField(Field)
    def get_PerpendicularToAngle(self):
        '''Method IMaplexRotationProperties.get_PerpendicularToAngle

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexRotationProperties, self).get_PerpendicularToAngle()
    def put_PerpendicularToAngle(self, flag):
        '''Method IMaplexRotationProperties.put_PerpendicularToAngle

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexRotationProperties, self).put_PerpendicularToAngle(flag)
    def get_AlignLabelToAngle(self):
        '''Method IMaplexRotationProperties.get_AlignLabelToAngle

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexRotationProperties, self).get_AlignLabelToAngle()
    def put_AlignLabelToAngle(self, flag):
        '''Method IMaplexRotationProperties.put_AlignLabelToAngle

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexRotationProperties, self).put_AlignLabelToAngle(flag)
    AlignLabelToAngle = property(get_AlignLabelToAngle, put_AlignLabelToAngle, None)
    Enable = property(get_Enable, put_Enable, None)
    PerpendicularToAngle = property(get_PerpendicularToAngle, put_PerpendicularToAngle, None)
    RotationField = property(get_RotationField, put_RotationField, None)
    RotationType = property(get_RotationType, put_RotationType, None)

class IMaplexRotationProperties2(_esriCarto.IMaplexRotationProperties2):
    _IID = uuid.UUID('def4269e-effa-b003-28fe-ba19e4ee412a')

    def __init__(self, *args, **kw):
        super(IMaplexRotationProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AlignmentType(self):
        '''Method IMaplexRotationProperties2.get_AlignmentType

           OUTPUT
            Type                : esriMaplexRotationAlignmentType*'''
        return super(IMaplexRotationProperties2, self).get_AlignmentType()
    def put_AlignmentType(self, Type):
        '''Method IMaplexRotationProperties2.put_AlignmentType

           INPUT
            Type                : esriMaplexRotationAlignmentType'''
        return super(IMaplexRotationProperties2, self).put_AlignmentType(Type)
    def get_AdditionalAngle(self):
        '''Method IMaplexRotationProperties2.get_AdditionalAngle

           OUTPUT
            Value               : long*'''
        return super(IMaplexRotationProperties2, self).get_AdditionalAngle()
    def put_AdditionalAngle(self, Value):
        '''Method IMaplexRotationProperties2.put_AdditionalAngle

           INPUT
            Value               : long'''
        return super(IMaplexRotationProperties2, self).put_AdditionalAngle(Value)
    AdditionalAngle = property(get_AdditionalAngle, put_AdditionalAngle, None)
    AlignmentType = property(get_AlignmentType, put_AlignmentType, None)

class IMaplexLabelStackingProperties(_esriCarto.IMaplexLabelStackingProperties):
    _IID = uuid.UUID('20664808-3a22-12a1-fa09-0a56ff3c731a')

    def __init__(self, *args, **kw):
        super(IMaplexLabelStackingProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StackJustification(self):
        '''Method IMaplexLabelStackingProperties.get_StackJustification

           OUTPUT
            option              : esriMaplexStackingJustification*'''
        return super(IMaplexLabelStackingProperties, self).get_StackJustification()
    def put_StackJustification(self, option):
        '''Method IMaplexLabelStackingProperties.put_StackJustification

           INPUT
            option              : esriMaplexStackingJustification'''
        return super(IMaplexLabelStackingProperties, self).put_StackJustification(option)
    def AddSeparator(self, Separator, Visible, splitForced, splitAfter):
        '''Method IMaplexLabelStackingProperties.AddSeparator

           INPUTS
            Separator           : BSTR
            Visible             : VARIANT_BOOL
            splitForced         : VARIANT_BOOL
            splitAfter          : VARIANT_BOOL'''
        return super(IMaplexLabelStackingProperties, self).AddSeparator(Separator, Visible, splitForced, splitAfter)
    def get_SeparatorCount(self):
        '''Method IMaplexLabelStackingProperties.get_SeparatorCount

           OUTPUT
            Count               : long*'''
        return super(IMaplexLabelStackingProperties, self).get_SeparatorCount()
    def QuerySeparator(self, Index):
        '''Method IMaplexLabelStackingProperties.QuerySeparator

           INPUT
            Index               : long

           OUTPUTS
            Separator           : BSTR*
            Visible             : VARIANT_BOOL*
            splitForced         : VARIANT_BOOL*
            splitAfter          : VARIANT_BOOL*'''
        return super(IMaplexLabelStackingProperties, self).QuerySeparator(Index)
    def ClearSeparators(self):
        '''Method IMaplexLabelStackingProperties.ClearSeparators'''
        return super(IMaplexLabelStackingProperties, self).ClearSeparators()
    def get_MaximumNumberOfLines(self):
        '''Method IMaplexLabelStackingProperties.get_MaximumNumberOfLines

           OUTPUT
            limit               : long*'''
        return super(IMaplexLabelStackingProperties, self).get_MaximumNumberOfLines()
    def put_MaximumNumberOfLines(self, limit):
        '''Method IMaplexLabelStackingProperties.put_MaximumNumberOfLines

           INPUT
            limit               : long'''
        return super(IMaplexLabelStackingProperties, self).put_MaximumNumberOfLines(limit)
    def get_MinimumNumberOfCharsPerLine(self):
        '''Method IMaplexLabelStackingProperties.get_MinimumNumberOfCharsPerLine

           OUTPUT
            limit               : long*'''
        return super(IMaplexLabelStackingProperties, self).get_MinimumNumberOfCharsPerLine()
    def put_MinimumNumberOfCharsPerLine(self, limit):
        '''Method IMaplexLabelStackingProperties.put_MinimumNumberOfCharsPerLine

           INPUT
            limit               : long'''
        return super(IMaplexLabelStackingProperties, self).put_MinimumNumberOfCharsPerLine(limit)
    def get_MaximumNumberOfCharsPerLine(self):
        '''Method IMaplexLabelStackingProperties.get_MaximumNumberOfCharsPerLine

           OUTPUT
            limit               : long*'''
        return super(IMaplexLabelStackingProperties, self).get_MaximumNumberOfCharsPerLine()
    def put_MaximumNumberOfCharsPerLine(self, limit):
        '''Method IMaplexLabelStackingProperties.put_MaximumNumberOfCharsPerLine

           INPUT
            limit               : long'''
        return super(IMaplexLabelStackingProperties, self).put_MaximumNumberOfCharsPerLine(limit)
    MaximumNumberOfCharsPerLine = property(get_MaximumNumberOfCharsPerLine, put_MaximumNumberOfCharsPerLine, None)
    MaximumNumberOfLines = property(get_MaximumNumberOfLines, put_MaximumNumberOfLines, None)
    MinimumNumberOfCharsPerLine = property(get_MinimumNumberOfCharsPerLine, put_MinimumNumberOfCharsPerLine, None)
    SeparatorCount = property(get_SeparatorCount, None, None)
    StackJustification = property(get_StackJustification, put_StackJustification, None)

class IMaplexOffsetAlongLineProperties(_esriCarto.IMaplexOffsetAlongLineProperties):
    _IID = uuid.UUID('20664808-1a42-1fa1-fcd1-0b532f3c8ffa')

    def __init__(self, *args, **kw):
        super(IMaplexOffsetAlongLineProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PlacementMethod(self):
        '''Method IMaplexOffsetAlongLineProperties.get_PlacementMethod

           OUTPUT
            option              : esriMaplexOffsetAlongLineMethod*'''
        return super(IMaplexOffsetAlongLineProperties, self).get_PlacementMethod()
    def put_PlacementMethod(self, option):
        '''Method IMaplexOffsetAlongLineProperties.put_PlacementMethod

           INPUT
            option              : esriMaplexOffsetAlongLineMethod'''
        return super(IMaplexOffsetAlongLineProperties, self).put_PlacementMethod(option)
    def get_LabelAnchorPoint(self):
        '''Method IMaplexOffsetAlongLineProperties.get_LabelAnchorPoint

           OUTPUT
            option              : esriMaplexLabelAnchorPoint*'''
        return super(IMaplexOffsetAlongLineProperties, self).get_LabelAnchorPoint()
    def put_LabelAnchorPoint(self, option):
        '''Method IMaplexOffsetAlongLineProperties.put_LabelAnchorPoint

           INPUT
            option              : esriMaplexLabelAnchorPoint'''
        return super(IMaplexOffsetAlongLineProperties, self).put_LabelAnchorPoint(option)
    def get_Distance(self):
        '''Method IMaplexOffsetAlongLineProperties.get_Distance

           OUTPUT
            Distance            : double*'''
        return super(IMaplexOffsetAlongLineProperties, self).get_Distance()
    def put_Distance(self, Distance):
        '''Method IMaplexOffsetAlongLineProperties.put_Distance

           INPUT
            Distance            : double'''
        return super(IMaplexOffsetAlongLineProperties, self).put_Distance(Distance)
    def get_Tolerance(self):
        '''Method IMaplexOffsetAlongLineProperties.get_Tolerance

           OUTPUT
            Distance            : double*'''
        return super(IMaplexOffsetAlongLineProperties, self).get_Tolerance()
    def put_Tolerance(self, Distance):
        '''Method IMaplexOffsetAlongLineProperties.put_Tolerance

           INPUT
            Distance            : double'''
        return super(IMaplexOffsetAlongLineProperties, self).put_Tolerance(Distance)
    def get_DistanceUnit(self):
        '''Method IMaplexOffsetAlongLineProperties.get_DistanceUnit

           OUTPUT
            unit                : esriMaplexUnit*'''
        return super(IMaplexOffsetAlongLineProperties, self).get_DistanceUnit()
    def put_DistanceUnit(self, unit):
        '''Method IMaplexOffsetAlongLineProperties.put_DistanceUnit

           INPUT
            unit                : esriMaplexUnit'''
        return super(IMaplexOffsetAlongLineProperties, self).put_DistanceUnit(unit)
    def get_UseLineDirection(self):
        '''Method IMaplexOffsetAlongLineProperties.get_UseLineDirection

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOffsetAlongLineProperties, self).get_UseLineDirection()
    def put_UseLineDirection(self, flag):
        '''Method IMaplexOffsetAlongLineProperties.put_UseLineDirection

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOffsetAlongLineProperties, self).put_UseLineDirection(flag)
    Distance = property(get_Distance, put_Distance, None)
    DistanceUnit = property(get_DistanceUnit, put_DistanceUnit, None)
    LabelAnchorPoint = property(get_LabelAnchorPoint, put_LabelAnchorPoint, None)
    PlacementMethod = property(get_PlacementMethod, put_PlacementMethod, None)
    Tolerance = property(get_Tolerance, put_Tolerance, None)
    UseLineDirection = property(get_UseLineDirection, put_UseLineDirection, None)

class IMaplexOverposterLayerProperties(_esriCarto.IMaplexOverposterLayerProperties):
    _IID = uuid.UUID('20664808-3fe2-1ed1-8109-085679ec732a')

    def __init__(self, *args, **kw):
        super(IMaplexOverposterLayerProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureType(self):
        '''Method IMaplexOverposterLayerProperties.get_FeatureType

           OUTPUT
            Type                : esriBasicOverposterFeatureType*'''
        return super(IMaplexOverposterLayerProperties, self).get_FeatureType()
    def put_FeatureType(self, Type):
        '''Method IMaplexOverposterLayerProperties.put_FeatureType

           INPUT
            Type                : esriBasicOverposterFeatureType'''
        return super(IMaplexOverposterLayerProperties, self).put_FeatureType(Type)
    def get_PointPlacementMethod(self):
        '''Method IMaplexOverposterLayerProperties.get_PointPlacementMethod

           OUTPUT
            Method              : esriMaplexPointPlacementMethod*'''
        return super(IMaplexOverposterLayerProperties, self).get_PointPlacementMethod()
    def put_PointPlacementMethod(self, Method):
        '''Method IMaplexOverposterLayerProperties.put_PointPlacementMethod

           INPUT
            Method              : esriMaplexPointPlacementMethod'''
        return super(IMaplexOverposterLayerProperties, self).put_PointPlacementMethod(Method)
    def get_LinePlacementMethod(self):
        '''Method IMaplexOverposterLayerProperties.get_LinePlacementMethod

           OUTPUT
            Method              : esriMaplexLinePlacementMethod*'''
        return super(IMaplexOverposterLayerProperties, self).get_LinePlacementMethod()
    def put_LinePlacementMethod(self, Method):
        '''Method IMaplexOverposterLayerProperties.put_LinePlacementMethod

           INPUT
            Method              : esriMaplexLinePlacementMethod'''
        return super(IMaplexOverposterLayerProperties, self).put_LinePlacementMethod(Method)
    def get_PolygonPlacementMethod(self):
        '''Method IMaplexOverposterLayerProperties.get_PolygonPlacementMethod

           OUTPUT
            Method              : esriMaplexPolygonPlacementMethod*'''
        return super(IMaplexOverposterLayerProperties, self).get_PolygonPlacementMethod()
    def put_PolygonPlacementMethod(self, Method):
        '''Method IMaplexOverposterLayerProperties.put_PolygonPlacementMethod

           INPUT
            Method              : esriMaplexPolygonPlacementMethod'''
        return super(IMaplexOverposterLayerProperties, self).put_PolygonPlacementMethod(Method)
    def get_CanPlaceLabelOutsidePolygon(self):
        '''Method IMaplexOverposterLayerProperties.get_CanPlaceLabelOutsidePolygon

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanPlaceLabelOutsidePolygon()
    def put_CanPlaceLabelOutsidePolygon(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanPlaceLabelOutsidePolygon

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanPlaceLabelOutsidePolygon(flag)
    def get_PreferHorizontalPlacement(self):
        '''Method IMaplexOverposterLayerProperties.get_PreferHorizontalPlacement

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_PreferHorizontalPlacement()
    def put_PreferHorizontalPlacement(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_PreferHorizontalPlacement

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_PreferHorizontalPlacement(flag)
    def get_LandParcelPlacement(self):
        '''Method IMaplexOverposterLayerProperties.get_LandParcelPlacement

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_LandParcelPlacement()
    def put_LandParcelPlacement(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_LandParcelPlacement

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_LandParcelPlacement(flag)
    def get_PrimaryOffset(self):
        '''Method IMaplexOverposterLayerProperties.get_PrimaryOffset

           OUTPUT
            Offset              : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_PrimaryOffset()
    def put_PrimaryOffset(self, Offset):
        '''Method IMaplexOverposterLayerProperties.put_PrimaryOffset

           INPUT
            Offset              : double'''
        return super(IMaplexOverposterLayerProperties, self).put_PrimaryOffset(Offset)
    def get_PrimaryOffsetUnit(self):
        '''Method IMaplexOverposterLayerProperties.get_PrimaryOffsetUnit

           OUTPUT
            unit                : esriMaplexUnit*'''
        return super(IMaplexOverposterLayerProperties, self).get_PrimaryOffsetUnit()
    def put_PrimaryOffsetUnit(self, unit):
        '''Method IMaplexOverposterLayerProperties.put_PrimaryOffsetUnit

           INPUT
            unit                : esriMaplexUnit'''
        return super(IMaplexOverposterLayerProperties, self).put_PrimaryOffsetUnit(unit)
    def get_SecondaryOffset(self):
        '''Method IMaplexOverposterLayerProperties.get_SecondaryOffset

           OUTPUT
            Offset              : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_SecondaryOffset()
    def put_SecondaryOffset(self, Offset):
        '''Method IMaplexOverposterLayerProperties.put_SecondaryOffset

           INPUT
            Offset              : double'''
        return super(IMaplexOverposterLayerProperties, self).put_SecondaryOffset(Offset)
    def get_ConstrainOffset(self):
        '''Method IMaplexOverposterLayerProperties.get_ConstrainOffset

           OUTPUT
            option              : esriMaplexConstrainOffset*'''
        return super(IMaplexOverposterLayerProperties, self).get_ConstrainOffset()
    def put_ConstrainOffset(self, option):
        '''Method IMaplexOverposterLayerProperties.put_ConstrainOffset

           INPUT
            option              : esriMaplexConstrainOffset'''
        return super(IMaplexOverposterLayerProperties, self).put_ConstrainOffset(option)
    def get_EnablePointPlacementPriorities(self):
        '''Method IMaplexOverposterLayerProperties.get_EnablePointPlacementPriorities

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_EnablePointPlacementPriorities()
    def put_EnablePointPlacementPriorities(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_EnablePointPlacementPriorities

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_EnablePointPlacementPriorities(flag)
    def get_PointPlacementPriorities(self):
        '''Method IMaplexOverposterLayerProperties.get_PointPlacementPriorities

           OUTPUT
            priorities          : IPointPlacementPriorities**'''
        return super(IMaplexOverposterLayerProperties, self).get_PointPlacementPriorities()
    def put_PointPlacementPriorities(self, priorities):
        '''Method IMaplexOverposterLayerProperties.put_PointPlacementPriorities

           INPUT
            priorities          : IPointPlacementPriorities*'''
        return super(IMaplexOverposterLayerProperties, self).put_PointPlacementPriorities(priorities)
    def get_CanShiftPointLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_CanShiftPointLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanShiftPointLabel()
    def put_CanShiftPointLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanShiftPointLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanShiftPointLabel(flag)
    def get_IsStreetPlacement(self):
        '''Method IMaplexOverposterLayerProperties.get_IsStreetPlacement

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_IsStreetPlacement()
    def put_IsStreetPlacement(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_IsStreetPlacement

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_IsStreetPlacement(flag)
    def get_RepeatLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_RepeatLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_RepeatLabel()
    def put_RepeatLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_RepeatLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_RepeatLabel(flag)
    def get_MinimumRepetitionInterval(self):
        '''Method IMaplexOverposterLayerProperties.get_MinimumRepetitionInterval

           OUTPUT
            Interval            : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_MinimumRepetitionInterval()
    def put_MinimumRepetitionInterval(self, Interval):
        '''Method IMaplexOverposterLayerProperties.put_MinimumRepetitionInterval

           INPUT
            Interval            : double'''
        return super(IMaplexOverposterLayerProperties, self).put_MinimumRepetitionInterval(Interval)
    def get_SpreadCharacters(self):
        '''Method IMaplexOverposterLayerProperties.get_SpreadCharacters

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_SpreadCharacters()
    def put_SpreadCharacters(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_SpreadCharacters

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_SpreadCharacters(flag)
    def get_MaximumCharacterSpacing(self):
        '''Method IMaplexOverposterLayerProperties.get_MaximumCharacterSpacing

           OUTPUT
            spacing             : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_MaximumCharacterSpacing()
    def put_MaximumCharacterSpacing(self, spacing):
        '''Method IMaplexOverposterLayerProperties.put_MaximumCharacterSpacing

           INPUT
            spacing             : double'''
        return super(IMaplexOverposterLayerProperties, self).put_MaximumCharacterSpacing(spacing)
    def get_SpreadWords(self):
        '''Method IMaplexOverposterLayerProperties.get_SpreadWords

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_SpreadWords()
    def put_SpreadWords(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_SpreadWords

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_SpreadWords(flag)
    def get_MaximumWordSpacing(self):
        '''Method IMaplexOverposterLayerProperties.get_MaximumWordSpacing

           OUTPUT
            spacing             : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_MaximumWordSpacing()
    def put_MaximumWordSpacing(self, spacing):
        '''Method IMaplexOverposterLayerProperties.put_MaximumWordSpacing

           INPUT
            spacing             : double'''
        return super(IMaplexOverposterLayerProperties, self).put_MaximumWordSpacing(spacing)
    def get_PreferredEndOfStreetClearance(self):
        '''Method IMaplexOverposterLayerProperties.get_PreferredEndOfStreetClearance

           OUTPUT
            clearance           : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_PreferredEndOfStreetClearance()
    def put_PreferredEndOfStreetClearance(self, clearance):
        '''Method IMaplexOverposterLayerProperties.put_PreferredEndOfStreetClearance

           INPUT
            clearance           : double'''
        return super(IMaplexOverposterLayerProperties, self).put_PreferredEndOfStreetClearance(clearance)
    def get_MinimumEndOfStreetClearance(self):
        '''Method IMaplexOverposterLayerProperties.get_MinimumEndOfStreetClearance

           OUTPUT
            clearance           : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_MinimumEndOfStreetClearance()
    def put_MinimumEndOfStreetClearance(self, clearance):
        '''Method IMaplexOverposterLayerProperties.put_MinimumEndOfStreetClearance

           INPUT
            clearance           : double'''
        return super(IMaplexOverposterLayerProperties, self).put_MinimumEndOfStreetClearance(clearance)
    def get_CanStackLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_CanStackLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanStackLabel()
    def put_CanStackLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanStackLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanStackLabel(flag)
    def get_LabelStackingProperties(self):
        '''Method IMaplexOverposterLayerProperties.get_LabelStackingProperties

           OUTPUT
            props               : IMaplexLabelStackingProperties**'''
        return super(IMaplexOverposterLayerProperties, self).get_LabelStackingProperties()
    def put_LabelStackingProperties(self, props):
        '''Method IMaplexOverposterLayerProperties.put_LabelStackingProperties

           INPUT
            props               : IMaplexLabelStackingProperties*'''
        return super(IMaplexOverposterLayerProperties, self).put_LabelStackingProperties(props)
    def get_CanOverrunFeature(self):
        '''Method IMaplexOverposterLayerProperties.get_CanOverrunFeature

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanOverrunFeature()
    def put_CanOverrunFeature(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanOverrunFeature

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanOverrunFeature(flag)
    def get_MaximumLabelOverrun(self):
        '''Method IMaplexOverposterLayerProperties.get_MaximumLabelOverrun

           OUTPUT
            Distance            : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_MaximumLabelOverrun()
    def put_MaximumLabelOverrun(self, Distance):
        '''Method IMaplexOverposterLayerProperties.put_MaximumLabelOverrun

           INPUT
            Distance            : double'''
        return super(IMaplexOverposterLayerProperties, self).put_MaximumLabelOverrun(Distance)
    def get_AllowAsymmetricOverrun(self):
        '''Method IMaplexOverposterLayerProperties.get_AllowAsymmetricOverrun

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_AllowAsymmetricOverrun()
    def put_AllowAsymmetricOverrun(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_AllowAsymmetricOverrun

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_AllowAsymmetricOverrun(flag)
    def get_CanAbbreviateLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_CanAbbreviateLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanAbbreviateLabel()
    def put_CanAbbreviateLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanAbbreviateLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanAbbreviateLabel(flag)
    def get_CanTruncateLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_CanTruncateLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanTruncateLabel()
    def put_CanTruncateLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanTruncateLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanTruncateLabel(flag)
    def get_CanReduceFontSize(self):
        '''Method IMaplexOverposterLayerProperties.get_CanReduceFontSize

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanReduceFontSize()
    def put_CanReduceFontSize(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanReduceFontSize

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanReduceFontSize(flag)
    def put_FontHeightReductionLimit(self, limit):
        '''Method IMaplexOverposterLayerProperties.put_FontHeightReductionLimit

           INPUT
            limit               : double'''
        return super(IMaplexOverposterLayerProperties, self).put_FontHeightReductionLimit(limit)
    def get_FontHeightReductionLimit(self):
        '''Method IMaplexOverposterLayerProperties.get_FontHeightReductionLimit

           OUTPUT
            limit               : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_FontHeightReductionLimit()
    def put_FontHeightReductionStep(self, step):
        '''Method IMaplexOverposterLayerProperties.put_FontHeightReductionStep

           INPUT
            step                : double'''
        return super(IMaplexOverposterLayerProperties, self).put_FontHeightReductionStep(step)
    def get_FontHeightReductionStep(self):
        '''Method IMaplexOverposterLayerProperties.get_FontHeightReductionStep

           OUTPUT
            step                : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_FontHeightReductionStep()
    def put_FontWidthReductionLimit(self, limit):
        '''Method IMaplexOverposterLayerProperties.put_FontWidthReductionLimit

           INPUT
            limit               : double'''
        return super(IMaplexOverposterLayerProperties, self).put_FontWidthReductionLimit(limit)
    def get_FontWidthReductionLimit(self):
        '''Method IMaplexOverposterLayerProperties.get_FontWidthReductionLimit

           OUTPUT
            limit               : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_FontWidthReductionLimit()
    def put_FontWidthReductionStep(self, step):
        '''Method IMaplexOverposterLayerProperties.put_FontWidthReductionStep

           INPUT
            step                : double'''
        return super(IMaplexOverposterLayerProperties, self).put_FontWidthReductionStep(step)
    def get_FontWidthReductionStep(self):
        '''Method IMaplexOverposterLayerProperties.get_FontWidthReductionStep

           OUTPUT
            step                : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_FontWidthReductionStep()
    def get_NeverRemoveLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_NeverRemoveLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_NeverRemoveLabel()
    def put_NeverRemoveLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_NeverRemoveLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_NeverRemoveLabel(flag)
    def get_LabelPriority(self):
        '''Method IMaplexOverposterLayerProperties.get_LabelPriority

           OUTPUT
            Priority            : long*'''
        return super(IMaplexOverposterLayerProperties, self).get_LabelPriority()
    def put_LabelPriority(self, Priority):
        '''Method IMaplexOverposterLayerProperties.put_LabelPriority

           INPUT
            Priority            : long'''
        return super(IMaplexOverposterLayerProperties, self).put_LabelPriority(Priority)
    def get_FeatureWeight(self):
        '''Method IMaplexOverposterLayerProperties.get_FeatureWeight

           OUTPUT
            Weight              : long*'''
        return super(IMaplexOverposterLayerProperties, self).get_FeatureWeight()
    def put_FeatureWeight(self, Weight):
        '''Method IMaplexOverposterLayerProperties.put_FeatureWeight

           INPUT
            Weight              : long'''
        return super(IMaplexOverposterLayerProperties, self).put_FeatureWeight(Weight)
    def put_PolygonBoundaryWeight(self, Weight):
        '''Method IMaplexOverposterLayerProperties.put_PolygonBoundaryWeight

           INPUT
            Weight              : long'''
        return super(IMaplexOverposterLayerProperties, self).put_PolygonBoundaryWeight(Weight)
    def get_PolygonBoundaryWeight(self):
        '''Method IMaplexOverposterLayerProperties.get_PolygonBoundaryWeight

           OUTPUT
            Weight              : long*'''
        return super(IMaplexOverposterLayerProperties, self).get_PolygonBoundaryWeight()
    def get_CanRemoveOverlappingLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_CanRemoveOverlappingLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_CanRemoveOverlappingLabel()
    def put_CanRemoveOverlappingLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_CanRemoveOverlappingLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_CanRemoveOverlappingLabel(flag)
    def get_ThinDuplicateLabels(self):
        '''Method IMaplexOverposterLayerProperties.get_ThinDuplicateLabels

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_ThinDuplicateLabels()
    def put_ThinDuplicateLabels(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_ThinDuplicateLabels

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_ThinDuplicateLabels(flag)
    def get_ThinningDistance(self):
        '''Method IMaplexOverposterLayerProperties.get_ThinningDistance

           OUTPUT
            Distance            : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_ThinningDistance()
    def put_ThinningDistance(self, Distance):
        '''Method IMaplexOverposterLayerProperties.put_ThinningDistance

           INPUT
            Distance            : double'''
        return super(IMaplexOverposterLayerProperties, self).put_ThinningDistance(Distance)
    def get_GraticuleAlignment(self):
        '''Method IMaplexOverposterLayerProperties.get_GraticuleAlignment

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_GraticuleAlignment()
    def put_GraticuleAlignment(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_GraticuleAlignment

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_GraticuleAlignment(flag)
    def get_OffsetAlongLineProperties(self):
        '''Method IMaplexOverposterLayerProperties.get_OffsetAlongLineProperties

           OUTPUT
            props               : IMaplexOffsetAlongLineProperties**'''
        return super(IMaplexOverposterLayerProperties, self).get_OffsetAlongLineProperties()
    def put_OffsetAlongLineProperties(self, props):
        '''Method IMaplexOverposterLayerProperties.put_OffsetAlongLineProperties

           INPUT
            props               : IMaplexOffsetAlongLineProperties*'''
        return super(IMaplexOverposterLayerProperties, self).put_OffsetAlongLineProperties(props)
    def get_RotationProperties(self):
        '''Method IMaplexOverposterLayerProperties.get_RotationProperties

           OUTPUT
            props               : IMaplexRotationProperties**'''
        return super(IMaplexOverposterLayerProperties, self).get_RotationProperties()
    def put_RotationProperties(self, props):
        '''Method IMaplexOverposterLayerProperties.put_RotationProperties

           INPUT
            props               : IMaplexRotationProperties*'''
        return super(IMaplexOverposterLayerProperties, self).put_RotationProperties(props)
    def get_DictionaryName(self):
        '''Method IMaplexOverposterLayerProperties.get_DictionaryName

           OUTPUT
            Text                : BSTR*'''
        return super(IMaplexOverposterLayerProperties, self).get_DictionaryName()
    def put_DictionaryName(self, Text):
        '''Method IMaplexOverposterLayerProperties.put_DictionaryName

           INPUT
            Text                : BSTR'''
        return super(IMaplexOverposterLayerProperties, self).put_DictionaryName(Text)
    def get_AlignLabelToLineDirection(self):
        '''Method IMaplexOverposterLayerProperties.get_AlignLabelToLineDirection

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_AlignLabelToLineDirection()
    def put_AlignLabelToLineDirection(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_AlignLabelToLineDirection

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_AlignLabelToLineDirection(flag)
    def get_BackgroundLabel(self):
        '''Method IMaplexOverposterLayerProperties.get_BackgroundLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties, self).get_BackgroundLabel()
    def put_BackgroundLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties.put_BackgroundLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties, self).put_BackgroundLabel(flag)
    def get_MinimumSizeForLabeling(self):
        '''Method IMaplexOverposterLayerProperties.get_MinimumSizeForLabeling

           OUTPUT
            Size                : double*'''
        return super(IMaplexOverposterLayerProperties, self).get_MinimumSizeForLabeling()
    def put_MinimumSizeForLabeling(self, Size):
        '''Method IMaplexOverposterLayerProperties.put_MinimumSizeForLabeling

           INPUT
            Size                : double'''
        return super(IMaplexOverposterLayerProperties, self).put_MinimumSizeForLabeling(Size)
    def get_LabelBuffer(self):
        '''Method IMaplexOverposterLayerProperties.get_LabelBuffer

           OUTPUT
            Buffer              : long*'''
        return super(IMaplexOverposterLayerProperties, self).get_LabelBuffer()
    def put_LabelBuffer(self, Buffer):
        '''Method IMaplexOverposterLayerProperties.put_LabelBuffer

           INPUT
            Buffer              : long'''
        return super(IMaplexOverposterLayerProperties, self).put_LabelBuffer(Buffer)
    def get_FeatureBuffer(self):
        '''Method IMaplexOverposterLayerProperties.get_FeatureBuffer

           OUTPUT
            Buffer              : long*'''
        return super(IMaplexOverposterLayerProperties, self).get_FeatureBuffer()
    def put_FeatureBuffer(self, Buffer):
        '''Method IMaplexOverposterLayerProperties.put_FeatureBuffer

           INPUT
            Buffer              : long'''
        return super(IMaplexOverposterLayerProperties, self).put_FeatureBuffer(Buffer)
    AlignLabelToLineDirection = property(get_AlignLabelToLineDirection, put_AlignLabelToLineDirection, None)
    AllowAsymmetricOverrun = property(get_AllowAsymmetricOverrun, put_AllowAsymmetricOverrun, None)
    BackgroundLabel = property(get_BackgroundLabel, put_BackgroundLabel, None)
    CanAbbreviateLabel = property(get_CanAbbreviateLabel, put_CanAbbreviateLabel, None)
    CanOverrunFeature = property(get_CanOverrunFeature, put_CanOverrunFeature, None)
    CanPlaceLabelOutsidePolygon = property(get_CanPlaceLabelOutsidePolygon, put_CanPlaceLabelOutsidePolygon, None)
    CanReduceFontSize = property(get_CanReduceFontSize, put_CanReduceFontSize, None)
    CanRemoveOverlappingLabel = property(get_CanRemoveOverlappingLabel, put_CanRemoveOverlappingLabel, None)
    CanShiftPointLabel = property(get_CanShiftPointLabel, put_CanShiftPointLabel, None)
    CanStackLabel = property(get_CanStackLabel, put_CanStackLabel, None)
    CanTruncateLabel = property(get_CanTruncateLabel, put_CanTruncateLabel, None)
    ConstrainOffset = property(get_ConstrainOffset, put_ConstrainOffset, None)
    DictionaryName = property(get_DictionaryName, put_DictionaryName, None)
    EnablePointPlacementPriorities = property(get_EnablePointPlacementPriorities, put_EnablePointPlacementPriorities, None)
    FeatureBuffer = property(get_FeatureBuffer, put_FeatureBuffer, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    FeatureWeight = property(get_FeatureWeight, put_FeatureWeight, None)
    FontHeightReductionLimit = property(get_FontHeightReductionLimit, put_FontHeightReductionLimit, None)
    FontHeightReductionStep = property(get_FontHeightReductionStep, put_FontHeightReductionStep, None)
    FontWidthReductionLimit = property(get_FontWidthReductionLimit, put_FontWidthReductionLimit, None)
    FontWidthReductionStep = property(get_FontWidthReductionStep, put_FontWidthReductionStep, None)
    GraticuleAlignment = property(get_GraticuleAlignment, put_GraticuleAlignment, None)
    IsStreetPlacement = property(get_IsStreetPlacement, put_IsStreetPlacement, None)
    LabelBuffer = property(get_LabelBuffer, put_LabelBuffer, None)
    LabelPriority = property(get_LabelPriority, put_LabelPriority, None)
    LabelStackingProperties = property(get_LabelStackingProperties, put_LabelStackingProperties, None)
    LandParcelPlacement = property(get_LandParcelPlacement, put_LandParcelPlacement, None)
    LinePlacementMethod = property(get_LinePlacementMethod, put_LinePlacementMethod, None)
    MaximumCharacterSpacing = property(get_MaximumCharacterSpacing, put_MaximumCharacterSpacing, None)
    MaximumLabelOverrun = property(get_MaximumLabelOverrun, put_MaximumLabelOverrun, None)
    MaximumWordSpacing = property(get_MaximumWordSpacing, put_MaximumWordSpacing, None)
    MinimumEndOfStreetClearance = property(get_MinimumEndOfStreetClearance, put_MinimumEndOfStreetClearance, None)
    MinimumRepetitionInterval = property(get_MinimumRepetitionInterval, put_MinimumRepetitionInterval, None)
    MinimumSizeForLabeling = property(get_MinimumSizeForLabeling, put_MinimumSizeForLabeling, None)
    NeverRemoveLabel = property(get_NeverRemoveLabel, put_NeverRemoveLabel, None)
    OffsetAlongLineProperties = property(get_OffsetAlongLineProperties, put_OffsetAlongLineProperties, None)
    PointPlacementMethod = property(get_PointPlacementMethod, put_PointPlacementMethod, None)
    PointPlacementPriorities = property(get_PointPlacementPriorities, put_PointPlacementPriorities, None)
    PolygonBoundaryWeight = property(get_PolygonBoundaryWeight, put_PolygonBoundaryWeight, None)
    PolygonPlacementMethod = property(get_PolygonPlacementMethod, put_PolygonPlacementMethod, None)
    PreferHorizontalPlacement = property(get_PreferHorizontalPlacement, put_PreferHorizontalPlacement, None)
    PreferredEndOfStreetClearance = property(get_PreferredEndOfStreetClearance, put_PreferredEndOfStreetClearance, None)
    PrimaryOffset = property(get_PrimaryOffset, put_PrimaryOffset, None)
    PrimaryOffsetUnit = property(get_PrimaryOffsetUnit, put_PrimaryOffsetUnit, None)
    RepeatLabel = property(get_RepeatLabel, put_RepeatLabel, None)
    RotationProperties = property(get_RotationProperties, put_RotationProperties, None)
    SecondaryOffset = property(get_SecondaryOffset, put_SecondaryOffset, None)
    SpreadCharacters = property(get_SpreadCharacters, put_SpreadCharacters, None)
    SpreadWords = property(get_SpreadWords, put_SpreadWords, None)
    ThinDuplicateLabels = property(get_ThinDuplicateLabels, put_ThinDuplicateLabels, None)
    ThinningDistance = property(get_ThinningDistance, put_ThinningDistance, None)

class IMaplexOverposterLayerProperties2(_esriCarto.IMaplexOverposterLayerProperties2):
    _IID = uuid.UUID('45baffd2-fde5-2846-dea4-256deffbb2aa')

    def __init__(self, *args, **kw):
        super(IMaplexOverposterLayerProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PolygonInternalZones(self, zone):
        '''Method IMaplexOverposterLayerProperties2.get_PolygonInternalZones

           INPUT
            zone                : esriMaplexZoneIdentifier

           OUTPUT
            Priority            : long*'''
        return super(IMaplexOverposterLayerProperties2, self).get_PolygonInternalZones(zone)
    def put_PolygonInternalZones(self, zone, Priority):
        '''Method IMaplexOverposterLayerProperties2.put_PolygonInternalZones

           INPUTS
            zone                : esriMaplexZoneIdentifier
            Priority            : long'''
        return super(IMaplexOverposterLayerProperties2, self).put_PolygonInternalZones(zone, Priority)
    def get_PolygonExternalZones(self, zone):
        '''Method IMaplexOverposterLayerProperties2.get_PolygonExternalZones

           INPUT
            zone                : esriMaplexZoneIdentifier

           OUTPUT
            Priority            : long*'''
        return super(IMaplexOverposterLayerProperties2, self).get_PolygonExternalZones(zone)
    def put_PolygonExternalZones(self, zone, Priority):
        '''Method IMaplexOverposterLayerProperties2.put_PolygonExternalZones

           INPUTS
            zone                : esriMaplexZoneIdentifier
            Priority            : long'''
        return super(IMaplexOverposterLayerProperties2, self).put_PolygonExternalZones(zone, Priority)
    def get_StrategyPriority(self, strategy):
        '''Method IMaplexOverposterLayerProperties2.get_StrategyPriority

           INPUT
            strategy            : esriMaplexStrategyIdentifier

           OUTPUT
            Priority            : long*'''
        return super(IMaplexOverposterLayerProperties2, self).get_StrategyPriority(strategy)
    def put_StrategyPriority(self, strategy, Priority):
        '''Method IMaplexOverposterLayerProperties2.put_StrategyPriority

           INPUTS
            strategy            : esriMaplexStrategyIdentifier
            Priority            : long'''
        return super(IMaplexOverposterLayerProperties2, self).put_StrategyPriority(strategy, Priority)
    def get_GraticuleAlignmentType(self):
        '''Method IMaplexOverposterLayerProperties2.get_GraticuleAlignmentType

           OUTPUT
            option              : esriMaplexGraticuleAlignmentType*'''
        return super(IMaplexOverposterLayerProperties2, self).get_GraticuleAlignmentType()
    def put_GraticuleAlignmentType(self, option):
        '''Method IMaplexOverposterLayerProperties2.put_GraticuleAlignmentType

           INPUT
            option              : esriMaplexGraticuleAlignmentType'''
        return super(IMaplexOverposterLayerProperties2, self).put_GraticuleAlignmentType(option)
    def get_LineFeatureType(self):
        '''Method IMaplexOverposterLayerProperties2.get_LineFeatureType

           OUTPUT
            option              : esriMaplexLineFeatureType*'''
        return super(IMaplexOverposterLayerProperties2, self).get_LineFeatureType()
    def put_LineFeatureType(self, option):
        '''Method IMaplexOverposterLayerProperties2.put_LineFeatureType

           INPUT
            option              : esriMaplexLineFeatureType'''
        return super(IMaplexOverposterLayerProperties2, self).put_LineFeatureType(option)
    def get_PolygonFeatureType(self):
        '''Method IMaplexOverposterLayerProperties2.get_PolygonFeatureType

           OUTPUT
            option              : esriMaplexPolygonFeatureType*'''
        return super(IMaplexOverposterLayerProperties2, self).get_PolygonFeatureType()
    def put_PolygonFeatureType(self, option):
        '''Method IMaplexOverposterLayerProperties2.put_PolygonFeatureType

           INPUT
            option              : esriMaplexPolygonFeatureType'''
        return super(IMaplexOverposterLayerProperties2, self).put_PolygonFeatureType(option)
    def get_PolygonAnchorPointType(self):
        '''Method IMaplexOverposterLayerProperties2.get_PolygonAnchorPointType

           OUTPUT
            option              : esriMaplexAnchorPointType*'''
        return super(IMaplexOverposterLayerProperties2, self).get_PolygonAnchorPointType()
    def put_PolygonAnchorPointType(self, option):
        '''Method IMaplexOverposterLayerProperties2.put_PolygonAnchorPointType

           INPUT
            option              : esriMaplexAnchorPointType'''
        return super(IMaplexOverposterLayerProperties2, self).put_PolygonAnchorPointType(option)
    def get_ContourAlignmentType(self):
        '''Method IMaplexOverposterLayerProperties2.get_ContourAlignmentType

           OUTPUT
            option              : esriMaplexContourAlignmentType*'''
        return super(IMaplexOverposterLayerProperties2, self).get_ContourAlignmentType()
    def put_ContourAlignmentType(self, option):
        '''Method IMaplexOverposterLayerProperties2.put_ContourAlignmentType

           INPUT
            option              : esriMaplexContourAlignmentType'''
        return super(IMaplexOverposterLayerProperties2, self).put_ContourAlignmentType(option)
    def get_ContourMaximumAngle(self):
        '''Method IMaplexOverposterLayerProperties2.get_ContourMaximumAngle

           OUTPUT
            Angle               : long*'''
        return super(IMaplexOverposterLayerProperties2, self).get_ContourMaximumAngle()
    def put_ContourMaximumAngle(self, Angle):
        '''Method IMaplexOverposterLayerProperties2.put_ContourMaximumAngle

           INPUT
            Angle               : long'''
        return super(IMaplexOverposterLayerProperties2, self).put_ContourMaximumAngle(Angle)
    def get_ContourLadderType(self):
        '''Method IMaplexOverposterLayerProperties2.get_ContourLadderType

           OUTPUT
            option              : esriMaplexContourLadderType*'''
        return super(IMaplexOverposterLayerProperties2, self).get_ContourLadderType()
    def put_ContourLadderType(self, option):
        '''Method IMaplexOverposterLayerProperties2.put_ContourLadderType

           INPUT
            option              : esriMaplexContourLadderType'''
        return super(IMaplexOverposterLayerProperties2, self).put_ContourLadderType(option)
    def put_IsOffsetFromFeatureGeometry(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_IsOffsetFromFeatureGeometry

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_IsOffsetFromFeatureGeometry(flag)
    def get_IsOffsetFromFeatureGeometry(self):
        '''Method IMaplexOverposterLayerProperties2.get_IsOffsetFromFeatureGeometry

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_IsOffsetFromFeatureGeometry()
    def get_EnableSecondaryOffset(self):
        '''Method IMaplexOverposterLayerProperties2.get_EnableSecondaryOffset

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_EnableSecondaryOffset()
    def put_EnableSecondaryOffset(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_EnableSecondaryOffset

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_EnableSecondaryOffset(flag)
    def get_SecondaryOffsetMinimum(self):
        '''Method IMaplexOverposterLayerProperties2.get_SecondaryOffsetMinimum

           OUTPUT
            Offset              : double*'''
        return super(IMaplexOverposterLayerProperties2, self).get_SecondaryOffsetMinimum()
    def put_SecondaryOffsetMinimum(self, Offset):
        '''Method IMaplexOverposterLayerProperties2.put_SecondaryOffsetMinimum

           INPUT
            Offset              : double'''
        return super(IMaplexOverposterLayerProperties2, self).put_SecondaryOffsetMinimum(Offset)
    def get_SecondaryOffsetMaximum(self):
        '''Method IMaplexOverposterLayerProperties2.get_SecondaryOffsetMaximum

           OUTPUT
            Offset              : double*'''
        return super(IMaplexOverposterLayerProperties2, self).get_SecondaryOffsetMaximum()
    def put_SecondaryOffsetMaximum(self, Offset):
        '''Method IMaplexOverposterLayerProperties2.put_SecondaryOffsetMaximum

           INPUT
            Offset              : double'''
        return super(IMaplexOverposterLayerProperties2, self).put_SecondaryOffsetMaximum(Offset)
    def get_IsLabelBufferHardConstraint(self):
        '''Method IMaplexOverposterLayerProperties2.get_IsLabelBufferHardConstraint

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_IsLabelBufferHardConstraint()
    def put_IsLabelBufferHardConstraint(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_IsLabelBufferHardConstraint

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_IsLabelBufferHardConstraint(flag)
    def get_IsMinimumSizeBasedOnArea(self):
        '''Method IMaplexOverposterLayerProperties2.get_IsMinimumSizeBasedOnArea

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_IsMinimumSizeBasedOnArea()
    def put_IsMinimumSizeBasedOnArea(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_IsMinimumSizeBasedOnArea

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_IsMinimumSizeBasedOnArea(flag)
    def get_CanPlaceLabelOnTopOfFeature(self):
        '''Method IMaplexOverposterLayerProperties2.get_CanPlaceLabelOnTopOfFeature

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_CanPlaceLabelOnTopOfFeature()
    def put_CanPlaceLabelOnTopOfFeature(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_CanPlaceLabelOnTopOfFeature

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_CanPlaceLabelOnTopOfFeature(flag)
    def get_CanReduceLeading(self):
        '''Method IMaplexOverposterLayerProperties2.get_CanReduceLeading

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_CanReduceLeading()
    def put_CanReduceLeading(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_CanReduceLeading

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_CanReduceLeading(flag)
    def get_CanFlipStackedStreetLabel(self):
        '''Method IMaplexOverposterLayerProperties2.get_CanFlipStackedStreetLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_CanFlipStackedStreetLabel()
    def put_CanFlipStackedStreetLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_CanFlipStackedStreetLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_CanFlipStackedStreetLabel(flag)
    def get_EnablePolygonFixedPosition(self):
        '''Method IMaplexOverposterLayerProperties2.get_EnablePolygonFixedPosition

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties2, self).get_EnablePolygonFixedPosition()
    def put_EnablePolygonFixedPosition(self, flag):
        '''Method IMaplexOverposterLayerProperties2.put_EnablePolygonFixedPosition

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties2, self).put_EnablePolygonFixedPosition(flag)
    def get_ThinningDistanceUnit(self):
        '''Method IMaplexOverposterLayerProperties2.get_ThinningDistanceUnit

           OUTPUT
            unit                : esriMaplexUnit*'''
        return super(IMaplexOverposterLayerProperties2, self).get_ThinningDistanceUnit()
    def put_ThinningDistanceUnit(self, unit):
        '''Method IMaplexOverposterLayerProperties2.put_ThinningDistanceUnit

           INPUT
            unit                : esriMaplexUnit'''
        return super(IMaplexOverposterLayerProperties2, self).put_ThinningDistanceUnit(unit)
    def get_RepetitionIntervalUnit(self):
        '''Method IMaplexOverposterLayerProperties2.get_RepetitionIntervalUnit

           OUTPUT
            unit                : esriMaplexUnit*'''
        return super(IMaplexOverposterLayerProperties2, self).get_RepetitionIntervalUnit()
    def put_RepetitionIntervalUnit(self, unit):
        '''Method IMaplexOverposterLayerProperties2.put_RepetitionIntervalUnit

           INPUT
            unit                : esriMaplexUnit'''
        return super(IMaplexOverposterLayerProperties2, self).put_RepetitionIntervalUnit(unit)
    def get_MinimumFeatureSizeUnit(self):
        '''Method IMaplexOverposterLayerProperties2.get_MinimumFeatureSizeUnit

           OUTPUT
            unit                : esriMaplexUnit*'''
        return super(IMaplexOverposterLayerProperties2, self).get_MinimumFeatureSizeUnit()
    def put_MinimumFeatureSizeUnit(self, unit):
        '''Method IMaplexOverposterLayerProperties2.put_MinimumFeatureSizeUnit

           INPUT
            unit                : esriMaplexUnit'''
        return super(IMaplexOverposterLayerProperties2, self).put_MinimumFeatureSizeUnit(unit)
    def get_MaximumLabelOverrunUnit(self):
        '''Method IMaplexOverposterLayerProperties2.get_MaximumLabelOverrunUnit

           OUTPUT
            unit                : esriMaplexUnit*'''
        return super(IMaplexOverposterLayerProperties2, self).get_MaximumLabelOverrunUnit()
    def put_MaximumLabelOverrunUnit(self, unit):
        '''Method IMaplexOverposterLayerProperties2.put_MaximumLabelOverrunUnit

           INPUT
            unit                : esriMaplexUnit'''
        return super(IMaplexOverposterLayerProperties2, self).put_MaximumLabelOverrunUnit(unit)
    CanFlipStackedStreetLabel = property(get_CanFlipStackedStreetLabel, put_CanFlipStackedStreetLabel, None)
    CanPlaceLabelOnTopOfFeature = property(get_CanPlaceLabelOnTopOfFeature, put_CanPlaceLabelOnTopOfFeature, None)
    CanReduceLeading = property(get_CanReduceLeading, put_CanReduceLeading, None)
    ContourAlignmentType = property(get_ContourAlignmentType, put_ContourAlignmentType, None)
    ContourLadderType = property(get_ContourLadderType, put_ContourLadderType, None)
    ContourMaximumAngle = property(get_ContourMaximumAngle, put_ContourMaximumAngle, None)
    EnablePolygonFixedPosition = property(get_EnablePolygonFixedPosition, put_EnablePolygonFixedPosition, None)
    EnableSecondaryOffset = property(get_EnableSecondaryOffset, put_EnableSecondaryOffset, None)
    GraticuleAlignmentType = property(get_GraticuleAlignmentType, put_GraticuleAlignmentType, None)
    IsLabelBufferHardConstraint = property(get_IsLabelBufferHardConstraint, put_IsLabelBufferHardConstraint, None)
    IsMinimumSizeBasedOnArea = property(get_IsMinimumSizeBasedOnArea, put_IsMinimumSizeBasedOnArea, None)
    IsOffsetFromFeatureGeometry = property(get_IsOffsetFromFeatureGeometry, put_IsOffsetFromFeatureGeometry, None)
    LineFeatureType = property(get_LineFeatureType, put_LineFeatureType, None)
    MaximumLabelOverrunUnit = property(get_MaximumLabelOverrunUnit, put_MaximumLabelOverrunUnit, None)
    MinimumFeatureSizeUnit = property(get_MinimumFeatureSizeUnit, put_MinimumFeatureSizeUnit, None)
    PolygonAnchorPointType = property(get_PolygonAnchorPointType, put_PolygonAnchorPointType, None)
    PolygonExternalZones = property(None, put_PolygonExternalZones, None)
    PolygonFeatureType = property(get_PolygonFeatureType, put_PolygonFeatureType, None)
    PolygonInternalZones = property(None, put_PolygonInternalZones, None)
    RepetitionIntervalUnit = property(get_RepetitionIntervalUnit, put_RepetitionIntervalUnit, None)
    SecondaryOffsetMaximum = property(get_SecondaryOffsetMaximum, put_SecondaryOffsetMaximum, None)
    SecondaryOffsetMinimum = property(get_SecondaryOffsetMinimum, put_SecondaryOffsetMinimum, None)
    StrategyPriority = property(None, put_StrategyPriority, None)
    ThinningDistanceUnit = property(get_ThinningDistanceUnit, put_ThinningDistanceUnit, None)
    PolygonExternalZones = IndexProperty(get_PolygonExternalZones, None)
    PolygonInternalZones = IndexProperty(get_PolygonInternalZones, None)
    StrategyPriority = IndexProperty(get_StrategyPriority, None)

class IMaplexOverposterLayerProperties3(_esriCarto.IMaplexOverposterLayerProperties3):
    _IID = uuid.UUID('f4430bc2-b50a-ff92-bc02-e5ee071af333')

    def __init__(self, *args, **kw):
        super(IMaplexOverposterLayerProperties3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AvoidPolygonHoles(self):
        '''Method IMaplexOverposterLayerProperties3.get_AvoidPolygonHoles

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties3, self).get_AvoidPolygonHoles()
    def put_AvoidPolygonHoles(self, flag):
        '''Method IMaplexOverposterLayerProperties3.put_AvoidPolygonHoles

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties3, self).put_AvoidPolygonHoles(flag)
    def get_BoundaryLabelingAllowSingleSided(self):
        '''Method IMaplexOverposterLayerProperties3.get_BoundaryLabelingAllowSingleSided

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties3, self).get_BoundaryLabelingAllowSingleSided()
    def put_BoundaryLabelingAllowSingleSided(self, flag):
        '''Method IMaplexOverposterLayerProperties3.put_BoundaryLabelingAllowSingleSided

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties3, self).put_BoundaryLabelingAllowSingleSided(flag)
    def get_BoundaryLabelingAllowHoles(self):
        '''Method IMaplexOverposterLayerProperties3.get_BoundaryLabelingAllowHoles

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties3, self).get_BoundaryLabelingAllowHoles()
    def put_BoundaryLabelingAllowHoles(self, flag):
        '''Method IMaplexOverposterLayerProperties3.put_BoundaryLabelingAllowHoles

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties3, self).put_BoundaryLabelingAllowHoles(flag)
    def get_BoundaryLabelingSingleSidedOnLine(self):
        '''Method IMaplexOverposterLayerProperties3.get_BoundaryLabelingSingleSidedOnLine

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties3, self).get_BoundaryLabelingSingleSidedOnLine()
    def put_BoundaryLabelingSingleSidedOnLine(self, flag):
        '''Method IMaplexOverposterLayerProperties3.put_BoundaryLabelingSingleSidedOnLine

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties3, self).put_BoundaryLabelingSingleSidedOnLine(flag)
    AvoidPolygonHoles = property(get_AvoidPolygonHoles, put_AvoidPolygonHoles, None)
    BoundaryLabelingAllowHoles = property(get_BoundaryLabelingAllowHoles, put_BoundaryLabelingAllowHoles, None)
    BoundaryLabelingAllowSingleSided = property(get_BoundaryLabelingAllowSingleSided, put_BoundaryLabelingAllowSingleSided, None)
    BoundaryLabelingSingleSidedOnLine = property(get_BoundaryLabelingSingleSidedOnLine, put_BoundaryLabelingSingleSidedOnLine, None)

class IMaplexOverposterLayerProperties4(_esriCarto.IMaplexOverposterLayerProperties4):
    _IID = uuid.UUID('ff4540e2-05b1-a27f-7fb2-88f2cecf1b93')

    def __init__(self, *args, **kw):
        super(IMaplexOverposterLayerProperties4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CanKeyNumberLabel(self):
        '''Method IMaplexOverposterLayerProperties4.get_CanKeyNumberLabel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_CanKeyNumberLabel()
    def put_CanKeyNumberLabel(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_CanKeyNumberLabel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_CanKeyNumberLabel(flag)
    def get_KeyNumberGroupName(self):
        '''Method IMaplexOverposterLayerProperties4.get_KeyNumberGroupName

           OUTPUT
            Name                : BSTR*'''
        return super(IMaplexOverposterLayerProperties4, self).get_KeyNumberGroupName()
    def put_KeyNumberGroupName(self, Name):
        '''Method IMaplexOverposterLayerProperties4.put_KeyNumberGroupName

           INPUT
            Name                : BSTR'''
        return super(IMaplexOverposterLayerProperties4, self).put_KeyNumberGroupName(Name)
    def get_UseExactSymbolOutline(self):
        '''Method IMaplexOverposterLayerProperties4.get_UseExactSymbolOutline

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_UseExactSymbolOutline()
    def put_UseExactSymbolOutline(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_UseExactSymbolOutline

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_UseExactSymbolOutline(flag)
    def get_TruncationMarkerCharacter(self):
        '''Method IMaplexOverposterLayerProperties4.get_TruncationMarkerCharacter

           OUTPUT
            marker              : BSTR*'''
        return super(IMaplexOverposterLayerProperties4, self).get_TruncationMarkerCharacter()
    def put_TruncationMarkerCharacter(self, marker):
        '''Method IMaplexOverposterLayerProperties4.put_TruncationMarkerCharacter

           INPUT
            marker              : BSTR'''
        return super(IMaplexOverposterLayerProperties4, self).put_TruncationMarkerCharacter(marker)
    def get_TruncationMinimumLength(self):
        '''Method IMaplexOverposterLayerProperties4.get_TruncationMinimumLength

           OUTPUT
            Length              : long*'''
        return super(IMaplexOverposterLayerProperties4, self).get_TruncationMinimumLength()
    def put_TruncationMinimumLength(self, Length):
        '''Method IMaplexOverposterLayerProperties4.put_TruncationMinimumLength

           INPUT
            Length              : long'''
        return super(IMaplexOverposterLayerProperties4, self).put_TruncationMinimumLength(Length)
    def get_TruncationPreferredCharacters(self):
        '''Method IMaplexOverposterLayerProperties4.get_TruncationPreferredCharacters

           OUTPUT
            characters          : BSTR*'''
        return super(IMaplexOverposterLayerProperties4, self).get_TruncationPreferredCharacters()
    def put_TruncationPreferredCharacters(self, characters):
        '''Method IMaplexOverposterLayerProperties4.put_TruncationPreferredCharacters

           INPUT
            characters          : BSTR'''
        return super(IMaplexOverposterLayerProperties4, self).put_TruncationPreferredCharacters(characters)
    def get_PreferLabelNearMapBorder(self):
        '''Method IMaplexOverposterLayerProperties4.get_PreferLabelNearMapBorder

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_PreferLabelNearMapBorder()
    def put_PreferLabelNearMapBorder(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_PreferLabelNearMapBorder

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_PreferLabelNearMapBorder(flag)
    def get_PreferLabelNearMapBorderClearance(self):
        '''Method IMaplexOverposterLayerProperties4.get_PreferLabelNearMapBorderClearance

           OUTPUT
            Value               : double*'''
        return super(IMaplexOverposterLayerProperties4, self).get_PreferLabelNearMapBorderClearance()
    def put_PreferLabelNearMapBorderClearance(self, Value):
        '''Method IMaplexOverposterLayerProperties4.put_PreferLabelNearMapBorderClearance

           INPUT
            Value               : double'''
        return super(IMaplexOverposterLayerProperties4, self).put_PreferLabelNearMapBorderClearance(Value)
    def get_PreferLabelNearJunction(self):
        '''Method IMaplexOverposterLayerProperties4.get_PreferLabelNearJunction

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_PreferLabelNearJunction()
    def put_PreferLabelNearJunction(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_PreferLabelNearJunction

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_PreferLabelNearJunction(flag)
    def get_PreferLabelNearJunctionClearance(self):
        '''Method IMaplexOverposterLayerProperties4.get_PreferLabelNearJunctionClearance

           OUTPUT
            Value               : double*'''
        return super(IMaplexOverposterLayerProperties4, self).get_PreferLabelNearJunctionClearance()
    def put_PreferLabelNearJunctionClearance(self, Value):
        '''Method IMaplexOverposterLayerProperties4.put_PreferLabelNearJunctionClearance

           INPUT
            Value               : double'''
        return super(IMaplexOverposterLayerProperties4, self).put_PreferLabelNearJunctionClearance(Value)
    def get_EnableConnection(self):
        '''Method IMaplexOverposterLayerProperties4.get_EnableConnection

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_EnableConnection()
    def put_EnableConnection(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_EnableConnection

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_EnableConnection(flag)
    def get_ConnectionType(self):
        '''Method IMaplexOverposterLayerProperties4.get_ConnectionType

           OUTPUT
            Type                : esriMaplexConnectionType*'''
        return super(IMaplexOverposterLayerProperties4, self).get_ConnectionType()
    def put_ConnectionType(self, Type):
        '''Method IMaplexOverposterLayerProperties4.put_ConnectionType

           INPUT
            Type                : esriMaplexConnectionType'''
        return super(IMaplexOverposterLayerProperties4, self).put_ConnectionType(Type)
    def get_LabelLargestPolygon(self):
        '''Method IMaplexOverposterLayerProperties4.get_LabelLargestPolygon

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_LabelLargestPolygon()
    def put_LabelLargestPolygon(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_LabelLargestPolygon

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_LabelLargestPolygon(flag)
    def get_MultiPartOption(self):
        '''Method IMaplexOverposterLayerProperties4.get_MultiPartOption

           OUTPUT
            Type                : esriMaplexMultiPartOption*'''
        return super(IMaplexOverposterLayerProperties4, self).get_MultiPartOption()
    def put_MultiPartOption(self, Type):
        '''Method IMaplexOverposterLayerProperties4.put_MultiPartOption

           INPUT
            Type                : esriMaplexMultiPartOption'''
        return super(IMaplexOverposterLayerProperties4, self).put_MultiPartOption(Type)
    def get_AllowStraddleStacking(self):
        '''Method IMaplexOverposterLayerProperties4.get_AllowStraddleStacking

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_AllowStraddleStacking()
    def put_AllowStraddleStacking(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_AllowStraddleStacking

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_AllowStraddleStacking(flag)
    def get_RemoveExtraWhiteSpace(self):
        '''Method IMaplexOverposterLayerProperties4.get_RemoveExtraWhiteSpace

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_RemoveExtraWhiteSpace()
    def put_RemoveExtraWhiteSpace(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_RemoveExtraWhiteSpace

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_RemoveExtraWhiteSpace(flag)
    def get_RemoveExtraLineBreaks(self):
        '''Method IMaplexOverposterLayerProperties4.get_RemoveExtraLineBreaks

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterLayerProperties4, self).get_RemoveExtraLineBreaks()
    def put_RemoveExtraLineBreaks(self, flag):
        '''Method IMaplexOverposterLayerProperties4.put_RemoveExtraLineBreaks

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterLayerProperties4, self).put_RemoveExtraLineBreaks(flag)
    AllowStraddleStacking = property(get_AllowStraddleStacking, put_AllowStraddleStacking, None)
    CanKeyNumberLabel = property(get_CanKeyNumberLabel, put_CanKeyNumberLabel, None)
    ConnectionType = property(get_ConnectionType, put_ConnectionType, None)
    EnableConnection = property(get_EnableConnection, put_EnableConnection, None)
    KeyNumberGroupName = property(get_KeyNumberGroupName, put_KeyNumberGroupName, None)
    LabelLargestPolygon = property(get_LabelLargestPolygon, put_LabelLargestPolygon, None)
    MultiPartOption = property(get_MultiPartOption, put_MultiPartOption, None)
    PreferLabelNearJunction = property(get_PreferLabelNearJunction, put_PreferLabelNearJunction, None)
    PreferLabelNearJunctionClearance = property(get_PreferLabelNearJunctionClearance, put_PreferLabelNearJunctionClearance, None)
    PreferLabelNearMapBorder = property(get_PreferLabelNearMapBorder, put_PreferLabelNearMapBorder, None)
    PreferLabelNearMapBorderClearance = property(get_PreferLabelNearMapBorderClearance, put_PreferLabelNearMapBorderClearance, None)
    RemoveExtraLineBreaks = property(get_RemoveExtraLineBreaks, put_RemoveExtraLineBreaks, None)
    RemoveExtraWhiteSpace = property(get_RemoveExtraWhiteSpace, put_RemoveExtraWhiteSpace, None)
    TruncationMarkerCharacter = property(get_TruncationMarkerCharacter, put_TruncationMarkerCharacter, None)
    TruncationMinimumLength = property(get_TruncationMinimumLength, put_TruncationMinimumLength, None)
    TruncationPreferredCharacters = property(get_TruncationPreferredCharacters, put_TruncationPreferredCharacters, None)
    UseExactSymbolOutline = property(get_UseExactSymbolOutline, put_UseExactSymbolOutline, None)

class IMaplexDictionaryEntry(_esriCarto.IMaplexDictionaryEntry):
    _IID = uuid.UUID('20664808-0ac0-1ea9-9dd3-faa1142a71f2')

    def __init__(self, *args, **kw):
        super(IMaplexDictionaryEntry, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Text(self):
        '''Method IMaplexDictionaryEntry.get_Text

           OUTPUT
            Text                : BSTR*'''
        return super(IMaplexDictionaryEntry, self).get_Text()
    def put_Text(self, Text):
        '''Method IMaplexDictionaryEntry.put_Text

           INPUT
            Text                : BSTR'''
        return super(IMaplexDictionaryEntry, self).put_Text(Text)
    def get_Abbreviation(self):
        '''Method IMaplexDictionaryEntry.get_Abbreviation

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IMaplexDictionaryEntry, self).get_Abbreviation()
    def put_Abbreviation(self, Abbreviation):
        '''Method IMaplexDictionaryEntry.put_Abbreviation

           INPUT
            Abbreviation        : BSTR'''
        return super(IMaplexDictionaryEntry, self).put_Abbreviation(Abbreviation)
    def get_Type(self):
        '''Method IMaplexDictionaryEntry.get_Type

           OUTPUT
            Type                : esriMaplexAbbrevType*'''
        return super(IMaplexDictionaryEntry, self).get_Type()
    def put_Type(self, Type):
        '''Method IMaplexDictionaryEntry.put_Type

           INPUT
            Type                : esriMaplexAbbrevType'''
        return super(IMaplexDictionaryEntry, self).put_Type(Type)
    Abbreviation = property(get_Abbreviation, put_Abbreviation, None)
    Text = property(get_Text, put_Text, None)
    Type = property(get_Type, put_Type, None)

class IMaplexDictionary(_esriCarto.IMaplexDictionary):
    _IID = uuid.UUID('20664808-0a3a-1eac-91d3-f3ef422a61a5')

    def __init__(self, *args, **kw):
        super(IMaplexDictionary, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMaplexDictionary.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMaplexDictionary, self).get_Name()
    def put_Name(self, Name):
        '''Method IMaplexDictionary.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMaplexDictionary, self).put_Name(Name)
    def get_EntryCount(self):
        '''Method IMaplexDictionary.get_EntryCount

           OUTPUT
            Count               : long*'''
        return super(IMaplexDictionary, self).get_EntryCount()
    def AddEntry(self, dicEntry):
        '''Method IMaplexDictionary.AddEntry

           INPUT
            dicEntry            : IMaplexDictionaryEntry*'''
        return super(IMaplexDictionary, self).AddEntry(dicEntry)
    def GetEntry(self, Index):
        '''Method IMaplexDictionary.GetEntry

           INPUT
            Index               : long

           OUTPUT
            dicEntry            : IMaplexDictionaryEntry**'''
        return super(IMaplexDictionary, self).GetEntry(Index)
    def Clear(self):
        '''Method IMaplexDictionary.Clear'''
        return super(IMaplexDictionary, self).Clear()
    EntryCount = property(get_EntryCount, None, None)
    Name = property(get_Name, put_Name, None)

class IMaplexDictionaries(_esriCarto.IMaplexDictionaries):
    _IID = uuid.UUID('20664808-0e3a-13ac-eb91-5ac2902ffe2b')
    def get_DictionaryCount(self):
        '''Method IMaplexDictionaries.get_DictionaryCount

           OUTPUT
            Count               : long*'''
        return super(IMaplexDictionaries, self).get_DictionaryCount()
    def AddDictionary(self, dictionary):
        '''Method IMaplexDictionaries.AddDictionary

           INPUT
            dictionary          : IMaplexDictionary*'''
        return super(IMaplexDictionaries, self).AddDictionary(dictionary)
    def GetDictionary(self, Index):
        '''Method IMaplexDictionaries.GetDictionary

           INPUT
            Index               : long

           OUTPUT
            dictionary          : IMaplexDictionary**'''
        return super(IMaplexDictionaries, self).GetDictionary(Index)
    def RemoveDictionary(self, Index):
        '''Method IMaplexDictionaries.RemoveDictionary

           INPUT
            Index               : long'''
        return super(IMaplexDictionaries, self).RemoveDictionary(Index)
    def Clear(self):
        '''Method IMaplexDictionaries.Clear'''
        return super(IMaplexDictionaries, self).Clear()
    DictionaryCount = property(get_DictionaryCount, None, None)

class IMaplexKeyNumberGroup(_esriCarto.IMaplexKeyNumberGroup):
    _IID = uuid.UUID('ae54019f-8f5e-6742-88f5-663fe3e3dba5')

    def __init__(self, *args, **kw):
        super(IMaplexKeyNumberGroup, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMaplexKeyNumberGroup.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMaplexKeyNumberGroup, self).get_Name()
    def put_Name(self, Name):
        '''Method IMaplexKeyNumberGroup.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMaplexKeyNumberGroup, self).put_Name(Name)
    def get_HorizontalAlignment(self):
        '''Method IMaplexKeyNumberGroup.get_HorizontalAlignment

           OUTPUT
            Value               : esriMaplexKeyNumberHorizontalAlignment*'''
        return super(IMaplexKeyNumberGroup, self).get_HorizontalAlignment()
    def put_HorizontalAlignment(self, Value):
        '''Method IMaplexKeyNumberGroup.put_HorizontalAlignment

           INPUT
            Value               : esriMaplexKeyNumberHorizontalAlignment'''
        return super(IMaplexKeyNumberGroup, self).put_HorizontalAlignment(Value)
    def get_MinimumNumberOfLines(self):
        '''Method IMaplexKeyNumberGroup.get_MinimumNumberOfLines

           OUTPUT
            Value               : long*'''
        return super(IMaplexKeyNumberGroup, self).get_MinimumNumberOfLines()
    def put_MinimumNumberOfLines(self, Value):
        '''Method IMaplexKeyNumberGroup.put_MinimumNumberOfLines

           INPUT
            Value               : long'''
        return super(IMaplexKeyNumberGroup, self).put_MinimumNumberOfLines(Value)
    def get_MaximumNumberOfLines(self):
        '''Method IMaplexKeyNumberGroup.get_MaximumNumberOfLines

           OUTPUT
            Value               : long*'''
        return super(IMaplexKeyNumberGroup, self).get_MaximumNumberOfLines()
    def put_MaximumNumberOfLines(self, Value):
        '''Method IMaplexKeyNumberGroup.put_MaximumNumberOfLines

           INPUT
            Value               : long'''
        return super(IMaplexKeyNumberGroup, self).put_MaximumNumberOfLines(Value)
    def get_DelimiterCharacter(self):
        '''Method IMaplexKeyNumberGroup.get_DelimiterCharacter

           OUTPUT
            Name                : BSTR*'''
        return super(IMaplexKeyNumberGroup, self).get_DelimiterCharacter()
    def put_DelimiterCharacter(self, Name):
        '''Method IMaplexKeyNumberGroup.put_DelimiterCharacter

           INPUT
            Name                : BSTR'''
        return super(IMaplexKeyNumberGroup, self).put_DelimiterCharacter(Name)
    def get_NumberResetType(self):
        '''Method IMaplexKeyNumberGroup.get_NumberResetType

           OUTPUT
            Value               : esriMaplexKeyNumberResetType*'''
        return super(IMaplexKeyNumberGroup, self).get_NumberResetType()
    def put_NumberResetType(self, Value):
        '''Method IMaplexKeyNumberGroup.put_NumberResetType

           INPUT
            Value               : esriMaplexKeyNumberResetType'''
        return super(IMaplexKeyNumberGroup, self).put_NumberResetType(Value)
    DelimiterCharacter = property(get_DelimiterCharacter, put_DelimiterCharacter, None)
    HorizontalAlignment = property(get_HorizontalAlignment, put_HorizontalAlignment, None)
    MaximumNumberOfLines = property(get_MaximumNumberOfLines, put_MaximumNumberOfLines, None)
    MinimumNumberOfLines = property(get_MinimumNumberOfLines, put_MinimumNumberOfLines, None)
    Name = property(get_Name, put_Name, None)
    NumberResetType = property(get_NumberResetType, put_NumberResetType, None)

class IMaplexKeyNumberGroups(_esriCarto.IMaplexKeyNumberGroups):
    _IID = uuid.UUID('6604e878-8ebb-b33c-8e31-7b355faf1960')
    def get_GroupCount(self):
        '''Method IMaplexKeyNumberGroups.get_GroupCount

           OUTPUT
            Count               : long*'''
        return super(IMaplexKeyNumberGroups, self).get_GroupCount()
    def AddGroup(self, group):
        '''Method IMaplexKeyNumberGroups.AddGroup

           INPUT
            group               : IMaplexKeyNumberGroup*'''
        return super(IMaplexKeyNumberGroups, self).AddGroup(group)
    def GetGroup(self, Index):
        '''Method IMaplexKeyNumberGroups.GetGroup

           INPUT
            Index               : long

           OUTPUT
            group               : IMaplexKeyNumberGroup**'''
        return super(IMaplexKeyNumberGroups, self).GetGroup(Index)
    def RemoveGroup(self, Index):
        '''Method IMaplexKeyNumberGroups.RemoveGroup

           INPUT
            Index               : long'''
        return super(IMaplexKeyNumberGroups, self).RemoveGroup(Index)
    def Clear(self):
        '''Method IMaplexKeyNumberGroups.Clear'''
        return super(IMaplexKeyNumberGroups, self).Clear()
    GroupCount = property(get_GroupCount, None, None)

class IMaplexOverposterProperties(_esriCarto.IMaplexOverposterProperties):
    _IID = uuid.UUID('20664808-31ea-11a4-890f-0ca0d9ef134c')

    def __init__(self, *args, **kw):
        super(IMaplexOverposterProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PlacementQuality(self):
        '''Method IMaplexOverposterProperties.get_PlacementQuality

           OUTPUT
            Quality             : esriMaplexPlacementQuality*'''
        return super(IMaplexOverposterProperties, self).get_PlacementQuality()
    def put_PlacementQuality(self, Quality):
        '''Method IMaplexOverposterProperties.put_PlacementQuality

           INPUT
            Quality             : esriMaplexPlacementQuality'''
        return super(IMaplexOverposterProperties, self).put_PlacementQuality(Quality)
    def get_AllowBorderOverlap(self):
        '''Method IMaplexOverposterProperties.get_AllowBorderOverlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterProperties, self).get_AllowBorderOverlap()
    def put_AllowBorderOverlap(self, flag):
        '''Method IMaplexOverposterProperties.put_AllowBorderOverlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterProperties, self).put_AllowBorderOverlap(flag)
    def get_Dictionaries(self):
        '''Method IMaplexOverposterProperties.get_Dictionaries

           OUTPUT
            Dictionaries        : IMaplexDictionaries**'''
        return super(IMaplexOverposterProperties, self).get_Dictionaries()
    def put_Dictionaries(self, Dictionaries):
        '''Method IMaplexOverposterProperties.put_Dictionaries

           INPUT
            Dictionaries        : IMaplexDictionaries*'''
        return super(IMaplexOverposterProperties, self).put_Dictionaries(Dictionaries)
    def get_EnableConnection(self):
        '''Method IMaplexOverposterProperties.get_EnableConnection

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterProperties, self).get_EnableConnection()
    def put_EnableConnection(self, flag):
        '''Method IMaplexOverposterProperties.put_EnableConnection

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterProperties, self).put_EnableConnection(flag)
    def get_ConnectionType(self):
        '''Method IMaplexOverposterProperties.get_ConnectionType

           OUTPUT
            Type                : esriMaplexConnectionType*'''
        return super(IMaplexOverposterProperties, self).get_ConnectionType()
    def put_ConnectionType(self, Type):
        '''Method IMaplexOverposterProperties.put_ConnectionType

           INPUT
            Type                : esriMaplexConnectionType'''
        return super(IMaplexOverposterProperties, self).put_ConnectionType(Type)
    def get_LabelLargestPolygon(self):
        '''Method IMaplexOverposterProperties.get_LabelLargestPolygon

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMaplexOverposterProperties, self).get_LabelLargestPolygon()
    def put_LabelLargestPolygon(self, flag):
        '''Method IMaplexOverposterProperties.put_LabelLargestPolygon

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMaplexOverposterProperties, self).put_LabelLargestPolygon(flag)
    AllowBorderOverlap = property(get_AllowBorderOverlap, put_AllowBorderOverlap, None)
    ConnectionType = property(get_ConnectionType, put_ConnectionType, None)
    Dictionaries = property(get_Dictionaries, put_Dictionaries, None)
    EnableConnection = property(get_EnableConnection, put_EnableConnection, None)
    LabelLargestPolygon = property(get_LabelLargestPolygon, put_LabelLargestPolygon, None)
    PlacementQuality = property(get_PlacementQuality, put_PlacementQuality, None)

class IMaplexOverposterProperties2(_esriCarto.IMaplexOverposterProperties2):
    _IID = uuid.UUID('f4ab3308-76a3-106e-f66e-05de41f3aa20')

    def __init__(self, *args, **kw):
        super(IMaplexOverposterProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_KeyNumberGroups(self):
        '''Method IMaplexOverposterProperties2.get_KeyNumberGroups

           OUTPUT
            groups              : IMaplexKeyNumberGroups**'''
        return super(IMaplexOverposterProperties2, self).get_KeyNumberGroups()
    def putref_KeyNumberGroups(self, groups):
        '''Method IMaplexOverposterProperties2.putref_KeyNumberGroups

           INPUT
            groups              : IMaplexKeyNumberGroups*'''
        return super(IMaplexOverposterProperties2, self).putref_KeyNumberGroups(groups)
    KeyNumberGroups = property(get_KeyNumberGroups, putref_KeyNumberGroups, None)

class ILabelEngineLayerProperties2(_esriCarto.ILabelEngineLayerProperties2):
    _IID = uuid.UUID('59a8eeba-8ef7-4143-b497-4efcaf6a2405')

    def __init__(self, *args, **kw):
        super(ILabelEngineLayerProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Symbol(self, TextSymbol):
        '''Method ILabelEngineLayerProperties2.putref_Symbol

           INPUT
            TextSymbol          : ITextSymbol*'''
        return super(ILabelEngineLayerProperties2, self).putref_Symbol(TextSymbol)
    def get_Symbol(self):
        '''Method ILabelEngineLayerProperties2.get_Symbol

           OUTPUT
            TextSymbol          : ITextSymbol**'''
        return super(ILabelEngineLayerProperties2, self).get_Symbol()
    def put_SymbolID(self, SymbolID):
        '''Method ILabelEngineLayerProperties2.put_SymbolID

           INPUT
            SymbolID            : long'''
        return super(ILabelEngineLayerProperties2, self).put_SymbolID(SymbolID)
    def get_SymbolID(self):
        '''Method ILabelEngineLayerProperties2.get_SymbolID

           OUTPUT
            SymbolID            : long*'''
        return super(ILabelEngineLayerProperties2, self).get_SymbolID()
    def put_Offset(self, Offset):
        '''Method ILabelEngineLayerProperties2.put_Offset

           INPUT
            Offset              : double'''
        return super(ILabelEngineLayerProperties2, self).put_Offset(Offset)
    def get_Offset(self):
        '''Method ILabelEngineLayerProperties2.get_Offset

           OUTPUT
            Offset              : double*'''
        return super(ILabelEngineLayerProperties2, self).get_Offset()
    def putref_BasicOverposterLayerProperties(self, props):
        '''Method ILabelEngineLayerProperties2.putref_BasicOverposterLayerProperties

           INPUT
            props               : IBasicOverposterLayerProperties*'''
        return super(ILabelEngineLayerProperties2, self).putref_BasicOverposterLayerProperties(props)
    def get_BasicOverposterLayerProperties(self):
        '''Method ILabelEngineLayerProperties2.get_BasicOverposterLayerProperties

           OUTPUT
            props               : IBasicOverposterLayerProperties**'''
        return super(ILabelEngineLayerProperties2, self).get_BasicOverposterLayerProperties()
    def put_Expression(self, Expression):
        '''Method ILabelEngineLayerProperties2.put_Expression

           INPUT
            Expression          : BSTR'''
        return super(ILabelEngineLayerProperties2, self).put_Expression(Expression)
    def get_Expression(self):
        '''Method ILabelEngineLayerProperties2.get_Expression

           OUTPUT
            Expression          : BSTR*'''
        return super(ILabelEngineLayerProperties2, self).get_Expression()
    def put_IsExpressionSimple(self, simpleExpression):
        '''Method ILabelEngineLayerProperties2.put_IsExpressionSimple

           INPUT
            simpleExpression    : VARIANT_BOOL'''
        return super(ILabelEngineLayerProperties2, self).put_IsExpressionSimple(simpleExpression)
    def get_IsExpressionSimple(self):
        '''Method ILabelEngineLayerProperties2.get_IsExpressionSimple

           OUTPUT
            simpleExpression    : VARIANT_BOOL*'''
        return super(ILabelEngineLayerProperties2, self).get_IsExpressionSimple()
    def putref_ExpressionParser(self, engine):
        '''Method ILabelEngineLayerProperties2.putref_ExpressionParser

           INPUT
            engine              : IAnnotationExpressionEngine*'''
        return super(ILabelEngineLayerProperties2, self).putref_ExpressionParser(engine)
    def get_ExpressionParser(self):
        '''Method ILabelEngineLayerProperties2.get_ExpressionParser

           OUTPUT
            engine              : IAnnotationExpressionEngine**'''
        return super(ILabelEngineLayerProperties2, self).get_ExpressionParser()
    def put_AnnotationClassID(self, AnnotationClassID):
        '''Method ILabelEngineLayerProperties2.put_AnnotationClassID

           INPUT
            AnnotationClassID   : long'''
        return super(ILabelEngineLayerProperties2, self).put_AnnotationClassID(AnnotationClassID)
    def get_AnnotationClassID(self):
        '''Method ILabelEngineLayerProperties2.get_AnnotationClassID

           OUTPUT
            AnnotationClassID   : long*'''
        return super(ILabelEngineLayerProperties2, self).get_AnnotationClassID()
    def putref_OverposterLayerProperties(self, props):
        '''Method ILabelEngineLayerProperties2.putref_OverposterLayerProperties

           INPUT
            props               : IOverposterLayerProperties*'''
        return super(ILabelEngineLayerProperties2, self).putref_OverposterLayerProperties(props)
    def get_OverposterLayerProperties(self):
        '''Method ILabelEngineLayerProperties2.get_OverposterLayerProperties

           OUTPUT
            props               : IOverposterLayerProperties**'''
        return super(ILabelEngineLayerProperties2, self).get_OverposterLayerProperties()
    AnnotationClassID = property(get_AnnotationClassID, put_AnnotationClassID, None)
    BasicOverposterLayerProperties = property(get_BasicOverposterLayerProperties, putref_BasicOverposterLayerProperties, None)
    Expression = property(get_Expression, put_Expression, None)
    ExpressionParser = property(get_ExpressionParser, putref_ExpressionParser, None)
    IsExpressionSimple = property(get_IsExpressionSimple, put_IsExpressionSimple, None)
    Offset = property(get_Offset, put_Offset, None)
    OverposterLayerProperties = property(get_OverposterLayerProperties, putref_OverposterLayerProperties, None)
    Symbol = property(get_Symbol, putref_Symbol, None)
    SymbolID = property(get_SymbolID, put_SymbolID, None)

class IAnnotateLayerTransformationProperties(_esriCarto.IAnnotateLayerTransformationProperties):
    _IID = uuid.UUID('3eb7ef02-dd8b-11d2-9f47-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IAnnotateLayerTransformationProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Bounds(self, Bounds):
        '''Method IAnnotateLayerTransformationProperties.put_Bounds

           INPUT
            Bounds              : IEnvelope*'''
        return super(IAnnotateLayerTransformationProperties, self).put_Bounds(Bounds)
    def get_Bounds(self):
        '''Method IAnnotateLayerTransformationProperties.get_Bounds

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IAnnotateLayerTransformationProperties, self).get_Bounds()
    def get_Units(self):
        '''Method IAnnotateLayerTransformationProperties.get_Units

           OUTPUT
            unitsCode           : esriUnits*'''
        return super(IAnnotateLayerTransformationProperties, self).get_Units()
    def put_Units(self, unitsCode):
        '''Method IAnnotateLayerTransformationProperties.put_Units

           INPUT
            unitsCode           : esriUnits'''
        return super(IAnnotateLayerTransformationProperties, self).put_Units(unitsCode)
    def get_ScaleRatio(self):
        '''Method IAnnotateLayerTransformationProperties.get_ScaleRatio

           OUTPUT
            Scale               : double*'''
        return super(IAnnotateLayerTransformationProperties, self).get_ScaleRatio()
    def put_ScaleRatio(self, Scale):
        '''Method IAnnotateLayerTransformationProperties.put_ScaleRatio

           INPUT
            Scale               : double'''
        return super(IAnnotateLayerTransformationProperties, self).put_ScaleRatio(Scale)
    def get_ReferenceScale(self):
        '''Method IAnnotateLayerTransformationProperties.get_ReferenceScale

           OUTPUT
            Scale               : double*'''
        return super(IAnnotateLayerTransformationProperties, self).get_ReferenceScale()
    def put_ReferenceScale(self, Scale):
        '''Method IAnnotateLayerTransformationProperties.put_ReferenceScale

           INPUT
            Scale               : double'''
        return super(IAnnotateLayerTransformationProperties, self).put_ReferenceScale(Scale)
    Bounds = property(get_Bounds, put_Bounds, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    ScaleRatio = property(get_ScaleRatio, put_ScaleRatio, None)
    Units = property(get_Units, put_Units, None)

class IAnnotationPropertiesConverter(_esriCarto.IAnnotationPropertiesConverter):
    _IID = uuid.UUID('3a92de4f-c31a-11d2-9f34-76bc4e6ac621')
    def CanConvert(self, sourceAnnotationPropertiesID, destinationAnnotationPropertiesID):
        '''Method IAnnotationPropertiesConverter.CanConvert

           INPUTS
            sourceAnnotationPropertiesID: IUID*
            destinationAnnotationPropertiesID: IUID*

           OUTPUT
            CanConvert          : VARIANT_BOOL*'''
        return super(IAnnotationPropertiesConverter, self).CanConvert(sourceAnnotationPropertiesID, destinationAnnotationPropertiesID)
    def Convert(self, Type, DisplayTransformation, sourceAnnotationPropertiesID, sourceProps, destinationAnnotationPropertiesID):
        '''Method IAnnotationPropertiesConverter.Convert

           INPUTS
            Type                : esriGeometryType
            DisplayTransformation: IDisplayTransformation*
            sourceAnnotationPropertiesID: IUID*
            sourceProps         : IAnnotateLayerPropertiesCollection*
            destinationAnnotationPropertiesID: IUID*

           OUTPUT
            destinationProps    : IAnnotateLayerPropertiesCollection**'''
        return super(IAnnotationPropertiesConverter, self).Convert(Type, DisplayTransformation, sourceAnnotationPropertiesID, sourceProps, destinationAnnotationPropertiesID)

class ILabelStyle(_esriCarto.ILabelStyle):
    _IID = uuid.UUID('4c90de7a-cb77-11d2-9f34-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(ILabelStyle, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Symbol(self, TextSymbol):
        '''Method ILabelStyle.putref_Symbol

           INPUT
            TextSymbol          : ITextSymbol*'''
        return super(ILabelStyle, self).putref_Symbol(TextSymbol)
    def get_Symbol(self):
        '''Method ILabelStyle.get_Symbol

           OUTPUT
            TextSymbol          : ITextSymbol**'''
        return super(ILabelStyle, self).get_Symbol()
    def putref_BasicOverposterLayerProperties(self, props):
        '''Method ILabelStyle.putref_BasicOverposterLayerProperties

           INPUT
            props               : IBasicOverposterLayerProperties*'''
        return super(ILabelStyle, self).putref_BasicOverposterLayerProperties(props)
    def get_BasicOverposterLayerProperties(self):
        '''Method ILabelStyle.get_BasicOverposterLayerProperties

           OUTPUT
            props               : IBasicOverposterLayerProperties**'''
        return super(ILabelStyle, self).get_BasicOverposterLayerProperties()
    BasicOverposterLayerProperties = property(get_BasicOverposterLayerProperties, putref_BasicOverposterLayerProperties, None)
    Symbol = property(get_Symbol, putref_Symbol, None)

class ILabelStyle2(_esriCarto.ILabelStyle2):
    _IID = uuid.UUID('3178ec81-a0a5-4cf0-b055-11dea12edc28')

    def __init__(self, *args, **kw):
        super(ILabelStyle2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Symbol(self, TextSymbol):
        '''Method ILabelStyle2.putref_Symbol

           INPUT
            TextSymbol          : ITextSymbol*'''
        return super(ILabelStyle2, self).putref_Symbol(TextSymbol)
    def get_Symbol(self):
        '''Method ILabelStyle2.get_Symbol

           OUTPUT
            TextSymbol          : ITextSymbol**'''
        return super(ILabelStyle2, self).get_Symbol()
    def putref_BasicOverposterLayerProperties(self, props):
        '''Method ILabelStyle2.putref_BasicOverposterLayerProperties

           INPUT
            props               : IBasicOverposterLayerProperties*'''
        return super(ILabelStyle2, self).putref_BasicOverposterLayerProperties(props)
    def get_BasicOverposterLayerProperties(self):
        '''Method ILabelStyle2.get_BasicOverposterLayerProperties

           OUTPUT
            props               : IBasicOverposterLayerProperties**'''
        return super(ILabelStyle2, self).get_BasicOverposterLayerProperties()
    def putref_OverposterLayerProperties(self, props):
        '''Method ILabelStyle2.putref_OverposterLayerProperties

           INPUT
            props               : IOverposterLayerProperties*'''
        return super(ILabelStyle2, self).putref_OverposterLayerProperties(props)
    def get_OverposterLayerProperties(self):
        '''Method ILabelStyle2.get_OverposterLayerProperties

           OUTPUT
            props               : IOverposterLayerProperties**'''
        return super(ILabelStyle2, self).get_OverposterLayerProperties()
    BasicOverposterLayerProperties = property(get_BasicOverposterLayerProperties, putref_BasicOverposterLayerProperties, None)
    OverposterLayerProperties = property(get_OverposterLayerProperties, putref_OverposterLayerProperties, None)
    Symbol = property(get_Symbol, putref_Symbol, None)

class ILayerFields(_esriCarto.ILayerFields):
    _IID = uuid.UUID('a2baae2b-969b-11d2-ae77-080009ec732a')
    def get_FieldCount(self):
        '''Method ILayerFields.get_FieldCount

           OUTPUT
            Count               : long*'''
        return super(ILayerFields, self).get_FieldCount()
    def get_Field(self, Index):
        '''Method ILayerFields.get_Field

           INPUT
            Index               : long

           OUTPUT
            Field               : IField**'''
        return super(ILayerFields, self).get_Field(Index)
    def get_FieldInfo(self, Index):
        '''Method ILayerFields.get_FieldInfo

           INPUT
            Index               : long

           OUTPUT
            FieldInfo           : IFieldInfo**'''
        return super(ILayerFields, self).get_FieldInfo(Index)
    def FindField(self, FieldName):
        '''Method ILayerFields.FindField

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(ILayerFields, self).FindField(FieldName)
    FieldCount = property(get_FieldCount, None, None)
    Field = IndexProperty(get_Field, None)
    FieldInfo = IndexProperty(get_FieldInfo, None)

class IAnnotateLayerPropertiesCollection2(_esriCarto.IAnnotateLayerPropertiesCollection2):
    _IID = uuid.UUID('2b35e113-9f11-43d5-914f-5c7055db37bc')
    def Add(self, Item):
        '''Method IAnnotateLayerPropertiesCollection2.Add

           INPUT
            Item                : IAnnotateLayerProperties*

           OUTPUT
            ID                  : long*'''
        return super(IAnnotateLayerPropertiesCollection2, self).Add(Item)
    def get_Count(self):
        '''Method IAnnotateLayerPropertiesCollection2.get_Count

           OUTPUT
            Count               : long*'''
        return super(IAnnotateLayerPropertiesCollection2, self).get_Count()
    def QueryItem(self, Index):
        '''Method IAnnotateLayerPropertiesCollection2.QueryItem

           INPUT
            Index               : long

           OUTPUTS
            Item                : IAnnotateLayerProperties**
            ID                  : long*'''
        return super(IAnnotateLayerPropertiesCollection2, self).QueryItem(Index)
    def Clear(self):
        '''Method IAnnotateLayerPropertiesCollection2.Clear'''
        return super(IAnnotateLayerPropertiesCollection2, self).Clear()
    def Remove(self, ID):
        '''Method IAnnotateLayerPropertiesCollection2.Remove

           INPUT
            ID                  : long'''
        return super(IAnnotateLayerPropertiesCollection2, self).Remove(ID)
    def Sort(self):
        '''Method IAnnotateLayerPropertiesCollection2.Sort'''
        return super(IAnnotateLayerPropertiesCollection2, self).Sort()
    def get_Properties(self, ID):
        '''Method IAnnotateLayerPropertiesCollection2.get_Properties

           INPUT
            ID                  : long

           OUTPUT
            ppAnnotateLayerProperties: IAnnotateLayerProperties**'''
        return super(IAnnotateLayerPropertiesCollection2, self).get_Properties(ID)
    def Replace(self, ID, pAnnotateLayerProperties):
        '''Method IAnnotateLayerPropertiesCollection2.Replace

           INPUTS
            ID                  : long
            pAnnotateLayerProperties: IAnnotateLayerProperties*'''
        return super(IAnnotateLayerPropertiesCollection2, self).Replace(ID, pAnnotateLayerProperties)
    Count = property(get_Count, None, None)
    Properties = IndexProperty(get_Properties, None)

class IAnnotationExpressionParser2(_esriCarto.IAnnotationExpressionParser2):
    _IID = uuid.UUID('56426ae7-a129-43d7-8eb7-2b41f507f390')
    def get_Expression(self):
        '''Method IAnnotationExpressionParser2.get_Expression

           OUTPUT
            Expression          : BSTR*'''
        return super(IAnnotationExpressionParser2, self).get_Expression()
    def get_AttributeCount(self):
        '''Method IAnnotationExpressionParser2.get_AttributeCount

           OUTPUT
            attributes          : long*'''
        return super(IAnnotationExpressionParser2, self).get_AttributeCount()
    def get_Attribute(self, Index):
        '''Method IAnnotationExpressionParser2.get_Attribute

           INPUT
            Index               : long

           OUTPUT
            Attribute           : BSTR*'''
        return super(IAnnotationExpressionParser2, self).get_Attribute(Index)
    def FindLabel(self, Feature, pLayerFields):
        '''Method IAnnotationExpressionParser2.FindLabel

           INPUTS
            Feature             : IFeature*
            pLayerFields        : ILayerFields*

           OUTPUT
            Label               : BSTR*'''
        return super(IAnnotationExpressionParser2, self).FindLabel(Feature, pLayerFields)
    def LastError(self):
        '''Method IAnnotationExpressionParser2.LastError

           OUTPUTS
            number              : long*
            line                : long*
            Description         : BSTR*'''
        return super(IAnnotationExpressionParser2, self).LastError()
    AttributeCount = property(get_AttributeCount, None, None)
    Expression = property(get_Expression, None, None)
    Attribute = IndexProperty(get_Attribute, None)

class ICodedValueAttributes(_esriCarto.ICodedValueAttributes):
    _IID = uuid.UUID('adcf5590-4250-4d45-b8ce-436fef905829')

    def __init__(self, *args, **kw):
        super(ICodedValueAttributes, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseCodedValue(self):
        '''Method ICodedValueAttributes.get_UseCodedValue

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ICodedValueAttributes, self).get_UseCodedValue()
    def put_UseCodedValue(self, flag):
        '''Method ICodedValueAttributes.put_UseCodedValue

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ICodedValueAttributes, self).put_UseCodedValue(flag)
    UseCodedValue = property(get_UseCodedValue, put_UseCodedValue, None)

class IHotLinkExpressionProperties(_esriCarto.IHotLinkExpressionProperties):
    _IID = uuid.UUID('e720618b-99a9-46d7-aa6b-507898e1ea90')

    def __init__(self, *args, **kw):
        super(IHotLinkExpressionProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Expression(self, Expression):
        '''Method IHotLinkExpressionProperties.put_Expression

           INPUT
            Expression          : BSTR'''
        return super(IHotLinkExpressionProperties, self).put_Expression(Expression)
    def get_Expression(self):
        '''Method IHotLinkExpressionProperties.get_Expression

           OUTPUT
            Expression          : BSTR*'''
        return super(IHotLinkExpressionProperties, self).get_Expression()
    def put_IsExpressionSimple(self, simpleExpression):
        '''Method IHotLinkExpressionProperties.put_IsExpressionSimple

           INPUT
            simpleExpression    : VARIANT_BOOL'''
        return super(IHotLinkExpressionProperties, self).put_IsExpressionSimple(simpleExpression)
    def get_IsExpressionSimple(self):
        '''Method IHotLinkExpressionProperties.get_IsExpressionSimple

           OUTPUT
            simpleExpression    : VARIANT_BOOL*'''
        return super(IHotLinkExpressionProperties, self).get_IsExpressionSimple()
    def putref_ExpressionParser(self, engine):
        '''Method IHotLinkExpressionProperties.putref_ExpressionParser

           INPUT
            engine              : IAnnotationExpressionEngine*'''
        return super(IHotLinkExpressionProperties, self).putref_ExpressionParser(engine)
    def get_ExpressionParser(self):
        '''Method IHotLinkExpressionProperties.get_ExpressionParser

           OUTPUT
            engine              : IAnnotationExpressionEngine**'''
        return super(IHotLinkExpressionProperties, self).get_ExpressionParser()
    Expression = property(get_Expression, put_Expression, None)
    ExpressionParser = property(get_ExpressionParser, putref_ExpressionParser, None)
    IsExpressionSimple = property(get_IsExpressionSimple, put_IsExpressionSimple, None)

class ILabelEnvironment(_esriCarto.ILabelEnvironment):
    _IID = uuid.UUID('76765b93-ce78-11d2-9f36-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(ILabelEnvironment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_LabelStyleMethod(self, Method):
        '''Method ILabelEnvironment.put_LabelStyleMethod

           INPUT
            Method              : esriLabelEnvLabelStyleMethod'''
        return super(ILabelEnvironment, self).put_LabelStyleMethod(Method)
    def get_LabelStyleMethod(self):
        '''Method ILabelEnvironment.get_LabelStyleMethod

           OUTPUT
            Method              : esriLabelEnvLabelStyleMethod*'''
        return super(ILabelEnvironment, self).get_LabelStyleMethod()
    def put_Placement(self, Placement):
        '''Method ILabelEnvironment.put_Placement

           INPUT
            Placement           : esriLabelEnvPlacement'''
        return super(ILabelEnvironment, self).put_Placement(Placement)
    def get_Placement(self):
        '''Method ILabelEnvironment.get_Placement

           OUTPUT
            Placement           : esriLabelEnvPlacement*'''
        return super(ILabelEnvironment, self).get_Placement()
    def putref_LabelStyle(self, LabelStyle):
        '''Method ILabelEnvironment.putref_LabelStyle

           INPUT
            LabelStyle          : ILabelStyle*'''
        return super(ILabelEnvironment, self).putref_LabelStyle(LabelStyle)
    def get_LabelStyle(self):
        '''Method ILabelEnvironment.get_LabelStyle

           OUTPUT
            LabelStyle          : ILabelStyle**'''
        return super(ILabelEnvironment, self).get_LabelStyle()
    LabelStyle = property(get_LabelStyle, putref_LabelStyle, None)
    LabelStyleMethod = property(get_LabelStyleMethod, put_LabelStyleMethod, None)
    Placement = property(get_Placement, put_Placement, None)

class IRotationRenderer(_esriCarto.IRotationRenderer):
    _IID = uuid.UUID('2f2047a6-42bd-11d2-aafd-00c04fa334b3')

    def __init__(self, *args, **kw):
        super(IRotationRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RotationField(self):
        '''Method IRotationRenderer.get_RotationField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IRotationRenderer, self).get_RotationField()
    def put_RotationField(self, FieldName):
        '''Method IRotationRenderer.put_RotationField

           INPUT
            FieldName           : BSTR'''
        return super(IRotationRenderer, self).put_RotationField(FieldName)
    def get_RotationType(self):
        '''Method IRotationRenderer.get_RotationType

           OUTPUT
            Type                : esriSymbolRotationType*'''
        return super(IRotationRenderer, self).get_RotationType()
    def put_RotationType(self, Type):
        '''Method IRotationRenderer.put_RotationType

           INPUT
            Type                : esriSymbolRotationType'''
        return super(IRotationRenderer, self).put_RotationType(Type)
    RotationField = property(get_RotationField, put_RotationField, None)
    RotationType = property(get_RotationType, put_RotationType, None)

class IHyperlink(_esriCarto.IHyperlink):
    _IID = uuid.UUID('3036d35d-ede5-11d0-87fe-080009ec732a')

    def __init__(self, *args, **kw):
        super(IHyperlink, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureId(self):
        '''Method IHyperlink.get_FeatureId

           OUTPUT
            FID                 : long*'''
        return super(IHyperlink, self).get_FeatureId()
    def put_FeatureId(self, FID):
        '''Method IHyperlink.put_FeatureId

           INPUT
            FID                 : long'''
        return super(IHyperlink, self).put_FeatureId(FID)
    def get_Link(self):
        '''Method IHyperlink.get_Link

           OUTPUT
            Link                : BSTR*'''
        return super(IHyperlink, self).get_Link()
    def put_Link(self, Link):
        '''Method IHyperlink.put_Link

           INPUT
            Link                : BSTR'''
        return super(IHyperlink, self).put_Link(Link)
    def get_LinkType(self):
        '''Method IHyperlink.get_LinkType

           OUTPUT
            LinkType            : esriHyperlinkType*'''
        return super(IHyperlink, self).get_LinkType()
    def put_LinkType(self, LinkType):
        '''Method IHyperlink.put_LinkType

           INPUT
            LinkType            : esriHyperlinkType'''
        return super(IHyperlink, self).put_LinkType(LinkType)
    def Jump(self):
        '''Method IHyperlink.Jump'''
        return super(IHyperlink, self).Jump()
    FeatureId = property(get_FeatureId, put_FeatureId, None)
    Link = property(get_Link, put_Link, None)
    LinkType = property(get_LinkType, put_LinkType, None)

class IHyperlinkContainer(_esriCarto.IHyperlinkContainer):
    _IID = uuid.UUID('d1a02a0b-2113-11d3-9f98-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IHyperlinkContainer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HyperlinkCount(self):
        '''Method IHyperlinkContainer.get_HyperlinkCount

           OUTPUT
            Count               : long*'''
        return super(IHyperlinkContainer, self).get_HyperlinkCount()
    def get_Hyperlink(self, Index):
        '''Method IHyperlinkContainer.get_Hyperlink

           INPUT
            Index               : long

           OUTPUT
            Link                : IHyperlink**'''
        return super(IHyperlinkContainer, self).get_Hyperlink(Index)
    def putref_Hyperlink(self, Index, Link):
        '''Method IHyperlinkContainer.putref_Hyperlink

           INPUTS
            Index               : long
            Link                : IHyperlink*'''
        return super(IHyperlinkContainer, self).putref_Hyperlink(Index, Link)
    def AddHyperlink(self, Link):
        '''Method IHyperlinkContainer.AddHyperlink

           INPUT
            Link                : IHyperlink*'''
        return super(IHyperlinkContainer, self).AddHyperlink(Link)
    def RemoveHyperlink(self, Index):
        '''Method IHyperlinkContainer.RemoveHyperlink

           INPUT
            Index               : long'''
        return super(IHyperlinkContainer, self).RemoveHyperlink(Index)
    Hyperlink = property(None, putref_Hyperlink, None)
    HyperlinkCount = property(get_HyperlinkCount, None, None)
    Hyperlink = IndexProperty(get_Hyperlink, None)

class IHotlinkContainer(_esriCarto.IHotlinkContainer):
    _IID = uuid.UUID('d1a02a0c-2113-11d3-9f98-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IHotlinkContainer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HotlinkField(self):
        '''Method IHotlinkContainer.get_HotlinkField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IHotlinkContainer, self).get_HotlinkField()
    def put_HotlinkField(self, FieldName):
        '''Method IHotlinkContainer.put_HotlinkField

           INPUT
            FieldName           : BSTR'''
        return super(IHotlinkContainer, self).put_HotlinkField(FieldName)
    def get_HotlinkType(self):
        '''Method IHotlinkContainer.get_HotlinkType

           OUTPUT
            LinkType            : esriHyperlinkType*'''
        return super(IHotlinkContainer, self).get_HotlinkType()
    def put_HotlinkType(self, LinkType):
        '''Method IHotlinkContainer.put_HotlinkType

           INPUT
            LinkType            : esriHyperlinkType'''
        return super(IHotlinkContainer, self).put_HotlinkType(LinkType)
    HotlinkField = property(get_HotlinkField, put_HotlinkField, None)
    HotlinkType = property(get_HotlinkType, put_HotlinkType, None)

class IFeatureExportInfoGenerator(_esriCarto.IFeatureExportInfoGenerator):
    _IID = uuid.UUID('2b13a65c-4e76-4ff5-8de4-cec8604ba8e5')

    def __init__(self, *args, **kw):
        super(IFeatureExportInfoGenerator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_LayerFields(self, _arg1):
        '''Method IFeatureExportInfoGenerator.putref_LayerFields

           INPUT
            _arg1               : ILayerFields*'''
        return super(IFeatureExportInfoGenerator, self).putref_LayerFields(_arg1)
    def putref_HyperlinkContainer(self, _arg1):
        '''Method IFeatureExportInfoGenerator.putref_HyperlinkContainer

           INPUT
            _arg1               : IHyperlinkContainer*'''
        return super(IFeatureExportInfoGenerator, self).putref_HyperlinkContainer(_arg1)
    def putref_HotlinkContainer(self, _arg1):
        '''Method IFeatureExportInfoGenerator.putref_HotlinkContainer

           INPUT
            _arg1               : IHotlinkContainer*'''
        return super(IFeatureExportInfoGenerator, self).putref_HotlinkContainer(_arg1)
    def PrepareExportFilter(self, fc, Filter):
        '''Method IFeatureExportInfoGenerator.PrepareExportFilter

           INPUTS
            fc                  : IFeatureClass*
            Filter              : IQueryFilter*'''
        return super(IFeatureExportInfoGenerator, self).PrepareExportFilter(fc, Filter)
    def GenerateFeatureInfo(self, Feature, Display):
        '''Method IFeatureExportInfoGenerator.GenerateFeatureInfo

           INPUTS
            Feature             : IFeature*
            Display             : IDisplay*'''
        return super(IFeatureExportInfoGenerator, self).GenerateFeatureInfo(Feature, Display)
    def GenerateHyperlinkInfo(self, Feature, Display):
        '''Method IFeatureExportInfoGenerator.GenerateHyperlinkInfo

           INPUTS
            Feature             : IFeature*
            Display             : IDisplay*'''
        return super(IFeatureExportInfoGenerator, self).GenerateHyperlinkInfo(Feature, Display)
    def BeginFeature(self, Feature, Display):
        '''Method IFeatureExportInfoGenerator.BeginFeature

           INPUTS
            Feature             : IFeature*
            Display             : IDisplay*'''
        return super(IFeatureExportInfoGenerator, self).BeginFeature(Feature, Display)
    def EndFeature(self, Display):
        '''Method IFeatureExportInfoGenerator.EndFeature

           INPUT
            Display             : IDisplay*'''
        return super(IFeatureExportInfoGenerator, self).EndFeature(Display)
    def BeginFeatureAttributes(self, Display):
        '''Method IFeatureExportInfoGenerator.BeginFeatureAttributes

           INPUT
            Display             : IDisplay*'''
        return super(IFeatureExportInfoGenerator, self).BeginFeatureAttributes(Display)
    def AddFeatureAttribute(self, Display, FieldType, FieldName, fieldValue):
        '''Method IFeatureExportInfoGenerator.AddFeatureAttribute

           INPUTS
            Display             : IDisplay*
            FieldType           : esriFieldType
            FieldName           : BSTR
            fieldValue          : BSTR'''
        return super(IFeatureExportInfoGenerator, self).AddFeatureAttribute(Display, FieldType, FieldName, fieldValue)
    def EndFeatureAttributes(self, Display):
        '''Method IFeatureExportInfoGenerator.EndFeatureAttributes

           INPUT
            Display             : IDisplay*'''
        return super(IFeatureExportInfoGenerator, self).EndFeatureAttributes(Display)
    HotlinkContainer = property(None, putref_HotlinkContainer, None)
    HyperlinkContainer = property(None, putref_HyperlinkContainer, None)
    LayerFields = property(None, putref_LayerFields, None)

class IExportSupport(_esriCarto.IExportSupport):
    _IID = uuid.UUID('f6448010-3cc8-435e-b042-540e9a328f3b')

    def __init__(self, *args, **kw):
        super(IExportSupport, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_ExportInfo(self, _arg1):
        '''Method IExportSupport.putref_ExportInfo

           INPUT
            _arg1               : IFeatureExportInfoGenerator*'''
        return super(IExportSupport, self).putref_ExportInfo(_arg1)
    ExportInfo = property(None, putref_ExportInfo, None)

class IFeatureRenderer(_esriCarto.IFeatureRenderer):
    _IID = uuid.UUID('40a9e884-5533-11d0-98be-00805f7ced21')

    def __init__(self, *args, **kw):
        super(IFeatureRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def CanRender(self, featClass, Display):
        '''Method IFeatureRenderer.CanRender

           INPUTS
            featClass           : IFeatureClass*
            Display             : IDisplay*

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(IFeatureRenderer, self).CanRender(featClass, Display)
    def PrepareFilter(self, fc, queryFilter):
        '''Method IFeatureRenderer.PrepareFilter

           INPUTS
            fc                  : IFeatureClass*
            queryFilter         : IQueryFilter*'''
        return super(IFeatureRenderer, self).PrepareFilter(fc, queryFilter)
    def Draw(self, Cursor, DrawPhase, Display, TrackCancel):
        '''Method IFeatureRenderer.Draw

           INPUTS
            Cursor              : IFeatureCursor*
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IFeatureRenderer, self).Draw(Cursor, DrawPhase, Display, TrackCancel)
    def get_SymbolByFeature(self, Feature):
        '''Method IFeatureRenderer.get_SymbolByFeature

           INPUT
            Feature             : IFeature*

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IFeatureRenderer, self).get_SymbolByFeature(Feature)
    def get_RenderPhase(self, DrawPhase):
        '''Method IFeatureRenderer.get_RenderPhase

           INPUT
            DrawPhase           : esriDrawPhase

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(IFeatureRenderer, self).get_RenderPhase(DrawPhase)
    def putref_ExclusionSet(self, _arg1):
        '''Method IFeatureRenderer.putref_ExclusionSet

           INPUT
            _arg1               : IFeatureIDSet*'''
        return super(IFeatureRenderer, self).putref_ExclusionSet(_arg1)
    ExclusionSet = property(None, putref_ExclusionSet, None)
    RenderPhase = IndexProperty(get_RenderPhase, None)
    SymbolByFeature = IndexProperty(get_SymbolByFeature, None)

class IFeatureRendererUpdate(_esriCarto.IFeatureRendererUpdate):
    _IID = uuid.UUID('735c4d99-e28d-4ad4-b5b9-a12c1d8319fc')
    def Update(self, pFeatureLayer):
        '''Method IFeatureRendererUpdate.Update

           INPUT
            pFeatureLayer       : IFeatureLayer*'''
        return super(IFeatureRendererUpdate, self).Update(pFeatureLayer)

class IClassBreaksUIProperties(_esriCarto.IClassBreaksUIProperties):
    _IID = uuid.UUID('427788f2-31fe-11d2-aaf0-00c04fa334b3')

    def __init__(self, *args, **kw):
        super(IClassBreaksUIProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LowBreak(self, Index):
        '''Method IClassBreaksUIProperties.get_LowBreak

           INPUT
            Index               : long

           OUTPUT
            Value               : double*'''
        return super(IClassBreaksUIProperties, self).get_LowBreak(Index)
    def put_LowBreak(self, Index, Value):
        '''Method IClassBreaksUIProperties.put_LowBreak

           INPUTS
            Index               : long
            Value               : double'''
        return super(IClassBreaksUIProperties, self).put_LowBreak(Index, Value)
    def get_ColorRamp(self):
        '''Method IClassBreaksUIProperties.get_ColorRamp

           OUTPUT
            ColorRamp           : BSTR*'''
        return super(IClassBreaksUIProperties, self).get_ColorRamp()
    def put_ColorRamp(self, ColorRamp):
        '''Method IClassBreaksUIProperties.put_ColorRamp

           INPUT
            ColorRamp           : BSTR'''
        return super(IClassBreaksUIProperties, self).put_ColorRamp(ColorRamp)
    def get_Method(self):
        '''Method IClassBreaksUIProperties.get_Method

           OUTPUT
            clsid               : IUID**'''
        return super(IClassBreaksUIProperties, self).get_Method()
    def putref_Method(self, clsid):
        '''Method IClassBreaksUIProperties.putref_Method

           INPUT
            clsid               : IUID*'''
        return super(IClassBreaksUIProperties, self).putref_Method(clsid)
    def get_NumberFormat(self):
        '''Method IClassBreaksUIProperties.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IClassBreaksUIProperties, self).get_NumberFormat()
    def putref_NumberFormat(self, Format):
        '''Method IClassBreaksUIProperties.putref_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IClassBreaksUIProperties, self).putref_NumberFormat(Format)
    def get_ShowClassGaps(self):
        '''Method IClassBreaksUIProperties.get_ShowClassGaps

           OUTPUT
            showGaps            : VARIANT_BOOL*'''
        return super(IClassBreaksUIProperties, self).get_ShowClassGaps()
    def put_ShowClassGaps(self, showGaps):
        '''Method IClassBreaksUIProperties.put_ShowClassGaps

           INPUT
            showGaps            : VARIANT_BOOL'''
        return super(IClassBreaksUIProperties, self).put_ShowClassGaps(showGaps)
    def get_DeviationInterval(self):
        '''Method IClassBreaksUIProperties.get_DeviationInterval

           OUTPUT
            Interval            : double*'''
        return super(IClassBreaksUIProperties, self).get_DeviationInterval()
    def put_DeviationInterval(self, Interval):
        '''Method IClassBreaksUIProperties.put_DeviationInterval

           INPUT
            Interval            : double'''
        return super(IClassBreaksUIProperties, self).put_DeviationInterval(Interval)
    ColorRamp = property(get_ColorRamp, put_ColorRamp, None)
    DeviationInterval = property(get_DeviationInterval, put_DeviationInterval, None)
    LowBreak = property(None, put_LowBreak, None)
    Method = property(get_Method, putref_Method, None)
    NumberFormat = property(get_NumberFormat, putref_NumberFormat, None)
    ShowClassGaps = property(get_ShowClassGaps, put_ShowClassGaps, None)
    LowBreak = IndexProperty(get_LowBreak, None)

class IClassBreaksUIProperties2(_esriCarto.IClassBreaksUIProperties2):
    _IID = uuid.UUID('9e4f9561-af25-4c61-bf8a-9c5477e4437b')

    def __init__(self, *args, **kw):
        super(IClassBreaksUIProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ColorRamp(self):
        '''Method IClassBreaksUIProperties2.get_ColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IClassBreaksUIProperties2, self).get_ColorRamp()
    def putref_ColorRamp(self, ppColorRamp):
        '''Method IClassBreaksUIProperties2.putref_ColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IClassBreaksUIProperties2, self).putref_ColorRamp(ppColorRamp)
    def get_FlipSymbols(self):
        '''Method IClassBreaksUIProperties2.get_FlipSymbols

           OUTPUT
            Ascending           : VARIANT_BOOL*'''
        return super(IClassBreaksUIProperties2, self).get_FlipSymbols()
    def put_FlipSymbols(self, Ascending):
        '''Method IClassBreaksUIProperties2.put_FlipSymbols

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(IClassBreaksUIProperties2, self).put_FlipSymbols(Ascending)
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)
    FlipSymbols = property(get_FlipSymbols, put_FlipSymbols, None)

class IDataSampling(_esriCarto.IDataSampling):
    _IID = uuid.UUID('4eab5690-8f9c-11d2-ab21-00c04fa334b3')

    def __init__(self, *args, **kw):
        super(IDataSampling, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MaxSampleSize(self):
        '''Method IDataSampling.get_MaxSampleSize

           OUTPUT
            Size                : long*'''
        return super(IDataSampling, self).get_MaxSampleSize()
    def put_MaxSampleSize(self, Size):
        '''Method IDataSampling.put_MaxSampleSize

           INPUT
            Size                : long'''
        return super(IDataSampling, self).put_MaxSampleSize(Size)
    def get_SamplingMethod(self):
        '''Method IDataSampling.get_SamplingMethod

           OUTPUT
            Method              : esriDataSampling*'''
        return super(IDataSampling, self).get_SamplingMethod()
    def put_SamplingMethod(self, Method):
        '''Method IDataSampling.put_SamplingMethod

           INPUT
            Method              : esriDataSampling'''
        return super(IDataSampling, self).put_SamplingMethod(Method)
    MaxSampleSize = property(get_MaxSampleSize, put_MaxSampleSize, None)
    SamplingMethod = property(get_SamplingMethod, put_SamplingMethod, None)

class IDataNormalization(_esriCarto.IDataNormalization):
    _IID = uuid.UUID('678d02a5-e3fa-11d3-9f7b-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(IDataNormalization, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NormalizationField(self):
        '''Method IDataNormalization.get_NormalizationField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDataNormalization, self).get_NormalizationField()
    def put_NormalizationField(self, FieldName):
        '''Method IDataNormalization.put_NormalizationField

           INPUT
            FieldName           : BSTR'''
        return super(IDataNormalization, self).put_NormalizationField(FieldName)
    def get_NormalizationFieldAlias(self):
        '''Method IDataNormalization.get_NormalizationFieldAlias

           OUTPUT
            Name                : BSTR*'''
        return super(IDataNormalization, self).get_NormalizationFieldAlias()
    def put_NormalizationFieldAlias(self, Name):
        '''Method IDataNormalization.put_NormalizationFieldAlias

           INPUT
            Name                : BSTR'''
        return super(IDataNormalization, self).put_NormalizationFieldAlias(Name)
    def get_NormalizationType(self):
        '''Method IDataNormalization.get_NormalizationType

           OUTPUT
            Type                : esriDataNormalization*'''
        return super(IDataNormalization, self).get_NormalizationType()
    def put_NormalizationType(self, Type):
        '''Method IDataNormalization.put_NormalizationType

           INPUT
            Type                : esriDataNormalization'''
        return super(IDataNormalization, self).put_NormalizationType(Type)
    def get_NormalizationTotal(self):
        '''Method IDataNormalization.get_NormalizationTotal

           OUTPUT
            Value               : double*'''
        return super(IDataNormalization, self).get_NormalizationTotal()
    def put_NormalizationTotal(self, Value):
        '''Method IDataNormalization.put_NormalizationTotal

           INPUT
            Value               : double'''
        return super(IDataNormalization, self).put_NormalizationTotal(Value)
    NormalizationField = property(get_NormalizationField, put_NormalizationField, None)
    NormalizationFieldAlias = property(get_NormalizationFieldAlias, put_NormalizationFieldAlias, None)
    NormalizationTotal = property(get_NormalizationTotal, put_NormalizationTotal, None)
    NormalizationType = property(get_NormalizationType, put_NormalizationType, None)

class IProportionalSymbolRenderer(_esriCarto.IProportionalSymbolRenderer):
    _IID = uuid.UUID('ec45bfa6-8efc-11d2-ab21-00c04fa334b3')

    def __init__(self, *args, **kw):
        super(IProportionalSymbolRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Field(self):
        '''Method IProportionalSymbolRenderer.get_Field

           OUTPUT
            Field               : BSTR*'''
        return super(IProportionalSymbolRenderer, self).get_Field()
    def put_Field(self, Field):
        '''Method IProportionalSymbolRenderer.put_Field

           INPUT
            Field               : BSTR'''
        return super(IProportionalSymbolRenderer, self).put_Field(Field)
    def get_NormField(self):
        '''Method IProportionalSymbolRenderer.get_NormField

           OUTPUT
            Field               : BSTR*'''
        return super(IProportionalSymbolRenderer, self).get_NormField()
    def put_NormField(self, Field):
        '''Method IProportionalSymbolRenderer.put_NormField

           INPUT
            Field               : BSTR'''
        return super(IProportionalSymbolRenderer, self).put_NormField(Field)
    def put_MaxDataValue(self, _arg1):
        '''Method IProportionalSymbolRenderer.put_MaxDataValue

           INPUT
            _arg1               : double'''
        return super(IProportionalSymbolRenderer, self).put_MaxDataValue(_arg1)
    def put_MinDataValue(self, _arg1):
        '''Method IProportionalSymbolRenderer.put_MinDataValue

           INPUT
            _arg1               : double'''
        return super(IProportionalSymbolRenderer, self).put_MinDataValue(_arg1)
    def get_MinSymbol(self):
        '''Method IProportionalSymbolRenderer.get_MinSymbol

           OUTPUT
            sym                 : ISymbol**'''
        return super(IProportionalSymbolRenderer, self).get_MinSymbol()
    def put_MinSymbol(self, sym):
        '''Method IProportionalSymbolRenderer.put_MinSymbol

           INPUT
            sym                 : ISymbol*'''
        return super(IProportionalSymbolRenderer, self).put_MinSymbol(sym)
    def get_ValueUnit(self):
        '''Method IProportionalSymbolRenderer.get_ValueUnit

           OUTPUT
            unit                : esriUnits*'''
        return super(IProportionalSymbolRenderer, self).get_ValueUnit()
    def put_ValueUnit(self, unit):
        '''Method IProportionalSymbolRenderer.put_ValueUnit

           INPUT
            unit                : esriUnits'''
        return super(IProportionalSymbolRenderer, self).put_ValueUnit(unit)
    def get_ValueRepresentation(self):
        '''Method IProportionalSymbolRenderer.get_ValueRepresentation

           OUTPUT
            rep                 : esriValueRepresentations*'''
        return super(IProportionalSymbolRenderer, self).get_ValueRepresentation()
    def put_ValueRepresentation(self, rep):
        '''Method IProportionalSymbolRenderer.put_ValueRepresentation

           INPUT
            rep                 : esriValueRepresentations'''
        return super(IProportionalSymbolRenderer, self).put_ValueRepresentation(rep)
    def get_FlanneryCompensation(self):
        '''Method IProportionalSymbolRenderer.get_FlanneryCompensation

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IProportionalSymbolRenderer, self).get_FlanneryCompensation()
    def put_FlanneryCompensation(self, flag):
        '''Method IProportionalSymbolRenderer.put_FlanneryCompensation

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IProportionalSymbolRenderer, self).put_FlanneryCompensation(flag)
    def get_LegendSymbolCount(self):
        '''Method IProportionalSymbolRenderer.get_LegendSymbolCount

           OUTPUT
            num                 : long*'''
        return super(IProportionalSymbolRenderer, self).get_LegendSymbolCount()
    def put_LegendSymbolCount(self, num):
        '''Method IProportionalSymbolRenderer.put_LegendSymbolCount

           INPUT
            num                 : long'''
        return super(IProportionalSymbolRenderer, self).put_LegendSymbolCount(num)
    def get_BackgroundSymbol(self):
        '''Method IProportionalSymbolRenderer.get_BackgroundSymbol

           OUTPUT
            sym                 : IFillSymbol**'''
        return super(IProportionalSymbolRenderer, self).get_BackgroundSymbol()
    def put_BackgroundSymbol(self, sym):
        '''Method IProportionalSymbolRenderer.put_BackgroundSymbol

           INPUT
            sym                 : IFillSymbol*'''
        return super(IProportionalSymbolRenderer, self).put_BackgroundSymbol(sym)
    def CreateLegendSymbols(self):
        '''Method IProportionalSymbolRenderer.CreateLegendSymbols'''
        return super(IProportionalSymbolRenderer, self).CreateLegendSymbols()
    BackgroundSymbol = property(get_BackgroundSymbol, put_BackgroundSymbol, None)
    Field = property(get_Field, put_Field, None)
    FlanneryCompensation = property(get_FlanneryCompensation, put_FlanneryCompensation, None)
    LegendSymbolCount = property(get_LegendSymbolCount, put_LegendSymbolCount, None)
    MaxDataValue = property(None, put_MaxDataValue, None)
    MinDataValue = property(None, put_MinDataValue, None)
    MinSymbol = property(get_MinSymbol, put_MinSymbol, None)
    NormField = property(get_NormField, put_NormField, None)
    ValueRepresentation = property(get_ValueRepresentation, put_ValueRepresentation, None)
    ValueUnit = property(get_ValueUnit, put_ValueUnit, None)

class ITransparencyRenderer(_esriCarto.ITransparencyRenderer):
    _IID = uuid.UUID('fb20665d-db1c-11d2-9f2e-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(ITransparencyRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TransparencyField(self):
        '''Method ITransparencyRenderer.get_TransparencyField

           OUTPUT
            FieldName           : BSTR*'''
        return super(ITransparencyRenderer, self).get_TransparencyField()
    def put_TransparencyField(self, FieldName):
        '''Method ITransparencyRenderer.put_TransparencyField

           INPUT
            FieldName           : BSTR'''
        return super(ITransparencyRenderer, self).put_TransparencyField(FieldName)
    TransparencyField = property(get_TransparencyField, put_TransparencyField, None)

class ILevelRenderer(_esriCarto.ILevelRenderer):
    _IID = uuid.UUID('dc3d8097-c1ed-11d2-9f21-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(ILevelRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CurrentDrawLevel(self, _arg1):
        '''Method ILevelRenderer.put_CurrentDrawLevel

           INPUT
            _arg1               : long'''
        return super(ILevelRenderer, self).put_CurrentDrawLevel(_arg1)
    def get_LevelArray(self):
        '''Method ILevelRenderer.get_LevelArray

           OUTPUT
            levels              : VARIANT*'''
        return super(ILevelRenderer, self).get_LevelArray()
    CurrentDrawLevel = property(None, put_CurrentDrawLevel, None)
    LevelArray = property(get_LevelArray, None, None)

class ILookupSymbol(_esriCarto.ILookupSymbol):
    _IID = uuid.UUID('736a377d-a1eb-4ce4-84b9-90f9588374c2')
    def LookupSymbol(self, firstPass, Feature):
        '''Method ILookupSymbol.LookupSymbol

           INPUTS
            firstPass           : VARIANT_BOOL
            Feature             : IFeature*

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ILookupSymbol, self).LookupSymbol(firstPass, Feature)
    def ResetLookupSymbol(self, Symbol):
        '''Method ILookupSymbol.ResetLookupSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ILookupSymbol, self).ResetLookupSymbol(Symbol)

class ILookupLegendClass(_esriCarto.ILookupLegendClass):
    _IID = uuid.UUID('bdb4bf86-8691-4f1c-b009-42e39035f40e')
    def LookupLegendClass(self, Feature):
        '''Method ILookupLegendClass.LookupLegendClass

           INPUT
            Feature             : IFeature*

           OUTPUTS
            legendGroupIdx      : long*
            legendClassIdx      : long*'''
        return super(ILookupLegendClass, self).LookupLegendClass(Feature)
    def get_FieldCount(self):
        '''Method ILookupLegendClass.get_FieldCount

           OUTPUT
            Count               : long*'''
        return super(ILookupLegendClass, self).get_FieldCount()
    def get_Field(self, Index):
        '''Method ILookupLegendClass.get_Field

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(ILookupLegendClass, self).get_Field(Index)
    FieldCount = property(get_FieldCount, None, None)
    Field = IndexProperty(get_Field, None)

class IBivariateRenderer(_esriCarto.IBivariateRenderer):
    _IID = uuid.UUID('ae1248b5-cd1e-11d2-9f25-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(IBivariateRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MainRenderer(self):
        '''Method IBivariateRenderer.get_MainRenderer

           OUTPUT
            Renderer            : IFeatureRenderer**'''
        return super(IBivariateRenderer, self).get_MainRenderer()
    def putref_MainRenderer(self, Renderer):
        '''Method IBivariateRenderer.putref_MainRenderer

           INPUT
            Renderer            : IFeatureRenderer*'''
        return super(IBivariateRenderer, self).putref_MainRenderer(Renderer)
    def get_VariationRenderer(self):
        '''Method IBivariateRenderer.get_VariationRenderer

           OUTPUT
            Renderer            : IFeatureRenderer**'''
        return super(IBivariateRenderer, self).get_VariationRenderer()
    def putref_VariationRenderer(self, Renderer):
        '''Method IBivariateRenderer.putref_VariationRenderer

           INPUT
            Renderer            : IFeatureRenderer*'''
        return super(IBivariateRenderer, self).putref_VariationRenderer(Renderer)
    def CreateLegend(self):
        '''Method IBivariateRenderer.CreateLegend'''
        return super(IBivariateRenderer, self).CreateLegend()
    MainRenderer = property(get_MainRenderer, putref_MainRenderer, None)
    VariationRenderer = property(get_VariationRenderer, putref_VariationRenderer, None)

class IScaleDependentRenderer(_esriCarto.IScaleDependentRenderer):
    _IID = uuid.UUID('c86b3d95-ed80-11d0-8bba-080009ee4e41')

    def __init__(self, *args, **kw):
        super(IScaleDependentRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RendererCount(self):
        '''Method IScaleDependentRenderer.get_RendererCount

           OUTPUT
            RendererCount       : long*'''
        return super(IScaleDependentRenderer, self).get_RendererCount()
    def put_RendererCount(self, RendererCount):
        '''Method IScaleDependentRenderer.put_RendererCount

           INPUT
            RendererCount       : long'''
        return super(IScaleDependentRenderer, self).put_RendererCount(RendererCount)
    def get_Renderer(self, Index):
        '''Method IScaleDependentRenderer.get_Renderer

           INPUT
            Index               : long

           OUTPUT
            Renderer            : IUnknown**'''
        return super(IScaleDependentRenderer, self).get_Renderer(Index)
    def putref_Renderer(self, Index, Renderer):
        '''Method IScaleDependentRenderer.putref_Renderer

           INPUTS
            Index               : long
            Renderer            : IUnknown*'''
        return super(IScaleDependentRenderer, self).putref_Renderer(Index, Renderer)
    def get_Break(self, Index):
        '''Method IScaleDependentRenderer.get_Break

           INPUT
            Index               : long

           OUTPUT
            breakValue          : double*'''
        return super(IScaleDependentRenderer, self).get_Break(Index)
    def put_Break(self, Index, breakValue):
        '''Method IScaleDependentRenderer.put_Break

           INPUTS
            Index               : long
            breakValue          : double'''
        return super(IScaleDependentRenderer, self).put_Break(Index, breakValue)
    def AddRenderer(self, Renderer):
        '''Method IScaleDependentRenderer.AddRenderer

           INPUT
            Renderer            : IFeatureRenderer*'''
        return super(IScaleDependentRenderer, self).AddRenderer(Renderer)
    def RemoveRenderer(self, Renderer):
        '''Method IScaleDependentRenderer.RemoveRenderer

           INPUT
            Renderer            : IFeatureRenderer*'''
        return super(IScaleDependentRenderer, self).RemoveRenderer(Renderer)
    def MoveRenderer(self, Renderer, toIndex):
        '''Method IScaleDependentRenderer.MoveRenderer

           INPUTS
            Renderer            : IFeatureRenderer*
            toIndex             : long'''
        return super(IScaleDependentRenderer, self).MoveRenderer(Renderer, toIndex)
    Break = property(None, put_Break, None)
    Renderer = property(None, putref_Renderer, None)
    RendererCount = property(get_RendererCount, put_RendererCount, None)
    Break = IndexProperty(get_Break, None)
    Renderer = IndexProperty(get_Renderer, None)

class IRendererFields(_esriCarto.IRendererFields):
    _IID = uuid.UUID('9c7776b8-0421-11d4-9f7c-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(IRendererFields, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FieldCount(self):
        '''Method IRendererFields.get_FieldCount

           OUTPUT
            Count               : long*'''
        return super(IRendererFields, self).get_FieldCount()
    def get_Field(self, Index):
        '''Method IRendererFields.get_Field

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IRendererFields, self).get_Field(Index)
    def put_Field(self, Index, Name):
        '''Method IRendererFields.put_Field

           INPUTS
            Index               : long
            Name                : BSTR'''
        return super(IRendererFields, self).put_Field(Index, Name)
    def get_FieldAlias(self, Index):
        '''Method IRendererFields.get_FieldAlias

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IRendererFields, self).get_FieldAlias(Index)
    def put_FieldAlias(self, Index, Name):
        '''Method IRendererFields.put_FieldAlias

           INPUTS
            Index               : long
            Name                : BSTR'''
        return super(IRendererFields, self).put_FieldAlias(Index, Name)
    def AddField(self, Name, Alias):
        '''Method IRendererFields.AddField

           INPUTS
            Name                : BSTR
            Alias               : BSTR'''
        return super(IRendererFields, self).AddField(Name, Alias)
    def DeleteField(self, Name):
        '''Method IRendererFields.DeleteField

           INPUT
            Name                : BSTR'''
        return super(IRendererFields, self).DeleteField(Name)
    def ClearFields(self):
        '''Method IRendererFields.ClearFields'''
        return super(IRendererFields, self).ClearFields()
    Field = property(None, put_Field, None)
    FieldAlias = property(None, put_FieldAlias, None)
    FieldCount = property(get_FieldCount, None, None)
    Field = IndexProperty(get_Field, None)
    FieldAlias = IndexProperty(get_FieldAlias, None)

class IChartRenderer(_esriCarto.IChartRenderer):
    _IID = uuid.UUID('22a98367-c48d-11d3-9f7a-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(IChartRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FieldTotal(self, Index):
        '''Method IChartRenderer.get_FieldTotal

           INPUT
            Index               : long

           OUTPUT
            total               : double*'''
        return super(IChartRenderer, self).get_FieldTotal(Index)
    def put_FieldTotal(self, Index, total):
        '''Method IChartRenderer.put_FieldTotal

           INPUTS
            Index               : long
            total               : double'''
        return super(IChartRenderer, self).put_FieldTotal(Index, total)
    def get_ChartSymbol(self):
        '''Method IChartRenderer.get_ChartSymbol

           OUTPUT
            Symbol              : IChartSymbol**'''
        return super(IChartRenderer, self).get_ChartSymbol()
    def putref_ChartSymbol(self, Symbol):
        '''Method IChartRenderer.putref_ChartSymbol

           INPUT
            Symbol              : IChartSymbol*'''
        return super(IChartRenderer, self).putref_ChartSymbol(Symbol)
    def get_BaseSymbol(self):
        '''Method IChartRenderer.get_BaseSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IChartRenderer, self).get_BaseSymbol()
    def putref_BaseSymbol(self, Symbol):
        '''Method IChartRenderer.putref_BaseSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(IChartRenderer, self).putref_BaseSymbol(Symbol)
    def get_ColorScheme(self):
        '''Method IChartRenderer.get_ColorScheme

           OUTPUT
            Name                : BSTR*'''
        return super(IChartRenderer, self).get_ColorScheme()
    def put_ColorScheme(self, Name):
        '''Method IChartRenderer.put_ColorScheme

           INPUT
            Name                : BSTR'''
        return super(IChartRenderer, self).put_ColorScheme(Name)
    def get_Label(self):
        '''Method IChartRenderer.get_Label

           OUTPUT
            Name                : BSTR*'''
        return super(IChartRenderer, self).get_Label()
    def put_Label(self, Name):
        '''Method IChartRenderer.put_Label

           INPUT
            Name                : BSTR'''
        return super(IChartRenderer, self).put_Label(Name)
    def get_UseOverposter(self):
        '''Method IChartRenderer.get_UseOverposter

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IChartRenderer, self).get_UseOverposter()
    def put_UseOverposter(self, flag):
        '''Method IChartRenderer.put_UseOverposter

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IChartRenderer, self).put_UseOverposter(flag)
    def CreateLegend(self):
        '''Method IChartRenderer.CreateLegend'''
        return super(IChartRenderer, self).CreateLegend()
    BaseSymbol = property(get_BaseSymbol, putref_BaseSymbol, None)
    ChartSymbol = property(get_ChartSymbol, putref_ChartSymbol, None)
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)
    FieldTotal = property(None, put_FieldTotal, None)
    Label = property(get_Label, put_Label, None)
    UseOverposter = property(get_UseOverposter, put_UseOverposter, None)
    FieldTotal = IndexProperty(get_FieldTotal, None)

class IPieChartRenderer(_esriCarto.IPieChartRenderer):
    _IID = uuid.UUID('22a98368-c48d-11d3-9f7a-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(IPieChartRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ProportionalField(self):
        '''Method IPieChartRenderer.get_ProportionalField

           OUTPUT
            Name                : BSTR*'''
        return super(IPieChartRenderer, self).get_ProportionalField()
    def put_ProportionalField(self, Name):
        '''Method IPieChartRenderer.put_ProportionalField

           INPUT
            Name                : BSTR'''
        return super(IPieChartRenderer, self).put_ProportionalField(Name)
    def get_ProportionalFieldAlias(self):
        '''Method IPieChartRenderer.get_ProportionalFieldAlias

           OUTPUT
            Name                : BSTR*'''
        return super(IPieChartRenderer, self).get_ProportionalFieldAlias()
    def put_ProportionalFieldAlias(self, Name):
        '''Method IPieChartRenderer.put_ProportionalFieldAlias

           INPUT
            Name                : BSTR'''
        return super(IPieChartRenderer, self).put_ProportionalFieldAlias(Name)
    def get_ProportionalBySum(self):
        '''Method IPieChartRenderer.get_ProportionalBySum

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPieChartRenderer, self).get_ProportionalBySum()
    def put_ProportionalBySum(self, flag):
        '''Method IPieChartRenderer.put_ProportionalBySum

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IPieChartRenderer, self).put_ProportionalBySum(flag)
    def get_MinValue(self):
        '''Method IPieChartRenderer.get_MinValue

           OUTPUT
            Value               : double*'''
        return super(IPieChartRenderer, self).get_MinValue()
    def put_MinValue(self, Value):
        '''Method IPieChartRenderer.put_MinValue

           INPUT
            Value               : double'''
        return super(IPieChartRenderer, self).put_MinValue(Value)
    def get_MinSize(self):
        '''Method IPieChartRenderer.get_MinSize

           OUTPUT
            points              : double*'''
        return super(IPieChartRenderer, self).get_MinSize()
    def put_MinSize(self, points):
        '''Method IPieChartRenderer.put_MinSize

           INPUT
            points              : double'''
        return super(IPieChartRenderer, self).put_MinSize(points)
    def get_FlanneryCompensation(self):
        '''Method IPieChartRenderer.get_FlanneryCompensation

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IPieChartRenderer, self).get_FlanneryCompensation()
    def put_FlanneryCompensation(self, flag):
        '''Method IPieChartRenderer.put_FlanneryCompensation

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IPieChartRenderer, self).put_FlanneryCompensation(flag)
    FlanneryCompensation = property(get_FlanneryCompensation, put_FlanneryCompensation, None)
    MinSize = property(get_MinSize, put_MinSize, None)
    MinValue = property(get_MinValue, put_MinValue, None)
    ProportionalBySum = property(get_ProportionalBySum, put_ProportionalBySum, None)
    ProportionalField = property(get_ProportionalField, put_ProportionalField, None)
    ProportionalFieldAlias = property(get_ProportionalFieldAlias, put_ProportionalFieldAlias, None)

class ICalcRendererValues(_esriCarto.ICalcRendererValues):
    _IID = uuid.UUID('4b62f73e-0502-11d4-9f7c-00c04f6bc709')
    def SetData(self, Layer, Renderer):
        '''Method ICalcRendererValues.SetData

           INPUTS
            Layer               : IFeatureLayer*
            Renderer            : IFeatureRenderer*'''
        return super(ICalcRendererValues, self).SetData(Layer, Renderer)
    def CalcMinMax(self):
        '''Method ICalcRendererValues.CalcMinMax

           OUTPUTS
            MinValue            : double*
            maxValue            : double*'''
        return super(ICalcRendererValues, self).CalcMinMax()
    def SetDirty(self):
        '''Method ICalcRendererValues.SetDirty'''
        return super(ICalcRendererValues, self).SetDirty()
    def SetMinMax(self, MinValue, maxValue):
        '''Method ICalcRendererValues.SetMinMax

           INPUTS
            MinValue            : double
            maxValue            : double'''
        return super(ICalcRendererValues, self).SetMinMax(MinValue, maxValue)
    def GetFieldTotals(self):
        '''Method ICalcRendererValues.GetFieldTotals

           OUTPUT
            doubleArrayTotals   : VARIANT*'''
        return super(ICalcRendererValues, self).GetFieldTotals()

class ICalcRendererValues2(_esriCarto.ICalcRendererValues2):
    _IID = uuid.UUID('b5e535a7-a9ce-4678-b554-e2e96b634b53')
    def CalcMinMaxExt(self, positiveValuesOnly):
        '''Method ICalcRendererValues2.CalcMinMaxExt

           INPUT
            positiveValuesOnly  : VARIANT_BOOL

           OUTPUTS
            MinValue            : double*
            maxValue            : double*'''
        return super(ICalcRendererValues2, self).CalcMinMaxExt(positiveValuesOnly)
    def SetData(self, Layer, Renderer):
        '''Method ICalcRendererValues.SetData (from ICalcRendererValues)

           INPUTS
            Layer               : IFeatureLayer*
            Renderer            : IFeatureRenderer*'''
        return super(ICalcRendererValues2, self).SetData(Layer, Renderer)
    def CalcMinMax(self):
        '''Method ICalcRendererValues.CalcMinMax (from ICalcRendererValues)

           OUTPUTS
            MinValue            : double*
            maxValue            : double*'''
        return super(ICalcRendererValues2, self).CalcMinMax()
    def SetDirty(self):
        '''Method ICalcRendererValues.SetDirty (from ICalcRendererValues)'''
        return super(ICalcRendererValues2, self).SetDirty()
    def SetMinMax(self, MinValue, maxValue):
        '''Method ICalcRendererValues.SetMinMax (from ICalcRendererValues)

           INPUTS
            MinValue            : double
            maxValue            : double'''
        return super(ICalcRendererValues2, self).SetMinMax(MinValue, maxValue)
    def GetFieldTotals(self):
        '''Method ICalcRendererValues.GetFieldTotals (from ICalcRendererValues)

           OUTPUT
            doubleArrayTotals   : VARIANT*'''
        return super(ICalcRendererValues2, self).GetFieldTotals()

class IDotDensityRenderer(_esriCarto.IDotDensityRenderer):
    _IID = uuid.UUID('9c7776b7-0421-11d4-9f7c-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(IDotDensityRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DotDensitySymbol(self):
        '''Method IDotDensityRenderer.get_DotDensitySymbol

           OUTPUT
            Symbol              : IDotDensityFillSymbol**'''
        return super(IDotDensityRenderer, self).get_DotDensitySymbol()
    def putref_DotDensitySymbol(self, Symbol):
        '''Method IDotDensityRenderer.putref_DotDensitySymbol

           INPUT
            Symbol              : IDotDensityFillSymbol*'''
        return super(IDotDensityRenderer, self).putref_DotDensitySymbol(Symbol)
    def get_DotValue(self):
        '''Method IDotDensityRenderer.get_DotValue

           OUTPUT
            Value               : double*'''
        return super(IDotDensityRenderer, self).get_DotValue()
    def put_DotValue(self, Value):
        '''Method IDotDensityRenderer.put_DotValue

           INPUT
            Value               : double'''
        return super(IDotDensityRenderer, self).put_DotValue(Value)
    def get_ControlLayer(self):
        '''Method IDotDensityRenderer.get_ControlLayer

           OUTPUT
            Layer               : IFeatureLayer**'''
        return super(IDotDensityRenderer, self).get_ControlLayer()
    def putref_ControlLayer(self, Layer):
        '''Method IDotDensityRenderer.putref_ControlLayer

           INPUT
            Layer               : IFeatureLayer*'''
        return super(IDotDensityRenderer, self).putref_ControlLayer(Layer)
    def get_ColorScheme(self):
        '''Method IDotDensityRenderer.get_ColorScheme

           OUTPUT
            Name                : BSTR*'''
        return super(IDotDensityRenderer, self).get_ColorScheme()
    def put_ColorScheme(self, Name):
        '''Method IDotDensityRenderer.put_ColorScheme

           INPUT
            Name                : BSTR'''
        return super(IDotDensityRenderer, self).put_ColorScheme(Name)
    def CreateLegend(self):
        '''Method IDotDensityRenderer.CreateLegend'''
        return super(IDotDensityRenderer, self).CreateLegend()
    def put_MaintainSize(self, flag):
        '''Method IDotDensityRenderer.put_MaintainSize

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IDotDensityRenderer, self).put_MaintainSize(flag)
    def get_MaintainSize(self):
        '''Method IDotDensityRenderer.get_MaintainSize

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IDotDensityRenderer, self).get_MaintainSize()
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)
    ControlLayer = property(get_ControlLayer, putref_ControlLayer, None)
    DotDensitySymbol = property(get_DotDensitySymbol, putref_DotDensitySymbol, None)
    DotValue = property(get_DotValue, put_DotValue, None)
    MaintainSize = property(get_MaintainSize, put_MaintainSize, None)

class IDotDensityRenderer2(_esriCarto.IDotDensityRenderer2):
    _IID = uuid.UUID('f4f653c0-fca7-4a4c-83eb-d5b6c625e2ce')

    def __init__(self, *args, **kw):
        super(IDotDensityRenderer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_MaintainDensityBy(self, eMaintainDensityBy):
        '''Method IDotDensityRenderer2.put_MaintainDensityBy

           INPUT
            eMaintainDensityBy  : esriMaintainDensityBy'''
        return super(IDotDensityRenderer2, self).put_MaintainDensityBy(eMaintainDensityBy)
    def get_MaintainDensityBy(self):
        '''Method IDotDensityRenderer2.get_MaintainDensityBy

           OUTPUT
            eMaintainDensityBy  : esriMaintainDensityBy*'''
        return super(IDotDensityRenderer2, self).get_MaintainDensityBy()
    def get_DotDensitySymbol(self):
        '''Method IDotDensityRenderer.get_DotDensitySymbol (from IDotDensityRenderer)

           OUTPUT
            Symbol              : IDotDensityFillSymbol**'''
        return super(IDotDensityRenderer2, self).get_DotDensitySymbol()
    def putref_DotDensitySymbol(self, Symbol):
        '''Method IDotDensityRenderer.putref_DotDensitySymbol (from IDotDensityRenderer)

           INPUT
            Symbol              : IDotDensityFillSymbol*'''
        return super(IDotDensityRenderer2, self).putref_DotDensitySymbol(Symbol)
    def get_DotValue(self):
        '''Method IDotDensityRenderer.get_DotValue (from IDotDensityRenderer)

           OUTPUT
            Value               : double*'''
        return super(IDotDensityRenderer2, self).get_DotValue()
    def put_DotValue(self, Value):
        '''Method IDotDensityRenderer.put_DotValue (from IDotDensityRenderer)

           INPUT
            Value               : double'''
        return super(IDotDensityRenderer2, self).put_DotValue(Value)
    def get_ControlLayer(self):
        '''Method IDotDensityRenderer.get_ControlLayer (from IDotDensityRenderer)

           OUTPUT
            Layer               : IFeatureLayer**'''
        return super(IDotDensityRenderer2, self).get_ControlLayer()
    def putref_ControlLayer(self, Layer):
        '''Method IDotDensityRenderer.putref_ControlLayer (from IDotDensityRenderer)

           INPUT
            Layer               : IFeatureLayer*'''
        return super(IDotDensityRenderer2, self).putref_ControlLayer(Layer)
    def get_ColorScheme(self):
        '''Method IDotDensityRenderer.get_ColorScheme (from IDotDensityRenderer)

           OUTPUT
            Name                : BSTR*'''
        return super(IDotDensityRenderer2, self).get_ColorScheme()
    def put_ColorScheme(self, Name):
        '''Method IDotDensityRenderer.put_ColorScheme (from IDotDensityRenderer)

           INPUT
            Name                : BSTR'''
        return super(IDotDensityRenderer2, self).put_ColorScheme(Name)
    def CreateLegend(self):
        '''Method IDotDensityRenderer.CreateLegend (from IDotDensityRenderer)'''
        return super(IDotDensityRenderer2, self).CreateLegend()
    def put_MaintainSize(self, flag):
        '''Method IDotDensityRenderer.put_MaintainSize (from IDotDensityRenderer)

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IDotDensityRenderer2, self).put_MaintainSize(flag)
    def get_MaintainSize(self):
        '''Method IDotDensityRenderer.get_MaintainSize (from IDotDensityRenderer)

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IDotDensityRenderer2, self).get_MaintainSize()
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)
    ControlLayer = property(get_ControlLayer, putref_ControlLayer, None)
    DotDensitySymbol = property(get_DotDensitySymbol, putref_DotDensitySymbol, None)
    DotValue = property(get_DotValue, put_DotValue, None)
    MaintainDensityBy = property(get_MaintainDensityBy, put_MaintainDensityBy, None)
    MaintainSize = property(get_MaintainSize, put_MaintainSize, None)

class IDotDensityUIRenderer(_esriCarto.IDotDensityUIRenderer):
    _IID = uuid.UUID('90e8800d-148d-11d4-9f7d-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(IDotDensityUIRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MinDensity(self):
        '''Method IDotDensityUIRenderer.get_MinDensity

           OUTPUT
            Value               : double*'''
        return super(IDotDensityUIRenderer, self).get_MinDensity()
    def put_MinDensity(self, Value):
        '''Method IDotDensityUIRenderer.put_MinDensity

           INPUT
            Value               : double'''
        return super(IDotDensityUIRenderer, self).put_MinDensity(Value)
    def get_MinDensityArea(self):
        '''Method IDotDensityUIRenderer.get_MinDensityArea

           OUTPUT
            Value               : double*'''
        return super(IDotDensityUIRenderer, self).get_MinDensityArea()
    def put_MinDensityArea(self, Value):
        '''Method IDotDensityUIRenderer.put_MinDensityArea

           INPUT
            Value               : double'''
        return super(IDotDensityUIRenderer, self).put_MinDensityArea(Value)
    def get_MeanDensity(self):
        '''Method IDotDensityUIRenderer.get_MeanDensity

           OUTPUT
            Value               : double*'''
        return super(IDotDensityUIRenderer, self).get_MeanDensity()
    def put_MeanDensity(self, Value):
        '''Method IDotDensityUIRenderer.put_MeanDensity

           INPUT
            Value               : double'''
        return super(IDotDensityUIRenderer, self).put_MeanDensity(Value)
    def get_MeanArea(self):
        '''Method IDotDensityUIRenderer.get_MeanArea

           OUTPUT
            Value               : double*'''
        return super(IDotDensityUIRenderer, self).get_MeanArea()
    def put_MeanArea(self, Value):
        '''Method IDotDensityUIRenderer.put_MeanArea

           INPUT
            Value               : double'''
        return super(IDotDensityUIRenderer, self).put_MeanArea(Value)
    def get_MaxDensity(self):
        '''Method IDotDensityUIRenderer.get_MaxDensity

           OUTPUT
            Value               : double*'''
        return super(IDotDensityUIRenderer, self).get_MaxDensity()
    def put_MaxDensity(self, Value):
        '''Method IDotDensityUIRenderer.put_MaxDensity

           INPUT
            Value               : double'''
        return super(IDotDensityUIRenderer, self).put_MaxDensity(Value)
    def get_MaxDensityArea(self):
        '''Method IDotDensityUIRenderer.get_MaxDensityArea

           OUTPUT
            Value               : double*'''
        return super(IDotDensityUIRenderer, self).get_MaxDensityArea()
    def put_MaxDensityArea(self, Value):
        '''Method IDotDensityUIRenderer.put_MaxDensityArea

           INPUT
            Value               : double'''
        return super(IDotDensityUIRenderer, self).put_MaxDensityArea(Value)
    MaxDensity = property(get_MaxDensity, put_MaxDensity, None)
    MaxDensityArea = property(get_MaxDensityArea, put_MaxDensityArea, None)
    MeanArea = property(get_MeanArea, put_MeanArea, None)
    MeanDensity = property(get_MeanDensity, put_MeanDensity, None)
    MinDensity = property(get_MinDensity, put_MinDensity, None)
    MinDensityArea = property(get_MinDensityArea, put_MinDensityArea, None)

class IHorizontalLegendItem(_esriCarto.IHorizontalLegendItem):
    _IID = uuid.UUID('8a7a1786-79b2-11d2-87d5-0000f8751720')

    def __init__(self, *args, **kw):
        super(IHorizontalLegendItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Arrangement(self):
        '''Method IHorizontalLegendItem.get_Arrangement

           OUTPUT
            Arrangement         : esriLegendItemArrangement*'''
        return super(IHorizontalLegendItem, self).get_Arrangement()
    def put_Arrangement(self, Arrangement):
        '''Method IHorizontalLegendItem.put_Arrangement

           INPUT
            Arrangement         : esriLegendItemArrangement'''
        return super(IHorizontalLegendItem, self).put_Arrangement(Arrangement)
    Arrangement = property(get_Arrangement, put_Arrangement, None)

class IVerticalLegendItem(_esriCarto.IVerticalLegendItem):
    _IID = uuid.UUID('8a7a1787-79b2-11d2-87d5-0000f8751720')

    def __init__(self, *args, **kw):
        super(IVerticalLegendItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Arrangement(self):
        '''Method IVerticalLegendItem.get_Arrangement

           OUTPUT
            Arrangement         : esriLegendItemArrangement*'''
        return super(IVerticalLegendItem, self).get_Arrangement()
    def put_Arrangement(self, Arrangement):
        '''Method IVerticalLegendItem.put_Arrangement

           INPUT
            Arrangement         : esriLegendItemArrangement'''
        return super(IVerticalLegendItem, self).put_Arrangement(Arrangement)
    Arrangement = property(get_Arrangement, put_Arrangement, None)

class INestedLegendItem(_esriCarto.INestedLegendItem):
    _IID = uuid.UUID('3b09454d-c9d1-11d3-92fb-00600802e603')

    def __init__(self, *args, **kw):
        super(INestedLegendItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_OutlineSymbol(self, Symbol):
        '''Method INestedLegendItem.put_OutlineSymbol

           INPUT
            Symbol              : IFillSymbol*'''
        return super(INestedLegendItem, self).put_OutlineSymbol(Symbol)
    def get_OutlineSymbol(self):
        '''Method INestedLegendItem.get_OutlineSymbol

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(INestedLegendItem, self).get_OutlineSymbol()
    def put_LeaderSymbol(self, Symbol):
        '''Method INestedLegendItem.put_LeaderSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(INestedLegendItem, self).put_LeaderSymbol(Symbol)
    def get_LeaderSymbol(self):
        '''Method INestedLegendItem.get_LeaderSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(INestedLegendItem, self).get_LeaderSymbol()
    def put_LeaderOverhang(self, LeaderOverhang):
        '''Method INestedLegendItem.put_LeaderOverhang

           INPUT
            LeaderOverhang      : double'''
        return super(INestedLegendItem, self).put_LeaderOverhang(LeaderOverhang)
    def get_LeaderOverhang(self):
        '''Method INestedLegendItem.get_LeaderOverhang

           OUTPUT
            LeaderOverhang      : double*'''
        return super(INestedLegendItem, self).get_LeaderOverhang()
    def put_AutoLayout(self, AutoLayout):
        '''Method INestedLegendItem.put_AutoLayout

           INPUT
            AutoLayout          : VARIANT_BOOL'''
        return super(INestedLegendItem, self).put_AutoLayout(AutoLayout)
    def get_AutoLayout(self):
        '''Method INestedLegendItem.get_AutoLayout

           OUTPUT
            AutoLayout          : VARIANT_BOOL*'''
        return super(INestedLegendItem, self).get_AutoLayout()
    def put_LabelEnds(self, LabelEnds):
        '''Method INestedLegendItem.put_LabelEnds

           INPUT
            LabelEnds           : VARIANT_BOOL'''
        return super(INestedLegendItem, self).put_LabelEnds(LabelEnds)
    def get_LabelEnds(self):
        '''Method INestedLegendItem.get_LabelEnds

           OUTPUT
            LabelEnds           : VARIANT_BOOL*'''
        return super(INestedLegendItem, self).get_LabelEnds()
    def put_ShowOutlines(self, ShowOutlines):
        '''Method INestedLegendItem.put_ShowOutlines

           INPUT
            ShowOutlines        : VARIANT_BOOL'''
        return super(INestedLegendItem, self).put_ShowOutlines(ShowOutlines)
    def get_ShowOutlines(self):
        '''Method INestedLegendItem.get_ShowOutlines

           OUTPUT
            ShowOutlines        : VARIANT_BOOL*'''
        return super(INestedLegendItem, self).get_ShowOutlines()
    def get_HorizontalAlignment(self):
        '''Method INestedLegendItem.get_HorizontalAlignment

           OUTPUT
            horizAlignment      : esriTextHorizontalAlignment*'''
        return super(INestedLegendItem, self).get_HorizontalAlignment()
    def put_HorizontalAlignment(self, horizAlignment):
        '''Method INestedLegendItem.put_HorizontalAlignment

           INPUT
            horizAlignment      : esriTextHorizontalAlignment'''
        return super(INestedLegendItem, self).put_HorizontalAlignment(horizAlignment)
    AutoLayout = property(get_AutoLayout, put_AutoLayout, None)
    HorizontalAlignment = property(get_HorizontalAlignment, put_HorizontalAlignment, None)
    LabelEnds = property(get_LabelEnds, put_LabelEnds, None)
    LeaderOverhang = property(get_LeaderOverhang, put_LeaderOverhang, None)
    LeaderSymbol = property(get_LeaderSymbol, put_LeaderSymbol, None)
    OutlineSymbol = property(get_OutlineSymbol, put_OutlineSymbol, None)
    ShowOutlines = property(get_ShowOutlines, put_ShowOutlines, None)

class IHorizontalBarLegendItem(_esriCarto.IHorizontalBarLegendItem):
    _IID = uuid.UUID('3b09454e-c9d1-11d3-92fb-00600802e603')

    def __init__(self, *args, **kw):
        super(IHorizontalBarLegendItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AngleAbove(self, degrees):
        '''Method IHorizontalBarLegendItem.put_AngleAbove

           INPUT
            degrees             : double'''
        return super(IHorizontalBarLegendItem, self).put_AngleAbove(degrees)
    def get_AngleAbove(self):
        '''Method IHorizontalBarLegendItem.get_AngleAbove

           OUTPUT
            degrees             : double*'''
        return super(IHorizontalBarLegendItem, self).get_AngleAbove()
    def put_AngleBelow(self, degrees):
        '''Method IHorizontalBarLegendItem.put_AngleBelow

           INPUT
            degrees             : double'''
        return super(IHorizontalBarLegendItem, self).put_AngleBelow(degrees)
    def get_AngleBelow(self):
        '''Method IHorizontalBarLegendItem.get_AngleBelow

           OUTPUT
            degrees             : double*'''
        return super(IHorizontalBarLegendItem, self).get_AngleBelow()
    AngleAbove = property(get_AngleAbove, put_AngleAbove, None)
    AngleBelow = property(get_AngleBelow, put_AngleBelow, None)

class IFeatureSelectionRenderer(_esriCarto.IFeatureSelectionRenderer):
    _IID = uuid.UUID('a0439f35-1298-48c4-b536-985ac09f8e30')

    def __init__(self, *args, **kw):
        super(IFeatureSelectionRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SelectionColor(self, Color):
        '''Method IFeatureSelectionRenderer.put_SelectionColor

           INPUT
            Color               : IColor*'''
        return super(IFeatureSelectionRenderer, self).put_SelectionColor(Color)
    def get_SelectionColor(self):
        '''Method IFeatureSelectionRenderer.get_SelectionColor

           OUTPUT
            Color               : IColor**'''
        return super(IFeatureSelectionRenderer, self).get_SelectionColor()
    SelectionColor = property(get_SelectionColor, put_SelectionColor, None)

class IUniqueValueInfo(_esriCarto.IUniqueValueInfo):
    _IID = uuid.UUID('789e4c0d-560a-45df-ab1f-467e19388b9b')

    def __init__(self, *args, **kw):
        super(IUniqueValueInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IUniqueValueInfo.get_Count

           OUTPUT
            Count               : long*'''
        return super(IUniqueValueInfo, self).get_Count()
    def put_Count(self, Count):
        '''Method IUniqueValueInfo.put_Count

           INPUT
            Count               : long'''
        return super(IUniqueValueInfo, self).put_Count(Count)
    def get_Value(self):
        '''Method IUniqueValueInfo.get_Value

           OUTPUT
            classLabel          : BSTR*'''
        return super(IUniqueValueInfo, self).get_Value()
    def put_Value(self, classLabel):
        '''Method IUniqueValueInfo.put_Value

           INPUT
            classLabel          : BSTR'''
        return super(IUniqueValueInfo, self).put_Value(classLabel)
    def get_Label(self):
        '''Method IUniqueValueInfo.get_Label

           OUTPUT
            classLabel          : BSTR*'''
        return super(IUniqueValueInfo, self).get_Label()
    def put_Label(self, classLabel):
        '''Method IUniqueValueInfo.put_Label

           INPUT
            classLabel          : BSTR'''
        return super(IUniqueValueInfo, self).put_Label(classLabel)
    def get_Description(self):
        '''Method IUniqueValueInfo.get_Description

           OUTPUT
            symbolDescription   : BSTR*'''
        return super(IUniqueValueInfo, self).get_Description()
    def put_Description(self, symbolDescription):
        '''Method IUniqueValueInfo.put_Description

           INPUT
            symbolDescription   : BSTR'''
        return super(IUniqueValueInfo, self).put_Description(symbolDescription)
    def get_Symbol(self):
        '''Method IUniqueValueInfo.get_Symbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IUniqueValueInfo, self).get_Symbol()
    def put_Symbol(self, Symbol):
        '''Method IUniqueValueInfo.put_Symbol

           INPUT
            Symbol              : ISymbol*'''
        return super(IUniqueValueInfo, self).put_Symbol(Symbol)
    Count = property(get_Count, put_Count, None)
    Description = property(get_Description, put_Description, None)
    Label = property(get_Label, put_Label, None)
    Symbol = property(get_Symbol, put_Symbol, None)
    Value = property(get_Value, put_Value, None)

class IClassBreakInfo(_esriCarto.IClassBreakInfo):
    _IID = uuid.UUID('c7065e3c-c37d-41f9-9aed-04564f5069d5')

    def __init__(self, *args, **kw):
        super(IClassBreakInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassMinimumValue(self):
        '''Method IClassBreakInfo.get_ClassMinimumValue

           OUTPUT
            Value               : double*'''
        return super(IClassBreakInfo, self).get_ClassMinimumValue()
    def put_ClassMinimumValue(self, Value):
        '''Method IClassBreakInfo.put_ClassMinimumValue

           INPUT
            Value               : double'''
        return super(IClassBreakInfo, self).put_ClassMinimumValue(Value)
    def get_ClassMaximumValue(self):
        '''Method IClassBreakInfo.get_ClassMaximumValue

           OUTPUT
            Value               : double*'''
        return super(IClassBreakInfo, self).get_ClassMaximumValue()
    def put_ClassMaximumValue(self, Value):
        '''Method IClassBreakInfo.put_ClassMaximumValue

           INPUT
            Value               : double'''
        return super(IClassBreakInfo, self).put_ClassMaximumValue(Value)
    def get_Label(self):
        '''Method IClassBreakInfo.get_Label

           OUTPUT
            classLabel          : BSTR*'''
        return super(IClassBreakInfo, self).get_Label()
    def put_Label(self, classLabel):
        '''Method IClassBreakInfo.put_Label

           INPUT
            classLabel          : BSTR'''
        return super(IClassBreakInfo, self).put_Label(classLabel)
    def get_Description(self):
        '''Method IClassBreakInfo.get_Description

           OUTPUT
            symbolDescription   : BSTR*'''
        return super(IClassBreakInfo, self).get_Description()
    def put_Description(self, symbolDescription):
        '''Method IClassBreakInfo.put_Description

           INPUT
            symbolDescription   : BSTR'''
        return super(IClassBreakInfo, self).put_Description(symbolDescription)
    def get_Symbol(self):
        '''Method IClassBreakInfo.get_Symbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IClassBreakInfo, self).get_Symbol()
    def put_Symbol(self, Symbol):
        '''Method IClassBreakInfo.put_Symbol

           INPUT
            Symbol              : ISymbol*'''
        return super(IClassBreakInfo, self).put_Symbol(Symbol)
    ClassMaximumValue = property(get_ClassMaximumValue, put_ClassMaximumValue, None)
    ClassMinimumValue = property(get_ClassMinimumValue, put_ClassMinimumValue, None)
    Description = property(get_Description, put_Description, None)
    Label = property(get_Label, put_Label, None)
    Symbol = property(get_Symbol, put_Symbol, None)

class IUniqueValueInfos(_esriCarto.IUniqueValueInfos):
    _IID = uuid.UUID('d81c47c3-824e-4372-9e9d-ae4f9e545a94')
    def get_Count(self):
        '''Method IUniqueValueInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IUniqueValueInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IUniqueValueInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppUniqueValueInfo   : IUniqueValueInfo**'''
        return super(IUniqueValueInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IUniqueValueInfos.Remove

           INPUT
            Index               : long'''
        return super(IUniqueValueInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IUniqueValueInfos.RemoveAll'''
        return super(IUniqueValueInfos, self).RemoveAll()
    def Add(self, pUniqueValueInfo):
        '''Method IUniqueValueInfos.Add

           INPUT
            pUniqueValueInfo    : IUniqueValueInfo*'''
        return super(IUniqueValueInfos, self).Add(pUniqueValueInfo)
    def Insert(self, Index, pUniqueValueInfo):
        '''Method IUniqueValueInfos.Insert

           INPUTS
            Index               : long
            pUniqueValueInfo    : IUniqueValueInfo*'''
        return super(IUniqueValueInfos, self).Insert(Index, pUniqueValueInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IClassBreakInfos(_esriCarto.IClassBreakInfos):
    _IID = uuid.UUID('5514a065-ffd6-4fb6-ac43-0d6cb9d8e1fb')
    def get_Count(self):
        '''Method IClassBreakInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IClassBreakInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IClassBreakInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppClassBreakInfo    : IClassBreakInfo**'''
        return super(IClassBreakInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IClassBreakInfos.Remove

           INPUT
            Index               : long'''
        return super(IClassBreakInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IClassBreakInfos.RemoveAll'''
        return super(IClassBreakInfos, self).RemoveAll()
    def Add(self, pClassBreakInfo):
        '''Method IClassBreakInfos.Add

           INPUT
            pClassBreakInfo     : IClassBreakInfo*'''
        return super(IClassBreakInfos, self).Add(pClassBreakInfo)
    def Insert(self, Index, pClassBreakInfo):
        '''Method IClassBreakInfos.Insert

           INPUTS
            Index               : long
            pClassBreakInfo     : IClassBreakInfo*'''
        return super(IClassBreakInfos, self).Insert(Index, pClassBreakInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDataExclusion(_esriCarto.IDataExclusion):
    _IID = uuid.UUID('3d961d65-fc94-11d1-aaca-00c04fa334b3')

    def __init__(self, *args, **kw):
        super(IDataExclusion, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExclusionClause(self):
        '''Method IDataExclusion.get_ExclusionClause

           OUTPUT
            clause              : BSTR*'''
        return super(IDataExclusion, self).get_ExclusionClause()
    def put_ExclusionClause(self, clause):
        '''Method IDataExclusion.put_ExclusionClause

           INPUT
            clause              : BSTR'''
        return super(IDataExclusion, self).put_ExclusionClause(clause)
    def get_ExclusionSymbol(self):
        '''Method IDataExclusion.get_ExclusionSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IDataExclusion, self).get_ExclusionSymbol()
    def put_ExclusionSymbol(self, Symbol):
        '''Method IDataExclusion.put_ExclusionSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(IDataExclusion, self).put_ExclusionSymbol(Symbol)
    def get_ShowExclusionClass(self):
        '''Method IDataExclusion.get_ShowExclusionClass

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IDataExclusion, self).get_ShowExclusionClass()
    def put_ShowExclusionClass(self, Show):
        '''Method IDataExclusion.put_ShowExclusionClass

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IDataExclusion, self).put_ShowExclusionClass(Show)
    def get_ExclusionLabel(self):
        '''Method IDataExclusion.get_ExclusionLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IDataExclusion, self).get_ExclusionLabel()
    def put_ExclusionLabel(self, Label):
        '''Method IDataExclusion.put_ExclusionLabel

           INPUT
            Label               : BSTR'''
        return super(IDataExclusion, self).put_ExclusionLabel(Label)
    def get_ExclusionDescription(self):
        '''Method IDataExclusion.get_ExclusionDescription

           OUTPUT
            Text                : BSTR*'''
        return super(IDataExclusion, self).get_ExclusionDescription()
    def put_ExclusionDescription(self, Text):
        '''Method IDataExclusion.put_ExclusionDescription

           INPUT
            Text                : BSTR'''
        return super(IDataExclusion, self).put_ExclusionDescription(Text)
    ExclusionClause = property(get_ExclusionClause, put_ExclusionClause, None)
    ExclusionDescription = property(get_ExclusionDescription, put_ExclusionDescription, None)
    ExclusionLabel = property(get_ExclusionLabel, put_ExclusionLabel, None)
    ExclusionSymbol = property(get_ExclusionSymbol, put_ExclusionSymbol, None)
    ShowExclusionClass = property(get_ShowExclusionClass, put_ShowExclusionClass, None)

class IDataExclusion2(_esriCarto.IDataExclusion2):
    _IID = uuid.UUID('765a9a92-f6fa-4501-a888-a793ad33e023')
    def Disconnect(self):
        '''Method IDataExclusion2.Disconnect'''
        return super(IDataExclusion2, self).Disconnect()

class IRotationRenderer2(_esriCarto.IRotationRenderer2):
    _IID = uuid.UUID('d85e5b0c-68b3-48c8-b8d2-087806273b47')

    def __init__(self, *args, **kw):
        super(IRotationRenderer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SymbolRotation3DFlags(self):
        '''Method IRotationRenderer2.get_SymbolRotation3DFlags

           OUTPUT
            pFlags              : long*'''
        return super(IRotationRenderer2, self).get_SymbolRotation3DFlags()
    def put_SymbolRotation3DFlags(self, pFlags):
        '''Method IRotationRenderer2.put_SymbolRotation3DFlags

           INPUT
            pFlags              : long'''
        return super(IRotationRenderer2, self).put_SymbolRotation3DFlags(pFlags)
    def GetSymbolRotation3DFlags(self):
        '''Method IRotationRenderer2.GetSymbolRotation3DFlags

           OUTPUTS
            pFlagX              : esriSymbolRotation3DFlags*
            pFlagY              : esriSymbolRotation3DFlags*
            pFlagZ              : esriSymbolRotation3DFlags*'''
        return super(IRotationRenderer2, self).GetSymbolRotation3DFlags()
    def SetSymbolRotation3DFlags(self, flagX, flagY, flagZ):
        '''Method IRotationRenderer2.SetSymbolRotation3DFlags

           INPUTS
            flagX               : esriSymbolRotation3DFlags
            flagY               : esriSymbolRotation3DFlags
            flagZ               : esriSymbolRotation3DFlags'''
        return super(IRotationRenderer2, self).SetSymbolRotation3DFlags(flagX, flagY, flagZ)
    def get_SymbolRotation3DRotationTypeZ(self):
        '''Method IRotationRenderer2.get_SymbolRotation3DRotationTypeZ

           OUTPUT
            pType               : esriSymbolRotationType*'''
        return super(IRotationRenderer2, self).get_SymbolRotation3DRotationTypeZ()
    def put_SymbolRotation3DRotationTypeZ(self, pType):
        '''Method IRotationRenderer2.put_SymbolRotation3DRotationTypeZ

           INPUT
            pType               : esriSymbolRotationType'''
        return super(IRotationRenderer2, self).put_SymbolRotation3DRotationTypeZ(pType)
    def GetSymbolRotation3DExpressions(self):
        '''Method IRotationRenderer2.GetSymbolRotation3DExpressions

           OUTPUTS
            pExpressionX        : BSTR*
            pExpressionY        : BSTR*
            pExpressionZ        : BSTR*'''
        return super(IRotationRenderer2, self).GetSymbolRotation3DExpressions()
    def SetSymbolRotation3DExpressions(self, expressionX, expressionY, expressionZ):
        '''Method IRotationRenderer2.SetSymbolRotation3DExpressions

           INPUTS
            expressionX         : BSTR
            expressionY         : BSTR
            expressionZ         : BSTR'''
        return super(IRotationRenderer2, self).SetSymbolRotation3DExpressions(expressionX, expressionY, expressionZ)
    def GetSymbolRotation3DRandomRanges(self):
        '''Method IRotationRenderer2.GetSymbolRotation3DRandomRanges

           OUTPUTS
            pMinRotationX       : double*
            pMinRotationY       : double*
            pMinRotationZ       : double*
            pMaxRotationX       : double*
            pMaxRotationY       : double*
            pMaxRotationZ       : double*'''
        return super(IRotationRenderer2, self).GetSymbolRotation3DRandomRanges()
    def SetSymbolRotation3DRandomRanges(self, minRotationX, minRotationY, minRotationZ, maxRotationX, maxRotationY, maxRotationZ):
        '''Method IRotationRenderer2.SetSymbolRotation3DRandomRanges

           INPUTS
            minRotationX        : double
            minRotationY        : double
            minRotationZ        : double
            maxRotationX        : double
            maxRotationY        : double
            maxRotationZ        : double'''
        return super(IRotationRenderer2, self).SetSymbolRotation3DRandomRanges(minRotationX, minRotationY, minRotationZ, maxRotationX, maxRotationY, maxRotationZ)
    SymbolRotation3DFlags = property(get_SymbolRotation3DFlags, put_SymbolRotation3DFlags, None)
    SymbolRotation3DRotationTypeZ = property(get_SymbolRotation3DRotationTypeZ, put_SymbolRotation3DRotationTypeZ, None)

class ISelectionEnvironmentThreshold(_esriCarto.ISelectionEnvironmentThreshold):
    _IID = uuid.UUID('b7b1e910-f760-11d3-adf3-00c04fa33a15')

    def __init__(self, *args, **kw):
        super(ISelectionEnvironmentThreshold, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowSelectionWarning(self):
        '''Method ISelectionEnvironmentThreshold.get_ShowSelectionWarning

           OUTPUT
            showWarning         : VARIANT_BOOL*'''
        return super(ISelectionEnvironmentThreshold, self).get_ShowSelectionWarning()
    def put_ShowSelectionWarning(self, showWarning):
        '''Method ISelectionEnvironmentThreshold.put_ShowSelectionWarning

           INPUT
            showWarning         : VARIANT_BOOL'''
        return super(ISelectionEnvironmentThreshold, self).put_ShowSelectionWarning(showWarning)
    def get_WarningThreshold(self):
        '''Method ISelectionEnvironmentThreshold.get_WarningThreshold

           OUTPUT
            threshold           : long*'''
        return super(ISelectionEnvironmentThreshold, self).get_WarningThreshold()
    def put_WarningThreshold(self, threshold):
        '''Method ISelectionEnvironmentThreshold.put_WarningThreshold

           INPUT
            threshold           : long'''
        return super(ISelectionEnvironmentThreshold, self).put_WarningThreshold(threshold)
    ShowSelectionWarning = property(get_ShowSelectionWarning, put_ShowSelectionWarning, None)
    WarningThreshold = property(get_WarningThreshold, put_WarningThreshold, None)

class ISelectionEnvironmentStorage(_esriCarto.ISelectionEnvironmentStorage):
    _IID = uuid.UUID('a231c0e1-0bdb-11d4-9fea-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(ISelectionEnvironmentStorage, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SaveSelections(self):
        '''Method ISelectionEnvironmentStorage.get_SaveSelections

           OUTPUT
            saveSel             : VARIANT_BOOL*'''
        return super(ISelectionEnvironmentStorage, self).get_SaveSelections()
    def put_SaveSelections(self, saveSel):
        '''Method ISelectionEnvironmentStorage.put_SaveSelections

           INPUT
            saveSel             : VARIANT_BOOL'''
        return super(ISelectionEnvironmentStorage, self).put_SaveSelections(saveSel)
    SaveSelections = property(get_SaveSelections, put_SaveSelections, None)

class ISelectionEnvironmentLayer(_esriCarto.ISelectionEnvironmentLayer):
    _IID = uuid.UUID('dabac83c-3313-11d4-9ff4-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(ISelectionEnvironmentLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClearInvisibleLayers(self):
        '''Method ISelectionEnvironmentLayer.get_ClearInvisibleLayers

           OUTPUT
            clearInvisible      : VARIANT_BOOL*'''
        return super(ISelectionEnvironmentLayer, self).get_ClearInvisibleLayers()
    def put_ClearInvisibleLayers(self, clearInvisible):
        '''Method ISelectionEnvironmentLayer.put_ClearInvisibleLayers

           INPUT
            clearInvisible      : VARIANT_BOOL'''
        return super(ISelectionEnvironmentLayer, self).put_ClearInvisibleLayers(clearInvisible)
    ClearInvisibleLayers = property(get_ClearInvisibleLayers, put_ClearInvisibleLayers, None)

class IFeatureLayerSelectionEvents(_esriCarto.IFeatureLayerSelectionEvents):
    _IID = uuid.UUID('b97617be-5a52-11d3-9f6c-00c04f6bc886')
    def FeatureLayerSelectionChanged(self):
        '''Method IFeatureLayerSelectionEvents.FeatureLayerSelectionChanged'''
        return super(IFeatureLayerSelectionEvents, self).FeatureLayerSelectionChanged()

class IHotlinkMacro(_esriCarto.IHotlinkMacro):
    _IID = uuid.UUID('d7ee3484-004d-11d4-9fe7-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IHotlinkMacro, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MacroName(self):
        '''Method IHotlinkMacro.get_MacroName

           OUTPUT
            Name                : BSTR*'''
        return super(IHotlinkMacro, self).get_MacroName()
    def put_MacroName(self, Name):
        '''Method IHotlinkMacro.put_MacroName

           INPUT
            Name                : BSTR'''
        return super(IHotlinkMacro, self).put_MacroName(Name)
    MacroName = property(get_MacroName, put_MacroName, None)

class IDisplayTable(_esriCarto.IDisplayTable):
    _IID = uuid.UUID('cce71a6d-6135-46cd-bbed-616a74831b30')
    def get_DisplayTable(self):
        '''Method IDisplayTable.get_DisplayTable

           OUTPUT
            ppDisplayTable      : ITable**'''
        return super(IDisplayTable, self).get_DisplayTable()
    def SearchDisplayTable(self, pQueryFilter, recycling):
        '''Method IDisplayTable.SearchDisplayTable

           INPUTS
            pQueryFilter        : IQueryFilter*
            recycling           : VARIANT_BOOL

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IDisplayTable, self).SearchDisplayTable(pQueryFilter, recycling)
    def SelectDisplayTable(self, pQueryFilter, selType, selOption, pSelWorkspace):
        '''Method IDisplayTable.SelectDisplayTable

           INPUTS
            pQueryFilter        : IQueryFilter*
            selType             : esriSelectionType
            selOption           : esriSelectionOption
            pSelWorkspace       : IWorkspace*

           OUTPUT
            ppSelset            : ISelectionSet**'''
        return super(IDisplayTable, self).SelectDisplayTable(pQueryFilter, selType, selOption, pSelWorkspace)
    def get_DisplaySelectionSet(self):
        '''Method IDisplayTable.get_DisplaySelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IDisplayTable, self).get_DisplaySelectionSet()
    DisplaySelectionSet = property(get_DisplaySelectionSet, None, None)
    DisplayTable = property(get_DisplayTable, None, None)

class IFeatureLayer2(_esriCarto.IFeatureLayer2):
    _IID = uuid.UUID('95e82d50-e720-48b5-808d-e45fa9cf1218')

    def __init__(self, *args, **kw):
        super(IFeatureLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureClass(self):
        '''Method IFeatureLayer2.get_FeatureClass

           OUTPUT
            fclass              : IFeatureClass**'''
        return super(IFeatureLayer2, self).get_FeatureClass()
    def putref_FeatureClass(self, fclass):
        '''Method IFeatureLayer2.putref_FeatureClass

           INPUT
            fclass              : IFeatureClass*'''
        return super(IFeatureLayer2, self).putref_FeatureClass(fclass)
    def get_DataSourceType(self):
        '''Method IFeatureLayer2.get_DataSourceType

           OUTPUT
            Text                : BSTR*'''
        return super(IFeatureLayer2, self).get_DataSourceType()
    def put_DataSourceType(self, Text):
        '''Method IFeatureLayer2.put_DataSourceType

           INPUT
            Text                : BSTR'''
        return super(IFeatureLayer2, self).put_DataSourceType(Text)
    def get_DisplayField(self):
        '''Method IFeatureLayer2.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IFeatureLayer2, self).get_DisplayField()
    def put_DisplayField(self, FieldName):
        '''Method IFeatureLayer2.put_DisplayField

           INPUT
            FieldName           : BSTR'''
        return super(IFeatureLayer2, self).put_DisplayField(FieldName)
    def get_Selectable(self):
        '''Method IFeatureLayer2.get_Selectable

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IFeatureLayer2, self).get_Selectable()
    def put_Selectable(self, Value):
        '''Method IFeatureLayer2.put_Selectable

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IFeatureLayer2, self).put_Selectable(Value)
    def Search(self, queryFilter, recycling):
        '''Method IFeatureLayer2.Search

           INPUTS
            queryFilter         : IQueryFilter*
            recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IFeatureLayer2, self).Search(queryFilter, recycling)
    def get_ScaleSymbols(self):
        '''Method IFeatureLayer2.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(IFeatureLayer2, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method IFeatureLayer2.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(IFeatureLayer2, self).put_ScaleSymbols(Scale)
    def get_ShapeType(self):
        '''Method IFeatureLayer2.get_ShapeType

           OUTPUT
            Type                : esriGeometryType*'''
        return super(IFeatureLayer2, self).get_ShapeType()
    def ExpandRegionForSymbols(self, Display, region):
        '''Method IFeatureLayer2.ExpandRegionForSymbols

           INPUTS
            Display             : IDisplay*
            region              : IGeometry*'''
        return super(IFeatureLayer2, self).ExpandRegionForSymbols(Display, region)
    DataSourceType = property(get_DataSourceType, put_DataSourceType, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    FeatureClass = property(get_FeatureClass, putref_FeatureClass, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    Selectable = property(get_Selectable, put_Selectable, None)
    ShapeType = property(get_ShapeType, None, None)

class IGeoFeatureLayer(_esriCarto.IGeoFeatureLayer):
    _IID = uuid.UUID('e156d7e5-22af-11d3-9f99-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IGeoFeatureLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Renderer(self):
        '''Method IGeoFeatureLayer.get_Renderer

           OUTPUT
            Renderer            : IFeatureRenderer**'''
        return super(IGeoFeatureLayer, self).get_Renderer()
    def putref_Renderer(self, Renderer):
        '''Method IGeoFeatureLayer.putref_Renderer

           INPUT
            Renderer            : IFeatureRenderer*'''
        return super(IGeoFeatureLayer, self).putref_Renderer(Renderer)
    def get_RendererPropertyPageClassID(self):
        '''Method IGeoFeatureLayer.get_RendererPropertyPageClassID

           OUTPUT
            clsid               : IUID**'''
        return super(IGeoFeatureLayer, self).get_RendererPropertyPageClassID()
    def put_RendererPropertyPageClassID(self, clsid):
        '''Method IGeoFeatureLayer.put_RendererPropertyPageClassID

           INPUT
            clsid               : IUID*'''
        return super(IGeoFeatureLayer, self).put_RendererPropertyPageClassID(clsid)
    def get_DisplayAnnotation(self):
        '''Method IGeoFeatureLayer.get_DisplayAnnotation

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGeoFeatureLayer, self).get_DisplayAnnotation()
    def put_DisplayAnnotation(self, Value):
        '''Method IGeoFeatureLayer.put_DisplayAnnotation

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGeoFeatureLayer, self).put_DisplayAnnotation(Value)
    def get_AnnotationPropertiesID(self):
        '''Method IGeoFeatureLayer.get_AnnotationPropertiesID

           OUTPUT
            uid                 : IUID**'''
        return super(IGeoFeatureLayer, self).get_AnnotationPropertiesID()
    def putref_AnnotationPropertiesID(self, uid):
        '''Method IGeoFeatureLayer.putref_AnnotationPropertiesID

           INPUT
            uid                 : IUID*'''
        return super(IGeoFeatureLayer, self).putref_AnnotationPropertiesID(uid)
    def get_AnnotationProperties(self):
        '''Method IGeoFeatureLayer.get_AnnotationProperties

           OUTPUT
            props               : IAnnotateLayerPropertiesCollection**'''
        return super(IGeoFeatureLayer, self).get_AnnotationProperties()
    def put_AnnotationProperties(self, props):
        '''Method IGeoFeatureLayer.put_AnnotationProperties

           INPUT
            props               : IAnnotateLayerPropertiesCollection*'''
        return super(IGeoFeatureLayer, self).put_AnnotationProperties(props)
    def put_CurrentMapLevel(self, _arg1):
        '''Method IGeoFeatureLayer.put_CurrentMapLevel

           INPUT
            _arg1               : long'''
        return super(IGeoFeatureLayer, self).put_CurrentMapLevel(_arg1)
    def get_ExclusionSet(self):
        '''Method IGeoFeatureLayer.get_ExclusionSet

           OUTPUT
            FIDs                : IFeatureIDSet**'''
        return super(IGeoFeatureLayer, self).get_ExclusionSet()
    def putref_ExclusionSet(self, FIDs):
        '''Method IGeoFeatureLayer.putref_ExclusionSet

           INPUT
            FIDs                : IFeatureIDSet*'''
        return super(IGeoFeatureLayer, self).putref_ExclusionSet(FIDs)
    def get_DisplayFeatureClass(self):
        '''Method IGeoFeatureLayer.get_DisplayFeatureClass

           OUTPUT
            fclass              : IFeatureClass**'''
        return super(IGeoFeatureLayer, self).get_DisplayFeatureClass()
    def SearchDisplayFeatures(self, queryFilter, recycling):
        '''Method IGeoFeatureLayer.SearchDisplayFeatures

           INPUTS
            queryFilter         : IQueryFilter*
            recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IGeoFeatureLayer, self).SearchDisplayFeatures(queryFilter, recycling)
    def get_FeatureClass(self):
        '''Method IFeatureLayer.get_FeatureClass (from IFeatureLayer)

           OUTPUT
            fclass              : IFeatureClass**'''
        return super(IGeoFeatureLayer, self).get_FeatureClass()
    def putref_FeatureClass(self, fclass):
        '''Method IFeatureLayer.putref_FeatureClass (from IFeatureLayer)

           INPUT
            fclass              : IFeatureClass*'''
        return super(IGeoFeatureLayer, self).putref_FeatureClass(fclass)
    def get_DataSourceType(self):
        '''Method IFeatureLayer.get_DataSourceType (from IFeatureLayer)

           OUTPUT
            Text                : BSTR*'''
        return super(IGeoFeatureLayer, self).get_DataSourceType()
    def put_DataSourceType(self, Text):
        '''Method IFeatureLayer.put_DataSourceType (from IFeatureLayer)

           INPUT
            Text                : BSTR'''
        return super(IGeoFeatureLayer, self).put_DataSourceType(Text)
    def get_DisplayField(self):
        '''Method IFeatureLayer.get_DisplayField (from IFeatureLayer)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IGeoFeatureLayer, self).get_DisplayField()
    def put_DisplayField(self, FieldName):
        '''Method IFeatureLayer.put_DisplayField (from IFeatureLayer)

           INPUT
            FieldName           : BSTR'''
        return super(IGeoFeatureLayer, self).put_DisplayField(FieldName)
    def get_Selectable(self):
        '''Method IFeatureLayer.get_Selectable (from IFeatureLayer)

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IGeoFeatureLayer, self).get_Selectable()
    def put_Selectable(self, Value):
        '''Method IFeatureLayer.put_Selectable (from IFeatureLayer)

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IGeoFeatureLayer, self).put_Selectable(Value)
    def Search(self, queryFilter, recycling):
        '''Method IFeatureLayer.Search (from IFeatureLayer)

           INPUTS
            queryFilter         : IQueryFilter*
            recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IGeoFeatureLayer, self).Search(queryFilter, recycling)
    def get_ScaleSymbols(self):
        '''Method IFeatureLayer.get_ScaleSymbols (from IFeatureLayer)

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(IGeoFeatureLayer, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method IFeatureLayer.put_ScaleSymbols (from IFeatureLayer)

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(IGeoFeatureLayer, self).put_ScaleSymbols(Scale)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(IGeoFeatureLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(IGeoFeatureLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IGeoFeatureLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(IGeoFeatureLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(IGeoFeatureLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(IGeoFeatureLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(IGeoFeatureLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(IGeoFeatureLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IGeoFeatureLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IGeoFeatureLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IGeoFeatureLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IGeoFeatureLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(IGeoFeatureLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IGeoFeatureLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IGeoFeatureLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(IGeoFeatureLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IGeoFeatureLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IGeoFeatureLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AnnotationProperties = property(get_AnnotationProperties, put_AnnotationProperties, None)
    AnnotationPropertiesID = property(get_AnnotationPropertiesID, putref_AnnotationPropertiesID, None)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    CurrentMapLevel = property(None, put_CurrentMapLevel, None)
    DataSourceType = property(get_DataSourceType, put_DataSourceType, None)
    DisplayAnnotation = property(get_DisplayAnnotation, put_DisplayAnnotation, None)
    DisplayFeatureClass = property(get_DisplayFeatureClass, None, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    ExclusionSet = property(get_ExclusionSet, putref_ExclusionSet, None)
    FeatureClass = property(get_FeatureClass, putref_FeatureClass, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    Renderer = property(get_Renderer, putref_Renderer, None)
    RendererPropertyPageClassID = property(get_RendererPropertyPageClassID, put_RendererPropertyPageClassID, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    Selectable = property(get_Selectable, put_Selectable, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ITopologyLayer(_esriCarto.ITopologyLayer):
    _IID = uuid.UUID('fb6337e3-610a-4bc2-9142-760d954c22eb')

    def __init__(self, *args, **kw):
        super(ITopologyLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Topology(self):
        '''Method ITopologyLayer.get_Topology

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyLayer, self).get_Topology()
    def putref_Topology(self, Topology):
        '''Method ITopologyLayer.putref_Topology

           INPUT
            Topology            : ITopology*'''
        return super(ITopologyLayer, self).putref_Topology(Topology)
    def get_Renderer(self, Index):
        '''Method ITopologyLayer.get_Renderer

           INPUT
            Index               : esriTopologyRenderer

           OUTPUT
            Renderer            : IFeatureRenderer**'''
        return super(ITopologyLayer, self).get_Renderer(Index)
    def putref_Renderer(self, Index, Renderer):
        '''Method ITopologyLayer.putref_Renderer

           INPUTS
            Index               : esriTopologyRenderer
            Renderer            : IFeatureRenderer*'''
        return super(ITopologyLayer, self).putref_Renderer(Index, Renderer)
    Renderer = property(None, putref_Renderer, None)
    Topology = property(get_Topology, putref_Topology, None)
    Renderer = IndexProperty(get_Renderer, None)

class ITopologyErrorSelection(_esriCarto.ITopologyErrorSelection):
    _IID = uuid.UUID('82e0d83a-8bc3-4eee-9cc9-95775ab39ba9')

    def __init__(self, *args, **kw):
        super(ITopologyErrorSelection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RuleTypeCount(self):
        '''Method ITopologyErrorSelection.get_RuleTypeCount

           OUTPUT
            Count               : long*'''
        return super(ITopologyErrorSelection, self).get_RuleTypeCount()
    def get_RuleType(self, Index):
        '''Method ITopologyErrorSelection.get_RuleType

           INPUT
            Index               : long

           OUTPUT
            RuleType            : esriTopologyRuleType*'''
        return super(ITopologyErrorSelection, self).get_RuleType(Index)
    def put_Selectable(self, Index, sel):
        '''Method ITopologyErrorSelection.put_Selectable

           INPUTS
            Index               : long
            sel                 : VARIANT_BOOL'''
        return super(ITopologyErrorSelection, self).put_Selectable(Index, sel)
    def get_Selectable(self, Index):
        '''Method ITopologyErrorSelection.get_Selectable

           INPUT
            Index               : long

           OUTPUT
            sel                 : VARIANT_BOOL*'''
        return super(ITopologyErrorSelection, self).get_Selectable(Index)
    def get_SelectExceptions(self):
        '''Method ITopologyErrorSelection.get_SelectExceptions

           OUTPUT
            sel                 : VARIANT_BOOL*'''
        return super(ITopologyErrorSelection, self).get_SelectExceptions()
    def put_SelectExceptions(self, sel):
        '''Method ITopologyErrorSelection.put_SelectExceptions

           INPUT
            sel                 : VARIANT_BOOL'''
        return super(ITopologyErrorSelection, self).put_SelectExceptions(sel)
    def get_SelectErrors(self):
        '''Method ITopologyErrorSelection.get_SelectErrors

           OUTPUT
            sel                 : VARIANT_BOOL*'''
        return super(ITopologyErrorSelection, self).get_SelectErrors()
    def put_SelectErrors(self, sel):
        '''Method ITopologyErrorSelection.put_SelectErrors

           INPUT
            sel                 : VARIANT_BOOL'''
        return super(ITopologyErrorSelection, self).put_SelectErrors(sel)
    RuleTypeCount = property(get_RuleTypeCount, None, None)
    SelectErrors = property(get_SelectErrors, put_SelectErrors, None)
    SelectExceptions = property(get_SelectExceptions, put_SelectExceptions, None)
    Selectable = property(None, put_Selectable, None)
    RuleType = IndexProperty(get_RuleType, None)
    Selectable = IndexProperty(get_Selectable, None)

class ITableSelection(_esriCarto.ITableSelection):
    _IID = uuid.UUID('2c232271-fbaa-11d3-b9d3-00c0f0567a4a')

    def __init__(self, *args, **kw):
        super(ITableSelection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SelectionSet(self):
        '''Method ITableSelection.get_SelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(ITableSelection, self).get_SelectionSet()
    def putref_SelectionSet(self, SelectionSet):
        '''Method ITableSelection.putref_SelectionSet

           INPUT
            SelectionSet        : ISelectionSet*'''
        return super(ITableSelection, self).putref_SelectionSet(SelectionSet)
    def AddRow(self, Row):
        '''Method ITableSelection.AddRow

           INPUT
            Row                 : IRow*'''
        return super(ITableSelection, self).AddRow(Row)
    def SelectRows(self, Filter, Method, justOne):
        '''Method ITableSelection.SelectRows

           INPUTS
            Filter              : IQueryFilter*
            Method              : esriSelectionResultEnum
            justOne             : VARIANT_BOOL'''
        return super(ITableSelection, self).SelectRows(Filter, Method, justOne)
    def Clear(self):
        '''Method ITableSelection.Clear'''
        return super(ITableSelection, self).Clear()
    def SelectionChanged(self):
        '''Method ITableSelection.SelectionChanged'''
        return super(ITableSelection, self).SelectionChanged()
    SelectionSet = property(get_SelectionSet, putref_SelectionSet, None)

class IFeatureSelection(_esriCarto.IFeatureSelection):
    _IID = uuid.UUID('9336a280-c9a3-11d1-847e-0000f875b9c6')

    def __init__(self, *args, **kw):
        super(IFeatureSelection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SelectionSet(self):
        '''Method IFeatureSelection.get_SelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IFeatureSelection, self).get_SelectionSet()
    def putref_SelectionSet(self, SelectionSet):
        '''Method IFeatureSelection.putref_SelectionSet

           INPUT
            SelectionSet        : ISelectionSet*'''
        return super(IFeatureSelection, self).putref_SelectionSet(SelectionSet)
    def get_CombinationMethod(self):
        '''Method IFeatureSelection.get_CombinationMethod

           OUTPUT
            Method              : esriSelectionResultEnum*'''
        return super(IFeatureSelection, self).get_CombinationMethod()
    def put_CombinationMethod(self, Method):
        '''Method IFeatureSelection.put_CombinationMethod

           INPUT
            Method              : esriSelectionResultEnum'''
        return super(IFeatureSelection, self).put_CombinationMethod(Method)
    def get_BufferDistance(self):
        '''Method IFeatureSelection.get_BufferDistance

           OUTPUT
            Distance            : double*'''
        return super(IFeatureSelection, self).get_BufferDistance()
    def put_BufferDistance(self, Distance):
        '''Method IFeatureSelection.put_BufferDistance

           INPUT
            Distance            : double'''
        return super(IFeatureSelection, self).put_BufferDistance(Distance)
    def get_SetSelectionSymbol(self):
        '''Method IFeatureSelection.get_SetSelectionSymbol

           OUTPUT
            setSymbol           : VARIANT_BOOL*'''
        return super(IFeatureSelection, self).get_SetSelectionSymbol()
    def put_SetSelectionSymbol(self, setSymbol):
        '''Method IFeatureSelection.put_SetSelectionSymbol

           INPUT
            setSymbol           : VARIANT_BOOL'''
        return super(IFeatureSelection, self).put_SetSelectionSymbol(setSymbol)
    def get_SelectionColor(self):
        '''Method IFeatureSelection.get_SelectionColor

           OUTPUT
            Color               : IColor**'''
        return super(IFeatureSelection, self).get_SelectionColor()
    def putref_SelectionColor(self, Color):
        '''Method IFeatureSelection.putref_SelectionColor

           INPUT
            Color               : IColor*'''
        return super(IFeatureSelection, self).putref_SelectionColor(Color)
    def get_SelectionSymbol(self):
        '''Method IFeatureSelection.get_SelectionSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IFeatureSelection, self).get_SelectionSymbol()
    def putref_SelectionSymbol(self, Symbol):
        '''Method IFeatureSelection.putref_SelectionSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(IFeatureSelection, self).putref_SelectionSymbol(Symbol)
    def Add(self, Feature):
        '''Method IFeatureSelection.Add

           INPUT
            Feature             : IFeature*'''
        return super(IFeatureSelection, self).Add(Feature)
    def SelectFeatures(self, Filter, Method, justOne):
        '''Method IFeatureSelection.SelectFeatures

           INPUTS
            Filter              : IQueryFilter*
            Method              : esriSelectionResultEnum
            justOne             : VARIANT_BOOL'''
        return super(IFeatureSelection, self).SelectFeatures(Filter, Method, justOne)
    def Clear(self):
        '''Method IFeatureSelection.Clear'''
        return super(IFeatureSelection, self).Clear()
    def SelectionChanged(self):
        '''Method IFeatureSelection.SelectionChanged'''
        return super(IFeatureSelection, self).SelectionChanged()
    BufferDistance = property(get_BufferDistance, put_BufferDistance, None)
    CombinationMethod = property(get_CombinationMethod, put_CombinationMethod, None)
    SelectionColor = property(get_SelectionColor, putref_SelectionColor, None)
    SelectionSet = property(get_SelectionSet, putref_SelectionSet, None)
    SelectionSymbol = property(get_SelectionSymbol, putref_SelectionSymbol, None)
    SetSelectionSymbol = property(get_SetSelectionSymbol, put_SetSelectionSymbol, None)

class IDefinitionExpressionEvents(_esriCarto.IDefinitionExpressionEvents):
    _IID = uuid.UUID('78c6d12c-634e-495e-86b5-17a5d89fb06a')
    def DefinitionExpressionChanged(self, pSource):
        '''Method IDefinitionExpressionEvents.DefinitionExpressionChanged

           INPUT
            pSource             : IUnknown*'''
        return super(IDefinitionExpressionEvents, self).DefinitionExpressionChanged(pSource)

class IFeatureLayerDefinition(_esriCarto.IFeatureLayerDefinition):
    _IID = uuid.UUID('3e1608cf-ff34-11d1-adf1-080009ec732a')

    def __init__(self, *args, **kw):
        super(IFeatureLayerDefinition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefinitionExpression(self):
        '''Method IFeatureLayerDefinition.get_DefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(IFeatureLayerDefinition, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method IFeatureLayerDefinition.put_DefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(IFeatureLayerDefinition, self).put_DefinitionExpression(Expression)
    def get_DefinitionSelectionSet(self):
        '''Method IFeatureLayerDefinition.get_DefinitionSelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IFeatureLayerDefinition, self).get_DefinitionSelectionSet()
    def CreateSelectionLayer(self, LayerName, useCurrentSelection, joinTableNames, Expression):
        '''Method IFeatureLayerDefinition.CreateSelectionLayer

           INPUTS
            LayerName           : BSTR
            useCurrentSelection : VARIANT_BOOL
            joinTableNames      : BSTR
            Expression          : BSTR

           OUTPUT
            Layer               : IFeatureLayer**'''
        return super(IFeatureLayerDefinition, self).CreateSelectionLayer(LayerName, useCurrentSelection, joinTableNames, Expression)
    def get_RelationshipClass(self):
        '''Method IFeatureLayerDefinition.get_RelationshipClass

           OUTPUT
            relClass            : IRelationshipClass**'''
        return super(IFeatureLayerDefinition, self).get_RelationshipClass()
    def putref_RelationshipClass(self, relClass):
        '''Method IFeatureLayerDefinition.putref_RelationshipClass

           INPUT
            relClass            : IRelationshipClass*'''
        return super(IFeatureLayerDefinition, self).putref_RelationshipClass(relClass)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    DefinitionSelectionSet = property(get_DefinitionSelectionSet, None, None)
    RelationshipClass = property(get_RelationshipClass, putref_RelationshipClass, None)

class IFeatureLayerDefinition2(_esriCarto.IFeatureLayerDefinition2):
    _IID = uuid.UUID('ed242088-b822-4e8a-8260-cdcd1da3044b')

    def __init__(self, *args, **kw):
        super(IFeatureLayerDefinition2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefinitionExpression(self):
        '''Method IFeatureLayerDefinition2.get_DefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(IFeatureLayerDefinition2, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method IFeatureLayerDefinition2.put_DefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(IFeatureLayerDefinition2, self).put_DefinitionExpression(Expression)
    def get_DefinitionSelectionSet(self):
        '''Method IFeatureLayerDefinition2.get_DefinitionSelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IFeatureLayerDefinition2, self).get_DefinitionSelectionSet()
    def CreateSelectionLayer(self, LayerName, useCurrentSelection, joinTableNames, Expression):
        '''Method IFeatureLayerDefinition2.CreateSelectionLayer

           INPUTS
            LayerName           : BSTR
            useCurrentSelection : VARIANT_BOOL
            joinTableNames      : BSTR
            Expression          : BSTR

           OUTPUT
            Layer               : IFeatureLayer**'''
        return super(IFeatureLayerDefinition2, self).CreateSelectionLayer(LayerName, useCurrentSelection, joinTableNames, Expression)
    def get_RelationshipClass(self):
        '''Method IFeatureLayerDefinition2.get_RelationshipClass

           OUTPUT
            relClass            : IRelationshipClass**'''
        return super(IFeatureLayerDefinition2, self).get_RelationshipClass()
    def putref_RelationshipClass(self, relClass):
        '''Method IFeatureLayerDefinition2.putref_RelationshipClass

           INPUT
            relClass            : IRelationshipClass*'''
        return super(IFeatureLayerDefinition2, self).putref_RelationshipClass(relClass)
    def get_SearchOrder(self):
        '''Method IFeatureLayerDefinition2.get_SearchOrder

           OUTPUT
            order               : esriSearchOrder*'''
        return super(IFeatureLayerDefinition2, self).get_SearchOrder()
    def put_SearchOrder(self, order):
        '''Method IFeatureLayerDefinition2.put_SearchOrder

           INPUT
            order               : esriSearchOrder'''
        return super(IFeatureLayerDefinition2, self).put_SearchOrder(order)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    DefinitionSelectionSet = property(get_DefinitionSelectionSet, None, None)
    RelationshipClass = property(get_RelationshipClass, putref_RelationshipClass, None)
    SearchOrder = property(get_SearchOrder, put_SearchOrder, None)

class ITableDefinition(_esriCarto.ITableDefinition):
    _IID = uuid.UUID('7e078ff6-4b77-414e-90a9-8bb352dd1608')

    def __init__(self, *args, **kw):
        super(ITableDefinition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefinitionExpression(self):
        '''Method ITableDefinition.get_DefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(ITableDefinition, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method ITableDefinition.put_DefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(ITableDefinition, self).put_DefinitionExpression(Expression)
    def get_DefinitionSelectionSet(self):
        '''Method ITableDefinition.get_DefinitionSelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(ITableDefinition, self).get_DefinitionSelectionSet()
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    DefinitionSelectionSet = property(get_DefinitionSelectionSet, None, None)

class ISelectionLayerDefinition(_esriCarto.ISelectionLayerDefinition):
    _IID = uuid.UUID('863e18bb-9b3e-4eee-ac2d-f891e8ed8fd9')
    def CreateSelectionLayer(self, LayerName, useCurrentSelection, joinTableNames, Expression):
        '''Method ISelectionLayerDefinition.CreateSelectionLayer

           INPUTS
            LayerName           : BSTR
            useCurrentSelection : VARIANT_BOOL
            joinTableNames      : BSTR
            Expression          : BSTR

           OUTPUT
            Layer               : IFeatureLayer**'''
        return super(ISelectionLayerDefinition, self).CreateSelectionLayer(LayerName, useCurrentSelection, joinTableNames, Expression)

class IDisplayRelationshipClass(_esriCarto.IDisplayRelationshipClass):
    _IID = uuid.UUID('55a4e17e-8682-42ba-8866-ab04db883934')
    def get_JoinType(self):
        '''Method IDisplayRelationshipClass.get_JoinType

           OUTPUT
            pJoinType           : esriJoinType*'''
        return super(IDisplayRelationshipClass, self).get_JoinType()
    def get_RelationshipClass(self):
        '''Method IDisplayRelationshipClass.get_RelationshipClass

           OUTPUT
            relClass            : IRelationshipClass**'''
        return super(IDisplayRelationshipClass, self).get_RelationshipClass()
    def DisplayRelationshipClass(self, relClass, JoinType):
        '''Method IDisplayRelationshipClass.DisplayRelationshipClass

           INPUTS
            relClass            : IRelationshipClass*
            JoinType            : esriJoinType'''
        return super(IDisplayRelationshipClass, self).DisplayRelationshipClass(relClass, JoinType)
    JoinType = property(get_JoinType, None, None)
    RelationshipClass = property(get_RelationshipClass, None, None)

class IFieldInfoSet(_esriCarto.IFieldInfoSet):
    _IID = uuid.UUID('d8d8c2c1-c003-452c-a66c-aa9b333d3489')
    def get_Count(self):
        '''Method IFieldInfoSet.get_Count

           OUTPUT
            Count               : long*'''
        return super(IFieldInfoSet, self).get_Count()
    def get_FieldInfo(self, Index):
        '''Method IFieldInfoSet.get_FieldInfo

           INPUT
            Index               : long

           OUTPUT
            FieldInfo           : IFieldInfo**'''
        return super(IFieldInfoSet, self).get_FieldInfo(Index)
    def get_FieldName(self, Index):
        '''Method IFieldInfoSet.get_FieldName

           INPUT
            Index               : long

           OUTPUT
            FieldName           : BSTR*'''
        return super(IFieldInfoSet, self).get_FieldName(Index)
    def Add(self, FieldName, FieldInfo):
        '''Method IFieldInfoSet.Add

           INPUTS
            FieldName           : BSTR
            FieldInfo           : IFieldInfo*'''
        return super(IFieldInfoSet, self).Add(FieldName, FieldInfo)
    def Clear(self):
        '''Method IFieldInfoSet.Clear'''
        return super(IFieldInfoSet, self).Clear()
    def Find(self, FieldName):
        '''Method IFieldInfoSet.Find

           INPUT
            FieldName           : BSTR

           OUTPUT
            FieldInfo           : IFieldInfo**'''
        return super(IFieldInfoSet, self).Find(FieldName)
    def Remove(self, FieldName):
        '''Method IFieldInfoSet.Remove

           INPUT
            FieldName           : BSTR'''
        return super(IFieldInfoSet, self).Remove(FieldName)
    Count = property(get_Count, None, None)
    FieldInfo = IndexProperty(get_FieldInfo, None)
    FieldName = IndexProperty(get_FieldName, None)

class IOrderedLayerFields(_esriCarto.IOrderedLayerFields):
    _IID = uuid.UUID('a95f6059-7909-4d31-a66b-2220adc6615f')
    def get_FieldInfos(self):
        '''Method IOrderedLayerFields.get_FieldInfos

           OUTPUT
            FieldInfoSet        : IFieldInfoSet**'''
        return super(IOrderedLayerFields, self).get_FieldInfos()
    def SetFieldOrder(self, FieldInfoSet):
        '''Method IOrderedLayerFields.SetFieldOrder

           INPUT
            FieldInfoSet        : IFieldInfoSet*'''
        return super(IOrderedLayerFields, self).SetFieldOrder(FieldInfoSet)
    FieldInfos = property(get_FieldInfos, None, None)

class IDisplayExpressionProperties(_esriCarto.IDisplayExpressionProperties):
    _IID = uuid.UUID('a62b9ec2-5c52-4b98-b116-5ea341d4af6d')

    def __init__(self, *args, **kw):
        super(IDisplayExpressionProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Expression(self, Expression):
        '''Method IDisplayExpressionProperties.put_Expression

           INPUT
            Expression          : BSTR'''
        return super(IDisplayExpressionProperties, self).put_Expression(Expression)
    def get_Expression(self):
        '''Method IDisplayExpressionProperties.get_Expression

           OUTPUT
            Expression          : BSTR*'''
        return super(IDisplayExpressionProperties, self).get_Expression()
    def put_IsExpressionSimple(self, simpleExpression):
        '''Method IDisplayExpressionProperties.put_IsExpressionSimple

           INPUT
            simpleExpression    : VARIANT_BOOL'''
        return super(IDisplayExpressionProperties, self).put_IsExpressionSimple(simpleExpression)
    def get_IsExpressionSimple(self):
        '''Method IDisplayExpressionProperties.get_IsExpressionSimple

           OUTPUT
            simpleExpression    : VARIANT_BOOL*'''
        return super(IDisplayExpressionProperties, self).get_IsExpressionSimple()
    def putref_ExpressionParser(self, engine):
        '''Method IDisplayExpressionProperties.putref_ExpressionParser

           INPUT
            engine              : IAnnotationExpressionEngine*'''
        return super(IDisplayExpressionProperties, self).putref_ExpressionParser(engine)
    def get_ExpressionParser(self):
        '''Method IDisplayExpressionProperties.get_ExpressionParser

           OUTPUT
            engine              : IAnnotationExpressionEngine**'''
        return super(IDisplayExpressionProperties, self).get_ExpressionParser()
    Expression = property(get_Expression, put_Expression, None)
    ExpressionParser = property(get_ExpressionParser, putref_ExpressionParser, None)
    IsExpressionSimple = property(get_IsExpressionSimple, put_IsExpressionSimple, None)

class IDisplayString(_esriCarto.IDisplayString):
    _IID = uuid.UUID('8d090acb-8c9e-4343-a3cc-f9da9be3c401')

    def __init__(self, *args, **kw):
        super(IDisplayString, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExpressionProperties(self):
        '''Method IDisplayString.get_ExpressionProperties

           OUTPUT
            DisplayExpressionProperties: IDisplayExpressionProperties**'''
        return super(IDisplayString, self).get_ExpressionProperties()
    def putref_ExpressionProperties(self, DisplayExpressionProperties):
        '''Method IDisplayString.putref_ExpressionProperties

           INPUT
            DisplayExpressionProperties: IDisplayExpressionProperties*'''
        return super(IDisplayString, self).putref_ExpressionProperties(DisplayExpressionProperties)
    def FindDisplayString(self, pObject):
        '''Method IDisplayString.FindDisplayString

           INPUT
            pObject             : IObject*

           OUTPUT
            Text                : BSTR*'''
        return super(IDisplayString, self).FindDisplayString(pObject)
    ExpressionProperties = property(get_ExpressionProperties, putref_ExpressionProperties, None)

class IHotlinkExpression(_esriCarto.IHotlinkExpression):
    _IID = uuid.UUID('6fb88442-c7d2-4355-92c0-e96a577636d2')

    def __init__(self, *args, **kw):
        super(IHotlinkExpression, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExpressionProperties(self):
        '''Method IHotlinkExpression.get_ExpressionProperties

           OUTPUT
            ppHotLinkExpressionProperties: IHotLinkExpressionProperties**'''
        return super(IHotlinkExpression, self).get_ExpressionProperties()
    def putref_ExpressionProperties(self, ppHotLinkExpressionProperties):
        '''Method IHotlinkExpression.putref_ExpressionProperties

           INPUT
            ppHotLinkExpressionProperties: IHotLinkExpressionProperties*'''
        return super(IHotlinkExpression, self).putref_ExpressionProperties(ppHotLinkExpressionProperties)
    def ExecuteExpression(self, pObject):
        '''Method IHotlinkExpression.ExecuteExpression

           INPUT
            pObject             : IObject*

           OUTPUT
            Text                : BSTR*'''
        return super(IHotlinkExpression, self).ExecuteExpression(pObject)
    ExpressionProperties = property(get_ExpressionProperties, putref_ExpressionProperties, None)

class ICompositeGraphicsLayer(_esriCarto.ICompositeGraphicsLayer):
    _IID = uuid.UUID('9646bb82-9512-11d2-a2f6-080009b6f22b')

    def __init__(self, *args, **kw):
        super(ICompositeGraphicsLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def AddLayer(self, LayerName, FeatureLayer):
        '''Method ICompositeGraphicsLayer.AddLayer

           INPUTS
            LayerName           : BSTR
            FeatureLayer        : IFeatureLayer*

           OUTPUT
            GraphicsLayer       : IGraphicsLayer**'''
        return super(ICompositeGraphicsLayer, self).AddLayer(LayerName, FeatureLayer)
    def DeleteLayer(self, LayerName):
        '''Method ICompositeGraphicsLayer.DeleteLayer

           INPUT
            LayerName           : BSTR'''
        return super(ICompositeGraphicsLayer, self).DeleteLayer(LayerName)
    def FindLayer(self, LayerName):
        '''Method ICompositeGraphicsLayer.FindLayer

           INPUT
            LayerName           : BSTR

           OUTPUT
            GraphicsLayer       : IGraphicsLayer**'''
        return super(ICompositeGraphicsLayer, self).FindLayer(LayerName)
    def Activate(self, containerScreen):
        '''Method IGraphicsLayer.Activate (from IGraphicsLayer)

           INPUT
            containerScreen     : IScreenDisplay*'''
        return super(ICompositeGraphicsLayer, self).Activate(containerScreen)
    def Deactivate(self):
        '''Method IGraphicsLayer.Deactivate (from IGraphicsLayer)'''
        return super(ICompositeGraphicsLayer, self).Deactivate()
    def get_UseAssociatedLayerVisibility(self):
        '''Method IGraphicsLayer.get_UseAssociatedLayerVisibility (from IGraphicsLayer)

           OUTPUT
            useLayer            : VARIANT_BOOL*'''
        return super(ICompositeGraphicsLayer, self).get_UseAssociatedLayerVisibility()
    def put_UseAssociatedLayerVisibility(self, useLayer):
        '''Method IGraphicsLayer.put_UseAssociatedLayerVisibility (from IGraphicsLayer)

           INPUT
            useLayer            : VARIANT_BOOL'''
        return super(ICompositeGraphicsLayer, self).put_UseAssociatedLayerVisibility(useLayer)
    def get_AssociatedLayer(self):
        '''Method IGraphicsLayer.get_AssociatedLayer (from IGraphicsLayer)

           OUTPUT
            Layer               : ILayer**'''
        return super(ICompositeGraphicsLayer, self).get_AssociatedLayer()
    def putref_AssociatedLayer(self, Layer):
        '''Method IGraphicsLayer.putref_AssociatedLayer (from IGraphicsLayer)

           INPUT
            Layer               : ILayer*'''
        return super(ICompositeGraphicsLayer, self).putref_AssociatedLayer(Layer)
    AssociatedLayer = property(get_AssociatedLayer, putref_AssociatedLayer, None)
    UseAssociatedLayerVisibility = property(get_UseAssociatedLayerVisibility, put_UseAssociatedLayerVisibility, None)

class ICompositeGraphicsLayer2(_esriCarto.ICompositeGraphicsLayer2):
    _IID = uuid.UUID('93e56956-347a-4a37-bae3-46f5515270d1')

    def __init__(self, *args, **kw):
        super(ICompositeGraphicsLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DrawDefault(self, DrawPhase, Display, TrackCancel):
        '''Method ICompositeGraphicsLayer2.DrawDefault

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ICompositeGraphicsLayer2, self).DrawDefault(DrawPhase, Display, TrackCancel)
    def AddLayer(self, LayerName, FeatureLayer):
        '''Method ICompositeGraphicsLayer.AddLayer (from ICompositeGraphicsLayer)

           INPUTS
            LayerName           : BSTR
            FeatureLayer        : IFeatureLayer*

           OUTPUT
            GraphicsLayer       : IGraphicsLayer**'''
        return super(ICompositeGraphicsLayer2, self).AddLayer(LayerName, FeatureLayer)
    def DeleteLayer(self, LayerName):
        '''Method ICompositeGraphicsLayer.DeleteLayer (from ICompositeGraphicsLayer)

           INPUT
            LayerName           : BSTR'''
        return super(ICompositeGraphicsLayer2, self).DeleteLayer(LayerName)
    def FindLayer(self, LayerName):
        '''Method ICompositeGraphicsLayer.FindLayer (from ICompositeGraphicsLayer)

           INPUT
            LayerName           : BSTR

           OUTPUT
            GraphicsLayer       : IGraphicsLayer**'''
        return super(ICompositeGraphicsLayer2, self).FindLayer(LayerName)
    def Activate(self, containerScreen):
        '''Method IGraphicsLayer.Activate (from IGraphicsLayer)

           INPUT
            containerScreen     : IScreenDisplay*'''
        return super(ICompositeGraphicsLayer2, self).Activate(containerScreen)
    def Deactivate(self):
        '''Method IGraphicsLayer.Deactivate (from IGraphicsLayer)'''
        return super(ICompositeGraphicsLayer2, self).Deactivate()
    def get_UseAssociatedLayerVisibility(self):
        '''Method IGraphicsLayer.get_UseAssociatedLayerVisibility (from IGraphicsLayer)

           OUTPUT
            useLayer            : VARIANT_BOOL*'''
        return super(ICompositeGraphicsLayer2, self).get_UseAssociatedLayerVisibility()
    def put_UseAssociatedLayerVisibility(self, useLayer):
        '''Method IGraphicsLayer.put_UseAssociatedLayerVisibility (from IGraphicsLayer)

           INPUT
            useLayer            : VARIANT_BOOL'''
        return super(ICompositeGraphicsLayer2, self).put_UseAssociatedLayerVisibility(useLayer)
    def get_AssociatedLayer(self):
        '''Method IGraphicsLayer.get_AssociatedLayer (from IGraphicsLayer)

           OUTPUT
            Layer               : ILayer**'''
        return super(ICompositeGraphicsLayer2, self).get_AssociatedLayer()
    def putref_AssociatedLayer(self, Layer):
        '''Method IGraphicsLayer.putref_AssociatedLayer (from IGraphicsLayer)

           INPUT
            Layer               : ILayer*'''
        return super(ICompositeGraphicsLayer2, self).putref_AssociatedLayer(Layer)
    AssociatedLayer = property(get_AssociatedLayer, putref_AssociatedLayer, None)
    UseAssociatedLayerVisibility = property(get_UseAssociatedLayerVisibility, put_UseAssociatedLayerVisibility, None)

class IFeatureLayerSymbology(_esriCarto.IFeatureLayerSymbology):
    _IID = uuid.UUID('953d1a95-5411-4ee5-8db9-a87e80f9c551')
    def get_CanSymbolize(self, FeatureLayer):
        '''Method IFeatureLayerSymbology.get_CanSymbolize

           INPUT
            FeatureLayer        : IFeatureLayer*

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IFeatureLayerSymbology, self).get_CanSymbolize(FeatureLayer)
    def get_Priority(self):
        '''Method IFeatureLayerSymbology.get_Priority

           OUTPUT
            Priority            : double*'''
        return super(IFeatureLayerSymbology, self).get_Priority()
    def Symbolize(self, FeatureLayer):
        '''Method IFeatureLayerSymbology.Symbolize

           INPUT
            FeatureLayer        : IFeatureLayer*'''
        return super(IFeatureLayerSymbology, self).Symbolize(FeatureLayer)
    Priority = property(get_Priority, None, None)
    CanSymbolize = IndexProperty(get_CanSymbolize, None)

class IRelationshipClassCollection(_esriCarto.IRelationshipClassCollection):
    _IID = uuid.UUID('741d6114-fb6b-11d3-adf5-00c04fa33a15')
    def get_RelationshipClasses(self):
        '''Method IRelationshipClassCollection.get_RelationshipClasses

           OUTPUT
            RelationshipClasses : IEnumRelationshipClass**'''
        return super(IRelationshipClassCollection, self).get_RelationshipClasses()
    def FindRelationshipClasses(self, objectClass, Role):
        '''Method IRelationshipClassCollection.FindRelationshipClasses

           INPUTS
            objectClass         : IObjectClass*
            Role                : esriRelRole

           OUTPUT
            RelationshipClasses : IEnumRelationshipClass**'''
        return super(IRelationshipClassCollection, self).FindRelationshipClasses(objectClass, Role)
    RelationshipClasses = property(get_RelationshipClasses, None, None)

class IRelationshipClassCollectionEdit(_esriCarto.IRelationshipClassCollectionEdit):
    _IID = uuid.UUID('b725de95-ff76-11d3-a0b5-00c04f6bc626')
    def AddRelationshipClass(self, RelationshipClass):
        '''Method IRelationshipClassCollectionEdit.AddRelationshipClass

           INPUT
            RelationshipClass   : IRelationshipClass*'''
        return super(IRelationshipClassCollectionEdit, self).AddRelationshipClass(RelationshipClass)
    def RemoveRelationshipClass(self, RelationshipClass):
        '''Method IRelationshipClassCollectionEdit.RemoveRelationshipClass

           INPUT
            RelationshipClass   : IRelationshipClass*'''
        return super(IRelationshipClassCollectionEdit, self).RemoveRelationshipClass(RelationshipClass)
    def RemoveAllRelationshipClasses(self):
        '''Method IRelationshipClassCollectionEdit.RemoveAllRelationshipClasses'''
        return super(IRelationshipClassCollectionEdit, self).RemoveAllRelationshipClasses()

class ISimpleRenderer(_esriCarto.ISimpleRenderer):
    _IID = uuid.UUID('f3435800-5779-11d0-98bf-00805f7ced21')

    def __init__(self, *args, **kw):
        super(ISimpleRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method ISimpleRenderer.get_Symbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ISimpleRenderer, self).get_Symbol()
    def putref_Symbol(self, Symbol):
        '''Method ISimpleRenderer.putref_Symbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ISimpleRenderer, self).putref_Symbol(Symbol)
    def get_Label(self):
        '''Method ISimpleRenderer.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(ISimpleRenderer, self).get_Label()
    def put_Label(self, Label):
        '''Method ISimpleRenderer.put_Label

           INPUT
            Label               : BSTR'''
        return super(ISimpleRenderer, self).put_Label(Label)
    def get_Description(self):
        '''Method ISimpleRenderer.get_Description

           OUTPUT
            Text                : BSTR*'''
        return super(ISimpleRenderer, self).get_Description()
    def put_Description(self, Text):
        '''Method ISimpleRenderer.put_Description

           INPUT
            Text                : BSTR'''
        return super(ISimpleRenderer, self).put_Description(Text)
    Description = property(get_Description, put_Description, None)
    Label = property(get_Label, put_Label, None)
    Symbol = property(get_Symbol, putref_Symbol, None)

class IClassBreaksRenderer(_esriCarto.IClassBreaksRenderer):
    _IID = uuid.UUID('ae5f7ea1-8b48-11d0-8356-080009b996cc')

    def __init__(self, *args, **kw):
        super(IClassBreaksRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BreakCount(self):
        '''Method IClassBreaksRenderer.get_BreakCount

           OUTPUT
            ValueCount          : long*'''
        return super(IClassBreaksRenderer, self).get_BreakCount()
    def put_BreakCount(self, ValueCount):
        '''Method IClassBreaksRenderer.put_BreakCount

           INPUT
            ValueCount          : long'''
        return super(IClassBreaksRenderer, self).put_BreakCount(ValueCount)
    def get_Field(self):
        '''Method IClassBreaksRenderer.get_Field

           OUTPUT
            Field               : BSTR*'''
        return super(IClassBreaksRenderer, self).get_Field()
    def put_Field(self, Field):
        '''Method IClassBreaksRenderer.put_Field

           INPUT
            Field               : BSTR'''
        return super(IClassBreaksRenderer, self).put_Field(Field)
    def get_NormField(self):
        '''Method IClassBreaksRenderer.get_NormField

           OUTPUT
            Field               : BSTR*'''
        return super(IClassBreaksRenderer, self).get_NormField()
    def put_NormField(self, Field):
        '''Method IClassBreaksRenderer.put_NormField

           INPUT
            Field               : BSTR'''
        return super(IClassBreaksRenderer, self).put_NormField(Field)
    def get_Symbol(self, Index):
        '''Method IClassBreaksRenderer.get_Symbol

           INPUT
            Index               : long

           OUTPUT
            sym                 : ISymbol**'''
        return super(IClassBreaksRenderer, self).get_Symbol(Index)
    def put_Symbol(self, Index, sym):
        '''Method IClassBreaksRenderer.put_Symbol

           INPUTS
            Index               : long
            sym                 : ISymbol*'''
        return super(IClassBreaksRenderer, self).put_Symbol(Index, sym)
    def get_Label(self, Index):
        '''Method IClassBreaksRenderer.get_Label

           INPUT
            Index               : long

           OUTPUT
            Label               : BSTR*'''
        return super(IClassBreaksRenderer, self).get_Label(Index)
    def put_Label(self, Index, Label):
        '''Method IClassBreaksRenderer.put_Label

           INPUTS
            Index               : long
            Label               : BSTR'''
        return super(IClassBreaksRenderer, self).put_Label(Index, Label)
    def get_Description(self, Index):
        '''Method IClassBreaksRenderer.get_Description

           INPUT
            Index               : long

           OUTPUT
            Text                : BSTR*'''
        return super(IClassBreaksRenderer, self).get_Description(Index)
    def put_Description(self, Index, Text):
        '''Method IClassBreaksRenderer.put_Description

           INPUTS
            Index               : long
            Text                : BSTR'''
        return super(IClassBreaksRenderer, self).put_Description(Index, Text)
    def get_Break(self, Index):
        '''Method IClassBreaksRenderer.get_Break

           INPUT
            Index               : long

           OUTPUT
            Value               : double*'''
        return super(IClassBreaksRenderer, self).get_Break(Index)
    def put_Break(self, Index, Value):
        '''Method IClassBreaksRenderer.put_Break

           INPUTS
            Index               : long
            Value               : double'''
        return super(IClassBreaksRenderer, self).put_Break(Index, Value)
    def get_MinimumBreak(self):
        '''Method IClassBreaksRenderer.get_MinimumBreak

           OUTPUT
            Value               : double*'''
        return super(IClassBreaksRenderer, self).get_MinimumBreak()
    def put_MinimumBreak(self, Value):
        '''Method IClassBreaksRenderer.put_MinimumBreak

           INPUT
            Value               : double'''
        return super(IClassBreaksRenderer, self).put_MinimumBreak(Value)
    def get_SortClassesAscending(self):
        '''Method IClassBreaksRenderer.get_SortClassesAscending

           OUTPUT
            Ascending           : VARIANT_BOOL*'''
        return super(IClassBreaksRenderer, self).get_SortClassesAscending()
    def put_SortClassesAscending(self, Ascending):
        '''Method IClassBreaksRenderer.put_SortClassesAscending

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(IClassBreaksRenderer, self).put_SortClassesAscending(Ascending)
    def get_BackgroundSymbol(self):
        '''Method IClassBreaksRenderer.get_BackgroundSymbol

           OUTPUT
            sym                 : IFillSymbol**'''
        return super(IClassBreaksRenderer, self).get_BackgroundSymbol()
    def put_BackgroundSymbol(self, sym):
        '''Method IClassBreaksRenderer.put_BackgroundSymbol

           INPUT
            sym                 : IFillSymbol*'''
        return super(IClassBreaksRenderer, self).put_BackgroundSymbol(sym)
    BackgroundSymbol = property(get_BackgroundSymbol, put_BackgroundSymbol, None)
    Break = property(None, put_Break, None)
    BreakCount = property(get_BreakCount, put_BreakCount, None)
    Description = property(None, put_Description, None)
    Field = property(get_Field, put_Field, None)
    Label = property(None, put_Label, None)
    MinimumBreak = property(get_MinimumBreak, put_MinimumBreak, None)
    NormField = property(get_NormField, put_NormField, None)
    SortClassesAscending = property(get_SortClassesAscending, put_SortClassesAscending, None)
    Symbol = property(None, put_Symbol, None)
    Break = IndexProperty(get_Break, None)
    Description = IndexProperty(get_Description, None)
    Label = IndexProperty(get_Label, None)
    Symbol = IndexProperty(get_Symbol, None)

class IUniqueValueRenderer(_esriCarto.IUniqueValueRenderer):
    _IID = uuid.UUID('c3346d2a-b2bc-11d1-8817-080009ec732a')

    def __init__(self, *args, **kw):
        super(IUniqueValueRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Field(self, Index):
        '''Method IUniqueValueRenderer.get_Field

           INPUT
            Index               : long

           OUTPUT
            Field               : BSTR*'''
        return super(IUniqueValueRenderer, self).get_Field(Index)
    def put_Field(self, Index, Field):
        '''Method IUniqueValueRenderer.put_Field

           INPUTS
            Index               : long
            Field               : BSTR'''
        return super(IUniqueValueRenderer, self).put_Field(Index, Field)
    def put_FieldType(self, Index, _arg2):
        '''Method IUniqueValueRenderer.put_FieldType

           INPUTS
            Index               : long
            _arg2               : VARIANT_BOOL'''
        return super(IUniqueValueRenderer, self).put_FieldType(Index, _arg2)
    def get_FieldDelimiter(self):
        '''Method IUniqueValueRenderer.get_FieldDelimiter

           OUTPUT
            delimiter           : BSTR*'''
        return super(IUniqueValueRenderer, self).get_FieldDelimiter()
    def put_FieldDelimiter(self, delimiter):
        '''Method IUniqueValueRenderer.put_FieldDelimiter

           INPUT
            delimiter           : BSTR'''
        return super(IUniqueValueRenderer, self).put_FieldDelimiter(delimiter)
    def get_FieldCount(self):
        '''Method IUniqueValueRenderer.get_FieldCount

           OUTPUT
            FieldCount          : long*'''
        return super(IUniqueValueRenderer, self).get_FieldCount()
    def put_FieldCount(self, FieldCount):
        '''Method IUniqueValueRenderer.put_FieldCount

           INPUT
            FieldCount          : long'''
        return super(IUniqueValueRenderer, self).put_FieldCount(FieldCount)
    def get_DefaultSymbol(self):
        '''Method IUniqueValueRenderer.get_DefaultSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IUniqueValueRenderer, self).get_DefaultSymbol()
    def put_DefaultSymbol(self, Symbol):
        '''Method IUniqueValueRenderer.put_DefaultSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(IUniqueValueRenderer, self).put_DefaultSymbol(Symbol)
    def get_DefaultLabel(self):
        '''Method IUniqueValueRenderer.get_DefaultLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IUniqueValueRenderer, self).get_DefaultLabel()
    def put_DefaultLabel(self, Label):
        '''Method IUniqueValueRenderer.put_DefaultLabel

           INPUT
            Label               : BSTR'''
        return super(IUniqueValueRenderer, self).put_DefaultLabel(Label)
    def get_UseDefaultSymbol(self):
        '''Method IUniqueValueRenderer.get_UseDefaultSymbol

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IUniqueValueRenderer, self).get_UseDefaultSymbol()
    def put_UseDefaultSymbol(self, flag):
        '''Method IUniqueValueRenderer.put_UseDefaultSymbol

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IUniqueValueRenderer, self).put_UseDefaultSymbol(flag)
    def get_ValueCount(self):
        '''Method IUniqueValueRenderer.get_ValueCount

           OUTPUT
            ValueCount          : long*'''
        return super(IUniqueValueRenderer, self).get_ValueCount()
    def get_Value(self, Index):
        '''Method IUniqueValueRenderer.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : BSTR*'''
        return super(IUniqueValueRenderer, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method IUniqueValueRenderer.put_Value

           INPUTS
            Index               : long
            Value               : BSTR'''
        return super(IUniqueValueRenderer, self).put_Value(Index, Value)
    def get_ReferenceValue(self, Value):
        '''Method IUniqueValueRenderer.get_ReferenceValue

           INPUT
            Value               : BSTR

           OUTPUT
            refValue            : BSTR*'''
        return super(IUniqueValueRenderer, self).get_ReferenceValue(Value)
    def AddReferenceValue(self, Value, refValue):
        '''Method IUniqueValueRenderer.AddReferenceValue

           INPUTS
            Value               : BSTR
            refValue            : BSTR'''
        return super(IUniqueValueRenderer, self).AddReferenceValue(Value, refValue)
    def get_Symbol(self, Value):
        '''Method IUniqueValueRenderer.get_Symbol

           INPUT
            Value               : BSTR

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IUniqueValueRenderer, self).get_Symbol(Value)
    def put_Symbol(self, Value, Symbol):
        '''Method IUniqueValueRenderer.put_Symbol

           INPUTS
            Value               : BSTR
            Symbol              : ISymbol*'''
        return super(IUniqueValueRenderer, self).put_Symbol(Value, Symbol)
    def get_Label(self, Value):
        '''Method IUniqueValueRenderer.get_Label

           INPUT
            Value               : BSTR

           OUTPUT
            Label               : BSTR*'''
        return super(IUniqueValueRenderer, self).get_Label(Value)
    def put_Label(self, Value, Label):
        '''Method IUniqueValueRenderer.put_Label

           INPUTS
            Value               : BSTR
            Label               : BSTR'''
        return super(IUniqueValueRenderer, self).put_Label(Value, Label)
    def get_Description(self, Value):
        '''Method IUniqueValueRenderer.get_Description

           INPUT
            Value               : BSTR

           OUTPUT
            Text                : BSTR*'''
        return super(IUniqueValueRenderer, self).get_Description(Value)
    def put_Description(self, Value, Text):
        '''Method IUniqueValueRenderer.put_Description

           INPUTS
            Value               : BSTR
            Text                : BSTR'''
        return super(IUniqueValueRenderer, self).put_Description(Value, Text)
    def get_Heading(self, Value):
        '''Method IUniqueValueRenderer.get_Heading

           INPUT
            Value               : BSTR

           OUTPUT
            Heading             : BSTR*'''
        return super(IUniqueValueRenderer, self).get_Heading(Value)
    def put_Heading(self, Value, Heading):
        '''Method IUniqueValueRenderer.put_Heading

           INPUTS
            Value               : BSTR
            Heading             : BSTR'''
        return super(IUniqueValueRenderer, self).put_Heading(Value, Heading)
    def AddValue(self, Value, Heading, Symbol):
        '''Method IUniqueValueRenderer.AddValue

           INPUTS
            Value               : BSTR
            Heading             : BSTR
            Symbol              : ISymbol*'''
        return super(IUniqueValueRenderer, self).AddValue(Value, Heading, Symbol)
    def RemoveValue(self, Value):
        '''Method IUniqueValueRenderer.RemoveValue

           INPUT
            Value               : BSTR'''
        return super(IUniqueValueRenderer, self).RemoveValue(Value)
    def RemoveAllValues(self):
        '''Method IUniqueValueRenderer.RemoveAllValues'''
        return super(IUniqueValueRenderer, self).RemoveAllValues()
    def get_ColorScheme(self):
        '''Method IUniqueValueRenderer.get_ColorScheme

           OUTPUT
            Name                : BSTR*'''
        return super(IUniqueValueRenderer, self).get_ColorScheme()
    def put_ColorScheme(self, Name):
        '''Method IUniqueValueRenderer.put_ColorScheme

           INPUT
            Name                : BSTR'''
        return super(IUniqueValueRenderer, self).put_ColorScheme(Name)
    def get_LookupStyleset(self):
        '''Method IUniqueValueRenderer.get_LookupStyleset

           OUTPUT
            Name                : BSTR*'''
        return super(IUniqueValueRenderer, self).get_LookupStyleset()
    def put_LookupStyleset(self, Name):
        '''Method IUniqueValueRenderer.put_LookupStyleset

           INPUT
            Name                : BSTR'''
        return super(IUniqueValueRenderer, self).put_LookupStyleset(Name)
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)
    DefaultLabel = property(get_DefaultLabel, put_DefaultLabel, None)
    DefaultSymbol = property(get_DefaultSymbol, put_DefaultSymbol, None)
    Description = property(None, put_Description, None)
    Field = property(None, put_Field, None)
    FieldCount = property(get_FieldCount, put_FieldCount, None)
    FieldDelimiter = property(get_FieldDelimiter, put_FieldDelimiter, None)
    FieldType = property(None, put_FieldType, None)
    Heading = property(None, put_Heading, None)
    Label = property(None, put_Label, None)
    LookupStyleset = property(get_LookupStyleset, put_LookupStyleset, None)
    Symbol = property(None, put_Symbol, None)
    UseDefaultSymbol = property(get_UseDefaultSymbol, put_UseDefaultSymbol, None)
    Value = property(None, put_Value, None)
    ValueCount = property(get_ValueCount, None, None)
    Description = IndexProperty(get_Description, None)
    Field = IndexProperty(get_Field, None)
    Heading = IndexProperty(get_Heading, None)
    Label = IndexProperty(get_Label, None)
    ReferenceValue = IndexProperty(get_ReferenceValue, None)
    Symbol = IndexProperty(get_Symbol, None)
    Value = IndexProperty(get_Value, None)

class IUniqueValueRenderer2(_esriCarto.IUniqueValueRenderer2):
    _IID = uuid.UUID('78b2e6fc-a027-4b63-a52d-3ad0ba2f2e81')

    def __init__(self, *args, **kw):
        super(IUniqueValueRenderer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ColorRamp(self):
        '''Method IUniqueValueRenderer2.get_ColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IUniqueValueRenderer2, self).get_ColorRamp()
    def putref_ColorRamp(self, ppColorRamp):
        '''Method IUniqueValueRenderer2.putref_ColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IUniqueValueRenderer2, self).putref_ColorRamp(ppColorRamp)
    def get_ReverseUniqueValuesSorting(self):
        '''Method IUniqueValueRenderer2.get_ReverseUniqueValuesSorting

           OUTPUT
            Ascending           : VARIANT_BOOL*'''
        return super(IUniqueValueRenderer2, self).get_ReverseUniqueValuesSorting()
    def put_ReverseUniqueValuesSorting(self, Ascending):
        '''Method IUniqueValueRenderer2.put_ReverseUniqueValuesSorting

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(IUniqueValueRenderer2, self).put_ReverseUniqueValuesSorting(Ascending)
    def get_FlipSymbols(self):
        '''Method IUniqueValueRenderer2.get_FlipSymbols

           OUTPUT
            Ascending           : VARIANT_BOOL*'''
        return super(IUniqueValueRenderer2, self).get_FlipSymbols()
    def put_FlipSymbols(self, Ascending):
        '''Method IUniqueValueRenderer2.put_FlipSymbols

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(IUniqueValueRenderer2, self).put_FlipSymbols(Ascending)
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)
    FlipSymbols = property(get_FlipSymbols, put_FlipSymbols, None)
    ReverseUniqueValuesSorting = property(get_ReverseUniqueValuesSorting, put_ReverseUniqueValuesSorting, None)

class IMarker3DRotationAngles(_esriCarto.IMarker3DRotationAngles):
    _IID = uuid.UUID('973d0fbb-0fe4-49df-8dbc-ecda8fe6a566')
    def GetRotationAngles(self, pSymbol):
        '''Method IMarker3DRotationAngles.GetRotationAngles

           INPUT
            pSymbol             : ISymbol*

           OUTPUTS
            pAngleX             : double*
            pAngleY             : double*
            pAngleZ             : double*'''
        return super(IMarker3DRotationAngles, self).GetRotationAngles(pSymbol)
    def SetRotationAngles(self, pSymbol, angleX, angleY, angleZ):
        '''Method IMarker3DRotationAngles.SetRotationAngles

           INPUTS
            pSymbol             : ISymbol*
            angleX              : double
            angleY              : double
            angleZ              : double'''
        return super(IMarker3DRotationAngles, self).SetRotationAngles(pSymbol, angleX, angleY, angleZ)

class ISizeRenderer(_esriCarto.ISizeRenderer):
    _IID = uuid.UUID('5ba3418a-4ba5-431a-b879-f2539c7be5ff')

    def __init__(self, *args, **kw):
        super(ISizeRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SizeRendererFlags(self):
        '''Method ISizeRenderer.get_SizeRendererFlags

           OUTPUT
            pFlags              : long*'''
        return super(ISizeRenderer, self).get_SizeRendererFlags()
    def put_SizeRendererFlags(self, pFlags):
        '''Method ISizeRenderer.put_SizeRendererFlags

           INPUT
            pFlags              : long'''
        return super(ISizeRenderer, self).put_SizeRendererFlags(pFlags)
    def get_SizeRendererExpression(self):
        '''Method ISizeRenderer.get_SizeRendererExpression

           OUTPUT
            pExpression         : BSTR*'''
        return super(ISizeRenderer, self).get_SizeRendererExpression()
    def put_SizeRendererExpression(self, pExpression):
        '''Method ISizeRenderer.put_SizeRendererExpression

           INPUT
            pExpression         : BSTR'''
        return super(ISizeRenderer, self).put_SizeRendererExpression(pExpression)
    def GetSizeRendererRandomRange(self):
        '''Method ISizeRenderer.GetSizeRendererRandomRange

           OUTPUTS
            pMinSize            : double*
            pMaxSize            : double*'''
        return super(ISizeRenderer, self).GetSizeRendererRandomRange()
    def SetSizeRendererRandomRange(self, MinSize, maxSize):
        '''Method ISizeRenderer.SetSizeRendererRandomRange

           INPUTS
            MinSize             : double
            maxSize             : double'''
        return super(ISizeRenderer, self).SetSizeRendererRandomRange(MinSize, maxSize)
    SizeRendererExpression = property(get_SizeRendererExpression, put_SizeRendererExpression, None)
    SizeRendererFlags = property(get_SizeRendererFlags, put_SizeRendererFlags, None)

class IRendererClasses(_esriCarto.IRendererClasses):
    _IID = uuid.UUID('3f25cc56-cc66-4930-a5fd-bc981601cea6')
    def get_ClassCount(self):
        '''Method IRendererClasses.get_ClassCount

           OUTPUT
            Count               : long*'''
        return super(IRendererClasses, self).get_ClassCount()
    def get_Class(self, Index):
        '''Method IRendererClasses.get_Class

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IRendererClasses, self).get_Class(Index)
    def get_WhereClause(self, Index, Table):
        '''Method IRendererClasses.get_WhereClause

           INPUTS
            Index               : long
            Table               : ITable*

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IRendererClasses, self).get_WhereClause(Index, Table)
    ClassCount = property(get_ClassCount, None, None)
    Class = IndexProperty(get_Class, None)

class IBasicHistogram(_esriCarto.IBasicHistogram):
    _IID = uuid.UUID('d7dd57c6-6a35-4dbf-8f64-affdced5c364')

    def __init__(self, *args, **kw):
        super(IBasicHistogram, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetHistogram(self):
        '''Method IBasicHistogram.GetHistogram

           OUTPUTS
            doubleArrayValues   : VARIANT*
            longArrayFrequencies: VARIANT*
            isSampled           : VARIANT_BOOL*'''
        return super(IBasicHistogram, self).GetHistogram()
    def put_CustomMin(self, _arg1):
        '''Method IBasicHistogram.put_CustomMin

           INPUT
            _arg1               : double'''
        return super(IBasicHistogram, self).put_CustomMin(_arg1)
    def put_CustomMax(self, _arg1):
        '''Method IBasicHistogram.put_CustomMax

           INPUT
            _arg1               : double'''
        return super(IBasicHistogram, self).put_CustomMax(_arg1)
    def ResetCustomMinMax(self):
        '''Method IBasicHistogram.ResetCustomMinMax'''
        return super(IBasicHistogram, self).ResetCustomMinMax()
    def Invalidate(self):
        '''Method IBasicHistogram.Invalidate'''
        return super(IBasicHistogram, self).Invalidate()
    CustomMax = property(None, put_CustomMax, None)
    CustomMin = property(None, put_CustomMin, None)

class ITableHistogram(_esriCarto.ITableHistogram):
    _IID = uuid.UUID('fd21f230-67a6-11d3-9f66-00c04f6bc709')

    def __init__(self, *args, **kw):
        super(ITableHistogram, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Table(self, Table):
        '''Method ITableHistogram.putref_Table

           INPUT
            Table               : ITable*'''
        return super(ITableHistogram, self).putref_Table(Table)
    def get_Table(self):
        '''Method ITableHistogram.get_Table

           OUTPUT
            Table               : ITable**'''
        return super(ITableHistogram, self).get_Table()
    def putref_Exclusion(self, dataExclusion):
        '''Method ITableHistogram.putref_Exclusion

           INPUT
            dataExclusion       : IDataExclusion*'''
        return super(ITableHistogram, self).putref_Exclusion(dataExclusion)
    def get_Exclusion(self):
        '''Method ITableHistogram.get_Exclusion

           OUTPUT
            dataExclusion       : IDataExclusion**'''
        return super(ITableHistogram, self).get_Exclusion()
    def putref_Sampling(self, dataSampling):
        '''Method ITableHistogram.putref_Sampling

           INPUT
            dataSampling        : IDataSampling*'''
        return super(ITableHistogram, self).putref_Sampling(dataSampling)
    def get_Sampling(self):
        '''Method ITableHistogram.get_Sampling

           OUTPUT
            dataSampling        : IDataSampling**'''
        return super(ITableHistogram, self).get_Sampling()
    def put_Field(self, Name):
        '''Method ITableHistogram.put_Field

           INPUT
            Name                : BSTR'''
        return super(ITableHistogram, self).put_Field(Name)
    def get_Field(self):
        '''Method ITableHistogram.get_Field

           OUTPUT
            Name                : BSTR*'''
        return super(ITableHistogram, self).get_Field()
    def put_NormField(self, Name):
        '''Method ITableHistogram.put_NormField

           INPUT
            Name                : BSTR'''
        return super(ITableHistogram, self).put_NormField(Name)
    def get_NormField(self):
        '''Method ITableHistogram.get_NormField

           OUTPUT
            Name                : BSTR*'''
        return super(ITableHistogram, self).get_NormField()
    Exclusion = property(get_Exclusion, putref_Exclusion, None)
    Field = property(get_Field, put_Field, None)
    NormField = property(get_NormField, put_NormField, None)
    Sampling = property(get_Sampling, putref_Sampling, None)
    Table = property(get_Table, putref_Table, None)

class ITableHistogram2(_esriCarto.ITableHistogram2):
    _IID = uuid.UUID('58c7e73a-fc61-452d-a908-7a072af25e2a')

    def __init__(self, *args, **kw):
        super(ITableHistogram2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ExclusionClause(self, Name):
        '''Method ITableHistogram2.put_ExclusionClause

           INPUT
            Name                : BSTR'''
        return super(ITableHistogram2, self).put_ExclusionClause(Name)
    def get_ExclusionClause(self):
        '''Method ITableHistogram2.get_ExclusionClause

           OUTPUT
            Name                : BSTR*'''
        return super(ITableHistogram2, self).get_ExclusionClause()
    def put_MaxSampleSize(self, Size):
        '''Method ITableHistogram2.put_MaxSampleSize

           INPUT
            Size                : long'''
        return super(ITableHistogram2, self).put_MaxSampleSize(Size)
    def get_MaxSampleSize(self):
        '''Method ITableHistogram2.get_MaxSampleSize

           OUTPUT
            Size                : long*'''
        return super(ITableHistogram2, self).get_MaxSampleSize()
    ExclusionClause = property(get_ExclusionClause, put_ExclusionClause, None)
    MaxSampleSize = property(get_MaxSampleSize, put_MaxSampleSize, None)

class IGraphicsContainerEvents(_esriCarto.IGraphicsContainerEvents):
    _IID = uuid.UUID('8694707c-d4e2-4f77-a02f-d36397a8534d')
    def ElementAdded(self, Element):
        '''Method IGraphicsContainerEvents.ElementAdded

           INPUT
            Element             : IElement*'''
        return super(IGraphicsContainerEvents, self).ElementAdded(Element)
    def ElementsAdded(self, Elements):
        '''Method IGraphicsContainerEvents.ElementsAdded

           INPUT
            Elements            : IElementCollection*'''
        return super(IGraphicsContainerEvents, self).ElementsAdded(Elements)
    def ElementDeleted(self, Element):
        '''Method IGraphicsContainerEvents.ElementDeleted

           INPUT
            Element             : IElement*'''
        return super(IGraphicsContainerEvents, self).ElementDeleted(Element)
    def AllElementsDeleted(self):
        '''Method IGraphicsContainerEvents.AllElementsDeleted'''
        return super(IGraphicsContainerEvents, self).AllElementsDeleted()
    def ElementUpdated(self, Element):
        '''Method IGraphicsContainerEvents.ElementUpdated

           INPUT
            Element             : IElement*'''
        return super(IGraphicsContainerEvents, self).ElementUpdated(Element)

class ILayerExtensionDraw(_esriCarto.ILayerExtensionDraw):
    _IID = uuid.UUID('681c8ddc-0f37-42e2-9cbb-ca614e0bc6e5')
    def BeforeLayerDraw(self, pLayer, DrawPhase, pDisplay, pTrackCancel):
        '''Method ILayerExtensionDraw.BeforeLayerDraw

           INPUTS
            pLayer              : ILayer*
            DrawPhase           : esriDrawPhase
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(ILayerExtensionDraw, self).BeforeLayerDraw(pLayer, DrawPhase, pDisplay, pTrackCancel)
    def AfterLayerDraw(self, pLayer, DrawPhase, pDisplay, pTrackCancel):
        '''Method ILayerExtensionDraw.AfterLayerDraw

           INPUTS
            pLayer              : ILayer*
            DrawPhase           : esriDrawPhase
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(ILayerExtensionDraw, self).AfterLayerDraw(pLayer, DrawPhase, pDisplay, pTrackCancel)

class ILayerExtensionInvalidate(_esriCarto.ILayerExtensionInvalidate):
    _IID = uuid.UUID('4bf024b4-561d-439d-aad3-ac068f52108d')
    def InvalidateVisibleExtent(self):
        '''Method ILayerExtensionInvalidate.InvalidateVisibleExtent

           OUTPUT
            pInvalidateVisibleExtent: VARIANT_BOOL*'''
        return super(ILayerExtensionInvalidate, self).InvalidateVisibleExtent()

class ISymbolLevels(_esriCarto.ISymbolLevels):
    _IID = uuid.UUID('7a3e4ac0-d4e0-4f56-97df-709ab216daa1')

    def __init__(self, *args, **kw):
        super(ISymbolLevels, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseSymbolLevels(self):
        '''Method ISymbolLevels.get_UseSymbolLevels

           OUTPUT
            UseSymbolLevels     : VARIANT_BOOL*'''
        return super(ISymbolLevels, self).get_UseSymbolLevels()
    def put_UseSymbolLevels(self, UseSymbolLevels):
        '''Method ISymbolLevels.put_UseSymbolLevels

           INPUT
            UseSymbolLevels     : VARIANT_BOOL'''
        return super(ISymbolLevels, self).put_UseSymbolLevels(UseSymbolLevels)
    UseSymbolLevels = property(get_UseSymbolLevels, put_UseSymbolLevels, None)

class IFeatureCache(_esriCarto.IFeatureCache):
    _IID = uuid.UUID('a802ba71-d947-11d1-8484-0000f875b9c6')
    def Initialize(self, point, Size):
        '''Method IFeatureCache.Initialize

           INPUTS
            point               : IPoint*
            Size                : double'''
        return super(IFeatureCache, self).Initialize(point, Size)
    def AddFeatures(self, fclass):
        '''Method IFeatureCache.AddFeatures

           INPUT
            fclass              : IFeatureClass*'''
        return super(IFeatureCache, self).AddFeatures(fclass)
    def Contains(self, point):
        '''Method IFeatureCache.Contains

           INPUT
            point               : IPoint*

           OUTPUT
            Contains            : VARIANT_BOOL*'''
        return super(IFeatureCache, self).Contains(point)
    def get_Count(self):
        '''Method IFeatureCache.get_Count

           OUTPUT
            Count               : long*'''
        return super(IFeatureCache, self).get_Count()
    def get_Feature(self, Index):
        '''Method IFeatureCache.get_Feature

           INPUT
            Index               : long

           OUTPUT
            Feature             : IFeature**'''
        return super(IFeatureCache, self).get_Feature(Index)
    Count = property(get_Count, None, None)
    Feature = IndexProperty(get_Feature, None)

class IFeatureCache2(_esriCarto.IFeatureCache2):
    _IID = uuid.UUID('fcf1e491-5ba6-11d4-8367-0080c7e20671')
    def AddFeatures(self, fclass, Clip):
        '''Method IFeatureCache2.AddFeatures

           INPUTS
            fclass              : IFeatureClass*
            Clip                : IEnvelope*'''
        return super(IFeatureCache2, self).AddFeatures(fclass, Clip)
    def AddLayers(self, Layers, Clip):
        '''Method IFeatureCache2.AddLayers

           INPUTS
            Layers              : IEnumLayer*
            Clip                : IEnvelope*'''
        return super(IFeatureCache2, self).AddLayers(Layers, Clip)
    def Initialize(self, point, Size):
        '''Method IFeatureCache2.Initialize

           INPUTS
            point               : IPoint*
            Size                : double'''
        return super(IFeatureCache2, self).Initialize(point, Size)
    def Contains(self, point):
        '''Method IFeatureCache2.Contains

           INPUT
            point               : IPoint*

           OUTPUT
            Contains            : VARIANT_BOOL*'''
        return super(IFeatureCache2, self).Contains(point)
    def get_Count(self):
        '''Method IFeatureCache2.get_Count

           OUTPUT
            Count               : long*'''
        return super(IFeatureCache2, self).get_Count()
    def get_Feature(self, Index):
        '''Method IFeatureCache2.get_Feature

           INPUT
            Index               : long

           OUTPUT
            Feature             : IFeature**'''
        return super(IFeatureCache2, self).get_Feature(Index)
    Count = property(get_Count, None, None)
    Feature = IndexProperty(get_Feature, None)

class IInteractiveSearch(_esriCarto.IInteractiveSearch):
    _IID = uuid.UUID('928b74f0-a666-4efe-a756-ea1e3dad6075')
    def VisibleFeatures(self, Filter):
        '''Method IInteractiveSearch.VisibleFeatures

           INPUT
            Filter              : IQueryFilter*'''
        return super(IInteractiveSearch, self).VisibleFeatures(Filter)

class IHTMLPopupInfo(_esriCarto.IHTMLPopupInfo):
    _IID = uuid.UUID('742678bc-aff5-41da-a523-36a8bd4e2c8b')

    def __init__(self, *args, **kw):
        super(IHTMLPopupInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HTMLPopupEnabled(self):
        '''Method IHTMLPopupInfo.get_HTMLPopupEnabled

           OUTPUT
            pEnabled            : VARIANT_BOOL*'''
        return super(IHTMLPopupInfo, self).get_HTMLPopupEnabled()
    def put_HTMLPopupEnabled(self, pEnabled):
        '''Method IHTMLPopupInfo.put_HTMLPopupEnabled

           INPUT
            pEnabled            : VARIANT_BOOL'''
        return super(IHTMLPopupInfo, self).put_HTMLPopupEnabled(pEnabled)
    def get_HTMLPresentationStyle(self):
        '''Method IHTMLPopupInfo.get_HTMLPresentationStyle

           OUTPUT
            pStyle              : esriHTMLPopupStyle*'''
        return super(IHTMLPopupInfo, self).get_HTMLPresentationStyle()
    def put_HTMLPresentationStyle(self, pStyle):
        '''Method IHTMLPopupInfo.put_HTMLPresentationStyle

           INPUT
            pStyle              : esriHTMLPopupStyle'''
        return super(IHTMLPopupInfo, self).put_HTMLPresentationStyle(pStyle)
    def get_HTMLHideFieldNameColumn(self):
        '''Method IHTMLPopupInfo.get_HTMLHideFieldNameColumn

           OUTPUT
            pHide               : VARIANT_BOOL*'''
        return super(IHTMLPopupInfo, self).get_HTMLHideFieldNameColumn()
    def put_HTMLHideFieldNameColumn(self, pHide):
        '''Method IHTMLPopupInfo.put_HTMLHideFieldNameColumn

           INPUT
            pHide               : VARIANT_BOOL'''
        return super(IHTMLPopupInfo, self).put_HTMLHideFieldNameColumn(pHide)
    def get_HTMLRedirectField(self):
        '''Method IHTMLPopupInfo.get_HTMLRedirectField

           OUTPUT
            pField              : BSTR*'''
        return super(IHTMLPopupInfo, self).get_HTMLRedirectField()
    def put_HTMLRedirectField(self, pField):
        '''Method IHTMLPopupInfo.put_HTMLRedirectField

           INPUT
            pField              : BSTR'''
        return super(IHTMLPopupInfo, self).put_HTMLRedirectField(pField)
    def get_HTMLRedirectFieldPrefix(self):
        '''Method IHTMLPopupInfo.get_HTMLRedirectFieldPrefix

           OUTPUT
            pPrefix             : BSTR*'''
        return super(IHTMLPopupInfo, self).get_HTMLRedirectFieldPrefix()
    def put_HTMLRedirectFieldPrefix(self, pPrefix):
        '''Method IHTMLPopupInfo.put_HTMLRedirectFieldPrefix

           INPUT
            pPrefix             : BSTR'''
        return super(IHTMLPopupInfo, self).put_HTMLRedirectFieldPrefix(pPrefix)
    def get_HTMLRedirectFieldSuffix(self):
        '''Method IHTMLPopupInfo.get_HTMLRedirectFieldSuffix

           OUTPUT
            pSufix              : BSTR*'''
        return super(IHTMLPopupInfo, self).get_HTMLRedirectFieldSuffix()
    def put_HTMLRedirectFieldSuffix(self, pSufix):
        '''Method IHTMLPopupInfo.put_HTMLRedirectFieldSuffix

           INPUT
            pSufix              : BSTR'''
        return super(IHTMLPopupInfo, self).put_HTMLRedirectFieldSuffix(pSufix)
    def get_HTMLXSLStylesheet(self):
        '''Method IHTMLPopupInfo.get_HTMLXSLStylesheet

           OUTPUT
            pStyleSheet         : BSTR*'''
        return super(IHTMLPopupInfo, self).get_HTMLXSLStylesheet()
    def put_HTMLXSLStylesheet(self, pStyleSheet):
        '''Method IHTMLPopupInfo.put_HTMLXSLStylesheet

           INPUT
            pStyleSheet         : BSTR'''
        return super(IHTMLPopupInfo, self).put_HTMLXSLStylesheet(pStyleSheet)
    def get_HTMLUseCodedDomainValues(self):
        '''Method IHTMLPopupInfo.get_HTMLUseCodedDomainValues

           OUTPUT
            pCodedValues        : VARIANT_BOOL*'''
        return super(IHTMLPopupInfo, self).get_HTMLUseCodedDomainValues()
    def put_HTMLUseCodedDomainValues(self, pCodedValues):
        '''Method IHTMLPopupInfo.put_HTMLUseCodedDomainValues

           INPUT
            pCodedValues        : VARIANT_BOOL'''
        return super(IHTMLPopupInfo, self).put_HTMLUseCodedDomainValues(pCodedValues)
    def get_HTMLOutput(self, pFeature):
        '''Method IHTMLPopupInfo.get_HTMLOutput

           INPUT
            pFeature            : IFeature*

           OUTPUT
            pHtml               : BSTR*'''
        return super(IHTMLPopupInfo, self).get_HTMLOutput(pFeature)
    HTMLHideFieldNameColumn = property(get_HTMLHideFieldNameColumn, put_HTMLHideFieldNameColumn, None)
    HTMLPopupEnabled = property(get_HTMLPopupEnabled, put_HTMLPopupEnabled, None)
    HTMLPresentationStyle = property(get_HTMLPresentationStyle, put_HTMLPresentationStyle, None)
    HTMLRedirectField = property(get_HTMLRedirectField, put_HTMLRedirectField, None)
    HTMLRedirectFieldPrefix = property(get_HTMLRedirectFieldPrefix, put_HTMLRedirectFieldPrefix, None)
    HTMLRedirectFieldSuffix = property(get_HTMLRedirectFieldSuffix, put_HTMLRedirectFieldSuffix, None)
    HTMLUseCodedDomainValues = property(get_HTMLUseCodedDomainValues, put_HTMLUseCodedDomainValues, None)
    HTMLXSLStylesheet = property(get_HTMLXSLStylesheet, put_HTMLXSLStylesheet, None)
    HTMLOutput = IndexProperty(get_HTMLOutput, None)

class IHTMLPopupInfo2(_esriCarto.IHTMLPopupInfo2):
    _IID = uuid.UUID('8a038cdb-0430-40d9-b8ce-8b055f11d511')

    def __init__(self, *args, **kw):
        super(IHTMLPopupInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HTMLDownloadAttachmentData(self):
        '''Method IHTMLPopupInfo2.get_HTMLDownloadAttachmentData

           OUTPUT
            pDownloadAttachmentData: VARIANT_BOOL*'''
        return super(IHTMLPopupInfo2, self).get_HTMLDownloadAttachmentData()
    def put_HTMLDownloadAttachmentData(self, pDownloadAttachmentData):
        '''Method IHTMLPopupInfo2.put_HTMLDownloadAttachmentData

           INPUT
            pDownloadAttachmentData: VARIANT_BOOL'''
        return super(IHTMLPopupInfo2, self).put_HTMLDownloadAttachmentData(pDownloadAttachmentData)
    def HTMLOutput(self, pFeature, pOptions):
        '''Method IHTMLPopupInfo2.HTMLOutput

           INPUTS
            pFeature            : IFeature*
            pOptions            : IPropertySet*

           OUTPUT
            pHtml               : BSTR*'''
        return super(IHTMLPopupInfo2, self).HTMLOutput(pFeature, pOptions)
    HTMLDownloadAttachmentData = property(get_HTMLDownloadAttachmentData, put_HTMLDownloadAttachmentData, None)

class IHTMLPopupIdentify(_esriCarto.IHTMLPopupIdentify):
    _IID = uuid.UUID('095cdd1a-fe17-4719-9072-15f303f82e69')
    def get_HTMLPopupEnabled(self):
        '''Method IHTMLPopupIdentify.get_HTMLPopupEnabled

           OUTPUT
            pEnabled            : VARIANT_BOOL*'''
        return super(IHTMLPopupIdentify, self).get_HTMLPopupEnabled()
    def get_HTMLPresentationStyle(self):
        '''Method IHTMLPopupIdentify.get_HTMLPresentationStyle

           OUTPUT
            pStyle              : esriHTMLPopupStyle*'''
        return super(IHTMLPopupIdentify, self).get_HTMLPresentationStyle()
    def HTMLIdentify(self, pPoint, Tolerance):
        '''Method IHTMLPopupIdentify.HTMLIdentify

           INPUTS
            pPoint              : IPoint*
            Tolerance           : double

           OUTPUT
            pHtml               : BSTR*'''
        return super(IHTMLPopupIdentify, self).HTMLIdentify(pPoint, Tolerance)
    def HTMLTipText(self, pPoint, Tolerance):
        '''Method IHTMLPopupIdentify.HTMLTipText

           INPUTS
            pPoint              : IPoint*
            Tolerance           : double

           OUTPUT
            pTipText            : BSTR*'''
        return super(IHTMLPopupIdentify, self).HTMLTipText(pPoint, Tolerance)
    HTMLPopupEnabled = property(get_HTMLPopupEnabled, None, None)
    HTMLPresentationStyle = property(get_HTMLPresentationStyle, None, None)

class IHTMLPopupIdentify2(_esriCarto.IHTMLPopupIdentify2):
    _IID = uuid.UUID('8cc24376-c6e0-4ae0-8561-17fa049aee03')
    def HTMLIdentify(self, pDisplay, pGeometry, pOptions):
        '''Method IHTMLPopupIdentify2.HTMLIdentify

           INPUTS
            pDisplay            : IDisplay*
            pGeometry           : IGeometry*
            pOptions            : IPropertySet*

           OUTPUTS
            ppItemNames         : IStringArray**
            ppItemHTML          : IStringArray**'''
        return super(IHTMLPopupIdentify2, self).HTMLIdentify(pDisplay, pGeometry, pOptions)

class IEditTemplate(_esriCarto.IEditTemplate):
    _IID = uuid.UUID('0952f6c1-5e9d-4e2e-bc99-ed55bcc4c6ce')

    def __init__(self, *args, **kw):
        super(IEditTemplate, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IEditTemplate.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IEditTemplate, self).get_Name()
    def put_Name(self, Name):
        '''Method IEditTemplate.put_Name

           INPUT
            Name                : BSTR'''
        return super(IEditTemplate, self).put_Name(Name)
    def get_Description(self):
        '''Method IEditTemplate.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IEditTemplate, self).get_Description()
    def put_Description(self, Description):
        '''Method IEditTemplate.put_Description

           INPUT
            Description         : BSTR'''
        return super(IEditTemplate, self).put_Description(Description)
    def get_Layer(self):
        '''Method IEditTemplate.get_Layer

           OUTPUT
            Layer               : ILayer**'''
        return super(IEditTemplate, self).get_Layer()
    def putref_Layer(self, Layer):
        '''Method IEditTemplate.putref_Layer

           INPUT
            Layer               : ILayer*'''
        return super(IEditTemplate, self).putref_Layer(Layer)
    def get_Tool(self):
        '''Method IEditTemplate.get_Tool

           OUTPUT
            Tool                : GUID*'''
        return super(IEditTemplate, self).get_Tool()
    def put_Tool(self, Tool):
        '''Method IEditTemplate.put_Tool

           INPUT
            Tool                : GUID'''
        return super(IEditTemplate, self).put_Tool(Tool)
    def ClearDefaultValues(self):
        '''Method IEditTemplate.ClearDefaultValues'''
        return super(IEditTemplate, self).ClearDefaultValues()
    def get_DefaultValue(self, Field):
        '''Method IEditTemplate.get_DefaultValue

           INPUT
            Field               : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(IEditTemplate, self).get_DefaultValue(Field)
    def SetDefaultValue(self, Field, Value, initDefaultValues):
        '''Method IEditTemplate.SetDefaultValue

           INPUTS
            Field               : BSTR
            Value               : VARIANT
            initDefaultValues   : VARIANT_BOOL'''
        return super(IEditTemplate, self).SetDefaultValue(Field, Value, initDefaultValues)
    def SetDefaultValues(self, Feature):
        '''Method IEditTemplate.SetDefaultValues

           INPUT
            Feature             : IFeature*'''
        return super(IEditTemplate, self).SetDefaultValues(Feature)
    def get_CreateCount(self):
        '''Method IEditTemplate.get_CreateCount

           OUTPUT
            Count               : long*'''
        return super(IEditTemplate, self).get_CreateCount()
    def get_Tags(self):
        '''Method IEditTemplate.get_Tags

           OUTPUT
            Tags                : BSTR*'''
        return super(IEditTemplate, self).get_Tags()
    def put_Tags(self, Tags):
        '''Method IEditTemplate.put_Tags

           INPUT
            Tags                : BSTR'''
        return super(IEditTemplate, self).put_Tags(Tags)
    CreateCount = property(get_CreateCount, None, None)
    Description = property(get_Description, put_Description, None)
    Layer = property(get_Layer, putref_Layer, None)
    Name = property(get_Name, put_Name, None)
    Tags = property(get_Tags, put_Tags, None)
    Tool = property(get_Tool, put_Tool, None)
    DefaultValue = IndexProperty(get_DefaultValue, None)

class IEditTemplateFactory(_esriCarto.IEditTemplateFactory):
    _IID = uuid.UUID('a423e23d-a43b-42b0-9815-1cb559f5a2e8')
    def Create(self, Name, Layer):
        '''Method IEditTemplateFactory.Create

           INPUTS
            Name                : BSTR
            Layer               : ILayer*

           OUTPUT
            EditTemplate        : IEditTemplate**'''
        return super(IEditTemplateFactory, self).Create(Name, Layer)

class IEditTemplateManager(_esriCarto.IEditTemplateManager):
    _IID = uuid.UUID('000f7e24-8470-40c7-b0c1-8d2e8c33a619')
    def get_Count(self):
        '''Method IEditTemplateManager.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEditTemplateManager, self).get_Count()
    def get_EditTemplate(self, Index):
        '''Method IEditTemplateManager.get_EditTemplate

           INPUT
            Index               : long

           OUTPUT
            EditTemplate        : IEditTemplate**'''
        return super(IEditTemplateManager, self).get_EditTemplate(Index)
    Count = property(get_Count, None, None)
    EditTemplate = IndexProperty(get_EditTemplate, None)

class ITimeDisplayTable(_esriCarto.ITimeDisplayTable):
    _IID = uuid.UUID('7a55bbf1-52f0-413b-ac7c-761bd139ae3f')
    def PrepareTimeQuery(self, pTimeValue):
        '''Method ITimeDisplayTable.PrepareTimeQuery

           INPUT
            pTimeValue          : ITimeValue*

           OUTPUT
            pFilter             : IQueryFilter*'''
        return super(ITimeDisplayTable, self).PrepareTimeQuery(pTimeValue)

class ITimeDisplayTable2(_esriCarto.ITimeDisplayTable2):
    _IID = uuid.UUID('64b8b4af-4f12-4f66-b2dc-79476910ee38')
    def PrepareTimeQueryEx(self, pTimeValue, eTimeRelation):
        '''Method ITimeDisplayTable2.PrepareTimeQueryEx

           INPUTS
            pTimeValue          : ITimeValue*
            eTimeRelation       : esriTimeRelation

           OUTPUT
            pFilter             : IQueryFilter*'''
        return super(ITimeDisplayTable2, self).PrepareTimeQueryEx(pTimeValue, eTimeRelation)
    def PrepareTimeQueryFromDisplay(self, pDisplay):
        '''Method ITimeDisplayTable2.PrepareTimeQueryFromDisplay

           INPUT
            pDisplay            : IDisplay*

           OUTPUT
            pFilter             : IQueryFilter*'''
        return super(ITimeDisplayTable2, self).PrepareTimeQueryFromDisplay(pDisplay)
    def PrepareTimeQuery(self, pTimeValue):
        '''Method ITimeDisplayTable.PrepareTimeQuery (from ITimeDisplayTable)

           INPUT
            pTimeValue          : ITimeValue*

           OUTPUT
            pFilter             : IQueryFilter*'''
        return super(ITimeDisplayTable2, self).PrepareTimeQuery(pTimeValue)

class IExpression(_esriCarto.IExpression):
    _IID = uuid.UUID('3c957f4d-2120-11d4-a383-00c04f6bc619')

    def __init__(self, *args, **kw):
        super(IExpression, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Expression(self):
        '''Method IExpression.get_Expression

           OUTPUT
            pExpression         : BSTR*'''
        return super(IExpression, self).get_Expression()
    def put_Expression(self, pExpression):
        '''Method IExpression.put_Expression

           INPUT
            pExpression         : BSTR'''
        return super(IExpression, self).put_Expression(pExpression)
    def Calculate(self, pFeature):
        '''Method IExpression.Calculate

           INPUT
            pFeature            : IFeature*

           OUTPUT
            result              : double*'''
        return super(IExpression, self).Calculate(pFeature)
    def IsValid(self, pTable):
        '''Method IExpression.IsValid

           INPUT
            pTable              : ITable*

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IExpression, self).IsValid(pTable)
    Expression = property(get_Expression, put_Expression, None)

class ICoverageAnnotationLayerFactory(_esriCarto.ICoverageAnnotationLayerFactory):
    _IID = uuid.UUID('f75c243b-4019-40c5-bea4-afc422f41855')
    def CreateAnnotationLayer(self, pAnnotationWorkspace, pFeatureDataset, annotationLayerName):
        '''Method ICoverageAnnotationLayerFactory.CreateAnnotationLayer

           INPUTS
            pAnnotationWorkspace: IFeatureWorkspace*
            pFeatureDataset     : IFeatureDataset*
            annotationLayerName : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(ICoverageAnnotationLayerFactory, self).CreateAnnotationLayer(pAnnotationWorkspace, pFeatureDataset, annotationLayerName)
    def OpenAnnotationLayer(self, pAnnotationWorkspace, pFeatureDataset, annotationLayerName):
        '''Method ICoverageAnnotationLayerFactory.OpenAnnotationLayer

           INPUTS
            pAnnotationWorkspace: IFeatureWorkspace*
            pFeatureDataset     : IFeatureDataset*
            annotationLayerName : BSTR

           OUTPUT
            ppLayer             : ILayer**'''
        return super(ICoverageAnnotationLayerFactory, self).OpenAnnotationLayer(pAnnotationWorkspace, pFeatureDataset, annotationLayerName)
    def FindAnnotationLayerNames(self, pAnnotationWorkspace):
        '''Method ICoverageAnnotationLayerFactory.FindAnnotationLayerNames

           INPUT
            pAnnotationWorkspace: IFeatureWorkspace*

           OUTPUT
            ppNames             : IEnumBSTR**'''
        return super(ICoverageAnnotationLayerFactory, self).FindAnnotationLayerNames(pAnnotationWorkspace)

class IGroupLayer(_esriCarto.IGroupLayer):
    _IID = uuid.UUID('edad6644-1810-11d1-86ae-0000f8751720')

    def __init__(self, *args, **kw):
        super(IGroupLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Add(self, Layer):
        '''Method IGroupLayer.Add

           INPUT
            Layer               : ILayer*'''
        return super(IGroupLayer, self).Add(Layer)
    def Delete(self, Layer):
        '''Method IGroupLayer.Delete

           INPUT
            Layer               : ILayer*'''
        return super(IGroupLayer, self).Delete(Layer)
    def Clear(self):
        '''Method IGroupLayer.Clear'''
        return super(IGroupLayer, self).Clear()
    def get_Expanded(self):
        '''Method IGroupLayer.get_Expanded

           OUTPUT
            Expanded            : VARIANT_BOOL*'''
        return super(IGroupLayer, self).get_Expanded()
    def put_Expanded(self, Expanded):
        '''Method IGroupLayer.put_Expanded

           INPUT
            Expanded            : VARIANT_BOOL'''
        return super(IGroupLayer, self).put_Expanded(Expanded)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(IGroupLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(IGroupLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IGroupLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(IGroupLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(IGroupLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(IGroupLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(IGroupLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(IGroupLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IGroupLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IGroupLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IGroupLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IGroupLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(IGroupLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IGroupLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IGroupLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(IGroupLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IGroupLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IGroupLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    Expanded = property(get_Expanded, put_Expanded, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ILayerMasking(_esriCarto.ILayerMasking):
    _IID = uuid.UUID('536427da-5354-491d-ae92-abebaa8bb05b')

    def __init__(self, *args, **kw):
        super(ILayerMasking, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseMasking(self, flag):
        '''Method ILayerMasking.put_UseMasking

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILayerMasking, self).put_UseMasking(flag)
    def get_UseMasking(self):
        '''Method ILayerMasking.get_UseMasking

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILayerMasking, self).get_UseMasking()
    def put_MaskingLayers(self, Layer, MaskingLayers):
        '''Method ILayerMasking.put_MaskingLayers

           INPUTS
            Layer               : ILayer*
            MaskingLayers       : ISet*'''
        return super(ILayerMasking, self).put_MaskingLayers(Layer, MaskingLayers)
    def get_MaskingLayers(self, Layer):
        '''Method ILayerMasking.get_MaskingLayers

           INPUT
            Layer               : ILayer*

           OUTPUT
            MaskingLayers       : ISet**'''
        return super(ILayerMasking, self).get_MaskingLayers(Layer)
    def ClearMasking(self, Layer):
        '''Method ILayerMasking.ClearMasking

           INPUT
            Layer               : ILayer*'''
        return super(ILayerMasking, self).ClearMasking(Layer)
    def get_MaskedLayers(self):
        '''Method ILayerMasking.get_MaskedLayers

           OUTPUT
            Layers              : ISet**'''
        return super(ILayerMasking, self).get_MaskedLayers()
    MaskedLayers = property(get_MaskedLayers, None, None)
    MaskingLayers = property(None, put_MaskingLayers, None)
    UseMasking = property(get_UseMasking, put_UseMasking, None)
    MaskingLayers = IndexProperty(get_MaskingLayers, None)

class ILevelMasking(_esriCarto.ILevelMasking):
    _IID = uuid.UUID('a4b202d6-363f-455d-a581-c323834df4f7')

    def __init__(self, *args, **kw):
        super(ILevelMasking, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_LevelMasking(self, maskedLayer, maskingLayer, pLevels):
        '''Method ILevelMasking.put_LevelMasking

           INPUTS
            maskedLayer         : ILayer*
            maskingLayer        : ILayer*
            pLevels             : BSTR'''
        return super(ILevelMasking, self).put_LevelMasking(maskedLayer, maskingLayer, pLevels)
    def get_LevelMasking(self, maskedLayer, maskingLayer):
        '''Method ILevelMasking.get_LevelMasking

           INPUTS
            maskedLayer         : ILayer*
            maskingLayer        : ILayer*

           OUTPUT
            pLevels             : BSTR*'''
        return super(ILevelMasking, self).get_LevelMasking(maskedLayer, maskingLayer)
    LevelMasking = property(None, put_LevelMasking, None)

class ICoverageAnnotationLayer(_esriCarto.ICoverageAnnotationLayer):
    _IID = uuid.UUID('0c22a4c7-dafd-11d2-9f46-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(ICoverageAnnotationLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SymbolCount(self):
        '''Method ICoverageAnnotationLayer.get_SymbolCount

           OUTPUT
            Count               : long*'''
        return super(ICoverageAnnotationLayer, self).get_SymbolCount()
    def get_SymbolNumber(self, Index):
        '''Method ICoverageAnnotationLayer.get_SymbolNumber

           INPUT
            Index               : long

           OUTPUT
            SymbolNumber        : long*'''
        return super(ICoverageAnnotationLayer, self).get_SymbolNumber(Index)
    def get_Font(self, SymbolNumber):
        '''Method ICoverageAnnotationLayer.get_Font

           INPUT
            SymbolNumber        : long

           OUTPUT
            Font                : IFontDisp**'''
        return super(ICoverageAnnotationLayer, self).get_Font(SymbolNumber)
    def putref_Font(self, SymbolNumber, Font):
        '''Method ICoverageAnnotationLayer.putref_Font

           INPUTS
            SymbolNumber        : long
            Font                : IFontDisp*'''
        return super(ICoverageAnnotationLayer, self).putref_Font(SymbolNumber, Font)
    def get_FontColor(self, SymbolNumber):
        '''Method ICoverageAnnotationLayer.get_FontColor

           INPUT
            SymbolNumber        : long

           OUTPUT
            Color               : IColor**'''
        return super(ICoverageAnnotationLayer, self).get_FontColor(SymbolNumber)
    def putref_FontColor(self, SymbolNumber, Color):
        '''Method ICoverageAnnotationLayer.putref_FontColor

           INPUTS
            SymbolNumber        : long
            Color               : IColor*'''
        return super(ICoverageAnnotationLayer, self).putref_FontColor(SymbolNumber, Color)
    def get_TextSymbol(self, SymbolNumber):
        '''Method ICoverageAnnotationLayer.get_TextSymbol

           INPUT
            SymbolNumber        : long

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ICoverageAnnotationLayer, self).get_TextSymbol(SymbolNumber)
    def putref_TextSymbol(self, SymbolNumber, Symbol):
        '''Method ICoverageAnnotationLayer.putref_TextSymbol

           INPUTS
            SymbolNumber        : long
            Symbol              : ITextSymbol*'''
        return super(ICoverageAnnotationLayer, self).putref_TextSymbol(SymbolNumber, Symbol)
    def get_LevelCount(self):
        '''Method ICoverageAnnotationLayer.get_LevelCount

           OUTPUT
            Count               : long*'''
        return super(ICoverageAnnotationLayer, self).get_LevelCount()
    def get_LevelNumber(self, Index):
        '''Method ICoverageAnnotationLayer.get_LevelNumber

           INPUT
            Index               : long

           OUTPUT
            pLevelNumber        : long*'''
        return super(ICoverageAnnotationLayer, self).get_LevelNumber(Index)
    def get_LevelVisibility(self, LevelNumber):
        '''Method ICoverageAnnotationLayer.get_LevelVisibility

           INPUT
            LevelNumber         : long

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ICoverageAnnotationLayer, self).get_LevelVisibility(LevelNumber)
    def put_LevelVisibility(self, LevelNumber, Visible):
        '''Method ICoverageAnnotationLayer.put_LevelVisibility

           INPUTS
            LevelNumber         : long
            Visible             : VARIANT_BOOL'''
        return super(ICoverageAnnotationLayer, self).put_LevelVisibility(LevelNumber, Visible)
    def get_ArrowSymbol(self):
        '''Method ICoverageAnnotationLayer.get_ArrowSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ICoverageAnnotationLayer, self).get_ArrowSymbol()
    def putref_ArrowSymbol(self, Symbol):
        '''Method ICoverageAnnotationLayer.putref_ArrowSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ICoverageAnnotationLayer, self).putref_ArrowSymbol(Symbol)
    def GenerateGraphics(self, box, Display):
        '''Method ICoverageAnnotationLayer.GenerateGraphics

           INPUTS
            box                 : IEnvelope*
            Display             : IDisplay*

           OUTPUT
            Elements            : IEnumElement**'''
        return super(ICoverageAnnotationLayer, self).GenerateGraphics(box, Display)
    def StartGeneratingGraphics(self, box, Display, withAttributes):
        '''Method ICoverageAnnotationLayer.StartGeneratingGraphics

           INPUTS
            box                 : IEnvelope*
            Display             : IDisplay*
            withAttributes      : VARIANT_BOOL'''
        return super(ICoverageAnnotationLayer, self).StartGeneratingGraphics(box, Display, withAttributes)
    def get_NextGraphic(self):
        '''Method ICoverageAnnotationLayer.get_NextGraphic

           OUTPUT
            Element             : IElement**'''
        return super(ICoverageAnnotationLayer, self).get_NextGraphic()
    def NextFeatureAndGraphic(self):
        '''Method ICoverageAnnotationLayer.NextFeatureAndGraphic

           OUTPUTS
            Feature             : IFeature**
            Element             : IElement**'''
        return super(ICoverageAnnotationLayer, self).NextFeatureAndGraphic()
    ArrowSymbol = property(get_ArrowSymbol, putref_ArrowSymbol, None)
    Font = property(None, putref_Font, None)
    FontColor = property(None, putref_FontColor, None)
    LevelCount = property(get_LevelCount, None, None)
    LevelVisibility = property(None, put_LevelVisibility, None)
    NextGraphic = property(get_NextGraphic, None, None)
    SymbolCount = property(get_SymbolCount, None, None)
    TextSymbol = property(None, putref_TextSymbol, None)
    Font = IndexProperty(get_Font, None)
    FontColor = IndexProperty(get_FontColor, None)
    LevelNumber = IndexProperty(get_LevelNumber, None)
    LevelVisibility = IndexProperty(get_LevelVisibility, None)
    SymbolNumber = IndexProperty(get_SymbolNumber, None)
    TextSymbol = IndexProperty(get_TextSymbol, None)

class ICoverageAnnotationLayer2(_esriCarto.ICoverageAnnotationLayer2):
    _IID = uuid.UUID('6a1cfa9c-3fad-4d13-8af4-a40be321a8b3')

    def __init__(self, *args, **kw):
        super(ICoverageAnnotationLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SymbolCount(self):
        '''Method ICoverageAnnotationLayer2.get_SymbolCount

           OUTPUT
            Count               : long*'''
        return super(ICoverageAnnotationLayer2, self).get_SymbolCount()
    def get_SymbolNumber(self, Index):
        '''Method ICoverageAnnotationLayer2.get_SymbolNumber

           INPUT
            Index               : long

           OUTPUT
            SymbolNumber        : long*'''
        return super(ICoverageAnnotationLayer2, self).get_SymbolNumber(Index)
    def get_Font(self, SymbolNumber):
        '''Method ICoverageAnnotationLayer2.get_Font

           INPUT
            SymbolNumber        : long

           OUTPUT
            Font                : IFontDisp**'''
        return super(ICoverageAnnotationLayer2, self).get_Font(SymbolNumber)
    def putref_Font(self, SymbolNumber, Font):
        '''Method ICoverageAnnotationLayer2.putref_Font

           INPUTS
            SymbolNumber        : long
            Font                : IFontDisp*'''
        return super(ICoverageAnnotationLayer2, self).putref_Font(SymbolNumber, Font)
    def get_FontColor(self, SymbolNumber):
        '''Method ICoverageAnnotationLayer2.get_FontColor

           INPUT
            SymbolNumber        : long

           OUTPUT
            Color               : IColor**'''
        return super(ICoverageAnnotationLayer2, self).get_FontColor(SymbolNumber)
    def putref_FontColor(self, SymbolNumber, Color):
        '''Method ICoverageAnnotationLayer2.putref_FontColor

           INPUTS
            SymbolNumber        : long
            Color               : IColor*'''
        return super(ICoverageAnnotationLayer2, self).putref_FontColor(SymbolNumber, Color)
    def get_TextSymbol(self, SymbolNumber):
        '''Method ICoverageAnnotationLayer2.get_TextSymbol

           INPUT
            SymbolNumber        : long

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(ICoverageAnnotationLayer2, self).get_TextSymbol(SymbolNumber)
    def putref_TextSymbol(self, SymbolNumber, Symbol):
        '''Method ICoverageAnnotationLayer2.putref_TextSymbol

           INPUTS
            SymbolNumber        : long
            Symbol              : ITextSymbol*'''
        return super(ICoverageAnnotationLayer2, self).putref_TextSymbol(SymbolNumber, Symbol)
    def get_LevelCount(self):
        '''Method ICoverageAnnotationLayer2.get_LevelCount

           OUTPUT
            Count               : long*'''
        return super(ICoverageAnnotationLayer2, self).get_LevelCount()
    def get_LevelNumber(self, Index):
        '''Method ICoverageAnnotationLayer2.get_LevelNumber

           INPUT
            Index               : long

           OUTPUT
            pLevelNumber        : long*'''
        return super(ICoverageAnnotationLayer2, self).get_LevelNumber(Index)
    def get_LevelVisibility(self, LevelNumber):
        '''Method ICoverageAnnotationLayer2.get_LevelVisibility

           INPUT
            LevelNumber         : long

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ICoverageAnnotationLayer2, self).get_LevelVisibility(LevelNumber)
    def put_LevelVisibility(self, LevelNumber, Visible):
        '''Method ICoverageAnnotationLayer2.put_LevelVisibility

           INPUTS
            LevelNumber         : long
            Visible             : VARIANT_BOOL'''
        return super(ICoverageAnnotationLayer2, self).put_LevelVisibility(LevelNumber, Visible)
    def get_ArrowSymbol(self):
        '''Method ICoverageAnnotationLayer2.get_ArrowSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ICoverageAnnotationLayer2, self).get_ArrowSymbol()
    def putref_ArrowSymbol(self, Symbol):
        '''Method ICoverageAnnotationLayer2.putref_ArrowSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ICoverageAnnotationLayer2, self).putref_ArrowSymbol(Symbol)
    def GenerateGraphics(self, box, Display, useGroupSymbolElement):
        '''Method ICoverageAnnotationLayer2.GenerateGraphics

           INPUTS
            box                 : IEnvelope*
            Display             : IDisplay*
            useGroupSymbolElement: VARIANT_BOOL

           OUTPUT
            Elements            : IEnumElement**'''
        return super(ICoverageAnnotationLayer2, self).GenerateGraphics(box, Display, useGroupSymbolElement)
    def StartGeneratingGraphics(self, box, Display, withAttributes, useGroupSymbolElement):
        '''Method ICoverageAnnotationLayer2.StartGeneratingGraphics

           INPUTS
            box                 : IEnvelope*
            Display             : IDisplay*
            withAttributes      : VARIANT_BOOL
            useGroupSymbolElement: VARIANT_BOOL'''
        return super(ICoverageAnnotationLayer2, self).StartGeneratingGraphics(box, Display, withAttributes, useGroupSymbolElement)
    def get_NextGraphic(self):
        '''Method ICoverageAnnotationLayer2.get_NextGraphic

           OUTPUT
            Element             : IElement**'''
        return super(ICoverageAnnotationLayer2, self).get_NextGraphic()
    def NextFeatureAndGraphic(self):
        '''Method ICoverageAnnotationLayer2.NextFeatureAndGraphic

           OUTPUTS
            Feature             : IFeature**
            Element             : IElement**'''
        return super(ICoverageAnnotationLayer2, self).NextFeatureAndGraphic()
    ArrowSymbol = property(get_ArrowSymbol, putref_ArrowSymbol, None)
    Font = property(None, putref_Font, None)
    FontColor = property(None, putref_FontColor, None)
    LevelCount = property(get_LevelCount, None, None)
    LevelVisibility = property(None, put_LevelVisibility, None)
    NextGraphic = property(get_NextGraphic, None, None)
    SymbolCount = property(get_SymbolCount, None, None)
    TextSymbol = property(None, putref_TextSymbol, None)
    Font = IndexProperty(get_Font, None)
    FontColor = IndexProperty(get_FontColor, None)
    LevelNumber = IndexProperty(get_LevelNumber, None)
    LevelVisibility = IndexProperty(get_LevelVisibility, None)
    SymbolNumber = IndexProperty(get_SymbolNumber, None)
    TextSymbol = IndexProperty(get_TextSymbol, None)

class ICoverageAnnotationSel(_esriCarto.ICoverageAnnotationSel):
    _IID = uuid.UUID('158d86f6-0a72-488e-a448-ac0d86725af7')
    def StartGeneratingSelectedGraphics(self, Display, withAttributes, useGroupSymbolElement):
        '''Method ICoverageAnnotationSel.StartGeneratingSelectedGraphics

           INPUTS
            Display             : IDisplay*
            withAttributes      : VARIANT_BOOL
            useGroupSymbolElement: VARIANT_BOOL'''
        return super(ICoverageAnnotationSel, self).StartGeneratingSelectedGraphics(Display, withAttributes, useGroupSymbolElement)
    def NextSelectedFeatureAndGraphic(self):
        '''Method ICoverageAnnotationSel.NextSelectedFeatureAndGraphic

           OUTPUTS
            Feature             : IFeature**
            Element             : IElement**'''
        return super(ICoverageAnnotationSel, self).NextSelectedFeatureAndGraphic()

class ICoverageAnnotationLayerWrite(_esriCarto.ICoverageAnnotationLayerWrite):
    _IID = uuid.UUID('941c1b64-3474-43a1-ab71-57bcdf57e36b')
    def BeginAddElements(self, pDisplay):
        '''Method ICoverageAnnotationLayerWrite.BeginAddElements

           INPUT
            pDisplay            : IDisplay*'''
        return super(ICoverageAnnotationLayerWrite, self).BeginAddElements(pDisplay)
    def SetupAttributeConversion(self, numAttributes, inCols, outCols):
        '''Method ICoverageAnnotationLayerWrite.SetupAttributeConversion

           INPUTS
            numAttributes       : long
            inCols              : VARIANT
            outCols             : VARIANT'''
        return super(ICoverageAnnotationLayerWrite, self).SetupAttributeConversion(numAttributes, inCols, outCols)
    def DoAddFeature(self, pFeature, pElement):
        '''Method ICoverageAnnotationLayerWrite.DoAddFeature

           INPUTS
            pFeature            : IFeature*
            pElement            : IElement*'''
        return super(ICoverageAnnotationLayerWrite, self).DoAddFeature(pFeature, pElement)
    def EndAddElements(self):
        '''Method ICoverageAnnotationLayerWrite.EndAddElements'''
        return super(ICoverageAnnotationLayerWrite, self).EndAddElements()
    def ClearSymbols(self):
        '''Method ICoverageAnnotationLayerWrite.ClearSymbols'''
        return super(ICoverageAnnotationLayerWrite, self).ClearSymbols()

class IDimensionStyle(_esriCarto.IDimensionStyle):
    _IID = uuid.UUID('aa54768e-ea46-11d3-80d3-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionStyle, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method IDimensionStyle.get_ID

           OUTPUT
            ID                  : long*'''
        return super(IDimensionStyle, self).get_ID()
    def put_Name(self, Name):
        '''Method IDimensionStyle.put_Name

           INPUT
            Name                : BSTR'''
        return super(IDimensionStyle, self).put_Name(Name)
    def get_Name(self):
        '''Method IDimensionStyle.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDimensionStyle, self).get_Name()
    ID = property(get_ID, None, None)
    Name = property(get_Name, put_Name, None)

class IDimensionStyleDisplay(_esriCarto.IDimensionStyleDisplay):
    _IID = uuid.UUID('d7e38a34-f92a-11d3-80d3-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionStyleDisplay, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_DimensionLineSymbol(self, Symbol):
        '''Method IDimensionStyleDisplay.put_DimensionLineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IDimensionStyleDisplay, self).put_DimensionLineSymbol(Symbol)
    def get_DimensionLineSymbol(self):
        '''Method IDimensionStyleDisplay.get_DimensionLineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IDimensionStyleDisplay, self).get_DimensionLineSymbol()
    def put_ExtensionLineSymbol(self, Symbol):
        '''Method IDimensionStyleDisplay.put_ExtensionLineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IDimensionStyleDisplay, self).put_ExtensionLineSymbol(Symbol)
    def get_ExtensionLineSymbol(self):
        '''Method IDimensionStyleDisplay.get_ExtensionLineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IDimensionStyleDisplay, self).get_ExtensionLineSymbol()
    def put_BeginMarkerSymbol(self, Symbol):
        '''Method IDimensionStyleDisplay.put_BeginMarkerSymbol

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IDimensionStyleDisplay, self).put_BeginMarkerSymbol(Symbol)
    def get_BeginMarkerSymbol(self):
        '''Method IDimensionStyleDisplay.get_BeginMarkerSymbol

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IDimensionStyleDisplay, self).get_BeginMarkerSymbol()
    def put_EndMarkerSymbol(self, Symbol):
        '''Method IDimensionStyleDisplay.put_EndMarkerSymbol

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IDimensionStyleDisplay, self).put_EndMarkerSymbol(Symbol)
    def get_EndMarkerSymbol(self):
        '''Method IDimensionStyleDisplay.get_EndMarkerSymbol

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IDimensionStyleDisplay, self).get_EndMarkerSymbol()
    def put_ExtensionLineOvershot(self, overshot):
        '''Method IDimensionStyleDisplay.put_ExtensionLineOvershot

           INPUT
            overshot            : double'''
        return super(IDimensionStyleDisplay, self).put_ExtensionLineOvershot(overshot)
    def get_ExtensionLineOvershot(self):
        '''Method IDimensionStyleDisplay.get_ExtensionLineOvershot

           OUTPUT
            overshot            : double*'''
        return super(IDimensionStyleDisplay, self).get_ExtensionLineOvershot()
    def put_ExtensionLineOffset(self, Offset):
        '''Method IDimensionStyleDisplay.put_ExtensionLineOffset

           INPUT
            Offset              : double'''
        return super(IDimensionStyleDisplay, self).put_ExtensionLineOffset(Offset)
    def get_ExtensionLineOffset(self):
        '''Method IDimensionStyleDisplay.get_ExtensionLineOffset

           OUTPUT
            Offset              : double*'''
        return super(IDimensionStyleDisplay, self).get_ExtensionLineOffset()
    def put_DimensionLineDisplay(self, displayOption):
        '''Method IDimensionStyleDisplay.put_DimensionLineDisplay

           INPUT
            displayOption       : esriDimensionDisplay'''
        return super(IDimensionStyleDisplay, self).put_DimensionLineDisplay(displayOption)
    def get_DimensionLineDisplay(self):
        '''Method IDimensionStyleDisplay.get_DimensionLineDisplay

           OUTPUT
            displayOption       : esriDimensionDisplay*'''
        return super(IDimensionStyleDisplay, self).get_DimensionLineDisplay()
    def put_ExtensionLineDisplay(self, displayOption):
        '''Method IDimensionStyleDisplay.put_ExtensionLineDisplay

           INPUT
            displayOption       : esriDimensionDisplay'''
        return super(IDimensionStyleDisplay, self).put_ExtensionLineDisplay(displayOption)
    def get_ExtensionLineDisplay(self):
        '''Method IDimensionStyleDisplay.get_ExtensionLineDisplay

           OUTPUT
            displayOption       : esriDimensionDisplay*'''
        return super(IDimensionStyleDisplay, self).get_ExtensionLineDisplay()
    def put_MarkerDisplay(self, displayOption):
        '''Method IDimensionStyleDisplay.put_MarkerDisplay

           INPUT
            displayOption       : esriDimensionDisplay'''
        return super(IDimensionStyleDisplay, self).put_MarkerDisplay(displayOption)
    def get_MarkerDisplay(self):
        '''Method IDimensionStyleDisplay.get_MarkerDisplay

           OUTPUT
            displayOption       : esriDimensionDisplay*'''
        return super(IDimensionStyleDisplay, self).get_MarkerDisplay()
    def put_MarkerFit(self, fit):
        '''Method IDimensionStyleDisplay.put_MarkerFit

           INPUT
            fit                 : esriDimensionMarkerFit'''
        return super(IDimensionStyleDisplay, self).put_MarkerFit(fit)
    def get_MarkerFit(self):
        '''Method IDimensionStyleDisplay.get_MarkerFit

           OUTPUT
            fit                 : esriDimensionMarkerFit*'''
        return super(IDimensionStyleDisplay, self).get_MarkerFit()
    def put_MarkerFitTolerance(self, Tolerance):
        '''Method IDimensionStyleDisplay.put_MarkerFitTolerance

           INPUT
            Tolerance           : double'''
        return super(IDimensionStyleDisplay, self).put_MarkerFitTolerance(Tolerance)
    def get_MarkerFitTolerance(self):
        '''Method IDimensionStyleDisplay.get_MarkerFitTolerance

           OUTPUT
            Tolerance           : double*'''
        return super(IDimensionStyleDisplay, self).get_MarkerFitTolerance()
    def put_DrawLineOnFit(self, Draw):
        '''Method IDimensionStyleDisplay.put_DrawLineOnFit

           INPUT
            Draw                : VARIANT_BOOL'''
        return super(IDimensionStyleDisplay, self).put_DrawLineOnFit(Draw)
    def get_DrawLineOnFit(self):
        '''Method IDimensionStyleDisplay.get_DrawLineOnFit

           OUTPUT
            Draw                : VARIANT_BOOL*'''
        return super(IDimensionStyleDisplay, self).get_DrawLineOnFit()
    def put_BaselineHeight(self, Height):
        '''Method IDimensionStyleDisplay.put_BaselineHeight

           INPUT
            Height              : double'''
        return super(IDimensionStyleDisplay, self).put_BaselineHeight(Height)
    def get_BaselineHeight(self):
        '''Method IDimensionStyleDisplay.get_BaselineHeight

           OUTPUT
            Height              : double*'''
        return super(IDimensionStyleDisplay, self).get_BaselineHeight()
    BaselineHeight = property(get_BaselineHeight, put_BaselineHeight, None)
    BeginMarkerSymbol = property(get_BeginMarkerSymbol, put_BeginMarkerSymbol, None)
    DimensionLineDisplay = property(get_DimensionLineDisplay, put_DimensionLineDisplay, None)
    DimensionLineSymbol = property(get_DimensionLineSymbol, put_DimensionLineSymbol, None)
    DrawLineOnFit = property(get_DrawLineOnFit, put_DrawLineOnFit, None)
    EndMarkerSymbol = property(get_EndMarkerSymbol, put_EndMarkerSymbol, None)
    ExtensionLineDisplay = property(get_ExtensionLineDisplay, put_ExtensionLineDisplay, None)
    ExtensionLineOffset = property(get_ExtensionLineOffset, put_ExtensionLineOffset, None)
    ExtensionLineOvershot = property(get_ExtensionLineOvershot, put_ExtensionLineOvershot, None)
    ExtensionLineSymbol = property(get_ExtensionLineSymbol, put_ExtensionLineSymbol, None)
    MarkerDisplay = property(get_MarkerDisplay, put_MarkerDisplay, None)
    MarkerFit = property(get_MarkerFit, put_MarkerFit, None)
    MarkerFitTolerance = property(get_MarkerFitTolerance, put_MarkerFitTolerance, None)

class IDimensionStyleText(_esriCarto.IDimensionStyleText):
    _IID = uuid.UUID('f9316364-f92a-11d3-80d3-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionStyleText, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TextSymbol(self, Symbol):
        '''Method IDimensionStyleText.put_TextSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IDimensionStyleText, self).put_TextSymbol(Symbol)
    def get_TextSymbol(self):
        '''Method IDimensionStyleText.get_TextSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IDimensionStyleText, self).get_TextSymbol()
    def put_Align(self, Align):
        '''Method IDimensionStyleText.put_Align

           INPUT
            Align               : VARIANT_BOOL'''
        return super(IDimensionStyleText, self).put_Align(Align)
    def get_Align(self):
        '''Method IDimensionStyleText.get_Align

           OUTPUT
            Align               : VARIANT_BOOL*'''
        return super(IDimensionStyleText, self).get_Align()
    def put_DisplayUnits(self, Units):
        '''Method IDimensionStyleText.put_DisplayUnits

           INPUT
            Units               : esriUnits'''
        return super(IDimensionStyleText, self).put_DisplayUnits(Units)
    def get_DisplayUnits(self):
        '''Method IDimensionStyleText.get_DisplayUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IDimensionStyleText, self).get_DisplayUnits()
    def put_ConvertUnits(self, Convert):
        '''Method IDimensionStyleText.put_ConvertUnits

           INPUT
            Convert             : VARIANT_BOOL'''
        return super(IDimensionStyleText, self).put_ConvertUnits(Convert)
    def get_ConvertUnits(self):
        '''Method IDimensionStyleText.get_ConvertUnits

           OUTPUT
            Convert             : VARIANT_BOOL*'''
        return super(IDimensionStyleText, self).get_ConvertUnits()
    def put_DisplayPrecision(self, precision):
        '''Method IDimensionStyleText.put_DisplayPrecision

           INPUT
            precision           : long'''
        return super(IDimensionStyleText, self).put_DisplayPrecision(precision)
    def get_DisplayPrecision(self):
        '''Method IDimensionStyleText.get_DisplayPrecision

           OUTPUT
            precision           : long*'''
        return super(IDimensionStyleText, self).get_DisplayPrecision()
    def put_TextDisplay(self, Display):
        '''Method IDimensionStyleText.put_TextDisplay

           INPUT
            Display             : esriDimensionTextDisplay'''
        return super(IDimensionStyleText, self).put_TextDisplay(Display)
    def get_TextDisplay(self):
        '''Method IDimensionStyleText.get_TextDisplay

           OUTPUT
            Display             : esriDimensionTextDisplay*'''
        return super(IDimensionStyleText, self).get_TextDisplay()
    def put_Expression(self, Expression):
        '''Method IDimensionStyleText.put_Expression

           INPUT
            Expression          : BSTR'''
        return super(IDimensionStyleText, self).put_Expression(Expression)
    def get_Expression(self):
        '''Method IDimensionStyleText.get_Expression

           OUTPUT
            Expression          : BSTR*'''
        return super(IDimensionStyleText, self).get_Expression()
    def put_ExpressionParserName(self, Name):
        '''Method IDimensionStyleText.put_ExpressionParserName

           INPUT
            Name                : BSTR'''
        return super(IDimensionStyleText, self).put_ExpressionParserName(Name)
    def get_ExpressionParserName(self):
        '''Method IDimensionStyleText.get_ExpressionParserName

           OUTPUT
            Name                : BSTR*'''
        return super(IDimensionStyleText, self).get_ExpressionParserName()
    def put_ExpressionSimple(self, isSimple):
        '''Method IDimensionStyleText.put_ExpressionSimple

           INPUT
            isSimple            : VARIANT_BOOL'''
        return super(IDimensionStyleText, self).put_ExpressionSimple(isSimple)
    def get_ExpressionSimple(self):
        '''Method IDimensionStyleText.get_ExpressionSimple

           OUTPUT
            isSimple            : VARIANT_BOOL*'''
        return super(IDimensionStyleText, self).get_ExpressionSimple()
    def put_Prefix(self, Prefix):
        '''Method IDimensionStyleText.put_Prefix

           INPUT
            Prefix              : BSTR'''
        return super(IDimensionStyleText, self).put_Prefix(Prefix)
    def get_Prefix(self):
        '''Method IDimensionStyleText.get_Prefix

           OUTPUT
            Prefix              : BSTR*'''
        return super(IDimensionStyleText, self).get_Prefix()
    def put_Suffix(self, Suffix):
        '''Method IDimensionStyleText.put_Suffix

           INPUT
            Suffix              : BSTR'''
        return super(IDimensionStyleText, self).put_Suffix(Suffix)
    def get_Suffix(self):
        '''Method IDimensionStyleText.get_Suffix

           OUTPUT
            Suffix              : BSTR*'''
        return super(IDimensionStyleText, self).get_Suffix()
    def put_TextFit(self, fit):
        '''Method IDimensionStyleText.put_TextFit

           INPUT
            fit                 : esriDimensionTextFit'''
        return super(IDimensionStyleText, self).put_TextFit(fit)
    def get_TextFit(self):
        '''Method IDimensionStyleText.get_TextFit

           OUTPUT
            fit                 : esriDimensionTextFit*'''
        return super(IDimensionStyleText, self).get_TextFit()
    def put_ExtendLineOnFit(self, Draw):
        '''Method IDimensionStyleText.put_ExtendLineOnFit

           INPUT
            Draw                : VARIANT_BOOL'''
        return super(IDimensionStyleText, self).put_ExtendLineOnFit(Draw)
    def get_ExtendLineOnFit(self):
        '''Method IDimensionStyleText.get_ExtendLineOnFit

           OUTPUT
            Draw                : VARIANT_BOOL*'''
        return super(IDimensionStyleText, self).get_ExtendLineOnFit()
    Align = property(get_Align, put_Align, None)
    ConvertUnits = property(get_ConvertUnits, put_ConvertUnits, None)
    DisplayPrecision = property(get_DisplayPrecision, put_DisplayPrecision, None)
    DisplayUnits = property(get_DisplayUnits, put_DisplayUnits, None)
    Expression = property(get_Expression, put_Expression, None)
    ExpressionParserName = property(get_ExpressionParserName, put_ExpressionParserName, None)
    ExpressionSimple = property(get_ExpressionSimple, put_ExpressionSimple, None)
    ExtendLineOnFit = property(get_ExtendLineOnFit, put_ExtendLineOnFit, None)
    Prefix = property(get_Prefix, put_Prefix, None)
    Suffix = property(get_Suffix, put_Suffix, None)
    TextDisplay = property(get_TextDisplay, put_TextDisplay, None)
    TextFit = property(get_TextFit, put_TextFit, None)
    TextSymbol = property(get_TextSymbol, put_TextSymbol, None)

class IDimensionShape(_esriCarto.IDimensionShape):
    _IID = uuid.UUID('d07b504e-10ac-11d4-80d7-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionShape, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_BeginDimensionPoint(self, point):
        '''Method IDimensionShape.putref_BeginDimensionPoint

           INPUT
            point               : IPoint*'''
        return super(IDimensionShape, self).putref_BeginDimensionPoint(point)
    def get_BeginDimensionPoint(self):
        '''Method IDimensionShape.get_BeginDimensionPoint

           OUTPUT
            point               : IPoint**'''
        return super(IDimensionShape, self).get_BeginDimensionPoint()
    def putref_EndDimensionPoint(self, point):
        '''Method IDimensionShape.putref_EndDimensionPoint

           INPUT
            point               : IPoint*'''
        return super(IDimensionShape, self).putref_EndDimensionPoint(point)
    def get_EndDimensionPoint(self):
        '''Method IDimensionShape.get_EndDimensionPoint

           OUTPUT
            point               : IPoint**'''
        return super(IDimensionShape, self).get_EndDimensionPoint()
    def get_DimensionLinePoint(self):
        '''Method IDimensionShape.get_DimensionLinePoint

           OUTPUT
            point               : IPoint**'''
        return super(IDimensionShape, self).get_DimensionLinePoint()
    def putref_DimensionLinePoint(self, point):
        '''Method IDimensionShape.putref_DimensionLinePoint

           INPUT
            point               : IPoint*'''
        return super(IDimensionShape, self).putref_DimensionLinePoint(point)
    def get_TextPoint(self):
        '''Method IDimensionShape.get_TextPoint

           OUTPUT
            point               : IPoint**'''
        return super(IDimensionShape, self).get_TextPoint()
    def putref_TextPoint(self, point):
        '''Method IDimensionShape.putref_TextPoint

           INPUT
            point               : IPoint*'''
        return super(IDimensionShape, self).putref_TextPoint(point)
    def get_ExtensionLineAngle(self):
        '''Method IDimensionShape.get_ExtensionLineAngle

           OUTPUT
            Angle               : double*'''
        return super(IDimensionShape, self).get_ExtensionLineAngle()
    def put_ExtensionLineAngle(self, Angle):
        '''Method IDimensionShape.put_ExtensionLineAngle

           INPUT
            Angle               : double'''
        return super(IDimensionShape, self).put_ExtensionLineAngle(Angle)
    def get_TextAngle(self):
        '''Method IDimensionShape.get_TextAngle

           OUTPUT
            Angle               : double*'''
        return super(IDimensionShape, self).get_TextAngle()
    def put_TextAngle(self, Angle):
        '''Method IDimensionShape.put_TextAngle

           INPUT
            Angle               : double'''
        return super(IDimensionShape, self).put_TextAngle(Angle)
    BeginDimensionPoint = property(get_BeginDimensionPoint, putref_BeginDimensionPoint, None)
    DimensionLinePoint = property(get_DimensionLinePoint, putref_DimensionLinePoint, None)
    EndDimensionPoint = property(get_EndDimensionPoint, putref_EndDimensionPoint, None)
    ExtensionLineAngle = property(get_ExtensionLineAngle, put_ExtensionLineAngle, None)
    TextAngle = property(get_TextAngle, put_TextAngle, None)
    TextPoint = property(get_TextPoint, putref_TextPoint, None)

class IDimensionFeature(_esriCarto.IDimensionFeature):
    _IID = uuid.UUID('5c305710-da7f-11d3-80ce-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_DimensionShape(self, Shape):
        '''Method IDimensionFeature.put_DimensionShape

           INPUT
            Shape               : IDimensionShape*'''
        return super(IDimensionFeature, self).put_DimensionShape(Shape)
    def get_DimensionShape(self):
        '''Method IDimensionFeature.get_DimensionShape

           OUTPUT
            Shape               : IDimensionShape**'''
        return super(IDimensionFeature, self).get_DimensionShape()
    def get_StyleID(self):
        '''Method IDimensionFeature.get_StyleID

           OUTPUT
            ID                  : long*'''
        return super(IDimensionFeature, self).get_StyleID()
    def put_StyleID(self, ID):
        '''Method IDimensionFeature.put_StyleID

           INPUT
            ID                  : long'''
        return super(IDimensionFeature, self).put_StyleID(ID)
    def get_Length(self):
        '''Method IDimensionFeature.get_Length

           OUTPUT
            Length              : double*'''
        return super(IDimensionFeature, self).get_Length()
    def get_CustomLength(self):
        '''Method IDimensionFeature.get_CustomLength

           OUTPUT
            Length              : double*'''
        return super(IDimensionFeature, self).get_CustomLength()
    def put_CustomLength(self, Length):
        '''Method IDimensionFeature.put_CustomLength

           INPUT
            Length              : double'''
        return super(IDimensionFeature, self).put_CustomLength(Length)
    def get_UseCustomLength(self):
        '''Method IDimensionFeature.get_UseCustomLength

           OUTPUT
            use                 : VARIANT_BOOL*'''
        return super(IDimensionFeature, self).get_UseCustomLength()
    def put_UseCustomLength(self, use):
        '''Method IDimensionFeature.put_UseCustomLength

           INPUT
            use                 : VARIANT_BOOL'''
        return super(IDimensionFeature, self).put_UseCustomLength(use)
    def put_DimensionLineDisplay(self, displayOption):
        '''Method IDimensionFeature.put_DimensionLineDisplay

           INPUT
            displayOption       : esriDimensionDisplay'''
        return super(IDimensionFeature, self).put_DimensionLineDisplay(displayOption)
    def get_DimensionLineDisplay(self):
        '''Method IDimensionFeature.get_DimensionLineDisplay

           OUTPUT
            displayOption       : esriDimensionDisplay*'''
        return super(IDimensionFeature, self).get_DimensionLineDisplay()
    def put_ExtensionLineDisplay(self, displayOption):
        '''Method IDimensionFeature.put_ExtensionLineDisplay

           INPUT
            displayOption       : esriDimensionDisplay'''
        return super(IDimensionFeature, self).put_ExtensionLineDisplay(displayOption)
    def get_ExtensionLineDisplay(self):
        '''Method IDimensionFeature.get_ExtensionLineDisplay

           OUTPUT
            displayOption       : esriDimensionDisplay*'''
        return super(IDimensionFeature, self).get_ExtensionLineDisplay()
    def put_MarkerDisplay(self, displayOption):
        '''Method IDimensionFeature.put_MarkerDisplay

           INPUT
            displayOption       : esriDimensionDisplay'''
        return super(IDimensionFeature, self).put_MarkerDisplay(displayOption)
    def get_MarkerDisplay(self):
        '''Method IDimensionFeature.get_MarkerDisplay

           OUTPUT
            displayOption       : esriDimensionDisplay*'''
        return super(IDimensionFeature, self).get_MarkerDisplay()
    def get_DimensionType(self):
        '''Method IDimensionFeature.get_DimensionType

           OUTPUT
            Type                : esriDimensionType*'''
        return super(IDimensionFeature, self).get_DimensionType()
    def put_DimensionType(self, Type):
        '''Method IDimensionFeature.put_DimensionType

           INPUT
            Type                : esriDimensionType'''
        return super(IDimensionFeature, self).put_DimensionType(Type)
    CustomLength = property(get_CustomLength, put_CustomLength, None)
    DimensionLineDisplay = property(get_DimensionLineDisplay, put_DimensionLineDisplay, None)
    DimensionShape = property(get_DimensionShape, put_DimensionShape, None)
    DimensionType = property(get_DimensionType, put_DimensionType, None)
    ExtensionLineDisplay = property(get_ExtensionLineDisplay, put_ExtensionLineDisplay, None)
    Length = property(get_Length, None, None)
    MarkerDisplay = property(get_MarkerDisplay, put_MarkerDisplay, None)
    StyleID = property(get_StyleID, put_StyleID, None)
    UseCustomLength = property(get_UseCustomLength, put_UseCustomLength, None)

class IEnumDimensionStyle(_esriCarto.IEnumDimensionStyle):
    _IID = uuid.UUID('c75d45e4-da88-11d3-80ce-00c04f601565')
    def Reset(self):
        '''Method IEnumDimensionStyle.Reset'''
        return super(IEnumDimensionStyle, self).Reset()
    def Next(self):
        '''Method IEnumDimensionStyle.Next

           OUTPUT
            Style               : IDimensionStyle**'''
        return super(IEnumDimensionStyle, self).Next()
    def __iter__(self):
        try:
            super(IEnumDimensionStyle, self).Reset()
            val = super(IEnumDimensionStyle, self).Next()
            while val:
                yield val
                val = super(IEnumDimensionStyle, self).Next()
        except:
            pass

class IDimensionStyles(_esriCarto.IDimensionStyles):
    _IID = uuid.UUID('81875328-de54-11d3-80ce-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionStyles, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def AddStyle(self, Style):
        '''Method IDimensionStyles.AddStyle

           INPUT
            Style               : IDimensionStyle*'''
        return super(IDimensionStyles, self).AddStyle(Style)
    def GetStyle(self, ID):
        '''Method IDimensionStyles.GetStyle

           INPUT
            ID                  : long

           OUTPUT
            Style               : IDimensionStyle**'''
        return super(IDimensionStyles, self).GetStyle(ID)
    def FindStyle(self, Name):
        '''Method IDimensionStyles.FindStyle

           INPUT
            Name                : BSTR

           OUTPUT
            Style               : IDimensionStyle**'''
        return super(IDimensionStyles, self).FindStyle(Name)
    def GetStyles(self):
        '''Method IDimensionStyles.GetStyles

           OUTPUT
            enumStyle           : IEnumDimensionStyle**'''
        return super(IDimensionStyles, self).GetStyles()
    def get_DefaultStyleID(self):
        '''Method IDimensionStyles.get_DefaultStyleID

           OUTPUT
            ID                  : long*'''
        return super(IDimensionStyles, self).get_DefaultStyleID()
    def put_DefaultStyleID(self, ID):
        '''Method IDimensionStyles.put_DefaultStyleID

           INPUT
            ID                  : long'''
        return super(IDimensionStyles, self).put_DefaultStyleID(ID)
    def DeleteStyle(self, ID):
        '''Method IDimensionStyles.DeleteStyle

           INPUT
            ID                  : long'''
        return super(IDimensionStyles, self).DeleteStyle(ID)
    def RenameStyle(self, ID, Name):
        '''Method IDimensionStyles.RenameStyle

           INPUTS
            ID                  : long
            Name                : BSTR'''
        return super(IDimensionStyles, self).RenameStyle(ID, Name)
    DefaultStyleID = property(get_DefaultStyleID, put_DefaultStyleID, None)

class IDimensionClassExtension(_esriCarto.IDimensionClassExtension):
    _IID = uuid.UUID('6558fe26-da81-11d3-80ce-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionClassExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DimensionStyles(self):
        '''Method IDimensionClassExtension.get_DimensionStyles

           OUTPUT
            styles              : IDimensionStyles**'''
        return super(IDimensionClassExtension, self).get_DimensionStyles()
    def UpdateProperties(self):
        '''Method IDimensionClassExtension.UpdateProperties'''
        return super(IDimensionClassExtension, self).UpdateProperties()
    def ResetProperties(self):
        '''Method IDimensionClassExtension.ResetProperties'''
        return super(IDimensionClassExtension, self).ResetProperties()
    def get_ReferenceScale(self):
        '''Method IDimensionClassExtension.get_ReferenceScale

           OUTPUT
            Scale               : double*'''
        return super(IDimensionClassExtension, self).get_ReferenceScale()
    def put_ReferenceScale(self, Scale):
        '''Method IDimensionClassExtension.put_ReferenceScale

           INPUT
            Scale               : double'''
        return super(IDimensionClassExtension, self).put_ReferenceScale(Scale)
    def get_ReferenceScaleUnits(self):
        '''Method IDimensionClassExtension.get_ReferenceScaleUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IDimensionClassExtension, self).get_ReferenceScaleUnits()
    def put_ReferenceScaleUnits(self, Units):
        '''Method IDimensionClassExtension.put_ReferenceScaleUnits

           INPUT
            Units               : esriUnits'''
        return super(IDimensionClassExtension, self).put_ReferenceScaleUnits(Units)
    def get_NativeTransformation(self):
        '''Method IDimensionClassExtension.get_NativeTransformation

           OUTPUT
            transformation      : ITransformation**'''
        return super(IDimensionClassExtension, self).get_NativeTransformation()
    DimensionStyles = property(get_DimensionStyles, None, None)
    NativeTransformation = property(get_NativeTransformation, None, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    ReferenceScaleUnits = property(get_ReferenceScaleUnits, put_ReferenceScaleUnits, None)

class IDimensionGraphic(_esriCarto.IDimensionGraphic):
    _IID = uuid.UUID('7126d088-fb61-11d3-80d3-00c04f601565')

    def __init__(self, *args, **kw):
        super(IDimensionGraphic, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DimensionShape(self, Shape):
        '''Method IDimensionGraphic.putref_DimensionShape

           INPUT
            Shape               : IDimensionShape*'''
        return super(IDimensionGraphic, self).putref_DimensionShape(Shape)
    def get_DimensionShape(self):
        '''Method IDimensionGraphic.get_DimensionShape

           OUTPUT
            Shape               : IDimensionShape**'''
        return super(IDimensionGraphic, self).get_DimensionShape()
    def get_Style(self):
        '''Method IDimensionGraphic.get_Style

           OUTPUT
            Style               : IDimensionStyle**'''
        return super(IDimensionGraphic, self).get_Style()
    def putref_Style(self, Style):
        '''Method IDimensionGraphic.putref_Style

           INPUT
            Style               : IDimensionStyle*'''
        return super(IDimensionGraphic, self).putref_Style(Style)
    def Draw(self, hDC, transformation):
        '''Method IDimensionGraphic.Draw

           INPUTS
            hDC                 : OLE_HANDLE
            transformation      : ITransformation*'''
        return super(IDimensionGraphic, self).Draw(hDC, transformation)
    def QueryBoundary(self, hDC, transformation, Boundary):
        '''Method IDimensionGraphic.QueryBoundary

           INPUTS
            hDC                 : OLE_HANDLE
            transformation      : ITransformation*
            Boundary            : IPolygon*'''
        return super(IDimensionGraphic, self).QueryBoundary(hDC, transformation, Boundary)
    def get_Length(self):
        '''Method IDimensionGraphic.get_Length

           OUTPUT
            Length              : double*'''
        return super(IDimensionGraphic, self).get_Length()
    def get_CustomLength(self):
        '''Method IDimensionGraphic.get_CustomLength

           OUTPUT
            Length              : double*'''
        return super(IDimensionGraphic, self).get_CustomLength()
    def put_CustomLength(self, Length):
        '''Method IDimensionGraphic.put_CustomLength

           INPUT
            Length              : double'''
        return super(IDimensionGraphic, self).put_CustomLength(Length)
    def get_UseCustomLength(self):
        '''Method IDimensionGraphic.get_UseCustomLength

           OUTPUT
            Length              : VARIANT_BOOL*'''
        return super(IDimensionGraphic, self).get_UseCustomLength()
    def put_UseCustomLength(self, Length):
        '''Method IDimensionGraphic.put_UseCustomLength

           INPUT
            Length              : VARIANT_BOOL'''
        return super(IDimensionGraphic, self).put_UseCustomLength(Length)
    def GetMask(self, hDC, transformation, Mask):
        '''Method IDimensionGraphic.GetMask

           INPUTS
            hDC                 : OLE_HANDLE
            transformation      : ITransformation*
            Mask                : IGeometry**'''
        return super(IDimensionGraphic, self).GetMask(hDC, transformation, Mask)
    def UpdateShape(self, hDC, transformation, pFeature):
        '''Method IDimensionGraphic.UpdateShape

           INPUTS
            hDC                 : OLE_HANDLE
            transformation      : ITransformation*
            pFeature            : IFeature*'''
        return super(IDimensionGraphic, self).UpdateShape(hDC, transformation, pFeature)
    def get_NativeUnits(self):
        '''Method IDimensionGraphic.get_NativeUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IDimensionGraphic, self).get_NativeUnits()
    def put_NativeUnits(self, Units):
        '''Method IDimensionGraphic.put_NativeUnits

           INPUT
            Units               : esriUnits'''
        return super(IDimensionGraphic, self).put_NativeUnits(Units)
    def GetDefaultTextPoint(self):
        '''Method IDimensionGraphic.GetDefaultTextPoint

           OUTPUT
            point               : IPoint**'''
        return super(IDimensionGraphic, self).GetDefaultTextPoint()
    def get_NativeTransformation(self):
        '''Method IDimensionGraphic.get_NativeTransformation

           OUTPUT
            transformation      : ITransformation**'''
        return super(IDimensionGraphic, self).get_NativeTransformation()
    def putref_NativeTransformation(self, transformation):
        '''Method IDimensionGraphic.putref_NativeTransformation

           INPUT
            transformation      : ITransformation*'''
        return super(IDimensionGraphic, self).putref_NativeTransformation(transformation)
    CustomLength = property(get_CustomLength, put_CustomLength, None)
    DimensionShape = property(get_DimensionShape, putref_DimensionShape, None)
    Length = property(get_Length, None, None)
    NativeTransformation = property(get_NativeTransformation, putref_NativeTransformation, None)
    NativeUnits = property(get_NativeUnits, put_NativeUnits, None)
    Style = property(get_Style, putref_Style, None)
    UseCustomLength = property(get_UseCustomLength, put_UseCustomLength, None)

class IDimensionClassExtension2(_esriCarto.IDimensionClassExtension2):
    _IID = uuid.UUID('7402bfe1-f2f1-22e9-052f-735ebbc50ac2')
    def get_NativeTransformation(self, pGraphic):
        '''Method IDimensionClassExtension2.get_NativeTransformation

           INPUT
            pGraphic            : IDimensionGraphic*

           OUTPUT
            transformation      : ITransformation**'''
        return super(IDimensionClassExtension2, self).get_NativeTransformation(pGraphic)
    NativeTransformation = IndexProperty(get_NativeTransformation, None)

class INewDimensionFeedback(_esriCarto.INewDimensionFeedback):
    _IID = uuid.UUID('a9a790c6-075c-11d4-80d6-00c04f601565')

    def __init__(self, *args, **kw):
        super(INewDimensionFeedback, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Style(self, _arg1):
        '''Method INewDimensionFeedback.put_Style

           INPUT
            _arg1               : IDimensionStyle*'''
        return super(INewDimensionFeedback, self).put_Style(_arg1)
    def Start(self, begin):
        '''Method INewDimensionFeedback.Start

           INPUT
            begin               : IPoint*'''
        return super(INewDimensionFeedback, self).Start(begin)
    def AddPoint(self, point):
        '''Method INewDimensionFeedback.AddPoint

           INPUT
            point               : IPoint*'''
        return super(INewDimensionFeedback, self).AddPoint(point)
    def Stop(self):
        '''Method INewDimensionFeedback.Stop

           OUTPUT
            Shape               : IDimensionShape**'''
        return super(INewDimensionFeedback, self).Stop()
    def get_DimensionType(self):
        '''Method INewDimensionFeedback.get_DimensionType

           OUTPUT
            Type                : esriDimensionType*'''
        return super(INewDimensionFeedback, self).get_DimensionType()
    def put_DimensionType(self, Type):
        '''Method INewDimensionFeedback.put_DimensionType

           INPUT
            Type                : esriDimensionType'''
        return super(INewDimensionFeedback, self).put_DimensionType(Type)
    def get_ReferenceScale(self):
        '''Method INewDimensionFeedback.get_ReferenceScale

           OUTPUT
            Scale               : double*'''
        return super(INewDimensionFeedback, self).get_ReferenceScale()
    def put_ReferenceScale(self, Scale):
        '''Method INewDimensionFeedback.put_ReferenceScale

           INPUT
            Scale               : double'''
        return super(INewDimensionFeedback, self).put_ReferenceScale(Scale)
    def get_ReferenceScaleUnits(self):
        '''Method INewDimensionFeedback.get_ReferenceScaleUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(INewDimensionFeedback, self).get_ReferenceScaleUnits()
    def put_ReferenceScaleUnits(self, Units):
        '''Method INewDimensionFeedback.put_ReferenceScaleUnits

           INPUT
            Units               : esriUnits'''
        return super(INewDimensionFeedback, self).put_ReferenceScaleUnits(Units)
    DimensionType = property(get_DimensionType, put_DimensionType, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    ReferenceScaleUnits = property(get_ReferenceScaleUnits, put_ReferenceScaleUnits, None)
    Style = property(None, put_Style, None)

class IModifyDimensionFeedback(_esriCarto.IModifyDimensionFeedback):
    _IID = uuid.UUID('f278b3a2-0f2c-11d4-80d7-00c04f601565')

    def __init__(self, *args, **kw):
        super(IModifyDimensionFeedback, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Style(self, _arg1):
        '''Method IModifyDimensionFeedback.put_Style

           INPUT
            _arg1               : IDimensionStyle*'''
        return super(IModifyDimensionFeedback, self).put_Style(_arg1)
    def get_DimensionShape(self):
        '''Method IModifyDimensionFeedback.get_DimensionShape

           OUTPUT
            Shape               : IDimensionShape**'''
        return super(IModifyDimensionFeedback, self).get_DimensionShape()
    def putref_DimensionShape(self, Shape):
        '''Method IModifyDimensionFeedback.putref_DimensionShape

           INPUT
            Shape               : IDimensionShape*'''
        return super(IModifyDimensionFeedback, self).putref_DimensionShape(Shape)
    def GetHandles(self):
        '''Method IModifyDimensionFeedback.GetHandles

           OUTPUT
            points              : IPointCollection**'''
        return super(IModifyDimensionFeedback, self).GetHandles()
    def Start(self, Handle):
        '''Method IModifyDimensionFeedback.Start

           INPUT
            Handle              : IPoint*'''
        return super(IModifyDimensionFeedback, self).Start(Handle)
    def Stop(self):
        '''Method IModifyDimensionFeedback.Stop

           OUTPUT
            Shape               : IDimensionShape**'''
        return super(IModifyDimensionFeedback, self).Stop()
    def get_DimensionType(self):
        '''Method IModifyDimensionFeedback.get_DimensionType

           OUTPUT
            Type                : esriDimensionType*'''
        return super(IModifyDimensionFeedback, self).get_DimensionType()
    def put_DimensionType(self, Type):
        '''Method IModifyDimensionFeedback.put_DimensionType

           INPUT
            Type                : esriDimensionType'''
        return super(IModifyDimensionFeedback, self).put_DimensionType(Type)
    def get_ReferenceScale(self):
        '''Method IModifyDimensionFeedback.get_ReferenceScale

           OUTPUT
            Scale               : double*'''
        return super(IModifyDimensionFeedback, self).get_ReferenceScale()
    def put_ReferenceScale(self, Scale):
        '''Method IModifyDimensionFeedback.put_ReferenceScale

           INPUT
            Scale               : double'''
        return super(IModifyDimensionFeedback, self).put_ReferenceScale(Scale)
    def get_ReferenceScaleUnits(self):
        '''Method IModifyDimensionFeedback.get_ReferenceScaleUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IModifyDimensionFeedback, self).get_ReferenceScaleUnits()
    def put_ReferenceScaleUnits(self, Units):
        '''Method IModifyDimensionFeedback.put_ReferenceScaleUnits

           INPUT
            Units               : esriUnits'''
        return super(IModifyDimensionFeedback, self).put_ReferenceScaleUnits(Units)
    DimensionShape = property(get_DimensionShape, putref_DimensionShape, None)
    DimensionType = property(get_DimensionType, put_DimensionType, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    ReferenceScaleUnits = property(get_ReferenceScaleUnits, put_ReferenceScaleUnits, None)
    Style = property(None, put_Style, None)

class IAnnotateFeature(_esriCarto.IAnnotateFeature):
    _IID = uuid.UUID('858eb8e3-c2a5-11d2-9f30-00c04f6bc6a5')
    def Label(self, annoLayerProps, Feature, Display, pSpatialRef, barrierColl):
        '''Method IAnnotateFeature.Label

           INPUTS
            annoLayerProps      : IAnnotateLayerProperties*
            Feature             : IFeature*
            Display             : IDisplay*
            pSpatialRef         : ISpatialReference*
            barrierColl         : IBarrierCollection*

           OUTPUTS
            placedElement       : IElement**
            unplacedElement     : IElement**'''
        return super(IAnnotateFeature, self).Label(annoLayerProps, Feature, Display, pSpatialRef, barrierColl)

class IAnnotateFeature2(_esriCarto.IAnnotateFeature2):
    _IID = uuid.UUID('2cf9d4eb-53a9-45aa-a7f7-5a89239cfd5a')
    def Label(self, overposterProps, annoLayerProps, Feature, Display, pSpatialRef, barrierColl):
        '''Method IAnnotateFeature2.Label

           INPUTS
            overposterProps     : IOverposterProperties*
            annoLayerProps      : IAnnotateLayerProperties*
            Feature             : IFeature*
            Display             : IDisplay*
            pSpatialRef         : ISpatialReference*
            barrierColl         : IBarrierCollection*

           OUTPUTS
            placedElement       : IElement**
            unplacedElement     : IElement**'''
        return super(IAnnotateFeature2, self).Label(overposterProps, annoLayerProps, Feature, Display, pSpatialRef, barrierColl)

class IAnnotationErrorEvents(_esriCarto.IAnnotationErrorEvents):
    _IID = uuid.UUID('a066d11d-9d0c-11d3-9fd5-00c04f6bc6a5')
    def ErrorAddingElements(self):
        '''Method IAnnotationErrorEvents.ErrorAddingElements'''
        return super(IAnnotationErrorEvents, self).ErrorAddingElements()
    def TooManyOverflow(self, numOverflow):
        '''Method IAnnotationErrorEvents.TooManyOverflow

           INPUT
            numOverflow         : long

           OUTPUT
            addOverflow         : VARIANT_BOOL*'''
        return super(IAnnotationErrorEvents, self).TooManyOverflow(numOverflow)

class IMapOverposter(_esriCarto.IMapOverposter):
    _IID = uuid.UUID('7cf1a834-dca5-40df-9fa0-544fa3b09eff')

    def __init__(self, *args, **kw):
        super(IMapOverposter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_OverposterProperties(self):
        '''Method IMapOverposter.get_OverposterProperties

           OUTPUT
            OverposterProperties: IOverposterProperties**'''
        return super(IMapOverposter, self).get_OverposterProperties()
    def putref_OverposterProperties(self, OverposterProperties):
        '''Method IMapOverposter.putref_OverposterProperties

           INPUT
            OverposterProperties: IOverposterProperties*'''
        return super(IMapOverposter, self).putref_OverposterProperties(OverposterProperties)
    OverposterProperties = property(get_OverposterProperties, putref_OverposterProperties, None)

class IExtentStack(_esriCarto.IExtentStack):
    _IID = uuid.UUID('8fd414a3-403f-11d2-a2a9-080009b6f22b')
    def get_Count(self):
        '''Method IExtentStack.get_Count

           OUTPUT
            Count               : long*'''
        return super(IExtentStack, self).get_Count()
    def get_Item(self, Index):
        '''Method IExtentStack.get_Item

           INPUT
            Index               : long

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IExtentStack, self).get_Item(Index)
    def Reset(self):
        '''Method IExtentStack.Reset'''
        return super(IExtentStack, self).Reset()
    def Do(self, Extent):
        '''Method IExtentStack.Do

           INPUT
            Extent              : IEnvelope*'''
        return super(IExtentStack, self).Do(Extent)
    def Undo(self):
        '''Method IExtentStack.Undo'''
        return super(IExtentStack, self).Undo()
    def Redo(self):
        '''Method IExtentStack.Redo'''
        return super(IExtentStack, self).Redo()
    def CanUndo(self):
        '''Method IExtentStack.CanUndo

           OUTPUT
            CanUndo             : VARIANT_BOOL*'''
        return super(IExtentStack, self).CanUndo()
    def CanRedo(self):
        '''Method IExtentStack.CanRedo

           OUTPUT
            CanRedo             : VARIANT_BOOL*'''
        return super(IExtentStack, self).CanRedo()
    Count = property(get_Count, None, None)
    Item = IndexProperty(get_Item, None)

class IFDOGraphicsLayer(_esriCarto.IFDOGraphicsLayer):
    _IID = uuid.UUID('48e56b3f-ec3a-11d2-9f5c-00c04f6bc6a5')
    def BeginAddElements(self):
        '''Method IFDOGraphicsLayer.BeginAddElements'''
        return super(IFDOGraphicsLayer, self).BeginAddElements()
    def SetupAttributeConversion(self, numAttributes, inputCols, outputCols):
        '''Method IFDOGraphicsLayer.SetupAttributeConversion

           INPUTS
            numAttributes       : long
            inputCols           : long*
            outputCols          : long*'''
        return super(IFDOGraphicsLayer, self).SetupAttributeConversion(numAttributes, inputCols, outputCols)
    def DoAddFeature(self, pFeature, pElement, zorder):
        '''Method IFDOGraphicsLayer.DoAddFeature

           INPUTS
            pFeature            : IFeature*
            pElement            : IElement*
            zorder              : long'''
        return super(IFDOGraphicsLayer, self).DoAddFeature(pFeature, pElement, zorder)
    def DoAddElements(self, pElements, zorder):
        '''Method IFDOGraphicsLayer.DoAddElements

           INPUTS
            pElements           : IElementCollection*
            zorder              : long'''
        return super(IFDOGraphicsLayer, self).DoAddElements(pElements, zorder)
    def EndAddElements(self):
        '''Method IFDOGraphicsLayer.EndAddElements'''
        return super(IFDOGraphicsLayer, self).EndAddElements()

class IFDOGraphicsLayer2(_esriCarto.IFDOGraphicsLayer2):
    _IID = uuid.UUID('8321c2c6-72f9-48a6-bfcb-67efd7597564')
    def BeginAddElements(self):
        '''Method IFDOGraphicsLayer2.BeginAddElements'''
        return super(IFDOGraphicsLayer2, self).BeginAddElements()
    def SetupAttributeConversion(self, numAttributes, inputCols, outputCols):
        '''Method IFDOGraphicsLayer2.SetupAttributeConversion

           INPUTS
            numAttributes       : long
            inputCols           : long*
            outputCols          : long*'''
        return super(IFDOGraphicsLayer2, self).SetupAttributeConversion(numAttributes, inputCols, outputCols)
    def DoAddFeature(self, pFeature, pElement, zorder):
        '''Method IFDOGraphicsLayer2.DoAddFeature

           INPUTS
            pFeature            : IFeature*
            pElement            : IElement*
            zorder              : long'''
        return super(IFDOGraphicsLayer2, self).DoAddFeature(pFeature, pElement, zorder)
    def DoAddElements(self, pElements, zorder):
        '''Method IFDOGraphicsLayer2.DoAddElements

           INPUTS
            pElements           : IElementCollection*
            zorder              : long'''
        return super(IFDOGraphicsLayer2, self).DoAddElements(pElements, zorder)
    def EndAddElements(self):
        '''Method IFDOGraphicsLayer2.EndAddElements'''
        return super(IFDOGraphicsLayer2, self).EndAddElements()
    def DoAddNullElement(self, FeatureId):
        '''Method IFDOGraphicsLayer2.DoAddNullElement

           INPUT
            FeatureId           : long'''
        return super(IFDOGraphicsLayer2, self).DoAddNullElement(FeatureId)

class IAnnotationLayer(_esriCarto.IAnnotationLayer):
    _IID = uuid.UUID('4aedc069-b599-424b-a374-49602abad308')

    def __init__(self, *args, **kw):
        super(IAnnotationLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def BeginAddElements(self):
        '''Method IAnnotationLayer.BeginAddElements'''
        return super(IAnnotationLayer, self).BeginAddElements()
    def SetupAttributeConversion(self, numAttributes, inputCols, outputCols):
        '''Method IAnnotationLayer.SetupAttributeConversion

           INPUTS
            numAttributes       : long
            inputCols           : long*
            outputCols          : long*'''
        return super(IAnnotationLayer, self).SetupAttributeConversion(numAttributes, inputCols, outputCols)
    def DoAddFeature(self, pFeature, pElement, zorder, AnnotationClassID, Status):
        '''Method IAnnotationLayer.DoAddFeature

           INPUTS
            pFeature            : IFeature*
            pElement            : IElement*
            zorder              : long
            AnnotationClassID   : long
            Status              : esriAnnotationStatus'''
        return super(IAnnotationLayer, self).DoAddFeature(pFeature, pElement, zorder, AnnotationClassID, Status)
    def DoAddElements(self, pElements, zorder):
        '''Method IAnnotationLayer.DoAddElements

           INPUTS
            pElements           : IElementCollection*
            zorder              : long'''
        return super(IAnnotationLayer, self).DoAddElements(pElements, zorder)
    def EndAddElements(self):
        '''Method IAnnotationLayer.EndAddElements'''
        return super(IAnnotationLayer, self).EndAddElements()
    def DoAddNullElement(self, FeatureId, AnnotationClassID, Status):
        '''Method IAnnotationLayer.DoAddNullElement

           INPUTS
            FeatureId           : long
            AnnotationClassID   : long
            Status              : esriAnnotationStatus'''
        return super(IAnnotationLayer, self).DoAddNullElement(FeatureId, AnnotationClassID, Status)
    def get_DrawUnplacedAnnotation(self):
        '''Method IAnnotationLayer.get_DrawUnplacedAnnotation

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnotationLayer, self).get_DrawUnplacedAnnotation()
    def put_DrawUnplacedAnnotation(self, flag):
        '''Method IAnnotationLayer.put_DrawUnplacedAnnotation

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IAnnotationLayer, self).put_DrawUnplacedAnnotation(flag)
    def get_UnplacedAnnotationColor(self):
        '''Method IAnnotationLayer.get_UnplacedAnnotationColor

           OUTPUT
            Color               : IColor**'''
        return super(IAnnotationLayer, self).get_UnplacedAnnotationColor()
    def putref_UnplacedAnnotationColor(self, Color):
        '''Method IAnnotationLayer.putref_UnplacedAnnotationColor

           INPUT
            Color               : IColor*'''
        return super(IAnnotationLayer, self).putref_UnplacedAnnotationColor(Color)
    def get_AddErrorInfo(self):
        '''Method IAnnotationLayer.get_AddErrorInfo

           OUTPUTS
            errors              : BSTR*
            FilePath            : BSTR*'''
        return super(IAnnotationLayer, self).get_AddErrorInfo()
    AddErrorInfo = property(get_AddErrorInfo, None, None)
    DrawUnplacedAnnotation = property(get_DrawUnplacedAnnotation, put_DrawUnplacedAnnotation, None)
    UnplacedAnnotationColor = property(get_UnplacedAnnotationColor, putref_UnplacedAnnotationColor, None)

class IFDOGraphicsLayerRead(_esriCarto.IFDOGraphicsLayerRead):
    _IID = uuid.UUID('5ceae408-4c0a-437f-9db3-054d83919850')
    def GenerateGraphics(self, box, Display, pTrackCancel, useGroupSymbolElement):
        '''Method IFDOGraphicsLayerRead.GenerateGraphics

           INPUTS
            box                 : IEnvelope*
            Display             : IDisplay*
            pTrackCancel        : ITrackCancel*
            useGroupSymbolElement: VARIANT_BOOL

           OUTPUT
            Elements            : IEnumElement**'''
        return super(IFDOGraphicsLayerRead, self).GenerateGraphics(box, Display, pTrackCancel, useGroupSymbolElement)
    def StartGeneratingGraphics(self, box, Display, withAttributes, useGroupSymbolElement, selectedRecordsOnly):
        '''Method IFDOGraphicsLayerRead.StartGeneratingGraphics

           INPUTS
            box                 : IEnvelope*
            Display             : IDisplay*
            withAttributes      : VARIANT_BOOL
            useGroupSymbolElement: VARIANT_BOOL
            selectedRecordsOnly : VARIANT_BOOL'''
        return super(IFDOGraphicsLayerRead, self).StartGeneratingGraphics(box, Display, withAttributes, useGroupSymbolElement, selectedRecordsOnly)
    def get_NextGraphic(self):
        '''Method IFDOGraphicsLayerRead.get_NextGraphic

           OUTPUT
            Element             : IElement**'''
        return super(IFDOGraphicsLayerRead, self).get_NextGraphic()
    def NextFeatureAndGraphic(self):
        '''Method IFDOGraphicsLayerRead.NextFeatureAndGraphic

           OUTPUTS
            Feature             : IFeature**
            Element             : IElement**'''
        return super(IFDOGraphicsLayerRead, self).NextFeatureAndGraphic()
    NextGraphic = property(get_NextGraphic, None, None)

class IFDOAttributeConversion(_esriCarto.IFDOAttributeConversion):
    _IID = uuid.UUID('5a5fe792-9637-49a7-b97a-209931b15c3c')
    def SetupAttributeConversion2(self, numAttributes, inputCols, outputCols):
        '''Method IFDOAttributeConversion.SetupAttributeConversion2

           INPUTS
            numAttributes       : long
            inputCols           : VARIANT
            outputCols          : VARIANT'''
        return super(IFDOAttributeConversion, self).SetupAttributeConversion2(numAttributes, inputCols, outputCols)

class IFDOGraphicsLayerFactory(_esriCarto.IFDOGraphicsLayerFactory):
    _IID = uuid.UUID('34b2ef85-f4ac-11d1-a245-080009b6f22b')
    def CreateGraphicsLayer(self, graphicWorkspace, FeatureDataset, graphicsLayerName, pGeometryDef, pAssociatedFeatureClass, annoLayerProps, ReferenceScale, SymbolCollection, AutoCreate):
        '''Method IFDOGraphicsLayerFactory.CreateGraphicsLayer

           INPUTS
            graphicWorkspace    : IFeatureWorkspace*
            FeatureDataset      : IFeatureDataset*
            graphicsLayerName   : BSTR
            pGeometryDef        : IGeometryDef*
            pAssociatedFeatureClass: IFeatureClass*
            annoLayerProps      : IAnnotateLayerPropertiesCollection*
            ReferenceScale      : IGraphicsLayerScale*
            SymbolCollection    : ISymbolCollection*
            AutoCreate          : VARIANT_BOOL

           OUTPUT
            Layer               : ILayer**'''
        return super(IFDOGraphicsLayerFactory, self).CreateGraphicsLayer(graphicWorkspace, FeatureDataset, graphicsLayerName, pGeometryDef, pAssociatedFeatureClass, annoLayerProps, ReferenceScale, SymbolCollection, AutoCreate)
    def OpenGraphicsLayer(self, graphicWorkspace, FeatureDataset, graphicsLayerName):
        '''Method IFDOGraphicsLayerFactory.OpenGraphicsLayer

           INPUTS
            graphicWorkspace    : IFeatureWorkspace*
            FeatureDataset      : IFeatureDataset*
            graphicsLayerName   : BSTR

           OUTPUT
            Layer               : ILayer**'''
        return super(IFDOGraphicsLayerFactory, self).OpenGraphicsLayer(graphicWorkspace, FeatureDataset, graphicsLayerName)
    def FindGraphicsLayerNames(self, graphicWorkspace):
        '''Method IFDOGraphicsLayerFactory.FindGraphicsLayerNames

           INPUT
            graphicWorkspace    : IFeatureWorkspace*

           OUTPUT
            names               : IEnumBSTR**'''
        return super(IFDOGraphicsLayerFactory, self).FindGraphicsLayerNames(graphicWorkspace)

class IAnnotationLayerFactory(_esriCarto.IAnnotationLayerFactory):
    _IID = uuid.UUID('e1474078-0272-46dc-9b51-08e2997f4a43')
    def CreateAnnotationLayer(self, Workspace, FeatureDataset, annotationClassName, pGeometryDef, pAssociatedFeatureClass, annoLayerProps, ReferenceScale, SymbolCollection, AutoCreate, UpdateOnShapeChange, RequireSymbolID, AllowSymbolOverrides, OverposterProperties, configKeyword):
        '''Method IAnnotationLayerFactory.CreateAnnotationLayer

           INPUTS
            Workspace           : IFeatureWorkspace*
            FeatureDataset      : IFeatureDataset*
            annotationClassName : BSTR
            pGeometryDef        : IGeometryDef*
            pAssociatedFeatureClass: IFeatureClass*
            annoLayerProps      : IAnnotateLayerPropertiesCollection*
            ReferenceScale      : IGraphicsLayerScale*
            SymbolCollection    : ISymbolCollection*
            AutoCreate          : VARIANT_BOOL
            UpdateOnShapeChange : VARIANT_BOOL
            RequireSymbolID     : VARIANT_BOOL
            AllowSymbolOverrides: VARIANT_BOOL
            OverposterProperties: IOverposterProperties*
            configKeyword       : BSTR

           OUTPUT
            Layer               : IAnnotationLayer**'''
        return super(IAnnotationLayerFactory, self).CreateAnnotationLayer(Workspace, FeatureDataset, annotationClassName, pGeometryDef, pAssociatedFeatureClass, annoLayerProps, ReferenceScale, SymbolCollection, AutoCreate, UpdateOnShapeChange, RequireSymbolID, AllowSymbolOverrides, OverposterProperties, configKeyword)
    def OpenAnnotationLayer(self, Workspace, FeatureDataset, annotationClassName):
        '''Method IAnnotationLayerFactory.OpenAnnotationLayer

           INPUTS
            Workspace           : IFeatureWorkspace*
            FeatureDataset      : IFeatureDataset*
            annotationClassName : BSTR

           OUTPUT
            Layer               : IAnnotationLayer**'''
        return super(IAnnotationLayerFactory, self).OpenAnnotationLayer(Workspace, FeatureDataset, annotationClassName)
    def FindAnnotationFeatureClassNames(self, Workspace):
        '''Method IAnnotationLayerFactory.FindAnnotationFeatureClassNames

           INPUT
            Workspace           : IFeatureWorkspace*

           OUTPUT
            names               : IEnumBSTR**'''
        return super(IAnnotationLayerFactory, self).FindAnnotationFeatureClassNames(Workspace)

class ISymbolSubstitution(_esriCarto.ISymbolSubstitution):
    _IID = uuid.UUID('b8ddfa29-43f2-40df-8bff-c7a2879c1f90')

    def __init__(self, *args, **kw):
        super(ISymbolSubstitution, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MassColor(self):
        '''Method ISymbolSubstitution.get_MassColor

           OUTPUT
            Color               : IColor**'''
        return super(ISymbolSubstitution, self).get_MassColor()
    def putref_MassColor(self, Color):
        '''Method ISymbolSubstitution.putref_MassColor

           INPUT
            Color               : IColor*'''
        return super(ISymbolSubstitution, self).putref_MassColor(Color)
    def get_InlineColor(self):
        '''Method ISymbolSubstitution.get_InlineColor

           OUTPUT
            Color               : IColor**'''
        return super(ISymbolSubstitution, self).get_InlineColor()
    def putref_InlineColor(self, Color):
        '''Method ISymbolSubstitution.putref_InlineColor

           INPUT
            Color               : IColor*'''
        return super(ISymbolSubstitution, self).putref_InlineColor(Color)
    def get_SubstituteSymbolCollection(self):
        '''Method ISymbolSubstitution.get_SubstituteSymbolCollection

           OUTPUT
            SymbolCollection    : ISymbolCollection**'''
        return super(ISymbolSubstitution, self).get_SubstituteSymbolCollection()
    def putref_SubstituteSymbolCollection(self, SymbolCollection):
        '''Method ISymbolSubstitution.putref_SubstituteSymbolCollection

           INPUT
            SymbolCollection    : ISymbolCollection*'''
        return super(ISymbolSubstitution, self).putref_SubstituteSymbolCollection(SymbolCollection)
    def get_SubstituteType(self):
        '''Method ISymbolSubstitution.get_SubstituteType

           OUTPUT
            SubstituteType      : esriSymbolSubstituteType*'''
        return super(ISymbolSubstitution, self).get_SubstituteType()
    def put_SubstituteType(self, SubstituteType):
        '''Method ISymbolSubstitution.put_SubstituteType

           INPUT
            SubstituteType      : esriSymbolSubstituteType'''
        return super(ISymbolSubstitution, self).put_SubstituteType(SubstituteType)
    InlineColor = property(get_InlineColor, putref_InlineColor, None)
    MassColor = property(get_MassColor, putref_MassColor, None)
    SubstituteSymbolCollection = property(get_SubstituteSymbolCollection, putref_SubstituteSymbolCollection, None)
    SubstituteType = property(get_SubstituteType, put_SubstituteType, None)

class IAnnotationFeature(_esriCarto.IAnnotationFeature):
    _IID = uuid.UUID('e3676992-c682-11d2-8a2a-006097aff44e')

    def __init__(self, *args, **kw):
        super(IAnnotationFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Annotation(self):
        '''Method IAnnotationFeature.get_Annotation

           OUTPUT
            Element             : IElement**'''
        return super(IAnnotationFeature, self).get_Annotation()
    def put_Annotation(self, Element):
        '''Method IAnnotationFeature.put_Annotation

           INPUT
            Element             : IElement*'''
        return super(IAnnotationFeature, self).put_Annotation(Element)
    def put_LinkedFeatureID(self, FID):
        '''Method IAnnotationFeature.put_LinkedFeatureID

           INPUT
            FID                 : long'''
        return super(IAnnotationFeature, self).put_LinkedFeatureID(FID)
    def get_LinkedFeatureID(self):
        '''Method IAnnotationFeature.get_LinkedFeatureID

           OUTPUT
            FID                 : long*'''
        return super(IAnnotationFeature, self).get_LinkedFeatureID()
    Annotation = property(get_Annotation, put_Annotation, None)
    LinkedFeatureID = property(get_LinkedFeatureID, put_LinkedFeatureID, None)

class IAnnotationFeature2(_esriCarto.IAnnotationFeature2):
    _IID = uuid.UUID('6053616b-2212-469e-bc40-c7285f48dce2')

    def __init__(self, *args, **kw):
        super(IAnnotationFeature2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Annotation(self):
        '''Method IAnnotationFeature2.get_Annotation

           OUTPUT
            Element             : IElement**'''
        return super(IAnnotationFeature2, self).get_Annotation()
    def put_Annotation(self, Element):
        '''Method IAnnotationFeature2.put_Annotation

           INPUT
            Element             : IElement*'''
        return super(IAnnotationFeature2, self).put_Annotation(Element)
    def put_LinkedFeatureID(self, FID):
        '''Method IAnnotationFeature2.put_LinkedFeatureID

           INPUT
            FID                 : long'''
        return super(IAnnotationFeature2, self).put_LinkedFeatureID(FID)
    def get_LinkedFeatureID(self):
        '''Method IAnnotationFeature2.get_LinkedFeatureID

           OUTPUT
            FID                 : long*'''
        return super(IAnnotationFeature2, self).get_LinkedFeatureID()
    def put_AnnotationClassID(self, AnnotationClassID):
        '''Method IAnnotationFeature2.put_AnnotationClassID

           INPUT
            AnnotationClassID   : long'''
        return super(IAnnotationFeature2, self).put_AnnotationClassID(AnnotationClassID)
    def get_AnnotationClassID(self):
        '''Method IAnnotationFeature2.get_AnnotationClassID

           OUTPUT
            AnnotationClassID   : long*'''
        return super(IAnnotationFeature2, self).get_AnnotationClassID()
    def put_Status(self, Status):
        '''Method IAnnotationFeature2.put_Status

           INPUT
            Status              : esriAnnotationStatus'''
        return super(IAnnotationFeature2, self).put_Status(Status)
    def get_Status(self):
        '''Method IAnnotationFeature2.get_Status

           OUTPUT
            Status              : esriAnnotationStatus*'''
        return super(IAnnotationFeature2, self).get_Status()
    Annotation = property(get_Annotation, put_Annotation, None)
    AnnotationClassID = property(get_AnnotationClassID, put_AnnotationClassID, None)
    LinkedFeatureID = property(get_LinkedFeatureID, put_LinkedFeatureID, None)
    Status = property(get_Status, put_Status, None)

class IAnnoClass(_esriCarto.IAnnoClass):
    _IID = uuid.UUID('4d10c41b-d7e0-11d2-9f41-00c04f6bc6a5')
    def get_FeatureClass(self):
        '''Method IAnnoClass.get_FeatureClass

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IAnnoClass, self).get_FeatureClass()
    def get_AnnoProperties(self):
        '''Method IAnnoClass.get_AnnoProperties

           OUTPUT
            AnnoProperties      : IAnnotateLayerPropertiesCollection**'''
        return super(IAnnoClass, self).get_AnnoProperties()
    def get_Symbol(self, SymbolID):
        '''Method IAnnoClass.get_Symbol

           INPUT
            SymbolID            : long

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IAnnoClass, self).get_Symbol(SymbolID)
    def get_ReferenceScale(self):
        '''Method IAnnoClass.get_ReferenceScale

           OUTPUT
            ReferenceScale      : double*'''
        return super(IAnnoClass, self).get_ReferenceScale()
    def get_ReferenceScaleUnits(self):
        '''Method IAnnoClass.get_ReferenceScaleUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IAnnoClass, self).get_ReferenceScaleUnits()
    def get_SymbolCollection(self):
        '''Method IAnnoClass.get_SymbolCollection

           OUTPUT
            ppSymbolColl        : ISymbolCollection**'''
        return super(IAnnoClass, self).get_SymbolCollection()
    def get_Version(self):
        '''Method IAnnoClass.get_Version

           OUTPUT
            Version             : short*'''
        return super(IAnnoClass, self).get_Version()
    def Draw(self, annoFeature, Display, Symbol):
        '''Method IAnnoClass.Draw

           INPUTS
            annoFeature         : IAnnotationFeature*
            Display             : IDisplay*
            Symbol              : ISymbol*'''
        return super(IAnnoClass, self).Draw(annoFeature, Display, Symbol)
    def get_ElementFieldIndex(self):
        '''Method IAnnoClass.get_ElementFieldIndex

           OUTPUT
            ElementFieldIndex   : long*'''
        return super(IAnnoClass, self).get_ElementFieldIndex()
    def get_FeatureIDFieldIndex(self):
        '''Method IAnnoClass.get_FeatureIDFieldIndex

           OUTPUT
            FeatureIDFieldIndex : long*'''
        return super(IAnnoClass, self).get_FeatureIDFieldIndex()
    AnnoProperties = property(get_AnnoProperties, None, None)
    ElementFieldIndex = property(get_ElementFieldIndex, None, None)
    FeatureClass = property(get_FeatureClass, None, None)
    FeatureIDFieldIndex = property(get_FeatureIDFieldIndex, None, None)
    ReferenceScale = property(get_ReferenceScale, None, None)
    ReferenceScaleUnits = property(get_ReferenceScaleUnits, None, None)
    SymbolCollection = property(get_SymbolCollection, None, None)
    Version = property(get_Version, None, None)
    Symbol = IndexProperty(get_Symbol, None)

class IAnnotationClassExtension(_esriCarto.IAnnotationClassExtension):
    _IID = uuid.UUID('129b8bf2-5d9d-45ae-864c-876f930a8cfb')
    def get_Display(self):
        '''Method IAnnotationClassExtension.get_Display

           OUTPUT
            ppDisplay           : IDisplay**'''
        return super(IAnnotationClassExtension, self).get_Display()
    def SynchronizeAttributes(self, pTextElement, pAnnoFeature):
        '''Method IAnnotationClassExtension.SynchronizeAttributes

           INPUTS
            pTextElement        : ITextElement*
            pAnnoFeature        : IAnnotationFeature*'''
        return super(IAnnotationClassExtension, self).SynchronizeAttributes(pTextElement, pAnnoFeature)
    def get_AnnotationClassIDFieldIndex(self):
        '''Method IAnnotationClassExtension.get_AnnotationClassIDFieldIndex

           OUTPUT
            AnnotationClassIDFieldIndex: long*'''
        return super(IAnnotationClassExtension, self).get_AnnotationClassIDFieldIndex()
    def get_StatusFieldIndex(self):
        '''Method IAnnotationClassExtension.get_StatusFieldIndex

           OUTPUT
            StatusFieldIndex    : long*'''
        return super(IAnnotationClassExtension, self).get_StatusFieldIndex()
    def get_UpdateOnShapeChange(self):
        '''Method IAnnotationClassExtension.get_UpdateOnShapeChange

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnotationClassExtension, self).get_UpdateOnShapeChange()
    def get_AutoCreate(self):
        '''Method IAnnotationClassExtension.get_AutoCreate

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnotationClassExtension, self).get_AutoCreate()
    def get_RequireSymbolID(self):
        '''Method IAnnotationClassExtension.get_RequireSymbolID

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnotationClassExtension, self).get_RequireSymbolID()
    def get_AllowSymbolOverrides(self):
        '''Method IAnnotationClassExtension.get_AllowSymbolOverrides

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnotationClassExtension, self).get_AllowSymbolOverrides()
    def get_OverposterProperties(self):
        '''Method IAnnotationClassExtension.get_OverposterProperties

           OUTPUT
            OverposterProperties: IOverposterProperties**'''
        return super(IAnnotationClassExtension, self).get_OverposterProperties()
    def get_LinkedFeatureClass(self):
        '''Method IAnnotationClassExtension.get_LinkedFeatureClass

           OUTPUT
            LinkedFeatureClass  : IFeatureClass**'''
        return super(IAnnotationClassExtension, self).get_LinkedFeatureClass()
    def get_FeatureClass(self):
        '''Method IAnnoClass.get_FeatureClass (from IAnnoClass)

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IAnnotationClassExtension, self).get_FeatureClass()
    def get_AnnoProperties(self):
        '''Method IAnnoClass.get_AnnoProperties (from IAnnoClass)

           OUTPUT
            AnnoProperties      : IAnnotateLayerPropertiesCollection**'''
        return super(IAnnotationClassExtension, self).get_AnnoProperties()
    def get_Symbol(self, SymbolID):
        '''Method IAnnoClass.get_Symbol (from IAnnoClass)

           INPUT
            SymbolID            : long

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IAnnotationClassExtension, self).get_Symbol(SymbolID)
    def get_ReferenceScale(self):
        '''Method IAnnoClass.get_ReferenceScale (from IAnnoClass)

           OUTPUT
            ReferenceScale      : double*'''
        return super(IAnnotationClassExtension, self).get_ReferenceScale()
    def get_ReferenceScaleUnits(self):
        '''Method IAnnoClass.get_ReferenceScaleUnits (from IAnnoClass)

           OUTPUT
            Units               : esriUnits*'''
        return super(IAnnotationClassExtension, self).get_ReferenceScaleUnits()
    def get_SymbolCollection(self):
        '''Method IAnnoClass.get_SymbolCollection (from IAnnoClass)

           OUTPUT
            ppSymbolColl        : ISymbolCollection**'''
        return super(IAnnotationClassExtension, self).get_SymbolCollection()
    def get_Version(self):
        '''Method IAnnoClass.get_Version (from IAnnoClass)

           OUTPUT
            Version             : short*'''
        return super(IAnnotationClassExtension, self).get_Version()
    def Draw(self, annoFeature, Display, Symbol):
        '''Method IAnnoClass.Draw (from IAnnoClass)

           INPUTS
            annoFeature         : IAnnotationFeature*
            Display             : IDisplay*
            Symbol              : ISymbol*'''
        return super(IAnnotationClassExtension, self).Draw(annoFeature, Display, Symbol)
    def get_ElementFieldIndex(self):
        '''Method IAnnoClass.get_ElementFieldIndex (from IAnnoClass)

           OUTPUT
            ElementFieldIndex   : long*'''
        return super(IAnnotationClassExtension, self).get_ElementFieldIndex()
    def get_FeatureIDFieldIndex(self):
        '''Method IAnnoClass.get_FeatureIDFieldIndex (from IAnnoClass)

           OUTPUT
            FeatureIDFieldIndex : long*'''
        return super(IAnnotationClassExtension, self).get_FeatureIDFieldIndex()
    AllowSymbolOverrides = property(get_AllowSymbolOverrides, None, None)
    AnnoProperties = property(get_AnnoProperties, None, None)
    AnnotationClassIDFieldIndex = property(get_AnnotationClassIDFieldIndex, None, None)
    AutoCreate = property(get_AutoCreate, None, None)
    Display = property(get_Display, None, None)
    ElementFieldIndex = property(get_ElementFieldIndex, None, None)
    FeatureClass = property(get_FeatureClass, None, None)
    FeatureIDFieldIndex = property(get_FeatureIDFieldIndex, None, None)
    LinkedFeatureClass = property(get_LinkedFeatureClass, None, None)
    OverposterProperties = property(get_OverposterProperties, None, None)
    ReferenceScale = property(get_ReferenceScale, None, None)
    ReferenceScaleUnits = property(get_ReferenceScaleUnits, None, None)
    RequireSymbolID = property(get_RequireSymbolID, None, None)
    StatusFieldIndex = property(get_StatusFieldIndex, None, None)
    SymbolCollection = property(get_SymbolCollection, None, None)
    UpdateOnShapeChange = property(get_UpdateOnShapeChange, None, None)
    Version = property(get_Version, None, None)
    Symbol = IndexProperty(get_Symbol, None)

class IAnnotationClassExtension2(_esriCarto.IAnnotationClassExtension2):
    _IID = uuid.UUID('75def45a-9bf2-dd39-007a-26ffedab3190')
    def get_Display(self, pElement):
        '''Method IAnnotationClassExtension2.get_Display

           INPUT
            pElement            : IElement*

           OUTPUT
            ppDisplay           : IDisplay**'''
        return super(IAnnotationClassExtension2, self).get_Display(pElement)
    Display = IndexProperty(get_Display, None)

class IAnnoClassAdmin(_esriCarto.IAnnoClassAdmin):
    _IID = uuid.UUID('8edd534e-c14c-4c6a-a9c9-ed2b83289b04')

    def __init__(self, *args, **kw):
        super(IAnnoClassAdmin, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AutoCreate(self):
        '''Method IAnnoClassAdmin.get_AutoCreate

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnoClassAdmin, self).get_AutoCreate()
    def put_AutoCreate(self, flag):
        '''Method IAnnoClassAdmin.put_AutoCreate

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IAnnoClassAdmin, self).put_AutoCreate(flag)
    def put_AnnoProperties(self, _arg1):
        '''Method IAnnoClassAdmin.put_AnnoProperties

           INPUT
            _arg1               : IAnnotateLayerPropertiesCollection*'''
        return super(IAnnoClassAdmin, self).put_AnnoProperties(_arg1)
    def put_ReferenceScale(self, _arg1):
        '''Method IAnnoClassAdmin.put_ReferenceScale

           INPUT
            _arg1               : double'''
        return super(IAnnoClassAdmin, self).put_ReferenceScale(_arg1)
    def put_ReferenceScaleUnits(self, _arg1):
        '''Method IAnnoClassAdmin.put_ReferenceScaleUnits

           INPUT
            _arg1               : esriUnits'''
        return super(IAnnoClassAdmin, self).put_ReferenceScaleUnits(_arg1)
    def putref_SymbolCollection(self, _arg1):
        '''Method IAnnoClassAdmin.putref_SymbolCollection

           INPUT
            _arg1               : ISymbolCollection*'''
        return super(IAnnoClassAdmin, self).putref_SymbolCollection(_arg1)
    def UpdateProperties(self):
        '''Method IAnnoClassAdmin.UpdateProperties'''
        return super(IAnnoClassAdmin, self).UpdateProperties()
    AnnoProperties = property(None, put_AnnoProperties, None)
    AutoCreate = property(get_AutoCreate, put_AutoCreate, None)
    ReferenceScale = property(None, put_ReferenceScale, None)
    ReferenceScaleUnits = property(None, put_ReferenceScaleUnits, None)
    SymbolCollection = property(None, putref_SymbolCollection, None)

class IAnnoClassAdmin2(_esriCarto.IAnnoClassAdmin2):
    _IID = uuid.UUID('388a9072-f834-4383-8d09-785d21d30d52')

    def __init__(self, *args, **kw):
        super(IAnnoClassAdmin2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AutoCreate(self):
        '''Method IAnnoClassAdmin2.get_AutoCreate

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnoClassAdmin2, self).get_AutoCreate()
    def put_AutoCreate(self, flag):
        '''Method IAnnoClassAdmin2.put_AutoCreate

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IAnnoClassAdmin2, self).put_AutoCreate(flag)
    def put_AnnoProperties(self, _arg1):
        '''Method IAnnoClassAdmin2.put_AnnoProperties

           INPUT
            _arg1               : IAnnotateLayerPropertiesCollection*'''
        return super(IAnnoClassAdmin2, self).put_AnnoProperties(_arg1)
    def put_ReferenceScale(self, _arg1):
        '''Method IAnnoClassAdmin2.put_ReferenceScale

           INPUT
            _arg1               : double'''
        return super(IAnnoClassAdmin2, self).put_ReferenceScale(_arg1)
    def put_ReferenceScaleUnits(self, _arg1):
        '''Method IAnnoClassAdmin2.put_ReferenceScaleUnits

           INPUT
            _arg1               : esriUnits'''
        return super(IAnnoClassAdmin2, self).put_ReferenceScaleUnits(_arg1)
    def putref_SymbolCollection(self, _arg1):
        '''Method IAnnoClassAdmin2.putref_SymbolCollection

           INPUT
            _arg1               : ISymbolCollection*'''
        return super(IAnnoClassAdmin2, self).putref_SymbolCollection(_arg1)
    def UpdateProperties(self):
        '''Method IAnnoClassAdmin2.UpdateProperties'''
        return super(IAnnoClassAdmin2, self).UpdateProperties()
    def get_UpdateOnShapeChange(self):
        '''Method IAnnoClassAdmin2.get_UpdateOnShapeChange

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IAnnoClassAdmin2, self).get_UpdateOnShapeChange()
    def put_UpdateOnShapeChange(self, flag):
        '''Method IAnnoClassAdmin2.put_UpdateOnShapeChange

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IAnnoClassAdmin2, self).put_UpdateOnShapeChange(flag)
    AnnoProperties = property(None, put_AnnoProperties, None)
    AutoCreate = property(get_AutoCreate, put_AutoCreate, None)
    ReferenceScale = property(None, put_ReferenceScale, None)
    ReferenceScaleUnits = property(None, put_ReferenceScaleUnits, None)
    SymbolCollection = property(None, putref_SymbolCollection, None)
    UpdateOnShapeChange = property(get_UpdateOnShapeChange, put_UpdateOnShapeChange, None)

class IAnnoClassAdmin3(_esriCarto.IAnnoClassAdmin3):
    _IID = uuid.UUID('79ccbb62-0b44-4be6-a0e5-904d68fef0d2')

    def __init__(self, *args, **kw):
        super(IAnnoClassAdmin3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AutoCreate(self, _arg1):
        '''Method IAnnoClassAdmin3.put_AutoCreate

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IAnnoClassAdmin3, self).put_AutoCreate(_arg1)
    def put_AnnoProperties(self, _arg1):
        '''Method IAnnoClassAdmin3.put_AnnoProperties

           INPUT
            _arg1               : IAnnotateLayerPropertiesCollection*'''
        return super(IAnnoClassAdmin3, self).put_AnnoProperties(_arg1)
    def put_ReferenceScale(self, _arg1):
        '''Method IAnnoClassAdmin3.put_ReferenceScale

           INPUT
            _arg1               : double'''
        return super(IAnnoClassAdmin3, self).put_ReferenceScale(_arg1)
    def put_ReferenceScaleUnits(self, _arg1):
        '''Method IAnnoClassAdmin3.put_ReferenceScaleUnits

           INPUT
            _arg1               : esriUnits'''
        return super(IAnnoClassAdmin3, self).put_ReferenceScaleUnits(_arg1)
    def putref_SymbolCollection(self, _arg1):
        '''Method IAnnoClassAdmin3.putref_SymbolCollection

           INPUT
            _arg1               : ISymbolCollection*'''
        return super(IAnnoClassAdmin3, self).putref_SymbolCollection(_arg1)
    def UpdateProperties(self):
        '''Method IAnnoClassAdmin3.UpdateProperties'''
        return super(IAnnoClassAdmin3, self).UpdateProperties()
    def put_UpdateOnShapeChange(self, _arg1):
        '''Method IAnnoClassAdmin3.put_UpdateOnShapeChange

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IAnnoClassAdmin3, self).put_UpdateOnShapeChange(_arg1)
    def put_RequireSymbolID(self, _arg1):
        '''Method IAnnoClassAdmin3.put_RequireSymbolID

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IAnnoClassAdmin3, self).put_RequireSymbolID(_arg1)
    def put_AllowSymbolOverrides(self, _arg1):
        '''Method IAnnoClassAdmin3.put_AllowSymbolOverrides

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IAnnoClassAdmin3, self).put_AllowSymbolOverrides(_arg1)
    def put_OverposterProperties(self, _arg1):
        '''Method IAnnoClassAdmin3.put_OverposterProperties

           INPUT
            _arg1               : IOverposterProperties*'''
        return super(IAnnoClassAdmin3, self).put_OverposterProperties(_arg1)
    def UpdateFieldIndexes(self):
        '''Method IAnnoClassAdmin3.UpdateFieldIndexes'''
        return super(IAnnoClassAdmin3, self).UpdateFieldIndexes()
    AllowSymbolOverrides = property(None, put_AllowSymbolOverrides, None)
    AnnoProperties = property(None, put_AnnoProperties, None)
    AutoCreate = property(None, put_AutoCreate, None)
    OverposterProperties = property(None, put_OverposterProperties, None)
    ReferenceScale = property(None, put_ReferenceScale, None)
    ReferenceScaleUnits = property(None, put_ReferenceScaleUnits, None)
    RequireSymbolID = property(None, put_RequireSymbolID, None)
    SymbolCollection = property(None, putref_SymbolCollection, None)
    UpdateOnShapeChange = property(None, put_UpdateOnShapeChange, None)

class IConvertFDOAnnoToCoverageAnno(_esriCarto.IConvertFDOAnnoToCoverageAnno):
    _IID = uuid.UUID('a7e2342a-ab31-4134-b9cb-7b25e4bdd9ec')

    def __init__(self, *args, **kw):
        super(IConvertFDOAnnoToCoverageAnno, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FDOGraphicsLayer(self, _arg1):
        '''Method IConvertFDOAnnoToCoverageAnno.putref_FDOGraphicsLayer

           INPUT
            _arg1               : IFDOGraphicsLayer*'''
        return super(IConvertFDOAnnoToCoverageAnno, self).putref_FDOGraphicsLayer(_arg1)
    def putref_CoverageAnnotationLayer(self, _arg1):
        '''Method IConvertFDOAnnoToCoverageAnno.putref_CoverageAnnotationLayer

           INPUT
            _arg1               : ICoverageAnnotationLayer*'''
        return super(IConvertFDOAnnoToCoverageAnno, self).putref_CoverageAnnotationLayer(_arg1)
    def put_ConvertOnlySelectedSet(self, _arg1):
        '''Method IConvertFDOAnnoToCoverageAnno.put_ConvertOnlySelectedSet

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IConvertFDOAnnoToCoverageAnno, self).put_ConvertOnlySelectedSet(_arg1)
    def putref_CancelTracker(self, _arg1):
        '''Method IConvertFDOAnnoToCoverageAnno.putref_CancelTracker

           INPUT
            _arg1               : ITrackCancel*'''
        return super(IConvertFDOAnnoToCoverageAnno, self).putref_CancelTracker(_arg1)
    def putref_Display(self, _arg1):
        '''Method IConvertFDOAnnoToCoverageAnno.putref_Display

           INPUT
            _arg1               : IDisplay*'''
        return super(IConvertFDOAnnoToCoverageAnno, self).putref_Display(_arg1)
    def ConvertAnnotation(self):
        '''Method IConvertFDOAnnoToCoverageAnno.ConvertAnnotation'''
        return super(IConvertFDOAnnoToCoverageAnno, self).ConvertAnnotation()
    def get_FeaturesConverted(self):
        '''Method IConvertFDOAnnoToCoverageAnno.get_FeaturesConverted

           OUTPUT
            numberConverted     : long*'''
        return super(IConvertFDOAnnoToCoverageAnno, self).get_FeaturesConverted()
    def get_ErrorsConverting(self):
        '''Method IConvertFDOAnnoToCoverageAnno.get_ErrorsConverting

           OUTPUT
            ErrorsConverting    : VARIANT_BOOL*'''
        return super(IConvertFDOAnnoToCoverageAnno, self).get_ErrorsConverting()
    CancelTracker = property(None, putref_CancelTracker, None)
    ConvertOnlySelectedSet = property(None, put_ConvertOnlySelectedSet, None)
    CoverageAnnotationLayer = property(None, putref_CoverageAnnotationLayer, None)
    Display = property(None, putref_Display, None)
    ErrorsConverting = property(get_ErrorsConverting, None, None)
    FDOGraphicsLayer = property(None, putref_FDOGraphicsLayer, None)
    FeaturesConverted = property(get_FeaturesConverted, None, None)

class IFDOGraphicsContainer(_esriCarto.IFDOGraphicsContainer):
    _IID = uuid.UUID('2f9b6441-ed80-498f-b13f-ea057e7f9832')
    def AddElement(self, Element, zorder):
        '''Method IFDOGraphicsContainer.AddElement

           INPUTS
            Element             : IElement*
            zorder              : long

           OUTPUT
            newAnnotationFeature: IAnnotationFeature**'''
        return super(IFDOGraphicsContainer, self).AddElement(Element, zorder)
    def MoveElementFromGroup(self, group, Element, zorder):
        '''Method IFDOGraphicsContainer.MoveElementFromGroup

           INPUTS
            group               : IGroupElement*
            Element             : IElement*
            zorder              : long

           OUTPUT
            newAnnotationFeature: IAnnotationFeature**'''
        return super(IFDOGraphicsContainer, self).MoveElementFromGroup(group, Element, zorder)

class IAnnotationSublayer(_esriCarto.IAnnotationSublayer):
    _IID = uuid.UUID('dbca59ac-6771-4408-8f48-c7d53389440c')

    def __init__(self, *args, **kw):
        super(IAnnotationSublayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AnnotationClassID(self):
        '''Method IAnnotationSublayer.get_AnnotationClassID

           OUTPUT
            classID             : long*'''
        return super(IAnnotationSublayer, self).get_AnnotationClassID()
    def put_AnnotationClassID(self, classID):
        '''Method IAnnotationSublayer.put_AnnotationClassID

           INPUT
            classID             : long'''
        return super(IAnnotationSublayer, self).put_AnnotationClassID(classID)
    def get_Parent(self):
        '''Method IAnnotationSublayer.get_Parent

           OUTPUT
            Parent              : IAnnotationLayer**'''
        return super(IAnnotationSublayer, self).get_Parent()
    AnnotationClassID = property(get_AnnotationClassID, put_AnnotationClassID, None)
    Parent = property(get_Parent, None, None)

class IBasemapSubLayer(_esriCarto.IBasemapSubLayer):
    _IID = uuid.UUID('573411b2-f451-4dd9-ae6d-36ea6c9e77d3')
    def get_Layer(self):
        '''Method IBasemapSubLayer.get_Layer

           OUTPUT
            Layer               : ILayer**'''
        return super(IBasemapSubLayer, self).get_Layer()
    def GetConversionStatus(self):
        '''Method IBasemapSubLayer.GetConversionStatus

           OUTPUT
            Status              : esriConversionStatus*'''
        return super(IBasemapSubLayer, self).GetConversionStatus()
    Layer = property(get_Layer, None, None)

class IShader(_esriCarto.IShader):
    _IID = uuid.UUID('cb0f9195-3e7c-4a2b-8c95-a8f2fac10c4c')
    def ProcessR(self, valueIn):
        '''Method IShader.ProcessR

           INPUT
            valueIn             : float

           OUTPUT
            valueOut            : float*'''
        return super(IShader, self).ProcessR(valueIn)
    def ProcessG(self, valueIn):
        '''Method IShader.ProcessG

           INPUT
            valueIn             : float

           OUTPUT
            valueOut            : float*'''
        return super(IShader, self).ProcessG(valueIn)
    def ProcessB(self, valueIn):
        '''Method IShader.ProcessB

           INPUT
            valueIn             : float

           OUTPUT
            valueOut            : float*'''
        return super(IShader, self).ProcessB(valueIn)

class IArrayOfIShader(_esriCarto.IArrayOfIShader):
    _IID = uuid.UUID('00a527cf-28da-4043-9cf7-e9911172f05f')
    def get_Count(self):
        '''Method IArrayOfIShader.get_Count

           OUTPUT
            Count               : long*'''
        return super(IArrayOfIShader, self).get_Count()
    def get_Element(self, Index):
        '''Method IArrayOfIShader.get_Element

           INPUT
            Index               : long

           OUTPUT
            IShaderParam        : IShader**'''
        return super(IArrayOfIShader, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IArrayOfIShader.Remove

           INPUT
            Index               : long'''
        return super(IArrayOfIShader, self).Remove(Index)
    def RemoveAll(self):
        '''Method IArrayOfIShader.RemoveAll'''
        return super(IArrayOfIShader, self).RemoveAll()
    def Add(self, IShaderParam):
        '''Method IArrayOfIShader.Add

           INPUT
            IShaderParam        : IShader*'''
        return super(IArrayOfIShader, self).Add(IShaderParam)
    def Insert(self, Index, IShaderParam):
        '''Method IArrayOfIShader.Insert

           INPUTS
            Index               : long
            IShaderParam        : IShader*'''
        return super(IArrayOfIShader, self).Insert(Index, IShaderParam)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IReadingDirection(_esriCarto.IReadingDirection):
    _IID = uuid.UUID('b5b5e78f-ab9a-445c-8af6-daf9c3726d0c')

    def __init__(self, *args, **kw):
        super(IReadingDirection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RightToLeft(self):
        '''Method IReadingDirection.get_RightToLeft

           OUTPUT
            RightToLeft         : VARIANT_BOOL*'''
        return super(IReadingDirection, self).get_RightToLeft()
    def put_RightToLeft(self, RightToLeft):
        '''Method IReadingDirection.put_RightToLeft

           INPUT
            RightToLeft         : VARIANT_BOOL'''
        return super(IReadingDirection, self).put_RightToLeft(RightToLeft)
    RightToLeft = property(get_RightToLeft, put_RightToLeft, None)

class ICompositeMapSurround(_esriCarto.ICompositeMapSurround):
    _IID = uuid.UUID('2ecb6bb5-d5a4-11d3-9305-00600802e603')
    def Elements(self, Display, Bounds):
        '''Method ICompositeMapSurround.Elements

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            GraphicElements     : IEnumElement**'''
        return super(ICompositeMapSurround, self).Elements(Display, Bounds)

class IMapEvents(_esriCarto.IMapEvents):
    _IID = uuid.UUID('d1b15b2c-0723-11d3-9f33-00c04f6bc979')
    def VersionChanged(self, oldVersion, newVersion):
        '''Method IMapEvents.VersionChanged

           INPUTS
            oldVersion          : IVersion*
            newVersion          : IVersion*'''
        return super(IMapEvents, self).VersionChanged(oldVersion, newVersion)
    def FeatureClassChanged(self, oldClass, newClass):
        '''Method IMapEvents.FeatureClassChanged

           INPUTS
            oldClass            : IFeatureClass*
            newClass            : IFeatureClass*'''
        return super(IMapEvents, self).FeatureClassChanged(oldClass, newClass)

class IMapEvents2(_esriCarto.IMapEvents2):
    _IID = uuid.UUID('638a967b-1727-4bc3-bd0d-22413f411382')
    def TableChanged(self, oldTable, newTable):
        '''Method IMapEvents2.TableChanged

           INPUTS
            oldTable            : ITable*
            newTable            : ITable*'''
        return super(IMapEvents2, self).TableChanged(oldTable, newTable)
    def ActiveGraphicsLayerChanged(self, oldGraphicsLayer, newGraphicsLayer):
        '''Method IMapEvents2.ActiveGraphicsLayerChanged

           INPUTS
            oldGraphicsLayer    : IGraphicsLayer*
            newGraphicsLayer    : IGraphicsLayer*'''
        return super(IMapEvents2, self).ActiveGraphicsLayerChanged(oldGraphicsLayer, newGraphicsLayer)

class IMapSurroundEvents(_esriCarto.IMapSurroundEvents):
    _IID = uuid.UUID('0dca8f87-afa7-11d2-87fb-0000f8751720')
    def ContentsChanged(self):
        '''Method IMapSurroundEvents.ContentsChanged'''
        return super(IMapSurroundEvents, self).ContentsChanged()
    def BeforeDraw(self, Display):
        '''Method IMapSurroundEvents.BeforeDraw

           INPUT
            Display             : IDisplay*'''
        return super(IMapSurroundEvents, self).BeforeDraw(Display)
    def AfterDraw(self, Display):
        '''Method IMapSurroundEvents.AfterDraw

           INPUT
            Display             : IDisplay*'''
        return super(IMapSurroundEvents, self).AfterDraw(Display)

class IContextAnalyzer(_esriCarto.IContextAnalyzer):
    _IID = uuid.UUID('0c452012-84cb-11d2-ae68-080009ec732a')

    def __init__(self, *args, **kw):
        super(IContextAnalyzer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Priority(self):
        '''Method IContextAnalyzer.get_Priority

           OUTPUT
            Priority            : long*'''
        return super(IContextAnalyzer, self).get_Priority()
    def put_Priority(self, Priority):
        '''Method IContextAnalyzer.put_Priority

           INPUT
            Priority            : long'''
        return super(IContextAnalyzer, self).put_Priority(Priority)
    def GetContextMenu(self, contextObject):
        '''Method IContextAnalyzer.GetContextMenu

           INPUT
            contextObject       : IUnknown*

           OUTPUT
            clsidMenu           : IUID**'''
        return super(IContextAnalyzer, self).GetContextMenu(contextObject)
    Priority = property(get_Priority, put_Priority, None)

class IViewManager(_esriCarto.IViewManager):
    _IID = uuid.UUID('dd94d76c-836d-11d0-87ec-080009ec732a')

    def __init__(self, *args, **kw):
        super(IViewManager, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_ElementSelection(self, selectionObject):
        '''Method IViewManager.putref_ElementSelection

           INPUT
            selectionObject     : ISelection*'''
        return super(IViewManager, self).putref_ElementSelection(selectionObject)
    def get_ElementSelection(self):
        '''Method IViewManager.get_ElementSelection

           OUTPUT
            selectionObject     : ISelection**'''
        return super(IViewManager, self).get_ElementSelection()
    def put_ConserveMemory(self, flag):
        '''Method IViewManager.put_ConserveMemory

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IViewManager, self).put_ConserveMemory(flag)
    def get_ConserveMemory(self):
        '''Method IViewManager.get_ConserveMemory

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IViewManager, self).get_ConserveMemory()
    def put_TopFilterPhase(self, phase):
        '''Method IViewManager.put_TopFilterPhase

           INPUT
            phase               : esriViewDrawPhase'''
        return super(IViewManager, self).put_TopFilterPhase(phase)
    def get_TopFilterPhase(self):
        '''Method IViewManager.get_TopFilterPhase

           OUTPUT
            phase               : esriViewDrawPhase*'''
        return super(IViewManager, self).get_TopFilterPhase()
    def put_TopFilterIndex(self, phaseIndex):
        '''Method IViewManager.put_TopFilterIndex

           INPUT
            phaseIndex          : long'''
        return super(IViewManager, self).put_TopFilterIndex(phaseIndex)
    def get_TopFilterIndex(self):
        '''Method IViewManager.get_TopFilterIndex

           OUTPUT
            phaseIndex          : long*'''
        return super(IViewManager, self).get_TopFilterIndex()
    def put_OutputBandSize(self, kilobytes):
        '''Method IViewManager.put_OutputBandSize

           INPUT
            kilobytes           : long'''
        return super(IViewManager, self).put_OutputBandSize(kilobytes)
    def get_OutputBandSize(self):
        '''Method IViewManager.get_OutputBandSize

           OUTPUT
            kilobytes           : long*'''
        return super(IViewManager, self).get_OutputBandSize()
    def get_UsesPageCoordinates(self):
        '''Method IViewManager.get_UsesPageCoordinates

           OUTPUT
            UsesPageCoordinates : VARIANT_BOOL*'''
        return super(IViewManager, self).get_UsesPageCoordinates()
    def get_VerboseEvents(self):
        '''Method IViewManager.get_VerboseEvents

           OUTPUT
            VerboseEvents       : VARIANT_BOOL*'''
        return super(IViewManager, self).get_VerboseEvents()
    def put_VerboseEvents(self, VerboseEvents):
        '''Method IViewManager.put_VerboseEvents

           INPUT
            VerboseEvents       : VARIANT_BOOL'''
        return super(IViewManager, self).put_VerboseEvents(VerboseEvents)
    def get_DelayBackgroundDraw(self):
        '''Method IViewManager.get_DelayBackgroundDraw

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IViewManager, self).get_DelayBackgroundDraw()
    def put_DelayBackgroundDraw(self, flag):
        '''Method IViewManager.put_DelayBackgroundDraw

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IViewManager, self).put_DelayBackgroundDraw(flag)
    def get_ExternalDrawing(self, phase):
        '''Method IViewManager.get_ExternalDrawing

           INPUT
            phase               : esriViewDrawPhase

           OUTPUT
            ExternalDrawing     : VARIANT_BOOL*'''
        return super(IViewManager, self).get_ExternalDrawing(phase)
    def put_ExternalDrawing(self, phase, ExternalDrawing):
        '''Method IViewManager.put_ExternalDrawing

           INPUTS
            phase               : esriViewDrawPhase
            ExternalDrawing     : VARIANT_BOOL'''
        return super(IViewManager, self).put_ExternalDrawing(phase, ExternalDrawing)
    ConserveMemory = property(get_ConserveMemory, put_ConserveMemory, None)
    DelayBackgroundDraw = property(get_DelayBackgroundDraw, put_DelayBackgroundDraw, None)
    ElementSelection = property(get_ElementSelection, putref_ElementSelection, None)
    ExternalDrawing = property(None, put_ExternalDrawing, None)
    OutputBandSize = property(get_OutputBandSize, put_OutputBandSize, None)
    TopFilterIndex = property(get_TopFilterIndex, put_TopFilterIndex, None)
    TopFilterPhase = property(get_TopFilterPhase, put_TopFilterPhase, None)
    UsesPageCoordinates = property(get_UsesPageCoordinates, None, None)
    VerboseEvents = property(get_VerboseEvents, put_VerboseEvents, None)
    ExternalDrawing = IndexProperty(get_ExternalDrawing, None)

class IBasicMap2(_esriCarto.IBasicMap2):
    _IID = uuid.UUID('47fa77fa-2f59-42b9-9048-7b139da3fe26')

    def __init__(self, *args, **kw):
        super(IBasicMap2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CopyrightText(self):
        '''Method IBasicMap2.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IBasicMap2, self).get_CopyrightText()
    def put_CopyrightText(self, copyright):
        '''Method IBasicMap2.put_CopyrightText

           INPUT
            copyright           : BSTR'''
        return super(IBasicMap2, self).put_CopyrightText(copyright)
    def get_Name(self):
        '''Method IBasicMap2.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IBasicMap2, self).get_Name()
    def put_Name(self, pName):
        '''Method IBasicMap2.put_Name

           INPUT
            pName               : BSTR'''
        return super(IBasicMap2, self).put_Name(pName)
    def get_Description(self):
        '''Method IBasicMap2.get_Description

           OUTPUT
            pDescr              : BSTR*'''
        return super(IBasicMap2, self).get_Description()
    def put_Description(self, pDescr):
        '''Method IBasicMap2.put_Description

           INPUT
            pDescr              : BSTR'''
        return super(IBasicMap2, self).put_Description(pDescr)
    def put_AreaOfInterest(self, _arg1):
        '''Method IBasicMap2.put_AreaOfInterest

           INPUT
            _arg1               : IEnvelope*'''
        return super(IBasicMap2, self).put_AreaOfInterest(_arg1)
    def get_LayerCount(self):
        '''Method IBasicMap2.get_LayerCount

           OUTPUT
            pCount              : long*'''
        return super(IBasicMap2, self).get_LayerCount()
    def get_Layer(self, Index):
        '''Method IBasicMap2.get_Layer

           INPUT
            Index               : long

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IBasicMap2, self).get_Layer(Index)
    def get_Layers(self, uid, recursive):
        '''Method IBasicMap2.get_Layers

           INPUTS
            uid                 : IUID*
            recursive           : VARIANT_BOOL

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IBasicMap2, self).get_Layers(uid, recursive)
    def get_SpatialReference(self):
        '''Method IBasicMap2.get_SpatialReference

           OUTPUT
            ppSpatialRef        : ISpatialReference**'''
        return super(IBasicMap2, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialRef):
        '''Method IBasicMap2.putref_SpatialReference

           INPUT
            ppSpatialRef        : ISpatialReference*'''
        return super(IBasicMap2, self).putref_SpatialReference(ppSpatialRef)
    def AddLayer(self, pLayer):
        '''Method IBasicMap2.AddLayer

           INPUT
            pLayer              : ILayer*'''
        return super(IBasicMap2, self).AddLayer(pLayer)
    def AddLayers(self, pLayers, autoArrange):
        '''Method IBasicMap2.AddLayers

           INPUTS
            pLayers             : IEnumLayer*
            autoArrange         : VARIANT_BOOL'''
        return super(IBasicMap2, self).AddLayers(pLayers, autoArrange)
    def DeleteLayer(self, pLayer):
        '''Method IBasicMap2.DeleteLayer

           INPUT
            pLayer              : ILayer*'''
        return super(IBasicMap2, self).DeleteLayer(pLayer)
    def ClearLayers(self):
        '''Method IBasicMap2.ClearLayers'''
        return super(IBasicMap2, self).ClearLayers()
    def get_BasicGraphicsLayer(self):
        '''Method IBasicMap2.get_BasicGraphicsLayer

           OUTPUT
            ppGraphicsLayer     : IGraphicsLayer**'''
        return super(IBasicMap2, self).get_BasicGraphicsLayer()
    def get_ActiveGraphicsLayer(self):
        '''Method IBasicMap2.get_ActiveGraphicsLayer

           OUTPUT
            ppGraphicsLayer     : ILayer**'''
        return super(IBasicMap2, self).get_ActiveGraphicsLayer()
    def putref_ActiveGraphicsLayer(self, ppGraphicsLayer):
        '''Method IBasicMap2.putref_ActiveGraphicsLayer

           INPUT
            ppGraphicsLayer     : ILayer*'''
        return super(IBasicMap2, self).putref_ActiveGraphicsLayer(ppGraphicsLayer)
    def get_SelectionCount(self):
        '''Method IBasicMap2.get_SelectionCount

           OUTPUT
            pCount              : long*'''
        return super(IBasicMap2, self).get_SelectionCount()
    def ClearSelection(self):
        '''Method IBasicMap2.ClearSelection'''
        return super(IBasicMap2, self).ClearSelection()
    def get_FeatureSelection(self):
        '''Method IBasicMap2.get_FeatureSelection

           OUTPUT
            ppSelection         : ISelection**'''
        return super(IBasicMap2, self).get_FeatureSelection()
    def putref_FeatureSelection(self, ppSelection):
        '''Method IBasicMap2.putref_FeatureSelection

           INPUT
            ppSelection         : ISelection*'''
        return super(IBasicMap2, self).putref_FeatureSelection(ppSelection)
    def SelectByShape(self, Shape, env, justOne):
        '''Method IBasicMap2.SelectByShape

           INPUTS
            Shape               : IGeometry*
            env                 : ISelectionEnvironment*
            justOne             : VARIANT_BOOL'''
        return super(IBasicMap2, self).SelectByShape(Shape, env, justOne)
    ActiveGraphicsLayer = property(get_ActiveGraphicsLayer, putref_ActiveGraphicsLayer, None)
    AreaOfInterest = property(None, put_AreaOfInterest, None)
    BasicGraphicsLayer = property(get_BasicGraphicsLayer, None, None)
    CopyrightText = property(get_CopyrightText, put_CopyrightText, None)
    Description = property(get_Description, put_Description, None)
    FeatureSelection = property(get_FeatureSelection, putref_FeatureSelection, None)
    LayerCount = property(get_LayerCount, None, None)
    Name = property(get_Name, put_Name, None)
    SelectionCount = property(get_SelectionCount, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Layer = IndexProperty(get_Layer, None)

class IBasicMap(_esriCarto.IBasicMap):
    _IID = uuid.UUID('b9d60c9e-121e-11d4-ab6c-0008c73fd50c')

    def __init__(self, *args, **kw):
        super(IBasicMap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IBasicMap.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IBasicMap, self).get_Name()
    def put_Name(self, pName):
        '''Method IBasicMap.put_Name

           INPUT
            pName               : BSTR'''
        return super(IBasicMap, self).put_Name(pName)
    def get_Description(self):
        '''Method IBasicMap.get_Description

           OUTPUT
            pDescr              : BSTR*'''
        return super(IBasicMap, self).get_Description()
    def put_Description(self, pDescr):
        '''Method IBasicMap.put_Description

           INPUT
            pDescr              : BSTR'''
        return super(IBasicMap, self).put_Description(pDescr)
    def put_AreaOfInterest(self, _arg1):
        '''Method IBasicMap.put_AreaOfInterest

           INPUT
            _arg1               : IEnvelope*'''
        return super(IBasicMap, self).put_AreaOfInterest(_arg1)
    def get_LayerCount(self):
        '''Method IBasicMap.get_LayerCount

           OUTPUT
            pCount              : long*'''
        return super(IBasicMap, self).get_LayerCount()
    def get_Layer(self, Index):
        '''Method IBasicMap.get_Layer

           INPUT
            Index               : long

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IBasicMap, self).get_Layer(Index)
    def get_Layers(self, uid, recursive):
        '''Method IBasicMap.get_Layers

           INPUTS
            uid                 : IUID*
            recursive           : VARIANT_BOOL

           OUTPUT
            ppLayers            : IEnumLayer**'''
        return super(IBasicMap, self).get_Layers(uid, recursive)
    def get_SpatialReference(self):
        '''Method IBasicMap.get_SpatialReference

           OUTPUT
            ppSpatialRef        : ISpatialReference**'''
        return super(IBasicMap, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialRef):
        '''Method IBasicMap.putref_SpatialReference

           INPUT
            ppSpatialRef        : ISpatialReference*'''
        return super(IBasicMap, self).putref_SpatialReference(ppSpatialRef)
    def AddLayer(self, pLayer):
        '''Method IBasicMap.AddLayer

           INPUT
            pLayer              : ILayer*'''
        return super(IBasicMap, self).AddLayer(pLayer)
    def AddLayers(self, pLayers, autoArrange):
        '''Method IBasicMap.AddLayers

           INPUTS
            pLayers             : IEnumLayer*
            autoArrange         : VARIANT_BOOL'''
        return super(IBasicMap, self).AddLayers(pLayers, autoArrange)
    def DeleteLayer(self, pLayer):
        '''Method IBasicMap.DeleteLayer

           INPUT
            pLayer              : ILayer*'''
        return super(IBasicMap, self).DeleteLayer(pLayer)
    def ClearLayers(self):
        '''Method IBasicMap.ClearLayers'''
        return super(IBasicMap, self).ClearLayers()
    def get_BasicGraphicsLayer(self):
        '''Method IBasicMap.get_BasicGraphicsLayer

           OUTPUT
            ppGraphicsLayer     : IGraphicsLayer**'''
        return super(IBasicMap, self).get_BasicGraphicsLayer()
    def get_ActiveGraphicsLayer(self):
        '''Method IBasicMap.get_ActiveGraphicsLayer

           OUTPUT
            ppGraphicsLayer     : ILayer**'''
        return super(IBasicMap, self).get_ActiveGraphicsLayer()
    def putref_ActiveGraphicsLayer(self, ppGraphicsLayer):
        '''Method IBasicMap.putref_ActiveGraphicsLayer

           INPUT
            ppGraphicsLayer     : ILayer*'''
        return super(IBasicMap, self).putref_ActiveGraphicsLayer(ppGraphicsLayer)
    def get_SelectionCount(self):
        '''Method IBasicMap.get_SelectionCount

           OUTPUT
            pCount              : long*'''
        return super(IBasicMap, self).get_SelectionCount()
    def ClearSelection(self):
        '''Method IBasicMap.ClearSelection'''
        return super(IBasicMap, self).ClearSelection()
    def get_FeatureSelection(self):
        '''Method IBasicMap.get_FeatureSelection

           OUTPUT
            ppSelection         : ISelection**'''
        return super(IBasicMap, self).get_FeatureSelection()
    def putref_FeatureSelection(self, ppSelection):
        '''Method IBasicMap.putref_FeatureSelection

           INPUT
            ppSelection         : ISelection*'''
        return super(IBasicMap, self).putref_FeatureSelection(ppSelection)
    def SelectByShape(self, Shape, env, justOne):
        '''Method IBasicMap.SelectByShape

           INPUTS
            Shape               : IGeometry*
            env                 : ISelectionEnvironment*
            justOne             : VARIANT_BOOL'''
        return super(IBasicMap, self).SelectByShape(Shape, env, justOne)
    ActiveGraphicsLayer = property(get_ActiveGraphicsLayer, putref_ActiveGraphicsLayer, None)
    AreaOfInterest = property(None, put_AreaOfInterest, None)
    BasicGraphicsLayer = property(get_BasicGraphicsLayer, None, None)
    Description = property(get_Description, put_Description, None)
    FeatureSelection = property(get_FeatureSelection, putref_FeatureSelection, None)
    LayerCount = property(get_LayerCount, None, None)
    Name = property(get_Name, put_Name, None)
    SelectionCount = property(get_SelectionCount, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Layer = IndexProperty(get_Layer, None)

class IMapClipOptions(_esriCarto.IMapClipOptions):
    _IID = uuid.UUID('49522374-ec8e-4c1a-ba3b-2a4cc963652c')

    def __init__(self, *args, **kw):
        super(IMapClipOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClipType(self):
        '''Method IMapClipOptions.get_ClipType

           OUTPUT
            Type                : esriMapClipType*'''
        return super(IMapClipOptions, self).get_ClipType()
    def put_ClipType(self, Type):
        '''Method IMapClipOptions.put_ClipType

           INPUT
            Type                : esriMapClipType'''
        return super(IMapClipOptions, self).put_ClipType(Type)
    def get_ClipData(self):
        '''Method IMapClipOptions.get_ClipData

           OUTPUT
            Data                : IUnknown**'''
        return super(IMapClipOptions, self).get_ClipData()
    def put_ClipData(self, Data):
        '''Method IMapClipOptions.put_ClipData

           INPUT
            Data                : IUnknown*'''
        return super(IMapClipOptions, self).put_ClipData(Data)
    def get_ClipGeometry(self):
        '''Method IMapClipOptions.get_ClipGeometry

           OUTPUT
            ClipGeometry        : IGeometry**'''
        return super(IMapClipOptions, self).get_ClipGeometry()
    def put_ClipGeometry(self, ClipGeometry):
        '''Method IMapClipOptions.put_ClipGeometry

           INPUT
            ClipGeometry        : IGeometry*'''
        return super(IMapClipOptions, self).put_ClipGeometry(ClipGeometry)
    def get_ClipBorder(self):
        '''Method IMapClipOptions.get_ClipBorder

           OUTPUT
            Border              : IBorder**'''
        return super(IMapClipOptions, self).get_ClipBorder()
    def put_ClipBorder(self, Border):
        '''Method IMapClipOptions.put_ClipBorder

           INPUT
            Border              : IBorder*'''
        return super(IMapClipOptions, self).put_ClipBorder(Border)
    def get_ClipFilter(self):
        '''Method IMapClipOptions.get_ClipFilter

           OUTPUT
            Layers              : ISet**'''
        return super(IMapClipOptions, self).get_ClipFilter()
    def put_ClipFilter(self, Layers):
        '''Method IMapClipOptions.put_ClipFilter

           INPUT
            Layers              : ISet*'''
        return super(IMapClipOptions, self).put_ClipFilter(Layers)
    def put_ClipGridAndGraticules(self, pClipGridAndGraticules):
        '''Method IMapClipOptions.put_ClipGridAndGraticules

           INPUT
            pClipGridAndGraticules: VARIANT_BOOL'''
        return super(IMapClipOptions, self).put_ClipGridAndGraticules(pClipGridAndGraticules)
    def get_ClipGridAndGraticules(self):
        '''Method IMapClipOptions.get_ClipGridAndGraticules

           OUTPUT
            pClipGridAndGraticules: VARIANT_BOOL*'''
        return super(IMapClipOptions, self).get_ClipGridAndGraticules()
    ClipBorder = property(get_ClipBorder, put_ClipBorder, None)
    ClipData = property(get_ClipData, put_ClipData, None)
    ClipFilter = property(get_ClipFilter, put_ClipFilter, None)
    ClipGeometry = property(get_ClipGeometry, put_ClipGeometry, None)
    ClipGridAndGraticules = property(get_ClipGridAndGraticules, put_ClipGridAndGraticules, None)
    ClipType = property(get_ClipType, put_ClipType, None)

class IMapLayers(_esriCarto.IMapLayers):
    _IID = uuid.UUID('76da57e7-6a92-4090-8ca9-f5d9eca78353')
    def get_LayerCount(self):
        '''Method IMapLayers.get_LayerCount

           OUTPUT
            Count               : long*'''
        return super(IMapLayers, self).get_LayerCount()
    def get_Layer(self, Index):
        '''Method IMapLayers.get_Layer

           INPUT
            Index               : long

           OUTPUT
            Layer               : ILayer**'''
        return super(IMapLayers, self).get_Layer(Index)
    def get_Layers(self, uid, recursive):
        '''Method IMapLayers.get_Layers

           INPUTS
            uid                 : IUID*
            recursive           : VARIANT_BOOL

           OUTPUT
            Layers              : IEnumLayer**'''
        return super(IMapLayers, self).get_Layers(uid, recursive)
    def AddLayer(self, Layer):
        '''Method IMapLayers.AddLayer

           INPUT
            Layer               : ILayer*'''
        return super(IMapLayers, self).AddLayer(Layer)
    def AddLayers(self, Layers, autoArrange):
        '''Method IMapLayers.AddLayers

           INPUTS
            Layers              : IEnumLayer*
            autoArrange         : VARIANT_BOOL'''
        return super(IMapLayers, self).AddLayers(Layers, autoArrange)
    def DeleteLayer(self, Layer):
        '''Method IMapLayers.DeleteLayer

           INPUT
            Layer               : ILayer*'''
        return super(IMapLayers, self).DeleteLayer(Layer)
    def MoveLayer(self, Layer, toIndex):
        '''Method IMapLayers.MoveLayer

           INPUTS
            Layer               : ILayer*
            toIndex             : long'''
        return super(IMapLayers, self).MoveLayer(Layer, toIndex)
    def ClearLayers(self):
        '''Method IMapLayers.ClearLayers'''
        return super(IMapLayers, self).ClearLayers()
    def IsLayerVisible(self, Layer):
        '''Method IMapLayers.IsLayerVisible

           INPUT
            Layer               : ILayer*

           OUTPUT
            IsLayerVisible      : VARIANT_BOOL*'''
        return super(IMapLayers, self).IsLayerVisible(Layer)
    def InsertLayer(self, pLayer, autoArrange, position):
        '''Method IMapLayers.InsertLayer

           INPUTS
            pLayer              : ILayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers, self).InsertLayer(pLayer, autoArrange, position)
    def InsertLayers(self, pLayers, autoArrange, position):
        '''Method IMapLayers.InsertLayers

           INPUTS
            pLayers             : IEnumLayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers, self).InsertLayers(pLayers, autoArrange, position)
    def InsertLayerInGroup(self, pGroup, pLayer, autoArrange, position):
        '''Method IMapLayers.InsertLayerInGroup

           INPUTS
            pGroup              : IGroupLayer*
            pLayer              : ILayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers, self).InsertLayerInGroup(pGroup, pLayer, autoArrange, position)
    def InsertLayersInGroup(self, pGroup, pLayer, autoArrange, position):
        '''Method IMapLayers.InsertLayersInGroup

           INPUTS
            pGroup              : IGroupLayer*
            pLayer              : IEnumLayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers, self).InsertLayersInGroup(pGroup, pLayer, autoArrange, position)
    def MoveLayerEx(self, pFromGroup, pToGroup, pLayer, newPosition):
        '''Method IMapLayers.MoveLayerEx

           INPUTS
            pFromGroup          : IGroupLayer*
            pToGroup            : IGroupLayer*
            pLayer              : ILayer*
            newPosition         : long'''
        return super(IMapLayers, self).MoveLayerEx(pFromGroup, pToGroup, pLayer, newPosition)
    LayerCount = property(get_LayerCount, None, None)
    Layer = IndexProperty(get_Layer, None)

class IMapLayers2(_esriCarto.IMapLayers2):
    _IID = uuid.UUID('6ccd973c-5309-4166-9f50-07a371179f0e')
    def IsLayerVisibleEx(self, Layer):
        '''Method IMapLayers2.IsLayerVisibleEx

           INPUT
            Layer               : ILayer*

           OUTPUTS
            IsLayerVisible      : VARIANT_BOOL*
            isParentLayerVisible: VARIANT_BOOL*'''
        return super(IMapLayers2, self).IsLayerVisibleEx(Layer)
    def get_LayerCount(self):
        '''Method IMapLayers.get_LayerCount (from IMapLayers)

           OUTPUT
            Count               : long*'''
        return super(IMapLayers2, self).get_LayerCount()
    def get_Layer(self, Index):
        '''Method IMapLayers.get_Layer (from IMapLayers)

           INPUT
            Index               : long

           OUTPUT
            Layer               : ILayer**'''
        return super(IMapLayers2, self).get_Layer(Index)
    def get_Layers(self, uid, recursive):
        '''Method IMapLayers.get_Layers (from IMapLayers)

           INPUTS
            uid                 : IUID*
            recursive           : VARIANT_BOOL

           OUTPUT
            Layers              : IEnumLayer**'''
        return super(IMapLayers2, self).get_Layers(uid, recursive)
    def AddLayer(self, Layer):
        '''Method IMapLayers.AddLayer (from IMapLayers)

           INPUT
            Layer               : ILayer*'''
        return super(IMapLayers2, self).AddLayer(Layer)
    def AddLayers(self, Layers, autoArrange):
        '''Method IMapLayers.AddLayers (from IMapLayers)

           INPUTS
            Layers              : IEnumLayer*
            autoArrange         : VARIANT_BOOL'''
        return super(IMapLayers2, self).AddLayers(Layers, autoArrange)
    def DeleteLayer(self, Layer):
        '''Method IMapLayers.DeleteLayer (from IMapLayers)

           INPUT
            Layer               : ILayer*'''
        return super(IMapLayers2, self).DeleteLayer(Layer)
    def MoveLayer(self, Layer, toIndex):
        '''Method IMapLayers.MoveLayer (from IMapLayers)

           INPUTS
            Layer               : ILayer*
            toIndex             : long'''
        return super(IMapLayers2, self).MoveLayer(Layer, toIndex)
    def ClearLayers(self):
        '''Method IMapLayers.ClearLayers (from IMapLayers)'''
        return super(IMapLayers2, self).ClearLayers()
    def IsLayerVisible(self, Layer):
        '''Method IMapLayers.IsLayerVisible (from IMapLayers)

           INPUT
            Layer               : ILayer*

           OUTPUT
            IsLayerVisible      : VARIANT_BOOL*'''
        return super(IMapLayers2, self).IsLayerVisible(Layer)
    def InsertLayer(self, pLayer, autoArrange, position):
        '''Method IMapLayers.InsertLayer (from IMapLayers)

           INPUTS
            pLayer              : ILayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers2, self).InsertLayer(pLayer, autoArrange, position)
    def InsertLayers(self, pLayers, autoArrange, position):
        '''Method IMapLayers.InsertLayers (from IMapLayers)

           INPUTS
            pLayers             : IEnumLayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers2, self).InsertLayers(pLayers, autoArrange, position)
    def InsertLayerInGroup(self, pGroup, pLayer, autoArrange, position):
        '''Method IMapLayers.InsertLayerInGroup (from IMapLayers)

           INPUTS
            pGroup              : IGroupLayer*
            pLayer              : ILayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers2, self).InsertLayerInGroup(pGroup, pLayer, autoArrange, position)
    def InsertLayersInGroup(self, pGroup, pLayer, autoArrange, position):
        '''Method IMapLayers.InsertLayersInGroup (from IMapLayers)

           INPUTS
            pGroup              : IGroupLayer*
            pLayer              : IEnumLayer*
            autoArrange         : VARIANT_BOOL
            position            : long'''
        return super(IMapLayers2, self).InsertLayersInGroup(pGroup, pLayer, autoArrange, position)
    def MoveLayerEx(self, pFromGroup, pToGroup, pLayer, newPosition):
        '''Method IMapLayers.MoveLayerEx (from IMapLayers)

           INPUTS
            pFromGroup          : IGroupLayer*
            pToGroup            : IGroupLayer*
            pLayer              : ILayer*
            newPosition         : long'''
        return super(IMapLayers2, self).MoveLayerEx(pFromGroup, pToGroup, pLayer, newPosition)
    LayerCount = property(get_LayerCount, None, None)
    Layer = IndexProperty(get_Layer, None)

class IMapBarriers(_esriCarto.IMapBarriers):
    _IID = uuid.UUID('2c616e2f-b074-4119-868a-caa5115f5961')
    def get_Barriers2(self, pExtent, pTrackCancel):
        '''Method IMapBarriers.get_Barriers2

           INPUTS
            pExtent             : IEnvelope*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            Barriers            : IBarrierCollection**'''
        return super(IMapBarriers, self).get_Barriers2(pExtent, pTrackCancel)

class IMapBarriers2(_esriCarto.IMapBarriers2):
    _IID = uuid.UUID('77af76b1-b80a-ded2-331b-cb3f50e50f2a')
    def get_Barriers3(self, pExtent, Scale, pTrackCancel):
        '''Method IMapBarriers2.get_Barriers3

           INPUTS
            pExtent             : IEnvelope*
            Scale               : double
            pTrackCancel        : ITrackCancel*

           OUTPUT
            Barriers            : IBarrierCollection**'''
        return super(IMapBarriers2, self).get_Barriers3(pExtent, Scale, pTrackCancel)

class IMapAdmin(_esriCarto.IMapAdmin):
    _IID = uuid.UUID('e34551db-eee2-11d2-b86f-00600802e603')

    def __init__(self, *args, **kw):
        super(IMapAdmin, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_NonFrameBackground(self, _arg1):
        '''Method IMapAdmin.putref_NonFrameBackground

           INPUT
            _arg1               : IBackground*'''
        return super(IMapAdmin, self).putref_NonFrameBackground(_arg1)
    def put_ClipBounds(self, _arg1):
        '''Method IMapAdmin.put_ClipBounds

           INPUT
            _arg1               : IGeometry*'''
        return super(IMapAdmin, self).put_ClipBounds(_arg1)
    def FireAfterDraw(self, hDC):
        '''Method IMapAdmin.FireAfterDraw

           INPUT
            hDC                 : OLE_HANDLE'''
        return super(IMapAdmin, self).FireAfterDraw(hDC)
    def FireChangeVersion(self, oldVersion, newVersion):
        '''Method IMapAdmin.FireChangeVersion

           INPUTS
            oldVersion          : IVersion*
            newVersion          : IVersion*'''
        return super(IMapAdmin, self).FireChangeVersion(oldVersion, newVersion)
    def FireChangeFeatureClass(self, oldClass, newClass):
        '''Method IMapAdmin.FireChangeFeatureClass

           INPUTS
            oldClass            : IFeatureClass*
            newClass            : IFeatureClass*'''
        return super(IMapAdmin, self).FireChangeFeatureClass(oldClass, newClass)
    ClipBounds = property(None, put_ClipBounds, None)
    NonFrameBackground = property(None, putref_NonFrameBackground, None)

class IMapAdmin2(_esriCarto.IMapAdmin2):
    _IID = uuid.UUID('016c393a-7751-40e1-b6e9-f6b454a4493a')

    def __init__(self, *args, **kw):
        super(IMapAdmin2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_NonFrameBackground(self, Background):
        '''Method IMapAdmin2.putref_NonFrameBackground

           INPUT
            Background          : IBackground*'''
        return super(IMapAdmin2, self).putref_NonFrameBackground(Background)
    def get_NonFrameBackground(self):
        '''Method IMapAdmin2.get_NonFrameBackground

           OUTPUT
            Background          : IBackground**'''
        return super(IMapAdmin2, self).get_NonFrameBackground()
    def put_ClipBounds(self, _arg1):
        '''Method IMapAdmin2.put_ClipBounds

           INPUT
            _arg1               : IGeometry*'''
        return super(IMapAdmin2, self).put_ClipBounds(_arg1)
    def FireAfterDraw(self, hDC):
        '''Method IMapAdmin2.FireAfterDraw

           INPUT
            hDC                 : OLE_HANDLE'''
        return super(IMapAdmin2, self).FireAfterDraw(hDC)
    def FireChangeVersion(self, oldVersion, newVersion):
        '''Method IMapAdmin2.FireChangeVersion

           INPUTS
            oldVersion          : IVersion*
            newVersion          : IVersion*'''
        return super(IMapAdmin2, self).FireChangeVersion(oldVersion, newVersion)
    def FireChangeFeatureClass(self, oldClass, newClass):
        '''Method IMapAdmin2.FireChangeFeatureClass

           INPUTS
            oldClass            : IFeatureClass*
            newClass            : IFeatureClass*'''
        return super(IMapAdmin2, self).FireChangeFeatureClass(oldClass, newClass)
    def FireChangeTable(self, oldTable, newTable):
        '''Method IMapAdmin2.FireChangeTable

           INPUTS
            oldTable            : ITable*
            newTable            : ITable*'''
        return super(IMapAdmin2, self).FireChangeTable(oldTable, newTable)
    def CompleteRedrawNeeded(self):
        '''Method IMapAdmin2.CompleteRedrawNeeded

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapAdmin2, self).CompleteRedrawNeeded()
    def ForceGraphicSelectionDraw(self):
        '''Method IMapAdmin2.ForceGraphicSelectionDraw'''
        return super(IMapAdmin2, self).ForceGraphicSelectionDraw()
    def SuppressForegroundDraw(self):
        '''Method IMapAdmin2.SuppressForegroundDraw'''
        return super(IMapAdmin2, self).SuppressForegroundDraw()
    ClipBounds = property(None, put_ClipBounds, None)
    NonFrameBackground = property(get_NonFrameBackground, putref_NonFrameBackground, None)

class IMapAdmin3(_esriCarto.IMapAdmin3):
    _IID = uuid.UUID('14eddf51-9d91-4c9c-89c1-f862381e0fde')

    def __init__(self, *args, **kw):
        super(IMapAdmin3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_NonFrameBackground(self, Background):
        '''Method IMapAdmin3.putref_NonFrameBackground

           INPUT
            Background          : IBackground*'''
        return super(IMapAdmin3, self).putref_NonFrameBackground(Background)
    def get_NonFrameBackground(self):
        '''Method IMapAdmin3.get_NonFrameBackground

           OUTPUT
            Background          : IBackground**'''
        return super(IMapAdmin3, self).get_NonFrameBackground()
    def put_ClipBounds(self, _arg1):
        '''Method IMapAdmin3.put_ClipBounds

           INPUT
            _arg1               : IGeometry*'''
        return super(IMapAdmin3, self).put_ClipBounds(_arg1)
    def FireAfterDraw(self, hDC):
        '''Method IMapAdmin3.FireAfterDraw

           INPUT
            hDC                 : OLE_HANDLE'''
        return super(IMapAdmin3, self).FireAfterDraw(hDC)
    def FireChangeVersion(self, oldVersion, newVersion):
        '''Method IMapAdmin3.FireChangeVersion

           INPUTS
            oldVersion          : IVersion*
            newVersion          : IVersion*'''
        return super(IMapAdmin3, self).FireChangeVersion(oldVersion, newVersion)
    def FireChangeFeatureClass(self, oldClass, newClass):
        '''Method IMapAdmin3.FireChangeFeatureClass

           INPUTS
            oldClass            : IFeatureClass*
            newClass            : IFeatureClass*'''
        return super(IMapAdmin3, self).FireChangeFeatureClass(oldClass, newClass)
    def FireChangeTable(self, oldTable, newTable):
        '''Method IMapAdmin3.FireChangeTable

           INPUTS
            oldTable            : ITable*
            newTable            : ITable*'''
        return super(IMapAdmin3, self).FireChangeTable(oldTable, newTable)
    def CompleteRedrawNeeded(self):
        '''Method IMapAdmin3.CompleteRedrawNeeded

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapAdmin3, self).CompleteRedrawNeeded()
    def ForceGraphicSelectionDraw(self):
        '''Method IMapAdmin3.ForceGraphicSelectionDraw'''
        return super(IMapAdmin3, self).ForceGraphicSelectionDraw()
    def SuppressForegroundDraw(self):
        '''Method IMapAdmin3.SuppressForegroundDraw'''
        return super(IMapAdmin3, self).SuppressForegroundDraw()
    def FireLayerDeleted(self, Layer):
        '''Method IMapAdmin3.FireLayerDeleted

           INPUT
            Layer               : ILayer*'''
        return super(IMapAdmin3, self).FireLayerDeleted(Layer)
    def FireLayerAdded(self, Layer):
        '''Method IMapAdmin3.FireLayerAdded

           INPUT
            Layer               : ILayer*'''
        return super(IMapAdmin3, self).FireLayerAdded(Layer)
    def FireLayerReordered(self, Layer, toIndex):
        '''Method IMapAdmin3.FireLayerReordered

           INPUTS
            Layer               : ILayer*
            toIndex             : long'''
        return super(IMapAdmin3, self).FireLayerReordered(Layer, toIndex)
    ClipBounds = property(None, put_ClipBounds, None)
    NonFrameBackground = property(get_NonFrameBackground, putref_NonFrameBackground, None)

class IMapAdmin4(_esriCarto.IMapAdmin4):
    _IID = uuid.UUID('900f7083-22ae-42b4-a00c-1776e316a910')

    def __init__(self, *args, **kw):
        super(IMapAdmin4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DomainDefiningLayer(self):
        '''Method IMapAdmin4.get_DomainDefiningLayer

           OUTPUT
            Layer               : ILayer**'''
        return super(IMapAdmin4, self).get_DomainDefiningLayer()
    def put_DomainDefiningLayer(self, Layer):
        '''Method IMapAdmin4.put_DomainDefiningLayer

           INPUT
            Layer               : ILayer*'''
        return super(IMapAdmin4, self).put_DomainDefiningLayer(Layer)
    def get_SimulateLayerEffectsInLegends(self):
        '''Method IMapAdmin4.get_SimulateLayerEffectsInLegends

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapAdmin4, self).get_SimulateLayerEffectsInLegends()
    def put_SimulateLayerEffectsInLegends(self, flag):
        '''Method IMapAdmin4.put_SimulateLayerEffectsInLegends

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMapAdmin4, self).put_SimulateLayerEffectsInLegends(flag)
    DomainDefiningLayer = property(get_DomainDefiningLayer, put_DomainDefiningLayer, None)
    SimulateLayerEffectsInLegends = property(get_SimulateLayerEffectsInLegends, put_SimulateLayerEffectsInLegends, None)

class IMapCache(_esriCarto.IMapCache):
    _IID = uuid.UUID('6e57310f-c58d-4e49-b106-e52fcb51c55a')

    def __init__(self, *args, **kw):
        super(IMapCache, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def BuildCache(self):
        '''Method IMapCache.BuildCache'''
        return super(IMapCache, self).BuildCache()
    def put_MaxScale(self, pMaxScale):
        '''Method IMapCache.put_MaxScale

           INPUT
            pMaxScale           : double'''
        return super(IMapCache, self).put_MaxScale(pMaxScale)
    def get_MaxScale(self):
        '''Method IMapCache.get_MaxScale

           OUTPUT
            pMaxScale           : double*'''
        return super(IMapCache, self).get_MaxScale()
    def get_Cacheable(self):
        '''Method IMapCache.get_Cacheable

           OUTPUT
            Cacheable           : VARIANT_BOOL*'''
        return super(IMapCache, self).get_Cacheable()
    def get_AutoCacheActive(self):
        '''Method IMapCache.get_AutoCacheActive

           OUTPUT
            active              : VARIANT_BOOL*'''
        return super(IMapCache, self).get_AutoCacheActive()
    def put_AutoCacheActive(self, active):
        '''Method IMapCache.put_AutoCacheActive

           INPUT
            active              : VARIANT_BOOL'''
        return super(IMapCache, self).put_AutoCacheActive(active)
    def get_ScaleLimit(self):
        '''Method IMapCache.get_ScaleLimit

           OUTPUT
            limited             : VARIANT_BOOL*'''
        return super(IMapCache, self).get_ScaleLimit()
    def put_ScaleLimit(self, limited):
        '''Method IMapCache.put_ScaleLimit

           INPUT
            limited             : VARIANT_BOOL'''
        return super(IMapCache, self).put_ScaleLimit(limited)
    def get_CacheExtent(self):
        '''Method IMapCache.get_CacheExtent

           OUTPUT
            ppEnvelope          : IEnvelope**'''
        return super(IMapCache, self).get_CacheExtent()
    def EmptyCache(self):
        '''Method IMapCache.EmptyCache'''
        return super(IMapCache, self).EmptyCache()
    def RefreshAutoCache(self):
        '''Method IMapCache.RefreshAutoCache'''
        return super(IMapCache, self).RefreshAutoCache()
    AutoCacheActive = property(get_AutoCacheActive, put_AutoCacheActive, None)
    CacheExtent = property(get_CacheExtent, None, None)
    Cacheable = property(get_Cacheable, None, None)
    MaxScale = property(get_MaxScale, put_MaxScale, None)
    ScaleLimit = property(get_ScaleLimit, put_ScaleLimit, None)

class ITableCollection(_esriCarto.ITableCollection):
    _IID = uuid.UUID('7d931eab-d31f-11d2-9f40-00c04f6bc78e')
    def get_TableCount(self):
        '''Method ITableCollection.get_TableCount

           OUTPUT
            Count               : long*'''
        return super(ITableCollection, self).get_TableCount()
    def get_Table(self, Index):
        '''Method ITableCollection.get_Table

           INPUT
            Index               : long

           OUTPUT
            Table               : ITable**'''
        return super(ITableCollection, self).get_Table(Index)
    def AddTable(self, Table):
        '''Method ITableCollection.AddTable

           INPUT
            Table               : ITable*'''
        return super(ITableCollection, self).AddTable(Table)
    def RemoveTable(self, Table):
        '''Method ITableCollection.RemoveTable

           INPUT
            Table               : ITable*'''
        return super(ITableCollection, self).RemoveTable(Table)
    def RemoveAllTables(self):
        '''Method ITableCollection.RemoveAllTables'''
        return super(ITableCollection, self).RemoveAllTables()
    TableCount = property(get_TableCount, None, None)
    Table = IndexProperty(get_Table, None)

class IStandaloneTable(_esriCarto.IStandaloneTable):
    _IID = uuid.UUID('ffc6b179-e3ec-11d3-a096-00c04f6bc626')

    def __init__(self, *args, **kw):
        super(IStandaloneTable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IStandaloneTable.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IStandaloneTable, self).get_Name()
    def put_Name(self, Name):
        '''Method IStandaloneTable.put_Name

           INPUT
            Name                : BSTR'''
        return super(IStandaloneTable, self).put_Name(Name)
    def get_Table(self):
        '''Method IStandaloneTable.get_Table

           OUTPUT
            ppTable             : ITable**'''
        return super(IStandaloneTable, self).get_Table()
    def putref_Table(self, ppTable):
        '''Method IStandaloneTable.putref_Table

           INPUT
            ppTable             : ITable*'''
        return super(IStandaloneTable, self).putref_Table(ppTable)
    def get_Valid(self):
        '''Method IStandaloneTable.get_Valid

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IStandaloneTable, self).get_Valid()
    def get_DisplayField(self):
        '''Method IStandaloneTable.get_DisplayField

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IStandaloneTable, self).get_DisplayField()
    def put_DisplayField(self, pFieldName):
        '''Method IStandaloneTable.put_DisplayField

           INPUT
            pFieldName          : BSTR'''
        return super(IStandaloneTable, self).put_DisplayField(pFieldName)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    Name = property(get_Name, put_Name, None)
    Table = property(get_Table, putref_Table, None)
    Valid = property(get_Valid, None, None)

class IStandaloneTableCollection(_esriCarto.IStandaloneTableCollection):
    _IID = uuid.UUID('3c2aceaa-e3dc-11d3-a096-00c04f6bc626')
    def get_StandaloneTableCount(self):
        '''Method IStandaloneTableCollection.get_StandaloneTableCount

           OUTPUT
            Count               : long*'''
        return super(IStandaloneTableCollection, self).get_StandaloneTableCount()
    def get_StandaloneTable(self, Index):
        '''Method IStandaloneTableCollection.get_StandaloneTable

           INPUT
            Index               : long

           OUTPUT
            Table               : IStandaloneTable**'''
        return super(IStandaloneTableCollection, self).get_StandaloneTable(Index)
    def AddStandaloneTable(self, Table):
        '''Method IStandaloneTableCollection.AddStandaloneTable

           INPUT
            Table               : IStandaloneTable*'''
        return super(IStandaloneTableCollection, self).AddStandaloneTable(Table)
    def RemoveStandaloneTable(self, Table):
        '''Method IStandaloneTableCollection.RemoveStandaloneTable

           INPUT
            Table               : IStandaloneTable*'''
        return super(IStandaloneTableCollection, self).RemoveStandaloneTable(Table)
    def RemoveAllStandaloneTables(self):
        '''Method IStandaloneTableCollection.RemoveAllStandaloneTables'''
        return super(IStandaloneTableCollection, self).RemoveAllStandaloneTables()
    StandaloneTableCount = property(get_StandaloneTableCount, None, None)
    StandaloneTable = IndexProperty(get_StandaloneTable, None)

class IDataBrowser(_esriCarto.IDataBrowser):
    _IID = uuid.UUID('3434b651-13f4-11d1-b6b9-080009b996cc')
    def get_Databases(self):
        '''Method IDataBrowser.get_Databases

           OUTPUT
            dbconns             : IEnumWorkspace**'''
        return super(IDataBrowser, self).get_Databases()
    def get_Workspaces(self, Path):
        '''Method IDataBrowser.get_Workspaces

           INPUT
            Path                : BSTR

           OUTPUT
            Workspaces          : IEnumWorkspace**'''
        return super(IDataBrowser, self).get_Workspaces(Path)
    def get_Datasets(self, Workspace):
        '''Method IDataBrowser.get_Datasets

           INPUT
            Workspace           : IWorkspace*

           OUTPUT
            Datasets            : IEnumDataset**'''
        return super(IDataBrowser, self).get_Datasets(Workspace)
    def get_FeatureClasses(self, Dataset):
        '''Method IDataBrowser.get_FeatureClasses

           INPUT
            Dataset             : IDataset*

           OUTPUT
            fclasses            : IEnumFeatureClass**'''
        return super(IDataBrowser, self).get_FeatureClasses(Dataset)
    Databases = property(get_Databases, None, None)
    Datasets = IndexProperty(get_Datasets, None)
    FeatureClasses = IndexProperty(get_FeatureClasses, None)
    Workspaces = IndexProperty(get_Workspaces, None)

class IScaleBar2(_esriCarto.IScaleBar2):
    _IID = uuid.UUID('d1658f8e-be62-4a78-88d3-07170f09120c')

    def __init__(self, *args, **kw):
        super(IScaleBar2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Division(self):
        '''Method IScaleBar2.get_Division

           OUTPUT
            Units               : double*'''
        return super(IScaleBar2, self).get_Division()
    def put_Division(self, Units):
        '''Method IScaleBar2.put_Division

           INPUT
            Units               : double'''
        return super(IScaleBar2, self).put_Division(Units)
    def get_Divisions(self):
        '''Method IScaleBar2.get_Divisions

           OUTPUT
            Count               : short*'''
        return super(IScaleBar2, self).get_Divisions()
    def put_Divisions(self, Count):
        '''Method IScaleBar2.put_Divisions

           INPUT
            Count               : short'''
        return super(IScaleBar2, self).put_Divisions(Count)
    def get_DivisionsBeforeZero(self):
        '''Method IScaleBar2.get_DivisionsBeforeZero

           OUTPUT
            Count               : short*'''
        return super(IScaleBar2, self).get_DivisionsBeforeZero()
    def put_DivisionsBeforeZero(self, Count):
        '''Method IScaleBar2.put_DivisionsBeforeZero

           INPUT
            Count               : short'''
        return super(IScaleBar2, self).put_DivisionsBeforeZero(Count)
    def get_Subdivisions(self):
        '''Method IScaleBar2.get_Subdivisions

           OUTPUT
            Units               : short*'''
        return super(IScaleBar2, self).get_Subdivisions()
    def put_Subdivisions(self, Units):
        '''Method IScaleBar2.put_Subdivisions

           INPUT
            Units               : short'''
        return super(IScaleBar2, self).put_Subdivisions(Units)
    def get_Units(self):
        '''Method IScaleBar2.get_Units

           OUTPUT
            Units               : esriUnits*'''
        return super(IScaleBar2, self).get_Units()
    def put_Units(self, Units):
        '''Method IScaleBar2.put_Units

           INPUT
            Units               : esriUnits'''
        return super(IScaleBar2, self).put_Units(Units)
    def get_UnitLabel(self):
        '''Method IScaleBar2.get_UnitLabel

           OUTPUT
            UnitLabel           : BSTR*'''
        return super(IScaleBar2, self).get_UnitLabel()
    def put_UnitLabel(self, UnitLabel):
        '''Method IScaleBar2.put_UnitLabel

           INPUT
            UnitLabel           : BSTR'''
        return super(IScaleBar2, self).put_UnitLabel(UnitLabel)
    def get_UnitLabelPosition(self):
        '''Method IScaleBar2.get_UnitLabelPosition

           OUTPUT
            position            : esriScaleBarPos*'''
        return super(IScaleBar2, self).get_UnitLabelPosition()
    def put_UnitLabelPosition(self, position):
        '''Method IScaleBar2.put_UnitLabelPosition

           INPUT
            position            : esriScaleBarPos'''
        return super(IScaleBar2, self).put_UnitLabelPosition(position)
    def get_UnitLabelGap(self):
        '''Method IScaleBar2.get_UnitLabelGap

           OUTPUT
            points              : double*'''
        return super(IScaleBar2, self).get_UnitLabelGap()
    def put_UnitLabelGap(self, points):
        '''Method IScaleBar2.put_UnitLabelGap

           INPUT
            points              : double'''
        return super(IScaleBar2, self).put_UnitLabelGap(points)
    def get_UnitLabelSymbol(self):
        '''Method IScaleBar2.get_UnitLabelSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IScaleBar2, self).get_UnitLabelSymbol()
    def put_UnitLabelSymbol(self, Symbol):
        '''Method IScaleBar2.put_UnitLabelSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IScaleBar2, self).put_UnitLabelSymbol(Symbol)
    def get_LabelFrequency(self):
        '''Method IScaleBar2.get_LabelFrequency

           OUTPUT
            LabelFrequency      : esriScaleBarFrequency*'''
        return super(IScaleBar2, self).get_LabelFrequency()
    def put_LabelFrequency(self, LabelFrequency):
        '''Method IScaleBar2.put_LabelFrequency

           INPUT
            LabelFrequency      : esriScaleBarFrequency'''
        return super(IScaleBar2, self).put_LabelFrequency(LabelFrequency)
    def get_NumberFormat(self):
        '''Method IScaleBar2.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IScaleBar2, self).get_NumberFormat()
    def put_NumberFormat(self, Format):
        '''Method IScaleBar2.put_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IScaleBar2, self).put_NumberFormat(Format)
    def get_LabelPosition(self):
        '''Method IScaleBar2.get_LabelPosition

           OUTPUT
            position            : esriVertPosEnum*'''
        return super(IScaleBar2, self).get_LabelPosition()
    def put_LabelPosition(self, position):
        '''Method IScaleBar2.put_LabelPosition

           INPUT
            position            : esriVertPosEnum'''
        return super(IScaleBar2, self).put_LabelPosition(position)
    def get_LabelGap(self):
        '''Method IScaleBar2.get_LabelGap

           OUTPUT
            points              : double*'''
        return super(IScaleBar2, self).get_LabelGap()
    def put_LabelGap(self, points):
        '''Method IScaleBar2.put_LabelGap

           INPUT
            points              : double'''
        return super(IScaleBar2, self).put_LabelGap(points)
    def get_LabelSymbol(self):
        '''Method IScaleBar2.get_LabelSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IScaleBar2, self).get_LabelSymbol()
    def put_LabelSymbol(self, Symbol):
        '''Method IScaleBar2.put_LabelSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IScaleBar2, self).put_LabelSymbol(Symbol)
    def get_BarColor(self):
        '''Method IScaleBar2.get_BarColor

           OUTPUT
            Color               : IColor**'''
        return super(IScaleBar2, self).get_BarColor()
    def put_BarColor(self, Color):
        '''Method IScaleBar2.put_BarColor

           INPUT
            Color               : IColor*'''
        return super(IScaleBar2, self).put_BarColor(Color)
    def get_BarHeight(self):
        '''Method IScaleBar2.get_BarHeight

           OUTPUT
            points              : double*'''
        return super(IScaleBar2, self).get_BarHeight()
    def put_BarHeight(self, points):
        '''Method IScaleBar2.put_BarHeight

           INPUT
            points              : double'''
        return super(IScaleBar2, self).put_BarHeight(points)
    def get_ResizeHint(self):
        '''Method IScaleBar2.get_ResizeHint

           OUTPUT
            hint                : esriScaleBarResizeHint*'''
        return super(IScaleBar2, self).get_ResizeHint()
    def put_ResizeHint(self, hint):
        '''Method IScaleBar2.put_ResizeHint

           INPUT
            hint                : esriScaleBarResizeHint'''
        return super(IScaleBar2, self).put_ResizeHint(hint)
    def UseMapSettings(self):
        '''Method IScaleBar2.UseMapSettings'''
        return super(IScaleBar2, self).UseMapSettings()
    def get_UseFractionCharacters(self):
        '''Method IScaleBar2.get_UseFractionCharacters

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IScaleBar2, self).get_UseFractionCharacters()
    def put_UseFractionCharacters(self, flag):
        '''Method IScaleBar2.put_UseFractionCharacters

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IScaleBar2, self).put_UseFractionCharacters(flag)
    BarColor = property(get_BarColor, put_BarColor, None)
    BarHeight = property(get_BarHeight, put_BarHeight, None)
    Division = property(get_Division, put_Division, None)
    Divisions = property(get_Divisions, put_Divisions, None)
    DivisionsBeforeZero = property(get_DivisionsBeforeZero, put_DivisionsBeforeZero, None)
    LabelFrequency = property(get_LabelFrequency, put_LabelFrequency, None)
    LabelGap = property(get_LabelGap, put_LabelGap, None)
    LabelPosition = property(get_LabelPosition, put_LabelPosition, None)
    LabelSymbol = property(get_LabelSymbol, put_LabelSymbol, None)
    NumberFormat = property(get_NumberFormat, put_NumberFormat, None)
    ResizeHint = property(get_ResizeHint, put_ResizeHint, None)
    Subdivisions = property(get_Subdivisions, put_Subdivisions, None)
    UnitLabel = property(get_UnitLabel, put_UnitLabel, None)
    UnitLabelGap = property(get_UnitLabelGap, put_UnitLabelGap, None)
    UnitLabelPosition = property(get_UnitLabelPosition, put_UnitLabelPosition, None)
    UnitLabelSymbol = property(get_UnitLabelSymbol, put_UnitLabelSymbol, None)
    Units = property(get_Units, put_Units, None)
    UseFractionCharacters = property(get_UseFractionCharacters, put_UseFractionCharacters, None)

class IScaleLine(_esriCarto.IScaleLine):
    _IID = uuid.UUID('6dfae8e3-ecaa-11d0-8682-0000f8751720')

    def __init__(self, *args, **kw):
        super(IScaleLine, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LineSymbol(self):
        '''Method IScaleLine.get_LineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IScaleLine, self).get_LineSymbol()
    def put_LineSymbol(self, Symbol):
        '''Method IScaleLine.put_LineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IScaleLine, self).put_LineSymbol(Symbol)
    LineSymbol = property(get_LineSymbol, put_LineSymbol, None)

class ISingleFillScaleBar(_esriCarto.ISingleFillScaleBar):
    _IID = uuid.UUID('6dfae8e4-ecaa-11d0-8682-0000f8751720')

    def __init__(self, *args, **kw):
        super(ISingleFillScaleBar, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FillSymbol(self):
        '''Method ISingleFillScaleBar.get_FillSymbol

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(ISingleFillScaleBar, self).get_FillSymbol()
    def put_FillSymbol(self, Symbol):
        '''Method ISingleFillScaleBar.put_FillSymbol

           INPUT
            Symbol              : IFillSymbol*'''
        return super(ISingleFillScaleBar, self).put_FillSymbol(Symbol)
    FillSymbol = property(get_FillSymbol, put_FillSymbol, None)

class IDoubleFillScaleBar(_esriCarto.IDoubleFillScaleBar):
    _IID = uuid.UUID('6dfae8e5-ecaa-11d0-8682-0000f8751720')

    def __init__(self, *args, **kw):
        super(IDoubleFillScaleBar, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FillSymbol1(self):
        '''Method IDoubleFillScaleBar.get_FillSymbol1

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(IDoubleFillScaleBar, self).get_FillSymbol1()
    def put_FillSymbol1(self, Symbol):
        '''Method IDoubleFillScaleBar.put_FillSymbol1

           INPUT
            Symbol              : IFillSymbol*'''
        return super(IDoubleFillScaleBar, self).put_FillSymbol1(Symbol)
    def get_FillSymbol2(self):
        '''Method IDoubleFillScaleBar.get_FillSymbol2

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(IDoubleFillScaleBar, self).get_FillSymbol2()
    def put_FillSymbol2(self, Symbol):
        '''Method IDoubleFillScaleBar.put_FillSymbol2

           INPUT
            Symbol              : IFillSymbol*'''
        return super(IDoubleFillScaleBar, self).put_FillSymbol2(Symbol)
    FillSymbol1 = property(get_FillSymbol1, put_FillSymbol1, None)
    FillSymbol2 = property(get_FillSymbol2, put_FillSymbol2, None)

class IScaleMarks(_esriCarto.IScaleMarks):
    _IID = uuid.UUID('6dfae8e7-ecaa-11d0-8682-0000f8751720')

    def __init__(self, *args, **kw):
        super(IScaleMarks, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DivisionMarkSymbol(self):
        '''Method IScaleMarks.get_DivisionMarkSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IScaleMarks, self).get_DivisionMarkSymbol()
    def put_DivisionMarkSymbol(self, Symbol):
        '''Method IScaleMarks.put_DivisionMarkSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IScaleMarks, self).put_DivisionMarkSymbol(Symbol)
    def get_SubdivisionMarkSymbol(self):
        '''Method IScaleMarks.get_SubdivisionMarkSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IScaleMarks, self).get_SubdivisionMarkSymbol()
    def put_SubdivisionMarkSymbol(self, Symbol):
        '''Method IScaleMarks.put_SubdivisionMarkSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IScaleMarks, self).put_SubdivisionMarkSymbol(Symbol)
    def get_DivisionMarkHeight(self):
        '''Method IScaleMarks.get_DivisionMarkHeight

           OUTPUT
            points              : double*'''
        return super(IScaleMarks, self).get_DivisionMarkHeight()
    def put_DivisionMarkHeight(self, points):
        '''Method IScaleMarks.put_DivisionMarkHeight

           INPUT
            points              : double'''
        return super(IScaleMarks, self).put_DivisionMarkHeight(points)
    def get_SubdivisionMarkHeight(self):
        '''Method IScaleMarks.get_SubdivisionMarkHeight

           OUTPUT
            points              : double*'''
        return super(IScaleMarks, self).get_SubdivisionMarkHeight()
    def put_SubdivisionMarkHeight(self, points):
        '''Method IScaleMarks.put_SubdivisionMarkHeight

           INPUT
            points              : double'''
        return super(IScaleMarks, self).put_SubdivisionMarkHeight(points)
    def get_MarkPosition(self):
        '''Method IScaleMarks.get_MarkPosition

           OUTPUT
            position            : esriVertPosEnum*'''
        return super(IScaleMarks, self).get_MarkPosition()
    def put_MarkPosition(self, position):
        '''Method IScaleMarks.put_MarkPosition

           INPUT
            position            : esriVertPosEnum'''
        return super(IScaleMarks, self).put_MarkPosition(position)
    def get_MarkFrequency(self):
        '''Method IScaleMarks.get_MarkFrequency

           OUTPUT
            frequency           : esriScaleBarFrequency*'''
        return super(IScaleMarks, self).get_MarkFrequency()
    def put_MarkFrequency(self, frequency):
        '''Method IScaleMarks.put_MarkFrequency

           INPUT
            frequency           : esriScaleBarFrequency'''
        return super(IScaleMarks, self).put_MarkFrequency(frequency)
    DivisionMarkHeight = property(get_DivisionMarkHeight, put_DivisionMarkHeight, None)
    DivisionMarkSymbol = property(get_DivisionMarkSymbol, put_DivisionMarkSymbol, None)
    MarkFrequency = property(get_MarkFrequency, put_MarkFrequency, None)
    MarkPosition = property(get_MarkPosition, put_MarkPosition, None)
    SubdivisionMarkHeight = property(get_SubdivisionMarkHeight, put_SubdivisionMarkHeight, None)
    SubdivisionMarkSymbol = property(get_SubdivisionMarkSymbol, put_SubdivisionMarkSymbol, None)

class IMapInset2(_esriCarto.IMapInset2):
    _IID = uuid.UUID('6dfae8f2-ecaa-11d0-8682-0000f8751720')

    def __init__(self, *args, **kw):
        super(IMapInset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MapBounds(self):
        '''Method IMapInset2.get_MapBounds

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IMapInset2, self).get_MapBounds()
    def put_MapBounds(self, Bounds):
        '''Method IMapInset2.put_MapBounds

           INPUT
            Bounds              : IEnvelope*'''
        return super(IMapInset2, self).put_MapBounds(Bounds)
    def get_VisibleBounds(self):
        '''Method IMapInset2.get_VisibleBounds

           OUTPUT
            VisibleBounds       : IEnvelope**'''
        return super(IMapInset2, self).get_VisibleBounds()
    def put_VisibleBounds(self, VisibleBounds):
        '''Method IMapInset2.put_VisibleBounds

           INPUT
            VisibleBounds       : IEnvelope*'''
        return super(IMapInset2, self).put_VisibleBounds(VisibleBounds)
    def get_IsLive(self):
        '''Method IMapInset2.get_IsLive

           OUTPUT
            IsLive              : VARIANT_BOOL*'''
        return super(IMapInset2, self).get_IsLive()
    def put_IsLive(self, IsLive):
        '''Method IMapInset2.put_IsLive

           INPUT
            IsLive              : VARIANT_BOOL'''
        return super(IMapInset2, self).put_IsLive(IsLive)
    def get_UsingZoomScale(self):
        '''Method IMapInset2.get_UsingZoomScale

           OUTPUT
            UsingZoomScale      : VARIANT_BOOL*'''
        return super(IMapInset2, self).get_UsingZoomScale()
    def get_ZoomPercent(self):
        '''Method IMapInset2.get_ZoomPercent

           OUTPUT
            percent             : double*'''
        return super(IMapInset2, self).get_ZoomPercent()
    def put_ZoomPercent(self, percent):
        '''Method IMapInset2.put_ZoomPercent

           INPUT
            percent             : double'''
        return super(IMapInset2, self).put_ZoomPercent(percent)
    def get_ZoomScale(self):
        '''Method IMapInset2.get_ZoomScale

           OUTPUT
            Scale               : double*'''
        return super(IMapInset2, self).get_ZoomScale()
    def put_ZoomScale(self, Scale):
        '''Method IMapInset2.put_ZoomScale

           INPUT
            Scale               : double'''
        return super(IMapInset2, self).put_ZoomScale(Scale)
    def get_Description(self):
        '''Method IMapInset2.get_Description

           OUTPUT
            Title               : BSTR*'''
        return super(IMapInset2, self).get_Description()
    def CalculateVisibleBounds(self):
        '''Method IMapInset2.CalculateVisibleBounds'''
        return super(IMapInset2, self).CalculateVisibleBounds()
    def get_FullExtent(self):
        '''Method IMapInset2.get_FullExtent

           OUTPUT
            FullExtent          : IEnvelope**'''
        return super(IMapInset2, self).get_FullExtent()
    def put_FullExtent(self, FullExtent):
        '''Method IMapInset2.put_FullExtent

           INPUT
            FullExtent          : IEnvelope*'''
        return super(IMapInset2, self).put_FullExtent(FullExtent)
    def get_ReferenceScale(self):
        '''Method IMapInset2.get_ReferenceScale

           OUTPUT
            refScale            : double*'''
        return super(IMapInset2, self).get_ReferenceScale()
    def put_ReferenceScale(self, refScale):
        '''Method IMapInset2.put_ReferenceScale

           INPUT
            refScale            : double'''
        return super(IMapInset2, self).put_ReferenceScale(refScale)
    def GetDeviceFrame(self):
        '''Method IMapInset2.GetDeviceFrame

           OUTPUTS
            Left                : long*
            top                 : long*
            Right               : long*
            bottom              : long*'''
        return super(IMapInset2, self).GetDeviceFrame()
    def SetDeviceFrame(self, Left, top, Right, bottom):
        '''Method IMapInset2.SetDeviceFrame

           INPUTS
            Left                : long
            top                 : long
            Right               : long
            bottom              : long'''
        return super(IMapInset2, self).SetDeviceFrame(Left, top, Right, bottom)
    Description = property(get_Description, None, None)
    FullExtent = property(get_FullExtent, put_FullExtent, None)
    IsLive = property(get_IsLive, put_IsLive, None)
    MapBounds = property(get_MapBounds, put_MapBounds, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    UsingZoomScale = property(get_UsingZoomScale, None, None)
    VisibleBounds = property(get_VisibleBounds, put_VisibleBounds, None)
    ZoomPercent = property(get_ZoomPercent, put_ZoomPercent, None)
    ZoomScale = property(get_ZoomScale, put_ZoomScale, None)

class IMarkerNorthArrow(_esriCarto.IMarkerNorthArrow):
    _IID = uuid.UUID('7a3f91f3-b9e3-11d1-8756-0000f8751720')

    def __init__(self, *args, **kw):
        super(IMarkerNorthArrow, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MarkerSymbol(self):
        '''Method IMarkerNorthArrow.get_MarkerSymbol

           OUTPUT
            marker              : IMarkerSymbol**'''
        return super(IMarkerNorthArrow, self).get_MarkerSymbol()
    def put_MarkerSymbol(self, marker):
        '''Method IMarkerNorthArrow.put_MarkerSymbol

           INPUT
            marker              : IMarkerSymbol*'''
        return super(IMarkerNorthArrow, self).put_MarkerSymbol(marker)
    MarkerSymbol = property(get_MarkerSymbol, put_MarkerSymbol, None)

class IPictureNorthArrow(_esriCarto.IPictureNorthArrow):
    _IID = uuid.UUID('7a3f91f7-b9e3-11d1-8756-0000f8751720')

    def __init__(self, *args, **kw):
        super(IPictureNorthArrow, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Picture(self):
        '''Method IPictureNorthArrow.get_Picture

           OUTPUT
            Picture             : IPicture**'''
        return super(IPictureNorthArrow, self).get_Picture()
    def put_Picture(self, Picture):
        '''Method IPictureNorthArrow.put_Picture

           INPUT
            Picture             : IPicture*'''
        return super(IPictureNorthArrow, self).put_Picture(Picture)
    Picture = property(get_Picture, put_Picture, None)

class IFeatureCursorBuffer(_esriCarto.IFeatureCursorBuffer):
    _IID = uuid.UUID('a2983336-7e7c-11d2-a084-0000f8775bf9')

    def __init__(self, *args, **kw):
        super(IFeatureCursorBuffer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FeatureCursor(self, _arg1):
        '''Method IFeatureCursorBuffer.putref_FeatureCursor

           INPUT
            _arg1               : IFeatureCursor*'''
        return super(IFeatureCursorBuffer, self).putref_FeatureCursor(_arg1)
    def GraphicsLayer(self, pGraphicsLayer, Selected):
        '''Method IFeatureCursorBuffer.GraphicsLayer

           INPUTS
            pGraphicsLayer      : IGraphicsLayer*
            Selected            : VARIANT_BOOL'''
        return super(IFeatureCursorBuffer, self).GraphicsLayer(pGraphicsLayer, Selected)
    def put_Dissolve(self, _arg1):
        '''Method IFeatureCursorBuffer.put_Dissolve

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFeatureCursorBuffer, self).put_Dissolve(_arg1)
    def put_ValueDistance(self, _arg1):
        '''Method IFeatureCursorBuffer.put_ValueDistance

           INPUT
            _arg1               : double'''
        return super(IFeatureCursorBuffer, self).put_ValueDistance(_arg1)
    def put_FieldDistance(self, _arg1):
        '''Method IFeatureCursorBuffer.put_FieldDistance

           INPUT
            _arg1               : BSTR'''
        return super(IFeatureCursorBuffer, self).put_FieldDistance(_arg1)
    def put_RingDistance(self, numberOfRings, _arg2):
        '''Method IFeatureCursorBuffer.put_RingDistance

           INPUTS
            numberOfRings       : long
            _arg2               : double'''
        return super(IFeatureCursorBuffer, self).put_RingDistance(numberOfRings, _arg2)
    def putref_SpatialReference(self, _arg1):
        '''Method IFeatureCursorBuffer.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IFeatureCursorBuffer, self).putref_SpatialReference(_arg1)
    def put_Units(self, MapUnits, _arg2):
        '''Method IFeatureCursorBuffer.put_Units

           INPUTS
            MapUnits            : esriUnits
            _arg2               : esriUnits'''
        return super(IFeatureCursorBuffer, self).put_Units(MapUnits, _arg2)
    def put_PolygonBufferType(self, _arg1):
        '''Method IFeatureCursorBuffer.put_PolygonBufferType

           INPUT
            _arg1               : esriBufferType'''
        return super(IFeatureCursorBuffer, self).put_PolygonBufferType(_arg1)
    def putref_CancelTrack(self, _arg1):
        '''Method IFeatureCursorBuffer.putref_CancelTrack

           INPUT
            _arg1               : ITrackCancel*'''
        return super(IFeatureCursorBuffer, self).putref_CancelTrack(_arg1)
    def get_BufferedGeometry(self):
        '''Method IFeatureCursorBuffer.get_BufferedGeometry

           OUTPUT
            ppEnumGeometry      : IEnumGeometry**'''
        return super(IFeatureCursorBuffer, self).get_BufferedGeometry()
    def Buffer(self, pNewLocationName):
        '''Method IFeatureCursorBuffer.Buffer

           INPUT
            pNewLocationName    : IFeatureClassName*'''
        return super(IFeatureCursorBuffer, self).Buffer(pNewLocationName)
    BufferedGeometry = property(get_BufferedGeometry, None, None)
    CancelTrack = property(None, putref_CancelTrack, None)
    Dissolve = property(None, put_Dissolve, None)
    FeatureCursor = property(None, putref_FeatureCursor, None)
    FieldDistance = property(None, put_FieldDistance, None)
    PolygonBufferType = property(None, put_PolygonBufferType, None)
    RingDistance = property(None, put_RingDistance, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    Units = property(None, put_Units, None)
    ValueDistance = property(None, put_ValueDistance, None)

class IFeatureCursorBuffer2(_esriCarto.IFeatureCursorBuffer2):
    _IID = uuid.UUID('7df13f3f-39b7-41c4-80e3-aa7d16f46d57')

    def __init__(self, *args, **kw):
        super(IFeatureCursorBuffer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FeatureCursor(self, _arg1):
        '''Method IFeatureCursorBuffer2.putref_FeatureCursor

           INPUT
            _arg1               : IFeatureCursor*'''
        return super(IFeatureCursorBuffer2, self).putref_FeatureCursor(_arg1)
    def GraphicsLayer2(self, pGraphicsLayer, Selected):
        '''Method IFeatureCursorBuffer2.GraphicsLayer2

           INPUTS
            pGraphicsLayer      : IGraphicsLayer*
            Selected            : VARIANT_BOOL

           OUTPUTS
            pSelectedElements   : long*
            bHasPolygons        : VARIANT_BOOL*'''
        return super(IFeatureCursorBuffer2, self).GraphicsLayer2(pGraphicsLayer, Selected)
    def put_Dissolve(self, _arg1):
        '''Method IFeatureCursorBuffer2.put_Dissolve

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFeatureCursorBuffer2, self).put_Dissolve(_arg1)
    def put_ValueDistance(self, _arg1):
        '''Method IFeatureCursorBuffer2.put_ValueDistance

           INPUT
            _arg1               : double'''
        return super(IFeatureCursorBuffer2, self).put_ValueDistance(_arg1)
    def put_FieldDistance(self, _arg1):
        '''Method IFeatureCursorBuffer2.put_FieldDistance

           INPUT
            _arg1               : BSTR'''
        return super(IFeatureCursorBuffer2, self).put_FieldDistance(_arg1)
    def put_RingDistance(self, numberOfRings, _arg2):
        '''Method IFeatureCursorBuffer2.put_RingDistance

           INPUTS
            numberOfRings       : long
            _arg2               : double'''
        return super(IFeatureCursorBuffer2, self).put_RingDistance(numberOfRings, _arg2)
    def putref_SpatialReference(self, _arg1):
        '''Method IFeatureCursorBuffer2.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IFeatureCursorBuffer2, self).putref_SpatialReference(_arg1)
    def put_Units(self, MapUnits, _arg2):
        '''Method IFeatureCursorBuffer2.put_Units

           INPUTS
            MapUnits            : esriUnits
            _arg2               : esriUnits'''
        return super(IFeatureCursorBuffer2, self).put_Units(MapUnits, _arg2)
    def put_PolygonBufferType(self, _arg1):
        '''Method IFeatureCursorBuffer2.put_PolygonBufferType

           INPUT
            _arg1               : esriBufferType'''
        return super(IFeatureCursorBuffer2, self).put_PolygonBufferType(_arg1)
    def putref_CancelTrack(self, _arg1):
        '''Method IFeatureCursorBuffer2.putref_CancelTrack

           INPUT
            _arg1               : ITrackCancel*'''
        return super(IFeatureCursorBuffer2, self).putref_CancelTrack(_arg1)
    def get_BufferedGeometry(self):
        '''Method IFeatureCursorBuffer2.get_BufferedGeometry

           OUTPUT
            ppEnumGeometry      : IEnumGeometry**'''
        return super(IFeatureCursorBuffer2, self).get_BufferedGeometry()
    def Buffer(self, pNewLocationName):
        '''Method IFeatureCursorBuffer2.Buffer

           INPUT
            pNewLocationName    : IFeatureClassName*'''
        return super(IFeatureCursorBuffer2, self).Buffer(pNewLocationName)
    def BufferToGraphics(self, pCompositeGraphicsLayer):
        '''Method IFeatureCursorBuffer2.BufferToGraphics

           INPUT
            pCompositeGraphicsLayer: ICompositeGraphicsLayer*'''
        return super(IFeatureCursorBuffer2, self).BufferToGraphics(pCompositeGraphicsLayer)
    def putref_SourceSpatialReference(self, _arg1):
        '''Method IFeatureCursorBuffer2.putref_SourceSpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IFeatureCursorBuffer2, self).putref_SourceSpatialReference(_arg1)
    def putref_BufferSpatialReference(self, _arg1):
        '''Method IFeatureCursorBuffer2.putref_BufferSpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IFeatureCursorBuffer2, self).putref_BufferSpatialReference(_arg1)
    def putref_TargetSpatialReference(self, _arg1):
        '''Method IFeatureCursorBuffer2.putref_TargetSpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IFeatureCursorBuffer2, self).putref_TargetSpatialReference(_arg1)
    def putref_DataFrameSpatialReference(self, _arg1):
        '''Method IFeatureCursorBuffer2.putref_DataFrameSpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IFeatureCursorBuffer2, self).putref_DataFrameSpatialReference(_arg1)
    BufferSpatialReference = property(None, putref_BufferSpatialReference, None)
    BufferedGeometry = property(get_BufferedGeometry, None, None)
    CancelTrack = property(None, putref_CancelTrack, None)
    DataFrameSpatialReference = property(None, putref_DataFrameSpatialReference, None)
    Dissolve = property(None, put_Dissolve, None)
    FeatureCursor = property(None, putref_FeatureCursor, None)
    FieldDistance = property(None, put_FieldDistance, None)
    PolygonBufferType = property(None, put_PolygonBufferType, None)
    RingDistance = property(None, put_RingDistance, None)
    SourceSpatialReference = property(None, putref_SourceSpatialReference, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    TargetSpatialReference = property(None, putref_TargetSpatialReference, None)
    Units = property(None, put_Units, None)
    ValueDistance = property(None, put_ValueDistance, None)

class IBufferProcessingSymbology(_esriCarto.IBufferProcessingSymbology):
    _IID = uuid.UUID('8fc84c02-6be1-4352-9164-a682bbfe894c')

    def __init__(self, *args, **kw):
        super(IBufferProcessingSymbology, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_ColorRamp(self, ppColorRamp):
        '''Method IBufferProcessingSymbology.putref_ColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IBufferProcessingSymbology, self).putref_ColorRamp(ppColorRamp)
    def get_ColorRamp(self):
        '''Method IBufferProcessingSymbology.get_ColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IBufferProcessingSymbology, self).get_ColorRamp()
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)

class IBufferProcessingParameter(_esriCarto.IBufferProcessingParameter):
    _IID = uuid.UUID('d7c605d8-6da2-4bad-a5d4-dd8438717f17')

    def __init__(self, *args, **kw):
        super(IBufferProcessingParameter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AdjustCirclesForProjection(self, AdjustCirclesForProjection):
        '''Method IBufferProcessingParameter.put_AdjustCirclesForProjection

           INPUT
            AdjustCirclesForProjection: VARIANT_BOOL'''
        return super(IBufferProcessingParameter, self).put_AdjustCirclesForProjection(AdjustCirclesForProjection)
    def get_AdjustCirclesForProjection(self):
        '''Method IBufferProcessingParameter.get_AdjustCirclesForProjection

           OUTPUT
            AdjustCirclesForProjection: VARIANT_BOOL*'''
        return super(IBufferProcessingParameter, self).get_AdjustCirclesForProjection()
    def put_GenerateRings(self, GenerateRings):
        '''Method IBufferProcessingParameter.put_GenerateRings

           INPUT
            GenerateRings       : VARIANT_BOOL'''
        return super(IBufferProcessingParameter, self).put_GenerateRings(GenerateRings)
    def get_GenerateRings(self):
        '''Method IBufferProcessingParameter.get_GenerateRings

           OUTPUT
            GenerateRings       : VARIANT_BOOL*'''
        return super(IBufferProcessingParameter, self).get_GenerateRings()
    def put_SaveAsGraphics(self, _arg1):
        '''Method IBufferProcessingParameter.put_SaveAsGraphics

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IBufferProcessingParameter, self).put_SaveAsGraphics(_arg1)
    def putref_FeatureClass(self, _arg1):
        '''Method IBufferProcessingParameter.putref_FeatureClass

           INPUT
            _arg1               : IFeatureClass*'''
        return super(IBufferProcessingParameter, self).putref_FeatureClass(_arg1)
    def put_BufferSpatialReference(self, _arg1):
        '''Method IBufferProcessingParameter.put_BufferSpatialReference

           INPUT
            _arg1               : esriBufferSpatialReferenceType'''
        return super(IBufferProcessingParameter, self).put_BufferSpatialReference(_arg1)
    def put_TargetSpatialReference(self, _arg1):
        '''Method IBufferProcessingParameter.put_TargetSpatialReference

           INPUT
            _arg1               : esriBufferSpatialReferenceType'''
        return super(IBufferProcessingParameter, self).put_TargetSpatialReference(_arg1)
    def put_InputHasPolygons(self, _arg1):
        '''Method IBufferProcessingParameter.put_InputHasPolygons

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IBufferProcessingParameter, self).put_InputHasPolygons(_arg1)
    def put_SimplifyShapes(self, _arg1):
        '''Method IBufferProcessingParameter.put_SimplifyShapes

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IBufferProcessingParameter, self).put_SimplifyShapes(_arg1)
    AdjustCirclesForProjection = property(get_AdjustCirclesForProjection, put_AdjustCirclesForProjection, None)
    BufferSpatialReference = property(None, put_BufferSpatialReference, None)
    FeatureClass = property(None, putref_FeatureClass, None)
    GenerateRings = property(get_GenerateRings, put_GenerateRings, None)
    InputHasPolygons = property(None, put_InputHasPolygons, None)
    SaveAsGraphics = property(None, put_SaveAsGraphics, None)
    SimplifyShapes = property(None, put_SimplifyShapes, None)
    TargetSpatialReference = property(None, put_TargetSpatialReference, None)

class IFeatureIndex(_esriCarto.IFeatureIndex):
    _IID = uuid.UUID('59f60294-c1fb-11d2-9f23-00c04f6bc886')

    def __init__(self, *args, **kw):
        super(IFeatureIndex, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FeatureClass(self, _arg1):
        '''Method IFeatureIndex.putref_FeatureClass

           INPUT
            _arg1               : IFeatureClass*'''
        return super(IFeatureIndex, self).putref_FeatureClass(_arg1)
    def putref_FeatureCursor(self, _arg1):
        '''Method IFeatureIndex.putref_FeatureCursor

           INPUT
            _arg1               : IFeatureCursor*'''
        return super(IFeatureIndex, self).putref_FeatureCursor(_arg1)
    def Index(self, pTrackCancel, pQueryingGeometryFullExtent):
        '''Method IFeatureIndex.Index

           INPUTS
            pTrackCancel        : ITrackCancel*
            pQueryingGeometryFullExtent: IEnvelope*'''
        return super(IFeatureIndex, self).Index(pTrackCancel, pQueryingGeometryFullExtent)
    FeatureClass = property(None, putref_FeatureClass, None)
    FeatureCursor = property(None, putref_FeatureCursor, None)

class IIndexQuery(_esriCarto.IIndexQuery):
    _IID = uuid.UUID('59f60295-c1fb-11d2-9f23-00c04f6bc886')
    def NearestFeature(self, pShape):
        '''Method IIndexQuery.NearestFeature

           INPUT
            pShape              : IGeometry*

           OUTPUTS
            pClosestFeatureFID  : long*
            pDistance           : double*'''
        return super(IIndexQuery, self).NearestFeature(pShape)
    def get_Within(self, pShape):
        '''Method IIndexQuery.get_Within

           INPUT
            pShape              : IGeometry*

           OUTPUT
            ppFeatureCursor     : IFeatureCursor**'''
        return super(IIndexQuery, self).get_Within(pShape)
    Within = IndexProperty(get_Within, None)

class IIndexQuery2(_esriCarto.IIndexQuery2):
    _IID = uuid.UUID('3df5374b-2cee-11d4-a6a5-0008c7d3ae8d')
    def NearestFeature(self, pShape):
        '''Method IIndexQuery2.NearestFeature

           INPUT
            pShape              : IGeometry*

           OUTPUTS
            pClosestFeatureFID  : long*
            pDistance           : double*'''
        return super(IIndexQuery2, self).NearestFeature(pShape)
    def get_Within(self, pShape):
        '''Method IIndexQuery2.get_Within

           INPUT
            pShape              : IGeometry*

           OUTPUT
            ppFeatureCursor     : IFeatureCursor**'''
        return super(IIndexQuery2, self).get_Within(pShape)
    def NearestFeatures(self, pShape):
        '''Method IIndexQuery2.NearestFeatures

           INPUT
            pShape              : IGeometry*

           OUTPUTS
            pSAIds              : VARIANT*
            pDistance           : double*'''
        return super(IIndexQuery2, self).NearestFeatures(pShape)
    def IntersectedFeatures(self, pShape):
        '''Method IIndexQuery2.IntersectedFeatures

           INPUT
            pShape              : IGeometry*

           OUTPUT
            pSAIds              : VARIANT*'''
        return super(IIndexQuery2, self).IntersectedFeatures(pShape)
    def WithinFeature(self, pShape):
        '''Method IIndexQuery2.WithinFeature

           INPUT
            pShape              : IGeometry*

           OUTPUT
            pWithinFeatureFID   : long*'''
        return super(IIndexQuery2, self).WithinFeature(pShape)
    Within = IndexProperty(get_Within, None)

class IFeatureIndex2(_esriCarto.IFeatureIndex2):
    _IID = uuid.UUID('bc2e4428-1311-42fb-b364-0aa46f03a1ac')

    def __init__(self, *args, **kw):
        super(IFeatureIndex2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FeatureClass(self, _arg1):
        '''Method IFeatureIndex2.putref_FeatureClass

           INPUT
            _arg1               : IFeatureClass*'''
        return super(IFeatureIndex2, self).putref_FeatureClass(_arg1)
    def putref_FeatureCursor(self, _arg1):
        '''Method IFeatureIndex2.putref_FeatureCursor

           INPUT
            _arg1               : IFeatureCursor*'''
        return super(IFeatureIndex2, self).putref_FeatureCursor(_arg1)
    def Index(self, pTrackCancel, pQueryingGeometryFullExtent):
        '''Method IFeatureIndex2.Index

           INPUTS
            pTrackCancel        : ITrackCancel*
            pQueryingGeometryFullExtent: IEnvelope*'''
        return super(IFeatureIndex2, self).Index(pTrackCancel, pQueryingGeometryFullExtent)
    def get_OutputSpatialReference(self, FieldName):
        '''Method IFeatureIndex2.get_OutputSpatialReference

           INPUT
            FieldName           : BSTR

           OUTPUT
            OutputSpatialReference: ISpatialReference**'''
        return super(IFeatureIndex2, self).get_OutputSpatialReference(FieldName)
    def putref_OutputSpatialReference(self, FieldName, OutputSpatialReference):
        '''Method IFeatureIndex2.putref_OutputSpatialReference

           INPUTS
            FieldName           : BSTR
            OutputSpatialReference: ISpatialReference*'''
        return super(IFeatureIndex2, self).putref_OutputSpatialReference(FieldName, OutputSpatialReference)
    FeatureClass = property(None, putref_FeatureClass, None)
    FeatureCursor = property(None, putref_FeatureCursor, None)
    OutputSpatialReference = property(None, putref_OutputSpatialReference, None)
    OutputSpatialReference = IndexProperty(get_OutputSpatialReference, None)

class IBasicMapIdentifyObject(_esriCarto.IBasicMapIdentifyObject):
    _IID = uuid.UUID('976d826b-c8ab-11d4-80f6-00c04fa0adf8')

    def __init__(self, *args, **kw):
        super(IBasicMapIdentifyObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_BasicMap(self, _arg1):
        '''Method IBasicMapIdentifyObject.putref_BasicMap

           INPUT
            _arg1               : IBasicMap*'''
        return super(IBasicMapIdentifyObject, self).putref_BasicMap(_arg1)
    BasicMap = property(None, putref_BasicMap, None)

class IBasicGeoprocessor(_esriCarto.IBasicGeoprocessor):
    _IID = uuid.UUID('4c1fd611-f3a3-11d3-9fde-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IBasicGeoprocessor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_CancelTracker(self, _arg1):
        '''Method IBasicGeoprocessor.putref_CancelTracker

           INPUT
            _arg1               : ITrackCancel*'''
        return super(IBasicGeoprocessor, self).putref_CancelTracker(_arg1)
    def get_SpatialReference(self):
        '''Method IBasicGeoprocessor.get_SpatialReference

           OUTPUT
            ppSpatialRef        : ISpatialReference**'''
        return super(IBasicGeoprocessor, self).get_SpatialReference()
    def put_SpatialReference(self, ppSpatialRef):
        '''Method IBasicGeoprocessor.put_SpatialReference

           INPUT
            ppSpatialRef        : ISpatialReference*'''
        return super(IBasicGeoprocessor, self).put_SpatialReference(ppSpatialRef)
    def Dissolve(self, inputTable, useSelected, dissolveField, summaryFields, outputName):
        '''Method IBasicGeoprocessor.Dissolve

           INPUTS
            inputTable          : ITable*
            useSelected         : VARIANT_BOOL
            dissolveField       : BSTR
            summaryFields       : BSTR
            outputName          : IDatasetName*

           OUTPUT
            resultTable         : ITable**'''
        return super(IBasicGeoprocessor, self).Dissolve(inputTable, useSelected, dissolveField, summaryFields, outputName)
    def Merge(self, tables, fieldsTable, outputName):
        '''Method IBasicGeoprocessor.Merge

           INPUTS
            tables              : IArray*
            fieldsTable         : ITable*
            outputName          : IFeatureClassName*

           OUTPUT
            resultFC            : IFeatureClass**'''
        return super(IBasicGeoprocessor, self).Merge(tables, fieldsTable, outputName)
    def Clip(self, inputTable, useSelectedInput, clipTable, useSelectedClip, Tolerance, outputName):
        '''Method IBasicGeoprocessor.Clip

           INPUTS
            inputTable          : ITable*
            useSelectedInput    : VARIANT_BOOL
            clipTable           : ITable*
            useSelectedClip     : VARIANT_BOOL
            Tolerance           : double
            outputName          : IFeatureClassName*

           OUTPUT
            resultFC            : IFeatureClass**'''
        return super(IBasicGeoprocessor, self).Clip(inputTable, useSelectedInput, clipTable, useSelectedClip, Tolerance, outputName)
    def Intersect(self, inputTable, useSelectedInput, overlayTable, useSelectedOverlay, Tolerance, outputName):
        '''Method IBasicGeoprocessor.Intersect

           INPUTS
            inputTable          : ITable*
            useSelectedInput    : VARIANT_BOOL
            overlayTable        : ITable*
            useSelectedOverlay  : VARIANT_BOOL
            Tolerance           : double
            outputName          : IFeatureClassName*

           OUTPUT
            resultFC            : IFeatureClass**'''
        return super(IBasicGeoprocessor, self).Intersect(inputTable, useSelectedInput, overlayTable, useSelectedOverlay, Tolerance, outputName)
    def Union(self, inputTable, useSelectedInput, overlayTable, useSelectedOverlay, Tolerance, outputName):
        '''Method IBasicGeoprocessor.Union

           INPUTS
            inputTable          : ITable*
            useSelectedInput    : VARIANT_BOOL
            overlayTable        : ITable*
            useSelectedOverlay  : VARIANT_BOOL
            Tolerance           : double
            outputName          : IFeatureClassName*

           OUTPUT
            resultFC            : IFeatureClass**'''
        return super(IBasicGeoprocessor, self).Union(inputTable, useSelectedInput, overlayTable, useSelectedOverlay, Tolerance, outputName)
    CancelTracker = property(None, putref_CancelTracker, None)
    SpatialReference = property(get_SpatialReference, put_SpatialReference, None)

class IMapGeographicTransformations(_esriCarto.IMapGeographicTransformations):
    _IID = uuid.UUID('24420050-03fe-11d4-9fe9-00c04f6bc78e')
    def get_GeographicTransformations(self):
        '''Method IMapGeographicTransformations.get_GeographicTransformations

           OUTPUT
            GTs                 : IGeoTransformationOperationSet**'''
        return super(IMapGeographicTransformations, self).get_GeographicTransformations()
    GeographicTransformations = property(get_GeographicTransformations, None, None)

class IViewRefresh(_esriCarto.IViewRefresh):
    _IID = uuid.UUID('5f78435a-7443-4195-beb2-caefa63433d8')

    def __init__(self, *args, **kw):
        super(IViewRefresh, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Drawing(self):
        '''Method IViewRefresh.get_Drawing

           OUTPUT
            Drawing             : VARIANT_BOOL*'''
        return super(IViewRefresh, self).get_Drawing()
    def get_ProgressiveDrawing(self):
        '''Method IViewRefresh.get_ProgressiveDrawing

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IViewRefresh, self).get_ProgressiveDrawing()
    def put_ProgressiveDrawing(self, flag):
        '''Method IViewRefresh.put_ProgressiveDrawing

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IViewRefresh, self).put_ProgressiveDrawing(flag)
    def Refresh(self):
        '''Method IViewRefresh.Refresh'''
        return super(IViewRefresh, self).Refresh()
    def PartialRefresh(self, phase, Data, envelope):
        '''Method IViewRefresh.PartialRefresh

           INPUTS
            phase               : esriViewDrawPhase
            Data                : IUnknown*
            envelope            : IEnvelope*'''
        return super(IViewRefresh, self).PartialRefresh(phase, Data, envelope)
    def PartialRefreshShape(self, phase, Data, Geometry, symbolSizePoints):
        '''Method IViewRefresh.PartialRefreshShape

           INPUTS
            phase               : esriViewDrawPhase
            Data                : IUnknown*
            Geometry            : IGeometry*
            symbolSizePoints    : double'''
        return super(IViewRefresh, self).PartialRefreshShape(phase, Data, Geometry, symbolSizePoints)
    def AnimationRefresh(self, phase, Data, envelope):
        '''Method IViewRefresh.AnimationRefresh

           INPUTS
            phase               : esriViewDrawPhase
            Data                : IUnknown*
            envelope            : IEnvelope*'''
        return super(IViewRefresh, self).AnimationRefresh(phase, Data, envelope)
    def AnimationRefreshShape(self, phase, Data, Geometry, symbolSizePoints):
        '''Method IViewRefresh.AnimationRefreshShape

           INPUTS
            phase               : esriViewDrawPhase
            Data                : IUnknown*
            Geometry            : IGeometry*
            symbolSizePoints    : double'''
        return super(IViewRefresh, self).AnimationRefreshShape(phase, Data, Geometry, symbolSizePoints)
    def RefreshItem(self, Data):
        '''Method IViewRefresh.RefreshItem

           INPUT
            Data                : IUnknown*'''
        return super(IViewRefresh, self).RefreshItem(Data)
    def RefreshCaches(self):
        '''Method IViewRefresh.RefreshCaches'''
        return super(IViewRefresh, self).RefreshCaches()
    Drawing = property(get_Drawing, None, None)
    ProgressiveDrawing = property(get_ProgressiveDrawing, put_ProgressiveDrawing, None)

class IInvalidArea2(_esriCarto.IInvalidArea2):
    _IID = uuid.UUID('fcd50e05-696b-49a5-8872-2f43453fcd2f')
    def AddFeature(self, Feature, Symbol):
        '''Method IInvalidArea2.AddFeature

           INPUTS
            Feature             : IFeature*
            Symbol              : ISymbol*'''
        return super(IInvalidArea2, self).AddFeature(Feature, Symbol)

class IInvalidArea3(_esriCarto.IInvalidArea3):
    _IID = uuid.UUID('34ddb0ec-4d41-4747-9507-d32abe9feee8')
    def InvalidateEx(self, screenCache, symSizePoints):
        '''Method IInvalidArea3.InvalidateEx

           INPUTS
            screenCache         : short
            symSizePoints       : double'''
        return super(IInvalidArea3, self).InvalidateEx(screenCache, symSizePoints)
    def AddFeature(self, Feature, Symbol):
        '''Method IInvalidArea2.AddFeature (from IInvalidArea2)

           INPUTS
            Feature             : IFeature*
            Symbol              : ISymbol*'''
        return super(IInvalidArea3, self).AddFeature(Feature, Symbol)

class ITableFactory(_esriCarto.ITableFactory):
    _IID = uuid.UUID('7e8f8cbf-0dd6-47e1-bbb8-b049a6ec0267')
    def get_PublicName(self):
        '''Method ITableFactory.get_PublicName

           OUTPUT
            Name                : BSTR*'''
        return super(ITableFactory, self).get_PublicName()
    def get_TableCategory(self):
        '''Method ITableFactory.get_TableCategory

           OUTPUT
            Category            : BSTR*'''
        return super(ITableFactory, self).get_TableCategory()
    def LoadTables(self):
        '''Method ITableFactory.LoadTables

           OUTPUT
            tables              : IEnumTable**'''
        return super(ITableFactory, self).LoadTables()
    def get_CanCreate(self, inputObject):
        '''Method ITableFactory.get_CanCreate

           INPUT
            inputObject         : IUnknown*

           OUTPUT
            ok                  : VARIANT_BOOL*'''
        return super(ITableFactory, self).get_CanCreate(inputObject)
    def Create(self, inputObject):
        '''Method ITableFactory.Create

           INPUT
            inputObject         : IUnknown*

           OUTPUT
            tables              : IEnumTable**'''
        return super(ITableFactory, self).Create(inputObject)
    PublicName = property(get_PublicName, None, None)
    TableCategory = property(get_TableCategory, None, None)
    CanCreate = IndexProperty(get_CanCreate, None)

class ILODInfo(_esriCarto.ILODInfo):
    _IID = uuid.UUID('757c37ed-eec5-48a6-b48c-c8600ce8037e')

    def __init__(self, *args, **kw):
        super(ILODInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LevelID(self):
        '''Method ILODInfo.get_LevelID

           OUTPUT
            pLevelID            : long*'''
        return super(ILODInfo, self).get_LevelID()
    def put_LevelID(self, pLevelID):
        '''Method ILODInfo.put_LevelID

           INPUT
            pLevelID            : long'''
        return super(ILODInfo, self).put_LevelID(pLevelID)
    def get_Scale(self):
        '''Method ILODInfo.get_Scale

           OUTPUT
            pScale              : double*'''
        return super(ILODInfo, self).get_Scale()
    def put_Scale(self, pScale):
        '''Method ILODInfo.put_Scale

           INPUT
            pScale              : double'''
        return super(ILODInfo, self).put_Scale(pScale)
    def get_Resolution(self):
        '''Method ILODInfo.get_Resolution

           OUTPUT
            pResolution         : double*'''
        return super(ILODInfo, self).get_Resolution()
    def put_Resolution(self, pResolution):
        '''Method ILODInfo.put_Resolution

           INPUT
            pResolution         : double'''
        return super(ILODInfo, self).put_Resolution(pResolution)
    LevelID = property(get_LevelID, put_LevelID, None)
    Resolution = property(get_Resolution, put_Resolution, None)
    Scale = property(get_Scale, put_Scale, None)

class ILODInfos(_esriCarto.ILODInfos):
    _IID = uuid.UUID('ccbc4cad-4c92-43b8-b675-999e6c2d98dc')
    def get_Count(self):
        '''Method ILODInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(ILODInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method ILODInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppLODInfo           : ILODInfo**'''
        return super(ILODInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ILODInfos.Remove

           INPUT
            Index               : long'''
        return super(ILODInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method ILODInfos.RemoveAll'''
        return super(ILODInfos, self).RemoveAll()
    def Add(self, pLODInfo):
        '''Method ILODInfos.Add

           INPUT
            pLODInfo            : ILODInfo*'''
        return super(ILODInfos, self).Add(pLODInfo)
    def Insert(self, Index, pLODInfo):
        '''Method ILODInfos.Insert

           INPUTS
            Index               : long
            pLODInfo            : ILODInfo*'''
        return super(ILODInfos, self).Insert(Index, pLODInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ILayerCacheInfo(_esriCarto.ILayerCacheInfo):
    _IID = uuid.UUID('2b26eb3e-0422-43df-8ce9-cd90317c2605')

    def __init__(self, *args, **kw):
        super(ILayerCacheInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method ILayerCacheInfo.get_ID

           OUTPUT
            pLayerID            : long*'''
        return super(ILayerCacheInfo, self).get_ID()
    def put_ID(self, pLayerID):
        '''Method ILayerCacheInfo.put_ID

           INPUT
            pLayerID            : long'''
        return super(ILayerCacheInfo, self).put_ID(pLayerID)
    def get_HasCache(self):
        '''Method ILayerCacheInfo.get_HasCache

           OUTPUT
            pScale              : VARIANT_BOOL*'''
        return super(ILayerCacheInfo, self).get_HasCache()
    def put_HasCache(self, pScale):
        '''Method ILayerCacheInfo.put_HasCache

           INPUT
            pScale              : VARIANT_BOOL'''
        return super(ILayerCacheInfo, self).put_HasCache(pScale)
    HasCache = property(get_HasCache, put_HasCache, None)
    ID = property(get_ID, put_ID, None)

class ILayerCacheInfos(_esriCarto.ILayerCacheInfos):
    _IID = uuid.UUID('8533c65d-9ad3-4f5b-80b9-e0a50199df2d')
    def get_Count(self):
        '''Method ILayerCacheInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(ILayerCacheInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method ILayerCacheInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppLayerCacheInfo    : ILayerCacheInfo**'''
        return super(ILayerCacheInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ILayerCacheInfos.Remove

           INPUT
            Index               : long'''
        return super(ILayerCacheInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method ILayerCacheInfos.RemoveAll'''
        return super(ILayerCacheInfos, self).RemoveAll()
    def Add(self, pLayerCacheInfo):
        '''Method ILayerCacheInfos.Add

           INPUT
            pLayerCacheInfo     : ILayerCacheInfo*'''
        return super(ILayerCacheInfos, self).Add(pLayerCacheInfo)
    def Insert(self, Index, pLayerCacheInfo):
        '''Method ILayerCacheInfos.Insert

           INPUTS
            Index               : long
            pLayerCacheInfo     : ILayerCacheInfo*'''
        return super(ILayerCacheInfos, self).Insert(Index, pLayerCacheInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ICacheStorageInfo(_esriCarto.ICacheStorageInfo):
    _IID = uuid.UUID('eb364386-be9e-4ff0-b4eb-1033467a5287')

    def __init__(self, *args, **kw):
        super(ICacheStorageInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StorageFormat(self):
        '''Method ICacheStorageInfo.get_StorageFormat

           OUTPUT
            pFormat             : esriMapCacheStorageFormat*'''
        return super(ICacheStorageInfo, self).get_StorageFormat()
    def put_StorageFormat(self, pFormat):
        '''Method ICacheStorageInfo.put_StorageFormat

           INPUT
            pFormat             : esriMapCacheStorageFormat'''
        return super(ICacheStorageInfo, self).put_StorageFormat(pFormat)
    def get_PacketSize(self):
        '''Method ICacheStorageInfo.get_PacketSize

           OUTPUT
            pPacketSize         : long*'''
        return super(ICacheStorageInfo, self).get_PacketSize()
    def put_PacketSize(self, pPacketSize):
        '''Method ICacheStorageInfo.put_PacketSize

           INPUT
            pPacketSize         : long'''
        return super(ICacheStorageInfo, self).put_PacketSize(pPacketSize)
    PacketSize = property(get_PacketSize, put_PacketSize, None)
    StorageFormat = property(get_StorageFormat, put_StorageFormat, None)

class ICacheDatasetInfo(_esriCarto.ICacheDatasetInfo):
    _IID = uuid.UUID('6d3db88a-6d14-458a-a7cb-045abbed6d6d')

    def __init__(self, *args, **kw):
        super(ICacheDatasetInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Extent(self):
        '''Method ICacheDatasetInfo.get_Extent

           OUTPUT
            ppCacheExtent       : IEnvelope**'''
        return super(ICacheDatasetInfo, self).get_Extent()
    def putref_Extent(self, ppCacheExtent):
        '''Method ICacheDatasetInfo.putref_Extent

           INPUT
            ppCacheExtent       : IEnvelope*'''
        return super(ICacheDatasetInfo, self).putref_Extent(ppCacheExtent)
    Extent = property(get_Extent, putref_Extent, None)

class ITileCacheInfo(_esriCarto.ITileCacheInfo):
    _IID = uuid.UUID('f92f8c28-7efa-4da3-a126-5f2d2f117280')

    def __init__(self, *args, **kw):
        super(ITileCacheInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method ITileCacheInfo.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(ITileCacheInfo, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method ITileCacheInfo.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(ITileCacheInfo, self).putref_SpatialReference(ppSpatialReference)
    def get_Origin(self):
        '''Method ITileCacheInfo.get_Origin

           OUTPUT
            ppOrigin            : IPoint**'''
        return super(ITileCacheInfo, self).get_Origin()
    def put_Origin(self, ppOrigin):
        '''Method ITileCacheInfo.put_Origin

           INPUT
            ppOrigin            : IPoint*'''
        return super(ITileCacheInfo, self).put_Origin(ppOrigin)
    def get_TileCols(self):
        '''Method ITileCacheInfo.get_TileCols

           OUTPUT
            pNumTileCols        : long*'''
        return super(ITileCacheInfo, self).get_TileCols()
    def put_TileCols(self, pNumTileCols):
        '''Method ITileCacheInfo.put_TileCols

           INPUT
            pNumTileCols        : long'''
        return super(ITileCacheInfo, self).put_TileCols(pNumTileCols)
    def get_TileRows(self):
        '''Method ITileCacheInfo.get_TileRows

           OUTPUT
            pNumTileRows        : long*'''
        return super(ITileCacheInfo, self).get_TileRows()
    def put_TileRows(self, pNumTileRows):
        '''Method ITileCacheInfo.put_TileRows

           INPUT
            pNumTileRows        : long'''
        return super(ITileCacheInfo, self).put_TileRows(pNumTileRows)
    def get_Dpi(self):
        '''Method ITileCacheInfo.get_Dpi

           OUTPUT
            pDpi                : long*'''
        return super(ITileCacheInfo, self).get_Dpi()
    def put_Dpi(self, pDpi):
        '''Method ITileCacheInfo.put_Dpi

           INPUT
            pDpi                : long'''
        return super(ITileCacheInfo, self).put_Dpi(pDpi)
    def get_LODInfos(self):
        '''Method ITileCacheInfo.get_LODInfos

           OUTPUT
            ppLODInfos          : ILODInfos**'''
        return super(ITileCacheInfo, self).get_LODInfos()
    def putref_LODInfos(self, ppLODInfos):
        '''Method ITileCacheInfo.putref_LODInfos

           INPUT
            ppLODInfos          : ILODInfos*'''
        return super(ITileCacheInfo, self).putref_LODInfos(ppLODInfos)
    def ComputeResolutions(self):
        '''Method ITileCacheInfo.ComputeResolutions'''
        return super(ITileCacheInfo, self).ComputeResolutions()
    def ComputeScales(self):
        '''Method ITileCacheInfo.ComputeScales'''
        return super(ITileCacheInfo, self).ComputeScales()
    Dpi = property(get_Dpi, put_Dpi, None)
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    Origin = property(get_Origin, put_Origin, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TileCols = property(get_TileCols, put_TileCols, None)
    TileRows = property(get_TileRows, put_TileRows, None)

class ITileImageInfo(_esriCarto.ITileImageInfo):
    _IID = uuid.UUID('035f6865-018a-4e22-bca7-e842dc37667d')

    def __init__(self, *args, **kw):
        super(ITileImageInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Format(self):
        '''Method ITileImageInfo.get_Format

           OUTPUT
            pFormat             : BSTR*'''
        return super(ITileImageInfo, self).get_Format()
    def put_Format(self, pFormat):
        '''Method ITileImageInfo.put_Format

           INPUT
            pFormat             : BSTR'''
        return super(ITileImageInfo, self).put_Format(pFormat)
    def get_CompressionQuality(self):
        '''Method ITileImageInfo.get_CompressionQuality

           OUTPUT
            pQuality            : long*'''
        return super(ITileImageInfo, self).get_CompressionQuality()
    def put_CompressionQuality(self, pQuality):
        '''Method ITileImageInfo.put_CompressionQuality

           INPUT
            pQuality            : long'''
        return super(ITileImageInfo, self).put_CompressionQuality(pQuality)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    Format = property(get_Format, put_Format, None)

class ITileImageInfo2(_esriCarto.ITileImageInfo2):
    _IID = uuid.UUID('5c65903b-9bad-4d7f-bda0-105bb2376105')

    def __init__(self, *args, **kw):
        super(ITileImageInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Antialiasing(self):
        '''Method ITileImageInfo2.get_Antialiasing

           OUTPUT
            pAntialiasing       : VARIANT_BOOL*'''
        return super(ITileImageInfo2, self).get_Antialiasing()
    def put_Antialiasing(self, pAntialiasing):
        '''Method ITileImageInfo2.put_Antialiasing

           INPUT
            pAntialiasing       : VARIANT_BOOL'''
        return super(ITileImageInfo2, self).put_Antialiasing(pAntialiasing)
    def get_Format(self):
        '''Method ITileImageInfo.get_Format (from ITileImageInfo)

           OUTPUT
            pFormat             : BSTR*'''
        return super(ITileImageInfo2, self).get_Format()
    def put_Format(self, pFormat):
        '''Method ITileImageInfo.put_Format (from ITileImageInfo)

           INPUT
            pFormat             : BSTR'''
        return super(ITileImageInfo2, self).put_Format(pFormat)
    def get_CompressionQuality(self):
        '''Method ITileImageInfo.get_CompressionQuality (from ITileImageInfo)

           OUTPUT
            pQuality            : long*'''
        return super(ITileImageInfo2, self).get_CompressionQuality()
    def put_CompressionQuality(self, pQuality):
        '''Method ITileImageInfo.put_CompressionQuality (from ITileImageInfo)

           INPUT
            pQuality            : long'''
        return super(ITileImageInfo2, self).put_CompressionQuality(pQuality)
    Antialiasing = property(get_Antialiasing, put_Antialiasing, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    Format = property(get_Format, put_Format, None)

class ICacheControlInfo(_esriCarto.ICacheControlInfo):
    _IID = uuid.UUID('095f6f1b-178f-49ae-9b05-de919b2c7e59')

    def __init__(self, *args, **kw):
        super(ICacheControlInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClientCachingAllowed(self):
        '''Method ICacheControlInfo.get_ClientCachingAllowed

           OUTPUT
            pClientCachingAllowed: VARIANT_BOOL*'''
        return super(ICacheControlInfo, self).get_ClientCachingAllowed()
    def put_ClientCachingAllowed(self, pClientCachingAllowed):
        '''Method ICacheControlInfo.put_ClientCachingAllowed

           INPUT
            pClientCachingAllowed: VARIANT_BOOL'''
        return super(ICacheControlInfo, self).put_ClientCachingAllowed(pClientCachingAllowed)
    ClientCachingAllowed = property(get_ClientCachingAllowed, put_ClientCachingAllowed, None)

class ICacheDescriptionInfo(_esriCarto.ICacheDescriptionInfo):
    _IID = uuid.UUID('55b6bb3a-d9fc-4d43-a1c7-826a77a6f6f4')

    def __init__(self, *args, **kw):
        super(ICacheDescriptionInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TileCacheInfo(self):
        '''Method ICacheDescriptionInfo.get_TileCacheInfo

           OUTPUT
            ppTileCacheInfo     : ITileCacheInfo**'''
        return super(ICacheDescriptionInfo, self).get_TileCacheInfo()
    def putref_TileCacheInfo(self, ppTileCacheInfo):
        '''Method ICacheDescriptionInfo.putref_TileCacheInfo

           INPUT
            ppTileCacheInfo     : ITileCacheInfo*'''
        return super(ICacheDescriptionInfo, self).putref_TileCacheInfo(ppTileCacheInfo)
    def get_TileImageInfo(self):
        '''Method ICacheDescriptionInfo.get_TileImageInfo

           OUTPUT
            ppTileIamgeInfo     : ITileImageInfo**'''
        return super(ICacheDescriptionInfo, self).get_TileImageInfo()
    def putref_TileImageInfo(self, ppTileIamgeInfo):
        '''Method ICacheDescriptionInfo.putref_TileImageInfo

           INPUT
            ppTileIamgeInfo     : ITileImageInfo*'''
        return super(ICacheDescriptionInfo, self).putref_TileImageInfo(ppTileIamgeInfo)
    def get_CacheControlInfo(self):
        '''Method ICacheDescriptionInfo.get_CacheControlInfo

           OUTPUT
            ppCacheControlInfo  : ICacheControlInfo**'''
        return super(ICacheDescriptionInfo, self).get_CacheControlInfo()
    def putref_CacheControlInfo(self, ppCacheControlInfo):
        '''Method ICacheDescriptionInfo.putref_CacheControlInfo

           INPUT
            ppCacheControlInfo  : ICacheControlInfo*'''
        return super(ICacheDescriptionInfo, self).putref_CacheControlInfo(ppCacheControlInfo)
    def get_LayerCacheInfos(self):
        '''Method ICacheDescriptionInfo.get_LayerCacheInfos

           OUTPUT
            ppLayerCacheInfos   : ILayerCacheInfos**'''
        return super(ICacheDescriptionInfo, self).get_LayerCacheInfos()
    def putref_LayerCacheInfos(self, ppLayerCacheInfos):
        '''Method ICacheDescriptionInfo.putref_LayerCacheInfos

           INPUT
            ppLayerCacheInfos   : ILayerCacheInfos*'''
        return super(ICacheDescriptionInfo, self).putref_LayerCacheInfos(ppLayerCacheInfos)
    def get_CacheType(self):
        '''Method ICacheDescriptionInfo.get_CacheType

           OUTPUT
            pServiceType        : esriCachedMapServiceType*'''
        return super(ICacheDescriptionInfo, self).get_CacheType()
    def put_CacheType(self, pServiceType):
        '''Method ICacheDescriptionInfo.put_CacheType

           INPUT
            pServiceType        : esriCachedMapServiceType'''
        return super(ICacheDescriptionInfo, self).put_CacheType(pServiceType)
    CacheControlInfo = property(get_CacheControlInfo, putref_CacheControlInfo, None)
    CacheType = property(get_CacheType, put_CacheType, None)
    LayerCacheInfos = property(get_LayerCacheInfos, putref_LayerCacheInfos, None)
    TileCacheInfo = property(get_TileCacheInfo, putref_TileCacheInfo, None)
    TileImageInfo = property(get_TileImageInfo, putref_TileImageInfo, None)

class ICacheDescriptionInfo2(_esriCarto.ICacheDescriptionInfo2):
    _IID = uuid.UUID('29e8a1dd-6b00-43db-afcc-62dce8b64091')

    def __init__(self, *args, **kw):
        super(ICacheDescriptionInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CacheStorageInfo(self):
        '''Method ICacheDescriptionInfo2.get_CacheStorageInfo

           OUTPUT
            ppCacheStorageInfo  : ICacheStorageInfo**'''
        return super(ICacheDescriptionInfo2, self).get_CacheStorageInfo()
    def putref_CacheStorageInfo(self, ppCacheStorageInfo):
        '''Method ICacheDescriptionInfo2.putref_CacheStorageInfo

           INPUT
            ppCacheStorageInfo  : ICacheStorageInfo*'''
        return super(ICacheDescriptionInfo2, self).putref_CacheStorageInfo(ppCacheStorageInfo)
    def get_TileCacheInfo(self):
        '''Method ICacheDescriptionInfo.get_TileCacheInfo (from ICacheDescriptionInfo)

           OUTPUT
            ppTileCacheInfo     : ITileCacheInfo**'''
        return super(ICacheDescriptionInfo2, self).get_TileCacheInfo()
    def putref_TileCacheInfo(self, ppTileCacheInfo):
        '''Method ICacheDescriptionInfo.putref_TileCacheInfo (from ICacheDescriptionInfo)

           INPUT
            ppTileCacheInfo     : ITileCacheInfo*'''
        return super(ICacheDescriptionInfo2, self).putref_TileCacheInfo(ppTileCacheInfo)
    def get_TileImageInfo(self):
        '''Method ICacheDescriptionInfo.get_TileImageInfo (from ICacheDescriptionInfo)

           OUTPUT
            ppTileIamgeInfo     : ITileImageInfo**'''
        return super(ICacheDescriptionInfo2, self).get_TileImageInfo()
    def putref_TileImageInfo(self, ppTileIamgeInfo):
        '''Method ICacheDescriptionInfo.putref_TileImageInfo (from ICacheDescriptionInfo)

           INPUT
            ppTileIamgeInfo     : ITileImageInfo*'''
        return super(ICacheDescriptionInfo2, self).putref_TileImageInfo(ppTileIamgeInfo)
    def get_CacheControlInfo(self):
        '''Method ICacheDescriptionInfo.get_CacheControlInfo (from ICacheDescriptionInfo)

           OUTPUT
            ppCacheControlInfo  : ICacheControlInfo**'''
        return super(ICacheDescriptionInfo2, self).get_CacheControlInfo()
    def putref_CacheControlInfo(self, ppCacheControlInfo):
        '''Method ICacheDescriptionInfo.putref_CacheControlInfo (from ICacheDescriptionInfo)

           INPUT
            ppCacheControlInfo  : ICacheControlInfo*'''
        return super(ICacheDescriptionInfo2, self).putref_CacheControlInfo(ppCacheControlInfo)
    def get_LayerCacheInfos(self):
        '''Method ICacheDescriptionInfo.get_LayerCacheInfos (from ICacheDescriptionInfo)

           OUTPUT
            ppLayerCacheInfos   : ILayerCacheInfos**'''
        return super(ICacheDescriptionInfo2, self).get_LayerCacheInfos()
    def putref_LayerCacheInfos(self, ppLayerCacheInfos):
        '''Method ICacheDescriptionInfo.putref_LayerCacheInfos (from ICacheDescriptionInfo)

           INPUT
            ppLayerCacheInfos   : ILayerCacheInfos*'''
        return super(ICacheDescriptionInfo2, self).putref_LayerCacheInfos(ppLayerCacheInfos)
    def get_CacheType(self):
        '''Method ICacheDescriptionInfo.get_CacheType (from ICacheDescriptionInfo)

           OUTPUT
            pServiceType        : esriCachedMapServiceType*'''
        return super(ICacheDescriptionInfo2, self).get_CacheType()
    def put_CacheType(self, pServiceType):
        '''Method ICacheDescriptionInfo.put_CacheType (from ICacheDescriptionInfo)

           INPUT
            pServiceType        : esriCachedMapServiceType'''
        return super(ICacheDescriptionInfo2, self).put_CacheType(pServiceType)
    CacheControlInfo = property(get_CacheControlInfo, putref_CacheControlInfo, None)
    CacheStorageInfo = property(get_CacheStorageInfo, putref_CacheStorageInfo, None)
    CacheType = property(get_CacheType, put_CacheType, None)
    LayerCacheInfos = property(get_LayerCacheInfos, putref_LayerCacheInfos, None)
    TileCacheInfo = property(get_TileCacheInfo, putref_TileCacheInfo, None)
    TileImageInfo = property(get_TileImageInfo, putref_TileImageInfo, None)

class ICacheInfo(_esriCarto.ICacheInfo):
    _IID = uuid.UUID('a8ed7fa5-572b-4668-a6cc-f3ec9e6e06a8')

    def __init__(self, *args, **kw):
        super(ICacheInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TileCacheInfo(self):
        '''Method ICacheInfo.get_TileCacheInfo

           OUTPUT
            ppTileCacheInfo     : ITileCacheInfo**'''
        return super(ICacheInfo, self).get_TileCacheInfo()
    def putref_TileCacheInfo(self, ppTileCacheInfo):
        '''Method ICacheInfo.putref_TileCacheInfo

           INPUT
            ppTileCacheInfo     : ITileCacheInfo*'''
        return super(ICacheInfo, self).putref_TileCacheInfo(ppTileCacheInfo)
    def get_TileImageInfo(self):
        '''Method ICacheInfo.get_TileImageInfo

           OUTPUT
            ppTileImageInfo     : ITileImageInfo**'''
        return super(ICacheInfo, self).get_TileImageInfo()
    def putref_TileImageInfo(self, ppTileImageInfo):
        '''Method ICacheInfo.putref_TileImageInfo

           INPUT
            ppTileImageInfo     : ITileImageInfo*'''
        return super(ICacheInfo, self).putref_TileImageInfo(ppTileImageInfo)
    TileCacheInfo = property(get_TileCacheInfo, putref_TileCacheInfo, None)
    TileImageInfo = property(get_TileImageInfo, putref_TileImageInfo, None)

class ITileCacheStats(_esriCarto.ITileCacheStats):
    _IID = uuid.UUID('d420789a-9089-4ef6-a2ae-fd59efa7a5f3')
    def GetTileRangeAtLevel(self, Level, pGeometry):
        '''Method ITileCacheStats.GetTileRangeAtLevel

           INPUTS
            Level               : long
            pGeometry           : IGeometry*

           OUTPUTS
            tileXMin            : long*
            tileYMin            : long*
            tileXMax            : long*
            tileYMax            : long*'''
        return super(ITileCacheStats, self).GetTileRangeAtLevel(Level, pGeometry)
    def GetTileSizes(self, Level, Row, Column, pTrackCancel):
        '''Method ITileCacheStats.GetTileSizes

           INPUTS
            Level               : long
            Row                 : long
            Column              : long
            pTrackCancel        : ITrackCancel*

           OUTPUTS
            tileCount           : long*
            pSizes              : ILongArray*'''
        return super(ITileCacheStats, self).GetTileSizes(Level, Row, Column, pTrackCancel)

class ICacheInfo2(_esriCarto.ICacheInfo2):
    _IID = uuid.UUID('e8c16c27-cdc1-4954-8461-495cc1f0936b')

    def __init__(self, *args, **kw):
        super(ICacheInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CacheStorageInfo(self):
        '''Method ICacheInfo2.get_CacheStorageInfo

           OUTPUT
            ppCacheStorageInfo  : ICacheStorageInfo**'''
        return super(ICacheInfo2, self).get_CacheStorageInfo()
    def putref_CacheStorageInfo(self, ppCacheStorageInfo):
        '''Method ICacheInfo2.putref_CacheStorageInfo

           INPUT
            ppCacheStorageInfo  : ICacheStorageInfo*'''
        return super(ICacheInfo2, self).putref_CacheStorageInfo(ppCacheStorageInfo)
    def get_TileCacheInfo(self):
        '''Method ICacheInfo.get_TileCacheInfo (from ICacheInfo)

           OUTPUT
            ppTileCacheInfo     : ITileCacheInfo**'''
        return super(ICacheInfo2, self).get_TileCacheInfo()
    def putref_TileCacheInfo(self, ppTileCacheInfo):
        '''Method ICacheInfo.putref_TileCacheInfo (from ICacheInfo)

           INPUT
            ppTileCacheInfo     : ITileCacheInfo*'''
        return super(ICacheInfo2, self).putref_TileCacheInfo(ppTileCacheInfo)
    def get_TileImageInfo(self):
        '''Method ICacheInfo.get_TileImageInfo (from ICacheInfo)

           OUTPUT
            ppTileImageInfo     : ITileImageInfo**'''
        return super(ICacheInfo2, self).get_TileImageInfo()
    def putref_TileImageInfo(self, ppTileImageInfo):
        '''Method ICacheInfo.putref_TileImageInfo (from ICacheInfo)

           INPUT
            ppTileImageInfo     : ITileImageInfo*'''
        return super(ICacheInfo2, self).putref_TileImageInfo(ppTileImageInfo)
    CacheStorageInfo = property(get_CacheStorageInfo, putref_CacheStorageInfo, None)
    TileCacheInfo = property(get_TileCacheInfo, putref_TileCacheInfo, None)
    TileImageInfo = property(get_TileImageInfo, putref_TileImageInfo, None)

class IMapCooker3(_esriCarto.IMapCooker3):
    _IID = uuid.UUID('b77d1a50-aef0-4150-add4-e5d1bc4177d4')

    def __init__(self, *args, **kw):
        super(IMapCooker3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CacheStorageInfo(self):
        '''Method IMapCooker3.get_CacheStorageInfo

           OUTPUT
            ppInfo              : ICacheStorageInfo**'''
        return super(IMapCooker3, self).get_CacheStorageInfo()
    def putref_CacheStorageInfo(self, ppInfo):
        '''Method IMapCooker3.putref_CacheStorageInfo

           INPUT
            ppInfo              : ICacheStorageInfo*'''
        return super(IMapCooker3, self).putref_CacheStorageInfo(ppInfo)
    def get_CacheDatasetInfo(self):
        '''Method IMapCooker3.get_CacheDatasetInfo

           OUTPUT
            ppInfo              : ICacheDatasetInfo**'''
        return super(IMapCooker3, self).get_CacheDatasetInfo()
    def putref_CacheDatasetInfo(self, ppInfo):
        '''Method IMapCooker3.putref_CacheDatasetInfo

           INPUT
            ppInfo              : ICacheDatasetInfo*'''
        return super(IMapCooker3, self).putref_CacheDatasetInfo(ppInfo)
    def WriteTilingSchemeEx(self, pCacheInfo, pTileImageInfo, pCacheStorageInfo, pCacheDatasetInfo, cacheDir, LayerName):
        '''Method IMapCooker3.WriteTilingSchemeEx

           INPUTS
            pCacheInfo          : ITileCacheInfo*
            pTileImageInfo      : ITileImageInfo*
            pCacheStorageInfo   : ICacheStorageInfo*
            pCacheDatasetInfo   : ICacheDatasetInfo*
            cacheDir            : BSTR
            LayerName           : BSTR'''
        return super(IMapCooker3, self).WriteTilingSchemeEx(pCacheInfo, pTileImageInfo, pCacheStorageInfo, pCacheDatasetInfo, cacheDir, LayerName)
    def CleanUPState(self, pMapOrMapServerInfo, pLayerOrMapLayerInfo, pGeometry, pLevels, pTrackCancel):
        '''Method IMapCooker3.CleanUPState

           INPUTS
            pMapOrMapServerInfo : IUnknown*
            pLayerOrMapLayerInfo: IUnknown*
            pGeometry           : IGeometry*
            pLevels             : ILongArray*
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker3, self).CleanUPState(pMapOrMapServerInfo, pLayerOrMapLayerInfo, pGeometry, pLevels, pTrackCancel)
    CacheDatasetInfo = property(get_CacheDatasetInfo, putref_CacheDatasetInfo, None)
    CacheStorageInfo = property(get_CacheStorageInfo, putref_CacheStorageInfo, None)

class ITilesTable(_esriCarto.ITilesTable):
    _IID = uuid.UUID('504dd827-f109-44c3-aa3e-5059219e2ac5')
    def Create(self, levelCacheDir, Format, txStart, txEnd, tyStart, tyEnd):
        '''Method ITilesTable.Create

           INPUTS
            levelCacheDir       : BSTR
            Format              : BSTR
            txStart             : long
            txEnd               : long
            tyStart             : long
            tyEnd               : long'''
        return super(ITilesTable, self).Create(levelCacheDir, Format, txStart, txEnd, tyStart, tyEnd)
    def Delete(self, levelCacheDir, Format, ty, tx):
        '''Method ITilesTable.Delete

           INPUTS
            levelCacheDir       : BSTR
            Format              : BSTR
            ty                  : long
            tx                  : long'''
        return super(ITilesTable, self).Delete(levelCacheDir, Format, ty, tx)
    def Open(self, levelCacheDir, ty, tx, forReadOnly):
        '''Method ITilesTable.Open

           INPUTS
            levelCacheDir       : BSTR
            ty                  : long
            tx                  : long
            forReadOnly         : VARIANT_BOOL'''
        return super(ITilesTable, self).Open(levelCacheDir, ty, tx, forReadOnly)
    def Close(self):
        '''Method ITilesTable.Close'''
        return super(ITilesTable, self).Close()
    def GetOffset(self, ty, tx):
        '''Method ITilesTable.GetOffset

           INPUTS
            ty                  : long
            tx                  : long

           OUTPUT
            pOffset             : long*'''
        return super(ITilesTable, self).GetOffset(ty, tx)
    def InsertTile(self, ty, tx, pStream):
        '''Method ITilesTable.InsertTile

           INPUTS
            ty                  : long
            tx                  : long
            pStream             : IStream*

           OUTPUT
            pOffset             : long*'''
        return super(ITilesTable, self).InsertTile(ty, tx, pStream)
    def QueryTile(self, ty, tx):
        '''Method ITilesTable.QueryTile

           INPUTS
            ty                  : long
            tx                  : long

           OUTPUT
            ppStream            : IStream**'''
        return super(ITilesTable, self).QueryTile(ty, tx)
    def UpdateTile(self, ty, tx, pStream):
        '''Method ITilesTable.UpdateTile

           INPUTS
            ty                  : long
            tx                  : long
            pStream             : IStream*'''
        return super(ITilesTable, self).UpdateTile(ty, tx, pStream)
    def IsLocked(self):
        '''Method ITilesTable.IsLocked

           OUTPUT
            IsLocked            : VARIANT_BOOL*'''
        return super(ITilesTable, self).IsLocked()
    def GetTileCount(self):
        '''Method ITilesTable.GetTileCount

           OUTPUT
            pTileCount          : long*'''
        return super(ITilesTable, self).GetTileCount()
    def Exists(self, layerCacheDir, ty, tx):
        '''Method ITilesTable.Exists

           INPUTS
            layerCacheDir       : BSTR
            ty                  : long
            tx                  : long

           OUTPUT
            pExists             : VARIANT_BOOL*'''
        return super(ITilesTable, self).Exists(layerCacheDir, ty, tx)

class IMapCacheStorageFormatConvertor(_esriCarto.IMapCacheStorageFormatConvertor):
    _IID = uuid.UUID('60e74bea-9935-4116-93fe-90d007bf979d')

    def __init__(self, *args, **kw):
        super(IMapCacheStorageFormatConvertor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TileCachePath(self):
        '''Method IMapCacheStorageFormatConvertor.get_TileCachePath

           OUTPUT
            ppCacheLocation     : BSTR*'''
        return super(IMapCacheStorageFormatConvertor, self).get_TileCachePath()
    def put_TileCachePath(self, ppCacheLocation):
        '''Method IMapCacheStorageFormatConvertor.put_TileCachePath

           INPUT
            ppCacheLocation     : BSTR'''
        return super(IMapCacheStorageFormatConvertor, self).put_TileCachePath(ppCacheLocation)
    def get_CompressedCachePath(self):
        '''Method IMapCacheStorageFormatConvertor.get_CompressedCachePath

           OUTPUT
            ppTargetCacheLocation: BSTR*'''
        return super(IMapCacheStorageFormatConvertor, self).get_CompressedCachePath()
    def put_CompressedCachePath(self, ppTargetCacheLocation):
        '''Method IMapCacheStorageFormatConvertor.put_CompressedCachePath

           INPUT
            ppTargetCacheLocation: BSTR'''
        return super(IMapCacheStorageFormatConvertor, self).put_CompressedCachePath(ppTargetCacheLocation)
    def get_CacheExtent(self):
        '''Method IMapCacheStorageFormatConvertor.get_CacheExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IMapCacheStorageFormatConvertor, self).get_CacheExtent()
    def putref_CacheExtent(self, ppExtent):
        '''Method IMapCacheStorageFormatConvertor.putref_CacheExtent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IMapCacheStorageFormatConvertor, self).putref_CacheExtent(ppExtent)
    def Compress(self, numThreads, LayerName, pTrackCancel, Overwrite):
        '''Method IMapCacheStorageFormatConvertor.Compress

           INPUTS
            numThreads          : long
            LayerName           : BSTR
            pTrackCancel        : ITrackCancel*
            Overwrite           : VARIANT_BOOL'''
        return super(IMapCacheStorageFormatConvertor, self).Compress(numThreads, LayerName, pTrackCancel, Overwrite)
    def Decompress(self, numThreads, LayerName, pTrackCancel, Overwrite):
        '''Method IMapCacheStorageFormatConvertor.Decompress

           INPUTS
            numThreads          : long
            LayerName           : BSTR
            pTrackCancel        : ITrackCancel*
            Overwrite           : VARIANT_BOOL'''
        return super(IMapCacheStorageFormatConvertor, self).Decompress(numThreads, LayerName, pTrackCancel, Overwrite)
    def get_Host(self):
        '''Method IMapCacheStorageFormatConvertor.get_Host

           OUTPUT
            pHost               : BSTR*'''
        return super(IMapCacheStorageFormatConvertor, self).get_Host()
    def put_Host(self, pHost):
        '''Method IMapCacheStorageFormatConvertor.put_Host

           INPUT
            pHost               : BSTR'''
        return super(IMapCacheStorageFormatConvertor, self).put_Host(pHost)
    def get_Service(self):
        '''Method IMapCacheStorageFormatConvertor.get_Service

           OUTPUT
            pService            : BSTR*'''
        return super(IMapCacheStorageFormatConvertor, self).get_Service()
    def put_Service(self, pService):
        '''Method IMapCacheStorageFormatConvertor.put_Service

           INPUT
            pService            : BSTR'''
        return super(IMapCacheStorageFormatConvertor, self).put_Service(pService)
    def get_Dataframe(self):
        '''Method IMapCacheStorageFormatConvertor.get_Dataframe

           OUTPUT
            pDataframe          : BSTR*'''
        return super(IMapCacheStorageFormatConvertor, self).get_Dataframe()
    def put_Dataframe(self, pDataframe):
        '''Method IMapCacheStorageFormatConvertor.put_Dataframe

           INPUT
            pDataframe          : BSTR'''
        return super(IMapCacheStorageFormatConvertor, self).put_Dataframe(pDataframe)
    def get_PacketSize(self):
        '''Method IMapCacheStorageFormatConvertor.get_PacketSize

           OUTPUT
            pPacketSize         : long*'''
        return super(IMapCacheStorageFormatConvertor, self).get_PacketSize()
    def put_PacketSize(self, pPacketSize):
        '''Method IMapCacheStorageFormatConvertor.put_PacketSize

           INPUT
            pPacketSize         : long'''
        return super(IMapCacheStorageFormatConvertor, self).put_PacketSize(pPacketSize)
    CacheExtent = property(get_CacheExtent, putref_CacheExtent, None)
    CompressedCachePath = property(get_CompressedCachePath, put_CompressedCachePath, None)
    Dataframe = property(get_Dataframe, put_Dataframe, None)
    Host = property(get_Host, put_Host, None)
    PacketSize = property(get_PacketSize, put_PacketSize, None)
    Service = property(get_Service, put_Service, None)
    TileCachePath = property(get_TileCachePath, put_TileCachePath, None)

class IMapCacheExporter(_esriCarto.IMapCacheExporter):
    _IID = uuid.UUID('aeaea0dc-e770-4885-b9fd-c47d3e45b171')

    def __init__(self, *args, **kw):
        super(IMapCacheExporter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Host(self):
        '''Method IMapCacheExporter.get_Host

           OUTPUT
            pHost               : BSTR*'''
        return super(IMapCacheExporter, self).get_Host()
    def put_Host(self, pHost):
        '''Method IMapCacheExporter.put_Host

           INPUT
            pHost               : BSTR'''
        return super(IMapCacheExporter, self).put_Host(pHost)
    def get_Service(self):
        '''Method IMapCacheExporter.get_Service

           OUTPUT
            pService            : BSTR*'''
        return super(IMapCacheExporter, self).get_Service()
    def put_Service(self, pService):
        '''Method IMapCacheExporter.put_Service

           INPUT
            pService            : BSTR'''
        return super(IMapCacheExporter, self).put_Service(pService)
    def get_Dataframe(self):
        '''Method IMapCacheExporter.get_Dataframe

           OUTPUT
            pDataframe          : BSTR*'''
        return super(IMapCacheExporter, self).get_Dataframe()
    def put_Dataframe(self, pDataframe):
        '''Method IMapCacheExporter.put_Dataframe

           INPUT
            pDataframe          : BSTR'''
        return super(IMapCacheExporter, self).put_Dataframe(pDataframe)
    def get_TargetCachePath(self):
        '''Method IMapCacheExporter.get_TargetCachePath

           OUTPUT
            ppCacheLocation     : BSTR*'''
        return super(IMapCacheExporter, self).get_TargetCachePath()
    def put_TargetCachePath(self, ppCacheLocation):
        '''Method IMapCacheExporter.put_TargetCachePath

           INPUT
            ppCacheLocation     : BSTR'''
        return super(IMapCacheExporter, self).put_TargetCachePath(ppCacheLocation)
    def Import(self, pLevels, pGeometry, numThreads, pTrackCancel, Overwrite):
        '''Method IMapCacheExporter.Import

           INPUTS
            pLevels             : ILongArray*
            pGeometry           : IGeometry*
            numThreads          : long
            pTrackCancel        : ITrackCancel*
            Overwrite           : VARIANT_BOOL'''
        return super(IMapCacheExporter, self).Import(pLevels, pGeometry, numThreads, pTrackCancel, Overwrite)
    def Export(self, pLevels, pGeometry, numThreads, pTrackCancel, pCacheStorageInfo, Overwrite):
        '''Method IMapCacheExporter.Export

           INPUTS
            pLevels             : ILongArray*
            pGeometry           : IGeometry*
            numThreads          : long
            pTrackCancel        : ITrackCancel*
            pCacheStorageInfo   : ICacheStorageInfo*
            Overwrite           : VARIANT_BOOL'''
        return super(IMapCacheExporter, self).Export(pLevels, pGeometry, numThreads, pTrackCancel, pCacheStorageInfo, Overwrite)
    Dataframe = property(get_Dataframe, put_Dataframe, None)
    Host = property(get_Host, put_Host, None)
    Service = property(get_Service, put_Service, None)
    TargetCachePath = property(get_TargetCachePath, put_TargetCachePath, None)

class IMapCacheToRasterFunctionArgument(_esriCarto.IMapCacheToRasterFunctionArgument):
    _IID = uuid.UUID('2dd8eb38-c743-41b4-8483-c26950ce1723')

    def __init__(self, *args, **kw):
        super(IMapCacheToRasterFunctionArgument, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CacheLocation(self, pCachePath):
        '''Method IMapCacheToRasterFunctionArgument.put_CacheLocation

           INPUT
            pCachePath          : BSTR'''
        return super(IMapCacheToRasterFunctionArgument, self).put_CacheLocation(pCachePath)
    def get_CacheLocation(self):
        '''Method IMapCacheToRasterFunctionArgument.get_CacheLocation

           OUTPUT
            pCachePath          : BSTR*'''
        return super(IMapCacheToRasterFunctionArgument, self).get_CacheLocation()
    def putref_Extent(self, ppEnvelope):
        '''Method IMapCacheToRasterFunctionArgument.putref_Extent

           INPUT
            ppEnvelope          : IEnvelope*'''
        return super(IMapCacheToRasterFunctionArgument, self).putref_Extent(ppEnvelope)
    def get_Extent(self):
        '''Method IMapCacheToRasterFunctionArgument.get_Extent

           OUTPUT
            ppEnvelope          : IEnvelope**'''
        return super(IMapCacheToRasterFunctionArgument, self).get_Extent()
    def putref_CacheTable(self, ppCacheTable):
        '''Method IMapCacheToRasterFunctionArgument.putref_CacheTable

           INPUT
            ppCacheTable        : ITable*'''
        return super(IMapCacheToRasterFunctionArgument, self).putref_CacheTable(ppCacheTable)
    def get_CacheTable(self):
        '''Method IMapCacheToRasterFunctionArgument.get_CacheTable

           OUTPUT
            ppCacheTable        : ITable**'''
        return super(IMapCacheToRasterFunctionArgument, self).get_CacheTable()
    def putref_CacheDataTable(self, ppCacheDataTable):
        '''Method IMapCacheToRasterFunctionArgument.putref_CacheDataTable

           INPUT
            ppCacheDataTable    : ITable*'''
        return super(IMapCacheToRasterFunctionArgument, self).putref_CacheDataTable(ppCacheDataTable)
    def get_CacheDataTable(self):
        '''Method IMapCacheToRasterFunctionArgument.get_CacheDataTable

           OUTPUT
            ppCacheDataTable    : ITable**'''
        return super(IMapCacheToRasterFunctionArgument, self).get_CacheDataTable()
    def putref_BackgroundColor(self, ppBackgroundColor):
        '''Method IMapCacheToRasterFunctionArgument.putref_BackgroundColor

           INPUT
            ppBackgroundColor   : IColor*'''
        return super(IMapCacheToRasterFunctionArgument, self).putref_BackgroundColor(ppBackgroundColor)
    def get_BackgroundColor(self):
        '''Method IMapCacheToRasterFunctionArgument.get_BackgroundColor

           OUTPUT
            ppBackgroundColor   : IColor**'''
        return super(IMapCacheToRasterFunctionArgument, self).get_BackgroundColor()
    def putref_TransparentColor(self, ppTransparentColor):
        '''Method IMapCacheToRasterFunctionArgument.putref_TransparentColor

           INPUT
            ppTransparentColor  : IColor*'''
        return super(IMapCacheToRasterFunctionArgument, self).putref_TransparentColor(ppTransparentColor)
    def get_TransparentColor(self):
        '''Method IMapCacheToRasterFunctionArgument.get_TransparentColor

           OUTPUT
            ppTransparentColor  : IColor**'''
        return super(IMapCacheToRasterFunctionArgument, self).get_TransparentColor()
    BackgroundColor = property(get_BackgroundColor, putref_BackgroundColor, None)
    CacheDataTable = property(get_CacheDataTable, putref_CacheDataTable, None)
    CacheLocation = property(get_CacheLocation, put_CacheLocation, None)
    CacheTable = property(get_CacheTable, putref_CacheTable, None)
    Extent = property(get_Extent, putref_Extent, None)
    TransparentColor = property(get_TransparentColor, putref_TransparentColor, None)

class IDynamicMap(_esriCarto.IDynamicMap):
    _IID = uuid.UUID('92191b6f-d881-4829-8b75-ce846970f67b')

    def __init__(self, *args, **kw):
        super(IDynamicMap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DynamicMapEnabled(self):
        '''Method IDynamicMap.get_DynamicMapEnabled

           OUTPUT
            isEnable            : VARIANT_BOOL*'''
        return super(IDynamicMap, self).get_DynamicMapEnabled()
    def put_DynamicMapEnabled(self, isEnable):
        '''Method IDynamicMap.put_DynamicMapEnabled

           INPUT
            isEnable            : VARIANT_BOOL'''
        return super(IDynamicMap, self).put_DynamicMapEnabled(isEnable)
    def get_DynamicDrawRate(self):
        '''Method IDynamicMap.get_DynamicDrawRate

           OUTPUT
            dynamicDrawRateMS   : long*'''
        return super(IDynamicMap, self).get_DynamicDrawRate()
    def put_DynamicDrawRate(self, dynamicDrawRateMS):
        '''Method IDynamicMap.put_DynamicDrawRate

           INPUT
            dynamicDrawRateMS   : long'''
        return super(IDynamicMap, self).put_DynamicDrawRate(dynamicDrawRateMS)
    def get_UseSubPixelRendering(self):
        '''Method IDynamicMap.get_UseSubPixelRendering

           OUTPUT
            UseSubPixelRendering: VARIANT_BOOL*'''
        return super(IDynamicMap, self).get_UseSubPixelRendering()
    def put_UseSubPixelRendering(self, UseSubPixelRendering):
        '''Method IDynamicMap.put_UseSubPixelRendering

           INPUT
            UseSubPixelRendering: VARIANT_BOOL'''
        return super(IDynamicMap, self).put_UseSubPixelRendering(UseSubPixelRendering)
    DynamicDrawRate = property(get_DynamicDrawRate, put_DynamicDrawRate, None)
    DynamicMapEnabled = property(get_DynamicMapEnabled, put_DynamicMapEnabled, None)
    UseSubPixelRendering = property(get_UseSubPixelRendering, put_UseSubPixelRendering, None)

class IChangeDatabaseVersion(_esriCarto.IChangeDatabaseVersion):
    _IID = uuid.UUID('b4b4bd38-36ca-47be-921e-b72af9761ae9')
    def Execute(self, pFrom, pTo, pMap):
        '''Method IChangeDatabaseVersion.Execute

           INPUTS
            pFrom               : IVersion*
            pTo                 : IVersion*
            pMap                : IBasicMap*

           OUTPUT
            ppChangedTables     : ISet**'''
        return super(IChangeDatabaseVersion, self).Execute(pFrom, pTo, pMap)

class IMapNavigator(_esriCarto.IMapNavigator):
    _IID = uuid.UUID('899d8f10-c69f-4796-819a-f7b578c08da7')

    def __init__(self, *args, **kw):
        super(IMapNavigator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NavigatorVisible(self):
        '''Method IMapNavigator.get_NavigatorVisible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IMapNavigator, self).get_NavigatorVisible()
    def put_NavigatorVisible(self, Visible):
        '''Method IMapNavigator.put_NavigatorVisible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IMapNavigator, self).put_NavigatorVisible(Visible)
    def get_NavigatorPlacement(self):
        '''Method IMapNavigator.get_NavigatorPlacement

           OUTPUT
            Placement           : esriScreenPosition*'''
        return super(IMapNavigator, self).get_NavigatorPlacement()
    def put_NavigatorPlacement(self, Placement):
        '''Method IMapNavigator.put_NavigatorPlacement

           INPUT
            Placement           : esriScreenPosition'''
        return super(IMapNavigator, self).put_NavigatorPlacement(Placement)
    NavigatorPlacement = property(get_NavigatorPlacement, put_NavigatorPlacement, None)
    NavigatorVisible = property(get_NavigatorVisible, put_NavigatorVisible, None)

class IDocumentPreview(_esriCarto.IDocumentPreview):
    _IID = uuid.UUID('efe86eff-4c92-47b8-af1b-2d7ded932e24')
    def CreatePreview(self):
        '''Method IDocumentPreview.CreatePreview'''
        return super(IDocumentPreview, self).CreatePreview()
    def DeletePreview(self):
        '''Method IDocumentPreview.DeletePreview'''
        return super(IDocumentPreview, self).DeletePreview()
    def get_HasPreviewSaved(self):
        '''Method IDocumentPreview.get_HasPreviewSaved

           OUTPUT
            HasPreviewSaved     : VARIANT_BOOL*'''
        return super(IDocumentPreview, self).get_HasPreviewSaved()
    def get_HasPreviewToSave(self):
        '''Method IDocumentPreview.get_HasPreviewToSave

           OUTPUT
            HasPreviewToSave    : VARIANT_BOOL*'''
        return super(IDocumentPreview, self).get_HasPreviewToSave()
    HasPreviewSaved = property(get_HasPreviewSaved, None, None)
    HasPreviewToSave = property(get_HasPreviewToSave, None, None)

class IDocumentInfo(_esriCarto.IDocumentInfo):
    _IID = uuid.UUID('d3e5c54e-2a84-11d4-9ff2-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IDocumentInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DocumentTitle(self):
        '''Method IDocumentInfo.get_DocumentTitle

           OUTPUT
            Title               : BSTR*'''
        return super(IDocumentInfo, self).get_DocumentTitle()
    def put_DocumentTitle(self, Title):
        '''Method IDocumentInfo.put_DocumentTitle

           INPUT
            Title               : BSTR'''
        return super(IDocumentInfo, self).put_DocumentTitle(Title)
    def get_Subject(self):
        '''Method IDocumentInfo.get_Subject

           OUTPUT
            Subject             : BSTR*'''
        return super(IDocumentInfo, self).get_Subject()
    def put_Subject(self, Subject):
        '''Method IDocumentInfo.put_Subject

           INPUT
            Subject             : BSTR'''
        return super(IDocumentInfo, self).put_Subject(Subject)
    def get_Author(self):
        '''Method IDocumentInfo.get_Author

           OUTPUT
            Author              : BSTR*'''
        return super(IDocumentInfo, self).get_Author()
    def put_Author(self, Author):
        '''Method IDocumentInfo.put_Author

           INPUT
            Author              : BSTR'''
        return super(IDocumentInfo, self).put_Author(Author)
    def get_Category(self):
        '''Method IDocumentInfo.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IDocumentInfo, self).get_Category()
    def put_Category(self, Category):
        '''Method IDocumentInfo.put_Category

           INPUT
            Category            : BSTR'''
        return super(IDocumentInfo, self).put_Category(Category)
    def get_Comments(self):
        '''Method IDocumentInfo.get_Comments

           OUTPUT
            Comments            : BSTR*'''
        return super(IDocumentInfo, self).get_Comments()
    def put_Comments(self, Comments):
        '''Method IDocumentInfo.put_Comments

           INPUT
            Comments            : BSTR'''
        return super(IDocumentInfo, self).put_Comments(Comments)
    def get_Keywords(self):
        '''Method IDocumentInfo.get_Keywords

           OUTPUT
            Keywords            : BSTR*'''
        return super(IDocumentInfo, self).get_Keywords()
    def put_Keywords(self, Keywords):
        '''Method IDocumentInfo.put_Keywords

           INPUT
            Keywords            : BSTR'''
        return super(IDocumentInfo, self).put_Keywords(Keywords)
    def get_HyperlinkBase(self):
        '''Method IDocumentInfo.get_HyperlinkBase

           OUTPUT
            Path                : BSTR*'''
        return super(IDocumentInfo, self).get_HyperlinkBase()
    def put_HyperlinkBase(self, Path):
        '''Method IDocumentInfo.put_HyperlinkBase

           INPUT
            Path                : BSTR'''
        return super(IDocumentInfo, self).put_HyperlinkBase(Path)
    def get_SavePreview(self):
        '''Method IDocumentInfo.get_SavePreview

           OUTPUT
            SavePreview         : VARIANT_BOOL*'''
        return super(IDocumentInfo, self).get_SavePreview()
    def put_SavePreview(self, SavePreview):
        '''Method IDocumentInfo.put_SavePreview

           INPUT
            SavePreview         : VARIANT_BOOL'''
        return super(IDocumentInfo, self).put_SavePreview(SavePreview)
    Author = property(get_Author, put_Author, None)
    Category = property(get_Category, put_Category, None)
    Comments = property(get_Comments, put_Comments, None)
    DocumentTitle = property(get_DocumentTitle, put_DocumentTitle, None)
    HyperlinkBase = property(get_HyperlinkBase, put_HyperlinkBase, None)
    Keywords = property(get_Keywords, put_Keywords, None)
    SavePreview = property(get_SavePreview, put_SavePreview, None)
    Subject = property(get_Subject, put_Subject, None)

class IDocumentInfo2(_esriCarto.IDocumentInfo2):
    _IID = uuid.UUID('d3e5c54f-2a84-11d4-9ff2-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IDocumentInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DocumentTitle(self):
        '''Method IDocumentInfo2.get_DocumentTitle

           OUTPUT
            Title               : BSTR*'''
        return super(IDocumentInfo2, self).get_DocumentTitle()
    def put_DocumentTitle(self, Title):
        '''Method IDocumentInfo2.put_DocumentTitle

           INPUT
            Title               : BSTR'''
        return super(IDocumentInfo2, self).put_DocumentTitle(Title)
    def get_Subject(self):
        '''Method IDocumentInfo2.get_Subject

           OUTPUT
            Subject             : BSTR*'''
        return super(IDocumentInfo2, self).get_Subject()
    def put_Subject(self, Subject):
        '''Method IDocumentInfo2.put_Subject

           INPUT
            Subject             : BSTR'''
        return super(IDocumentInfo2, self).put_Subject(Subject)
    def get_Author(self):
        '''Method IDocumentInfo2.get_Author

           OUTPUT
            Author              : BSTR*'''
        return super(IDocumentInfo2, self).get_Author()
    def put_Author(self, Author):
        '''Method IDocumentInfo2.put_Author

           INPUT
            Author              : BSTR'''
        return super(IDocumentInfo2, self).put_Author(Author)
    def get_Category(self):
        '''Method IDocumentInfo2.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IDocumentInfo2, self).get_Category()
    def put_Category(self, Category):
        '''Method IDocumentInfo2.put_Category

           INPUT
            Category            : BSTR'''
        return super(IDocumentInfo2, self).put_Category(Category)
    def get_Comments(self):
        '''Method IDocumentInfo2.get_Comments

           OUTPUT
            Comments            : BSTR*'''
        return super(IDocumentInfo2, self).get_Comments()
    def put_Comments(self, Comments):
        '''Method IDocumentInfo2.put_Comments

           INPUT
            Comments            : BSTR'''
        return super(IDocumentInfo2, self).put_Comments(Comments)
    def get_Keywords(self):
        '''Method IDocumentInfo2.get_Keywords

           OUTPUT
            Keywords            : BSTR*'''
        return super(IDocumentInfo2, self).get_Keywords()
    def put_Keywords(self, Keywords):
        '''Method IDocumentInfo2.put_Keywords

           INPUT
            Keywords            : BSTR'''
        return super(IDocumentInfo2, self).put_Keywords(Keywords)
    def get_HyperlinkBase(self):
        '''Method IDocumentInfo2.get_HyperlinkBase

           OUTPUT
            Path                : BSTR*'''
        return super(IDocumentInfo2, self).get_HyperlinkBase()
    def put_HyperlinkBase(self, Path):
        '''Method IDocumentInfo2.put_HyperlinkBase

           INPUT
            Path                : BSTR'''
        return super(IDocumentInfo2, self).put_HyperlinkBase(Path)
    def get_SavePreview(self):
        '''Method IDocumentInfo2.get_SavePreview

           OUTPUT
            SavePreview         : VARIANT_BOOL*'''
        return super(IDocumentInfo2, self).get_SavePreview()
    def put_SavePreview(self, SavePreview):
        '''Method IDocumentInfo2.put_SavePreview

           INPUT
            SavePreview         : VARIANT_BOOL'''
        return super(IDocumentInfo2, self).put_SavePreview(SavePreview)
    def get_Credits(self):
        '''Method IDocumentInfo2.get_Credits

           OUTPUT
            Credits             : BSTR*'''
        return super(IDocumentInfo2, self).get_Credits()
    def put_Credits(self, Credits):
        '''Method IDocumentInfo2.put_Credits

           INPUT
            Credits             : BSTR'''
        return super(IDocumentInfo2, self).put_Credits(Credits)
    def get_RelativePaths(self):
        '''Method IDocumentInfo2.get_RelativePaths

           OUTPUT
            useRelativePaths    : VARIANT_BOOL*'''
        return super(IDocumentInfo2, self).get_RelativePaths()
    def put_RelativePaths(self, useRelativePaths):
        '''Method IDocumentInfo2.put_RelativePaths

           INPUT
            useRelativePaths    : VARIANT_BOOL'''
        return super(IDocumentInfo2, self).put_RelativePaths(useRelativePaths)
    def get_Name(self):
        '''Method IDocumentInfo2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDocumentInfo2, self).get_Name()
    def get_Path(self):
        '''Method IDocumentInfo2.get_Path

           OUTPUT
            Path                : BSTR*'''
        return super(IDocumentInfo2, self).get_Path()
    def get_Folder(self):
        '''Method IDocumentInfo2.get_Folder

           OUTPUT
            Folder              : BSTR*'''
        return super(IDocumentInfo2, self).get_Folder()
    def get_DateSaved(self):
        '''Method IDocumentInfo2.get_DateSaved

           OUTPUT
            date                : VARIANT*'''
        return super(IDocumentInfo2, self).get_DateSaved()
    def get_DatePrinted(self):
        '''Method IDocumentInfo2.get_DatePrinted

           OUTPUT
            date                : VARIANT*'''
        return super(IDocumentInfo2, self).get_DatePrinted()
    def get_DateExported(self):
        '''Method IDocumentInfo2.get_DateExported

           OUTPUT
            date                : VARIANT*'''
        return super(IDocumentInfo2, self).get_DateExported()
    Author = property(get_Author, put_Author, None)
    Category = property(get_Category, put_Category, None)
    Comments = property(get_Comments, put_Comments, None)
    Credits = property(get_Credits, put_Credits, None)
    DateExported = property(get_DateExported, None, None)
    DatePrinted = property(get_DatePrinted, None, None)
    DateSaved = property(get_DateSaved, None, None)
    DocumentTitle = property(get_DocumentTitle, put_DocumentTitle, None)
    Folder = property(get_Folder, None, None)
    HyperlinkBase = property(get_HyperlinkBase, put_HyperlinkBase, None)
    Keywords = property(get_Keywords, put_Keywords, None)
    Name = property(get_Name, None, None)
    Path = property(get_Path, None, None)
    RelativePaths = property(get_RelativePaths, put_RelativePaths, None)
    SavePreview = property(get_SavePreview, put_SavePreview, None)
    Subject = property(get_Subject, put_Subject, None)

class IDocumentInfo3(_esriCarto.IDocumentInfo3):
    _IID = uuid.UUID('8bcb734e-6d92-4c17-beb3-9b0e7cf3724e')

    def __init__(self, *args, **kw):
        super(IDocumentInfo3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AccessConstraints(self):
        '''Method IDocumentInfo3.get_AccessConstraints

           OUTPUT
            pConstraints        : BSTR*'''
        return super(IDocumentInfo3, self).get_AccessConstraints()
    def put_AccessConstraints(self, pConstraints):
        '''Method IDocumentInfo3.put_AccessConstraints

           INPUT
            pConstraints        : BSTR'''
        return super(IDocumentInfo3, self).put_AccessConstraints(pConstraints)
    def get_Thumbnail(self):
        '''Method IDocumentInfo3.get_Thumbnail

           OUTPUT
            ppThumbnail         : IPicture**'''
        return super(IDocumentInfo3, self).get_Thumbnail()
    def put_Thumbnail(self, ppThumbnail):
        '''Method IDocumentInfo3.put_Thumbnail

           INPUT
            ppThumbnail         : IPicture*'''
        return super(IDocumentInfo3, self).put_Thumbnail(ppThumbnail)
    def get_DocumentTitle(self):
        '''Method IDocumentInfo2.get_DocumentTitle (from IDocumentInfo2)

           OUTPUT
            Title               : BSTR*'''
        return super(IDocumentInfo3, self).get_DocumentTitle()
    def put_DocumentTitle(self, Title):
        '''Method IDocumentInfo2.put_DocumentTitle (from IDocumentInfo2)

           INPUT
            Title               : BSTR'''
        return super(IDocumentInfo3, self).put_DocumentTitle(Title)
    def get_Subject(self):
        '''Method IDocumentInfo2.get_Subject (from IDocumentInfo2)

           OUTPUT
            Subject             : BSTR*'''
        return super(IDocumentInfo3, self).get_Subject()
    def put_Subject(self, Subject):
        '''Method IDocumentInfo2.put_Subject (from IDocumentInfo2)

           INPUT
            Subject             : BSTR'''
        return super(IDocumentInfo3, self).put_Subject(Subject)
    def get_Author(self):
        '''Method IDocumentInfo2.get_Author (from IDocumentInfo2)

           OUTPUT
            Author              : BSTR*'''
        return super(IDocumentInfo3, self).get_Author()
    def put_Author(self, Author):
        '''Method IDocumentInfo2.put_Author (from IDocumentInfo2)

           INPUT
            Author              : BSTR'''
        return super(IDocumentInfo3, self).put_Author(Author)
    def get_Category(self):
        '''Method IDocumentInfo2.get_Category (from IDocumentInfo2)

           OUTPUT
            Category            : BSTR*'''
        return super(IDocumentInfo3, self).get_Category()
    def put_Category(self, Category):
        '''Method IDocumentInfo2.put_Category (from IDocumentInfo2)

           INPUT
            Category            : BSTR'''
        return super(IDocumentInfo3, self).put_Category(Category)
    def get_Comments(self):
        '''Method IDocumentInfo2.get_Comments (from IDocumentInfo2)

           OUTPUT
            Comments            : BSTR*'''
        return super(IDocumentInfo3, self).get_Comments()
    def put_Comments(self, Comments):
        '''Method IDocumentInfo2.put_Comments (from IDocumentInfo2)

           INPUT
            Comments            : BSTR'''
        return super(IDocumentInfo3, self).put_Comments(Comments)
    def get_Keywords(self):
        '''Method IDocumentInfo2.get_Keywords (from IDocumentInfo2)

           OUTPUT
            Keywords            : BSTR*'''
        return super(IDocumentInfo3, self).get_Keywords()
    def put_Keywords(self, Keywords):
        '''Method IDocumentInfo2.put_Keywords (from IDocumentInfo2)

           INPUT
            Keywords            : BSTR'''
        return super(IDocumentInfo3, self).put_Keywords(Keywords)
    def get_HyperlinkBase(self):
        '''Method IDocumentInfo2.get_HyperlinkBase (from IDocumentInfo2)

           OUTPUT
            Path                : BSTR*'''
        return super(IDocumentInfo3, self).get_HyperlinkBase()
    def put_HyperlinkBase(self, Path):
        '''Method IDocumentInfo2.put_HyperlinkBase (from IDocumentInfo2)

           INPUT
            Path                : BSTR'''
        return super(IDocumentInfo3, self).put_HyperlinkBase(Path)
    def get_SavePreview(self):
        '''Method IDocumentInfo2.get_SavePreview (from IDocumentInfo2)

           OUTPUT
            SavePreview         : VARIANT_BOOL*'''
        return super(IDocumentInfo3, self).get_SavePreview()
    def put_SavePreview(self, SavePreview):
        '''Method IDocumentInfo2.put_SavePreview (from IDocumentInfo2)

           INPUT
            SavePreview         : VARIANT_BOOL'''
        return super(IDocumentInfo3, self).put_SavePreview(SavePreview)
    def get_Credits(self):
        '''Method IDocumentInfo2.get_Credits (from IDocumentInfo2)

           OUTPUT
            Credits             : BSTR*'''
        return super(IDocumentInfo3, self).get_Credits()
    def put_Credits(self, Credits):
        '''Method IDocumentInfo2.put_Credits (from IDocumentInfo2)

           INPUT
            Credits             : BSTR'''
        return super(IDocumentInfo3, self).put_Credits(Credits)
    def get_RelativePaths(self):
        '''Method IDocumentInfo2.get_RelativePaths (from IDocumentInfo2)

           OUTPUT
            useRelativePaths    : VARIANT_BOOL*'''
        return super(IDocumentInfo3, self).get_RelativePaths()
    def put_RelativePaths(self, useRelativePaths):
        '''Method IDocumentInfo2.put_RelativePaths (from IDocumentInfo2)

           INPUT
            useRelativePaths    : VARIANT_BOOL'''
        return super(IDocumentInfo3, self).put_RelativePaths(useRelativePaths)
    def get_Name(self):
        '''Method IDocumentInfo2.get_Name (from IDocumentInfo2)

           OUTPUT
            Name                : BSTR*'''
        return super(IDocumentInfo3, self).get_Name()
    def get_Path(self):
        '''Method IDocumentInfo2.get_Path (from IDocumentInfo2)

           OUTPUT
            Path                : BSTR*'''
        return super(IDocumentInfo3, self).get_Path()
    def get_Folder(self):
        '''Method IDocumentInfo2.get_Folder (from IDocumentInfo2)

           OUTPUT
            Folder              : BSTR*'''
        return super(IDocumentInfo3, self).get_Folder()
    def get_DateSaved(self):
        '''Method IDocumentInfo2.get_DateSaved (from IDocumentInfo2)

           OUTPUT
            date                : VARIANT*'''
        return super(IDocumentInfo3, self).get_DateSaved()
    def get_DatePrinted(self):
        '''Method IDocumentInfo2.get_DatePrinted (from IDocumentInfo2)

           OUTPUT
            date                : VARIANT*'''
        return super(IDocumentInfo3, self).get_DatePrinted()
    def get_DateExported(self):
        '''Method IDocumentInfo2.get_DateExported (from IDocumentInfo2)

           OUTPUT
            date                : VARIANT*'''
        return super(IDocumentInfo3, self).get_DateExported()
    AccessConstraints = property(get_AccessConstraints, put_AccessConstraints, None)
    Author = property(get_Author, put_Author, None)
    Category = property(get_Category, put_Category, None)
    Comments = property(get_Comments, put_Comments, None)
    Credits = property(get_Credits, put_Credits, None)
    DateExported = property(get_DateExported, None, None)
    DatePrinted = property(get_DatePrinted, None, None)
    DateSaved = property(get_DateSaved, None, None)
    DocumentTitle = property(get_DocumentTitle, put_DocumentTitle, None)
    Folder = property(get_Folder, None, None)
    HyperlinkBase = property(get_HyperlinkBase, put_HyperlinkBase, None)
    Keywords = property(get_Keywords, put_Keywords, None)
    Name = property(get_Name, None, None)
    Path = property(get_Path, None, None)
    RelativePaths = property(get_RelativePaths, put_RelativePaths, None)
    SavePreview = property(get_SavePreview, put_SavePreview, None)
    Subject = property(get_Subject, put_Subject, None)
    Thumbnail = property(get_Thumbnail, put_Thumbnail, None)

class IAdvancedShader(_esriCarto.IAdvancedShader):
    _IID = uuid.UUID('58e9956a-c645-41b6-98d6-049a65a660f6')
    def BeginUpdate(self):
        '''Method IAdvancedShader.BeginUpdate'''
        return super(IAdvancedShader, self).BeginUpdate()
    def Update(self, bitmapSize, pBitmapBits, Width, Height, scanLineWidthInBytes):
        '''Method IAdvancedShader.Update

           INPUTS
            bitmapSize          : long
            pBitmapBits         : unsignedchar*
            Width               : long
            Height              : long
            scanLineWidthInBytes: long'''
        return super(IAdvancedShader, self).Update(bitmapSize, pBitmapBits, Width, Height, scanLineWidthInBytes)
    def EndUpdate(self):
        '''Method IAdvancedShader.EndUpdate'''
        return super(IAdvancedShader, self).EndUpdate()
    def ProcessR(self, valueIn):
        '''Method IShader.ProcessR (from IShader)

           INPUT
            valueIn             : float

           OUTPUT
            valueOut            : float*'''
        return super(IAdvancedShader, self).ProcessR(valueIn)
    def ProcessG(self, valueIn):
        '''Method IShader.ProcessG (from IShader)

           INPUT
            valueIn             : float

           OUTPUT
            valueOut            : float*'''
        return super(IAdvancedShader, self).ProcessG(valueIn)
    def ProcessB(self, valueIn):
        '''Method IShader.ProcessB (from IShader)

           INPUT
            valueIn             : float

           OUTPUT
            valueOut            : float*'''
        return super(IAdvancedShader, self).ProcessB(valueIn)

class IRasterShader(_esriCarto.IRasterShader):
    _IID = uuid.UUID('9f65c176-d25c-4e7d-90c7-53abe7910ba6')

    def __init__(self, *args, **kw):
        super(IRasterShader, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Brightness(self, Brightness):
        '''Method IRasterShader.put_Brightness

           INPUT
            Brightness          : short'''
        return super(IRasterShader, self).put_Brightness(Brightness)
    def get_Brightness(self):
        '''Method IRasterShader.get_Brightness

           OUTPUT
            Brightness          : short*'''
        return super(IRasterShader, self).get_Brightness()
    def put_Contrast(self, Contrast):
        '''Method IRasterShader.put_Contrast

           INPUT
            Contrast            : short'''
        return super(IRasterShader, self).put_Contrast(Contrast)
    def get_Contrast(self):
        '''Method IRasterShader.get_Contrast

           OUTPUT
            Contrast            : short*'''
        return super(IRasterShader, self).get_Contrast()
    def put_Gamma(self, Gamma):
        '''Method IRasterShader.put_Gamma

           INPUT
            Gamma               : double'''
        return super(IRasterShader, self).put_Gamma(Gamma)
    def get_Gamma(self):
        '''Method IRasterShader.get_Gamma

           OUTPUT
            Gamma               : double*'''
        return super(IRasterShader, self).get_Gamma()
    Brightness = property(get_Brightness, put_Brightness, None)
    Contrast = property(get_Contrast, put_Contrast, None)
    Gamma = property(get_Gamma, put_Gamma, None)

class IRasterDRAShader(_esriCarto.IRasterDRAShader):
    _IID = uuid.UUID('35ae89d7-540f-400b-82a6-cfae4a296fef')

    def __init__(self, *args, **kw):
        super(IRasterDRAShader, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_StretchType(self, pStretchType):
        '''Method IRasterDRAShader.put_StretchType

           INPUT
            pStretchType        : esriRasterStretchTypesEnum'''
        return super(IRasterDRAShader, self).put_StretchType(pStretchType)
    def get_StretchType(self):
        '''Method IRasterDRAShader.get_StretchType

           OUTPUT
            pStretchType        : esriRasterStretchTypesEnum*'''
        return super(IRasterDRAShader, self).get_StretchType()
    def put_StdDevParam(self, pStddev):
        '''Method IRasterDRAShader.put_StdDevParam

           INPUT
            pStddev             : float'''
        return super(IRasterDRAShader, self).put_StdDevParam(pStddev)
    def get_StdDevParam(self):
        '''Method IRasterDRAShader.get_StdDevParam

           OUTPUT
            pStddev             : float*'''
        return super(IRasterDRAShader, self).get_StdDevParam()
    def put_PercentMin(self, pPercentMin):
        '''Method IRasterDRAShader.put_PercentMin

           INPUT
            pPercentMin         : float'''
        return super(IRasterDRAShader, self).put_PercentMin(pPercentMin)
    def get_PercentMin(self):
        '''Method IRasterDRAShader.get_PercentMin

           OUTPUT
            pPercentMin         : float*'''
        return super(IRasterDRAShader, self).get_PercentMin()
    def put_PercentMax(self, pPercentMax):
        '''Method IRasterDRAShader.put_PercentMax

           INPUT
            pPercentMax         : float'''
        return super(IRasterDRAShader, self).put_PercentMax(pPercentMax)
    def get_PercentMax(self):
        '''Method IRasterDRAShader.get_PercentMax

           OUTPUT
            pPercentMax         : float*'''
        return super(IRasterDRAShader, self).get_PercentMax()
    PercentMax = property(get_PercentMax, put_PercentMax, None)
    PercentMin = property(get_PercentMin, put_PercentMin, None)
    StdDevParam = property(get_StdDevParam, put_StdDevParam, None)
    StretchType = property(get_StretchType, put_StretchType, None)

class IMapTimeDisplay(_esriCarto.IMapTimeDisplay):
    _IID = uuid.UUID('54bc9b6f-3a81-48d0-a07c-52238b28dc7a')

    def __init__(self, *args, **kw):
        super(IMapTimeDisplay, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def HasTimeData(self):
        '''Method IMapTimeDisplay.HasTimeData

           OUTPUT
            HasTimeData         : VARIANT_BOOL*'''
        return super(IMapTimeDisplay, self).HasTimeData()
    def get_DefaultTimeInterval(self):
        '''Method IMapTimeDisplay.get_DefaultTimeInterval

           OUTPUT
            Interval            : double*'''
        return super(IMapTimeDisplay, self).get_DefaultTimeInterval()
    def put_DefaultTimeInterval(self, Interval):
        '''Method IMapTimeDisplay.put_DefaultTimeInterval

           INPUT
            Interval            : double'''
        return super(IMapTimeDisplay, self).put_DefaultTimeInterval(Interval)
    def get_DefaultTimeIntervalUnits(self):
        '''Method IMapTimeDisplay.get_DefaultTimeIntervalUnits

           OUTPUT
            Units               : esriTimeUnits*'''
        return super(IMapTimeDisplay, self).get_DefaultTimeIntervalUnits()
    def put_DefaultTimeIntervalUnits(self, Units):
        '''Method IMapTimeDisplay.put_DefaultTimeIntervalUnits

           INPUT
            Units               : esriTimeUnits'''
        return super(IMapTimeDisplay, self).put_DefaultTimeIntervalUnits(Units)
    def get_DefaultTimeWindow(self):
        '''Method IMapTimeDisplay.get_DefaultTimeWindow

           OUTPUT
            duration            : double*'''
        return super(IMapTimeDisplay, self).get_DefaultTimeWindow()
    def put_DefaultTimeWindow(self, duration):
        '''Method IMapTimeDisplay.put_DefaultTimeWindow

           INPUT
            duration            : double'''
        return super(IMapTimeDisplay, self).put_DefaultTimeWindow(duration)
    def get_FullTimeExtent(self):
        '''Method IMapTimeDisplay.get_FullTimeExtent

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapTimeDisplay, self).get_FullTimeExtent()
    def putref_FullTimeExtent(self, TimeExtent):
        '''Method IMapTimeDisplay.putref_FullTimeExtent

           INPUT
            TimeExtent          : ITimeExtent*'''
        return super(IMapTimeDisplay, self).putref_FullTimeExtent(TimeExtent)
    def get_CurrentTimeExtent(self):
        '''Method IMapTimeDisplay.get_CurrentTimeExtent

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapTimeDisplay, self).get_CurrentTimeExtent()
    def putref_CurrentTimeExtent(self, TimeExtent):
        '''Method IMapTimeDisplay.putref_CurrentTimeExtent

           INPUT
            TimeExtent          : ITimeExtent*'''
        return super(IMapTimeDisplay, self).putref_CurrentTimeExtent(TimeExtent)
    def get_TimeValue(self):
        '''Method IMapTimeDisplay.get_TimeValue

           OUTPUT
            time                : ITimeValue**'''
        return super(IMapTimeDisplay, self).get_TimeValue()
    def putref_TimeValue(self, time):
        '''Method IMapTimeDisplay.putref_TimeValue

           INPUT
            time                : ITimeValue*'''
        return super(IMapTimeDisplay, self).putref_TimeValue(time)
    def get_TimeReference(self):
        '''Method IMapTimeDisplay.get_TimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IMapTimeDisplay, self).get_TimeReference()
    def putref_TimeReference(self, TimeReference):
        '''Method IMapTimeDisplay.putref_TimeReference

           INPUT
            TimeReference       : ITimeReference*'''
        return super(IMapTimeDisplay, self).putref_TimeReference(TimeReference)
    def get_DisplayDateFormat(self):
        '''Method IMapTimeDisplay.get_DisplayDateFormat

           OUTPUT
            dateFormat          : BSTR*'''
        return super(IMapTimeDisplay, self).get_DisplayDateFormat()
    def put_DisplayDateFormat(self, dateFormat):
        '''Method IMapTimeDisplay.put_DisplayDateFormat

           INPUT
            dateFormat          : BSTR'''
        return super(IMapTimeDisplay, self).put_DisplayDateFormat(dateFormat)
    def get_DisplayTimeFormat(self):
        '''Method IMapTimeDisplay.get_DisplayTimeFormat

           OUTPUT
            timeFormat          : BSTR*'''
        return super(IMapTimeDisplay, self).get_DisplayTimeFormat()
    def put_DisplayTimeFormat(self, timeFormat):
        '''Method IMapTimeDisplay.put_DisplayTimeFormat

           INPUT
            timeFormat          : BSTR'''
        return super(IMapTimeDisplay, self).put_DisplayTimeFormat(timeFormat)
    def get_DisplayEachTimestamp(self):
        '''Method IMapTimeDisplay.get_DisplayEachTimestamp

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IMapTimeDisplay, self).get_DisplayEachTimestamp()
    def put_DisplayEachTimestamp(self, Value):
        '''Method IMapTimeDisplay.put_DisplayEachTimestamp

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IMapTimeDisplay, self).put_DisplayEachTimestamp(Value)
    def get_DisplaySpeed(self):
        '''Method IMapTimeDisplay.get_DisplaySpeed

           OUTPUT
            speed               : long*'''
        return super(IMapTimeDisplay, self).get_DisplaySpeed()
    def put_DisplaySpeed(self, speed):
        '''Method IMapTimeDisplay.put_DisplaySpeed

           INPUT
            speed               : long'''
        return super(IMapTimeDisplay, self).put_DisplaySpeed(speed)
    def get_PlayOption(self):
        '''Method IMapTimeDisplay.get_PlayOption

           OUTPUT
            option              : esriMapTimePlayOption*'''
        return super(IMapTimeDisplay, self).get_PlayOption()
    def put_PlayOption(self, option):
        '''Method IMapTimeDisplay.put_PlayOption

           INPUT
            option              : esriMapTimePlayOption'''
        return super(IMapTimeDisplay, self).put_PlayOption(option)
    def get_TimeExtentOption(self):
        '''Method IMapTimeDisplay.get_TimeExtentOption

           OUTPUT
            option              : esriMapTimeExtentOption*'''
        return super(IMapTimeDisplay, self).get_TimeExtentOption()
    def put_TimeExtentOption(self, option):
        '''Method IMapTimeDisplay.put_TimeExtentOption

           INPUT
            option              : esriMapTimeExtentOption'''
        return super(IMapTimeDisplay, self).put_TimeExtentOption(option)
    def get_TimeExtentDefinitionLayer(self):
        '''Method IMapTimeDisplay.get_TimeExtentDefinitionLayer

           OUTPUT
            Layer               : ILayer**'''
        return super(IMapTimeDisplay, self).get_TimeExtentDefinitionLayer()
    def putref_TimeExtentDefinitionLayer(self, Layer):
        '''Method IMapTimeDisplay.putref_TimeExtentDefinitionLayer

           INPUT
            Layer               : ILayer*'''
        return super(IMapTimeDisplay, self).putref_TimeExtentDefinitionLayer(Layer)
    def get_DynamicTimeRefresh(self):
        '''Method IMapTimeDisplay.get_DynamicTimeRefresh

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapTimeDisplay, self).get_DynamicTimeRefresh()
    def put_DynamicTimeRefresh(self, flag):
        '''Method IMapTimeDisplay.put_DynamicTimeRefresh

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMapTimeDisplay, self).put_DynamicTimeRefresh(flag)
    def get_ShowTime(self):
        '''Method IMapTimeDisplay.get_ShowTime

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapTimeDisplay, self).get_ShowTime()
    def put_ShowTime(self, flag):
        '''Method IMapTimeDisplay.put_ShowTime

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMapTimeDisplay, self).put_ShowTime(flag)
    def ComputeFullTimeExtent(self):
        '''Method IMapTimeDisplay.ComputeFullTimeExtent

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapTimeDisplay, self).ComputeFullTimeExtent()
    CurrentTimeExtent = property(get_CurrentTimeExtent, putref_CurrentTimeExtent, None)
    DefaultTimeInterval = property(get_DefaultTimeInterval, put_DefaultTimeInterval, None)
    DefaultTimeIntervalUnits = property(get_DefaultTimeIntervalUnits, put_DefaultTimeIntervalUnits, None)
    DefaultTimeWindow = property(get_DefaultTimeWindow, put_DefaultTimeWindow, None)
    DisplayDateFormat = property(get_DisplayDateFormat, put_DisplayDateFormat, None)
    DisplayEachTimestamp = property(get_DisplayEachTimestamp, put_DisplayEachTimestamp, None)
    DisplaySpeed = property(get_DisplaySpeed, put_DisplaySpeed, None)
    DisplayTimeFormat = property(get_DisplayTimeFormat, put_DisplayTimeFormat, None)
    DynamicTimeRefresh = property(get_DynamicTimeRefresh, put_DynamicTimeRefresh, None)
    FullTimeExtent = property(get_FullTimeExtent, putref_FullTimeExtent, None)
    PlayOption = property(get_PlayOption, put_PlayOption, None)
    ShowTime = property(get_ShowTime, put_ShowTime, None)
    TimeExtentDefinitionLayer = property(get_TimeExtentDefinitionLayer, putref_TimeExtentDefinitionLayer, None)
    TimeExtentOption = property(get_TimeExtentOption, put_TimeExtentOption, None)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)
    TimeValue = property(get_TimeValue, putref_TimeValue, None)

class IMapTimeDisplay2(_esriCarto.IMapTimeDisplay2):
    _IID = uuid.UUID('51d8ac4d-d2c5-4f89-87c8-09d8d23360a6')

    def __init__(self, *args, **kw):
        super(IMapTimeDisplay2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HasLiveData(self):
        '''Method IMapTimeDisplay2.get_HasLiveData

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapTimeDisplay2, self).get_HasLiveData()
    def put_HasLiveData(self, flag):
        '''Method IMapTimeDisplay2.put_HasLiveData

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMapTimeDisplay2, self).put_HasLiveData(flag)
    def get_TimeRelation(self):
        '''Method IMapTimeDisplay2.get_TimeRelation

           OUTPUT
            relation            : esriTimeRelation*'''
        return super(IMapTimeDisplay2, self).get_TimeRelation()
    def put_TimeRelation(self, relation):
        '''Method IMapTimeDisplay2.put_TimeRelation

           INPUT
            relation            : esriTimeRelation'''
        return super(IMapTimeDisplay2, self).put_TimeRelation(relation)
    def get_ShowTimeOnDisplay(self):
        '''Method IMapTimeDisplay2.get_ShowTimeOnDisplay

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapTimeDisplay2, self).get_ShowTimeOnDisplay()
    def put_ShowTimeOnDisplay(self, flag):
        '''Method IMapTimeDisplay2.put_ShowTimeOnDisplay

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMapTimeDisplay2, self).put_ShowTimeOnDisplay(flag)
    def HasTimeData(self):
        '''Method IMapTimeDisplay.HasTimeData (from IMapTimeDisplay)

           OUTPUT
            HasTimeData         : VARIANT_BOOL*'''
        return super(IMapTimeDisplay2, self).HasTimeData()
    def get_DefaultTimeInterval(self):
        '''Method IMapTimeDisplay.get_DefaultTimeInterval (from IMapTimeDisplay)

           OUTPUT
            Interval            : double*'''
        return super(IMapTimeDisplay2, self).get_DefaultTimeInterval()
    def put_DefaultTimeInterval(self, Interval):
        '''Method IMapTimeDisplay.put_DefaultTimeInterval (from IMapTimeDisplay)

           INPUT
            Interval            : double'''
        return super(IMapTimeDisplay2, self).put_DefaultTimeInterval(Interval)
    def get_DefaultTimeIntervalUnits(self):
        '''Method IMapTimeDisplay.get_DefaultTimeIntervalUnits (from IMapTimeDisplay)

           OUTPUT
            Units               : esriTimeUnits*'''
        return super(IMapTimeDisplay2, self).get_DefaultTimeIntervalUnits()
    def put_DefaultTimeIntervalUnits(self, Units):
        '''Method IMapTimeDisplay.put_DefaultTimeIntervalUnits (from IMapTimeDisplay)

           INPUT
            Units               : esriTimeUnits'''
        return super(IMapTimeDisplay2, self).put_DefaultTimeIntervalUnits(Units)
    def get_DefaultTimeWindow(self):
        '''Method IMapTimeDisplay.get_DefaultTimeWindow (from IMapTimeDisplay)

           OUTPUT
            duration            : double*'''
        return super(IMapTimeDisplay2, self).get_DefaultTimeWindow()
    def put_DefaultTimeWindow(self, duration):
        '''Method IMapTimeDisplay.put_DefaultTimeWindow (from IMapTimeDisplay)

           INPUT
            duration            : double'''
        return super(IMapTimeDisplay2, self).put_DefaultTimeWindow(duration)
    def get_FullTimeExtent(self):
        '''Method IMapTimeDisplay.get_FullTimeExtent (from IMapTimeDisplay)

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapTimeDisplay2, self).get_FullTimeExtent()
    def putref_FullTimeExtent(self, TimeExtent):
        '''Method IMapTimeDisplay.putref_FullTimeExtent (from IMapTimeDisplay)

           INPUT
            TimeExtent          : ITimeExtent*'''
        return super(IMapTimeDisplay2, self).putref_FullTimeExtent(TimeExtent)
    def get_CurrentTimeExtent(self):
        '''Method IMapTimeDisplay.get_CurrentTimeExtent (from IMapTimeDisplay)

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapTimeDisplay2, self).get_CurrentTimeExtent()
    def putref_CurrentTimeExtent(self, TimeExtent):
        '''Method IMapTimeDisplay.putref_CurrentTimeExtent (from IMapTimeDisplay)

           INPUT
            TimeExtent          : ITimeExtent*'''
        return super(IMapTimeDisplay2, self).putref_CurrentTimeExtent(TimeExtent)
    def get_TimeValue(self):
        '''Method IMapTimeDisplay.get_TimeValue (from IMapTimeDisplay)

           OUTPUT
            time                : ITimeValue**'''
        return super(IMapTimeDisplay2, self).get_TimeValue()
    def putref_TimeValue(self, time):
        '''Method IMapTimeDisplay.putref_TimeValue (from IMapTimeDisplay)

           INPUT
            time                : ITimeValue*'''
        return super(IMapTimeDisplay2, self).putref_TimeValue(time)
    def get_TimeReference(self):
        '''Method IMapTimeDisplay.get_TimeReference (from IMapTimeDisplay)

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IMapTimeDisplay2, self).get_TimeReference()
    def putref_TimeReference(self, TimeReference):
        '''Method IMapTimeDisplay.putref_TimeReference (from IMapTimeDisplay)

           INPUT
            TimeReference       : ITimeReference*'''
        return super(IMapTimeDisplay2, self).putref_TimeReference(TimeReference)
    def get_DisplayDateFormat(self):
        '''Method IMapTimeDisplay.get_DisplayDateFormat (from IMapTimeDisplay)

           OUTPUT
            dateFormat          : BSTR*'''
        return super(IMapTimeDisplay2, self).get_DisplayDateFormat()
    def put_DisplayDateFormat(self, dateFormat):
        '''Method IMapTimeDisplay.put_DisplayDateFormat (from IMapTimeDisplay)

           INPUT
            dateFormat          : BSTR'''
        return super(IMapTimeDisplay2, self).put_DisplayDateFormat(dateFormat)
    def get_DisplayTimeFormat(self):
        '''Method IMapTimeDisplay.get_DisplayTimeFormat (from IMapTimeDisplay)

           OUTPUT
            timeFormat          : BSTR*'''
        return super(IMapTimeDisplay2, self).get_DisplayTimeFormat()
    def put_DisplayTimeFormat(self, timeFormat):
        '''Method IMapTimeDisplay.put_DisplayTimeFormat (from IMapTimeDisplay)

           INPUT
            timeFormat          : BSTR'''
        return super(IMapTimeDisplay2, self).put_DisplayTimeFormat(timeFormat)
    def get_DisplayEachTimestamp(self):
        '''Method IMapTimeDisplay.get_DisplayEachTimestamp (from IMapTimeDisplay)

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IMapTimeDisplay2, self).get_DisplayEachTimestamp()
    def put_DisplayEachTimestamp(self, Value):
        '''Method IMapTimeDisplay.put_DisplayEachTimestamp (from IMapTimeDisplay)

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IMapTimeDisplay2, self).put_DisplayEachTimestamp(Value)
    def get_DisplaySpeed(self):
        '''Method IMapTimeDisplay.get_DisplaySpeed (from IMapTimeDisplay)

           OUTPUT
            speed               : long*'''
        return super(IMapTimeDisplay2, self).get_DisplaySpeed()
    def put_DisplaySpeed(self, speed):
        '''Method IMapTimeDisplay.put_DisplaySpeed (from IMapTimeDisplay)

           INPUT
            speed               : long'''
        return super(IMapTimeDisplay2, self).put_DisplaySpeed(speed)
    def get_PlayOption(self):
        '''Method IMapTimeDisplay.get_PlayOption (from IMapTimeDisplay)

           OUTPUT
            option              : esriMapTimePlayOption*'''
        return super(IMapTimeDisplay2, self).get_PlayOption()
    def put_PlayOption(self, option):
        '''Method IMapTimeDisplay.put_PlayOption (from IMapTimeDisplay)

           INPUT
            option              : esriMapTimePlayOption'''
        return super(IMapTimeDisplay2, self).put_PlayOption(option)
    def get_TimeExtentOption(self):
        '''Method IMapTimeDisplay.get_TimeExtentOption (from IMapTimeDisplay)

           OUTPUT
            option              : esriMapTimeExtentOption*'''
        return super(IMapTimeDisplay2, self).get_TimeExtentOption()
    def put_TimeExtentOption(self, option):
        '''Method IMapTimeDisplay.put_TimeExtentOption (from IMapTimeDisplay)

           INPUT
            option              : esriMapTimeExtentOption'''
        return super(IMapTimeDisplay2, self).put_TimeExtentOption(option)
    def get_TimeExtentDefinitionLayer(self):
        '''Method IMapTimeDisplay.get_TimeExtentDefinitionLayer (from IMapTimeDisplay)

           OUTPUT
            Layer               : ILayer**'''
        return super(IMapTimeDisplay2, self).get_TimeExtentDefinitionLayer()
    def putref_TimeExtentDefinitionLayer(self, Layer):
        '''Method IMapTimeDisplay.putref_TimeExtentDefinitionLayer (from IMapTimeDisplay)

           INPUT
            Layer               : ILayer*'''
        return super(IMapTimeDisplay2, self).putref_TimeExtentDefinitionLayer(Layer)
    def get_DynamicTimeRefresh(self):
        '''Method IMapTimeDisplay.get_DynamicTimeRefresh (from IMapTimeDisplay)

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapTimeDisplay2, self).get_DynamicTimeRefresh()
    def put_DynamicTimeRefresh(self, flag):
        '''Method IMapTimeDisplay.put_DynamicTimeRefresh (from IMapTimeDisplay)

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMapTimeDisplay2, self).put_DynamicTimeRefresh(flag)
    def get_ShowTime(self):
        '''Method IMapTimeDisplay.get_ShowTime (from IMapTimeDisplay)

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapTimeDisplay2, self).get_ShowTime()
    def put_ShowTime(self, flag):
        '''Method IMapTimeDisplay.put_ShowTime (from IMapTimeDisplay)

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMapTimeDisplay2, self).put_ShowTime(flag)
    def ComputeFullTimeExtent(self):
        '''Method IMapTimeDisplay.ComputeFullTimeExtent (from IMapTimeDisplay)

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapTimeDisplay2, self).ComputeFullTimeExtent()
    CurrentTimeExtent = property(get_CurrentTimeExtent, putref_CurrentTimeExtent, None)
    DefaultTimeInterval = property(get_DefaultTimeInterval, put_DefaultTimeInterval, None)
    DefaultTimeIntervalUnits = property(get_DefaultTimeIntervalUnits, put_DefaultTimeIntervalUnits, None)
    DefaultTimeWindow = property(get_DefaultTimeWindow, put_DefaultTimeWindow, None)
    DisplayDateFormat = property(get_DisplayDateFormat, put_DisplayDateFormat, None)
    DisplayEachTimestamp = property(get_DisplayEachTimestamp, put_DisplayEachTimestamp, None)
    DisplaySpeed = property(get_DisplaySpeed, put_DisplaySpeed, None)
    DisplayTimeFormat = property(get_DisplayTimeFormat, put_DisplayTimeFormat, None)
    DynamicTimeRefresh = property(get_DynamicTimeRefresh, put_DynamicTimeRefresh, None)
    FullTimeExtent = property(get_FullTimeExtent, putref_FullTimeExtent, None)
    HasLiveData = property(get_HasLiveData, put_HasLiveData, None)
    PlayOption = property(get_PlayOption, put_PlayOption, None)
    ShowTime = property(get_ShowTime, put_ShowTime, None)
    ShowTimeOnDisplay = property(get_ShowTimeOnDisplay, put_ShowTimeOnDisplay, None)
    TimeExtentDefinitionLayer = property(get_TimeExtentDefinitionLayer, putref_TimeExtentDefinitionLayer, None)
    TimeExtentOption = property(get_TimeExtentOption, put_TimeExtentOption, None)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)
    TimeRelation = property(get_TimeRelation, put_TimeRelation, None)
    TimeValue = property(get_TimeValue, putref_TimeValue, None)

class ITileCacheInfoEx(_esriCarto.ITileCacheInfoEx):
    _IID = uuid.UUID('d0fac2f1-1e2f-4062-9476-6865a5157db9')

    def __init__(self, *args, **kw):
        super(ITileCacheInfoEx, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method ITileCacheInfoEx.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(ITileCacheInfoEx, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method ITileCacheInfoEx.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(ITileCacheInfoEx, self).putref_SpatialReference(ppSpatialReference)
    def get_Origin(self):
        '''Method ITileCacheInfoEx.get_Origin

           OUTPUT
            ppOrigin            : IPoint**'''
        return super(ITileCacheInfoEx, self).get_Origin()
    def put_Origin(self, ppOrigin):
        '''Method ITileCacheInfoEx.put_Origin

           INPUT
            ppOrigin            : IPoint*'''
        return super(ITileCacheInfoEx, self).put_Origin(ppOrigin)
    def get_TileCols(self):
        '''Method ITileCacheInfoEx.get_TileCols

           OUTPUT
            pNumTileCols        : long*'''
        return super(ITileCacheInfoEx, self).get_TileCols()
    def put_TileCols(self, pNumTileCols):
        '''Method ITileCacheInfoEx.put_TileCols

           INPUT
            pNumTileCols        : long'''
        return super(ITileCacheInfoEx, self).put_TileCols(pNumTileCols)
    def get_TileRows(self):
        '''Method ITileCacheInfoEx.get_TileRows

           OUTPUT
            pNumTileRows        : long*'''
        return super(ITileCacheInfoEx, self).get_TileRows()
    def put_TileRows(self, pNumTileRows):
        '''Method ITileCacheInfoEx.put_TileRows

           INPUT
            pNumTileRows        : long'''
        return super(ITileCacheInfoEx, self).put_TileRows(pNumTileRows)
    def get_PreciseDpi(self):
        '''Method ITileCacheInfoEx.get_PreciseDpi

           OUTPUT
            pDpi                : double*'''
        return super(ITileCacheInfoEx, self).get_PreciseDpi()
    def put_PreciseDpi(self, pDpi):
        '''Method ITileCacheInfoEx.put_PreciseDpi

           INPUT
            pDpi                : double'''
        return super(ITileCacheInfoEx, self).put_PreciseDpi(pDpi)
    def get_LODInfos(self):
        '''Method ITileCacheInfoEx.get_LODInfos

           OUTPUT
            ppLODInfos          : ILODInfos**'''
        return super(ITileCacheInfoEx, self).get_LODInfos()
    def putref_LODInfos(self, ppLODInfos):
        '''Method ITileCacheInfoEx.putref_LODInfos

           INPUT
            ppLODInfos          : ILODInfos*'''
        return super(ITileCacheInfoEx, self).putref_LODInfos(ppLODInfos)
    def ComputeResolutions(self):
        '''Method ITileCacheInfoEx.ComputeResolutions'''
        return super(ITileCacheInfoEx, self).ComputeResolutions()
    def ComputeScales(self):
        '''Method ITileCacheInfoEx.ComputeScales'''
        return super(ITileCacheInfoEx, self).ComputeScales()
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    Origin = property(get_Origin, put_Origin, None)
    PreciseDpi = property(get_PreciseDpi, put_PreciseDpi, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TileCols = property(get_TileCols, put_TileCols, None)
    TileRows = property(get_TileRows, put_TileRows, None)

class IServiceLayerCredits(_esriCarto.IServiceLayerCredits):
    _IID = uuid.UUID('b52367cf-3b14-444d-b4fa-06a984d6ed15')
    def get_ServiceLayerCreditsText(self, Separator):
        '''Method IServiceLayerCredits.get_ServiceLayerCreditsText

           INPUT
            Separator           : BSTR

           OUTPUT
            Credits             : BSTR*'''
        return super(IServiceLayerCredits, self).get_ServiceLayerCreditsText(Separator)
    ServiceLayerCreditsText = IndexProperty(get_ServiceLayerCreditsText, None)

class IPage(_esriCarto.IPage):
    _IID = uuid.UUID('2ab4981f-9406-11d0-87ef-080009ec732a')

    def __init__(self, *args, **kw):
        super(IPage, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FormID(self):
        '''Method IPage.get_FormID

           OUTPUT
            FormID              : esriPageFormID*'''
        return super(IPage, self).get_FormID()
    def put_FormID(self, FormID):
        '''Method IPage.put_FormID

           INPUT
            FormID              : esriPageFormID'''
        return super(IPage, self).put_FormID(FormID)
    def get_Orientation(self):
        '''Method IPage.get_Orientation

           OUTPUT
            Orientation         : short*'''
        return super(IPage, self).get_Orientation()
    def put_Orientation(self, Orientation):
        '''Method IPage.put_Orientation

           INPUT
            Orientation         : short'''
        return super(IPage, self).put_Orientation(Orientation)
    def get_Units(self):
        '''Method IPage.get_Units

           OUTPUT
            Units               : esriUnits*'''
        return super(IPage, self).get_Units()
    def put_Units(self, Units):
        '''Method IPage.put_Units

           INPUT
            Units               : esriUnits'''
        return super(IPage, self).put_Units(Units)
    def get_PrintableBounds(self):
        '''Method IPage.get_PrintableBounds

           OUTPUT
            PrintableBounds     : IEnvelope**'''
        return super(IPage, self).get_PrintableBounds()
    def get_IsPrintableAreaVisible(self):
        '''Method IPage.get_IsPrintableAreaVisible

           OUTPUT
            IsPrintableAreaVisible: VARIANT_BOOL*'''
        return super(IPage, self).get_IsPrintableAreaVisible()
    def put_IsPrintableAreaVisible(self, IsPrintableAreaVisible):
        '''Method IPage.put_IsPrintableAreaVisible

           INPUT
            IsPrintableAreaVisible: VARIANT_BOOL'''
        return super(IPage, self).put_IsPrintableAreaVisible(IsPrintableAreaVisible)
    def get_StretchGraphicsWithPage(self):
        '''Method IPage.get_StretchGraphicsWithPage

           OUTPUT
            StretchGraphicsWithPage: VARIANT_BOOL*'''
        return super(IPage, self).get_StretchGraphicsWithPage()
    def put_StretchGraphicsWithPage(self, StretchGraphicsWithPage):
        '''Method IPage.put_StretchGraphicsWithPage

           INPUT
            StretchGraphicsWithPage: VARIANT_BOOL'''
        return super(IPage, self).put_StretchGraphicsWithPage(StretchGraphicsWithPage)
    def get_BackgroundColor(self):
        '''Method IPage.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IPage, self).get_BackgroundColor()
    def put_BackgroundColor(self, Color):
        '''Method IPage.put_BackgroundColor

           INPUT
            Color               : IColor*'''
        return super(IPage, self).put_BackgroundColor(Color)
    def get_Border(self):
        '''Method IPage.get_Border

           OUTPUT
            Border              : IBorder**'''
        return super(IPage, self).get_Border()
    def put_Border(self, Border):
        '''Method IPage.put_Border

           INPUT
            Border              : IBorder*'''
        return super(IPage, self).put_Border(Border)
    def get_Background(self):
        '''Method IPage.get_Background

           OUTPUT
            Background          : IBackground**'''
        return super(IPage, self).get_Background()
    def put_Background(self, Background):
        '''Method IPage.put_Background

           INPUT
            Background          : IBackground*'''
        return super(IPage, self).put_Background(Background)
    def get_DelayEvents(self):
        '''Method IPage.get_DelayEvents

           OUTPUT
            DelayEvents         : VARIANT_BOOL*'''
        return super(IPage, self).get_DelayEvents()
    def put_DelayEvents(self, DelayEvents):
        '''Method IPage.put_DelayEvents

           INPUT
            DelayEvents         : VARIANT_BOOL'''
        return super(IPage, self).put_DelayEvents(DelayEvents)
    def get_PageToPrinterMapping(self):
        '''Method IPage.get_PageToPrinterMapping

           OUTPUT
            mode                : esriPageToPrinterMapping*'''
        return super(IPage, self).get_PageToPrinterMapping()
    def put_PageToPrinterMapping(self, mode):
        '''Method IPage.put_PageToPrinterMapping

           INPUT
            mode                : esriPageToPrinterMapping'''
        return super(IPage, self).put_PageToPrinterMapping(mode)
    def QuerySize(self):
        '''Method IPage.QuerySize

           OUTPUTS
            Width               : double*
            Height              : double*'''
        return super(IPage, self).QuerySize()
    def PutCustomSize(self, Width, Height):
        '''Method IPage.PutCustomSize

           INPUTS
            Width               : double
            Height              : double'''
        return super(IPage, self).PutCustomSize(Width, Height)
    def PrinterPageCount(self, Printer, Overlap):
        '''Method IPage.PrinterPageCount

           INPUTS
            Printer             : IPrinter*
            Overlap             : double

           OUTPUT
            PageCount           : short*'''
        return super(IPage, self).PrinterPageCount(Printer, Overlap)
    def GetPageBounds(self, Printer, currentPage, Overlap, pageBounds):
        '''Method IPage.GetPageBounds

           INPUTS
            Printer             : IPrinter*
            currentPage         : short
            Overlap             : double
            pageBounds          : IEnvelope*'''
        return super(IPage, self).GetPageBounds(Printer, currentPage, Overlap, pageBounds)
    def GetDeviceBounds(self, Printer, currentPage, Overlap, Resolution, deviceBounds):
        '''Method IPage.GetDeviceBounds

           INPUTS
            Printer             : IPrinter*
            currentPage         : short
            Overlap             : double
            Resolution          : short
            deviceBounds        : IEnvelope*'''
        return super(IPage, self).GetDeviceBounds(Printer, currentPage, Overlap, Resolution, deviceBounds)
    def DrawPaper(self, Display, eraseColor):
        '''Method IPage.DrawPaper

           INPUTS
            Display             : IDisplay*
            eraseColor          : IColor*'''
        return super(IPage, self).DrawPaper(Display, eraseColor)
    def DrawBackground(self, Display):
        '''Method IPage.DrawBackground

           INPUT
            Display             : IDisplay*'''
        return super(IPage, self).DrawBackground(Display)
    def DrawPrintableArea(self, Display):
        '''Method IPage.DrawPrintableArea

           INPUT
            Display             : IDisplay*'''
        return super(IPage, self).DrawPrintableArea(Display)
    def DrawBorder(self, Display):
        '''Method IPage.DrawBorder

           INPUT
            Display             : IDisplay*'''
        return super(IPage, self).DrawBorder(Display)
    def PrinterChanged(self, Printer):
        '''Method IPage.PrinterChanged

           INPUT
            Printer             : IPrinter*'''
        return super(IPage, self).PrinterChanged(Printer)
    Background = property(get_Background, put_Background, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    Border = property(get_Border, put_Border, None)
    DelayEvents = property(get_DelayEvents, put_DelayEvents, None)
    FormID = property(get_FormID, put_FormID, None)
    IsPrintableAreaVisible = property(get_IsPrintableAreaVisible, put_IsPrintableAreaVisible, None)
    Orientation = property(get_Orientation, put_Orientation, None)
    PageToPrinterMapping = property(get_PageToPrinterMapping, put_PageToPrinterMapping, None)
    PrintableBounds = property(get_PrintableBounds, None, None)
    StretchGraphicsWithPage = property(get_StretchGraphicsWithPage, put_StretchGraphicsWithPage, None)
    Units = property(get_Units, put_Units, None)

class IRulerSettings(_esriCarto.IRulerSettings):
    _IID = uuid.UUID('31e081a9-cb02-11d1-876c-0000f8751720')

    def __init__(self, *args, **kw):
        super(IRulerSettings, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SmallestDivision(self):
        '''Method IRulerSettings.get_SmallestDivision

           OUTPUT
            rulerDivision       : double*'''
        return super(IRulerSettings, self).get_SmallestDivision()
    def put_SmallestDivision(self, rulerDivision):
        '''Method IRulerSettings.put_SmallestDivision

           INPUT
            rulerDivision       : double'''
        return super(IRulerSettings, self).put_SmallestDivision(rulerDivision)
    SmallestDivision = property(get_SmallestDivision, put_SmallestDivision, None)

class ISnapGrid(_esriCarto.ISnapGrid):
    _IID = uuid.UUID('31e081aa-cb02-11d1-876c-0000f8751720')

    def __init__(self, *args, **kw):
        super(ISnapGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsVisible(self):
        '''Method ISnapGrid.get_IsVisible

           OUTPUT
            IsVisible           : VARIANT_BOOL*'''
        return super(ISnapGrid, self).get_IsVisible()
    def put_IsVisible(self, IsVisible):
        '''Method ISnapGrid.put_IsVisible

           INPUT
            IsVisible           : VARIANT_BOOL'''
        return super(ISnapGrid, self).put_IsVisible(IsVisible)
    def get_HorizontalSpacing(self):
        '''Method ISnapGrid.get_HorizontalSpacing

           OUTPUT
            spacing             : double*'''
        return super(ISnapGrid, self).get_HorizontalSpacing()
    def put_HorizontalSpacing(self, spacing):
        '''Method ISnapGrid.put_HorizontalSpacing

           INPUT
            spacing             : double'''
        return super(ISnapGrid, self).put_HorizontalSpacing(spacing)
    def get_VerticalSpacing(self):
        '''Method ISnapGrid.get_VerticalSpacing

           OUTPUT
            spacing             : double*'''
        return super(ISnapGrid, self).get_VerticalSpacing()
    def put_VerticalSpacing(self, spacing):
        '''Method ISnapGrid.put_VerticalSpacing

           INPUT
            spacing             : double'''
        return super(ISnapGrid, self).put_VerticalSpacing(spacing)
    def Draw(self, Display, Page):
        '''Method ISnapGrid.Draw

           INPUTS
            Display             : IDisplay*
            Page                : IPage*'''
        return super(ISnapGrid, self).Draw(Display, Page)
    HorizontalSpacing = property(get_HorizontalSpacing, put_HorizontalSpacing, None)
    IsVisible = property(get_IsVisible, put_IsVisible, None)
    VerticalSpacing = property(get_VerticalSpacing, put_VerticalSpacing, None)

class ISnapGuides(_esriCarto.ISnapGuides):
    _IID = uuid.UUID('31e081ab-cb02-11d1-876c-0000f8751720')

    def __init__(self, *args, **kw):
        super(ISnapGuides, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AreVisible(self):
        '''Method ISnapGuides.get_AreVisible

           OUTPUT
            AreVisible          : VARIANT_BOOL*'''
        return super(ISnapGuides, self).get_AreVisible()
    def put_AreVisible(self, AreVisible):
        '''Method ISnapGuides.put_AreVisible

           INPUT
            AreVisible          : VARIANT_BOOL'''
        return super(ISnapGuides, self).put_AreVisible(AreVisible)
    def get_DrawLevel(self):
        '''Method ISnapGuides.get_DrawLevel

           OUTPUT
            DrawLevel           : esriViewDrawPhase*'''
        return super(ISnapGuides, self).get_DrawLevel()
    def put_DrawLevel(self, DrawLevel):
        '''Method ISnapGuides.put_DrawLevel

           INPUT
            DrawLevel           : esriViewDrawPhase'''
        return super(ISnapGuides, self).put_DrawLevel(DrawLevel)
    def get_GuideCount(self):
        '''Method ISnapGuides.get_GuideCount

           OUTPUT
            Count               : long*'''
        return super(ISnapGuides, self).get_GuideCount()
    def put_Guide(self, idx, pos):
        '''Method ISnapGuides.put_Guide

           INPUTS
            idx                 : long
            pos                 : double'''
        return super(ISnapGuides, self).put_Guide(idx, pos)
    def get_Guide(self, idx):
        '''Method ISnapGuides.get_Guide

           INPUT
            idx                 : long

           OUTPUT
            pos                 : double*'''
        return super(ISnapGuides, self).get_Guide(idx)
    def AddGuide(self, pos):
        '''Method ISnapGuides.AddGuide

           INPUT
            pos                 : double'''
        return super(ISnapGuides, self).AddGuide(pos)
    def RemoveGuide(self, idx):
        '''Method ISnapGuides.RemoveGuide

           INPUT
            idx                 : long'''
        return super(ISnapGuides, self).RemoveGuide(idx)
    def RemoveAllGuides(self):
        '''Method ISnapGuides.RemoveAllGuides'''
        return super(ISnapGuides, self).RemoveAllGuides()
    def Draw(self, Display, IsHorizontal):
        '''Method ISnapGuides.Draw

           INPUTS
            Display             : IDisplay*
            IsHorizontal        : VARIANT_BOOL'''
        return super(ISnapGuides, self).Draw(Display, IsHorizontal)
    def DrawHighlight(self, Display, IsHorizontal):
        '''Method ISnapGuides.DrawHighlight

           INPUTS
            Display             : IDisplay*
            IsHorizontal        : VARIANT_BOOL'''
        return super(ISnapGuides, self).DrawHighlight(Display, IsHorizontal)
    AreVisible = property(get_AreVisible, put_AreVisible, None)
    DrawLevel = property(get_DrawLevel, put_DrawLevel, None)
    Guide = property(None, put_Guide, None)
    GuideCount = property(get_GuideCount, None, None)
    Guide = IndexProperty(get_Guide, None)

class IImageInset(_esriCarto.IImageInset):
    _IID = uuid.UUID('fb062447-5c5d-494e-8a87-02261e7f87a9')

    def __init__(self, *args, **kw):
        super(IImageInset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Layer(self):
        '''Method IImageInset.get_Layer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IImageInset, self).get_Layer()
    def putref_Layer(self, ppLayer):
        '''Method IImageInset.putref_Layer

           INPUT
            ppLayer             : ILayer*'''
        return super(IImageInset, self).putref_Layer(ppLayer)
    def get_MapCenter(self):
        '''Method IImageInset.get_MapCenter

           OUTPUT
            pCenter             : IPoint**'''
        return super(IImageInset, self).get_MapCenter()
    def putref_MapCenter(self, pCenter):
        '''Method IImageInset.putref_MapCenter

           INPUT
            pCenter             : IPoint*'''
        return super(IImageInset, self).putref_MapCenter(pCenter)
    def putref_PointSymbol(self, _arg1):
        '''Method IImageInset.putref_PointSymbol

           INPUT
            _arg1               : ISymbol*'''
        return super(IImageInset, self).putref_PointSymbol(_arg1)
    def putref_SelectionSymbol(self, _arg1):
        '''Method IImageInset.putref_SelectionSymbol

           INPUT
            _arg1               : ISymbol*'''
        return super(IImageInset, self).putref_SelectionSymbol(_arg1)
    Layer = property(get_Layer, putref_Layer, None)
    MapCenter = property(get_MapCenter, putref_MapCenter, None)
    PointSymbol = property(None, putref_PointSymbol, None)
    SelectionSymbol = property(None, putref_SelectionSymbol, None)

class IMapGridBorder(_esriCarto.IMapGridBorder):
    _IID = uuid.UUID('ac81ecf9-9ee4-11d2-aadf-000000000000')
    def get_DisplayName(self):
        '''Method IMapGridBorder.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IMapGridBorder, self).get_DisplayName()
    def get_Width(self):
        '''Method IMapGridBorder.get_Width

           OUTPUT
            widthPts            : double*'''
        return super(IMapGridBorder, self).get_Width()
    def Draw(self, Display, frameGeometry, mapGeometry):
        '''Method IMapGridBorder.Draw

           INPUTS
            Display             : IDisplay*
            frameGeometry       : IGeometry*
            mapGeometry         : IGeometry*'''
        return super(IMapGridBorder, self).Draw(Display, frameGeometry, mapGeometry)
    DisplayName = property(get_DisplayName, None, None)
    Width = property(get_Width, None, None)

class IGridLabelExport(_esriCarto.IGridLabelExport):
    _IID = uuid.UUID('ed656e23-e953-11d3-9fda-00c04f6bc78e')
    def CreateElement(self, LabelValue, Location, axis, Display):
        '''Method IGridLabelExport.CreateElement

           INPUTS
            LabelValue          : double
            Location            : IPoint*
            axis                : esriGridAxisEnum
            Display             : IDisplay*

           OUTPUT
            graphic             : IElement**'''
        return super(IGridLabelExport, self).CreateElement(LabelValue, Location, axis, Display)

class IDMSGridLabel(_esriCarto.IDMSGridLabel):
    _IID = uuid.UUID('ce41c503-9df9-11d2-aade-000000000000')

    def __init__(self, *args, **kw):
        super(IDMSGridLabel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LabelType(self):
        '''Method IDMSGridLabel.get_LabelType

           OUTPUT
            LabelType           : esriDMSGridLabelType*'''
        return super(IDMSGridLabel, self).get_LabelType()
    def put_LabelType(self, LabelType):
        '''Method IDMSGridLabel.put_LabelType

           INPUT
            LabelType           : esriDMSGridLabelType'''
        return super(IDMSGridLabel, self).put_LabelType(LabelType)
    def get_LatLonFormat(self):
        '''Method IDMSGridLabel.get_LatLonFormat

           OUTPUT
            Format              : ILatLonFormat**'''
        return super(IDMSGridLabel, self).get_LatLonFormat()
    def put_LatLonFormat(self, Format):
        '''Method IDMSGridLabel.put_LatLonFormat

           INPUT
            Format              : ILatLonFormat*'''
        return super(IDMSGridLabel, self).put_LatLonFormat(Format)
    def get_ShowZeroMinutes(self):
        '''Method IDMSGridLabel.get_ShowZeroMinutes

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IDMSGridLabel, self).get_ShowZeroMinutes()
    def put_ShowZeroMinutes(self, Show):
        '''Method IDMSGridLabel.put_ShowZeroMinutes

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IDMSGridLabel, self).put_ShowZeroMinutes(Show)
    def get_ShowZeroSeconds(self):
        '''Method IDMSGridLabel.get_ShowZeroSeconds

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IDMSGridLabel, self).get_ShowZeroSeconds()
    def put_ShowZeroSeconds(self, Show):
        '''Method IDMSGridLabel.put_ShowZeroSeconds

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IDMSGridLabel, self).put_ShowZeroSeconds(Show)
    def get_MinutesFont(self):
        '''Method IDMSGridLabel.get_MinutesFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IDMSGridLabel, self).get_MinutesFont()
    def put_MinutesFont(self, Font):
        '''Method IDMSGridLabel.put_MinutesFont

           INPUT
            Font                : IFontDisp*'''
        return super(IDMSGridLabel, self).put_MinutesFont(Font)
    def get_MinutesColor(self):
        '''Method IDMSGridLabel.get_MinutesColor

           OUTPUT
            Color               : IColor**'''
        return super(IDMSGridLabel, self).get_MinutesColor()
    def put_MinutesColor(self, Color):
        '''Method IDMSGridLabel.put_MinutesColor

           INPUT
            Color               : IColor*'''
        return super(IDMSGridLabel, self).put_MinutesColor(Color)
    def get_SecondsFont(self):
        '''Method IDMSGridLabel.get_SecondsFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IDMSGridLabel, self).get_SecondsFont()
    def put_SecondsFont(self, Font):
        '''Method IDMSGridLabel.put_SecondsFont

           INPUT
            Font                : IFontDisp*'''
        return super(IDMSGridLabel, self).put_SecondsFont(Font)
    def get_SecondsColor(self):
        '''Method IDMSGridLabel.get_SecondsColor

           OUTPUT
            Color               : IColor**'''
        return super(IDMSGridLabel, self).get_SecondsColor()
    def put_SecondsColor(self, Color):
        '''Method IDMSGridLabel.put_SecondsColor

           INPUT
            Color               : IColor*'''
        return super(IDMSGridLabel, self).put_SecondsColor(Color)
    LabelType = property(get_LabelType, put_LabelType, None)
    LatLonFormat = property(get_LatLonFormat, put_LatLonFormat, None)
    MinutesColor = property(get_MinutesColor, put_MinutesColor, None)
    MinutesFont = property(get_MinutesFont, put_MinutesFont, None)
    SecondsColor = property(get_SecondsColor, put_SecondsColor, None)
    SecondsFont = property(get_SecondsFont, put_SecondsFont, None)
    ShowZeroMinutes = property(get_ShowZeroMinutes, put_ShowZeroMinutes, None)
    ShowZeroSeconds = property(get_ShowZeroSeconds, put_ShowZeroSeconds, None)

class IFormattedGridLabel(_esriCarto.IFormattedGridLabel):
    _IID = uuid.UUID('ce41c505-9df9-11d2-aade-000000000000')

    def __init__(self, *args, **kw):
        super(IFormattedGridLabel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Format(self):
        '''Method IFormattedGridLabel.get_Format

           OUTPUT
            Format              : INumberFormat**'''
        return super(IFormattedGridLabel, self).get_Format()
    def put_Format(self, Format):
        '''Method IFormattedGridLabel.put_Format

           INPUT
            Format              : INumberFormat*'''
        return super(IFormattedGridLabel, self).put_Format(Format)
    Format = property(get_Format, put_Format, None)

class IMixedFontGridLabel(_esriCarto.IMixedFontGridLabel):
    _IID = uuid.UUID('ce41c509-9df9-11d2-aade-000000000000')

    def __init__(self, *args, **kw):
        super(IMixedFontGridLabel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NumGroupedDigits(self):
        '''Method IMixedFontGridLabel.get_NumGroupedDigits

           OUTPUT
            numGrouped          : short*'''
        return super(IMixedFontGridLabel, self).get_NumGroupedDigits()
    def put_NumGroupedDigits(self, numGrouped):
        '''Method IMixedFontGridLabel.put_NumGroupedDigits

           INPUT
            numGrouped          : short'''
        return super(IMixedFontGridLabel, self).put_NumGroupedDigits(numGrouped)
    def get_SecondaryFont(self):
        '''Method IMixedFontGridLabel.get_SecondaryFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IMixedFontGridLabel, self).get_SecondaryFont()
    def put_SecondaryFont(self, Font):
        '''Method IMixedFontGridLabel.put_SecondaryFont

           INPUT
            Font                : IFontDisp*'''
        return super(IMixedFontGridLabel, self).put_SecondaryFont(Font)
    def get_SecondaryColor(self):
        '''Method IMixedFontGridLabel.get_SecondaryColor

           OUTPUT
            Color               : IColor**'''
        return super(IMixedFontGridLabel, self).get_SecondaryColor()
    def put_SecondaryColor(self, Color):
        '''Method IMixedFontGridLabel.put_SecondaryColor

           INPUT
            Color               : IColor*'''
        return super(IMixedFontGridLabel, self).put_SecondaryColor(Color)
    NumGroupedDigits = property(get_NumGroupedDigits, put_NumGroupedDigits, None)
    SecondaryColor = property(get_SecondaryColor, put_SecondaryColor, None)
    SecondaryFont = property(get_SecondaryFont, put_SecondaryFont, None)

class IMixedFontGridLabel2(_esriCarto.IMixedFontGridLabel2):
    _IID = uuid.UUID('f3b2fce0-2f21-42de-af4f-10b4c99579c3')

    def __init__(self, *args, **kw):
        super(IMixedFontGridLabel2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NumGroupedDigits(self):
        '''Method IMixedFontGridLabel2.get_NumGroupedDigits

           OUTPUT
            numGrouped          : short*'''
        return super(IMixedFontGridLabel2, self).get_NumGroupedDigits()
    def put_NumGroupedDigits(self, numGrouped):
        '''Method IMixedFontGridLabel2.put_NumGroupedDigits

           INPUT
            numGrouped          : short'''
        return super(IMixedFontGridLabel2, self).put_NumGroupedDigits(numGrouped)
    def get_SecondaryFont(self):
        '''Method IMixedFontGridLabel2.get_SecondaryFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IMixedFontGridLabel2, self).get_SecondaryFont()
    def put_SecondaryFont(self, Font):
        '''Method IMixedFontGridLabel2.put_SecondaryFont

           INPUT
            Font                : IFontDisp*'''
        return super(IMixedFontGridLabel2, self).put_SecondaryFont(Font)
    def get_SecondaryColor(self):
        '''Method IMixedFontGridLabel2.get_SecondaryColor

           OUTPUT
            Color               : IColor**'''
        return super(IMixedFontGridLabel2, self).get_SecondaryColor()
    def put_SecondaryColor(self, Color):
        '''Method IMixedFontGridLabel2.put_SecondaryColor

           INPUT
            Color               : IColor*'''
        return super(IMixedFontGridLabel2, self).put_SecondaryColor(Color)
    def get_SecondaryFontSize(self):
        '''Method IMixedFontGridLabel2.get_SecondaryFontSize

           OUTPUT
            Size                : double*'''
        return super(IMixedFontGridLabel2, self).get_SecondaryFontSize()
    def put_SecondaryFontSize(self, Size):
        '''Method IMixedFontGridLabel2.put_SecondaryFontSize

           INPUT
            Size                : double'''
        return super(IMixedFontGridLabel2, self).put_SecondaryFontSize(Size)
    NumGroupedDigits = property(get_NumGroupedDigits, put_NumGroupedDigits, None)
    SecondaryColor = property(get_SecondaryColor, put_SecondaryColor, None)
    SecondaryFont = property(get_SecondaryFont, put_SecondaryFont, None)
    SecondaryFontSize = property(get_SecondaryFontSize, put_SecondaryFontSize, None)

class IIndexGridTabStyle(_esriCarto.IIndexGridTabStyle):
    _IID = uuid.UUID('ce41c50a-9df9-11d2-aade-000000000000')

    def __init__(self, *args, **kw):
        super(IIndexGridTabStyle, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ForegroundColor(self):
        '''Method IIndexGridTabStyle.get_ForegroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IIndexGridTabStyle, self).get_ForegroundColor()
    def put_ForegroundColor(self, Color):
        '''Method IIndexGridTabStyle.put_ForegroundColor

           INPUT
            Color               : IColor*'''
        return super(IIndexGridTabStyle, self).put_ForegroundColor(Color)
    def get_OutlineColor(self):
        '''Method IIndexGridTabStyle.get_OutlineColor

           OUTPUT
            Color               : IColor**'''
        return super(IIndexGridTabStyle, self).get_OutlineColor()
    def put_OutlineColor(self, Color):
        '''Method IIndexGridTabStyle.put_OutlineColor

           INPUT
            Color               : IColor*'''
        return super(IIndexGridTabStyle, self).put_OutlineColor(Color)
    def get_Thickness(self):
        '''Method IIndexGridTabStyle.get_Thickness

           OUTPUT
            thicknessPts        : double*'''
        return super(IIndexGridTabStyle, self).get_Thickness()
    def put_Thickness(self, thicknessPts):
        '''Method IIndexGridTabStyle.put_Thickness

           INPUT
            thicknessPts        : double'''
        return super(IIndexGridTabStyle, self).put_Thickness(thicknessPts)
    def PrepareDraw(self, LabelValue, tabWidthPage, axis):
        '''Method IIndexGridTabStyle.PrepareDraw

           INPUTS
            LabelValue          : BSTR
            tabWidthPage        : double
            axis                : esriGridAxisEnum'''
        return super(IIndexGridTabStyle, self).PrepareDraw(LabelValue, tabWidthPage, axis)
    ForegroundColor = property(get_ForegroundColor, put_ForegroundColor, None)
    OutlineColor = property(get_OutlineColor, put_OutlineColor, None)
    Thickness = property(get_Thickness, put_Thickness, None)

class IBackgroundTabStyle(_esriCarto.IBackgroundTabStyle):
    _IID = uuid.UUID('ce41c50c-9df9-11d2-aade-000000000000')

    def __init__(self, *args, **kw):
        super(IBackgroundTabStyle, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BackgroundType(self):
        '''Method IBackgroundTabStyle.get_BackgroundType

           OUTPUT
            tabType             : esriBackgroundTabType*'''
        return super(IBackgroundTabStyle, self).get_BackgroundType()
    def put_BackgroundType(self, tabType):
        '''Method IBackgroundTabStyle.put_BackgroundType

           INPUT
            tabType             : esriBackgroundTabType'''
        return super(IBackgroundTabStyle, self).put_BackgroundType(tabType)
    BackgroundType = property(get_BackgroundType, put_BackgroundType, None)

class ISimpleMapGridBorder(_esriCarto.ISimpleMapGridBorder):
    _IID = uuid.UUID('ac81ecfa-9ee4-11d2-aadf-000000000000')

    def __init__(self, *args, **kw):
        super(ISimpleMapGridBorder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LineSymbol(self):
        '''Method ISimpleMapGridBorder.get_LineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ISimpleMapGridBorder, self).get_LineSymbol()
    def put_LineSymbol(self, Symbol):
        '''Method ISimpleMapGridBorder.put_LineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ISimpleMapGridBorder, self).put_LineSymbol(Symbol)
    LineSymbol = property(get_LineSymbol, put_LineSymbol, None)

class ICalibratedMapGridBorder(_esriCarto.ICalibratedMapGridBorder):
    _IID = uuid.UUID('6ca416af-e160-11d2-9f4e-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(ICalibratedMapGridBorder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ForegroundColor(self):
        '''Method ICalibratedMapGridBorder.get_ForegroundColor

           OUTPUT
            Color               : IColor**'''
        return super(ICalibratedMapGridBorder, self).get_ForegroundColor()
    def put_ForegroundColor(self, Color):
        '''Method ICalibratedMapGridBorder.put_ForegroundColor

           INPUT
            Color               : IColor*'''
        return super(ICalibratedMapGridBorder, self).put_ForegroundColor(Color)
    def get_BackgroundColor(self):
        '''Method ICalibratedMapGridBorder.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(ICalibratedMapGridBorder, self).get_BackgroundColor()
    def put_BackgroundColor(self, Color):
        '''Method ICalibratedMapGridBorder.put_BackgroundColor

           INPUT
            Color               : IColor*'''
        return super(ICalibratedMapGridBorder, self).put_BackgroundColor(Color)
    def get_BorderWidth(self):
        '''Method ICalibratedMapGridBorder.get_BorderWidth

           OUTPUT
            widthPts            : double*'''
        return super(ICalibratedMapGridBorder, self).get_BorderWidth()
    def put_BorderWidth(self, widthPts):
        '''Method ICalibratedMapGridBorder.put_BorderWidth

           INPUT
            widthPts            : double'''
        return super(ICalibratedMapGridBorder, self).put_BorderWidth(widthPts)
    def get_Interval(self):
        '''Method ICalibratedMapGridBorder.get_Interval

           OUTPUT
            intervalPts         : double*'''
        return super(ICalibratedMapGridBorder, self).get_Interval()
    def put_Interval(self, intervalPts):
        '''Method ICalibratedMapGridBorder.put_Interval

           INPUT
            intervalPts         : double'''
        return super(ICalibratedMapGridBorder, self).put_Interval(intervalPts)
    def get_Alternating(self):
        '''Method ICalibratedMapGridBorder.get_Alternating

           OUTPUT
            Alternating         : VARIANT_BOOL*'''
        return super(ICalibratedMapGridBorder, self).get_Alternating()
    def put_Alternating(self, Alternating):
        '''Method ICalibratedMapGridBorder.put_Alternating

           INPUT
            Alternating         : VARIANT_BOOL'''
        return super(ICalibratedMapGridBorder, self).put_Alternating(Alternating)
    Alternating = property(get_Alternating, put_Alternating, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    BorderWidth = property(get_BorderWidth, put_BorderWidth, None)
    ForegroundColor = property(get_ForegroundColor, put_ForegroundColor, None)
    Interval = property(get_Interval, put_Interval, None)

class IMeasuredGrid(_esriCarto.IMeasuredGrid):
    _IID = uuid.UUID('4f69021f-a5c1-11d2-ae82-080009ec732a')

    def __init__(self, *args, **kw):
        super(IMeasuredGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_XOrigin(self):
        '''Method IMeasuredGrid.get_XOrigin

           OUTPUT
            Origin              : double*'''
        return super(IMeasuredGrid, self).get_XOrigin()
    def put_XOrigin(self, Origin):
        '''Method IMeasuredGrid.put_XOrigin

           INPUT
            Origin              : double'''
        return super(IMeasuredGrid, self).put_XOrigin(Origin)
    def get_XIntervalSize(self):
        '''Method IMeasuredGrid.get_XIntervalSize

           OUTPUT
            Interval            : double*'''
        return super(IMeasuredGrid, self).get_XIntervalSize()
    def put_XIntervalSize(self, Interval):
        '''Method IMeasuredGrid.put_XIntervalSize

           INPUT
            Interval            : double'''
        return super(IMeasuredGrid, self).put_XIntervalSize(Interval)
    def get_YOrigin(self):
        '''Method IMeasuredGrid.get_YOrigin

           OUTPUT
            Origin              : double*'''
        return super(IMeasuredGrid, self).get_YOrigin()
    def put_YOrigin(self, Origin):
        '''Method IMeasuredGrid.put_YOrigin

           INPUT
            Origin              : double'''
        return super(IMeasuredGrid, self).put_YOrigin(Origin)
    def get_YIntervalSize(self):
        '''Method IMeasuredGrid.get_YIntervalSize

           OUTPUT
            Interval            : double*'''
        return super(IMeasuredGrid, self).get_YIntervalSize()
    def put_YIntervalSize(self, Interval):
        '''Method IMeasuredGrid.put_YIntervalSize

           INPUT
            Interval            : double'''
        return super(IMeasuredGrid, self).put_YIntervalSize(Interval)
    def get_Units(self):
        '''Method IMeasuredGrid.get_Units

           OUTPUT
            unitsCode           : esriUnits*'''
        return super(IMeasuredGrid, self).get_Units()
    def put_Units(self, unitsCode):
        '''Method IMeasuredGrid.put_Units

           INPUT
            unitsCode           : esriUnits'''
        return super(IMeasuredGrid, self).put_Units(unitsCode)
    def get_FixedOrigin(self):
        '''Method IMeasuredGrid.get_FixedOrigin

           OUTPUT
            fixed               : VARIANT_BOOL*'''
        return super(IMeasuredGrid, self).get_FixedOrigin()
    def put_FixedOrigin(self, fixed):
        '''Method IMeasuredGrid.put_FixedOrigin

           INPUT
            fixed               : VARIANT_BOOL'''
        return super(IMeasuredGrid, self).put_FixedOrigin(fixed)
    FixedOrigin = property(get_FixedOrigin, put_FixedOrigin, None)
    Units = property(get_Units, put_Units, None)
    XIntervalSize = property(get_XIntervalSize, put_XIntervalSize, None)
    XOrigin = property(get_XOrigin, put_XOrigin, None)
    YIntervalSize = property(get_YIntervalSize, put_YIntervalSize, None)
    YOrigin = property(get_YOrigin, put_YOrigin, None)

class IProjectedGrid(_esriCarto.IProjectedGrid):
    _IID = uuid.UUID('0fe6aea3-d8de-11d2-9f45-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(IProjectedGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method IProjectedGrid.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IProjectedGrid, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IProjectedGrid.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IProjectedGrid, self).putref_SpatialReference(SpatialReference)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IMapFrameEvents(_esriCarto.IMapFrameEvents):
    _IID = uuid.UUID('fe3115eb-ed6c-11d0-8683-0000f8751720')
    def MapFrameResized(self):
        '''Method IMapFrameEvents.MapFrameResized'''
        return super(IMapFrameEvents, self).MapFrameResized()

class IGridAxisTicks(_esriCarto.IGridAxisTicks):
    _IID = uuid.UUID('864e5227-9809-4a48-8309-6ec640c63b30')

    def __init__(self, *args, **kw):
        super(IGridAxisTicks, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AxisTickOffset(self):
        '''Method IGridAxisTicks.get_AxisTickOffset

           OUTPUT
            offsetPts           : double*'''
        return super(IGridAxisTicks, self).get_AxisTickOffset()
    def put_AxisTickOffset(self, offsetPts):
        '''Method IGridAxisTicks.put_AxisTickOffset

           INPUT
            offsetPts           : double'''
        return super(IGridAxisTicks, self).put_AxisTickOffset(offsetPts)
    AxisTickOffset = property(get_AxisTickOffset, put_AxisTickOffset, None)

class IGridHatch(_esriCarto.IGridHatch):
    _IID = uuid.UUID('12700210-876c-4559-9fcf-aab238008832')

    def __init__(self, *args, **kw):
        super(IGridHatch, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HatchIntervalX(self):
        '''Method IGridHatch.get_HatchIntervalX

           OUTPUT
            Interval            : double*'''
        return super(IGridHatch, self).get_HatchIntervalX()
    def put_HatchIntervalX(self, Interval):
        '''Method IGridHatch.put_HatchIntervalX

           INPUT
            Interval            : double'''
        return super(IGridHatch, self).put_HatchIntervalX(Interval)
    def get_HatchIntervalY(self):
        '''Method IGridHatch.get_HatchIntervalY

           OUTPUT
            Interval            : double*'''
        return super(IGridHatch, self).get_HatchIntervalY()
    def put_HatchIntervalY(self, Interval):
        '''Method IGridHatch.put_HatchIntervalY

           INPUT
            Interval            : double'''
        return super(IGridHatch, self).put_HatchIntervalY(Interval)
    def get_HatchLineSymbol(self):
        '''Method IGridHatch.get_HatchLineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IGridHatch, self).get_HatchLineSymbol()
    def put_HatchLineSymbol(self, Symbol):
        '''Method IGridHatch.put_HatchLineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IGridHatch, self).put_HatchLineSymbol(Symbol)
    def get_HatchMarkerSymbol(self):
        '''Method IGridHatch.get_HatchMarkerSymbol

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IGridHatch, self).get_HatchMarkerSymbol()
    def put_HatchMarkerSymbol(self, Symbol):
        '''Method IGridHatch.put_HatchMarkerSymbol

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IGridHatch, self).put_HatchMarkerSymbol(Symbol)
    def get_HatchLength(self):
        '''Method IGridHatch.get_HatchLength

           OUTPUT
            Length              : double*'''
        return super(IGridHatch, self).get_HatchLength()
    def put_HatchLength(self, Length):
        '''Method IGridHatch.put_HatchLength

           INPUT
            Length              : double'''
        return super(IGridHatch, self).put_HatchLength(Length)
    def get_HatchDirectional(self):
        '''Method IGridHatch.get_HatchDirectional

           OUTPUT
            isDirectional       : VARIANT_BOOL*'''
        return super(IGridHatch, self).get_HatchDirectional()
    def put_HatchDirectional(self, isDirectional):
        '''Method IGridHatch.put_HatchDirectional

           INPUT
            isDirectional       : VARIANT_BOOL'''
        return super(IGridHatch, self).put_HatchDirectional(isDirectional)
    HatchDirectional = property(get_HatchDirectional, put_HatchDirectional, None)
    HatchIntervalX = property(get_HatchIntervalX, put_HatchIntervalX, None)
    HatchIntervalY = property(get_HatchIntervalY, put_HatchIntervalY, None)
    HatchLength = property(get_HatchLength, put_HatchLength, None)
    HatchLineSymbol = property(get_HatchLineSymbol, put_HatchLineSymbol, None)
    HatchMarkerSymbol = property(get_HatchMarkerSymbol, put_HatchMarkerSymbol, None)

class IGridInteriorLabels(_esriCarto.IGridInteriorLabels):
    _IID = uuid.UUID('a8bdc097-2002-4e08-bd4b-401599a58fa4')

    def __init__(self, *args, **kw):
        super(IGridInteriorLabels, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowInteriorLabels(self):
        '''Method IGridInteriorLabels.get_ShowInteriorLabels

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IGridInteriorLabels, self).get_ShowInteriorLabels()
    def put_ShowInteriorLabels(self, Show):
        '''Method IGridInteriorLabels.put_ShowInteriorLabels

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IGridInteriorLabels, self).put_ShowInteriorLabels(Show)
    def get_InteriorLabelIntervalX(self):
        '''Method IGridInteriorLabels.get_InteriorLabelIntervalX

           OUTPUT
            Interval            : double*'''
        return super(IGridInteriorLabels, self).get_InteriorLabelIntervalX()
    def put_InteriorLabelIntervalX(self, Interval):
        '''Method IGridInteriorLabels.put_InteriorLabelIntervalX

           INPUT
            Interval            : double'''
        return super(IGridInteriorLabels, self).put_InteriorLabelIntervalX(Interval)
    def get_InteriorLabelIntervalY(self):
        '''Method IGridInteriorLabels.get_InteriorLabelIntervalY

           OUTPUT
            Interval            : double*'''
        return super(IGridInteriorLabels, self).get_InteriorLabelIntervalY()
    def put_InteriorLabelIntervalY(self, Interval):
        '''Method IGridInteriorLabels.put_InteriorLabelIntervalY

           INPUT
            Interval            : double'''
        return super(IGridInteriorLabels, self).put_InteriorLabelIntervalY(Interval)
    InteriorLabelIntervalX = property(get_InteriorLabelIntervalX, put_InteriorLabelIntervalX, None)
    InteriorLabelIntervalY = property(get_InteriorLabelIntervalY, put_InteriorLabelIntervalY, None)
    ShowInteriorLabels = property(get_ShowInteriorLabels, put_ShowInteriorLabels, None)

class IDMSGridLabel2(_esriCarto.IDMSGridLabel2):
    _IID = uuid.UUID('a2068ced-ca6d-49d1-be32-0273ed984217')

    def __init__(self, *args, **kw):
        super(IDMSGridLabel2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AbbreviateLabels(self):
        '''Method IDMSGridLabel2.get_AbbreviateLabels

           OUTPUT
            abbrev              : VARIANT_BOOL*'''
        return super(IDMSGridLabel2, self).get_AbbreviateLabels()
    def put_AbbreviateLabels(self, abbrev):
        '''Method IDMSGridLabel2.put_AbbreviateLabels

           INPUT
            abbrev              : VARIANT_BOOL'''
        return super(IDMSGridLabel2, self).put_AbbreviateLabels(abbrev)
    def get_MinutesFontSize(self):
        '''Method IDMSGridLabel2.get_MinutesFontSize

           OUTPUT
            Size                : double*'''
        return super(IDMSGridLabel2, self).get_MinutesFontSize()
    def put_MinutesFontSize(self, Size):
        '''Method IDMSGridLabel2.put_MinutesFontSize

           INPUT
            Size                : double'''
        return super(IDMSGridLabel2, self).put_MinutesFontSize(Size)
    def get_SecondsFontSize(self):
        '''Method IDMSGridLabel2.get_SecondsFontSize

           OUTPUT
            Size                : double*'''
        return super(IDMSGridLabel2, self).get_SecondsFontSize()
    def put_SecondsFontSize(self, Size):
        '''Method IDMSGridLabel2.put_SecondsFontSize

           INPUT
            Size                : double'''
        return super(IDMSGridLabel2, self).put_SecondsFontSize(Size)
    def get_LabelType(self):
        '''Method IDMSGridLabel.get_LabelType (from IDMSGridLabel)

           OUTPUT
            LabelType           : esriDMSGridLabelType*'''
        return super(IDMSGridLabel2, self).get_LabelType()
    def put_LabelType(self, LabelType):
        '''Method IDMSGridLabel.put_LabelType (from IDMSGridLabel)

           INPUT
            LabelType           : esriDMSGridLabelType'''
        return super(IDMSGridLabel2, self).put_LabelType(LabelType)
    def get_LatLonFormat(self):
        '''Method IDMSGridLabel.get_LatLonFormat (from IDMSGridLabel)

           OUTPUT
            Format              : ILatLonFormat**'''
        return super(IDMSGridLabel2, self).get_LatLonFormat()
    def put_LatLonFormat(self, Format):
        '''Method IDMSGridLabel.put_LatLonFormat (from IDMSGridLabel)

           INPUT
            Format              : ILatLonFormat*'''
        return super(IDMSGridLabel2, self).put_LatLonFormat(Format)
    def get_ShowZeroMinutes(self):
        '''Method IDMSGridLabel.get_ShowZeroMinutes (from IDMSGridLabel)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IDMSGridLabel2, self).get_ShowZeroMinutes()
    def put_ShowZeroMinutes(self, Show):
        '''Method IDMSGridLabel.put_ShowZeroMinutes (from IDMSGridLabel)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IDMSGridLabel2, self).put_ShowZeroMinutes(Show)
    def get_ShowZeroSeconds(self):
        '''Method IDMSGridLabel.get_ShowZeroSeconds (from IDMSGridLabel)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IDMSGridLabel2, self).get_ShowZeroSeconds()
    def put_ShowZeroSeconds(self, Show):
        '''Method IDMSGridLabel.put_ShowZeroSeconds (from IDMSGridLabel)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IDMSGridLabel2, self).put_ShowZeroSeconds(Show)
    def get_MinutesFont(self):
        '''Method IDMSGridLabel.get_MinutesFont (from IDMSGridLabel)

           OUTPUT
            Font                : IFontDisp**'''
        return super(IDMSGridLabel2, self).get_MinutesFont()
    def put_MinutesFont(self, Font):
        '''Method IDMSGridLabel.put_MinutesFont (from IDMSGridLabel)

           INPUT
            Font                : IFontDisp*'''
        return super(IDMSGridLabel2, self).put_MinutesFont(Font)
    def get_MinutesColor(self):
        '''Method IDMSGridLabel.get_MinutesColor (from IDMSGridLabel)

           OUTPUT
            Color               : IColor**'''
        return super(IDMSGridLabel2, self).get_MinutesColor()
    def put_MinutesColor(self, Color):
        '''Method IDMSGridLabel.put_MinutesColor (from IDMSGridLabel)

           INPUT
            Color               : IColor*'''
        return super(IDMSGridLabel2, self).put_MinutesColor(Color)
    def get_SecondsFont(self):
        '''Method IDMSGridLabel.get_SecondsFont (from IDMSGridLabel)

           OUTPUT
            Font                : IFontDisp**'''
        return super(IDMSGridLabel2, self).get_SecondsFont()
    def put_SecondsFont(self, Font):
        '''Method IDMSGridLabel.put_SecondsFont (from IDMSGridLabel)

           INPUT
            Font                : IFontDisp*'''
        return super(IDMSGridLabel2, self).put_SecondsFont(Font)
    def get_SecondsColor(self):
        '''Method IDMSGridLabel.get_SecondsColor (from IDMSGridLabel)

           OUTPUT
            Color               : IColor**'''
        return super(IDMSGridLabel2, self).get_SecondsColor()
    def put_SecondsColor(self, Color):
        '''Method IDMSGridLabel.put_SecondsColor (from IDMSGridLabel)

           INPUT
            Color               : IColor*'''
        return super(IDMSGridLabel2, self).put_SecondsColor(Color)
    AbbreviateLabels = property(get_AbbreviateLabels, put_AbbreviateLabels, None)
    LabelType = property(get_LabelType, put_LabelType, None)
    LatLonFormat = property(get_LatLonFormat, put_LatLonFormat, None)
    MinutesColor = property(get_MinutesColor, put_MinutesColor, None)
    MinutesFont = property(get_MinutesFont, put_MinutesFont, None)
    MinutesFontSize = property(get_MinutesFontSize, put_MinutesFontSize, None)
    SecondsColor = property(get_SecondsColor, put_SecondsColor, None)
    SecondsFont = property(get_SecondsFont, put_SecondsFont, None)
    SecondsFontSize = property(get_SecondsFontSize, put_SecondsFontSize, None)
    ShowZeroMinutes = property(get_ShowZeroMinutes, put_ShowZeroMinutes, None)
    ShowZeroSeconds = property(get_ShowZeroSeconds, put_ShowZeroSeconds, None)

class IDMSGridLabel3(_esriCarto.IDMSGridLabel3):
    _IID = uuid.UUID('30052758-07da-41db-9469-b72f14e7a07b')

    def __init__(self, *args, **kw):
        super(IDMSGridLabel3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LabelType(self):
        '''Method IDMSGridLabel3.get_LabelType

           OUTPUT
            LabelType           : esriDMSGridLabelType*'''
        return super(IDMSGridLabel3, self).get_LabelType()
    def put_LabelType(self, LabelType):
        '''Method IDMSGridLabel3.put_LabelType

           INPUT
            LabelType           : esriDMSGridLabelType'''
        return super(IDMSGridLabel3, self).put_LabelType(LabelType)
    def get_LatLonFormat(self):
        '''Method IDMSGridLabel3.get_LatLonFormat

           OUTPUT
            Format              : ILatLonFormat**'''
        return super(IDMSGridLabel3, self).get_LatLonFormat()
    def put_LatLonFormat(self, Format):
        '''Method IDMSGridLabel3.put_LatLonFormat

           INPUT
            Format              : ILatLonFormat*'''
        return super(IDMSGridLabel3, self).put_LatLonFormat(Format)
    def get_ShowZeroMinutes(self):
        '''Method IDMSGridLabel3.get_ShowZeroMinutes

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IDMSGridLabel3, self).get_ShowZeroMinutes()
    def put_ShowZeroMinutes(self, Show):
        '''Method IDMSGridLabel3.put_ShowZeroMinutes

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IDMSGridLabel3, self).put_ShowZeroMinutes(Show)
    def get_ShowZeroSeconds(self):
        '''Method IDMSGridLabel3.get_ShowZeroSeconds

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IDMSGridLabel3, self).get_ShowZeroSeconds()
    def put_ShowZeroSeconds(self, Show):
        '''Method IDMSGridLabel3.put_ShowZeroSeconds

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IDMSGridLabel3, self).put_ShowZeroSeconds(Show)
    def get_MinutesFont(self):
        '''Method IDMSGridLabel3.get_MinutesFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IDMSGridLabel3, self).get_MinutesFont()
    def put_MinutesFont(self, Font):
        '''Method IDMSGridLabel3.put_MinutesFont

           INPUT
            Font                : IFontDisp*'''
        return super(IDMSGridLabel3, self).put_MinutesFont(Font)
    def get_MinutesColor(self):
        '''Method IDMSGridLabel3.get_MinutesColor

           OUTPUT
            Color               : IColor**'''
        return super(IDMSGridLabel3, self).get_MinutesColor()
    def put_MinutesColor(self, Color):
        '''Method IDMSGridLabel3.put_MinutesColor

           INPUT
            Color               : IColor*'''
        return super(IDMSGridLabel3, self).put_MinutesColor(Color)
    def get_SecondsFont(self):
        '''Method IDMSGridLabel3.get_SecondsFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IDMSGridLabel3, self).get_SecondsFont()
    def put_SecondsFont(self, Font):
        '''Method IDMSGridLabel3.put_SecondsFont

           INPUT
            Font                : IFontDisp*'''
        return super(IDMSGridLabel3, self).put_SecondsFont(Font)
    def get_SecondsColor(self):
        '''Method IDMSGridLabel3.get_SecondsColor

           OUTPUT
            Color               : IColor**'''
        return super(IDMSGridLabel3, self).get_SecondsColor()
    def put_SecondsColor(self, Color):
        '''Method IDMSGridLabel3.put_SecondsColor

           INPUT
            Color               : IColor*'''
        return super(IDMSGridLabel3, self).put_SecondsColor(Color)
    def get_AbbreviateLabels(self):
        '''Method IDMSGridLabel3.get_AbbreviateLabels

           OUTPUT
            abbrev              : VARIANT_BOOL*'''
        return super(IDMSGridLabel3, self).get_AbbreviateLabels()
    def put_AbbreviateLabels(self, abbrev):
        '''Method IDMSGridLabel3.put_AbbreviateLabels

           INPUT
            abbrev              : VARIANT_BOOL'''
        return super(IDMSGridLabel3, self).put_AbbreviateLabels(abbrev)
    def get_MinutesFontSize(self):
        '''Method IDMSGridLabel3.get_MinutesFontSize

           OUTPUT
            Size                : double*'''
        return super(IDMSGridLabel3, self).get_MinutesFontSize()
    def put_MinutesFontSize(self, Size):
        '''Method IDMSGridLabel3.put_MinutesFontSize

           INPUT
            Size                : double'''
        return super(IDMSGridLabel3, self).put_MinutesFontSize(Size)
    def get_SecondsFontSize(self):
        '''Method IDMSGridLabel3.get_SecondsFontSize

           OUTPUT
            Size                : double*'''
        return super(IDMSGridLabel3, self).get_SecondsFontSize()
    def put_SecondsFontSize(self, Size):
        '''Method IDMSGridLabel3.put_SecondsFontSize

           INPUT
            Size                : double'''
        return super(IDMSGridLabel3, self).put_SecondsFontSize(Size)
    def get_ShowMinusSign(self):
        '''Method IDMSGridLabel3.get_ShowMinusSign

           OUTPUT
            showMinus           : VARIANT_BOOL*'''
        return super(IDMSGridLabel3, self).get_ShowMinusSign()
    def put_ShowMinusSign(self, showMinus):
        '''Method IDMSGridLabel3.put_ShowMinusSign

           INPUT
            showMinus           : VARIANT_BOOL'''
        return super(IDMSGridLabel3, self).put_ShowMinusSign(showMinus)
    AbbreviateLabels = property(get_AbbreviateLabels, put_AbbreviateLabels, None)
    LabelType = property(get_LabelType, put_LabelType, None)
    LatLonFormat = property(get_LatLonFormat, put_LatLonFormat, None)
    MinutesColor = property(get_MinutesColor, put_MinutesColor, None)
    MinutesFont = property(get_MinutesFont, put_MinutesFont, None)
    MinutesFontSize = property(get_MinutesFontSize, put_MinutesFontSize, None)
    SecondsColor = property(get_SecondsColor, put_SecondsColor, None)
    SecondsFont = property(get_SecondsFont, put_SecondsFont, None)
    SecondsFontSize = property(get_SecondsFontSize, put_SecondsFontSize, None)
    ShowMinusSign = property(get_ShowMinusSign, put_ShowMinusSign, None)
    ShowZeroMinutes = property(get_ShowZeroMinutes, put_ShowZeroMinutes, None)
    ShowZeroSeconds = property(get_ShowZeroSeconds, put_ShowZeroSeconds, None)

class ICornerGridLabel(_esriCarto.ICornerGridLabel):
    _IID = uuid.UUID('8ed900fe-2573-4911-9c13-a24ac3bc3233')

    def __init__(self, *args, **kw):
        super(ICornerGridLabel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CornerLabel(self, corner):
        '''Method ICornerGridLabel.get_CornerLabel

           INPUT
            corner              : esriGridCornerEnum

           OUTPUT
            isCorner            : VARIANT_BOOL*'''
        return super(ICornerGridLabel, self).get_CornerLabel(corner)
    def put_CornerLabel(self, corner, isCorner):
        '''Method ICornerGridLabel.put_CornerLabel

           INPUTS
            corner              : esriGridCornerEnum
            isCorner            : VARIANT_BOOL'''
        return super(ICornerGridLabel, self).put_CornerLabel(corner, isCorner)
    def get_CornerValue(self, corner, axis):
        '''Method ICornerGridLabel.get_CornerValue

           INPUTS
            corner              : esriGridCornerEnum
            axis                : esriGridAxisEnum

           OUTPUT
            Value               : double*'''
        return super(ICornerGridLabel, self).get_CornerValue(corner, axis)
    def put_CornerValue(self, corner, axis, Value):
        '''Method ICornerGridLabel.put_CornerValue

           INPUTS
            corner              : esriGridCornerEnum
            axis                : esriGridAxisEnum
            Value               : double'''
        return super(ICornerGridLabel, self).put_CornerValue(corner, axis, Value)
    CornerLabel = property(None, put_CornerLabel, None)
    CornerValue = property(None, put_CornerValue, None)
    CornerLabel = IndexProperty(get_CornerLabel, None)

class IMgrsGrid(_esriCarto.IMgrsGrid):
    _IID = uuid.UUID('46240e54-b526-47f3-80a4-a7e2f2e1c262')

    def __init__(self, *args, **kw):
        super(IMgrsGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowGridSquareIdentifiers(self):
        '''Method IMgrsGrid.get_ShowGridSquareIdentifiers

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IMgrsGrid, self).get_ShowGridSquareIdentifiers()
    def put_ShowGridSquareIdentifiers(self, Show):
        '''Method IMgrsGrid.put_ShowGridSquareIdentifiers

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IMgrsGrid, self).put_ShowGridSquareIdentifiers(Show)
    def get_GridSquareLabelFont(self):
        '''Method IMgrsGrid.get_GridSquareLabelFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IMgrsGrid, self).get_GridSquareLabelFont()
    def put_GridSquareLabelFont(self, Font):
        '''Method IMgrsGrid.put_GridSquareLabelFont

           INPUT
            Font                : IFontDisp*'''
        return super(IMgrsGrid, self).put_GridSquareLabelFont(Font)
    def get_GridSquareLabelSize(self):
        '''Method IMgrsGrid.get_GridSquareLabelSize

           OUTPUT
            Size                : double*'''
        return super(IMgrsGrid, self).get_GridSquareLabelSize()
    def put_GridSquareLabelSize(self, Size):
        '''Method IMgrsGrid.put_GridSquareLabelSize

           INPUT
            Size                : double'''
        return super(IMgrsGrid, self).put_GridSquareLabelSize(Size)
    def get_GridSquareLabelColor(self):
        '''Method IMgrsGrid.get_GridSquareLabelColor

           OUTPUT
            Color               : IColor**'''
        return super(IMgrsGrid, self).get_GridSquareLabelColor()
    def put_GridSquareLabelColor(self, Color):
        '''Method IMgrsGrid.put_GridSquareLabelColor

           INPUT
            Color               : IColor*'''
        return super(IMgrsGrid, self).put_GridSquareLabelColor(Color)
    def get_GridSquareLabelStyle(self):
        '''Method IMgrsGrid.get_GridSquareLabelStyle

           OUTPUT
            Style               : esriGridSquareLabelStyleEnum*'''
        return super(IMgrsGrid, self).get_GridSquareLabelStyle()
    def put_GridSquareLabelStyle(self, Style):
        '''Method IMgrsGrid.put_GridSquareLabelStyle

           INPUT
            Style               : esriGridSquareLabelStyleEnum'''
        return super(IMgrsGrid, self).put_GridSquareLabelStyle(Style)
    def get_GridSquareBoundarySymbol(self):
        '''Method IMgrsGrid.get_GridSquareBoundarySymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IMgrsGrid, self).get_GridSquareBoundarySymbol()
    def put_GridSquareBoundarySymbol(self, Symbol):
        '''Method IMgrsGrid.put_GridSquareBoundarySymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IMgrsGrid, self).put_GridSquareBoundarySymbol(Symbol)
    def get_InteriorTickSymbol(self):
        '''Method IMgrsGrid.get_InteriorTickSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IMgrsGrid, self).get_InteriorTickSymbol()
    def put_InteriorTickSymbol(self, Symbol):
        '''Method IMgrsGrid.put_InteriorTickSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IMgrsGrid, self).put_InteriorTickSymbol(Symbol)
    def get_InteriorTickLength(self):
        '''Method IMgrsGrid.get_InteriorTickLength

           OUTPUT
            lengthPts           : double*'''
        return super(IMgrsGrid, self).get_InteriorTickLength()
    def put_InteriorTickLength(self, lengthPts):
        '''Method IMgrsGrid.put_InteriorTickLength

           INPUT
            lengthPts           : double'''
        return super(IMgrsGrid, self).put_InteriorTickLength(lengthPts)
    GridSquareBoundarySymbol = property(get_GridSquareBoundarySymbol, put_GridSquareBoundarySymbol, None)
    GridSquareLabelColor = property(get_GridSquareLabelColor, put_GridSquareLabelColor, None)
    GridSquareLabelFont = property(get_GridSquareLabelFont, put_GridSquareLabelFont, None)
    GridSquareLabelSize = property(get_GridSquareLabelSize, put_GridSquareLabelSize, None)
    GridSquareLabelStyle = property(get_GridSquareLabelStyle, put_GridSquareLabelStyle, None)
    InteriorTickLength = property(get_InteriorTickLength, put_InteriorTickLength, None)
    InteriorTickSymbol = property(get_InteriorTickSymbol, put_InteriorTickSymbol, None)
    ShowGridSquareIdentifiers = property(get_ShowGridSquareIdentifiers, put_ShowGridSquareIdentifiers, None)

class IGridLadderLabels(_esriCarto.IGridLadderLabels):
    _IID = uuid.UUID('8941e7de-7345-4366-9fac-108f1a685427')

    def __init__(self, *args, **kw):
        super(IGridLadderLabels, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowLadderLabels(self):
        '''Method IGridLadderLabels.get_ShowLadderLabels

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IGridLadderLabels, self).get_ShowLadderLabels()
    def put_ShowLadderLabels(self, Show):
        '''Method IGridLadderLabels.put_ShowLadderLabels

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IGridLadderLabels, self).put_ShowLadderLabels(Show)
    def get_LadderLabelFont(self):
        '''Method IGridLadderLabels.get_LadderLabelFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IGridLadderLabels, self).get_LadderLabelFont()
    def put_LadderLabelFont(self, Font):
        '''Method IGridLadderLabels.put_LadderLabelFont

           INPUT
            Font                : IFontDisp*'''
        return super(IGridLadderLabels, self).put_LadderLabelFont(Font)
    def get_LadderLabelSize(self):
        '''Method IGridLadderLabels.get_LadderLabelSize

           OUTPUT
            Size                : double*'''
        return super(IGridLadderLabels, self).get_LadderLabelSize()
    def put_LadderLabelSize(self, Size):
        '''Method IGridLadderLabels.put_LadderLabelSize

           INPUT
            Size                : double'''
        return super(IGridLadderLabels, self).put_LadderLabelSize(Size)
    def get_LadderLabelColor(self):
        '''Method IGridLadderLabels.get_LadderLabelColor

           OUTPUT
            Color               : IColor**'''
        return super(IGridLadderLabels, self).get_LadderLabelColor()
    def put_LadderLabelColor(self, Color):
        '''Method IGridLadderLabels.put_LadderLabelColor

           INPUT
            Color               : IColor*'''
        return super(IGridLadderLabels, self).put_LadderLabelColor(Color)
    def get_LadderLabelRowCount(self):
        '''Method IGridLadderLabels.get_LadderLabelRowCount

           OUTPUT
            RowCount            : long*'''
        return super(IGridLadderLabels, self).get_LadderLabelRowCount()
    def put_LadderLabelRowCount(self, RowCount):
        '''Method IGridLadderLabels.put_LadderLabelRowCount

           INPUT
            RowCount            : long'''
        return super(IGridLadderLabels, self).put_LadderLabelRowCount(RowCount)
    def get_LadderLabelColumnCount(self):
        '''Method IGridLadderLabels.get_LadderLabelColumnCount

           OUTPUT
            ColumnCount         : long*'''
        return super(IGridLadderLabels, self).get_LadderLabelColumnCount()
    def put_LadderLabelColumnCount(self, ColumnCount):
        '''Method IGridLadderLabels.put_LadderLabelColumnCount

           INPUT
            ColumnCount         : long'''
        return super(IGridLadderLabels, self).put_LadderLabelColumnCount(ColumnCount)
    def get_ShowOuterLabelsOnly(self):
        '''Method IGridLadderLabels.get_ShowOuterLabelsOnly

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IGridLadderLabels, self).get_ShowOuterLabelsOnly()
    def put_ShowOuterLabelsOnly(self, Show):
        '''Method IGridLadderLabels.put_ShowOuterLabelsOnly

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IGridLadderLabels, self).put_ShowOuterLabelsOnly(Show)
    LadderLabelColor = property(get_LadderLabelColor, put_LadderLabelColor, None)
    LadderLabelColumnCount = property(get_LadderLabelColumnCount, put_LadderLabelColumnCount, None)
    LadderLabelFont = property(get_LadderLabelFont, put_LadderLabelFont, None)
    LadderLabelRowCount = property(get_LadderLabelRowCount, put_LadderLabelRowCount, None)
    LadderLabelSize = property(get_LadderLabelSize, put_LadderLabelSize, None)
    ShowLadderLabels = property(get_ShowLadderLabels, put_ShowLadderLabels, None)
    ShowOuterLabelsOnly = property(get_ShowOuterLabelsOnly, put_ShowOuterLabelsOnly, None)

class IPrincipalDigitsGridLabel(_esriCarto.IPrincipalDigitsGridLabel):
    _IID = uuid.UUID('560a800d-2467-4e71-9ac1-d8c399f22ad1')

    def __init__(self, *args, **kw):
        super(IPrincipalDigitsGridLabel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SmallLabelFont(self):
        '''Method IPrincipalDigitsGridLabel.get_SmallLabelFont

           OUTPUT
            Font                : IFontDisp**'''
        return super(IPrincipalDigitsGridLabel, self).get_SmallLabelFont()
    def put_SmallLabelFont(self, Font):
        '''Method IPrincipalDigitsGridLabel.put_SmallLabelFont

           INPUT
            Font                : IFontDisp*'''
        return super(IPrincipalDigitsGridLabel, self).put_SmallLabelFont(Font)
    def get_SmallLabelSize(self):
        '''Method IPrincipalDigitsGridLabel.get_SmallLabelSize

           OUTPUT
            Size                : double*'''
        return super(IPrincipalDigitsGridLabel, self).get_SmallLabelSize()
    def put_SmallLabelSize(self, Size):
        '''Method IPrincipalDigitsGridLabel.put_SmallLabelSize

           INPUT
            Size                : double'''
        return super(IPrincipalDigitsGridLabel, self).put_SmallLabelSize(Size)
    def get_SmallLabelColor(self):
        '''Method IPrincipalDigitsGridLabel.get_SmallLabelColor

           OUTPUT
            Color               : IColor**'''
        return super(IPrincipalDigitsGridLabel, self).get_SmallLabelColor()
    def put_SmallLabelColor(self, Color):
        '''Method IPrincipalDigitsGridLabel.put_SmallLabelColor

           INPUT
            Color               : IColor*'''
        return super(IPrincipalDigitsGridLabel, self).put_SmallLabelColor(Color)
    def get_PrincipalDigitCount(self):
        '''Method IPrincipalDigitsGridLabel.get_PrincipalDigitCount

           OUTPUT
            Count               : long*'''
        return super(IPrincipalDigitsGridLabel, self).get_PrincipalDigitCount()
    def put_PrincipalDigitCount(self, Count):
        '''Method IPrincipalDigitsGridLabel.put_PrincipalDigitCount

           INPUT
            Count               : long'''
        return super(IPrincipalDigitsGridLabel, self).put_PrincipalDigitCount(Count)
    def get_BaseDigitCount(self):
        '''Method IPrincipalDigitsGridLabel.get_BaseDigitCount

           OUTPUT
            Count               : long*'''
        return super(IPrincipalDigitsGridLabel, self).get_BaseDigitCount()
    def put_BaseDigitCount(self, Count):
        '''Method IPrincipalDigitsGridLabel.put_BaseDigitCount

           INPUT
            Count               : long'''
        return super(IPrincipalDigitsGridLabel, self).put_BaseDigitCount(Count)
    def get_UnitSuffix(self):
        '''Method IPrincipalDigitsGridLabel.get_UnitSuffix

           OUTPUT
            str                 : BSTR*'''
        return super(IPrincipalDigitsGridLabel, self).get_UnitSuffix()
    def put_UnitSuffix(self, str):
        '''Method IPrincipalDigitsGridLabel.put_UnitSuffix

           INPUT
            str                 : BSTR'''
        return super(IPrincipalDigitsGridLabel, self).put_UnitSuffix(str)
    def get_EastingSuffix(self):
        '''Method IPrincipalDigitsGridLabel.get_EastingSuffix

           OUTPUT
            str                 : BSTR*'''
        return super(IPrincipalDigitsGridLabel, self).get_EastingSuffix()
    def put_EastingSuffix(self, str):
        '''Method IPrincipalDigitsGridLabel.put_EastingSuffix

           INPUT
            str                 : BSTR'''
        return super(IPrincipalDigitsGridLabel, self).put_EastingSuffix(str)
    def get_NorthingSuffix(self):
        '''Method IPrincipalDigitsGridLabel.get_NorthingSuffix

           OUTPUT
            str                 : BSTR*'''
        return super(IPrincipalDigitsGridLabel, self).get_NorthingSuffix()
    def put_NorthingSuffix(self, str):
        '''Method IPrincipalDigitsGridLabel.put_NorthingSuffix

           INPUT
            str                 : BSTR'''
        return super(IPrincipalDigitsGridLabel, self).put_NorthingSuffix(str)
    BaseDigitCount = property(get_BaseDigitCount, put_BaseDigitCount, None)
    EastingSuffix = property(get_EastingSuffix, put_EastingSuffix, None)
    NorthingSuffix = property(get_NorthingSuffix, put_NorthingSuffix, None)
    PrincipalDigitCount = property(get_PrincipalDigitCount, put_PrincipalDigitCount, None)
    SmallLabelColor = property(get_SmallLabelColor, put_SmallLabelColor, None)
    SmallLabelFont = property(get_SmallLabelFont, put_SmallLabelFont, None)
    SmallLabelSize = property(get_SmallLabelSize, put_SmallLabelSize, None)
    UnitSuffix = property(get_UnitSuffix, put_UnitSuffix, None)

class IPageLayoutExtensions(_esriCarto.IPageLayoutExtensions):
    _IID = uuid.UUID('50713bc8-4ab3-4903-9a4a-1c0ff1037019')
    def get_ExtensionCount(self):
        '''Method IPageLayoutExtensions.get_ExtensionCount

           OUTPUT
            Count               : long*'''
        return super(IPageLayoutExtensions, self).get_ExtensionCount()
    def get_Extension(self, Index):
        '''Method IPageLayoutExtensions.get_Extension

           INPUT
            Index               : long

           OUTPUT
            ext                 : IUnknown**'''
        return super(IPageLayoutExtensions, self).get_Extension(Index)
    def AddExtension(self, ext):
        '''Method IPageLayoutExtensions.AddExtension

           INPUT
            ext                 : IUnknown*'''
        return super(IPageLayoutExtensions, self).AddExtension(ext)
    def RemoveExtension(self, Index):
        '''Method IPageLayoutExtensions.RemoveExtension

           INPUT
            Index               : long'''
        return super(IPageLayoutExtensions, self).RemoveExtension(Index)
    ExtensionCount = property(get_ExtensionCount, None, None)
    Extension = IndexProperty(get_Extension, None)

class IPageEvents(_esriCarto.IPageEvents):
    _IID = uuid.UUID('83bd34e5-ce3b-11d1-876e-0000f8751720')
    def PageUnitsChanged(self):
        '''Method IPageEvents.PageUnitsChanged'''
        return super(IPageEvents, self).PageUnitsChanged()
    def PageSizeChanged(self):
        '''Method IPageEvents.PageSizeChanged'''
        return super(IPageEvents, self).PageSizeChanged()
    def PageMarginsChanged(self):
        '''Method IPageEvents.PageMarginsChanged'''
        return super(IPageEvents, self).PageMarginsChanged()
    def PageColorChanged(self):
        '''Method IPageEvents.PageColorChanged'''
        return super(IPageEvents, self).PageColorChanged()

class IGraphicSnap(_esriCarto.IGraphicSnap):
    _IID = uuid.UUID('56fd87f5-ddce-11d1-8778-0000f8751720')
    def get_Name(self):
        '''Method IGraphicSnap.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGraphicSnap, self).get_Name()
    def SnapX(self, Shape, Tolerance):
        '''Method IGraphicSnap.SnapX

           INPUTS
            Shape               : IGeometry*
            Tolerance           : double

           OUTPUT
            snapped             : VARIANT_BOOL*'''
        return super(IGraphicSnap, self).SnapX(Shape, Tolerance)
    def SnapY(self, Shape, Tolerance):
        '''Method IGraphicSnap.SnapY

           INPUTS
            Shape               : IGeometry*
            Tolerance           : double

           OUTPUT
            snapped             : VARIANT_BOOL*'''
        return super(IGraphicSnap, self).SnapY(Shape, Tolerance)
    Name = property(get_Name, None, None)

class IGraphicSnapEnvironment(_esriCarto.IGraphicSnapEnvironment):
    _IID = uuid.UUID('56fd87f6-ddce-11d1-8778-0000f8751720')

    def __init__(self, *args, **kw):
        super(IGraphicSnapEnvironment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SnapShape(self, Shape):
        '''Method IGraphicSnapEnvironment.SnapShape

           INPUT
            Shape               : IGeometry*'''
        return super(IGraphicSnapEnvironment, self).SnapShape(Shape)
    def get_SnapTolerance(self):
        '''Method IGraphicSnapEnvironment.get_SnapTolerance

           OUTPUT
            tol                 : double*'''
        return super(IGraphicSnapEnvironment, self).get_SnapTolerance()
    def put_SnapTolerance(self, tol):
        '''Method IGraphicSnapEnvironment.put_SnapTolerance

           INPUT
            tol                 : double'''
        return super(IGraphicSnapEnvironment, self).put_SnapTolerance(tol)
    def put_SnapAgentOrder(self, guids):
        '''Method IGraphicSnapEnvironment.put_SnapAgentOrder

           INPUT
            guids               : IArray*'''
        return super(IGraphicSnapEnvironment, self).put_SnapAgentOrder(guids)
    def get_SnapAgentOrder(self):
        '''Method IGraphicSnapEnvironment.get_SnapAgentOrder

           OUTPUT
            guids               : IArray**'''
        return super(IGraphicSnapEnvironment, self).get_SnapAgentOrder()
    def get_SnapAgentCount(self):
        '''Method IGraphicSnapEnvironment.get_SnapAgentCount

           OUTPUT
            Count               : long*'''
        return super(IGraphicSnapEnvironment, self).get_SnapAgentCount()
    def get_SnapAgent(self, Index):
        '''Method IGraphicSnapEnvironment.get_SnapAgent

           INPUT
            Index               : long

           OUTPUT
            SnapAgent           : IGraphicSnap**'''
        return super(IGraphicSnapEnvironment, self).get_SnapAgent(Index)
    def ClearSnapAgents(self):
        '''Method IGraphicSnapEnvironment.ClearSnapAgents'''
        return super(IGraphicSnapEnvironment, self).ClearSnapAgents()
    def AddSnapAgent(self, SnapAgent):
        '''Method IGraphicSnapEnvironment.AddSnapAgent

           INPUT
            SnapAgent           : IGraphicSnap*'''
        return super(IGraphicSnapEnvironment, self).AddSnapAgent(SnapAgent)
    def DeleteSnapAgent(self, SnapAgent):
        '''Method IGraphicSnapEnvironment.DeleteSnapAgent

           INPUT
            SnapAgent           : IGraphicSnap*'''
        return super(IGraphicSnapEnvironment, self).DeleteSnapAgent(SnapAgent)
    SnapAgentCount = property(get_SnapAgentCount, None, None)
    SnapAgentOrder = property(get_SnapAgentOrder, put_SnapAgentOrder, None)
    SnapTolerance = property(get_SnapTolerance, put_SnapTolerance, None)
    SnapAgent = IndexProperty(get_SnapAgent, None)

class IGraphicSnapEnvironment2(_esriCarto.IGraphicSnapEnvironment2):
    _IID = uuid.UUID('51ae6186-47a9-489a-a91d-a0e6caf320f1')

    def __init__(self, *args, **kw):
        super(IGraphicSnapEnvironment2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SnapShape(self, Shape):
        '''Method IGraphicSnapEnvironment2.SnapShape

           INPUT
            Shape               : IGeometry*'''
        return super(IGraphicSnapEnvironment2, self).SnapShape(Shape)
    def get_SnapTolerance(self):
        '''Method IGraphicSnapEnvironment2.get_SnapTolerance

           OUTPUT
            tol                 : double*'''
        return super(IGraphicSnapEnvironment2, self).get_SnapTolerance()
    def put_SnapTolerance(self, tol):
        '''Method IGraphicSnapEnvironment2.put_SnapTolerance

           INPUT
            tol                 : double'''
        return super(IGraphicSnapEnvironment2, self).put_SnapTolerance(tol)
    def put_SnapAgentOrder(self, guids):
        '''Method IGraphicSnapEnvironment2.put_SnapAgentOrder

           INPUT
            guids               : IArray*'''
        return super(IGraphicSnapEnvironment2, self).put_SnapAgentOrder(guids)
    def get_SnapAgentOrder(self):
        '''Method IGraphicSnapEnvironment2.get_SnapAgentOrder

           OUTPUT
            guids               : IArray**'''
        return super(IGraphicSnapEnvironment2, self).get_SnapAgentOrder()
    def get_SnapAgentCount(self):
        '''Method IGraphicSnapEnvironment2.get_SnapAgentCount

           OUTPUT
            Count               : long*'''
        return super(IGraphicSnapEnvironment2, self).get_SnapAgentCount()
    def get_SnapAgent(self, Index):
        '''Method IGraphicSnapEnvironment2.get_SnapAgent

           INPUT
            Index               : long

           OUTPUT
            SnapAgent           : IGraphicSnap**'''
        return super(IGraphicSnapEnvironment2, self).get_SnapAgent(Index)
    def ClearSnapAgents(self):
        '''Method IGraphicSnapEnvironment2.ClearSnapAgents'''
        return super(IGraphicSnapEnvironment2, self).ClearSnapAgents()
    def AddSnapAgent(self, SnapAgent):
        '''Method IGraphicSnapEnvironment2.AddSnapAgent

           INPUT
            SnapAgent           : IGraphicSnap*'''
        return super(IGraphicSnapEnvironment2, self).AddSnapAgent(SnapAgent)
    def DeleteSnapAgent(self, SnapAgent):
        '''Method IGraphicSnapEnvironment2.DeleteSnapAgent

           INPUT
            SnapAgent           : IGraphicSnap*'''
        return super(IGraphicSnapEnvironment2, self).DeleteSnapAgent(SnapAgent)
    def SnapShapeEx(self, pElement, Shape):
        '''Method IGraphicSnapEnvironment2.SnapShapeEx

           INPUTS
            pElement            : IElement*
            Shape               : IGeometry*'''
        return super(IGraphicSnapEnvironment2, self).SnapShapeEx(pElement, Shape)
    SnapAgentCount = property(get_SnapAgentCount, None, None)
    SnapAgentOrder = property(get_SnapAgentOrder, put_SnapAgentOrder, None)
    SnapTolerance = property(get_SnapTolerance, put_SnapTolerance, None)
    SnapAgent = IndexProperty(get_SnapAgent, None)

class IGlobeDocument(_esriCarto.IGlobeDocument):
    _IID = uuid.UUID('d2bcaf32-541c-4965-9980-aae56ab3a964')

    def __init__(self, *args, **kw):
        super(IGlobeDocument, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsGlobeDocument(self, bsDocument):
        '''Method IGlobeDocument.get_IsGlobeDocument

           INPUT
            bsDocument          : BSTR

           OUTPUT
            pbIsGlobeDocument   : VARIANT_BOOL*'''
        return super(IGlobeDocument, self).get_IsGlobeDocument(bsDocument)
    def get_IsPresent(self, bsDocument):
        '''Method IGlobeDocument.get_IsPresent

           INPUT
            bsDocument          : BSTR

           OUTPUT
            pbIsPresent         : VARIANT_BOOL*'''
        return super(IGlobeDocument, self).get_IsPresent(bsDocument)
    def get_IsReadOnly(self, bsDocument):
        '''Method IGlobeDocument.get_IsReadOnly

           INPUT
            bsDocument          : BSTR

           OUTPUT
            pbIsReadOnly        : VARIANT_BOOL*'''
        return super(IGlobeDocument, self).get_IsReadOnly(bsDocument)
    def get_IsRestricted(self, bsDocument):
        '''Method IGlobeDocument.get_IsRestricted

           INPUT
            bsDocument          : BSTR

           OUTPUT
            pbIsRestricted      : VARIANT_BOOL*'''
        return super(IGlobeDocument, self).get_IsRestricted(bsDocument)
    def get_IsPasswordProtected(self, bsDocument):
        '''Method IGlobeDocument.get_IsPasswordProtected

           INPUT
            bsDocument          : BSTR

           OUTPUT
            pbIsPasswordProtected: VARIANT_BOOL*'''
        return super(IGlobeDocument, self).get_IsPasswordProtected(bsDocument)
    def New(self, bsDocument):
        '''Method IGlobeDocument.New

           INPUT
            bsDocument          : BSTR'''
        return super(IGlobeDocument, self).New(bsDocument)
    def Open(self, bsDocument, bsPassword):
        '''Method IGlobeDocument.Open

           INPUTS
            bsDocument          : BSTR
            bsPassword          : BSTR'''
        return super(IGlobeDocument, self).Open(bsDocument, bsPassword)
    def get_DocumentFilename(self):
        '''Method IGlobeDocument.get_DocumentFilename

           OUTPUT
            pbsDocument         : BSTR*'''
        return super(IGlobeDocument, self).get_DocumentFilename()
    def get_DocumentType(self):
        '''Method IGlobeDocument.get_DocumentType

           OUTPUT
            pType               : esriGlobeDocumentType*'''
        return super(IGlobeDocument, self).get_DocumentType()
    def get_UsesRelativePaths(self):
        '''Method IGlobeDocument.get_UsesRelativePaths

           OUTPUT
            pbUsesRelativePaths : VARIANT_BOOL*'''
        return super(IGlobeDocument, self).get_UsesRelativePaths()
    def get_DocumentVersion(self):
        '''Method IGlobeDocument.get_DocumentVersion

           OUTPUT
            pVersionInfo        : esriGlobeDocumentVersionInfo*'''
        return super(IGlobeDocument, self).get_DocumentVersion()
    def put_GlobeObject(self, ppUnk):
        '''Method IGlobeDocument.put_GlobeObject

           INPUT
            ppUnk               : IUnknown*'''
        return super(IGlobeDocument, self).put_GlobeObject(ppUnk)
    def get_GlobeObject(self):
        '''Method IGlobeDocument.get_GlobeObject

           OUTPUT
            ppUnk               : IUnknown**'''
        return super(IGlobeDocument, self).get_GlobeObject()
    def get_LayerCount(self):
        '''Method IGlobeDocument.get_LayerCount

           OUTPUT
            plLayerCount        : long*'''
        return super(IGlobeDocument, self).get_LayerCount()
    def get_Layer(self, lLayerIndex):
        '''Method IGlobeDocument.get_Layer

           INPUT
            lLayerIndex         : long

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IGlobeDocument, self).get_Layer(lLayerIndex)
    def get_Thumbnail(self):
        '''Method IGlobeDocument.get_Thumbnail

           OUTPUT
            ppPicture           : IPicture**'''
        return super(IGlobeDocument, self).get_Thumbnail()
    def Close(self):
        '''Method IGlobeDocument.Close'''
        return super(IGlobeDocument, self).Close()
    def GetVersionInfo(self):
        '''Method IGlobeDocument.GetVersionInfo

           OUTPUTS
            pbVersionInfoMissing: VARIANT_BOOL*
            plMajor             : long*
            plMinor             : long*
            plRevision          : long*
            plBuild             : long*'''
        return super(IGlobeDocument, self).GetVersionInfo()
    def Save(self, bUseRelativePaths, bCreateThumnbail):
        '''Method IGlobeDocument.Save

           INPUTS
            bUseRelativePaths   : VARIANT_BOOL
            bCreateThumnbail    : VARIANT_BOOL'''
        return super(IGlobeDocument, self).Save(bUseRelativePaths, bCreateThumnbail)
    def SaveAs(self, bsDocument, bUseRelativePaths, bCreateThumnbail):
        '''Method IGlobeDocument.SaveAs

           INPUTS
            bsDocument          : BSTR
            bUseRelativePaths   : VARIANT_BOOL
            bCreateThumnbail    : VARIANT_BOOL'''
        return super(IGlobeDocument, self).SaveAs(bsDocument, bUseRelativePaths, bCreateThumnbail)
    DocumentFilename = property(get_DocumentFilename, None, None)
    DocumentType = property(get_DocumentType, None, None)
    DocumentVersion = property(get_DocumentVersion, None, None)
    GlobeObject = property(get_GlobeObject, put_GlobeObject, None)
    LayerCount = property(get_LayerCount, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    UsesRelativePaths = property(get_UsesRelativePaths, None, None)
    IsGlobeDocument = IndexProperty(get_IsGlobeDocument, None)
    IsPasswordProtected = IndexProperty(get_IsPasswordProtected, None)
    IsPresent = IndexProperty(get_IsPresent, None)
    IsReadOnly = IndexProperty(get_IsReadOnly, None)
    IsRestricted = IndexProperty(get_IsRestricted, None)
    Layer = IndexProperty(get_Layer, None)

class ILayerFile(_esriCarto.ILayerFile):
    _IID = uuid.UUID('58478051-486a-4093-a620-a558af78baf5')
    def get_Filename(self):
        '''Method ILayerFile.get_Filename

           OUTPUT
            sFile               : BSTR*'''
        return super(ILayerFile, self).get_Filename()
    def get_IsLayerFile(self, sFile):
        '''Method ILayerFile.get_IsLayerFile

           INPUT
            sFile               : BSTR

           OUTPUT
            IsLayerFile         : VARIANT_BOOL*'''
        return super(ILayerFile, self).get_IsLayerFile(sFile)
    def get_IsPresent(self, sFile):
        '''Method ILayerFile.get_IsPresent

           INPUT
            sFile               : BSTR

           OUTPUT
            IsPresent           : VARIANT_BOOL*'''
        return super(ILayerFile, self).get_IsPresent(sFile)
    def get_IsReadOnly(self, sFile):
        '''Method ILayerFile.get_IsReadOnly

           INPUT
            sFile               : BSTR

           OUTPUT
            IsReadOnly          : VARIANT_BOOL*'''
        return super(ILayerFile, self).get_IsReadOnly(sFile)
    def get_Layer(self):
        '''Method ILayerFile.get_Layer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(ILayerFile, self).get_Layer()
    def get_Thumbnail(self):
        '''Method ILayerFile.get_Thumbnail

           OUTPUT
            ppPicture           : IPicture**'''
        return super(ILayerFile, self).get_Thumbnail()
    def New(self, sFile):
        '''Method ILayerFile.New

           INPUT
            sFile               : BSTR'''
        return super(ILayerFile, self).New(sFile)
    def Open(self, sFile):
        '''Method ILayerFile.Open

           INPUT
            sFile               : BSTR'''
        return super(ILayerFile, self).Open(sFile)
    def Close(self):
        '''Method ILayerFile.Close'''
        return super(ILayerFile, self).Close()
    def ReplaceContents(self, pLayer):
        '''Method ILayerFile.ReplaceContents

           INPUT
            pLayer              : ILayer*'''
        return super(ILayerFile, self).ReplaceContents(pLayer)
    def Save(self):
        '''Method ILayerFile.Save'''
        return super(ILayerFile, self).Save()
    def SaveAs(self, sFile):
        '''Method ILayerFile.SaveAs

           INPUT
            sFile               : BSTR'''
        return super(ILayerFile, self).SaveAs(sFile)
    Filename = property(get_Filename, None, None)
    Layer = property(get_Layer, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    IsLayerFile = IndexProperty(get_IsLayerFile, None)
    IsPresent = IndexProperty(get_IsPresent, None)
    IsReadOnly = IndexProperty(get_IsReadOnly, None)

class ICartoItemInfoHelper(_esriCarto.ICartoItemInfoHelper):
    _IID = uuid.UUID('23830a19-b72d-4dc5-abcf-94d81e763fef')
    def Metadata2DocumentInfo(self, pPropertySet, pDocuInfo):
        '''Method ICartoItemInfoHelper.Metadata2DocumentInfo

           INPUTS
            pPropertySet        : IPropertySet*
            pDocuInfo           : IDocumentInfo2*'''
        return super(ICartoItemInfoHelper, self).Metadata2DocumentInfo(pPropertySet, pDocuInfo)
    def UpdateItemInfoFromDocumentInfo(self, pDocInfo):
        '''Method ICartoItemInfoHelper.UpdateItemInfoFromDocumentInfo

           INPUT
            pDocInfo            : IDocumentInfo2*'''
        return super(ICartoItemInfoHelper, self).UpdateItemInfoFromDocumentInfo(pDocInfo)
    def UpdateDocumentInfo(self, Path, pPropertySet):
        '''Method ICartoItemInfoHelper.UpdateDocumentInfo

           INPUTS
            Path                : BSTR
            pPropertySet        : IPropertySet*'''
        return super(ICartoItemInfoHelper, self).UpdateDocumentInfo(Path, pPropertySet)

class IRasterFormatInfo(_esriCarto.IRasterFormatInfo):
    _IID = uuid.UUID('4d6b1ff0-c144-11d2-9f43-00c04f8ed21a')

    def __init__(self, *args, **kw):
        super(IRasterFormatInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ActiveBrowse(self):
        '''Method IRasterFormatInfo.get_ActiveBrowse

           OUTPUT
            pOpt                : VARIANT_BOOL*'''
        return super(IRasterFormatInfo, self).get_ActiveBrowse()
    def put_ActiveBrowse(self, pOpt):
        '''Method IRasterFormatInfo.put_ActiveBrowse

           INPUT
            pOpt                : VARIANT_BOOL'''
        return super(IRasterFormatInfo, self).put_ActiveBrowse(pOpt)
    def get_FormatName(self):
        '''Method IRasterFormatInfo.get_FormatName

           OUTPUT
            Name                : BSTR*'''
        return super(IRasterFormatInfo, self).get_FormatName()
    def put_FormatName(self, Name):
        '''Method IRasterFormatInfo.put_FormatName

           INPUT
            Name                : BSTR'''
        return super(IRasterFormatInfo, self).put_FormatName(Name)
    def get_DefaultExts(self):
        '''Method IRasterFormatInfo.get_DefaultExts

           OUTPUT
            ext                 : BSTR*'''
        return super(IRasterFormatInfo, self).get_DefaultExts()
    def put_DefaultExts(self, ext):
        '''Method IRasterFormatInfo.put_DefaultExts

           INPUT
            ext                 : BSTR'''
        return super(IRasterFormatInfo, self).put_DefaultExts(ext)
    ActiveBrowse = property(get_ActiveBrowse, put_ActiveBrowse, None)
    DefaultExts = property(get_DefaultExts, put_DefaultExts, None)
    FormatName = property(get_FormatName, put_FormatName, None)

class IRasterDefaultsEnv(_esriCarto.IRasterDefaultsEnv):
    _IID = uuid.UUID('fb89a39b-c08e-11d2-9f43-00c04f8ed21a')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv, self).get_Format(i)
    NumFormats = property(get_NumFormats, None, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv2(_esriCarto.IRasterDefaultsEnv2):
    _IID = uuid.UUID('e5191e5e-4d03-45d9-94a4-9e2d8c5c9aed')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv2, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv2, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv2, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv2, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv2, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv2, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv2, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv2, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll'''
        return super(IRasterDefaultsEnv2, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv2, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv2, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv2, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv2, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv2, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv2, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv2, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv2, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv2, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv2, self).get_Format(i)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    NumFormats = property(get_NumFormats, None, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv3(_esriCarto.IRasterDefaultsEnv3):
    _IID = uuid.UUID('bbce4f14-f0da-4cbf-8196-0e380b34ccbb')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_MaximumBuildAttributeTableSize(self, pSize):
        '''Method IRasterDefaultsEnv3.put_MaximumBuildAttributeTableSize

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv3, self).put_MaximumBuildAttributeTableSize(pSize)
    def get_MaximumBuildAttributeTableSize(self):
        '''Method IRasterDefaultsEnv3.get_MaximumBuildAttributeTableSize

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv3, self).get_MaximumBuildAttributeTableSize()
    def put_FavorWorldFile(self, pFavor):
        '''Method IRasterDefaultsEnv3.put_FavorWorldFile

           INPUT
            pFavor              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv3, self).put_FavorWorldFile(pFavor)
    def get_FavorWorldFile(self):
        '''Method IRasterDefaultsEnv3.get_FavorWorldFile

           OUTPUT
            pFavor              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv3, self).get_FavorWorldFile()
    def get_AssumeHomogeneousCatalog(self):
        '''Method IRasterDefaultsEnv3.get_AssumeHomogeneousCatalog

           OUTPUT
            pHomogeneous        : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv3, self).get_AssumeHomogeneousCatalog()
    def put_AssumeHomogeneousCatalog(self, pHomogeneous):
        '''Method IRasterDefaultsEnv3.put_AssumeHomogeneousCatalog

           INPUT
            pHomogeneous        : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv3, self).put_AssumeHomogeneousCatalog(pHomogeneous)
    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode (from IRasterDefaultsEnv2)

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv3, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode (from IRasterDefaultsEnv2)

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv3, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling (from IRasterDefaultsEnv2)

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv3, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling (from IRasterDefaultsEnv2)

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv3, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath (from IRasterDefaultsEnv2)

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv3, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath (from IRasterDefaultsEnv2)

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv3, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize (from IRasterDefaultsEnv2)

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv3, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize (from IRasterDefaultsEnv2)

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv3, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll (from IRasterDefaultsEnv2)'''
        return super(IRasterDefaultsEnv3, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv3, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv3, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv3, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv3, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv3, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv3, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv3, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv3, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv3, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv3, self).get_Format(i)
    AssumeHomogeneousCatalog = property(get_AssumeHomogeneousCatalog, put_AssumeHomogeneousCatalog, None)
    FavorWorldFile = property(get_FavorWorldFile, put_FavorWorldFile, None)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    MaximumBuildAttributeTableSize = property(get_MaximumBuildAttributeTableSize, put_MaximumBuildAttributeTableSize, None)
    NumFormats = property(get_NumFormats, None, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv4(_esriCarto.IRasterDefaultsEnv4):
    _IID = uuid.UUID('4dcd6e47-90a1-4341-a90b-52ab6df2ffa4')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AskSubdatasetSelection(self, pAsk):
        '''Method IRasterDefaultsEnv4.put_AskSubdatasetSelection

           INPUT
            pAsk                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv4, self).put_AskSubdatasetSelection(pAsk)
    def get_AskSubdatasetSelection(self):
        '''Method IRasterDefaultsEnv4.get_AskSubdatasetSelection

           OUTPUT
            pAsk                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv4, self).get_AskSubdatasetSelection()
    def put_DisplayWithContrastStretch(self, pStretch):
        '''Method IRasterDefaultsEnv4.put_DisplayWithContrastStretch

           INPUT
            pStretch            : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv4, self).put_DisplayWithContrastStretch(pStretch)
    def get_DisplayWithContrastStretch(self):
        '''Method IRasterDefaultsEnv4.get_DisplayWithContrastStretch

           OUTPUT
            pStretch            : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv4, self).get_DisplayWithContrastStretch()
    def put_MaximumRastersColorMatching(self, pSize):
        '''Method IRasterDefaultsEnv4.put_MaximumRastersColorMatching

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv4, self).put_MaximumRastersColorMatching(pSize)
    def get_MaximumRastersColorMatching(self):
        '''Method IRasterDefaultsEnv4.get_MaximumRastersColorMatching

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv4, self).get_MaximumRastersColorMatching()
    def put_MaximumBuildAttributeTableSize(self, pSize):
        '''Method IRasterDefaultsEnv3.put_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv4, self).put_MaximumBuildAttributeTableSize(pSize)
    def get_MaximumBuildAttributeTableSize(self):
        '''Method IRasterDefaultsEnv3.get_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv4, self).get_MaximumBuildAttributeTableSize()
    def put_FavorWorldFile(self, pFavor):
        '''Method IRasterDefaultsEnv3.put_FavorWorldFile (from IRasterDefaultsEnv3)

           INPUT
            pFavor              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv4, self).put_FavorWorldFile(pFavor)
    def get_FavorWorldFile(self):
        '''Method IRasterDefaultsEnv3.get_FavorWorldFile (from IRasterDefaultsEnv3)

           OUTPUT
            pFavor              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv4, self).get_FavorWorldFile()
    def get_AssumeHomogeneousCatalog(self):
        '''Method IRasterDefaultsEnv3.get_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           OUTPUT
            pHomogeneous        : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv4, self).get_AssumeHomogeneousCatalog()
    def put_AssumeHomogeneousCatalog(self, pHomogeneous):
        '''Method IRasterDefaultsEnv3.put_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           INPUT
            pHomogeneous        : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv4, self).put_AssumeHomogeneousCatalog(pHomogeneous)
    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode (from IRasterDefaultsEnv2)

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv4, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode (from IRasterDefaultsEnv2)

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv4, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling (from IRasterDefaultsEnv2)

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv4, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling (from IRasterDefaultsEnv2)

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv4, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath (from IRasterDefaultsEnv2)

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv4, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath (from IRasterDefaultsEnv2)

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv4, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize (from IRasterDefaultsEnv2)

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv4, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize (from IRasterDefaultsEnv2)

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv4, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll (from IRasterDefaultsEnv2)'''
        return super(IRasterDefaultsEnv4, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv4, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv4, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv4, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv4, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv4, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv4, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv4, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv4, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv4, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv4, self).get_Format(i)
    AskSubdatasetSelection = property(get_AskSubdatasetSelection, put_AskSubdatasetSelection, None)
    AssumeHomogeneousCatalog = property(get_AssumeHomogeneousCatalog, put_AssumeHomogeneousCatalog, None)
    DisplayWithContrastStretch = property(get_DisplayWithContrastStretch, put_DisplayWithContrastStretch, None)
    FavorWorldFile = property(get_FavorWorldFile, put_FavorWorldFile, None)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    MaximumBuildAttributeTableSize = property(get_MaximumBuildAttributeTableSize, put_MaximumBuildAttributeTableSize, None)
    MaximumRastersColorMatching = property(get_MaximumRastersColorMatching, put_MaximumRastersColorMatching, None)
    NumFormats = property(get_NumFormats, None, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv5(_esriCarto.IRasterDefaultsEnv5):
    _IID = uuid.UUID('af3085cd-39d4-45e3-93d0-1071cb4527cb')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv5, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_DisplayBackground(self, b):
        '''Method IRasterDefaultsEnv5.put_DisplayBackground

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv5, self).put_DisplayBackground(b)
    def get_DisplayBackground(self):
        '''Method IRasterDefaultsEnv5.get_DisplayBackground

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv5, self).get_DisplayBackground()
    def QueryBackgroundValues(self):
        '''Method IRasterDefaultsEnv5.QueryBackgroundValues

           OUTPUTS
            pRed                : double*
            pGreen              : double*
            pBlue               : double*'''
        return super(IRasterDefaultsEnv5, self).QueryBackgroundValues()
    def SetBackgroundValues(self, Red, Green, Blue):
        '''Method IRasterDefaultsEnv5.SetBackgroundValues

           INPUTS
            Red                 : double
            Green               : double
            Blue                : double'''
        return super(IRasterDefaultsEnv5, self).SetBackgroundValues(Red, Green, Blue)
    def get_BackgroundColor(self):
        '''Method IRasterDefaultsEnv5.get_BackgroundColor

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv5, self).get_BackgroundColor()
    def put_BackgroundColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_BackgroundColor

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv5, self).put_BackgroundColor(ppColor)
    def get_NoDataColor(self):
        '''Method IRasterDefaultsEnv5.get_NoDataColor

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv5, self).get_NoDataColor()
    def put_NoDataColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_NoDataColor

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv5, self).put_NoDataColor(ppColor)
    def get_CreateTiledTIFF(self):
        '''Method IRasterDefaultsEnv5.get_CreateTiledTIFF

           OUTPUT
            pTiled              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv5, self).get_CreateTiledTIFF()
    def put_CreateTiledTIFF(self, pTiled):
        '''Method IRasterDefaultsEnv5.put_CreateTiledTIFF

           INPUT
            pTiled              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv5, self).put_CreateTiledTIFF(pTiled)
    def put_AskSubdatasetSelection(self, pAsk):
        '''Method IRasterDefaultsEnv4.put_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           INPUT
            pAsk                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv5, self).put_AskSubdatasetSelection(pAsk)
    def get_AskSubdatasetSelection(self):
        '''Method IRasterDefaultsEnv4.get_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           OUTPUT
            pAsk                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv5, self).get_AskSubdatasetSelection()
    def put_DisplayWithContrastStretch(self, pStretch):
        '''Method IRasterDefaultsEnv4.put_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           INPUT
            pStretch            : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv5, self).put_DisplayWithContrastStretch(pStretch)
    def get_DisplayWithContrastStretch(self):
        '''Method IRasterDefaultsEnv4.get_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           OUTPUT
            pStretch            : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv5, self).get_DisplayWithContrastStretch()
    def put_MaximumRastersColorMatching(self, pSize):
        '''Method IRasterDefaultsEnv4.put_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv5, self).put_MaximumRastersColorMatching(pSize)
    def get_MaximumRastersColorMatching(self):
        '''Method IRasterDefaultsEnv4.get_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv5, self).get_MaximumRastersColorMatching()
    def put_MaximumBuildAttributeTableSize(self, pSize):
        '''Method IRasterDefaultsEnv3.put_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv5, self).put_MaximumBuildAttributeTableSize(pSize)
    def get_MaximumBuildAttributeTableSize(self):
        '''Method IRasterDefaultsEnv3.get_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv5, self).get_MaximumBuildAttributeTableSize()
    def put_FavorWorldFile(self, pFavor):
        '''Method IRasterDefaultsEnv3.put_FavorWorldFile (from IRasterDefaultsEnv3)

           INPUT
            pFavor              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv5, self).put_FavorWorldFile(pFavor)
    def get_FavorWorldFile(self):
        '''Method IRasterDefaultsEnv3.get_FavorWorldFile (from IRasterDefaultsEnv3)

           OUTPUT
            pFavor              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv5, self).get_FavorWorldFile()
    def get_AssumeHomogeneousCatalog(self):
        '''Method IRasterDefaultsEnv3.get_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           OUTPUT
            pHomogeneous        : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv5, self).get_AssumeHomogeneousCatalog()
    def put_AssumeHomogeneousCatalog(self, pHomogeneous):
        '''Method IRasterDefaultsEnv3.put_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           INPUT
            pHomogeneous        : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv5, self).put_AssumeHomogeneousCatalog(pHomogeneous)
    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode (from IRasterDefaultsEnv2)

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv5, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode (from IRasterDefaultsEnv2)

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv5, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling (from IRasterDefaultsEnv2)

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv5, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling (from IRasterDefaultsEnv2)

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv5, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath (from IRasterDefaultsEnv2)

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv5, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath (from IRasterDefaultsEnv2)

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv5, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize (from IRasterDefaultsEnv2)

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv5, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize (from IRasterDefaultsEnv2)

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv5, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll (from IRasterDefaultsEnv2)'''
        return super(IRasterDefaultsEnv5, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv5, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv5, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv5, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv5, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv5, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv5, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv5, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv5, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv5, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv5, self).get_Format(i)
    AskSubdatasetSelection = property(get_AskSubdatasetSelection, put_AskSubdatasetSelection, None)
    AssumeHomogeneousCatalog = property(get_AssumeHomogeneousCatalog, put_AssumeHomogeneousCatalog, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    CreateTiledTIFF = property(get_CreateTiledTIFF, put_CreateTiledTIFF, None)
    DisplayBackground = property(get_DisplayBackground, put_DisplayBackground, None)
    DisplayWithContrastStretch = property(get_DisplayWithContrastStretch, put_DisplayWithContrastStretch, None)
    FavorWorldFile = property(get_FavorWorldFile, put_FavorWorldFile, None)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    MaximumBuildAttributeTableSize = property(get_MaximumBuildAttributeTableSize, put_MaximumBuildAttributeTableSize, None)
    MaximumRastersColorMatching = property(get_MaximumRastersColorMatching, put_MaximumRastersColorMatching, None)
    NoDataColor = property(get_NoDataColor, put_NoDataColor, None)
    NumFormats = property(get_NumFormats, None, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv6(_esriCarto.IRasterDefaultsEnv6):
    _IID = uuid.UUID('fd9acc55-6a35-4888-b3c8-9604887b2fc3')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv6, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_MosaicLayerIsExpanded(self, pIsExpanded):
        '''Method IRasterDefaultsEnv6.put_MosaicLayerIsExpanded

           INPUT
            pIsExpanded         : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_MosaicLayerIsExpanded(pIsExpanded)
    def get_MosaicLayerIsExpanded(self):
        '''Method IRasterDefaultsEnv6.get_MosaicLayerIsExpanded

           OUTPUT
            pIsExpanded         : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_MosaicLayerIsExpanded()
    def put_BoundarySubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_BoundarySubLayerIsVisible

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_BoundarySubLayerIsVisible(pIsVisible)
    def get_BoundarySubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_BoundarySubLayerIsVisible

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_BoundarySubLayerIsVisible()
    def put_FootprintSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_FootprintSubLayerIsVisible

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_FootprintSubLayerIsVisible(pIsVisible)
    def get_FootprintSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_FootprintSubLayerIsVisible

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_FootprintSubLayerIsVisible()
    def put_PreviewSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_PreviewSubLayerIsVisible

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_PreviewSubLayerIsVisible(pIsVisible)
    def get_PreviewSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_PreviewSubLayerIsVisible

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_PreviewSubLayerIsVisible()
    def put_SeamlineSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_SeamlineSubLayerIsVisible

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_SeamlineSubLayerIsVisible(pIsVisible)
    def get_SeamlineSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_SeamlineSubLayerIsVisible

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_SeamlineSubLayerIsVisible()
    def put_DisplayBackground(self, b):
        '''Method IRasterDefaultsEnv5.put_DisplayBackground (from IRasterDefaultsEnv5)

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_DisplayBackground(b)
    def get_DisplayBackground(self):
        '''Method IRasterDefaultsEnv5.get_DisplayBackground (from IRasterDefaultsEnv5)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_DisplayBackground()
    def QueryBackgroundValues(self):
        '''Method IRasterDefaultsEnv5.QueryBackgroundValues (from IRasterDefaultsEnv5)

           OUTPUTS
            pRed                : double*
            pGreen              : double*
            pBlue               : double*'''
        return super(IRasterDefaultsEnv6, self).QueryBackgroundValues()
    def SetBackgroundValues(self, Red, Green, Blue):
        '''Method IRasterDefaultsEnv5.SetBackgroundValues (from IRasterDefaultsEnv5)

           INPUTS
            Red                 : double
            Green               : double
            Blue                : double'''
        return super(IRasterDefaultsEnv6, self).SetBackgroundValues(Red, Green, Blue)
    def get_BackgroundColor(self):
        '''Method IRasterDefaultsEnv5.get_BackgroundColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv6, self).get_BackgroundColor()
    def put_BackgroundColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_BackgroundColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv6, self).put_BackgroundColor(ppColor)
    def get_NoDataColor(self):
        '''Method IRasterDefaultsEnv5.get_NoDataColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv6, self).get_NoDataColor()
    def put_NoDataColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_NoDataColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv6, self).put_NoDataColor(ppColor)
    def get_CreateTiledTIFF(self):
        '''Method IRasterDefaultsEnv5.get_CreateTiledTIFF (from IRasterDefaultsEnv5)

           OUTPUT
            pTiled              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_CreateTiledTIFF()
    def put_CreateTiledTIFF(self, pTiled):
        '''Method IRasterDefaultsEnv5.put_CreateTiledTIFF (from IRasterDefaultsEnv5)

           INPUT
            pTiled              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_CreateTiledTIFF(pTiled)
    def put_AskSubdatasetSelection(self, pAsk):
        '''Method IRasterDefaultsEnv4.put_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           INPUT
            pAsk                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_AskSubdatasetSelection(pAsk)
    def get_AskSubdatasetSelection(self):
        '''Method IRasterDefaultsEnv4.get_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           OUTPUT
            pAsk                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_AskSubdatasetSelection()
    def put_DisplayWithContrastStretch(self, pStretch):
        '''Method IRasterDefaultsEnv4.put_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           INPUT
            pStretch            : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_DisplayWithContrastStretch(pStretch)
    def get_DisplayWithContrastStretch(self):
        '''Method IRasterDefaultsEnv4.get_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           OUTPUT
            pStretch            : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_DisplayWithContrastStretch()
    def put_MaximumRastersColorMatching(self, pSize):
        '''Method IRasterDefaultsEnv4.put_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv6, self).put_MaximumRastersColorMatching(pSize)
    def get_MaximumRastersColorMatching(self):
        '''Method IRasterDefaultsEnv4.get_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv6, self).get_MaximumRastersColorMatching()
    def put_MaximumBuildAttributeTableSize(self, pSize):
        '''Method IRasterDefaultsEnv3.put_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv6, self).put_MaximumBuildAttributeTableSize(pSize)
    def get_MaximumBuildAttributeTableSize(self):
        '''Method IRasterDefaultsEnv3.get_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv6, self).get_MaximumBuildAttributeTableSize()
    def put_FavorWorldFile(self, pFavor):
        '''Method IRasterDefaultsEnv3.put_FavorWorldFile (from IRasterDefaultsEnv3)

           INPUT
            pFavor              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_FavorWorldFile(pFavor)
    def get_FavorWorldFile(self):
        '''Method IRasterDefaultsEnv3.get_FavorWorldFile (from IRasterDefaultsEnv3)

           OUTPUT
            pFavor              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_FavorWorldFile()
    def get_AssumeHomogeneousCatalog(self):
        '''Method IRasterDefaultsEnv3.get_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           OUTPUT
            pHomogeneous        : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_AssumeHomogeneousCatalog()
    def put_AssumeHomogeneousCatalog(self, pHomogeneous):
        '''Method IRasterDefaultsEnv3.put_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           INPUT
            pHomogeneous        : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_AssumeHomogeneousCatalog(pHomogeneous)
    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode (from IRasterDefaultsEnv2)

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv6, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode (from IRasterDefaultsEnv2)

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv6, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling (from IRasterDefaultsEnv2)

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv6, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling (from IRasterDefaultsEnv2)

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv6, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath (from IRasterDefaultsEnv2)

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv6, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath (from IRasterDefaultsEnv2)

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv6, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize (from IRasterDefaultsEnv2)

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv6, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize (from IRasterDefaultsEnv2)

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv6, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll (from IRasterDefaultsEnv2)'''
        return super(IRasterDefaultsEnv6, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv6, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv6, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv6, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv6, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv6, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv6, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv6, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv6, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv6, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv6, self).get_Format(i)
    AskSubdatasetSelection = property(get_AskSubdatasetSelection, put_AskSubdatasetSelection, None)
    AssumeHomogeneousCatalog = property(get_AssumeHomogeneousCatalog, put_AssumeHomogeneousCatalog, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    BoundarySubLayerIsVisible = property(get_BoundarySubLayerIsVisible, put_BoundarySubLayerIsVisible, None)
    CreateTiledTIFF = property(get_CreateTiledTIFF, put_CreateTiledTIFF, None)
    DisplayBackground = property(get_DisplayBackground, put_DisplayBackground, None)
    DisplayWithContrastStretch = property(get_DisplayWithContrastStretch, put_DisplayWithContrastStretch, None)
    FavorWorldFile = property(get_FavorWorldFile, put_FavorWorldFile, None)
    FootprintSubLayerIsVisible = property(get_FootprintSubLayerIsVisible, put_FootprintSubLayerIsVisible, None)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    MaximumBuildAttributeTableSize = property(get_MaximumBuildAttributeTableSize, put_MaximumBuildAttributeTableSize, None)
    MaximumRastersColorMatching = property(get_MaximumRastersColorMatching, put_MaximumRastersColorMatching, None)
    MosaicLayerIsExpanded = property(get_MosaicLayerIsExpanded, put_MosaicLayerIsExpanded, None)
    NoDataColor = property(get_NoDataColor, put_NoDataColor, None)
    NumFormats = property(get_NumFormats, None, None)
    PreviewSubLayerIsVisible = property(get_PreviewSubLayerIsVisible, put_PreviewSubLayerIsVisible, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SeamlineSubLayerIsVisible = property(get_SeamlineSubLayerIsVisible, put_SeamlineSubLayerIsVisible, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv7(_esriCarto.IRasterDefaultsEnv7):
    _IID = uuid.UUID('d6071d40-e01c-453e-8f3b-a84e0bda0192')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv7, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_StretchType(self, en_stretch):
        '''Method IRasterDefaultsEnv7.put_StretchType

           INPUT
            en_stretch          : esriRasterStretchTypesEnum'''
        return super(IRasterDefaultsEnv7, self).put_StretchType(en_stretch)
    def get_StretchType(self):
        '''Method IRasterDefaultsEnv7.get_StretchType

           OUTPUT
            en_stretch          : esriRasterStretchTypesEnum*'''
        return super(IRasterDefaultsEnv7, self).get_StretchType()
    def put_StandardDeviationsParam(self, param):
        '''Method IRasterDefaultsEnv7.put_StandardDeviationsParam

           INPUT
            param               : double'''
        return super(IRasterDefaultsEnv7, self).put_StandardDeviationsParam(param)
    def get_StandardDeviationsParam(self):
        '''Method IRasterDefaultsEnv7.get_StandardDeviationsParam

           OUTPUT
            param               : double*'''
        return super(IRasterDefaultsEnv7, self).get_StandardDeviationsParam()
    def put_UseGamma(self, pUseGamma):
        '''Method IRasterDefaultsEnv7.put_UseGamma

           INPUT
            pUseGamma           : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_UseGamma(pUseGamma)
    def get_UseGamma(self):
        '''Method IRasterDefaultsEnv7.get_UseGamma

           OUTPUT
            pUseGamma           : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_UseGamma()
    def put_GammaRedValue(self, pRedGamma):
        '''Method IRasterDefaultsEnv7.put_GammaRedValue

           INPUT
            pRedGamma           : double'''
        return super(IRasterDefaultsEnv7, self).put_GammaRedValue(pRedGamma)
    def get_GammaRedValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaRedValue

           OUTPUT
            pRedGamma           : double*'''
        return super(IRasterDefaultsEnv7, self).get_GammaRedValue()
    def put_GammaGreenValue(self, pGreenGamma):
        '''Method IRasterDefaultsEnv7.put_GammaGreenValue

           INPUT
            pGreenGamma         : double'''
        return super(IRasterDefaultsEnv7, self).put_GammaGreenValue(pGreenGamma)
    def get_GammaGreenValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaGreenValue

           OUTPUT
            pGreenGamma         : double*'''
        return super(IRasterDefaultsEnv7, self).get_GammaGreenValue()
    def put_GammaBlueValue(self, pBlueGamma):
        '''Method IRasterDefaultsEnv7.put_GammaBlueValue

           INPUT
            pBlueGamma          : double'''
        return super(IRasterDefaultsEnv7, self).put_GammaBlueValue(pBlueGamma)
    def get_GammaBlueValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaBlueValue

           OUTPUT
            pBlueGamma          : double*'''
        return super(IRasterDefaultsEnv7, self).get_GammaBlueValue()
    def put_MinPercent(self, pPercent):
        '''Method IRasterDefaultsEnv7.put_MinPercent

           INPUT
            pPercent            : double'''
        return super(IRasterDefaultsEnv7, self).put_MinPercent(pPercent)
    def get_MinPercent(self):
        '''Method IRasterDefaultsEnv7.get_MinPercent

           OUTPUT
            pPercent            : double*'''
        return super(IRasterDefaultsEnv7, self).get_MinPercent()
    def put_MaxPercent(self, pPercent):
        '''Method IRasterDefaultsEnv7.put_MaxPercent

           INPUT
            pPercent            : double'''
        return super(IRasterDefaultsEnv7, self).put_MaxPercent(pPercent)
    def get_MaxPercent(self):
        '''Method IRasterDefaultsEnv7.get_MaxPercent

           OUTPUT
            pPercent            : double*'''
        return super(IRasterDefaultsEnv7, self).get_MaxPercent()
    def put_MosaicLayerIsExpanded(self, pIsExpanded):
        '''Method IRasterDefaultsEnv6.put_MosaicLayerIsExpanded (from IRasterDefaultsEnv6)

           INPUT
            pIsExpanded         : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_MosaicLayerIsExpanded(pIsExpanded)
    def get_MosaicLayerIsExpanded(self):
        '''Method IRasterDefaultsEnv6.get_MosaicLayerIsExpanded (from IRasterDefaultsEnv6)

           OUTPUT
            pIsExpanded         : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_MosaicLayerIsExpanded()
    def put_BoundarySubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_BoundarySubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_BoundarySubLayerIsVisible(pIsVisible)
    def get_BoundarySubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_BoundarySubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_BoundarySubLayerIsVisible()
    def put_FootprintSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_FootprintSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_FootprintSubLayerIsVisible(pIsVisible)
    def get_FootprintSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_FootprintSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_FootprintSubLayerIsVisible()
    def put_PreviewSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_PreviewSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_PreviewSubLayerIsVisible(pIsVisible)
    def get_PreviewSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_PreviewSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_PreviewSubLayerIsVisible()
    def put_SeamlineSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_SeamlineSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_SeamlineSubLayerIsVisible(pIsVisible)
    def get_SeamlineSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_SeamlineSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_SeamlineSubLayerIsVisible()
    def put_DisplayBackground(self, b):
        '''Method IRasterDefaultsEnv5.put_DisplayBackground (from IRasterDefaultsEnv5)

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_DisplayBackground(b)
    def get_DisplayBackground(self):
        '''Method IRasterDefaultsEnv5.get_DisplayBackground (from IRasterDefaultsEnv5)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_DisplayBackground()
    def QueryBackgroundValues(self):
        '''Method IRasterDefaultsEnv5.QueryBackgroundValues (from IRasterDefaultsEnv5)

           OUTPUTS
            pRed                : double*
            pGreen              : double*
            pBlue               : double*'''
        return super(IRasterDefaultsEnv7, self).QueryBackgroundValues()
    def SetBackgroundValues(self, Red, Green, Blue):
        '''Method IRasterDefaultsEnv5.SetBackgroundValues (from IRasterDefaultsEnv5)

           INPUTS
            Red                 : double
            Green               : double
            Blue                : double'''
        return super(IRasterDefaultsEnv7, self).SetBackgroundValues(Red, Green, Blue)
    def get_BackgroundColor(self):
        '''Method IRasterDefaultsEnv5.get_BackgroundColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv7, self).get_BackgroundColor()
    def put_BackgroundColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_BackgroundColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv7, self).put_BackgroundColor(ppColor)
    def get_NoDataColor(self):
        '''Method IRasterDefaultsEnv5.get_NoDataColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv7, self).get_NoDataColor()
    def put_NoDataColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_NoDataColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv7, self).put_NoDataColor(ppColor)
    def get_CreateTiledTIFF(self):
        '''Method IRasterDefaultsEnv5.get_CreateTiledTIFF (from IRasterDefaultsEnv5)

           OUTPUT
            pTiled              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_CreateTiledTIFF()
    def put_CreateTiledTIFF(self, pTiled):
        '''Method IRasterDefaultsEnv5.put_CreateTiledTIFF (from IRasterDefaultsEnv5)

           INPUT
            pTiled              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_CreateTiledTIFF(pTiled)
    def put_AskSubdatasetSelection(self, pAsk):
        '''Method IRasterDefaultsEnv4.put_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           INPUT
            pAsk                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_AskSubdatasetSelection(pAsk)
    def get_AskSubdatasetSelection(self):
        '''Method IRasterDefaultsEnv4.get_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           OUTPUT
            pAsk                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_AskSubdatasetSelection()
    def put_DisplayWithContrastStretch(self, pStretch):
        '''Method IRasterDefaultsEnv4.put_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           INPUT
            pStretch            : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_DisplayWithContrastStretch(pStretch)
    def get_DisplayWithContrastStretch(self):
        '''Method IRasterDefaultsEnv4.get_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           OUTPUT
            pStretch            : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_DisplayWithContrastStretch()
    def put_MaximumRastersColorMatching(self, pSize):
        '''Method IRasterDefaultsEnv4.put_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv7, self).put_MaximumRastersColorMatching(pSize)
    def get_MaximumRastersColorMatching(self):
        '''Method IRasterDefaultsEnv4.get_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv7, self).get_MaximumRastersColorMatching()
    def put_MaximumBuildAttributeTableSize(self, pSize):
        '''Method IRasterDefaultsEnv3.put_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv7, self).put_MaximumBuildAttributeTableSize(pSize)
    def get_MaximumBuildAttributeTableSize(self):
        '''Method IRasterDefaultsEnv3.get_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv7, self).get_MaximumBuildAttributeTableSize()
    def put_FavorWorldFile(self, pFavor):
        '''Method IRasterDefaultsEnv3.put_FavorWorldFile (from IRasterDefaultsEnv3)

           INPUT
            pFavor              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_FavorWorldFile(pFavor)
    def get_FavorWorldFile(self):
        '''Method IRasterDefaultsEnv3.get_FavorWorldFile (from IRasterDefaultsEnv3)

           OUTPUT
            pFavor              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_FavorWorldFile()
    def get_AssumeHomogeneousCatalog(self):
        '''Method IRasterDefaultsEnv3.get_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           OUTPUT
            pHomogeneous        : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_AssumeHomogeneousCatalog()
    def put_AssumeHomogeneousCatalog(self, pHomogeneous):
        '''Method IRasterDefaultsEnv3.put_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           INPUT
            pHomogeneous        : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_AssumeHomogeneousCatalog(pHomogeneous)
    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode (from IRasterDefaultsEnv2)

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv7, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode (from IRasterDefaultsEnv2)

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv7, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling (from IRasterDefaultsEnv2)

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv7, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling (from IRasterDefaultsEnv2)

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv7, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath (from IRasterDefaultsEnv2)

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv7, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath (from IRasterDefaultsEnv2)

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv7, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize (from IRasterDefaultsEnv2)

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv7, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize (from IRasterDefaultsEnv2)

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv7, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll (from IRasterDefaultsEnv2)'''
        return super(IRasterDefaultsEnv7, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv7, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv7, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv7, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv7, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv7, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv7, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv7, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv7, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv7, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv7, self).get_Format(i)
    AskSubdatasetSelection = property(get_AskSubdatasetSelection, put_AskSubdatasetSelection, None)
    AssumeHomogeneousCatalog = property(get_AssumeHomogeneousCatalog, put_AssumeHomogeneousCatalog, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    BoundarySubLayerIsVisible = property(get_BoundarySubLayerIsVisible, put_BoundarySubLayerIsVisible, None)
    CreateTiledTIFF = property(get_CreateTiledTIFF, put_CreateTiledTIFF, None)
    DisplayBackground = property(get_DisplayBackground, put_DisplayBackground, None)
    DisplayWithContrastStretch = property(get_DisplayWithContrastStretch, put_DisplayWithContrastStretch, None)
    FavorWorldFile = property(get_FavorWorldFile, put_FavorWorldFile, None)
    FootprintSubLayerIsVisible = property(get_FootprintSubLayerIsVisible, put_FootprintSubLayerIsVisible, None)
    GammaBlueValue = property(get_GammaBlueValue, put_GammaBlueValue, None)
    GammaGreenValue = property(get_GammaGreenValue, put_GammaGreenValue, None)
    GammaRedValue = property(get_GammaRedValue, put_GammaRedValue, None)
    MaxPercent = property(get_MaxPercent, put_MaxPercent, None)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    MaximumBuildAttributeTableSize = property(get_MaximumBuildAttributeTableSize, put_MaximumBuildAttributeTableSize, None)
    MaximumRastersColorMatching = property(get_MaximumRastersColorMatching, put_MaximumRastersColorMatching, None)
    MinPercent = property(get_MinPercent, put_MinPercent, None)
    MosaicLayerIsExpanded = property(get_MosaicLayerIsExpanded, put_MosaicLayerIsExpanded, None)
    NoDataColor = property(get_NoDataColor, put_NoDataColor, None)
    NumFormats = property(get_NumFormats, None, None)
    PreviewSubLayerIsVisible = property(get_PreviewSubLayerIsVisible, put_PreviewSubLayerIsVisible, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SeamlineSubLayerIsVisible = property(get_SeamlineSubLayerIsVisible, put_SeamlineSubLayerIsVisible, None)
    StandardDeviationsParam = property(get_StandardDeviationsParam, put_StandardDeviationsParam, None)
    StretchType = property(get_StretchType, put_StretchType, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    UseGamma = property(get_UseGamma, put_UseGamma, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv8(_esriCarto.IRasterDefaultsEnv8):
    _IID = uuid.UUID('bcbed4b5-354f-4b65-811e-91d322b2ede7')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv8, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_RenderingDefaultsEnabled(self, pYes):
        '''Method IRasterDefaultsEnv8.put_RenderingDefaultsEnabled

           INPUT
            pYes                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_RenderingDefaultsEnabled(pYes)
    def get_RenderingDefaultsEnabled(self):
        '''Method IRasterDefaultsEnv8.get_RenderingDefaultsEnabled

           OUTPUT
            pYes                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_RenderingDefaultsEnabled()
    def put_UseBandSpectralInfoForRGBMapping(self, pYes):
        '''Method IRasterDefaultsEnv8.put_UseBandSpectralInfoForRGBMapping

           INPUT
            pYes                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_UseBandSpectralInfoForRGBMapping(pYes)
    def get_UseBandSpectralInfoForRGBMapping(self):
        '''Method IRasterDefaultsEnv8.get_UseBandSpectralInfoForRGBMapping

           OUTPUT
            pYes                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_UseBandSpectralInfoForRGBMapping()
    def put_DisplayServiceCacheByDefault(self, pYes):
        '''Method IRasterDefaultsEnv8.put_DisplayServiceCacheByDefault

           INPUT
            pYes                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_DisplayServiceCacheByDefault(pYes)
    def get_DisplayServiceCacheByDefault(self):
        '''Method IRasterDefaultsEnv8.get_DisplayServiceCacheByDefault

           OUTPUT
            pYes                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_DisplayServiceCacheByDefault()
    def put_StretchType(self, en_stretch):
        '''Method IRasterDefaultsEnv7.put_StretchType (from IRasterDefaultsEnv7)

           INPUT
            en_stretch          : esriRasterStretchTypesEnum'''
        return super(IRasterDefaultsEnv8, self).put_StretchType(en_stretch)
    def get_StretchType(self):
        '''Method IRasterDefaultsEnv7.get_StretchType (from IRasterDefaultsEnv7)

           OUTPUT
            en_stretch          : esriRasterStretchTypesEnum*'''
        return super(IRasterDefaultsEnv8, self).get_StretchType()
    def put_StandardDeviationsParam(self, param):
        '''Method IRasterDefaultsEnv7.put_StandardDeviationsParam (from IRasterDefaultsEnv7)

           INPUT
            param               : double'''
        return super(IRasterDefaultsEnv8, self).put_StandardDeviationsParam(param)
    def get_StandardDeviationsParam(self):
        '''Method IRasterDefaultsEnv7.get_StandardDeviationsParam (from IRasterDefaultsEnv7)

           OUTPUT
            param               : double*'''
        return super(IRasterDefaultsEnv8, self).get_StandardDeviationsParam()
    def put_UseGamma(self, pUseGamma):
        '''Method IRasterDefaultsEnv7.put_UseGamma (from IRasterDefaultsEnv7)

           INPUT
            pUseGamma           : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_UseGamma(pUseGamma)
    def get_UseGamma(self):
        '''Method IRasterDefaultsEnv7.get_UseGamma (from IRasterDefaultsEnv7)

           OUTPUT
            pUseGamma           : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_UseGamma()
    def put_GammaRedValue(self, pRedGamma):
        '''Method IRasterDefaultsEnv7.put_GammaRedValue (from IRasterDefaultsEnv7)

           INPUT
            pRedGamma           : double'''
        return super(IRasterDefaultsEnv8, self).put_GammaRedValue(pRedGamma)
    def get_GammaRedValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaRedValue (from IRasterDefaultsEnv7)

           OUTPUT
            pRedGamma           : double*'''
        return super(IRasterDefaultsEnv8, self).get_GammaRedValue()
    def put_GammaGreenValue(self, pGreenGamma):
        '''Method IRasterDefaultsEnv7.put_GammaGreenValue (from IRasterDefaultsEnv7)

           INPUT
            pGreenGamma         : double'''
        return super(IRasterDefaultsEnv8, self).put_GammaGreenValue(pGreenGamma)
    def get_GammaGreenValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaGreenValue (from IRasterDefaultsEnv7)

           OUTPUT
            pGreenGamma         : double*'''
        return super(IRasterDefaultsEnv8, self).get_GammaGreenValue()
    def put_GammaBlueValue(self, pBlueGamma):
        '''Method IRasterDefaultsEnv7.put_GammaBlueValue (from IRasterDefaultsEnv7)

           INPUT
            pBlueGamma          : double'''
        return super(IRasterDefaultsEnv8, self).put_GammaBlueValue(pBlueGamma)
    def get_GammaBlueValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaBlueValue (from IRasterDefaultsEnv7)

           OUTPUT
            pBlueGamma          : double*'''
        return super(IRasterDefaultsEnv8, self).get_GammaBlueValue()
    def put_MinPercent(self, pPercent):
        '''Method IRasterDefaultsEnv7.put_MinPercent (from IRasterDefaultsEnv7)

           INPUT
            pPercent            : double'''
        return super(IRasterDefaultsEnv8, self).put_MinPercent(pPercent)
    def get_MinPercent(self):
        '''Method IRasterDefaultsEnv7.get_MinPercent (from IRasterDefaultsEnv7)

           OUTPUT
            pPercent            : double*'''
        return super(IRasterDefaultsEnv8, self).get_MinPercent()
    def put_MaxPercent(self, pPercent):
        '''Method IRasterDefaultsEnv7.put_MaxPercent (from IRasterDefaultsEnv7)

           INPUT
            pPercent            : double'''
        return super(IRasterDefaultsEnv8, self).put_MaxPercent(pPercent)
    def get_MaxPercent(self):
        '''Method IRasterDefaultsEnv7.get_MaxPercent (from IRasterDefaultsEnv7)

           OUTPUT
            pPercent            : double*'''
        return super(IRasterDefaultsEnv8, self).get_MaxPercent()
    def put_MosaicLayerIsExpanded(self, pIsExpanded):
        '''Method IRasterDefaultsEnv6.put_MosaicLayerIsExpanded (from IRasterDefaultsEnv6)

           INPUT
            pIsExpanded         : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_MosaicLayerIsExpanded(pIsExpanded)
    def get_MosaicLayerIsExpanded(self):
        '''Method IRasterDefaultsEnv6.get_MosaicLayerIsExpanded (from IRasterDefaultsEnv6)

           OUTPUT
            pIsExpanded         : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_MosaicLayerIsExpanded()
    def put_BoundarySubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_BoundarySubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_BoundarySubLayerIsVisible(pIsVisible)
    def get_BoundarySubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_BoundarySubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_BoundarySubLayerIsVisible()
    def put_FootprintSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_FootprintSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_FootprintSubLayerIsVisible(pIsVisible)
    def get_FootprintSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_FootprintSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_FootprintSubLayerIsVisible()
    def put_PreviewSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_PreviewSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_PreviewSubLayerIsVisible(pIsVisible)
    def get_PreviewSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_PreviewSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_PreviewSubLayerIsVisible()
    def put_SeamlineSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_SeamlineSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_SeamlineSubLayerIsVisible(pIsVisible)
    def get_SeamlineSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_SeamlineSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_SeamlineSubLayerIsVisible()
    def put_DisplayBackground(self, b):
        '''Method IRasterDefaultsEnv5.put_DisplayBackground (from IRasterDefaultsEnv5)

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_DisplayBackground(b)
    def get_DisplayBackground(self):
        '''Method IRasterDefaultsEnv5.get_DisplayBackground (from IRasterDefaultsEnv5)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_DisplayBackground()
    def QueryBackgroundValues(self):
        '''Method IRasterDefaultsEnv5.QueryBackgroundValues (from IRasterDefaultsEnv5)

           OUTPUTS
            pRed                : double*
            pGreen              : double*
            pBlue               : double*'''
        return super(IRasterDefaultsEnv8, self).QueryBackgroundValues()
    def SetBackgroundValues(self, Red, Green, Blue):
        '''Method IRasterDefaultsEnv5.SetBackgroundValues (from IRasterDefaultsEnv5)

           INPUTS
            Red                 : double
            Green               : double
            Blue                : double'''
        return super(IRasterDefaultsEnv8, self).SetBackgroundValues(Red, Green, Blue)
    def get_BackgroundColor(self):
        '''Method IRasterDefaultsEnv5.get_BackgroundColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv8, self).get_BackgroundColor()
    def put_BackgroundColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_BackgroundColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv8, self).put_BackgroundColor(ppColor)
    def get_NoDataColor(self):
        '''Method IRasterDefaultsEnv5.get_NoDataColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv8, self).get_NoDataColor()
    def put_NoDataColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_NoDataColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv8, self).put_NoDataColor(ppColor)
    def get_CreateTiledTIFF(self):
        '''Method IRasterDefaultsEnv5.get_CreateTiledTIFF (from IRasterDefaultsEnv5)

           OUTPUT
            pTiled              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_CreateTiledTIFF()
    def put_CreateTiledTIFF(self, pTiled):
        '''Method IRasterDefaultsEnv5.put_CreateTiledTIFF (from IRasterDefaultsEnv5)

           INPUT
            pTiled              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_CreateTiledTIFF(pTiled)
    def put_AskSubdatasetSelection(self, pAsk):
        '''Method IRasterDefaultsEnv4.put_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           INPUT
            pAsk                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_AskSubdatasetSelection(pAsk)
    def get_AskSubdatasetSelection(self):
        '''Method IRasterDefaultsEnv4.get_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           OUTPUT
            pAsk                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_AskSubdatasetSelection()
    def put_DisplayWithContrastStretch(self, pStretch):
        '''Method IRasterDefaultsEnv4.put_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           INPUT
            pStretch            : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_DisplayWithContrastStretch(pStretch)
    def get_DisplayWithContrastStretch(self):
        '''Method IRasterDefaultsEnv4.get_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           OUTPUT
            pStretch            : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_DisplayWithContrastStretch()
    def put_MaximumRastersColorMatching(self, pSize):
        '''Method IRasterDefaultsEnv4.put_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv8, self).put_MaximumRastersColorMatching(pSize)
    def get_MaximumRastersColorMatching(self):
        '''Method IRasterDefaultsEnv4.get_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv8, self).get_MaximumRastersColorMatching()
    def put_MaximumBuildAttributeTableSize(self, pSize):
        '''Method IRasterDefaultsEnv3.put_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv8, self).put_MaximumBuildAttributeTableSize(pSize)
    def get_MaximumBuildAttributeTableSize(self):
        '''Method IRasterDefaultsEnv3.get_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv8, self).get_MaximumBuildAttributeTableSize()
    def put_FavorWorldFile(self, pFavor):
        '''Method IRasterDefaultsEnv3.put_FavorWorldFile (from IRasterDefaultsEnv3)

           INPUT
            pFavor              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_FavorWorldFile(pFavor)
    def get_FavorWorldFile(self):
        '''Method IRasterDefaultsEnv3.get_FavorWorldFile (from IRasterDefaultsEnv3)

           OUTPUT
            pFavor              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_FavorWorldFile()
    def get_AssumeHomogeneousCatalog(self):
        '''Method IRasterDefaultsEnv3.get_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           OUTPUT
            pHomogeneous        : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_AssumeHomogeneousCatalog()
    def put_AssumeHomogeneousCatalog(self, pHomogeneous):
        '''Method IRasterDefaultsEnv3.put_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           INPUT
            pHomogeneous        : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_AssumeHomogeneousCatalog(pHomogeneous)
    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode (from IRasterDefaultsEnv2)

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv8, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode (from IRasterDefaultsEnv2)

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv8, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling (from IRasterDefaultsEnv2)

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv8, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling (from IRasterDefaultsEnv2)

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv8, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath (from IRasterDefaultsEnv2)

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv8, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath (from IRasterDefaultsEnv2)

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv8, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize (from IRasterDefaultsEnv2)

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv8, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize (from IRasterDefaultsEnv2)

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv8, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll (from IRasterDefaultsEnv2)'''
        return super(IRasterDefaultsEnv8, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv8, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv8, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv8, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv8, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv8, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv8, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv8, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv8, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv8, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv8, self).get_Format(i)
    AskSubdatasetSelection = property(get_AskSubdatasetSelection, put_AskSubdatasetSelection, None)
    AssumeHomogeneousCatalog = property(get_AssumeHomogeneousCatalog, put_AssumeHomogeneousCatalog, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    BoundarySubLayerIsVisible = property(get_BoundarySubLayerIsVisible, put_BoundarySubLayerIsVisible, None)
    CreateTiledTIFF = property(get_CreateTiledTIFF, put_CreateTiledTIFF, None)
    DisplayBackground = property(get_DisplayBackground, put_DisplayBackground, None)
    DisplayServiceCacheByDefault = property(get_DisplayServiceCacheByDefault, put_DisplayServiceCacheByDefault, None)
    DisplayWithContrastStretch = property(get_DisplayWithContrastStretch, put_DisplayWithContrastStretch, None)
    FavorWorldFile = property(get_FavorWorldFile, put_FavorWorldFile, None)
    FootprintSubLayerIsVisible = property(get_FootprintSubLayerIsVisible, put_FootprintSubLayerIsVisible, None)
    GammaBlueValue = property(get_GammaBlueValue, put_GammaBlueValue, None)
    GammaGreenValue = property(get_GammaGreenValue, put_GammaGreenValue, None)
    GammaRedValue = property(get_GammaRedValue, put_GammaRedValue, None)
    MaxPercent = property(get_MaxPercent, put_MaxPercent, None)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    MaximumBuildAttributeTableSize = property(get_MaximumBuildAttributeTableSize, put_MaximumBuildAttributeTableSize, None)
    MaximumRastersColorMatching = property(get_MaximumRastersColorMatching, put_MaximumRastersColorMatching, None)
    MinPercent = property(get_MinPercent, put_MinPercent, None)
    MosaicLayerIsExpanded = property(get_MosaicLayerIsExpanded, put_MosaicLayerIsExpanded, None)
    NoDataColor = property(get_NoDataColor, put_NoDataColor, None)
    NumFormats = property(get_NumFormats, None, None)
    PreviewSubLayerIsVisible = property(get_PreviewSubLayerIsVisible, put_PreviewSubLayerIsVisible, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    RenderingDefaultsEnabled = property(get_RenderingDefaultsEnabled, put_RenderingDefaultsEnabled, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SeamlineSubLayerIsVisible = property(get_SeamlineSubLayerIsVisible, put_SeamlineSubLayerIsVisible, None)
    StandardDeviationsParam = property(get_StandardDeviationsParam, put_StandardDeviationsParam, None)
    StretchType = property(get_StretchType, put_StretchType, None)
    UseBandSpectralInfoForRGBMapping = property(get_UseBandSpectralInfoForRGBMapping, put_UseBandSpectralInfoForRGBMapping, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    UseGamma = property(get_UseGamma, put_UseGamma, None)
    Format = IndexProperty(get_Format, None)

class IRasterDefaultsEnv9(_esriCarto.IRasterDefaultsEnv9):
    _IID = uuid.UUID('55141934-2352-4fa1-9a42-5f13c0b4d9c4')

    def __init__(self, *args, **kw):
        super(IRasterDefaultsEnv9, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PyramidResamplingMethod(self, pYes):
        '''Method IRasterDefaultsEnv9.put_PyramidResamplingMethod

           INPUT
            pYes                : rstResamplingTypes'''
        return super(IRasterDefaultsEnv9, self).put_PyramidResamplingMethod(pYes)
    def get_PyramidResamplingMethod(self):
        '''Method IRasterDefaultsEnv9.get_PyramidResamplingMethod

           OUTPUT
            pYes                : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv9, self).get_PyramidResamplingMethod()
    def put_PyramidCompressionType(self, compressionType):
        '''Method IRasterDefaultsEnv9.put_PyramidCompressionType

           INPUT
            compressionType     : esriRasterCompressionType'''
        return super(IRasterDefaultsEnv9, self).put_PyramidCompressionType(compressionType)
    def get_PyramidCompressionType(self):
        '''Method IRasterDefaultsEnv9.get_PyramidCompressionType

           OUTPUT
            compressionType     : esriRasterCompressionType*'''
        return super(IRasterDefaultsEnv9, self).get_PyramidCompressionType()
    def put_PyramidCompressionQuality(self, Quality):
        '''Method IRasterDefaultsEnv9.put_PyramidCompressionQuality

           INPUT
            Quality             : long'''
        return super(IRasterDefaultsEnv9, self).put_PyramidCompressionQuality(Quality)
    def get_PyramidCompressionQuality(self):
        '''Method IRasterDefaultsEnv9.get_PyramidCompressionQuality

           OUTPUT
            Quality             : long*'''
        return super(IRasterDefaultsEnv9, self).get_PyramidCompressionQuality()
    def put_RenderingDefaultsEnabled(self, pYes):
        '''Method IRasterDefaultsEnv8.put_RenderingDefaultsEnabled (from IRasterDefaultsEnv8)

           INPUT
            pYes                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_RenderingDefaultsEnabled(pYes)
    def get_RenderingDefaultsEnabled(self):
        '''Method IRasterDefaultsEnv8.get_RenderingDefaultsEnabled (from IRasterDefaultsEnv8)

           OUTPUT
            pYes                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_RenderingDefaultsEnabled()
    def put_UseBandSpectralInfoForRGBMapping(self, pYes):
        '''Method IRasterDefaultsEnv8.put_UseBandSpectralInfoForRGBMapping (from IRasterDefaultsEnv8)

           INPUT
            pYes                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_UseBandSpectralInfoForRGBMapping(pYes)
    def get_UseBandSpectralInfoForRGBMapping(self):
        '''Method IRasterDefaultsEnv8.get_UseBandSpectralInfoForRGBMapping (from IRasterDefaultsEnv8)

           OUTPUT
            pYes                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_UseBandSpectralInfoForRGBMapping()
    def put_DisplayServiceCacheByDefault(self, pYes):
        '''Method IRasterDefaultsEnv8.put_DisplayServiceCacheByDefault (from IRasterDefaultsEnv8)

           INPUT
            pYes                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_DisplayServiceCacheByDefault(pYes)
    def get_DisplayServiceCacheByDefault(self):
        '''Method IRasterDefaultsEnv8.get_DisplayServiceCacheByDefault (from IRasterDefaultsEnv8)

           OUTPUT
            pYes                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_DisplayServiceCacheByDefault()
    def put_StretchType(self, en_stretch):
        '''Method IRasterDefaultsEnv7.put_StretchType (from IRasterDefaultsEnv7)

           INPUT
            en_stretch          : esriRasterStretchTypesEnum'''
        return super(IRasterDefaultsEnv9, self).put_StretchType(en_stretch)
    def get_StretchType(self):
        '''Method IRasterDefaultsEnv7.get_StretchType (from IRasterDefaultsEnv7)

           OUTPUT
            en_stretch          : esriRasterStretchTypesEnum*'''
        return super(IRasterDefaultsEnv9, self).get_StretchType()
    def put_StandardDeviationsParam(self, param):
        '''Method IRasterDefaultsEnv7.put_StandardDeviationsParam (from IRasterDefaultsEnv7)

           INPUT
            param               : double'''
        return super(IRasterDefaultsEnv9, self).put_StandardDeviationsParam(param)
    def get_StandardDeviationsParam(self):
        '''Method IRasterDefaultsEnv7.get_StandardDeviationsParam (from IRasterDefaultsEnv7)

           OUTPUT
            param               : double*'''
        return super(IRasterDefaultsEnv9, self).get_StandardDeviationsParam()
    def put_UseGamma(self, pUseGamma):
        '''Method IRasterDefaultsEnv7.put_UseGamma (from IRasterDefaultsEnv7)

           INPUT
            pUseGamma           : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_UseGamma(pUseGamma)
    def get_UseGamma(self):
        '''Method IRasterDefaultsEnv7.get_UseGamma (from IRasterDefaultsEnv7)

           OUTPUT
            pUseGamma           : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_UseGamma()
    def put_GammaRedValue(self, pRedGamma):
        '''Method IRasterDefaultsEnv7.put_GammaRedValue (from IRasterDefaultsEnv7)

           INPUT
            pRedGamma           : double'''
        return super(IRasterDefaultsEnv9, self).put_GammaRedValue(pRedGamma)
    def get_GammaRedValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaRedValue (from IRasterDefaultsEnv7)

           OUTPUT
            pRedGamma           : double*'''
        return super(IRasterDefaultsEnv9, self).get_GammaRedValue()
    def put_GammaGreenValue(self, pGreenGamma):
        '''Method IRasterDefaultsEnv7.put_GammaGreenValue (from IRasterDefaultsEnv7)

           INPUT
            pGreenGamma         : double'''
        return super(IRasterDefaultsEnv9, self).put_GammaGreenValue(pGreenGamma)
    def get_GammaGreenValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaGreenValue (from IRasterDefaultsEnv7)

           OUTPUT
            pGreenGamma         : double*'''
        return super(IRasterDefaultsEnv9, self).get_GammaGreenValue()
    def put_GammaBlueValue(self, pBlueGamma):
        '''Method IRasterDefaultsEnv7.put_GammaBlueValue (from IRasterDefaultsEnv7)

           INPUT
            pBlueGamma          : double'''
        return super(IRasterDefaultsEnv9, self).put_GammaBlueValue(pBlueGamma)
    def get_GammaBlueValue(self):
        '''Method IRasterDefaultsEnv7.get_GammaBlueValue (from IRasterDefaultsEnv7)

           OUTPUT
            pBlueGamma          : double*'''
        return super(IRasterDefaultsEnv9, self).get_GammaBlueValue()
    def put_MinPercent(self, pPercent):
        '''Method IRasterDefaultsEnv7.put_MinPercent (from IRasterDefaultsEnv7)

           INPUT
            pPercent            : double'''
        return super(IRasterDefaultsEnv9, self).put_MinPercent(pPercent)
    def get_MinPercent(self):
        '''Method IRasterDefaultsEnv7.get_MinPercent (from IRasterDefaultsEnv7)

           OUTPUT
            pPercent            : double*'''
        return super(IRasterDefaultsEnv9, self).get_MinPercent()
    def put_MaxPercent(self, pPercent):
        '''Method IRasterDefaultsEnv7.put_MaxPercent (from IRasterDefaultsEnv7)

           INPUT
            pPercent            : double'''
        return super(IRasterDefaultsEnv9, self).put_MaxPercent(pPercent)
    def get_MaxPercent(self):
        '''Method IRasterDefaultsEnv7.get_MaxPercent (from IRasterDefaultsEnv7)

           OUTPUT
            pPercent            : double*'''
        return super(IRasterDefaultsEnv9, self).get_MaxPercent()
    def put_MosaicLayerIsExpanded(self, pIsExpanded):
        '''Method IRasterDefaultsEnv6.put_MosaicLayerIsExpanded (from IRasterDefaultsEnv6)

           INPUT
            pIsExpanded         : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_MosaicLayerIsExpanded(pIsExpanded)
    def get_MosaicLayerIsExpanded(self):
        '''Method IRasterDefaultsEnv6.get_MosaicLayerIsExpanded (from IRasterDefaultsEnv6)

           OUTPUT
            pIsExpanded         : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_MosaicLayerIsExpanded()
    def put_BoundarySubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_BoundarySubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_BoundarySubLayerIsVisible(pIsVisible)
    def get_BoundarySubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_BoundarySubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_BoundarySubLayerIsVisible()
    def put_FootprintSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_FootprintSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_FootprintSubLayerIsVisible(pIsVisible)
    def get_FootprintSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_FootprintSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_FootprintSubLayerIsVisible()
    def put_PreviewSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_PreviewSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_PreviewSubLayerIsVisible(pIsVisible)
    def get_PreviewSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_PreviewSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_PreviewSubLayerIsVisible()
    def put_SeamlineSubLayerIsVisible(self, pIsVisible):
        '''Method IRasterDefaultsEnv6.put_SeamlineSubLayerIsVisible (from IRasterDefaultsEnv6)

           INPUT
            pIsVisible          : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_SeamlineSubLayerIsVisible(pIsVisible)
    def get_SeamlineSubLayerIsVisible(self):
        '''Method IRasterDefaultsEnv6.get_SeamlineSubLayerIsVisible (from IRasterDefaultsEnv6)

           OUTPUT
            pIsVisible          : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_SeamlineSubLayerIsVisible()
    def put_DisplayBackground(self, b):
        '''Method IRasterDefaultsEnv5.put_DisplayBackground (from IRasterDefaultsEnv5)

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_DisplayBackground(b)
    def get_DisplayBackground(self):
        '''Method IRasterDefaultsEnv5.get_DisplayBackground (from IRasterDefaultsEnv5)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_DisplayBackground()
    def QueryBackgroundValues(self):
        '''Method IRasterDefaultsEnv5.QueryBackgroundValues (from IRasterDefaultsEnv5)

           OUTPUTS
            pRed                : double*
            pGreen              : double*
            pBlue               : double*'''
        return super(IRasterDefaultsEnv9, self).QueryBackgroundValues()
    def SetBackgroundValues(self, Red, Green, Blue):
        '''Method IRasterDefaultsEnv5.SetBackgroundValues (from IRasterDefaultsEnv5)

           INPUTS
            Red                 : double
            Green               : double
            Blue                : double'''
        return super(IRasterDefaultsEnv9, self).SetBackgroundValues(Red, Green, Blue)
    def get_BackgroundColor(self):
        '''Method IRasterDefaultsEnv5.get_BackgroundColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv9, self).get_BackgroundColor()
    def put_BackgroundColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_BackgroundColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv9, self).put_BackgroundColor(ppColor)
    def get_NoDataColor(self):
        '''Method IRasterDefaultsEnv5.get_NoDataColor (from IRasterDefaultsEnv5)

           OUTPUT
            ppColor             : IColor**'''
        return super(IRasterDefaultsEnv9, self).get_NoDataColor()
    def put_NoDataColor(self, ppColor):
        '''Method IRasterDefaultsEnv5.put_NoDataColor (from IRasterDefaultsEnv5)

           INPUT
            ppColor             : IColor*'''
        return super(IRasterDefaultsEnv9, self).put_NoDataColor(ppColor)
    def get_CreateTiledTIFF(self):
        '''Method IRasterDefaultsEnv5.get_CreateTiledTIFF (from IRasterDefaultsEnv5)

           OUTPUT
            pTiled              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_CreateTiledTIFF()
    def put_CreateTiledTIFF(self, pTiled):
        '''Method IRasterDefaultsEnv5.put_CreateTiledTIFF (from IRasterDefaultsEnv5)

           INPUT
            pTiled              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_CreateTiledTIFF(pTiled)
    def put_AskSubdatasetSelection(self, pAsk):
        '''Method IRasterDefaultsEnv4.put_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           INPUT
            pAsk                : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_AskSubdatasetSelection(pAsk)
    def get_AskSubdatasetSelection(self):
        '''Method IRasterDefaultsEnv4.get_AskSubdatasetSelection (from IRasterDefaultsEnv4)

           OUTPUT
            pAsk                : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_AskSubdatasetSelection()
    def put_DisplayWithContrastStretch(self, pStretch):
        '''Method IRasterDefaultsEnv4.put_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           INPUT
            pStretch            : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_DisplayWithContrastStretch(pStretch)
    def get_DisplayWithContrastStretch(self):
        '''Method IRasterDefaultsEnv4.get_DisplayWithContrastStretch (from IRasterDefaultsEnv4)

           OUTPUT
            pStretch            : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_DisplayWithContrastStretch()
    def put_MaximumRastersColorMatching(self, pSize):
        '''Method IRasterDefaultsEnv4.put_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv9, self).put_MaximumRastersColorMatching(pSize)
    def get_MaximumRastersColorMatching(self):
        '''Method IRasterDefaultsEnv4.get_MaximumRastersColorMatching (from IRasterDefaultsEnv4)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv9, self).get_MaximumRastersColorMatching()
    def put_MaximumBuildAttributeTableSize(self, pSize):
        '''Method IRasterDefaultsEnv3.put_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           INPUT
            pSize               : long'''
        return super(IRasterDefaultsEnv9, self).put_MaximumBuildAttributeTableSize(pSize)
    def get_MaximumBuildAttributeTableSize(self):
        '''Method IRasterDefaultsEnv3.get_MaximumBuildAttributeTableSize (from IRasterDefaultsEnv3)

           OUTPUT
            pSize               : long*'''
        return super(IRasterDefaultsEnv9, self).get_MaximumBuildAttributeTableSize()
    def put_FavorWorldFile(self, pFavor):
        '''Method IRasterDefaultsEnv3.put_FavorWorldFile (from IRasterDefaultsEnv3)

           INPUT
            pFavor              : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_FavorWorldFile(pFavor)
    def get_FavorWorldFile(self):
        '''Method IRasterDefaultsEnv3.get_FavorWorldFile (from IRasterDefaultsEnv3)

           OUTPUT
            pFavor              : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_FavorWorldFile()
    def get_AssumeHomogeneousCatalog(self):
        '''Method IRasterDefaultsEnv3.get_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           OUTPUT
            pHomogeneous        : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_AssumeHomogeneousCatalog()
    def put_AssumeHomogeneousCatalog(self, pHomogeneous):
        '''Method IRasterDefaultsEnv3.put_AssumeHomogeneousCatalog (from IRasterDefaultsEnv3)

           INPUT
            pHomogeneous        : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_AssumeHomogeneousCatalog(pHomogeneous)
    def put_RenderingMode(self, pRenderingMode):
        '''Method IRasterDefaultsEnv2.put_RenderingMode (from IRasterDefaultsEnv2)

           INPUT
            pRenderingMode      : esriRasterRenderingModeEnum'''
        return super(IRasterDefaultsEnv9, self).put_RenderingMode(pRenderingMode)
    def get_RenderingMode(self):
        '''Method IRasterDefaultsEnv2.get_RenderingMode (from IRasterDefaultsEnv2)

           OUTPUT
            pRenderingMode      : esriRasterRenderingModeEnum*'''
        return super(IRasterDefaultsEnv9, self).get_RenderingMode()
    def put_Resampling(self, pDefaultResampling):
        '''Method IRasterDefaultsEnv2.put_Resampling (from IRasterDefaultsEnv2)

           INPUT
            pDefaultResampling  : rstResamplingTypes'''
        return super(IRasterDefaultsEnv9, self).put_Resampling(pDefaultResampling)
    def get_Resampling(self):
        '''Method IRasterDefaultsEnv2.get_Resampling (from IRasterDefaultsEnv2)

           OUTPUT
            pDefaultResampling  : rstResamplingTypes*'''
        return super(IRasterDefaultsEnv9, self).get_Resampling()
    def put_ProxyFilePath(self, pProxyFilePath):
        '''Method IRasterDefaultsEnv2.put_ProxyFilePath (from IRasterDefaultsEnv2)

           INPUT
            pProxyFilePath      : BSTR'''
        return super(IRasterDefaultsEnv9, self).put_ProxyFilePath(pProxyFilePath)
    def get_ProxyFilePath(self):
        '''Method IRasterDefaultsEnv2.get_ProxyFilePath (from IRasterDefaultsEnv2)

           OUTPUT
            pProxyFilePath      : BSTR*'''
        return super(IRasterDefaultsEnv9, self).get_ProxyFilePath()
    def put_MaxTableSize(self, pMaxTableSize):
        '''Method IRasterDefaultsEnv2.put_MaxTableSize (from IRasterDefaultsEnv2)

           INPUT
            pMaxTableSize       : long'''
        return super(IRasterDefaultsEnv9, self).put_MaxTableSize(pMaxTableSize)
    def get_MaxTableSize(self):
        '''Method IRasterDefaultsEnv2.get_MaxTableSize (from IRasterDefaultsEnv2)

           OUTPUT
            pMaxTableSize       : long*'''
        return super(IRasterDefaultsEnv9, self).get_MaxTableSize()
    def UpdateAll(self):
        '''Method IRasterDefaultsEnv2.UpdateAll (from IRasterDefaultsEnv2)'''
        return super(IRasterDefaultsEnv9, self).UpdateAll()
    def get_PyramidCreateOpt(self):
        '''Method IRasterDefaultsEnv.get_PyramidCreateOpt (from IRasterDefaultsEnv)

           OUTPUT
            opt                 : esriRasterPyramidOptEnum*'''
        return super(IRasterDefaultsEnv9, self).get_PyramidCreateOpt()
    def put_PyramidCreateOpt(self, opt):
        '''Method IRasterDefaultsEnv.put_PyramidCreateOpt (from IRasterDefaultsEnv)

           INPUT
            opt                 : esriRasterPyramidOptEnum'''
        return super(IRasterDefaultsEnv9, self).put_PyramidCreateOpt(opt)
    def Query3BandRGB(self):
        '''Method IRasterDefaultsEnv.Query3BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv9, self).Query3BandRGB()
    def Set3BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set3BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv9, self).Set3BandRGB(redIndex, greenIndex, blueIndex)
    def Query4BandRGB(self):
        '''Method IRasterDefaultsEnv.Query4BandRGB (from IRasterDefaultsEnv)

           OUTPUTS
            redIndex            : long*
            greenIndex          : long*
            blueIndex           : long*'''
        return super(IRasterDefaultsEnv9, self).Query4BandRGB()
    def Set4BandRGB(self, redIndex, greenIndex, blueIndex):
        '''Method IRasterDefaultsEnv.Set4BandRGB (from IRasterDefaultsEnv)

           INPUTS
            redIndex            : long
            greenIndex          : long
            blueIndex           : long'''
        return super(IRasterDefaultsEnv9, self).Set4BandRGB(redIndex, greenIndex, blueIndex)
    def get_UseExtChecking(self):
        '''Method IRasterDefaultsEnv.get_UseExtChecking (from IRasterDefaultsEnv)

           OUTPUT
            useExts             : VARIANT_BOOL*'''
        return super(IRasterDefaultsEnv9, self).get_UseExtChecking()
    def put_UseExtChecking(self, useExts):
        '''Method IRasterDefaultsEnv.put_UseExtChecking (from IRasterDefaultsEnv)

           INPUT
            useExts             : VARIANT_BOOL'''
        return super(IRasterDefaultsEnv9, self).put_UseExtChecking(useExts)
    def get_NumFormats(self):
        '''Method IRasterDefaultsEnv.get_NumFormats (from IRasterDefaultsEnv)

           OUTPUT
            pNumFormats         : long*'''
        return super(IRasterDefaultsEnv9, self).get_NumFormats()
    def get_Format(self, i):
        '''Method IRasterDefaultsEnv.get_Format (from IRasterDefaultsEnv)

           INPUT
            i                   : long

           OUTPUT
            pRasterFormatInfo   : IRasterFormatInfo**'''
        return super(IRasterDefaultsEnv9, self).get_Format(i)
    AskSubdatasetSelection = property(get_AskSubdatasetSelection, put_AskSubdatasetSelection, None)
    AssumeHomogeneousCatalog = property(get_AssumeHomogeneousCatalog, put_AssumeHomogeneousCatalog, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    BoundarySubLayerIsVisible = property(get_BoundarySubLayerIsVisible, put_BoundarySubLayerIsVisible, None)
    CreateTiledTIFF = property(get_CreateTiledTIFF, put_CreateTiledTIFF, None)
    DisplayBackground = property(get_DisplayBackground, put_DisplayBackground, None)
    DisplayServiceCacheByDefault = property(get_DisplayServiceCacheByDefault, put_DisplayServiceCacheByDefault, None)
    DisplayWithContrastStretch = property(get_DisplayWithContrastStretch, put_DisplayWithContrastStretch, None)
    FavorWorldFile = property(get_FavorWorldFile, put_FavorWorldFile, None)
    FootprintSubLayerIsVisible = property(get_FootprintSubLayerIsVisible, put_FootprintSubLayerIsVisible, None)
    GammaBlueValue = property(get_GammaBlueValue, put_GammaBlueValue, None)
    GammaGreenValue = property(get_GammaGreenValue, put_GammaGreenValue, None)
    GammaRedValue = property(get_GammaRedValue, put_GammaRedValue, None)
    MaxPercent = property(get_MaxPercent, put_MaxPercent, None)
    MaxTableSize = property(get_MaxTableSize, put_MaxTableSize, None)
    MaximumBuildAttributeTableSize = property(get_MaximumBuildAttributeTableSize, put_MaximumBuildAttributeTableSize, None)
    MaximumRastersColorMatching = property(get_MaximumRastersColorMatching, put_MaximumRastersColorMatching, None)
    MinPercent = property(get_MinPercent, put_MinPercent, None)
    MosaicLayerIsExpanded = property(get_MosaicLayerIsExpanded, put_MosaicLayerIsExpanded, None)
    NoDataColor = property(get_NoDataColor, put_NoDataColor, None)
    NumFormats = property(get_NumFormats, None, None)
    PreviewSubLayerIsVisible = property(get_PreviewSubLayerIsVisible, put_PreviewSubLayerIsVisible, None)
    ProxyFilePath = property(get_ProxyFilePath, put_ProxyFilePath, None)
    PyramidCompressionQuality = property(get_PyramidCompressionQuality, put_PyramidCompressionQuality, None)
    PyramidCompressionType = property(get_PyramidCompressionType, put_PyramidCompressionType, None)
    PyramidCreateOpt = property(get_PyramidCreateOpt, put_PyramidCreateOpt, None)
    PyramidResamplingMethod = property(get_PyramidResamplingMethod, put_PyramidResamplingMethod, None)
    RenderingDefaultsEnabled = property(get_RenderingDefaultsEnabled, put_RenderingDefaultsEnabled, None)
    RenderingMode = property(get_RenderingMode, put_RenderingMode, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SeamlineSubLayerIsVisible = property(get_SeamlineSubLayerIsVisible, put_SeamlineSubLayerIsVisible, None)
    StandardDeviationsParam = property(get_StandardDeviationsParam, put_StandardDeviationsParam, None)
    StretchType = property(get_StretchType, put_StretchType, None)
    UseBandSpectralInfoForRGBMapping = property(get_UseBandSpectralInfoForRGBMapping, put_UseBandSpectralInfoForRGBMapping, None)
    UseExtChecking = property(get_UseExtChecking, put_UseExtChecking, None)
    UseGamma = property(get_UseGamma, put_UseGamma, None)
    Format = IndexProperty(get_Format, None)

class IImageServiceInfo(_esriCarto.IImageServiceInfo):
    _IID = uuid.UUID('bfcd28a7-b02f-4c5d-aa7e-d0ba474d5192')

    def __init__(self, *args, **kw):
        super(IImageServiceInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IImageServiceInfo.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IImageServiceInfo, self).get_Name()
    def get_Description(self):
        '''Method IImageServiceInfo.get_Description

           OUTPUT
            pDescrition         : BSTR*'''
        return super(IImageServiceInfo, self).get_Description()
    def get_SpatialReference(self):
        '''Method IImageServiceInfo.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IImageServiceInfo, self).get_SpatialReference()
    def get_Extent(self):
        '''Method IImageServiceInfo.get_Extent

           OUTPUT
            pExtent             : IEnvelope**'''
        return super(IImageServiceInfo, self).get_Extent()
    def GetPixelSize(self):
        '''Method IImageServiceInfo.GetPixelSize

           OUTPUTS
            pDx                 : double*
            pDy                 : double*'''
        return super(IImageServiceInfo, self).GetPixelSize()
    def GetStatistics(self, iBand):
        '''Method IImageServiceInfo.GetStatistics

           INPUT
            iBand               : long

           OUTPUTS
            pMin                : double*
            pMax                : double*
            pMean               : double*
            pStdv               : double*'''
        return super(IImageServiceInfo, self).GetStatistics(iBand)
    def get_BandCount(self):
        '''Method IImageServiceInfo.get_BandCount

           OUTPUT
            pBandCount          : long*'''
        return super(IImageServiceInfo, self).get_BandCount()
    def get_PixelType(self):
        '''Method IImageServiceInfo.get_PixelType

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IImageServiceInfo, self).get_PixelType()
    def get_NoData(self):
        '''Method IImageServiceInfo.get_NoData

           OUTPUT
            pNoData             : VARIANT*'''
        return super(IImageServiceInfo, self).get_NoData()
    def get_MaximumPixelSize(self):
        '''Method IImageServiceInfo.get_MaximumPixelSize

           OUTPUT
            pMaxPixelSize       : double*'''
        return super(IImageServiceInfo, self).get_MaximumPixelSize()
    def get_MinimumPixelSize(self):
        '''Method IImageServiceInfo.get_MinimumPixelSize

           OUTPUT
            pMinPixelSize       : double*'''
        return super(IImageServiceInfo, self).get_MinimumPixelSize()
    def get_CopyrightText(self):
        '''Method IImageServiceInfo.get_CopyrightText

           OUTPUT
            pCopyright          : BSTR*'''
        return super(IImageServiceInfo, self).get_CopyrightText()
    def put_CopyrightText(self, pCopyright):
        '''Method IImageServiceInfo.put_CopyrightText

           INPUT
            pCopyright          : BSTR'''
        return super(IImageServiceInfo, self).put_CopyrightText(pCopyright)
    def get_ServiceDataType(self):
        '''Method IImageServiceInfo.get_ServiceDataType

           OUTPUT
            pDataType           : esriImageServiceDataType*'''
        return super(IImageServiceInfo, self).get_ServiceDataType()
    def put_ServiceDataType(self, pDataType):
        '''Method IImageServiceInfo.put_ServiceDataType

           INPUT
            pDataType           : esriImageServiceDataType'''
        return super(IImageServiceInfo, self).put_ServiceDataType(pDataType)
    def put_DefaultServiceProperties(self, pServiceProperties):
        '''Method IImageServiceInfo.put_DefaultServiceProperties

           INPUT
            pServiceProperties  : BSTR'''
        return super(IImageServiceInfo, self).put_DefaultServiceProperties(pServiceProperties)
    def get_DefaultServiceProperties(self):
        '''Method IImageServiceInfo.get_DefaultServiceProperties

           OUTPUT
            pServiceProperties  : BSTR*'''
        return super(IImageServiceInfo, self).get_DefaultServiceProperties()
    def get_MaxNCols(self):
        '''Method IImageServiceInfo.get_MaxNCols

           OUTPUT
            pMaxNCols           : long*'''
        return super(IImageServiceInfo, self).get_MaxNCols()
    def get_MaxNRows(self):
        '''Method IImageServiceInfo.get_MaxNRows

           OUTPUT
            pMaxNRows           : long*'''
        return super(IImageServiceInfo, self).get_MaxNRows()
    def get_ServiceSourceType(self):
        '''Method IImageServiceInfo.get_ServiceSourceType

           OUTPUT
            pServiceSourceType  : esriImageServiceSourceType*'''
        return super(IImageServiceInfo, self).get_ServiceSourceType()
    def put_ServiceSourceType(self, pServiceSourceType):
        '''Method IImageServiceInfo.put_ServiceSourceType

           INPUT
            pServiceSourceType  : esriImageServiceSourceType'''
        return super(IImageServiceInfo, self).put_ServiceSourceType(pServiceSourceType)
    BandCount = property(get_BandCount, None, None)
    CopyrightText = property(get_CopyrightText, put_CopyrightText, None)
    DefaultServiceProperties = property(get_DefaultServiceProperties, put_DefaultServiceProperties, None)
    Description = property(get_Description, None, None)
    Extent = property(get_Extent, None, None)
    MaxNCols = property(get_MaxNCols, None, None)
    MaxNRows = property(get_MaxNRows, None, None)
    MaximumPixelSize = property(get_MaximumPixelSize, None, None)
    MinimumPixelSize = property(get_MinimumPixelSize, None, None)
    Name = property(get_Name, None, None)
    NoData = property(get_NoData, None, None)
    PixelType = property(get_PixelType, None, None)
    ServiceDataType = property(get_ServiceDataType, put_ServiceDataType, None)
    ServiceSourceType = property(get_ServiceSourceType, put_ServiceSourceType, None)
    SpatialReference = property(get_SpatialReference, None, None)

class IImageServerLayer(_esriCarto.IImageServerLayer):
    _IID = uuid.UUID('cc22e766-607f-4c98-932e-e1a08a928a33')

    def __init__(self, *args, **kw):
        super(IImageServerLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Initialize(self, ServiceURL):
        '''Method IImageServerLayer.Initialize

           INPUT
            ServiceURL          : BSTR'''
        return super(IImageServerLayer, self).Initialize(ServiceURL)
    def get_ServiceURL(self):
        '''Method IImageServerLayer.get_ServiceURL

           OUTPUT
            pServiceURL         : BSTR*'''
        return super(IImageServerLayer, self).get_ServiceURL()
    def get_DataSource(self):
        '''Method IImageServerLayer.get_DataSource

           OUTPUT
            ppDataSource        : IUnknown**'''
        return super(IImageServerLayer, self).get_DataSource()
    def get_ServiceInfo(self):
        '''Method IImageServerLayer.get_ServiceInfo

           OUTPUT
            ppServiceInfo       : IImageServiceInfo**'''
        return super(IImageServerLayer, self).get_ServiceInfo()
    def get_ShowResolution(self):
        '''Method IImageServerLayer.get_ShowResolution

           OUTPUT
            pShowResolution     : VARIANT_BOOL*'''
        return super(IImageServerLayer, self).get_ShowResolution()
    def put_ShowResolution(self, pShowResolution):
        '''Method IImageServerLayer.put_ShowResolution

           INPUT
            pShowResolution     : VARIANT_BOOL'''
        return super(IImageServerLayer, self).put_ShowResolution(pShowResolution)
    def get_DataFrameExtent(self):
        '''Method IImageServerLayer.get_DataFrameExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IImageServerLayer, self).get_DataFrameExtent()
    def put_VisibleExtent(self, ppExtent):
        '''Method IImageServerLayer.put_VisibleExtent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IImageServerLayer, self).put_VisibleExtent(ppExtent)
    def get_VisibleExtent(self):
        '''Method IImageServerLayer.get_VisibleExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IImageServerLayer, self).get_VisibleExtent()
    def get_Compression(self):
        '''Method IImageServerLayer.get_Compression

           OUTPUT
            pCompression        : BSTR*'''
        return super(IImageServerLayer, self).get_Compression()
    def put_Compression(self, pCompression):
        '''Method IImageServerLayer.put_Compression

           INPUT
            pCompression        : BSTR'''
        return super(IImageServerLayer, self).put_Compression(pCompression)
    def get_CompressionQuality(self):
        '''Method IImageServerLayer.get_CompressionQuality

           OUTPUT
            pQuality            : long*'''
        return super(IImageServerLayer, self).get_CompressionQuality()
    def put_CompressionQuality(self, pQuality):
        '''Method IImageServerLayer.put_CompressionQuality

           INPUT
            pQuality            : long'''
        return super(IImageServerLayer, self).put_CompressionQuality(pQuality)
    def get_Raster(self):
        '''Method IImageServerLayer.get_Raster

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IImageServerLayer, self).get_Raster()
    def get_Renderer(self):
        '''Method IImageServerLayer.get_Renderer

           OUTPUT
            ppRenderer          : IRasterRenderer**'''
        return super(IImageServerLayer, self).get_Renderer()
    def putref_Renderer(self, ppRenderer):
        '''Method IImageServerLayer.putref_Renderer

           INPUT
            ppRenderer          : IRasterRenderer*'''
        return super(IImageServerLayer, self).putref_Renderer(ppRenderer)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(IImageServerLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(IImageServerLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IImageServerLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(IImageServerLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(IImageServerLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(IImageServerLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(IImageServerLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(IImageServerLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IImageServerLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IImageServerLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IImageServerLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IImageServerLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(IImageServerLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IImageServerLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IImageServerLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(IImageServerLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IImageServerLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IImageServerLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    Compression = property(get_Compression, put_Compression, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    DataFrameExtent = property(get_DataFrameExtent, None, None)
    DataSource = property(get_DataSource, None, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    Raster = property(get_Raster, None, None)
    Renderer = property(get_Renderer, putref_Renderer, None)
    ServiceInfo = property(get_ServiceInfo, None, None)
    ServiceURL = property(get_ServiceURL, None, None)
    ShowResolution = property(get_ShowResolution, put_ShowResolution, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)
    VisibleExtent = property(get_VisibleExtent, put_VisibleExtent, None)

class IMosaicLayer(_esriCarto.IMosaicLayer):
    _IID = uuid.UUID('ef80da8f-686b-4d8e-87ed-c2213273632f')
    def get_FilePath(self):
        '''Method IMosaicLayer.get_FilePath

           OUTPUT
            FilePath            : BSTR*'''
        return super(IMosaicLayer, self).get_FilePath()
    def get_MosaicDataset(self):
        '''Method IMosaicLayer.get_MosaicDataset

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IMosaicLayer, self).get_MosaicDataset()
    def get_FootprintLayer(self):
        '''Method IMosaicLayer.get_FootprintLayer

           OUTPUT
            ppLayer             : IFeatureLayer**'''
        return super(IMosaicLayer, self).get_FootprintLayer()
    def get_BoundaryLayer(self):
        '''Method IMosaicLayer.get_BoundaryLayer

           OUTPUT
            ppLayer             : IFeatureLayer**'''
        return super(IMosaicLayer, self).get_BoundaryLayer()
    def get_PreviewLayer(self):
        '''Method IMosaicLayer.get_PreviewLayer

           OUTPUT
            ppLayer             : IImageServerLayer**'''
        return super(IMosaicLayer, self).get_PreviewLayer()
    def get_SeamlineLayer(self):
        '''Method IMosaicLayer.get_SeamlineLayer

           OUTPUT
            ppLayer             : IFeatureLayer**'''
        return super(IMosaicLayer, self).get_SeamlineLayer()
    def CreateFromMosaicDataset(self, MosaicDataset):
        '''Method IMosaicLayer.CreateFromMosaicDataset

           INPUT
            MosaicDataset       : IMosaicDataset*'''
        return super(IMosaicLayer, self).CreateFromMosaicDataset(MosaicDataset)
    def CreateFromFilePath(self, FilePath):
        '''Method IMosaicLayer.CreateFromFilePath

           INPUT
            FilePath            : BSTR'''
        return super(IMosaicLayer, self).CreateFromFilePath(FilePath)
    BoundaryLayer = property(get_BoundaryLayer, None, None)
    FilePath = property(get_FilePath, None, None)
    FootprintLayer = property(get_FootprintLayer, None, None)
    MosaicDataset = property(get_MosaicDataset, None, None)
    PreviewLayer = property(get_PreviewLayer, None, None)
    SeamlineLayer = property(get_SeamlineLayer, None, None)

class IWCSLayer(_esriCarto.IWCSLayer):
    _IID = uuid.UUID('53bc29a0-3a22-4a02-af4a-028dc4a1c3fb')

    def __init__(self, *args, **kw):
        super(IWCSLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Create(self, ServiceURL, CoverageName, serviceVersion):
        '''Method IWCSLayer.Create

           INPUTS
            ServiceURL          : BSTR
            CoverageName        : BSTR
            serviceVersion      : BSTR'''
        return super(IWCSLayer, self).Create(ServiceURL, CoverageName, serviceVersion)
    def get_ServiceURL(self):
        '''Method IWCSLayer.get_ServiceURL

           OUTPUT
            pServerURL          : BSTR*'''
        return super(IWCSLayer, self).get_ServiceURL()
    def get_CoverageName(self):
        '''Method IWCSLayer.get_CoverageName

           OUTPUT
            pCoverageName       : BSTR*'''
        return super(IWCSLayer, self).get_CoverageName()
    def get_Version(self):
        '''Method IWCSLayer.get_Version

           OUTPUT
            pVersion            : BSTR*'''
        return super(IWCSLayer, self).get_Version()
    def get_Timeout(self):
        '''Method IWCSLayer.get_Timeout

           OUTPUT
            pTimeout            : long*'''
        return super(IWCSLayer, self).get_Timeout()
    def put_Timeout(self, pTimeout):
        '''Method IWCSLayer.put_Timeout

           INPUT
            pTimeout            : long'''
        return super(IWCSLayer, self).put_Timeout(pTimeout)
    def get_ResamplingType(self):
        '''Method IWCSLayer.get_ResamplingType

           OUTPUT
            pResamplingType     : rstResamplingTypes*'''
        return super(IWCSLayer, self).get_ResamplingType()
    def put_ResamplingType(self, pResamplingType):
        '''Method IWCSLayer.put_ResamplingType

           INPUT
            pResamplingType     : rstResamplingTypes'''
        return super(IWCSLayer, self).put_ResamplingType(pResamplingType)
    def Refresh(self):
        '''Method IWCSLayer.Refresh'''
        return super(IWCSLayer, self).Refresh()
    CoverageName = property(get_CoverageName, None, None)
    ResamplingType = property(get_ResamplingType, put_ResamplingType, None)
    ServiceURL = property(get_ServiceURL, None, None)
    Timeout = property(get_Timeout, put_Timeout, None)
    Version = property(get_Version, None, None)

class IRasterIdentifyObj(_esriCarto.IRasterIdentifyObj):
    _IID = uuid.UUID('efd47fdc-de27-11d2-9fce-00c04f799f23')

    def __init__(self, *args, **kw):
        super(IRasterIdentifyObj, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def InsertPropAndValue(self, Property, Value):
        '''Method IRasterIdentifyObj.InsertPropAndValue

           INPUTS
            Property            : BSTR
            Value               : BSTR'''
        return super(IRasterIdentifyObj, self).InsertPropAndValue(Property, Value)
    def get_Name(self):
        '''Method IRasterIdentifyObj.get_Name

           OUTPUT
            bName               : BSTR*'''
        return super(IRasterIdentifyObj, self).get_Name()
    def put_Name(self, bName):
        '''Method IRasterIdentifyObj.put_Name

           INPUT
            bName               : BSTR'''
        return super(IRasterIdentifyObj, self).put_Name(bName)
    def get_MapTip(self):
        '''Method IRasterIdentifyObj.get_MapTip

           OUTPUT
            bMapTip             : BSTR*'''
        return super(IRasterIdentifyObj, self).get_MapTip()
    def put_MapTip(self, bMapTip):
        '''Method IRasterIdentifyObj.put_MapTip

           INPUT
            bMapTip             : BSTR'''
        return super(IRasterIdentifyObj, self).put_MapTip(bMapTip)
    def get_Location(self):
        '''Method IRasterIdentifyObj.get_Location

           OUTPUT
            pPoint              : IPoint**'''
        return super(IRasterIdentifyObj, self).get_Location()
    def putref_Location(self, pPoint):
        '''Method IRasterIdentifyObj.putref_Location

           INPUT
            pPoint              : IPoint*'''
        return super(IRasterIdentifyObj, self).putref_Location(pPoint)
    Location = property(get_Location, putref_Location, None)
    MapTip = property(get_MapTip, put_MapTip, None)
    Name = property(get_Name, put_Name, None)

class IRasterIdentifyObj2(_esriCarto.IRasterIdentifyObj2):
    _IID = uuid.UUID('ff3bac13-e1c4-47ab-807a-4c8233341d11')
    def GetPropAndValues(self, Index):
        '''Method IRasterIdentifyObj2.GetPropAndValues

           INPUT
            Index               : long

           OUTPUTS
            Property            : BSTR*
            Value               : BSTR*'''
        return super(IRasterIdentifyObj2, self).GetPropAndValues(Index)

class IRasterCatalogLayer(_esriCarto.IRasterCatalogLayer):
    _IID = uuid.UUID('af9930f0-f61e-11d3-8d6c-00c04f5b87b2')

    def __init__(self, *args, **kw):
        super(IRasterCatalogLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Create(self, pCatalog):
        '''Method IRasterCatalogLayer.Create

           INPUT
            pCatalog            : IRasterCatalogTable*'''
        return super(IRasterCatalogLayer, self).Create(pCatalog)
    def get_CatalogTable(self):
        '''Method IRasterCatalogLayer.get_CatalogTable

           OUTPUT
            pCatalog            : IRasterCatalogTable**'''
        return super(IRasterCatalogLayer, self).get_CatalogTable()
    def put_PrimaryField(self, pnField):
        '''Method IRasterCatalogLayer.put_PrimaryField

           INPUT
            pnField             : long'''
        return super(IRasterCatalogLayer, self).put_PrimaryField(pnField)
    def get_PrimaryField(self):
        '''Method IRasterCatalogLayer.get_PrimaryField

           OUTPUT
            pnField             : long*'''
        return super(IRasterCatalogLayer, self).get_PrimaryField()
    def get_Renderer(self):
        '''Method IRasterCatalogLayer.get_Renderer

           OUTPUT
            Renderer            : IRasterRenderer**'''
        return super(IRasterCatalogLayer, self).get_Renderer()
    def putref_Renderer(self, Renderer):
        '''Method IRasterCatalogLayer.putref_Renderer

           INPUT
            Renderer            : IRasterRenderer*'''
        return super(IRasterCatalogLayer, self).putref_Renderer(Renderer)
    def get_DisplayRasters(self):
        '''Method IRasterCatalogLayer.get_DisplayRasters

           OUTPUT
            pNum                : long*'''
        return super(IRasterCatalogLayer, self).get_DisplayRasters()
    def put_DisplayRasters(self, pNum):
        '''Method IRasterCatalogLayer.put_DisplayRasters

           INPUT
            pNum                : long'''
        return super(IRasterCatalogLayer, self).put_DisplayRasters(pNum)
    def get_Symbol(self):
        '''Method IRasterCatalogLayer.get_Symbol

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IRasterCatalogLayer, self).get_Symbol()
    def putref_Symbol(self, ppSymbol):
        '''Method IRasterCatalogLayer.putref_Symbol

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IRasterCatalogLayer, self).putref_Symbol(ppSymbol)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(IRasterCatalogLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(IRasterCatalogLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IRasterCatalogLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(IRasterCatalogLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(IRasterCatalogLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(IRasterCatalogLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(IRasterCatalogLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(IRasterCatalogLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IRasterCatalogLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IRasterCatalogLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IRasterCatalogLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IRasterCatalogLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(IRasterCatalogLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IRasterCatalogLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IRasterCatalogLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(IRasterCatalogLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IRasterCatalogLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IRasterCatalogLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    CatalogTable = property(get_CatalogTable, None, None)
    DisplayRasters = property(get_DisplayRasters, put_DisplayRasters, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    PrimaryField = property(get_PrimaryField, put_PrimaryField, None)
    Renderer = property(get_Renderer, putref_Renderer, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Symbol = property(get_Symbol, putref_Symbol, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class IColorRampSymbol(_esriCarto.IColorRampSymbol):
    _IID = uuid.UUID('1272e1b0-204c-11d3-a3f2-0004ac1b1d86')

    def __init__(self, *args, **kw):
        super(IColorRampSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ColorRamp(self):
        '''Method IColorRampSymbol.get_ColorRamp

           OUTPUT
            ColorRamp           : IColorRamp**'''
        return super(IColorRampSymbol, self).get_ColorRamp()
    def put_ColorRamp(self, ColorRamp):
        '''Method IColorRampSymbol.put_ColorRamp

           INPUT
            ColorRamp           : IColorRamp*'''
        return super(IColorRampSymbol, self).put_ColorRamp(ColorRamp)
    def put_ColorRampInLegendGroup(self, _arg1):
        '''Method IColorRampSymbol.put_ColorRampInLegendGroup

           INPUT
            _arg1               : IColorRamp*'''
        return super(IColorRampSymbol, self).put_ColorRampInLegendGroup(_arg1)
    def get_Invert(self):
        '''Method IColorRampSymbol.get_Invert

           OUTPUT
            Invert              : VARIANT_BOOL*'''
        return super(IColorRampSymbol, self).get_Invert()
    def put_Invert(self, Invert):
        '''Method IColorRampSymbol.put_Invert

           INPUT
            Invert              : VARIANT_BOOL'''
        return super(IColorRampSymbol, self).put_Invert(Invert)
    def put_InvertInLegendGroup(self, _arg1):
        '''Method IColorRampSymbol.put_InvertInLegendGroup

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IColorRampSymbol, self).put_InvertInLegendGroup(_arg1)
    def get_LegendClassIndex(self):
        '''Method IColorRampSymbol.get_LegendClassIndex

           OUTPUT
            Index               : long*'''
        return super(IColorRampSymbol, self).get_LegendClassIndex()
    def put_LegendClassIndex(self, Index):
        '''Method IColorRampSymbol.put_LegendClassIndex

           INPUT
            Index               : long'''
        return super(IColorRampSymbol, self).put_LegendClassIndex(Index)
    def get_LegendGroup(self):
        '''Method IColorRampSymbol.get_LegendGroup

           OUTPUT
            ppLegendGroup       : ILegendGroup**'''
        return super(IColorRampSymbol, self).get_LegendGroup()
    def putref_LegendGroup(self, ppLegendGroup):
        '''Method IColorRampSymbol.putref_LegendGroup

           INPUT
            ppLegendGroup       : ILegendGroup*'''
        return super(IColorRampSymbol, self).putref_LegendGroup(ppLegendGroup)
    def get_Color(self):
        '''Method IFillSymbol.get_Color (from IFillSymbol)

           OUTPUT
            Color               : IColor**'''
        return super(IColorRampSymbol, self).get_Color()
    def put_Color(self, Color):
        '''Method IFillSymbol.put_Color (from IFillSymbol)

           INPUT
            Color               : IColor*'''
        return super(IColorRampSymbol, self).put_Color(Color)
    def get_Outline(self):
        '''Method IFillSymbol.get_Outline (from IFillSymbol)

           OUTPUT
            outlineSym          : ILineSymbol**'''
        return super(IColorRampSymbol, self).get_Outline()
    def put_Outline(self, outlineSym):
        '''Method IFillSymbol.put_Outline (from IFillSymbol)

           INPUT
            outlineSym          : ILineSymbol*'''
        return super(IColorRampSymbol, self).put_Outline(outlineSym)
    Color = property(get_Color, put_Color, None)
    ColorRamp = property(get_ColorRamp, put_ColorRamp, None)
    ColorRampInLegendGroup = property(None, put_ColorRampInLegendGroup, None)
    Invert = property(get_Invert, put_Invert, None)
    InvertInLegendGroup = property(None, put_InvertInLegendGroup, None)
    LegendClassIndex = property(get_LegendClassIndex, put_LegendClassIndex, None)
    LegendGroup = property(get_LegendGroup, putref_LegendGroup, None)
    Outline = property(get_Outline, put_Outline, None)

class IColorRampSymbol2(_esriCarto.IColorRampSymbol2):
    _IID = uuid.UUID('1272e1b1-204c-11d3-a3f2-0004ac1b1d86')

    def __init__(self, *args, **kw):
        super(IColorRampSymbol2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Horizontal(self):
        '''Method IColorRampSymbol2.get_Horizontal

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IColorRampSymbol2, self).get_Horizontal()
    def put_Horizontal(self, flag):
        '''Method IColorRampSymbol2.put_Horizontal

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IColorRampSymbol2, self).put_Horizontal(flag)
    def get_ShowTics(self):
        '''Method IColorRampSymbol2.get_ShowTics

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IColorRampSymbol2, self).get_ShowTics()
    def put_ShowTics(self, flag):
        '''Method IColorRampSymbol2.put_ShowTics

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IColorRampSymbol2, self).put_ShowTics(flag)
    def get_ColorRamp(self):
        '''Method IColorRampSymbol.get_ColorRamp (from IColorRampSymbol)

           OUTPUT
            ColorRamp           : IColorRamp**'''
        return super(IColorRampSymbol2, self).get_ColorRamp()
    def put_ColorRamp(self, ColorRamp):
        '''Method IColorRampSymbol.put_ColorRamp (from IColorRampSymbol)

           INPUT
            ColorRamp           : IColorRamp*'''
        return super(IColorRampSymbol2, self).put_ColorRamp(ColorRamp)
    def put_ColorRampInLegendGroup(self, _arg1):
        '''Method IColorRampSymbol.put_ColorRampInLegendGroup (from IColorRampSymbol)

           INPUT
            _arg1               : IColorRamp*'''
        return super(IColorRampSymbol2, self).put_ColorRampInLegendGroup(_arg1)
    def get_Invert(self):
        '''Method IColorRampSymbol.get_Invert (from IColorRampSymbol)

           OUTPUT
            Invert              : VARIANT_BOOL*'''
        return super(IColorRampSymbol2, self).get_Invert()
    def put_Invert(self, Invert):
        '''Method IColorRampSymbol.put_Invert (from IColorRampSymbol)

           INPUT
            Invert              : VARIANT_BOOL'''
        return super(IColorRampSymbol2, self).put_Invert(Invert)
    def put_InvertInLegendGroup(self, _arg1):
        '''Method IColorRampSymbol.put_InvertInLegendGroup (from IColorRampSymbol)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IColorRampSymbol2, self).put_InvertInLegendGroup(_arg1)
    def get_LegendClassIndex(self):
        '''Method IColorRampSymbol.get_LegendClassIndex (from IColorRampSymbol)

           OUTPUT
            Index               : long*'''
        return super(IColorRampSymbol2, self).get_LegendClassIndex()
    def put_LegendClassIndex(self, Index):
        '''Method IColorRampSymbol.put_LegendClassIndex (from IColorRampSymbol)

           INPUT
            Index               : long'''
        return super(IColorRampSymbol2, self).put_LegendClassIndex(Index)
    def get_LegendGroup(self):
        '''Method IColorRampSymbol.get_LegendGroup (from IColorRampSymbol)

           OUTPUT
            ppLegendGroup       : ILegendGroup**'''
        return super(IColorRampSymbol2, self).get_LegendGroup()
    def putref_LegendGroup(self, ppLegendGroup):
        '''Method IColorRampSymbol.putref_LegendGroup (from IColorRampSymbol)

           INPUT
            ppLegendGroup       : ILegendGroup*'''
        return super(IColorRampSymbol2, self).putref_LegendGroup(ppLegendGroup)
    def get_Color(self):
        '''Method IFillSymbol.get_Color (from IFillSymbol)

           OUTPUT
            Color               : IColor**'''
        return super(IColorRampSymbol2, self).get_Color()
    def put_Color(self, Color):
        '''Method IFillSymbol.put_Color (from IFillSymbol)

           INPUT
            Color               : IColor*'''
        return super(IColorRampSymbol2, self).put_Color(Color)
    def get_Outline(self):
        '''Method IFillSymbol.get_Outline (from IFillSymbol)

           OUTPUT
            outlineSym          : ILineSymbol**'''
        return super(IColorRampSymbol2, self).get_Outline()
    def put_Outline(self, outlineSym):
        '''Method IFillSymbol.put_Outline (from IFillSymbol)

           INPUT
            outlineSym          : ILineSymbol*'''
        return super(IColorRampSymbol2, self).put_Outline(outlineSym)
    Color = property(get_Color, put_Color, None)
    ColorRamp = property(get_ColorRamp, put_ColorRamp, None)
    ColorRampInLegendGroup = property(None, put_ColorRampInLegendGroup, None)
    Horizontal = property(get_Horizontal, put_Horizontal, None)
    Invert = property(get_Invert, put_Invert, None)
    InvertInLegendGroup = property(None, put_InvertInLegendGroup, None)
    LegendClassIndex = property(get_LegendClassIndex, put_LegendClassIndex, None)
    LegendGroup = property(get_LegendGroup, putref_LegendGroup, None)
    Outline = property(get_Outline, put_Outline, None)
    ShowTics = property(get_ShowTics, put_ShowTics, None)

class IRasterSpatialSelection(_esriCarto.IRasterSpatialSelection):
    _IID = uuid.UUID('9466d4e6-937d-40c6-8709-56eb94c3c9b5')

    def __init__(self, *args, **kw):
        super(IRasterSpatialSelection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, bInit, FileFullName, FileFormat):
        '''Method IRasterSpatialSelection.Init

           INPUTS
            bInit               : VARIANT_BOOL
            FileFullName        : BSTR
            FileFormat          : esriRasterSelectionMaskFileFormat'''
        return super(IRasterSpatialSelection, self).Init(bInit, FileFullName, FileFormat)
    def DrawSpatialSelection(self, pDisplay, pTrackCancel):
        '''Method IRasterSpatialSelection.DrawSpatialSelection

           INPUTS
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(IRasterSpatialSelection, self).DrawSpatialSelection(pDisplay, pTrackCancel)
    def get_MaskRasterDataset(self):
        '''Method IRasterSpatialSelection.get_MaskRasterDataset

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterSpatialSelection, self).get_MaskRasterDataset()
    def putref_MaskRasterDataset(self, ppRasterDataset):
        '''Method IRasterSpatialSelection.putref_MaskRasterDataset

           INPUT
            ppRasterDataset     : IRasterDataset*'''
        return super(IRasterSpatialSelection, self).putref_MaskRasterDataset(ppRasterDataset)
    def MaskWriteBitmap(self, TrackCancel, pRect, op, vBytes, byBits):
        '''Method IRasterSpatialSelection.MaskWriteBitmap

           INPUTS
            TrackCancel         : ITrackCancel*
            pRect               : tagRECT*
            op                  : esriRasterSelectionMaskOp
            vBytes              : VARIANT
            byBits              : VARIANT_BOOL'''
        return super(IRasterSpatialSelection, self).MaskWriteBitmap(TrackCancel, pRect, op, vBytes, byBits)
    def MaskReadBitmap(self, TrackCancel, pRect, vBytes, byBits):
        '''Method IRasterSpatialSelection.MaskReadBitmap

           INPUTS
            TrackCancel         : ITrackCancel*
            pRect               : tagRECT*
            vBytes              : VARIANT
            byBits              : VARIANT_BOOL'''
        return super(IRasterSpatialSelection, self).MaskReadBitmap(TrackCancel, pRect, vBytes, byBits)
    def MaskDrawPolyRect(self, TrackCancel, vRects, op):
        '''Method IRasterSpatialSelection.MaskDrawPolyRect

           INPUTS
            TrackCancel         : ITrackCancel*
            vRects              : VARIANT
            op                  : esriRasterSelectionMaskOp'''
        return super(IRasterSpatialSelection, self).MaskDrawPolyRect(TrackCancel, vRects, op)
    MaskRasterDataset = property(get_MaskRasterDataset, putref_MaskRasterDataset, None)

class IGeoReferenceEvents(_esriCarto.IGeoReferenceEvents):
    _IID = uuid.UUID('bc2e6acb-ee59-4b6d-91ce-4e1743d403b3')
    def GeoReferenceModified(self):
        '''Method IGeoReferenceEvents.GeoReferenceModified'''
        return super(IGeoReferenceEvents, self).GeoReferenceModified()
    def GeoReferenceReset(self):
        '''Method IGeoReferenceEvents.GeoReferenceReset'''
        return super(IGeoReferenceEvents, self).GeoReferenceReset()

class IGdbRasterCatalogLayer(_esriCarto.IGdbRasterCatalogLayer):
    _IID = uuid.UUID('605bc37a-15e9-40a0-90fb-de4cc376838c')

    def __init__(self, *args, **kw):
        super(IGdbRasterCatalogLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Setup(self, pTable):
        '''Method IGdbRasterCatalogLayer.Setup

           INPUT
            pTable              : ITable*

           OUTPUT
            isSuccessful        : VARIANT_BOOL*'''
        return super(IGdbRasterCatalogLayer, self).Setup(pTable)
    def put_Renderers(self, ppRenderers):
        '''Method IGdbRasterCatalogLayer.put_Renderers

           INPUT
            ppRenderers         : IArray*'''
        return super(IGdbRasterCatalogLayer, self).put_Renderers(ppRenderers)
    def get_Renderers(self):
        '''Method IGdbRasterCatalogLayer.get_Renderers

           OUTPUT
            ppRenderers         : IArray**'''
        return super(IGdbRasterCatalogLayer, self).get_Renderers()
    def get_RendererUsage(self):
        '''Method IGdbRasterCatalogLayer.get_RendererUsage

           OUTPUT
            pUsage              : SAFEARRAY**'''
        return super(IGdbRasterCatalogLayer, self).get_RendererUsage()
    def get_DrawSelectedRasters(self):
        '''Method IGdbRasterCatalogLayer.get_DrawSelectedRasters

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IGdbRasterCatalogLayer, self).get_DrawSelectedRasters()
    def put_DrawSelectedRasters(self, b):
        '''Method IGdbRasterCatalogLayer.put_DrawSelectedRasters

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IGdbRasterCatalogLayer, self).put_DrawSelectedRasters(b)
    def ChooseRenderer(self, pRaster):
        '''Method IGdbRasterCatalogLayer.ChooseRenderer

           INPUT
            pRaster             : IRaster*

           OUTPUT
            ppRender            : IRasterRenderer**'''
        return super(IGdbRasterCatalogLayer, self).ChooseRenderer(pRaster)
    DrawSelectedRasters = property(get_DrawSelectedRasters, put_DrawSelectedRasters, None)
    RendererUsage = property(get_RendererUsage, None, None)
    Renderers = property(get_Renderers, put_Renderers, None)

class IRasterCatalogDisplayProps(_esriCarto.IRasterCatalogDisplayProps):
    _IID = uuid.UUID('27d0e52f-f170-4743-863a-4419fe70832d')

    def __init__(self, *args, **kw):
        super(IRasterCatalogDisplayProps, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DisplayRasters(self):
        '''Method IRasterCatalogDisplayProps.get_DisplayRasters

           OUTPUT
            pNum                : long*'''
        return super(IRasterCatalogDisplayProps, self).get_DisplayRasters()
    def put_DisplayRasters(self, pNum):
        '''Method IRasterCatalogDisplayProps.put_DisplayRasters

           INPUT
            pNum                : long'''
        return super(IRasterCatalogDisplayProps, self).put_DisplayRasters(pNum)
    def get_Symbol(self):
        '''Method IRasterCatalogDisplayProps.get_Symbol

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IRasterCatalogDisplayProps, self).get_Symbol()
    def putref_Symbol(self, ppSymbol):
        '''Method IRasterCatalogDisplayProps.putref_Symbol

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IRasterCatalogDisplayProps, self).putref_Symbol(ppSymbol)
    def put_UseScale(self, b):
        '''Method IRasterCatalogDisplayProps.put_UseScale

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterCatalogDisplayProps, self).put_UseScale(b)
    def get_UseScale(self):
        '''Method IRasterCatalogDisplayProps.get_UseScale

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterCatalogDisplayProps, self).get_UseScale()
    def put_TransitionScale(self, Scale):
        '''Method IRasterCatalogDisplayProps.put_TransitionScale

           INPUT
            Scale               : double'''
        return super(IRasterCatalogDisplayProps, self).put_TransitionScale(Scale)
    def get_TransitionScale(self):
        '''Method IRasterCatalogDisplayProps.get_TransitionScale

           OUTPUT
            Scale               : double*'''
        return super(IRasterCatalogDisplayProps, self).get_TransitionScale()
    def get_RedrawDisplay(self):
        '''Method IRasterCatalogDisplayProps.get_RedrawDisplay

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterCatalogDisplayProps, self).get_RedrawDisplay()
    def put_RedrawDisplay(self, b):
        '''Method IRasterCatalogDisplayProps.put_RedrawDisplay

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterCatalogDisplayProps, self).put_RedrawDisplay(b)
    def get_DelayDraw(self):
        '''Method IRasterCatalogDisplayProps.get_DelayDraw

           OUTPUT
            ms                  : long*'''
        return super(IRasterCatalogDisplayProps, self).get_DelayDraw()
    def put_DelayDraw(self, ms):
        '''Method IRasterCatalogDisplayProps.put_DelayDraw

           INPUT
            ms                  : long'''
        return super(IRasterCatalogDisplayProps, self).put_DelayDraw(ms)
    def get_ResamplingType(self):
        '''Method IRasterCatalogDisplayProps.get_ResamplingType

           OUTPUT
            pResamplingType     : rstResamplingTypes*'''
        return super(IRasterCatalogDisplayProps, self).get_ResamplingType()
    def put_ResamplingType(self, pResamplingType):
        '''Method IRasterCatalogDisplayProps.put_ResamplingType

           INPUT
            pResamplingType     : rstResamplingTypes'''
        return super(IRasterCatalogDisplayProps, self).put_ResamplingType(pResamplingType)
    def put_DrawRastersOnly(self, b):
        '''Method IRasterCatalogDisplayProps.put_DrawRastersOnly

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterCatalogDisplayProps, self).put_DrawRastersOnly(b)
    def get_DrawRastersOnly(self):
        '''Method IRasterCatalogDisplayProps.get_DrawRastersOnly

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterCatalogDisplayProps, self).get_DrawRastersOnly()
    DelayDraw = property(get_DelayDraw, put_DelayDraw, None)
    DisplayRasters = property(get_DisplayRasters, put_DisplayRasters, None)
    DrawRastersOnly = property(get_DrawRastersOnly, put_DrawRastersOnly, None)
    RedrawDisplay = property(get_RedrawDisplay, put_RedrawDisplay, None)
    ResamplingType = property(get_ResamplingType, put_ResamplingType, None)
    Symbol = property(get_Symbol, putref_Symbol, None)
    TransitionScale = property(get_TransitionScale, put_TransitionScale, None)
    UseScale = property(get_UseScale, put_UseScale, None)

class IRasterCatalogDisplayProps2(_esriCarto.IRasterCatalogDisplayProps2):
    _IID = uuid.UUID('5873c50d-c6ed-4fd3-8835-f04a484d5462')

    def __init__(self, *args, **kw):
        super(IRasterCatalogDisplayProps2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LimitsRasterDraw(self):
        '''Method IRasterCatalogDisplayProps2.get_LimitsRasterDraw

           OUTPUT
            pNum                : long*'''
        return super(IRasterCatalogDisplayProps2, self).get_LimitsRasterDraw()
    def put_LimitsRasterDraw(self, pNum):
        '''Method IRasterCatalogDisplayProps2.put_LimitsRasterDraw

           INPUT
            pNum                : long'''
        return super(IRasterCatalogDisplayProps2, self).put_LimitsRasterDraw(pNum)
    def get_DisplayRasters(self):
        '''Method IRasterCatalogDisplayProps.get_DisplayRasters (from IRasterCatalogDisplayProps)

           OUTPUT
            pNum                : long*'''
        return super(IRasterCatalogDisplayProps2, self).get_DisplayRasters()
    def put_DisplayRasters(self, pNum):
        '''Method IRasterCatalogDisplayProps.put_DisplayRasters (from IRasterCatalogDisplayProps)

           INPUT
            pNum                : long'''
        return super(IRasterCatalogDisplayProps2, self).put_DisplayRasters(pNum)
    def get_Symbol(self):
        '''Method IRasterCatalogDisplayProps.get_Symbol (from IRasterCatalogDisplayProps)

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IRasterCatalogDisplayProps2, self).get_Symbol()
    def putref_Symbol(self, ppSymbol):
        '''Method IRasterCatalogDisplayProps.putref_Symbol (from IRasterCatalogDisplayProps)

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IRasterCatalogDisplayProps2, self).putref_Symbol(ppSymbol)
    def put_UseScale(self, b):
        '''Method IRasterCatalogDisplayProps.put_UseScale (from IRasterCatalogDisplayProps)

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterCatalogDisplayProps2, self).put_UseScale(b)
    def get_UseScale(self):
        '''Method IRasterCatalogDisplayProps.get_UseScale (from IRasterCatalogDisplayProps)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterCatalogDisplayProps2, self).get_UseScale()
    def put_TransitionScale(self, Scale):
        '''Method IRasterCatalogDisplayProps.put_TransitionScale (from IRasterCatalogDisplayProps)

           INPUT
            Scale               : double'''
        return super(IRasterCatalogDisplayProps2, self).put_TransitionScale(Scale)
    def get_TransitionScale(self):
        '''Method IRasterCatalogDisplayProps.get_TransitionScale (from IRasterCatalogDisplayProps)

           OUTPUT
            Scale               : double*'''
        return super(IRasterCatalogDisplayProps2, self).get_TransitionScale()
    def get_RedrawDisplay(self):
        '''Method IRasterCatalogDisplayProps.get_RedrawDisplay (from IRasterCatalogDisplayProps)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterCatalogDisplayProps2, self).get_RedrawDisplay()
    def put_RedrawDisplay(self, b):
        '''Method IRasterCatalogDisplayProps.put_RedrawDisplay (from IRasterCatalogDisplayProps)

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterCatalogDisplayProps2, self).put_RedrawDisplay(b)
    def get_DelayDraw(self):
        '''Method IRasterCatalogDisplayProps.get_DelayDraw (from IRasterCatalogDisplayProps)

           OUTPUT
            ms                  : long*'''
        return super(IRasterCatalogDisplayProps2, self).get_DelayDraw()
    def put_DelayDraw(self, ms):
        '''Method IRasterCatalogDisplayProps.put_DelayDraw (from IRasterCatalogDisplayProps)

           INPUT
            ms                  : long'''
        return super(IRasterCatalogDisplayProps2, self).put_DelayDraw(ms)
    def get_ResamplingType(self):
        '''Method IRasterCatalogDisplayProps.get_ResamplingType (from IRasterCatalogDisplayProps)

           OUTPUT
            pResamplingType     : rstResamplingTypes*'''
        return super(IRasterCatalogDisplayProps2, self).get_ResamplingType()
    def put_ResamplingType(self, pResamplingType):
        '''Method IRasterCatalogDisplayProps.put_ResamplingType (from IRasterCatalogDisplayProps)

           INPUT
            pResamplingType     : rstResamplingTypes'''
        return super(IRasterCatalogDisplayProps2, self).put_ResamplingType(pResamplingType)
    def put_DrawRastersOnly(self, b):
        '''Method IRasterCatalogDisplayProps.put_DrawRastersOnly (from IRasterCatalogDisplayProps)

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterCatalogDisplayProps2, self).put_DrawRastersOnly(b)
    def get_DrawRastersOnly(self):
        '''Method IRasterCatalogDisplayProps.get_DrawRastersOnly (from IRasterCatalogDisplayProps)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterCatalogDisplayProps2, self).get_DrawRastersOnly()
    DelayDraw = property(get_DelayDraw, put_DelayDraw, None)
    DisplayRasters = property(get_DisplayRasters, put_DisplayRasters, None)
    DrawRastersOnly = property(get_DrawRastersOnly, put_DrawRastersOnly, None)
    LimitsRasterDraw = property(get_LimitsRasterDraw, put_LimitsRasterDraw, None)
    RedrawDisplay = property(get_RedrawDisplay, put_RedrawDisplay, None)
    ResamplingType = property(get_ResamplingType, put_ResamplingType, None)
    Symbol = property(get_Symbol, putref_Symbol, None)
    TransitionScale = property(get_TransitionScale, put_TransitionScale, None)
    UseScale = property(get_UseScale, put_UseScale, None)

class IRasterLayerExport(_esriCarto.IRasterLayerExport):
    _IID = uuid.UUID('70499f74-2acb-4b69-bd88-1975644bab29')

    def __init__(self, *args, **kw):
        super(IRasterLayerExport, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RasterLayer(self, _arg1):
        '''Method IRasterLayerExport.putref_RasterLayer

           INPUT
            _arg1               : IRasterLayer*'''
        return super(IRasterLayerExport, self).putref_RasterLayer(_arg1)
    def put_Extent(self, _arg1):
        '''Method IRasterLayerExport.put_Extent

           INPUT
            _arg1               : IEnvelope*'''
        return super(IRasterLayerExport, self).put_Extent(_arg1)
    def SetSize(self, cx, cy):
        '''Method IRasterLayerExport.SetSize

           INPUTS
            cx                  : long
            cy                  : long'''
        return super(IRasterLayerExport, self).SetSize(cx, cy)
    def put_Force2RGB(self, _arg1):
        '''Method IRasterLayerExport.put_Force2RGB

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IRasterLayerExport, self).put_Force2RGB(_arg1)
    def putref_SpatialReference(self, _arg1):
        '''Method IRasterLayerExport.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IRasterLayerExport, self).putref_SpatialReference(_arg1)
    def Export(self, pWorkspace, newname, Format):
        '''Method IRasterLayerExport.Export

           INPUTS
            pWorkspace          : IWorkspace*
            newname             : BSTR
            Format              : BSTR

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterLayerExport, self).Export(pWorkspace, newname, Format)
    Extent = property(None, put_Extent, None)
    Force2RGB = property(None, put_Force2RGB, None)
    RasterLayer = property(None, putref_RasterLayer, None)
    SpatialReference = property(None, putref_SpatialReference, None)

class IRasterLayerExport2(_esriCarto.IRasterLayerExport2):
    _IID = uuid.UUID('fe4896bc-9a91-4d34-b356-7ede3b0475ce')

    def __init__(self, *args, **kw):
        super(IRasterLayerExport2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_StorageDef(self, _arg1):
        '''Method IRasterLayerExport2.putref_StorageDef

           INPUT
            _arg1               : IRasterStorageDef*'''
        return super(IRasterLayerExport2, self).putref_StorageDef(_arg1)
    def putref_RasterLayer(self, _arg1):
        '''Method IRasterLayerExport.putref_RasterLayer (from IRasterLayerExport)

           INPUT
            _arg1               : IRasterLayer*'''
        return super(IRasterLayerExport2, self).putref_RasterLayer(_arg1)
    def put_Extent(self, _arg1):
        '''Method IRasterLayerExport.put_Extent (from IRasterLayerExport)

           INPUT
            _arg1               : IEnvelope*'''
        return super(IRasterLayerExport2, self).put_Extent(_arg1)
    def SetSize(self, cx, cy):
        '''Method IRasterLayerExport.SetSize (from IRasterLayerExport)

           INPUTS
            cx                  : long
            cy                  : long'''
        return super(IRasterLayerExport2, self).SetSize(cx, cy)
    def put_Force2RGB(self, _arg1):
        '''Method IRasterLayerExport.put_Force2RGB (from IRasterLayerExport)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IRasterLayerExport2, self).put_Force2RGB(_arg1)
    def putref_SpatialReference(self, _arg1):
        '''Method IRasterLayerExport.putref_SpatialReference (from IRasterLayerExport)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IRasterLayerExport2, self).putref_SpatialReference(_arg1)
    def Export(self, pWorkspace, newname, Format):
        '''Method IRasterLayerExport.Export (from IRasterLayerExport)

           INPUTS
            pWorkspace          : IWorkspace*
            newname             : BSTR
            Format              : BSTR

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterLayerExport2, self).Export(pWorkspace, newname, Format)
    Extent = property(None, put_Extent, None)
    Force2RGB = property(None, put_Force2RGB, None)
    RasterLayer = property(None, putref_RasterLayer, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    StorageDef = property(None, putref_StorageDef, None)

class IRasterLayerExport3(_esriCarto.IRasterLayerExport3):
    _IID = uuid.UUID('9ad3e9e5-2fae-47fa-a7e3-4f3a64176517')

    def __init__(self, *args, **kw):
        super(IRasterLayerExport3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Layer(self, _arg1):
        '''Method IRasterLayerExport3.putref_Layer

           INPUT
            _arg1               : ILayer*'''
        return super(IRasterLayerExport3, self).putref_Layer(_arg1)
    def put_NoData(self, _arg1):
        '''Method IRasterLayerExport3.put_NoData

           INPUT
            _arg1               : VARIANT'''
        return super(IRasterLayerExport3, self).put_NoData(_arg1)
    def putref_StorageDef(self, _arg1):
        '''Method IRasterLayerExport2.putref_StorageDef (from IRasterLayerExport2)

           INPUT
            _arg1               : IRasterStorageDef*'''
        return super(IRasterLayerExport3, self).putref_StorageDef(_arg1)
    def putref_RasterLayer(self, _arg1):
        '''Method IRasterLayerExport.putref_RasterLayer (from IRasterLayerExport)

           INPUT
            _arg1               : IRasterLayer*'''
        return super(IRasterLayerExport3, self).putref_RasterLayer(_arg1)
    def put_Extent(self, _arg1):
        '''Method IRasterLayerExport.put_Extent (from IRasterLayerExport)

           INPUT
            _arg1               : IEnvelope*'''
        return super(IRasterLayerExport3, self).put_Extent(_arg1)
    def SetSize(self, cx, cy):
        '''Method IRasterLayerExport.SetSize (from IRasterLayerExport)

           INPUTS
            cx                  : long
            cy                  : long'''
        return super(IRasterLayerExport3, self).SetSize(cx, cy)
    def put_Force2RGB(self, _arg1):
        '''Method IRasterLayerExport.put_Force2RGB (from IRasterLayerExport)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IRasterLayerExport3, self).put_Force2RGB(_arg1)
    def putref_SpatialReference(self, _arg1):
        '''Method IRasterLayerExport.putref_SpatialReference (from IRasterLayerExport)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IRasterLayerExport3, self).putref_SpatialReference(_arg1)
    def Export(self, pWorkspace, newname, Format):
        '''Method IRasterLayerExport.Export (from IRasterLayerExport)

           INPUTS
            pWorkspace          : IWorkspace*
            newname             : BSTR
            Format              : BSTR

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterLayerExport3, self).Export(pWorkspace, newname, Format)
    Extent = property(None, put_Extent, None)
    Force2RGB = property(None, put_Force2RGB, None)
    Layer = property(None, putref_Layer, None)
    NoData = property(None, put_NoData, None)
    RasterLayer = property(None, putref_RasterLayer, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    StorageDef = property(None, putref_StorageDef, None)

class IRasterExporter(_esriCarto.IRasterExporter):
    _IID = uuid.UUID('17e0103f-a5a1-47e8-a1f7-a7a5c0568cf5')

    def __init__(self, *args, **kw):
        super(IRasterExporter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterRenderer(self):
        '''Method IRasterExporter.get_RasterRenderer

           OUTPUT
            ppRenderer          : IRasterRenderer**'''
        return super(IRasterExporter, self).get_RasterRenderer()
    def putref_RasterRenderer(self, ppRenderer):
        '''Method IRasterExporter.putref_RasterRenderer

           INPUT
            ppRenderer          : IRasterRenderer*'''
        return super(IRasterExporter, self).putref_RasterRenderer(ppRenderer)
    def ExportToBytes(self, pRaster, Format):
        '''Method IRasterExporter.ExportToBytes

           INPUTS
            pRaster             : IRaster*
            Format              : BSTR

           OUTPUT
            ppBYTES             : SAFEARRAY**'''
        return super(IRasterExporter, self).ExportToBytes(pRaster, Format)
    RasterRenderer = property(get_RasterRenderer, putref_RasterRenderer, None)

class IRenderedThumbnailBuilder(_esriCarto.IRenderedThumbnailBuilder):
    _IID = uuid.UUID('d0382058-8672-41a2-b037-1fc728b4ed6a')

    def __init__(self, *args, **kw):
        super(IRenderedThumbnailBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterRenderer(self):
        '''Method IRenderedThumbnailBuilder.get_RasterRenderer

           OUTPUT
            ppRenderer          : IRasterRenderer**'''
        return super(IRenderedThumbnailBuilder, self).get_RasterRenderer()
    def putref_RasterRenderer(self, ppRenderer):
        '''Method IRenderedThumbnailBuilder.putref_RasterRenderer

           INPUT
            ppRenderer          : IRasterRenderer*'''
        return super(IRenderedThumbnailBuilder, self).putref_RasterRenderer(ppRenderer)
    RasterRenderer = property(get_RasterRenderer, putref_RasterRenderer, None)

class INITFGraphicsLayer(_esriCarto.INITFGraphicsLayer):
    _IID = uuid.UUID('6f69b891-6bb2-41dc-b1cc-5f4c66b643f9')

    def __init__(self, *args, **kw):
        super(INITFGraphicsLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Create(self, Name, x, y, pExtent, dx, dy, pXf, CGM):
        '''Method INITFGraphicsLayer.Create

           INPUTS
            Name                : BSTR
            x                   : long
            y                   : long
            pExtent             : IEnvelope*
            dx                  : double
            dy                  : double
            pXf                 : IGeodataXform*
            CGM                 : BSTR'''
        return super(INITFGraphicsLayer, self).Create(Name, x, y, pExtent, dx, dy, pXf, CGM)
    def Add(self, pGeometry, pSymbol, Size):
        '''Method INITFGraphicsLayer.Add

           INPUTS
            pGeometry           : IGeometry*
            pSymbol             : ISymbol*
            Size                : long'''
        return super(INITFGraphicsLayer, self).Add(pGeometry, pSymbol, Size)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(INITFGraphicsLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(INITFGraphicsLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(INITFGraphicsLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(INITFGraphicsLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(INITFGraphicsLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(INITFGraphicsLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(INITFGraphicsLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(INITFGraphicsLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(INITFGraphicsLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(INITFGraphicsLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(INITFGraphicsLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(INITFGraphicsLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(INITFGraphicsLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(INITFGraphicsLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(INITFGraphicsLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(INITFGraphicsLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(INITFGraphicsLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(INITFGraphicsLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class IRasterBasemapLayer(_esriCarto.IRasterBasemapLayer):
    _IID = uuid.UUID('15d37a11-858b-4823-8dce-16ae6c140b3d')

    def __init__(self, *args, **kw):
        super(IRasterBasemapLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterLayer(self):
        '''Method IRasterBasemapLayer.get_RasterLayer

           OUTPUT
            Layer               : IRasterLayer**'''
        return super(IRasterBasemapLayer, self).get_RasterLayer()
    def get_Transparency(self):
        '''Method IRasterBasemapLayer.get_Transparency

           OUTPUT
            pAlpha              : short*'''
        return super(IRasterBasemapLayer, self).get_Transparency()
    def put_Transparency(self, pAlpha):
        '''Method IRasterBasemapLayer.put_Transparency

           INPUT
            pAlpha              : short'''
        return super(IRasterBasemapLayer, self).put_Transparency(pAlpha)
    def HasMosaicLayer(self):
        '''Method IRasterBasemapLayer.HasMosaicLayer

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IRasterBasemapLayer, self).HasMosaicLayer()
    def get_MosaicLayer(self):
        '''Method IRasterBasemapLayer.get_MosaicLayer

           OUTPUT
            Layer               : IMosaicLayer**'''
        return super(IRasterBasemapLayer, self).get_MosaicLayer()
    MosaicLayer = property(get_MosaicLayer, None, None)
    RasterLayer = property(get_RasterLayer, None, None)
    Transparency = property(get_Transparency, put_Transparency, None)

class IRasterBasemapLayerFactory(_esriCarto.IRasterBasemapLayerFactory):
    _IID = uuid.UUID('9727ffb9-7884-49e4-8288-026ad3091132')
    def Create(self, Layer):
        '''Method IRasterBasemapLayerFactory.Create

           INPUT
            Layer               : IRasterLayer*

           OUTPUT
            BasemapLayer        : IRasterBasemapLayer**'''
        return super(IRasterBasemapLayerFactory, self).Create(Layer)
    def CreateFromMosaicLayer(self, Layer):
        '''Method IRasterBasemapLayerFactory.CreateFromMosaicLayer

           INPUT
            Layer               : IMosaicLayer*

           OUTPUT
            BasemapLayer        : IRasterBasemapLayer**'''
        return super(IRasterBasemapLayerFactory, self).CreateFromMosaicLayer(Layer)

class ILayerDescriptor(_esriCarto.ILayerDescriptor):
    _IID = uuid.UUID('3b2dee7b-641e-48ff-a9cd-d2458c0a5861')

    def __init__(self, *args, **kw):
        super(ILayerDescriptor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method ILayerDescriptor.get_ID

           OUTPUT
            LayerID             : long*'''
        return super(ILayerDescriptor, self).get_ID()
    def put_ID(self, LayerID):
        '''Method ILayerDescriptor.put_ID

           INPUT
            LayerID             : long'''
        return super(ILayerDescriptor, self).put_ID(LayerID)
    def get_Name(self):
        '''Method ILayerDescriptor.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILayerDescriptor, self).get_Name()
    def get_Visible(self):
        '''Method ILayerDescriptor.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILayerDescriptor, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayerDescriptor.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILayerDescriptor, self).put_Visible(Visible)
    def get_ShowLabels(self):
        '''Method ILayerDescriptor.get_ShowLabels

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescriptor, self).get_ShowLabels()
    def put_ShowLabels(self, Show):
        '''Method ILayerDescriptor.put_ShowLabels

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescriptor, self).put_ShowLabels(Show)
    def get_Transparency(self):
        '''Method ILayerDescriptor.get_Transparency

           OUTPUT
            alphaValue          : short*'''
        return super(ILayerDescriptor, self).get_Transparency()
    def put_Transparency(self, alphaValue):
        '''Method ILayerDescriptor.put_Transparency

           INPUT
            alphaValue          : short'''
        return super(ILayerDescriptor, self).put_Transparency(alphaValue)
    def put_SelectionFilters(self, _arg1):
        '''Method ILayerDescriptor.put_SelectionFilters

           INPUT
            _arg1               : IArray*'''
        return super(ILayerDescriptor, self).put_SelectionFilters(_arg1)
    def get_SelectionBufferDistance(self):
        '''Method ILayerDescriptor.get_SelectionBufferDistance

           OUTPUT
            Distance            : double*'''
        return super(ILayerDescriptor, self).get_SelectionBufferDistance()
    def put_SelectionBufferDistance(self, Distance):
        '''Method ILayerDescriptor.put_SelectionBufferDistance

           INPUT
            Distance            : double'''
        return super(ILayerDescriptor, self).put_SelectionBufferDistance(Distance)
    def get_ShowSelectionBuffer(self):
        '''Method ILayerDescriptor.get_ShowSelectionBuffer

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescriptor, self).get_ShowSelectionBuffer()
    def put_ShowSelectionBuffer(self, Show):
        '''Method ILayerDescriptor.put_ShowSelectionBuffer

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescriptor, self).put_ShowSelectionBuffer(Show)
    def get_DefinitionExpression(self):
        '''Method ILayerDescriptor.get_DefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(ILayerDescriptor, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method ILayerDescriptor.put_DefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(ILayerDescriptor, self).put_DefinitionExpression(Expression)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    ID = property(get_ID, put_ID, None)
    Name = property(get_Name, None, None)
    SelectionBufferDistance = property(get_SelectionBufferDistance, put_SelectionBufferDistance, None)
    SelectionFilters = property(None, put_SelectionFilters, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    ShowSelectionBuffer = property(get_ShowSelectionBuffer, put_ShowSelectionBuffer, None)
    Transparency = property(get_Transparency, put_Transparency, None)
    Visible = property(get_Visible, put_Visible, None)

class ITOCClass(_esriCarto.ITOCClass):
    _IID = uuid.UUID('60717be3-7fcf-43a1-a1d8-1b645571eacb')
    def get_Label(self):
        '''Method ITOCClass.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(ITOCClass, self).get_Label()
    def get_Description(self):
        '''Method ITOCClass.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(ITOCClass, self).get_Description()
    def get_SymbolPatchImage(self, fileType):
        '''Method ITOCClass.get_SymbolPatchImage

           INPUT
            fileType            : BSTR

           OUTPUT
            patchPath           : BSTR*'''
        return super(ITOCClass, self).get_SymbolPatchImage(fileType)
    Description = property(get_Description, None, None)
    Label = property(get_Label, None, None)
    SymbolPatchImage = IndexProperty(get_SymbolPatchImage, None)

class ITOCGroup(_esriCarto.ITOCGroup):
    _IID = uuid.UUID('47f5d6e6-f528-4ef8-8511-77cc552518d3')
    def get_Heading(self):
        '''Method ITOCGroup.get_Heading

           OUTPUT
            Heading             : BSTR*'''
        return super(ITOCGroup, self).get_Heading()
    def get_Classes(self):
        '''Method ITOCGroup.get_Classes

           OUTPUT
            tocClasses          : IArray**'''
        return super(ITOCGroup, self).get_Classes()
    Classes = property(get_Classes, None, None)
    Heading = property(get_Heading, None, None)

class IMxdServerQuery(_esriCarto.IMxdServerQuery):
    _IID = uuid.UUID('1e90974d-6d47-480d-9aa9-d8f582757226')
    def QueryFeatures(self, MapName, LayerID, QueryFilters):
        '''Method IMxdServerQuery.QueryFeatures

           INPUTS
            MapName             : BSTR
            LayerID             : long
            QueryFilters        : IArray*

           OUTPUT
            features            : IFeatureCursor**'''
        return super(IMxdServerQuery, self).QueryFeatures(MapName, LayerID, QueryFilters)
    def Identify(self, MapName, LayerID, Shape):
        '''Method IMxdServerQuery.Identify

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Shape               : IGeometry*

           OUTPUT
            identifyObjects     : IArray**'''
        return super(IMxdServerQuery, self).Identify(MapName, LayerID, Shape)
    def get_RelatedIdentifyObjects(self, MapName, IdentifyObject):
        '''Method IMxdServerQuery.get_RelatedIdentifyObjects

           INPUTS
            MapName             : BSTR
            IdentifyObject      : IIdentifyObj*

           OUTPUT
            relatedObjects      : IArray**'''
        return super(IMxdServerQuery, self).get_RelatedIdentifyObjects(MapName, IdentifyObject)
    def ComputeScale(self, MapName, imageWidthPixels, Extent):
        '''Method IMxdServerQuery.ComputeScale

           INPUTS
            MapName             : BSTR
            imageWidthPixels    : int
            Extent              : IEnvelope*

           OUTPUT
            Scale               : double*'''
        return super(IMxdServerQuery, self).ComputeScale(MapName, imageWidthPixels, Extent)
    def ComputeDistance(self, MapName, fromPoint, toPoint):
        '''Method IMxdServerQuery.ComputeDistance

           INPUTS
            MapName             : BSTR
            fromPoint           : IPoint*
            toPoint             : IPoint*

           OUTPUT
            Distance            : double*'''
        return super(IMxdServerQuery, self).ComputeDistance(MapName, fromPoint, toPoint)
    def Find(self, MapName, findString, LayerID):
        '''Method IMxdServerQuery.Find

           INPUTS
            MapName             : BSTR
            findString          : BSTR
            LayerID             : long

           OUTPUT
            findObjects         : IArray**'''
        return super(IMxdServerQuery, self).Find(MapName, findString, LayerID)
    def QueryByLayer(self, MapName, targetLayerID, selectionLayerID, selectionMethod, useSelected, BufferDistance, bufferDistanceUnits):
        '''Method IMxdServerQuery.QueryByLayer

           INPUTS
            MapName             : BSTR
            targetLayerID       : long
            selectionLayerID    : long
            selectionMethod     : esriLayerSelectionMethod
            useSelected         : VARIANT_BOOL
            BufferDistance      : double
            bufferDistanceUnits : esriUnits

           OUTPUT
            features            : IFeatureCursor**'''
        return super(IMxdServerQuery, self).QueryByLayer(MapName, targetLayerID, selectionLayerID, selectionMethod, useSelected, BufferDistance, bufferDistanceUnits)

class IQueryByLayer(_esriCarto.IQueryByLayer):
    _IID = uuid.UUID('b353cfbb-0f64-4d00-904a-6eecd3fa5d4c')

    def __init__(self, *args, **kw):
        super(IQueryByLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FromLayer(self, _arg1):
        '''Method IQueryByLayer.putref_FromLayer

           INPUT
            _arg1               : IFeatureLayer*'''
        return super(IQueryByLayer, self).putref_FromLayer(_arg1)
    def putref_ByLayer(self, _arg1):
        '''Method IQueryByLayer.putref_ByLayer

           INPUT
            _arg1               : IFeatureLayer*'''
        return super(IQueryByLayer, self).putref_ByLayer(_arg1)
    def put_LayerSelectionMethod(self, _arg1):
        '''Method IQueryByLayer.put_LayerSelectionMethod

           INPUT
            _arg1               : esriLayerSelectionMethod'''
        return super(IQueryByLayer, self).put_LayerSelectionMethod(_arg1)
    def put_BufferDistance(self, _arg1):
        '''Method IQueryByLayer.put_BufferDistance

           INPUT
            _arg1               : double'''
        return super(IQueryByLayer, self).put_BufferDistance(_arg1)
    def put_BufferUnits(self, _arg1):
        '''Method IQueryByLayer.put_BufferUnits

           INPUT
            _arg1               : esriUnits'''
        return super(IQueryByLayer, self).put_BufferUnits(_arg1)
    def put_UseSelectedFeatures(self, _arg1):
        '''Method IQueryByLayer.put_UseSelectedFeatures

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IQueryByLayer, self).put_UseSelectedFeatures(_arg1)
    def put_ResultType(self, _arg1):
        '''Method IQueryByLayer.put_ResultType

           INPUT
            _arg1               : esriSelectionResultEnum'''
        return super(IQueryByLayer, self).put_ResultType(_arg1)
    def Select(self):
        '''Method IQueryByLayer.Select

           OUTPUT
            Selection           : ISelectionSet**'''
        return super(IQueryByLayer, self).Select()
    BufferDistance = property(None, put_BufferDistance, None)
    BufferUnits = property(None, put_BufferUnits, None)
    ByLayer = property(None, putref_ByLayer, None)
    FromLayer = property(None, putref_FromLayer, None)
    LayerSelectionMethod = property(None, put_LayerSelectionMethod, None)
    ResultType = property(None, put_ResultType, None)
    UseSelectedFeatures = property(None, put_UseSelectedFeatures, None)

class IMxdServerStatus(_esriCarto.IMxdServerStatus):
    _IID = uuid.UUID('6b0523cd-7947-48e0-8ec7-96f8937badd5')
    def Cancel(self):
        '''Method IMxdServerStatus.Cancel'''
        return super(IMxdServerStatus, self).Cancel()

class ILayerDescription(_esriCarto.ILayerDescription):
    _IID = uuid.UUID('f763bdbe-8ef9-4da8-9628-dbe8ee4eb6de')

    def __init__(self, *args, **kw):
        super(ILayerDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method ILayerDescription.get_ID

           OUTPUT
            LayerID             : long*'''
        return super(ILayerDescription, self).get_ID()
    def put_ID(self, LayerID):
        '''Method ILayerDescription.put_ID

           INPUT
            LayerID             : long'''
        return super(ILayerDescription, self).put_ID(LayerID)
    def get_Visible(self):
        '''Method ILayerDescription.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILayerDescription, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayerDescription.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILayerDescription, self).put_Visible(Visible)
    def get_ScaleSymbols(self):
        '''Method ILayerDescription.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ILayerDescription, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method ILayerDescription.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ILayerDescription, self).put_ScaleSymbols(Scale)
    def get_ShowLabels(self):
        '''Method ILayerDescription.get_ShowLabels

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescription, self).get_ShowLabels()
    def put_ShowLabels(self, Show):
        '''Method ILayerDescription.put_ShowLabels

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescription, self).put_ShowLabels(Show)
    def get_SelectionFeatures(self):
        '''Method ILayerDescription.get_SelectionFeatures

           OUTPUT
            FeatureIDs          : IFIDSet**'''
        return super(ILayerDescription, self).get_SelectionFeatures()
    def put_SelectionFeatures(self, FeatureIDs):
        '''Method ILayerDescription.put_SelectionFeatures

           INPUT
            FeatureIDs          : IFIDSet*'''
        return super(ILayerDescription, self).put_SelectionFeatures(FeatureIDs)
    def get_SelectionColor(self):
        '''Method ILayerDescription.get_SelectionColor

           OUTPUT
            Color               : IColor**'''
        return super(ILayerDescription, self).get_SelectionColor()
    def putref_SelectionColor(self, Color):
        '''Method ILayerDescription.putref_SelectionColor

           INPUT
            Color               : IColor*'''
        return super(ILayerDescription, self).putref_SelectionColor(Color)
    def get_SelectionSymbol(self):
        '''Method ILayerDescription.get_SelectionSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ILayerDescription, self).get_SelectionSymbol()
    def putref_SelectionSymbol(self, Symbol):
        '''Method ILayerDescription.putref_SelectionSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ILayerDescription, self).putref_SelectionSymbol(Symbol)
    def get_SetSelectionSymbol(self):
        '''Method ILayerDescription.get_SetSelectionSymbol

           OUTPUT
            setSymbol           : VARIANT_BOOL*'''
        return super(ILayerDescription, self).get_SetSelectionSymbol()
    def put_SetSelectionSymbol(self, setSymbol):
        '''Method ILayerDescription.put_SetSelectionSymbol

           INPUT
            setSymbol           : VARIANT_BOOL'''
        return super(ILayerDescription, self).put_SetSelectionSymbol(setSymbol)
    def get_SelectionBufferDistance(self):
        '''Method ILayerDescription.get_SelectionBufferDistance

           OUTPUT
            Distance            : double*'''
        return super(ILayerDescription, self).get_SelectionBufferDistance()
    def put_SelectionBufferDistance(self, Distance):
        '''Method ILayerDescription.put_SelectionBufferDistance

           INPUT
            Distance            : double'''
        return super(ILayerDescription, self).put_SelectionBufferDistance(Distance)
    def get_ShowSelectionBuffer(self):
        '''Method ILayerDescription.get_ShowSelectionBuffer

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescription, self).get_ShowSelectionBuffer()
    def put_ShowSelectionBuffer(self, Show):
        '''Method ILayerDescription.put_ShowSelectionBuffer

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescription, self).put_ShowSelectionBuffer(Show)
    def get_DefinitionExpression(self):
        '''Method ILayerDescription.get_DefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(ILayerDescription, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method ILayerDescription.put_DefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(ILayerDescription, self).put_DefinitionExpression(Expression)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    ID = property(get_ID, put_ID, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    SelectionBufferDistance = property(get_SelectionBufferDistance, put_SelectionBufferDistance, None)
    SelectionColor = property(get_SelectionColor, putref_SelectionColor, None)
    SelectionFeatures = property(get_SelectionFeatures, put_SelectionFeatures, None)
    SelectionSymbol = property(get_SelectionSymbol, putref_SelectionSymbol, None)
    SetSelectionSymbol = property(get_SetSelectionSymbol, put_SetSelectionSymbol, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    ShowSelectionBuffer = property(get_ShowSelectionBuffer, put_ShowSelectionBuffer, None)
    Visible = property(get_Visible, put_Visible, None)

class ILayerDescription2(_esriCarto.ILayerDescription2):
    _IID = uuid.UUID('a8f3db59-54b9-4bd0-83b9-a7e60c721f3a')

    def __init__(self, *args, **kw):
        super(ILayerDescription2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SourceID(self):
        '''Method ILayerDescription2.get_SourceID

           OUTPUT
            srcID               : BSTR*'''
        return super(ILayerDescription2, self).get_SourceID()
    def put_SourceID(self, srcID):
        '''Method ILayerDescription2.put_SourceID

           INPUT
            srcID               : BSTR'''
        return super(ILayerDescription2, self).put_SourceID(srcID)
    def get_SelectionBufferSymbol(self):
        '''Method ILayerDescription2.get_SelectionBufferSymbol

           OUTPUT
            BufferSymbol        : IFillSymbol**'''
        return super(ILayerDescription2, self).get_SelectionBufferSymbol()
    def putref_SelectionBufferSymbol(self, BufferSymbol):
        '''Method ILayerDescription2.putref_SelectionBufferSymbol

           INPUT
            BufferSymbol        : IFillSymbol*'''
        return super(ILayerDescription2, self).putref_SelectionBufferSymbol(BufferSymbol)
    def get_ID(self):
        '''Method ILayerDescription.get_ID (from ILayerDescription)

           OUTPUT
            LayerID             : long*'''
        return super(ILayerDescription2, self).get_ID()
    def put_ID(self, LayerID):
        '''Method ILayerDescription.put_ID (from ILayerDescription)

           INPUT
            LayerID             : long'''
        return super(ILayerDescription2, self).put_ID(LayerID)
    def get_Visible(self):
        '''Method ILayerDescription.get_Visible (from ILayerDescription)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILayerDescription2, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayerDescription.put_Visible (from ILayerDescription)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILayerDescription2, self).put_Visible(Visible)
    def get_ScaleSymbols(self):
        '''Method ILayerDescription.get_ScaleSymbols (from ILayerDescription)

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ILayerDescription2, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method ILayerDescription.put_ScaleSymbols (from ILayerDescription)

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ILayerDescription2, self).put_ScaleSymbols(Scale)
    def get_ShowLabels(self):
        '''Method ILayerDescription.get_ShowLabels (from ILayerDescription)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescription2, self).get_ShowLabels()
    def put_ShowLabels(self, Show):
        '''Method ILayerDescription.put_ShowLabels (from ILayerDescription)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescription2, self).put_ShowLabels(Show)
    def get_SelectionFeatures(self):
        '''Method ILayerDescription.get_SelectionFeatures (from ILayerDescription)

           OUTPUT
            FeatureIDs          : IFIDSet**'''
        return super(ILayerDescription2, self).get_SelectionFeatures()
    def put_SelectionFeatures(self, FeatureIDs):
        '''Method ILayerDescription.put_SelectionFeatures (from ILayerDescription)

           INPUT
            FeatureIDs          : IFIDSet*'''
        return super(ILayerDescription2, self).put_SelectionFeatures(FeatureIDs)
    def get_SelectionColor(self):
        '''Method ILayerDescription.get_SelectionColor (from ILayerDescription)

           OUTPUT
            Color               : IColor**'''
        return super(ILayerDescription2, self).get_SelectionColor()
    def putref_SelectionColor(self, Color):
        '''Method ILayerDescription.putref_SelectionColor (from ILayerDescription)

           INPUT
            Color               : IColor*'''
        return super(ILayerDescription2, self).putref_SelectionColor(Color)
    def get_SelectionSymbol(self):
        '''Method ILayerDescription.get_SelectionSymbol (from ILayerDescription)

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ILayerDescription2, self).get_SelectionSymbol()
    def putref_SelectionSymbol(self, Symbol):
        '''Method ILayerDescription.putref_SelectionSymbol (from ILayerDescription)

           INPUT
            Symbol              : ISymbol*'''
        return super(ILayerDescription2, self).putref_SelectionSymbol(Symbol)
    def get_SetSelectionSymbol(self):
        '''Method ILayerDescription.get_SetSelectionSymbol (from ILayerDescription)

           OUTPUT
            setSymbol           : VARIANT_BOOL*'''
        return super(ILayerDescription2, self).get_SetSelectionSymbol()
    def put_SetSelectionSymbol(self, setSymbol):
        '''Method ILayerDescription.put_SetSelectionSymbol (from ILayerDescription)

           INPUT
            setSymbol           : VARIANT_BOOL'''
        return super(ILayerDescription2, self).put_SetSelectionSymbol(setSymbol)
    def get_SelectionBufferDistance(self):
        '''Method ILayerDescription.get_SelectionBufferDistance (from ILayerDescription)

           OUTPUT
            Distance            : double*'''
        return super(ILayerDescription2, self).get_SelectionBufferDistance()
    def put_SelectionBufferDistance(self, Distance):
        '''Method ILayerDescription.put_SelectionBufferDistance (from ILayerDescription)

           INPUT
            Distance            : double'''
        return super(ILayerDescription2, self).put_SelectionBufferDistance(Distance)
    def get_ShowSelectionBuffer(self):
        '''Method ILayerDescription.get_ShowSelectionBuffer (from ILayerDescription)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescription2, self).get_ShowSelectionBuffer()
    def put_ShowSelectionBuffer(self, Show):
        '''Method ILayerDescription.put_ShowSelectionBuffer (from ILayerDescription)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescription2, self).put_ShowSelectionBuffer(Show)
    def get_DefinitionExpression(self):
        '''Method ILayerDescription.get_DefinitionExpression (from ILayerDescription)

           OUTPUT
            Expression          : BSTR*'''
        return super(ILayerDescription2, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method ILayerDescription.put_DefinitionExpression (from ILayerDescription)

           INPUT
            Expression          : BSTR'''
        return super(ILayerDescription2, self).put_DefinitionExpression(Expression)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    ID = property(get_ID, put_ID, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    SelectionBufferDistance = property(get_SelectionBufferDistance, put_SelectionBufferDistance, None)
    SelectionBufferSymbol = property(get_SelectionBufferSymbol, putref_SelectionBufferSymbol, None)
    SelectionColor = property(get_SelectionColor, putref_SelectionColor, None)
    SelectionFeatures = property(get_SelectionFeatures, put_SelectionFeatures, None)
    SelectionSymbol = property(get_SelectionSymbol, putref_SelectionSymbol, None)
    SetSelectionSymbol = property(get_SetSelectionSymbol, put_SetSelectionSymbol, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    ShowSelectionBuffer = property(get_ShowSelectionBuffer, put_ShowSelectionBuffer, None)
    SourceID = property(get_SourceID, put_SourceID, None)
    Visible = property(get_Visible, put_Visible, None)

class ILayerResultOptions(_esriCarto.ILayerResultOptions):
    _IID = uuid.UUID('874ba262-3901-4b69-b322-94104e4989c1')

    def __init__(self, *args, **kw):
        super(ILayerResultOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_IncludeGeometry(self, IncludeGeometry):
        '''Method ILayerResultOptions.put_IncludeGeometry

           INPUT
            IncludeGeometry     : VARIANT_BOOL'''
        return super(ILayerResultOptions, self).put_IncludeGeometry(IncludeGeometry)
    def get_IncludeGeometry(self):
        '''Method ILayerResultOptions.get_IncludeGeometry

           OUTPUT
            IncludeGeometry     : VARIANT_BOOL*'''
        return super(ILayerResultOptions, self).get_IncludeGeometry()
    def putref_GeometryResultOptions(self, geometryOptions):
        '''Method ILayerResultOptions.putref_GeometryResultOptions

           INPUT
            geometryOptions     : IGeometryResultOptions*'''
        return super(ILayerResultOptions, self).putref_GeometryResultOptions(geometryOptions)
    def get_GeometryResultOptions(self):
        '''Method ILayerResultOptions.get_GeometryResultOptions

           OUTPUT
            geometryOptions     : IGeometryResultOptions**'''
        return super(ILayerResultOptions, self).get_GeometryResultOptions()
    def put_ReturnFieldNamesInResults(self, returnFieldName):
        '''Method ILayerResultOptions.put_ReturnFieldNamesInResults

           INPUT
            returnFieldName     : VARIANT_BOOL'''
        return super(ILayerResultOptions, self).put_ReturnFieldNamesInResults(returnFieldName)
    def get_ReturnFieldNamesInResults(self):
        '''Method ILayerResultOptions.get_ReturnFieldNamesInResults

           OUTPUT
            returnFieldName     : VARIANT_BOOL*'''
        return super(ILayerResultOptions, self).get_ReturnFieldNamesInResults()
    def put_FormatValuesInResults(self, Format):
        '''Method ILayerResultOptions.put_FormatValuesInResults

           INPUT
            Format              : VARIANT_BOOL'''
        return super(ILayerResultOptions, self).put_FormatValuesInResults(Format)
    def get_FormatValuesInResults(self):
        '''Method ILayerResultOptions.get_FormatValuesInResults

           OUTPUT
            Format              : VARIANT_BOOL*'''
        return super(ILayerResultOptions, self).get_FormatValuesInResults()
    FormatValuesInResults = property(get_FormatValuesInResults, put_FormatValuesInResults, None)
    GeometryResultOptions = property(get_GeometryResultOptions, putref_GeometryResultOptions, None)
    IncludeGeometry = property(get_IncludeGeometry, put_IncludeGeometry, None)
    ReturnFieldNamesInResults = property(get_ReturnFieldNamesInResults, put_ReturnFieldNamesInResults, None)

class ILayerDescription3(_esriCarto.ILayerDescription3):
    _IID = uuid.UUID('4124d038-1e88-4743-b402-a1b2534ddaae')

    def __init__(self, *args, **kw):
        super(ILayerDescription3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_LayerResultOptions(self, LayerResultOptions):
        '''Method ILayerDescription3.putref_LayerResultOptions

           INPUT
            LayerResultOptions  : ILayerResultOptions*'''
        return super(ILayerDescription3, self).putref_LayerResultOptions(LayerResultOptions)
    def get_LayerResultOptions(self):
        '''Method ILayerDescription3.get_LayerResultOptions

           OUTPUT
            LayerResultOptions  : ILayerResultOptions**'''
        return super(ILayerDescription3, self).get_LayerResultOptions()
    def get_SourceID(self):
        '''Method ILayerDescription2.get_SourceID (from ILayerDescription2)

           OUTPUT
            srcID               : BSTR*'''
        return super(ILayerDescription3, self).get_SourceID()
    def put_SourceID(self, srcID):
        '''Method ILayerDescription2.put_SourceID (from ILayerDescription2)

           INPUT
            srcID               : BSTR'''
        return super(ILayerDescription3, self).put_SourceID(srcID)
    def get_SelectionBufferSymbol(self):
        '''Method ILayerDescription2.get_SelectionBufferSymbol (from ILayerDescription2)

           OUTPUT
            BufferSymbol        : IFillSymbol**'''
        return super(ILayerDescription3, self).get_SelectionBufferSymbol()
    def putref_SelectionBufferSymbol(self, BufferSymbol):
        '''Method ILayerDescription2.putref_SelectionBufferSymbol (from ILayerDescription2)

           INPUT
            BufferSymbol        : IFillSymbol*'''
        return super(ILayerDescription3, self).putref_SelectionBufferSymbol(BufferSymbol)
    def get_ID(self):
        '''Method ILayerDescription.get_ID (from ILayerDescription)

           OUTPUT
            LayerID             : long*'''
        return super(ILayerDescription3, self).get_ID()
    def put_ID(self, LayerID):
        '''Method ILayerDescription.put_ID (from ILayerDescription)

           INPUT
            LayerID             : long'''
        return super(ILayerDescription3, self).put_ID(LayerID)
    def get_Visible(self):
        '''Method ILayerDescription.get_Visible (from ILayerDescription)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILayerDescription3, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayerDescription.put_Visible (from ILayerDescription)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILayerDescription3, self).put_Visible(Visible)
    def get_ScaleSymbols(self):
        '''Method ILayerDescription.get_ScaleSymbols (from ILayerDescription)

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ILayerDescription3, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method ILayerDescription.put_ScaleSymbols (from ILayerDescription)

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ILayerDescription3, self).put_ScaleSymbols(Scale)
    def get_ShowLabels(self):
        '''Method ILayerDescription.get_ShowLabels (from ILayerDescription)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescription3, self).get_ShowLabels()
    def put_ShowLabels(self, Show):
        '''Method ILayerDescription.put_ShowLabels (from ILayerDescription)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescription3, self).put_ShowLabels(Show)
    def get_SelectionFeatures(self):
        '''Method ILayerDescription.get_SelectionFeatures (from ILayerDescription)

           OUTPUT
            FeatureIDs          : IFIDSet**'''
        return super(ILayerDescription3, self).get_SelectionFeatures()
    def put_SelectionFeatures(self, FeatureIDs):
        '''Method ILayerDescription.put_SelectionFeatures (from ILayerDescription)

           INPUT
            FeatureIDs          : IFIDSet*'''
        return super(ILayerDescription3, self).put_SelectionFeatures(FeatureIDs)
    def get_SelectionColor(self):
        '''Method ILayerDescription.get_SelectionColor (from ILayerDescription)

           OUTPUT
            Color               : IColor**'''
        return super(ILayerDescription3, self).get_SelectionColor()
    def putref_SelectionColor(self, Color):
        '''Method ILayerDescription.putref_SelectionColor (from ILayerDescription)

           INPUT
            Color               : IColor*'''
        return super(ILayerDescription3, self).putref_SelectionColor(Color)
    def get_SelectionSymbol(self):
        '''Method ILayerDescription.get_SelectionSymbol (from ILayerDescription)

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ILayerDescription3, self).get_SelectionSymbol()
    def putref_SelectionSymbol(self, Symbol):
        '''Method ILayerDescription.putref_SelectionSymbol (from ILayerDescription)

           INPUT
            Symbol              : ISymbol*'''
        return super(ILayerDescription3, self).putref_SelectionSymbol(Symbol)
    def get_SetSelectionSymbol(self):
        '''Method ILayerDescription.get_SetSelectionSymbol (from ILayerDescription)

           OUTPUT
            setSymbol           : VARIANT_BOOL*'''
        return super(ILayerDescription3, self).get_SetSelectionSymbol()
    def put_SetSelectionSymbol(self, setSymbol):
        '''Method ILayerDescription.put_SetSelectionSymbol (from ILayerDescription)

           INPUT
            setSymbol           : VARIANT_BOOL'''
        return super(ILayerDescription3, self).put_SetSelectionSymbol(setSymbol)
    def get_SelectionBufferDistance(self):
        '''Method ILayerDescription.get_SelectionBufferDistance (from ILayerDescription)

           OUTPUT
            Distance            : double*'''
        return super(ILayerDescription3, self).get_SelectionBufferDistance()
    def put_SelectionBufferDistance(self, Distance):
        '''Method ILayerDescription.put_SelectionBufferDistance (from ILayerDescription)

           INPUT
            Distance            : double'''
        return super(ILayerDescription3, self).put_SelectionBufferDistance(Distance)
    def get_ShowSelectionBuffer(self):
        '''Method ILayerDescription.get_ShowSelectionBuffer (from ILayerDescription)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILayerDescription3, self).get_ShowSelectionBuffer()
    def put_ShowSelectionBuffer(self, Show):
        '''Method ILayerDescription.put_ShowSelectionBuffer (from ILayerDescription)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILayerDescription3, self).put_ShowSelectionBuffer(Show)
    def get_DefinitionExpression(self):
        '''Method ILayerDescription.get_DefinitionExpression (from ILayerDescription)

           OUTPUT
            Expression          : BSTR*'''
        return super(ILayerDescription3, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method ILayerDescription.put_DefinitionExpression (from ILayerDescription)

           INPUT
            Expression          : BSTR'''
        return super(ILayerDescription3, self).put_DefinitionExpression(Expression)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    ID = property(get_ID, put_ID, None)
    LayerResultOptions = property(get_LayerResultOptions, putref_LayerResultOptions, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    SelectionBufferDistance = property(get_SelectionBufferDistance, put_SelectionBufferDistance, None)
    SelectionBufferSymbol = property(get_SelectionBufferSymbol, putref_SelectionBufferSymbol, None)
    SelectionColor = property(get_SelectionColor, putref_SelectionColor, None)
    SelectionFeatures = property(get_SelectionFeatures, put_SelectionFeatures, None)
    SelectionSymbol = property(get_SelectionSymbol, putref_SelectionSymbol, None)
    SetSelectionSymbol = property(get_SetSelectionSymbol, put_SetSelectionSymbol, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    ShowSelectionBuffer = property(get_ShowSelectionBuffer, put_ShowSelectionBuffer, None)
    SourceID = property(get_SourceID, put_SourceID, None)
    Visible = property(get_Visible, put_Visible, None)

class IMapArea(_esriCarto.IMapArea):
    _IID = uuid.UUID('0220f7a0-ae3d-4cd3-b990-349afd102789')
    def get_Extent(self):
        '''Method IMapArea.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapArea, self).get_Extent()
    Extent = property(get_Extent, None, None)

class ILayerDescriptions(_esriCarto.ILayerDescriptions):
    _IID = uuid.UUID('825ba060-417b-4e88-bdaf-329c17411c5c')
    def get_Count(self):
        '''Method ILayerDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(ILayerDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method ILayerDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            LayerDescription    : ILayerDescription**'''
        return super(ILayerDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ILayerDescriptions.Remove

           INPUT
            Index               : long'''
        return super(ILayerDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method ILayerDescriptions.RemoveAll'''
        return super(ILayerDescriptions, self).RemoveAll()
    def Add(self, LayerDescription):
        '''Method ILayerDescriptions.Add

           INPUT
            LayerDescription    : ILayerDescription*'''
        return super(ILayerDescriptions, self).Add(LayerDescription)
    def Insert(self, Index, LayerDescription):
        '''Method ILayerDescriptions.Insert

           INPUTS
            Index               : long
            LayerDescription    : ILayerDescription*'''
        return super(ILayerDescriptions, self).Insert(Index, LayerDescription)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapDescription(_esriCarto.IMapDescription):
    _IID = uuid.UUID('4a81affe-0883-4062-8536-85ab858a10a5')

    def __init__(self, *args, **kw):
        super(IMapDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMapDescription.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapDescription, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapDescription.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMapDescription, self).put_Name(Name)
    def get_MapArea(self):
        '''Method IMapDescription.get_MapArea

           OUTPUT
            area                : IMapArea**'''
        return super(IMapDescription, self).get_MapArea()
    def put_MapArea(self, area):
        '''Method IMapDescription.put_MapArea

           INPUT
            area                : IMapArea*'''
        return super(IMapDescription, self).put_MapArea(area)
    def get_LayerDescriptions(self):
        '''Method IMapDescription.get_LayerDescriptions

           OUTPUT
            LayerDescriptions   : ILayerDescriptions**'''
        return super(IMapDescription, self).get_LayerDescriptions()
    def put_LayerDescriptions(self, LayerDescriptions):
        '''Method IMapDescription.put_LayerDescriptions

           INPUT
            LayerDescriptions   : ILayerDescriptions*'''
        return super(IMapDescription, self).put_LayerDescriptions(LayerDescriptions)
    def get_MapRotation(self):
        '''Method IMapDescription.get_MapRotation

           OUTPUT
            angleDegrees        : double*'''
        return super(IMapDescription, self).get_MapRotation()
    def put_MapRotation(self, angleDegrees):
        '''Method IMapDescription.put_MapRotation

           INPUT
            angleDegrees        : double'''
        return super(IMapDescription, self).put_MapRotation(angleDegrees)
    def get_SpatialReference(self):
        '''Method IMapDescription.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IMapDescription, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IMapDescription.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IMapDescription, self).putref_SpatialReference(SpatialReference)
    def get_CustomGraphics(self):
        '''Method IMapDescription.get_CustomGraphics

           OUTPUT
            Elements            : IGraphicElements**'''
        return super(IMapDescription, self).get_CustomGraphics()
    def put_CustomGraphics(self, Elements):
        '''Method IMapDescription.put_CustomGraphics

           INPUT
            Elements            : IGraphicElements*'''
        return super(IMapDescription, self).put_CustomGraphics(Elements)
    def get_TransparentColor(self):
        '''Method IMapDescription.get_TransparentColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescription, self).get_TransparentColor()
    def put_TransparentColor(self, Color):
        '''Method IMapDescription.put_TransparentColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescription, self).put_TransparentColor(Color)
    def get_SelectionColor(self):
        '''Method IMapDescription.get_SelectionColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescription, self).get_SelectionColor()
    def put_SelectionColor(self, Color):
        '''Method IMapDescription.put_SelectionColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescription, self).put_SelectionColor(Color)
    CustomGraphics = property(get_CustomGraphics, put_CustomGraphics, None)
    LayerDescriptions = property(get_LayerDescriptions, put_LayerDescriptions, None)
    MapArea = property(get_MapArea, put_MapArea, None)
    MapRotation = property(get_MapRotation, put_MapRotation, None)
    Name = property(get_Name, put_Name, None)
    SelectionColor = property(get_SelectionColor, put_SelectionColor, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TransparentColor = property(get_TransparentColor, put_TransparentColor, None)

class ITileDescription(_esriCarto.ITileDescription):
    _IID = uuid.UUID('492addb4-ae87-464a-ab78-9812cfc8d37f')

    def __init__(self, *args, **kw):
        super(ITileDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TileWidth(self):
        '''Method ITileDescription.get_TileWidth

           OUTPUT
            Width               : long*'''
        return super(ITileDescription, self).get_TileWidth()
    def put_TileWidth(self, Width):
        '''Method ITileDescription.put_TileWidth

           INPUT
            Width               : long'''
        return super(ITileDescription, self).put_TileWidth(Width)
    def get_TileHeight(self):
        '''Method ITileDescription.get_TileHeight

           OUTPUT
            Height              : long*'''
        return super(ITileDescription, self).get_TileHeight()
    def put_TileHeight(self, Height):
        '''Method ITileDescription.put_TileHeight

           INPUT
            Height              : long'''
        return super(ITileDescription, self).put_TileHeight(Height)
    def get_TileCountX(self):
        '''Method ITileDescription.get_TileCountX

           OUTPUT
            tileCount           : long*'''
        return super(ITileDescription, self).get_TileCountX()
    def put_TileCountX(self, tileCount):
        '''Method ITileDescription.put_TileCountX

           INPUT
            tileCount           : long'''
        return super(ITileDescription, self).put_TileCountX(tileCount)
    def get_TileCountY(self):
        '''Method ITileDescription.get_TileCountY

           OUTPUT
            tileCount           : long*'''
        return super(ITileDescription, self).get_TileCountY()
    def put_TileCountY(self, tileCount):
        '''Method ITileDescription.put_TileCountY

           INPUT
            tileCount           : long'''
        return super(ITileDescription, self).put_TileCountY(tileCount)
    def get_Dpi(self):
        '''Method ITileDescription.get_Dpi

           OUTPUT
            Dpi                 : double*'''
        return super(ITileDescription, self).get_Dpi()
    def put_Dpi(self, Dpi):
        '''Method ITileDescription.put_Dpi

           INPUT
            Dpi                 : double'''
        return super(ITileDescription, self).put_Dpi(Dpi)
    def get_ImageFormat(self):
        '''Method ITileDescription.get_ImageFormat

           OUTPUT
            ImageFormat         : esriImageFormat*'''
        return super(ITileDescription, self).get_ImageFormat()
    def put_ImageFormat(self, ImageFormat):
        '''Method ITileDescription.put_ImageFormat

           INPUT
            ImageFormat         : esriImageFormat'''
        return super(ITileDescription, self).put_ImageFormat(ImageFormat)
    def get_Quality(self):
        '''Method ITileDescription.get_Quality

           OUTPUT
            Quality             : short*'''
        return super(ITileDescription, self).get_Quality()
    def put_Quality(self, Quality):
        '''Method ITileDescription.put_Quality

           INPUT
            Quality             : short'''
        return super(ITileDescription, self).put_Quality(Quality)
    Dpi = property(get_Dpi, put_Dpi, None)
    ImageFormat = property(get_ImageFormat, put_ImageFormat, None)
    Quality = property(get_Quality, put_Quality, None)
    TileCountX = property(get_TileCountX, put_TileCountX, None)
    TileCountY = property(get_TileCountY, put_TileCountY, None)
    TileHeight = property(get_TileHeight, put_TileHeight, None)
    TileWidth = property(get_TileWidth, put_TileWidth, None)

class IMapDescription2(_esriCarto.IMapDescription2):
    _IID = uuid.UUID('eea2fceb-f704-4de2-b2cf-289d1788cdab')

    def __init__(self, *args, **kw):
        super(IMapDescription2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMapDescription2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapDescription2, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapDescription2.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMapDescription2, self).put_Name(Name)
    def get_MapArea(self):
        '''Method IMapDescription2.get_MapArea

           OUTPUT
            area                : IMapArea**'''
        return super(IMapDescription2, self).get_MapArea()
    def put_MapArea(self, area):
        '''Method IMapDescription2.put_MapArea

           INPUT
            area                : IMapArea*'''
        return super(IMapDescription2, self).put_MapArea(area)
    def get_LayerDescriptions(self):
        '''Method IMapDescription2.get_LayerDescriptions

           OUTPUT
            LayerDescriptions   : ILayerDescriptions**'''
        return super(IMapDescription2, self).get_LayerDescriptions()
    def put_LayerDescriptions(self, LayerDescriptions):
        '''Method IMapDescription2.put_LayerDescriptions

           INPUT
            LayerDescriptions   : ILayerDescriptions*'''
        return super(IMapDescription2, self).put_LayerDescriptions(LayerDescriptions)
    def get_MapRotation(self):
        '''Method IMapDescription2.get_MapRotation

           OUTPUT
            angleDegrees        : double*'''
        return super(IMapDescription2, self).get_MapRotation()
    def put_MapRotation(self, angleDegrees):
        '''Method IMapDescription2.put_MapRotation

           INPUT
            angleDegrees        : double'''
        return super(IMapDescription2, self).put_MapRotation(angleDegrees)
    def get_SpatialReference(self):
        '''Method IMapDescription2.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IMapDescription2, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IMapDescription2.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IMapDescription2, self).putref_SpatialReference(SpatialReference)
    def get_CustomGraphics(self):
        '''Method IMapDescription2.get_CustomGraphics

           OUTPUT
            Elements            : IGraphicElements**'''
        return super(IMapDescription2, self).get_CustomGraphics()
    def put_CustomGraphics(self, Elements):
        '''Method IMapDescription2.put_CustomGraphics

           INPUT
            Elements            : IGraphicElements*'''
        return super(IMapDescription2, self).put_CustomGraphics(Elements)
    def get_TransparentColor(self):
        '''Method IMapDescription2.get_TransparentColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescription2, self).get_TransparentColor()
    def put_TransparentColor(self, Color):
        '''Method IMapDescription2.put_TransparentColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescription2, self).put_TransparentColor(Color)
    def get_SelectionColor(self):
        '''Method IMapDescription2.get_SelectionColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescription2, self).get_SelectionColor()
    def put_SelectionColor(self, Color):
        '''Method IMapDescription2.put_SelectionColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescription2, self).put_SelectionColor(Color)
    def get_BackgroundSymbol(self):
        '''Method IMapDescription2.get_BackgroundSymbol

           OUTPUT
            FillSymbol          : IFillSymbol**'''
        return super(IMapDescription2, self).get_BackgroundSymbol()
    def put_BackgroundSymbol(self, FillSymbol):
        '''Method IMapDescription2.put_BackgroundSymbol

           INPUT
            FillSymbol          : IFillSymbol*'''
        return super(IMapDescription2, self).put_BackgroundSymbol(FillSymbol)
    BackgroundSymbol = property(get_BackgroundSymbol, put_BackgroundSymbol, None)
    CustomGraphics = property(get_CustomGraphics, put_CustomGraphics, None)
    LayerDescriptions = property(get_LayerDescriptions, put_LayerDescriptions, None)
    MapArea = property(get_MapArea, put_MapArea, None)
    MapRotation = property(get_MapRotation, put_MapRotation, None)
    Name = property(get_Name, put_Name, None)
    SelectionColor = property(get_SelectionColor, put_SelectionColor, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TransparentColor = property(get_TransparentColor, put_TransparentColor, None)

class IMapDescriptions(_esriCarto.IMapDescriptions):
    _IID = uuid.UUID('445788e6-e100-4abc-a2af-bf10c1b68f40')
    def get_Count(self):
        '''Method IMapDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            mapDesc             : IMapDescription**'''
        return super(IMapDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapDescriptions.Remove

           INPUT
            Index               : long'''
        return super(IMapDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapDescriptions.RemoveAll'''
        return super(IMapDescriptions, self).RemoveAll()
    def Add(self, mapDesc):
        '''Method IMapDescriptions.Add

           INPUT
            mapDesc             : IMapDescription*'''
        return super(IMapDescriptions, self).Add(mapDesc)
    def Insert(self, Index, mapDesc):
        '''Method IMapDescriptions.Insert

           INPUTS
            Index               : long
            mapDesc             : IMapDescription*'''
        return super(IMapDescriptions, self).Insert(Index, mapDesc)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapFrameDescription(_esriCarto.IMapFrameDescription):
    _IID = uuid.UUID('42cabfce-786d-43aa-bfa1-bb1f26aceb6b')

    def __init__(self, *args, **kw):
        super(IMapFrameDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PageLocation(self):
        '''Method IMapFrameDescription.get_PageLocation

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapFrameDescription, self).get_PageLocation()
    def get_MapDescription(self):
        '''Method IMapFrameDescription.get_MapDescription

           OUTPUT
            mapDesc             : IMapDescription**'''
        return super(IMapFrameDescription, self).get_MapDescription()
    def putref_MapDescription(self, mapDesc):
        '''Method IMapFrameDescription.putref_MapDescription

           INPUT
            mapDesc             : IMapDescription*'''
        return super(IMapFrameDescription, self).putref_MapDescription(mapDesc)
    MapDescription = property(get_MapDescription, putref_MapDescription, None)
    PageLocation = property(get_PageLocation, None, None)

class IMapFrameDescriptions(_esriCarto.IMapFrameDescriptions):
    _IID = uuid.UUID('7ecddcde-6027-4547-b720-52794c52578c')
    def get_Count(self):
        '''Method IMapFrameDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapFrameDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapFrameDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            mapFrameDesc        : IMapFrameDescription**'''
        return super(IMapFrameDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapFrameDescriptions.Remove

           INPUT
            Index               : long'''
        return super(IMapFrameDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapFrameDescriptions.RemoveAll'''
        return super(IMapFrameDescriptions, self).RemoveAll()
    def Add(self, mapFrameDesc):
        '''Method IMapFrameDescriptions.Add

           INPUT
            mapFrameDesc        : IMapFrameDescription*'''
        return super(IMapFrameDescriptions, self).Add(mapFrameDesc)
    def Insert(self, Index, mapFrameDesc):
        '''Method IMapFrameDescriptions.Insert

           INPUTS
            Index               : long
            mapFrameDesc        : IMapFrameDescription*'''
        return super(IMapFrameDescriptions, self).Insert(Index, mapFrameDesc)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapLayerInfo(_esriCarto.IMapLayerInfo):
    _IID = uuid.UUID('ca469c38-c9e4-4dc3-9c32-86aef3b33df2')
    def get_ID(self):
        '''Method IMapLayerInfo.get_ID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo, self).get_ID()
    def get_Name(self):
        '''Method IMapLayerInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapLayerInfo, self).get_Name()
    def get_Description(self):
        '''Method IMapLayerInfo.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo, self).get_Description()
    def get_Type(self):
        '''Method IMapLayerInfo.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IMapLayerInfo, self).get_Type()
    def get_SourceDescription(self):
        '''Method IMapLayerInfo.get_SourceDescription

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo, self).get_SourceDescription()
    def get_HasLabels(self):
        '''Method IMapLayerInfo.get_HasLabels

           OUTPUT
            HasLabels           : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_HasLabels()
    def get_CanSelect(self):
        '''Method IMapLayerInfo.get_CanSelect

           OUTPUT
            CanSelect           : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_CanSelect()
    def get_CanScaleSymbols(self):
        '''Method IMapLayerInfo.get_CanScaleSymbols

           OUTPUT
            canScale            : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_CanScaleSymbols()
    def get_CanIdentify(self):
        '''Method IMapLayerInfo.get_CanIdentify

           OUTPUT
            canId               : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_CanIdentify()
    def get_CanFind(self):
        '''Method IMapLayerInfo.get_CanFind

           OUTPUT
            CanFind             : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_CanFind()
    def get_IsFeatureLayer(self):
        '''Method IMapLayerInfo.get_IsFeatureLayer

           OUTPUT
            IsFeatureLayer      : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_IsFeatureLayer()
    def get_MinScale(self):
        '''Method IMapLayerInfo.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo, self).get_MinScale()
    def get_MaxScale(self):
        '''Method IMapLayerInfo.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo, self).get_MaxScale()
    def get_Extent(self):
        '''Method IMapLayerInfo.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapLayerInfo, self).get_Extent()
    def get_HasHyperlinks(self):
        '''Method IMapLayerInfo.get_HasHyperlinks

           OUTPUT
            hasLinks            : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_HasHyperlinks()
    def get_HasAttributes(self):
        '''Method IMapLayerInfo.get_HasAttributes

           OUTPUT
            hasAttr             : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_HasAttributes()
    def get_Fields(self):
        '''Method IMapLayerInfo.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMapLayerInfo, self).get_Fields()
    def get_DisplayField(self):
        '''Method IMapLayerInfo.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapLayerInfo, self).get_DisplayField()
    def get_IsComposite(self):
        '''Method IMapLayerInfo.get_IsComposite

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IMapLayerInfo, self).get_IsComposite()
    def get_SubLayers(self):
        '''Method IMapLayerInfo.get_SubLayers

           OUTPUT
            layerIds            : ILongArray**'''
        return super(IMapLayerInfo, self).get_SubLayers()
    def get_ParentLayerID(self):
        '''Method IMapLayerInfo.get_ParentLayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo, self).get_ParentLayerID()
    CanFind = property(get_CanFind, None, None)
    CanIdentify = property(get_CanIdentify, None, None)
    CanScaleSymbols = property(get_CanScaleSymbols, None, None)
    CanSelect = property(get_CanSelect, None, None)
    Description = property(get_Description, None, None)
    DisplayField = property(get_DisplayField, None, None)
    Extent = property(get_Extent, None, None)
    Fields = property(get_Fields, None, None)
    HasAttributes = property(get_HasAttributes, None, None)
    HasHyperlinks = property(get_HasHyperlinks, None, None)
    HasLabels = property(get_HasLabels, None, None)
    ID = property(get_ID, None, None)
    IsComposite = property(get_IsComposite, None, None)
    IsFeatureLayer = property(get_IsFeatureLayer, None, None)
    MaxScale = property(get_MaxScale, None, None)
    MinScale = property(get_MinScale, None, None)
    Name = property(get_Name, None, None)
    ParentLayerID = property(get_ParentLayerID, None, None)
    SourceDescription = property(get_SourceDescription, None, None)
    SubLayers = property(get_SubLayers, None, None)
    Type = property(get_Type, None, None)

class IImageType(_esriCarto.IImageType):
    _IID = uuid.UUID('ec27718b-0fa5-40e1-9685-376e49e93cb5')

    def __init__(self, *args, **kw):
        super(IImageType, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Format(self):
        '''Method IImageType.get_Format

           OUTPUT
            ImageFormat         : esriImageFormat*'''
        return super(IImageType, self).get_Format()
    def put_Format(self, ImageFormat):
        '''Method IImageType.put_Format

           INPUT
            ImageFormat         : esriImageFormat'''
        return super(IImageType, self).put_Format(ImageFormat)
    def get_ReturnType(self):
        '''Method IImageType.get_ReturnType

           OUTPUT
            ReturnType          : esriImageReturnType*'''
        return super(IImageType, self).get_ReturnType()
    def put_ReturnType(self, ReturnType):
        '''Method IImageType.put_ReturnType

           INPUT
            ReturnType          : esriImageReturnType'''
        return super(IImageType, self).put_ReturnType(ReturnType)
    Format = property(get_Format, put_Format, None)
    ReturnType = property(get_ReturnType, put_ReturnType, None)

class IImageDisplay(_esriCarto.IImageDisplay):
    _IID = uuid.UUID('725221de-7d6b-462d-9cdf-1fe22ee39eb6')

    def __init__(self, *args, **kw):
        super(IImageDisplay, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Height(self):
        '''Method IImageDisplay.get_Height

           OUTPUT
            imageHeight         : long*'''
        return super(IImageDisplay, self).get_Height()
    def put_Height(self, imageHeight):
        '''Method IImageDisplay.put_Height

           INPUT
            imageHeight         : long'''
        return super(IImageDisplay, self).put_Height(imageHeight)
    def get_Width(self):
        '''Method IImageDisplay.get_Width

           OUTPUT
            imageWidth          : long*'''
        return super(IImageDisplay, self).get_Width()
    def put_Width(self, imageWidth):
        '''Method IImageDisplay.put_Width

           INPUT
            imageWidth          : long'''
        return super(IImageDisplay, self).put_Width(imageWidth)
    def get_DeviceResolution(self):
        '''Method IImageDisplay.get_DeviceResolution

           OUTPUT
            Dpi                 : double*'''
        return super(IImageDisplay, self).get_DeviceResolution()
    def put_DeviceResolution(self, Dpi):
        '''Method IImageDisplay.put_DeviceResolution

           INPUT
            Dpi                 : double'''
        return super(IImageDisplay, self).put_DeviceResolution(Dpi)
    DeviceResolution = property(get_DeviceResolution, put_DeviceResolution, None)
    Height = property(get_Height, put_Height, None)
    Width = property(get_Width, put_Width, None)

class IImageDescription(_esriCarto.IImageDescription):
    _IID = uuid.UUID('0f1f22eb-8da5-498b-9b84-7ce2efa14b94')

    def __init__(self, *args, **kw):
        super(IImageDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IImageDescription.get_Type

           OUTPUT
            imgType             : IImageType**'''
        return super(IImageDescription, self).get_Type()
    def put_Type(self, imgType):
        '''Method IImageDescription.put_Type

           INPUT
            imgType             : IImageType*'''
        return super(IImageDescription, self).put_Type(imgType)
    def get_Display(self):
        '''Method IImageDescription.get_Display

           OUTPUT
            imgDisplay          : IImageDisplay**'''
        return super(IImageDescription, self).get_Display()
    def put_Display(self, imgDisplay):
        '''Method IImageDescription.put_Display

           INPUT
            imgDisplay          : IImageDisplay*'''
        return super(IImageDescription, self).put_Display(imgDisplay)
    Display = property(get_Display, put_Display, None)
    Type = property(get_Type, put_Type, None)

class IImageResult(_esriCarto.IImageResult):
    _IID = uuid.UUID('be47d208-d27a-4048-a118-c9167662db74')
    def get_MimeData(self):
        '''Method IImageResult.get_MimeData

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(IImageResult, self).get_MimeData()
    def get_URL(self):
        '''Method IImageResult.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IImageResult, self).get_URL()
    def get_Height(self):
        '''Method IImageResult.get_Height

           OUTPUT
            heightPixels        : long*'''
        return super(IImageResult, self).get_Height()
    def get_Width(self):
        '''Method IImageResult.get_Width

           OUTPUT
            widthPixels         : long*'''
        return super(IImageResult, self).get_Width()
    def get_ReferenceDPI(self):
        '''Method IImageResult.get_ReferenceDPI

           OUTPUT
            Dpi                 : double*'''
        return super(IImageResult, self).get_ReferenceDPI()
    Height = property(get_Height, None, None)
    MimeData = property(get_MimeData, None, None)
    ReferenceDPI = property(get_ReferenceDPI, None, None)
    URL = property(get_URL, None, None)
    Width = property(get_Width, None, None)

class IImageResult2(_esriCarto.IImageResult2):
    _IID = uuid.UUID('0030ccf7-47b5-45e1-8376-7e96abfde9ad')
    def get_MimeData(self):
        '''Method IImageResult2.get_MimeData

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(IImageResult2, self).get_MimeData()
    def get_URL(self):
        '''Method IImageResult2.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IImageResult2, self).get_URL()
    def get_Height(self):
        '''Method IImageResult2.get_Height

           OUTPUT
            heightPixels        : long*'''
        return super(IImageResult2, self).get_Height()
    def get_Width(self):
        '''Method IImageResult2.get_Width

           OUTPUT
            widthPixels         : long*'''
        return super(IImageResult2, self).get_Width()
    def get_ReferenceDPI(self):
        '''Method IImageResult2.get_ReferenceDPI

           OUTPUT
            Dpi                 : double*'''
        return super(IImageResult2, self).get_ReferenceDPI()
    def get_MimeType(self):
        '''Method IImageResult2.get_MimeType

           OUTPUT
            pMimeType           : BSTR*'''
        return super(IImageResult2, self).get_MimeType()
    Height = property(get_Height, None, None)
    MimeData = property(get_MimeData, None, None)
    MimeType = property(get_MimeType, None, None)
    ReferenceDPI = property(get_ReferenceDPI, None, None)
    URL = property(get_URL, None, None)
    Width = property(get_Width, None, None)

class IMapImage(_esriCarto.IMapImage):
    _IID = uuid.UUID('8a77bea2-5541-4ade-93bc-d5cba56034c8')
    def get_MapExtent(self):
        '''Method IMapImage.get_MapExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IMapImage, self).get_MapExtent()
    def get_VisibleLayers(self):
        '''Method IMapImage.get_VisibleLayers

           OUTPUT
            layerIds            : ILongArray**'''
        return super(IMapImage, self).get_VisibleLayers()
    def get_MapScale(self):
        '''Method IMapImage.get_MapScale

           OUTPUT
            MapScale            : double*'''
        return super(IMapImage, self).get_MapScale()
    def get_MimeData(self):
        '''Method IImageResult.get_MimeData (from IImageResult)

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(IMapImage, self).get_MimeData()
    def get_URL(self):
        '''Method IImageResult.get_URL (from IImageResult)

           OUTPUT
            URL                 : BSTR*'''
        return super(IMapImage, self).get_URL()
    def get_Height(self):
        '''Method IImageResult.get_Height (from IImageResult)

           OUTPUT
            heightPixels        : long*'''
        return super(IMapImage, self).get_Height()
    def get_Width(self):
        '''Method IImageResult.get_Width (from IImageResult)

           OUTPUT
            widthPixels         : long*'''
        return super(IMapImage, self).get_Width()
    def get_ReferenceDPI(self):
        '''Method IImageResult.get_ReferenceDPI (from IImageResult)

           OUTPUT
            Dpi                 : double*'''
        return super(IMapImage, self).get_ReferenceDPI()
    Height = property(get_Height, None, None)
    MapExtent = property(get_MapExtent, None, None)
    MapScale = property(get_MapScale, None, None)
    MimeData = property(get_MimeData, None, None)
    ReferenceDPI = property(get_ReferenceDPI, None, None)
    URL = property(get_URL, None, None)
    VisibleLayers = property(get_VisibleLayers, None, None)
    Width = property(get_Width, None, None)

class IMapImages(_esriCarto.IMapImages):
    _IID = uuid.UUID('9685fae8-74aa-4cd0-871c-2269da8562b4')
    def get_Count(self):
        '''Method IMapImages.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapImages, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapImages.get_Element

           INPUT
            Index               : long

           OUTPUT
            mapImg              : IMapImage**'''
        return super(IMapImages, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapImages.Remove

           INPUT
            Index               : long'''
        return super(IMapImages, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapImages.RemoveAll'''
        return super(IMapImages, self).RemoveAll()
    def Add(self, mapImg):
        '''Method IMapImages.Add

           INPUT
            mapImg              : IMapImage*'''
        return super(IMapImages, self).Add(mapImg)
    def Insert(self, Index, mapImg):
        '''Method IMapImages.Insert

           INPUTS
            Index               : long
            mapImg              : IMapImage*'''
        return super(IMapImages, self).Insert(Index, mapImg)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ILayoutImage(_esriCarto.ILayoutImage):
    _IID = uuid.UUID('904ba065-af13-40f4-a661-79b7bcfb989a')
    def get_Extent(self):
        '''Method ILayoutImage.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ILayoutImage, self).get_Extent()
    def get_MapImages(self):
        '''Method ILayoutImage.get_MapImages

           OUTPUT
            MapImages           : IMapImages**'''
        return super(ILayoutImage, self).get_MapImages()
    def get_MimeData(self):
        '''Method IImageResult.get_MimeData (from IImageResult)

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ILayoutImage, self).get_MimeData()
    def get_URL(self):
        '''Method IImageResult.get_URL (from IImageResult)

           OUTPUT
            URL                 : BSTR*'''
        return super(ILayoutImage, self).get_URL()
    def get_Height(self):
        '''Method IImageResult.get_Height (from IImageResult)

           OUTPUT
            heightPixels        : long*'''
        return super(ILayoutImage, self).get_Height()
    def get_Width(self):
        '''Method IImageResult.get_Width (from IImageResult)

           OUTPUT
            widthPixels         : long*'''
        return super(ILayoutImage, self).get_Width()
    def get_ReferenceDPI(self):
        '''Method IImageResult.get_ReferenceDPI (from IImageResult)

           OUTPUT
            Dpi                 : double*'''
        return super(ILayoutImage, self).get_ReferenceDPI()
    Extent = property(get_Extent, None, None)
    Height = property(get_Height, None, None)
    MapImages = property(get_MapImages, None, None)
    MimeData = property(get_MimeData, None, None)
    ReferenceDPI = property(get_ReferenceDPI, None, None)
    URL = property(get_URL, None, None)
    Width = property(get_Width, None, None)

class ISQLSyntaxInfo(_esriCarto.ISQLSyntaxInfo):
    _IID = uuid.UUID('0a5f737c-5707-4aee-bd01-023c4fe1673c')
    def get_FunctionNames(self):
        '''Method ISQLSyntaxInfo.get_FunctionNames

           OUTPUT
            names               : IPropertySet**'''
        return super(ISQLSyntaxInfo, self).get_FunctionNames()
    def get_SpecialCharacters(self):
        '''Method ISQLSyntaxInfo.get_SpecialCharacters

           OUTPUT
            characters          : IPropertySet**'''
        return super(ISQLSyntaxInfo, self).get_SpecialCharacters()
    def get_SupportedPredicates(self):
        '''Method ISQLSyntaxInfo.get_SupportedPredicates

           OUTPUT
            predicates          : IStringArray**'''
        return super(ISQLSyntaxInfo, self).get_SupportedPredicates()
    def get_SupportedClauses(self):
        '''Method ISQLSyntaxInfo.get_SupportedClauses

           OUTPUT
            clauses             : IStringArray**'''
        return super(ISQLSyntaxInfo, self).get_SupportedClauses()
    def get_IdentifierCase(self):
        '''Method ISQLSyntaxInfo.get_IdentifierCase

           OUTPUT
            caseSensitive       : VARIANT_BOOL*'''
        return super(ISQLSyntaxInfo, self).get_IdentifierCase()
    def get_DelimitedIdentifierCase(self):
        '''Method ISQLSyntaxInfo.get_DelimitedIdentifierCase

           OUTPUT
            caseSensitive       : VARIANT_BOOL*'''
        return super(ISQLSyntaxInfo, self).get_DelimitedIdentifierCase()
    def get_StringComparisonCase(self):
        '''Method ISQLSyntaxInfo.get_StringComparisonCase

           OUTPUT
            caseSensitive       : VARIANT_BOOL*'''
        return super(ISQLSyntaxInfo, self).get_StringComparisonCase()
    def get_Keywords(self):
        '''Method ISQLSyntaxInfo.get_Keywords

           OUTPUT
            Keywords            : IStringArray**'''
        return super(ISQLSyntaxInfo, self).get_Keywords()
    def get_InvalidCharacters(self):
        '''Method ISQLSyntaxInfo.get_InvalidCharacters

           OUTPUT
            characters          : BSTR*'''
        return super(ISQLSyntaxInfo, self).get_InvalidCharacters()
    def get_InvalidStartingCharacters(self):
        '''Method ISQLSyntaxInfo.get_InvalidStartingCharacters

           OUTPUT
            characters          : BSTR*'''
        return super(ISQLSyntaxInfo, self).get_InvalidStartingCharacters()
    DelimitedIdentifierCase = property(get_DelimitedIdentifierCase, None, None)
    FunctionNames = property(get_FunctionNames, None, None)
    IdentifierCase = property(get_IdentifierCase, None, None)
    InvalidCharacters = property(get_InvalidCharacters, None, None)
    InvalidStartingCharacters = property(get_InvalidStartingCharacters, None, None)
    Keywords = property(get_Keywords, None, None)
    SpecialCharacters = property(get_SpecialCharacters, None, None)
    StringComparisonCase = property(get_StringComparisonCase, None, None)
    SupportedClauses = property(get_SupportedClauses, None, None)
    SupportedPredicates = property(get_SupportedPredicates, None, None)

class IMapLayerInfos(_esriCarto.IMapLayerInfos):
    _IID = uuid.UUID('28f77a6e-3413-4ccf-9e76-b5eebe75a02f')
    def get_Count(self):
        '''Method IMapLayerInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapLayerInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapLayerInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            MapLayerInfo        : IMapLayerInfo**'''
        return super(IMapLayerInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapLayerInfos.Remove

           INPUT
            Index               : long'''
        return super(IMapLayerInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapLayerInfos.RemoveAll'''
        return super(IMapLayerInfos, self).RemoveAll()
    def Add(self, MapLayerInfo):
        '''Method IMapLayerInfos.Add

           INPUT
            MapLayerInfo        : IMapLayerInfo*'''
        return super(IMapLayerInfos, self).Add(MapLayerInfo)
    def Insert(self, Index, MapLayerInfo):
        '''Method IMapLayerInfos.Insert

           INPUTS
            Index               : long
            MapLayerInfo        : IMapLayerInfo*'''
        return super(IMapLayerInfos, self).Insert(Index, MapLayerInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerBookmark(_esriCarto.IMapServerBookmark):
    _IID = uuid.UUID('d1e87c49-0bfb-41c3-a646-db0a99bc3eb8')
    def get_Name(self):
        '''Method IMapServerBookmark.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerBookmark, self).get_Name()
    Name = property(get_Name, None, None)

class IMapServerBookmarks(_esriCarto.IMapServerBookmarks):
    _IID = uuid.UUID('e5d450fd-7430-4fa3-830b-1fe1d99fd217')
    def get_Count(self):
        '''Method IMapServerBookmarks.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerBookmarks, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerBookmarks.get_Element

           INPUT
            Index               : long

           OUTPUT
            bookmark            : IMapServerBookmark**'''
        return super(IMapServerBookmarks, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerBookmarks.Remove

           INPUT
            Index               : long'''
        return super(IMapServerBookmarks, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerBookmarks.RemoveAll'''
        return super(IMapServerBookmarks, self).RemoveAll()
    def Add(self, bookmark):
        '''Method IMapServerBookmarks.Add

           INPUT
            bookmark            : IMapServerBookmark*'''
        return super(IMapServerBookmarks, self).Add(bookmark)
    def Insert(self, Index, bookmark):
        '''Method IMapServerBookmarks.Insert

           INPUTS
            Index               : long
            bookmark            : IMapServerBookmark*'''
        return super(IMapServerBookmarks, self).Insert(Index, bookmark)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerFindResult(_esriCarto.IMapServerFindResult):
    _IID = uuid.UUID('6ec9d9f9-5e0f-4067-9783-07b162c3b868')

    def __init__(self, *args, **kw):
        super(IMapServerFindResult, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IMapServerFindResult.get_Value

           OUTPUT
            Value               : BSTR*'''
        return super(IMapServerFindResult, self).get_Value()
    def put_Value(self, Value):
        '''Method IMapServerFindResult.put_Value

           INPUT
            Value               : BSTR'''
        return super(IMapServerFindResult, self).put_Value(Value)
    def get_LayerID(self):
        '''Method IMapServerFindResult.get_LayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapServerFindResult, self).get_LayerID()
    def put_LayerID(self, LayerID):
        '''Method IMapServerFindResult.put_LayerID

           INPUT
            LayerID             : long'''
        return super(IMapServerFindResult, self).put_LayerID(LayerID)
    def get_FeatureId(self):
        '''Method IMapServerFindResult.get_FeatureId

           OUTPUT
            FID                 : long*'''
        return super(IMapServerFindResult, self).get_FeatureId()
    def put_FeatureId(self, FID):
        '''Method IMapServerFindResult.put_FeatureId

           INPUT
            FID                 : long'''
        return super(IMapServerFindResult, self).put_FeatureId(FID)
    def get_FieldName(self):
        '''Method IMapServerFindResult.get_FieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerFindResult, self).get_FieldName()
    def put_FieldName(self, Name):
        '''Method IMapServerFindResult.put_FieldName

           INPUT
            Name                : BSTR'''
        return super(IMapServerFindResult, self).put_FieldName(Name)
    def get_FeatureShape(self):
        '''Method IMapServerFindResult.get_FeatureShape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IMapServerFindResult, self).get_FeatureShape()
    def put_FeatureShape(self, Shape):
        '''Method IMapServerFindResult.put_FeatureShape

           INPUT
            Shape               : IGeometry*'''
        return super(IMapServerFindResult, self).put_FeatureShape(Shape)
    def get_FeatureProperties(self):
        '''Method IMapServerFindResult.get_FeatureProperties

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServerFindResult, self).get_FeatureProperties()
    def put_FeatureProperties(self, props):
        '''Method IMapServerFindResult.put_FeatureProperties

           INPUT
            props               : IPropertySet*'''
        return super(IMapServerFindResult, self).put_FeatureProperties(props)
    FeatureId = property(get_FeatureId, put_FeatureId, None)
    FeatureProperties = property(get_FeatureProperties, put_FeatureProperties, None)
    FeatureShape = property(get_FeatureShape, put_FeatureShape, None)
    FieldName = property(get_FieldName, put_FieldName, None)
    LayerID = property(get_LayerID, put_LayerID, None)
    Value = property(get_Value, put_Value, None)

class IMapServerFindResults(_esriCarto.IMapServerFindResults):
    _IID = uuid.UUID('d624ad5e-ac10-42bc-8177-324105923c7e')
    def get_Count(self):
        '''Method IMapServerFindResults.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerFindResults, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerFindResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            findResult          : IMapServerFindResult**'''
        return super(IMapServerFindResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerFindResults.Remove

           INPUT
            Index               : long'''
        return super(IMapServerFindResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerFindResults.RemoveAll'''
        return super(IMapServerFindResults, self).RemoveAll()
    def Add(self, findResult):
        '''Method IMapServerFindResults.Add

           INPUT
            findResult          : IMapServerFindResult*'''
        return super(IMapServerFindResults, self).Add(findResult)
    def Insert(self, Index, findResult):
        '''Method IMapServerFindResults.Insert

           INPUTS
            Index               : long
            findResult          : IMapServerFindResult*'''
        return super(IMapServerFindResults, self).Insert(Index, findResult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerHyperlink(_esriCarto.IMapServerHyperlink):
    _IID = uuid.UUID('3a50d9de-2bef-44db-9e83-d32853eeebae')

    def __init__(self, *args, **kw):
        super(IMapServerHyperlink, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Location(self):
        '''Method IMapServerHyperlink.get_Location

           OUTPUT
            Location            : IGeometry**'''
        return super(IMapServerHyperlink, self).get_Location()
    def putref_Location(self, Location):
        '''Method IMapServerHyperlink.putref_Location

           INPUT
            Location            : IGeometry*'''
        return super(IMapServerHyperlink, self).putref_Location(Location)
    def get_URL(self):
        '''Method IMapServerHyperlink.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IMapServerHyperlink, self).get_URL()
    def put_URL(self, URL):
        '''Method IMapServerHyperlink.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IMapServerHyperlink, self).put_URL(URL)
    Location = property(get_Location, putref_Location, None)
    URL = property(get_URL, put_URL, None)

class IMapServerHyperlinks(_esriCarto.IMapServerHyperlinks):
    _IID = uuid.UUID('a2bf2fdc-3b52-42c4-b4bd-2ae828d14ab7')
    def get_Count(self):
        '''Method IMapServerHyperlinks.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerHyperlinks, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerHyperlinks.get_Element

           INPUT
            Index               : long

           OUTPUT
            Link                : IMapServerHyperlink**'''
        return super(IMapServerHyperlinks, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerHyperlinks.Remove

           INPUT
            Index               : long'''
        return super(IMapServerHyperlinks, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerHyperlinks.RemoveAll'''
        return super(IMapServerHyperlinks, self).RemoveAll()
    def Add(self, Link):
        '''Method IMapServerHyperlinks.Add

           INPUT
            Link                : IMapServerHyperlink*'''
        return super(IMapServerHyperlinks, self).Add(Link)
    def Insert(self, Index, Link):
        '''Method IMapServerHyperlinks.Insert

           INPUTS
            Index               : long
            Link                : IMapServerHyperlink*'''
        return super(IMapServerHyperlinks, self).Insert(Index, Link)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerLegendPatch(_esriCarto.IMapServerLegendPatch):
    _IID = uuid.UUID('e8807b4f-a2ed-43cb-954f-73b7ecd94422')

    def __init__(self, *args, **kw):
        super(IMapServerLegendPatch, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PatchWidth(self):
        '''Method IMapServerLegendPatch.get_PatchWidth

           OUTPUT
            widthPts            : double*'''
        return super(IMapServerLegendPatch, self).get_PatchWidth()
    def put_PatchWidth(self, widthPts):
        '''Method IMapServerLegendPatch.put_PatchWidth

           INPUT
            widthPts            : double'''
        return super(IMapServerLegendPatch, self).put_PatchWidth(widthPts)
    def get_PatchHeight(self):
        '''Method IMapServerLegendPatch.get_PatchHeight

           OUTPUT
            heightPts           : double*'''
        return super(IMapServerLegendPatch, self).get_PatchHeight()
    def put_PatchHeight(self, heightPts):
        '''Method IMapServerLegendPatch.put_PatchHeight

           INPUT
            heightPts           : double'''
        return super(IMapServerLegendPatch, self).put_PatchHeight(heightPts)
    def get_PatchResolution(self):
        '''Method IMapServerLegendPatch.get_PatchResolution

           OUTPUT
            Dpi                 : double*'''
        return super(IMapServerLegendPatch, self).get_PatchResolution()
    def put_PatchResolution(self, Dpi):
        '''Method IMapServerLegendPatch.put_PatchResolution

           INPUT
            Dpi                 : double'''
        return super(IMapServerLegendPatch, self).put_PatchResolution(Dpi)
    def get_LinePatch(self):
        '''Method IMapServerLegendPatch.get_LinePatch

           OUTPUT
            patch               : ILinePatch**'''
        return super(IMapServerLegendPatch, self).get_LinePatch()
    def put_LinePatch(self, patch):
        '''Method IMapServerLegendPatch.put_LinePatch

           INPUT
            patch               : ILinePatch*'''
        return super(IMapServerLegendPatch, self).put_LinePatch(patch)
    def get_AreaPatch(self):
        '''Method IMapServerLegendPatch.get_AreaPatch

           OUTPUT
            patch               : IAreaPatch**'''
        return super(IMapServerLegendPatch, self).get_AreaPatch()
    def put_AreaPatch(self, patch):
        '''Method IMapServerLegendPatch.put_AreaPatch

           INPUT
            patch               : IAreaPatch*'''
        return super(IMapServerLegendPatch, self).put_AreaPatch(patch)
    AreaPatch = property(get_AreaPatch, put_AreaPatch, None)
    LinePatch = property(get_LinePatch, put_LinePatch, None)
    PatchHeight = property(get_PatchHeight, put_PatchHeight, None)
    PatchResolution = property(get_PatchResolution, put_PatchResolution, None)
    PatchWidth = property(get_PatchWidth, put_PatchWidth, None)

class IMapServerLegendClass(_esriCarto.IMapServerLegendClass):
    _IID = uuid.UUID('0ab95e54-7ebf-4de8-81eb-f383f21cc9b0')
    def get_Label(self):
        '''Method IMapServerLegendClass.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(IMapServerLegendClass, self).get_Label()
    def get_Description(self):
        '''Method IMapServerLegendClass.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapServerLegendClass, self).get_Description()
    def get_SymbolImage(self):
        '''Method IMapServerLegendClass.get_SymbolImage

           OUTPUT
            Image               : IImageResult**'''
        return super(IMapServerLegendClass, self).get_SymbolImage()
    def get_TransparentColor(self):
        '''Method IMapServerLegendClass.get_TransparentColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapServerLegendClass, self).get_TransparentColor()
    Description = property(get_Description, None, None)
    Label = property(get_Label, None, None)
    SymbolImage = property(get_SymbolImage, None, None)
    TransparentColor = property(get_TransparentColor, None, None)

class IMapServerLegendClasses(_esriCarto.IMapServerLegendClasses):
    _IID = uuid.UUID('1707d0e5-60c5-494c-a283-9b7de5d9e6ec')
    def get_Count(self):
        '''Method IMapServerLegendClasses.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerLegendClasses, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerLegendClasses.get_Element

           INPUT
            Index               : long

           OUTPUT
            LegendClass         : IMapServerLegendClass**'''
        return super(IMapServerLegendClasses, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerLegendClasses.Remove

           INPUT
            Index               : long'''
        return super(IMapServerLegendClasses, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerLegendClasses.RemoveAll'''
        return super(IMapServerLegendClasses, self).RemoveAll()
    def Add(self, LegendClass):
        '''Method IMapServerLegendClasses.Add

           INPUT
            LegendClass         : IMapServerLegendClass*'''
        return super(IMapServerLegendClasses, self).Add(LegendClass)
    def Insert(self, Index, LegendClass):
        '''Method IMapServerLegendClasses.Insert

           INPUTS
            Index               : long
            LegendClass         : IMapServerLegendClass*'''
        return super(IMapServerLegendClasses, self).Insert(Index, LegendClass)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerLegendGroup(_esriCarto.IMapServerLegendGroup):
    _IID = uuid.UUID('57a9d75c-5ee5-4701-bc4c-57a71b0b4c97')
    def get_Heading(self):
        '''Method IMapServerLegendGroup.get_Heading

           OUTPUT
            Heading             : BSTR*'''
        return super(IMapServerLegendGroup, self).get_Heading()
    def get_Classes(self):
        '''Method IMapServerLegendGroup.get_Classes

           OUTPUT
            Classes             : IMapServerLegendClasses**'''
        return super(IMapServerLegendGroup, self).get_Classes()
    Classes = property(get_Classes, None, None)
    Heading = property(get_Heading, None, None)

class IMapServerLegendGroups(_esriCarto.IMapServerLegendGroups):
    _IID = uuid.UUID('6644f471-0ae8-4089-b158-48cf99a23f65')
    def get_Count(self):
        '''Method IMapServerLegendGroups.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerLegendGroups, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerLegendGroups.get_Element

           INPUT
            Index               : long

           OUTPUT
            group               : IMapServerLegendGroup**'''
        return super(IMapServerLegendGroups, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerLegendGroups.Remove

           INPUT
            Index               : long'''
        return super(IMapServerLegendGroups, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerLegendGroups.RemoveAll'''
        return super(IMapServerLegendGroups, self).RemoveAll()
    def Add(self, group):
        '''Method IMapServerLegendGroups.Add

           INPUT
            group               : IMapServerLegendGroup*'''
        return super(IMapServerLegendGroups, self).Add(group)
    def Insert(self, Index, group):
        '''Method IMapServerLegendGroups.Insert

           INPUTS
            Index               : long
            group               : IMapServerLegendGroup*'''
        return super(IMapServerLegendGroups, self).Insert(Index, group)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerLegendInfo(_esriCarto.IMapServerLegendInfo):
    _IID = uuid.UUID('d29cdeef-6467-4aa8-b435-0293579a2d79')
    def get_LayerID(self):
        '''Method IMapServerLegendInfo.get_LayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapServerLegendInfo, self).get_LayerID()
    def get_LayerName(self):
        '''Method IMapServerLegendInfo.get_LayerName

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerLegendInfo, self).get_LayerName()
    def get_LegendGroups(self):
        '''Method IMapServerLegendInfo.get_LegendGroups

           OUTPUT
            groups              : IMapServerLegendGroups**'''
        return super(IMapServerLegendInfo, self).get_LegendGroups()
    LayerID = property(get_LayerID, None, None)
    LayerName = property(get_LayerName, None, None)
    LegendGroups = property(get_LegendGroups, None, None)

class IMapServerLegendInfos(_esriCarto.IMapServerLegendInfos):
    _IID = uuid.UUID('dfcfdc82-af78-49bf-9f48-272730ae82ff')
    def get_Count(self):
        '''Method IMapServerLegendInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerLegendInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerLegendInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            info                : IMapServerLegendInfo**'''
        return super(IMapServerLegendInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerLegendInfos.Remove

           INPUT
            Index               : long'''
        return super(IMapServerLegendInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerLegendInfos.RemoveAll'''
        return super(IMapServerLegendInfos, self).RemoveAll()
    def Add(self, info):
        '''Method IMapServerLegendInfos.Add

           INPUT
            info                : IMapServerLegendInfo*'''
        return super(IMapServerLegendInfos, self).Add(info)
    def Insert(self, Index, info):
        '''Method IMapServerLegendInfos.Insert

           INPUTS
            Index               : long
            info                : IMapServerLegendInfo*'''
        return super(IMapServerLegendInfos, self).Insert(Index, info)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IImageDisplay2(_esriCarto.IImageDisplay2):
    _IID = uuid.UUID('60c16034-ca07-49f3-ac2e-0b848884119d')

    def __init__(self, *args, **kw):
        super(IImageDisplay2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Height(self):
        '''Method IImageDisplay2.get_Height

           OUTPUT
            imageHeight         : long*'''
        return super(IImageDisplay2, self).get_Height()
    def put_Height(self, imageHeight):
        '''Method IImageDisplay2.put_Height

           INPUT
            imageHeight         : long'''
        return super(IImageDisplay2, self).put_Height(imageHeight)
    def get_Width(self):
        '''Method IImageDisplay2.get_Width

           OUTPUT
            imageWidth          : long*'''
        return super(IImageDisplay2, self).get_Width()
    def put_Width(self, imageWidth):
        '''Method IImageDisplay2.put_Width

           INPUT
            imageWidth          : long'''
        return super(IImageDisplay2, self).put_Width(imageWidth)
    def get_DeviceResolution(self):
        '''Method IImageDisplay2.get_DeviceResolution

           OUTPUT
            Dpi                 : double*'''
        return super(IImageDisplay2, self).get_DeviceResolution()
    def put_DeviceResolution(self, Dpi):
        '''Method IImageDisplay2.put_DeviceResolution

           INPUT
            Dpi                 : double'''
        return super(IImageDisplay2, self).put_DeviceResolution(Dpi)
    def get_TransparentColor(self):
        '''Method IImageDisplay2.get_TransparentColor

           OUTPUT
            ppTransparentColor  : IColor**'''
        return super(IImageDisplay2, self).get_TransparentColor()
    def put_TransparentColor(self, ppTransparentColor):
        '''Method IImageDisplay2.put_TransparentColor

           INPUT
            ppTransparentColor  : IColor*'''
        return super(IImageDisplay2, self).put_TransparentColor(ppTransparentColor)
    DeviceResolution = property(get_DeviceResolution, put_DeviceResolution, None)
    Height = property(get_Height, put_Height, None)
    TransparentColor = property(get_TransparentColor, put_TransparentColor, None)
    Width = property(get_Width, put_Width, None)

class IQueryResultOptions(_esriCarto.IQueryResultOptions):
    _IID = uuid.UUID('ff6aac5f-1424-4dba-a813-b6b795a716dd')

    def __init__(self, *args, **kw):
        super(IQueryResultOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Format(self):
        '''Method IQueryResultOptions.get_Format

           OUTPUT
            Format              : esriQueryResultFormat*'''
        return super(IQueryResultOptions, self).get_Format()
    def put_Format(self, Format):
        '''Method IQueryResultOptions.put_Format

           INPUT
            Format              : esriQueryResultFormat'''
        return super(IQueryResultOptions, self).put_Format(Format)
    def get_FormatProperties(self):
        '''Method IQueryResultOptions.get_FormatProperties

           OUTPUT
            ppOptions           : IPropertySet**'''
        return super(IQueryResultOptions, self).get_FormatProperties()
    def putref_FormatProperties(self, ppOptions):
        '''Method IQueryResultOptions.putref_FormatProperties

           INPUT
            ppOptions           : IPropertySet*'''
        return super(IQueryResultOptions, self).putref_FormatProperties(ppOptions)
    def get_GeoTransformation(self):
        '''Method IQueryResultOptions.get_GeoTransformation

           OUTPUT
            geotransform        : IGeoTransformation**'''
        return super(IQueryResultOptions, self).get_GeoTransformation()
    def putref_GeoTransformation(self, geotransform):
        '''Method IQueryResultOptions.putref_GeoTransformation

           INPUT
            geotransform        : IGeoTransformation*'''
        return super(IQueryResultOptions, self).putref_GeoTransformation(geotransform)
    Format = property(get_Format, put_Format, None)
    FormatProperties = property(get_FormatProperties, putref_FormatProperties, None)
    GeoTransformation = property(get_GeoTransformation, putref_GeoTransformation, None)

class IQueryResult(_esriCarto.IQueryResult):
    _IID = uuid.UUID('70d47b05-6014-4693-b030-878b6c31fb02')
    def get_MimeData(self):
        '''Method IQueryResult.get_MimeData

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(IQueryResult, self).get_MimeData()
    def get_URL(self):
        '''Method IQueryResult.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IQueryResult, self).get_URL()
    def get_Object(self):
        '''Method IQueryResult.get_Object

           OUTPUT
            result              : IUnknown**'''
        return super(IQueryResult, self).get_Object()
    MimeData = property(get_MimeData, None, None)
    Object = property(get_Object, None, None)
    URL = property(get_URL, None, None)

class IMapTableDescription(_esriCarto.IMapTableDescription):
    _IID = uuid.UUID('dba8935b-8fa9-49bd-80a7-061d5f0295aa')

    def __init__(self, *args, **kw):
        super(IMapTableDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method IMapTableDescription.get_ID

           OUTPUT
            TableID             : long*'''
        return super(IMapTableDescription, self).get_ID()
    def put_ID(self, TableID):
        '''Method IMapTableDescription.put_ID

           INPUT
            TableID             : long'''
        return super(IMapTableDescription, self).put_ID(TableID)
    def get_DefinitionExpression(self):
        '''Method IMapTableDescription.get_DefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(IMapTableDescription, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method IMapTableDescription.put_DefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(IMapTableDescription, self).put_DefinitionExpression(Expression)
    def get_SourceID(self):
        '''Method IMapTableDescription.get_SourceID

           OUTPUT
            srcID               : BSTR*'''
        return super(IMapTableDescription, self).get_SourceID()
    def put_SourceID(self, srcID):
        '''Method IMapTableDescription.put_SourceID

           INPUT
            srcID               : BSTR'''
        return super(IMapTableDescription, self).put_SourceID(srcID)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    ID = property(get_ID, put_ID, None)
    SourceID = property(get_SourceID, put_SourceID, None)

class IRelateInfo(_esriCarto.IRelateInfo):
    _IID = uuid.UUID('d44cfdbd-e724-4ef9-92ae-873c8acd18c6')
    def get_Name(self):
        '''Method IRelateInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IRelateInfo, self).get_Name()
    def get_RelationshipID(self):
        '''Method IRelateInfo.get_RelationshipID

           OUTPUT
            RelationshipID      : long*'''
        return super(IRelateInfo, self).get_RelationshipID()
    def get_RelatedTableID(self):
        '''Method IRelateInfo.get_RelatedTableID

           OUTPUT
            RelatedTableID      : long*'''
        return super(IRelateInfo, self).get_RelatedTableID()
    Name = property(get_Name, None, None)
    RelatedTableID = property(get_RelatedTableID, None, None)
    RelationshipID = property(get_RelationshipID, None, None)

class IRelateInfos(_esriCarto.IRelateInfos):
    _IID = uuid.UUID('cb5e939f-395f-482c-a703-acd070551f80')
    def get_Count(self):
        '''Method IRelateInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IRelateInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IRelateInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            RelateInfo          : IRelateInfo**'''
        return super(IRelateInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IRelateInfos.Remove

           INPUT
            Index               : long'''
        return super(IRelateInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IRelateInfos.RemoveAll'''
        return super(IRelateInfos, self).RemoveAll()
    def Add(self, RelateInfo):
        '''Method IRelateInfos.Add

           INPUT
            RelateInfo          : IRelateInfo*'''
        return super(IRelateInfos, self).Add(RelateInfo)
    def Insert(self, Index, RelateInfo):
        '''Method IRelateInfos.Insert

           INPUTS
            Index               : long
            RelateInfo          : IRelateInfo*'''
        return super(IRelateInfos, self).Insert(Index, RelateInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapTableInfo(_esriCarto.IMapTableInfo):
    _IID = uuid.UUID('08ab1be0-d464-4882-a721-d72fbb36903a')
    def get_ID(self):
        '''Method IMapTableInfo.get_ID

           OUTPUT
            TableID             : long*'''
        return super(IMapTableInfo, self).get_ID()
    def get_Name(self):
        '''Method IMapTableInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapTableInfo, self).get_Name()
    def get_Fields(self):
        '''Method IMapTableInfo.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMapTableInfo, self).get_Fields()
    def get_RelateInfos(self):
        '''Method IMapTableInfo.get_RelateInfos

           OUTPUT
            RelateInfo          : IRelateInfos**'''
        return super(IMapTableInfo, self).get_RelateInfos()
    def get_HasAttachments(self):
        '''Method IMapTableInfo.get_HasAttachments

           OUTPUT
            HasAttachments      : VARIANT_BOOL*'''
        return super(IMapTableInfo, self).get_HasAttachments()
    def get_HTMLPopupType(self):
        '''Method IMapTableInfo.get_HTMLPopupType

           OUTPUT
            Type                : esriServerHTMLPopupType*'''
        return super(IMapTableInfo, self).get_HTMLPopupType()
    def get_DisplayField(self):
        '''Method IMapTableInfo.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapTableInfo, self).get_DisplayField()
    def get_OIDFieldName(self):
        '''Method IMapTableInfo.get_OIDFieldName

           OUTPUT
            OIDFieldName        : BSTR*'''
        return super(IMapTableInfo, self).get_OIDFieldName()
    def get_HasSubtype(self):
        '''Method IMapTableInfo.get_HasSubtype

           OUTPUT
            HasSubtype          : VARIANT_BOOL*'''
        return super(IMapTableInfo, self).get_HasSubtype()
    DisplayField = property(get_DisplayField, None, None)
    Fields = property(get_Fields, None, None)
    HTMLPopupType = property(get_HTMLPopupType, None, None)
    HasAttachments = property(get_HasAttachments, None, None)
    HasSubtype = property(get_HasSubtype, None, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)
    RelateInfos = property(get_RelateInfos, None, None)

class IStandaloneTableInfo(_esriCarto.IStandaloneTableInfo):
    _IID = uuid.UUID('1095230c-75d1-459c-bd67-5c2c3f3b01b7')
    def get_Description(self):
        '''Method IStandaloneTableInfo.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IStandaloneTableInfo, self).get_Description()
    def get_ID(self):
        '''Method IMapTableInfo.get_ID (from IMapTableInfo)

           OUTPUT
            TableID             : long*'''
        return super(IStandaloneTableInfo, self).get_ID()
    def get_Name(self):
        '''Method IMapTableInfo.get_Name (from IMapTableInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IStandaloneTableInfo, self).get_Name()
    def get_Fields(self):
        '''Method IMapTableInfo.get_Fields (from IMapTableInfo)

           OUTPUT
            Fields              : IFields**'''
        return super(IStandaloneTableInfo, self).get_Fields()
    def get_RelateInfos(self):
        '''Method IMapTableInfo.get_RelateInfos (from IMapTableInfo)

           OUTPUT
            RelateInfo          : IRelateInfos**'''
        return super(IStandaloneTableInfo, self).get_RelateInfos()
    def get_HasAttachments(self):
        '''Method IMapTableInfo.get_HasAttachments (from IMapTableInfo)

           OUTPUT
            HasAttachments      : VARIANT_BOOL*'''
        return super(IStandaloneTableInfo, self).get_HasAttachments()
    def get_HTMLPopupType(self):
        '''Method IMapTableInfo.get_HTMLPopupType (from IMapTableInfo)

           OUTPUT
            Type                : esriServerHTMLPopupType*'''
        return super(IStandaloneTableInfo, self).get_HTMLPopupType()
    def get_DisplayField(self):
        '''Method IMapTableInfo.get_DisplayField (from IMapTableInfo)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IStandaloneTableInfo, self).get_DisplayField()
    def get_OIDFieldName(self):
        '''Method IMapTableInfo.get_OIDFieldName (from IMapTableInfo)

           OUTPUT
            OIDFieldName        : BSTR*'''
        return super(IStandaloneTableInfo, self).get_OIDFieldName()
    def get_HasSubtype(self):
        '''Method IMapTableInfo.get_HasSubtype (from IMapTableInfo)

           OUTPUT
            HasSubtype          : VARIANT_BOOL*'''
        return super(IStandaloneTableInfo, self).get_HasSubtype()
    Description = property(get_Description, None, None)
    DisplayField = property(get_DisplayField, None, None)
    Fields = property(get_Fields, None, None)
    HTMLPopupType = property(get_HTMLPopupType, None, None)
    HasAttachments = property(get_HasAttachments, None, None)
    HasSubtype = property(get_HasSubtype, None, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)
    RelateInfos = property(get_RelateInfos, None, None)

class IRelateDescription(_esriCarto.IRelateDescription):
    _IID = uuid.UUID('badfd2ed-2776-4b21-879a-b99b2ea582a6')

    def __init__(self, *args, **kw):
        super(IRelateDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RelationshipID(self):
        '''Method IRelateDescription.get_RelationshipID

           OUTPUT
            RelationshipID      : long*'''
        return super(IRelateDescription, self).get_RelationshipID()
    def put_RelationshipID(self, RelationshipID):
        '''Method IRelateDescription.put_RelationshipID

           INPUT
            RelationshipID      : long'''
        return super(IRelateDescription, self).put_RelationshipID(RelationshipID)
    def get_RelatedTableDefinitionExpression(self):
        '''Method IRelateDescription.get_RelatedTableDefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(IRelateDescription, self).get_RelatedTableDefinitionExpression()
    def put_RelatedTableDefinitionExpression(self, Expression):
        '''Method IRelateDescription.put_RelatedTableDefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(IRelateDescription, self).put_RelatedTableDefinitionExpression(Expression)
    def get_RelatedTableFields(self):
        '''Method IRelateDescription.get_RelatedTableFields

           OUTPUT
            tablefields         : BSTR*'''
        return super(IRelateDescription, self).get_RelatedTableFields()
    def put_RelatedTableFields(self, tablefields):
        '''Method IRelateDescription.put_RelatedTableFields

           INPUT
            tablefields         : BSTR'''
        return super(IRelateDescription, self).put_RelatedTableFields(tablefields)
    def putref_OutputSpatialReference(self, SpatialReference):
        '''Method IRelateDescription.putref_OutputSpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IRelateDescription, self).putref_OutputSpatialReference(SpatialReference)
    def get_OutputSpatialReference(self):
        '''Method IRelateDescription.get_OutputSpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IRelateDescription, self).get_OutputSpatialReference()
    def get_GeoTransformation(self):
        '''Method IRelateDescription.get_GeoTransformation

           OUTPUT
            geotransform        : IGeoTransformation**'''
        return super(IRelateDescription, self).get_GeoTransformation()
    def putref_GeoTransformation(self, geotransform):
        '''Method IRelateDescription.putref_GeoTransformation

           INPUT
            geotransform        : IGeoTransformation*'''
        return super(IRelateDescription, self).putref_GeoTransformation(geotransform)
    def get_ResultFormat(self):
        '''Method IRelateDescription.get_ResultFormat

           OUTPUT
            ResultFormat        : esriRelateResultFormat*'''
        return super(IRelateDescription, self).get_ResultFormat()
    def put_ResultFormat(self, ResultFormat):
        '''Method IRelateDescription.put_ResultFormat

           INPUT
            ResultFormat        : esriRelateResultFormat'''
        return super(IRelateDescription, self).put_ResultFormat(ResultFormat)
    def put_IncludeGeometry(self, IncludeGeometry):
        '''Method IRelateDescription.put_IncludeGeometry

           INPUT
            IncludeGeometry     : VARIANT_BOOL'''
        return super(IRelateDescription, self).put_IncludeGeometry(IncludeGeometry)
    def get_IncludeGeometry(self):
        '''Method IRelateDescription.get_IncludeGeometry

           OUTPUT
            IncludeGeometry     : VARIANT_BOOL*'''
        return super(IRelateDescription, self).get_IncludeGeometry()
    def putref_GeometryResultOptions(self, geometryOptions):
        '''Method IRelateDescription.putref_GeometryResultOptions

           INPUT
            geometryOptions     : IGeometryResultOptions*'''
        return super(IRelateDescription, self).putref_GeometryResultOptions(geometryOptions)
    def get_GeometryResultOptions(self):
        '''Method IRelateDescription.get_GeometryResultOptions

           OUTPUT
            geometryOptions     : IGeometryResultOptions**'''
        return super(IRelateDescription, self).get_GeometryResultOptions()
    def putref_OutputTimeReference(self, TimeReference):
        '''Method IRelateDescription.putref_OutputTimeReference

           INPUT
            TimeReference       : ITimeReference*'''
        return super(IRelateDescription, self).putref_OutputTimeReference(TimeReference)
    def get_OutputTimeReference(self):
        '''Method IRelateDescription.get_OutputTimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IRelateDescription, self).get_OutputTimeReference()
    GeoTransformation = property(get_GeoTransformation, putref_GeoTransformation, None)
    GeometryResultOptions = property(get_GeometryResultOptions, putref_GeometryResultOptions, None)
    IncludeGeometry = property(get_IncludeGeometry, put_IncludeGeometry, None)
    OutputSpatialReference = property(get_OutputSpatialReference, putref_OutputSpatialReference, None)
    OutputTimeReference = property(get_OutputTimeReference, putref_OutputTimeReference, None)
    RelatedTableDefinitionExpression = property(get_RelatedTableDefinitionExpression, put_RelatedTableDefinitionExpression, None)
    RelatedTableFields = property(get_RelatedTableFields, put_RelatedTableFields, None)
    RelationshipID = property(get_RelationshipID, put_RelationshipID, None)
    ResultFormat = property(get_ResultFormat, put_ResultFormat, None)

class IFieldDomainInfo(_esriCarto.IFieldDomainInfo):
    _IID = uuid.UUID('004cf931-41ea-49a7-8865-98e03e2fc1de')
    def get_FieldName(self):
        '''Method IFieldDomainInfo.get_FieldName

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IFieldDomainInfo, self).get_FieldName()
    def get_Domain(self):
        '''Method IFieldDomainInfo.get_Domain

           OUTPUT
            ppDomain            : IDomain**'''
        return super(IFieldDomainInfo, self).get_Domain()
    def get_IsInherited(self):
        '''Method IFieldDomainInfo.get_IsInherited

           OUTPUT
            pIsInherited        : VARIANT_BOOL*'''
        return super(IFieldDomainInfo, self).get_IsInherited()
    Domain = property(get_Domain, None, None)
    FieldName = property(get_FieldName, None, None)
    IsInherited = property(get_IsInherited, None, None)

class IFieldDomainInfos(_esriCarto.IFieldDomainInfos):
    _IID = uuid.UUID('97605df9-6cfc-466e-8133-320c9cc086f4')
    def get_Count(self):
        '''Method IFieldDomainInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IFieldDomainInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IFieldDomainInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppFieldDomainInfo   : IFieldDomainInfo**'''
        return super(IFieldDomainInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IFieldDomainInfos.Remove

           INPUT
            Index               : long'''
        return super(IFieldDomainInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IFieldDomainInfos.RemoveAll'''
        return super(IFieldDomainInfos, self).RemoveAll()
    def Add(self, pFieldDomainInfo):
        '''Method IFieldDomainInfos.Add

           INPUT
            pFieldDomainInfo    : IFieldDomainInfo*'''
        return super(IFieldDomainInfos, self).Add(pFieldDomainInfo)
    def Insert(self, Index, pFieldDomainInfo):
        '''Method IFieldDomainInfos.Insert

           INPUTS
            Index               : long
            pFieldDomainInfo    : IFieldDomainInfo*'''
        return super(IFieldDomainInfos, self).Insert(Index, pFieldDomainInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ISubtypeInfo(_esriCarto.ISubtypeInfo):
    _IID = uuid.UUID('82df7153-956d-46c4-9a0a-27d175e21697')
    def get_SubtypeCode(self):
        '''Method ISubtypeInfo.get_SubtypeCode

           OUTPUT
            pSubtypeCode        : long*'''
        return super(ISubtypeInfo, self).get_SubtypeCode()
    def get_SubtypeName(self):
        '''Method ISubtypeInfo.get_SubtypeName

           OUTPUT
            pSubtypeName        : BSTR*'''
        return super(ISubtypeInfo, self).get_SubtypeName()
    def get_FieldDomainInfos(self):
        '''Method ISubtypeInfo.get_FieldDomainInfos

           OUTPUT
            ppFieldDomainInfos  : IFieldDomainInfos**'''
        return super(ISubtypeInfo, self).get_FieldDomainInfos()
    FieldDomainInfos = property(get_FieldDomainInfos, None, None)
    SubtypeCode = property(get_SubtypeCode, None, None)
    SubtypeName = property(get_SubtypeName, None, None)

class ISubtypeInfos(_esriCarto.ISubtypeInfos):
    _IID = uuid.UUID('0b8fda6e-2ff1-45f6-b2f1-b4e9f4be86b8')
    def get_Count(self):
        '''Method ISubtypeInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(ISubtypeInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method ISubtypeInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppSubtypeInfo       : ISubtypeInfo**'''
        return super(ISubtypeInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ISubtypeInfos.Remove

           INPUT
            Index               : long'''
        return super(ISubtypeInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method ISubtypeInfos.RemoveAll'''
        return super(ISubtypeInfos, self).RemoveAll()
    def Add(self, pSubtypeInfo):
        '''Method ISubtypeInfos.Add

           INPUT
            pSubtypeInfo        : ISubtypeInfo*'''
        return super(ISubtypeInfos, self).Add(pSubtypeInfo)
    def Insert(self, Index, pSubtypeInfo):
        '''Method ISubtypeInfos.Insert

           INPUTS
            Index               : long
            pSubtypeInfo        : ISubtypeInfo*'''
        return super(ISubtypeInfos, self).Insert(Index, pSubtypeInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IImageResults(_esriCarto.IImageResults):
    _IID = uuid.UUID('b84bb608-d4fc-48f8-bf31-21c7de07f411')
    def get_Count(self):
        '''Method IImageResults.get_Count

           OUTPUT
            Count               : long*'''
        return super(IImageResults, self).get_Count()
    def get_Element(self, Index):
        '''Method IImageResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppImageResult       : IImageResult2**'''
        return super(IImageResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IImageResults.Remove

           INPUT
            Index               : long'''
        return super(IImageResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method IImageResults.RemoveAll'''
        return super(IImageResults, self).RemoveAll()
    def Add(self, pImageResult):
        '''Method IImageResults.Add

           INPUT
            pImageResult        : IImageResult2*'''
        return super(IImageResults, self).Add(pImageResult)
    def Insert(self, Index, pImageResult):
        '''Method IImageResults.Insert

           INPUTS
            Index               : long
            pImageResult        : IImageResult2*'''
        return super(IImageResults, self).Insert(Index, pImageResult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapLayerInfo3(_esriCarto.IMapLayerInfo3):
    _IID = uuid.UUID('2072143f-8b50-49a6-957c-9fc55138459d')
    def get_HasLayerDrawingDescription(self):
        '''Method IMapLayerInfo3.get_HasLayerDrawingDescription

           OUTPUT
            pHasLayerDrawingDescription: VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_HasLayerDrawingDescription()
    def get_FieldAliases(self):
        '''Method IMapLayerInfo3.get_FieldAliases

           OUTPUT
            FieldAliases        : IStringArray**'''
        return super(IMapLayerInfo3, self).get_FieldAliases()
    def get_CopyrightText(self):
        '''Method IMapLayerInfo3.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IMapLayerInfo3, self).get_CopyrightText()
    def get_ID(self):
        '''Method IMapLayerInfo3.get_ID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo3, self).get_ID()
    def get_Name(self):
        '''Method IMapLayerInfo3.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapLayerInfo3, self).get_Name()
    def get_Description(self):
        '''Method IMapLayerInfo3.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo3, self).get_Description()
    def get_Type(self):
        '''Method IMapLayerInfo3.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IMapLayerInfo3, self).get_Type()
    def get_SourceDescription(self):
        '''Method IMapLayerInfo3.get_SourceDescription

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo3, self).get_SourceDescription()
    def get_HasLabels(self):
        '''Method IMapLayerInfo3.get_HasLabels

           OUTPUT
            HasLabels           : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_HasLabels()
    def get_CanSelect(self):
        '''Method IMapLayerInfo3.get_CanSelect

           OUTPUT
            CanSelect           : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_CanSelect()
    def get_CanScaleSymbols(self):
        '''Method IMapLayerInfo3.get_CanScaleSymbols

           OUTPUT
            canScale            : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_CanScaleSymbols()
    def get_CanIdentify(self):
        '''Method IMapLayerInfo3.get_CanIdentify

           OUTPUT
            canId               : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_CanIdentify()
    def get_CanFind(self):
        '''Method IMapLayerInfo3.get_CanFind

           OUTPUT
            CanFind             : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_CanFind()
    def get_IsFeatureLayer(self):
        '''Method IMapLayerInfo3.get_IsFeatureLayer

           OUTPUT
            IsFeatureLayer      : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_IsFeatureLayer()
    def get_MinScale(self):
        '''Method IMapLayerInfo3.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo3, self).get_MinScale()
    def get_MaxScale(self):
        '''Method IMapLayerInfo3.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo3, self).get_MaxScale()
    def get_Extent(self):
        '''Method IMapLayerInfo3.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapLayerInfo3, self).get_Extent()
    def get_HasHyperlinks(self):
        '''Method IMapLayerInfo3.get_HasHyperlinks

           OUTPUT
            hasLinks            : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_HasHyperlinks()
    def get_HasAttributes(self):
        '''Method IMapLayerInfo3.get_HasAttributes

           OUTPUT
            hasAttr             : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_HasAttributes()
    def get_Fields(self):
        '''Method IMapLayerInfo3.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMapLayerInfo3, self).get_Fields()
    def get_DisplayField(self):
        '''Method IMapLayerInfo3.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapLayerInfo3, self).get_DisplayField()
    def get_IsComposite(self):
        '''Method IMapLayerInfo3.get_IsComposite

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IMapLayerInfo3, self).get_IsComposite()
    def get_SubLayers(self):
        '''Method IMapLayerInfo3.get_SubLayers

           OUTPUT
            layerIds            : ILongArray**'''
        return super(IMapLayerInfo3, self).get_SubLayers()
    def get_ParentLayerID(self):
        '''Method IMapLayerInfo3.get_ParentLayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo3, self).get_ParentLayerID()
    CanFind = property(get_CanFind, None, None)
    CanIdentify = property(get_CanIdentify, None, None)
    CanScaleSymbols = property(get_CanScaleSymbols, None, None)
    CanSelect = property(get_CanSelect, None, None)
    CopyrightText = property(get_CopyrightText, None, None)
    Description = property(get_Description, None, None)
    DisplayField = property(get_DisplayField, None, None)
    Extent = property(get_Extent, None, None)
    FieldAliases = property(get_FieldAliases, None, None)
    Fields = property(get_Fields, None, None)
    HasAttributes = property(get_HasAttributes, None, None)
    HasHyperlinks = property(get_HasHyperlinks, None, None)
    HasLabels = property(get_HasLabels, None, None)
    HasLayerDrawingDescription = property(get_HasLayerDrawingDescription, None, None)
    ID = property(get_ID, None, None)
    IsComposite = property(get_IsComposite, None, None)
    IsFeatureLayer = property(get_IsFeatureLayer, None, None)
    MaxScale = property(get_MaxScale, None, None)
    MinScale = property(get_MinScale, None, None)
    Name = property(get_Name, None, None)
    ParentLayerID = property(get_ParentLayerID, None, None)
    SourceDescription = property(get_SourceDescription, None, None)
    SubLayers = property(get_SubLayers, None, None)
    Type = property(get_Type, None, None)

class ILabelClassDescription(_esriCarto.ILabelClassDescription):
    _IID = uuid.UUID('63882c74-6b36-497b-9e27-efd67226e583')

    def __init__(self, *args, **kw):
        super(ILabelClassDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LabelPlacementDescription(self):
        '''Method ILabelClassDescription.get_LabelPlacementDescription

           OUTPUT
            ppLabelPlacementDescription: ILabelPlacementDescription**'''
        return super(ILabelClassDescription, self).get_LabelPlacementDescription()
    def put_LabelPlacementDescription(self, ppLabelPlacementDescription):
        '''Method ILabelClassDescription.put_LabelPlacementDescription

           INPUT
            ppLabelPlacementDescription: ILabelPlacementDescription*'''
        return super(ILabelClassDescription, self).put_LabelPlacementDescription(ppLabelPlacementDescription)
    def get_LabelExpression(self):
        '''Method ILabelClassDescription.get_LabelExpression

           OUTPUT
            LabelExpression     : BSTR*'''
        return super(ILabelClassDescription, self).get_LabelExpression()
    def put_LabelExpression(self, LabelExpression):
        '''Method ILabelClassDescription.put_LabelExpression

           INPUT
            LabelExpression     : BSTR'''
        return super(ILabelClassDescription, self).put_LabelExpression(LabelExpression)
    def get_UseCodedValue(self):
        '''Method ILabelClassDescription.get_UseCodedValue

           OUTPUT
            UseCodedValue       : VARIANT_BOOL*'''
        return super(ILabelClassDescription, self).get_UseCodedValue()
    def put_UseCodedValue(self, UseCodedValue):
        '''Method ILabelClassDescription.put_UseCodedValue

           INPUT
            UseCodedValue       : VARIANT_BOOL'''
        return super(ILabelClassDescription, self).put_UseCodedValue(UseCodedValue)
    def get_Symbol(self):
        '''Method ILabelClassDescription.get_Symbol

           OUTPUT
            ppSymbol            : ITextSymbol**'''
        return super(ILabelClassDescription, self).get_Symbol()
    def put_Symbol(self, ppSymbol):
        '''Method ILabelClassDescription.put_Symbol

           INPUT
            ppSymbol            : ITextSymbol*'''
        return super(ILabelClassDescription, self).put_Symbol(ppSymbol)
    def get_MaximumScale(self):
        '''Method ILabelClassDescription.get_MaximumScale

           OUTPUT
            pMaximumScale       : double*'''
        return super(ILabelClassDescription, self).get_MaximumScale()
    def put_MaximumScale(self, pMaximumScale):
        '''Method ILabelClassDescription.put_MaximumScale

           INPUT
            pMaximumScale       : double'''
        return super(ILabelClassDescription, self).put_MaximumScale(pMaximumScale)
    def get_MinimumScale(self):
        '''Method ILabelClassDescription.get_MinimumScale

           OUTPUT
            pMinimumScale       : double*'''
        return super(ILabelClassDescription, self).get_MinimumScale()
    def put_MinimumScale(self, pMinimumScale):
        '''Method ILabelClassDescription.put_MinimumScale

           INPUT
            pMinimumScale       : double'''
        return super(ILabelClassDescription, self).put_MinimumScale(pMinimumScale)
    LabelExpression = property(get_LabelExpression, put_LabelExpression, None)
    LabelPlacementDescription = property(get_LabelPlacementDescription, put_LabelPlacementDescription, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Symbol = property(get_Symbol, put_Symbol, None)
    UseCodedValue = property(get_UseCodedValue, put_UseCodedValue, None)

class ILabelClassDescriptions(_esriCarto.ILabelClassDescriptions):
    _IID = uuid.UUID('5f177b9e-0d5e-4502-ae3d-a393895dc1f5')
    def get_Count(self):
        '''Method ILabelClassDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(ILabelClassDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method ILabelClassDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppLabelClassDescription: ILabelClassDescription**'''
        return super(ILabelClassDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ILabelClassDescriptions.Remove

           INPUT
            Index               : long'''
        return super(ILabelClassDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method ILabelClassDescriptions.RemoveAll'''
        return super(ILabelClassDescriptions, self).RemoveAll()
    def Add(self, pLabelClassDescription):
        '''Method ILabelClassDescriptions.Add

           INPUT
            pLabelClassDescription: ILabelClassDescription*'''
        return super(ILabelClassDescriptions, self).Add(pLabelClassDescription)
    def Insert(self, Index, pLabelClassDescription):
        '''Method ILabelClassDescriptions.Insert

           INPUTS
            Index               : long
            pLabelClassDescription: ILabelClassDescription*'''
        return super(ILabelClassDescriptions, self).Insert(Index, pLabelClassDescription)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ILabelingDescription(_esriCarto.ILabelingDescription):
    _IID = uuid.UUID('af0d718f-52b0-4916-aad6-c88e43b3e1f1')

    def __init__(self, *args, **kw):
        super(ILabelingDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LabelClassDescriptions(self):
        '''Method ILabelingDescription.get_LabelClassDescriptions

           OUTPUT
            ppLabelClassDescriptions: ILabelClassDescriptions**'''
        return super(ILabelingDescription, self).get_LabelClassDescriptions()
    def put_LabelClassDescriptions(self, ppLabelClassDescriptions):
        '''Method ILabelingDescription.put_LabelClassDescriptions

           INPUT
            ppLabelClassDescriptions: ILabelClassDescriptions*'''
        return super(ILabelingDescription, self).put_LabelClassDescriptions(ppLabelClassDescriptions)
    LabelClassDescriptions = property(get_LabelClassDescriptions, put_LabelClassDescriptions, None)

class ILabelClassDescription2(_esriCarto.ILabelClassDescription2):
    _IID = uuid.UUID('c9559563-104d-4895-9dbc-e3ef873c50e7')

    def __init__(self, *args, **kw):
        super(ILabelClassDescription2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExpressionType(self):
        '''Method ILabelClassDescription2.get_ExpressionType

           OUTPUT
            ExpressionType      : esriLabelExpressionType*'''
        return super(ILabelClassDescription2, self).get_ExpressionType()
    def put_ExpressionType(self, ExpressionType):
        '''Method ILabelClassDescription2.put_ExpressionType

           INPUT
            ExpressionType      : esriLabelExpressionType'''
        return super(ILabelClassDescription2, self).put_ExpressionType(ExpressionType)
    def get_WhereClause(self):
        '''Method ILabelClassDescription2.get_WhereClause

           OUTPUT
            WhereClause         : BSTR*'''
        return super(ILabelClassDescription2, self).get_WhereClause()
    def put_WhereClause(self, WhereClause):
        '''Method ILabelClassDescription2.put_WhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(ILabelClassDescription2, self).put_WhereClause(WhereClause)
    def get_LabelPlacementDescription(self):
        '''Method ILabelClassDescription2.get_LabelPlacementDescription

           OUTPUT
            ppLabelPlacementDescription: ILabelPlacementDescription**'''
        return super(ILabelClassDescription2, self).get_LabelPlacementDescription()
    def put_LabelPlacementDescription(self, ppLabelPlacementDescription):
        '''Method ILabelClassDescription2.put_LabelPlacementDescription

           INPUT
            ppLabelPlacementDescription: ILabelPlacementDescription*'''
        return super(ILabelClassDescription2, self).put_LabelPlacementDescription(ppLabelPlacementDescription)
    def get_LabelExpression(self):
        '''Method ILabelClassDescription2.get_LabelExpression

           OUTPUT
            LabelExpression     : BSTR*'''
        return super(ILabelClassDescription2, self).get_LabelExpression()
    def put_LabelExpression(self, LabelExpression):
        '''Method ILabelClassDescription2.put_LabelExpression

           INPUT
            LabelExpression     : BSTR'''
        return super(ILabelClassDescription2, self).put_LabelExpression(LabelExpression)
    def get_UseCodedValue(self):
        '''Method ILabelClassDescription2.get_UseCodedValue

           OUTPUT
            UseCodedValue       : VARIANT_BOOL*'''
        return super(ILabelClassDescription2, self).get_UseCodedValue()
    def put_UseCodedValue(self, UseCodedValue):
        '''Method ILabelClassDescription2.put_UseCodedValue

           INPUT
            UseCodedValue       : VARIANT_BOOL'''
        return super(ILabelClassDescription2, self).put_UseCodedValue(UseCodedValue)
    def get_Symbol(self):
        '''Method ILabelClassDescription2.get_Symbol

           OUTPUT
            ppSymbol            : ITextSymbol**'''
        return super(ILabelClassDescription2, self).get_Symbol()
    def put_Symbol(self, ppSymbol):
        '''Method ILabelClassDescription2.put_Symbol

           INPUT
            ppSymbol            : ITextSymbol*'''
        return super(ILabelClassDescription2, self).put_Symbol(ppSymbol)
    def get_MaximumScale(self):
        '''Method ILabelClassDescription2.get_MaximumScale

           OUTPUT
            pMaximumScale       : double*'''
        return super(ILabelClassDescription2, self).get_MaximumScale()
    def put_MaximumScale(self, pMaximumScale):
        '''Method ILabelClassDescription2.put_MaximumScale

           INPUT
            pMaximumScale       : double'''
        return super(ILabelClassDescription2, self).put_MaximumScale(pMaximumScale)
    def get_MinimumScale(self):
        '''Method ILabelClassDescription2.get_MinimumScale

           OUTPUT
            pMinimumScale       : double*'''
        return super(ILabelClassDescription2, self).get_MinimumScale()
    def put_MinimumScale(self, pMinimumScale):
        '''Method ILabelClassDescription2.put_MinimumScale

           INPUT
            pMinimumScale       : double'''
        return super(ILabelClassDescription2, self).put_MinimumScale(pMinimumScale)
    ExpressionType = property(get_ExpressionType, put_ExpressionType, None)
    LabelExpression = property(get_LabelExpression, put_LabelExpression, None)
    LabelPlacementDescription = property(get_LabelPlacementDescription, put_LabelPlacementDescription, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Symbol = property(get_Symbol, put_Symbol, None)
    UseCodedValue = property(get_UseCodedValue, put_UseCodedValue, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IPointLabelPlacementDescription(_esriCarto.IPointLabelPlacementDescription):
    _IID = uuid.UUID('194e3db7-6494-4965-a8a6-fa68156885c7')

    def __init__(self, *args, **kw):
        super(IPointLabelPlacementDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IPointLabelPlacementDescription.get_Type

           OUTPUT
            PlacementType       : esriServerPointLabelPlacementType*'''
        return super(IPointLabelPlacementDescription, self).get_Type()
    def put_Type(self, PlacementType):
        '''Method IPointLabelPlacementDescription.put_Type

           INPUT
            PlacementType       : esriServerPointLabelPlacementType'''
        return super(IPointLabelPlacementDescription, self).put_Type(PlacementType)
    Type = property(get_Type, put_Type, None)

class ILineLabelPlacementDescription(_esriCarto.ILineLabelPlacementDescription):
    _IID = uuid.UUID('8ab8c4fc-1b4c-48f8-a03a-de1f7e85ea30')

    def __init__(self, *args, **kw):
        super(ILineLabelPlacementDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method ILineLabelPlacementDescription.get_Type

           OUTPUT
            PlacementType       : esriServerLineLabelPlacementType*'''
        return super(ILineLabelPlacementDescription, self).get_Type()
    def put_Type(self, PlacementType):
        '''Method ILineLabelPlacementDescription.put_Type

           INPUT
            PlacementType       : esriServerLineLabelPlacementType'''
        return super(ILineLabelPlacementDescription, self).put_Type(PlacementType)
    Type = property(get_Type, put_Type, None)

class IPolygonLabelPlacementDescription(_esriCarto.IPolygonLabelPlacementDescription):
    _IID = uuid.UUID('2dc28f2e-9b84-4816-a9fc-5f9d3bd76836')

    def __init__(self, *args, **kw):
        super(IPolygonLabelPlacementDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IPolygonLabelPlacementDescription.get_Type

           OUTPUT
            PlacementType       : esriServerPolygonLabelPlacementType*'''
        return super(IPolygonLabelPlacementDescription, self).get_Type()
    def put_Type(self, PlacementType):
        '''Method IPolygonLabelPlacementDescription.put_Type

           INPUT
            PlacementType       : esriServerPolygonLabelPlacementType'''
        return super(IPolygonLabelPlacementDescription, self).put_Type(PlacementType)
    Type = property(get_Type, put_Type, None)

class ILayerDrawingDescriptions(_esriCarto.ILayerDrawingDescriptions):
    _IID = uuid.UUID('a7ef0d8e-fbef-4ee5-9378-65333b68d069')
    def get_Count(self):
        '''Method ILayerDrawingDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(ILayerDrawingDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method ILayerDrawingDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppLayerDrawingDescription: ILayerDrawingDescription**'''
        return super(ILayerDrawingDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ILayerDrawingDescriptions.Remove

           INPUT
            Index               : long'''
        return super(ILayerDrawingDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method ILayerDrawingDescriptions.RemoveAll'''
        return super(ILayerDrawingDescriptions, self).RemoveAll()
    def Add(self, pLayerDrawingDescription):
        '''Method ILayerDrawingDescriptions.Add

           INPUT
            pLayerDrawingDescription: ILayerDrawingDescription*'''
        return super(ILayerDrawingDescriptions, self).Add(pLayerDrawingDescription)
    def Insert(self, Index, pLayerDrawingDescription):
        '''Method ILayerDrawingDescriptions.Insert

           INPUTS
            Index               : long
            pLayerDrawingDescription: ILayerDrawingDescription*'''
        return super(ILayerDrawingDescriptions, self).Insert(Index, pLayerDrawingDescription)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapTableSubtypeInfo(_esriCarto.IMapTableSubtypeInfo):
    _IID = uuid.UUID('bd18550b-adfb-4fd4-ba80-c26814b5f3fe')
    def get_TableID(self):
        '''Method IMapTableSubtypeInfo.get_TableID

           OUTPUT
            TableID             : long*'''
        return super(IMapTableSubtypeInfo, self).get_TableID()
    def get_SubtypeFieldName(self):
        '''Method IMapTableSubtypeInfo.get_SubtypeFieldName

           OUTPUT
            SubtypeFieldName    : BSTR*'''
        return super(IMapTableSubtypeInfo, self).get_SubtypeFieldName()
    def get_SubtypeInfos(self):
        '''Method IMapTableSubtypeInfo.get_SubtypeInfos

           OUTPUT
            ppSubtypeInfos      : ISubtypeInfos**'''
        return super(IMapTableSubtypeInfo, self).get_SubtypeInfos()
    SubtypeFieldName = property(get_SubtypeFieldName, None, None)
    SubtypeInfos = property(get_SubtypeInfos, None, None)
    TableID = property(get_TableID, None, None)

class IMapTableSubtypeInfos(_esriCarto.IMapTableSubtypeInfos):
    _IID = uuid.UUID('711d6190-4843-421e-96c0-e855e59850a1')
    def get_Count(self):
        '''Method IMapTableSubtypeInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapTableSubtypeInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapTableSubtypeInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppMapTableSubtypeInfo: IMapTableSubtypeInfo**'''
        return super(IMapTableSubtypeInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapTableSubtypeInfos.Remove

           INPUT
            Index               : long'''
        return super(IMapTableSubtypeInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapTableSubtypeInfos.RemoveAll'''
        return super(IMapTableSubtypeInfos, self).RemoveAll()
    def Add(self, pMapTableSubtypeInfo):
        '''Method IMapTableSubtypeInfos.Add

           INPUT
            pMapTableSubtypeInfo: IMapTableSubtypeInfo*'''
        return super(IMapTableSubtypeInfos, self).Add(pMapTableSubtypeInfo)
    def Insert(self, Index, pMapTableSubtypeInfo):
        '''Method IMapTableSubtypeInfos.Insert

           INPUTS
            Index               : long
            pMapTableSubtypeInfo: IMapTableSubtypeInfo*'''
        return super(IMapTableSubtypeInfos, self).Insert(Index, pMapTableSubtypeInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IServerSymbolOutputOptions(_esriCarto.IServerSymbolOutputOptions):
    _IID = uuid.UUID('77d42e66-aba1-410f-ad90-da4f2b5d4a24')

    def __init__(self, *args, **kw):
        super(IServerSymbolOutputOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PictureOutputType(self):
        '''Method IServerSymbolOutputOptions.get_PictureOutputType

           OUTPUT
            PictureOutputType   : esriServerPictureOutputType*'''
        return super(IServerSymbolOutputOptions, self).get_PictureOutputType()
    def put_PictureOutputType(self, PictureOutputType):
        '''Method IServerSymbolOutputOptions.put_PictureOutputType

           INPUT
            PictureOutputType   : esriServerPictureOutputType'''
        return super(IServerSymbolOutputOptions, self).put_PictureOutputType(PictureOutputType)
    def get_ConvertLabelExpressions(self):
        '''Method IServerSymbolOutputOptions.get_ConvertLabelExpressions

           OUTPUT
            Convert             : VARIANT_BOOL*'''
        return super(IServerSymbolOutputOptions, self).get_ConvertLabelExpressions()
    def put_ConvertLabelExpressions(self, Convert):
        '''Method IServerSymbolOutputOptions.put_ConvertLabelExpressions

           INPUT
            Convert             : VARIANT_BOOL'''
        return super(IServerSymbolOutputOptions, self).put_ConvertLabelExpressions(Convert)
    ConvertLabelExpressions = property(get_ConvertLabelExpressions, put_ConvertLabelExpressions, None)
    PictureOutputType = property(get_PictureOutputType, put_PictureOutputType, None)

class IMapLayerInfo4(_esriCarto.IMapLayerInfo4):
    _IID = uuid.UUID('1a140b8f-78b7-4c21-b5fb-5f22f3b56837')
    def get_HasLiveData(self):
        '''Method IMapLayerInfo4.get_HasLiveData

           OUTPUT
            HasLiveData         : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_HasLiveData()
    def get_CanModifyDrawingDescription(self):
        '''Method IMapLayerInfo4.get_CanModifyDrawingDescription

           OUTPUT
            pCanModifyDrawingDescription: VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_CanModifyDrawingDescription()
    def get_HasLayerDrawingDescription(self):
        '''Method IMapLayerInfo4.get_HasLayerDrawingDescription

           OUTPUT
            pHasLayerDrawingDescription: VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_HasLayerDrawingDescription()
    def get_FieldAliases(self):
        '''Method IMapLayerInfo4.get_FieldAliases

           OUTPUT
            FieldAliases        : IStringArray**'''
        return super(IMapLayerInfo4, self).get_FieldAliases()
    def get_CopyrightText(self):
        '''Method IMapLayerInfo4.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IMapLayerInfo4, self).get_CopyrightText()
    def get_ID(self):
        '''Method IMapLayerInfo4.get_ID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo4, self).get_ID()
    def get_Name(self):
        '''Method IMapLayerInfo4.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapLayerInfo4, self).get_Name()
    def get_Description(self):
        '''Method IMapLayerInfo4.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo4, self).get_Description()
    def get_Type(self):
        '''Method IMapLayerInfo4.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IMapLayerInfo4, self).get_Type()
    def get_SourceDescription(self):
        '''Method IMapLayerInfo4.get_SourceDescription

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo4, self).get_SourceDescription()
    def get_HasLabels(self):
        '''Method IMapLayerInfo4.get_HasLabels

           OUTPUT
            HasLabels           : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_HasLabels()
    def get_CanSelect(self):
        '''Method IMapLayerInfo4.get_CanSelect

           OUTPUT
            CanSelect           : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_CanSelect()
    def get_CanScaleSymbols(self):
        '''Method IMapLayerInfo4.get_CanScaleSymbols

           OUTPUT
            canScale            : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_CanScaleSymbols()
    def get_CanIdentify(self):
        '''Method IMapLayerInfo4.get_CanIdentify

           OUTPUT
            canId               : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_CanIdentify()
    def get_CanFind(self):
        '''Method IMapLayerInfo4.get_CanFind

           OUTPUT
            CanFind             : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_CanFind()
    def get_IsFeatureLayer(self):
        '''Method IMapLayerInfo4.get_IsFeatureLayer

           OUTPUT
            IsFeatureLayer      : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_IsFeatureLayer()
    def get_MinScale(self):
        '''Method IMapLayerInfo4.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo4, self).get_MinScale()
    def get_MaxScale(self):
        '''Method IMapLayerInfo4.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo4, self).get_MaxScale()
    def get_Extent(self):
        '''Method IMapLayerInfo4.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapLayerInfo4, self).get_Extent()
    def get_HasHyperlinks(self):
        '''Method IMapLayerInfo4.get_HasHyperlinks

           OUTPUT
            hasLinks            : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_HasHyperlinks()
    def get_HasAttributes(self):
        '''Method IMapLayerInfo4.get_HasAttributes

           OUTPUT
            hasAttr             : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_HasAttributes()
    def get_Fields(self):
        '''Method IMapLayerInfo4.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMapLayerInfo4, self).get_Fields()
    def get_DisplayField(self):
        '''Method IMapLayerInfo4.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapLayerInfo4, self).get_DisplayField()
    def get_IsComposite(self):
        '''Method IMapLayerInfo4.get_IsComposite

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IMapLayerInfo4, self).get_IsComposite()
    def get_SubLayers(self):
        '''Method IMapLayerInfo4.get_SubLayers

           OUTPUT
            layerIds            : ILongArray**'''
        return super(IMapLayerInfo4, self).get_SubLayers()
    def get_ParentLayerID(self):
        '''Method IMapLayerInfo4.get_ParentLayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo4, self).get_ParentLayerID()
    CanFind = property(get_CanFind, None, None)
    CanIdentify = property(get_CanIdentify, None, None)
    CanModifyDrawingDescription = property(get_CanModifyDrawingDescription, None, None)
    CanScaleSymbols = property(get_CanScaleSymbols, None, None)
    CanSelect = property(get_CanSelect, None, None)
    CopyrightText = property(get_CopyrightText, None, None)
    Description = property(get_Description, None, None)
    DisplayField = property(get_DisplayField, None, None)
    Extent = property(get_Extent, None, None)
    FieldAliases = property(get_FieldAliases, None, None)
    Fields = property(get_Fields, None, None)
    HasAttributes = property(get_HasAttributes, None, None)
    HasHyperlinks = property(get_HasHyperlinks, None, None)
    HasLabels = property(get_HasLabels, None, None)
    HasLayerDrawingDescription = property(get_HasLayerDrawingDescription, None, None)
    HasLiveData = property(get_HasLiveData, None, None)
    ID = property(get_ID, None, None)
    IsComposite = property(get_IsComposite, None, None)
    IsFeatureLayer = property(get_IsFeatureLayer, None, None)
    MaxScale = property(get_MaxScale, None, None)
    MinScale = property(get_MinScale, None, None)
    Name = property(get_Name, None, None)
    ParentLayerID = property(get_ParentLayerID, None, None)
    SourceDescription = property(get_SourceDescription, None, None)
    SubLayers = property(get_SubLayers, None, None)
    Type = property(get_Type, None, None)

class IDynamicLayerDescription(_esriCarto.IDynamicLayerDescription):
    _IID = uuid.UUID('95a91b6b-83ab-444a-b2a8-83c455bc97d4')

    def __init__(self, *args, **kw):
        super(IDynamicLayerDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Source(self):
        '''Method IDynamicLayerDescription.get_Source

           OUTPUT
            ppMapServerSourceDescription: IMapServerSourceDescription**'''
        return super(IDynamicLayerDescription, self).get_Source()
    def put_Source(self, ppMapServerSourceDescription):
        '''Method IDynamicLayerDescription.put_Source

           INPUT
            ppMapServerSourceDescription: IMapServerSourceDescription*'''
        return super(IDynamicLayerDescription, self).put_Source(ppMapServerSourceDescription)
    def putref_DrawingDescription(self, ppLayerDrawingDescription):
        '''Method IDynamicLayerDescription.putref_DrawingDescription

           INPUT
            ppLayerDrawingDescription: ILayerDrawingDescription*'''
        return super(IDynamicLayerDescription, self).putref_DrawingDescription(ppLayerDrawingDescription)
    def get_DrawingDescription(self):
        '''Method IDynamicLayerDescription.get_DrawingDescription

           OUTPUT
            ppLayerDrawingDescription: ILayerDrawingDescription**'''
        return super(IDynamicLayerDescription, self).get_DrawingDescription()
    DrawingDescription = property(get_DrawingDescription, putref_DrawingDescription, None)
    Source = property(get_Source, put_Source, None)

class IDataSourceDescription(_esriCarto.IDataSourceDescription):
    _IID = uuid.UUID('ea59d2bd-8682-42ee-8ebe-3d428dcfec5a')

    def __init__(self, *args, **kw):
        super(IDataSourceDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_WorkspaceID(self):
        '''Method IDataSourceDescription.get_WorkspaceID

           OUTPUT
            pWorkspaceID        : BSTR*'''
        return super(IDataSourceDescription, self).get_WorkspaceID()
    def put_WorkspaceID(self, pWorkspaceID):
        '''Method IDataSourceDescription.put_WorkspaceID

           INPUT
            pWorkspaceID        : BSTR'''
        return super(IDataSourceDescription, self).put_WorkspaceID(pWorkspaceID)
    WorkspaceID = property(get_WorkspaceID, put_WorkspaceID, None)

class ITableDataSourceDescription(_esriCarto.ITableDataSourceDescription):
    _IID = uuid.UUID('85529e0d-c428-4e8c-94c5-048f9acdac72')

    def __init__(self, *args, **kw):
        super(ITableDataSourceDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TableName(self):
        '''Method ITableDataSourceDescription.get_TableName

           OUTPUT
            pTableName          : BSTR*'''
        return super(ITableDataSourceDescription, self).get_TableName()
    def put_TableName(self, pTableName):
        '''Method ITableDataSourceDescription.put_TableName

           INPUT
            pTableName          : BSTR'''
        return super(ITableDataSourceDescription, self).put_TableName(pTableName)
    def get_VersionName(self):
        '''Method ITableDataSourceDescription.get_VersionName

           OUTPUT
            pVersionName        : BSTR*'''
        return super(ITableDataSourceDescription, self).get_VersionName()
    def put_VersionName(self, pVersionName):
        '''Method ITableDataSourceDescription.put_VersionName

           INPUT
            pVersionName        : BSTR'''
        return super(ITableDataSourceDescription, self).put_VersionName(pVersionName)
    TableName = property(get_TableName, put_TableName, None)
    VersionName = property(get_VersionName, put_VersionName, None)

class IQueryTableDataSourceDescription(_esriCarto.IQueryTableDataSourceDescription):
    _IID = uuid.UUID('69774a30-a462-4b58-8365-9a265c23dd02')

    def __init__(self, *args, **kw):
        super(IQueryTableDataSourceDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Query(self):
        '''Method IQueryTableDataSourceDescription.get_Query

           OUTPUT
            pQuery              : BSTR*'''
        return super(IQueryTableDataSourceDescription, self).get_Query()
    def put_Query(self, pQuery):
        '''Method IQueryTableDataSourceDescription.put_Query

           INPUT
            pQuery              : BSTR'''
        return super(IQueryTableDataSourceDescription, self).put_Query(pQuery)
    def get_OIDFields(self):
        '''Method IQueryTableDataSourceDescription.get_OIDFields

           OUTPUT
            pOIDFields          : BSTR*'''
        return super(IQueryTableDataSourceDescription, self).get_OIDFields()
    def put_OIDFields(self, pOIDFields):
        '''Method IQueryTableDataSourceDescription.put_OIDFields

           INPUT
            pOIDFields          : BSTR'''
        return super(IQueryTableDataSourceDescription, self).put_OIDFields(pOIDFields)
    def get_GeometryType(self):
        '''Method IQueryTableDataSourceDescription.get_GeometryType

           OUTPUT
            pGeometryType       : esriGeometryType*'''
        return super(IQueryTableDataSourceDescription, self).get_GeometryType()
    def put_GeometryType(self, pGeometryType):
        '''Method IQueryTableDataSourceDescription.put_GeometryType

           INPUT
            pGeometryType       : esriGeometryType'''
        return super(IQueryTableDataSourceDescription, self).put_GeometryType(pGeometryType)
    def get_SpatialReference(self):
        '''Method IQueryTableDataSourceDescription.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IQueryTableDataSourceDescription, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IQueryTableDataSourceDescription.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IQueryTableDataSourceDescription, self).putref_SpatialReference(SpatialReference)
    GeometryType = property(get_GeometryType, put_GeometryType, None)
    OIDFields = property(get_OIDFields, put_OIDFields, None)
    Query = property(get_Query, put_Query, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IStatisticDescription(_esriCarto.IStatisticDescription):
    _IID = uuid.UUID('126232df-c5fa-486b-8424-7efd1262b2b1')

    def __init__(self, *args, **kw):
        super(IStatisticDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StatisticFieldName(self):
        '''Method IStatisticDescription.get_StatisticFieldName

           OUTPUT
            statFieldName       : BSTR*'''
        return super(IStatisticDescription, self).get_StatisticFieldName()
    def put_StatisticFieldName(self, statFieldName):
        '''Method IStatisticDescription.put_StatisticFieldName

           INPUT
            statFieldName       : BSTR'''
        return super(IStatisticDescription, self).put_StatisticFieldName(statFieldName)
    def get_StatisticType(self):
        '''Method IStatisticDescription.get_StatisticType

           OUTPUT
            statType            : esriDataStatType*'''
        return super(IStatisticDescription, self).get_StatisticType()
    def put_StatisticType(self, statType):
        '''Method IStatisticDescription.put_StatisticType

           INPUT
            statType            : esriDataStatType'''
        return super(IStatisticDescription, self).put_StatisticType(statType)
    def get_ResultFieldName(self):
        '''Method IStatisticDescription.get_ResultFieldName

           OUTPUT
            ResultFieldName     : BSTR*'''
        return super(IStatisticDescription, self).get_ResultFieldName()
    def put_ResultFieldName(self, ResultFieldName):
        '''Method IStatisticDescription.put_ResultFieldName

           INPUT
            ResultFieldName     : BSTR'''
        return super(IStatisticDescription, self).put_ResultFieldName(ResultFieldName)
    ResultFieldName = property(get_ResultFieldName, put_ResultFieldName, None)
    StatisticFieldName = property(get_StatisticFieldName, put_StatisticFieldName, None)
    StatisticType = property(get_StatisticType, put_StatisticType, None)

class IStatisticDescriptions(_esriCarto.IStatisticDescriptions):
    _IID = uuid.UUID('a74e5f38-b5da-44da-b558-28aa4e3dc06b')
    def get_Count(self):
        '''Method IStatisticDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(IStatisticDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method IStatisticDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppStatisticDescription: IStatisticDescription**'''
        return super(IStatisticDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IStatisticDescriptions.Remove

           INPUT
            Index               : long'''
        return super(IStatisticDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method IStatisticDescriptions.RemoveAll'''
        return super(IStatisticDescriptions, self).RemoveAll()
    def Add(self, pStatisticDescription):
        '''Method IStatisticDescriptions.Add

           INPUT
            pStatisticDescription: IStatisticDescription*'''
        return super(IStatisticDescriptions, self).Add(pStatisticDescription)
    def Insert(self, Index, pStatisticDescription):
        '''Method IStatisticDescriptions.Insert

           INPUTS
            Index               : long
            pStatisticDescription: IStatisticDescription*'''
        return super(IStatisticDescriptions, self).Insert(Index, pStatisticDescription)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IStatisticsRequest(_esriCarto.IStatisticsRequest):
    _IID = uuid.UUID('e43d2f45-4a4c-4f90-babf-f5084386b48a')

    def __init__(self, *args, **kw):
        super(IStatisticsRequest, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StatisticDescriptions(self):
        '''Method IStatisticsRequest.get_StatisticDescriptions

           OUTPUT
            ppStats             : IStatisticDescriptions**'''
        return super(IStatisticsRequest, self).get_StatisticDescriptions()
    def putref_StatisticDescriptions(self, ppStats):
        '''Method IStatisticsRequest.putref_StatisticDescriptions

           INPUT
            ppStats             : IStatisticDescriptions*'''
        return super(IStatisticsRequest, self).putref_StatisticDescriptions(ppStats)
    def get_OrderByFields(self):
        '''Method IStatisticsRequest.get_OrderByFields

           OUTPUT
            OrderByFields       : BSTR*'''
        return super(IStatisticsRequest, self).get_OrderByFields()
    def put_OrderByFields(self, OrderByFields):
        '''Method IStatisticsRequest.put_OrderByFields

           INPUT
            OrderByFields       : BSTR'''
        return super(IStatisticsRequest, self).put_OrderByFields(OrderByFields)
    def get_GroupByFields(self):
        '''Method IStatisticsRequest.get_GroupByFields

           OUTPUT
            GroupByFields       : BSTR*'''
        return super(IStatisticsRequest, self).get_GroupByFields()
    def put_GroupByFields(self, GroupByFields):
        '''Method IStatisticsRequest.put_GroupByFields

           INPUT
            GroupByFields       : BSTR'''
        return super(IStatisticsRequest, self).put_GroupByFields(GroupByFields)
    GroupByFields = property(get_GroupByFields, put_GroupByFields, None)
    OrderByFields = property(get_OrderByFields, put_OrderByFields, None)
    StatisticDescriptions = property(get_StatisticDescriptions, putref_StatisticDescriptions, None)

class IDataClassificationDef(_esriCarto.IDataClassificationDef):
    _IID = uuid.UUID('3d2d6292-0780-450d-bae3-90ba2e016f11')

    def __init__(self, *args, **kw):
        super(IDataClassificationDef, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BaseSymbol(self):
        '''Method IDataClassificationDef.get_BaseSymbol

           OUTPUT
            pBaseSymbol         : ISymbol**'''
        return super(IDataClassificationDef, self).get_BaseSymbol()
    def putref_BaseSymbol(self, pBaseSymbol):
        '''Method IDataClassificationDef.putref_BaseSymbol

           INPUT
            pBaseSymbol         : ISymbol*'''
        return super(IDataClassificationDef, self).putref_BaseSymbol(pBaseSymbol)
    def get_ColorRamp(self):
        '''Method IDataClassificationDef.get_ColorRamp

           OUTPUT
            pColorRamp          : IColorRamp**'''
        return super(IDataClassificationDef, self).get_ColorRamp()
    def putref_ColorRamp(self, pColorRamp):
        '''Method IDataClassificationDef.putref_ColorRamp

           INPUT
            pColorRamp          : IColorRamp*'''
        return super(IDataClassificationDef, self).putref_ColorRamp(pColorRamp)
    BaseSymbol = property(get_BaseSymbol, putref_BaseSymbol, None)
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)

class IUniqueValuesDef(_esriCarto.IUniqueValuesDef):
    _IID = uuid.UUID('0b0c0ebf-d4b1-4c58-ad55-4679843701d3')

    def __init__(self, *args, **kw):
        super(IUniqueValuesDef, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Fields(self):
        '''Method IUniqueValuesDef.get_Fields

           OUTPUT
            ppFields            : IStringArray**'''
        return super(IUniqueValuesDef, self).get_Fields()
    def put_Fields(self, ppFields):
        '''Method IUniqueValuesDef.put_Fields

           INPUT
            ppFields            : IStringArray*'''
        return super(IUniqueValuesDef, self).put_Fields(ppFields)
    def get_FieldDelimiter(self):
        '''Method IUniqueValuesDef.get_FieldDelimiter

           OUTPUT
            delimiter           : BSTR*'''
        return super(IUniqueValuesDef, self).get_FieldDelimiter()
    def put_FieldDelimiter(self, delimiter):
        '''Method IUniqueValuesDef.put_FieldDelimiter

           INPUT
            delimiter           : BSTR'''
        return super(IUniqueValuesDef, self).put_FieldDelimiter(delimiter)
    def get_BaseSymbol(self):
        '''Method IDataClassificationDef.get_BaseSymbol (from IDataClassificationDef)

           OUTPUT
            pBaseSymbol         : ISymbol**'''
        return super(IUniqueValuesDef, self).get_BaseSymbol()
    def putref_BaseSymbol(self, pBaseSymbol):
        '''Method IDataClassificationDef.putref_BaseSymbol (from IDataClassificationDef)

           INPUT
            pBaseSymbol         : ISymbol*'''
        return super(IUniqueValuesDef, self).putref_BaseSymbol(pBaseSymbol)
    def get_ColorRamp(self):
        '''Method IDataClassificationDef.get_ColorRamp (from IDataClassificationDef)

           OUTPUT
            pColorRamp          : IColorRamp**'''
        return super(IUniqueValuesDef, self).get_ColorRamp()
    def putref_ColorRamp(self, pColorRamp):
        '''Method IDataClassificationDef.putref_ColorRamp (from IDataClassificationDef)

           INPUT
            pColorRamp          : IColorRamp*'''
        return super(IUniqueValuesDef, self).putref_ColorRamp(pColorRamp)
    BaseSymbol = property(get_BaseSymbol, putref_BaseSymbol, None)
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)
    FieldDelimiter = property(get_FieldDelimiter, put_FieldDelimiter, None)
    Fields = property(get_Fields, put_Fields, None)

class IClassBreaksDef(_esriCarto.IClassBreaksDef):
    _IID = uuid.UUID('84603a2c-01d3-47ca-8457-4f0557ed5582')

    def __init__(self, *args, **kw):
        super(IClassBreaksDef, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassificationField(self):
        '''Method IClassBreaksDef.get_ClassificationField

           OUTPUT
            ClassificationField : BSTR*'''
        return super(IClassBreaksDef, self).get_ClassificationField()
    def put_ClassificationField(self, ClassificationField):
        '''Method IClassBreaksDef.put_ClassificationField

           INPUT
            ClassificationField : BSTR'''
        return super(IClassBreaksDef, self).put_ClassificationField(ClassificationField)
    def get_BreakCount(self):
        '''Method IClassBreaksDef.get_BreakCount

           OUTPUT
            BreakCount          : long*'''
        return super(IClassBreaksDef, self).get_BreakCount()
    def put_BreakCount(self, BreakCount):
        '''Method IClassBreaksDef.put_BreakCount

           INPUT
            BreakCount          : long'''
        return super(IClassBreaksDef, self).put_BreakCount(BreakCount)
    def get_ClassificationMethod(self):
        '''Method IClassBreaksDef.get_ClassificationMethod

           OUTPUT
            classifyMethod      : esriClassifyMethod*'''
        return super(IClassBreaksDef, self).get_ClassificationMethod()
    def put_ClassificationMethod(self, classifyMethod):
        '''Method IClassBreaksDef.put_ClassificationMethod

           INPUT
            classifyMethod      : esriClassifyMethod'''
        return super(IClassBreaksDef, self).put_ClassificationMethod(classifyMethod)
    def get_NormalizationField(self):
        '''Method IClassBreaksDef.get_NormalizationField

           OUTPUT
            NormalizationField  : BSTR*'''
        return super(IClassBreaksDef, self).get_NormalizationField()
    def put_NormalizationField(self, NormalizationField):
        '''Method IClassBreaksDef.put_NormalizationField

           INPUT
            NormalizationField  : BSTR'''
        return super(IClassBreaksDef, self).put_NormalizationField(NormalizationField)
    def get_NormalizationType(self):
        '''Method IClassBreaksDef.get_NormalizationType

           OUTPUT
            NormalizationType   : esriDataNormalization*'''
        return super(IClassBreaksDef, self).get_NormalizationType()
    def put_NormalizationType(self, NormalizationType):
        '''Method IClassBreaksDef.put_NormalizationType

           INPUT
            NormalizationType   : esriDataNormalization'''
        return super(IClassBreaksDef, self).put_NormalizationType(NormalizationType)
    def get_StandardDeviationInterval(self):
        '''Method IClassBreaksDef.get_StandardDeviationInterval

           OUTPUT
            BreakCount          : double*'''
        return super(IClassBreaksDef, self).get_StandardDeviationInterval()
    def put_StandardDeviationInterval(self, BreakCount):
        '''Method IClassBreaksDef.put_StandardDeviationInterval

           INPUT
            BreakCount          : double'''
        return super(IClassBreaksDef, self).put_StandardDeviationInterval(BreakCount)
    def get_BaseSymbol(self):
        '''Method IDataClassificationDef.get_BaseSymbol (from IDataClassificationDef)

           OUTPUT
            pBaseSymbol         : ISymbol**'''
        return super(IClassBreaksDef, self).get_BaseSymbol()
    def putref_BaseSymbol(self, pBaseSymbol):
        '''Method IDataClassificationDef.putref_BaseSymbol (from IDataClassificationDef)

           INPUT
            pBaseSymbol         : ISymbol*'''
        return super(IClassBreaksDef, self).putref_BaseSymbol(pBaseSymbol)
    def get_ColorRamp(self):
        '''Method IDataClassificationDef.get_ColorRamp (from IDataClassificationDef)

           OUTPUT
            pColorRamp          : IColorRamp**'''
        return super(IClassBreaksDef, self).get_ColorRamp()
    def putref_ColorRamp(self, pColorRamp):
        '''Method IDataClassificationDef.putref_ColorRamp (from IDataClassificationDef)

           INPUT
            pColorRamp          : IColorRamp*'''
        return super(IClassBreaksDef, self).putref_ColorRamp(pColorRamp)
    BaseSymbol = property(get_BaseSymbol, putref_BaseSymbol, None)
    BreakCount = property(get_BreakCount, put_BreakCount, None)
    ClassificationField = property(get_ClassificationField, put_ClassificationField, None)
    ClassificationMethod = property(get_ClassificationMethod, put_ClassificationMethod, None)
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)
    NormalizationField = property(get_NormalizationField, put_NormalizationField, None)
    NormalizationType = property(get_NormalizationType, put_NormalizationType, None)
    StandardDeviationInterval = property(get_StandardDeviationInterval, put_StandardDeviationInterval, None)

class IJoinTableSourceDescription(_esriCarto.IJoinTableSourceDescription):
    _IID = uuid.UUID('5aa7d4d5-8f05-4a61-bcba-cec06afd4118')

    def __init__(self, *args, **kw):
        super(IJoinTableSourceDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LeftSourceDescription(self):
        '''Method IJoinTableSourceDescription.get_LeftSourceDescription

           OUTPUT
            ppLeftSourceDescription: IMapServerSourceDescription**'''
        return super(IJoinTableSourceDescription, self).get_LeftSourceDescription()
    def put_LeftSourceDescription(self, ppLeftSourceDescription):
        '''Method IJoinTableSourceDescription.put_LeftSourceDescription

           INPUT
            ppLeftSourceDescription: IMapServerSourceDescription*'''
        return super(IJoinTableSourceDescription, self).put_LeftSourceDescription(ppLeftSourceDescription)
    def get_RightSourceDescription(self):
        '''Method IJoinTableSourceDescription.get_RightSourceDescription

           OUTPUT
            ppRightSourceDescription: IMapServerSourceDescription**'''
        return super(IJoinTableSourceDescription, self).get_RightSourceDescription()
    def put_RightSourceDescription(self, ppRightSourceDescription):
        '''Method IJoinTableSourceDescription.put_RightSourceDescription

           INPUT
            ppRightSourceDescription: IMapServerSourceDescription*'''
        return super(IJoinTableSourceDescription, self).put_RightSourceDescription(ppRightSourceDescription)
    def get_LeftTableKey(self):
        '''Method IJoinTableSourceDescription.get_LeftTableKey

           OUTPUT
            pLeftTableKey       : BSTR*'''
        return super(IJoinTableSourceDescription, self).get_LeftTableKey()
    def put_LeftTableKey(self, pLeftTableKey):
        '''Method IJoinTableSourceDescription.put_LeftTableKey

           INPUT
            pLeftTableKey       : BSTR'''
        return super(IJoinTableSourceDescription, self).put_LeftTableKey(pLeftTableKey)
    def get_RightTableKey(self):
        '''Method IJoinTableSourceDescription.get_RightTableKey

           OUTPUT
            pRightTableKey      : BSTR*'''
        return super(IJoinTableSourceDescription, self).get_RightTableKey()
    def put_RightTableKey(self, pRightTableKey):
        '''Method IJoinTableSourceDescription.put_RightTableKey

           INPUT
            pRightTableKey      : BSTR'''
        return super(IJoinTableSourceDescription, self).put_RightTableKey(pRightTableKey)
    def get_JoinType(self):
        '''Method IJoinTableSourceDescription.get_JoinType

           OUTPUT
            pJoinType           : esriJoinType*'''
        return super(IJoinTableSourceDescription, self).get_JoinType()
    def put_JoinType(self, pJoinType):
        '''Method IJoinTableSourceDescription.put_JoinType

           INPUT
            pJoinType           : esriJoinType'''
        return super(IJoinTableSourceDescription, self).put_JoinType(pJoinType)
    JoinType = property(get_JoinType, put_JoinType, None)
    LeftSourceDescription = property(get_LeftSourceDescription, put_LeftSourceDescription, None)
    LeftTableKey = property(get_LeftTableKey, put_LeftTableKey, None)
    RightSourceDescription = property(get_RightSourceDescription, put_RightSourceDescription, None)
    RightTableKey = property(get_RightTableKey, put_RightTableKey, None)

class IMapTableSourceDescription(_esriCarto.IMapTableSourceDescription):
    _IID = uuid.UUID('ad819691-952f-404d-a8b7-3f14bfcd3200')

    def __init__(self, *args, **kw):
        super(IMapTableSourceDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MapTableID(self):
        '''Method IMapTableSourceDescription.get_MapTableID

           OUTPUT
            MapTableID          : long*'''
        return super(IMapTableSourceDescription, self).get_MapTableID()
    def put_MapTableID(self, MapTableID):
        '''Method IMapTableSourceDescription.put_MapTableID

           INPUT
            MapTableID          : long'''
        return super(IMapTableSourceDescription, self).put_MapTableID(MapTableID)
    def get_VersionName(self):
        '''Method IMapTableSourceDescription.get_VersionName

           OUTPUT
            pVersionName        : BSTR*'''
        return super(IMapTableSourceDescription, self).get_VersionName()
    def put_VersionName(self, pVersionName):
        '''Method IMapTableSourceDescription.put_VersionName

           INPUT
            pVersionName        : BSTR'''
        return super(IMapTableSourceDescription, self).put_VersionName(pVersionName)
    MapTableID = property(get_MapTableID, put_MapTableID, None)
    VersionName = property(get_VersionName, put_VersionName, None)

class IMapLayerInfo2(_esriCarto.IMapLayerInfo2):
    _IID = uuid.UUID('1e51de45-d298-45d1-8c11-c55a977b1493')
    def get_FieldAliases(self):
        '''Method IMapLayerInfo2.get_FieldAliases

           OUTPUT
            FieldAliases        : IStringArray**'''
        return super(IMapLayerInfo2, self).get_FieldAliases()
    def get_CopyrightText(self):
        '''Method IMapLayerInfo2.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IMapLayerInfo2, self).get_CopyrightText()
    def get_ID(self):
        '''Method IMapLayerInfo2.get_ID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo2, self).get_ID()
    def get_Name(self):
        '''Method IMapLayerInfo2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapLayerInfo2, self).get_Name()
    def get_Description(self):
        '''Method IMapLayerInfo2.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo2, self).get_Description()
    def get_Type(self):
        '''Method IMapLayerInfo2.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IMapLayerInfo2, self).get_Type()
    def get_SourceDescription(self):
        '''Method IMapLayerInfo2.get_SourceDescription

           OUTPUT
            desc                : BSTR*'''
        return super(IMapLayerInfo2, self).get_SourceDescription()
    def get_HasLabels(self):
        '''Method IMapLayerInfo2.get_HasLabels

           OUTPUT
            HasLabels           : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_HasLabels()
    def get_CanSelect(self):
        '''Method IMapLayerInfo2.get_CanSelect

           OUTPUT
            CanSelect           : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_CanSelect()
    def get_CanScaleSymbols(self):
        '''Method IMapLayerInfo2.get_CanScaleSymbols

           OUTPUT
            canScale            : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_CanScaleSymbols()
    def get_CanIdentify(self):
        '''Method IMapLayerInfo2.get_CanIdentify

           OUTPUT
            canId               : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_CanIdentify()
    def get_CanFind(self):
        '''Method IMapLayerInfo2.get_CanFind

           OUTPUT
            CanFind             : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_CanFind()
    def get_IsFeatureLayer(self):
        '''Method IMapLayerInfo2.get_IsFeatureLayer

           OUTPUT
            IsFeatureLayer      : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_IsFeatureLayer()
    def get_MinScale(self):
        '''Method IMapLayerInfo2.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo2, self).get_MinScale()
    def get_MaxScale(self):
        '''Method IMapLayerInfo2.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IMapLayerInfo2, self).get_MaxScale()
    def get_Extent(self):
        '''Method IMapLayerInfo2.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapLayerInfo2, self).get_Extent()
    def get_HasHyperlinks(self):
        '''Method IMapLayerInfo2.get_HasHyperlinks

           OUTPUT
            hasLinks            : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_HasHyperlinks()
    def get_HasAttributes(self):
        '''Method IMapLayerInfo2.get_HasAttributes

           OUTPUT
            hasAttr             : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_HasAttributes()
    def get_Fields(self):
        '''Method IMapLayerInfo2.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMapLayerInfo2, self).get_Fields()
    def get_DisplayField(self):
        '''Method IMapLayerInfo2.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapLayerInfo2, self).get_DisplayField()
    def get_IsComposite(self):
        '''Method IMapLayerInfo2.get_IsComposite

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IMapLayerInfo2, self).get_IsComposite()
    def get_SubLayers(self):
        '''Method IMapLayerInfo2.get_SubLayers

           OUTPUT
            layerIds            : ILongArray**'''
        return super(IMapLayerInfo2, self).get_SubLayers()
    def get_ParentLayerID(self):
        '''Method IMapLayerInfo2.get_ParentLayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapLayerInfo2, self).get_ParentLayerID()
    CanFind = property(get_CanFind, None, None)
    CanIdentify = property(get_CanIdentify, None, None)
    CanScaleSymbols = property(get_CanScaleSymbols, None, None)
    CanSelect = property(get_CanSelect, None, None)
    CopyrightText = property(get_CopyrightText, None, None)
    Description = property(get_Description, None, None)
    DisplayField = property(get_DisplayField, None, None)
    Extent = property(get_Extent, None, None)
    FieldAliases = property(get_FieldAliases, None, None)
    Fields = property(get_Fields, None, None)
    HasAttributes = property(get_HasAttributes, None, None)
    HasHyperlinks = property(get_HasHyperlinks, None, None)
    HasLabels = property(get_HasLabels, None, None)
    ID = property(get_ID, None, None)
    IsComposite = property(get_IsComposite, None, None)
    IsFeatureLayer = property(get_IsFeatureLayer, None, None)
    MaxScale = property(get_MaxScale, None, None)
    MinScale = property(get_MinScale, None, None)
    Name = property(get_Name, None, None)
    ParentLayerID = property(get_ParentLayerID, None, None)
    SourceDescription = property(get_SourceDescription, None, None)
    SubLayers = property(get_SubLayers, None, None)
    Type = property(get_Type, None, None)

class IMapServerInfo(_esriCarto.IMapServerInfo):
    _IID = uuid.UUID('47dd2772-2f22-44df-919b-0d16d8672626')
    def get_Name(self):
        '''Method IMapServerInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerInfo, self).get_Name()
    def get_Description(self):
        '''Method IMapServerInfo.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapServerInfo, self).get_Description()
    def get_FullExtent(self):
        '''Method IMapServerInfo.get_FullExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo, self).get_FullExtent()
    def get_Extent(self):
        '''Method IMapServerInfo.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo, self).get_Extent()
    def get_MapLayerInfos(self):
        '''Method IMapServerInfo.get_MapLayerInfos

           OUTPUT
            layerInfos          : IMapLayerInfos**'''
        return super(IMapServerInfo, self).get_MapLayerInfos()
    def get_BackgroundColor(self):
        '''Method IMapServerInfo.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapServerInfo, self).get_BackgroundColor()
    def get_Bookmarks(self):
        '''Method IMapServerInfo.get_Bookmarks

           OUTPUT
            Bookmarks           : IMapServerBookmarks**'''
        return super(IMapServerInfo, self).get_Bookmarks()
    def get_DefaultMapDescription(self):
        '''Method IMapServerInfo.get_DefaultMapDescription

           OUTPUT
            mapDesc             : IMapDescription**'''
        return super(IMapServerInfo, self).get_DefaultMapDescription()
    def get_MapUnits(self):
        '''Method IMapServerInfo.get_MapUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IMapServerInfo, self).get_MapUnits()
    BackgroundColor = property(get_BackgroundColor, None, None)
    Bookmarks = property(get_Bookmarks, None, None)
    DefaultMapDescription = property(get_DefaultMapDescription, None, None)
    Description = property(get_Description, None, None)
    Extent = property(get_Extent, None, None)
    FullExtent = property(get_FullExtent, None, None)
    MapLayerInfos = property(get_MapLayerInfos, None, None)
    MapUnits = property(get_MapUnits, None, None)
    Name = property(get_Name, None, None)

class IMapServerInfo2(_esriCarto.IMapServerInfo2):
    _IID = uuid.UUID('9211306c-970e-420a-b1a6-b79bf4b49676')
    def get_Name(self):
        '''Method IMapServerInfo2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerInfo2, self).get_Name()
    def get_Description(self):
        '''Method IMapServerInfo2.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapServerInfo2, self).get_Description()
    def get_FullExtent(self):
        '''Method IMapServerInfo2.get_FullExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo2, self).get_FullExtent()
    def get_Extent(self):
        '''Method IMapServerInfo2.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo2, self).get_Extent()
    def get_MapLayerInfos(self):
        '''Method IMapServerInfo2.get_MapLayerInfos

           OUTPUT
            layerInfos          : IMapLayerInfos**'''
        return super(IMapServerInfo2, self).get_MapLayerInfos()
    def get_BackgroundColor(self):
        '''Method IMapServerInfo2.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapServerInfo2, self).get_BackgroundColor()
    def get_Bookmarks(self):
        '''Method IMapServerInfo2.get_Bookmarks

           OUTPUT
            Bookmarks           : IMapServerBookmarks**'''
        return super(IMapServerInfo2, self).get_Bookmarks()
    def get_DefaultMapDescription(self):
        '''Method IMapServerInfo2.get_DefaultMapDescription

           OUTPUT
            mapDesc             : IMapDescription**'''
        return super(IMapServerInfo2, self).get_DefaultMapDescription()
    def get_MapUnits(self):
        '''Method IMapServerInfo2.get_MapUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IMapServerInfo2, self).get_MapUnits()
    def get_BackgroundSymbol(self):
        '''Method IMapServerInfo2.get_BackgroundSymbol

           OUTPUT
            FillSymbol          : IFillSymbol**'''
        return super(IMapServerInfo2, self).get_BackgroundSymbol()
    def get_CopyrightText(self):
        '''Method IMapServerInfo2.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IMapServerInfo2, self).get_CopyrightText()
    BackgroundColor = property(get_BackgroundColor, None, None)
    BackgroundSymbol = property(get_BackgroundSymbol, None, None)
    Bookmarks = property(get_Bookmarks, None, None)
    CopyrightText = property(get_CopyrightText, None, None)
    DefaultMapDescription = property(get_DefaultMapDescription, None, None)
    Description = property(get_Description, None, None)
    Extent = property(get_Extent, None, None)
    FullExtent = property(get_FullExtent, None, None)
    MapLayerInfos = property(get_MapLayerInfos, None, None)
    MapUnits = property(get_MapUnits, None, None)
    Name = property(get_Name, None, None)

class IMapDescription3(_esriCarto.IMapDescription3):
    _IID = uuid.UUID('0bc2c50c-c79d-4e5d-8353-7a996ef3479b')

    def __init__(self, *args, **kw):
        super(IMapDescription3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMapDescription3.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapDescription3, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapDescription3.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMapDescription3, self).put_Name(Name)
    def get_MapArea(self):
        '''Method IMapDescription3.get_MapArea

           OUTPUT
            area                : IMapArea**'''
        return super(IMapDescription3, self).get_MapArea()
    def put_MapArea(self, area):
        '''Method IMapDescription3.put_MapArea

           INPUT
            area                : IMapArea*'''
        return super(IMapDescription3, self).put_MapArea(area)
    def get_LayerDescriptions(self):
        '''Method IMapDescription3.get_LayerDescriptions

           OUTPUT
            LayerDescriptions   : ILayerDescriptions**'''
        return super(IMapDescription3, self).get_LayerDescriptions()
    def put_LayerDescriptions(self, LayerDescriptions):
        '''Method IMapDescription3.put_LayerDescriptions

           INPUT
            LayerDescriptions   : ILayerDescriptions*'''
        return super(IMapDescription3, self).put_LayerDescriptions(LayerDescriptions)
    def get_MapRotation(self):
        '''Method IMapDescription3.get_MapRotation

           OUTPUT
            angleDegrees        : double*'''
        return super(IMapDescription3, self).get_MapRotation()
    def put_MapRotation(self, angleDegrees):
        '''Method IMapDescription3.put_MapRotation

           INPUT
            angleDegrees        : double'''
        return super(IMapDescription3, self).put_MapRotation(angleDegrees)
    def get_SpatialReference(self):
        '''Method IMapDescription3.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IMapDescription3, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IMapDescription3.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IMapDescription3, self).putref_SpatialReference(SpatialReference)
    def get_CustomGraphics(self):
        '''Method IMapDescription3.get_CustomGraphics

           OUTPUT
            Elements            : IGraphicElements**'''
        return super(IMapDescription3, self).get_CustomGraphics()
    def put_CustomGraphics(self, Elements):
        '''Method IMapDescription3.put_CustomGraphics

           INPUT
            Elements            : IGraphicElements*'''
        return super(IMapDescription3, self).put_CustomGraphics(Elements)
    def get_TransparentColor(self):
        '''Method IMapDescription3.get_TransparentColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescription3, self).get_TransparentColor()
    def put_TransparentColor(self, Color):
        '''Method IMapDescription3.put_TransparentColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescription3, self).put_TransparentColor(Color)
    def get_SelectionColor(self):
        '''Method IMapDescription3.get_SelectionColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescription3, self).get_SelectionColor()
    def put_SelectionColor(self, Color):
        '''Method IMapDescription3.put_SelectionColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescription3, self).put_SelectionColor(Color)
    def get_BackgroundSymbol(self):
        '''Method IMapDescription3.get_BackgroundSymbol

           OUTPUT
            FillSymbol          : IFillSymbol**'''
        return super(IMapDescription3, self).get_BackgroundSymbol()
    def put_BackgroundSymbol(self, FillSymbol):
        '''Method IMapDescription3.put_BackgroundSymbol

           INPUT
            FillSymbol          : IFillSymbol*'''
        return super(IMapDescription3, self).put_BackgroundSymbol(FillSymbol)
    def get_HonorLayerReordering(self):
        '''Method IMapDescription3.get_HonorLayerReordering

           OUTPUT
            honorLayerReorder   : VARIANT_BOOL*'''
        return super(IMapDescription3, self).get_HonorLayerReordering()
    def put_HonorLayerReordering(self, honorLayerReorder):
        '''Method IMapDescription3.put_HonorLayerReordering

           INPUT
            honorLayerReorder   : VARIANT_BOOL'''
        return super(IMapDescription3, self).put_HonorLayerReordering(honorLayerReorder)
    BackgroundSymbol = property(get_BackgroundSymbol, put_BackgroundSymbol, None)
    CustomGraphics = property(get_CustomGraphics, put_CustomGraphics, None)
    HonorLayerReordering = property(get_HonorLayerReordering, put_HonorLayerReordering, None)
    LayerDescriptions = property(get_LayerDescriptions, put_LayerDescriptions, None)
    MapArea = property(get_MapArea, put_MapArea, None)
    MapRotation = property(get_MapRotation, put_MapRotation, None)
    Name = property(get_Name, put_Name, None)
    SelectionColor = property(get_SelectionColor, put_SelectionColor, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TransparentColor = property(get_TransparentColor, put_TransparentColor, None)

class IPageDescription(_esriCarto.IPageDescription):
    _IID = uuid.UUID('20da6e47-dd79-4b33-abc0-171c4be6c615')

    def __init__(self, *args, **kw):
        super(IPageDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Height(self):
        '''Method IPageDescription.get_Height

           OUTPUT
            pageHeight          : double*'''
        return super(IPageDescription, self).get_Height()
    def get_Width(self):
        '''Method IPageDescription.get_Width

           OUTPUT
            pageWidth           : double*'''
        return super(IPageDescription, self).get_Width()
    def get_Units(self):
        '''Method IPageDescription.get_Units

           OUTPUT
            PageUnits           : esriUnits*'''
        return super(IPageDescription, self).get_Units()
    def get_Extent(self):
        '''Method IPageDescription.get_Extent

           OUTPUT
            pageExtent          : IEnvelope**'''
        return super(IPageDescription, self).get_Extent()
    def put_Extent(self, pageExtent):
        '''Method IPageDescription.put_Extent

           INPUT
            pageExtent          : IEnvelope*'''
        return super(IPageDescription, self).put_Extent(pageExtent)
    def get_CustomGraphics(self):
        '''Method IPageDescription.get_CustomGraphics

           OUTPUT
            Elements            : IGraphicElements**'''
        return super(IPageDescription, self).get_CustomGraphics()
    def put_CustomGraphics(self, Elements):
        '''Method IPageDescription.put_CustomGraphics

           INPUT
            Elements            : IGraphicElements*'''
        return super(IPageDescription, self).put_CustomGraphics(Elements)
    def get_MapFrames(self):
        '''Method IPageDescription.get_MapFrames

           OUTPUT
            frames              : IMapFrameDescriptions**'''
        return super(IPageDescription, self).get_MapFrames()
    CustomGraphics = property(get_CustomGraphics, put_CustomGraphics, None)
    Extent = property(get_Extent, put_Extent, None)
    Height = property(get_Height, None, None)
    MapFrames = property(get_MapFrames, None, None)
    Units = property(get_Units, None, None)
    Width = property(get_Width, None, None)

class IMapServerInit(_esriCarto.IMapServerInit):
    _IID = uuid.UUID('56e179e3-974e-41a7-836b-c9a60ef6301b')

    def __init__(self, *args, **kw):
        super(IMapServerInit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Connect(self, FilePath):
        '''Method IMapServerInit.Connect

           INPUT
            FilePath            : BSTR'''
        return super(IMapServerInit, self).Connect(FilePath)
    def StartWithData(self, pDataset):
        '''Method IMapServerInit.StartWithData

           INPUT
            pDataset            : IDataset*'''
        return super(IMapServerInit, self).StartWithData(pDataset)
    def Stop(self):
        '''Method IMapServerInit.Stop'''
        return super(IMapServerInit, self).Stop()
    def put_PhysicalOutputDirectory(self, dirPath):
        '''Method IMapServerInit.put_PhysicalOutputDirectory

           INPUT
            dirPath             : BSTR'''
        return super(IMapServerInit, self).put_PhysicalOutputDirectory(dirPath)
    def get_PhysicalOutputDirectory(self):
        '''Method IMapServerInit.get_PhysicalOutputDirectory

           OUTPUT
            dirPath             : BSTR*'''
        return super(IMapServerInit, self).get_PhysicalOutputDirectory()
    def put_VirtualOutputDirectory(self, dirPath):
        '''Method IMapServerInit.put_VirtualOutputDirectory

           INPUT
            dirPath             : BSTR'''
        return super(IMapServerInit, self).put_VirtualOutputDirectory(dirPath)
    def get_VirtualOutputDirectory(self):
        '''Method IMapServerInit.get_VirtualOutputDirectory

           OUTPUT
            dirPath             : BSTR*'''
        return super(IMapServerInit, self).get_VirtualOutputDirectory()
    def get_FilePath(self):
        '''Method IMapServerInit.get_FilePath

           OUTPUT
            FilePath            : BSTR*'''
        return super(IMapServerInit, self).get_FilePath()
    def get_MaxRecordCount(self):
        '''Method IMapServerInit.get_MaxRecordCount

           OUTPUT
            Count               : long*'''
        return super(IMapServerInit, self).get_MaxRecordCount()
    def put_MaxRecordCount(self, Count):
        '''Method IMapServerInit.put_MaxRecordCount

           INPUT
            Count               : long'''
        return super(IMapServerInit, self).put_MaxRecordCount(Count)
    def get_MaxBufferCount(self):
        '''Method IMapServerInit.get_MaxBufferCount

           OUTPUT
            Count               : long*'''
        return super(IMapServerInit, self).get_MaxBufferCount()
    def put_MaxBufferCount(self, Count):
        '''Method IMapServerInit.put_MaxBufferCount

           INPUT
            Count               : long'''
        return super(IMapServerInit, self).put_MaxBufferCount(Count)
    def get_MaxImageWidth(self):
        '''Method IMapServerInit.get_MaxImageWidth

           OUTPUT
            Width               : long*'''
        return super(IMapServerInit, self).get_MaxImageWidth()
    def put_MaxImageWidth(self, Width):
        '''Method IMapServerInit.put_MaxImageWidth

           INPUT
            Width               : long'''
        return super(IMapServerInit, self).put_MaxImageWidth(Width)
    def get_MaxImageHeight(self):
        '''Method IMapServerInit.get_MaxImageHeight

           OUTPUT
            Height              : long*'''
        return super(IMapServerInit, self).get_MaxImageHeight()
    def put_MaxImageHeight(self, Height):
        '''Method IMapServerInit.put_MaxImageHeight

           INPUT
            Height              : long'''
        return super(IMapServerInit, self).put_MaxImageHeight(Height)
    FilePath = property(get_FilePath, None, None)
    MaxBufferCount = property(get_MaxBufferCount, put_MaxBufferCount, None)
    MaxImageHeight = property(get_MaxImageHeight, put_MaxImageHeight, None)
    MaxImageWidth = property(get_MaxImageWidth, put_MaxImageWidth, None)
    MaxRecordCount = property(get_MaxRecordCount, put_MaxRecordCount, None)
    PhysicalOutputDirectory = property(get_PhysicalOutputDirectory, put_PhysicalOutputDirectory, None)
    VirtualOutputDirectory = property(get_VirtualOutputDirectory, put_VirtualOutputDirectory, None)

class IMapServerInit2(_esriCarto.IMapServerInit2):
    _IID = uuid.UUID('ed28c857-2ca2-47cc-8cad-5c90bc2fc012')

    def __init__(self, *args, **kw):
        super(IMapServerInit2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PhysicalCacheDirectory(self, pCacheDir):
        '''Method IMapServerInit2.put_PhysicalCacheDirectory

           INPUT
            pCacheDir           : BSTR'''
        return super(IMapServerInit2, self).put_PhysicalCacheDirectory(pCacheDir)
    def get_PhysicalCacheDirectory(self):
        '''Method IMapServerInit2.get_PhysicalCacheDirectory

           OUTPUT
            pCacheDir           : BSTR*'''
        return super(IMapServerInit2, self).get_PhysicalCacheDirectory()
    def put_VirtualCacheDirectory(self, pVirtualCacheDir):
        '''Method IMapServerInit2.put_VirtualCacheDirectory

           INPUT
            pVirtualCacheDir    : BSTR'''
        return super(IMapServerInit2, self).put_VirtualCacheDirectory(pVirtualCacheDir)
    def get_VirtualCacheDirectory(self):
        '''Method IMapServerInit2.get_VirtualCacheDirectory

           OUTPUT
            pVirtualCacheDir    : BSTR*'''
        return super(IMapServerInit2, self).get_VirtualCacheDirectory()
    def put_SOMCacheDirectory(self, pCacheDir):
        '''Method IMapServerInit2.put_SOMCacheDirectory

           INPUT
            pCacheDir           : BSTR'''
        return super(IMapServerInit2, self).put_SOMCacheDirectory(pCacheDir)
    def get_SOMCacheDirectory(self):
        '''Method IMapServerInit2.get_SOMCacheDirectory

           OUTPUT
            pCacheDir           : BSTR*'''
        return super(IMapServerInit2, self).get_SOMCacheDirectory()
    def get_SOMVirtualCacheDirectory(self):
        '''Method IMapServerInit2.get_SOMVirtualCacheDirectory

           OUTPUT
            pParentVirtualCacheDir: BSTR*'''
        return super(IMapServerInit2, self).get_SOMVirtualCacheDirectory()
    def Connect(self, FilePath):
        '''Method IMapServerInit.Connect (from IMapServerInit)

           INPUT
            FilePath            : BSTR'''
        return super(IMapServerInit2, self).Connect(FilePath)
    def StartWithData(self, pDataset):
        '''Method IMapServerInit.StartWithData (from IMapServerInit)

           INPUT
            pDataset            : IDataset*'''
        return super(IMapServerInit2, self).StartWithData(pDataset)
    def Stop(self):
        '''Method IMapServerInit.Stop (from IMapServerInit)'''
        return super(IMapServerInit2, self).Stop()
    def put_PhysicalOutputDirectory(self, dirPath):
        '''Method IMapServerInit.put_PhysicalOutputDirectory (from IMapServerInit)

           INPUT
            dirPath             : BSTR'''
        return super(IMapServerInit2, self).put_PhysicalOutputDirectory(dirPath)
    def get_PhysicalOutputDirectory(self):
        '''Method IMapServerInit.get_PhysicalOutputDirectory (from IMapServerInit)

           OUTPUT
            dirPath             : BSTR*'''
        return super(IMapServerInit2, self).get_PhysicalOutputDirectory()
    def put_VirtualOutputDirectory(self, dirPath):
        '''Method IMapServerInit.put_VirtualOutputDirectory (from IMapServerInit)

           INPUT
            dirPath             : BSTR'''
        return super(IMapServerInit2, self).put_VirtualOutputDirectory(dirPath)
    def get_VirtualOutputDirectory(self):
        '''Method IMapServerInit.get_VirtualOutputDirectory (from IMapServerInit)

           OUTPUT
            dirPath             : BSTR*'''
        return super(IMapServerInit2, self).get_VirtualOutputDirectory()
    def get_FilePath(self):
        '''Method IMapServerInit.get_FilePath (from IMapServerInit)

           OUTPUT
            FilePath            : BSTR*'''
        return super(IMapServerInit2, self).get_FilePath()
    def get_MaxRecordCount(self):
        '''Method IMapServerInit.get_MaxRecordCount (from IMapServerInit)

           OUTPUT
            Count               : long*'''
        return super(IMapServerInit2, self).get_MaxRecordCount()
    def put_MaxRecordCount(self, Count):
        '''Method IMapServerInit.put_MaxRecordCount (from IMapServerInit)

           INPUT
            Count               : long'''
        return super(IMapServerInit2, self).put_MaxRecordCount(Count)
    def get_MaxBufferCount(self):
        '''Method IMapServerInit.get_MaxBufferCount (from IMapServerInit)

           OUTPUT
            Count               : long*'''
        return super(IMapServerInit2, self).get_MaxBufferCount()
    def put_MaxBufferCount(self, Count):
        '''Method IMapServerInit.put_MaxBufferCount (from IMapServerInit)

           INPUT
            Count               : long'''
        return super(IMapServerInit2, self).put_MaxBufferCount(Count)
    def get_MaxImageWidth(self):
        '''Method IMapServerInit.get_MaxImageWidth (from IMapServerInit)

           OUTPUT
            Width               : long*'''
        return super(IMapServerInit2, self).get_MaxImageWidth()
    def put_MaxImageWidth(self, Width):
        '''Method IMapServerInit.put_MaxImageWidth (from IMapServerInit)

           INPUT
            Width               : long'''
        return super(IMapServerInit2, self).put_MaxImageWidth(Width)
    def get_MaxImageHeight(self):
        '''Method IMapServerInit.get_MaxImageHeight (from IMapServerInit)

           OUTPUT
            Height              : long*'''
        return super(IMapServerInit2, self).get_MaxImageHeight()
    def put_MaxImageHeight(self, Height):
        '''Method IMapServerInit.put_MaxImageHeight (from IMapServerInit)

           INPUT
            Height              : long'''
        return super(IMapServerInit2, self).put_MaxImageHeight(Height)
    FilePath = property(get_FilePath, None, None)
    MaxBufferCount = property(get_MaxBufferCount, put_MaxBufferCount, None)
    MaxImageHeight = property(get_MaxImageHeight, put_MaxImageHeight, None)
    MaxImageWidth = property(get_MaxImageWidth, put_MaxImageWidth, None)
    MaxRecordCount = property(get_MaxRecordCount, put_MaxRecordCount, None)
    PhysicalCacheDirectory = property(get_PhysicalCacheDirectory, put_PhysicalCacheDirectory, None)
    PhysicalOutputDirectory = property(get_PhysicalOutputDirectory, put_PhysicalOutputDirectory, None)
    SOMCacheDirectory = property(get_SOMCacheDirectory, put_SOMCacheDirectory, None)
    SOMVirtualCacheDirectory = property(get_SOMVirtualCacheDirectory, None, None)
    VirtualCacheDirectory = property(get_VirtualCacheDirectory, put_VirtualCacheDirectory, None)
    VirtualOutputDirectory = property(get_VirtualOutputDirectory, put_VirtualOutputDirectory, None)

class IMapServerData(_esriCarto.IMapServerData):
    _IID = uuid.UUID('addaef3b-870a-4e9d-9ab0-242a72c3f812')
    def GetFeatureValue(self, MapName, LayerID, Feature, FieldName):
        '''Method IMapServerData.GetFeatureValue

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Feature             : IFeature*
            FieldName           : BSTR

           OUTPUT
            fieldValue          : BSTR*'''
        return super(IMapServerData, self).GetFeatureValue(MapName, LayerID, Feature, FieldName)
    def GetFeature(self, MapName, LayerID, FeatureId):
        '''Method IMapServerData.GetFeature

           INPUTS
            MapName             : BSTR
            LayerID             : long
            FeatureId           : long

           OUTPUT
            Feature             : IFeature**'''
        return super(IMapServerData, self).GetFeature(MapName, LayerID, FeatureId)

class ICenterAndScale(_esriCarto.ICenterAndScale):
    _IID = uuid.UUID('2a76d265-278e-4521-99ae-37c31f23b968')

    def __init__(self, *args, **kw):
        super(ICenterAndScale, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Center(self):
        '''Method ICenterAndScale.get_Center

           OUTPUT
            Center              : IPoint**'''
        return super(ICenterAndScale, self).get_Center()
    def put_Center(self, Center):
        '''Method ICenterAndScale.put_Center

           INPUT
            Center              : IPoint*'''
        return super(ICenterAndScale, self).put_Center(Center)
    def get_MapScale(self):
        '''Method ICenterAndScale.get_MapScale

           OUTPUT
            Scale               : double*'''
        return super(ICenterAndScale, self).get_MapScale()
    def put_MapScale(self, Scale):
        '''Method ICenterAndScale.put_MapScale

           INPUT
            Scale               : double'''
        return super(ICenterAndScale, self).put_MapScale(Scale)
    Center = property(get_Center, put_Center, None)
    MapScale = property(get_MapScale, put_MapScale, None)

class ICenterAndSize(_esriCarto.ICenterAndSize):
    _IID = uuid.UUID('003c322d-e8c1-43e2-8da3-3bcd81fdd2f8')

    def __init__(self, *args, **kw):
        super(ICenterAndSize, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Center(self):
        '''Method ICenterAndSize.get_Center

           OUTPUT
            Center              : IPoint**'''
        return super(ICenterAndSize, self).get_Center()
    def put_Center(self, Center):
        '''Method ICenterAndSize.put_Center

           INPUT
            Center              : IPoint*'''
        return super(ICenterAndSize, self).put_Center(Center)
    def get_Height(self):
        '''Method ICenterAndSize.get_Height

           OUTPUT
            Height              : double*'''
        return super(ICenterAndSize, self).get_Height()
    def put_Height(self, Height):
        '''Method ICenterAndSize.put_Height

           INPUT
            Height              : double'''
        return super(ICenterAndSize, self).put_Height(Height)
    def get_Width(self):
        '''Method ICenterAndSize.get_Width

           OUTPUT
            Width               : double*'''
        return super(ICenterAndSize, self).get_Width()
    def put_Width(self, Width):
        '''Method ICenterAndSize.put_Width

           INPUT
            Width               : double'''
        return super(ICenterAndSize, self).put_Width(Width)
    def get_Units(self):
        '''Method ICenterAndSize.get_Units

           OUTPUT
            Units               : esriUnits*'''
        return super(ICenterAndSize, self).get_Units()
    def put_Units(self, Units):
        '''Method ICenterAndSize.put_Units

           INPUT
            Units               : esriUnits'''
        return super(ICenterAndSize, self).put_Units(Units)
    Center = property(get_Center, put_Center, None)
    Height = property(get_Height, put_Height, None)
    Units = property(get_Units, put_Units, None)
    Width = property(get_Width, put_Width, None)

class IFeatureExtent(_esriCarto.IFeatureExtent):
    _IID = uuid.UUID('fa56c255-ce10-46d9-ab63-505753df12a4')

    def __init__(self, *args, **kw):
        super(IFeatureExtent, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MapName(self):
        '''Method IFeatureExtent.get_MapName

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureExtent, self).get_MapName()
    def put_MapName(self, Name):
        '''Method IFeatureExtent.put_MapName

           INPUT
            Name                : BSTR'''
        return super(IFeatureExtent, self).put_MapName(Name)
    def get_LayerID(self):
        '''Method IFeatureExtent.get_LayerID

           OUTPUT
            LayerID             : long*'''
        return super(IFeatureExtent, self).get_LayerID()
    def put_LayerID(self, LayerID):
        '''Method IFeatureExtent.put_LayerID

           INPUT
            LayerID             : long'''
        return super(IFeatureExtent, self).put_LayerID(LayerID)
    def get_FeatureIDs(self):
        '''Method IFeatureExtent.get_FeatureIDs

           OUTPUT
            FeatureIDs          : IFIDSet**'''
        return super(IFeatureExtent, self).get_FeatureIDs()
    def put_FeatureIDs(self, FeatureIDs):
        '''Method IFeatureExtent.put_FeatureIDs

           INPUT
            FeatureIDs          : IFIDSet*'''
        return super(IFeatureExtent, self).put_FeatureIDs(FeatureIDs)
    def get_ExpandRatio(self):
        '''Method IFeatureExtent.get_ExpandRatio

           OUTPUT
            ratio               : double*'''
        return super(IFeatureExtent, self).get_ExpandRatio()
    def put_ExpandRatio(self, ratio):
        '''Method IFeatureExtent.put_ExpandRatio

           INPUT
            ratio               : double'''
        return super(IFeatureExtent, self).put_ExpandRatio(ratio)
    def get_DefaultScale(self):
        '''Method IFeatureExtent.get_DefaultScale

           OUTPUT
            MapScale            : double*'''
        return super(IFeatureExtent, self).get_DefaultScale()
    def put_DefaultScale(self, MapScale):
        '''Method IFeatureExtent.put_DefaultScale

           INPUT
            MapScale            : double'''
        return super(IFeatureExtent, self).put_DefaultScale(MapScale)
    DefaultScale = property(get_DefaultScale, put_DefaultScale, None)
    ExpandRatio = property(get_ExpandRatio, put_ExpandRatio, None)
    FeatureIDs = property(get_FeatureIDs, put_FeatureIDs, None)
    LayerID = property(get_LayerID, put_LayerID, None)
    MapName = property(get_MapName, put_MapName, None)

class IMapExtent(_esriCarto.IMapExtent):
    _IID = uuid.UUID('fd1037c4-34d5-4783-8812-e06eff6484e7')

    def __init__(self, *args, **kw):
        super(IMapExtent, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Extent(self, _arg1):
        '''Method IMapExtent.put_Extent

           INPUT
            _arg1               : IEnvelope*'''
        return super(IMapExtent, self).put_Extent(_arg1)
    Extent = property(None, put_Extent, None)

class ITiledMapServer(_esriCarto.ITiledMapServer):
    _IID = uuid.UUID('1627ce7e-954f-4013-9969-e726f8084c25')
    def IsFixedScaleMap(self, MapName):
        '''Method ITiledMapServer.IsFixedScaleMap

           INPUT
            MapName             : BSTR

           OUTPUT
            pIsFixedScaleMap    : VARIANT_BOOL*'''
        return super(ITiledMapServer, self).IsFixedScaleMap(MapName)
    def HasSingleFusedMapCache(self, MapName):
        '''Method ITiledMapServer.HasSingleFusedMapCache

           INPUT
            MapName             : BSTR

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(ITiledMapServer, self).HasSingleFusedMapCache(MapName)
    def GetTileCacheInfo(self, MapName):
        '''Method ITiledMapServer.GetTileCacheInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            ppCacheInfo         : ITileCacheInfo**'''
        return super(ITiledMapServer, self).GetTileCacheInfo(MapName)
    def GetMapTile(self, MapName, Level, Row, Column):
        '''Method ITiledMapServer.GetMapTile

           INPUTS
            MapName             : BSTR
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ITiledMapServer, self).GetMapTile(MapName, Level, Row, Column)
    def HasLayerCache(self, MapName, LayerID):
        '''Method ITiledMapServer.HasLayerCache

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(ITiledMapServer, self).HasLayerCache(MapName, LayerID)
    def GetLayerTile(self, MapName, LayerID, Level, Row, Column):
        '''Method ITiledMapServer.GetLayerTile

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ITiledMapServer, self).GetLayerTile(MapName, LayerID, Level, Row, Column)
    def GetVirtualCacheDirectory(self, MapName, LayerID):
        '''Method ITiledMapServer.GetVirtualCacheDirectory

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            pURL                : BSTR*'''
        return super(ITiledMapServer, self).GetVirtualCacheDirectory(MapName, LayerID)
    def GetCacheName(self, MapName, LayerID):
        '''Method ITiledMapServer.GetCacheName

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            pURL                : BSTR*'''
        return super(ITiledMapServer, self).GetCacheName(MapName, LayerID)

class ITiledMapServer2(_esriCarto.ITiledMapServer2):
    _IID = uuid.UUID('b5339959-b276-4485-ac86-15f3a9a40395')
    def GetMapTileEx(self, MapName, Level, Row, Column, CacheFormat):
        '''Method ITiledMapServer2.GetMapTileEx

           INPUTS
            MapName             : BSTR
            Level               : long
            Row                 : long
            Column              : long
            CacheFormat         : long

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ITiledMapServer2, self).GetMapTileEx(MapName, Level, Row, Column, CacheFormat)
    def GetLayerTileEx(self, MapName, LayerID, Level, Row, Column, CacheFormat):
        '''Method ITiledMapServer2.GetLayerTileEx

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Level               : long
            Row                 : long
            Column              : long
            CacheFormat         : long

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ITiledMapServer2, self).GetLayerTileEx(MapName, LayerID, Level, Row, Column, CacheFormat)
    def GetTileImageInfo(self, MapName):
        '''Method ITiledMapServer2.GetTileImageInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            ppCacheInfo         : ITileImageInfo**'''
        return super(ITiledMapServer2, self).GetTileImageInfo(MapName)
    def GetCacheDescriptionInfo(self, MapName):
        '''Method ITiledMapServer2.GetCacheDescriptionInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            ppCacheDescriptionInfo: ICacheDescriptionInfo**'''
        return super(ITiledMapServer2, self).GetCacheDescriptionInfo(MapName)
    def GetCacheControlInfo(self, MapName):
        '''Method ITiledMapServer2.GetCacheControlInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            ppCacheControlInfo  : ICacheControlInfo**'''
        return super(ITiledMapServer2, self).GetCacheControlInfo(MapName)
    def IsFixedScaleMap(self, MapName):
        '''Method ITiledMapServer.IsFixedScaleMap (from ITiledMapServer)

           INPUT
            MapName             : BSTR

           OUTPUT
            pIsFixedScaleMap    : VARIANT_BOOL*'''
        return super(ITiledMapServer2, self).IsFixedScaleMap(MapName)
    def HasSingleFusedMapCache(self, MapName):
        '''Method ITiledMapServer.HasSingleFusedMapCache (from ITiledMapServer)

           INPUT
            MapName             : BSTR

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(ITiledMapServer2, self).HasSingleFusedMapCache(MapName)
    def GetTileCacheInfo(self, MapName):
        '''Method ITiledMapServer.GetTileCacheInfo (from ITiledMapServer)

           INPUT
            MapName             : BSTR

           OUTPUT
            ppCacheInfo         : ITileCacheInfo**'''
        return super(ITiledMapServer2, self).GetTileCacheInfo(MapName)
    def GetMapTile(self, MapName, Level, Row, Column):
        '''Method ITiledMapServer.GetMapTile (from ITiledMapServer)

           INPUTS
            MapName             : BSTR
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ITiledMapServer2, self).GetMapTile(MapName, Level, Row, Column)
    def HasLayerCache(self, MapName, LayerID):
        '''Method ITiledMapServer.HasLayerCache (from ITiledMapServer)

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(ITiledMapServer2, self).HasLayerCache(MapName, LayerID)
    def GetLayerTile(self, MapName, LayerID, Level, Row, Column):
        '''Method ITiledMapServer.GetLayerTile (from ITiledMapServer)

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ITiledMapServer2, self).GetLayerTile(MapName, LayerID, Level, Row, Column)
    def GetVirtualCacheDirectory(self, MapName, LayerID):
        '''Method ITiledMapServer.GetVirtualCacheDirectory (from ITiledMapServer)

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            pURL                : BSTR*'''
        return super(ITiledMapServer2, self).GetVirtualCacheDirectory(MapName, LayerID)
    def GetCacheName(self, MapName, LayerID):
        '''Method ITiledMapServer.GetCacheName (from ITiledMapServer)

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            pURL                : BSTR*'''
        return super(ITiledMapServer2, self).GetCacheName(MapName, LayerID)

class ITiledMapServer3(_esriCarto.ITiledMapServer3):
    _IID = uuid.UUID('6c3d86d9-e02d-403f-94c2-427c5cf78c19')
    def GetCacheStorageInfo(self, MapName):
        '''Method ITiledMapServer3.GetCacheStorageInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            ppCacheStorageInfo  : ICacheStorageInfo**'''
        return super(ITiledMapServer3, self).GetCacheStorageInfo(MapName)

class IFeatureLayerDrawingDescription(_esriCarto.IFeatureLayerDrawingDescription):
    _IID = uuid.UUID('558e4224-d1e8-43ba-8057-02317e7f8a5e')

    def __init__(self, *args, **kw):
        super(IFeatureLayerDrawingDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureRenderer(self):
        '''Method IFeatureLayerDrawingDescription.get_FeatureRenderer

           OUTPUT
            ppRenderer          : IFeatureRenderer**'''
        return super(IFeatureLayerDrawingDescription, self).get_FeatureRenderer()
    def putref_FeatureRenderer(self, ppRenderer):
        '''Method IFeatureLayerDrawingDescription.putref_FeatureRenderer

           INPUT
            ppRenderer          : IFeatureRenderer*'''
        return super(IFeatureLayerDrawingDescription, self).putref_FeatureRenderer(ppRenderer)
    def get_ScaleSymbols(self):
        '''Method IFeatureLayerDrawingDescription.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(IFeatureLayerDrawingDescription, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method IFeatureLayerDrawingDescription.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(IFeatureLayerDrawingDescription, self).put_ScaleSymbols(Scale)
    FeatureRenderer = property(get_FeatureRenderer, putref_FeatureRenderer, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)

class IFeatureLayerDrawingDescription2(_esriCarto.IFeatureLayerDrawingDescription2):
    _IID = uuid.UUID('ad0a78f4-f5f0-4aa3-b4b0-ee7801df5d59')

    def __init__(self, *args, **kw):
        super(IFeatureLayerDrawingDescription2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SourceLayerID(self):
        '''Method IFeatureLayerDrawingDescription2.get_SourceLayerID

           OUTPUT
            pSourceLayerID      : long*'''
        return super(IFeatureLayerDrawingDescription2, self).get_SourceLayerID()
    def put_SourceLayerID(self, pSourceLayerID):
        '''Method IFeatureLayerDrawingDescription2.put_SourceLayerID

           INPUT
            pSourceLayerID      : long'''
        return super(IFeatureLayerDrawingDescription2, self).put_SourceLayerID(pSourceLayerID)
    def get_LabelingDescription(self):
        '''Method IFeatureLayerDrawingDescription2.get_LabelingDescription

           OUTPUT
            ppLabelingDescription: ILabelingDescription**'''
        return super(IFeatureLayerDrawingDescription2, self).get_LabelingDescription()
    def put_LabelingDescription(self, ppLabelingDescription):
        '''Method IFeatureLayerDrawingDescription2.put_LabelingDescription

           INPUT
            ppLabelingDescription: ILabelingDescription*'''
        return super(IFeatureLayerDrawingDescription2, self).put_LabelingDescription(ppLabelingDescription)
    def get_FeatureRenderer(self):
        '''Method IFeatureLayerDrawingDescription2.get_FeatureRenderer

           OUTPUT
            ppRenderer          : IFeatureRenderer**'''
        return super(IFeatureLayerDrawingDescription2, self).get_FeatureRenderer()
    def putref_FeatureRenderer(self, ppRenderer):
        '''Method IFeatureLayerDrawingDescription2.putref_FeatureRenderer

           INPUT
            ppRenderer          : IFeatureRenderer*'''
        return super(IFeatureLayerDrawingDescription2, self).putref_FeatureRenderer(ppRenderer)
    def get_ScaleSymbols(self):
        '''Method IFeatureLayerDrawingDescription2.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(IFeatureLayerDrawingDescription2, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method IFeatureLayerDrawingDescription2.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(IFeatureLayerDrawingDescription2, self).put_ScaleSymbols(Scale)
    FeatureRenderer = property(get_FeatureRenderer, putref_FeatureRenderer, None)
    LabelingDescription = property(get_LabelingDescription, put_LabelingDescription, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    SourceLayerID = property(get_SourceLayerID, put_SourceLayerID, None)

class ILayerDrawingDescriptionFactory(_esriCarto.ILayerDrawingDescriptionFactory):
    _IID = uuid.UUID('40f79abe-7492-46b4-a9b5-7146fddc01e8')
    def CanCreate(self, pLayer):
        '''Method ILayerDrawingDescriptionFactory.CanCreate

           INPUT
            pLayer              : ILayer*

           OUTPUT
            CanCreate           : VARIANT_BOOL*'''
        return super(ILayerDrawingDescriptionFactory, self).CanCreate(pLayer)
    def CreateLayerDrawingDescription(self, pLayer):
        '''Method ILayerDrawingDescriptionFactory.CreateLayerDrawingDescription

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppLayerDrawingDescription: ILayerDrawingDescription**'''
        return super(ILayerDrawingDescriptionFactory, self).CreateLayerDrawingDescription(pLayer)

class IRasterLayerDrawingDescription(_esriCarto.IRasterLayerDrawingDescription):
    _IID = uuid.UUID('2e8fc0cb-fefe-4b85-829f-ef4dfebf8e1a')

    def __init__(self, *args, **kw):
        super(IRasterLayerDrawingDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterRenderer(self):
        '''Method IRasterLayerDrawingDescription.get_RasterRenderer

           OUTPUT
            ppRenderer          : IRasterRenderer**'''
        return super(IRasterLayerDrawingDescription, self).get_RasterRenderer()
    def putref_RasterRenderer(self, ppRenderer):
        '''Method IRasterLayerDrawingDescription.putref_RasterRenderer

           INPUT
            ppRenderer          : IRasterRenderer*'''
        return super(IRasterLayerDrawingDescription, self).putref_RasterRenderer(ppRenderer)
    RasterRenderer = property(get_RasterRenderer, putref_RasterRenderer, None)

class IServerLayerExtension(_esriCarto.IServerLayerExtension):
    _IID = uuid.UUID('b73d39d9-923e-40de-8438-099b6880133c')

    def __init__(self, *args, **kw):
        super(IServerLayerExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ServerProperties(self):
        '''Method IServerLayerExtension.get_ServerProperties

           OUTPUT
            ServerProperties    : IPropertySet**'''
        return super(IServerLayerExtension, self).get_ServerProperties()
    def put_ServerProperties(self, ServerProperties):
        '''Method IServerLayerExtension.put_ServerProperties

           INPUT
            ServerProperties    : IPropertySet*'''
        return super(IServerLayerExtension, self).put_ServerProperties(ServerProperties)
    ServerProperties = property(get_ServerProperties, put_ServerProperties, None)

class IMapServerGeoTransformation(_esriCarto.IMapServerGeoTransformation):
    _IID = uuid.UUID('ae983588-93a2-465f-8228-0617d8d5c23b')

    def __init__(self, *args, **kw):
        super(IMapServerGeoTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_GeoTransformation(self, transformations):
        '''Method IMapServerGeoTransformation.putref_GeoTransformation

           INPUT
            transformations     : IGeoTransformation*'''
        return super(IMapServerGeoTransformation, self).putref_GeoTransformation(transformations)
    def get_GeoTransformation(self):
        '''Method IMapServerGeoTransformation.get_GeoTransformation

           OUTPUT
            transformations     : IGeoTransformation**'''
        return super(IMapServerGeoTransformation, self).get_GeoTransformation()
    GeoTransformation = property(get_GeoTransformation, putref_GeoTransformation, None)

class IMapTableInfo2(_esriCarto.IMapTableInfo2):
    _IID = uuid.UUID('8f7c2914-c653-41bb-865b-88f229d262ce')
    def get_ID(self):
        '''Method IMapTableInfo2.get_ID

           OUTPUT
            TableID             : long*'''
        return super(IMapTableInfo2, self).get_ID()
    def get_Name(self):
        '''Method IMapTableInfo2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapTableInfo2, self).get_Name()
    def get_Fields(self):
        '''Method IMapTableInfo2.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMapTableInfo2, self).get_Fields()
    def get_RelateInfos(self):
        '''Method IMapTableInfo2.get_RelateInfos

           OUTPUT
            RelateInfo          : IRelateInfos**'''
        return super(IMapTableInfo2, self).get_RelateInfos()
    def get_HasAttachments(self):
        '''Method IMapTableInfo2.get_HasAttachments

           OUTPUT
            HasAttachments      : VARIANT_BOOL*'''
        return super(IMapTableInfo2, self).get_HasAttachments()
    def get_HTMLPopupType(self):
        '''Method IMapTableInfo2.get_HTMLPopupType

           OUTPUT
            Type                : esriServerHTMLPopupType*'''
        return super(IMapTableInfo2, self).get_HTMLPopupType()
    def get_DisplayField(self):
        '''Method IMapTableInfo2.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapTableInfo2, self).get_DisplayField()
    def get_OIDFieldName(self):
        '''Method IMapTableInfo2.get_OIDFieldName

           OUTPUT
            OIDFieldName        : BSTR*'''
        return super(IMapTableInfo2, self).get_OIDFieldName()
    def get_HasSubtype(self):
        '''Method IMapTableInfo2.get_HasSubtype

           OUTPUT
            HasSubtype          : VARIANT_BOOL*'''
        return super(IMapTableInfo2, self).get_HasSubtype()
    def get_SupportsStatistics(self):
        '''Method IMapTableInfo2.get_SupportsStatistics

           OUTPUT
            supportsStats       : VARIANT_BOOL*'''
        return super(IMapTableInfo2, self).get_SupportsStatistics()
    def get_SupportsAdvancedQueries(self):
        '''Method IMapTableInfo2.get_SupportsAdvancedQueries

           OUTPUT
            SupportsAdvancedQueries: VARIANT_BOOL*'''
        return super(IMapTableInfo2, self).get_SupportsAdvancedQueries()
    DisplayField = property(get_DisplayField, None, None)
    Fields = property(get_Fields, None, None)
    HTMLPopupType = property(get_HTMLPopupType, None, None)
    HasAttachments = property(get_HasAttachments, None, None)
    HasSubtype = property(get_HasSubtype, None, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)
    RelateInfos = property(get_RelateInfos, None, None)
    SupportsAdvancedQueries = property(get_SupportsAdvancedQueries, None, None)
    SupportsStatistics = property(get_SupportsStatistics, None, None)

class IStandaloneTableInfos(_esriCarto.IStandaloneTableInfos):
    _IID = uuid.UUID('a70b447e-2fce-45df-a7f5-917454d0d7d4')
    def get_Count(self):
        '''Method IStandaloneTableInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IStandaloneTableInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IStandaloneTableInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            StandaloneTableInfo : IStandaloneTableInfo**'''
        return super(IStandaloneTableInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IStandaloneTableInfos.Remove

           INPUT
            Index               : long'''
        return super(IStandaloneTableInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IStandaloneTableInfos.RemoveAll'''
        return super(IStandaloneTableInfos, self).RemoveAll()
    def Add(self, StandaloneTableInfo):
        '''Method IStandaloneTableInfos.Add

           INPUT
            StandaloneTableInfo : IStandaloneTableInfo*'''
        return super(IStandaloneTableInfos, self).Add(StandaloneTableInfo)
    def Insert(self, Index, StandaloneTableInfo):
        '''Method IStandaloneTableInfos.Insert

           INPUTS
            Index               : long
            StandaloneTableInfo : IStandaloneTableInfo*'''
        return super(IStandaloneTableInfos, self).Insert(Index, StandaloneTableInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IStandaloneTableDescriptions(_esriCarto.IStandaloneTableDescriptions):
    _IID = uuid.UUID('906adeb7-70bf-43af-9ee5-fd0f741796ea')
    def get_Count(self):
        '''Method IStandaloneTableDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(IStandaloneTableDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method IStandaloneTableDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            StandaloneTableDescription: IStandaloneTableDescription**'''
        return super(IStandaloneTableDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IStandaloneTableDescriptions.Remove

           INPUT
            Index               : long'''
        return super(IStandaloneTableDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method IStandaloneTableDescriptions.RemoveAll'''
        return super(IStandaloneTableDescriptions, self).RemoveAll()
    def Add(self, StandaloneTableDescription):
        '''Method IStandaloneTableDescriptions.Add

           INPUT
            StandaloneTableDescription: IStandaloneTableDescription*'''
        return super(IStandaloneTableDescriptions, self).Add(StandaloneTableDescription)
    def Insert(self, Index, StandaloneTableDescription):
        '''Method IStandaloneTableDescriptions.Insert

           INPUTS
            Index               : long
            StandaloneTableDescription: IStandaloneTableDescription*'''
        return super(IStandaloneTableDescriptions, self).Insert(Index, StandaloneTableDescription)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerInfo3(_esriCarto.IMapServerInfo3):
    _IID = uuid.UUID('012a4036-5c4d-4677-bb19-ed4e3ded3d75')
    def get_Name(self):
        '''Method IMapServerInfo3.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerInfo3, self).get_Name()
    def get_Description(self):
        '''Method IMapServerInfo3.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapServerInfo3, self).get_Description()
    def get_FullExtent(self):
        '''Method IMapServerInfo3.get_FullExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo3, self).get_FullExtent()
    def get_Extent(self):
        '''Method IMapServerInfo3.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo3, self).get_Extent()
    def get_MapLayerInfos(self):
        '''Method IMapServerInfo3.get_MapLayerInfos

           OUTPUT
            layerInfos          : IMapLayerInfos**'''
        return super(IMapServerInfo3, self).get_MapLayerInfos()
    def get_BackgroundColor(self):
        '''Method IMapServerInfo3.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapServerInfo3, self).get_BackgroundColor()
    def get_Bookmarks(self):
        '''Method IMapServerInfo3.get_Bookmarks

           OUTPUT
            Bookmarks           : IMapServerBookmarks**'''
        return super(IMapServerInfo3, self).get_Bookmarks()
    def get_DefaultMapDescription(self):
        '''Method IMapServerInfo3.get_DefaultMapDescription

           OUTPUT
            mapDesc             : IMapDescription**'''
        return super(IMapServerInfo3, self).get_DefaultMapDescription()
    def get_MapUnits(self):
        '''Method IMapServerInfo3.get_MapUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IMapServerInfo3, self).get_MapUnits()
    def get_BackgroundSymbol(self):
        '''Method IMapServerInfo3.get_BackgroundSymbol

           OUTPUT
            FillSymbol          : IFillSymbol**'''
        return super(IMapServerInfo3, self).get_BackgroundSymbol()
    def get_CopyrightText(self):
        '''Method IMapServerInfo3.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IMapServerInfo3, self).get_CopyrightText()
    def get_StandaloneTableInfos(self):
        '''Method IMapServerInfo3.get_StandaloneTableInfos

           OUTPUT
            TablesInfos         : IStandaloneTableInfos**'''
        return super(IMapServerInfo3, self).get_StandaloneTableInfos()
    def get_StandaloneTableDescriptions(self):
        '''Method IMapServerInfo3.get_StandaloneTableDescriptions

           OUTPUT
            TableDescriptions   : IStandaloneTableDescriptions**'''
        return super(IMapServerInfo3, self).get_StandaloneTableDescriptions()
    BackgroundColor = property(get_BackgroundColor, None, None)
    BackgroundSymbol = property(get_BackgroundSymbol, None, None)
    Bookmarks = property(get_Bookmarks, None, None)
    CopyrightText = property(get_CopyrightText, None, None)
    DefaultMapDescription = property(get_DefaultMapDescription, None, None)
    Description = property(get_Description, None, None)
    Extent = property(get_Extent, None, None)
    FullExtent = property(get_FullExtent, None, None)
    MapLayerInfos = property(get_MapLayerInfos, None, None)
    MapUnits = property(get_MapUnits, None, None)
    Name = property(get_Name, None, None)
    StandaloneTableDescriptions = property(get_StandaloneTableDescriptions, None, None)
    StandaloneTableInfos = property(get_StandaloneTableInfos, None, None)

class IMapServerInfo4(_esriCarto.IMapServerInfo4):
    _IID = uuid.UUID('c1a99e4d-3441-4d75-808d-e8f24dcbcbb5')
    def get_Name(self):
        '''Method IMapServerInfo4.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerInfo4, self).get_Name()
    def get_Description(self):
        '''Method IMapServerInfo4.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMapServerInfo4, self).get_Description()
    def get_FullExtent(self):
        '''Method IMapServerInfo4.get_FullExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo4, self).get_FullExtent()
    def get_Extent(self):
        '''Method IMapServerInfo4.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapServerInfo4, self).get_Extent()
    def get_MapLayerInfos(self):
        '''Method IMapServerInfo4.get_MapLayerInfos

           OUTPUT
            layerInfos          : IMapLayerInfos**'''
        return super(IMapServerInfo4, self).get_MapLayerInfos()
    def get_BackgroundColor(self):
        '''Method IMapServerInfo4.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapServerInfo4, self).get_BackgroundColor()
    def get_Bookmarks(self):
        '''Method IMapServerInfo4.get_Bookmarks

           OUTPUT
            Bookmarks           : IMapServerBookmarks**'''
        return super(IMapServerInfo4, self).get_Bookmarks()
    def get_DefaultMapDescription(self):
        '''Method IMapServerInfo4.get_DefaultMapDescription

           OUTPUT
            mapDesc             : IMapDescription**'''
        return super(IMapServerInfo4, self).get_DefaultMapDescription()
    def get_MapUnits(self):
        '''Method IMapServerInfo4.get_MapUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IMapServerInfo4, self).get_MapUnits()
    def get_BackgroundSymbol(self):
        '''Method IMapServerInfo4.get_BackgroundSymbol

           OUTPUT
            FillSymbol          : IFillSymbol**'''
        return super(IMapServerInfo4, self).get_BackgroundSymbol()
    def get_CopyrightText(self):
        '''Method IMapServerInfo4.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IMapServerInfo4, self).get_CopyrightText()
    def get_StandaloneTableInfos(self):
        '''Method IMapServerInfo4.get_StandaloneTableInfos

           OUTPUT
            TablesInfos         : IStandaloneTableInfos**'''
        return super(IMapServerInfo4, self).get_StandaloneTableInfos()
    def get_StandaloneTableDescriptions(self):
        '''Method IMapServerInfo4.get_StandaloneTableDescriptions

           OUTPUT
            TableDescriptions   : IStandaloneTableDescriptions**'''
        return super(IMapServerInfo4, self).get_StandaloneTableDescriptions()
    def get_SupportsDynamicLayers(self):
        '''Method IMapServerInfo4.get_SupportsDynamicLayers

           OUTPUT
            SupportsDynamicLayers: VARIANT_BOOL*'''
        return super(IMapServerInfo4, self).get_SupportsDynamicLayers()
    def get_MinScale(self):
        '''Method IMapServerInfo4.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IMapServerInfo4, self).get_MinScale()
    def get_MaxScale(self):
        '''Method IMapServerInfo4.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IMapServerInfo4, self).get_MaxScale()
    BackgroundColor = property(get_BackgroundColor, None, None)
    BackgroundSymbol = property(get_BackgroundSymbol, None, None)
    Bookmarks = property(get_Bookmarks, None, None)
    CopyrightText = property(get_CopyrightText, None, None)
    DefaultMapDescription = property(get_DefaultMapDescription, None, None)
    Description = property(get_Description, None, None)
    Extent = property(get_Extent, None, None)
    FullExtent = property(get_FullExtent, None, None)
    MapLayerInfos = property(get_MapLayerInfos, None, None)
    MapUnits = property(get_MapUnits, None, None)
    MaxScale = property(get_MaxScale, None, None)
    MinScale = property(get_MinScale, None, None)
    Name = property(get_Name, None, None)
    StandaloneTableDescriptions = property(get_StandaloneTableDescriptions, None, None)
    StandaloneTableInfos = property(get_StandaloneTableInfos, None, None)
    SupportsDynamicLayers = property(get_SupportsDynamicLayers, None, None)

class IMapServerTimeInfo(_esriCarto.IMapServerTimeInfo):
    _IID = uuid.UUID('bf21cba1-c295-48ae-b3d5-e275701bce96')
    def get_FullTimeExtent(self):
        '''Method IMapServerTimeInfo.get_FullTimeExtent

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapServerTimeInfo, self).get_FullTimeExtent()
    def get_DefaultTimeInterval(self):
        '''Method IMapServerTimeInfo.get_DefaultTimeInterval

           OUTPUT
            Interval            : double*'''
        return super(IMapServerTimeInfo, self).get_DefaultTimeInterval()
    def get_DefaultTimeIntervalUnits(self):
        '''Method IMapServerTimeInfo.get_DefaultTimeIntervalUnits

           OUTPUT
            Units               : esriTimeUnits*'''
        return super(IMapServerTimeInfo, self).get_DefaultTimeIntervalUnits()
    def get_DefaultTimeWindow(self):
        '''Method IMapServerTimeInfo.get_DefaultTimeWindow

           OUTPUT
            duration            : double*'''
        return super(IMapServerTimeInfo, self).get_DefaultTimeWindow()
    DefaultTimeInterval = property(get_DefaultTimeInterval, None, None)
    DefaultTimeIntervalUnits = property(get_DefaultTimeIntervalUnits, None, None)
    DefaultTimeWindow = property(get_DefaultTimeWindow, None, None)
    FullTimeExtent = property(get_FullTimeExtent, None, None)

class IMapServerTimeInfo2(_esriCarto.IMapServerTimeInfo2):
    _IID = uuid.UUID('ef4d782c-e696-4916-a8fe-72ba5652cacc')
    def get_HasLiveData(self):
        '''Method IMapServerTimeInfo2.get_HasLiveData

           OUTPUT
            HasLiveData         : VARIANT_BOOL*'''
        return super(IMapServerTimeInfo2, self).get_HasLiveData()
    def get_FullTimeExtent(self):
        '''Method IMapServerTimeInfo2.get_FullTimeExtent

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapServerTimeInfo2, self).get_FullTimeExtent()
    def get_DefaultTimeInterval(self):
        '''Method IMapServerTimeInfo2.get_DefaultTimeInterval

           OUTPUT
            Interval            : double*'''
        return super(IMapServerTimeInfo2, self).get_DefaultTimeInterval()
    def get_DefaultTimeIntervalUnits(self):
        '''Method IMapServerTimeInfo2.get_DefaultTimeIntervalUnits

           OUTPUT
            Units               : esriTimeUnits*'''
        return super(IMapServerTimeInfo2, self).get_DefaultTimeIntervalUnits()
    def get_DefaultTimeWindow(self):
        '''Method IMapServerTimeInfo2.get_DefaultTimeWindow

           OUTPUT
            duration            : double*'''
        return super(IMapServerTimeInfo2, self).get_DefaultTimeWindow()
    DefaultTimeInterval = property(get_DefaultTimeInterval, None, None)
    DefaultTimeIntervalUnits = property(get_DefaultTimeIntervalUnits, None, None)
    DefaultTimeWindow = property(get_DefaultTimeWindow, None, None)
    FullTimeExtent = property(get_FullTimeExtent, None, None)
    HasLiveData = property(get_HasLiveData, None, None)

class IRelatedRecordGroup(_esriCarto.IRelatedRecordGroup):
    _IID = uuid.UUID('1dc5a833-c24e-4688-baf5-dea8fc54e6af')
    def get_SourceRowID(self):
        '''Method IRelatedRecordGroup.get_SourceRowID

           OUTPUT
            ID                  : long*'''
        return super(IRelatedRecordGroup, self).get_SourceRowID()
    def get_Records(self):
        '''Method IRelatedRecordGroup.get_Records

           OUTPUT
            ppRecords           : IRecordArray**'''
        return super(IRelatedRecordGroup, self).get_Records()
    Records = property(get_Records, None, None)
    SourceRowID = property(get_SourceRowID, None, None)

class IRelatedRecordGroups(_esriCarto.IRelatedRecordGroups):
    _IID = uuid.UUID('cbd3c9a8-e89c-447b-a2aa-8b4593604930')
    def get_Count(self):
        '''Method IRelatedRecordGroups.get_Count

           OUTPUT
            Count               : long*'''
        return super(IRelatedRecordGroups, self).get_Count()
    def get_Element(self, Index):
        '''Method IRelatedRecordGroups.get_Element

           INPUT
            Index               : long

           OUTPUT
            RelatedRecordGroup  : IRelatedRecordGroup**'''
        return super(IRelatedRecordGroups, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IRelatedRecordGroups.Remove

           INPUT
            Index               : long'''
        return super(IRelatedRecordGroups, self).Remove(Index)
    def RemoveAll(self):
        '''Method IRelatedRecordGroups.RemoveAll'''
        return super(IRelatedRecordGroups, self).RemoveAll()
    def Add(self, RelatedRecordGroup):
        '''Method IRelatedRecordGroups.Add

           INPUT
            RelatedRecordGroup  : IRelatedRecordGroup*'''
        return super(IRelatedRecordGroups, self).Add(RelatedRecordGroup)
    def Insert(self, Index, RelatedRecordGroup):
        '''Method IRelatedRecordGroups.Insert

           INPUTS
            Index               : long
            RelatedRecordGroup  : IRelatedRecordGroup*'''
        return super(IRelatedRecordGroups, self).Insert(Index, RelatedRecordGroup)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IRelatedRecordSet(_esriCarto.IRelatedRecordSet):
    _IID = uuid.UUID('cb15d999-15d4-4d34-ae80-4aa9619078ec')
    def get_RelatedRecordFields(self):
        '''Method IRelatedRecordSet.get_RelatedRecordFields

           OUTPUT
            ppFields            : IFields**'''
        return super(IRelatedRecordSet, self).get_RelatedRecordFields()
    def get_RelatedRecordGroups(self):
        '''Method IRelatedRecordSet.get_RelatedRecordGroups

           OUTPUT
            recordGroups        : IRelatedRecordGroups**'''
        return super(IRelatedRecordSet, self).get_RelatedRecordGroups()
    RelatedRecordFields = property(get_RelatedRecordFields, None, None)
    RelatedRecordGroups = property(get_RelatedRecordGroups, None, None)

class IServiceLayerImageFormat(_esriCarto.IServiceLayerImageFormat):
    _IID = uuid.UUID('6c6ce092-1ed4-4806-aabb-1ca6f0cb166e')

    def __init__(self, *args, **kw):
        super(IServiceLayerImageFormat, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SupportedImageFormatCount(self):
        '''Method IServiceLayerImageFormat.get_SupportedImageFormatCount

           OUTPUT
            Count               : long*'''
        return super(IServiceLayerImageFormat, self).get_SupportedImageFormatCount()
    def get_SupportedImageFormat(self, Index):
        '''Method IServiceLayerImageFormat.get_SupportedImageFormat

           INPUT
            Index               : long

           OUTPUT
            ImageFormat         : esriImageFormat*'''
        return super(IServiceLayerImageFormat, self).get_SupportedImageFormat(Index)
    def get_RequestedImageType(self):
        '''Method IServiceLayerImageFormat.get_RequestedImageType

           OUTPUT
            requestedImageFormat: esriImageFormat*'''
        return super(IServiceLayerImageFormat, self).get_RequestedImageType()
    def put_RequestedImageType(self, requestedImageFormat):
        '''Method IServiceLayerImageFormat.put_RequestedImageType

           INPUT
            requestedImageFormat: esriImageFormat'''
        return super(IServiceLayerImageFormat, self).put_RequestedImageType(requestedImageFormat)
    RequestedImageType = property(get_RequestedImageType, put_RequestedImageType, None)
    SupportedImageFormatCount = property(get_SupportedImageFormatCount, None, None)
    SupportedImageFormat = IndexProperty(get_SupportedImageFormat, None)

class IMapServerDataAccess(_esriCarto.IMapServerDataAccess):
    _IID = uuid.UUID('a3072b50-65e2-4035-b438-8363edd349c0')
    def GetDataSource(self, MapName, LayerID):
        '''Method IMapServerDataAccess.GetDataSource

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            ppDataSource        : IUnknown**'''
        return super(IMapServerDataAccess, self).GetDataSource(MapName, LayerID)
    def GetDisplayDataSource(self, MapName, LayerOrTableID):
        '''Method IMapServerDataAccess.GetDisplayDataSource

           INPUTS
            MapName             : BSTR
            LayerOrTableID      : long

           OUTPUT
            ppDisplayTable      : IUnknown**'''
        return super(IMapServerDataAccess, self).GetDisplayDataSource(MapName, LayerOrTableID)

class IMapTableTimeInfo(_esriCarto.IMapTableTimeInfo):
    _IID = uuid.UUID('3bb80bf2-3e29-4b85-b6d6-551abe327eaf')
    def get_SupportsTime(self):
        '''Method IMapTableTimeInfo.get_SupportsTime

           OUTPUT
            supports            : VARIANT_BOOL*'''
        return super(IMapTableTimeInfo, self).get_SupportsTime()
    def get_StartTimeFieldName(self):
        '''Method IMapTableTimeInfo.get_StartTimeFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapTableTimeInfo, self).get_StartTimeFieldName()
    def get_EndTimeFieldName(self):
        '''Method IMapTableTimeInfo.get_EndTimeFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapTableTimeInfo, self).get_EndTimeFieldName()
    def get_TimeValueFormat(self):
        '''Method IMapTableTimeInfo.get_TimeValueFormat

           OUTPUT
            Format              : BSTR*'''
        return super(IMapTableTimeInfo, self).get_TimeValueFormat()
    def get_TrackIDFieldName(self):
        '''Method IMapTableTimeInfo.get_TrackIDFieldName

           OUTPUT
            TrackIDFieldName    : BSTR*'''
        return super(IMapTableTimeInfo, self).get_TrackIDFieldName()
    def get_TimeReference(self):
        '''Method IMapTableTimeInfo.get_TimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IMapTableTimeInfo, self).get_TimeReference()
    def get_FullTimeExtent(self):
        '''Method IMapTableTimeInfo.get_FullTimeExtent

           OUTPUT
            TimeExtent          : ITimeExtent**'''
        return super(IMapTableTimeInfo, self).get_FullTimeExtent()
    def get_TimeInterval(self):
        '''Method IMapTableTimeInfo.get_TimeInterval

           OUTPUT
            Interval            : double*'''
        return super(IMapTableTimeInfo, self).get_TimeInterval()
    def get_TimeIntervalUnits(self):
        '''Method IMapTableTimeInfo.get_TimeIntervalUnits

           OUTPUT
            intervalUnits       : esriTimeUnits*'''
        return super(IMapTableTimeInfo, self).get_TimeIntervalUnits()
    EndTimeFieldName = property(get_EndTimeFieldName, None, None)
    FullTimeExtent = property(get_FullTimeExtent, None, None)
    StartTimeFieldName = property(get_StartTimeFieldName, None, None)
    SupportsTime = property(get_SupportsTime, None, None)
    TimeInterval = property(get_TimeInterval, None, None)
    TimeIntervalUnits = property(get_TimeIntervalUnits, None, None)
    TimeReference = property(get_TimeReference, None, None)
    TimeValueFormat = property(get_TimeValueFormat, None, None)
    TrackIDFieldName = property(get_TrackIDFieldName, None, None)

class IMapTableTimeDescription(_esriCarto.IMapTableTimeDescription):
    _IID = uuid.UUID('7ae9366e-4894-43a6-96ba-3abc58294058')

    def __init__(self, *args, **kw):
        super(IMapTableTimeDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseTime(self):
        '''Method IMapTableTimeDescription.get_UseTime

           OUTPUT
            UseTime             : VARIANT_BOOL*'''
        return super(IMapTableTimeDescription, self).get_UseTime()
    def put_UseTime(self, UseTime):
        '''Method IMapTableTimeDescription.put_UseTime

           INPUT
            UseTime             : VARIANT_BOOL'''
        return super(IMapTableTimeDescription, self).put_UseTime(UseTime)
    def get_TimeDataCumulative(self):
        '''Method IMapTableTimeDescription.get_TimeDataCumulative

           OUTPUT
            drawCumilative      : VARIANT_BOOL*'''
        return super(IMapTableTimeDescription, self).get_TimeDataCumulative()
    def put_TimeDataCumulative(self, drawCumilative):
        '''Method IMapTableTimeDescription.put_TimeDataCumulative

           INPUT
            drawCumilative      : VARIANT_BOOL'''
        return super(IMapTableTimeDescription, self).put_TimeDataCumulative(drawCumilative)
    def get_TimeOffset(self):
        '''Method IMapTableTimeDescription.get_TimeOffset

           OUTPUT
            Offset              : double*'''
        return super(IMapTableTimeDescription, self).get_TimeOffset()
    def put_TimeOffset(self, Offset):
        '''Method IMapTableTimeDescription.put_TimeOffset

           INPUT
            Offset              : double'''
        return super(IMapTableTimeDescription, self).put_TimeOffset(Offset)
    def get_TimeOffsetUnits(self):
        '''Method IMapTableTimeDescription.get_TimeOffsetUnits

           OUTPUT
            offsetUnits         : esriTimeUnits*'''
        return super(IMapTableTimeDescription, self).get_TimeOffsetUnits()
    def put_TimeOffsetUnits(self, offsetUnits):
        '''Method IMapTableTimeDescription.put_TimeOffsetUnits

           INPUT
            offsetUnits         : esriTimeUnits'''
        return super(IMapTableTimeDescription, self).put_TimeOffsetUnits(offsetUnits)
    TimeDataCumulative = property(get_TimeDataCumulative, put_TimeDataCumulative, None)
    TimeOffset = property(get_TimeOffset, put_TimeOffset, None)
    TimeOffsetUnits = property(get_TimeOffsetUnits, put_TimeOffsetUnits, None)
    UseTime = property(get_UseTime, put_UseTime, None)

class IMapTimeDescription(_esriCarto.IMapTimeDescription):
    _IID = uuid.UUID('aa4291a6-8c04-4519-8aa5-4edb246f726b')

    def __init__(self, *args, **kw):
        super(IMapTimeDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TimeValue(self):
        '''Method IMapTimeDescription.get_TimeValue

           OUTPUT
            TimeValue           : ITimeValue**'''
        return super(IMapTimeDescription, self).get_TimeValue()
    def putref_TimeValue(self, TimeValue):
        '''Method IMapTimeDescription.putref_TimeValue

           INPUT
            TimeValue           : ITimeValue*'''
        return super(IMapTimeDescription, self).putref_TimeValue(TimeValue)
    def get_TimeReference(self):
        '''Method IMapTimeDescription.get_TimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IMapTimeDescription, self).get_TimeReference()
    def putref_TimeReference(self, TimeReference):
        '''Method IMapTimeDescription.putref_TimeReference

           INPUT
            TimeReference       : ITimeReference*'''
        return super(IMapTimeDescription, self).putref_TimeReference(TimeReference)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)
    TimeValue = property(get_TimeValue, putref_TimeValue, None)

class IMapTimeDescription2(_esriCarto.IMapTimeDescription2):
    _IID = uuid.UUID('2305fe16-0e11-4291-b824-8e6ceb1649f4')

    def __init__(self, *args, **kw):
        super(IMapTimeDescription2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TimeRelation(self):
        '''Method IMapTimeDescription2.get_TimeRelation

           OUTPUT
            relation            : esriTimeRelation*'''
        return super(IMapTimeDescription2, self).get_TimeRelation()
    def put_TimeRelation(self, relation):
        '''Method IMapTimeDescription2.put_TimeRelation

           INPUT
            relation            : esriTimeRelation'''
        return super(IMapTimeDescription2, self).put_TimeRelation(relation)
    def get_TimeValue(self):
        '''Method IMapTimeDescription.get_TimeValue (from IMapTimeDescription)

           OUTPUT
            TimeValue           : ITimeValue**'''
        return super(IMapTimeDescription2, self).get_TimeValue()
    def putref_TimeValue(self, TimeValue):
        '''Method IMapTimeDescription.putref_TimeValue (from IMapTimeDescription)

           INPUT
            TimeValue           : ITimeValue*'''
        return super(IMapTimeDescription2, self).putref_TimeValue(TimeValue)
    def get_TimeReference(self):
        '''Method IMapTimeDescription.get_TimeReference (from IMapTimeDescription)

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IMapTimeDescription2, self).get_TimeReference()
    def putref_TimeReference(self, TimeReference):
        '''Method IMapTimeDescription.putref_TimeReference (from IMapTimeDescription)

           INPUT
            TimeReference       : ITimeReference*'''
        return super(IMapTimeDescription2, self).putref_TimeReference(TimeReference)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)
    TimeRelation = property(get_TimeRelation, put_TimeRelation, None)
    TimeValue = property(get_TimeValue, putref_TimeValue, None)

class IDynamicMapTableDescription(_esriCarto.IDynamicMapTableDescription):
    _IID = uuid.UUID('475fd083-31bc-49f5-b3a4-e14afc5b9da8')

    def __init__(self, *args, **kw):
        super(IDynamicMapTableDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Source(self):
        '''Method IDynamicMapTableDescription.get_Source

           OUTPUT
            ppMapServerSourceDescription: IMapServerSourceDescription**'''
        return super(IDynamicMapTableDescription, self).get_Source()
    def put_Source(self, ppMapServerSourceDescription):
        '''Method IDynamicMapTableDescription.put_Source

           INPUT
            ppMapServerSourceDescription: IMapServerSourceDescription*'''
        return super(IDynamicMapTableDescription, self).put_Source(ppMapServerSourceDescription)
    Source = property(get_Source, put_Source, None)

class IRasterDataSourceDescription(_esriCarto.IRasterDataSourceDescription):
    _IID = uuid.UUID('24923bef-339a-4c2e-afd9-93db65f22358')

    def __init__(self, *args, **kw):
        super(IRasterDataSourceDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterName(self):
        '''Method IRasterDataSourceDescription.get_RasterName

           OUTPUT
            RasterName          : BSTR*'''
        return super(IRasterDataSourceDescription, self).get_RasterName()
    def put_RasterName(self, RasterName):
        '''Method IRasterDataSourceDescription.put_RasterName

           INPUT
            RasterName          : BSTR'''
        return super(IRasterDataSourceDescription, self).put_RasterName(RasterName)
    RasterName = property(get_RasterName, put_RasterName, None)

class IRelateInfo2(_esriCarto.IRelateInfo2):
    _IID = uuid.UUID('597fda74-3cf8-47bf-b6d4-1ea0a1b0526f')
    def get_Name(self):
        '''Method IRelateInfo2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IRelateInfo2, self).get_Name()
    def get_RelationshipID(self):
        '''Method IRelateInfo2.get_RelationshipID

           OUTPUT
            RelationshipID      : long*'''
        return super(IRelateInfo2, self).get_RelationshipID()
    def get_RelatedTableID(self):
        '''Method IRelateInfo2.get_RelatedTableID

           OUTPUT
            RelatedTableID      : long*'''
        return super(IRelateInfo2, self).get_RelatedTableID()
    def get_Role(self):
        '''Method IRelateInfo2.get_Role

           OUTPUT
            Role                : esriRelRole*'''
        return super(IRelateInfo2, self).get_Role()
    def get_Cardinality(self):
        '''Method IRelateInfo2.get_Cardinality

           OUTPUT
            Cardinality         : esriRelCardinality*'''
        return super(IRelateInfo2, self).get_Cardinality()
    def get_KeyField(self):
        '''Method IRelateInfo2.get_KeyField

           OUTPUT
            KeyField            : BSTR*'''
        return super(IRelateInfo2, self).get_KeyField()
    def get_IsComposite(self):
        '''Method IRelateInfo2.get_IsComposite

           OUTPUT
            composite           : VARIANT_BOOL*'''
        return super(IRelateInfo2, self).get_IsComposite()
    def get_RelationshipTableId(self):
        '''Method IRelateInfo2.get_RelationshipTableId

           OUTPUT
            TableID             : long*'''
        return super(IRelateInfo2, self).get_RelationshipTableId()
    def get_KeyFieldInRelationshipTable(self):
        '''Method IRelateInfo2.get_KeyFieldInRelationshipTable

           OUTPUT
            KeyField            : BSTR*'''
        return super(IRelateInfo2, self).get_KeyFieldInRelationshipTable()
    Cardinality = property(get_Cardinality, None, None)
    IsComposite = property(get_IsComposite, None, None)
    KeyField = property(get_KeyField, None, None)
    KeyFieldInRelationshipTable = property(get_KeyFieldInRelationshipTable, None, None)
    Name = property(get_Name, None, None)
    RelatedTableID = property(get_RelatedTableID, None, None)
    RelationshipID = property(get_RelationshipID, None, None)
    RelationshipTableId = property(get_RelationshipTableId, None, None)
    Role = property(get_Role, None, None)

class IMapTableInfo3(_esriCarto.IMapTableInfo3):
    _IID = uuid.UUID('824d76d9-dd2b-4197-98d0-460373f40626')
    def get_ID(self):
        '''Method IMapTableInfo3.get_ID

           OUTPUT
            TableID             : long*'''
        return super(IMapTableInfo3, self).get_ID()
    def get_Name(self):
        '''Method IMapTableInfo3.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapTableInfo3, self).get_Name()
    def get_Fields(self):
        '''Method IMapTableInfo3.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMapTableInfo3, self).get_Fields()
    def get_RelateInfos(self):
        '''Method IMapTableInfo3.get_RelateInfos

           OUTPUT
            RelateInfo          : IRelateInfos**'''
        return super(IMapTableInfo3, self).get_RelateInfos()
    def get_HasAttachments(self):
        '''Method IMapTableInfo3.get_HasAttachments

           OUTPUT
            HasAttachments      : VARIANT_BOOL*'''
        return super(IMapTableInfo3, self).get_HasAttachments()
    def get_HTMLPopupType(self):
        '''Method IMapTableInfo3.get_HTMLPopupType

           OUTPUT
            Type                : esriServerHTMLPopupType*'''
        return super(IMapTableInfo3, self).get_HTMLPopupType()
    def get_DisplayField(self):
        '''Method IMapTableInfo3.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMapTableInfo3, self).get_DisplayField()
    def get_OIDFieldName(self):
        '''Method IMapTableInfo3.get_OIDFieldName

           OUTPUT
            OIDFieldName        : BSTR*'''
        return super(IMapTableInfo3, self).get_OIDFieldName()
    def get_HasSubtype(self):
        '''Method IMapTableInfo3.get_HasSubtype

           OUTPUT
            HasSubtype          : VARIANT_BOOL*'''
        return super(IMapTableInfo3, self).get_HasSubtype()
    def get_SupportsStatistics(self):
        '''Method IMapTableInfo3.get_SupportsStatistics

           OUTPUT
            supportsStats       : VARIANT_BOOL*'''
        return super(IMapTableInfo3, self).get_SupportsStatistics()
    def get_SupportsAdvancedQueries(self):
        '''Method IMapTableInfo3.get_SupportsAdvancedQueries

           OUTPUT
            SupportsAdvancedQueries: VARIANT_BOOL*'''
        return super(IMapTableInfo3, self).get_SupportsAdvancedQueries()
    def get_DefinitionExpression(self, DefinitionExpression):
        '''Method IMapTableInfo3.get_DefinitionExpression

           INPUT
            DefinitionExpression: BSTR*'''
        return super(IMapTableInfo3, self).get_DefinitionExpression(DefinitionExpression)
    DisplayField = property(get_DisplayField, None, None)
    Fields = property(get_Fields, None, None)
    HTMLPopupType = property(get_HTMLPopupType, None, None)
    HasAttachments = property(get_HasAttachments, None, None)
    HasSubtype = property(get_HasSubtype, None, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)
    RelateInfos = property(get_RelateInfos, None, None)
    SupportsAdvancedQueries = property(get_SupportsAdvancedQueries, None, None)
    SupportsStatistics = property(get_SupportsStatistics, None, None)

class IMapServerObjectLANProxy(_esriCarto.IMapServerObjectLANProxy):
    _IID = uuid.UUID('826a202a-da00-403f-a18c-c5a7d75774a9')
    def get_PhysicalCacheDirectory(self):
        '''Method IMapServerObjectLANProxy.get_PhysicalCacheDirectory

           OUTPUT
            pCacheDir           : BSTR*'''
        return super(IMapServerObjectLANProxy, self).get_PhysicalCacheDirectory()
    PhysicalCacheDirectory = property(get_PhysicalCacheDirectory, None, None)

class IMapServerProxyImpl(_esriCarto.IMapServerProxyImpl):
    _IID = uuid.UUID('3135a572-5e65-4c3c-a044-1f529bf7b0f6')
    def GetMapTileEx(self, MapName, Level, Row, Column, CacheFormat):
        '''Method IMapServerProxyImpl.GetMapTileEx

           INPUTS
            MapName             : BSTR
            Level               : long
            Row                 : long
            Column              : long
            CacheFormat         : long

           OUTPUTS
            Data                : SAFEARRAY**
            pExpiryDateTime     : double*
            pTileState          : esriTileState*'''
        return super(IMapServerProxyImpl, self).GetMapTileEx(MapName, Level, Row, Column, CacheFormat)

class IMapServerSublayer(_esriCarto.IMapServerSublayer):
    _IID = uuid.UUID('b059b902-5c7a-4287-982e-ef0bc77c6aab')

    def __init__(self, *args, **kw):
        super(IMapServerSublayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HasLabels(self):
        '''Method IMapServerSublayer.get_HasLabels

           OUTPUT
            HasLabels           : VARIANT_BOOL*'''
        return super(IMapServerSublayer, self).get_HasLabels()
    def get_ShowLabels(self):
        '''Method IMapServerSublayer.get_ShowLabels

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IMapServerSublayer, self).get_ShowLabels()
    def put_ShowLabels(self, Show):
        '''Method IMapServerSublayer.put_ShowLabels

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IMapServerSublayer, self).put_ShowLabels(Show)
    def get_ScaleSymbols(self):
        '''Method IMapServerSublayer.get_ScaleSymbols

           OUTPUT
            ScaleSymbols        : VARIANT_BOOL*'''
        return super(IMapServerSublayer, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, ScaleSymbols):
        '''Method IMapServerSublayer.put_ScaleSymbols

           INPUT
            ScaleSymbols        : VARIANT_BOOL'''
        return super(IMapServerSublayer, self).put_ScaleSymbols(ScaleSymbols)
    def get_LayerDescription(self):
        '''Method IMapServerSublayer.get_LayerDescription

           OUTPUT
            layerDesc           : ILayerDescription**'''
        return super(IMapServerSublayer, self).get_LayerDescription()
    HasLabels = property(get_HasLabels, None, None)
    LayerDescription = property(get_LayerDescription, None, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)

class IMapServerLayer(_esriCarto.IMapServerLayer):
    _IID = uuid.UUID('e9b56157-7eb7-4db3-9958-afbf3b5e1470')

    def __init__(self, *args, **kw):
        super(IMapServerLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def LocalConnect(self, docLocation, MapName):
        '''Method IMapServerLayer.LocalConnect

           INPUTS
            docLocation         : BSTR
            MapName             : BSTR'''
        return super(IMapServerLayer, self).LocalConnect(docLocation, MapName)
    def ServerConnect(self, soName, MapName):
        '''Method IMapServerLayer.ServerConnect

           INPUTS
            soName              : IAGSServerObjectName*
            MapName             : BSTR'''
        return super(IMapServerLayer, self).ServerConnect(soName, MapName)
    def GetConnectionInfo(self):
        '''Method IMapServerLayer.GetConnectionInfo

           OUTPUTS
            soName              : IAGSServerObjectName**
            docLocation         : BSTR*
            MapName             : BSTR*'''
        return super(IMapServerLayer, self).GetConnectionInfo()
    def ClearDrawCache(self):
        '''Method IMapServerLayer.ClearDrawCache'''
        return super(IMapServerLayer, self).ClearDrawCache()
    def get_BackgroundColor(self):
        '''Method IMapServerLayer.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapServerLayer, self).get_BackgroundColor()
    def get_TransparentColor(self):
        '''Method IMapServerLayer.get_TransparentColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapServerLayer, self).get_TransparentColor()
    def put_TransparentColor(self, Color):
        '''Method IMapServerLayer.put_TransparentColor

           INPUT
            Color               : IColor*'''
        return super(IMapServerLayer, self).put_TransparentColor(Color)
    BackgroundColor = property(get_BackgroundColor, None, None)
    TransparentColor = property(get_TransparentColor, put_TransparentColor, None)

class IMapServerSublayer2(_esriCarto.IMapServerSublayer2):
    _IID = uuid.UUID('c044e0de-b4fb-471f-b0fd-7dfdc56991f1')

    def __init__(self, *args, **kw):
        super(IMapServerSublayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SourceID(self):
        '''Method IMapServerSublayer2.get_SourceID

           OUTPUT
            SourceID            : BSTR*'''
        return super(IMapServerSublayer2, self).get_SourceID()
    def put_SourceID(self, SourceID):
        '''Method IMapServerSublayer2.put_SourceID

           INPUT
            SourceID            : BSTR'''
        return super(IMapServerSublayer2, self).put_SourceID(SourceID)
    def get_HasLabels(self):
        '''Method IMapServerSublayer2.get_HasLabels

           OUTPUT
            HasLabels           : VARIANT_BOOL*'''
        return super(IMapServerSublayer2, self).get_HasLabels()
    def get_ShowLabels(self):
        '''Method IMapServerSublayer2.get_ShowLabels

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IMapServerSublayer2, self).get_ShowLabels()
    def put_ShowLabels(self, Show):
        '''Method IMapServerSublayer2.put_ShowLabels

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IMapServerSublayer2, self).put_ShowLabels(Show)
    def get_ScaleSymbols(self):
        '''Method IMapServerSublayer2.get_ScaleSymbols

           OUTPUT
            ScaleSymbols        : VARIANT_BOOL*'''
        return super(IMapServerSublayer2, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, ScaleSymbols):
        '''Method IMapServerSublayer2.put_ScaleSymbols

           INPUT
            ScaleSymbols        : VARIANT_BOOL'''
        return super(IMapServerSublayer2, self).put_ScaleSymbols(ScaleSymbols)
    def get_LayerDescription(self):
        '''Method IMapServerSublayer2.get_LayerDescription

           OUTPUT
            layerDesc           : ILayerDescription**'''
        return super(IMapServerSublayer2, self).get_LayerDescription()
    HasLabels = property(get_HasLabels, None, None)
    LayerDescription = property(get_LayerDescription, None, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    ShowLabels = property(get_ShowLabels, put_ShowLabels, None)
    SourceID = property(get_SourceID, put_SourceID, None)

class IMapServerGroupLayer(_esriCarto.IMapServerGroupLayer):
    _IID = uuid.UUID('c2bb4d11-0dfd-4e0f-bedc-3091e6d6d11e')
    def ShowLayers(self, Show, layerIds):
        '''Method IMapServerGroupLayer.ShowLayers

           INPUTS
            Show                : VARIANT_BOOL
            layerIds            : ILongArray*'''
        return super(IMapServerGroupLayer, self).ShowLayers(Show, layerIds)
    def get_Count(self):
        '''Method IMapServerGroupLayer.get_Count

           OUTPUT
            LayerCount          : long*'''
        return super(IMapServerGroupLayer, self).get_Count()
    def get_Layer(self, Index):
        '''Method IMapServerGroupLayer.get_Layer

           INPUT
            Index               : long

           OUTPUT
            Layer               : ILayer**'''
        return super(IMapServerGroupLayer, self).get_Layer(Index)
    Count = property(get_Count, None, None)
    Layer = IndexProperty(get_Layer, None)

class IMapServerRESTLayer(_esriCarto.IMapServerRESTLayer):
    _IID = uuid.UUID('086de767-1216-4ef6-813f-2d01ae4d9360')
    def Connect(self, restUrl):
        '''Method IMapServerRESTLayer.Connect

           INPUT
            restUrl             : BSTR'''
        return super(IMapServerRESTLayer, self).Connect(restUrl)
    def get_TransparentBackground(self):
        '''Method IMapServerRESTLayer.get_TransparentBackground

           OUTPUT
            TransparentBackground: VARIANT_BOOL*'''
        return super(IMapServerRESTLayer, self).get_TransparentBackground()
    TransparentBackground = property(get_TransparentBackground, None, None)

class IWMTSLayer(_esriCarto.IWMTSLayer):
    _IID = uuid.UUID('e817a24c-ba3e-4d03-892a-7b6eaa2a3128')

    def __init__(self, *args, **kw):
        super(IWMTSLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Connect(self, pConnectionName):
        '''Method IWMTSLayer.Connect

           INPUT
            pConnectionName     : IName*

           OUTPUT
            successful          : VARIANT_BOOL*'''
        return super(IWMTSLayer, self).Connect(pConnectionName)
    def get_DataSourceName(self):
        '''Method IWMTSLayer.get_DataSourceName

           OUTPUT
            ppConnectionName    : IName**'''
        return super(IWMTSLayer, self).get_DataSourceName()
    def put_DataSourceName(self, ppConnectionName):
        '''Method IWMTSLayer.put_DataSourceName

           INPUT
            ppConnectionName    : IName*'''
        return super(IWMTSLayer, self).put_DataSourceName(ppConnectionName)
    def get_WMTSConnection(self, pConnection):
        '''Method IWMTSLayer.get_WMTSConnection

           INPUT
            pConnection         : IWMTSConnection**'''
        return super(IWMTSLayer, self).get_WMTSConnection(pConnection)
    def get_LayerName(self):
        '''Method IWMTSLayer.get_LayerName

           OUTPUT
            LayerName           : BSTR*'''
        return super(IWMTSLayer, self).get_LayerName()
    def put_Dimensions(self, Dimensions):
        '''Method IWMTSLayer.put_Dimensions

           INPUT
            Dimensions          : IPropertySet*'''
        return super(IWMTSLayer, self).put_Dimensions(Dimensions)
    def get_Dimensions(self):
        '''Method IWMTSLayer.get_Dimensions

           OUTPUT
            Dimensions          : IPropertySet**'''
        return super(IWMTSLayer, self).get_Dimensions()
    def put_TileMatrixSet(self, tileMatrix):
        '''Method IWMTSLayer.put_TileMatrixSet

           INPUT
            tileMatrix          : BSTR'''
        return super(IWMTSLayer, self).put_TileMatrixSet(tileMatrix)
    def get_TileMatrixSet(self):
        '''Method IWMTSLayer.get_TileMatrixSet

           OUTPUT
            tileMatrix          : BSTR*'''
        return super(IWMTSLayer, self).get_TileMatrixSet()
    def get_ImageFormat(self):
        '''Method IWMTSLayer.get_ImageFormat

           OUTPUT
            ImageFormat         : BSTR*'''
        return super(IWMTSLayer, self).get_ImageFormat()
    def put_ImageFormat(self, ImageFormat):
        '''Method IWMTSLayer.put_ImageFormat

           INPUT
            ImageFormat         : BSTR'''
        return super(IWMTSLayer, self).put_ImageFormat(ImageFormat)
    def put_Style(self, styleName):
        '''Method IWMTSLayer.put_Style

           INPUT
            styleName           : BSTR'''
        return super(IWMTSLayer, self).put_Style(styleName)
    def get_Style(self):
        '''Method IWMTSLayer.get_Style

           OUTPUT
            styleName           : BSTR*'''
        return super(IWMTSLayer, self).get_Style()
    DataSourceName = property(get_DataSourceName, put_DataSourceName, None)
    Dimensions = property(get_Dimensions, put_Dimensions, None)
    ImageFormat = property(get_ImageFormat, put_ImageFormat, None)
    LayerName = property(get_LayerName, None, None)
    Style = property(get_Style, put_Style, None)
    TileMatrixSet = property(get_TileMatrixSet, put_TileMatrixSet, None)

class ITinRenderer(_esriCarto.ITinRenderer):
    _IID = uuid.UUID('466db6cd-80a6-11d2-81eb-00104bc4cd03')

    def __init__(self, *args, **kw):
        super(ITinRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Draw(self, DrawPhase, Display, aSpatialReference, TrackCancel):
        '''Method ITinRenderer.Draw

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            aSpatialReference   : ISpatialReference*
            TrackCancel         : ITrackCancel*'''
        return super(ITinRenderer, self).Draw(DrawPhase, Display, aSpatialReference, TrackCancel)
    def Copy(self, pSource):
        '''Method ITinRenderer.Copy

           INPUT
            pSource             : ITinRenderer*'''
        return super(ITinRenderer, self).Copy(pSource)
    def CanRender(self):
        '''Method ITinRenderer.CanRender

           OUTPUT
            pCanRender          : VARIANT_BOOL*'''
        return super(ITinRenderer, self).CanRender()
    def putref_Tin(self, ppTin):
        '''Method ITinRenderer.putref_Tin

           INPUT
            ppTin               : ITin*'''
        return super(ITinRenderer, self).putref_Tin(ppTin)
    def get_Tin(self):
        '''Method ITinRenderer.get_Tin

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinRenderer, self).get_Tin()
    def get_Name(self):
        '''Method ITinRenderer.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ITinRenderer, self).get_Name()
    def put_Name(self, Name):
        '''Method ITinRenderer.put_Name

           INPUT
            Name                : BSTR'''
        return super(ITinRenderer, self).put_Name(Name)
    def get_Visible(self):
        '''Method ITinRenderer.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITinRenderer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ITinRenderer.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITinRenderer, self).put_Visible(Visible)
    Name = property(get_Name, put_Name, None)
    Tin = property(get_Tin, putref_Tin, None)
    Visible = property(get_Visible, put_Visible, None)

class ITinIllumination(_esriCarto.ITinIllumination):
    _IID = uuid.UUID('4536d29b-9e81-11d2-81ed-00104bc4cd03')

    def __init__(self, *args, **kw):
        super(ITinIllumination, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Illuminate(self):
        '''Method ITinIllumination.get_Illuminate

           OUTPUT
            Illuminate          : VARIANT_BOOL*'''
        return super(ITinIllumination, self).get_Illuminate()
    def put_Illuminate(self, Illuminate):
        '''Method ITinIllumination.put_Illuminate

           INPUT
            Illuminate          : VARIANT_BOOL'''
        return super(ITinIllumination, self).put_Illuminate(Illuminate)
    Illuminate = property(get_Illuminate, put_Illuminate, None)

class ITinSingleSymbolRenderer(_esriCarto.ITinSingleSymbolRenderer):
    _IID = uuid.UUID('f12e6ded-384c-11d2-b1f2-00c04f8edeff')

    def __init__(self, *args, **kw):
        super(ITinSingleSymbolRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method ITinSingleSymbolRenderer.get_Symbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ITinSingleSymbolRenderer, self).get_Symbol()
    def putref_Symbol(self, Symbol):
        '''Method ITinSingleSymbolRenderer.putref_Symbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ITinSingleSymbolRenderer, self).putref_Symbol(Symbol)
    def get_Label(self):
        '''Method ITinSingleSymbolRenderer.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(ITinSingleSymbolRenderer, self).get_Label()
    def put_Label(self, Label):
        '''Method ITinSingleSymbolRenderer.put_Label

           INPUT
            Label               : BSTR'''
        return super(ITinSingleSymbolRenderer, self).put_Label(Label)
    def get_Description(self):
        '''Method ITinSingleSymbolRenderer.get_Description

           OUTPUT
            Text                : BSTR*'''
        return super(ITinSingleSymbolRenderer, self).get_Description()
    def put_Description(self, Text):
        '''Method ITinSingleSymbolRenderer.put_Description

           INPUT
            Text                : BSTR'''
        return super(ITinSingleSymbolRenderer, self).put_Description(Text)
    Description = property(get_Description, put_Description, None)
    Label = property(get_Label, put_Label, None)
    Symbol = property(get_Symbol, putref_Symbol, None)

class ITinContourRenderer(_esriCarto.ITinContourRenderer):
    _IID = uuid.UUID('8a4eea7b-a3f7-4651-8bbd-b6bf08b11a19')

    def __init__(self, *args, **kw):
        super(ITinContourRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_referenceContourHeight(self):
        '''Method ITinContourRenderer.get_referenceContourHeight

           OUTPUT
            Height              : double*'''
        return super(ITinContourRenderer, self).get_referenceContourHeight()
    def put_referenceContourHeight(self, Height):
        '''Method ITinContourRenderer.put_referenceContourHeight

           INPUT
            Height              : double'''
        return super(ITinContourRenderer, self).put_referenceContourHeight(Height)
    def get_contourInterval(self):
        '''Method ITinContourRenderer.get_contourInterval

           OUTPUT
            Interval            : double*'''
        return super(ITinContourRenderer, self).get_contourInterval()
    def put_contourInterval(self, Interval):
        '''Method ITinContourRenderer.put_contourInterval

           INPUT
            Interval            : double'''
        return super(ITinContourRenderer, self).put_contourInterval(Interval)
    def get_indexContourFactor(self):
        '''Method ITinContourRenderer.get_indexContourFactor

           OUTPUT
            factor              : long*'''
        return super(ITinContourRenderer, self).get_indexContourFactor()
    def put_indexContourFactor(self, factor):
        '''Method ITinContourRenderer.put_indexContourFactor

           INPUT
            factor              : long'''
        return super(ITinContourRenderer, self).put_indexContourFactor(factor)
    def get_ContourSymbol(self):
        '''Method ITinContourRenderer.get_ContourSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ITinContourRenderer, self).get_ContourSymbol()
    def putref_ContourSymbol(self, Symbol):
        '''Method ITinContourRenderer.putref_ContourSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ITinContourRenderer, self).putref_ContourSymbol(Symbol)
    def get_ContourLabel(self):
        '''Method ITinContourRenderer.get_ContourLabel

           OUTPUT
            Label               : BSTR*'''
        return super(ITinContourRenderer, self).get_ContourLabel()
    def put_ContourLabel(self, Label):
        '''Method ITinContourRenderer.put_ContourLabel

           INPUT
            Label               : BSTR'''
        return super(ITinContourRenderer, self).put_ContourLabel(Label)
    def get_ContourDescription(self):
        '''Method ITinContourRenderer.get_ContourDescription

           OUTPUT
            Text                : BSTR*'''
        return super(ITinContourRenderer, self).get_ContourDescription()
    def put_ContourDescription(self, Text):
        '''Method ITinContourRenderer.put_ContourDescription

           INPUT
            Text                : BSTR'''
        return super(ITinContourRenderer, self).put_ContourDescription(Text)
    def get_IndexContourSymbol(self):
        '''Method ITinContourRenderer.get_IndexContourSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ITinContourRenderer, self).get_IndexContourSymbol()
    def putref_IndexContourSymbol(self, Symbol):
        '''Method ITinContourRenderer.putref_IndexContourSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ITinContourRenderer, self).putref_IndexContourSymbol(Symbol)
    def get_IndexContourLabel(self):
        '''Method ITinContourRenderer.get_IndexContourLabel

           OUTPUT
            Label               : BSTR*'''
        return super(ITinContourRenderer, self).get_IndexContourLabel()
    def put_IndexContourLabel(self, Label):
        '''Method ITinContourRenderer.put_IndexContourLabel

           INPUT
            Label               : BSTR'''
        return super(ITinContourRenderer, self).put_IndexContourLabel(Label)
    def get_IndexContourDescription(self):
        '''Method ITinContourRenderer.get_IndexContourDescription

           OUTPUT
            Text                : BSTR*'''
        return super(ITinContourRenderer, self).get_IndexContourDescription()
    def put_IndexContourDescription(self, Text):
        '''Method ITinContourRenderer.put_IndexContourDescription

           INPUT
            Text                : BSTR'''
        return super(ITinContourRenderer, self).put_IndexContourDescription(Text)
    ContourDescription = property(get_ContourDescription, put_ContourDescription, None)
    ContourLabel = property(get_ContourLabel, put_ContourLabel, None)
    ContourSymbol = property(get_ContourSymbol, putref_ContourSymbol, None)
    IndexContourDescription = property(get_IndexContourDescription, put_IndexContourDescription, None)
    IndexContourLabel = property(get_IndexContourLabel, put_IndexContourLabel, None)
    IndexContourSymbol = property(get_IndexContourSymbol, putref_IndexContourSymbol, None)
    contourInterval = property(get_contourInterval, put_contourInterval, None)
    indexContourFactor = property(get_indexContourFactor, put_indexContourFactor, None)
    referenceContourHeight = property(get_referenceContourHeight, put_referenceContourHeight, None)

class ITinColorRampRenderer(_esriCarto.ITinColorRampRenderer):
    _IID = uuid.UUID('91fb1b61-8944-11d2-81ec-00104bc4cd03')

    def __init__(self, *args, **kw):
        super(ITinColorRampRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BreakCount(self):
        '''Method ITinColorRampRenderer.get_BreakCount

           OUTPUT
            ValueCount          : long*'''
        return super(ITinColorRampRenderer, self).get_BreakCount()
    def put_BreakCount(self, ValueCount):
        '''Method ITinColorRampRenderer.put_BreakCount

           INPUT
            ValueCount          : long'''
        return super(ITinColorRampRenderer, self).put_BreakCount(ValueCount)
    def get_Symbol(self, Index):
        '''Method ITinColorRampRenderer.get_Symbol

           INPUT
            Index               : long

           OUTPUT
            sym                 : ISymbol**'''
        return super(ITinColorRampRenderer, self).get_Symbol(Index)
    def put_Symbol(self, Index, sym):
        '''Method ITinColorRampRenderer.put_Symbol

           INPUTS
            Index               : long
            sym                 : ISymbol*'''
        return super(ITinColorRampRenderer, self).put_Symbol(Index, sym)
    def get_Label(self, Index):
        '''Method ITinColorRampRenderer.get_Label

           INPUT
            Index               : long

           OUTPUT
            Label               : BSTR*'''
        return super(ITinColorRampRenderer, self).get_Label(Index)
    def put_Label(self, Index, Label):
        '''Method ITinColorRampRenderer.put_Label

           INPUTS
            Index               : long
            Label               : BSTR'''
        return super(ITinColorRampRenderer, self).put_Label(Index, Label)
    def get_Description(self, Index):
        '''Method ITinColorRampRenderer.get_Description

           INPUT
            Index               : long

           OUTPUT
            Text                : BSTR*'''
        return super(ITinColorRampRenderer, self).get_Description(Index)
    def put_Description(self, Index, Text):
        '''Method ITinColorRampRenderer.put_Description

           INPUTS
            Index               : long
            Text                : BSTR'''
        return super(ITinColorRampRenderer, self).put_Description(Index, Text)
    def get_Break(self, Index):
        '''Method ITinColorRampRenderer.get_Break

           INPUT
            Index               : long

           OUTPUT
            Value               : double*'''
        return super(ITinColorRampRenderer, self).get_Break(Index)
    def put_Break(self, Index, Value):
        '''Method ITinColorRampRenderer.put_Break

           INPUTS
            Index               : long
            Value               : double'''
        return super(ITinColorRampRenderer, self).put_Break(Index, Value)
    def get_MinimumBreak(self):
        '''Method ITinColorRampRenderer.get_MinimumBreak

           OUTPUT
            Value               : double*'''
        return super(ITinColorRampRenderer, self).get_MinimumBreak()
    def put_MinimumBreak(self, Value):
        '''Method ITinColorRampRenderer.put_MinimumBreak

           INPUT
            Value               : double'''
        return super(ITinColorRampRenderer, self).put_MinimumBreak(Value)
    def get_SortClassesAscending(self):
        '''Method ITinColorRampRenderer.get_SortClassesAscending

           OUTPUT
            Ascending           : VARIANT_BOOL*'''
        return super(ITinColorRampRenderer, self).get_SortClassesAscending()
    def put_SortClassesAscending(self, Ascending):
        '''Method ITinColorRampRenderer.put_SortClassesAscending

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(ITinColorRampRenderer, self).put_SortClassesAscending(Ascending)
    Break = property(None, put_Break, None)
    BreakCount = property(get_BreakCount, put_BreakCount, None)
    Description = property(None, put_Description, None)
    Label = property(None, put_Label, None)
    MinimumBreak = property(get_MinimumBreak, put_MinimumBreak, None)
    SortClassesAscending = property(get_SortClassesAscending, put_SortClassesAscending, None)
    Symbol = property(None, put_Symbol, None)
    Break = IndexProperty(get_Break, None)
    Description = IndexProperty(get_Description, None)
    Label = IndexProperty(get_Label, None)
    Symbol = IndexProperty(get_Symbol, None)

class ITinUniqueValueRenderer(_esriCarto.ITinUniqueValueRenderer):
    _IID = uuid.UUID('aa8745c7-aa66-11d2-81fa-00104bc4cd03')

    def __init__(self, *args, **kw):
        super(ITinUniqueValueRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefaultSymbol(self):
        '''Method ITinUniqueValueRenderer.get_DefaultSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ITinUniqueValueRenderer, self).get_DefaultSymbol()
    def putref_DefaultSymbol(self, Symbol):
        '''Method ITinUniqueValueRenderer.putref_DefaultSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ITinUniqueValueRenderer, self).putref_DefaultSymbol(Symbol)
    def get_DefaultLabel(self):
        '''Method ITinUniqueValueRenderer.get_DefaultLabel

           OUTPUT
            Label               : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_DefaultLabel()
    def put_DefaultLabel(self, Label):
        '''Method ITinUniqueValueRenderer.put_DefaultLabel

           INPUT
            Label               : BSTR'''
        return super(ITinUniqueValueRenderer, self).put_DefaultLabel(Label)
    def get_UseDefaultSymbol(self):
        '''Method ITinUniqueValueRenderer.get_UseDefaultSymbol

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ITinUniqueValueRenderer, self).get_UseDefaultSymbol()
    def put_UseDefaultSymbol(self, flag):
        '''Method ITinUniqueValueRenderer.put_UseDefaultSymbol

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ITinUniqueValueRenderer, self).put_UseDefaultSymbol(flag)
    def get_ValueCount(self):
        '''Method ITinUniqueValueRenderer.get_ValueCount

           OUTPUT
            ValueCount          : long*'''
        return super(ITinUniqueValueRenderer, self).get_ValueCount()
    def get_Value(self, Index):
        '''Method ITinUniqueValueRenderer.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method ITinUniqueValueRenderer.put_Value

           INPUTS
            Index               : long
            Value               : BSTR'''
        return super(ITinUniqueValueRenderer, self).put_Value(Index, Value)
    def get_ReferenceValue(self, Value):
        '''Method ITinUniqueValueRenderer.get_ReferenceValue

           INPUT
            Value               : BSTR

           OUTPUT
            refValue            : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_ReferenceValue(Value)
    def AddReferenceValue(self, Value, refValue):
        '''Method ITinUniqueValueRenderer.AddReferenceValue

           INPUTS
            Value               : BSTR
            refValue            : BSTR'''
        return super(ITinUniqueValueRenderer, self).AddReferenceValue(Value, refValue)
    def get_Symbol(self, Value):
        '''Method ITinUniqueValueRenderer.get_Symbol

           INPUT
            Value               : BSTR

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ITinUniqueValueRenderer, self).get_Symbol(Value)
    def put_Symbol(self, Value, Symbol):
        '''Method ITinUniqueValueRenderer.put_Symbol

           INPUTS
            Value               : BSTR
            Symbol              : ISymbol*'''
        return super(ITinUniqueValueRenderer, self).put_Symbol(Value, Symbol)
    def get_Label(self, Value):
        '''Method ITinUniqueValueRenderer.get_Label

           INPUT
            Value               : BSTR

           OUTPUT
            Label               : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_Label(Value)
    def put_Label(self, Value, Label):
        '''Method ITinUniqueValueRenderer.put_Label

           INPUTS
            Value               : BSTR
            Label               : BSTR'''
        return super(ITinUniqueValueRenderer, self).put_Label(Value, Label)
    def get_Description(self, Value):
        '''Method ITinUniqueValueRenderer.get_Description

           INPUT
            Value               : BSTR

           OUTPUT
            Text                : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_Description(Value)
    def put_Description(self, Value, Text):
        '''Method ITinUniqueValueRenderer.put_Description

           INPUTS
            Value               : BSTR
            Text                : BSTR'''
        return super(ITinUniqueValueRenderer, self).put_Description(Value, Text)
    def get_Heading(self, Value):
        '''Method ITinUniqueValueRenderer.get_Heading

           INPUT
            Value               : BSTR

           OUTPUT
            Heading             : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_Heading(Value)
    def put_Heading(self, Value, Heading):
        '''Method ITinUniqueValueRenderer.put_Heading

           INPUTS
            Value               : BSTR
            Heading             : BSTR'''
        return super(ITinUniqueValueRenderer, self).put_Heading(Value, Heading)
    def AddValue(self, Value, Heading, Symbol):
        '''Method ITinUniqueValueRenderer.AddValue

           INPUTS
            Value               : BSTR
            Heading             : BSTR
            Symbol              : ISymbol*'''
        return super(ITinUniqueValueRenderer, self).AddValue(Value, Heading, Symbol)
    def RemoveValue(self, Value):
        '''Method ITinUniqueValueRenderer.RemoveValue

           INPUT
            Value               : BSTR'''
        return super(ITinUniqueValueRenderer, self).RemoveValue(Value)
    def RemoveAllValues(self):
        '''Method ITinUniqueValueRenderer.RemoveAllValues'''
        return super(ITinUniqueValueRenderer, self).RemoveAllValues()
    def get_ColorScheme(self):
        '''Method ITinUniqueValueRenderer.get_ColorScheme

           OUTPUT
            Name                : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_ColorScheme()
    def put_ColorScheme(self, Name):
        '''Method ITinUniqueValueRenderer.put_ColorScheme

           INPUT
            Name                : BSTR'''
        return super(ITinUniqueValueRenderer, self).put_ColorScheme(Name)
    def get_LookupStyleset(self):
        '''Method ITinUniqueValueRenderer.get_LookupStyleset

           OUTPUT
            Name                : BSTR*'''
        return super(ITinUniqueValueRenderer, self).get_LookupStyleset()
    def put_LookupStyleset(self, Name):
        '''Method ITinUniqueValueRenderer.put_LookupStyleset

           INPUT
            Name                : BSTR'''
        return super(ITinUniqueValueRenderer, self).put_LookupStyleset(Name)
    ColorScheme = property(get_ColorScheme, put_ColorScheme, None)
    DefaultLabel = property(get_DefaultLabel, put_DefaultLabel, None)
    DefaultSymbol = property(get_DefaultSymbol, putref_DefaultSymbol, None)
    Description = property(None, put_Description, None)
    Heading = property(None, put_Heading, None)
    Label = property(None, put_Label, None)
    LookupStyleset = property(get_LookupStyleset, put_LookupStyleset, None)
    Symbol = property(None, put_Symbol, None)
    UseDefaultSymbol = property(get_UseDefaultSymbol, put_UseDefaultSymbol, None)
    Value = property(None, put_Value, None)
    ValueCount = property(get_ValueCount, None, None)
    Description = IndexProperty(get_Description, None)
    Heading = IndexProperty(get_Heading, None)
    Label = IndexProperty(get_Label, None)
    ReferenceValue = IndexProperty(get_ReferenceValue, None)
    Symbol = IndexProperty(get_Symbol, None)
    Value = IndexProperty(get_Value, None)

class ITerrainRenderer(_esriCarto.ITerrainRenderer):
    _IID = uuid.UUID('1f991990-0063-419d-9c83-56aa729c77c4')

    def __init__(self, *args, **kw):
        super(ITerrainRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Terrain(self, ppTerrain):
        '''Method ITerrainRenderer.putref_Terrain

           INPUT
            ppTerrain           : ITerrain*'''
        return super(ITerrainRenderer, self).putref_Terrain(ppTerrain)
    def get_Terrain(self):
        '''Method ITerrainRenderer.get_Terrain

           OUTPUT
            ppTerrain           : ITerrain**'''
        return super(ITerrainRenderer, self).get_Terrain()
    def Draw(self, DrawPhase, Display, aSpatialReference, TrackCancel):
        '''Method ITinRenderer.Draw (from ITinRenderer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            aSpatialReference   : ISpatialReference*
            TrackCancel         : ITrackCancel*'''
        return super(ITerrainRenderer, self).Draw(DrawPhase, Display, aSpatialReference, TrackCancel)
    def Copy(self, pSource):
        '''Method ITinRenderer.Copy (from ITinRenderer)

           INPUT
            pSource             : ITinRenderer*'''
        return super(ITerrainRenderer, self).Copy(pSource)
    def CanRender(self):
        '''Method ITinRenderer.CanRender (from ITinRenderer)

           OUTPUT
            pCanRender          : VARIANT_BOOL*'''
        return super(ITerrainRenderer, self).CanRender()
    def putref_Tin(self, ppTin):
        '''Method ITinRenderer.putref_Tin (from ITinRenderer)

           INPUT
            ppTin               : ITin*'''
        return super(ITerrainRenderer, self).putref_Tin(ppTin)
    def get_Tin(self):
        '''Method ITinRenderer.get_Tin (from ITinRenderer)

           OUTPUT
            ppTin               : ITin**'''
        return super(ITerrainRenderer, self).get_Tin()
    def get_Name(self):
        '''Method ITinRenderer.get_Name (from ITinRenderer)

           OUTPUT
            Name                : BSTR*'''
        return super(ITerrainRenderer, self).get_Name()
    def put_Name(self, Name):
        '''Method ITinRenderer.put_Name (from ITinRenderer)

           INPUT
            Name                : BSTR'''
        return super(ITerrainRenderer, self).put_Name(Name)
    def get_Visible(self):
        '''Method ITinRenderer.get_Visible (from ITinRenderer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITerrainRenderer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ITinRenderer.put_Visible (from ITinRenderer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITerrainRenderer, self).put_Visible(Visible)
    Name = property(get_Name, put_Name, None)
    Terrain = property(get_Terrain, putref_Terrain, None)
    Tin = property(get_Tin, putref_Tin, None)
    Visible = property(get_Visible, put_Visible, None)

class ITerrainRenderer2(_esriCarto.ITerrainRenderer2):
    _IID = uuid.UUID('0a7ea67a-3c04-4204-9fcc-bc56d18c773a')

    def __init__(self, *args, **kw):
        super(ITerrainRenderer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AreaOfInterest(self, ppAOI):
        '''Method ITerrainRenderer2.put_AreaOfInterest

           INPUT
            ppAOI               : IEnvelope*'''
        return super(ITerrainRenderer2, self).put_AreaOfInterest(ppAOI)
    def get_AreaOfInterest(self):
        '''Method ITerrainRenderer2.get_AreaOfInterest

           OUTPUT
            ppAOI               : IEnvelope**'''
        return super(ITerrainRenderer2, self).get_AreaOfInterest()
    def put_Resolution(self, pResolution):
        '''Method ITerrainRenderer2.put_Resolution

           INPUT
            pResolution         : double'''
        return super(ITerrainRenderer2, self).put_Resolution(pResolution)
    def get_Resolution(self):
        '''Method ITerrainRenderer2.get_Resolution

           OUTPUT
            pResolution         : double*'''
        return super(ITerrainRenderer2, self).get_Resolution()
    def putref_Terrain(self, ppTerrain):
        '''Method ITerrainRenderer.putref_Terrain (from ITerrainRenderer)

           INPUT
            ppTerrain           : ITerrain*'''
        return super(ITerrainRenderer2, self).putref_Terrain(ppTerrain)
    def get_Terrain(self):
        '''Method ITerrainRenderer.get_Terrain (from ITerrainRenderer)

           OUTPUT
            ppTerrain           : ITerrain**'''
        return super(ITerrainRenderer2, self).get_Terrain()
    def Draw(self, DrawPhase, Display, aSpatialReference, TrackCancel):
        '''Method ITinRenderer.Draw (from ITinRenderer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            aSpatialReference   : ISpatialReference*
            TrackCancel         : ITrackCancel*'''
        return super(ITerrainRenderer2, self).Draw(DrawPhase, Display, aSpatialReference, TrackCancel)
    def Copy(self, pSource):
        '''Method ITinRenderer.Copy (from ITinRenderer)

           INPUT
            pSource             : ITinRenderer*'''
        return super(ITerrainRenderer2, self).Copy(pSource)
    def CanRender(self):
        '''Method ITinRenderer.CanRender (from ITinRenderer)

           OUTPUT
            pCanRender          : VARIANT_BOOL*'''
        return super(ITerrainRenderer2, self).CanRender()
    def putref_Tin(self, ppTin):
        '''Method ITinRenderer.putref_Tin (from ITinRenderer)

           INPUT
            ppTin               : ITin*'''
        return super(ITerrainRenderer2, self).putref_Tin(ppTin)
    def get_Tin(self):
        '''Method ITinRenderer.get_Tin (from ITinRenderer)

           OUTPUT
            ppTin               : ITin**'''
        return super(ITerrainRenderer2, self).get_Tin()
    def get_Name(self):
        '''Method ITinRenderer.get_Name (from ITinRenderer)

           OUTPUT
            Name                : BSTR*'''
        return super(ITerrainRenderer2, self).get_Name()
    def put_Name(self, Name):
        '''Method ITinRenderer.put_Name (from ITinRenderer)

           INPUT
            Name                : BSTR'''
        return super(ITerrainRenderer2, self).put_Name(Name)
    def get_Visible(self):
        '''Method ITinRenderer.get_Visible (from ITinRenderer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITerrainRenderer2, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ITinRenderer.put_Visible (from ITinRenderer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITerrainRenderer2, self).put_Visible(Visible)
    AreaOfInterest = property(get_AreaOfInterest, put_AreaOfInterest, None)
    Name = property(get_Name, put_Name, None)
    Resolution = property(get_Resolution, put_Resolution, None)
    Terrain = property(get_Terrain, putref_Terrain, None)
    Tin = property(get_Tin, putref_Tin, None)
    Visible = property(get_Visible, put_Visible, None)

class IDatasetRenderer(_esriCarto.IDatasetRenderer):
    _IID = uuid.UUID('2aa7619b-3861-402e-bced-3ba50c62758f')

    def __init__(self, *args, **kw):
        super(IDatasetRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Dataset(self, ppDataset):
        '''Method IDatasetRenderer.putref_Dataset

           INPUT
            ppDataset           : IDataset*'''
        return super(IDatasetRenderer, self).putref_Dataset(ppDataset)
    def get_Dataset(self):
        '''Method IDatasetRenderer.get_Dataset

           OUTPUT
            ppDataset           : IDataset**'''
        return super(IDatasetRenderer, self).get_Dataset()
    Dataset = property(get_Dataset, putref_Dataset, None)

class IMultiResolutionRenderer(_esriCarto.IMultiResolutionRenderer):
    _IID = uuid.UUID('d16a4d52-a926-4e8e-a7a2-535950c86afa')

    def __init__(self, *args, **kw):
        super(IMultiResolutionRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AreaOfInterest(self, ppAOI):
        '''Method IMultiResolutionRenderer.put_AreaOfInterest

           INPUT
            ppAOI               : IEnvelope*'''
        return super(IMultiResolutionRenderer, self).put_AreaOfInterest(ppAOI)
    def get_AreaOfInterest(self):
        '''Method IMultiResolutionRenderer.get_AreaOfInterest

           OUTPUT
            ppAOI               : IEnvelope**'''
        return super(IMultiResolutionRenderer, self).get_AreaOfInterest()
    def put_Resolution(self, pResolution):
        '''Method IMultiResolutionRenderer.put_Resolution

           INPUT
            pResolution         : double'''
        return super(IMultiResolutionRenderer, self).put_Resolution(pResolution)
    def get_Resolution(self):
        '''Method IMultiResolutionRenderer.get_Resolution

           OUTPUT
            pResolution         : double*'''
        return super(IMultiResolutionRenderer, self).get_Resolution()
    def put_MinVisibleResolution(self, pResolution):
        '''Method IMultiResolutionRenderer.put_MinVisibleResolution

           INPUT
            pResolution         : double'''
        return super(IMultiResolutionRenderer, self).put_MinVisibleResolution(pResolution)
    def get_MinVisibleResolution(self):
        '''Method IMultiResolutionRenderer.get_MinVisibleResolution

           OUTPUT
            pResolution         : double*'''
        return super(IMultiResolutionRenderer, self).get_MinVisibleResolution()
    AreaOfInterest = property(get_AreaOfInterest, put_AreaOfInterest, None)
    MinVisibleResolution = property(get_MinVisibleResolution, put_MinVisibleResolution, None)
    Resolution = property(get_Resolution, put_Resolution, None)

class ITerrainAttributeRenderer(_esriCarto.ITerrainAttributeRenderer):
    _IID = uuid.UUID('6b2403f7-7d51-4647-a46a-5f8ea269f273')

    def __init__(self, *args, **kw):
        super(ITerrainAttributeRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AttributeFieldName(self, pName):
        '''Method ITerrainAttributeRenderer.put_AttributeFieldName

           INPUT
            pName               : BSTR'''
        return super(ITerrainAttributeRenderer, self).put_AttributeFieldName(pName)
    def get_AttributeFieldName(self):
        '''Method ITerrainAttributeRenderer.get_AttributeFieldName

           OUTPUT
            pName               : BSTR*'''
        return super(ITerrainAttributeRenderer, self).get_AttributeFieldName()
    def SetDataSources(self, pDataSources):
        '''Method ITerrainAttributeRenderer.SetDataSources

           INPUT
            pDataSources        : ILongArray*'''
        return super(ITerrainAttributeRenderer, self).SetDataSources(pDataSources)
    def GetDataSources(self):
        '''Method ITerrainAttributeRenderer.GetDataSources

           OUTPUT
            ppDataSources       : ILongArray**'''
        return super(ITerrainAttributeRenderer, self).GetDataSources()
    def RedefineSymbols(self):
        '''Method ITerrainAttributeRenderer.RedefineSymbols'''
        return super(ITerrainAttributeRenderer, self).RedefineSymbols()
    def put_AreaOfInterest(self, ppAOI):
        '''Method ITerrainRenderer2.put_AreaOfInterest (from ITerrainRenderer2)

           INPUT
            ppAOI               : IEnvelope*'''
        return super(ITerrainAttributeRenderer, self).put_AreaOfInterest(ppAOI)
    def get_AreaOfInterest(self):
        '''Method ITerrainRenderer2.get_AreaOfInterest (from ITerrainRenderer2)

           OUTPUT
            ppAOI               : IEnvelope**'''
        return super(ITerrainAttributeRenderer, self).get_AreaOfInterest()
    def put_Resolution(self, pResolution):
        '''Method ITerrainRenderer2.put_Resolution (from ITerrainRenderer2)

           INPUT
            pResolution         : double'''
        return super(ITerrainAttributeRenderer, self).put_Resolution(pResolution)
    def get_Resolution(self):
        '''Method ITerrainRenderer2.get_Resolution (from ITerrainRenderer2)

           OUTPUT
            pResolution         : double*'''
        return super(ITerrainAttributeRenderer, self).get_Resolution()
    def putref_Terrain(self, ppTerrain):
        '''Method ITerrainRenderer.putref_Terrain (from ITerrainRenderer)

           INPUT
            ppTerrain           : ITerrain*'''
        return super(ITerrainAttributeRenderer, self).putref_Terrain(ppTerrain)
    def get_Terrain(self):
        '''Method ITerrainRenderer.get_Terrain (from ITerrainRenderer)

           OUTPUT
            ppTerrain           : ITerrain**'''
        return super(ITerrainAttributeRenderer, self).get_Terrain()
    def Draw(self, DrawPhase, Display, aSpatialReference, TrackCancel):
        '''Method ITinRenderer.Draw (from ITinRenderer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            aSpatialReference   : ISpatialReference*
            TrackCancel         : ITrackCancel*'''
        return super(ITerrainAttributeRenderer, self).Draw(DrawPhase, Display, aSpatialReference, TrackCancel)
    def Copy(self, pSource):
        '''Method ITinRenderer.Copy (from ITinRenderer)

           INPUT
            pSource             : ITinRenderer*'''
        return super(ITerrainAttributeRenderer, self).Copy(pSource)
    def CanRender(self):
        '''Method ITinRenderer.CanRender (from ITinRenderer)

           OUTPUT
            pCanRender          : VARIANT_BOOL*'''
        return super(ITerrainAttributeRenderer, self).CanRender()
    def putref_Tin(self, ppTin):
        '''Method ITinRenderer.putref_Tin (from ITinRenderer)

           INPUT
            ppTin               : ITin*'''
        return super(ITerrainAttributeRenderer, self).putref_Tin(ppTin)
    def get_Tin(self):
        '''Method ITinRenderer.get_Tin (from ITinRenderer)

           OUTPUT
            ppTin               : ITin**'''
        return super(ITerrainAttributeRenderer, self).get_Tin()
    def get_Name(self):
        '''Method ITinRenderer.get_Name (from ITinRenderer)

           OUTPUT
            Name                : BSTR*'''
        return super(ITerrainAttributeRenderer, self).get_Name()
    def put_Name(self, Name):
        '''Method ITinRenderer.put_Name (from ITinRenderer)

           INPUT
            Name                : BSTR'''
        return super(ITerrainAttributeRenderer, self).put_Name(Name)
    def get_Visible(self):
        '''Method ITinRenderer.get_Visible (from ITinRenderer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITerrainAttributeRenderer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ITinRenderer.put_Visible (from ITinRenderer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITerrainAttributeRenderer, self).put_Visible(Visible)
    AreaOfInterest = property(get_AreaOfInterest, put_AreaOfInterest, None)
    AttributeFieldName = property(get_AttributeFieldName, put_AttributeFieldName, None)
    Name = property(get_Name, put_Name, None)
    Resolution = property(get_Resolution, put_Resolution, None)
    Terrain = property(get_Terrain, putref_Terrain, None)
    Tin = property(get_Tin, putref_Tin, None)
    Visible = property(get_Visible, put_Visible, None)

class ILasAttributeRenderer(_esriCarto.ILasAttributeRenderer):
    _IID = uuid.UUID('6005feb9-c92b-46b5-bb6a-f8e92bd013ca')

    def __init__(self, *args, **kw):
        super(ILasAttributeRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Filter(self, ppFilter):
        '''Method ILasAttributeRenderer.putref_Filter

           INPUT
            ppFilter            : ILasPointFilter*'''
        return super(ILasAttributeRenderer, self).putref_Filter(ppFilter)
    def get_Filter(self):
        '''Method ILasAttributeRenderer.get_Filter

           OUTPUT
            ppFilter            : ILasPointFilter**'''
        return super(ILasAttributeRenderer, self).get_Filter()
    def put_ThinningFactor(self, pFactor):
        '''Method ILasAttributeRenderer.put_ThinningFactor

           INPUT
            pFactor             : double'''
        return super(ILasAttributeRenderer, self).put_ThinningFactor(pFactor)
    def get_ThinningFactor(self):
        '''Method ILasAttributeRenderer.get_ThinningFactor

           OUTPUT
            pFactor             : double*'''
        return super(ILasAttributeRenderer, self).get_ThinningFactor()
    def put_Attribute(self, pType):
        '''Method ILasAttributeRenderer.put_Attribute

           INPUT
            pType               : esriLasAttributeType'''
        return super(ILasAttributeRenderer, self).put_Attribute(pType)
    def get_Attribute(self):
        '''Method ILasAttributeRenderer.get_Attribute

           OUTPUT
            pType               : esriLasAttributeType*'''
        return super(ILasAttributeRenderer, self).get_Attribute()
    Attribute = property(get_Attribute, put_Attribute, None)
    Filter = property(get_Filter, putref_Filter, None)
    ThinningFactor = property(get_ThinningFactor, put_ThinningFactor, None)

class ITinLayer(_esriCarto.ITinLayer):
    _IID = uuid.UUID('fe308f36-bdca-11d1-a523-0000f8774f0f')

    def __init__(self, *args, **kw):
        super(ITinLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Dataset(self):
        '''Method ITinLayer.get_Dataset

           OUTPUT
            Tin                 : ITin**'''
        return super(ITinLayer, self).get_Dataset()
    def putref_Dataset(self, Tin):
        '''Method ITinLayer.putref_Dataset

           INPUT
            Tin                 : ITin*'''
        return super(ITinLayer, self).putref_Dataset(Tin)
    def get_RendererCount(self):
        '''Method ITinLayer.get_RendererCount

           OUTPUT
            RendererCount       : long*'''
        return super(ITinLayer, self).get_RendererCount()
    def GetRenderer(self, Index):
        '''Method ITinLayer.GetRenderer

           INPUT
            Index               : long

           OUTPUT
            Renderer            : ITinRenderer**'''
        return super(ITinLayer, self).GetRenderer(Index)
    def AddRenderer(self, Renderer):
        '''Method ITinLayer.AddRenderer

           INPUT
            Renderer            : ITinRenderer*'''
        return super(ITinLayer, self).AddRenderer(Renderer)
    def InsertRenderer(self, Renderer, Index):
        '''Method ITinLayer.InsertRenderer

           INPUTS
            Renderer            : ITinRenderer*
            Index               : long'''
        return super(ITinLayer, self).InsertRenderer(Renderer, Index)
    def DeleteRenderer(self, Renderer):
        '''Method ITinLayer.DeleteRenderer

           INPUT
            Renderer            : ITinRenderer*'''
        return super(ITinLayer, self).DeleteRenderer(Renderer)
    def ClearRenderers(self):
        '''Method ITinLayer.ClearRenderers'''
        return super(ITinLayer, self).ClearRenderers()
    def get_DisplayField(self):
        '''Method ITinLayer.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(ITinLayer, self).get_DisplayField()
    def put_DisplayField(self, FieldName):
        '''Method ITinLayer.put_DisplayField

           INPUT
            FieldName           : BSTR'''
        return super(ITinLayer, self).put_DisplayField(FieldName)
    def get_ScaleSymbols(self):
        '''Method ITinLayer.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ITinLayer, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method ITinLayer.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ITinLayer, self).put_ScaleSymbols(Scale)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(ITinLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(ITinLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ITinLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ITinLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(ITinLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(ITinLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(ITinLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(ITinLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITinLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITinLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ITinLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ITinLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ITinLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ITinLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ITinLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(ITinLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ITinLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ITinLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    Dataset = property(get_Dataset, putref_Dataset, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    RendererCount = property(get_RendererCount, None, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ITinLayer2(_esriCarto.ITinLayer2):
    _IID = uuid.UUID('b2f43cdc-dd23-4906-848a-8a912ad53f63')

    def __init__(self, *args, **kw):
        super(ITinLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ZFactor(self):
        '''Method ITinLayer2.get_ZFactor

           OUTPUT
            ZFactor             : double*'''
        return super(ITinLayer2, self).get_ZFactor()
    def put_ZFactor(self, ZFactor):
        '''Method ITinLayer2.put_ZFactor

           INPUT
            ZFactor             : double'''
        return super(ITinLayer2, self).put_ZFactor(ZFactor)
    def get_Dataset(self):
        '''Method ITinLayer.get_Dataset (from ITinLayer)

           OUTPUT
            Tin                 : ITin**'''
        return super(ITinLayer2, self).get_Dataset()
    def putref_Dataset(self, Tin):
        '''Method ITinLayer.putref_Dataset (from ITinLayer)

           INPUT
            Tin                 : ITin*'''
        return super(ITinLayer2, self).putref_Dataset(Tin)
    def get_RendererCount(self):
        '''Method ITinLayer.get_RendererCount (from ITinLayer)

           OUTPUT
            RendererCount       : long*'''
        return super(ITinLayer2, self).get_RendererCount()
    def GetRenderer(self, Index):
        '''Method ITinLayer.GetRenderer (from ITinLayer)

           INPUT
            Index               : long

           OUTPUT
            Renderer            : ITinRenderer**'''
        return super(ITinLayer2, self).GetRenderer(Index)
    def AddRenderer(self, Renderer):
        '''Method ITinLayer.AddRenderer (from ITinLayer)

           INPUT
            Renderer            : ITinRenderer*'''
        return super(ITinLayer2, self).AddRenderer(Renderer)
    def InsertRenderer(self, Renderer, Index):
        '''Method ITinLayer.InsertRenderer (from ITinLayer)

           INPUTS
            Renderer            : ITinRenderer*
            Index               : long'''
        return super(ITinLayer2, self).InsertRenderer(Renderer, Index)
    def DeleteRenderer(self, Renderer):
        '''Method ITinLayer.DeleteRenderer (from ITinLayer)

           INPUT
            Renderer            : ITinRenderer*'''
        return super(ITinLayer2, self).DeleteRenderer(Renderer)
    def ClearRenderers(self):
        '''Method ITinLayer.ClearRenderers (from ITinLayer)'''
        return super(ITinLayer2, self).ClearRenderers()
    def get_DisplayField(self):
        '''Method ITinLayer.get_DisplayField (from ITinLayer)

           OUTPUT
            FieldName           : BSTR*'''
        return super(ITinLayer2, self).get_DisplayField()
    def put_DisplayField(self, FieldName):
        '''Method ITinLayer.put_DisplayField (from ITinLayer)

           INPUT
            FieldName           : BSTR'''
        return super(ITinLayer2, self).put_DisplayField(FieldName)
    def get_ScaleSymbols(self):
        '''Method ITinLayer.get_ScaleSymbols (from ITinLayer)

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ITinLayer2, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method ITinLayer.put_ScaleSymbols (from ITinLayer)

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ITinLayer2, self).put_ScaleSymbols(Scale)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(ITinLayer2, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(ITinLayer2, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ITinLayer2, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ITinLayer2, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(ITinLayer2, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(ITinLayer2, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(ITinLayer2, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(ITinLayer2, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITinLayer2, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITinLayer2, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ITinLayer2, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ITinLayer2, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ITinLayer2, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ITinLayer2, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ITinLayer2, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(ITinLayer2, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ITinLayer2, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ITinLayer2, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    Dataset = property(get_Dataset, putref_Dataset, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    RendererCount = property(get_RendererCount, None, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ITinIdentifyObj(_esriCarto.ITinIdentifyObj):
    _IID = uuid.UUID('24d49fbd-de5c-11d2-9f31-00c04f6bc5f4')

    def __init__(self, *args, **kw):
        super(ITinIdentifyObj, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Feature(self, _arg1):
        '''Method ITinIdentifyObj.put_Feature

           INPUT
            _arg1               : IFeature*'''
        return super(ITinIdentifyObj, self).put_Feature(_arg1)
    def put_Location(self, _arg1):
        '''Method ITinIdentifyObj.put_Location

           INPUT
            _arg1               : IPoint*'''
        return super(ITinIdentifyObj, self).put_Location(_arg1)
    Feature = property(None, put_Feature, None)
    Location = property(None, put_Location, None)

class ITinIdentifyObj2(_esriCarto.ITinIdentifyObj2):
    _IID = uuid.UUID('5cc51ddb-5cd6-416a-9700-b1312783fd8e')
    def GetPropAndValues(self, Index):
        '''Method ITinIdentifyObj2.GetPropAndValues

           INPUT
            Index               : long

           OUTPUTS
            Property            : BSTR*
            Value               : BSTR*'''
        return super(ITinIdentifyObj2, self).GetPropAndValues(Index)
    def SetupEntity(self):
        '''Method ITinIdentifyObj2.SetupEntity'''
        return super(ITinIdentifyObj2, self).SetupEntity()
    def get_Location(self):
        '''Method ITinIdentifyObj2.get_Location

           OUTPUT
            ppPoint             : IPoint**'''
        return super(ITinIdentifyObj2, self).get_Location()
    Location = property(get_Location, None, None)

class ITerrainLayer(_esriCarto.ITerrainLayer):
    _IID = uuid.UUID('5a0f220d-614f-4c72-aff2-7ea0be2c8513')

    def __init__(self, *args, **kw):
        super(ITerrainLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Terrain(self):
        '''Method ITerrainLayer.get_Terrain

           OUTPUT
            ppTerrain           : ITerrain**'''
        return super(ITerrainLayer, self).get_Terrain()
    def putref_Terrain(self, ppTerrain):
        '''Method ITerrainLayer.putref_Terrain

           INPUT
            ppTerrain           : ITerrain*'''
        return super(ITerrainLayer, self).putref_Terrain(ppTerrain)
    def GetCurrentSurface(self):
        '''Method ITerrainLayer.GetCurrentSurface

           OUTPUT
            ppSurface           : ISurface**'''
        return super(ITerrainLayer, self).GetCurrentSurface()
    def get_RendererCount(self):
        '''Method ITerrainLayer.get_RendererCount

           OUTPUT
            pRendererCount      : long*'''
        return super(ITerrainLayer, self).get_RendererCount()
    def GetRenderer(self, Index):
        '''Method ITerrainLayer.GetRenderer

           INPUT
            Index               : long

           OUTPUT
            ppRenderer          : ITinRenderer**'''
        return super(ITerrainLayer, self).GetRenderer(Index)
    def AddRenderer(self, pRenderer):
        '''Method ITerrainLayer.AddRenderer

           INPUT
            pRenderer           : ITinRenderer*'''
        return super(ITerrainLayer, self).AddRenderer(pRenderer)
    def InsertRenderer(self, pRenderer, Index):
        '''Method ITerrainLayer.InsertRenderer

           INPUTS
            pRenderer           : ITinRenderer*
            Index               : long'''
        return super(ITerrainLayer, self).InsertRenderer(pRenderer, Index)
    def DeleteRenderer(self, pRenderer):
        '''Method ITerrainLayer.DeleteRenderer

           INPUT
            pRenderer           : ITinRenderer*'''
        return super(ITerrainLayer, self).DeleteRenderer(pRenderer)
    def ClearRenderers(self):
        '''Method ITerrainLayer.ClearRenderers'''
        return super(ITerrainLayer, self).ClearRenderers()
    def get_DisplayField(self):
        '''Method ITerrainLayer.get_DisplayField

           OUTPUT
            pFieldName          : BSTR*'''
        return super(ITerrainLayer, self).get_DisplayField()
    def put_DisplayField(self, pFieldName):
        '''Method ITerrainLayer.put_DisplayField

           INPUT
            pFieldName          : BSTR'''
        return super(ITerrainLayer, self).put_DisplayField(pFieldName)
    def get_ScaleSymbols(self):
        '''Method ITerrainLayer.get_ScaleSymbols

           OUTPUT
            pbScale             : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, pbScale):
        '''Method ITerrainLayer.put_ScaleSymbols

           INPUT
            pbScale             : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_ScaleSymbols(pbScale)
    def get_UseOverviewTerrain(self):
        '''Method ITerrainLayer.get_UseOverviewTerrain

           OUTPUT
            pbUseOverviewTerrain: VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_UseOverviewTerrain()
    def put_UseOverviewTerrain(self, pbUseOverviewTerrain):
        '''Method ITerrainLayer.put_UseOverviewTerrain

           INPUT
            pbUseOverviewTerrain: VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_UseOverviewTerrain(pbUseOverviewTerrain)
    def get_AutoLOR(self):
        '''Method ITerrainLayer.get_AutoLOR

           OUTPUT
            pbAutoLOR           : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_AutoLOR()
    def put_AutoLOR(self, pbAutoLOR):
        '''Method ITerrainLayer.put_AutoLOR

           INPUT
            pbAutoLOR           : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_AutoLOR(pbAutoLOR)
    def get_PyramidHonored(self):
        '''Method ITerrainLayer.get_PyramidHonored

           OUTPUT
            pbHonored           : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_PyramidHonored()
    def get_TargetResolution(self):
        '''Method ITerrainLayer.get_TargetResolution

           OUTPUT
            pResolution         : double*'''
        return super(ITerrainLayer, self).get_TargetResolution()
    def put_TargetResolution(self, pResolution):
        '''Method ITerrainLayer.put_TargetResolution

           INPUT
            pResolution         : double'''
        return super(ITerrainLayer, self).put_TargetResolution(pResolution)
    def get_CurrentResolution(self):
        '''Method ITerrainLayer.get_CurrentResolution

           OUTPUT
            pResolution         : double*'''
        return super(ITerrainLayer, self).get_CurrentResolution()
    def get_ShowResolution(self):
        '''Method ITerrainLayer.get_ShowResolution

           OUTPUT
            pbShow              : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_ShowResolution()
    def put_ShowResolution(self, pbShow):
        '''Method ITerrainLayer.put_ShowResolution

           INPUT
            pbShow              : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_ShowResolution(pbShow)
    def get_LockCurrentSurface(self):
        '''Method ITerrainLayer.get_LockCurrentSurface

           OUTPUT
            pbLock              : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_LockCurrentSurface()
    def put_LockCurrentSurface(self, pbLock):
        '''Method ITerrainLayer.put_LockCurrentSurface

           INPUT
            pbLock              : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_LockCurrentSurface(pbLock)
    def get_UsePointBudget(self):
        '''Method ITerrainLayer.get_UsePointBudget

           OUTPUT
            pbUsePointBudget    : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_UsePointBudget()
    def put_UsePointBudget(self, pbUsePointBudget):
        '''Method ITerrainLayer.put_UsePointBudget

           INPUT
            pbUsePointBudget    : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_UsePointBudget(pbUsePointBudget)
    def get_PointBudget(self):
        '''Method ITerrainLayer.get_PointBudget

           OUTPUT
            pPointBudget        : long*'''
        return super(ITerrainLayer, self).get_PointBudget()
    def put_PointBudget(self, pPointBudget):
        '''Method ITerrainLayer.put_PointBudget

           INPUT
            pPointBudget        : long'''
        return super(ITerrainLayer, self).put_PointBudget(pPointBudget)
    def get_AnalysisToolsResolution(self):
        '''Method ITerrainLayer.get_AnalysisToolsResolution

           OUTPUT
            pAnalysisResolution : double*'''
        return super(ITerrainLayer, self).get_AnalysisToolsResolution()
    def put_AnalysisToolsResolution(self, pAnalysisResolution):
        '''Method ITerrainLayer.put_AnalysisToolsResolution

           INPUT
            pAnalysisResolution : double'''
        return super(ITerrainLayer, self).put_AnalysisToolsResolution(pAnalysisResolution)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(ITerrainLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(ITerrainLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ITerrainLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(ITerrainLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(ITerrainLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(ITerrainLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(ITerrainLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ITerrainLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ITerrainLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ITerrainLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(ITerrainLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ITerrainLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ITerrainLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AnalysisToolsResolution = property(get_AnalysisToolsResolution, put_AnalysisToolsResolution, None)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    AutoLOR = property(get_AutoLOR, put_AutoLOR, None)
    Cached = property(get_Cached, put_Cached, None)
    CurrentResolution = property(get_CurrentResolution, None, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    LockCurrentSurface = property(get_LockCurrentSurface, put_LockCurrentSurface, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    PointBudget = property(get_PointBudget, put_PointBudget, None)
    PyramidHonored = property(get_PyramidHonored, None, None)
    RendererCount = property(get_RendererCount, None, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    ShowResolution = property(get_ShowResolution, put_ShowResolution, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    TargetResolution = property(get_TargetResolution, put_TargetResolution, None)
    Terrain = property(get_Terrain, putref_Terrain, None)
    UseOverviewTerrain = property(get_UseOverviewTerrain, put_UseOverviewTerrain, None)
    UsePointBudget = property(get_UsePointBudget, put_UsePointBudget, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ITerrainLayer2(_esriCarto.ITerrainLayer2):
    _IID = uuid.UUID('5a4db585-3d53-481f-95cf-b000e26b86b4')

    def __init__(self, *args, **kw):
        super(ITerrainLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MaintainCurrentSurface(self):
        '''Method ITerrainLayer2.get_MaintainCurrentSurface

           OUTPUT
            pbMaintainSurface   : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_MaintainCurrentSurface()
    def put_MaintainCurrentSurface(self, pbMaintainSurface):
        '''Method ITerrainLayer2.put_MaintainCurrentSurface

           INPUT
            pbMaintainSurface   : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_MaintainCurrentSurface(pbMaintainSurface)
    def get_Terrain(self):
        '''Method ITerrainLayer.get_Terrain (from ITerrainLayer)

           OUTPUT
            ppTerrain           : ITerrain**'''
        return super(ITerrainLayer2, self).get_Terrain()
    def putref_Terrain(self, ppTerrain):
        '''Method ITerrainLayer.putref_Terrain (from ITerrainLayer)

           INPUT
            ppTerrain           : ITerrain*'''
        return super(ITerrainLayer2, self).putref_Terrain(ppTerrain)
    def GetCurrentSurface(self):
        '''Method ITerrainLayer.GetCurrentSurface (from ITerrainLayer)

           OUTPUT
            ppSurface           : ISurface**'''
        return super(ITerrainLayer2, self).GetCurrentSurface()
    def get_RendererCount(self):
        '''Method ITerrainLayer.get_RendererCount (from ITerrainLayer)

           OUTPUT
            pRendererCount      : long*'''
        return super(ITerrainLayer2, self).get_RendererCount()
    def GetRenderer(self, Index):
        '''Method ITerrainLayer.GetRenderer (from ITerrainLayer)

           INPUT
            Index               : long

           OUTPUT
            ppRenderer          : ITinRenderer**'''
        return super(ITerrainLayer2, self).GetRenderer(Index)
    def AddRenderer(self, pRenderer):
        '''Method ITerrainLayer.AddRenderer (from ITerrainLayer)

           INPUT
            pRenderer           : ITinRenderer*'''
        return super(ITerrainLayer2, self).AddRenderer(pRenderer)
    def InsertRenderer(self, pRenderer, Index):
        '''Method ITerrainLayer.InsertRenderer (from ITerrainLayer)

           INPUTS
            pRenderer           : ITinRenderer*
            Index               : long'''
        return super(ITerrainLayer2, self).InsertRenderer(pRenderer, Index)
    def DeleteRenderer(self, pRenderer):
        '''Method ITerrainLayer.DeleteRenderer (from ITerrainLayer)

           INPUT
            pRenderer           : ITinRenderer*'''
        return super(ITerrainLayer2, self).DeleteRenderer(pRenderer)
    def ClearRenderers(self):
        '''Method ITerrainLayer.ClearRenderers (from ITerrainLayer)'''
        return super(ITerrainLayer2, self).ClearRenderers()
    def get_DisplayField(self):
        '''Method ITerrainLayer.get_DisplayField (from ITerrainLayer)

           OUTPUT
            pFieldName          : BSTR*'''
        return super(ITerrainLayer2, self).get_DisplayField()
    def put_DisplayField(self, pFieldName):
        '''Method ITerrainLayer.put_DisplayField (from ITerrainLayer)

           INPUT
            pFieldName          : BSTR'''
        return super(ITerrainLayer2, self).put_DisplayField(pFieldName)
    def get_ScaleSymbols(self):
        '''Method ITerrainLayer.get_ScaleSymbols (from ITerrainLayer)

           OUTPUT
            pbScale             : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, pbScale):
        '''Method ITerrainLayer.put_ScaleSymbols (from ITerrainLayer)

           INPUT
            pbScale             : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_ScaleSymbols(pbScale)
    def get_UseOverviewTerrain(self):
        '''Method ITerrainLayer.get_UseOverviewTerrain (from ITerrainLayer)

           OUTPUT
            pbUseOverviewTerrain: VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_UseOverviewTerrain()
    def put_UseOverviewTerrain(self, pbUseOverviewTerrain):
        '''Method ITerrainLayer.put_UseOverviewTerrain (from ITerrainLayer)

           INPUT
            pbUseOverviewTerrain: VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_UseOverviewTerrain(pbUseOverviewTerrain)
    def get_AutoLOR(self):
        '''Method ITerrainLayer.get_AutoLOR (from ITerrainLayer)

           OUTPUT
            pbAutoLOR           : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_AutoLOR()
    def put_AutoLOR(self, pbAutoLOR):
        '''Method ITerrainLayer.put_AutoLOR (from ITerrainLayer)

           INPUT
            pbAutoLOR           : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_AutoLOR(pbAutoLOR)
    def get_PyramidHonored(self):
        '''Method ITerrainLayer.get_PyramidHonored (from ITerrainLayer)

           OUTPUT
            pbHonored           : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_PyramidHonored()
    def get_TargetResolution(self):
        '''Method ITerrainLayer.get_TargetResolution (from ITerrainLayer)

           OUTPUT
            pResolution         : double*'''
        return super(ITerrainLayer2, self).get_TargetResolution()
    def put_TargetResolution(self, pResolution):
        '''Method ITerrainLayer.put_TargetResolution (from ITerrainLayer)

           INPUT
            pResolution         : double'''
        return super(ITerrainLayer2, self).put_TargetResolution(pResolution)
    def get_CurrentResolution(self):
        '''Method ITerrainLayer.get_CurrentResolution (from ITerrainLayer)

           OUTPUT
            pResolution         : double*'''
        return super(ITerrainLayer2, self).get_CurrentResolution()
    def get_ShowResolution(self):
        '''Method ITerrainLayer.get_ShowResolution (from ITerrainLayer)

           OUTPUT
            pbShow              : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_ShowResolution()
    def put_ShowResolution(self, pbShow):
        '''Method ITerrainLayer.put_ShowResolution (from ITerrainLayer)

           INPUT
            pbShow              : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_ShowResolution(pbShow)
    def get_LockCurrentSurface(self):
        '''Method ITerrainLayer.get_LockCurrentSurface (from ITerrainLayer)

           OUTPUT
            pbLock              : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_LockCurrentSurface()
    def put_LockCurrentSurface(self, pbLock):
        '''Method ITerrainLayer.put_LockCurrentSurface (from ITerrainLayer)

           INPUT
            pbLock              : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_LockCurrentSurface(pbLock)
    def get_UsePointBudget(self):
        '''Method ITerrainLayer.get_UsePointBudget (from ITerrainLayer)

           OUTPUT
            pbUsePointBudget    : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_UsePointBudget()
    def put_UsePointBudget(self, pbUsePointBudget):
        '''Method ITerrainLayer.put_UsePointBudget (from ITerrainLayer)

           INPUT
            pbUsePointBudget    : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_UsePointBudget(pbUsePointBudget)
    def get_PointBudget(self):
        '''Method ITerrainLayer.get_PointBudget (from ITerrainLayer)

           OUTPUT
            pPointBudget        : long*'''
        return super(ITerrainLayer2, self).get_PointBudget()
    def put_PointBudget(self, pPointBudget):
        '''Method ITerrainLayer.put_PointBudget (from ITerrainLayer)

           INPUT
            pPointBudget        : long'''
        return super(ITerrainLayer2, self).put_PointBudget(pPointBudget)
    def get_AnalysisToolsResolution(self):
        '''Method ITerrainLayer.get_AnalysisToolsResolution (from ITerrainLayer)

           OUTPUT
            pAnalysisResolution : double*'''
        return super(ITerrainLayer2, self).get_AnalysisToolsResolution()
    def put_AnalysisToolsResolution(self, pAnalysisResolution):
        '''Method ITerrainLayer.put_AnalysisToolsResolution (from ITerrainLayer)

           INPUT
            pAnalysisResolution : double'''
        return super(ITerrainLayer2, self).put_AnalysisToolsResolution(pAnalysisResolution)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(ITerrainLayer2, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(ITerrainLayer2, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ITerrainLayer2, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(ITerrainLayer2, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(ITerrainLayer2, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(ITerrainLayer2, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(ITerrainLayer2, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ITerrainLayer2, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ITerrainLayer2, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ITerrainLayer2, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(ITerrainLayer2, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ITerrainLayer2, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ITerrainLayer2, self).Draw(DrawPhase, Display, TrackCancel)
    AnalysisToolsResolution = property(get_AnalysisToolsResolution, put_AnalysisToolsResolution, None)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    AutoLOR = property(get_AutoLOR, put_AutoLOR, None)
    Cached = property(get_Cached, put_Cached, None)
    CurrentResolution = property(get_CurrentResolution, None, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    LockCurrentSurface = property(get_LockCurrentSurface, put_LockCurrentSurface, None)
    MaintainCurrentSurface = property(get_MaintainCurrentSurface, put_MaintainCurrentSurface, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    PointBudget = property(get_PointBudget, put_PointBudget, None)
    PyramidHonored = property(get_PyramidHonored, None, None)
    RendererCount = property(get_RendererCount, None, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    ShowResolution = property(get_ShowResolution, put_ShowResolution, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    TargetResolution = property(get_TargetResolution, put_TargetResolution, None)
    Terrain = property(get_Terrain, putref_Terrain, None)
    UseOverviewTerrain = property(get_UseOverviewTerrain, put_UseOverviewTerrain, None)
    UsePointBudget = property(get_UsePointBudget, put_UsePointBudget, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ILasDatasetLayer(_esriCarto.ILasDatasetLayer):
    _IID = uuid.UUID('24af7e56-75af-4ba1-8ae3-42e953cf2c95')

    def __init__(self, *args, **kw):
        super(ILasDatasetLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Dataset(self):
        '''Method ILasDatasetLayer.get_Dataset

           OUTPUT
            ppLasDataset        : ILasDataset**'''
        return super(ILasDatasetLayer, self).get_Dataset()
    def putref_Dataset(self, ppLasDataset):
        '''Method ILasDatasetLayer.putref_Dataset

           INPUT
            ppLasDataset        : ILasDataset*'''
        return super(ILasDatasetLayer, self).putref_Dataset(ppLasDataset)
    def get_Filter(self):
        '''Method ILasDatasetLayer.get_Filter

           OUTPUT
            ppFilter            : ILasFilter**'''
        return super(ILasDatasetLayer, self).get_Filter()
    def putref_Filter(self, ppFilter):
        '''Method ILasDatasetLayer.putref_Filter

           INPUT
            ppFilter            : ILasFilter*'''
        return super(ILasDatasetLayer, self).putref_Filter(ppFilter)
    def GetCurrentSurface(self):
        '''Method ILasDatasetLayer.GetCurrentSurface

           OUTPUT
            ppSurface           : ISurface**'''
        return super(ILasDatasetLayer, self).GetCurrentSurface()
    def get_RendererCount(self):
        '''Method ILasDatasetLayer.get_RendererCount

           OUTPUT
            pRendererCount      : long*'''
        return super(ILasDatasetLayer, self).get_RendererCount()
    def GetRenderer(self, Index):
        '''Method ILasDatasetLayer.GetRenderer

           INPUT
            Index               : long

           OUTPUT
            ppRenderer          : ITinRenderer**'''
        return super(ILasDatasetLayer, self).GetRenderer(Index)
    def AddRenderer(self, pRenderer):
        '''Method ILasDatasetLayer.AddRenderer

           INPUT
            pRenderer           : ITinRenderer*'''
        return super(ILasDatasetLayer, self).AddRenderer(pRenderer)
    def InsertRenderer(self, pRenderer, Index):
        '''Method ILasDatasetLayer.InsertRenderer

           INPUTS
            pRenderer           : ITinRenderer*
            Index               : long'''
        return super(ILasDatasetLayer, self).InsertRenderer(pRenderer, Index)
    def DeleteRenderer(self, pRenderer):
        '''Method ILasDatasetLayer.DeleteRenderer

           INPUT
            pRenderer           : ITinRenderer*'''
        return super(ILasDatasetLayer, self).DeleteRenderer(pRenderer)
    def ClearRenderers(self):
        '''Method ILasDatasetLayer.ClearRenderers'''
        return super(ILasDatasetLayer, self).ClearRenderers()
    def get_DisplayField(self):
        '''Method ILasDatasetLayer.get_DisplayField

           OUTPUT
            pFieldName          : BSTR*'''
        return super(ILasDatasetLayer, self).get_DisplayField()
    def put_DisplayField(self, pFieldName):
        '''Method ILasDatasetLayer.put_DisplayField

           INPUT
            pFieldName          : BSTR'''
        return super(ILasDatasetLayer, self).put_DisplayField(pFieldName)
    def get_ScaleSymbols(self):
        '''Method ILasDatasetLayer.get_ScaleSymbols

           OUTPUT
            pbScale             : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, pbScale):
        '''Method ILasDatasetLayer.put_ScaleSymbols

           INPUT
            pbScale             : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_ScaleSymbols(pbScale)
    def get_CurrentResolution(self):
        '''Method ILasDatasetLayer.get_CurrentResolution

           OUTPUT
            pResolution         : double*'''
        return super(ILasDatasetLayer, self).get_CurrentResolution()
    def get_ShowResolution(self):
        '''Method ILasDatasetLayer.get_ShowResolution

           OUTPUT
            pbShow              : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_ShowResolution()
    def put_ShowResolution(self, pbShow):
        '''Method ILasDatasetLayer.put_ShowResolution

           INPUT
            pbShow              : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_ShowResolution(pbShow)
    def get_ShowFileExtent(self):
        '''Method ILasDatasetLayer.get_ShowFileExtent

           OUTPUT
            pbShow              : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_ShowFileExtent()
    def put_ShowFileExtent(self, pbShow):
        '''Method ILasDatasetLayer.put_ShowFileExtent

           INPUT
            pbShow              : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_ShowFileExtent(pbShow)
    def get_FileExtentSymbol(self):
        '''Method ILasDatasetLayer.get_FileExtentSymbol

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(ILasDatasetLayer, self).get_FileExtentSymbol()
    def putref_FileExtentSymbol(self, ppSymbol):
        '''Method ILasDatasetLayer.putref_FileExtentSymbol

           INPUT
            ppSymbol            : ISymbol*'''
        return super(ILasDatasetLayer, self).putref_FileExtentSymbol(ppSymbol)
    def get_ShowFileName(self):
        '''Method ILasDatasetLayer.get_ShowFileName

           OUTPUT
            pbShow              : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_ShowFileName()
    def put_ShowFileName(self, pbShow):
        '''Method ILasDatasetLayer.put_ShowFileName

           INPUT
            pbShow              : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_ShowFileName(pbShow)
    def get_FileNameSymbol(self):
        '''Method ILasDatasetLayer.get_FileNameSymbol

           OUTPUT
            ppSymbol            : ITextSymbol**'''
        return super(ILasDatasetLayer, self).get_FileNameSymbol()
    def putref_FileNameSymbol(self, ppSymbol):
        '''Method ILasDatasetLayer.putref_FileNameSymbol

           INPUT
            ppSymbol            : ITextSymbol*'''
        return super(ILasDatasetLayer, self).putref_FileNameSymbol(ppSymbol)
    def get_PointCountPerCentimeter(self):
        '''Method ILasDatasetLayer.get_PointCountPerCentimeter

           OUTPUT
            pPointBudget        : long*'''
        return super(ILasDatasetLayer, self).get_PointCountPerCentimeter()
    def put_PointCountPerCentimeter(self, pPointBudget):
        '''Method ILasDatasetLayer.put_PointCountPerCentimeter

           INPUT
            pPointBudget        : long'''
        return super(ILasDatasetLayer, self).put_PointCountPerCentimeter(pPointBudget)
    def get_PointBudget(self):
        '''Method ILasDatasetLayer.get_PointBudget

           OUTPUT
            pPointBudget        : long*'''
        return super(ILasDatasetLayer, self).get_PointBudget()
    def put_PointBudget(self, pPointBudget):
        '''Method ILasDatasetLayer.put_PointBudget

           INPUT
            pPointBudget        : long'''
        return super(ILasDatasetLayer, self).put_PointBudget(pPointBudget)
    def get_AnalysisToolsResolution(self):
        '''Method ILasDatasetLayer.get_AnalysisToolsResolution

           OUTPUT
            pAnalysisResolution : double*'''
        return super(ILasDatasetLayer, self).get_AnalysisToolsResolution()
    def put_AnalysisToolsResolution(self, pAnalysisResolution):
        '''Method ILasDatasetLayer.put_AnalysisToolsResolution

           INPUT
            pAnalysisResolution : double'''
        return super(ILasDatasetLayer, self).put_AnalysisToolsResolution(pAnalysisResolution)
    def get_MaintainCurrentSurface(self):
        '''Method ILasDatasetLayer.get_MaintainCurrentSurface

           OUTPUT
            pbMaintainSurface   : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_MaintainCurrentSurface()
    def put_MaintainCurrentSurface(self, pbMaintainSurface):
        '''Method ILasDatasetLayer.put_MaintainCurrentSurface

           INPUT
            pbMaintainSurface   : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_MaintainCurrentSurface(pbMaintainSurface)
    def get_UseFullResolutionScale(self):
        '''Method ILasDatasetLayer.get_UseFullResolutionScale

           OUTPUT
            pbUseScale          : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_UseFullResolutionScale()
    def put_UseFullResolutionScale(self, pbUseScale):
        '''Method ILasDatasetLayer.put_UseFullResolutionScale

           INPUT
            pbUseScale          : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_UseFullResolutionScale(pbUseScale)
    def get_FullResolutionScale(self):
        '''Method ILasDatasetLayer.get_FullResolutionScale

           OUTPUT
            pScale              : double*'''
        return super(ILasDatasetLayer, self).get_FullResolutionScale()
    def put_FullResolutionScale(self, pScale):
        '''Method ILasDatasetLayer.put_FullResolutionScale

           INPUT
            pScale              : double'''
        return super(ILasDatasetLayer, self).put_FullResolutionScale(pScale)
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(ILasDatasetLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(ILasDatasetLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ILasDatasetLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(ILasDatasetLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(ILasDatasetLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(ILasDatasetLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(ILasDatasetLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ILasDatasetLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ILasDatasetLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ILasDatasetLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(ILasDatasetLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ILasDatasetLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ILasDatasetLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AnalysisToolsResolution = property(get_AnalysisToolsResolution, put_AnalysisToolsResolution, None)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    CurrentResolution = property(get_CurrentResolution, None, None)
    Dataset = property(get_Dataset, putref_Dataset, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    FileExtentSymbol = property(get_FileExtentSymbol, putref_FileExtentSymbol, None)
    FileNameSymbol = property(get_FileNameSymbol, putref_FileNameSymbol, None)
    Filter = property(get_Filter, putref_Filter, None)
    FullResolutionScale = property(get_FullResolutionScale, put_FullResolutionScale, None)
    MaintainCurrentSurface = property(get_MaintainCurrentSurface, put_MaintainCurrentSurface, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    PointBudget = property(get_PointBudget, put_PointBudget, None)
    PointCountPerCentimeter = property(get_PointCountPerCentimeter, put_PointCountPerCentimeter, None)
    RendererCount = property(get_RendererCount, None, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    ShowFileExtent = property(get_ShowFileExtent, put_ShowFileExtent, None)
    ShowFileName = property(get_ShowFileName, put_ShowFileName, None)
    ShowResolution = property(get_ShowResolution, put_ShowResolution, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    UseFullResolutionScale = property(get_UseFullResolutionScale, put_UseFullResolutionScale, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ICadLayer(_esriCarto.ICadLayer):
    _IID = uuid.UUID('e299adbc-a5c3-11d2-9b10-00c04fa33299')

    def __init__(self, *args, **kw):
        super(ICadLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CadDrawingDataset(self):
        '''Method ICadLayer.get_CadDrawingDataset

           OUTPUT
            CadDrawingDataset   : ICadDrawingDataset**'''
        return super(ICadLayer, self).get_CadDrawingDataset()
    def putref_CadDrawingDataset(self, CadDrawingDataset):
        '''Method ICadLayer.putref_CadDrawingDataset

           INPUT
            CadDrawingDataset   : ICadDrawingDataset*'''
        return super(ICadLayer, self).putref_CadDrawingDataset(CadDrawingDataset)
    def get_FilePath(self):
        '''Method ICadLayer.get_FilePath

           OUTPUT
            FilePath            : BSTR*'''
        return super(ICadLayer, self).get_FilePath()
    def get_Is2d(self):
        '''Method ICadLayer.get_Is2d

           OUTPUT
            Is2d                : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_Is2d()
    def get_Is3d(self):
        '''Method ICadLayer.get_Is3d

           OUTPUT
            Is3d                : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_Is3d()
    def get_IsAutoCad(self):
        '''Method ICadLayer.get_IsAutoCad

           OUTPUT
            IsAutoCad           : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_IsAutoCad()
    def get_IsDgn(self):
        '''Method ICadLayer.get_IsDgn

           OUTPUT
            IsDgn               : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_IsDgn()
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(ICadLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(ICadLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(ICadLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(ICadLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(ICadLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(ICadLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(ICadLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ICadLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(ICadLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(ICadLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(ICadLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(ICadLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(ICadLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(ICadLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(ICadLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    Cached = property(get_Cached, put_Cached, None)
    CadDrawingDataset = property(get_CadDrawingDataset, putref_CadDrawingDataset, None)
    FilePath = property(get_FilePath, None, None)
    Is2d = property(get_Is2d, None, None)
    Is3d = property(get_Is3d, None, None)
    IsAutoCad = property(get_IsAutoCad, None, None)
    IsDgn = property(get_IsDgn, None, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class ICad3DRenderMode(_esriCarto.ICad3DRenderMode):
    _IID = uuid.UUID('475f9178-7e05-11d4-a1d1-444553547777')

    def __init__(self, *args, **kw):
        super(ICad3DRenderMode, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Cad3DRenderMode(self):
        '''Method ICad3DRenderMode.get_Cad3DRenderMode

           OUTPUT
            mode                : esriCad3DRenderMode*'''
        return super(ICad3DRenderMode, self).get_Cad3DRenderMode()
    def put_Cad3DRenderMode(self, mode):
        '''Method ICad3DRenderMode.put_Cad3DRenderMode

           INPUT
            mode                : esriCad3DRenderMode'''
        return super(ICad3DRenderMode, self).put_Cad3DRenderMode(mode)
    Cad3DRenderMode = property(get_Cad3DRenderMode, put_Cad3DRenderMode, None)

class ICadIdentifyObj2(_esriCarto.ICadIdentifyObj2):
    _IID = uuid.UUID('6729281d-94e0-48ee-8300-407d5f44dc6e')
    def GetPropAndValues(self, Index):
        '''Method ICadIdentifyObj2.GetPropAndValues

           INPUT
            Index               : long

           OUTPUTS
            Property            : BSTR*
            Value               : BSTR*'''
        return super(ICadIdentifyObj2, self).GetPropAndValues(Index)
    def SetupEntity(self):
        '''Method ICadIdentifyObj2.SetupEntity'''
        return super(ICadIdentifyObj2, self).SetupEntity()

class IFeatureLayerExtendedDefinition(_esriCarto.IFeatureLayerExtendedDefinition):
    _IID = uuid.UUID('bd0b0fdd-698f-11d5-9c2f-00c04fa33299')
    def get_ExtendedDefinitionExpression(self):
        '''Method IFeatureLayerExtendedDefinition.get_ExtendedDefinitionExpression

           OUTPUT
            pExpression         : BSTR*'''
        return super(IFeatureLayerExtendedDefinition, self).get_ExtendedDefinitionExpression()
    ExtendedDefinitionExpression = property(get_ExtendedDefinitionExpression, None, None)

class IACLayer(_esriCarto.IACLayer):
    _IID = uuid.UUID('74e45211-dfe6-11d3-9ff7-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IACLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IACLayer.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IACLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method IACLayer.put_Name

           INPUT
            Name                : BSTR'''
        return super(IACLayer, self).put_Name(Name)
    def get_OriginalName(self):
        '''Method IACLayer.get_OriginalName

           OUTPUT
            Name                : BSTR*'''
        return super(IACLayer, self).get_OriginalName()
    def put_OriginalName(self, Name):
        '''Method IACLayer.put_OriginalName

           INPUT
            Name                : BSTR'''
        return super(IACLayer, self).put_OriginalName(Name)
    def get_ID(self):
        '''Method IACLayer.get_ID

           OUTPUT
            ID                  : BSTR*'''
        return super(IACLayer, self).get_ID()
    def put_ID(self, ID):
        '''Method IACLayer.put_ID

           INPUT
            ID                  : BSTR'''
        return super(IACLayer, self).put_ID(ID)
    def get_Visible(self):
        '''Method IACLayer.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IACLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IACLayer.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IACLayer, self).put_Visible(Visible)
    def get_MinScale(self):
        '''Method IACLayer.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IACLayer, self).get_MinScale()
    def put_MinScale(self, Scale):
        '''Method IACLayer.put_MinScale

           INPUT
            Scale               : double'''
        return super(IACLayer, self).put_MinScale(Scale)
    def get_MaxScale(self):
        '''Method IACLayer.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IACLayer, self).get_MaxScale()
    def put_MaxScale(self, Scale):
        '''Method IACLayer.put_MaxScale

           INPUT
            Scale               : double'''
        return super(IACLayer, self).put_MaxScale(Scale)
    def get_LayerDefAxl(self):
        '''Method IACLayer.get_LayerDefAxl

           OUTPUT
            layerDefElement     : IUnknown**'''
        return super(IACLayer, self).get_LayerDefAxl()
    def get_Extent(self):
        '''Method IACLayer.get_Extent

           OUTPUT
            envelope            : IEnvelope**'''
        return super(IACLayer, self).get_Extent()
    def get_NativeSpatialReference(self):
        '''Method IACLayer.get_NativeSpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IACLayer, self).get_NativeSpatialReference()
    Extent = property(get_Extent, None, None)
    ID = property(get_ID, put_ID, None)
    LayerDefAxl = property(get_LayerDefAxl, None, None)
    MaxScale = property(get_MaxScale, put_MaxScale, None)
    MinScale = property(get_MinScale, put_MinScale, None)
    Name = property(get_Name, put_Name, None)
    NativeSpatialReference = property(get_NativeSpatialReference, None, None)
    OriginalName = property(get_OriginalName, put_OriginalName, None)
    Visible = property(get_Visible, put_Visible, None)

class IACMap(_esriCarto.IACMap):
    _IID = uuid.UUID('74e45210-dfe6-11d3-9ff7-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IACMap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SendAxlRequest(self, axl, TrackCancel, showConnectingAVI, processMessages):
        '''Method IACMap.SendAxlRequest

           INPUTS
            axl                 : BSTR
            TrackCancel         : ITrackCancel*
            showConnectingAVI   : VARIANT_BOOL
            processMessages     : VARIANT_BOOL

           OUTPUT
            response            : BSTR*'''
        return super(IACMap, self).SendAxlRequest(axl, TrackCancel, showConnectingAVI, processMessages)
    def SendAxlQueryRequest(self, axl, TrackCancel, showConnectingAVI, processMessages):
        '''Method IACMap.SendAxlQueryRequest

           INPUTS
            axl                 : BSTR
            TrackCancel         : ITrackCancel*
            showConnectingAVI   : VARIANT_BOOL
            processMessages     : VARIANT_BOOL

           OUTPUT
            response            : BSTR*'''
        return super(IACMap, self).SendAxlQueryRequest(axl, TrackCancel, showConnectingAVI, processMessages)
    def get_BackgroundColor(self):
        '''Method IACMap.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IACMap, self).get_BackgroundColor()
    def put_BackgroundColor(self, Color):
        '''Method IACMap.put_BackgroundColor

           INPUT
            Color               : IColor*'''
        return super(IACMap, self).put_BackgroundColor(Color)
    def get_TransparentColor(self):
        '''Method IACMap.get_TransparentColor

           OUTPUT
            Color               : IColor**'''
        return super(IACMap, self).get_TransparentColor()
    def put_TransparentColor(self, Color):
        '''Method IACMap.put_TransparentColor

           INPUT
            Color               : IColor*'''
        return super(IACMap, self).put_TransparentColor(Color)
    def RequestImage(self, pExtent, Dpi, Width, Height, ScaleSymbols):
        '''Method IACMap.RequestImage

           INPUTS
            pExtent             : IEnvelope*
            Dpi                 : double
            Width               : long
            Height              : long
            ScaleSymbols        : VARIANT_BOOL

           OUTPUT
            imageURL            : BSTR*'''
        return super(IACMap, self).RequestImage(pExtent, Dpi, Width, Height, ScaleSymbols)
    def RequestImageWithXml(self, xml):
        '''Method IACMap.RequestImageWithXml

           INPUT
            xml                 : BSTR

           OUTPUT
            imageURL            : BSTR*'''
        return super(IACMap, self).RequestImageWithXml(xml)
    def get_ImageRequestXml(self, pExtent, Dpi, Width, Height, ScaleSymbols):
        '''Method IACMap.get_ImageRequestXml

           INPUTS
            pExtent             : IEnvelope*
            Dpi                 : double
            Width               : long
            Height              : long
            ScaleSymbols        : VARIANT_BOOL

           OUTPUT
            xml                 : BSTR*'''
        return super(IACMap, self).get_ImageRequestXml(pExtent, Dpi, Width, Height, ScaleSymbols)
    def get_LayerCount(self):
        '''Method IACMap.get_LayerCount

           OUTPUT
            Count               : long*'''
        return super(IACMap, self).get_LayerCount()
    def get_Layer(self, Index):
        '''Method IACMap.get_Layer

           INPUT
            Index               : long

           OUTPUT
            Layer               : IACLayer**'''
        return super(IACMap, self).get_Layer(Index)
    def MoveLayer(self, Layer, toIndex):
        '''Method IACMap.MoveLayer

           INPUTS
            Layer               : IACLayer*
            toIndex             : long'''
        return super(IACMap, self).MoveLayer(Layer, toIndex)
    def putref_SpatialReference(self, _arg1):
        '''Method IACMap.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IACMap, self).putref_SpatialReference(_arg1)
    def get_NativeSpatialReference(self):
        '''Method IACMap.get_NativeSpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IACMap, self).get_NativeSpatialReference()
    def get_AreaOfInterest(self):
        '''Method IACMap.get_AreaOfInterest

           OUTPUT
            envelope            : IEnvelope**'''
        return super(IACMap, self).get_AreaOfInterest()
    def get_MapUnits(self):
        '''Method IACMap.get_MapUnits

           OUTPUT
            MapUnits            : acMapUnits*'''
        return super(IACMap, self).get_MapUnits()
    def get_MaxPrintPixels(self):
        '''Method IACMap.get_MaxPrintPixels

           OUTPUT
            pMaxPrintPixels     : long*'''
        return super(IACMap, self).get_MaxPrintPixels()
    AreaOfInterest = property(get_AreaOfInterest, None, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    LayerCount = property(get_LayerCount, None, None)
    MapUnits = property(get_MapUnits, None, None)
    MaxPrintPixels = property(get_MaxPrintPixels, None, None)
    NativeSpatialReference = property(get_NativeSpatialReference, None, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    TransparentColor = property(get_TransparentColor, put_TransparentColor, None)
    Layer = IndexProperty(get_Layer, None)

class IACSymbol(_esriCarto.IACSymbol):
    _IID = uuid.UUID('c6c1b35e-90da-4b32-93dd-71465f502cce')

    def __init__(self, *args, **kw):
        super(IACSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Transparency(self):
        '''Method IACSymbol.get_Transparency

           OUTPUT
            trans               : double*'''
        return super(IACSymbol, self).get_Transparency()
    def put_Transparency(self, trans):
        '''Method IACSymbol.put_Transparency

           INPUT
            trans               : double'''
        return super(IACSymbol, self).put_Transparency(trans)
    def get_Antialiasing(self):
        '''Method IACSymbol.get_Antialiasing

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSymbol, self).get_Antialiasing()
    def put_Antialiasing(self, flag):
        '''Method IACSymbol.put_Antialiasing

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSymbol, self).put_Antialiasing(flag)
    Antialiasing = property(get_Antialiasing, put_Antialiasing, None)
    Transparency = property(get_Transparency, put_Transparency, None)

class IACLayer2(_esriCarto.IACLayer2):
    _IID = uuid.UUID('24ed5084-5a20-47e8-8cba-d5d36541c7ae')

    def __init__(self, *args, **kw):
        super(IACLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IACLayer2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IACLayer2, self).get_Name()
    def put_Name(self, Name):
        '''Method IACLayer2.put_Name

           INPUT
            Name                : BSTR'''
        return super(IACLayer2, self).put_Name(Name)
    def get_OriginalName(self):
        '''Method IACLayer2.get_OriginalName

           OUTPUT
            Name                : BSTR*'''
        return super(IACLayer2, self).get_OriginalName()
    def put_OriginalName(self, Name):
        '''Method IACLayer2.put_OriginalName

           INPUT
            Name                : BSTR'''
        return super(IACLayer2, self).put_OriginalName(Name)
    def get_ID(self):
        '''Method IACLayer2.get_ID

           OUTPUT
            ID                  : BSTR*'''
        return super(IACLayer2, self).get_ID()
    def put_ID(self, ID):
        '''Method IACLayer2.put_ID

           INPUT
            ID                  : BSTR'''
        return super(IACLayer2, self).put_ID(ID)
    def get_Visible(self):
        '''Method IACLayer2.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IACLayer2, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IACLayer2.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IACLayer2, self).put_Visible(Visible)
    def get_MinScale(self):
        '''Method IACLayer2.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IACLayer2, self).get_MinScale()
    def put_MinScale(self, Scale):
        '''Method IACLayer2.put_MinScale

           INPUT
            Scale               : double'''
        return super(IACLayer2, self).put_MinScale(Scale)
    def get_MaxScale(self):
        '''Method IACLayer2.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IACLayer2, self).get_MaxScale()
    def put_MaxScale(self, Scale):
        '''Method IACLayer2.put_MaxScale

           INPUT
            Scale               : double'''
        return super(IACLayer2, self).put_MaxScale(Scale)
    def get_LayerDefAxl(self):
        '''Method IACLayer2.get_LayerDefAxl

           OUTPUT
            layerDefElement     : IUnknown**'''
        return super(IACLayer2, self).get_LayerDefAxl()
    def get_Extent(self):
        '''Method IACLayer2.get_Extent

           OUTPUT
            envelope            : IEnvelope**'''
        return super(IACLayer2, self).get_Extent()
    def get_NativeSpatialReference(self):
        '''Method IACLayer2.get_NativeSpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IACLayer2, self).get_NativeSpatialReference()
    def get_ParentLayerID(self):
        '''Method IACLayer2.get_ParentLayerID

           OUTPUT
            ID                  : BSTR*'''
        return super(IACLayer2, self).get_ParentLayerID()
    def put_ParentLayerID(self, ID):
        '''Method IACLayer2.put_ParentLayerID

           INPUT
            ID                  : BSTR'''
        return super(IACLayer2, self).put_ParentLayerID(ID)
    Extent = property(get_Extent, None, None)
    ID = property(get_ID, put_ID, None)
    LayerDefAxl = property(get_LayerDefAxl, None, None)
    MaxScale = property(get_MaxScale, put_MaxScale, None)
    MinScale = property(get_MinScale, put_MinScale, None)
    Name = property(get_Name, put_Name, None)
    NativeSpatialReference = property(get_NativeSpatialReference, None, None)
    OriginalName = property(get_OriginalName, put_OriginalName, None)
    ParentLayerID = property(get_ParentLayerID, put_ParentLayerID, None)
    Visible = property(get_Visible, put_Visible, None)

class IACAxl(_esriCarto.IACAxl):
    _IID = uuid.UUID('10d4e467-fb51-49e1-bfcf-0faf531f2d52')

    def __init__(self, *args, **kw):
        super(IACAxl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Element(self):
        '''Method IACAxl.get_Element

           OUTPUT
            Element             : IUnknown**'''
        return super(IACAxl, self).get_Element()
    def putref_Element(self, Element):
        '''Method IACAxl.putref_Element

           INPUT
            Element             : IUnknown*'''
        return super(IACAxl, self).putref_Element(Element)
    Element = property(get_Element, putref_Element, None)

class IACConnector(_esriCarto.IACConnector):
    _IID = uuid.UUID('74e4520f-dfe6-11d3-9ff7-00c04f6bc6a5')
    def get_Map(self, AxlRequest):
        '''Method IACConnector.get_Map

           INPUT
            AxlRequest          : IIMSAxlRequest*

           OUTPUT
            Map                 : IACMap**'''
        return super(IACConnector, self).get_Map(AxlRequest)
    Map = IndexProperty(get_Map, None)

class IACMapAdmin(_esriCarto.IACMapAdmin):
    _IID = uuid.UUID('849696ae-8694-4666-b5f1-9137bad51136')
    def Connect(self, request):
        '''Method IACMapAdmin.Connect

           INPUT
            request             : IIMSAxlRequest*'''
        return super(IACMapAdmin, self).Connect(request)

class IACLayerAdmin(_esriCarto.IACLayerAdmin):
    _IID = uuid.UUID('892dbd7b-6c2a-4456-aa7c-5cbd7cd5e595')
    def get_XMLLayerInfo(self):
        '''Method IACLayerAdmin.get_XMLLayerInfo

           OUTPUT
            xmlString           : BSTR*'''
        return super(IACLayerAdmin, self).get_XMLLayerInfo()
    XMLLayerInfo = property(get_XMLLayerInfo, None, None)

class IACFeatureLayer(_esriCarto.IACFeatureLayer):
    _IID = uuid.UUID('ad88322d-533d-4e36-a5c9-1b109af7a346')

    def __init__(self, *args, **kw):
        super(IACFeatureLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Renderer(self):
        '''Method IACFeatureLayer.get_Renderer

           OUTPUT
            Renderer            : IACRenderer**'''
        return super(IACFeatureLayer, self).get_Renderer()
    def putref_Renderer(self, Renderer):
        '''Method IACFeatureLayer.putref_Renderer

           INPUT
            Renderer            : IACRenderer*'''
        return super(IACFeatureLayer, self).putref_Renderer(Renderer)
    def get_GeometryType(self):
        '''Method IACFeatureLayer.get_GeometryType

           OUTPUT
            Type                : acGeometryType*'''
        return super(IACFeatureLayer, self).get_GeometryType()
    def get_FeatureClass(self):
        '''Method IACFeatureLayer.get_FeatureClass

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IACFeatureLayer, self).get_FeatureClass()
    def get_DisplayField(self):
        '''Method IACFeatureLayer.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IACFeatureLayer, self).get_DisplayField()
    def put_DisplayField(self, FieldName):
        '''Method IACFeatureLayer.put_DisplayField

           INPUT
            FieldName           : BSTR'''
        return super(IACFeatureLayer, self).put_DisplayField(FieldName)
    def get_HasLabels(self):
        '''Method IACFeatureLayer.get_HasLabels

           OUTPUT
            HasLabels           : VARIANT_BOOL*'''
        return super(IACFeatureLayer, self).get_HasLabels()
    def get_DisplayAnnotation(self):
        '''Method IACFeatureLayer.get_DisplayAnnotation

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACFeatureLayer, self).get_DisplayAnnotation()
    def put_DisplayAnnotation(self, flag):
        '''Method IACFeatureLayer.put_DisplayAnnotation

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACFeatureLayer, self).put_DisplayAnnotation(flag)
    DisplayAnnotation = property(get_DisplayAnnotation, put_DisplayAnnotation, None)
    DisplayField = property(get_DisplayField, put_DisplayField, None)
    FeatureClass = property(get_FeatureClass, None, None)
    GeometryType = property(get_GeometryType, None, None)
    HasLabels = property(get_HasLabels, None, None)
    Renderer = property(get_Renderer, putref_Renderer, None)

class IACFeatureLayerAdmin(_esriCarto.IACFeatureLayerAdmin):
    _IID = uuid.UUID('822bc633-eaf0-4bfe-b61d-6d6328f3841f')
    def Connect(self, LayerInfo, request, spatialRef, MapUnits, FeatureClass):
        '''Method IACFeatureLayerAdmin.Connect

           INPUTS
            LayerInfo           : BSTR
            request             : IIMSAxlRequest*
            spatialRef          : ISpatialReference*
            MapUnits            : acMapUnits
            FeatureClass        : IFeatureClass*'''
        return super(IACFeatureLayerAdmin, self).Connect(LayerInfo, request, spatialRef, MapUnits, FeatureClass)

class IACImageLayerAdmin(_esriCarto.IACImageLayerAdmin):
    _IID = uuid.UUID('f14e1ec7-1083-43bd-b3b9-ce44cce0b04b')
    def Connect(self, LayerInfo, request, spatialRef, MapUnits):
        '''Method IACImageLayerAdmin.Connect

           INPUTS
            LayerInfo           : BSTR
            request             : IIMSAxlRequest*
            spatialRef          : ISpatialReference*
            MapUnits            : acMapUnits'''
        return super(IACImageLayerAdmin, self).Connect(LayerInfo, request, spatialRef, MapUnits)

class IACAcetateLayer(_esriCarto.IACAcetateLayer):
    _IID = uuid.UUID('65bd02ac-1cad-462a-a524-3f17e9d85432')

    def __init__(self, *args, **kw):
        super(IACAcetateLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DisplayNorthArrow(self):
        '''Method IACAcetateLayer.get_DisplayNorthArrow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACAcetateLayer, self).get_DisplayNorthArrow()
    def put_DisplayNorthArrow(self, flag):
        '''Method IACAcetateLayer.put_DisplayNorthArrow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACAcetateLayer, self).put_DisplayNorthArrow(flag)
    def get_DisplayScaleBar(self):
        '''Method IACAcetateLayer.get_DisplayScaleBar

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACAcetateLayer, self).get_DisplayScaleBar()
    def put_DisplayScaleBar(self, flag):
        '''Method IACAcetateLayer.put_DisplayScaleBar

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACAcetateLayer, self).put_DisplayScaleBar(flag)
    DisplayNorthArrow = property(get_DisplayNorthArrow, put_DisplayNorthArrow, None)
    DisplayScaleBar = property(get_DisplayScaleBar, put_DisplayScaleBar, None)

class IACAcetateLayerAdmin(_esriCarto.IACAcetateLayerAdmin):
    _IID = uuid.UUID('a62789aa-f3d2-4d3c-91bd-3ecab2b698ac')
    def Connect(self, LayerInfo, request, spatialRef, MapUnits):
        '''Method IACAcetateLayerAdmin.Connect

           INPUTS
            LayerInfo           : BSTR
            request             : IIMSAxlRequest*
            spatialRef          : ISpatialReference*
            MapUnits            : acMapUnits'''
        return super(IACAcetateLayerAdmin, self).Connect(LayerInfo, request, spatialRef, MapUnits)

class IACSimpleRenderer(_esriCarto.IACSimpleRenderer):
    _IID = uuid.UUID('902f9675-d1df-46a2-b879-138af6b4c218')

    def __init__(self, *args, **kw):
        super(IACSimpleRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method IACSimpleRenderer.get_Symbol

           OUTPUT
            Symbol              : IACSymbol**'''
        return super(IACSimpleRenderer, self).get_Symbol()
    def putref_Symbol(self, Symbol):
        '''Method IACSimpleRenderer.putref_Symbol

           INPUT
            Symbol              : IACSymbol*'''
        return super(IACSimpleRenderer, self).putref_Symbol(Symbol)
    Symbol = property(get_Symbol, putref_Symbol, None)

class IACGroupRenderer(_esriCarto.IACGroupRenderer):
    _IID = uuid.UUID('a3619021-32c9-46f9-bb4c-159111f0297c')
    def Add(self, Renderer):
        '''Method IACGroupRenderer.Add

           INPUT
            Renderer            : IACRenderer*'''
        return super(IACGroupRenderer, self).Add(Renderer)
    def get_Count(self):
        '''Method IACGroupRenderer.get_Count

           OUTPUT
            Count               : long*'''
        return super(IACGroupRenderer, self).get_Count()
    def get_Renderer(self, Index):
        '''Method IACGroupRenderer.get_Renderer

           INPUT
            Index               : long

           OUTPUT
            Renderer            : IACRenderer**'''
        return super(IACGroupRenderer, self).get_Renderer(Index)
    def Clear(self):
        '''Method IACGroupRenderer.Clear'''
        return super(IACGroupRenderer, self).Clear()
    def Delete(self, Renderer):
        '''Method IACGroupRenderer.Delete

           INPUT
            Renderer            : IACRenderer*'''
        return super(IACGroupRenderer, self).Delete(Renderer)
    Count = property(get_Count, None, None)
    Renderer = IndexProperty(get_Renderer, None)

class IACScaleDependentRenderer(_esriCarto.IACScaleDependentRenderer):
    _IID = uuid.UUID('209ec66d-9469-4afc-93af-944bbf886694')

    def __init__(self, *args, **kw):
        super(IACScaleDependentRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MinScale(self):
        '''Method IACScaleDependentRenderer.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IACScaleDependentRenderer, self).get_MinScale()
    def put_MinScale(self, Scale):
        '''Method IACScaleDependentRenderer.put_MinScale

           INPUT
            Scale               : double'''
        return super(IACScaleDependentRenderer, self).put_MinScale(Scale)
    def get_MaxScale(self):
        '''Method IACScaleDependentRenderer.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IACScaleDependentRenderer, self).get_MaxScale()
    def put_MaxScale(self, Scale):
        '''Method IACScaleDependentRenderer.put_MaxScale

           INPUT
            Scale               : double'''
        return super(IACScaleDependentRenderer, self).put_MaxScale(Scale)
    def get_Renderer(self):
        '''Method IACScaleDependentRenderer.get_Renderer

           OUTPUT
            Renderer            : IACRenderer**'''
        return super(IACScaleDependentRenderer, self).get_Renderer()
    def putref_Renderer(self, Renderer):
        '''Method IACScaleDependentRenderer.putref_Renderer

           INPUT
            Renderer            : IACRenderer*'''
        return super(IACScaleDependentRenderer, self).putref_Renderer(Renderer)
    MaxScale = property(get_MaxScale, put_MaxScale, None)
    MinScale = property(get_MinScale, put_MinScale, None)
    Renderer = property(get_Renderer, putref_Renderer, None)

class IACValueMapRenderer(_esriCarto.IACValueMapRenderer):
    _IID = uuid.UUID('dd43e233-4b52-4d46-9897-3bfe7638d3e8')

    def __init__(self, *args, **kw):
        super(IACValueMapRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LookupField(self):
        '''Method IACValueMapRenderer.get_LookupField

           OUTPUT
            LookupField         : BSTR*'''
        return super(IACValueMapRenderer, self).get_LookupField()
    def put_LookupField(self, LookupField):
        '''Method IACValueMapRenderer.put_LookupField

           INPUT
            LookupField         : BSTR'''
        return super(IACValueMapRenderer, self).put_LookupField(LookupField)
    def get_Count(self):
        '''Method IACValueMapRenderer.get_Count

           OUTPUT
            Count               : long*'''
        return super(IACValueMapRenderer, self).get_Count()
    def get_Symbol(self, Index):
        '''Method IACValueMapRenderer.get_Symbol

           INPUT
            Index               : long

           OUTPUT
            Symbol              : IACSymbol**'''
        return super(IACValueMapRenderer, self).get_Symbol(Index)
    def put_Symbol(self, Index, Symbol):
        '''Method IACValueMapRenderer.put_Symbol

           INPUTS
            Index               : long
            Symbol              : IACSymbol*'''
        return super(IACValueMapRenderer, self).put_Symbol(Index, Symbol)
    def get_RangeType(self, Index):
        '''Method IACValueMapRenderer.get_RangeType

           INPUT
            Index               : long

           OUTPUT
            range               : acRangeType*'''
        return super(IACValueMapRenderer, self).get_RangeType(Index)
    def put_RangeType(self, Index, range):
        '''Method IACValueMapRenderer.put_RangeType

           INPUTS
            Index               : long
            range               : acRangeType'''
        return super(IACValueMapRenderer, self).put_RangeType(Index, range)
    def get_Value(self, Index):
        '''Method IACValueMapRenderer.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : BSTR*'''
        return super(IACValueMapRenderer, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method IACValueMapRenderer.put_Value

           INPUTS
            Index               : long
            Value               : BSTR'''
        return super(IACValueMapRenderer, self).put_Value(Index, Value)
    def get_Label(self, Index):
        '''Method IACValueMapRenderer.get_Label

           INPUT
            Index               : long

           OUTPUT
            Label               : BSTR*'''
        return super(IACValueMapRenderer, self).get_Label(Index)
    def put_Label(self, Index, Label):
        '''Method IACValueMapRenderer.put_Label

           INPUTS
            Index               : long
            Label               : BSTR'''
        return super(IACValueMapRenderer, self).put_Label(Index, Label)
    def get_Upper(self, Index):
        '''Method IACValueMapRenderer.get_Upper

           INPUT
            Index               : long

           OUTPUT
            Value               : BSTR*'''
        return super(IACValueMapRenderer, self).get_Upper(Index)
    def put_Upper(self, Index, Value):
        '''Method IACValueMapRenderer.put_Upper

           INPUTS
            Index               : long
            Value               : BSTR'''
        return super(IACValueMapRenderer, self).put_Upper(Index, Value)
    def get_Lower(self, Index):
        '''Method IACValueMapRenderer.get_Lower

           INPUT
            Index               : long

           OUTPUT
            Value               : BSTR*'''
        return super(IACValueMapRenderer, self).get_Lower(Index)
    def put_Lower(self, Index, Value):
        '''Method IACValueMapRenderer.put_Lower

           INPUTS
            Index               : long
            Value               : BSTR'''
        return super(IACValueMapRenderer, self).put_Lower(Index, Value)
    def Add(self, Symbol, range, Value, Label, Lower, Upper):
        '''Method IACValueMapRenderer.Add

           INPUTS
            Symbol              : IACSymbol*
            range               : acRangeType
            Value               : BSTR
            Label               : BSTR
            Lower               : BSTR
            Upper               : BSTR'''
        return super(IACValueMapRenderer, self).Add(Symbol, range, Value, Label, Lower, Upper)
    def Clear(self):
        '''Method IACValueMapRenderer.Clear'''
        return super(IACValueMapRenderer, self).Clear()
    def Remove(self, Index):
        '''Method IACValueMapRenderer.Remove

           INPUT
            Index               : long'''
        return super(IACValueMapRenderer, self).Remove(Index)
    Count = property(get_Count, None, None)
    Label = property(None, put_Label, None)
    LookupField = property(get_LookupField, put_LookupField, None)
    Lower = property(None, put_Lower, None)
    RangeType = property(None, put_RangeType, None)
    Symbol = property(None, put_Symbol, None)
    Upper = property(None, put_Upper, None)
    Value = property(None, put_Value, None)
    Label = IndexProperty(get_Label, None)
    Lower = IndexProperty(get_Lower, None)
    RangeType = IndexProperty(get_RangeType, None)
    Symbol = IndexProperty(get_Symbol, None)
    Upper = IndexProperty(get_Upper, None)
    Value = IndexProperty(get_Value, None)

class IACLineLabelPosition(_esriCarto.IACLineLabelPosition):
    _IID = uuid.UUID('3991fa8d-addc-4481-9cc8-4ed047324ac4')

    def __init__(self, *args, **kw):
        super(IACLineLabelPosition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_None(self):
        '''Method IACLineLabelPosition.get_None

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_None()
    def put_None(self, flag):
        '''Method IACLineLabelPosition.put_None

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_None(flag)
    def get_Above(self):
        '''Method IACLineLabelPosition.get_Above

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_Above()
    def put_Above(self, flag):
        '''Method IACLineLabelPosition.put_Above

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_Above(flag)
    def get_Below(self):
        '''Method IACLineLabelPosition.get_Below

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_Below()
    def put_Below(self, flag):
        '''Method IACLineLabelPosition.put_Below

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_Below(flag)
    def get_OnTop(self):
        '''Method IACLineLabelPosition.get_OnTop

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_OnTop()
    def put_OnTop(self, flag):
        '''Method IACLineLabelPosition.put_OnTop

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_OnTop(flag)
    def get_Left(self):
        '''Method IACLineLabelPosition.get_Left

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_Left()
    def put_Left(self, flag):
        '''Method IACLineLabelPosition.put_Left

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_Left(flag)
    def get_Right(self):
        '''Method IACLineLabelPosition.get_Right

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_Right()
    def put_Right(self, flag):
        '''Method IACLineLabelPosition.put_Right

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_Right(flag)
    def get_InLine(self):
        '''Method IACLineLabelPosition.get_InLine

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_InLine()
    def put_InLine(self, flag):
        '''Method IACLineLabelPosition.put_InLine

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_InLine(flag)
    def get_AtStart(self):
        '''Method IACLineLabelPosition.get_AtStart

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_AtStart()
    def put_AtStart(self, flag):
        '''Method IACLineLabelPosition.put_AtStart

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_AtStart(flag)
    def get_AtEnd(self):
        '''Method IACLineLabelPosition.get_AtEnd

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_AtEnd()
    def put_AtEnd(self, flag):
        '''Method IACLineLabelPosition.put_AtEnd

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_AtEnd(flag)
    def get_Parallel(self):
        '''Method IACLineLabelPosition.get_Parallel

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_Parallel()
    def put_Parallel(self, flag):
        '''Method IACLineLabelPosition.put_Parallel

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_Parallel(flag)
    def get_Perpendicular(self):
        '''Method IACLineLabelPosition.get_Perpendicular

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_Perpendicular()
    def put_Perpendicular(self, flag):
        '''Method IACLineLabelPosition.put_Perpendicular

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_Perpendicular(flag)
    def get_Horizontal(self):
        '''Method IACLineLabelPosition.get_Horizontal

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACLineLabelPosition, self).get_Horizontal()
    def put_Horizontal(self, flag):
        '''Method IACLineLabelPosition.put_Horizontal

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACLineLabelPosition, self).put_Horizontal(flag)
    Above = property(get_Above, put_Above, None)
    AtEnd = property(get_AtEnd, put_AtEnd, None)
    AtStart = property(get_AtStart, put_AtStart, None)
    Below = property(get_Below, put_Below, None)
    Horizontal = property(get_Horizontal, put_Horizontal, None)
    InLine = property(get_InLine, put_InLine, None)
    Left = property(get_Left, put_Left, None)
    None_ = property(get_None, put_None, None)
    OnTop = property(get_OnTop, put_OnTop, None)
    Parallel = property(get_Parallel, put_Parallel, None)
    Perpendicular = property(get_Perpendicular, put_Perpendicular, None)
    Right = property(get_Right, put_Right, None)

class IACLabelRenderer(_esriCarto.IACLabelRenderer):
    _IID = uuid.UUID('d71e6435-e35b-4ece-9d3f-e8d4bd66ca21')

    def __init__(self, *args, **kw):
        super(IACLabelRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LabelSymbol(self):
        '''Method IACLabelRenderer.get_LabelSymbol

           OUTPUT
            Symbol              : IACSymbol**'''
        return super(IACLabelRenderer, self).get_LabelSymbol()
    def put_LabelSymbol(self, Symbol):
        '''Method IACLabelRenderer.put_LabelSymbol

           INPUT
            Symbol              : IACSymbol*'''
        return super(IACLabelRenderer, self).put_LabelSymbol(Symbol)
    def get_LabelField(self):
        '''Method IACLabelRenderer.get_LabelField

           OUTPUT
            Name                : BSTR*'''
        return super(IACLabelRenderer, self).get_LabelField()
    def put_LabelField(self, Name):
        '''Method IACLabelRenderer.put_LabelField

           INPUT
            Name                : BSTR'''
        return super(IACLabelRenderer, self).put_LabelField(Name)
    def get_FeatureWeight(self):
        '''Method IACLabelRenderer.get_FeatureWeight

           OUTPUT
            Weight              : acLabelWeight*'''
        return super(IACLabelRenderer, self).get_FeatureWeight()
    def put_FeatureWeight(self, Weight):
        '''Method IACLabelRenderer.put_FeatureWeight

           INPUT
            Weight              : acLabelWeight'''
        return super(IACLabelRenderer, self).put_FeatureWeight(Weight)
    def get_LabelWeight(self):
        '''Method IACLabelRenderer.get_LabelWeight

           OUTPUT
            Weight              : acLabelWeight*'''
        return super(IACLabelRenderer, self).get_LabelWeight()
    def put_LabelWeight(self, Weight):
        '''Method IACLabelRenderer.put_LabelWeight

           INPUT
            Weight              : acLabelWeight'''
        return super(IACLabelRenderer, self).put_LabelWeight(Weight)
    def get_LabelBufferRatio(self):
        '''Method IACLabelRenderer.get_LabelBufferRatio

           OUTPUT
            ratio               : double*'''
        return super(IACLabelRenderer, self).get_LabelBufferRatio()
    def put_LabelBufferRatio(self, ratio):
        '''Method IACLabelRenderer.put_LabelBufferRatio

           INPUT
            ratio               : double'''
        return super(IACLabelRenderer, self).put_LabelBufferRatio(ratio)
    def get_LabelProperties(self):
        '''Method IACLabelRenderer.get_LabelProperties

           OUTPUT
            props               : BSTR*'''
        return super(IACLabelRenderer, self).get_LabelProperties()
    def put_LabelProperties(self, props):
        '''Method IACLabelRenderer.put_LabelProperties

           INPUT
            props               : BSTR'''
        return super(IACLabelRenderer, self).put_LabelProperties(props)
    def get_RotationalAngles(self):
        '''Method IACLabelRenderer.get_RotationalAngles

           OUTPUT
            angles              : BSTR*'''
        return super(IACLabelRenderer, self).get_RotationalAngles()
    def put_RotationalAngles(self, angles):
        '''Method IACLabelRenderer.put_RotationalAngles

           INPUT
            angles              : BSTR'''
        return super(IACLabelRenderer, self).put_RotationalAngles(angles)
    def get_HowManyLabels(self):
        '''Method IACLabelRenderer.get_HowManyLabels

           OUTPUT
            NumLabels           : acNumLabels*'''
        return super(IACLabelRenderer, self).get_HowManyLabels()
    def put_HowManyLabels(self, NumLabels):
        '''Method IACLabelRenderer.put_HowManyLabels

           INPUT
            NumLabels           : acNumLabels'''
        return super(IACLabelRenderer, self).put_HowManyLabels(NumLabels)
    def get_LineLabelPosition(self):
        '''Method IACLabelRenderer.get_LineLabelPosition

           OUTPUT
            LineLabelPosition   : acLineLabelPosition*'''
        return super(IACLabelRenderer, self).get_LineLabelPosition()
    def put_LineLabelPosition(self, LineLabelPosition):
        '''Method IACLabelRenderer.put_LineLabelPosition

           INPUT
            LineLabelPosition   : acLineLabelPosition'''
        return super(IACLabelRenderer, self).put_LineLabelPosition(LineLabelPosition)
    FeatureWeight = property(get_FeatureWeight, put_FeatureWeight, None)
    HowManyLabels = property(get_HowManyLabels, put_HowManyLabels, None)
    LabelBufferRatio = property(get_LabelBufferRatio, put_LabelBufferRatio, None)
    LabelField = property(get_LabelField, put_LabelField, None)
    LabelProperties = property(get_LabelProperties, put_LabelProperties, None)
    LabelSymbol = property(get_LabelSymbol, put_LabelSymbol, None)
    LabelWeight = property(get_LabelWeight, put_LabelWeight, None)
    LineLabelPosition = property(get_LineLabelPosition, put_LineLabelPosition, None)
    RotationalAngles = property(get_RotationalAngles, put_RotationalAngles, None)

class IACSimpleLineSymbol(_esriCarto.IACSimpleLineSymbol):
    _IID = uuid.UUID('da11971d-3da1-4230-b119-82f95cc3a98a')

    def __init__(self, *args, **kw):
        super(IACSimpleLineSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Width(self):
        '''Method IACSimpleLineSymbol.get_Width

           OUTPUT
            Width               : long*'''
        return super(IACSimpleLineSymbol, self).get_Width()
    def put_Width(self, Width):
        '''Method IACSimpleLineSymbol.put_Width

           INPUT
            Width               : long'''
        return super(IACSimpleLineSymbol, self).put_Width(Width)
    def get_Color(self):
        '''Method IACSimpleLineSymbol.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IACSimpleLineSymbol, self).get_Color()
    def put_Color(self, Color):
        '''Method IACSimpleLineSymbol.put_Color

           INPUT
            Color               : IColor*'''
        return super(IACSimpleLineSymbol, self).put_Color(Color)
    def get_Overlap(self):
        '''Method IACSimpleLineSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimpleLineSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACSimpleLineSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimpleLineSymbol, self).put_Overlap(flag)
    def get_LineType(self):
        '''Method IACSimpleLineSymbol.get_LineType

           OUTPUT
            Type                : acLineType*'''
        return super(IACSimpleLineSymbol, self).get_LineType()
    def put_LineType(self, Type):
        '''Method IACSimpleLineSymbol.put_LineType

           INPUT
            Type                : acLineType'''
        return super(IACSimpleLineSymbol, self).put_LineType(Type)
    def get_CapType(self):
        '''Method IACSimpleLineSymbol.get_CapType

           OUTPUT
            Type                : acCapType*'''
        return super(IACSimpleLineSymbol, self).get_CapType()
    def put_CapType(self, Type):
        '''Method IACSimpleLineSymbol.put_CapType

           INPUT
            Type                : acCapType'''
        return super(IACSimpleLineSymbol, self).put_CapType(Type)
    def get_JoinType(self):
        '''Method IACSimpleLineSymbol.get_JoinType

           OUTPUT
            Type                : acJoinType*'''
        return super(IACSimpleLineSymbol, self).get_JoinType()
    def put_JoinType(self, Type):
        '''Method IACSimpleLineSymbol.put_JoinType

           INPUT
            Type                : acJoinType'''
        return super(IACSimpleLineSymbol, self).put_JoinType(Type)
    CapType = property(get_CapType, put_CapType, None)
    Color = property(get_Color, put_Color, None)
    JoinType = property(get_JoinType, put_JoinType, None)
    LineType = property(get_LineType, put_LineType, None)
    Overlap = property(get_Overlap, put_Overlap, None)
    Width = property(get_Width, put_Width, None)

class IACHashLineSymbol(_esriCarto.IACHashLineSymbol):
    _IID = uuid.UUID('6b0a77c8-a0ba-4541-bca7-a4417f0cfb97')

    def __init__(self, *args, **kw):
        super(IACHashLineSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IACHashLineSymbol.get_Type

           OUTPUT
            Type                : acHashLineType*'''
        return super(IACHashLineSymbol, self).get_Type()
    def put_Type(self, Type):
        '''Method IACHashLineSymbol.put_Type

           INPUT
            Type                : acHashLineType'''
        return super(IACHashLineSymbol, self).put_Type(Type)
    def get_Color(self):
        '''Method IACHashLineSymbol.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IACHashLineSymbol, self).get_Color()
    def put_Color(self, Color):
        '''Method IACHashLineSymbol.put_Color

           INPUT
            Color               : IColor*'''
        return super(IACHashLineSymbol, self).put_Color(Color)
    def get_Width(self):
        '''Method IACHashLineSymbol.get_Width

           OUTPUT
            Width               : long*'''
        return super(IACHashLineSymbol, self).get_Width()
    def put_Width(self, Width):
        '''Method IACHashLineSymbol.put_Width

           INPUT
            Width               : long'''
        return super(IACHashLineSymbol, self).put_Width(Width)
    def get_Overlap(self):
        '''Method IACHashLineSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACHashLineSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACHashLineSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACHashLineSymbol, self).put_Overlap(flag)
    def get_Interval(self):
        '''Method IACHashLineSymbol.get_Interval

           OUTPUT
            Interval            : long*'''
        return super(IACHashLineSymbol, self).get_Interval()
    def put_Interval(self, Interval):
        '''Method IACHashLineSymbol.put_Interval

           INPUT
            Interval            : long'''
        return super(IACHashLineSymbol, self).put_Interval(Interval)
    def get_LineThickness(self):
        '''Method IACHashLineSymbol.get_LineThickness

           OUTPUT
            Value               : long*'''
        return super(IACHashLineSymbol, self).get_LineThickness()
    def put_LineThickness(self, Value):
        '''Method IACHashLineSymbol.put_LineThickness

           INPUT
            Value               : long'''
        return super(IACHashLineSymbol, self).put_LineThickness(Value)
    def get_TickThickness(self):
        '''Method IACHashLineSymbol.get_TickThickness

           OUTPUT
            Value               : long*'''
        return super(IACHashLineSymbol, self).get_TickThickness()
    def put_TickThickness(self, Value):
        '''Method IACHashLineSymbol.put_TickThickness

           INPUT
            Value               : long'''
        return super(IACHashLineSymbol, self).put_TickThickness(Value)
    Color = property(get_Color, put_Color, None)
    Interval = property(get_Interval, put_Interval, None)
    LineThickness = property(get_LineThickness, put_LineThickness, None)
    Overlap = property(get_Overlap, put_Overlap, None)
    TickThickness = property(get_TickThickness, put_TickThickness, None)
    Type = property(get_Type, put_Type, None)
    Width = property(get_Width, put_Width, None)

class IACSimplePolygonSymbol(_esriCarto.IACSimplePolygonSymbol):
    _IID = uuid.UUID('32f03709-f43d-4655-ad8e-be49bb8c7f79')

    def __init__(self, *args, **kw):
        super(IACSimplePolygonSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FillColor(self):
        '''Method IACSimplePolygonSymbol.get_FillColor

           OUTPUT
            Color               : IColor**'''
        return super(IACSimplePolygonSymbol, self).get_FillColor()
    def put_FillColor(self, Color):
        '''Method IACSimplePolygonSymbol.put_FillColor

           INPUT
            Color               : IColor*'''
        return super(IACSimplePolygonSymbol, self).put_FillColor(Color)
    def get_FillType(self):
        '''Method IACSimplePolygonSymbol.get_FillType

           OUTPUT
            Type                : acFillType*'''
        return super(IACSimplePolygonSymbol, self).get_FillType()
    def put_FillType(self, Type):
        '''Method IACSimplePolygonSymbol.put_FillType

           INPUT
            Type                : acFillType'''
        return super(IACSimplePolygonSymbol, self).put_FillType(Type)
    def get_FillInterval(self):
        '''Method IACSimplePolygonSymbol.get_FillInterval

           OUTPUT
            Interval            : long*'''
        return super(IACSimplePolygonSymbol, self).get_FillInterval()
    def put_FillInterval(self, Interval):
        '''Method IACSimplePolygonSymbol.put_FillInterval

           INPUT
            Interval            : long'''
        return super(IACSimplePolygonSymbol, self).put_FillInterval(Interval)
    def get_FillTransparency(self):
        '''Method IACSimplePolygonSymbol.get_FillTransparency

           OUTPUT
            trans               : double*'''
        return super(IACSimplePolygonSymbol, self).get_FillTransparency()
    def put_FillTransparency(self, trans):
        '''Method IACSimplePolygonSymbol.put_FillTransparency

           INPUT
            trans               : double'''
        return super(IACSimplePolygonSymbol, self).put_FillTransparency(trans)
    def get_BoundaryWidth(self):
        '''Method IACSimplePolygonSymbol.get_BoundaryWidth

           OUTPUT
            Width               : long*'''
        return super(IACSimplePolygonSymbol, self).get_BoundaryWidth()
    def put_BoundaryWidth(self, Width):
        '''Method IACSimplePolygonSymbol.put_BoundaryWidth

           INPUT
            Width               : long'''
        return super(IACSimplePolygonSymbol, self).put_BoundaryWidth(Width)
    def get_BoundaryColor(self):
        '''Method IACSimplePolygonSymbol.get_BoundaryColor

           OUTPUT
            Color               : IColor**'''
        return super(IACSimplePolygonSymbol, self).get_BoundaryColor()
    def put_BoundaryColor(self, Color):
        '''Method IACSimplePolygonSymbol.put_BoundaryColor

           INPUT
            Color               : IColor*'''
        return super(IACSimplePolygonSymbol, self).put_BoundaryColor(Color)
    def get_BoundaryLineType(self):
        '''Method IACSimplePolygonSymbol.get_BoundaryLineType

           OUTPUT
            Type                : acLineType*'''
        return super(IACSimplePolygonSymbol, self).get_BoundaryLineType()
    def put_BoundaryLineType(self, Type):
        '''Method IACSimplePolygonSymbol.put_BoundaryLineType

           INPUT
            Type                : acLineType'''
        return super(IACSimplePolygonSymbol, self).put_BoundaryLineType(Type)
    def get_BoundaryCapType(self):
        '''Method IACSimplePolygonSymbol.get_BoundaryCapType

           OUTPUT
            Type                : acCapType*'''
        return super(IACSimplePolygonSymbol, self).get_BoundaryCapType()
    def put_BoundaryCapType(self, Type):
        '''Method IACSimplePolygonSymbol.put_BoundaryCapType

           INPUT
            Type                : acCapType'''
        return super(IACSimplePolygonSymbol, self).put_BoundaryCapType(Type)
    def get_BoundaryJoinType(self):
        '''Method IACSimplePolygonSymbol.get_BoundaryJoinType

           OUTPUT
            Type                : acJoinType*'''
        return super(IACSimplePolygonSymbol, self).get_BoundaryJoinType()
    def put_BoundaryJoinType(self, Type):
        '''Method IACSimplePolygonSymbol.put_BoundaryJoinType

           INPUT
            Type                : acJoinType'''
        return super(IACSimplePolygonSymbol, self).put_BoundaryJoinType(Type)
    def get_BoundaryTransparency(self):
        '''Method IACSimplePolygonSymbol.get_BoundaryTransparency

           OUTPUT
            trans               : double*'''
        return super(IACSimplePolygonSymbol, self).get_BoundaryTransparency()
    def put_BoundaryTransparency(self, trans):
        '''Method IACSimplePolygonSymbol.put_BoundaryTransparency

           INPUT
            trans               : double'''
        return super(IACSimplePolygonSymbol, self).put_BoundaryTransparency(trans)
    def get_Overlap(self):
        '''Method IACSimplePolygonSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimplePolygonSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACSimplePolygonSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimplePolygonSymbol, self).put_Overlap(flag)
    def get_Boundary(self):
        '''Method IACSimplePolygonSymbol.get_Boundary

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimplePolygonSymbol, self).get_Boundary()
    def put_Boundary(self, flag):
        '''Method IACSimplePolygonSymbol.put_Boundary

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimplePolygonSymbol, self).put_Boundary(flag)
    Boundary = property(get_Boundary, put_Boundary, None)
    BoundaryCapType = property(get_BoundaryCapType, put_BoundaryCapType, None)
    BoundaryColor = property(get_BoundaryColor, put_BoundaryColor, None)
    BoundaryJoinType = property(get_BoundaryJoinType, put_BoundaryJoinType, None)
    BoundaryLineType = property(get_BoundaryLineType, put_BoundaryLineType, None)
    BoundaryTransparency = property(get_BoundaryTransparency, put_BoundaryTransparency, None)
    BoundaryWidth = property(get_BoundaryWidth, put_BoundaryWidth, None)
    FillColor = property(get_FillColor, put_FillColor, None)
    FillInterval = property(get_FillInterval, put_FillInterval, None)
    FillTransparency = property(get_FillTransparency, put_FillTransparency, None)
    FillType = property(get_FillType, put_FillType, None)
    Overlap = property(get_Overlap, put_Overlap, None)

class IACSimpleFillSymbol(_esriCarto.IACSimpleFillSymbol):
    _IID = uuid.UUID('06a77433-fd34-4b30-a46b-bc217904ab76')

    def __init__(self, *args, **kw):
        super(IACSimpleFillSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Color(self):
        '''Method IACSimpleFillSymbol.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IACSimpleFillSymbol, self).get_Color()
    def put_Color(self, Color):
        '''Method IACSimpleFillSymbol.put_Color

           INPUT
            Color               : IColor*'''
        return super(IACSimpleFillSymbol, self).put_Color(Color)
    def get_FillType(self):
        '''Method IACSimpleFillSymbol.get_FillType

           OUTPUT
            Type                : acFillType*'''
        return super(IACSimpleFillSymbol, self).get_FillType()
    def put_FillType(self, Type):
        '''Method IACSimpleFillSymbol.put_FillType

           INPUT
            Type                : acFillType'''
        return super(IACSimpleFillSymbol, self).put_FillType(Type)
    def get_Interval(self):
        '''Method IACSimpleFillSymbol.get_Interval

           OUTPUT
            Interval            : long*'''
        return super(IACSimpleFillSymbol, self).get_Interval()
    def put_Interval(self, Interval):
        '''Method IACSimpleFillSymbol.put_Interval

           INPUT
            Interval            : long'''
        return super(IACSimpleFillSymbol, self).put_Interval(Interval)
    def get_Overlap(self):
        '''Method IACSimpleFillSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimpleFillSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACSimpleFillSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimpleFillSymbol, self).put_Overlap(flag)
    def get_Boundary(self):
        '''Method IACSimpleFillSymbol.get_Boundary

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimpleFillSymbol, self).get_Boundary()
    def put_Boundary(self, flag):
        '''Method IACSimpleFillSymbol.put_Boundary

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimpleFillSymbol, self).put_Boundary(flag)
    Boundary = property(get_Boundary, put_Boundary, None)
    Color = property(get_Color, put_Color, None)
    FillType = property(get_FillType, put_FillType, None)
    Interval = property(get_Interval, put_Interval, None)
    Overlap = property(get_Overlap, put_Overlap, None)

class IACRasterFillSymbol(_esriCarto.IACRasterFillSymbol):
    _IID = uuid.UUID('536b61ee-ec20-4619-8dbd-5452521412cb')

    def __init__(self, *args, **kw):
        super(IACRasterFillSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_URL(self):
        '''Method IACRasterFillSymbol.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IACRasterFillSymbol, self).get_URL()
    def put_URL(self, URL):
        '''Method IACRasterFillSymbol.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IACRasterFillSymbol, self).put_URL(URL)
    def get_Image(self):
        '''Method IACRasterFillSymbol.get_Image

           OUTPUT
            Path                : BSTR*'''
        return super(IACRasterFillSymbol, self).get_Image()
    def put_Image(self, Path):
        '''Method IACRasterFillSymbol.put_Image

           INPUT
            Path                : BSTR'''
        return super(IACRasterFillSymbol, self).put_Image(Path)
    def get_Overlap(self):
        '''Method IACRasterFillSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACRasterFillSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACRasterFillSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACRasterFillSymbol, self).put_Overlap(flag)
    Image = property(get_Image, put_Image, None)
    Overlap = property(get_Overlap, put_Overlap, None)
    URL = property(get_URL, put_URL, None)

class IACGradientFillSymbol(_esriCarto.IACGradientFillSymbol):
    _IID = uuid.UUID('7e9b1c09-f4d7-4bb0-9340-00dfa8fe5f5c')

    def __init__(self, *args, **kw):
        super(IACGradientFillSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IACGradientFillSymbol.get_Type

           OUTPUT
            Type                : acGradientFillType*'''
        return super(IACGradientFillSymbol, self).get_Type()
    def put_Type(self, Type):
        '''Method IACGradientFillSymbol.put_Type

           INPUT
            Type                : acGradientFillType'''
        return super(IACGradientFillSymbol, self).put_Type(Type)
    def get_StartColor(self):
        '''Method IACGradientFillSymbol.get_StartColor

           OUTPUT
            Color               : IColor**'''
        return super(IACGradientFillSymbol, self).get_StartColor()
    def put_StartColor(self, Color):
        '''Method IACGradientFillSymbol.put_StartColor

           INPUT
            Color               : IColor*'''
        return super(IACGradientFillSymbol, self).put_StartColor(Color)
    def get_FinishColor(self):
        '''Method IACGradientFillSymbol.get_FinishColor

           OUTPUT
            Color               : IColor**'''
        return super(IACGradientFillSymbol, self).get_FinishColor()
    def put_FinishColor(self, Color):
        '''Method IACGradientFillSymbol.put_FinishColor

           INPUT
            Color               : IColor*'''
        return super(IACGradientFillSymbol, self).put_FinishColor(Color)
    def get_Overlap(self):
        '''Method IACGradientFillSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACGradientFillSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACGradientFillSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACGradientFillSymbol, self).put_Overlap(flag)
    FinishColor = property(get_FinishColor, put_FinishColor, None)
    Overlap = property(get_Overlap, put_Overlap, None)
    StartColor = property(get_StartColor, put_StartColor, None)
    Type = property(get_Type, put_Type, None)

class IACSimpleMarkerSymbol(_esriCarto.IACSimpleMarkerSymbol):
    _IID = uuid.UUID('27a1db1a-513d-4708-bf7b-8bbc285a29d2')

    def __init__(self, *args, **kw):
        super(IACSimpleMarkerSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Outline(self):
        '''Method IACSimpleMarkerSymbol.get_Outline

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimpleMarkerSymbol, self).get_Outline()
    def put_Outline(self, flag):
        '''Method IACSimpleMarkerSymbol.put_Outline

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimpleMarkerSymbol, self).put_Outline(flag)
    def get_OutlineColor(self):
        '''Method IACSimpleMarkerSymbol.get_OutlineColor

           OUTPUT
            Color               : IColor**'''
        return super(IACSimpleMarkerSymbol, self).get_OutlineColor()
    def put_OutlineColor(self, Color):
        '''Method IACSimpleMarkerSymbol.put_OutlineColor

           INPUT
            Color               : IColor*'''
        return super(IACSimpleMarkerSymbol, self).put_OutlineColor(Color)
    def get_Shadow(self):
        '''Method IACSimpleMarkerSymbol.get_Shadow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimpleMarkerSymbol, self).get_Shadow()
    def put_Shadow(self, flag):
        '''Method IACSimpleMarkerSymbol.put_Shadow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimpleMarkerSymbol, self).put_Shadow(flag)
    def get_ShadowColor(self):
        '''Method IACSimpleMarkerSymbol.get_ShadowColor

           OUTPUT
            Color               : IColor**'''
        return super(IACSimpleMarkerSymbol, self).get_ShadowColor()
    def put_ShadowColor(self, Color):
        '''Method IACSimpleMarkerSymbol.put_ShadowColor

           INPUT
            Color               : IColor*'''
        return super(IACSimpleMarkerSymbol, self).put_ShadowColor(Color)
    def get_Overlap(self):
        '''Method IACSimpleMarkerSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACSimpleMarkerSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACSimpleMarkerSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACSimpleMarkerSymbol, self).put_Overlap(flag)
    def get_Color(self):
        '''Method IACSimpleMarkerSymbol.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IACSimpleMarkerSymbol, self).get_Color()
    def put_Color(self, Color):
        '''Method IACSimpleMarkerSymbol.put_Color

           INPUT
            Color               : IColor*'''
        return super(IACSimpleMarkerSymbol, self).put_Color(Color)
    def get_Type(self):
        '''Method IACSimpleMarkerSymbol.get_Type

           OUTPUT
            Type                : acMarkerType*'''
        return super(IACSimpleMarkerSymbol, self).get_Type()
    def put_Type(self, Type):
        '''Method IACSimpleMarkerSymbol.put_Type

           INPUT
            Type                : acMarkerType'''
        return super(IACSimpleMarkerSymbol, self).put_Type(Type)
    def get_Width(self):
        '''Method IACSimpleMarkerSymbol.get_Width

           OUTPUT
            Width               : long*'''
        return super(IACSimpleMarkerSymbol, self).get_Width()
    def put_Width(self, Width):
        '''Method IACSimpleMarkerSymbol.put_Width

           INPUT
            Width               : long'''
        return super(IACSimpleMarkerSymbol, self).put_Width(Width)
    Color = property(get_Color, put_Color, None)
    Outline = property(get_Outline, put_Outline, None)
    OutlineColor = property(get_OutlineColor, put_OutlineColor, None)
    Overlap = property(get_Overlap, put_Overlap, None)
    Shadow = property(get_Shadow, put_Shadow, None)
    ShadowColor = property(get_ShadowColor, put_ShadowColor, None)
    Type = property(get_Type, put_Type, None)
    Width = property(get_Width, put_Width, None)

class IACTrueTypeMarkerSymbol(_esriCarto.IACTrueTypeMarkerSymbol):
    _IID = uuid.UUID('a9998c07-2def-4a3f-96f4-b0a9878daf5a')

    def __init__(self, *args, **kw):
        super(IACTrueTypeMarkerSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Font(self):
        '''Method IACTrueTypeMarkerSymbol.get_Font

           OUTPUT
            Font                : BSTR*'''
        return super(IACTrueTypeMarkerSymbol, self).get_Font()
    def put_Font(self, Font):
        '''Method IACTrueTypeMarkerSymbol.put_Font

           INPUT
            Font                : BSTR'''
        return super(IACTrueTypeMarkerSymbol, self).put_Font(Font)
    def get_FontStyle(self):
        '''Method IACTrueTypeMarkerSymbol.get_FontStyle

           OUTPUT
            FontStyle           : acFontStyle*'''
        return super(IACTrueTypeMarkerSymbol, self).get_FontStyle()
    def put_FontStyle(self, FontStyle):
        '''Method IACTrueTypeMarkerSymbol.put_FontStyle

           INPUT
            FontStyle           : acFontStyle'''
        return super(IACTrueTypeMarkerSymbol, self).put_FontStyle(FontStyle)
    def get_FontSize(self):
        '''Method IACTrueTypeMarkerSymbol.get_FontSize

           OUTPUT
            FontSize            : long*'''
        return super(IACTrueTypeMarkerSymbol, self).get_FontSize()
    def put_FontSize(self, FontSize):
        '''Method IACTrueTypeMarkerSymbol.put_FontSize

           INPUT
            FontSize            : long'''
        return super(IACTrueTypeMarkerSymbol, self).put_FontSize(FontSize)
    def get_FontColor(self):
        '''Method IACTrueTypeMarkerSymbol.get_FontColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTrueTypeMarkerSymbol, self).get_FontColor()
    def put_FontColor(self, Color):
        '''Method IACTrueTypeMarkerSymbol.put_FontColor

           INPUT
            Color               : IColor*'''
        return super(IACTrueTypeMarkerSymbol, self).put_FontColor(Color)
    def get_Outline(self):
        '''Method IACTrueTypeMarkerSymbol.get_Outline

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTrueTypeMarkerSymbol, self).get_Outline()
    def put_Outline(self, flag):
        '''Method IACTrueTypeMarkerSymbol.put_Outline

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTrueTypeMarkerSymbol, self).put_Outline(flag)
    def get_OutlineColor(self):
        '''Method IACTrueTypeMarkerSymbol.get_OutlineColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTrueTypeMarkerSymbol, self).get_OutlineColor()
    def put_OutlineColor(self, Color):
        '''Method IACTrueTypeMarkerSymbol.put_OutlineColor

           INPUT
            Color               : IColor*'''
        return super(IACTrueTypeMarkerSymbol, self).put_OutlineColor(Color)
    def get_Glowing(self):
        '''Method IACTrueTypeMarkerSymbol.get_Glowing

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTrueTypeMarkerSymbol, self).get_Glowing()
    def put_Glowing(self, flag):
        '''Method IACTrueTypeMarkerSymbol.put_Glowing

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTrueTypeMarkerSymbol, self).put_Glowing(flag)
    def get_GlowingColor(self):
        '''Method IACTrueTypeMarkerSymbol.get_GlowingColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTrueTypeMarkerSymbol, self).get_GlowingColor()
    def put_GlowingColor(self, Color):
        '''Method IACTrueTypeMarkerSymbol.put_GlowingColor

           INPUT
            Color               : IColor*'''
        return super(IACTrueTypeMarkerSymbol, self).put_GlowingColor(Color)
    def get_Shadow(self):
        '''Method IACTrueTypeMarkerSymbol.get_Shadow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTrueTypeMarkerSymbol, self).get_Shadow()
    def put_Shadow(self, flag):
        '''Method IACTrueTypeMarkerSymbol.put_Shadow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTrueTypeMarkerSymbol, self).put_Shadow(flag)
    def get_ShadowColor(self):
        '''Method IACTrueTypeMarkerSymbol.get_ShadowColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTrueTypeMarkerSymbol, self).get_ShadowColor()
    def put_ShadowColor(self, Color):
        '''Method IACTrueTypeMarkerSymbol.put_ShadowColor

           INPUT
            Color               : IColor*'''
        return super(IACTrueTypeMarkerSymbol, self).put_ShadowColor(Color)
    def get_Character(self):
        '''Method IACTrueTypeMarkerSymbol.get_Character

           OUTPUT
            Value               : long*'''
        return super(IACTrueTypeMarkerSymbol, self).get_Character()
    def put_Character(self, Value):
        '''Method IACTrueTypeMarkerSymbol.put_Character

           INPUT
            Value               : long'''
        return super(IACTrueTypeMarkerSymbol, self).put_Character(Value)
    def get_Angle(self):
        '''Method IACTrueTypeMarkerSymbol.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(IACTrueTypeMarkerSymbol, self).get_Angle()
    def put_Angle(self, Angle):
        '''Method IACTrueTypeMarkerSymbol.put_Angle

           INPUT
            Angle               : double'''
        return super(IACTrueTypeMarkerSymbol, self).put_Angle(Angle)
    def get_Overlap(self):
        '''Method IACTrueTypeMarkerSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTrueTypeMarkerSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACTrueTypeMarkerSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTrueTypeMarkerSymbol, self).put_Overlap(flag)
    Angle = property(get_Angle, put_Angle, None)
    Character = property(get_Character, put_Character, None)
    Font = property(get_Font, put_Font, None)
    FontColor = property(get_FontColor, put_FontColor, None)
    FontSize = property(get_FontSize, put_FontSize, None)
    FontStyle = property(get_FontStyle, put_FontStyle, None)
    Glowing = property(get_Glowing, put_Glowing, None)
    GlowingColor = property(get_GlowingColor, put_GlowingColor, None)
    Outline = property(get_Outline, put_Outline, None)
    OutlineColor = property(get_OutlineColor, put_OutlineColor, None)
    Overlap = property(get_Overlap, put_Overlap, None)
    Shadow = property(get_Shadow, put_Shadow, None)
    ShadowColor = property(get_ShadowColor, put_ShadowColor, None)

class IACRasterMarkerSymbol(_esriCarto.IACRasterMarkerSymbol):
    _IID = uuid.UUID('ea422e0d-124d-4266-b2a8-a2931f1eaaa6')

    def __init__(self, *args, **kw):
        super(IACRasterMarkerSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_URL(self):
        '''Method IACRasterMarkerSymbol.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IACRasterMarkerSymbol, self).get_URL()
    def put_URL(self, URL):
        '''Method IACRasterMarkerSymbol.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IACRasterMarkerSymbol, self).put_URL(URL)
    def get_Image(self):
        '''Method IACRasterMarkerSymbol.get_Image

           OUTPUT
            Path                : BSTR*'''
        return super(IACRasterMarkerSymbol, self).get_Image()
    def put_Image(self, Path):
        '''Method IACRasterMarkerSymbol.put_Image

           INPUT
            Path                : BSTR'''
        return super(IACRasterMarkerSymbol, self).put_Image(Path)
    def get_Overlap(self):
        '''Method IACRasterMarkerSymbol.get_Overlap

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACRasterMarkerSymbol, self).get_Overlap()
    def put_Overlap(self, flag):
        '''Method IACRasterMarkerSymbol.put_Overlap

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACRasterMarkerSymbol, self).put_Overlap(flag)
    def get_Width(self):
        '''Method IACRasterMarkerSymbol.get_Width

           OUTPUT
            Width               : long*'''
        return super(IACRasterMarkerSymbol, self).get_Width()
    def put_Width(self, Width):
        '''Method IACRasterMarkerSymbol.put_Width

           INPUT
            Width               : long'''
        return super(IACRasterMarkerSymbol, self).put_Width(Width)
    def get_Height(self):
        '''Method IACRasterMarkerSymbol.get_Height

           OUTPUT
            Height              : long*'''
        return super(IACRasterMarkerSymbol, self).get_Height()
    def put_Height(self, Height):
        '''Method IACRasterMarkerSymbol.put_Height

           INPUT
            Height              : long'''
        return super(IACRasterMarkerSymbol, self).put_Height(Height)
    def get_HotSpot(self):
        '''Method IACRasterMarkerSymbol.get_HotSpot

           OUTPUT
            point               : IPoint**'''
        return super(IACRasterMarkerSymbol, self).get_HotSpot()
    def put_HotSpot(self, point):
        '''Method IACRasterMarkerSymbol.put_HotSpot

           INPUT
            point               : IPoint*'''
        return super(IACRasterMarkerSymbol, self).put_HotSpot(point)
    def get_Shadow(self):
        '''Method IACRasterMarkerSymbol.get_Shadow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACRasterMarkerSymbol, self).get_Shadow()
    def put_Shadow(self, flag):
        '''Method IACRasterMarkerSymbol.put_Shadow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACRasterMarkerSymbol, self).put_Shadow(flag)
    def get_ShadowColor(self):
        '''Method IACRasterMarkerSymbol.get_ShadowColor

           OUTPUT
            Color               : IColor**'''
        return super(IACRasterMarkerSymbol, self).get_ShadowColor()
    def put_ShadowColor(self, Color):
        '''Method IACRasterMarkerSymbol.put_ShadowColor

           INPUT
            Color               : IColor*'''
        return super(IACRasterMarkerSymbol, self).put_ShadowColor(Color)
    Height = property(get_Height, put_Height, None)
    HotSpot = property(get_HotSpot, put_HotSpot, None)
    Image = property(get_Image, put_Image, None)
    Overlap = property(get_Overlap, put_Overlap, None)
    Shadow = property(get_Shadow, put_Shadow, None)
    ShadowColor = property(get_ShadowColor, put_ShadowColor, None)
    URL = property(get_URL, put_URL, None)
    Width = property(get_Width, put_Width, None)

class IACCalloutMarkerSymbol(_esriCarto.IACCalloutMarkerSymbol):
    _IID = uuid.UUID('58c9f9ef-622f-4f7a-a64b-ec3ea34b2fe2')

    def __init__(self, *args, **kw):
        super(IACCalloutMarkerSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Font(self):
        '''Method IACCalloutMarkerSymbol.get_Font

           OUTPUT
            Font                : BSTR*'''
        return super(IACCalloutMarkerSymbol, self).get_Font()
    def put_Font(self, Font):
        '''Method IACCalloutMarkerSymbol.put_Font

           INPUT
            Font                : BSTR'''
        return super(IACCalloutMarkerSymbol, self).put_Font(Font)
    def get_FontStyle(self):
        '''Method IACCalloutMarkerSymbol.get_FontStyle

           OUTPUT
            FontStyle           : acFontStyle*'''
        return super(IACCalloutMarkerSymbol, self).get_FontStyle()
    def put_FontStyle(self, FontStyle):
        '''Method IACCalloutMarkerSymbol.put_FontStyle

           INPUT
            FontStyle           : acFontStyle'''
        return super(IACCalloutMarkerSymbol, self).put_FontStyle(FontStyle)
    def get_FontSize(self):
        '''Method IACCalloutMarkerSymbol.get_FontSize

           OUTPUT
            FontSize            : long*'''
        return super(IACCalloutMarkerSymbol, self).get_FontSize()
    def put_FontSize(self, FontSize):
        '''Method IACCalloutMarkerSymbol.put_FontSize

           INPUT
            FontSize            : long'''
        return super(IACCalloutMarkerSymbol, self).put_FontSize(FontSize)
    def get_FontColor(self):
        '''Method IACCalloutMarkerSymbol.get_FontColor

           OUTPUT
            Color               : IColor**'''
        return super(IACCalloutMarkerSymbol, self).get_FontColor()
    def put_FontColor(self, Color):
        '''Method IACCalloutMarkerSymbol.put_FontColor

           INPUT
            Color               : IColor*'''
        return super(IACCalloutMarkerSymbol, self).put_FontColor(Color)
    def get_Outline(self):
        '''Method IACCalloutMarkerSymbol.get_Outline

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACCalloutMarkerSymbol, self).get_Outline()
    def put_Outline(self, flag):
        '''Method IACCalloutMarkerSymbol.put_Outline

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACCalloutMarkerSymbol, self).put_Outline(flag)
    def get_OutlineColor(self):
        '''Method IACCalloutMarkerSymbol.get_OutlineColor

           OUTPUT
            Color               : IColor**'''
        return super(IACCalloutMarkerSymbol, self).get_OutlineColor()
    def put_OutlineColor(self, Color):
        '''Method IACCalloutMarkerSymbol.put_OutlineColor

           INPUT
            Color               : IColor*'''
        return super(IACCalloutMarkerSymbol, self).put_OutlineColor(Color)
    def get_Glowing(self):
        '''Method IACCalloutMarkerSymbol.get_Glowing

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACCalloutMarkerSymbol, self).get_Glowing()
    def put_Glowing(self, flag):
        '''Method IACCalloutMarkerSymbol.put_Glowing

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACCalloutMarkerSymbol, self).put_Glowing(flag)
    def get_GlowingColor(self):
        '''Method IACCalloutMarkerSymbol.get_GlowingColor

           OUTPUT
            Color               : IColor**'''
        return super(IACCalloutMarkerSymbol, self).get_GlowingColor()
    def put_GlowingColor(self, Color):
        '''Method IACCalloutMarkerSymbol.put_GlowingColor

           INPUT
            Color               : IColor*'''
        return super(IACCalloutMarkerSymbol, self).put_GlowingColor(Color)
    def get_Shadow(self):
        '''Method IACCalloutMarkerSymbol.get_Shadow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACCalloutMarkerSymbol, self).get_Shadow()
    def put_Shadow(self, flag):
        '''Method IACCalloutMarkerSymbol.put_Shadow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACCalloutMarkerSymbol, self).put_Shadow(flag)
    def get_ShadowColor(self):
        '''Method IACCalloutMarkerSymbol.get_ShadowColor

           OUTPUT
            Color               : IColor**'''
        return super(IACCalloutMarkerSymbol, self).get_ShadowColor()
    def put_ShadowColor(self, Color):
        '''Method IACCalloutMarkerSymbol.put_ShadowColor

           INPUT
            Color               : IColor*'''
        return super(IACCalloutMarkerSymbol, self).put_ShadowColor(Color)
    def get_BackColor(self):
        '''Method IACCalloutMarkerSymbol.get_BackColor

           OUTPUT
            Color               : IColor**'''
        return super(IACCalloutMarkerSymbol, self).get_BackColor()
    def put_BackColor(self, Color):
        '''Method IACCalloutMarkerSymbol.put_BackColor

           INPUT
            Color               : IColor*'''
        return super(IACCalloutMarkerSymbol, self).put_BackColor(Color)
    def get_BoundaryColor(self):
        '''Method IACCalloutMarkerSymbol.get_BoundaryColor

           OUTPUT
            Color               : IColor**'''
        return super(IACCalloutMarkerSymbol, self).get_BoundaryColor()
    def put_BoundaryColor(self, Color):
        '''Method IACCalloutMarkerSymbol.put_BoundaryColor

           INPUT
            Color               : IColor*'''
        return super(IACCalloutMarkerSymbol, self).put_BoundaryColor(Color)
    def get_Interval(self):
        '''Method IACCalloutMarkerSymbol.get_Interval

           OUTPUT
            Interval            : long*'''
        return super(IACCalloutMarkerSymbol, self).get_Interval()
    def put_Interval(self, Interval):
        '''Method IACCalloutMarkerSymbol.put_Interval

           INPUT
            Interval            : long'''
        return super(IACCalloutMarkerSymbol, self).put_Interval(Interval)
    BackColor = property(get_BackColor, put_BackColor, None)
    BoundaryColor = property(get_BoundaryColor, put_BoundaryColor, None)
    Font = property(get_Font, put_Font, None)
    FontColor = property(get_FontColor, put_FontColor, None)
    FontSize = property(get_FontSize, put_FontSize, None)
    FontStyle = property(get_FontStyle, put_FontStyle, None)
    Glowing = property(get_Glowing, put_Glowing, None)
    GlowingColor = property(get_GlowingColor, put_GlowingColor, None)
    Interval = property(get_Interval, put_Interval, None)
    Outline = property(get_Outline, put_Outline, None)
    OutlineColor = property(get_OutlineColor, put_OutlineColor, None)
    Shadow = property(get_Shadow, put_Shadow, None)
    ShadowColor = property(get_ShadowColor, put_ShadowColor, None)

class IACRasterShieldSymbol(_esriCarto.IACRasterShieldSymbol):
    _IID = uuid.UUID('33282097-f60f-402a-a047-c0ec72de5186')

    def __init__(self, *args, **kw):
        super(IACRasterShieldSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_URL(self):
        '''Method IACRasterShieldSymbol.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IACRasterShieldSymbol, self).get_URL()
    def put_URL(self, URL):
        '''Method IACRasterShieldSymbol.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IACRasterShieldSymbol, self).put_URL(URL)
    def get_Image(self):
        '''Method IACRasterShieldSymbol.get_Image

           OUTPUT
            Path                : BSTR*'''
        return super(IACRasterShieldSymbol, self).get_Image()
    def put_Image(self, Path):
        '''Method IACRasterShieldSymbol.put_Image

           INPUT
            Path                : BSTR'''
        return super(IACRasterShieldSymbol, self).put_Image(Path)
    def get_Font(self):
        '''Method IACRasterShieldSymbol.get_Font

           OUTPUT
            Font                : BSTR*'''
        return super(IACRasterShieldSymbol, self).get_Font()
    def put_Font(self, Font):
        '''Method IACRasterShieldSymbol.put_Font

           INPUT
            Font                : BSTR'''
        return super(IACRasterShieldSymbol, self).put_Font(Font)
    def get_FontStyle(self):
        '''Method IACRasterShieldSymbol.get_FontStyle

           OUTPUT
            FontStyle           : acFontStyle*'''
        return super(IACRasterShieldSymbol, self).get_FontStyle()
    def put_FontStyle(self, FontStyle):
        '''Method IACRasterShieldSymbol.put_FontStyle

           INPUT
            FontStyle           : acFontStyle'''
        return super(IACRasterShieldSymbol, self).put_FontStyle(FontStyle)
    def get_FontSize(self):
        '''Method IACRasterShieldSymbol.get_FontSize

           OUTPUT
            FontSize            : long*'''
        return super(IACRasterShieldSymbol, self).get_FontSize()
    def put_FontSize(self, FontSize):
        '''Method IACRasterShieldSymbol.put_FontSize

           INPUT
            FontSize            : long'''
        return super(IACRasterShieldSymbol, self).put_FontSize(FontSize)
    def get_FontColor(self):
        '''Method IACRasterShieldSymbol.get_FontColor

           OUTPUT
            Color               : IColor**'''
        return super(IACRasterShieldSymbol, self).get_FontColor()
    def put_FontColor(self, Color):
        '''Method IACRasterShieldSymbol.put_FontColor

           INPUT
            Color               : IColor*'''
        return super(IACRasterShieldSymbol, self).put_FontColor(Color)
    def get_Shadow(self):
        '''Method IACRasterShieldSymbol.get_Shadow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACRasterShieldSymbol, self).get_Shadow()
    def put_Shadow(self, flag):
        '''Method IACRasterShieldSymbol.put_Shadow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACRasterShieldSymbol, self).put_Shadow(flag)
    def get_ShadowColor(self):
        '''Method IACRasterShieldSymbol.get_ShadowColor

           OUTPUT
            Color               : IColor**'''
        return super(IACRasterShieldSymbol, self).get_ShadowColor()
    def put_ShadowColor(self, Color):
        '''Method IACRasterShieldSymbol.put_ShadowColor

           INPUT
            Color               : IColor*'''
        return super(IACRasterShieldSymbol, self).put_ShadowColor(Color)
    def get_PrintMode(self):
        '''Method IACRasterShieldSymbol.get_PrintMode

           OUTPUT
            PrintMode           : acPrintMode*'''
        return super(IACRasterShieldSymbol, self).get_PrintMode()
    def put_PrintMode(self, PrintMode):
        '''Method IACRasterShieldSymbol.put_PrintMode

           INPUT
            PrintMode           : acPrintMode'''
        return super(IACRasterShieldSymbol, self).put_PrintMode(PrintMode)
    def get_TextPosition(self):
        '''Method IACRasterShieldSymbol.get_TextPosition

           OUTPUT
            point               : IPoint**'''
        return super(IACRasterShieldSymbol, self).get_TextPosition()
    def put_TextPosition(self, point):
        '''Method IACRasterShieldSymbol.put_TextPosition

           INPUT
            point               : IPoint*'''
        return super(IACRasterShieldSymbol, self).put_TextPosition(point)
    def get_LabelMode(self):
        '''Method IACRasterShieldSymbol.get_LabelMode

           OUTPUT
            LabelMode           : acLabelMode*'''
        return super(IACRasterShieldSymbol, self).get_LabelMode()
    def put_LabelMode(self, LabelMode):
        '''Method IACRasterShieldSymbol.put_LabelMode

           INPUT
            LabelMode           : acLabelMode'''
        return super(IACRasterShieldSymbol, self).put_LabelMode(LabelMode)
    def get_Boundary(self):
        '''Method IACRasterShieldSymbol.get_Boundary

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACRasterShieldSymbol, self).get_Boundary()
    def put_Boundary(self, flag):
        '''Method IACRasterShieldSymbol.put_Boundary

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACRasterShieldSymbol, self).put_Boundary(flag)
    Boundary = property(get_Boundary, put_Boundary, None)
    Font = property(get_Font, put_Font, None)
    FontColor = property(get_FontColor, put_FontColor, None)
    FontSize = property(get_FontSize, put_FontSize, None)
    FontStyle = property(get_FontStyle, put_FontStyle, None)
    Image = property(get_Image, put_Image, None)
    LabelMode = property(get_LabelMode, put_LabelMode, None)
    PrintMode = property(get_PrintMode, put_PrintMode, None)
    Shadow = property(get_Shadow, put_Shadow, None)
    ShadowColor = property(get_ShadowColor, put_ShadowColor, None)
    TextPosition = property(get_TextPosition, put_TextPosition, None)
    URL = property(get_URL, put_URL, None)

class IACTextSymbol(_esriCarto.IACTextSymbol):
    _IID = uuid.UUID('103d43e4-86ee-40be-a869-7e2059b99f3b')

    def __init__(self, *args, **kw):
        super(IACTextSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Font(self):
        '''Method IACTextSymbol.get_Font

           OUTPUT
            Font                : BSTR*'''
        return super(IACTextSymbol, self).get_Font()
    def put_Font(self, Font):
        '''Method IACTextSymbol.put_Font

           INPUT
            Font                : BSTR'''
        return super(IACTextSymbol, self).put_Font(Font)
    def get_FontStyle(self):
        '''Method IACTextSymbol.get_FontStyle

           OUTPUT
            FontStyle           : acFontStyle*'''
        return super(IACTextSymbol, self).get_FontStyle()
    def put_FontStyle(self, FontStyle):
        '''Method IACTextSymbol.put_FontStyle

           INPUT
            FontStyle           : acFontStyle'''
        return super(IACTextSymbol, self).put_FontStyle(FontStyle)
    def get_FontSize(self):
        '''Method IACTextSymbol.get_FontSize

           OUTPUT
            FontSize            : long*'''
        return super(IACTextSymbol, self).get_FontSize()
    def put_FontSize(self, FontSize):
        '''Method IACTextSymbol.put_FontSize

           INPUT
            FontSize            : long'''
        return super(IACTextSymbol, self).put_FontSize(FontSize)
    def get_FontColor(self):
        '''Method IACTextSymbol.get_FontColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTextSymbol, self).get_FontColor()
    def put_FontColor(self, Color):
        '''Method IACTextSymbol.put_FontColor

           INPUT
            Color               : IColor*'''
        return super(IACTextSymbol, self).put_FontColor(Color)
    def get_Outline(self):
        '''Method IACTextSymbol.get_Outline

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTextSymbol, self).get_Outline()
    def put_Outline(self, flag):
        '''Method IACTextSymbol.put_Outline

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTextSymbol, self).put_Outline(flag)
    def get_OutlineColor(self):
        '''Method IACTextSymbol.get_OutlineColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTextSymbol, self).get_OutlineColor()
    def put_OutlineColor(self, Color):
        '''Method IACTextSymbol.put_OutlineColor

           INPUT
            Color               : IColor*'''
        return super(IACTextSymbol, self).put_OutlineColor(Color)
    def get_Glowing(self):
        '''Method IACTextSymbol.get_Glowing

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTextSymbol, self).get_Glowing()
    def put_Glowing(self, flag):
        '''Method IACTextSymbol.put_Glowing

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTextSymbol, self).put_Glowing(flag)
    def get_GlowingColor(self):
        '''Method IACTextSymbol.get_GlowingColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTextSymbol, self).get_GlowingColor()
    def put_GlowingColor(self, Color):
        '''Method IACTextSymbol.put_GlowingColor

           INPUT
            Color               : IColor*'''
        return super(IACTextSymbol, self).put_GlowingColor(Color)
    def get_Shadow(self):
        '''Method IACTextSymbol.get_Shadow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTextSymbol, self).get_Shadow()
    def put_Shadow(self, flag):
        '''Method IACTextSymbol.put_Shadow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTextSymbol, self).put_Shadow(flag)
    def get_ShadowColor(self):
        '''Method IACTextSymbol.get_ShadowColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTextSymbol, self).get_ShadowColor()
    def put_ShadowColor(self, Color):
        '''Method IACTextSymbol.put_ShadowColor

           INPUT
            Color               : IColor*'''
        return super(IACTextSymbol, self).put_ShadowColor(Color)
    def get_Blockout(self):
        '''Method IACTextSymbol.get_Blockout

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACTextSymbol, self).get_Blockout()
    def put_Blockout(self, flag):
        '''Method IACTextSymbol.put_Blockout

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACTextSymbol, self).put_Blockout(flag)
    def get_BlockoutColor(self):
        '''Method IACTextSymbol.get_BlockoutColor

           OUTPUT
            Color               : IColor**'''
        return super(IACTextSymbol, self).get_BlockoutColor()
    def put_BlockoutColor(self, Color):
        '''Method IACTextSymbol.put_BlockoutColor

           INPUT
            Color               : IColor*'''
        return super(IACTextSymbol, self).put_BlockoutColor(Color)
    def get_Interval(self):
        '''Method IACTextSymbol.get_Interval

           OUTPUT
            Interval            : long*'''
        return super(IACTextSymbol, self).get_Interval()
    def put_Interval(self, Interval):
        '''Method IACTextSymbol.put_Interval

           INPUT
            Interval            : long'''
        return super(IACTextSymbol, self).put_Interval(Interval)
    def get_PrintMode(self):
        '''Method IACTextSymbol.get_PrintMode

           OUTPUT
            PrintMode           : acPrintMode*'''
        return super(IACTextSymbol, self).get_PrintMode()
    def put_PrintMode(self, PrintMode):
        '''Method IACTextSymbol.put_PrintMode

           INPUT
            PrintMode           : acPrintMode'''
        return super(IACTextSymbol, self).put_PrintMode(PrintMode)
    Blockout = property(get_Blockout, put_Blockout, None)
    BlockoutColor = property(get_BlockoutColor, put_BlockoutColor, None)
    Font = property(get_Font, put_Font, None)
    FontColor = property(get_FontColor, put_FontColor, None)
    FontSize = property(get_FontSize, put_FontSize, None)
    FontStyle = property(get_FontStyle, put_FontStyle, None)
    Glowing = property(get_Glowing, put_Glowing, None)
    GlowingColor = property(get_GlowingColor, put_GlowingColor, None)
    Interval = property(get_Interval, put_Interval, None)
    Outline = property(get_Outline, put_Outline, None)
    OutlineColor = property(get_OutlineColor, put_OutlineColor, None)
    PrintMode = property(get_PrintMode, put_PrintMode, None)
    Shadow = property(get_Shadow, put_Shadow, None)
    ShadowColor = property(get_ShadowColor, put_ShadowColor, None)

class IACTextMarkerSymbol(_esriCarto.IACTextMarkerSymbol):
    _IID = uuid.UUID('9b232f9c-8689-4a28-9c61-bb156b9c8e25')

    def __init__(self, *args, **kw):
        super(IACTextMarkerSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HAlignment(self):
        '''Method IACTextMarkerSymbol.get_HAlignment

           OUTPUT
            hTextAlignment      : acHTextAlignment*'''
        return super(IACTextMarkerSymbol, self).get_HAlignment()
    def put_HAlignment(self, hTextAlignment):
        '''Method IACTextMarkerSymbol.put_HAlignment

           INPUT
            hTextAlignment      : acHTextAlignment'''
        return super(IACTextMarkerSymbol, self).put_HAlignment(hTextAlignment)
    def get_VAlignment(self):
        '''Method IACTextMarkerSymbol.get_VAlignment

           OUTPUT
            vTextAlignment      : acVTextAlignment*'''
        return super(IACTextMarkerSymbol, self).get_VAlignment()
    def put_VAlignment(self, vTextAlignment):
        '''Method IACTextMarkerSymbol.put_VAlignment

           INPUT
            vTextAlignment      : acVTextAlignment'''
        return super(IACTextMarkerSymbol, self).put_VAlignment(vTextAlignment)
    def get_Angle(self):
        '''Method IACTextMarkerSymbol.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(IACTextMarkerSymbol, self).get_Angle()
    def put_Angle(self, Angle):
        '''Method IACTextMarkerSymbol.put_Angle

           INPUT
            Angle               : double'''
        return super(IACTextMarkerSymbol, self).put_Angle(Angle)
    Angle = property(get_Angle, put_Angle, None)
    HAlignment = property(get_HAlignment, put_HAlignment, None)
    VAlignment = property(get_VAlignment, put_VAlignment, None)

class IACShieldSymbol(_esriCarto.IACShieldSymbol):
    _IID = uuid.UUID('8ac3acb5-a6ea-4306-bc73-4eb4d211000e')

    def __init__(self, *args, **kw):
        super(IACShieldSymbol, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Font(self):
        '''Method IACShieldSymbol.get_Font

           OUTPUT
            Font                : BSTR*'''
        return super(IACShieldSymbol, self).get_Font()
    def put_Font(self, Font):
        '''Method IACShieldSymbol.put_Font

           INPUT
            Font                : BSTR'''
        return super(IACShieldSymbol, self).put_Font(Font)
    def get_FontStyle(self):
        '''Method IACShieldSymbol.get_FontStyle

           OUTPUT
            FontStyle           : acFontStyle*'''
        return super(IACShieldSymbol, self).get_FontStyle()
    def put_FontStyle(self, FontStyle):
        '''Method IACShieldSymbol.put_FontStyle

           INPUT
            FontStyle           : acFontStyle'''
        return super(IACShieldSymbol, self).put_FontStyle(FontStyle)
    def get_FontSize(self):
        '''Method IACShieldSymbol.get_FontSize

           OUTPUT
            FontSize            : long*'''
        return super(IACShieldSymbol, self).get_FontSize()
    def put_FontSize(self, FontSize):
        '''Method IACShieldSymbol.put_FontSize

           INPUT
            FontSize            : long'''
        return super(IACShieldSymbol, self).put_FontSize(FontSize)
    def get_FontColor(self):
        '''Method IACShieldSymbol.get_FontColor

           OUTPUT
            Color               : IColor**'''
        return super(IACShieldSymbol, self).get_FontColor()
    def put_FontColor(self, Color):
        '''Method IACShieldSymbol.put_FontColor

           INPUT
            Color               : IColor*'''
        return super(IACShieldSymbol, self).put_FontColor(Color)
    def get_Shadow(self):
        '''Method IACShieldSymbol.get_Shadow

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IACShieldSymbol, self).get_Shadow()
    def put_Shadow(self, flag):
        '''Method IACShieldSymbol.put_Shadow

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IACShieldSymbol, self).put_Shadow(flag)
    def get_ShadowColor(self):
        '''Method IACShieldSymbol.get_ShadowColor

           OUTPUT
            Color               : IColor**'''
        return super(IACShieldSymbol, self).get_ShadowColor()
    def put_ShadowColor(self, Color):
        '''Method IACShieldSymbol.put_ShadowColor

           INPUT
            Color               : IColor*'''
        return super(IACShieldSymbol, self).put_ShadowColor(Color)
    def get_LabelMode(self):
        '''Method IACShieldSymbol.get_LabelMode

           OUTPUT
            LabelMode           : acLabelMode*'''
        return super(IACShieldSymbol, self).get_LabelMode()
    def put_LabelMode(self, LabelMode):
        '''Method IACShieldSymbol.put_LabelMode

           INPUT
            LabelMode           : acLabelMode'''
        return super(IACShieldSymbol, self).put_LabelMode(LabelMode)
    def get_MinSize(self):
        '''Method IACShieldSymbol.get_MinSize

           OUTPUT
            Size                : long*'''
        return super(IACShieldSymbol, self).get_MinSize()
    def put_MinSize(self, Size):
        '''Method IACShieldSymbol.put_MinSize

           INPUT
            Size                : long'''
        return super(IACShieldSymbol, self).put_MinSize(Size)
    def get_Type(self):
        '''Method IACShieldSymbol.get_Type

           OUTPUT
            Type                : acShieldSymbolType*'''
        return super(IACShieldSymbol, self).get_Type()
    def put_Type(self, Type):
        '''Method IACShieldSymbol.put_Type

           INPUT
            Type                : acShieldSymbolType'''
        return super(IACShieldSymbol, self).put_Type(Type)
    Font = property(get_Font, put_Font, None)
    FontColor = property(get_FontColor, put_FontColor, None)
    FontSize = property(get_FontSize, put_FontSize, None)
    FontStyle = property(get_FontStyle, put_FontStyle, None)
    LabelMode = property(get_LabelMode, put_LabelMode, None)
    MinSize = property(get_MinSize, put_MinSize, None)
    Shadow = property(get_Shadow, put_Shadow, None)
    ShadowColor = property(get_ShadowColor, put_ShadowColor, None)
    Type = property(get_Type, put_Type, None)

class IIMSSubLayer(_esriCarto.IIMSSubLayer):
    _IID = uuid.UUID('d090aa89-c2f1-11d3-9fef-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IIMSSubLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CanIdentify(self):
        '''Method IIMSSubLayer.get_CanIdentify

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IIMSSubLayer, self).get_CanIdentify()
    def put_CanIdentify(self, flag):
        '''Method IIMSSubLayer.put_CanIdentify

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IIMSSubLayer, self).put_CanIdentify(flag)
    def get_IMSLayer(self):
        '''Method IIMSSubLayer.get_IMSLayer

           OUTPUT
            Layer               : IACLayer**'''
        return super(IIMSSubLayer, self).get_IMSLayer()
    def put_SymbologyUpdated(self, _arg1):
        '''Method IIMSSubLayer.put_SymbologyUpdated

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IIMSSubLayer, self).put_SymbologyUpdated(_arg1)
    CanIdentify = property(get_CanIdentify, put_CanIdentify, None)
    IMSLayer = property(get_IMSLayer, None, None)
    SymbologyUpdated = property(None, put_SymbologyUpdated, None)

class IIMSMapLayer(_esriCarto.IIMSMapLayer):
    _IID = uuid.UUID('dc8505ff-d521-11d3-9ff4-00c04f6bc6a5')

    def __init__(self, *args, **kw):
        super(IIMSMapLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Connection(self):
        '''Method IIMSMapLayer.get_Connection

           OUTPUT
            Service             : IIMSServiceDescription**'''
        return super(IIMSMapLayer, self).get_Connection()
    def ConnectToService(self, Service):
        '''Method IIMSMapLayer.ConnectToService

           INPUT
            Service             : IIMSServiceDescription*'''
        return super(IIMSMapLayer, self).ConnectToService(Service)
    def MoveSubLayerTo(self, subLayer, Index):
        '''Method IIMSMapLayer.MoveSubLayerTo

           INPUTS
            subLayer            : IIMSSubLayer*
            Index               : long'''
        return super(IIMSMapLayer, self).MoveSubLayerTo(subLayer, Index)
    def get_IMSMap(self):
        '''Method IIMSMapLayer.get_IMSMap

           OUTPUT
            Map                 : IACMap**'''
        return super(IIMSMapLayer, self).get_IMSMap()
    def put_AreaOfInterest(self, _arg1):
        '''Method IIMSMapLayer.put_AreaOfInterest

           INPUT
            _arg1               : IEnvelope*'''
        return super(IIMSMapLayer, self).put_AreaOfInterest(_arg1)
    def ClearDrawCache(self):
        '''Method IIMSMapLayer.ClearDrawCache'''
        return super(IIMSMapLayer, self).ClearDrawCache()
    def get_Name(self):
        '''Method ILayer.get_Name (from ILayer)

           OUTPUT
            Name                : BSTR*'''
        return super(IIMSMapLayer, self).get_Name()
    def put_Name(self, Name):
        '''Method ILayer.put_Name (from ILayer)

           INPUT
            Name                : BSTR'''
        return super(IIMSMapLayer, self).put_Name(Name)
    def get_Valid(self):
        '''Method ILayer.get_Valid (from ILayer)

           OUTPUT
            Valid               : VARIANT_BOOL*'''
        return super(IIMSMapLayer, self).get_Valid()
    def get_AreaOfInterest(self):
        '''Method ILayer.get_AreaOfInterest (from ILayer)

           OUTPUT
            aoi                 : IEnvelope**'''
        return super(IIMSMapLayer, self).get_AreaOfInterest()
    def get_MinimumScale(self):
        '''Method ILayer.get_MinimumScale (from ILayer)

           OUTPUT
            MinScale            : double*'''
        return super(IIMSMapLayer, self).get_MinimumScale()
    def put_MinimumScale(self, MinScale):
        '''Method ILayer.put_MinimumScale (from ILayer)

           INPUT
            MinScale            : double'''
        return super(IIMSMapLayer, self).put_MinimumScale(MinScale)
    def get_MaximumScale(self):
        '''Method ILayer.get_MaximumScale (from ILayer)

           OUTPUT
            MaxScale            : double*'''
        return super(IIMSMapLayer, self).get_MaximumScale()
    def put_MaximumScale(self, MaxScale):
        '''Method ILayer.put_MaximumScale (from ILayer)

           INPUT
            MaxScale            : double'''
        return super(IIMSMapLayer, self).put_MaximumScale(MaxScale)
    def get_Visible(self):
        '''Method ILayer.get_Visible (from ILayer)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IIMSMapLayer, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method ILayer.put_Visible (from ILayer)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IIMSMapLayer, self).put_Visible(Visible)
    def get_ShowTips(self):
        '''Method ILayer.get_ShowTips (from ILayer)

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(IIMSMapLayer, self).get_ShowTips()
    def put_ShowTips(self, Show):
        '''Method ILayer.put_ShowTips (from ILayer)

           INPUT
            Show                : VARIANT_BOOL'''
        return super(IIMSMapLayer, self).put_ShowTips(Show)
    def get_TipText(self, x, y, Tolerance):
        '''Method ILayer.get_TipText (from ILayer)

           INPUTS
            x                   : double
            y                   : double
            Tolerance           : double

           OUTPUT
            Text                : BSTR*'''
        return super(IIMSMapLayer, self).get_TipText(x, y, Tolerance)
    def get_Cached(self):
        '''Method ILayer.get_Cached (from ILayer)

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IIMSMapLayer, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method ILayer.put_Cached (from ILayer)

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IIMSMapLayer, self).put_Cached(Cached)
    def get_SupportedDrawPhases(self):
        '''Method ILayer.get_SupportedDrawPhases (from ILayer)

           OUTPUT
            drawPhases          : long*'''
        return super(IIMSMapLayer, self).get_SupportedDrawPhases()
    def putref_SpatialReference(self, _arg1):
        '''Method ILayer.putref_SpatialReference (from ILayer)

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IIMSMapLayer, self).putref_SpatialReference(_arg1)
    def Draw(self, DrawPhase, Display, TrackCancel):
        '''Method ILayer.Draw (from ILayer)

           INPUTS
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(IIMSMapLayer, self).Draw(DrawPhase, Display, TrackCancel)
    AreaOfInterest = property(get_AreaOfInterest, put_AreaOfInterest, None)
    Cached = property(get_Cached, put_Cached, None)
    Connection = property(get_Connection, None, None)
    IMSMap = property(get_IMSMap, None, None)
    MaximumScale = property(get_MaximumScale, put_MaximumScale, None)
    MinimumScale = property(get_MinimumScale, put_MinimumScale, None)
    Name = property(get_Name, put_Name, None)
    ShowTips = property(get_ShowTips, put_ShowTips, None)
    SpatialReference = property(None, putref_SpatialReference, None)
    SupportedDrawPhases = property(get_SupportedDrawPhases, None, None)
    Valid = property(get_Valid, None, None)
    Visible = property(get_Visible, put_Visible, None)

class IIMSSymbolImporter(_esriCarto.IIMSSymbolImporter):
    _IID = uuid.UUID('0a97a893-d811-11d3-9ff4-00c04f6bc6a5')
    def CreateSymbol(self, xml):
        '''Method IIMSSymbolImporter.CreateSymbol

           INPUT
            xml                 : BSTR

           OUTPUT
            Symbol              : ISymbol**'''
        return super(IIMSSymbolImporter, self).CreateSymbol(xml)

class IIMSGlobeSubServiceDescription(_esriCarto.IIMSGlobeSubServiceDescription):
    _IID = uuid.UUID('137e5790-5d7a-4e16-b241-734f40d830af')

    def __init__(self, *args, **kw):
        super(IIMSGlobeSubServiceDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ParentName(self, Parent):
        '''Method IIMSGlobeSubServiceDescription.put_ParentName

           INPUT
            Parent              : BSTR'''
        return super(IIMSGlobeSubServiceDescription, self).put_ParentName(Parent)
    def get_ParentName(self):
        '''Method IIMSGlobeSubServiceDescription.get_ParentName

           OUTPUT
            Parent              : BSTR*'''
        return super(IIMSGlobeSubServiceDescription, self).get_ParentName()
    def put_Type(self, Type):
        '''Method IIMSGlobeSubServiceDescription.put_Type

           INPUT
            Type                : BSTR'''
        return super(IIMSGlobeSubServiceDescription, self).put_Type(Type)
    def get_Type(self):
        '''Method IIMSGlobeSubServiceDescription.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IIMSGlobeSubServiceDescription, self).get_Type()
    ParentName = property(get_ParentName, put_ParentName, None)
    Type = property(get_Type, put_Type, None)

class IIMSGlobeXMLNode(_esriCarto.IIMSGlobeXMLNode):
    _IID = uuid.UUID('cdae0026-e2ae-45f0-9619-10fdcb9f615f')

    def __init__(self, *args, **kw):
        super(IIMSGlobeXMLNode, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NumChildren(self):
        '''Method IIMSGlobeXMLNode.get_NumChildren

           OUTPUT
            num                 : long*'''
        return super(IIMSGlobeXMLNode, self).get_NumChildren()
    def get_XmlTag(self):
        '''Method IIMSGlobeXMLNode.get_XmlTag

           OUTPUT
            Tag                 : BSTR*'''
        return super(IIMSGlobeXMLNode, self).get_XmlTag()
    def get_NumAttrib(self):
        '''Method IIMSGlobeXMLNode.get_NumAttrib

           OUTPUT
            num                 : long*'''
        return super(IIMSGlobeXMLNode, self).get_NumAttrib()
    def get_ChildByIndex(self, i):
        '''Method IIMSGlobeXMLNode.get_ChildByIndex

           INPUT
            i                   : long

           OUTPUT
            node                : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLNode, self).get_ChildByIndex(i)
    def get_ChildByName(self, tagName):
        '''Method IIMSGlobeXMLNode.get_ChildByName

           INPUT
            tagName             : BSTR

           OUTPUT
            node                : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLNode, self).get_ChildByName(tagName)
    def get_AttribName(self, pos):
        '''Method IIMSGlobeXMLNode.get_AttribName

           INPUT
            pos                 : long

           OUTPUT
            Name                : BSTR*'''
        return super(IIMSGlobeXMLNode, self).get_AttribName(pos)
    def get_AttribValueByIndex(self, pos):
        '''Method IIMSGlobeXMLNode.get_AttribValueByIndex

           INPUT
            pos                 : long

           OUTPUT
            Value               : BSTR*'''
        return super(IIMSGlobeXMLNode, self).get_AttribValueByIndex(pos)
    def put_AttribValueByIndex(self, pos, Value):
        '''Method IIMSGlobeXMLNode.put_AttribValueByIndex

           INPUTS
            pos                 : long
            Value               : BSTR'''
        return super(IIMSGlobeXMLNode, self).put_AttribValueByIndex(pos, Value)
    def AddChild(self, node):
        '''Method IIMSGlobeXMLNode.AddChild

           INPUT
            node                : IIMSGlobeXMLNode*'''
        return super(IIMSGlobeXMLNode, self).AddChild(node)
    def AddBlankAttrib(self):
        '''Method IIMSGlobeXMLNode.AddBlankAttrib

           OUTPUT
            num                 : long*'''
        return super(IIMSGlobeXMLNode, self).AddBlankAttrib()
    def DeleteChild(self, num):
        '''Method IIMSGlobeXMLNode.DeleteChild

           INPUT
            num                 : long'''
        return super(IIMSGlobeXMLNode, self).DeleteChild(num)
    def put_AttribName(self, pos, Name):
        '''Method IIMSGlobeXMLNode.put_AttribName

           INPUTS
            pos                 : long
            Name                : BSTR'''
        return super(IIMSGlobeXMLNode, self).put_AttribName(pos, Name)
    def put_AttribValueByName(self, Name, Value):
        '''Method IIMSGlobeXMLNode.put_AttribValueByName

           INPUTS
            Name                : BSTR
            Value               : BSTR'''
        return super(IIMSGlobeXMLNode, self).put_AttribValueByName(Name, Value)
    def put_XmlTag(self, Tag):
        '''Method IIMSGlobeXMLNode.put_XmlTag

           INPUT
            Tag                 : BSTR'''
        return super(IIMSGlobeXMLNode, self).put_XmlTag(Tag)
    def get_ShallowClone(self):
        '''Method IIMSGlobeXMLNode.get_ShallowClone

           OUTPUT
            node                : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLNode, self).get_ShallowClone()
    def get_DeepClone(self):
        '''Method IIMSGlobeXMLNode.get_DeepClone

           OUTPUT
            node                : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLNode, self).get_DeepClone()
    def Parse(self, xmlStrOrig):
        '''Method IIMSGlobeXMLNode.Parse

           INPUT
            xmlStrOrig          : BSTR'''
        return super(IIMSGlobeXMLNode, self).Parse(xmlStrOrig)
    def MakeXmlStr(self):
        '''Method IIMSGlobeXMLNode.MakeXmlStr

           OUTPUT
            xmlStr              : BSTR*'''
        return super(IIMSGlobeXMLNode, self).MakeXmlStr()
    def AddFullAttrib(self, Name, Value):
        '''Method IIMSGlobeXMLNode.AddFullAttrib

           INPUTS
            Name                : BSTR
            Value               : BSTR

           OUTPUT
            pos                 : long*'''
        return super(IIMSGlobeXMLNode, self).AddFullAttrib(Name, Value)
    def get_AttribValueByName(self, Name):
        '''Method IIMSGlobeXMLNode.get_AttribValueByName

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : BSTR*'''
        return super(IIMSGlobeXMLNode, self).get_AttribValueByName(Name)
    def get_ChildByAttribNameValue(self, AttribName, atttribValue):
        '''Method IIMSGlobeXMLNode.get_ChildByAttribNameValue

           INPUTS
            AttribName          : BSTR
            atttribValue        : BSTR

           OUTPUT
            node                : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLNode, self).get_ChildByAttribNameValue(AttribName, atttribValue)
    def get_HighestNode(self, searchString):
        '''Method IIMSGlobeXMLNode.get_HighestNode

           INPUT
            searchString        : BSTR

           OUTPUT
            node                : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLNode, self).get_HighestNode(searchString)
    AttribName = property(None, put_AttribName, None)
    AttribValueByIndex = property(None, put_AttribValueByIndex, None)
    AttribValueByName = property(None, put_AttribValueByName, None)
    DeepClone = property(get_DeepClone, None, None)
    NumAttrib = property(get_NumAttrib, None, None)
    NumChildren = property(get_NumChildren, None, None)
    ShallowClone = property(get_ShallowClone, None, None)
    XmlTag = property(get_XmlTag, put_XmlTag, None)
    AttribName = IndexProperty(get_AttribName, None)
    AttribValueByIndex = IndexProperty(get_AttribValueByIndex, None)
    AttribValueByName = IndexProperty(get_AttribValueByName, None)
    ChildByIndex = IndexProperty(get_ChildByIndex, None)
    ChildByName = IndexProperty(get_ChildByName, None)
    HighestNode = IndexProperty(get_HighestNode, None)

class IIMSGlobeXMLParser(_esriCarto.IIMSGlobeXMLParser):
    _IID = uuid.UUID('5b035109-b690-49bc-97c8-0f5f36e7a7ba')

    def __init__(self, *args, **kw):
        super(IIMSGlobeXMLParser, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Parse(self, xmlStr):
        '''Method IIMSGlobeXMLParser.Parse

           INPUT
            xmlStr              : BSTR'''
        return super(IIMSGlobeXMLParser, self).Parse(xmlStr)
    def get_Root(self):
        '''Method IIMSGlobeXMLParser.get_Root

           OUTPUT
            Root                : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLParser, self).get_Root()
    def get_HighestNode(self, Tag):
        '''Method IIMSGlobeXMLParser.get_HighestNode

           INPUT
            Tag                 : BSTR

           OUTPUT
            result              : IIMSGlobeXMLNode**'''
        return super(IIMSGlobeXMLParser, self).get_HighestNode(Tag)
    def MakeXmlStr(self):
        '''Method IIMSGlobeXMLParser.MakeXmlStr

           OUTPUT
            xmlStr              : BSTR*'''
        return super(IIMSGlobeXMLParser, self).MakeXmlStr()
    def putref_Root(self, Root):
        '''Method IIMSGlobeXMLParser.putref_Root

           INPUT
            Root                : IIMSGlobeXMLNode*'''
        return super(IIMSGlobeXMLParser, self).putref_Root(Root)
    def put_XmlHeader(self, _arg1):
        '''Method IIMSGlobeXMLParser.put_XmlHeader

           INPUT
            _arg1               : BSTR'''
        return super(IIMSGlobeXMLParser, self).put_XmlHeader(_arg1)
    def get_ResponseBody(self):
        '''Method IIMSGlobeXMLParser.get_ResponseBody

           OUTPUT
            ResponseBody        : BSTR*'''
        return super(IIMSGlobeXMLParser, self).get_ResponseBody()
    ResponseBody = property(get_ResponseBody, None, None)
    Root = property(get_Root, putref_Root, None)
    XmlHeader = property(None, put_XmlHeader, None)
    HighestNode = IndexProperty(get_HighestNode, None)

class IIMSGlobeConnection(_esriCarto.IIMSGlobeConnection):
    _IID = uuid.UUID('9a9b9d78-ddde-4543-b103-5646a6cf3976')

    def __init__(self, *args, **kw):
        super(IIMSGlobeConnection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def MakeRequest(self, strDataString):
        '''Method IIMSGlobeConnection.MakeRequest

           INPUT
            strDataString       : BSTR

           OUTPUT
            response            : BSTR*'''
        return super(IIMSGlobeConnection, self).MakeRequest(strDataString)
    def MakeRequestBinary(self, strDataString, bAllocateData):
        '''Method IIMSGlobeConnection.MakeRequestBinary

           INPUTS
            strDataString       : BSTR
            bAllocateData       : VARIANT_BOOL

           OUTPUTS
            Data                : void**
            Size                : long*'''
        return super(IIMSGlobeConnection, self).MakeRequestBinary(strDataString, bAllocateData)
    def put_URL(self, pURL):
        '''Method IIMSGlobeConnection.put_URL

           INPUT
            pURL                : BSTR'''
        return super(IIMSGlobeConnection, self).put_URL(pURL)
    def get_URL(self):
        '''Method IIMSGlobeConnection.get_URL

           OUTPUT
            pURL                : BSTR*'''
        return super(IIMSGlobeConnection, self).get_URL()
    def put_ServiceName(self, pName):
        '''Method IIMSGlobeConnection.put_ServiceName

           INPUT
            pName               : BSTR'''
        return super(IIMSGlobeConnection, self).put_ServiceName(pName)
    def get_ServiceName(self):
        '''Method IIMSGlobeConnection.get_ServiceName

           OUTPUT
            pName               : BSTR*'''
        return super(IIMSGlobeConnection, self).get_ServiceName()
    ServiceName = property(get_ServiceName, put_ServiceName, None)
    URL = property(get_URL, put_URL, None)

class IRealTimeFeed(_esriCarto.IRealTimeFeed):
    _IID = uuid.UUID('57736c36-7c6e-4c58-b8cb-b1efb385b47c')

    def __init__(self, *args, **kw):
        super(IRealTimeFeed, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Start(self):
        '''Method IRealTimeFeed.Start'''
        return super(IRealTimeFeed, self).Start()
    def Stop(self):
        '''Method IRealTimeFeed.Stop'''
        return super(IRealTimeFeed, self).Stop()
    def get_SpatialReference(self):
        '''Method IRealTimeFeed.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IRealTimeFeed, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method IRealTimeFeed.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IRealTimeFeed, self).putref_SpatialReference(ppSpatialReference)
    def get_Status(self):
        '''Method IRealTimeFeed.get_Status

           OUTPUT
            pStatus             : esriGpsConnectionStatus*'''
        return super(IRealTimeFeed, self).get_Status()
    def get_CurrentPosition(self):
        '''Method IRealTimeFeed.get_CurrentPosition

           OUTPUT
            pInfo               : esriGpsPositionInfo*'''
        return super(IRealTimeFeed, self).get_CurrentPosition()
    def get_CurrentSatelliteCount(self):
        '''Method IRealTimeFeed.get_CurrentSatelliteCount

           OUTPUT
            pCount              : long*'''
        return super(IRealTimeFeed, self).get_CurrentSatelliteCount()
    def get_CurrentSatelliteData(self, Index):
        '''Method IRealTimeFeed.get_CurrentSatelliteData

           INPUT
            Index               : long

           OUTPUT
            pData               : esriGpsSatelliteData*'''
        return super(IRealTimeFeed, self).get_CurrentSatelliteData(Index)
    def get_CurrentMagneticVariance(self):
        '''Method IRealTimeFeed.get_CurrentMagneticVariance

           OUTPUT
            pMagneticVar        : esriGpsMagneticVariance*'''
        return super(IRealTimeFeed, self).get_CurrentMagneticVariance()
    def get_CurrentGroundCourse(self):
        '''Method IRealTimeFeed.get_CurrentGroundCourse

           OUTPUT
            pGroundCourse       : esriGpsGroundCourse*'''
        return super(IRealTimeFeed, self).get_CurrentGroundCourse()
    def get_CurrentDopInfo(self):
        '''Method IRealTimeFeed.get_CurrentDopInfo

           OUTPUT
            pdop                : esriGpsDOPInfo*'''
        return super(IRealTimeFeed, self).get_CurrentDopInfo()
    def get_CurrentDateTime(self):
        '''Method IRealTimeFeed.get_CurrentDateTime

           OUTPUT
            pDateTime           : esriGpsDateTime*'''
        return super(IRealTimeFeed, self).get_CurrentDateTime()
    def get_CurrentDgpsInfo(self):
        '''Method IRealTimeFeed.get_CurrentDgpsInfo

           OUTPUT
            pDGPSInfo           : esriGpsDgpsInfo*'''
        return super(IRealTimeFeed, self).get_CurrentDgpsInfo()
    def get_ConnectionError(self):
        '''Method IRealTimeFeed.get_ConnectionError

           OUTPUT
            pError              : esriGpsConnectionError*'''
        return super(IRealTimeFeed, self).get_ConnectionError()
    ConnectionError = property(get_ConnectionError, None, None)
    CurrentDateTime = property(get_CurrentDateTime, None, None)
    CurrentDgpsInfo = property(get_CurrentDgpsInfo, None, None)
    CurrentDopInfo = property(get_CurrentDopInfo, None, None)
    CurrentGroundCourse = property(get_CurrentGroundCourse, None, None)
    CurrentMagneticVariance = property(get_CurrentMagneticVariance, None, None)
    CurrentPosition = property(get_CurrentPosition, None, None)
    CurrentSatelliteCount = property(get_CurrentSatelliteCount, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Status = property(get_Status, None, None)
    CurrentSatelliteData = IndexProperty(get_CurrentSatelliteData, None)

class IPositionTrails(_esriCarto.IPositionTrails):
    _IID = uuid.UUID('89c655c1-59e2-417e-954a-667b7a14c68e')

    def __init__(self, *args, **kw):
        super(IPositionTrails, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowMarkerTrails(self):
        '''Method IPositionTrails.get_ShowMarkerTrails

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IPositionTrails, self).get_ShowMarkerTrails()
    def put_ShowMarkerTrails(self, pShow):
        '''Method IPositionTrails.put_ShowMarkerTrails

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IPositionTrails, self).put_ShowMarkerTrails(pShow)
    def get_MarkerTrailColorRamp(self):
        '''Method IPositionTrails.get_MarkerTrailColorRamp

           OUTPUT
            ppRamp              : IColorRamp**'''
        return super(IPositionTrails, self).get_MarkerTrailColorRamp()
    def putref_MarkerTrailColorRamp(self, ppRamp):
        '''Method IPositionTrails.putref_MarkerTrailColorRamp

           INPUT
            ppRamp              : IColorRamp*'''
        return super(IPositionTrails, self).putref_MarkerTrailColorRamp(ppRamp)
    def get_MarkerTrailCount(self):
        '''Method IPositionTrails.get_MarkerTrailCount

           OUTPUT
            pCount              : long*'''
        return super(IPositionTrails, self).get_MarkerTrailCount()
    def put_MarkerTrailCount(self, pCount):
        '''Method IPositionTrails.put_MarkerTrailCount

           INPUT
            pCount              : long'''
        return super(IPositionTrails, self).put_MarkerTrailCount(pCount)
    def get_MarkerTrailDistance(self):
        '''Method IPositionTrails.get_MarkerTrailDistance

           OUTPUT
            pDistance           : double*'''
        return super(IPositionTrails, self).get_MarkerTrailDistance()
    def put_MarkerTrailDistance(self, pDistance):
        '''Method IPositionTrails.put_MarkerTrailDistance

           INPUT
            pDistance           : double'''
        return super(IPositionTrails, self).put_MarkerTrailDistance(pDistance)
    def get_MarkerTrailSymbol(self):
        '''Method IPositionTrails.get_MarkerTrailSymbol

           OUTPUT
            ppSymbol            : IMarkerSymbol**'''
        return super(IPositionTrails, self).get_MarkerTrailSymbol()
    def putref_MarkerTrailSymbol(self, ppSymbol):
        '''Method IPositionTrails.putref_MarkerTrailSymbol

           INPUT
            ppSymbol            : IMarkerSymbol*'''
        return super(IPositionTrails, self).putref_MarkerTrailSymbol(ppSymbol)
    def get_ShowLinearTrail(self):
        '''Method IPositionTrails.get_ShowLinearTrail

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IPositionTrails, self).get_ShowLinearTrail()
    def put_ShowLinearTrail(self, pShow):
        '''Method IPositionTrails.put_ShowLinearTrail

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IPositionTrails, self).put_ShowLinearTrail(pShow)
    def get_LinearTrailSymbol(self):
        '''Method IPositionTrails.get_LinearTrailSymbol

           OUTPUT
            ppSymbol            : ILineSymbol**'''
        return super(IPositionTrails, self).get_LinearTrailSymbol()
    def putref_LinearTrailSymbol(self, ppSymbol):
        '''Method IPositionTrails.putref_LinearTrailSymbol

           INPUT
            ppSymbol            : ILineSymbol*'''
        return super(IPositionTrails, self).putref_LinearTrailSymbol(ppSymbol)
    def get_LinearTrailDistance(self):
        '''Method IPositionTrails.get_LinearTrailDistance

           OUTPUT
            pDistance           : double*'''
        return super(IPositionTrails, self).get_LinearTrailDistance()
    def put_LinearTrailDistance(self, pDistance):
        '''Method IPositionTrails.put_LinearTrailDistance

           INPUT
            pDistance           : double'''
        return super(IPositionTrails, self).put_LinearTrailDistance(pDistance)
    LinearTrailDistance = property(get_LinearTrailDistance, put_LinearTrailDistance, None)
    LinearTrailSymbol = property(get_LinearTrailSymbol, putref_LinearTrailSymbol, None)
    MarkerTrailColorRamp = property(get_MarkerTrailColorRamp, putref_MarkerTrailColorRamp, None)
    MarkerTrailCount = property(get_MarkerTrailCount, put_MarkerTrailCount, None)
    MarkerTrailDistance = property(get_MarkerTrailDistance, put_MarkerTrailDistance, None)
    MarkerTrailSymbol = property(get_MarkerTrailSymbol, putref_MarkerTrailSymbol, None)
    ShowLinearTrail = property(get_ShowLinearTrail, put_ShowLinearTrail, None)
    ShowMarkerTrails = property(get_ShowMarkerTrails, put_ShowMarkerTrails, None)

class IRealTimeLog(_esriCarto.IRealTimeLog):
    _IID = uuid.UUID('32c1c986-1df2-482f-9a7f-39d2e134e528')

    def __init__(self, *args, **kw):
        super(IRealTimeLog, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LogFile(self):
        '''Method IRealTimeLog.get_LogFile

           OUTPUT
            ppFeatureClass      : IFeatureClass**'''
        return super(IRealTimeLog, self).get_LogFile()
    def putref_LogFile(self, ppFeatureClass):
        '''Method IRealTimeLog.putref_LogFile

           INPUT
            ppFeatureClass      : IFeatureClass*'''
        return super(IRealTimeLog, self).putref_LogFile(ppFeatureClass)
    def get_LogRate(self):
        '''Method IRealTimeLog.get_LogRate

           OUTPUT
            pRate               : double*'''
        return super(IRealTimeLog, self).get_LogRate()
    def put_LogRate(self, pRate):
        '''Method IRealTimeLog.put_LogRate

           INPUT
            pRate               : double'''
        return super(IRealTimeLog, self).put_LogRate(pRate)
    def get_MinimumLogDistance(self):
        '''Method IRealTimeLog.get_MinimumLogDistance

           OUTPUT
            pDistance           : double*'''
        return super(IRealTimeLog, self).get_MinimumLogDistance()
    def put_MinimumLogDistance(self, pDistance):
        '''Method IRealTimeLog.put_MinimumLogDistance

           INPUT
            pDistance           : double'''
        return super(IRealTimeLog, self).put_MinimumLogDistance(pDistance)
    def get_MinimumLogDeflectionAngle(self):
        '''Method IRealTimeLog.get_MinimumLogDeflectionAngle

           OUTPUT
            pAngle              : double*'''
        return super(IRealTimeLog, self).get_MinimumLogDeflectionAngle()
    def put_MinimumLogDeflectionAngle(self, pAngle):
        '''Method IRealTimeLog.put_MinimumLogDeflectionAngle

           INPUT
            pAngle              : double'''
        return super(IRealTimeLog, self).put_MinimumLogDeflectionAngle(pAngle)
    def get_UseLogRate(self):
        '''Method IRealTimeLog.get_UseLogRate

           OUTPUT
            pUse                : VARIANT_BOOL*'''
        return super(IRealTimeLog, self).get_UseLogRate()
    def put_UseLogRate(self, pUse):
        '''Method IRealTimeLog.put_UseLogRate

           INPUT
            pUse                : VARIANT_BOOL'''
        return super(IRealTimeLog, self).put_UseLogRate(pUse)
    def get_UseMinimumLogDistance(self):
        '''Method IRealTimeLog.get_UseMinimumLogDistance

           OUTPUT
            pUse                : VARIANT_BOOL*'''
        return super(IRealTimeLog, self).get_UseMinimumLogDistance()
    def put_UseMinimumLogDistance(self, pUse):
        '''Method IRealTimeLog.put_UseMinimumLogDistance

           INPUT
            pUse                : VARIANT_BOOL'''
        return super(IRealTimeLog, self).put_UseMinimumLogDistance(pUse)
    def get_UseMinimumLogDeflectionAngle(self):
        '''Method IRealTimeLog.get_UseMinimumLogDeflectionAngle

           OUTPUT
            pUse                : VARIANT_BOOL*'''
        return super(IRealTimeLog, self).get_UseMinimumLogDeflectionAngle()
    def put_UseMinimumLogDeflectionAngle(self, pUse):
        '''Method IRealTimeLog.put_UseMinimumLogDeflectionAngle

           INPUT
            pUse                : VARIANT_BOOL'''
        return super(IRealTimeLog, self).put_UseMinimumLogDeflectionAngle(pUse)
    def StartLogging(self):
        '''Method IRealTimeLog.StartLogging'''
        return super(IRealTimeLog, self).StartLogging()
    def StopLogging(self):
        '''Method IRealTimeLog.StopLogging'''
        return super(IRealTimeLog, self).StopLogging()
    def get_IsLogging(self):
        '''Method IRealTimeLog.get_IsLogging

           OUTPUT
            pLogging            : VARIANT_BOOL*'''
        return super(IRealTimeLog, self).get_IsLogging()
    def StampGpsPosition(self):
        '''Method IRealTimeLog.StampGpsPosition'''
        return super(IRealTimeLog, self).StampGpsPosition()
    def put_LogEstimatedPosition(self, pLogEstimated):
        '''Method IRealTimeLog.put_LogEstimatedPosition

           INPUT
            pLogEstimated       : VARIANT_BOOL'''
        return super(IRealTimeLog, self).put_LogEstimatedPosition(pLogEstimated)
    def get_LogEstimatedPosition(self):
        '''Method IRealTimeLog.get_LogEstimatedPosition

           OUTPUT
            pLogEstimated       : VARIANT_BOOL*'''
        return super(IRealTimeLog, self).get_LogEstimatedPosition()
    IsLogging = property(get_IsLogging, None, None)
    LogEstimatedPosition = property(get_LogEstimatedPosition, put_LogEstimatedPosition, None)
    LogFile = property(get_LogFile, putref_LogFile, None)
    LogRate = property(get_LogRate, put_LogRate, None)
    MinimumLogDeflectionAngle = property(get_MinimumLogDeflectionAngle, put_MinimumLogDeflectionAngle, None)
    MinimumLogDistance = property(get_MinimumLogDistance, put_MinimumLogDistance, None)
    UseLogRate = property(get_UseLogRate, put_UseLogRate, None)
    UseMinimumLogDeflectionAngle = property(get_UseMinimumLogDeflectionAngle, put_UseMinimumLogDeflectionAngle, None)
    UseMinimumLogDistance = property(get_UseMinimumLogDistance, put_UseMinimumLogDistance, None)

class IRealTimeDestination(_esriCarto.IRealTimeDestination):
    _IID = uuid.UUID('0f9c0eec-6e0b-44b2-9ea5-3625af49b242')

    def __init__(self, *args, **kw):
        super(IRealTimeDestination, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DestinationLocation(self):
        '''Method IRealTimeDestination.get_DestinationLocation

           OUTPUT
            ppPoint             : IPoint**'''
        return super(IRealTimeDestination, self).get_DestinationLocation()
    def put_DestinationLocation(self, ppPoint):
        '''Method IRealTimeDestination.put_DestinationLocation

           INPUT
            ppPoint             : IPoint*'''
        return super(IRealTimeDestination, self).put_DestinationLocation(ppPoint)
    def get_DestinationSymbol(self):
        '''Method IRealTimeDestination.get_DestinationSymbol

           OUTPUT
            ppSymbol            : IMarkerSymbol**'''
        return super(IRealTimeDestination, self).get_DestinationSymbol()
    def putref_DestinationSymbol(self, ppSymbol):
        '''Method IRealTimeDestination.putref_DestinationSymbol

           INPUT
            ppSymbol            : IMarkerSymbol*'''
        return super(IRealTimeDestination, self).putref_DestinationSymbol(ppSymbol)
    def get_DestinationLabel(self):
        '''Method IRealTimeDestination.get_DestinationLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IRealTimeDestination, self).get_DestinationLabel()
    def put_DestinationLabel(self, Label):
        '''Method IRealTimeDestination.put_DestinationLabel

           INPUT
            Label               : BSTR'''
        return super(IRealTimeDestination, self).put_DestinationLabel(Label)
    def get_DestinationTextSymbol(self):
        '''Method IRealTimeDestination.get_DestinationTextSymbol

           OUTPUT
            ppSymbol            : ITextSymbol**'''
        return super(IRealTimeDestination, self).get_DestinationTextSymbol()
    def putref_DestinationTextSymbol(self, ppSymbol):
        '''Method IRealTimeDestination.putref_DestinationTextSymbol

           INPUT
            ppSymbol            : ITextSymbol*'''
        return super(IRealTimeDestination, self).putref_DestinationTextSymbol(ppSymbol)
    def get_ShowBearingToDestination(self):
        '''Method IRealTimeDestination.get_ShowBearingToDestination

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IRealTimeDestination, self).get_ShowBearingToDestination()
    def put_ShowBearingToDestination(self, pShow):
        '''Method IRealTimeDestination.put_ShowBearingToDestination

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IRealTimeDestination, self).put_ShowBearingToDestination(pShow)
    def get_BearingToDestinationSymbol(self):
        '''Method IRealTimeDestination.get_BearingToDestinationSymbol

           OUTPUT
            ppSymbol            : IMarkerSymbol**'''
        return super(IRealTimeDestination, self).get_BearingToDestinationSymbol()
    def putref_BearingToDestinationSymbol(self, ppSymbol):
        '''Method IRealTimeDestination.putref_BearingToDestinationSymbol

           INPUT
            ppSymbol            : IMarkerSymbol*'''
        return super(IRealTimeDestination, self).putref_BearingToDestinationSymbol(ppSymbol)
    BearingToDestinationSymbol = property(get_BearingToDestinationSymbol, putref_BearingToDestinationSymbol, None)
    DestinationLabel = property(get_DestinationLabel, put_DestinationLabel, None)
    DestinationLocation = property(get_DestinationLocation, put_DestinationLocation, None)
    DestinationSymbol = property(get_DestinationSymbol, putref_DestinationSymbol, None)
    DestinationTextSymbol = property(get_DestinationTextSymbol, putref_DestinationTextSymbol, None)
    ShowBearingToDestination = property(get_ShowBearingToDestination, put_ShowBearingToDestination, None)

class IRealTimeFeedSnap(_esriCarto.IRealTimeFeedSnap):
    _IID = uuid.UUID('c5b924eb-54da-4591-b90d-ff3659a4b1b5')

    def __init__(self, *args, **kw):
        super(IRealTimeFeedSnap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SnapLayers(self):
        '''Method IRealTimeFeedSnap.get_SnapLayers

           OUTPUT
            ppArray             : IArray**'''
        return super(IRealTimeFeedSnap, self).get_SnapLayers()
    def putref_SnapLayers(self, ppArray):
        '''Method IRealTimeFeedSnap.putref_SnapLayers

           INPUT
            ppArray             : IArray*'''
        return super(IRealTimeFeedSnap, self).putref_SnapLayers(ppArray)
    def get_SnapDistance(self):
        '''Method IRealTimeFeedSnap.get_SnapDistance

           OUTPUT
            pDistance           : double*'''
        return super(IRealTimeFeedSnap, self).get_SnapDistance()
    def put_SnapDistance(self, pDistance):
        '''Method IRealTimeFeedSnap.put_SnapDistance

           INPUT
            pDistance           : double'''
        return super(IRealTimeFeedSnap, self).put_SnapDistance(pDistance)
    def get_SnapToVertices(self):
        '''Method IRealTimeFeedSnap.get_SnapToVertices

           OUTPUT
            pSnap               : VARIANT_BOOL*'''
        return super(IRealTimeFeedSnap, self).get_SnapToVertices()
    def put_SnapToVertices(self, pSnap):
        '''Method IRealTimeFeedSnap.put_SnapToVertices

           INPUT
            pSnap               : VARIANT_BOOL'''
        return super(IRealTimeFeedSnap, self).put_SnapToVertices(pSnap)
    def get_SnapToLines(self):
        '''Method IRealTimeFeedSnap.get_SnapToLines

           OUTPUT
            pSnap               : VARIANT_BOOL*'''
        return super(IRealTimeFeedSnap, self).get_SnapToLines()
    def put_SnapToLines(self, pSnap):
        '''Method IRealTimeFeedSnap.put_SnapToLines

           INPUT
            pSnap               : VARIANT_BOOL'''
        return super(IRealTimeFeedSnap, self).put_SnapToLines(pSnap)
    def get_SnapToNodes(self):
        '''Method IRealTimeFeedSnap.get_SnapToNodes

           OUTPUT
            pSnap               : VARIANT_BOOL*'''
        return super(IRealTimeFeedSnap, self).get_SnapToNodes()
    def put_SnapToNodes(self, pSnap):
        '''Method IRealTimeFeedSnap.put_SnapToNodes

           INPUT
            pSnap               : VARIANT_BOOL'''
        return super(IRealTimeFeedSnap, self).put_SnapToNodes(pSnap)
    SnapDistance = property(get_SnapDistance, put_SnapDistance, None)
    SnapLayers = property(get_SnapLayers, putref_SnapLayers, None)
    SnapToLines = property(get_SnapToLines, put_SnapToLines, None)
    SnapToNodes = property(get_SnapToNodes, put_SnapToNodes, None)
    SnapToVertices = property(get_SnapToVertices, put_SnapToVertices, None)

class IGpsDisplayProperties(_esriCarto.IGpsDisplayProperties):
    _IID = uuid.UUID('34c8784f-8293-4f07-bda9-ca04f6b56e64')

    def __init__(self, *args, **kw):
        super(IGpsDisplayProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MinimumDisplayRate(self):
        '''Method IGpsDisplayProperties.get_MinimumDisplayRate

           OUTPUT
            pRate               : double*'''
        return super(IGpsDisplayProperties, self).get_MinimumDisplayRate()
    def put_MinimumDisplayRate(self, pRate):
        '''Method IGpsDisplayProperties.put_MinimumDisplayRate

           INPUT
            pRate               : double'''
        return super(IGpsDisplayProperties, self).put_MinimumDisplayRate(pRate)
    def get_UseMinimumDisplayRate(self):
        '''Method IGpsDisplayProperties.get_UseMinimumDisplayRate

           OUTPUT
            pUse                : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_UseMinimumDisplayRate()
    def put_UseMinimumDisplayRate(self, pUse):
        '''Method IGpsDisplayProperties.put_UseMinimumDisplayRate

           INPUT
            pUse                : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_UseMinimumDisplayRate(pUse)
    def get_ShowCurrentPosition(self):
        '''Method IGpsDisplayProperties.get_ShowCurrentPosition

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowCurrentPosition()
    def put_ShowCurrentPosition(self, pShow):
        '''Method IGpsDisplayProperties.put_ShowCurrentPosition

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowCurrentPosition(pShow)
    def get_BaseMarkerSymbol(self):
        '''Method IGpsDisplayProperties.get_BaseMarkerSymbol

           OUTPUT
            ppMarker            : IMarkerSymbol**'''
        return super(IGpsDisplayProperties, self).get_BaseMarkerSymbol()
    def putref_BaseMarkerSymbol(self, ppMarker):
        '''Method IGpsDisplayProperties.putref_BaseMarkerSymbol

           INPUT
            ppMarker            : IMarkerSymbol*'''
        return super(IGpsDisplayProperties, self).putref_BaseMarkerSymbol(ppMarker)
    def get_ShowEstimatedPosition(self):
        '''Method IGpsDisplayProperties.get_ShowEstimatedPosition

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowEstimatedPosition()
    def put_ShowEstimatedPosition(self, pShow):
        '''Method IGpsDisplayProperties.put_ShowEstimatedPosition

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowEstimatedPosition(pShow)
    def get_EstimatedPositionSymbol(self):
        '''Method IGpsDisplayProperties.get_EstimatedPositionSymbol

           OUTPUT
            ppMarker            : IMarkerSymbol**'''
        return super(IGpsDisplayProperties, self).get_EstimatedPositionSymbol()
    def putref_EstimatedPositionSymbol(self, ppMarker):
        '''Method IGpsDisplayProperties.putref_EstimatedPositionSymbol

           INPUT
            ppMarker            : IMarkerSymbol*'''
        return super(IGpsDisplayProperties, self).putref_EstimatedPositionSymbol(ppMarker)
    def put_ShowCurrentAltitude(self, pShowVariation):
        '''Method IGpsDisplayProperties.put_ShowCurrentAltitude

           INPUT
            pShowVariation      : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowCurrentAltitude(pShowVariation)
    def get_ShowCurrentAltitude(self):
        '''Method IGpsDisplayProperties.get_ShowCurrentAltitude

           OUTPUT
            pShowVariation      : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowCurrentAltitude()
    def get_ShowCurrentBearing(self):
        '''Method IGpsDisplayProperties.get_ShowCurrentBearing

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowCurrentBearing()
    def put_ShowCurrentBearing(self, pShow):
        '''Method IGpsDisplayProperties.put_ShowCurrentBearing

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowCurrentBearing(pShow)
    def get_ShowCurrentSpeed(self):
        '''Method IGpsDisplayProperties.get_ShowCurrentSpeed

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowCurrentSpeed()
    def put_ShowCurrentSpeed(self, pShow):
        '''Method IGpsDisplayProperties.put_ShowCurrentSpeed

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowCurrentSpeed(pShow)
    def put_ShowMarkerTrailAltitude(self, pShowVariation):
        '''Method IGpsDisplayProperties.put_ShowMarkerTrailAltitude

           INPUT
            pShowVariation      : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowMarkerTrailAltitude(pShowVariation)
    def get_ShowMarkerTrailAltitude(self):
        '''Method IGpsDisplayProperties.get_ShowMarkerTrailAltitude

           OUTPUT
            pShowVariation      : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowMarkerTrailAltitude()
    def get_ShowMarkerTrailBearing(self):
        '''Method IGpsDisplayProperties.get_ShowMarkerTrailBearing

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowMarkerTrailBearing()
    def put_ShowMarkerTrailBearing(self, pShow):
        '''Method IGpsDisplayProperties.put_ShowMarkerTrailBearing

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowMarkerTrailBearing(pShow)
    def get_ShowMarkerTrailSpeed(self):
        '''Method IGpsDisplayProperties.get_ShowMarkerTrailSpeed

           OUTPUT
            pShow               : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_ShowMarkerTrailSpeed()
    def put_ShowMarkerTrailSpeed(self, pShow):
        '''Method IGpsDisplayProperties.put_ShowMarkerTrailSpeed

           INPUT
            pShow               : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_ShowMarkerTrailSpeed(pShow)
    def get_SpeedUnits(self):
        '''Method IGpsDisplayProperties.get_SpeedUnits

           OUTPUT
            pUnits              : esriGpsSpeedUnits*'''
        return super(IGpsDisplayProperties, self).get_SpeedUnits()
    def put_SpeedUnits(self, pUnits):
        '''Method IGpsDisplayProperties.put_SpeedUnits

           INPUT
            pUnits              : esriGpsSpeedUnits'''
        return super(IGpsDisplayProperties, self).put_SpeedUnits(pUnits)
    def get_LowSpeedValue(self):
        '''Method IGpsDisplayProperties.get_LowSpeedValue

           OUTPUT
            pSpeed              : double*'''
        return super(IGpsDisplayProperties, self).get_LowSpeedValue()
    def put_LowSpeedValue(self, pSpeed):
        '''Method IGpsDisplayProperties.put_LowSpeedValue

           INPUT
            pSpeed              : double'''
        return super(IGpsDisplayProperties, self).put_LowSpeedValue(pSpeed)
    def putref_SpeedColorRamp(self, ppColorRamp):
        '''Method IGpsDisplayProperties.putref_SpeedColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IGpsDisplayProperties, self).putref_SpeedColorRamp(ppColorRamp)
    def get_SpeedColorRamp(self):
        '''Method IGpsDisplayProperties.get_SpeedColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IGpsDisplayProperties, self).get_SpeedColorRamp()
    def get_LowAltitudeValue(self):
        '''Method IGpsDisplayProperties.get_LowAltitudeValue

           OUTPUT
            pAltitude           : double*'''
        return super(IGpsDisplayProperties, self).get_LowAltitudeValue()
    def put_LowAltitudeValue(self, pAltitude):
        '''Method IGpsDisplayProperties.put_LowAltitudeValue

           INPUT
            pAltitude           : double'''
        return super(IGpsDisplayProperties, self).put_LowAltitudeValue(pAltitude)
    def get_HighAltitudeValue(self):
        '''Method IGpsDisplayProperties.get_HighAltitudeValue

           OUTPUT
            pAltitude           : double*'''
        return super(IGpsDisplayProperties, self).get_HighAltitudeValue()
    def put_HighAltitudeValue(self, pAltitude):
        '''Method IGpsDisplayProperties.put_HighAltitudeValue

           INPUT
            pAltitude           : double'''
        return super(IGpsDisplayProperties, self).put_HighAltitudeValue(pAltitude)
    def get_LowAltitudeSize(self):
        '''Method IGpsDisplayProperties.get_LowAltitudeSize

           OUTPUT
            pSize               : double*'''
        return super(IGpsDisplayProperties, self).get_LowAltitudeSize()
    def put_LowAltitudeSize(self, pSize):
        '''Method IGpsDisplayProperties.put_LowAltitudeSize

           INPUT
            pSize               : double'''
        return super(IGpsDisplayProperties, self).put_LowAltitudeSize(pSize)
    def get_HighSpeedValue(self):
        '''Method IGpsDisplayProperties.get_HighSpeedValue

           OUTPUT
            pSize               : double*'''
        return super(IGpsDisplayProperties, self).get_HighSpeedValue()
    def put_HighSpeedValue(self, pSize):
        '''Method IGpsDisplayProperties.put_HighSpeedValue

           INPUT
            pSize               : double'''
        return super(IGpsDisplayProperties, self).put_HighSpeedValue(pSize)
    def get_HighAltitudeSize(self):
        '''Method IGpsDisplayProperties.get_HighAltitudeSize

           OUTPUT
            pSize               : double*'''
        return super(IGpsDisplayProperties, self).get_HighAltitudeSize()
    def put_HighAltitudeSize(self, pSize):
        '''Method IGpsDisplayProperties.put_HighAltitudeSize

           INPUT
            pSize               : double'''
        return super(IGpsDisplayProperties, self).put_HighAltitudeSize(pSize)
    def put_AutoPan(self, AutoPan):
        '''Method IGpsDisplayProperties.put_AutoPan

           INPUT
            AutoPan             : VARIANT_BOOL'''
        return super(IGpsDisplayProperties, self).put_AutoPan(AutoPan)
    def get_AutoPan(self):
        '''Method IGpsDisplayProperties.get_AutoPan

           OUTPUT
            AutoPan             : VARIANT_BOOL*'''
        return super(IGpsDisplayProperties, self).get_AutoPan()
    def put_AltitudeUnits(self, pAltitudeUnits):
        '''Method IGpsDisplayProperties.put_AltitudeUnits

           INPUT
            pAltitudeUnits      : esriUnits'''
        return super(IGpsDisplayProperties, self).put_AltitudeUnits(pAltitudeUnits)
    def get_AltitudeUnits(self):
        '''Method IGpsDisplayProperties.get_AltitudeUnits

           OUTPUT
            pAltitudeUnits      : esriUnits*'''
        return super(IGpsDisplayProperties, self).get_AltitudeUnits()
    def put_LatLongDisplayFormat(self, latLongFormat):
        '''Method IGpsDisplayProperties.put_LatLongDisplayFormat

           INPUT
            latLongFormat       : esriGpsLatLongFormat'''
        return super(IGpsDisplayProperties, self).put_LatLongDisplayFormat(latLongFormat)
    def get_LatLongDisplayFormat(self):
        '''Method IGpsDisplayProperties.get_LatLongDisplayFormat

           OUTPUT
            latLongFormat       : esriGpsLatLongFormat*'''
        return super(IGpsDisplayProperties, self).get_LatLongDisplayFormat()
    def get_PositionsExtent(self):
        '''Method IGpsDisplayProperties.get_PositionsExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGpsDisplayProperties, self).get_PositionsExtent()
    def RefreshGpsDisplay(self):
        '''Method IGpsDisplayProperties.RefreshGpsDisplay'''
        return super(IGpsDisplayProperties, self).RefreshGpsDisplay()
    def ClearGpsDisplay(self):
        '''Method IGpsDisplayProperties.ClearGpsDisplay'''
        return super(IGpsDisplayProperties, self).ClearGpsDisplay()
    AltitudeUnits = property(get_AltitudeUnits, put_AltitudeUnits, None)
    AutoPan = property(get_AutoPan, put_AutoPan, None)
    BaseMarkerSymbol = property(get_BaseMarkerSymbol, putref_BaseMarkerSymbol, None)
    EstimatedPositionSymbol = property(get_EstimatedPositionSymbol, putref_EstimatedPositionSymbol, None)
    HighAltitudeSize = property(get_HighAltitudeSize, put_HighAltitudeSize, None)
    HighAltitudeValue = property(get_HighAltitudeValue, put_HighAltitudeValue, None)
    HighSpeedValue = property(get_HighSpeedValue, put_HighSpeedValue, None)
    LatLongDisplayFormat = property(get_LatLongDisplayFormat, put_LatLongDisplayFormat, None)
    LowAltitudeSize = property(get_LowAltitudeSize, put_LowAltitudeSize, None)
    LowAltitudeValue = property(get_LowAltitudeValue, put_LowAltitudeValue, None)
    LowSpeedValue = property(get_LowSpeedValue, put_LowSpeedValue, None)
    MinimumDisplayRate = property(get_MinimumDisplayRate, put_MinimumDisplayRate, None)
    PositionsExtent = property(get_PositionsExtent, None, None)
    ShowCurrentAltitude = property(get_ShowCurrentAltitude, put_ShowCurrentAltitude, None)
    ShowCurrentBearing = property(get_ShowCurrentBearing, put_ShowCurrentBearing, None)
    ShowCurrentPosition = property(get_ShowCurrentPosition, put_ShowCurrentPosition, None)
    ShowCurrentSpeed = property(get_ShowCurrentSpeed, put_ShowCurrentSpeed, None)
    ShowEstimatedPosition = property(get_ShowEstimatedPosition, put_ShowEstimatedPosition, None)
    ShowMarkerTrailAltitude = property(get_ShowMarkerTrailAltitude, put_ShowMarkerTrailAltitude, None)
    ShowMarkerTrailBearing = property(get_ShowMarkerTrailBearing, put_ShowMarkerTrailBearing, None)
    ShowMarkerTrailSpeed = property(get_ShowMarkerTrailSpeed, put_ShowMarkerTrailSpeed, None)
    SpeedColorRamp = property(get_SpeedColorRamp, putref_SpeedColorRamp, None)
    SpeedUnits = property(get_SpeedUnits, put_SpeedUnits, None)
    UseMinimumDisplayRate = property(get_UseMinimumDisplayRate, put_UseMinimumDisplayRate, None)

class IGpsConnection(_esriCarto.IGpsConnection):
    _IID = uuid.UUID('f5570bc4-13ab-49ed-86a4-13488447a3fe')

    def __init__(self, *args, **kw):
        super(IGpsConnection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CommPort(self):
        '''Method IGpsConnection.get_CommPort

           OUTPUT
            pNumber             : short*'''
        return super(IGpsConnection, self).get_CommPort()
    def put_CommPort(self, pNumber):
        '''Method IGpsConnection.put_CommPort

           INPUT
            pNumber             : short'''
        return super(IGpsConnection, self).put_CommPort(pNumber)
    def get_BaudRate(self):
        '''Method IGpsConnection.get_BaudRate

           OUTPUT
            pRate               : short*'''
        return super(IGpsConnection, self).get_BaudRate()
    def put_BaudRate(self, pRate):
        '''Method IGpsConnection.put_BaudRate

           INPUT
            pRate               : short'''
        return super(IGpsConnection, self).put_BaudRate(pRate)
    def get_DataBits(self):
        '''Method IGpsConnection.get_DataBits

           OUTPUT
            pDataBits           : short*'''
        return super(IGpsConnection, self).get_DataBits()
    def put_DataBits(self, pDataBits):
        '''Method IGpsConnection.put_DataBits

           INPUT
            pDataBits           : short'''
        return super(IGpsConnection, self).put_DataBits(pDataBits)
    def get_StopBits(self):
        '''Method IGpsConnection.get_StopBits

           OUTPUT
            pStopBits           : esriGpsStopBits*'''
        return super(IGpsConnection, self).get_StopBits()
    def put_StopBits(self, pStopBits):
        '''Method IGpsConnection.put_StopBits

           INPUT
            pStopBits           : esriGpsStopBits'''
        return super(IGpsConnection, self).put_StopBits(pStopBits)
    def get_Parity(self):
        '''Method IGpsConnection.get_Parity

           OUTPUT
            pParity             : esriGpsParity*'''
        return super(IGpsConnection, self).get_Parity()
    def put_Parity(self, pParity):
        '''Method IGpsConnection.put_Parity

           INPUT
            pParity             : esriGpsParity'''
        return super(IGpsConnection, self).put_Parity(pParity)
    BaudRate = property(get_BaudRate, put_BaudRate, None)
    CommPort = property(get_CommPort, put_CommPort, None)
    DataBits = property(get_DataBits, put_DataBits, None)
    Parity = property(get_Parity, put_Parity, None)
    StopBits = property(get_StopBits, put_StopBits, None)

class IGpsFeed(_esriCarto.IGpsFeed):
    _IID = uuid.UUID('ce81418e-072a-42b5-81d6-47409d79082c')

    def __init__(self, *args, **kw):
        super(IGpsFeed, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Connection(self):
        '''Method IGpsFeed.get_Connection

           OUTPUT
            ppConnection        : IGpsConnection**'''
        return super(IGpsFeed, self).get_Connection()
    def putref_Connection(self, ppConnection):
        '''Method IGpsFeed.putref_Connection

           INPUT
            ppConnection        : IGpsConnection*'''
        return super(IGpsFeed, self).putref_Connection(ppConnection)
    def get_TestStatus(self):
        '''Method IGpsFeed.get_TestStatus

           OUTPUT
            pStatus             : esriGpsConnectionStatus*'''
        return super(IGpsFeed, self).get_TestStatus()
    Connection = property(get_Connection, putref_Connection, None)
    TestStatus = property(get_TestStatus, None, None)

class IRealTimeFeedEvents(_esriCarto.IRealTimeFeedEvents):
    _IID = uuid.UUID('9e109b23-9311-4b76-ab9a-7ed5ce07c08e')
    def PositionUpdated(self, position, estimate):
        '''Method IRealTimeFeedEvents.PositionUpdated

           INPUTS
            position            : esriGpsPositionInfo*
            estimate            : VARIANT_BOOL'''
        return super(IRealTimeFeedEvents, self).PositionUpdated(position, estimate)
    def MagneticVarianceUpdated(self, pMagneticVar):
        '''Method IRealTimeFeedEvents.MagneticVarianceUpdated

           INPUT
            pMagneticVar        : esriGpsMagneticVariance*'''
        return super(IRealTimeFeedEvents, self).MagneticVarianceUpdated(pMagneticVar)
    def GroundCourseUpdated(self, pGroundCourse):
        '''Method IRealTimeFeedEvents.GroundCourseUpdated

           INPUT
            pGroundCourse       : esriGpsGroundCourse*'''
        return super(IRealTimeFeedEvents, self).GroundCourseUpdated(pGroundCourse)
    def DopInfoUpdated(self, pdop):
        '''Method IRealTimeFeedEvents.DopInfoUpdated

           INPUT
            pdop                : esriGpsDOPInfo*'''
        return super(IRealTimeFeedEvents, self).DopInfoUpdated(pdop)
    def SatelliteInfoUpdated(self, satelliteCount):
        '''Method IRealTimeFeedEvents.SatelliteInfoUpdated

           INPUT
            satelliteCount      : long'''
        return super(IRealTimeFeedEvents, self).SatelliteInfoUpdated(satelliteCount)
    def DateTimeUpdated(self, pNewDateTime):
        '''Method IRealTimeFeedEvents.DateTimeUpdated

           INPUT
            pNewDateTime        : esriGpsDateTime*'''
        return super(IRealTimeFeedEvents, self).DateTimeUpdated(pNewDateTime)
    def DgpsInfoUpdated(self, pNewDGPSInfo):
        '''Method IRealTimeFeedEvents.DgpsInfoUpdated

           INPUT
            pNewDGPSInfo        : esriGpsDgpsInfo*'''
        return super(IRealTimeFeedEvents, self).DgpsInfoUpdated(pNewDGPSInfo)
    def ConnectionStatusUpdated(self, pConnectionStatus):
        '''Method IRealTimeFeedEvents.ConnectionStatusUpdated

           INPUT
            pConnectionStatus   : esriGpsConnectionStatus*'''
        return super(IRealTimeFeedEvents, self).ConnectionStatusUpdated(pConnectionStatus)

class IRealTimeFeedSimulator(_esriCarto.IRealTimeFeedSimulator):
    _IID = uuid.UUID('a062c77e-53e6-4a6a-8e22-14c7a73540fe')

    def __init__(self, *args, **kw):
        super(IRealTimeFeedSimulator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureLayer(self):
        '''Method IRealTimeFeedSimulator.get_FeatureLayer

           OUTPUT
            ppSimulationData    : IFeatureLayer**'''
        return super(IRealTimeFeedSimulator, self).get_FeatureLayer()
    def putref_FeatureLayer(self, ppSimulationData):
        '''Method IRealTimeFeedSimulator.putref_FeatureLayer

           INPUT
            ppSimulationData    : IFeatureLayer*'''
        return super(IRealTimeFeedSimulator, self).putref_FeatureLayer(ppSimulationData)
    def get_FixedTime(self):
        '''Method IRealTimeFeedSimulator.get_FixedTime

           OUTPUT
            pFixed              : VARIANT_BOOL*'''
        return super(IRealTimeFeedSimulator, self).get_FixedTime()
    def put_FixedTime(self, pFixed):
        '''Method IRealTimeFeedSimulator.put_FixedTime

           INPUT
            pFixed              : VARIANT_BOOL'''
        return super(IRealTimeFeedSimulator, self).put_FixedTime(pFixed)
    def get_TimeIncrement(self):
        '''Method IRealTimeFeedSimulator.get_TimeIncrement

           OUTPUT
            pIncrement          : double*'''
        return super(IRealTimeFeedSimulator, self).get_TimeIncrement()
    def put_TimeIncrement(self, pIncrement):
        '''Method IRealTimeFeedSimulator.put_TimeIncrement

           INPUT
            pIncrement          : double'''
        return super(IRealTimeFeedSimulator, self).put_TimeIncrement(pIncrement)
    def get_TimeField(self):
        '''Method IRealTimeFeedSimulator.get_TimeField

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IRealTimeFeedSimulator, self).get_TimeField()
    def put_TimeField(self, pFieldName):
        '''Method IRealTimeFeedSimulator.put_TimeField

           INPUT
            pFieldName          : BSTR'''
        return super(IRealTimeFeedSimulator, self).put_TimeField(pFieldName)
    def get_TimeFactor(self):
        '''Method IRealTimeFeedSimulator.get_TimeFactor

           OUTPUT
            pFactor             : double*'''
        return super(IRealTimeFeedSimulator, self).get_TimeFactor()
    def put_TimeFactor(self, pFactor):
        '''Method IRealTimeFeedSimulator.put_TimeFactor

           INPUT
            pFactor             : double'''
        return super(IRealTimeFeedSimulator, self).put_TimeFactor(pFactor)
    FeatureLayer = property(get_FeatureLayer, putref_FeatureLayer, None)
    FixedTime = property(get_FixedTime, put_FixedTime, None)
    TimeFactor = property(get_TimeFactor, put_TimeFactor, None)
    TimeField = property(get_TimeField, put_TimeField, None)
    TimeIncrement = property(get_TimeIncrement, put_TimeIncrement, None)

class IRealTimeFeedManagerEvents(_esriCarto.IRealTimeFeedManagerEvents):
    _IID = uuid.UUID('0549f827-b3f4-4fc8-83ce-fbf6e5464f49')
    def RealTimeFeedChanged(self):
        '''Method IRealTimeFeedManagerEvents.RealTimeFeedChanged'''
        return super(IRealTimeFeedManagerEvents, self).RealTimeFeedChanged()
    def PositionUpdated(self, position, estimate):
        '''Method IRealTimeFeedManagerEvents.PositionUpdated

           INPUTS
            position            : esriGpsPositionInfo*
            estimate            : VARIANT_BOOL'''
        return super(IRealTimeFeedManagerEvents, self).PositionUpdated(position, estimate)
    def MagneticVarianceUpdated(self, pMagneticVar):
        '''Method IRealTimeFeedManagerEvents.MagneticVarianceUpdated

           INPUT
            pMagneticVar        : esriGpsMagneticVariance*'''
        return super(IRealTimeFeedManagerEvents, self).MagneticVarianceUpdated(pMagneticVar)
    def GroundCourseUpdated(self, pGroundCourse):
        '''Method IRealTimeFeedManagerEvents.GroundCourseUpdated

           INPUT
            pGroundCourse       : esriGpsGroundCourse*'''
        return super(IRealTimeFeedManagerEvents, self).GroundCourseUpdated(pGroundCourse)
    def DopInfoUpdated(self, pdop):
        '''Method IRealTimeFeedManagerEvents.DopInfoUpdated

           INPUT
            pdop                : esriGpsDOPInfo*'''
        return super(IRealTimeFeedManagerEvents, self).DopInfoUpdated(pdop)
    def SatelliteInfoUpdated(self, satelliteCount):
        '''Method IRealTimeFeedManagerEvents.SatelliteInfoUpdated

           INPUT
            satelliteCount      : long'''
        return super(IRealTimeFeedManagerEvents, self).SatelliteInfoUpdated(satelliteCount)
    def DateTimeUpdated(self, pNewDateTime):
        '''Method IRealTimeFeedManagerEvents.DateTimeUpdated

           INPUT
            pNewDateTime        : esriGpsDateTime*'''
        return super(IRealTimeFeedManagerEvents, self).DateTimeUpdated(pNewDateTime)
    def DgpsInfoUpdated(self, pNewDGPSInfo):
        '''Method IRealTimeFeedManagerEvents.DgpsInfoUpdated

           INPUT
            pNewDGPSInfo        : esriGpsDgpsInfo*'''
        return super(IRealTimeFeedManagerEvents, self).DgpsInfoUpdated(pNewDGPSInfo)
    def ConnectionStatusUpdated(self, pConnectionStatus):
        '''Method IRealTimeFeedManagerEvents.ConnectionStatusUpdated

           INPUT
            pConnectionStatus   : esriGpsConnectionStatus*'''
        return super(IRealTimeFeedManagerEvents, self).ConnectionStatusUpdated(pConnectionStatus)

class IMobileLayerInfo(_esriCarto.IMobileLayerInfo):
    _IID = uuid.UUID('65f701b2-9bc9-4e79-9dc1-e62b9c3f7927')
    def get_ID(self):
        '''Method IMobileLayerInfo.get_ID

           OUTPUT
            LayerID             : long*'''
        return super(IMobileLayerInfo, self).get_ID()
    def get_Name(self):
        '''Method IMobileLayerInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMobileLayerInfo, self).get_Name()
    def get_DataType(self):
        '''Method IMobileLayerInfo.get_DataType

           OUTPUT
            DataType            : BSTR*'''
        return super(IMobileLayerInfo, self).get_DataType()
    def get_DisplayField(self):
        '''Method IMobileLayerInfo.get_DisplayField

           OUTPUT
            FieldName           : BSTR*'''
        return super(IMobileLayerInfo, self).get_DisplayField()
    def get_GeometryType(self):
        '''Method IMobileLayerInfo.get_GeometryType

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(IMobileLayerInfo, self).get_GeometryType()
    def get_Description(self):
        '''Method IMobileLayerInfo.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMobileLayerInfo, self).get_Description()
    def get_Type(self):
        '''Method IMobileLayerInfo.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IMobileLayerInfo, self).get_Type()
    def get_FeatureDatasetName(self):
        '''Method IMobileLayerInfo.get_FeatureDatasetName

           OUTPUT
            FeatureDatasetName  : BSTR*'''
        return super(IMobileLayerInfo, self).get_FeatureDatasetName()
    def get_FeatureClassName(self):
        '''Method IMobileLayerInfo.get_FeatureClassName

           OUTPUT
            FeatureClassName    : BSTR*'''
        return super(IMobileLayerInfo, self).get_FeatureClassName()
    def get_MinScale(self):
        '''Method IMobileLayerInfo.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IMobileLayerInfo, self).get_MinScale()
    def get_MaxScale(self):
        '''Method IMobileLayerInfo.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IMobileLayerInfo, self).get_MaxScale()
    def get_IsFeatureLayer(self):
        '''Method IMobileLayerInfo.get_IsFeatureLayer

           OUTPUT
            IsFeatureLayer      : VARIANT_BOOL*'''
        return super(IMobileLayerInfo, self).get_IsFeatureLayer()
    def get_IsAnnotationLayer(self):
        '''Method IMobileLayerInfo.get_IsAnnotationLayer

           OUTPUT
            IsAnnotationLayer   : VARIANT_BOOL*'''
        return super(IMobileLayerInfo, self).get_IsAnnotationLayer()
    def get_IsRasterLayer(self):
        '''Method IMobileLayerInfo.get_IsRasterLayer

           OUTPUT
            IsRasterLayer       : VARIANT_BOOL*'''
        return super(IMobileLayerInfo, self).get_IsRasterLayer()
    def get_IsComposite(self):
        '''Method IMobileLayerInfo.get_IsComposite

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IMobileLayerInfo, self).get_IsComposite()
    def get_Extent(self):
        '''Method IMobileLayerInfo.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMobileLayerInfo, self).get_Extent()
    def get_Fields(self):
        '''Method IMobileLayerInfo.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IMobileLayerInfo, self).get_Fields()
    def get_FieldAliases(self):
        '''Method IMobileLayerInfo.get_FieldAliases

           OUTPUT
            FieldAliases        : IStringArray**'''
        return super(IMobileLayerInfo, self).get_FieldAliases()
    DataType = property(get_DataType, None, None)
    Description = property(get_Description, None, None)
    DisplayField = property(get_DisplayField, None, None)
    Extent = property(get_Extent, None, None)
    FeatureClassName = property(get_FeatureClassName, None, None)
    FeatureDatasetName = property(get_FeatureDatasetName, None, None)
    FieldAliases = property(get_FieldAliases, None, None)
    Fields = property(get_Fields, None, None)
    GeometryType = property(get_GeometryType, None, None)
    ID = property(get_ID, None, None)
    IsAnnotationLayer = property(get_IsAnnotationLayer, None, None)
    IsComposite = property(get_IsComposite, None, None)
    IsFeatureLayer = property(get_IsFeatureLayer, None, None)
    IsRasterLayer = property(get_IsRasterLayer, None, None)
    MaxScale = property(get_MaxScale, None, None)
    MinScale = property(get_MinScale, None, None)
    Name = property(get_Name, None, None)
    Type = property(get_Type, None, None)

class IMobileLayerInfos(_esriCarto.IMobileLayerInfos):
    _IID = uuid.UUID('6ee714e5-2b39-44bf-87d9-e3f851b7c022')
    def get_Count(self):
        '''Method IMobileLayerInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMobileLayerInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IMobileLayerInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            MobileLayerInfo     : IMobileLayerInfo**'''
        return super(IMobileLayerInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMobileLayerInfos.Remove

           INPUT
            Index               : long'''
        return super(IMobileLayerInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMobileLayerInfos.RemoveAll'''
        return super(IMobileLayerInfos, self).RemoveAll()
    def Add(self, MobileLayerInfo):
        '''Method IMobileLayerInfos.Add

           INPUT
            MobileLayerInfo     : IMobileLayerInfo*'''
        return super(IMobileLayerInfos, self).Add(MobileLayerInfo)
    def Insert(self, Index, MobileLayerInfo):
        '''Method IMobileLayerInfos.Insert

           INPUTS
            Index               : long
            MobileLayerInfo     : IMobileLayerInfo*'''
        return super(IMobileLayerInfos, self).Insert(Index, MobileLayerInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMobileMapInfo(_esriCarto.IMobileMapInfo):
    _IID = uuid.UUID('63dddbac-8588-45e2-820a-3bf2c5a99d27')
    def get_Name(self):
        '''Method IMobileMapInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMobileMapInfo, self).get_Name()
    def get_Description(self):
        '''Method IMobileMapInfo.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IMobileMapInfo, self).get_Description()
    def get_FullExtent(self):
        '''Method IMobileMapInfo.get_FullExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMobileMapInfo, self).get_FullExtent()
    def get_Extent(self):
        '''Method IMobileMapInfo.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMobileMapInfo, self).get_Extent()
    def get_SpatialReference(self):
        '''Method IMobileMapInfo.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IMobileMapInfo, self).get_SpatialReference()
    def get_Units(self):
        '''Method IMobileMapInfo.get_Units

           OUTPUT
            Units               : esriUnits*'''
        return super(IMobileMapInfo, self).get_Units()
    def get_MobileLayerInfos(self):
        '''Method IMobileMapInfo.get_MobileLayerInfos

           OUTPUT
            MobileLayerInfos    : IMobileLayerInfos**'''
        return super(IMobileMapInfo, self).get_MobileLayerInfos()
    Description = property(get_Description, None, None)
    Extent = property(get_Extent, None, None)
    FullExtent = property(get_FullExtent, None, None)
    MobileLayerInfos = property(get_MobileLayerInfos, None, None)
    Name = property(get_Name, None, None)
    SpatialReference = property(get_SpatialReference, None, None)
    Units = property(get_Units, None, None)

class IWMSServer(_esriCarto.IWMSServer):
    _IID = uuid.UUID('155c04db-d9b2-4f31-9254-6d43caa54bba')
    def GetToPost(self, sGet):
        '''Method IWMSServer.GetToPost

           INPUT
            sGet                : BSTR

           OUTPUT
            pPost               : BSTR*'''
        return super(IWMSServer, self).GetToPost(sGet)
    def get_Data(self, Capabilities, request):
        '''Method IWMSServer.get_Data

           INPUTS
            Capabilities        : BSTR
            request             : BSTR

           OUTPUTS
            pMimeType           : BSTR*
            ppResponse          : SAFEARRAY**'''
        return super(IWMSServer, self).get_Data(Capabilities, request)
    def SetParameters(self, Name, Value):
        '''Method IWMSServer.SetParameters

           INPUTS
            Name                : BSTR
            Value               : BSTR'''
        return super(IWMSServer, self).SetParameters(Name, Value)

class IWCSServer(_esriCarto.IWCSServer):
    _IID = uuid.UUID('ff427e9d-bac4-4572-a3e3-bf0b36ac9c17')
    def get_Data(self, sRequest):
        '''Method IWCSServer.get_Data

           INPUT
            sRequest            : BSTR

           OUTPUTS
            pMimeType           : BSTR*
            ppResponse          : SAFEARRAY**'''
        return super(IWCSServer, self).get_Data(sRequest)
    def SetParameters(self, Name, Value):
        '''Method IWCSServer.SetParameters

           INPUTS
            Name                : BSTR
            Value               : BSTR'''
        return super(IWCSServer, self).SetParameters(Name, Value)

class IWMSLayer(_esriCarto.IWMSLayer):
    _IID = uuid.UUID('005f592a-327b-44a4-aeeb-409d2f866f47')
    def get_WMSLayerDescription(self):
        '''Method IWMSLayer.get_WMSLayerDescription

           OUTPUT
            pLayerDescription   : IWMSLayerDescription**'''
        return super(IWMSLayer, self).get_WMSLayerDescription()
    def get_WMSServiceDescription(self):
        '''Method IWMSLayer.get_WMSServiceDescription

           OUTPUT
            ServiceDescription  : IWMSServiceDescription**'''
        return super(IWMSLayer, self).get_WMSServiceDescription()
    WMSLayerDescription = property(get_WMSLayerDescription, None, None)
    WMSServiceDescription = property(get_WMSServiceDescription, None, None)

class IWMSGroupLayer(_esriCarto.IWMSGroupLayer):
    _IID = uuid.UUID('d43d9a73-ff6c-4a19-b36a-d7ecbe61962a')

    def __init__(self, *args, **kw):
        super(IWMSGroupLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_WMSServiceDescription(self):
        '''Method IWMSGroupLayer.get_WMSServiceDescription

           OUTPUT
            ServiceDescription  : IWMSServiceDescription**'''
        return super(IWMSGroupLayer, self).get_WMSServiceDescription()
    def CreateWMSLayer(self, pWMSLayerDescription):
        '''Method IWMSGroupLayer.CreateWMSLayer

           INPUT
            pWMSLayerDescription: IWMSLayerDescription*

           OUTPUT
            NewWMSLayer         : IWMSLayer**'''
        return super(IWMSGroupLayer, self).CreateWMSLayer(pWMSLayerDescription)
    def CreateWMSGroupLayer(self, groupName):
        '''Method IWMSGroupLayer.CreateWMSGroupLayer

           INPUT
            groupName           : BSTR

           OUTPUT
            ppNewWMSGroupLayer  : IWMSGroupLayer**'''
        return super(IWMSGroupLayer, self).CreateWMSGroupLayer(groupName)
    def CreateWMSGroupLayers(self, WMSGroupLayerDescription):
        '''Method IWMSGroupLayer.CreateWMSGroupLayers

           INPUT
            WMSGroupLayerDescription: IWMSLayerDescription*

           OUTPUT
            NewWMSGroupLayer    : IWMSGroupLayer**'''
        return super(IWMSGroupLayer, self).CreateWMSGroupLayers(WMSGroupLayerDescription)
    def InsertLayers(self, WMSLayers, insertPosition):
        '''Method IWMSGroupLayer.InsertLayers

           INPUTS
            WMSLayers           : IEnumLayer*
            insertPosition      : long'''
        return super(IWMSGroupLayer, self).InsertLayers(WMSLayers, insertPosition)
    def InsertLayer(self, WMSLayer, insertPosition):
        '''Method IWMSGroupLayer.InsertLayer

           INPUTS
            WMSLayer            : ILayer*
            insertPosition      : long'''
        return super(IWMSGroupLayer, self).InsertLayer(WMSLayer, insertPosition)
    def MoveLayer(self, WMSLayer, toPosition):
        '''Method IWMSGroupLayer.MoveLayer

           INPUTS
            WMSLayer            : ILayer*
            toPosition          : long'''
        return super(IWMSGroupLayer, self).MoveLayer(WMSLayer, toPosition)
    def Add(self, WMSLayer):
        '''Method IWMSGroupLayer.Add

           INPUT
            WMSLayer            : ILayer*'''
        return super(IWMSGroupLayer, self).Add(WMSLayer)
    def Delete(self, pWMSLayer):
        '''Method IWMSGroupLayer.Delete

           INPUT
            pWMSLayer           : ILayer*'''
        return super(IWMSGroupLayer, self).Delete(pWMSLayer)
    def Clear(self):
        '''Method IWMSGroupLayer.Clear'''
        return super(IWMSGroupLayer, self).Clear()
    def get_Expanded(self):
        '''Method IWMSGroupLayer.get_Expanded

           OUTPUT
            pValid              : VARIANT_BOOL*'''
        return super(IWMSGroupLayer, self).get_Expanded()
    def put_Expanded(self, pValid):
        '''Method IWMSGroupLayer.put_Expanded

           INPUT
            pValid              : VARIANT_BOOL'''
        return super(IWMSGroupLayer, self).put_Expanded(pValid)
    def get_Count(self):
        '''Method IWMSGroupLayer.get_Count

           OUTPUT
            pLayerCount         : long*'''
        return super(IWMSGroupLayer, self).get_Count()
    def get_Layer(self, Index):
        '''Method IWMSGroupLayer.get_Layer

           INPUT
            Index               : long

           OUTPUT
            WMSLayer            : ILayer**'''
        return super(IWMSGroupLayer, self).get_Layer(Index)
    Count = property(get_Count, None, None)
    Expanded = property(get_Expanded, put_Expanded, None)
    WMSServiceDescription = property(get_WMSServiceDescription, None, None)
    Layer = IndexProperty(get_Layer, None)

class IWMSMapLayer(_esriCarto.IWMSMapLayer):
    _IID = uuid.UUID('8c19b114-1168-41a3-9e14-fc30ca5a4e9d')

    def __init__(self, *args, **kw):
        super(IWMSMapLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ClearDrawCache(self):
        '''Method IWMSMapLayer.ClearDrawCache'''
        return super(IWMSMapLayer, self).ClearDrawCache()
    def get_BackgroundColor(self):
        '''Method IWMSMapLayer.get_BackgroundColor

           OUTPUT
            ppColor             : IColor**'''
        return super(IWMSMapLayer, self).get_BackgroundColor()
    def put_BackgroundColor(self, ppColor):
        '''Method IWMSMapLayer.put_BackgroundColor

           INPUT
            ppColor             : IColor*'''
        return super(IWMSMapLayer, self).put_BackgroundColor(ppColor)
    def get_TransparentBackground(self):
        '''Method IWMSMapLayer.get_TransparentBackground

           OUTPUT
            transparent         : VARIANT_BOOL*'''
        return super(IWMSMapLayer, self).get_TransparentBackground()
    def put_TransparentBackground(self, transparent):
        '''Method IWMSMapLayer.put_TransparentBackground

           INPUT
            transparent         : VARIANT_BOOL'''
        return super(IWMSMapLayer, self).put_TransparentBackground(transparent)
    def get_ServerSupportsTransparency(self):
        '''Method IWMSMapLayer.get_ServerSupportsTransparency

           OUTPUT
            transparent         : VARIANT_BOOL*'''
        return super(IWMSMapLayer, self).get_ServerSupportsTransparency()
    def putref_WMSServiceDescription(self, _arg1):
        '''Method IWMSMapLayer.putref_WMSServiceDescription

           INPUT
            _arg1               : IWMSServiceDescription*'''
        return super(IWMSMapLayer, self).putref_WMSServiceDescription(_arg1)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    ServerSupportsTransparency = property(get_ServerSupportsTransparency, None, None)
    TransparentBackground = property(get_TransparentBackground, put_TransparentBackground, None)
    WMSServiceDescription = property(None, putref_WMSServiceDescription, None)

class IWMSIdentifyObject(_esriCarto.IWMSIdentifyObject):
    _IID = uuid.UUID('84d3cd18-706b-49b1-8aec-28e460b1d707')

    def __init__(self, *args, **kw):
        super(IWMSIdentifyObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IWMSIdentifyObject.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IWMSIdentifyObject, self).get_Name()
    def put_Name(self, Name):
        '''Method IWMSIdentifyObject.put_Name

           INPUT
            Name                : BSTR'''
        return super(IWMSIdentifyObject, self).put_Name(Name)
    def get_PropertySet(self):
        '''Method IWMSIdentifyObject.get_PropertySet

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IWMSIdentifyObject, self).get_PropertySet()
    def putref_PropertySet(self, PropertySet):
        '''Method IWMSIdentifyObject.putref_PropertySet

           INPUT
            PropertySet         : IPropertySet*'''
        return super(IWMSIdentifyObject, self).putref_PropertySet(PropertySet)
    def CanIdentify(self, pLayer):
        '''Method IWMSIdentifyObject.CanIdentify

           INPUT
            pLayer              : ILayer*

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IWMSIdentifyObject, self).CanIdentify(pLayer)
    def get_hWnd(self):
        '''Method IWMSIdentifyObject.get_hWnd

           OUTPUT
            hWnd                : OLE_HANDLE*'''
        return super(IWMSIdentifyObject, self).get_hWnd()
    def get_Layer(self):
        '''Method IWMSIdentifyObject.get_Layer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IWMSIdentifyObject, self).get_Layer()
    def Flash(self, pDisplay):
        '''Method IWMSIdentifyObject.Flash

           INPUT
            pDisplay            : IScreenDisplay*'''
        return super(IWMSIdentifyObject, self).Flash(pDisplay)
    def PopUpMenu(self, x, y):
        '''Method IWMSIdentifyObject.PopUpMenu

           INPUTS
            x                   : long
            y                   : long'''
        return super(IWMSIdentifyObject, self).PopUpMenu(x, y)
    Layer = property(get_Layer, None, None)
    Name = property(get_Name, put_Name, None)
    PropertySet = property(get_PropertySet, putref_PropertySet, None)
    hWnd = property(get_hWnd, None, None)

class IWMSLayer2(_esriCarto.IWMSLayer2):
    _IID = uuid.UUID('27abb9ec-7a26-4cf8-8bd4-70ec1d274e17')

    def __init__(self, *args, **kw):
        super(IWMSLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_WMSLayerDescription(self):
        '''Method IWMSLayer2.get_WMSLayerDescription

           OUTPUT
            pLayerDescription   : IWMSLayerDescription**'''
        return super(IWMSLayer2, self).get_WMSLayerDescription()
    def get_WMSServiceDescription(self):
        '''Method IWMSLayer2.get_WMSServiceDescription

           OUTPUT
            ServiceDescription  : IWMSServiceDescription**'''
        return super(IWMSLayer2, self).get_WMSServiceDescription()
    def putref_Style(self, Style):
        '''Method IWMSLayer2.putref_Style

           INPUT
            Style               : IWMSLayerStyleDescription*'''
        return super(IWMSLayer2, self).putref_Style(Style)
    def get_Style(self):
        '''Method IWMSLayer2.get_Style

           OUTPUT
            Style               : IWMSLayerStyleDescription**'''
        return super(IWMSLayer2, self).get_Style()
    Style = property(get_Style, putref_Style, None)
    WMSLayerDescription = property(get_WMSLayerDescription, None, None)
    WMSServiceDescription = property(get_WMSServiceDescription, None, None)

class IEnumLocatedNetworkElement(_esriCarto.IEnumLocatedNetworkElement):
    _IID = uuid.UUID('60156525-fdee-485d-b3ef-3250742e3189')
    def Reset(self):
        '''Method IEnumLocatedNetworkElement.Reset'''
        return super(IEnumLocatedNetworkElement, self).Reset()
    def Next(self):
        '''Method IEnumLocatedNetworkElement.Next

           OUTPUTS
            elementGeometry     : IGeometry**
            ElementType         : esriNetworkElementType*
            ElementID           : long*'''
        return super(IEnumLocatedNetworkElement, self).Next()
    def __iter__(self):
        try:
            super(IEnumLocatedNetworkElement, self).Reset()
            val = super(IEnumLocatedNetworkElement, self).Next()
            while any(val):
                yield val
                val = super(IEnumLocatedNetworkElement, self).Next()
        except:
            pass
    def get_NetworkDataset(self):
        '''Method IEnumLocatedNetworkElement.get_NetworkDataset

           OUTPUT
            Dataset             : INetworkDataset**'''
        return super(IEnumLocatedNetworkElement, self).get_NetworkDataset()
    NetworkDataset = property(get_NetworkDataset, None, None)

class INetworkLayer(_esriCarto.INetworkLayer):
    _IID = uuid.UUID('82870538-e09e-42c0-9228-cbcb244b91ba')

    def __init__(self, *args, **kw):
        super(INetworkLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NetworkDataset(self):
        '''Method INetworkLayer.get_NetworkDataset

           OUTPUT
            nds                 : INetworkDataset**'''
        return super(INetworkLayer, self).get_NetworkDataset()
    def putref_NetworkDataset(self, nds):
        '''Method INetworkLayer.putref_NetworkDataset

           INPUT
            nds                 : INetworkDataset*'''
        return super(INetworkLayer, self).putref_NetworkDataset(nds)
    def get_DisplayAttribute(self):
        '''Method INetworkLayer.get_DisplayAttribute

           OUTPUT
            attName             : BSTR*'''
        return super(INetworkLayer, self).get_DisplayAttribute()
    def put_DisplayAttribute(self, attName):
        '''Method INetworkLayer.put_DisplayAttribute

           INPUT
            attName             : BSTR'''
        return super(INetworkLayer, self).put_DisplayAttribute(attName)
    def get_ScaleSymbols(self):
        '''Method INetworkLayer.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(INetworkLayer, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method INetworkLayer.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(INetworkLayer, self).put_ScaleSymbols(Scale)
    def ExpandRegionForSymbols(self, Display, region):
        '''Method INetworkLayer.ExpandRegionForSymbols

           INPUTS
            Display             : IDisplay*
            region              : IGeometry*'''
        return super(INetworkLayer, self).ExpandRegionForSymbols(Display, region)
    def SearchLocatedNetworkElements(self, sourceName, Geometry):
        '''Method INetworkLayer.SearchLocatedNetworkElements

           INPUTS
            sourceName          : BSTR
            Geometry            : IGeometry*

           OUTPUT
            locatedElements     : IEnumLocatedNetworkElement**'''
        return super(INetworkLayer, self).SearchLocatedNetworkElements(sourceName, Geometry)
    DisplayAttribute = property(get_DisplayAttribute, put_DisplayAttribute, None)
    NetworkDataset = property(get_NetworkDataset, putref_NetworkDataset, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)

class INetworkRenderer(_esriCarto.INetworkRenderer):
    _IID = uuid.UUID('c33e3d68-ba60-4a02-856a-eec35f80d77c')

    def __init__(self, *args, **kw):
        super(INetworkRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Draw(self, Layer, DrawPhase, Display, TrackCancel):
        '''Method INetworkRenderer.Draw

           INPUTS
            Layer               : INetworkLayer*
            DrawPhase           : esriDrawPhase
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*'''
        return super(INetworkRenderer, self).Draw(Layer, DrawPhase, Display, TrackCancel)
    def CanRender(self, Layer, Display):
        '''Method INetworkRenderer.CanRender

           INPUTS
            Layer               : INetworkLayer*
            Display             : IDisplay*

           OUTPUT
            CanRender           : VARIANT_BOOL*'''
        return super(INetworkRenderer, self).CanRender(Layer, Display)
    def get_Name(self):
        '''Method INetworkRenderer.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkRenderer, self).get_Name()
    def put_Name(self, Name):
        '''Method INetworkRenderer.put_Name

           INPUT
            Name                : BSTR'''
        return super(INetworkRenderer, self).put_Name(Name)
    def get_RenderPhase(self, DrawPhase):
        '''Method INetworkRenderer.get_RenderPhase

           INPUT
            DrawPhase           : esriDrawPhase

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(INetworkRenderer, self).get_RenderPhase(DrawPhase)
    def get_RendererType(self):
        '''Method INetworkRenderer.get_RendererType

           OUTPUT
            Type                : esriNetworkRendererType*'''
        return super(INetworkRenderer, self).get_RendererType()
    def put_RendererType(self, Type):
        '''Method INetworkRenderer.put_RendererType

           INPUT
            Type                : esriNetworkRendererType'''
        return super(INetworkRenderer, self).put_RendererType(Type)
    Name = property(get_Name, put_Name, None)
    RendererType = property(get_RendererType, put_RendererType, None)
    RenderPhase = IndexProperty(get_RenderPhase, None)

class ILocatedNetworkTrafficValue(_esriCarto.ILocatedNetworkTrafficValue):
    _IID = uuid.UUID('7313cfa8-4e52-4880-88a5-8985fb75f6d1')
    def GetTrafficValue(self, direction):
        '''Method ILocatedNetworkTrafficValue.GetTrafficValue

           INPUT
            direction           : esriNetworkEdgeDirection

           OUTPUTS
            supportsTraffic     : VARIANT_BOOL*
            supportsRealTimeValue: VARIANT_BOOL*
            hasRealTimeValue    : VARIANT_BOOL*
            attributeValueRatio : double*'''
        return super(ILocatedNetworkTrafficValue, self).GetTrafficValue(direction)

class INetworkRendererCollection(_esriCarto.INetworkRendererCollection):
    _IID = uuid.UUID('30861a0e-fd25-4e33-b441-af7771cfa949')

    def __init__(self, *args, **kw):
        super(INetworkRendererCollection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Add(self, Renderer):
        '''Method INetworkRendererCollection.Add

           INPUT
            Renderer            : INetworkRenderer*'''
        return super(INetworkRendererCollection, self).Add(Renderer)
    def Remove(self, Renderer):
        '''Method INetworkRendererCollection.Remove

           INPUT
            Renderer            : INetworkRenderer*'''
        return super(INetworkRendererCollection, self).Remove(Renderer)
    def RemoveAll(self):
        '''Method INetworkRendererCollection.RemoveAll'''
        return super(INetworkRendererCollection, self).RemoveAll()
    def Insert(self, Renderer, Index):
        '''Method INetworkRendererCollection.Insert

           INPUTS
            Renderer            : INetworkRenderer*
            Index               : long'''
        return super(INetworkRendererCollection, self).Insert(Renderer, Index)
    def get_Visible(self, Index):
        '''Method INetworkRendererCollection.get_Visible

           INPUT
            Index               : long

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(INetworkRendererCollection, self).get_Visible(Index)
    def put_Visible(self, Index, Visible):
        '''Method INetworkRendererCollection.put_Visible

           INPUTS
            Index               : long
            Visible             : VARIANT_BOOL'''
        return super(INetworkRendererCollection, self).put_Visible(Index, Visible)
    def get_Count(self):
        '''Method INetworkRendererCollection.get_Count

           OUTPUT
            Count               : long*'''
        return super(INetworkRendererCollection, self).get_Count()
    def Reset(self):
        '''Method INetworkRendererCollection.Reset'''
        return super(INetworkRendererCollection, self).Reset()
    def Next(self):
        '''Method INetworkRendererCollection.Next

           OUTPUT
            Renderer            : INetworkRenderer**'''
        return super(INetworkRendererCollection, self).Next()
    def __iter__(self):
        try:
            super(INetworkRendererCollection, self).Reset()
            val = super(INetworkRendererCollection, self).Next()
            while val:
                yield val
                val = super(INetworkRendererCollection, self).Next()
        except:
            pass
    Count = property(get_Count, None, None)
    Visible = property(None, put_Visible, None)
    Visible = IndexProperty(get_Visible, None)

class INetworkIdentifyObj(_esriCarto.INetworkIdentifyObj):
    _IID = uuid.UUID('1532b02d-827c-4784-b355-e993c12964e6')
    def get_ElementID(self):
        '''Method INetworkIdentifyObj.get_ElementID

           OUTPUT
            eid                 : long*'''
        return super(INetworkIdentifyObj, self).get_ElementID()
    def get_ElementType(self):
        '''Method INetworkIdentifyObj.get_ElementType

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkIdentifyObj, self).get_ElementType()
    def get_NetworkName(self):
        '''Method INetworkIdentifyObj.get_NetworkName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkIdentifyObj, self).get_NetworkName()
    def get_Shape(self):
        '''Method INetworkIdentifyObj.get_Shape

           OUTPUT
            netElementGeometry  : IGeometry**'''
        return super(INetworkIdentifyObj, self).get_Shape()
    ElementID = property(get_ElementID, None, None)
    ElementType = property(get_ElementType, None, None)
    NetworkName = property(get_NetworkName, None, None)
    Shape = property(get_Shape, None, None)

class INetworkLayerSymbology(_esriCarto.INetworkLayerSymbology):
    _IID = uuid.UUID('9abb7b93-7f5f-43b2-a0b9-15f468898530')
    def get_CanSymbolize(self, Layer):
        '''Method INetworkLayerSymbology.get_CanSymbolize

           INPUT
            Layer               : INetworkLayer*

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(INetworkLayerSymbology, self).get_CanSymbolize(Layer)
    def get_Priority(self):
        '''Method INetworkLayerSymbology.get_Priority

           OUTPUT
            Priority            : double*'''
        return super(INetworkLayerSymbology, self).get_Priority()
    def Symbolize(self, Layer):
        '''Method INetworkLayerSymbology.Symbolize

           INPUT
            Layer               : INetworkLayer*'''
        return super(INetworkLayerSymbology, self).Symbolize(Layer)
    Priority = property(get_Priority, None, None)
    CanSymbolize = IndexProperty(get_CanSymbolize, None)

class ISimpleNetworkRenderer(_esriCarto.ISimpleNetworkRenderer):
    _IID = uuid.UUID('f2574db7-7f19-4a19-b8f4-138530ff6122')

    def __init__(self, *args, **kw):
        super(ISimpleNetworkRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Symbol(self):
        '''Method ISimpleNetworkRenderer.get_Symbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ISimpleNetworkRenderer, self).get_Symbol()
    def putref_Symbol(self, Symbol):
        '''Method ISimpleNetworkRenderer.putref_Symbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ISimpleNetworkRenderer, self).putref_Symbol(Symbol)
    def get_Label(self):
        '''Method ISimpleNetworkRenderer.get_Label

           OUTPUT
            Label               : BSTR*'''
        return super(ISimpleNetworkRenderer, self).get_Label()
    def put_Label(self, Label):
        '''Method ISimpleNetworkRenderer.put_Label

           INPUT
            Label               : BSTR'''
        return super(ISimpleNetworkRenderer, self).put_Label(Label)
    def get_Description(self):
        '''Method ISimpleNetworkRenderer.get_Description

           OUTPUT
            Text                : BSTR*'''
        return super(ISimpleNetworkRenderer, self).get_Description()
    def put_Description(self, Text):
        '''Method ISimpleNetworkRenderer.put_Description

           INPUT
            Text                : BSTR'''
        return super(ISimpleNetworkRenderer, self).put_Description(Text)
    Description = property(get_Description, put_Description, None)
    Label = property(get_Label, put_Label, None)
    Symbol = property(get_Symbol, putref_Symbol, None)

class INetworkTrafficRenderer(_esriCarto.INetworkTrafficRenderer):
    _IID = uuid.UUID('9db10a1f-c9a6-473f-9ac7-475dd02baa2e')

    def __init__(self, *args, **kw):
        super(INetworkTrafficRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShowLiveTrafficOnly(self):
        '''Method INetworkTrafficRenderer.get_ShowLiveTrafficOnly

           OUTPUT
            liveTrafficOnly     : VARIANT_BOOL*'''
        return super(INetworkTrafficRenderer, self).get_ShowLiveTrafficOnly()
    def put_ShowLiveTrafficOnly(self, liveTrafficOnly):
        '''Method INetworkTrafficRenderer.put_ShowLiveTrafficOnly

           INPUT
            liveTrafficOnly     : VARIANT_BOOL'''
        return super(INetworkTrafficRenderer, self).put_ShowLiveTrafficOnly(liveTrafficOnly)
    def get_UseScaleFilters(self):
        '''Method INetworkTrafficRenderer.get_UseScaleFilters

           OUTPUT
            UseScaleFilters     : VARIANT_BOOL*'''
        return super(INetworkTrafficRenderer, self).get_UseScaleFilters()
    def put_UseScaleFilters(self, UseScaleFilters):
        '''Method INetworkTrafficRenderer.put_UseScaleFilters

           INPUT
            UseScaleFilters     : VARIANT_BOOL'''
        return super(INetworkTrafficRenderer, self).put_UseScaleFilters(UseScaleFilters)
    def get_ScaleFilters(self):
        '''Method INetworkTrafficRenderer.get_ScaleFilters

           OUTPUT
            scaleRatios         : IDoubleArray**'''
        return super(INetworkTrafficRenderer, self).get_ScaleFilters()
    def put_ScaleFilters(self, scaleRatios):
        '''Method INetworkTrafficRenderer.put_ScaleFilters

           INPUT
            scaleRatios         : IDoubleArray*'''
        return super(INetworkTrafficRenderer, self).put_ScaleFilters(scaleRatios)
    def get_DrawLineWidthByHierarchyLevelIndex(self):
        '''Method INetworkTrafficRenderer.get_DrawLineWidthByHierarchyLevelIndex

           OUTPUT
            useHierarchy        : VARIANT_BOOL*'''
        return super(INetworkTrafficRenderer, self).get_DrawLineWidthByHierarchyLevelIndex()
    def put_DrawLineWidthByHierarchyLevelIndex(self, useHierarchy):
        '''Method INetworkTrafficRenderer.put_DrawLineWidthByHierarchyLevelIndex

           INPUT
            useHierarchy        : VARIANT_BOOL'''
        return super(INetworkTrafficRenderer, self).put_DrawLineWidthByHierarchyLevelIndex(useHierarchy)
    def get_InteriorLineWidthsByHierarchyLevelIndex(self):
        '''Method INetworkTrafficRenderer.get_InteriorLineWidthsByHierarchyLevelIndex

           OUTPUT
            widths              : IDoubleArray**'''
        return super(INetworkTrafficRenderer, self).get_InteriorLineWidthsByHierarchyLevelIndex()
    def put_InteriorLineWidthsByHierarchyLevelIndex(self, widths):
        '''Method INetworkTrafficRenderer.put_InteriorLineWidthsByHierarchyLevelIndex

           INPUT
            widths              : IDoubleArray*'''
        return super(INetworkTrafficRenderer, self).put_InteriorLineWidthsByHierarchyLevelIndex(widths)
    def get_ExteriorLineWidthIncrement(self):
        '''Method INetworkTrafficRenderer.get_ExteriorLineWidthIncrement

           OUTPUT
            increment           : double*'''
        return super(INetworkTrafficRenderer, self).get_ExteriorLineWidthIncrement()
    def get_UseLineCasings(self):
        '''Method INetworkTrafficRenderer.get_UseLineCasings

           OUTPUT
            UseLineCasings      : VARIANT_BOOL*'''
        return super(INetworkTrafficRenderer, self).get_UseLineCasings()
    def put_UseLineCasings(self, UseLineCasings):
        '''Method INetworkTrafficRenderer.put_UseLineCasings

           INPUT
            UseLineCasings      : VARIANT_BOOL'''
        return super(INetworkTrafficRenderer, self).put_UseLineCasings(UseLineCasings)
    def get_UseDerivedLineCasingsColor(self):
        '''Method INetworkTrafficRenderer.get_UseDerivedLineCasingsColor

           OUTPUT
            UseDerivedLineCasingsColor: VARIANT_BOOL*'''
        return super(INetworkTrafficRenderer, self).get_UseDerivedLineCasingsColor()
    def put_UseDerivedLineCasingsColor(self, UseDerivedLineCasingsColor):
        '''Method INetworkTrafficRenderer.put_UseDerivedLineCasingsColor

           INPUT
            UseDerivedLineCasingsColor: VARIANT_BOOL'''
        return super(INetworkTrafficRenderer, self).put_UseDerivedLineCasingsColor(UseDerivedLineCasingsColor)
    def DeriveLineCasingsColor(self, interiorColor):
        '''Method INetworkTrafficRenderer.DeriveLineCasingsColor

           INPUT
            interiorColor       : IColor*

           OUTPUT
            exteriorColor       : IColor**'''
        return super(INetworkTrafficRenderer, self).DeriveLineCasingsColor(interiorColor)
    def get_LineCasingsColor(self):
        '''Method INetworkTrafficRenderer.get_LineCasingsColor

           OUTPUT
            exteriorColor       : IColor**'''
        return super(INetworkTrafficRenderer, self).get_LineCasingsColor()
    def put_LineCasingsColor(self, exteriorColor):
        '''Method INetworkTrafficRenderer.put_LineCasingsColor

           INPUT
            exteriorColor       : IColor*'''
        return super(INetworkTrafficRenderer, self).put_LineCasingsColor(exteriorColor)
    DrawLineWidthByHierarchyLevelIndex = property(get_DrawLineWidthByHierarchyLevelIndex, put_DrawLineWidthByHierarchyLevelIndex, None)
    ExteriorLineWidthIncrement = property(get_ExteriorLineWidthIncrement, None, None)
    InteriorLineWidthsByHierarchyLevelIndex = property(get_InteriorLineWidthsByHierarchyLevelIndex, put_InteriorLineWidthsByHierarchyLevelIndex, None)
    LineCasingsColor = property(get_LineCasingsColor, put_LineCasingsColor, None)
    ScaleFilters = property(get_ScaleFilters, put_ScaleFilters, None)
    ShowLiveTrafficOnly = property(get_ShowLiveTrafficOnly, put_ShowLiveTrafficOnly, None)
    UseDerivedLineCasingsColor = property(get_UseDerivedLineCasingsColor, put_UseDerivedLineCasingsColor, None)
    UseLineCasings = property(get_UseLineCasings, put_UseLineCasings, None)
    UseScaleFilters = property(get_UseScaleFilters, put_UseScaleFilters, None)

class INetworkEdgeRenderer(_esriCarto.INetworkEdgeRenderer):
    _IID = uuid.UUID('4bd03700-90bf-4658-8b95-1351ff49027c')

    def __init__(self, *args, **kw):
        super(INetworkEdgeRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ArrowAttributeName(self):
        '''Method INetworkEdgeRenderer.get_ArrowAttributeName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkEdgeRenderer, self).get_ArrowAttributeName()
    def put_ArrowAttributeName(self, Name):
        '''Method INetworkEdgeRenderer.put_ArrowAttributeName

           INPUT
            Name                : BSTR'''
        return super(INetworkEdgeRenderer, self).put_ArrowAttributeName(Name)
    def put_ArrowType(self, Type):
        '''Method INetworkEdgeRenderer.put_ArrowType

           INPUT
            Type                : esriNetworkArrowType'''
        return super(INetworkEdgeRenderer, self).put_ArrowType(Type)
    def get_ArrowType(self):
        '''Method INetworkEdgeRenderer.get_ArrowType

           OUTPUT
            Type                : esriNetworkArrowType*'''
        return super(INetworkEdgeRenderer, self).get_ArrowType()
    def put_ArrowSymbol(self, symbolType, Symbol):
        '''Method INetworkEdgeRenderer.put_ArrowSymbol

           INPUTS
            symbolType          : esriNetworkArrowSymbolType
            Symbol              : ISymbol*'''
        return super(INetworkEdgeRenderer, self).put_ArrowSymbol(symbolType, Symbol)
    def get_ArrowSymbol(self, symbolType):
        '''Method INetworkEdgeRenderer.get_ArrowSymbol

           INPUT
            symbolType          : esriNetworkArrowSymbolType

           OUTPUT
            Symbol              : ISymbol**'''
        return super(INetworkEdgeRenderer, self).get_ArrowSymbol(symbolType)
    ArrowAttributeName = property(get_ArrowAttributeName, put_ArrowAttributeName, None)
    ArrowSymbol = property(None, put_ArrowSymbol, None)
    ArrowType = property(get_ArrowType, put_ArrowType, None)
    ArrowSymbol = IndexProperty(get_ArrowSymbol, None)

class INetworkEdgeRenderer2(_esriCarto.INetworkEdgeRenderer2):
    _IID = uuid.UUID('d2622cb5-e2ee-42a3-b0de-fede451f1762')

    def __init__(self, *args, **kw):
        super(INetworkEdgeRenderer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ShowArrows(self, symbolType, Show):
        '''Method INetworkEdgeRenderer2.put_ShowArrows

           INPUTS
            symbolType          : esriNetworkArrowSymbolType
            Show                : VARIANT_BOOL'''
        return super(INetworkEdgeRenderer2, self).put_ShowArrows(symbolType, Show)
    def get_ShowArrows(self, symbolType):
        '''Method INetworkEdgeRenderer2.get_ShowArrows

           INPUT
            symbolType          : esriNetworkArrowSymbolType

           OUTPUT
            Show                : VARIANT_BOOL*'''
        return super(INetworkEdgeRenderer2, self).get_ShowArrows(symbolType)
    def get_ArrowAttributeName(self):
        '''Method INetworkEdgeRenderer.get_ArrowAttributeName (from INetworkEdgeRenderer)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkEdgeRenderer2, self).get_ArrowAttributeName()
    def put_ArrowAttributeName(self, Name):
        '''Method INetworkEdgeRenderer.put_ArrowAttributeName (from INetworkEdgeRenderer)

           INPUT
            Name                : BSTR'''
        return super(INetworkEdgeRenderer2, self).put_ArrowAttributeName(Name)
    def put_ArrowType(self, Type):
        '''Method INetworkEdgeRenderer.put_ArrowType (from INetworkEdgeRenderer)

           INPUT
            Type                : esriNetworkArrowType'''
        return super(INetworkEdgeRenderer2, self).put_ArrowType(Type)
    def get_ArrowType(self):
        '''Method INetworkEdgeRenderer.get_ArrowType (from INetworkEdgeRenderer)

           OUTPUT
            Type                : esriNetworkArrowType*'''
        return super(INetworkEdgeRenderer2, self).get_ArrowType()
    def put_ArrowSymbol(self, symbolType, Symbol):
        '''Method INetworkEdgeRenderer.put_ArrowSymbol (from INetworkEdgeRenderer)

           INPUTS
            symbolType          : esriNetworkArrowSymbolType
            Symbol              : ISymbol*'''
        return super(INetworkEdgeRenderer2, self).put_ArrowSymbol(symbolType, Symbol)
    def get_ArrowSymbol(self, symbolType):
        '''Method INetworkEdgeRenderer.get_ArrowSymbol (from INetworkEdgeRenderer)

           INPUT
            symbolType          : esriNetworkArrowSymbolType

           OUTPUT
            Symbol              : ISymbol**'''
        return super(INetworkEdgeRenderer2, self).get_ArrowSymbol(symbolType)
    ArrowAttributeName = property(get_ArrowAttributeName, put_ArrowAttributeName, None)
    ArrowSymbol = property(None, put_ArrowSymbol, None)
    ArrowType = property(get_ArrowType, put_ArrowType, None)
    ShowArrows = property(None, put_ShowArrows, None)
    ArrowSymbol = IndexProperty(get_ArrowSymbol, None)
    ShowArrows = IndexProperty(get_ShowArrows, None)

class INetworkSourceRenderer(_esriCarto.INetworkSourceRenderer):
    _IID = uuid.UUID('b7d4910a-f568-4bc6-8d42-215b4f14dadc')

    def __init__(self, *args, **kw):
        super(INetworkSourceRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def BindSources(self, pNetworkDataset):
        '''Method INetworkSourceRenderer.BindSources

           INPUT
            pNetworkDataset     : INetworkDataset*'''
        return super(INetworkSourceRenderer, self).BindSources(pNetworkDataset)
    def get_SourceNames(self, ppSourceNames):
        '''Method INetworkSourceRenderer.get_SourceNames

           INPUT
            ppSourceNames       : IStringArray**'''
        return super(INetworkSourceRenderer, self).get_SourceNames(ppSourceNames)
    def get_IsSourceVisible(self, sourceName):
        '''Method INetworkSourceRenderer.get_IsSourceVisible

           INPUT
            sourceName          : BSTR

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(INetworkSourceRenderer, self).get_IsSourceVisible(sourceName)
    def put_IsSourceVisible(self, sourceName, Visible):
        '''Method INetworkSourceRenderer.put_IsSourceVisible

           INPUTS
            sourceName          : BSTR
            Visible             : VARIANT_BOOL'''
        return super(INetworkSourceRenderer, self).put_IsSourceVisible(sourceName, Visible)
    def get_SourceQueryExpression(self, sourceName):
        '''Method INetworkSourceRenderer.get_SourceQueryExpression

           INPUT
            sourceName          : BSTR

           OUTPUT
            Expression          : BSTR*'''
        return super(INetworkSourceRenderer, self).get_SourceQueryExpression(sourceName)
    def put_SourceQueryExpression(self, sourceName, Expression):
        '''Method INetworkSourceRenderer.put_SourceQueryExpression

           INPUTS
            sourceName          : BSTR
            Expression          : BSTR'''
        return super(INetworkSourceRenderer, self).put_SourceQueryExpression(sourceName, Expression)
    def get_TrafficElementsOnly(self):
        '''Method INetworkSourceRenderer.get_TrafficElementsOnly

           OUTPUT
            TrafficElementsOnly : VARIANT_BOOL*'''
        return super(INetworkSourceRenderer, self).get_TrafficElementsOnly()
    IsSourceVisible = property(None, put_IsSourceVisible, None)
    SourceQueryExpression = property(None, put_SourceQueryExpression, None)
    TrafficElementsOnly = property(get_TrafficElementsOnly, None, None)
    IsSourceVisible = IndexProperty(get_IsSourceVisible, None)
    SourceQueryExpression = IndexProperty(get_SourceQueryExpression, None)

class IRepresentationRenderer(_esriCarto.IRepresentationRenderer):
    _IID = uuid.UUID('c2e6e3ea-6057-4daf-9d54-a84b2a589307')

    def __init__(self, *args, **kw):
        super(IRepresentationRenderer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RepresentationClass(self, repClass):
        '''Method IRepresentationRenderer.putref_RepresentationClass

           INPUT
            repClass            : IRepresentationClass*'''
        return super(IRepresentationRenderer, self).putref_RepresentationClass(repClass)
    def get_RepresentationClass(self):
        '''Method IRepresentationRenderer.get_RepresentationClass

           OUTPUT
            repClass            : IRepresentationClass**'''
        return super(IRepresentationRenderer, self).get_RepresentationClass()
    def get_DrawInvisible(self):
        '''Method IRepresentationRenderer.get_DrawInvisible

           OUTPUT
            Draw                : VARIANT_BOOL*'''
        return super(IRepresentationRenderer, self).get_DrawInvisible()
    def put_DrawInvisible(self, Draw):
        '''Method IRepresentationRenderer.put_DrawInvisible

           INPUT
            Draw                : VARIANT_BOOL'''
        return super(IRepresentationRenderer, self).put_DrawInvisible(Draw)
    def get_InvisibleColor(self):
        '''Method IRepresentationRenderer.get_InvisibleColor

           OUTPUT
            Color               : IColor**'''
        return super(IRepresentationRenderer, self).get_InvisibleColor()
    def put_InvisibleColor(self, Color):
        '''Method IRepresentationRenderer.put_InvisibleColor

           INPUT
            Color               : IColor*'''
        return super(IRepresentationRenderer, self).put_InvisibleColor(Color)
    def get_DrawInvalidRule(self):
        '''Method IRepresentationRenderer.get_DrawInvalidRule

           OUTPUT
            Draw                : VARIANT_BOOL*'''
        return super(IRepresentationRenderer, self).get_DrawInvalidRule()
    def put_DrawInvalidRule(self, Draw):
        '''Method IRepresentationRenderer.put_DrawInvalidRule

           INPUT
            Draw                : VARIANT_BOOL'''
        return super(IRepresentationRenderer, self).put_DrawInvalidRule(Draw)
    def get_InvalidRuleColor(self):
        '''Method IRepresentationRenderer.get_InvalidRuleColor

           OUTPUT
            Color               : IColor**'''
        return super(IRepresentationRenderer, self).get_InvalidRuleColor()
    def put_InvalidRuleColor(self, Color):
        '''Method IRepresentationRenderer.put_InvalidRuleColor

           INPUT
            Color               : IColor*'''
        return super(IRepresentationRenderer, self).put_InvalidRuleColor(Color)
    DrawInvalidRule = property(get_DrawInvalidRule, put_DrawInvalidRule, None)
    DrawInvisible = property(get_DrawInvisible, put_DrawInvisible, None)
    InvalidRuleColor = property(get_InvalidRuleColor, put_InvalidRuleColor, None)
    InvisibleColor = property(get_InvisibleColor, put_InvisibleColor, None)
    RepresentationClass = property(get_RepresentationClass, putref_RepresentationClass, None)

class IRepresentationLegendClass(_esriCarto.IRepresentationLegendClass):
    _IID = uuid.UUID('9543ded1-d4aa-4ece-b21a-90ce2585c8ad')
    def get_RepresentationClass(self):
        '''Method IRepresentationLegendClass.get_RepresentationClass

           OUTPUT
            repClass            : IRepresentationClass**'''
        return super(IRepresentationLegendClass, self).get_RepresentationClass()
    def get_RuleID(self):
        '''Method IRepresentationLegendClass.get_RuleID

           OUTPUT
            RuleID              : long*'''
        return super(IRepresentationLegendClass, self).get_RuleID()
    RepresentationClass = property(get_RepresentationClass, None, None)
    RuleID = property(get_RuleID, None, None)

class IDataGraphBase(_esriCarto.IDataGraphBase):
    _IID = uuid.UUID('37c4c49c-66cc-4b39-ade8-15e2e270d8b1')

    def __init__(self, *args, **kw):
        super(IDataGraphBase, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IDataGraphBase.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IDataGraphBase, self).get_Name()
    def put_Name(self, pName):
        '''Method IDataGraphBase.put_Name

           INPUT
            pName               : BSTR'''
        return super(IDataGraphBase, self).put_Name(pName)
    def get_UseSelectedSet(self):
        '''Method IDataGraphBase.get_UseSelectedSet

           OUTPUT
            pUseSel             : VARIANT_BOOL*'''
        return super(IDataGraphBase, self).get_UseSelectedSet()
    def put_UseSelectedSet(self, pUseSel):
        '''Method IDataGraphBase.put_UseSelectedSet

           INPUT
            pUseSel             : VARIANT_BOOL'''
        return super(IDataGraphBase, self).put_UseSelectedSet(pUseSel)
    def Reload(self):
        '''Method IDataGraphBase.Reload'''
        return super(IDataGraphBase, self).Reload()
    def DrawToDC(self, hDC, pOutputRect, pGraphRect):
        '''Method IDataGraphBase.DrawToDC

           INPUTS
            hDC                 : OLE_HANDLE
            pOutputRect         : tagRECT*
            pGraphRect          : tagRECT*'''
        return super(IDataGraphBase, self).DrawToDC(hDC, pOutputRect, pGraphRect)
    def LoadFromFile(self, Filename):
        '''Method IDataGraphBase.LoadFromFile

           INPUT
            Filename            : BSTR'''
        return super(IDataGraphBase, self).LoadFromFile(Filename)
    def SaveToFile(self, Filename):
        '''Method IDataGraphBase.SaveToFile

           INPUT
            Filename            : BSTR'''
        return super(IDataGraphBase, self).SaveToFile(Filename)
    def ExportToFile(self, Filename):
        '''Method IDataGraphBase.ExportToFile

           INPUT
            Filename            : BSTR'''
        return super(IDataGraphBase, self).ExportToFile(Filename)
    def CopyToClipboard(self):
        '''Method IDataGraphBase.CopyToClipboard'''
        return super(IDataGraphBase, self).CopyToClipboard()
    Name = property(get_Name, put_Name, None)
    UseSelectedSet = property(get_UseSelectedSet, put_UseSelectedSet, None)

class IDataGraphTPenProperties(_esriCarto.IDataGraphTPenProperties):
    _IID = uuid.UUID('a4a130e8-45ce-4265-bd2d-25b9399a69f2')

    def __init__(self, *args, **kw):
        super(IDataGraphTPenProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method IDataGraphTPenProperties.get_Visible

           OUTPUT
            pVisible            : VARIANT_BOOL*'''
        return super(IDataGraphTPenProperties, self).get_Visible()
    def put_Visible(self, pVisible):
        '''Method IDataGraphTPenProperties.put_Visible

           INPUT
            pVisible            : VARIANT_BOOL'''
        return super(IDataGraphTPenProperties, self).put_Visible(pVisible)
    def get_Width(self):
        '''Method IDataGraphTPenProperties.get_Width

           OUTPUT
            pWidth              : long*'''
        return super(IDataGraphTPenProperties, self).get_Width()
    def put_Width(self, pWidth):
        '''Method IDataGraphTPenProperties.put_Width

           INPUT
            pWidth              : long'''
        return super(IDataGraphTPenProperties, self).put_Width(pWidth)
    def get_Style(self):
        '''Method IDataGraphTPenProperties.get_Style

           OUTPUT
            pType               : esriDataGraphTPenType*'''
        return super(IDataGraphTPenProperties, self).get_Style()
    def put_Style(self, pType):
        '''Method IDataGraphTPenProperties.put_Style

           INPUT
            pType               : esriDataGraphTPenType'''
        return super(IDataGraphTPenProperties, self).put_Style(pType)
    def get_Color(self):
        '''Method IDataGraphTPenProperties.get_Color

           OUTPUT
            pColor              : OLE_COLOR*'''
        return super(IDataGraphTPenProperties, self).get_Color()
    def put_Color(self, pColor):
        '''Method IDataGraphTPenProperties.put_Color

           INPUT
            pColor              : OLE_COLOR'''
        return super(IDataGraphTPenProperties, self).put_Color(pColor)
    Color = property(get_Color, put_Color, None)
    Style = property(get_Style, put_Style, None)
    Visible = property(get_Visible, put_Visible, None)
    Width = property(get_Width, put_Width, None)

class ISeriesProperties(_esriCarto.ISeriesProperties):
    _IID = uuid.UUID('ae695391-d0ae-4b5e-a9e7-419e091060d2')

    def __init__(self, *args, **kw):
        super(ISeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsChanged(self):
        '''Method ISeriesProperties.get_IsChanged

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(ISeriesProperties, self).get_IsChanged()
    def get_IsReady(self):
        '''Method ISeriesProperties.get_IsReady

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(ISeriesProperties, self).get_IsReady()
    def get_Name(self):
        '''Method ISeriesProperties.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ISeriesProperties, self).get_Name()
    def put_Name(self, Name):
        '''Method ISeriesProperties.put_Name

           INPUT
            Name                : BSTR'''
        return super(ISeriesProperties, self).put_Name(Name)
    def get_UniqueName(self):
        '''Method ISeriesProperties.get_UniqueName

           OUTPUT
            uname               : BSTR*'''
        return super(ISeriesProperties, self).get_UniqueName()
    def get_Type(self):
        '''Method ISeriesProperties.get_Type

           OUTPUT
            TypeName            : BSTR*'''
        return super(ISeriesProperties, self).get_Type()
    def put_SourceData(self, pVar):
        '''Method ISeriesProperties.put_SourceData

           INPUT
            pVar                : VARIANT'''
        return super(ISeriesProperties, self).put_SourceData(pVar)
    def get_SourceData(self):
        '''Method ISeriesProperties.get_SourceData

           OUTPUT
            pVar                : VARIANT*'''
        return super(ISeriesProperties, self).get_SourceData()
    def get_WhereClause(self):
        '''Method ISeriesProperties.get_WhereClause

           OUTPUT
            definition          : BSTR*'''
        return super(ISeriesProperties, self).get_WhereClause()
    def put_WhereClause(self, definition):
        '''Method ISeriesProperties.put_WhereClause

           INPUT
            definition          : BSTR'''
        return super(ISeriesProperties, self).put_WhereClause(definition)
    def get_LabelField(self):
        '''Method ISeriesProperties.get_LabelField

           OUTPUT
            pFieldName          : BSTR*'''
        return super(ISeriesProperties, self).get_LabelField()
    def put_LabelField(self, pFieldName):
        '''Method ISeriesProperties.put_LabelField

           INPUT
            pFieldName          : BSTR'''
        return super(ISeriesProperties, self).put_LabelField(pFieldName)
    def get_MaxField(self):
        '''Method ISeriesProperties.get_MaxField

           OUTPUT
            Count               : long*'''
        return super(ISeriesProperties, self).get_MaxField()
    def SetField(self, idx, FieldName):
        '''Method ISeriesProperties.SetField

           INPUTS
            idx                 : long
            FieldName           : BSTR'''
        return super(ISeriesProperties, self).SetField(idx, FieldName)
    def GetField(self, idx):
        '''Method ISeriesProperties.GetField

           INPUT
            idx                 : long

           OUTPUT
            FieldName           : BSTR*'''
        return super(ISeriesProperties, self).GetField(idx)
    def get_FieldOptional(self, idx):
        '''Method ISeriesProperties.get_FieldOptional

           INPUT
            idx                 : long

           OUTPUT
            bOptional           : VARIANT_BOOL*'''
        return super(ISeriesProperties, self).get_FieldOptional(idx)
    def get_ColorType(self):
        '''Method ISeriesProperties.get_ColorType

           OUTPUT
            eColorType          : esriGraphColorType*'''
        return super(ISeriesProperties, self).get_ColorType()
    def put_ColorType(self, eColorType):
        '''Method ISeriesProperties.put_ColorType

           INPUT
            eColorType          : esriGraphColorType'''
        return super(ISeriesProperties, self).put_ColorType(eColorType)
    def get_CustomColor(self):
        '''Method ISeriesProperties.get_CustomColor

           OUTPUT
            pColor              : OLE_COLOR*'''
        return super(ISeriesProperties, self).get_CustomColor()
    def put_CustomColor(self, pColor):
        '''Method ISeriesProperties.put_CustomColor

           INPUT
            pColor              : OLE_COLOR'''
        return super(ISeriesProperties, self).put_CustomColor(pColor)
    def get_Color(self, OID):
        '''Method ISeriesProperties.get_Color

           INPUT
            OID                 : long

           OUTPUT
            pColor              : OLE_COLOR*'''
        return super(ISeriesProperties, self).get_Color(OID)
    def put_Color(self, OID, pColor):
        '''Method ISeriesProperties.put_Color

           INPUTS
            OID                 : long
            pColor              : OLE_COLOR'''
        return super(ISeriesProperties, self).put_Color(OID, pColor)
    def get_ColorPalette(self):
        '''Method ISeriesProperties.get_ColorPalette

           OUTPUT
            PaletteName         : BSTR*'''
        return super(ISeriesProperties, self).get_ColorPalette()
    def put_ColorPalette(self, PaletteName):
        '''Method ISeriesProperties.put_ColorPalette

           INPUT
            PaletteName         : BSTR'''
        return super(ISeriesProperties, self).put_ColorPalette(PaletteName)
    def get_InLegend(self):
        '''Method ISeriesProperties.get_InLegend

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(ISeriesProperties, self).get_InLegend()
    def put_InLegend(self, b):
        '''Method ISeriesProperties.put_InLegend

           INPUT
            b                   : VARIANT_BOOL'''
        return super(ISeriesProperties, self).put_InLegend(b)
    def get_Marks(self):
        '''Method ISeriesProperties.get_Marks

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(ISeriesProperties, self).get_Marks()
    def put_Marks(self, b):
        '''Method ISeriesProperties.put_Marks

           INPUT
            b                   : VARIANT_BOOL'''
        return super(ISeriesProperties, self).put_Marks(b)
    def get_PenProperties(self):
        '''Method ISeriesProperties.get_PenProperties

           OUTPUT
            ppPenProps          : IDataGraphTPenProperties**'''
        return super(ISeriesProperties, self).get_PenProperties()
    def get_ValueFormat(self):
        '''Method ISeriesProperties.get_ValueFormat

           OUTPUT
            Format              : BSTR*'''
        return super(ISeriesProperties, self).get_ValueFormat()
    def put_ValueFormat(self, Format):
        '''Method ISeriesProperties.put_ValueFormat

           INPUT
            Format              : BSTR'''
        return super(ISeriesProperties, self).put_ValueFormat(Format)
    def get_HorizontalAxis(self):
        '''Method ISeriesProperties.get_HorizontalAxis

           OUTPUT
            pIdx                : long*'''
        return super(ISeriesProperties, self).get_HorizontalAxis()
    def put_HorizontalAxis(self, pIdx):
        '''Method ISeriesProperties.put_HorizontalAxis

           INPUT
            pIdx                : long'''
        return super(ISeriesProperties, self).put_HorizontalAxis(pIdx)
    def get_VerticalAxis(self):
        '''Method ISeriesProperties.get_VerticalAxis

           OUTPUT
            pIdx                : long*'''
        return super(ISeriesProperties, self).get_VerticalAxis()
    def put_VerticalAxis(self, pIdx):
        '''Method ISeriesProperties.put_VerticalAxis

           INPUT
            pIdx                : long'''
        return super(ISeriesProperties, self).put_VerticalAxis(pIdx)
    Color = property(None, put_Color, None)
    ColorPalette = property(get_ColorPalette, put_ColorPalette, None)
    ColorType = property(get_ColorType, put_ColorType, None)
    CustomColor = property(get_CustomColor, put_CustomColor, None)
    HorizontalAxis = property(get_HorizontalAxis, put_HorizontalAxis, None)
    InLegend = property(get_InLegend, put_InLegend, None)
    IsChanged = property(get_IsChanged, None, None)
    IsReady = property(get_IsReady, None, None)
    LabelField = property(get_LabelField, put_LabelField, None)
    Marks = property(get_Marks, put_Marks, None)
    MaxField = property(get_MaxField, None, None)
    Name = property(get_Name, put_Name, None)
    PenProperties = property(get_PenProperties, None, None)
    SourceData = property(get_SourceData, put_SourceData, None)
    Type = property(get_Type, None, None)
    UniqueName = property(get_UniqueName, None, None)
    ValueFormat = property(get_ValueFormat, put_ValueFormat, None)
    VerticalAxis = property(get_VerticalAxis, put_VerticalAxis, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)
    Color = IndexProperty(get_Color, None)
    FieldOptional = IndexProperty(get_FieldOptional, None)

class IDataGraphTGeneralProperties(_esriCarto.IDataGraphTGeneralProperties):
    _IID = uuid.UUID('8aa61ce1-0d6c-40eb-acd2-499d4d580e2e')

    def __init__(self, *args, **kw):
        super(IDataGraphTGeneralProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Title(self):
        '''Method IDataGraphTGeneralProperties.get_Title

           OUTPUT
            Title               : BSTR*'''
        return super(IDataGraphTGeneralProperties, self).get_Title()
    def put_Title(self, Title):
        '''Method IDataGraphTGeneralProperties.put_Title

           INPUT
            Title               : BSTR'''
        return super(IDataGraphTGeneralProperties, self).put_Title(Title)
    def get_SubTitle(self):
        '''Method IDataGraphTGeneralProperties.get_SubTitle

           OUTPUT
            SubTitle            : BSTR*'''
        return super(IDataGraphTGeneralProperties, self).get_SubTitle()
    def put_SubTitle(self, SubTitle):
        '''Method IDataGraphTGeneralProperties.put_SubTitle

           INPUT
            SubTitle            : BSTR'''
        return super(IDataGraphTGeneralProperties, self).put_SubTitle(SubTitle)
    def get_Footer(self):
        '''Method IDataGraphTGeneralProperties.get_Footer

           OUTPUT
            Footer              : BSTR*'''
        return super(IDataGraphTGeneralProperties, self).get_Footer()
    def put_Footer(self, Footer):
        '''Method IDataGraphTGeneralProperties.put_Footer

           INPUT
            Footer              : BSTR'''
        return super(IDataGraphTGeneralProperties, self).put_Footer(Footer)
    def get_Show3D(self):
        '''Method IDataGraphTGeneralProperties.get_Show3D

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTGeneralProperties, self).get_Show3D()
    def put_Show3D(self, b):
        '''Method IDataGraphTGeneralProperties.put_Show3D

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphTGeneralProperties, self).put_Show3D(b)
    Footer = property(get_Footer, put_Footer, None)
    Show3D = property(get_Show3D, put_Show3D, None)
    SubTitle = property(get_SubTitle, put_SubTitle, None)
    Title = property(get_Title, put_Title, None)

class IDataGraphTLegendProperties(_esriCarto.IDataGraphTLegendProperties):
    _IID = uuid.UUID('9134b30d-f03d-4b18-8cf6-c8a402e7fd0c')

    def __init__(self, *args, **kw):
        super(IDataGraphTLegendProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method IDataGraphTLegendProperties.get_Visible

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTLegendProperties, self).get_Visible()
    def put_Visible(self, b):
        '''Method IDataGraphTLegendProperties.put_Visible

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphTLegendProperties, self).put_Visible(b)
    def get_Title(self):
        '''Method IDataGraphTLegendProperties.get_Title

           OUTPUT
            Title               : BSTR*'''
        return super(IDataGraphTLegendProperties, self).get_Title()
    def put_Title(self, Title):
        '''Method IDataGraphTLegendProperties.put_Title

           INPUT
            Title               : BSTR'''
        return super(IDataGraphTLegendProperties, self).put_Title(Title)
    def get_Alignment(self):
        '''Method IDataGraphTLegendProperties.get_Alignment

           OUTPUT
            pAlignment          : esriDataGraphTLegendAlignment*'''
        return super(IDataGraphTLegendProperties, self).get_Alignment()
    def put_Alignment(self, pAlignment):
        '''Method IDataGraphTLegendProperties.put_Alignment

           INPUT
            pAlignment          : esriDataGraphTLegendAlignment'''
        return super(IDataGraphTLegendProperties, self).put_Alignment(pAlignment)
    def get_TextStyle(self):
        '''Method IDataGraphTLegendProperties.get_TextStyle

           OUTPUT
            Style               : esriDataGraphTLegendTextSyle*'''
        return super(IDataGraphTLegendProperties, self).get_TextStyle()
    def put_TextStyle(self, Style):
        '''Method IDataGraphTLegendProperties.put_TextStyle

           INPUT
            Style               : esriDataGraphTLegendTextSyle'''
        return super(IDataGraphTLegendProperties, self).put_TextStyle(Style)
    Alignment = property(get_Alignment, put_Alignment, None)
    TextStyle = property(get_TextStyle, put_TextStyle, None)
    Title = property(get_Title, put_Title, None)
    Visible = property(get_Visible, put_Visible, None)

class IDataGraphTAxisProperties(_esriCarto.IDataGraphTAxisProperties):
    _IID = uuid.UUID('6d6170e0-f35c-4f35-bc0d-d65e9db779e9')

    def __init__(self, *args, **kw):
        super(IDataGraphTAxisProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method IDataGraphTAxisProperties.get_Visible

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTAxisProperties, self).get_Visible()
    def put_Visible(self, b):
        '''Method IDataGraphTAxisProperties.put_Visible

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphTAxisProperties, self).put_Visible(b)
    def get_Logarithmic(self):
        '''Method IDataGraphTAxisProperties.get_Logarithmic

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTAxisProperties, self).get_Logarithmic()
    def put_Logarithmic(self, b):
        '''Method IDataGraphTAxisProperties.put_Logarithmic

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphTAxisProperties, self).put_Logarithmic(b)
    def get_Title(self):
        '''Method IDataGraphTAxisProperties.get_Title

           OUTPUT
            Title               : BSTR*'''
        return super(IDataGraphTAxisProperties, self).get_Title()
    def put_Title(self, Title):
        '''Method IDataGraphTAxisProperties.put_Title

           INPUT
            Title               : BSTR'''
        return super(IDataGraphTAxisProperties, self).put_Title(Title)
    def get_ValueFormat(self):
        '''Method IDataGraphTAxisProperties.get_ValueFormat

           OUTPUT
            Format              : BSTR*'''
        return super(IDataGraphTAxisProperties, self).get_ValueFormat()
    def put_ValueFormat(self, Format):
        '''Method IDataGraphTAxisProperties.put_ValueFormat

           INPUT
            Format              : BSTR'''
        return super(IDataGraphTAxisProperties, self).put_ValueFormat(Format)
    def get_DateTimeFormat(self):
        '''Method IDataGraphTAxisProperties.get_DateTimeFormat

           OUTPUT
            Format              : BSTR*'''
        return super(IDataGraphTAxisProperties, self).get_DateTimeFormat()
    def put_DateTimeFormat(self, Format):
        '''Method IDataGraphTAxisProperties.put_DateTimeFormat

           INPUT
            Format              : BSTR'''
        return super(IDataGraphTAxisProperties, self).put_DateTimeFormat(Format)
    def get_AutomaticMinimum(self):
        '''Method IDataGraphTAxisProperties.get_AutomaticMinimum

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTAxisProperties, self).get_AutomaticMinimum()
    def put_AutomaticMinimum(self, b):
        '''Method IDataGraphTAxisProperties.put_AutomaticMinimum

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphTAxisProperties, self).put_AutomaticMinimum(b)
    def get_AutomaticMaximum(self):
        '''Method IDataGraphTAxisProperties.get_AutomaticMaximum

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTAxisProperties, self).get_AutomaticMaximum()
    def put_AutomaticMaximum(self, b):
        '''Method IDataGraphTAxisProperties.put_AutomaticMaximum

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphTAxisProperties, self).put_AutomaticMaximum(b)
    def get_Minimum(self):
        '''Method IDataGraphTAxisProperties.get_Minimum

           OUTPUT
            var                 : VARIANT*'''
        return super(IDataGraphTAxisProperties, self).get_Minimum()
    def put_Minimum(self, var):
        '''Method IDataGraphTAxisProperties.put_Minimum

           INPUT
            var                 : VARIANT'''
        return super(IDataGraphTAxisProperties, self).put_Minimum(var)
    def get_Maximum(self):
        '''Method IDataGraphTAxisProperties.get_Maximum

           OUTPUT
            var                 : VARIANT*'''
        return super(IDataGraphTAxisProperties, self).get_Maximum()
    def put_Maximum(self, var):
        '''Method IDataGraphTAxisProperties.put_Maximum

           INPUT
            var                 : VARIANT'''
        return super(IDataGraphTAxisProperties, self).put_Maximum(var)
    def get_IsHorizontal(self):
        '''Method IDataGraphTAxisProperties.get_IsHorizontal

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTAxisProperties, self).get_IsHorizontal()
    AutomaticMaximum = property(get_AutomaticMaximum, put_AutomaticMaximum, None)
    AutomaticMinimum = property(get_AutomaticMinimum, put_AutomaticMinimum, None)
    DateTimeFormat = property(get_DateTimeFormat, put_DateTimeFormat, None)
    IsHorizontal = property(get_IsHorizontal, None, None)
    Logarithmic = property(get_Logarithmic, put_Logarithmic, None)
    Maximum = property(get_Maximum, put_Maximum, None)
    Minimum = property(get_Minimum, put_Minimum, None)
    Title = property(get_Title, put_Title, None)
    ValueFormat = property(get_ValueFormat, put_ValueFormat, None)
    Visible = property(get_Visible, put_Visible, None)

class IDataGraphT(_esriCarto.IDataGraphT):
    _IID = uuid.UUID('ccb2226c-6385-4a9e-82f2-2977b2c13ff2')

    def __init__(self, *args, **kw):
        super(IDataGraphT, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HighlightSelection(self):
        '''Method IDataGraphT.get_HighlightSelection

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphT, self).get_HighlightSelection()
    def put_HighlightSelection(self, b):
        '''Method IDataGraphT.put_HighlightSelection

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphT, self).put_HighlightSelection(b)
    def AddSeries(self, seriesType):
        '''Method IDataGraphT.AddSeries

           INPUT
            seriesType          : BSTR

           OUTPUT
            ppSeriesProps       : ISeriesProperties**'''
        return super(IDataGraphT, self).AddSeries(seriesType)
    def RemoveSeries(self, pSeriesProps):
        '''Method IDataGraphT.RemoveSeries

           INPUT
            pSeriesProps        : ISeriesProperties*'''
        return super(IDataGraphT, self).RemoveSeries(pSeriesProps)
    def get_SeriesCount(self):
        '''Method IDataGraphT.get_SeriesCount

           OUTPUT
            pCount              : long*'''
        return super(IDataGraphT, self).get_SeriesCount()
    def get_SeriesProperties(self, iSeries):
        '''Method IDataGraphT.get_SeriesProperties

           INPUT
            iSeries             : long

           OUTPUT
            ppSeriesProps       : ISeriesProperties**'''
        return super(IDataGraphT, self).get_SeriesProperties(iSeries)
    def put_SeriesOrder(self, pSeriesProps, pPos):
        '''Method IDataGraphT.put_SeriesOrder

           INPUTS
            pSeriesProps        : ISeriesProperties*
            pPos                : long'''
        return super(IDataGraphT, self).put_SeriesOrder(pSeriesProps, pPos)
    def get_SeriesOrder(self, pSeriesProps):
        '''Method IDataGraphT.get_SeriesOrder

           INPUT
            pSeriesProps        : ISeriesProperties*

           OUTPUT
            pPos                : long*'''
        return super(IDataGraphT, self).get_SeriesOrder(pSeriesProps)
    def get_GeneralProperties(self):
        '''Method IDataGraphT.get_GeneralProperties

           OUTPUT
            ppGeneralProperties : IDataGraphTGeneralProperties**'''
        return super(IDataGraphT, self).get_GeneralProperties()
    def get_LegendProperties(self):
        '''Method IDataGraphT.get_LegendProperties

           OUTPUT
            ppGeneralProperties : IDataGraphTLegendProperties**'''
        return super(IDataGraphT, self).get_LegendProperties()
    def get_AxisCount(self):
        '''Method IDataGraphT.get_AxisCount

           OUTPUT
            pCount              : long*'''
        return super(IDataGraphT, self).get_AxisCount()
    def get_AxisProperties(self, idx):
        '''Method IDataGraphT.get_AxisProperties

           INPUT
            idx                 : long

           OUTPUT
            ppAxisProperties    : IDataGraphTAxisProperties**'''
        return super(IDataGraphT, self).get_AxisProperties(idx)
    def Identify(self, iSeries, ptX, ptY):
        '''Method IDataGraphT.Identify

           INPUTS
            iSeries             : long
            ptX                 : long
            ptY                 : long

           OUTPUT
            pOIDs               : VARIANT*'''
        return super(IDataGraphT, self).Identify(iSeries, ptX, ptY)
    def Update(self, pCancel):
        '''Method IDataGraphT.Update

           INPUT
            pCancel             : ITrackCancel*'''
        return super(IDataGraphT, self).Update(pCancel)
    def LoadTemplate(self, file):
        '''Method IDataGraphT.LoadTemplate

           INPUT
            file                : BSTR'''
        return super(IDataGraphT, self).LoadTemplate(file)
    def ExportToFileEx(self, Filename, Width, Height):
        '''Method IDataGraphT.ExportToFileEx

           INPUTS
            Filename            : BSTR
            Width               : long
            Height              : long'''
        return super(IDataGraphT, self).ExportToFileEx(Filename, Width, Height)
    def get_Name(self):
        '''Method IDataGraphBase.get_Name (from IDataGraphBase)

           OUTPUT
            pName               : BSTR*'''
        return super(IDataGraphT, self).get_Name()
    def put_Name(self, pName):
        '''Method IDataGraphBase.put_Name (from IDataGraphBase)

           INPUT
            pName               : BSTR'''
        return super(IDataGraphT, self).put_Name(pName)
    def get_UseSelectedSet(self):
        '''Method IDataGraphBase.get_UseSelectedSet (from IDataGraphBase)

           OUTPUT
            pUseSel             : VARIANT_BOOL*'''
        return super(IDataGraphT, self).get_UseSelectedSet()
    def put_UseSelectedSet(self, pUseSel):
        '''Method IDataGraphBase.put_UseSelectedSet (from IDataGraphBase)

           INPUT
            pUseSel             : VARIANT_BOOL'''
        return super(IDataGraphT, self).put_UseSelectedSet(pUseSel)
    def Reload(self):
        '''Method IDataGraphBase.Reload (from IDataGraphBase)'''
        return super(IDataGraphT, self).Reload()
    def DrawToDC(self, hDC, pOutputRect, pGraphRect):
        '''Method IDataGraphBase.DrawToDC (from IDataGraphBase)

           INPUTS
            hDC                 : OLE_HANDLE
            pOutputRect         : tagRECT*
            pGraphRect          : tagRECT*'''
        return super(IDataGraphT, self).DrawToDC(hDC, pOutputRect, pGraphRect)
    def LoadFromFile(self, Filename):
        '''Method IDataGraphBase.LoadFromFile (from IDataGraphBase)

           INPUT
            Filename            : BSTR'''
        return super(IDataGraphT, self).LoadFromFile(Filename)
    def SaveToFile(self, Filename):
        '''Method IDataGraphBase.SaveToFile (from IDataGraphBase)

           INPUT
            Filename            : BSTR'''
        return super(IDataGraphT, self).SaveToFile(Filename)
    def ExportToFile(self, Filename):
        '''Method IDataGraphBase.ExportToFile (from IDataGraphBase)

           INPUT
            Filename            : BSTR'''
        return super(IDataGraphT, self).ExportToFile(Filename)
    def CopyToClipboard(self):
        '''Method IDataGraphBase.CopyToClipboard (from IDataGraphBase)'''
        return super(IDataGraphT, self).CopyToClipboard()
    AxisCount = property(get_AxisCount, None, None)
    GeneralProperties = property(get_GeneralProperties, None, None)
    HighlightSelection = property(get_HighlightSelection, put_HighlightSelection, None)
    LegendProperties = property(get_LegendProperties, None, None)
    Name = property(get_Name, put_Name, None)
    SeriesCount = property(get_SeriesCount, None, None)
    SeriesOrder = property(None, put_SeriesOrder, None)
    UseSelectedSet = property(get_UseSelectedSet, put_UseSelectedSet, None)
    AxisProperties = IndexProperty(get_AxisProperties, None)
    SeriesOrder = IndexProperty(get_SeriesOrder, None)
    SeriesProperties = IndexProperty(get_SeriesProperties, None)

class IDataGraphCollectionEvents(_esriCarto.IDataGraphCollectionEvents):
    _IID = uuid.UUID('d890857b-b1f9-43ea-9b09-e8990f7ba5d7')
    def DataGraphAdded(self, pGraph):
        '''Method IDataGraphCollectionEvents.DataGraphAdded

           INPUT
            pGraph              : IDataGraphBase*'''
        return super(IDataGraphCollectionEvents, self).DataGraphAdded(pGraph)
    def DataGraphRemoved(self, pGraph):
        '''Method IDataGraphCollectionEvents.DataGraphRemoved

           INPUT
            pGraph              : IDataGraphBase*'''
        return super(IDataGraphCollectionEvents, self).DataGraphRemoved(pGraph)
    def DataGraphReset(self):
        '''Method IDataGraphCollectionEvents.DataGraphReset'''
        return super(IDataGraphCollectionEvents, self).DataGraphReset()

class IDataGraphTEvents(_esriCarto.IDataGraphTEvents):
    _IID = uuid.UUID('cd6d8d2c-5fd2-4962-ba04-bb383934efc8')
    def DataGraphTChanged(self, pGraphT, kind):
        '''Method IDataGraphTEvents.DataGraphTChanged

           INPUTS
            pGraphT             : IDataGraphT*
            kind                : BSTR'''
        return super(IDataGraphTEvents, self).DataGraphTChanged(pGraphT, kind)
    def DataGraphTDataSourceEventReceived(self, pGraphT, iSeries, kind):
        '''Method IDataGraphTEvents.DataGraphTDataSourceEventReceived

           INPUTS
            pGraphT             : IDataGraphT*
            iSeries             : long
            kind                : BSTR

           OUTPUT
            bProcessEventInwardly: VARIANT_BOOL*'''
        return super(IDataGraphTEvents, self).DataGraphTDataSourceEventReceived(pGraphT, iSeries, kind)
    def DataGraphTLoadingStatus(self, pGraphT, iSeries, info):
        '''Method IDataGraphTEvents.DataGraphTLoadingStatus

           INPUTS
            pGraphT             : IDataGraphT*
            iSeries             : long
            info                : BSTR

           OUTPUT
            bKeepGoing          : VARIANT_BOOL*'''
        return super(IDataGraphTEvents, self).DataGraphTLoadingStatus(pGraphT, iSeries, info)

class IDataGraphCollection(_esriCarto.IDataGraphCollection):
    _IID = uuid.UUID('5c68acbe-4517-4c11-97a1-e3c7edb0c3bb')
    def get_DataGraphCount(self):
        '''Method IDataGraphCollection.get_DataGraphCount

           OUTPUT
            pCount              : long*'''
        return super(IDataGraphCollection, self).get_DataGraphCount()
    def get_DataGraph(self, Index):
        '''Method IDataGraphCollection.get_DataGraph

           INPUT
            Index               : long

           OUTPUT
            pGraph              : IDataGraphBase**'''
        return super(IDataGraphCollection, self).get_DataGraph(Index)
    def RemoveDataGraph(self, graph):
        '''Method IDataGraphCollection.RemoveDataGraph

           INPUT
            graph               : IDataGraphBase*'''
        return super(IDataGraphCollection, self).RemoveDataGraph(graph)
    def AddDataGraph(self, graph):
        '''Method IDataGraphCollection.AddDataGraph

           INPUT
            graph               : IDataGraphBase*'''
        return super(IDataGraphCollection, self).AddDataGraph(graph)
    def RemoveAllDataGraphs(self):
        '''Method IDataGraphCollection.RemoveAllDataGraphs'''
        return super(IDataGraphCollection, self).RemoveAllDataGraphs()
    DataGraphCount = property(get_DataGraphCount, None, None)
    DataGraph = IndexProperty(get_DataGraph, None)

class IDataGraphTSymbolProperties(_esriCarto.IDataGraphTSymbolProperties):
    _IID = uuid.UUID('70369858-a2a3-49b5-b9e8-e7cb9cf2ffc4')

    def __init__(self, *args, **kw):
        super(IDataGraphTSymbolProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method IDataGraphTSymbolProperties.get_Visible

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTSymbolProperties, self).get_Visible()
    def put_Visible(self, b):
        '''Method IDataGraphTSymbolProperties.put_Visible

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDataGraphTSymbolProperties, self).put_Visible(b)
    def get_Width(self):
        '''Method IDataGraphTSymbolProperties.get_Width

           OUTPUT
            pWidth              : long*'''
        return super(IDataGraphTSymbolProperties, self).get_Width()
    def put_Width(self, pWidth):
        '''Method IDataGraphTSymbolProperties.put_Width

           INPUT
            pWidth              : long'''
        return super(IDataGraphTSymbolProperties, self).put_Width(pWidth)
    def get_Height(self):
        '''Method IDataGraphTSymbolProperties.get_Height

           OUTPUT
            pHeight             : long*'''
        return super(IDataGraphTSymbolProperties, self).get_Height()
    def put_Height(self, pHeight):
        '''Method IDataGraphTSymbolProperties.put_Height

           INPUT
            pHeight             : long'''
        return super(IDataGraphTSymbolProperties, self).put_Height(pHeight)
    def get_Style(self):
        '''Method IDataGraphTSymbolProperties.get_Style

           OUTPUT
            pStyle              : esriDataGraphTSymbolType*'''
        return super(IDataGraphTSymbolProperties, self).get_Style()
    def put_Style(self, pStyle):
        '''Method IDataGraphTSymbolProperties.put_Style

           INPUT
            pStyle              : esriDataGraphTSymbolType'''
        return super(IDataGraphTSymbolProperties, self).put_Style(pStyle)
    def get_Color(self):
        '''Method IDataGraphTSymbolProperties.get_Color

           OUTPUT
            pColor              : OLE_COLOR*'''
        return super(IDataGraphTSymbolProperties, self).get_Color()
    def put_Color(self, pColor):
        '''Method IDataGraphTSymbolProperties.put_Color

           INPUT
            pColor              : OLE_COLOR'''
        return super(IDataGraphTSymbolProperties, self).put_Color(pColor)
    def get_BorderProperties(self):
        '''Method IDataGraphTSymbolProperties.get_BorderProperties

           OUTPUT
            ppPenProps          : IDataGraphTPenProperties**'''
        return super(IDataGraphTSymbolProperties, self).get_BorderProperties()
    BorderProperties = property(get_BorderProperties, None, None)
    Color = property(get_Color, put_Color, None)
    Height = property(get_Height, put_Height, None)
    Style = property(get_Style, put_Style, None)
    Visible = property(get_Visible, put_Visible, None)
    Width = property(get_Width, put_Width, None)

class IBarSeriesProperties(_esriCarto.IBarSeriesProperties):
    _IID = uuid.UUID('f888d1fd-e470-4534-9bd6-f00282e0ab15')

    def __init__(self, *args, **kw):
        super(IBarSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BarStyle(self):
        '''Method IBarSeriesProperties.get_BarStyle

           OUTPUT
            Style               : esriBarStyle*'''
        return super(IBarSeriesProperties, self).get_BarStyle()
    def put_BarStyle(self, Style):
        '''Method IBarSeriesProperties.put_BarStyle

           INPUT
            Style               : esriBarStyle'''
        return super(IBarSeriesProperties, self).put_BarStyle(Style)
    def get_MultipleBarType(self):
        '''Method IBarSeriesProperties.get_MultipleBarType

           OUTPUT
            Type                : esriMultiBarType*'''
        return super(IBarSeriesProperties, self).get_MultipleBarType()
    def put_MultipleBarType(self, Type):
        '''Method IBarSeriesProperties.put_MultipleBarType

           INPUT
            Type                : esriMultiBarType'''
        return super(IBarSeriesProperties, self).put_MultipleBarType(Type)
    def get_BarSize(self):
        '''Method IBarSeriesProperties.get_BarSize

           OUTPUT
            percent             : long*'''
        return super(IBarSeriesProperties, self).get_BarSize()
    def put_BarSize(self, percent):
        '''Method IBarSeriesProperties.put_BarSize

           INPUT
            percent             : long'''
        return super(IBarSeriesProperties, self).put_BarSize(percent)
    BarSize = property(get_BarSize, put_BarSize, None)
    BarStyle = property(get_BarStyle, put_BarStyle, None)
    MultipleBarType = property(get_MultipleBarType, put_MultipleBarType, None)

class IPointSeriesProperties(_esriCarto.IPointSeriesProperties):
    _IID = uuid.UUID('55963816-2577-48af-b595-a66bc27fe57b')
    def get_SymbolProperties(self):
        '''Method IPointSeriesProperties.get_SymbolProperties

           OUTPUT
            ppSymbolProps       : IDataGraphTSymbolProperties**'''
        return super(IPointSeriesProperties, self).get_SymbolProperties()
    SymbolProperties = property(get_SymbolProperties, None, None)

class IHistogramSeriesProperties(_esriCarto.IHistogramSeriesProperties):
    _IID = uuid.UUID('a7a7c47d-7b09-47d0-b334-12079a3427b8')

    def __init__(self, *args, **kw):
        super(IHistogramSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LinesPenProperties(self):
        '''Method IHistogramSeriesProperties.get_LinesPenProperties

           OUTPUT
            ppPenProps          : IDataGraphTPenProperties**'''
        return super(IHistogramSeriesProperties, self).get_LinesPenProperties()
    def get_BinCount(self):
        '''Method IHistogramSeriesProperties.get_BinCount

           OUTPUT
            Count               : long*'''
        return super(IHistogramSeriesProperties, self).get_BinCount()
    def put_BinCount(self, Count):
        '''Method IHistogramSeriesProperties.put_BinCount

           INPUT
            Count               : long'''
        return super(IHistogramSeriesProperties, self).put_BinCount(Count)
    def get_Transparency(self):
        '''Method IHistogramSeriesProperties.get_Transparency

           OUTPUT
            Level               : long*'''
        return super(IHistogramSeriesProperties, self).get_Transparency()
    def put_Transparency(self, Level):
        '''Method IHistogramSeriesProperties.put_Transparency

           INPUT
            Level               : long'''
        return super(IHistogramSeriesProperties, self).put_Transparency(Level)
    BinCount = property(get_BinCount, put_BinCount, None)
    LinesPenProperties = property(get_LinesPenProperties, None, None)
    Transparency = property(get_Transparency, put_Transparency, None)

class IBoxPlotSeriesProperties(_esriCarto.IBoxPlotSeriesProperties):
    _IID = uuid.UUID('781b11e1-e0d6-466d-b431-9764d233a188')

    def __init__(self, *args, **kw):
        super(IBoxPlotSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_WhiskerLength(self):
        '''Method IBoxPlotSeriesProperties.get_WhiskerLength

           OUTPUT
            Length              : double*'''
        return super(IBoxPlotSeriesProperties, self).get_WhiskerLength()
    def put_WhiskerLength(self, Length):
        '''Method IBoxPlotSeriesProperties.put_WhiskerLength

           INPUT
            Length              : double'''
        return super(IBoxPlotSeriesProperties, self).put_WhiskerLength(Length)
    def get_BoxProperties(self):
        '''Method IBoxPlotSeriesProperties.get_BoxProperties

           OUTPUT
            ppSymbolProps       : IDataGraphTSymbolProperties**'''
        return super(IBoxPlotSeriesProperties, self).get_BoxProperties()
    def get_WhiskerProperties(self):
        '''Method IBoxPlotSeriesProperties.get_WhiskerProperties

           OUTPUT
            ppPenProps          : IDataGraphTPenProperties**'''
        return super(IBoxPlotSeriesProperties, self).get_WhiskerProperties()
    def get_MildOutlierProperties(self):
        '''Method IBoxPlotSeriesProperties.get_MildOutlierProperties

           OUTPUT
            ppSymbolProps       : IDataGraphTSymbolProperties**'''
        return super(IBoxPlotSeriesProperties, self).get_MildOutlierProperties()
    def get_ExtremeOutlierProperties(self):
        '''Method IBoxPlotSeriesProperties.get_ExtremeOutlierProperties

           OUTPUT
            ppSymbolProps       : IDataGraphTSymbolProperties**'''
        return super(IBoxPlotSeriesProperties, self).get_ExtremeOutlierProperties()
    BoxProperties = property(get_BoxProperties, None, None)
    ExtremeOutlierProperties = property(get_ExtremeOutlierProperties, None, None)
    MildOutlierProperties = property(get_MildOutlierProperties, None, None)
    WhiskerLength = property(get_WhiskerLength, put_WhiskerLength, None)
    WhiskerProperties = property(get_WhiskerProperties, None, None)

class IPieSeriesProperties(_esriCarto.IPieSeriesProperties):
    _IID = uuid.UUID('ad7a0f73-12a2-4bac-befd-2c65a571d13c')

    def __init__(self, *args, **kw):
        super(IPieSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExplodeBiggestSlice(self):
        '''Method IPieSeriesProperties.get_ExplodeBiggestSlice

           OUTPUT
            amount              : long*'''
        return super(IPieSeriesProperties, self).get_ExplodeBiggestSlice()
    def put_ExplodeBiggestSlice(self, amount):
        '''Method IPieSeriesProperties.put_ExplodeBiggestSlice

           INPUT
            amount              : long'''
        return super(IPieSeriesProperties, self).put_ExplodeBiggestSlice(amount)
    def get_TotalPieAngle(self):
        '''Method IPieSeriesProperties.get_TotalPieAngle

           OUTPUT
            degree              : long*'''
        return super(IPieSeriesProperties, self).get_TotalPieAngle()
    def put_TotalPieAngle(self, degree):
        '''Method IPieSeriesProperties.put_TotalPieAngle

           INPUT
            degree              : long'''
        return super(IPieSeriesProperties, self).put_TotalPieAngle(degree)
    def get_RotatePie(self):
        '''Method IPieSeriesProperties.get_RotatePie

           OUTPUT
            degree              : long*'''
        return super(IPieSeriesProperties, self).get_RotatePie()
    def put_RotatePie(self, degree):
        '''Method IPieSeriesProperties.put_RotatePie

           INPUT
            degree              : long'''
        return super(IPieSeriesProperties, self).put_RotatePie(degree)
    ExplodeBiggestSlice = property(get_ExplodeBiggestSlice, put_ExplodeBiggestSlice, None)
    RotatePie = property(get_RotatePie, put_RotatePie, None)
    TotalPieAngle = property(get_TotalPieAngle, put_TotalPieAngle, None)

class IAreaSeriesProperties(_esriCarto.IAreaSeriesProperties):
    _IID = uuid.UUID('11dc96fc-533a-4d13-8c0f-564801bf00a8')

    def __init__(self, *args, **kw):
        super(IAreaSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MultipleAreaType(self):
        '''Method IAreaSeriesProperties.get_MultipleAreaType

           OUTPUT
            Type                : esriMultiAreaType*'''
        return super(IAreaSeriesProperties, self).get_MultipleAreaType()
    def put_MultipleAreaType(self, Type):
        '''Method IAreaSeriesProperties.put_MultipleAreaType

           INPUT
            Type                : esriMultiAreaType'''
        return super(IAreaSeriesProperties, self).put_MultipleAreaType(Type)
    def get_Stairs(self):
        '''Method IAreaSeriesProperties.get_Stairs

           OUTPUT
            bStairs             : VARIANT_BOOL*'''
        return super(IAreaSeriesProperties, self).get_Stairs()
    def put_Stairs(self, bStairs):
        '''Method IAreaSeriesProperties.put_Stairs

           INPUT
            bStairs             : VARIANT_BOOL'''
        return super(IAreaSeriesProperties, self).put_Stairs(bStairs)
    def get_Transparency(self):
        '''Method IAreaSeriesProperties.get_Transparency

           OUTPUT
            pValue              : long*'''
        return super(IAreaSeriesProperties, self).get_Transparency()
    def put_Transparency(self, pValue):
        '''Method IAreaSeriesProperties.put_Transparency

           INPUT
            pValue              : long'''
        return super(IAreaSeriesProperties, self).put_Transparency(pValue)
    def get_StairsInvert(self):
        '''Method IAreaSeriesProperties.get_StairsInvert

           OUTPUT
            bInvert             : VARIANT_BOOL*'''
        return super(IAreaSeriesProperties, self).get_StairsInvert()
    def put_StairsInvert(self, bInvert):
        '''Method IAreaSeriesProperties.put_StairsInvert

           INPUT
            bInvert             : VARIANT_BOOL'''
        return super(IAreaSeriesProperties, self).put_StairsInvert(bInvert)
    MultipleAreaType = property(get_MultipleAreaType, put_MultipleAreaType, None)
    Stairs = property(get_Stairs, put_Stairs, None)
    StairsInvert = property(get_StairsInvert, put_StairsInvert, None)
    Transparency = property(get_Transparency, put_Transparency, None)

class ILineSeriesProperties(_esriCarto.ILineSeriesProperties):
    _IID = uuid.UUID('9ebd4ef8-aa1d-40a6-871e-c5cff1a6ce54')

    def __init__(self, *args, **kw):
        super(ILineSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Stairs(self):
        '''Method ILineSeriesProperties.get_Stairs

           OUTPUT
            bStairs             : VARIANT_BOOL*'''
        return super(ILineSeriesProperties, self).get_Stairs()
    def put_Stairs(self, bStairs):
        '''Method ILineSeriesProperties.put_Stairs

           INPUT
            bStairs             : VARIANT_BOOL'''
        return super(ILineSeriesProperties, self).put_Stairs(bStairs)
    def get_StairsInvert(self):
        '''Method ILineSeriesProperties.get_StairsInvert

           OUTPUT
            bInvert             : VARIANT_BOOL*'''
        return super(ILineSeriesProperties, self).get_StairsInvert()
    def put_StairsInvert(self, bInvert):
        '''Method ILineSeriesProperties.put_StairsInvert

           INPUT
            bInvert             : VARIANT_BOOL'''
        return super(ILineSeriesProperties, self).put_StairsInvert(bInvert)
    def get_SymbolProperties(self):
        '''Method ILineSeriesProperties.get_SymbolProperties

           OUTPUT
            ppSymbolProps       : IDataGraphTSymbolProperties**'''
        return super(ILineSeriesProperties, self).get_SymbolProperties()
    Stairs = property(get_Stairs, put_Stairs, None)
    StairsInvert = property(get_StairsInvert, put_StairsInvert, None)
    SymbolProperties = property(get_SymbolProperties, None, None)

class IFunctionSeriesProperties(_esriCarto.IFunctionSeriesProperties):
    _IID = uuid.UUID('ad0c7cdf-ea5a-4ab4-be7c-220fae0b299c')

    def __init__(self, *args, **kw):
        super(IFunctionSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ChangeFunctionType(self, newType):
        '''Method IFunctionSeriesProperties.ChangeFunctionType

           INPUT
            newType             : BSTR'''
        return super(IFunctionSeriesProperties, self).ChangeFunctionType(newType)
    def put_Property(self, Name, pVal):
        '''Method IFunctionSeriesProperties.put_Property

           INPUTS
            Name                : BSTR
            pVal                : VARIANT'''
        return super(IFunctionSeriesProperties, self).put_Property(Name, pVal)
    def get_Property(self, Name):
        '''Method IFunctionSeriesProperties.get_Property

           INPUT
            Name                : BSTR

           OUTPUT
            pVal                : VARIANT*'''
        return super(IFunctionSeriesProperties, self).get_Property(Name)
    Property = property(None, put_Property, None)
    Property = IndexProperty(get_Property, None)

class IBubbleSeriesProperties(_esriCarto.IBubbleSeriesProperties):
    _IID = uuid.UUID('5f6a90cb-4cb1-4799-acd8-8baae27fc2fb')

    def __init__(self, *args, **kw):
        super(IBubbleSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SymbolProperties(self):
        '''Method IBubbleSeriesProperties.get_SymbolProperties

           OUTPUT
            ppSymbolProps       : IDataGraphTSymbolProperties**'''
        return super(IBubbleSeriesProperties, self).get_SymbolProperties()
    def get_Transparency(self):
        '''Method IBubbleSeriesProperties.get_Transparency

           OUTPUT
            pValue              : long*'''
        return super(IBubbleSeriesProperties, self).get_Transparency()
    def put_Transparency(self, pValue):
        '''Method IBubbleSeriesProperties.put_Transparency

           INPUT
            pValue              : long'''
        return super(IBubbleSeriesProperties, self).put_Transparency(pValue)
    def get_NormalizedRadius(self):
        '''Method IBubbleSeriesProperties.get_NormalizedRadius

           OUTPUT
            bNormalized         : VARIANT_BOOL*'''
        return super(IBubbleSeriesProperties, self).get_NormalizedRadius()
    def put_NormalizedRadius(self, bNormalized):
        '''Method IBubbleSeriesProperties.put_NormalizedRadius

           INPUT
            bNormalized         : VARIANT_BOOL'''
        return super(IBubbleSeriesProperties, self).put_NormalizedRadius(bNormalized)
    def SetNormalizedRadiusMinMax(self, minval, maxval):
        '''Method IBubbleSeriesProperties.SetNormalizedRadiusMinMax

           INPUTS
            minval              : double
            maxval              : double'''
        return super(IBubbleSeriesProperties, self).SetNormalizedRadiusMinMax(minval, maxval)
    def GetNormalizedRadiusMinMax(self):
        '''Method IBubbleSeriesProperties.GetNormalizedRadiusMinMax

           OUTPUTS
            minval              : double*
            maxval              : double*'''
        return super(IBubbleSeriesProperties, self).GetNormalizedRadiusMinMax()
    NormalizedRadius = property(get_NormalizedRadius, put_NormalizedRadius, None)
    SymbolProperties = property(get_SymbolProperties, None, None)
    Transparency = property(get_Transparency, put_Transparency, None)

class IPolarSeriesProperties(_esriCarto.IPolarSeriesProperties):
    _IID = uuid.UUID('7a761088-7684-4545-a553-2edde236194d')

    def __init__(self, *args, **kw):
        super(IPolarSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SymbolProperties(self):
        '''Method IPolarSeriesProperties.get_SymbolProperties

           OUTPUT
            ppSymbolProps       : IDataGraphTSymbolProperties**'''
        return super(IPolarSeriesProperties, self).get_SymbolProperties()
    def get_Transparency(self):
        '''Method IPolarSeriesProperties.get_Transparency

           OUTPUT
            pValue              : long*'''
        return super(IPolarSeriesProperties, self).get_Transparency()
    def put_Transparency(self, pValue):
        '''Method IPolarSeriesProperties.put_Transparency

           INPUT
            pValue              : long'''
        return super(IPolarSeriesProperties, self).put_Transparency(pValue)
    def put_Circled(self, b):
        '''Method IPolarSeriesProperties.put_Circled

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IPolarSeriesProperties, self).put_Circled(b)
    def get_Circled(self):
        '''Method IPolarSeriesProperties.get_Circled

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IPolarSeriesProperties, self).get_Circled()
    def put_CircleClosed(self, b):
        '''Method IPolarSeriesProperties.put_CircleClosed

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IPolarSeriesProperties, self).put_CircleClosed(b)
    def get_CircleClosed(self):
        '''Method IPolarSeriesProperties.get_CircleClosed

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IPolarSeriesProperties, self).get_CircleClosed()
    CircleClosed = property(get_CircleClosed, put_CircleClosed, None)
    Circled = property(get_Circled, put_Circled, None)
    SymbolProperties = property(get_SymbolProperties, None, None)
    Transparency = property(get_Transparency, put_Transparency, None)

class IDataSortSeriesProperties(_esriCarto.IDataSortSeriesProperties):
    _IID = uuid.UUID('e4a4f9cf-c407-4c30-943f-1bbc23f728cf')
    def AddSortingField(self, strField, bAscending):
        '''Method IDataSortSeriesProperties.AddSortingField

           INPUTS
            strField            : BSTR
            bAscending          : VARIANT_BOOL

           OUTPUT
            idx                 : long*'''
        return super(IDataSortSeriesProperties, self).AddSortingField(strField, bAscending)
    def GetSortingField(self, idx):
        '''Method IDataSortSeriesProperties.GetSortingField

           INPUT
            idx                 : long

           OUTPUTS
            strField            : BSTR*
            bAscending          : VARIANT_BOOL*'''
        return super(IDataSortSeriesProperties, self).GetSortingField(idx)
    def RemoveSortingField(self, idx):
        '''Method IDataSortSeriesProperties.RemoveSortingField

           INPUT
            idx                 : long'''
        return super(IDataSortSeriesProperties, self).RemoveSortingField(idx)
    def get_SortingFieldsCount(self):
        '''Method IDataSortSeriesProperties.get_SortingFieldsCount

           OUTPUT
            Count               : long*'''
        return super(IDataSortSeriesProperties, self).get_SortingFieldsCount()
    SortingFieldsCount = property(get_SortingFieldsCount, None, None)

class IDataGroupSeriesProperties(_esriCarto.IDataGroupSeriesProperties):
    _IID = uuid.UUID('7b25b19e-035c-4209-abbc-346b642d69bc')
    def AddGroupField(self, strField):
        '''Method IDataGroupSeriesProperties.AddGroupField

           INPUT
            strField            : BSTR

           OUTPUT
            idx                 : long*'''
        return super(IDataGroupSeriesProperties, self).AddGroupField(strField)
    def GetGroupField(self, idx):
        '''Method IDataGroupSeriesProperties.GetGroupField

           INPUT
            idx                 : long

           OUTPUT
            strField            : BSTR*'''
        return super(IDataGroupSeriesProperties, self).GetGroupField(idx)
    def RemoveGroupField(self, idx):
        '''Method IDataGroupSeriesProperties.RemoveGroupField

           INPUT
            idx                 : long'''
        return super(IDataGroupSeriesProperties, self).RemoveGroupField(idx)
    def get_GroupFieldsCount(self):
        '''Method IDataGroupSeriesProperties.get_GroupFieldsCount

           OUTPUT
            Count               : long*'''
        return super(IDataGroupSeriesProperties, self).get_GroupFieldsCount()
    GroupFieldsCount = property(get_GroupFieldsCount, None, None)

class IScatterPlotMatrixSeriesProperties(_esriCarto.IScatterPlotMatrixSeriesProperties):
    _IID = uuid.UUID('02ce9eaa-0f3f-4527-b2f1-8617871bf68d')

    def __init__(self, *args, **kw):
        super(IScatterPlotMatrixSeriesProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SetFieldLabel(self, idx, Label):
        '''Method IScatterPlotMatrixSeriesProperties.SetFieldLabel

           INPUTS
            idx                 : long
            Label               : BSTR'''
        return super(IScatterPlotMatrixSeriesProperties, self).SetFieldLabel(idx, Label)
    def GetFieldLabel(self, idx, Label):
        '''Method IScatterPlotMatrixSeriesProperties.GetFieldLabel

           INPUTS
            idx                 : long
            Label               : BSTR*'''
        return super(IScatterPlotMatrixSeriesProperties, self).GetFieldLabel(idx, Label)
    def get_ShowHistogram(self):
        '''Method IScatterPlotMatrixSeriesProperties.get_ShowHistogram

           OUTPUT
            bHist               : VARIANT_BOOL*'''
        return super(IScatterPlotMatrixSeriesProperties, self).get_ShowHistogram()
    def put_ShowHistogram(self, bHist):
        '''Method IScatterPlotMatrixSeriesProperties.put_ShowHistogram

           INPUT
            bHist               : VARIANT_BOOL'''
        return super(IScatterPlotMatrixSeriesProperties, self).put_ShowHistogram(bHist)
    def get_HistogramColor(self):
        '''Method IScatterPlotMatrixSeriesProperties.get_HistogramColor

           OUTPUT
            pColor              : OLE_COLOR*'''
        return super(IScatterPlotMatrixSeriesProperties, self).get_HistogramColor()
    def put_HistogramColor(self, pColor):
        '''Method IScatterPlotMatrixSeriesProperties.put_HistogramColor

           INPUT
            pColor              : OLE_COLOR'''
        return super(IScatterPlotMatrixSeriesProperties, self).put_HistogramColor(pColor)
    HistogramColor = property(get_HistogramColor, put_HistogramColor, None)
    ShowHistogram = property(get_ShowHistogram, put_ShowHistogram, None)

class IDataGraphTPrivate(_esriCarto.IDataGraphTPrivate):
    _IID = uuid.UUID('7cca3006-fea6-4b9b-98cf-9bc00196ef29')
    def get_Internal(self, ppTChart):
        '''Method IDataGraphTPrivate.get_Internal

           INPUT
            ppTChart            : IUnknown**'''
        return super(IDataGraphTPrivate, self).get_Internal(ppTChart)
    def SelectByRect(self, bAdd, Left, top, Right, bottom):
        '''Method IDataGraphTPrivate.SelectByRect

           INPUTS
            bAdd                : VARIANT_BOOL
            Left                : long
            top                 : long
            Right               : long
            bottom              : long'''
        return super(IDataGraphTPrivate, self).SelectByRect(bAdd, Left, top, Right, bottom)
    def Property(self, Name, val):
        '''Method IDataGraphTPrivate.Property

           INPUTS
            Name                : BSTR
            val                 : VARIANT*'''
        return super(IDataGraphTPrivate, self).Property(Name, val)
    def ReplaceSourceData(self, idx, var):
        '''Method IDataGraphTPrivate.ReplaceSourceData

           INPUTS
            idx                 : long
            var                 : VARIANT'''
        return super(IDataGraphTPrivate, self).ReplaceSourceData(idx, var)

class IDataGraphTElement(_esriCarto.IDataGraphTElement):
    _IID = uuid.UUID('3016e57e-470b-4a6f-825d-7b8d40ba39c7')

    def __init__(self, *args, **kw):
        super(IDataGraphTElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DataGraphT(self, pDataGraphT):
        '''Method IDataGraphTElement.putref_DataGraphT

           INPUT
            pDataGraphT         : IDataGraphT*'''
        return super(IDataGraphTElement, self).putref_DataGraphT(pDataGraphT)
    def get_DataGraphT(self):
        '''Method IDataGraphTElement.get_DataGraphT

           OUTPUT
            pDataGraphT         : IDataGraphT**'''
        return super(IDataGraphTElement, self).get_DataGraphT()
    def get_IsDataSourceConnected(self):
        '''Method IDataGraphTElement.get_IsDataSourceConnected

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDataGraphTElement, self).get_IsDataSourceConnected()
    def RemoveDataSourceConnection(self):
        '''Method IDataGraphTElement.RemoveDataSourceConnection'''
        return super(IDataGraphTElement, self).RemoveDataSourceConnection()
    DataGraphT = property(get_DataGraphT, putref_DataGraphT, None)
    IsDataSourceConnected = property(get_IsDataSourceConnected, None, None)

class IParameterInfo(_esriCarto.IParameterInfo):
    _IID = uuid.UUID('82f99956-a431-4a70-b460-772ac1203fa7')

    def __init__(self, *args, **kw):
        super(IParameterInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ParameterCount(self):
        '''Method IParameterInfo.get_ParameterCount

           OUTPUT
            pCount              : long*'''
        return super(IParameterInfo, self).get_ParameterCount()
    def get_Name(self, indexParam):
        '''Method IParameterInfo.get_Name

           INPUT
            indexParam          : long

           OUTPUT
            pName               : BSTR*'''
        return super(IParameterInfo, self).get_Name(indexParam)
    def get_Label(self, indexParam):
        '''Method IParameterInfo.get_Label

           INPUT
            indexParam          : long

           OUTPUT
            pLabel              : BSTR*'''
        return super(IParameterInfo, self).get_Label(indexParam)
    def get_DataType(self, indexParam):
        '''Method IParameterInfo.get_DataType

           INPUT
            indexParam          : long

           OUTPUT
            ppGPDataType        : IGPDataType**'''
        return super(IParameterInfo, self).get_DataType(indexParam)
    def get_Domain(self, indexParam):
        '''Method IParameterInfo.get_Domain

           INPUT
            indexParam          : long

           OUTPUT
            ppGPDomain          : IGPDomain**'''
        return super(IParameterInfo, self).get_Domain(indexParam)
    def get_Dependency(self, indexParam):
        '''Method IParameterInfo.get_Dependency

           INPUT
            indexParam          : long

           OUTPUT
            pIndexDependency    : long*'''
        return super(IParameterInfo, self).get_Dependency(indexParam)
    def get_Optional(self, indexParam):
        '''Method IParameterInfo.get_Optional

           INPUT
            indexParam          : long

           OUTPUT
            pOptional           : VARIANT_BOOL*'''
        return super(IParameterInfo, self).get_Optional(indexParam)
    def get_Value(self, indexParam):
        '''Method IParameterInfo.get_Value

           INPUT
            indexParam          : long

           OUTPUT
            ppGPValue           : IGPValue**'''
        return super(IParameterInfo, self).get_Value(indexParam)
    def put_Value(self, indexParam, ppGPValue):
        '''Method IParameterInfo.put_Value

           INPUTS
            indexParam          : long
            ppGPValue           : IGPValue*'''
        return super(IParameterInfo, self).put_Value(indexParam, ppGPValue)
    def get_ObjectType(self):
        '''Method IParameterInfo.get_ObjectType

           OUTPUT
            pObjectTypeName     : BSTR*'''
        return super(IParameterInfo, self).get_ObjectType()
    def get_ObjectSubType(self):
        '''Method IParameterInfo.get_ObjectSubType

           OUTPUT
            pObjectSubTypeName  : BSTR*'''
        return super(IParameterInfo, self).get_ObjectSubType()
    def get_ObjectLabel(self):
        '''Method IParameterInfo.get_ObjectLabel

           OUTPUT
            pObjectLabel        : BSTR*'''
        return super(IParameterInfo, self).get_ObjectLabel()
    ObjectLabel = property(get_ObjectLabel, None, None)
    ObjectSubType = property(get_ObjectSubType, None, None)
    ObjectType = property(get_ObjectType, None, None)
    ParameterCount = property(get_ParameterCount, None, None)
    Value = property(None, put_Value, None)
    DataType = IndexProperty(get_DataType, None)
    Dependency = IndexProperty(get_Dependency, None)
    Domain = IndexProperty(get_Domain, None)
    Label = IndexProperty(get_Label, None)
    Name = IndexProperty(get_Name, None)
    Optional = IndexProperty(get_Optional, None)
    Value = IndexProperty(get_Value, None)

class ICadastralFabricLayer(_esriCarto.ICadastralFabricLayer):
    _IID = uuid.UUID('7f1ab670-5ca9-44d1-b42d-12aa868fc757')

    def __init__(self, *args, **kw):
        super(ICadastralFabricLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_CadastralFabric(self, CadastralFabric):
        '''Method ICadastralFabricLayer.putref_CadastralFabric

           INPUT
            CadastralFabric     : ICadastralFabric*'''
        return super(ICadastralFabricLayer, self).putref_CadastralFabric(CadastralFabric)
    def get_CadastralFabric(self):
        '''Method ICadastralFabricLayer.get_CadastralFabric

           OUTPUT
            CadastralFabric     : ICadastralFabric**'''
        return super(ICadastralFabricLayer, self).get_CadastralFabric()
    def SearchCadastralFeatures(self, queryFilter, CadastralFeature):
        '''Method ICadastralFabricLayer.SearchCadastralFeatures

           INPUTS
            queryFilter         : IQueryFilter*
            CadastralFeature    : esriCadastralFeature

           OUTPUT
            FeatureIDSet        : IFeatureIDSet**'''
        return super(ICadastralFabricLayer, self).SearchCadastralFeatures(queryFilter, CadastralFeature)
    def get_CadastralSubLayer(self, LayerType):
        '''Method ICadastralFabricLayer.get_CadastralSubLayer

           INPUT
            LayerType           : esriCadastralFabricRenderer

           OUTPUT
            ppLayer             : IFeatureLayer**'''
        return super(ICadastralFabricLayer, self).get_CadastralSubLayer(LayerType)
    CadastralFabric = property(get_CadastralFabric, putref_CadastralFabric, None)
    CadastralSubLayer = IndexProperty(get_CadastralSubLayer, None)

class ICadastralFabricParcelLayer(_esriCarto.ICadastralFabricParcelLayer):
    _IID = uuid.UUID('78f0990c-babc-4105-b232-f4c1c7d0f44e')
    def get_ParcelCount(self):
        '''Method ICadastralFabricParcelLayer.get_ParcelCount

           OUTPUT
            Count               : long*'''
        return super(ICadastralFabricParcelLayer, self).get_ParcelCount()
    def get_ParcelSubLayer(self, Layer):
        '''Method ICadastralFabricParcelLayer.get_ParcelSubLayer

           INPUT
            Layer               : long

           OUTPUT
            ppLayer             : IFeatureLayer**'''
        return super(ICadastralFabricParcelLayer, self).get_ParcelSubLayer(Layer)
    ParcelCount = property(get_ParcelCount, None, None)
    ParcelSubLayer = IndexProperty(get_ParcelSubLayer, None)

class ICFDataSourcePageExtension(_esriCarto.ICFDataSourcePageExtension):
    _IID = uuid.UUID('8b3c1ebb-07bf-4b1a-90f5-917e2b572ca5')

    def __init__(self, *args, **kw):
        super(ICFDataSourcePageExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DataSourceReadOnly(self):
        '''Method ICFDataSourcePageExtension.get_DataSourceReadOnly

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ICFDataSourcePageExtension, self).get_DataSourceReadOnly()
    def put_DataSourceReadOnly(self, flag):
        '''Method ICFDataSourcePageExtension.put_DataSourceReadOnly

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ICFDataSourcePageExtension, self).put_DataSourceReadOnly(flag)
    DataSourceReadOnly = property(get_DataSourceReadOnly, put_DataSourceReadOnly, None)

class ICadastralFabricLayerEvents(_esriCarto.ICadastralFabricLayerEvents):
    _IID = uuid.UUID('d5947891-c579-4163-892f-8c9b35e1ec37')
    def CadastralSelectionChanged(self):
        '''Method ICadastralFabricLayerEvents.CadastralSelectionChanged'''
        return super(ICadastralFabricLayerEvents, self).CadastralSelectionChanged()
    def SelectParcelsChanged(self, eCadastralParcelType):
        '''Method ICadastralFabricLayerEvents.SelectParcelsChanged

           INPUT
            eCadastralParcelType: esriCadastralParcelType'''
        return super(ICadastralFabricLayerEvents, self).SelectParcelsChanged(eCadastralParcelType)
    def SelectControlPointsChanged(self):
        '''Method ICadastralFabricLayerEvents.SelectControlPointsChanged'''
        return super(ICadastralFabricLayerEvents, self).SelectControlPointsChanged()

class ICadastralFabricSelection(_esriCarto.ICadastralFabricSelection):
    _IID = uuid.UUID('4f28703c-e2b3-4ef8-919c-34c90059d507')

    def __init__(self, *args, **kw):
        super(ICadastralFabricSelection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SelectCadastralFeatures(self, queryFilter, CadastralFeature, XORToExistingSelection):
        '''Method ICadastralFabricSelection.SelectCadastralFeatures

           INPUTS
            queryFilter         : IQueryFilter*
            CadastralFeature    : esriCadastralFeature
            XORToExistingSelection: VARIANT_BOOL'''
        return super(ICadastralFabricSelection, self).SelectCadastralFeatures(queryFilter, CadastralFeature, XORToExistingSelection)
    def ClearSelection(self, CadastralFeature):
        '''Method ICadastralFabricSelection.ClearSelection

           INPUT
            CadastralFeature    : esriCadastralFeature'''
        return super(ICadastralFabricSelection, self).ClearSelection(CadastralFeature)
    def get_ParcelSet(self, ParcelType):
        '''Method ICadastralFabricSelection.get_ParcelSet

           INPUT
            ParcelType          : esriCadastralParcelType

           OUTPUT
            FeatureIDSet        : IFeatureIDSet**'''
        return super(ICadastralFabricSelection, self).get_ParcelSet(ParcelType)
    def put_ParcelSet(self, ParcelType, FeatureIDSet):
        '''Method ICadastralFabricSelection.put_ParcelSet

           INPUTS
            ParcelType          : esriCadastralParcelType
            FeatureIDSet        : IFeatureIDSet*'''
        return super(ICadastralFabricSelection, self).put_ParcelSet(ParcelType, FeatureIDSet)
    def get_ControlPointSet(self):
        '''Method ICadastralFabricSelection.get_ControlPointSet

           OUTPUT
            FeatureIDSet        : IFeatureIDSet**'''
        return super(ICadastralFabricSelection, self).get_ControlPointSet()
    def put_ControlPointSet(self, FeatureIDSet):
        '''Method ICadastralFabricSelection.put_ControlPointSet

           INPUT
            FeatureIDSet        : IFeatureIDSet*'''
        return super(ICadastralFabricSelection, self).put_ControlPointSet(FeatureIDSet)
    def ClearControlPointsInJobList(self):
        '''Method ICadastralFabricSelection.ClearControlPointsInJobList'''
        return super(ICadastralFabricSelection, self).ClearControlPointsInJobList()
    def ClearParcelsInJobList(self, ParcelType):
        '''Method ICadastralFabricSelection.ClearParcelsInJobList

           INPUT
            ParcelType          : esriCadastralParcelType'''
        return super(ICadastralFabricSelection, self).ClearParcelsInJobList(ParcelType)
    def get_ParcelSymbol(self, ParcelType):
        '''Method ICadastralFabricSelection.get_ParcelSymbol

           INPUT
            ParcelType          : esriCadastralParcelType

           OUTPUT
            Symbol              : ISimpleFillSymbol**'''
        return super(ICadastralFabricSelection, self).get_ParcelSymbol(ParcelType)
    def put_ParcelSymbol(self, ParcelType, Symbol):
        '''Method ICadastralFabricSelection.put_ParcelSymbol

           INPUTS
            ParcelType          : esriCadastralParcelType
            Symbol              : ISimpleFillSymbol*'''
        return super(ICadastralFabricSelection, self).put_ParcelSymbol(ParcelType, Symbol)
    def get_ControlPointSymbol(self):
        '''Method ICadastralFabricSelection.get_ControlPointSymbol

           OUTPUT
            Symbol              : ISimpleMarkerSymbol**'''
        return super(ICadastralFabricSelection, self).get_ControlPointSymbol()
    def put_ControlPointSymbol(self, Symbol):
        '''Method ICadastralFabricSelection.put_ControlPointSymbol

           INPUT
            Symbol              : ISimpleMarkerSymbol*'''
        return super(ICadastralFabricSelection, self).put_ControlPointSymbol(Symbol)
    ControlPointSet = property(get_ControlPointSet, put_ControlPointSet, None)
    ControlPointSymbol = property(get_ControlPointSymbol, put_ControlPointSymbol, None)
    ParcelSet = property(None, put_ParcelSet, None)
    ParcelSymbol = property(None, put_ParcelSymbol, None)
    ParcelSet = IndexProperty(get_ParcelSet, None)
    ParcelSymbol = IndexProperty(get_ParcelSymbol, None)

class ICadastralFabricSubLayer(_esriCarto.ICadastralFabricSubLayer):
    _IID = uuid.UUID('ba381f2b-f621-4f45-8f78-101f65b5bbe6')
    def get_CadastralTableType(self):
        '''Method ICadastralFabricSubLayer.get_CadastralTableType

           OUTPUT
            pType               : esriCadastralFabricTable*'''
        return super(ICadastralFabricSubLayer, self).get_CadastralTableType()
    def get_CadastralFabric(self):
        '''Method ICadastralFabricSubLayer.get_CadastralFabric

           OUTPUT
            ppCadastralFabric   : ICadastralFabric**'''
        return super(ICadastralFabricSubLayer, self).get_CadastralFabric()
    CadastralFabric = property(get_CadastralFabric, None, None)
    CadastralTableType = property(get_CadastralTableType, None, None)

class ICadastralFabricSubLayer2(_esriCarto.ICadastralFabricSubLayer2):
    _IID = uuid.UUID('6d4ccaf7-4981-4bff-a019-8f395e69367e')

    def __init__(self, *args, **kw):
        super(ICadastralFabricSubLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Historic(self):
        '''Method ICadastralFabricSubLayer2.get_Historic

           OUTPUT
            Historic            : VARIANT_BOOL*'''
        return super(ICadastralFabricSubLayer2, self).get_Historic()
    def put_Historic(self, Historic):
        '''Method ICadastralFabricSubLayer2.put_Historic

           INPUT
            Historic            : VARIANT_BOOL'''
        return super(ICadastralFabricSubLayer2, self).put_Historic(Historic)
    def get_ParcelLayerType(self):
        '''Method ICadastralFabricSubLayer2.get_ParcelLayerType

           OUTPUT
            eParcelType         : esriCadastralParcelLayerType*'''
        return super(ICadastralFabricSubLayer2, self).get_ParcelLayerType()
    def put_ParcelLayerType(self, eParcelType):
        '''Method ICadastralFabricSubLayer2.put_ParcelLayerType

           INPUT
            eParcelType         : esriCadastralParcelLayerType'''
        return super(ICadastralFabricSubLayer2, self).put_ParcelLayerType(eParcelType)
    def ConnectWithFabric(self, pFabricName):
        '''Method ICadastralFabricSubLayer2.ConnectWithFabric

           INPUT
            pFabricName         : ICadastralFabricName*

           OUTPUT
            pOk                 : VARIANT_BOOL*'''
        return super(ICadastralFabricSubLayer2, self).ConnectWithFabric(pFabricName)
    Historic = property(get_Historic, put_Historic, None)
    ParcelLayerType = property(get_ParcelLayerType, put_ParcelLayerType, None)

class IDynamicLayer(_esriCarto.IDynamicLayer):
    _IID = uuid.UUID('1c68d071-0261-4f0e-9824-20dafd802527')

    def __init__(self, *args, **kw):
        super(IDynamicLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DynamicLayerDirty(self, DynamicDrawPhase):
        '''Method IDynamicLayer.get_DynamicLayerDirty

           INPUT
            DynamicDrawPhase    : esriDynamicDrawPhase

           OUTPUT
            Dirty               : VARIANT_BOOL*'''
        return super(IDynamicLayer, self).get_DynamicLayerDirty(DynamicDrawPhase)
    def put_DynamicLayerDirty(self, DynamicDrawPhase, Dirty):
        '''Method IDynamicLayer.put_DynamicLayerDirty

           INPUTS
            DynamicDrawPhase    : esriDynamicDrawPhase
            Dirty               : VARIANT_BOOL'''
        return super(IDynamicLayer, self).put_DynamicLayerDirty(DynamicDrawPhase, Dirty)
    def get_DynamicRecompileRate(self):
        '''Method IDynamicLayer.get_DynamicRecompileRate

           OUTPUT
            dynamicRecompileRateTimeMS: long*'''
        return super(IDynamicLayer, self).get_DynamicRecompileRate()
    def DrawDynamicLayer(self, DynamicDrawPhase, Display, DynamicDisplay):
        '''Method IDynamicLayer.DrawDynamicLayer

           INPUTS
            DynamicDrawPhase    : esriDynamicDrawPhase
            Display             : IDisplay*
            DynamicDisplay      : IDynamicDisplay*'''
        return super(IDynamicLayer, self).DrawDynamicLayer(DynamicDrawPhase, Display, DynamicDisplay)
    DynamicLayerDirty = property(None, put_DynamicLayerDirty, None)
    DynamicRecompileRate = property(get_DynamicRecompileRate, None, None)
    DynamicLayerDirty = IndexProperty(get_DynamicLayerDirty, None)

class IDynamicLayer2(_esriCarto.IDynamicLayer2):
    _IID = uuid.UUID('8be22356-d39d-4747-a662-8b34b3ff4668')
    def get_ObjectById(self, ID, ILayer):
        '''Method IDynamicLayer2.get_ObjectById

           INPUTS
            ID                  : long
            ILayer              : ILayer*

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IDynamicLayer2, self).get_ObjectById(ID, ILayer)

class IDynamicHit(_esriCarto.IDynamicHit):
    _IID = uuid.UUID('e9a57bd8-bf74-4502-af71-b1de1168a9cc')

    def __init__(self, *args, **kw):
        super(IDynamicHit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Owner(self):
        '''Method IDynamicHit.get_Owner

           OUTPUT
            ppOwner             : IUnknown**'''
        return super(IDynamicHit, self).get_Owner()
    def putref_Owner(self, ppOwner):
        '''Method IDynamicHit.putref_Owner

           INPUT
            ppOwner             : IUnknown*'''
        return super(IDynamicHit, self).putref_Owner(ppOwner)
    def get_Object(self):
        '''Method IDynamicHit.get_Object

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IDynamicHit, self).get_Object()
    def putref_Object(self, ppObject):
        '''Method IDynamicHit.putref_Object

           INPUT
            ppObject            : IUnknown*'''
        return super(IDynamicHit, self).putref_Object(ppObject)
    def get_ParentID(self):
        '''Method IDynamicHit.get_ParentID

           OUTPUT
            ID                  : long*'''
        return super(IDynamicHit, self).get_ParentID()
    def put_ParentID(self, ID):
        '''Method IDynamicHit.put_ParentID

           INPUT
            ID                  : long'''
        return super(IDynamicHit, self).put_ParentID(ID)
    def get_ObjectID(self):
        '''Method IDynamicHit.get_ObjectID

           OUTPUT
            ID                  : long*'''
        return super(IDynamicHit, self).get_ObjectID()
    def put_ObjectID(self, ID):
        '''Method IDynamicHit.put_ObjectID

           INPUT
            ID                  : long'''
        return super(IDynamicHit, self).put_ObjectID(ID)
    def get_NameCount(self):
        '''Method IDynamicHit.get_NameCount

           OUTPUT
            Count               : long*'''
        return super(IDynamicHit, self).get_NameCount()
    def put_NameCount(self, Count):
        '''Method IDynamicHit.put_NameCount

           INPUT
            Count               : long'''
        return super(IDynamicHit, self).put_NameCount(Count)
    NameCount = property(get_NameCount, put_NameCount, None)
    Object = property(get_Object, putref_Object, None)
    ObjectID = property(get_ObjectID, put_ObjectID, None)
    Owner = property(get_Owner, putref_Owner, None)
    ParentID = property(get_ParentID, put_ParentID, None)

class IGeoImageDescription(_esriCarto.IGeoImageDescription):
    _IID = uuid.UUID('03b73b41-d7df-4a25-a1c1-82f126f4d2f3')

    def __init__(self, *args, **kw):
        super(IGeoImageDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method IGeoImageDescription.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGeoImageDescription, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method IGeoImageDescription.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IGeoImageDescription, self).putref_SpatialReference(ppSpatialReference)
    def get_Extent(self):
        '''Method IGeoImageDescription.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGeoImageDescription, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IGeoImageDescription.putref_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IGeoImageDescription, self).putref_Extent(ppExtent)
    def get_Width(self):
        '''Method IGeoImageDescription.get_Width

           OUTPUT
            pNumCols            : long*'''
        return super(IGeoImageDescription, self).get_Width()
    def put_Width(self, pNumCols):
        '''Method IGeoImageDescription.put_Width

           INPUT
            pNumCols            : long'''
        return super(IGeoImageDescription, self).put_Width(pNumCols)
    def get_Height(self):
        '''Method IGeoImageDescription.get_Height

           OUTPUT
            pNumRows            : long*'''
        return super(IGeoImageDescription, self).get_Height()
    def put_Height(self, pNumRows):
        '''Method IGeoImageDescription.put_Height

           INPUT
            pNumRows            : long'''
        return super(IGeoImageDescription, self).put_Height(pNumRows)
    def get_PixelType(self):
        '''Method IGeoImageDescription.get_PixelType

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IGeoImageDescription, self).get_PixelType()
    def put_PixelType(self, pPixelType):
        '''Method IGeoImageDescription.put_PixelType

           INPUT
            pPixelType          : rstPixelType'''
        return super(IGeoImageDescription, self).put_PixelType(pPixelType)
    def get_NoData(self):
        '''Method IGeoImageDescription.get_NoData

           OUTPUT
            pNoData             : VARIANT*'''
        return super(IGeoImageDescription, self).get_NoData()
    def put_NoData(self, pNoData):
        '''Method IGeoImageDescription.put_NoData

           INPUT
            pNoData             : VARIANT'''
        return super(IGeoImageDescription, self).put_NoData(pNoData)
    def get_Interpolation(self):
        '''Method IGeoImageDescription.get_Interpolation

           OUTPUT
            pInterpolation      : rstResamplingTypes*'''
        return super(IGeoImageDescription, self).get_Interpolation()
    def put_Interpolation(self, pInterpolation):
        '''Method IGeoImageDescription.put_Interpolation

           INPUT
            pInterpolation      : rstResamplingTypes'''
        return super(IGeoImageDescription, self).put_Interpolation(pInterpolation)
    def get_Compression(self):
        '''Method IGeoImageDescription.get_Compression

           OUTPUT
            pCompression        : BSTR*'''
        return super(IGeoImageDescription, self).get_Compression()
    def put_Compression(self, pCompression):
        '''Method IGeoImageDescription.put_Compression

           INPUT
            pCompression        : BSTR'''
        return super(IGeoImageDescription, self).put_Compression(pCompression)
    def get_CompressionQuality(self):
        '''Method IGeoImageDescription.get_CompressionQuality

           OUTPUT
            pQuality            : long*'''
        return super(IGeoImageDescription, self).get_CompressionQuality()
    def put_CompressionQuality(self, pQuality):
        '''Method IGeoImageDescription.put_CompressionQuality

           INPUT
            pQuality            : long'''
        return super(IGeoImageDescription, self).put_CompressionQuality(pQuality)
    def get_BandSelection(self):
        '''Method IGeoImageDescription.get_BandSelection

           OUTPUT
            ppBandIDs           : ILongArray**'''
        return super(IGeoImageDescription, self).get_BandSelection()
    def putref_BandSelection(self, ppBandIDs):
        '''Method IGeoImageDescription.putref_BandSelection

           INPUT
            ppBandIDs           : ILongArray*'''
        return super(IGeoImageDescription, self).putref_BandSelection(ppBandIDs)
    def put_MosaicProperties(self, pMosaicProperties):
        '''Method IGeoImageDescription.put_MosaicProperties

           INPUT
            pMosaicProperties   : BSTR'''
        return super(IGeoImageDescription, self).put_MosaicProperties(pMosaicProperties)
    def get_MosaicProperties(self):
        '''Method IGeoImageDescription.get_MosaicProperties

           OUTPUT
            pMosaicProperties   : BSTR*'''
        return super(IGeoImageDescription, self).get_MosaicProperties()
    def put_ViewpointProperties(self, pViewpointProperties):
        '''Method IGeoImageDescription.put_ViewpointProperties

           INPUT
            pViewpointProperties: BSTR'''
        return super(IGeoImageDescription, self).put_ViewpointProperties(pViewpointProperties)
    def get_ViewpointProperties(self):
        '''Method IGeoImageDescription.get_ViewpointProperties

           OUTPUT
            pViewpointProperties: BSTR*'''
        return super(IGeoImageDescription, self).get_ViewpointProperties()
    BandSelection = property(get_BandSelection, putref_BandSelection, None)
    Compression = property(get_Compression, put_Compression, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    Extent = property(get_Extent, putref_Extent, None)
    Height = property(get_Height, put_Height, None)
    Interpolation = property(get_Interpolation, put_Interpolation, None)
    MosaicProperties = property(get_MosaicProperties, put_MosaicProperties, None)
    NoData = property(get_NoData, put_NoData, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ViewpointProperties = property(get_ViewpointProperties, put_ViewpointProperties, None)
    Width = property(get_Width, put_Width, None)

class IAISRequest(_esriCarto.IAISRequest):
    _IID = uuid.UUID('e55ef83e-4042-49c6-8b54-bb0c3ffa982f')

    def __init__(self, *args, **kw):
        super(IAISRequest, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IAISRequest.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IAISRequest, self).get_Name()
    def put_Name(self, pName):
        '''Method IAISRequest.put_Name

           INPUT
            pName               : BSTR'''
        return super(IAISRequest, self).put_Name(pName)
    def get_GeoImageDescription(self):
        '''Method IAISRequest.get_GeoImageDescription

           OUTPUT
            ppImageDescription  : IGeoImageDescription**'''
        return super(IAISRequest, self).get_GeoImageDescription()
    def putref_GeoImageDescription(self, ppImageDescription):
        '''Method IAISRequest.putref_GeoImageDescription

           INPUT
            ppImageDescription  : IGeoImageDescription*'''
        return super(IAISRequest, self).putref_GeoImageDescription(ppImageDescription)
    def get_Arguments(self):
        '''Method IAISRequest.get_Arguments

           OUTPUT
            ppArguments         : IStringArray**'''
        return super(IAISRequest, self).get_Arguments()
    def putref_Arguments(self, ppArguments):
        '''Method IAISRequest.putref_Arguments

           INPUT
            ppArguments         : IStringArray*'''
        return super(IAISRequest, self).putref_Arguments(ppArguments)
    Arguments = property(get_Arguments, putref_Arguments, None)
    GeoImageDescription = property(get_GeoImageDescription, putref_GeoImageDescription, None)
    Name = property(get_Name, put_Name, None)

class IImageServer(_esriCarto.IImageServer):
    _IID = uuid.UUID('10a6f247-a053-4bb1-aaf3-503ef365e10e')
    def get_Version(self):
        '''Method IImageServer.get_Version

           OUTPUT
            pVersion            : float*'''
        return super(IImageServer, self).get_Version()
    def get_ServiceInfo(self):
        '''Method IImageServer.get_ServiceInfo

           OUTPUT
            ppServiceInfo       : IImageServiceInfo**'''
        return super(IImageServer, self).get_ServiceInfo()
    def GetImage(self, pImageDescription):
        '''Method IImageServer.GetImage

           INPUT
            pImageDescription   : IGeoImageDescription*

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer, self).GetImage(pImageDescription)
    def ExportImage(self, pImageDescription, pImageType):
        '''Method IImageServer.ExportImage

           INPUTS
            pImageDescription   : IGeoImageDescription*
            pImageType          : IImageType*

           OUTPUT
            ppImage             : IImageResult**'''
        return super(IImageServer, self).ExportImage(pImageDescription, pImageType)
    def ExecuteAISRequest(self, pRequest):
        '''Method IImageServer.ExecuteAISRequest

           INPUT
            pRequest            : IAISRequest*

           OUTPUT
            pResponse           : BSTR*'''
        return super(IImageServer, self).ExecuteAISRequest(pRequest)
    ServiceInfo = property(get_ServiceInfo, None, None)
    Version = property(get_Version, None, None)

class IImageServer2(_esriCarto.IImageServer2):
    _IID = uuid.UUID('d9bf0bf1-2ac8-49f5-94cb-6b5182c6297f')
    def ExportMapImage(self, pImageDescription, pImageType):
        '''Method IImageServer2.ExportMapImage

           INPUTS
            pImageDescription   : IGeoImageDescription*
            pImageType          : IImageType*

           OUTPUT
            ppImage             : IMapImage**'''
        return super(IImageServer2, self).ExportMapImage(pImageDescription, pImageType)
    def get_Version(self):
        '''Method IImageServer.get_Version (from IImageServer)

           OUTPUT
            pVersion            : float*'''
        return super(IImageServer2, self).get_Version()
    def get_ServiceInfo(self):
        '''Method IImageServer.get_ServiceInfo (from IImageServer)

           OUTPUT
            ppServiceInfo       : IImageServiceInfo**'''
        return super(IImageServer2, self).get_ServiceInfo()
    def GetImage(self, pImageDescription):
        '''Method IImageServer.GetImage (from IImageServer)

           INPUT
            pImageDescription   : IGeoImageDescription*

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer2, self).GetImage(pImageDescription)
    def ExportImage(self, pImageDescription, pImageType):
        '''Method IImageServer.ExportImage (from IImageServer)

           INPUTS
            pImageDescription   : IGeoImageDescription*
            pImageType          : IImageType*

           OUTPUT
            ppImage             : IImageResult**'''
        return super(IImageServer2, self).ExportImage(pImageDescription, pImageType)
    def ExecuteAISRequest(self, pRequest):
        '''Method IImageServer.ExecuteAISRequest (from IImageServer)

           INPUT
            pRequest            : IAISRequest*

           OUTPUT
            pResponse           : BSTR*'''
        return super(IImageServer2, self).ExecuteAISRequest(pRequest)
    ServiceInfo = property(get_ServiceInfo, None, None)
    Version = property(get_Version, None, None)

class IImageServerDownloadResult(_esriCarto.IImageServerDownloadResult):
    _IID = uuid.UUID('e01cc9c6-5f06-45b2-9973-2a21c0e255da')

    def __init__(self, *args, **kw):
        super(IImageServerDownloadResult, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterIDs(self):
        '''Method IImageServerDownloadResult.get_RasterIDs

           OUTPUT
            ppOIDs              : ILongArray**'''
        return super(IImageServerDownloadResult, self).get_RasterIDs()
    def putref_RasterIDs(self, ppOIDs):
        '''Method IImageServerDownloadResult.putref_RasterIDs

           INPUT
            ppOIDs              : ILongArray*'''
        return super(IImageServerDownloadResult, self).putref_RasterIDs(ppOIDs)
    def get_URI(self):
        '''Method IImageServerDownloadResult.get_URI

           OUTPUT
            pURI                : BSTR*'''
        return super(IImageServerDownloadResult, self).get_URI()
    def put_URI(self, pURI):
        '''Method IImageServerDownloadResult.put_URI

           INPUT
            pURI                : BSTR'''
        return super(IImageServerDownloadResult, self).put_URI(pURI)
    def get_FileSize(self):
        '''Method IImageServerDownloadResult.get_FileSize

           OUTPUT
            pSize               : unsigned__int64*'''
        return super(IImageServerDownloadResult, self).get_FileSize()
    def put_FileSize(self, pSize):
        '''Method IImageServerDownloadResult.put_FileSize

           INPUT
            pSize               : unsigned__int64'''
        return super(IImageServerDownloadResult, self).put_FileSize(pSize)
    FileSize = property(get_FileSize, put_FileSize, None)
    RasterIDs = property(get_RasterIDs, putref_RasterIDs, None)
    URI = property(get_URI, put_URI, None)

class IImageServerDownloadResults(_esriCarto.IImageServerDownloadResults):
    _IID = uuid.UUID('77e544bf-8581-426f-9896-dadb15b0e13b')
    def get_Count(self):
        '''Method IImageServerDownloadResults.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IImageServerDownloadResults, self).get_Count()
    def get_Element(self, Index):
        '''Method IImageServerDownloadResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            pDownloadResult     : IImageServerDownloadResult**'''
        return super(IImageServerDownloadResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IImageServerDownloadResults.Remove

           INPUT
            Index               : long'''
        return super(IImageServerDownloadResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method IImageServerDownloadResults.RemoveAll'''
        return super(IImageServerDownloadResults, self).RemoveAll()
    def Add(self, pDownloadResult):
        '''Method IImageServerDownloadResults.Add

           INPUT
            pDownloadResult     : IImageServerDownloadResult*'''
        return super(IImageServerDownloadResults, self).Add(pDownloadResult)
    def Insert(self, Index, pDownloadResult):
        '''Method IImageServerDownloadResults.Insert

           INPUTS
            Index               : long
            pDownloadResult     : IImageServerDownloadResult*'''
        return super(IImageServerDownloadResults, self).Insert(Index, pDownloadResult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMosaicRule(_esriCarto.IMosaicRule):
    _IID = uuid.UUID('0ae8d2e0-78f8-4a7c-9bc9-b16f42c6fbf9')

    def __init__(self, *args, **kw):
        super(IMosaicRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MosaicMethod(self):
        '''Method IMosaicRule.get_MosaicMethod

           OUTPUT
            pMosaicMethod       : esriMosaicMethod*'''
        return super(IMosaicRule, self).get_MosaicMethod()
    def put_MosaicMethod(self, pMosaicMethod):
        '''Method IMosaicRule.put_MosaicMethod

           INPUT
            pMosaicMethod       : esriMosaicMethod'''
        return super(IMosaicRule, self).put_MosaicMethod(pMosaicMethod)
    def get_LockRasterID(self):
        '''Method IMosaicRule.get_LockRasterID

           OUTPUT
            pRasterID           : BSTR*'''
        return super(IMosaicRule, self).get_LockRasterID()
    def put_LockRasterID(self, pRasterID):
        '''Method IMosaicRule.put_LockRasterID

           INPUT
            pRasterID           : BSTR'''
        return super(IMosaicRule, self).put_LockRasterID(pRasterID)
    def get_Viewpoint(self):
        '''Method IMosaicRule.get_Viewpoint

           OUTPUT
            ppViewpoint         : IPoint**'''
        return super(IMosaicRule, self).get_Viewpoint()
    def putref_Viewpoint(self, ppViewpoint):
        '''Method IMosaicRule.putref_Viewpoint

           INPUT
            ppViewpoint         : IPoint*'''
        return super(IMosaicRule, self).putref_Viewpoint(ppViewpoint)
    def get_OrderByFieldName(self):
        '''Method IMosaicRule.get_OrderByFieldName

           OUTPUT
            pName               : BSTR*'''
        return super(IMosaicRule, self).get_OrderByFieldName()
    def put_OrderByFieldName(self, pName):
        '''Method IMosaicRule.put_OrderByFieldName

           INPUT
            pName               : BSTR'''
        return super(IMosaicRule, self).put_OrderByFieldName(pName)
    def get_OrderByBaseValue(self):
        '''Method IMosaicRule.get_OrderByBaseValue

           OUTPUT
            pValue              : VARIANT*'''
        return super(IMosaicRule, self).get_OrderByBaseValue()
    def put_OrderByBaseValue(self, pValue):
        '''Method IMosaicRule.put_OrderByBaseValue

           INPUT
            pValue              : VARIANT'''
        return super(IMosaicRule, self).put_OrderByBaseValue(pValue)
    def get_Ascending(self):
        '''Method IMosaicRule.get_Ascending

           OUTPUT
            pAscending          : VARIANT_BOOL*'''
        return super(IMosaicRule, self).get_Ascending()
    def put_Ascending(self, pAscending):
        '''Method IMosaicRule.put_Ascending

           INPUT
            pAscending          : VARIANT_BOOL'''
        return super(IMosaicRule, self).put_Ascending(pAscending)
    def get_MosaicOperatorType(self):
        '''Method IMosaicRule.get_MosaicOperatorType

           OUTPUT
            Type                : rstMosaicOperatorType*'''
        return super(IMosaicRule, self).get_MosaicOperatorType()
    def put_MosaicOperatorType(self, Type):
        '''Method IMosaicRule.put_MosaicOperatorType

           INPUT
            Type                : rstMosaicOperatorType'''
        return super(IMosaicRule, self).put_MosaicOperatorType(Type)
    def get_WhereClause(self):
        '''Method IMosaicRule.get_WhereClause

           OUTPUT
            pExpression         : BSTR*'''
        return super(IMosaicRule, self).get_WhereClause()
    def put_WhereClause(self, pExpression):
        '''Method IMosaicRule.put_WhereClause

           INPUT
            pExpression         : BSTR'''
        return super(IMosaicRule, self).put_WhereClause(pExpression)
    def get_FIDs(self):
        '''Method IMosaicRule.get_FIDs

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(IMosaicRule, self).get_FIDs()
    def putref_FIDs(self, ppFIDs):
        '''Method IMosaicRule.putref_FIDs

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(IMosaicRule, self).putref_FIDs(ppFIDs)
    def get_TimeValue(self):
        '''Method IMosaicRule.get_TimeValue

           OUTPUT
            ppTimeValue         : ITimeValue**'''
        return super(IMosaicRule, self).get_TimeValue()
    def putref_TimeValue(self, ppTimeValue):
        '''Method IMosaicRule.putref_TimeValue

           INPUT
            ppTimeValue         : ITimeValue*'''
        return super(IMosaicRule, self).putref_TimeValue(ppTimeValue)
    Ascending = property(get_Ascending, put_Ascending, None)
    FIDs = property(get_FIDs, putref_FIDs, None)
    LockRasterID = property(get_LockRasterID, put_LockRasterID, None)
    MosaicMethod = property(get_MosaicMethod, put_MosaicMethod, None)
    MosaicOperatorType = property(get_MosaicOperatorType, put_MosaicOperatorType, None)
    OrderByBaseValue = property(get_OrderByBaseValue, put_OrderByBaseValue, None)
    OrderByFieldName = property(get_OrderByFieldName, put_OrderByFieldName, None)
    TimeValue = property(get_TimeValue, putref_TimeValue, None)
    Viewpoint = property(get_Viewpoint, putref_Viewpoint, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IImageServerIdentifyResult(_esriCarto.IImageServerIdentifyResult):
    _IID = uuid.UUID('38cfd9c6-e8a1-41f9-84ad-423a8dca6a39')
    def get_Name(self):
        '''Method IImageServerIdentifyResult.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IImageServerIdentifyResult, self).get_Name()
    def get_Value(self):
        '''Method IImageServerIdentifyResult.get_Value

           OUTPUT
            pValue              : BSTR*'''
        return super(IImageServerIdentifyResult, self).get_Value()
    def get_Location(self):
        '''Method IImageServerIdentifyResult.get_Location

           OUTPUT
            ppPoint             : IPoint**'''
        return super(IImageServerIdentifyResult, self).get_Location()
    def get_Properties(self):
        '''Method IImageServerIdentifyResult.get_Properties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IImageServerIdentifyResult, self).get_Properties()
    def get_CatalogItems(self):
        '''Method IImageServerIdentifyResult.get_CatalogItems

           OUTPUT
            ppItems             : IRecordSet**'''
        return super(IImageServerIdentifyResult, self).get_CatalogItems()
    def get_CatalogItemVisibilities(self):
        '''Method IImageServerIdentifyResult.get_CatalogItemVisibilities

           OUTPUT
            ppVisibilities      : IDoubleArray**'''
        return super(IImageServerIdentifyResult, self).get_CatalogItemVisibilities()
    CatalogItemVisibilities = property(get_CatalogItemVisibilities, None, None)
    CatalogItems = property(get_CatalogItems, None, None)
    Location = property(get_Location, None, None)
    Name = property(get_Name, None, None)
    Properties = property(get_Properties, None, None)
    Value = property(get_Value, None, None)

class IRenderingRule(_esriCarto.IRenderingRule):
    _IID = uuid.UUID('5cf4ca77-aaef-4153-9c45-060ddd812670')

    def __init__(self, *args, **kw):
        super(IRenderingRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IRenderingRule.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRenderingRule, self).get_Name()
    def put_Name(self, pName):
        '''Method IRenderingRule.put_Name

           INPUT
            pName               : BSTR'''
        return super(IRenderingRule, self).put_Name(pName)
    def get_Description(self):
        '''Method IRenderingRule.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRenderingRule, self).get_Description()
    def put_Description(self, pDescription):
        '''Method IRenderingRule.put_Description

           INPUT
            pDescription        : BSTR'''
        return super(IRenderingRule, self).put_Description(pDescription)
    def get_Function(self):
        '''Method IRenderingRule.get_Function

           OUTPUT
            ppFunction          : IRasterFunction**'''
        return super(IRenderingRule, self).get_Function()
    def putref_Function(self, ppFunction):
        '''Method IRenderingRule.putref_Function

           INPUT
            ppFunction          : IRasterFunction*'''
        return super(IRenderingRule, self).putref_Function(ppFunction)
    def get_Arguments(self):
        '''Method IRenderingRule.get_Arguments

           OUTPUT
            ppArguments         : IRasterFunctionArguments**'''
        return super(IRenderingRule, self).get_Arguments()
    def putref_Arguments(self, ppArguments):
        '''Method IRenderingRule.putref_Arguments

           INPUT
            ppArguments         : IRasterFunctionArguments*'''
        return super(IRenderingRule, self).putref_Arguments(ppArguments)
    def get_VariableName(self):
        '''Method IRenderingRule.get_VariableName

           OUTPUT
            pVariableName       : BSTR*'''
        return super(IRenderingRule, self).get_VariableName()
    def put_VariableName(self, pVariableName):
        '''Method IRenderingRule.put_VariableName

           INPUT
            pVariableName       : BSTR'''
        return super(IRenderingRule, self).put_VariableName(pVariableName)
    def get_Renderer(self):
        '''Method IRenderingRule.get_Renderer

           OUTPUT
            ppRenderer          : IRasterRenderer**'''
        return super(IRenderingRule, self).get_Renderer()
    def putref_Renderer(self, ppRenderer):
        '''Method IRenderingRule.putref_Renderer

           INPUT
            ppRenderer          : IRasterRenderer*'''
        return super(IRenderingRule, self).putref_Renderer(ppRenderer)
    Arguments = property(get_Arguments, putref_Arguments, None)
    Description = property(get_Description, put_Description, None)
    Function = property(get_Function, putref_Function, None)
    Name = property(get_Name, put_Name, None)
    Renderer = property(get_Renderer, putref_Renderer, None)
    VariableName = property(get_VariableName, put_VariableName, None)

class IImageServer3(_esriCarto.IImageServer3):
    _IID = uuid.UUID('d27b4a93-5dd5-47e0-9551-951010c342ad')
    def get_Fields(self):
        '''Method IImageServer3.get_Fields

           OUTPUT
            ppFields            : IFields**'''
        return super(IImageServer3, self).get_Fields()
    def GetCatalogItemCount(self, pFilter):
        '''Method IImageServer3.GetCatalogItemCount

           INPUT
            pFilter             : IQueryFilter*

           OUTPUT
            pNumItems           : long*'''
        return super(IImageServer3, self).GetCatalogItemCount(pFilter)
    def GetCatalogItemIDs(self, pFilter):
        '''Method IImageServer3.GetCatalogItemIDs

           INPUT
            pFilter             : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IImageServer3, self).GetCatalogItemIDs(pFilter)
    def GetCatalogItems(self, pFilter):
        '''Method IImageServer3.GetCatalogItems

           INPUT
            pFilter             : IQueryFilter*

           OUTPUT
            ppItems             : IRecordSet**'''
        return super(IImageServer3, self).GetCatalogItems(pFilter)
    def Download(self, pFIDs, pGeometry, Format):
        '''Method IImageServer3.Download

           INPUTS
            pFIDs               : IFIDSet*
            pGeometry           : IGeometry*
            Format              : BSTR

           OUTPUT
            ppFiles             : IImageServerDownloadResults**'''
        return super(IImageServer3, self).Download(pFIDs, pGeometry, Format)
    def GetFile(self, pFile):
        '''Method IImageServer3.GetFile

           INPUT
            pFile               : IImageServerDownloadResult*

           OUTPUT
            pURL                : BSTR*'''
        return super(IImageServer3, self).GetFile(pFile)
    def Identify(self, pLocation, pMosaicRule, pCellsize):
        '''Method IImageServer3.Identify

           INPUTS
            pLocation           : IGeometry*
            pMosaicRule         : IMosaicRule*
            pCellsize           : IPoint*

           OUTPUT
            ppIdentifyResult    : IImageServerIdentifyResult**'''
        return super(IImageServer3, self).Identify(pLocation, pMosaicRule, pCellsize)
    def get_Metadata(self):
        '''Method IImageServer3.get_Metadata

           OUTPUT
            pXml                : BSTR*'''
        return super(IImageServer3, self).get_Metadata()
    def GetRasterInfo(self, RID):
        '''Method IImageServer3.GetRasterInfo

           INPUT
            RID                 : long

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IImageServer3, self).GetRasterInfo(RID)
    def GetPixelBlock(self, RID, tx, ty, Level):
        '''Method IImageServer3.GetPixelBlock

           INPUTS
            RID                 : long
            tx                  : long
            ty                  : long
            Level               : long

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer3, self).GetPixelBlock(RID, tx, ty, Level)
    def GetRasterMetadata(self, RID):
        '''Method IImageServer3.GetRasterMetadata

           INPUT
            RID                 : long

           OUTPUT
            pXml                : BSTR*'''
        return super(IImageServer3, self).GetRasterMetadata(RID)
    def GetThumbnail(self, RID):
        '''Method IImageServer3.GetThumbnail

           INPUT
            RID                 : long

           OUTPUT
            ppThumbnail         : IImageResult**'''
        return super(IImageServer3, self).GetThumbnail(RID)
    def GenerateServiceInfo(self, pRenderingRule):
        '''Method IImageServer3.GenerateServiceInfo

           INPUT
            pRenderingRule      : IRenderingRule*

           OUTPUT
            ppServiceInfo       : IImageServiceInfo**'''
        return super(IImageServer3, self).GenerateServiceInfo(pRenderingRule)
    def GetNativeRasterInfo(self, RID):
        '''Method IImageServer3.GetNativeRasterInfo

           INPUT
            RID                 : long

           OUTPUT
            ppRasterInfos       : IRasterInfos**'''
        return super(IImageServer3, self).GetNativeRasterInfo(RID)
    def GetNativePixelBlock(self, RID, IID, tx, ty, Level):
        '''Method IImageServer3.GetNativePixelBlock

           INPUTS
            RID                 : long
            IID                 : long
            tx                  : long
            ty                  : long
            Level               : long

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer3, self).GetNativePixelBlock(RID, IID, tx, ty, Level)
    def ExportMapImage(self, pImageDescription, pImageType):
        '''Method IImageServer2.ExportMapImage (from IImageServer2)

           INPUTS
            pImageDescription   : IGeoImageDescription*
            pImageType          : IImageType*

           OUTPUT
            ppImage             : IMapImage**'''
        return super(IImageServer3, self).ExportMapImage(pImageDescription, pImageType)
    def get_Version(self):
        '''Method IImageServer.get_Version (from IImageServer)

           OUTPUT
            pVersion            : float*'''
        return super(IImageServer3, self).get_Version()
    def get_ServiceInfo(self):
        '''Method IImageServer.get_ServiceInfo (from IImageServer)

           OUTPUT
            ppServiceInfo       : IImageServiceInfo**'''
        return super(IImageServer3, self).get_ServiceInfo()
    def GetImage(self, pImageDescription):
        '''Method IImageServer.GetImage (from IImageServer)

           INPUT
            pImageDescription   : IGeoImageDescription*

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer3, self).GetImage(pImageDescription)
    def ExportImage(self, pImageDescription, pImageType):
        '''Method IImageServer.ExportImage (from IImageServer)

           INPUTS
            pImageDescription   : IGeoImageDescription*
            pImageType          : IImageType*

           OUTPUT
            ppImage             : IImageResult**'''
        return super(IImageServer3, self).ExportImage(pImageDescription, pImageType)
    def ExecuteAISRequest(self, pRequest):
        '''Method IImageServer.ExecuteAISRequest (from IImageServer)

           INPUT
            pRequest            : IAISRequest*

           OUTPUT
            pResponse           : BSTR*'''
        return super(IImageServer3, self).ExecuteAISRequest(pRequest)
    Fields = property(get_Fields, None, None)
    Metadata = property(get_Metadata, None, None)
    ServiceInfo = property(get_ServiceInfo, None, None)
    Version = property(get_Version, None, None)

class ITiledImageServer(_esriCarto.ITiledImageServer):
    _IID = uuid.UUID('10bfd112-33d2-4986-997a-f2b6069e45b8')
    def GetTileCacheInfo(self):
        '''Method ITiledImageServer.GetTileCacheInfo

           OUTPUT
            ppCacheInfo         : ITileCacheInfo**'''
        return super(ITiledImageServer, self).GetTileCacheInfo()
    def GetImageTile(self, Level, Row, Column):
        '''Method ITiledImageServer.GetImageTile

           INPUTS
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(ITiledImageServer, self).GetImageTile(Level, Row, Column)
    def GetTileImageInfo(self):
        '''Method ITiledImageServer.GetTileImageInfo

           OUTPUT
            ppCacheInfo         : ITileImageInfo**'''
        return super(ITiledImageServer, self).GetTileImageInfo()
    def GetCacheStorageInfo(self):
        '''Method ITiledImageServer.GetCacheStorageInfo

           OUTPUT
            ppCacheStorageInfo  : ICacheStorageInfo**'''
        return super(ITiledImageServer, self).GetCacheStorageInfo()
    def IsFixedScaleImage(self):
        '''Method ITiledImageServer.IsFixedScaleImage

           OUTPUT
            pIsFixedScaleMap    : VARIANT_BOOL*'''
        return super(ITiledImageServer, self).IsFixedScaleImage()
    def GetVirtualCacheDirectory(self):
        '''Method ITiledImageServer.GetVirtualCacheDirectory

           OUTPUT
            pURL                : BSTR*'''
        return super(ITiledImageServer, self).GetVirtualCacheDirectory()
    def GetCacheDescriptionInfo(self):
        '''Method ITiledImageServer.GetCacheDescriptionInfo

           OUTPUT
            ppCacheDescriptionInfo: ICacheDescriptionInfo**'''
        return super(ITiledImageServer, self).GetCacheDescriptionInfo()
    def GetCacheControlInfo(self):
        '''Method ITiledImageServer.GetCacheControlInfo

           OUTPUT
            ppCacheControlInfo  : ICacheControlInfo**'''
        return super(ITiledImageServer, self).GetCacheControlInfo()

class IPrivateServerObjectLANProxy(_esriCarto.IPrivateServerObjectLANProxy):
    _IID = uuid.UUID('29188f1b-e78f-49bd-854e-b2d680f03843')
    def Init(self, isPooled, Name, pServer, namespace2Use):
        '''Method IPrivateServerObjectLANProxy.Init

           INPUTS
            isPooled            : VARIANT_BOOL
            Name                : BSTR
            pServer             : IServer*
            namespace2Use       : BSTR'''
        return super(IPrivateServerObjectLANProxy, self).Init(isPooled, Name, pServer, namespace2Use)

class IImageServerObjectLANProxy(_esriCarto.IImageServerObjectLANProxy):
    _IID = uuid.UUID('9d7c52d5-e5f1-41df-afed-570b42b11989')
    def get_ServiceURL(self):
        '''Method IImageServerObjectLANProxy.get_ServiceURL

           OUTPUT
            pServiceURL         : BSTR*'''
        return super(IImageServerObjectLANProxy, self).get_ServiceURL()
    def Init(self, isPooled, Name, pServer, namespace2Use):
        '''Method IImageServerObjectLANProxy.Init

           INPUTS
            isPooled            : VARIANT_BOOL
            Name                : BSTR
            pServer             : IServer*
            namespace2Use       : BSTR'''
        return super(IImageServerObjectLANProxy, self).Init(isPooled, Name, pServer, namespace2Use)
    ServiceURL = property(get_ServiceURL, None, None)

class IImageServerProxyImpl(_esriCarto.IImageServerProxyImpl):
    _IID = uuid.UUID('c050f7cc-621d-4cad-b6b6-8fa3a40260df')
    def GetImageTileEx(self, Level, Row, Column, CacheFormat):
        '''Method IImageServerProxyImpl.GetImageTileEx

           INPUTS
            Level               : long
            Row                 : long
            Column              : long
            CacheFormat         : long

           OUTPUTS
            ppData              : SAFEARRAY**
            pExpiryDateTime     : double*
            pTileState          : esriTileState*'''
        return super(IImageServerProxyImpl, self).GetImageTileEx(Level, Row, Column, CacheFormat)

class IImageServerIdentifyResults(_esriCarto.IImageServerIdentifyResults):
    _IID = uuid.UUID('f2fe7b23-5706-4f73-a9fa-e63ddb99f391')
    def get_Count(self):
        '''Method IImageServerIdentifyResults.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IImageServerIdentifyResults, self).get_Count()
    def get_Element(self, Index):
        '''Method IImageServerIdentifyResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            pIdentifyResult     : IImageServerIdentifyResult**'''
        return super(IImageServerIdentifyResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IImageServerIdentifyResults.Remove

           INPUT
            Index               : long'''
        return super(IImageServerIdentifyResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method IImageServerIdentifyResults.RemoveAll'''
        return super(IImageServerIdentifyResults, self).RemoveAll()
    def Add(self, pIdentifyResult):
        '''Method IImageServerIdentifyResults.Add

           INPUT
            pIdentifyResult     : IImageServerIdentifyResult*'''
        return super(IImageServerIdentifyResults, self).Add(pIdentifyResult)
    def Insert(self, Index, pIdentifyResult):
        '''Method IImageServerIdentifyResults.Insert

           INPUTS
            Index               : long
            pIdentifyResult     : IImageServerIdentifyResult*'''
        return super(IImageServerIdentifyResults, self).Insert(Index, pIdentifyResult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IImageServerEditResult(_esriCarto.IImageServerEditResult):
    _IID = uuid.UUID('ec16f361-a57f-47ee-937b-168292fecc74')
    def get_RasterID(self):
        '''Method IImageServerEditResult.get_RasterID

           OUTPUT
            pRasterID           : long*'''
        return super(IImageServerEditResult, self).get_RasterID()
    def get_ItemID(self):
        '''Method IImageServerEditResult.get_ItemID

           OUTPUT
            pItemID             : BSTR*'''
        return super(IImageServerEditResult, self).get_ItemID()
    def get_Succeeded(self):
        '''Method IImageServerEditResult.get_Succeeded

           OUTPUT
            pSucceeded          : VARIANT_BOOL*'''
        return super(IImageServerEditResult, self).get_Succeeded()
    def get_Code(self):
        '''Method IImageServerEditResult.get_Code

           OUTPUT
            pErrorCode          : long*'''
        return super(IImageServerEditResult, self).get_Code()
    def get_Description(self):
        '''Method IImageServerEditResult.get_Description

           OUTPUT
            pErrorDescription   : BSTR*'''
        return super(IImageServerEditResult, self).get_Description()
    def get_Tag(self):
        '''Method IImageServerEditResult.get_Tag

           OUTPUT
            pTag                : BSTR*'''
        return super(IImageServerEditResult, self).get_Tag()
    Code = property(get_Code, None, None)
    Description = property(get_Description, None, None)
    ItemID = property(get_ItemID, None, None)
    RasterID = property(get_RasterID, None, None)
    Succeeded = property(get_Succeeded, None, None)
    Tag = property(get_Tag, None, None)

class IImageServerEditResults(_esriCarto.IImageServerEditResults):
    _IID = uuid.UUID('ad7a1cfb-7c94-4422-9ed1-cddff7b7459f')
    def get_Count(self):
        '''Method IImageServerEditResults.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IImageServerEditResults, self).get_Count()
    def get_Element(self, Index):
        '''Method IImageServerEditResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            pEditResult         : IImageServerEditResult**'''
        return super(IImageServerEditResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IImageServerEditResults.Remove

           INPUT
            Index               : long'''
        return super(IImageServerEditResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method IImageServerEditResults.RemoveAll'''
        return super(IImageServerEditResults, self).RemoveAll()
    def Add(self, pEditResult):
        '''Method IImageServerEditResults.Add

           INPUT
            pEditResult         : IImageServerEditResult*'''
        return super(IImageServerEditResults, self).Add(pEditResult)
    def Insert(self, Index, pEditesult):
        '''Method IImageServerEditResults.Insert

           INPUTS
            Index               : long
            pEditesult          : IImageServerEditResult*'''
        return super(IImageServerEditResults, self).Insert(Index, pEditesult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IImageServerMeasureResult(_esriCarto.IImageServerMeasureResult):
    _IID = uuid.UUID('fcb4cfff-b110-4def-878d-87cb8a396d5b')

    def __init__(self, *args, **kw):
        super(IImageServerMeasureResult, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IImageServerMeasureResult.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IImageServerMeasureResult, self).get_Name()
    def put_Name(self, pName):
        '''Method IImageServerMeasureResult.put_Name

           INPUT
            pName               : BSTR'''
        return super(IImageServerMeasureResult, self).put_Name(pName)
    def get_SensorName(self):
        '''Method IImageServerMeasureResult.get_SensorName

           OUTPUT
            pSensorName         : BSTR*'''
        return super(IImageServerMeasureResult, self).get_SensorName()
    def put_SensorName(self, pSensorName):
        '''Method IImageServerMeasureResult.put_SensorName

           INPUT
            pSensorName         : BSTR'''
        return super(IImageServerMeasureResult, self).put_SensorName(pSensorName)
    def get_Measurement(self):
        '''Method IImageServerMeasureResult.get_Measurement

           OUTPUT
            ppMeasurement       : IPropertySet**'''
        return super(IImageServerMeasureResult, self).get_Measurement()
    def putref_Measurement(self, ppMeasurement):
        '''Method IImageServerMeasureResult.putref_Measurement

           INPUT
            ppMeasurement       : IPropertySet*'''
        return super(IImageServerMeasureResult, self).putref_Measurement(ppMeasurement)
    Measurement = property(get_Measurement, putref_Measurement, None)
    Name = property(get_Name, put_Name, None)
    SensorName = property(get_SensorName, put_SensorName, None)

class IRasterFunctionInfo(_esriCarto.IRasterFunctionInfo):
    _IID = uuid.UUID('22a9001d-d872-49f2-8600-a212bdc15d82')

    def __init__(self, *args, **kw):
        super(IRasterFunctionInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IRasterFunctionInfo.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterFunctionInfo, self).get_Name()
    def put_Name(self, pName):
        '''Method IRasterFunctionInfo.put_Name

           INPUT
            pName               : BSTR'''
        return super(IRasterFunctionInfo, self).put_Name(pName)
    def get_Description(self):
        '''Method IRasterFunctionInfo.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRasterFunctionInfo, self).get_Description()
    def put_Description(self, pDescription):
        '''Method IRasterFunctionInfo.put_Description

           INPUT
            pDescription        : BSTR'''
        return super(IRasterFunctionInfo, self).put_Description(pDescription)
    def get_Help(self):
        '''Method IRasterFunctionInfo.get_Help

           OUTPUT
            pHelp               : BSTR*'''
        return super(IRasterFunctionInfo, self).get_Help()
    def put_Help(self, pHelp):
        '''Method IRasterFunctionInfo.put_Help

           INPUT
            pHelp               : BSTR'''
        return super(IRasterFunctionInfo, self).put_Help(pHelp)
    Description = property(get_Description, put_Description, None)
    Help = property(get_Help, put_Help, None)
    Name = property(get_Name, put_Name, None)

class IRasterFunctionInfos(_esriCarto.IRasterFunctionInfos):
    _IID = uuid.UUID('df6c613a-9d6d-4207-a603-98714d60a317')
    def get_Count(self):
        '''Method IRasterFunctionInfos.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IRasterFunctionInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IRasterFunctionInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppFunctionInfo      : IRasterFunctionInfo**'''
        return super(IRasterFunctionInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IRasterFunctionInfos.Remove

           INPUT
            Index               : long'''
        return super(IRasterFunctionInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IRasterFunctionInfos.RemoveAll'''
        return super(IRasterFunctionInfos, self).RemoveAll()
    def Add(self, pFunctionInfo):
        '''Method IRasterFunctionInfos.Add

           INPUT
            pFunctionInfo       : IRasterFunctionInfo*'''
        return super(IRasterFunctionInfos, self).Add(pFunctionInfo)
    def Insert(self, Index, pFunctionInfo):
        '''Method IRasterFunctionInfos.Insert

           INPUTS
            Index               : long
            pFunctionInfo       : IRasterFunctionInfo*'''
        return super(IRasterFunctionInfos, self).Insert(Index, pFunctionInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IRasterTypeInfo(_esriCarto.IRasterTypeInfo):
    _IID = uuid.UUID('cd8bb9e4-116b-4e3d-8eef-ba031083244f')

    def __init__(self, *args, **kw):
        super(IRasterTypeInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IRasterTypeInfo.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterTypeInfo, self).get_Name()
    def put_Name(self, pName):
        '''Method IRasterTypeInfo.put_Name

           INPUT
            pName               : BSTR'''
        return super(IRasterTypeInfo, self).put_Name(pName)
    def get_Description(self):
        '''Method IRasterTypeInfo.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRasterTypeInfo, self).get_Description()
    def put_Description(self, pDescription):
        '''Method IRasterTypeInfo.put_Description

           INPUT
            pDescription        : BSTR'''
        return super(IRasterTypeInfo, self).put_Description(pDescription)
    def get_Help(self):
        '''Method IRasterTypeInfo.get_Help

           OUTPUT
            pHelp               : BSTR*'''
        return super(IRasterTypeInfo, self).get_Help()
    def put_Help(self, pHelp):
        '''Method IRasterTypeInfo.put_Help

           INPUT
            pHelp               : BSTR'''
        return super(IRasterTypeInfo, self).put_Help(pHelp)
    Description = property(get_Description, put_Description, None)
    Help = property(get_Help, put_Help, None)
    Name = property(get_Name, put_Name, None)

class IRasterTypeInfos(_esriCarto.IRasterTypeInfos):
    _IID = uuid.UUID('8a248164-de10-40ba-ab38-f324b65c8c65')
    def get_Count(self):
        '''Method IRasterTypeInfos.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IRasterTypeInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IRasterTypeInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppTypeInfo          : IRasterTypeInfo**'''
        return super(IRasterTypeInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IRasterTypeInfos.Remove

           INPUT
            Index               : long'''
        return super(IRasterTypeInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IRasterTypeInfos.RemoveAll'''
        return super(IRasterTypeInfos, self).RemoveAll()
    def Add(self, pTypeInfo):
        '''Method IRasterTypeInfos.Add

           INPUT
            pTypeInfo           : IRasterTypeInfo*'''
        return super(IRasterTypeInfos, self).Add(pTypeInfo)
    def Insert(self, Index, pTypeInfo):
        '''Method IRasterTypeInfos.Insert

           INPUTS
            Index               : long
            pTypeInfo           : IRasterTypeInfo*'''
        return super(IRasterTypeInfos, self).Insert(Index, pTypeInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IImageView(_esriCarto.IImageView):
    _IID = uuid.UUID('26925225-c546-43e1-a89d-ab27cc26e8fb')

    def __init__(self, *args, **kw):
        super(IImageView, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_VID(self):
        '''Method IImageView.get_VID

           OUTPUT
            pVID                : BSTR*'''
        return super(IImageView, self).get_VID()
    def put_VID(self, pVID):
        '''Method IImageView.put_VID

           INPUT
            pVID                : BSTR'''
        return super(IImageView, self).put_VID(pVID)
    def get_Name(self):
        '''Method IImageView.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IImageView, self).get_Name()
    def put_Name(self, pName):
        '''Method IImageView.put_Name

           INPUT
            pName               : BSTR'''
        return super(IImageView, self).put_Name(pName)
    def get_Description(self):
        '''Method IImageView.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IImageView, self).get_Description()
    def put_Description(self, pDescription):
        '''Method IImageView.put_Description

           INPUT
            pDescription        : BSTR'''
        return super(IImageView, self).put_Description(pDescription)
    def get_Extent(self):
        '''Method IImageView.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IImageView, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IImageView.putref_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IImageView, self).putref_Extent(ppExtent)
    def GetPixelSize(self):
        '''Method IImageView.GetPixelSize

           OUTPUTS
            pDx                 : double*
            pDy                 : double*'''
        return super(IImageView, self).GetPixelSize()
    def PutPixelSize(self, dx, dy):
        '''Method IImageView.PutPixelSize

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IImageView, self).PutPixelSize(dx, dy)
    def get_BandCount(self):
        '''Method IImageView.get_BandCount

           OUTPUT
            pNumBands           : long*'''
        return super(IImageView, self).get_BandCount()
    def put_BandCount(self, pNumBands):
        '''Method IImageView.put_BandCount

           INPUT
            pNumBands           : long'''
        return super(IImageView, self).put_BandCount(pNumBands)
    def get_PixelType(self):
        '''Method IImageView.get_PixelType

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IImageView, self).get_PixelType()
    def put_PixelType(self, pPixelType):
        '''Method IImageView.put_PixelType

           INPUT
            pPixelType          : rstPixelType'''
        return super(IImageView, self).put_PixelType(pPixelType)
    def get_MosaicRule(self):
        '''Method IImageView.get_MosaicRule

           OUTPUT
            ppMosaicRule        : IMosaicRule**'''
        return super(IImageView, self).get_MosaicRule()
    def putref_MosaicRule(self, ppMosaicRule):
        '''Method IImageView.putref_MosaicRule

           INPUT
            ppMosaicRule        : IMosaicRule*'''
        return super(IImageView, self).putref_MosaicRule(ppMosaicRule)
    def get_RenderingRule(self):
        '''Method IImageView.get_RenderingRule

           OUTPUT
            ppRenderingRule     : IRenderingRule**'''
        return super(IImageView, self).get_RenderingRule()
    def putref_RenderingRule(self, ppRenderingRule):
        '''Method IImageView.putref_RenderingRule

           INPUT
            ppRenderingRule     : IRenderingRule*'''
        return super(IImageView, self).putref_RenderingRule(ppRenderingRule)
    def get_Adaptive(self):
        '''Method IImageView.get_Adaptive

           OUTPUT
            pAdpative           : VARIANT_BOOL*'''
        return super(IImageView, self).get_Adaptive()
    def put_Adaptive(self, pAdpative):
        '''Method IImageView.put_Adaptive

           INPUT
            pAdpative           : VARIANT_BOOL'''
        return super(IImageView, self).put_Adaptive(pAdpative)
    Adaptive = property(get_Adaptive, put_Adaptive, None)
    BandCount = property(get_BandCount, put_BandCount, None)
    Description = property(get_Description, put_Description, None)
    Extent = property(get_Extent, putref_Extent, None)
    MosaicRule = property(get_MosaicRule, putref_MosaicRule, None)
    Name = property(get_Name, put_Name, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    RenderingRule = property(get_RenderingRule, putref_RenderingRule, None)
    VID = property(get_VID, put_VID, None)

class IImageServiceInfo2(_esriCarto.IImageServiceInfo2):
    _IID = uuid.UUID('e569c393-70b6-497c-b999-bb246d00a8b7')

    def __init__(self, *args, **kw):
        super(IImageServiceInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AllowedFields(self):
        '''Method IImageServiceInfo2.get_AllowedFields

           OUTPUT
            pAllowedFields      : BSTR*'''
        return super(IImageServiceInfo2, self).get_AllowedFields()
    def put_AllowedFields(self, pAllowedFields):
        '''Method IImageServiceInfo2.put_AllowedFields

           INPUT
            pAllowedFields      : BSTR'''
        return super(IImageServiceInfo2, self).put_AllowedFields(pAllowedFields)
    def get_AllowedCompressions(self):
        '''Method IImageServiceInfo2.get_AllowedCompressions

           OUTPUT
            pAllowedCompressions: BSTR*'''
        return super(IImageServiceInfo2, self).get_AllowedCompressions()
    def put_AllowedCompressions(self, pAllowedCompressions):
        '''Method IImageServiceInfo2.put_AllowedCompressions

           INPUT
            pAllowedCompressions: BSTR'''
        return super(IImageServiceInfo2, self).put_AllowedCompressions(pAllowedCompressions)
    def get_AllowedMosaicMethods(self):
        '''Method IImageServiceInfo2.get_AllowedMosaicMethods

           OUTPUT
            pAllowedMethods     : BSTR*'''
        return super(IImageServiceInfo2, self).get_AllowedMosaicMethods()
    def put_AllowedMosaicMethods(self, pAllowedMethods):
        '''Method IImageServiceInfo2.put_AllowedMosaicMethods

           INPUT
            pAllowedMethods     : BSTR'''
        return super(IImageServiceInfo2, self).put_AllowedMosaicMethods(pAllowedMethods)
    def get_AllowedItemMetadata(self):
        '''Method IImageServiceInfo2.get_AllowedItemMetadata

           OUTPUT
            pLOD                : BSTR*'''
        return super(IImageServiceInfo2, self).get_AllowedItemMetadata()
    def put_AllowedItemMetadata(self, pLOD):
        '''Method IImageServiceInfo2.put_AllowedItemMetadata

           INPUT
            pLOD                : BSTR'''
        return super(IImageServiceInfo2, self).put_AllowedItemMetadata(pLOD)
    def get_MaxRecordCount(self):
        '''Method IImageServiceInfo2.get_MaxRecordCount

           OUTPUT
            pCount              : long*'''
        return super(IImageServiceInfo2, self).get_MaxRecordCount()
    def put_MaxRecordCount(self, pCount):
        '''Method IImageServiceInfo2.put_MaxRecordCount

           INPUT
            pCount              : long'''
        return super(IImageServiceInfo2, self).put_MaxRecordCount(pCount)
    def get_MaxDownloadImageCount(self):
        '''Method IImageServiceInfo2.get_MaxDownloadImageCount

           OUTPUT
            pCount              : long*'''
        return super(IImageServiceInfo2, self).get_MaxDownloadImageCount()
    def put_MaxDownloadImageCount(self, pCount):
        '''Method IImageServiceInfo2.put_MaxDownloadImageCount

           INPUT
            pCount              : long'''
        return super(IImageServiceInfo2, self).put_MaxDownloadImageCount(pCount)
    def get_MaxMosaicImageCount(self):
        '''Method IImageServiceInfo2.get_MaxMosaicImageCount

           OUTPUT
            pCount              : long*'''
        return super(IImageServiceInfo2, self).get_MaxMosaicImageCount()
    def put_MaxMosaicImageCount(self, pCount):
        '''Method IImageServiceInfo2.put_MaxMosaicImageCount

           INPUT
            pCount              : long'''
        return super(IImageServiceInfo2, self).put_MaxMosaicImageCount(pCount)
    def put_MaxNCols(self, _arg1):
        '''Method IImageServiceInfo2.put_MaxNCols

           INPUT
            _arg1               : long'''
        return super(IImageServiceInfo2, self).put_MaxNCols(_arg1)
    def put_MaxNRows(self, _arg1):
        '''Method IImageServiceInfo2.put_MaxNRows

           INPUT
            _arg1               : long'''
        return super(IImageServiceInfo2, self).put_MaxNRows(_arg1)
    def get_DefaultCompression(self):
        '''Method IImageServiceInfo2.get_DefaultCompression

           OUTPUT
            pCompression        : BSTR*'''
        return super(IImageServiceInfo2, self).get_DefaultCompression()
    def put_DefaultCompression(self, pCompression):
        '''Method IImageServiceInfo2.put_DefaultCompression

           INPUT
            pCompression        : BSTR'''
        return super(IImageServiceInfo2, self).put_DefaultCompression(pCompression)
    def get_DefaultCompressionQuality(self):
        '''Method IImageServiceInfo2.get_DefaultCompressionQuality

           OUTPUT
            pQuality            : long*'''
        return super(IImageServiceInfo2, self).get_DefaultCompressionQuality()
    def put_DefaultCompressionQuality(self, pQuality):
        '''Method IImageServiceInfo2.put_DefaultCompressionQuality

           INPUT
            pQuality            : long'''
        return super(IImageServiceInfo2, self).put_DefaultCompressionQuality(pQuality)
    def get_DefaultResamplingMethod(self):
        '''Method IImageServiceInfo2.get_DefaultResamplingMethod

           OUTPUT
            pResamplingMethod   : rstResamplingTypes*'''
        return super(IImageServiceInfo2, self).get_DefaultResamplingMethod()
    def put_DefaultResamplingMethod(self, pResamplingMethod):
        '''Method IImageServiceInfo2.put_DefaultResamplingMethod

           INPUT
            pResamplingMethod   : rstResamplingTypes'''
        return super(IImageServiceInfo2, self).put_DefaultResamplingMethod(pResamplingMethod)
    def get_DefaultMosaicMethod(self):
        '''Method IImageServiceInfo2.get_DefaultMosaicMethod

           OUTPUT
            pMosaicMethod       : esriMosaicMethod*'''
        return super(IImageServiceInfo2, self).get_DefaultMosaicMethod()
    def put_DefaultMosaicMethod(self, pMosaicMethod):
        '''Method IImageServiceInfo2.put_DefaultMosaicMethod

           INPUT
            pMosaicMethod       : esriMosaicMethod'''
        return super(IImageServiceInfo2, self).put_DefaultMosaicMethod(pMosaicMethod)
    def get_SupportBSQ(self):
        '''Method IImageServiceInfo2.get_SupportBSQ

           OUTPUT
            pBSQ                : VARIANT_BOOL*'''
        return super(IImageServiceInfo2, self).get_SupportBSQ()
    def put_SupportBSQ(self, pBSQ):
        '''Method IImageServiceInfo2.put_SupportBSQ

           INPUT
            pBSQ                : VARIANT_BOOL'''
        return super(IImageServiceInfo2, self).put_SupportBSQ(pBSQ)
    def get_SupportsTime(self):
        '''Method IImageServiceInfo2.get_SupportsTime

           OUTPUT
            supports            : VARIANT_BOOL*'''
        return super(IImageServiceInfo2, self).get_SupportsTime()
    def put_SupportsTime(self, supports):
        '''Method IImageServiceInfo2.put_SupportsTime

           INPUT
            supports            : VARIANT_BOOL'''
        return super(IImageServiceInfo2, self).put_SupportsTime(supports)
    def get_StartTimeFieldName(self):
        '''Method IImageServiceInfo2.get_StartTimeFieldName

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IImageServiceInfo2, self).get_StartTimeFieldName()
    def put_StartTimeFieldName(self, pFieldName):
        '''Method IImageServiceInfo2.put_StartTimeFieldName

           INPUT
            pFieldName          : BSTR'''
        return super(IImageServiceInfo2, self).put_StartTimeFieldName(pFieldName)
    def get_EndTimeFieldName(self):
        '''Method IImageServiceInfo2.get_EndTimeFieldName

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IImageServiceInfo2, self).get_EndTimeFieldName()
    def put_EndTimeFieldName(self, pFieldName):
        '''Method IImageServiceInfo2.put_EndTimeFieldName

           INPUT
            pFieldName          : BSTR'''
        return super(IImageServiceInfo2, self).put_EndTimeFieldName(pFieldName)
    def get_TimeValueFormat(self):
        '''Method IImageServiceInfo2.get_TimeValueFormat

           OUTPUT
            pTimeFormat         : BSTR*'''
        return super(IImageServiceInfo2, self).get_TimeValueFormat()
    def put_TimeValueFormat(self, pTimeFormat):
        '''Method IImageServiceInfo2.put_TimeValueFormat

           INPUT
            pTimeFormat         : BSTR'''
        return super(IImageServiceInfo2, self).put_TimeValueFormat(pTimeFormat)
    def get_TimeReference(self):
        '''Method IImageServiceInfo2.get_TimeReference

           OUTPUT
            ppTimeReference     : ITimeReference**'''
        return super(IImageServiceInfo2, self).get_TimeReference()
    def putref_TimeReference(self, ppTimeReference):
        '''Method IImageServiceInfo2.putref_TimeReference

           INPUT
            ppTimeReference     : ITimeReference*'''
        return super(IImageServiceInfo2, self).putref_TimeReference(ppTimeReference)
    def get_TimeExtent(self):
        '''Method IImageServiceInfo2.get_TimeExtent

           OUTPUT
            ppTimeExtent        : ITimeExtent**'''
        return super(IImageServiceInfo2, self).get_TimeExtent()
    def putref_TimeExtent(self, ppTimeExtent):
        '''Method IImageServiceInfo2.putref_TimeExtent

           INPUT
            ppTimeExtent        : ITimeExtent*'''
        return super(IImageServiceInfo2, self).putref_TimeExtent(ppTimeExtent)
    def get_Name(self):
        '''Method IImageServiceInfo.get_Name (from IImageServiceInfo)

           OUTPUT
            pName               : BSTR*'''
        return super(IImageServiceInfo2, self).get_Name()
    def get_Description(self):
        '''Method IImageServiceInfo.get_Description (from IImageServiceInfo)

           OUTPUT
            pDescrition         : BSTR*'''
        return super(IImageServiceInfo2, self).get_Description()
    def get_SpatialReference(self):
        '''Method IImageServiceInfo.get_SpatialReference (from IImageServiceInfo)

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IImageServiceInfo2, self).get_SpatialReference()
    def get_Extent(self):
        '''Method IImageServiceInfo.get_Extent (from IImageServiceInfo)

           OUTPUT
            pExtent             : IEnvelope**'''
        return super(IImageServiceInfo2, self).get_Extent()
    def GetPixelSize(self):
        '''Method IImageServiceInfo.GetPixelSize (from IImageServiceInfo)

           OUTPUTS
            pDx                 : double*
            pDy                 : double*'''
        return super(IImageServiceInfo2, self).GetPixelSize()
    def GetStatistics(self, iBand):
        '''Method IImageServiceInfo.GetStatistics (from IImageServiceInfo)

           INPUT
            iBand               : long

           OUTPUTS
            pMin                : double*
            pMax                : double*
            pMean               : double*
            pStdv               : double*'''
        return super(IImageServiceInfo2, self).GetStatistics(iBand)
    def get_BandCount(self):
        '''Method IImageServiceInfo.get_BandCount (from IImageServiceInfo)

           OUTPUT
            pBandCount          : long*'''
        return super(IImageServiceInfo2, self).get_BandCount()
    def get_PixelType(self):
        '''Method IImageServiceInfo.get_PixelType (from IImageServiceInfo)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IImageServiceInfo2, self).get_PixelType()
    def get_NoData(self):
        '''Method IImageServiceInfo.get_NoData (from IImageServiceInfo)

           OUTPUT
            pNoData             : VARIANT*'''
        return super(IImageServiceInfo2, self).get_NoData()
    def get_MaximumPixelSize(self):
        '''Method IImageServiceInfo.get_MaximumPixelSize (from IImageServiceInfo)

           OUTPUT
            pMaxPixelSize       : double*'''
        return super(IImageServiceInfo2, self).get_MaximumPixelSize()
    def get_MinimumPixelSize(self):
        '''Method IImageServiceInfo.get_MinimumPixelSize (from IImageServiceInfo)

           OUTPUT
            pMinPixelSize       : double*'''
        return super(IImageServiceInfo2, self).get_MinimumPixelSize()
    def get_CopyrightText(self):
        '''Method IImageServiceInfo.get_CopyrightText (from IImageServiceInfo)

           OUTPUT
            pCopyright          : BSTR*'''
        return super(IImageServiceInfo2, self).get_CopyrightText()
    def put_CopyrightText(self, pCopyright):
        '''Method IImageServiceInfo.put_CopyrightText (from IImageServiceInfo)

           INPUT
            pCopyright          : BSTR'''
        return super(IImageServiceInfo2, self).put_CopyrightText(pCopyright)
    def get_ServiceDataType(self):
        '''Method IImageServiceInfo.get_ServiceDataType (from IImageServiceInfo)

           OUTPUT
            pDataType           : esriImageServiceDataType*'''
        return super(IImageServiceInfo2, self).get_ServiceDataType()
    def put_ServiceDataType(self, pDataType):
        '''Method IImageServiceInfo.put_ServiceDataType (from IImageServiceInfo)

           INPUT
            pDataType           : esriImageServiceDataType'''
        return super(IImageServiceInfo2, self).put_ServiceDataType(pDataType)
    def put_DefaultServiceProperties(self, pServiceProperties):
        '''Method IImageServiceInfo.put_DefaultServiceProperties (from IImageServiceInfo)

           INPUT
            pServiceProperties  : BSTR'''
        return super(IImageServiceInfo2, self).put_DefaultServiceProperties(pServiceProperties)
    def get_DefaultServiceProperties(self):
        '''Method IImageServiceInfo.get_DefaultServiceProperties (from IImageServiceInfo)

           OUTPUT
            pServiceProperties  : BSTR*'''
        return super(IImageServiceInfo2, self).get_DefaultServiceProperties()
    def get_MaxNCols(self):
        '''Method IImageServiceInfo.get_MaxNCols (from IImageServiceInfo)

           OUTPUT
            pMaxNCols           : long*'''
        return super(IImageServiceInfo2, self).get_MaxNCols()
    def get_MaxNRows(self):
        '''Method IImageServiceInfo.get_MaxNRows (from IImageServiceInfo)

           OUTPUT
            pMaxNRows           : long*'''
        return super(IImageServiceInfo2, self).get_MaxNRows()
    def get_ServiceSourceType(self):
        '''Method IImageServiceInfo.get_ServiceSourceType (from IImageServiceInfo)

           OUTPUT
            pServiceSourceType  : esriImageServiceSourceType*'''
        return super(IImageServiceInfo2, self).get_ServiceSourceType()
    def put_ServiceSourceType(self, pServiceSourceType):
        '''Method IImageServiceInfo.put_ServiceSourceType (from IImageServiceInfo)

           INPUT
            pServiceSourceType  : esriImageServiceSourceType'''
        return super(IImageServiceInfo2, self).put_ServiceSourceType(pServiceSourceType)
    AllowedCompressions = property(get_AllowedCompressions, put_AllowedCompressions, None)
    AllowedFields = property(get_AllowedFields, put_AllowedFields, None)
    AllowedItemMetadata = property(get_AllowedItemMetadata, put_AllowedItemMetadata, None)
    AllowedMosaicMethods = property(get_AllowedMosaicMethods, put_AllowedMosaicMethods, None)
    BandCount = property(get_BandCount, None, None)
    CopyrightText = property(get_CopyrightText, put_CopyrightText, None)
    DefaultCompression = property(get_DefaultCompression, put_DefaultCompression, None)
    DefaultCompressionQuality = property(get_DefaultCompressionQuality, put_DefaultCompressionQuality, None)
    DefaultMosaicMethod = property(get_DefaultMosaicMethod, put_DefaultMosaicMethod, None)
    DefaultResamplingMethod = property(get_DefaultResamplingMethod, put_DefaultResamplingMethod, None)
    DefaultServiceProperties = property(get_DefaultServiceProperties, put_DefaultServiceProperties, None)
    Description = property(get_Description, None, None)
    EndTimeFieldName = property(get_EndTimeFieldName, put_EndTimeFieldName, None)
    Extent = property(get_Extent, None, None)
    MaxDownloadImageCount = property(get_MaxDownloadImageCount, put_MaxDownloadImageCount, None)
    MaxMosaicImageCount = property(get_MaxMosaicImageCount, put_MaxMosaicImageCount, None)
    MaxNCols = property(get_MaxNCols, put_MaxNCols, None)
    MaxNRows = property(get_MaxNRows, put_MaxNRows, None)
    MaxRecordCount = property(get_MaxRecordCount, put_MaxRecordCount, None)
    MaximumPixelSize = property(get_MaximumPixelSize, None, None)
    MinimumPixelSize = property(get_MinimumPixelSize, None, None)
    Name = property(get_Name, None, None)
    NoData = property(get_NoData, None, None)
    PixelType = property(get_PixelType, None, None)
    ServiceDataType = property(get_ServiceDataType, put_ServiceDataType, None)
    ServiceSourceType = property(get_ServiceSourceType, put_ServiceSourceType, None)
    SpatialReference = property(get_SpatialReference, None, None)
    StartTimeFieldName = property(get_StartTimeFieldName, put_StartTimeFieldName, None)
    SupportBSQ = property(get_SupportBSQ, put_SupportBSQ, None)
    SupportsTime = property(get_SupportsTime, put_SupportsTime, None)
    TimeExtent = property(get_TimeExtent, putref_TimeExtent, None)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)
    TimeValueFormat = property(get_TimeValueFormat, put_TimeValueFormat, None)

class IImageServiceInfo3(_esriCarto.IImageServiceInfo3):
    _IID = uuid.UUID('021909fc-59e7-4082-900c-5bbef737c92c')

    def __init__(self, *args, **kw):
        super(IImageServiceInfo3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Histograms(self):
        '''Method IImageServiceInfo3.get_Histograms

           OUTPUT
            ppHistograms        : IRasterHistograms**'''
        return super(IImageServiceInfo3, self).get_Histograms()
    def get_Colormap(self):
        '''Method IImageServiceInfo3.get_Colormap

           OUTPUT
            ppColormap          : IRasterColormap**'''
        return super(IImageServiceInfo3, self).get_Colormap()
    def GetHistogram(self, iBand):
        '''Method IImageServiceInfo3.GetHistogram

           INPUT
            iBand               : long

           OUTPUT
            ppHistogram         : IRasterHistogram**'''
        return super(IImageServiceInfo3, self).GetHistogram(iBand)
    def get_RasterFunctions(self):
        '''Method IImageServiceInfo3.get_RasterFunctions

           OUTPUT
            ppFunctionInfos     : IRasterFunctionInfos**'''
        return super(IImageServiceInfo3, self).get_RasterFunctions()
    def putref_RasterFunctions(self, ppFunctionInfos):
        '''Method IImageServiceInfo3.putref_RasterFunctions

           INPUT
            ppFunctionInfos     : IRasterFunctionInfos*'''
        return super(IImageServiceInfo3, self).putref_RasterFunctions(ppFunctionInfos)
    def get_RasterTypes(self):
        '''Method IImageServiceInfo3.get_RasterTypes

           OUTPUT
            ppTypeInfos         : IRasterTypeInfos**'''
        return super(IImageServiceInfo3, self).get_RasterTypes()
    def putref_RasterTypes(self, ppTypeInfos):
        '''Method IImageServiceInfo3.putref_RasterTypes

           INPUT
            ppTypeInfos         : IRasterTypeInfos*'''
        return super(IImageServiceInfo3, self).putref_RasterTypes(ppTypeInfos)
    def get_MensurationCapabilities(self):
        '''Method IImageServiceInfo3.get_MensurationCapabilities

           OUTPUT
            pCapabilities       : BSTR*'''
        return super(IImageServiceInfo3, self).get_MensurationCapabilities()
    def put_MensurationCapabilities(self, pCapabilities):
        '''Method IImageServiceInfo3.put_MensurationCapabilities

           INPUT
            pCapabilities       : BSTR'''
        return super(IImageServiceInfo3, self).put_MensurationCapabilities(pCapabilities)
    def get_HasRasterAttributeTable(self):
        '''Method IImageServiceInfo3.get_HasRasterAttributeTable

           OUTPUT
            pHasTable           : VARIANT_BOOL*'''
        return super(IImageServiceInfo3, self).get_HasRasterAttributeTable()
    def put_HasRasterAttributeTable(self, pHasTable):
        '''Method IImageServiceInfo3.put_HasRasterAttributeTable

           INPUT
            pHasTable           : VARIANT_BOOL'''
        return super(IImageServiceInfo3, self).put_HasRasterAttributeTable(pHasTable)
    def get_MinScale(self):
        '''Method IImageServiceInfo3.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IImageServiceInfo3, self).get_MinScale()
    def put_MinScale(self, Scale):
        '''Method IImageServiceInfo3.put_MinScale

           INPUT
            Scale               : double'''
        return super(IImageServiceInfo3, self).put_MinScale(Scale)
    def get_MaxScale(self):
        '''Method IImageServiceInfo3.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IImageServiceInfo3, self).get_MaxScale()
    def put_MaxScale(self, Scale):
        '''Method IImageServiceInfo3.put_MaxScale

           INPUT
            Scale               : double'''
        return super(IImageServiceInfo3, self).put_MaxScale(Scale)
    def put_MinimumPixelSize(self, _arg1):
        '''Method IImageServiceInfo3.put_MinimumPixelSize

           INPUT
            _arg1               : double'''
        return super(IImageServiceInfo3, self).put_MinimumPixelSize(_arg1)
    def put_MaximumPixelSize(self, _arg1):
        '''Method IImageServiceInfo3.put_MaximumPixelSize

           INPUT
            _arg1               : double'''
        return super(IImageServiceInfo3, self).put_MaximumPixelSize(_arg1)
    def get_AllowedFields(self):
        '''Method IImageServiceInfo2.get_AllowedFields (from IImageServiceInfo2)

           OUTPUT
            pAllowedFields      : BSTR*'''
        return super(IImageServiceInfo3, self).get_AllowedFields()
    def put_AllowedFields(self, pAllowedFields):
        '''Method IImageServiceInfo2.put_AllowedFields (from IImageServiceInfo2)

           INPUT
            pAllowedFields      : BSTR'''
        return super(IImageServiceInfo3, self).put_AllowedFields(pAllowedFields)
    def get_AllowedCompressions(self):
        '''Method IImageServiceInfo2.get_AllowedCompressions (from IImageServiceInfo2)

           OUTPUT
            pAllowedCompressions: BSTR*'''
        return super(IImageServiceInfo3, self).get_AllowedCompressions()
    def put_AllowedCompressions(self, pAllowedCompressions):
        '''Method IImageServiceInfo2.put_AllowedCompressions (from IImageServiceInfo2)

           INPUT
            pAllowedCompressions: BSTR'''
        return super(IImageServiceInfo3, self).put_AllowedCompressions(pAllowedCompressions)
    def get_AllowedMosaicMethods(self):
        '''Method IImageServiceInfo2.get_AllowedMosaicMethods (from IImageServiceInfo2)

           OUTPUT
            pAllowedMethods     : BSTR*'''
        return super(IImageServiceInfo3, self).get_AllowedMosaicMethods()
    def put_AllowedMosaicMethods(self, pAllowedMethods):
        '''Method IImageServiceInfo2.put_AllowedMosaicMethods (from IImageServiceInfo2)

           INPUT
            pAllowedMethods     : BSTR'''
        return super(IImageServiceInfo3, self).put_AllowedMosaicMethods(pAllowedMethods)
    def get_AllowedItemMetadata(self):
        '''Method IImageServiceInfo2.get_AllowedItemMetadata (from IImageServiceInfo2)

           OUTPUT
            pLOD                : BSTR*'''
        return super(IImageServiceInfo3, self).get_AllowedItemMetadata()
    def put_AllowedItemMetadata(self, pLOD):
        '''Method IImageServiceInfo2.put_AllowedItemMetadata (from IImageServiceInfo2)

           INPUT
            pLOD                : BSTR'''
        return super(IImageServiceInfo3, self).put_AllowedItemMetadata(pLOD)
    def get_MaxRecordCount(self):
        '''Method IImageServiceInfo2.get_MaxRecordCount (from IImageServiceInfo2)

           OUTPUT
            pCount              : long*'''
        return super(IImageServiceInfo3, self).get_MaxRecordCount()
    def put_MaxRecordCount(self, pCount):
        '''Method IImageServiceInfo2.put_MaxRecordCount (from IImageServiceInfo2)

           INPUT
            pCount              : long'''
        return super(IImageServiceInfo3, self).put_MaxRecordCount(pCount)
    def get_MaxDownloadImageCount(self):
        '''Method IImageServiceInfo2.get_MaxDownloadImageCount (from IImageServiceInfo2)

           OUTPUT
            pCount              : long*'''
        return super(IImageServiceInfo3, self).get_MaxDownloadImageCount()
    def put_MaxDownloadImageCount(self, pCount):
        '''Method IImageServiceInfo2.put_MaxDownloadImageCount (from IImageServiceInfo2)

           INPUT
            pCount              : long'''
        return super(IImageServiceInfo3, self).put_MaxDownloadImageCount(pCount)
    def get_MaxMosaicImageCount(self):
        '''Method IImageServiceInfo2.get_MaxMosaicImageCount (from IImageServiceInfo2)

           OUTPUT
            pCount              : long*'''
        return super(IImageServiceInfo3, self).get_MaxMosaicImageCount()
    def put_MaxMosaicImageCount(self, pCount):
        '''Method IImageServiceInfo2.put_MaxMosaicImageCount (from IImageServiceInfo2)

           INPUT
            pCount              : long'''
        return super(IImageServiceInfo3, self).put_MaxMosaicImageCount(pCount)
    def put_MaxNCols(self, _arg1):
        '''Method IImageServiceInfo2.put_MaxNCols (from IImageServiceInfo2)

           INPUT
            _arg1               : long'''
        return super(IImageServiceInfo3, self).put_MaxNCols(_arg1)
    def put_MaxNRows(self, _arg1):
        '''Method IImageServiceInfo2.put_MaxNRows (from IImageServiceInfo2)

           INPUT
            _arg1               : long'''
        return super(IImageServiceInfo3, self).put_MaxNRows(_arg1)
    def get_DefaultCompression(self):
        '''Method IImageServiceInfo2.get_DefaultCompression (from IImageServiceInfo2)

           OUTPUT
            pCompression        : BSTR*'''
        return super(IImageServiceInfo3, self).get_DefaultCompression()
    def put_DefaultCompression(self, pCompression):
        '''Method IImageServiceInfo2.put_DefaultCompression (from IImageServiceInfo2)

           INPUT
            pCompression        : BSTR'''
        return super(IImageServiceInfo3, self).put_DefaultCompression(pCompression)
    def get_DefaultCompressionQuality(self):
        '''Method IImageServiceInfo2.get_DefaultCompressionQuality (from IImageServiceInfo2)

           OUTPUT
            pQuality            : long*'''
        return super(IImageServiceInfo3, self).get_DefaultCompressionQuality()
    def put_DefaultCompressionQuality(self, pQuality):
        '''Method IImageServiceInfo2.put_DefaultCompressionQuality (from IImageServiceInfo2)

           INPUT
            pQuality            : long'''
        return super(IImageServiceInfo3, self).put_DefaultCompressionQuality(pQuality)
    def get_DefaultResamplingMethod(self):
        '''Method IImageServiceInfo2.get_DefaultResamplingMethod (from IImageServiceInfo2)

           OUTPUT
            pResamplingMethod   : rstResamplingTypes*'''
        return super(IImageServiceInfo3, self).get_DefaultResamplingMethod()
    def put_DefaultResamplingMethod(self, pResamplingMethod):
        '''Method IImageServiceInfo2.put_DefaultResamplingMethod (from IImageServiceInfo2)

           INPUT
            pResamplingMethod   : rstResamplingTypes'''
        return super(IImageServiceInfo3, self).put_DefaultResamplingMethod(pResamplingMethod)
    def get_DefaultMosaicMethod(self):
        '''Method IImageServiceInfo2.get_DefaultMosaicMethod (from IImageServiceInfo2)

           OUTPUT
            pMosaicMethod       : esriMosaicMethod*'''
        return super(IImageServiceInfo3, self).get_DefaultMosaicMethod()
    def put_DefaultMosaicMethod(self, pMosaicMethod):
        '''Method IImageServiceInfo2.put_DefaultMosaicMethod (from IImageServiceInfo2)

           INPUT
            pMosaicMethod       : esriMosaicMethod'''
        return super(IImageServiceInfo3, self).put_DefaultMosaicMethod(pMosaicMethod)
    def get_SupportBSQ(self):
        '''Method IImageServiceInfo2.get_SupportBSQ (from IImageServiceInfo2)

           OUTPUT
            pBSQ                : VARIANT_BOOL*'''
        return super(IImageServiceInfo3, self).get_SupportBSQ()
    def put_SupportBSQ(self, pBSQ):
        '''Method IImageServiceInfo2.put_SupportBSQ (from IImageServiceInfo2)

           INPUT
            pBSQ                : VARIANT_BOOL'''
        return super(IImageServiceInfo3, self).put_SupportBSQ(pBSQ)
    def get_SupportsTime(self):
        '''Method IImageServiceInfo2.get_SupportsTime (from IImageServiceInfo2)

           OUTPUT
            supports            : VARIANT_BOOL*'''
        return super(IImageServiceInfo3, self).get_SupportsTime()
    def put_SupportsTime(self, supports):
        '''Method IImageServiceInfo2.put_SupportsTime (from IImageServiceInfo2)

           INPUT
            supports            : VARIANT_BOOL'''
        return super(IImageServiceInfo3, self).put_SupportsTime(supports)
    def get_StartTimeFieldName(self):
        '''Method IImageServiceInfo2.get_StartTimeFieldName (from IImageServiceInfo2)

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IImageServiceInfo3, self).get_StartTimeFieldName()
    def put_StartTimeFieldName(self, pFieldName):
        '''Method IImageServiceInfo2.put_StartTimeFieldName (from IImageServiceInfo2)

           INPUT
            pFieldName          : BSTR'''
        return super(IImageServiceInfo3, self).put_StartTimeFieldName(pFieldName)
    def get_EndTimeFieldName(self):
        '''Method IImageServiceInfo2.get_EndTimeFieldName (from IImageServiceInfo2)

           OUTPUT
            pFieldName          : BSTR*'''
        return super(IImageServiceInfo3, self).get_EndTimeFieldName()
    def put_EndTimeFieldName(self, pFieldName):
        '''Method IImageServiceInfo2.put_EndTimeFieldName (from IImageServiceInfo2)

           INPUT
            pFieldName          : BSTR'''
        return super(IImageServiceInfo3, self).put_EndTimeFieldName(pFieldName)
    def get_TimeValueFormat(self):
        '''Method IImageServiceInfo2.get_TimeValueFormat (from IImageServiceInfo2)

           OUTPUT
            pTimeFormat         : BSTR*'''
        return super(IImageServiceInfo3, self).get_TimeValueFormat()
    def put_TimeValueFormat(self, pTimeFormat):
        '''Method IImageServiceInfo2.put_TimeValueFormat (from IImageServiceInfo2)

           INPUT
            pTimeFormat         : BSTR'''
        return super(IImageServiceInfo3, self).put_TimeValueFormat(pTimeFormat)
    def get_TimeReference(self):
        '''Method IImageServiceInfo2.get_TimeReference (from IImageServiceInfo2)

           OUTPUT
            ppTimeReference     : ITimeReference**'''
        return super(IImageServiceInfo3, self).get_TimeReference()
    def putref_TimeReference(self, ppTimeReference):
        '''Method IImageServiceInfo2.putref_TimeReference (from IImageServiceInfo2)

           INPUT
            ppTimeReference     : ITimeReference*'''
        return super(IImageServiceInfo3, self).putref_TimeReference(ppTimeReference)
    def get_TimeExtent(self):
        '''Method IImageServiceInfo2.get_TimeExtent (from IImageServiceInfo2)

           OUTPUT
            ppTimeExtent        : ITimeExtent**'''
        return super(IImageServiceInfo3, self).get_TimeExtent()
    def putref_TimeExtent(self, ppTimeExtent):
        '''Method IImageServiceInfo2.putref_TimeExtent (from IImageServiceInfo2)

           INPUT
            ppTimeExtent        : ITimeExtent*'''
        return super(IImageServiceInfo3, self).putref_TimeExtent(ppTimeExtent)
    def get_Name(self):
        '''Method IImageServiceInfo.get_Name (from IImageServiceInfo)

           OUTPUT
            pName               : BSTR*'''
        return super(IImageServiceInfo3, self).get_Name()
    def get_Description(self):
        '''Method IImageServiceInfo.get_Description (from IImageServiceInfo)

           OUTPUT
            pDescrition         : BSTR*'''
        return super(IImageServiceInfo3, self).get_Description()
    def get_SpatialReference(self):
        '''Method IImageServiceInfo.get_SpatialReference (from IImageServiceInfo)

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IImageServiceInfo3, self).get_SpatialReference()
    def get_Extent(self):
        '''Method IImageServiceInfo.get_Extent (from IImageServiceInfo)

           OUTPUT
            pExtent             : IEnvelope**'''
        return super(IImageServiceInfo3, self).get_Extent()
    def GetPixelSize(self):
        '''Method IImageServiceInfo.GetPixelSize (from IImageServiceInfo)

           OUTPUTS
            pDx                 : double*
            pDy                 : double*'''
        return super(IImageServiceInfo3, self).GetPixelSize()
    def GetStatistics(self, iBand):
        '''Method IImageServiceInfo.GetStatistics (from IImageServiceInfo)

           INPUT
            iBand               : long

           OUTPUTS
            pMin                : double*
            pMax                : double*
            pMean               : double*
            pStdv               : double*'''
        return super(IImageServiceInfo3, self).GetStatistics(iBand)
    def get_BandCount(self):
        '''Method IImageServiceInfo.get_BandCount (from IImageServiceInfo)

           OUTPUT
            pBandCount          : long*'''
        return super(IImageServiceInfo3, self).get_BandCount()
    def get_PixelType(self):
        '''Method IImageServiceInfo.get_PixelType (from IImageServiceInfo)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IImageServiceInfo3, self).get_PixelType()
    def get_NoData(self):
        '''Method IImageServiceInfo.get_NoData (from IImageServiceInfo)

           OUTPUT
            pNoData             : VARIANT*'''
        return super(IImageServiceInfo3, self).get_NoData()
    def get_MaximumPixelSize(self):
        '''Method IImageServiceInfo.get_MaximumPixelSize (from IImageServiceInfo)

           OUTPUT
            pMaxPixelSize       : double*'''
        return super(IImageServiceInfo3, self).get_MaximumPixelSize()
    def get_MinimumPixelSize(self):
        '''Method IImageServiceInfo.get_MinimumPixelSize (from IImageServiceInfo)

           OUTPUT
            pMinPixelSize       : double*'''
        return super(IImageServiceInfo3, self).get_MinimumPixelSize()
    def get_CopyrightText(self):
        '''Method IImageServiceInfo.get_CopyrightText (from IImageServiceInfo)

           OUTPUT
            pCopyright          : BSTR*'''
        return super(IImageServiceInfo3, self).get_CopyrightText()
    def put_CopyrightText(self, pCopyright):
        '''Method IImageServiceInfo.put_CopyrightText (from IImageServiceInfo)

           INPUT
            pCopyright          : BSTR'''
        return super(IImageServiceInfo3, self).put_CopyrightText(pCopyright)
    def get_ServiceDataType(self):
        '''Method IImageServiceInfo.get_ServiceDataType (from IImageServiceInfo)

           OUTPUT
            pDataType           : esriImageServiceDataType*'''
        return super(IImageServiceInfo3, self).get_ServiceDataType()
    def put_ServiceDataType(self, pDataType):
        '''Method IImageServiceInfo.put_ServiceDataType (from IImageServiceInfo)

           INPUT
            pDataType           : esriImageServiceDataType'''
        return super(IImageServiceInfo3, self).put_ServiceDataType(pDataType)
    def put_DefaultServiceProperties(self, pServiceProperties):
        '''Method IImageServiceInfo.put_DefaultServiceProperties (from IImageServiceInfo)

           INPUT
            pServiceProperties  : BSTR'''
        return super(IImageServiceInfo3, self).put_DefaultServiceProperties(pServiceProperties)
    def get_DefaultServiceProperties(self):
        '''Method IImageServiceInfo.get_DefaultServiceProperties (from IImageServiceInfo)

           OUTPUT
            pServiceProperties  : BSTR*'''
        return super(IImageServiceInfo3, self).get_DefaultServiceProperties()
    def get_MaxNCols(self):
        '''Method IImageServiceInfo.get_MaxNCols (from IImageServiceInfo)

           OUTPUT
            pMaxNCols           : long*'''
        return super(IImageServiceInfo3, self).get_MaxNCols()
    def get_MaxNRows(self):
        '''Method IImageServiceInfo.get_MaxNRows (from IImageServiceInfo)

           OUTPUT
            pMaxNRows           : long*'''
        return super(IImageServiceInfo3, self).get_MaxNRows()
    def get_ServiceSourceType(self):
        '''Method IImageServiceInfo.get_ServiceSourceType (from IImageServiceInfo)

           OUTPUT
            pServiceSourceType  : esriImageServiceSourceType*'''
        return super(IImageServiceInfo3, self).get_ServiceSourceType()
    def put_ServiceSourceType(self, pServiceSourceType):
        '''Method IImageServiceInfo.put_ServiceSourceType (from IImageServiceInfo)

           INPUT
            pServiceSourceType  : esriImageServiceSourceType'''
        return super(IImageServiceInfo3, self).put_ServiceSourceType(pServiceSourceType)
    AllowedCompressions = property(get_AllowedCompressions, put_AllowedCompressions, None)
    AllowedFields = property(get_AllowedFields, put_AllowedFields, None)
    AllowedItemMetadata = property(get_AllowedItemMetadata, put_AllowedItemMetadata, None)
    AllowedMosaicMethods = property(get_AllowedMosaicMethods, put_AllowedMosaicMethods, None)
    BandCount = property(get_BandCount, None, None)
    Colormap = property(get_Colormap, None, None)
    CopyrightText = property(get_CopyrightText, put_CopyrightText, None)
    DefaultCompression = property(get_DefaultCompression, put_DefaultCompression, None)
    DefaultCompressionQuality = property(get_DefaultCompressionQuality, put_DefaultCompressionQuality, None)
    DefaultMosaicMethod = property(get_DefaultMosaicMethod, put_DefaultMosaicMethod, None)
    DefaultResamplingMethod = property(get_DefaultResamplingMethod, put_DefaultResamplingMethod, None)
    DefaultServiceProperties = property(get_DefaultServiceProperties, put_DefaultServiceProperties, None)
    Description = property(get_Description, None, None)
    EndTimeFieldName = property(get_EndTimeFieldName, put_EndTimeFieldName, None)
    Extent = property(get_Extent, None, None)
    HasRasterAttributeTable = property(get_HasRasterAttributeTable, put_HasRasterAttributeTable, None)
    Histograms = property(get_Histograms, None, None)
    MaxDownloadImageCount = property(get_MaxDownloadImageCount, put_MaxDownloadImageCount, None)
    MaxMosaicImageCount = property(get_MaxMosaicImageCount, put_MaxMosaicImageCount, None)
    MaxNCols = property(get_MaxNCols, put_MaxNCols, None)
    MaxNRows = property(get_MaxNRows, put_MaxNRows, None)
    MaxRecordCount = property(get_MaxRecordCount, put_MaxRecordCount, None)
    MaxScale = property(get_MaxScale, put_MaxScale, None)
    MaximumPixelSize = property(get_MaximumPixelSize, put_MaximumPixelSize, None)
    MensurationCapabilities = property(get_MensurationCapabilities, put_MensurationCapabilities, None)
    MinScale = property(get_MinScale, put_MinScale, None)
    MinimumPixelSize = property(get_MinimumPixelSize, put_MinimumPixelSize, None)
    Name = property(get_Name, None, None)
    NoData = property(get_NoData, None, None)
    PixelType = property(get_PixelType, None, None)
    RasterFunctions = property(get_RasterFunctions, putref_RasterFunctions, None)
    RasterTypes = property(get_RasterTypes, putref_RasterTypes, None)
    ServiceDataType = property(get_ServiceDataType, put_ServiceDataType, None)
    ServiceSourceType = property(get_ServiceSourceType, put_ServiceSourceType, None)
    SpatialReference = property(get_SpatialReference, None, None)
    StartTimeFieldName = property(get_StartTimeFieldName, put_StartTimeFieldName, None)
    SupportBSQ = property(get_SupportBSQ, put_SupportBSQ, None)
    SupportsTime = property(get_SupportsTime, put_SupportsTime, None)
    TimeExtent = property(get_TimeExtent, putref_TimeExtent, None)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)
    TimeValueFormat = property(get_TimeValueFormat, put_TimeValueFormat, None)

class IImageQueryFilter(_esriCarto.IImageQueryFilter):
    _IID = uuid.UUID('316c6fb0-b53d-44e8-9b22-ffbeafc5a884')

    def __init__(self, *args, **kw):
        super(IImageQueryFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PixelSize(self):
        '''Method IImageQueryFilter.get_PixelSize

           OUTPUT
            ppPixelSize         : IPoint**'''
        return super(IImageQueryFilter, self).get_PixelSize()
    def putref_PixelSize(self, ppPixelSize):
        '''Method IImageQueryFilter.putref_PixelSize

           INPUT
            ppPixelSize         : IPoint*'''
        return super(IImageQueryFilter, self).putref_PixelSize(ppPixelSize)
    PixelSize = property(get_PixelSize, putref_PixelSize, None)

class IGeoImageDescription2(_esriCarto.IGeoImageDescription2):
    _IID = uuid.UUID('91efda05-0c71-4478-ac90-1e98752f10f0')

    def __init__(self, *args, **kw):
        super(IGeoImageDescription2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MosaicRule(self):
        '''Method IGeoImageDescription2.get_MosaicRule

           OUTPUT
            ppMosaicRule        : IMosaicRule**'''
        return super(IGeoImageDescription2, self).get_MosaicRule()
    def putref_MosaicRule(self, ppMosaicRule):
        '''Method IGeoImageDescription2.putref_MosaicRule

           INPUT
            ppMosaicRule        : IMosaicRule*'''
        return super(IGeoImageDescription2, self).putref_MosaicRule(ppMosaicRule)
    def get_RenderingRule(self):
        '''Method IGeoImageDescription2.get_RenderingRule

           OUTPUT
            ppRenderingRule     : IRenderingRule**'''
        return super(IGeoImageDescription2, self).get_RenderingRule()
    def putref_RenderingRule(self, ppRenderingRule):
        '''Method IGeoImageDescription2.putref_RenderingRule

           INPUT
            ppRenderingRule     : IRenderingRule*'''
        return super(IGeoImageDescription2, self).putref_RenderingRule(ppRenderingRule)
    def get_BSQ(self):
        '''Method IGeoImageDescription2.get_BSQ

           OUTPUT
            pBSQ                : VARIANT_BOOL*'''
        return super(IGeoImageDescription2, self).get_BSQ()
    def put_BSQ(self, pBSQ):
        '''Method IGeoImageDescription2.put_BSQ

           INPUT
            pBSQ                : VARIANT_BOOL'''
        return super(IGeoImageDescription2, self).put_BSQ(pBSQ)
    def get_SpatialReference(self):
        '''Method IGeoImageDescription.get_SpatialReference (from IGeoImageDescription)

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGeoImageDescription2, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method IGeoImageDescription.putref_SpatialReference (from IGeoImageDescription)

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IGeoImageDescription2, self).putref_SpatialReference(ppSpatialReference)
    def get_Extent(self):
        '''Method IGeoImageDescription.get_Extent (from IGeoImageDescription)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGeoImageDescription2, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IGeoImageDescription.putref_Extent (from IGeoImageDescription)

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IGeoImageDescription2, self).putref_Extent(ppExtent)
    def get_Width(self):
        '''Method IGeoImageDescription.get_Width (from IGeoImageDescription)

           OUTPUT
            pNumCols            : long*'''
        return super(IGeoImageDescription2, self).get_Width()
    def put_Width(self, pNumCols):
        '''Method IGeoImageDescription.put_Width (from IGeoImageDescription)

           INPUT
            pNumCols            : long'''
        return super(IGeoImageDescription2, self).put_Width(pNumCols)
    def get_Height(self):
        '''Method IGeoImageDescription.get_Height (from IGeoImageDescription)

           OUTPUT
            pNumRows            : long*'''
        return super(IGeoImageDescription2, self).get_Height()
    def put_Height(self, pNumRows):
        '''Method IGeoImageDescription.put_Height (from IGeoImageDescription)

           INPUT
            pNumRows            : long'''
        return super(IGeoImageDescription2, self).put_Height(pNumRows)
    def get_PixelType(self):
        '''Method IGeoImageDescription.get_PixelType (from IGeoImageDescription)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IGeoImageDescription2, self).get_PixelType()
    def put_PixelType(self, pPixelType):
        '''Method IGeoImageDescription.put_PixelType (from IGeoImageDescription)

           INPUT
            pPixelType          : rstPixelType'''
        return super(IGeoImageDescription2, self).put_PixelType(pPixelType)
    def get_NoData(self):
        '''Method IGeoImageDescription.get_NoData (from IGeoImageDescription)

           OUTPUT
            pNoData             : VARIANT*'''
        return super(IGeoImageDescription2, self).get_NoData()
    def put_NoData(self, pNoData):
        '''Method IGeoImageDescription.put_NoData (from IGeoImageDescription)

           INPUT
            pNoData             : VARIANT'''
        return super(IGeoImageDescription2, self).put_NoData(pNoData)
    def get_Interpolation(self):
        '''Method IGeoImageDescription.get_Interpolation (from IGeoImageDescription)

           OUTPUT
            pInterpolation      : rstResamplingTypes*'''
        return super(IGeoImageDescription2, self).get_Interpolation()
    def put_Interpolation(self, pInterpolation):
        '''Method IGeoImageDescription.put_Interpolation (from IGeoImageDescription)

           INPUT
            pInterpolation      : rstResamplingTypes'''
        return super(IGeoImageDescription2, self).put_Interpolation(pInterpolation)
    def get_Compression(self):
        '''Method IGeoImageDescription.get_Compression (from IGeoImageDescription)

           OUTPUT
            pCompression        : BSTR*'''
        return super(IGeoImageDescription2, self).get_Compression()
    def put_Compression(self, pCompression):
        '''Method IGeoImageDescription.put_Compression (from IGeoImageDescription)

           INPUT
            pCompression        : BSTR'''
        return super(IGeoImageDescription2, self).put_Compression(pCompression)
    def get_CompressionQuality(self):
        '''Method IGeoImageDescription.get_CompressionQuality (from IGeoImageDescription)

           OUTPUT
            pQuality            : long*'''
        return super(IGeoImageDescription2, self).get_CompressionQuality()
    def put_CompressionQuality(self, pQuality):
        '''Method IGeoImageDescription.put_CompressionQuality (from IGeoImageDescription)

           INPUT
            pQuality            : long'''
        return super(IGeoImageDescription2, self).put_CompressionQuality(pQuality)
    def get_BandSelection(self):
        '''Method IGeoImageDescription.get_BandSelection (from IGeoImageDescription)

           OUTPUT
            ppBandIDs           : ILongArray**'''
        return super(IGeoImageDescription2, self).get_BandSelection()
    def putref_BandSelection(self, ppBandIDs):
        '''Method IGeoImageDescription.putref_BandSelection (from IGeoImageDescription)

           INPUT
            ppBandIDs           : ILongArray*'''
        return super(IGeoImageDescription2, self).putref_BandSelection(ppBandIDs)
    def put_MosaicProperties(self, pMosaicProperties):
        '''Method IGeoImageDescription.put_MosaicProperties (from IGeoImageDescription)

           INPUT
            pMosaicProperties   : BSTR'''
        return super(IGeoImageDescription2, self).put_MosaicProperties(pMosaicProperties)
    def get_MosaicProperties(self):
        '''Method IGeoImageDescription.get_MosaicProperties (from IGeoImageDescription)

           OUTPUT
            pMosaicProperties   : BSTR*'''
        return super(IGeoImageDescription2, self).get_MosaicProperties()
    def put_ViewpointProperties(self, pViewpointProperties):
        '''Method IGeoImageDescription.put_ViewpointProperties (from IGeoImageDescription)

           INPUT
            pViewpointProperties: BSTR'''
        return super(IGeoImageDescription2, self).put_ViewpointProperties(pViewpointProperties)
    def get_ViewpointProperties(self):
        '''Method IGeoImageDescription.get_ViewpointProperties (from IGeoImageDescription)

           OUTPUT
            pViewpointProperties: BSTR*'''
        return super(IGeoImageDescription2, self).get_ViewpointProperties()
    BSQ = property(get_BSQ, put_BSQ, None)
    BandSelection = property(get_BandSelection, putref_BandSelection, None)
    Compression = property(get_Compression, put_Compression, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    Extent = property(get_Extent, putref_Extent, None)
    Height = property(get_Height, put_Height, None)
    Interpolation = property(get_Interpolation, put_Interpolation, None)
    MosaicProperties = property(get_MosaicProperties, put_MosaicProperties, None)
    MosaicRule = property(get_MosaicRule, putref_MosaicRule, None)
    NoData = property(get_NoData, put_NoData, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    RenderingRule = property(get_RenderingRule, putref_RenderingRule, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ViewpointProperties = property(get_ViewpointProperties, put_ViewpointProperties, None)
    Width = property(get_Width, put_Width, None)

class IGeoImageDescription3(_esriCarto.IGeoImageDescription3):
    _IID = uuid.UUID('0dd536aa-005b-455b-8722-8b08eb11f1ac')

    def __init__(self, *args, **kw):
        super(IGeoImageDescription3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NoDataInterpretation(self):
        '''Method IGeoImageDescription3.get_NoDataInterpretation

           OUTPUT
            pNoDataInterpretation: esriNoDataInterpretation*'''
        return super(IGeoImageDescription3, self).get_NoDataInterpretation()
    def put_NoDataInterpretation(self, pNoDataInterpretation):
        '''Method IGeoImageDescription3.put_NoDataInterpretation

           INPUT
            pNoDataInterpretation: esriNoDataInterpretation'''
        return super(IGeoImageDescription3, self).put_NoDataInterpretation(pNoDataInterpretation)
    def get_GeoTransformation(self):
        '''Method IGeoImageDescription3.get_GeoTransformation

           OUTPUT
            geotransform        : IGeoTransformation**'''
        return super(IGeoImageDescription3, self).get_GeoTransformation()
    def putref_GeoTransformation(self, geotransform):
        '''Method IGeoImageDescription3.putref_GeoTransformation

           INPUT
            geotransform        : IGeoTransformation*'''
        return super(IGeoImageDescription3, self).putref_GeoTransformation(geotransform)
    def get_ResamplingHint(self):
        '''Method IGeoImageDescription3.get_ResamplingHint

           OUTPUT
            pHint               : esriRasterResamplingHint*'''
        return super(IGeoImageDescription3, self).get_ResamplingHint()
    def put_ResamplingHint(self, pHint):
        '''Method IGeoImageDescription3.put_ResamplingHint

           INPUT
            pHint               : esriRasterResamplingHint'''
        return super(IGeoImageDescription3, self).put_ResamplingHint(pHint)
    def get_MosaicRule(self):
        '''Method IGeoImageDescription2.get_MosaicRule (from IGeoImageDescription2)

           OUTPUT
            ppMosaicRule        : IMosaicRule**'''
        return super(IGeoImageDescription3, self).get_MosaicRule()
    def putref_MosaicRule(self, ppMosaicRule):
        '''Method IGeoImageDescription2.putref_MosaicRule (from IGeoImageDescription2)

           INPUT
            ppMosaicRule        : IMosaicRule*'''
        return super(IGeoImageDescription3, self).putref_MosaicRule(ppMosaicRule)
    def get_RenderingRule(self):
        '''Method IGeoImageDescription2.get_RenderingRule (from IGeoImageDescription2)

           OUTPUT
            ppRenderingRule     : IRenderingRule**'''
        return super(IGeoImageDescription3, self).get_RenderingRule()
    def putref_RenderingRule(self, ppRenderingRule):
        '''Method IGeoImageDescription2.putref_RenderingRule (from IGeoImageDescription2)

           INPUT
            ppRenderingRule     : IRenderingRule*'''
        return super(IGeoImageDescription3, self).putref_RenderingRule(ppRenderingRule)
    def get_BSQ(self):
        '''Method IGeoImageDescription2.get_BSQ (from IGeoImageDescription2)

           OUTPUT
            pBSQ                : VARIANT_BOOL*'''
        return super(IGeoImageDescription3, self).get_BSQ()
    def put_BSQ(self, pBSQ):
        '''Method IGeoImageDescription2.put_BSQ (from IGeoImageDescription2)

           INPUT
            pBSQ                : VARIANT_BOOL'''
        return super(IGeoImageDescription3, self).put_BSQ(pBSQ)
    def get_SpatialReference(self):
        '''Method IGeoImageDescription.get_SpatialReference (from IGeoImageDescription)

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IGeoImageDescription3, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method IGeoImageDescription.putref_SpatialReference (from IGeoImageDescription)

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IGeoImageDescription3, self).putref_SpatialReference(ppSpatialReference)
    def get_Extent(self):
        '''Method IGeoImageDescription.get_Extent (from IGeoImageDescription)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IGeoImageDescription3, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IGeoImageDescription.putref_Extent (from IGeoImageDescription)

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IGeoImageDescription3, self).putref_Extent(ppExtent)
    def get_Width(self):
        '''Method IGeoImageDescription.get_Width (from IGeoImageDescription)

           OUTPUT
            pNumCols            : long*'''
        return super(IGeoImageDescription3, self).get_Width()
    def put_Width(self, pNumCols):
        '''Method IGeoImageDescription.put_Width (from IGeoImageDescription)

           INPUT
            pNumCols            : long'''
        return super(IGeoImageDescription3, self).put_Width(pNumCols)
    def get_Height(self):
        '''Method IGeoImageDescription.get_Height (from IGeoImageDescription)

           OUTPUT
            pNumRows            : long*'''
        return super(IGeoImageDescription3, self).get_Height()
    def put_Height(self, pNumRows):
        '''Method IGeoImageDescription.put_Height (from IGeoImageDescription)

           INPUT
            pNumRows            : long'''
        return super(IGeoImageDescription3, self).put_Height(pNumRows)
    def get_PixelType(self):
        '''Method IGeoImageDescription.get_PixelType (from IGeoImageDescription)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IGeoImageDescription3, self).get_PixelType()
    def put_PixelType(self, pPixelType):
        '''Method IGeoImageDescription.put_PixelType (from IGeoImageDescription)

           INPUT
            pPixelType          : rstPixelType'''
        return super(IGeoImageDescription3, self).put_PixelType(pPixelType)
    def get_NoData(self):
        '''Method IGeoImageDescription.get_NoData (from IGeoImageDescription)

           OUTPUT
            pNoData             : VARIANT*'''
        return super(IGeoImageDescription3, self).get_NoData()
    def put_NoData(self, pNoData):
        '''Method IGeoImageDescription.put_NoData (from IGeoImageDescription)

           INPUT
            pNoData             : VARIANT'''
        return super(IGeoImageDescription3, self).put_NoData(pNoData)
    def get_Interpolation(self):
        '''Method IGeoImageDescription.get_Interpolation (from IGeoImageDescription)

           OUTPUT
            pInterpolation      : rstResamplingTypes*'''
        return super(IGeoImageDescription3, self).get_Interpolation()
    def put_Interpolation(self, pInterpolation):
        '''Method IGeoImageDescription.put_Interpolation (from IGeoImageDescription)

           INPUT
            pInterpolation      : rstResamplingTypes'''
        return super(IGeoImageDescription3, self).put_Interpolation(pInterpolation)
    def get_Compression(self):
        '''Method IGeoImageDescription.get_Compression (from IGeoImageDescription)

           OUTPUT
            pCompression        : BSTR*'''
        return super(IGeoImageDescription3, self).get_Compression()
    def put_Compression(self, pCompression):
        '''Method IGeoImageDescription.put_Compression (from IGeoImageDescription)

           INPUT
            pCompression        : BSTR'''
        return super(IGeoImageDescription3, self).put_Compression(pCompression)
    def get_CompressionQuality(self):
        '''Method IGeoImageDescription.get_CompressionQuality (from IGeoImageDescription)

           OUTPUT
            pQuality            : long*'''
        return super(IGeoImageDescription3, self).get_CompressionQuality()
    def put_CompressionQuality(self, pQuality):
        '''Method IGeoImageDescription.put_CompressionQuality (from IGeoImageDescription)

           INPUT
            pQuality            : long'''
        return super(IGeoImageDescription3, self).put_CompressionQuality(pQuality)
    def get_BandSelection(self):
        '''Method IGeoImageDescription.get_BandSelection (from IGeoImageDescription)

           OUTPUT
            ppBandIDs           : ILongArray**'''
        return super(IGeoImageDescription3, self).get_BandSelection()
    def putref_BandSelection(self, ppBandIDs):
        '''Method IGeoImageDescription.putref_BandSelection (from IGeoImageDescription)

           INPUT
            ppBandIDs           : ILongArray*'''
        return super(IGeoImageDescription3, self).putref_BandSelection(ppBandIDs)
    def put_MosaicProperties(self, pMosaicProperties):
        '''Method IGeoImageDescription.put_MosaicProperties (from IGeoImageDescription)

           INPUT
            pMosaicProperties   : BSTR'''
        return super(IGeoImageDescription3, self).put_MosaicProperties(pMosaicProperties)
    def get_MosaicProperties(self):
        '''Method IGeoImageDescription.get_MosaicProperties (from IGeoImageDescription)

           OUTPUT
            pMosaicProperties   : BSTR*'''
        return super(IGeoImageDescription3, self).get_MosaicProperties()
    def put_ViewpointProperties(self, pViewpointProperties):
        '''Method IGeoImageDescription.put_ViewpointProperties (from IGeoImageDescription)

           INPUT
            pViewpointProperties: BSTR'''
        return super(IGeoImageDescription3, self).put_ViewpointProperties(pViewpointProperties)
    def get_ViewpointProperties(self):
        '''Method IGeoImageDescription.get_ViewpointProperties (from IGeoImageDescription)

           OUTPUT
            pViewpointProperties: BSTR*'''
        return super(IGeoImageDescription3, self).get_ViewpointProperties()
    BSQ = property(get_BSQ, put_BSQ, None)
    BandSelection = property(get_BandSelection, putref_BandSelection, None)
    Compression = property(get_Compression, put_Compression, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    Extent = property(get_Extent, putref_Extent, None)
    GeoTransformation = property(get_GeoTransformation, putref_GeoTransformation, None)
    Height = property(get_Height, put_Height, None)
    Interpolation = property(get_Interpolation, put_Interpolation, None)
    MosaicProperties = property(get_MosaicProperties, put_MosaicProperties, None)
    MosaicRule = property(get_MosaicRule, putref_MosaicRule, None)
    NoData = property(get_NoData, put_NoData, None)
    NoDataInterpretation = property(get_NoDataInterpretation, put_NoDataInterpretation, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    RenderingRule = property(get_RenderingRule, putref_RenderingRule, None)
    ResamplingHint = property(get_ResamplingHint, put_ResamplingHint, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ViewpointProperties = property(get_ViewpointProperties, put_ViewpointProperties, None)
    Width = property(get_Width, put_Width, None)

class IRasterItemDescription(_esriCarto.IRasterItemDescription):
    _IID = uuid.UUID('e7a23083-b9bb-41bf-9253-c148b0ab033e')

    def __init__(self, *args, **kw):
        super(IRasterItemDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DataFileNames(self):
        '''Method IRasterItemDescription.get_DataFileNames

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IRasterItemDescription, self).get_DataFileNames()
    def putref_DataFileNames(self, ppNames):
        '''Method IRasterItemDescription.putref_DataFileNames

           INPUT
            ppNames             : IStringArray*'''
        return super(IRasterItemDescription, self).putref_DataFileNames(ppNames)
    def get_DataFileURLs(self):
        '''Method IRasterItemDescription.get_DataFileURLs

           OUTPUT
            ppURLs              : IStringArray**'''
        return super(IRasterItemDescription, self).get_DataFileURLs()
    def putref_DataFileURLs(self, ppURLs):
        '''Method IRasterItemDescription.putref_DataFileURLs

           INPUT
            ppURLs              : IStringArray*'''
        return super(IRasterItemDescription, self).putref_DataFileURLs(ppURLs)
    def get_Type(self):
        '''Method IRasterItemDescription.get_Type

           OUTPUT
            pType               : BSTR*'''
        return super(IRasterItemDescription, self).get_Type()
    def put_Type(self, pType):
        '''Method IRasterItemDescription.put_Type

           INPUT
            pType               : BSTR'''
        return super(IRasterItemDescription, self).put_Type(pType)
    def get_Properties(self):
        '''Method IRasterItemDescription.get_Properties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IRasterItemDescription, self).get_Properties()
    def putref_Properties(self, ppProperties):
        '''Method IRasterItemDescription.putref_Properties

           INPUT
            ppProperties        : IPropertySet*'''
        return super(IRasterItemDescription, self).putref_Properties(ppProperties)
    def get_MinimumCellSizeFactor(self):
        '''Method IRasterItemDescription.get_MinimumCellSizeFactor

           OUTPUT
            pMinCellSizeFactor  : double*'''
        return super(IRasterItemDescription, self).get_MinimumCellSizeFactor()
    def put_MinimumCellSizeFactor(self, pMinCellSizeFactor):
        '''Method IRasterItemDescription.put_MinimumCellSizeFactor

           INPUT
            pMinCellSizeFactor  : double'''
        return super(IRasterItemDescription, self).put_MinimumCellSizeFactor(pMinCellSizeFactor)
    def get_MaximumCellSizeFactor(self):
        '''Method IRasterItemDescription.get_MaximumCellSizeFactor

           OUTPUT
            pMaxCellSizeFactor  : double*'''
        return super(IRasterItemDescription, self).get_MaximumCellSizeFactor()
    def put_MaximumCellSizeFactor(self, pMaxCellSizeFactor):
        '''Method IRasterItemDescription.put_MaximumCellSizeFactor

           INPUT
            pMaxCellSizeFactor  : double'''
        return super(IRasterItemDescription, self).put_MaximumCellSizeFactor(pMaxCellSizeFactor)
    def get_GeodataXform(self):
        '''Method IRasterItemDescription.get_GeodataXform

           OUTPUT
            ppXf                : IGeodataXform**'''
        return super(IRasterItemDescription, self).get_GeodataXform()
    def putref_GeodataXform(self, ppXf):
        '''Method IRasterItemDescription.putref_GeodataXform

           INPUT
            ppXf                : IGeodataXform*'''
        return super(IRasterItemDescription, self).putref_GeodataXform(ppXf)
    def get_GeodataXformApplyMethod(self):
        '''Method IRasterItemDescription.get_GeodataXformApplyMethod

           OUTPUT
            pMethod             : esriGeodataXformApplyMethod*'''
        return super(IRasterItemDescription, self).get_GeodataXformApplyMethod()
    def put_GeodataXformApplyMethod(self, pMethod):
        '''Method IRasterItemDescription.put_GeodataXformApplyMethod

           INPUT
            pMethod             : esriGeodataXformApplyMethod'''
        return super(IRasterItemDescription, self).put_GeodataXformApplyMethod(pMethod)
    def put_ComputeStatistics(self, pvbComputeStatistics):
        '''Method IRasterItemDescription.put_ComputeStatistics

           INPUT
            pvbComputeStatistics: VARIANT_BOOL'''
        return super(IRasterItemDescription, self).put_ComputeStatistics(pvbComputeStatistics)
    def get_ComputeStatistics(self):
        '''Method IRasterItemDescription.get_ComputeStatistics

           OUTPUT
            pvbComputeStatistics: VARIANT_BOOL*'''
        return super(IRasterItemDescription, self).get_ComputeStatistics()
    def put_BuildPyramids(self, pvbBuildPyramids):
        '''Method IRasterItemDescription.put_BuildPyramids

           INPUT
            pvbBuildPyramids    : VARIANT_BOOL'''
        return super(IRasterItemDescription, self).put_BuildPyramids(pvbBuildPyramids)
    def get_BuildPyramids(self):
        '''Method IRasterItemDescription.get_BuildPyramids

           OUTPUT
            pvbBuildPyramids    : VARIANT_BOOL*'''
        return super(IRasterItemDescription, self).get_BuildPyramids()
    def put_BuildThumbnail(self, pvbBuildThumbnail):
        '''Method IRasterItemDescription.put_BuildThumbnail

           INPUT
            pvbBuildThumbnail   : VARIANT_BOOL'''
        return super(IRasterItemDescription, self).put_BuildThumbnail(pvbBuildThumbnail)
    def get_BuildThumbnail(self):
        '''Method IRasterItemDescription.get_BuildThumbnail

           OUTPUT
            pvbBuildThumbnail   : VARIANT_BOOL*'''
        return super(IRasterItemDescription, self).get_BuildThumbnail()
    BuildPyramids = property(get_BuildPyramids, put_BuildPyramids, None)
    BuildThumbnail = property(get_BuildThumbnail, put_BuildThumbnail, None)
    ComputeStatistics = property(get_ComputeStatistics, put_ComputeStatistics, None)
    DataFileNames = property(get_DataFileNames, putref_DataFileNames, None)
    DataFileURLs = property(get_DataFileURLs, putref_DataFileURLs, None)
    GeodataXform = property(get_GeodataXform, putref_GeodataXform, None)
    GeodataXformApplyMethod = property(get_GeodataXformApplyMethod, put_GeodataXformApplyMethod, None)
    MaximumCellSizeFactor = property(get_MaximumCellSizeFactor, put_MaximumCellSizeFactor, None)
    MinimumCellSizeFactor = property(get_MinimumCellSizeFactor, put_MinimumCellSizeFactor, None)
    Properties = property(get_Properties, putref_Properties, None)
    Type = property(get_Type, put_Type, None)

class IRasterItemDescriptions(_esriCarto.IRasterItemDescriptions):
    _IID = uuid.UUID('8304af31-ee94-43cb-8fbb-f3e1ff096b18')
    def get_Count(self):
        '''Method IRasterItemDescriptions.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IRasterItemDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method IRasterItemDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            pItemDescription    : IRasterItemDescription**'''
        return super(IRasterItemDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IRasterItemDescriptions.Remove

           INPUT
            Index               : long'''
        return super(IRasterItemDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method IRasterItemDescriptions.RemoveAll'''
        return super(IRasterItemDescriptions, self).RemoveAll()
    def Add(self, pItemDescription):
        '''Method IRasterItemDescriptions.Add

           INPUT
            pItemDescription    : IRasterItemDescription*'''
        return super(IRasterItemDescriptions, self).Add(pItemDescription)
    def Insert(self, Index, pItemDescription):
        '''Method IRasterItemDescriptions.Insert

           INPUTS
            Index               : long
            pItemDescription    : IRasterItemDescription*'''
        return super(IRasterItemDescriptions, self).Insert(Index, pItemDescription)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IImageServer4(_esriCarto.IImageServer4):
    _IID = uuid.UUID('08586b82-874c-492a-93b2-73b91a92d28f')
    def Add(self, pItemDescriptions):
        '''Method IImageServer4.Add

           INPUT
            pItemDescriptions   : IRasterItemDescriptions*

           OUTPUT
            ppResults           : IImageServerEditResults**'''
        return super(IImageServer4, self).Add(pItemDescriptions)
    def Update(self, pRIDs, pItemDescriptions):
        '''Method IImageServer4.Update

           INPUTS
            pRIDs               : IFIDSet*
            pItemDescriptions   : IRasterItemDescriptions*

           OUTPUT
            ppResults           : IImageServerEditResults**'''
        return super(IImageServer4, self).Update(pRIDs, pItemDescriptions)
    def Delete(self, pRIDs):
        '''Method IImageServer4.Delete

           INPUT
            pRIDs               : IFIDSet*

           OUTPUT
            ppResults           : IImageServerEditResults**'''
        return super(IImageServer4, self).Delete(pRIDs)
    def Measure(self, pFrom, pTo, pMosaicRule, pCellsize, operation):
        '''Method IImageServer4.Measure

           INPUTS
            pFrom               : IGeometry*
            pTo                 : IGeometry*
            pMosaicRule         : IMosaicRule*
            pCellsize           : IPoint*
            operation           : esriMensurationOperation

           OUTPUT
            ppMeasureResult     : IImageServerMeasureResult**'''
        return super(IImageServer4, self).Measure(pFrom, pTo, pMosaicRule, pCellsize, operation)
    def ComputeHistograms(self, pGeometry, pMosaicRule, pCellsize, pRenderingRule):
        '''Method IImageServer4.ComputeHistograms

           INPUTS
            pGeometry           : IGeometry*
            pMosaicRule         : IMosaicRule*
            pCellsize           : IPoint*
            pRenderingRule      : IRenderingRule*

           OUTPUT
            ppHistograms        : IRasterHistograms**'''
        return super(IImageServer4, self).ComputeHistograms(pGeometry, pMosaicRule, pCellsize, pRenderingRule)
    def get_RasterAttributeTable(self):
        '''Method IImageServer4.get_RasterAttributeTable

           OUTPUT
            ppRAT               : IRecordSet**'''
        return super(IImageServer4, self).get_RasterAttributeTable()
    def get_KeyProperties(self):
        '''Method IImageServer4.get_KeyProperties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IImageServer4, self).get_KeyProperties()
    def GetRasterKeyProperties(self, RID):
        '''Method IImageServer4.GetRasterKeyProperties

           INPUT
            RID                 : long

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IImageServer4, self).GetRasterKeyProperties(RID)
    def IdentifyAll(self, pLocations, pMosaicRule, pCellsize, pRenderingRule, options):
        '''Method IImageServer4.IdentifyAll

           INPUTS
            pLocations          : IGeometry*
            pMosaicRule         : IMosaicRule*
            pCellsize           : IPoint*
            pRenderingRule      : IRenderingRule*
            options             : BSTR

           OUTPUT
            ppIdentifyResults   : IImageServerIdentifyResults**'''
        return super(IImageServer4, self).IdentifyAll(pLocations, pMosaicRule, pCellsize, pRenderingRule, options)
    def GetView(self, VID):
        '''Method IImageServer4.GetView

           INPUT
            VID                 : BSTR

           OUTPUT
            ppView              : IImageView**'''
        return super(IImageServer4, self).GetView(VID)
    def CreateView(self, pView):
        '''Method IImageServer4.CreateView

           INPUT
            pView               : IImageView*

           OUTPUT
            ppResult            : IImageServerEditResult**'''
        return super(IImageServer4, self).CreateView(pView)
    def UpdateView(self, VID, pAddIDs, pDeleteIDs):
        '''Method IImageServer4.UpdateView

           INPUTS
            VID                 : BSTR
            pAddIDs             : IFIDSet*
            pDeleteIDs          : IFIDSet*

           OUTPUT
            ppResults           : IImageServerEditResults**'''
        return super(IImageServer4, self).UpdateView(VID, pAddIDs, pDeleteIDs)
    def DeleteView(self, VID):
        '''Method IImageServer4.DeleteView

           INPUT
            VID                 : BSTR

           OUTPUT
            ppResult            : IImageServerEditResult**'''
        return super(IImageServer4, self).DeleteView(VID)
    def Execute(self, Name, argument):
        '''Method IImageServer4.Execute

           INPUTS
            Name                : BSTR
            argument            : VARIANT

           OUTPUT
            pResult             : VARIANT*'''
        return super(IImageServer4, self).Execute(Name, argument)
    def get_Fields(self):
        '''Method IImageServer3.get_Fields (from IImageServer3)

           OUTPUT
            ppFields            : IFields**'''
        return super(IImageServer4, self).get_Fields()
    def GetCatalogItemCount(self, pFilter):
        '''Method IImageServer3.GetCatalogItemCount (from IImageServer3)

           INPUT
            pFilter             : IQueryFilter*

           OUTPUT
            pNumItems           : long*'''
        return super(IImageServer4, self).GetCatalogItemCount(pFilter)
    def GetCatalogItemIDs(self, pFilter):
        '''Method IImageServer3.GetCatalogItemIDs (from IImageServer3)

           INPUT
            pFilter             : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IImageServer4, self).GetCatalogItemIDs(pFilter)
    def GetCatalogItems(self, pFilter):
        '''Method IImageServer3.GetCatalogItems (from IImageServer3)

           INPUT
            pFilter             : IQueryFilter*

           OUTPUT
            ppItems             : IRecordSet**'''
        return super(IImageServer4, self).GetCatalogItems(pFilter)
    def Download(self, pFIDs, pGeometry, Format):
        '''Method IImageServer3.Download (from IImageServer3)

           INPUTS
            pFIDs               : IFIDSet*
            pGeometry           : IGeometry*
            Format              : BSTR

           OUTPUT
            ppFiles             : IImageServerDownloadResults**'''
        return super(IImageServer4, self).Download(pFIDs, pGeometry, Format)
    def GetFile(self, pFile):
        '''Method IImageServer3.GetFile (from IImageServer3)

           INPUT
            pFile               : IImageServerDownloadResult*

           OUTPUT
            pURL                : BSTR*'''
        return super(IImageServer4, self).GetFile(pFile)
    def Identify(self, pLocation, pMosaicRule, pCellsize):
        '''Method IImageServer3.Identify (from IImageServer3)

           INPUTS
            pLocation           : IGeometry*
            pMosaicRule         : IMosaicRule*
            pCellsize           : IPoint*

           OUTPUT
            ppIdentifyResult    : IImageServerIdentifyResult**'''
        return super(IImageServer4, self).Identify(pLocation, pMosaicRule, pCellsize)
    def get_Metadata(self):
        '''Method IImageServer3.get_Metadata (from IImageServer3)

           OUTPUT
            pXml                : BSTR*'''
        return super(IImageServer4, self).get_Metadata()
    def GetRasterInfo(self, RID):
        '''Method IImageServer3.GetRasterInfo (from IImageServer3)

           INPUT
            RID                 : long

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IImageServer4, self).GetRasterInfo(RID)
    def GetPixelBlock(self, RID, tx, ty, Level):
        '''Method IImageServer3.GetPixelBlock (from IImageServer3)

           INPUTS
            RID                 : long
            tx                  : long
            ty                  : long
            Level               : long

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer4, self).GetPixelBlock(RID, tx, ty, Level)
    def GetRasterMetadata(self, RID):
        '''Method IImageServer3.GetRasterMetadata (from IImageServer3)

           INPUT
            RID                 : long

           OUTPUT
            pXml                : BSTR*'''
        return super(IImageServer4, self).GetRasterMetadata(RID)
    def GetThumbnail(self, RID):
        '''Method IImageServer3.GetThumbnail (from IImageServer3)

           INPUT
            RID                 : long

           OUTPUT
            ppThumbnail         : IImageResult**'''
        return super(IImageServer4, self).GetThumbnail(RID)
    def GenerateServiceInfo(self, pRenderingRule):
        '''Method IImageServer3.GenerateServiceInfo (from IImageServer3)

           INPUT
            pRenderingRule      : IRenderingRule*

           OUTPUT
            ppServiceInfo       : IImageServiceInfo**'''
        return super(IImageServer4, self).GenerateServiceInfo(pRenderingRule)
    def GetNativeRasterInfo(self, RID):
        '''Method IImageServer3.GetNativeRasterInfo (from IImageServer3)

           INPUT
            RID                 : long

           OUTPUT
            ppRasterInfos       : IRasterInfos**'''
        return super(IImageServer4, self).GetNativeRasterInfo(RID)
    def GetNativePixelBlock(self, RID, IID, tx, ty, Level):
        '''Method IImageServer3.GetNativePixelBlock (from IImageServer3)

           INPUTS
            RID                 : long
            IID                 : long
            tx                  : long
            ty                  : long
            Level               : long

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer4, self).GetNativePixelBlock(RID, IID, tx, ty, Level)
    def ExportMapImage(self, pImageDescription, pImageType):
        '''Method IImageServer2.ExportMapImage (from IImageServer2)

           INPUTS
            pImageDescription   : IGeoImageDescription*
            pImageType          : IImageType*

           OUTPUT
            ppImage             : IMapImage**'''
        return super(IImageServer4, self).ExportMapImage(pImageDescription, pImageType)
    def get_Version(self):
        '''Method IImageServer.get_Version (from IImageServer)

           OUTPUT
            pVersion            : float*'''
        return super(IImageServer4, self).get_Version()
    def get_ServiceInfo(self):
        '''Method IImageServer.get_ServiceInfo (from IImageServer)

           OUTPUT
            ppServiceInfo       : IImageServiceInfo**'''
        return super(IImageServer4, self).get_ServiceInfo()
    def GetImage(self, pImageDescription):
        '''Method IImageServer.GetImage (from IImageServer)

           INPUT
            pImageDescription   : IGeoImageDescription*

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IImageServer4, self).GetImage(pImageDescription)
    def ExportImage(self, pImageDescription, pImageType):
        '''Method IImageServer.ExportImage (from IImageServer)

           INPUTS
            pImageDescription   : IGeoImageDescription*
            pImageType          : IImageType*

           OUTPUT
            ppImage             : IImageResult**'''
        return super(IImageServer4, self).ExportImage(pImageDescription, pImageType)
    def ExecuteAISRequest(self, pRequest):
        '''Method IImageServer.ExecuteAISRequest (from IImageServer)

           INPUT
            pRequest            : IAISRequest*

           OUTPUT
            pResponse           : BSTR*'''
        return super(IImageServer4, self).ExecuteAISRequest(pRequest)
    Fields = property(get_Fields, None, None)
    KeyProperties = property(get_KeyProperties, None, None)
    Metadata = property(get_Metadata, None, None)
    RasterAttributeTable = property(get_RasterAttributeTable, None, None)
    ServiceInfo = property(get_ServiceInfo, None, None)
    Version = property(get_Version, None, None)

class IImageServerInit(_esriCarto.IImageServerInit):
    _IID = uuid.UUID('ee09fed6-6e28-491a-b00b-5b8796f075e1')

    def __init__(self, *args, **kw):
        super(IImageServerInit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Initialize(self, FullName):
        '''Method IImageServerInit.Initialize

           INPUT
            FullName            : BSTR'''
        return super(IImageServerInit, self).Initialize(FullName)
    def InitializeFromDataset(self, pDataset):
        '''Method IImageServerInit.InitializeFromDataset

           INPUT
            pDataset            : IRasterDataset*'''
        return super(IImageServerInit, self).InitializeFromDataset(pDataset)
    def InitializeFromServiceURL(self, ServiceURL):
        '''Method IImageServerInit.InitializeFromServiceURL

           INPUT
            ServiceURL          : BSTR'''
        return super(IImageServerInit, self).InitializeFromServiceURL(ServiceURL)
    def putref_ImageDataSourceName(self, ppName):
        '''Method IImageServerInit.putref_ImageDataSourceName

           INPUT
            ppName              : IName*'''
        return super(IImageServerInit, self).putref_ImageDataSourceName(ppName)
    def get_ImageDataSourceName(self):
        '''Method IImageServerInit.get_ImageDataSourceName

           OUTPUT
            ppName              : IName**'''
        return super(IImageServerInit, self).get_ImageDataSourceName()
    ImageDataSourceName = property(get_ImageDataSourceName, putref_ImageDataSourceName, None)

class IImageServerInit2(_esriCarto.IImageServerInit2):
    _IID = uuid.UUID('57e791d8-5492-41c3-8f17-5f416b38111b')

    def __init__(self, *args, **kw):
        super(IImageServerInit2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_OutputDirectory(self, pPath):
        '''Method IImageServerInit2.put_OutputDirectory

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit2, self).put_OutputDirectory(pPath)
    def get_OutputDirectory(self):
        '''Method IImageServerInit2.get_OutputDirectory

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit2, self).get_OutputDirectory()
    def put_VirtualOutputDirectory(self, pPath):
        '''Method IImageServerInit2.put_VirtualOutputDirectory

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit2, self).put_VirtualOutputDirectory(pPath)
    def get_VirtualOutputDirectory(self):
        '''Method IImageServerInit2.get_VirtualOutputDirectory

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit2, self).get_VirtualOutputDirectory()
    def put_DownloadDirectory(self, pPath):
        '''Method IImageServerInit2.put_DownloadDirectory

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit2, self).put_DownloadDirectory(pPath)
    def get_DownloadDirectory(self):
        '''Method IImageServerInit2.get_DownloadDirectory

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit2, self).get_DownloadDirectory()
    def put_VirtualDownloadDirectory(self, pPath):
        '''Method IImageServerInit2.put_VirtualDownloadDirectory

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit2, self).put_VirtualDownloadDirectory(pPath)
    def get_VirtualDownloadDirectory(self):
        '''Method IImageServerInit2.get_VirtualDownloadDirectory

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit2, self).get_VirtualDownloadDirectory()
    def put_DynamicImageWorkspace(self, pPath):
        '''Method IImageServerInit2.put_DynamicImageWorkspace

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit2, self).put_DynamicImageWorkspace(pPath)
    def get_DynamicImageWorkspace(self):
        '''Method IImageServerInit2.get_DynamicImageWorkspace

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit2, self).get_DynamicImageWorkspace()
    def put_ExcludedFields(self, pExcludedFields):
        '''Method IImageServerInit2.put_ExcludedFields

           INPUT
            pExcludedFields     : BSTR'''
        return super(IImageServerInit2, self).put_ExcludedFields(pExcludedFields)
    def get_ExcludedFields(self):
        '''Method IImageServerInit2.get_ExcludedFields

           OUTPUT
            pExcludedFields     : BSTR*'''
        return super(IImageServerInit2, self).get_ExcludedFields()
    def get_MaxRecordCount(self):
        '''Method IImageServerInit2.get_MaxRecordCount

           OUTPUT
            Count               : long*'''
        return super(IImageServerInit2, self).get_MaxRecordCount()
    def put_MaxRecordCount(self, Count):
        '''Method IImageServerInit2.put_MaxRecordCount

           INPUT
            Count               : long'''
        return super(IImageServerInit2, self).put_MaxRecordCount(Count)
    def get_MaxImageWidth(self):
        '''Method IImageServerInit2.get_MaxImageWidth

           OUTPUT
            Width               : long*'''
        return super(IImageServerInit2, self).get_MaxImageWidth()
    def put_MaxImageWidth(self, Width):
        '''Method IImageServerInit2.put_MaxImageWidth

           INPUT
            Width               : long'''
        return super(IImageServerInit2, self).put_MaxImageWidth(Width)
    def get_MaxImageHeight(self):
        '''Method IImageServerInit2.get_MaxImageHeight

           OUTPUT
            Height              : long*'''
        return super(IImageServerInit2, self).get_MaxImageHeight()
    def put_MaxImageHeight(self, Height):
        '''Method IImageServerInit2.put_MaxImageHeight

           INPUT
            Height              : long'''
        return super(IImageServerInit2, self).put_MaxImageHeight(Height)
    def put_AllowedFields(self, pAllowedFields):
        '''Method IImageServerInit2.put_AllowedFields

           INPUT
            pAllowedFields      : BSTR'''
        return super(IImageServerInit2, self).put_AllowedFields(pAllowedFields)
    def get_AllowedFields(self):
        '''Method IImageServerInit2.get_AllowedFields

           OUTPUT
            pAllowedFields      : BSTR*'''
        return super(IImageServerInit2, self).get_AllowedFields()
    def put_AllowedCompressions(self, pAllowedCompressions):
        '''Method IImageServerInit2.put_AllowedCompressions

           INPUT
            pAllowedCompressions: BSTR'''
        return super(IImageServerInit2, self).put_AllowedCompressions(pAllowedCompressions)
    def get_AllowedCompressions(self):
        '''Method IImageServerInit2.get_AllowedCompressions

           OUTPUT
            pAllowedCompressions: BSTR*'''
        return super(IImageServerInit2, self).get_AllowedCompressions()
    def put_AllowedMosaicMethods(self, pAllowedMosaicMethods):
        '''Method IImageServerInit2.put_AllowedMosaicMethods

           INPUT
            pAllowedMosaicMethods: BSTR'''
        return super(IImageServerInit2, self).put_AllowedMosaicMethods(pAllowedMosaicMethods)
    def get_AllowedMosaicMethods(self):
        '''Method IImageServerInit2.get_AllowedMosaicMethods

           OUTPUT
            pAllowedMosaicMethods: BSTR*'''
        return super(IImageServerInit2, self).get_AllowedMosaicMethods()
    def put_AllowedItemMetadata(self, pAllowedItemMetadata):
        '''Method IImageServerInit2.put_AllowedItemMetadata

           INPUT
            pAllowedItemMetadata: BSTR'''
        return super(IImageServerInit2, self).put_AllowedItemMetadata(pAllowedItemMetadata)
    def get_AllowedItemMetadata(self):
        '''Method IImageServerInit2.get_AllowedItemMetadata

           OUTPUT
            pAllowedItemMetadata: BSTR*'''
        return super(IImageServerInit2, self).get_AllowedItemMetadata()
    def Initialize(self, FullName):
        '''Method IImageServerInit.Initialize (from IImageServerInit)

           INPUT
            FullName            : BSTR'''
        return super(IImageServerInit2, self).Initialize(FullName)
    def InitializeFromDataset(self, pDataset):
        '''Method IImageServerInit.InitializeFromDataset (from IImageServerInit)

           INPUT
            pDataset            : IRasterDataset*'''
        return super(IImageServerInit2, self).InitializeFromDataset(pDataset)
    def InitializeFromServiceURL(self, ServiceURL):
        '''Method IImageServerInit.InitializeFromServiceURL (from IImageServerInit)

           INPUT
            ServiceURL          : BSTR'''
        return super(IImageServerInit2, self).InitializeFromServiceURL(ServiceURL)
    def putref_ImageDataSourceName(self, ppName):
        '''Method IImageServerInit.putref_ImageDataSourceName (from IImageServerInit)

           INPUT
            ppName              : IName*'''
        return super(IImageServerInit2, self).putref_ImageDataSourceName(ppName)
    def get_ImageDataSourceName(self):
        '''Method IImageServerInit.get_ImageDataSourceName (from IImageServerInit)

           OUTPUT
            ppName              : IName**'''
        return super(IImageServerInit2, self).get_ImageDataSourceName()
    AllowedCompressions = property(get_AllowedCompressions, put_AllowedCompressions, None)
    AllowedFields = property(get_AllowedFields, put_AllowedFields, None)
    AllowedItemMetadata = property(get_AllowedItemMetadata, put_AllowedItemMetadata, None)
    AllowedMosaicMethods = property(get_AllowedMosaicMethods, put_AllowedMosaicMethods, None)
    DownloadDirectory = property(get_DownloadDirectory, put_DownloadDirectory, None)
    DynamicImageWorkspace = property(get_DynamicImageWorkspace, put_DynamicImageWorkspace, None)
    ExcludedFields = property(get_ExcludedFields, put_ExcludedFields, None)
    ImageDataSourceName = property(get_ImageDataSourceName, putref_ImageDataSourceName, None)
    MaxImageHeight = property(get_MaxImageHeight, put_MaxImageHeight, None)
    MaxImageWidth = property(get_MaxImageWidth, put_MaxImageWidth, None)
    MaxRecordCount = property(get_MaxRecordCount, put_MaxRecordCount, None)
    OutputDirectory = property(get_OutputDirectory, put_OutputDirectory, None)
    VirtualDownloadDirectory = property(get_VirtualDownloadDirectory, put_VirtualDownloadDirectory, None)
    VirtualOutputDirectory = property(get_VirtualOutputDirectory, put_VirtualOutputDirectory, None)

class IImageServerInit3(_esriCarto.IImageServerInit3):
    _IID = uuid.UUID('1db58a01-ad2f-446c-b274-4389a2638fb6')

    def __init__(self, *args, **kw):
        super(IImageServerInit3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ColormapToRGB(self, _arg1):
        '''Method IImageServerInit3.put_ColormapToRGB

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IImageServerInit3, self).put_ColormapToRGB(_arg1)
    def put_RasterFunctions(self, _arg1):
        '''Method IImageServerInit3.put_RasterFunctions

           INPUT
            _arg1               : BSTR'''
        return super(IImageServerInit3, self).put_RasterFunctions(_arg1)
    def put_RasterTypes(self, _arg1):
        '''Method IImageServerInit3.put_RasterTypes

           INPUT
            _arg1               : BSTR'''
        return super(IImageServerInit3, self).put_RasterTypes(_arg1)
    def put_User(self, _arg1):
        '''Method IImageServerInit3.put_User

           INPUT
            _arg1               : BSTR'''
        return super(IImageServerInit3, self).put_User(_arg1)
    def put_PhysicalCacheDirectory(self, pCacheDir):
        '''Method IImageServerInit3.put_PhysicalCacheDirectory

           INPUT
            pCacheDir           : BSTR'''
        return super(IImageServerInit3, self).put_PhysicalCacheDirectory(pCacheDir)
    def get_PhysicalCacheDirectory(self):
        '''Method IImageServerInit3.get_PhysicalCacheDirectory

           OUTPUT
            pCacheDir           : BSTR*'''
        return super(IImageServerInit3, self).get_PhysicalCacheDirectory()
    def put_VirtualCacheDirectory(self, pVirtualCacheDir):
        '''Method IImageServerInit3.put_VirtualCacheDirectory

           INPUT
            pVirtualCacheDir    : BSTR'''
        return super(IImageServerInit3, self).put_VirtualCacheDirectory(pVirtualCacheDir)
    def get_VirtualCacheDirectory(self):
        '''Method IImageServerInit3.get_VirtualCacheDirectory

           OUTPUT
            pVirtualCacheDir    : BSTR*'''
        return super(IImageServerInit3, self).get_VirtualCacheDirectory()
    def putref_DEM(self, ppDEM):
        '''Method IImageServerInit3.putref_DEM

           INPUT
            ppDEM               : IRaster*'''
        return super(IImageServerInit3, self).putref_DEM(ppDEM)
    def get_DEM(self):
        '''Method IImageServerInit3.get_DEM

           OUTPUT
            ppDEM               : IRaster**'''
        return super(IImageServerInit3, self).get_DEM()
    def InitializeDEM(self, URI):
        '''Method IImageServerInit3.InitializeDEM

           INPUT
            URI                 : BSTR'''
        return super(IImageServerInit3, self).InitializeDEM(URI)
    def get_ViewID(self):
        '''Method IImageServerInit3.get_ViewID

           OUTPUT
            pVID                : BSTR*'''
        return super(IImageServerInit3, self).get_ViewID()
    def put_ViewID(self, pVID):
        '''Method IImageServerInit3.put_ViewID

           INPUT
            pVID                : BSTR'''
        return super(IImageServerInit3, self).put_ViewID(pVID)
    def get_View(self):
        '''Method IImageServerInit3.get_View

           OUTPUT
            ppView              : IImageView**'''
        return super(IImageServerInit3, self).get_View()
    def putref_View(self, ppView):
        '''Method IImageServerInit3.putref_View

           INPUT
            ppView              : IImageView*'''
        return super(IImageServerInit3, self).putref_View(ppView)
    def DefineView(self, pView):
        '''Method IImageServerInit3.DefineView

           INPUT
            pView               : IImageView*'''
        return super(IImageServerInit3, self).DefineView(pView)
    def Project(self, pSpatialReference):
        '''Method IImageServerInit3.Project

           INPUT
            pSpatialReference   : ISpatialReference*'''
        return super(IImageServerInit3, self).Project(pSpatialReference)
    def get_MaximumImageCellsize(self):
        '''Method IImageServerInit3.get_MaximumImageCellsize

           OUTPUT
            pMaximumCellsize    : double*'''
        return super(IImageServerInit3, self).get_MaximumImageCellsize()
    def put_OutputDirectory(self, pPath):
        '''Method IImageServerInit2.put_OutputDirectory (from IImageServerInit2)

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit3, self).put_OutputDirectory(pPath)
    def get_OutputDirectory(self):
        '''Method IImageServerInit2.get_OutputDirectory (from IImageServerInit2)

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit3, self).get_OutputDirectory()
    def put_VirtualOutputDirectory(self, pPath):
        '''Method IImageServerInit2.put_VirtualOutputDirectory (from IImageServerInit2)

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit3, self).put_VirtualOutputDirectory(pPath)
    def get_VirtualOutputDirectory(self):
        '''Method IImageServerInit2.get_VirtualOutputDirectory (from IImageServerInit2)

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit3, self).get_VirtualOutputDirectory()
    def put_DownloadDirectory(self, pPath):
        '''Method IImageServerInit2.put_DownloadDirectory (from IImageServerInit2)

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit3, self).put_DownloadDirectory(pPath)
    def get_DownloadDirectory(self):
        '''Method IImageServerInit2.get_DownloadDirectory (from IImageServerInit2)

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit3, self).get_DownloadDirectory()
    def put_VirtualDownloadDirectory(self, pPath):
        '''Method IImageServerInit2.put_VirtualDownloadDirectory (from IImageServerInit2)

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit3, self).put_VirtualDownloadDirectory(pPath)
    def get_VirtualDownloadDirectory(self):
        '''Method IImageServerInit2.get_VirtualDownloadDirectory (from IImageServerInit2)

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit3, self).get_VirtualDownloadDirectory()
    def put_DynamicImageWorkspace(self, pPath):
        '''Method IImageServerInit2.put_DynamicImageWorkspace (from IImageServerInit2)

           INPUT
            pPath               : BSTR'''
        return super(IImageServerInit3, self).put_DynamicImageWorkspace(pPath)
    def get_DynamicImageWorkspace(self):
        '''Method IImageServerInit2.get_DynamicImageWorkspace (from IImageServerInit2)

           OUTPUT
            pPath               : BSTR*'''
        return super(IImageServerInit3, self).get_DynamicImageWorkspace()
    def put_ExcludedFields(self, pExcludedFields):
        '''Method IImageServerInit2.put_ExcludedFields (from IImageServerInit2)

           INPUT
            pExcludedFields     : BSTR'''
        return super(IImageServerInit3, self).put_ExcludedFields(pExcludedFields)
    def get_ExcludedFields(self):
        '''Method IImageServerInit2.get_ExcludedFields (from IImageServerInit2)

           OUTPUT
            pExcludedFields     : BSTR*'''
        return super(IImageServerInit3, self).get_ExcludedFields()
    def get_MaxRecordCount(self):
        '''Method IImageServerInit2.get_MaxRecordCount (from IImageServerInit2)

           OUTPUT
            Count               : long*'''
        return super(IImageServerInit3, self).get_MaxRecordCount()
    def put_MaxRecordCount(self, Count):
        '''Method IImageServerInit2.put_MaxRecordCount (from IImageServerInit2)

           INPUT
            Count               : long'''
        return super(IImageServerInit3, self).put_MaxRecordCount(Count)
    def get_MaxImageWidth(self):
        '''Method IImageServerInit2.get_MaxImageWidth (from IImageServerInit2)

           OUTPUT
            Width               : long*'''
        return super(IImageServerInit3, self).get_MaxImageWidth()
    def put_MaxImageWidth(self, Width):
        '''Method IImageServerInit2.put_MaxImageWidth (from IImageServerInit2)

           INPUT
            Width               : long'''
        return super(IImageServerInit3, self).put_MaxImageWidth(Width)
    def get_MaxImageHeight(self):
        '''Method IImageServerInit2.get_MaxImageHeight (from IImageServerInit2)

           OUTPUT
            Height              : long*'''
        return super(IImageServerInit3, self).get_MaxImageHeight()
    def put_MaxImageHeight(self, Height):
        '''Method IImageServerInit2.put_MaxImageHeight (from IImageServerInit2)

           INPUT
            Height              : long'''
        return super(IImageServerInit3, self).put_MaxImageHeight(Height)
    def put_AllowedFields(self, pAllowedFields):
        '''Method IImageServerInit2.put_AllowedFields (from IImageServerInit2)

           INPUT
            pAllowedFields      : BSTR'''
        return super(IImageServerInit3, self).put_AllowedFields(pAllowedFields)
    def get_AllowedFields(self):
        '''Method IImageServerInit2.get_AllowedFields (from IImageServerInit2)

           OUTPUT
            pAllowedFields      : BSTR*'''
        return super(IImageServerInit3, self).get_AllowedFields()
    def put_AllowedCompressions(self, pAllowedCompressions):
        '''Method IImageServerInit2.put_AllowedCompressions (from IImageServerInit2)

           INPUT
            pAllowedCompressions: BSTR'''
        return super(IImageServerInit3, self).put_AllowedCompressions(pAllowedCompressions)
    def get_AllowedCompressions(self):
        '''Method IImageServerInit2.get_AllowedCompressions (from IImageServerInit2)

           OUTPUT
            pAllowedCompressions: BSTR*'''
        return super(IImageServerInit3, self).get_AllowedCompressions()
    def put_AllowedMosaicMethods(self, pAllowedMosaicMethods):
        '''Method IImageServerInit2.put_AllowedMosaicMethods (from IImageServerInit2)

           INPUT
            pAllowedMosaicMethods: BSTR'''
        return super(IImageServerInit3, self).put_AllowedMosaicMethods(pAllowedMosaicMethods)
    def get_AllowedMosaicMethods(self):
        '''Method IImageServerInit2.get_AllowedMosaicMethods (from IImageServerInit2)

           OUTPUT
            pAllowedMosaicMethods: BSTR*'''
        return super(IImageServerInit3, self).get_AllowedMosaicMethods()
    def put_AllowedItemMetadata(self, pAllowedItemMetadata):
        '''Method IImageServerInit2.put_AllowedItemMetadata (from IImageServerInit2)

           INPUT
            pAllowedItemMetadata: BSTR'''
        return super(IImageServerInit3, self).put_AllowedItemMetadata(pAllowedItemMetadata)
    def get_AllowedItemMetadata(self):
        '''Method IImageServerInit2.get_AllowedItemMetadata (from IImageServerInit2)

           OUTPUT
            pAllowedItemMetadata: BSTR*'''
        return super(IImageServerInit3, self).get_AllowedItemMetadata()
    def Initialize(self, FullName):
        '''Method IImageServerInit.Initialize (from IImageServerInit)

           INPUT
            FullName            : BSTR'''
        return super(IImageServerInit3, self).Initialize(FullName)
    def InitializeFromDataset(self, pDataset):
        '''Method IImageServerInit.InitializeFromDataset (from IImageServerInit)

           INPUT
            pDataset            : IRasterDataset*'''
        return super(IImageServerInit3, self).InitializeFromDataset(pDataset)
    def InitializeFromServiceURL(self, ServiceURL):
        '''Method IImageServerInit.InitializeFromServiceURL (from IImageServerInit)

           INPUT
            ServiceURL          : BSTR'''
        return super(IImageServerInit3, self).InitializeFromServiceURL(ServiceURL)
    def putref_ImageDataSourceName(self, ppName):
        '''Method IImageServerInit.putref_ImageDataSourceName (from IImageServerInit)

           INPUT
            ppName              : IName*'''
        return super(IImageServerInit3, self).putref_ImageDataSourceName(ppName)
    def get_ImageDataSourceName(self):
        '''Method IImageServerInit.get_ImageDataSourceName (from IImageServerInit)

           OUTPUT
            ppName              : IName**'''
        return super(IImageServerInit3, self).get_ImageDataSourceName()
    AllowedCompressions = property(get_AllowedCompressions, put_AllowedCompressions, None)
    AllowedFields = property(get_AllowedFields, put_AllowedFields, None)
    AllowedItemMetadata = property(get_AllowedItemMetadata, put_AllowedItemMetadata, None)
    AllowedMosaicMethods = property(get_AllowedMosaicMethods, put_AllowedMosaicMethods, None)
    ColormapToRGB = property(None, put_ColormapToRGB, None)
    DEM = property(get_DEM, putref_DEM, None)
    DownloadDirectory = property(get_DownloadDirectory, put_DownloadDirectory, None)
    DynamicImageWorkspace = property(get_DynamicImageWorkspace, put_DynamicImageWorkspace, None)
    ExcludedFields = property(get_ExcludedFields, put_ExcludedFields, None)
    ImageDataSourceName = property(get_ImageDataSourceName, putref_ImageDataSourceName, None)
    MaxImageHeight = property(get_MaxImageHeight, put_MaxImageHeight, None)
    MaxImageWidth = property(get_MaxImageWidth, put_MaxImageWidth, None)
    MaxRecordCount = property(get_MaxRecordCount, put_MaxRecordCount, None)
    MaximumImageCellsize = property(get_MaximumImageCellsize, None, None)
    OutputDirectory = property(get_OutputDirectory, put_OutputDirectory, None)
    PhysicalCacheDirectory = property(get_PhysicalCacheDirectory, put_PhysicalCacheDirectory, None)
    RasterFunctions = property(None, put_RasterFunctions, None)
    RasterTypes = property(None, put_RasterTypes, None)
    User = property(None, put_User, None)
    View = property(get_View, putref_View, None)
    ViewID = property(get_ViewID, put_ViewID, None)
    VirtualCacheDirectory = property(get_VirtualCacheDirectory, put_VirtualCacheDirectory, None)
    VirtualDownloadDirectory = property(get_VirtualDownloadDirectory, put_VirtualDownloadDirectory, None)
    VirtualOutputDirectory = property(get_VirtualOutputDirectory, put_VirtualOutputDirectory, None)

class IImageServerObjects(_esriCarto.IImageServerObjects):
    _IID = uuid.UUID('d0bafeb3-b04d-4bc2-bd89-d1251450cb83')
    def get_MosaicDataset(self):
        '''Method IImageServerObjects.get_MosaicDataset

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IImageServerObjects, self).get_MosaicDataset()
    def get_RasterDataset(self):
        '''Method IImageServerObjects.get_RasterDataset

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IImageServerObjects, self).get_RasterDataset()
    def get_Raster(self):
        '''Method IImageServerObjects.get_Raster

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IImageServerObjects, self).get_Raster()
    def get_TimeDefinition(self):
        '''Method IImageServerObjects.get_TimeDefinition

           OUTPUT
            ppTimeDefinition    : ITimeTableDefinition**'''
        return super(IImageServerObjects, self).get_TimeDefinition()
    MosaicDataset = property(get_MosaicDataset, None, None)
    Raster = property(get_Raster, None, None)
    RasterDataset = property(get_RasterDataset, None, None)
    TimeDefinition = property(get_TimeDefinition, None, None)

class IPluginImageLayer(_esriCarto.IPluginImageLayer):
    _IID = uuid.UUID('493aabc3-cc1f-4782-afe2-2294e3a4059d')
    def get_ImageDataSourceName(self):
        '''Method IPluginImageLayer.get_ImageDataSourceName

           OUTPUT
            ppName              : IName**'''
        return super(IPluginImageLayer, self).get_ImageDataSourceName()
    ImageDataSourceName = property(get_ImageDataSourceName, None, None)

class IMosaicLODInfoHelper(_esriCarto.IMosaicLODInfoHelper):
    _IID = uuid.UUID('2c1d8359-c0eb-4553-9290-b5f6e2225b0a')

    def __init__(self, *args, **kw):
        super(IMosaicLODInfoHelper, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_SpatialReference(self, _arg1):
        '''Method IMosaicLODInfoHelper.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IMosaicLODInfoHelper, self).putref_SpatialReference(_arg1)
    def get_LODInfos(self):
        '''Method IMosaicLODInfoHelper.get_LODInfos

           OUTPUT
            ppLODInfos          : IMosaicLODInfos**'''
        return super(IMosaicLODInfoHelper, self).get_LODInfos()
    def Load(self, pLODs, asMapScale):
        '''Method IMosaicLODInfoHelper.Load

           INPUTS
            pLODs               : IDoubleArray*
            asMapScale          : VARIANT_BOOL'''
        return super(IMosaicLODInfoHelper, self).Load(pLODs, asMapScale)
    def LoadFromTable(self, pTable, LODFieldName, asMapScale):
        '''Method IMosaicLODInfoHelper.LoadFromTable

           INPUTS
            pTable              : ITable*
            LODFieldName        : BSTR
            asMapScale          : VARIANT_BOOL'''
        return super(IMosaicLODInfoHelper, self).LoadFromTable(pTable, LODFieldName, asMapScale)
    LODInfos = property(get_LODInfos, None, None)
    SpatialReference = property(None, putref_SpatialReference, None)

class ISimpleMapImage(_esriCarto.ISimpleMapImage):
    _IID = uuid.UUID('c6d12abf-c493-4524-81ac-4640eefdbb49')

    def __init__(self, *args, **kw):
        super(ISimpleMapImage, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Extent(self, _arg1):
        '''Method ISimpleMapImage.put_Extent

           INPUT
            _arg1               : IEnvelope*'''
        return super(ISimpleMapImage, self).put_Extent(_arg1)
    Extent = property(None, put_Extent, None)

class IImageServerIdentifyResultEdit(_esriCarto.IImageServerIdentifyResultEdit):
    _IID = uuid.UUID('d9d379df-e486-4f8b-8724-7916e40b769b')

    def __init__(self, *args, **kw):
        super(IImageServerIdentifyResultEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IImageServerIdentifyResultEdit.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IImageServerIdentifyResultEdit, self).put_Name(_arg1)
    def put_Value(self, _arg1):
        '''Method IImageServerIdentifyResultEdit.put_Value

           INPUT
            _arg1               : BSTR'''
        return super(IImageServerIdentifyResultEdit, self).put_Value(_arg1)
    def putref_Location(self, _arg1):
        '''Method IImageServerIdentifyResultEdit.putref_Location

           INPUT
            _arg1               : IPoint*'''
        return super(IImageServerIdentifyResultEdit, self).putref_Location(_arg1)
    def putref_Properties(self, _arg1):
        '''Method IImageServerIdentifyResultEdit.putref_Properties

           INPUT
            _arg1               : IPropertySet*'''
        return super(IImageServerIdentifyResultEdit, self).putref_Properties(_arg1)
    def putref_CatalogItems(self, _arg1):
        '''Method IImageServerIdentifyResultEdit.putref_CatalogItems

           INPUT
            _arg1               : IRecordSet*'''
        return super(IImageServerIdentifyResultEdit, self).putref_CatalogItems(_arg1)
    def putref_CatalogItemVisibilities(self, _arg1):
        '''Method IImageServerIdentifyResultEdit.putref_CatalogItemVisibilities

           INPUT
            _arg1               : IDoubleArray*'''
        return super(IImageServerIdentifyResultEdit, self).putref_CatalogItemVisibilities(_arg1)
    def get_Name(self):
        '''Method IImageServerIdentifyResult.get_Name (from IImageServerIdentifyResult)

           OUTPUT
            pName               : BSTR*'''
        return super(IImageServerIdentifyResultEdit, self).get_Name()
    def get_Value(self):
        '''Method IImageServerIdentifyResult.get_Value (from IImageServerIdentifyResult)

           OUTPUT
            pValue              : BSTR*'''
        return super(IImageServerIdentifyResultEdit, self).get_Value()
    def get_Location(self):
        '''Method IImageServerIdentifyResult.get_Location (from IImageServerIdentifyResult)

           OUTPUT
            ppPoint             : IPoint**'''
        return super(IImageServerIdentifyResultEdit, self).get_Location()
    def get_Properties(self):
        '''Method IImageServerIdentifyResult.get_Properties (from IImageServerIdentifyResult)

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IImageServerIdentifyResultEdit, self).get_Properties()
    def get_CatalogItems(self):
        '''Method IImageServerIdentifyResult.get_CatalogItems (from IImageServerIdentifyResult)

           OUTPUT
            ppItems             : IRecordSet**'''
        return super(IImageServerIdentifyResultEdit, self).get_CatalogItems()
    def get_CatalogItemVisibilities(self):
        '''Method IImageServerIdentifyResult.get_CatalogItemVisibilities (from IImageServerIdentifyResult)

           OUTPUT
            ppVisibilities      : IDoubleArray**'''
        return super(IImageServerIdentifyResultEdit, self).get_CatalogItemVisibilities()
    CatalogItemVisibilities = property(get_CatalogItemVisibilities, putref_CatalogItemVisibilities, None)
    CatalogItems = property(get_CatalogItems, putref_CatalogItems, None)
    Location = property(get_Location, putref_Location, None)
    Name = property(get_Name, put_Name, None)
    Properties = property(get_Properties, putref_Properties, None)
    Value = property(get_Value, put_Value, None)

class IImageCooker(_esriCarto.IImageCooker):
    _IID = uuid.UUID('c254d4a2-97b2-469e-b463-f51811f4b4cf')

    def __init__(self, *args, **kw):
        super(IImageCooker, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Connect(self, Location, pImageServer):
        '''Method IImageCooker.Connect

           INPUTS
            Location            : BSTR
            pImageServer        : IImageServer*'''
        return super(IImageCooker, self).Connect(Location, pImageServer)
    def Clear(self, pExtent, pTrackCancel):
        '''Method IImageCooker.Clear

           INPUTS
            pExtent             : IEnvelope*
            pTrackCancel        : ITrackCancel*'''
        return super(IImageCooker, self).Clear(pExtent, pTrackCancel)
    def GetTile(self, Level, Row, Column):
        '''Method IImageCooker.GetTile

           INPUTS
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            ppTile              : SAFEARRAY**'''
        return super(IImageCooker, self).GetTile(Level, Row, Column)
    def PutTile(self, Level, Row, Column, ppTile):
        '''Method IImageCooker.PutTile

           INPUTS
            Level               : long
            Row                 : long
            Column              : long
            ppTile              : SAFEARRAY**'''
        return super(IImageCooker, self).PutTile(Level, Row, Column, ppTile)
    def GetCacheDirectory(self):
        '''Method IImageCooker.GetCacheDirectory

           OUTPUT
            pCacheDir           : BSTR*'''
        return super(IImageCooker, self).GetCacheDirectory()
    def Update(self, pImageServer, pExtent, pLevels, UpdateMode, pTrackCancel):
        '''Method IImageCooker.Update

           INPUTS
            pImageServer        : IImageServer*
            pExtent             : IEnvelope*
            pLevels             : ILongArray*
            UpdateMode          : esriMapCacheUpdateMode
            pTrackCancel        : ITrackCancel*'''
        return super(IImageCooker, self).Update(pImageServer, pExtent, pLevels, UpdateMode, pTrackCancel)
    def UpdateByGeometry(self, pImageServer, pGeometry, pLevels, UpdateMode, pTrackCancel):
        '''Method IImageCooker.UpdateByGeometry

           INPUTS
            pImageServer        : IImageServer*
            pGeometry           : IGeometry*
            pLevels             : ILongArray*
            UpdateMode          : esriMapCacheUpdateMode
            pTrackCancel        : ITrackCancel*'''
        return super(IImageCooker, self).UpdateByGeometry(pImageServer, pGeometry, pLevels, UpdateMode, pTrackCancel)
    def get_ThreadCount(self):
        '''Method IImageCooker.get_ThreadCount

           OUTPUT
            pThreadCount        : long*'''
        return super(IImageCooker, self).get_ThreadCount()
    def put_ThreadCount(self, pThreadCount):
        '''Method IImageCooker.put_ThreadCount

           INPUT
            pThreadCount        : long'''
        return super(IImageCooker, self).put_ThreadCount(pThreadCount)
    def get_MaximumImageCellsize(self):
        '''Method IImageCooker.get_MaximumImageCellsize

           OUTPUT
            pMaxPS              : double*'''
        return super(IImageCooker, self).get_MaximumImageCellsize()
    def put_MaximumImageCellsize(self, pMaxPS):
        '''Method IImageCooker.put_MaximumImageCellsize

           INPUT
            pMaxPS              : double'''
        return super(IImageCooker, self).put_MaximumImageCellsize(pMaxPS)
    def get_ServerObjectName(self):
        '''Method IImageCooker.get_ServerObjectName

           OUTPUT
            ppName              : IName**'''
        return super(IImageCooker, self).get_ServerObjectName()
    def putref_ServerObjectName(self, ppName):
        '''Method IImageCooker.putref_ServerObjectName

           INPUT
            ppName              : IName*'''
        return super(IImageCooker, self).putref_ServerObjectName(ppName)
    MaximumImageCellsize = property(get_MaximumImageCellsize, put_MaximumImageCellsize, None)
    ServerObjectName = property(get_ServerObjectName, putref_ServerObjectName, None)
    ThreadCount = property(get_ThreadCount, put_ThreadCount, None)

class IImageServerName(_esriCarto.IImageServerName):
    _IID = uuid.UUID('5338bcb0-edc4-4391-816d-57efcd386245')

    def __init__(self, *args, **kw):
        super(IImageServerName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Properties(self, ppProperties):
        '''Method IImageServerName.putref_Properties

           INPUT
            ppProperties        : IPropertySet*'''
        return super(IImageServerName, self).putref_Properties(ppProperties)
    def get_Properties(self):
        '''Method IImageServerName.get_Properties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IImageServerName, self).get_Properties()
    Properties = property(get_Properties, putref_Properties, None)

class IImageServerLayer2(_esriCarto.IImageServerLayer2):
    _IID = uuid.UUID('6db867a4-d78e-4471-a86d-6e455fc680d8')

    def __init__(self, *args, **kw):
        super(IImageServerLayer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ServiceInfo(self):
        '''Method IImageServerLayer2.get_ServiceInfo

           OUTPUT
            pServiceInfo        : BSTR*'''
        return super(IImageServerLayer2, self).get_ServiceInfo()
    def get_ServiceProperties(self):
        '''Method IImageServerLayer2.get_ServiceProperties

           OUTPUT
            pServiceProperties  : BSTR*'''
        return super(IImageServerLayer2, self).get_ServiceProperties()
    def GetMetaData(self, requestString):
        '''Method IImageServerLayer2.GetMetaData

           INPUT
            requestString       : BSTR

           OUTPUT
            pMetadata           : BSTR*'''
        return super(IImageServerLayer2, self).GetMetaData(requestString)
    def GetImageMetadata(self, levelOfDetail):
        '''Method IImageServerLayer2.GetImageMetadata

           INPUT
            levelOfDetail       : BSTR

           OUTPUT
            pImageMetaData      : BSTR*'''
        return super(IImageServerLayer2, self).GetImageMetadata(levelOfDetail)
    def GetProperty(self, Name):
        '''Method IImageServerLayer2.GetProperty

           INPUT
            Name                : BSTR

           OUTPUT
            pValue              : BSTR*'''
        return super(IImageServerLayer2, self).GetProperty(Name)
    def get_IsDataSourceAIS(self):
        '''Method IImageServerLayer2.get_IsDataSourceAIS

           OUTPUT
            pDsIsAIS            : VARIANT_BOOL*'''
        return super(IImageServerLayer2, self).get_IsDataSourceAIS()
    def get_MosaicProperties(self):
        '''Method IImageServerLayer2.get_MosaicProperties

           OUTPUT
            pMosaicProperties   : BSTR*'''
        return super(IImageServerLayer2, self).get_MosaicProperties()
    def put_MosaicProperties(self, pMosaicProperties):
        '''Method IImageServerLayer2.put_MosaicProperties

           INPUT
            pMosaicProperties   : BSTR'''
        return super(IImageServerLayer2, self).put_MosaicProperties(pMosaicProperties)
    def get_ViewpointProperties(self):
        '''Method IImageServerLayer2.get_ViewpointProperties

           OUTPUT
            pViewpointProperties: BSTR*'''
        return super(IImageServerLayer2, self).get_ViewpointProperties()
    def put_ViewpointProperties(self, pViewpointProperties):
        '''Method IImageServerLayer2.put_ViewpointProperties

           INPUT
            pViewpointProperties: BSTR'''
        return super(IImageServerLayer2, self).put_ViewpointProperties(pViewpointProperties)
    IsDataSourceAIS = property(get_IsDataSourceAIS, None, None)
    MosaicProperties = property(get_MosaicProperties, put_MosaicProperties, None)
    ServiceInfo = property(get_ServiceInfo, None, None)
    ServiceProperties = property(get_ServiceProperties, None, None)
    ViewpointProperties = property(get_ViewpointProperties, put_ViewpointProperties, None)

class IImageServerLayer3(_esriCarto.IImageServerLayer3):
    _IID = uuid.UUID('f1edb7a2-d4e4-47b6-886f-f778ac79f520')

    def __init__(self, *args, **kw):
        super(IImageServerLayer3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MosaicRule(self):
        '''Method IImageServerLayer3.get_MosaicRule

           OUTPUT
            ppMosaicRule        : IMosaicRule**'''
        return super(IImageServerLayer3, self).get_MosaicRule()
    def putref_MosaicRule(self, ppMosaicRule):
        '''Method IImageServerLayer3.putref_MosaicRule

           INPUT
            ppMosaicRule        : IMosaicRule*'''
        return super(IImageServerLayer3, self).putref_MosaicRule(ppMosaicRule)
    def get_RenderingRule(self):
        '''Method IImageServerLayer3.get_RenderingRule

           OUTPUT
            ppRenderingRule     : IRenderingRule**'''
        return super(IImageServerLayer3, self).get_RenderingRule()
    def putref_RenderingRule(self, ppRenderingRule):
        '''Method IImageServerLayer3.putref_RenderingRule

           INPUT
            ppRenderingRule     : IRenderingRule*'''
        return super(IImageServerLayer3, self).putref_RenderingRule(ppRenderingRule)
    def get_EnableCacheViewMode(self):
        '''Method IImageServerLayer3.get_EnableCacheViewMode

           OUTPUT
            pEnabled            : VARIANT_BOOL*'''
        return super(IImageServerLayer3, self).get_EnableCacheViewMode()
    def put_EnableCacheViewMode(self, pEnabled):
        '''Method IImageServerLayer3.put_EnableCacheViewMode

           INPUT
            pEnabled            : VARIANT_BOOL'''
        return super(IImageServerLayer3, self).put_EnableCacheViewMode(pEnabled)
    EnableCacheViewMode = property(get_EnableCacheViewMode, put_EnableCacheViewMode, None)
    MosaicRule = property(get_MosaicRule, putref_MosaicRule, None)
    RenderingRule = property(get_RenderingRule, putref_RenderingRule, None)

class IISLFootprintDisplayProps(_esriCarto.IISLFootprintDisplayProps):
    _IID = uuid.UUID('491d8627-1774-4429-96da-c08aeec42955')

    def __init__(self, *args, **kw):
        super(IISLFootprintDisplayProps, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FootprintDisplayEnabled(self):
        '''Method IISLFootprintDisplayProps.get_FootprintDisplayEnabled

           OUTPUT
            pEnabled            : VARIANT_BOOL*'''
        return super(IISLFootprintDisplayProps, self).get_FootprintDisplayEnabled()
    def put_FootprintDisplayEnabled(self, pEnabled):
        '''Method IISLFootprintDisplayProps.put_FootprintDisplayEnabled

           INPUT
            pEnabled            : VARIANT_BOOL'''
        return super(IISLFootprintDisplayProps, self).put_FootprintDisplayEnabled(pEnabled)
    def put_FootprintDisplayOption(self, pOption):
        '''Method IISLFootprintDisplayProps.put_FootprintDisplayOption

           INPUT
            pOption             : esriISLFootprintDisplayOptEnum'''
        return super(IISLFootprintDisplayProps, self).put_FootprintDisplayOption(pOption)
    def get_FootprintDisplayOption(self):
        '''Method IISLFootprintDisplayProps.get_FootprintDisplayOption

           OUTPUT
            pOption             : esriISLFootprintDisplayOptEnum*'''
        return super(IISLFootprintDisplayProps, self).get_FootprintDisplayOption()
    def putref_FootprintDisplaySymbol(self, ppSymbol):
        '''Method IISLFootprintDisplayProps.putref_FootprintDisplaySymbol

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IISLFootprintDisplayProps, self).putref_FootprintDisplaySymbol(ppSymbol)
    def get_FootprintDisplaySymbol(self):
        '''Method IISLFootprintDisplayProps.get_FootprintDisplaySymbol

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IISLFootprintDisplayProps, self).get_FootprintDisplaySymbol()
    FootprintDisplayEnabled = property(get_FootprintDisplayEnabled, put_FootprintDisplayEnabled, None)
    FootprintDisplayOption = property(get_FootprintDisplayOption, put_FootprintDisplayOption, None)
    FootprintDisplaySymbol = property(get_FootprintDisplaySymbol, putref_FootprintDisplaySymbol, None)

class IDataObjectEx(_esriCarto.IDataObjectEx):
    _IID = uuid.UUID('543eed5c-026b-4562-b942-042a2c05d03b')

    def __init__(self, *args, **kw):
        super(IDataObjectEx, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Properties(self):
        '''Method IDataObjectEx.get_Properties

           OUTPUT
            props               : IPropertySet**'''
        return super(IDataObjectEx, self).get_Properties()
    def putref_Properties(self, props):
        '''Method IDataObjectEx.putref_Properties

           INPUT
            props               : IPropertySet*'''
        return super(IDataObjectEx, self).putref_Properties(props)
    Properties = property(get_Properties, putref_Properties, None)

class IDataObjectArray(_esriCarto.IDataObjectArray):
    _IID = uuid.UUID('a7bb80a0-07b3-434c-a8e8-7b413008b13d')
    def get_Count(self):
        '''Method IDataObjectArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDataObjectArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IDataObjectArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            DataObject          : IDataObjectEx**'''
        return super(IDataObjectArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IDataObjectArray.Remove

           INPUT
            Index               : long'''
        return super(IDataObjectArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IDataObjectArray.RemoveAll'''
        return super(IDataObjectArray, self).RemoveAll()
    def Add(self, DataObject):
        '''Method IDataObjectArray.Add

           INPUT
            DataObject          : IDataObjectEx*'''
        return super(IDataObjectArray, self).Add(DataObject)
    def Insert(self, Index, DataObject):
        '''Method IDataObjectArray.Insert

           INPUTS
            Index               : long
            DataObject          : IDataObjectEx*'''
        return super(IDataObjectArray, self).Insert(Index, DataObject)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDataObjects(_esriCarto.IDataObjects):
    _IID = uuid.UUID('705de0f9-26cf-4a02-85a6-6c99bafe1aa9')

    def __init__(self, *args, **kw):
        super(IDataObjects, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DataObjectArray(self):
        '''Method IDataObjects.get_DataObjectArray

           OUTPUT
            DataObjectArray     : IDataObjectArray**'''
        return super(IDataObjects, self).get_DataObjectArray()
    def putref_DataObjectArray(self, DataObjectArray):
        '''Method IDataObjects.putref_DataObjectArray

           INPUT
            DataObjectArray     : IDataObjectArray*'''
        return super(IDataObjects, self).putref_DataObjectArray(DataObjectArray)
    def get_SpatialReference(self):
        '''Method IDataObjects.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IDataObjects, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IDataObjects.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IDataObjects, self).putref_SpatialReference(SpatialReference)
    def get_TimeReference(self):
        '''Method IDataObjects.get_TimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IDataObjects, self).get_TimeReference()
    def putref_TimeReference(self, TimeReference):
        '''Method IDataObjects.putref_TimeReference

           INPUT
            TimeReference       : ITimeReference*'''
        return super(IDataObjects, self).putref_TimeReference(TimeReference)
    DataObjectArray = property(get_DataObjectArray, putref_DataObjectArray, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TimeReference = property(get_TimeReference, putref_TimeReference, None)

class IPropertyInfo(_esriCarto.IPropertyInfo):
    _IID = uuid.UUID('c4e2ff58-4b56-4a6d-af02-8b4f38e14b18')
    def get_AliasName(self):
        '''Method IPropertyInfo.get_AliasName

           OUTPUT
            Name                : BSTR*'''
        return super(IPropertyInfo, self).get_AliasName()
    def get_Domain(self):
        '''Method IPropertyInfo.get_Domain

           OUTPUT
            Domain              : IDomain**'''
        return super(IPropertyInfo, self).get_Domain()
    def get_Editable(self):
        '''Method IPropertyInfo.get_Editable

           OUTPUT
            IsEditable          : VARIANT_BOOL*'''
        return super(IPropertyInfo, self).get_Editable()
    def get_IsNullable(self):
        '''Method IPropertyInfo.get_IsNullable

           OUTPUT
            IsNullable          : VARIANT_BOOL*'''
        return super(IPropertyInfo, self).get_IsNullable()
    def get_Length(self):
        '''Method IPropertyInfo.get_Length

           OUTPUT
            Length              : long*'''
        return super(IPropertyInfo, self).get_Length()
    def get_Name(self):
        '''Method IPropertyInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IPropertyInfo, self).get_Name()
    def get_Type(self):
        '''Method IPropertyInfo.get_Type

           OUTPUT
            FieldType           : esriFieldType*'''
        return super(IPropertyInfo, self).get_Type()
    AliasName = property(get_AliasName, None, None)
    Domain = property(get_Domain, None, None)
    Editable = property(get_Editable, None, None)
    IsNullable = property(get_IsNullable, None, None)
    Length = property(get_Length, None, None)
    Name = property(get_Name, None, None)
    Type = property(get_Type, None, None)

class IPropertyInfos(_esriCarto.IPropertyInfos):
    _IID = uuid.UUID('b0537517-e960-4566-bdee-c6d1c472c325')
    def get_Count(self):
        '''Method IPropertyInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IPropertyInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IPropertyInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            PropertyInfo        : IPropertyInfo**'''
        return super(IPropertyInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IPropertyInfos.Remove

           INPUT
            Index               : long'''
        return super(IPropertyInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IPropertyInfos.RemoveAll'''
        return super(IPropertyInfos, self).RemoveAll()
    def Add(self, PropertyInfo):
        '''Method IPropertyInfos.Add

           INPUT
            PropertyInfo        : IPropertyInfo*'''
        return super(IPropertyInfos, self).Add(PropertyInfo)
    def Insert(self, Index, PropertyInfo):
        '''Method IPropertyInfos.Insert

           INPUTS
            Index               : long
            PropertyInfo        : IPropertyInfo*'''
        return super(IPropertyInfos, self).Insert(Index, PropertyInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ITemplateInfo(_esriCarto.ITemplateInfo):
    _IID = uuid.UUID('5a029bb8-dab1-4ba4-9ab6-e60c4fa11691')
    def get_DefaultTool(self):
        '''Method ITemplateInfo.get_DefaultTool

           OUTPUT
            DefaultTool         : esriFeatureEditTool*'''
        return super(ITemplateInfo, self).get_DefaultTool()
    def get_Description(self):
        '''Method ITemplateInfo.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(ITemplateInfo, self).get_Description()
    def get_Name(self):
        '''Method ITemplateInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ITemplateInfo, self).get_Name()
    def get_Prototype(self):
        '''Method ITemplateInfo.get_Prototype

           OUTPUT
            prototypeObject     : IDataObjectEx**'''
        return super(ITemplateInfo, self).get_Prototype()
    DefaultTool = property(get_DefaultTool, None, None)
    Description = property(get_Description, None, None)
    Name = property(get_Name, None, None)
    Prototype = property(get_Prototype, None, None)

class ITemplateInfos(_esriCarto.ITemplateInfos):
    _IID = uuid.UUID('5470f9b9-da16-4265-809c-abc18ab04499')
    def get_Count(self):
        '''Method ITemplateInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(ITemplateInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method ITemplateInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppTemplateInfo      : ITemplateInfo**'''
        return super(ITemplateInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ITemplateInfos.Remove

           INPUT
            Index               : long'''
        return super(ITemplateInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method ITemplateInfos.RemoveAll'''
        return super(ITemplateInfos, self).RemoveAll()
    def Add(self, TemplateInfo):
        '''Method ITemplateInfos.Add

           INPUT
            TemplateInfo        : ITemplateInfo*'''
        return super(ITemplateInfos, self).Add(TemplateInfo)
    def Insert(self, Index, TemplateInfo):
        '''Method ITemplateInfos.Insert

           INPUTS
            Index               : long
            TemplateInfo        : ITemplateInfo*'''
        return super(ITemplateInfos, self).Insert(Index, TemplateInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDataObjectType(_esriCarto.IDataObjectType):
    _IID = uuid.UUID('8438a9fd-3de3-4efd-a58e-7152147eb298')
    def get_Name(self):
        '''Method IDataObjectType.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDataObjectType, self).get_Name()
    def get_PropDomains(self):
        '''Method IDataObjectType.get_PropDomains

           OUTPUT
            PropDomains         : IPropertySet**'''
        return super(IDataObjectType, self).get_PropDomains()
    def get_Templates(self):
        '''Method IDataObjectType.get_Templates

           OUTPUT
            TemplateInfos       : ITemplateInfos**'''
        return super(IDataObjectType, self).get_Templates()
    def get_TypeID(self):
        '''Method IDataObjectType.get_TypeID

           OUTPUT
            variant             : VARIANT*'''
        return super(IDataObjectType, self).get_TypeID()
    Name = property(get_Name, None, None)
    PropDomains = property(get_PropDomains, None, None)
    Templates = property(get_Templates, None, None)
    TypeID = property(get_TypeID, None, None)

class IDataObjectTypes(_esriCarto.IDataObjectTypes):
    _IID = uuid.UUID('8461b9ae-ce53-4513-a5ab-6f22035b9057')
    def get_Count(self):
        '''Method IDataObjectTypes.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDataObjectTypes, self).get_Count()
    def get_Element(self, Index):
        '''Method IDataObjectTypes.get_Element

           INPUT
            Index               : long

           OUTPUT
            DataObjectType      : IDataObjectType**'''
        return super(IDataObjectTypes, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IDataObjectTypes.Remove

           INPUT
            Index               : long'''
        return super(IDataObjectTypes, self).Remove(Index)
    def RemoveAll(self):
        '''Method IDataObjectTypes.RemoveAll'''
        return super(IDataObjectTypes, self).RemoveAll()
    def Add(self, DataObjectType):
        '''Method IDataObjectTypes.Add

           INPUT
            DataObjectType      : IDataObjectType*'''
        return super(IDataObjectTypes, self).Add(DataObjectType)
    def Insert(self, Index, DataObjectType):
        '''Method IDataObjectTypes.Insert

           INPUTS
            Index               : long
            DataObjectType      : IDataObjectType*'''
        return super(IDataObjectTypes, self).Insert(Index, DataObjectType)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDataObjectTable(_esriCarto.IDataObjectTable):
    _IID = uuid.UUID('72ee5f8a-f039-48da-b057-e61c7b6382da')
    def get_CopyrightText(self):
        '''Method IDataObjectTable.get_CopyrightText

           OUTPUT
            copyright           : BSTR*'''
        return super(IDataObjectTable, self).get_CopyrightText()
    def get_Description(self):
        '''Method IDataObjectTable.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IDataObjectTable, self).get_Description()
    def get_DisplayPropName(self):
        '''Method IDataObjectTable.get_DisplayPropName

           OUTPUT
            propName            : BSTR*'''
        return super(IDataObjectTable, self).get_DisplayPropName()
    def get_GlobalIDPropName(self):
        '''Method IDataObjectTable.get_GlobalIDPropName

           OUTPUT
            propName            : BSTR*'''
        return super(IDataObjectTable, self).get_GlobalIDPropName()
    def get_HasAttachments(self):
        '''Method IDataObjectTable.get_HasAttachments

           OUTPUT
            HasAttachments      : VARIANT_BOOL*'''
        return super(IDataObjectTable, self).get_HasAttachments()
    def get_HTMLPopupType(self):
        '''Method IDataObjectTable.get_HTMLPopupType

           OUTPUT
            Type                : esriServerHTMLPopupType*'''
        return super(IDataObjectTable, self).get_HTMLPopupType()
    def get_ID(self):
        '''Method IDataObjectTable.get_ID

           OUTPUT
            ID                  : long*'''
        return super(IDataObjectTable, self).get_ID()
    def get_Name(self):
        '''Method IDataObjectTable.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IDataObjectTable, self).get_Name()
    def get_OIDPropName(self):
        '''Method IDataObjectTable.get_OIDPropName

           OUTPUT
            propName            : BSTR*'''
        return super(IDataObjectTable, self).get_OIDPropName()
    def get_PropertyInfos(self):
        '''Method IDataObjectTable.get_PropertyInfos

           OUTPUT
            PropertyInfos       : IPropertyInfos**'''
        return super(IDataObjectTable, self).get_PropertyInfos()
    def get_Relations(self):
        '''Method IDataObjectTable.get_Relations

           OUTPUT
            RelateInfos         : IRelateInfos**'''
        return super(IDataObjectTable, self).get_Relations()
    def get_Templates(self):
        '''Method IDataObjectTable.get_Templates

           OUTPUT
            TemplateInfos       : ITemplateInfos**'''
        return super(IDataObjectTable, self).get_Templates()
    def get_TypeIDPropName(self):
        '''Method IDataObjectTable.get_TypeIDPropName

           OUTPUT
            propName            : BSTR*'''
        return super(IDataObjectTable, self).get_TypeIDPropName()
    def get_Types(self):
        '''Method IDataObjectTable.get_Types

           OUTPUT
            DataObjectTypes     : IDataObjectTypes**'''
        return super(IDataObjectTable, self).get_Types()
    CopyrightText = property(get_CopyrightText, None, None)
    Description = property(get_Description, None, None)
    DisplayPropName = property(get_DisplayPropName, None, None)
    GlobalIDPropName = property(get_GlobalIDPropName, None, None)
    HTMLPopupType = property(get_HTMLPopupType, None, None)
    HasAttachments = property(get_HasAttachments, None, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, None, None)
    OIDPropName = property(get_OIDPropName, None, None)
    PropertyInfos = property(get_PropertyInfos, None, None)
    Relations = property(get_Relations, None, None)
    Templates = property(get_Templates, None, None)
    TypeIDPropName = property(get_TypeIDPropName, None, None)
    Types = property(get_Types, None, None)

class IDataObjectTables(_esriCarto.IDataObjectTables):
    _IID = uuid.UUID('f40acaf4-7ae6-4ae5-a3d3-2fe1b16823fc')
    def get_Count(self):
        '''Method IDataObjectTables.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDataObjectTables, self).get_Count()
    def get_Element(self, Index):
        '''Method IDataObjectTables.get_Element

           INPUT
            Index               : long

           OUTPUT
            DataObjectTable     : IDataObjectTable**'''
        return super(IDataObjectTables, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IDataObjectTables.Remove

           INPUT
            Index               : long'''
        return super(IDataObjectTables, self).Remove(Index)
    def RemoveAll(self):
        '''Method IDataObjectTables.RemoveAll'''
        return super(IDataObjectTables, self).RemoveAll()
    def Add(self, DataObjectTable):
        '''Method IDataObjectTables.Add

           INPUT
            DataObjectTable     : IDataObjectTable*'''
        return super(IDataObjectTables, self).Add(DataObjectTable)
    def Insert(self, Index, DataObjectTable):
        '''Method IDataObjectTables.Insert

           INPUTS
            Index               : long
            DataObjectTable     : IDataObjectTable*'''
        return super(IDataObjectTables, self).Insert(Index, DataObjectTable)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDomainInfo(_esriCarto.IDomainInfo):
    _IID = uuid.UUID('35214dc9-58b6-4e08-924d-ccde21d0c68d')
    def get_Domain(self):
        '''Method IDomainInfo.get_Domain

           OUTPUT
            Domain              : IDomain**'''
        return super(IDomainInfo, self).get_Domain()
    def get_Inherited(self):
        '''Method IDomainInfo.get_Inherited

           OUTPUT
            IsInherited         : VARIANT_BOOL*'''
        return super(IDomainInfo, self).get_Inherited()
    Domain = property(get_Domain, None, None)
    Inherited = property(get_Inherited, None, None)

class IGraphicFeature(_esriCarto.IGraphicFeature):
    _IID = uuid.UUID('b846f66c-1c5b-41d4-9355-d6d59431a85b')

    def __init__(self, *args, **kw):
        super(IGraphicFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Geometry(self):
        '''Method IGraphicFeature.get_Geometry

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IGraphicFeature, self).get_Geometry()
    def putref_Geometry(self, Geometry):
        '''Method IGraphicFeature.putref_Geometry

           INPUT
            Geometry            : IGeometry*'''
        return super(IGraphicFeature, self).putref_Geometry(Geometry)
    def get_Properties(self):
        '''Method IDataObjectEx.get_Properties (from IDataObjectEx)

           OUTPUT
            props               : IPropertySet**'''
        return super(IGraphicFeature, self).get_Properties()
    def putref_Properties(self, props):
        '''Method IDataObjectEx.putref_Properties (from IDataObjectEx)

           INPUT
            props               : IPropertySet*'''
        return super(IGraphicFeature, self).putref_Properties(props)
    Geometry = property(get_Geometry, putref_Geometry, None)
    Properties = property(get_Properties, putref_Properties, None)

class IGraphicFeatures(_esriCarto.IGraphicFeatures):
    _IID = uuid.UUID('fdfa6b60-bf2b-49ef-80ca-4c00eddd1596')
    def get_Count(self):
        '''Method IGraphicFeatures.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGraphicFeatures, self).get_Count()
    def get_Element(self, Index):
        '''Method IGraphicFeatures.get_Element

           INPUT
            Index               : long

           OUTPUT
            Feature             : IGraphicFeature**'''
        return super(IGraphicFeatures, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGraphicFeatures.Remove

           INPUT
            Index               : long'''
        return super(IGraphicFeatures, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGraphicFeatures.RemoveAll'''
        return super(IGraphicFeatures, self).RemoveAll()
    def Add(self, Feature):
        '''Method IGraphicFeatures.Add

           INPUT
            Feature             : IGraphicFeature*'''
        return super(IGraphicFeatures, self).Add(Feature)
    def Insert(self, Index, Feature):
        '''Method IGraphicFeatures.Insert

           INPUTS
            Index               : long
            Feature             : IGraphicFeature*'''
        return super(IGraphicFeatures, self).Insert(Index, Feature)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGraphicFeatureLayer(_esriCarto.IGraphicFeatureLayer):
    _IID = uuid.UUID('d932a966-dad8-4d0e-8807-dead0dae0aac')
    def get_GeometryFieldName(self):
        '''Method IGraphicFeatureLayer.get_GeometryFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_GeometryFieldName()
    def get_GeometryType(self):
        '''Method IGraphicFeatureLayer.get_GeometryType

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(IGraphicFeatureLayer, self).get_GeometryType()
    def get_LayerDrawingDescription(self):
        '''Method IGraphicFeatureLayer.get_LayerDrawingDescription

           OUTPUT
            LayerDrawingDescription: IFeatureLayerDrawingDescription**'''
        return super(IGraphicFeatureLayer, self).get_LayerDrawingDescription()
    def get_MaxScale(self):
        '''Method IGraphicFeatureLayer.get_MaxScale

           OUTPUT
            Scale               : double*'''
        return super(IGraphicFeatureLayer, self).get_MaxScale()
    def get_MinScale(self):
        '''Method IGraphicFeatureLayer.get_MinScale

           OUTPUT
            Scale               : double*'''
        return super(IGraphicFeatureLayer, self).get_MinScale()
    def get_SpatialReference(self):
        '''Method IGraphicFeatureLayer.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IGraphicFeatureLayer, self).get_SpatialReference()
    def get_SpatialExtent(self):
        '''Method IGraphicFeatureLayer.get_SpatialExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGraphicFeatureLayer, self).get_SpatialExtent()
    def get_CopyrightText(self):
        '''Method IDataObjectTable.get_CopyrightText (from IDataObjectTable)

           OUTPUT
            copyright           : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_CopyrightText()
    def get_Description(self):
        '''Method IDataObjectTable.get_Description (from IDataObjectTable)

           OUTPUT
            desc                : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_Description()
    def get_DisplayPropName(self):
        '''Method IDataObjectTable.get_DisplayPropName (from IDataObjectTable)

           OUTPUT
            propName            : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_DisplayPropName()
    def get_GlobalIDPropName(self):
        '''Method IDataObjectTable.get_GlobalIDPropName (from IDataObjectTable)

           OUTPUT
            propName            : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_GlobalIDPropName()
    def get_HasAttachments(self):
        '''Method IDataObjectTable.get_HasAttachments (from IDataObjectTable)

           OUTPUT
            HasAttachments      : VARIANT_BOOL*'''
        return super(IGraphicFeatureLayer, self).get_HasAttachments()
    def get_HTMLPopupType(self):
        '''Method IDataObjectTable.get_HTMLPopupType (from IDataObjectTable)

           OUTPUT
            Type                : esriServerHTMLPopupType*'''
        return super(IGraphicFeatureLayer, self).get_HTMLPopupType()
    def get_ID(self):
        '''Method IDataObjectTable.get_ID (from IDataObjectTable)

           OUTPUT
            ID                  : long*'''
        return super(IGraphicFeatureLayer, self).get_ID()
    def get_Name(self):
        '''Method IDataObjectTable.get_Name (from IDataObjectTable)

           OUTPUT
            pName               : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_Name()
    def get_OIDPropName(self):
        '''Method IDataObjectTable.get_OIDPropName (from IDataObjectTable)

           OUTPUT
            propName            : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_OIDPropName()
    def get_PropertyInfos(self):
        '''Method IDataObjectTable.get_PropertyInfos (from IDataObjectTable)

           OUTPUT
            PropertyInfos       : IPropertyInfos**'''
        return super(IGraphicFeatureLayer, self).get_PropertyInfos()
    def get_Relations(self):
        '''Method IDataObjectTable.get_Relations (from IDataObjectTable)

           OUTPUT
            RelateInfos         : IRelateInfos**'''
        return super(IGraphicFeatureLayer, self).get_Relations()
    def get_Templates(self):
        '''Method IDataObjectTable.get_Templates (from IDataObjectTable)

           OUTPUT
            TemplateInfos       : ITemplateInfos**'''
        return super(IGraphicFeatureLayer, self).get_Templates()
    def get_TypeIDPropName(self):
        '''Method IDataObjectTable.get_TypeIDPropName (from IDataObjectTable)

           OUTPUT
            propName            : BSTR*'''
        return super(IGraphicFeatureLayer, self).get_TypeIDPropName()
    def get_Types(self):
        '''Method IDataObjectTable.get_Types (from IDataObjectTable)

           OUTPUT
            DataObjectTypes     : IDataObjectTypes**'''
        return super(IGraphicFeatureLayer, self).get_Types()
    CopyrightText = property(get_CopyrightText, None, None)
    Description = property(get_Description, None, None)
    DisplayPropName = property(get_DisplayPropName, None, None)
    GeometryFieldName = property(get_GeometryFieldName, None, None)
    GeometryType = property(get_GeometryType, None, None)
    GlobalIDPropName = property(get_GlobalIDPropName, None, None)
    HTMLPopupType = property(get_HTMLPopupType, None, None)
    HasAttachments = property(get_HasAttachments, None, None)
    ID = property(get_ID, None, None)
    LayerDrawingDescription = property(get_LayerDrawingDescription, None, None)
    MaxScale = property(get_MaxScale, None, None)
    MinScale = property(get_MinScale, None, None)
    Name = property(get_Name, None, None)
    OIDPropName = property(get_OIDPropName, None, None)
    PropertyInfos = property(get_PropertyInfos, None, None)
    Relations = property(get_Relations, None, None)
    SpatialExtent = property(get_SpatialExtent, None, None)
    SpatialReference = property(get_SpatialReference, None, None)
    Templates = property(get_Templates, None, None)
    TypeIDPropName = property(get_TypeIDPropName, None, None)
    Types = property(get_Types, None, None)

class IGraphicFeatureLayers(_esriCarto.IGraphicFeatureLayers):
    _IID = uuid.UUID('be67627f-4b0b-414f-bf8d-0cc0a2d6b648')
    def get_Count(self):
        '''Method IGraphicFeatureLayers.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGraphicFeatureLayers, self).get_Count()
    def get_Element(self, Index):
        '''Method IGraphicFeatureLayers.get_Element

           INPUT
            Index               : long

           OUTPUT
            GraphicFeatureLayer : IGraphicFeatureLayer**'''
        return super(IGraphicFeatureLayers, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGraphicFeatureLayers.Remove

           INPUT
            Index               : long'''
        return super(IGraphicFeatureLayers, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGraphicFeatureLayers.RemoveAll'''
        return super(IGraphicFeatureLayers, self).RemoveAll()
    def Add(self, GraphicFeatureLayer):
        '''Method IGraphicFeatureLayers.Add

           INPUT
            GraphicFeatureLayer : IGraphicFeatureLayer*'''
        return super(IGraphicFeatureLayers, self).Add(GraphicFeatureLayer)
    def Insert(self, Index, GraphicFeatureLayer):
        '''Method IGraphicFeatureLayers.Insert

           INPUTS
            Index               : long
            GraphicFeatureLayer : IGraphicFeatureLayer*'''
        return super(IGraphicFeatureLayers, self).Insert(Index, GraphicFeatureLayer)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGFSTableDescription(_esriCarto.IGFSTableDescription):
    _IID = uuid.UUID('94793181-ae26-4a98-93ff-6f3e3efbd3b8')

    def __init__(self, *args, **kw):
        super(IGFSTableDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method IGFSTableDescription.get_ID

           OUTPUT
            ID                  : long*'''
        return super(IGFSTableDescription, self).get_ID()
    def put_ID(self, ID):
        '''Method IGFSTableDescription.put_ID

           INPUT
            ID                  : long'''
        return super(IGFSTableDescription, self).put_ID(ID)
    def get_DefinitionExpression(self):
        '''Method IGFSTableDescription.get_DefinitionExpression

           OUTPUT
            Expression          : BSTR*'''
        return super(IGFSTableDescription, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, Expression):
        '''Method IGFSTableDescription.put_DefinitionExpression

           INPUT
            Expression          : BSTR'''
        return super(IGFSTableDescription, self).put_DefinitionExpression(Expression)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    ID = property(get_ID, put_ID, None)

class IGFSTableDescriptions(_esriCarto.IGFSTableDescriptions):
    _IID = uuid.UUID('16a9a81b-b235-4c73-b6ae-a918bf06854d')
    def get_Count(self):
        '''Method IGFSTableDescriptions.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGFSTableDescriptions, self).get_Count()
    def get_Element(self, Index):
        '''Method IGFSTableDescriptions.get_Element

           INPUT
            Index               : long

           OUTPUT
            TableDescription    : IGFSTableDescription**'''
        return super(IGFSTableDescriptions, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGFSTableDescriptions.Remove

           INPUT
            Index               : long'''
        return super(IGFSTableDescriptions, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGFSTableDescriptions.RemoveAll'''
        return super(IGFSTableDescriptions, self).RemoveAll()
    def Add(self, TableDescription):
        '''Method IGFSTableDescriptions.Add

           INPUT
            TableDescription    : IGFSTableDescription*'''
        return super(IGFSTableDescriptions, self).Add(TableDescription)
    def Insert(self, Index, TableDescription):
        '''Method IGFSTableDescriptions.Insert

           INPUTS
            Index               : long
            TableDescription    : IGFSTableDescription*'''
        return super(IGFSTableDescriptions, self).Insert(Index, TableDescription)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGFSReplicaDescription(_esriCarto.IGFSReplicaDescription):
    _IID = uuid.UUID('626846a5-e9ed-4fbf-be66-54923601cf5c')

    def __init__(self, *args, **kw):
        super(IGFSReplicaDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_TableDescriptions(self, GFSTableDescriptions):
        '''Method IGFSReplicaDescription.putref_TableDescriptions

           INPUT
            GFSTableDescriptions: IGFSTableDescriptions*'''
        return super(IGFSReplicaDescription, self).putref_TableDescriptions(GFSTableDescriptions)
    def get_TableDescriptions(self):
        '''Method IGFSReplicaDescription.get_TableDescriptions

           OUTPUT
            GFSTableDescriptions: IGFSTableDescriptions**'''
        return super(IGFSReplicaDescription, self).get_TableDescriptions()
    def put_SingleGeneration(self, SingleGeneration):
        '''Method IGFSReplicaDescription.put_SingleGeneration

           INPUT
            SingleGeneration    : VARIANT_BOOL'''
        return super(IGFSReplicaDescription, self).put_SingleGeneration(SingleGeneration)
    def get_SingleGeneration(self):
        '''Method IGFSReplicaDescription.get_SingleGeneration

           OUTPUT
            SingleGeneration    : VARIANT_BOOL*'''
        return super(IGFSReplicaDescription, self).get_SingleGeneration()
    def putref_QueryGeometry(self, QueryGeometry):
        '''Method IGFSReplicaDescription.putref_QueryGeometry

           INPUT
            QueryGeometry       : IGeometry*'''
        return super(IGFSReplicaDescription, self).putref_QueryGeometry(QueryGeometry)
    def get_QueryGeometry(self):
        '''Method IGFSReplicaDescription.get_QueryGeometry

           OUTPUT
            QueryGeometry       : IGeometry**'''
        return super(IGFSReplicaDescription, self).get_QueryGeometry()
    def put_ModelType(self, ModelType):
        '''Method IGFSReplicaDescription.put_ModelType

           INPUT
            ModelType           : esriReplicaModelType'''
        return super(IGFSReplicaDescription, self).put_ModelType(ModelType)
    def get_ModelType(self):
        '''Method IGFSReplicaDescription.get_ModelType

           OUTPUT
            ModelType           : esriReplicaModelType*'''
        return super(IGFSReplicaDescription, self).get_ModelType()
    ModelType = property(get_ModelType, put_ModelType, None)
    QueryGeometry = property(get_QueryGeometry, putref_QueryGeometry, None)
    SingleGeneration = property(get_SingleGeneration, put_SingleGeneration, None)
    TableDescriptions = property(get_TableDescriptions, putref_TableDescriptions, None)

class IGFLayerTableDataMapping(_esriCarto.IGFLayerTableDataMapping):
    _IID = uuid.UUID('ea0e07e3-ef85-4138-8102-73e7fbb70ce3')
    def get_DatasetName(self):
        '''Method IGFLayerTableDataMapping.get_DatasetName

           OUTPUT
            DatasetName         : BSTR*'''
        return super(IGFLayerTableDataMapping, self).get_DatasetName()
    def get_LayerOrTableName(self):
        '''Method IGFLayerTableDataMapping.get_LayerOrTableName

           OUTPUT
            LayerOrTableName    : BSTR*'''
        return super(IGFLayerTableDataMapping, self).get_LayerOrTableName()
    DatasetName = property(get_DatasetName, None, None)
    LayerOrTableName = property(get_LayerOrTableName, None, None)

class IGFLayerTableDataMappings(_esriCarto.IGFLayerTableDataMappings):
    _IID = uuid.UUID('d862676c-14dc-4fe8-a1fc-fc9f02c00e2a')
    def get_Count(self):
        '''Method IGFLayerTableDataMappings.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGFLayerTableDataMappings, self).get_Count()
    def get_Element(self, Index):
        '''Method IGFLayerTableDataMappings.get_Element

           INPUT
            Index               : long

           OUTPUT
            GFLayerTableDataMapping: IGFLayerTableDataMapping**'''
        return super(IGFLayerTableDataMappings, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGFLayerTableDataMappings.Remove

           INPUT
            Index               : long'''
        return super(IGFLayerTableDataMappings, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGFLayerTableDataMappings.RemoveAll'''
        return super(IGFLayerTableDataMappings, self).RemoveAll()
    def Add(self, GFLayerTableDataMapping):
        '''Method IGFLayerTableDataMappings.Add

           INPUT
            GFLayerTableDataMapping: IGFLayerTableDataMapping*'''
        return super(IGFLayerTableDataMappings, self).Add(GFLayerTableDataMapping)
    def Insert(self, Index, GFLayerTableDataMapping):
        '''Method IGFLayerTableDataMappings.Insert

           INPUTS
            Index               : long
            GFLayerTableDataMapping: IGFLayerTableDataMapping*'''
        return super(IGFLayerTableDataMappings, self).Insert(Index, GFLayerTableDataMapping)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDataObjectGroup(_esriCarto.IDataObjectGroup):
    _IID = uuid.UUID('cac8e0b4-9a73-4089-8b02-5848ddc2a80a')
    def get_GroupID(self):
        '''Method IDataObjectGroup.get_GroupID

           OUTPUT
            GroupID             : long*'''
        return super(IDataObjectGroup, self).get_GroupID()
    def get_DataObjectArray(self):
        '''Method IDataObjectGroup.get_DataObjectArray

           OUTPUT
            objectArray         : IDataObjectArray**'''
        return super(IDataObjectGroup, self).get_DataObjectArray()
    DataObjectArray = property(get_DataObjectArray, None, None)
    GroupID = property(get_GroupID, None, None)

class IDataObjectGroupArray(_esriCarto.IDataObjectGroupArray):
    _IID = uuid.UUID('1ddc825c-dd29-48c0-aa1b-68aadbceaf8a')
    def get_Count(self):
        '''Method IDataObjectGroupArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDataObjectGroupArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IDataObjectGroupArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            DataObjectGroup     : IDataObjectGroup**'''
        return super(IDataObjectGroupArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IDataObjectGroupArray.Remove

           INPUT
            Index               : long'''
        return super(IDataObjectGroupArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IDataObjectGroupArray.RemoveAll'''
        return super(IDataObjectGroupArray, self).RemoveAll()
    def Add(self, DataObjectGroup):
        '''Method IDataObjectGroupArray.Add

           INPUT
            DataObjectGroup     : IDataObjectGroup*'''
        return super(IDataObjectGroupArray, self).Add(DataObjectGroup)
    def Insert(self, Index, DataObjectGroup):
        '''Method IDataObjectGroupArray.Insert

           INPUTS
            Index               : long
            DataObjectGroup     : IDataObjectGroup*'''
        return super(IDataObjectGroupArray, self).Insert(Index, DataObjectGroup)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDataObjectGroups(_esriCarto.IDataObjectGroups):
    _IID = uuid.UUID('5a48028a-d702-47d7-b51b-8c48b9d8192d')
    def get_DataObjectGroupArray(self):
        '''Method IDataObjectGroups.get_DataObjectGroupArray

           OUTPUT
            DataObjectGroupArray: IDataObjectGroupArray**'''
        return super(IDataObjectGroups, self).get_DataObjectGroupArray()
    def get_SpatialReference(self):
        '''Method IDataObjectGroups.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IDataObjectGroups, self).get_SpatialReference()
    def get_TimeReference(self):
        '''Method IDataObjectGroups.get_TimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IDataObjectGroups, self).get_TimeReference()
    DataObjectGroupArray = property(get_DataObjectGroupArray, None, None)
    SpatialReference = property(get_SpatialReference, None, None)
    TimeReference = property(get_TimeReference, None, None)

class ITableEdit(_esriCarto.ITableEdit):
    _IID = uuid.UUID('da0e099c-0595-438d-bc13-ac90cc5d12fc')

    def __init__(self, *args, **kw):
        super(ITableEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Adds(self):
        '''Method ITableEdit.get_Adds

           OUTPUT
            addObjects          : IDataObjects**'''
        return super(ITableEdit, self).get_Adds()
    def putref_Adds(self, addObjects):
        '''Method ITableEdit.putref_Adds

           INPUT
            addObjects          : IDataObjects*'''
        return super(ITableEdit, self).putref_Adds(addObjects)
    def get_Deletes(self):
        '''Method ITableEdit.get_Deletes

           OUTPUT
            deleteOIDs          : ILongArray**'''
        return super(ITableEdit, self).get_Deletes()
    def putref_Deletes(self, deleteOIDs):
        '''Method ITableEdit.putref_Deletes

           INPUT
            deleteOIDs          : ILongArray*'''
        return super(ITableEdit, self).putref_Deletes(deleteOIDs)
    def get_LayerOrTableID(self):
        '''Method ITableEdit.get_LayerOrTableID

           OUTPUT
            LayerOrTableID      : long*'''
        return super(ITableEdit, self).get_LayerOrTableID()
    def put_LayerOrTableID(self, LayerOrTableID):
        '''Method ITableEdit.put_LayerOrTableID

           INPUT
            LayerOrTableID      : long'''
        return super(ITableEdit, self).put_LayerOrTableID(LayerOrTableID)
    def get_Updates(self):
        '''Method ITableEdit.get_Updates

           OUTPUT
            updateObjects       : IDataObjects**'''
        return super(ITableEdit, self).get_Updates()
    def putref_Updates(self, updateObjects):
        '''Method ITableEdit.putref_Updates

           INPUT
            updateObjects       : IDataObjects*'''
        return super(ITableEdit, self).putref_Updates(updateObjects)
    Adds = property(get_Adds, putref_Adds, None)
    Deletes = property(get_Deletes, putref_Deletes, None)
    LayerOrTableID = property(get_LayerOrTableID, put_LayerOrTableID, None)
    Updates = property(get_Updates, putref_Updates, None)

class ITableEdits(_esriCarto.ITableEdits):
    _IID = uuid.UUID('8a60574a-b56b-460d-9ef1-95359293bfac')
    def get_Count(self):
        '''Method ITableEdits.get_Count

           OUTPUT
            Count               : long*'''
        return super(ITableEdits, self).get_Count()
    def get_Element(self, Index):
        '''Method ITableEdits.get_Element

           INPUT
            Index               : long

           OUTPUT
            TableEdit           : ITableEdit**'''
        return super(ITableEdits, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ITableEdits.Remove

           INPUT
            Index               : long'''
        return super(ITableEdits, self).Remove(Index)
    def RemoveAll(self):
        '''Method ITableEdits.RemoveAll'''
        return super(ITableEdits, self).RemoveAll()
    def Add(self, TableEdit):
        '''Method ITableEdits.Add

           INPUT
            TableEdit           : ITableEdit*'''
        return super(ITableEdits, self).Add(TableEdit)
    def Insert(self, Index, TableEdit):
        '''Method ITableEdits.Insert

           INPUTS
            Index               : long
            TableEdit           : ITableEdit*'''
        return super(ITableEdits, self).Insert(Index, TableEdit)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IEditResult(_esriCarto.IEditResult):
    _IID = uuid.UUID('8954aab5-0acb-4410-b3c3-0e7e35257a17')
    def get_Code(self):
        '''Method IEditResult.get_Code

           OUTPUT
            errorCode           : long*'''
        return super(IEditResult, self).get_Code()
    def get_Description(self):
        '''Method IEditResult.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IEditResult, self).get_Description()
    def get_GlobalID(self):
        '''Method IEditResult.get_GlobalID

           OUTPUT
            GlobalID            : BSTR*'''
        return super(IEditResult, self).get_GlobalID()
    def get_OID(self):
        '''Method IEditResult.get_OID

           OUTPUT
            OID                 : long*'''
        return super(IEditResult, self).get_OID()
    def get_Succeeded(self):
        '''Method IEditResult.get_Succeeded

           OUTPUT
            Succeeded           : VARIANT_BOOL*'''
        return super(IEditResult, self).get_Succeeded()
    Code = property(get_Code, None, None)
    Description = property(get_Description, None, None)
    GlobalID = property(get_GlobalID, None, None)
    OID = property(get_OID, None, None)
    Succeeded = property(get_Succeeded, None, None)

class IEditResults(_esriCarto.IEditResults):
    _IID = uuid.UUID('40b954c7-4d46-4e59-aeeb-a86eb3b9a150')
    def get_Count(self):
        '''Method IEditResults.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEditResults, self).get_Count()
    def get_Element(self, Index):
        '''Method IEditResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            EditResult          : IEditResult**'''
        return super(IEditResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IEditResults.Remove

           INPUT
            Index               : long'''
        return super(IEditResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method IEditResults.RemoveAll'''
        return super(IEditResults, self).RemoveAll()
    def Add(self, EditResult):
        '''Method IEditResults.Add

           INPUT
            EditResult          : IEditResult*'''
        return super(IEditResults, self).Add(EditResult)
    def Insert(self, Index, EditResult):
        '''Method IEditResults.Insert

           INPUTS
            Index               : long
            EditResult          : IEditResult*'''
        return super(IEditResults, self).Insert(Index, EditResult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ITableEditResult(_esriCarto.ITableEditResult):
    _IID = uuid.UUID('473354f5-19f9-4581-99f5-7194fab610a5')
    def get_AddResults(self):
        '''Method ITableEditResult.get_AddResults

           OUTPUT
            AddResults          : IEditResults**'''
        return super(ITableEditResult, self).get_AddResults()
    def get_DeleteResults(self):
        '''Method ITableEditResult.get_DeleteResults

           OUTPUT
            DeleteResults       : IEditResults**'''
        return super(ITableEditResult, self).get_DeleteResults()
    def get_LayerOrTableID(self):
        '''Method ITableEditResult.get_LayerOrTableID

           OUTPUT
            LayerOrTableID      : long*'''
        return super(ITableEditResult, self).get_LayerOrTableID()
    def get_UpdateResults(self):
        '''Method ITableEditResult.get_UpdateResults

           OUTPUT
            UpdateResults       : IEditResults**'''
        return super(ITableEditResult, self).get_UpdateResults()
    AddResults = property(get_AddResults, None, None)
    DeleteResults = property(get_DeleteResults, None, None)
    LayerOrTableID = property(get_LayerOrTableID, None, None)
    UpdateResults = property(get_UpdateResults, None, None)

class ITableEditResults(_esriCarto.ITableEditResults):
    _IID = uuid.UUID('f561ff0e-4d09-4e51-a2d9-e201eb02543e')
    def get_Count(self):
        '''Method ITableEditResults.get_Count

           OUTPUT
            Count               : long*'''
        return super(ITableEditResults, self).get_Count()
    def get_Element(self, Index):
        '''Method ITableEditResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            TableEditResult     : ITableEditResult**'''
        return super(ITableEditResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ITableEditResults.Remove

           INPUT
            Index               : long'''
        return super(ITableEditResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method ITableEditResults.RemoveAll'''
        return super(ITableEditResults, self).RemoveAll()
    def Add(self, TableEditResult):
        '''Method ITableEditResults.Add

           INPUT
            TableEditResult     : ITableEditResult*'''
        return super(ITableEditResults, self).Add(TableEditResult)
    def Insert(self, Index, TableEditResult):
        '''Method ITableEditResults.Insert

           INPUTS
            Index               : long
            TableEditResult     : ITableEditResult*'''
        return super(ITableEditResults, self).Insert(Index, TableEditResult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IServiceDataOptions(_esriCarto.IServiceDataOptions):
    _IID = uuid.UUID('2f7852c1-7bda-42b9-8a94-91186592a69a')

    def __init__(self, *args, **kw):
        super(IServiceDataOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ETag(self):
        '''Method IServiceDataOptions.get_ETag

           OUTPUT
            ETag                : BSTR*'''
        return super(IServiceDataOptions, self).get_ETag()
    def put_ETag(self, ETag):
        '''Method IServiceDataOptions.put_ETag

           INPUT
            ETag                : BSTR'''
        return super(IServiceDataOptions, self).put_ETag(ETag)
    def get_Format(self):
        '''Method IServiceDataOptions.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IServiceDataOptions, self).get_Format()
    def put_Format(self, Format):
        '''Method IServiceDataOptions.put_Format

           INPUT
            Format              : BSTR'''
        return super(IServiceDataOptions, self).put_Format(Format)
    def get_Properties(self):
        '''Method IServiceDataOptions.get_Properties

           OUTPUT
            optionsProperties   : IPropertySet**'''
        return super(IServiceDataOptions, self).get_Properties()
    def putref_Properties(self, optionsProperties):
        '''Method IServiceDataOptions.putref_Properties

           INPUT
            optionsProperties   : IPropertySet*'''
        return super(IServiceDataOptions, self).putref_Properties(optionsProperties)
    def get_TransportType(self):
        '''Method IServiceDataOptions.get_TransportType

           OUTPUT
            TransportType       : esriTransportType*'''
        return super(IServiceDataOptions, self).get_TransportType()
    def put_TransportType(self, TransportType):
        '''Method IServiceDataOptions.put_TransportType

           INPUT
            TransportType       : esriTransportType'''
        return super(IServiceDataOptions, self).put_TransportType(TransportType)
    ETag = property(get_ETag, put_ETag, None)
    Format = property(get_Format, put_Format, None)
    Properties = property(get_Properties, putref_Properties, None)
    TransportType = property(get_TransportType, put_TransportType, None)

class IServiceData(_esriCarto.IServiceData):
    _IID = uuid.UUID('193975ea-18d5-4d47-b474-483218226989')
    def get_EmbeddedData(self):
        '''Method IServiceData.get_EmbeddedData

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(IServiceData, self).get_EmbeddedData()
    def get_NotModified(self):
        '''Method IServiceData.get_NotModified

           OUTPUT
            NotModified         : VARIANT_BOOL*'''
        return super(IServiceData, self).get_NotModified()
    def get_Object(self):
        '''Method IServiceData.get_Object

           OUTPUT
            objectUnknown       : IUnknown**'''
        return super(IServiceData, self).get_Object()
    def get_ResponseETag(self):
        '''Method IServiceData.get_ResponseETag

           OUTPUT
            ResponseETag        : BSTR*'''
        return super(IServiceData, self).get_ResponseETag()
    def get_ServiceDataOptions(self):
        '''Method IServiceData.get_ServiceDataOptions

           OUTPUT
            ServiceDataOptions  : IServiceDataOptions**'''
        return super(IServiceData, self).get_ServiceDataOptions()
    def get_URI(self):
        '''Method IServiceData.get_URI

           OUTPUT
            URI                 : BSTR*'''
        return super(IServiceData, self).get_URI()
    EmbeddedData = property(get_EmbeddedData, None, None)
    NotModified = property(get_NotModified, None, None)
    Object = property(get_Object, None, None)
    ResponseETag = property(get_ResponseETag, None, None)
    ServiceDataOptions = property(get_ServiceDataOptions, None, None)
    URI = property(get_URI, None, None)

class IGraphicFeatureServer(_esriCarto.IGraphicFeatureServer):
    _IID = uuid.UUID('3df5bcfd-5945-4dd6-bdd1-5c3357b8209c')
    def Add(self, LayerOrTableID, DataObjects):
        '''Method IGraphicFeatureServer.Add

           INPUTS
            LayerOrTableID      : long
            DataObjects         : IDataObjects*

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer, self).Add(LayerOrTableID, DataObjects)
    def AddAttachments(self, LayerOrTableID, attachmentDataArray):
        '''Method IGraphicFeatureServer.AddAttachments

           INPUTS
            LayerOrTableID      : long
            attachmentDataArray : IAttachmentDataArray*

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer, self).AddAttachments(LayerOrTableID, attachmentDataArray)
    def ApplyEdits(self, TableEdits):
        '''Method IGraphicFeatureServer.ApplyEdits

           INPUT
            TableEdits          : ITableEdits*

           OUTPUT
            TableEditResults    : ITableEditResults**'''
        return super(IGraphicFeatureServer, self).ApplyEdits(TableEdits)
    def Delete(self, LayerOrTableID, DefinitionExpression, queryFilter):
        '''Method IGraphicFeatureServer.Delete

           INPUTS
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            queryFilter         : IQueryFilter*'''
        return super(IGraphicFeatureServer, self).Delete(LayerOrTableID, DefinitionExpression, queryFilter)
    def DeleteAttachments(self, LayerOrTableID, idsOfAttachmentsToDelete):
        '''Method IGraphicFeatureServer.DeleteAttachments

           INPUTS
            LayerOrTableID      : long
            idsOfAttachmentsToDelete: ILongArray*

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer, self).DeleteAttachments(LayerOrTableID, idsOfAttachmentsToDelete)
    def DeleteByID(self, LayerOrTableID, idsOfObjectsToDelete):
        '''Method IGraphicFeatureServer.DeleteByID

           INPUTS
            LayerOrTableID      : long
            idsOfObjectsToDelete: ILongArray*

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer, self).DeleteByID(LayerOrTableID, idsOfObjectsToDelete)
    def GetCount(self, LayerOrTableID, DefinitionExpression, queryFilter):
        '''Method IGraphicFeatureServer.GetCount

           INPUTS
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            queryFilter         : IQueryFilter*

           OUTPUT
            numObjects          : long*'''
        return super(IGraphicFeatureServer, self).GetCount(LayerOrTableID, DefinitionExpression, queryFilter)
    def GetLayers(self, symbolOutputOptions):
        '''Method IGraphicFeatureServer.GetLayers

           INPUT
            symbolOutputOptions : IServerSymbolOutputOptions*

           OUTPUT
            GraphicFeatureLayers: IGraphicFeatureLayers**'''
        return super(IGraphicFeatureServer, self).GetLayers(symbolOutputOptions)
    def GetServiceObjectCount(self, layerOrTableDescriptions, Geometry):
        '''Method IGraphicFeatureServer.GetServiceObjectCount

           INPUTS
            layerOrTableDescriptions: IGFSTableDescriptions*
            Geometry            : IGeometry*

           OUTPUT
            numObjects          : long*'''
        return super(IGraphicFeatureServer, self).GetServiceObjectCount(layerOrTableDescriptions, Geometry)
    def GetTables(self, symbolOutputOptions, ignoreLayers):
        '''Method IGraphicFeatureServer.GetTables

           INPUTS
            symbolOutputOptions : IServerSymbolOutputOptions*
            ignoreLayers        : VARIANT_BOOL

           OUTPUT
            DataObjectTables    : IDataObjectTables**'''
        return super(IGraphicFeatureServer, self).GetTables(symbolOutputOptions, ignoreLayers)
    def Query(self, LayerOrTableID, DefinitionExpression, queryFilter, ServiceDataOptions):
        '''Method IGraphicFeatureServer.Query

           INPUTS
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            queryFilter         : IQueryFilter*
            ServiceDataOptions  : IServiceDataOptions*

           OUTPUT
            ServiceData         : IServiceData**'''
        return super(IGraphicFeatureServer, self).Query(LayerOrTableID, DefinitionExpression, queryFilter, ServiceDataOptions)
    def QueryAttachmentData(self, LayerOrTableID, attachmentIDs, TransportType):
        '''Method IGraphicFeatureServer.QueryAttachmentData

           INPUTS
            LayerOrTableID      : long
            attachmentIDs       : ILongArray*
            TransportType       : esriTransportType

           OUTPUT
            attachmentData      : IAttachmentDataArray**'''
        return super(IGraphicFeatureServer, self).QueryAttachmentData(LayerOrTableID, attachmentIDs, TransportType)
    def QueryAttachmentInfos(self, LayerOrTableID, objectIDs):
        '''Method IGraphicFeatureServer.QueryAttachmentInfos

           INPUTS
            LayerOrTableID      : long
            objectIDs           : ILongArray*

           OUTPUT
            attachmentInfos     : IAttachmentInfoArray**'''
        return super(IGraphicFeatureServer, self).QueryAttachmentInfos(LayerOrTableID, objectIDs)
    def QueryFromService(self, layerOrTableDescriptions, Geometry, outSR, outTR, ServiceDataOptions):
        '''Method IGraphicFeatureServer.QueryFromService

           INPUTS
            layerOrTableDescriptions: IGFSTableDescriptions*
            Geometry            : IGeometry*
            outSR               : ISpatialReference*
            outTR               : ITimeReference*
            ServiceDataOptions  : IServiceDataOptions*

           OUTPUT
            ServiceData         : IServiceData**'''
        return super(IGraphicFeatureServer, self).QueryFromService(layerOrTableDescriptions, Geometry, outSR, outTR, ServiceDataOptions)
    def QueryIDs(self, LayerOrTableID, DefinitionExpression, queryFilter):
        '''Method IGraphicFeatureServer.QueryIDs

           INPUTS
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            queryFilter         : IQueryFilter*

           OUTPUT
            objectIDs           : ILongArray**'''
        return super(IGraphicFeatureServer, self).QueryIDs(LayerOrTableID, DefinitionExpression, queryFilter)
    def QueryHTMLPopups(self, LayerOrTableID, objectIDs):
        '''Method IGraphicFeatureServer.QueryHTMLPopups

           INPUTS
            LayerOrTableID      : long
            objectIDs           : ILongArray*

           OUTPUT
            HTMLTextArray       : IStringArray**'''
        return super(IGraphicFeatureServer, self).QueryHTMLPopups(LayerOrTableID, objectIDs)
    def QueryRelatedObjects(self, sourceLayerOrTableID, objectIDsInSource, RelationshipID, targetDefinitionExpression, targetTableProps, groupBySourceOIDs, outSR, outTR, ServiceDataOptions):
        '''Method IGraphicFeatureServer.QueryRelatedObjects

           INPUTS
            sourceLayerOrTableID: long
            objectIDsInSource   : ILongArray*
            RelationshipID      : long
            targetDefinitionExpression: BSTR
            targetTableProps    : BSTR
            groupBySourceOIDs   : VARIANT_BOOL
            outSR               : ISpatialReference*
            outTR               : ITimeReference*
            ServiceDataOptions  : IServiceDataOptions*

           OUTPUT
            ServiceData         : IServiceData**'''
        return super(IGraphicFeatureServer, self).QueryRelatedObjects(sourceLayerOrTableID, objectIDsInSource, RelationshipID, targetDefinitionExpression, targetTableProps, groupBySourceOIDs, outSR, outTR, ServiceDataOptions)
    def Update(self, LayerOrTableID, DataObjects):
        '''Method IGraphicFeatureServer.Update

           INPUTS
            LayerOrTableID      : long
            DataObjects         : IDataObjects*

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer, self).Update(LayerOrTableID, DataObjects)
    def UpdateAttachments(self, LayerOrTableID, attachmentDataArray):
        '''Method IGraphicFeatureServer.UpdateAttachments

           INPUTS
            LayerOrTableID      : long
            attachmentDataArray : IAttachmentDataArray*

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer, self).UpdateAttachments(LayerOrTableID, attachmentDataArray)

class IGraphicFeatureServerReplication(_esriCarto.IGraphicFeatureServerReplication):
    _IID = uuid.UUID('6a727d6f-0b7d-478e-847e-8cf875180b0d')
    def CreateReplica(self, replicaName, replicaDescription, repOptions, exportOptions, TransportType):
        '''Method IGraphicFeatureServerReplication.CreateReplica

           INPUTS
            replicaName         : BSTR
            replicaDescription  : IGFSReplicaDescription*
            repOptions          : IGPReplicaOptions*
            exportOptions       : IGDSExportOptions*
            TransportType       : esriGDSTransportType

           OUTPUT
            featureSericeReplicationPackage: IGDSData**'''
        return super(IGraphicFeatureServerReplication, self).CreateReplica(replicaName, replicaDescription, repOptions, exportOptions, TransportType)
    def get_Replicas(self):
        '''Method IGraphicFeatureServerReplication.get_Replicas

           OUTPUT
            Replicas            : IGPReplicas**'''
        return super(IGraphicFeatureServerReplication, self).get_Replicas()
    def UnregisterReplica(self, replicaName):
        '''Method IGraphicFeatureServerReplication.UnregisterReplica

           INPUT
            replicaName         : BSTR'''
        return super(IGraphicFeatureServerReplication, self).UnregisterReplica(replicaName)
    def ExportReplicaDataChanges(self, replicaName, options, TransportType):
        '''Method IGraphicFeatureServerReplication.ExportReplicaDataChanges

           INPUTS
            replicaName         : BSTR
            options             : IGDSExportOptions*
            TransportType       : esriGDSTransportType

           OUTPUT
            result              : IGDSData**'''
        return super(IGraphicFeatureServerReplication, self).ExportReplicaDataChanges(replicaName, options, TransportType)
    def ImportReplicaDataChanges(self, sourceType, reconcilePolicy, Data):
        '''Method IGraphicFeatureServerReplication.ImportReplicaDataChanges

           INPUTS
            sourceType          : esriGDSReplicaImportSource
            reconcilePolicy     : esriReplicaReconcilePolicyType
            Data                : IGDSData*

           OUTPUT
            conflictsFound      : VARIANT_BOOL*'''
        return super(IGraphicFeatureServerReplication, self).ImportReplicaDataChanges(sourceType, reconcilePolicy, Data)
    def AlterReplica(self, Replica):
        '''Method IGraphicFeatureServerReplication.AlterReplica

           INPUT
            Replica             : IGPReplica*'''
        return super(IGraphicFeatureServerReplication, self).AlterReplica(Replica)
    Replicas = property(get_Replicas, None, None)

class ITableIdentity(_esriCarto.ITableIdentity):
    _IID = uuid.UUID('bc701c47-4ba9-443e-bb5a-8e1efd89ba2a')
    def get_ID(self):
        '''Method ITableIdentity.get_ID

           OUTPUT
            ID                  : long*'''
        return super(ITableIdentity, self).get_ID()
    def get_Name(self):
        '''Method ITableIdentity.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ITableIdentity, self).get_Name()
    ID = property(get_ID, None, None)
    Name = property(get_Name, None, None)

class ITableIdentities(_esriCarto.ITableIdentities):
    _IID = uuid.UUID('d6f55bc3-8beb-4f37-bc4b-9acde860c8af')
    def get_Count(self):
        '''Method ITableIdentities.get_Count

           OUTPUT
            Count               : long*'''
        return super(ITableIdentities, self).get_Count()
    def get_Element(self, Index):
        '''Method ITableIdentities.get_Element

           INPUT
            Index               : long

           OUTPUT
            TableIdentity       : ITableIdentity**'''
        return super(ITableIdentities, self).get_Element(Index)
    def Remove(self, Index):
        '''Method ITableIdentities.Remove

           INPUT
            Index               : long'''
        return super(ITableIdentities, self).Remove(Index)
    def RemoveAll(self):
        '''Method ITableIdentities.RemoveAll'''
        return super(ITableIdentities, self).RemoveAll()
    def Add(self, TableIdentity):
        '''Method ITableIdentities.Add

           INPUT
            TableIdentity       : ITableIdentity*'''
        return super(ITableIdentities, self).Add(TableIdentity)
    def Insert(self, Index, TableIdentity):
        '''Method ITableIdentities.Insert

           INPUTS
            Index               : long
            TableIdentity       : ITableIdentity*'''
        return super(ITableIdentities, self).Insert(Index, TableIdentity)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IFeatureServerInfo(_esriCarto.IFeatureServerInfo):
    _IID = uuid.UUID('f39468b2-cdea-444b-9f3c-234cc561ea32')
    def get_AllowGeometryUpdates(self):
        '''Method IFeatureServerInfo.get_AllowGeometryUpdates

           OUTPUT
            allows              : VARIANT_BOOL*'''
        return super(IFeatureServerInfo, self).get_AllowGeometryUpdates()
    def get_AllowTrueCurvesUpdates(self):
        '''Method IFeatureServerInfo.get_AllowTrueCurvesUpdates

           OUTPUT
            allows              : VARIANT_BOOL*'''
        return super(IFeatureServerInfo, self).get_AllowTrueCurvesUpdates()
    def get_CopyrightText(self):
        '''Method IFeatureServerInfo.get_CopyrightText

           OUTPUT
            CopyrightText       : BSTR*'''
        return super(IFeatureServerInfo, self).get_CopyrightText()
    def get_CurrentVersion(self):
        '''Method IFeatureServerInfo.get_CurrentVersion

           OUTPUT
            CurrentVersion      : double*'''
        return super(IFeatureServerInfo, self).get_CurrentVersion()
    def get_Description(self):
        '''Method IFeatureServerInfo.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IFeatureServerInfo, self).get_Description()
    def get_DocumentInfo(self):
        '''Method IFeatureServerInfo.get_DocumentInfo

           OUTPUT
            DocumentInfo        : IPropertySet**'''
        return super(IFeatureServerInfo, self).get_DocumentInfo()
    def get_EnableZDefaults(self):
        '''Method IFeatureServerInfo.get_EnableZDefaults

           OUTPUT
            EnableZDefaults     : VARIANT_BOOL*'''
        return super(IFeatureServerInfo, self).get_EnableZDefaults()
    def get_FullExtent(self):
        '''Method IFeatureServerInfo.get_FullExtent

           OUTPUT
            FullExtent          : IEnvelope**'''
        return super(IFeatureServerInfo, self).get_FullExtent()
    def get_HasVersionedData(self):
        '''Method IFeatureServerInfo.get_HasVersionedData

           OUTPUT
            HasVersionedData    : VARIANT_BOOL*'''
        return super(IFeatureServerInfo, self).get_HasVersionedData()
    def get_InitialExtent(self):
        '''Method IFeatureServerInfo.get_InitialExtent

           OUTPUT
            InitialExtent       : IEnvelope**'''
        return super(IFeatureServerInfo, self).get_InitialExtent()
    def get_LayerIdentities(self):
        '''Method IFeatureServerInfo.get_LayerIdentities

           OUTPUT
            LayerIdentities     : ITableIdentities**'''
        return super(IFeatureServerInfo, self).get_LayerIdentities()
    def get_MaxRecordCount(self):
        '''Method IFeatureServerInfo.get_MaxRecordCount

           OUTPUT
            MaxRecordCount      : long*'''
        return super(IFeatureServerInfo, self).get_MaxRecordCount()
    def get_SpatialReference(self):
        '''Method IFeatureServerInfo.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IFeatureServerInfo, self).get_SpatialReference()
    def get_ServiceDescription(self):
        '''Method IFeatureServerInfo.get_ServiceDescription

           OUTPUT
            ServiceDescription  : BSTR*'''
        return super(IFeatureServerInfo, self).get_ServiceDescription()
    def get_SupportsDisconnectedEditing(self):
        '''Method IFeatureServerInfo.get_SupportsDisconnectedEditing

           OUTPUT
            SupportsDisconnectedEditing: VARIANT_BOOL*'''
        return super(IFeatureServerInfo, self).get_SupportsDisconnectedEditing()
    def get_TableIdentities(self):
        '''Method IFeatureServerInfo.get_TableIdentities

           OUTPUT
            TableIdentities     : ITableIdentities**'''
        return super(IFeatureServerInfo, self).get_TableIdentities()
    def get_Units(self):
        '''Method IFeatureServerInfo.get_Units

           OUTPUT
            Units               : esriUnits*'''
        return super(IFeatureServerInfo, self).get_Units()
    def get_ZDefault(self):
        '''Method IFeatureServerInfo.get_ZDefault

           OUTPUT
            ZDefault            : double*'''
        return super(IFeatureServerInfo, self).get_ZDefault()
    AllowGeometryUpdates = property(get_AllowGeometryUpdates, None, None)
    AllowTrueCurvesUpdates = property(get_AllowTrueCurvesUpdates, None, None)
    CopyrightText = property(get_CopyrightText, None, None)
    CurrentVersion = property(get_CurrentVersion, None, None)
    Description = property(get_Description, None, None)
    DocumentInfo = property(get_DocumentInfo, None, None)
    EnableZDefaults = property(get_EnableZDefaults, None, None)
    FullExtent = property(get_FullExtent, None, None)
    HasVersionedData = property(get_HasVersionedData, None, None)
    InitialExtent = property(get_InitialExtent, None, None)
    LayerIdentities = property(get_LayerIdentities, None, None)
    MaxRecordCount = property(get_MaxRecordCount, None, None)
    ServiceDescription = property(get_ServiceDescription, None, None)
    SpatialReference = property(get_SpatialReference, None, None)
    SupportsDisconnectedEditing = property(get_SupportsDisconnectedEditing, None, None)
    TableIdentities = property(get_TableIdentities, None, None)
    Units = property(get_Units, None, None)
    ZDefault = property(get_ZDefault, None, None)

class IDataObjectTable2(_esriCarto.IDataObjectTable2):
    _IID = uuid.UUID('40360777-48a5-48e3-aae9-1296d6f890f3')
    def get_EditorTrackingInfo(self):
        '''Method IDataObjectTable2.get_EditorTrackingInfo

           OUTPUT
            EditorTrackingInfo  : IEditorTrackingInfo**'''
        return super(IDataObjectTable2, self).get_EditorTrackingInfo()
    def get_OwnershipBasedAccessControl(self):
        '''Method IDataObjectTable2.get_OwnershipBasedAccessControl

           OUTPUT
            OwnershipBasedAccessControl: IOwnershipBasedAccessControl**'''
        return super(IDataObjectTable2, self).get_OwnershipBasedAccessControl()
    def get_SyncCanReturnChanges(self):
        '''Method IDataObjectTable2.get_SyncCanReturnChanges

           OUTPUT
            canReturnChanges    : VARIANT_BOOL*'''
        return super(IDataObjectTable2, self).get_SyncCanReturnChanges()
    def get_IsDataVersioned(self):
        '''Method IDataObjectTable2.get_IsDataVersioned

           OUTPUT
            isVersioned         : VARIANT_BOOL*'''
        return super(IDataObjectTable2, self).get_IsDataVersioned()
    def get_SupportsRollbackOnFailureParameter(self):
        '''Method IDataObjectTable2.get_SupportsRollbackOnFailureParameter

           OUTPUT
            supports            : VARIANT_BOOL*'''
        return super(IDataObjectTable2, self).get_SupportsRollbackOnFailureParameter()
    EditorTrackingInfo = property(get_EditorTrackingInfo, None, None)
    IsDataVersioned = property(get_IsDataVersioned, None, None)
    OwnershipBasedAccessControl = property(get_OwnershipBasedAccessControl, None, None)
    SupportsRollbackOnFailureParameter = property(get_SupportsRollbackOnFailureParameter, None, None)
    SyncCanReturnChanges = property(get_SyncCanReturnChanges, None, None)

class IGraphicFeatureLayer2(_esriCarto.IGraphicFeatureLayer2):
    _IID = uuid.UUID('27c6ff5d-631c-4e80-a77c-2c7229bb7b10')
    def get_HasM(self):
        '''Method IGraphicFeatureLayer2.get_HasM

           OUTPUT
            pHasM               : VARIANT_BOOL*'''
        return super(IGraphicFeatureLayer2, self).get_HasM()
    def get_HasZ(self):
        '''Method IGraphicFeatureLayer2.get_HasZ

           OUTPUT
            pHasZ               : VARIANT_BOOL*'''
        return super(IGraphicFeatureLayer2, self).get_HasZ()
    def get_Visible(self):
        '''Method IGraphicFeatureLayer2.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IGraphicFeatureLayer2, self).get_Visible()
    HasM = property(get_HasM, None, None)
    HasZ = property(get_HasZ, None, None)
    Visible = property(get_Visible, None, None)

class IGraphicFeatureServer2(_esriCarto.IGraphicFeatureServer2):
    _IID = uuid.UUID('389f4fa0-628d-403d-9015-62857cb1c05e')
    def Add2(self, gdbVersion, LayerOrTableID, DataObjects, rollbackOnFailure):
        '''Method IGraphicFeatureServer2.Add2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            DataObjects         : IDataObjects*
            rollbackOnFailure   : VARIANT_BOOL

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer2, self).Add2(gdbVersion, LayerOrTableID, DataObjects, rollbackOnFailure)
    def AddAttachments2(self, gdbVersion, LayerOrTableID, attachmentDataArray, rollbackOnFailure):
        '''Method IGraphicFeatureServer2.AddAttachments2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            attachmentDataArray : IAttachmentDataArray*
            rollbackOnFailure   : VARIANT_BOOL

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer2, self).AddAttachments2(gdbVersion, LayerOrTableID, attachmentDataArray, rollbackOnFailure)
    def ApplyEdits2(self, gdbVersion, TableEdits, rollbackOnFailure):
        '''Method IGraphicFeatureServer2.ApplyEdits2

           INPUTS
            gdbVersion          : BSTR
            TableEdits          : ITableEdits*
            rollbackOnFailure   : VARIANT_BOOL

           OUTPUT
            TableEditResults    : ITableEditResults**'''
        return super(IGraphicFeatureServer2, self).ApplyEdits2(gdbVersion, TableEdits, rollbackOnFailure)
    def Delete2(self, gdbVersion, LayerOrTableID, DefinitionExpression, rollbackOnFailure, queryFilter):
        '''Method IGraphicFeatureServer2.Delete2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            rollbackOnFailure   : VARIANT_BOOL
            queryFilter         : IQueryFilter*'''
        return super(IGraphicFeatureServer2, self).Delete2(gdbVersion, LayerOrTableID, DefinitionExpression, rollbackOnFailure, queryFilter)
    def DeleteAttachments2(self, gdbVersion, LayerOrTableID, idsOfAttachmentsToDelete, rollbackOnFailure):
        '''Method IGraphicFeatureServer2.DeleteAttachments2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            idsOfAttachmentsToDelete: ILongArray*
            rollbackOnFailure   : VARIANT_BOOL

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer2, self).DeleteAttachments2(gdbVersion, LayerOrTableID, idsOfAttachmentsToDelete, rollbackOnFailure)
    def DeleteByID2(self, gdbVersion, LayerOrTableID, idsOfObjectsToDelete, rollbackOnFailure):
        '''Method IGraphicFeatureServer2.DeleteByID2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            idsOfObjectsToDelete: ILongArray*
            rollbackOnFailure   : VARIANT_BOOL

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer2, self).DeleteByID2(gdbVersion, LayerOrTableID, idsOfObjectsToDelete, rollbackOnFailure)
    def GetCount2(self, gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter):
        '''Method IGraphicFeatureServer2.GetCount2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            queryFilter         : IQueryFilter*

           OUTPUT
            numObjects          : long*'''
        return super(IGraphicFeatureServer2, self).GetCount2(gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter)
    def GetServerInfo(self):
        '''Method IGraphicFeatureServer2.GetServerInfo

           OUTPUT
            FeatureServerInfo   : IFeatureServerInfo**'''
        return super(IGraphicFeatureServer2, self).GetServerInfo()
    def GetServiceObjectCount2(self, gdbVersion, layerOrTableDescriptions, Geometry):
        '''Method IGraphicFeatureServer2.GetServiceObjectCount2

           INPUTS
            gdbVersion          : BSTR
            layerOrTableDescriptions: IGFSTableDescriptions*
            Geometry            : IGeometry*

           OUTPUT
            numObjects          : long*'''
        return super(IGraphicFeatureServer2, self).GetServiceObjectCount2(gdbVersion, layerOrTableDescriptions, Geometry)
    def Query2(self, gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter, maximumAllowableOffset, ServiceDataOptions):
        '''Method IGraphicFeatureServer2.Query2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            queryFilter         : IQueryFilter*
            maximumAllowableOffset: double
            ServiceDataOptions  : IServiceDataOptions*

           OUTPUT
            ServiceData         : IServiceData**'''
        return super(IGraphicFeatureServer2, self).Query2(gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter, maximumAllowableOffset, ServiceDataOptions)
    def QueryAttachmentData2(self, gdbVersion, LayerOrTableID, attachmentIDs, TransportType):
        '''Method IGraphicFeatureServer2.QueryAttachmentData2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            attachmentIDs       : ILongArray*
            TransportType       : esriTransportType

           OUTPUT
            attachmentData      : IAttachmentDataArray**'''
        return super(IGraphicFeatureServer2, self).QueryAttachmentData2(gdbVersion, LayerOrTableID, attachmentIDs, TransportType)
    def QueryAttachmentInfos2(self, gdbVersion, LayerOrTableID, objectIDs):
        '''Method IGraphicFeatureServer2.QueryAttachmentInfos2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            objectIDs           : ILongArray*

           OUTPUT
            attachmentInfos     : IAttachmentInfoArray**'''
        return super(IGraphicFeatureServer2, self).QueryAttachmentInfos2(gdbVersion, LayerOrTableID, objectIDs)
    def QueryFromService2(self, gdbVersion, layerOrTableDescriptions, Geometry, outSR, outTR, maximumAllowableOffset, ServiceDataOptions):
        '''Method IGraphicFeatureServer2.QueryFromService2

           INPUTS
            gdbVersion          : BSTR
            layerOrTableDescriptions: IGFSTableDescriptions*
            Geometry            : IGeometry*
            outSR               : ISpatialReference*
            outTR               : ITimeReference*
            maximumAllowableOffset: double
            ServiceDataOptions  : IServiceDataOptions*

           OUTPUT
            ServiceData         : IServiceData**'''
        return super(IGraphicFeatureServer2, self).QueryFromService2(gdbVersion, layerOrTableDescriptions, Geometry, outSR, outTR, maximumAllowableOffset, ServiceDataOptions)
    def QueryIDs2(self, gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter):
        '''Method IGraphicFeatureServer2.QueryIDs2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            DefinitionExpression: BSTR
            queryFilter         : IQueryFilter*

           OUTPUT
            objectIDs           : ILongArray**'''
        return super(IGraphicFeatureServer2, self).QueryIDs2(gdbVersion, LayerOrTableID, DefinitionExpression, queryFilter)
    def QueryHTMLPopups2(self, gdbVersion, LayerOrTableID, objectIDs):
        '''Method IGraphicFeatureServer2.QueryHTMLPopups2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            objectIDs           : ILongArray*

           OUTPUT
            HTMLTextArray       : IStringArray**'''
        return super(IGraphicFeatureServer2, self).QueryHTMLPopups2(gdbVersion, LayerOrTableID, objectIDs)
    def QueryRelatedObjects2(self, gdbVersion, sourceLayerOrTableID, objectIDsInSource, RelationshipID, targetDefinitionExpression, targetTableProps, groupBySourceOIDs, outSR, outTR, maximumAllowableOffset, ServiceDataOptions):
        '''Method IGraphicFeatureServer2.QueryRelatedObjects2

           INPUTS
            gdbVersion          : BSTR
            sourceLayerOrTableID: long
            objectIDsInSource   : ILongArray*
            RelationshipID      : long
            targetDefinitionExpression: BSTR
            targetTableProps    : BSTR
            groupBySourceOIDs   : VARIANT_BOOL
            outSR               : ISpatialReference*
            outTR               : ITimeReference*
            maximumAllowableOffset: double
            ServiceDataOptions  : IServiceDataOptions*

           OUTPUT
            ServiceData         : IServiceData**'''
        return super(IGraphicFeatureServer2, self).QueryRelatedObjects2(gdbVersion, sourceLayerOrTableID, objectIDsInSource, RelationshipID, targetDefinitionExpression, targetTableProps, groupBySourceOIDs, outSR, outTR, maximumAllowableOffset, ServiceDataOptions)
    def Update2(self, gdbVersion, LayerOrTableID, DataObjects, rollbackOnFailure):
        '''Method IGraphicFeatureServer2.Update2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            DataObjects         : IDataObjects*
            rollbackOnFailure   : VARIANT_BOOL

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer2, self).Update2(gdbVersion, LayerOrTableID, DataObjects, rollbackOnFailure)
    def UpdateAttachments2(self, gdbVersion, LayerOrTableID, attachmentDataArray, rollbackOnFailure):
        '''Method IGraphicFeatureServer2.UpdateAttachments2

           INPUTS
            gdbVersion          : BSTR
            LayerOrTableID      : long
            attachmentDataArray : IAttachmentDataArray*
            rollbackOnFailure   : VARIANT_BOOL

           OUTPUT
            EditResults         : IEditResults**'''
        return super(IGraphicFeatureServer2, self).UpdateAttachments2(gdbVersion, LayerOrTableID, attachmentDataArray, rollbackOnFailure)

class IMosaicSubLayer(_esriCarto.IMosaicSubLayer):
    _IID = uuid.UUID('db9c050e-7f02-437a-8b68-a5ef242bd8d4')

    def __init__(self, *args, **kw):
        super(IMosaicSubLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Parent(self):
        '''Method IMosaicSubLayer.get_Parent

           OUTPUT
            ppParent            : IMosaicLayer**'''
        return super(IMosaicSubLayer, self).get_Parent()
    def putref_Parent(self, ppParent):
        '''Method IMosaicSubLayer.putref_Parent

           INPUT
            ppParent            : IMosaicLayer*'''
        return super(IMosaicSubLayer, self).putref_Parent(ppParent)
    def get_Identifier(self):
        '''Method IMosaicSubLayer.get_Identifier

           OUTPUT
            pIdentifier         : BSTR*'''
        return super(IMosaicSubLayer, self).get_Identifier()
    def put_Identifier(self, pIdentifier):
        '''Method IMosaicSubLayer.put_Identifier

           INPUT
            pIdentifier         : BSTR'''
        return super(IMosaicSubLayer, self).put_Identifier(pIdentifier)
    def get_CompleteName(self):
        '''Method IMosaicSubLayer.get_CompleteName

           OUTPUT
            pCompleteName       : BSTR*'''
        return super(IMosaicSubLayer, self).get_CompleteName()
    CompleteName = property(get_CompleteName, None, None)
    Identifier = property(get_Identifier, put_Identifier, None)
    Parent = property(get_Parent, putref_Parent, None)

class IJPIPServer(_esriCarto.IJPIPServer):
    _IID = uuid.UUID('8d2dfd82-8bf5-42e1-982c-4d9edd4f1e34')
    def get_URL(self):
        '''Method IJPIPServer.get_URL

           OUTPUT
            pURL                : BSTR*'''
        return super(IJPIPServer, self).get_URL()
    URL = property(get_URL, None, None)

class ILayerTablesAndDataMappings(_esriCarto.ILayerTablesAndDataMappings):
    _IID = uuid.UUID('cc04f497-ff81-4b5b-974e-676597167107')
    def get_GFLayerTableDataMappings(self):
        '''Method ILayerTablesAndDataMappings.get_GFLayerTableDataMappings

           OUTPUT
            GFLayerTableDataMappings: IGFLayerTableDataMappings**'''
        return super(ILayerTablesAndDataMappings, self).get_GFLayerTableDataMappings()
    def get_Layers(self):
        '''Method ILayerTablesAndDataMappings.get_Layers

           OUTPUT
            Layers              : IEnumLayer**'''
        return super(ILayerTablesAndDataMappings, self).get_Layers()
    GFLayerTableDataMappings = property(get_GFLayerTableDataMappings, None, None)
    Layers = property(get_Layers, None, None)

class IGFSReplicationAgent(_esriCarto.IGFSReplicationAgent):
    _IID = uuid.UUID('8817f586-70f1-45f3-bb6c-87a9910fc10f')
    def CreateReplica(self, srcGFS, destWorkspace, replicaName, desc, repOptions, layerFolder):
        '''Method IGFSReplicationAgent.CreateReplica

           INPUTS
            srcGFS              : IGraphicFeatureServer*
            destWorkspace       : IWorkspace*
            replicaName         : BSTR
            desc                : IGFSReplicaDescription*
            repOptions          : IGPReplicaOptions*
            layerFolder         : BSTR'''
        return super(IGFSReplicationAgent, self).CreateReplica(srcGFS, destWorkspace, replicaName, desc, repOptions, layerFolder)
    def SynchronizeReplica(self, trgGFS, srcWorkspace, replicaName, dir):
        '''Method IGFSReplicationAgent.SynchronizeReplica

           INPUTS
            trgGFS              : IGraphicFeatureServer*
            srcWorkspace        : IWorkspace*
            replicaName         : BSTR
            dir                 : esriReplicaSynchronizeDirection'''
        return super(IGFSReplicationAgent, self).SynchronizeReplica(trgGFS, srcWorkspace, replicaName, dir)

class IDataSourceHelperMap(_esriCarto.IDataSourceHelperMap):
    _IID = uuid.UUID('a31a9a8a-3b4a-4a6e-abbd-589296e1ec02')
    def ReplaceWorkspaceName(self, pBasicMap, pOldWorkspaceName, pNewWorkspaceName, validate):
        '''Method IDataSourceHelperMap.ReplaceWorkspaceName

           INPUTS
            pBasicMap           : IBasicMap*
            pOldWorkspaceName   : IWorkspaceName*
            pNewWorkspaceName   : IWorkspaceName*
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperMap, self).ReplaceWorkspaceName(pBasicMap, pOldWorkspaceName, pNewWorkspaceName, validate)
    def Repair(self, pBasicMap, pDataLayer, pName, validate):
        '''Method IDataSourceHelperMap.Repair

           INPUTS
            pBasicMap           : IBasicMap*
            pDataLayer          : IDataLayer*
            pName               : IName*
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperMap, self).Repair(pBasicMap, pDataLayer, pName, validate)
    def FindAndReplaceWorkspaceNamePath(self, pBasicMap, oldWorkspaceName, newWorkspaceName, validate):
        '''Method IDataSourceHelperMap.FindAndReplaceWorkspaceNamePath

           INPUTS
            pBasicMap           : IBasicMap*
            oldWorkspaceName    : BSTR
            newWorkspaceName    : BSTR
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperMap, self).FindAndReplaceWorkspaceNamePath(pBasicMap, oldWorkspaceName, newWorkspaceName, validate)

class IDataSourceHelperLayer(_esriCarto.IDataSourceHelperLayer):
    _IID = uuid.UUID('e448a908-20be-477e-bb03-b948a4b97ebf')
    def ReplaceName(self, pLayer, pName, validate):
        '''Method IDataSourceHelperLayer.ReplaceName

           INPUTS
            pLayer              : ILayer*
            pName               : IName*
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperLayer, self).ReplaceName(pLayer, pName, validate)
    def FindAndReplaceWorkspaceNamePath(self, pLayer, oldWorkspaceName, newWorkspaceName, validate):
        '''Method IDataSourceHelperLayer.FindAndReplaceWorkspaceNamePath

           INPUTS
            pLayer              : ILayer*
            oldWorkspaceName    : BSTR
            newWorkspaceName    : BSTR
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperLayer, self).FindAndReplaceWorkspaceNamePath(pLayer, oldWorkspaceName, newWorkspaceName, validate)

class IDataSourceHelperStandaloneTable(_esriCarto.IDataSourceHelperStandaloneTable):
    _IID = uuid.UUID('5c5a6b80-f0a3-4478-b8d6-4eea1a1a121a')
    def ReplaceName(self, pStandaloneTable, pName, validate):
        '''Method IDataSourceHelperStandaloneTable.ReplaceName

           INPUTS
            pStandaloneTable    : IStandaloneTable*
            pName               : IName*
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperStandaloneTable, self).ReplaceName(pStandaloneTable, pName, validate)
    def FindAndReplaceWorkspaceNamePath(self, pStandaloneTable, oldWorkspaceName, newWorkspaceName, validate):
        '''Method IDataSourceHelperStandaloneTable.FindAndReplaceWorkspaceNamePath

           INPUTS
            pStandaloneTable    : IStandaloneTable*
            oldWorkspaceName    : BSTR
            newWorkspaceName    : BSTR
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperStandaloneTable, self).FindAndReplaceWorkspaceNamePath(pStandaloneTable, oldWorkspaceName, newWorkspaceName, validate)

class IMSDHelper(_esriCarto.IMSDHelper):
    _IID = uuid.UUID('4c0b3fb1-b9b0-4387-b047-1b9be19098c3')
    def Open(self, Path):
        '''Method IMSDHelper.Open

           INPUT
            Path                : BSTR'''
        return super(IMSDHelper, self).Open(Path)
    def Close(self):
        '''Method IMSDHelper.Close'''
        return super(IMSDHelper, self).Close()
    def Save(self, relativePath):
        '''Method IMSDHelper.Save

           INPUT
            relativePath        : VARIANT_BOOL'''
        return super(IMSDHelper, self).Save(relativePath)
    def SaveAs(self, Path, relativePath):
        '''Method IMSDHelper.SaveAs

           INPUTS
            Path                : BSTR
            relativePath        : VARIANT_BOOL'''
        return super(IMSDHelper, self).SaveAs(Path, relativePath)
    def GetMaps(self):
        '''Method IMSDHelper.GetMaps

           OUTPUT
            ppMapPaths          : IStringArray**'''
        return super(IMSDHelper, self).GetMaps()
    def IsActiveMap(self, mapPath):
        '''Method IMSDHelper.IsActiveMap

           INPUT
            mapPath             : BSTR

           OUTPUT
            activeMap           : VARIANT_BOOL*'''
        return super(IMSDHelper, self).IsActiveMap(mapPath)
    def GetMapDisplayName(self, mapPath):
        '''Method IMSDHelper.GetMapDisplayName

           INPUT
            mapPath             : BSTR

           OUTPUT
            mapDisplayName      : BSTR*'''
        return super(IMSDHelper, self).GetMapDisplayName(mapPath)
    def ReplaceAll(self, mapPath, oldWorkspaceConnectionString, newWorkspaceConnectionString, validate):
        '''Method IMSDHelper.ReplaceAll

           INPUTS
            mapPath             : BSTR
            oldWorkspaceConnectionString: BSTR
            newWorkspaceConnectionString: BSTR
            validate            : VARIANT_BOOL'''
        return super(IMSDHelper, self).ReplaceAll(mapPath, oldWorkspaceConnectionString, newWorkspaceConnectionString, validate)
    def GetLayers(self, mapPath):
        '''Method IMSDHelper.GetLayers

           INPUT
            mapPath             : BSTR

           OUTPUT
            ppLayerPaths        : IStringArray**'''
        return super(IMSDHelper, self).GetLayers(mapPath)
    def IsLayerValid(self, layerPath):
        '''Method IMSDHelper.IsLayerValid

           INPUT
            layerPath           : BSTR

           OUTPUT
            layerValid          : VARIANT_BOOL*'''
        return super(IMSDHelper, self).IsLayerValid(layerPath)
    def GetLayerType(self, layerPath):
        '''Method IMSDHelper.GetLayerType

           INPUT
            layerPath           : BSTR

           OUTPUT
            LayerType           : BSTR*'''
        return super(IMSDHelper, self).GetLayerType(layerPath)
    def GetSubLayers(self, layerPath):
        '''Method IMSDHelper.GetSubLayers

           INPUT
            layerPath           : BSTR

           OUTPUT
            ppLayerPaths        : IStringArray**'''
        return super(IMSDHelper, self).GetSubLayers(layerPath)
    def GetDataset(self, layerPath):
        '''Method IMSDHelper.GetDataset

           INPUT
            layerPath           : BSTR

           OUTPUT
            DatasetName         : BSTR*'''
        return super(IMSDHelper, self).GetDataset(layerPath)
    def GetWorkspaceFactoryType(self, layerPath):
        '''Method IMSDHelper.GetWorkspaceFactoryType

           INPUT
            layerPath           : BSTR

           OUTPUT
            workspaceFactoryType: BSTR*'''
        return super(IMSDHelper, self).GetWorkspaceFactoryType(layerPath)
    def GetWorkspaceConnectionStringFromLayer(self, layerPath):
        '''Method IMSDHelper.GetWorkspaceConnectionStringFromLayer

           INPUT
            layerPath           : BSTR

           OUTPUT
            workspaceConnectionString: BSTR*'''
        return super(IMSDHelper, self).GetWorkspaceConnectionStringFromLayer(layerPath)
    def PutWorkspaceConnectionStringInLayer(self, layerPath, workspaceConnectionString, validate):
        '''Method IMSDHelper.PutWorkspaceConnectionStringInLayer

           INPUTS
            layerPath           : BSTR
            workspaceConnectionString: BSTR
            validate            : VARIANT_BOOL'''
        return super(IMSDHelper, self).PutWorkspaceConnectionStringInLayer(layerPath, workspaceConnectionString, validate)
    def GetLayerDisplayName(self, layerPath):
        '''Method IMSDHelper.GetLayerDisplayName

           INPUT
            layerPath           : BSTR

           OUTPUT
            layerDisplayName    : BSTR*'''
        return super(IMSDHelper, self).GetLayerDisplayName(layerPath)

class IMSDHelper2(_esriCarto.IMSDHelper2):
    _IID = uuid.UUID('2a400bb8-3083-4abe-9c5d-8fcfce1d2b2c')
    def RelativePaths(self):
        '''Method IMSDHelper2.RelativePaths

           OUTPUT
            vbRelativePaths     : VARIANT_BOOL*'''
        return super(IMSDHelper2, self).RelativePaths()
    def IsDataLayer(self, layerPath):
        '''Method IMSDHelper2.IsDataLayer

           INPUT
            layerPath           : BSTR

           OUTPUT
            vbCanRepair         : VARIANT_BOOL*'''
        return super(IMSDHelper2, self).IsDataLayer(layerPath)
    def GetTables(self, mapPath):
        '''Method IMSDHelper2.GetTables

           INPUT
            mapPath             : BSTR

           OUTPUT
            TableCount          : long*'''
        return super(IMSDHelper2, self).GetTables(mapPath)
    def IsTableValid(self, mapPath, tableIndex):
        '''Method IMSDHelper2.IsTableValid

           INPUTS
            mapPath             : BSTR
            tableIndex          : long

           OUTPUT
            tableValid          : VARIANT_BOOL*'''
        return super(IMSDHelper2, self).IsTableValid(mapPath, tableIndex)
    def GetDatasetFromTable(self, mapPath, tableIndex):
        '''Method IMSDHelper2.GetDatasetFromTable

           INPUTS
            mapPath             : BSTR
            tableIndex          : long

           OUTPUT
            DatasetName         : BSTR*'''
        return super(IMSDHelper2, self).GetDatasetFromTable(mapPath, tableIndex)
    def GetWorkspaceFactoryTypeFromTable(self, mapPath, tableIndex):
        '''Method IMSDHelper2.GetWorkspaceFactoryTypeFromTable

           INPUTS
            mapPath             : BSTR
            tableIndex          : long

           OUTPUT
            workspaceFactoryType: BSTR*'''
        return super(IMSDHelper2, self).GetWorkspaceFactoryTypeFromTable(mapPath, tableIndex)
    def GetWorkspaceConnectionStringFromTable(self, mapPath, tableIndex):
        '''Method IMSDHelper2.GetWorkspaceConnectionStringFromTable

           INPUTS
            mapPath             : BSTR
            tableIndex          : long

           OUTPUT
            workspaceConnectionString: BSTR*'''
        return super(IMSDHelper2, self).GetWorkspaceConnectionStringFromTable(mapPath, tableIndex)
    def PutWorkspaceConnectionStringInTable(self, mapPath, tableIndex, newWorkspaceConnection, validate):
        '''Method IMSDHelper2.PutWorkspaceConnectionStringInTable

           INPUTS
            mapPath             : BSTR
            tableIndex          : long
            newWorkspaceConnection: BSTR
            validate            : VARIANT_BOOL'''
        return super(IMSDHelper2, self).PutWorkspaceConnectionStringInTable(mapPath, tableIndex, newWorkspaceConnection, validate)
    def GetTableDisplayName(self, mapPath, tableIndex):
        '''Method IMSDHelper2.GetTableDisplayName

           INPUTS
            mapPath             : BSTR
            tableIndex          : long

           OUTPUT
            tableDisplayName    : BSTR*'''
        return super(IMSDHelper2, self).GetTableDisplayName(mapPath, tableIndex)
    def Open(self, Path):
        '''Method IMSDHelper.Open (from IMSDHelper)

           INPUT
            Path                : BSTR'''
        return super(IMSDHelper2, self).Open(Path)
    def Close(self):
        '''Method IMSDHelper.Close (from IMSDHelper)'''
        return super(IMSDHelper2, self).Close()
    def Save(self, relativePath):
        '''Method IMSDHelper.Save (from IMSDHelper)

           INPUT
            relativePath        : VARIANT_BOOL'''
        return super(IMSDHelper2, self).Save(relativePath)
    def SaveAs(self, Path, relativePath):
        '''Method IMSDHelper.SaveAs (from IMSDHelper)

           INPUTS
            Path                : BSTR
            relativePath        : VARIANT_BOOL'''
        return super(IMSDHelper2, self).SaveAs(Path, relativePath)
    def GetMaps(self):
        '''Method IMSDHelper.GetMaps (from IMSDHelper)

           OUTPUT
            ppMapPaths          : IStringArray**'''
        return super(IMSDHelper2, self).GetMaps()
    def IsActiveMap(self, mapPath):
        '''Method IMSDHelper.IsActiveMap (from IMSDHelper)

           INPUT
            mapPath             : BSTR

           OUTPUT
            activeMap           : VARIANT_BOOL*'''
        return super(IMSDHelper2, self).IsActiveMap(mapPath)
    def GetMapDisplayName(self, mapPath):
        '''Method IMSDHelper.GetMapDisplayName (from IMSDHelper)

           INPUT
            mapPath             : BSTR

           OUTPUT
            mapDisplayName      : BSTR*'''
        return super(IMSDHelper2, self).GetMapDisplayName(mapPath)
    def ReplaceAll(self, mapPath, oldWorkspaceConnectionString, newWorkspaceConnectionString, validate):
        '''Method IMSDHelper.ReplaceAll (from IMSDHelper)

           INPUTS
            mapPath             : BSTR
            oldWorkspaceConnectionString: BSTR
            newWorkspaceConnectionString: BSTR
            validate            : VARIANT_BOOL'''
        return super(IMSDHelper2, self).ReplaceAll(mapPath, oldWorkspaceConnectionString, newWorkspaceConnectionString, validate)
    def GetLayers(self, mapPath):
        '''Method IMSDHelper.GetLayers (from IMSDHelper)

           INPUT
            mapPath             : BSTR

           OUTPUT
            ppLayerPaths        : IStringArray**'''
        return super(IMSDHelper2, self).GetLayers(mapPath)
    def IsLayerValid(self, layerPath):
        '''Method IMSDHelper.IsLayerValid (from IMSDHelper)

           INPUT
            layerPath           : BSTR

           OUTPUT
            layerValid          : VARIANT_BOOL*'''
        return super(IMSDHelper2, self).IsLayerValid(layerPath)
    def GetLayerType(self, layerPath):
        '''Method IMSDHelper.GetLayerType (from IMSDHelper)

           INPUT
            layerPath           : BSTR

           OUTPUT
            LayerType           : BSTR*'''
        return super(IMSDHelper2, self).GetLayerType(layerPath)
    def GetSubLayers(self, layerPath):
        '''Method IMSDHelper.GetSubLayers (from IMSDHelper)

           INPUT
            layerPath           : BSTR

           OUTPUT
            ppLayerPaths        : IStringArray**'''
        return super(IMSDHelper2, self).GetSubLayers(layerPath)
    def GetDataset(self, layerPath):
        '''Method IMSDHelper.GetDataset (from IMSDHelper)

           INPUT
            layerPath           : BSTR

           OUTPUT
            DatasetName         : BSTR*'''
        return super(IMSDHelper2, self).GetDataset(layerPath)
    def GetWorkspaceFactoryType(self, layerPath):
        '''Method IMSDHelper.GetWorkspaceFactoryType (from IMSDHelper)

           INPUT
            layerPath           : BSTR

           OUTPUT
            workspaceFactoryType: BSTR*'''
        return super(IMSDHelper2, self).GetWorkspaceFactoryType(layerPath)
    def GetWorkspaceConnectionStringFromLayer(self, layerPath):
        '''Method IMSDHelper.GetWorkspaceConnectionStringFromLayer (from IMSDHelper)

           INPUT
            layerPath           : BSTR

           OUTPUT
            workspaceConnectionString: BSTR*'''
        return super(IMSDHelper2, self).GetWorkspaceConnectionStringFromLayer(layerPath)
    def PutWorkspaceConnectionStringInLayer(self, layerPath, workspaceConnectionString, validate):
        '''Method IMSDHelper.PutWorkspaceConnectionStringInLayer (from IMSDHelper)

           INPUTS
            layerPath           : BSTR
            workspaceConnectionString: BSTR
            validate            : VARIANT_BOOL'''
        return super(IMSDHelper2, self).PutWorkspaceConnectionStringInLayer(layerPath, workspaceConnectionString, validate)
    def GetLayerDisplayName(self, layerPath):
        '''Method IMSDHelper.GetLayerDisplayName (from IMSDHelper)

           INPUT
            layerPath           : BSTR

           OUTPUT
            layerDisplayName    : BSTR*'''
        return super(IMSDHelper2, self).GetLayerDisplayName(layerPath)

class IFeatureServiceEditExtension(_esriCarto.IFeatureServiceEditExtension):
    _IID = uuid.UUID('a1f6f4fe-0e7e-46f9-b70a-f25e785ba693')
    def CanCreateFromFeatureService(self, pObject):
        '''Method IFeatureServiceEditExtension.CanCreateFromFeatureService

           INPUT
            pObject             : IUnknown*

           OUTPUT
            CanCreate           : VARIANT_BOOL*'''
        return super(IFeatureServiceEditExtension, self).CanCreateFromFeatureService(pObject)
    def CreateFromFeatureService(self, pObject, pGroupLayer):
        '''Method IFeatureServiceEditExtension.CreateFromFeatureService

           INPUTS
            pObject             : IUnknown*
            pGroupLayer         : IGroupLayer*

           OUTPUT
            ppTables            : IEnumTable**'''
        return super(IFeatureServiceEditExtension, self).CreateFromFeatureService(pObject, pGroupLayer)
    def CreateLayerFromFeatureService(self, pObject, LayerID, pGroupLayer):
        '''Method IFeatureServiceEditExtension.CreateLayerFromFeatureService

           INPUTS
            pObject             : IUnknown*
            LayerID             : BSTR
            pGroupLayer         : IGroupLayer*

           OUTPUT
            ppTables            : IEnumTable**'''
        return super(IFeatureServiceEditExtension, self).CreateLayerFromFeatureService(pObject, LayerID, pGroupLayer)
    def CanEdit(self):
        '''Method IFeatureServiceEditExtension.CanEdit

           OUTPUT
            pCanEdit            : VARIANT_BOOL*'''
        return super(IFeatureServiceEditExtension, self).CanEdit()
    def UsesSoapEditing(self):
        '''Method IFeatureServiceEditExtension.UsesSoapEditing

           OUTPUT
            pUsesSoap           : VARIANT_BOOL*'''
        return super(IFeatureServiceEditExtension, self).UsesSoapEditing()
    def IsEditing(self):
        '''Method IFeatureServiceEditExtension.IsEditing

           OUTPUT
            pIsEditing          : VARIANT_BOOL*'''
        return super(IFeatureServiceEditExtension, self).IsEditing()
    def StartEditing(self, pLayer, pWorkspace, pEnvelope, repName, enumModelType):
        '''Method IFeatureServiceEditExtension.StartEditing

           INPUTS
            pLayer              : IGroupLayer*
            pWorkspace          : IWorkspace*
            pEnvelope           : IEnvelope*
            repName             : BSTR
            enumModelType       : esriReplicaModelType'''
        return super(IFeatureServiceEditExtension, self).StartEditing(pLayer, pWorkspace, pEnvelope, repName, enumModelType)
    def StopEditing(self, pLayer):
        '''Method IFeatureServiceEditExtension.StopEditing

           INPUT
            pLayer              : IGroupLayer*'''
        return super(IFeatureServiceEditExtension, self).StopEditing(pLayer)
    def Disconnect(self, pLayer):
        '''Method IFeatureServiceEditExtension.Disconnect

           INPUT
            pLayer              : IGroupLayer*'''
        return super(IFeatureServiceEditExtension, self).Disconnect(pLayer)
    def Extract(self, pLayer, ipWorkspace):
        '''Method IFeatureServiceEditExtension.Extract

           INPUTS
            pLayer              : IGroupLayer*
            ipWorkspace         : IWorkspace*'''
        return super(IFeatureServiceEditExtension, self).Extract(pLayer, ipWorkspace)

class IFeatureServiceLayerEditExtension(_esriCarto.IFeatureServiceLayerEditExtension):
    _IID = uuid.UUID('436a366e-57b0-4d08-9a9e-a4495a3b6acf')

    def __init__(self, *args, **kw):
        super(IFeatureServiceLayerEditExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_PlugInFeatureClassName(self, pFeatureClassName):
        '''Method IFeatureServiceLayerEditExtension.putref_PlugInFeatureClassName

           INPUT
            pFeatureClassName   : IName*'''
        return super(IFeatureServiceLayerEditExtension, self).putref_PlugInFeatureClassName(pFeatureClassName)
    def get_PlugInFeatureClassName(self):
        '''Method IFeatureServiceLayerEditExtension.get_PlugInFeatureClassName

           OUTPUT
            pFeatureClassName   : IName**'''
        return super(IFeatureServiceLayerEditExtension, self).get_PlugInFeatureClassName()
    def putref_PlugInTableName(self, pTableName):
        '''Method IFeatureServiceLayerEditExtension.putref_PlugInTableName

           INPUT
            pTableName          : IName*'''
        return super(IFeatureServiceLayerEditExtension, self).putref_PlugInTableName(pTableName)
    def get_PlugInTableName(self):
        '''Method IFeatureServiceLayerEditExtension.get_PlugInTableName

           OUTPUT
            pTableName          : IName**'''
        return super(IFeatureServiceLayerEditExtension, self).get_PlugInTableName()
    def put_LayerID(self, pLayerID):
        '''Method IFeatureServiceLayerEditExtension.put_LayerID

           INPUT
            pLayerID            : BSTR'''
        return super(IFeatureServiceLayerEditExtension, self).put_LayerID(pLayerID)
    def get_LayerID(self):
        '''Method IFeatureServiceLayerEditExtension.get_LayerID

           OUTPUT
            pLayerID            : BSTR*'''
        return super(IFeatureServiceLayerEditExtension, self).get_LayerID()
    LayerID = property(get_LayerID, put_LayerID, None)
    PlugInFeatureClassName = property(get_PlugInFeatureClassName, putref_PlugInFeatureClassName, None)
    PlugInTableName = property(get_PlugInTableName, putref_PlugInTableName, None)

class IMapSurroundFrame(_esriCarto.IMapSurroundFrame):
    _IID = uuid.UUID('9b00131c-9ed7-11d0-859e-0800091a2a72')

    def __init__(self, *args, **kw):
        super(IMapSurroundFrame, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MapSurround(self):
        '''Method IMapSurroundFrame.get_MapSurround

           OUTPUT
            MapSurround         : IMapSurround**'''
        return super(IMapSurroundFrame, self).get_MapSurround()
    def putref_MapSurround(self, MapSurround):
        '''Method IMapSurroundFrame.putref_MapSurround

           INPUT
            MapSurround         : IMapSurround*'''
        return super(IMapSurroundFrame, self).putref_MapSurround(MapSurround)
    def get_MapFrame(self):
        '''Method IMapSurroundFrame.get_MapFrame

           OUTPUT
            MapFrame            : IMapFrame**'''
        return super(IMapSurroundFrame, self).get_MapFrame()
    def putref_MapFrame(self, MapFrame):
        '''Method IMapSurroundFrame.putref_MapFrame

           INPUT
            MapFrame            : IMapFrame*'''
        return super(IMapSurroundFrame, self).putref_MapFrame(MapFrame)
    def get_Object(self):
        '''Method IFrameElement.get_Object (from IFrameElement)

           OUTPUT
            framedObject        : VARIANT*'''
        return super(IMapSurroundFrame, self).get_Object()
    def get_Border(self):
        '''Method IFrameElement.get_Border (from IFrameElement)

           OUTPUT
            Border              : IBorder**'''
        return super(IMapSurroundFrame, self).get_Border()
    def put_Border(self, Border):
        '''Method IFrameElement.put_Border (from IFrameElement)

           INPUT
            Border              : IBorder*'''
        return super(IMapSurroundFrame, self).put_Border(Border)
    def get_Background(self):
        '''Method IFrameElement.get_Background (from IFrameElement)

           OUTPUT
            Background          : IBackground**'''
        return super(IMapSurroundFrame, self).get_Background()
    def put_Background(self, Background):
        '''Method IFrameElement.put_Background (from IFrameElement)

           INPUT
            Background          : IBackground*'''
        return super(IMapSurroundFrame, self).put_Background(Background)
    def get_Thumbnail(self):
        '''Method IFrameElement.get_Thumbnail (from IFrameElement)

           OUTPUT
            bitmapHandle        : OLE_HANDLE*'''
        return super(IMapSurroundFrame, self).get_Thumbnail()
    def get_DraftMode(self):
        '''Method IFrameElement.get_DraftMode (from IFrameElement)

           OUTPUT
            DraftMode           : VARIANT_BOOL*'''
        return super(IMapSurroundFrame, self).get_DraftMode()
    def put_DraftMode(self, DraftMode):
        '''Method IFrameElement.put_DraftMode (from IFrameElement)

           INPUT
            DraftMode           : VARIANT_BOOL'''
        return super(IMapSurroundFrame, self).put_DraftMode(DraftMode)
    Background = property(get_Background, put_Background, None)
    Border = property(get_Border, put_Border, None)
    DraftMode = property(get_DraftMode, put_DraftMode, None)
    MapFrame = property(get_MapFrame, putref_MapFrame, None)
    MapSurround = property(get_MapSurround, putref_MapSurround, None)
    Object = property(get_Object, None, None)
    Thumbnail = property(get_Thumbnail, None, None)

class IMapSurround(_esriCarto.IMapSurround):
    _IID = uuid.UUID('fe3115e9-ed6c-11d0-8683-0000f8751720')

    def __init__(self, *args, **kw):
        super(IMapSurround, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Map(self):
        '''Method IMapSurround.get_Map

           OUTPUT
            Map                 : IMap**'''
        return super(IMapSurround, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map

           INPUT
            Map                 : IMap*'''
        return super(IMapSurround, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapSurround, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMapSurround, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(IMapSurround, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(IMapSurround, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IMapSurround, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IMapSurround, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh'''
        return super(IMapSurround, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(IMapSurround, self).Draw(Display, TrackCancel, Bounds)
    Icon = property(get_Icon, None, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)

class IEnumMapSurround(_esriCarto.IEnumMapSurround):
    _IID = uuid.UUID('fe3115ea-ed6c-11d0-8683-0000f8751720')
    def Next(self):
        '''Method IEnumMapSurround.Next

           OUTPUT
            MapSurround         : IMapSurround**'''
        return super(IEnumMapSurround, self).Next()
    def __iter__(self):
        try:
            super(IEnumMapSurround, self).Reset()
            val = super(IEnumMapSurround, self).Next()
            while val:
                yield val
                val = super(IEnumMapSurround, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumMapSurround.Reset'''
        return super(IEnumMapSurround, self).Reset()

class ILegend(_esriCarto.ILegend):
    _IID = uuid.UUID('3141f307-38e2-11d1-8809-080009ec732a')

    def __init__(self, *args, **kw):
        super(ILegend, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Format(self):
        '''Method ILegend.get_Format

           OUTPUT
            LegendFormat        : ILegendFormat**'''
        return super(ILegend, self).get_Format()
    def putref_Format(self, LegendFormat):
        '''Method ILegend.putref_Format

           INPUT
            LegendFormat        : ILegendFormat*'''
        return super(ILegend, self).putref_Format(LegendFormat)
    def get_Title(self):
        '''Method ILegend.get_Title

           OUTPUT
            Title               : BSTR*'''
        return super(ILegend, self).get_Title()
    def put_Title(self, Title):
        '''Method ILegend.put_Title

           INPUT
            Title               : BSTR'''
        return super(ILegend, self).put_Title(Title)
    def get_AutoAdd(self):
        '''Method ILegend.get_AutoAdd

           OUTPUT
            AutoAdd             : VARIANT_BOOL*'''
        return super(ILegend, self).get_AutoAdd()
    def put_AutoAdd(self, AutoAdd):
        '''Method ILegend.put_AutoAdd

           INPUT
            AutoAdd             : VARIANT_BOOL'''
        return super(ILegend, self).put_AutoAdd(AutoAdd)
    def get_AutoReorder(self):
        '''Method ILegend.get_AutoReorder

           OUTPUT
            AutoReorder         : VARIANT_BOOL*'''
        return super(ILegend, self).get_AutoReorder()
    def put_AutoReorder(self, AutoReorder):
        '''Method ILegend.put_AutoReorder

           INPUT
            AutoReorder         : VARIANT_BOOL'''
        return super(ILegend, self).put_AutoReorder(AutoReorder)
    def get_AutoVisibility(self):
        '''Method ILegend.get_AutoVisibility

           OUTPUT
            AutoVisibility      : VARIANT_BOOL*'''
        return super(ILegend, self).get_AutoVisibility()
    def put_AutoVisibility(self, AutoVisibility):
        '''Method ILegend.put_AutoVisibility

           INPUT
            AutoVisibility      : VARIANT_BOOL'''
        return super(ILegend, self).put_AutoVisibility(AutoVisibility)
    def get_FlowRight(self):
        '''Method ILegend.get_FlowRight

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegend, self).get_FlowRight()
    def put_FlowRight(self, flag):
        '''Method ILegend.put_FlowRight

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegend, self).put_FlowRight(flag)
    def get_ItemCount(self):
        '''Method ILegend.get_ItemCount

           OUTPUT
            numItems            : long*'''
        return super(ILegend, self).get_ItemCount()
    def get_Item(self, Index):
        '''Method ILegend.get_Item

           INPUT
            Index               : long

           OUTPUT
            Item                : ILegendItem**'''
        return super(ILegend, self).get_Item(Index)
    def AddItem(self, Item):
        '''Method ILegend.AddItem

           INPUT
            Item                : ILegendItem*'''
        return super(ILegend, self).AddItem(Item)
    def InsertItem(self, Index, Item):
        '''Method ILegend.InsertItem

           INPUTS
            Index               : long
            Item                : ILegendItem*'''
        return super(ILegend, self).InsertItem(Index, Item)
    def RemoveItem(self, Index):
        '''Method ILegend.RemoveItem

           INPUT
            Index               : long'''
        return super(ILegend, self).RemoveItem(Index)
    def ClearItems(self):
        '''Method ILegend.ClearItems'''
        return super(ILegend, self).ClearItems()
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(ILegend, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(ILegend, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(ILegend, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(ILegend, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(ILegend, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(ILegend, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(ILegend, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(ILegend, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(ILegend, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(ILegend, self).Draw(Display, TrackCancel, Bounds)
    AutoAdd = property(get_AutoAdd, put_AutoAdd, None)
    AutoReorder = property(get_AutoReorder, put_AutoReorder, None)
    AutoVisibility = property(get_AutoVisibility, put_AutoVisibility, None)
    FlowRight = property(get_FlowRight, put_FlowRight, None)
    Format = property(get_Format, putref_Format, None)
    Icon = property(get_Icon, None, None)
    ItemCount = property(get_ItemCount, None, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)
    Title = property(get_Title, put_Title, None)
    Item = IndexProperty(get_Item, None)

class IScaleBar(_esriCarto.IScaleBar):
    _IID = uuid.UUID('6dfae8e2-ecaa-11d0-8682-0000f8751720')

    def __init__(self, *args, **kw):
        super(IScaleBar, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Division(self):
        '''Method IScaleBar.get_Division

           OUTPUT
            Units               : double*'''
        return super(IScaleBar, self).get_Division()
    def put_Division(self, Units):
        '''Method IScaleBar.put_Division

           INPUT
            Units               : double'''
        return super(IScaleBar, self).put_Division(Units)
    def get_Divisions(self):
        '''Method IScaleBar.get_Divisions

           OUTPUT
            Count               : short*'''
        return super(IScaleBar, self).get_Divisions()
    def put_Divisions(self, Count):
        '''Method IScaleBar.put_Divisions

           INPUT
            Count               : short'''
        return super(IScaleBar, self).put_Divisions(Count)
    def get_DivisionsBeforeZero(self):
        '''Method IScaleBar.get_DivisionsBeforeZero

           OUTPUT
            Count               : short*'''
        return super(IScaleBar, self).get_DivisionsBeforeZero()
    def put_DivisionsBeforeZero(self, Count):
        '''Method IScaleBar.put_DivisionsBeforeZero

           INPUT
            Count               : short'''
        return super(IScaleBar, self).put_DivisionsBeforeZero(Count)
    def get_Subdivisions(self):
        '''Method IScaleBar.get_Subdivisions

           OUTPUT
            Units               : short*'''
        return super(IScaleBar, self).get_Subdivisions()
    def put_Subdivisions(self, Units):
        '''Method IScaleBar.put_Subdivisions

           INPUT
            Units               : short'''
        return super(IScaleBar, self).put_Subdivisions(Units)
    def get_Units(self):
        '''Method IScaleBar.get_Units

           OUTPUT
            Units               : esriUnits*'''
        return super(IScaleBar, self).get_Units()
    def put_Units(self, Units):
        '''Method IScaleBar.put_Units

           INPUT
            Units               : esriUnits'''
        return super(IScaleBar, self).put_Units(Units)
    def get_UnitLabel(self):
        '''Method IScaleBar.get_UnitLabel

           OUTPUT
            UnitLabel           : BSTR*'''
        return super(IScaleBar, self).get_UnitLabel()
    def put_UnitLabel(self, UnitLabel):
        '''Method IScaleBar.put_UnitLabel

           INPUT
            UnitLabel           : BSTR'''
        return super(IScaleBar, self).put_UnitLabel(UnitLabel)
    def get_UnitLabelPosition(self):
        '''Method IScaleBar.get_UnitLabelPosition

           OUTPUT
            position            : esriScaleBarPos*'''
        return super(IScaleBar, self).get_UnitLabelPosition()
    def put_UnitLabelPosition(self, position):
        '''Method IScaleBar.put_UnitLabelPosition

           INPUT
            position            : esriScaleBarPos'''
        return super(IScaleBar, self).put_UnitLabelPosition(position)
    def get_UnitLabelGap(self):
        '''Method IScaleBar.get_UnitLabelGap

           OUTPUT
            points              : double*'''
        return super(IScaleBar, self).get_UnitLabelGap()
    def put_UnitLabelGap(self, points):
        '''Method IScaleBar.put_UnitLabelGap

           INPUT
            points              : double'''
        return super(IScaleBar, self).put_UnitLabelGap(points)
    def get_UnitLabelSymbol(self):
        '''Method IScaleBar.get_UnitLabelSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IScaleBar, self).get_UnitLabelSymbol()
    def put_UnitLabelSymbol(self, Symbol):
        '''Method IScaleBar.put_UnitLabelSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IScaleBar, self).put_UnitLabelSymbol(Symbol)
    def get_LabelFrequency(self):
        '''Method IScaleBar.get_LabelFrequency

           OUTPUT
            LabelFrequency      : esriScaleBarFrequency*'''
        return super(IScaleBar, self).get_LabelFrequency()
    def put_LabelFrequency(self, LabelFrequency):
        '''Method IScaleBar.put_LabelFrequency

           INPUT
            LabelFrequency      : esriScaleBarFrequency'''
        return super(IScaleBar, self).put_LabelFrequency(LabelFrequency)
    def get_NumberFormat(self):
        '''Method IScaleBar.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IScaleBar, self).get_NumberFormat()
    def put_NumberFormat(self, Format):
        '''Method IScaleBar.put_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IScaleBar, self).put_NumberFormat(Format)
    def get_LabelPosition(self):
        '''Method IScaleBar.get_LabelPosition

           OUTPUT
            position            : esriVertPosEnum*'''
        return super(IScaleBar, self).get_LabelPosition()
    def put_LabelPosition(self, position):
        '''Method IScaleBar.put_LabelPosition

           INPUT
            position            : esriVertPosEnum'''
        return super(IScaleBar, self).put_LabelPosition(position)
    def get_LabelGap(self):
        '''Method IScaleBar.get_LabelGap

           OUTPUT
            points              : double*'''
        return super(IScaleBar, self).get_LabelGap()
    def put_LabelGap(self, points):
        '''Method IScaleBar.put_LabelGap

           INPUT
            points              : double'''
        return super(IScaleBar, self).put_LabelGap(points)
    def get_LabelSymbol(self):
        '''Method IScaleBar.get_LabelSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IScaleBar, self).get_LabelSymbol()
    def put_LabelSymbol(self, Symbol):
        '''Method IScaleBar.put_LabelSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IScaleBar, self).put_LabelSymbol(Symbol)
    def get_BarColor(self):
        '''Method IScaleBar.get_BarColor

           OUTPUT
            Color               : IColor**'''
        return super(IScaleBar, self).get_BarColor()
    def put_BarColor(self, Color):
        '''Method IScaleBar.put_BarColor

           INPUT
            Color               : IColor*'''
        return super(IScaleBar, self).put_BarColor(Color)
    def get_BarHeight(self):
        '''Method IScaleBar.get_BarHeight

           OUTPUT
            points              : double*'''
        return super(IScaleBar, self).get_BarHeight()
    def put_BarHeight(self, points):
        '''Method IScaleBar.put_BarHeight

           INPUT
            points              : double'''
        return super(IScaleBar, self).put_BarHeight(points)
    def get_ResizeHint(self):
        '''Method IScaleBar.get_ResizeHint

           OUTPUT
            hint                : esriScaleBarResizeHint*'''
        return super(IScaleBar, self).get_ResizeHint()
    def put_ResizeHint(self, hint):
        '''Method IScaleBar.put_ResizeHint

           INPUT
            hint                : esriScaleBarResizeHint'''
        return super(IScaleBar, self).put_ResizeHint(hint)
    def UseMapSettings(self):
        '''Method IScaleBar.UseMapSettings'''
        return super(IScaleBar, self).UseMapSettings()
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(IScaleBar, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(IScaleBar, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(IScaleBar, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(IScaleBar, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(IScaleBar, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(IScaleBar, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IScaleBar, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IScaleBar, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(IScaleBar, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(IScaleBar, self).Draw(Display, TrackCancel, Bounds)
    BarColor = property(get_BarColor, put_BarColor, None)
    BarHeight = property(get_BarHeight, put_BarHeight, None)
    Division = property(get_Division, put_Division, None)
    Divisions = property(get_Divisions, put_Divisions, None)
    DivisionsBeforeZero = property(get_DivisionsBeforeZero, put_DivisionsBeforeZero, None)
    Icon = property(get_Icon, None, None)
    LabelFrequency = property(get_LabelFrequency, put_LabelFrequency, None)
    LabelGap = property(get_LabelGap, put_LabelGap, None)
    LabelPosition = property(get_LabelPosition, put_LabelPosition, None)
    LabelSymbol = property(get_LabelSymbol, put_LabelSymbol, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)
    NumberFormat = property(get_NumberFormat, put_NumberFormat, None)
    ResizeHint = property(get_ResizeHint, put_ResizeHint, None)
    Subdivisions = property(get_Subdivisions, put_Subdivisions, None)
    UnitLabel = property(get_UnitLabel, put_UnitLabel, None)
    UnitLabelGap = property(get_UnitLabelGap, put_UnitLabelGap, None)
    UnitLabelPosition = property(get_UnitLabelPosition, put_UnitLabelPosition, None)
    UnitLabelSymbol = property(get_UnitLabelSymbol, put_UnitLabelSymbol, None)
    Units = property(get_Units, put_Units, None)

class IMapInset(_esriCarto.IMapInset):
    _IID = uuid.UUID('6dfae8f1-ecaa-11d0-8682-0000f8751720')

    def __init__(self, *args, **kw):
        super(IMapInset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MapBounds(self):
        '''Method IMapInset.get_MapBounds

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IMapInset, self).get_MapBounds()
    def put_MapBounds(self, Bounds):
        '''Method IMapInset.put_MapBounds

           INPUT
            Bounds              : IEnvelope*'''
        return super(IMapInset, self).put_MapBounds(Bounds)
    def get_VisibleBounds(self):
        '''Method IMapInset.get_VisibleBounds

           OUTPUT
            VisibleBounds       : IEnvelope**'''
        return super(IMapInset, self).get_VisibleBounds()
    def put_VisibleBounds(self, VisibleBounds):
        '''Method IMapInset.put_VisibleBounds

           INPUT
            VisibleBounds       : IEnvelope*'''
        return super(IMapInset, self).put_VisibleBounds(VisibleBounds)
    def get_IsLive(self):
        '''Method IMapInset.get_IsLive

           OUTPUT
            IsLive              : VARIANT_BOOL*'''
        return super(IMapInset, self).get_IsLive()
    def put_IsLive(self, IsLive):
        '''Method IMapInset.put_IsLive

           INPUT
            IsLive              : VARIANT_BOOL'''
        return super(IMapInset, self).put_IsLive(IsLive)
    def get_UsingZoomScale(self):
        '''Method IMapInset.get_UsingZoomScale

           OUTPUT
            UsingZoomScale      : VARIANT_BOOL*'''
        return super(IMapInset, self).get_UsingZoomScale()
    def get_ZoomPercent(self):
        '''Method IMapInset.get_ZoomPercent

           OUTPUT
            percent             : double*'''
        return super(IMapInset, self).get_ZoomPercent()
    def put_ZoomPercent(self, percent):
        '''Method IMapInset.put_ZoomPercent

           INPUT
            percent             : double'''
        return super(IMapInset, self).put_ZoomPercent(percent)
    def get_ZoomScale(self):
        '''Method IMapInset.get_ZoomScale

           OUTPUT
            Scale               : double*'''
        return super(IMapInset, self).get_ZoomScale()
    def put_ZoomScale(self, Scale):
        '''Method IMapInset.put_ZoomScale

           INPUT
            Scale               : double'''
        return super(IMapInset, self).put_ZoomScale(Scale)
    def get_Description(self):
        '''Method IMapInset.get_Description

           OUTPUT
            Title               : BSTR*'''
        return super(IMapInset, self).get_Description()
    def CalculateVisibleBounds(self):
        '''Method IMapInset.CalculateVisibleBounds'''
        return super(IMapInset, self).CalculateVisibleBounds()
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(IMapInset, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(IMapInset, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(IMapInset, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(IMapInset, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(IMapInset, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(IMapInset, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IMapInset, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IMapInset, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(IMapInset, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(IMapInset, self).Draw(Display, TrackCancel, Bounds)
    Description = property(get_Description, None, None)
    Icon = property(get_Icon, None, None)
    IsLive = property(get_IsLive, put_IsLive, None)
    Map = property(get_Map, putref_Map, None)
    MapBounds = property(get_MapBounds, put_MapBounds, None)
    Name = property(get_Name, put_Name, None)
    UsingZoomScale = property(get_UsingZoomScale, None, None)
    VisibleBounds = property(get_VisibleBounds, put_VisibleBounds, None)
    ZoomPercent = property(get_ZoomPercent, put_ZoomPercent, None)
    ZoomScale = property(get_ZoomScale, put_ZoomScale, None)

class IScaleText(_esriCarto.IScaleText):
    _IID = uuid.UUID('7a3f91f0-b9e3-11d1-8756-0000f8751720')

    def __init__(self, *args, **kw):
        super(IScaleText, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Text(self):
        '''Method IScaleText.get_Text

           OUTPUT
            Text                : BSTR*'''
        return super(IScaleText, self).get_Text()
    def put_Symbol(self, Symbol):
        '''Method IScaleText.put_Symbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IScaleText, self).put_Symbol(Symbol)
    def get_Symbol(self):
        '''Method IScaleText.get_Symbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IScaleText, self).get_Symbol()
    def put_Style(self, Style):
        '''Method IScaleText.put_Style

           INPUT
            Style               : esriScaleTextStyleEnum'''
        return super(IScaleText, self).put_Style(Style)
    def get_Style(self):
        '''Method IScaleText.get_Style

           OUTPUT
            Style               : esriScaleTextStyleEnum*'''
        return super(IScaleText, self).get_Style()
    def put_Format(self, Format):
        '''Method IScaleText.put_Format

           INPUT
            Format              : BSTR'''
        return super(IScaleText, self).put_Format(Format)
    def get_Format(self):
        '''Method IScaleText.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IScaleText, self).get_Format()
    def put_PageUnits(self, Units):
        '''Method IScaleText.put_PageUnits

           INPUT
            Units               : esriUnits'''
        return super(IScaleText, self).put_PageUnits(Units)
    def get_PageUnits(self):
        '''Method IScaleText.get_PageUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IScaleText, self).get_PageUnits()
    def put_MapUnits(self, Units):
        '''Method IScaleText.put_MapUnits

           INPUT
            Units               : esriUnits'''
        return super(IScaleText, self).put_MapUnits(Units)
    def get_MapUnits(self):
        '''Method IScaleText.get_MapUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IScaleText, self).get_MapUnits()
    def put_PageUnitLabel(self, Label):
        '''Method IScaleText.put_PageUnitLabel

           INPUT
            Label               : BSTR'''
        return super(IScaleText, self).put_PageUnitLabel(Label)
    def get_PageUnitLabel(self):
        '''Method IScaleText.get_PageUnitLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IScaleText, self).get_PageUnitLabel()
    def put_MapUnitLabel(self, Label):
        '''Method IScaleText.put_MapUnitLabel

           INPUT
            Label               : BSTR'''
        return super(IScaleText, self).put_MapUnitLabel(Label)
    def get_MapUnitLabel(self):
        '''Method IScaleText.get_MapUnitLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IScaleText, self).get_MapUnitLabel()
    def put_NumberFormat(self, Format):
        '''Method IScaleText.put_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IScaleText, self).put_NumberFormat(Format)
    def get_NumberFormat(self):
        '''Method IScaleText.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IScaleText, self).get_NumberFormat()
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(IScaleText, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(IScaleText, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(IScaleText, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(IScaleText, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(IScaleText, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(IScaleText, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IScaleText, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IScaleText, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(IScaleText, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(IScaleText, self).Draw(Display, TrackCancel, Bounds)
    Format = property(get_Format, put_Format, None)
    Icon = property(get_Icon, None, None)
    Map = property(get_Map, putref_Map, None)
    MapUnitLabel = property(get_MapUnitLabel, put_MapUnitLabel, None)
    MapUnits = property(get_MapUnits, put_MapUnits, None)
    Name = property(get_Name, put_Name, None)
    NumberFormat = property(get_NumberFormat, put_NumberFormat, None)
    PageUnitLabel = property(get_PageUnitLabel, put_PageUnitLabel, None)
    PageUnits = property(get_PageUnits, put_PageUnits, None)
    Style = property(get_Style, put_Style, None)
    Symbol = property(get_Symbol, put_Symbol, None)
    Text = property(get_Text, None, None)

class IScaleText2(_esriCarto.IScaleText2):
    _IID = uuid.UUID('a2fe2d0c-bd0e-452f-b903-c6a80ffc94e6')

    def __init__(self, *args, **kw):
        super(IScaleText2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Text(self):
        '''Method IScaleText2.get_Text

           OUTPUT
            Text                : BSTR*'''
        return super(IScaleText2, self).get_Text()
    def put_Symbol(self, Symbol):
        '''Method IScaleText2.put_Symbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IScaleText2, self).put_Symbol(Symbol)
    def get_Symbol(self):
        '''Method IScaleText2.get_Symbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IScaleText2, self).get_Symbol()
    def put_Style(self, Style):
        '''Method IScaleText2.put_Style

           INPUT
            Style               : esriScaleTextStyleEnum'''
        return super(IScaleText2, self).put_Style(Style)
    def get_Style(self):
        '''Method IScaleText2.get_Style

           OUTPUT
            Style               : esriScaleTextStyleEnum*'''
        return super(IScaleText2, self).get_Style()
    def put_Format(self, Format):
        '''Method IScaleText2.put_Format

           INPUT
            Format              : BSTR'''
        return super(IScaleText2, self).put_Format(Format)
    def get_Format(self):
        '''Method IScaleText2.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IScaleText2, self).get_Format()
    def put_PageUnits(self, Units):
        '''Method IScaleText2.put_PageUnits

           INPUT
            Units               : esriUnits'''
        return super(IScaleText2, self).put_PageUnits(Units)
    def get_PageUnits(self):
        '''Method IScaleText2.get_PageUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IScaleText2, self).get_PageUnits()
    def put_MapUnits(self, Units):
        '''Method IScaleText2.put_MapUnits

           INPUT
            Units               : esriUnits'''
        return super(IScaleText2, self).put_MapUnits(Units)
    def get_MapUnits(self):
        '''Method IScaleText2.get_MapUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IScaleText2, self).get_MapUnits()
    def put_PageUnitLabel(self, Label):
        '''Method IScaleText2.put_PageUnitLabel

           INPUT
            Label               : BSTR'''
        return super(IScaleText2, self).put_PageUnitLabel(Label)
    def get_PageUnitLabel(self):
        '''Method IScaleText2.get_PageUnitLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IScaleText2, self).get_PageUnitLabel()
    def put_MapUnitLabel(self, Label):
        '''Method IScaleText2.put_MapUnitLabel

           INPUT
            Label               : BSTR'''
        return super(IScaleText2, self).put_MapUnitLabel(Label)
    def get_MapUnitLabel(self):
        '''Method IScaleText2.get_MapUnitLabel

           OUTPUT
            Label               : BSTR*'''
        return super(IScaleText2, self).get_MapUnitLabel()
    def put_NumberFormat(self, Format):
        '''Method IScaleText2.put_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IScaleText2, self).put_NumberFormat(Format)
    def get_NumberFormat(self):
        '''Method IScaleText2.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IScaleText2, self).get_NumberFormat()
    def put_Separator(self, Separator):
        '''Method IScaleText2.put_Separator

           INPUT
            Separator           : BSTR'''
        return super(IScaleText2, self).put_Separator(Separator)
    def get_Separator(self):
        '''Method IScaleText2.get_Separator

           OUTPUT
            Separator           : BSTR*'''
        return super(IScaleText2, self).get_Separator()
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(IScaleText2, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(IScaleText2, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(IScaleText2, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(IScaleText2, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(IScaleText2, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(IScaleText2, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IScaleText2, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IScaleText2, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(IScaleText2, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(IScaleText2, self).Draw(Display, TrackCancel, Bounds)
    Format = property(get_Format, put_Format, None)
    Icon = property(get_Icon, None, None)
    Map = property(get_Map, putref_Map, None)
    MapUnitLabel = property(get_MapUnitLabel, put_MapUnitLabel, None)
    MapUnits = property(get_MapUnits, put_MapUnits, None)
    Name = property(get_Name, put_Name, None)
    NumberFormat = property(get_NumberFormat, put_NumberFormat, None)
    PageUnitLabel = property(get_PageUnitLabel, put_PageUnitLabel, None)
    PageUnits = property(get_PageUnits, put_PageUnits, None)
    Separator = property(get_Separator, put_Separator, None)
    Style = property(get_Style, put_Style, None)
    Symbol = property(get_Symbol, put_Symbol, None)
    Text = property(get_Text, None, None)

class INorthArrow(_esriCarto.INorthArrow):
    _IID = uuid.UUID('7a3f91f1-b9e3-11d1-8756-0000f8751720')

    def __init__(self, *args, **kw):
        super(INorthArrow, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Color(self):
        '''Method INorthArrow.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(INorthArrow, self).get_Color()
    def put_Color(self, Color):
        '''Method INorthArrow.put_Color

           INPUT
            Color               : IColor*'''
        return super(INorthArrow, self).put_Color(Color)
    def get_Size(self):
        '''Method INorthArrow.get_Size

           OUTPUT
            pointSize           : double*'''
        return super(INorthArrow, self).get_Size()
    def put_Size(self, pointSize):
        '''Method INorthArrow.put_Size

           INPUT
            pointSize           : double'''
        return super(INorthArrow, self).put_Size(pointSize)
    def get_Angle(self):
        '''Method INorthArrow.get_Angle

           OUTPUT
            degrees             : double*'''
        return super(INorthArrow, self).get_Angle()
    def get_CalibrationAngle(self):
        '''Method INorthArrow.get_CalibrationAngle

           OUTPUT
            degrees             : double*'''
        return super(INorthArrow, self).get_CalibrationAngle()
    def put_CalibrationAngle(self, degrees):
        '''Method INorthArrow.put_CalibrationAngle

           INPUT
            degrees             : double'''
        return super(INorthArrow, self).put_CalibrationAngle(degrees)
    def get_ReferenceLocation(self):
        '''Method INorthArrow.get_ReferenceLocation

           OUTPUT
            point               : IPoint**'''
        return super(INorthArrow, self).get_ReferenceLocation()
    def putref_ReferenceLocation(self, point):
        '''Method INorthArrow.putref_ReferenceLocation

           INPUT
            point               : IPoint*'''
        return super(INorthArrow, self).putref_ReferenceLocation(point)
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(INorthArrow, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(INorthArrow, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(INorthArrow, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(INorthArrow, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(INorthArrow, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(INorthArrow, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(INorthArrow, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(INorthArrow, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(INorthArrow, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(INorthArrow, self).Draw(Display, TrackCancel, Bounds)
    Angle = property(get_Angle, None, None)
    CalibrationAngle = property(get_CalibrationAngle, put_CalibrationAngle, None)
    Color = property(get_Color, put_Color, None)
    Icon = property(get_Icon, None, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)
    ReferenceLocation = property(get_ReferenceLocation, putref_ReferenceLocation, None)
    Size = property(get_Size, put_Size, None)

class INorthArrow2(_esriCarto.INorthArrow2):
    _IID = uuid.UUID('05270da7-fb6c-40e6-b1e6-7ec2c02b628c')

    def __init__(self, *args, **kw):
        super(INorthArrow2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Color(self):
        '''Method INorthArrow2.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(INorthArrow2, self).get_Color()
    def put_Color(self, Color):
        '''Method INorthArrow2.put_Color

           INPUT
            Color               : IColor*'''
        return super(INorthArrow2, self).put_Color(Color)
    def get_Size(self):
        '''Method INorthArrow2.get_Size

           OUTPUT
            pointSize           : double*'''
        return super(INorthArrow2, self).get_Size()
    def put_Size(self, pointSize):
        '''Method INorthArrow2.put_Size

           INPUT
            pointSize           : double'''
        return super(INorthArrow2, self).put_Size(pointSize)
    def get_Angle(self):
        '''Method INorthArrow2.get_Angle

           OUTPUT
            degrees             : double*'''
        return super(INorthArrow2, self).get_Angle()
    def get_CalibrationAngle(self):
        '''Method INorthArrow2.get_CalibrationAngle

           OUTPUT
            degrees             : double*'''
        return super(INorthArrow2, self).get_CalibrationAngle()
    def put_CalibrationAngle(self, degrees):
        '''Method INorthArrow2.put_CalibrationAngle

           INPUT
            degrees             : double'''
        return super(INorthArrow2, self).put_CalibrationAngle(degrees)
    def get_ReferenceLocation(self):
        '''Method INorthArrow2.get_ReferenceLocation

           OUTPUT
            point               : IPoint**'''
        return super(INorthArrow2, self).get_ReferenceLocation()
    def putref_ReferenceLocation(self, point):
        '''Method INorthArrow2.putref_ReferenceLocation

           INPUT
            point               : IPoint*'''
        return super(INorthArrow2, self).putref_ReferenceLocation(point)
    def put_NorthArrowType(self, Type):
        '''Method INorthArrow2.put_NorthArrowType

           INPUT
            Type                : esriNorthArrowType'''
        return super(INorthArrow2, self).put_NorthArrowType(Type)
    def get_NorthArrowType(self):
        '''Method INorthArrow2.get_NorthArrowType

           OUTPUT
            Type                : esriNorthArrowType*'''
        return super(INorthArrow2, self).get_NorthArrowType()
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(INorthArrow2, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(INorthArrow2, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(INorthArrow2, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(INorthArrow2, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(INorthArrow2, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(INorthArrow2, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(INorthArrow2, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(INorthArrow2, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(INorthArrow2, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(INorthArrow2, self).Draw(Display, TrackCancel, Bounds)
    Angle = property(get_Angle, None, None)
    CalibrationAngle = property(get_CalibrationAngle, put_CalibrationAngle, None)
    Color = property(get_Color, put_Color, None)
    Icon = property(get_Icon, None, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)
    NorthArrowType = property(get_NorthArrowType, put_NorthArrowType, None)
    ReferenceLocation = property(get_ReferenceLocation, putref_ReferenceLocation, None)
    Size = property(get_Size, put_Size, None)

class IOverview(_esriCarto.IOverview):
    _IID = uuid.UUID('7a3f91f2-b9e3-11d1-8756-0000f8751720')

    def __init__(self, *args, **kw):
        super(IOverview, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AoiFillSymbol(self):
        '''Method IOverview.get_AoiFillSymbol

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(IOverview, self).get_AoiFillSymbol()
    def put_AoiFillSymbol(self, Symbol):
        '''Method IOverview.put_AoiFillSymbol

           INPUT
            Symbol              : IFillSymbol*'''
        return super(IOverview, self).put_AoiFillSymbol(Symbol)
    def get_OverlayGridLayer(self):
        '''Method IOverview.get_OverlayGridLayer

           OUTPUT
            Layer               : ILayer**'''
        return super(IOverview, self).get_OverlayGridLayer()
    def put_OverlayGridLayer(self, Layer):
        '''Method IOverview.put_OverlayGridLayer

           INPUT
            Layer               : ILayer*'''
        return super(IOverview, self).put_OverlayGridLayer(Layer)
    def get_OverlayGridLabelSymbol(self):
        '''Method IOverview.get_OverlayGridLabelSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IOverview, self).get_OverlayGridLabelSymbol()
    def put_OverlayGridLabelSymbol(self, Symbol):
        '''Method IOverview.put_OverlayGridLabelSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IOverview, self).put_OverlayGridLabelSymbol(Symbol)
    def SetOverlayGridCell(self, gridLayerFid):
        '''Method IOverview.SetOverlayGridCell

           INPUT
            gridLayerFid        : long'''
        return super(IOverview, self).SetOverlayGridCell(gridLayerFid)
    def UpdateDisplay(self, windowWidth, windowHeight):
        '''Method IOverview.UpdateDisplay

           INPUTS
            windowWidth         : long
            windowHeight        : long'''
        return super(IOverview, self).UpdateDisplay(windowWidth, windowHeight)
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(IOverview, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(IOverview, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(IOverview, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(IOverview, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(IOverview, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(IOverview, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IOverview, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IOverview, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(IOverview, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(IOverview, self).Draw(Display, TrackCancel, Bounds)
    AoiFillSymbol = property(get_AoiFillSymbol, put_AoiFillSymbol, None)
    Icon = property(get_Icon, None, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)
    OverlayGridLabelSymbol = property(get_OverlayGridLabelSymbol, put_OverlayGridLabelSymbol, None)
    OverlayGridLayer = property(get_OverlayGridLayer, put_OverlayGridLayer, None)

class IOverview2(_esriCarto.IOverview2):
    _IID = uuid.UUID('1bd83797-6dbc-43d1-a642-19a22185acac')

    def __init__(self, *args, **kw):
        super(IOverview2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AoiFillSymbol(self):
        '''Method IOverview2.get_AoiFillSymbol

           OUTPUT
            Symbol              : IFillSymbol**'''
        return super(IOverview2, self).get_AoiFillSymbol()
    def put_AoiFillSymbol(self, Symbol):
        '''Method IOverview2.put_AoiFillSymbol

           INPUT
            Symbol              : IFillSymbol*'''
        return super(IOverview2, self).put_AoiFillSymbol(Symbol)
    def get_OverlayGridLayer(self):
        '''Method IOverview2.get_OverlayGridLayer

           OUTPUT
            Layer               : ILayer**'''
        return super(IOverview2, self).get_OverlayGridLayer()
    def put_OverlayGridLayer(self, Layer):
        '''Method IOverview2.put_OverlayGridLayer

           INPUT
            Layer               : ILayer*'''
        return super(IOverview2, self).put_OverlayGridLayer(Layer)
    def get_OverlayGridLabelSymbol(self):
        '''Method IOverview2.get_OverlayGridLabelSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IOverview2, self).get_OverlayGridLabelSymbol()
    def put_OverlayGridLabelSymbol(self, Symbol):
        '''Method IOverview2.put_OverlayGridLabelSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IOverview2, self).put_OverlayGridLabelSymbol(Symbol)
    def SetOverlayGridCell(self, gridLayerFid):
        '''Method IOverview2.SetOverlayGridCell

           INPUT
            gridLayerFid        : long'''
        return super(IOverview2, self).SetOverlayGridCell(gridLayerFid)
    def UpdateDisplay(self, windowWidth, windowHeight):
        '''Method IOverview2.UpdateDisplay

           INPUTS
            windowWidth         : long
            windowHeight        : long'''
        return super(IOverview2, self).UpdateDisplay(windowWidth, windowHeight)
    def get_BackgroundColor(self):
        '''Method IOverview2.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IOverview2, self).get_BackgroundColor()
    def put_BackgroundColor(self, Color):
        '''Method IOverview2.put_BackgroundColor

           INPUT
            Color               : IColor*'''
        return super(IOverview2, self).put_BackgroundColor(Color)
    def get_Map(self):
        '''Method IMapSurround.get_Map (from IMapSurround)

           OUTPUT
            Map                 : IMap**'''
        return super(IOverview2, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapSurround.putref_Map (from IMapSurround)

           INPUT
            Map                 : IMap*'''
        return super(IOverview2, self).putref_Map(Map)
    def get_Name(self):
        '''Method IMapSurround.get_Name (from IMapSurround)

           OUTPUT
            Name                : BSTR*'''
        return super(IOverview2, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapSurround.put_Name (from IMapSurround)

           INPUT
            Name                : BSTR'''
        return super(IOverview2, self).put_Name(Name)
    def get_Icon(self):
        '''Method IMapSurround.get_Icon (from IMapSurround)

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(IOverview2, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method IMapSurround.QueryBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(IOverview2, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method IMapSurround.FitToBounds (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IOverview2, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method IMapSurround.DelayEvents (from IMapSurround)

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IOverview2, self).DelayEvents(delay)
    def Refresh(self):
        '''Method IMapSurround.Refresh (from IMapSurround)'''
        return super(IOverview2, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method IMapSurround.Draw (from IMapSurround)

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(IOverview2, self).Draw(Display, TrackCancel, Bounds)
    AoiFillSymbol = property(get_AoiFillSymbol, put_AoiFillSymbol, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    Icon = property(get_Icon, None, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)
    OverlayGridLabelSymbol = property(get_OverlayGridLabelSymbol, put_OverlayGridLabelSymbol, None)
    OverlayGridLayer = property(get_OverlayGridLayer, put_OverlayGridLayer, None)

class IMapDescriptor(_esriCarto.IMapDescriptor):
    _IID = uuid.UUID('d9609d73-afea-4739-8f29-f5993823f4cf')

    def __init__(self, *args, **kw):
        super(IMapDescriptor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMapDescriptor.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapDescriptor, self).get_Name()
    def put_Name(self, Name):
        '''Method IMapDescriptor.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMapDescriptor, self).put_Name(Name)
    def get_FullExtent(self):
        '''Method IMapDescriptor.get_FullExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapDescriptor, self).get_FullExtent()
    def put_FullExtent(self, Extent):
        '''Method IMapDescriptor.put_FullExtent

           INPUT
            Extent              : IEnvelope*'''
        return super(IMapDescriptor, self).put_FullExtent(Extent)
    def get_Extent(self):
        '''Method IMapDescriptor.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IMapDescriptor, self).get_Extent()
    def put_Extent(self, Extent):
        '''Method IMapDescriptor.put_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IMapDescriptor, self).put_Extent(Extent)
    def get_SpatialReference(self):
        '''Method IMapDescriptor.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IMapDescriptor, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IMapDescriptor.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IMapDescriptor, self).putref_SpatialReference(SpatialReference)
    def get_Angle(self):
        '''Method IMapDescriptor.get_Angle

           OUTPUT
            angleDegrees        : double*'''
        return super(IMapDescriptor, self).get_Angle()
    def put_Angle(self, angleDegrees):
        '''Method IMapDescriptor.put_Angle

           INPUT
            angleDegrees        : double'''
        return super(IMapDescriptor, self).put_Angle(angleDegrees)
    def get_Layers(self):
        '''Method IMapDescriptor.get_Layers

           OUTPUT
            LayerDescriptors    : IArray**'''
        return super(IMapDescriptor, self).get_Layers()
    def put_Layers(self, LayerDescriptors):
        '''Method IMapDescriptor.put_Layers

           INPUT
            LayerDescriptors    : IArray*'''
        return super(IMapDescriptor, self).put_Layers(LayerDescriptors)
    def get_LayerOrder(self):
        '''Method IMapDescriptor.get_LayerOrder

           OUTPUT
            layerIds            : VARIANT*'''
        return super(IMapDescriptor, self).get_LayerOrder()
    def put_LayerOrder(self, layerIds):
        '''Method IMapDescriptor.put_LayerOrder

           INPUT
            layerIds            : VARIANT'''
        return super(IMapDescriptor, self).put_LayerOrder(layerIds)
    def get_CustomGraphics(self):
        '''Method IMapDescriptor.get_CustomGraphics

           OUTPUT
            Elements            : IArray**'''
        return super(IMapDescriptor, self).get_CustomGraphics()
    def put_CustomGraphics(self, Elements):
        '''Method IMapDescriptor.put_CustomGraphics

           INPUT
            Elements            : IArray*'''
        return super(IMapDescriptor, self).put_CustomGraphics(Elements)
    def get_LabelBarriers(self):
        '''Method IMapDescriptor.get_LabelBarriers

           OUTPUT
            Barriers            : IGeometryCollection**'''
        return super(IMapDescriptor, self).get_LabelBarriers()
    def put_LabelBarriers(self, Barriers):
        '''Method IMapDescriptor.put_LabelBarriers

           INPUT
            Barriers            : IGeometryCollection*'''
        return super(IMapDescriptor, self).put_LabelBarriers(Barriers)
    def get_MapScale(self):
        '''Method IMapDescriptor.get_MapScale

           OUTPUT
            MapScale            : double*'''
        return super(IMapDescriptor, self).get_MapScale()
    def put_MapScale(self, MapScale):
        '''Method IMapDescriptor.put_MapScale

           INPUT
            MapScale            : double'''
        return super(IMapDescriptor, self).put_MapScale(MapScale)
    def get_MapCenter(self):
        '''Method IMapDescriptor.get_MapCenter

           OUTPUT
            Center              : IPoint**'''
        return super(IMapDescriptor, self).get_MapCenter()
    def put_MapCenter(self, Center):
        '''Method IMapDescriptor.put_MapCenter

           INPUT
            Center              : IPoint*'''
        return super(IMapDescriptor, self).put_MapCenter(Center)
    def get_KeepAspectRatio(self):
        '''Method IMapDescriptor.get_KeepAspectRatio

           OUTPUT
            keep                : VARIANT_BOOL*'''
        return super(IMapDescriptor, self).get_KeepAspectRatio()
    def put_KeepAspectRatio(self, keep):
        '''Method IMapDescriptor.put_KeepAspectRatio

           INPUT
            keep                : VARIANT_BOOL'''
        return super(IMapDescriptor, self).put_KeepAspectRatio(keep)
    def get_BackgroundColor(self):
        '''Method IMapDescriptor.get_BackgroundColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescriptor, self).get_BackgroundColor()
    def put_BackgroundColor(self, Color):
        '''Method IMapDescriptor.put_BackgroundColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescriptor, self).put_BackgroundColor(Color)
    def get_TransparentColor(self):
        '''Method IMapDescriptor.get_TransparentColor

           OUTPUT
            Color               : IColor**'''
        return super(IMapDescriptor, self).get_TransparentColor()
    def put_TransparentColor(self, Color):
        '''Method IMapDescriptor.put_TransparentColor

           INPUT
            Color               : IColor*'''
        return super(IMapDescriptor, self).put_TransparentColor(Color)
    def AddMapSurround(self, surround, xPixelOrigin, yPixelOrigin, AnchorPoint):
        '''Method IMapDescriptor.AddMapSurround

           INPUTS
            surround            : IMapSurround*
            xPixelOrigin        : long
            yPixelOrigin        : long
            AnchorPoint         : esriAnchorPointEnum'''
        return super(IMapDescriptor, self).AddMapSurround(surround, xPixelOrigin, yPixelOrigin, AnchorPoint)
    def ClearMapSurrounds(self):
        '''Method IMapDescriptor.ClearMapSurrounds'''
        return super(IMapDescriptor, self).ClearMapSurrounds()
    def AddPixelGraphic(self, graphic):
        '''Method IMapDescriptor.AddPixelGraphic

           INPUT
            graphic             : IElement*'''
        return super(IMapDescriptor, self).AddPixelGraphic(graphic)
    def ClearPixelGraphics(self):
        '''Method IMapDescriptor.ClearPixelGraphics'''
        return super(IMapDescriptor, self).ClearPixelGraphics()
    Angle = property(get_Angle, put_Angle, None)
    BackgroundColor = property(get_BackgroundColor, put_BackgroundColor, None)
    CustomGraphics = property(get_CustomGraphics, put_CustomGraphics, None)
    Extent = property(get_Extent, put_Extent, None)
    FullExtent = property(get_FullExtent, put_FullExtent, None)
    KeepAspectRatio = property(get_KeepAspectRatio, put_KeepAspectRatio, None)
    LabelBarriers = property(get_LabelBarriers, put_LabelBarriers, None)
    LayerOrder = property(get_LayerOrder, put_LayerOrder, None)
    Layers = property(get_Layers, put_Layers, None)
    MapCenter = property(get_MapCenter, put_MapCenter, None)
    MapScale = property(get_MapScale, put_MapScale, None)
    Name = property(get_Name, put_Name, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TransparentColor = property(get_TransparentColor, put_TransparentColor, None)

class IMapServerLayout(_esriCarto.IMapServerLayout):
    _IID = uuid.UUID('545329c0-300b-46f3-9fb3-71f30ecfde62')
    def get_DefaultPageDescription(self):
        '''Method IMapServerLayout.get_DefaultPageDescription

           OUTPUT
            pageDesc            : IPageDescription**'''
        return super(IMapServerLayout, self).get_DefaultPageDescription()
    def ExportLayout(self, pageDesc, imageDesc):
        '''Method IMapServerLayout.ExportLayout

           INPUTS
            pageDesc            : IPageDescription*
            imageDesc           : IImageDescription*

           OUTPUT
            LayoutImage         : ILayoutImage**'''
        return super(IMapServerLayout, self).ExportLayout(pageDesc, imageDesc)
    def ExportLegend(self, Legend, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
        '''Method IMapServerLayout.ExportLegend

           INPUTS
            Legend              : ILegend*
            mapDesc             : IMapDescription*
            pMapDisplay         : IImageDisplay*
            BackgroundColor     : IColor*
            imageDesc           : IImageDescription*

           OUTPUT
            ImageResult         : IImageResult**'''
        return super(IMapServerLayout, self).ExportLegend(Legend, mapDesc, pMapDisplay, BackgroundColor, imageDesc)
    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
        '''Method IMapServerLayout.ExportScaleBar

           INPUTS
            Scalebar            : IScaleBar*
            mapDesc             : IMapDescription*
            pMapDisplay         : IImageDisplay*
            BackgroundColor     : IColor*
            imageDesc           : IImageDescription*

           OUTPUT
            ImageResult         : IImageResult**'''
        return super(IMapServerLayout, self).ExportScaleBar(Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc)
    def ExportNorthArrow(self, arrow, mapDesc, BackgroundColor, imageDesc):
        '''Method IMapServerLayout.ExportNorthArrow

           INPUTS
            arrow               : INorthArrow*
            mapDesc             : IMapDescription*
            BackgroundColor     : IColor*
            imageDesc           : IImageDescription*

           OUTPUT
            ImageResult         : IImageResult**'''
        return super(IMapServerLayout, self).ExportNorthArrow(arrow, mapDesc, BackgroundColor, imageDesc)
    def ToPagePoints(self, pageExtent, pageDisplay, screenXValues, screenYValues):
        '''Method IMapServerLayout.ToPagePoints

           INPUTS
            pageExtent          : IEnvelope*
            pageDisplay         : IImageDisplay*
            screenXValues       : ILongArray*
            screenYValues       : ILongArray*

           OUTPUT
            pagePoints          : IPointCollection**'''
        return super(IMapServerLayout, self).ToPagePoints(pageExtent, pageDisplay, screenXValues, screenYValues)
    def FromPagePoints(self, pageExtent, pageDisplay, pagePoints):
        '''Method IMapServerLayout.FromPagePoints

           INPUTS
            pageExtent          : IEnvelope*
            pageDisplay         : IImageDisplay*
            pagePoints          : IPointCollection*

           OUTPUTS
            screenXValues       : ILongArray**
            screenYValues       : ILongArray**'''
        return super(IMapServerLayout, self).FromPagePoints(pageExtent, pageDisplay, pagePoints)
    DefaultPageDescription = property(get_DefaultPageDescription, None, None)

class IMap(_esriCarto.IMap):
    _IID = uuid.UUID('e6bdaa75-4d35-11d0-98be-00805f7ced21')

    def __init__(self, *args, **kw):
        super(IMap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMap.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMap, self).get_Name()
    def put_Name(self, Name):
        '''Method IMap.put_Name

           INPUT
            Name                : BSTR'''
        return super(IMap, self).put_Name(Name)
    def get_Description(self):
        '''Method IMap.get_Description

           OUTPUT
            descr               : BSTR*'''
        return super(IMap, self).get_Description()
    def put_Description(self, descr):
        '''Method IMap.put_Description

           INPUT
            descr               : BSTR'''
        return super(IMap, self).put_Description(descr)
    def put_AreaOfInterest(self, _arg1):
        '''Method IMap.put_AreaOfInterest

           INPUT
            _arg1               : IEnvelope*'''
        return super(IMap, self).put_AreaOfInterest(_arg1)
    def get_LayerCount(self):
        '''Method IMap.get_LayerCount

           OUTPUT
            Count               : long*'''
        return super(IMap, self).get_LayerCount()
    def get_Layer(self, Index):
        '''Method IMap.get_Layer

           INPUT
            Index               : long

           OUTPUT
            Layer               : ILayer**'''
        return super(IMap, self).get_Layer(Index)
    def get_Layers(self, uid, recursive):
        '''Method IMap.get_Layers

           INPUTS
            uid                 : IUID*
            recursive           : VARIANT_BOOL

           OUTPUT
            Layers              : IEnumLayer**'''
        return super(IMap, self).get_Layers(uid, recursive)
    def get_MapSurroundCount(self):
        '''Method IMap.get_MapSurroundCount

           OUTPUT
            Count               : long*'''
        return super(IMap, self).get_MapSurroundCount()
    def get_MapSurround(self, Index):
        '''Method IMap.get_MapSurround

           INPUT
            Index               : long

           OUTPUT
            MapSurround         : IMapSurround**'''
        return super(IMap, self).get_MapSurround(Index)
    def get_MapUnits(self):
        '''Method IMap.get_MapUnits

           OUTPUT
            unitsCode           : esriUnits*'''
        return super(IMap, self).get_MapUnits()
    def put_MapUnits(self, unitsCode):
        '''Method IMap.put_MapUnits

           INPUT
            unitsCode           : esriUnits'''
        return super(IMap, self).put_MapUnits(unitsCode)
    def get_DistanceUnits(self):
        '''Method IMap.get_DistanceUnits

           OUTPUT
            unitsCode           : esriUnits*'''
        return super(IMap, self).get_DistanceUnits()
    def put_DistanceUnits(self, unitsCode):
        '''Method IMap.put_DistanceUnits

           INPUT
            unitsCode           : esriUnits'''
        return super(IMap, self).put_DistanceUnits(unitsCode)
    def get_SpatialReference(self):
        '''Method IMap.get_SpatialReference

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IMap, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IMap.putref_SpatialReference

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IMap, self).putref_SpatialReference(spatialRef)
    def get_MapScale(self):
        '''Method IMap.get_MapScale

           OUTPUT
            scaleRF             : double*'''
        return super(IMap, self).get_MapScale()
    def put_MapScale(self, scaleRF):
        '''Method IMap.put_MapScale

           INPUT
            scaleRF             : double'''
        return super(IMap, self).put_MapScale(scaleRF)
    def get_ReferenceScale(self):
        '''Method IMap.get_ReferenceScale

           OUTPUT
            scaleRF             : double*'''
        return super(IMap, self).get_ReferenceScale()
    def put_ReferenceScale(self, scaleRF):
        '''Method IMap.put_ReferenceScale

           INPUT
            scaleRF             : double'''
        return super(IMap, self).put_ReferenceScale(scaleRF)
    def get_IsFramed(self):
        '''Method IMap.get_IsFramed

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMap, self).get_IsFramed()
    def put_IsFramed(self, flag):
        '''Method IMap.put_IsFramed

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMap, self).put_IsFramed(flag)
    def get_ClipGeometry(self):
        '''Method IMap.get_ClipGeometry

           OUTPUT
            ClipGeometry        : IGeometry**'''
        return super(IMap, self).get_ClipGeometry()
    def put_ClipGeometry(self, ClipGeometry):
        '''Method IMap.put_ClipGeometry

           INPUT
            ClipGeometry        : IGeometry*'''
        return super(IMap, self).put_ClipGeometry(ClipGeometry)
    def AddLayer(self, Layer):
        '''Method IMap.AddLayer

           INPUT
            Layer               : ILayer*'''
        return super(IMap, self).AddLayer(Layer)
    def AddLayers(self, Layers, autoArrange):
        '''Method IMap.AddLayers

           INPUTS
            Layers              : IEnumLayer*
            autoArrange         : VARIANT_BOOL'''
        return super(IMap, self).AddLayers(Layers, autoArrange)
    def DeleteLayer(self, Layer):
        '''Method IMap.DeleteLayer

           INPUT
            Layer               : ILayer*'''
        return super(IMap, self).DeleteLayer(Layer)
    def MoveLayer(self, Layer, toIndex):
        '''Method IMap.MoveLayer

           INPUTS
            Layer               : ILayer*
            toIndex             : long'''
        return super(IMap, self).MoveLayer(Layer, toIndex)
    def ClearLayers(self):
        '''Method IMap.ClearLayers'''
        return super(IMap, self).ClearLayers()
    def CreateMapSurround(self, clsid, optionalStyle):
        '''Method IMap.CreateMapSurround

           INPUTS
            clsid               : IUID*
            optionalStyle       : IMapSurround*

           OUTPUT
            MapSurround         : IMapSurround**'''
        return super(IMap, self).CreateMapSurround(clsid, optionalStyle)
    def AddMapSurround(self, MapSurround):
        '''Method IMap.AddMapSurround

           INPUT
            MapSurround         : IMapSurround*'''
        return super(IMap, self).AddMapSurround(MapSurround)
    def DeleteMapSurround(self, MapSurround):
        '''Method IMap.DeleteMapSurround

           INPUT
            MapSurround         : IMapSurround*'''
        return super(IMap, self).DeleteMapSurround(MapSurround)
    def ClearMapSurrounds(self):
        '''Method IMap.ClearMapSurrounds'''
        return super(IMap, self).ClearMapSurrounds()
    def ComputeDistance(self, p1, p2):
        '''Method IMap.ComputeDistance

           INPUTS
            p1                  : IPoint*
            p2                  : IPoint*

           OUTPUT
            Distance            : double*'''
        return super(IMap, self).ComputeDistance(p1, p2)
    def get_BasicGraphicsLayer(self):
        '''Method IMap.get_BasicGraphicsLayer

           OUTPUT
            GraphicsLayer       : IGraphicsLayer**'''
        return super(IMap, self).get_BasicGraphicsLayer()
    def get_ActiveGraphicsLayer(self):
        '''Method IMap.get_ActiveGraphicsLayer

           OUTPUT
            GraphicsLayer       : ILayer**'''
        return super(IMap, self).get_ActiveGraphicsLayer()
    def putref_ActiveGraphicsLayer(self, GraphicsLayer):
        '''Method IMap.putref_ActiveGraphicsLayer

           INPUT
            GraphicsLayer       : ILayer*'''
        return super(IMap, self).putref_ActiveGraphicsLayer(GraphicsLayer)
    def get_ClipBorder(self):
        '''Method IMap.get_ClipBorder

           OUTPUT
            Border              : IBorder**'''
        return super(IMap, self).get_ClipBorder()
    def put_ClipBorder(self, Border):
        '''Method IMap.put_ClipBorder

           INPUT
            Border              : IBorder*'''
        return super(IMap, self).put_ClipBorder(Border)
    def SelectFeature(self, Layer, Feature):
        '''Method IMap.SelectFeature

           INPUTS
            Layer               : ILayer*
            Feature             : IFeature*'''
        return super(IMap, self).SelectFeature(Layer, Feature)
    def get_SelectionCount(self):
        '''Method IMap.get_SelectionCount

           OUTPUT
            Count               : long*'''
        return super(IMap, self).get_SelectionCount()
    def ClearSelection(self):
        '''Method IMap.ClearSelection'''
        return super(IMap, self).ClearSelection()
    def get_FeatureSelection(self):
        '''Method IMap.get_FeatureSelection

           OUTPUT
            Selection           : ISelection**'''
        return super(IMap, self).get_FeatureSelection()
    def putref_FeatureSelection(self, Selection):
        '''Method IMap.putref_FeatureSelection

           INPUT
            Selection           : ISelection*'''
        return super(IMap, self).putref_FeatureSelection(Selection)
    def SelectByShape(self, Shape, env, justOne):
        '''Method IMap.SelectByShape

           INPUTS
            Shape               : IGeometry*
            env                 : ISelectionEnvironment*
            justOne             : VARIANT_BOOL'''
        return super(IMap, self).SelectByShape(Shape, env, justOne)
    def DelayEvents(self, delay):
        '''Method IMap.DelayEvents

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IMap, self).DelayEvents(delay)
    def SetPageSize(self, widthInches, heightInches):
        '''Method IMap.SetPageSize

           INPUTS
            widthInches         : double
            heightInches        : double'''
        return super(IMap, self).SetPageSize(widthInches, heightInches)
    def GetPageSize(self):
        '''Method IMap.GetPageSize

           OUTPUTS
            widthInches         : double*
            heightInches        : double*'''
        return super(IMap, self).GetPageSize()
    def get_Barriers(self, pExtent):
        '''Method IMap.get_Barriers

           INPUT
            pExtent             : IEnvelope*

           OUTPUT
            Barriers            : IBarrierCollection**'''
        return super(IMap, self).get_Barriers(pExtent)
    def put_UseSymbolLevels(self, flag):
        '''Method IMap.put_UseSymbolLevels

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IMap, self).put_UseSymbolLevels(flag)
    def get_UseSymbolLevels(self):
        '''Method IMap.get_UseSymbolLevels

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IMap, self).get_UseSymbolLevels()
    def put_Expanded(self, Expanded):
        '''Method IMap.put_Expanded

           INPUT
            Expanded            : VARIANT_BOOL'''
        return super(IMap, self).put_Expanded(Expanded)
    def get_Expanded(self):
        '''Method IMap.get_Expanded

           OUTPUT
            Expanded            : VARIANT_BOOL*'''
        return super(IMap, self).get_Expanded()
    def putref_AnnotationEngine(self, AnnotateMap):
        '''Method IMap.putref_AnnotationEngine

           INPUT
            AnnotateMap         : IAnnotateMap*'''
        return super(IMap, self).putref_AnnotationEngine(AnnotateMap)
    def get_AnnotationEngine(self):
        '''Method IMap.get_AnnotationEngine

           OUTPUT
            AnnotateMap         : IAnnotateMap**'''
        return super(IMap, self).get_AnnotationEngine()
    def RecalcFullExtent(self):
        '''Method IMap.RecalcFullExtent'''
        return super(IMap, self).RecalcFullExtent()
    def DelayDrawing(self, delay):
        '''Method IMap.DelayDrawing

           INPUT
            delay               : VARIANT_BOOL'''
        return super(IMap, self).DelayDrawing(delay)
    def put_SpatialReferenceLocked(self, Locked):
        '''Method IMap.put_SpatialReferenceLocked

           INPUT
            Locked              : VARIANT_BOOL'''
        return super(IMap, self).put_SpatialReferenceLocked(Locked)
    def get_SpatialReferenceLocked(self):
        '''Method IMap.get_SpatialReferenceLocked

           OUTPUT
            Locked              : VARIANT_BOOL*'''
        return super(IMap, self).get_SpatialReferenceLocked()
    ActiveGraphicsLayer = property(get_ActiveGraphicsLayer, putref_ActiveGraphicsLayer, None)
    AnnotationEngine = property(get_AnnotationEngine, putref_AnnotationEngine, None)
    AreaOfInterest = property(None, put_AreaOfInterest, None)
    BasicGraphicsLayer = property(get_BasicGraphicsLayer, None, None)
    ClipBorder = property(get_ClipBorder, put_ClipBorder, None)
    ClipGeometry = property(get_ClipGeometry, put_ClipGeometry, None)
    Description = property(get_Description, put_Description, None)
    DistanceUnits = property(get_DistanceUnits, put_DistanceUnits, None)
    Expanded = property(get_Expanded, put_Expanded, None)
    FeatureSelection = property(get_FeatureSelection, putref_FeatureSelection, None)
    IsFramed = property(get_IsFramed, put_IsFramed, None)
    LayerCount = property(get_LayerCount, None, None)
    MapScale = property(get_MapScale, put_MapScale, None)
    MapSurroundCount = property(get_MapSurroundCount, None, None)
    MapUnits = property(get_MapUnits, put_MapUnits, None)
    Name = property(get_Name, put_Name, None)
    ReferenceScale = property(get_ReferenceScale, put_ReferenceScale, None)
    SelectionCount = property(get_SelectionCount, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    SpatialReferenceLocked = property(get_SpatialReferenceLocked, put_SpatialReferenceLocked, None)
    UseSymbolLevels = property(get_UseSymbolLevels, put_UseSymbolLevels, None)
    Barriers = IndexProperty(get_Barriers, None)
    Layer = IndexProperty(get_Layer, None)
    MapSurround = IndexProperty(get_MapSurround, None)

class IAnnotateMap(_esriCarto.IAnnotateMap):
    _IID = uuid.UUID('8c439003-14ec-11d2-a27e-080009b6f22b')
    def get_Name(self):
        '''Method IAnnotateMap.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IAnnotateMap, self).get_Name()
    def get_FeatureLayerPropertiesID(self):
        '''Method IAnnotateMap.get_FeatureLayerPropertiesID

           OUTPUT
            uid                 : IUID**'''
        return super(IAnnotateMap, self).get_FeatureLayerPropertiesID()
    def Label(self, annoMapCmdProps, Map, TrackCancel):
        '''Method IAnnotateMap.Label

           INPUTS
            annoMapCmdProps     : IAnnotateMapProperties*
            Map                 : IMap*
            TrackCancel         : ITrackCancel*'''
        return super(IAnnotateMap, self).Label(annoMapCmdProps, Map, TrackCancel)
    def Draw(self, Display, annoMapCmdProps, Map, TrackCancel):
        '''Method IAnnotateMap.Draw

           INPUTS
            Display             : IDisplay*
            annoMapCmdProps     : IAnnotateMapProperties*
            Map                 : IMap*
            TrackCancel         : ITrackCancel*'''
        return super(IAnnotateMap, self).Draw(Display, annoMapCmdProps, Map, TrackCancel)
    FeatureLayerPropertiesID = property(get_FeatureLayerPropertiesID, None, None)
    Name = property(get_Name, None, None)

class IExportInfoGenerator(_esriCarto.IExportInfoGenerator):
    _IID = uuid.UUID('520c94fd-8858-4ead-b72a-cb36515bdaee')
    def BeginText(self, pDisplay, Type, Kerning, Tracking, WidthScale, WordSpace, LineLeading, Text):
        '''Method IExportInfoGenerator.BeginText

           INPUTS
            pDisplay            : IDisplay*
            Type                : long
            Kerning             : long
            Tracking            : double
            WidthScale          : double
            WordSpace           : double
            LineLeading         : double
            Text                : BSTR'''
        return super(IExportInfoGenerator, self).BeginText(pDisplay, Type, Kerning, Tracking, WidthScale, WordSpace, LineLeading, Text)
    def EndText(self, pDisplay):
        '''Method IExportInfoGenerator.EndText

           INPUT
            pDisplay            : IDisplay*'''
        return super(IExportInfoGenerator, self).EndText(pDisplay)
    def SetCmykColor(self, pDisplay, cmykColor, SpotColor, ColorType):
        '''Method IExportInfoGenerator.SetCmykColor

           INPUTS
            pDisplay            : IDisplay*
            cmykColor           : OLE_COLOR
            SpotColor           : VARIANT_BOOL
            ColorType           : long'''
        return super(IExportInfoGenerator, self).SetCmykColor(pDisplay, cmykColor, SpotColor, ColorType)
    def BeginLayer(self, pDisplay, Comment):
        '''Method IExportInfoGenerator.BeginLayer

           INPUTS
            pDisplay            : IDisplay*
            Comment             : BSTR'''
        return super(IExportInfoGenerator, self).BeginLayer(pDisplay, Comment)
    def BeginLayerWithName(self, pDisplay, pLayer):
        '''Method IExportInfoGenerator.BeginLayerWithName

           INPUTS
            pDisplay            : IDisplay*
            pLayer              : ILayer*'''
        return super(IExportInfoGenerator, self).BeginLayerWithName(pDisplay, pLayer)
    def BeginLayerWithNameAndPhase(self, pDisplay, pLayer, viewDrawPhase):
        '''Method IExportInfoGenerator.BeginLayerWithNameAndPhase

           INPUTS
            pDisplay            : IDisplay*
            pLayer              : ILayer*
            viewDrawPhase       : esriViewDrawPhase'''
        return super(IExportInfoGenerator, self).BeginLayerWithNameAndPhase(pDisplay, pLayer, viewDrawPhase)
    def EndLayer(self, pDisplay):
        '''Method IExportInfoGenerator.EndLayer

           INPUT
            pDisplay            : IDisplay*'''
        return super(IExportInfoGenerator, self).EndLayer(pDisplay)
    def BeginGroup(self, pDisplay, Comment):
        '''Method IExportInfoGenerator.BeginGroup

           INPUTS
            pDisplay            : IDisplay*
            Comment             : BSTR'''
        return super(IExportInfoGenerator, self).BeginGroup(pDisplay, Comment)
    def EndGroup(self, pDisplay):
        '''Method IExportInfoGenerator.EndGroup

           INPUT
            pDisplay            : IDisplay*'''
        return super(IExportInfoGenerator, self).EndGroup(pDisplay)
    def BeginMap(self, pDisplay, hDC, pMap):
        '''Method IExportInfoGenerator.BeginMap

           INPUTS
            pDisplay            : IDisplay*
            hDC                 : OLE_HANDLE
            pMap                : IMap*'''
        return super(IExportInfoGenerator, self).BeginMap(pDisplay, hDC, pMap)
    def EndMap(self, hDC):
        '''Method IExportInfoGenerator.EndMap

           INPUT
            hDC                 : OLE_HANDLE'''
        return super(IExportInfoGenerator, self).EndMap(hDC)
    def BeginPageLayout(self, hDC, FocusMap):
        '''Method IExportInfoGenerator.BeginPageLayout

           INPUTS
            hDC                 : OLE_HANDLE
            FocusMap            : long'''
        return super(IExportInfoGenerator, self).BeginPageLayout(hDC, FocusMap)
    def EndPageLayout(self, hDC):
        '''Method IExportInfoGenerator.EndPageLayout

           INPUT
            hDC                 : OLE_HANDLE'''
        return super(IExportInfoGenerator, self).EndPageLayout(hDC)

class IAnnotateMap2(_esriCarto.IAnnotateMap2):
    _IID = uuid.UUID('b3b6436f-87e8-42a9-98a7-0f301fc302fd')
    def get_Name(self):
        '''Method IAnnotateMap2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IAnnotateMap2, self).get_Name()
    def get_FeatureLayerPropertiesID(self):
        '''Method IAnnotateMap2.get_FeatureLayerPropertiesID

           OUTPUT
            uid                 : IUID**'''
        return super(IAnnotateMap2, self).get_FeatureLayerPropertiesID()
    def Label(self, overposterProps, annoMapCmdProps, Map, TrackCancel):
        '''Method IAnnotateMap2.Label

           INPUTS
            overposterProps     : IOverposterProperties*
            annoMapCmdProps     : IAnnotateMapProperties*
            Map                 : IMap*
            TrackCancel         : ITrackCancel*'''
        return super(IAnnotateMap2, self).Label(overposterProps, annoMapCmdProps, Map, TrackCancel)
    def Draw(self, Display, overposterProps, annoMapCmdProps, Map, TrackCancel):
        '''Method IAnnotateMap2.Draw

           INPUTS
            Display             : IDisplay*
            overposterProps     : IOverposterProperties*
            annoMapCmdProps     : IAnnotateMapProperties*
            Map                 : IMap*
            TrackCancel         : ITrackCancel*'''
        return super(IAnnotateMap2, self).Draw(Display, overposterProps, annoMapCmdProps, Map, TrackCancel)
    def get_OverposterPropertiesID(self):
        '''Method IAnnotateMap2.get_OverposterPropertiesID

           OUTPUT
            uid                 : IUID**'''
        return super(IAnnotateMap2, self).get_OverposterPropertiesID()
    FeatureLayerPropertiesID = property(get_FeatureLayerPropertiesID, None, None)
    Name = property(get_Name, None, None)
    OverposterPropertiesID = property(get_OverposterPropertiesID, None, None)

class ILabelCache(_esriCarto.ILabelCache):
    _IID = uuid.UUID('ed758af4-ff98-4c14-bba4-e7580433afd6')
    def Init(self, Map):
        '''Method ILabelCache.Init

           INPUT
            Map                 : IMap*'''
        return super(ILabelCache, self).Init(Map)
    def Empty(self):
        '''Method ILabelCache.Empty'''
        return super(ILabelCache, self).Empty()
    def AddClass(self, classID, pLayerProps):
        '''Method ILabelCache.AddClass

           INPUTS
            classID             : long
            pLayerProps         : ILabelEngineLayerProperties*'''
        return super(ILabelCache, self).AddClass(classID, pLayerProps)
    def get_ClassCount(self):
        '''Method ILabelCache.get_ClassCount

           OUTPUT
            Count               : long*'''
        return super(ILabelCache, self).get_ClassCount()
    def QueryClass(self, Index):
        '''Method ILabelCache.QueryClass

           INPUT
            Index               : long

           OUTPUTS
            classID             : long*
            ClassName           : BSTR*
            FeatureLayer        : IFeatureLayer**
            TextSymbol          : ITextSymbol**'''
        return super(ILabelCache, self).QueryClass(Index)
    def AddLabel(self, placedObject, AnchorPoint, pEnvelope):
        '''Method ILabelCache.AddLabel

           INPUTS
            placedObject        : IPlacedObject3*
            AnchorPoint         : IPoint*
            pEnvelope           : IEnvelope*'''
        return super(ILabelCache, self).AddLabel(placedObject, AnchorPoint, pEnvelope)
    def get_PlacedLabelCount(self):
        '''Method ILabelCache.get_PlacedLabelCount

           OUTPUT
            Count               : long*'''
        return super(ILabelCache, self).get_PlacedLabelCount()
    def GetPlacedLabel(self, Index):
        '''Method ILabelCache.GetPlacedLabel

           INPUT
            Index               : long

           OUTPUTS
            classID             : long*
            Label               : BSTR*
            geom                : IGeometry**
            Angle               : double*
            AnchorPoint         : IPoint**
            mbr                 : IEnvelope**'''
        return super(ILabelCache, self).GetPlacedLabel(Index)
    def get_UnplacedLabelCount(self):
        '''Method ILabelCache.get_UnplacedLabelCount

           OUTPUT
            Count               : long*'''
        return super(ILabelCache, self).get_UnplacedLabelCount()
    def GetUnplacedLabel(self, Index):
        '''Method ILabelCache.GetUnplacedLabel

           INPUT
            Index               : long

           OUTPUTS
            classID             : long*
            Label               : BSTR*
            geom                : IGeometry**
            Angle               : double*
            AnchorPoint         : IPoint**
            mbr                 : IEnvelope**'''
        return super(ILabelCache, self).GetUnplacedLabel(Index)
    def PutDisplaySettings(self, Scale, dataframeRotation):
        '''Method ILabelCache.PutDisplaySettings

           INPUTS
            Scale               : double
            dataframeRotation   : double'''
        return super(ILabelCache, self).PutDisplaySettings(Scale, dataframeRotation)
    def GetDisplaySettings(self, dataframeRotation):
        '''Method ILabelCache.GetDisplaySettings

           INPUT
            dataframeRotation   : double*

           OUTPUT
            Scale               : double*'''
        return super(ILabelCache, self).GetDisplaySettings(dataframeRotation)
    ClassCount = property(get_ClassCount, None, None)
    PlacedLabelCount = property(get_PlacedLabelCount, None, None)
    UnplacedLabelCount = property(get_UnplacedLabelCount, None, None)

class IStandardAnnotateMap(_esriCarto.IStandardAnnotateMap):
    _IID = uuid.UUID('716554ed-a703-41b4-bbdd-0cbf06c9bf66')

    def __init__(self, *args, **kw):
        super(IStandardAnnotateMap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RecordLabelsToCache(self):
        '''Method IStandardAnnotateMap.get_RecordLabelsToCache

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IStandardAnnotateMap, self).get_RecordLabelsToCache()
    def put_RecordLabelsToCache(self, flag):
        '''Method IStandardAnnotateMap.put_RecordLabelsToCache

           INPUT
            flag                : VARIANT_BOOL'''
        return super(IStandardAnnotateMap, self).put_RecordLabelsToCache(flag)
    def get_LabelCache(self):
        '''Method IStandardAnnotateMap.get_LabelCache

           OUTPUT
            LabelCache          : ILabelCache**'''
        return super(IStandardAnnotateMap, self).get_LabelCache()
    LabelCache = property(get_LabelCache, None, None)
    RecordLabelsToCache = property(get_RecordLabelsToCache, put_RecordLabelsToCache, None)

class IActiveView(_esriCarto.IActiveView):
    _IID = uuid.UUID('dd94d76b-836d-11d0-87ec-080009ec732a')

    def __init__(self, *args, **kw):
        super(IActiveView, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FullExtent(self):
        '''Method IActiveView.get_FullExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IActiveView, self).get_FullExtent()
    def put_FullExtent(self, Extent):
        '''Method IActiveView.put_FullExtent

           INPUT
            Extent              : IEnvelope*'''
        return super(IActiveView, self).put_FullExtent(Extent)
    def get_Extent(self):
        '''Method IActiveView.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IActiveView, self).get_Extent()
    def put_Extent(self, Extent):
        '''Method IActiveView.put_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IActiveView, self).put_Extent(Extent)
    def get_ScreenDisplay(self):
        '''Method IActiveView.get_ScreenDisplay

           OUTPUT
            screen              : IScreenDisplay**'''
        return super(IActiveView, self).get_ScreenDisplay()
    def get_GraphicsContainer(self):
        '''Method IActiveView.get_GraphicsContainer

           OUTPUT
            GraphicsContainer   : IGraphicsContainer**'''
        return super(IActiveView, self).get_GraphicsContainer()
    def get_FocusMap(self):
        '''Method IActiveView.get_FocusMap

           OUTPUT
            activeMap           : IMap**'''
        return super(IActiveView, self).get_FocusMap()
    def putref_FocusMap(self, activeMap):
        '''Method IActiveView.putref_FocusMap

           INPUT
            activeMap           : IMap*'''
        return super(IActiveView, self).putref_FocusMap(activeMap)
    def get_IsMapActivated(self):
        '''Method IActiveView.get_IsMapActivated

           OUTPUT
            IsMapActivated      : VARIANT_BOOL*'''
        return super(IActiveView, self).get_IsMapActivated()
    def put_IsMapActivated(self, IsMapActivated):
        '''Method IActiveView.put_IsMapActivated

           INPUT
            IsMapActivated      : VARIANT_BOOL'''
        return super(IActiveView, self).put_IsMapActivated(IsMapActivated)
    def get_Selection(self):
        '''Method IActiveView.get_Selection

           OUTPUT
            Selection           : ISelection**'''
        return super(IActiveView, self).get_Selection()
    def putref_Selection(self, Selection):
        '''Method IActiveView.putref_Selection

           INPUT
            Selection           : ISelection*'''
        return super(IActiveView, self).putref_Selection(Selection)
    def get_TipText(self, x, y):
        '''Method IActiveView.get_TipText

           INPUTS
            x                   : double
            y                   : double

           OUTPUT
            TipText             : BSTR*'''
        return super(IActiveView, self).get_TipText(x, y)
    def get_ExportFrame(self):
        '''Method IActiveView.get_ExportFrame

           OUTPUT
            ExportFrame         : tagRECT*'''
        return super(IActiveView, self).get_ExportFrame()
    def get_ShowScrollBars(self):
        '''Method IActiveView.get_ShowScrollBars

           OUTPUT
            ShowScrollBars      : VARIANT_BOOL*'''
        return super(IActiveView, self).get_ShowScrollBars()
    def put_ShowScrollBars(self, ShowScrollBars):
        '''Method IActiveView.put_ShowScrollBars

           INPUT
            ShowScrollBars      : VARIANT_BOOL'''
        return super(IActiveView, self).put_ShowScrollBars(ShowScrollBars)
    def get_ShowRulers(self):
        '''Method IActiveView.get_ShowRulers

           OUTPUT
            ShowRulers          : VARIANT_BOOL*'''
        return super(IActiveView, self).get_ShowRulers()
    def put_ShowRulers(self, ShowRulers):
        '''Method IActiveView.put_ShowRulers

           INPUT
            ShowRulers          : VARIANT_BOOL'''
        return super(IActiveView, self).put_ShowRulers(ShowRulers)
    def get_ShowSelection(self):
        '''Method IActiveView.get_ShowSelection

           OUTPUT
            ShowRulers          : VARIANT_BOOL*'''
        return super(IActiveView, self).get_ShowSelection()
    def put_ShowSelection(self, ShowRulers):
        '''Method IActiveView.put_ShowSelection

           INPUT
            ShowRulers          : VARIANT_BOOL'''
        return super(IActiveView, self).put_ShowSelection(ShowRulers)
    def get_ExtentStack(self):
        '''Method IActiveView.get_ExtentStack

           OUTPUT
            ExtentStack         : IExtentStack**'''
        return super(IActiveView, self).get_ExtentStack()
    def get_ScreenCacheID(self, phase, Data):
        '''Method IActiveView.get_ScreenCacheID

           INPUTS
            phase               : esriViewDrawPhase
            Data                : IUnknown*

           OUTPUT
            cacheID             : short*'''
        return super(IActiveView, self).get_ScreenCacheID(phase, Data)
    def HitTestMap(self, Location):
        '''Method IActiveView.HitTestMap

           INPUT
            Location            : IPoint*

           OUTPUT
            Map                 : IMap**'''
        return super(IActiveView, self).HitTestMap(Location)
    def IsActive(self):
        '''Method IActiveView.IsActive

           OUTPUT
            IsActive            : VARIANT_BOOL*'''
        return super(IActiveView, self).IsActive()
    def Activate(self, hWnd):
        '''Method IActiveView.Activate

           INPUT
            hWnd                : OLE_HANDLE'''
        return super(IActiveView, self).Activate(hWnd)
    def Deactivate(self):
        '''Method IActiveView.Deactivate'''
        return super(IActiveView, self).Deactivate()
    def Draw(self, hDC, TrackCancel):
        '''Method IActiveView.Draw

           INPUTS
            hDC                 : OLE_HANDLE
            TrackCancel         : ITrackCancel*'''
        return super(IActiveView, self).Draw(hDC, TrackCancel)
    def Output(self, hDC, Dpi, pixelBounds, VisibleBounds, TrackCancel):
        '''Method IActiveView.Output

           INPUTS
            hDC                 : OLE_HANDLE
            Dpi                 : long
            pixelBounds         : tagRECT*
            VisibleBounds       : IEnvelope*
            TrackCancel         : ITrackCancel*'''
        return super(IActiveView, self).Output(hDC, Dpi, pixelBounds, VisibleBounds, TrackCancel)
    def Refresh(self):
        '''Method IActiveView.Refresh'''
        return super(IActiveView, self).Refresh()
    def PartialRefresh(self, phase, Data, envelope):
        '''Method IActiveView.PartialRefresh

           INPUTS
            phase               : esriViewDrawPhase
            Data                : IUnknown*
            envelope            : IEnvelope*'''
        return super(IActiveView, self).PartialRefresh(phase, Data, envelope)
    def Clear(self):
        '''Method IActiveView.Clear'''
        return super(IActiveView, self).Clear()
    def PrinterChanged(self, Printer):
        '''Method IActiveView.PrinterChanged

           INPUT
            Printer             : IPrinter*'''
        return super(IActiveView, self).PrinterChanged(Printer)
    def ContentsChanged(self):
        '''Method IActiveView.ContentsChanged'''
        return super(IActiveView, self).ContentsChanged()
    def OnMessage(self, msg, wParam, lParam):
        '''Method IActiveView.OnMessage

           INPUTS
            msg                 : unsignedlong
            wParam              : UINT_PTR
            lParam              : LONG_PTR'''
        return super(IActiveView, self).OnMessage(msg, wParam, lParam)
    def GetContextMenu(self, x, y):
        '''Method IActiveView.GetContextMenu

           INPUTS
            x                   : double
            y                   : double

           OUTPUT
            clsidMenu           : IUID**'''
        return super(IActiveView, self).GetContextMenu(x, y)
    ExportFrame = property(get_ExportFrame, None, None)
    Extent = property(get_Extent, put_Extent, None)
    ExtentStack = property(get_ExtentStack, None, None)
    FocusMap = property(get_FocusMap, putref_FocusMap, None)
    FullExtent = property(get_FullExtent, put_FullExtent, None)
    GraphicsContainer = property(get_GraphicsContainer, None, None)
    IsMapActivated = property(get_IsMapActivated, put_IsMapActivated, None)
    ScreenDisplay = property(get_ScreenDisplay, None, None)
    Selection = property(get_Selection, putref_Selection, None)
    ShowRulers = property(get_ShowRulers, put_ShowRulers, None)
    ShowScrollBars = property(get_ShowScrollBars, put_ShowScrollBars, None)
    ShowSelection = property(get_ShowSelection, put_ShowSelection, None)

class IActiveViewEvents(_esriCarto.IActiveViewEvents):
    _IID = uuid.UUID('e79c5940-52dd-11d0-98be-00805f7ced21')
    def ContentsChanged(self):
        '''Method IActiveViewEvents.ContentsChanged'''
        return super(IActiveViewEvents, self).ContentsChanged()
    def ContentsCleared(self):
        '''Method IActiveViewEvents.ContentsCleared'''
        return super(IActiveViewEvents, self).ContentsCleared()
    def ItemAdded(self, Item):
        '''Method IActiveViewEvents.ItemAdded

           INPUT
            Item                : VARIANT'''
        return super(IActiveViewEvents, self).ItemAdded(Item)
    def ItemDeleted(self, Item):
        '''Method IActiveViewEvents.ItemDeleted

           INPUT
            Item                : VARIANT'''
        return super(IActiveViewEvents, self).ItemDeleted(Item)
    def ItemReordered(self, Item, toIndex):
        '''Method IActiveViewEvents.ItemReordered

           INPUTS
            Item                : VARIANT
            toIndex             : long'''
        return super(IActiveViewEvents, self).ItemReordered(Item, toIndex)
    def SelectionChanged(self):
        '''Method IActiveViewEvents.SelectionChanged'''
        return super(IActiveViewEvents, self).SelectionChanged()
    def ViewRefreshed(self, View, phase, Data, envelope):
        '''Method IActiveViewEvents.ViewRefreshed

           INPUTS
            View                : IActiveView*
            phase               : esriViewDrawPhase
            Data                : VARIANT
            envelope            : IEnvelope*'''
        return super(IActiveViewEvents, self).ViewRefreshed(View, phase, Data, envelope)
    def AfterDraw(self, Display, phase):
        '''Method IActiveViewEvents.AfterDraw

           INPUTS
            Display             : IDisplay*
            phase               : esriViewDrawPhase'''
        return super(IActiveViewEvents, self).AfterDraw(Display, phase)
    def AfterItemDraw(self, Index, Display, phase):
        '''Method IActiveViewEvents.AfterItemDraw

           INPUTS
            Index               : short
            Display             : IDisplay*
            phase               : esriDrawPhase'''
        return super(IActiveViewEvents, self).AfterItemDraw(Index, Display, phase)
    def FocusMapChanged(self):
        '''Method IActiveViewEvents.FocusMapChanged'''
        return super(IActiveViewEvents, self).FocusMapChanged()
    def SpatialReferenceChanged(self):
        '''Method IActiveViewEvents.SpatialReferenceChanged'''
        return super(IActiveViewEvents, self).SpatialReferenceChanged()

class IConvertLabelsToAnnotation(_esriCarto.IConvertLabelsToAnnotation):
    _IID = uuid.UUID('0ae13bc3-f821-4ae4-8b20-1ece97f78874')
    def Initialize(self, pMap, storageType, whichFeatures, generateUnplacedAnnotation, pTrackCancel, pAnnotationErrorEvents):
        '''Method IConvertLabelsToAnnotation.Initialize

           INPUTS
            pMap                : IMap*
            storageType         : esriAnnotationStorageType
            whichFeatures       : esriLabelWhichFeatures
            generateUnplacedAnnotation: VARIANT_BOOL
            pTrackCancel        : ITrackCancel*
            pAnnotationErrorEvents: IAnnotationErrorEvents*'''
        return super(IConvertLabelsToAnnotation, self).Initialize(pMap, storageType, whichFeatures, generateUnplacedAnnotation, pTrackCancel, pAnnotationErrorEvents)
    def AddFeatureLayer(self, pFeatureLayer, annoLayerName, pFeatureWorkspace, pFeatureDataset, FeatureLinked, appendMode, RequireSymbolID, AutoCreate, autoUpdate, configKeyword):
        '''Method IConvertLabelsToAnnotation.AddFeatureLayer

           INPUTS
            pFeatureLayer       : IFeatureLayer*
            annoLayerName       : BSTR
            pFeatureWorkspace   : IFeatureWorkspace*
            pFeatureDataset     : IFeatureDataset*
            FeatureLinked       : VARIANT_BOOL
            appendMode          : VARIANT_BOOL
            RequireSymbolID     : VARIANT_BOOL
            AutoCreate          : VARIANT_BOOL
            autoUpdate          : VARIANT_BOOL
            configKeyword       : BSTR'''
        return super(IConvertLabelsToAnnotation, self).AddFeatureLayer(pFeatureLayer, annoLayerName, pFeatureWorkspace, pFeatureDataset, FeatureLinked, appendMode, RequireSymbolID, AutoCreate, autoUpdate, configKeyword)
    def ConvertLabels(self):
        '''Method IConvertLabelsToAnnotation.ConvertLabels'''
        return super(IConvertLabelsToAnnotation, self).ConvertLabels()
    def get_AnnoLayers(self):
        '''Method IConvertLabelsToAnnotation.get_AnnoLayers

           OUTPUT
            Layers              : IEnumLayer**'''
        return super(IConvertLabelsToAnnotation, self).get_AnnoLayers()
    def get_ErrorInfo(self):
        '''Method IConvertLabelsToAnnotation.get_ErrorInfo

           OUTPUT
            info                : BSTR*'''
        return super(IConvertLabelsToAnnotation, self).get_ErrorInfo()
    AnnoLayers = property(get_AnnoLayers, None, None)
    ErrorInfo = property(get_ErrorInfo, None, None)

class IBasemapLayer(_esriCarto.IBasemapLayer):
    _IID = uuid.UUID('f9d6aa98-5586-486f-8242-670aedf7860e')

    def __init__(self, *args, **kw):
        super(IBasemapLayer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def NotifyLayerChanged(self, Layer, eventHint, eventParam):
        '''Method IBasemapLayer.NotifyLayerChanged

           INPUTS
            Layer               : ILayer*
            eventHint           : esriLayerEventHint
            eventParam          : IVariantArray*'''
        return super(IBasemapLayer, self).NotifyLayerChanged(Layer, eventHint, eventParam)
    def GetConversionStatus(self, Layer):
        '''Method IBasemapLayer.GetConversionStatus

           INPUT
            Layer               : ILayer*

           OUTPUT
            Status              : esriConversionStatus*'''
        return super(IBasemapLayer, self).GetConversionStatus(Layer)
    def GetLayerWrapper(self, Layer):
        '''Method IBasemapLayer.GetLayerWrapper

           INPUT
            Layer               : ILayer*

           OUTPUT
            layerWrapper        : IBasemapSubLayer**'''
        return super(IBasemapLayer, self).GetLayerWrapper(Layer)
    def FindLayerWrapper(self, pLayer):
        '''Method IBasemapLayer.FindLayerWrapper

           INPUT
            pLayer              : ILayer*

           OUTPUT
            ppLayerWrapper      : IBasemapSubLayer**'''
        return super(IBasemapLayer, self).FindLayerWrapper(pLayer)
    def CanDraw(self):
        '''Method IBasemapLayer.CanDraw

           OUTPUT
            bYesNo              : VARIANT_BOOL*'''
        return super(IBasemapLayer, self).CanDraw()
    def InvalidateCache(self):
        '''Method IBasemapLayer.InvalidateCache'''
        return super(IBasemapLayer, self).InvalidateCache()
    def get_Shaders(self):
        '''Method IBasemapLayer.get_Shaders

           OUTPUT
            Shaders             : IArrayOfIShader**'''
        return super(IBasemapLayer, self).get_Shaders()
    def putref_Shaders(self, Shaders):
        '''Method IBasemapLayer.putref_Shaders

           INPUT
            Shaders             : IArrayOfIShader*'''
        return super(IBasemapLayer, self).putref_Shaders(Shaders)
    def NotifyMapPropertiesChanged(self, pMap, reconvertAll):
        '''Method IBasemapLayer.NotifyMapPropertiesChanged

           INPUTS
            pMap                : IMap*
            reconvertAll        : VARIANT_BOOL'''
        return super(IBasemapLayer, self).NotifyMapPropertiesChanged(pMap, reconvertAll)
    def HasSufficientMemory(self, numberOfAdditionalBasemapLayers):
        '''Method IBasemapLayer.HasSufficientMemory

           INPUT
            numberOfAdditionalBasemapLayers: int

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(IBasemapLayer, self).HasSufficientMemory(numberOfAdditionalBasemapLayers)
    Shaders = property(get_Shaders, putref_Shaders, None)

class IMapSurroundFactory(_esriCarto.IMapSurroundFactory):
    _IID = uuid.UUID('3141f2ec-38e2-11d1-8809-080009ec732a')
    def get_Name(self):
        '''Method IMapSurroundFactory.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapSurroundFactory, self).get_Name()
    def Create(self, Map):
        '''Method IMapSurroundFactory.Create

           INPUT
            Map                 : IMap*

           OUTPUT
            MapSurround         : IMapSurround**'''
        return super(IMapSurroundFactory, self).Create(Map)
    Name = property(get_Name, None, None)

class IMapEvents3(_esriCarto.IMapEvents3):
    _IID = uuid.UUID('c1ba2686-83ac-4d40-8bbb-548d3f220808')
    def BeginBuildCache(self, Map):
        '''Method IMapEvents3.BeginBuildCache

           INPUT
            Map                 : IMap*'''
        return super(IMapEvents3, self).BeginBuildCache(Map)
    def EndBuildCache(self, Map):
        '''Method IMapEvents3.EndBuildCache

           INPUT
            Map                 : IMap*'''
        return super(IMapEvents3, self).EndBuildCache(Map)

class IMapAutoExtentOptions(_esriCarto.IMapAutoExtentOptions):
    _IID = uuid.UUID('e5461b30-c74f-47f0-bdf3-65898ac2b622')

    def __init__(self, *args, **kw):
        super(IMapAutoExtentOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AutoExtentType(self):
        '''Method IMapAutoExtentOptions.get_AutoExtentType

           OUTPUT
            Type                : esriExtentTypeEnum*'''
        return super(IMapAutoExtentOptions, self).get_AutoExtentType()
    def put_AutoExtentType(self, Type):
        '''Method IMapAutoExtentOptions.put_AutoExtentType

           INPUT
            Type                : esriExtentTypeEnum'''
        return super(IMapAutoExtentOptions, self).put_AutoExtentType(Type)
    def get_AutoExtentScale(self):
        '''Method IMapAutoExtentOptions.get_AutoExtentScale

           OUTPUT
            Scale               : double*'''
        return super(IMapAutoExtentOptions, self).get_AutoExtentScale()
    def put_AutoExtentScale(self, Scale):
        '''Method IMapAutoExtentOptions.put_AutoExtentScale

           INPUT
            Scale               : double'''
        return super(IMapAutoExtentOptions, self).put_AutoExtentScale(Scale)
    def get_AutoExtentBounds(self):
        '''Method IMapAutoExtentOptions.get_AutoExtentBounds

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IMapAutoExtentOptions, self).get_AutoExtentBounds()
    def put_AutoExtentBounds(self, Bounds):
        '''Method IMapAutoExtentOptions.put_AutoExtentBounds

           INPUT
            Bounds              : IEnvelope*'''
        return super(IMapAutoExtentOptions, self).put_AutoExtentBounds(Bounds)
    def get_AutoExtentMap(self):
        '''Method IMapAutoExtentOptions.get_AutoExtentMap

           OUTPUT
            Map                 : IMap**'''
        return super(IMapAutoExtentOptions, self).get_AutoExtentMap()
    def putref_AutoExtentMap(self, Map):
        '''Method IMapAutoExtentOptions.putref_AutoExtentMap

           INPUT
            Map                 : IMap*'''
        return super(IMapAutoExtentOptions, self).putref_AutoExtentMap(Map)
    def get_AutoExtentMargin(self):
        '''Method IMapAutoExtentOptions.get_AutoExtentMargin

           OUTPUT
            margin              : double*'''
        return super(IMapAutoExtentOptions, self).get_AutoExtentMargin()
    def put_AutoExtentMargin(self, margin):
        '''Method IMapAutoExtentOptions.put_AutoExtentMargin

           INPUT
            margin              : double'''
        return super(IMapAutoExtentOptions, self).put_AutoExtentMargin(margin)
    def get_AutoExtentMarginUnits(self):
        '''Method IMapAutoExtentOptions.get_AutoExtentMarginUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IMapAutoExtentOptions, self).get_AutoExtentMarginUnits()
    def put_AutoExtentMarginUnits(self, Units):
        '''Method IMapAutoExtentOptions.put_AutoExtentMarginUnits

           INPUT
            Units               : esriUnits'''
        return super(IMapAutoExtentOptions, self).put_AutoExtentMarginUnits(Units)
    def get_AutoExtentLayer(self):
        '''Method IMapAutoExtentOptions.get_AutoExtentLayer

           OUTPUT
            Layer               : IFeatureLayer**'''
        return super(IMapAutoExtentOptions, self).get_AutoExtentLayer()
    def putref_AutoExtentLayer(self, Layer):
        '''Method IMapAutoExtentOptions.putref_AutoExtentLayer

           INPUT
            Layer               : IFeatureLayer*'''
        return super(IMapAutoExtentOptions, self).putref_AutoExtentLayer(Layer)
    def get_LockedZoom(self, flag):
        '''Method IMapAutoExtentOptions.get_LockedZoom

           INPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapAutoExtentOptions, self).get_LockedZoom(flag)
    def get_LockedPan(self, flag):
        '''Method IMapAutoExtentOptions.get_LockedPan

           INPUT
            flag                : VARIANT_BOOL*'''
        return super(IMapAutoExtentOptions, self).get_LockedPan(flag)
    AutoExtentBounds = property(get_AutoExtentBounds, put_AutoExtentBounds, None)
    AutoExtentLayer = property(get_AutoExtentLayer, putref_AutoExtentLayer, None)
    AutoExtentMap = property(get_AutoExtentMap, putref_AutoExtentMap, None)
    AutoExtentMargin = property(get_AutoExtentMargin, put_AutoExtentMargin, None)
    AutoExtentMarginUnits = property(get_AutoExtentMarginUnits, put_AutoExtentMarginUnits, None)
    AutoExtentScale = property(get_AutoExtentScale, put_AutoExtentScale, None)
    AutoExtentType = property(get_AutoExtentType, put_AutoExtentType, None)

class IMaps2(_esriCarto.IMaps2):
    _IID = uuid.UUID('eb3557eb-5f9a-4f83-821e-0826e5cbfd30')
    def get_Count(self):
        '''Method IMaps2.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMaps2, self).get_Count()
    def get_Item(self, Index):
        '''Method IMaps2.get_Item

           INPUT
            Index               : long

           OUTPUT
            Map                 : IMap**'''
        return super(IMaps2, self).get_Item(Index)
    def Create(self):
        '''Method IMaps2.Create

           OUTPUT
            Map                 : IMap**'''
        return super(IMaps2, self).Create()
    def Remove(self, Map):
        '''Method IMaps2.Remove

           INPUT
            Map                 : IMap*'''
        return super(IMaps2, self).Remove(Map)
    def Add(self, Map):
        '''Method IMaps2.Add

           INPUT
            Map                 : IMap*'''
        return super(IMaps2, self).Add(Map)
    def RemoveAt(self, Index):
        '''Method IMaps2.RemoveAt

           INPUT
            Index               : long'''
        return super(IMaps2, self).RemoveAt(Index)
    def Reset(self):
        '''Method IMaps2.Reset'''
        return super(IMaps2, self).Reset()
    def MoveItem(self, pMap, toIndex):
        '''Method IMaps2.MoveItem

           INPUTS
            pMap                : IMap*
            toIndex             : long'''
        return super(IMaps2, self).MoveItem(pMap, toIndex)
    Count = property(get_Count, None, None)
    Item = IndexProperty(get_Item, None)

class IMaps(_esriCarto.IMaps):
    _IID = uuid.UUID('dfd9ff9f-3080-11d2-94c9-080009eebecb')
    def get_Count(self):
        '''Method IMaps.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMaps, self).get_Count()
    def get_Item(self, Index):
        '''Method IMaps.get_Item

           INPUT
            Index               : long

           OUTPUT
            Map                 : IMap**'''
        return super(IMaps, self).get_Item(Index)
    def Create(self):
        '''Method IMaps.Create

           OUTPUT
            Map                 : IMap**'''
        return super(IMaps, self).Create()
    def Remove(self, Map):
        '''Method IMaps.Remove

           INPUT
            Map                 : IMap*'''
        return super(IMaps, self).Remove(Map)
    def Add(self, Map):
        '''Method IMaps.Add

           INPUT
            Map                 : IMap*'''
        return super(IMaps, self).Add(Map)
    def RemoveAt(self, Index):
        '''Method IMaps.RemoveAt

           INPUT
            Index               : long'''
        return super(IMaps, self).RemoveAt(Index)
    def Reset(self):
        '''Method IMaps.Reset'''
        return super(IMaps, self).Reset()
    Count = property(get_Count, None, None)
    Item = IndexProperty(get_Item, None)

class IEnumMap(_esriCarto.IEnumMap):
    _IID = uuid.UUID('0f1fc15b-083f-11d1-869e-0000f8751720')
    def Next(self):
        '''Method IEnumMap.Next

           OUTPUT
            Map                 : IMap**'''
        return super(IEnumMap, self).Next()
    def __iter__(self):
        try:
            super(IEnumMap, self).Reset()
            val = super(IEnumMap, self).Next()
            while val:
                yield val
                val = super(IEnumMap, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumMap.Reset'''
        return super(IEnumMap, self).Reset()

class ISpatialBookmark(_esriCarto.ISpatialBookmark):
    _IID = uuid.UUID('ee53528b-41c9-11d1-880a-080009ec732a')

    def __init__(self, *args, **kw):
        super(ISpatialBookmark, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BookmarkType(self):
        '''Method ISpatialBookmark.get_BookmarkType

           OUTPUT
            Type                : BSTR*'''
        return super(ISpatialBookmark, self).get_BookmarkType()
    def get_Name(self):
        '''Method ISpatialBookmark.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ISpatialBookmark, self).get_Name()
    def put_Name(self, Name):
        '''Method ISpatialBookmark.put_Name

           INPUT
            Name                : BSTR'''
        return super(ISpatialBookmark, self).put_Name(Name)
    def ZoomTo(self, Map):
        '''Method ISpatialBookmark.ZoomTo

           INPUT
            Map                 : IMap*'''
        return super(ISpatialBookmark, self).ZoomTo(Map)
    BookmarkType = property(get_BookmarkType, None, None)
    Name = property(get_Name, put_Name, None)

class IPushPin(_esriCarto.IPushPin):
    _IID = uuid.UUID('ee53528c-41c9-11d1-880a-080009ec732a')

    def __init__(self, *args, **kw):
        super(IPushPin, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Location(self):
        '''Method IPushPin.get_Location

           OUTPUT
            point               : IPoint**'''
        return super(IPushPin, self).get_Location()
    def putref_Location(self, point):
        '''Method IPushPin.putref_Location

           INPUT
            point               : IPoint*'''
        return super(IPushPin, self).putref_Location(point)
    def get_MarkerSymbol(self):
        '''Method IPushPin.get_MarkerSymbol

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IPushPin, self).get_MarkerSymbol()
    def putref_MarkerSymbol(self, Symbol):
        '''Method IPushPin.putref_MarkerSymbol

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IPushPin, self).putref_MarkerSymbol(Symbol)
    def get_TextSymbol(self):
        '''Method IPushPin.get_TextSymbol

           OUTPUT
            Symbol              : ITextSymbol**'''
        return super(IPushPin, self).get_TextSymbol()
    def putref_TextSymbol(self, Symbol):
        '''Method IPushPin.putref_TextSymbol

           INPUT
            Symbol              : ITextSymbol*'''
        return super(IPushPin, self).putref_TextSymbol(Symbol)
    def get_MaxLabelWidthPts(self):
        '''Method IPushPin.get_MaxLabelWidthPts

           OUTPUT
            Width               : double*'''
        return super(IPushPin, self).get_MaxLabelWidthPts()
    def put_MaxLabelWidthPts(self, Width):
        '''Method IPushPin.put_MaxLabelWidthPts

           INPUT
            Width               : double'''
        return super(IPushPin, self).put_MaxLabelWidthPts(Width)
    def Flash(self, Display):
        '''Method IPushPin.Flash

           INPUT
            Display             : IDisplay*'''
        return super(IPushPin, self).Flash(Display)
    def Draw(self, Display):
        '''Method IPushPin.Draw

           INPUT
            Display             : IDisplay*'''
        return super(IPushPin, self).Draw(Display)
    def get_BookmarkType(self):
        '''Method ISpatialBookmark.get_BookmarkType (from ISpatialBookmark)

           OUTPUT
            Type                : BSTR*'''
        return super(IPushPin, self).get_BookmarkType()
    def get_Name(self):
        '''Method ISpatialBookmark.get_Name (from ISpatialBookmark)

           OUTPUT
            Name                : BSTR*'''
        return super(IPushPin, self).get_Name()
    def put_Name(self, Name):
        '''Method ISpatialBookmark.put_Name (from ISpatialBookmark)

           INPUT
            Name                : BSTR'''
        return super(IPushPin, self).put_Name(Name)
    def ZoomTo(self, Map):
        '''Method ISpatialBookmark.ZoomTo (from ISpatialBookmark)

           INPUT
            Map                 : IMap*'''
        return super(IPushPin, self).ZoomTo(Map)
    BookmarkType = property(get_BookmarkType, None, None)
    Location = property(get_Location, putref_Location, None)
    MarkerSymbol = property(get_MarkerSymbol, putref_MarkerSymbol, None)
    MaxLabelWidthPts = property(get_MaxLabelWidthPts, put_MaxLabelWidthPts, None)
    Name = property(get_Name, put_Name, None)
    TextSymbol = property(get_TextSymbol, putref_TextSymbol, None)

class IAOIBookmark(_esriCarto.IAOIBookmark):
    _IID = uuid.UUID('ee53528d-41c9-11d1-880a-080009ec732a')

    def __init__(self, *args, **kw):
        super(IAOIBookmark, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Location(self):
        '''Method IAOIBookmark.get_Location

           OUTPUT
            Location            : IEnvelope**'''
        return super(IAOIBookmark, self).get_Location()
    def putref_Location(self, Location):
        '''Method IAOIBookmark.putref_Location

           INPUT
            Location            : IEnvelope*'''
        return super(IAOIBookmark, self).putref_Location(Location)
    def get_BookmarkType(self):
        '''Method ISpatialBookmark.get_BookmarkType (from ISpatialBookmark)

           OUTPUT
            Type                : BSTR*'''
        return super(IAOIBookmark, self).get_BookmarkType()
    def get_Name(self):
        '''Method ISpatialBookmark.get_Name (from ISpatialBookmark)

           OUTPUT
            Name                : BSTR*'''
        return super(IAOIBookmark, self).get_Name()
    def put_Name(self, Name):
        '''Method ISpatialBookmark.put_Name (from ISpatialBookmark)

           INPUT
            Name                : BSTR'''
        return super(IAOIBookmark, self).put_Name(Name)
    def ZoomTo(self, Map):
        '''Method ISpatialBookmark.ZoomTo (from ISpatialBookmark)

           INPUT
            Map                 : IMap*'''
        return super(IAOIBookmark, self).ZoomTo(Map)
    BookmarkType = property(get_BookmarkType, None, None)
    Location = property(get_Location, putref_Location, None)
    Name = property(get_Name, put_Name, None)

class IFeatureBookmark(_esriCarto.IFeatureBookmark):
    _IID = uuid.UUID('3036d35f-ede5-11d0-87fe-080009ec732a')

    def __init__(self, *args, **kw):
        super(IFeatureBookmark, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureId(self):
        '''Method IFeatureBookmark.get_FeatureId

           OUTPUT
            FID                 : long*'''
        return super(IFeatureBookmark, self).get_FeatureId()
    def put_FeatureId(self, FID):
        '''Method IFeatureBookmark.put_FeatureId

           INPUT
            FID                 : long'''
        return super(IFeatureBookmark, self).put_FeatureId(FID)
    def get_FeatureClass(self):
        '''Method IFeatureBookmark.get_FeatureClass

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IFeatureBookmark, self).get_FeatureClass()
    def put_FeatureClass(self, FeatureClass):
        '''Method IFeatureBookmark.put_FeatureClass

           INPUT
            FeatureClass        : IFeatureClass*'''
        return super(IFeatureBookmark, self).put_FeatureClass(FeatureClass)
    def PanTo(self, Display):
        '''Method IFeatureBookmark.PanTo

           INPUT
            Display             : IDisplay*'''
        return super(IFeatureBookmark, self).PanTo(Display)
    def Flash(self, Display):
        '''Method IFeatureBookmark.Flash

           INPUT
            Display             : IDisplay*'''
        return super(IFeatureBookmark, self).Flash(Display)
    def Draw(self, Display):
        '''Method IFeatureBookmark.Draw

           INPUT
            Display             : IDisplay*'''
        return super(IFeatureBookmark, self).Draw(Display)
    def get_BookmarkType(self):
        '''Method ISpatialBookmark.get_BookmarkType (from ISpatialBookmark)

           OUTPUT
            Type                : BSTR*'''
        return super(IFeatureBookmark, self).get_BookmarkType()
    def get_Name(self):
        '''Method ISpatialBookmark.get_Name (from ISpatialBookmark)

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureBookmark, self).get_Name()
    def put_Name(self, Name):
        '''Method ISpatialBookmark.put_Name (from ISpatialBookmark)

           INPUT
            Name                : BSTR'''
        return super(IFeatureBookmark, self).put_Name(Name)
    def ZoomTo(self, Map):
        '''Method ISpatialBookmark.ZoomTo (from ISpatialBookmark)

           INPUT
            Map                 : IMap*'''
        return super(IFeatureBookmark, self).ZoomTo(Map)
    BookmarkType = property(get_BookmarkType, None, None)
    FeatureClass = property(get_FeatureClass, put_FeatureClass, None)
    FeatureId = property(get_FeatureId, put_FeatureId, None)
    Name = property(get_Name, put_Name, None)

class IEnumSpatialBookmark(_esriCarto.IEnumSpatialBookmark):
    _IID = uuid.UUID('ee535290-41c9-11d1-880a-080009ec732a')
    def Next(self):
        '''Method IEnumSpatialBookmark.Next

           OUTPUT
            bookmark            : ISpatialBookmark**'''
        return super(IEnumSpatialBookmark, self).Next()
    def __iter__(self):
        try:
            super(IEnumSpatialBookmark, self).Reset()
            val = super(IEnumSpatialBookmark, self).Next()
            while val:
                yield val
                val = super(IEnumSpatialBookmark, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumSpatialBookmark.Reset'''
        return super(IEnumSpatialBookmark, self).Reset()

class IMapBookmarks(_esriCarto.IMapBookmarks):
    _IID = uuid.UUID('ee53528f-41c9-11d1-880a-080009ec732a')
    def get_Bookmarks(self):
        '''Method IMapBookmarks.get_Bookmarks

           OUTPUT
            Bookmarks           : IEnumSpatialBookmark**'''
        return super(IMapBookmarks, self).get_Bookmarks()
    def AddBookmark(self, bookmark):
        '''Method IMapBookmarks.AddBookmark

           INPUT
            bookmark            : ISpatialBookmark*'''
        return super(IMapBookmarks, self).AddBookmark(bookmark)
    def RemoveBookmark(self, bookmark):
        '''Method IMapBookmarks.RemoveBookmark

           INPUT
            bookmark            : ISpatialBookmark*'''
        return super(IMapBookmarks, self).RemoveBookmark(bookmark)
    def RemoveAllBookmarks(self):
        '''Method IMapBookmarks.RemoveAllBookmarks'''
        return super(IMapBookmarks, self).RemoveAllBookmarks()
    Bookmarks = property(get_Bookmarks, None, None)

class IMapBookmarks2(_esriCarto.IMapBookmarks2):
    _IID = uuid.UUID('dec80b31-b4ba-48b2-84e1-9b80119f405e')
    def MoveBookmarkTo(self, bookmark, Index):
        '''Method IMapBookmarks2.MoveBookmarkTo

           INPUTS
            bookmark            : ISpatialBookmark*
            Index               : long'''
        return super(IMapBookmarks2, self).MoveBookmarkTo(bookmark, Index)
    def SortBookmarks(self, Ascending):
        '''Method IMapBookmarks2.SortBookmarks

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(IMapBookmarks2, self).SortBookmarks(Ascending)

class ILegend2(_esriCarto.ILegend2):
    _IID = uuid.UUID('15abe7f6-49e8-4012-be72-d14e5a755ace')

    def __init__(self, *args, **kw):
        super(ILegend2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Map(self):
        '''Method ILegend2.get_Map

           OUTPUT
            Map                 : IMap**'''
        return super(ILegend2, self).get_Map()
    def putref_Map(self, Map):
        '''Method ILegend2.putref_Map

           INPUT
            Map                 : IMap*'''
        return super(ILegend2, self).putref_Map(Map)
    def get_Name(self):
        '''Method ILegend2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILegend2, self).get_Name()
    def put_Name(self, Name):
        '''Method ILegend2.put_Name

           INPUT
            Name                : BSTR'''
        return super(ILegend2, self).put_Name(Name)
    def get_Icon(self):
        '''Method ILegend2.get_Icon

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(ILegend2, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method ILegend2.QueryBounds

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(ILegend2, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method ILegend2.FitToBounds

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(ILegend2, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method ILegend2.DelayEvents

           INPUT
            delay               : VARIANT_BOOL'''
        return super(ILegend2, self).DelayEvents(delay)
    def Refresh(self):
        '''Method ILegend2.Refresh'''
        return super(ILegend2, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method ILegend2.Draw

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(ILegend2, self).Draw(Display, TrackCancel, Bounds)
    def get_Format(self):
        '''Method ILegend2.get_Format

           OUTPUT
            LegendFormat        : ILegendFormat**'''
        return super(ILegend2, self).get_Format()
    def putref_Format(self, LegendFormat):
        '''Method ILegend2.putref_Format

           INPUT
            LegendFormat        : ILegendFormat*'''
        return super(ILegend2, self).putref_Format(LegendFormat)
    def get_Title(self):
        '''Method ILegend2.get_Title

           OUTPUT
            Title               : BSTR*'''
        return super(ILegend2, self).get_Title()
    def put_Title(self, Title):
        '''Method ILegend2.put_Title

           INPUT
            Title               : BSTR'''
        return super(ILegend2, self).put_Title(Title)
    def get_AutoAdd(self):
        '''Method ILegend2.get_AutoAdd

           OUTPUT
            AutoAdd             : VARIANT_BOOL*'''
        return super(ILegend2, self).get_AutoAdd()
    def put_AutoAdd(self, AutoAdd):
        '''Method ILegend2.put_AutoAdd

           INPUT
            AutoAdd             : VARIANT_BOOL'''
        return super(ILegend2, self).put_AutoAdd(AutoAdd)
    def get_AutoReorder(self):
        '''Method ILegend2.get_AutoReorder

           OUTPUT
            AutoReorder         : VARIANT_BOOL*'''
        return super(ILegend2, self).get_AutoReorder()
    def put_AutoReorder(self, AutoReorder):
        '''Method ILegend2.put_AutoReorder

           INPUT
            AutoReorder         : VARIANT_BOOL'''
        return super(ILegend2, self).put_AutoReorder(AutoReorder)
    def get_AutoVisibility(self):
        '''Method ILegend2.get_AutoVisibility

           OUTPUT
            AutoVisibility      : VARIANT_BOOL*'''
        return super(ILegend2, self).get_AutoVisibility()
    def put_AutoVisibility(self, AutoVisibility):
        '''Method ILegend2.put_AutoVisibility

           INPUT
            AutoVisibility      : VARIANT_BOOL'''
        return super(ILegend2, self).put_AutoVisibility(AutoVisibility)
    def get_FlowRight(self):
        '''Method ILegend2.get_FlowRight

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegend2, self).get_FlowRight()
    def put_FlowRight(self, flag):
        '''Method ILegend2.put_FlowRight

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegend2, self).put_FlowRight(flag)
    def get_ItemCount(self):
        '''Method ILegend2.get_ItemCount

           OUTPUT
            numItems            : long*'''
        return super(ILegend2, self).get_ItemCount()
    def get_Item(self, Index):
        '''Method ILegend2.get_Item

           INPUT
            Index               : long

           OUTPUT
            Item                : ILegendItem**'''
        return super(ILegend2, self).get_Item(Index)
    def AddItem(self, Item):
        '''Method ILegend2.AddItem

           INPUT
            Item                : ILegendItem*'''
        return super(ILegend2, self).AddItem(Item)
    def InsertItem(self, Index, Item):
        '''Method ILegend2.InsertItem

           INPUTS
            Index               : long
            Item                : ILegendItem*'''
        return super(ILegend2, self).InsertItem(Index, Item)
    def RemoveItem(self, Index):
        '''Method ILegend2.RemoveItem

           INPUT
            Index               : long'''
        return super(ILegend2, self).RemoveItem(Index)
    def ClearItems(self):
        '''Method ILegend2.ClearItems'''
        return super(ILegend2, self).ClearItems()
    def get_DefaultLegendItem(self, Layer):
        '''Method ILegend2.get_DefaultLegendItem

           INPUT
            Layer               : ILayer*

           OUTPUT
            Item                : ILegendItem**'''
        return super(ILegend2, self).get_DefaultLegendItem(Layer)
    def get_ScaleSymbols(self):
        '''Method ILegend2.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ILegend2, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method ILegend2.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ILegend2, self).put_ScaleSymbols(Scale)
    def AdjustColumns(self, Columns):
        '''Method ILegend2.AdjustColumns

           INPUT
            Columns             : long'''
        return super(ILegend2, self).AdjustColumns(Columns)
    AutoAdd = property(get_AutoAdd, put_AutoAdd, None)
    AutoReorder = property(get_AutoReorder, put_AutoReorder, None)
    AutoVisibility = property(get_AutoVisibility, put_AutoVisibility, None)
    FlowRight = property(get_FlowRight, put_FlowRight, None)
    Format = property(get_Format, putref_Format, None)
    Icon = property(get_Icon, None, None)
    ItemCount = property(get_ItemCount, None, None)
    Map = property(get_Map, putref_Map, None)
    Name = property(get_Name, put_Name, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    Title = property(get_Title, put_Title, None)
    DefaultLegendItem = IndexProperty(get_DefaultLegendItem, None)
    Item = IndexProperty(get_Item, None)

class ILegend3(_esriCarto.ILegend3):
    _IID = uuid.UUID('15abe7f7-49e8-4012-be72-d14e5a755ace')

    def __init__(self, *args, **kw):
        super(ILegend3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Map(self):
        '''Method ILegend3.get_Map

           OUTPUT
            Map                 : IMap**'''
        return super(ILegend3, self).get_Map()
    def putref_Map(self, Map):
        '''Method ILegend3.putref_Map

           INPUT
            Map                 : IMap*'''
        return super(ILegend3, self).putref_Map(Map)
    def get_Name(self):
        '''Method ILegend3.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILegend3, self).get_Name()
    def put_Name(self, Name):
        '''Method ILegend3.put_Name

           INPUT
            Name                : BSTR'''
        return super(ILegend3, self).put_Name(Name)
    def get_Icon(self):
        '''Method ILegend3.get_Icon

           OUTPUT
            hIcon               : OLE_HANDLE*'''
        return super(ILegend3, self).get_Icon()
    def QueryBounds(self, Display, oldBounds, newBounds):
        '''Method ILegend3.QueryBounds

           INPUTS
            Display             : IDisplay*
            oldBounds           : IEnvelope*
            newBounds           : IEnvelope*'''
        return super(ILegend3, self).QueryBounds(Display, oldBounds, newBounds)
    def FitToBounds(self, Display, Bounds):
        '''Method ILegend3.FitToBounds

           INPUTS
            Display             : IDisplay*
            Bounds              : IEnvelope*

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(ILegend3, self).FitToBounds(Display, Bounds)
    def DelayEvents(self, delay):
        '''Method ILegend3.DelayEvents

           INPUT
            delay               : VARIANT_BOOL'''
        return super(ILegend3, self).DelayEvents(delay)
    def Refresh(self):
        '''Method ILegend3.Refresh'''
        return super(ILegend3, self).Refresh()
    def Draw(self, Display, TrackCancel, Bounds):
        '''Method ILegend3.Draw

           INPUTS
            Display             : IDisplay*
            TrackCancel         : ITrackCancel*
            Bounds              : IEnvelope*'''
        return super(ILegend3, self).Draw(Display, TrackCancel, Bounds)
    def get_Format(self):
        '''Method ILegend3.get_Format

           OUTPUT
            LegendFormat        : ILegendFormat**'''
        return super(ILegend3, self).get_Format()
    def putref_Format(self, LegendFormat):
        '''Method ILegend3.putref_Format

           INPUT
            LegendFormat        : ILegendFormat*'''
        return super(ILegend3, self).putref_Format(LegendFormat)
    def get_Title(self):
        '''Method ILegend3.get_Title

           OUTPUT
            Title               : BSTR*'''
        return super(ILegend3, self).get_Title()
    def put_Title(self, Title):
        '''Method ILegend3.put_Title

           INPUT
            Title               : BSTR'''
        return super(ILegend3, self).put_Title(Title)
    def get_AutoAdd(self):
        '''Method ILegend3.get_AutoAdd

           OUTPUT
            AutoAdd             : VARIANT_BOOL*'''
        return super(ILegend3, self).get_AutoAdd()
    def put_AutoAdd(self, AutoAdd):
        '''Method ILegend3.put_AutoAdd

           INPUT
            AutoAdd             : VARIANT_BOOL'''
        return super(ILegend3, self).put_AutoAdd(AutoAdd)
    def get_AutoReorder(self):
        '''Method ILegend3.get_AutoReorder

           OUTPUT
            AutoReorder         : VARIANT_BOOL*'''
        return super(ILegend3, self).get_AutoReorder()
    def put_AutoReorder(self, AutoReorder):
        '''Method ILegend3.put_AutoReorder

           INPUT
            AutoReorder         : VARIANT_BOOL'''
        return super(ILegend3, self).put_AutoReorder(AutoReorder)
    def get_AutoVisibility(self):
        '''Method ILegend3.get_AutoVisibility

           OUTPUT
            AutoVisibility      : VARIANT_BOOL*'''
        return super(ILegend3, self).get_AutoVisibility()
    def put_AutoVisibility(self, AutoVisibility):
        '''Method ILegend3.put_AutoVisibility

           INPUT
            AutoVisibility      : VARIANT_BOOL'''
        return super(ILegend3, self).put_AutoVisibility(AutoVisibility)
    def get_FlowRight(self):
        '''Method ILegend3.get_FlowRight

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegend3, self).get_FlowRight()
    def put_FlowRight(self, flag):
        '''Method ILegend3.put_FlowRight

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegend3, self).put_FlowRight(flag)
    def get_ItemCount(self):
        '''Method ILegend3.get_ItemCount

           OUTPUT
            numItems            : long*'''
        return super(ILegend3, self).get_ItemCount()
    def get_Item(self, Index):
        '''Method ILegend3.get_Item

           INPUT
            Index               : long

           OUTPUT
            Item                : ILegendItem**'''
        return super(ILegend3, self).get_Item(Index)
    def AddItem(self, Item):
        '''Method ILegend3.AddItem

           INPUT
            Item                : ILegendItem*'''
        return super(ILegend3, self).AddItem(Item)
    def InsertItem(self, Index, Item):
        '''Method ILegend3.InsertItem

           INPUTS
            Index               : long
            Item                : ILegendItem*'''
        return super(ILegend3, self).InsertItem(Index, Item)
    def RemoveItem(self, Index):
        '''Method ILegend3.RemoveItem

           INPUT
            Index               : long'''
        return super(ILegend3, self).RemoveItem(Index)
    def ClearItems(self):
        '''Method ILegend3.ClearItems'''
        return super(ILegend3, self).ClearItems()
    def get_DefaultLegendItem(self, Layer):
        '''Method ILegend3.get_DefaultLegendItem

           INPUT
            Layer               : ILayer*

           OUTPUT
            Item                : ILegendItem**'''
        return super(ILegend3, self).get_DefaultLegendItem(Layer)
    def get_ScaleSymbols(self):
        '''Method ILegend3.get_ScaleSymbols

           OUTPUT
            Scale               : VARIANT_BOOL*'''
        return super(ILegend3, self).get_ScaleSymbols()
    def put_ScaleSymbols(self, Scale):
        '''Method ILegend3.put_ScaleSymbols

           INPUT
            Scale               : VARIANT_BOOL'''
        return super(ILegend3, self).put_ScaleSymbols(Scale)
    def AdjustColumns(self, Columns):
        '''Method ILegend3.AdjustColumns

           INPUT
            Columns             : long'''
        return super(ILegend3, self).AdjustColumns(Columns)
    def get_FixedFrame(self):
        '''Method ILegend3.get_FixedFrame

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegend3, self).get_FixedFrame()
    def put_FixedFrame(self, flag):
        '''Method ILegend3.put_FixedFrame

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegend3, self).put_FixedFrame(flag)
    def get_AutoColumns(self):
        '''Method ILegend3.get_AutoColumns

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegend3, self).get_AutoColumns()
    def put_AutoColumns(self, flag):
        '''Method ILegend3.put_AutoColumns

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegend3, self).put_AutoColumns(flag)
    def get_AutoFit(self):
        '''Method ILegend3.get_AutoFit

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegend3, self).get_AutoFit()
    def put_AutoFit(self, flag):
        '''Method ILegend3.put_AutoFit

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILegend3, self).put_AutoFit(flag)
    def get_MinFontSize(self):
        '''Method ILegend3.get_MinFontSize

           OUTPUT
            FontSize            : double*'''
        return super(ILegend3, self).get_MinFontSize()
    def put_MinFontSize(self, FontSize):
        '''Method ILegend3.put_MinFontSize

           INPUT
            FontSize            : double'''
        return super(ILegend3, self).put_MinFontSize(FontSize)
    def get_SupportsAutoColumns(self):
        '''Method ILegend3.get_SupportsAutoColumns

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILegend3, self).get_SupportsAutoColumns()
    AutoAdd = property(get_AutoAdd, put_AutoAdd, None)
    AutoColumns = property(get_AutoColumns, put_AutoColumns, None)
    AutoFit = property(get_AutoFit, put_AutoFit, None)
    AutoReorder = property(get_AutoReorder, put_AutoReorder, None)
    AutoVisibility = property(get_AutoVisibility, put_AutoVisibility, None)
    FixedFrame = property(get_FixedFrame, put_FixedFrame, None)
    FlowRight = property(get_FlowRight, put_FlowRight, None)
    Format = property(get_Format, putref_Format, None)
    Icon = property(get_Icon, None, None)
    ItemCount = property(get_ItemCount, None, None)
    Map = property(get_Map, putref_Map, None)
    MinFontSize = property(get_MinFontSize, put_MinFontSize, None)
    Name = property(get_Name, put_Name, None)
    ScaleSymbols = property(get_ScaleSymbols, put_ScaleSymbols, None)
    SupportsAutoColumns = property(get_SupportsAutoColumns, None, None)
    Title = property(get_Title, put_Title, None)
    DefaultLegendItem = IndexProperty(get_DefaultLegendItem, None)
    Item = IndexProperty(get_Item, None)

class IFeatureFindData(_esriCarto.IFeatureFindData):
    _IID = uuid.UUID('9305b83a-5d4d-11d2-a07b-0000f8775bf9')

    def __init__(self, *args, **kw):
        super(IFeatureFindData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Feature(self):
        '''Method IFeatureFindData.get_Feature

           OUTPUT
            ppFeature           : IFeature**'''
        return super(IFeatureFindData, self).get_Feature()
    def get_Layer(self):
        '''Method IFeatureFindData.get_Layer

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IFeatureFindData, self).get_Layer()
    def get_ActiveView(self):
        '''Method IFeatureFindData.get_ActiveView

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IFeatureFindData, self).get_ActiveView()
    def putref_Feature(self, ppFeature):
        '''Method IFeatureFindData.putref_Feature

           INPUT
            ppFeature           : IFeature*'''
        return super(IFeatureFindData, self).putref_Feature(ppFeature)
    def putref_Layer(self, ppLayer):
        '''Method IFeatureFindData.putref_Layer

           INPUT
            ppLayer             : ILayer*'''
        return super(IFeatureFindData, self).putref_Layer(ppLayer)
    def putref_ActiveView(self, ppActiveView):
        '''Method IFeatureFindData.putref_ActiveView

           INPUT
            ppActiveView        : IActiveView*'''
        return super(IFeatureFindData, self).putref_ActiveView(ppActiveView)
    ActiveView = property(get_ActiveView, putref_ActiveView, None)
    Feature = property(get_Feature, putref_Feature, None)
    Layer = property(get_Layer, putref_Layer, None)

class IMXFeatureFindData(_esriCarto.IMXFeatureFindData):
    _IID = uuid.UUID('e992bc10-0df2-4bec-b3d5-a9d8967a5fc8')

    def __init__(self, *args, **kw):
        super(IMXFeatureFindData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ActiveView(self):
        '''Method IMXFeatureFindData.get_ActiveView

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IMXFeatureFindData, self).get_ActiveView()
    def putref_ActiveView(self, ppActiveView):
        '''Method IMXFeatureFindData.putref_ActiveView

           INPUT
            ppActiveView        : IActiveView*'''
        return super(IMXFeatureFindData, self).putref_ActiveView(ppActiveView)
    ActiveView = property(get_ActiveView, putref_ActiveView, None)

class IMapIdentifyObject(_esriCarto.IMapIdentifyObject):
    _IID = uuid.UUID('7f4ab189-ed0d-11d2-ab0e-000000000000')

    def __init__(self, *args, **kw):
        super(IMapIdentifyObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Map(self, _arg1):
        '''Method IMapIdentifyObject.putref_Map

           INPUT
            _arg1               : IMap*'''
        return super(IMapIdentifyObject, self).putref_Map(_arg1)
    Map = property(None, putref_Map, None)

class IRotateOperation(_esriCarto.IRotateOperation):
    _IID = uuid.UUID('c6431185-806c-11d1-8723-0000f8751720')

    def __init__(self, *args, **kw):
        super(IRotateOperation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IRotateOperation.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IRotateOperation, self).put_Name(_arg1)
    def put_ActiveView(self, _arg1):
        '''Method IRotateOperation.put_ActiveView

           INPUT
            _arg1               : IActiveView*'''
        return super(IRotateOperation, self).put_ActiveView(_arg1)
    def put_PreviousRotation(self, _arg1):
        '''Method IRotateOperation.put_PreviousRotation

           INPUT
            _arg1               : double'''
        return super(IRotateOperation, self).put_PreviousRotation(_arg1)
    def put_Rotation(self, _arg1):
        '''Method IRotateOperation.put_Rotation

           INPUT
            _arg1               : double'''
        return super(IRotateOperation, self).put_Rotation(_arg1)
    def put_Refresh(self, _arg1):
        '''Method IRotateOperation.put_Refresh

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IRotateOperation, self).put_Refresh(_arg1)
    def get_MenuString(self):
        '''Method IOperation.get_MenuString (from IOperation)

           OUTPUT
            text                : BSTR*'''
        return super(IRotateOperation, self).get_MenuString()
    def get_CanUndo(self):
        '''Method IOperation.get_CanUndo (from IOperation)

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(IRotateOperation, self).get_CanUndo()
    def get_CanRedo(self):
        '''Method IOperation.get_CanRedo (from IOperation)

           OUTPUT
            result              : VARIANT_BOOL*'''
        return super(IRotateOperation, self).get_CanRedo()
    def Do(self):
        '''Method IOperation.Do (from IOperation)'''
        return super(IRotateOperation, self).Do()
    def Undo(self):
        '''Method IOperation.Undo (from IOperation)'''
        return super(IRotateOperation, self).Undo()
    def Redo(self):
        '''Method IOperation.Redo (from IOperation)'''
        return super(IRotateOperation, self).Redo()
    ActiveView = property(None, put_ActiveView, None)
    CanRedo = property(get_CanRedo, None, None)
    CanUndo = property(get_CanUndo, None, None)
    MenuString = property(get_MenuString, None, None)
    Name = property(None, put_Name, None)
    PreviousRotation = property(None, put_PreviousRotation, None)
    Refresh = property(None, put_Refresh, None)
    Rotation = property(None, put_Rotation, None)

class IMapCooker(_esriCarto.IMapCooker):
    _IID = uuid.UUID('842ba25b-fe2f-41a4-8867-b521951a2b34')

    def __init__(self, *args, **kw):
        super(IMapCooker, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Path(self):
        '''Method IMapCooker.get_Path

           OUTPUT
            pPath               : BSTR*'''
        return super(IMapCooker, self).get_Path()
    def put_Path(self, pPath):
        '''Method IMapCooker.put_Path

           INPUT
            pPath               : BSTR'''
        return super(IMapCooker, self).put_Path(pPath)
    def get_Extent(self):
        '''Method IMapCooker.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IMapCooker, self).get_Extent()
    def put_Extent(self, ppExtent):
        '''Method IMapCooker.put_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IMapCooker, self).put_Extent(ppExtent)
    def get_Format(self):
        '''Method IMapCooker.get_Format

           OUTPUT
            pFormat             : BSTR*'''
        return super(IMapCooker, self).get_Format()
    def put_Format(self, pFormat):
        '''Method IMapCooker.put_Format

           INPUT
            pFormat             : BSTR'''
        return super(IMapCooker, self).put_Format(pFormat)
    def get_Antialiasing(self):
        '''Method IMapCooker.get_Antialiasing

           OUTPUT
            pAntialiasing       : VARIANT_BOOL*'''
        return super(IMapCooker, self).get_Antialiasing()
    def put_Antialiasing(self, pAntialiasing):
        '''Method IMapCooker.put_Antialiasing

           INPUT
            pAntialiasing       : VARIANT_BOOL'''
        return super(IMapCooker, self).put_Antialiasing(pAntialiasing)
    def get_TileCacheInfo(self):
        '''Method IMapCooker.get_TileCacheInfo

           OUTPUT
            ppCacheInfo         : ITileCacheInfo**'''
        return super(IMapCooker, self).get_TileCacheInfo()
    def putref_TileCacheInfo(self, ppCacheInfo):
        '''Method IMapCooker.putref_TileCacheInfo

           INPUT
            ppCacheInfo         : ITileCacheInfo*'''
        return super(IMapCooker, self).putref_TileCacheInfo(ppCacheInfo)
    def get_NumLevels(self):
        '''Method IMapCooker.get_NumLevels

           OUTPUT
            pNumLevels          : long*'''
        return super(IMapCooker, self).get_NumLevels()
    def Connect(self, Location, Name, pMap):
        '''Method IMapCooker.Connect

           INPUTS
            Location            : BSTR
            Name                : BSTR
            pMap                : IMap*'''
        return super(IMapCooker, self).Connect(Location, Name, pMap)
    def AddCachedLayers(self, pMap):
        '''Method IMapCooker.AddCachedLayers

           INPUT
            pMap                : IMap*'''
        return super(IMapCooker, self).AddCachedLayers(pMap)
    def AddLayer(self, Name, pLayer):
        '''Method IMapCooker.AddLayer

           INPUTS
            Name                : BSTR
            pLayer              : ILayer*'''
        return super(IMapCooker, self).AddLayer(Name, pLayer)
    def Clear(self, pLayer, pExtent):
        '''Method IMapCooker.Clear

           INPUTS
            pLayer              : ILayer*
            pExtent             : IEnvelope*'''
        return super(IMapCooker, self).Clear(pLayer, pExtent)
    def ClearAll(self):
        '''Method IMapCooker.ClearAll'''
        return super(IMapCooker, self).ClearAll()
    def Snap(self, pDisplay, pExtent):
        '''Method IMapCooker.Snap

           INPUTS
            pDisplay            : IDisplay*
            pExtent             : IEnvelope*'''
        return super(IMapCooker, self).Snap(pDisplay, pExtent)
    def Draw(self, pLayer, pDisplay, pTrackCancel):
        '''Method IMapCooker.Draw

           INPUTS
            pLayer              : ILayer*
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker, self).Draw(pLayer, pDisplay, pTrackCancel)
    def SetDefaultLODInfos(self, NumLevels):
        '''Method IMapCooker.SetDefaultLODInfos

           INPUT
            NumLevels           : long'''
        return super(IMapCooker, self).SetDefaultLODInfos(NumLevels)
    def Generate(self, pMap, pLayer, pDisplay, pTrackCancel):
        '''Method IMapCooker.Generate

           INPUTS
            pMap                : IMap*
            pLayer              : ILayer*
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker, self).Generate(pMap, pLayer, pDisplay, pTrackCancel)
    def HasCache(self):
        '''Method IMapCooker.HasCache

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(IMapCooker, self).HasCache()
    def HasLayerCache(self, pLayer):
        '''Method IMapCooker.HasLayerCache

           INPUT
            pLayer              : ILayer*

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(IMapCooker, self).HasLayerCache(pLayer)
    def GetTile(self, pLayer, Level, Row, Column):
        '''Method IMapCooker.GetTile

           INPUTS
            pLayer              : ILayer*
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            ppTile              : SAFEARRAY**'''
        return super(IMapCooker, self).GetTile(pLayer, Level, Row, Column)
    def PutTile(self, pLayer, Level, Row, Column, ppTile):
        '''Method IMapCooker.PutTile

           INPUTS
            pLayer              : ILayer*
            Level               : long
            Row                 : long
            Column              : long
            ppTile              : SAFEARRAY**'''
        return super(IMapCooker, self).PutTile(pLayer, Level, Row, Column, ppTile)
    def GetCacheDirectory(self, pLayer):
        '''Method IMapCooker.GetCacheDirectory

           INPUT
            pLayer              : ILayer*

           OUTPUT
            pCacheDir           : BSTR*'''
        return super(IMapCooker, self).GetCacheDirectory(pLayer)
    def QueryTilePosition(self):
        '''Method IMapCooker.QueryTilePosition

           OUTPUTS
            pLevel              : long*
            pRow                : long*
            pColumn             : long*'''
        return super(IMapCooker, self).QueryTilePosition()
    def PutTilePosition(self, Level, Row, Column):
        '''Method IMapCooker.PutTilePosition

           INPUTS
            Level               : long
            Row                 : long
            Column              : long'''
        return super(IMapCooker, self).PutTilePosition(Level, Row, Column)
    def get_MaxTileCount(self):
        '''Method IMapCooker.get_MaxTileCount

           OUTPUT
            pNumTiles           : long*'''
        return super(IMapCooker, self).get_MaxTileCount()
    def put_MaxTileCount(self, pNumTiles):
        '''Method IMapCooker.put_MaxTileCount

           INPUT
            pNumTiles           : long'''
        return super(IMapCooker, self).put_MaxTileCount(pNumTiles)
    def Exit(self):
        '''Method IMapCooker.Exit'''
        return super(IMapCooker, self).Exit()
    def Update(self, pMap, pLayer, pDisplay, pExtent, pLevels, UpdateMode, pTrackCancel):
        '''Method IMapCooker.Update

           INPUTS
            pMap                : IMap*
            pLayer              : ILayer*
            pDisplay            : IDisplay*
            pExtent             : IEnvelope*
            pLevels             : ILongArray*
            UpdateMode          : esriMapCacheUpdateMode
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker, self).Update(pMap, pLayer, pDisplay, pExtent, pLevels, UpdateMode, pTrackCancel)
    def Delete(self):
        '''Method IMapCooker.Delete'''
        return super(IMapCooker, self).Delete()
    Antialiasing = property(get_Antialiasing, put_Antialiasing, None)
    Extent = property(get_Extent, put_Extent, None)
    Format = property(get_Format, put_Format, None)
    MaxTileCount = property(get_MaxTileCount, put_MaxTileCount, None)
    NumLevels = property(get_NumLevels, None, None)
    Path = property(get_Path, put_Path, None)
    TileCacheInfo = property(get_TileCacheInfo, putref_TileCacheInfo, None)

class IMapCooker2(_esriCarto.IMapCooker2):
    _IID = uuid.UUID('11f3e86e-9351-4226-a1e8-1a1338a9dcf2')

    def __init__(self, *args, **kw):
        super(IMapCooker2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TileImageInfo(self):
        '''Method IMapCooker2.get_TileImageInfo

           OUTPUT
            ppInfo              : ITileImageInfo**'''
        return super(IMapCooker2, self).get_TileImageInfo()
    def putref_TileImageInfo(self, ppInfo):
        '''Method IMapCooker2.putref_TileImageInfo

           INPUT
            ppInfo              : ITileImageInfo*'''
        return super(IMapCooker2, self).putref_TileImageInfo(ppInfo)
    def put_CacheOnDemand(self, pCacheOnDemand):
        '''Method IMapCooker2.put_CacheOnDemand

           INPUT
            pCacheOnDemand      : VARIANT_BOOL'''
        return super(IMapCooker2, self).put_CacheOnDemand(pCacheOnDemand)
    def get_CacheOnDemand(self):
        '''Method IMapCooker2.get_CacheOnDemand

           OUTPUT
            pCacheOnDemand      : VARIANT_BOOL*'''
        return super(IMapCooker2, self).get_CacheOnDemand()
    def WriteTilingScheme(self, pCacheInfo, pTileImageInfo, cacheDir, LayerName):
        '''Method IMapCooker2.WriteTilingScheme

           INPUTS
            pCacheInfo          : ITileCacheInfo*
            pTileImageInfo      : ITileImageInfo*
            cacheDir            : BSTR
            LayerName           : BSTR'''
        return super(IMapCooker2, self).WriteTilingScheme(pCacheInfo, pTileImageInfo, cacheDir, LayerName)
    def UpdateMapServerCacheScales(self, pScales):
        '''Method IMapCooker2.UpdateMapServerCacheScales

           INPUT
            pScales             : IDoubleArray*'''
        return super(IMapCooker2, self).UpdateMapServerCacheScales(pScales)
    def DeleteByExtent(self, pMap, pLayer, pExtent, pLevels, pTrackCancel):
        '''Method IMapCooker2.DeleteByExtent

           INPUTS
            pMap                : IMap*
            pLayer              : ILayer*
            pExtent             : IEnvelope*
            pLevels             : ILongArray*
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker2, self).DeleteByExtent(pMap, pLayer, pExtent, pLevels, pTrackCancel)
    def UpdateByGeometry(self, pMap, pLayer, pDisplay, pGeometry, pLevels, UpdateMode, pTrackCancel):
        '''Method IMapCooker2.UpdateByGeometry

           INPUTS
            pMap                : IMap*
            pLayer              : ILayer*
            pDisplay            : IDisplay*
            pGeometry           : IGeometry*
            pLevels             : ILongArray*
            UpdateMode          : esriMapCacheUpdateMode
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker2, self).UpdateByGeometry(pMap, pLayer, pDisplay, pGeometry, pLevels, UpdateMode, pTrackCancel)
    def GetStatusTileCount(self):
        '''Method IMapCooker2.GetStatusTileCount

           OUTPUT
            pTileCount          : long*'''
        return super(IMapCooker2, self).GetStatusTileCount()
    def get_Path(self):
        '''Method IMapCooker.get_Path (from IMapCooker)

           OUTPUT
            pPath               : BSTR*'''
        return super(IMapCooker2, self).get_Path()
    def put_Path(self, pPath):
        '''Method IMapCooker.put_Path (from IMapCooker)

           INPUT
            pPath               : BSTR'''
        return super(IMapCooker2, self).put_Path(pPath)
    def get_Extent(self):
        '''Method IMapCooker.get_Extent (from IMapCooker)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IMapCooker2, self).get_Extent()
    def put_Extent(self, ppExtent):
        '''Method IMapCooker.put_Extent (from IMapCooker)

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IMapCooker2, self).put_Extent(ppExtent)
    def get_Format(self):
        '''Method IMapCooker.get_Format (from IMapCooker)

           OUTPUT
            pFormat             : BSTR*'''
        return super(IMapCooker2, self).get_Format()
    def put_Format(self, pFormat):
        '''Method IMapCooker.put_Format (from IMapCooker)

           INPUT
            pFormat             : BSTR'''
        return super(IMapCooker2, self).put_Format(pFormat)
    def get_Antialiasing(self):
        '''Method IMapCooker.get_Antialiasing (from IMapCooker)

           OUTPUT
            pAntialiasing       : VARIANT_BOOL*'''
        return super(IMapCooker2, self).get_Antialiasing()
    def put_Antialiasing(self, pAntialiasing):
        '''Method IMapCooker.put_Antialiasing (from IMapCooker)

           INPUT
            pAntialiasing       : VARIANT_BOOL'''
        return super(IMapCooker2, self).put_Antialiasing(pAntialiasing)
    def get_TileCacheInfo(self):
        '''Method IMapCooker.get_TileCacheInfo (from IMapCooker)

           OUTPUT
            ppCacheInfo         : ITileCacheInfo**'''
        return super(IMapCooker2, self).get_TileCacheInfo()
    def putref_TileCacheInfo(self, ppCacheInfo):
        '''Method IMapCooker.putref_TileCacheInfo (from IMapCooker)

           INPUT
            ppCacheInfo         : ITileCacheInfo*'''
        return super(IMapCooker2, self).putref_TileCacheInfo(ppCacheInfo)
    def get_NumLevels(self):
        '''Method IMapCooker.get_NumLevels (from IMapCooker)

           OUTPUT
            pNumLevels          : long*'''
        return super(IMapCooker2, self).get_NumLevels()
    def Connect(self, Location, Name, pMap):
        '''Method IMapCooker.Connect (from IMapCooker)

           INPUTS
            Location            : BSTR
            Name                : BSTR
            pMap                : IMap*'''
        return super(IMapCooker2, self).Connect(Location, Name, pMap)
    def AddCachedLayers(self, pMap):
        '''Method IMapCooker.AddCachedLayers (from IMapCooker)

           INPUT
            pMap                : IMap*'''
        return super(IMapCooker2, self).AddCachedLayers(pMap)
    def AddLayer(self, Name, pLayer):
        '''Method IMapCooker.AddLayer (from IMapCooker)

           INPUTS
            Name                : BSTR
            pLayer              : ILayer*'''
        return super(IMapCooker2, self).AddLayer(Name, pLayer)
    def Clear(self, pLayer, pExtent):
        '''Method IMapCooker.Clear (from IMapCooker)

           INPUTS
            pLayer              : ILayer*
            pExtent             : IEnvelope*'''
        return super(IMapCooker2, self).Clear(pLayer, pExtent)
    def ClearAll(self):
        '''Method IMapCooker.ClearAll (from IMapCooker)'''
        return super(IMapCooker2, self).ClearAll()
    def Snap(self, pDisplay, pExtent):
        '''Method IMapCooker.Snap (from IMapCooker)

           INPUTS
            pDisplay            : IDisplay*
            pExtent             : IEnvelope*'''
        return super(IMapCooker2, self).Snap(pDisplay, pExtent)
    def Draw(self, pLayer, pDisplay, pTrackCancel):
        '''Method IMapCooker.Draw (from IMapCooker)

           INPUTS
            pLayer              : ILayer*
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker2, self).Draw(pLayer, pDisplay, pTrackCancel)
    def SetDefaultLODInfos(self, NumLevels):
        '''Method IMapCooker.SetDefaultLODInfos (from IMapCooker)

           INPUT
            NumLevels           : long'''
        return super(IMapCooker2, self).SetDefaultLODInfos(NumLevels)
    def Generate(self, pMap, pLayer, pDisplay, pTrackCancel):
        '''Method IMapCooker.Generate (from IMapCooker)

           INPUTS
            pMap                : IMap*
            pLayer              : ILayer*
            pDisplay            : IDisplay*
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker2, self).Generate(pMap, pLayer, pDisplay, pTrackCancel)
    def HasCache(self):
        '''Method IMapCooker.HasCache (from IMapCooker)

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(IMapCooker2, self).HasCache()
    def HasLayerCache(self, pLayer):
        '''Method IMapCooker.HasLayerCache (from IMapCooker)

           INPUT
            pLayer              : ILayer*

           OUTPUT
            pHasCache           : VARIANT_BOOL*'''
        return super(IMapCooker2, self).HasLayerCache(pLayer)
    def GetTile(self, pLayer, Level, Row, Column):
        '''Method IMapCooker.GetTile (from IMapCooker)

           INPUTS
            pLayer              : ILayer*
            Level               : long
            Row                 : long
            Column              : long

           OUTPUT
            ppTile              : SAFEARRAY**'''
        return super(IMapCooker2, self).GetTile(pLayer, Level, Row, Column)
    def PutTile(self, pLayer, Level, Row, Column, ppTile):
        '''Method IMapCooker.PutTile (from IMapCooker)

           INPUTS
            pLayer              : ILayer*
            Level               : long
            Row                 : long
            Column              : long
            ppTile              : SAFEARRAY**'''
        return super(IMapCooker2, self).PutTile(pLayer, Level, Row, Column, ppTile)
    def GetCacheDirectory(self, pLayer):
        '''Method IMapCooker.GetCacheDirectory (from IMapCooker)

           INPUT
            pLayer              : ILayer*

           OUTPUT
            pCacheDir           : BSTR*'''
        return super(IMapCooker2, self).GetCacheDirectory(pLayer)
    def QueryTilePosition(self):
        '''Method IMapCooker.QueryTilePosition (from IMapCooker)

           OUTPUTS
            pLevel              : long*
            pRow                : long*
            pColumn             : long*'''
        return super(IMapCooker2, self).QueryTilePosition()
    def PutTilePosition(self, Level, Row, Column):
        '''Method IMapCooker.PutTilePosition (from IMapCooker)

           INPUTS
            Level               : long
            Row                 : long
            Column              : long'''
        return super(IMapCooker2, self).PutTilePosition(Level, Row, Column)
    def get_MaxTileCount(self):
        '''Method IMapCooker.get_MaxTileCount (from IMapCooker)

           OUTPUT
            pNumTiles           : long*'''
        return super(IMapCooker2, self).get_MaxTileCount()
    def put_MaxTileCount(self, pNumTiles):
        '''Method IMapCooker.put_MaxTileCount (from IMapCooker)

           INPUT
            pNumTiles           : long'''
        return super(IMapCooker2, self).put_MaxTileCount(pNumTiles)
    def Exit(self):
        '''Method IMapCooker.Exit (from IMapCooker)'''
        return super(IMapCooker2, self).Exit()
    def Update(self, pMap, pLayer, pDisplay, pExtent, pLevels, UpdateMode, pTrackCancel):
        '''Method IMapCooker.Update (from IMapCooker)

           INPUTS
            pMap                : IMap*
            pLayer              : ILayer*
            pDisplay            : IDisplay*
            pExtent             : IEnvelope*
            pLevels             : ILongArray*
            UpdateMode          : esriMapCacheUpdateMode
            pTrackCancel        : ITrackCancel*'''
        return super(IMapCooker2, self).Update(pMap, pLayer, pDisplay, pExtent, pLevels, UpdateMode, pTrackCancel)
    def Delete(self):
        '''Method IMapCooker.Delete (from IMapCooker)'''
        return super(IMapCooker2, self).Delete()
    Antialiasing = property(get_Antialiasing, put_Antialiasing, None)
    CacheOnDemand = property(get_CacheOnDemand, put_CacheOnDemand, None)
    Extent = property(get_Extent, put_Extent, None)
    Format = property(get_Format, put_Format, None)
    MaxTileCount = property(get_MaxTileCount, put_MaxTileCount, None)
    NumLevels = property(get_NumLevels, None, None)
    Path = property(get_Path, put_Path, None)
    TileCacheInfo = property(get_TileCacheInfo, putref_TileCacheInfo, None)
    TileImageInfo = property(get_TileImageInfo, putref_TileImageInfo, None)

class IPageLayout(_esriCarto.IPageLayout):
    _IID = uuid.UUID('dd94d76a-836d-11d0-87ec-080009ec732a')

    def __init__(self, *args, **kw):
        super(IPageLayout, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Page(self):
        '''Method IPageLayout.get_Page

           OUTPUT
            Page                : IPage**'''
        return super(IPageLayout, self).get_Page()
    def get_RulerSettings(self):
        '''Method IPageLayout.get_RulerSettings

           OUTPUT
            RulerSettings       : IRulerSettings**'''
        return super(IPageLayout, self).get_RulerSettings()
    def get_SnapGrid(self):
        '''Method IPageLayout.get_SnapGrid

           OUTPUT
            SnapGrid            : ISnapGrid**'''
        return super(IPageLayout, self).get_SnapGrid()
    def get_HorizontalSnapGuides(self):
        '''Method IPageLayout.get_HorizontalSnapGuides

           OUTPUT
            SnapGuides          : ISnapGuides**'''
        return super(IPageLayout, self).get_HorizontalSnapGuides()
    def get_VerticalSnapGuides(self):
        '''Method IPageLayout.get_VerticalSnapGuides

           OUTPUT
            SnapGuides          : ISnapGuides**'''
        return super(IPageLayout, self).get_VerticalSnapGuides()
    def get_ZoomPercent(self):
        '''Method IPageLayout.get_ZoomPercent

           OUTPUT
            percent             : double*'''
        return super(IPageLayout, self).get_ZoomPercent()
    def put_AlignToMargins(self, AlignToMargins):
        '''Method IPageLayout.put_AlignToMargins

           INPUT
            AlignToMargins      : VARIANT_BOOL'''
        return super(IPageLayout, self).put_AlignToMargins(AlignToMargins)
    def get_AlignToMargins(self):
        '''Method IPageLayout.get_AlignToMargins

           OUTPUT
            AlignToMargins      : VARIANT_BOOL*'''
        return super(IPageLayout, self).get_AlignToMargins()
    def ZoomToWidth(self):
        '''Method IPageLayout.ZoomToWidth'''
        return super(IPageLayout, self).ZoomToWidth()
    def ZoomToWhole(self):
        '''Method IPageLayout.ZoomToWhole'''
        return super(IPageLayout, self).ZoomToWhole()
    def ZoomToPercent(self, percent):
        '''Method IPageLayout.ZoomToPercent

           INPUT
            percent             : long'''
        return super(IPageLayout, self).ZoomToPercent(percent)
    def FocusNextMapFrame(self):
        '''Method IPageLayout.FocusNextMapFrame'''
        return super(IPageLayout, self).FocusNextMapFrame()
    def FocusPreviousMapFrame(self):
        '''Method IPageLayout.FocusPreviousMapFrame'''
        return super(IPageLayout, self).FocusPreviousMapFrame()
    def ReplaceMaps(self, maps):
        '''Method IPageLayout.ReplaceMaps

           INPUT
            maps                : IMaps*'''
        return super(IPageLayout, self).ReplaceMaps(maps)
    AlignToMargins = property(get_AlignToMargins, put_AlignToMargins, None)
    HorizontalSnapGuides = property(get_HorizontalSnapGuides, None, None)
    Page = property(get_Page, None, None)
    RulerSettings = property(get_RulerSettings, None, None)
    SnapGrid = property(get_SnapGrid, None, None)
    VerticalSnapGuides = property(get_VerticalSnapGuides, None, None)
    ZoomPercent = property(get_ZoomPercent, None, None)

class IMxdContents(_esriCarto.IMxdContents):
    _IID = uuid.UUID('be202904-9c7f-4d51-80b2-dbc960224e7f')
    def get_PageLayout(self):
        '''Method IMxdContents.get_PageLayout

           OUTPUT
            ppPageLayout        : IPageLayout**'''
        return super(IMxdContents, self).get_PageLayout()
    def get_Map(self):
        '''Method IMxdContents.get_Map

           OUTPUT
            ppMap               : IMap**'''
        return super(IMxdContents, self).get_Map()
    def get_ActiveView(self):
        '''Method IMxdContents.get_ActiveView

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IMxdContents, self).get_ActiveView()
    ActiveView = property(get_ActiveView, None, None)
    Map = property(get_Map, None, None)
    PageLayout = property(get_PageLayout, None, None)

class IPrintAndExport(_esriCarto.IPrintAndExport):
    _IID = uuid.UUID('40a1760a-5439-4d26-b29d-0f0827a946f4')
    def get_PrinterNames(self):
        '''Method IPrintAndExport.get_PrinterNames

           OUTPUT
            PrinterNames        : IEnumBSTR**'''
        return super(IPrintAndExport, self).get_PrinterNames()
    def get_PageRow(self, ActiveView, PageName):
        '''Method IPrintAndExport.get_PageRow

           INPUTS
            ActiveView          : IActiveView*
            PageName            : BSTR

           OUTPUT
            PageRow             : IRow**'''
        return super(IPrintAndExport, self).get_PageRow(ActiveView, PageName)
    def get_PageCount(self, ActiveView):
        '''Method IPrintAndExport.get_PageCount

           INPUT
            ActiveView          : IActiveView*

           OUTPUT
            pPageCount          : long*'''
        return super(IPrintAndExport, self).get_PageCount(ActiveView)
    def PrintPages(self, pActiveView, pPrinter, pPage, options, resRatio, pTrackCancel):
        '''Method IPrintAndExport.PrintPages

           INPUTS
            pActiveView         : IActiveView*
            pPrinter            : IPrinter*
            pPage               : IPage*
            options             : IPrintAndExportPageOptions*
            resRatio            : long
            pTrackCancel        : ITrackCancel*'''
        return super(IPrintAndExport, self).PrintPages(pActiveView, pPrinter, pPage, options, resRatio, pTrackCancel)
    def Print(self, pActiveView, pPrinter, pPage, PageID, resRatio, pTrackCancel):
        '''Method IPrintAndExport.Print

           INPUTS
            pActiveView         : IActiveView*
            pPrinter            : IPrinter*
            pPage               : IPage*
            PageID              : long
            resRatio            : long
            pTrackCancel        : ITrackCancel*'''
        return super(IPrintAndExport, self).Print(pActiveView, pPrinter, pPage, PageID, resRatio, pTrackCancel)
    def ExportPages(self, pActiveView, pPDFExport, options, Resolution, pTrackCancel):
        '''Method IPrintAndExport.ExportPages

           INPUTS
            pActiveView         : IActiveView*
            pPDFExport          : IExportPDF*
            options             : IPrintAndExportPageOptions*
            Resolution          : double
            pTrackCancel        : ITrackCancel*'''
        return super(IPrintAndExport, self).ExportPages(pActiveView, pPDFExport, options, Resolution, pTrackCancel)
    def Export(self, pActiveView, pExport, Resolution, clip2GraphicExtent, pTrackCancel):
        '''Method IPrintAndExport.Export

           INPUTS
            pActiveView         : IActiveView*
            pExport             : IExport*
            Resolution          : double
            clip2GraphicExtent  : VARIANT_BOOL
            pTrackCancel        : ITrackCancel*'''
        return super(IPrintAndExport, self).Export(pActiveView, pExport, Resolution, clip2GraphicExtent, pTrackCancel)
    PrinterNames = property(get_PrinterNames, None, None)
    PageCount = IndexProperty(get_PageCount, None)

class IPageLayoutSnap(_esriCarto.IPageLayoutSnap):
    _IID = uuid.UUID('fc27faaf-db88-11d1-8778-0000f8751720')

    def __init__(self, *args, **kw):
        super(IPageLayoutSnap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PageLayout(self, _arg1):
        '''Method IPageLayoutSnap.put_PageLayout

           INPUT
            _arg1               : IPageLayout*'''
        return super(IPageLayoutSnap, self).put_PageLayout(_arg1)
    def get_Name(self):
        '''Method IGraphicSnap.get_Name (from IGraphicSnap)

           OUTPUT
            Name                : BSTR*'''
        return super(IPageLayoutSnap, self).get_Name()
    def SnapX(self, Shape, Tolerance):
        '''Method IGraphicSnap.SnapX (from IGraphicSnap)

           INPUTS
            Shape               : IGeometry*
            Tolerance           : double

           OUTPUT
            snapped             : VARIANT_BOOL*'''
        return super(IPageLayoutSnap, self).SnapX(Shape, Tolerance)
    def SnapY(self, Shape, Tolerance):
        '''Method IGraphicSnap.SnapY (from IGraphicSnap)

           INPUTS
            Shape               : IGeometry*
            Tolerance           : double

           OUTPUT
            snapped             : VARIANT_BOOL*'''
        return super(IPageLayoutSnap, self).SnapY(Shape, Tolerance)
    Name = property(get_Name, None, None)
    PageLayout = property(None, put_PageLayout, None)

class IPageLayout2(_esriCarto.IPageLayout2):
    _IID = uuid.UUID('dbb71b69-db4e-4780-ae6f-39ea7a4a075f')

    def __init__(self, *args, **kw):
        super(IPageLayout2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Page(self):
        '''Method IPageLayout2.get_Page

           OUTPUT
            Page                : IPage**'''
        return super(IPageLayout2, self).get_Page()
    def get_RulerSettings(self):
        '''Method IPageLayout2.get_RulerSettings

           OUTPUT
            RulerSettings       : IRulerSettings**'''
        return super(IPageLayout2, self).get_RulerSettings()
    def get_SnapGrid(self):
        '''Method IPageLayout2.get_SnapGrid

           OUTPUT
            SnapGrid            : ISnapGrid**'''
        return super(IPageLayout2, self).get_SnapGrid()
    def get_HorizontalSnapGuides(self):
        '''Method IPageLayout2.get_HorizontalSnapGuides

           OUTPUT
            SnapGuides          : ISnapGuides**'''
        return super(IPageLayout2, self).get_HorizontalSnapGuides()
    def get_VerticalSnapGuides(self):
        '''Method IPageLayout2.get_VerticalSnapGuides

           OUTPUT
            SnapGuides          : ISnapGuides**'''
        return super(IPageLayout2, self).get_VerticalSnapGuides()
    def get_ZoomPercent(self):
        '''Method IPageLayout2.get_ZoomPercent

           OUTPUT
            percent             : double*'''
        return super(IPageLayout2, self).get_ZoomPercent()
    def put_AlignToMargins(self, AlignToMargins):
        '''Method IPageLayout2.put_AlignToMargins

           INPUT
            AlignToMargins      : VARIANT_BOOL'''
        return super(IPageLayout2, self).put_AlignToMargins(AlignToMargins)
    def get_AlignToMargins(self):
        '''Method IPageLayout2.get_AlignToMargins

           OUTPUT
            AlignToMargins      : VARIANT_BOOL*'''
        return super(IPageLayout2, self).get_AlignToMargins()
    def ZoomToWidth(self):
        '''Method IPageLayout2.ZoomToWidth'''
        return super(IPageLayout2, self).ZoomToWidth()
    def ZoomToWhole(self):
        '''Method IPageLayout2.ZoomToWhole'''
        return super(IPageLayout2, self).ZoomToWhole()
    def ZoomToPercent(self, percent):
        '''Method IPageLayout2.ZoomToPercent

           INPUT
            percent             : long'''
        return super(IPageLayout2, self).ZoomToPercent(percent)
    def FocusNextMapFrame(self):
        '''Method IPageLayout2.FocusNextMapFrame'''
        return super(IPageLayout2, self).FocusNextMapFrame()
    def FocusPreviousMapFrame(self):
        '''Method IPageLayout2.FocusPreviousMapFrame'''
        return super(IPageLayout2, self).FocusPreviousMapFrame()
    def ReplaceMaps(self, maps):
        '''Method IPageLayout2.ReplaceMaps

           INPUT
            maps                : IMaps*'''
        return super(IPageLayout2, self).ReplaceMaps(maps)
    def putref_ContentProvider(self, Provider):
        '''Method IPageLayout2.putref_ContentProvider

           INPUT
            Provider            : IUnknown*'''
        return super(IPageLayout2, self).putref_ContentProvider(Provider)
    def get_ContentProvider(self):
        '''Method IPageLayout2.get_ContentProvider

           OUTPUT
            Provider            : IUnknown**'''
        return super(IPageLayout2, self).get_ContentProvider()
    def ClearContent(self):
        '''Method IPageLayout2.ClearContent'''
        return super(IPageLayout2, self).ClearContent()
    def get_Printer(self):
        '''Method IPageLayout2.get_Printer

           OUTPUT
            Printer             : IPrinter**'''
        return super(IPageLayout2, self).get_Printer()
    AlignToMargins = property(get_AlignToMargins, put_AlignToMargins, None)
    ContentProvider = property(get_ContentProvider, putref_ContentProvider, None)
    HorizontalSnapGuides = property(get_HorizontalSnapGuides, None, None)
    Page = property(get_Page, None, None)
    Printer = property(get_Printer, None, None)
    RulerSettings = property(get_RulerSettings, None, None)
    SnapGrid = property(get_SnapGrid, None, None)
    VerticalSnapGuides = property(get_VerticalSnapGuides, None, None)
    ZoomPercent = property(get_ZoomPercent, None, None)

class IPageLayout3(_esriCarto.IPageLayout3):
    _IID = uuid.UUID('dbb71b6a-db4e-4780-ae6f-39ea7a4a075f')

    def __init__(self, *args, **kw):
        super(IPageLayout3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Page(self):
        '''Method IPageLayout3.get_Page

           OUTPUT
            Page                : IPage**'''
        return super(IPageLayout3, self).get_Page()
    def get_RulerSettings(self):
        '''Method IPageLayout3.get_RulerSettings

           OUTPUT
            RulerSettings       : IRulerSettings**'''
        return super(IPageLayout3, self).get_RulerSettings()
    def get_SnapGrid(self):
        '''Method IPageLayout3.get_SnapGrid

           OUTPUT
            SnapGrid            : ISnapGrid**'''
        return super(IPageLayout3, self).get_SnapGrid()
    def get_HorizontalSnapGuides(self):
        '''Method IPageLayout3.get_HorizontalSnapGuides

           OUTPUT
            SnapGuides          : ISnapGuides**'''
        return super(IPageLayout3, self).get_HorizontalSnapGuides()
    def get_VerticalSnapGuides(self):
        '''Method IPageLayout3.get_VerticalSnapGuides

           OUTPUT
            SnapGuides          : ISnapGuides**'''
        return super(IPageLayout3, self).get_VerticalSnapGuides()
    def get_ZoomPercent(self):
        '''Method IPageLayout3.get_ZoomPercent

           OUTPUT
            percent             : double*'''
        return super(IPageLayout3, self).get_ZoomPercent()
    def put_AlignToMargins(self, AlignToMargins):
        '''Method IPageLayout3.put_AlignToMargins

           INPUT
            AlignToMargins      : VARIANT_BOOL'''
        return super(IPageLayout3, self).put_AlignToMargins(AlignToMargins)
    def get_AlignToMargins(self):
        '''Method IPageLayout3.get_AlignToMargins

           OUTPUT
            AlignToMargins      : VARIANT_BOOL*'''
        return super(IPageLayout3, self).get_AlignToMargins()
    def ZoomToWidth(self):
        '''Method IPageLayout3.ZoomToWidth'''
        return super(IPageLayout3, self).ZoomToWidth()
    def ZoomToWhole(self):
        '''Method IPageLayout3.ZoomToWhole'''
        return super(IPageLayout3, self).ZoomToWhole()
    def ZoomToPercent(self, percent):
        '''Method IPageLayout3.ZoomToPercent

           INPUT
            percent             : long'''
        return super(IPageLayout3, self).ZoomToPercent(percent)
    def FocusNextMapFrame(self):
        '''Method IPageLayout3.FocusNextMapFrame'''
        return super(IPageLayout3, self).FocusNextMapFrame()
    def FocusPreviousMapFrame(self):
        '''Method IPageLayout3.FocusPreviousMapFrame'''
        return super(IPageLayout3, self).FocusPreviousMapFrame()
    def ReplaceMaps(self, maps):
        '''Method IPageLayout3.ReplaceMaps

           INPUT
            maps                : IMaps*'''
        return super(IPageLayout3, self).ReplaceMaps(maps)
    def putref_ContentProvider(self, Provider):
        '''Method IPageLayout3.putref_ContentProvider

           INPUT
            Provider            : IUnknown*'''
        return super(IPageLayout3, self).putref_ContentProvider(Provider)
    def get_ContentProvider(self):
        '''Method IPageLayout3.get_ContentProvider

           OUTPUT
            Provider            : IUnknown**'''
        return super(IPageLayout3, self).get_ContentProvider()
    def ClearContent(self):
        '''Method IPageLayout3.ClearContent'''
        return super(IPageLayout3, self).ClearContent()
    def get_Printer(self):
        '''Method IPageLayout3.get_Printer

           OUTPUT
            Printer             : IPrinter**'''
        return super(IPageLayout3, self).get_Printer()
    def get_DelayEvents(self):
        '''Method IPageLayout3.get_DelayEvents

           OUTPUT
            DelayEvents         : VARIANT_BOOL*'''
        return super(IPageLayout3, self).get_DelayEvents()
    def put_DelayEvents(self, DelayEvents):
        '''Method IPageLayout3.put_DelayEvents

           INPUT
            DelayEvents         : VARIANT_BOOL'''
        return super(IPageLayout3, self).put_DelayEvents(DelayEvents)
    AlignToMargins = property(get_AlignToMargins, put_AlignToMargins, None)
    ContentProvider = property(get_ContentProvider, putref_ContentProvider, None)
    DelayEvents = property(get_DelayEvents, put_DelayEvents, None)
    HorizontalSnapGuides = property(get_HorizontalSnapGuides, None, None)
    Page = property(get_Page, None, None)
    Printer = property(get_Printer, None, None)
    RulerSettings = property(get_RulerSettings, None, None)
    SnapGrid = property(get_SnapGrid, None, None)
    VerticalSnapGuides = property(get_VerticalSnapGuides, None, None)
    ZoomPercent = property(get_ZoomPercent, None, None)

class IMapDocument(_esriCarto.IMapDocument):
    _IID = uuid.UUID('5366451c-a001-4179-b8cb-e8f014628a44')
    def get_IsMapDocument(self, sDocument):
        '''Method IMapDocument.get_IsMapDocument

           INPUT
            sDocument           : BSTR

           OUTPUT
            IsMapDocument       : VARIANT_BOOL*'''
        return super(IMapDocument, self).get_IsMapDocument(sDocument)
    def get_IsPresent(self, sDocument):
        '''Method IMapDocument.get_IsPresent

           INPUT
            sDocument           : BSTR

           OUTPUT
            IsPresent           : VARIANT_BOOL*'''
        return super(IMapDocument, self).get_IsPresent(sDocument)
    def get_IsReadOnly(self, sDocument):
        '''Method IMapDocument.get_IsReadOnly

           INPUT
            sDocument           : BSTR

           OUTPUT
            IsReadOnly          : VARIANT_BOOL*'''
        return super(IMapDocument, self).get_IsReadOnly(sDocument)
    def get_IsRestricted(self, sDocument):
        '''Method IMapDocument.get_IsRestricted

           INPUT
            sDocument           : BSTR

           OUTPUT
            IsRestricted        : VARIANT_BOOL*'''
        return super(IMapDocument, self).get_IsRestricted(sDocument)
    def get_IsPasswordProtected(self, sDocument):
        '''Method IMapDocument.get_IsPasswordProtected

           INPUT
            sDocument           : BSTR

           OUTPUT
            IsPasswordProtected : VARIANT_BOOL*'''
        return super(IMapDocument, self).get_IsPasswordProtected(sDocument)
    def New(self, sDocument):
        '''Method IMapDocument.New

           INPUT
            sDocument           : BSTR'''
        return super(IMapDocument, self).New(sDocument)
    def Open(self, sDocument, bsPassword):
        '''Method IMapDocument.Open

           INPUTS
            sDocument           : BSTR
            bsPassword          : BSTR'''
        return super(IMapDocument, self).Open(sDocument, bsPassword)
    def get_DocumentFilename(self):
        '''Method IMapDocument.get_DocumentFilename

           OUTPUT
            sDocument           : BSTR*'''
        return super(IMapDocument, self).get_DocumentFilename()
    def get_DocumentType(self):
        '''Method IMapDocument.get_DocumentType

           OUTPUT
            Type                : esriMapDocumentType*'''
        return super(IMapDocument, self).get_DocumentType()
    def get_UsesRelativePaths(self):
        '''Method IMapDocument.get_UsesRelativePaths

           OUTPUT
            bUsesRelativePaths  : VARIANT_BOOL*'''
        return super(IMapDocument, self).get_UsesRelativePaths()
    def get_DocumentVersion(self):
        '''Method IMapDocument.get_DocumentVersion

           OUTPUT
            versionInfo         : esriMapDocumentVersionInfo*'''
        return super(IMapDocument, self).get_DocumentVersion()
    def get_PageLayout(self):
        '''Method IMapDocument.get_PageLayout

           OUTPUT
            ppPageLayout        : IPageLayout**'''
        return super(IMapDocument, self).get_PageLayout()
    def get_ActiveView(self):
        '''Method IMapDocument.get_ActiveView

           OUTPUT
            ppActiveView        : IActiveView**'''
        return super(IMapDocument, self).get_ActiveView()
    def get_MapCount(self):
        '''Method IMapDocument.get_MapCount

           OUTPUT
            MapCount            : long*'''
        return super(IMapDocument, self).get_MapCount()
    def get_Map(self, mapIndex):
        '''Method IMapDocument.get_Map

           INPUT
            mapIndex            : long

           OUTPUT
            ppMap               : IMap**'''
        return super(IMapDocument, self).get_Map(mapIndex)
    def get_Layer(self, mapIndex, layerIndex):
        '''Method IMapDocument.get_Layer

           INPUTS
            mapIndex            : long
            layerIndex          : long

           OUTPUT
            ppLayer             : ILayer**'''
        return super(IMapDocument, self).get_Layer(mapIndex, layerIndex)
    def get_Printer(self):
        '''Method IMapDocument.get_Printer

           OUTPUT
            ppPrinter           : IPrinter**'''
        return super(IMapDocument, self).get_Printer()
    def get_Thumbnail(self):
        '''Method IMapDocument.get_Thumbnail

           OUTPUT
            ppPicture           : IPicture**'''
        return super(IMapDocument, self).get_Thumbnail()
    def Close(self):
        '''Method IMapDocument.Close'''
        return super(IMapDocument, self).Close()
    def GetVersionInfo(self):
        '''Method IMapDocument.GetVersionInfo

           OUTPUTS
            versionInfoMissing  : VARIANT_BOOL*
            lMajor              : long*
            lMinor              : long*
            lRevision           : long*
            lBuild              : long*'''
        return super(IMapDocument, self).GetVersionInfo()
    def ReplaceContents(self, pObject):
        '''Method IMapDocument.ReplaceContents

           INPUT
            pObject             : IMxdContents*'''
        return super(IMapDocument, self).ReplaceContents(pObject)
    def SetActiveView(self, pActiveView):
        '''Method IMapDocument.SetActiveView

           INPUT
            pActiveView         : IActiveView*'''
        return super(IMapDocument, self).SetActiveView(pActiveView)
    def Save(self, bUseRelativePaths, bCreateThumnbail):
        '''Method IMapDocument.Save

           INPUTS
            bUseRelativePaths   : VARIANT_BOOL
            bCreateThumnbail    : VARIANT_BOOL'''
        return super(IMapDocument, self).Save(bUseRelativePaths, bCreateThumnbail)
    def SaveAs(self, sDocument, bUseRelativePaths, bCreateThumnbail):
        '''Method IMapDocument.SaveAs

           INPUTS
            sDocument           : BSTR
            bUseRelativePaths   : VARIANT_BOOL
            bCreateThumnbail    : VARIANT_BOOL'''
        return super(IMapDocument, self).SaveAs(sDocument, bUseRelativePaths, bCreateThumnbail)
    ActiveView = property(get_ActiveView, None, None)
    DocumentFilename = property(get_DocumentFilename, None, None)
    DocumentType = property(get_DocumentType, None, None)
    DocumentVersion = property(get_DocumentVersion, None, None)
    MapCount = property(get_MapCount, None, None)
    PageLayout = property(get_PageLayout, None, None)
    Printer = property(get_Printer, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    UsesRelativePaths = property(get_UsesRelativePaths, None, None)
    IsMapDocument = IndexProperty(get_IsMapDocument, None)
    IsPasswordProtected = IndexProperty(get_IsPasswordProtected, None)
    IsPresent = IndexProperty(get_IsPresent, None)
    IsReadOnly = IndexProperty(get_IsReadOnly, None)
    IsRestricted = IndexProperty(get_IsRestricted, None)
    Map = IndexProperty(get_Map, None)

class IMxdServer(_esriCarto.IMxdServer):
    _IID = uuid.UUID('bd2e03fc-a244-46af-93ed-b522a090de89')
    def Start(self, mxdPath):
        '''Method IMxdServer.Start

           INPUT
            mxdPath             : BSTR'''
        return super(IMxdServer, self).Start(mxdPath)
    def StartWithData(self, pDataset):
        '''Method IMxdServer.StartWithData

           INPUT
            pDataset            : IDataset*'''
        return super(IMxdServer, self).StartWithData(pDataset)
    def Stop(self):
        '''Method IMxdServer.Stop'''
        return super(IMxdServer, self).Stop()
    def get_MapDescriptors(self):
        '''Method IMxdServer.get_MapDescriptors

           OUTPUT
            MapDescriptors      : IArray**'''
        return super(IMxdServer, self).get_MapDescriptors()
    def get_LayerDescriptors(self, MapName):
        '''Method IMxdServer.get_LayerDescriptors

           INPUT
            MapName             : BSTR

           OUTPUT
            LayerDescriptors    : IArray**'''
        return super(IMxdServer, self).get_LayerDescriptors(MapName)
    def get_Bookmarks(self, MapName):
        '''Method IMxdServer.get_Bookmarks

           INPUT
            MapName             : BSTR

           OUTPUT
            Bookmarks           : IEnumSpatialBookmark**'''
        return super(IMxdServer, self).get_Bookmarks(MapName)
    def get_Thumbnail(self):
        '''Method IMxdServer.get_Thumbnail

           OUTPUT
            Image               : IPictureDisp**'''
        return super(IMxdServer, self).get_Thumbnail()
    def GetMapPicture(self, MapDescriptor, Dpi, pixelBounds):
        '''Method IMxdServer.GetMapPicture

           INPUTS
            MapDescriptor       : IMapDescriptor*
            Dpi                 : int
            pixelBounds         : tagRECT*

           OUTPUT
            pict                : IPictureDisp**'''
        return super(IMxdServer, self).GetMapPicture(MapDescriptor, Dpi, pixelBounds)
    def GetMapBitmapHandle(self, MapDescriptor, Dpi, pixelBounds):
        '''Method IMxdServer.GetMapBitmapHandle

           INPUTS
            MapDescriptor       : IMapDescriptor*
            Dpi                 : int
            pixelBounds         : tagRECT*

           OUTPUT
            hBmp                : OLE_HANDLE*'''
        return super(IMxdServer, self).GetMapBitmapHandle(MapDescriptor, Dpi, pixelBounds)
    def ReleaseBitmapHandle(self, hBmp):
        '''Method IMxdServer.ReleaseBitmapHandle

           INPUT
            hBmp                : OLE_HANDLE'''
        return super(IMxdServer, self).ReleaseBitmapHandle(hBmp)
    def ExportMapImage(self, MapDescriptor, Dpi, imageWidth, imageHeight, fileType, outputFileName):
        '''Method IMxdServer.ExportMapImage

           INPUTS
            MapDescriptor       : IMapDescriptor*
            Dpi                 : int
            imageWidth          : int
            imageHeight         : int
            fileType            : BSTR
            outputFileName      : BSTR

           OUTPUT
            fittedBounds        : IEnvelope**'''
        return super(IMxdServer, self).ExportMapImage(MapDescriptor, Dpi, imageWidth, imageHeight, fileType, outputFileName)
    def ExportLayout(self, MapDescriptors, Dpi, imageWidth, imageHeight, pageExtent, fileType, outputFileName):
        '''Method IMxdServer.ExportLayout

           INPUTS
            MapDescriptors      : IArray*
            Dpi                 : int
            imageWidth          : int
            imageHeight         : int
            pageExtent          : IEnvelope*
            fileType            : BSTR
            outputFileName      : BSTR

           OUTPUT
            fittedBounds        : IEnvelope**'''
        return super(IMxdServer, self).ExportLayout(MapDescriptors, Dpi, imageWidth, imageHeight, pageExtent, fileType, outputFileName)
    def ExportLegend(self, Legend, MapDescriptor, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName):
        '''Method IMxdServer.ExportLegend

           INPUTS
            Legend              : ILegend*
            MapDescriptor       : IMapDescriptor*
            Dpi                 : int
            imageWidth          : int
            imageHeight         : int
            BackgroundColor     : IColor*
            fileType            : BSTR
            outputFileName      : BSTR'''
        return super(IMxdServer, self).ExportLegend(Legend, MapDescriptor, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName)
    def ExportScaleBar(self, Scalebar, mapImageWidthPixels, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName):
        '''Method IMxdServer.ExportScaleBar

           INPUTS
            Scalebar            : IScaleBar*
            mapImageWidthPixels : int
            Dpi                 : int
            imageWidth          : int
            imageHeight         : int
            BackgroundColor     : IColor*
            fileType            : BSTR
            outputFileName      : BSTR'''
        return super(IMxdServer, self).ExportScaleBar(Scalebar, mapImageWidthPixels, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName)
    def ExportNorthArrow(self, arrow, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName):
        '''Method IMxdServer.ExportNorthArrow

           INPUTS
            arrow               : INorthArrow*
            Dpi                 : int
            imageWidth          : int
            imageHeight         : int
            BackgroundColor     : IColor*
            fileType            : BSTR
            outputFileName      : BSTR'''
        return super(IMxdServer, self).ExportNorthArrow(arrow, Dpi, imageWidth, imageHeight, BackgroundColor, fileType, outputFileName)
    def get_TOCInfo(self, MapName, LayerID):
        '''Method IMxdServer.get_TOCInfo

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            tocGroups           : IArray**'''
        return super(IMxdServer, self).get_TOCInfo(MapName, LayerID)
    def get_DefaultMapName(self):
        '''Method IMxdServer.get_DefaultMapName

           OUTPUT
            MapName             : BSTR*'''
        return super(IMxdServer, self).get_DefaultMapName()
    def GetFeatureValue(self, MapName, LayerID, Feature, FieldName):
        '''Method IMxdServer.GetFeatureValue

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Feature             : IFeature*
            FieldName           : BSTR

           OUTPUT
            fieldValue          : BSTR*'''
        return super(IMxdServer, self).GetFeatureValue(MapName, LayerID, Feature, FieldName)
    DefaultMapName = property(get_DefaultMapName, None, None)
    MapDescriptors = property(get_MapDescriptors, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    Bookmarks = IndexProperty(get_Bookmarks, None)
    LayerDescriptors = IndexProperty(get_LayerDescriptors, None)

class IMxdServerObjects(_esriCarto.IMxdServerObjects):
    _IID = uuid.UUID('50949b31-90ac-4290-b001-952ef5204a62')
    def get_Map(self, MapName):
        '''Method IMxdServerObjects.get_Map

           INPUT
            MapName             : BSTR

           OUTPUT
            mapObject           : IMap**'''
        return super(IMxdServerObjects, self).get_Map(MapName)
    def get_Layer(self, MapName, LayerID):
        '''Method IMxdServerObjects.get_Layer

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            layerObject         : ILayer**'''
        return super(IMxdServerObjects, self).get_Layer(MapName, LayerID)
    def get_PageLayout(self):
        '''Method IMxdServerObjects.get_PageLayout

           OUTPUT
            pageLayoutObject    : IPageLayout**'''
        return super(IMxdServerObjects, self).get_PageLayout()
    PageLayout = property(get_PageLayout, None, None)
    Map = IndexProperty(get_Map, None)

class IMapServerObjects(_esriCarto.IMapServerObjects):
    _IID = uuid.UUID('651521f3-aaff-42b9-8c2d-1980625a13bf')
    def get_Map(self, MapName):
        '''Method IMapServerObjects.get_Map

           INPUT
            MapName             : BSTR

           OUTPUT
            mapObject           : IMap**'''
        return super(IMapServerObjects, self).get_Map(MapName)
    def get_Layer(self, MapName, LayerID):
        '''Method IMapServerObjects.get_Layer

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            layerObject         : ILayer**'''
        return super(IMapServerObjects, self).get_Layer(MapName, LayerID)
    def get_PageLayout(self):
        '''Method IMapServerObjects.get_PageLayout

           OUTPUT
            pageLayoutObject    : IPageLayout**'''
        return super(IMapServerObjects, self).get_PageLayout()
    def get_Thumbnail(self):
        '''Method IMapServerObjects.get_Thumbnail

           OUTPUT
            Picture             : IPictureDisp**'''
        return super(IMapServerObjects, self).get_Thumbnail()
    def RefreshServerObjects(self):
        '''Method IMapServerObjects.RefreshServerObjects'''
        return super(IMapServerObjects, self).RefreshServerObjects()
    def ApplyMapDescription(self, MapDescription, mapDisplay):
        '''Method IMapServerObjects.ApplyMapDescription

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*'''
        return super(IMapServerObjects, self).ApplyMapDescription(MapDescription, mapDisplay)
    PageLayout = property(get_PageLayout, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    Map = IndexProperty(get_Map, None)

class IMapServerObjects2(_esriCarto.IMapServerObjects2):
    _IID = uuid.UUID('732da8b0-beb9-49b6-bf83-c1df94f22aa0')
    def get_LayerID(self, MapName, pLayer):
        '''Method IMapServerObjects2.get_LayerID

           INPUTS
            MapName             : BSTR
            pLayer              : ILayer*

           OUTPUT
            ID                  : long*'''
        return super(IMapServerObjects2, self).get_LayerID(MapName, pLayer)
    def get_Map(self, MapName):
        '''Method IMapServerObjects2.get_Map

           INPUT
            MapName             : BSTR

           OUTPUT
            mapObject           : IMap**'''
        return super(IMapServerObjects2, self).get_Map(MapName)
    def get_Layer(self, MapName, LayerID):
        '''Method IMapServerObjects2.get_Layer

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            layerObject         : ILayer**'''
        return super(IMapServerObjects2, self).get_Layer(MapName, LayerID)
    def get_PageLayout(self):
        '''Method IMapServerObjects2.get_PageLayout

           OUTPUT
            pageLayoutObject    : IPageLayout**'''
        return super(IMapServerObjects2, self).get_PageLayout()
    def get_Thumbnail(self):
        '''Method IMapServerObjects2.get_Thumbnail

           OUTPUT
            Picture             : IPictureDisp**'''
        return super(IMapServerObjects2, self).get_Thumbnail()
    def RefreshServerObjects(self):
        '''Method IMapServerObjects2.RefreshServerObjects'''
        return super(IMapServerObjects2, self).RefreshServerObjects()
    def ApplyMapDescription(self, MapDescription, mapDisplay):
        '''Method IMapServerObjects2.ApplyMapDescription

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*'''
        return super(IMapServerObjects2, self).ApplyMapDescription(MapDescription, mapDisplay)
    PageLayout = property(get_PageLayout, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    Map = IndexProperty(get_Map, None)

class IMapReader(_esriCarto.IMapReader):
    _IID = uuid.UUID('f543891f-8c43-487d-839e-83d1cd4af33c')
    def Open(self, FilePath):
        '''Method IMapReader.Open

           INPUT
            FilePath            : BSTR'''
        return super(IMapReader, self).Open(FilePath)
    def Close(self):
        '''Method IMapReader.Close'''
        return super(IMapReader, self).Close()
    def get_MapCount(self):
        '''Method IMapReader.get_MapCount

           OUTPUT
            Count               : long*'''
        return super(IMapReader, self).get_MapCount()
    def get_Map(self, Index):
        '''Method IMapReader.get_Map

           INPUT
            Index               : long

           OUTPUT
            Map                 : IMap**'''
        return super(IMapReader, self).get_Map(Index)
    def get_PageLayout(self):
        '''Method IMapReader.get_PageLayout

           OUTPUT
            layout              : IPageLayout**'''
        return super(IMapReader, self).get_PageLayout()
    def get_Thumbnail(self):
        '''Method IMapReader.get_Thumbnail

           OUTPUT
            Picture             : IPictureDisp**'''
        return super(IMapReader, self).get_Thumbnail()
    def get_DocumentInfo(self):
        '''Method IMapReader.get_DocumentInfo

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapReader, self).get_DocumentInfo()
    def get_AccessInternalObjects(self):
        '''Method IMapReader.get_AccessInternalObjects

           OUTPUT
            bAccess             : VARIANT_BOOL*'''
        return super(IMapReader, self).get_AccessInternalObjects()
    AccessInternalObjects = property(get_AccessInternalObjects, None, None)
    DocumentInfo = property(get_DocumentInfo, None, None)
    MapCount = property(get_MapCount, None, None)
    PageLayout = property(get_PageLayout, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    Map = IndexProperty(get_Map, None)

class IMapServerObjects3(_esriCarto.IMapServerObjects3):
    _IID = uuid.UUID('fbf3935d-72da-43a3-afc0-56f124e30773')
    def get_StandaloneTableID(self, MapName, pTable):
        '''Method IMapServerObjects3.get_StandaloneTableID

           INPUTS
            MapName             : BSTR
            pTable              : ITable*

           OUTPUT
            ID                  : long*'''
        return super(IMapServerObjects3, self).get_StandaloneTableID(MapName, pTable)
    def get_StandaloneTable(self, MapName, StandaloneTableID):
        '''Method IMapServerObjects3.get_StandaloneTable

           INPUTS
            MapName             : BSTR
            StandaloneTableID   : long

           OUTPUT
            standaloneTableObject: ITable**'''
        return super(IMapServerObjects3, self).get_StandaloneTable(MapName, StandaloneTableID)
    def get_LayerID(self, MapName, pLayer):
        '''Method IMapServerObjects3.get_LayerID

           INPUTS
            MapName             : BSTR
            pLayer              : ILayer*

           OUTPUT
            ID                  : long*'''
        return super(IMapServerObjects3, self).get_LayerID(MapName, pLayer)
    def get_Map(self, MapName):
        '''Method IMapServerObjects3.get_Map

           INPUT
            MapName             : BSTR

           OUTPUT
            mapObject           : IMap**'''
        return super(IMapServerObjects3, self).get_Map(MapName)
    def get_Layer(self, MapName, LayerID):
        '''Method IMapServerObjects3.get_Layer

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            layerObject         : ILayer**'''
        return super(IMapServerObjects3, self).get_Layer(MapName, LayerID)
    def get_PageLayout(self):
        '''Method IMapServerObjects3.get_PageLayout

           OUTPUT
            pageLayoutObject    : IPageLayout**'''
        return super(IMapServerObjects3, self).get_PageLayout()
    def get_Thumbnail(self):
        '''Method IMapServerObjects3.get_Thumbnail

           OUTPUT
            Picture             : IPictureDisp**'''
        return super(IMapServerObjects3, self).get_Thumbnail()
    def RefreshServerObjects(self):
        '''Method IMapServerObjects3.RefreshServerObjects'''
        return super(IMapServerObjects3, self).RefreshServerObjects()
    def ApplyMapDescription(self, MapDescription, mapDisplay):
        '''Method IMapServerObjects3.ApplyMapDescription

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*'''
        return super(IMapServerObjects3, self).ApplyMapDescription(MapDescription, mapDisplay)
    PageLayout = property(get_PageLayout, None, None)
    Thumbnail = property(get_Thumbnail, None, None)
    Map = IndexProperty(get_Map, None)

class IRealTimeFeedManager(_esriCarto.IRealTimeFeedManager):
    _IID = uuid.UUID('bf309fcd-69af-4311-8803-c4960f378659')

    def __init__(self, *args, **kw):
        super(IRealTimeFeedManager, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RealTimeFeed(self):
        '''Method IRealTimeFeedManager.get_RealTimeFeed

           OUTPUT
            ppRealTimeFeed      : IRealTimeFeed**'''
        return super(IRealTimeFeedManager, self).get_RealTimeFeed()
    def putref_RealTimeFeed(self, ppRealTimeFeed):
        '''Method IRealTimeFeedManager.putref_RealTimeFeed

           INPUT
            ppRealTimeFeed      : IRealTimeFeed*'''
        return super(IRealTimeFeedManager, self).putref_RealTimeFeed(ppRealTimeFeed)
    def get_Map(self):
        '''Method IRealTimeFeedManager.get_Map

           OUTPUT
            ppMap               : IMap**'''
        return super(IRealTimeFeedManager, self).get_Map()
    def putref_Map(self, ppMap):
        '''Method IRealTimeFeedManager.putref_Map

           INPUT
            ppMap               : IMap*'''
        return super(IRealTimeFeedManager, self).putref_Map(ppMap)
    def get_GpsFeed(self):
        '''Method IRealTimeFeedManager.get_GpsFeed

           OUTPUT
            ppGpsFeed           : IGpsFeed**'''
        return super(IRealTimeFeedManager, self).get_GpsFeed()
    def get_RealTimeFeedSimulator(self):
        '''Method IRealTimeFeedManager.get_RealTimeFeedSimulator

           OUTPUT
            ppRealTimeFeedSimulator: IRealTimeFeedSimulator**'''
        return super(IRealTimeFeedManager, self).get_RealTimeFeedSimulator()
    GpsFeed = property(get_GpsFeed, None, None)
    Map = property(get_Map, putref_Map, None)
    RealTimeFeed = property(get_RealTimeFeed, putref_RealTimeFeed, None)
    RealTimeFeedSimulator = property(get_RealTimeFeedSimulator, None, None)

class IMobileSync(_esriCarto.IMobileSync):
    _IID = uuid.UUID('32e00a76-2023-414b-80d0-986799de0962')
    def Init(self, pMap, pProps):
        '''Method IMobileSync.Init

           INPUTS
            pMap                : IMap*
            pProps              : IPropertySet*'''
        return super(IMobileSync, self).Init(pMap, pProps)
    def ExecuteRequest(self, pRequestStream):
        '''Method IMobileSync.ExecuteRequest

           INPUT
            pRequestStream      : IMemoryBlobStream*

           OUTPUT
            ppResponse          : IMemoryBlobStream**'''
        return super(IMobileSync, self).ExecuteRequest(pRequestStream)

class IDynamicCacheLayerManager(_esriCarto.IDynamicCacheLayerManager):
    _IID = uuid.UUID('eda39ce4-100f-4817-9d38-0c62db03b2b1')

    def __init__(self, *args, **kw):
        super(IDynamicCacheLayerManager, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, Map, Layer):
        '''Method IDynamicCacheLayerManager.Init

           INPUTS
            Map                 : IMap*
            Layer               : ILayer*'''
        return super(IDynamicCacheLayerManager, self).Init(Map, Layer)
    def get_FolderName(self):
        '''Method IDynamicCacheLayerManager.get_FolderName

           OUTPUT
            cacheFolderName     : BSTR*'''
        return super(IDynamicCacheLayerManager, self).get_FolderName()
    def get_FolderPath(self):
        '''Method IDynamicCacheLayerManager.get_FolderPath

           OUTPUT
            FolderPath          : BSTR*'''
        return super(IDynamicCacheLayerManager, self).get_FolderPath()
    def put_FolderPath(self, FolderPath):
        '''Method IDynamicCacheLayerManager.put_FolderPath

           INPUT
            FolderPath          : BSTR'''
        return super(IDynamicCacheLayerManager, self).put_FolderPath(FolderPath)
    def get_Cacheable(self):
        '''Method IDynamicCacheLayerManager.get_Cacheable

           OUTPUT
            Cacheable           : VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager, self).get_Cacheable()
    def Delete(self):
        '''Method IDynamicCacheLayerManager.Delete'''
        return super(IDynamicCacheLayerManager, self).Delete()
    def Invalidate(self, Extent, doubleBuffer):
        '''Method IDynamicCacheLayerManager.Invalidate

           INPUTS
            Extent              : IEnvelope*
            doubleBuffer        : VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager, self).Invalidate(Extent, doubleBuffer)
    def get_Format(self):
        '''Method IDynamicCacheLayerManager.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IDynamicCacheLayerManager, self).get_Format()
    def put_Format(self, Format):
        '''Method IDynamicCacheLayerManager.put_Format

           INPUT
            Format              : BSTR'''
        return super(IDynamicCacheLayerManager, self).put_Format(Format)
    def Connect(self, newFolderPath, newFolderName):
        '''Method IDynamicCacheLayerManager.Connect

           INPUTS
            newFolderPath       : BSTR
            newFolderName       : BSTR'''
        return super(IDynamicCacheLayerManager, self).Connect(newFolderPath, newFolderName)
    def Update(self, Extent, fromMapScale, targetMapScale, UpdateMode):
        '''Method IDynamicCacheLayerManager.Update

           INPUTS
            Extent              : IEnvelope*
            fromMapScale        : double
            targetMapScale      : double
            UpdateMode          : esriMapCacheUpdateMode'''
        return super(IDynamicCacheLayerManager, self).Update(Extent, fromMapScale, targetMapScale, UpdateMode)
    def get_ConsolidatedGroupLayer(self):
        '''Method IDynamicCacheLayerManager.get_ConsolidatedGroupLayer

           OUTPUT
            consolidated        : VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager, self).get_ConsolidatedGroupLayer()
    def put_ConsolidatedGroupLayer(self, consolidated):
        '''Method IDynamicCacheLayerManager.put_ConsolidatedGroupLayer

           INPUT
            consolidated        : VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager, self).put_ConsolidatedGroupLayer(consolidated)
    def get_StrictOnDemandMode(self):
        '''Method IDynamicCacheLayerManager.get_StrictOnDemandMode

           OUTPUT
            StrictOnDemandMode  : VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager, self).get_StrictOnDemandMode()
    def put_StrictOnDemandMode(self, StrictOnDemandMode):
        '''Method IDynamicCacheLayerManager.put_StrictOnDemandMode

           INPUT
            StrictOnDemandMode  : VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager, self).put_StrictOnDemandMode(StrictOnDemandMode)
    def get_MaxCacheScale(self):
        '''Method IDynamicCacheLayerManager.get_MaxCacheScale

           OUTPUT
            MaxScale            : double*'''
        return super(IDynamicCacheLayerManager, self).get_MaxCacheScale()
    def put_MaxCacheScale(self, MaxScale):
        '''Method IDynamicCacheLayerManager.put_MaxCacheScale

           INPUT
            MaxScale            : double'''
        return super(IDynamicCacheLayerManager, self).put_MaxCacheScale(MaxScale)
    def get_DetailsThreshold(self):
        '''Method IDynamicCacheLayerManager.get_DetailsThreshold

           OUTPUT
            threshold           : double*'''
        return super(IDynamicCacheLayerManager, self).get_DetailsThreshold()
    def put_DetailsThreshold(self, threshold):
        '''Method IDynamicCacheLayerManager.put_DetailsThreshold

           INPUT
            threshold           : double'''
        return super(IDynamicCacheLayerManager, self).put_DetailsThreshold(threshold)
    def get_ProgressiveDrawingLevels(self):
        '''Method IDynamicCacheLayerManager.get_ProgressiveDrawingLevels

           OUTPUT
            numOfProgressiveLevels: long*'''
        return super(IDynamicCacheLayerManager, self).get_ProgressiveDrawingLevels()
    def put_ProgressiveDrawingLevels(self, numOfProgressiveLevels):
        '''Method IDynamicCacheLayerManager.put_ProgressiveDrawingLevels

           INPUT
            numOfProgressiveLevels: long'''
        return super(IDynamicCacheLayerManager, self).put_ProgressiveDrawingLevels(numOfProgressiveLevels)
    def get_ProgressiveFetchingLevels(self):
        '''Method IDynamicCacheLayerManager.get_ProgressiveFetchingLevels

           OUTPUT
            numOfProgressiveLevels: long*'''
        return super(IDynamicCacheLayerManager, self).get_ProgressiveFetchingLevels()
    def put_ProgressiveFetchingLevels(self, numOfProgressiveLevels):
        '''Method IDynamicCacheLayerManager.put_ProgressiveFetchingLevels

           INPUT
            numOfProgressiveLevels: long'''
        return super(IDynamicCacheLayerManager, self).put_ProgressiveFetchingLevels(numOfProgressiveLevels)
    def get_AlwaysDrawCoarsestLevel(self):
        '''Method IDynamicCacheLayerManager.get_AlwaysDrawCoarsestLevel

           OUTPUT
            AlwaysDrawCoarsestLevel: VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager, self).get_AlwaysDrawCoarsestLevel()
    def put_AlwaysDrawCoarsestLevel(self, AlwaysDrawCoarsestLevel):
        '''Method IDynamicCacheLayerManager.put_AlwaysDrawCoarsestLevel

           INPUT
            AlwaysDrawCoarsestLevel: VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager, self).put_AlwaysDrawCoarsestLevel(AlwaysDrawCoarsestLevel)
    AlwaysDrawCoarsestLevel = property(get_AlwaysDrawCoarsestLevel, put_AlwaysDrawCoarsestLevel, None)
    Cacheable = property(get_Cacheable, None, None)
    ConsolidatedGroupLayer = property(get_ConsolidatedGroupLayer, put_ConsolidatedGroupLayer, None)
    DetailsThreshold = property(get_DetailsThreshold, put_DetailsThreshold, None)
    FolderName = property(get_FolderName, None, None)
    FolderPath = property(get_FolderPath, put_FolderPath, None)
    Format = property(get_Format, put_Format, None)
    MaxCacheScale = property(get_MaxCacheScale, put_MaxCacheScale, None)
    ProgressiveDrawingLevels = property(get_ProgressiveDrawingLevels, put_ProgressiveDrawingLevels, None)
    ProgressiveFetchingLevels = property(get_ProgressiveFetchingLevels, put_ProgressiveFetchingLevels, None)
    StrictOnDemandMode = property(get_StrictOnDemandMode, put_StrictOnDemandMode, None)

class IDynamicCacheLayerManager2(_esriCarto.IDynamicCacheLayerManager2):
    _IID = uuid.UUID('e5aec75c-5866-4d71-bcce-9d331e679027')

    def __init__(self, *args, **kw):
        super(IDynamicCacheLayerManager2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Cached(self):
        '''Method IDynamicCacheLayerManager2.get_Cached

           OUTPUT
            Cached              : VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager2, self).get_Cached()
    def put_Cached(self, Cached):
        '''Method IDynamicCacheLayerManager2.put_Cached

           INPUT
            Cached              : VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager2, self).put_Cached(Cached)
    def Init(self, Map, Layer):
        '''Method IDynamicCacheLayerManager.Init (from IDynamicCacheLayerManager)

           INPUTS
            Map                 : IMap*
            Layer               : ILayer*'''
        return super(IDynamicCacheLayerManager2, self).Init(Map, Layer)
    def get_FolderName(self):
        '''Method IDynamicCacheLayerManager.get_FolderName (from IDynamicCacheLayerManager)

           OUTPUT
            cacheFolderName     : BSTR*'''
        return super(IDynamicCacheLayerManager2, self).get_FolderName()
    def get_FolderPath(self):
        '''Method IDynamicCacheLayerManager.get_FolderPath (from IDynamicCacheLayerManager)

           OUTPUT
            FolderPath          : BSTR*'''
        return super(IDynamicCacheLayerManager2, self).get_FolderPath()
    def put_FolderPath(self, FolderPath):
        '''Method IDynamicCacheLayerManager.put_FolderPath (from IDynamicCacheLayerManager)

           INPUT
            FolderPath          : BSTR'''
        return super(IDynamicCacheLayerManager2, self).put_FolderPath(FolderPath)
    def get_Cacheable(self):
        '''Method IDynamicCacheLayerManager.get_Cacheable (from IDynamicCacheLayerManager)

           OUTPUT
            Cacheable           : VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager2, self).get_Cacheable()
    def Delete(self):
        '''Method IDynamicCacheLayerManager.Delete (from IDynamicCacheLayerManager)'''
        return super(IDynamicCacheLayerManager2, self).Delete()
    def Invalidate(self, Extent, doubleBuffer):
        '''Method IDynamicCacheLayerManager.Invalidate (from IDynamicCacheLayerManager)

           INPUTS
            Extent              : IEnvelope*
            doubleBuffer        : VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager2, self).Invalidate(Extent, doubleBuffer)
    def get_Format(self):
        '''Method IDynamicCacheLayerManager.get_Format (from IDynamicCacheLayerManager)

           OUTPUT
            Format              : BSTR*'''
        return super(IDynamicCacheLayerManager2, self).get_Format()
    def put_Format(self, Format):
        '''Method IDynamicCacheLayerManager.put_Format (from IDynamicCacheLayerManager)

           INPUT
            Format              : BSTR'''
        return super(IDynamicCacheLayerManager2, self).put_Format(Format)
    def Connect(self, newFolderPath, newFolderName):
        '''Method IDynamicCacheLayerManager.Connect (from IDynamicCacheLayerManager)

           INPUTS
            newFolderPath       : BSTR
            newFolderName       : BSTR'''
        return super(IDynamicCacheLayerManager2, self).Connect(newFolderPath, newFolderName)
    def Update(self, Extent, fromMapScale, targetMapScale, UpdateMode):
        '''Method IDynamicCacheLayerManager.Update (from IDynamicCacheLayerManager)

           INPUTS
            Extent              : IEnvelope*
            fromMapScale        : double
            targetMapScale      : double
            UpdateMode          : esriMapCacheUpdateMode'''
        return super(IDynamicCacheLayerManager2, self).Update(Extent, fromMapScale, targetMapScale, UpdateMode)
    def get_ConsolidatedGroupLayer(self):
        '''Method IDynamicCacheLayerManager.get_ConsolidatedGroupLayer (from IDynamicCacheLayerManager)

           OUTPUT
            consolidated        : VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager2, self).get_ConsolidatedGroupLayer()
    def put_ConsolidatedGroupLayer(self, consolidated):
        '''Method IDynamicCacheLayerManager.put_ConsolidatedGroupLayer (from IDynamicCacheLayerManager)

           INPUT
            consolidated        : VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager2, self).put_ConsolidatedGroupLayer(consolidated)
    def get_StrictOnDemandMode(self):
        '''Method IDynamicCacheLayerManager.get_StrictOnDemandMode (from IDynamicCacheLayerManager)

           OUTPUT
            StrictOnDemandMode  : VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager2, self).get_StrictOnDemandMode()
    def put_StrictOnDemandMode(self, StrictOnDemandMode):
        '''Method IDynamicCacheLayerManager.put_StrictOnDemandMode (from IDynamicCacheLayerManager)

           INPUT
            StrictOnDemandMode  : VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager2, self).put_StrictOnDemandMode(StrictOnDemandMode)
    def get_MaxCacheScale(self):
        '''Method IDynamicCacheLayerManager.get_MaxCacheScale (from IDynamicCacheLayerManager)

           OUTPUT
            MaxScale            : double*'''
        return super(IDynamicCacheLayerManager2, self).get_MaxCacheScale()
    def put_MaxCacheScale(self, MaxScale):
        '''Method IDynamicCacheLayerManager.put_MaxCacheScale (from IDynamicCacheLayerManager)

           INPUT
            MaxScale            : double'''
        return super(IDynamicCacheLayerManager2, self).put_MaxCacheScale(MaxScale)
    def get_DetailsThreshold(self):
        '''Method IDynamicCacheLayerManager.get_DetailsThreshold (from IDynamicCacheLayerManager)

           OUTPUT
            threshold           : double*'''
        return super(IDynamicCacheLayerManager2, self).get_DetailsThreshold()
    def put_DetailsThreshold(self, threshold):
        '''Method IDynamicCacheLayerManager.put_DetailsThreshold (from IDynamicCacheLayerManager)

           INPUT
            threshold           : double'''
        return super(IDynamicCacheLayerManager2, self).put_DetailsThreshold(threshold)
    def get_ProgressiveDrawingLevels(self):
        '''Method IDynamicCacheLayerManager.get_ProgressiveDrawingLevels (from IDynamicCacheLayerManager)

           OUTPUT
            numOfProgressiveLevels: long*'''
        return super(IDynamicCacheLayerManager2, self).get_ProgressiveDrawingLevels()
    def put_ProgressiveDrawingLevels(self, numOfProgressiveLevels):
        '''Method IDynamicCacheLayerManager.put_ProgressiveDrawingLevels (from IDynamicCacheLayerManager)

           INPUT
            numOfProgressiveLevels: long'''
        return super(IDynamicCacheLayerManager2, self).put_ProgressiveDrawingLevels(numOfProgressiveLevels)
    def get_ProgressiveFetchingLevels(self):
        '''Method IDynamicCacheLayerManager.get_ProgressiveFetchingLevels (from IDynamicCacheLayerManager)

           OUTPUT
            numOfProgressiveLevels: long*'''
        return super(IDynamicCacheLayerManager2, self).get_ProgressiveFetchingLevels()
    def put_ProgressiveFetchingLevels(self, numOfProgressiveLevels):
        '''Method IDynamicCacheLayerManager.put_ProgressiveFetchingLevels (from IDynamicCacheLayerManager)

           INPUT
            numOfProgressiveLevels: long'''
        return super(IDynamicCacheLayerManager2, self).put_ProgressiveFetchingLevels(numOfProgressiveLevels)
    def get_AlwaysDrawCoarsestLevel(self):
        '''Method IDynamicCacheLayerManager.get_AlwaysDrawCoarsestLevel (from IDynamicCacheLayerManager)

           OUTPUT
            AlwaysDrawCoarsestLevel: VARIANT_BOOL*'''
        return super(IDynamicCacheLayerManager2, self).get_AlwaysDrawCoarsestLevel()
    def put_AlwaysDrawCoarsestLevel(self, AlwaysDrawCoarsestLevel):
        '''Method IDynamicCacheLayerManager.put_AlwaysDrawCoarsestLevel (from IDynamicCacheLayerManager)

           INPUT
            AlwaysDrawCoarsestLevel: VARIANT_BOOL'''
        return super(IDynamicCacheLayerManager2, self).put_AlwaysDrawCoarsestLevel(AlwaysDrawCoarsestLevel)
    AlwaysDrawCoarsestLevel = property(get_AlwaysDrawCoarsestLevel, put_AlwaysDrawCoarsestLevel, None)
    Cacheable = property(get_Cacheable, None, None)
    Cached = property(get_Cached, put_Cached, None)
    ConsolidatedGroupLayer = property(get_ConsolidatedGroupLayer, put_ConsolidatedGroupLayer, None)
    DetailsThreshold = property(get_DetailsThreshold, put_DetailsThreshold, None)
    FolderName = property(get_FolderName, None, None)
    FolderPath = property(get_FolderPath, put_FolderPath, None)
    Format = property(get_Format, put_Format, None)
    MaxCacheScale = property(get_MaxCacheScale, put_MaxCacheScale, None)
    ProgressiveDrawingLevels = property(get_ProgressiveDrawingLevels, put_ProgressiveDrawingLevels, None)
    ProgressiveFetchingLevels = property(get_ProgressiveFetchingLevels, put_ProgressiveFetchingLevels, None)
    StrictOnDemandMode = property(get_StrictOnDemandMode, put_StrictOnDemandMode, None)

class IDataSourceHelperMapDocument(_esriCarto.IDataSourceHelperMapDocument):
    _IID = uuid.UUID('bd16c25f-5ac2-4e6d-8e34-bcc5feb395dd')
    def ReplaceWorkspaceName(self, pMapDocument, pOldWorkspaceName, pNewWorkspaceName, validate):
        '''Method IDataSourceHelperMapDocument.ReplaceWorkspaceName

           INPUTS
            pMapDocument        : IMapDocument*
            pOldWorkspaceName   : IWorkspaceName*
            pNewWorkspaceName   : IWorkspaceName*
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperMapDocument, self).ReplaceWorkspaceName(pMapDocument, pOldWorkspaceName, pNewWorkspaceName, validate)
    def Repair(self, pMapDocument, pDataLayer, pName, validate):
        '''Method IDataSourceHelperMapDocument.Repair

           INPUTS
            pMapDocument        : IMapDocument*
            pDataLayer          : IDataLayer*
            pName               : IName*
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperMapDocument, self).Repair(pMapDocument, pDataLayer, pName, validate)
    def FindAndReplaceWorkspaceNamePath(self, pMapDocument, oldWorkspaceName, newWorkspaceName, validate):
        '''Method IDataSourceHelperMapDocument.FindAndReplaceWorkspaceNamePath

           INPUTS
            pMapDocument        : IMapDocument*
            oldWorkspaceName    : BSTR
            newWorkspaceName    : BSTR
            validate            : VARIANT_BOOL'''
        return super(IDataSourceHelperMapDocument, self).FindAndReplaceWorkspaceNamePath(pMapDocument, oldWorkspaceName, newWorkspaceName, validate)

class IMapFrame(_esriCarto.IMapFrame):
    _IID = uuid.UUID('9b00131b-9ed7-11d0-859e-0800091a2a72')

    def __init__(self, *args, **kw):
        super(IMapFrame, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Map(self):
        '''Method IMapFrame.get_Map

           OUTPUT
            Map                 : IMap**'''
        return super(IMapFrame, self).get_Map()
    def putref_Map(self, Map):
        '''Method IMapFrame.putref_Map

           INPUT
            Map                 : IMap*'''
        return super(IMapFrame, self).putref_Map(Map)
    def get_Container(self):
        '''Method IMapFrame.get_Container

           OUTPUT
            Container           : IGraphicsContainer**'''
        return super(IMapFrame, self).get_Container()
    def putref_Container(self, Container):
        '''Method IMapFrame.putref_Container

           INPUT
            Container           : IGraphicsContainer*'''
        return super(IMapFrame, self).putref_Container(Container)
    def get_ExtentType(self):
        '''Method IMapFrame.get_ExtentType

           OUTPUT
            Type                : esriExtentTypeEnum*'''
        return super(IMapFrame, self).get_ExtentType()
    def put_ExtentType(self, Type):
        '''Method IMapFrame.put_ExtentType

           INPUT
            Type                : esriExtentTypeEnum'''
        return super(IMapFrame, self).put_ExtentType(Type)
    def get_MapScale(self):
        '''Method IMapFrame.get_MapScale

           OUTPUT
            Scale               : double*'''
        return super(IMapFrame, self).get_MapScale()
    def put_MapScale(self, Scale):
        '''Method IMapFrame.put_MapScale

           INPUT
            Scale               : double'''
        return super(IMapFrame, self).put_MapScale(Scale)
    def get_MapBounds(self):
        '''Method IMapFrame.get_MapBounds

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IMapFrame, self).get_MapBounds()
    def put_MapBounds(self, Bounds):
        '''Method IMapFrame.put_MapBounds

           INPUT
            Bounds              : IEnvelope*'''
        return super(IMapFrame, self).put_MapBounds(Bounds)
    def CreateSurroundFrame(self, clsid, optionalStyle):
        '''Method IMapFrame.CreateSurroundFrame

           INPUTS
            clsid               : IUID*
            optionalStyle       : IMapSurround*

           OUTPUT
            MapSurroundFrame    : IMapSurroundFrame**'''
        return super(IMapFrame, self).CreateSurroundFrame(clsid, optionalStyle)
    def AddLocatorRectangle(self, locator):
        '''Method IMapFrame.AddLocatorRectangle

           INPUT
            locator             : ILocatorRectangle*'''
        return super(IMapFrame, self).AddLocatorRectangle(locator)
    def RemoveLocatorRectangle(self, locator):
        '''Method IMapFrame.RemoveLocatorRectangle

           INPUT
            locator             : ILocatorRectangle*'''
        return super(IMapFrame, self).RemoveLocatorRectangle(locator)
    def RemoveAllLocatorRectangles(self):
        '''Method IMapFrame.RemoveAllLocatorRectangles'''
        return super(IMapFrame, self).RemoveAllLocatorRectangles()
    def get_LocatorRectangleCount(self):
        '''Method IMapFrame.get_LocatorRectangleCount

           OUTPUT
            Count               : long*'''
        return super(IMapFrame, self).get_LocatorRectangleCount()
    def LocatorRectangle(self, Index):
        '''Method IMapFrame.LocatorRectangle

           INPUT
            Index               : long

           OUTPUT
            locator             : ILocatorRectangle**'''
        return super(IMapFrame, self).LocatorRectangle(Index)
    def get_Object(self):
        '''Method IFrameElement.get_Object (from IFrameElement)

           OUTPUT
            framedObject        : VARIANT*'''
        return super(IMapFrame, self).get_Object()
    def get_Border(self):
        '''Method IFrameElement.get_Border (from IFrameElement)

           OUTPUT
            Border              : IBorder**'''
        return super(IMapFrame, self).get_Border()
    def put_Border(self, Border):
        '''Method IFrameElement.put_Border (from IFrameElement)

           INPUT
            Border              : IBorder*'''
        return super(IMapFrame, self).put_Border(Border)
    def get_Background(self):
        '''Method IFrameElement.get_Background (from IFrameElement)

           OUTPUT
            Background          : IBackground**'''
        return super(IMapFrame, self).get_Background()
    def put_Background(self, Background):
        '''Method IFrameElement.put_Background (from IFrameElement)

           INPUT
            Background          : IBackground*'''
        return super(IMapFrame, self).put_Background(Background)
    def get_Thumbnail(self):
        '''Method IFrameElement.get_Thumbnail (from IFrameElement)

           OUTPUT
            bitmapHandle        : OLE_HANDLE*'''
        return super(IMapFrame, self).get_Thumbnail()
    def get_DraftMode(self):
        '''Method IFrameElement.get_DraftMode (from IFrameElement)

           OUTPUT
            DraftMode           : VARIANT_BOOL*'''
        return super(IMapFrame, self).get_DraftMode()
    def put_DraftMode(self, DraftMode):
        '''Method IFrameElement.put_DraftMode (from IFrameElement)

           INPUT
            DraftMode           : VARIANT_BOOL'''
        return super(IMapFrame, self).put_DraftMode(DraftMode)
    Background = property(get_Background, put_Background, None)
    Border = property(get_Border, put_Border, None)
    Container = property(get_Container, putref_Container, None)
    DraftMode = property(get_DraftMode, put_DraftMode, None)
    ExtentType = property(get_ExtentType, put_ExtentType, None)
    LocatorRectangleCount = property(get_LocatorRectangleCount, None, None)
    Map = property(get_Map, putref_Map, None)
    MapBounds = property(get_MapBounds, put_MapBounds, None)
    MapScale = property(get_MapScale, put_MapScale, None)
    Object = property(get_Object, None, None)
    Thumbnail = property(get_Thumbnail, None, None)

class ILocatorRectangle(_esriCarto.ILocatorRectangle):
    _IID = uuid.UUID('41d9c095-a403-11d2-87e8-0000f8751720')

    def __init__(self, *args, **kw):
        super(ILocatorRectangle, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_MapFrame(self, MapFrame):
        '''Method ILocatorRectangle.putref_MapFrame

           INPUT
            MapFrame            : IMapFrame*'''
        return super(ILocatorRectangle, self).putref_MapFrame(MapFrame)
    def get_MapFrame(self):
        '''Method ILocatorRectangle.get_MapFrame

           OUTPUT
            MapFrame            : IMapFrame**'''
        return super(ILocatorRectangle, self).get_MapFrame()
    def get_Border(self):
        '''Method ILocatorRectangle.get_Border

           OUTPUT
            Border              : IBorder**'''
        return super(ILocatorRectangle, self).get_Border()
    def put_Border(self, Border):
        '''Method ILocatorRectangle.put_Border

           INPUT
            Border              : IBorder*'''
        return super(ILocatorRectangle, self).put_Border(Border)
    def get_Background(self):
        '''Method ILocatorRectangle.get_Background

           OUTPUT
            Background          : IBackground**'''
        return super(ILocatorRectangle, self).get_Background()
    def put_Background(self, Background):
        '''Method ILocatorRectangle.put_Background

           INPUT
            Background          : IBackground*'''
        return super(ILocatorRectangle, self).put_Background(Background)
    def put_LeaderSymbol(self, Symbol):
        '''Method ILocatorRectangle.put_LeaderSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ILocatorRectangle, self).put_LeaderSymbol(Symbol)
    def get_LeaderSymbol(self):
        '''Method ILocatorRectangle.get_LeaderSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ILocatorRectangle, self).get_LeaderSymbol()
    def get_ShowLeader(self):
        '''Method ILocatorRectangle.get_ShowLeader

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILocatorRectangle, self).get_ShowLeader()
    def put_ShowLeader(self, flag):
        '''Method ILocatorRectangle.put_ShowLeader

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILocatorRectangle, self).put_ShowLeader(flag)
    def QueryBounds(self, Display, Parent, Bounds):
        '''Method ILocatorRectangle.QueryBounds

           INPUTS
            Display             : IDisplay*
            Parent              : IMapFrame*
            Bounds              : IEnvelope*'''
        return super(ILocatorRectangle, self).QueryBounds(Display, Parent, Bounds)
    def Draw(self, Display, Parent):
        '''Method ILocatorRectangle.Draw

           INPUTS
            Display             : IDisplay*
            Parent              : IMapFrame*'''
        return super(ILocatorRectangle, self).Draw(Display, Parent)
    Background = property(get_Background, put_Background, None)
    Border = property(get_Border, put_Border, None)
    LeaderSymbol = property(get_LeaderSymbol, put_LeaderSymbol, None)
    MapFrame = property(get_MapFrame, putref_MapFrame, None)
    ShowLeader = property(get_ShowLeader, put_ShowLeader, None)

class ILocatorRectangle2(_esriCarto.ILocatorRectangle2):
    _IID = uuid.UUID('41d9c096-a403-11d2-87e8-0000f8751720')

    def __init__(self, *args, **kw):
        super(ILocatorRectangle2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_MapFrame(self, MapFrame):
        '''Method ILocatorRectangle2.putref_MapFrame

           INPUT
            MapFrame            : IMapFrame*'''
        return super(ILocatorRectangle2, self).putref_MapFrame(MapFrame)
    def get_MapFrame(self):
        '''Method ILocatorRectangle2.get_MapFrame

           OUTPUT
            MapFrame            : IMapFrame**'''
        return super(ILocatorRectangle2, self).get_MapFrame()
    def get_Border(self):
        '''Method ILocatorRectangle2.get_Border

           OUTPUT
            Border              : IBorder**'''
        return super(ILocatorRectangle2, self).get_Border()
    def put_Border(self, Border):
        '''Method ILocatorRectangle2.put_Border

           INPUT
            Border              : IBorder*'''
        return super(ILocatorRectangle2, self).put_Border(Border)
    def get_Background(self):
        '''Method ILocatorRectangle2.get_Background

           OUTPUT
            Background          : IBackground**'''
        return super(ILocatorRectangle2, self).get_Background()
    def put_Background(self, Background):
        '''Method ILocatorRectangle2.put_Background

           INPUT
            Background          : IBackground*'''
        return super(ILocatorRectangle2, self).put_Background(Background)
    def put_LeaderSymbol(self, Symbol):
        '''Method ILocatorRectangle2.put_LeaderSymbol

           INPUT
            Symbol              : ISymbol*'''
        return super(ILocatorRectangle2, self).put_LeaderSymbol(Symbol)
    def get_LeaderSymbol(self):
        '''Method ILocatorRectangle2.get_LeaderSymbol

           OUTPUT
            Symbol              : ISymbol**'''
        return super(ILocatorRectangle2, self).get_LeaderSymbol()
    def get_ShowLeader(self):
        '''Method ILocatorRectangle2.get_ShowLeader

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILocatorRectangle2, self).get_ShowLeader()
    def put_ShowLeader(self, flag):
        '''Method ILocatorRectangle2.put_ShowLeader

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILocatorRectangle2, self).put_ShowLeader(flag)
    def QueryBounds(self, Display, Parent, Bounds):
        '''Method ILocatorRectangle2.QueryBounds

           INPUTS
            Display             : IDisplay*
            Parent              : IMapFrame*
            Bounds              : IEnvelope*'''
        return super(ILocatorRectangle2, self).QueryBounds(Display, Parent, Bounds)
    def Draw(self, Display, Parent):
        '''Method ILocatorRectangle2.Draw

           INPUTS
            Display             : IDisplay*
            Parent              : IMapFrame*'''
        return super(ILocatorRectangle2, self).Draw(Display, Parent)
    def get_UseSimpleExtent(self):
        '''Method ILocatorRectangle2.get_UseSimpleExtent

           OUTPUT
            flag                : VARIANT_BOOL*'''
        return super(ILocatorRectangle2, self).get_UseSimpleExtent()
    def put_UseSimpleExtent(self, flag):
        '''Method ILocatorRectangle2.put_UseSimpleExtent

           INPUT
            flag                : VARIANT_BOOL'''
        return super(ILocatorRectangle2, self).put_UseSimpleExtent(flag)
    def DrawExtent(self, mapDisplay, Parent):
        '''Method ILocatorRectangle2.DrawExtent

           INPUTS
            mapDisplay          : IDisplay*
            Parent              : IMapFrame*'''
        return super(ILocatorRectangle2, self).DrawExtent(mapDisplay, Parent)
    def DrawLeader(self, layoutDisplay, Parent):
        '''Method ILocatorRectangle2.DrawLeader

           INPUTS
            layoutDisplay       : IDisplay*
            Parent              : IMapFrame*'''
        return super(ILocatorRectangle2, self).DrawLeader(layoutDisplay, Parent)
    Background = property(get_Background, put_Background, None)
    Border = property(get_Border, put_Border, None)
    LeaderSymbol = property(get_LeaderSymbol, put_LeaderSymbol, None)
    MapFrame = property(get_MapFrame, putref_MapFrame, None)
    ShowLeader = property(get_ShowLeader, put_ShowLeader, None)
    UseSimpleExtent = property(get_UseSimpleExtent, put_UseSimpleExtent, None)

class IMapGrid(_esriCarto.IMapGrid):
    _IID = uuid.UUID('03762c8b-f4d0-11d1-ade8-080009ec732a')

    def __init__(self, *args, **kw):
        super(IMapGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IMapGrid.get_Name

           OUTPUT
            gridName            : BSTR*'''
        return super(IMapGrid, self).get_Name()
    def put_Name(self, gridName):
        '''Method IMapGrid.put_Name

           INPUT
            gridName            : BSTR'''
        return super(IMapGrid, self).put_Name(gridName)
    def get_LineSymbol(self):
        '''Method IMapGrid.get_LineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IMapGrid, self).get_LineSymbol()
    def put_LineSymbol(self, Symbol):
        '''Method IMapGrid.put_LineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IMapGrid, self).put_LineSymbol(Symbol)
    def get_TickMarkSymbol(self):
        '''Method IMapGrid.get_TickMarkSymbol

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IMapGrid, self).get_TickMarkSymbol()
    def put_TickMarkSymbol(self, Symbol):
        '''Method IMapGrid.put_TickMarkSymbol

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IMapGrid, self).put_TickMarkSymbol(Symbol)
    def get_LabelFormat(self):
        '''Method IMapGrid.get_LabelFormat

           OUTPUT
            Format              : IGridLabel**'''
        return super(IMapGrid, self).get_LabelFormat()
    def put_LabelFormat(self, Format):
        '''Method IMapGrid.put_LabelFormat

           INPUT
            Format              : IGridLabel*'''
        return super(IMapGrid, self).put_LabelFormat(Format)
    def get_TickLineSymbol(self):
        '''Method IMapGrid.get_TickLineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IMapGrid, self).get_TickLineSymbol()
    def put_TickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_TickLineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IMapGrid, self).put_TickLineSymbol(Symbol)
    def get_TickLength(self):
        '''Method IMapGrid.get_TickLength

           OUTPUT
            lengthPoints        : double*'''
        return super(IMapGrid, self).get_TickLength()
    def put_TickLength(self, lengthPoints):
        '''Method IMapGrid.put_TickLength

           INPUT
            lengthPoints        : double'''
        return super(IMapGrid, self).put_TickLength(lengthPoints)
    def get_SubTickCount(self):
        '''Method IMapGrid.get_SubTickCount

           OUTPUT
            Count               : short*'''
        return super(IMapGrid, self).get_SubTickCount()
    def put_SubTickCount(self, Count):
        '''Method IMapGrid.put_SubTickCount

           INPUT
            Count               : short'''
        return super(IMapGrid, self).put_SubTickCount(Count)
    def get_SubTickLineSymbol(self):
        '''Method IMapGrid.get_SubTickLineSymbol

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IMapGrid, self).get_SubTickLineSymbol()
    def put_SubTickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_SubTickLineSymbol

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IMapGrid, self).put_SubTickLineSymbol(Symbol)
    def get_SubTickLength(self):
        '''Method IMapGrid.get_SubTickLength

           OUTPUT
            lengthPoints        : double*'''
        return super(IMapGrid, self).get_SubTickLength()
    def put_SubTickLength(self, lengthPoints):
        '''Method IMapGrid.put_SubTickLength

           INPUT
            lengthPoints        : double'''
        return super(IMapGrid, self).put_SubTickLength(lengthPoints)
    def get_Border(self):
        '''Method IMapGrid.get_Border

           OUTPUT
            gridBorder          : IMapGridBorder**'''
        return super(IMapGrid, self).get_Border()
    def put_Border(self, gridBorder):
        '''Method IMapGrid.put_Border

           INPUT
            gridBorder          : IMapGridBorder*'''
        return super(IMapGrid, self).put_Border(gridBorder)
    def get_Visible(self):
        '''Method IMapGrid.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IMapGrid, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IMapGrid.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IMapGrid, self).put_Visible(Visible)
    def QueryLabelVisibility(self):
        '''Method IMapGrid.QueryLabelVisibility

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IMapGrid, self).QueryLabelVisibility()
    def SetLabelVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetLabelVisibility

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IMapGrid, self).SetLabelVisibility(leftVis, topVis, rightVis, bottomVis)
    def QueryTickVisibility(self):
        '''Method IMapGrid.QueryTickVisibility

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IMapGrid, self).QueryTickVisibility()
    def SetTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetTickVisibility

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IMapGrid, self).SetTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def QuerySubTickVisibility(self):
        '''Method IMapGrid.QuerySubTickVisibility

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IMapGrid, self).QuerySubTickVisibility()
    def SetSubTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetSubTickVisibility

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IMapGrid, self).SetSubTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def SetDefaults(self, pMapFrame):
        '''Method IMapGrid.SetDefaults

           INPUT
            pMapFrame           : IMapFrame*'''
        return super(IMapGrid, self).SetDefaults(pMapFrame)
    def GenerateGraphics(self, pMapFrame, GraphicsContainer):
        '''Method IMapGrid.GenerateGraphics

           INPUTS
            pMapFrame           : IMapFrame*
            GraphicsContainer   : IGraphicsContainer*'''
        return super(IMapGrid, self).GenerateGraphics(pMapFrame, GraphicsContainer)
    def PrepareForOutput(self, hDC, Dpi, pixelBounds, pMapFrame):
        '''Method IMapGrid.PrepareForOutput

           INPUTS
            hDC                 : OLE_HANDLE
            Dpi                 : long
            pixelBounds         : tagRECT*
            pMapFrame           : IMapFrame*'''
        return super(IMapGrid, self).PrepareForOutput(hDC, Dpi, pixelBounds, pMapFrame)
    def Draw(self, Display, pMapFrame):
        '''Method IMapGrid.Draw

           INPUTS
            Display             : IDisplay*
            pMapFrame           : IMapFrame*'''
        return super(IMapGrid, self).Draw(Display, pMapFrame)
    def get_ExteriorWidth(self, pDisplay, pMapFrame):
        '''Method IMapGrid.get_ExteriorWidth

           INPUTS
            pDisplay            : IDisplay*
            pMapFrame           : IMapFrame*

           OUTPUT
            pWidth              : double*'''
        return super(IMapGrid, self).get_ExteriorWidth(pDisplay, pMapFrame)
    Border = property(get_Border, put_Border, None)
    LabelFormat = property(get_LabelFormat, put_LabelFormat, None)
    LineSymbol = property(get_LineSymbol, put_LineSymbol, None)
    Name = property(get_Name, put_Name, None)
    SubTickCount = property(get_SubTickCount, put_SubTickCount, None)
    SubTickLength = property(get_SubTickLength, put_SubTickLength, None)
    SubTickLineSymbol = property(get_SubTickLineSymbol, put_SubTickLineSymbol, None)
    TickLength = property(get_TickLength, put_TickLength, None)
    TickLineSymbol = property(get_TickLineSymbol, put_TickLineSymbol, None)
    TickMarkSymbol = property(get_TickMarkSymbol, put_TickMarkSymbol, None)
    Visible = property(get_Visible, put_Visible, None)

class IGridLabel(_esriCarto.IGridLabel):
    _IID = uuid.UUID('ce41c501-9df9-11d2-aade-000000000000')

    def __init__(self, *args, **kw):
        super(IGridLabel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DisplayName(self):
        '''Method IGridLabel.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGridLabel, self).get_DisplayName()
    def get_Applies(self, grid):
        '''Method IGridLabel.get_Applies

           INPUT
            grid                : IMapGrid*

           OUTPUT
            Applies             : VARIANT_BOOL*'''
        return super(IGridLabel, self).get_Applies(grid)
    def get_EditObject(self):
        '''Method IGridLabel.get_EditObject

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IGridLabel, self).get_EditObject()
    def put_EditObject(self, ppObject):
        '''Method IGridLabel.put_EditObject

           INPUT
            ppObject            : IUnknown*'''
        return super(IGridLabel, self).put_EditObject(ppObject)
    def get_Font(self):
        '''Method IGridLabel.get_Font

           OUTPUT
            Font                : IFontDisp**'''
        return super(IGridLabel, self).get_Font()
    def put_Font(self, Font):
        '''Method IGridLabel.put_Font

           INPUT
            Font                : IFontDisp*'''
        return super(IGridLabel, self).put_Font(Font)
    def get_Color(self):
        '''Method IGridLabel.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IGridLabel, self).get_Color()
    def put_Color(self, Color):
        '''Method IGridLabel.put_Color

           INPUT
            Color               : IColor*'''
        return super(IGridLabel, self).put_Color(Color)
    def get_LabelOffset(self):
        '''Method IGridLabel.get_LabelOffset

           OUTPUT
            offsetPoints        : double*'''
        return super(IGridLabel, self).get_LabelOffset()
    def put_LabelOffset(self, offsetPoints):
        '''Method IGridLabel.put_LabelOffset

           INPUT
            offsetPoints        : double'''
        return super(IGridLabel, self).put_LabelOffset(offsetPoints)
    def get_LabelAlignment(self, axis):
        '''Method IGridLabel.get_LabelAlignment

           INPUT
            axis                : esriGridAxisEnum

           OUTPUT
            Horizontal          : VARIANT_BOOL*'''
        return super(IGridLabel, self).get_LabelAlignment(axis)
    def put_LabelAlignment(self, axis, Horizontal):
        '''Method IGridLabel.put_LabelAlignment

           INPUTS
            axis                : esriGridAxisEnum
            Horizontal          : VARIANT_BOOL'''
        return super(IGridLabel, self).put_LabelAlignment(axis, Horizontal)
    def QueryTextExtent(self, LabelValue, Location, axis, Display, Extent):
        '''Method IGridLabel.QueryTextExtent

           INPUTS
            LabelValue          : double
            Location            : IPoint*
            axis                : esriGridAxisEnum
            Display             : IDisplay*
            Extent              : IEnvelope*'''
        return super(IGridLabel, self).QueryTextExtent(LabelValue, Location, axis, Display, Extent)
    def Draw(self, LabelValue, Location, axis, Display):
        '''Method IGridLabel.Draw

           INPUTS
            LabelValue          : double
            Location            : IPoint*
            axis                : esriGridAxisEnum
            Display             : IDisplay*'''
        return super(IGridLabel, self).Draw(LabelValue, Location, axis, Display)
    def Preview(self, hDC, rectangle):
        '''Method IGridLabel.Preview

           INPUTS
            hDC                 : OLE_HANDLE
            rectangle           : tagRECT*'''
        return super(IGridLabel, self).Preview(hDC, rectangle)
    Color = property(get_Color, put_Color, None)
    DisplayName = property(get_DisplayName, None, None)
    EditObject = property(get_EditObject, put_EditObject, None)
    Font = property(get_Font, put_Font, None)
    LabelAlignment = property(None, put_LabelAlignment, None)
    LabelOffset = property(get_LabelOffset, put_LabelOffset, None)
    Applies = IndexProperty(get_Applies, None)
    LabelAlignment = IndexProperty(get_LabelAlignment, None)

class IReferenceSystem(_esriCarto.IReferenceSystem):
    _IID = uuid.UUID('53b979cb-9576-40dd-8b7b-f445e5b1bac9')

    def __init__(self, *args, **kw):
        super(IReferenceSystem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IReferenceSystem.get_Name

           OUTPUT
            gridName            : BSTR*'''
        return super(IReferenceSystem, self).get_Name()
    def put_Name(self, gridName):
        '''Method IReferenceSystem.put_Name

           INPUT
            gridName            : BSTR'''
        return super(IReferenceSystem, self).put_Name(gridName)
    def get_Visible(self):
        '''Method IReferenceSystem.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IReferenceSystem, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IReferenceSystem.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IReferenceSystem, self).put_Visible(Visible)
    def get_LabelFormat(self):
        '''Method IReferenceSystem.get_LabelFormat

           OUTPUT
            Format              : IGridLabel**'''
        return super(IReferenceSystem, self).get_LabelFormat()
    def put_LabelFormat(self, Format):
        '''Method IReferenceSystem.put_LabelFormat

           INPUT
            Format              : IGridLabel*'''
        return super(IReferenceSystem, self).put_LabelFormat(Format)
    def SetDefaults(self, pMapFrame):
        '''Method IReferenceSystem.SetDefaults

           INPUT
            pMapFrame           : IMapFrame*'''
        return super(IReferenceSystem, self).SetDefaults(pMapFrame)
    def GenerateGraphics(self, pMapFrame, GraphicsContainer):
        '''Method IReferenceSystem.GenerateGraphics

           INPUTS
            pMapFrame           : IMapFrame*
            GraphicsContainer   : IGraphicsContainer*'''
        return super(IReferenceSystem, self).GenerateGraphics(pMapFrame, GraphicsContainer)
    def PrepareForOutput(self, hDC, Dpi, pixelBounds, pMapFrame):
        '''Method IReferenceSystem.PrepareForOutput

           INPUTS
            hDC                 : OLE_HANDLE
            Dpi                 : long
            pixelBounds         : tagRECT*
            pMapFrame           : IMapFrame*'''
        return super(IReferenceSystem, self).PrepareForOutput(hDC, Dpi, pixelBounds, pMapFrame)
    def Draw(self, Display, pMapFrame):
        '''Method IReferenceSystem.Draw

           INPUTS
            Display             : IDisplay*
            pMapFrame           : IMapFrame*'''
        return super(IReferenceSystem, self).Draw(Display, pMapFrame)
    def QueryBounds(self, pDisplay, pMapFrame, Bounds):
        '''Method IReferenceSystem.QueryBounds

           INPUTS
            pDisplay            : IDisplay*
            pMapFrame           : IMapFrame*
            Bounds              : IEnvelope*'''
        return super(IReferenceSystem, self).QueryBounds(pDisplay, pMapFrame, Bounds)
    def BoundsChanged(self):
        '''Method IReferenceSystem.BoundsChanged'''
        return super(IReferenceSystem, self).BoundsChanged()
    LabelFormat = property(get_LabelFormat, put_LabelFormat, None)
    Name = property(get_Name, put_Name, None)
    Visible = property(get_Visible, put_Visible, None)

class IGridLabel2(_esriCarto.IGridLabel2):
    _IID = uuid.UUID('76b22cba-a25b-41e5-b8ba-f29ae31822bb')

    def __init__(self, *args, **kw):
        super(IGridLabel2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DisplayName(self):
        '''Method IGridLabel2.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGridLabel2, self).get_DisplayName()
    def get_Applies(self, grid):
        '''Method IGridLabel2.get_Applies

           INPUT
            grid                : IMapGrid*

           OUTPUT
            Applies             : VARIANT_BOOL*'''
        return super(IGridLabel2, self).get_Applies(grid)
    def get_EditObject(self):
        '''Method IGridLabel2.get_EditObject

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IGridLabel2, self).get_EditObject()
    def put_EditObject(self, ppObject):
        '''Method IGridLabel2.put_EditObject

           INPUT
            ppObject            : IUnknown*'''
        return super(IGridLabel2, self).put_EditObject(ppObject)
    def get_Font(self):
        '''Method IGridLabel2.get_Font

           OUTPUT
            Font                : IFontDisp**'''
        return super(IGridLabel2, self).get_Font()
    def put_Font(self, Font):
        '''Method IGridLabel2.put_Font

           INPUT
            Font                : IFontDisp*'''
        return super(IGridLabel2, self).put_Font(Font)
    def get_Color(self):
        '''Method IGridLabel2.get_Color

           OUTPUT
            Color               : IColor**'''
        return super(IGridLabel2, self).get_Color()
    def put_Color(self, Color):
        '''Method IGridLabel2.put_Color

           INPUT
            Color               : IColor*'''
        return super(IGridLabel2, self).put_Color(Color)
    def get_LabelOffset(self):
        '''Method IGridLabel2.get_LabelOffset

           OUTPUT
            offsetPoints        : double*'''
        return super(IGridLabel2, self).get_LabelOffset()
    def put_LabelOffset(self, offsetPoints):
        '''Method IGridLabel2.put_LabelOffset

           INPUT
            offsetPoints        : double'''
        return super(IGridLabel2, self).put_LabelOffset(offsetPoints)
    def get_LabelAlignment(self, axis):
        '''Method IGridLabel2.get_LabelAlignment

           INPUT
            axis                : esriGridAxisEnum

           OUTPUT
            Horizontal          : VARIANT_BOOL*'''
        return super(IGridLabel2, self).get_LabelAlignment(axis)
    def put_LabelAlignment(self, axis, Horizontal):
        '''Method IGridLabel2.put_LabelAlignment

           INPUTS
            axis                : esriGridAxisEnum
            Horizontal          : VARIANT_BOOL'''
        return super(IGridLabel2, self).put_LabelAlignment(axis, Horizontal)
    def QueryTextExtent(self, LabelValue, Location, axis, Display, Extent):
        '''Method IGridLabel2.QueryTextExtent

           INPUTS
            LabelValue          : double
            Location            : IPoint*
            axis                : esriGridAxisEnum
            Display             : IDisplay*
            Extent              : IEnvelope*'''
        return super(IGridLabel2, self).QueryTextExtent(LabelValue, Location, axis, Display, Extent)
    def Draw(self, LabelValue, Location, axis, Display):
        '''Method IGridLabel2.Draw

           INPUTS
            LabelValue          : double
            Location            : IPoint*
            axis                : esriGridAxisEnum
            Display             : IDisplay*'''
        return super(IGridLabel2, self).Draw(LabelValue, Location, axis, Display)
    def Preview(self, hDC, rectangle):
        '''Method IGridLabel2.Preview

           INPUTS
            hDC                 : OLE_HANDLE
            rectangle           : tagRECT*'''
        return super(IGridLabel2, self).Preview(hDC, rectangle)
    def get_FontSize(self):
        '''Method IGridLabel2.get_FontSize

           OUTPUT
            Size                : double*'''
        return super(IGridLabel2, self).get_FontSize()
    def put_FontSize(self, Size):
        '''Method IGridLabel2.put_FontSize

           INPUT
            Size                : double'''
        return super(IGridLabel2, self).put_FontSize(Size)
    Color = property(get_Color, put_Color, None)
    DisplayName = property(get_DisplayName, None, None)
    EditObject = property(get_EditObject, put_EditObject, None)
    Font = property(get_Font, put_Font, None)
    FontSize = property(get_FontSize, put_FontSize, None)
    LabelAlignment = property(None, put_LabelAlignment, None)
    LabelOffset = property(get_LabelOffset, put_LabelOffset, None)
    Applies = IndexProperty(get_Applies, None)
    LabelAlignment = IndexProperty(get_LabelAlignment, None)

class IGraticule(_esriCarto.IGraticule):
    _IID = uuid.UUID('03762c8c-f4d0-11d1-ade8-080009ec732a')

    def __init__(self, *args, **kw):
        super(IGraticule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AutoInterval(self):
        '''Method IGraticule.get_AutoInterval

           OUTPUT
            AutoInterval        : VARIANT_BOOL*'''
        return super(IGraticule, self).get_AutoInterval()
    def put_AutoInterval(self, AutoInterval):
        '''Method IGraticule.put_AutoInterval

           INPUT
            AutoInterval        : VARIANT_BOOL'''
        return super(IGraticule, self).put_AutoInterval(AutoInterval)
    def AddElement(self, Label, Location, isLatitude, LabelSymbol):
        '''Method IGraticule.AddElement

           INPUTS
            Label               : BSTR
            Location            : double
            isLatitude          : VARIANT_BOOL
            LabelSymbol         : ITextSymbol*'''
        return super(IGraticule, self).AddElement(Label, Location, isLatitude, LabelSymbol)
    def RemoveElement(self, Label):
        '''Method IGraticule.RemoveElement

           INPUT
            Label               : BSTR'''
        return super(IGraticule, self).RemoveElement(Label)
    def get_Name(self):
        '''Method IMapGrid.get_Name (from IMapGrid)

           OUTPUT
            gridName            : BSTR*'''
        return super(IGraticule, self).get_Name()
    def put_Name(self, gridName):
        '''Method IMapGrid.put_Name (from IMapGrid)

           INPUT
            gridName            : BSTR'''
        return super(IGraticule, self).put_Name(gridName)
    def get_LineSymbol(self):
        '''Method IMapGrid.get_LineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IGraticule, self).get_LineSymbol()
    def put_LineSymbol(self, Symbol):
        '''Method IMapGrid.put_LineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IGraticule, self).put_LineSymbol(Symbol)
    def get_TickMarkSymbol(self):
        '''Method IMapGrid.get_TickMarkSymbol (from IMapGrid)

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IGraticule, self).get_TickMarkSymbol()
    def put_TickMarkSymbol(self, Symbol):
        '''Method IMapGrid.put_TickMarkSymbol (from IMapGrid)

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IGraticule, self).put_TickMarkSymbol(Symbol)
    def get_LabelFormat(self):
        '''Method IMapGrid.get_LabelFormat (from IMapGrid)

           OUTPUT
            Format              : IGridLabel**'''
        return super(IGraticule, self).get_LabelFormat()
    def put_LabelFormat(self, Format):
        '''Method IMapGrid.put_LabelFormat (from IMapGrid)

           INPUT
            Format              : IGridLabel*'''
        return super(IGraticule, self).put_LabelFormat(Format)
    def get_TickLineSymbol(self):
        '''Method IMapGrid.get_TickLineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IGraticule, self).get_TickLineSymbol()
    def put_TickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_TickLineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IGraticule, self).put_TickLineSymbol(Symbol)
    def get_TickLength(self):
        '''Method IMapGrid.get_TickLength (from IMapGrid)

           OUTPUT
            lengthPoints        : double*'''
        return super(IGraticule, self).get_TickLength()
    def put_TickLength(self, lengthPoints):
        '''Method IMapGrid.put_TickLength (from IMapGrid)

           INPUT
            lengthPoints        : double'''
        return super(IGraticule, self).put_TickLength(lengthPoints)
    def get_SubTickCount(self):
        '''Method IMapGrid.get_SubTickCount (from IMapGrid)

           OUTPUT
            Count               : short*'''
        return super(IGraticule, self).get_SubTickCount()
    def put_SubTickCount(self, Count):
        '''Method IMapGrid.put_SubTickCount (from IMapGrid)

           INPUT
            Count               : short'''
        return super(IGraticule, self).put_SubTickCount(Count)
    def get_SubTickLineSymbol(self):
        '''Method IMapGrid.get_SubTickLineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IGraticule, self).get_SubTickLineSymbol()
    def put_SubTickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_SubTickLineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IGraticule, self).put_SubTickLineSymbol(Symbol)
    def get_SubTickLength(self):
        '''Method IMapGrid.get_SubTickLength (from IMapGrid)

           OUTPUT
            lengthPoints        : double*'''
        return super(IGraticule, self).get_SubTickLength()
    def put_SubTickLength(self, lengthPoints):
        '''Method IMapGrid.put_SubTickLength (from IMapGrid)

           INPUT
            lengthPoints        : double'''
        return super(IGraticule, self).put_SubTickLength(lengthPoints)
    def get_Border(self):
        '''Method IMapGrid.get_Border (from IMapGrid)

           OUTPUT
            gridBorder          : IMapGridBorder**'''
        return super(IGraticule, self).get_Border()
    def put_Border(self, gridBorder):
        '''Method IMapGrid.put_Border (from IMapGrid)

           INPUT
            gridBorder          : IMapGridBorder*'''
        return super(IGraticule, self).put_Border(gridBorder)
    def get_Visible(self):
        '''Method IMapGrid.get_Visible (from IMapGrid)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IGraticule, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IMapGrid.put_Visible (from IMapGrid)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IGraticule, self).put_Visible(Visible)
    def QueryLabelVisibility(self):
        '''Method IMapGrid.QueryLabelVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IGraticule, self).QueryLabelVisibility()
    def SetLabelVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetLabelVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IGraticule, self).SetLabelVisibility(leftVis, topVis, rightVis, bottomVis)
    def QueryTickVisibility(self):
        '''Method IMapGrid.QueryTickVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IGraticule, self).QueryTickVisibility()
    def SetTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetTickVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IGraticule, self).SetTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def QuerySubTickVisibility(self):
        '''Method IMapGrid.QuerySubTickVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IGraticule, self).QuerySubTickVisibility()
    def SetSubTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetSubTickVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IGraticule, self).SetSubTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def SetDefaults(self, pMapFrame):
        '''Method IMapGrid.SetDefaults (from IMapGrid)

           INPUT
            pMapFrame           : IMapFrame*'''
        return super(IGraticule, self).SetDefaults(pMapFrame)
    def GenerateGraphics(self, pMapFrame, GraphicsContainer):
        '''Method IMapGrid.GenerateGraphics (from IMapGrid)

           INPUTS
            pMapFrame           : IMapFrame*
            GraphicsContainer   : IGraphicsContainer*'''
        return super(IGraticule, self).GenerateGraphics(pMapFrame, GraphicsContainer)
    def PrepareForOutput(self, hDC, Dpi, pixelBounds, pMapFrame):
        '''Method IMapGrid.PrepareForOutput (from IMapGrid)

           INPUTS
            hDC                 : OLE_HANDLE
            Dpi                 : long
            pixelBounds         : tagRECT*
            pMapFrame           : IMapFrame*'''
        return super(IGraticule, self).PrepareForOutput(hDC, Dpi, pixelBounds, pMapFrame)
    def Draw(self, Display, pMapFrame):
        '''Method IMapGrid.Draw (from IMapGrid)

           INPUTS
            Display             : IDisplay*
            pMapFrame           : IMapFrame*'''
        return super(IGraticule, self).Draw(Display, pMapFrame)
    def get_ExteriorWidth(self, pDisplay, pMapFrame):
        '''Method IMapGrid.get_ExteriorWidth (from IMapGrid)

           INPUTS
            pDisplay            : IDisplay*
            pMapFrame           : IMapFrame*

           OUTPUT
            pWidth              : double*'''
        return super(IGraticule, self).get_ExteriorWidth(pDisplay, pMapFrame)
    AutoInterval = property(get_AutoInterval, put_AutoInterval, None)
    Border = property(get_Border, put_Border, None)
    LabelFormat = property(get_LabelFormat, put_LabelFormat, None)
    LineSymbol = property(get_LineSymbol, put_LineSymbol, None)
    Name = property(get_Name, put_Name, None)
    SubTickCount = property(get_SubTickCount, put_SubTickCount, None)
    SubTickLength = property(get_SubTickLength, put_SubTickLength, None)
    SubTickLineSymbol = property(get_SubTickLineSymbol, put_SubTickLineSymbol, None)
    TickLength = property(get_TickLength, put_TickLength, None)
    TickLineSymbol = property(get_TickLineSymbol, put_TickLineSymbol, None)
    TickMarkSymbol = property(get_TickMarkSymbol, put_TickMarkSymbol, None)
    Visible = property(get_Visible, put_Visible, None)

class IIndexGrid(_esriCarto.IIndexGrid):
    _IID = uuid.UUID('03762c8d-f4d0-11d1-ade8-080009ec732a')

    def __init__(self, *args, **kw):
        super(IIndexGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ColumnCount(self):
        '''Method IIndexGrid.get_ColumnCount

           OUTPUT
            Count               : long*'''
        return super(IIndexGrid, self).get_ColumnCount()
    def put_ColumnCount(self, Count):
        '''Method IIndexGrid.put_ColumnCount

           INPUT
            Count               : long'''
        return super(IIndexGrid, self).put_ColumnCount(Count)
    def get_RowCount(self):
        '''Method IIndexGrid.get_RowCount

           OUTPUT
            Count               : long*'''
        return super(IIndexGrid, self).get_RowCount()
    def put_RowCount(self, Count):
        '''Method IIndexGrid.put_RowCount

           INPUT
            Count               : long'''
        return super(IIndexGrid, self).put_RowCount(Count)
    def get_XLabel(self, Column):
        '''Method IIndexGrid.get_XLabel

           INPUT
            Column              : long

           OUTPUT
            Label               : BSTR*'''
        return super(IIndexGrid, self).get_XLabel(Column)
    def put_XLabel(self, Column, Label):
        '''Method IIndexGrid.put_XLabel

           INPUTS
            Column              : long
            Label               : BSTR'''
        return super(IIndexGrid, self).put_XLabel(Column, Label)
    def get_YLabel(self, Row):
        '''Method IIndexGrid.get_YLabel

           INPUT
            Row                 : long

           OUTPUT
            Label               : BSTR*'''
        return super(IIndexGrid, self).get_YLabel(Row)
    def put_YLabel(self, Row, Label):
        '''Method IIndexGrid.put_YLabel

           INPUTS
            Row                 : long
            Label               : BSTR'''
        return super(IIndexGrid, self).put_YLabel(Row, Label)
    def QueryCellExtent(self, Row, Column, pMapFrame, Extent):
        '''Method IIndexGrid.QueryCellExtent

           INPUTS
            Row                 : long
            Column              : long
            pMapFrame           : IMapFrame*
            Extent              : IEnvelope*'''
        return super(IIndexGrid, self).QueryCellExtent(Row, Column, pMapFrame, Extent)
    def get_Name(self):
        '''Method IMapGrid.get_Name (from IMapGrid)

           OUTPUT
            gridName            : BSTR*'''
        return super(IIndexGrid, self).get_Name()
    def put_Name(self, gridName):
        '''Method IMapGrid.put_Name (from IMapGrid)

           INPUT
            gridName            : BSTR'''
        return super(IIndexGrid, self).put_Name(gridName)
    def get_LineSymbol(self):
        '''Method IMapGrid.get_LineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IIndexGrid, self).get_LineSymbol()
    def put_LineSymbol(self, Symbol):
        '''Method IMapGrid.put_LineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IIndexGrid, self).put_LineSymbol(Symbol)
    def get_TickMarkSymbol(self):
        '''Method IMapGrid.get_TickMarkSymbol (from IMapGrid)

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(IIndexGrid, self).get_TickMarkSymbol()
    def put_TickMarkSymbol(self, Symbol):
        '''Method IMapGrid.put_TickMarkSymbol (from IMapGrid)

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(IIndexGrid, self).put_TickMarkSymbol(Symbol)
    def get_LabelFormat(self):
        '''Method IMapGrid.get_LabelFormat (from IMapGrid)

           OUTPUT
            Format              : IGridLabel**'''
        return super(IIndexGrid, self).get_LabelFormat()
    def put_LabelFormat(self, Format):
        '''Method IMapGrid.put_LabelFormat (from IMapGrid)

           INPUT
            Format              : IGridLabel*'''
        return super(IIndexGrid, self).put_LabelFormat(Format)
    def get_TickLineSymbol(self):
        '''Method IMapGrid.get_TickLineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IIndexGrid, self).get_TickLineSymbol()
    def put_TickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_TickLineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IIndexGrid, self).put_TickLineSymbol(Symbol)
    def get_TickLength(self):
        '''Method IMapGrid.get_TickLength (from IMapGrid)

           OUTPUT
            lengthPoints        : double*'''
        return super(IIndexGrid, self).get_TickLength()
    def put_TickLength(self, lengthPoints):
        '''Method IMapGrid.put_TickLength (from IMapGrid)

           INPUT
            lengthPoints        : double'''
        return super(IIndexGrid, self).put_TickLength(lengthPoints)
    def get_SubTickCount(self):
        '''Method IMapGrid.get_SubTickCount (from IMapGrid)

           OUTPUT
            Count               : short*'''
        return super(IIndexGrid, self).get_SubTickCount()
    def put_SubTickCount(self, Count):
        '''Method IMapGrid.put_SubTickCount (from IMapGrid)

           INPUT
            Count               : short'''
        return super(IIndexGrid, self).put_SubTickCount(Count)
    def get_SubTickLineSymbol(self):
        '''Method IMapGrid.get_SubTickLineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(IIndexGrid, self).get_SubTickLineSymbol()
    def put_SubTickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_SubTickLineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(IIndexGrid, self).put_SubTickLineSymbol(Symbol)
    def get_SubTickLength(self):
        '''Method IMapGrid.get_SubTickLength (from IMapGrid)

           OUTPUT
            lengthPoints        : double*'''
        return super(IIndexGrid, self).get_SubTickLength()
    def put_SubTickLength(self, lengthPoints):
        '''Method IMapGrid.put_SubTickLength (from IMapGrid)

           INPUT
            lengthPoints        : double'''
        return super(IIndexGrid, self).put_SubTickLength(lengthPoints)
    def get_Border(self):
        '''Method IMapGrid.get_Border (from IMapGrid)

           OUTPUT
            gridBorder          : IMapGridBorder**'''
        return super(IIndexGrid, self).get_Border()
    def put_Border(self, gridBorder):
        '''Method IMapGrid.put_Border (from IMapGrid)

           INPUT
            gridBorder          : IMapGridBorder*'''
        return super(IIndexGrid, self).put_Border(gridBorder)
    def get_Visible(self):
        '''Method IMapGrid.get_Visible (from IMapGrid)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IIndexGrid, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IMapGrid.put_Visible (from IMapGrid)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IIndexGrid, self).put_Visible(Visible)
    def QueryLabelVisibility(self):
        '''Method IMapGrid.QueryLabelVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IIndexGrid, self).QueryLabelVisibility()
    def SetLabelVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetLabelVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IIndexGrid, self).SetLabelVisibility(leftVis, topVis, rightVis, bottomVis)
    def QueryTickVisibility(self):
        '''Method IMapGrid.QueryTickVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IIndexGrid, self).QueryTickVisibility()
    def SetTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetTickVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IIndexGrid, self).SetTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def QuerySubTickVisibility(self):
        '''Method IMapGrid.QuerySubTickVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(IIndexGrid, self).QuerySubTickVisibility()
    def SetSubTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetSubTickVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(IIndexGrid, self).SetSubTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def SetDefaults(self, pMapFrame):
        '''Method IMapGrid.SetDefaults (from IMapGrid)

           INPUT
            pMapFrame           : IMapFrame*'''
        return super(IIndexGrid, self).SetDefaults(pMapFrame)
    def GenerateGraphics(self, pMapFrame, GraphicsContainer):
        '''Method IMapGrid.GenerateGraphics (from IMapGrid)

           INPUTS
            pMapFrame           : IMapFrame*
            GraphicsContainer   : IGraphicsContainer*'''
        return super(IIndexGrid, self).GenerateGraphics(pMapFrame, GraphicsContainer)
    def PrepareForOutput(self, hDC, Dpi, pixelBounds, pMapFrame):
        '''Method IMapGrid.PrepareForOutput (from IMapGrid)

           INPUTS
            hDC                 : OLE_HANDLE
            Dpi                 : long
            pixelBounds         : tagRECT*
            pMapFrame           : IMapFrame*'''
        return super(IIndexGrid, self).PrepareForOutput(hDC, Dpi, pixelBounds, pMapFrame)
    def Draw(self, Display, pMapFrame):
        '''Method IMapGrid.Draw (from IMapGrid)

           INPUTS
            Display             : IDisplay*
            pMapFrame           : IMapFrame*'''
        return super(IIndexGrid, self).Draw(Display, pMapFrame)
    def get_ExteriorWidth(self, pDisplay, pMapFrame):
        '''Method IMapGrid.get_ExteriorWidth (from IMapGrid)

           INPUTS
            pDisplay            : IDisplay*
            pMapFrame           : IMapFrame*

           OUTPUT
            pWidth              : double*'''
        return super(IIndexGrid, self).get_ExteriorWidth(pDisplay, pMapFrame)
    Border = property(get_Border, put_Border, None)
    ColumnCount = property(get_ColumnCount, put_ColumnCount, None)
    LabelFormat = property(get_LabelFormat, put_LabelFormat, None)
    LineSymbol = property(get_LineSymbol, put_LineSymbol, None)
    Name = property(get_Name, put_Name, None)
    RowCount = property(get_RowCount, put_RowCount, None)
    SubTickCount = property(get_SubTickCount, put_SubTickCount, None)
    SubTickLength = property(get_SubTickLength, put_SubTickLength, None)
    SubTickLineSymbol = property(get_SubTickLineSymbol, put_SubTickLineSymbol, None)
    TickLength = property(get_TickLength, put_TickLength, None)
    TickLineSymbol = property(get_TickLineSymbol, put_TickLineSymbol, None)
    TickMarkSymbol = property(get_TickMarkSymbol, put_TickMarkSymbol, None)
    Visible = property(get_Visible, put_Visible, None)
    XLabel = property(None, put_XLabel, None)
    YLabel = property(None, put_YLabel, None)
    XLabel = IndexProperty(get_XLabel, None)
    YLabel = IndexProperty(get_YLabel, None)

class ICustomOverlayGrid(_esriCarto.ICustomOverlayGrid):
    _IID = uuid.UUID('ff501c89-d74b-11d2-9f43-00c04f6bc78e')

    def __init__(self, *args, **kw):
        super(ICustomOverlayGrid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DataSource(self):
        '''Method ICustomOverlayGrid.get_DataSource

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(ICustomOverlayGrid, self).get_DataSource()
    def put_DataSource(self, FeatureClass):
        '''Method ICustomOverlayGrid.put_DataSource

           INPUT
            FeatureClass        : IFeatureClass*'''
        return super(ICustomOverlayGrid, self).put_DataSource(FeatureClass)
    def get_LabelField(self):
        '''Method ICustomOverlayGrid.get_LabelField

           OUTPUT
            FieldName           : BSTR*'''
        return super(ICustomOverlayGrid, self).get_LabelField()
    def put_LabelField(self, FieldName):
        '''Method ICustomOverlayGrid.put_LabelField

           INPUT
            FieldName           : BSTR'''
        return super(ICustomOverlayGrid, self).put_LabelField(FieldName)
    def get_Name(self):
        '''Method IMapGrid.get_Name (from IMapGrid)

           OUTPUT
            gridName            : BSTR*'''
        return super(ICustomOverlayGrid, self).get_Name()
    def put_Name(self, gridName):
        '''Method IMapGrid.put_Name (from IMapGrid)

           INPUT
            gridName            : BSTR'''
        return super(ICustomOverlayGrid, self).put_Name(gridName)
    def get_LineSymbol(self):
        '''Method IMapGrid.get_LineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ICustomOverlayGrid, self).get_LineSymbol()
    def put_LineSymbol(self, Symbol):
        '''Method IMapGrid.put_LineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ICustomOverlayGrid, self).put_LineSymbol(Symbol)
    def get_TickMarkSymbol(self):
        '''Method IMapGrid.get_TickMarkSymbol (from IMapGrid)

           OUTPUT
            Symbol              : IMarkerSymbol**'''
        return super(ICustomOverlayGrid, self).get_TickMarkSymbol()
    def put_TickMarkSymbol(self, Symbol):
        '''Method IMapGrid.put_TickMarkSymbol (from IMapGrid)

           INPUT
            Symbol              : IMarkerSymbol*'''
        return super(ICustomOverlayGrid, self).put_TickMarkSymbol(Symbol)
    def get_LabelFormat(self):
        '''Method IMapGrid.get_LabelFormat (from IMapGrid)

           OUTPUT
            Format              : IGridLabel**'''
        return super(ICustomOverlayGrid, self).get_LabelFormat()
    def put_LabelFormat(self, Format):
        '''Method IMapGrid.put_LabelFormat (from IMapGrid)

           INPUT
            Format              : IGridLabel*'''
        return super(ICustomOverlayGrid, self).put_LabelFormat(Format)
    def get_TickLineSymbol(self):
        '''Method IMapGrid.get_TickLineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ICustomOverlayGrid, self).get_TickLineSymbol()
    def put_TickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_TickLineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ICustomOverlayGrid, self).put_TickLineSymbol(Symbol)
    def get_TickLength(self):
        '''Method IMapGrid.get_TickLength (from IMapGrid)

           OUTPUT
            lengthPoints        : double*'''
        return super(ICustomOverlayGrid, self).get_TickLength()
    def put_TickLength(self, lengthPoints):
        '''Method IMapGrid.put_TickLength (from IMapGrid)

           INPUT
            lengthPoints        : double'''
        return super(ICustomOverlayGrid, self).put_TickLength(lengthPoints)
    def get_SubTickCount(self):
        '''Method IMapGrid.get_SubTickCount (from IMapGrid)

           OUTPUT
            Count               : short*'''
        return super(ICustomOverlayGrid, self).get_SubTickCount()
    def put_SubTickCount(self, Count):
        '''Method IMapGrid.put_SubTickCount (from IMapGrid)

           INPUT
            Count               : short'''
        return super(ICustomOverlayGrid, self).put_SubTickCount(Count)
    def get_SubTickLineSymbol(self):
        '''Method IMapGrid.get_SubTickLineSymbol (from IMapGrid)

           OUTPUT
            Symbol              : ILineSymbol**'''
        return super(ICustomOverlayGrid, self).get_SubTickLineSymbol()
    def put_SubTickLineSymbol(self, Symbol):
        '''Method IMapGrid.put_SubTickLineSymbol (from IMapGrid)

           INPUT
            Symbol              : ILineSymbol*'''
        return super(ICustomOverlayGrid, self).put_SubTickLineSymbol(Symbol)
    def get_SubTickLength(self):
        '''Method IMapGrid.get_SubTickLength (from IMapGrid)

           OUTPUT
            lengthPoints        : double*'''
        return super(ICustomOverlayGrid, self).get_SubTickLength()
    def put_SubTickLength(self, lengthPoints):
        '''Method IMapGrid.put_SubTickLength (from IMapGrid)

           INPUT
            lengthPoints        : double'''
        return super(ICustomOverlayGrid, self).put_SubTickLength(lengthPoints)
    def get_Border(self):
        '''Method IMapGrid.get_Border (from IMapGrid)

           OUTPUT
            gridBorder          : IMapGridBorder**'''
        return super(ICustomOverlayGrid, self).get_Border()
    def put_Border(self, gridBorder):
        '''Method IMapGrid.put_Border (from IMapGrid)

           INPUT
            gridBorder          : IMapGridBorder*'''
        return super(ICustomOverlayGrid, self).put_Border(gridBorder)
    def get_Visible(self):
        '''Method IMapGrid.get_Visible (from IMapGrid)

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(ICustomOverlayGrid, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IMapGrid.put_Visible (from IMapGrid)

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(ICustomOverlayGrid, self).put_Visible(Visible)
    def QueryLabelVisibility(self):
        '''Method IMapGrid.QueryLabelVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(ICustomOverlayGrid, self).QueryLabelVisibility()
    def SetLabelVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetLabelVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(ICustomOverlayGrid, self).SetLabelVisibility(leftVis, topVis, rightVis, bottomVis)
    def QueryTickVisibility(self):
        '''Method IMapGrid.QueryTickVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(ICustomOverlayGrid, self).QueryTickVisibility()
    def SetTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetTickVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(ICustomOverlayGrid, self).SetTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def QuerySubTickVisibility(self):
        '''Method IMapGrid.QuerySubTickVisibility (from IMapGrid)

           OUTPUTS
            leftVis             : VARIANT_BOOL*
            topVis              : VARIANT_BOOL*
            rightVis            : VARIANT_BOOL*
            bottomVis           : VARIANT_BOOL*'''
        return super(ICustomOverlayGrid, self).QuerySubTickVisibility()
    def SetSubTickVisibility(self, leftVis, topVis, rightVis, bottomVis):
        '''Method IMapGrid.SetSubTickVisibility (from IMapGrid)

           INPUTS
            leftVis             : VARIANT_BOOL
            topVis              : VARIANT_BOOL
            rightVis            : VARIANT_BOOL
            bottomVis           : VARIANT_BOOL'''
        return super(ICustomOverlayGrid, self).SetSubTickVisibility(leftVis, topVis, rightVis, bottomVis)
    def SetDefaults(self, pMapFrame):
        '''Method IMapGrid.SetDefaults (from IMapGrid)

           INPUT
            pMapFrame           : IMapFrame*'''
        return super(ICustomOverlayGrid, self).SetDefaults(pMapFrame)
    def GenerateGraphics(self, pMapFrame, GraphicsContainer):
        '''Method IMapGrid.GenerateGraphics (from IMapGrid)

           INPUTS
            pMapFrame           : IMapFrame*
            GraphicsContainer   : IGraphicsContainer*'''
        return super(ICustomOverlayGrid, self).GenerateGraphics(pMapFrame, GraphicsContainer)
    def PrepareForOutput(self, hDC, Dpi, pixelBounds, pMapFrame):
        '''Method IMapGrid.PrepareForOutput (from IMapGrid)

           INPUTS
            hDC                 : OLE_HANDLE
            Dpi                 : long
            pixelBounds         : tagRECT*
            pMapFrame           : IMapFrame*'''
        return super(ICustomOverlayGrid, self).PrepareForOutput(hDC, Dpi, pixelBounds, pMapFrame)
    def Draw(self, Display, pMapFrame):
        '''Method IMapGrid.Draw (from IMapGrid)

           INPUTS
            Display             : IDisplay*
            pMapFrame           : IMapFrame*'''
        return super(ICustomOverlayGrid, self).Draw(Display, pMapFrame)
    def get_ExteriorWidth(self, pDisplay, pMapFrame):
        '''Method IMapGrid.get_ExteriorWidth (from IMapGrid)

           INPUTS
            pDisplay            : IDisplay*
            pMapFrame           : IMapFrame*

           OUTPUT
            pWidth              : double*'''
        return super(ICustomOverlayGrid, self).get_ExteriorWidth(pDisplay, pMapFrame)
    Border = property(get_Border, put_Border, None)
    DataSource = property(get_DataSource, put_DataSource, None)
    LabelField = property(get_LabelField, put_LabelField, None)
    LabelFormat = property(get_LabelFormat, put_LabelFormat, None)
    LineSymbol = property(get_LineSymbol, put_LineSymbol, None)
    Name = property(get_Name, put_Name, None)
    SubTickCount = property(get_SubTickCount, put_SubTickCount, None)
    SubTickLength = property(get_SubTickLength, put_SubTickLength, None)
    SubTickLineSymbol = property(get_SubTickLineSymbol, put_SubTickLineSymbol, None)
    TickLength = property(get_TickLength, put_TickLength, None)
    TickLineSymbol = property(get_TickLineSymbol, put_TickLineSymbol, None)
    TickMarkSymbol = property(get_TickMarkSymbol, put_TickMarkSymbol, None)
    Visible = property(get_Visible, put_Visible, None)

class IMapGrids(_esriCarto.IMapGrids):
    _IID = uuid.UUID('08e7d005-9aae-11d2-ae7b-080009ec732a')

    def __init__(self, *args, **kw):
        super(IMapGrids, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MapGridCount(self):
        '''Method IMapGrids.get_MapGridCount

           OUTPUT
            Count               : long*'''
        return super(IMapGrids, self).get_MapGridCount()
    def get_MapGrid(self, Index):
        '''Method IMapGrids.get_MapGrid

           INPUT
            Index               : long

           OUTPUT
            MapGrid             : IMapGrid**'''
        return super(IMapGrids, self).get_MapGrid(Index)
    def put_MapGrid(self, Index, MapGrid):
        '''Method IMapGrids.put_MapGrid

           INPUTS
            Index               : long
            MapGrid             : IMapGrid*'''
        return super(IMapGrids, self).put_MapGrid(Index, MapGrid)
    def AddMapGrid(self, MapGrid):
        '''Method IMapGrids.AddMapGrid

           INPUT
            MapGrid             : IMapGrid*'''
        return super(IMapGrids, self).AddMapGrid(MapGrid)
    def DeleteMapGrid(self, MapGrid):
        '''Method IMapGrids.DeleteMapGrid

           INPUT
            MapGrid             : IMapGrid*'''
        return super(IMapGrids, self).DeleteMapGrid(MapGrid)
    def ClearMapGrids(self):
        '''Method IMapGrids.ClearMapGrids'''
        return super(IMapGrids, self).ClearMapGrids()
    MapGrid = property(None, put_MapGrid, None)
    MapGridCount = property(get_MapGridCount, None, None)
    MapGrid = IndexProperty(get_MapGrid, None)

class IMapServerIdentifyResults(_esriCarto.IMapServerIdentifyResults):
    _IID = uuid.UUID('531780b5-8b37-440e-a305-d27b960c75b7')
    def get_Count(self):
        '''Method IMapServerIdentifyResults.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerIdentifyResults, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerIdentifyResults.get_Element

           INPUT
            Index               : long

           OUTPUT
            identifyResult      : IMapServerIdentifyResult**'''
        return super(IMapServerIdentifyResults, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerIdentifyResults.Remove

           INPUT
            Index               : long'''
        return super(IMapServerIdentifyResults, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerIdentifyResults.RemoveAll'''
        return super(IMapServerIdentifyResults, self).RemoveAll()
    def Add(self, identifyResult):
        '''Method IMapServerIdentifyResults.Add

           INPUT
            identifyResult      : IMapServerIdentifyResult*'''
        return super(IMapServerIdentifyResults, self).Add(identifyResult)
    def Insert(self, Index, identifyResult):
        '''Method IMapServerIdentifyResults.Insert

           INPUTS
            Index               : long
            identifyResult      : IMapServerIdentifyResult*'''
        return super(IMapServerIdentifyResults, self).Insert(Index, identifyResult)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServer(_esriCarto.IMapServer):
    _IID = uuid.UUID('12353e37-ab79-48f7-9cb1-56ec9d7eb800')
    def get_DocumentInfo(self):
        '''Method IMapServer.get_DocumentInfo

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServer, self).get_DocumentInfo()
    def get_MapCount(self):
        '''Method IMapServer.get_MapCount

           OUTPUT
            Count               : long*'''
        return super(IMapServer, self).get_MapCount()
    def get_MapName(self, Index):
        '''Method IMapServer.get_MapName

           INPUT
            Index               : long

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer, self).get_MapName(Index)
    def get_DefaultMapName(self):
        '''Method IMapServer.get_DefaultMapName

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer, self).get_DefaultMapName()
    def GetServerInfo(self, MapName):
        '''Method IMapServer.GetServerInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            serverInfo          : IMapServerInfo**'''
        return super(IMapServer, self).GetServerInfo(MapName)
    def ExportMapImage(self, mapDesc, imageDesc):
        '''Method IMapServer.ExportMapImage

           INPUTS
            mapDesc             : IMapDescription*
            imageDesc           : IImageDescription*

           OUTPUT
            MapImage            : IMapImage**'''
        return super(IMapServer, self).ExportMapImage(mapDesc, imageDesc)
    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
        '''Method IMapServer.Find

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchString        : BSTR
            Contains            : VARIANT_BOOL
            searchFields        : BSTR
            option              : esriFindOption
            layerIds            : ILongArray*

           OUTPUT
            findResults         : IMapServerFindResults**'''
        return super(IMapServer, self).Find(mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds)
    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
        '''Method IMapServer.Identify

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchShape         : IGeometry*
            Tolerance           : long
            option              : esriIdentifyOption
            layerIds            : ILongArray*

           OUTPUT
            identifyResult      : IMapServerIdentifyResults**'''
        return super(IMapServer, self).Identify(mapDesc, MapImage, searchShape, Tolerance, option, layerIds)
    def QueryFeatureCount(self, MapName, LayerID, Filter):
        '''Method IMapServer.QueryFeatureCount

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            Count               : long*'''
        return super(IMapServer, self).QueryFeatureCount(MapName, LayerID, Filter)
    def QueryFeatureIDs(self, MapName, LayerID, Filter):
        '''Method IMapServer.QueryFeatureIDs

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IMapServer, self).QueryFeatureIDs(MapName, LayerID, Filter)
    def QueryFeatureData(self, MapName, LayerID, Filter):
        '''Method IMapServer.QueryFeatureData

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            recordSet           : IRecordSet**'''
        return super(IMapServer, self).QueryFeatureData(MapName, LayerID, Filter)
    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
        '''Method IMapServer.QueryHyperlinks

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            layerIds            : ILongArray*

           OUTPUT
            hyperlinks          : IMapServerHyperlinks**'''
        return super(IMapServer, self).QueryHyperlinks(mapDesc, MapImage, layerIds)
    def ComputeScale(self, mapDesc, mapDisplay):
        '''Method IMapServer.ComputeScale

           INPUTS
            mapDesc             : IMapDescription*
            mapDisplay          : IImageDisplay*

           OUTPUT
            Scale               : double*'''
        return super(IMapServer, self).ComputeScale(mapDesc, mapDisplay)
    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
        '''Method IMapServer.ComputeDistance

           INPUTS
            MapName             : BSTR
            fromPoint           : IPoint*
            toPoint             : IPoint*
            Units               : esriUnits

           OUTPUT
            Distance            : double*'''
        return super(IMapServer, self).ComputeDistance(MapName, fromPoint, toPoint, Units)
    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
        '''Method IMapServer.ToMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            screenXValues       : ILongArray*
            screenYValues       : ILongArray*

           OUTPUT
            mapPoints           : IPointCollection**'''
        return super(IMapServer, self).ToMapPoints(MapDescription, mapDisplay, screenXValues, screenYValues)
    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
        '''Method IMapServer.FromMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            mapPoints           : IPointCollection*

           OUTPUTS
            screenXValues       : ILongArray**
            screenYValues       : ILongArray**'''
        return super(IMapServer, self).FromMapPoints(MapDescription, mapDisplay, mapPoints)
    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
        '''Method IMapServer.GetLegendInfo

           INPUTS
            MapName             : BSTR
            layerIds            : ILongArray*
            patch               : IMapServerLegendPatch*
            imgType             : IImageType*

           OUTPUT
            legendInfos         : IMapServerLegendInfos**'''
        return super(IMapServer, self).GetLegendInfo(MapName, layerIds, patch, imgType)
    def GetSQLSyntaxInfo(self, MapName, LayerID):
        '''Method IMapServer.GetSQLSyntaxInfo

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            sqlInfo             : ISQLSyntaxInfo**'''
        return super(IMapServer, self).GetSQLSyntaxInfo(MapName, LayerID)
    def GetSupportedImageReturnTypes(self):
        '''Method IMapServer.GetSupportedImageReturnTypes

           OUTPUT
            retType             : esriImageReturnType*'''
        return super(IMapServer, self).GetSupportedImageReturnTypes()
    DefaultMapName = property(get_DefaultMapName, None, None)
    DocumentInfo = property(get_DocumentInfo, None, None)
    MapCount = property(get_MapCount, None, None)
    MapName = IndexProperty(get_MapName, None)

class IMapServer2(_esriCarto.IMapServer2):
    _IID = uuid.UUID('a96fc7c0-57f7-4fc1-993a-4913b2ced0ed')
    def get_DocumentInfo(self):
        '''Method IMapServer2.get_DocumentInfo

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServer2, self).get_DocumentInfo()
    def get_MapCount(self):
        '''Method IMapServer2.get_MapCount

           OUTPUT
            Count               : long*'''
        return super(IMapServer2, self).get_MapCount()
    def get_MapName(self, Index):
        '''Method IMapServer2.get_MapName

           INPUT
            Index               : long

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer2, self).get_MapName(Index)
    def get_DefaultMapName(self):
        '''Method IMapServer2.get_DefaultMapName

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer2, self).get_DefaultMapName()
    def GetServerInfo(self, MapName):
        '''Method IMapServer2.GetServerInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            serverInfo          : IMapServerInfo**'''
        return super(IMapServer2, self).GetServerInfo(MapName)
    def ExportMapImage(self, mapDesc, imageDesc):
        '''Method IMapServer2.ExportMapImage

           INPUTS
            mapDesc             : IMapDescription*
            imageDesc           : IImageDescription*

           OUTPUT
            MapImage            : IMapImage**'''
        return super(IMapServer2, self).ExportMapImage(mapDesc, imageDesc)
    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
        '''Method IMapServer2.Find

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchString        : BSTR
            Contains            : VARIANT_BOOL
            searchFields        : BSTR
            option              : esriFindOption
            layerIds            : ILongArray*

           OUTPUT
            findResults         : IMapServerFindResults**'''
        return super(IMapServer2, self).Find(mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds)
    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
        '''Method IMapServer2.Identify

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchShape         : IGeometry*
            Tolerance           : long
            option              : esriIdentifyOption
            layerIds            : ILongArray*

           OUTPUT
            identifyResult      : IMapServerIdentifyResults**'''
        return super(IMapServer2, self).Identify(mapDesc, MapImage, searchShape, Tolerance, option, layerIds)
    def QueryFeatureCount(self, MapName, LayerID, Filter):
        '''Method IMapServer2.QueryFeatureCount

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            Count               : long*'''
        return super(IMapServer2, self).QueryFeatureCount(MapName, LayerID, Filter)
    def QueryFeatureIDs(self, MapName, LayerID, Filter):
        '''Method IMapServer2.QueryFeatureIDs

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IMapServer2, self).QueryFeatureIDs(MapName, LayerID, Filter)
    def QueryFeatureData(self, MapName, LayerID, Filter):
        '''Method IMapServer2.QueryFeatureData

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            recordSet           : IRecordSet**'''
        return super(IMapServer2, self).QueryFeatureData(MapName, LayerID, Filter)
    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
        '''Method IMapServer2.QueryHyperlinks

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            layerIds            : ILongArray*

           OUTPUT
            hyperlinks          : IMapServerHyperlinks**'''
        return super(IMapServer2, self).QueryHyperlinks(mapDesc, MapImage, layerIds)
    def ComputeScale(self, mapDesc, mapDisplay):
        '''Method IMapServer2.ComputeScale

           INPUTS
            mapDesc             : IMapDescription*
            mapDisplay          : IImageDisplay*

           OUTPUT
            Scale               : double*'''
        return super(IMapServer2, self).ComputeScale(mapDesc, mapDisplay)
    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
        '''Method IMapServer2.ComputeDistance

           INPUTS
            MapName             : BSTR
            fromPoint           : IPoint*
            toPoint             : IPoint*
            Units               : esriUnits

           OUTPUT
            Distance            : double*'''
        return super(IMapServer2, self).ComputeDistance(MapName, fromPoint, toPoint, Units)
    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
        '''Method IMapServer2.ToMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            screenXValues       : ILongArray*
            screenYValues       : ILongArray*

           OUTPUT
            mapPoints           : IPointCollection**'''
        return super(IMapServer2, self).ToMapPoints(MapDescription, mapDisplay, screenXValues, screenYValues)
    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
        '''Method IMapServer2.FromMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            mapPoints           : IPointCollection*

           OUTPUTS
            screenXValues       : ILongArray**
            screenYValues       : ILongArray**'''
        return super(IMapServer2, self).FromMapPoints(MapDescription, mapDisplay, mapPoints)
    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
        '''Method IMapServer2.GetLegendInfo

           INPUTS
            MapName             : BSTR
            layerIds            : ILongArray*
            patch               : IMapServerLegendPatch*
            imgType             : IImageType*

           OUTPUT
            legendInfos         : IMapServerLegendInfos**'''
        return super(IMapServer2, self).GetLegendInfo(MapName, layerIds, patch, imgType)
    def GetSQLSyntaxInfo(self, MapName, LayerID):
        '''Method IMapServer2.GetSQLSyntaxInfo

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            sqlInfo             : ISQLSyntaxInfo**'''
        return super(IMapServer2, self).GetSQLSyntaxInfo(MapName, LayerID)
    def GetSupportedImageReturnTypes(self):
        '''Method IMapServer2.GetSupportedImageReturnTypes

           OUTPUT
            retType             : esriImageReturnType*'''
        return super(IMapServer2, self).GetSupportedImageReturnTypes()
    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
        '''Method IMapServer2.ExportScaleBar

           INPUTS
            Scalebar            : IScaleBar*
            mapDesc             : IMapDescription*
            pMapDisplay         : IImageDisplay*
            BackgroundColor     : IColor*
            imageDesc           : IImageDescription*

           OUTPUT
            ImageResult         : IImageResult**'''
        return super(IMapServer2, self).ExportScaleBar(Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc)
    def QueryFeatureCount2(self, MapName, pLayerDescription, Filter):
        '''Method IMapServer2.QueryFeatureCount2

           INPUTS
            MapName             : BSTR
            pLayerDescription   : ILayerDescription*
            Filter              : IQueryFilter*

           OUTPUT
            Count               : long*'''
        return super(IMapServer2, self).QueryFeatureCount2(MapName, pLayerDescription, Filter)
    def QueryFeatureIDs2(self, MapName, pLayerDesciscription, Filter):
        '''Method IMapServer2.QueryFeatureIDs2

           INPUTS
            MapName             : BSTR
            pLayerDesciscription: ILayerDescription*
            Filter              : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IMapServer2, self).QueryFeatureIDs2(MapName, pLayerDesciscription, Filter)
    def QueryFeatureData2(self, MapName, pLayerDesciscription, Filter, options):
        '''Method IMapServer2.QueryFeatureData2

           INPUTS
            MapName             : BSTR
            pLayerDesciscription: ILayerDescription*
            Filter              : IQueryFilter*
            options             : IQueryResultOptions*

           OUTPUT
            QueryResult         : IQueryResult**'''
        return super(IMapServer2, self).QueryFeatureData2(MapName, pLayerDesciscription, Filter, options)
    def get_ServiceConfigurationInfo(self):
        '''Method IMapServer2.get_ServiceConfigurationInfo

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IMapServer2, self).get_ServiceConfigurationInfo()
    DefaultMapName = property(get_DefaultMapName, None, None)
    DocumentInfo = property(get_DocumentInfo, None, None)
    MapCount = property(get_MapCount, None, None)
    ServiceConfigurationInfo = property(get_ServiceConfigurationInfo, None, None)
    MapName = IndexProperty(get_MapName, None)

class IKmlConversion(_esriCarto.IKmlConversion):
    _IID = uuid.UUID('da7f107f-ae0c-4684-90d1-68b3570560e7')
    def LayerToFile(self, pLayer, pQueryFilter, pKmlParameters, Filename):
        '''Method IKmlConversion.LayerToFile

           INPUTS
            pLayer              : ILayer*
            pQueryFilter        : IQueryFilter*
            pKmlParameters      : IPropertySet*
            Filename            : BSTR'''
        return super(IKmlConversion, self).LayerToFile(pLayer, pQueryFilter, pKmlParameters, Filename)
    def LayerToArray(self, pLayer, pQueryFilter, pKmlParameters):
        '''Method IKmlConversion.LayerToArray

           INPUTS
            pLayer              : ILayer*
            pQueryFilter        : IQueryFilter*
            pKmlParameters      : IPropertySet*

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IKmlConversion, self).LayerToArray(pLayer, pQueryFilter, pKmlParameters)
    def MapToFile(self, pMap, pQueryFilter, pKmlParameters, pLayerIDs, Filename):
        '''Method IKmlConversion.MapToFile

           INPUTS
            pMap                : IMap*
            pQueryFilter        : IQueryFilter*
            pKmlParameters      : IPropertySet*
            pLayerIDs           : BSTR*
            Filename            : BSTR'''
        return super(IKmlConversion, self).MapToFile(pMap, pQueryFilter, pKmlParameters, pLayerIDs, Filename)
    def MapToArray(self, pMap, pQueryFilter, pKmlParameters, pLayerIDs):
        '''Method IKmlConversion.MapToArray

           INPUTS
            pMap                : IMap*
            pQueryFilter        : IQueryFilter*
            pKmlParameters      : IPropertySet*
            pLayerIDs           : BSTR*

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IKmlConversion, self).MapToArray(pMap, pQueryFilter, pKmlParameters, pLayerIDs)
    def MapServerMapToFile(self, pMapServer, pQueryFilter, pKmlParameters, pLayerIDs, Filename):
        '''Method IKmlConversion.MapServerMapToFile

           INPUTS
            pMapServer          : IMapServer*
            pQueryFilter        : IQueryFilter*
            pKmlParameters      : IPropertySet*
            pLayerIDs           : BSTR*
            Filename            : BSTR'''
        return super(IKmlConversion, self).MapServerMapToFile(pMapServer, pQueryFilter, pKmlParameters, pLayerIDs, Filename)
    def MapServerMapToArray(self, pMapServer, pQueryFilter, pKmlParameters, pLayerIDs):
        '''Method IKmlConversion.MapServerMapToArray

           INPUTS
            pMapServer          : IMapServer*
            pQueryFilter        : IQueryFilter*
            pKmlParameters      : IPropertySet*
            pLayerIDs           : BSTR*

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IKmlConversion, self).MapServerMapToArray(pMapServer, pQueryFilter, pKmlParameters, pLayerIDs)
    def GetLayerIDListFromMap(self, pMap):
        '''Method IKmlConversion.GetLayerIDListFromMap

           INPUT
            pMap                : IMap*

           OUTPUT
            pLayerIDs           : IArray**'''
        return super(IKmlConversion, self).GetLayerIDListFromMap(pMap)
    def GetLayerIDListFromMapServer(self, pMapServer):
        '''Method IKmlConversion.GetLayerIDListFromMapServer

           INPUT
            pMapServer          : IMapServer*

           OUTPUT
            pLayerIDs           : IArray**'''
        return super(IKmlConversion, self).GetLayerIDListFromMapServer(pMapServer)

class IMapServer3(_esriCarto.IMapServer3):
    _IID = uuid.UUID('58a70e5d-f883-4919-b573-cabaf849a7ce')
    def QueryData(self, MapName, pMapTableDescription, Filter, options):
        '''Method IMapServer3.QueryData

           INPUTS
            MapName             : BSTR
            pMapTableDescription: IMapTableDescription*
            Filter              : IQueryFilter*
            options             : IQueryResultOptions*

           OUTPUT
            QueryResult         : IQueryResult**'''
        return super(IMapServer3, self).QueryData(MapName, pMapTableDescription, Filter, options)
    def QueryRowCount(self, MapName, pTableDescription, pFilter):
        '''Method IMapServer3.QueryRowCount

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pFilter             : IQueryFilter*

           OUTPUT
            pCount              : long*'''
        return super(IMapServer3, self).QueryRowCount(MapName, pTableDescription, pFilter)
    def QueryRowIDs(self, MapName, pTableDescription, pFilter):
        '''Method IMapServer3.QueryRowIDs

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pFilter             : IQueryFilter*

           OUTPUT
            FIDs                : ILongArray**'''
        return super(IMapServer3, self).QueryRowIDs(MapName, pTableDescription, pFilter)
    def QueryRelatedRecords(self, MapName, sourceTable, pFIDs, RelateDescription):
        '''Method IMapServer3.QueryRelatedRecords

           INPUTS
            MapName             : BSTR
            sourceTable         : long
            pFIDs               : IFIDSet*
            RelateDescription   : IRelateDescription*

           OUTPUT
            ppQueryResult       : IQueryResult**'''
        return super(IMapServer3, self).QueryRelatedRecords(MapName, sourceTable, pFIDs, RelateDescription)
    def QueryRasterValue(self, MapName, sourceTableID, rowIDs, FieldName, rasterValueType):
        '''Method IMapServer3.QueryRasterValue

           INPUTS
            MapName             : BSTR
            sourceTableID       : long
            rowIDs              : ILongArray*
            FieldName           : BSTR
            rasterValueType     : IImageType*

           OUTPUT
            ppImageResults      : IImageResults**'''
        return super(IMapServer3, self).QueryRasterValue(MapName, sourceTableID, rowIDs, FieldName, rasterValueType)
    def QueryAttachmentInfos(self, MapName, TableID, rowIDs):
        '''Method IMapServer3.QueryAttachmentInfos

           INPUTS
            MapName             : BSTR
            TableID             : long
            rowIDs              : ILongArray*

           OUTPUT
            ppAttachmentInfos   : IAttachmentInfoArray**'''
        return super(IMapServer3, self).QueryAttachmentInfos(MapName, TableID, rowIDs)
    def QueryAttachmentData(self, MapName, TableID, attachmentIDs, TransportType):
        '''Method IMapServer3.QueryAttachmentData

           INPUTS
            MapName             : BSTR
            TableID             : long
            attachmentIDs       : ILongArray*
            TransportType       : esriTransportType

           OUTPUT
            attachmentDataArray : IAttachmentDataArray**'''
        return super(IMapServer3, self).QueryAttachmentData(MapName, TableID, attachmentIDs, TransportType)
    def QueryHTMLPopups(self, MapName, TableID, pRowIDs):
        '''Method IMapServer3.QueryHTMLPopups

           INPUTS
            MapName             : BSTR
            TableID             : long
            pRowIDs             : ILongArray*

           OUTPUT
            HTMLTextArray       : IStringArray**'''
        return super(IMapServer3, self).QueryHTMLPopups(MapName, TableID, pRowIDs)
    def GetDefaultLayerDrawingDescriptions(self, MapName, pLayerIDs, outputOptions):
        '''Method IMapServer3.GetDefaultLayerDrawingDescriptions

           INPUTS
            MapName             : BSTR
            pLayerIDs           : ILongArray*
            outputOptions       : IServerSymbolOutputOptions*

           OUTPUT
            ppLayerDrawingDescriptions: ILayerDrawingDescriptions**'''
        return super(IMapServer3, self).GetDefaultLayerDrawingDescriptions(MapName, pLayerIDs, outputOptions)
    def GetMapTableSubtypeInfos(self, MapName, pTableIDs):
        '''Method IMapServer3.GetMapTableSubtypeInfos

           INPUTS
            MapName             : BSTR
            pTableIDs           : ILongArray*

           OUTPUT
            ppMapTableSubtypeInfos: IMapTableSubtypeInfos**'''
        return super(IMapServer3, self).GetMapTableSubtypeInfos(MapName, pTableIDs)
    def get_DocumentInfo(self):
        '''Method IMapServer3.get_DocumentInfo

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServer3, self).get_DocumentInfo()
    def get_MapCount(self):
        '''Method IMapServer3.get_MapCount

           OUTPUT
            Count               : long*'''
        return super(IMapServer3, self).get_MapCount()
    def get_MapName(self, Index):
        '''Method IMapServer3.get_MapName

           INPUT
            Index               : long

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer3, self).get_MapName(Index)
    def get_DefaultMapName(self):
        '''Method IMapServer3.get_DefaultMapName

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer3, self).get_DefaultMapName()
    def GetServerInfo(self, MapName):
        '''Method IMapServer3.GetServerInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            serverInfo          : IMapServerInfo**'''
        return super(IMapServer3, self).GetServerInfo(MapName)
    def ExportMapImage(self, mapDesc, imageDesc):
        '''Method IMapServer3.ExportMapImage

           INPUTS
            mapDesc             : IMapDescription*
            imageDesc           : IImageDescription*

           OUTPUT
            MapImage            : IMapImage**'''
        return super(IMapServer3, self).ExportMapImage(mapDesc, imageDesc)
    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
        '''Method IMapServer3.Find

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchString        : BSTR
            Contains            : VARIANT_BOOL
            searchFields        : BSTR
            option              : esriFindOption
            layerIds            : ILongArray*

           OUTPUT
            findResults         : IMapServerFindResults**'''
        return super(IMapServer3, self).Find(mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds)
    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
        '''Method IMapServer3.Identify

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchShape         : IGeometry*
            Tolerance           : long
            option              : esriIdentifyOption
            layerIds            : ILongArray*

           OUTPUT
            identifyResult      : IMapServerIdentifyResults**'''
        return super(IMapServer3, self).Identify(mapDesc, MapImage, searchShape, Tolerance, option, layerIds)
    def QueryFeatureCount(self, MapName, LayerID, Filter):
        '''Method IMapServer3.QueryFeatureCount

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            Count               : long*'''
        return super(IMapServer3, self).QueryFeatureCount(MapName, LayerID, Filter)
    def QueryFeatureIDs(self, MapName, LayerID, Filter):
        '''Method IMapServer3.QueryFeatureIDs

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IMapServer3, self).QueryFeatureIDs(MapName, LayerID, Filter)
    def QueryFeatureData(self, MapName, LayerID, Filter):
        '''Method IMapServer3.QueryFeatureData

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            recordSet           : IRecordSet**'''
        return super(IMapServer3, self).QueryFeatureData(MapName, LayerID, Filter)
    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
        '''Method IMapServer3.QueryHyperlinks

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            layerIds            : ILongArray*

           OUTPUT
            hyperlinks          : IMapServerHyperlinks**'''
        return super(IMapServer3, self).QueryHyperlinks(mapDesc, MapImage, layerIds)
    def ComputeScale(self, mapDesc, mapDisplay):
        '''Method IMapServer3.ComputeScale

           INPUTS
            mapDesc             : IMapDescription*
            mapDisplay          : IImageDisplay*

           OUTPUT
            Scale               : double*'''
        return super(IMapServer3, self).ComputeScale(mapDesc, mapDisplay)
    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
        '''Method IMapServer3.ComputeDistance

           INPUTS
            MapName             : BSTR
            fromPoint           : IPoint*
            toPoint             : IPoint*
            Units               : esriUnits

           OUTPUT
            Distance            : double*'''
        return super(IMapServer3, self).ComputeDistance(MapName, fromPoint, toPoint, Units)
    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
        '''Method IMapServer3.ToMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            screenXValues       : ILongArray*
            screenYValues       : ILongArray*

           OUTPUT
            mapPoints           : IPointCollection**'''
        return super(IMapServer3, self).ToMapPoints(MapDescription, mapDisplay, screenXValues, screenYValues)
    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
        '''Method IMapServer3.FromMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            mapPoints           : IPointCollection*

           OUTPUTS
            screenXValues       : ILongArray**
            screenYValues       : ILongArray**'''
        return super(IMapServer3, self).FromMapPoints(MapDescription, mapDisplay, mapPoints)
    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
        '''Method IMapServer3.GetLegendInfo

           INPUTS
            MapName             : BSTR
            layerIds            : ILongArray*
            patch               : IMapServerLegendPatch*
            imgType             : IImageType*

           OUTPUT
            legendInfos         : IMapServerLegendInfos**'''
        return super(IMapServer3, self).GetLegendInfo(MapName, layerIds, patch, imgType)
    def GetSQLSyntaxInfo(self, MapName, LayerID):
        '''Method IMapServer3.GetSQLSyntaxInfo

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            sqlInfo             : ISQLSyntaxInfo**'''
        return super(IMapServer3, self).GetSQLSyntaxInfo(MapName, LayerID)
    def GetSupportedImageReturnTypes(self):
        '''Method IMapServer3.GetSupportedImageReturnTypes

           OUTPUT
            retType             : esriImageReturnType*'''
        return super(IMapServer3, self).GetSupportedImageReturnTypes()
    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
        '''Method IMapServer3.ExportScaleBar

           INPUTS
            Scalebar            : IScaleBar*
            mapDesc             : IMapDescription*
            pMapDisplay         : IImageDisplay*
            BackgroundColor     : IColor*
            imageDesc           : IImageDescription*

           OUTPUT
            ImageResult         : IImageResult**'''
        return super(IMapServer3, self).ExportScaleBar(Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc)
    def QueryFeatureCount2(self, MapName, pLayerDescription, Filter):
        '''Method IMapServer3.QueryFeatureCount2

           INPUTS
            MapName             : BSTR
            pLayerDescription   : ILayerDescription*
            Filter              : IQueryFilter*

           OUTPUT
            Count               : long*'''
        return super(IMapServer3, self).QueryFeatureCount2(MapName, pLayerDescription, Filter)
    def QueryFeatureIDs2(self, MapName, pLayerDesciscription, Filter):
        '''Method IMapServer3.QueryFeatureIDs2

           INPUTS
            MapName             : BSTR
            pLayerDesciscription: ILayerDescription*
            Filter              : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IMapServer3, self).QueryFeatureIDs2(MapName, pLayerDesciscription, Filter)
    def QueryFeatureData2(self, MapName, pLayerDesciscription, Filter, options):
        '''Method IMapServer3.QueryFeatureData2

           INPUTS
            MapName             : BSTR
            pLayerDesciscription: ILayerDescription*
            Filter              : IQueryFilter*
            options             : IQueryResultOptions*

           OUTPUT
            QueryResult         : IQueryResult**'''
        return super(IMapServer3, self).QueryFeatureData2(MapName, pLayerDesciscription, Filter, options)
    def get_ServiceConfigurationInfo(self):
        '''Method IMapServer3.get_ServiceConfigurationInfo

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IMapServer3, self).get_ServiceConfigurationInfo()
    DefaultMapName = property(get_DefaultMapName, None, None)
    DocumentInfo = property(get_DocumentInfo, None, None)
    MapCount = property(get_MapCount, None, None)
    ServiceConfigurationInfo = property(get_ServiceConfigurationInfo, None, None)
    MapName = IndexProperty(get_MapName, None)

class IMapServer4(_esriCarto.IMapServer4):
    _IID = uuid.UUID('f1ec368e-d632-4f3f-a595-7742ec824e2b')
    def GenerateDataClasses(self, MapName, pTableDescription, pDataClassificationDef):
        '''Method IMapServer4.GenerateDataClasses

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pDataClassificationDef: IDataClassificationDef*

           OUTPUT
            ppFeatureRenderer   : IFeatureRenderer**'''
        return super(IMapServer4, self).GenerateDataClasses(MapName, pTableDescription, pDataClassificationDef)
    def QueryRelatedRecords2(self, MapName, pTableDescription, pFIDs, RelateDescription):
        '''Method IMapServer4.QueryRelatedRecords2

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pFIDs               : IFIDSet*
            RelateDescription   : IRelateDescription*

           OUTPUT
            ppQueryResult       : IQueryResult**'''
        return super(IMapServer4, self).QueryRelatedRecords2(MapName, pTableDescription, pFIDs, RelateDescription)
    def QueryRasterValue2(self, MapName, pTableDescription, rowIDs, FieldName, rasterValueType):
        '''Method IMapServer4.QueryRasterValue2

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            rowIDs              : ILongArray*
            FieldName           : BSTR
            rasterValueType     : IImageType*

           OUTPUT
            ppImageResults      : IImageResults**'''
        return super(IMapServer4, self).QueryRasterValue2(MapName, pTableDescription, rowIDs, FieldName, rasterValueType)
    def QueryAttachmentInfos2(self, MapName, pTableDescription, rowIDs):
        '''Method IMapServer4.QueryAttachmentInfos2

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            rowIDs              : ILongArray*

           OUTPUT
            ppAttachmentInfos   : IAttachmentInfoArray**'''
        return super(IMapServer4, self).QueryAttachmentInfos2(MapName, pTableDescription, rowIDs)
    def QueryAttachmentData2(self, MapName, pTableDescription, attachmentIDs, TransportType):
        '''Method IMapServer4.QueryAttachmentData2

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            attachmentIDs       : ILongArray*
            TransportType       : esriTransportType

           OUTPUT
            attachmentDataArray : IAttachmentDataArray**'''
        return super(IMapServer4, self).QueryAttachmentData2(MapName, pTableDescription, attachmentIDs, TransportType)
    def QueryHTMLPopups2(self, MapName, pTableDescription, pRowIDs):
        '''Method IMapServer4.QueryHTMLPopups2

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pRowIDs             : ILongArray*

           OUTPUT
            HTMLTextArray       : IStringArray**'''
        return super(IMapServer4, self).QueryHTMLPopups2(MapName, pTableDescription, pRowIDs)
    def GetMapTableSubtypeInfos2(self, MapName, pLayers):
        '''Method IMapServer4.GetMapTableSubtypeInfos2

           INPUTS
            MapName             : BSTR
            pLayers             : ILayerDescriptions*

           OUTPUT
            ppMapTableSubtypeInfos: IMapTableSubtypeInfos**'''
        return super(IMapServer4, self).GetMapTableSubtypeInfos2(MapName, pLayers)
    def QueryDataStatistics(self, MapName, pTableDescription, pRequest, pQueryFilter):
        '''Method IMapServer4.QueryDataStatistics

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pRequest            : IStatisticsRequest*
            pQueryFilter        : IQueryFilter*

           OUTPUT
            ppResult            : IRecordSet**'''
        return super(IMapServer4, self).QueryDataStatistics(MapName, pTableDescription, pRequest, pQueryFilter)
    def QueryData(self, MapName, pMapTableDescription, Filter, options):
        '''Method IMapServer4.QueryData

           INPUTS
            MapName             : BSTR
            pMapTableDescription: IMapTableDescription*
            Filter              : IQueryFilter*
            options             : IQueryResultOptions*

           OUTPUT
            QueryResult         : IQueryResult**'''
        return super(IMapServer4, self).QueryData(MapName, pMapTableDescription, Filter, options)
    def QueryRowCount(self, MapName, pTableDescription, pFilter):
        '''Method IMapServer4.QueryRowCount

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pFilter             : IQueryFilter*

           OUTPUT
            pCount              : long*'''
        return super(IMapServer4, self).QueryRowCount(MapName, pTableDescription, pFilter)
    def QueryRowIDs(self, MapName, pTableDescription, pFilter):
        '''Method IMapServer4.QueryRowIDs

           INPUTS
            MapName             : BSTR
            pTableDescription   : IMapTableDescription*
            pFilter             : IQueryFilter*

           OUTPUT
            FIDs                : ILongArray**'''
        return super(IMapServer4, self).QueryRowIDs(MapName, pTableDescription, pFilter)
    def QueryRelatedRecords(self, MapName, sourceTable, pFIDs, RelateDescription):
        '''Method IMapServer4.QueryRelatedRecords

           INPUTS
            MapName             : BSTR
            sourceTable         : long
            pFIDs               : IFIDSet*
            RelateDescription   : IRelateDescription*

           OUTPUT
            ppQueryResult       : IQueryResult**'''
        return super(IMapServer4, self).QueryRelatedRecords(MapName, sourceTable, pFIDs, RelateDescription)
    def QueryRasterValue(self, MapName, sourceTableID, rowIDs, FieldName, rasterValueType):
        '''Method IMapServer4.QueryRasterValue

           INPUTS
            MapName             : BSTR
            sourceTableID       : long
            rowIDs              : ILongArray*
            FieldName           : BSTR
            rasterValueType     : IImageType*

           OUTPUT
            ppImageResults      : IImageResults**'''
        return super(IMapServer4, self).QueryRasterValue(MapName, sourceTableID, rowIDs, FieldName, rasterValueType)
    def QueryAttachmentInfos(self, MapName, TableID, rowIDs):
        '''Method IMapServer4.QueryAttachmentInfos

           INPUTS
            MapName             : BSTR
            TableID             : long
            rowIDs              : ILongArray*

           OUTPUT
            ppAttachmentInfos   : IAttachmentInfoArray**'''
        return super(IMapServer4, self).QueryAttachmentInfos(MapName, TableID, rowIDs)
    def QueryAttachmentData(self, MapName, TableID, attachmentIDs, TransportType):
        '''Method IMapServer4.QueryAttachmentData

           INPUTS
            MapName             : BSTR
            TableID             : long
            attachmentIDs       : ILongArray*
            TransportType       : esriTransportType

           OUTPUT
            attachmentDataArray : IAttachmentDataArray**'''
        return super(IMapServer4, self).QueryAttachmentData(MapName, TableID, attachmentIDs, TransportType)
    def QueryHTMLPopups(self, MapName, TableID, pRowIDs):
        '''Method IMapServer4.QueryHTMLPopups

           INPUTS
            MapName             : BSTR
            TableID             : long
            pRowIDs             : ILongArray*

           OUTPUT
            HTMLTextArray       : IStringArray**'''
        return super(IMapServer4, self).QueryHTMLPopups(MapName, TableID, pRowIDs)
    def GetDefaultLayerDrawingDescriptions(self, MapName, pLayerIDs, outputOptions):
        '''Method IMapServer4.GetDefaultLayerDrawingDescriptions

           INPUTS
            MapName             : BSTR
            pLayerIDs           : ILongArray*
            outputOptions       : IServerSymbolOutputOptions*

           OUTPUT
            ppLayerDrawingDescriptions: ILayerDrawingDescriptions**'''
        return super(IMapServer4, self).GetDefaultLayerDrawingDescriptions(MapName, pLayerIDs, outputOptions)
    def GetMapTableSubtypeInfos(self, MapName, pTableIDs):
        '''Method IMapServer4.GetMapTableSubtypeInfos

           INPUTS
            MapName             : BSTR
            pTableIDs           : ILongArray*

           OUTPUT
            ppMapTableSubtypeInfos: IMapTableSubtypeInfos**'''
        return super(IMapServer4, self).GetMapTableSubtypeInfos(MapName, pTableIDs)
    def get_DocumentInfo(self):
        '''Method IMapServer4.get_DocumentInfo

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServer4, self).get_DocumentInfo()
    def get_MapCount(self):
        '''Method IMapServer4.get_MapCount

           OUTPUT
            Count               : long*'''
        return super(IMapServer4, self).get_MapCount()
    def get_MapName(self, Index):
        '''Method IMapServer4.get_MapName

           INPUT
            Index               : long

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer4, self).get_MapName(Index)
    def get_DefaultMapName(self):
        '''Method IMapServer4.get_DefaultMapName

           OUTPUT
            MapName             : BSTR*'''
        return super(IMapServer4, self).get_DefaultMapName()
    def GetServerInfo(self, MapName):
        '''Method IMapServer4.GetServerInfo

           INPUT
            MapName             : BSTR

           OUTPUT
            serverInfo          : IMapServerInfo**'''
        return super(IMapServer4, self).GetServerInfo(MapName)
    def ExportMapImage(self, mapDesc, imageDesc):
        '''Method IMapServer4.ExportMapImage

           INPUTS
            mapDesc             : IMapDescription*
            imageDesc           : IImageDescription*

           OUTPUT
            MapImage            : IMapImage**'''
        return super(IMapServer4, self).ExportMapImage(mapDesc, imageDesc)
    def Find(self, mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds):
        '''Method IMapServer4.Find

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchString        : BSTR
            Contains            : VARIANT_BOOL
            searchFields        : BSTR
            option              : esriFindOption
            layerIds            : ILongArray*

           OUTPUT
            findResults         : IMapServerFindResults**'''
        return super(IMapServer4, self).Find(mapDesc, MapImage, searchString, Contains, searchFields, option, layerIds)
    def Identify(self, mapDesc, MapImage, searchShape, Tolerance, option, layerIds):
        '''Method IMapServer4.Identify

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            searchShape         : IGeometry*
            Tolerance           : long
            option              : esriIdentifyOption
            layerIds            : ILongArray*

           OUTPUT
            identifyResult      : IMapServerIdentifyResults**'''
        return super(IMapServer4, self).Identify(mapDesc, MapImage, searchShape, Tolerance, option, layerIds)
    def QueryFeatureCount(self, MapName, LayerID, Filter):
        '''Method IMapServer4.QueryFeatureCount

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            Count               : long*'''
        return super(IMapServer4, self).QueryFeatureCount(MapName, LayerID, Filter)
    def QueryFeatureIDs(self, MapName, LayerID, Filter):
        '''Method IMapServer4.QueryFeatureIDs

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IMapServer4, self).QueryFeatureIDs(MapName, LayerID, Filter)
    def QueryFeatureData(self, MapName, LayerID, Filter):
        '''Method IMapServer4.QueryFeatureData

           INPUTS
            MapName             : BSTR
            LayerID             : long
            Filter              : IQueryFilter*

           OUTPUT
            recordSet           : IRecordSet**'''
        return super(IMapServer4, self).QueryFeatureData(MapName, LayerID, Filter)
    def QueryHyperlinks(self, mapDesc, MapImage, layerIds):
        '''Method IMapServer4.QueryHyperlinks

           INPUTS
            mapDesc             : IMapDescription*
            MapImage            : IImageDisplay*
            layerIds            : ILongArray*

           OUTPUT
            hyperlinks          : IMapServerHyperlinks**'''
        return super(IMapServer4, self).QueryHyperlinks(mapDesc, MapImage, layerIds)
    def ComputeScale(self, mapDesc, mapDisplay):
        '''Method IMapServer4.ComputeScale

           INPUTS
            mapDesc             : IMapDescription*
            mapDisplay          : IImageDisplay*

           OUTPUT
            Scale               : double*'''
        return super(IMapServer4, self).ComputeScale(mapDesc, mapDisplay)
    def ComputeDistance(self, MapName, fromPoint, toPoint, Units):
        '''Method IMapServer4.ComputeDistance

           INPUTS
            MapName             : BSTR
            fromPoint           : IPoint*
            toPoint             : IPoint*
            Units               : esriUnits

           OUTPUT
            Distance            : double*'''
        return super(IMapServer4, self).ComputeDistance(MapName, fromPoint, toPoint, Units)
    def ToMapPoints(self, MapDescription, mapDisplay, screenXValues, screenYValues):
        '''Method IMapServer4.ToMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            screenXValues       : ILongArray*
            screenYValues       : ILongArray*

           OUTPUT
            mapPoints           : IPointCollection**'''
        return super(IMapServer4, self).ToMapPoints(MapDescription, mapDisplay, screenXValues, screenYValues)
    def FromMapPoints(self, MapDescription, mapDisplay, mapPoints):
        '''Method IMapServer4.FromMapPoints

           INPUTS
            MapDescription      : IMapDescription*
            mapDisplay          : IImageDisplay*
            mapPoints           : IPointCollection*

           OUTPUTS
            screenXValues       : ILongArray**
            screenYValues       : ILongArray**'''
        return super(IMapServer4, self).FromMapPoints(MapDescription, mapDisplay, mapPoints)
    def GetLegendInfo(self, MapName, layerIds, patch, imgType):
        '''Method IMapServer4.GetLegendInfo

           INPUTS
            MapName             : BSTR
            layerIds            : ILongArray*
            patch               : IMapServerLegendPatch*
            imgType             : IImageType*

           OUTPUT
            legendInfos         : IMapServerLegendInfos**'''
        return super(IMapServer4, self).GetLegendInfo(MapName, layerIds, patch, imgType)
    def GetSQLSyntaxInfo(self, MapName, LayerID):
        '''Method IMapServer4.GetSQLSyntaxInfo

           INPUTS
            MapName             : BSTR
            LayerID             : long

           OUTPUT
            sqlInfo             : ISQLSyntaxInfo**'''
        return super(IMapServer4, self).GetSQLSyntaxInfo(MapName, LayerID)
    def GetSupportedImageReturnTypes(self):
        '''Method IMapServer4.GetSupportedImageReturnTypes

           OUTPUT
            retType             : esriImageReturnType*'''
        return super(IMapServer4, self).GetSupportedImageReturnTypes()
    def ExportScaleBar(self, Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc):
        '''Method IMapServer4.ExportScaleBar

           INPUTS
            Scalebar            : IScaleBar*
            mapDesc             : IMapDescription*
            pMapDisplay         : IImageDisplay*
            BackgroundColor     : IColor*
            imageDesc           : IImageDescription*

           OUTPUT
            ImageResult         : IImageResult**'''
        return super(IMapServer4, self).ExportScaleBar(Scalebar, mapDesc, pMapDisplay, BackgroundColor, imageDesc)
    def QueryFeatureCount2(self, MapName, pLayerDescription, Filter):
        '''Method IMapServer4.QueryFeatureCount2

           INPUTS
            MapName             : BSTR
            pLayerDescription   : ILayerDescription*
            Filter              : IQueryFilter*

           OUTPUT
            Count               : long*'''
        return super(IMapServer4, self).QueryFeatureCount2(MapName, pLayerDescription, Filter)
    def QueryFeatureIDs2(self, MapName, pLayerDesciscription, Filter):
        '''Method IMapServer4.QueryFeatureIDs2

           INPUTS
            MapName             : BSTR
            pLayerDesciscription: ILayerDescription*
            Filter              : IQueryFilter*

           OUTPUT
            FIDs                : IFIDSet**'''
        return super(IMapServer4, self).QueryFeatureIDs2(MapName, pLayerDesciscription, Filter)
    def QueryFeatureData2(self, MapName, pLayerDesciscription, Filter, options):
        '''Method IMapServer4.QueryFeatureData2

           INPUTS
            MapName             : BSTR
            pLayerDesciscription: ILayerDescription*
            Filter              : IQueryFilter*
            options             : IQueryResultOptions*

           OUTPUT
            QueryResult         : IQueryResult**'''
        return super(IMapServer4, self).QueryFeatureData2(MapName, pLayerDesciscription, Filter, options)
    def get_ServiceConfigurationInfo(self):
        '''Method IMapServer4.get_ServiceConfigurationInfo

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IMapServer4, self).get_ServiceConfigurationInfo()
    def GetLegendInfo2(self, pMapDescription, pImageDisplay, layerIds, patch, imgType):
        '''Method IMapServer4.GetLegendInfo2

           INPUTS
            pMapDescription     : IMapDescription*
            pImageDisplay       : IImageDisplay*
            layerIds            : ILongArray*
            patch               : IMapServerLegendPatch*
            imgType             : IImageType*

           OUTPUT
            legendInfos         : IMapServerLegendInfos**'''
        return super(IMapServer4, self).GetLegendInfo2(pMapDescription, pImageDisplay, layerIds, patch, imgType)
    DefaultMapName = property(get_DefaultMapName, None, None)
    DocumentInfo = property(get_DocumentInfo, None, None)
    MapCount = property(get_MapCount, None, None)
    ServiceConfigurationInfo = property(get_ServiceConfigurationInfo, None, None)
    MapName = IndexProperty(get_MapName, None)

class IMobileSync2(_esriCarto.IMobileSync2):
    _IID = uuid.UUID('098485ba-6bfb-41dc-88b0-00f5f7f0ef2b')
    def InitFromMapServer(self, pMapServer, pProps):
        '''Method IMobileSync2.InitFromMapServer

           INPUTS
            pMapServer          : IMapServer*
            pProps              : IPropertySet*'''
        return super(IMobileSync2, self).InitFromMapServer(pMapServer, pProps)
    def GetMobileMapInfo(self):
        '''Method IMobileSync2.GetMobileMapInfo

           OUTPUT
            ppResponse          : IMobileMapInfo**'''
        return super(IMobileSync2, self).GetMobileMapInfo()
    def Init(self, pMap, pProps):
        '''Method IMobileSync.Init (from IMobileSync)

           INPUTS
            pMap                : IMap*
            pProps              : IPropertySet*'''
        return super(IMobileSync2, self).Init(pMap, pProps)
    def ExecuteRequest(self, pRequestStream):
        '''Method IMobileSync.ExecuteRequest (from IMobileSync)

           INPUT
            pRequestStream      : IMemoryBlobStream*

           OUTPUT
            ppResponse          : IMemoryBlobStream**'''
        return super(IMobileSync2, self).ExecuteRequest(pRequestStream)

class IGraphicFeatureServerInit(_esriCarto.IGraphicFeatureServerInit):
    _IID = uuid.UUID('6790d29a-7ec2-4f84-bccf-2b86e92491da')

    def __init__(self, *args, **kw):
        super(IGraphicFeatureServerInit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Connect(self, MapServer):
        '''Method IGraphicFeatureServerInit.Connect

           INPUT
            MapServer           : IMapServer*'''
        return super(IGraphicFeatureServerInit, self).Connect(MapServer)
    def put_EnableZDefaults(self, EnableZDefaults):
        '''Method IGraphicFeatureServerInit.put_EnableZDefaults

           INPUT
            EnableZDefaults     : VARIANT_BOOL'''
        return super(IGraphicFeatureServerInit, self).put_EnableZDefaults(EnableZDefaults)
    def get_EnableZDefaults(self):
        '''Method IGraphicFeatureServerInit.get_EnableZDefaults

           OUTPUT
            EnableZDefaults     : VARIANT_BOOL*'''
        return super(IGraphicFeatureServerInit, self).get_EnableZDefaults()
    def put_ZDefaults(self, ZDefaults):
        '''Method IGraphicFeatureServerInit.put_ZDefaults

           INPUT
            ZDefaults           : double'''
        return super(IGraphicFeatureServerInit, self).put_ZDefaults(ZDefaults)
    def get_ZDefaults(self):
        '''Method IGraphicFeatureServerInit.get_ZDefaults

           OUTPUT
            ZDefaults           : double*'''
        return super(IGraphicFeatureServerInit, self).get_ZDefaults()
    EnableZDefaults = property(get_EnableZDefaults, put_EnableZDefaults, None)
    ZDefaults = property(get_ZDefaults, put_ZDefaults, None)

class ISDGenerator(_esriCarto.ISDGenerator):
    _IID = uuid.UUID('4d74aa56-86a4-49a4-ae46-c1db8b86a74c')
    def Init(self):
        '''Method ISDGenerator.Init'''
        return super(ISDGenerator, self).Init()
    def SetMapServer(self, pMapServer):
        '''Method ISDGenerator.SetMapServer

           INPUT
            pMapServer          : IMapServer*'''
        return super(ISDGenerator, self).SetMapServer(pMapServer)
    def ReadMsd(self, pathToMsdFile):
        '''Method ISDGenerator.ReadMsd

           INPUT
            pathToMsdFile       : BSTR'''
        return super(ISDGenerator, self).ReadMsd(pathToMsdFile)
    def GetDescription(self, serviceType):
        '''Method ISDGenerator.GetDescription

           INPUT
            serviceType         : BSTR

           OUTPUT
            pJsonLayerList      : SAFEARRAY**'''
        return super(ISDGenerator, self).GetDescription(serviceType)
    def GetLayerDescription(self, serviceType, ID):
        '''Method ISDGenerator.GetLayerDescription

           INPUTS
            serviceType         : BSTR
            ID                  : int

           OUTPUT
            pJsonLayerDescrition: SAFEARRAY**'''
        return super(ISDGenerator, self).GetLayerDescription(serviceType, ID)

class IMapServerIdentifyResult(_esriCarto.IMapServerIdentifyResult):
    _IID = uuid.UUID('6fa7fc12-c195-4f24-a0d6-7fc0cc84eb01')
    def get_LayerID(self):
        '''Method IMapServerIdentifyResult.get_LayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapServerIdentifyResult, self).get_LayerID()
    def get_Name(self):
        '''Method IMapServerIdentifyResult.get_Name

           OUTPUT
            Value               : BSTR*'''
        return super(IMapServerIdentifyResult, self).get_Name()
    def get_Properties(self):
        '''Method IMapServerIdentifyResult.get_Properties

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServerIdentifyResult, self).get_Properties()
    def get_Shape(self):
        '''Method IMapServerIdentifyResult.get_Shape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IMapServerIdentifyResult, self).get_Shape()
    def get_RelatedRows(self):
        '''Method IMapServerIdentifyResult.get_RelatedRows

           OUTPUT
            relationships       : IMapServerRelationships**'''
        return super(IMapServerIdentifyResult, self).get_RelatedRows()
    LayerID = property(get_LayerID, None, None)
    Name = property(get_Name, None, None)
    Properties = property(get_Properties, None, None)
    RelatedRows = property(get_RelatedRows, None, None)
    Shape = property(get_Shape, None, None)

class IMapServerIdentifyObject(_esriCarto.IMapServerIdentifyObject):
    _IID = uuid.UUID('a25a8796-8463-490c-b007-127d2e494805')

    def __init__(self, *args, **kw):
        super(IMapServerIdentifyObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_MapServerIdentifyResult(self, result):
        '''Method IMapServerIdentifyObject.put_MapServerIdentifyResult

           INPUT
            result              : IMapServerIdentifyResult*'''
        return super(IMapServerIdentifyObject, self).put_MapServerIdentifyResult(result)
    def get_MapServerIdentifyResult(self):
        '''Method IMapServerIdentifyObject.get_MapServerIdentifyResult

           OUTPUT
            result              : IMapServerIdentifyResult**'''
        return super(IMapServerIdentifyObject, self).get_MapServerIdentifyResult()
    MapServerIdentifyResult = property(get_MapServerIdentifyResult, put_MapServerIdentifyResult, None)

class IMapServerRelationships(_esriCarto.IMapServerRelationships):
    _IID = uuid.UUID('df17e39a-1358-485b-b88c-bf7bb374818e')
    def get_Count(self):
        '''Method IMapServerRelationships.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerRelationships, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerRelationships.get_Element

           INPUT
            Index               : long

           OUTPUT
            rel                 : IMapServerRelationship**'''
        return super(IMapServerRelationships, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerRelationships.Remove

           INPUT
            Index               : long'''
        return super(IMapServerRelationships, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerRelationships.RemoveAll'''
        return super(IMapServerRelationships, self).RemoveAll()
    def Add(self, rel):
        '''Method IMapServerRelationships.Add

           INPUT
            rel                 : IMapServerRelationship*'''
        return super(IMapServerRelationships, self).Add(rel)
    def Insert(self, Index, Row):
        '''Method IMapServerRelationships.Insert

           INPUTS
            Index               : long
            Row                 : IMapServerRelationship*'''
        return super(IMapServerRelationships, self).Insert(Index, Row)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerRow(_esriCarto.IMapServerRow):
    _IID = uuid.UUID('b60464e3-755a-4b84-a4d7-7ecc9232d26a')
    def get_Name(self):
        '''Method IMapServerRow.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerRow, self).get_Name()
    def get_PropertySet(self):
        '''Method IMapServerRow.get_PropertySet

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServerRow, self).get_PropertySet()
    def get_RelatedRows(self):
        '''Method IMapServerRow.get_RelatedRows

           OUTPUT
            relationships       : IMapServerRelationships**'''
        return super(IMapServerRow, self).get_RelatedRows()
    Name = property(get_Name, None, None)
    PropertySet = property(get_PropertySet, None, None)
    RelatedRows = property(get_RelatedRows, None, None)

class IMapServerRows(_esriCarto.IMapServerRows):
    _IID = uuid.UUID('9cdb4e10-7f88-4a14-bed3-e4944dfbf7e7')
    def get_Count(self):
        '''Method IMapServerRows.get_Count

           OUTPUT
            Count               : long*'''
        return super(IMapServerRows, self).get_Count()
    def get_Element(self, Index):
        '''Method IMapServerRows.get_Element

           INPUT
            Index               : long

           OUTPUT
            Row                 : IMapServerRow**'''
        return super(IMapServerRows, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IMapServerRows.Remove

           INPUT
            Index               : long'''
        return super(IMapServerRows, self).Remove(Index)
    def RemoveAll(self):
        '''Method IMapServerRows.RemoveAll'''
        return super(IMapServerRows, self).RemoveAll()
    def Add(self, Row):
        '''Method IMapServerRows.Add

           INPUT
            Row                 : IMapServerRow*'''
        return super(IMapServerRows, self).Add(Row)
    def Insert(self, Index, Row):
        '''Method IMapServerRows.Insert

           INPUTS
            Index               : long
            Row                 : IMapServerRow*'''
        return super(IMapServerRows, self).Insert(Index, Row)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IMapServerRelationship(_esriCarto.IMapServerRelationship):
    _IID = uuid.UUID('74f78603-a0a0-4078-b653-17d733fe95fd')
    def get_Name(self):
        '''Method IMapServerRelationship.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerRelationship, self).get_Name()
    def get_Rows(self):
        '''Method IMapServerRelationship.get_Rows

           OUTPUT
            Rows                : IMapServerRows**'''
        return super(IMapServerRelationship, self).get_Rows()
    Name = property(get_Name, None, None)
    Rows = property(get_Rows, None, None)

class IMapServerRow2(_esriCarto.IMapServerRow2):
    _IID = uuid.UUID('5f96145f-57ec-4b5f-bd4a-504c6385aded')
    def get_FeatureId(self):
        '''Method IMapServerRow2.get_FeatureId

           OUTPUT
            FeatureId           : long*'''
        return super(IMapServerRow2, self).get_FeatureId()
    def get_Name(self):
        '''Method IMapServerRow.get_Name (from IMapServerRow)

           OUTPUT
            Name                : BSTR*'''
        return super(IMapServerRow2, self).get_Name()
    def get_PropertySet(self):
        '''Method IMapServerRow.get_PropertySet (from IMapServerRow)

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServerRow2, self).get_PropertySet()
    def get_RelatedRows(self):
        '''Method IMapServerRow.get_RelatedRows (from IMapServerRow)

           OUTPUT
            relationships       : IMapServerRelationships**'''
        return super(IMapServerRow2, self).get_RelatedRows()
    FeatureId = property(get_FeatureId, None, None)
    Name = property(get_Name, None, None)
    PropertySet = property(get_PropertySet, None, None)
    RelatedRows = property(get_RelatedRows, None, None)

class IMapServerIdentifyResult2(_esriCarto.IMapServerIdentifyResult2):
    _IID = uuid.UUID('d1ec29d0-f8ec-4f6e-8d6c-34101fab98de')
    def get_LayerID(self):
        '''Method IMapServerIdentifyResult2.get_LayerID

           OUTPUT
            LayerID             : long*'''
        return super(IMapServerIdentifyResult2, self).get_LayerID()
    def get_Name(self):
        '''Method IMapServerIdentifyResult2.get_Name

           OUTPUT
            Value               : BSTR*'''
        return super(IMapServerIdentifyResult2, self).get_Name()
    def get_Properties(self):
        '''Method IMapServerIdentifyResult2.get_Properties

           OUTPUT
            props               : IPropertySet**'''
        return super(IMapServerIdentifyResult2, self).get_Properties()
    def get_Shape(self):
        '''Method IMapServerIdentifyResult2.get_Shape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IMapServerIdentifyResult2, self).get_Shape()
    def get_RelatedRows(self):
        '''Method IMapServerIdentifyResult2.get_RelatedRows

           OUTPUT
            relationships       : IMapServerRelationships**'''
        return super(IMapServerIdentifyResult2, self).get_RelatedRows()
    def get_HTMLPopup(self):
        '''Method IMapServerIdentifyResult2.get_HTMLPopup

           OUTPUT
            htmlText            : BSTR*'''
        return super(IMapServerIdentifyResult2, self).get_HTMLPopup()
    def get_FeatureId(self):
        '''Method IMapServerIdentifyResult2.get_FeatureId

           OUTPUT
            FeatureId           : long*'''
        return super(IMapServerIdentifyResult2, self).get_FeatureId()
    FeatureId = property(get_FeatureId, None, None)
    HTMLPopup = property(get_HTMLPopup, None, None)
    LayerID = property(get_LayerID, None, None)
    Name = property(get_Name, None, None)
    Properties = property(get_Properties, None, None)
    RelatedRows = property(get_RelatedRows, None, None)
    Shape = property(get_Shape, None, None)


# IIDs
IID_IProtectNameCarto = IProtectNameCarto._IID
IID_IDimensionProtectNames = IDimensionProtectNames._IID
IID_ILayer = ILayer._IID
IID_IFeatureIDSet = IFeatureIDSet._IID
IID_IAction = IAction._IID
IID_IActionCollection = IActionCollection._IID
IID_IActionProcessor = IActionProcessor._IID
IID_ILocationTrigger = ILocationTrigger._IID
IID_IConditionalAction = IConditionalAction._IID
IID_IConditionalAction2 = IConditionalAction2._IID
IID_IConditionalAction3 = IConditionalAction3._IID
IID_IConditionalAction4 = IConditionalAction4._IID
IID_ILayerAction = ILayerAction._IID
IID_IActionState = IActionState._IID
IID_IHighlightSuppressionAction = IHighlightSuppressionAction._IID
IID_IDirectData = IDirectData._IID
IID_ITemporalSearch = ITemporalSearch._IID
IID_IRasterRenderer = IRasterRenderer._IID
IID_IRasterLayer = IRasterLayer._IID
IID_IRasterRenderer2 = IRasterRenderer2._IID
IID_IRasterRendererInfo = IRasterRendererInfo._IID
IID_IRasterRendererColorRamp = IRasterRendererColorRamp._IID
IID_IRasterRendererMaker = IRasterRendererMaker._IID
IID_IRasterRendererMaker2 = IRasterRendererMaker2._IID
IID_IRasterDisplayProps = IRasterDisplayProps._IID
IID_IRasterUniqueValueRenderer = IRasterUniqueValueRenderer._IID
IID_IRasterRendererUniqueValues = IRasterRendererUniqueValues._IID
IID_IRasterClassifyColorRampRenderer = IRasterClassifyColorRampRenderer._IID
IID_IRasterDataExclusion = IRasterDataExclusion._IID
IID_IRasterClassifyUIProperties = IRasterClassifyUIProperties._IID
IID_IRasterStretch = IRasterStretch._IID
IID_IRasterStretch2 = IRasterStretch2._IID
IID_IRasterStretch3 = IRasterStretch3._IID
IID_IGlobeRasterStretch = IGlobeRasterStretch._IID
IID_IRasterStretchMinMax = IRasterStretchMinMax._IID
IID_IRasterRGBRenderer = IRasterRGBRenderer._IID
IID_IRasterRGBRenderer2 = IRasterRGBRenderer2._IID
IID_IRasterStretchColorRampRenderer = IRasterStretchColorRampRenderer._IID
IID_IRasterRendererClassInfo = IRasterRendererClassInfo._IID
IID_IEnumRasterUniqueValueColor = IEnumRasterUniqueValueColor._IID
IID_IRasterCatalogRendererPicker = IRasterCatalogRendererPicker._IID
IID_IColorChannelMapping = IColorChannelMapping._IID
IID_IHillShadeInfo = IHillShadeInfo._IID
IID_IDisplayTableExchange = IDisplayTableExchange._IID
IID_IRasterDiscreteColorRenderer = IRasterDiscreteColorRenderer._IID
IID_IRenderedRaster = IRenderedRaster._IID
IID_IRenderedRaster2 = IRenderedRaster2._IID
IID_IRasterStretchAdvancedLabels = IRasterStretchAdvancedLabels._IID
IID_IRasterRendererUpdate = IRasterRendererUpdate._IID
IID_IIdentify = IIdentify._IID
IID_ILegendClassFormat = ILegendClassFormat._IID
IID_ILegendClass = ILegendClass._IID
IID_ILegendGroup = ILegendGroup._IID
IID_ILegendFormat = ILegendFormat._IID
IID_IElement = IElement._IID
IID_IEnumElement = IEnumElement._IID
IID_ILegendItem = ILegendItem._IID
IID_ILegendInfo = ILegendInfo._IID
IID_ILayer2 = ILayer2._IID
IID_ILayerDrawSetup = ILayerDrawSetup._IID
IID_ITemporaryLayer = ITemporaryLayer._IID
IID_ILayerExtensions = ILayerExtensions._IID
IID_ITableExtensions = ITableExtensions._IID
IID_IDataLayerExtension = IDataLayerExtension._IID
IID_ICompositeLayer = ICompositeLayer._IID
IID_ICompositeLayer2 = ICompositeLayer2._IID
IID_IEnumLayer = IEnumLayer._IID
IID_ILayerFactory = ILayerFactory._IID
IID_IFeatureServiceLayerFactory = IFeatureServiceLayerFactory._IID
IID_IBarrierProperties = IBarrierProperties._IID
IID_IBarrierProperties2 = IBarrierProperties2._IID
IID_ILayerEvents = ILayerEvents._IID
IID_IDataLayer = IDataLayer._IID
IID_IDataLayer2 = IDataLayer2._IID
IID_ILayerDrawingProperties = ILayerDrawingProperties._IID
IID_ILayerInfo = ILayerInfo._IID
IID_ILayerEffects = ILayerEffects._IID
IID_ILayerEffectDIM = ILayerEffectDIM._IID
IID_ILayerPosition = ILayerPosition._IID
IID_IAttributeTable = IAttributeTable._IID
IID_ILayerStatus = ILayerStatus._IID
IID_IPublishLayer = IPublishLayer._IID
IID_ISecureLayer = ISecureLayer._IID
IID_ILayerDrawingPhase = ILayerDrawingPhase._IID
IID_ILicensedComponent = ILicensedComponent._IID
IID_ILayerGeneralProperties = ILayerGeneralProperties._IID
IID_IDrawAnnotationGeometry = IDrawAnnotationGeometry._IID
IID_ILayerSymbologyExtents = ILayerSymbologyExtents._IID
IID_IFeatureGeometryAccess = IFeatureGeometryAccess._IID
IID_ISecureLayer2 = ISecureLayer2._IID
IID_ITimeData = ITimeData._IID
IID_ITimeTableDefinition = ITimeTableDefinition._IID
IID_ITimeDataDisplay = ITimeDataDisplay._IID
IID_ITimeDimensionDefinition = ITimeDimensionDefinition._IID
IID_ITimeData2 = ITimeData2._IID
IID_IIdentifyObj = IIdentifyObj._IID
IID_IIdentify2 = IIdentify2._IID
IID_IIdentifyObject = IIdentifyObject._IID
IID_IIdentifyObjWindow = IIdentifyObjWindow._IID
IID_IIdentifyDisplay = IIdentifyDisplay._IID
IID_ILegendGroups = ILegendGroups._IID
IID_ILegendClasses = ILegendClasses._IID
IID_IFind = IFind._IID
IID_IFindObj = IFindObj._IID
IID_IFindObject = IFindObject._IID
IID_IRemoteFindObj = IRemoteFindObj._IID
IID_IGeoReference = IGeoReference._IID
IID_IGeoRefSaveAsDlg = IGeoRefSaveAsDlg._IID
IID_IPatch = IPatch._IID
IID_ILegendFormat2 = ILegendFormat2._IID
IID_ILegendLayout = ILegendLayout._IID
IID_IDynamicLegendItem = IDynamicLegendItem._IID
IID_ILegendItem2 = ILegendItem2._IID
IID_ILegendItem3 = ILegendItem3._IID
IID_IDynamicLegendClass = IDynamicLegendClass._IID
IID_IDynamicLegendLayer = IDynamicLegendLayer._IID
IID_IDynamicLegendRenderer = IDynamicLegendRenderer._IID
IID_IBorder = IBorder._IID
IID_IBackground = IBackground._IID
IID_IFrameElement = IFrameElement._IID
IID_IElementCollection = IElementCollection._IID
IID_IElementCollection2 = IElementCollection2._IID
IID_ILayerFactoryHelper = ILayerFactoryHelper._IID
IID_ILayerPropertySheet = ILayerPropertySheet._IID
IID_IElementProperties = IElementProperties._IID
IID_IElementProperties2 = IElementProperties2._IID
IID_IElementProperties3 = IElementProperties3._IID
IID_IGraphicElement = IGraphicElement._IID
IID_IBoundsProperties = IBoundsProperties._IID
IID_IFrameDraw = IFrameDraw._IID
IID_IShadow = IShadow._IID
IID_IFrameProperties = IFrameProperties._IID
IID_IPictureElement = IPictureElement._IID
IID_IPictureElement2 = IPictureElement2._IID
IID_IPictureElement3 = IPictureElement3._IID
IID_IPictureElement4 = IPictureElement4._IID
IID_IPictureElement5 = IPictureElement5._IID
IID_IOlePictureElement = IOlePictureElement._IID
IID_IGraphicsLayer = IGraphicsLayer._IID
IID_ISelection = ISelection._IID
IID_ISelectionEnvironment = ISelectionEnvironment._IID
IID_IBarrierCollection = IBarrierCollection._IID
IID_IFeatureLayer = IFeatureLayer._IID
IID_IGroupElement = IGroupElement._IID
IID_IGraphicsContainer = IGraphicsContainer._IID
IID_IAnnotateLayerProperties = IAnnotateLayerProperties._IID
IID_IAnnotateLayerPropertiesCollection = IAnnotateLayerPropertiesCollection._IID
IID_IAnnotateMapProperties = IAnnotateMapProperties._IID
IID_IFrameDecoration = IFrameDecoration._IID
IID_ISymbolBorder = ISymbolBorder._IID
IID_ISymbolBackground = ISymbolBackground._IID
IID_IQuerySize = IQuerySize._IID
IID_ISymbolShadow = ISymbolShadow._IID
IID_IElementShutdown = IElementShutdown._IID
IID_IElementEditVertices = IElementEditVertices._IID
IID_IElementEditCallout = IElementEditCallout._IID
IID_IGraphicsComposite = IGraphicsComposite._IID
IID_ILineElement = ILineElement._IID
IID_IMarkerElement = IMarkerElement._IID
IID_IFillShapeElement = IFillShapeElement._IID
IID_ITextElement = ITextElement._IID
IID_IGroupElement2 = IGroupElement2._IID
IID_IGroupElement3 = IGroupElement3._IID
IID_IMultiPartTextElement = IMultiPartTextElement._IID
IID_ISelectionEvents = ISelectionEvents._IID
IID_IOverflowGraphicsContainer = IOverflowGraphicsContainer._IID
IID_IElementOperation = IElementOperation._IID
IID_IElementEditVerticesOperation = IElementEditVerticesOperation._IID
IID_IGraphicsContainerSelect = IGraphicsContainerSelect._IID
IID_IAnnotationElement = IAnnotationElement._IID
IID_IGroupSymbolElement = IGroupSymbolElement._IID
IID_ISymbolCollectionElement = ISymbolCollectionElement._IID
IID_IInkGraphic = IInkGraphic._IID
IID_IColumnProperties = IColumnProperties._IID
IID_IOleFrame = IOleFrame._IID
IID_IGraphicsContainerProperty = IGraphicsContainerProperty._IID
IID_IGraphicsLayerScale = IGraphicsLayerScale._IID
IID_IText3DElement = IText3DElement._IID
IID_IGraphicElements = IGraphicElements._IID
IID_IFeatureIdentifyObj = IFeatureIdentifyObj._IID
IID_IRowIdentifyObject = IRowIdentifyObject._IID
IID_IFeatureFindData2 = IFeatureFindData2._IID
IID_ILineLabelPosition = ILineLabelPosition._IID
IID_ILineLabelPlacementPriorities = ILineLabelPlacementPriorities._IID
IID_IPointPlacementPriorities = IPointPlacementPriorities._IID
IID_IBasicOverposterLayerProperties = IBasicOverposterLayerProperties._IID
IID_IAnnotationExpressionParser = IAnnotationExpressionParser._IID
IID_IAnnotationExpressionEngine = IAnnotationExpressionEngine._IID
IID_ILabelEngineLayerProperties = ILabelEngineLayerProperties._IID
IID_IPlacedObject = IPlacedObject._IID
IID_IPlacedObject2 = IPlacedObject2._IID
IID_IPlacedObject3 = IPlacedObject3._IID
IID_IOverposterLayerProperties = IOverposterLayerProperties._IID
IID_IOverposterLayerProperties2 = IOverposterLayerProperties2._IID
IID_IOverposterProperties = IOverposterProperties._IID
IID_IOverposterOptions = IOverposterOptions._IID
IID_IOverposterOptions2 = IOverposterOptions2._IID
IID_IOverposter = IOverposter._IID
IID_IOverposter2 = IOverposter2._IID
IID_IOverposter3 = IOverposter3._IID
IID_IOverposter4 = IOverposter4._IID
IID_IBasicOverposterLayerProperties2 = IBasicOverposterLayerProperties2._IID
IID_IBasicOverposterLayerProperties3 = IBasicOverposterLayerProperties3._IID
IID_IBasicOverposterLayerProperties4 = IBasicOverposterLayerProperties4._IID
IID_IBasicOverposterEvents = IBasicOverposterEvents._IID
IID_IMaplexRotationProperties = IMaplexRotationProperties._IID
IID_IMaplexRotationProperties2 = IMaplexRotationProperties2._IID
IID_IMaplexLabelStackingProperties = IMaplexLabelStackingProperties._IID
IID_IMaplexOffsetAlongLineProperties = IMaplexOffsetAlongLineProperties._IID
IID_IMaplexOverposterLayerProperties = IMaplexOverposterLayerProperties._IID
IID_IMaplexOverposterLayerProperties2 = IMaplexOverposterLayerProperties2._IID
IID_IMaplexOverposterLayerProperties3 = IMaplexOverposterLayerProperties3._IID
IID_IMaplexOverposterLayerProperties4 = IMaplexOverposterLayerProperties4._IID
IID_IMaplexDictionaryEntry = IMaplexDictionaryEntry._IID
IID_IMaplexDictionary = IMaplexDictionary._IID
IID_IMaplexDictionaries = IMaplexDictionaries._IID
IID_IMaplexKeyNumberGroup = IMaplexKeyNumberGroup._IID
IID_IMaplexKeyNumberGroups = IMaplexKeyNumberGroups._IID
IID_IMaplexOverposterProperties = IMaplexOverposterProperties._IID
IID_IMaplexOverposterProperties2 = IMaplexOverposterProperties2._IID
IID_ILabelEngineLayerProperties2 = ILabelEngineLayerProperties2._IID
IID_IAnnotateLayerTransformationProperties = IAnnotateLayerTransformationProperties._IID
IID_IAnnotationPropertiesConverter = IAnnotationPropertiesConverter._IID
IID_ILabelStyle = ILabelStyle._IID
IID_ILabelStyle2 = ILabelStyle2._IID
IID_ILayerFields = ILayerFields._IID
IID_IAnnotateLayerPropertiesCollection2 = IAnnotateLayerPropertiesCollection2._IID
IID_IAnnotationExpressionParser2 = IAnnotationExpressionParser2._IID
IID_ICodedValueAttributes = ICodedValueAttributes._IID
IID_IHotLinkExpressionProperties = IHotLinkExpressionProperties._IID
IID_ILabelEnvironment = ILabelEnvironment._IID
IID_IRotationRenderer = IRotationRenderer._IID
IID_IHyperlink = IHyperlink._IID
IID_IHyperlinkContainer = IHyperlinkContainer._IID
IID_IHotlinkContainer = IHotlinkContainer._IID
IID_IFeatureExportInfoGenerator = IFeatureExportInfoGenerator._IID
IID_IExportSupport = IExportSupport._IID
IID_IFeatureRenderer = IFeatureRenderer._IID
IID_IFeatureRendererUpdate = IFeatureRendererUpdate._IID
IID_IClassBreaksUIProperties = IClassBreaksUIProperties._IID
IID_IClassBreaksUIProperties2 = IClassBreaksUIProperties2._IID
IID_IDataSampling = IDataSampling._IID
IID_IDataNormalization = IDataNormalization._IID
IID_IProportionalSymbolRenderer = IProportionalSymbolRenderer._IID
IID_ITransparencyRenderer = ITransparencyRenderer._IID
IID_ILevelRenderer = ILevelRenderer._IID
IID_ILookupSymbol = ILookupSymbol._IID
IID_ILookupLegendClass = ILookupLegendClass._IID
IID_IBivariateRenderer = IBivariateRenderer._IID
IID_IScaleDependentRenderer = IScaleDependentRenderer._IID
IID_IRendererFields = IRendererFields._IID
IID_IChartRenderer = IChartRenderer._IID
IID_IPieChartRenderer = IPieChartRenderer._IID
IID_ICalcRendererValues = ICalcRendererValues._IID
IID_ICalcRendererValues2 = ICalcRendererValues2._IID
IID_IDotDensityRenderer = IDotDensityRenderer._IID
IID_IDotDensityRenderer2 = IDotDensityRenderer2._IID
IID_IDotDensityUIRenderer = IDotDensityUIRenderer._IID
IID_IHorizontalLegendItem = IHorizontalLegendItem._IID
IID_IVerticalLegendItem = IVerticalLegendItem._IID
IID_INestedLegendItem = INestedLegendItem._IID
IID_IHorizontalBarLegendItem = IHorizontalBarLegendItem._IID
IID_IFeatureSelectionRenderer = IFeatureSelectionRenderer._IID
IID_IUniqueValueInfo = IUniqueValueInfo._IID
IID_IClassBreakInfo = IClassBreakInfo._IID
IID_IUniqueValueInfos = IUniqueValueInfos._IID
IID_IClassBreakInfos = IClassBreakInfos._IID
IID_IDataExclusion = IDataExclusion._IID
IID_IDataExclusion2 = IDataExclusion2._IID
IID_IRotationRenderer2 = IRotationRenderer2._IID
IID_ISelectionEnvironmentThreshold = ISelectionEnvironmentThreshold._IID
IID_ISelectionEnvironmentStorage = ISelectionEnvironmentStorage._IID
IID_ISelectionEnvironmentLayer = ISelectionEnvironmentLayer._IID
IID_IFeatureLayerSelectionEvents = IFeatureLayerSelectionEvents._IID
IID_IHotlinkMacro = IHotlinkMacro._IID
IID_IDisplayTable = IDisplayTable._IID
IID_IFeatureLayer2 = IFeatureLayer2._IID
IID_IGeoFeatureLayer = IGeoFeatureLayer._IID
IID_ITopologyLayer = ITopologyLayer._IID
IID_ITopologyErrorSelection = ITopologyErrorSelection._IID
IID_ITableSelection = ITableSelection._IID
IID_IFeatureSelection = IFeatureSelection._IID
IID_IDefinitionExpressionEvents = IDefinitionExpressionEvents._IID
IID_IFeatureLayerDefinition = IFeatureLayerDefinition._IID
IID_IFeatureLayerDefinition2 = IFeatureLayerDefinition2._IID
IID_ITableDefinition = ITableDefinition._IID
IID_ISelectionLayerDefinition = ISelectionLayerDefinition._IID
IID_IDisplayRelationshipClass = IDisplayRelationshipClass._IID
IID_IFieldInfoSet = IFieldInfoSet._IID
IID_IOrderedLayerFields = IOrderedLayerFields._IID
IID_IDisplayExpressionProperties = IDisplayExpressionProperties._IID
IID_IDisplayString = IDisplayString._IID
IID_IHotlinkExpression = IHotlinkExpression._IID
IID_ICompositeGraphicsLayer = ICompositeGraphicsLayer._IID
IID_ICompositeGraphicsLayer2 = ICompositeGraphicsLayer2._IID
IID_IFeatureLayerSymbology = IFeatureLayerSymbology._IID
IID_IRelationshipClassCollection = IRelationshipClassCollection._IID
IID_IRelationshipClassCollectionEdit = IRelationshipClassCollectionEdit._IID
IID_ISimpleRenderer = ISimpleRenderer._IID
IID_IClassBreaksRenderer = IClassBreaksRenderer._IID
IID_IUniqueValueRenderer = IUniqueValueRenderer._IID
IID_IUniqueValueRenderer2 = IUniqueValueRenderer2._IID
IID_IMarker3DRotationAngles = IMarker3DRotationAngles._IID
IID_ISizeRenderer = ISizeRenderer._IID
IID_IRendererClasses = IRendererClasses._IID
IID_IBasicHistogram = IBasicHistogram._IID
IID_ITableHistogram = ITableHistogram._IID
IID_ITableHistogram2 = ITableHistogram2._IID
IID_IGraphicsContainerEvents = IGraphicsContainerEvents._IID
IID_ILayerExtensionDraw = ILayerExtensionDraw._IID
IID_ILayerExtensionInvalidate = ILayerExtensionInvalidate._IID
IID_ISymbolLevels = ISymbolLevels._IID
IID_IFeatureCache = IFeatureCache._IID
IID_IFeatureCache2 = IFeatureCache2._IID
IID_IInteractiveSearch = IInteractiveSearch._IID
IID_IHTMLPopupInfo = IHTMLPopupInfo._IID
IID_IHTMLPopupInfo2 = IHTMLPopupInfo2._IID
IID_IHTMLPopupIdentify = IHTMLPopupIdentify._IID
IID_IHTMLPopupIdentify2 = IHTMLPopupIdentify2._IID
IID_IEditTemplate = IEditTemplate._IID
IID_IEditTemplateFactory = IEditTemplateFactory._IID
IID_IEditTemplateManager = IEditTemplateManager._IID
IID_ITimeDisplayTable = ITimeDisplayTable._IID
IID_ITimeDisplayTable2 = ITimeDisplayTable2._IID
IID_IExpression = IExpression._IID
IID_ICoverageAnnotationLayerFactory = ICoverageAnnotationLayerFactory._IID
IID_IGroupLayer = IGroupLayer._IID
IID_ILayerMasking = ILayerMasking._IID
IID_ILevelMasking = ILevelMasking._IID
IID_ICoverageAnnotationLayer = ICoverageAnnotationLayer._IID
IID_ICoverageAnnotationLayer2 = ICoverageAnnotationLayer2._IID
IID_ICoverageAnnotationSel = ICoverageAnnotationSel._IID
IID_ICoverageAnnotationLayerWrite = ICoverageAnnotationLayerWrite._IID
IID_IDimensionStyle = IDimensionStyle._IID
IID_IDimensionStyleDisplay = IDimensionStyleDisplay._IID
IID_IDimensionStyleText = IDimensionStyleText._IID
IID_IDimensionShape = IDimensionShape._IID
IID_IDimensionFeature = IDimensionFeature._IID
IID_IEnumDimensionStyle = IEnumDimensionStyle._IID
IID_IDimensionStyles = IDimensionStyles._IID
IID_IDimensionClassExtension = IDimensionClassExtension._IID
IID_IDimensionGraphic = IDimensionGraphic._IID
IID_IDimensionClassExtension2 = IDimensionClassExtension2._IID
IID_INewDimensionFeedback = INewDimensionFeedback._IID
IID_IModifyDimensionFeedback = IModifyDimensionFeedback._IID
IID_IAnnotateFeature = IAnnotateFeature._IID
IID_IAnnotateFeature2 = IAnnotateFeature2._IID
IID_IAnnotationErrorEvents = IAnnotationErrorEvents._IID
IID_IMapOverposter = IMapOverposter._IID
IID_IExtentStack = IExtentStack._IID
IID_IFDOGraphicsLayer = IFDOGraphicsLayer._IID
IID_IFDOGraphicsLayer2 = IFDOGraphicsLayer2._IID
IID_IAnnotationLayer = IAnnotationLayer._IID
IID_IFDOGraphicsLayerRead = IFDOGraphicsLayerRead._IID
IID_IFDOAttributeConversion = IFDOAttributeConversion._IID
IID_IFDOGraphicsLayerFactory = IFDOGraphicsLayerFactory._IID
IID_IAnnotationLayerFactory = IAnnotationLayerFactory._IID
IID_ISymbolSubstitution = ISymbolSubstitution._IID
IID_IAnnotationFeature = IAnnotationFeature._IID
IID_IAnnotationFeature2 = IAnnotationFeature2._IID
IID_IAnnoClass = IAnnoClass._IID
IID_IAnnotationClassExtension = IAnnotationClassExtension._IID
IID_IAnnotationClassExtension2 = IAnnotationClassExtension2._IID
IID_IAnnoClassAdmin = IAnnoClassAdmin._IID
IID_IAnnoClassAdmin2 = IAnnoClassAdmin2._IID
IID_IAnnoClassAdmin3 = IAnnoClassAdmin3._IID
IID_IConvertFDOAnnoToCoverageAnno = IConvertFDOAnnoToCoverageAnno._IID
IID_IFDOGraphicsContainer = IFDOGraphicsContainer._IID
IID_IAnnotationSublayer = IAnnotationSublayer._IID
IID_IBasemapSubLayer = IBasemapSubLayer._IID
IID_IShader = IShader._IID
IID_IArrayOfIShader = IArrayOfIShader._IID
IID_IReadingDirection = IReadingDirection._IID
IID_ICompositeMapSurround = ICompositeMapSurround._IID
IID_IMapEvents = IMapEvents._IID
IID_IMapEvents2 = IMapEvents2._IID
IID_IMapSurroundEvents = IMapSurroundEvents._IID
IID_IContextAnalyzer = IContextAnalyzer._IID
IID_IViewManager = IViewManager._IID
IID_IBasicMap2 = IBasicMap2._IID
IID_IBasicMap = IBasicMap._IID
IID_IMapClipOptions = IMapClipOptions._IID
IID_IMapLayers = IMapLayers._IID
IID_IMapLayers2 = IMapLayers2._IID
IID_IMapBarriers = IMapBarriers._IID
IID_IMapBarriers2 = IMapBarriers2._IID
IID_IMapAdmin = IMapAdmin._IID
IID_IMapAdmin2 = IMapAdmin2._IID
IID_IMapAdmin3 = IMapAdmin3._IID
IID_IMapAdmin4 = IMapAdmin4._IID
IID_IMapCache = IMapCache._IID
IID_ITableCollection = ITableCollection._IID
IID_IStandaloneTable = IStandaloneTable._IID
IID_IStandaloneTableCollection = IStandaloneTableCollection._IID
IID_IDataBrowser = IDataBrowser._IID
IID_IScaleBar2 = IScaleBar2._IID
IID_IScaleLine = IScaleLine._IID
IID_ISingleFillScaleBar = ISingleFillScaleBar._IID
IID_IDoubleFillScaleBar = IDoubleFillScaleBar._IID
IID_IScaleMarks = IScaleMarks._IID
IID_IMapInset2 = IMapInset2._IID
IID_IMarkerNorthArrow = IMarkerNorthArrow._IID
IID_IPictureNorthArrow = IPictureNorthArrow._IID
IID_IFeatureCursorBuffer = IFeatureCursorBuffer._IID
IID_IFeatureCursorBuffer2 = IFeatureCursorBuffer2._IID
IID_IBufferProcessingSymbology = IBufferProcessingSymbology._IID
IID_IBufferProcessingParameter = IBufferProcessingParameter._IID
IID_IFeatureIndex = IFeatureIndex._IID
IID_IIndexQuery = IIndexQuery._IID
IID_IIndexQuery2 = IIndexQuery2._IID
IID_IFeatureIndex2 = IFeatureIndex2._IID
IID_IBasicMapIdentifyObject = IBasicMapIdentifyObject._IID
IID_IBasicGeoprocessor = IBasicGeoprocessor._IID
IID_IMapGeographicTransformations = IMapGeographicTransformations._IID
IID_IViewRefresh = IViewRefresh._IID
IID_IInvalidArea2 = IInvalidArea2._IID
IID_IInvalidArea3 = IInvalidArea3._IID
IID_ITableFactory = ITableFactory._IID
IID_ILODInfo = ILODInfo._IID
IID_ILODInfos = ILODInfos._IID
IID_ILayerCacheInfo = ILayerCacheInfo._IID
IID_ILayerCacheInfos = ILayerCacheInfos._IID
IID_ICacheStorageInfo = ICacheStorageInfo._IID
IID_ICacheDatasetInfo = ICacheDatasetInfo._IID
IID_ITileCacheInfo = ITileCacheInfo._IID
IID_ITileImageInfo = ITileImageInfo._IID
IID_ITileImageInfo2 = ITileImageInfo2._IID
IID_ICacheControlInfo = ICacheControlInfo._IID
IID_ICacheDescriptionInfo = ICacheDescriptionInfo._IID
IID_ICacheDescriptionInfo2 = ICacheDescriptionInfo2._IID
IID_ICacheInfo = ICacheInfo._IID
IID_ITileCacheStats = ITileCacheStats._IID
IID_ICacheInfo2 = ICacheInfo2._IID
IID_IMapCooker3 = IMapCooker3._IID
IID_ITilesTable = ITilesTable._IID
IID_IMapCacheStorageFormatConvertor = IMapCacheStorageFormatConvertor._IID
IID_IMapCacheExporter = IMapCacheExporter._IID
IID_IMapCacheToRasterFunctionArgument = IMapCacheToRasterFunctionArgument._IID
IID_IDynamicMap = IDynamicMap._IID
IID_IChangeDatabaseVersion = IChangeDatabaseVersion._IID
IID_IMapNavigator = IMapNavigator._IID
IID_IDocumentPreview = IDocumentPreview._IID
IID_IDocumentInfo = IDocumentInfo._IID
IID_IDocumentInfo2 = IDocumentInfo2._IID
IID_IDocumentInfo3 = IDocumentInfo3._IID
IID_IAdvancedShader = IAdvancedShader._IID
IID_IRasterShader = IRasterShader._IID
IID_IRasterDRAShader = IRasterDRAShader._IID
IID_IMapTimeDisplay = IMapTimeDisplay._IID
IID_IMapTimeDisplay2 = IMapTimeDisplay2._IID
IID_ITileCacheInfoEx = ITileCacheInfoEx._IID
IID_IServiceLayerCredits = IServiceLayerCredits._IID
IID_IPage = IPage._IID
IID_IRulerSettings = IRulerSettings._IID
IID_ISnapGrid = ISnapGrid._IID
IID_ISnapGuides = ISnapGuides._IID
IID_IImageInset = IImageInset._IID
IID_IMapGridBorder = IMapGridBorder._IID
IID_IGridLabelExport = IGridLabelExport._IID
IID_IDMSGridLabel = IDMSGridLabel._IID
IID_IFormattedGridLabel = IFormattedGridLabel._IID
IID_IMixedFontGridLabel = IMixedFontGridLabel._IID
IID_IMixedFontGridLabel2 = IMixedFontGridLabel2._IID
IID_IIndexGridTabStyle = IIndexGridTabStyle._IID
IID_IBackgroundTabStyle = IBackgroundTabStyle._IID
IID_ISimpleMapGridBorder = ISimpleMapGridBorder._IID
IID_ICalibratedMapGridBorder = ICalibratedMapGridBorder._IID
IID_IMeasuredGrid = IMeasuredGrid._IID
IID_IProjectedGrid = IProjectedGrid._IID
IID_IMapFrameEvents = IMapFrameEvents._IID
IID_IGridAxisTicks = IGridAxisTicks._IID
IID_IGridHatch = IGridHatch._IID
IID_IGridInteriorLabels = IGridInteriorLabels._IID
IID_IDMSGridLabel2 = IDMSGridLabel2._IID
IID_IDMSGridLabel3 = IDMSGridLabel3._IID
IID_ICornerGridLabel = ICornerGridLabel._IID
IID_IMgrsGrid = IMgrsGrid._IID
IID_IGridLadderLabels = IGridLadderLabels._IID
IID_IPrincipalDigitsGridLabel = IPrincipalDigitsGridLabel._IID
IID_IPageLayoutExtensions = IPageLayoutExtensions._IID
IID_IPageEvents = IPageEvents._IID
IID_IGraphicSnap = IGraphicSnap._IID
IID_IGraphicSnapEnvironment = IGraphicSnapEnvironment._IID
IID_IGraphicSnapEnvironment2 = IGraphicSnapEnvironment2._IID
IID_IGlobeDocument = IGlobeDocument._IID
IID_ILayerFile = ILayerFile._IID
IID_ICartoItemInfoHelper = ICartoItemInfoHelper._IID
IID_IRasterFormatInfo = IRasterFormatInfo._IID
IID_IRasterDefaultsEnv = IRasterDefaultsEnv._IID
IID_IRasterDefaultsEnv2 = IRasterDefaultsEnv2._IID
IID_IRasterDefaultsEnv3 = IRasterDefaultsEnv3._IID
IID_IRasterDefaultsEnv4 = IRasterDefaultsEnv4._IID
IID_IRasterDefaultsEnv5 = IRasterDefaultsEnv5._IID
IID_IRasterDefaultsEnv6 = IRasterDefaultsEnv6._IID
IID_IRasterDefaultsEnv7 = IRasterDefaultsEnv7._IID
IID_IRasterDefaultsEnv8 = IRasterDefaultsEnv8._IID
IID_IRasterDefaultsEnv9 = IRasterDefaultsEnv9._IID
IID_IImageServiceInfo = IImageServiceInfo._IID
IID_IImageServerLayer = IImageServerLayer._IID
IID_IMosaicLayer = IMosaicLayer._IID
IID_IWCSLayer = IWCSLayer._IID
IID_IRasterIdentifyObj = IRasterIdentifyObj._IID
IID_IRasterIdentifyObj2 = IRasterIdentifyObj2._IID
IID_IRasterCatalogLayer = IRasterCatalogLayer._IID
IID_IColorRampSymbol = IColorRampSymbol._IID
IID_IColorRampSymbol2 = IColorRampSymbol2._IID
IID_IRasterSpatialSelection = IRasterSpatialSelection._IID
IID_IGeoReferenceEvents = IGeoReferenceEvents._IID
IID_IGdbRasterCatalogLayer = IGdbRasterCatalogLayer._IID
IID_IRasterCatalogDisplayProps = IRasterCatalogDisplayProps._IID
IID_IRasterCatalogDisplayProps2 = IRasterCatalogDisplayProps2._IID
IID_IRasterLayerExport = IRasterLayerExport._IID
IID_IRasterLayerExport2 = IRasterLayerExport2._IID
IID_IRasterLayerExport3 = IRasterLayerExport3._IID
IID_IRasterExporter = IRasterExporter._IID
IID_IRenderedThumbnailBuilder = IRenderedThumbnailBuilder._IID
IID_INITFGraphicsLayer = INITFGraphicsLayer._IID
IID_IRasterBasemapLayer = IRasterBasemapLayer._IID
IID_IRasterBasemapLayerFactory = IRasterBasemapLayerFactory._IID
IID_ILayerDescriptor = ILayerDescriptor._IID
IID_ITOCClass = ITOCClass._IID
IID_ITOCGroup = ITOCGroup._IID
IID_IMxdServerQuery = IMxdServerQuery._IID
IID_IQueryByLayer = IQueryByLayer._IID
IID_IMxdServerStatus = IMxdServerStatus._IID
IID_ILayerDescription = ILayerDescription._IID
IID_ILayerDescription2 = ILayerDescription2._IID
IID_ILayerResultOptions = ILayerResultOptions._IID
IID_ILayerDescription3 = ILayerDescription3._IID
IID_IMapArea = IMapArea._IID
IID_ILayerDescriptions = ILayerDescriptions._IID
IID_IMapDescription = IMapDescription._IID
IID_ITileDescription = ITileDescription._IID
IID_IMapDescription2 = IMapDescription2._IID
IID_IMapDescriptions = IMapDescriptions._IID
IID_IMapFrameDescription = IMapFrameDescription._IID
IID_IMapFrameDescriptions = IMapFrameDescriptions._IID
IID_IMapLayerInfo = IMapLayerInfo._IID
IID_IImageType = IImageType._IID
IID_IImageDisplay = IImageDisplay._IID
IID_IImageDescription = IImageDescription._IID
IID_IImageResult = IImageResult._IID
IID_IImageResult2 = IImageResult2._IID
IID_IMapImage = IMapImage._IID
IID_IMapImages = IMapImages._IID
IID_ILayoutImage = ILayoutImage._IID
IID_ISQLSyntaxInfo = ISQLSyntaxInfo._IID
IID_IMapLayerInfos = IMapLayerInfos._IID
IID_IMapServerBookmark = IMapServerBookmark._IID
IID_IMapServerBookmarks = IMapServerBookmarks._IID
IID_IMapServerFindResult = IMapServerFindResult._IID
IID_IMapServerFindResults = IMapServerFindResults._IID
IID_IMapServerHyperlink = IMapServerHyperlink._IID
IID_IMapServerHyperlinks = IMapServerHyperlinks._IID
IID_IMapServerLegendPatch = IMapServerLegendPatch._IID
IID_IMapServerLegendClass = IMapServerLegendClass._IID
IID_IMapServerLegendClasses = IMapServerLegendClasses._IID
IID_IMapServerLegendGroup = IMapServerLegendGroup._IID
IID_IMapServerLegendGroups = IMapServerLegendGroups._IID
IID_IMapServerLegendInfo = IMapServerLegendInfo._IID
IID_IMapServerLegendInfos = IMapServerLegendInfos._IID
IID_IImageDisplay2 = IImageDisplay2._IID
IID_IQueryResultOptions = IQueryResultOptions._IID
IID_IQueryResult = IQueryResult._IID
IID_IMapTableDescription = IMapTableDescription._IID
IID_IRelateInfo = IRelateInfo._IID
IID_IRelateInfos = IRelateInfos._IID
IID_IMapTableInfo = IMapTableInfo._IID
IID_IStandaloneTableInfo = IStandaloneTableInfo._IID
IID_IRelateDescription = IRelateDescription._IID
IID_IFieldDomainInfo = IFieldDomainInfo._IID
IID_IFieldDomainInfos = IFieldDomainInfos._IID
IID_ISubtypeInfo = ISubtypeInfo._IID
IID_ISubtypeInfos = ISubtypeInfos._IID
IID_IImageResults = IImageResults._IID
IID_IMapLayerInfo3 = IMapLayerInfo3._IID
IID_ILabelClassDescription = ILabelClassDescription._IID
IID_ILabelClassDescriptions = ILabelClassDescriptions._IID
IID_ILabelingDescription = ILabelingDescription._IID
IID_ILabelClassDescription2 = ILabelClassDescription2._IID
IID_IPointLabelPlacementDescription = IPointLabelPlacementDescription._IID
IID_ILineLabelPlacementDescription = ILineLabelPlacementDescription._IID
IID_IPolygonLabelPlacementDescription = IPolygonLabelPlacementDescription._IID
IID_ILayerDrawingDescriptions = ILayerDrawingDescriptions._IID
IID_IMapTableSubtypeInfo = IMapTableSubtypeInfo._IID
IID_IMapTableSubtypeInfos = IMapTableSubtypeInfos._IID
IID_IServerSymbolOutputOptions = IServerSymbolOutputOptions._IID
IID_IMapLayerInfo4 = IMapLayerInfo4._IID
IID_IDynamicLayerDescription = IDynamicLayerDescription._IID
IID_IDataSourceDescription = IDataSourceDescription._IID
IID_ITableDataSourceDescription = ITableDataSourceDescription._IID
IID_IQueryTableDataSourceDescription = IQueryTableDataSourceDescription._IID
IID_IStatisticDescription = IStatisticDescription._IID
IID_IStatisticDescriptions = IStatisticDescriptions._IID
IID_IStatisticsRequest = IStatisticsRequest._IID
IID_IDataClassificationDef = IDataClassificationDef._IID
IID_IUniqueValuesDef = IUniqueValuesDef._IID
IID_IClassBreaksDef = IClassBreaksDef._IID
IID_IJoinTableSourceDescription = IJoinTableSourceDescription._IID
IID_IMapTableSourceDescription = IMapTableSourceDescription._IID
IID_IMapLayerInfo2 = IMapLayerInfo2._IID
IID_IMapServerInfo = IMapServerInfo._IID
IID_IMapServerInfo2 = IMapServerInfo2._IID
IID_IMapDescription3 = IMapDescription3._IID
IID_IPageDescription = IPageDescription._IID
IID_IMapServerInit = IMapServerInit._IID
IID_IMapServerInit2 = IMapServerInit2._IID
IID_IMapServerData = IMapServerData._IID
IID_ICenterAndScale = ICenterAndScale._IID
IID_ICenterAndSize = ICenterAndSize._IID
IID_IFeatureExtent = IFeatureExtent._IID
IID_IMapExtent = IMapExtent._IID
IID_ITiledMapServer = ITiledMapServer._IID
IID_ITiledMapServer2 = ITiledMapServer2._IID
IID_ITiledMapServer3 = ITiledMapServer3._IID
IID_IFeatureLayerDrawingDescription = IFeatureLayerDrawingDescription._IID
IID_IFeatureLayerDrawingDescription2 = IFeatureLayerDrawingDescription2._IID
IID_ILayerDrawingDescriptionFactory = ILayerDrawingDescriptionFactory._IID
IID_IRasterLayerDrawingDescription = IRasterLayerDrawingDescription._IID
IID_IServerLayerExtension = IServerLayerExtension._IID
IID_IMapServerGeoTransformation = IMapServerGeoTransformation._IID
IID_IMapTableInfo2 = IMapTableInfo2._IID
IID_IStandaloneTableInfos = IStandaloneTableInfos._IID
IID_IStandaloneTableDescriptions = IStandaloneTableDescriptions._IID
IID_IMapServerInfo3 = IMapServerInfo3._IID
IID_IMapServerInfo4 = IMapServerInfo4._IID
IID_IMapServerTimeInfo = IMapServerTimeInfo._IID
IID_IMapServerTimeInfo2 = IMapServerTimeInfo2._IID
IID_IRelatedRecordGroup = IRelatedRecordGroup._IID
IID_IRelatedRecordGroups = IRelatedRecordGroups._IID
IID_IRelatedRecordSet = IRelatedRecordSet._IID
IID_IServiceLayerImageFormat = IServiceLayerImageFormat._IID
IID_IMapServerDataAccess = IMapServerDataAccess._IID
IID_IMapTableTimeInfo = IMapTableTimeInfo._IID
IID_IMapTableTimeDescription = IMapTableTimeDescription._IID
IID_IMapTimeDescription = IMapTimeDescription._IID
IID_IMapTimeDescription2 = IMapTimeDescription2._IID
IID_IDynamicMapTableDescription = IDynamicMapTableDescription._IID
IID_IRasterDataSourceDescription = IRasterDataSourceDescription._IID
IID_IRelateInfo2 = IRelateInfo2._IID
IID_IMapTableInfo3 = IMapTableInfo3._IID
IID_IMapServerObjectLANProxy = IMapServerObjectLANProxy._IID
IID_IMapServerProxyImpl = IMapServerProxyImpl._IID
IID_IMapServerSublayer = IMapServerSublayer._IID
IID_IMapServerLayer = IMapServerLayer._IID
IID_IMapServerSublayer2 = IMapServerSublayer2._IID
IID_IMapServerGroupLayer = IMapServerGroupLayer._IID
IID_IMapServerRESTLayer = IMapServerRESTLayer._IID
IID_IWMTSLayer = IWMTSLayer._IID
IID_ITinRenderer = ITinRenderer._IID
IID_ITinIllumination = ITinIllumination._IID
IID_ITinSingleSymbolRenderer = ITinSingleSymbolRenderer._IID
IID_ITinContourRenderer = ITinContourRenderer._IID
IID_ITinColorRampRenderer = ITinColorRampRenderer._IID
IID_ITinUniqueValueRenderer = ITinUniqueValueRenderer._IID
IID_ITerrainRenderer = ITerrainRenderer._IID
IID_ITerrainRenderer2 = ITerrainRenderer2._IID
IID_IDatasetRenderer = IDatasetRenderer._IID
IID_IMultiResolutionRenderer = IMultiResolutionRenderer._IID
IID_ITerrainAttributeRenderer = ITerrainAttributeRenderer._IID
IID_ILasAttributeRenderer = ILasAttributeRenderer._IID
IID_ITinLayer = ITinLayer._IID
IID_ITinLayer2 = ITinLayer2._IID
IID_ITinIdentifyObj = ITinIdentifyObj._IID
IID_ITinIdentifyObj2 = ITinIdentifyObj2._IID
IID_ITerrainLayer = ITerrainLayer._IID
IID_ITerrainLayer2 = ITerrainLayer2._IID
IID_ILasDatasetLayer = ILasDatasetLayer._IID
IID_ICadLayer = ICadLayer._IID
IID_ICad3DRenderMode = ICad3DRenderMode._IID
IID_ICadIdentifyObj2 = ICadIdentifyObj2._IID
IID_IFeatureLayerExtendedDefinition = IFeatureLayerExtendedDefinition._IID
IID_IACLayer = IACLayer._IID
IID_IACMap = IACMap._IID
IID_IACSymbol = IACSymbol._IID
IID_IACLayer2 = IACLayer2._IID
IID_IACAxl = IACAxl._IID
IID_IACConnector = IACConnector._IID
IID_IACMapAdmin = IACMapAdmin._IID
IID_IACLayerAdmin = IACLayerAdmin._IID
IID_IACFeatureLayer = IACFeatureLayer._IID
IID_IACFeatureLayerAdmin = IACFeatureLayerAdmin._IID
IID_IACImageLayerAdmin = IACImageLayerAdmin._IID
IID_IACAcetateLayer = IACAcetateLayer._IID
IID_IACAcetateLayerAdmin = IACAcetateLayerAdmin._IID
IID_IACSimpleRenderer = IACSimpleRenderer._IID
IID_IACGroupRenderer = IACGroupRenderer._IID
IID_IACScaleDependentRenderer = IACScaleDependentRenderer._IID
IID_IACValueMapRenderer = IACValueMapRenderer._IID
IID_IACLineLabelPosition = IACLineLabelPosition._IID
IID_IACLabelRenderer = IACLabelRenderer._IID
IID_IACSimpleLineSymbol = IACSimpleLineSymbol._IID
IID_IACHashLineSymbol = IACHashLineSymbol._IID
IID_IACSimplePolygonSymbol = IACSimplePolygonSymbol._IID
IID_IACSimpleFillSymbol = IACSimpleFillSymbol._IID
IID_IACRasterFillSymbol = IACRasterFillSymbol._IID
IID_IACGradientFillSymbol = IACGradientFillSymbol._IID
IID_IACSimpleMarkerSymbol = IACSimpleMarkerSymbol._IID
IID_IACTrueTypeMarkerSymbol = IACTrueTypeMarkerSymbol._IID
IID_IACRasterMarkerSymbol = IACRasterMarkerSymbol._IID
IID_IACCalloutMarkerSymbol = IACCalloutMarkerSymbol._IID
IID_IACRasterShieldSymbol = IACRasterShieldSymbol._IID
IID_IACTextSymbol = IACTextSymbol._IID
IID_IACTextMarkerSymbol = IACTextMarkerSymbol._IID
IID_IACShieldSymbol = IACShieldSymbol._IID
IID_IIMSSubLayer = IIMSSubLayer._IID
IID_IIMSMapLayer = IIMSMapLayer._IID
IID_IIMSSymbolImporter = IIMSSymbolImporter._IID
IID_IIMSGlobeSubServiceDescription = IIMSGlobeSubServiceDescription._IID
IID_IIMSGlobeXMLNode = IIMSGlobeXMLNode._IID
IID_IIMSGlobeXMLParser = IIMSGlobeXMLParser._IID
IID_IIMSGlobeConnection = IIMSGlobeConnection._IID
IID_IRealTimeFeed = IRealTimeFeed._IID
IID_IPositionTrails = IPositionTrails._IID
IID_IRealTimeLog = IRealTimeLog._IID
IID_IRealTimeDestination = IRealTimeDestination._IID
IID_IRealTimeFeedSnap = IRealTimeFeedSnap._IID
IID_IGpsDisplayProperties = IGpsDisplayProperties._IID
IID_IGpsConnection = IGpsConnection._IID
IID_IGpsFeed = IGpsFeed._IID
IID_IRealTimeFeedEvents = IRealTimeFeedEvents._IID
IID_IRealTimeFeedSimulator = IRealTimeFeedSimulator._IID
IID_IRealTimeFeedManagerEvents = IRealTimeFeedManagerEvents._IID
IID_IMobileLayerInfo = IMobileLayerInfo._IID
IID_IMobileLayerInfos = IMobileLayerInfos._IID
IID_IMobileMapInfo = IMobileMapInfo._IID
IID_IWMSServer = IWMSServer._IID
IID_IWCSServer = IWCSServer._IID
IID_IWMSLayer = IWMSLayer._IID
IID_IWMSGroupLayer = IWMSGroupLayer._IID
IID_IWMSMapLayer = IWMSMapLayer._IID
IID_IWMSIdentifyObject = IWMSIdentifyObject._IID
IID_IWMSLayer2 = IWMSLayer2._IID
IID_IEnumLocatedNetworkElement = IEnumLocatedNetworkElement._IID
IID_INetworkLayer = INetworkLayer._IID
IID_INetworkRenderer = INetworkRenderer._IID
IID_ILocatedNetworkTrafficValue = ILocatedNetworkTrafficValue._IID
IID_INetworkRendererCollection = INetworkRendererCollection._IID
IID_INetworkIdentifyObj = INetworkIdentifyObj._IID
IID_INetworkLayerSymbology = INetworkLayerSymbology._IID
IID_ISimpleNetworkRenderer = ISimpleNetworkRenderer._IID
IID_INetworkTrafficRenderer = INetworkTrafficRenderer._IID
IID_INetworkEdgeRenderer = INetworkEdgeRenderer._IID
IID_INetworkEdgeRenderer2 = INetworkEdgeRenderer2._IID
IID_INetworkSourceRenderer = INetworkSourceRenderer._IID
IID_IRepresentationRenderer = IRepresentationRenderer._IID
IID_IRepresentationLegendClass = IRepresentationLegendClass._IID
IID_IDataGraphBase = IDataGraphBase._IID
IID_IDataGraphTPenProperties = IDataGraphTPenProperties._IID
IID_ISeriesProperties = ISeriesProperties._IID
IID_IDataGraphTGeneralProperties = IDataGraphTGeneralProperties._IID
IID_IDataGraphTLegendProperties = IDataGraphTLegendProperties._IID
IID_IDataGraphTAxisProperties = IDataGraphTAxisProperties._IID
IID_IDataGraphT = IDataGraphT._IID
IID_IDataGraphCollectionEvents = IDataGraphCollectionEvents._IID
IID_IDataGraphTEvents = IDataGraphTEvents._IID
IID_IDataGraphCollection = IDataGraphCollection._IID
IID_IDataGraphTSymbolProperties = IDataGraphTSymbolProperties._IID
IID_IBarSeriesProperties = IBarSeriesProperties._IID
IID_IPointSeriesProperties = IPointSeriesProperties._IID
IID_IHistogramSeriesProperties = IHistogramSeriesProperties._IID
IID_IBoxPlotSeriesProperties = IBoxPlotSeriesProperties._IID
IID_IPieSeriesProperties = IPieSeriesProperties._IID
IID_IAreaSeriesProperties = IAreaSeriesProperties._IID
IID_ILineSeriesProperties = ILineSeriesProperties._IID
IID_IFunctionSeriesProperties = IFunctionSeriesProperties._IID
IID_IBubbleSeriesProperties = IBubbleSeriesProperties._IID
IID_IPolarSeriesProperties = IPolarSeriesProperties._IID
IID_IDataSortSeriesProperties = IDataSortSeriesProperties._IID
IID_IDataGroupSeriesProperties = IDataGroupSeriesProperties._IID
IID_IScatterPlotMatrixSeriesProperties = IScatterPlotMatrixSeriesProperties._IID
IID_IDataGraphTPrivate = IDataGraphTPrivate._IID
IID_IDataGraphTElement = IDataGraphTElement._IID
IID_IParameterInfo = IParameterInfo._IID
IID_ICadastralFabricLayer = ICadastralFabricLayer._IID
IID_ICadastralFabricParcelLayer = ICadastralFabricParcelLayer._IID
IID_ICFDataSourcePageExtension = ICFDataSourcePageExtension._IID
IID_ICadastralFabricLayerEvents = ICadastralFabricLayerEvents._IID
IID_ICadastralFabricSelection = ICadastralFabricSelection._IID
IID_ICadastralFabricSubLayer = ICadastralFabricSubLayer._IID
IID_ICadastralFabricSubLayer2 = ICadastralFabricSubLayer2._IID
IID_IDynamicLayer = IDynamicLayer._IID
IID_IDynamicLayer2 = IDynamicLayer2._IID
IID_IDynamicHit = IDynamicHit._IID
IID_IGeoImageDescription = IGeoImageDescription._IID
IID_IAISRequest = IAISRequest._IID
IID_IImageServer = IImageServer._IID
IID_IImageServer2 = IImageServer2._IID
IID_IImageServerDownloadResult = IImageServerDownloadResult._IID
IID_IImageServerDownloadResults = IImageServerDownloadResults._IID
IID_IMosaicRule = IMosaicRule._IID
IID_IImageServerIdentifyResult = IImageServerIdentifyResult._IID
IID_IRenderingRule = IRenderingRule._IID
IID_IImageServer3 = IImageServer3._IID
IID_ITiledImageServer = ITiledImageServer._IID
IID_IPrivateServerObjectLANProxy = IPrivateServerObjectLANProxy._IID
IID_IImageServerObjectLANProxy = IImageServerObjectLANProxy._IID
IID_IImageServerProxyImpl = IImageServerProxyImpl._IID
IID_IImageServerIdentifyResults = IImageServerIdentifyResults._IID
IID_IImageServerEditResult = IImageServerEditResult._IID
IID_IImageServerEditResults = IImageServerEditResults._IID
IID_IImageServerMeasureResult = IImageServerMeasureResult._IID
IID_IRasterFunctionInfo = IRasterFunctionInfo._IID
IID_IRasterFunctionInfos = IRasterFunctionInfos._IID
IID_IRasterTypeInfo = IRasterTypeInfo._IID
IID_IRasterTypeInfos = IRasterTypeInfos._IID
IID_IImageView = IImageView._IID
IID_IImageServiceInfo2 = IImageServiceInfo2._IID
IID_IImageServiceInfo3 = IImageServiceInfo3._IID
IID_IImageQueryFilter = IImageQueryFilter._IID
IID_IGeoImageDescription2 = IGeoImageDescription2._IID
IID_IGeoImageDescription3 = IGeoImageDescription3._IID
IID_IRasterItemDescription = IRasterItemDescription._IID
IID_IRasterItemDescriptions = IRasterItemDescriptions._IID
IID_IImageServer4 = IImageServer4._IID
IID_IImageServerInit = IImageServerInit._IID
IID_IImageServerInit2 = IImageServerInit2._IID
IID_IImageServerInit3 = IImageServerInit3._IID
IID_IImageServerObjects = IImageServerObjects._IID
IID_IPluginImageLayer = IPluginImageLayer._IID
IID_IMosaicLODInfoHelper = IMosaicLODInfoHelper._IID
IID_ISimpleMapImage = ISimpleMapImage._IID
IID_IImageServerIdentifyResultEdit = IImageServerIdentifyResultEdit._IID
IID_IImageCooker = IImageCooker._IID
IID_IImageServerName = IImageServerName._IID
IID_IImageServerLayer2 = IImageServerLayer2._IID
IID_IImageServerLayer3 = IImageServerLayer3._IID
IID_IISLFootprintDisplayProps = IISLFootprintDisplayProps._IID
IID_IDataObjectEx = IDataObjectEx._IID
IID_IDataObjectArray = IDataObjectArray._IID
IID_IDataObjects = IDataObjects._IID
IID_IPropertyInfo = IPropertyInfo._IID
IID_IPropertyInfos = IPropertyInfos._IID
IID_ITemplateInfo = ITemplateInfo._IID
IID_ITemplateInfos = ITemplateInfos._IID
IID_IDataObjectType = IDataObjectType._IID
IID_IDataObjectTypes = IDataObjectTypes._IID
IID_IDataObjectTable = IDataObjectTable._IID
IID_IDataObjectTables = IDataObjectTables._IID
IID_IDomainInfo = IDomainInfo._IID
IID_IGraphicFeature = IGraphicFeature._IID
IID_IGraphicFeatures = IGraphicFeatures._IID
IID_IGraphicFeatureLayer = IGraphicFeatureLayer._IID
IID_IGraphicFeatureLayers = IGraphicFeatureLayers._IID
IID_IGFSTableDescription = IGFSTableDescription._IID
IID_IGFSTableDescriptions = IGFSTableDescriptions._IID
IID_IGFSReplicaDescription = IGFSReplicaDescription._IID
IID_IGFLayerTableDataMapping = IGFLayerTableDataMapping._IID
IID_IGFLayerTableDataMappings = IGFLayerTableDataMappings._IID
IID_IDataObjectGroup = IDataObjectGroup._IID
IID_IDataObjectGroupArray = IDataObjectGroupArray._IID
IID_IDataObjectGroups = IDataObjectGroups._IID
IID_ITableEdit = ITableEdit._IID
IID_ITableEdits = ITableEdits._IID
IID_IEditResult = IEditResult._IID
IID_IEditResults = IEditResults._IID
IID_ITableEditResult = ITableEditResult._IID
IID_ITableEditResults = ITableEditResults._IID
IID_IServiceDataOptions = IServiceDataOptions._IID
IID_IServiceData = IServiceData._IID
IID_IGraphicFeatureServer = IGraphicFeatureServer._IID
IID_IGraphicFeatureServerReplication = IGraphicFeatureServerReplication._IID
IID_ITableIdentity = ITableIdentity._IID
IID_ITableIdentities = ITableIdentities._IID
IID_IFeatureServerInfo = IFeatureServerInfo._IID
IID_IDataObjectTable2 = IDataObjectTable2._IID
IID_IGraphicFeatureLayer2 = IGraphicFeatureLayer2._IID
IID_IGraphicFeatureServer2 = IGraphicFeatureServer2._IID
IID_IMosaicSubLayer = IMosaicSubLayer._IID
IID_IJPIPServer = IJPIPServer._IID
IID_ILayerTablesAndDataMappings = ILayerTablesAndDataMappings._IID
IID_IGFSReplicationAgent = IGFSReplicationAgent._IID
IID_IDataSourceHelperMap = IDataSourceHelperMap._IID
IID_IDataSourceHelperLayer = IDataSourceHelperLayer._IID
IID_IDataSourceHelperStandaloneTable = IDataSourceHelperStandaloneTable._IID
IID_IMSDHelper = IMSDHelper._IID
IID_IMSDHelper2 = IMSDHelper2._IID
IID_IFeatureServiceEditExtension = IFeatureServiceEditExtension._IID
IID_IFeatureServiceLayerEditExtension = IFeatureServiceLayerEditExtension._IID
IID_IMapSurroundFrame = IMapSurroundFrame._IID
IID_IMapSurround = IMapSurround._IID
IID_IEnumMapSurround = IEnumMapSurround._IID
IID_ILegend = ILegend._IID
IID_IScaleBar = IScaleBar._IID
IID_IMapInset = IMapInset._IID
IID_IScaleText = IScaleText._IID
IID_IScaleText2 = IScaleText2._IID
IID_INorthArrow = INorthArrow._IID
IID_INorthArrow2 = INorthArrow2._IID
IID_IOverview = IOverview._IID
IID_IOverview2 = IOverview2._IID
IID_IMapDescriptor = IMapDescriptor._IID
IID_IMapServerLayout = IMapServerLayout._IID
IID_IMap = IMap._IID
IID_IAnnotateMap = IAnnotateMap._IID
IID_IExportInfoGenerator = IExportInfoGenerator._IID
IID_IAnnotateMap2 = IAnnotateMap2._IID
IID_ILabelCache = ILabelCache._IID
IID_IStandardAnnotateMap = IStandardAnnotateMap._IID
IID_IActiveView = IActiveView._IID
IID_IActiveViewEvents = IActiveViewEvents._IID
IID_IConvertLabelsToAnnotation = IConvertLabelsToAnnotation._IID
IID_IBasemapLayer = IBasemapLayer._IID
IID_IMapSurroundFactory = IMapSurroundFactory._IID
IID_IMapEvents3 = IMapEvents3._IID
IID_IMapAutoExtentOptions = IMapAutoExtentOptions._IID
IID_IMaps2 = IMaps2._IID
IID_IMaps = IMaps._IID
IID_IEnumMap = IEnumMap._IID
IID_ISpatialBookmark = ISpatialBookmark._IID
IID_IPushPin = IPushPin._IID
IID_IAOIBookmark = IAOIBookmark._IID
IID_IFeatureBookmark = IFeatureBookmark._IID
IID_IEnumSpatialBookmark = IEnumSpatialBookmark._IID
IID_IMapBookmarks = IMapBookmarks._IID
IID_IMapBookmarks2 = IMapBookmarks2._IID
IID_ILegend2 = ILegend2._IID
IID_ILegend3 = ILegend3._IID
IID_IFeatureFindData = IFeatureFindData._IID
IID_IMXFeatureFindData = IMXFeatureFindData._IID
IID_IMapIdentifyObject = IMapIdentifyObject._IID
IID_IRotateOperation = IRotateOperation._IID
IID_IMapCooker = IMapCooker._IID
IID_IMapCooker2 = IMapCooker2._IID
IID_IPageLayout = IPageLayout._IID
IID_IMxdContents = IMxdContents._IID
IID_IPrintAndExport = IPrintAndExport._IID
IID_IPageLayoutSnap = IPageLayoutSnap._IID
IID_IPageLayout2 = IPageLayout2._IID
IID_IPageLayout3 = IPageLayout3._IID
IID_IMapDocument = IMapDocument._IID
IID_IMxdServer = IMxdServer._IID
IID_IMxdServerObjects = IMxdServerObjects._IID
IID_IMapServerObjects = IMapServerObjects._IID
IID_IMapServerObjects2 = IMapServerObjects2._IID
IID_IMapReader = IMapReader._IID
IID_IMapServerObjects3 = IMapServerObjects3._IID
IID_IRealTimeFeedManager = IRealTimeFeedManager._IID
IID_IMobileSync = IMobileSync._IID
IID_IDynamicCacheLayerManager = IDynamicCacheLayerManager._IID
IID_IDynamicCacheLayerManager2 = IDynamicCacheLayerManager2._IID
IID_IDataSourceHelperMapDocument = IDataSourceHelperMapDocument._IID
IID_IMapFrame = IMapFrame._IID
IID_ILocatorRectangle = ILocatorRectangle._IID
IID_ILocatorRectangle2 = ILocatorRectangle2._IID
IID_IMapGrid = IMapGrid._IID
IID_IGridLabel = IGridLabel._IID
IID_IReferenceSystem = IReferenceSystem._IID
IID_IGridLabel2 = IGridLabel2._IID
IID_IGraticule = IGraticule._IID
IID_IIndexGrid = IIndexGrid._IID
IID_ICustomOverlayGrid = ICustomOverlayGrid._IID
IID_IMapGrids = IMapGrids._IID
IID_IMapServerIdentifyResults = IMapServerIdentifyResults._IID
IID_IMapServer = IMapServer._IID
IID_IMapServer2 = IMapServer2._IID
IID_IKmlConversion = IKmlConversion._IID
IID_IMapServer3 = IMapServer3._IID
IID_IMapServer4 = IMapServer4._IID
IID_IMobileSync2 = IMobileSync2._IID
IID_IGraphicFeatureServerInit = IGraphicFeatureServerInit._IID
IID_ISDGenerator = ISDGenerator._IID
IID_IMapServerIdentifyResult = IMapServerIdentifyResult._IID
IID_IMapServerIdentifyObject = IMapServerIdentifyObject._IID
IID_IMapServerRelationships = IMapServerRelationships._IID
IID_IMapServerRow = IMapServerRow._IID
IID_IMapServerRows = IMapServerRows._IID
IID_IMapServerRelationship = IMapServerRelationship._IID
IID_IMapServerRow2 = IMapServerRow2._IID
IID_IMapServerIdentifyResult2 = IMapServerIdentifyResult2._IID
_IIDMap[IID_IProtectNameCarto] = IProtectNameCarto
_IIDMap[IID_IDimensionProtectNames] = IDimensionProtectNames
_IIDMap[IID_ILayer] = ILayer
_IIDMap[IID_IFeatureIDSet] = IFeatureIDSet
_IIDMap[IID_IAction] = IAction
_IIDMap[IID_IActionCollection] = IActionCollection
_IIDMap[IID_IActionProcessor] = IActionProcessor
_IIDMap[IID_ILocationTrigger] = ILocationTrigger
_IIDMap[IID_IConditionalAction] = IConditionalAction
_IIDMap[IID_IConditionalAction2] = IConditionalAction2
_IIDMap[IID_IConditionalAction3] = IConditionalAction3
_IIDMap[IID_IConditionalAction4] = IConditionalAction4
_IIDMap[IID_ILayerAction] = ILayerAction
_IIDMap[IID_IActionState] = IActionState
_IIDMap[IID_IHighlightSuppressionAction] = IHighlightSuppressionAction
_IIDMap[IID_IDirectData] = IDirectData
_IIDMap[IID_ITemporalSearch] = ITemporalSearch
_IIDMap[IID_IRasterRenderer] = IRasterRenderer
_IIDMap[IID_IRasterLayer] = IRasterLayer
_IIDMap[IID_IRasterRenderer2] = IRasterRenderer2
_IIDMap[IID_IRasterRendererInfo] = IRasterRendererInfo
_IIDMap[IID_IRasterRendererColorRamp] = IRasterRendererColorRamp
_IIDMap[IID_IRasterRendererMaker] = IRasterRendererMaker
_IIDMap[IID_IRasterRendererMaker2] = IRasterRendererMaker2
_IIDMap[IID_IRasterDisplayProps] = IRasterDisplayProps
_IIDMap[IID_IRasterUniqueValueRenderer] = IRasterUniqueValueRenderer
_IIDMap[IID_IRasterRendererUniqueValues] = IRasterRendererUniqueValues
_IIDMap[IID_IRasterClassifyColorRampRenderer] = IRasterClassifyColorRampRenderer
_IIDMap[IID_IRasterDataExclusion] = IRasterDataExclusion
_IIDMap[IID_IRasterClassifyUIProperties] = IRasterClassifyUIProperties
_IIDMap[IID_IRasterStretch] = IRasterStretch
_IIDMap[IID_IRasterStretch2] = IRasterStretch2
_IIDMap[IID_IRasterStretch3] = IRasterStretch3
_IIDMap[IID_IGlobeRasterStretch] = IGlobeRasterStretch
_IIDMap[IID_IRasterStretchMinMax] = IRasterStretchMinMax
_IIDMap[IID_IRasterRGBRenderer] = IRasterRGBRenderer
_IIDMap[IID_IRasterRGBRenderer2] = IRasterRGBRenderer2
_IIDMap[IID_IRasterStretchColorRampRenderer] = IRasterStretchColorRampRenderer
_IIDMap[IID_IRasterRendererClassInfo] = IRasterRendererClassInfo
_IIDMap[IID_IEnumRasterUniqueValueColor] = IEnumRasterUniqueValueColor
_IIDMap[IID_IRasterCatalogRendererPicker] = IRasterCatalogRendererPicker
_IIDMap[IID_IColorChannelMapping] = IColorChannelMapping
_IIDMap[IID_IHillShadeInfo] = IHillShadeInfo
_IIDMap[IID_IDisplayTableExchange] = IDisplayTableExchange
_IIDMap[IID_IRasterDiscreteColorRenderer] = IRasterDiscreteColorRenderer
_IIDMap[IID_IRenderedRaster] = IRenderedRaster
_IIDMap[IID_IRenderedRaster2] = IRenderedRaster2
_IIDMap[IID_IRasterStretchAdvancedLabels] = IRasterStretchAdvancedLabels
_IIDMap[IID_IRasterRendererUpdate] = IRasterRendererUpdate
_IIDMap[IID_IIdentify] = IIdentify
_IIDMap[IID_ILegendClassFormat] = ILegendClassFormat
_IIDMap[IID_ILegendClass] = ILegendClass
_IIDMap[IID_ILegendGroup] = ILegendGroup
_IIDMap[IID_ILegendFormat] = ILegendFormat
_IIDMap[IID_IElement] = IElement
_IIDMap[IID_IEnumElement] = IEnumElement
_IIDMap[IID_ILegendItem] = ILegendItem
_IIDMap[IID_ILegendInfo] = ILegendInfo
_IIDMap[IID_ILayer2] = ILayer2
_IIDMap[IID_ILayerDrawSetup] = ILayerDrawSetup
_IIDMap[IID_ITemporaryLayer] = ITemporaryLayer
_IIDMap[IID_ILayerExtensions] = ILayerExtensions
_IIDMap[IID_ITableExtensions] = ITableExtensions
_IIDMap[IID_IDataLayerExtension] = IDataLayerExtension
_IIDMap[IID_ICompositeLayer] = ICompositeLayer
_IIDMap[IID_ICompositeLayer2] = ICompositeLayer2
_IIDMap[IID_IEnumLayer] = IEnumLayer
_IIDMap[IID_ILayerFactory] = ILayerFactory
_IIDMap[IID_IFeatureServiceLayerFactory] = IFeatureServiceLayerFactory
_IIDMap[IID_IBarrierProperties] = IBarrierProperties
_IIDMap[IID_IBarrierProperties2] = IBarrierProperties2
_IIDMap[IID_ILayerEvents] = ILayerEvents
_IIDMap[IID_IDataLayer] = IDataLayer
_IIDMap[IID_IDataLayer2] = IDataLayer2
_IIDMap[IID_ILayerDrawingProperties] = ILayerDrawingProperties
_IIDMap[IID_ILayerInfo] = ILayerInfo
_IIDMap[IID_ILayerEffects] = ILayerEffects
_IIDMap[IID_ILayerEffectDIM] = ILayerEffectDIM
_IIDMap[IID_ILayerPosition] = ILayerPosition
_IIDMap[IID_IAttributeTable] = IAttributeTable
_IIDMap[IID_ILayerStatus] = ILayerStatus
_IIDMap[IID_IPublishLayer] = IPublishLayer
_IIDMap[IID_ISecureLayer] = ISecureLayer
_IIDMap[IID_ILayerDrawingPhase] = ILayerDrawingPhase
_IIDMap[IID_ILicensedComponent] = ILicensedComponent
_IIDMap[IID_ILayerGeneralProperties] = ILayerGeneralProperties
_IIDMap[IID_IDrawAnnotationGeometry] = IDrawAnnotationGeometry
_IIDMap[IID_ILayerSymbologyExtents] = ILayerSymbologyExtents
_IIDMap[IID_IFeatureGeometryAccess] = IFeatureGeometryAccess
_IIDMap[IID_ISecureLayer2] = ISecureLayer2
_IIDMap[IID_ITimeData] = ITimeData
_IIDMap[IID_ITimeTableDefinition] = ITimeTableDefinition
_IIDMap[IID_ITimeDataDisplay] = ITimeDataDisplay
_IIDMap[IID_ITimeDimensionDefinition] = ITimeDimensionDefinition
_IIDMap[IID_ITimeData2] = ITimeData2
_IIDMap[IID_IIdentifyObj] = IIdentifyObj
_IIDMap[IID_IIdentify2] = IIdentify2
_IIDMap[IID_IIdentifyObject] = IIdentifyObject
_IIDMap[IID_IIdentifyObjWindow] = IIdentifyObjWindow
_IIDMap[IID_IIdentifyDisplay] = IIdentifyDisplay
_IIDMap[IID_ILegendGroups] = ILegendGroups
_IIDMap[IID_ILegendClasses] = ILegendClasses
_IIDMap[IID_IFind] = IFind
_IIDMap[IID_IFindObj] = IFindObj
_IIDMap[IID_IFindObject] = IFindObject
_IIDMap[IID_IRemoteFindObj] = IRemoteFindObj
_IIDMap[IID_IGeoReference] = IGeoReference
_IIDMap[IID_IGeoRefSaveAsDlg] = IGeoRefSaveAsDlg
_IIDMap[IID_IPatch] = IPatch
_IIDMap[IID_ILegendFormat2] = ILegendFormat2
_IIDMap[IID_ILegendLayout] = ILegendLayout
_IIDMap[IID_IDynamicLegendItem] = IDynamicLegendItem
_IIDMap[IID_ILegendItem2] = ILegendItem2
_IIDMap[IID_ILegendItem3] = ILegendItem3
_IIDMap[IID_IDynamicLegendClass] = IDynamicLegendClass
_IIDMap[IID_IDynamicLegendLayer] = IDynamicLegendLayer
_IIDMap[IID_IDynamicLegendRenderer] = IDynamicLegendRenderer
_IIDMap[IID_IBorder] = IBorder
_IIDMap[IID_IBackground] = IBackground
_IIDMap[IID_IFrameElement] = IFrameElement
_IIDMap[IID_IElementCollection] = IElementCollection
_IIDMap[IID_IElementCollection2] = IElementCollection2
_IIDMap[IID_ILayerFactoryHelper] = ILayerFactoryHelper
_IIDMap[IID_ILayerPropertySheet] = ILayerPropertySheet
_IIDMap[IID_IElementProperties] = IElementProperties
_IIDMap[IID_IElementProperties2] = IElementProperties2
_IIDMap[IID_IElementProperties3] = IElementProperties3
_IIDMap[IID_IGraphicElement] = IGraphicElement
_IIDMap[IID_IBoundsProperties] = IBoundsProperties
_IIDMap[IID_IFrameDraw] = IFrameDraw
_IIDMap[IID_IShadow] = IShadow
_IIDMap[IID_IFrameProperties] = IFrameProperties
_IIDMap[IID_IPictureElement] = IPictureElement
_IIDMap[IID_IPictureElement2] = IPictureElement2
_IIDMap[IID_IPictureElement3] = IPictureElement3
_IIDMap[IID_IPictureElement4] = IPictureElement4
_IIDMap[IID_IPictureElement5] = IPictureElement5
_IIDMap[IID_IOlePictureElement] = IOlePictureElement
_IIDMap[IID_IGraphicsLayer] = IGraphicsLayer
_IIDMap[IID_ISelection] = ISelection
_IIDMap[IID_ISelectionEnvironment] = ISelectionEnvironment
_IIDMap[IID_IBarrierCollection] = IBarrierCollection
_IIDMap[IID_IFeatureLayer] = IFeatureLayer
_IIDMap[IID_IGroupElement] = IGroupElement
_IIDMap[IID_IGraphicsContainer] = IGraphicsContainer
_IIDMap[IID_IAnnotateLayerProperties] = IAnnotateLayerProperties
_IIDMap[IID_IAnnotateLayerPropertiesCollection] = IAnnotateLayerPropertiesCollection
_IIDMap[IID_IAnnotateMapProperties] = IAnnotateMapProperties
_IIDMap[IID_IFrameDecoration] = IFrameDecoration
_IIDMap[IID_ISymbolBorder] = ISymbolBorder
_IIDMap[IID_ISymbolBackground] = ISymbolBackground
_IIDMap[IID_IQuerySize] = IQuerySize
_IIDMap[IID_ISymbolShadow] = ISymbolShadow
_IIDMap[IID_IElementShutdown] = IElementShutdown
_IIDMap[IID_IElementEditVertices] = IElementEditVertices
_IIDMap[IID_IElementEditCallout] = IElementEditCallout
_IIDMap[IID_IGraphicsComposite] = IGraphicsComposite
_IIDMap[IID_ILineElement] = ILineElement
_IIDMap[IID_IMarkerElement] = IMarkerElement
_IIDMap[IID_IFillShapeElement] = IFillShapeElement
_IIDMap[IID_ITextElement] = ITextElement
_IIDMap[IID_IGroupElement2] = IGroupElement2
_IIDMap[IID_IGroupElement3] = IGroupElement3
_IIDMap[IID_IMultiPartTextElement] = IMultiPartTextElement
_IIDMap[IID_ISelectionEvents] = ISelectionEvents
_IIDMap[IID_IOverflowGraphicsContainer] = IOverflowGraphicsContainer
_IIDMap[IID_IElementOperation] = IElementOperation
_IIDMap[IID_IElementEditVerticesOperation] = IElementEditVerticesOperation
_IIDMap[IID_IGraphicsContainerSelect] = IGraphicsContainerSelect
_IIDMap[IID_IAnnotationElement] = IAnnotationElement
_IIDMap[IID_IGroupSymbolElement] = IGroupSymbolElement
_IIDMap[IID_ISymbolCollectionElement] = ISymbolCollectionElement
_IIDMap[IID_IInkGraphic] = IInkGraphic
_IIDMap[IID_IColumnProperties] = IColumnProperties
_IIDMap[IID_IOleFrame] = IOleFrame
_IIDMap[IID_IGraphicsContainerProperty] = IGraphicsContainerProperty
_IIDMap[IID_IGraphicsLayerScale] = IGraphicsLayerScale
_IIDMap[IID_IText3DElement] = IText3DElement
_IIDMap[IID_IGraphicElements] = IGraphicElements
_IIDMap[IID_IFeatureIdentifyObj] = IFeatureIdentifyObj
_IIDMap[IID_IRowIdentifyObject] = IRowIdentifyObject
_IIDMap[IID_IFeatureFindData2] = IFeatureFindData2
_IIDMap[IID_ILineLabelPosition] = ILineLabelPosition
_IIDMap[IID_ILineLabelPlacementPriorities] = ILineLabelPlacementPriorities
_IIDMap[IID_IPointPlacementPriorities] = IPointPlacementPriorities
_IIDMap[IID_IBasicOverposterLayerProperties] = IBasicOverposterLayerProperties
_IIDMap[IID_IAnnotationExpressionParser] = IAnnotationExpressionParser
_IIDMap[IID_IAnnotationExpressionEngine] = IAnnotationExpressionEngine
_IIDMap[IID_ILabelEngineLayerProperties] = ILabelEngineLayerProperties
_IIDMap[IID_IPlacedObject] = IPlacedObject
_IIDMap[IID_IPlacedObject2] = IPlacedObject2
_IIDMap[IID_IPlacedObject3] = IPlacedObject3
_IIDMap[IID_IOverposterLayerProperties] = IOverposterLayerProperties
_IIDMap[IID_IOverposterLayerProperties2] = IOverposterLayerProperties2
_IIDMap[IID_IOverposterProperties] = IOverposterProperties
_IIDMap[IID_IOverposterOptions] = IOverposterOptions
_IIDMap[IID_IOverposterOptions2] = IOverposterOptions2
_IIDMap[IID_IOverposter] = IOverposter
_IIDMap[IID_IOverposter2] = IOverposter2
_IIDMap[IID_IOverposter3] = IOverposter3
_IIDMap[IID_IOverposter4] = IOverposter4
_IIDMap[IID_IBasicOverposterLayerProperties2] = IBasicOverposterLayerProperties2
_IIDMap[IID_IBasicOverposterLayerProperties3] = IBasicOverposterLayerProperties3
_IIDMap[IID_IBasicOverposterLayerProperties4] = IBasicOverposterLayerProperties4
_IIDMap[IID_IBasicOverposterEvents] = IBasicOverposterEvents
_IIDMap[IID_IMaplexRotationProperties] = IMaplexRotationProperties
_IIDMap[IID_IMaplexRotationProperties2] = IMaplexRotationProperties2
_IIDMap[IID_IMaplexLabelStackingProperties] = IMaplexLabelStackingProperties
_IIDMap[IID_IMaplexOffsetAlongLineProperties] = IMaplexOffsetAlongLineProperties
_IIDMap[IID_IMaplexOverposterLayerProperties] = IMaplexOverposterLayerProperties
_IIDMap[IID_IMaplexOverposterLayerProperties2] = IMaplexOverposterLayerProperties2
_IIDMap[IID_IMaplexOverposterLayerProperties3] = IMaplexOverposterLayerProperties3
_IIDMap[IID_IMaplexOverposterLayerProperties4] = IMaplexOverposterLayerProperties4
_IIDMap[IID_IMaplexDictionaryEntry] = IMaplexDictionaryEntry
_IIDMap[IID_IMaplexDictionary] = IMaplexDictionary
_IIDMap[IID_IMaplexDictionaries] = IMaplexDictionaries
_IIDMap[IID_IMaplexKeyNumberGroup] = IMaplexKeyNumberGroup
_IIDMap[IID_IMaplexKeyNumberGroups] = IMaplexKeyNumberGroups
_IIDMap[IID_IMaplexOverposterProperties] = IMaplexOverposterProperties
_IIDMap[IID_IMaplexOverposterProperties2] = IMaplexOverposterProperties2
_IIDMap[IID_ILabelEngineLayerProperties2] = ILabelEngineLayerProperties2
_IIDMap[IID_IAnnotateLayerTransformationProperties] = IAnnotateLayerTransformationProperties
_IIDMap[IID_IAnnotationPropertiesConverter] = IAnnotationPropertiesConverter
_IIDMap[IID_ILabelStyle] = ILabelStyle
_IIDMap[IID_ILabelStyle2] = ILabelStyle2
_IIDMap[IID_ILayerFields] = ILayerFields
_IIDMap[IID_IAnnotateLayerPropertiesCollection2] = IAnnotateLayerPropertiesCollection2
_IIDMap[IID_IAnnotationExpressionParser2] = IAnnotationExpressionParser2
_IIDMap[IID_ICodedValueAttributes] = ICodedValueAttributes
_IIDMap[IID_IHotLinkExpressionProperties] = IHotLinkExpressionProperties
_IIDMap[IID_ILabelEnvironment] = ILabelEnvironment
_IIDMap[IID_IRotationRenderer] = IRotationRenderer
_IIDMap[IID_IHyperlink] = IHyperlink
_IIDMap[IID_IHyperlinkContainer] = IHyperlinkContainer
_IIDMap[IID_IHotlinkContainer] = IHotlinkContainer
_IIDMap[IID_IFeatureExportInfoGenerator] = IFeatureExportInfoGenerator
_IIDMap[IID_IExportSupport] = IExportSupport
_IIDMap[IID_IFeatureRenderer] = IFeatureRenderer
_IIDMap[IID_IFeatureRendererUpdate] = IFeatureRendererUpdate
_IIDMap[IID_IClassBreaksUIProperties] = IClassBreaksUIProperties
_IIDMap[IID_IClassBreaksUIProperties2] = IClassBreaksUIProperties2
_IIDMap[IID_IDataSampling] = IDataSampling
_IIDMap[IID_IDataNormalization] = IDataNormalization
_IIDMap[IID_IProportionalSymbolRenderer] = IProportionalSymbolRenderer
_IIDMap[IID_ITransparencyRenderer] = ITransparencyRenderer
_IIDMap[IID_ILevelRenderer] = ILevelRenderer
_IIDMap[IID_ILookupSymbol] = ILookupSymbol
_IIDMap[IID_ILookupLegendClass] = ILookupLegendClass
_IIDMap[IID_IBivariateRenderer] = IBivariateRenderer
_IIDMap[IID_IScaleDependentRenderer] = IScaleDependentRenderer
_IIDMap[IID_IRendererFields] = IRendererFields
_IIDMap[IID_IChartRenderer] = IChartRenderer
_IIDMap[IID_IPieChartRenderer] = IPieChartRenderer
_IIDMap[IID_ICalcRendererValues] = ICalcRendererValues
_IIDMap[IID_ICalcRendererValues2] = ICalcRendererValues2
_IIDMap[IID_IDotDensityRenderer] = IDotDensityRenderer
_IIDMap[IID_IDotDensityRenderer2] = IDotDensityRenderer2
_IIDMap[IID_IDotDensityUIRenderer] = IDotDensityUIRenderer
_IIDMap[IID_IHorizontalLegendItem] = IHorizontalLegendItem
_IIDMap[IID_IVerticalLegendItem] = IVerticalLegendItem
_IIDMap[IID_INestedLegendItem] = INestedLegendItem
_IIDMap[IID_IHorizontalBarLegendItem] = IHorizontalBarLegendItem
_IIDMap[IID_IFeatureSelectionRenderer] = IFeatureSelectionRenderer
_IIDMap[IID_IUniqueValueInfo] = IUniqueValueInfo
_IIDMap[IID_IClassBreakInfo] = IClassBreakInfo
_IIDMap[IID_IUniqueValueInfos] = IUniqueValueInfos
_IIDMap[IID_IClassBreakInfos] = IClassBreakInfos
_IIDMap[IID_IDataExclusion] = IDataExclusion
_IIDMap[IID_IDataExclusion2] = IDataExclusion2
_IIDMap[IID_IRotationRenderer2] = IRotationRenderer2
_IIDMap[IID_ISelectionEnvironmentThreshold] = ISelectionEnvironmentThreshold
_IIDMap[IID_ISelectionEnvironmentStorage] = ISelectionEnvironmentStorage
_IIDMap[IID_ISelectionEnvironmentLayer] = ISelectionEnvironmentLayer
_IIDMap[IID_IFeatureLayerSelectionEvents] = IFeatureLayerSelectionEvents
_IIDMap[IID_IHotlinkMacro] = IHotlinkMacro
_IIDMap[IID_IDisplayTable] = IDisplayTable
_IIDMap[IID_IFeatureLayer2] = IFeatureLayer2
_IIDMap[IID_IGeoFeatureLayer] = IGeoFeatureLayer
_IIDMap[IID_ITopologyLayer] = ITopologyLayer
_IIDMap[IID_ITopologyErrorSelection] = ITopologyErrorSelection
_IIDMap[IID_ITableSelection] = ITableSelection
_IIDMap[IID_IFeatureSelection] = IFeatureSelection
_IIDMap[IID_IDefinitionExpressionEvents] = IDefinitionExpressionEvents
_IIDMap[IID_IFeatureLayerDefinition] = IFeatureLayerDefinition
_IIDMap[IID_IFeatureLayerDefinition2] = IFeatureLayerDefinition2
_IIDMap[IID_ITableDefinition] = ITableDefinition
_IIDMap[IID_ISelectionLayerDefinition] = ISelectionLayerDefinition
_IIDMap[IID_IDisplayRelationshipClass] = IDisplayRelationshipClass
_IIDMap[IID_IFieldInfoSet] = IFieldInfoSet
_IIDMap[IID_IOrderedLayerFields] = IOrderedLayerFields
_IIDMap[IID_IDisplayExpressionProperties] = IDisplayExpressionProperties
_IIDMap[IID_IDisplayString] = IDisplayString
_IIDMap[IID_IHotlinkExpression] = IHotlinkExpression
_IIDMap[IID_ICompositeGraphicsLayer] = ICompositeGraphicsLayer
_IIDMap[IID_ICompositeGraphicsLayer2] = ICompositeGraphicsLayer2
_IIDMap[IID_IFeatureLayerSymbology] = IFeatureLayerSymbology
_IIDMap[IID_IRelationshipClassCollection] = IRelationshipClassCollection
_IIDMap[IID_IRelationshipClassCollectionEdit] = IRelationshipClassCollectionEdit
_IIDMap[IID_ISimpleRenderer] = ISimpleRenderer
_IIDMap[IID_IClassBreaksRenderer] = IClassBreaksRenderer
_IIDMap[IID_IUniqueValueRenderer] = IUniqueValueRenderer
_IIDMap[IID_IUniqueValueRenderer2] = IUniqueValueRenderer2
_IIDMap[IID_IMarker3DRotationAngles] = IMarker3DRotationAngles
_IIDMap[IID_ISizeRenderer] = ISizeRenderer
_IIDMap[IID_IRendererClasses] = IRendererClasses
_IIDMap[IID_IBasicHistogram] = IBasicHistogram
_IIDMap[IID_ITableHistogram] = ITableHistogram
_IIDMap[IID_ITableHistogram2] = ITableHistogram2
_IIDMap[IID_IGraphicsContainerEvents] = IGraphicsContainerEvents
_IIDMap[IID_ILayerExtensionDraw] = ILayerExtensionDraw
_IIDMap[IID_ILayerExtensionInvalidate] = ILayerExtensionInvalidate
_IIDMap[IID_ISymbolLevels] = ISymbolLevels
_IIDMap[IID_IFeatureCache] = IFeatureCache
_IIDMap[IID_IFeatureCache2] = IFeatureCache2
_IIDMap[IID_IInteractiveSearch] = IInteractiveSearch
_IIDMap[IID_IHTMLPopupInfo] = IHTMLPopupInfo
_IIDMap[IID_IHTMLPopupInfo2] = IHTMLPopupInfo2
_IIDMap[IID_IHTMLPopupIdentify] = IHTMLPopupIdentify
_IIDMap[IID_IHTMLPopupIdentify2] = IHTMLPopupIdentify2
_IIDMap[IID_IEditTemplate] = IEditTemplate
_IIDMap[IID_IEditTemplateFactory] = IEditTemplateFactory
_IIDMap[IID_IEditTemplateManager] = IEditTemplateManager
_IIDMap[IID_ITimeDisplayTable] = ITimeDisplayTable
_IIDMap[IID_ITimeDisplayTable2] = ITimeDisplayTable2
_IIDMap[IID_IExpression] = IExpression
_IIDMap[IID_ICoverageAnnotationLayerFactory] = ICoverageAnnotationLayerFactory
_IIDMap[IID_IGroupLayer] = IGroupLayer
_IIDMap[IID_ILayerMasking] = ILayerMasking
_IIDMap[IID_ILevelMasking] = ILevelMasking
_IIDMap[IID_ICoverageAnnotationLayer] = ICoverageAnnotationLayer
_IIDMap[IID_ICoverageAnnotationLayer2] = ICoverageAnnotationLayer2
_IIDMap[IID_ICoverageAnnotationSel] = ICoverageAnnotationSel
_IIDMap[IID_ICoverageAnnotationLayerWrite] = ICoverageAnnotationLayerWrite
_IIDMap[IID_IDimensionStyle] = IDimensionStyle
_IIDMap[IID_IDimensionStyleDisplay] = IDimensionStyleDisplay
_IIDMap[IID_IDimensionStyleText] = IDimensionStyleText
_IIDMap[IID_IDimensionShape] = IDimensionShape
_IIDMap[IID_IDimensionFeature] = IDimensionFeature
_IIDMap[IID_IEnumDimensionStyle] = IEnumDimensionStyle
_IIDMap[IID_IDimensionStyles] = IDimensionStyles
_IIDMap[IID_IDimensionClassExtension] = IDimensionClassExtension
_IIDMap[IID_IDimensionGraphic] = IDimensionGraphic
_IIDMap[IID_IDimensionClassExtension2] = IDimensionClassExtension2
_IIDMap[IID_INewDimensionFeedback] = INewDimensionFeedback
_IIDMap[IID_IModifyDimensionFeedback] = IModifyDimensionFeedback
_IIDMap[IID_IAnnotateFeature] = IAnnotateFeature
_IIDMap[IID_IAnnotateFeature2] = IAnnotateFeature2
_IIDMap[IID_IAnnotationErrorEvents] = IAnnotationErrorEvents
_IIDMap[IID_IMapOverposter] = IMapOverposter
_IIDMap[IID_IExtentStack] = IExtentStack
_IIDMap[IID_IFDOGraphicsLayer] = IFDOGraphicsLayer
_IIDMap[IID_IFDOGraphicsLayer2] = IFDOGraphicsLayer2
_IIDMap[IID_IAnnotationLayer] = IAnnotationLayer
_IIDMap[IID_IFDOGraphicsLayerRead] = IFDOGraphicsLayerRead
_IIDMap[IID_IFDOAttributeConversion] = IFDOAttributeConversion
_IIDMap[IID_IFDOGraphicsLayerFactory] = IFDOGraphicsLayerFactory
_IIDMap[IID_IAnnotationLayerFactory] = IAnnotationLayerFactory
_IIDMap[IID_ISymbolSubstitution] = ISymbolSubstitution
_IIDMap[IID_IAnnotationFeature] = IAnnotationFeature
_IIDMap[IID_IAnnotationFeature2] = IAnnotationFeature2
_IIDMap[IID_IAnnoClass] = IAnnoClass
_IIDMap[IID_IAnnotationClassExtension] = IAnnotationClassExtension
_IIDMap[IID_IAnnotationClassExtension2] = IAnnotationClassExtension2
_IIDMap[IID_IAnnoClassAdmin] = IAnnoClassAdmin
_IIDMap[IID_IAnnoClassAdmin2] = IAnnoClassAdmin2
_IIDMap[IID_IAnnoClassAdmin3] = IAnnoClassAdmin3
_IIDMap[IID_IConvertFDOAnnoToCoverageAnno] = IConvertFDOAnnoToCoverageAnno
_IIDMap[IID_IFDOGraphicsContainer] = IFDOGraphicsContainer
_IIDMap[IID_IAnnotationSublayer] = IAnnotationSublayer
_IIDMap[IID_IBasemapSubLayer] = IBasemapSubLayer
_IIDMap[IID_IShader] = IShader
_IIDMap[IID_IArrayOfIShader] = IArrayOfIShader
_IIDMap[IID_IReadingDirection] = IReadingDirection
_IIDMap[IID_ICompositeMapSurround] = ICompositeMapSurround
_IIDMap[IID_IMapEvents] = IMapEvents
_IIDMap[IID_IMapEvents2] = IMapEvents2
_IIDMap[IID_IMapSurroundEvents] = IMapSurroundEvents
_IIDMap[IID_IContextAnalyzer] = IContextAnalyzer
_IIDMap[IID_IViewManager] = IViewManager
_IIDMap[IID_IBasicMap2] = IBasicMap2
_IIDMap[IID_IBasicMap] = IBasicMap
_IIDMap[IID_IMapClipOptions] = IMapClipOptions
_IIDMap[IID_IMapLayers] = IMapLayers
_IIDMap[IID_IMapLayers2] = IMapLayers2
_IIDMap[IID_IMapBarriers] = IMapBarriers
_IIDMap[IID_IMapBarriers2] = IMapBarriers2
_IIDMap[IID_IMapAdmin] = IMapAdmin
_IIDMap[IID_IMapAdmin2] = IMapAdmin2
_IIDMap[IID_IMapAdmin3] = IMapAdmin3
_IIDMap[IID_IMapAdmin4] = IMapAdmin4
_IIDMap[IID_IMapCache] = IMapCache
_IIDMap[IID_ITableCollection] = ITableCollection
_IIDMap[IID_IStandaloneTable] = IStandaloneTable
_IIDMap[IID_IStandaloneTableCollection] = IStandaloneTableCollection
_IIDMap[IID_IDataBrowser] = IDataBrowser
_IIDMap[IID_IScaleBar2] = IScaleBar2
_IIDMap[IID_IScaleLine] = IScaleLine
_IIDMap[IID_ISingleFillScaleBar] = ISingleFillScaleBar
_IIDMap[IID_IDoubleFillScaleBar] = IDoubleFillScaleBar
_IIDMap[IID_IScaleMarks] = IScaleMarks
_IIDMap[IID_IMapInset2] = IMapInset2
_IIDMap[IID_IMarkerNorthArrow] = IMarkerNorthArrow
_IIDMap[IID_IPictureNorthArrow] = IPictureNorthArrow
_IIDMap[IID_IFeatureCursorBuffer] = IFeatureCursorBuffer
_IIDMap[IID_IFeatureCursorBuffer2] = IFeatureCursorBuffer2
_IIDMap[IID_IBufferProcessingSymbology] = IBufferProcessingSymbology
_IIDMap[IID_IBufferProcessingParameter] = IBufferProcessingParameter
_IIDMap[IID_IFeatureIndex] = IFeatureIndex
_IIDMap[IID_IIndexQuery] = IIndexQuery
_IIDMap[IID_IIndexQuery2] = IIndexQuery2
_IIDMap[IID_IFeatureIndex2] = IFeatureIndex2
_IIDMap[IID_IBasicMapIdentifyObject] = IBasicMapIdentifyObject
_IIDMap[IID_IBasicGeoprocessor] = IBasicGeoprocessor
_IIDMap[IID_IMapGeographicTransformations] = IMapGeographicTransformations
_IIDMap[IID_IViewRefresh] = IViewRefresh
_IIDMap[IID_IInvalidArea2] = IInvalidArea2
_IIDMap[IID_IInvalidArea3] = IInvalidArea3
_IIDMap[IID_ITableFactory] = ITableFactory
_IIDMap[IID_ILODInfo] = ILODInfo
_IIDMap[IID_ILODInfos] = ILODInfos
_IIDMap[IID_ILayerCacheInfo] = ILayerCacheInfo
_IIDMap[IID_ILayerCacheInfos] = ILayerCacheInfos
_IIDMap[IID_ICacheStorageInfo] = ICacheStorageInfo
_IIDMap[IID_ICacheDatasetInfo] = ICacheDatasetInfo
_IIDMap[IID_ITileCacheInfo] = ITileCacheInfo
_IIDMap[IID_ITileImageInfo] = ITileImageInfo
_IIDMap[IID_ITileImageInfo2] = ITileImageInfo2
_IIDMap[IID_ICacheControlInfo] = ICacheControlInfo
_IIDMap[IID_ICacheDescriptionInfo] = ICacheDescriptionInfo
_IIDMap[IID_ICacheDescriptionInfo2] = ICacheDescriptionInfo2
_IIDMap[IID_ICacheInfo] = ICacheInfo
_IIDMap[IID_ITileCacheStats] = ITileCacheStats
_IIDMap[IID_ICacheInfo2] = ICacheInfo2
_IIDMap[IID_IMapCooker3] = IMapCooker3
_IIDMap[IID_ITilesTable] = ITilesTable
_IIDMap[IID_IMapCacheStorageFormatConvertor] = IMapCacheStorageFormatConvertor
_IIDMap[IID_IMapCacheExporter] = IMapCacheExporter
_IIDMap[IID_IMapCacheToRasterFunctionArgument] = IMapCacheToRasterFunctionArgument
_IIDMap[IID_IDynamicMap] = IDynamicMap
_IIDMap[IID_IChangeDatabaseVersion] = IChangeDatabaseVersion
_IIDMap[IID_IMapNavigator] = IMapNavigator
_IIDMap[IID_IDocumentPreview] = IDocumentPreview
_IIDMap[IID_IDocumentInfo] = IDocumentInfo
_IIDMap[IID_IDocumentInfo2] = IDocumentInfo2
_IIDMap[IID_IDocumentInfo3] = IDocumentInfo3
_IIDMap[IID_IAdvancedShader] = IAdvancedShader
_IIDMap[IID_IRasterShader] = IRasterShader
_IIDMap[IID_IRasterDRAShader] = IRasterDRAShader
_IIDMap[IID_IMapTimeDisplay] = IMapTimeDisplay
_IIDMap[IID_IMapTimeDisplay2] = IMapTimeDisplay2
_IIDMap[IID_ITileCacheInfoEx] = ITileCacheInfoEx
_IIDMap[IID_IServiceLayerCredits] = IServiceLayerCredits
_IIDMap[IID_IPage] = IPage
_IIDMap[IID_IRulerSettings] = IRulerSettings
_IIDMap[IID_ISnapGrid] = ISnapGrid
_IIDMap[IID_ISnapGuides] = ISnapGuides
_IIDMap[IID_IImageInset] = IImageInset
_IIDMap[IID_IMapGridBorder] = IMapGridBorder
_IIDMap[IID_IGridLabelExport] = IGridLabelExport
_IIDMap[IID_IDMSGridLabel] = IDMSGridLabel
_IIDMap[IID_IFormattedGridLabel] = IFormattedGridLabel
_IIDMap[IID_IMixedFontGridLabel] = IMixedFontGridLabel
_IIDMap[IID_IMixedFontGridLabel2] = IMixedFontGridLabel2
_IIDMap[IID_IIndexGridTabStyle] = IIndexGridTabStyle
_IIDMap[IID_IBackgroundTabStyle] = IBackgroundTabStyle
_IIDMap[IID_ISimpleMapGridBorder] = ISimpleMapGridBorder
_IIDMap[IID_ICalibratedMapGridBorder] = ICalibratedMapGridBorder
_IIDMap[IID_IMeasuredGrid] = IMeasuredGrid
_IIDMap[IID_IProjectedGrid] = IProjectedGrid
_IIDMap[IID_IMapFrameEvents] = IMapFrameEvents
_IIDMap[IID_IGridAxisTicks] = IGridAxisTicks
_IIDMap[IID_IGridHatch] = IGridHatch
_IIDMap[IID_IGridInteriorLabels] = IGridInteriorLabels
_IIDMap[IID_IDMSGridLabel2] = IDMSGridLabel2
_IIDMap[IID_IDMSGridLabel3] = IDMSGridLabel3
_IIDMap[IID_ICornerGridLabel] = ICornerGridLabel
_IIDMap[IID_IMgrsGrid] = IMgrsGrid
_IIDMap[IID_IGridLadderLabels] = IGridLadderLabels
_IIDMap[IID_IPrincipalDigitsGridLabel] = IPrincipalDigitsGridLabel
_IIDMap[IID_IPageLayoutExtensions] = IPageLayoutExtensions
_IIDMap[IID_IPageEvents] = IPageEvents
_IIDMap[IID_IGraphicSnap] = IGraphicSnap
_IIDMap[IID_IGraphicSnapEnvironment] = IGraphicSnapEnvironment
_IIDMap[IID_IGraphicSnapEnvironment2] = IGraphicSnapEnvironment2
_IIDMap[IID_IGlobeDocument] = IGlobeDocument
_IIDMap[IID_ILayerFile] = ILayerFile
_IIDMap[IID_ICartoItemInfoHelper] = ICartoItemInfoHelper
_IIDMap[IID_IRasterFormatInfo] = IRasterFormatInfo
_IIDMap[IID_IRasterDefaultsEnv] = IRasterDefaultsEnv
_IIDMap[IID_IRasterDefaultsEnv2] = IRasterDefaultsEnv2
_IIDMap[IID_IRasterDefaultsEnv3] = IRasterDefaultsEnv3
_IIDMap[IID_IRasterDefaultsEnv4] = IRasterDefaultsEnv4
_IIDMap[IID_IRasterDefaultsEnv5] = IRasterDefaultsEnv5
_IIDMap[IID_IRasterDefaultsEnv6] = IRasterDefaultsEnv6
_IIDMap[IID_IRasterDefaultsEnv7] = IRasterDefaultsEnv7
_IIDMap[IID_IRasterDefaultsEnv8] = IRasterDefaultsEnv8
_IIDMap[IID_IRasterDefaultsEnv9] = IRasterDefaultsEnv9
_IIDMap[IID_IImageServiceInfo] = IImageServiceInfo
_IIDMap[IID_IImageServerLayer] = IImageServerLayer
_IIDMap[IID_IMosaicLayer] = IMosaicLayer
_IIDMap[IID_IWCSLayer] = IWCSLayer
_IIDMap[IID_IRasterIdentifyObj] = IRasterIdentifyObj
_IIDMap[IID_IRasterIdentifyObj2] = IRasterIdentifyObj2
_IIDMap[IID_IRasterCatalogLayer] = IRasterCatalogLayer
_IIDMap[IID_IColorRampSymbol] = IColorRampSymbol
_IIDMap[IID_IColorRampSymbol2] = IColorRampSymbol2
_IIDMap[IID_IRasterSpatialSelection] = IRasterSpatialSelection
_IIDMap[IID_IGeoReferenceEvents] = IGeoReferenceEvents
_IIDMap[IID_IGdbRasterCatalogLayer] = IGdbRasterCatalogLayer
_IIDMap[IID_IRasterCatalogDisplayProps] = IRasterCatalogDisplayProps
_IIDMap[IID_IRasterCatalogDisplayProps2] = IRasterCatalogDisplayProps2
_IIDMap[IID_IRasterLayerExport] = IRasterLayerExport
_IIDMap[IID_IRasterLayerExport2] = IRasterLayerExport2
_IIDMap[IID_IRasterLayerExport3] = IRasterLayerExport3
_IIDMap[IID_IRasterExporter] = IRasterExporter
_IIDMap[IID_IRenderedThumbnailBuilder] = IRenderedThumbnailBuilder
_IIDMap[IID_INITFGraphicsLayer] = INITFGraphicsLayer
_IIDMap[IID_IRasterBasemapLayer] = IRasterBasemapLayer
_IIDMap[IID_IRasterBasemapLayerFactory] = IRasterBasemapLayerFactory
_IIDMap[IID_ILayerDescriptor] = ILayerDescriptor
_IIDMap[IID_ITOCClass] = ITOCClass
_IIDMap[IID_ITOCGroup] = ITOCGroup
_IIDMap[IID_IMxdServerQuery] = IMxdServerQuery
_IIDMap[IID_IQueryByLayer] = IQueryByLayer
_IIDMap[IID_IMxdServerStatus] = IMxdServerStatus
_IIDMap[IID_ILayerDescription] = ILayerDescription
_IIDMap[IID_ILayerDescription2] = ILayerDescription2
_IIDMap[IID_ILayerResultOptions] = ILayerResultOptions
_IIDMap[IID_ILayerDescription3] = ILayerDescription3
_IIDMap[IID_IMapArea] = IMapArea
_IIDMap[IID_ILayerDescriptions] = ILayerDescriptions
_IIDMap[IID_IMapDescription] = IMapDescription
_IIDMap[IID_ITileDescription] = ITileDescription
_IIDMap[IID_IMapDescription2] = IMapDescription2
_IIDMap[IID_IMapDescriptions] = IMapDescriptions
_IIDMap[IID_IMapFrameDescription] = IMapFrameDescription
_IIDMap[IID_IMapFrameDescriptions] = IMapFrameDescriptions
_IIDMap[IID_IMapLayerInfo] = IMapLayerInfo
_IIDMap[IID_IImageType] = IImageType
_IIDMap[IID_IImageDisplay] = IImageDisplay
_IIDMap[IID_IImageDescription] = IImageDescription
_IIDMap[IID_IImageResult] = IImageResult
_IIDMap[IID_IImageResult2] = IImageResult2
_IIDMap[IID_IMapImage] = IMapImage
_IIDMap[IID_IMapImages] = IMapImages
_IIDMap[IID_ILayoutImage] = ILayoutImage
_IIDMap[IID_ISQLSyntaxInfo] = ISQLSyntaxInfo
_IIDMap[IID_IMapLayerInfos] = IMapLayerInfos
_IIDMap[IID_IMapServerBookmark] = IMapServerBookmark
_IIDMap[IID_IMapServerBookmarks] = IMapServerBookmarks
_IIDMap[IID_IMapServerFindResult] = IMapServerFindResult
_IIDMap[IID_IMapServerFindResults] = IMapServerFindResults
_IIDMap[IID_IMapServerHyperlink] = IMapServerHyperlink
_IIDMap[IID_IMapServerHyperlinks] = IMapServerHyperlinks
_IIDMap[IID_IMapServerLegendPatch] = IMapServerLegendPatch
_IIDMap[IID_IMapServerLegendClass] = IMapServerLegendClass
_IIDMap[IID_IMapServerLegendClasses] = IMapServerLegendClasses
_IIDMap[IID_IMapServerLegendGroup] = IMapServerLegendGroup
_IIDMap[IID_IMapServerLegendGroups] = IMapServerLegendGroups
_IIDMap[IID_IMapServerLegendInfo] = IMapServerLegendInfo
_IIDMap[IID_IMapServerLegendInfos] = IMapServerLegendInfos
_IIDMap[IID_IImageDisplay2] = IImageDisplay2
_IIDMap[IID_IQueryResultOptions] = IQueryResultOptions
_IIDMap[IID_IQueryResult] = IQueryResult
_IIDMap[IID_IMapTableDescription] = IMapTableDescription
_IIDMap[IID_IRelateInfo] = IRelateInfo
_IIDMap[IID_IRelateInfos] = IRelateInfos
_IIDMap[IID_IMapTableInfo] = IMapTableInfo
_IIDMap[IID_IStandaloneTableInfo] = IStandaloneTableInfo
_IIDMap[IID_IRelateDescription] = IRelateDescription
_IIDMap[IID_IFieldDomainInfo] = IFieldDomainInfo
_IIDMap[IID_IFieldDomainInfos] = IFieldDomainInfos
_IIDMap[IID_ISubtypeInfo] = ISubtypeInfo
_IIDMap[IID_ISubtypeInfos] = ISubtypeInfos
_IIDMap[IID_IImageResults] = IImageResults
_IIDMap[IID_IMapLayerInfo3] = IMapLayerInfo3
_IIDMap[IID_ILabelClassDescription] = ILabelClassDescription
_IIDMap[IID_ILabelClassDescriptions] = ILabelClassDescriptions
_IIDMap[IID_ILabelingDescription] = ILabelingDescription
_IIDMap[IID_ILabelClassDescription2] = ILabelClassDescription2
_IIDMap[IID_IPointLabelPlacementDescription] = IPointLabelPlacementDescription
_IIDMap[IID_ILineLabelPlacementDescription] = ILineLabelPlacementDescription
_IIDMap[IID_IPolygonLabelPlacementDescription] = IPolygonLabelPlacementDescription
_IIDMap[IID_ILayerDrawingDescriptions] = ILayerDrawingDescriptions
_IIDMap[IID_IMapTableSubtypeInfo] = IMapTableSubtypeInfo
_IIDMap[IID_IMapTableSubtypeInfos] = IMapTableSubtypeInfos
_IIDMap[IID_IServerSymbolOutputOptions] = IServerSymbolOutputOptions
_IIDMap[IID_IMapLayerInfo4] = IMapLayerInfo4
_IIDMap[IID_IDynamicLayerDescription] = IDynamicLayerDescription
_IIDMap[IID_IDataSourceDescription] = IDataSourceDescription
_IIDMap[IID_ITableDataSourceDescription] = ITableDataSourceDescription
_IIDMap[IID_IQueryTableDataSourceDescription] = IQueryTableDataSourceDescription
_IIDMap[IID_IStatisticDescription] = IStatisticDescription
_IIDMap[IID_IStatisticDescriptions] = IStatisticDescriptions
_IIDMap[IID_IStatisticsRequest] = IStatisticsRequest
_IIDMap[IID_IDataClassificationDef] = IDataClassificationDef
_IIDMap[IID_IUniqueValuesDef] = IUniqueValuesDef
_IIDMap[IID_IClassBreaksDef] = IClassBreaksDef
_IIDMap[IID_IJoinTableSourceDescription] = IJoinTableSourceDescription
_IIDMap[IID_IMapTableSourceDescription] = IMapTableSourceDescription
_IIDMap[IID_IMapLayerInfo2] = IMapLayerInfo2
_IIDMap[IID_IMapServerInfo] = IMapServerInfo
_IIDMap[IID_IMapServerInfo2] = IMapServerInfo2
_IIDMap[IID_IMapDescription3] = IMapDescription3
_IIDMap[IID_IPageDescription] = IPageDescription
_IIDMap[IID_IMapServerInit] = IMapServerInit
_IIDMap[IID_IMapServerInit2] = IMapServerInit2
_IIDMap[IID_IMapServerData] = IMapServerData
_IIDMap[IID_ICenterAndScale] = ICenterAndScale
_IIDMap[IID_ICenterAndSize] = ICenterAndSize
_IIDMap[IID_IFeatureExtent] = IFeatureExtent
_IIDMap[IID_IMapExtent] = IMapExtent
_IIDMap[IID_ITiledMapServer] = ITiledMapServer
_IIDMap[IID_ITiledMapServer2] = ITiledMapServer2
_IIDMap[IID_ITiledMapServer3] = ITiledMapServer3
_IIDMap[IID_IFeatureLayerDrawingDescription] = IFeatureLayerDrawingDescription
_IIDMap[IID_IFeatureLayerDrawingDescription2] = IFeatureLayerDrawingDescription2
_IIDMap[IID_ILayerDrawingDescriptionFactory] = ILayerDrawingDescriptionFactory
_IIDMap[IID_IRasterLayerDrawingDescription] = IRasterLayerDrawingDescription
_IIDMap[IID_IServerLayerExtension] = IServerLayerExtension
_IIDMap[IID_IMapServerGeoTransformation] = IMapServerGeoTransformation
_IIDMap[IID_IMapTableInfo2] = IMapTableInfo2
_IIDMap[IID_IStandaloneTableInfos] = IStandaloneTableInfos
_IIDMap[IID_IStandaloneTableDescriptions] = IStandaloneTableDescriptions
_IIDMap[IID_IMapServerInfo3] = IMapServerInfo3
_IIDMap[IID_IMapServerInfo4] = IMapServerInfo4
_IIDMap[IID_IMapServerTimeInfo] = IMapServerTimeInfo
_IIDMap[IID_IMapServerTimeInfo2] = IMapServerTimeInfo2
_IIDMap[IID_IRelatedRecordGroup] = IRelatedRecordGroup
_IIDMap[IID_IRelatedRecordGroups] = IRelatedRecordGroups
_IIDMap[IID_IRelatedRecordSet] = IRelatedRecordSet
_IIDMap[IID_IServiceLayerImageFormat] = IServiceLayerImageFormat
_IIDMap[IID_IMapServerDataAccess] = IMapServerDataAccess
_IIDMap[IID_IMapTableTimeInfo] = IMapTableTimeInfo
_IIDMap[IID_IMapTableTimeDescription] = IMapTableTimeDescription
_IIDMap[IID_IMapTimeDescription] = IMapTimeDescription
_IIDMap[IID_IMapTimeDescription2] = IMapTimeDescription2
_IIDMap[IID_IDynamicMapTableDescription] = IDynamicMapTableDescription
_IIDMap[IID_IRasterDataSourceDescription] = IRasterDataSourceDescription
_IIDMap[IID_IRelateInfo2] = IRelateInfo2
_IIDMap[IID_IMapTableInfo3] = IMapTableInfo3
_IIDMap[IID_IMapServerObjectLANProxy] = IMapServerObjectLANProxy
_IIDMap[IID_IMapServerProxyImpl] = IMapServerProxyImpl
_IIDMap[IID_IMapServerSublayer] = IMapServerSublayer
_IIDMap[IID_IMapServerLayer] = IMapServerLayer
_IIDMap[IID_IMapServerSublayer2] = IMapServerSublayer2
_IIDMap[IID_IMapServerGroupLayer] = IMapServerGroupLayer
_IIDMap[IID_IMapServerRESTLayer] = IMapServerRESTLayer
_IIDMap[IID_IWMTSLayer] = IWMTSLayer
_IIDMap[IID_ITinRenderer] = ITinRenderer
_IIDMap[IID_ITinIllumination] = ITinIllumination
_IIDMap[IID_ITinSingleSymbolRenderer] = ITinSingleSymbolRenderer
_IIDMap[IID_ITinContourRenderer] = ITinContourRenderer
_IIDMap[IID_ITinColorRampRenderer] = ITinColorRampRenderer
_IIDMap[IID_ITinUniqueValueRenderer] = ITinUniqueValueRenderer
_IIDMap[IID_ITerrainRenderer] = ITerrainRenderer
_IIDMap[IID_ITerrainRenderer2] = ITerrainRenderer2
_IIDMap[IID_IDatasetRenderer] = IDatasetRenderer
_IIDMap[IID_IMultiResolutionRenderer] = IMultiResolutionRenderer
_IIDMap[IID_ITerrainAttributeRenderer] = ITerrainAttributeRenderer
_IIDMap[IID_ILasAttributeRenderer] = ILasAttributeRenderer
_IIDMap[IID_ITinLayer] = ITinLayer
_IIDMap[IID_ITinLayer2] = ITinLayer2
_IIDMap[IID_ITinIdentifyObj] = ITinIdentifyObj
_IIDMap[IID_ITinIdentifyObj2] = ITinIdentifyObj2
_IIDMap[IID_ITerrainLayer] = ITerrainLayer
_IIDMap[IID_ITerrainLayer2] = ITerrainLayer2
_IIDMap[IID_ILasDatasetLayer] = ILasDatasetLayer
_IIDMap[IID_ICadLayer] = ICadLayer
_IIDMap[IID_ICad3DRenderMode] = ICad3DRenderMode
_IIDMap[IID_ICadIdentifyObj2] = ICadIdentifyObj2
_IIDMap[IID_IFeatureLayerExtendedDefinition] = IFeatureLayerExtendedDefinition
_IIDMap[IID_IACLayer] = IACLayer
_IIDMap[IID_IACMap] = IACMap
_IIDMap[IID_IACSymbol] = IACSymbol
_IIDMap[IID_IACLayer2] = IACLayer2
_IIDMap[IID_IACAxl] = IACAxl
_IIDMap[IID_IACConnector] = IACConnector
_IIDMap[IID_IACMapAdmin] = IACMapAdmin
_IIDMap[IID_IACLayerAdmin] = IACLayerAdmin
_IIDMap[IID_IACFeatureLayer] = IACFeatureLayer
_IIDMap[IID_IACFeatureLayerAdmin] = IACFeatureLayerAdmin
_IIDMap[IID_IACImageLayerAdmin] = IACImageLayerAdmin
_IIDMap[IID_IACAcetateLayer] = IACAcetateLayer
_IIDMap[IID_IACAcetateLayerAdmin] = IACAcetateLayerAdmin
_IIDMap[IID_IACSimpleRenderer] = IACSimpleRenderer
_IIDMap[IID_IACGroupRenderer] = IACGroupRenderer
_IIDMap[IID_IACScaleDependentRenderer] = IACScaleDependentRenderer
_IIDMap[IID_IACValueMapRenderer] = IACValueMapRenderer
_IIDMap[IID_IACLineLabelPosition] = IACLineLabelPosition
_IIDMap[IID_IACLabelRenderer] = IACLabelRenderer
_IIDMap[IID_IACSimpleLineSymbol] = IACSimpleLineSymbol
_IIDMap[IID_IACHashLineSymbol] = IACHashLineSymbol
_IIDMap[IID_IACSimplePolygonSymbol] = IACSimplePolygonSymbol
_IIDMap[IID_IACSimpleFillSymbol] = IACSimpleFillSymbol
_IIDMap[IID_IACRasterFillSymbol] = IACRasterFillSymbol
_IIDMap[IID_IACGradientFillSymbol] = IACGradientFillSymbol
_IIDMap[IID_IACSimpleMarkerSymbol] = IACSimpleMarkerSymbol
_IIDMap[IID_IACTrueTypeMarkerSymbol] = IACTrueTypeMarkerSymbol
_IIDMap[IID_IACRasterMarkerSymbol] = IACRasterMarkerSymbol
_IIDMap[IID_IACCalloutMarkerSymbol] = IACCalloutMarkerSymbol
_IIDMap[IID_IACRasterShieldSymbol] = IACRasterShieldSymbol
_IIDMap[IID_IACTextSymbol] = IACTextSymbol
_IIDMap[IID_IACTextMarkerSymbol] = IACTextMarkerSymbol
_IIDMap[IID_IACShieldSymbol] = IACShieldSymbol
_IIDMap[IID_IIMSSubLayer] = IIMSSubLayer
_IIDMap[IID_IIMSMapLayer] = IIMSMapLayer
_IIDMap[IID_IIMSSymbolImporter] = IIMSSymbolImporter
_IIDMap[IID_IIMSGlobeSubServiceDescription] = IIMSGlobeSubServiceDescription
_IIDMap[IID_IIMSGlobeXMLNode] = IIMSGlobeXMLNode
_IIDMap[IID_IIMSGlobeXMLParser] = IIMSGlobeXMLParser
_IIDMap[IID_IIMSGlobeConnection] = IIMSGlobeConnection
_IIDMap[IID_IRealTimeFeed] = IRealTimeFeed
_IIDMap[IID_IPositionTrails] = IPositionTrails
_IIDMap[IID_IRealTimeLog] = IRealTimeLog
_IIDMap[IID_IRealTimeDestination] = IRealTimeDestination
_IIDMap[IID_IRealTimeFeedSnap] = IRealTimeFeedSnap
_IIDMap[IID_IGpsDisplayProperties] = IGpsDisplayProperties
_IIDMap[IID_IGpsConnection] = IGpsConnection
_IIDMap[IID_IGpsFeed] = IGpsFeed
_IIDMap[IID_IRealTimeFeedEvents] = IRealTimeFeedEvents
_IIDMap[IID_IRealTimeFeedSimulator] = IRealTimeFeedSimulator
_IIDMap[IID_IRealTimeFeedManagerEvents] = IRealTimeFeedManagerEvents
_IIDMap[IID_IMobileLayerInfo] = IMobileLayerInfo
_IIDMap[IID_IMobileLayerInfos] = IMobileLayerInfos
_IIDMap[IID_IMobileMapInfo] = IMobileMapInfo
_IIDMap[IID_IWMSServer] = IWMSServer
_IIDMap[IID_IWCSServer] = IWCSServer
_IIDMap[IID_IWMSLayer] = IWMSLayer
_IIDMap[IID_IWMSGroupLayer] = IWMSGroupLayer
_IIDMap[IID_IWMSMapLayer] = IWMSMapLayer
_IIDMap[IID_IWMSIdentifyObject] = IWMSIdentifyObject
_IIDMap[IID_IWMSLayer2] = IWMSLayer2
_IIDMap[IID_IEnumLocatedNetworkElement] = IEnumLocatedNetworkElement
_IIDMap[IID_INetworkLayer] = INetworkLayer
_IIDMap[IID_INetworkRenderer] = INetworkRenderer
_IIDMap[IID_ILocatedNetworkTrafficValue] = ILocatedNetworkTrafficValue
_IIDMap[IID_INetworkRendererCollection] = INetworkRendererCollection
_IIDMap[IID_INetworkIdentifyObj] = INetworkIdentifyObj
_IIDMap[IID_INetworkLayerSymbology] = INetworkLayerSymbology
_IIDMap[IID_ISimpleNetworkRenderer] = ISimpleNetworkRenderer
_IIDMap[IID_INetworkTrafficRenderer] = INetworkTrafficRenderer
_IIDMap[IID_INetworkEdgeRenderer] = INetworkEdgeRenderer
_IIDMap[IID_INetworkEdgeRenderer2] = INetworkEdgeRenderer2
_IIDMap[IID_INetworkSourceRenderer] = INetworkSourceRenderer
_IIDMap[IID_IRepresentationRenderer] = IRepresentationRenderer
_IIDMap[IID_IRepresentationLegendClass] = IRepresentationLegendClass
_IIDMap[IID_IDataGraphBase] = IDataGraphBase
_IIDMap[IID_IDataGraphTPenProperties] = IDataGraphTPenProperties
_IIDMap[IID_ISeriesProperties] = ISeriesProperties
_IIDMap[IID_IDataGraphTGeneralProperties] = IDataGraphTGeneralProperties
_IIDMap[IID_IDataGraphTLegendProperties] = IDataGraphTLegendProperties
_IIDMap[IID_IDataGraphTAxisProperties] = IDataGraphTAxisProperties
_IIDMap[IID_IDataGraphT] = IDataGraphT
_IIDMap[IID_IDataGraphCollectionEvents] = IDataGraphCollectionEvents
_IIDMap[IID_IDataGraphTEvents] = IDataGraphTEvents
_IIDMap[IID_IDataGraphCollection] = IDataGraphCollection
_IIDMap[IID_IDataGraphTSymbolProperties] = IDataGraphTSymbolProperties
_IIDMap[IID_IBarSeriesProperties] = IBarSeriesProperties
_IIDMap[IID_IPointSeriesProperties] = IPointSeriesProperties
_IIDMap[IID_IHistogramSeriesProperties] = IHistogramSeriesProperties
_IIDMap[IID_IBoxPlotSeriesProperties] = IBoxPlotSeriesProperties
_IIDMap[IID_IPieSeriesProperties] = IPieSeriesProperties
_IIDMap[IID_IAreaSeriesProperties] = IAreaSeriesProperties
_IIDMap[IID_ILineSeriesProperties] = ILineSeriesProperties
_IIDMap[IID_IFunctionSeriesProperties] = IFunctionSeriesProperties
_IIDMap[IID_IBubbleSeriesProperties] = IBubbleSeriesProperties
_IIDMap[IID_IPolarSeriesProperties] = IPolarSeriesProperties
_IIDMap[IID_IDataSortSeriesProperties] = IDataSortSeriesProperties
_IIDMap[IID_IDataGroupSeriesProperties] = IDataGroupSeriesProperties
_IIDMap[IID_IScatterPlotMatrixSeriesProperties] = IScatterPlotMatrixSeriesProperties
_IIDMap[IID_IDataGraphTPrivate] = IDataGraphTPrivate
_IIDMap[IID_IDataGraphTElement] = IDataGraphTElement
_IIDMap[IID_IParameterInfo] = IParameterInfo
_IIDMap[IID_ICadastralFabricLayer] = ICadastralFabricLayer
_IIDMap[IID_ICadastralFabricParcelLayer] = ICadastralFabricParcelLayer
_IIDMap[IID_ICFDataSourcePageExtension] = ICFDataSourcePageExtension
_IIDMap[IID_ICadastralFabricLayerEvents] = ICadastralFabricLayerEvents
_IIDMap[IID_ICadastralFabricSelection] = ICadastralFabricSelection
_IIDMap[IID_ICadastralFabricSubLayer] = ICadastralFabricSubLayer
_IIDMap[IID_ICadastralFabricSubLayer2] = ICadastralFabricSubLayer2
_IIDMap[IID_IDynamicLayer] = IDynamicLayer
_IIDMap[IID_IDynamicLayer2] = IDynamicLayer2
_IIDMap[IID_IDynamicHit] = IDynamicHit
_IIDMap[IID_IGeoImageDescription] = IGeoImageDescription
_IIDMap[IID_IAISRequest] = IAISRequest
_IIDMap[IID_IImageServer] = IImageServer
_IIDMap[IID_IImageServer2] = IImageServer2
_IIDMap[IID_IImageServerDownloadResult] = IImageServerDownloadResult
_IIDMap[IID_IImageServerDownloadResults] = IImageServerDownloadResults
_IIDMap[IID_IMosaicRule] = IMosaicRule
_IIDMap[IID_IImageServerIdentifyResult] = IImageServerIdentifyResult
_IIDMap[IID_IRenderingRule] = IRenderingRule
_IIDMap[IID_IImageServer3] = IImageServer3
_IIDMap[IID_ITiledImageServer] = ITiledImageServer
_IIDMap[IID_IPrivateServerObjectLANProxy] = IPrivateServerObjectLANProxy
_IIDMap[IID_IImageServerObjectLANProxy] = IImageServerObjectLANProxy
_IIDMap[IID_IImageServerProxyImpl] = IImageServerProxyImpl
_IIDMap[IID_IImageServerIdentifyResults] = IImageServerIdentifyResults
_IIDMap[IID_IImageServerEditResult] = IImageServerEditResult
_IIDMap[IID_IImageServerEditResults] = IImageServerEditResults
_IIDMap[IID_IImageServerMeasureResult] = IImageServerMeasureResult
_IIDMap[IID_IRasterFunctionInfo] = IRasterFunctionInfo
_IIDMap[IID_IRasterFunctionInfos] = IRasterFunctionInfos
_IIDMap[IID_IRasterTypeInfo] = IRasterTypeInfo
_IIDMap[IID_IRasterTypeInfos] = IRasterTypeInfos
_IIDMap[IID_IImageView] = IImageView
_IIDMap[IID_IImageServiceInfo2] = IImageServiceInfo2
_IIDMap[IID_IImageServiceInfo3] = IImageServiceInfo3
_IIDMap[IID_IImageQueryFilter] = IImageQueryFilter
_IIDMap[IID_IGeoImageDescription2] = IGeoImageDescription2
_IIDMap[IID_IGeoImageDescription3] = IGeoImageDescription3
_IIDMap[IID_IRasterItemDescription] = IRasterItemDescription
_IIDMap[IID_IRasterItemDescriptions] = IRasterItemDescriptions
_IIDMap[IID_IImageServer4] = IImageServer4
_IIDMap[IID_IImageServerInit] = IImageServerInit
_IIDMap[IID_IImageServerInit2] = IImageServerInit2
_IIDMap[IID_IImageServerInit3] = IImageServerInit3
_IIDMap[IID_IImageServerObjects] = IImageServerObjects
_IIDMap[IID_IPluginImageLayer] = IPluginImageLayer
_IIDMap[IID_IMosaicLODInfoHelper] = IMosaicLODInfoHelper
_IIDMap[IID_ISimpleMapImage] = ISimpleMapImage
_IIDMap[IID_IImageServerIdentifyResultEdit] = IImageServerIdentifyResultEdit
_IIDMap[IID_IImageCooker] = IImageCooker
_IIDMap[IID_IImageServerName] = IImageServerName
_IIDMap[IID_IImageServerLayer2] = IImageServerLayer2
_IIDMap[IID_IImageServerLayer3] = IImageServerLayer3
_IIDMap[IID_IISLFootprintDisplayProps] = IISLFootprintDisplayProps
_IIDMap[IID_IDataObjectEx] = IDataObjectEx
_IIDMap[IID_IDataObjectArray] = IDataObjectArray
_IIDMap[IID_IDataObjects] = IDataObjects
_IIDMap[IID_IPropertyInfo] = IPropertyInfo
_IIDMap[IID_IPropertyInfos] = IPropertyInfos
_IIDMap[IID_ITemplateInfo] = ITemplateInfo
_IIDMap[IID_ITemplateInfos] = ITemplateInfos
_IIDMap[IID_IDataObjectType] = IDataObjectType
_IIDMap[IID_IDataObjectTypes] = IDataObjectTypes
_IIDMap[IID_IDataObjectTable] = IDataObjectTable
_IIDMap[IID_IDataObjectTables] = IDataObjectTables
_IIDMap[IID_IDomainInfo] = IDomainInfo
_IIDMap[IID_IGraphicFeature] = IGraphicFeature
_IIDMap[IID_IGraphicFeatures] = IGraphicFeatures
_IIDMap[IID_IGraphicFeatureLayer] = IGraphicFeatureLayer
_IIDMap[IID_IGraphicFeatureLayers] = IGraphicFeatureLayers
_IIDMap[IID_IGFSTableDescription] = IGFSTableDescription
_IIDMap[IID_IGFSTableDescriptions] = IGFSTableDescriptions
_IIDMap[IID_IGFSReplicaDescription] = IGFSReplicaDescription
_IIDMap[IID_IGFLayerTableDataMapping] = IGFLayerTableDataMapping
_IIDMap[IID_IGFLayerTableDataMappings] = IGFLayerTableDataMappings
_IIDMap[IID_IDataObjectGroup] = IDataObjectGroup
_IIDMap[IID_IDataObjectGroupArray] = IDataObjectGroupArray
_IIDMap[IID_IDataObjectGroups] = IDataObjectGroups
_IIDMap[IID_ITableEdit] = ITableEdit
_IIDMap[IID_ITableEdits] = ITableEdits
_IIDMap[IID_IEditResult] = IEditResult
_IIDMap[IID_IEditResults] = IEditResults
_IIDMap[IID_ITableEditResult] = ITableEditResult
_IIDMap[IID_ITableEditResults] = ITableEditResults
_IIDMap[IID_IServiceDataOptions] = IServiceDataOptions
_IIDMap[IID_IServiceData] = IServiceData
_IIDMap[IID_IGraphicFeatureServer] = IGraphicFeatureServer
_IIDMap[IID_IGraphicFeatureServerReplication] = IGraphicFeatureServerReplication
_IIDMap[IID_ITableIdentity] = ITableIdentity
_IIDMap[IID_ITableIdentities] = ITableIdentities
_IIDMap[IID_IFeatureServerInfo] = IFeatureServerInfo
_IIDMap[IID_IDataObjectTable2] = IDataObjectTable2
_IIDMap[IID_IGraphicFeatureLayer2] = IGraphicFeatureLayer2
_IIDMap[IID_IGraphicFeatureServer2] = IGraphicFeatureServer2
_IIDMap[IID_IMosaicSubLayer] = IMosaicSubLayer
_IIDMap[IID_IJPIPServer] = IJPIPServer
_IIDMap[IID_ILayerTablesAndDataMappings] = ILayerTablesAndDataMappings
_IIDMap[IID_IGFSReplicationAgent] = IGFSReplicationAgent
_IIDMap[IID_IDataSourceHelperMap] = IDataSourceHelperMap
_IIDMap[IID_IDataSourceHelperLayer] = IDataSourceHelperLayer
_IIDMap[IID_IDataSourceHelperStandaloneTable] = IDataSourceHelperStandaloneTable
_IIDMap[IID_IMSDHelper] = IMSDHelper
_IIDMap[IID_IMSDHelper2] = IMSDHelper2
_IIDMap[IID_IFeatureServiceEditExtension] = IFeatureServiceEditExtension
_IIDMap[IID_IFeatureServiceLayerEditExtension] = IFeatureServiceLayerEditExtension
_IIDMap[IID_IMapSurroundFrame] = IMapSurroundFrame
_IIDMap[IID_IMapSurround] = IMapSurround
_IIDMap[IID_IEnumMapSurround] = IEnumMapSurround
_IIDMap[IID_ILegend] = ILegend
_IIDMap[IID_IScaleBar] = IScaleBar
_IIDMap[IID_IMapInset] = IMapInset
_IIDMap[IID_IScaleText] = IScaleText
_IIDMap[IID_IScaleText2] = IScaleText2
_IIDMap[IID_INorthArrow] = INorthArrow
_IIDMap[IID_INorthArrow2] = INorthArrow2
_IIDMap[IID_IOverview] = IOverview
_IIDMap[IID_IOverview2] = IOverview2
_IIDMap[IID_IMapDescriptor] = IMapDescriptor
_IIDMap[IID_IMapServerLayout] = IMapServerLayout
_IIDMap[IID_IMap] = IMap
_IIDMap[IID_IAnnotateMap] = IAnnotateMap
_IIDMap[IID_IExportInfoGenerator] = IExportInfoGenerator
_IIDMap[IID_IAnnotateMap2] = IAnnotateMap2
_IIDMap[IID_ILabelCache] = ILabelCache
_IIDMap[IID_IStandardAnnotateMap] = IStandardAnnotateMap
_IIDMap[IID_IActiveView] = IActiveView
_IIDMap[IID_IActiveViewEvents] = IActiveViewEvents
_IIDMap[IID_IConvertLabelsToAnnotation] = IConvertLabelsToAnnotation
_IIDMap[IID_IBasemapLayer] = IBasemapLayer
_IIDMap[IID_IMapSurroundFactory] = IMapSurroundFactory
_IIDMap[IID_IMapEvents3] = IMapEvents3
_IIDMap[IID_IMapAutoExtentOptions] = IMapAutoExtentOptions
_IIDMap[IID_IMaps2] = IMaps2
_IIDMap[IID_IMaps] = IMaps
_IIDMap[IID_IEnumMap] = IEnumMap
_IIDMap[IID_ISpatialBookmark] = ISpatialBookmark
_IIDMap[IID_IPushPin] = IPushPin
_IIDMap[IID_IAOIBookmark] = IAOIBookmark
_IIDMap[IID_IFeatureBookmark] = IFeatureBookmark
_IIDMap[IID_IEnumSpatialBookmark] = IEnumSpatialBookmark
_IIDMap[IID_IMapBookmarks] = IMapBookmarks
_IIDMap[IID_IMapBookmarks2] = IMapBookmarks2
_IIDMap[IID_ILegend2] = ILegend2
_IIDMap[IID_ILegend3] = ILegend3
_IIDMap[IID_IFeatureFindData] = IFeatureFindData
_IIDMap[IID_IMXFeatureFindData] = IMXFeatureFindData
_IIDMap[IID_IMapIdentifyObject] = IMapIdentifyObject
_IIDMap[IID_IRotateOperation] = IRotateOperation
_IIDMap[IID_IMapCooker] = IMapCooker
_IIDMap[IID_IMapCooker2] = IMapCooker2
_IIDMap[IID_IPageLayout] = IPageLayout
_IIDMap[IID_IMxdContents] = IMxdContents
_IIDMap[IID_IPrintAndExport] = IPrintAndExport
_IIDMap[IID_IPageLayoutSnap] = IPageLayoutSnap
_IIDMap[IID_IPageLayout2] = IPageLayout2
_IIDMap[IID_IPageLayout3] = IPageLayout3
_IIDMap[IID_IMapDocument] = IMapDocument
_IIDMap[IID_IMxdServer] = IMxdServer
_IIDMap[IID_IMxdServerObjects] = IMxdServerObjects
_IIDMap[IID_IMapServerObjects] = IMapServerObjects
_IIDMap[IID_IMapServerObjects2] = IMapServerObjects2
_IIDMap[IID_IMapReader] = IMapReader
_IIDMap[IID_IMapServerObjects3] = IMapServerObjects3
_IIDMap[IID_IRealTimeFeedManager] = IRealTimeFeedManager
_IIDMap[IID_IMobileSync] = IMobileSync
_IIDMap[IID_IDynamicCacheLayerManager] = IDynamicCacheLayerManager
_IIDMap[IID_IDynamicCacheLayerManager2] = IDynamicCacheLayerManager2
_IIDMap[IID_IDataSourceHelperMapDocument] = IDataSourceHelperMapDocument
_IIDMap[IID_IMapFrame] = IMapFrame
_IIDMap[IID_ILocatorRectangle] = ILocatorRectangle
_IIDMap[IID_ILocatorRectangle2] = ILocatorRectangle2
_IIDMap[IID_IMapGrid] = IMapGrid
_IIDMap[IID_IGridLabel] = IGridLabel
_IIDMap[IID_IReferenceSystem] = IReferenceSystem
_IIDMap[IID_IGridLabel2] = IGridLabel2
_IIDMap[IID_IGraticule] = IGraticule
_IIDMap[IID_IIndexGrid] = IIndexGrid
_IIDMap[IID_ICustomOverlayGrid] = ICustomOverlayGrid
_IIDMap[IID_IMapGrids] = IMapGrids
_IIDMap[IID_IMapServerIdentifyResults] = IMapServerIdentifyResults
_IIDMap[IID_IMapServer] = IMapServer
_IIDMap[IID_IMapServer2] = IMapServer2
_IIDMap[IID_IKmlConversion] = IKmlConversion
_IIDMap[IID_IMapServer3] = IMapServer3
_IIDMap[IID_IMapServer4] = IMapServer4
_IIDMap[IID_IMobileSync2] = IMobileSync2
_IIDMap[IID_IGraphicFeatureServerInit] = IGraphicFeatureServerInit
_IIDMap[IID_ISDGenerator] = ISDGenerator
_IIDMap[IID_IMapServerIdentifyResult] = IMapServerIdentifyResult
_IIDMap[IID_IMapServerIdentifyObject] = IMapServerIdentifyObject
_IIDMap[IID_IMapServerRelationships] = IMapServerRelationships
_IIDMap[IID_IMapServerRow] = IMapServerRow
_IIDMap[IID_IMapServerRows] = IMapServerRows
_IIDMap[IID_IMapServerRelationship] = IMapServerRelationship
_IIDMap[IID_IMapServerRow2] = IMapServerRow2
_IIDMap[IID_IMapServerIdentifyResult2] = IMapServerIdentifyResult2


# CLSIDs
CLSID_RasterRendererMakerDefault = uuid.UUID('74126b8c-c743-11d4-b290-00508bcdc7c8')
CLSID_RasterUniqueValueRenderer = uuid.UUID('0842b595-4f2f-11d2-9f43-00c04f8ece3d')
CLSID_RasterClassifyColorRampRenderer = uuid.UUID('ce8b2f44-a027-11d2-aae7-00c04fa33416')
CLSID_RasterRGBRenderer = uuid.UUID('577f1870-7037-11d2-9f29-00c04f8ed1d7')
CLSID_RasterStretchColorRampRenderer = uuid.UUID('a301a3b2-74d7-11d2-9f29-00c04f8ed1d7')
CLSID_RasterColormapRenderer = uuid.UUID('3b8283fa-1bd4-4212-b385-19e77b9e0d3b')
CLSID_RasterDiscreteColorRenderer = uuid.UUID('ac874573-d778-4421-b9c6-14557d8bd692')
CLSID_RasterCatalogRendererPickerDefault = uuid.UUID('f8cb579b-108a-4493-8915-26a0d039d549')
CLSID_RenderedRaster = uuid.UUID('f7ddac75-9042-4b64-a555-95a1fe85435c')
CLSID_LegendGroups = uuid.UUID('93942eb3-2cd2-4bfe-9937-380ec7d06e1f')
CLSID_LegendClasses = uuid.UUID('3507992d-7701-4db7-9e4e-46f99675cb6a')
CLSID_LegendClass = uuid.UUID('167c5ea3-af20-11d1-8817-080009ec732a')
CLSID_LegendClassFormat = uuid.UUID('7a3f91e6-b9e3-11d1-8756-0000f8751720')
CLSID_LegendGroup = uuid.UUID('167c5ea2-af20-11d1-8817-080009ec732a')
CLSID_AreaPatch = uuid.UUID('2066267e-e3b8-11d2-b868-00600802e603')
CLSID_LinePatch = uuid.UUID('2066267f-e3b8-11d2-b868-00600802e603')
CLSID_FieldInfo = uuid.UUID('a2baae2d-969b-11d2-ae77-080009ec732a')
CLSID_FrameElement = uuid.UUID('e01ba2c5-24b2-11d3-b8aa-00600802e603')
CLSID_PictureElement = uuid.UUID('827b9a92-c067-11d2-9f22-00c04f6bc8dd')
CLSID_LayerEventsHelper = uuid.UUID('d9af98bd-916f-11d3-9f50-00c04f6bc979')
CLSID_DummyLayer = uuid.UUID('238ccd19-7fbc-11d2-87dc-0000f8751720')
CLSID_DummyGraduatedMarkerLayer = uuid.UUID('238ccd1a-7fbc-11d2-87dc-0000f8751720')
CLSID_LayerFactoryHelper = uuid.UUID('cc527851-cee4-11d5-a9e6-00104bb6fc1c')
CLSID_InkGraphic = uuid.UUID('f42249e8-6280-4ce2-a779-45691b68274a')
CLSID_LineElement = uuid.UUID('8ab7fbe1-d871-11d0-8389-080009b996cc')
CLSID_MarkerElement = uuid.UUID('530fd712-ef0c-11d0-83a0-080009b996cc')
CLSID_RectangleElement = uuid.UUID('3a9767c2-f253-11d0-83a4-080009b996cc')
CLSID_PolygonElement = uuid.UUID('3a9767c7-f253-11d0-83a4-080009b996cc')
CLSID_TextElement = uuid.UUID('204034d3-f6ea-11d0-83ad-080009b996cc')
CLSID_ParagraphTextElement = uuid.UUID('c84598b1-c4be-4203-9132-ada2be57f30c')
CLSID_CircleElement = uuid.UUID('974111db-c5d2-11d2-9f28-00c04f6bc8dd')
CLSID_EllipseElement = uuid.UUID('4eda1081-12ea-11d3-9f8f-00c04f6bc8dd')
CLSID_GroupElement = uuid.UUID('803577d2-f8a3-11d0-83af-080009b996cc')
CLSID_MultiPatchElement = uuid.UUID('e91ae5c9-2c16-11d4-80e2-00c04fa0adf8')
CLSID_ElementCollection = uuid.UUID('ce8f3972-e9be-11d1-a232-080009b6f22b')
CLSID_SymbolBorder = uuid.UUID('a5d0f017-62dd-11d2-87be-0000f8751720')
CLSID_SymbolBackground = uuid.UUID('1baa33e9-e13b-11d2-b868-00600802e603')
CLSID_SymbolShadow = uuid.UUID('a8861e66-57aa-47d0-aaf8-b288b4fd5240')
CLSID_SimpleElementSelection = uuid.UUID('70a986c0-6b21-4379-af25-181b24f3231b')
CLSID_Text3DElement = uuid.UUID('b9865d0b-eb37-11d4-a116-00508bd60cb9')
CLSID_GraphicElements = uuid.UUID('9d696b29-b311-4f2b-80a9-3b67c289eac6')
CLSID_AnnotationElement = uuid.UUID('c4e39a33-4e4c-4d1e-af0d-febf5b0c8a9f')
CLSID_PMFTitleTextElement = uuid.UUID('1f44be49-3113-4d58-b1ce-c326328569ed')
CLSID_FeatureFindData = uuid.UUID('fb8ff070-5ca5-11d3-9f6c-00c04f6bc886')
CLSID_BarrierCollection = uuid.UUID('01c12b93-a3fb-11d2-a2fe-080009b6f22b')
CLSID_BasicOverposter = uuid.UUID('3141f2fc-38e2-11d1-8809-080009ec732a')
CLSID_BasicOverposterLayerProperties = uuid.UUID('ee535289-41c9-11d1-880a-080009ec732a')
CLSID_LineLabelPosition = uuid.UUID('2442958c-d711-11d2-9f41-00c04f6bc6a5')
CLSID_LineLabelPlacementPriorities = uuid.UUID('261a4377-d9d5-11d2-a806-cc9f870bcd5a')
CLSID_PointPlacementPriorities = uuid.UUID('261a4372-d9d5-11d2-a806-cc9f870bcd5a')
CLSID_BasicOverposterProperties = uuid.UUID('e0c73d56-6c88-498c-b77c-78606e688c97')
CLSID_MaplexDictionaryEntry = uuid.UUID('20664808-fe45-9018-be1f-66eb0dec7321')
CLSID_MaplexDictionary = uuid.UUID('20664808-3de2-1cd1-8a09-08e00dec7321')
CLSID_MaplexDictionaries = uuid.UUID('20664808-56db-bd28-67dc-02e33decf321')
CLSID_MaplexKeyNumberGroup = uuid.UUID('66ddef5d-1ab3-5f31-7bc1-755ddef33d32')
CLSID_MaplexKeyNumberGroups = uuid.UUID('755f3bb8-63fb-e54b-884c-74f3dd2a8a81')
CLSID_MaplexOverposterProperties = uuid.UUID('20664808-a8c2-c1d1-acdc-1708f95c7321')
CLSID_MaplexLabelEngineLayerProperties = uuid.UUID('20664808-0d1c-11d2-a26f-080009b6f22b')
CLSID_MaplexOverposterLayerProperties = uuid.UUID('20664808-41c9-11d1-880a-080009ec732a')
CLSID_MaplexRotationProperties = uuid.UUID('20664808-bba1-ccd2-8967-f453c9ed732a')
CLSID_MaplexLabelStackingProperties = uuid.UUID('20664808-41c9-11d1-840a-08abc9ed731a')
CLSID_MaplexOffsetAlongLineProperties = uuid.UUID('20664808-4fa1-c1d1-8c0a-08a2c9ed531a')
CLSID_MaplexAnnotationPropertiesConverter = uuid.UUID('20664808-9015-bdf1-40af-0ca125a0d2ef')
CLSID_MaplexLabelStyle = uuid.UUID('20664808-cba7-11da-9f3a-00c34f6b26a5')
CLSID_BasicPlacedObject = uuid.UUID('80753ccf-be43-4301-aaa0-60a94824b5fb')
CLSID_AnnotateLayerPropertiesCollection = uuid.UUID('1d5849f3-0d33-11d2-a26f-080009b6f22b')
CLSID_AnnotationVBScriptEngine = uuid.UUID('aa157207-e079-11d2-9f48-00c04f6bc6a5')
CLSID_AnnotationJScriptEngine = uuid.UUID('aa157208-e079-11d2-9f48-00c04f6bc6a5')
CLSID_AnnotationPythonEngine = uuid.UUID('bb6721a2-d81a-45e3-7fef-884db2b2a905')
CLSID_LabelStyle = uuid.UUID('4c90de7b-cb77-11d2-9f34-00c04f6bc6a5')
CLSID_LabelEnvironment = uuid.UUID('76765b96-ce78-11d2-9f36-00c04f6bc6a5')
CLSID_LabelEngineLayerProperties = uuid.UUID('01004145-0d1c-11d2-a26f-080009b6f22b')
CLSID_AnnotationExpressionParser = uuid.UUID('789a75df-041a-439d-b1c2-41403449cf85')
CLSID_HotLinkExpressionProperties = uuid.UUID('1b848b0f-5e87-4948-841a-86201facd925')
CLSID_HotLinkVBScriptEngine = uuid.UUID('55ef0065-fdff-469b-b693-8ebfc56b3b3b')
CLSID_HotLinkJScriptEngine = uuid.UUID('03e82e63-a812-49eb-ad12-4d1e1c7ada7c')
CLSID_HotLinkPythonEngine = uuid.UUID('ff7d30a3-38fa-67d1-780a-bebb61c0e599')
CLSID_HotLinkExpressionParser = uuid.UUID('41f47af0-8d99-4afd-8d3b-177a7a427c4b')
CLSID_ScaleDependentRenderer = uuid.UUID('207c19f5-ed81-11d0-8bba-080009ee4e41')
CLSID_ProportionalSymbolRenderer = uuid.UUID('4eab568e-8f9c-11d2-ab21-00c04fa334b3')
CLSID_BiUniqueValueRenderer = uuid.UUID('b899ccd3-cd1c-11d2-9f25-00c04f6bc709')
CLSID_ChartRenderer = uuid.UUID('4f17939a-c490-11d3-9f7a-00c04f6bc709')
CLSID_CalcRendererValues = uuid.UUID('4b62f73d-0502-11d4-9f7c-00c04f6bc709')
CLSID_DotDensityRenderer = uuid.UUID('9c7776ba-0421-11d4-9f7c-00c04f6bc709')
CLSID_HorizontalLegendItem = uuid.UUID('a9401a47-4649-11d1-880b-080009ec732a')
CLSID_VerticalLegendItem = uuid.UUID('a9401a48-4649-11d1-880b-080009ec732a')
CLSID_HorizontalBarLegendItem = uuid.UUID('2b65d211-c2c7-11d3-92f3-00600802e603')
CLSID_NestedLegendItem = uuid.UUID('2b65d212-c2c7-11d3-92f3-00600802e603')
CLSID_UniqueValueInfo = uuid.UUID('44eb1bfd-49fd-4312-a26c-22006a3120bc')
CLSID_ClassBreakInfo = uuid.UUID('142d87f7-afdb-4068-afd1-4c12ec8e1eaf')
CLSID_UniqueValueInfos = uuid.UUID('13c7fd69-e681-4f23-b1fa-d40684c3b332')
CLSID_ClassBreakInfos = uuid.UUID('dce7f1ac-39a7-45b0-81e9-b3a0f8371b93')
CLSID_FeatureLayer = uuid.UUID('e663a651-8aad-11d0-bec7-00805f7c4268')
CLSID_Hyperlink = uuid.UUID('3036d35e-ede5-11d0-87fe-080009ec732a')
CLSID_FieldInfoSet = uuid.UUID('3e3d4eea-2027-4994-abdd-f56c082d55fd')
CLSID_DisplayExpressionProperties = uuid.UUID('d75c6301-c05a-484c-a7bd-ae82e5e1fc75')
CLSID_FeatureLayerSelectionEvents = uuid.UUID('5f5c8e9c-a04e-45d4-bf82-fc1bded4afb7')
CLSID_GraphicsContainerEvents = uuid.UUID('ace265d5-0ca9-41cb-945e-90655e221fdb')
CLSID_SelectionEnvironment = uuid.UUID('e3875b71-d9f5-11d1-add4-080009ec732a')
CLSID_CompositeGraphicsLayer = uuid.UUID('9646bb83-9512-11d2-a2f6-080009b6f22b')
CLSID_FeatureIDSet = uuid.UUID('d5bb4b88-e0a1-11d2-9f4d-00c04f6bc78e')
CLSID_SimpleRenderer = uuid.UUID('f3435801-5779-11d0-98bf-00805f7ced21')
CLSID_UniqueValueRenderer = uuid.UUID('c3346d29-b2bc-11d1-8817-080009ec732a')
CLSID_ClassBreaksRenderer = uuid.UUID('ae5f7ea2-8b48-11d0-8356-080009b996cc')
CLSID_SimpleIdentifyObject = uuid.UUID('1f3e1db2-d3ae-4c1e-884b-8db2e78e667c')
CLSID_BasicTableHistogram = uuid.UUID('d0ac357f-21af-42d6-8ef5-e5ceadbc6b84')
CLSID_FeatureCache = uuid.UUID('a802ba70-d947-11d1-8484-0000f875b9c6')
CLSID_GraphicsSubLayer = uuid.UUID('d3a9d37d-ec3c-40c7-87b6-7057aeb605f2')
CLSID_TopologyLayer = uuid.UUID('de98bad5-135e-4b36-9653-57b5513fb7b2')
CLSID_FeatureLayerFactory = uuid.UUID('bb4ddf14-f291-45e8-9144-8dc8fb10e2c1')
CLSID_EngineTopologyLayerFactory = uuid.UUID('e8e95a26-4ca0-4c9b-9026-9c3355a3f148')
CLSID_EngineCoverageAnnotationLayerFactory = uuid.UUID('54e3ee9d-ba9e-4318-a219-dc19fda48c36')
CLSID_ExportInfoGenerator = uuid.UUID('da387bb5-5514-41c5-a3e7-3c02ac06b89d')
CLSID_EditTemplate = uuid.UUID('377035b9-34c7-4a40-866d-e596519a1b06')
CLSID_EditTemplateFactory = uuid.UUID('09876368-3969-40f4-bf3a-60805eb29598')
CLSID_EditTemplateManager = uuid.UUID('a0162e85-e170-4b10-a370-cee08d8d4b8c')
CLSID_TimeQueryFilter = uuid.UUID('de39b456-06f8-4eec-9cae-c6f430d8bdff')
CLSID_GroupLayerFactory = uuid.UUID('edad6646-1810-11d1-86ae-0000f8751720')
CLSID_GroupLayer = uuid.UUID('edad6647-1810-11d1-86ae-0000f8751720')
CLSID_CoverageAnnotationLayer = uuid.UUID('0c22a4c9-dafd-11d2-9f46-00c04f6bc78e')
CLSID_DimensionClassExtension = uuid.UUID('48f935e2-da66-11d3-80ce-00c04f601565')
CLSID_DimensionStyle = uuid.UUID('c08e2878-f9ff-11d3-80d3-00c04f601565')
CLSID_DimensionStyles = uuid.UUID('45b2fa28-fa01-11d3-80d3-00c04f601565')
CLSID_DimensionFeature = uuid.UUID('496764fc-e0c9-11d3-80ce-00c04f601565')
CLSID_DimensionGraphic = uuid.UUID('5fe02662-fb61-11d3-80d3-00c04f601565')
CLSID_DimensionClassDescription = uuid.UUID('38c48fe5-bce6-43de-81b4-b7c15bb4ae25')
CLSID_NewDimensionFeedback = uuid.UUID('1fde0e70-0fe9-11d4-80d7-00c04f601565')
CLSID_ModifyDimensionFeedback = uuid.UUID('8923c842-0f36-11d4-80d7-00c04f601565')
CLSID_DimensionShape = uuid.UUID('d27a074a-10ad-11d4-80d7-00c04f601565')
CLSID_DimensionLayer = uuid.UUID('f1e27e32-0ca7-11d4-80d7-00c04f601565')
CLSID_LabelCache = uuid.UUID('9a6f1f6c-b980-4b29-93ae-32617180c38f')
CLSID_AnnotateMap = uuid.UUID('8c439002-14ec-11d2-a27e-080009b6f22b')
CLSID_AnnotateFeature = uuid.UUID('858eb8e4-c2a5-11d2-9f30-00c04f6bc6a5')
CLSID_AnnotateMapProperties = uuid.UUID('8c439001-14ec-11d2-a27e-080009b6f22b')
CLSID_ConvertFDOAnnoToCoverageAnno = uuid.UUID('32716f54-8b17-4960-945c-fed966b032e9')
CLSID_FDOGraphicsLayerFactory = uuid.UUID('34b2ef87-f4ac-11d1-a245-080009b6f22b')
CLSID_AnnotationFeature = uuid.UUID('e3676993-c682-11d2-8a2a-006097aff44e')
CLSID_AnnotationFeatureClassExtension = uuid.UUID('24429589-d711-11d2-9f41-00c04f6bc6a5')
CLSID_FDOGraphicsLayer = uuid.UUID('34b2ef83-f4ac-11d1-a245-080009b6f22b')
CLSID_AnnotationFeatureClassDescription = uuid.UUID('9089abbb-12a7-11d3-9fa1-00c04f6bc626')
CLSID_GraphicsLayerScale = uuid.UUID('85c3dac6-6578-11d3-9fba-00c04f6bc6a5')
CLSID_FDOGraphicsSublayer = uuid.UUID('4aba3851-bc3a-43c2-8fbe-93a65ad91e83')
CLSID_ConvertLabelsToAnnotation = uuid.UUID('12f35a5f-8a3c-472d-fe5a-2de78ea9bbf1')
CLSID_Map = uuid.UUID('e6bdaa76-4d35-11d0-98be-00805f7ced21')
CLSID_MapEvents = uuid.UUID('7fd02e40-706a-11d3-8170-0080c7625171')
CLSID_MapEvents2 = uuid.UUID('cecd552c-54ef-4930-934e-81771a2db5df')
CLSID_MapEvents3 = uuid.UUID('8949e874-da17-436b-a88c-f16ecb4ee1c9')
CLSID_DynamicMapEvents = uuid.UUID('8953e049-9b51-46f6-b7a0-4b0d3ad6258b')
CLSID_ScaleLine = uuid.UUID('6589f140-f7f7-11d2-b872-00600802e603')
CLSID_SteppedScaleLine = uuid.UUID('6589f141-f7f7-11d2-b872-00600802e603')
CLSID_HollowScaleBar = uuid.UUID('6589f143-f7f7-11d2-b872-00600802e603')
CLSID_SingleDivisionScaleBar = uuid.UUID('6589f146-f7f7-11d2-b872-00600802e603')
CLSID_Scalebar = uuid.UUID('7a3f91db-b9e3-11d1-8756-0000f8751720')
CLSID_AlternatingScaleBar = uuid.UUID('6589f147-f7f7-11d2-b872-00600802e603')
CLSID_DoubleAlternatingScaleBar = uuid.UUID('6589f148-f7f7-11d2-b872-00600802e603')
CLSID_ScaleText = uuid.UUID('7a3f91dc-b9e3-11d1-8756-0000f8751720')
CLSID_MarkerNorthArrow = uuid.UUID('7a3f91dd-b9e3-11d1-8756-0000f8751720')
CLSID_Overview = uuid.UUID('7a3f91de-b9e3-11d1-8756-0000f8751720')
CLSID_MapTitle = uuid.UUID('7a3f91df-b9e3-11d1-8756-0000f8751720')
CLSID_MapInset = uuid.UUID('7a3f91e3-b9e3-11d1-8756-0000f8751720')
CLSID_Legend = uuid.UUID('7a3f91e4-b9e3-11d1-8756-0000f8751720')
CLSID_LegendFormat = uuid.UUID('7a3f91e5-b9e3-11d1-8756-0000f8751720')
CLSID_AOIBookmark = uuid.UUID('bbb1ae73-41e3-11d2-ae1e-080009ec732a')
CLSID_FeatureBookmark = uuid.UUID('ec65b35b-4342-11d2-ae22-080009ec732a')
CLSID_FeatureCursorBuffer = uuid.UUID('a2983338-7e7c-11d2-a084-0000f8775bf9')
CLSID_FeatureIndex = uuid.UUID('59f60296-c1fb-11d2-9f23-00c04f6bc886')
CLSID_BasicGeoprocessor = uuid.UUID('4c1fd612-f3a3-11d3-9fde-00c04f6bc78e')
CLSID_InvalidArea = uuid.UUID('a802ba72-d947-11d1-8484-0000f875b9c6')
CLSID_TilesTable = uuid.UUID('2baa0016-13b7-492c-8d9f-53eef13a1fe0')
CLSID_StandaloneTable = uuid.UUID('ee7c5047-e3db-11d3-a096-00c04f6bc626')
CLSID_MapSelection = uuid.UUID('85dcfd05-8e4f-11d4-a697-00508b4a4114')
CLSID_MapCooker = uuid.UUID('ddc47e30-69a3-42a9-a21f-115b1c7edcd3')
CLSID_TrackCancel = uuid.UUID('804ae032-073e-4088-92a5-f24e0d9de958')
CLSID_DynamicDisplay = uuid.UUID('76b0baf7-db84-4f1e-aed9-e9d270f8a2bb')
CLSID_DynamicGlyph = uuid.UUID('2f7e6ecf-e541-49e5-bb1b-5aa1e2be27c1')
CLSID_DynamicGlyphFactory = uuid.UUID('040d961d-3434-4698-aa8d-fcf54bf892b0')
CLSID_ChangeDatabaseVersion = uuid.UUID('0038a3af-0fcb-487a-b3ee-65c0e80d13f0')
CLSID_DocumentInfo = uuid.UUID('5012efc9-6d2c-4f0e-8513-5349010cbce3')
CLSID_BasemapLayer = uuid.UUID('da4122bf-7b07-4158-88b0-19d342bed8ba')
CLSID_BasemapSubLayer = uuid.UUID('7374cd4d-775f-4737-88f4-d09b8d46d2b2')
CLSID_ArrayOfIShader = uuid.UUID('e0bbdbaf-0059-449c-b6f1-edf1353a2c54')
CLSID_RasterShader = uuid.UUID('9a895dac-e565-488e-a5f4-8b395327e2be')
CLSID_RasterDRAShader = uuid.UUID('61607200-1e6f-489e-88ae-bccee89d25c4')
CLSID_ImageInset = uuid.UUID('d4f32594-65b5-45dc-bc6f-b3464b1d8373')
CLSID_MapFrame = uuid.UUID('dd94d770-836d-11d0-87ec-080009ec732a')
CLSID_MapSurroundFrame = uuid.UUID('83ffcae1-edca-11d0-8683-0000f8751720')
CLSID_DMSGridLabel = uuid.UUID('ce41c506-9df9-11d2-aade-000000000000')
CLSID_FormattedGridLabel = uuid.UUID('ce41c507-9df9-11d2-aade-000000000000')
CLSID_MixedFontGridLabel = uuid.UUID('ce41c508-9df9-11d2-aade-000000000000')
CLSID_BackgroundTabStyle = uuid.UUID('ce41c50d-9df9-11d2-aade-000000000000')
CLSID_ContinuousTabStyle = uuid.UUID('ce41c50e-9df9-11d2-aade-000000000000')
CLSID_RoundedTabStyle = uuid.UUID('ac81ecf7-9ee4-11d2-aadf-000000000000')
CLSID_ButtonTabStyle = uuid.UUID('ac81ecf8-9ee4-11d2-aadf-000000000000')
CLSID_SimpleMapGridBorder = uuid.UUID('ac81ecfb-9ee4-11d2-aadf-000000000000')
CLSID_CalibratedMapGridBorder = uuid.UUID('6ca416b0-e160-11d2-9f4e-00c04f6bc78e')
CLSID_Graticule = uuid.UUID('03762c8f-f4d0-11d1-ade8-080009ec732a')
CLSID_MeasuredGrid = uuid.UUID('03762c90-f4d0-11d1-ade8-080009ec732a')
CLSID_IndexGrid = uuid.UUID('03762c91-f4d0-11d1-ade8-080009ec732a')
CLSID_CustomOverlayGrid = uuid.UUID('ff501c8a-d74b-11d2-9f43-00c04f6bc78e')
CLSID_LocatorRectangle = uuid.UUID('83ffcae2-edca-11d0-8683-0000f8751720')
CLSID_MgrsGrid = uuid.UUID('35f4d526-895d-4f85-b97f-1a3b84c629ad')
CLSID_CornerGridLabel = uuid.UUID('fd52b61a-71cd-4108-a916-f818969404ea')
CLSID_PrintAndExport = uuid.UUID('569bb216-72a2-4278-92b4-17106ec80dcc')
CLSID_PageLayout = uuid.UUID('dd94d76e-836d-11d0-87ec-080009ec732a')
CLSID_Page = uuid.UUID('dd94d76f-836d-11d0-87ec-080009ec732a')
CLSID_RulerSettings = uuid.UUID('31e081ac-cb02-11d1-876c-0000f8751720')
CLSID_SnapGrid = uuid.UUID('31e081ad-cb02-11d1-876c-0000f8751720')
CLSID_SnapGuides = uuid.UUID('31e081ae-cb02-11d1-876c-0000f8751720')
CLSID_GraphicSnapEnvironment = uuid.UUID('56fd87f7-ddce-11d1-8778-0000f8751720')
CLSID_GridSnap = uuid.UUID('fc27fab0-db88-11d1-8778-0000f8751720')
CLSID_GuideSnap = uuid.UUID('fc27fab1-db88-11d1-8778-0000f8751720')
CLSID_MarginSnap = uuid.UUID('fc27fab2-db88-11d1-8778-0000f8751720')
CLSID_RulerSnap = uuid.UUID('fc27fab3-db88-11d1-8778-0000f8751720')
CLSID_MapDocument = uuid.UUID('2fe5e68e-3da5-4bda-baf1-103c55115a1c')
CLSID_LayerFile = uuid.UUID('ddc2346d-62d0-4ea3-ab42-64a9557157c6')
CLSID_RasterDefaultsEnv = uuid.UUID('eb0d0573-c109-11d2-9f43-00c04f8ed21a')
CLSID_RasterFormatInfo = uuid.UUID('4d6b1fef-c144-11d2-9f43-00c04f8ed21a')
CLSID_RasterLayer = uuid.UUID('d02371c9-35f7-11d2-b1f2-00c04f8edeff')
CLSID_WCSLayer = uuid.UUID('239c10f1-6e2a-4250-b43a-7920db1cdc88')
CLSID_RasterCatalogLayer = uuid.UUID('1493c960-f620-11d3-8d6c-00c04f5b87b2')
CLSID_GdbRasterCatalogLayer = uuid.UUID('297d796d-384e-48f8-a189-e0347281ac7d')
CLSID_ColorSymbol = uuid.UUID('b81f9ae0-026e-11d3-9c1f-00c04f5aa6ed')
CLSID_ColorRampSymbol = uuid.UUID('40987040-204c-11d3-a3f2-0004ac1b1d86')
CLSID_RasterRGBSymbol = uuid.UUID('99dccb66-2e09-11d3-a626-0008c7bf3347')
CLSID_SimpleRasterIdentifyObj = uuid.UUID('5ffad6db-9cc2-45bc-8c88-598edf5e55c4')
CLSID_RasterIdentifyObj = uuid.UUID('61704b78-de2b-11d2-9fce-00c04f799f23')
CLSID_GeoReferenceEvents = uuid.UUID('3dec7f54-1ea3-43af-9bf0-0ea1fad10788')
CLSID_RasterLayerExport = uuid.UUID('8dcf4198-4c40-46f3-8c60-9ae25aec032f')
CLSID_RasterExporter = uuid.UUID('61da7305-731c-4b10-96d6-7bb036d1190e')
CLSID_RasterThumbnailBuilder = uuid.UUID('41431f16-46fe-448e-a049-ba48619d1649')
CLSID_RasterLayerFactory = uuid.UUID('349ef48f-043f-4c56-b6c6-c22ccc14c54c')
CLSID_WCSLayerFactory = uuid.UUID('f21943e9-f9cc-45ce-8599-ed095052e90e')
CLSID_RasterCatalogLayerFactory = uuid.UUID('31bc9f4e-dbf0-4f7b-9d10-c595c50be386')
CLSID_NetCDFLayerFactory = uuid.UUID('4cd72c00-a369-421a-9b0c-d2b1cd05d550')
CLSID_NetCDFTableFactory = uuid.UUID('efdce14d-cb11-4dba-9004-c698c5ada385')
CLSID_NITFGraphicsLayer = uuid.UUID('149e3c05-2bad-4c05-86be-1c20dc73a9dd')
CLSID_RasterServiceHelper = uuid.UUID('600c0168-7484-4741-81ab-8a716990efdb')
CLSID_RasterBasemapLayer = uuid.UUID('57520261-2608-430b-904e-7b0d48c578d5')
CLSID_RasterBasemapLayerFactory = uuid.UUID('7054e506-77a4-4666-a6f2-832afa88a297')
CLSID_BmpPictureElement = uuid.UUID('827b9a91-c067-11d2-9f22-00c04f6bc8dd')
CLSID_EmfPictureElement = uuid.UUID('827b9a90-c067-11d2-9f22-00c04f6bc8dd')
CLSID_TifPictureElement = uuid.UUID('5e7c0920-14a5-11d3-80cf-0080c7597e71')
CLSID_JpgPictureElement = uuid.UUID('06ac0980-1953-11d3-a3ee-0004ac1b1d86')
CLSID_ImgPictureElement = uuid.UUID('1c0d9b20-1953-11d3-a3ee-0004ac1b1d86')
CLSID_SidPictureElement = uuid.UUID('356efc60-1953-11d3-a3ee-0004ac1b1d86')
CLSID_GifPictureElement = uuid.UUID('4a7c82b0-1953-11d3-a3ee-0004ac1b1d86')
CLSID_PngPictureElement = uuid.UUID('85cd6330-d45a-11d3-a414-0004ac1b1d86')
CLSID_Jp2PictureElement = uuid.UUID('8bbf863b-d0c7-4b5f-88b0-21d5a4ca06fd')
CLSID_QueryByLayer = uuid.UUID('6056e03b-2373-40ae-9410-cdeedb4b76d4')
CLSID_MxdServer = uuid.UUID('fb760062-82c9-49dd-ad1c-100af33625ed')
CLSID_MapDescriptor = uuid.UUID('6156692f-8a40-424f-a9d6-6b3661ddf782')
CLSID_LayerDescriptor = uuid.UUID('9a414a07-8dae-4f03-9c82-18a2568bc860')
CLSID_MapServerConfigurationFactory = uuid.UUID('aa76f8b9-b4bb-40af-972b-94eb031cd74d')
CLSID_MapServer = uuid.UUID('43e4f6b6-7b17-4536-b7cf-c0454ebb0f5a')
CLSID_MapReader = uuid.UUID('cbe900d4-af66-4e4e-a957-ac839b1770cd')
CLSID_MapServerInfo = uuid.UUID('927b6010-1ac9-470f-99b5-bf95c98b9339')
CLSID_MapLayerInfo = uuid.UUID('63e9b9a2-5b83-4065-8f32-ff7732eff3ed')
CLSID_MapDescription = uuid.UUID('cfcf1c16-dbf2-4ea0-8638-8803ebdc1e9c')
CLSID_LayerDescription = uuid.UUID('5d9e564d-930c-4179-b108-4cea9b4acf01')
CLSID_MapFrameDescription = uuid.UUID('6d72cda6-8613-4f53-b4d7-ae8950df8383')
CLSID_PageDescription = uuid.UUID('b624b6a5-4ab5-4af0-86f3-b09213836634')
CLSID_ImageType = uuid.UUID('56204983-18f4-4c25-969a-6f8ee6c11357')
CLSID_ImageDisplay = uuid.UUID('6ff2fa3d-ebce-4f3a-941e-955954fba3cc')
CLSID_ImageDescription = uuid.UUID('8c9522a6-302f-4f1a-9316-cd15f971573c')
CLSID_MapImage = uuid.UUID('c9d77bd2-8296-4411-8d11-6efffbb29cad')
CLSID_ImageResult = uuid.UUID('2b43e5ef-bfe4-490c-8a1e-d28fbd645bcd')
CLSID_LayoutImage = uuid.UUID('614df187-68a3-480f-b760-26e8dd387d72')
CLSID_MapServerIdentifyResult = uuid.UUID('8aec469a-6795-454a-9c0b-e47d6dcc6c95')
CLSID_MapServerFindResult = uuid.UUID('df9adee0-54b2-43d7-90bf-b2cb9bcc3735')
CLSID_MapServerBookmark = uuid.UUID('b7be7672-f6cb-4c3e-bae9-65018b26463b')
CLSID_CenterAndScale = uuid.UUID('47ae7b9a-6744-4e44-8580-83ecbea95f51')
CLSID_CenterAndSize = uuid.UUID('3fb43f0d-a000-4c23-9bea-0976aef39429')
CLSID_FeatureExtent = uuid.UUID('e257b2f9-3f37-4ec2-bf16-bf7607569a72')
CLSID_MapExtent = uuid.UUID('8b80b977-43e9-461f-80db-8bf9ddd5287e')
CLSID_MapServerHyperlink = uuid.UUID('e35ff9ae-6330-4d0c-bf7b-4cfe239a37c7')
CLSID_MapServerRelationship = uuid.UUID('cdd2606d-6223-419e-abc5-37dc9f83e0ae')
CLSID_MapServerRow = uuid.UUID('ccbeb520-a247-4c8d-a5b3-ab159638c3dc')
CLSID_SQLSyntaxInfo = uuid.UUID('dbceaa1e-c6f3-430e-99c4-6e57f5a88b3b')
CLSID_MapServerLegendPatch = uuid.UUID('5cdb8b58-b82b-4364-975a-6767f99859e1')
CLSID_MapServerLegendClass = uuid.UUID('3651fc5f-0ec0-4380-9291-8a0e5ce3eaa6')
CLSID_MapServerLegendGroup = uuid.UUID('2c4c91e5-fa4e-4d04-8e30-e5be24749700')
CLSID_MapServerLegendInfo = uuid.UUID('d0dc51b1-e32e-4249-8ca9-821edfdf668b')
CLSID_MapDescriptions = uuid.UUID('82dbb5c4-cb76-4f59-918a-a4decb910d84')
CLSID_MapFrameDescriptions = uuid.UUID('697c6bf4-6ffb-4d05-bd7e-0a59cc3433d9')
CLSID_LayerDescriptions = uuid.UUID('f26524f6-6a5d-4717-a0c2-a79eb9123ded')
CLSID_MapServerBookmarks = uuid.UUID('2eaa5eca-3597-4747-8f0b-c52b559c01c7')
CLSID_MapServerIdentifyResults = uuid.UUID('7630e616-3fc0-4994-a96a-d26fb0a65b6b')
CLSID_MapServerFindResults = uuid.UUID('f6ac7a93-95a9-455a-8ff3-eee4a46e073a')
CLSID_MapLayerInfos = uuid.UUID('f549491e-3fa9-4773-aa7c-a99a2d317c55')
CLSID_MapServerRows = uuid.UUID('efd9858c-4f89-4059-91fa-39f97ff5b16c')
CLSID_MapServerRelationships = uuid.UUID('6fd540d3-cfc4-4512-a881-1948651d925a')
CLSID_MapServerHyperlinks = uuid.UUID('9b389417-f5bf-420f-882d-c5d2be6de04a')
CLSID_MapImages = uuid.UUID('58a06dee-c4ed-4080-9fb8-aff183f0cc47')
CLSID_MapServerLegendGroups = uuid.UUID('6e28ce07-ea2e-41d4-9161-0622708d62ad')
CLSID_MapServerLegendClasses = uuid.UUID('c331ef53-0b91-4249-98de-7927ab200bc2')
CLSID_MapServerLegendInfos = uuid.UUID('6fb7b18b-e23e-4705-baae-56e559943ed8')
CLSID_CacheInfo = uuid.UUID('262e345e-b6cb-41cd-9f88-5453741e63f4')
CLSID_CacheDescriptionInfo = uuid.UUID('5e567668-426a-4026-a86b-58f43e601ae3')
CLSID_CacheControlInfo = uuid.UUID('7e2c75de-7e34-4faa-90ed-9800b8fb4ab6')
CLSID_TileImageInfo = uuid.UUID('0ca787d5-fcae-412d-85d8-61aa304b1ae1')
CLSID_CacheStorageInfo = uuid.UUID('4c99435b-a3f7-4662-8e16-38cf3a83554a')
CLSID_CacheDatasetInfo = uuid.UUID('8606e883-b497-4c34-a20b-b256848e1878')
CLSID_TileCacheInfo = uuid.UUID('01312017-7d38-4d2b-91a0-05c548ade7f3')
CLSID_LODInfo = uuid.UUID('35bd0f76-3cf3-4d0c-9c4a-d728cfe593a5')
CLSID_LODInfos = uuid.UUID('8cd19a51-334b-4c0a-bc97-a3fdea0a1ce0')
CLSID_LayerCacheInfo = uuid.UUID('147fe50c-be24-4b85-8cdd-57ea2d3846ae')
CLSID_LayerCacheInfos = uuid.UUID('a121731c-8b62-4d15-8e0c-8e10b49bb9ab')
CLSID_FeatureLayerDrawingDescription = uuid.UUID('aa66c2ba-55bf-4eaa-80af-648b80228103')
CLSID_FeatureLayerDrawingDescriptionFactory = uuid.UUID('43a60125-807f-4734-b298-b0f161d1189e')
CLSID_RasterLayerDrawingDescription = uuid.UUID('426f6a04-908c-4749-9ad8-aff17221c581')
CLSID_RasterLayerDrawingDescriptionFactory = uuid.UUID('1093bcf4-4b1b-484d-b385-a9febe178508')
CLSID_LayerDrawingDescriptionFactory = uuid.UUID('2e331b54-c03a-4e6f-8ea9-cc596d08f01f')
CLSID_ServerLayerExtension = uuid.UUID('f7fd0ec9-f215-4e7f-b1f8-94ba0eb603b9')
CLSID_LayerResultOptions = uuid.UUID('80308f69-ee5a-457a-ad33-9f897c70ea40')
CLSID_QueryResultOptions = uuid.UUID('d1029770-4fa7-4799-bfd5-6b00ea89b370')
CLSID_QueryResult = uuid.UUID('966235d2-1fb1-4ae2-b484-21afdda0fcfc')
CLSID_StandaloneTableDescription = uuid.UUID('383fa402-05d9-4670-aa7a-c8667769157b')
CLSID_StandaloneTableInfo = uuid.UUID('393f91dc-8daf-4147-9c8b-60ee7a2e1ce2')
CLSID_StandaloneTableDescriptions = uuid.UUID('fe6a5b40-f898-4197-a807-2e554a18e1f7')
CLSID_StandaloneTableInfos = uuid.UUID('0cedd0bd-4060-4d6c-ad04-61453e906c79')
CLSID_RelateInfo = uuid.UUID('3c2118f3-45e0-4a48-aea5-538f7913d5cc')
CLSID_RelateInfos = uuid.UUID('034fec0e-f833-460f-a9c7-7c719074c1f3')
CLSID_RelateDescription = uuid.UUID('b1353e90-50d2-42fa-b9a6-519baf66a951')
CLSID_RelatedRecordGroup = uuid.UUID('18104f0c-5bb0-424a-be21-0d8f6ae4c833')
CLSID_RelatedRecordGroups = uuid.UUID('bc684b24-e51c-4684-89e6-b8bbdb0452f6')
CLSID_RelatedRecordSet = uuid.UUID('1b14e2ac-e5ac-485e-878f-48f7190a82d3')
CLSID_SubtypeInfo = uuid.UUID('c6e6b470-3b4d-457c-894c-46717cf061eb')
CLSID_SubtypeInfos = uuid.UUID('472ef51c-bc89-4915-ae9b-0a53f74d3f74')
CLSID_FieldDomainInfo = uuid.UUID('5d908cbf-20d9-455b-a2b6-8d6b7a566ed5')
CLSID_FieldDomainInfos = uuid.UUID('2aa03fad-ece0-437c-9d1d-37f7bd88bbcf')
CLSID_ImageResults = uuid.UUID('c5055a69-17cd-4e4c-8e06-af5a6798ac0b')
CLSID_LabelingDescription = uuid.UUID('9d5143d0-9737-40eb-9c9b-ac134831c6e0')
CLSID_LabelClassDescription = uuid.UUID('602631a1-c111-4aa1-8063-7699c003792c')
CLSID_LabelClassDescriptions = uuid.UUID('f0552a97-f4c8-4765-ab22-2fa4bfad4b3e')
CLSID_PointLabelPlacementDescription = uuid.UUID('6a458b37-055d-48da-b3a5-856d9dc9525f')
CLSID_LineLabelPlacementDescription = uuid.UUID('17729200-d19f-437f-8607-4a7995bc0928')
CLSID_PolygonLabelPlacementDescription = uuid.UUID('425d9bb2-bd95-4db9-b9f2-2c7b4d44ec58')
CLSID_LayerDrawingDescriptions = uuid.UUID('9a28f6a0-0d17-4f40-8bb4-0419944e1e7b')
CLSID_MapTableSubtypeInfo = uuid.UUID('72f8e5b1-6d40-4bc7-a4c0-65aaddc9289b')
CLSID_MapTableSubtypeInfos = uuid.UUID('33051880-6ac7-44b3-9930-cb4a3480d7a9')
CLSID_ServerSymbolOutputOptions = uuid.UUID('d045f9eb-53a0-4d6c-b219-e9a600bddb7c')
CLSID_JoinTableSourceDescription = uuid.UUID('c0c77549-7235-4ba8-af46-b419d303870c')
CLSID_MapTableSourceDescription = uuid.UUID('8b64886f-2e56-44c1-9025-53d5d4e2ad52')
CLSID_TableDataSourceDescription = uuid.UUID('94196665-9a9c-4c74-939a-d95d26038ac3')
CLSID_QueryTableDataSourceDescription = uuid.UUID('438e0898-8d06-4c65-b4db-b887718673b2')
CLSID_RasterDataSourceDescription = uuid.UUID('a510cb6c-33f3-48c1-aab5-7eed2e2dd3ac')
CLSID_StatisticDescription = uuid.UUID('230ac51e-af5c-47cf-b6c9-e212c73a8c08')
CLSID_StatisticDescriptions = uuid.UUID('0aa505e4-076e-43e9-9ec7-7c0f766decd7')
CLSID_StatisticsRequest = uuid.UUID('861b344b-8dd8-4842-94d7-5d5fa9774a9c')
CLSID_UniqueValuesDef = uuid.UUID('654c7924-f603-4ef6-94c5-580f63aed089')
CLSID_ClassBreaksDef = uuid.UUID('7c47079e-8160-4dcb-b152-c4bca5a524d5')
CLSID_MapServerLP = uuid.UUID('1dacee3c-4a1b-4024-9bcf-76bc47e765c9')
CLSID_MapServerIP = uuid.UUID('334a3d35-5d95-47bd-a641-f4013068171f')
CLSID_MapServerObjectDescription = uuid.UUID('64b34819-f839-497e-8c7d-d980dacd65ec')
CLSID_CacheRasterDatasetName = uuid.UUID('343eb024-5f47-4813-8d4c-66aa8a6d2f19')
CLSID_MapServerLayer = uuid.UUID('34d94bb0-3628-4d65-b7ff-4945122f30d5')
CLSID_MapServerLayerFactory = uuid.UUID('5dbce76c-0a71-4ce1-9e2e-2e030a55050d')
CLSID_FeatureServerLayerFactory = uuid.UUID('41f83d27-5f2a-4196-92a3-61b194f13eb8')
CLSID_SimpleMapServerIdentifyObject = uuid.UUID('58496d31-afa0-41f6-9a94-1b23e8706f3d')
CLSID_MapServerBasicSublayer = uuid.UUID('2fea41b6-d3ef-41ac-b037-622df3c1388d')
CLSID_MapServerIdentifySublayer = uuid.UUID('4289879c-9ce3-43a4-9f13-5ce7fba5ceb7')
CLSID_MapServerFindSublayer = uuid.UUID('f252d55c-d9f0-4dd7-a760-7470c66bd484')
CLSID_MapServerQuerySublayer = uuid.UUID('fc69b23b-9959-4dc8-ae26-3ba6f6386498')
CLSID_MapServerRESTLayer = uuid.UUID('1ded52f5-8837-40da-adc3-596c1c4a29ce')
CLSID_MapServerRESTSubLayer = uuid.UUID('8ad8359a-d7f3-4cdb-83e4-fe54ca37ccff')
CLSID_WMTSLayerFactory = uuid.UUID('9cd8c03c-9ca5-4d41-988c-be6697b0db0f')
CLSID_WMTSLayer = uuid.UUID('61c743a1-8317-416a-8317-10964dadc6ad')
CLSID_TinFaceRenderer = uuid.UUID('f12e6df0-384c-11d2-b1f2-00c04f8edeff')
CLSID_TinEdgeRenderer = uuid.UUID('13cb60ab-88a0-11d2-81eb-00104bc4cd03')
CLSID_TinNodeRenderer = uuid.UUID('6ef19ac2-84aa-11d2-81eb-00104bc4cd03')
CLSID_TinSlopeRenderer = uuid.UUID('91fb1b62-8944-11d2-81ec-00104bc4cd03')
CLSID_TinAspectRenderer = uuid.UUID('bebd2dae-8bc7-11d2-81ec-00104bc4cd03')
CLSID_TinElevationRenderer = uuid.UUID('ebb7311b-99f8-11d2-81ed-00104bc4cd03')
CLSID_TinFaceValueRenderer = uuid.UUID('aa8745c8-aa66-11d2-81fa-00104bc4cd03')
CLSID_TinNodeValueRenderer = uuid.UUID('322934b8-b224-11d2-81fc-00104bc4cd03')
CLSID_TinNodeElevationRenderer = uuid.UUID('ba20564c-dbe3-11d2-9f39-00c04f6bc619')
CLSID_TinBreaklineRenderer = uuid.UUID('ba20564f-dbe3-11d2-9f39-00c04f6bc619')
CLSID_TinContourRenderer = uuid.UUID('bef75dc2-20e6-4965-85e5-a3bc797470bc')
CLSID_TerrainDirtyAreaRenderer = uuid.UUID('3362c3a9-ba4a-4f39-a7b1-fc4400cf2102')
CLSID_TerrainPointElevationRenderer = uuid.UUID('d8473f3c-2165-44aa-b8fd-34403e1f9354')
CLSID_TerrainPointAttributeRenderer = uuid.UUID('d3fc15c5-0cbe-4900-bca8-dc09a12f304c')
CLSID_TerrainPointUniqueValueRenderer = uuid.UUID('8b06e040-89b0-4657-98a5-b942398745b8')
CLSID_LasUniqueValueRenderer = uuid.UUID('850738a3-dcba-474d-b2ca-e9428b1fff0c')
CLSID_LasPointElevationRenderer = uuid.UUID('e53b5e66-8c03-4f92-940f-54f62a021838')
CLSID_TinLayer = uuid.UUID('fe308f38-bdca-11d1-a523-0000f8774f0f')
CLSID_SimpleTinIdentifyObj = uuid.UUID('70fd6dbf-a2ad-4a76-b9de-78924c6668fb')
CLSID_TinLayerFactory = uuid.UUID('ce2d91a2-1db9-4d7a-a6ad-304383550320')
CLSID_TerrainLayer = uuid.UUID('5c7c19dd-d2f0-4a31-9c70-f87e3a203c28')
CLSID_TerrainLayerFactory = uuid.UUID('e6bb7928-9163-4898-a2c2-14092773f394')
CLSID_LasDatasetLayer = uuid.UUID('431ef9c2-4ac6-4299-b18f-5371fa1a6aa8')
CLSID_LasDatasetLayerFactory = uuid.UUID('c57bbfa3-261b-4733-9a9b-f331567df59f')
CLSID_CadLayer = uuid.UUID('e299adbd-a5c3-11d2-9b10-00c04fa33299')
CLSID_EngineCadLayerFactory = uuid.UUID('a41f1d23-50c0-428a-b0e8-99e99554304a')
CLSID_CadFeatureLayer = uuid.UUID('e0f384b6-e0c1-11d2-9b30-00c04fa33299')
CLSID_EngineCadFeatureLayerFactory = uuid.UUID('cdcde5ec-d2b6-41ca-8ec0-e62431f4e7ea')
CLSID_CadAnnotationLayer = uuid.UUID('e1b71879-a5df-11d4-a215-444553547777')
CLSID_EngineCadAnnotationLayerFactory = uuid.UUID('12d76758-e376-48ec-a310-78e4735bebaf')
CLSID_ACConnector = uuid.UUID('84b9fdab-dfd4-11d3-9ff7-00c04f6bc6a5')
CLSID_ACSimpleRenderer = uuid.UUID('ee16a1e6-bde9-47ed-be03-d711db3102e5')
CLSID_ACGroupRenderer = uuid.UUID('1acdebe9-9f89-48dd-bc28-780acd9d4256')
CLSID_ACScaleDependentRenderer = uuid.UUID('69d20498-f616-454e-9cca-54e0f600c25a')
CLSID_ACSimpleLineSymbol = uuid.UUID('d2ea35c1-d393-4066-901b-b44108163cb3')
CLSID_ACSimpleFillSymbol = uuid.UUID('b019758d-5f2b-4310-b409-c042391f6149')
CLSID_ACSimplePolygonSymbol = uuid.UUID('72341cc3-1a6b-4ee9-9810-ba77fd277a2a')
CLSID_ACSimpleMarkerSymbol = uuid.UUID('7fe0318e-3246-483f-9590-ed69e9c09af8')
CLSID_ACTextSymbol = uuid.UUID('22e484b7-1ae7-4b13-92aa-3e081d00b539')
CLSID_ACValueMapRenderer = uuid.UUID('05b3287e-db2b-436b-bb3d-b01ef5236446')
CLSID_ACTrueTypeMarkerSymbol = uuid.UUID('58063155-bded-4188-b996-a09a73e93f0a')
CLSID_ACRasterMarkerSymbol = uuid.UUID('76315040-c3b0-4100-b949-135948839c67')
CLSID_ACRasterShieldSymbol = uuid.UUID('8d574cab-ff08-473e-8b73-bcb9e7605a20')
CLSID_ACHashLineSymbol = uuid.UUID('53455d9e-c3e8-4ffa-81f0-38ed2e238b9b')
CLSID_ACRasterFillSymbol = uuid.UUID('34a16eda-8a58-44a4-9342-98533b8564a9')
CLSID_ACGradientFillSymbol = uuid.UUID('3235e2dd-b46b-4448-b7e7-aeed8ed0b272')
CLSID_ACCalloutMarkerSymbol = uuid.UUID('d33fe4fb-e17b-4ea9-a01e-a03f5f394e96')
CLSID_ACShieldSymbol = uuid.UUID('f2005b08-f5d0-44b9-bcd5-4d6215c58e4e')
CLSID_ACTextMarkerSymbol = uuid.UUID('2c231f73-0467-473c-b257-23ce3b89d31c')
CLSID_ACSimpleLabelRenderer = uuid.UUID('d10f211f-3083-4bfe-9d3f-ad77bcb151f0')
CLSID_ACValueMapLabelRenderer = uuid.UUID('3d7551d0-6eef-4dc8-9098-99c9925eb233')
CLSID_ACMap = uuid.UUID('e774fd60-5f97-4630-bc9b-9116645ac184')
CLSID_ACFeatureLayer = uuid.UUID('5ab8731f-4db7-44d6-8c27-d94fe9c6528a')
CLSID_ACImageLayer = uuid.UUID('0046627f-7def-4aa1-ad72-a1b02b22d39b')
CLSID_ACAcetateLayer = uuid.UUID('6c3ad32d-e553-4422-b649-357027f701eb')
CLSID_EngineIMSLayerFactory = uuid.UUID('bc182f70-3976-4fc0-ab87-b1c3d8bc9f4a')
CLSID_IMSMapLayer = uuid.UUID('dc850600-d521-11d3-9ff4-00c04f6bc6a5')
CLSID_IMSSymbolImporter = uuid.UUID('0a97a894-d811-11d3-9ff4-00c04f6bc6a5')
CLSID_IMSGlobeConnection = uuid.UUID('5523673e-fb83-4eec-af1c-68065f6f16f1')
CLSID_IMSGlobeXMLParser = uuid.UUID('541e17b2-82c2-44a8-818e-ee6cb38201ae')
CLSID_IMSGlobeXMLNode = uuid.UUID('71e912b7-82b9-4ce3-b411-420ea42c8f2d')
CLSID_IMSSubFeatureLayer = uuid.UUID('bd14549f-6a3c-4056-bbf3-16677ff32332')
CLSID_IMSSubLayer = uuid.UUID('194b1607-2e96-44d1-a93e-b6e43aad3b07')
CLSID_GpsFeed = uuid.UUID('419d9d0e-ced4-4fe0-8be0-5a7c3dccb214')
CLSID_GpsConnection = uuid.UUID('8349d7d0-d5ec-41e5-9d14-c896f8617c3d')
CLSID_RealTimeFeedManager = uuid.UUID('d2f9a918-9de3-42b4-9684-6e6461562d88')
CLSID_RealTimeFeedSimulator = uuid.UUID('e10c2bac-6b84-49e5-b50d-28e2f07da2be')
CLSID_ColorStyleGalleryClass = uuid.UUID('ac0e982d-91cb-11d1-8813-080009ec732a')
CLSID_FillSymbolStyleGalleryClass = uuid.UUID('c2eab0a1-9c06-11d1-a1c6-080009b6f22b')
CLSID_LineSymbolStyleGalleryClass = uuid.UUID('c2eab0a2-9c06-11d1-a1c6-080009b6f22b')
CLSID_MarkerSymbolStyleGalleryClass = uuid.UUID('c2eab0a3-9c06-11d1-a1c6-080009b6f22b')
CLSID_TextSymbolStyleGalleryClass = uuid.UUID('c2eab0a4-9c06-11d1-a1c6-080009b6f22b')
CLSID_LegendItemStyleGalleryClass = uuid.UUID('61f8ccce-1813-11d2-87a2-0000f8751720')
CLSID_NorthArrowStyleGalleryClass = uuid.UUID('61f8cccc-1813-11d2-87a2-0000f8751720')
CLSID_ScaleBarStyleGalleryClass = uuid.UUID('61f8cccd-1813-11d2-87a2-0000f8751720')
CLSID_ScaleTextStyleGalleryClass = uuid.UUID('61f8cccf-1813-11d2-87a2-0000f8751720')
CLSID_ColorRampStyleGalleryClass = uuid.UUID('79a60902-9d7f-11d1-a1c9-080009b6f22b')
CLSID_LabelStyleGalleryClass = uuid.UUID('4c90de79-cb77-11d2-9f34-00c04f6bc6a5')
CLSID_MaplexLabelStyleGalleryClass = uuid.UUID('20664808-cba7-11d2-9fa4-0fc04f6ec6a1')
CLSID_BorderStyleGalleryClass = uuid.UUID('80f4285d-de21-11d2-b868-00600802e603')
CLSID_BackgroundStyleGalleryClass = uuid.UUID('80f4285e-de21-11d2-b868-00600802e603')
CLSID_ShadowStyleGalleryClass = uuid.UUID('2c24e3ad-bf6a-40b1-b5f0-0a19e9412407')
CLSID_AreaPatchStyleGalleryClass = uuid.UUID('38446e33-e3bc-11d2-b868-00600802e603')
CLSID_LinePatchStyleGalleryClass = uuid.UUID('38446e34-e3bc-11d2-b868-00600802e603')
CLSID_RepresentationMarkerStyleGalleryClass = uuid.UUID('530da506-85e7-4cc2-91c5-6f59f8ccc37d')
CLSID_RepresentationRuleStyleGalleryClass = uuid.UUID('d335a2e1-9c05-4198-9d23-36ae5492a4b1')
CLSID_MobileServer = uuid.UUID('4c4f3311-d5af-42da-8c0a-47d0a0b18193')
CLSID_MobileSync = uuid.UUID('bafa713b-fb98-467a-8382-da5537f48a06')
CLSID_MobileMapInfo = uuid.UUID('5f37a9b4-77b5-4e45-a9fe-fe0651565314')
CLSID_MobileLayerInfo = uuid.UUID('69d4c88e-1158-41eb-8111-4abefb32f633')
CLSID_MobileLayerInfos = uuid.UUID('eac49b53-5819-4434-b5f0-55d781b79977')
CLSID_WMSServer = uuid.UUID('4e4ae365-c459-4688-b747-41aaa2dad0f2')
CLSID_WMSImageServer = uuid.UUID('9c25963a-8aaf-466d-80cb-84851a6c321d')
CLSID_WCSServer = uuid.UUID('4462a653-1e67-47da-9fa2-f128e17ae24b')
CLSID_WCSImageServer = uuid.UUID('54b08294-f19b-488e-bd44-cbed95b1898d')
CLSID_WMSMapLayer = uuid.UUID('e38a56c0-d5bd-4899-b089-c8ed4e38b77f')
CLSID_SimpleWMSIdentifyObject = uuid.UUID('f3863a44-2f78-4927-b3b7-60fe2a8e0e29')
CLSID_WMSLayer = uuid.UUID('5b0da8f6-5e43-40ae-9871-56ba33936f30')
CLSID_WMSGroupLayer = uuid.UUID('f677ba62-7ca7-400a-9c59-62930a282ceb')
CLSID_EngineWMSMapLayerFactory = uuid.UUID('84993c13-4858-44e5-b410-afe9dd2be88c')
CLSID_DefaultNetworkLayerSymbology = uuid.UUID('ab25af95-7780-444d-8364-e5df7dbba75d')
CLSID_NetworkLayer = uuid.UUID('d4f8e94b-5cf5-4f8f-8b4d-5b25ae4c0af9')
CLSID_EngineNetworkLayerFactory = uuid.UUID('8ca3f708-1043-483b-9f79-72762f84e61e')
CLSID_SimpleNetworkRenderer = uuid.UUID('1c30bfd1-db91-48f1-b3c1-6a2feb0c7104')
CLSID_NetworkDirtyAreaRenderer = uuid.UUID('3d8a6168-4b05-44c9-92c0-5640b40e6cbe')
CLSID_NetworkTrafficRenderer = uuid.UUID('179a2118-f469-4a0c-a33d-a40228a93a13')
CLSID_RepresentationRenderer = uuid.UUID('18db8dbb-f658-4c9c-ba71-175022e9ece3')
CLSID_RepresentationLegendClass = uuid.UUID('52212729-95af-46af-ac13-f8fb5dbf2da6')
CLSID_CadastralFabricLayer = uuid.UUID('fa1dcb12-8b9a-48c8-bd46-5d0064b4a1a7')
CLSID_CadastralFabricLayerEventsHelper = uuid.UUID('e1f2fd9c-9454-4483-afbb-c6a6feae7019')
CLSID_CadastralFabricLayerFactory = uuid.UUID('b3fc8f38-5dbc-4932-b0de-552e5f7c2327')
CLSID_CadastralFabricSubLayer = uuid.UUID('b0144184-09a4-4d5c-a4a7-8602951f7d59')
CLSID_DynamicCacheLayerManager = uuid.UUID('67efdb3d-2895-4f30-ade2-9496bf7bbd1b')
CLSID_DynamicHit = uuid.UUID('bdf66ba1-838b-49f8-8422-33fdb78a73c7')
CLSID_ImageServerLP = uuid.UUID('5910be43-f1c9-4054-bc0f-404eceaf692d')
CLSID_ImageServerIP = uuid.UUID('bd3e4f96-3886-4670-aef4-a94dc5fe6146')
CLSID_ImageServerObjectDescription = uuid.UUID('14182d40-b69d-4925-bd5a-687f177d27a2')
CLSID_MultithreadedCommander = uuid.UUID('2656e528-9246-44e7-9fd4-c2ae1bc748d4')
CLSID_ImageServiceInfo = uuid.UUID('61520b29-0e78-4974-88ad-59a6a293085d')
CLSID_GeoImageDescription = uuid.UUID('bcab28b5-2c1f-4951-8ee1-cd28b622e88c')
CLSID_ImageServer = uuid.UUID('bd60cb15-61d8-4ccd-af4e-ea35f4069532')
CLSID_ImageServerConfigurationFactory = uuid.UUID('2cee6617-6b88-4700-8c95-6cdb87e02a94')
CLSID_AISRequest = uuid.UUID('044ba42c-e832-4e5d-962c-3ee0c2df4043')
CLSID_MosaicRule = uuid.UUID('33638700-d926-4ecd-9ce9-bcaa96e8e89c')
CLSID_RenderingRule = uuid.UUID('912fc6f2-4b5f-4aa3-af24-18704ab58f6e')
CLSID_RasterItemDescription = uuid.UUID('0618aa16-bc84-4266-9858-a43ea9738266')
CLSID_RasterItemDescriptions = uuid.UUID('8cdac104-b36a-403c-a2bf-26f89c540878')
CLSID_MosaicLODInfoHelper = uuid.UUID('1154b6c8-4426-4e56-bd18-53c46fea9313')
CLSID_ImageQueryFilter = uuid.UUID('0b9d971a-d026-49f3-85a0-a5be5f6be888')
CLSID_SimpleMapImage = uuid.UUID('611f5b19-e18c-4417-8d1f-c7a652b75799')
CLSID_ImageServerIdentifyResult = uuid.UUID('219bf1ad-a158-40c5-a5ec-fb63bd91be0c')
CLSID_ImageServerIdentifyResults = uuid.UUID('018d762f-5cea-44c5-bf16-701ef6517b36')
CLSID_ImageServerDownloadResult = uuid.UUID('33c20b51-fadf-4b22-943a-2287833b2aa4')
CLSID_ImageServerDownloadResults = uuid.UUID('9189ae19-5053-4f5a-a5cd-388223bde7fd')
CLSID_ImageServerEditResult = uuid.UUID('a5e8edb6-0d08-4145-b696-d64c71897819')
CLSID_ImageServerEditResults = uuid.UUID('d85c8520-0e3a-4532-b03a-de081f61aba7')
CLSID_ImageServerMeasureResult = uuid.UUID('ae6f05af-77e6-48c6-ba85-1e6cfe690f2c')
CLSID_RasterFunctionInfo = uuid.UUID('4c5da0cc-93ee-47fc-87af-5750a6e95976')
CLSID_RasterFunctionInfos = uuid.UUID('5f7008ed-43de-4357-b281-9e8f66771c71')
CLSID_RasterTypeInfo = uuid.UUID('5860ce85-cb80-4c9c-bd85-cd2b375f4cac')
CLSID_RasterTypeInfos = uuid.UUID('84fc6849-172f-40fb-ac04-d05ddcf21ab7')
CLSID_ImageView = uuid.UUID('812bae42-7f5f-4c04-9100-6e28e5007073')
CLSID_ImageCooker = uuid.UUID('5627a2b0-abad-4de2-a375-3f8ac39c1514')
CLSID_ImageServerName = uuid.UUID('bd552fec-ff0b-4bf1-8c46-b6886e71a47c')
CLSID_ImageServerLayer = uuid.UUID('477d13e7-8d68-45b6-a7fd-2ef442bcce95')
CLSID_ImageServerLayerFactory = uuid.UUID('b0d28e13-751e-4ca1-8a92-65aa0d9f4f6e')
CLSID_MobileServerLP = uuid.UUID('c137af35-3532-4ce9-baeb-d89b69b91de2')
CLSID_MobileServerIP = uuid.UUID('1ecbebc1-0e00-4061-ab75-f011c9096c34')
CLSID_MobileServerObjectDescription = uuid.UUID('63bda75d-25a4-4a81-bcae-99d161791c84')
CLSID_DataObjectType = uuid.UUID('13dae93f-86f6-44b0-aa2b-f9653b4f3b3a')
CLSID_DataObjectTypes = uuid.UUID('8d4c22e2-763d-4f62-9fee-f98a76aa1a49')
CLSID_DataObjectTable = uuid.UUID('b05961c0-f5b5-4c12-a167-6ab84fd78bad')
CLSID_GraphicFeatureLayer = uuid.UUID('08210b73-9b82-413f-9835-275cd74b7472')
CLSID_GraphicFeatureLayers = uuid.UUID('92c36f80-e7cd-4a51-95b9-640be8d4f5f2')
CLSID_DataObjectTables = uuid.UUID('5b33000e-64d3-43b6-89cb-a6e435b9b58d')
CLSID_PropertyInfo = uuid.UUID('749e6643-a33c-4e14-ae37-3bb51282546a')
CLSID_PropertyInfos = uuid.UUID('1d8936b7-c589-4140-8f7b-40dd8b17eda5')
CLSID_DataObject = uuid.UUID('b63b69b9-5e1a-418b-9e13-fbd25fd98999')
CLSID_GraphicFeature = uuid.UUID('b39950e4-4acd-40e1-94be-c2c236428459')
CLSID_DataObjectArray = uuid.UUID('24e001b9-bfb0-4d5e-b8c1-ec954d9fb85a')
CLSID_DataObjects = uuid.UUID('873a22bf-d7f4-4348-991a-8d5cb0909164')
CLSID_GraphicFeatures = uuid.UUID('de67889d-d193-458c-80a1-79666c23c87b')
CLSID_GFLayerTableDataMapping = uuid.UUID('d122d66f-f509-4b66-830f-49e26bbdc56a')
CLSID_GFLayerTableDataMappings = uuid.UUID('7d96e1b7-f86c-4d30-bb27-ad2f01e9fbc3')
CLSID_DomainInfo = uuid.UUID('59090f10-f719-4cd3-afe8-eb9092ca978b')
CLSID_TemplateInfo = uuid.UUID('20a9425a-d861-45c6-959b-32fdfd45651d')
CLSID_TemplateInfos = uuid.UUID('17763802-34ad-4317-ae77-f3d8b174d74e')
CLSID_GraphicFeatureServer = uuid.UUID('c2b5871e-b795-4ef2-8330-c716428633c0')
CLSID_FeatureServerConfigurationFactory = uuid.UUID('44204a51-68c6-482e-ba3a-af249b3334e8')
CLSID_GFSReplicaDescription = uuid.UUID('28e79dcd-11ea-4eaa-ade7-d7106df9b1cf')
CLSID_GFSTableDescription = uuid.UUID('e9750269-ac00-482e-9ac2-8d34f853e906')
CLSID_GFSTableDescriptions = uuid.UUID('bc437a47-e43c-4fa2-86cb-7d90128e13d7')
CLSID_EditResult = uuid.UUID('f3fecf1b-7c05-4998-a116-0c2a32d159c4')
CLSID_EditResults = uuid.UUID('36dfc05d-b217-45d5-bee6-cc54de782c68')
CLSID_ServiceDataOptions = uuid.UUID('090e8381-11a6-4179-aa1e-488b27f53ee8')
CLSID_ServiceData = uuid.UUID('8ab29454-ff3e-47c3-ae77-6c0dd31fd853')
CLSID_DataObjectGroup = uuid.UUID('63a0f726-0151-4507-a64a-2498dd8c7e60')
CLSID_DataObjectGroupArray = uuid.UUID('3ddb0fc2-c96f-4518-8dcb-80b2213780b9')
CLSID_DataObjectGroups = uuid.UUID('d3395657-a678-4037-98c7-0efe9e8b517c')
CLSID_TableEdit = uuid.UUID('b6e62061-7447-4cd3-9a8c-524609bd8f2f')
CLSID_TableEdits = uuid.UUID('9803bc24-4040-4075-adbd-9ceec7dad448')
CLSID_TableEditResult = uuid.UUID('c45aec7c-3331-41a8-bb55-3c7f738cef27')
CLSID_TableEditResults = uuid.UUID('739abe52-66f8-483f-8034-cb44a3694dd7')
CLSID_FeatureServerInfo = uuid.UUID('9a1bb0f2-140a-44de-81d5-5cb502fb67fa')
CLSID_TableIdentities = uuid.UUID('9909b72d-8258-420a-95ae-c0056b634b8b')
CLSID_TableIdentity = uuid.UUID('6b333f9a-7d86-4514-804c-0cb1cc648cd0')
CLSID_MosaicLayer = uuid.UUID('3452fcb8-d10c-44e4-b971-8c53db39d517')
CLSID_JPIPServer = uuid.UUID('a2d96ca9-dec0-4488-9969-847db6c64c39')
CLSID_GraphicFeatureServerLP = uuid.UUID('8d7f6923-e939-419f-934a-0fab21c18ad9')
CLSID_GraphicFeatureServerIP = uuid.UUID('5862e625-e709-4caf-8951-fa530ff2b8b6')
CLSID_GraphicFeatureServerObjectDescription = uuid.UUID('e42811ba-839f-4a97-9f73-7bdb05c9d166')
CLSID_LayerTablesAndDataMappings = uuid.UUID('5816baad-b5fd-4597-bd9e-e8d8772f47d5')
CLSID_GFSReplicationAgent = uuid.UUID('1fdbbacc-d4a4-4b74-a0a1-08a38d7873ab')
CLSID_DataSourceHelper = uuid.UUID('e02bc759-8957-489b-8ecb-80f55ef53758')
CLSID_MSDHelper = uuid.UUID('5be34ef4-371f-458b-8f77-af42601740a7')
CLSID_FeatureServiceEditExtension = uuid.UUID('e85cb26e-e32d-442a-a178-84645f91ea26')
CLSID_FeatureServiceLayerEditExtension = uuid.UUID('9a2bda48-ad26-4706-bb88-f47d7b0c8f32')
CLSID_FeatureServiceWorkspaceFactory = uuid.UUID('c81194e7-4daa-418b-8c83-2942e65d2b8c')

# Enumerations
class enumActionCategory(Enumeration):
    __slots__ = ['enumLayer',
                 'enumServer',
                 'enumService',
                 'enumRealtimeLayer',
                 'enumNoCategory',
                 'enumServerMasterCollection',
                 'enumServerDSDCollection',
                 'enumLayerMasterCollection',
                 'enumLayerSubCollection']
    enumLayer = 0
    enumServer = 1
    enumService = 2
    enumRealtimeLayer = 3
    enumNoCategory = 4
    enumServerMasterCollection = 5
    enumServerDSDCollection = 6
    enumLayerMasterCollection = 7
    enumLayerSubCollection = 8

class enumTriggerType(Enumeration):
    __slots__ = ['enumTriggerTypeUnspecified',
                 'enumAttributeTrigger',
                 'enumLocationTrigger',
                 'enumDualTrigger',
                 'enumAlwaysTrigger']
    enumTriggerTypeUnspecified = 0
    enumAttributeTrigger = 1
    enumLocationTrigger = 2
    enumDualTrigger = 3
    enumAlwaysTrigger = 4

class enumHighlightSuppression(Enumeration):
    __slots__ = ['enumActionTypeUnspecified',
                 'enumHighlight',
                 'enumSuppression']
    enumActionTypeUnspecified = 0
    enumHighlight = 1
    enumSuppression = 2

class esriRasterTransparencyStateEnum(Enumeration):
    __slots__ = ['esriRasterTransparencyStateOpaque',
                 'esriRasterTransparencyStateAlpha',
                 'esriRasterTransparencyStateMask']
    esriRasterTransparencyStateOpaque = 0
    esriRasterTransparencyStateAlpha = 1
    esriRasterTransparencyStateMask = 2

class esriRasterUniqueRendererKeyTypesEnum(Enumeration):
    __slots__ = ['esriRasterUniqueRendererKeyError',
                 'esriRasterUniqueRendererKeyDouble',
                 'esriRasterUniqueRendererKeyString']
    esriRasterUniqueRendererKeyError = 0
    esriRasterUniqueRendererKeyDouble = 1
    esriRasterUniqueRendererKeyString = 2

class esriRasterStretchTypesEnum(Enumeration):
    __slots__ = ['esriRasterStretch_NONE',
                 'esriRasterStretch_DefaultFromSource',
                 'esriRasterStretch_Custom',
                 'esriRasterStretch_StandardDeviations',
                 'esriRasterStretch_HistogramEqualize',
                 'esriRasterStretch_MinimumMaximum',
                 'esriRasterStretch_HistogramSpecification',
                 'esriRasterStretch_PercentMinimumMaximum',
                 'esriRasterStretch_ESRI',
                 'esriRasterStretch_Count']
    esriRasterStretch_NONE = 0
    esriRasterStretch_DefaultFromSource = 1
    esriRasterStretch_Custom = 2
    esriRasterStretch_StandardDeviations = 3
    esriRasterStretch_HistogramEqualize = 4
    esriRasterStretch_MinimumMaximum = 5
    esriRasterStretch_HistogramSpecification = 6
    esriRasterStretch_PercentMinimumMaximum = 7
    esriRasterStretch_ESRI = 8
    esriRasterStretch_Count = 9

class esriRasterStretchStatsTypeEnum(Enumeration):
    __slots__ = ['esriRasterStretchStats_AreaOfView',
                 'esriRasterStretchStats_Dataset',
                 'esriRasterStretchStats_GlobalStats']
    esriRasterStretchStats_AreaOfView = 0
    esriRasterStretchStats_Dataset = 1
    esriRasterStretchStats_GlobalStats = 2

class esriRectanglePosition(Enumeration):
    __slots__ = ['esriTopSide',
                 'esriBottomSide',
                 'esriLeftSide',
                 'esriRightSide']
    esriTopSide = 1
    esriBottomSide = 2
    esriLeftSide = 3
    esriRightSide = 4

class esriViewDrawPhase(Enumeration):
    __slots__ = ['esriViewNone',
                 'esriViewBackground',
                 'esriViewGeography',
                 'esriViewGeoSelection',
                 'esriViewGraphics',
                 'esriViewGraphicSelection',
                 'esriViewForeground',
                 'esriViewInitialized',
                 'esriViewAll']
    esriViewNone = 0
    esriViewBackground = 1
    esriViewGeography = 2
    esriViewGeoSelection = 4
    esriViewGraphics = 8
    esriViewGraphicSelection = 16
    esriViewForeground = 32
    esriViewInitialized = 64
    esriViewAll = 255

class esriDynamicLegendType(Enumeration):
    __slots__ = ['esriDynamicLegendTypeNone',
                 'esriDynamicLegendTypeVisibility',
                 'esriDynamicLegendTypeCount']
    esriDynamicLegendTypeNone = 1
    esriDynamicLegendTypeVisibility = 2
    esriDynamicLegendTypeCount = 3

class esriAnnotationStatus(Enumeration):
    __slots__ = ['esriAnnoStatusPlaced',
                 'esriAnnoStatusUnplaced']
    esriAnnoStatusPlaced = 0
    esriAnnoStatusUnplaced = 1

class esriAnchorPointEnum(Enumeration):
    __slots__ = ['esriTopLeftCorner',
                 'esriTopMidPoint',
                 'esriTopRightCorner',
                 'esriLeftMidPoint',
                 'esriCenterPoint',
                 'esriRightMidPoint',
                 'esriBottomLeftCorner',
                 'esriBottomMidPoint',
                 'esriBottomRightCorner']
    esriTopLeftCorner = 0
    esriTopMidPoint = 1
    esriTopRightCorner = 2
    esriLeftMidPoint = 3
    esriCenterPoint = 4
    esriRightMidPoint = 5
    esriBottomLeftCorner = 6
    esriBottomMidPoint = 7
    esriBottomRightCorner = 8

class esriSelectionResultEnum(Enumeration):
    __slots__ = ['esriSelectionResultNew',
                 'esriSelectionResultAdd',
                 'esriSelectionResultSubtract',
                 'esriSelectionResultAnd',
                 'esriSelectionResultXOR']
    esriSelectionResultNew = 0
    esriSelectionResultAdd = 1
    esriSelectionResultSubtract = 2
    esriSelectionResultAnd = 3
    esriSelectionResultXOR = 4

class esriBasicOverposterWeight(Enumeration):
    __slots__ = ['esriNoWeight',
                 'esriLowWeight',
                 'esriMediumWeight',
                 'esriHighWeight']
    esriNoWeight = 0
    esriLowWeight = 1
    esriMediumWeight = 2
    esriHighWeight = 3

class esriLabelWhichFeatures(Enumeration):
    __slots__ = ['esriAllFeatures',
                 'esriVisibleFeatures',
                 'esriSelectedFeatures']
    esriAllFeatures = 0
    esriVisibleFeatures = 1
    esriSelectedFeatures = 2

class esriExtentTypeEnum(Enumeration):
    __slots__ = ['esriExtentDefault',
                 'esriAutoExtentNone',
                 'esriExtentScale',
                 'esriAutoExtentScale',
                 'esriExtentBounds',
                 'esriAutoExtentBounds',
                 'esriAutoExtentMarginPercent',
                 'esriAutoExtentMarginMapUnits',
                 'esriAutoExtentMarginPageUnits',
                 'esriExtentPageIndex']
    esriExtentDefault = 0
    esriAutoExtentNone = 0
    esriExtentScale = 1
    esriAutoExtentScale = 1
    esriExtentBounds = 2
    esriAutoExtentBounds = 2
    esriAutoExtentMarginPercent = 3
    esriAutoExtentMarginMapUnits = 4
    esriAutoExtentMarginPageUnits = 5
    esriExtentPageIndex = 6

class esriSymbolOverrideEnum(Enumeration):
    __slots__ = ['esriSymbolOverrideXOffset',
                 'esriSymbolOverrideYOffset',
                 'esriSymbolOverrideHorzAlignment',
                 'esriSymbolOverrideVertAlignment',
                 'esriSymbolOverrideFlipAngle',
                 'esriSymbolOverrideSize',
                 'esriSymbolOverrideColor',
                 'esriSymbolOverrideCharSpacing',
                 'esriSymbolOverrideCharWidth',
                 'esriSymbolOverrideWordSpacing',
                 'esriSymbolOverrideLeading',
                 'esriSymbolOverrideBold',
                 'esriSymbolOverrideItalic',
                 'esriSymbolOverrideUnderline',
                 'esriSymbolOverrideBackground',
                 'esriSymbolOverrideFontName']
    esriSymbolOverrideXOffset = 1
    esriSymbolOverrideYOffset = 2
    esriSymbolOverrideHorzAlignment = 4
    esriSymbolOverrideVertAlignment = 8
    esriSymbolOverrideFlipAngle = 16
    esriSymbolOverrideSize = 64
    esriSymbolOverrideColor = 128
    esriSymbolOverrideCharSpacing = 512
    esriSymbolOverrideCharWidth = 1024
    esriSymbolOverrideWordSpacing = 2048
    esriSymbolOverrideLeading = 4096
    esriSymbolOverrideBold = 8192
    esriSymbolOverrideItalic = 16384
    esriSymbolOverrideUnderline = 32768
    esriSymbolOverrideBackground = 65536
    esriSymbolOverrideFontName = 131072

class ESRITPCPenType(Enumeration):
    __slots__ = ['ETPC_Pen',
                 'ETPC_Highlighter']
    ETPC_Pen = 0
    ETPC_Highlighter = 1

class ESRITPCStylusType(Enumeration):
    __slots__ = ['ETPC_Ball',
                 'ETPC_Chisel']
    ETPC_Ball = 0
    ETPC_Chisel = 1

class esriT3DJustification(Enumeration):
    __slots__ = ['esriT3DJustifyLeft',
                 'esriT3DJustifyCenter',
                 'esriT3DJustifyRight']
    esriT3DJustifyLeft = 0
    esriT3DJustifyCenter = 1
    esriT3DJustifyRight = 2

class esriT3DOrientationPlane(Enumeration):
    __slots__ = ['esriT3DPlaneXY',
                 'esriT3DPlaneXZ',
                 'esriT3DPlaneYZ']
    esriT3DPlaneXY = 0
    esriT3DPlaneXZ = 1
    esriT3DPlaneYZ = 2

class esriT3DAlignment(Enumeration):
    __slots__ = ['esriT3DAlignHorizontal',
                 'esriT3DAlignVertical']
    esriT3DAlignHorizontal = 0
    esriT3DAlignVertical = 1

class esriT3DRotationAxis(Enumeration):
    __slots__ = ['esriT3DRotateAxisX',
                 'esriT3DRotateAxisY',
                 'esriT3DRotateAxisZ']
    esriT3DRotateAxisX = 0
    esriT3DRotateAxisY = 1
    esriT3DRotateAxisZ = 2

class esriBasicOverposterFeatureType(Enumeration):
    __slots__ = ['esriOverposterPoint',
                 'esriOverposterPolyline',
                 'esriOverposterPolygon']
    esriOverposterPoint = 0
    esriOverposterPolyline = 1
    esriOverposterPolygon = 2

class esriBasicNumLabelsOption(Enumeration):
    __slots__ = ['esriNoLabelRestrictions',
                 'esriOneLabelPerName',
                 'esriOneLabelPerShape',
                 'esriOneLabelPerPart']
    esriNoLabelRestrictions = 0
    esriOneLabelPerName = 1
    esriOneLabelPerShape = 2
    esriOneLabelPerPart = 3

class esriOverposterPointPlacementMethod(Enumeration):
    __slots__ = ['esriAroundPoint',
                 'esriOnTopPoint',
                 'esriSpecifiedAngles',
                 'esriRotationField']
    esriAroundPoint = 0
    esriOnTopPoint = 1
    esriSpecifiedAngles = 2
    esriRotationField = 3

class esriSymbolRotationType(Enumeration):
    __slots__ = ['esriRotateSymbolGeographic',
                 'esriRotateSymbolArithmetic']
    esriRotateSymbolGeographic = 0
    esriRotateSymbolArithmetic = 1

class esriOverposterCaps(Enumeration):
    __slots__ = ['esriCanPlaceLabels',
                 'esriCanPlaceSymbols',
                 'esriCanAddBarriers']
    esriCanPlaceLabels = 0
    esriCanPlaceSymbols = 1
    esriCanAddBarriers = 2

class esriOverposterPolygonPlacementMethod(Enumeration):
    __slots__ = ['esriAlwaysHorizontal',
                 'esriAlwaysStraight',
                 'esriMixedStrategy']
    esriAlwaysHorizontal = 0
    esriAlwaysStraight = 1
    esriMixedStrategy = 2

class esriPlacedObjectType(Enumeration):
    __slots__ = ['esriPlacedLabel',
                 'esriPlacedSymbol']
    esriPlacedLabel = 0
    esriPlacedSymbol = 1

class esriPlacementCode(Enumeration):
    __slots__ = ['esriPlacementOk',
                 'esriPlacementUnplaced',
                 'esriPlacementSystemError']
    esriPlacementOk = 0
    esriPlacementUnplaced = 1
    esriPlacementSystemError = 2

class esriLabelRotationType(Enumeration):
    __slots__ = ['esriRotateLabelGeographic',
                 'esriRotateLabelArithmetic',
                 'esriRotateLabelRadians',
                 'esriRotateLabelAV3']
    esriRotateLabelGeographic = 0
    esriRotateLabelArithmetic = 1
    esriRotateLabelRadians = 2
    esriRotateLabelAV3 = 3

class esriMaplexPlacementQuality(Enumeration):
    __slots__ = ['esriMaplexPlacementQualityLow',
                 'esriMaplexPlacementQualityMedium',
                 'esriMaplexPlacementQualityHigh']
    esriMaplexPlacementQualityLow = 1
    esriMaplexPlacementQualityMedium = 2
    esriMaplexPlacementQualityHigh = 3

class esriMaplexUnit(Enumeration):
    __slots__ = ['esriMaplexUnitMap',
                 'esriMaplexUnitMM',
                 'esriMaplexUnitInch',
                 'esriMaplexUnitPoint',
                 'esriMaplexUnitPercentage']
    esriMaplexUnitMap = 0
    esriMaplexUnitMM = 1
    esriMaplexUnitInch = 2
    esriMaplexUnitPoint = 3
    esriMaplexUnitPercentage = 4

class esriMaplexPointPlacementMethod(Enumeration):
    __slots__ = ['esriMaplexAroundPoint',
                 'esriMaplexCenteredOnPoint',
                 'esriMaplexNorthOfPoint',
                 'esriMaplexNortheastOfPoint',
                 'esriMaplexEastOfPoint',
                 'esriMaplexSoutheastOfPoint',
                 'esriMaplexSouthOfPoint',
                 'esriMaplexSouthwestOfPoint',
                 'esriMaplexWestOfPoint',
                 'esriMaplexNorthwestOfPoint']
    esriMaplexAroundPoint = 0
    esriMaplexCenteredOnPoint = 1
    esriMaplexNorthOfPoint = 2
    esriMaplexNortheastOfPoint = 3
    esriMaplexEastOfPoint = 4
    esriMaplexSoutheastOfPoint = 5
    esriMaplexSouthOfPoint = 6
    esriMaplexSouthwestOfPoint = 7
    esriMaplexWestOfPoint = 8
    esriMaplexNorthwestOfPoint = 9

class esriMaplexOffsetAlongLineMethod(Enumeration):
    __slots__ = ['esriMaplexBestPositionAlongLine',
                 'esriMaplexBeforeStartOfLine',
                 'esriMaplexAlongLineFromStart',
                 'esriMaplexAlongLineFromEnd',
                 'esriMaplexAfterEndOfLine']
    esriMaplexBestPositionAlongLine = 0
    esriMaplexBeforeStartOfLine = 1
    esriMaplexAlongLineFromStart = 2
    esriMaplexAlongLineFromEnd = 3
    esriMaplexAfterEndOfLine = 4

class esriMaplexLinePlacementMethod(Enumeration):
    __slots__ = ['esriMaplexCenteredHorizontalOnLine',
                 'esriMaplexCenteredStraightOnLine',
                 'esriMaplexCenteredCurvedOnLine',
                 'esriMaplexCenteredPerpendicularOnLine',
                 'esriMaplexOffsetHorizontalFromLine',
                 'esriMaplexOffsetStraightFromLine',
                 'esriMaplexOffsetCurvedFromLine',
                 'esriMaplexOffsetPerpendicularFromLine']
    esriMaplexCenteredHorizontalOnLine = 0
    esriMaplexCenteredStraightOnLine = 1
    esriMaplexCenteredCurvedOnLine = 2
    esriMaplexCenteredPerpendicularOnLine = 3
    esriMaplexOffsetHorizontalFromLine = 4
    esriMaplexOffsetStraightFromLine = 5
    esriMaplexOffsetCurvedFromLine = 6
    esriMaplexOffsetPerpendicularFromLine = 7

class esriMaplexPolygonPlacementMethod(Enumeration):
    __slots__ = ['esriMaplexHorizontalInPolygon',
                 'esriMaplexStraightInPolygon',
                 'esriMaplexCurvedInPolygon',
                 'esriMaplexHorizontalAroundPolygon',
                 'esriMaplexRepeatAlongBoundary',
                 'esriMaplexCurvedAroundPolygon']
    esriMaplexHorizontalInPolygon = 0
    esriMaplexStraightInPolygon = 1
    esriMaplexCurvedInPolygon = 2
    esriMaplexHorizontalAroundPolygon = 3
    esriMaplexRepeatAlongBoundary = 4
    esriMaplexCurvedAroundPolygon = 5

class esriMaplexConstrainOffset(Enumeration):
    __slots__ = ['esriMaplexNoConstraint',
                 'esriMaplexAboveLine',
                 'esriMaplexBelowLine',
                 'esriMaplexLeftOfLine',
                 'esriMaplexRightOfLine']
    esriMaplexNoConstraint = 0
    esriMaplexAboveLine = 1
    esriMaplexBelowLine = 2
    esriMaplexLeftOfLine = 3
    esriMaplexRightOfLine = 4

class esriMaplexLabelAnchorPoint(Enumeration):
    __slots__ = ['esriMaplexCenterOfLabel',
                 'esriMaplexNearestSideOfLabel',
                 'esriMaplexFurthestSideOfLabel']
    esriMaplexCenterOfLabel = 0
    esriMaplexNearestSideOfLabel = 1
    esriMaplexFurthestSideOfLabel = 2

class esriMaplexStackingJustification(Enumeration):
    __slots__ = ['esriMaplexChooseBestJustification',
                 'esriMaplexConstrainJustificationLeftOrRight',
                 'esriMaplexConstrainJustificationLeft',
                 'esriMaplexConstrainJustificationRight',
                 'esriMaplexConstrainJustificationCenter']
    esriMaplexChooseBestJustification = 0
    esriMaplexConstrainJustificationLeftOrRight = 1
    esriMaplexConstrainJustificationLeft = 2
    esriMaplexConstrainJustificationRight = 3
    esriMaplexConstrainJustificationCenter = 4

class esriMaplexMultiPartOption(Enumeration):
    __slots__ = ['esriMaplexOneLabelPerFeature',
                 'esriMaplexOneLabelPerPart',
                 'esriMaplexOneLabelPerSegment']
    esriMaplexOneLabelPerFeature = 0
    esriMaplexOneLabelPerPart = 1
    esriMaplexOneLabelPerSegment = 2

class esriMaplexRotationAlignmentType(Enumeration):
    __slots__ = ['esriMaplexRotationAlignmentStraight',
                 'esriMaplexRotationAlignmentHorizontal',
                 'esriMaplexRotationAlignmentPerpendicular']
    esriMaplexRotationAlignmentStraight = 0
    esriMaplexRotationAlignmentHorizontal = 1
    esriMaplexRotationAlignmentPerpendicular = 2

class esriMaplexZoneIdentifier(Enumeration):
    __slots__ = ['esriMaplexAboveLeft',
                 'esriMaplexAboveCenter',
                 'esriMaplexAboveRight',
                 'esriMaplexCenterRight',
                 'esriMaplexBelowRight',
                 'esriMaplexBelowCenter',
                 'esriMaplexBelowLeft',
                 'esriMaplexCenterLeft',
                 'esriMaplexCenter']
    esriMaplexAboveLeft = 0
    esriMaplexAboveCenter = 1
    esriMaplexAboveRight = 2
    esriMaplexCenterRight = 3
    esriMaplexBelowRight = 4
    esriMaplexBelowCenter = 5
    esriMaplexBelowLeft = 6
    esriMaplexCenterLeft = 7
    esriMaplexCenter = 8

class esriMaplexGraticuleAlignmentType(Enumeration):
    __slots__ = ['esriMaplexGAStraight',
                 'esriMaplexGAStraightNoFlip',
                 'esriMaplexGACurved',
                 'esriMaplexGACurvedNoFlip']
    esriMaplexGAStraight = 0
    esriMaplexGAStraightNoFlip = 1
    esriMaplexGACurved = 2
    esriMaplexGACurvedNoFlip = 3

class esriMaplexLineFeatureType(Enumeration):
    __slots__ = ['esriMaplexLineFeature',
                 'esriMaplexStreetFeature',
                 'esriMaplexStreetAddressRange',
                 'esriMaplexContourFeature',
                 'esriMaplexRiverFeature']
    esriMaplexLineFeature = 0
    esriMaplexStreetFeature = 1
    esriMaplexStreetAddressRange = 2
    esriMaplexContourFeature = 3
    esriMaplexRiverFeature = 4

class esriMaplexPolygonFeatureType(Enumeration):
    __slots__ = ['esriMaplexPolygonFeature',
                 'esriMaplexLandParcelFeature',
                 'esriMaplexRiverPolygonFeature',
                 'esriMaplexPolygonBoundaryFeature']
    esriMaplexPolygonFeature = 0
    esriMaplexLandParcelFeature = 1
    esriMaplexRiverPolygonFeature = 2
    esriMaplexPolygonBoundaryFeature = 3

class esriMaplexStrategyIdentifier(Enumeration):
    __slots__ = ['esriMaplexStrategyStacking',
                 'esriMaplexStrategyOverrun',
                 'esriMaplexStrategyFontCompression',
                 'esriMaplexStrategyFontReduction',
                 'esriMaplexStrategyAbbreviation']
    esriMaplexStrategyStacking = 0
    esriMaplexStrategyOverrun = 1
    esriMaplexStrategyFontCompression = 2
    esriMaplexStrategyFontReduction = 3
    esriMaplexStrategyAbbreviation = 4

class esriMaplexAnchorPointType(Enumeration):
    __slots__ = ['esriMaplexGeometricCenter',
                 'esriMaplexErodedCenter',
                 'esriMaplexPerimeter',
                 'esriMaplexUnclippedGeometricCenter']
    esriMaplexGeometricCenter = 0
    esriMaplexErodedCenter = 1
    esriMaplexPerimeter = 2
    esriMaplexUnclippedGeometricCenter = 3

class esriMaplexContourAlignmentType(Enumeration):
    __slots__ = ['esriMaplexUphillAlignment',
                 'esriMaplexPageAlignment']
    esriMaplexUphillAlignment = 0
    esriMaplexPageAlignment = 1

class esriMaplexContourLadderType(Enumeration):
    __slots__ = ['esriMaplexNoLadder',
                 'esriMaplexStraightLadder',
                 'esriMaplexCurvedLadder']
    esriMaplexNoLadder = 0
    esriMaplexStraightLadder = 1
    esriMaplexCurvedLadder = 2

class esriMaplexConnectionType(Enumeration):
    __slots__ = ['esriMaplexMinimizeLabels',
                 'esriMaplexUnambiguous']
    esriMaplexMinimizeLabels = 0
    esriMaplexUnambiguous = 1

class esriMaplexAbbrevType(Enumeration):
    __slots__ = ['esriMaplexAbbrevTypeTranslation',
                 'esriMaplexAbbrevTypeKeyword',
                 'esriMaplexAbbrevTypeEnding']
    esriMaplexAbbrevTypeTranslation = 0
    esriMaplexAbbrevTypeKeyword = 1
    esriMaplexAbbrevTypeEnding = 2

class esriMaplexKeyNumberHorizontalAlignment(Enumeration):
    __slots__ = ['esriMaplexKeyNumberHorizontalAlignmentAuto',
                 'esriMaplexKeyNumberHorizontalAlignmentLeft',
                 'esriMaplexKeyNumberHorizontalAlignmentRight']
    esriMaplexKeyNumberHorizontalAlignmentAuto = 0
    esriMaplexKeyNumberHorizontalAlignmentLeft = 1
    esriMaplexKeyNumberHorizontalAlignmentRight = 2

class esriMaplexKeyNumberResetType(Enumeration):
    __slots__ = ['esriMaplexKeyNumberResetTypeNone',
                 'esriMaplexKeyNumberResetTypeMaybe',
                 'esriMaplexKeyNumberResetTypeAlways']
    esriMaplexKeyNumberResetTypeNone = 0
    esriMaplexKeyNumberResetTypeMaybe = 1
    esriMaplexKeyNumberResetTypeAlways = 2

class esriLabelEnvLabelStyleMethod(Enumeration):
    __slots__ = ['esriUseFeatureLayerLabelStyle',
                 'esriChooseLabelStyle']
    esriUseFeatureLayerLabelStyle = 0
    esriChooseLabelStyle = 1

class esriLabelEnvPlacement(Enumeration):
    __slots__ = ['esriPlaceWhereClick',
                 'esriCalculateBestPlacement']
    esriPlaceWhereClick = 0
    esriCalculateBestPlacement = 1

class esriHyperlinkType(Enumeration):
    __slots__ = ['esriHyperlinkTypeDocument',
                 'esriHyperlinkTypeURL',
                 'esriHyperlinkTypeMacro',
                 'esriHyperlinkTypeScript']
    esriHyperlinkTypeDocument = 0
    esriHyperlinkTypeURL = 1
    esriHyperlinkTypeMacro = 2
    esriHyperlinkTypeScript = 3

class esriDataSampling(Enumeration):
    __slots__ = ['esriAllRecords',
                 'esriRandomRecords',
                 'esriEveryNthRecord']
    esriAllRecords = 0
    esriRandomRecords = 1
    esriEveryNthRecord = 2

class esriDataNormalization(Enumeration):
    __slots__ = ['esriNormalizeByField',
                 'esriNormalizeByLog',
                 'esriNormalizeByPercentOfTotal',
                 'esriNormalizeByArea',
                 'esriNormalizeByNothing']
    esriNormalizeByField = 0
    esriNormalizeByLog = 1
    esriNormalizeByPercentOfTotal = 2
    esriNormalizeByArea = 3
    esriNormalizeByNothing = 4

class esriValueRepresentations(Enumeration):
    __slots__ = ['esriValueRepUnknown',
                 'esriValueRepRadius',
                 'esriValueRepArea',
                 'esriValueRepDistance',
                 'esriValueRepWidth']
    esriValueRepUnknown = 0
    esriValueRepRadius = 1
    esriValueRepArea = 2
    esriValueRepDistance = 3
    esriValueRepWidth = 4

class esriLegendItemArrangement(Enumeration):
    __slots__ = ['esriPatchLabelDescription',
                 'esriPatchDescriptionLabel',
                 'esriLabelPatchDescription',
                 'esriLabelDescriptionPatch',
                 'esriDescriptionPatchLabel',
                 'esriDescriptionLabelPatch']
    esriPatchLabelDescription = 0
    esriPatchDescriptionLabel = 1
    esriLabelPatchDescription = 2
    esriLabelDescriptionPatch = 3
    esriDescriptionPatchLabel = 4
    esriDescriptionLabelPatch = 5

class esriMaintainDensityBy(Enumeration):
    __slots__ = ['esriMaintainDensityByDotSize',
                 'esriMaintainDensityByDotValue']
    esriMaintainDensityByDotSize = 0
    esriMaintainDensityByDotValue = 1

class esriSymbolRotation3DFlags(Enumeration):
    __slots__ = ['esriSymbolRotation3DNone',
                 'esriSymbolRotation3DUseExpressionX',
                 'esriSymbolRotation3DUseExpressionY',
                 'esriSymbolRotation3DUseExpressionZ',
                 'esriSymbolRotation3DRandomX',
                 'esriSymbolRotation3DRandomY',
                 'esriSymbolRotation3DRandomZ']
    esriSymbolRotation3DNone = 0
    esriSymbolRotation3DUseExpressionX = 1
    esriSymbolRotation3DUseExpressionY = 2
    esriSymbolRotation3DUseExpressionZ = 4
    esriSymbolRotation3DRandomX = 8
    esriSymbolRotation3DRandomY = 16
    esriSymbolRotation3DRandomZ = 32

class esriHTMLPopupStyle(Enumeration):
    __slots__ = ['esriHTMLPopupStyleTwoColumnTable',
                 'esriHTMLPopupStyleRedirectedHTML',
                 'esriHTMLPopupStyleXSLStylesheet']
    esriHTMLPopupStyleTwoColumnTable = 0
    esriHTMLPopupStyleRedirectedHTML = 1
    esriHTMLPopupStyleXSLStylesheet = 2

class esriTopologyRenderer(Enumeration):
    __slots__ = ['esriTRAreaErrors',
                 'esriTRLineErrors',
                 'esriTRPointErrors',
                 'esriTRAreaExceptions',
                 'esriTRLineExceptions',
                 'esriTRPointExceptions',
                 'esriTRDirtyAreas']
    esriTRAreaErrors = 0
    esriTRLineErrors = 1
    esriTRPointErrors = 2
    esriTRAreaExceptions = 3
    esriTRLineExceptions = 4
    esriTRPointExceptions = 5
    esriTRDirtyAreas = 6

class esriSizeRendererFlags(Enumeration):
    __slots__ = ['esriSizeRendererNone',
                 'esriSizeRendererUseExpression',
                 'esriSizeRendererRandom']
    esriSizeRendererNone = 0
    esriSizeRendererUseExpression = 1
    esriSizeRendererRandom = 2

class esriDimensionType(Enumeration):
    __slots__ = ['esriDimensionTypeAligned',
                 'esriDimensionTypeLinear']
    esriDimensionTypeAligned = 0
    esriDimensionTypeLinear = 1

class esriDimensionDisplay(Enumeration):
    __slots__ = ['esriDimensionDisplayBoth',
                 'esriDimensionDisplayBegin',
                 'esriDimensionDisplayEnd',
                 'esriDimensionDisplayNone']
    esriDimensionDisplayBoth = 0
    esriDimensionDisplayBegin = 1
    esriDimensionDisplayEnd = 2
    esriDimensionDisplayNone = 3

class esriDimensionTextDisplay(Enumeration):
    __slots__ = ['esriDimensionTDValueOnly',
                 'esriDimensionTDPrefixSuffix',
                 'esriDimensionTDExpression',
                 'esriDimensionTDNone']
    esriDimensionTDValueOnly = 0
    esriDimensionTDPrefixSuffix = 1
    esriDimensionTDExpression = 2
    esriDimensionTDNone = 3

class esriDimensionMarkerFit(Enumeration):
    __slots__ = ['esriDimensionMarkerFitNone',
                 'esriDimensionMarkerFitTolerance',
                 'esriDimensionMarkerFitText']
    esriDimensionMarkerFitNone = 0
    esriDimensionMarkerFitTolerance = 1
    esriDimensionMarkerFitText = 2

class esriDimensionTextFit(Enumeration):
    __slots__ = ['esriDimensionTextFitNone',
                 'esriDimensionTextFitMoveBegin',
                 'esriDimensionTextFitMoveEnd']
    esriDimensionTextFitNone = 0
    esriDimensionTextFitMoveBegin = 1
    esriDimensionTextFitMoveEnd = 2

class dimError(Enumeration):
    __slots__ = ['DIM_E_CONSTRUCTOR_TOOFEW_VERTICES',
                 'DIM_E_CONSTRUCTOR_TOOMANY_VERTICES',
                 'DIM_E_UNSUPPORTED_VERSION']
    DIM_E_CONSTRUCTOR_TOOFEW_VERTICES = -2147220991
    DIM_E_CONSTRUCTOR_TOOMANY_VERTICES = -2147220990
    DIM_E_UNSUPPORTED_VERSION = -2147220989

class annoError(Enumeration):
    __slots__ = ['ANNO_E_UNSUPPORTED_VERSION',
                 'ANNO_E_NULL_NOT_SUPPORTED',
                 'ANNO_E_FONT_NOT_FOUND',
                 'ANNO_E_INVALID_FONT_SIZE',
                 'ANNO_E_INVALID_ANGLE',
                 'ANNO_E_NO_SYM_OVERRIDE',
                 'ANNO_E_INVALID_SYM_ID']
    ANNO_E_UNSUPPORTED_VERSION = -2147220991
    ANNO_E_NULL_NOT_SUPPORTED = -2147220990
    ANNO_E_FONT_NOT_FOUND = -2147220989
    ANNO_E_INVALID_FONT_SIZE = -2147220988
    ANNO_E_INVALID_ANGLE = -2147220987
    ANNO_E_NO_SYM_OVERRIDE = -2147220986
    ANNO_E_INVALID_SYM_ID = -2147220985

class esriSymbolSubstituteType(Enumeration):
    __slots__ = ['esriSymbolSubstituteNone',
                 'esriSymbolSubstituteColor',
                 'esriSymbolSubstituteIndividualSubordinate',
                 'esriSymbolSubstituteIndividualDominant']
    esriSymbolSubstituteNone = 0
    esriSymbolSubstituteColor = 1
    esriSymbolSubstituteIndividualSubordinate = 2
    esriSymbolSubstituteIndividualDominant = 3

class esriAnnotationStorageType(Enumeration):
    __slots__ = ['esriMapAnnotation',
                 'esriDatabaseAnnotation']
    esriMapAnnotation = 0
    esriDatabaseAnnotation = 1

class esriLayerEventHint(Enumeration):
    __slots__ = ['esriLayerEventHintProperties',
                 'esriLayerEventHintVisibility',
                 'esriLayerEventHintLayerAddedToGroup',
                 'esriLayerEventHintLayerRemovedFromGroup',
                 'esriLayerEventHintLayerMovedWithinGroup']
    esriLayerEventHintProperties = 0
    esriLayerEventHintVisibility = 1
    esriLayerEventHintLayerAddedToGroup = 2
    esriLayerEventHintLayerRemovedFromGroup = 3
    esriLayerEventHintLayerMovedWithinGroup = 4

class esriConversionStatus(Enumeration):
    __slots__ = ['esriConversionStatusSuccess',
                 'esriConversionStatusWarnings',
                 'esriConversionStatusErrors']
    esriConversionStatusSuccess = 0
    esriConversionStatusWarnings = 1
    esriConversionStatusErrors = 2

class esriCachedMapServiceType(Enumeration):
    __slots__ = ['esriSingleFusedMapCache',
                 'esriIndividualLayerCaches']
    esriSingleFusedMapCache = 0
    esriIndividualLayerCaches = 1

class esriVertPosEnum(Enumeration):
    __slots__ = ['esriAbove',
                 'esriTop',
                 'esriOn',
                 'esriBottom',
                 'esriBelow']
    esriAbove = 0
    esriTop = 1
    esriOn = 2
    esriBottom = 3
    esriBelow = 4

class esriHorzPosEnum(Enumeration):
    __slots__ = ['esriBefore',
                 'esriLeft',
                 'esriCenter',
                 'esriRight',
                 'esriAfter']
    esriBefore = 0
    esriLeft = 1
    esriCenter = 2
    esriRight = 3
    esriAfter = 4

class esriCacheCompressionMode(Enumeration):
    __slots__ = ['esriMapCacheCompress',
                 'esriMapCacheDecompress']
    esriMapCacheCompress = 0
    esriMapCacheDecompress = 1

class esriCacheExporterMode(Enumeration):
    __slots__ = ['esriMapCacheExport',
                 'esriMapCacheImport']
    esriMapCacheExport = 0
    esriMapCacheImport = 1

class esriMapCacheStorageFormat(Enumeration):
    __slots__ = ['esriMapCacheStorageModeCompact',
                 'esriMapCacheStorageModeExploded']
    esriMapCacheStorageModeCompact = 0
    esriMapCacheStorageModeExploded = 1

class esriMapCacheUpdateMode(Enumeration):
    __slots__ = ['esriMapCacheUpdateRecreateMissing',
                 'esriMapCacheUpdateRecreateAll',
                 'esriMapCacheUpdateDelete']
    esriMapCacheUpdateRecreateMissing = 0
    esriMapCacheUpdateRecreateAll = 1
    esriMapCacheUpdateDelete = 2

class esriMappingMsgCodeEnum(Enumeration):
    __slots__ = ['esriMappingMsgCode_LayerDrawBegin',
                 'esriMappingMsgCode_LayerDrawEnd',
                 'esriMappingMsgCode_GroupLayerDrawBegin',
                 'esriMappingMsgCode_GroupLayerDrawEnd',
                 'esriMappingMsgCode_GeographyDrawBegin',
                 'esriMappingMsgCode_GeographyDrawEnd',
                 'esriMappingMsgCode_AnnotationDrawBegin',
                 'esriMappingMsgCode_AnnotationDrawEnd',
                 'esriMappingMsgCode_SelectionDrawBegin',
                 'esriMappingMsgCode_SelectionDrawEnd',
                 'esriMappingMsgCode_GraphicSelectionDrawBegin',
                 'esriMappingMsgCode_GraphicSelectionDrawEnd',
                 'esriMappingMsgCode_CustomDrawBegin',
                 'esriMappingMsgCode_CustomDrawEnd',
                 'esriMappingMsgCode_GraphicDrawBegin',
                 'esriMappingMsgCode_GraphicDrawEnd',
                 'esriMappingMsgCode_LabelingBegin',
                 'esriMappingMsgCode_LabelingEnd',
                 'esriMappingMsgCode_LabelingLayers',
                 'esriMappingMsgCode_FeatureCount',
                 'esriMappingMsgCode_GraphicCount',
                 'esriMappingMsgCode_ExecutingQuery',
                 'esriMappingMsgCode_DrawingAsMaskingLayer',
                 'esriMappingMsgCode_SymbolDrawTime',
                 'esriMappingMsgCode_Rendering',
                 'esriMappingMsgCode_LayerDrawingError']
    esriMappingMsgCode_LayerDrawBegin = 103000
    esriMappingMsgCode_LayerDrawEnd = 103001
    esriMappingMsgCode_GroupLayerDrawBegin = 103002
    esriMappingMsgCode_GroupLayerDrawEnd = 103003
    esriMappingMsgCode_GeographyDrawBegin = 103004
    esriMappingMsgCode_GeographyDrawEnd = 103005
    esriMappingMsgCode_AnnotationDrawBegin = 103006
    esriMappingMsgCode_AnnotationDrawEnd = 103007
    esriMappingMsgCode_SelectionDrawBegin = 103008
    esriMappingMsgCode_SelectionDrawEnd = 103009
    esriMappingMsgCode_GraphicSelectionDrawBegin = 103010
    esriMappingMsgCode_GraphicSelectionDrawEnd = 103011
    esriMappingMsgCode_CustomDrawBegin = 103012
    esriMappingMsgCode_CustomDrawEnd = 103013
    esriMappingMsgCode_GraphicDrawBegin = 103014
    esriMappingMsgCode_GraphicDrawEnd = 103015
    esriMappingMsgCode_LabelingBegin = 103016
    esriMappingMsgCode_LabelingEnd = 103017
    esriMappingMsgCode_LabelingLayers = 103018
    esriMappingMsgCode_FeatureCount = 103019
    esriMappingMsgCode_GraphicCount = 103020
    esriMappingMsgCode_ExecutingQuery = 103021
    esriMappingMsgCode_DrawingAsMaskingLayer = 103022
    esriMappingMsgCode_SymbolDrawTime = 103023
    esriMappingMsgCode_Rendering = 103024
    esriMappingMsgCode_LayerDrawingError = 103800

class esriMapTimePlayOption(Enumeration):
    __slots__ = ['esriMapTimeStopAfterPlaying',
                 'esriMapTimeRepeatAfterPlaying',
                 'esriMapTimeReverseAfterPlaying']
    esriMapTimeStopAfterPlaying = 0
    esriMapTimeRepeatAfterPlaying = 1
    esriMapTimeReverseAfterPlaying = 2

class esriMapTimeExtentOption(Enumeration):
    __slots__ = ['esriMapTimeExtentAllData',
                 'esriMapTimeExtentAllVisibleLayers',
                 'esriMapTimeExtentUndefined',
                 'esriMapTimeExtentSpecifiedLayer']
    esriMapTimeExtentAllData = 0
    esriMapTimeExtentAllVisibleLayers = 1
    esriMapTimeExtentUndefined = 2
    esriMapTimeExtentSpecifiedLayer = 3

class esriMapClipType(Enumeration):
    __slots__ = ['esriMapClipNone',
                 'esriMapClipShape',
                 'esriMapClipMapExtent',
                 'esriMapClipPageIndex']
    esriMapClipNone = 0
    esriMapClipShape = 1
    esriMapClipMapExtent = 2
    esriMapClipPageIndex = 3

class esriScaleBarPos(Enumeration):
    __slots__ = ['esriScaleBarAbove',
                 'esriScaleBarBeforeLabels',
                 'esriScaleBarAfterLabels',
                 'esriScaleBarBeforeBar',
                 'esriScaleBarAfterBar',
                 'esriScaleBarBelow',
                 'esriScaleBarAboveLeft',
                 'esriScaleBarAboveRight',
                 'esriScaleBarAboveEnds',
                 'esriScaleBarBeforeAndAfterLabels',
                 'esriScaleBarBeforeAndAfterBar',
                 'esriScaleBarBelowLeft',
                 'esriScaleBarBelowRight',
                 'esriScaleBarBelowEnds']
    esriScaleBarAbove = 0
    esriScaleBarBeforeLabels = 1
    esriScaleBarAfterLabels = 2
    esriScaleBarBeforeBar = 3
    esriScaleBarAfterBar = 4
    esriScaleBarBelow = 5
    esriScaleBarAboveLeft = 6
    esriScaleBarAboveRight = 7
    esriScaleBarAboveEnds = 8
    esriScaleBarBeforeAndAfterLabels = 9
    esriScaleBarBeforeAndAfterBar = 10
    esriScaleBarBelowLeft = 11
    esriScaleBarBelowRight = 12
    esriScaleBarBelowEnds = 13

class esriScaleBarFrequency(Enumeration):
    __slots__ = ['esriScaleBarNone',
                 'esriScaleBarOne',
                 'esriScaleBarMajorDivisions',
                 'esriScaleBarDivisions',
                 'esriScaleBarDivisionsAndFirstMidpoint',
                 'esriScaleBarDivisionsAndFirstSubdivisions',
                 'esriScaleBarDivisionsAndSubdivisions']
    esriScaleBarNone = 0
    esriScaleBarOne = 1
    esriScaleBarMajorDivisions = 2
    esriScaleBarDivisions = 3
    esriScaleBarDivisionsAndFirstMidpoint = 4
    esriScaleBarDivisionsAndFirstSubdivisions = 5
    esriScaleBarDivisionsAndSubdivisions = 6

class esriScaleBarResizeHint(Enumeration):
    __slots__ = ['esriScaleBarFixed',
                 'esriScaleBarAutoDivision',
                 'esriScaleBarAutoDivisions',
                 'esriScaleBarAutoDivisionAndDivisions']
    esriScaleBarFixed = 0
    esriScaleBarAutoDivision = 1
    esriScaleBarAutoDivisions = 2
    esriScaleBarAutoDivisionAndDivisions = 3

class esriScaleTextStyleEnum(Enumeration):
    __slots__ = ['esriScaleTextAbsolute',
                 'esriScaleTextRelative',
                 'esriScaleTextCustom']
    esriScaleTextAbsolute = 0
    esriScaleTextRelative = 1
    esriScaleTextCustom = 2

class esriNorthArrowType(Enumeration):
    __slots__ = ['esriSimpleNorth',
                 'esriTrueNorth']
    esriSimpleNorth = 0
    esriTrueNorth = 1

class esriBufferType(Enumeration):
    __slots__ = ['esriBufferAll',
                 'esriBufferOutside',
                 'esriBufferInside',
                 'esriBufferOutsideIncludeInside',
                 'esriBufferInsideExcludeRing']
    esriBufferAll = 0
    esriBufferOutside = 1
    esriBufferInside = 2
    esriBufferOutsideIncludeInside = 3
    esriBufferInsideExcludeRing = 4

class esriBufferSpatialReferenceType(Enumeration):
    __slots__ = ['esriMapSpatialReference',
                 'esriFeatureClassSpatialReference',
                 'esriFeatureOptimizedSpatialReference',
                 'esriFeatureSetOptimizedSpatialReference',
                 'esriOtherSpatialReference']
    esriMapSpatialReference = 0
    esriFeatureClassSpatialReference = 1
    esriFeatureOptimizedSpatialReference = 2
    esriFeatureSetOptimizedSpatialReference = 3
    esriOtherSpatialReference = 4

class esriScreenPosition(Enumeration):
    __slots__ = ['esriScreenPositionNone',
                 'esriScreenPositionTopLeft',
                 'esriScreenPositionTopCenter',
                 'esriScreenPositionTopRight',
                 'esriScreenPositionMiddleLeft',
                 'esriScreenPositionMiddleCenter',
                 'esriScreenPositionMiddleRight',
                 'esriScreenPositionBottomLeft',
                 'esriScreenPositionBottomCenter',
                 'esriScreenPositionBottomRight']
    esriScreenPositionNone = 0
    esriScreenPositionTopLeft = 1
    esriScreenPositionTopCenter = 2
    esriScreenPositionTopRight = 3
    esriScreenPositionMiddleLeft = 4
    esriScreenPositionMiddleCenter = 5
    esriScreenPositionMiddleRight = 6
    esriScreenPositionBottomLeft = 7
    esriScreenPositionBottomCenter = 8
    esriScreenPositionBottomRight = 9

class esriPageFormID(Enumeration):
    __slots__ = ['esriPageFormLetter',
                 'esriPageFormLegal',
                 'esriPageFormTabloid',
                 'esriPageFormC',
                 'esriPageFormD',
                 'esriPageFormE',
                 'esriPageFormA5',
                 'esriPageFormA4',
                 'esriPageFormA3',
                 'esriPageFormA2',
                 'esriPageFormA1',
                 'esriPageFormA0',
                 'esriPageFormCUSTOM',
                 'esriPageFormSameAsPrinter']
    esriPageFormLetter = 0
    esriPageFormLegal = 1
    esriPageFormTabloid = 2
    esriPageFormC = 3
    esriPageFormD = 4
    esriPageFormE = 5
    esriPageFormA5 = 6
    esriPageFormA4 = 7
    esriPageFormA3 = 8
    esriPageFormA2 = 9
    esriPageFormA1 = 10
    esriPageFormA0 = 11
    esriPageFormCUSTOM = 12
    esriPageFormSameAsPrinter = 13

class esriPageToPrinterMapping(Enumeration):
    __slots__ = ['esriPageMappingCrop',
                 'esriPageMappingScale',
                 'esriPageMappingTile']
    esriPageMappingCrop = 0
    esriPageMappingScale = 1
    esriPageMappingTile = 2

class esriGridAxisEnum(Enumeration):
    __slots__ = ['esriGridAxisNone',
                 'esriGridAxisTop',
                 'esriGridAxisBottom',
                 'esriGridAxisLeft',
                 'esriGridAxisRight']
    esriGridAxisNone = 0
    esriGridAxisTop = 1
    esriGridAxisBottom = 2
    esriGridAxisLeft = 3
    esriGridAxisRight = 4

class esriGridCornerEnum(Enumeration):
    __slots__ = ['esriGridCornerLowerLeft',
                 'esriGridCornerLowerRight',
                 'esriGridCornerUpperLeft',
                 'esriGridCornerUpperRight']
    esriGridCornerLowerLeft = 0
    esriGridCornerLowerRight = 1
    esriGridCornerUpperLeft = 2
    esriGridCornerUpperRight = 3

class esriDMSGridLabelType(Enumeration):
    __slots__ = ['esriDMSGridLabelStandard',
                 'esriDMSGridLabelStacked',
                 'esriDMSGridLabelDD',
                 'esriDMSGridLabelDM',
                 'esriDMSGridLabelDS']
    esriDMSGridLabelStandard = 0
    esriDMSGridLabelStacked = 1
    esriDMSGridLabelDD = 2
    esriDMSGridLabelDM = 3
    esriDMSGridLabelDS = 4

class esriBackgroundTabType(Enumeration):
    __slots__ = ['esriBackgroundTabRound',
                 'esriBackgroundTabRectangle',
                 'esriBackgroundTabRoundedRectangle']
    esriBackgroundTabRound = 0
    esriBackgroundTabRectangle = 1
    esriBackgroundTabRoundedRectangle = 2

class esriGridSquareLabelStyleEnum(Enumeration):
    __slots__ = ['esriGridSquareLabelCorners',
                 'esriGridSquareLabelCenter']
    esriGridSquareLabelCorners = 0
    esriGridSquareLabelCenter = 1

class esriMapDocumentType(Enumeration):
    __slots__ = ['esriMapDocumentTypeMxd',
                 'esriMapDocumentTypePmf',
                 'esriMapDocumentTypeLyr',
                 'esriMapDocumentTypeUnknown']
    esriMapDocumentTypeMxd = 0
    esriMapDocumentTypePmf = 1
    esriMapDocumentTypeLyr = 2
    esriMapDocumentTypeUnknown = 3

class esriMapDocumentVersionInfo(Enumeration):
    __slots__ = ['esriMapDocumentVersionInfoSuccess',
                 'esriMapDocumentVersionInfoFail',
                 'esriMapDocumentVersionInfoUnknown']
    esriMapDocumentVersionInfoSuccess = 0
    esriMapDocumentVersionInfoFail = 1
    esriMapDocumentVersionInfoUnknown = 2

class esriGlobeDocumentType(Enumeration):
    __slots__ = ['esriGlobeDocumentTypeGmx',
                 'esriGlobeDocumentTypePmf',
                 'esriGlobeDocumentTypeLyr',
                 'esriGlobeDocumentTypeUnknown']
    esriGlobeDocumentTypeGmx = 0
    esriGlobeDocumentTypePmf = 1
    esriGlobeDocumentTypeLyr = 2
    esriGlobeDocumentTypeUnknown = 3

class esriGlobeDocumentVersionInfo(Enumeration):
    __slots__ = ['esriGlobeDocumentVersionInfoSuccess',
                 'esriGlobeDocumentVersionInfoFail',
                 'esriGlobeDocumentVersionInfoUnknown']
    esriGlobeDocumentVersionInfoSuccess = 0
    esriGlobeDocumentVersionInfoFail = 1
    esriGlobeDocumentVersionInfoUnknown = 2

class esriRasterPyramidOptEnum(Enumeration):
    __slots__ = ['esriRasterPyramidAlwaysPrompt',
                 'esriRasterPyramidAlwaysBuild',
                 'esriRasterPyramidNeverBuild']
    esriRasterPyramidAlwaysPrompt = 0
    esriRasterPyramidAlwaysBuild = 1
    esriRasterPyramidNeverBuild = 2

class esriRasterRenderingModeEnum(Enumeration):
    __slots__ = ['esriRasterRenderingBlockMode',
                 'esriRasterRenderingTopToBottomMode',
                 'esriRasterRenderingFullMode']
    esriRasterRenderingBlockMode = 0
    esriRasterRenderingTopToBottomMode = 1
    esriRasterRenderingFullMode = 2

class esriImageServiceDataType(Enumeration):
    __slots__ = ['esriImageServiceDataTypeGeneric',
                 'esriImageServiceDataTypeRGB',
                 'esriImageServiceDataTypeElevation',
                 'esriImageServiceDataTypeThematic',
                 'esriImageServiceDataTypeProcessed']
    esriImageServiceDataTypeGeneric = 0
    esriImageServiceDataTypeRGB = 1
    esriImageServiceDataTypeElevation = 2
    esriImageServiceDataTypeThematic = 3
    esriImageServiceDataTypeProcessed = 4

class esriImageServiceSourceType(Enumeration):
    __slots__ = ['esriImageServiceSourceTypeDataset',
                 'esriImageServiceSourceTypeLayer',
                 'esriImageServiceSourceTypeCatalog',
                 'esriImageServiceSourceTypeMosaicDataset']
    esriImageServiceSourceTypeDataset = 0
    esriImageServiceSourceTypeLayer = 1
    esriImageServiceSourceTypeCatalog = 2
    esriImageServiceSourceTypeMosaicDataset = 3

class esriRasterLayerError(Enumeration):
    __slots__ = ['E_RASTERLAYER_UNKNOWN_ERROR']
    E_RASTERLAYER_UNKNOWN_ERROR = -2147217152

class esriRasterSelectionMaskFileFormat(Enumeration):
    __slots__ = ['esriMaskTiffUncompress',
                 'esriMaskImagineUncompress']
    esriMaskTiffUncompress = 0
    esriMaskImagineUncompress = 1

class esriRasterSelectionMaskOp(Enumeration):
    __slots__ = ['esriRasterSelectionMaskSET',
                 'esriRasterSelectionMaskCLEAR',
                 'esriRasterSelectionMaskINVERT',
                 'esriRasterSelectionMaskCOPY',
                 'esriRasterSelectionMaskAND']
    esriRasterSelectionMaskSET = 0
    esriRasterSelectionMaskCLEAR = 1
    esriRasterSelectionMaskINVERT = 2
    esriRasterSelectionMaskCOPY = 3
    esriRasterSelectionMaskAND = 4

class esriLayerSelectionMethod(Enumeration):
    __slots__ = ['esriLayerSelectIntersect',
                 'esriLayerSelectWithinADistance',
                 'esriLayerSelectCompletelyContains',
                 'esriLayerSelectCompletelyWithin',
                 'esriLayerSelectHaveTheirCenterIn',
                 'esriLayerSelectShareALineSegmentWith',
                 'esriLayerSelectBoundaryTouches',
                 'esriLayerSelectAreIdenticalTo',
                 'esriLayerSelectCrossedByTheOutlineOf',
                 'esriLayerSelectContains',
                 'esriLayerSelectContainedBy']
    esriLayerSelectIntersect = 0
    esriLayerSelectWithinADistance = 1
    esriLayerSelectCompletelyContains = 2
    esriLayerSelectCompletelyWithin = 3
    esriLayerSelectHaveTheirCenterIn = 4
    esriLayerSelectShareALineSegmentWith = 5
    esriLayerSelectBoundaryTouches = 6
    esriLayerSelectAreIdenticalTo = 7
    esriLayerSelectCrossedByTheOutlineOf = 8
    esriLayerSelectContains = 9
    esriLayerSelectContainedBy = 10

class esriImageFormat(Enumeration):
    __slots__ = ['esriImageNone',
                 'esriImageBMP',
                 'esriImageJPG',
                 'esriImageDIB',
                 'esriImageTIFF',
                 'esriImagePNG',
                 'esriImagePNG24',
                 'esriImageEMF',
                 'esriImagePS',
                 'esriImagePDF',
                 'esriImageAI',
                 'esriImageGIF',
                 'esriImageSVG',
                 'esriImageSVGZ',
                 'esriImagePNG32',
                 'esriImageJPGPNG',
                 'esriImageOptimalPNG']
    esriImageNone = -1
    esriImageBMP = 0
    esriImageJPG = 1
    esriImageDIB = 2
    esriImageTIFF = 3
    esriImagePNG = 4
    esriImagePNG24 = 5
    esriImageEMF = 6
    esriImagePS = 7
    esriImagePDF = 8
    esriImageAI = 9
    esriImageGIF = 10
    esriImageSVG = 11
    esriImageSVGZ = 12
    esriImagePNG32 = 13
    esriImageJPGPNG = 14
    esriImageOptimalPNG = 15

class esriImageReturnType(Enumeration):
    __slots__ = ['esriImageReturnURL',
                 'esriImageReturnMimeData']
    esriImageReturnURL = 0
    esriImageReturnMimeData = 1

class esriQueryResultFormat(Enumeration):
    __slots__ = ['esriQueryResultRecordSetAsObject',
                 'esriQueryResultKMLAsMime',
                 'esriQueryResultKMLAsURL',
                 'esriQueryResultJsonAsMime',
                 'esriQueryResultJsonAsURL',
                 'esriQueryResultAMFAsMime',
                 'esriQueryResultAMFAsURL']
    esriQueryResultRecordSetAsObject = 0
    esriQueryResultKMLAsMime = 1
    esriQueryResultKMLAsURL = 2
    esriQueryResultJsonAsMime = 3
    esriQueryResultJsonAsURL = 4
    esriQueryResultAMFAsMime = 5
    esriQueryResultAMFAsURL = 6

class esriServerHTMLPopupType(Enumeration):
    __slots__ = ['esriServerHTMLPopupTypeNone',
                 'esriServerHTMLPopupTypeAsURL',
                 'esriServerHTMLPopupTypeAsHTMLText']
    esriServerHTMLPopupTypeNone = 0
    esriServerHTMLPopupTypeAsURL = 1
    esriServerHTMLPopupTypeAsHTMLText = 2

class esriRelateResultFormat(Enumeration):
    __slots__ = ['esriRelateResultRelatedRecordSetAsObject',
                 'esriRelateResultJsonAsMime',
                 'esriRelateResultJsonAsURL',
                 'esriRelateResultAMFAsMime',
                 'esriRelateResultAMFAsURL']
    esriRelateResultRelatedRecordSetAsObject = 0
    esriRelateResultJsonAsMime = 1
    esriRelateResultJsonAsURL = 2
    esriRelateResultAMFAsMime = 3
    esriRelateResultAMFAsURL = 4

class esriLabelExpressionType(Enumeration):
    __slots__ = ['esriLabelExpressionSimple',
                 'esriLabelExpressionPython',
                 'esriLabelExpressionVBScript',
                 'esriLabelExpressionJScript']
    esriLabelExpressionSimple = 0
    esriLabelExpressionPython = 1
    esriLabelExpressionVBScript = 2
    esriLabelExpressionJScript = 3

class esriServerPointLabelPlacementType(Enumeration):
    __slots__ = ['esriServerPointLabelPlacementAboveCenter',
                 'esriServerPointLabelPlacementAboveLeft',
                 'esriServerPointLabelPlacementAboveRight',
                 'esriServerPointLabelPlacementBelowCenter',
                 'esriServerPointLabelPlacementBelowLeft',
                 'esriServerPointLabelPlacementBelowRight',
                 'esriServerPointLabelPlacementCenterCenter',
                 'esriServerPointLabelPlacementCenterLeft',
                 'esriServerPointLabelPlacementCenterRight']
    esriServerPointLabelPlacementAboveCenter = 0
    esriServerPointLabelPlacementAboveLeft = 1
    esriServerPointLabelPlacementAboveRight = 2
    esriServerPointLabelPlacementBelowCenter = 3
    esriServerPointLabelPlacementBelowLeft = 4
    esriServerPointLabelPlacementBelowRight = 5
    esriServerPointLabelPlacementCenterCenter = 6
    esriServerPointLabelPlacementCenterLeft = 7
    esriServerPointLabelPlacementCenterRight = 8

class esriServerLineLabelPlacementType(Enumeration):
    __slots__ = ['esriServerLinePlacementAboveAfter',
                 'esriServerLinePlacementAboveAlong',
                 'esriServerLinePlacementAboveBefore',
                 'esriServerLinePlacementAboveStart',
                 'esriServerLinePlacementAboveEnd',
                 'esriServerLinePlacementBelowAfter',
                 'esriServerLinePlacementBelowAlong',
                 'esriServerLinePlacementBelowBefore',
                 'esriServerLinePlacementBelowStart',
                 'esriServerLinePlacementBelowEnd',
                 'esriServerLinePlacementCenterAfter',
                 'esriServerLinePlacementCenterAlong',
                 'esriServerLinePlacementCenterBefore',
                 'esriServerLinePlacementCenterStart',
                 'esriServerLinePlacementCenterEnd']
    esriServerLinePlacementAboveAfter = 0
    esriServerLinePlacementAboveAlong = 1
    esriServerLinePlacementAboveBefore = 2
    esriServerLinePlacementAboveStart = 3
    esriServerLinePlacementAboveEnd = 4
    esriServerLinePlacementBelowAfter = 5
    esriServerLinePlacementBelowAlong = 6
    esriServerLinePlacementBelowBefore = 7
    esriServerLinePlacementBelowStart = 8
    esriServerLinePlacementBelowEnd = 9
    esriServerLinePlacementCenterAfter = 10
    esriServerLinePlacementCenterAlong = 11
    esriServerLinePlacementCenterBefore = 12
    esriServerLinePlacementCenterStart = 13
    esriServerLinePlacementCenterEnd = 14

class esriServerPolygonLabelPlacementType(Enumeration):
    __slots__ = ['esriServerPolygonPlacementAlwaysHorizontal']
    esriServerPolygonPlacementAlwaysHorizontal = 0

class esriServerPictureOutputType(Enumeration):
    __slots__ = ['esriServerPictureOutputAsPNG',
                 'esriServerPictureOutputAsPNGInMime',
                 'esriServerPictureOutputAsIPicture']
    esriServerPictureOutputAsPNG = 0
    esriServerPictureOutputAsPNGInMime = 1
    esriServerPictureOutputAsIPicture = 2

class esriDataStatType(Enumeration):
    __slots__ = ['esriDataStatTypeCount',
                 'esriDataStatTypeSum',
                 'esriDataStatTypeMin',
                 'esriDataStatTypeMax',
                 'esriDataStatTypeAverage',
                 'esriDataStatTypeStdDev',
                 'esriDataStatTypeVariance']
    esriDataStatTypeCount = 0
    esriDataStatTypeSum = 1
    esriDataStatTypeMin = 2
    esriDataStatTypeMax = 3
    esriDataStatTypeAverage = 4
    esriDataStatTypeStdDev = 5
    esriDataStatTypeVariance = 6

class esriClassifyMethod(Enumeration):
    __slots__ = ['esriClassifyNaturalBreaks',
                 'esriClassifyEqualInterval',
                 'esriClassifyQuantile',
                 'esriClassifyStandardDeviation',
                 'esriClassifyGeometricalInterval']
    esriClassifyNaturalBreaks = 0
    esriClassifyEqualInterval = 1
    esriClassifyQuantile = 2
    esriClassifyStandardDeviation = 3
    esriClassifyGeometricalInterval = 4

class esriIdentifyOption(Enumeration):
    __slots__ = ['esriIdentifyAllLayers',
                 'esriIdentifyVisibleLayers',
                 'esriIdentifyTopmost',
                 'esriIdentifyTopOneWithHTMLPopup',
                 'esriIdentifyVisibleWithHTMLPopup']
    esriIdentifyAllLayers = -1
    esriIdentifyVisibleLayers = -2
    esriIdentifyTopmost = -3
    esriIdentifyTopOneWithHTMLPopup = -4
    esriIdentifyVisibleWithHTMLPopup = -5

class esriFindOption(Enumeration):
    __slots__ = ['esriFindAllLayers',
                 'esriFindVisibleLayers']
    esriFindAllLayers = -1
    esriFindVisibleLayers = -2

class esriMapServerMsgCodeEnum(Enumeration):
    __slots__ = ['esriMapServerMsgCode_MessageArrival_GetDocumentInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetDocumentInfo',
                 'esriMapServerMsgCode_MessageArrival_GetMapCount',
                 'esriMapServerMsgCode_MessageProcessed_GetMapCount',
                 'esriMapServerMsgCode_MessageArrival_GetMapName',
                 'esriMapServerMsgCode_MessageProcessed_GetMapName',
                 'esriMapServerMsgCode_MessageArrival_GetDefaultMapName',
                 'esriMapServerMsgCode_MessageProcessed_GetDefaultMapName',
                 'esriMapServerMsgCode_MessageArrival_GetServerInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetServerInfo',
                 'esriMapServerMsgCode_MessageArrival_ExportMapImage',
                 'esriMapServerMsgCode_MessageProcessed_ExportMapImage',
                 'esriMapServerMsgCode_MessageArrival_ExportScaleBar',
                 'esriMapServerMsgCode_MessageProcessed_ExportScaleBar',
                 'esriMapServerMsgCode_MessageArrival_Find',
                 'esriMapServerMsgCode_MessageProcessed_Find',
                 'esriMapServerMsgCode_MessageArrival_Identify',
                 'esriMapServerMsgCode_MessageProcessed_Identify',
                 'esriMapServerMsgCode_MessageArrival_QueryFeatureCount',
                 'esriMapServerMsgCode_MessageProcessed_QueryFatureCount',
                 'esriMapServerMsgCode_MessageArrival_QueryFeatureIDs',
                 'esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs',
                 'esriMapServerMsgCode_MessageArrival_QueryFeatureData',
                 'esriMapServerMsgCode_MessageProcessed_QueryFeatureData',
                 'esriMapServerMsgCode_MessageArrival_QueryFeatureCount2',
                 'esriMapServerMsgCode_MessageProcessed_QueryFeatureCount2',
                 'esriMapServerMsgCode_MessageArrival_QueryFeatureIDs2',
                 'esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs2',
                 'esriMapServerMsgCode_MessageArrival_QueryFeatureData2',
                 'esriMapServerMsgCode_MessageProcessed_QueryFeatureData2',
                 'esriMapServerMsgCode_MessageArrival_QueryHyperlinks',
                 'esriMapServerMsgCode_MessageProcessed_QueryHyperlinks',
                 'esriMapServerMsgCode_MessageArrival_ComputeScale',
                 'esriMapServerMsgCode_MessageProcessed_ComputeScale',
                 'esriMapServerMsgCode_MessageArrival_ComputeDistance',
                 'esriMapServerMsgCode_MessageProcessed_ComputeDistance',
                 'esriMapServerMsgCode_MessageArrival_ToMapPoints',
                 'esriMapServerMsgCode_MessageProcessed_ToMapPoints',
                 'esriMapServerMsgCode_MessageArrival_FromMapPoints',
                 'esriMapServerMsgCode_MessageProcessed_FromMapPoints',
                 'esriMapServerMsgCode_MessageArrival_GetLegendInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetLegendInfo',
                 'esriMapServerMsgCode_MessageArrival_GetSQLSyntaxInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetSQLSyntaxInfo',
                 'esriMapServerMsgCode_MessageArrival_GetSupportedImageReturnTypes',
                 'esriMapServerMsgCode_MessageProcessed_GetSupportedImageReturnTypes',
                 'esriMapServerMsgCode_MessageArrival_IsFixedScaleMap',
                 'esriMapServerMsgCode_MessageProcessed_IsFixedScaleMap',
                 'esriMapServerMsgCode_MessageArrival_HasSingleFusedMapCache',
                 'esriMapServerMsgCode_MessageProcessed_HasSingleFusedMapCache',
                 'esriMapServerMsgCode_MessageArrival_GetTileCacheInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetTileCacheInfo',
                 'esriMapServerMsgCode_MessageArrival_GetTileImageInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetTileImageInfo',
                 'esriMapServerMsgCode_MessageArrival_GetMapTile',
                 'esriMapServerMsgCode_MessageProcessed_GetMapTile',
                 'esriMapServerMsgCode_MessageArrival_HasLayerCache',
                 'esriMapServerMsgCode_MessageProcessed_HasLayerCache',
                 'esriMapServerMsgCode_MessageArrival_getLayerTile',
                 'esriMapServerMsgCode_MessageProcessed_GetLayerTile',
                 'esriMapServerMsgCode_MessageArrival_GetVirtualCacheDirectory',
                 'esriMapServerMsgCode_MessageProcessed_GetVirtualCacheDirectory',
                 'esriMapServerMsgCode_MessageArrival_GetCacheName',
                 'esriMapServerMsgCode_MessageProcessed_GetCacheName',
                 'esriMapServerMsgCode_MessageArrival_GetCacheDescriptionInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetCacheDescriptionInfo',
                 'esriMapServerMsgCode_MessageArrival_GetCacheControlInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetCacheControlInfo',
                 'esriMapServerMsgCode_MessageArrival_GetServiceConfigurationInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetServiceConfigurationInfo',
                 'esriMapServerMsgCode_MessageArrival_ExportLayout',
                 'esriMapServerMsgCode_MessageProcessed_ExportLayout',
                 'esriMapServerMsgCode_MessageArrival_ExportLegend',
                 'esriMapServerMsgCode_MessageProcessed_ExportLegend',
                 'esriMapServerMsgCode_MessageArrival_ExportNorthArrow',
                 'esriMapServerMsgCode_MessageProcessed_ExportNorthArrow',
                 'esriMapServerMsgCode_MessageArrival_FromPagePoints',
                 'esriMapServerMsgCode_MessageProcessed_FromPagePoints',
                 'esriMapServerMsgCode_MessageArrival_ToPagePoints',
                 'esriMapServerMsgCode_MessageProcessed_ToPagePoints',
                 'esriMapServerMsgCode_MessageArrival_ApplyMapDescription',
                 'esriMapServerMsgCode_MessageProcessed_ApplyMapDescription',
                 'esriMapServerMsgCode_MessageArrival_RefreshServerObjecs',
                 'esriMapServerMsgCode_MessageProcessed_RefreshServerObjecs',
                 'esriMapServerMsgCode_Layer_Find_Start',
                 'esriMapServerMsgCode_Layer_Find_End',
                 'esriMapServerMsgCode_Layer_Identify_Start',
                 'esriMapServerMsgCode_Layer_Identify_End',
                 'esriMapServerMsgCode_Layer_QueryHyperlinks_Start',
                 'esriMapServerMsgCode_Layer_QueryHyperlinks_End',
                 'esriMapServerMsgCode_Layer_GetLegendInfo_Start',
                 'esriMapServerMsgCode_Layer_GetLegendInfo_End',
                 'esriMapServerMsgCode_MapReaderOpen_Start',
                 'esriMapServerMsgCode_MapReaderOpen_End',
                 'esriMapServerMsgCode_Preparation_Start',
                 'esriMapServerMsgCode_Preparation_End',
                 'esriMapServerMsgCode_QueryOperation_Start',
                 'esriMapServerMsgCode_QueryOperation_End',
                 'esriMapServerMsgCode_ImageGeneration_Started',
                 'esriMapServerMsgCode_ImageGeneration_End',
                 'esriMapServerMsgCode_MessageArrival_QueryRelatedRecords',
                 'esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords',
                 'esriMapServerMsgCode_MessageArrival_QueryRowCount',
                 'esriMapServerMsgCode_MessageProcessed_QueryRowCount',
                 'esriMapServerMsgCode_MessageArrival_QueryRowIDs',
                 'esriMapServerMsgCode_MessageProcessed_QueryRowIDs',
                 'esriMapServerMsgCode_MessageArrival_QueryData',
                 'esriMapServerMsgCode_MessageProcessed_QueryData',
                 'esriMapServerMsgCode_MessageArrival_GetCacheStorageInfo',
                 'esriMapServerMsgCode_MessageProcessed_GetCacheStorageInfo',
                 'esriMapServerMsgCode_MessageArrival_QueryRasterValue',
                 'esriMapServerMsgCode_MessageProcessed_QueryRasterValue',
                 'esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos',
                 'esriMapServerMsgCode_MessageProcessed_QueryAttachmentData',
                 'esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos',
                 'esriMapServerMsgCode_MessageArrival_QueryAttachmentData',
                 'esriMapServerMsgCode_MessageArrival_QueryHTMLPopups',
                 'esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups',
                 'esriMapServerMsgCode_MessageArrival_GetDefaultLayerDrawingDescriptions',
                 'esriMapServerMsgCode_MessageProcessed_GetDefaultLayerDrawingDescriptions',
                 'esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos',
                 'esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos',
                 'esriMapServerMsgCode_MessageArrival_QueryRelatedRecords2',
                 'esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords2',
                 'esriMapServerMsgCode_MessageArrival_QueryRasterValue2',
                 'esriMapServerMsgCode_MessageProcessed_QueryRasterValue2',
                 'esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos2',
                 'esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos2',
                 'esriMapServerMsgCode_MessageArrival_QueryAttachmentData2',
                 'esriMapServerMsgCode_MessageProcessed_QueryAttachmentData2',
                 'esriMapServerMsgCode_MessageArrival_QueryHTMLPopups2',
                 'esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups2',
                 'esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos2',
                 'esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos2',
                 'esriMapServerMsgCode_MessageArrival_QueryDataStatistics',
                 'esriMapServerMsgCode_MessageProcessed_QueryDataStatistics',
                 'esriMapServerMsgCode_MessageArrival_GenerateDataClasses',
                 'esriMapServerMsgCode_MessageProcessed_GenerateDataClasses',
                 'esriMapServerMsgCode_MessageInput_ExportMapImage',
                 'esriMapServerMsgCode_MapServerFailed',
                 'esriMapServerMsgCode_MapServerStartedWithInvalidLayers',
                 'esriMapServerMsgCode_InvalidLicense',
                 'esriMapServerMsgCode_UnsupportedRequest',
                 'esriMapServerMsgCode_CapabilityUnsupported',
                 'esriMapServerMsgCode_InvisibleOrInvalidFieldInSubField',
                 'esriMapServerMsgCode_DisconnectedFromData',
                 'esriMapServerMsgCode_SecureLayersEmbedded',
                 'esriMapServerMsgCode_FileInvalid',
                 'esriMapServerMsgCode_FileReadableByArcReaderOnly',
                 'esriMapServerMsgCode_PMFUnservableReason',
                 'esriMapServerMsgCode_PMFFilePasswordProtexted',
                 'esriMapServerMsgCode_PMFFileHasTimeOut',
                 'esriMapServerMsgCode_PMFReadMapError',
                 'esriMapServerMsgCode_PMFFileCanNotBeOpened',
                 'esriMapServerMsgCode_PMFGlobeEmbedded',
                 'esriMapServerMsgCode_FileOpenFailed',
                 'esriMapServerMsgCode_PMFInvalidFileType',
                 'esriMapServerMsgCode_PMFUnknownError',
                 'esriMapServerMsgCode_MissingParameter',
                 'esriMapServerMsgCode_OutputDirectoryNotFound',
                 'esriMapServerMsgCode_OutputDirectoryAccessDenied',
                 'esriMapServerMsgCode_PropertyFilePathUndefined',
                 'esriMapServerMsgCode_IsCacheMissing',
                 'esriMapServerMsgCode_CacheOnDemandMissing',
                 'esriMapServerMsgCode_IgnoreCacheMissing',
                 'esriMapServerMsgCode_ClientCachingAllowedMissing',
                 'esriMapServerMsgCode_OnStartFailed',
                 'esriMapServerMsgCode_OnStopFailed',
                 'esriMapServerMsgCode_CanNotIgnorecacheIfDisconnected',
                 'esriMapServerMsgCode_CanNotCacheOnDemandIfDisconnected',
                 'esriMapServerMsgCode_CanNotCacheOnDemandAndIgnoreCache',
                 'esriMapServerMsgCode_MissingServerEnvironment',
                 'esriMapServerMsgCode_LackingServerAdminPrevileges',
                 'esriMapServerMsgCode_CanNotConnectToCache',
                 'esriMapServerMsgCode_WMSNeedsOutputDirectory',
                 'esriMapServerMsgCode_MapNotFound',
                 'esriMapServerMsgCode_GeneralGeoDatabaseError',
                 'esriMapServerMsgCode_LayerIDNotFound',
                 'esriMapServerMsgCode_FieldNotFound',
                 'esriMapServerMsgCode_FormatNotSupported',
                 'esriMapServerMsgCode_ImageGenerationFailed',
                 'esriMapServerMsgCode_TableHasNoOIDHenceQueryFailed',
                 'esriMapServerMsgCode_DefaultSymbolGenerated',
                 'esriMapServerMsgCode_TooManyDomains',
                 'esriMapServerMsgCode_SymbologyNotConverted',
                 'esriMapServerMsgCode_LayerDrawingDescriptionNotValid',
                 'esriMapServerMsgCode_InvalidEmbeddedFont',
                 'esriMapServerMsgCode_DynamicDataSourceError',
                 'esriMapServerMsgCode_InvalidWhereClauseOrDefinitionExpression']
    esriMapServerMsgCode_MessageArrival_GetDocumentInfo = 10000
    esriMapServerMsgCode_MessageProcessed_GetDocumentInfo = 10001
    esriMapServerMsgCode_MessageArrival_GetMapCount = 10002
    esriMapServerMsgCode_MessageProcessed_GetMapCount = 10003
    esriMapServerMsgCode_MessageArrival_GetMapName = 10004
    esriMapServerMsgCode_MessageProcessed_GetMapName = 10005
    esriMapServerMsgCode_MessageArrival_GetDefaultMapName = 10006
    esriMapServerMsgCode_MessageProcessed_GetDefaultMapName = 10007
    esriMapServerMsgCode_MessageArrival_GetServerInfo = 10008
    esriMapServerMsgCode_MessageProcessed_GetServerInfo = 10009
    esriMapServerMsgCode_MessageArrival_ExportMapImage = 10010
    esriMapServerMsgCode_MessageProcessed_ExportMapImage = 10011
    esriMapServerMsgCode_MessageArrival_ExportScaleBar = 10012
    esriMapServerMsgCode_MessageProcessed_ExportScaleBar = 10013
    esriMapServerMsgCode_MessageArrival_Find = 10014
    esriMapServerMsgCode_MessageProcessed_Find = 10015
    esriMapServerMsgCode_MessageArrival_Identify = 10016
    esriMapServerMsgCode_MessageProcessed_Identify = 10017
    esriMapServerMsgCode_MessageArrival_QueryFeatureCount = 10018
    esriMapServerMsgCode_MessageProcessed_QueryFatureCount = 10019
    esriMapServerMsgCode_MessageArrival_QueryFeatureIDs = 10020
    esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs = 10021
    esriMapServerMsgCode_MessageArrival_QueryFeatureData = 10022
    esriMapServerMsgCode_MessageProcessed_QueryFeatureData = 10023
    esriMapServerMsgCode_MessageArrival_QueryFeatureCount2 = 10024
    esriMapServerMsgCode_MessageProcessed_QueryFeatureCount2 = 10025
    esriMapServerMsgCode_MessageArrival_QueryFeatureIDs2 = 10026
    esriMapServerMsgCode_MessageProcessed_QueryFeatureIDs2 = 10027
    esriMapServerMsgCode_MessageArrival_QueryFeatureData2 = 10028
    esriMapServerMsgCode_MessageProcessed_QueryFeatureData2 = 10029
    esriMapServerMsgCode_MessageArrival_QueryHyperlinks = 10030
    esriMapServerMsgCode_MessageProcessed_QueryHyperlinks = 10031
    esriMapServerMsgCode_MessageArrival_ComputeScale = 10032
    esriMapServerMsgCode_MessageProcessed_ComputeScale = 10033
    esriMapServerMsgCode_MessageArrival_ComputeDistance = 10034
    esriMapServerMsgCode_MessageProcessed_ComputeDistance = 10035
    esriMapServerMsgCode_MessageArrival_ToMapPoints = 10036
    esriMapServerMsgCode_MessageProcessed_ToMapPoints = 10037
    esriMapServerMsgCode_MessageArrival_FromMapPoints = 10038
    esriMapServerMsgCode_MessageProcessed_FromMapPoints = 10039
    esriMapServerMsgCode_MessageArrival_GetLegendInfo = 10040
    esriMapServerMsgCode_MessageProcessed_GetLegendInfo = 10041
    esriMapServerMsgCode_MessageArrival_GetSQLSyntaxInfo = 10042
    esriMapServerMsgCode_MessageProcessed_GetSQLSyntaxInfo = 10043
    esriMapServerMsgCode_MessageArrival_GetSupportedImageReturnTypes = 10044
    esriMapServerMsgCode_MessageProcessed_GetSupportedImageReturnTypes = 10045
    esriMapServerMsgCode_MessageArrival_IsFixedScaleMap = 10046
    esriMapServerMsgCode_MessageProcessed_IsFixedScaleMap = 10047
    esriMapServerMsgCode_MessageArrival_HasSingleFusedMapCache = 10048
    esriMapServerMsgCode_MessageProcessed_HasSingleFusedMapCache = 10049
    esriMapServerMsgCode_MessageArrival_GetTileCacheInfo = 10050
    esriMapServerMsgCode_MessageProcessed_GetTileCacheInfo = 10051
    esriMapServerMsgCode_MessageArrival_GetTileImageInfo = 10052
    esriMapServerMsgCode_MessageProcessed_GetTileImageInfo = 10053
    esriMapServerMsgCode_MessageArrival_GetMapTile = 10054
    esriMapServerMsgCode_MessageProcessed_GetMapTile = 10055
    esriMapServerMsgCode_MessageArrival_HasLayerCache = 10056
    esriMapServerMsgCode_MessageProcessed_HasLayerCache = 10057
    esriMapServerMsgCode_MessageArrival_getLayerTile = 10058
    esriMapServerMsgCode_MessageProcessed_GetLayerTile = 10059
    esriMapServerMsgCode_MessageArrival_GetVirtualCacheDirectory = 10060
    esriMapServerMsgCode_MessageProcessed_GetVirtualCacheDirectory = 10061
    esriMapServerMsgCode_MessageArrival_GetCacheName = 10062
    esriMapServerMsgCode_MessageProcessed_GetCacheName = 10063
    esriMapServerMsgCode_MessageArrival_GetCacheDescriptionInfo = 10064
    esriMapServerMsgCode_MessageProcessed_GetCacheDescriptionInfo = 10065
    esriMapServerMsgCode_MessageArrival_GetCacheControlInfo = 10066
    esriMapServerMsgCode_MessageProcessed_GetCacheControlInfo = 10067
    esriMapServerMsgCode_MessageArrival_GetServiceConfigurationInfo = 10068
    esriMapServerMsgCode_MessageProcessed_GetServiceConfigurationInfo = 10069
    esriMapServerMsgCode_MessageArrival_ExportLayout = 10070
    esriMapServerMsgCode_MessageProcessed_ExportLayout = 10071
    esriMapServerMsgCode_MessageArrival_ExportLegend = 10072
    esriMapServerMsgCode_MessageProcessed_ExportLegend = 10073
    esriMapServerMsgCode_MessageArrival_ExportNorthArrow = 10074
    esriMapServerMsgCode_MessageProcessed_ExportNorthArrow = 10075
    esriMapServerMsgCode_MessageArrival_FromPagePoints = 10076
    esriMapServerMsgCode_MessageProcessed_FromPagePoints = 10077
    esriMapServerMsgCode_MessageArrival_ToPagePoints = 10078
    esriMapServerMsgCode_MessageProcessed_ToPagePoints = 10079
    esriMapServerMsgCode_MessageArrival_ApplyMapDescription = 10080
    esriMapServerMsgCode_MessageProcessed_ApplyMapDescription = 10081
    esriMapServerMsgCode_MessageArrival_RefreshServerObjecs = 10082
    esriMapServerMsgCode_MessageProcessed_RefreshServerObjecs = 10083
    esriMapServerMsgCode_Layer_Find_Start = 10084
    esriMapServerMsgCode_Layer_Find_End = 10085
    esriMapServerMsgCode_Layer_Identify_Start = 10086
    esriMapServerMsgCode_Layer_Identify_End = 10087
    esriMapServerMsgCode_Layer_QueryHyperlinks_Start = 10088
    esriMapServerMsgCode_Layer_QueryHyperlinks_End = 10089
    esriMapServerMsgCode_Layer_GetLegendInfo_Start = 10090
    esriMapServerMsgCode_Layer_GetLegendInfo_End = 10091
    esriMapServerMsgCode_MapReaderOpen_Start = 10092
    esriMapServerMsgCode_MapReaderOpen_End = 10093
    esriMapServerMsgCode_Preparation_Start = 10094
    esriMapServerMsgCode_Preparation_End = 10095
    esriMapServerMsgCode_QueryOperation_Start = 10096
    esriMapServerMsgCode_QueryOperation_End = 10097
    esriMapServerMsgCode_ImageGeneration_Started = 10098
    esriMapServerMsgCode_ImageGeneration_End = 10099
    esriMapServerMsgCode_MessageArrival_QueryRelatedRecords = 10100
    esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords = 10101
    esriMapServerMsgCode_MessageArrival_QueryRowCount = 10102
    esriMapServerMsgCode_MessageProcessed_QueryRowCount = 10103
    esriMapServerMsgCode_MessageArrival_QueryRowIDs = 10104
    esriMapServerMsgCode_MessageProcessed_QueryRowIDs = 10105
    esriMapServerMsgCode_MessageArrival_QueryData = 10106
    esriMapServerMsgCode_MessageProcessed_QueryData = 10107
    esriMapServerMsgCode_MessageArrival_GetCacheStorageInfo = 10108
    esriMapServerMsgCode_MessageProcessed_GetCacheStorageInfo = 10109
    esriMapServerMsgCode_MessageArrival_QueryRasterValue = 10110
    esriMapServerMsgCode_MessageProcessed_QueryRasterValue = 10111
    esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos = 10112
    esriMapServerMsgCode_MessageProcessed_QueryAttachmentData = 10113
    esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos = 10114
    esriMapServerMsgCode_MessageArrival_QueryAttachmentData = 10115
    esriMapServerMsgCode_MessageArrival_QueryHTMLPopups = 10116
    esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups = 10117
    esriMapServerMsgCode_MessageArrival_GetDefaultLayerDrawingDescriptions = 10118
    esriMapServerMsgCode_MessageProcessed_GetDefaultLayerDrawingDescriptions = 10119
    esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos = 10120
    esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos = 10121
    esriMapServerMsgCode_MessageArrival_QueryRelatedRecords2 = 10122
    esriMapServerMsgCode_MessageProcessed_QueryRelatedRecords2 = 10123
    esriMapServerMsgCode_MessageArrival_QueryRasterValue2 = 10124
    esriMapServerMsgCode_MessageProcessed_QueryRasterValue2 = 10125
    esriMapServerMsgCode_MessageArrival_QueryAttachmentInfos2 = 10126
    esriMapServerMsgCode_MessageProcessed_QueryAttachmentInfos2 = 10127
    esriMapServerMsgCode_MessageArrival_QueryAttachmentData2 = 10128
    esriMapServerMsgCode_MessageProcessed_QueryAttachmentData2 = 10129
    esriMapServerMsgCode_MessageArrival_QueryHTMLPopups2 = 10130
    esriMapServerMsgCode_MessageProcessed_QueryHTMLPopups2 = 10131
    esriMapServerMsgCode_MessageArrival_GetMapTableSubtypeInfos2 = 10132
    esriMapServerMsgCode_MessageProcessed_GetMapTableSubtypeInfos2 = 10133
    esriMapServerMsgCode_MessageArrival_QueryDataStatistics = 10134
    esriMapServerMsgCode_MessageProcessed_QueryDataStatistics = 10135
    esriMapServerMsgCode_MessageArrival_GenerateDataClasses = 10136
    esriMapServerMsgCode_MessageProcessed_GenerateDataClasses = 10137
    esriMapServerMsgCode_MessageInput_ExportMapImage = 10138
    esriMapServerMsgCode_MapServerFailed = 10800
    esriMapServerMsgCode_MapServerStartedWithInvalidLayers = 10801
    esriMapServerMsgCode_InvalidLicense = 10802
    esriMapServerMsgCode_UnsupportedRequest = 10803
    esriMapServerMsgCode_CapabilityUnsupported = 10804
    esriMapServerMsgCode_InvisibleOrInvalidFieldInSubField = 10805
    esriMapServerMsgCode_DisconnectedFromData = 10806
    esriMapServerMsgCode_SecureLayersEmbedded = 10807
    esriMapServerMsgCode_FileInvalid = 10808
    esriMapServerMsgCode_FileReadableByArcReaderOnly = 10809
    esriMapServerMsgCode_PMFUnservableReason = 10810
    esriMapServerMsgCode_PMFFilePasswordProtexted = 10811
    esriMapServerMsgCode_PMFFileHasTimeOut = 10812
    esriMapServerMsgCode_PMFReadMapError = 10813
    esriMapServerMsgCode_PMFFileCanNotBeOpened = 10814
    esriMapServerMsgCode_PMFGlobeEmbedded = 10815
    esriMapServerMsgCode_FileOpenFailed = 10816
    esriMapServerMsgCode_PMFInvalidFileType = 10817
    esriMapServerMsgCode_PMFUnknownError = 10818
    esriMapServerMsgCode_MissingParameter = 10819
    esriMapServerMsgCode_OutputDirectoryNotFound = 10820
    esriMapServerMsgCode_OutputDirectoryAccessDenied = 10821
    esriMapServerMsgCode_PropertyFilePathUndefined = 10822
    esriMapServerMsgCode_IsCacheMissing = 10823
    esriMapServerMsgCode_CacheOnDemandMissing = 10824
    esriMapServerMsgCode_IgnoreCacheMissing = 10825
    esriMapServerMsgCode_ClientCachingAllowedMissing = 10826
    esriMapServerMsgCode_OnStartFailed = 10827
    esriMapServerMsgCode_OnStopFailed = 10828
    esriMapServerMsgCode_CanNotIgnorecacheIfDisconnected = 10829
    esriMapServerMsgCode_CanNotCacheOnDemandIfDisconnected = 10830
    esriMapServerMsgCode_CanNotCacheOnDemandAndIgnoreCache = 10831
    esriMapServerMsgCode_MissingServerEnvironment = 10832
    esriMapServerMsgCode_LackingServerAdminPrevileges = 10833
    esriMapServerMsgCode_CanNotConnectToCache = 10834
    esriMapServerMsgCode_WMSNeedsOutputDirectory = 10835
    esriMapServerMsgCode_MapNotFound = 10836
    esriMapServerMsgCode_GeneralGeoDatabaseError = 10837
    esriMapServerMsgCode_LayerIDNotFound = 10838
    esriMapServerMsgCode_FieldNotFound = 10839
    esriMapServerMsgCode_FormatNotSupported = 10840
    esriMapServerMsgCode_ImageGenerationFailed = 10841
    esriMapServerMsgCode_TableHasNoOIDHenceQueryFailed = 10842
    esriMapServerMsgCode_DefaultSymbolGenerated = 10843
    esriMapServerMsgCode_TooManyDomains = 10844
    esriMapServerMsgCode_SymbologyNotConverted = 10845
    esriMapServerMsgCode_LayerDrawingDescriptionNotValid = 10846
    esriMapServerMsgCode_InvalidEmbeddedFont = 10847
    esriMapServerMsgCode_DynamicDataSourceError = 10848
    esriMapServerMsgCode_InvalidWhereClauseOrDefinitionExpression = 10849

class esriCad3DRenderMode(Enumeration):
    __slots__ = ['esriCad3DRenderWireFrame',
                 'esriCad3DRenderFlatFilled',
                 'esriCad3DRenderHiddenLine',
                 'esriCad3DRenderFlatShaded',
                 'esriCad3DRenderGouraudShaded']
    esriCad3DRenderWireFrame = 0
    esriCad3DRenderFlatFilled = 1
    esriCad3DRenderHiddenLine = 2
    esriCad3DRenderFlatShaded = 3
    esriCad3DRenderGouraudShaded = 4

class acGeometryType(Enumeration):
    __slots__ = ['acGeometryPoint',
                 'acGeometryLine',
                 'acGeometryPolygon',
                 'acGeometryNull']
    acGeometryPoint = 0
    acGeometryLine = 1
    acGeometryPolygon = 2
    acGeometryNull = 3

class acLineType(Enumeration):
    __slots__ = ['acSolidLine',
                 'acDashLine',
                 'acDotLine',
                 'acDashDotLine',
                 'acDashDotDotLine']
    acSolidLine = 0
    acDashLine = 1
    acDotLine = 2
    acDashDotLine = 3
    acDashDotDotLine = 4

class acCapType(Enumeration):
    __slots__ = ['acRoundCap',
                 'acButtCap',
                 'acSquareCap']
    acRoundCap = 0
    acButtCap = 1
    acSquareCap = 2

class acJoinType(Enumeration):
    __slots__ = ['acRoundJoin',
                 'acMiterJoin',
                 'acBevelJoin']
    acRoundJoin = 0
    acMiterJoin = 1
    acBevelJoin = 2

class acFillType(Enumeration):
    __slots__ = ['acSolidFill',
                 'acBDiagonalFill',
                 'acFDiagonalFill',
                 'acCrossFill',
                 'acDiagCrossFill',
                 'acHorizontalFill',
                 'acVerticalFill',
                 'acGrayFill',
                 'acLightGrayFill',
                 'acDarkGrayFill']
    acSolidFill = 0
    acBDiagonalFill = 1
    acFDiagonalFill = 2
    acCrossFill = 3
    acDiagCrossFill = 4
    acHorizontalFill = 5
    acVerticalFill = 6
    acGrayFill = 7
    acLightGrayFill = 8
    acDarkGrayFill = 9

class acMarkerType(Enumeration):
    __slots__ = ['acCircleMarker',
                 'acTriangleMarker',
                 'acSquareMarker',
                 'acCrossMarker',
                 'acStarMarker']
    acCircleMarker = 0
    acTriangleMarker = 1
    acSquareMarker = 2
    acCrossMarker = 3
    acStarMarker = 4

class acFontStyle(Enumeration):
    __slots__ = ['acRegularFont',
                 'acBoldFont',
                 'acItalicFont',
                 'acUnderlineFont',
                 'acOutlineFont',
                 'acBoldItalicFont']
    acRegularFont = 0
    acBoldFont = 1
    acItalicFont = 2
    acUnderlineFont = 3
    acOutlineFont = 4
    acBoldItalicFont = 5

class acPrintMode(Enumeration):
    __slots__ = ['acTitleCapsPrintMode',
                 'acAllUpperPrintMode',
                 'acAllLowerPrintMode',
                 'acNoPrintMode']
    acTitleCapsPrintMode = 0
    acAllUpperPrintMode = 1
    acAllLowerPrintMode = 2
    acNoPrintMode = 3

class acRangeType(Enumeration):
    __slots__ = ['acExactValue',
                 'acRangeOfValues',
                 'acAllOtherValues']
    acExactValue = 0
    acRangeOfValues = 1
    acAllOtherValues = 2

class acLabelMode(Enumeration):
    __slots__ = ['acFullLabel',
                 'acNumericOnlyLabel']
    acFullLabel = 0
    acNumericOnlyLabel = 1

class acHashLineType(Enumeration):
    __slots__ = ['acForegroundHashLine',
                 'acBackgroundHashLine']
    acForegroundHashLine = 0
    acBackgroundHashLine = 1

class acGradientFillType(Enumeration):
    __slots__ = ['acBDiagonalGradientFill',
                 'acFDiagonalGradientFill',
                 'acHorizontalGradientFill',
                 'acVerticalGradientFill']
    acBDiagonalGradientFill = 0
    acFDiagonalGradientFill = 1
    acHorizontalGradientFill = 2
    acVerticalGradientFill = 3

class acShieldSymbolType(Enumeration):
    __slots__ = ['acInterstateShieldSymbol',
                 'acUSRoadShieldSymbol',
                 'acRectangleShieldSymbol',
                 'acOvalShieldSymbol',
                 'acMexicanShieldSymbol']
    acInterstateShieldSymbol = 0
    acUSRoadShieldSymbol = 1
    acRectangleShieldSymbol = 2
    acOvalShieldSymbol = 3
    acMexicanShieldSymbol = 4

class acHTextAlignment(Enumeration):
    __slots__ = ['acLeftHTextAlignment',
                 'acCenterHTextAlignment',
                 'acRightHTextAlignment']
    acLeftHTextAlignment = 0
    acCenterHTextAlignment = 1
    acRightHTextAlignment = 2

class acVTextAlignment(Enumeration):
    __slots__ = ['acTopVTextAlignment',
                 'acCenterVTextAlignment',
                 'acBottomVTextAlignment']
    acTopVTextAlignment = 0
    acCenterVTextAlignment = 1
    acBottomVTextAlignment = 2

class acLabelWeight(Enumeration):
    __slots__ = ['acNoLabelWeight',
                 'acMediumLabelWeight',
                 'acHighLabelWeight']
    acNoLabelWeight = 0
    acMediumLabelWeight = 2
    acHighLabelWeight = 3

class acNumLabels(Enumeration):
    __slots__ = ['acOneLabelPerName',
                 'acOneLabelPerShape',
                 'acOneLabelPerPart']
    acOneLabelPerName = 1
    acOneLabelPerShape = 2
    acOneLabelPerPart = 3

class acLineLabelPosition(Enumeration):
    __slots__ = ['acLLPlaceNone',
                 'acLLPlaceAbove',
                 'acLLPlaceBelow',
                 'acLLPlaceOnTop',
                 'acLLPlaceLeft',
                 'acLLPlaceRight',
                 'acLLPlaceAboveBelow',
                 'acLLPlaceLeftRight',
                 'acLLPlaceInLine',
                 'acLLPlaceAtStart',
                 'acLLPlaceAtEnd',
                 'acLLPlaceAtEitherEnd',
                 'acLLPlaceParallel',
                 'acLLPlacePerpendicular',
                 'acLLPlaceHorizontal',
                 'acLLPlaceOnTopHorizontal']
    acLLPlaceNone = 0
    acLLPlaceAbove = 1
    acLLPlaceBelow = 2
    acLLPlaceOnTop = 3
    acLLPlaceLeft = 4
    acLLPlaceRight = 5
    acLLPlaceAboveBelow = 6
    acLLPlaceLeftRight = 7
    acLLPlaceInLine = 8
    acLLPlaceAtStart = 9
    acLLPlaceAtEnd = 10
    acLLPlaceAtEitherEnd = 11
    acLLPlaceParallel = 12
    acLLPlacePerpendicular = 13
    acLLPlaceHorizontal = 14
    acLLPlaceOnTopHorizontal = 15

class esriGpsConnectionStatus(Enumeration):
    __slots__ = ['esriGpsConnectionStatusClosed',
                 'esriGpsConnectionStatusOpen',
                 'esriGpsConnectionStatusNoSignal',
                 'esriGpsConnectionStatusPoorSignal',
                 'esriGpsConnectionStatusReceiving']
    esriGpsConnectionStatusClosed = 0
    esriGpsConnectionStatusOpen = 1
    esriGpsConnectionStatusNoSignal = 2
    esriGpsConnectionStatusPoorSignal = 3
    esriGpsConnectionStatusReceiving = 4

class esriGpsConnectionError(Enumeration):
    __slots__ = ['esriGpsConnectionErrorNone',
                 'esriGpsConnectionErrorCommportInUse',
                 'esriGpsConnectionErrorCommportNotSupported',
                 'esriGpsConnectionErrorInApplication',
                 'esriGpsConnectionErrorUnableToCommunicateToDevice',
                 'esriGpsConnectionErrorInsufficientData']
    esriGpsConnectionErrorNone = 0
    esriGpsConnectionErrorCommportInUse = 1
    esriGpsConnectionErrorCommportNotSupported = 2
    esriGpsConnectionErrorInApplication = 3
    esriGpsConnectionErrorUnableToCommunicateToDevice = 4
    esriGpsConnectionErrorInsufficientData = 5

class esriGpsLatLongFormat(Enumeration):
    __slots__ = ['esriGpsDegreesMinutesSeconds',
                 'esriGpsDegreesMinutes',
                 'esriGpsDecimalDegrees']
    esriGpsDegreesMinutesSeconds = 0
    esriGpsDegreesMinutes = 1
    esriGpsDecimalDegrees = 2

class esriGpsStopBits(Enumeration):
    __slots__ = ['esriGpsStopBits1',
                 'esriGpsStopBits15',
                 'esriGpsStopBits2']
    esriGpsStopBits1 = 0
    esriGpsStopBits15 = 1
    esriGpsStopBits2 = 2

class esriGpsParity(Enumeration):
    __slots__ = ['esriGpsParityNone',
                 'esriGpsParityOdd',
                 'esriGpsParityEven',
                 'esriGpsParityMark',
                 'esriGpsParitySpace']
    esriGpsParityNone = 0
    esriGpsParityOdd = 1
    esriGpsParityEven = 2
    esriGpsParityMark = 3
    esriGpsParitySpace = 4

class esriGpsSpeedUnits(Enumeration):
    __slots__ = ['esriGpsSpeedKph',
                 'esriGpsSpeedMph',
                 'esriGpsSpeedMps',
                 'esriGpsSpeedFps',
                 'esriGpsSpeedKnots']
    esriGpsSpeedKph = 0
    esriGpsSpeedMph = 1
    esriGpsSpeedMps = 2
    esriGpsSpeedFps = 3
    esriGpsSpeedKnots = 4

class esriGpsBaudRate(Enumeration):
    __slots__ = ['esriGpsBaudRate300',
                 'esriGpsBaudRate600',
                 'esriGpsBaudRate1200',
                 'esriGpsBaudRate2400',
                 'esriGpsBaudRate4800',
                 'esriGpsBaudRate9600',
                 'esriGpsBaudRate14400',
                 'esriGpsBaudRate19200',
                 'esriGpsBaudRate38400',
                 'esriGpsBaudRate56000',
                 'esriGpsBaudRate57600',
                 'esriGpsBaudRate115200']
    esriGpsBaudRate300 = 300
    esriGpsBaudRate600 = 600
    esriGpsBaudRate1200 = 1200
    esriGpsBaudRate2400 = 2400
    esriGpsBaudRate4800 = 4800
    esriGpsBaudRate9600 = 9600
    esriGpsBaudRate14400 = 14400
    esriGpsBaudRate19200 = 19200
    esriGpsBaudRate38400 = 1
    esriGpsBaudRate56000 = 2
    esriGpsBaudRate57600 = 3
    esriGpsBaudRate115200 = 4

class esriMobileServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriMobileServerMessageCode_MissingParameter',
                 'esriMobileServerMessageCode_InvalidParameter',
                 'esriMobileServerMessageCode_NotLicensed',
                 'esriMobileServerMessageCode_ImportFromMemoryFailure',
                 'esriMobileServerMessageCode_InvalidServerObject',
                 'esriMobileServerMessageCode_ObjectInitializationFailure',
                 'esriMobileServerMessageCode_ErrorProcessingRequest',
                 'esriMobileServerMessageCode_FindFailure',
                 'esriMobileServerMessageCode_GetBinaryFailure',
                 'esriMobileServerMessageCode_AttachToMemoryFailure',
                 'esriMobileServerMessageCode_ConstructStart',
                 'esriMobileServerMessageCode_ConstructFinish',
                 'esriMobileServerMessageCode_ExtInitSuccess',
                 'esriMobileServerMessageCode_ExtInitFailure',
                 'esriMobileServerMessageCode_SchemaLayerExtractFail',
                 'esriMobileServerMessageCode_InvalidRequest',
                 'esriMobileServerMessageCode_GetSchemaRequestError',
                 'esriMobileServerMessageCode_RequestReadFailure',
                 'esriMobileServerMessageCode_InvalidClientChecksum',
                 'esriMobileServerMessageCode_FatalServerError',
                 'esriMobileServerMessageCode_UnsupportedRequestName',
                 'esriMobileServerMessageCode_DBFieldMappingMismatch',
                 'esriMobileServerMessageCode_UseOfInvalidPointer',
                 'esriMobileServerMessageCode_NoExistingChecksumForVersion',
                 'esriMobileServerMessageCode_SettingDefaultClientVersion',
                 'esriMobileServerMessageCode_ClientServerVersions',
                 'esriMobileServerMessageCode_ClientVersionUnderBaseline',
                 'esriMobileServerMessageCode_ClientVersionReduction',
                 'esriMobileServerMessageCode_FlushUpdatesFailure',
                 'esriMobileServerMessageCode_GetFeatureCountFailure',
                 'esriMobileServerMessageCode_GetFeaturesFailure',
                 'esriMobileServerMessageCode_DownloadFeaturesFailure',
                 'esriMobileServerMessageCode_GetRasterTilesFailure',
                 'esriMobileServerMessageCode_CreateVersionFailure',
                 'esriMobileServerMessageCode_CloseVersionFailure',
                 'esriMobileServerMessageCode_UploadFeaturesFailure',
                 'esriMobileServerMessageCode_ServerVersionReduction',
                 'esriMobileServerMessageCode_SpatialReferenceDefault',
                 'esriMobileServerMessageCode_InvalidProperty',
                 'esriMobileServerMessageCode_FailedToSyncAttachInfos',
                 'esriMobileServerMessageCode_UnderlyingError',
                 'esriMobileServerMessageCode_DeleteCountMismatch',
                 'esriMobileServerMessageCode_InvalidLayerIndex',
                 'esriMobileServerMessageCode_InvalidFeatureLayer',
                 'esriMobileServerMessageCode_FailedToGetFeatureCursor',
                 'esriMobileServerMessageCode_FailedRetrievingSyncItems',
                 'esriMobileServerMessageCode_InvalidRasterLayer',
                 'esriMobileServerMessageCode_InvalidLayerCount',
                 'esriMobileServerMessageCode_LayerNotEditable',
                 'esriMobileServerMessageCode_FailedToGetVersionFeatureClass',
                 'esriMobileServerMessageCode_InvalidWorkspaceIndex',
                 'esriMobileServerMessageCode_InvalidVersionedWorkspace',
                 'esriMobileServerMessageCode_VersionAlreadyExists',
                 'esriMobileServerMessageCode_InvalidParentVersion',
                 'esriMobileServerMessageCode_FailedToCreateVersion',
                 'esriMobileServerMessageCode_InvalidChildVersion',
                 'esriMobileServerMessageCode_FailedToStartEditingWorkspace',
                 'esriMobileServerMessageCode_RequestedVersionNotFound',
                 'esriMobileServerMessageCode_InvalidDecomposedQuery',
                 'esriMobileServerMessageCode_FailedToCompressToJPEG',
                 'esriMobileServerMessageCode_FileNotFound',
                 'esriMobileServerMessageCode_FileAccessDenied',
                 'esriMobileServerMessageCode_FileInvalid',
                 'esriMobileServerMessageCode_DirectoryNotFound',
                 'esriMobileServerMessageCode_DirectoryAccessDenied',
                 'esriMobileServerMessageCode_DirectoryInvalid',
                 'esriMobileServerMessageCode_FileInvalidOrAccessDenied',
                 'esriMobileServerMessageCode_DirectoryInvalidOrAccessDenied',
                 'esriMobileServerMessageCode_InvalidServerEnvironment',
                 'esriMobileServerMessageCode_InvalidURLUseMIME',
                 'esriMobileServerMessageCode_ExportMapImageFailed',
                 'esriMobileServerMessageCode_PrepareMapServerFailed',
                 'esriMobileServerMessageCode_InvalidWorkspace',
                 'esriMobileServerMessageCode_DownloadAttachmentsFailure',
                 'esriMobileServerMessageCode_NoOutputDirectory',
                 'esriMobileServerMessageCode_InvalidExtentType',
                 'esriMobileServerMessageCode_NoRasterSupport',
                 'esriMobileServerMessageCode_CoreClassCreateFail',
                 'esriMobileServerMessageCode_FailedToCreateSchema',
                 'esriMobileServerMessageCode_FailedToAddField',
                 'esriMobileServerMessageCode_FailedToOpen',
                 'esriMobileServerMessageCode_InvalidExtent',
                 'esriMobileServerMessageCode_FailedToCreateDataPackage',
                 'esriMobileServerMessageCode_InvalidSpatialQueryFilter',
                 'esriMobileServerMessageCode_FailedToConvert',
                 'esriMobileServerMessageCode_SynchronizeFeatureStats',
                 'esriMobileServerMessageCode_FailedToGetRelatedAttachmentTable',
                 'esriMobileServerMessageCode_FailedToGetAttachmentInfo',
                 'esriMobileServerMessageCode_FailedToGetAttachmentData',
                 'esriMobileServerMessageCode_SynchronizeAttachmentStats',
                 'esriMobileServerMessageCode_SynchronizeAttachmentRate',
                 'esriMobileServerMessageCode_SynchronizeAttachmentInfosStats',
                 'esriMobileServerMessageCode_ImportChangesStats',
                 'esriMobileServerMessageCode_DeleteUploadDirFailure',
                 'esriMobileServerMessageCode_RowUpdateFailure',
                 'esriMobileServerMessageCode_FailedToCommitDataPackage',
                 'esriMobileServerMessageCode_InvalidGIDIndex',
                 'esriMobileServerMessageCode_InvalidVariantType',
                 'esriMobileServerMessageCode_ImportAttachmentsStats',
                 'esriMobileServerMessageCode_FailedParseParams',
                 'esriMobileServerMessageCode_FailedParseParam',
                 'esriMobileServerMessageCode_FailedParseReqParam',
                 'esriMobileServerMessageCode_FailedGenRep',
                 'esriMobileServerMessageCode_NoInserverConn',
                 'esriMobileServerMessageCode_NoArcGISServerConn',
                 'esriMobileServerMessageCode_FailedToCreateUploadsClient',
                 'esriMobileServerMessageCode_UploadedItemNotFound',
                 'esriMobileServerMessageCode_FailedToPopulateFDR',
                 'esriMobileServerMessageCode_FailedToSyncFeatures',
                 'esriMobileServerMessageCode_FailedToPopulateADR',
                 'esriMobileServerMessageCode_FailedToSyncAttach',
                 'esriMobileServerMessageCode_InvalidPolyGeometry',
                 'esriMobileServerMessageCode_FailedToRetrieveGIDs',
                 'esriMobileServerMessageCode_FailedToRetrieveRowsByGUID',
                 'esriMobileServerMessageCode_FailedToSetRowValues',
                 'esriMobileServerMessageCode_FailedToRetrieveCursor',
                 'esriMobileServerMessageCode_FailedToEstablishItem',
                 'esriMobileServerMessageCode_FailedToInitialize',
                 'esriMobileServerMessageCode_InvalidPointer',
                 'esriMobileServerMessageCode_FailedToOpenEvaluateDataPackage',
                 'esriMobileServerMessageCode_MobileSyncDebug']
    esriMobileServerMessageCode_MissingParameter = 11001
    esriMobileServerMessageCode_InvalidParameter = 11002
    esriMobileServerMessageCode_NotLicensed = 11003
    esriMobileServerMessageCode_ImportFromMemoryFailure = 11004
    esriMobileServerMessageCode_InvalidServerObject = 11005
    esriMobileServerMessageCode_ObjectInitializationFailure = 11006
    esriMobileServerMessageCode_ErrorProcessingRequest = 11007
    esriMobileServerMessageCode_FindFailure = 11008
    esriMobileServerMessageCode_GetBinaryFailure = 11009
    esriMobileServerMessageCode_AttachToMemoryFailure = 11010
    esriMobileServerMessageCode_ConstructStart = 11011
    esriMobileServerMessageCode_ConstructFinish = 11012
    esriMobileServerMessageCode_ExtInitSuccess = 11013
    esriMobileServerMessageCode_ExtInitFailure = 11014
    esriMobileServerMessageCode_SchemaLayerExtractFail = 11015
    esriMobileServerMessageCode_InvalidRequest = 11016
    esriMobileServerMessageCode_GetSchemaRequestError = 11017
    esriMobileServerMessageCode_RequestReadFailure = 11018
    esriMobileServerMessageCode_InvalidClientChecksum = 11019
    esriMobileServerMessageCode_FatalServerError = 11020
    esriMobileServerMessageCode_UnsupportedRequestName = 11021
    esriMobileServerMessageCode_DBFieldMappingMismatch = 11022
    esriMobileServerMessageCode_UseOfInvalidPointer = 11023
    esriMobileServerMessageCode_NoExistingChecksumForVersion = 11024
    esriMobileServerMessageCode_SettingDefaultClientVersion = 11025
    esriMobileServerMessageCode_ClientServerVersions = 11026
    esriMobileServerMessageCode_ClientVersionUnderBaseline = 11027
    esriMobileServerMessageCode_ClientVersionReduction = 11028
    esriMobileServerMessageCode_FlushUpdatesFailure = 11029
    esriMobileServerMessageCode_GetFeatureCountFailure = 11030
    esriMobileServerMessageCode_GetFeaturesFailure = 11031
    esriMobileServerMessageCode_DownloadFeaturesFailure = 11032
    esriMobileServerMessageCode_GetRasterTilesFailure = 11033
    esriMobileServerMessageCode_CreateVersionFailure = 11034
    esriMobileServerMessageCode_CloseVersionFailure = 11035
    esriMobileServerMessageCode_UploadFeaturesFailure = 11036
    esriMobileServerMessageCode_ServerVersionReduction = 11037
    esriMobileServerMessageCode_SpatialReferenceDefault = 11038
    esriMobileServerMessageCode_InvalidProperty = 11039
    esriMobileServerMessageCode_FailedToSyncAttachInfos = 11040
    esriMobileServerMessageCode_UnderlyingError = 11042
    esriMobileServerMessageCode_DeleteCountMismatch = 11043
    esriMobileServerMessageCode_InvalidLayerIndex = 11044
    esriMobileServerMessageCode_InvalidFeatureLayer = 11045
    esriMobileServerMessageCode_FailedToGetFeatureCursor = 11046
    esriMobileServerMessageCode_FailedRetrievingSyncItems = 11047
    esriMobileServerMessageCode_InvalidRasterLayer = 11048
    esriMobileServerMessageCode_InvalidLayerCount = 11049
    esriMobileServerMessageCode_LayerNotEditable = 11050
    esriMobileServerMessageCode_FailedToGetVersionFeatureClass = 11051
    esriMobileServerMessageCode_InvalidWorkspaceIndex = 11052
    esriMobileServerMessageCode_InvalidVersionedWorkspace = 11053
    esriMobileServerMessageCode_VersionAlreadyExists = 11054
    esriMobileServerMessageCode_InvalidParentVersion = 11055
    esriMobileServerMessageCode_FailedToCreateVersion = 11056
    esriMobileServerMessageCode_InvalidChildVersion = 11057
    esriMobileServerMessageCode_FailedToStartEditingWorkspace = 11058
    esriMobileServerMessageCode_RequestedVersionNotFound = 11059
    esriMobileServerMessageCode_InvalidDecomposedQuery = 11060
    esriMobileServerMessageCode_FailedToCompressToJPEG = 11061
    esriMobileServerMessageCode_FileNotFound = 11062
    esriMobileServerMessageCode_FileAccessDenied = 11063
    esriMobileServerMessageCode_FileInvalid = 11064
    esriMobileServerMessageCode_DirectoryNotFound = 11065
    esriMobileServerMessageCode_DirectoryAccessDenied = 11066
    esriMobileServerMessageCode_DirectoryInvalid = 11067
    esriMobileServerMessageCode_FileInvalidOrAccessDenied = 11068
    esriMobileServerMessageCode_DirectoryInvalidOrAccessDenied = 11069
    esriMobileServerMessageCode_InvalidServerEnvironment = 11070
    esriMobileServerMessageCode_InvalidURLUseMIME = 11071
    esriMobileServerMessageCode_ExportMapImageFailed = 11072
    esriMobileServerMessageCode_PrepareMapServerFailed = 11073
    esriMobileServerMessageCode_InvalidWorkspace = 11074
    esriMobileServerMessageCode_DownloadAttachmentsFailure = 11075
    esriMobileServerMessageCode_NoOutputDirectory = 11076
    esriMobileServerMessageCode_InvalidExtentType = 11077
    esriMobileServerMessageCode_NoRasterSupport = 11078
    esriMobileServerMessageCode_CoreClassCreateFail = 11079
    esriMobileServerMessageCode_FailedToCreateSchema = 11080
    esriMobileServerMessageCode_FailedToAddField = 11081
    esriMobileServerMessageCode_FailedToOpen = 11082
    esriMobileServerMessageCode_InvalidExtent = 11083
    esriMobileServerMessageCode_FailedToCreateDataPackage = 11084
    esriMobileServerMessageCode_InvalidSpatialQueryFilter = 11085
    esriMobileServerMessageCode_FailedToConvert = 11086
    esriMobileServerMessageCode_SynchronizeFeatureStats = 11087
    esriMobileServerMessageCode_FailedToGetRelatedAttachmentTable = 11088
    esriMobileServerMessageCode_FailedToGetAttachmentInfo = 11089
    esriMobileServerMessageCode_FailedToGetAttachmentData = 11090
    esriMobileServerMessageCode_SynchronizeAttachmentStats = 11091
    esriMobileServerMessageCode_SynchronizeAttachmentRate = 11092
    esriMobileServerMessageCode_SynchronizeAttachmentInfosStats = 11093
    esriMobileServerMessageCode_ImportChangesStats = 11094
    esriMobileServerMessageCode_DeleteUploadDirFailure = 11095
    esriMobileServerMessageCode_RowUpdateFailure = 11096
    esriMobileServerMessageCode_FailedToCommitDataPackage = 11097
    esriMobileServerMessageCode_InvalidGIDIndex = 11098
    esriMobileServerMessageCode_InvalidVariantType = 11099
    esriMobileServerMessageCode_ImportAttachmentsStats = 11100
    esriMobileServerMessageCode_FailedParseParams = 11101
    esriMobileServerMessageCode_FailedParseParam = 11102
    esriMobileServerMessageCode_FailedParseReqParam = 11103
    esriMobileServerMessageCode_FailedGenRep = 11104
    esriMobileServerMessageCode_NoInserverConn = 11105
    esriMobileServerMessageCode_NoArcGISServerConn = 11106
    esriMobileServerMessageCode_FailedToCreateUploadsClient = 11107
    esriMobileServerMessageCode_UploadedItemNotFound = 11108
    esriMobileServerMessageCode_FailedToPopulateFDR = 11109
    esriMobileServerMessageCode_FailedToSyncFeatures = 11110
    esriMobileServerMessageCode_FailedToPopulateADR = 11111
    esriMobileServerMessageCode_FailedToSyncAttach = 11112
    esriMobileServerMessageCode_InvalidPolyGeometry = 11113
    esriMobileServerMessageCode_FailedToRetrieveGIDs = 11114
    esriMobileServerMessageCode_FailedToRetrieveRowsByGUID = 11115
    esriMobileServerMessageCode_FailedToSetRowValues = 11116
    esriMobileServerMessageCode_FailedToRetrieveCursor = 11117
    esriMobileServerMessageCode_FailedToEstablishItem = 11118
    esriMobileServerMessageCode_FailedToInitialize = 11119
    esriMobileServerMessageCode_InvalidPointer = 11120
    esriMobileServerMessageCode_FailedToOpenEvaluateDataPackage = 11121
    esriMobileServerMessageCode_MobileSyncDebug = 11900

class esriWMSServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriWMSServerMessageCode_Debug',
                 'esriWMSServerMessageCode_NotLicensed',
                 'esriWMSServerMessageCode_ConstructStarted',
                 'esriWMSServerMessageCode_ConstructEnded',
                 'esriWMSServerMessageCode_InvalidPointer',
                 'esriWMSServerMessageCode_CanNotReadPrecookingFile',
                 'esriWMSServerMessageCode_CanNotParseSLD',
                 'esriWMSServerMessageCode_RequestNotRecognized',
                 'esriWMSServerMessageCode_UnknownInternalError',
                 'esriWMSServerMessageCode_ImageServerWMSFailed',
                 'esriWMSServerMessageCode_ImageServerNotLicensed',
                 'esriWMSServerMessageCode_ImageServerWMSStarted',
                 'esriWMSServerMessageCode_ImageServerWMSDebug',
                 'esriWMSServerMessageCode_ImageServerWMSGetToPost',
                 'esriWMSServerMessageCode_ImageServerWMSGetData',
                 'esriWMSServerMessageCode_ImageServerWMSGetCapabilities',
                 'esriWMSServerMessageCode_ImageServerWMSGetMap',
                 'esriWMSServerMessageCode_ImageServerWMSUnknownRequest']
    esriWMSServerMessageCode_Debug = 16000
    esriWMSServerMessageCode_NotLicensed = 16001
    esriWMSServerMessageCode_ConstructStarted = 16002
    esriWMSServerMessageCode_ConstructEnded = 16003
    esriWMSServerMessageCode_InvalidPointer = 16004
    esriWMSServerMessageCode_CanNotReadPrecookingFile = 16005
    esriWMSServerMessageCode_CanNotParseSLD = 16006
    esriWMSServerMessageCode_RequestNotRecognized = 16007
    esriWMSServerMessageCode_UnknownInternalError = 16008
    esriWMSServerMessageCode_ImageServerWMSFailed = 82001
    esriWMSServerMessageCode_ImageServerNotLicensed = 82002
    esriWMSServerMessageCode_ImageServerWMSStarted = 82003
    esriWMSServerMessageCode_ImageServerWMSDebug = 82004
    esriWMSServerMessageCode_ImageServerWMSGetToPost = 82005
    esriWMSServerMessageCode_ImageServerWMSGetData = 82006
    esriWMSServerMessageCode_ImageServerWMSGetCapabilities = 82010
    esriWMSServerMessageCode_ImageServerWMSGetMap = 82012
    esriWMSServerMessageCode_ImageServerWMSUnknownRequest = 82020

class esriWCSServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriWCSServerMessageCode_ImageServerWCSFailed',
                 'esriWCSServerMessageCode_ImageServerWCSNotLicensed',
                 'esriWCSServerMessageCode_ImageServerWCSStarted',
                 'esriWCSServerMessageCode_ImageServerWCSInitialized',
                 'esriWCSServerMessageCode_ImageServerWCSGetData',
                 'esriWCSServerMessageCode_ImageServerWCSGetCapabilities',
                 'esriWCSServerMessageCode_ImageServerWCSDescribeCoverage',
                 'esriWCSServerMessageCode_ImageServerWCSGetCoverage',
                 'esriWCSServerMessageCode_ImageServerWCSUnknownRequest',
                 'esriWCSServerMessageCode_ImageServerWCSParseKVP',
                 'esriWCSServerMessageCode_ImageServerWCSParseXML',
                 'esriWCSServerMessageCode_ImageServerWCSParseKVP11',
                 'esriWCSServerMessageCode_ImageServerWCSParseXML11',
                 'esriWCSServerMessageCode_ImageServerWCSParseWriteData',
                 'esriWCSServerMessageCode_ImageServerWCSInvalidCRS',
                 'esriWCSServerMessageCode_ImageServerWCSInvalidDataset',
                 'esriWCSServerMessageCode_ImageServerWCSInvalidLayer',
                 'esriWCSServerMessageCode_ImageServerWCSAISInitialized',
                 'esriWCSServerMessageCode_ImageServerWCSDatasetInitialized',
                 'esriWCSServerMessageCode_ImageServerWCSWrongPixelType',
                 'esriWCSServerMessageCode_GeoDataServerWCSFailed',
                 'esriWCSServerMessageCode_GeoDataServerWCSNotLicensed',
                 'esriWCSServerMessageCode_GeoDataServerWCSStarted',
                 'esriWCSServerMessageCode_GeoDataServerWCSInitialized',
                 'esriWCSServerMessageCode_GeoDataServerWCSGetData',
                 'esriWCSServerMessageCode_GeoDataServerWCSGetCapabilities',
                 'esriWCSServerMessageCode_GeoDataServerWCSDescribeCoverage',
                 'esriWCSServerMessageCode_GeoDataServerWCSGetCoverage',
                 'esriWCSServerMessageCode_GeoDataServerWCSUnknownRequest',
                 'esriWCSServerMessageCode_GeoDataServerWCSParseKVP',
                 'esriWCSServerMessageCode_GeoDataServerWCSParseXML',
                 'esriWCSServerMessageCode_GeoDataServerWCSParseKVP11',
                 'esriWCSServerMessageCode_GeoDataServerWCSParseXML11',
                 'esriWCSServerMessageCode_GeoDataServerWCSParseWriteData',
                 'esriWCSServerMessageCode_GeoDataServerWCSInvalidCRS',
                 'esriWCSServerMessageCode_GeoDataServerWCSInvalidDataset',
                 'esriWCSServerMessageCode_GeoDataServerWCSInvalidLayer',
                 'esriWCSServerMessageCode_GeoDataServerWCSAISInitialized',
                 'esriWCSServerMessageCode_GeoDataServerWCSDatasetInitialized',
                 'esriWCSServerMessageCode_GeoDataServerWCSWrongPixelType',
                 'esriWCSServerMessageCode_MapServerWCSFailed',
                 'esriWCSServerMessageCode_MapServerWCSNotLicensed',
                 'esriWCSServerMessageCode_MapServerWCSStarted',
                 'esriWCSServerMessageCode_MapServerWCSInitialized',
                 'esriWCSServerMessageCode_MapServerWCSGetData',
                 'esriWCSServerMessageCode_MapServerWCSGetCapabilities',
                 'esriWCSServerMessageCode_MapServerWCSDescribeCoverage',
                 'esriWCSServerMessageCode_MapServerWCSGetCoverage',
                 'esriWCSServerMessageCode_MapServerWCSUnknownRequest',
                 'esriWCSServerMessageCode_MapServerWCSParseKVP',
                 'esriWCSServerMessageCode_MapServerWCSParseXML',
                 'esriWCSServerMessageCode_MapServerWCSParseKVP11',
                 'esriWCSServerMessageCode_MapServerWCSParseXML11',
                 'esriWCSServerMessageCode_MapServerWCSParseWriteData',
                 'esriWCSServerMessageCode_MapServerWCSInvalidCRS',
                 'esriWCSServerMessageCode_MapServerWCSInvalidDataset',
                 'esriWCSServerMessageCode_MapServerWCSInvalidLayer',
                 'esriWCSServerMessageCode_MapServerWCSAISInitialized',
                 'esriWCSServerMessageCode_MapServerWCSDatasetInitialized',
                 'esriWCSServerMessageCode_MapServerWCSWrongPixelType']
    esriWCSServerMessageCode_ImageServerWCSFailed = 81001
    esriWCSServerMessageCode_ImageServerWCSNotLicensed = 81002
    esriWCSServerMessageCode_ImageServerWCSStarted = 81003
    esriWCSServerMessageCode_ImageServerWCSInitialized = 81004
    esriWCSServerMessageCode_ImageServerWCSGetData = 81010
    esriWCSServerMessageCode_ImageServerWCSGetCapabilities = 81012
    esriWCSServerMessageCode_ImageServerWCSDescribeCoverage = 81014
    esriWCSServerMessageCode_ImageServerWCSGetCoverage = 81016
    esriWCSServerMessageCode_ImageServerWCSUnknownRequest = 81020
    esriWCSServerMessageCode_ImageServerWCSParseKVP = 81030
    esriWCSServerMessageCode_ImageServerWCSParseXML = 81031
    esriWCSServerMessageCode_ImageServerWCSParseKVP11 = 81032
    esriWCSServerMessageCode_ImageServerWCSParseXML11 = 81033
    esriWCSServerMessageCode_ImageServerWCSParseWriteData = 81034
    esriWCSServerMessageCode_ImageServerWCSInvalidCRS = 81040
    esriWCSServerMessageCode_ImageServerWCSInvalidDataset = 81041
    esriWCSServerMessageCode_ImageServerWCSInvalidLayer = 81042
    esriWCSServerMessageCode_ImageServerWCSAISInitialized = 81043
    esriWCSServerMessageCode_ImageServerWCSDatasetInitialized = 81044
    esriWCSServerMessageCode_ImageServerWCSWrongPixelType = 81045
    esriWCSServerMessageCode_GeoDataServerWCSFailed = 91001
    esriWCSServerMessageCode_GeoDataServerWCSNotLicensed = 91002
    esriWCSServerMessageCode_GeoDataServerWCSStarted = 91003
    esriWCSServerMessageCode_GeoDataServerWCSInitialized = 91004
    esriWCSServerMessageCode_GeoDataServerWCSGetData = 91010
    esriWCSServerMessageCode_GeoDataServerWCSGetCapabilities = 91012
    esriWCSServerMessageCode_GeoDataServerWCSDescribeCoverage = 91014
    esriWCSServerMessageCode_GeoDataServerWCSGetCoverage = 91016
    esriWCSServerMessageCode_GeoDataServerWCSUnknownRequest = 91020
    esriWCSServerMessageCode_GeoDataServerWCSParseKVP = 91030
    esriWCSServerMessageCode_GeoDataServerWCSParseXML = 91031
    esriWCSServerMessageCode_GeoDataServerWCSParseKVP11 = 91032
    esriWCSServerMessageCode_GeoDataServerWCSParseXML11 = 91033
    esriWCSServerMessageCode_GeoDataServerWCSParseWriteData = 91034
    esriWCSServerMessageCode_GeoDataServerWCSInvalidCRS = 91040
    esriWCSServerMessageCode_GeoDataServerWCSInvalidDataset = 91041
    esriWCSServerMessageCode_GeoDataServerWCSInvalidLayer = 91042
    esriWCSServerMessageCode_GeoDataServerWCSAISInitialized = 91043
    esriWCSServerMessageCode_GeoDataServerWCSDatasetInitialized = 91044
    esriWCSServerMessageCode_GeoDataServerWCSWrongPixelType = 91045
    esriWCSServerMessageCode_MapServerWCSFailed = 15001
    esriWCSServerMessageCode_MapServerWCSNotLicensed = 15002
    esriWCSServerMessageCode_MapServerWCSStarted = 15003
    esriWCSServerMessageCode_MapServerWCSInitialized = 15004
    esriWCSServerMessageCode_MapServerWCSGetData = 15010
    esriWCSServerMessageCode_MapServerWCSGetCapabilities = 15012
    esriWCSServerMessageCode_MapServerWCSDescribeCoverage = 15014
    esriWCSServerMessageCode_MapServerWCSGetCoverage = 15016
    esriWCSServerMessageCode_MapServerWCSUnknownRequest = 15020
    esriWCSServerMessageCode_MapServerWCSParseKVP = 15030
    esriWCSServerMessageCode_MapServerWCSParseXML = 15031
    esriWCSServerMessageCode_MapServerWCSParseKVP11 = 15032
    esriWCSServerMessageCode_MapServerWCSParseXML11 = 15033
    esriWCSServerMessageCode_MapServerWCSParseWriteData = 15034
    esriWCSServerMessageCode_MapServerWCSInvalidCRS = 15040
    esriWCSServerMessageCode_MapServerWCSInvalidDataset = 15041
    esriWCSServerMessageCode_MapServerWCSInvalidLayer = 15042
    esriWCSServerMessageCode_MapServerWCSAISInitialized = 15043
    esriWCSServerMessageCode_MapServerWCSDatasetInitialized = 15044
    esriWCSServerMessageCode_MapServerWCSWrongPixelType = 15045

class wmsError(Enumeration):
    __slots__ = ['WMS_E_SRS_NOTUNSUPPORTED',
                 'WMS_E_IMAGEFORMAT_NOTUNSUPPORTED',
                 'WMS_E_INVALIDURL',
                 'WMS_E_SERVICE_EXCEPTION']
    WMS_E_SRS_NOTUNSUPPORTED = -2147220991
    WMS_E_IMAGEFORMAT_NOTUNSUPPORTED = -2147220990
    WMS_E_INVALIDURL = -2147220989
    WMS_E_SERVICE_EXCEPTION = -2147220988

class esriNetworkRendererType(Enumeration):
    __slots__ = ['esriNetworkRenderer',
                 'esriNetworkSystemJunctionRenderer',
                 'esriNetworkJunctionRenderer',
                 'esriNetworkEdgeRenderer',
                 'esriNetworkTurnRenderer',
                 'esriNetworkDirtyAreaRenderer',
                 'esriNetworkTrafficRenderer',
                 'esriNetworkRendererLast']
    esriNetworkRenderer = 0
    esriNetworkSystemJunctionRenderer = 1
    esriNetworkJunctionRenderer = 2
    esriNetworkEdgeRenderer = 3
    esriNetworkTurnRenderer = 4
    esriNetworkDirtyAreaRenderer = 5
    esriNetworkTrafficRenderer = 6
    esriNetworkRendererLast = 6

class esriNetworkArrowType(Enumeration):
    __slots__ = ['esriNetworkArrowTypeNoArrow',
                 'esriNetworkArrowTypeEndpoint',
                 'esriNetworkArrowTypeMidpoint']
    esriNetworkArrowTypeNoArrow = 0
    esriNetworkArrowTypeEndpoint = 1
    esriNetworkArrowTypeMidpoint = 2

class esriNetworkArrowSymbolType(Enumeration):
    __slots__ = ['esriNetworkArrowSymbolOneWay',
                 'esriNetworkArrowSymbolBothWays',
                 'esriNetworkArrowSymbolNoWay']
    esriNetworkArrowSymbolOneWay = 0
    esriNetworkArrowSymbolBothWays = 1
    esriNetworkArrowSymbolNoWay = 2

class esriGraphColorType(Enumeration):
    __slots__ = ['esriGraphColorMatch',
                 'esriGraphColorPalette',
                 'esriGraphColorCustomAll',
                 'esriGraphColorCustomEach']
    esriGraphColorMatch = 1
    esriGraphColorPalette = 2
    esriGraphColorCustomAll = 4
    esriGraphColorCustomEach = 8

class esriDataGraphTPenType(Enumeration):
    __slots__ = ['esriDataGraphTPenSolid',
                 'esriDataGraphTPenDash',
                 'esriDataGraphTPenDot',
                 'esriDataGraphTPenDashDot',
                 'esriDataGraphTPenDashDotDot',
                 'esriDataGraphTPenClear',
                 'esriDataGraphTPenInsideFrame',
                 'esriDataGraphTPenSmallDots']
    esriDataGraphTPenSolid = 0
    esriDataGraphTPenDash = 1
    esriDataGraphTPenDot = 2
    esriDataGraphTPenDashDot = 3
    esriDataGraphTPenDashDotDot = 4
    esriDataGraphTPenClear = 5
    esriDataGraphTPenInsideFrame = 6
    esriDataGraphTPenSmallDots = 7

class esriDataGraphTLegendAlignment(Enumeration):
    __slots__ = ['esriDataGraphTLegendLeft',
                 'esriDataGraphTLegendRight',
                 'esriDataGraphTLegendTop',
                 'esriDataGraphTLegendBottom']
    esriDataGraphTLegendLeft = 0
    esriDataGraphTLegendRight = 1
    esriDataGraphTLegendTop = 2
    esriDataGraphTLegendBottom = 3

class esriDataGraphTLegendTextSyle(Enumeration):
    __slots__ = ['esriDataGraphTLegendTextPlain',
                 'esriDataGraphTLegendTextLeftValue',
                 'esriDataGraphTLegendTextRightValue',
                 'esriDataGraphTLegendTextLeftPercent',
                 'esriDataGraphTLegendTextRightPercent',
                 'esriDataGraphTLegendTextXValue',
                 'esriDataGraphTLegendTextValue',
                 'esriDataGraphTLegendTextPercent',
                 'esriDataGraphTLegendTextXAndValue',
                 'esriDataGraphTLegendTextXAndPercent']
    esriDataGraphTLegendTextPlain = 0
    esriDataGraphTLegendTextLeftValue = 1
    esriDataGraphTLegendTextRightValue = 2
    esriDataGraphTLegendTextLeftPercent = 3
    esriDataGraphTLegendTextRightPercent = 4
    esriDataGraphTLegendTextXValue = 5
    esriDataGraphTLegendTextValue = 6
    esriDataGraphTLegendTextPercent = 7
    esriDataGraphTLegendTextXAndValue = 8
    esriDataGraphTLegendTextXAndPercent = 9

class esriBarStyle(Enumeration):
    __slots__ = ['esriRectangleBar',
                 'esriPyramidBar',
                 'esriInvPyramidBar',
                 'esriCylinderBar',
                 'esriEllipseBar',
                 'esriArrowBar',
                 'esriRectGradientBar',
                 'esriConeBar',
                 'esriBevelBar',
                 'esriSlantCubeBar',
                 'esriDiamondBar',
                 'esriInvArrow',
                 'esriInvCone']
    esriRectangleBar = 0
    esriPyramidBar = 1
    esriInvPyramidBar = 2
    esriCylinderBar = 3
    esriEllipseBar = 4
    esriArrowBar = 5
    esriRectGradientBar = 6
    esriConeBar = 7
    esriBevelBar = 8
    esriSlantCubeBar = 9
    esriDiamondBar = 10
    esriInvArrow = 11
    esriInvCone = 12

class esriMultiBarType(Enumeration):
    __slots__ = ['esriNoneMultiBar',
                 'esriSideMultiBar',
                 'esriStackedMultiBar',
                 'esriStacked100MultiBar',
                 'esriSideAllMultiBar',
                 'esriSelfStackMultiBar']
    esriNoneMultiBar = 0
    esriSideMultiBar = 1
    esriStackedMultiBar = 2
    esriStacked100MultiBar = 3
    esriSideAllMultiBar = 4
    esriSelfStackMultiBar = 5

class esriMultiAreaType(Enumeration):
    __slots__ = ['esriNoneMultiArea',
                 'esriStackedMultiArea',
                 'esriStacked100MultiArea']
    esriNoneMultiArea = 0
    esriStackedMultiArea = 1
    esriStacked100MultiArea = 2

class esriDataGraphTSymbolType(Enumeration):
    __slots__ = ['esriDataGraphTSymbolRectangle',
                 'esriDataGraphTSymbolCircle',
                 'esriDataGraphTSymbolTriangle',
                 'esriDataGraphTSymbolDownTriangle',
                 'esriDataGraphTSymbolCross',
                 'esriDataGraphTSymbolDiagCross',
                 'esriDataGraphTSymbolStar',
                 'esriDataGraphTSymbolDiamond',
                 'esriDataGraphTSymbolSmallDot',
                 'esriDataGraphTSymbolNothing',
                 'esriDataGraphTSymbolLeftTriangle',
                 'esriDataGraphTSymbolRightTriangle']
    esriDataGraphTSymbolRectangle = 0
    esriDataGraphTSymbolCircle = 1
    esriDataGraphTSymbolTriangle = 2
    esriDataGraphTSymbolDownTriangle = 3
    esriDataGraphTSymbolCross = 4
    esriDataGraphTSymbolDiagCross = 5
    esriDataGraphTSymbolStar = 6
    esriDataGraphTSymbolDiamond = 7
    esriDataGraphTSymbolSmallDot = 8
    esriDataGraphTSymbolNothing = 9
    esriDataGraphTSymbolLeftTriangle = 10
    esriDataGraphTSymbolRightTriangle = 11

class esriCadastralFabricRenderer(Enumeration):
    __slots__ = ['esriCFRControlPoints',
                 'esriCFRLinePoints',
                 'esriCFRPoints',
                 'esriCFRLines',
                 'esriCFRParcels']
    esriCFRControlPoints = 0
    esriCFRLinePoints = 1
    esriCFRPoints = 2
    esriCFRLines = 3
    esriCFRParcels = 4

class esriCadastralFeature(Enumeration):
    __slots__ = ['esriCadastralParcel',
                 'esriCadastralControlPoint']
    esriCadastralParcel = 1
    esriCadastralControlPoint = 2

class esriCadastralParcelType(Enumeration):
    __slots__ = ['esriCadastralParcelLocked',
                 'esriCadastralParcelUnlocked']
    esriCadastralParcelLocked = 1
    esriCadastralParcelUnlocked = 2

class esriCadastralParcelLayerType(Enumeration):
    __slots__ = ['esriCadastralParcelUnknown',
                 'esriCadastralParcelPLSSTownship',
                 'esriCadastralParcelPLSSSection',
                 'esriCadastralParcelPLSSQuarterSection',
                 'esriCadastralParcelSpecialSurvey',
                 'esriCadastralParcelSimultaneousConveyance',
                 'esriCadastralParcelConveyanceDivision',
                 'esriCadastralParcelTax',
                 'esriCadastralParcelOwnership',
                 'esriCadastralParcelEncumbrance',
                 'esriCadastralParcelSeparatedRight',
                 'esriCadastralParcelOther',
                 'esriCadastralParcelPLSSSixteenthSection',
                 'esriCadastralParcelPLSS',
                 'esriCadastralParcelHistory']
    esriCadastralParcelUnknown = 0
    esriCadastralParcelPLSSTownship = 1
    esriCadastralParcelPLSSSection = 2
    esriCadastralParcelPLSSQuarterSection = 3
    esriCadastralParcelSpecialSurvey = 4
    esriCadastralParcelSimultaneousConveyance = 5
    esriCadastralParcelConveyanceDivision = 6
    esriCadastralParcelTax = 7
    esriCadastralParcelOwnership = 8
    esriCadastralParcelEncumbrance = 9
    esriCadastralParcelSeparatedRight = 10
    esriCadastralParcelOther = 11
    esriCadastralParcelPLSSSixteenthSection = 12
    esriCadastralParcelPLSS = 13
    esriCadastralParcelHistory = 14

class esriImageServerError(Enumeration):
    __slots__ = ['E_IMAGESERVER_NO_AIS_CONNECTION',
                 'E_IMAGESERVER_FAILED_TO_GETIMAGE',
                 'E_IMAGESERVER_UNSUPPORTED_OPERATION',
                 'E_IMAGESERVER_UNSUPPORTED_REQUEST',
                 'E_IMAGESERVER_UNSUPPORTED_FORMAT',
                 'E_IMAGESERVER_NO_FILE',
                 'E_IMAGESERVER_JPIP_NOT_LICENSED',
                 'E_IMAGESERVER_NO_DYNAMICIMAGEWORKSPACE',
                 'E_IMAGESERVER_INVALID_FUNCTION_DATASET',
                 'E_IMAGESERVER_NOT_ALLOW_FUNCTION',
                 'E_IMAGESERVER_CANT_MEASURE_HEIGHT',
                 'E_IMAGESERVER_CANT_MEASURE_SHADOW',
                 'E_IMAGESERVER_FAILED_TO_EXPORTIMAGE',
                 'E_IMAGESERVER_FAILED_TO_CREATE_VIEW',
                 'E_IMAGESERVER_VIEW_ALREADY_EXIST',
                 'E_IMAGESERVER_INVALID_VIEW_ID',
                 'E_IMAGESERVER_NO_PERMISSION',
                 'E_IMAGESERVER_VIEW_DOESNT_EXIST',
                 'E_IMAGESERVER_CANT_MEASURE_3D',
                 'E_IMAGESERVER_CANT_ACQUIRE_TILE_LOCK',
                 'E_IMAGESERVER_CANT_ACCESS_RASTERID',
                 'E_IMAGESERVER_BAD_CACHE_SPATIALREFERENCE',
                 'E_IMAGESERVER_CANT_ADD_RASTERS']
    E_IMAGESERVER_NO_AIS_CONNECTION = -2147216896
    E_IMAGESERVER_FAILED_TO_GETIMAGE = -2147216895
    E_IMAGESERVER_UNSUPPORTED_OPERATION = -2147216894
    E_IMAGESERVER_UNSUPPORTED_REQUEST = -2147216893
    E_IMAGESERVER_UNSUPPORTED_FORMAT = -2147216892
    E_IMAGESERVER_NO_FILE = -2147216891
    E_IMAGESERVER_JPIP_NOT_LICENSED = -2147216890
    E_IMAGESERVER_NO_DYNAMICIMAGEWORKSPACE = -2147216889
    E_IMAGESERVER_INVALID_FUNCTION_DATASET = -2147216888
    E_IMAGESERVER_NOT_ALLOW_FUNCTION = -2147216887
    E_IMAGESERVER_CANT_MEASURE_HEIGHT = -2147216886
    E_IMAGESERVER_CANT_MEASURE_SHADOW = -2147216885
    E_IMAGESERVER_FAILED_TO_EXPORTIMAGE = -2147216884
    E_IMAGESERVER_FAILED_TO_CREATE_VIEW = -2147216883
    E_IMAGESERVER_VIEW_ALREADY_EXIST = -2147216882
    E_IMAGESERVER_INVALID_VIEW_ID = -2147216881
    E_IMAGESERVER_NO_PERMISSION = -2147216880
    E_IMAGESERVER_VIEW_DOESNT_EXIST = -2147216879
    E_IMAGESERVER_CANT_MEASURE_3D = -2147216878
    E_IMAGESERVER_CANT_ACQUIRE_TILE_LOCK = -2147216877
    E_IMAGESERVER_CANT_ACCESS_RASTERID = -2147216876
    E_IMAGESERVER_BAD_CACHE_SPATIALREFERENCE = -2147216875
    E_IMAGESERVER_CANT_ADD_RASTERS = -2147216874

class esriImageServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriImageServerMessageCode_ImageServerFailed',
                 'esriImageServerMessageCode_ImageServerNotLicensed',
                 'esriImageServerMessageCode_ImageServerStarted',
                 'esriImageServerMessageCode_ImageServerDebug',
                 'esriImageServerMessageCode_ImageServerConfig',
                 'esriImageServerMessageCode_ImageServerUnknownRequest',
                 'esriImageServerMessageCode_CapabilityUnsupported',
                 'esriImageServerMessageCode_ImageServerGetVersion',
                 'esriImageServerMessageCode_ImageServerGetServiceInfo',
                 'esriImageServerMessageCode_ImageServerGetImage',
                 'esriImageServerMessageCode_ImageServerExportImage',
                 'esriImageServerMessageCode_ImageServerExportMapImage',
                 'esriImageServerMessageCode_ImageServerExecuteAISRequest',
                 'esriImageServerMessageCode_ImageServerGetPixelBlock',
                 'esriImageServerMessageCode_ImageServerMosaic',
                 'esriImageServerMessageCode_ImageServerStart',
                 'esriImageServerMessageCode_ImageServerStop',
                 'esriImageServerMessageCode_ImageServerComputeHistograms',
                 'esriImageServerMessageCode_ImageServerIdentify',
                 'esriImageServerMessageCode_ImageServerCache']
    esriImageServerMessageCode_ImageServerFailed = 80001
    esriImageServerMessageCode_ImageServerNotLicensed = 80002
    esriImageServerMessageCode_ImageServerStarted = 80003
    esriImageServerMessageCode_ImageServerDebug = 80004
    esriImageServerMessageCode_ImageServerConfig = 80005
    esriImageServerMessageCode_ImageServerUnknownRequest = 80006
    esriImageServerMessageCode_CapabilityUnsupported = 80007
    esriImageServerMessageCode_ImageServerGetVersion = 80010
    esriImageServerMessageCode_ImageServerGetServiceInfo = 80012
    esriImageServerMessageCode_ImageServerGetImage = 80014
    esriImageServerMessageCode_ImageServerExportImage = 80016
    esriImageServerMessageCode_ImageServerExportMapImage = 80017
    esriImageServerMessageCode_ImageServerExecuteAISRequest = 80018
    esriImageServerMessageCode_ImageServerGetPixelBlock = 80019
    esriImageServerMessageCode_ImageServerMosaic = 80020
    esriImageServerMessageCode_ImageServerStart = 80021
    esriImageServerMessageCode_ImageServerStop = 80022
    esriImageServerMessageCode_ImageServerComputeHistograms = 80023
    esriImageServerMessageCode_ImageServerIdentify = 80024
    esriImageServerMessageCode_ImageServerCache = 80025

class esriMensurationOperation(Enumeration):
    __slots__ = ['esriMensurationPoint',
                 'esriMensurationDistanceAndAngle',
                 'esriMensurationAreaAndPerimeter',
                 'esriMensurationHeightFromBaseAndTop',
                 'esriMensurationHeightFromBaseAndTopShadow',
                 'esriMensurationHeightFromTopAndTopShadow',
                 'esriMensurationCentroid',
                 'esriMensurationPoint3D',
                 'esriMensurationDistanceAndAngle3D',
                 'esriMensurationAreaAndPerimeter3D',
                 'esriMensurationCentroid3D']
    esriMensurationPoint = 0
    esriMensurationDistanceAndAngle = 1
    esriMensurationAreaAndPerimeter = 2
    esriMensurationHeightFromBaseAndTop = 3
    esriMensurationHeightFromBaseAndTopShadow = 4
    esriMensurationHeightFromTopAndTopShadow = 5
    esriMensurationCentroid = 6
    esriMensurationPoint3D = 7
    esriMensurationDistanceAndAngle3D = 8
    esriMensurationAreaAndPerimeter3D = 9
    esriMensurationCentroid3D = 13

class esriISLFootprintDisplayOptEnum(Enumeration):
    __slots__ = ['esriISLFootprintDisplayAll',
                 'esriISLFootprintDisplayPrimaryOnly']
    esriISLFootprintDisplayAll = 0
    esriISLFootprintDisplayPrimaryOnly = 1

class esriFeatureEditTool(Enumeration):
    __slots__ = ['esriFeatureEditToolNone',
                 'esriFeatureEditToolPoint',
                 'esriFeatureEditToolLine',
                 'esriFeatureEditToolPolygon',
                 'esriFeatureEditToolAutoCompletePolygon',
                 'esriFeatureEditToolCircle',
                 'esriFeatureEditToolEllipse',
                 'esriFeatureEditToolRectangle',
                 'esriFeatureEditToolFreehand',
                 'esriFeatureEditToolAutoCompleteFreehand']
    esriFeatureEditToolNone = 0
    esriFeatureEditToolPoint = 1
    esriFeatureEditToolLine = 2
    esriFeatureEditToolPolygon = 3
    esriFeatureEditToolAutoCompletePolygon = 4
    esriFeatureEditToolCircle = 5
    esriFeatureEditToolEllipse = 6
    esriFeatureEditToolRectangle = 7
    esriFeatureEditToolFreehand = 8
    esriFeatureEditToolAutoCompleteFreehand = 9

class esriGraphicFeatureServerMsgCodeEnum(Enumeration):
    __slots__ = ['esriGraphicFeatureServerMessageCode_ErrorMessage',
                 'esriGraphicFeatureServerMessageCode_WarningMessage',
                 'esriGraphicFeatureServerMessageCode_InfoMessage',
                 'esriGraphicFeatureServerMessageCode_DebugMessage',
                 'esriGraphicFeatureServerMessageCode_ConstructStarted',
                 'esriGraphicFeatureServerMsgCode_InvalidLicense',
                 'esriGraphicFeatureServerMessageCode_ConstructEnded',
                 'esriGraphicFeatureServerMsgCode_MixedEditingModeNotAllowed',
                 'esriGraphicFeatureServerMsgCode_RequestNotSupported',
                 'esriGraphicFeatureServerMsgCode_CapabilityNotSupported',
                 'esriGraphicFeatureServerMsgCode_TableLayerIDNotFound',
                 'esriGraphicFeatureServerMsgCode_TableLayerDoesNotSupportAttachments',
                 'esriGraphicFeatureServerMessageCode_NonSDEDataUsed',
                 'esriGraphicFeatureServerMessageCode_DefaultZValueReadingError',
                 'esriGraphicFeatureServerMessageCode_DefaultZValueBeingUsed',
                 'esriGraphicFeatureServeMsgCode_MissingParameter',
                 'esriGraphicFeatureServeMsgCode_InvalidLayerOrTableID',
                 'esriGraphicFeatureMsgCode_MessageArrival_Add',
                 'esriGraphicFeatureMsgCode_MessageProcessed_Add',
                 'esriGraphicFeatureMsgCode_MessageArrival_AddAttachments',
                 'esriGraphicFeatureMsgCode_MessageProcessed_AddAttachments',
                 'esriGraphicFeatureMsgCode_MessageArrival_ApplyEdits',
                 'esriGraphicFeatureMsgCode_MessageProcessed_ApplyEdits',
                 'esriGraphicFeatureMsgCode_MessageArrival_Delete',
                 'esriGraphicFeatureMsgCode_MessageProcessed_Delete',
                 'esriGraphicFeatureMsgCode_MessageArrival_DeleteAttachments',
                 'esriGraphicFeatureMsgCode_MessageProcessed_DeleteAttachments',
                 'esriGraphicFeatureMsgCode_MessageArrival_DeleteByID',
                 'esriGraphicFeatureMsgCode_MessageProcessed_DeleteByID',
                 'esriGraphicFeatureMsgCode_MessageArrival_GetCount',
                 'esriGraphicFeatureMsgCode_MessageProcessed_GetCount',
                 'esriGraphicFeatureMsgCode_MessageArrival_GetLayers',
                 'esriGraphicFeatureMsgCode_MessageProcessed_GetLayers',
                 'esriGraphicFeatureMsgCode_MessageArrival_GetServiceObjectCount',
                 'esriGraphicFeatureMsgCode_MessageProcessed_GetServiceObjectCount',
                 'esriGraphicFeatureMsgCode_MessageArrival_GetTables',
                 'esriGraphicFeatureMsgCode_MessageProcessed_GetTables',
                 'esriGraphicFeatureMsgCode_MessageArrival_Query',
                 'esriGraphicFeatureMsgCode_MessageProcessed_Query',
                 'esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentData',
                 'esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentData',
                 'esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentInfos',
                 'esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentInfos',
                 'esriGraphicFeatureMsgCode_MessageArrival_QueryFromService',
                 'esriGraphicFeatureMsgCode_MessageProcessed_QueryFromService',
                 'esriGraphicFeatureMsgCode_MessageArrival_QueryHTMLPopups',
                 'esriGraphicFeatureMsgCode_MessageProcessed_QueryHTMLPopups',
                 'esriGraphicFeatureMsgCode_MessageArrival_QueryIDs',
                 'esriGraphicFeatureMsgCode_MessageProcessed_QueryIDs',
                 'esriGraphicFeatureMsgCode_MessageArrival_QueryRelatedObjects',
                 'esriGraphicFeatureMsgCode_MessageProcessed_QueryRelatedObjects',
                 'esriGraphicFeatureMsgCode_MessageArrival_Update',
                 'esriGraphicFeatureMsgCode_MessageProcessed_Update',
                 'esriGraphicFeatureMsgCode_MessageArrival_UpdateAttachments',
                 'esriGraphicFeatureMsgCode_MessageProcessed_UpdateAttachments',
                 'esriGraphicFeatureMsgCode_MessageArrival_CreateReplica',
                 'esriGraphicFeatureMsgCode_MessageProcessed_CreateReplica',
                 'esriGraphicFeatureMsgCode_MessageArrival_ExportReplicaDataChanges',
                 'esriGraphicFeatureMsgCode_MessageProcessed_ExportReplicaDataChanges',
                 'esriGraphicFeatureMsgCode_MessageArrival_GetReplicas',
                 'esriGraphicFeatureMsgCode_MessageProcessed_GetReplicas',
                 'esriGraphicFeatureMsgCode_MessageArrival_ImportReplicaDataChanges',
                 'esriGraphicFeatureMsgCode_MessageProcessed_ImportReplicaDataChanges',
                 'esriGraphicFeatureMsgCode_MessageArrival_UnregisterReplica',
                 'esriGraphicFeatureMsgCode_MessageProcessed_UnregisterReplica',
                 'esriGraphicFeatureMsgCode_MessageArrival_AlterReplica',
                 'esriGraphicFeatureMsgCode_MessageProcessed_AlterReplica',
                 'esriGraphicFeatureMsgCode_Message_LayerTableNotEditable',
                 'esriGraphicFeatureMsgCode_Message_ErrorInitializingLayers',
                 'esriGraphicFeatureMsgCode_Message_ErrorInitializingTables',
                 'esriGraphicFeatureMsgCode_Message_ErrorMissingQueryCriteria',
                 'esriGraphicFeatureMsgCode_MessageArrival_GetServerInfo',
                 'esriGraphicFeatureMsgCode_MessageProcessed_GetServerInfo',
                 'esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExStart',
                 'esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExEnd',
                 'esriGraphicFeatureMsgCode_CfgFactory_NoInputDir',
                 'esriGraphicFeatureMsgCode_CfgFactory_InvalidInputDir',
                 'esriGraphicFeatureMsgCode_CfgFactory_NoCleanupRequired',
                 'esriGraphicFeatureMsgCode_CfgFactory_CleanupFailed',
                 'esriGraphicFeatureMsgCode_CfgFactory_MapServerConfigPropsMissing',
                 'esriGraphicFeatureMsgCode_CfgFactory_DeleteInfo',
                 'esriGraphicFeatureMsgCode_CfgFactory_CleanupRequired',
                 'esriGraphicFeatureMsgCode_CfgFactory_CleanupFinished']
    esriGraphicFeatureServerMessageCode_ErrorMessage = 17000
    esriGraphicFeatureServerMessageCode_WarningMessage = 17001
    esriGraphicFeatureServerMessageCode_InfoMessage = 17002
    esriGraphicFeatureServerMessageCode_DebugMessage = 17003
    esriGraphicFeatureServerMessageCode_ConstructStarted = 17004
    esriGraphicFeatureServerMsgCode_InvalidLicense = 17005
    esriGraphicFeatureServerMessageCode_ConstructEnded = 17006
    esriGraphicFeatureServerMsgCode_MixedEditingModeNotAllowed = 17007
    esriGraphicFeatureServerMsgCode_RequestNotSupported = 17008
    esriGraphicFeatureServerMsgCode_CapabilityNotSupported = 17009
    esriGraphicFeatureServerMsgCode_TableLayerIDNotFound = 17010
    esriGraphicFeatureServerMsgCode_TableLayerDoesNotSupportAttachments = 17011
    esriGraphicFeatureServerMessageCode_NonSDEDataUsed = 17012
    esriGraphicFeatureServerMessageCode_DefaultZValueReadingError = 17013
    esriGraphicFeatureServerMessageCode_DefaultZValueBeingUsed = 17014
    esriGraphicFeatureServeMsgCode_MissingParameter = 17015
    esriGraphicFeatureServeMsgCode_InvalidLayerOrTableID = 17016
    esriGraphicFeatureMsgCode_MessageArrival_Add = 17017
    esriGraphicFeatureMsgCode_MessageProcessed_Add = 17018
    esriGraphicFeatureMsgCode_MessageArrival_AddAttachments = 17019
    esriGraphicFeatureMsgCode_MessageProcessed_AddAttachments = 17020
    esriGraphicFeatureMsgCode_MessageArrival_ApplyEdits = 17021
    esriGraphicFeatureMsgCode_MessageProcessed_ApplyEdits = 17022
    esriGraphicFeatureMsgCode_MessageArrival_Delete = 17023
    esriGraphicFeatureMsgCode_MessageProcessed_Delete = 17024
    esriGraphicFeatureMsgCode_MessageArrival_DeleteAttachments = 17025
    esriGraphicFeatureMsgCode_MessageProcessed_DeleteAttachments = 17026
    esriGraphicFeatureMsgCode_MessageArrival_DeleteByID = 17027
    esriGraphicFeatureMsgCode_MessageProcessed_DeleteByID = 17028
    esriGraphicFeatureMsgCode_MessageArrival_GetCount = 17029
    esriGraphicFeatureMsgCode_MessageProcessed_GetCount = 17030
    esriGraphicFeatureMsgCode_MessageArrival_GetLayers = 17031
    esriGraphicFeatureMsgCode_MessageProcessed_GetLayers = 17032
    esriGraphicFeatureMsgCode_MessageArrival_GetServiceObjectCount = 17033
    esriGraphicFeatureMsgCode_MessageProcessed_GetServiceObjectCount = 17034
    esriGraphicFeatureMsgCode_MessageArrival_GetTables = 17035
    esriGraphicFeatureMsgCode_MessageProcessed_GetTables = 17036
    esriGraphicFeatureMsgCode_MessageArrival_Query = 17037
    esriGraphicFeatureMsgCode_MessageProcessed_Query = 17038
    esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentData = 17039
    esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentData = 17040
    esriGraphicFeatureMsgCode_MessageArrival_QueryAttachmentInfos = 17041
    esriGraphicFeatureMsgCode_MessageProcessed_QueryAttachmentInfos = 17042
    esriGraphicFeatureMsgCode_MessageArrival_QueryFromService = 17043
    esriGraphicFeatureMsgCode_MessageProcessed_QueryFromService = 17044
    esriGraphicFeatureMsgCode_MessageArrival_QueryHTMLPopups = 17045
    esriGraphicFeatureMsgCode_MessageProcessed_QueryHTMLPopups = 17046
    esriGraphicFeatureMsgCode_MessageArrival_QueryIDs = 17047
    esriGraphicFeatureMsgCode_MessageProcessed_QueryIDs = 17048
    esriGraphicFeatureMsgCode_MessageArrival_QueryRelatedObjects = 17049
    esriGraphicFeatureMsgCode_MessageProcessed_QueryRelatedObjects = 17050
    esriGraphicFeatureMsgCode_MessageArrival_Update = 17051
    esriGraphicFeatureMsgCode_MessageProcessed_Update = 17052
    esriGraphicFeatureMsgCode_MessageArrival_UpdateAttachments = 17053
    esriGraphicFeatureMsgCode_MessageProcessed_UpdateAttachments = 17054
    esriGraphicFeatureMsgCode_MessageArrival_CreateReplica = 17055
    esriGraphicFeatureMsgCode_MessageProcessed_CreateReplica = 17056
    esriGraphicFeatureMsgCode_MessageArrival_ExportReplicaDataChanges = 17057
    esriGraphicFeatureMsgCode_MessageProcessed_ExportReplicaDataChanges = 17058
    esriGraphicFeatureMsgCode_MessageArrival_GetReplicas = 17059
    esriGraphicFeatureMsgCode_MessageProcessed_GetReplicas = 17060
    esriGraphicFeatureMsgCode_MessageArrival_ImportReplicaDataChanges = 17061
    esriGraphicFeatureMsgCode_MessageProcessed_ImportReplicaDataChanges = 17062
    esriGraphicFeatureMsgCode_MessageArrival_UnregisterReplica = 17063
    esriGraphicFeatureMsgCode_MessageProcessed_UnregisterReplica = 17064
    esriGraphicFeatureMsgCode_MessageArrival_AlterReplica = 17065
    esriGraphicFeatureMsgCode_MessageProcessed_AlterReplica = 17066
    esriGraphicFeatureMsgCode_Message_LayerTableNotEditable = 17067
    esriGraphicFeatureMsgCode_Message_ErrorInitializingLayers = 17068
    esriGraphicFeatureMsgCode_Message_ErrorInitializingTables = 17069
    esriGraphicFeatureMsgCode_Message_ErrorMissingQueryCriteria = 17070
    esriGraphicFeatureMsgCode_MessageArrival_GetServerInfo = 17071
    esriGraphicFeatureMsgCode_MessageProcessed_GetServerInfo = 17072
    esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExStart = 17073
    esriGraphicFeatureMsgCode_CfgFactory_OnRemoveExEnd = 17074
    esriGraphicFeatureMsgCode_CfgFactory_NoInputDir = 17075
    esriGraphicFeatureMsgCode_CfgFactory_InvalidInputDir = 17076
    esriGraphicFeatureMsgCode_CfgFactory_NoCleanupRequired = 17077
    esriGraphicFeatureMsgCode_CfgFactory_CleanupFailed = 17078
    esriGraphicFeatureMsgCode_CfgFactory_MapServerConfigPropsMissing = 17079
    esriGraphicFeatureMsgCode_CfgFactory_DeleteInfo = 17080
    esriGraphicFeatureMsgCode_CfgFactory_CleanupRequired = 17081
    esriGraphicFeatureMsgCode_CfgFactory_CleanupFinished = 17082

class esriGraphicFeatureServerErrors(Enumeration):
    __slots__ = ['GFS_E_MISSING_PARAMETER',
                 'GFS_E_UNSUPPORTED_DATASOURCE_TYPE',
                 'GFS_E_NOLAYER_OR_TABLE_INITIALIZED',
                 'GFS_E_LAYER_TABLE_NOT_EDITABLE',
                 'GFS_E_FEATURE_UPDATE_FAILED_MISSING_M_VALUES',
                 'GFS_E_FEATURE_GEOMETRY_PUT_FAILED_FAILED_MISSING_Z_VALUES',
                 'GFS_E_EDITOR_TRACKING_TIMESTAMPS_IN_UTC_AND_DATABASETIME_ERROR',
                 'GFS_E_MISSING_EDITOR_TRACKING_TIMEZONE_ERROR']
    GFS_E_MISSING_PARAMETER = -2147221403
    GFS_E_UNSUPPORTED_DATASOURCE_TYPE = -2147221402
    GFS_E_NOLAYER_OR_TABLE_INITIALIZED = -2147221401
    GFS_E_LAYER_TABLE_NOT_EDITABLE = -2147221400
    GFS_E_FEATURE_UPDATE_FAILED_MISSING_M_VALUES = -2147221399
    GFS_E_FEATURE_GEOMETRY_PUT_FAILED_FAILED_MISSING_Z_VALUES = -2147221398
    GFS_E_EDITOR_TRACKING_TIMESTAMPS_IN_UTC_AND_DATABASETIME_ERROR = -2147221397
    GFS_E_MISSING_EDITOR_TRACKING_TIMEZONE_ERROR = -2147221396

class esriJPIPServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriJPIPServerMessageCode_Failed',
                 'esriJPIPServerMessageCode_NotLicensed',
                 'esriJPIPServerMessageCode_Started',
                 'esriJPIPServerMessageCode_Initialized']
    esriJPIPServerMessageCode_Failed = 83001
    esriJPIPServerMessageCode_NotLicensed = 83002
    esriJPIPServerMessageCode_Started = 83003
    esriJPIPServerMessageCode_Initialized = 83004

