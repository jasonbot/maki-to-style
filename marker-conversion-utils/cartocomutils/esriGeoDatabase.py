'Type library'
__all__ = ['INetworkProtectNames', 'INetworkDatasetProtectNames', 'IGeoDBProtectNames', 'ISQLPrivilege', 'IGeoDataset', 'IProperty', 'IEnumProperty', 'IDatasetEditInfo', 'IDatasetEdit', 'ITransactions', 'ITransactionsOptions', 'ILockInfo', 'IEnumLockInfo', 'IFIDSet', 'IDomain', 'IGeometryDef', 'IField', 'IFields', 'IRowBuffer', 'IIndex', 'IEnumIndex', 'IIndexes', 'IClass', 'IQueryFilter', 'IEnumIDs', 'IMetadata', 'IMetadataEdit', 'ISQLSyntax', 'ISchemaLockInfo', 'IEnumSchemaLockInfo', 'ISchemaLock', 'IEnumDatasetType', 'IDataElement', 'IFeatureClassStorage', 'IFeatureClassStorage2', 'IDatasetMigration', 'IWorkspace2', 'IDatabaseConnectionInfo', 'IDatabaseConnectionInfo2', 'IUserInfo', 'IEnumUserInfo', 'IDatabaseConnectionInfo3', 'IDatabaseConnectionInfo4', 'IWorkspaceProperty', 'IWorkspaceProperties', 'IWorkspaceProperties2', 'IWorkspaceExtension', 'IWorkspaceExtensionManager', 'IWorkspaceFactoryFileExtensions', 'IWorkspaceFactoryLockControl', 'IWorkspaceProgressTracker', 'IDatasetEditEx', 'IDatasetFileStat', 'IDatasetFileStat2', 'IDatasetNameFileStat', 'IDatasetNameFileStat2', 'IDatasetNameFileSize', 'IWorkspaceEditInfo', 'IWorkspaceEdit', 'IMultiuserWorkspaceEdit', 'IWorkspaceEditControl', 'IWorkspaceEditEvents', 'IWorkspaceEditEvents2', 'ISpatialCacheManager', 'ISpatialCacheManager2', 'ISpatialCacheManager3', 'IGeodataXform', 'IGeoDataset2', 'IGeoDatasetSchemaEdit', 'IGeoDatasetSchemaEdit2', 'IHistoricalMarker', 'IEnumHistoricalMarker', 'IHistoricalVersion', 'IHistoricalWorkspace', 'IArchivableObject', 'IArchiveRegistrationInfo', 'IFileDataLock', 'IDatabaseCompact', 'ISetDefaultConnectionInfo', 'ISetDefaultConnectionInfo2', 'ISetDefaultConnectionInfo3', 'ISqlDefaultConnectionInfo', 'INativeType', 'INativeTypeSearch', 'INativeTypeInfo', 'IComplexNativeType', 'IEnumSpatialReferenceInfo', 'IWorkspaceSpatialReferenceInfo', 'IConfigurationParameter', 'IEnumConfigurationParameter', 'IConfigurationKeyword', 'IEnumConfigurationKeyword', 'IConfigurationKeyword2', 'IConfigurationParameter2', 'IWorkspaceConfiguration', 'IXMLIndexTag', 'IXMLIndexTags', 'IXMLIndexTemplate', 'IEnumXMLIndexTemplate', 'IXMLIndex', 'IXMLIndexEdit', 'IXMLIndexTemplateManage', 'IXMLIndexUtil', 'IRule', 'IEnumRule', 'IFeatureBuffer', 'IFeatureWorkspaceSchemaEdit', 'IGeodatabaseRelease', 'IEnumDomain', 'IWorkspaceDomains', 'IWorkspaceDomains2', 'IWorkspaceDomains3', 'IPnt', 'IRasterStorageDef', 'IRasterDef', 'IPixelBlock', 'IRasterCursor', 'IRaster', 'IRasterCatalog', 'IReplicaDataset', 'IEnumReplicaDataset', 'IWorkspaceReplicaDatasets', 'IEnumTopologyParent', 'ITopologyElement', 'IEnumTGHitInfo', 'IIndexEdit', 'IGPMessage', 'IGPDescribe', 'INetWeight', 'INetTopology', 'INetElementDescription', 'INetTopologyEdit', 'INetElementClass', 'INetWeightAssociation', 'IEnumNetWeightAssociation', 'IInvalidObjectInfo', 'IEnumInvalidObject', 'INetworkUpdate', 'INetSchema', 'INetSchemaEdit', 'INetWeightEdit', 'INetWeightAssociationEdit', 'INetAttributes', 'INetAttributesEdit', 'INetElementDescriptionEdit', 'INetDiagnostics', 'INetTopologyEditGEN', 'IDatasetAnalyze', 'ITopologyProtectNames', 'IFeatureDatasetManage', 'IFeatureClassLoad', 'IQueryDescription', 'IQueryTableName', 'IFeatureClassCreation', 'IInvalidArea', 'IFeatureDraw', 'IRowEdit', 'IFeatureSimplify', 'IFeatureSimplify2', 'IQueryFilter2', 'ISpatialFilter', 'ISQLCheck', 'ITableSortCallBack', 'IFieldInfo', 'ITableFields', 'ISimpleEdgeFeature', 'IComplexNetworkFeature', 'IFIDSet2', 'ITopologyRule', 'IDEDataset', 'IGPReplicaDataset', 'IGPReplicaDatasets', 'IGPMessagesCallback', 'IGPMessages', 'IRecord', 'IAttachmentInfo', 'IAttachmentData', 'IEditorTrackingInfo', 'IOwnershipBasedAccessControl', 'ICoverageAnnotationFeature', 'IFeatureClassManage', 'IFeatureProject', 'IFieldEdit', 'IField2', 'IFieldEdit2', 'IModelInfo', 'IFields2', 'IFieldsEdit', 'IGeometryDefEdit', 'IIndexesEdit', 'IClassSchemaEdit', 'IClassSchemaEdit2', 'IClassSchemaEdit3', 'IClassSchemaEdit4', 'IClassSchemaEditEx', 'IRelClassSchemaEdit', 'IRelQueryTableSettings', 'ITableCapabilities', 'ITopologyGraphEvents', 'IObjectClassSchemaEvents', 'IObjectClass2', 'ISimpleRelationshipChanges', 'IEnumSubtype', 'ISubtypes', 'IValidate', 'IRangeDomain', 'ICodedValueDomain', 'ICodedValueDomain2', 'IStringDomain', 'IEdgeConnectivityRule', 'IJunctionConnectivityRule', 'IJunctionConnectivityRule2', 'IRelationshipRule', 'IObjectClassName', 'IMemoryRelationshipClassName', 'IClassHelper', 'IClassExtension', 'IObjectClassInfo', 'IObjectClassInfo2', 'IFeatureClassDraw', 'IRowSubtypes', 'IEnumGeometryBind', 'IRowEvents', 'IRowChanges', 'IFeatureEvents', 'IFeatureChanges', 'INetworkFeatureEvents', 'IEnumFeatureSetup', 'IObjects', 'IFeatureSnap', 'ITimeQueryFilter', 'IFilterDefs', 'IXMLFilterDef', 'IQueryFilterDefinition', 'IQueryFilterDefinition2', 'IGeometricNetworkReconcileProperties', 'IGeometricNetworkConnectivity', 'IRepairConnectivityProgressEvents', 'IRepairConnectivityProgress', 'IGeometricNetworkConnectivity2', 'IRebuildIndexes', 'IVersionedView', 'IVersionEvents', 'IVersionEvents2', 'IGeodatabaseRelease2', 'IGeodatabaseRelease3', 'IGeodatabaseRelease4', 'IObjectClassDescription', 'IFeatureClassDescription', 'INetworkClassDescription', 'IXmlPropertySet', 'IXmlPropertySet2', 'IMetadataSynchronizer', 'IMetadataSynchronizerManager', 'IFieldInfo2', 'IFieldInfo3', 'IRasterFieldInfo', 'ITopologyErrorFeature', 'IEnumTopologyErrorFeature', 'IErrorFeatureContainer', 'ITopologyRuleContainer', 'ITopologyClassEvents', 'ICancelOperation', 'IClassEx', 'IAttachment', 'IAttachment2', 'IEnumAttachment', 'IAttachmentManager', 'IAttachmentManager2', 'IAttachmentInfoArray', 'IAttachmentDataArray', 'ITableAttachments', 'IFIDSetOperator', 'IGeometryResultOptions', 'IGUIDGenerator', 'ICompressionInfo', 'IRecordArray', 'IAttachmentInfo2', 'IThumbnailInfo', 'IDocumentationInfo', 'IItemInfo', 'IItemInfo2', 'IItemInfos', 'IExternalDeserializerGdb', 'ISqlKeywordDictionary', 'ISqlInvalidCharacterDictionary', 'IFieldError', 'IEnumFieldError', 'IGeoDatabaseErrorRecords', 'IFeatureProgress', 'IRecordNumberSet', 'IReplicaDescriptionExtension', 'IReplicaLog', 'IEnumReplicaLog', 'IReplicaDatasetEdit', 'IReplicaDataset2', 'IXMLReplicaDescription', 'IReplicaDescriptionExtensionManager', 'IGPReplicaOptions', 'IGPReplicaOptions2', 'IGPReplicaDataset2', 'IRouteLocatorName', 'IRouteEventProperties', 'IRouteEventProperties2', 'IRouteEventSourceName', 'IXYEventSourceName', 'IGPMessage2', 'IGPName', 'IEnumGPName', 'IGPToolTip', 'IRasterColormap', 'IRasterLODInfos', 'IRasterLODInfos2', 'IRasterDatasetEdit', 'IRasterDef2', 'IRasterStorageDef2', 'IRasterStorageDef3', 'IRasterCatalogName', 'IRasterCatalogHelper', 'IRasterCatalogHelper2', 'IMosaicDatasetName', 'IMosaicDatasetName2', 'IRasterDatasetInfo', 'IDEBrowseOptions', 'IDataElements', 'IEnumDataElement', 'IDataElementInfo', 'IDataElementHelper', 'IDEGeoDataset', 'IDEWorkspace', 'IDEWorkspace2', 'IDEWorkspace3', 'IWorkspaceDefinition', 'IDEDataset2', 'IDETable', 'IDEGdbTable', 'IDEGdbTable2', 'IDEEditorTracking', 'IDEFeatureClass', 'IDEGdbFeatureClass', 'IDERasterCatalog', 'IGPTopologyMembership', 'IGPGeometricNetworkMembership', 'IDERelationshipClassEx', 'IDERelationshipClassEx2', 'IGPRelationshipClassKey', 'IDataElementType', 'IGxFilterInfo', 'IDEGeometricNetwork', 'IDEGeometricNetwork2', 'IDETopology', 'IGPVersionInfo', 'IGPVersionInfos', 'IGPDomain2', 'IGPRangeDomain2', 'IGPCodedValueDomain2', 'IGPHistoricalMarker', 'IDEServerObject', 'IDEServerConnection', 'IResultPortionInfo', 'IResultPortion', 'IGPMessageManager', 'IDERasterDataset', 'IDERasterDatasetEx', 'IDERasterBand', 'IGPSystemToolboxLocation', 'IDEGdbUtilities', 'IDEGdbUtilities2', 'IGPWorkspaceExtension', 'IGPDatasetExtension', 'IGPSubtype', 'IWorkspaceDataElements', 'IWorkspaceDataElements2', 'IOleDBConnectionInfo', 'ITin', 'ITinElement', 'ITinFeatureSeed', 'ITinFilter', 'ITinDynamicFilter', 'ITinValueFilter', 'ITinValueFilter2', 'ITinTriangleFilter', 'ITinEdgeTypeFilter', 'ITinNodeSourceFilter', 'IEnumTinElement', 'ITinAdvanced3', 'ITinNodeInfo', 'ITinEditErrorLog', 'ITinSelection', 'ITinWorkspace', 'ITinImporter', 'ITinClock', 'ITinEdgeTypeFilter2', 'IXYEvent2FieldsProperties', 'INetworkElement', 'INetworkScriptEvaluatorFunctions', 'INetworkAttribute', 'IShields', 'INetworkSourceDirections', 'INetworkSource', 'INetworkDataset', 'INetworkDirections', 'IDENetworkDataset', 'IEnumNetworkElement', 'INetworkDirections2', 'INetworkSourceDirections2', 'ITrafficData', 'ISignposts', 'IEnumHierarchyRange', 'IGPNetworkDatasetMembership', 'IDENetworkDataset2', 'INetworkAttributeParameter', 'INetworkAttributeParameter2', 'INetworkAttribute2', 'INetworkAttribute3', 'INetworkDataset2', 'INetworkForwardStarSetup', 'INetworkElement64', 'ITrafficData2', 'IHistoricalTrafficData', 'IHistoricalTrafficData2', 'ITrafficFeedDirectory', 'ITrafficFeedGPService', 'IDynamicTrafficData', 'IHistoricalTravelTimeEvaluator', 'ITimeAwareEvaluator', 'INetworkEvaluator', 'IEdgeFeatureSource', 'IJunctionFeatureSource', 'ISystemJunctionSource', 'IDirectionsAttributeMapping', 'INetworkSourceDirections3', 'IDirectionsLandmarkSource', 'IDirectionsFieldMapping', 'IStreetNameFields', 'IStreetNameFields2', 'IEvaluatedNetworkAttribute', 'IEvaluatedNetworkAttribute2', 'INetworkEvaluator2', 'INetworkConstantEvaluator', 'INetworkFieldEvaluator', 'INetworkFieldEvaluator2', 'INetworkScriptEvaluator', 'INetworkScriptEvaluator2', 'INetworkGlobalTurnDelayCategory', 'INetworkGlobalTurnDelayEvaluator', 'INetworkFunctionEvaluator', 'INetworkBuild', 'ITrafficDataManager', 'IRepresentationRules', 'IRepresentationClassName', 'IOverride', 'IDERepresentationClass', 'IPlugInCursorHelper', 'IPlugInDatasetHelper', 'IPlugInWorkspaceHelper', 'IPlugInDatasetInfo', 'IPlugInLicense', 'IPlugInWorkspaceFactoryHelper', 'IPlugInWorkspaceFactoryHelper2', 'IPlugInCreateWorkspace', 'IPlugInWorkspaceHelper2', 'IPlugInMetadataPath', 'IPlugInMetadataPath2', 'IPlugInMetadata', 'IPlugInMetadata2', 'IPlugInFastRowCount', 'IPlugInRowCount', 'IPlugInFileSystemDataset', 'IPlugInIndexInfo', 'IPlugInIndexManager', 'IPlugInDatasetHelper2', 'IPlugInFastQueryValues', 'IPlugInGxIntegration', 'IPlugInCreateDataset', 'IPlugInDatasetLoader', 'IPlugInDatasetLoad', 'IRelationshipChanges', 'IThumbnailInfoImpl', 'IItemInfoImpl', 'IWorkspace', 'IEnumWorkspace', 'IEnumWorkspaceEx', 'IEnterpriseWorkspaceFactory', 'IWorkspaceHelper', 'IWorkspaceExtensionControl', 'IWorkspaceExtension2', 'IWorkspaceStatus', 'IEnumWorkspaceStatus', 'IWorkspaceFactoryStatus', 'IScratchWorkspaceFactory', 'IScratchWorkspaceFactory2', 'IWorkspaceFactorySchemaCache', 'IFieldChecker', 'IPlugInFileOperations', 'IPlugInFileOperationsClass', 'IWorkspaceFactory', 'IWorkspaceName', 'IRemoteDatabaseWorkspaceFactory', 'IRemoteDatabaseWorkspaceFactory2', 'IWorkspaceName2', 'IWorkspaceFactory2', 'ILocalDatabaseCompact', 'IReplicaDescription', 'IReplica', 'IEnumReplica', 'IWorkspaceReplicas', 'IWorkspaceReplicasAdmin', 'IWorkspaceReplicasAdmin2', 'IWorkspaceReplicasAdmin3', 'IGPReplicaDescription', 'IGPReplica', 'IWorkspaceReplicas2', 'IReplica2', 'IReplica3', 'IReplicaEdit', 'IReplicaEdit2', 'IWorkspaceReplicaEvents', 'IGPReplica2', 'IGPReplicas', 'ILocatorWorkspaceName', 'ILocatorName', 'IEnumLocatorName', 'IWorkspaceDefinition2', 'IEnumDataset', 'IDataset', 'IWorkspaceEvents', 'IWorkspaceEvents2', 'IDatasetContainer', 'IRasterDataset', 'IRasterWorkspaceEx', 'IDatasetComponent', 'IDatasetComponent2', 'IXmlPropertySetEdit', 'IRasterDataset2', 'IRasterDataset3', 'IRasterCatalogItem', 'IRasterWorkspace2', 'IRasterWorkspace4', 'IRasterValue', 'IRasterValue2', 'ISaveAs', 'ISaveAs2', 'IEnumDatasetName', 'IDatasetName', 'IWorkspaceExtension3', 'ITableNameSet', 'IDatasetName2', 'IFeatureWorkspaceManage', 'IFeatureDatasetName', 'ISimpleDataConverter', 'IFeatureDatasetName2', 'IFeatureClassName', 'ITopologyName', 'IDatasetContainerName', 'IDatasetContainer2', 'IDatasetContainer3', 'ITopologyClassName', 'IRelationshipClassName', 'IGeometricNetworkName', 'IFeatureWorkspaceManage2', 'IFeatureWorkspaceManage3', 'ICopyHelper', 'IRelationshipClassInfo', 'IEnumRelationshipClassInfo', 'IReplicaDescription2', 'IReplicaDescription3', 'IRasterDatasetName', 'IRasterBandName', 'IFeatureDataConverter', 'INetworkDatasetName', 'IPlugInNetworkDatasetContainer', 'IVersionedWorkspace', 'IEnumVersionInfo', 'IVersionInfo', 'IVersion', 'IVersionedObject', 'IVersion2', 'IVersionInfo2', 'IEnumVersionInfo2', 'IVersion3', 'IVersionedWorkspace2', 'IVersionedWorkspace3', 'IVersionedWorkspace4', 'IVersionedObject2', 'IVersionedObject3', 'IDataChangesEx', 'IWorkspaceEdit2', 'IDifferenceCursor', 'IRow', 'ICursor', 'IDifferenceCursorEx', 'IRelClassEnumRowPairs', 'IQueryDef', 'ITableWrite', 'IQueryDef2', 'IQueryName', 'IQueryName2', 'IAttributeRule', 'ITableUtil', 'ITableWrite2', 'IObjectClassValidation', 'IRandomAccessCursor', 'IRandomAccessTable', 'IRowCompare', 'IDataStatistics', 'IEnumEventError', 'IEventSourceErrors', 'INetworkEvaluatorSetup', 'ITable', 'ISelectionSet', 'IConflictClass', 'IEnumConflictClass', 'IVersionEdit', 'IVersionEdit2', 'IVersionEdit3', 'ISqlWorkspace', 'IEnumTable', 'ITableSort', 'IArchivableClass', 'IRelQueryTableInfo', 'ICollectionTableVersionChanges', 'IEnumTableVersionChanges', 'IRelQueryTableManage', 'IValidation', 'IValidation2', 'IRelQueryTableName', 'IRelQueryTableName2', 'ISelectionSet2', 'IRelQueryTableSelectionSet', 'IGeometricNetworkErrorDetection', 'IVersionedTable', 'IVersionEdit4', 'IRecordSetInit', 'IRecordSet', 'IRecordSet2', 'IExternalSerializerGdb', 'IJSONConverterGdb', 'IDataConvertProcess', 'ISimpleDataConverter2', 'IReplicaFilterDescriptionEdit', 'IReplicaFilterDescription', 'IReplicaFilterDescription2', 'IWorkspaceReplicaSyncEvents', 'IRasterDatasetEdit2', 'IRasterDatasetEdit3', 'IFeatureDataConverter2', 'IXYEventSource', 'IExternalSerializerGdb2', 'IEnumNameMapping', 'INameMapping', 'INameMapping2', 'IReplicaDescription4', 'IExtractionUtilities', 'IGeoDBDataTransfer', 'IGeoDBDataTransfer2', 'IFeatureWorkspace', 'IObjectClass', 'IObject', 'IFeature', 'IFeatureCursor', 'IFeatureClassWrite', 'IFeatureEdit', 'IFeatureElement', 'IFeatureConnect', 'IEnumFeature', 'IEnumObjectClass', 'ITransformGroup', 'IObjectClassContainer', 'IObjectClassEvents', 'IFeatureClassUtil', 'IPersistCustomFeaturesExtension', 'IFeatureEdit2', 'IFeatureElementEdit', 'IEnumObject', 'IFeatureClass', 'IFeatureDataset', 'IFeatureWorkspaceAnno', 'IEnumFeatureClass', 'IFeatureClassContainer', 'IFeatureDatasetExtension', 'IFeatureDatasetExtension2', 'IFeatureDatasetExtensionContainer', 'ITopologyProperties', 'IFeatureConstruction', 'ISurface', 'ITinEdit2', 'IGeoDatabaseBridge', 'IEnumRelationshipClass', 'IRelationshipClass', 'IRelationship', 'IEnumRelationship', 'IRelationshipClassContainer', 'IRelQueryTable', 'IRelQueryTableFactory', 'IRelationshipClassEvents', 'IRelationshipClass2', 'IRelationshipClass3', 'IMemoryRelationshipClassFactory', 'IRelatedObjectEvents', 'IRelatedObjectClassEvents', 'IRelatedObjectClassEvents2', 'IConfirmSendRelatedObjectEvents', 'IFeatureClassEdit', 'ISynchronizationHelper', 'IEnumAttributedRelationship', 'ITopologyWorkspace', 'ITopology', 'ITopologyContainer', 'ITopology2', 'ITopologyContainer2', 'ITopologyClass', 'ITopologyGraph', 'ITopologyGraph2', 'ITopologyGraph3', 'ITopologyGraph4', 'IEnumTopologyNode', 'ITopologyNode', 'ITopologyEdge', 'IEnumNodeEdge', 'IEnumTopologyEdge', 'IGPValue', 'IGPDomain', 'IGPDataType', 'IEnumGPValue', 'IGPDataTypeFactory', 'IGPVariable', 'IGPCodedValueDomain', 'IGPChoiceList', 'INetwork', 'IForwardStar', 'IEnumNetEID', 'INetworkWorkspace', 'INetworkWorkspace2', 'INetElements', 'IForwardStarGEN', 'IUtilityNetworkGEN', 'IEnumNetEIDBuilderGEN', 'IEnumNetEIDBuilder', 'IUtilityNetwork', 'IUtilityNetwork2', 'IGraph', 'IEdgeFeature', 'ISimpleJunctionFeature', 'IComplexJunctionFeature', 'IEnumEdgeFeature', 'IJunctionFeature', 'IComplexEdgeFeature', 'IEnumJunctionFeature', 'INetworkFeature', 'IGeometricNetwork', 'IEnumNetworkFeature', 'INetworkCollection', 'INetworkCollection2', 'INetworkClass', 'ILocatorUI', 'ILocator', 'IEnumLocator', 'ILocatorWorkspace', 'ILocatorUI2', 'ILocatorWorkspace2', 'ILocatorDataset', 'ITinNode', 'ITinNodeArray', 'IEnumTinNode', 'ITinNodeCollection', 'ITinEdgeArray', 'ITinEdge', 'ITinTriangle', 'ITinTriangleArray', 'ITinNode2', 'IEnumTinEdge', 'IEnumTinTriangle', 'ITinPolygon', 'ITinPolyline', 'ITinAdvanced', 'ITinAdvanced2', 'ITinEdit', 'ITinSurfaceElement', 'ITinSurface', 'ITinSurface2', 'ITinSurface3', 'ITinFeatureEdit', 'ISurfaceIntersectionEvents', 'IGeoDatabaseBridge2', 'INetworkEdge', 'INetworkEdge2', 'INetworkTurn', 'INetworkJunction', 'INetworkJunction2', 'INetworkTurn2', 'INetworkForwardStarAdjacencies', 'INetworkForwardStar', 'INetworkQuery', 'INetworkQuery2', 'INetworkQuery3', 'INetworkForwardStarEx', 'IRepresentationClass', 'IRepresentation', 'IRepresentationWorkspaceExtension', 'WorkspaceHelper', 'WorkspaceProperty', 'WorkspaceEditEvents', 'WorkspaceEditEvents2', 'Workspace', 'WorkspaceExtension', 'WorkspaceFactory', 'ConfigurationKeyword', 'ConfigurationParameter', 'VersionedWorkspace', 'EnumVersionInfo', 'VersionInfo', 'XMLIndex', 'XMLIndexTags', 'XMLIndexTag', 'XMLIndexTemplate', 'EnumXMLIndexTemplate', 'HistoricalVersionMarker', 'EnumHistoricalMarker', 'ArchiveRegistrationInfo', 'TableNameSet', 'NetworkWorkspace', 'UtilityNetwork', 'StreetNetwork', 'NetElementClass', 'NetWeight', 'NetWeightAssociation', 'EnumNetWeightAssociation', 'NetElementDescription', 'EnumNetEIDArray', 'ForwardStar', 'RepairConnectivityProgress', 'GeometryServer', 'FeatureConstruction', 'Topology', 'TopologyGraph', 'TopologyGraphEventsHelper', 'TopologyEdge', 'TopologyNode', 'TopologyWorkspaceExtension', 'TopologyName', 'TopologyRule', 'TopologyErrorFeature', 'CoverageAnnotationFeature', 'Field', 'Fields', 'Index', 'Indexes', 'EnumFeatureGeometry', 'GeometryDef', 'Row', 'Object', 'ObjectClassDescription', 'Feature', 'ClassHelper', 'FeatureClassDescription', 'SimpleRelationship', 'AttributedRelationship', 'SQLCheck', 'QueryFilter', 'FIDSet', 'SpatialFilter', 'FilterDefs', 'XMLFilterDef', 'TableSort', 'GeometricNetwork', 'SimpleJunctionFeature', 'SimpleEdgeFeature', 'ComplexEdgeFeature', 'ComplexJunctionFeature', 'Objects', 'TableName', 'ObjectClassName', 'FeatureDatasetName', 'FeatureClassName', 'TableQueryName', 'RelQueryTableName', 'FeatureQueryName', 'QueryTableName', 'RelationshipClassName', 'MemoryRelationshipClassName', 'MemoryRelationshipClassFactory', 'GeometricNetworkName', 'WorkspaceName', 'UnknownDatasetName', 'AttributeRule', 'CodedValueDomain', 'EdgeConnectivityRule', 'JunctionConnectivityRule', 'RangeDomain', 'RelationshipRule', 'ObjectClassValidator', 'TransformGroup', 'DataStatistics', 'ObjectClassEvents', 'TopologyClassEvents', 'RelationshipClassEvents', 'ObjectClassSchemaEvents', 'VersionEvents', 'VersionEvents2', 'FGDCSynchronizationHelper', 'MetadataCopyHelper', 'XmlPropertySet', 'XmlPropertySetEdit', 'MetadataSynchronizer', 'FGDCSynchronizer', 'RelQueryTableFactory', 'MemoryRelationshipClass', 'RelQueryTable', 'RelQueryCursor', 'RelQueryRow', 'NamesEnumerator', 'EnumTableVersionChanges', 'QueryDef', 'FeatureDataset', 'RowBuffer', 'Relationship', 'SelectionSet', 'RelQueryTableSelectionSet', 'Cursor', 'ObjectClass', 'FeatureClass', 'Table', 'RelationshipClass', 'AttributedRelationshipClass', 'EnumDatasetType', 'EnumIDs', 'EnumConflictClass', 'DifferenceCursor', 'FeatureCursor', 'GeometryResultOptions', 'RecordSet', 'Record', 'RecordArray', 'AttachmentInfo', 'AttachmentData', 'AttachmentInfoArray', 'AttachmentDataArray', 'Attachment', 'EnumAttachment', 'AttachmentManager', 'EditorTrackingInfo', 'OwnershipBasedAccessControl', 'JSONDeserializerGdb', 'JSONSerializerGdb', 'JSONConverterGdb', 'ThumbnailInfo', 'DocumentationInfo', 'ItemInfo', 'ItemInfos', 'FieldChecker', 'EnumFieldError', 'FieldError', 'SimpleDataConverter', 'EnumInvalidObject', 'InvalidObjectInfo', 'RecordNumberSet', 'Replica', 'ReplicaDataset', 'ReplicaDescription', 'ReplicaDescriptionExtension', 'GPReplica', 'GPReplicas', 'GPReplicaDescription', 'GPReplicaDataset', 'GPReplicaDatasets', 'GPReplicaOptions', 'GeoDBDataTransfer', 'RasterDef', 'RasterStorageDef', 'RasterValue', 'RasterCatalogItem', 'RasterCatalog', 'RasterDatasetName', 'RasterBandName', 'RasterCatalogName', 'RasterCatalogClassDescription', 'RasterCatalogHelper', 'Pnt', 'MosaicDatasetName', 'DEBrowseOptions', 'DEWorkspaceType', 'DETableType', 'FieldType', 'IndexType', 'DEFeatureDatasetType', 'DEFeatureClassType', 'DERelationshipClassType', 'WorkspaceDefinition', 'DEWorkspace', 'DETable', 'DEFeatureDataset', 'DEFeatureClass', 'GPGeometricNetworkMembership', 'GPTopologyMembership', 'DERelationshipClass', 'GPDataTypeName', 'GPMessage', 'GPMessages', 'DEGeometricNetworkType', 'DEGeometricNetwork', 'DETopology', 'DETopologyType', 'DERasterCatalog', 'DERasterCatalogType', 'DEGdbUtilities', 'GPRelationshipClassKey', 'GPSubtype', 'GPWorkspaceExtension', 'GPDatasetExtension', 'GPRangeDomain2', 'GPCodedValueDomain2', 'Names', 'DataElements', 'DataElementHelper', 'GPVersionInfos', 'GPVersionInfo', 'DEGeoDataServerType', 'DEGeoDataServer', 'DEMapServerType', 'DEMapServer', 'DEGlobeServerType', 'DEGlobeServer', 'DEGPServerType', 'DEGPServer', 'DEGeometryServerType', 'DEGeometryServer', 'DEServerConnectionType', 'DEServerConnection', 'ResultPortionInfo', 'GPMessageManager', 'DERasterDatasetType', 'DERasterBandType', 'DERasterDataset', 'DERasterBand', 'GPHistoricalMarker', 'FeatureDataConverter', 'Tin', 'DddServerEnvironment', 'TinNodeEnumerator', 'TinEdgeEnumerator', 'TinTriangleEnumerator', 'TinSurfaceElement', 'TinNodeArray', 'TinEdgeArray', 'TinTriangleArray', 'TinPolyline', 'TinPolygon', 'TinNode', 'TinEdge', 'TinTriangle', 'TinValueFilter', 'TinTriangleFilter', 'TinEdgeTypeFilter', 'TinDataElementFilter', 'TinNodeSourceFilter', 'TinName', 'TinNativeType', 'TinImporter', 'XYEvent2FieldsProperties', 'XYEventSourceName', 'XYEventSource', 'NetworkForwardStar', 'EnumNetworkElement', 'DENetworkDataset', 'DENetworkDatasetType', 'NetworkSource', 'SystemJunctionSource', 'EdgeFeatureSource', 'JunctionFeatureSource', 'TurnFeatureSource', 'NetworkAttributeParameter', 'NetworkAttribute', 'EvaluatedNetworkAttribute', 'NetworkConstantEvaluator', 'NetworkFieldEvaluator', 'NetworkScriptEvaluator', 'NetworkGlobalTurnDelayCategory', 'NetworkGlobalTurnDelayEvaluator', 'NetworkFunctionEvaluator', 'NetworkSourceDirections', 'Shields', 'StreetNameFields', 'DirectionsFieldMapping', 'NetworkDirections', 'DirectionsAttributeMapping', 'DirectionsLandmarkSource', 'NetworkDatasetFDExtension', 'NetworkDatasetWorkspaceExtension', 'NetworkDatasetName', 'NetworkDataset', 'NetworkJunction', 'NetworkEdge', 'NetworkTurn', 'NetworkForwardStarAdjacencies', 'GPNetworkDatasetMembership', 'NetworkScriptEvaluatorFunctions', 'TrafficData', 'NetworkEdgeTrafficEvaluator', 'TrafficDataManager', 'TrafficFeedDirectory', 'TrafficFeedGPService', 'RepresentationWorkspaceExtension', 'Representation', 'RepresentationClass', 'RepresentationClassName', 'RepresentationRules', 'DERepresentationClass', 'PlugInWorkspaceFactory', 'GeoDatabaseHelper', 'IID_INetworkProtectNames', 'IID_INetworkDatasetProtectNames', 'IID_IGeoDBProtectNames', 'IID_ISQLPrivilege', 'IID_IGeoDataset', 'IID_IProperty', 'IID_IEnumProperty', 'IID_IDatasetEditInfo', 'IID_IDatasetEdit', 'IID_ITransactions', 'IID_ITransactionsOptions', 'IID_ILockInfo', 'IID_IEnumLockInfo', 'IID_IFIDSet', 'IID_IDomain', 'IID_IGeometryDef', 'IID_IField', 'IID_IFields', 'IID_IRowBuffer', 'IID_IIndex', 'IID_IEnumIndex', 'IID_IIndexes', 'IID_IClass', 'IID_IQueryFilter', 'IID_IEnumIDs', 'IID_IMetadata', 'IID_IMetadataEdit', 'IID_ISQLSyntax', 'IID_ISchemaLockInfo', 'IID_IEnumSchemaLockInfo', 'IID_ISchemaLock', 'IID_IEnumDatasetType', 'IID_IDataElement', 'IID_IFeatureClassStorage', 'IID_IFeatureClassStorage2', 'IID_IDatasetMigration', 'IID_IWorkspace2', 'IID_IDatabaseConnectionInfo', 'IID_IDatabaseConnectionInfo2', 'IID_IUserInfo', 'IID_IEnumUserInfo', 'IID_IDatabaseConnectionInfo3', 'IID_IDatabaseConnectionInfo4', 'IID_IWorkspaceProperty', 'IID_IWorkspaceProperties', 'IID_IWorkspaceProperties2', 'IID_IWorkspaceExtension', 'IID_IWorkspaceExtensionManager', 'IID_IWorkspaceFactoryFileExtensions', 'IID_IWorkspaceFactoryLockControl', 'IID_IWorkspaceProgressTracker', 'IID_IDatasetEditEx', 'IID_IDatasetFileStat', 'IID_IDatasetFileStat2', 'IID_IDatasetNameFileStat', 'IID_IDatasetNameFileStat2', 'IID_IDatasetNameFileSize', 'IID_IWorkspaceEditInfo', 'IID_IWorkspaceEdit', 'IID_IMultiuserWorkspaceEdit', 'IID_IWorkspaceEditControl', 'IID_IWorkspaceEditEvents', 'IID_IWorkspaceEditEvents2', 'IID_ISpatialCacheManager', 'IID_ISpatialCacheManager2', 'IID_ISpatialCacheManager3', 'IID_IGeodataXform', 'IID_IGeoDataset2', 'IID_IGeoDatasetSchemaEdit', 'IID_IGeoDatasetSchemaEdit2', 'IID_IHistoricalMarker', 'IID_IEnumHistoricalMarker', 'IID_IHistoricalVersion', 'IID_IHistoricalWorkspace', 'IID_IArchivableObject', 'IID_IArchiveRegistrationInfo', 'IID_IFileDataLock', 'IID_IDatabaseCompact', 'IID_ISetDefaultConnectionInfo', 'IID_ISetDefaultConnectionInfo2', 'IID_ISetDefaultConnectionInfo3', 'IID_ISqlDefaultConnectionInfo', 'IID_INativeType', 'IID_INativeTypeSearch', 'IID_INativeTypeInfo', 'IID_IComplexNativeType', 'IID_IEnumSpatialReferenceInfo', 'IID_IWorkspaceSpatialReferenceInfo', 'IID_IConfigurationParameter', 'IID_IEnumConfigurationParameter', 'IID_IConfigurationKeyword', 'IID_IEnumConfigurationKeyword', 'IID_IConfigurationKeyword2', 'IID_IConfigurationParameter2', 'IID_IWorkspaceConfiguration', 'IID_IXMLIndexTag', 'IID_IXMLIndexTags', 'IID_IXMLIndexTemplate', 'IID_IEnumXMLIndexTemplate', 'IID_IXMLIndex', 'IID_IXMLIndexEdit', 'IID_IXMLIndexTemplateManage', 'IID_IXMLIndexUtil', 'IID_IRule', 'IID_IEnumRule', 'IID_IFeatureBuffer', 'IID_IFeatureWorkspaceSchemaEdit', 'IID_IGeodatabaseRelease', 'IID_IEnumDomain', 'IID_IWorkspaceDomains', 'IID_IWorkspaceDomains2', 'IID_IWorkspaceDomains3', 'IID_IPnt', 'IID_IRasterStorageDef', 'IID_IRasterDef', 'IID_IPixelBlock', 'IID_IRasterCursor', 'IID_IRaster', 'IID_IRasterCatalog', 'IID_IReplicaDataset', 'IID_IEnumReplicaDataset', 'IID_IWorkspaceReplicaDatasets', 'IID_IEnumTopologyParent', 'IID_ITopologyElement', 'IID_IEnumTGHitInfo', 'IID_IIndexEdit', 'IID_IGPMessage', 'IID_IGPDescribe', 'IID_INetWeight', 'IID_INetTopology', 'IID_INetElementDescription', 'IID_INetTopologyEdit', 'IID_INetElementClass', 'IID_INetWeightAssociation', 'IID_IEnumNetWeightAssociation', 'IID_IInvalidObjectInfo', 'IID_IEnumInvalidObject', 'IID_INetworkUpdate', 'IID_INetSchema', 'IID_INetSchemaEdit', 'IID_INetWeightEdit', 'IID_INetWeightAssociationEdit', 'IID_INetAttributes', 'IID_INetAttributesEdit', 'IID_INetElementDescriptionEdit', 'IID_INetDiagnostics', 'IID_INetTopologyEditGEN', 'IID_IDatasetAnalyze', 'IID_ITopologyProtectNames', 'IID_IFeatureDatasetManage', 'IID_IFeatureClassLoad', 'IID_IQueryDescription', 'IID_IQueryTableName', 'IID_IFeatureClassCreation', 'IID_IInvalidArea', 'IID_IFeatureDraw', 'IID_IRowEdit', 'IID_IFeatureSimplify', 'IID_IFeatureSimplify2', 'IID_IQueryFilter2', 'IID_ISpatialFilter', 'IID_ISQLCheck', 'IID_ITableSortCallBack', 'IID_IFieldInfo', 'IID_ITableFields', 'IID_ISimpleEdgeFeature', 'IID_IComplexNetworkFeature', 'IID_IFIDSet2', 'IID_ITopologyRule', 'IID_IDEDataset', 'IID_IGPReplicaDataset', 'IID_IGPReplicaDatasets', 'IID_IGPMessagesCallback', 'IID_IGPMessages', 'IID_IRecord', 'IID_IAttachmentInfo', 'IID_IAttachmentData', 'IID_IEditorTrackingInfo', 'IID_IOwnershipBasedAccessControl', 'IID_ICoverageAnnotationFeature', 'IID_IFeatureClassManage', 'IID_IFeatureProject', 'IID_IFieldEdit', 'IID_IField2', 'IID_IFieldEdit2', 'IID_IModelInfo', 'IID_IFields2', 'IID_IFieldsEdit', 'IID_IGeometryDefEdit', 'IID_IIndexesEdit', 'IID_IClassSchemaEdit', 'IID_IClassSchemaEdit2', 'IID_IClassSchemaEdit3', 'IID_IClassSchemaEdit4', 'IID_IClassSchemaEditEx', 'IID_IRelClassSchemaEdit', 'IID_IRelQueryTableSettings', 'IID_ITableCapabilities', 'IID_ITopologyGraphEvents', 'IID_IObjectClassSchemaEvents', 'IID_IObjectClass2', 'IID_ISimpleRelationshipChanges', 'IID_IEnumSubtype', 'IID_ISubtypes', 'IID_IValidate', 'IID_IRangeDomain', 'IID_ICodedValueDomain', 'IID_ICodedValueDomain2', 'IID_IStringDomain', 'IID_IEdgeConnectivityRule', 'IID_IJunctionConnectivityRule', 'IID_IJunctionConnectivityRule2', 'IID_IRelationshipRule', 'IID_IObjectClassName', 'IID_IMemoryRelationshipClassName', 'IID_IClassHelper', 'IID_IClassExtension', 'IID_IObjectClassInfo', 'IID_IObjectClassInfo2', 'IID_IFeatureClassDraw', 'IID_IRowSubtypes', 'IID_IEnumGeometryBind', 'IID_IRowEvents', 'IID_IRowChanges', 'IID_IFeatureEvents', 'IID_IFeatureChanges', 'IID_INetworkFeatureEvents', 'IID_IEnumFeatureSetup', 'IID_IObjects', 'IID_IFeatureSnap', 'IID_ITimeQueryFilter', 'IID_IFilterDefs', 'IID_IXMLFilterDef', 'IID_IQueryFilterDefinition', 'IID_IQueryFilterDefinition2', 'IID_IGeometricNetworkReconcileProperties', 'IID_IGeometricNetworkConnectivity', 'IID_IRepairConnectivityProgressEvents', 'IID_IRepairConnectivityProgress', 'IID_IGeometricNetworkConnectivity2', 'IID_IRebuildIndexes', 'IID_IVersionedView', 'IID_IVersionEvents', 'IID_IVersionEvents2', 'IID_IGeodatabaseRelease2', 'IID_IGeodatabaseRelease3', 'IID_IGeodatabaseRelease4', 'IID_IObjectClassDescription', 'IID_IFeatureClassDescription', 'IID_INetworkClassDescription', 'IID_IXmlPropertySet', 'IID_IXmlPropertySet2', 'IID_IMetadataSynchronizer', 'IID_IMetadataSynchronizerManager', 'IID_IFieldInfo2', 'IID_IFieldInfo3', 'IID_IRasterFieldInfo', 'IID_ITopologyErrorFeature', 'IID_IEnumTopologyErrorFeature', 'IID_IErrorFeatureContainer', 'IID_ITopologyRuleContainer', 'IID_ITopologyClassEvents', 'IID_ICancelOperation', 'IID_IClassEx', 'IID_IAttachment', 'IID_IAttachment2', 'IID_IEnumAttachment', 'IID_IAttachmentManager', 'IID_IAttachmentManager2', 'IID_IAttachmentInfoArray', 'IID_IAttachmentDataArray', 'IID_ITableAttachments', 'IID_IFIDSetOperator', 'IID_IGeometryResultOptions', 'IID_IGUIDGenerator', 'IID_ICompressionInfo', 'IID_IRecordArray', 'IID_IAttachmentInfo2', 'IID_IThumbnailInfo', 'IID_IDocumentationInfo', 'IID_IItemInfo', 'IID_IItemInfo2', 'IID_IItemInfos', 'IID_IExternalDeserializerGdb', 'IID_ISqlKeywordDictionary', 'IID_ISqlInvalidCharacterDictionary', 'IID_IFieldError', 'IID_IEnumFieldError', 'IID_IGeoDatabaseErrorRecords', 'IID_IFeatureProgress', 'IID_IRecordNumberSet', 'IID_IReplicaDescriptionExtension', 'IID_IReplicaLog', 'IID_IEnumReplicaLog', 'IID_IReplicaDatasetEdit', 'IID_IReplicaDataset2', 'IID_IXMLReplicaDescription', 'IID_IReplicaDescriptionExtensionManager', 'IID_IGPReplicaOptions', 'IID_IGPReplicaOptions2', 'IID_IGPReplicaDataset2', 'IID_IRouteLocatorName', 'IID_IRouteEventProperties', 'IID_IRouteEventProperties2', 'IID_IRouteEventSourceName', 'IID_IXYEventSourceName', 'IID_IGPMessage2', 'IID_IGPName', 'IID_IEnumGPName', 'IID_IGPToolTip', 'IID_IRasterColormap', 'IID_IRasterLODInfos', 'IID_IRasterLODInfos2', 'IID_IRasterDatasetEdit', 'IID_IRasterDef2', 'IID_IRasterStorageDef2', 'IID_IRasterStorageDef3', 'IID_IRasterCatalogName', 'IID_IRasterCatalogHelper', 'IID_IRasterCatalogHelper2', 'IID_IMosaicDatasetName', 'IID_IMosaicDatasetName2', 'IID_IRasterDatasetInfo', 'IID_IDEBrowseOptions', 'IID_IDataElements', 'IID_IEnumDataElement', 'IID_IDataElementInfo', 'IID_IDataElementHelper', 'IID_IDEGeoDataset', 'IID_IDEWorkspace', 'IID_IDEWorkspace2', 'IID_IDEWorkspace3', 'IID_IWorkspaceDefinition', 'IID_IDEDataset2', 'IID_IDETable', 'IID_IDEGdbTable', 'IID_IDEGdbTable2', 'IID_IDEEditorTracking', 'IID_IDEFeatureClass', 'IID_IDEGdbFeatureClass', 'IID_IDERasterCatalog', 'IID_IGPTopologyMembership', 'IID_IGPGeometricNetworkMembership', 'IID_IDERelationshipClassEx', 'IID_IDERelationshipClassEx2', 'IID_IGPRelationshipClassKey', 'IID_IDataElementType', 'IID_IGxFilterInfo', 'IID_IDEGeometricNetwork', 'IID_IDEGeometricNetwork2', 'IID_IDETopology', 'IID_IGPVersionInfo', 'IID_IGPVersionInfos', 'IID_IGPDomain2', 'IID_IGPRangeDomain2', 'IID_IGPCodedValueDomain2', 'IID_IGPHistoricalMarker', 'IID_IDEServerObject', 'IID_IDEServerConnection', 'IID_IResultPortionInfo', 'IID_IResultPortion', 'IID_IGPMessageManager', 'IID_IDERasterDataset', 'IID_IDERasterDatasetEx', 'IID_IDERasterBand', 'IID_IGPSystemToolboxLocation', 'IID_IDEGdbUtilities', 'IID_IDEGdbUtilities2', 'IID_IGPWorkspaceExtension', 'IID_IGPDatasetExtension', 'IID_IGPSubtype', 'IID_IWorkspaceDataElements', 'IID_IWorkspaceDataElements2', 'IID_IOleDBConnectionInfo', 'IID_ITin', 'IID_ITinElement', 'IID_ITinFeatureSeed', 'IID_ITinFilter', 'IID_ITinDynamicFilter', 'IID_ITinValueFilter', 'IID_ITinValueFilter2', 'IID_ITinTriangleFilter', 'IID_ITinEdgeTypeFilter', 'IID_ITinNodeSourceFilter', 'IID_IEnumTinElement', 'IID_ITinAdvanced3', 'IID_ITinNodeInfo', 'IID_ITinEditErrorLog', 'IID_ITinSelection', 'IID_ITinWorkspace', 'IID_ITinImporter', 'IID_ITinClock', 'IID_ITinEdgeTypeFilter2', 'IID_IXYEvent2FieldsProperties', 'IID_INetworkElement', 'IID_INetworkScriptEvaluatorFunctions', 'IID_INetworkAttribute', 'IID_IShields', 'IID_INetworkSourceDirections', 'IID_INetworkSource', 'IID_INetworkDataset', 'IID_INetworkDirections', 'IID_IDENetworkDataset', 'IID_IEnumNetworkElement', 'IID_INetworkDirections2', 'IID_INetworkSourceDirections2', 'IID_ITrafficData', 'IID_ISignposts', 'IID_IEnumHierarchyRange', 'IID_IGPNetworkDatasetMembership', 'IID_IDENetworkDataset2', 'IID_INetworkAttributeParameter', 'IID_INetworkAttributeParameter2', 'IID_INetworkAttribute2', 'IID_INetworkAttribute3', 'IID_INetworkDataset2', 'IID_INetworkForwardStarSetup', 'IID_INetworkElement64', 'IID_ITrafficData2', 'IID_IHistoricalTrafficData', 'IID_IHistoricalTrafficData2', 'IID_ITrafficFeedDirectory', 'IID_ITrafficFeedGPService', 'IID_IDynamicTrafficData', 'IID_IHistoricalTravelTimeEvaluator', 'IID_ITimeAwareEvaluator', 'IID_INetworkEvaluator', 'IID_IEdgeFeatureSource', 'IID_IJunctionFeatureSource', 'IID_ISystemJunctionSource', 'IID_IDirectionsAttributeMapping', 'IID_INetworkSourceDirections3', 'IID_IDirectionsLandmarkSource', 'IID_IDirectionsFieldMapping', 'IID_IStreetNameFields', 'IID_IStreetNameFields2', 'IID_IEvaluatedNetworkAttribute', 'IID_IEvaluatedNetworkAttribute2', 'IID_INetworkEvaluator2', 'IID_INetworkConstantEvaluator', 'IID_INetworkFieldEvaluator', 'IID_INetworkFieldEvaluator2', 'IID_INetworkScriptEvaluator', 'IID_INetworkScriptEvaluator2', 'IID_INetworkGlobalTurnDelayCategory', 'IID_INetworkGlobalTurnDelayEvaluator', 'IID_INetworkFunctionEvaluator', 'IID_INetworkBuild', 'IID_ITrafficDataManager', 'IID_IRepresentationRules', 'IID_IRepresentationClassName', 'IID_IOverride', 'IID_IDERepresentationClass', 'IID_IPlugInCursorHelper', 'IID_IPlugInDatasetHelper', 'IID_IPlugInWorkspaceHelper', 'IID_IPlugInDatasetInfo', 'IID_IPlugInLicense', 'IID_IPlugInWorkspaceFactoryHelper', 'IID_IPlugInWorkspaceFactoryHelper2', 'IID_IPlugInCreateWorkspace', 'IID_IPlugInWorkspaceHelper2', 'IID_IPlugInMetadataPath', 'IID_IPlugInMetadataPath2', 'IID_IPlugInMetadata', 'IID_IPlugInMetadata2', 'IID_IPlugInFastRowCount', 'IID_IPlugInRowCount', 'IID_IPlugInFileSystemDataset', 'IID_IPlugInIndexInfo', 'IID_IPlugInIndexManager', 'IID_IPlugInDatasetHelper2', 'IID_IPlugInFastQueryValues', 'IID_IPlugInGxIntegration', 'IID_IPlugInCreateDataset', 'IID_IPlugInDatasetLoader', 'IID_IPlugInDatasetLoad', 'IID_IRelationshipChanges', 'IID_IThumbnailInfoImpl', 'IID_IItemInfoImpl', 'IID_IWorkspace', 'IID_IEnumWorkspace', 'IID_IEnumWorkspaceEx', 'IID_IEnterpriseWorkspaceFactory', 'IID_IWorkspaceHelper', 'IID_IWorkspaceExtensionControl', 'IID_IWorkspaceExtension2', 'IID_IWorkspaceStatus', 'IID_IEnumWorkspaceStatus', 'IID_IWorkspaceFactoryStatus', 'IID_IScratchWorkspaceFactory', 'IID_IScratchWorkspaceFactory2', 'IID_IWorkspaceFactorySchemaCache', 'IID_IFieldChecker', 'IID_IPlugInFileOperations', 'IID_IPlugInFileOperationsClass', 'IID_IWorkspaceFactory', 'IID_IWorkspaceName', 'IID_IRemoteDatabaseWorkspaceFactory', 'IID_IRemoteDatabaseWorkspaceFactory2', 'IID_IWorkspaceName2', 'IID_IWorkspaceFactory2', 'IID_ILocalDatabaseCompact', 'IID_IReplicaDescription', 'IID_IReplica', 'IID_IEnumReplica', 'IID_IWorkspaceReplicas', 'IID_IWorkspaceReplicasAdmin', 'IID_IWorkspaceReplicasAdmin2', 'IID_IWorkspaceReplicasAdmin3', 'IID_IGPReplicaDescription', 'IID_IGPReplica', 'IID_IWorkspaceReplicas2', 'IID_IReplica2', 'IID_IReplica3', 'IID_IReplicaEdit', 'IID_IReplicaEdit2', 'IID_IWorkspaceReplicaEvents', 'IID_IGPReplica2', 'IID_IGPReplicas', 'IID_ILocatorWorkspaceName', 'IID_ILocatorName', 'IID_IEnumLocatorName', 'IID_IWorkspaceDefinition2', 'IID_IEnumDataset', 'IID_IDataset', 'IID_IWorkspaceEvents', 'IID_IWorkspaceEvents2', 'IID_IDatasetContainer', 'IID_IRasterDataset', 'IID_IRasterWorkspaceEx', 'IID_IDatasetComponent', 'IID_IDatasetComponent2', 'IID_IXmlPropertySetEdit', 'IID_IRasterDataset2', 'IID_IRasterDataset3', 'IID_IRasterCatalogItem', 'IID_IRasterWorkspace2', 'IID_IRasterWorkspace4', 'IID_IRasterValue', 'IID_IRasterValue2', 'IID_ISaveAs', 'IID_ISaveAs2', 'IID_IEnumDatasetName', 'IID_IDatasetName', 'IID_IWorkspaceExtension3', 'IID_ITableNameSet', 'IID_IDatasetName2', 'IID_IFeatureWorkspaceManage', 'IID_IFeatureDatasetName', 'IID_ISimpleDataConverter', 'IID_IFeatureDatasetName2', 'IID_IFeatureClassName', 'IID_ITopologyName', 'IID_IDatasetContainerName', 'IID_IDatasetContainer2', 'IID_IDatasetContainer3', 'IID_ITopologyClassName', 'IID_IRelationshipClassName', 'IID_IGeometricNetworkName', 'IID_IFeatureWorkspaceManage2', 'IID_IFeatureWorkspaceManage3', 'IID_ICopyHelper', 'IID_IRelationshipClassInfo', 'IID_IEnumRelationshipClassInfo', 'IID_IReplicaDescription2', 'IID_IReplicaDescription3', 'IID_IRasterDatasetName', 'IID_IRasterBandName', 'IID_IFeatureDataConverter', 'IID_INetworkDatasetName', 'IID_IPlugInNetworkDatasetContainer', 'IID_IVersionedWorkspace', 'IID_IEnumVersionInfo', 'IID_IVersionInfo', 'IID_IVersion', 'IID_IVersionedObject', 'IID_IVersion2', 'IID_IVersionInfo2', 'IID_IEnumVersionInfo2', 'IID_IVersion3', 'IID_IVersionedWorkspace2', 'IID_IVersionedWorkspace3', 'IID_IVersionedWorkspace4', 'IID_IVersionedObject2', 'IID_IVersionedObject3', 'IID_IDataChangesEx', 'IID_IWorkspaceEdit2', 'IID_IDifferenceCursor', 'IID_IRow', 'IID_ICursor', 'IID_IDifferenceCursorEx', 'IID_IRelClassEnumRowPairs', 'IID_IQueryDef', 'IID_ITableWrite', 'IID_IQueryDef2', 'IID_IQueryName', 'IID_IQueryName2', 'IID_IAttributeRule', 'IID_ITableUtil', 'IID_ITableWrite2', 'IID_IObjectClassValidation', 'IID_IRandomAccessCursor', 'IID_IRandomAccessTable', 'IID_IRowCompare', 'IID_IDataStatistics', 'IID_IEnumEventError', 'IID_IEventSourceErrors', 'IID_INetworkEvaluatorSetup', 'IID_ITable', 'IID_ISelectionSet', 'IID_IConflictClass', 'IID_IEnumConflictClass', 'IID_IVersionEdit', 'IID_IVersionEdit2', 'IID_IVersionEdit3', 'IID_ISqlWorkspace', 'IID_IEnumTable', 'IID_ITableSort', 'IID_IArchivableClass', 'IID_IRelQueryTableInfo', 'IID_ICollectionTableVersionChanges', 'IID_IEnumTableVersionChanges', 'IID_IRelQueryTableManage', 'IID_IValidation', 'IID_IValidation2', 'IID_IRelQueryTableName', 'IID_IRelQueryTableName2', 'IID_ISelectionSet2', 'IID_IRelQueryTableSelectionSet', 'IID_IGeometricNetworkErrorDetection', 'IID_IVersionedTable', 'IID_IVersionEdit4', 'IID_IRecordSetInit', 'IID_IRecordSet', 'IID_IRecordSet2', 'IID_IExternalSerializerGdb', 'IID_IJSONConverterGdb', 'IID_IDataConvertProcess', 'IID_ISimpleDataConverter2', 'IID_IReplicaFilterDescriptionEdit', 'IID_IReplicaFilterDescription', 'IID_IReplicaFilterDescription2', 'IID_IWorkspaceReplicaSyncEvents', 'IID_IRasterDatasetEdit2', 'IID_IRasterDatasetEdit3', 'IID_IFeatureDataConverter2', 'IID_IXYEventSource', 'IID_IExternalSerializerGdb2', 'IID_IEnumNameMapping', 'IID_INameMapping', 'IID_INameMapping2', 'IID_IReplicaDescription4', 'IID_IExtractionUtilities', 'IID_IGeoDBDataTransfer', 'IID_IGeoDBDataTransfer2', 'IID_IFeatureWorkspace', 'IID_IObjectClass', 'IID_IObject', 'IID_IFeature', 'IID_IFeatureCursor', 'IID_IFeatureClassWrite', 'IID_IFeatureEdit', 'IID_IFeatureElement', 'IID_IFeatureConnect', 'IID_IEnumFeature', 'IID_IEnumObjectClass', 'IID_ITransformGroup', 'IID_IObjectClassContainer', 'IID_IObjectClassEvents', 'IID_IFeatureClassUtil', 'IID_IPersistCustomFeaturesExtension', 'IID_IFeatureEdit2', 'IID_IFeatureElementEdit', 'IID_IEnumObject', 'IID_IFeatureClass', 'IID_IFeatureDataset', 'IID_IFeatureWorkspaceAnno', 'IID_IEnumFeatureClass', 'IID_IFeatureClassContainer', 'IID_IFeatureDatasetExtension', 'IID_IFeatureDatasetExtension2', 'IID_IFeatureDatasetExtensionContainer', 'IID_ITopologyProperties', 'IID_IFeatureConstruction', 'IID_ISurface', 'IID_ITinEdit2', 'IID_IGeoDatabaseBridge', 'IID_IEnumRelationshipClass', 'IID_IRelationshipClass', 'IID_IRelationship', 'IID_IEnumRelationship', 'IID_IRelationshipClassContainer', 'IID_IRelQueryTable', 'IID_IRelQueryTableFactory', 'IID_IRelationshipClassEvents', 'IID_IRelationshipClass2', 'IID_IRelationshipClass3', 'IID_IMemoryRelationshipClassFactory', 'IID_IRelatedObjectEvents', 'IID_IRelatedObjectClassEvents', 'IID_IRelatedObjectClassEvents2', 'IID_IConfirmSendRelatedObjectEvents', 'IID_IFeatureClassEdit', 'IID_ISynchronizationHelper', 'IID_IEnumAttributedRelationship', 'IID_ITopologyWorkspace', 'IID_ITopology', 'IID_ITopologyContainer', 'IID_ITopology2', 'IID_ITopologyContainer2', 'IID_ITopologyClass', 'IID_ITopologyGraph', 'IID_ITopologyGraph2', 'IID_ITopologyGraph3', 'IID_ITopologyGraph4', 'IID_IEnumTopologyNode', 'IID_ITopologyNode', 'IID_ITopologyEdge', 'IID_IEnumNodeEdge', 'IID_IEnumTopologyEdge', 'IID_IGPValue', 'IID_IGPDomain', 'IID_IGPDataType', 'IID_IEnumGPValue', 'IID_IGPDataTypeFactory', 'IID_IGPVariable', 'IID_IGPCodedValueDomain', 'IID_IGPChoiceList', 'IID_INetwork', 'IID_IForwardStar', 'IID_IEnumNetEID', 'IID_INetworkWorkspace', 'IID_INetworkWorkspace2', 'IID_INetElements', 'IID_IForwardStarGEN', 'IID_IUtilityNetworkGEN', 'IID_IEnumNetEIDBuilderGEN', 'IID_IEnumNetEIDBuilder', 'IID_IUtilityNetwork', 'IID_IUtilityNetwork2', 'IID_IGraph', 'IID_IEdgeFeature', 'IID_ISimpleJunctionFeature', 'IID_IComplexJunctionFeature', 'IID_IEnumEdgeFeature', 'IID_IJunctionFeature', 'IID_IComplexEdgeFeature', 'IID_IEnumJunctionFeature', 'IID_INetworkFeature', 'IID_IGeometricNetwork', 'IID_IEnumNetworkFeature', 'IID_INetworkCollection', 'IID_INetworkCollection2', 'IID_INetworkClass', 'IID_ILocatorUI', 'IID_ILocator', 'IID_IEnumLocator', 'IID_ILocatorWorkspace', 'IID_ILocatorUI2', 'IID_ILocatorWorkspace2', 'IID_ILocatorDataset', 'IID_ITinNode', 'IID_ITinNodeArray', 'IID_IEnumTinNode', 'IID_ITinNodeCollection', 'IID_ITinEdgeArray', 'IID_ITinEdge', 'IID_ITinTriangle', 'IID_ITinTriangleArray', 'IID_ITinNode2', 'IID_IEnumTinEdge', 'IID_IEnumTinTriangle', 'IID_ITinPolygon', 'IID_ITinPolyline', 'IID_ITinAdvanced', 'IID_ITinAdvanced2', 'IID_ITinEdit', 'IID_ITinSurfaceElement', 'IID_ITinSurface', 'IID_ITinSurface2', 'IID_ITinSurface3', 'IID_ITinFeatureEdit', 'IID_ISurfaceIntersectionEvents', 'IID_IGeoDatabaseBridge2', 'IID_INetworkEdge', 'IID_INetworkEdge2', 'IID_INetworkTurn', 'IID_INetworkJunction', 'IID_INetworkJunction2', 'IID_INetworkTurn2', 'IID_INetworkForwardStarAdjacencies', 'IID_INetworkForwardStar', 'IID_INetworkQuery', 'IID_INetworkQuery2', 'IID_INetworkQuery3', 'IID_INetworkForwardStarEx', 'IID_IRepresentationClass', 'IID_IRepresentation', 'IID_IRepresentationWorkspaceExtension', 'CLSID_WorkspaceHelper', 'CLSID_WorkspaceProperty', 'CLSID_WorkspaceEditEvents', 'CLSID_WorkspaceEditEvents2', 'CLSID_Workspace', 'CLSID_WorkspaceExtension', 'CLSID_WorkspaceFactory', 'CLSID_ConfigurationKeyword', 'CLSID_ConfigurationParameter', 'CLSID_VersionedWorkspace', 'CLSID_EnumVersionInfo', 'CLSID_VersionInfo', 'CLSID_XMLIndex', 'CLSID_XMLIndexTags', 'CLSID_XMLIndexTag', 'CLSID_XMLIndexTemplate', 'CLSID_EnumXMLIndexTemplate', 'CLSID_HistoricalVersionMarker', 'CLSID_EnumHistoricalMarker', 'CLSID_ArchiveRegistrationInfo', 'CLSID_TableNameSet', 'CLSID_NetworkWorkspace', 'CLSID_UtilityNetwork', 'CLSID_StreetNetwork', 'CLSID_NetElementClass', 'CLSID_NetWeight', 'CLSID_NetWeightAssociation', 'CLSID_EnumNetWeightAssociation', 'CLSID_NetElementDescription', 'CLSID_EnumNetEIDArray', 'CLSID_ForwardStar', 'CLSID_RepairConnectivityProgress', 'CLSID_GeometryServer', 'CLSID_FeatureConstruction', 'CLSID_Topology', 'CLSID_TopologyGraph', 'CLSID_TopologyGraphEventsHelper', 'CLSID_TopologyEdge', 'CLSID_TopologyNode', 'CLSID_TopologyWorkspaceExtension', 'CLSID_TopologyName', 'CLSID_TopologyRule', 'CLSID_TopologyErrorFeature', 'CLSID_CoverageAnnotationFeature', 'CLSID_Field', 'CLSID_Fields', 'CLSID_Index', 'CLSID_Indexes', 'CLSID_EnumFeatureGeometry', 'CLSID_GeometryDef', 'CLSID_Row', 'CLSID_Object', 'CLSID_ObjectClassDescription', 'CLSID_Feature', 'CLSID_ClassHelper', 'CLSID_FeatureClassDescription', 'CLSID_SimpleRelationship', 'CLSID_AttributedRelationship', 'CLSID_SQLCheck', 'CLSID_QueryFilter', 'CLSID_FIDSet', 'CLSID_SpatialFilter', 'CLSID_FilterDefs', 'CLSID_XMLFilterDef', 'CLSID_TableSort', 'CLSID_GeometricNetwork', 'CLSID_SimpleJunctionFeature', 'CLSID_SimpleEdgeFeature', 'CLSID_ComplexEdgeFeature', 'CLSID_ComplexJunctionFeature', 'CLSID_Objects', 'CLSID_TableName', 'CLSID_ObjectClassName', 'CLSID_FeatureDatasetName', 'CLSID_FeatureClassName', 'CLSID_TableQueryName', 'CLSID_RelQueryTableName', 'CLSID_FeatureQueryName', 'CLSID_QueryTableName', 'CLSID_RelationshipClassName', 'CLSID_MemoryRelationshipClassName', 'CLSID_MemoryRelationshipClassFactory', 'CLSID_GeometricNetworkName', 'CLSID_WorkspaceName', 'CLSID_UnknownDatasetName', 'CLSID_AttributeRule', 'CLSID_CodedValueDomain', 'CLSID_EdgeConnectivityRule', 'CLSID_JunctionConnectivityRule', 'CLSID_RangeDomain', 'CLSID_RelationshipRule', 'CLSID_ObjectClassValidator', 'CLSID_TransformGroup', 'CLSID_DataStatistics', 'CLSID_ObjectClassEvents', 'CLSID_TopologyClassEvents', 'CLSID_RelationshipClassEvents', 'CLSID_ObjectClassSchemaEvents', 'CLSID_VersionEvents', 'CLSID_VersionEvents2', 'CLSID_FGDCSynchronizationHelper', 'CLSID_MetadataCopyHelper', 'CLSID_XmlPropertySet', 'CLSID_XmlPropertySetEdit', 'CLSID_MetadataSynchronizer', 'CLSID_FGDCSynchronizer', 'CLSID_RelQueryTableFactory', 'CLSID_MemoryRelationshipClass', 'CLSID_RelQueryTable', 'CLSID_RelQueryCursor', 'CLSID_RelQueryRow', 'CLSID_NamesEnumerator', 'CLSID_EnumTableVersionChanges', 'CLSID_QueryDef', 'CLSID_FeatureDataset', 'CLSID_RowBuffer', 'CLSID_Relationship', 'CLSID_SelectionSet', 'CLSID_RelQueryTableSelectionSet', 'CLSID_Cursor', 'CLSID_ObjectClass', 'CLSID_FeatureClass', 'CLSID_Table', 'CLSID_RelationshipClass', 'CLSID_AttributedRelationshipClass', 'CLSID_EnumDatasetType', 'CLSID_EnumIDs', 'CLSID_EnumConflictClass', 'CLSID_DifferenceCursor', 'CLSID_FeatureCursor', 'CLSID_GeometryResultOptions', 'CLSID_RecordSet', 'CLSID_Record', 'CLSID_RecordArray', 'CLSID_AttachmentInfo', 'CLSID_AttachmentData', 'CLSID_AttachmentInfoArray', 'CLSID_AttachmentDataArray', 'CLSID_Attachment', 'CLSID_EnumAttachment', 'CLSID_AttachmentManager', 'CLSID_EditorTrackingInfo', 'CLSID_OwnershipBasedAccessControl', 'CLSID_JSONDeserializerGdb', 'CLSID_JSONSerializerGdb', 'CLSID_JSONConverterGdb', 'CLSID_ThumbnailInfo', 'CLSID_DocumentationInfo', 'CLSID_ItemInfo', 'CLSID_ItemInfos', 'CLSID_FieldChecker', 'CLSID_EnumFieldError', 'CLSID_FieldError', 'CLSID_SimpleDataConverter', 'CLSID_EnumInvalidObject', 'CLSID_InvalidObjectInfo', 'CLSID_RecordNumberSet', 'CLSID_Replica', 'CLSID_ReplicaDataset', 'CLSID_ReplicaDescription', 'CLSID_ReplicaDescriptionExtension', 'CLSID_GPReplica', 'CLSID_GPReplicas', 'CLSID_GPReplicaDescription', 'CLSID_GPReplicaDataset', 'CLSID_GPReplicaDatasets', 'CLSID_GPReplicaOptions', 'CLSID_GeoDBDataTransfer', 'CLSID_RasterDef', 'CLSID_RasterStorageDef', 'CLSID_RasterValue', 'CLSID_RasterCatalogItem', 'CLSID_RasterCatalog', 'CLSID_RasterDatasetName', 'CLSID_RasterBandName', 'CLSID_RasterCatalogName', 'CLSID_RasterCatalogClassDescription', 'CLSID_RasterCatalogHelper', 'CLSID_Pnt', 'CLSID_MosaicDatasetName', 'CLSID_DEBrowseOptions', 'CLSID_DEWorkspaceType', 'CLSID_DETableType', 'CLSID_FieldType', 'CLSID_IndexType', 'CLSID_DEFeatureDatasetType', 'CLSID_DEFeatureClassType', 'CLSID_DERelationshipClassType', 'CLSID_WorkspaceDefinition', 'CLSID_DEWorkspace', 'CLSID_DETable', 'CLSID_DEFeatureDataset', 'CLSID_DEFeatureClass', 'CLSID_GPGeometricNetworkMembership', 'CLSID_GPTopologyMembership', 'CLSID_DERelationshipClass', 'CLSID_GPDataTypeName', 'CLSID_GPMessage', 'CLSID_GPMessages', 'CLSID_DEGeometricNetworkType', 'CLSID_DEGeometricNetwork', 'CLSID_DETopology', 'CLSID_DETopologyType', 'CLSID_DERasterCatalog', 'CLSID_DERasterCatalogType', 'CLSID_DEGdbUtilities', 'CLSID_GPRelationshipClassKey', 'CLSID_GPSubtype', 'CLSID_GPWorkspaceExtension', 'CLSID_GPDatasetExtension', 'CLSID_GPRangeDomain2', 'CLSID_GPCodedValueDomain2', 'CLSID_Names', 'CLSID_DataElements', 'CLSID_DataElementHelper', 'CLSID_GPVersionInfos', 'CLSID_GPVersionInfo', 'CLSID_DEGeoDataServerType', 'CLSID_DEGeoDataServer', 'CLSID_DEMapServerType', 'CLSID_DEMapServer', 'CLSID_DEGlobeServerType', 'CLSID_DEGlobeServer', 'CLSID_DEGPServerType', 'CLSID_DEGPServer', 'CLSID_DEGeometryServerType', 'CLSID_DEGeometryServer', 'CLSID_DEServerConnectionType', 'CLSID_DEServerConnection', 'CLSID_ResultPortionInfo', 'CLSID_GPMessageManager', 'CLSID_DERasterDatasetType', 'CLSID_DERasterBandType', 'CLSID_DERasterDataset', 'CLSID_DERasterBand', 'CLSID_GPHistoricalMarker', 'CLSID_FeatureDataConverter', 'CLSID_Tin', 'CLSID_DddServerEnvironment', 'CLSID_TinNodeEnumerator', 'CLSID_TinEdgeEnumerator', 'CLSID_TinTriangleEnumerator', 'CLSID_TinSurfaceElement', 'CLSID_TinNodeArray', 'CLSID_TinEdgeArray', 'CLSID_TinTriangleArray', 'CLSID_TinPolyline', 'CLSID_TinPolygon', 'CLSID_TinNode', 'CLSID_TinEdge', 'CLSID_TinTriangle', 'CLSID_TinValueFilter', 'CLSID_TinTriangleFilter', 'CLSID_TinEdgeTypeFilter', 'CLSID_TinDataElementFilter', 'CLSID_TinNodeSourceFilter', 'CLSID_TinName', 'CLSID_TinNativeType', 'CLSID_TinImporter', 'CLSID_XYEvent2FieldsProperties', 'CLSID_XYEventSourceName', 'CLSID_XYEventSource', 'CLSID_NetworkForwardStar', 'CLSID_EnumNetworkElement', 'CLSID_DENetworkDataset', 'CLSID_DENetworkDatasetType', 'CLSID_NetworkSource', 'CLSID_SystemJunctionSource', 'CLSID_EdgeFeatureSource', 'CLSID_JunctionFeatureSource', 'CLSID_TurnFeatureSource', 'CLSID_NetworkAttributeParameter', 'CLSID_NetworkAttribute', 'CLSID_EvaluatedNetworkAttribute', 'CLSID_NetworkConstantEvaluator', 'CLSID_NetworkFieldEvaluator', 'CLSID_NetworkScriptEvaluator', 'CLSID_NetworkGlobalTurnDelayCategory', 'CLSID_NetworkGlobalTurnDelayEvaluator', 'CLSID_NetworkFunctionEvaluator', 'CLSID_NetworkSourceDirections', 'CLSID_Shields', 'CLSID_StreetNameFields', 'CLSID_DirectionsFieldMapping', 'CLSID_NetworkDirections', 'CLSID_DirectionsAttributeMapping', 'CLSID_DirectionsLandmarkSource', 'CLSID_NetworkDatasetFDExtension', 'CLSID_NetworkDatasetWorkspaceExtension', 'CLSID_NetworkDatasetName', 'CLSID_NetworkDataset', 'CLSID_NetworkJunction', 'CLSID_NetworkEdge', 'CLSID_NetworkTurn', 'CLSID_NetworkForwardStarAdjacencies', 'CLSID_GPNetworkDatasetMembership', 'CLSID_NetworkScriptEvaluatorFunctions', 'CLSID_TrafficData', 'CLSID_NetworkEdgeTrafficEvaluator', 'CLSID_TrafficDataManager', 'CLSID_TrafficFeedDirectory', 'CLSID_TrafficFeedGPService', 'CLSID_RepresentationWorkspaceExtension', 'CLSID_Representation', 'CLSID_RepresentationClass', 'CLSID_RepresentationClassName', 'CLSID_RepresentationRules', 'CLSID_DERepresentationClass', 'CLSID_PlugInWorkspaceFactory', 'CLSID_GeoDatabaseHelper', 'esriWorkspaceType', 'esriDatasetType', 'esriVersionAccess', 'esriLockType', 'esriDifferenceType', 'esriFieldType', 'esriMergePolicyType', 'esriSplitPolicyType', 'esriDomainType', 'esriSelectionType', 'esriSelectionOption', 'esriSetOperation', 'esriMetadataSyncAction', 'esriSQLFunctionName', 'esriSQLSpecialCharacters', 'esriSchemaLock', 'esriConnectionDBMS', 'esriMultiuserEditSessionMode', 'esriXMLIndexType', 'esriXMLIndexTagDataType', 'esriGeodatabaseVersion', 'esriSQLPrivilege', 'esriSQLPredicates', 'esriSQLClauses', 'esriSQLOperator', 'esriSQLDatetimeType', 'esriSQLInfo', 'esriWorkspacePropertyGroupType', 'esriWorkspacePropertyType', 'esriWorkspaceTablePropertyType', 'esriDatasetFileStatTimeMode', 'esriDatasetFileStatAccessMode', 'esriEditDataChangesType', 'esriGeodatabaseServerClassType', 'esriGeometryStorage', 'esriWorkspaceConnectionStatus', 'esriConfigurationKeywordType', 'esriRelRole', 'esriFeatureType', 'esriRelCardinality', 'esriRelNotification', 'esriRuleType', 'rstPixelType', 'rstResamplingTypes', 'esriRasterCompressionType', 'esriDataExtractionType', 'esriReplicaModelType', 'esriReplicaType', 'esriRowsType', 'esriTopologyState', 'esriTopologySelectionResultEnum', 'esriGPMessageType', 'esriNetworkErrors', 'esriNetworkStatus', 'esriWeightType', 'esriElementType', 'esriNetworkType', 'esriNetworkAccess', 'esriNetworkClassAncillaryRole', 'esriFlowDirection', 'fdoError', 'esriDrawStyle', 'esriFeatureElementType', 'esriSearchOrder', 'esriSpatialRelEnum', 'esriNetworkFeatureAncillaryRole', 'esriTransformType', 'esriTopoConfiguration', 'esriTopologyRuleType', 'esriReplicaRole', 'esriReplicaAccessType', 'esriReplicaState', 'esriRelExtractDirection', 'esriReplicaReconcilePolicyType', 'esriGPMessageSeverity', 'esriTableComponents', 'esriTopoDirection', 'esriTopoSide', 'esriEditSearchOption', 'esriJoinType', 'esriRelClassKey', 'esriRelKeyType', 'esriRelKeyRole', 'esriRelDirection', 'esriRelClassCodeType', 'esriFGDBDatafileFormat', 'esriRelationshipSplitPolicy', 'esriNetworkErrorType', 'esriXmlPropertyType', 'esriXmlSetPropertyAction', 'esriTopologyElementType', 'esriMetadataChangeType', 'esriFieldNameErrorType', 'esriTableNameErrorType', 'esriSynchronizationOperations', 'esriSyncDirection', 'esriSyncModel', 'esriLocatorWorkspaceType', 'esriLocatorQuery', 'esriLocatingError', 'esriRasterSdeCompressionTypeEnum', 'esriRasterResamplingHint', 'esriDEExpandType', 'esriRasterTableTypeEnum', 'esriDataConverterError', 'esriTinEdgeType', 'esriTinNodeSourceType', 'esriTinBoundType', 'esriTinTrianglePropertyType', 'esriPlaneReferenceType', 'esriSurfaceConversionType', 'esriRasterizationType', 'esriTinElementType', 'esriTinVersion', 'esriTinSurfaceType', 'esriSurfaceInterpolationType', 'esriTinSelectionType', 'esriTinError', 'esriTinQualification', 'esriTinNodeEditInfo', 'esriTinIgnoredElementType', 'esriXYEventError', 'esriNetworkElementType', 'esriNetworkEdgeDirection', 'esriNetworkTurnParticipationType', 'esriNetworkTurnType', 'esriNetworkAttributeDataType', 'esriNetworkAttributeUsageType', 'esriNetworkAttributeUnits', 'esriNetworkDatasetType', 'esriNetworkSourceType', 'esriNetworkDatasetState', 'esriNetworkTimeUsage', 'esriNetworkAttributeAdjustmentType', 'esriNetworkAttributeParameterUsageType', 'esriNetworkForwardStarBacktrack', 'esriRoadClass', 'esriNetworkTurnAngleCategory', 'esriNetworkRoadCategory', 'esriNetworkElevationModel', 'esriNetworkEdgeConnectivityPolicy', 'esriNetworkJunctionConnectivityPolicy', 'esriRepresentationError']
from cartocomutils import _esriGeoDatabase
from cartocomutils._esriGeoDatabase import WorkspaceHelper, WorkspaceProperty, WorkspaceEditEvents, WorkspaceEditEvents2, Workspace, WorkspaceExtension, WorkspaceFactory, ConfigurationKeyword, ConfigurationParameter, VersionedWorkspace, EnumVersionInfo, VersionInfo, XMLIndex, XMLIndexTags, XMLIndexTag, XMLIndexTemplate, EnumXMLIndexTemplate, HistoricalVersionMarker, EnumHistoricalMarker, ArchiveRegistrationInfo, TableNameSet, NetworkWorkspace, UtilityNetwork, StreetNetwork, NetElementClass, NetWeight, NetWeightAssociation, EnumNetWeightAssociation, NetElementDescription, EnumNetEIDArray, ForwardStar, RepairConnectivityProgress, GeometryServer, FeatureConstruction, Topology, TopologyGraph, TopologyGraphEventsHelper, TopologyEdge, TopologyNode, TopologyWorkspaceExtension, TopologyName, TopologyRule, TopologyErrorFeature, CoverageAnnotationFeature, Field, Fields, Index, Indexes, EnumFeatureGeometry, GeometryDef, Row, Object, ObjectClassDescription, Feature, ClassHelper, FeatureClassDescription, SimpleRelationship, AttributedRelationship, SQLCheck, QueryFilter, FIDSet, SpatialFilter, FilterDefs, XMLFilterDef, TableSort, GeometricNetwork, SimpleJunctionFeature, SimpleEdgeFeature, ComplexEdgeFeature, ComplexJunctionFeature, Objects, TableName, ObjectClassName, FeatureDatasetName, FeatureClassName, TableQueryName, RelQueryTableName, FeatureQueryName, QueryTableName, RelationshipClassName, MemoryRelationshipClassName, MemoryRelationshipClassFactory, GeometricNetworkName, WorkspaceName, UnknownDatasetName, AttributeRule, CodedValueDomain, EdgeConnectivityRule, JunctionConnectivityRule, RangeDomain, RelationshipRule, ObjectClassValidator, TransformGroup, DataStatistics, ObjectClassEvents, TopologyClassEvents, RelationshipClassEvents, ObjectClassSchemaEvents, VersionEvents, VersionEvents2, FGDCSynchronizationHelper, MetadataCopyHelper, XmlPropertySet, XmlPropertySetEdit, MetadataSynchronizer, FGDCSynchronizer, RelQueryTableFactory, MemoryRelationshipClass, RelQueryTable, RelQueryCursor, RelQueryRow, NamesEnumerator, EnumTableVersionChanges, QueryDef, FeatureDataset, RowBuffer, Relationship, SelectionSet, RelQueryTableSelectionSet, Cursor, ObjectClass, FeatureClass, Table, RelationshipClass, AttributedRelationshipClass, EnumDatasetType, EnumIDs, EnumConflictClass, DifferenceCursor, FeatureCursor, GeometryResultOptions, RecordSet, Record, RecordArray, AttachmentInfo, AttachmentData, AttachmentInfoArray, AttachmentDataArray, Attachment, EnumAttachment, AttachmentManager, EditorTrackingInfo, OwnershipBasedAccessControl, JSONDeserializerGdb, JSONSerializerGdb, JSONConverterGdb, ThumbnailInfo, DocumentationInfo, ItemInfo, ItemInfos, FieldChecker, EnumFieldError, FieldError, SimpleDataConverter, EnumInvalidObject, InvalidObjectInfo, RecordNumberSet, Replica, ReplicaDataset, ReplicaDescription, ReplicaDescriptionExtension, GPReplica, GPReplicas, GPReplicaDescription, GPReplicaDataset, GPReplicaDatasets, GPReplicaOptions, GeoDBDataTransfer, RasterDef, RasterStorageDef, RasterValue, RasterCatalogItem, RasterCatalog, RasterDatasetName, RasterBandName, RasterCatalogName, RasterCatalogClassDescription, RasterCatalogHelper, Pnt, MosaicDatasetName, DEBrowseOptions, DEWorkspaceType, DETableType, FieldType, IndexType, DEFeatureDatasetType, DEFeatureClassType, DERelationshipClassType, WorkspaceDefinition, DEWorkspace, DETable, DEFeatureDataset, DEFeatureClass, GPGeometricNetworkMembership, GPTopologyMembership, DERelationshipClass, GPDataTypeName, GPMessage, GPMessages, DEGeometricNetworkType, DEGeometricNetwork, DETopology, DETopologyType, DERasterCatalog, DERasterCatalogType, DEGdbUtilities, GPRelationshipClassKey, GPSubtype, GPWorkspaceExtension, GPDatasetExtension, GPRangeDomain2, GPCodedValueDomain2, Names, DataElements, DataElementHelper, GPVersionInfos, GPVersionInfo, DEGeoDataServerType, DEGeoDataServer, DEMapServerType, DEMapServer, DEGlobeServerType, DEGlobeServer, DEGPServerType, DEGPServer, DEGeometryServerType, DEGeometryServer, DEServerConnectionType, DEServerConnection, ResultPortionInfo, GPMessageManager, DERasterDatasetType, DERasterBandType, DERasterDataset, DERasterBand, GPHistoricalMarker, FeatureDataConverter, Tin, DddServerEnvironment, TinNodeEnumerator, TinEdgeEnumerator, TinTriangleEnumerator, TinSurfaceElement, TinNodeArray, TinEdgeArray, TinTriangleArray, TinPolyline, TinPolygon, TinNode, TinEdge, TinTriangle, TinValueFilter, TinTriangleFilter, TinEdgeTypeFilter, TinDataElementFilter, TinNodeSourceFilter, TinName, TinNativeType, TinImporter, XYEvent2FieldsProperties, XYEventSourceName, XYEventSource, NetworkForwardStar, EnumNetworkElement, DENetworkDataset, DENetworkDatasetType, NetworkSource, SystemJunctionSource, EdgeFeatureSource, JunctionFeatureSource, TurnFeatureSource, NetworkAttributeParameter, NetworkAttribute, EvaluatedNetworkAttribute, NetworkConstantEvaluator, NetworkFieldEvaluator, NetworkScriptEvaluator, NetworkGlobalTurnDelayCategory, NetworkGlobalTurnDelayEvaluator, NetworkFunctionEvaluator, NetworkSourceDirections, Shields, StreetNameFields, DirectionsFieldMapping, NetworkDirections, DirectionsAttributeMapping, DirectionsLandmarkSource, NetworkDatasetFDExtension, NetworkDatasetWorkspaceExtension, NetworkDatasetName, NetworkDataset, NetworkJunction, NetworkEdge, NetworkTurn, NetworkForwardStarAdjacencies, GPNetworkDatasetMembership, NetworkScriptEvaluatorFunctions, TrafficData, NetworkEdgeTrafficEvaluator, TrafficDataManager, TrafficFeedDirectory, TrafficFeedGPService, RepresentationWorkspaceExtension, Representation, RepresentationClass, RepresentationClassName, RepresentationRules, DERepresentationClass, PlugInWorkspaceFactory, GeoDatabaseHelper
from cartocomutils import Enumeration, IndexProperty, _IIDMap, _CLSIDMap, _RecordMap
import uuid


# Interfaces
class INetworkProtectNames(_esriGeoDatabase.INetworkProtectNames):
    _IID = uuid.UUID('27ba2cdd-b683-11d5-a007-00c04f68e627')
    def JunctionWeight(self):
        '''Method INetworkProtectNames.JunctionWeight'''
        return super(INetworkProtectNames, self).JunctionWeight()
    def FromToEdgeWeight(self):
        '''Method INetworkProtectNames.FromToEdgeWeight'''
        return super(INetworkProtectNames, self).FromToEdgeWeight()
    def ToFromEdgeWeight(self):
        '''Method INetworkProtectNames.ToFromEdgeWeight'''
        return super(INetworkProtectNames, self).ToFromEdgeWeight()
    def NetworkID(self):
        '''Method INetworkProtectNames.NetworkID'''
        return super(INetworkProtectNames, self).NetworkID()

class INetworkDatasetProtectNames(_esriGeoDatabase.INetworkDatasetProtectNames):
    _IID = uuid.UUID('6fa57161-133d-4dae-88f4-a910d53d7a04')
    def MaxEID(self):
        '''Method INetworkDatasetProtectNames.MaxEID'''
        return super(INetworkDatasetProtectNames, self).MaxEID()
    def FromAzimuth(self):
        '''Method INetworkDatasetProtectNames.FromAzimuth'''
        return super(INetworkDatasetProtectNames, self).FromAzimuth()
    def ToAzimuth(self):
        '''Method INetworkDatasetProtectNames.ToAzimuth'''
        return super(INetworkDatasetProtectNames, self).ToAzimuth()
    def FromPercent(self):
        '''Method INetworkDatasetProtectNames.FromPercent'''
        return super(INetworkDatasetProtectNames, self).FromPercent()
    def ToPercent(self):
        '''Method INetworkDatasetProtectNames.ToPercent'''
        return super(INetworkDatasetProtectNames, self).ToPercent()
    def FromJunction(self):
        '''Method INetworkDatasetProtectNames.FromJunction'''
        return super(INetworkDatasetProtectNames, self).FromJunction()
    def ToJunction(self):
        '''Method INetworkDatasetProtectNames.ToJunction'''
        return super(INetworkDatasetProtectNames, self).ToJunction()
    def Source(self):
        '''Method INetworkDatasetProtectNames.Source'''
        return super(INetworkDatasetProtectNames, self).Source()
    def AttributeValue(self):
        '''Method INetworkDatasetProtectNames.AttributeValue'''
        return super(INetworkDatasetProtectNames, self).AttributeValue()
    def DataType(self):
        '''Method INetworkDatasetProtectNames.DataType'''
        return super(INetworkDatasetProtectNames, self).DataType()
    def DataElement(self):
        '''Method INetworkDatasetProtectNames.DataElement'''
        return super(INetworkDatasetProtectNames, self).DataElement()
    def SubnetNames(self):
        '''Method INetworkDatasetProtectNames.SubnetNames'''
        return super(INetworkDatasetProtectNames, self).SubnetNames()
    def AttributeName(self):
        '''Method INetworkDatasetProtectNames.AttributeName'''
        return super(INetworkDatasetProtectNames, self).AttributeName()
    def Evaluator(self):
        '''Method INetworkDatasetProtectNames.Evaluator'''
        return super(INetworkDatasetProtectNames, self).Evaluator()
    def Junction(self):
        '''Method INetworkDatasetProtectNames.Junction'''
        return super(INetworkDatasetProtectNames, self).Junction()
    def Turn(self):
        '''Method INetworkDatasetProtectNames.Turn'''
        return super(INetworkDatasetProtectNames, self).Turn()
    def Edge(self):
        '''Method INetworkDatasetProtectNames.Edge'''
        return super(INetworkDatasetProtectNames, self).Edge()
    def HasTurnRestriction(self):
        '''Method INetworkDatasetProtectNames.HasTurnRestriction'''
        return super(INetworkDatasetProtectNames, self).HasTurnRestriction()
    def SchemaState(self):
        '''Method INetworkDatasetProtectNames.SchemaState'''
        return super(INetworkDatasetProtectNames, self).SchemaState()
    def SourceCount(self):
        '''Method INetworkDatasetProtectNames.SourceCount'''
        return super(INetworkDatasetProtectNames, self).SourceCount()
    def FirstEdgeEID(self):
        '''Method INetworkDatasetProtectNames.FirstEdgeEID'''
        return super(INetworkDatasetProtectNames, self).FirstEdgeEID()
    def LastEdgeEID(self):
        '''Method INetworkDatasetProtectNames.LastEdgeEID'''
        return super(INetworkDatasetProtectNames, self).LastEdgeEID()
    def AtJunctionEID(self):
        '''Method INetworkDatasetProtectNames.AtJunctionEID'''
        return super(INetworkDatasetProtectNames, self).AtJunctionEID()
    def NetworkDataset(self):
        '''Method INetworkDatasetProtectNames.NetworkDataset'''
        return super(INetworkDatasetProtectNames, self).NetworkDataset()
    def IsDefault(self):
        '''Method INetworkDatasetProtectNames.IsDefault'''
        return super(INetworkDatasetProtectNames, self).IsDefault()
    def SourceName(self):
        '''Method INetworkDatasetProtectNames.SourceName'''
        return super(INetworkDatasetProtectNames, self).SourceName()
    def StorageType(self):
        '''Method INetworkDatasetProtectNames.StorageType'''
        return super(INetworkDatasetProtectNames, self).StorageType()
    def Sources(self):
        '''Method INetworkDatasetProtectNames.Sources'''
        return super(INetworkDatasetProtectNames, self).Sources()
    def SourceType(self):
        '''Method INetworkDatasetProtectNames.SourceType'''
        return super(INetworkDatasetProtectNames, self).SourceType()
    def AttributeID(self):
        '''Method INetworkDatasetProtectNames.AttributeID'''
        return super(INetworkDatasetProtectNames, self).AttributeID()
    def NumComplexTurns(self):
        '''Method INetworkDatasetProtectNames.NumComplexTurns'''
        return super(INetworkDatasetProtectNames, self).NumComplexTurns()
    def Data(self):
        '''Method INetworkDatasetProtectNames.Data'''
        return super(INetworkDatasetProtectNames, self).Data()
    def IsFiltered(self):
        '''Method INetworkDatasetProtectNames.IsFiltered'''
        return super(INetworkDatasetProtectNames, self).IsFiltered()
    def NewIndex(self):
        '''Method INetworkDatasetProtectNames.NewIndex'''
        return super(INetworkDatasetProtectNames, self).NewIndex()
    def SourceOID(self):
        '''Method INetworkDatasetProtectNames.SourceOID'''
        return super(INetworkDatasetProtectNames, self).SourceOID()
    def LastModified(self):
        '''Method INetworkDatasetProtectNames.LastModified'''
        return super(INetworkDatasetProtectNames, self).LastModified()
    def NetworkSource(self):
        '''Method INetworkDatasetProtectNames.NetworkSource'''
        return super(INetworkDatasetProtectNames, self).NetworkSource()
    def NetworkAttribute(self):
        '''Method INetworkDatasetProtectNames.NetworkAttribute'''
        return super(INetworkDatasetProtectNames, self).NetworkAttribute()

class IGeoDBProtectNames(_esriGeoDatabase.IGeoDBProtectNames):
    _IID = uuid.UUID('c2697cbc-3d8a-4888-ae34-5c35180181a6')
    def Role(self):
        '''Method IGeoDBProtectNames.Role'''
        return super(IGeoDBProtectNames, self).Role()
    def DatasetType(self):
        '''Method IGeoDBProtectNames.DatasetType'''
        return super(IGeoDBProtectNames, self).DatasetType()
    def SelectionIDs(self):
        '''Method IGeoDBProtectNames.SelectionIDs'''
        return super(IGeoDBProtectNames, self).SelectionIDs()
    def DefQuery(self):
        '''Method IGeoDBProtectNames.DefQuery'''
        return super(IGeoDBProtectNames, self).DefQuery()
    def ModelType(self):
        '''Method IGeoDBProtectNames.ModelType'''
        return super(IGeoDBProtectNames, self).ModelType()
    def Rule(self):
        '''Method IGeoDBProtectNames.Rule'''
        return super(IGeoDBProtectNames, self).Rule()
    def EnumNameMapping(self):
        '''Method IGeoDBProtectNames.EnumNameMapping'''
        return super(IGeoDBProtectNames, self).EnumNameMapping()
    def InvalidArea(self):
        '''Method IGeoDBProtectNames.InvalidArea'''
        return super(IGeoDBProtectNames, self).InvalidArea()
    def EventNotificationOnValidate(self):
        '''Method IGeoDBProtectNames.EventNotificationOnValidate'''
        return super(IGeoDBProtectNames, self).EventNotificationOnValidate()
    def Topology(self):
        '''Method IGeoDBProtectNames.Topology'''
        return super(IGeoDBProtectNames, self).Topology()
    def XYRank(self):
        '''Method IGeoDBProtectNames.XYRank'''
        return super(IGeoDBProtectNames, self).XYRank()
    def ZRank(self):
        '''Method IGeoDBProtectNames.ZRank'''
        return super(IGeoDBProtectNames, self).ZRank()
    def EdgeCount(self):
        '''Method IGeoDBProtectNames.EdgeCount'''
        return super(IGeoDBProtectNames, self).EdgeCount()
    def Classes(self):
        '''Method IGeoDBProtectNames.Classes'''
        return super(IGeoDBProtectNames, self).Classes()
    def ElementID(self):
        '''Method IGeoDBProtectNames.ElementID'''
        return super(IGeoDBProtectNames, self).ElementID()
    def ConfigKeyword(self):
        '''Method IGeoDBProtectNames.ConfigKeyword'''
        return super(IGeoDBProtectNames, self).ConfigKeyword()
    def CopyDataset(self):
        '''Method IGeoDBProtectNames.CopyDataset'''
        return super(IGeoDBProtectNames, self).CopyDataset()
    def ReplicaName(self):
        '''Method IGeoDBProtectNames.ReplicaName'''
        return super(IGeoDBProtectNames, self).ReplicaName()
    def DeltaFile(self):
        '''Method IGeoDBProtectNames.DeltaFile'''
        return super(IGeoDBProtectNames, self).DeltaFile()

class ISQLPrivilege(_esriGeoDatabase.ISQLPrivilege):
    _IID = uuid.UUID('a867a185-c5cb-11d2-aae2-00c04fa37849')
    def get_SQLPrivileges(self):
        '''Method ISQLPrivilege.get_SQLPrivileges

           OUTPUT
            privileges          : long*'''
        return super(ISQLPrivilege, self).get_SQLPrivileges()
    def Grant(self, UserName, privileges, withGrant):
        '''Method ISQLPrivilege.Grant

           INPUTS
            UserName            : BSTR
            privileges          : long
            withGrant           : VARIANT_BOOL'''
        return super(ISQLPrivilege, self).Grant(UserName, privileges, withGrant)
    def Revoke(self, UserName, privileges):
        '''Method ISQLPrivilege.Revoke

           INPUTS
            UserName            : BSTR
            privileges          : long'''
        return super(ISQLPrivilege, self).Revoke(UserName, privileges)
    SQLPrivileges = property(get_SQLPrivileges, None, None)

class IGeoDataset(_esriGeoDatabase.IGeoDataset):
    _IID = uuid.UUID('34c20004-4d3c-11d0-92d8-00805f7c28b0')
    def get_SpatialReference(self):
        '''Method IGeoDataset.get_SpatialReference

           OUTPUT
            spref               : ISpatialReference**'''
        return super(IGeoDataset, self).get_SpatialReference()
    def get_Extent(self):
        '''Method IGeoDataset.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGeoDataset, self).get_Extent()
    Extent = property(get_Extent, None, None)
    SpatialReference = property(get_SpatialReference, None, None)

class IProperty(_esriGeoDatabase.IProperty):
    _IID = uuid.UUID('40a9e882-5533-11d0-98be-00805f7ced21')

    def __init__(self, *args, **kw):
        super(IProperty, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IProperty.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IProperty, self).get_Name()
    def put_Name(self, Name):
        '''Method IProperty.put_Name

           INPUT
            Name                : BSTR'''
        return super(IProperty, self).put_Name(Name)
    def get_Value(self):
        '''Method IProperty.get_Value

           OUTPUT
            Value               : VARIANT*'''
        return super(IProperty, self).get_Value()
    def put_Value(self, Value):
        '''Method IProperty.put_Value

           INPUT
            Value               : VARIANT'''
        return super(IProperty, self).put_Value(Value)
    def get_SubType(self):
        '''Method IProperty.get_SubType

           OUTPUT
            SubType             : int*'''
        return super(IProperty, self).get_SubType()
    Name = property(get_Name, put_Name, None)
    SubType = property(get_SubType, None, None)
    Value = property(get_Value, put_Value, None)

class IEnumProperty(_esriGeoDatabase.IEnumProperty):
    _IID = uuid.UUID('40a9e881-5533-11d0-98be-00805f7ced21')
    def Next(self, numRequested):
        '''Method IEnumProperty.Next

           INPUT
            numRequested        : long

           OUTPUTS
            props               : IProperty**
            numFetched          : long*'''
        return super(IEnumProperty, self).Next(numRequested)
    def Skip(self, numToSkip):
        '''Method IEnumProperty.Skip

           INPUT
            numToSkip           : long'''
        return super(IEnumProperty, self).Skip(numToSkip)
    def Reset(self):
        '''Method IEnumProperty.Reset'''
        return super(IEnumProperty, self).Reset()
    def Clone(self):
        '''Method IEnumProperty.Clone

           OUTPUT
            Property            : IEnumProperty**'''
        return super(IEnumProperty, self).Clone()

class IDatasetEditInfo(_esriGeoDatabase.IDatasetEditInfo):
    _IID = uuid.UUID('234c31c1-9740-11d1-89e2-006097aff44e')
    def get_CanEdit(self):
        '''Method IDatasetEditInfo.get_CanEdit

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IDatasetEditInfo, self).get_CanEdit()
    def get_CanUndo(self):
        '''Method IDatasetEditInfo.get_CanUndo

           OUTPUT
            CanUndo             : VARIANT_BOOL*'''
        return super(IDatasetEditInfo, self).get_CanUndo()
    def get_CanRedo(self):
        '''Method IDatasetEditInfo.get_CanRedo

           OUTPUT
            CanUndo             : VARIANT_BOOL*'''
        return super(IDatasetEditInfo, self).get_CanRedo()
    CanEdit = property(get_CanEdit, None, None)
    CanRedo = property(get_CanRedo, None, None)
    CanUndo = property(get_CanUndo, None, None)

class IDatasetEdit(_esriGeoDatabase.IDatasetEdit):
    _IID = uuid.UUID('448c5d21-9746-11d1-89e2-006097aff44e')
    def IsBeingEdited(self):
        '''Method IDatasetEdit.IsBeingEdited

           OUTPUT
            IsBeingEdited       : VARIANT_BOOL*'''
        return super(IDatasetEdit, self).IsBeingEdited()

class ITransactions(_esriGeoDatabase.ITransactions):
    _IID = uuid.UUID('f05d9bc1-d03c-11d1-887f-0000f877762d')
    def get_InTransaction(self):
        '''Method ITransactions.get_InTransaction

           OUTPUT
            InTransaction       : VARIANT_BOOL*'''
        return super(ITransactions, self).get_InTransaction()
    def StartTransaction(self):
        '''Method ITransactions.StartTransaction'''
        return super(ITransactions, self).StartTransaction()
    def CommitTransaction(self):
        '''Method ITransactions.CommitTransaction'''
        return super(ITransactions, self).CommitTransaction()
    def AbortTransaction(self):
        '''Method ITransactions.AbortTransaction'''
        return super(ITransactions, self).AbortTransaction()
    InTransaction = property(get_InTransaction, None, None)

class ITransactionsOptions(_esriGeoDatabase.ITransactionsOptions):
    _IID = uuid.UUID('6e45153f-df82-11d1-aa82-00c04fa37585')

    def __init__(self, *args, **kw):
        super(ITransactionsOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AutoCommitInterval(self, interval):
        '''Method ITransactionsOptions.put_AutoCommitInterval

           INPUT
            interval            : long'''
        return super(ITransactionsOptions, self).put_AutoCommitInterval(interval)
    def get_AutoCommitInterval(self):
        '''Method ITransactionsOptions.get_AutoCommitInterval

           OUTPUT
            interval            : long*'''
        return super(ITransactionsOptions, self).get_AutoCommitInterval()
    AutoCommitInterval = property(get_AutoCommitInterval, put_AutoCommitInterval, None)

class ILockInfo(_esriGeoDatabase.ILockInfo):
    _IID = uuid.UUID('751ad693-93b2-11d3-9f62-00c04f6bddd9')
    def get_UserName(self):
        '''Method ILockInfo.get_UserName

           OUTPUT
            user                : BSTR*'''
        return super(ILockInfo, self).get_UserName()
    def get_LockType(self):
        '''Method ILockInfo.get_LockType

           OUTPUT
            LockType            : esriLockType*'''
        return super(ILockInfo, self).get_LockType()
    LockType = property(get_LockType, None, None)
    UserName = property(get_UserName, None, None)

class IEnumLockInfo(_esriGeoDatabase.IEnumLockInfo):
    _IID = uuid.UUID('0f2e4f13-93b2-11d3-9f62-00c04f6bddd9')
    def Next(self):
        '''Method IEnumLockInfo.Next

           OUTPUT
            lock                : ILockInfo**'''
        return super(IEnumLockInfo, self).Next()
    def __iter__(self):
        try:
            super(IEnumLockInfo, self).Reset()
            val = super(IEnumLockInfo, self).Next()
            while val:
                yield val
                val = super(IEnumLockInfo, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumLockInfo.Reset'''
        return super(IEnumLockInfo, self).Reset()

class IFIDSet(_esriGeoDatabase.IFIDSet):
    _IID = uuid.UUID('d79bdaf1-caa8-11d2-b2be-0000f878229e')
    def Add(self, fID):
        '''Method IFIDSet.Add

           INPUT
            fID                 : long'''
        return super(IFIDSet, self).Add(fID)
    def Delete(self, fID):
        '''Method IFIDSet.Delete

           INPUT
            fID                 : long'''
        return super(IFIDSet, self).Delete(fID)
    def Find(self, fID):
        '''Method IFIDSet.Find

           INPUT
            fID                 : long

           OUTPUT
            doesExist           : VARIANT_BOOL*'''
        return super(IFIDSet, self).Find(fID)
    def Next(self):
        '''Method IFIDSet.Next

           OUTPUT
            fID                 : long*'''
        return super(IFIDSet, self).Next()
    def __iter__(self):
        try:
            super(IFIDSet, self).Reset()
            val = super(IFIDSet, self).Next()
            while val:
                yield val
                val = super(IFIDSet, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IFIDSet.Reset'''
        return super(IFIDSet, self).Reset()
    def Count(self):
        '''Method IFIDSet.Count

           OUTPUT
            Count               : long*'''
        return super(IFIDSet, self).Count()
    def SetEmpty(self):
        '''Method IFIDSet.SetEmpty'''
        return super(IFIDSet, self).SetEmpty()

class IDomain(_esriGeoDatabase.IDomain):
    _IID = uuid.UUID('df18fe0a-84ba-11d2-ab61-000000000000')

    def __init__(self, *args, **kw):
        super(IDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DomainID(self):
        '''Method IDomain.get_DomainID

           OUTPUT
            ID                  : long*'''
        return super(IDomain, self).get_DomainID()
    def put_DomainID(self, ID):
        '''Method IDomain.put_DomainID

           INPUT
            ID                  : long'''
        return super(IDomain, self).put_DomainID(ID)
    def get_Description(self):
        '''Method IDomain.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IDomain, self).get_Description()
    def put_Description(self, Description):
        '''Method IDomain.put_Description

           INPUT
            Description         : BSTR'''
        return super(IDomain, self).put_Description(Description)
    def get_FieldType(self):
        '''Method IDomain.get_FieldType

           OUTPUT
            FieldType           : esriFieldType*'''
        return super(IDomain, self).get_FieldType()
    def put_FieldType(self, FieldType):
        '''Method IDomain.put_FieldType

           INPUT
            FieldType           : esriFieldType'''
        return super(IDomain, self).put_FieldType(FieldType)
    def get_MergePolicy(self):
        '''Method IDomain.get_MergePolicy

           OUTPUT
            policy              : esriMergePolicyType*'''
        return super(IDomain, self).get_MergePolicy()
    def put_MergePolicy(self, policy):
        '''Method IDomain.put_MergePolicy

           INPUT
            policy              : esriMergePolicyType'''
        return super(IDomain, self).put_MergePolicy(policy)
    def get_SplitPolicy(self):
        '''Method IDomain.get_SplitPolicy

           OUTPUT
            policy              : esriSplitPolicyType*'''
        return super(IDomain, self).get_SplitPolicy()
    def put_SplitPolicy(self, policy):
        '''Method IDomain.put_SplitPolicy

           INPUT
            policy              : esriSplitPolicyType'''
        return super(IDomain, self).put_SplitPolicy(policy)
    def get_Name(self):
        '''Method IDomain.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDomain, self).get_Name()
    def put_Name(self, Name):
        '''Method IDomain.put_Name

           INPUT
            Name                : BSTR'''
        return super(IDomain, self).put_Name(Name)
    def get_Owner(self):
        '''Method IDomain.get_Owner

           OUTPUT
            Owner               : BSTR*'''
        return super(IDomain, self).get_Owner()
    def put_Owner(self, Owner):
        '''Method IDomain.put_Owner

           INPUT
            Owner               : BSTR'''
        return super(IDomain, self).put_Owner(Owner)
    def get_Type(self):
        '''Method IDomain.get_Type

           OUTPUT
            Type                : esriDomainType*'''
        return super(IDomain, self).get_Type()
    def MemberOf(self, Value):
        '''Method IDomain.MemberOf

           INPUT
            Value               : VARIANT

           OUTPUT
            isMember            : VARIANT_BOOL*'''
        return super(IDomain, self).MemberOf(Value)
    Description = property(get_Description, put_Description, None)
    DomainID = property(get_DomainID, put_DomainID, None)
    FieldType = property(get_FieldType, put_FieldType, None)
    MergePolicy = property(get_MergePolicy, put_MergePolicy, None)
    Name = property(get_Name, put_Name, None)
    Owner = property(get_Owner, put_Owner, None)
    SplitPolicy = property(get_SplitPolicy, put_SplitPolicy, None)
    Type = property(get_Type, None, None)

class IGeometryDef(_esriGeoDatabase.IGeometryDef):
    _IID = uuid.UUID('439a0d50-3915-11d1-9ca7-0000f8780619')
    def get_AvgNumPoints(self):
        '''Method IGeometryDef.get_AvgNumPoints

           OUTPUT
            points              : long*'''
        return super(IGeometryDef, self).get_AvgNumPoints()
    def get_GeometryType(self):
        '''Method IGeometryDef.get_GeometryType

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(IGeometryDef, self).get_GeometryType()
    def get_GridSize(self, Index):
        '''Method IGeometryDef.get_GridSize

           INPUT
            Index               : long

           OUTPUT
            Size                : double*'''
        return super(IGeometryDef, self).get_GridSize(Index)
    def get_GridCount(self):
        '''Method IGeometryDef.get_GridCount

           OUTPUT
            grids               : long*'''
        return super(IGeometryDef, self).get_GridCount()
    def get_SpatialReference(self):
        '''Method IGeometryDef.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IGeometryDef, self).get_SpatialReference()
    def get_HasZ(self):
        '''Method IGeometryDef.get_HasZ

           OUTPUT
            HasZ                : VARIANT_BOOL*'''
        return super(IGeometryDef, self).get_HasZ()
    def get_HasM(self):
        '''Method IGeometryDef.get_HasM

           OUTPUT
            HasM                : VARIANT_BOOL*'''
        return super(IGeometryDef, self).get_HasM()
    AvgNumPoints = property(get_AvgNumPoints, None, None)
    GeometryType = property(get_GeometryType, None, None)
    GridCount = property(get_GridCount, None, None)
    HasM = property(get_HasM, None, None)
    HasZ = property(get_HasZ, None, None)
    SpatialReference = property(get_SpatialReference, None, None)
    GridSize = IndexProperty(get_GridSize, None)

class IField(_esriGeoDatabase.IField):
    _IID = uuid.UUID('fcb01cb3-9f0b-11d0-bec7-00805f7c4268')
    def get_Name(self):
        '''Method IField.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IField, self).get_Name()
    def get_AliasName(self):
        '''Method IField.get_AliasName

           OUTPUT
            Name                : BSTR*'''
        return super(IField, self).get_AliasName()
    def get_Type(self):
        '''Method IField.get_Type

           OUTPUT
            Type                : esriFieldType*'''
        return super(IField, self).get_Type()
    def get_Domain(self):
        '''Method IField.get_Domain

           OUTPUT
            Domain              : IDomain**'''
        return super(IField, self).get_Domain()
    def get_DefaultValue(self):
        '''Method IField.get_DefaultValue

           OUTPUT
            Value               : VARIANT*'''
        return super(IField, self).get_DefaultValue()
    def get_Length(self):
        '''Method IField.get_Length

           OUTPUT
            Length              : long*'''
        return super(IField, self).get_Length()
    def get_Precision(self):
        '''Method IField.get_Precision

           OUTPUT
            Length              : long*'''
        return super(IField, self).get_Precision()
    def get_Scale(self):
        '''Method IField.get_Scale

           OUTPUT
            Length              : long*'''
        return super(IField, self).get_Scale()
    def get_IsNullable(self):
        '''Method IField.get_IsNullable

           OUTPUT
            IsNullable          : VARIANT_BOOL*'''
        return super(IField, self).get_IsNullable()
    def get_GeometryDef(self):
        '''Method IField.get_GeometryDef

           OUTPUT
            GeometryDef         : IGeometryDef**'''
        return super(IField, self).get_GeometryDef()
    def get_VarType(self):
        '''Method IField.get_VarType

           OUTPUT
            VarType             : long*'''
        return super(IField, self).get_VarType()
    def get_DomainFixed(self):
        '''Method IField.get_DomainFixed

           OUTPUT
            isFixed             : VARIANT_BOOL*'''
        return super(IField, self).get_DomainFixed()
    def get_Required(self):
        '''Method IField.get_Required

           OUTPUT
            IsRequired          : VARIANT_BOOL*'''
        return super(IField, self).get_Required()
    def get_Editable(self):
        '''Method IField.get_Editable

           OUTPUT
            IsEditable          : VARIANT_BOOL*'''
        return super(IField, self).get_Editable()
    def CheckValue(self, Value):
        '''Method IField.CheckValue

           INPUT
            Value               : VARIANT

           OUTPUT
            isValidValue        : VARIANT_BOOL*'''
        return super(IField, self).CheckValue(Value)
    AliasName = property(get_AliasName, None, None)
    DefaultValue = property(get_DefaultValue, None, None)
    Domain = property(get_Domain, None, None)
    DomainFixed = property(get_DomainFixed, None, None)
    Editable = property(get_Editable, None, None)
    GeometryDef = property(get_GeometryDef, None, None)
    IsNullable = property(get_IsNullable, None, None)
    Length = property(get_Length, None, None)
    Name = property(get_Name, None, None)
    Precision = property(get_Precision, None, None)
    Required = property(get_Required, None, None)
    Scale = property(get_Scale, None, None)
    Type = property(get_Type, None, None)
    VarType = property(get_VarType, None, None)

class IFields(_esriGeoDatabase.IFields):
    _IID = uuid.UUID('6b2072e3-23f7-11d1-89d8-006097aff44e')
    def get_FieldCount(self):
        '''Method IFields.get_FieldCount

           OUTPUT
            numFields           : long*'''
        return super(IFields, self).get_FieldCount()
    def get_Field(self, Index):
        '''Method IFields.get_Field

           INPUT
            Index               : long

           OUTPUT
            Field               : IField**'''
        return super(IFields, self).get_Field(Index)
    def FindField(self, Name):
        '''Method IFields.FindField

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IFields, self).FindField(Name)
    def FindFieldByAliasName(self, Name):
        '''Method IFields.FindFieldByAliasName

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IFields, self).FindFieldByAliasName(Name)
    FieldCount = property(get_FieldCount, None, None)
    Field = IndexProperty(get_Field, None)

class IRowBuffer(_esriGeoDatabase.IRowBuffer):
    _IID = uuid.UUID('93684651-1a83-11d1-8802-0000f877762d')

    def __init__(self, *args, **kw):
        super(IRowBuffer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self, Index):
        '''Method IRowBuffer.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IRowBuffer, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method IRowBuffer.put_Value

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IRowBuffer, self).put_Value(Index, Value)
    def get_Fields(self):
        '''Method IRowBuffer.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IRowBuffer, self).get_Fields()
    Fields = property(get_Fields, None, None)
    Value = property(None, put_Value, None)
    Value = IndexProperty(get_Value, None)

class IIndex(_esriGeoDatabase.IIndex):
    _IID = uuid.UUID('2063fd01-4ce0-11d1-89db-006097aff44e')
    def get_Name(self):
        '''Method IIndex.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IIndex, self).get_Name()
    def get_IsUnique(self):
        '''Method IIndex.get_IsUnique

           OUTPUT
            IsUnique            : VARIANT_BOOL*'''
        return super(IIndex, self).get_IsUnique()
    def get_IsAscending(self):
        '''Method IIndex.get_IsAscending

           OUTPUT
            IsAscending         : VARIANT_BOOL*'''
        return super(IIndex, self).get_IsAscending()
    def get_Fields(self):
        '''Method IIndex.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IIndex, self).get_Fields()
    Fields = property(get_Fields, None, None)
    IsAscending = property(get_IsAscending, None, None)
    IsUnique = property(get_IsUnique, None, None)
    Name = property(get_Name, None, None)

class IEnumIndex(_esriGeoDatabase.IEnumIndex):
    _IID = uuid.UUID('23bd2b49-bf8b-11d2-aadd-00c04fa37849')
    def Next(self):
        '''Method IEnumIndex.Next

           OUTPUT
            Index               : IIndex**'''
        return super(IEnumIndex, self).Next()
    def __iter__(self):
        try:
            super(IEnumIndex, self).Reset()
            val = super(IEnumIndex, self).Next()
            while val:
                yield val
                val = super(IEnumIndex, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumIndex.Reset'''
        return super(IEnumIndex, self).Reset()

class IIndexes(_esriGeoDatabase.IIndexes):
    _IID = uuid.UUID('2063fd03-4ce0-11d1-89db-006097aff44e')
    def get_IndexCount(self):
        '''Method IIndexes.get_IndexCount

           OUTPUT
            numIndexes          : long*'''
        return super(IIndexes, self).get_IndexCount()
    def get_Index(self, pos):
        '''Method IIndexes.get_Index

           INPUT
            pos                 : long

           OUTPUT
            Index               : IIndex**'''
        return super(IIndexes, self).get_Index(pos)
    def FindIndex(self, Name):
        '''Method IIndexes.FindIndex

           INPUT
            Name                : BSTR

           OUTPUT
            pos                 : long*'''
        return super(IIndexes, self).FindIndex(Name)
    def FindIndexesByFieldName(self, FieldName):
        '''Method IIndexes.FindIndexesByFieldName

           INPUT
            FieldName           : BSTR

           OUTPUT
            enumIndex           : IEnumIndex**'''
        return super(IIndexes, self).FindIndexesByFieldName(FieldName)
    IndexCount = property(get_IndexCount, None, None)
    Index = IndexProperty(get_Index, None)

class IClass(_esriGeoDatabase.IClass):
    _IID = uuid.UUID('1afcdb32-ac09-11d2-8a1e-006097aff44e')
    def FindField(self, Name):
        '''Method IClass.FindField

           INPUT
            Name                : BSTR

           OUTPUT
            FieldIndex          : long*'''
        return super(IClass, self).FindField(Name)
    def get_Fields(self):
        '''Method IClass.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IClass, self).get_Fields()
    def get_Indexes(self):
        '''Method IClass.get_Indexes

           OUTPUT
            Indexes             : IIndexes**'''
        return super(IClass, self).get_Indexes()
    def AddField(self, Field):
        '''Method IClass.AddField

           INPUT
            Field               : IField*'''
        return super(IClass, self).AddField(Field)
    def DeleteField(self, Field):
        '''Method IClass.DeleteField

           INPUT
            Field               : IField*'''
        return super(IClass, self).DeleteField(Field)
    def AddIndex(self, Index):
        '''Method IClass.AddIndex

           INPUT
            Index               : IIndex*'''
        return super(IClass, self).AddIndex(Index)
    def DeleteIndex(self, Index):
        '''Method IClass.DeleteIndex

           INPUT
            Index               : IIndex*'''
        return super(IClass, self).DeleteIndex(Index)
    def get_HasOID(self):
        '''Method IClass.get_HasOID

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IClass, self).get_HasOID()
    def get_OIDFieldName(self):
        '''Method IClass.get_OIDFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IClass, self).get_OIDFieldName()
    def get_CLSID(self):
        '''Method IClass.get_CLSID

           OUTPUT
            InstanceCLSID       : IUID**'''
        return super(IClass, self).get_CLSID()
    def get_EXTCLSID(self):
        '''Method IClass.get_EXTCLSID

           OUTPUT
            ClassExtensionCLSID : IUID**'''
        return super(IClass, self).get_EXTCLSID()
    def get_Extension(self):
        '''Method IClass.get_Extension

           OUTPUT
            Extension           : IUnknown**'''
        return super(IClass, self).get_Extension()
    def get_ExtensionProperties(self):
        '''Method IClass.get_ExtensionProperties

           OUTPUT
            extProps            : IPropertySet**'''
        return super(IClass, self).get_ExtensionProperties()
    CLSID = property(get_CLSID, None, None)
    EXTCLSID = property(get_EXTCLSID, None, None)
    Extension = property(get_Extension, None, None)
    ExtensionProperties = property(get_ExtensionProperties, None, None)
    Fields = property(get_Fields, None, None)
    HasOID = property(get_HasOID, None, None)
    Indexes = property(get_Indexes, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)

class IQueryFilter(_esriGeoDatabase.IQueryFilter):
    _IID = uuid.UUID('fdfebd93-ed75-11d0-9a95-080009ec734b')

    def __init__(self, *args, **kw):
        super(IQueryFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SubFields(self):
        '''Method IQueryFilter.get_SubFields

           OUTPUT
            SubFields           : BSTR*'''
        return super(IQueryFilter, self).get_SubFields()
    def put_SubFields(self, SubFields):
        '''Method IQueryFilter.put_SubFields

           INPUT
            SubFields           : BSTR'''
        return super(IQueryFilter, self).put_SubFields(SubFields)
    def AddField(self, subField):
        '''Method IQueryFilter.AddField

           INPUT
            subField            : BSTR'''
        return super(IQueryFilter, self).AddField(subField)
    def get_WhereClause(self):
        '''Method IQueryFilter.get_WhereClause

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IQueryFilter, self).get_WhereClause()
    def put_WhereClause(self, WhereClause):
        '''Method IQueryFilter.put_WhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(IQueryFilter, self).put_WhereClause(WhereClause)
    def get_OutputSpatialReference(self, FieldName):
        '''Method IQueryFilter.get_OutputSpatialReference

           INPUT
            FieldName           : BSTR

           OUTPUT
            OutputSpatialReference: ISpatialReference**'''
        return super(IQueryFilter, self).get_OutputSpatialReference(FieldName)
    def putref_OutputSpatialReference(self, FieldName, OutputSpatialReference):
        '''Method IQueryFilter.putref_OutputSpatialReference

           INPUTS
            FieldName           : BSTR
            OutputSpatialReference: ISpatialReference*'''
        return super(IQueryFilter, self).putref_OutputSpatialReference(FieldName, OutputSpatialReference)
    OutputSpatialReference = property(None, putref_OutputSpatialReference, None)
    SubFields = property(get_SubFields, put_SubFields, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)
    OutputSpatialReference = IndexProperty(get_OutputSpatialReference, None)

class IEnumIDs(_esriGeoDatabase.IEnumIDs):
    _IID = uuid.UUID('7d84b001-1521-11d2-89ed-006097aff44e')
    def Next(self):
        '''Method IEnumIDs.Next

           OUTPUT
            ID                  : long*'''
        return super(IEnumIDs, self).Next()
    def __iter__(self):
        try:
            super(IEnumIDs, self).Reset()
            val = super(IEnumIDs, self).Next()
            while val:
                yield val
                val = super(IEnumIDs, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumIDs.Reset'''
        return super(IEnumIDs, self).Reset()

class IMetadata(_esriGeoDatabase.IMetadata):
    _IID = uuid.UUID('5de04a82-24e4-11d3-a641-0008c7d3ae50')

    def __init__(self, *args, **kw):
        super(IMetadata, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Metadata(self):
        '''Method IMetadata.get_Metadata

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IMetadata, self).get_Metadata()
    def put_Metadata(self, PropertySet):
        '''Method IMetadata.put_Metadata

           INPUT
            PropertySet         : IPropertySet*'''
        return super(IMetadata, self).put_Metadata(PropertySet)
    def Synchronize(self, action, interval):
        '''Method IMetadata.Synchronize

           INPUTS
            action              : esriMetadataSyncAction
            interval            : long'''
        return super(IMetadata, self).Synchronize(action, interval)
    Metadata = property(get_Metadata, put_Metadata, None)

class IMetadataEdit(_esriGeoDatabase.IMetadataEdit):
    _IID = uuid.UUID('97fdb978-62a4-49c5-8252-b07837b33ee9')
    def get_CanEditMetadata(self):
        '''Method IMetadataEdit.get_CanEditMetadata

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IMetadataEdit, self).get_CanEditMetadata()
    CanEditMetadata = property(get_CanEditMetadata, None, None)

class ISQLSyntax(_esriGeoDatabase.ISQLSyntax):
    _IID = uuid.UUID('18e2854e-edc8-11d2-aaef-00c04fa37849')
    def QualifyTableName(self, dbName, OwnerName, TableName):
        '''Method ISQLSyntax.QualifyTableName

           INPUTS
            dbName              : BSTR
            OwnerName           : BSTR
            TableName           : BSTR

           OUTPUT
            FullName            : BSTR*'''
        return super(ISQLSyntax, self).QualifyTableName(dbName, OwnerName, TableName)
    def QualifyColumnName(self, TableName, columnName):
        '''Method ISQLSyntax.QualifyColumnName

           INPUTS
            TableName           : BSTR
            columnName          : BSTR

           OUTPUT
            FullName            : BSTR*'''
        return super(ISQLSyntax, self).QualifyColumnName(TableName, columnName)
    def ParseTableName(self, FullName):
        '''Method ISQLSyntax.ParseTableName

           INPUT
            FullName            : BSTR

           OUTPUTS
            dbName              : BSTR*
            OwnerName           : BSTR*
            TableName           : BSTR*'''
        return super(ISQLSyntax, self).ParseTableName(FullName)
    def ParseColumnName(self, FullName):
        '''Method ISQLSyntax.ParseColumnName

           INPUT
            FullName            : BSTR

           OUTPUTS
            dbName              : BSTR*
            OwnerName           : BSTR*
            TableName           : BSTR*
            columnName          : BSTR*'''
        return super(ISQLSyntax, self).ParseColumnName(FullName)
    def GetFunctionName(self, sqlFunc):
        '''Method ISQLSyntax.GetFunctionName

           INPUT
            sqlFunc             : esriSQLFunctionName

           OUTPUT
            sqlFunctionName     : BSTR*'''
        return super(ISQLSyntax, self).GetFunctionName(sqlFunc)
    def GetSpecialCharacter(self, sqlSC):
        '''Method ISQLSyntax.GetSpecialCharacter

           INPUT
            sqlSC               : esriSQLSpecialCharacters

           OUTPUT
            specialChar         : BSTR*'''
        return super(ISQLSyntax, self).GetSpecialCharacter(sqlSC)
    def GetSupportedPredicates(self):
        '''Method ISQLSyntax.GetSupportedPredicates

           OUTPUT
            predicates          : long*'''
        return super(ISQLSyntax, self).GetSupportedPredicates()
    def GetSupportedClauses(self):
        '''Method ISQLSyntax.GetSupportedClauses

           OUTPUT
            clauses             : long*'''
        return super(ISQLSyntax, self).GetSupportedClauses()
    def GetIdentifierCase(self):
        '''Method ISQLSyntax.GetIdentifierCase

           OUTPUT
            isCaseSensitive     : VARIANT_BOOL*'''
        return super(ISQLSyntax, self).GetIdentifierCase()
    def GetDelimitedIdentifierCase(self):
        '''Method ISQLSyntax.GetDelimitedIdentifierCase

           OUTPUT
            isCaseSensitive     : VARIANT_BOOL*'''
        return super(ISQLSyntax, self).GetDelimitedIdentifierCase()
    def GetStringComparisonCase(self):
        '''Method ISQLSyntax.GetStringComparisonCase

           OUTPUT
            isCaseSensitive     : VARIANT_BOOL*'''
        return super(ISQLSyntax, self).GetStringComparisonCase()
    def GetKeywords(self):
        '''Method ISQLSyntax.GetKeywords

           OUTPUT
            keywords            : IEnumBSTR**'''
        return super(ISQLSyntax, self).GetKeywords()
    def GetInvalidCharacters(self):
        '''Method ISQLSyntax.GetInvalidCharacters

           OUTPUT
            InvalidChars        : BSTR*'''
        return super(ISQLSyntax, self).GetInvalidCharacters()
    def GetInvalidStartingCharacters(self):
        '''Method ISQLSyntax.GetInvalidStartingCharacters

           OUTPUT
            InvalidChars        : BSTR*'''
        return super(ISQLSyntax, self).GetInvalidStartingCharacters()

class ISchemaLockInfo(_esriGeoDatabase.ISchemaLockInfo):
    _IID = uuid.UUID('a67958d8-226e-11d3-80b2-00c04f686238')
    def get_SchemaLockType(self):
        '''Method ISchemaLockInfo.get_SchemaLockType

           OUTPUT
            SchemaLockType      : esriSchemaLock*'''
        return super(ISchemaLockInfo, self).get_SchemaLockType()
    def get_UserName(self):
        '''Method ISchemaLockInfo.get_UserName

           OUTPUT
            UserName            : BSTR*'''
        return super(ISchemaLockInfo, self).get_UserName()
    def get_TableName(self):
        '''Method ISchemaLockInfo.get_TableName

           OUTPUT
            TableName           : BSTR*'''
        return super(ISchemaLockInfo, self).get_TableName()
    SchemaLockType = property(get_SchemaLockType, None, None)
    TableName = property(get_TableName, None, None)
    UserName = property(get_UserName, None, None)

class IEnumSchemaLockInfo(_esriGeoDatabase.IEnumSchemaLockInfo):
    _IID = uuid.UUID('a67958d7-226e-11d3-80b2-00c04f686238')
    def Next(self):
        '''Method IEnumSchemaLockInfo.Next

           OUTPUT
            info                : ISchemaLockInfo**'''
        return super(IEnumSchemaLockInfo, self).Next()
    def __iter__(self):
        try:
            super(IEnumSchemaLockInfo, self).Reset()
            val = super(IEnumSchemaLockInfo, self).Next()
            while val:
                yield val
                val = super(IEnumSchemaLockInfo, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumSchemaLockInfo.Reset'''
        return super(IEnumSchemaLockInfo, self).Reset()

class ISchemaLock(_esriGeoDatabase.ISchemaLock):
    _IID = uuid.UUID('dca648e5-0fbb-11d3-80a5-00c04f686238')
    def ChangeSchemaLock(self, schemaLock):
        '''Method ISchemaLock.ChangeSchemaLock

           INPUT
            schemaLock          : esriSchemaLock'''
        return super(ISchemaLock, self).ChangeSchemaLock(schemaLock)
    def GetCurrentSchemaLocks(self):
        '''Method ISchemaLock.GetCurrentSchemaLocks

           OUTPUT
            schemaLockInfo      : IEnumSchemaLockInfo**'''
        return super(ISchemaLock, self).GetCurrentSchemaLocks()

class IEnumDatasetType(_esriGeoDatabase.IEnumDatasetType):
    _IID = uuid.UUID('1d34b6a8-55fd-4ce5-9a10-b2294f35ff6d')
    def Next(self):
        '''Method IEnumDatasetType.Next

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IEnumDatasetType, self).Next()
    def __iter__(self):
        try:
            super(IEnumDatasetType, self).Reset()
            val = super(IEnumDatasetType, self).Next()
            while val:
                yield val
                val = super(IEnumDatasetType, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumDatasetType.Reset'''
        return super(IEnumDatasetType, self).Reset()

class IDataElement(_esriGeoDatabase.IDataElement):
    _IID = uuid.UUID('e2c87df0-33d9-4a47-9b67-fa54b2fd7966')

    def __init__(self, *args, **kw):
        super(IDataElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IDataElement.get_Type

           OUTPUT
            Type                : BSTR*'''
        return super(IDataElement, self).get_Type()
    def put_Type(self, Type):
        '''Method IDataElement.put_Type

           INPUT
            Type                : BSTR'''
        return super(IDataElement, self).put_Type(Type)
    def get_Name(self):
        '''Method IDataElement.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDataElement, self).get_Name()
    def put_Name(self, Name):
        '''Method IDataElement.put_Name

           INPUT
            Name                : BSTR'''
        return super(IDataElement, self).put_Name(Name)
    def get_CatalogPath(self):
        '''Method IDataElement.get_CatalogPath

           OUTPUT
            Path                : BSTR*'''
        return super(IDataElement, self).get_CatalogPath()
    def put_CatalogPath(self, Path):
        '''Method IDataElement.put_CatalogPath

           INPUT
            Path                : BSTR'''
        return super(IDataElement, self).put_CatalogPath(Path)
    def get_Children(self):
        '''Method IDataElement.get_Children

           OUTPUT
            DataElements        : IArray**'''
        return super(IDataElement, self).get_Children()
    def putref_Children(self, DataElements):
        '''Method IDataElement.putref_Children

           INPUT
            DataElements        : IArray*'''
        return super(IDataElement, self).putref_Children(DataElements)
    def get_ChildrenExpanded(self):
        '''Method IDataElement.get_ChildrenExpanded

           OUTPUT
            ChildrenExpanded    : VARIANT_BOOL*'''
        return super(IDataElement, self).get_ChildrenExpanded()
    def put_ChildrenExpanded(self, ChildrenExpanded):
        '''Method IDataElement.put_ChildrenExpanded

           INPUT
            ChildrenExpanded    : VARIANT_BOOL'''
        return super(IDataElement, self).put_ChildrenExpanded(ChildrenExpanded)
    def get_MetadataRetrieved(self):
        '''Method IDataElement.get_MetadataRetrieved

           OUTPUT
            MetadataRetrieved   : VARIANT_BOOL*'''
        return super(IDataElement, self).get_MetadataRetrieved()
    def put_MetadataRetrieved(self, MetadataRetrieved):
        '''Method IDataElement.put_MetadataRetrieved

           INPUT
            MetadataRetrieved   : VARIANT_BOOL'''
        return super(IDataElement, self).put_MetadataRetrieved(MetadataRetrieved)
    def get_FullPropsRetrieved(self):
        '''Method IDataElement.get_FullPropsRetrieved

           OUTPUT
            FullPropsRetrieved  : VARIANT_BOOL*'''
        return super(IDataElement, self).get_FullPropsRetrieved()
    def put_FullPropsRetrieved(self, FullPropsRetrieved):
        '''Method IDataElement.put_FullPropsRetrieved

           INPUT
            FullPropsRetrieved  : VARIANT_BOOL'''
        return super(IDataElement, self).put_FullPropsRetrieved(FullPropsRetrieved)
    def GetPath(self):
        '''Method IDataElement.GetPath

           OUTPUT
            Path                : BSTR*'''
        return super(IDataElement, self).GetPath()
    def GetFile(self):
        '''Method IDataElement.GetFile

           OUTPUT
            file                : BSTR*'''
        return super(IDataElement, self).GetFile()
    def GetBaseName(self):
        '''Method IDataElement.GetBaseName

           OUTPUT
            baseName            : BSTR*'''
        return super(IDataElement, self).GetBaseName()
    def GetExtension(self):
        '''Method IDataElement.GetExtension

           OUTPUT
            Extension           : BSTR*'''
        return super(IDataElement, self).GetExtension()
    CatalogPath = property(get_CatalogPath, put_CatalogPath, None)
    Children = property(get_Children, putref_Children, None)
    ChildrenExpanded = property(get_ChildrenExpanded, put_ChildrenExpanded, None)
    FullPropsRetrieved = property(get_FullPropsRetrieved, put_FullPropsRetrieved, None)
    MetadataRetrieved = property(get_MetadataRetrieved, put_MetadataRetrieved, None)
    Name = property(get_Name, put_Name, None)
    Type = property(get_Type, put_Type, None)

class IFeatureClassStorage(_esriGeoDatabase.IFeatureClassStorage):
    _IID = uuid.UUID('380423df-2032-4fd0-a4ed-05a76a3c17b8')
    def get_GeometryStorage(self):
        '''Method IFeatureClassStorage.get_GeometryStorage

           OUTPUT
            GeometryStorage     : esriGeometryStorage*'''
        return super(IFeatureClassStorage, self).get_GeometryStorage()
    GeometryStorage = property(get_GeometryStorage, None, None)

class IFeatureClassStorage2(_esriGeoDatabase.IFeatureClassStorage2):
    _IID = uuid.UUID('8d6276db-496e-46d9-a6e4-65144514c309')
    def get_RasterStorage(self):
        '''Method IFeatureClassStorage2.get_RasterStorage

           OUTPUT
            RasterStorage       : esriRasterStorage*'''
        return super(IFeatureClassStorage2, self).get_RasterStorage()
    def get_GeometryStorage(self):
        '''Method IFeatureClassStorage.get_GeometryStorage (from IFeatureClassStorage)

           OUTPUT
            GeometryStorage     : esriGeometryStorage*'''
        return super(IFeatureClassStorage2, self).get_GeometryStorage()
    GeometryStorage = property(get_GeometryStorage, None, None)
    RasterStorage = property(get_RasterStorage, None, None)

class IDatasetMigration(_esriGeoDatabase.IDatasetMigration):
    _IID = uuid.UUID('42fbb518-ffb1-4ff5-91b4-23b10f92ff18')
    def MigrateStorage(self, ConfigurationKeyword):
        '''Method IDatasetMigration.MigrateStorage

           INPUT
            ConfigurationKeyword: BSTR'''
        return super(IDatasetMigration, self).MigrateStorage(ConfigurationKeyword)
    def MigrateGeometryStorage(self, ConfigurationKeyword):
        '''Method IDatasetMigration.MigrateGeometryStorage

           INPUT
            ConfigurationKeyword: BSTR'''
        return super(IDatasetMigration, self).MigrateGeometryStorage(ConfigurationKeyword)
    def MigrateAttributeStorage(self, ConfigurationKeyword):
        '''Method IDatasetMigration.MigrateAttributeStorage

           INPUT
            ConfigurationKeyword: BSTR'''
        return super(IDatasetMigration, self).MigrateAttributeStorage(ConfigurationKeyword)
    def MigrateRasterStorage(self, ConfigurationKeyword):
        '''Method IDatasetMigration.MigrateRasterStorage

           INPUT
            ConfigurationKeyword: BSTR'''
        return super(IDatasetMigration, self).MigrateRasterStorage(ConfigurationKeyword)

class IWorkspace2(_esriGeoDatabase.IWorkspace2):
    _IID = uuid.UUID('4b21005e-01df-4945-9038-adcbd17a0f2e')
    def get_NameExists(self, Type, Name):
        '''Method IWorkspace2.get_NameExists

           INPUTS
            Type                : esriDatasetType
            Name                : BSTR

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IWorkspace2, self).get_NameExists(Type, Name)

class IDatabaseConnectionInfo(_esriGeoDatabase.IDatabaseConnectionInfo):
    _IID = uuid.UUID('2808cad6-e0fa-4478-be5b-0e645a2bc7ed')
    def get_ConnectedDatabase(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedDatabase

           OUTPUT
            db                  : BSTR*'''
        return super(IDatabaseConnectionInfo, self).get_ConnectedDatabase()
    def get_ConnectedUser(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedUser

           OUTPUT
            user                : BSTR*'''
        return super(IDatabaseConnectionInfo, self).get_ConnectedUser()
    ConnectedDatabase = property(get_ConnectedDatabase, None, None)
    ConnectedUser = property(get_ConnectedUser, None, None)

class IDatabaseConnectionInfo2(_esriGeoDatabase.IDatabaseConnectionInfo2):
    _IID = uuid.UUID('6557f590-8a8e-4f2c-a910-4eac2785f986')
    def get_ConnectionDBMS(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionDBMS

           OUTPUT
            dbms                : esriConnectionDBMS*'''
        return super(IDatabaseConnectionInfo2, self).get_ConnectionDBMS()
    def get_ConnectionCurrentDateTime(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionCurrentDateTime

           OUTPUT
            datetime            : VARIANT*'''
        return super(IDatabaseConnectionInfo2, self).get_ConnectionCurrentDateTime()
    def get_GeodatabaseServerClass(self):
        '''Method IDatabaseConnectionInfo2.get_GeodatabaseServerClass

           OUTPUT
            serverClass         : esriGeodatabaseServerClassType*'''
        return super(IDatabaseConnectionInfo2, self).get_GeodatabaseServerClass()
    def get_ConnectionServer(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionServer

           OUTPUT
            server              : BSTR*'''
        return super(IDatabaseConnectionInfo2, self).get_ConnectionServer()
    def get_ConnectedDatabase(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedDatabase (from IDatabaseConnectionInfo)

           OUTPUT
            db                  : BSTR*'''
        return super(IDatabaseConnectionInfo2, self).get_ConnectedDatabase()
    def get_ConnectedUser(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedUser (from IDatabaseConnectionInfo)

           OUTPUT
            user                : BSTR*'''
        return super(IDatabaseConnectionInfo2, self).get_ConnectedUser()
    ConnectedDatabase = property(get_ConnectedDatabase, None, None)
    ConnectedUser = property(get_ConnectedUser, None, None)
    ConnectionCurrentDateTime = property(get_ConnectionCurrentDateTime, None, None)
    ConnectionDBMS = property(get_ConnectionDBMS, None, None)
    ConnectionServer = property(get_ConnectionServer, None, None)
    GeodatabaseServerClass = property(get_GeodatabaseServerClass, None, None)

class IUserInfo(_esriGeoDatabase.IUserInfo):
    _IID = uuid.UUID('eb75fcde-a676-4b77-a9a6-48f722b7087b')
    def get_SessionID(self):
        '''Method IUserInfo.get_SessionID

           OUTPUT
            SessionID           : long*'''
        return super(IUserInfo, self).get_SessionID()
    def get_Name(self):
        '''Method IUserInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IUserInfo, self).get_Name()
    def get_ClientName(self):
        '''Method IUserInfo.get_ClientName

           OUTPUT
            Name                : BSTR*'''
        return super(IUserInfo, self).get_ClientName()
    def get_ConnectionTime(self):
        '''Method IUserInfo.get_ConnectionTime

           OUTPUT
            ConnectionTime      : VARIANT*'''
        return super(IUserInfo, self).get_ConnectionTime()
    def get_IsDirectConnection(self):
        '''Method IUserInfo.get_IsDirectConnection

           OUTPUT
            isDirectConnect     : VARIANT_BOOL*'''
        return super(IUserInfo, self).get_IsDirectConnection()
    def get_IsOwnConnection(self):
        '''Method IUserInfo.get_IsOwnConnection

           OUTPUT
            IsOwnConnection     : VARIANT_BOOL*'''
        return super(IUserInfo, self).get_IsOwnConnection()
    ClientName = property(get_ClientName, None, None)
    ConnectionTime = property(get_ConnectionTime, None, None)
    IsDirectConnection = property(get_IsDirectConnection, None, None)
    IsOwnConnection = property(get_IsOwnConnection, None, None)
    Name = property(get_Name, None, None)
    SessionID = property(get_SessionID, None, None)

class IEnumUserInfo(_esriGeoDatabase.IEnumUserInfo):
    _IID = uuid.UUID('20e7292d-152d-42fa-8766-a91e10a34d0e')
    def Next(self):
        '''Method IEnumUserInfo.Next

           OUTPUT
            user                : IUserInfo**'''
        return super(IEnumUserInfo, self).Next()
    def __iter__(self):
        try:
            super(IEnumUserInfo, self).Reset()
            val = super(IEnumUserInfo, self).Next()
            while val:
                yield val
                val = super(IEnumUserInfo, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumUserInfo.Reset'''
        return super(IEnumUserInfo, self).Reset()

class IDatabaseConnectionInfo3(_esriGeoDatabase.IDatabaseConnectionInfo3):
    _IID = uuid.UUID('bb7bd22e-a5cb-44d8-9130-7c729d6e6fd1')

    def __init__(self, *args, **kw):
        super(IDatabaseConnectionInfo3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConnectedUsers(self):
        '''Method IDatabaseConnectionInfo3.get_ConnectedUsers

           OUTPUT
            ConnectedUsers      : IEnumUserInfo**'''
        return super(IDatabaseConnectionInfo3, self).get_ConnectedUsers()
    def DisconnectUser(self, SessionID):
        '''Method IDatabaseConnectionInfo3.DisconnectUser

           INPUT
            SessionID           : long'''
        return super(IDatabaseConnectionInfo3, self).DisconnectUser(SessionID)
    def put_IsAcceptingConnections(self, acceptingConnections):
        '''Method IDatabaseConnectionInfo3.put_IsAcceptingConnections

           INPUT
            acceptingConnections: VARIANT_BOOL'''
        return super(IDatabaseConnectionInfo3, self).put_IsAcceptingConnections(acceptingConnections)
    def get_IsAcceptingConnections(self):
        '''Method IDatabaseConnectionInfo3.get_IsAcceptingConnections

           OUTPUT
            acceptingConnections: VARIANT_BOOL*'''
        return super(IDatabaseConnectionInfo3, self).get_IsAcceptingConnections()
    def get_ConnectedDatabaseEx(self):
        '''Method IDatabaseConnectionInfo3.get_ConnectedDatabaseEx

           OUTPUT
            ConnectedDatabase   : BSTR*'''
        return super(IDatabaseConnectionInfo3, self).get_ConnectedDatabaseEx()
    def get_ConnectionDBMS(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionDBMS (from IDatabaseConnectionInfo2)

           OUTPUT
            dbms                : esriConnectionDBMS*'''
        return super(IDatabaseConnectionInfo3, self).get_ConnectionDBMS()
    def get_ConnectionCurrentDateTime(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionCurrentDateTime (from IDatabaseConnectionInfo2)

           OUTPUT
            datetime            : VARIANT*'''
        return super(IDatabaseConnectionInfo3, self).get_ConnectionCurrentDateTime()
    def get_GeodatabaseServerClass(self):
        '''Method IDatabaseConnectionInfo2.get_GeodatabaseServerClass (from IDatabaseConnectionInfo2)

           OUTPUT
            serverClass         : esriGeodatabaseServerClassType*'''
        return super(IDatabaseConnectionInfo3, self).get_GeodatabaseServerClass()
    def get_ConnectionServer(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionServer (from IDatabaseConnectionInfo2)

           OUTPUT
            server              : BSTR*'''
        return super(IDatabaseConnectionInfo3, self).get_ConnectionServer()
    def get_ConnectedDatabase(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedDatabase (from IDatabaseConnectionInfo)

           OUTPUT
            db                  : BSTR*'''
        return super(IDatabaseConnectionInfo3, self).get_ConnectedDatabase()
    def get_ConnectedUser(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedUser (from IDatabaseConnectionInfo)

           OUTPUT
            user                : BSTR*'''
        return super(IDatabaseConnectionInfo3, self).get_ConnectedUser()
    ConnectedDatabase = property(get_ConnectedDatabase, None, None)
    ConnectedDatabaseEx = property(get_ConnectedDatabaseEx, None, None)
    ConnectedUser = property(get_ConnectedUser, None, None)
    ConnectedUsers = property(get_ConnectedUsers, None, None)
    ConnectionCurrentDateTime = property(get_ConnectionCurrentDateTime, None, None)
    ConnectionDBMS = property(get_ConnectionDBMS, None, None)
    ConnectionServer = property(get_ConnectionServer, None, None)
    GeodatabaseServerClass = property(get_GeodatabaseServerClass, None, None)
    IsAcceptingConnections = property(get_IsAcceptingConnections, put_IsAcceptingConnections, None)

class IDatabaseConnectionInfo4(_esriGeoDatabase.IDatabaseConnectionInfo4):
    _IID = uuid.UUID('7461e679-fd70-4655-b5f5-bcf5ff97064a')

    def __init__(self, *args, **kw):
        super(IDatabaseConnectionInfo4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Realm(self, Realm):
        '''Method IDatabaseConnectionInfo4.put_Realm

           INPUT
            Realm               : BSTR'''
        return super(IDatabaseConnectionInfo4, self).put_Realm(Realm)
    def get_Realm(self):
        '''Method IDatabaseConnectionInfo4.get_Realm

           OUTPUT
            Realm               : BSTR*'''
        return super(IDatabaseConnectionInfo4, self).get_Realm()
    def GenerateDefaultRealm(self):
        '''Method IDatabaseConnectionInfo4.GenerateDefaultRealm

           OUTPUT
            defaultRealm        : BSTR*'''
        return super(IDatabaseConnectionInfo4, self).GenerateDefaultRealm()
    def get_ConnectionCurrentDateTimeInUTC(self):
        '''Method IDatabaseConnectionInfo4.get_ConnectionCurrentDateTimeInUTC

           OUTPUT
            datetime            : VARIANT*'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectionCurrentDateTimeInUTC()
    def get_ConnectedUsers(self):
        '''Method IDatabaseConnectionInfo3.get_ConnectedUsers (from IDatabaseConnectionInfo3)

           OUTPUT
            ConnectedUsers      : IEnumUserInfo**'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectedUsers()
    def DisconnectUser(self, SessionID):
        '''Method IDatabaseConnectionInfo3.DisconnectUser (from IDatabaseConnectionInfo3)

           INPUT
            SessionID           : long'''
        return super(IDatabaseConnectionInfo4, self).DisconnectUser(SessionID)
    def put_IsAcceptingConnections(self, acceptingConnections):
        '''Method IDatabaseConnectionInfo3.put_IsAcceptingConnections (from IDatabaseConnectionInfo3)

           INPUT
            acceptingConnections: VARIANT_BOOL'''
        return super(IDatabaseConnectionInfo4, self).put_IsAcceptingConnections(acceptingConnections)
    def get_IsAcceptingConnections(self):
        '''Method IDatabaseConnectionInfo3.get_IsAcceptingConnections (from IDatabaseConnectionInfo3)

           OUTPUT
            acceptingConnections: VARIANT_BOOL*'''
        return super(IDatabaseConnectionInfo4, self).get_IsAcceptingConnections()
    def get_ConnectedDatabaseEx(self):
        '''Method IDatabaseConnectionInfo3.get_ConnectedDatabaseEx (from IDatabaseConnectionInfo3)

           OUTPUT
            ConnectedDatabase   : BSTR*'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectedDatabaseEx()
    def get_ConnectionDBMS(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionDBMS (from IDatabaseConnectionInfo2)

           OUTPUT
            dbms                : esriConnectionDBMS*'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectionDBMS()
    def get_ConnectionCurrentDateTime(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionCurrentDateTime (from IDatabaseConnectionInfo2)

           OUTPUT
            datetime            : VARIANT*'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectionCurrentDateTime()
    def get_GeodatabaseServerClass(self):
        '''Method IDatabaseConnectionInfo2.get_GeodatabaseServerClass (from IDatabaseConnectionInfo2)

           OUTPUT
            serverClass         : esriGeodatabaseServerClassType*'''
        return super(IDatabaseConnectionInfo4, self).get_GeodatabaseServerClass()
    def get_ConnectionServer(self):
        '''Method IDatabaseConnectionInfo2.get_ConnectionServer (from IDatabaseConnectionInfo2)

           OUTPUT
            server              : BSTR*'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectionServer()
    def get_ConnectedDatabase(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedDatabase (from IDatabaseConnectionInfo)

           OUTPUT
            db                  : BSTR*'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectedDatabase()
    def get_ConnectedUser(self):
        '''Method IDatabaseConnectionInfo.get_ConnectedUser (from IDatabaseConnectionInfo)

           OUTPUT
            user                : BSTR*'''
        return super(IDatabaseConnectionInfo4, self).get_ConnectedUser()
    ConnectedDatabase = property(get_ConnectedDatabase, None, None)
    ConnectedDatabaseEx = property(get_ConnectedDatabaseEx, None, None)
    ConnectedUser = property(get_ConnectedUser, None, None)
    ConnectedUsers = property(get_ConnectedUsers, None, None)
    ConnectionCurrentDateTime = property(get_ConnectionCurrentDateTime, None, None)
    ConnectionCurrentDateTimeInUTC = property(get_ConnectionCurrentDateTimeInUTC, None, None)
    ConnectionDBMS = property(get_ConnectionDBMS, None, None)
    ConnectionServer = property(get_ConnectionServer, None, None)
    GeodatabaseServerClass = property(get_GeodatabaseServerClass, None, None)
    IsAcceptingConnections = property(get_IsAcceptingConnections, put_IsAcceptingConnections, None)
    Realm = property(get_Realm, put_Realm, None)

class IWorkspaceProperty(_esriGeoDatabase.IWorkspaceProperty):
    _IID = uuid.UUID('7771b899-02cd-46d1-aae1-5392b662c8d0')

    def __init__(self, *args, **kw):
        super(IWorkspaceProperty, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PropertyValue(self):
        '''Method IWorkspaceProperty.get_PropertyValue

           OUTPUT
            PropertyValue       : VARIANT*'''
        return super(IWorkspaceProperty, self).get_PropertyValue()
    def put_PropertyValue(self, PropertyValue):
        '''Method IWorkspaceProperty.put_PropertyValue

           INPUT
            PropertyValue       : VARIANT'''
        return super(IWorkspaceProperty, self).put_PropertyValue(PropertyValue)
    def get_IsReadOnly(self):
        '''Method IWorkspaceProperty.get_IsReadOnly

           OUTPUT
            IsReadOnly          : VARIANT_BOOL*'''
        return super(IWorkspaceProperty, self).get_IsReadOnly()
    def put_IsReadOnly(self, IsReadOnly):
        '''Method IWorkspaceProperty.put_IsReadOnly

           INPUT
            IsReadOnly          : VARIANT_BOOL'''
        return super(IWorkspaceProperty, self).put_IsReadOnly(IsReadOnly)
    def get_IsSupported(self):
        '''Method IWorkspaceProperty.get_IsSupported

           OUTPUT
            IsSupported         : VARIANT_BOOL*'''
        return super(IWorkspaceProperty, self).get_IsSupported()
    def put_IsSupported(self, IsSupported):
        '''Method IWorkspaceProperty.put_IsSupported

           INPUT
            IsSupported         : VARIANT_BOOL'''
        return super(IWorkspaceProperty, self).put_IsSupported(IsSupported)
    IsReadOnly = property(get_IsReadOnly, put_IsReadOnly, None)
    IsSupported = property(get_IsSupported, put_IsSupported, None)
    PropertyValue = property(get_PropertyValue, put_PropertyValue, None)

class IWorkspaceProperties(_esriGeoDatabase.IWorkspaceProperties):
    _IID = uuid.UUID('0f1b2257-e2d8-4046-b749-7ff1b058a943')

    def __init__(self, *args, **kw):
        super(IWorkspaceProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Property(self, propertyGroup, PropertyType):
        '''Method IWorkspaceProperties.get_Property

           INPUTS
            propertyGroup       : esriWorkspacePropertyGroupType
            PropertyType        : long

           OUTPUT
            WorkspaceProperty   : IWorkspaceProperty**'''
        return super(IWorkspaceProperties, self).get_Property(propertyGroup, PropertyType)
    def put_Property(self, propertyGroup, PropertyType, WorkspaceProperty):
        '''Method IWorkspaceProperties.put_Property

           INPUTS
            propertyGroup       : esriWorkspacePropertyGroupType
            PropertyType        : long
            WorkspaceProperty   : IWorkspaceProperty*'''
        return super(IWorkspaceProperties, self).put_Property(propertyGroup, PropertyType, WorkspaceProperty)
    Property = property(None, put_Property, None)

class IWorkspaceProperties2(_esriGeoDatabase.IWorkspaceProperties2):
    _IID = uuid.UUID('6f249ded-59d3-423f-a850-5bc75066ae27')

    def __init__(self, *args, **kw):
        super(IWorkspaceProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CategoryPrefix(self):
        '''Method IWorkspaceProperties2.get_CategoryPrefix

           OUTPUT
            prefix              : BSTR*'''
        return super(IWorkspaceProperties2, self).get_CategoryPrefix()
    def get_Property(self, propertyGroup, PropertyType):
        '''Method IWorkspaceProperties.get_Property (from IWorkspaceProperties)

           INPUTS
            propertyGroup       : esriWorkspacePropertyGroupType
            PropertyType        : long

           OUTPUT
            WorkspaceProperty   : IWorkspaceProperty**'''
        return super(IWorkspaceProperties2, self).get_Property(propertyGroup, PropertyType)
    def put_Property(self, propertyGroup, PropertyType, WorkspaceProperty):
        '''Method IWorkspaceProperties.put_Property (from IWorkspaceProperties)

           INPUTS
            propertyGroup       : esriWorkspacePropertyGroupType
            PropertyType        : long
            WorkspaceProperty   : IWorkspaceProperty*'''
        return super(IWorkspaceProperties2, self).put_Property(propertyGroup, PropertyType, WorkspaceProperty)
    CategoryPrefix = property(get_CategoryPrefix, None, None)
    Property = property(None, put_Property, None)

class IWorkspaceExtension(_esriGeoDatabase.IWorkspaceExtension):
    _IID = uuid.UUID('da10c1c2-09a3-11d4-9faa-00c04f6bdf0c')
    def get_Name(self):
        '''Method IWorkspaceExtension.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IWorkspaceExtension, self).get_Name()
    def get_GUID(self):
        '''Method IWorkspaceExtension.get_GUID

           OUTPUT
            GUID                : IUID**'''
        return super(IWorkspaceExtension, self).get_GUID()
    def get_PrivateDatasetNames(self, dtype):
        '''Method IWorkspaceExtension.get_PrivateDatasetNames

           INPUT
            dtype               : esriDatasetType

           OUTPUT
            privateNames        : IEnumBSTR**'''
        return super(IWorkspaceExtension, self).get_PrivateDatasetNames(dtype)
    def get_DataDictionaryTableNames(self):
        '''Method IWorkspaceExtension.get_DataDictionaryTableNames

           OUTPUT
            privateNames        : IEnumBSTR**'''
        return super(IWorkspaceExtension, self).get_DataDictionaryTableNames()
    DataDictionaryTableNames = property(get_DataDictionaryTableNames, None, None)
    GUID = property(get_GUID, None, None)
    Name = property(get_Name, None, None)
    PrivateDatasetNames = IndexProperty(get_PrivateDatasetNames, None)

class IWorkspaceExtensionManager(_esriGeoDatabase.IWorkspaceExtensionManager):
    _IID = uuid.UUID('b2119283-0cd1-11d4-9fac-00c04f6bdf0c')
    def FindExtension(self, GUID):
        '''Method IWorkspaceExtensionManager.FindExtension

           INPUT
            GUID                : IUID*

           OUTPUT
            WorkspaceExtension  : IWorkspaceExtension**'''
        return super(IWorkspaceExtensionManager, self).FindExtension(GUID)
    def get_ExtensionCount(self):
        '''Method IWorkspaceExtensionManager.get_ExtensionCount

           OUTPUT
            Count               : long*'''
        return super(IWorkspaceExtensionManager, self).get_ExtensionCount()
    def get_Extension(self, Index):
        '''Method IWorkspaceExtensionManager.get_Extension

           INPUT
            Index               : long

           OUTPUT
            Extension           : IWorkspaceExtension**'''
        return super(IWorkspaceExtensionManager, self).get_Extension(Index)
    def RegisterExtension(self, Name, GUID):
        '''Method IWorkspaceExtensionManager.RegisterExtension

           INPUTS
            Name                : BSTR
            GUID                : IUID*'''
        return super(IWorkspaceExtensionManager, self).RegisterExtension(Name, GUID)
    def UnRegisterExtension(self, GUID):
        '''Method IWorkspaceExtensionManager.UnRegisterExtension

           INPUT
            GUID                : IUID*'''
        return super(IWorkspaceExtensionManager, self).UnRegisterExtension(GUID)
    ExtensionCount = property(get_ExtensionCount, None, None)
    Extension = IndexProperty(get_Extension, None)

class IWorkspaceFactoryFileExtensions(_esriGeoDatabase.IWorkspaceFactoryFileExtensions):
    _IID = uuid.UUID('9ea6f82b-80ae-4702-9906-2c90ac40c227')
    def get_RelevantExtensions(self):
        '''Method IWorkspaceFactoryFileExtensions.get_RelevantExtensions

           OUTPUT
            extSet              : BSTR*'''
        return super(IWorkspaceFactoryFileExtensions, self).get_RelevantExtensions()
    def get_ActivationExtensions(self):
        '''Method IWorkspaceFactoryFileExtensions.get_ActivationExtensions

           OUTPUT
            extSet              : BSTR*'''
        return super(IWorkspaceFactoryFileExtensions, self).get_ActivationExtensions()
    ActivationExtensions = property(get_ActivationExtensions, None, None)
    RelevantExtensions = property(get_RelevantExtensions, None, None)

class IWorkspaceFactoryLockControl(_esriGeoDatabase.IWorkspaceFactoryLockControl):
    _IID = uuid.UUID('61117908-069f-48ab-a344-7a9e4394dedf')
    def get_SchemaLockingEnabled(self):
        '''Method IWorkspaceFactoryLockControl.get_SchemaLockingEnabled

           OUTPUT
            isSchemaLockingEnabled: VARIANT_BOOL*'''
        return super(IWorkspaceFactoryLockControl, self).get_SchemaLockingEnabled()
    def EnableSchemaLocking(self):
        '''Method IWorkspaceFactoryLockControl.EnableSchemaLocking'''
        return super(IWorkspaceFactoryLockControl, self).EnableSchemaLocking()
    def DisableSchemaLocking(self):
        '''Method IWorkspaceFactoryLockControl.DisableSchemaLocking'''
        return super(IWorkspaceFactoryLockControl, self).DisableSchemaLocking()
    SchemaLockingEnabled = property(get_SchemaLockingEnabled, None, None)

class IWorkspaceProgressTracker(_esriGeoDatabase.IWorkspaceProgressTracker):
    _IID = uuid.UUID('4e3a0d23-6213-4b78-9a2f-b9286d34e3d3')

    def __init__(self, *args, **kw):
        super(IWorkspaceProgressTracker, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CancelTracker(self):
        '''Method IWorkspaceProgressTracker.get_CancelTracker

           OUTPUT
            CancelTracker       : ITrackCancel**'''
        return super(IWorkspaceProgressTracker, self).get_CancelTracker()
    def putref_CancelTracker(self, CancelTracker):
        '''Method IWorkspaceProgressTracker.putref_CancelTracker

           INPUT
            CancelTracker       : ITrackCancel*'''
        return super(IWorkspaceProgressTracker, self).putref_CancelTracker(CancelTracker)
    CancelTracker = property(get_CancelTracker, putref_CancelTracker, None)

class IDatasetEditEx(_esriGeoDatabase.IDatasetEditEx):
    _IID = uuid.UUID('60e8162b-1ae0-11d4-9fb1-00c04f6bdf0c')
    def IsBeingEdited(self):
        '''Method IDatasetEditEx.IsBeingEdited

           OUTPUTS
            IsBeingEdited       : VARIANT_BOOL*
            hrReason            : HRESULT*'''
        return super(IDatasetEditEx, self).IsBeingEdited()

class IDatasetFileStat(_esriGeoDatabase.IDatasetFileStat):
    _IID = uuid.UUID('52d4a757-df71-47e0-aab8-ee302eb7acab')
    def get_StatTime(self, dateMode):
        '''Method IDatasetFileStat.get_StatTime

           INPUT
            dateMode            : esriDatasetFileStatTimeMode

           OUTPUT
            time                : long*'''
        return super(IDatasetFileStat, self).get_StatTime(dateMode)
    def get_StatSize(self):
        '''Method IDatasetFileStat.get_StatSize

           OUTPUT
            Size                : long*'''
        return super(IDatasetFileStat, self).get_StatSize()
    def get_StatMode(self):
        '''Method IDatasetFileStat.get_StatMode

           OUTPUT
            accessMode          : esriDatasetFileStatAccessMode*'''
        return super(IDatasetFileStat, self).get_StatMode()
    StatMode = property(get_StatMode, None, None)
    StatSize = property(get_StatSize, None, None)
    StatTime = IndexProperty(get_StatTime, None)

class IDatasetFileStat2(_esriGeoDatabase.IDatasetFileStat2):
    _IID = uuid.UUID('f76d8bbb-2384-4419-948e-57ff98c77681')
    def get_StatSize64(self):
        '''Method IDatasetFileStat2.get_StatSize64

           OUTPUT
            Size64              : unsigned__int64*'''
        return super(IDatasetFileStat2, self).get_StatSize64()
    def RefreshStats(self):
        '''Method IDatasetFileStat2.RefreshStats'''
        return super(IDatasetFileStat2, self).RefreshStats()
    def get_StatTime(self, dateMode):
        '''Method IDatasetFileStat.get_StatTime (from IDatasetFileStat)

           INPUT
            dateMode            : esriDatasetFileStatTimeMode

           OUTPUT
            time                : long*'''
        return super(IDatasetFileStat2, self).get_StatTime(dateMode)
    def get_StatSize(self):
        '''Method IDatasetFileStat.get_StatSize (from IDatasetFileStat)

           OUTPUT
            Size                : long*'''
        return super(IDatasetFileStat2, self).get_StatSize()
    def get_StatMode(self):
        '''Method IDatasetFileStat.get_StatMode (from IDatasetFileStat)

           OUTPUT
            accessMode          : esriDatasetFileStatAccessMode*'''
        return super(IDatasetFileStat2, self).get_StatMode()
    StatMode = property(get_StatMode, None, None)
    StatSize = property(get_StatSize, None, None)
    StatSize64 = property(get_StatSize64, None, None)
    StatTime = IndexProperty(get_StatTime, None)

class IDatasetNameFileStat(_esriGeoDatabase.IDatasetNameFileStat):
    _IID = uuid.UUID('9db4594f-dc4b-457a-ae2e-ffea8bd8d72e')

    def __init__(self, *args, **kw):
        super(IDatasetNameFileStat, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_StatTime(self, dateMode, pTime):
        '''Method IDatasetNameFileStat.put_StatTime

           INPUTS
            dateMode            : esriDatasetFileStatTimeMode
            pTime               : long'''
        return super(IDatasetNameFileStat, self).put_StatTime(dateMode, pTime)
    def get_StatTime(self, dateMode):
        '''Method IDatasetNameFileStat.get_StatTime

           INPUT
            dateMode            : esriDatasetFileStatTimeMode

           OUTPUT
            pTime               : long*'''
        return super(IDatasetNameFileStat, self).get_StatTime(dateMode)
    def put_StatSize(self, pSize):
        '''Method IDatasetNameFileStat.put_StatSize

           INPUT
            pSize               : long'''
        return super(IDatasetNameFileStat, self).put_StatSize(pSize)
    def get_StatSize(self):
        '''Method IDatasetNameFileStat.get_StatSize

           OUTPUT
            pSize               : long*'''
        return super(IDatasetNameFileStat, self).get_StatSize()
    def put_StatMode(self, pAccessMode):
        '''Method IDatasetNameFileStat.put_StatMode

           INPUT
            pAccessMode         : esriDatasetFileStatAccessMode'''
        return super(IDatasetNameFileStat, self).put_StatMode(pAccessMode)
    def get_StatMode(self):
        '''Method IDatasetNameFileStat.get_StatMode

           OUTPUT
            pAccessMode         : esriDatasetFileStatAccessMode*'''
        return super(IDatasetNameFileStat, self).get_StatMode()
    StatMode = property(get_StatMode, put_StatMode, None)
    StatSize = property(get_StatSize, put_StatSize, None)
    StatTime = property(None, put_StatTime, None)
    StatTime = IndexProperty(get_StatTime, None)

class IDatasetNameFileStat2(_esriGeoDatabase.IDatasetNameFileStat2):
    _IID = uuid.UUID('49c5f97e-23d7-4e47-94a3-a2d300f2b50e')

    def __init__(self, *args, **kw):
        super(IDatasetNameFileStat2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_StatSize64(self, Size64):
        '''Method IDatasetNameFileStat2.put_StatSize64

           INPUT
            Size64              : unsigned__int64'''
        return super(IDatasetNameFileStat2, self).put_StatSize64(Size64)
    def get_StatSize64(self):
        '''Method IDatasetNameFileStat2.get_StatSize64

           OUTPUT
            Size64              : unsigned__int64*'''
        return super(IDatasetNameFileStat2, self).get_StatSize64()
    def RefreshStats(self):
        '''Method IDatasetNameFileStat2.RefreshStats'''
        return super(IDatasetNameFileStat2, self).RefreshStats()
    def put_StatTime(self, dateMode, pTime):
        '''Method IDatasetNameFileStat.put_StatTime (from IDatasetNameFileStat)

           INPUTS
            dateMode            : esriDatasetFileStatTimeMode
            pTime               : long'''
        return super(IDatasetNameFileStat2, self).put_StatTime(dateMode, pTime)
    def get_StatTime(self, dateMode):
        '''Method IDatasetNameFileStat.get_StatTime (from IDatasetNameFileStat)

           INPUT
            dateMode            : esriDatasetFileStatTimeMode

           OUTPUT
            pTime               : long*'''
        return super(IDatasetNameFileStat2, self).get_StatTime(dateMode)
    def put_StatSize(self, pSize):
        '''Method IDatasetNameFileStat.put_StatSize (from IDatasetNameFileStat)

           INPUT
            pSize               : long'''
        return super(IDatasetNameFileStat2, self).put_StatSize(pSize)
    def get_StatSize(self):
        '''Method IDatasetNameFileStat.get_StatSize (from IDatasetNameFileStat)

           OUTPUT
            pSize               : long*'''
        return super(IDatasetNameFileStat2, self).get_StatSize()
    def put_StatMode(self, pAccessMode):
        '''Method IDatasetNameFileStat.put_StatMode (from IDatasetNameFileStat)

           INPUT
            pAccessMode         : esriDatasetFileStatAccessMode'''
        return super(IDatasetNameFileStat2, self).put_StatMode(pAccessMode)
    def get_StatMode(self):
        '''Method IDatasetNameFileStat.get_StatMode (from IDatasetNameFileStat)

           OUTPUT
            pAccessMode         : esriDatasetFileStatAccessMode*'''
        return super(IDatasetNameFileStat2, self).get_StatMode()
    StatMode = property(get_StatMode, put_StatMode, None)
    StatSize = property(get_StatSize, put_StatSize, None)
    StatSize64 = property(get_StatSize64, put_StatSize64, None)
    StatTime = property(None, put_StatTime, None)
    StatTime = IndexProperty(get_StatTime, None)

class IDatasetNameFileSize(_esriGeoDatabase.IDatasetNameFileSize):
    _IID = uuid.UUID('62ae7f20-59e5-44af-8dba-fa4da33b6af7')
    def get_Size64(self):
        '''Method IDatasetNameFileSize.get_Size64

           OUTPUT
            Size64              : unsigned__int64*'''
        return super(IDatasetNameFileSize, self).get_Size64()
    Size64 = property(get_Size64, None, None)

class IWorkspaceEditInfo(_esriGeoDatabase.IWorkspaceEditInfo):
    _IID = uuid.UUID('995d5c91-15c6-11d2-89ed-006097aff44e')
    def get_CanEdit(self):
        '''Method IWorkspaceEditInfo.get_CanEdit

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IWorkspaceEditInfo, self).get_CanEdit()
    def get_CanUndo(self):
        '''Method IWorkspaceEditInfo.get_CanUndo

           OUTPUT
            CanUndo             : VARIANT_BOOL*'''
        return super(IWorkspaceEditInfo, self).get_CanUndo()
    def get_CanRedo(self):
        '''Method IWorkspaceEditInfo.get_CanRedo

           OUTPUT
            CanUndo             : VARIANT_BOOL*'''
        return super(IWorkspaceEditInfo, self).get_CanRedo()
    CanEdit = property(get_CanEdit, None, None)
    CanRedo = property(get_CanRedo, None, None)
    CanUndo = property(get_CanUndo, None, None)

class IWorkspaceEdit(_esriGeoDatabase.IWorkspaceEdit):
    _IID = uuid.UUID('995d5c92-15c6-11d2-89ed-006097aff44e')
    def StartEditing(self, withUndoRedo):
        '''Method IWorkspaceEdit.StartEditing

           INPUT
            withUndoRedo        : VARIANT_BOOL'''
        return super(IWorkspaceEdit, self).StartEditing(withUndoRedo)
    def StopEditing(self, saveEdits):
        '''Method IWorkspaceEdit.StopEditing

           INPUT
            saveEdits           : VARIANT_BOOL'''
        return super(IWorkspaceEdit, self).StopEditing(saveEdits)
    def IsBeingEdited(self):
        '''Method IWorkspaceEdit.IsBeingEdited

           OUTPUT
            IsBeingEdited       : VARIANT_BOOL*'''
        return super(IWorkspaceEdit, self).IsBeingEdited()
    def StartEditOperation(self):
        '''Method IWorkspaceEdit.StartEditOperation'''
        return super(IWorkspaceEdit, self).StartEditOperation()
    def StopEditOperation(self):
        '''Method IWorkspaceEdit.StopEditOperation'''
        return super(IWorkspaceEdit, self).StopEditOperation()
    def AbortEditOperation(self):
        '''Method IWorkspaceEdit.AbortEditOperation'''
        return super(IWorkspaceEdit, self).AbortEditOperation()
    def HasUndos(self):
        '''Method IWorkspaceEdit.HasUndos

           OUTPUT
            HasUndos            : VARIANT_BOOL*'''
        return super(IWorkspaceEdit, self).HasUndos()
    def UndoEditOperation(self):
        '''Method IWorkspaceEdit.UndoEditOperation'''
        return super(IWorkspaceEdit, self).UndoEditOperation()
    def HasRedos(self):
        '''Method IWorkspaceEdit.HasRedos

           OUTPUT
            HasRedos            : VARIANT_BOOL*'''
        return super(IWorkspaceEdit, self).HasRedos()
    def RedoEditOperation(self):
        '''Method IWorkspaceEdit.RedoEditOperation'''
        return super(IWorkspaceEdit, self).RedoEditOperation()
    def EnableUndoRedo(self):
        '''Method IWorkspaceEdit.EnableUndoRedo'''
        return super(IWorkspaceEdit, self).EnableUndoRedo()
    def DisableUndoRedo(self):
        '''Method IWorkspaceEdit.DisableUndoRedo'''
        return super(IWorkspaceEdit, self).DisableUndoRedo()
    def HasEdits(self):
        '''Method IWorkspaceEdit.HasEdits

           OUTPUT
            HasEdits            : VARIANT_BOOL*'''
        return super(IWorkspaceEdit, self).HasEdits()

class IMultiuserWorkspaceEdit(_esriGeoDatabase.IMultiuserWorkspaceEdit):
    _IID = uuid.UUID('861573b8-de0e-465a-90a9-1e5abd99a8b5')
    def get_MultiuserEditSessionMode(self):
        '''Method IMultiuserWorkspaceEdit.get_MultiuserEditSessionMode

           OUTPUT
            esMode              : esriMultiuserEditSessionMode*'''
        return super(IMultiuserWorkspaceEdit, self).get_MultiuserEditSessionMode()
    def SupportsMultiuserEditSessionMode(self, esMode):
        '''Method IMultiuserWorkspaceEdit.SupportsMultiuserEditSessionMode

           INPUT
            esMode              : esriMultiuserEditSessionMode

           OUTPUT
            IsSupported         : VARIANT_BOOL*'''
        return super(IMultiuserWorkspaceEdit, self).SupportsMultiuserEditSessionMode(esMode)
    def StartMultiuserEditing(self, esMode):
        '''Method IMultiuserWorkspaceEdit.StartMultiuserEditing

           INPUT
            esMode              : esriMultiuserEditSessionMode'''
        return super(IMultiuserWorkspaceEdit, self).StartMultiuserEditing(esMode)
    MultiuserEditSessionMode = property(get_MultiuserEditSessionMode, None, None)

class IWorkspaceEditControl(_esriGeoDatabase.IWorkspaceEditControl):
    _IID = uuid.UUID('17240108-a1c0-4f02-bb9a-35d970abee15')
    def SetStoreEventsRequired(self):
        '''Method IWorkspaceEditControl.SetStoreEventsRequired'''
        return super(IWorkspaceEditControl, self).SetStoreEventsRequired()

class IWorkspaceEditEvents(_esriGeoDatabase.IWorkspaceEditEvents):
    _IID = uuid.UUID('0b437962-89f9-11d4-8b5f-000000000000')
    def OnStartEditing(self, withUndoRedo):
        '''Method IWorkspaceEditEvents.OnStartEditing

           INPUT
            withUndoRedo        : VARIANT_BOOL'''
        return super(IWorkspaceEditEvents, self).OnStartEditing(withUndoRedo)
    def OnStopEditing(self, saveEdits):
        '''Method IWorkspaceEditEvents.OnStopEditing

           INPUT
            saveEdits           : VARIANT_BOOL'''
        return super(IWorkspaceEditEvents, self).OnStopEditing(saveEdits)
    def OnStartEditOperation(self):
        '''Method IWorkspaceEditEvents.OnStartEditOperation'''
        return super(IWorkspaceEditEvents, self).OnStartEditOperation()
    def OnAbortEditOperation(self):
        '''Method IWorkspaceEditEvents.OnAbortEditOperation'''
        return super(IWorkspaceEditEvents, self).OnAbortEditOperation()
    def OnStopEditOperation(self):
        '''Method IWorkspaceEditEvents.OnStopEditOperation'''
        return super(IWorkspaceEditEvents, self).OnStopEditOperation()
    def OnUndoEditOperation(self):
        '''Method IWorkspaceEditEvents.OnUndoEditOperation'''
        return super(IWorkspaceEditEvents, self).OnUndoEditOperation()
    def OnRedoEditOperation(self):
        '''Method IWorkspaceEditEvents.OnRedoEditOperation'''
        return super(IWorkspaceEditEvents, self).OnRedoEditOperation()

class IWorkspaceEditEvents2(_esriGeoDatabase.IWorkspaceEditEvents2):
    _IID = uuid.UUID('05f7628f-7875-4819-8948-6377ce8062ba')
    def OnBeginStopEditing(self, saveEdits):
        '''Method IWorkspaceEditEvents2.OnBeginStopEditing

           INPUT
            saveEdits           : VARIANT_BOOL'''
        return super(IWorkspaceEditEvents2, self).OnBeginStopEditing(saveEdits)
    def OnStartEditing(self, withUndoRedo):
        '''Method IWorkspaceEditEvents.OnStartEditing (from IWorkspaceEditEvents)

           INPUT
            withUndoRedo        : VARIANT_BOOL'''
        return super(IWorkspaceEditEvents2, self).OnStartEditing(withUndoRedo)
    def OnStopEditing(self, saveEdits):
        '''Method IWorkspaceEditEvents.OnStopEditing (from IWorkspaceEditEvents)

           INPUT
            saveEdits           : VARIANT_BOOL'''
        return super(IWorkspaceEditEvents2, self).OnStopEditing(saveEdits)
    def OnStartEditOperation(self):
        '''Method IWorkspaceEditEvents.OnStartEditOperation (from IWorkspaceEditEvents)'''
        return super(IWorkspaceEditEvents2, self).OnStartEditOperation()
    def OnAbortEditOperation(self):
        '''Method IWorkspaceEditEvents.OnAbortEditOperation (from IWorkspaceEditEvents)'''
        return super(IWorkspaceEditEvents2, self).OnAbortEditOperation()
    def OnStopEditOperation(self):
        '''Method IWorkspaceEditEvents.OnStopEditOperation (from IWorkspaceEditEvents)'''
        return super(IWorkspaceEditEvents2, self).OnStopEditOperation()
    def OnUndoEditOperation(self):
        '''Method IWorkspaceEditEvents.OnUndoEditOperation (from IWorkspaceEditEvents)'''
        return super(IWorkspaceEditEvents2, self).OnUndoEditOperation()
    def OnRedoEditOperation(self):
        '''Method IWorkspaceEditEvents.OnRedoEditOperation (from IWorkspaceEditEvents)'''
        return super(IWorkspaceEditEvents2, self).OnRedoEditOperation()

class ISpatialCacheManager(_esriGeoDatabase.ISpatialCacheManager):
    _IID = uuid.UUID('e2e4622f-55b4-11d3-9f77-00c04f6bdf0c')
    def FillCache(self, Extent):
        '''Method ISpatialCacheManager.FillCache

           INPUT
            Extent              : IEnvelope*'''
        return super(ISpatialCacheManager, self).FillCache(Extent)
    def EmptyCache(self):
        '''Method ISpatialCacheManager.EmptyCache'''
        return super(ISpatialCacheManager, self).EmptyCache()
    def get_CacheIsFull(self):
        '''Method ISpatialCacheManager.get_CacheIsFull

           OUTPUT
            IsFull              : VARIANT_BOOL*'''
        return super(ISpatialCacheManager, self).get_CacheIsFull()
    def get_CacheExtent(self):
        '''Method ISpatialCacheManager.get_CacheExtent

           OUTPUT
            envelope            : IEnvelope**'''
        return super(ISpatialCacheManager, self).get_CacheExtent()
    CacheExtent = property(get_CacheExtent, None, None)
    CacheIsFull = property(get_CacheIsFull, None, None)

class ISpatialCacheManager2(_esriGeoDatabase.ISpatialCacheManager2):
    _IID = uuid.UUID('9078f181-bb75-11d4-9feb-00c04f6bdf0c')
    def FillCacheEx(self, Extent, expansionFactor):
        '''Method ISpatialCacheManager2.FillCacheEx

           INPUTS
            Extent              : IEnvelope*
            expansionFactor     : double'''
        return super(ISpatialCacheManager2, self).FillCacheEx(Extent, expansionFactor)
    def get_CacheExpansionFactor(self):
        '''Method ISpatialCacheManager2.get_CacheExpansionFactor

           OUTPUT
            expansionFactor     : double*'''
        return super(ISpatialCacheManager2, self).get_CacheExpansionFactor()
    def FillCache(self, Extent):
        '''Method ISpatialCacheManager.FillCache (from ISpatialCacheManager)

           INPUT
            Extent              : IEnvelope*'''
        return super(ISpatialCacheManager2, self).FillCache(Extent)
    def EmptyCache(self):
        '''Method ISpatialCacheManager.EmptyCache (from ISpatialCacheManager)'''
        return super(ISpatialCacheManager2, self).EmptyCache()
    def get_CacheIsFull(self):
        '''Method ISpatialCacheManager.get_CacheIsFull (from ISpatialCacheManager)

           OUTPUT
            IsFull              : VARIANT_BOOL*'''
        return super(ISpatialCacheManager2, self).get_CacheIsFull()
    def get_CacheExtent(self):
        '''Method ISpatialCacheManager.get_CacheExtent (from ISpatialCacheManager)

           OUTPUT
            envelope            : IEnvelope**'''
        return super(ISpatialCacheManager2, self).get_CacheExtent()
    CacheExpansionFactor = property(get_CacheExpansionFactor, None, None)
    CacheExtent = property(get_CacheExtent, None, None)
    CacheIsFull = property(get_CacheIsFull, None, None)

class ISpatialCacheManager3(_esriGeoDatabase.ISpatialCacheManager3):
    _IID = uuid.UUID('74d077b7-4f42-439d-8aca-2433cbd15916')
    def FillCacheWithCancel(self, Extent, expansionFactor, cancelTraker):
        '''Method ISpatialCacheManager3.FillCacheWithCancel

           INPUTS
            Extent              : IEnvelope*
            expansionFactor     : double
            cancelTraker        : ITrackCancel*'''
        return super(ISpatialCacheManager3, self).FillCacheWithCancel(Extent, expansionFactor, cancelTraker)
    def FillCacheEx(self, Extent, expansionFactor):
        '''Method ISpatialCacheManager2.FillCacheEx (from ISpatialCacheManager2)

           INPUTS
            Extent              : IEnvelope*
            expansionFactor     : double'''
        return super(ISpatialCacheManager3, self).FillCacheEx(Extent, expansionFactor)
    def get_CacheExpansionFactor(self):
        '''Method ISpatialCacheManager2.get_CacheExpansionFactor (from ISpatialCacheManager2)

           OUTPUT
            expansionFactor     : double*'''
        return super(ISpatialCacheManager3, self).get_CacheExpansionFactor()
    def FillCache(self, Extent):
        '''Method ISpatialCacheManager.FillCache (from ISpatialCacheManager)

           INPUT
            Extent              : IEnvelope*'''
        return super(ISpatialCacheManager3, self).FillCache(Extent)
    def EmptyCache(self):
        '''Method ISpatialCacheManager.EmptyCache (from ISpatialCacheManager)'''
        return super(ISpatialCacheManager3, self).EmptyCache()
    def get_CacheIsFull(self):
        '''Method ISpatialCacheManager.get_CacheIsFull (from ISpatialCacheManager)

           OUTPUT
            IsFull              : VARIANT_BOOL*'''
        return super(ISpatialCacheManager3, self).get_CacheIsFull()
    def get_CacheExtent(self):
        '''Method ISpatialCacheManager.get_CacheExtent (from ISpatialCacheManager)

           OUTPUT
            envelope            : IEnvelope**'''
        return super(ISpatialCacheManager3, self).get_CacheExtent()
    CacheExpansionFactor = property(get_CacheExpansionFactor, None, None)
    CacheExtent = property(get_CacheExtent, None, None)
    CacheIsFull = property(get_CacheIsFull, None, None)

class IGeodataXform(_esriGeoDatabase.IGeodataXform):
    _IID = uuid.UUID('5e6cf525-4e74-419b-946f-7da9bfdf815d')

    def __init__(self, *args, **kw):
        super(IGeodataXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IGeodataXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IGeodataXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IGeodataXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IGeodataXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IGeodataXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IGeodataXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IGeodataXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IGeodataXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGeoDataset2(_esriGeoDatabase.IGeoDataset2):
    _IID = uuid.UUID('8fefccb6-9519-4700-9e01-3450106a11a4')
    def get_GeodataXform(self):
        '''Method IGeoDataset2.get_GeodataXform

           OUTPUT
            xform               : IGeodataXform**'''
        return super(IGeoDataset2, self).get_GeodataXform()
    def get_NativeSpatialReference(self):
        '''Method IGeoDataset2.get_NativeSpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IGeoDataset2, self).get_NativeSpatialReference()
    def get_NativeExtent(self):
        '''Method IGeoDataset2.get_NativeExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGeoDataset2, self).get_NativeExtent()
    def get_SpatialReference(self):
        '''Method IGeoDataset.get_SpatialReference (from IGeoDataset)

           OUTPUT
            spref               : ISpatialReference**'''
        return super(IGeoDataset2, self).get_SpatialReference()
    def get_Extent(self):
        '''Method IGeoDataset.get_Extent (from IGeoDataset)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IGeoDataset2, self).get_Extent()
    Extent = property(get_Extent, None, None)
    GeodataXform = property(get_GeodataXform, None, None)
    NativeExtent = property(get_NativeExtent, None, None)
    NativeSpatialReference = property(get_NativeSpatialReference, None, None)
    SpatialReference = property(get_SpatialReference, None, None)

class IGeoDatasetSchemaEdit(_esriGeoDatabase.IGeoDatasetSchemaEdit):
    _IID = uuid.UUID('6b267c02-28cc-11d3-9f67-00c04f6bdf0c')
    def get_CanAlterSpatialReference(self):
        '''Method IGeoDatasetSchemaEdit.get_CanAlterSpatialReference

           OUTPUT
            canAlter            : VARIANT_BOOL*'''
        return super(IGeoDatasetSchemaEdit, self).get_CanAlterSpatialReference()
    def AlterSpatialReference(self, SpatialReference):
        '''Method IGeoDatasetSchemaEdit.AlterSpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IGeoDatasetSchemaEdit, self).AlterSpatialReference(SpatialReference)
    CanAlterSpatialReference = property(get_CanAlterSpatialReference, None, None)

class IGeoDatasetSchemaEdit2(_esriGeoDatabase.IGeoDatasetSchemaEdit2):
    _IID = uuid.UUID('0a6a2faa-047d-4792-8732-d766d496beca')
    def get_CanAlterGeodataXform(self):
        '''Method IGeoDatasetSchemaEdit2.get_CanAlterGeodataXform

           OUTPUT
            canAlter            : VARIANT_BOOL*'''
        return super(IGeoDatasetSchemaEdit2, self).get_CanAlterGeodataXform()
    def AlterGeodataXform(self, xform):
        '''Method IGeoDatasetSchemaEdit2.AlterGeodataXform

           INPUT
            xform               : IGeodataXform*'''
        return super(IGeoDatasetSchemaEdit2, self).AlterGeodataXform(xform)
    def AlterResolution(self, xyResolution, zResolution, mResolution):
        '''Method IGeoDatasetSchemaEdit2.AlterResolution

           INPUTS
            xyResolution        : double
            zResolution         : double
            mResolution         : double'''
        return super(IGeoDatasetSchemaEdit2, self).AlterResolution(xyResolution, zResolution, mResolution)
    def ConstructResolutions(self, SpatialReference, numberRequested):
        '''Method IGeoDatasetSchemaEdit2.ConstructResolutions

           INPUTS
            SpatialReference    : ISpatialReference*
            numberRequested     : long

           OUTPUTS
            defaultXYResolutionIndex: long*
            xyResolutions       : IDoubleArray**
            zResolutions        : IDoubleArray**
            mResolutions        : IDoubleArray**'''
        return super(IGeoDatasetSchemaEdit2, self).ConstructResolutions(SpatialReference, numberRequested)
    def get_CanAlterSpatialReference(self):
        '''Method IGeoDatasetSchemaEdit.get_CanAlterSpatialReference (from IGeoDatasetSchemaEdit)

           OUTPUT
            canAlter            : VARIANT_BOOL*'''
        return super(IGeoDatasetSchemaEdit2, self).get_CanAlterSpatialReference()
    def AlterSpatialReference(self, SpatialReference):
        '''Method IGeoDatasetSchemaEdit.AlterSpatialReference (from IGeoDatasetSchemaEdit)

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IGeoDatasetSchemaEdit2, self).AlterSpatialReference(SpatialReference)
    CanAlterGeodataXform = property(get_CanAlterGeodataXform, None, None)
    CanAlterSpatialReference = property(get_CanAlterSpatialReference, None, None)

class IHistoricalMarker(_esriGeoDatabase.IHistoricalMarker):
    _IID = uuid.UUID('95aac432-f6c5-4407-b983-14525aff4170')
    def get_Name(self):
        '''Method IHistoricalMarker.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IHistoricalMarker, self).get_Name()
    def get_TimeStamp(self):
        '''Method IHistoricalMarker.get_TimeStamp

           OUTPUT
            tstamp              : VARIANT*'''
        return super(IHistoricalMarker, self).get_TimeStamp()
    Name = property(get_Name, None, None)
    TimeStamp = property(get_TimeStamp, None, None)

class IEnumHistoricalMarker(_esriGeoDatabase.IEnumHistoricalMarker):
    _IID = uuid.UUID('42925c57-bf17-4870-b0a9-3ae76a50de6d')
    def Next(self):
        '''Method IEnumHistoricalMarker.Next

           OUTPUT
            marker              : IHistoricalMarker**'''
        return super(IEnumHistoricalMarker, self).Next()
    def __iter__(self):
        try:
            super(IEnumHistoricalMarker, self).Reset()
            val = super(IEnumHistoricalMarker, self).Next()
            while val:
                yield val
                val = super(IEnumHistoricalMarker, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumHistoricalMarker.Reset'''
        return super(IEnumHistoricalMarker, self).Reset()

class IHistoricalVersion(_esriGeoDatabase.IHistoricalVersion):
    _IID = uuid.UUID('151d2cf7-e20b-407d-9e03-98bd449aa4c5')
    def get_TimeStamp(self):
        '''Method IHistoricalVersion.get_TimeStamp

           OUTPUT
            tstamp              : VARIANT*'''
        return super(IHistoricalVersion, self).get_TimeStamp()
    TimeStamp = property(get_TimeStamp, None, None)

class IHistoricalWorkspace(_esriGeoDatabase.IHistoricalWorkspace):
    _IID = uuid.UUID('39c92bb1-28e4-4333-8fbc-4e32fb50ae63')
    def get_DefaultMarkerName(self):
        '''Method IHistoricalWorkspace.get_DefaultMarkerName

           OUTPUT
            DefaultMarkerName   : BSTR*'''
        return super(IHistoricalWorkspace, self).get_DefaultMarkerName()
    def get_HistoricalMarkers(self):
        '''Method IHistoricalWorkspace.get_HistoricalMarkers

           OUTPUT
            markerEnum          : IEnumHistoricalMarker**'''
        return super(IHistoricalWorkspace, self).get_HistoricalMarkers()
    def AddHistoricalMarker(self, Name, tstamp):
        '''Method IHistoricalWorkspace.AddHistoricalMarker

           INPUTS
            Name                : BSTR
            tstamp              : VARIANT

           OUTPUT
            marker              : IHistoricalMarker**'''
        return super(IHistoricalWorkspace, self).AddHistoricalMarker(Name, tstamp)
    def RemoveHistoricalMarker(self, Name):
        '''Method IHistoricalWorkspace.RemoveHistoricalMarker

           INPUT
            Name                : BSTR'''
        return super(IHistoricalWorkspace, self).RemoveHistoricalMarker(Name)
    def FindHistoricalVersionByTimeStamp(self, tstamp):
        '''Method IHistoricalWorkspace.FindHistoricalVersionByTimeStamp

           INPUT
            tstamp              : VARIANT

           OUTPUT
            historicalVersion   : IHistoricalVersion**'''
        return super(IHistoricalWorkspace, self).FindHistoricalVersionByTimeStamp(tstamp)
    def FindHistoricalVersionByName(self, historicalMarkerName):
        '''Method IHistoricalWorkspace.FindHistoricalVersionByName

           INPUT
            historicalMarkerName: BSTR

           OUTPUT
            historicalVersion   : IHistoricalVersion**'''
        return super(IHistoricalWorkspace, self).FindHistoricalVersionByName(historicalMarkerName)
    DefaultMarkerName = property(get_DefaultMarkerName, None, None)
    HistoricalMarkers = property(get_HistoricalMarkers, None, None)

class IArchivableObject(_esriGeoDatabase.IArchivableObject):
    _IID = uuid.UUID('5a6d0742-cd6b-4502-9251-af9cb7acad51')
    def get_IsArchiving(self):
        '''Method IArchivableObject.get_IsArchiving

           OUTPUT
            IsArchiving         : VARIANT_BOOL*'''
        return super(IArchivableObject, self).get_IsArchiving()
    def EnableArchiving(self, archiveRegistrationInfos, SeedTimeStamp, traverseRelationships):
        '''Method IArchivableObject.EnableArchiving

           INPUTS
            archiveRegistrationInfos: ISet*
            SeedTimeStamp       : VARIANT
            traverseRelationships: VARIANT_BOOL'''
        return super(IArchivableObject, self).EnableArchiving(archiveRegistrationInfos, SeedTimeStamp, traverseRelationships)
    def DisableArchiving(self, deleteArchive, traverseRelationships):
        '''Method IArchivableObject.DisableArchiving

           INPUTS
            deleteArchive       : VARIANT_BOOL
            traverseRelationships: VARIANT_BOOL'''
        return super(IArchivableObject, self).DisableArchiving(deleteArchive, traverseRelationships)
    IsArchiving = property(get_IsArchiving, None, None)

class IArchiveRegistrationInfo(_esriGeoDatabase.IArchiveRegistrationInfo):
    _IID = uuid.UUID('3112504b-a3c5-4729-ac3a-e2abcd29e260')

    def __init__(self, *args, **kw):
        super(IArchiveRegistrationInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DatasetName(self):
        '''Method IArchiveRegistrationInfo.get_DatasetName

           OUTPUT
            Name                : BSTR*'''
        return super(IArchiveRegistrationInfo, self).get_DatasetName()
    def put_DatasetName(self, Name):
        '''Method IArchiveRegistrationInfo.put_DatasetName

           INPUT
            Name                : BSTR'''
        return super(IArchiveRegistrationInfo, self).put_DatasetName(Name)
    def get_ArchiveTableName(self):
        '''Method IArchiveRegistrationInfo.get_ArchiveTableName

           OUTPUT
            ArchiveTableName    : BSTR*'''
        return super(IArchiveRegistrationInfo, self).get_ArchiveTableName()
    def put_ArchiveTableName(self, ArchiveTableName):
        '''Method IArchiveRegistrationInfo.put_ArchiveTableName

           INPUT
            ArchiveTableName    : BSTR'''
        return super(IArchiveRegistrationInfo, self).put_ArchiveTableName(ArchiveTableName)
    def get_FromFieldName(self):
        '''Method IArchiveRegistrationInfo.get_FromFieldName

           OUTPUT
            fromField           : BSTR*'''
        return super(IArchiveRegistrationInfo, self).get_FromFieldName()
    def put_FromFieldName(self, fromField):
        '''Method IArchiveRegistrationInfo.put_FromFieldName

           INPUT
            fromField           : BSTR'''
        return super(IArchiveRegistrationInfo, self).put_FromFieldName(fromField)
    def get_ToFieldName(self):
        '''Method IArchiveRegistrationInfo.get_ToFieldName

           OUTPUT
            toField             : BSTR*'''
        return super(IArchiveRegistrationInfo, self).get_ToFieldName()
    def put_ToFieldName(self, toField):
        '''Method IArchiveRegistrationInfo.put_ToFieldName

           INPUT
            toField             : BSTR'''
        return super(IArchiveRegistrationInfo, self).put_ToFieldName(toField)
    def get_OIDFieldName(self):
        '''Method IArchiveRegistrationInfo.get_OIDFieldName

           OUTPUT
            oidField            : BSTR*'''
        return super(IArchiveRegistrationInfo, self).get_OIDFieldName()
    def put_OIDFieldName(self, oidField):
        '''Method IArchiveRegistrationInfo.put_OIDFieldName

           INPUT
            oidField            : BSTR'''
        return super(IArchiveRegistrationInfo, self).put_OIDFieldName(oidField)
    def get_SeedTimeStamp(self):
        '''Method IArchiveRegistrationInfo.get_SeedTimeStamp

           OUTPUT
            seedStamp           : VARIANT*'''
        return super(IArchiveRegistrationInfo, self).get_SeedTimeStamp()
    ArchiveTableName = property(get_ArchiveTableName, put_ArchiveTableName, None)
    DatasetName = property(get_DatasetName, put_DatasetName, None)
    FromFieldName = property(get_FromFieldName, put_FromFieldName, None)
    OIDFieldName = property(get_OIDFieldName, put_OIDFieldName, None)
    SeedTimeStamp = property(get_SeedTimeStamp, None, None)
    ToFieldName = property(get_ToFieldName, put_ToFieldName, None)

class IFileDataLock(_esriGeoDatabase.IFileDataLock):
    _IID = uuid.UUID('adf6d66d-a47a-11d4-9f87-00c04f6bdf0e')
    def AcquireFileLock(self, LockType):
        '''Method IFileDataLock.AcquireFileLock

           INPUT
            LockType            : esriLockMgrType'''
        return super(IFileDataLock, self).AcquireFileLock(LockType)
    def ReleaseFileLock(self):
        '''Method IFileDataLock.ReleaseFileLock'''
        return super(IFileDataLock, self).ReleaseFileLock()
    def ChangeFileLock(self, LockType):
        '''Method IFileDataLock.ChangeFileLock

           INPUT
            LockType            : esriLockMgrType'''
        return super(IFileDataLock, self).ChangeFileLock(LockType)
    def GetLockType(self):
        '''Method IFileDataLock.GetLockType

           OUTPUT
            LockType            : esriLockMgrType*'''
        return super(IFileDataLock, self).GetLockType()

class IDatabaseCompact(_esriGeoDatabase.IDatabaseCompact):
    _IID = uuid.UUID('660214d1-7c1b-11d3-80ea-00c04f686238')
    def Compact(self):
        '''Method IDatabaseCompact.Compact'''
        return super(IDatabaseCompact, self).Compact()
    def CanCompact(self):
        '''Method IDatabaseCompact.CanCompact

           OUTPUT
            CanCompact          : VARIANT_BOOL*'''
        return super(IDatabaseCompact, self).CanCompact()

class ISetDefaultConnectionInfo(_esriGeoDatabase.ISetDefaultConnectionInfo):
    _IID = uuid.UUID('094a1c7d-90ae-11d3-80ef-00c04f686238')
    def SetParameters(self, server, instance, user, password, versName):
        '''Method ISetDefaultConnectionInfo.SetParameters

           INPUTS
            server              : BSTR
            instance            : BSTR
            user                : BSTR
            password            : BSTR
            versName            : BSTR'''
        return super(ISetDefaultConnectionInfo, self).SetParameters(server, instance, user, password, versName)

class ISetDefaultConnectionInfo2(_esriGeoDatabase.ISetDefaultConnectionInfo2):
    _IID = uuid.UUID('518570d2-ef66-4b3b-b0bb-fcac077814df')
    def ClearParameters(self, server, instance):
        '''Method ISetDefaultConnectionInfo2.ClearParameters

           INPUTS
            server              : BSTR
            instance            : BSTR'''
        return super(ISetDefaultConnectionInfo2, self).ClearParameters(server, instance)
    def SetParameters(self, server, instance, user, password, versName):
        '''Method ISetDefaultConnectionInfo.SetParameters (from ISetDefaultConnectionInfo)

           INPUTS
            server              : BSTR
            instance            : BSTR
            user                : BSTR
            password            : BSTR
            versName            : BSTR'''
        return super(ISetDefaultConnectionInfo2, self).SetParameters(server, instance, user, password, versName)

class ISetDefaultConnectionInfo3(_esriGeoDatabase.ISetDefaultConnectionInfo3):
    _IID = uuid.UUID('fc5b76d5-5ca4-4a0e-a998-fe383e73d6c0')
    def SetParameters3(self, server, instance, authenticationMode, UserName, password, VersionName, historicalInfo):
        '''Method ISetDefaultConnectionInfo3.SetParameters3

           INPUTS
            server              : BSTR
            instance            : BSTR
            authenticationMode  : BSTR
            UserName            : BSTR
            password            : BSTR
            VersionName         : BSTR
            historicalInfo      : VARIANT'''
        return super(ISetDefaultConnectionInfo3, self).SetParameters3(server, instance, authenticationMode, UserName, password, VersionName, historicalInfo)
    def ClearParameters3(self, server, instance, authenticationMode):
        '''Method ISetDefaultConnectionInfo3.ClearParameters3

           INPUTS
            server              : BSTR
            instance            : BSTR
            authenticationMode  : BSTR'''
        return super(ISetDefaultConnectionInfo3, self).ClearParameters3(server, instance, authenticationMode)
    def ClearParameters(self, server, instance):
        '''Method ISetDefaultConnectionInfo2.ClearParameters (from ISetDefaultConnectionInfo2)

           INPUTS
            server              : BSTR
            instance            : BSTR'''
        return super(ISetDefaultConnectionInfo3, self).ClearParameters(server, instance)
    def SetParameters(self, server, instance, user, password, versName):
        '''Method ISetDefaultConnectionInfo.SetParameters (from ISetDefaultConnectionInfo)

           INPUTS
            server              : BSTR
            instance            : BSTR
            user                : BSTR
            password            : BSTR
            versName            : BSTR'''
        return super(ISetDefaultConnectionInfo3, self).SetParameters(server, instance, user, password, versName)

class ISqlDefaultConnectionInfo(_esriGeoDatabase.ISqlDefaultConnectionInfo):
    _IID = uuid.UUID('177a8e41-d923-4996-99fe-d87d7e1833cd')
    def SetParameters(self, dbclient, instance, authenticationMode, user, password):
        '''Method ISqlDefaultConnectionInfo.SetParameters

           INPUTS
            dbclient            : BSTR
            instance            : BSTR
            authenticationMode  : BSTR
            user                : BSTR
            password            : BSTR'''
        return super(ISqlDefaultConnectionInfo, self).SetParameters(dbclient, instance, authenticationMode, user, password)
    def ClearParameters(self, dbclient, instance, authenticationMode):
        '''Method ISqlDefaultConnectionInfo.ClearParameters

           INPUTS
            dbclient            : BSTR
            instance            : BSTR
            authenticationMode  : BSTR'''
        return super(ISqlDefaultConnectionInfo, self).ClearParameters(dbclient, instance, authenticationMode)

class INativeType(_esriGeoDatabase.INativeType):
    _IID = uuid.UUID('bdc57556-f689-4149-a526-b49dea3f443f')
    def get_TypeID(self):
        '''Method INativeType.get_TypeID

           OUTPUT
            TypeID              : IUID**'''
        return super(INativeType, self).get_TypeID()
    def get_Description(self):
        '''Method INativeType.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(INativeType, self).get_Description()
    Description = property(get_Description, None, None)
    TypeID = property(get_TypeID, None, None)

class INativeTypeSearch(_esriGeoDatabase.INativeTypeSearch):
    _IID = uuid.UUID('12b123e8-895d-4d2f-a7b0-c7c07cf195e0')
    def get_ExcludeChildren(self):
        '''Method INativeTypeSearch.get_ExcludeChildren

           OUTPUT
            ExcludeChildren     : VARIANT_BOOL*'''
        return super(INativeTypeSearch, self).get_ExcludeChildren()
    ExcludeChildren = property(get_ExcludeChildren, None, None)

class INativeTypeInfo(_esriGeoDatabase.INativeTypeInfo):
    _IID = uuid.UUID('906db24a-f0ad-4ca5-871b-5466e54fab80')
    def get_NativeType(self):
        '''Method INativeTypeInfo.get_NativeType

           OUTPUT
            NativeType          : INativeType**'''
        return super(INativeTypeInfo, self).get_NativeType()
    NativeType = property(get_NativeType, None, None)

class IComplexNativeType(_esriGeoDatabase.IComplexNativeType):
    _IID = uuid.UUID('d425f87a-5b3a-4200-a050-380084cbedf0')
    def AddChild(self, child):
        '''Method IComplexNativeType.AddChild

           INPUT
            child               : INativeType*'''
        return super(IComplexNativeType, self).AddChild(child)
    def GetChild(self, Index):
        '''Method IComplexNativeType.GetChild

           INPUT
            Index               : int

           OUTPUT
            child               : INativeType**'''
        return super(IComplexNativeType, self).GetChild(Index)
    def get_NumChildren(self):
        '''Method IComplexNativeType.get_NumChildren

           OUTPUT
            pNumChildren        : int*'''
        return super(IComplexNativeType, self).get_NumChildren()
    NumChildren = property(get_NumChildren, None, None)

class IEnumSpatialReferenceInfo(_esriGeoDatabase.IEnumSpatialReferenceInfo):
    _IID = uuid.UUID('5f345e5f-4251-11d4-8145-00c04f686238')
    def Next(self):
        '''Method IEnumSpatialReferenceInfo.Next

           OUTPUTS
            Srid                : long*
            info                : ISpatialReference**'''
        return super(IEnumSpatialReferenceInfo, self).Next()
    def __iter__(self):
        try:
            super(IEnumSpatialReferenceInfo, self).Reset()
            val = super(IEnumSpatialReferenceInfo, self).Next()
            while any(val):
                yield val
                val = super(IEnumSpatialReferenceInfo, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumSpatialReferenceInfo.Reset'''
        return super(IEnumSpatialReferenceInfo, self).Reset()

class IWorkspaceSpatialReferenceInfo(_esriGeoDatabase.IWorkspaceSpatialReferenceInfo):
    _IID = uuid.UUID('89890719-42d8-11d4-8145-00c04f686238')
    def get_SpatialReferenceInfo(self):
        '''Method IWorkspaceSpatialReferenceInfo.get_SpatialReferenceInfo

           OUTPUT
            spatialReferences   : IEnumSpatialReferenceInfo**'''
        return super(IWorkspaceSpatialReferenceInfo, self).get_SpatialReferenceInfo()
    SpatialReferenceInfo = property(get_SpatialReferenceInfo, None, None)

class IConfigurationParameter(_esriGeoDatabase.IConfigurationParameter):
    _IID = uuid.UUID('32bd0a83-25e5-4f24-b81b-5ebea2dfe35a')
    def get_Name(self):
        '''Method IConfigurationParameter.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IConfigurationParameter, self).get_Name()
    def get_ConfigurationString(self):
        '''Method IConfigurationParameter.get_ConfigurationString

           OUTPUT
            str                 : BSTR*'''
        return super(IConfigurationParameter, self).get_ConfigurationString()
    ConfigurationString = property(get_ConfigurationString, None, None)
    Name = property(get_Name, None, None)

class IEnumConfigurationParameter(_esriGeoDatabase.IEnumConfigurationParameter):
    _IID = uuid.UUID('75b1cca3-ee77-4a5f-8fcd-1775d6f9497b')
    def Next(self):
        '''Method IEnumConfigurationParameter.Next

           OUTPUT
            param               : IConfigurationParameter**'''
        return super(IEnumConfigurationParameter, self).Next()
    def __iter__(self):
        try:
            super(IEnumConfigurationParameter, self).Reset()
            val = super(IEnumConfigurationParameter, self).Next()
            while val:
                yield val
                val = super(IEnumConfigurationParameter, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumConfigurationParameter.Reset'''
        return super(IEnumConfigurationParameter, self).Reset()

class IConfigurationKeyword(_esriGeoDatabase.IConfigurationKeyword):
    _IID = uuid.UUID('2be5da4c-7a75-4cc9-aa73-c0320b89846f')
    def get_KeywordType(self):
        '''Method IConfigurationKeyword.get_KeywordType

           OUTPUT
            KeywordType         : esriConfigurationKeywordType*'''
        return super(IConfigurationKeyword, self).get_KeywordType()
    def get_Name(self):
        '''Method IConfigurationKeyword.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IConfigurationKeyword, self).get_Name()
    def get_Description(self):
        '''Method IConfigurationKeyword.get_Description

           OUTPUT
            desc                : BSTR*'''
        return super(IConfigurationKeyword, self).get_Description()
    def get_Comments(self):
        '''Method IConfigurationKeyword.get_Comments

           OUTPUT
            Comments            : BSTR*'''
        return super(IConfigurationKeyword, self).get_Comments()
    def get_ConfigurationParameters(self):
        '''Method IConfigurationKeyword.get_ConfigurationParameters

           OUTPUT
            params              : IEnumConfigurationParameter**'''
        return super(IConfigurationKeyword, self).get_ConfigurationParameters()
    Comments = property(get_Comments, None, None)
    ConfigurationParameters = property(get_ConfigurationParameters, None, None)
    Description = property(get_Description, None, None)
    KeywordType = property(get_KeywordType, None, None)
    Name = property(get_Name, None, None)

class IEnumConfigurationKeyword(_esriGeoDatabase.IEnumConfigurationKeyword):
    _IID = uuid.UUID('b055bbd8-de08-49cd-a589-fffd22112cd5')
    def Next(self):
        '''Method IEnumConfigurationKeyword.Next

           OUTPUT
            keyword             : IConfigurationKeyword**'''
        return super(IEnumConfigurationKeyword, self).Next()
    def __iter__(self):
        try:
            super(IEnumConfigurationKeyword, self).Reset()
            val = super(IEnumConfigurationKeyword, self).Next()
            while val:
                yield val
                val = super(IEnumConfigurationKeyword, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumConfigurationKeyword.Reset'''
        return super(IEnumConfigurationKeyword, self).Reset()

class IConfigurationKeyword2(_esriGeoDatabase.IConfigurationKeyword2):
    _IID = uuid.UUID('bbe02adf-ae75-4ea4-be73-fba83cc3ee10')

    def __init__(self, *args, **kw):
        super(IConfigurationKeyword2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_KeywordType(self, _arg1):
        '''Method IConfigurationKeyword2.put_KeywordType

           INPUT
            _arg1               : esriConfigurationKeywordType'''
        return super(IConfigurationKeyword2, self).put_KeywordType(_arg1)
    def put_Name(self, _arg1):
        '''Method IConfigurationKeyword2.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IConfigurationKeyword2, self).put_Name(_arg1)
    def put_Description(self, _arg1):
        '''Method IConfigurationKeyword2.put_Description

           INPUT
            _arg1               : BSTR'''
        return super(IConfigurationKeyword2, self).put_Description(_arg1)
    def put_Comments(self, _arg1):
        '''Method IConfigurationKeyword2.put_Comments

           INPUT
            _arg1               : BSTR'''
        return super(IConfigurationKeyword2, self).put_Comments(_arg1)
    def get_KeywordType(self):
        '''Method IConfigurationKeyword.get_KeywordType (from IConfigurationKeyword)

           OUTPUT
            KeywordType         : esriConfigurationKeywordType*'''
        return super(IConfigurationKeyword2, self).get_KeywordType()
    def get_Name(self):
        '''Method IConfigurationKeyword.get_Name (from IConfigurationKeyword)

           OUTPUT
            Name                : BSTR*'''
        return super(IConfigurationKeyword2, self).get_Name()
    def get_Description(self):
        '''Method IConfigurationKeyword.get_Description (from IConfigurationKeyword)

           OUTPUT
            desc                : BSTR*'''
        return super(IConfigurationKeyword2, self).get_Description()
    def get_Comments(self):
        '''Method IConfigurationKeyword.get_Comments (from IConfigurationKeyword)

           OUTPUT
            Comments            : BSTR*'''
        return super(IConfigurationKeyword2, self).get_Comments()
    def get_ConfigurationParameters(self):
        '''Method IConfigurationKeyword.get_ConfigurationParameters (from IConfigurationKeyword)

           OUTPUT
            params              : IEnumConfigurationParameter**'''
        return super(IConfigurationKeyword2, self).get_ConfigurationParameters()
    Comments = property(get_Comments, put_Comments, None)
    ConfigurationParameters = property(get_ConfigurationParameters, None, None)
    Description = property(get_Description, put_Description, None)
    KeywordType = property(get_KeywordType, put_KeywordType, None)
    Name = property(get_Name, put_Name, None)

class IConfigurationParameter2(_esriGeoDatabase.IConfigurationParameter2):
    _IID = uuid.UUID('4eac0cf1-ee2a-405c-a18a-c588dc53a0e7')

    def __init__(self, *args, **kw):
        super(IConfigurationParameter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IConfigurationParameter2.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IConfigurationParameter2, self).put_Name(_arg1)
    def put_ConfigurationString(self, _arg1):
        '''Method IConfigurationParameter2.put_ConfigurationString

           INPUT
            _arg1               : BSTR'''
        return super(IConfigurationParameter2, self).put_ConfigurationString(_arg1)
    def get_Name(self):
        '''Method IConfigurationParameter.get_Name (from IConfigurationParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(IConfigurationParameter2, self).get_Name()
    def get_ConfigurationString(self):
        '''Method IConfigurationParameter.get_ConfigurationString (from IConfigurationParameter)

           OUTPUT
            str                 : BSTR*'''
        return super(IConfigurationParameter2, self).get_ConfigurationString()
    ConfigurationString = property(get_ConfigurationString, put_ConfigurationString, None)
    Name = property(get_Name, put_Name, None)

class IWorkspaceConfiguration(_esriGeoDatabase.IWorkspaceConfiguration):
    _IID = uuid.UUID('9e8f5c35-7888-4df9-862c-9dd74eff9062')
    def get_ConfigurationKeywords(self):
        '''Method IWorkspaceConfiguration.get_ConfigurationKeywords

           OUTPUT
            keywords            : IEnumConfigurationKeyword**'''
        return super(IWorkspaceConfiguration, self).get_ConfigurationKeywords()
    ConfigurationKeywords = property(get_ConfigurationKeywords, None, None)

class IXMLIndexTag(_esriGeoDatabase.IXMLIndexTag):
    _IID = uuid.UUID('8eddbd6f-4ec7-488b-8e28-fe253e7e3965')

    def __init__(self, *args, **kw):
        super(IXMLIndexTag, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IXMLIndexTag.get_Name

           OUTPUT
            indexName           : BSTR*'''
        return super(IXMLIndexTag, self).get_Name()
    def put_Name(self, indexName):
        '''Method IXMLIndexTag.put_Name

           INPUT
            indexName           : BSTR'''
        return super(IXMLIndexTag, self).put_Name(indexName)
    def get_DataType(self):
        '''Method IXMLIndexTag.get_DataType

           OUTPUT
            DataType            : esriXMLIndexTagDataType*'''
        return super(IXMLIndexTag, self).get_DataType()
    def put_DataType(self, DataType):
        '''Method IXMLIndexTag.put_DataType

           INPUT
            DataType            : esriXMLIndexTagDataType'''
        return super(IXMLIndexTag, self).put_DataType(DataType)
    def get_LocationAlias(self):
        '''Method IXMLIndexTag.get_LocationAlias

           OUTPUT
            Alias               : long*'''
        return super(IXMLIndexTag, self).get_LocationAlias()
    def put_LocationAlias(self, Alias):
        '''Method IXMLIndexTag.put_LocationAlias

           INPUT
            Alias               : long'''
        return super(IXMLIndexTag, self).put_LocationAlias(Alias)
    def get_Description(self):
        '''Method IXMLIndexTag.get_Description

           OUTPUT
            tagDescription      : BSTR*'''
        return super(IXMLIndexTag, self).get_Description()
    def put_Description(self, tagDescription):
        '''Method IXMLIndexTag.put_Description

           INPUT
            tagDescription      : BSTR'''
        return super(IXMLIndexTag, self).put_Description(tagDescription)
    DataType = property(get_DataType, put_DataType, None)
    Description = property(get_Description, put_Description, None)
    LocationAlias = property(get_LocationAlias, put_LocationAlias, None)
    Name = property(get_Name, put_Name, None)

class IXMLIndexTags(_esriGeoDatabase.IXMLIndexTags):
    _IID = uuid.UUID('22715d9c-b744-453b-84e2-7cbea383a70f')
    def get_TagCount(self):
        '''Method IXMLIndexTags.get_TagCount

           OUTPUT
            Count               : long*'''
        return super(IXMLIndexTags, self).get_TagCount()
    def get_Tag(self, tagIndex):
        '''Method IXMLIndexTags.get_Tag

           INPUT
            tagIndex            : long

           OUTPUT
            Tag                 : IXMLIndexTag**'''
        return super(IXMLIndexTags, self).get_Tag(tagIndex)
    def Find(self, tagName):
        '''Method IXMLIndexTags.Find

           INPUT
            tagName             : BSTR

           OUTPUT
            tagIndex            : long*'''
        return super(IXMLIndexTags, self).Find(tagName)
    def Add(self, Tag):
        '''Method IXMLIndexTags.Add

           INPUT
            Tag                 : IXMLIndexTag*'''
        return super(IXMLIndexTags, self).Add(Tag)
    def Remove(self, Tag):
        '''Method IXMLIndexTags.Remove

           INPUT
            Tag                 : IXMLIndexTag*'''
        return super(IXMLIndexTags, self).Remove(Tag)
    def RemoveAll(self):
        '''Method IXMLIndexTags.RemoveAll'''
        return super(IXMLIndexTags, self).RemoveAll()
    TagCount = property(get_TagCount, None, None)
    Tag = IndexProperty(get_Tag, None)

class IXMLIndexTemplate(_esriGeoDatabase.IXMLIndexTemplate):
    _IID = uuid.UUID('5c2b7178-119e-4d2d-bad6-57769f9a2eec')

    def __init__(self, *args, **kw):
        super(IXMLIndexTemplate, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IXMLIndexTemplate.get_Name

           OUTPUT
            templateName        : BSTR*'''
        return super(IXMLIndexTemplate, self).get_Name()
    def put_Name(self, templateName):
        '''Method IXMLIndexTemplate.put_Name

           INPUT
            templateName        : BSTR'''
        return super(IXMLIndexTemplate, self).put_Name(templateName)
    def get_IncludedTags(self):
        '''Method IXMLIndexTemplate.get_IncludedTags

           OUTPUT
            Tags                : IXMLIndexTags**'''
        return super(IXMLIndexTemplate, self).get_IncludedTags()
    def putref_IncludedTags(self, Tags):
        '''Method IXMLIndexTemplate.putref_IncludedTags

           INPUT
            Tags                : IXMLIndexTags*'''
        return super(IXMLIndexTemplate, self).putref_IncludedTags(Tags)
    def get_ExcludedTags(self):
        '''Method IXMLIndexTemplate.get_ExcludedTags

           OUTPUT
            Tags                : IXMLIndexTags**'''
        return super(IXMLIndexTemplate, self).get_ExcludedTags()
    def putref_ExcludedTags(self, Tags):
        '''Method IXMLIndexTemplate.putref_ExcludedTags

           INPUT
            Tags                : IXMLIndexTags*'''
        return super(IXMLIndexTemplate, self).putref_ExcludedTags(Tags)
    def get_Description(self):
        '''Method IXMLIndexTemplate.get_Description

           OUTPUT
            templateDescription : BSTR*'''
        return super(IXMLIndexTemplate, self).get_Description()
    def put_Description(self, templateDescription):
        '''Method IXMLIndexTemplate.put_Description

           INPUT
            templateDescription : BSTR'''
        return super(IXMLIndexTemplate, self).put_Description(templateDescription)
    Description = property(get_Description, put_Description, None)
    ExcludedTags = property(get_ExcludedTags, putref_ExcludedTags, None)
    IncludedTags = property(get_IncludedTags, putref_IncludedTags, None)
    Name = property(get_Name, put_Name, None)

class IEnumXMLIndexTemplate(_esriGeoDatabase.IEnumXMLIndexTemplate):
    _IID = uuid.UUID('1c36dcb3-46a3-4fb9-afa6-ae22799f25dd')
    def Next(self):
        '''Method IEnumXMLIndexTemplate.Next

           OUTPUT
            nextTemplate        : IXMLIndexTemplate**'''
        return super(IEnumXMLIndexTemplate, self).Next()
    def __iter__(self):
        try:
            super(IEnumXMLIndexTemplate, self).Reset()
            val = super(IEnumXMLIndexTemplate, self).Next()
            while val:
                yield val
                val = super(IEnumXMLIndexTemplate, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumXMLIndexTemplate.Reset'''
        return super(IEnumXMLIndexTemplate, self).Reset()

class IXMLIndex(_esriGeoDatabase.IXMLIndex):
    _IID = uuid.UUID('5240ceaa-366d-42ed-97fe-61dfb3c20248')
    def get_XMLIndexType(self):
        '''Method IXMLIndex.get_XMLIndexType

           OUTPUT
            XMLIndexType        : esriXMLIndexType*'''
        return super(IXMLIndex, self).get_XMLIndexType()
    def get_IncludedTags(self):
        '''Method IXMLIndex.get_IncludedTags

           OUTPUT
            Tags                : IXMLIndexTags**'''
        return super(IXMLIndex, self).get_IncludedTags()
    def get_ExcludedTags(self):
        '''Method IXMLIndex.get_ExcludedTags

           OUTPUT
            Tags                : IXMLIndexTags**'''
        return super(IXMLIndex, self).get_ExcludedTags()
    def get_Description(self):
        '''Method IXMLIndex.get_Description

           OUTPUT
            indexDescription    : BSTR*'''
        return super(IXMLIndex, self).get_Description()
    Description = property(get_Description, None, None)
    ExcludedTags = property(get_ExcludedTags, None, None)
    IncludedTags = property(get_IncludedTags, None, None)
    XMLIndexType = property(get_XMLIndexType, None, None)

class IXMLIndexEdit(_esriGeoDatabase.IXMLIndexEdit):
    _IID = uuid.UUID('537fc360-cc9b-4671-b155-07d141fe8d99')

    def __init__(self, *args, **kw):
        super(IXMLIndexEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_XMLIndexType(self, _arg1):
        '''Method IXMLIndexEdit.put_XMLIndexType

           INPUT
            _arg1               : esriXMLIndexType'''
        return super(IXMLIndexEdit, self).put_XMLIndexType(_arg1)
    def putref_IncludedTags(self, _arg1):
        '''Method IXMLIndexEdit.putref_IncludedTags

           INPUT
            _arg1               : IXMLIndexTags*'''
        return super(IXMLIndexEdit, self).putref_IncludedTags(_arg1)
    def putref_ExcludedTags(self, _arg1):
        '''Method IXMLIndexEdit.putref_ExcludedTags

           INPUT
            _arg1               : IXMLIndexTags*'''
        return super(IXMLIndexEdit, self).putref_ExcludedTags(_arg1)
    def put_Description(self, _arg1):
        '''Method IXMLIndexEdit.put_Description

           INPUT
            _arg1               : BSTR'''
        return super(IXMLIndexEdit, self).put_Description(_arg1)
    def get_XMLIndexType(self):
        '''Method IXMLIndex.get_XMLIndexType (from IXMLIndex)

           OUTPUT
            XMLIndexType        : esriXMLIndexType*'''
        return super(IXMLIndexEdit, self).get_XMLIndexType()
    def get_IncludedTags(self):
        '''Method IXMLIndex.get_IncludedTags (from IXMLIndex)

           OUTPUT
            Tags                : IXMLIndexTags**'''
        return super(IXMLIndexEdit, self).get_IncludedTags()
    def get_ExcludedTags(self):
        '''Method IXMLIndex.get_ExcludedTags (from IXMLIndex)

           OUTPUT
            Tags                : IXMLIndexTags**'''
        return super(IXMLIndexEdit, self).get_ExcludedTags()
    def get_Description(self):
        '''Method IXMLIndex.get_Description (from IXMLIndex)

           OUTPUT
            indexDescription    : BSTR*'''
        return super(IXMLIndexEdit, self).get_Description()
    Description = property(get_Description, put_Description, None)
    ExcludedTags = property(get_ExcludedTags, putref_ExcludedTags, None)
    IncludedTags = property(get_IncludedTags, putref_IncludedTags, None)
    XMLIndexType = property(get_XMLIndexType, put_XMLIndexType, None)

class IXMLIndexTemplateManage(_esriGeoDatabase.IXMLIndexTemplateManage):
    _IID = uuid.UUID('e33c6591-6510-4528-8f93-0e19f424a38a')
    def get_Templates(self):
        '''Method IXMLIndexTemplateManage.get_Templates

           OUTPUT
            templateEnum        : IEnumXMLIndexTemplate**'''
        return super(IXMLIndexTemplateManage, self).get_Templates()
    def InstallTemplate(self, newTemplate):
        '''Method IXMLIndexTemplateManage.InstallTemplate

           INPUT
            newTemplate         : IXMLIndexTemplate*'''
        return super(IXMLIndexTemplateManage, self).InstallTemplate(newTemplate)
    def UninstallTemplate(self, existingTemplate):
        '''Method IXMLIndexTemplateManage.UninstallTemplate

           INPUT
            existingTemplate    : IXMLIndexTemplate*'''
        return super(IXMLIndexTemplateManage, self).UninstallTemplate(existingTemplate)
    def PopulateIndexTags(self, sourceTemplate, Index):
        '''Method IXMLIndexTemplateManage.PopulateIndexTags

           INPUTS
            sourceTemplate      : IXMLIndexTemplate*
            Index               : IXMLIndex*'''
        return super(IXMLIndexTemplateManage, self).PopulateIndexTags(sourceTemplate, Index)
    Templates = property(get_Templates, None, None)

class IXMLIndexUtil(_esriGeoDatabase.IXMLIndexUtil):
    _IID = uuid.UUID('15b08bc9-9c06-47a2-830f-d4fff1270131')
    def LoadTags(self, xml, Tags):
        '''Method IXMLIndexUtil.LoadTags

           INPUTS
            xml                 : BSTR
            Tags                : IXMLIndexTags*'''
        return super(IXMLIndexUtil, self).LoadTags(xml, Tags)
    def SynchronizeTextIndex(self, ClassName, xmlFieldName):
        '''Method IXMLIndexUtil.SynchronizeTextIndex

           INPUTS
            ClassName           : BSTR
            xmlFieldName        : BSTR'''
        return super(IXMLIndexUtil, self).SynchronizeTextIndex(ClassName, xmlFieldName)

class IRule(_esriGeoDatabase.IRule):
    _IID = uuid.UUID('236f4de4-4761-11d2-9932-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Category(self):
        '''Method IRule.get_Category

           OUTPUT
            groupBitmap         : long*'''
        return super(IRule, self).get_Category()
    def put_Category(self, groupBitmap):
        '''Method IRule.put_Category

           INPUT
            groupBitmap         : long'''
        return super(IRule, self).put_Category(groupBitmap)
    def get_Helpstring(self):
        '''Method IRule.get_Helpstring

           OUTPUT
            Helpstring          : BSTR*'''
        return super(IRule, self).get_Helpstring()
    def put_Helpstring(self, Helpstring):
        '''Method IRule.put_Helpstring

           INPUT
            Helpstring          : BSTR'''
        return super(IRule, self).put_Helpstring(Helpstring)
    def get_ID(self):
        '''Method IRule.get_ID

           OUTPUT
            ID                  : long*'''
        return super(IRule, self).get_ID()
    def put_ID(self, ID):
        '''Method IRule.put_ID

           INPUT
            ID                  : long'''
        return super(IRule, self).put_ID(ID)
    def get_Type(self):
        '''Method IRule.get_Type

           OUTPUT
            Type                : esriRuleType*'''
        return super(IRule, self).get_Type()
    Category = property(get_Category, put_Category, None)
    Helpstring = property(get_Helpstring, put_Helpstring, None)
    ID = property(get_ID, put_ID, None)
    Type = property(get_Type, None, None)

class IEnumRule(_esriGeoDatabase.IEnumRule):
    _IID = uuid.UUID('76f9849e-84c3-11d2-ab61-000000000000')
    def Next(self):
        '''Method IEnumRule.Next

           OUTPUT
            Rule                : IRule**'''
        return super(IEnumRule, self).Next()
    def __iter__(self):
        try:
            super(IEnumRule, self).Reset()
            val = super(IEnumRule, self).Next()
            while val:
                yield val
                val = super(IEnumRule, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumRule.Reset'''
        return super(IEnumRule, self).Reset()

class IFeatureBuffer(_esriGeoDatabase.IFeatureBuffer):
    _IID = uuid.UUID('956a4e53-2482-11d1-89d8-006097aff44e')

    def __init__(self, *args, **kw):
        super(IFeatureBuffer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Shape(self):
        '''Method IFeatureBuffer.get_Shape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IFeatureBuffer, self).get_Shape()
    def putref_Shape(self, Shape):
        '''Method IFeatureBuffer.putref_Shape

           INPUT
            Shape               : IGeometry*'''
        return super(IFeatureBuffer, self).putref_Shape(Shape)
    def get_Value(self, Index):
        '''Method IRowBuffer.get_Value (from IRowBuffer)

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IFeatureBuffer, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method IRowBuffer.put_Value (from IRowBuffer)

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IFeatureBuffer, self).put_Value(Index, Value)
    def get_Fields(self):
        '''Method IRowBuffer.get_Fields (from IRowBuffer)

           OUTPUT
            Fields              : IFields**'''
        return super(IFeatureBuffer, self).get_Fields()
    Fields = property(get_Fields, None, None)
    Shape = property(get_Shape, putref_Shape, None)
    Value = property(None, put_Value, None)
    Value = IndexProperty(get_Value, None)

class IFeatureWorkspaceSchemaEdit(_esriGeoDatabase.IFeatureWorkspaceSchemaEdit):
    _IID = uuid.UUID('74996427-6627-11d3-80d3-00c04f686238')
    def AlterInstanceCLSID(self, Name, InstanceCLSID):
        '''Method IFeatureWorkspaceSchemaEdit.AlterInstanceCLSID

           INPUTS
            Name                : BSTR
            InstanceCLSID       : IUID*'''
        return super(IFeatureWorkspaceSchemaEdit, self).AlterInstanceCLSID(Name, InstanceCLSID)
    def AlterClassExtensionCLSID(self, Name, ClassExtensionCLSID, classExtensionProperties):
        '''Method IFeatureWorkspaceSchemaEdit.AlterClassExtensionCLSID

           INPUTS
            Name                : BSTR
            ClassExtensionCLSID : IUID*
            classExtensionProperties: IPropertySet*'''
        return super(IFeatureWorkspaceSchemaEdit, self).AlterClassExtensionCLSID(Name, ClassExtensionCLSID, classExtensionProperties)

class IGeodatabaseRelease(_esriGeoDatabase.IGeodatabaseRelease):
    _IID = uuid.UUID('fe8f2fec-85ae-11d4-a0ca-00c04f6bdd84')
    def get_CanUpgrade(self):
        '''Method IGeodatabaseRelease.get_CanUpgrade

           OUTPUT
            CanUpgrade          : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease, self).get_CanUpgrade()
    def get_CurrentRelease(self):
        '''Method IGeodatabaseRelease.get_CurrentRelease

           OUTPUT
            isCurrent           : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease, self).get_CurrentRelease()
    def get_MajorVersion(self):
        '''Method IGeodatabaseRelease.get_MajorVersion

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease, self).get_MajorVersion()
    def get_MinorVersion(self):
        '''Method IGeodatabaseRelease.get_MinorVersion

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease, self).get_MinorVersion()
    def get_BugfixVersion(self):
        '''Method IGeodatabaseRelease.get_BugfixVersion

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease, self).get_BugfixVersion()
    def Upgrade(self):
        '''Method IGeodatabaseRelease.Upgrade'''
        return super(IGeodatabaseRelease, self).Upgrade()
    BugfixVersion = property(get_BugfixVersion, None, None)
    CanUpgrade = property(get_CanUpgrade, None, None)
    CurrentRelease = property(get_CurrentRelease, None, None)
    MajorVersion = property(get_MajorVersion, None, None)
    MinorVersion = property(get_MinorVersion, None, None)

class IEnumDomain(_esriGeoDatabase.IEnumDomain):
    _IID = uuid.UUID('8917197e-8884-11d2-aabb-00c04fa37b82')
    def Next(self):
        '''Method IEnumDomain.Next

           OUTPUT
            Domain              : IDomain**'''
        return super(IEnumDomain, self).Next()
    def __iter__(self):
        try:
            super(IEnumDomain, self).Reset()
            val = super(IEnumDomain, self).Next()
            while val:
                yield val
                val = super(IEnumDomain, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumDomain.Reset'''
        return super(IEnumDomain, self).Reset()

class IWorkspaceDomains(_esriGeoDatabase.IWorkspaceDomains):
    _IID = uuid.UUID('d80957f0-8883-11d2-aabb-00c04fa37b82')
    def AddDomain(self, Domain):
        '''Method IWorkspaceDomains.AddDomain

           INPUT
            Domain              : IDomain*

           OUTPUT
            DomainID            : long*'''
        return super(IWorkspaceDomains, self).AddDomain(Domain)
    def get_CanDeleteDomain(self, DomainName):
        '''Method IWorkspaceDomains.get_CanDeleteDomain

           INPUT
            DomainName          : BSTR

           OUTPUT
            deletable           : VARIANT_BOOL*'''
        return super(IWorkspaceDomains, self).get_CanDeleteDomain(DomainName)
    def DeleteDomain(self, DomainName):
        '''Method IWorkspaceDomains.DeleteDomain

           INPUT
            DomainName          : BSTR'''
        return super(IWorkspaceDomains, self).DeleteDomain(DomainName)
    def get_Domains(self):
        '''Method IWorkspaceDomains.get_Domains

           OUTPUT
            Domains             : IEnumDomain**'''
        return super(IWorkspaceDomains, self).get_Domains()
    def get_DomainByName(self, DomainName):
        '''Method IWorkspaceDomains.get_DomainByName

           INPUT
            DomainName          : BSTR

           OUTPUT
            Domain              : IDomain**'''
        return super(IWorkspaceDomains, self).get_DomainByName(DomainName)
    def get_DomainsByFieldType(self, Type):
        '''Method IWorkspaceDomains.get_DomainsByFieldType

           INPUT
            Type                : esriFieldType

           OUTPUT
            Domains             : IEnumDomain**'''
        return super(IWorkspaceDomains, self).get_DomainsByFieldType(Type)
    Domains = property(get_Domains, None, None)
    CanDeleteDomain = IndexProperty(get_CanDeleteDomain, None)
    DomainByName = IndexProperty(get_DomainByName, None)
    DomainsByFieldType = IndexProperty(get_DomainsByFieldType, None)

class IWorkspaceDomains2(_esriGeoDatabase.IWorkspaceDomains2):
    _IID = uuid.UUID('56a5e6d4-01c6-11d4-a057-00c04f6bdd84')
    def AlterDomain(self, Domain):
        '''Method IWorkspaceDomains2.AlterDomain

           INPUT
            Domain              : IDomain*'''
        return super(IWorkspaceDomains2, self).AlterDomain(Domain)
    def AddDomain(self, Domain):
        '''Method IWorkspaceDomains.AddDomain (from IWorkspaceDomains)

           INPUT
            Domain              : IDomain*

           OUTPUT
            DomainID            : long*'''
        return super(IWorkspaceDomains2, self).AddDomain(Domain)
    def get_CanDeleteDomain(self, DomainName):
        '''Method IWorkspaceDomains.get_CanDeleteDomain (from IWorkspaceDomains)

           INPUT
            DomainName          : BSTR

           OUTPUT
            deletable           : VARIANT_BOOL*'''
        return super(IWorkspaceDomains2, self).get_CanDeleteDomain(DomainName)
    def DeleteDomain(self, DomainName):
        '''Method IWorkspaceDomains.DeleteDomain (from IWorkspaceDomains)

           INPUT
            DomainName          : BSTR'''
        return super(IWorkspaceDomains2, self).DeleteDomain(DomainName)
    def get_Domains(self):
        '''Method IWorkspaceDomains.get_Domains (from IWorkspaceDomains)

           OUTPUT
            Domains             : IEnumDomain**'''
        return super(IWorkspaceDomains2, self).get_Domains()
    def get_DomainByName(self, DomainName):
        '''Method IWorkspaceDomains.get_DomainByName (from IWorkspaceDomains)

           INPUT
            DomainName          : BSTR

           OUTPUT
            Domain              : IDomain**'''
        return super(IWorkspaceDomains2, self).get_DomainByName(DomainName)
    def get_DomainsByFieldType(self, Type):
        '''Method IWorkspaceDomains.get_DomainsByFieldType (from IWorkspaceDomains)

           INPUT
            Type                : esriFieldType

           OUTPUT
            Domains             : IEnumDomain**'''
        return super(IWorkspaceDomains2, self).get_DomainsByFieldType(Type)
    Domains = property(get_Domains, None, None)
    CanDeleteDomain = IndexProperty(get_CanDeleteDomain, None)
    DomainByName = IndexProperty(get_DomainByName, None)
    DomainsByFieldType = IndexProperty(get_DomainsByFieldType, None)

class IWorkspaceDomains3(_esriGeoDatabase.IWorkspaceDomains3):
    _IID = uuid.UUID('7fd9b83c-76c0-4998-b9d3-afe9600b5d36')
    def AlterDomainWithName(self, Domain, oldDomainName):
        '''Method IWorkspaceDomains3.AlterDomainWithName

           INPUTS
            Domain              : IDomain*
            oldDomainName       : BSTR'''
        return super(IWorkspaceDomains3, self).AlterDomainWithName(Domain, oldDomainName)
    def AlterDomain(self, Domain):
        '''Method IWorkspaceDomains2.AlterDomain (from IWorkspaceDomains2)

           INPUT
            Domain              : IDomain*'''
        return super(IWorkspaceDomains3, self).AlterDomain(Domain)
    def AddDomain(self, Domain):
        '''Method IWorkspaceDomains.AddDomain (from IWorkspaceDomains)

           INPUT
            Domain              : IDomain*

           OUTPUT
            DomainID            : long*'''
        return super(IWorkspaceDomains3, self).AddDomain(Domain)
    def get_CanDeleteDomain(self, DomainName):
        '''Method IWorkspaceDomains.get_CanDeleteDomain (from IWorkspaceDomains)

           INPUT
            DomainName          : BSTR

           OUTPUT
            deletable           : VARIANT_BOOL*'''
        return super(IWorkspaceDomains3, self).get_CanDeleteDomain(DomainName)
    def DeleteDomain(self, DomainName):
        '''Method IWorkspaceDomains.DeleteDomain (from IWorkspaceDomains)

           INPUT
            DomainName          : BSTR'''
        return super(IWorkspaceDomains3, self).DeleteDomain(DomainName)
    def get_Domains(self):
        '''Method IWorkspaceDomains.get_Domains (from IWorkspaceDomains)

           OUTPUT
            Domains             : IEnumDomain**'''
        return super(IWorkspaceDomains3, self).get_Domains()
    def get_DomainByName(self, DomainName):
        '''Method IWorkspaceDomains.get_DomainByName (from IWorkspaceDomains)

           INPUT
            DomainName          : BSTR

           OUTPUT
            Domain              : IDomain**'''
        return super(IWorkspaceDomains3, self).get_DomainByName(DomainName)
    def get_DomainsByFieldType(self, Type):
        '''Method IWorkspaceDomains.get_DomainsByFieldType (from IWorkspaceDomains)

           INPUT
            Type                : esriFieldType

           OUTPUT
            Domains             : IEnumDomain**'''
        return super(IWorkspaceDomains3, self).get_DomainsByFieldType(Type)
    Domains = property(get_Domains, None, None)
    CanDeleteDomain = IndexProperty(get_CanDeleteDomain, None)
    DomainByName = IndexProperty(get_DomainByName, None)
    DomainsByFieldType = IndexProperty(get_DomainsByFieldType, None)

class IPnt(_esriGeoDatabase.IPnt):
    _IID = uuid.UUID('55614793-3490-11d3-a627-0008c7d3af56')

    def __init__(self, *args, **kw):
        super(IPnt, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_X(self):
        '''Method IPnt.get_X

           OUTPUT
            val                 : double*'''
        return super(IPnt, self).get_X()
    def put_X(self, val):
        '''Method IPnt.put_X

           INPUT
            val                 : double'''
        return super(IPnt, self).put_X(val)
    def get_Y(self):
        '''Method IPnt.get_Y

           OUTPUT
            val                 : double*'''
        return super(IPnt, self).get_Y()
    def put_Y(self, val):
        '''Method IPnt.put_Y

           INPUT
            val                 : double'''
        return super(IPnt, self).put_Y(val)
    def SetCoords(self, X, Y):
        '''Method IPnt.SetCoords

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IPnt, self).SetCoords(X, Y)
    def Set2Point(self, env):
        '''Method IPnt.Set2Point

           INPUT
            env                 : IPoint*'''
        return super(IPnt, self).Set2Point(env)
    def Convert2Point(self, env):
        '''Method IPnt.Convert2Point

           INPUT
            env                 : IPoint*'''
        return super(IPnt, self).Convert2Point(env)
    X = property(get_X, put_X, None)
    Y = property(get_Y, put_Y, None)

class IRasterStorageDef(_esriGeoDatabase.IRasterStorageDef):
    _IID = uuid.UUID('30b9828a-85a6-4228-a7a4-7afb8a9842cc')

    def __init__(self, *args, **kw):
        super(IRasterStorageDef, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TileWidth(self, Width):
        '''Method IRasterStorageDef.put_TileWidth

           INPUT
            Width               : long'''
        return super(IRasterStorageDef, self).put_TileWidth(Width)
    def get_TileWidth(self):
        '''Method IRasterStorageDef.get_TileWidth

           OUTPUT
            Width               : long*'''
        return super(IRasterStorageDef, self).get_TileWidth()
    def put_TileHeight(self, Height):
        '''Method IRasterStorageDef.put_TileHeight

           INPUT
            Height              : long'''
        return super(IRasterStorageDef, self).put_TileHeight(Height)
    def get_TileHeight(self):
        '''Method IRasterStorageDef.get_TileHeight

           OUTPUT
            Height              : long*'''
        return super(IRasterStorageDef, self).get_TileHeight()
    def put_PyramidResampleType(self, method):
        '''Method IRasterStorageDef.put_PyramidResampleType

           INPUT
            method              : rstResamplingTypes'''
        return super(IRasterStorageDef, self).put_PyramidResampleType(method)
    def get_PyramidResampleType(self):
        '''Method IRasterStorageDef.get_PyramidResampleType

           OUTPUT
            method              : rstResamplingTypes*'''
        return super(IRasterStorageDef, self).get_PyramidResampleType()
    def put_PyramidLevel(self, level):
        '''Method IRasterStorageDef.put_PyramidLevel

           INPUT
            level               : long'''
        return super(IRasterStorageDef, self).put_PyramidLevel(level)
    def get_PyramidLevel(self):
        '''Method IRasterStorageDef.get_PyramidLevel

           OUTPUT
            level               : long*'''
        return super(IRasterStorageDef, self).get_PyramidLevel()
    def put_CompressionType(self, Type):
        '''Method IRasterStorageDef.put_CompressionType

           INPUT
            Type                : esriRasterCompressionType'''
        return super(IRasterStorageDef, self).put_CompressionType(Type)
    def get_CompressionType(self):
        '''Method IRasterStorageDef.get_CompressionType

           OUTPUT
            Type                : esriRasterCompressionType*'''
        return super(IRasterStorageDef, self).get_CompressionType()
    def put_CompressionQuality(self, Value):
        '''Method IRasterStorageDef.put_CompressionQuality

           INPUT
            Value               : long'''
        return super(IRasterStorageDef, self).put_CompressionQuality(Value)
    def get_CompressionQuality(self):
        '''Method IRasterStorageDef.get_CompressionQuality

           OUTPUT
            Value               : long*'''
        return super(IRasterStorageDef, self).get_CompressionQuality()
    def putref_Origin(self, Origin):
        '''Method IRasterStorageDef.putref_Origin

           INPUT
            Origin              : IPoint*'''
        return super(IRasterStorageDef, self).putref_Origin(Origin)
    def get_Origin(self):
        '''Method IRasterStorageDef.get_Origin

           OUTPUT
            Origin              : IPoint**'''
        return super(IRasterStorageDef, self).get_Origin()
    def putref_CellSize(self, CellSize):
        '''Method IRasterStorageDef.putref_CellSize

           INPUT
            CellSize            : IPnt*'''
        return super(IRasterStorageDef, self).putref_CellSize(CellSize)
    def get_CellSize(self):
        '''Method IRasterStorageDef.get_CellSize

           OUTPUT
            CellSize            : IPnt**'''
        return super(IRasterStorageDef, self).get_CellSize()
    CellSize = property(get_CellSize, putref_CellSize, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    Origin = property(get_Origin, putref_Origin, None)
    PyramidLevel = property(get_PyramidLevel, put_PyramidLevel, None)
    PyramidResampleType = property(get_PyramidResampleType, put_PyramidResampleType, None)
    TileHeight = property(get_TileHeight, put_TileHeight, None)
    TileWidth = property(get_TileWidth, put_TileWidth, None)

class IRasterDef(_esriGeoDatabase.IRasterDef):
    _IID = uuid.UUID('cdba994f-8f18-4abe-8a39-502bed07265e')

    def __init__(self, *args, **kw):
        super(IRasterDef, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Description(self, descrption):
        '''Method IRasterDef.put_Description

           INPUT
            descrption          : BSTR'''
        return super(IRasterDef, self).put_Description(descrption)
    def get_Description(self):
        '''Method IRasterDef.get_Description

           OUTPUT
            descrption          : BSTR*'''
        return super(IRasterDef, self).get_Description()
    def get_SpatialReference(self):
        '''Method IRasterDef.get_SpatialReference

           OUTPUT
            spref               : ISpatialReference**'''
        return super(IRasterDef, self).get_SpatialReference()
    def putref_SpatialReference(self, spref):
        '''Method IRasterDef.putref_SpatialReference

           INPUT
            spref               : ISpatialReference*'''
        return super(IRasterDef, self).putref_SpatialReference(spref)
    def get_IsManaged(self):
        '''Method IRasterDef.get_IsManaged

           OUTPUT
            IsManaged           : VARIANT_BOOL*'''
        return super(IRasterDef, self).get_IsManaged()
    def put_IsManaged(self, IsManaged):
        '''Method IRasterDef.put_IsManaged

           INPUT
            IsManaged           : VARIANT_BOOL'''
        return super(IRasterDef, self).put_IsManaged(IsManaged)
    def get_IsRasterDataset(self):
        '''Method IRasterDef.get_IsRasterDataset

           OUTPUT
            IsRasterDataset     : VARIANT_BOOL*'''
        return super(IRasterDef, self).get_IsRasterDataset()
    def put_IsRasterDataset(self, IsRasterDataset):
        '''Method IRasterDef.put_IsRasterDataset

           INPUT
            IsRasterDataset     : VARIANT_BOOL'''
        return super(IRasterDef, self).put_IsRasterDataset(IsRasterDataset)
    Description = property(get_Description, put_Description, None)
    IsManaged = property(get_IsManaged, put_IsManaged, None)
    IsRasterDataset = property(get_IsRasterDataset, put_IsRasterDataset, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IPixelBlock(_esriGeoDatabase.IPixelBlock):
    _IID = uuid.UUID('169bafe0-40f6-11d2-9cfa-00a0249480f0')

    def __init__(self, *args, **kw):
        super(IPixelBlock, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Planes(self):
        '''Method IPixelBlock.get_Planes

           OUTPUT
            val                 : long*'''
        return super(IPixelBlock, self).get_Planes()
    def get_Width(self):
        '''Method IPixelBlock.get_Width

           OUTPUT
            val                 : long*'''
        return super(IPixelBlock, self).get_Width()
    def get_Height(self):
        '''Method IPixelBlock.get_Height

           OUTPUT
            val                 : long*'''
        return super(IPixelBlock, self).get_Height()
    def get_PixelType(self, plane):
        '''Method IPixelBlock.get_PixelType

           INPUT
            plane               : long

           OUTPUT
            val                 : rstPixelType*'''
        return super(IPixelBlock, self).get_PixelType(plane)
    def put_PixelType(self, plane, val):
        '''Method IPixelBlock.put_PixelType

           INPUTS
            plane               : long
            val                 : rstPixelType'''
        return super(IPixelBlock, self).put_PixelType(plane, val)
    def get_BytesPerPixel(self):
        '''Method IPixelBlock.get_BytesPerPixel

           OUTPUT
            val                 : long*'''
        return super(IPixelBlock, self).get_BytesPerPixel()
    def get_SafeArray(self, plane):
        '''Method IPixelBlock.get_SafeArray

           INPUT
            plane               : long

           OUTPUT
            val                 : VARIANT*'''
        return super(IPixelBlock, self).get_SafeArray(plane)
    def put_SafeArray(self, plane, val):
        '''Method IPixelBlock.put_SafeArray

           INPUTS
            plane               : long
            val                 : VARIANT'''
        return super(IPixelBlock, self).put_SafeArray(plane, val)
    def GetVal(self, plane, X, Y):
        '''Method IPixelBlock.GetVal

           INPUTS
            plane               : long
            X                   : long
            Y                   : long

           OUTPUT
            val                 : VARIANT*'''
        return super(IPixelBlock, self).GetVal(plane, X, Y)
    BytesPerPixel = property(get_BytesPerPixel, None, None)
    Height = property(get_Height, None, None)
    PixelType = property(None, put_PixelType, None)
    Planes = property(get_Planes, None, None)
    SafeArray = property(None, put_SafeArray, None)
    Width = property(get_Width, None, None)
    PixelType = IndexProperty(get_PixelType, None)
    SafeArray = IndexProperty(get_SafeArray, None)

class IRasterCursor(_esriGeoDatabase.IRasterCursor):
    _IID = uuid.UUID('3a625c22-a707-11d2-8e30-00a0249480f0')
    def get_TopLeft(self):
        '''Method IRasterCursor.get_TopLeft

           OUTPUT
            val                 : IPnt**'''
        return super(IRasterCursor, self).get_TopLeft()
    def get_PixelBlock(self):
        '''Method IRasterCursor.get_PixelBlock

           OUTPUT
            val                 : IPixelBlock**'''
        return super(IRasterCursor, self).get_PixelBlock()
    def Next(self):
        '''Method IRasterCursor.Next

           OUTPUT
            not_finished        : VARIANT_BOOL*'''
        return super(IRasterCursor, self).Next()
    def __iter__(self):
        try:
            super(IRasterCursor, self).Reset()
            val = super(IRasterCursor, self).Next()
            while val:
                yield val
                val = super(IRasterCursor, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IRasterCursor.Reset'''
        return super(IRasterCursor, self).Reset()
    PixelBlock = property(get_PixelBlock, None, None)
    TopLeft = property(get_TopLeft, None, None)

class IRaster(_esriGeoDatabase.IRaster):
    _IID = uuid.UUID('aeec7d31-1533-11d2-8d25-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRaster, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Read(self, tlc, block):
        '''Method IRaster.Read

           INPUTS
            tlc                 : IPnt*
            block               : IPixelBlock*'''
        return super(IRaster, self).Read(tlc, block)
    def CreatePixelBlock(self, Size):
        '''Method IRaster.CreatePixelBlock

           INPUT
            Size                : IPnt*

           OUTPUT
            pxlblk              : IPixelBlock**'''
        return super(IRaster, self).CreatePixelBlock(Size)
    def CreateCursor(self):
        '''Method IRaster.CreateCursor

           OUTPUT
            Cursor              : IRasterCursor**'''
        return super(IRaster, self).CreateCursor()
    def get_ResampleMethod(self):
        '''Method IRaster.get_ResampleMethod

           OUTPUT
            val                 : rstResamplingTypes*'''
        return super(IRaster, self).get_ResampleMethod()
    def put_ResampleMethod(self, val):
        '''Method IRaster.put_ResampleMethod

           INPUT
            val                 : rstResamplingTypes'''
        return super(IRaster, self).put_ResampleMethod(val)
    ResampleMethod = property(get_ResampleMethod, put_ResampleMethod, None)

class IRasterCatalog(_esriGeoDatabase.IRasterCatalog):
    _IID = uuid.UUID('ba56286b-9344-4e5c-8eee-119583764885')
    def get_RasterFieldName(self):
        '''Method IRasterCatalog.get_RasterFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IRasterCatalog, self).get_RasterFieldName()
    def get_RasterFieldIndex(self):
        '''Method IRasterCatalog.get_RasterFieldIndex

           OUTPUT
            Index               : long*'''
        return super(IRasterCatalog, self).get_RasterFieldIndex()
    def get_NameFieldIndex(self):
        '''Method IRasterCatalog.get_NameFieldIndex

           OUTPUT
            Index               : long*'''
        return super(IRasterCatalog, self).get_NameFieldIndex()
    def get_RasterSpatialReference(self):
        '''Method IRasterCatalog.get_RasterSpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IRasterCatalog, self).get_RasterSpatialReference()
    def get_CanAlterRasterSpatialReference(self):
        '''Method IRasterCatalog.get_CanAlterRasterSpatialReference

           OUTPUT
            canAlter            : VARIANT_BOOL*'''
        return super(IRasterCatalog, self).get_CanAlterRasterSpatialReference()
    def AlterRasterSpatialReference(self, SpatialReference):
        '''Method IRasterCatalog.AlterRasterSpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IRasterCatalog, self).AlterRasterSpatialReference(SpatialReference)
    def get_IsRasterDataset(self):
        '''Method IRasterCatalog.get_IsRasterDataset

           OUTPUT
            IsRasterDataset     : VARIANT_BOOL*'''
        return super(IRasterCatalog, self).get_IsRasterDataset()
    CanAlterRasterSpatialReference = property(get_CanAlterRasterSpatialReference, None, None)
    IsRasterDataset = property(get_IsRasterDataset, None, None)
    NameFieldIndex = property(get_NameFieldIndex, None, None)
    RasterFieldIndex = property(get_RasterFieldIndex, None, None)
    RasterFieldName = property(get_RasterFieldName, None, None)
    RasterSpatialReference = property(get_RasterSpatialReference, None, None)

class IReplicaDataset(_esriGeoDatabase.IReplicaDataset):
    _IID = uuid.UUID('4e087148-2c4f-452f-bff0-88c67d3efb15')
    def get_Name(self):
        '''Method IReplicaDataset.get_Name

           OUTPUT
            rName               : BSTR*'''
        return super(IReplicaDataset, self).get_Name()
    def get_Type(self):
        '''Method IReplicaDataset.get_Type

           OUTPUT
            DatasetType         : esriDatasetType*'''
        return super(IReplicaDataset, self).get_Type()
    def get_DatasetID(self):
        '''Method IReplicaDataset.get_DatasetID

           OUTPUT
            DatasetID           : long*'''
        return super(IReplicaDataset, self).get_DatasetID()
    def get_ParentOwner(self):
        '''Method IReplicaDataset.get_ParentOwner

           OUTPUT
            dsParentOwner       : BSTR*'''
        return super(IReplicaDataset, self).get_ParentOwner()
    def get_ParentDatabase(self):
        '''Method IReplicaDataset.get_ParentDatabase

           OUTPUT
            dsParentDatabase    : BSTR*'''
        return super(IReplicaDataset, self).get_ParentDatabase()
    def get_ReplicaID(self):
        '''Method IReplicaDataset.get_ReplicaID

           OUTPUT
            rID                 : long*'''
        return super(IReplicaDataset, self).get_ReplicaID()
    DatasetID = property(get_DatasetID, None, None)
    Name = property(get_Name, None, None)
    ParentDatabase = property(get_ParentDatabase, None, None)
    ParentOwner = property(get_ParentOwner, None, None)
    ReplicaID = property(get_ReplicaID, None, None)
    Type = property(get_Type, None, None)

class IEnumReplicaDataset(_esriGeoDatabase.IEnumReplicaDataset):
    _IID = uuid.UUID('8dcc9460-2f73-42f4-bc2a-50700b50fef4')
    def Next(self):
        '''Method IEnumReplicaDataset.Next

           OUTPUT
            ReplicaDataset      : IReplicaDataset**'''
        return super(IEnumReplicaDataset, self).Next()
    def __iter__(self):
        try:
            super(IEnumReplicaDataset, self).Reset()
            val = super(IEnumReplicaDataset, self).Next()
            while val:
                yield val
                val = super(IEnumReplicaDataset, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumReplicaDataset.Reset'''
        return super(IEnumReplicaDataset, self).Reset()

class IWorkspaceReplicaDatasets(_esriGeoDatabase.IWorkspaceReplicaDatasets):
    _IID = uuid.UUID('95f9e91d-885b-4f0e-9873-d66f5409ee41')
    def get_ReplicaDatasetsByName(self, ReplicaName):
        '''Method IWorkspaceReplicaDatasets.get_ReplicaDatasetsByName

           INPUT
            ReplicaName         : BSTR

           OUTPUT
            enumReplicaDataset  : IEnumReplicaDataset**'''
        return super(IWorkspaceReplicaDatasets, self).get_ReplicaDatasetsByName(ReplicaName)
    def get_ReplicaDatasetsByID(self, ReplicaID):
        '''Method IWorkspaceReplicaDatasets.get_ReplicaDatasetsByID

           INPUT
            ReplicaID           : long

           OUTPUT
            enumReplicaDataset  : IEnumReplicaDataset**'''
        return super(IWorkspaceReplicaDatasets, self).get_ReplicaDatasetsByID(ReplicaID)
    ReplicaDatasetsByID = IndexProperty(get_ReplicaDatasetsByID, None)
    ReplicaDatasetsByName = IndexProperty(get_ReplicaDatasetsByName, None)

class IEnumTopologyParent(_esriGeoDatabase.IEnumTopologyParent):
    _IID = uuid.UUID('efe9d2a4-1fb2-47f9-8af9-4831fad2db2d')
    def Reset(self):
        '''Method IEnumTopologyParent.Reset'''
        return super(IEnumTopologyParent, self).Reset()
    def Next(self):
        '''Method IEnumTopologyParent.Next

           OUTPUT
            parentInfo          : esriTopologyParent*'''
        return super(IEnumTopologyParent, self).Next()
    def __iter__(self):
        try:
            super(IEnumTopologyParent, self).Reset()
            val = super(IEnumTopologyParent, self).Next()
            while val:
                yield val
                val = super(IEnumTopologyParent, self).Next()
        except:
            pass
    def get_Count(self):
        '''Method IEnumTopologyParent.get_Count

           OUTPUT
            parentCount         : long*'''
        return super(IEnumTopologyParent, self).get_Count()
    Count = property(get_Count, None, None)

class ITopologyElement(_esriGeoDatabase.ITopologyElement):
    _IID = uuid.UUID('9a876db1-4a30-11d5-9fe9-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ITopologyElement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Geometry(self):
        '''Method ITopologyElement.get_Geometry

           OUTPUT
            Geometry            : IGeometry**'''
        return super(ITopologyElement, self).get_Geometry()
    def get_IsSelected(self):
        '''Method ITopologyElement.get_IsSelected

           OUTPUT
            selected            : VARIANT_BOOL*'''
        return super(ITopologyElement, self).get_IsSelected()
    def QueryGeometry(self, Geometry):
        '''Method ITopologyElement.QueryGeometry

           INPUT
            Geometry            : IGeometry*'''
        return super(ITopologyElement, self).QueryGeometry(Geometry)
    def get_IsDeleted(self):
        '''Method ITopologyElement.get_IsDeleted

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(ITopologyElement, self).get_IsDeleted()
    def get_Parents(self):
        '''Method ITopologyElement.get_Parents

           OUTPUT
            enumParents         : IEnumTopologyParent**'''
        return super(ITopologyElement, self).get_Parents()
    def get_Visited(self):
        '''Method ITopologyElement.get_Visited

           OUTPUT
            isVisited           : VARIANT_BOOL*'''
        return super(ITopologyElement, self).get_Visited()
    def put_Visited(self, isVisited):
        '''Method ITopologyElement.put_Visited

           INPUT
            isVisited           : VARIANT_BOOL'''
        return super(ITopologyElement, self).put_Visited(isVisited)
    Geometry = property(get_Geometry, None, None)
    IsDeleted = property(get_IsDeleted, None, None)
    IsSelected = property(get_IsSelected, None, None)
    Parents = property(get_Parents, None, None)
    Visited = property(get_Visited, put_Visited, None)

class IEnumTGHitInfo(_esriGeoDatabase.IEnumTGHitInfo):
    _IID = uuid.UUID('ba303a42-6aff-42f8-b457-85a689b051ca')
    def Reset(self):
        '''Method IEnumTGHitInfo.Reset'''
        return super(IEnumTGHitInfo, self).Reset()
    def get_Count(self):
        '''Method IEnumTGHitInfo.get_Count

           OUTPUT
            hitElements         : long*'''
        return super(IEnumTGHitInfo, self).get_Count()
    def Next(self, hitDistance):
        '''Method IEnumTGHitInfo.Next

           INPUT
            hitDistance         : double*

           OUTPUTS
            hitElement          : ITopologyElement**
            hitPoint            : IPoint**'''
        return super(IEnumTGHitInfo, self).Next(hitDistance)
    Count = property(get_Count, None, None)

class IIndexEdit(_esriGeoDatabase.IIndexEdit):
    _IID = uuid.UUID('2063fd02-4ce0-11d1-89db-006097aff44e')

    def __init__(self, *args, **kw):
        super(IIndexEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IIndexEdit.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IIndexEdit, self).put_Name(_arg1)
    def put_IsUnique(self, _arg1):
        '''Method IIndexEdit.put_IsUnique

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IIndexEdit, self).put_IsUnique(_arg1)
    def put_IsAscending(self, _arg1):
        '''Method IIndexEdit.put_IsAscending

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IIndexEdit, self).put_IsAscending(_arg1)
    def putref_Fields(self, _arg1):
        '''Method IIndexEdit.putref_Fields

           INPUT
            _arg1               : IFields*'''
        return super(IIndexEdit, self).putref_Fields(_arg1)
    def get_Name(self):
        '''Method IIndex.get_Name (from IIndex)

           OUTPUT
            Name                : BSTR*'''
        return super(IIndexEdit, self).get_Name()
    def get_IsUnique(self):
        '''Method IIndex.get_IsUnique (from IIndex)

           OUTPUT
            IsUnique            : VARIANT_BOOL*'''
        return super(IIndexEdit, self).get_IsUnique()
    def get_IsAscending(self):
        '''Method IIndex.get_IsAscending (from IIndex)

           OUTPUT
            IsAscending         : VARIANT_BOOL*'''
        return super(IIndexEdit, self).get_IsAscending()
    def get_Fields(self):
        '''Method IIndex.get_Fields (from IIndex)

           OUTPUT
            Fields              : IFields**'''
        return super(IIndexEdit, self).get_Fields()
    Fields = property(get_Fields, putref_Fields, None)
    IsAscending = property(get_IsAscending, put_IsAscending, None)
    IsUnique = property(get_IsUnique, put_IsUnique, None)
    Name = property(get_Name, put_Name, None)

class IGPMessage(_esriGeoDatabase.IGPMessage):
    _IID = uuid.UUID('93d8accb-3a6e-4fa2-b283-197ee5d0e334')

    def __init__(self, *args, **kw):
        super(IGPMessage, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Type(self, Type):
        '''Method IGPMessage.put_Type

           INPUT
            Type                : esriGPMessageType'''
        return super(IGPMessage, self).put_Type(Type)
    def get_Type(self):
        '''Method IGPMessage.get_Type

           OUTPUT
            Type                : esriGPMessageType*'''
        return super(IGPMessage, self).get_Type()
    def put_ErrorCode(self, ErrorCode):
        '''Method IGPMessage.put_ErrorCode

           INPUT
            ErrorCode           : long'''
        return super(IGPMessage, self).put_ErrorCode(ErrorCode)
    def get_ErrorCode(self):
        '''Method IGPMessage.get_ErrorCode

           OUTPUT
            ErrorCode           : long*'''
        return super(IGPMessage, self).get_ErrorCode()
    def put_Description(self, Message):
        '''Method IGPMessage.put_Description

           INPUT
            Message             : BSTR'''
        return super(IGPMessage, self).put_Description(Message)
    def get_Description(self):
        '''Method IGPMessage.get_Description

           OUTPUT
            Message             : BSTR*'''
        return super(IGPMessage, self).get_Description()
    def IsInformational(self):
        '''Method IGPMessage.IsInformational

           OUTPUT
            IsInformational     : VARIANT_BOOL*'''
        return super(IGPMessage, self).IsInformational()
    def IsWarning(self):
        '''Method IGPMessage.IsWarning

           OUTPUT
            IsWarning           : VARIANT_BOOL*'''
        return super(IGPMessage, self).IsWarning()
    def IsError(self):
        '''Method IGPMessage.IsError

           OUTPUT
            IsError             : VARIANT_BOOL*'''
        return super(IGPMessage, self).IsError()
    def IsAbort(self):
        '''Method IGPMessage.IsAbort

           OUTPUT
            IsAbort             : VARIANT_BOOL*'''
        return super(IGPMessage, self).IsAbort()
    Description = property(get_Description, put_Description, None)
    ErrorCode = property(get_ErrorCode, put_ErrorCode, None)
    Type = property(get_Type, put_Type, None)

class IGPDescribe(_esriGeoDatabase.IGPDescribe):
    _IID = uuid.UUID('63c74cf4-c042-433e-840d-c66b6c813031')
    def Describe(self, Name):
        '''Method IGPDescribe.Describe

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPDescribe, self).Describe(Name)

class INetWeight(_esriGeoDatabase.INetWeight):
    _IID = uuid.UUID('027e7415-981b-11d1-b264-0000f878229e')
    def get_WeightName(self):
        '''Method INetWeight.get_WeightName

           OUTPUT
            WeightName          : BSTR*'''
        return super(INetWeight, self).get_WeightName()
    def get_WeightType(self):
        '''Method INetWeight.get_WeightType

           OUTPUT
            WeightType          : esriWeightType*'''
        return super(INetWeight, self).get_WeightType()
    def get_BitGateSize(self):
        '''Method INetWeight.get_BitGateSize

           OUTPUT
            bigGateSize         : long*'''
        return super(INetWeight, self).get_BitGateSize()
    def get_WeightID(self):
        '''Method INetWeight.get_WeightID

           OUTPUT
            InternalID          : long*'''
        return super(INetWeight, self).get_WeightID()
    BitGateSize = property(get_BitGateSize, None, None)
    WeightID = property(get_WeightID, None, None)
    WeightName = property(get_WeightName, None, None)
    WeightType = property(get_WeightType, None, None)

class INetTopology(_esriGeoDatabase.INetTopology):
    _IID = uuid.UUID('803b5ff1-0ab3-11d1-9cd6-00805f74d243')
    def GetFromToJunctionEIDs(self, edgeEID):
        '''Method INetTopology.GetFromToJunctionEIDs

           INPUT
            edgeEID             : long

           OUTPUTS
            FromJunctionEID     : long*
            ToJunctionEID       : long*'''
        return super(INetTopology, self).GetFromToJunctionEIDs(edgeEID)
    def GetAdjacentEdgeCount(self, AtJunctionEID):
        '''Method INetTopology.GetAdjacentEdgeCount

           INPUT
            AtJunctionEID       : long

           OUTPUT
            adjacentEdgesCount  : long*'''
        return super(INetTopology, self).GetAdjacentEdgeCount(AtJunctionEID)
    def GetAdjacentEdge(self, AtJunctionEID, Index):
        '''Method INetTopology.GetAdjacentEdge

           INPUTS
            AtJunctionEID       : long
            Index               : long

           OUTPUTS
            adjacentEdge        : long*
            reverseOrientation  : VARIANT_BOOL*'''
        return super(INetTopology, self).GetAdjacentEdge(AtJunctionEID, Index)
    def GetAdjacentEdges(self, AtJunctionEID, adjacentEdgesCount):
        '''Method INetTopology.GetAdjacentEdges

           INPUTS
            AtJunctionEID       : long
            adjacentEdgesCount  : long

           OUTPUTS
            adjacentEdges       : long*
            reverseOrientation  : VARIANT_BOOL*'''
        return super(INetTopology, self).GetAdjacentEdges(AtJunctionEID, adjacentEdgesCount)

class INetElementDescription(_esriGeoDatabase.INetElementDescription):
    _IID = uuid.UUID('b1eb90e0-0cfa-11d1-9cd7-00805f74d243')
    def get_UserClassID(self):
        '''Method INetElementDescription.get_UserClassID

           OUTPUT
            elementclassUserID  : long*'''
        return super(INetElementDescription, self).get_UserClassID()
    def get_UserID(self):
        '''Method INetElementDescription.get_UserID

           OUTPUT
            UserID              : long*'''
        return super(INetElementDescription, self).get_UserID()
    def get_UserSubID(self):
        '''Method INetElementDescription.get_UserSubID

           OUTPUT
            UserSubID           : long*'''
        return super(INetElementDescription, self).get_UserSubID()
    def get_ElementType(self):
        '''Method INetElementDescription.get_ElementType

           OUTPUT
            ElementType         : esriElementType*'''
        return super(INetElementDescription, self).get_ElementType()
    ElementType = property(get_ElementType, None, None)
    UserClassID = property(get_UserClassID, None, None)
    UserID = property(get_UserID, None, None)
    UserSubID = property(get_UserSubID, None, None)

class INetTopologyEdit(_esriGeoDatabase.INetTopologyEdit):
    _IID = uuid.UUID('2395087d-02d5-11d1-9cd5-00805f74d243')
    def AddJunction(self, junctionDescription):
        '''Method INetTopologyEdit.AddJunction

           INPUT
            junctionDescription : INetElementDescription*

           OUTPUT
            junctionEID         : long*'''
        return super(INetTopologyEdit, self).AddJunction(junctionDescription)
    def AddEdgeByEndEIDs(self, edgeDescription, FromJunctionEID, ToJunctionEID):
        '''Method INetTopologyEdit.AddEdgeByEndEIDs

           INPUTS
            edgeDescription     : INetElementDescription*
            FromJunctionEID     : long
            ToJunctionEID       : long

           OUTPUT
            edgeEID             : long*'''
        return super(INetTopologyEdit, self).AddEdgeByEndEIDs(edgeDescription, FromJunctionEID, ToJunctionEID)
    def DeleteByID(self, UserClassID, UserID, UserSubID, ElementType):
        '''Method INetTopologyEdit.DeleteByID

           INPUTS
            UserClassID         : long
            UserID              : long
            UserSubID           : long
            ElementType         : esriElementType'''
        return super(INetTopologyEdit, self).DeleteByID(UserClassID, UserID, UserSubID, ElementType)
    def DeleteByEID(self, EID, ElementType):
        '''Method INetTopologyEdit.DeleteByEID

           INPUTS
            EID                 : long
            ElementType         : esriElementType'''
        return super(INetTopologyEdit, self).DeleteByEID(EID, ElementType)
    def DeleteByEIDs(self, ElementType, ElementCount, elementEIDs):
        '''Method INetTopologyEdit.DeleteByEIDs

           INPUTS
            ElementType         : esriElementType
            ElementCount        : long
            elementEIDs         : long*'''
        return super(INetTopologyEdit, self).DeleteByEIDs(ElementType, ElementCount, elementEIDs)
    def GetFromToJunctionEIDs(self, edgeEID):
        '''Method INetTopology.GetFromToJunctionEIDs (from INetTopology)

           INPUT
            edgeEID             : long

           OUTPUTS
            FromJunctionEID     : long*
            ToJunctionEID       : long*'''
        return super(INetTopologyEdit, self).GetFromToJunctionEIDs(edgeEID)
    def GetAdjacentEdgeCount(self, AtJunctionEID):
        '''Method INetTopology.GetAdjacentEdgeCount (from INetTopology)

           INPUT
            AtJunctionEID       : long

           OUTPUT
            adjacentEdgesCount  : long*'''
        return super(INetTopologyEdit, self).GetAdjacentEdgeCount(AtJunctionEID)
    def GetAdjacentEdge(self, AtJunctionEID, Index):
        '''Method INetTopology.GetAdjacentEdge (from INetTopology)

           INPUTS
            AtJunctionEID       : long
            Index               : long

           OUTPUTS
            adjacentEdge        : long*
            reverseOrientation  : VARIANT_BOOL*'''
        return super(INetTopologyEdit, self).GetAdjacentEdge(AtJunctionEID, Index)
    def GetAdjacentEdges(self, AtJunctionEID, adjacentEdgesCount):
        '''Method INetTopology.GetAdjacentEdges (from INetTopology)

           INPUTS
            AtJunctionEID       : long
            adjacentEdgesCount  : long

           OUTPUTS
            adjacentEdges       : long*
            reverseOrientation  : VARIANT_BOOL*'''
        return super(INetTopologyEdit, self).GetAdjacentEdges(AtJunctionEID, adjacentEdgesCount)

class INetElementClass(_esriGeoDatabase.INetElementClass):
    _IID = uuid.UUID('23a799e2-ccbc-11d0-9ccf-00805f74d243')
    def get_UserClassID(self):
        '''Method INetElementClass.get_UserClassID

           OUTPUT
            UserClassID         : long*'''
        return super(INetElementClass, self).get_UserClassID()
    UserClassID = property(get_UserClassID, None, None)

class INetWeightAssociation(_esriGeoDatabase.INetWeightAssociation):
    _IID = uuid.UUID('19bdc490-6201-11d1-b255-0000f878229e')
    def get_TableName(self):
        '''Method INetWeightAssociation.get_TableName

           OUTPUT
            TableName           : BSTR*'''
        return super(INetWeightAssociation, self).get_TableName()
    def get_FieldName(self):
        '''Method INetWeightAssociation.get_FieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(INetWeightAssociation, self).get_FieldName()
    def get_WeightID(self):
        '''Method INetWeightAssociation.get_WeightID

           OUTPUT
            WeightID            : long*'''
        return super(INetWeightAssociation, self).get_WeightID()
    FieldName = property(get_FieldName, None, None)
    TableName = property(get_TableName, None, None)
    WeightID = property(get_WeightID, None, None)

class IEnumNetWeightAssociation(_esriGeoDatabase.IEnumNetWeightAssociation):
    _IID = uuid.UUID('13d15d41-1119-11d2-b284-0000f878229e')
    def get_Count(self):
        '''Method IEnumNetWeightAssociation.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEnumNetWeightAssociation, self).get_Count()
    def Reset(self):
        '''Method IEnumNetWeightAssociation.Reset'''
        return super(IEnumNetWeightAssociation, self).Reset()
    def Next(self):
        '''Method IEnumNetWeightAssociation.Next

           OUTPUT
            NetWeightAssociation: INetWeightAssociation**'''
        return super(IEnumNetWeightAssociation, self).Next()
    def __iter__(self):
        try:
            super(IEnumNetWeightAssociation, self).Reset()
            val = super(IEnumNetWeightAssociation, self).Next()
            while val:
                yield val
                val = super(IEnumNetWeightAssociation, self).Next()
        except:
            pass
    Count = property(get_Count, None, None)

class IInvalidObjectInfo(_esriGeoDatabase.IInvalidObjectInfo):
    _IID = uuid.UUID('49e8ae69-4f38-11d3-9ff8-00c04f6bdf0e')
    def get_InvalidObjectID(self):
        '''Method IInvalidObjectInfo.get_InvalidObjectID

           OUTPUT
            featureID           : long*'''
        return super(IInvalidObjectInfo, self).get_InvalidObjectID()
    def get_ErrorDescription(self):
        '''Method IInvalidObjectInfo.get_ErrorDescription

           OUTPUT
            invalidFeatureErrorDescription: BSTR*'''
        return super(IInvalidObjectInfo, self).get_ErrorDescription()
    ErrorDescription = property(get_ErrorDescription, None, None)
    InvalidObjectID = property(get_InvalidObjectID, None, None)

class IEnumInvalidObject(_esriGeoDatabase.IEnumInvalidObject):
    _IID = uuid.UUID('bac25c0b-4f39-11d3-9ff8-00c04f6bdf0e')
    def Next(self):
        '''Method IEnumInvalidObject.Next

           OUTPUT
            invalidFeatureInfo  : IInvalidObjectInfo**'''
        return super(IEnumInvalidObject, self).Next()
    def __iter__(self):
        try:
            super(IEnumInvalidObject, self).Reset()
            val = super(IEnumInvalidObject, self).Next()
            while val:
                yield val
                val = super(IEnumInvalidObject, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumInvalidObject.Reset'''
        return super(IEnumInvalidObject, self).Reset()

class INetworkUpdate(_esriGeoDatabase.INetworkUpdate):
    _IID = uuid.UUID('051c9860-1880-11d2-b289-0000f878229e')
    def StartSchemaUpdating(self):
        '''Method INetworkUpdate.StartSchemaUpdating'''
        return super(INetworkUpdate, self).StartSchemaUpdating()
    def StopSchemaUpdating(self):
        '''Method INetworkUpdate.StopSchemaUpdating'''
        return super(INetworkUpdate, self).StopSchemaUpdating()
    def get_IsSchemaBeingUpdated(self):
        '''Method INetworkUpdate.get_IsSchemaBeingUpdated

           OUTPUT
            bIsSchemaBeingUpdated: VARIANT_BOOL*'''
        return super(INetworkUpdate, self).get_IsSchemaBeingUpdated()
    def StartTopologyUpdating(self):
        '''Method INetworkUpdate.StartTopologyUpdating'''
        return super(INetworkUpdate, self).StartTopologyUpdating()
    def StopTopologyUpdating(self):
        '''Method INetworkUpdate.StopTopologyUpdating'''
        return super(INetworkUpdate, self).StopTopologyUpdating()
    def get_IsTopologyBeingUpdated(self):
        '''Method INetworkUpdate.get_IsTopologyBeingUpdated

           OUTPUT
            bIsTopologyBeingUpdated: VARIANT_BOOL*'''
        return super(INetworkUpdate, self).get_IsTopologyBeingUpdated()
    def StartAttributesUpdating(self):
        '''Method INetworkUpdate.StartAttributesUpdating'''
        return super(INetworkUpdate, self).StartAttributesUpdating()
    def StopAttributesUpdating(self):
        '''Method INetworkUpdate.StopAttributesUpdating'''
        return super(INetworkUpdate, self).StopAttributesUpdating()
    def get_IsAttributesBeingUpdated(self):
        '''Method INetworkUpdate.get_IsAttributesBeingUpdated

           OUTPUT
            bIsAttributesBeingUpdated: VARIANT_BOOL*'''
        return super(INetworkUpdate, self).get_IsAttributesBeingUpdated()
    IsAttributesBeingUpdated = property(get_IsAttributesBeingUpdated, None, None)
    IsSchemaBeingUpdated = property(get_IsSchemaBeingUpdated, None, None)
    IsTopologyBeingUpdated = property(get_IsTopologyBeingUpdated, None, None)

class INetSchema(_esriGeoDatabase.INetSchema):
    _IID = uuid.UUID('5db91dbb-afb4-11d0-9ccd-00805f74d243')
    def get_ElementClassCount(self):
        '''Method INetSchema.get_ElementClassCount

           OUTPUT
            ElementClassCount   : long*'''
        return super(INetSchema, self).get_ElementClassCount()
    def get_ElementClass(self, Index):
        '''Method INetSchema.get_ElementClass

           INPUT
            Index               : long

           OUTPUT
            NetElementClass     : INetElementClass**'''
        return super(INetSchema, self).get_ElementClass(Index)
    def get_ElementClassByUserID(self, elementclassUserID):
        '''Method INetSchema.get_ElementClassByUserID

           INPUT
            elementclassUserID  : long

           OUTPUT
            NetElementClass     : INetElementClass**'''
        return super(INetSchema, self).get_ElementClassByUserID(elementclassUserID)
    def get_WeightCount(self):
        '''Method INetSchema.get_WeightCount

           OUTPUT
            WeightCount         : long*'''
        return super(INetSchema, self).get_WeightCount()
    def get_Weight(self, weightInternalID):
        '''Method INetSchema.get_Weight

           INPUT
            weightInternalID    : long

           OUTPUT
            networkWeight       : INetWeight**'''
        return super(INetSchema, self).get_Weight(weightInternalID)
    def get_WeightByName(self, WeightName):
        '''Method INetSchema.get_WeightByName

           INPUT
            WeightName          : BSTR

           OUTPUT
            networkWeight       : INetWeight**'''
        return super(INetSchema, self).get_WeightByName(WeightName)
    def get_WeightAssociations(self, weightInternalID):
        '''Method INetSchema.get_WeightAssociations

           INPUT
            weightInternalID    : long

           OUTPUT
            netWeightAssociations: IEnumNetWeightAssociation**'''
        return super(INetSchema, self).get_WeightAssociations(weightInternalID)
    def get_WeightAssociationsByTableName(self, TableName):
        '''Method INetSchema.get_WeightAssociationsByTableName

           INPUT
            TableName           : BSTR

           OUTPUT
            netWeightAssociations: IEnumNetWeightAssociation**'''
        return super(INetSchema, self).get_WeightAssociationsByTableName(TableName)
    def GetAncillaryRole(self, UserClassID):
        '''Method INetSchema.GetAncillaryRole

           INPUT
            UserClassID         : long

           OUTPUTS
            ancillaryRole       : esriNetworkClassAncillaryRole*
            AncillaryRoleFieldName: BSTR*'''
        return super(INetSchema, self).GetAncillaryRole(UserClassID)
    def GetEnabledDisabledFieldName(self, UserClassID):
        '''Method INetSchema.GetEnabledDisabledFieldName

           INPUT
            UserClassID         : long

           OUTPUT
            enabledDisabledFieldName: BSTR*'''
        return super(INetSchema, self).GetEnabledDisabledFieldName(UserClassID)
    ElementClassCount = property(get_ElementClassCount, None, None)
    WeightCount = property(get_WeightCount, None, None)
    ElementClass = IndexProperty(get_ElementClass, None)
    ElementClassByUserID = IndexProperty(get_ElementClassByUserID, None)
    Weight = IndexProperty(get_Weight, None)
    WeightAssociations = IndexProperty(get_WeightAssociations, None)
    WeightAssociationsByTableName = IndexProperty(get_WeightAssociationsByTableName, None)
    WeightByName = IndexProperty(get_WeightByName, None)

class INetSchemaEdit(_esriGeoDatabase.INetSchemaEdit):
    _IID = uuid.UUID('5db91db1-afb4-11d0-9ccd-00805f74d243')
    def AddElementClass(self, UserClassID):
        '''Method INetSchemaEdit.AddElementClass

           INPUT
            UserClassID         : long

           OUTPUT
            ElementClass        : INetElementClass**'''
        return super(INetSchemaEdit, self).AddElementClass(UserClassID)
    def AddWeight(self, networkWeight):
        '''Method INetSchemaEdit.AddWeight

           INPUT
            networkWeight       : INetWeight*'''
        return super(INetSchemaEdit, self).AddWeight(networkWeight)
    def AddWeightAssociation(self, weightSource):
        '''Method INetSchemaEdit.AddWeightAssociation

           INPUT
            weightSource        : INetWeightAssociation*'''
        return super(INetSchemaEdit, self).AddWeightAssociation(weightSource)
    def PutAncillaryRole(self, UserClassID, ancillaryRole, AncillaryRoleFieldName):
        '''Method INetSchemaEdit.PutAncillaryRole

           INPUTS
            UserClassID         : long
            ancillaryRole       : esriNetworkClassAncillaryRole
            AncillaryRoleFieldName: BSTR'''
        return super(INetSchemaEdit, self).PutAncillaryRole(UserClassID, ancillaryRole, AncillaryRoleFieldName)
    def PutEnabledDisabledFieldName(self, UserClassID, enabledDisabledRoleFieldName):
        '''Method INetSchemaEdit.PutEnabledDisabledFieldName

           INPUTS
            UserClassID         : long
            enabledDisabledRoleFieldName: BSTR'''
        return super(INetSchemaEdit, self).PutEnabledDisabledFieldName(UserClassID, enabledDisabledRoleFieldName)
    def get_ElementClassCount(self):
        '''Method INetSchema.get_ElementClassCount (from INetSchema)

           OUTPUT
            ElementClassCount   : long*'''
        return super(INetSchemaEdit, self).get_ElementClassCount()
    def get_ElementClass(self, Index):
        '''Method INetSchema.get_ElementClass (from INetSchema)

           INPUT
            Index               : long

           OUTPUT
            NetElementClass     : INetElementClass**'''
        return super(INetSchemaEdit, self).get_ElementClass(Index)
    def get_ElementClassByUserID(self, elementclassUserID):
        '''Method INetSchema.get_ElementClassByUserID (from INetSchema)

           INPUT
            elementclassUserID  : long

           OUTPUT
            NetElementClass     : INetElementClass**'''
        return super(INetSchemaEdit, self).get_ElementClassByUserID(elementclassUserID)
    def get_WeightCount(self):
        '''Method INetSchema.get_WeightCount (from INetSchema)

           OUTPUT
            WeightCount         : long*'''
        return super(INetSchemaEdit, self).get_WeightCount()
    def get_Weight(self, weightInternalID):
        '''Method INetSchema.get_Weight (from INetSchema)

           INPUT
            weightInternalID    : long

           OUTPUT
            networkWeight       : INetWeight**'''
        return super(INetSchemaEdit, self).get_Weight(weightInternalID)
    def get_WeightByName(self, WeightName):
        '''Method INetSchema.get_WeightByName (from INetSchema)

           INPUT
            WeightName          : BSTR

           OUTPUT
            networkWeight       : INetWeight**'''
        return super(INetSchemaEdit, self).get_WeightByName(WeightName)
    def get_WeightAssociations(self, weightInternalID):
        '''Method INetSchema.get_WeightAssociations (from INetSchema)

           INPUT
            weightInternalID    : long

           OUTPUT
            netWeightAssociations: IEnumNetWeightAssociation**'''
        return super(INetSchemaEdit, self).get_WeightAssociations(weightInternalID)
    def get_WeightAssociationsByTableName(self, TableName):
        '''Method INetSchema.get_WeightAssociationsByTableName (from INetSchema)

           INPUT
            TableName           : BSTR

           OUTPUT
            netWeightAssociations: IEnumNetWeightAssociation**'''
        return super(INetSchemaEdit, self).get_WeightAssociationsByTableName(TableName)
    def GetAncillaryRole(self, UserClassID):
        '''Method INetSchema.GetAncillaryRole (from INetSchema)

           INPUT
            UserClassID         : long

           OUTPUTS
            ancillaryRole       : esriNetworkClassAncillaryRole*
            AncillaryRoleFieldName: BSTR*'''
        return super(INetSchemaEdit, self).GetAncillaryRole(UserClassID)
    def GetEnabledDisabledFieldName(self, UserClassID):
        '''Method INetSchema.GetEnabledDisabledFieldName (from INetSchema)

           INPUT
            UserClassID         : long

           OUTPUT
            enabledDisabledFieldName: BSTR*'''
        return super(INetSchemaEdit, self).GetEnabledDisabledFieldName(UserClassID)
    ElementClassCount = property(get_ElementClassCount, None, None)
    WeightCount = property(get_WeightCount, None, None)
    ElementClass = IndexProperty(get_ElementClass, None)
    ElementClassByUserID = IndexProperty(get_ElementClassByUserID, None)
    Weight = IndexProperty(get_Weight, None)
    WeightAssociations = IndexProperty(get_WeightAssociations, None)
    WeightAssociationsByTableName = IndexProperty(get_WeightAssociationsByTableName, None)
    WeightByName = IndexProperty(get_WeightByName, None)

class INetWeightEdit(_esriGeoDatabase.INetWeightEdit):
    _IID = uuid.UUID('3ebbe030-557d-11d1-b254-0000f878229e')

    def __init__(self, *args, **kw):
        super(INetWeightEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_WeightName(self, _arg1):
        '''Method INetWeightEdit.put_WeightName

           INPUT
            _arg1               : BSTR'''
        return super(INetWeightEdit, self).put_WeightName(_arg1)
    def put_WeightType(self, _arg1):
        '''Method INetWeightEdit.put_WeightType

           INPUT
            _arg1               : esriWeightType'''
        return super(INetWeightEdit, self).put_WeightType(_arg1)
    def put_BitGateSize(self, _arg1):
        '''Method INetWeightEdit.put_BitGateSize

           INPUT
            _arg1               : long'''
        return super(INetWeightEdit, self).put_BitGateSize(_arg1)
    def get_WeightName(self):
        '''Method INetWeight.get_WeightName (from INetWeight)

           OUTPUT
            WeightName          : BSTR*'''
        return super(INetWeightEdit, self).get_WeightName()
    def get_WeightType(self):
        '''Method INetWeight.get_WeightType (from INetWeight)

           OUTPUT
            WeightType          : esriWeightType*'''
        return super(INetWeightEdit, self).get_WeightType()
    def get_BitGateSize(self):
        '''Method INetWeight.get_BitGateSize (from INetWeight)

           OUTPUT
            bigGateSize         : long*'''
        return super(INetWeightEdit, self).get_BitGateSize()
    def get_WeightID(self):
        '''Method INetWeight.get_WeightID (from INetWeight)

           OUTPUT
            InternalID          : long*'''
        return super(INetWeightEdit, self).get_WeightID()
    BitGateSize = property(get_BitGateSize, put_BitGateSize, None)
    WeightID = property(get_WeightID, None, None)
    WeightName = property(get_WeightName, put_WeightName, None)
    WeightType = property(get_WeightType, put_WeightType, None)

class INetWeightAssociationEdit(_esriGeoDatabase.INetWeightAssociationEdit):
    _IID = uuid.UUID('13d15d40-1119-11d2-b284-0000f878229e')

    def __init__(self, *args, **kw):
        super(INetWeightAssociationEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TableName(self, _arg1):
        '''Method INetWeightAssociationEdit.put_TableName

           INPUT
            _arg1               : BSTR'''
        return super(INetWeightAssociationEdit, self).put_TableName(_arg1)
    def put_FieldName(self, _arg1):
        '''Method INetWeightAssociationEdit.put_FieldName

           INPUT
            _arg1               : BSTR'''
        return super(INetWeightAssociationEdit, self).put_FieldName(_arg1)
    def put_WeightID(self, _arg1):
        '''Method INetWeightAssociationEdit.put_WeightID

           INPUT
            _arg1               : long'''
        return super(INetWeightAssociationEdit, self).put_WeightID(_arg1)
    def get_TableName(self):
        '''Method INetWeightAssociation.get_TableName (from INetWeightAssociation)

           OUTPUT
            TableName           : BSTR*'''
        return super(INetWeightAssociationEdit, self).get_TableName()
    def get_FieldName(self):
        '''Method INetWeightAssociation.get_FieldName (from INetWeightAssociation)

           OUTPUT
            FieldName           : BSTR*'''
        return super(INetWeightAssociationEdit, self).get_FieldName()
    def get_WeightID(self):
        '''Method INetWeightAssociation.get_WeightID (from INetWeightAssociation)

           OUTPUT
            WeightID            : long*'''
        return super(INetWeightAssociationEdit, self).get_WeightID()
    FieldName = property(get_FieldName, put_FieldName, None)
    TableName = property(get_TableName, put_TableName, None)
    WeightID = property(get_WeightID, put_WeightID, None)

class INetAttributes(_esriGeoDatabase.INetAttributes):
    _IID = uuid.UUID('027e7417-981b-11d1-b264-0000f878229e')
    def GetDisabledState(self, EID, ElementType):
        '''Method INetAttributes.GetDisabledState

           INPUTS
            EID                 : long
            ElementType         : esriElementType

           OUTPUT
            disabledState       : VARIANT_BOOL*'''
        return super(INetAttributes, self).GetDisabledState(EID, ElementType)
    def GetWeightValue(self, EID, ElementType, weightInternalID):
        '''Method INetAttributes.GetWeightValue

           INPUTS
            EID                 : long
            ElementType         : esriElementType
            weightInternalID    : long

           OUTPUT
            weightValue         : VARIANT*'''
        return super(INetAttributes, self).GetWeightValue(EID, ElementType, weightInternalID)

class INetAttributesEdit(_esriGeoDatabase.INetAttributesEdit):
    _IID = uuid.UUID('da7fd2c0-0794-11d1-9cd6-00805f74d243')
    def SetDisabledState(self, EID, ElementType, disableState):
        '''Method INetAttributesEdit.SetDisabledState

           INPUTS
            EID                 : long
            ElementType         : esriElementType
            disableState        : VARIANT_BOOL'''
        return super(INetAttributesEdit, self).SetDisabledState(EID, ElementType, disableState)
    def SetWeightValue(self, EID, ElementType, weightInternalID, weightValue):
        '''Method INetAttributesEdit.SetWeightValue

           INPUTS
            EID                 : long
            ElementType         : esriElementType
            weightInternalID    : long
            weightValue         : VARIANT'''
        return super(INetAttributesEdit, self).SetWeightValue(EID, ElementType, weightInternalID, weightValue)
    def GetDisabledState(self, EID, ElementType):
        '''Method INetAttributes.GetDisabledState (from INetAttributes)

           INPUTS
            EID                 : long
            ElementType         : esriElementType

           OUTPUT
            disabledState       : VARIANT_BOOL*'''
        return super(INetAttributesEdit, self).GetDisabledState(EID, ElementType)
    def GetWeightValue(self, EID, ElementType, weightInternalID):
        '''Method INetAttributes.GetWeightValue (from INetAttributes)

           INPUTS
            EID                 : long
            ElementType         : esriElementType
            weightInternalID    : long

           OUTPUT
            weightValue         : VARIANT*'''
        return super(INetAttributesEdit, self).GetWeightValue(EID, ElementType, weightInternalID)

class INetElementDescriptionEdit(_esriGeoDatabase.INetElementDescriptionEdit):
    _IID = uuid.UUID('027e7416-981b-11d1-b264-0000f878229e')

    def __init__(self, *args, **kw):
        super(INetElementDescriptionEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UserClassID(self, _arg1):
        '''Method INetElementDescriptionEdit.put_UserClassID

           INPUT
            _arg1               : long'''
        return super(INetElementDescriptionEdit, self).put_UserClassID(_arg1)
    def put_UserID(self, _arg1):
        '''Method INetElementDescriptionEdit.put_UserID

           INPUT
            _arg1               : long'''
        return super(INetElementDescriptionEdit, self).put_UserID(_arg1)
    def put_UserSubID(self, _arg1):
        '''Method INetElementDescriptionEdit.put_UserSubID

           INPUT
            _arg1               : long'''
        return super(INetElementDescriptionEdit, self).put_UserSubID(_arg1)
    def put_ElementType(self, _arg1):
        '''Method INetElementDescriptionEdit.put_ElementType

           INPUT
            _arg1               : esriElementType'''
        return super(INetElementDescriptionEdit, self).put_ElementType(_arg1)
    def get_UserClassID(self):
        '''Method INetElementDescription.get_UserClassID (from INetElementDescription)

           OUTPUT
            elementclassUserID  : long*'''
        return super(INetElementDescriptionEdit, self).get_UserClassID()
    def get_UserID(self):
        '''Method INetElementDescription.get_UserID (from INetElementDescription)

           OUTPUT
            UserID              : long*'''
        return super(INetElementDescriptionEdit, self).get_UserID()
    def get_UserSubID(self):
        '''Method INetElementDescription.get_UserSubID (from INetElementDescription)

           OUTPUT
            UserSubID           : long*'''
        return super(INetElementDescriptionEdit, self).get_UserSubID()
    def get_ElementType(self):
        '''Method INetElementDescription.get_ElementType (from INetElementDescription)

           OUTPUT
            ElementType         : esriElementType*'''
        return super(INetElementDescriptionEdit, self).get_ElementType()
    ElementType = property(get_ElementType, put_ElementType, None)
    UserClassID = property(get_UserClassID, put_UserClassID, None)
    UserID = property(get_UserID, put_UserID, None)
    UserSubID = property(get_UserSubID, put_UserSubID, None)

class INetDiagnostics(_esriGeoDatabase.INetDiagnostics):
    _IID = uuid.UUID('2fb1fd60-c418-4e33-9b55-0a8b12530164')
    def Dump(self, fileName):
        '''Method INetDiagnostics.Dump

           INPUT
            fileName            : BSTR'''
        return super(INetDiagnostics, self).Dump(fileName)

class INetTopologyEditGEN(_esriGeoDatabase.INetTopologyEditGEN):
    _IID = uuid.UUID('b39696f9-2d4a-4c54-af81-f37f237d3cac')
    def GetFromToJunctionEIDs(self, edgeEID):
        '''Method INetTopologyEditGEN.GetFromToJunctionEIDs

           INPUT
            edgeEID             : long

           OUTPUTS
            FromJunctionEID     : long*
            ToJunctionEID       : long*'''
        return super(INetTopologyEditGEN, self).GetFromToJunctionEIDs(edgeEID)
    def GetAdjacentEdgeCount(self, AtJunctionEID):
        '''Method INetTopologyEditGEN.GetAdjacentEdgeCount

           INPUT
            AtJunctionEID       : long

           OUTPUT
            adjacentEdgesCount  : long*'''
        return super(INetTopologyEditGEN, self).GetAdjacentEdgeCount(AtJunctionEID)
    def GetAdjacentEdge(self, AtJunctionEID, Index):
        '''Method INetTopologyEditGEN.GetAdjacentEdge

           INPUTS
            AtJunctionEID       : long
            Index               : long

           OUTPUTS
            adjacentEdge        : long*
            reverseOrientation  : VARIANT_BOOL*'''
        return super(INetTopologyEditGEN, self).GetAdjacentEdge(AtJunctionEID, Index)
    def GetAdjacentEdges(self, AtJunctionEID):
        '''Method INetTopologyEditGEN.GetAdjacentEdges

           INPUT
            AtJunctionEID       : long

           OUTPUTS
            adjacentEdges       : SAFEARRAY**
            reverseOrientation  : SAFEARRAY**'''
        return super(INetTopologyEditGEN, self).GetAdjacentEdges(AtJunctionEID)
    def AddJunction(self, junctionDescription):
        '''Method INetTopologyEditGEN.AddJunction

           INPUT
            junctionDescription : INetElementDescription*

           OUTPUT
            junctionEID         : long*'''
        return super(INetTopologyEditGEN, self).AddJunction(junctionDescription)
    def AddEdgeByEndEIDs(self, edgeDescription, FromJunctionEID, ToJunctionEID):
        '''Method INetTopologyEditGEN.AddEdgeByEndEIDs

           INPUTS
            edgeDescription     : INetElementDescription*
            FromJunctionEID     : long
            ToJunctionEID       : long

           OUTPUT
            edgeEID             : long*'''
        return super(INetTopologyEditGEN, self).AddEdgeByEndEIDs(edgeDescription, FromJunctionEID, ToJunctionEID)
    def DeleteByID(self, UserClassID, UserID, UserSubID, ElementType):
        '''Method INetTopologyEditGEN.DeleteByID

           INPUTS
            UserClassID         : long
            UserID              : long
            UserSubID           : long
            ElementType         : esriElementType'''
        return super(INetTopologyEditGEN, self).DeleteByID(UserClassID, UserID, UserSubID, ElementType)
    def DeleteByEID(self, EID, ElementType):
        '''Method INetTopologyEditGEN.DeleteByEID

           INPUTS
            EID                 : long
            ElementType         : esriElementType'''
        return super(INetTopologyEditGEN, self).DeleteByEID(EID, ElementType)
    def DeleteByEIDs(self, ElementType, elementEIDs):
        '''Method INetTopologyEditGEN.DeleteByEIDs

           INPUTS
            ElementType         : esriElementType
            elementEIDs         : SAFEARRAY**'''
        return super(INetTopologyEditGEN, self).DeleteByEIDs(ElementType, elementEIDs)

class IDatasetAnalyze(_esriGeoDatabase.IDatasetAnalyze):
    _IID = uuid.UUID('60262917-d53f-4e0b-86ff-a916c3fb26bc')
    def Analyze(self, tableComponents):
        '''Method IDatasetAnalyze.Analyze

           INPUT
            tableComponents     : long'''
        return super(IDatasetAnalyze, self).Analyze(tableComponents)
    def get_AllowableComponents(self):
        '''Method IDatasetAnalyze.get_AllowableComponents

           OUTPUT
            AllowableComponents : long*'''
        return super(IDatasetAnalyze, self).get_AllowableComponents()
    AllowableComponents = property(get_AllowableComponents, None, None)

class ITopologyProtectNames(_esriGeoDatabase.ITopologyProtectNames):
    _IID = uuid.UUID('45196db7-5fa4-4596-9d2e-7557bbeeda92')
    def Topology(self):
        '''Method ITopologyProtectNames.Topology'''
        return super(ITopologyProtectNames, self).Topology()
    def Errors(self):
        '''Method ITopologyProtectNames.Errors'''
        return super(ITopologyProtectNames, self).Errors()
    def Rules(self):
        '''Method ITopologyProtectNames.Rules'''
        return super(ITopologyProtectNames, self).Rules()
    def TopologyName(self):
        '''Method ITopologyProtectNames.TopologyName'''
        return super(ITopologyProtectNames, self).TopologyName()
    def TopologyID(self):
        '''Method ITopologyProtectNames.TopologyID'''
        return super(ITopologyProtectNames, self).TopologyID()
    def ErrorFeature(self):
        '''Method ITopologyProtectNames.ErrorFeature'''
        return super(ITopologyProtectNames, self).ErrorFeature()
    def ErrorClass(self):
        '''Method ITopologyProtectNames.ErrorClass'''
        return super(ITopologyProtectNames, self).ErrorClass()
    def Exceptions(self):
        '''Method ITopologyProtectNames.Exceptions'''
        return super(ITopologyProtectNames, self).Exceptions()
    def SelectionChanged(self):
        '''Method ITopologyProtectNames.SelectionChanged'''
        return super(ITopologyProtectNames, self).SelectionChanged()
    def EventNotificationOnValidate(self):
        '''Method ITopologyProtectNames.EventNotificationOnValidate'''
        return super(ITopologyProtectNames, self).EventNotificationOnValidate()
    def ObjectClass(self):
        '''Method ITopologyProtectNames.ObjectClass'''
        return super(ITopologyProtectNames, self).ObjectClass()
    def XYRank(self):
        '''Method ITopologyProtectNames.XYRank'''
        return super(ITopologyProtectNames, self).XYRank()
    def ZRank(self):
        '''Method ITopologyProtectNames.ZRank'''
        return super(ITopologyProtectNames, self).ZRank()
    def RuleID(self):
        '''Method ITopologyProtectNames.RuleID'''
        return super(ITopologyProtectNames, self).RuleID()
    def RuleGUID(self):
        '''Method ITopologyProtectNames.RuleGUID'''
        return super(ITopologyProtectNames, self).RuleGUID()
    def TrustedArea(self):
        '''Method ITopologyProtectNames.TrustedArea'''
        return super(ITopologyProtectNames, self).TrustedArea()
    def Classes(self):
        '''Method ITopologyProtectNames.Classes'''
        return super(ITopologyProtectNames, self).Classes()

class IFeatureDatasetManage(_esriGeoDatabase.IFeatureDatasetManage):
    _IID = uuid.UUID('e02ccce7-3490-11d3-9fbd-00c04f6bc724')
    def UpdateMDomain(self):
        '''Method IFeatureDatasetManage.UpdateMDomain'''
        return super(IFeatureDatasetManage, self).UpdateMDomain()

class IFeatureClassLoad(_esriGeoDatabase.IFeatureClassLoad):
    _IID = uuid.UUID('c3bff943-e069-11d1-aa82-00c04fa37585')

    def __init__(self, *args, **kw):
        super(IFeatureClassLoad, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LoadOnlyMode(self):
        '''Method IFeatureClassLoad.get_LoadOnlyMode

           OUTPUT
            isInLoadMode        : VARIANT_BOOL*'''
        return super(IFeatureClassLoad, self).get_LoadOnlyMode()
    def put_LoadOnlyMode(self, isInLoadMode):
        '''Method IFeatureClassLoad.put_LoadOnlyMode

           INPUT
            isInLoadMode        : VARIANT_BOOL'''
        return super(IFeatureClassLoad, self).put_LoadOnlyMode(isInLoadMode)
    LoadOnlyMode = property(get_LoadOnlyMode, put_LoadOnlyMode, None)

class IQueryDescription(_esriGeoDatabase.IQueryDescription):
    _IID = uuid.UUID('2e060684-e14c-44d3-858a-442ab6a0a863')

    def __init__(self, *args, **kw):
        super(IQueryDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Srid(self, pSrid):
        '''Method IQueryDescription.put_Srid

           INPUT
            pSrid               : BSTR'''
        return super(IQueryDescription, self).put_Srid(pSrid)
    def get_Srid(self):
        '''Method IQueryDescription.get_Srid

           OUTPUT
            pSrid               : BSTR*'''
        return super(IQueryDescription, self).get_Srid()
    def put_SpatialReference(self, ppSpatialReference):
        '''Method IQueryDescription.put_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IQueryDescription, self).put_SpatialReference(ppSpatialReference)
    def get_SpatialReference(self):
        '''Method IQueryDescription.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IQueryDescription, self).get_SpatialReference()
    def put_OIDFields(self, ppOidMap):
        '''Method IQueryDescription.put_OIDFields

           INPUT
            ppOidMap            : BSTR'''
        return super(IQueryDescription, self).put_OIDFields(ppOidMap)
    def get_OIDFields(self):
        '''Method IQueryDescription.get_OIDFields

           OUTPUT
            ppOidMap            : BSTR*'''
        return super(IQueryDescription, self).get_OIDFields()
    def put_GeometryType(self, pGeomType):
        '''Method IQueryDescription.put_GeometryType

           INPUT
            pGeomType           : esriGeometryType'''
        return super(IQueryDescription, self).put_GeometryType(pGeomType)
    def get_GeometryType(self):
        '''Method IQueryDescription.get_GeometryType

           OUTPUT
            pGeomType           : esriGeometryType*'''
        return super(IQueryDescription, self).get_GeometryType()
    def get_ShapeColumnName(self):
        '''Method IQueryDescription.get_ShapeColumnName

           OUTPUT
            pShapeColumnName    : BSTR*'''
        return super(IQueryDescription, self).get_ShapeColumnName()
    def get_OIDColumnName(self):
        '''Method IQueryDescription.get_OIDColumnName

           OUTPUT
            pOIDColumnName      : BSTR*'''
        return super(IQueryDescription, self).get_OIDColumnName()
    def get_Fields(self):
        '''Method IQueryDescription.get_Fields

           OUTPUT
            ppFields            : IFields**'''
        return super(IQueryDescription, self).get_Fields()
    def get_Query(self):
        '''Method IQueryDescription.get_Query

           OUTPUT
            pQuery              : BSTR*'''
        return super(IQueryDescription, self).get_Query()
    def get_IsOIDMappedColumn(self):
        '''Method IQueryDescription.get_IsOIDMappedColumn

           OUTPUT
            pIsOIDMappedColumn  : VARIANT_BOOL*'''
        return super(IQueryDescription, self).get_IsOIDMappedColumn()
    def get_IsSpatialQuery(self):
        '''Method IQueryDescription.get_IsSpatialQuery

           OUTPUT
            pIsSpatialQuery     : VARIANT_BOOL*'''
        return super(IQueryDescription, self).get_IsSpatialQuery()
    Fields = property(get_Fields, None, None)
    GeometryType = property(get_GeometryType, put_GeometryType, None)
    IsOIDMappedColumn = property(get_IsOIDMappedColumn, None, None)
    IsSpatialQuery = property(get_IsSpatialQuery, None, None)
    OIDColumnName = property(get_OIDColumnName, None, None)
    OIDFields = property(get_OIDFields, put_OIDFields, None)
    Query = property(get_Query, None, None)
    ShapeColumnName = property(get_ShapeColumnName, None, None)
    SpatialReference = property(get_SpatialReference, put_SpatialReference, None)
    Srid = property(get_Srid, put_Srid, None)

class IQueryTableName(_esriGeoDatabase.IQueryTableName):
    _IID = uuid.UUID('ef234c65-4fc8-473f-8ca1-94b3dbc39b5b')

    def __init__(self, *args, **kw):
        super(IQueryTableName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_QueryDescription(self, ppQueryDescription):
        '''Method IQueryTableName.put_QueryDescription

           INPUT
            ppQueryDescription  : IQueryDescription*'''
        return super(IQueryTableName, self).put_QueryDescription(ppQueryDescription)
    def get_QueryDescription(self):
        '''Method IQueryTableName.get_QueryDescription

           OUTPUT
            ppQueryDescription  : IQueryDescription**'''
        return super(IQueryTableName, self).get_QueryDescription()
    def put_Query(self, pQuery):
        '''Method IQueryTableName.put_Query

           INPUT
            pQuery              : BSTR'''
        return super(IQueryTableName, self).put_Query(pQuery)
    def get_Query(self):
        '''Method IQueryTableName.get_Query

           OUTPUT
            pQuery              : BSTR*'''
        return super(IQueryTableName, self).get_Query()
    Query = property(get_Query, put_Query, None)
    QueryDescription = property(get_QueryDescription, put_QueryDescription, None)

class IFeatureClassCreation(_esriGeoDatabase.IFeatureClassCreation):
    _IID = uuid.UUID('60749651-4f54-11d2-89fc-006097aff44e')
    def get_CanCreateFromPoint(self):
        '''Method IFeatureClassCreation.get_CanCreateFromPoint

           OUTPUT
            CanCreateFromPoint  : VARIANT_BOOL*'''
        return super(IFeatureClassCreation, self).get_CanCreateFromPoint()
    CanCreateFromPoint = property(get_CanCreateFromPoint, None, None)

class IInvalidArea(_esriGeoDatabase.IInvalidArea):
    _IID = uuid.UUID('a802ba73-d947-11d1-8484-0000f875b9c6')

    def __init__(self, *args, **kw):
        super(IInvalidArea, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Display(self):
        '''Method IInvalidArea.get_Display

           OUTPUT
            dpy                 : IScreenDisplay**'''
        return super(IInvalidArea, self).get_Display()
    def putref_Display(self, dpy):
        '''Method IInvalidArea.putref_Display

           INPUT
            dpy                 : IScreenDisplay*'''
        return super(IInvalidArea, self).putref_Display(dpy)
    def Add(self, thing):
        '''Method IInvalidArea.Add

           INPUT
            thing               : IUnknown*'''
        return super(IInvalidArea, self).Add(thing)
    def Invalidate(self, screenCache):
        '''Method IInvalidArea.Invalidate

           INPUT
            screenCache         : short'''
        return super(IInvalidArea, self).Invalidate(screenCache)
    Display = property(get_Display, putref_Display, None)

class IFeatureDraw(_esriGeoDatabase.IFeatureDraw):
    _IID = uuid.UUID('b0e8d294-3a9c-11d1-9aa1-080009ec734b')

    def __init__(self, *args, **kw):
        super(IFeatureDraw, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Draw(self, drawPhase, Display, symbol, symbolInstalled, Geometry, drawStyle):
        '''Method IFeatureDraw.Draw

           INPUTS
            drawPhase           : esriDrawPhase
            Display             : IDisplay*
            symbol              : ISymbol*
            symbolInstalled     : VARIANT_BOOL
            Geometry            : IGeometry*
            drawStyle           : esriDrawStyle'''
        return super(IFeatureDraw, self).Draw(drawPhase, Display, symbol, symbolInstalled, Geometry, drawStyle)
    def putref_InvalidArea(self, InvalidArea):
        '''Method IFeatureDraw.putref_InvalidArea

           INPUT
            InvalidArea         : IInvalidArea*'''
        return super(IFeatureDraw, self).putref_InvalidArea(InvalidArea)
    def get_InvalidArea(self):
        '''Method IFeatureDraw.get_InvalidArea

           OUTPUT
            InvalidArea         : IInvalidArea**'''
        return super(IFeatureDraw, self).get_InvalidArea()
    InvalidArea = property(get_InvalidArea, putref_InvalidArea, None)

class IRowEdit(_esriGeoDatabase.IRowEdit):
    _IID = uuid.UUID('192ada11-33f1-11d3-9f6a-00c04f6bdf0c')
    def DeleteSet(self, Rows):
        '''Method IRowEdit.DeleteSet

           INPUT
            Rows                : ISet*'''
        return super(IRowEdit, self).DeleteSet(Rows)

class IFeatureSimplify(_esriGeoDatabase.IFeatureSimplify):
    _IID = uuid.UUID('10e6443f-fecb-11d3-9fa5-00c04f6bdf0c')
    def SimplifyGeometry(self, Geometry):
        '''Method IFeatureSimplify.SimplifyGeometry

           INPUT
            Geometry            : IGeometry*'''
        return super(IFeatureSimplify, self).SimplifyGeometry(Geometry)

class IFeatureSimplify2(_esriGeoDatabase.IFeatureSimplify2):
    _IID = uuid.UUID('0a9035f6-9e34-473d-bdfb-35663ea162b7')
    def get_IsSimpleGeometry(self, Geometry):
        '''Method IFeatureSimplify2.get_IsSimpleGeometry

           INPUT
            Geometry            : IGeometry*

           OUTPUTS
            reason              : esriNonSimpleReasonEnum*
            IsSimpleGeometry    : VARIANT_BOOL*'''
        return super(IFeatureSimplify2, self).get_IsSimpleGeometry(Geometry)
    def SimplifyGeometry(self, Geometry):
        '''Method IFeatureSimplify.SimplifyGeometry (from IFeatureSimplify)

           INPUT
            Geometry            : IGeometry*'''
        return super(IFeatureSimplify2, self).SimplifyGeometry(Geometry)

class IQueryFilter2(_esriGeoDatabase.IQueryFilter2):
    _IID = uuid.UUID('e5b21410-17a6-11d4-9f4b-00c04f79927c')

    def __init__(self, *args, **kw):
        super(IQueryFilter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialResolution(self):
        '''Method IQueryFilter2.get_SpatialResolution

           OUTPUT
            resolution          : double*'''
        return super(IQueryFilter2, self).get_SpatialResolution()
    def put_SpatialResolution(self, resolution):
        '''Method IQueryFilter2.put_SpatialResolution

           INPUT
            resolution          : double'''
        return super(IQueryFilter2, self).put_SpatialResolution(resolution)
    def get_SubFields(self):
        '''Method IQueryFilter.get_SubFields (from IQueryFilter)

           OUTPUT
            SubFields           : BSTR*'''
        return super(IQueryFilter2, self).get_SubFields()
    def put_SubFields(self, SubFields):
        '''Method IQueryFilter.put_SubFields (from IQueryFilter)

           INPUT
            SubFields           : BSTR'''
        return super(IQueryFilter2, self).put_SubFields(SubFields)
    def AddField(self, subField):
        '''Method IQueryFilter.AddField (from IQueryFilter)

           INPUT
            subField            : BSTR'''
        return super(IQueryFilter2, self).AddField(subField)
    def get_WhereClause(self):
        '''Method IQueryFilter.get_WhereClause (from IQueryFilter)

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IQueryFilter2, self).get_WhereClause()
    def put_WhereClause(self, WhereClause):
        '''Method IQueryFilter.put_WhereClause (from IQueryFilter)

           INPUT
            WhereClause         : BSTR'''
        return super(IQueryFilter2, self).put_WhereClause(WhereClause)
    def get_OutputSpatialReference(self, FieldName):
        '''Method IQueryFilter.get_OutputSpatialReference (from IQueryFilter)

           INPUT
            FieldName           : BSTR

           OUTPUT
            OutputSpatialReference: ISpatialReference**'''
        return super(IQueryFilter2, self).get_OutputSpatialReference(FieldName)
    def putref_OutputSpatialReference(self, FieldName, OutputSpatialReference):
        '''Method IQueryFilter.putref_OutputSpatialReference (from IQueryFilter)

           INPUTS
            FieldName           : BSTR
            OutputSpatialReference: ISpatialReference*'''
        return super(IQueryFilter2, self).putref_OutputSpatialReference(FieldName, OutputSpatialReference)
    OutputSpatialReference = property(None, putref_OutputSpatialReference, None)
    SpatialResolution = property(get_SpatialResolution, put_SpatialResolution, None)
    SubFields = property(get_SubFields, put_SubFields, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)
    OutputSpatialReference = IndexProperty(get_OutputSpatialReference, None)

class ISpatialFilter(_esriGeoDatabase.ISpatialFilter):
    _IID = uuid.UUID('fdfebd94-ed75-11d0-9a95-080009ec734b')

    def __init__(self, *args, **kw):
        super(ISpatialFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SearchOrder(self):
        '''Method ISpatialFilter.get_SearchOrder

           OUTPUT
            order               : esriSearchOrder*'''
        return super(ISpatialFilter, self).get_SearchOrder()
    def put_SearchOrder(self, order):
        '''Method ISpatialFilter.put_SearchOrder

           INPUT
            order               : esriSearchOrder'''
        return super(ISpatialFilter, self).put_SearchOrder(order)
    def get_SpatialRel(self):
        '''Method ISpatialFilter.get_SpatialRel

           OUTPUT
            SpatialRel          : esriSpatialRelEnum*'''
        return super(ISpatialFilter, self).get_SpatialRel()
    def put_SpatialRel(self, SpatialRel):
        '''Method ISpatialFilter.put_SpatialRel

           INPUT
            SpatialRel          : esriSpatialRelEnum'''
        return super(ISpatialFilter, self).put_SpatialRel(SpatialRel)
    def get_Geometry(self):
        '''Method ISpatialFilter.get_Geometry

           OUTPUT
            Geometry            : IGeometry**'''
        return super(ISpatialFilter, self).get_Geometry()
    def putref_Geometry(self, Geometry):
        '''Method ISpatialFilter.putref_Geometry

           INPUT
            Geometry            : IGeometry*'''
        return super(ISpatialFilter, self).putref_Geometry(Geometry)
    def putref_GeometryEx(self, Geometry, _arg2):
        '''Method ISpatialFilter.putref_GeometryEx

           INPUTS
            Geometry            : IGeometry*
            _arg2               : VARIANT_BOOL'''
        return super(ISpatialFilter, self).putref_GeometryEx(Geometry, _arg2)
    def get_FilterOwnsGeometry(self):
        '''Method ISpatialFilter.get_FilterOwnsGeometry

           OUTPUT
            spatialFilterOwnsGeometry: VARIANT_BOOL*'''
        return super(ISpatialFilter, self).get_FilterOwnsGeometry()
    def get_GeometryField(self):
        '''Method ISpatialFilter.get_GeometryField

           OUTPUT
            geomField           : BSTR*'''
        return super(ISpatialFilter, self).get_GeometryField()
    def put_GeometryField(self, geomField):
        '''Method ISpatialFilter.put_GeometryField

           INPUT
            geomField           : BSTR'''
        return super(ISpatialFilter, self).put_GeometryField(geomField)
    def get_SpatialRelDescription(self):
        '''Method ISpatialFilter.get_SpatialRelDescription

           OUTPUT
            SpatialRelDescription: BSTR*'''
        return super(ISpatialFilter, self).get_SpatialRelDescription()
    def put_SpatialRelDescription(self, SpatialRelDescription):
        '''Method ISpatialFilter.put_SpatialRelDescription

           INPUT
            SpatialRelDescription: BSTR'''
        return super(ISpatialFilter, self).put_SpatialRelDescription(SpatialRelDescription)
    def get_SubFields(self):
        '''Method IQueryFilter.get_SubFields (from IQueryFilter)

           OUTPUT
            SubFields           : BSTR*'''
        return super(ISpatialFilter, self).get_SubFields()
    def put_SubFields(self, SubFields):
        '''Method IQueryFilter.put_SubFields (from IQueryFilter)

           INPUT
            SubFields           : BSTR'''
        return super(ISpatialFilter, self).put_SubFields(SubFields)
    def AddField(self, subField):
        '''Method IQueryFilter.AddField (from IQueryFilter)

           INPUT
            subField            : BSTR'''
        return super(ISpatialFilter, self).AddField(subField)
    def get_WhereClause(self):
        '''Method IQueryFilter.get_WhereClause (from IQueryFilter)

           OUTPUT
            WhereClause         : BSTR*'''
        return super(ISpatialFilter, self).get_WhereClause()
    def put_WhereClause(self, WhereClause):
        '''Method IQueryFilter.put_WhereClause (from IQueryFilter)

           INPUT
            WhereClause         : BSTR'''
        return super(ISpatialFilter, self).put_WhereClause(WhereClause)
    def get_OutputSpatialReference(self, FieldName):
        '''Method IQueryFilter.get_OutputSpatialReference (from IQueryFilter)

           INPUT
            FieldName           : BSTR

           OUTPUT
            OutputSpatialReference: ISpatialReference**'''
        return super(ISpatialFilter, self).get_OutputSpatialReference(FieldName)
    def putref_OutputSpatialReference(self, FieldName, OutputSpatialReference):
        '''Method IQueryFilter.putref_OutputSpatialReference (from IQueryFilter)

           INPUTS
            FieldName           : BSTR
            OutputSpatialReference: ISpatialReference*'''
        return super(ISpatialFilter, self).putref_OutputSpatialReference(FieldName, OutputSpatialReference)
    FilterOwnsGeometry = property(get_FilterOwnsGeometry, None, None)
    Geometry = property(get_Geometry, putref_Geometry, None)
    GeometryEx = property(None, putref_GeometryEx, None)
    GeometryField = property(get_GeometryField, put_GeometryField, None)
    OutputSpatialReference = property(None, putref_OutputSpatialReference, None)
    SearchOrder = property(get_SearchOrder, put_SearchOrder, None)
    SpatialRel = property(get_SpatialRel, put_SpatialRel, None)
    SpatialRelDescription = property(get_SpatialRelDescription, put_SpatialRelDescription, None)
    SubFields = property(get_SubFields, put_SubFields, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)
    OutputSpatialReference = IndexProperty(get_OutputSpatialReference, None)

class ISQLCheck(_esriGeoDatabase.ISQLCheck):
    _IID = uuid.UUID('78482309-3abf-4556-925e-9a5f79cd6ed8')
    def CheckSelectList(self, selctList):
        '''Method ISQLCheck.CheckSelectList

           INPUT
            selctList           : BSTR'''
        return super(ISQLCheck, self).CheckSelectList(selctList)
    def CheckWhereClause(self, WhereClause):
        '''Method ISQLCheck.CheckWhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(ISQLCheck, self).CheckWhereClause(WhereClause)

class ITableSortCallBack(_esriGeoDatabase.ITableSortCallBack):
    _IID = uuid.UUID('341943f3-9450-11d2-a087-0000f8775bf9')
    def Compare(self, value1, value2, FieldIndex, fieldSortIndex):
        '''Method ITableSortCallBack.Compare

           INPUTS
            value1              : VARIANT
            value2              : VARIANT
            FieldIndex          : long
            fieldSortIndex      : long

           OUTPUT
            result              : int*'''
        return super(ITableSortCallBack, self).Compare(value1, value2, FieldIndex, fieldSortIndex)

class IFieldInfo(_esriGeoDatabase.IFieldInfo):
    _IID = uuid.UUID('a2baae2c-969b-11d2-ae77-080009ec732a')

    def __init__(self, *args, **kw):
        super(IFieldInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method IFieldInfo.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IFieldInfo, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IFieldInfo.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IFieldInfo, self).put_Visible(Visible)
    def get_Alias(self):
        '''Method IFieldInfo.get_Alias

           OUTPUT
            AliasName           : BSTR*'''
        return super(IFieldInfo, self).get_Alias()
    def put_Alias(self, AliasName):
        '''Method IFieldInfo.put_Alias

           INPUT
            AliasName           : BSTR'''
        return super(IFieldInfo, self).put_Alias(AliasName)
    def get_NumberFormat(self):
        '''Method IFieldInfo.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IFieldInfo, self).get_NumberFormat()
    def putref_NumberFormat(self, Format):
        '''Method IFieldInfo.putref_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IFieldInfo, self).putref_NumberFormat(Format)
    def get_AsString(self, Value):
        '''Method IFieldInfo.get_AsString

           INPUT
            Value               : VARIANT

           OUTPUT
            stringRep           : BSTR*'''
        return super(IFieldInfo, self).get_AsString(Value)
    Alias = property(get_Alias, put_Alias, None)
    NumberFormat = property(get_NumberFormat, putref_NumberFormat, None)
    Visible = property(get_Visible, put_Visible, None)
    AsString = IndexProperty(get_AsString, None)

class ITableFields(_esriGeoDatabase.ITableFields):
    _IID = uuid.UUID('e5966b0a-e3d9-11d3-a096-00c04f6bc626')
    def get_FieldCount(self):
        '''Method ITableFields.get_FieldCount

           OUTPUT
            Count               : long*'''
        return super(ITableFields, self).get_FieldCount()
    def get_Field(self, Index):
        '''Method ITableFields.get_Field

           INPUT
            Index               : long

           OUTPUT
            Field               : IField**'''
        return super(ITableFields, self).get_Field(Index)
    def get_FieldInfo(self, Index):
        '''Method ITableFields.get_FieldInfo

           INPUT
            Index               : long

           OUTPUT
            FieldInfo           : IFieldInfo**'''
        return super(ITableFields, self).get_FieldInfo(Index)
    def FindField(self, FieldName):
        '''Method ITableFields.FindField

           INPUT
            FieldName           : BSTR

           OUTPUT
            Index               : long*'''
        return super(ITableFields, self).FindField(FieldName)
    FieldCount = property(get_FieldCount, None, None)
    Field = IndexProperty(get_Field, None)
    FieldInfo = IndexProperty(get_FieldInfo, None)

class ISimpleEdgeFeature(_esriGeoDatabase.ISimpleEdgeFeature):
    _IID = uuid.UUID('4dbc418c-ea1a-11d1-aa91-00c04fa37b81')
    def get_EID(self):
        '''Method ISimpleEdgeFeature.get_EID

           OUTPUT
            ElementID           : long*'''
        return super(ISimpleEdgeFeature, self).get_EID()
    EID = property(get_EID, None, None)

class IComplexNetworkFeature(_esriGeoDatabase.IComplexNetworkFeature):
    _IID = uuid.UUID('6bd2b5c0-c503-11d1-aea9-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IComplexNetworkFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EdgeElementCount(self):
        '''Method IComplexNetworkFeature.get_EdgeElementCount

           OUTPUT
            numEdges            : long*'''
        return super(IComplexNetworkFeature, self).get_EdgeElementCount()
    def FindEdgeEID(self, point):
        '''Method IComplexNetworkFeature.FindEdgeEID

           INPUT
            point               : IPoint*

           OUTPUT
            edgeEID             : long*'''
        return super(IComplexNetworkFeature, self).FindEdgeEID(point)
    def get_EnabledByIndex(self, edgeIndex):
        '''Method IComplexNetworkFeature.get_EnabledByIndex

           INPUT
            edgeIndex           : long

           OUTPUT
            isEnabled           : VARIANT_BOOL*'''
        return super(IComplexNetworkFeature, self).get_EnabledByIndex(edgeIndex)
    def put_EnabledByIndex(self, edgeIndex, isEnabled):
        '''Method IComplexNetworkFeature.put_EnabledByIndex

           INPUTS
            edgeIndex           : long
            isEnabled           : VARIANT_BOOL'''
        return super(IComplexNetworkFeature, self).put_EnabledByIndex(edgeIndex, isEnabled)
    EdgeElementCount = property(get_EdgeElementCount, None, None)
    EnabledByIndex = property(None, put_EnabledByIndex, None)
    EnabledByIndex = IndexProperty(get_EnabledByIndex, None)

class IFIDSet2(_esriGeoDatabase.IFIDSet2):
    _IID = uuid.UUID('6ebaadc0-7541-46a4-82d7-4842ec9b1e55')
    def get_IDs(self):
        '''Method IFIDSet2.get_IDs

           OUTPUT
            EnumIDs             : IEnumIDs**'''
        return super(IFIDSet2, self).get_IDs()
    def Add(self, fID):
        '''Method IFIDSet.Add (from IFIDSet)

           INPUT
            fID                 : long'''
        return super(IFIDSet2, self).Add(fID)
    def Delete(self, fID):
        '''Method IFIDSet.Delete (from IFIDSet)

           INPUT
            fID                 : long'''
        return super(IFIDSet2, self).Delete(fID)
    def Find(self, fID):
        '''Method IFIDSet.Find (from IFIDSet)

           INPUT
            fID                 : long

           OUTPUT
            doesExist           : VARIANT_BOOL*'''
        return super(IFIDSet2, self).Find(fID)
    def Next(self):
        '''Method IFIDSet.Next (from IFIDSet)

           OUTPUT
            fID                 : long*'''
        return super(IFIDSet2, self).Next()
    def __iter__(self):
        try:
            super(IFIDSet2, self).Reset()
            val = super(IFIDSet2, self).Next()
            while val:
                yield val
                val = super(IFIDSet2, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IFIDSet.Reset (from IFIDSet)'''
        return super(IFIDSet2, self).Reset()
    def Count(self):
        '''Method IFIDSet.Count (from IFIDSet)

           OUTPUT
            Count               : long*'''
        return super(IFIDSet2, self).Count()
    def SetEmpty(self):
        '''Method IFIDSet.SetEmpty (from IFIDSet)'''
        return super(IFIDSet2, self).SetEmpty()
    IDs = property(get_IDs, None, None)

class ITopologyRule(_esriGeoDatabase.ITopologyRule):
    _IID = uuid.UUID('a53b59a5-2efc-41c4-9769-c0faa13e62e9')

    def __init__(self, *args, **kw):
        super(ITopologyRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ITopologyRule.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ITopologyRule, self).get_Name()
    def put_Name(self, Name):
        '''Method ITopologyRule.put_Name

           INPUT
            Name                : BSTR'''
        return super(ITopologyRule, self).put_Name(Name)
    def get_GUID(self):
        '''Method ITopologyRule.get_GUID

           OUTPUT
            GUID                : BSTR*'''
        return super(ITopologyRule, self).get_GUID()
    def get_OriginClassID(self):
        '''Method ITopologyRule.get_OriginClassID

           OUTPUT
            ClassID             : long*'''
        return super(ITopologyRule, self).get_OriginClassID()
    def put_OriginClassID(self, ClassID):
        '''Method ITopologyRule.put_OriginClassID

           INPUT
            ClassID             : long'''
        return super(ITopologyRule, self).put_OriginClassID(ClassID)
    def get_OriginSubtype(self):
        '''Method ITopologyRule.get_OriginSubtype

           OUTPUT
            SubType             : long*'''
        return super(ITopologyRule, self).get_OriginSubtype()
    def put_OriginSubtype(self, SubType):
        '''Method ITopologyRule.put_OriginSubtype

           INPUT
            SubType             : long'''
        return super(ITopologyRule, self).put_OriginSubtype(SubType)
    def get_DestinationClassID(self):
        '''Method ITopologyRule.get_DestinationClassID

           OUTPUT
            ClassID             : long*'''
        return super(ITopologyRule, self).get_DestinationClassID()
    def put_DestinationClassID(self, ClassID):
        '''Method ITopologyRule.put_DestinationClassID

           INPUT
            ClassID             : long'''
        return super(ITopologyRule, self).put_DestinationClassID(ClassID)
    def get_DestinationSubtype(self):
        '''Method ITopologyRule.get_DestinationSubtype

           OUTPUT
            SubType             : long*'''
        return super(ITopologyRule, self).get_DestinationSubtype()
    def put_DestinationSubtype(self, SubType):
        '''Method ITopologyRule.put_DestinationSubtype

           INPUT
            SubType             : long'''
        return super(ITopologyRule, self).put_DestinationSubtype(SubType)
    def get_TopologyRuleType(self):
        '''Method ITopologyRule.get_TopologyRuleType

           OUTPUT
            ruleType            : esriTopologyRuleType*'''
        return super(ITopologyRule, self).get_TopologyRuleType()
    def put_TopologyRuleType(self, ruleType):
        '''Method ITopologyRule.put_TopologyRuleType

           INPUT
            ruleType            : esriTopologyRuleType'''
        return super(ITopologyRule, self).put_TopologyRuleType(ruleType)
    def get_TriggerErrorEvents(self):
        '''Method ITopologyRule.get_TriggerErrorEvents

           OUTPUT
            errorEvents         : VARIANT_BOOL*'''
        return super(ITopologyRule, self).get_TriggerErrorEvents()
    def put_TriggerErrorEvents(self, errorEvents):
        '''Method ITopologyRule.put_TriggerErrorEvents

           INPUT
            errorEvents         : VARIANT_BOOL'''
        return super(ITopologyRule, self).put_TriggerErrorEvents(errorEvents)
    def ErrorShapeTypes(self):
        '''Method ITopologyRule.ErrorShapeTypes

           OUTPUTS
            multipoints         : VARIANT_BOOL*
            polylines           : VARIANT_BOOL*
            polygons            : VARIANT_BOOL*'''
        return super(ITopologyRule, self).ErrorShapeTypes()
    def get_AllOriginSubtypes(self):
        '''Method ITopologyRule.get_AllOriginSubtypes

           OUTPUT
            allSubtypes         : VARIANT_BOOL*'''
        return super(ITopologyRule, self).get_AllOriginSubtypes()
    def put_AllOriginSubtypes(self, allSubtypes):
        '''Method ITopologyRule.put_AllOriginSubtypes

           INPUT
            allSubtypes         : VARIANT_BOOL'''
        return super(ITopologyRule, self).put_AllOriginSubtypes(allSubtypes)
    def get_AllDestinationSubtypes(self):
        '''Method ITopologyRule.get_AllDestinationSubtypes

           OUTPUT
            allSubtypes         : VARIANT_BOOL*'''
        return super(ITopologyRule, self).get_AllDestinationSubtypes()
    def put_AllDestinationSubtypes(self, allSubtypes):
        '''Method ITopologyRule.put_AllDestinationSubtypes

           INPUT
            allSubtypes         : VARIANT_BOOL'''
        return super(ITopologyRule, self).put_AllDestinationSubtypes(allSubtypes)
    def get_OriginSubtypeSpecified(self):
        '''Method ITopologyRule.get_OriginSubtypeSpecified

           OUTPUT
            subtypeSpecified    : VARIANT_BOOL*'''
        return super(ITopologyRule, self).get_OriginSubtypeSpecified()
    def get_DestinationSubtypeSpecified(self):
        '''Method ITopologyRule.get_DestinationSubtypeSpecified

           OUTPUT
            subtypeSpecified    : VARIANT_BOOL*'''
        return super(ITopologyRule, self).get_DestinationSubtypeSpecified()
    AllDestinationSubtypes = property(get_AllDestinationSubtypes, put_AllDestinationSubtypes, None)
    AllOriginSubtypes = property(get_AllOriginSubtypes, put_AllOriginSubtypes, None)
    DestinationClassID = property(get_DestinationClassID, put_DestinationClassID, None)
    DestinationSubtype = property(get_DestinationSubtype, put_DestinationSubtype, None)
    DestinationSubtypeSpecified = property(get_DestinationSubtypeSpecified, None, None)
    GUID = property(get_GUID, None, None)
    Name = property(get_Name, put_Name, None)
    OriginClassID = property(get_OriginClassID, put_OriginClassID, None)
    OriginSubtype = property(get_OriginSubtype, put_OriginSubtype, None)
    OriginSubtypeSpecified = property(get_OriginSubtypeSpecified, None, None)
    TopologyRuleType = property(get_TopologyRuleType, put_TopologyRuleType, None)
    TriggerErrorEvents = property(get_TriggerErrorEvents, put_TriggerErrorEvents, None)

class IDEDataset(_esriGeoDatabase.IDEDataset):
    _IID = uuid.UUID('29fbed10-a332-11d5-931b-0080c71a3226')

    def __init__(self, *args, **kw):
        super(IDEDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DatasetType(self):
        '''Method IDEDataset.get_DatasetType

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IDEDataset, self).get_DatasetType()
    def put_DatasetType(self, Type):
        '''Method IDEDataset.put_DatasetType

           INPUT
            Type                : esriDatasetType'''
        return super(IDEDataset, self).put_DatasetType(Type)
    def get_Versioned(self):
        '''Method IDEDataset.get_Versioned

           OUTPUT
            Versioned           : VARIANT_BOOL*'''
        return super(IDEDataset, self).get_Versioned()
    def put_Versioned(self, Versioned):
        '''Method IDEDataset.put_Versioned

           INPUT
            Versioned           : VARIANT_BOOL'''
        return super(IDEDataset, self).put_Versioned(Versioned)
    def get_DSID(self):
        '''Method IDEDataset.get_DSID

           OUTPUT
            DSID                : long*'''
        return super(IDEDataset, self).get_DSID()
    def put_DSID(self, DSID):
        '''Method IDEDataset.put_DSID

           INPUT
            DSID                : long'''
        return super(IDEDataset, self).put_DSID(DSID)
    def get_CanVersion(self):
        '''Method IDEDataset.get_CanVersion

           OUTPUT
            CanVersion          : VARIANT_BOOL*'''
        return super(IDEDataset, self).get_CanVersion()
    def put_CanVersion(self, CanVersion):
        '''Method IDEDataset.put_CanVersion

           INPUT
            CanVersion          : VARIANT_BOOL'''
        return super(IDEDataset, self).put_CanVersion(CanVersion)
    CanVersion = property(get_CanVersion, put_CanVersion, None)
    DSID = property(get_DSID, put_DSID, None)
    DatasetType = property(get_DatasetType, put_DatasetType, None)
    Versioned = property(get_Versioned, put_Versioned, None)

class IGPReplicaDataset(_esriGeoDatabase.IGPReplicaDataset):
    _IID = uuid.UUID('7b913e1b-4de7-4d37-82fc-81e458964cd6')

    def __init__(self, *args, **kw):
        super(IGPReplicaDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, Name):
        '''Method IGPReplicaDataset.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPReplicaDataset, self).put_Name(Name)
    def get_Name(self):
        '''Method IGPReplicaDataset.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPReplicaDataset, self).get_Name()
    def put_DatasetType(self, DatasetType):
        '''Method IGPReplicaDataset.put_DatasetType

           INPUT
            DatasetType         : esriDatasetType'''
        return super(IGPReplicaDataset, self).put_DatasetType(DatasetType)
    def get_DatasetType(self):
        '''Method IGPReplicaDataset.get_DatasetType

           OUTPUT
            DatasetType         : esriDatasetType*'''
        return super(IGPReplicaDataset, self).get_DatasetType()
    def put_RowsType(self, RowsType):
        '''Method IGPReplicaDataset.put_RowsType

           INPUT
            RowsType            : esriRowsType'''
        return super(IGPReplicaDataset, self).put_RowsType(RowsType)
    def get_RowsType(self):
        '''Method IGPReplicaDataset.get_RowsType

           OUTPUT
            RowsType            : esriRowsType*'''
        return super(IGPReplicaDataset, self).get_RowsType()
    def put_IsPrivate(self, IsPrivate):
        '''Method IGPReplicaDataset.put_IsPrivate

           INPUT
            IsPrivate           : VARIANT_BOOL'''
        return super(IGPReplicaDataset, self).put_IsPrivate(IsPrivate)
    def get_IsPrivate(self):
        '''Method IGPReplicaDataset.get_IsPrivate

           OUTPUT
            IsPrivate           : VARIANT_BOOL*'''
        return super(IGPReplicaDataset, self).get_IsPrivate()
    def put_UseGeometry(self, UseGeometry):
        '''Method IGPReplicaDataset.put_UseGeometry

           INPUT
            UseGeometry         : VARIANT_BOOL'''
        return super(IGPReplicaDataset, self).put_UseGeometry(UseGeometry)
    def get_UseGeometry(self):
        '''Method IGPReplicaDataset.get_UseGeometry

           OUTPUT
            UseGeometry         : VARIANT_BOOL*'''
        return super(IGPReplicaDataset, self).get_UseGeometry()
    def put_DefQuery(self, DefQuery):
        '''Method IGPReplicaDataset.put_DefQuery

           INPUT
            DefQuery            : BSTR'''
        return super(IGPReplicaDataset, self).put_DefQuery(DefQuery)
    def get_DefQuery(self):
        '''Method IGPReplicaDataset.get_DefQuery

           OUTPUT
            DefQuery            : BSTR*'''
        return super(IGPReplicaDataset, self).get_DefQuery()
    def putref_SelectionIDs(self, LongArray):
        '''Method IGPReplicaDataset.putref_SelectionIDs

           INPUT
            LongArray           : ILongArray*'''
        return super(IGPReplicaDataset, self).putref_SelectionIDs(LongArray)
    def get_SelectionIDs(self):
        '''Method IGPReplicaDataset.get_SelectionIDs

           OUTPUT
            LongArray           : ILongArray**'''
        return super(IGPReplicaDataset, self).get_SelectionIDs()
    def put_RelExtractDirection(self, RelExtractDir):
        '''Method IGPReplicaDataset.put_RelExtractDirection

           INPUT
            RelExtractDir       : esriRelExtractDirection'''
        return super(IGPReplicaDataset, self).put_RelExtractDirection(RelExtractDir)
    def get_RelExtractDirection(self):
        '''Method IGPReplicaDataset.get_RelExtractDirection

           OUTPUT
            RelExtractDir       : esriRelExtractDirection*'''
        return super(IGPReplicaDataset, self).get_RelExtractDirection()
    def put_RelOriginClass(self, OriginClass):
        '''Method IGPReplicaDataset.put_RelOriginClass

           INPUT
            OriginClass         : BSTR'''
        return super(IGPReplicaDataset, self).put_RelOriginClass(OriginClass)
    def get_RelOriginClass(self):
        '''Method IGPReplicaDataset.get_RelOriginClass

           OUTPUT
            OriginClass         : BSTR*'''
        return super(IGPReplicaDataset, self).get_RelOriginClass()
    def put_RelDestinationClass(self, destClass):
        '''Method IGPReplicaDataset.put_RelDestinationClass

           INPUT
            destClass           : BSTR'''
        return super(IGPReplicaDataset, self).put_RelDestinationClass(destClass)
    def get_RelDestinationClass(self):
        '''Method IGPReplicaDataset.get_RelDestinationClass

           OUTPUT
            destClass           : BSTR*'''
        return super(IGPReplicaDataset, self).get_RelDestinationClass()
    DatasetType = property(get_DatasetType, put_DatasetType, None)
    DefQuery = property(get_DefQuery, put_DefQuery, None)
    IsPrivate = property(get_IsPrivate, put_IsPrivate, None)
    Name = property(get_Name, put_Name, None)
    RelDestinationClass = property(get_RelDestinationClass, put_RelDestinationClass, None)
    RelExtractDirection = property(get_RelExtractDirection, put_RelExtractDirection, None)
    RelOriginClass = property(get_RelOriginClass, put_RelOriginClass, None)
    RowsType = property(get_RowsType, put_RowsType, None)
    SelectionIDs = property(get_SelectionIDs, putref_SelectionIDs, None)
    UseGeometry = property(get_UseGeometry, put_UseGeometry, None)

class IGPReplicaDatasets(_esriGeoDatabase.IGPReplicaDatasets):
    _IID = uuid.UUID('871e789a-bb4d-4cf6-822e-6b6befa4e76e')
    def get_Count(self):
        '''Method IGPReplicaDatasets.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPReplicaDatasets, self).get_Count()
    def get_Element(self, Index):
        '''Method IGPReplicaDatasets.get_Element

           INPUT
            Index               : long

           OUTPUT
            GPReplicaDataset    : IGPReplicaDataset**'''
        return super(IGPReplicaDatasets, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGPReplicaDatasets.Remove

           INPUT
            Index               : long'''
        return super(IGPReplicaDatasets, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGPReplicaDatasets.RemoveAll'''
        return super(IGPReplicaDatasets, self).RemoveAll()
    def Add(self, GPReplicaDataset):
        '''Method IGPReplicaDatasets.Add

           INPUT
            GPReplicaDataset    : IGPReplicaDataset*'''
        return super(IGPReplicaDatasets, self).Add(GPReplicaDataset)
    def Insert(self, Index, GPReplicaDataset):
        '''Method IGPReplicaDatasets.Insert

           INPUTS
            Index               : long
            GPReplicaDataset    : IGPReplicaDataset*'''
        return super(IGPReplicaDatasets, self).Insert(Index, GPReplicaDataset)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGPMessagesCallback(_esriGeoDatabase.IGPMessagesCallback):
    _IID = uuid.UUID('1264c9a8-0afe-4903-87ba-a39b1f72779d')
    def MessageAdded(self, Message):
        '''Method IGPMessagesCallback.MessageAdded

           INPUT
            Message             : IGPMessage*'''
        return super(IGPMessagesCallback, self).MessageAdded(Message)

class IGPMessages(_esriGeoDatabase.IGPMessages):
    _IID = uuid.UUID('0696aa9d-c26b-4a3e-89b7-3763ea11f16c')

    def __init__(self, *args, **kw):
        super(IGPMessages, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Callback(self, messagesCallback):
        '''Method IGPMessages.putref_Callback

           INPUT
            messagesCallback    : IGPMessagesCallback*'''
        return super(IGPMessages, self).putref_Callback(messagesCallback)
    def get_Callback(self):
        '''Method IGPMessages.get_Callback

           OUTPUT
            messagesCallback    : IGPMessagesCallback**'''
        return super(IGPMessages, self).get_Callback()
    def Clear(self):
        '''Method IGPMessages.Clear'''
        return super(IGPMessages, self).Clear()
    def Add(self, msg):
        '''Method IGPMessages.Add

           INPUT
            msg                 : IGPMessage*'''
        return super(IGPMessages, self).Add(msg)
    def AddWarning(self, Message):
        '''Method IGPMessages.AddWarning

           INPUT
            Message             : BSTR'''
        return super(IGPMessages, self).AddWarning(Message)
    def AddAbort(self, Message):
        '''Method IGPMessages.AddAbort

           INPUT
            Message             : BSTR'''
        return super(IGPMessages, self).AddAbort(Message)
    def AddError(self, ErrorCode, Message):
        '''Method IGPMessages.AddError

           INPUTS
            ErrorCode           : long
            Message             : BSTR'''
        return super(IGPMessages, self).AddError(ErrorCode, Message)
    def AddMessage(self, Message):
        '''Method IGPMessages.AddMessage

           INPUT
            Message             : BSTR'''
        return super(IGPMessages, self).AddMessage(Message)
    def AddMessages(self, Messages):
        '''Method IGPMessages.AddMessages

           INPUT
            Messages            : IGPMessages*'''
        return super(IGPMessages, self).AddMessages(Messages)
    def InitializeMessages(self, nMessages):
        '''Method IGPMessages.InitializeMessages

           INPUT
            nMessages           : long'''
        return super(IGPMessages, self).InitializeMessages(nMessages)
    def Replace(self, Index, msg):
        '''Method IGPMessages.Replace

           INPUTS
            Index               : long
            msg                 : IGPMessage*'''
        return super(IGPMessages, self).Replace(Index, msg)
    def ReplaceError(self, Index, ErrorCode, Message):
        '''Method IGPMessages.ReplaceError

           INPUTS
            Index               : long
            ErrorCode           : long
            Message             : BSTR'''
        return super(IGPMessages, self).ReplaceError(Index, ErrorCode, Message)
    def ReplaceWarning(self, Index, Message):
        '''Method IGPMessages.ReplaceWarning

           INPUTS
            Index               : long
            Message             : BSTR'''
        return super(IGPMessages, self).ReplaceWarning(Index, Message)
    def ReplaceAbort(self, Index, Message):
        '''Method IGPMessages.ReplaceAbort

           INPUTS
            Index               : long
            Message             : BSTR'''
        return super(IGPMessages, self).ReplaceAbort(Index, Message)
    def ReplaceMessage(self, Index, Message):
        '''Method IGPMessages.ReplaceMessage

           INPUTS
            Index               : long
            Message             : BSTR'''
        return super(IGPMessages, self).ReplaceMessage(Index, Message)
    def get_Count(self):
        '''Method IGPMessages.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPMessages, self).get_Count()
    def GetMessage(self, Index):
        '''Method IGPMessages.GetMessage

           INPUT
            Index               : long

           OUTPUT
            msg                 : IGPMessage**'''
        return super(IGPMessages, self).GetMessage(Index)
    def get_Messages(self):
        '''Method IGPMessages.get_Messages

           OUTPUT
            msgs                : IArray**'''
        return super(IGPMessages, self).get_Messages()
    def get_MaxSeverity(self):
        '''Method IGPMessages.get_MaxSeverity

           OUTPUT
            severity            : esriGPMessageSeverity*'''
        return super(IGPMessages, self).get_MaxSeverity()
    Callback = property(get_Callback, putref_Callback, None)
    Count = property(get_Count, None, None)
    MaxSeverity = property(get_MaxSeverity, None, None)
    Messages = property(get_Messages, None, None)

class IRecord(_esriGeoDatabase.IRecord):
    _IID = uuid.UUID('7fc39e06-d6f0-456d-b3f4-2ad431cc7ecf')

    def __init__(self, *args, **kw):
        super(IRecord, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IRecord.get_Count

           OUTPUT
            Count               : long*'''
        return super(IRecord, self).get_Count()
    def get_Value(self, Index):
        '''Method IRecord.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IRecord, self).get_Value(Index)
    def Add(self, Value):
        '''Method IRecord.Add

           INPUT
            Value               : VARIANT'''
        return super(IRecord, self).Add(Value)
    def put_Value(self, Index, Value):
        '''Method IRecord.put_Value

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IRecord, self).put_Value(Index, Value)
    Count = property(get_Count, None, None)
    Value = property(None, put_Value, None)
    Value = IndexProperty(get_Value, None)

class IAttachmentInfo(_esriGeoDatabase.IAttachmentInfo):
    _IID = uuid.UUID('74060067-8955-44da-8653-c18f388893ce')

    def __init__(self, *args, **kw):
        super(IAttachmentInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AttachmentID(self):
        '''Method IAttachmentInfo.get_AttachmentID

           OUTPUT
            attID               : long*'''
        return super(IAttachmentInfo, self).get_AttachmentID()
    def get_Name(self):
        '''Method IAttachmentInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IAttachmentInfo, self).get_Name()
    def put_Name(self, Name):
        '''Method IAttachmentInfo.put_Name

           INPUT
            Name                : BSTR'''
        return super(IAttachmentInfo, self).put_Name(Name)
    def get_ParentID(self):
        '''Method IAttachmentInfo.get_ParentID

           OUTPUT
            OID                 : long*'''
        return super(IAttachmentInfo, self).get_ParentID()
    def put_ParentID(self, OID):
        '''Method IAttachmentInfo.put_ParentID

           INPUT
            OID                 : long'''
        return super(IAttachmentInfo, self).put_ParentID(OID)
    def get_ContentType(self):
        '''Method IAttachmentInfo.get_ContentType

           OUTPUT
            ContentType         : BSTR*'''
        return super(IAttachmentInfo, self).get_ContentType()
    def put_ContentType(self, ContentType):
        '''Method IAttachmentInfo.put_ContentType

           INPUT
            ContentType         : BSTR'''
        return super(IAttachmentInfo, self).put_ContentType(ContentType)
    def get_Size(self):
        '''Method IAttachmentInfo.get_Size

           OUTPUT
            Size                : long*'''
        return super(IAttachmentInfo, self).get_Size()
    AttachmentID = property(get_AttachmentID, None, None)
    ContentType = property(get_ContentType, put_ContentType, None)
    Name = property(get_Name, put_Name, None)
    ParentID = property(get_ParentID, put_ParentID, None)
    Size = property(get_Size, None, None)

class IAttachmentData(_esriGeoDatabase.IAttachmentData):
    _IID = uuid.UUID('289e0bc8-26f4-4391-8a4b-87d6e133dff4')

    def __init__(self, *args, **kw):
        super(IAttachmentData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Data(self):
        '''Method IAttachmentData.get_Data

           OUTPUT
            Data                : SAFEARRAY**'''
        return super(IAttachmentData, self).get_Data()
    def put_Data(self, Data):
        '''Method IAttachmentData.put_Data

           INPUT
            Data                : SAFEARRAY*'''
        return super(IAttachmentData, self).put_Data(Data)
    def get_AttachmentInfo(self):
        '''Method IAttachmentData.get_AttachmentInfo

           OUTPUT
            AttachmentInfo      : IAttachmentInfo**'''
        return super(IAttachmentData, self).get_AttachmentInfo()
    def putref_AttachmentInfo(self, AttachmentInfo):
        '''Method IAttachmentData.putref_AttachmentInfo

           INPUT
            AttachmentInfo      : IAttachmentInfo*'''
        return super(IAttachmentData, self).putref_AttachmentInfo(AttachmentInfo)
    def get_URL(self):
        '''Method IAttachmentData.get_URL

           OUTPUT
            URL                 : BSTR*'''
        return super(IAttachmentData, self).get_URL()
    def put_URL(self, URL):
        '''Method IAttachmentData.put_URL

           INPUT
            URL                 : BSTR'''
        return super(IAttachmentData, self).put_URL(URL)
    def get_TransportType(self):
        '''Method IAttachmentData.get_TransportType

           OUTPUT
            pTransportType      : esriTransportType*'''
        return super(IAttachmentData, self).get_TransportType()
    def put_TransportType(self, pTransportType):
        '''Method IAttachmentData.put_TransportType

           INPUT
            pTransportType      : esriTransportType'''
        return super(IAttachmentData, self).put_TransportType(pTransportType)
    AttachmentInfo = property(get_AttachmentInfo, putref_AttachmentInfo, None)
    Data = property(get_Data, put_Data, None)
    TransportType = property(get_TransportType, put_TransportType, None)
    URL = property(get_URL, put_URL, None)

class IEditorTrackingInfo(_esriGeoDatabase.IEditorTrackingInfo):
    _IID = uuid.UUID('35bca9a4-d278-4d33-9486-c64df1b8e480')
    def get_CreationDateFieldName(self):
        '''Method IEditorTrackingInfo.get_CreationDateFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IEditorTrackingInfo, self).get_CreationDateFieldName()
    def get_CreatorFieldName(self):
        '''Method IEditorTrackingInfo.get_CreatorFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IEditorTrackingInfo, self).get_CreatorFieldName()
    def get_EditDateFieldName(self):
        '''Method IEditorTrackingInfo.get_EditDateFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IEditorTrackingInfo, self).get_EditDateFieldName()
    def get_EditorFieldName(self):
        '''Method IEditorTrackingInfo.get_EditorFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IEditorTrackingInfo, self).get_EditorFieldName()
    def get_TimeReference(self):
        '''Method IEditorTrackingInfo.get_TimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(IEditorTrackingInfo, self).get_TimeReference()
    def get_IsTimeInUTC(self):
        '''Method IEditorTrackingInfo.get_IsTimeInUTC

           OUTPUT
            IsTimeInUTC         : VARIANT_BOOL*'''
        return super(IEditorTrackingInfo, self).get_IsTimeInUTC()
    def get_Realm(self):
        '''Method IEditorTrackingInfo.get_Realm

           OUTPUT
            Realm               : BSTR*'''
        return super(IEditorTrackingInfo, self).get_Realm()
    CreationDateFieldName = property(get_CreationDateFieldName, None, None)
    CreatorFieldName = property(get_CreatorFieldName, None, None)
    EditDateFieldName = property(get_EditDateFieldName, None, None)
    EditorFieldName = property(get_EditorFieldName, None, None)
    IsTimeInUTC = property(get_IsTimeInUTC, None, None)
    Realm = property(get_Realm, None, None)
    TimeReference = property(get_TimeReference, None, None)

class IOwnershipBasedAccessControl(_esriGeoDatabase.IOwnershipBasedAccessControl):
    _IID = uuid.UUID('406812ad-189b-439d-a186-323e2b6e3cf5')
    def get_AllowOthersToDelete(self):
        '''Method IOwnershipBasedAccessControl.get_AllowOthersToDelete

           OUTPUT
            allow               : VARIANT_BOOL*'''
        return super(IOwnershipBasedAccessControl, self).get_AllowOthersToDelete()
    def get_AllowOthersToUpdate(self):
        '''Method IOwnershipBasedAccessControl.get_AllowOthersToUpdate

           OUTPUT
            allow               : VARIANT_BOOL*'''
        return super(IOwnershipBasedAccessControl, self).get_AllowOthersToUpdate()
    def get_Enabled(self):
        '''Method IOwnershipBasedAccessControl.get_Enabled

           OUTPUT
            Enabled             : VARIANT_BOOL*'''
        return super(IOwnershipBasedAccessControl, self).get_Enabled()
    AllowOthersToDelete = property(get_AllowOthersToDelete, None, None)
    AllowOthersToUpdate = property(get_AllowOthersToUpdate, None, None)
    Enabled = property(get_Enabled, None, None)

class ICoverageAnnotationFeature(_esriGeoDatabase.ICoverageAnnotationFeature):
    _IID = uuid.UUID('74793943-d70e-11d2-9f30-00c04f79927c')

    def __init__(self, *args, **kw):
        super(ICoverageAnnotationFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AnnotationBlob(self):
        '''Method ICoverageAnnotationFeature.get_AnnotationBlob

           OUTPUT
            annotation          : IMemoryBlobStream**'''
        return super(ICoverageAnnotationFeature, self).get_AnnotationBlob()
    def putref_AnnotationBlob(self, annotation):
        '''Method ICoverageAnnotationFeature.putref_AnnotationBlob

           INPUT
            annotation          : IMemoryBlobStream*'''
        return super(ICoverageAnnotationFeature, self).putref_AnnotationBlob(annotation)
    AnnotationBlob = property(get_AnnotationBlob, putref_AnnotationBlob, None)

class IFeatureClassManage(_esriGeoDatabase.IFeatureClassManage):
    _IID = uuid.UUID('0fb7a29c-11aa-406b-8096-26ac8ea27ba6')
    def UpdateExtent(self):
        '''Method IFeatureClassManage.UpdateExtent'''
        return super(IFeatureClassManage, self).UpdateExtent()

class IFeatureProject(_esriGeoDatabase.IFeatureProject):
    _IID = uuid.UUID('0ad74a92-b396-4819-ac73-bb6ccc5ca326')
    def Project(self, outputSR):
        '''Method IFeatureProject.Project

           INPUT
            outputSR            : ISpatialReference*'''
        return super(IFeatureProject, self).Project(outputSR)

class IFieldEdit(_esriGeoDatabase.IFieldEdit):
    _IID = uuid.UUID('300aa631-b207-11d0-beca-00805f7c4268')

    def __init__(self, *args, **kw):
        super(IFieldEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IFieldEdit.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IFieldEdit, self).put_Name(_arg1)
    def put_AliasName(self, _arg1):
        '''Method IFieldEdit.put_AliasName

           INPUT
            _arg1               : BSTR'''
        return super(IFieldEdit, self).put_AliasName(_arg1)
    def putref_Domain(self, _arg1):
        '''Method IFieldEdit.putref_Domain

           INPUT
            _arg1               : IDomain*'''
        return super(IFieldEdit, self).putref_Domain(_arg1)
    def put_DefaultValue(self, _arg1):
        '''Method IFieldEdit.put_DefaultValue

           INPUT
            _arg1               : VARIANT'''
        return super(IFieldEdit, self).put_DefaultValue(_arg1)
    def put_Type(self, _arg1):
        '''Method IFieldEdit.put_Type

           INPUT
            _arg1               : esriFieldType'''
        return super(IFieldEdit, self).put_Type(_arg1)
    def put_Length(self, _arg1):
        '''Method IFieldEdit.put_Length

           INPUT
            _arg1               : long'''
        return super(IFieldEdit, self).put_Length(_arg1)
    def put_Precision(self, _arg1):
        '''Method IFieldEdit.put_Precision

           INPUT
            _arg1               : long'''
        return super(IFieldEdit, self).put_Precision(_arg1)
    def put_Scale(self, _arg1):
        '''Method IFieldEdit.put_Scale

           INPUT
            _arg1               : long'''
        return super(IFieldEdit, self).put_Scale(_arg1)
    def put_IsNullable(self, _arg1):
        '''Method IFieldEdit.put_IsNullable

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit, self).put_IsNullable(_arg1)
    def putref_GeometryDef(self, _arg1):
        '''Method IFieldEdit.putref_GeometryDef

           INPUT
            _arg1               : IGeometryDef*'''
        return super(IFieldEdit, self).putref_GeometryDef(_arg1)
    def put_DomainFixed(self, _arg1):
        '''Method IFieldEdit.put_DomainFixed

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit, self).put_DomainFixed(_arg1)
    def put_Required(self, _arg1):
        '''Method IFieldEdit.put_Required

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit, self).put_Required(_arg1)
    def put_Editable(self, _arg1):
        '''Method IFieldEdit.put_Editable

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit, self).put_Editable(_arg1)
    def get_Name(self):
        '''Method IField.get_Name (from IField)

           OUTPUT
            Name                : BSTR*'''
        return super(IFieldEdit, self).get_Name()
    def get_AliasName(self):
        '''Method IField.get_AliasName (from IField)

           OUTPUT
            Name                : BSTR*'''
        return super(IFieldEdit, self).get_AliasName()
    def get_Type(self):
        '''Method IField.get_Type (from IField)

           OUTPUT
            Type                : esriFieldType*'''
        return super(IFieldEdit, self).get_Type()
    def get_Domain(self):
        '''Method IField.get_Domain (from IField)

           OUTPUT
            Domain              : IDomain**'''
        return super(IFieldEdit, self).get_Domain()
    def get_DefaultValue(self):
        '''Method IField.get_DefaultValue (from IField)

           OUTPUT
            Value               : VARIANT*'''
        return super(IFieldEdit, self).get_DefaultValue()
    def get_Length(self):
        '''Method IField.get_Length (from IField)

           OUTPUT
            Length              : long*'''
        return super(IFieldEdit, self).get_Length()
    def get_Precision(self):
        '''Method IField.get_Precision (from IField)

           OUTPUT
            Length              : long*'''
        return super(IFieldEdit, self).get_Precision()
    def get_Scale(self):
        '''Method IField.get_Scale (from IField)

           OUTPUT
            Length              : long*'''
        return super(IFieldEdit, self).get_Scale()
    def get_IsNullable(self):
        '''Method IField.get_IsNullable (from IField)

           OUTPUT
            IsNullable          : VARIANT_BOOL*'''
        return super(IFieldEdit, self).get_IsNullable()
    def get_GeometryDef(self):
        '''Method IField.get_GeometryDef (from IField)

           OUTPUT
            GeometryDef         : IGeometryDef**'''
        return super(IFieldEdit, self).get_GeometryDef()
    def get_VarType(self):
        '''Method IField.get_VarType (from IField)

           OUTPUT
            VarType             : long*'''
        return super(IFieldEdit, self).get_VarType()
    def get_DomainFixed(self):
        '''Method IField.get_DomainFixed (from IField)

           OUTPUT
            isFixed             : VARIANT_BOOL*'''
        return super(IFieldEdit, self).get_DomainFixed()
    def get_Required(self):
        '''Method IField.get_Required (from IField)

           OUTPUT
            IsRequired          : VARIANT_BOOL*'''
        return super(IFieldEdit, self).get_Required()
    def get_Editable(self):
        '''Method IField.get_Editable (from IField)

           OUTPUT
            IsEditable          : VARIANT_BOOL*'''
        return super(IFieldEdit, self).get_Editable()
    def CheckValue(self, Value):
        '''Method IField.CheckValue (from IField)

           INPUT
            Value               : VARIANT

           OUTPUT
            isValidValue        : VARIANT_BOOL*'''
        return super(IFieldEdit, self).CheckValue(Value)
    AliasName = property(get_AliasName, put_AliasName, None)
    DefaultValue = property(get_DefaultValue, put_DefaultValue, None)
    Domain = property(get_Domain, putref_Domain, None)
    DomainFixed = property(get_DomainFixed, put_DomainFixed, None)
    Editable = property(get_Editable, put_Editable, None)
    GeometryDef = property(get_GeometryDef, putref_GeometryDef, None)
    IsNullable = property(get_IsNullable, put_IsNullable, None)
    Length = property(get_Length, put_Length, None)
    Name = property(get_Name, put_Name, None)
    Precision = property(get_Precision, put_Precision, None)
    Required = property(get_Required, put_Required, None)
    Scale = property(get_Scale, put_Scale, None)
    Type = property(get_Type, put_Type, None)
    VarType = property(get_VarType, None, None)

class IField2(_esriGeoDatabase.IField2):
    _IID = uuid.UUID('f19f696b-f4f1-4066-9a7f-273754d9dc2a')
    def get_RasterDef(self):
        '''Method IField2.get_RasterDef

           OUTPUT
            RasterDef           : IRasterDef**'''
        return super(IField2, self).get_RasterDef()
    def get_Name(self):
        '''Method IField.get_Name (from IField)

           OUTPUT
            Name                : BSTR*'''
        return super(IField2, self).get_Name()
    def get_AliasName(self):
        '''Method IField.get_AliasName (from IField)

           OUTPUT
            Name                : BSTR*'''
        return super(IField2, self).get_AliasName()
    def get_Type(self):
        '''Method IField.get_Type (from IField)

           OUTPUT
            Type                : esriFieldType*'''
        return super(IField2, self).get_Type()
    def get_Domain(self):
        '''Method IField.get_Domain (from IField)

           OUTPUT
            Domain              : IDomain**'''
        return super(IField2, self).get_Domain()
    def get_DefaultValue(self):
        '''Method IField.get_DefaultValue (from IField)

           OUTPUT
            Value               : VARIANT*'''
        return super(IField2, self).get_DefaultValue()
    def get_Length(self):
        '''Method IField.get_Length (from IField)

           OUTPUT
            Length              : long*'''
        return super(IField2, self).get_Length()
    def get_Precision(self):
        '''Method IField.get_Precision (from IField)

           OUTPUT
            Length              : long*'''
        return super(IField2, self).get_Precision()
    def get_Scale(self):
        '''Method IField.get_Scale (from IField)

           OUTPUT
            Length              : long*'''
        return super(IField2, self).get_Scale()
    def get_IsNullable(self):
        '''Method IField.get_IsNullable (from IField)

           OUTPUT
            IsNullable          : VARIANT_BOOL*'''
        return super(IField2, self).get_IsNullable()
    def get_GeometryDef(self):
        '''Method IField.get_GeometryDef (from IField)

           OUTPUT
            GeometryDef         : IGeometryDef**'''
        return super(IField2, self).get_GeometryDef()
    def get_VarType(self):
        '''Method IField.get_VarType (from IField)

           OUTPUT
            VarType             : long*'''
        return super(IField2, self).get_VarType()
    def get_DomainFixed(self):
        '''Method IField.get_DomainFixed (from IField)

           OUTPUT
            isFixed             : VARIANT_BOOL*'''
        return super(IField2, self).get_DomainFixed()
    def get_Required(self):
        '''Method IField.get_Required (from IField)

           OUTPUT
            IsRequired          : VARIANT_BOOL*'''
        return super(IField2, self).get_Required()
    def get_Editable(self):
        '''Method IField.get_Editable (from IField)

           OUTPUT
            IsEditable          : VARIANT_BOOL*'''
        return super(IField2, self).get_Editable()
    def CheckValue(self, Value):
        '''Method IField.CheckValue (from IField)

           INPUT
            Value               : VARIANT

           OUTPUT
            isValidValue        : VARIANT_BOOL*'''
        return super(IField2, self).CheckValue(Value)
    AliasName = property(get_AliasName, None, None)
    DefaultValue = property(get_DefaultValue, None, None)
    Domain = property(get_Domain, None, None)
    DomainFixed = property(get_DomainFixed, None, None)
    Editable = property(get_Editable, None, None)
    GeometryDef = property(get_GeometryDef, None, None)
    IsNullable = property(get_IsNullable, None, None)
    Length = property(get_Length, None, None)
    Name = property(get_Name, None, None)
    Precision = property(get_Precision, None, None)
    RasterDef = property(get_RasterDef, None, None)
    Required = property(get_Required, None, None)
    Scale = property(get_Scale, None, None)
    Type = property(get_Type, None, None)
    VarType = property(get_VarType, None, None)

class IFieldEdit2(_esriGeoDatabase.IFieldEdit2):
    _IID = uuid.UUID('8bad0db3-a817-4dbb-9752-3faf6757e22c')

    def __init__(self, *args, **kw):
        super(IFieldEdit2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterDef(self):
        '''Method IFieldEdit2.get_RasterDef

           OUTPUT
            RasterDef           : IRasterDef**'''
        return super(IFieldEdit2, self).get_RasterDef()
    def putref_RasterDef(self, RasterDef):
        '''Method IFieldEdit2.putref_RasterDef

           INPUT
            RasterDef           : IRasterDef*'''
        return super(IFieldEdit2, self).putref_RasterDef(RasterDef)
    def put_Name(self, _arg1):
        '''Method IFieldEdit.put_Name (from IFieldEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IFieldEdit2, self).put_Name(_arg1)
    def put_AliasName(self, _arg1):
        '''Method IFieldEdit.put_AliasName (from IFieldEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IFieldEdit2, self).put_AliasName(_arg1)
    def putref_Domain(self, _arg1):
        '''Method IFieldEdit.putref_Domain (from IFieldEdit)

           INPUT
            _arg1               : IDomain*'''
        return super(IFieldEdit2, self).putref_Domain(_arg1)
    def put_DefaultValue(self, _arg1):
        '''Method IFieldEdit.put_DefaultValue (from IFieldEdit)

           INPUT
            _arg1               : VARIANT'''
        return super(IFieldEdit2, self).put_DefaultValue(_arg1)
    def put_Type(self, _arg1):
        '''Method IFieldEdit.put_Type (from IFieldEdit)

           INPUT
            _arg1               : esriFieldType'''
        return super(IFieldEdit2, self).put_Type(_arg1)
    def put_Length(self, _arg1):
        '''Method IFieldEdit.put_Length (from IFieldEdit)

           INPUT
            _arg1               : long'''
        return super(IFieldEdit2, self).put_Length(_arg1)
    def put_Precision(self, _arg1):
        '''Method IFieldEdit.put_Precision (from IFieldEdit)

           INPUT
            _arg1               : long'''
        return super(IFieldEdit2, self).put_Precision(_arg1)
    def put_Scale(self, _arg1):
        '''Method IFieldEdit.put_Scale (from IFieldEdit)

           INPUT
            _arg1               : long'''
        return super(IFieldEdit2, self).put_Scale(_arg1)
    def put_IsNullable(self, _arg1):
        '''Method IFieldEdit.put_IsNullable (from IFieldEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit2, self).put_IsNullable(_arg1)
    def putref_GeometryDef(self, _arg1):
        '''Method IFieldEdit.putref_GeometryDef (from IFieldEdit)

           INPUT
            _arg1               : IGeometryDef*'''
        return super(IFieldEdit2, self).putref_GeometryDef(_arg1)
    def put_DomainFixed(self, _arg1):
        '''Method IFieldEdit.put_DomainFixed (from IFieldEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit2, self).put_DomainFixed(_arg1)
    def put_Required(self, _arg1):
        '''Method IFieldEdit.put_Required (from IFieldEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit2, self).put_Required(_arg1)
    def put_Editable(self, _arg1):
        '''Method IFieldEdit.put_Editable (from IFieldEdit)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IFieldEdit2, self).put_Editable(_arg1)
    def get_Name(self):
        '''Method IField.get_Name (from IField)

           OUTPUT
            Name                : BSTR*'''
        return super(IFieldEdit2, self).get_Name()
    def get_AliasName(self):
        '''Method IField.get_AliasName (from IField)

           OUTPUT
            Name                : BSTR*'''
        return super(IFieldEdit2, self).get_AliasName()
    def get_Type(self):
        '''Method IField.get_Type (from IField)

           OUTPUT
            Type                : esriFieldType*'''
        return super(IFieldEdit2, self).get_Type()
    def get_Domain(self):
        '''Method IField.get_Domain (from IField)

           OUTPUT
            Domain              : IDomain**'''
        return super(IFieldEdit2, self).get_Domain()
    def get_DefaultValue(self):
        '''Method IField.get_DefaultValue (from IField)

           OUTPUT
            Value               : VARIANT*'''
        return super(IFieldEdit2, self).get_DefaultValue()
    def get_Length(self):
        '''Method IField.get_Length (from IField)

           OUTPUT
            Length              : long*'''
        return super(IFieldEdit2, self).get_Length()
    def get_Precision(self):
        '''Method IField.get_Precision (from IField)

           OUTPUT
            Length              : long*'''
        return super(IFieldEdit2, self).get_Precision()
    def get_Scale(self):
        '''Method IField.get_Scale (from IField)

           OUTPUT
            Length              : long*'''
        return super(IFieldEdit2, self).get_Scale()
    def get_IsNullable(self):
        '''Method IField.get_IsNullable (from IField)

           OUTPUT
            IsNullable          : VARIANT_BOOL*'''
        return super(IFieldEdit2, self).get_IsNullable()
    def get_GeometryDef(self):
        '''Method IField.get_GeometryDef (from IField)

           OUTPUT
            GeometryDef         : IGeometryDef**'''
        return super(IFieldEdit2, self).get_GeometryDef()
    def get_VarType(self):
        '''Method IField.get_VarType (from IField)

           OUTPUT
            VarType             : long*'''
        return super(IFieldEdit2, self).get_VarType()
    def get_DomainFixed(self):
        '''Method IField.get_DomainFixed (from IField)

           OUTPUT
            isFixed             : VARIANT_BOOL*'''
        return super(IFieldEdit2, self).get_DomainFixed()
    def get_Required(self):
        '''Method IField.get_Required (from IField)

           OUTPUT
            IsRequired          : VARIANT_BOOL*'''
        return super(IFieldEdit2, self).get_Required()
    def get_Editable(self):
        '''Method IField.get_Editable (from IField)

           OUTPUT
            IsEditable          : VARIANT_BOOL*'''
        return super(IFieldEdit2, self).get_Editable()
    def CheckValue(self, Value):
        '''Method IField.CheckValue (from IField)

           INPUT
            Value               : VARIANT

           OUTPUT
            isValidValue        : VARIANT_BOOL*'''
        return super(IFieldEdit2, self).CheckValue(Value)
    AliasName = property(get_AliasName, put_AliasName, None)
    DefaultValue = property(get_DefaultValue, put_DefaultValue, None)
    Domain = property(get_Domain, putref_Domain, None)
    DomainFixed = property(get_DomainFixed, put_DomainFixed, None)
    Editable = property(get_Editable, put_Editable, None)
    GeometryDef = property(get_GeometryDef, putref_GeometryDef, None)
    IsNullable = property(get_IsNullable, put_IsNullable, None)
    Length = property(get_Length, put_Length, None)
    Name = property(get_Name, put_Name, None)
    Precision = property(get_Precision, put_Precision, None)
    RasterDef = property(get_RasterDef, putref_RasterDef, None)
    Required = property(get_Required, put_Required, None)
    Scale = property(get_Scale, put_Scale, None)
    Type = property(get_Type, put_Type, None)
    VarType = property(get_VarType, None, None)

class IModelInfo(_esriGeoDatabase.IModelInfo):
    _IID = uuid.UUID('2d660904-1dbd-11d3-9f87-00c04f6bdd84')

    def __init__(self, *args, **kw):
        super(IModelInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ModelName(self):
        '''Method IModelInfo.get_ModelName

           OUTPUT
            Name                : BSTR*'''
        return super(IModelInfo, self).get_ModelName()
    def put_ModelName(self, Name):
        '''Method IModelInfo.put_ModelName

           INPUT
            Name                : BSTR'''
        return super(IModelInfo, self).put_ModelName(Name)
    ModelName = property(get_ModelName, put_ModelName, None)

class IFields2(_esriGeoDatabase.IFields2):
    _IID = uuid.UUID('c3eda031-6ec1-11d3-a024-00c04f6bdf0e')
    def FindFieldIgnoreQualification(self, sqlSyntax, Name):
        '''Method IFields2.FindFieldIgnoreQualification

           INPUTS
            sqlSyntax           : ISQLSyntax*
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IFields2, self).FindFieldIgnoreQualification(sqlSyntax, Name)
    def get_FieldCount(self):
        '''Method IFields.get_FieldCount (from IFields)

           OUTPUT
            numFields           : long*'''
        return super(IFields2, self).get_FieldCount()
    def get_Field(self, Index):
        '''Method IFields.get_Field (from IFields)

           INPUT
            Index               : long

           OUTPUT
            Field               : IField**'''
        return super(IFields2, self).get_Field(Index)
    def FindField(self, Name):
        '''Method IFields.FindField (from IFields)

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IFields2, self).FindField(Name)
    def FindFieldByAliasName(self, Name):
        '''Method IFields.FindFieldByAliasName (from IFields)

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IFields2, self).FindFieldByAliasName(Name)
    FieldCount = property(get_FieldCount, None, None)
    Field = IndexProperty(get_Field, None)

class IFieldsEdit(_esriGeoDatabase.IFieldsEdit):
    _IID = uuid.UUID('6b2072e4-23f7-11d1-89d8-006097aff44e')

    def __init__(self, *args, **kw):
        super(IFieldsEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FieldCount(self, _arg1):
        '''Method IFieldsEdit.put_FieldCount

           INPUT
            _arg1               : long'''
        return super(IFieldsEdit, self).put_FieldCount(_arg1)
    def putref_Field(self, Index, _arg2):
        '''Method IFieldsEdit.putref_Field

           INPUTS
            Index               : long
            _arg2               : IField*'''
        return super(IFieldsEdit, self).putref_Field(Index, _arg2)
    def AddField(self, Field):
        '''Method IFieldsEdit.AddField

           INPUT
            Field               : IField*'''
        return super(IFieldsEdit, self).AddField(Field)
    def DeleteField(self, Field):
        '''Method IFieldsEdit.DeleteField

           INPUT
            Field               : IField*'''
        return super(IFieldsEdit, self).DeleteField(Field)
    def DeleteAllFields(self):
        '''Method IFieldsEdit.DeleteAllFields'''
        return super(IFieldsEdit, self).DeleteAllFields()
    def get_FieldCount(self):
        '''Method IFields.get_FieldCount (from IFields)

           OUTPUT
            numFields           : long*'''
        return super(IFieldsEdit, self).get_FieldCount()
    def get_Field(self, Index):
        '''Method IFields.get_Field (from IFields)

           INPUT
            Index               : long

           OUTPUT
            Field               : IField**'''
        return super(IFieldsEdit, self).get_Field(Index)
    def FindField(self, Name):
        '''Method IFields.FindField (from IFields)

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IFieldsEdit, self).FindField(Name)
    def FindFieldByAliasName(self, Name):
        '''Method IFields.FindFieldByAliasName (from IFields)

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IFieldsEdit, self).FindFieldByAliasName(Name)
    Field = property(None, putref_Field, None)
    FieldCount = property(get_FieldCount, put_FieldCount, None)
    Field = IndexProperty(get_Field, None)

class IGeometryDefEdit(_esriGeoDatabase.IGeometryDefEdit):
    _IID = uuid.UUID('439a0d51-3915-11d1-9ca7-0000f8780619')

    def __init__(self, *args, **kw):
        super(IGeometryDefEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AvgNumPoints(self, _arg1):
        '''Method IGeometryDefEdit.put_AvgNumPoints

           INPUT
            _arg1               : long'''
        return super(IGeometryDefEdit, self).put_AvgNumPoints(_arg1)
    def put_GeometryType(self, _arg1):
        '''Method IGeometryDefEdit.put_GeometryType

           INPUT
            _arg1               : esriGeometryType'''
        return super(IGeometryDefEdit, self).put_GeometryType(_arg1)
    def put_GridSize(self, Index, _arg2):
        '''Method IGeometryDefEdit.put_GridSize

           INPUTS
            Index               : long
            _arg2               : double'''
        return super(IGeometryDefEdit, self).put_GridSize(Index, _arg2)
    def put_GridCount(self, _arg1):
        '''Method IGeometryDefEdit.put_GridCount

           INPUT
            _arg1               : long'''
        return super(IGeometryDefEdit, self).put_GridCount(_arg1)
    def putref_SpatialReference(self, _arg1):
        '''Method IGeometryDefEdit.putref_SpatialReference

           INPUT
            _arg1               : ISpatialReference*'''
        return super(IGeometryDefEdit, self).putref_SpatialReference(_arg1)
    def put_HasZ(self, _arg1):
        '''Method IGeometryDefEdit.put_HasZ

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGeometryDefEdit, self).put_HasZ(_arg1)
    def put_HasM(self, _arg1):
        '''Method IGeometryDefEdit.put_HasM

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IGeometryDefEdit, self).put_HasM(_arg1)
    def get_AvgNumPoints(self):
        '''Method IGeometryDef.get_AvgNumPoints (from IGeometryDef)

           OUTPUT
            points              : long*'''
        return super(IGeometryDefEdit, self).get_AvgNumPoints()
    def get_GeometryType(self):
        '''Method IGeometryDef.get_GeometryType (from IGeometryDef)

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(IGeometryDefEdit, self).get_GeometryType()
    def get_GridSize(self, Index):
        '''Method IGeometryDef.get_GridSize (from IGeometryDef)

           INPUT
            Index               : long

           OUTPUT
            Size                : double*'''
        return super(IGeometryDefEdit, self).get_GridSize(Index)
    def get_GridCount(self):
        '''Method IGeometryDef.get_GridCount (from IGeometryDef)

           OUTPUT
            grids               : long*'''
        return super(IGeometryDefEdit, self).get_GridCount()
    def get_SpatialReference(self):
        '''Method IGeometryDef.get_SpatialReference (from IGeometryDef)

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IGeometryDefEdit, self).get_SpatialReference()
    def get_HasZ(self):
        '''Method IGeometryDef.get_HasZ (from IGeometryDef)

           OUTPUT
            HasZ                : VARIANT_BOOL*'''
        return super(IGeometryDefEdit, self).get_HasZ()
    def get_HasM(self):
        '''Method IGeometryDef.get_HasM (from IGeometryDef)

           OUTPUT
            HasM                : VARIANT_BOOL*'''
        return super(IGeometryDefEdit, self).get_HasM()
    AvgNumPoints = property(get_AvgNumPoints, put_AvgNumPoints, None)
    GeometryType = property(get_GeometryType, put_GeometryType, None)
    GridCount = property(get_GridCount, put_GridCount, None)
    GridSize = property(None, put_GridSize, None)
    HasM = property(get_HasM, put_HasM, None)
    HasZ = property(get_HasZ, put_HasZ, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    GridSize = IndexProperty(get_GridSize, None)

class IIndexesEdit(_esriGeoDatabase.IIndexesEdit):
    _IID = uuid.UUID('2063fd04-4ce0-11d1-89db-006097aff44e')

    def __init__(self, *args, **kw):
        super(IIndexesEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_IndexCount(self, _arg1):
        '''Method IIndexesEdit.put_IndexCount

           INPUT
            _arg1               : long'''
        return super(IIndexesEdit, self).put_IndexCount(_arg1)
    def putref_Index(self, pos, _arg2):
        '''Method IIndexesEdit.putref_Index

           INPUTS
            pos                 : long
            _arg2               : IIndex*'''
        return super(IIndexesEdit, self).putref_Index(pos, _arg2)
    def AddIndex(self, Index):
        '''Method IIndexesEdit.AddIndex

           INPUT
            Index               : IIndex*'''
        return super(IIndexesEdit, self).AddIndex(Index)
    def DeleteIndex(self, Index):
        '''Method IIndexesEdit.DeleteIndex

           INPUT
            Index               : IIndex*'''
        return super(IIndexesEdit, self).DeleteIndex(Index)
    def DeleteAllIndexes(self):
        '''Method IIndexesEdit.DeleteAllIndexes'''
        return super(IIndexesEdit, self).DeleteAllIndexes()
    def get_IndexCount(self):
        '''Method IIndexes.get_IndexCount (from IIndexes)

           OUTPUT
            numIndexes          : long*'''
        return super(IIndexesEdit, self).get_IndexCount()
    def get_Index(self, pos):
        '''Method IIndexes.get_Index (from IIndexes)

           INPUT
            pos                 : long

           OUTPUT
            Index               : IIndex**'''
        return super(IIndexesEdit, self).get_Index(pos)
    def FindIndex(self, Name):
        '''Method IIndexes.FindIndex (from IIndexes)

           INPUT
            Name                : BSTR

           OUTPUT
            pos                 : long*'''
        return super(IIndexesEdit, self).FindIndex(Name)
    def FindIndexesByFieldName(self, FieldName):
        '''Method IIndexes.FindIndexesByFieldName (from IIndexes)

           INPUT
            FieldName           : BSTR

           OUTPUT
            enumIndex           : IEnumIndex**'''
        return super(IIndexesEdit, self).FindIndexesByFieldName(FieldName)
    Index = property(None, putref_Index, None)
    IndexCount = property(get_IndexCount, put_IndexCount, None)
    Index = IndexProperty(get_Index, None)

class IClassSchemaEdit(_esriGeoDatabase.IClassSchemaEdit):
    _IID = uuid.UUID('64654191-e2e8-11d2-8a56-000000000000')
    def RegisterAsObjectClass(self, suggestedOIDFieldName, ConfigKeyword):
        '''Method IClassSchemaEdit.RegisterAsObjectClass

           INPUTS
            suggestedOIDFieldName: BSTR
            ConfigKeyword       : BSTR

           OUTPUT
            ObjectClassID       : long*'''
        return super(IClassSchemaEdit, self).RegisterAsObjectClass(suggestedOIDFieldName, ConfigKeyword)
    def AlterInstanceCLSID(self, InstanceCLSID):
        '''Method IClassSchemaEdit.AlterInstanceCLSID

           INPUT
            InstanceCLSID       : IUID*'''
        return super(IClassSchemaEdit, self).AlterInstanceCLSID(InstanceCLSID)
    def AlterClassExtensionCLSID(self, ClassExtensionCLSID, classExtensionProperties):
        '''Method IClassSchemaEdit.AlterClassExtensionCLSID

           INPUTS
            ClassExtensionCLSID : IUID*
            classExtensionProperties: IPropertySet*'''
        return super(IClassSchemaEdit, self).AlterClassExtensionCLSID(ClassExtensionCLSID, classExtensionProperties)
    def AlterAliasName(self, Name):
        '''Method IClassSchemaEdit.AlterAliasName

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit, self).AlterAliasName(Name)
    def AlterFieldAliasName(self, FieldName, AliasName):
        '''Method IClassSchemaEdit.AlterFieldAliasName

           INPUTS
            FieldName           : BSTR
            AliasName           : BSTR'''
        return super(IClassSchemaEdit, self).AlterFieldAliasName(FieldName, AliasName)
    def AlterModelName(self, Name):
        '''Method IClassSchemaEdit.AlterModelName

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit, self).AlterModelName(Name)
    def AlterFieldModelName(self, FieldName, ModelName):
        '''Method IClassSchemaEdit.AlterFieldModelName

           INPUTS
            FieldName           : BSTR
            ModelName           : BSTR'''
        return super(IClassSchemaEdit, self).AlterFieldModelName(FieldName, ModelName)
    def AlterDomain(self, FieldName, Domain):
        '''Method IClassSchemaEdit.AlterDomain

           INPUTS
            FieldName           : BSTR
            Domain              : IDomain*'''
        return super(IClassSchemaEdit, self).AlterDomain(FieldName, Domain)
    def AlterDefaultValue(self, FieldName, Value):
        '''Method IClassSchemaEdit.AlterDefaultValue

           INPUTS
            FieldName           : BSTR
            Value               : VARIANT'''
        return super(IClassSchemaEdit, self).AlterDefaultValue(FieldName, Value)

class IClassSchemaEdit2(_esriGeoDatabase.IClassSchemaEdit2):
    _IID = uuid.UUID('62f1f470-e991-11d3-80d3-00c04f601565')
    def AlterClassExtensionProperties(self, classExtensionProperties):
        '''Method IClassSchemaEdit2.AlterClassExtensionProperties

           INPUT
            classExtensionProperties: IPropertySet*'''
        return super(IClassSchemaEdit2, self).AlterClassExtensionProperties(classExtensionProperties)
    def RegisterAsObjectClass(self, suggestedOIDFieldName, ConfigKeyword):
        '''Method IClassSchemaEdit.RegisterAsObjectClass (from IClassSchemaEdit)

           INPUTS
            suggestedOIDFieldName: BSTR
            ConfigKeyword       : BSTR

           OUTPUT
            ObjectClassID       : long*'''
        return super(IClassSchemaEdit2, self).RegisterAsObjectClass(suggestedOIDFieldName, ConfigKeyword)
    def AlterInstanceCLSID(self, InstanceCLSID):
        '''Method IClassSchemaEdit.AlterInstanceCLSID (from IClassSchemaEdit)

           INPUT
            InstanceCLSID       : IUID*'''
        return super(IClassSchemaEdit2, self).AlterInstanceCLSID(InstanceCLSID)
    def AlterClassExtensionCLSID(self, ClassExtensionCLSID, classExtensionProperties):
        '''Method IClassSchemaEdit.AlterClassExtensionCLSID (from IClassSchemaEdit)

           INPUTS
            ClassExtensionCLSID : IUID*
            classExtensionProperties: IPropertySet*'''
        return super(IClassSchemaEdit2, self).AlterClassExtensionCLSID(ClassExtensionCLSID, classExtensionProperties)
    def AlterAliasName(self, Name):
        '''Method IClassSchemaEdit.AlterAliasName (from IClassSchemaEdit)

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit2, self).AlterAliasName(Name)
    def AlterFieldAliasName(self, FieldName, AliasName):
        '''Method IClassSchemaEdit.AlterFieldAliasName (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            AliasName           : BSTR'''
        return super(IClassSchemaEdit2, self).AlterFieldAliasName(FieldName, AliasName)
    def AlterModelName(self, Name):
        '''Method IClassSchemaEdit.AlterModelName (from IClassSchemaEdit)

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit2, self).AlterModelName(Name)
    def AlterFieldModelName(self, FieldName, ModelName):
        '''Method IClassSchemaEdit.AlterFieldModelName (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            ModelName           : BSTR'''
        return super(IClassSchemaEdit2, self).AlterFieldModelName(FieldName, ModelName)
    def AlterDomain(self, FieldName, Domain):
        '''Method IClassSchemaEdit.AlterDomain (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            Domain              : IDomain*'''
        return super(IClassSchemaEdit2, self).AlterDomain(FieldName, Domain)
    def AlterDefaultValue(self, FieldName, Value):
        '''Method IClassSchemaEdit.AlterDefaultValue (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            Value               : VARIANT'''
        return super(IClassSchemaEdit2, self).AlterDefaultValue(FieldName, Value)

class IClassSchemaEdit3(_esriGeoDatabase.IClassSchemaEdit3):
    _IID = uuid.UUID('4b35f814-0417-47e3-8dfc-cad58746693b')
    def AddGlobalID(self, FieldName):
        '''Method IClassSchemaEdit3.AddGlobalID

           INPUT
            FieldName           : BSTR'''
        return super(IClassSchemaEdit3, self).AddGlobalID(FieldName)
    def DeleteGlobalID(self):
        '''Method IClassSchemaEdit3.DeleteGlobalID'''
        return super(IClassSchemaEdit3, self).DeleteGlobalID()
    def AlterClassExtensionProperties(self, classExtensionProperties):
        '''Method IClassSchemaEdit2.AlterClassExtensionProperties (from IClassSchemaEdit2)

           INPUT
            classExtensionProperties: IPropertySet*'''
        return super(IClassSchemaEdit3, self).AlterClassExtensionProperties(classExtensionProperties)
    def RegisterAsObjectClass(self, suggestedOIDFieldName, ConfigKeyword):
        '''Method IClassSchemaEdit.RegisterAsObjectClass (from IClassSchemaEdit)

           INPUTS
            suggestedOIDFieldName: BSTR
            ConfigKeyword       : BSTR

           OUTPUT
            ObjectClassID       : long*'''
        return super(IClassSchemaEdit3, self).RegisterAsObjectClass(suggestedOIDFieldName, ConfigKeyword)
    def AlterInstanceCLSID(self, InstanceCLSID):
        '''Method IClassSchemaEdit.AlterInstanceCLSID (from IClassSchemaEdit)

           INPUT
            InstanceCLSID       : IUID*'''
        return super(IClassSchemaEdit3, self).AlterInstanceCLSID(InstanceCLSID)
    def AlterClassExtensionCLSID(self, ClassExtensionCLSID, classExtensionProperties):
        '''Method IClassSchemaEdit.AlterClassExtensionCLSID (from IClassSchemaEdit)

           INPUTS
            ClassExtensionCLSID : IUID*
            classExtensionProperties: IPropertySet*'''
        return super(IClassSchemaEdit3, self).AlterClassExtensionCLSID(ClassExtensionCLSID, classExtensionProperties)
    def AlterAliasName(self, Name):
        '''Method IClassSchemaEdit.AlterAliasName (from IClassSchemaEdit)

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit3, self).AlterAliasName(Name)
    def AlterFieldAliasName(self, FieldName, AliasName):
        '''Method IClassSchemaEdit.AlterFieldAliasName (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            AliasName           : BSTR'''
        return super(IClassSchemaEdit3, self).AlterFieldAliasName(FieldName, AliasName)
    def AlterModelName(self, Name):
        '''Method IClassSchemaEdit.AlterModelName (from IClassSchemaEdit)

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit3, self).AlterModelName(Name)
    def AlterFieldModelName(self, FieldName, ModelName):
        '''Method IClassSchemaEdit.AlterFieldModelName (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            ModelName           : BSTR'''
        return super(IClassSchemaEdit3, self).AlterFieldModelName(FieldName, ModelName)
    def AlterDomain(self, FieldName, Domain):
        '''Method IClassSchemaEdit.AlterDomain (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            Domain              : IDomain*'''
        return super(IClassSchemaEdit3, self).AlterDomain(FieldName, Domain)
    def AlterDefaultValue(self, FieldName, Value):
        '''Method IClassSchemaEdit.AlterDefaultValue (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            Value               : VARIANT'''
        return super(IClassSchemaEdit3, self).AlterDefaultValue(FieldName, Value)

class IClassSchemaEdit4(_esriGeoDatabase.IClassSchemaEdit4):
    _IID = uuid.UUID('7799996e-4ee7-4abc-a553-5da86f7a6144')

    def __init__(self, *args, **kw):
        super(IClassSchemaEdit4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_EditorFieldName(self, _arg1):
        '''Method IClassSchemaEdit4.put_EditorFieldName

           INPUT
            _arg1               : BSTR'''
        return super(IClassSchemaEdit4, self).put_EditorFieldName(_arg1)
    def put_CreatorFieldName(self, _arg1):
        '''Method IClassSchemaEdit4.put_CreatorFieldName

           INPUT
            _arg1               : BSTR'''
        return super(IClassSchemaEdit4, self).put_CreatorFieldName(_arg1)
    def put_EditedAtFieldName(self, _arg1):
        '''Method IClassSchemaEdit4.put_EditedAtFieldName

           INPUT
            _arg1               : BSTR'''
        return super(IClassSchemaEdit4, self).put_EditedAtFieldName(_arg1)
    def put_CreatedAtFieldName(self, _arg1):
        '''Method IClassSchemaEdit4.put_CreatedAtFieldName

           INPUT
            _arg1               : BSTR'''
        return super(IClassSchemaEdit4, self).put_CreatedAtFieldName(_arg1)
    def put_IsTimeInUTC(self, _arg1):
        '''Method IClassSchemaEdit4.put_IsTimeInUTC

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(IClassSchemaEdit4, self).put_IsTimeInUTC(_arg1)
    def AlterFieldName(self, FieldName, newFieldName):
        '''Method IClassSchemaEdit4.AlterFieldName

           INPUTS
            FieldName           : BSTR
            newFieldName        : BSTR'''
        return super(IClassSchemaEdit4, self).AlterFieldName(FieldName, newFieldName)
    def AddGlobalID(self, FieldName):
        '''Method IClassSchemaEdit3.AddGlobalID (from IClassSchemaEdit3)

           INPUT
            FieldName           : BSTR'''
        return super(IClassSchemaEdit4, self).AddGlobalID(FieldName)
    def DeleteGlobalID(self):
        '''Method IClassSchemaEdit3.DeleteGlobalID (from IClassSchemaEdit3)'''
        return super(IClassSchemaEdit4, self).DeleteGlobalID()
    def AlterClassExtensionProperties(self, classExtensionProperties):
        '''Method IClassSchemaEdit2.AlterClassExtensionProperties (from IClassSchemaEdit2)

           INPUT
            classExtensionProperties: IPropertySet*'''
        return super(IClassSchemaEdit4, self).AlterClassExtensionProperties(classExtensionProperties)
    def RegisterAsObjectClass(self, suggestedOIDFieldName, ConfigKeyword):
        '''Method IClassSchemaEdit.RegisterAsObjectClass (from IClassSchemaEdit)

           INPUTS
            suggestedOIDFieldName: BSTR
            ConfigKeyword       : BSTR

           OUTPUT
            ObjectClassID       : long*'''
        return super(IClassSchemaEdit4, self).RegisterAsObjectClass(suggestedOIDFieldName, ConfigKeyword)
    def AlterInstanceCLSID(self, InstanceCLSID):
        '''Method IClassSchemaEdit.AlterInstanceCLSID (from IClassSchemaEdit)

           INPUT
            InstanceCLSID       : IUID*'''
        return super(IClassSchemaEdit4, self).AlterInstanceCLSID(InstanceCLSID)
    def AlterClassExtensionCLSID(self, ClassExtensionCLSID, classExtensionProperties):
        '''Method IClassSchemaEdit.AlterClassExtensionCLSID (from IClassSchemaEdit)

           INPUTS
            ClassExtensionCLSID : IUID*
            classExtensionProperties: IPropertySet*'''
        return super(IClassSchemaEdit4, self).AlterClassExtensionCLSID(ClassExtensionCLSID, classExtensionProperties)
    def AlterAliasName(self, Name):
        '''Method IClassSchemaEdit.AlterAliasName (from IClassSchemaEdit)

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit4, self).AlterAliasName(Name)
    def AlterFieldAliasName(self, FieldName, AliasName):
        '''Method IClassSchemaEdit.AlterFieldAliasName (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            AliasName           : BSTR'''
        return super(IClassSchemaEdit4, self).AlterFieldAliasName(FieldName, AliasName)
    def AlterModelName(self, Name):
        '''Method IClassSchemaEdit.AlterModelName (from IClassSchemaEdit)

           INPUT
            Name                : BSTR'''
        return super(IClassSchemaEdit4, self).AlterModelName(Name)
    def AlterFieldModelName(self, FieldName, ModelName):
        '''Method IClassSchemaEdit.AlterFieldModelName (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            ModelName           : BSTR'''
        return super(IClassSchemaEdit4, self).AlterFieldModelName(FieldName, ModelName)
    def AlterDomain(self, FieldName, Domain):
        '''Method IClassSchemaEdit.AlterDomain (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            Domain              : IDomain*'''
        return super(IClassSchemaEdit4, self).AlterDomain(FieldName, Domain)
    def AlterDefaultValue(self, FieldName, Value):
        '''Method IClassSchemaEdit.AlterDefaultValue (from IClassSchemaEdit)

           INPUTS
            FieldName           : BSTR
            Value               : VARIANT'''
        return super(IClassSchemaEdit4, self).AlterDefaultValue(FieldName, Value)
    CreatedAtFieldName = property(None, put_CreatedAtFieldName, None)
    CreatorFieldName = property(None, put_CreatorFieldName, None)
    EditedAtFieldName = property(None, put_EditedAtFieldName, None)
    EditorFieldName = property(None, put_EditorFieldName, None)
    IsTimeInUTC = property(None, put_IsTimeInUTC, None)

class IClassSchemaEditEx(_esriGeoDatabase.IClassSchemaEditEx):
    _IID = uuid.UUID('f14139c3-b498-4b42-aa6c-5960028554e0')
    def RegisterGlobalIDColumn(self, columnName):
        '''Method IClassSchemaEditEx.RegisterGlobalIDColumn

           INPUT
            columnName          : BSTR'''
        return super(IClassSchemaEditEx, self).RegisterGlobalIDColumn(columnName)
    def UnregisterGlobalIDColumn(self, columnName):
        '''Method IClassSchemaEditEx.UnregisterGlobalIDColumn

           INPUT
            columnName          : BSTR'''
        return super(IClassSchemaEditEx, self).UnregisterGlobalIDColumn(columnName)

class IRelClassSchemaEdit(_esriGeoDatabase.IRelClassSchemaEdit):
    _IID = uuid.UUID('bb7071f4-1678-4029-a358-14b5d33ad7cf')
    def AlterForwardPathLabel(self, ForwardLabel):
        '''Method IRelClassSchemaEdit.AlterForwardPathLabel

           INPUT
            ForwardLabel        : BSTR'''
        return super(IRelClassSchemaEdit, self).AlterForwardPathLabel(ForwardLabel)
    def AlterBackwardPathLabel(self, BackwardLabel):
        '''Method IRelClassSchemaEdit.AlterBackwardPathLabel

           INPUT
            BackwardLabel       : BSTR'''
        return super(IRelClassSchemaEdit, self).AlterBackwardPathLabel(BackwardLabel)
    def AlterIsComposite(self, IsComposite):
        '''Method IRelClassSchemaEdit.AlterIsComposite

           INPUT
            IsComposite         : VARIANT_BOOL'''
        return super(IRelClassSchemaEdit, self).AlterIsComposite(IsComposite)

class IRelQueryTableSettings(_esriGeoDatabase.IRelQueryTableSettings):
    _IID = uuid.UUID('fda93763-eb76-40a6-ba53-eddaefcdde07')

    def __init__(self, *args, **kw):
        super(IRelQueryTableSettings, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FireRowChangedEvents(self):
        '''Method IRelQueryTableSettings.get_FireRowChangedEvents

           OUTPUT
            fireRowEvents       : VARIANT_BOOL*'''
        return super(IRelQueryTableSettings, self).get_FireRowChangedEvents()
    def put_FireRowChangedEvents(self, fireRowEvents):
        '''Method IRelQueryTableSettings.put_FireRowChangedEvents

           INPUT
            fireRowEvents       : VARIANT_BOOL'''
        return super(IRelQueryTableSettings, self).put_FireRowChangedEvents(fireRowEvents)
    FireRowChangedEvents = property(get_FireRowChangedEvents, put_FireRowChangedEvents, None)

class ITableCapabilities(_esriGeoDatabase.ITableCapabilities):
    _IID = uuid.UUID('8b0338b9-3b3d-11d4-9fbb-00c04f6bdf0c')
    def get_CanSelect(self):
        '''Method ITableCapabilities.get_CanSelect

           OUTPUT
            CanSelect           : VARIANT_BOOL*'''
        return super(ITableCapabilities, self).get_CanSelect()
    CanSelect = property(get_CanSelect, None, None)

class ITopologyGraphEvents(_esriGeoDatabase.ITopologyGraphEvents):
    _IID = uuid.UUID('49111212-c452-474e-b7f4-7669ef6c5762')
    def OnTopologyGraphModified(self):
        '''Method ITopologyGraphEvents.OnTopologyGraphModified'''
        return super(ITopologyGraphEvents, self).OnTopologyGraphModified()

class IObjectClassSchemaEvents(_esriGeoDatabase.IObjectClassSchemaEvents):
    _IID = uuid.UUID('f1e8911b-6bc5-11d3-a021-00c04f6bdf0e')
    def OnAddField(self, FieldName):
        '''Method IObjectClassSchemaEvents.OnAddField

           INPUT
            FieldName           : BSTR'''
        return super(IObjectClassSchemaEvents, self).OnAddField(FieldName)
    def OnDeleteField(self, FieldName):
        '''Method IObjectClassSchemaEvents.OnDeleteField

           INPUT
            FieldName           : BSTR'''
        return super(IObjectClassSchemaEvents, self).OnDeleteField(FieldName)
    def OnBehaviorChanged(self):
        '''Method IObjectClassSchemaEvents.OnBehaviorChanged'''
        return super(IObjectClassSchemaEvents, self).OnBehaviorChanged()

class IObjectClass2(_esriGeoDatabase.IObjectClass2):
    _IID = uuid.UUID('6a911226-cef7-4d30-a24e-2a0a1385a36d')
    def RebuildSpatialIndex(self, Index):
        '''Method IObjectClass2.RebuildSpatialIndex

           INPUT
            Index               : IIndex*'''
        return super(IObjectClass2, self).RebuildSpatialIndex(Index)

class ISimpleRelationshipChanges(_esriGeoDatabase.ISimpleRelationshipChanges):
    _IID = uuid.UUID('1438a5cc-bdef-411a-a201-fe5e7c493a00')
    def get_OldOriginKey(self):
        '''Method ISimpleRelationshipChanges.get_OldOriginKey

           OUTPUT
            oldOrigKey          : VARIANT*'''
        return super(ISimpleRelationshipChanges, self).get_OldOriginKey()
    OldOriginKey = property(get_OldOriginKey, None, None)

class IEnumSubtype(_esriGeoDatabase.IEnumSubtype):
    _IID = uuid.UUID('f6289406-8952-11d2-aabc-00c04fa37b82')
    def Next(self):
        '''Method IEnumSubtype.Next

           OUTPUTS
            SubtypeCode         : long*
            SubtypeName         : BSTR*'''
        return super(IEnumSubtype, self).Next()
    def __iter__(self):
        try:
            super(IEnumSubtype, self).Reset()
            val = super(IEnumSubtype, self).Next()
            while any(val):
                yield val
                val = super(IEnumSubtype, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumSubtype.Reset'''
        return super(IEnumSubtype, self).Reset()

class ISubtypes(_esriGeoDatabase.ISubtypes):
    _IID = uuid.UUID('aef78514-848f-11d2-aaba-00c04fa37b82')

    def __init__(self, *args, **kw):
        super(ISubtypes, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HasSubtype(self):
        '''Method ISubtypes.get_HasSubtype

           OUTPUT
            HasSubtype          : VARIANT_BOOL*'''
        return super(ISubtypes, self).get_HasSubtype()
    def get_DefaultSubtypeCode(self):
        '''Method ISubtypes.get_DefaultSubtypeCode

           OUTPUT
            SubtypeCode         : long*'''
        return super(ISubtypes, self).get_DefaultSubtypeCode()
    def put_DefaultSubtypeCode(self, SubtypeCode):
        '''Method ISubtypes.put_DefaultSubtypeCode

           INPUT
            SubtypeCode         : long'''
        return super(ISubtypes, self).put_DefaultSubtypeCode(SubtypeCode)
    def get_DefaultValue(self, SubtypeCode, FieldName):
        '''Method ISubtypes.get_DefaultValue

           INPUTS
            SubtypeCode         : long
            FieldName           : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(ISubtypes, self).get_DefaultValue(SubtypeCode, FieldName)
    def put_DefaultValue(self, SubtypeCode, FieldName, Value):
        '''Method ISubtypes.put_DefaultValue

           INPUTS
            SubtypeCode         : long
            FieldName           : BSTR
            Value               : VARIANT'''
        return super(ISubtypes, self).put_DefaultValue(SubtypeCode, FieldName, Value)
    def get_Domain(self, SubtypeCode, FieldName):
        '''Method ISubtypes.get_Domain

           INPUTS
            SubtypeCode         : long
            FieldName           : BSTR

           OUTPUT
            Domain              : IDomain**'''
        return super(ISubtypes, self).get_Domain(SubtypeCode, FieldName)
    def putref_Domain(self, SubtypeCode, FieldName, Domain):
        '''Method ISubtypes.putref_Domain

           INPUTS
            SubtypeCode         : long
            FieldName           : BSTR
            Domain              : IDomain*'''
        return super(ISubtypes, self).putref_Domain(SubtypeCode, FieldName, Domain)
    def get_SubtypeFieldName(self):
        '''Method ISubtypes.get_SubtypeFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(ISubtypes, self).get_SubtypeFieldName()
    def put_SubtypeFieldName(self, FieldName):
        '''Method ISubtypes.put_SubtypeFieldName

           INPUT
            FieldName           : BSTR'''
        return super(ISubtypes, self).put_SubtypeFieldName(FieldName)
    def get_SubtypeFieldIndex(self):
        '''Method ISubtypes.get_SubtypeFieldIndex

           OUTPUT
            Index               : long*'''
        return super(ISubtypes, self).get_SubtypeFieldIndex()
    def get_SubtypeName(self, SubtypeCode):
        '''Method ISubtypes.get_SubtypeName

           INPUT
            SubtypeCode         : long

           OUTPUT
            SubtypeName         : BSTR*'''
        return super(ISubtypes, self).get_SubtypeName(SubtypeCode)
    def get_Subtypes(self):
        '''Method ISubtypes.get_Subtypes

           OUTPUT
            Subtypes            : IEnumSubtype**'''
        return super(ISubtypes, self).get_Subtypes()
    def AddSubtype(self, SubtypeCode, SubtypeName):
        '''Method ISubtypes.AddSubtype

           INPUTS
            SubtypeCode         : long
            SubtypeName         : BSTR'''
        return super(ISubtypes, self).AddSubtype(SubtypeCode, SubtypeName)
    def DeleteSubtype(self, SubtypeCode):
        '''Method ISubtypes.DeleteSubtype

           INPUT
            SubtypeCode         : long'''
        return super(ISubtypes, self).DeleteSubtype(SubtypeCode)
    DefaultSubtypeCode = property(get_DefaultSubtypeCode, put_DefaultSubtypeCode, None)
    DefaultValue = property(None, put_DefaultValue, None)
    Domain = property(None, putref_Domain, None)
    HasSubtype = property(get_HasSubtype, None, None)
    SubtypeFieldIndex = property(get_SubtypeFieldIndex, None, None)
    SubtypeFieldName = property(get_SubtypeFieldName, put_SubtypeFieldName, None)
    Subtypes = property(get_Subtypes, None, None)
    SubtypeName = IndexProperty(get_SubtypeName, None)

class IValidate(_esriGeoDatabase.IValidate):
    _IID = uuid.UUID('80e4ff2c-475d-11d2-9932-0000f80372b4')
    def GetInvalidFields(self):
        '''Method IValidate.GetInvalidFields

           OUTPUT
            invalidFields       : IFields**'''
        return super(IValidate, self).GetInvalidFields()
    def GetInvalidRules(self):
        '''Method IValidate.GetInvalidRules

           OUTPUT
            invalidRules        : IEnumRule**'''
        return super(IValidate, self).GetInvalidRules()
    def GetInvalidRulesByField(self, FieldName):
        '''Method IValidate.GetInvalidRulesByField

           INPUT
            FieldName           : BSTR

           OUTPUT
            invalidRules        : IEnumRule**'''
        return super(IValidate, self).GetInvalidRulesByField(FieldName)
    def Validate(self):
        '''Method IValidate.Validate

           OUTPUTS
            errorMessage        : BSTR*
            isValid             : VARIANT_BOOL*'''
        return super(IValidate, self).Validate()

class IRangeDomain(_esriGeoDatabase.IRangeDomain):
    _IID = uuid.UUID('fcb6bf32-475d-11d2-9932-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IRangeDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MinValue(self):
        '''Method IRangeDomain.get_MinValue

           OUTPUT
            Value               : VARIANT*'''
        return super(IRangeDomain, self).get_MinValue()
    def put_MinValue(self, Value):
        '''Method IRangeDomain.put_MinValue

           INPUT
            Value               : VARIANT'''
        return super(IRangeDomain, self).put_MinValue(Value)
    def get_MaxValue(self):
        '''Method IRangeDomain.get_MaxValue

           OUTPUT
            Value               : VARIANT*'''
        return super(IRangeDomain, self).get_MaxValue()
    def put_MaxValue(self, Value):
        '''Method IRangeDomain.put_MaxValue

           INPUT
            Value               : VARIANT'''
        return super(IRangeDomain, self).put_MaxValue(Value)
    MaxValue = property(get_MaxValue, put_MaxValue, None)
    MinValue = property(get_MinValue, put_MinValue, None)

class ICodedValueDomain(_esriGeoDatabase.ICodedValueDomain):
    _IID = uuid.UUID('fcb6bf33-475d-11d2-9932-0000f80372b4')
    def get_CodeCount(self):
        '''Method ICodedValueDomain.get_CodeCount

           OUTPUT
            values              : long*'''
        return super(ICodedValueDomain, self).get_CodeCount()
    def get_Name(self, Index):
        '''Method ICodedValueDomain.get_Name

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(ICodedValueDomain, self).get_Name(Index)
    def get_Value(self, Index):
        '''Method ICodedValueDomain.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(ICodedValueDomain, self).get_Value(Index)
    def AddCode(self, Value, Name):
        '''Method ICodedValueDomain.AddCode

           INPUTS
            Value               : VARIANT
            Name                : BSTR'''
        return super(ICodedValueDomain, self).AddCode(Value, Name)
    def DeleteCode(self, Value):
        '''Method ICodedValueDomain.DeleteCode

           INPUT
            Value               : VARIANT'''
        return super(ICodedValueDomain, self).DeleteCode(Value)
    CodeCount = property(get_CodeCount, None, None)
    Name = IndexProperty(get_Name, None)
    Value = IndexProperty(get_Value, None)

class ICodedValueDomain2(_esriGeoDatabase.ICodedValueDomain2):
    _IID = uuid.UUID('057e88c6-0e61-426e-b4bb-d192c481cf1f')
    def SortByName(self, descending):
        '''Method ICodedValueDomain2.SortByName

           INPUT
            descending          : VARIANT_BOOL'''
        return super(ICodedValueDomain2, self).SortByName(descending)
    def SortByValue(self, descending):
        '''Method ICodedValueDomain2.SortByValue

           INPUT
            descending          : VARIANT_BOOL'''
        return super(ICodedValueDomain2, self).SortByValue(descending)
    def get_CodeCount(self):
        '''Method ICodedValueDomain.get_CodeCount (from ICodedValueDomain)

           OUTPUT
            values              : long*'''
        return super(ICodedValueDomain2, self).get_CodeCount()
    def get_Name(self, Index):
        '''Method ICodedValueDomain.get_Name (from ICodedValueDomain)

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(ICodedValueDomain2, self).get_Name(Index)
    def get_Value(self, Index):
        '''Method ICodedValueDomain.get_Value (from ICodedValueDomain)

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(ICodedValueDomain2, self).get_Value(Index)
    def AddCode(self, Value, Name):
        '''Method ICodedValueDomain.AddCode (from ICodedValueDomain)

           INPUTS
            Value               : VARIANT
            Name                : BSTR'''
        return super(ICodedValueDomain2, self).AddCode(Value, Name)
    def DeleteCode(self, Value):
        '''Method ICodedValueDomain.DeleteCode (from ICodedValueDomain)

           INPUT
            Value               : VARIANT'''
        return super(ICodedValueDomain2, self).DeleteCode(Value)
    CodeCount = property(get_CodeCount, None, None)
    Name = IndexProperty(get_Name, None)
    Value = IndexProperty(get_Value, None)

class IStringDomain(_esriGeoDatabase.IStringDomain):
    _IID = uuid.UUID('fcb6bf34-475d-11d2-9932-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IStringDomain, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Format(self):
        '''Method IStringDomain.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IStringDomain, self).get_Format()
    def put_Format(self, Format):
        '''Method IStringDomain.put_Format

           INPUT
            Format              : BSTR'''
        return super(IStringDomain, self).put_Format(Format)
    Format = property(get_Format, put_Format, None)

class IEdgeConnectivityRule(_esriGeoDatabase.IEdgeConnectivityRule):
    _IID = uuid.UUID('f290d9e2-58e5-11d2-ab26-000000000000')

    def __init__(self, *args, **kw):
        super(IEdgeConnectivityRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefaultJunctionClassID(self):
        '''Method IEdgeConnectivityRule.get_DefaultJunctionClassID

           OUTPUT
            ClassID             : long*'''
        return super(IEdgeConnectivityRule, self).get_DefaultJunctionClassID()
    def put_DefaultJunctionClassID(self, ClassID):
        '''Method IEdgeConnectivityRule.put_DefaultJunctionClassID

           INPUT
            ClassID             : long'''
        return super(IEdgeConnectivityRule, self).put_DefaultJunctionClassID(ClassID)
    def get_DefaultJunctionSubtypeCode(self):
        '''Method IEdgeConnectivityRule.get_DefaultJunctionSubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IEdgeConnectivityRule, self).get_DefaultJunctionSubtypeCode()
    def put_DefaultJunctionSubtypeCode(self, Value):
        '''Method IEdgeConnectivityRule.put_DefaultJunctionSubtypeCode

           INPUT
            Value               : long'''
        return super(IEdgeConnectivityRule, self).put_DefaultJunctionSubtypeCode(Value)
    def get_FromEdgeClassID(self):
        '''Method IEdgeConnectivityRule.get_FromEdgeClassID

           OUTPUT
            ClassID             : long*'''
        return super(IEdgeConnectivityRule, self).get_FromEdgeClassID()
    def put_FromEdgeClassID(self, ClassID):
        '''Method IEdgeConnectivityRule.put_FromEdgeClassID

           INPUT
            ClassID             : long'''
        return super(IEdgeConnectivityRule, self).put_FromEdgeClassID(ClassID)
    def get_FromEdgeSubtypeCode(self):
        '''Method IEdgeConnectivityRule.get_FromEdgeSubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IEdgeConnectivityRule, self).get_FromEdgeSubtypeCode()
    def put_FromEdgeSubtypeCode(self, Value):
        '''Method IEdgeConnectivityRule.put_FromEdgeSubtypeCode

           INPUT
            Value               : long'''
        return super(IEdgeConnectivityRule, self).put_FromEdgeSubtypeCode(Value)
    def get_ToEdgeClassID(self):
        '''Method IEdgeConnectivityRule.get_ToEdgeClassID

           OUTPUT
            ClassID             : long*'''
        return super(IEdgeConnectivityRule, self).get_ToEdgeClassID()
    def put_ToEdgeClassID(self, ClassID):
        '''Method IEdgeConnectivityRule.put_ToEdgeClassID

           INPUT
            ClassID             : long'''
        return super(IEdgeConnectivityRule, self).put_ToEdgeClassID(ClassID)
    def get_ToEdgeSubtypeCode(self):
        '''Method IEdgeConnectivityRule.get_ToEdgeSubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IEdgeConnectivityRule, self).get_ToEdgeSubtypeCode()
    def put_ToEdgeSubtypeCode(self, Value):
        '''Method IEdgeConnectivityRule.put_ToEdgeSubtypeCode

           INPUT
            Value               : long'''
        return super(IEdgeConnectivityRule, self).put_ToEdgeSubtypeCode(Value)
    def get_JunctionCount(self):
        '''Method IEdgeConnectivityRule.get_JunctionCount

           OUTPUT
            values              : long*'''
        return super(IEdgeConnectivityRule, self).get_JunctionCount()
    def get_JunctionClassID(self, Index):
        '''Method IEdgeConnectivityRule.get_JunctionClassID

           INPUT
            Index               : long

           OUTPUT
            Value               : long*'''
        return super(IEdgeConnectivityRule, self).get_JunctionClassID(Index)
    def get_JunctionSubtypeCode(self, Index):
        '''Method IEdgeConnectivityRule.get_JunctionSubtypeCode

           INPUT
            Index               : long

           OUTPUT
            SubtypeCode         : long*'''
        return super(IEdgeConnectivityRule, self).get_JunctionSubtypeCode(Index)
    def AddJunction(self, ClassID, SubtypeCode):
        '''Method IEdgeConnectivityRule.AddJunction

           INPUTS
            ClassID             : long
            SubtypeCode         : long'''
        return super(IEdgeConnectivityRule, self).AddJunction(ClassID, SubtypeCode)
    def ContainsJunction(self, ClassID, SubtypeCode):
        '''Method IEdgeConnectivityRule.ContainsJunction

           INPUTS
            ClassID             : long
            SubtypeCode         : long

           OUTPUT
            contained           : VARIANT_BOOL*'''
        return super(IEdgeConnectivityRule, self).ContainsJunction(ClassID, SubtypeCode)
    def GetJunctionInfo(self, Index):
        '''Method IEdgeConnectivityRule.GetJunctionInfo

           INPUT
            Index               : long

           OUTPUTS
            ClassID             : long*
            SubtypeCode         : long*'''
        return super(IEdgeConnectivityRule, self).GetJunctionInfo(Index)
    DefaultJunctionClassID = property(get_DefaultJunctionClassID, put_DefaultJunctionClassID, None)
    DefaultJunctionSubtypeCode = property(get_DefaultJunctionSubtypeCode, put_DefaultJunctionSubtypeCode, None)
    FromEdgeClassID = property(get_FromEdgeClassID, put_FromEdgeClassID, None)
    FromEdgeSubtypeCode = property(get_FromEdgeSubtypeCode, put_FromEdgeSubtypeCode, None)
    JunctionCount = property(get_JunctionCount, None, None)
    ToEdgeClassID = property(get_ToEdgeClassID, put_ToEdgeClassID, None)
    ToEdgeSubtypeCode = property(get_ToEdgeSubtypeCode, put_ToEdgeSubtypeCode, None)
    JunctionClassID = IndexProperty(get_JunctionClassID, None)
    JunctionSubtypeCode = IndexProperty(get_JunctionSubtypeCode, None)

class IJunctionConnectivityRule(_esriGeoDatabase.IJunctionConnectivityRule):
    _IID = uuid.UUID('f290d9e3-58e5-11d2-ab26-000000000000')

    def __init__(self, *args, **kw):
        super(IJunctionConnectivityRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EdgeClassID(self):
        '''Method IJunctionConnectivityRule.get_EdgeClassID

           OUTPUT
            ClassID             : long*'''
        return super(IJunctionConnectivityRule, self).get_EdgeClassID()
    def put_EdgeClassID(self, ClassID):
        '''Method IJunctionConnectivityRule.put_EdgeClassID

           INPUT
            ClassID             : long'''
        return super(IJunctionConnectivityRule, self).put_EdgeClassID(ClassID)
    def get_EdgeSubtypeCode(self):
        '''Method IJunctionConnectivityRule.get_EdgeSubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule, self).get_EdgeSubtypeCode()
    def put_EdgeSubtypeCode(self, Value):
        '''Method IJunctionConnectivityRule.put_EdgeSubtypeCode

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule, self).put_EdgeSubtypeCode(Value)
    def get_EdgeMinimumCardinality(self):
        '''Method IJunctionConnectivityRule.get_EdgeMinimumCardinality

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule, self).get_EdgeMinimumCardinality()
    def put_EdgeMinimumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_EdgeMinimumCardinality

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule, self).put_EdgeMinimumCardinality(Value)
    def get_EdgeMaximumCardinality(self):
        '''Method IJunctionConnectivityRule.get_EdgeMaximumCardinality

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule, self).get_EdgeMaximumCardinality()
    def put_EdgeMaximumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_EdgeMaximumCardinality

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule, self).put_EdgeMaximumCardinality(Value)
    def get_JunctionClassID(self):
        '''Method IJunctionConnectivityRule.get_JunctionClassID

           OUTPUT
            ClassID             : long*'''
        return super(IJunctionConnectivityRule, self).get_JunctionClassID()
    def put_JunctionClassID(self, ClassID):
        '''Method IJunctionConnectivityRule.put_JunctionClassID

           INPUT
            ClassID             : long'''
        return super(IJunctionConnectivityRule, self).put_JunctionClassID(ClassID)
    def get_JunctionSubtypeCode(self):
        '''Method IJunctionConnectivityRule.get_JunctionSubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule, self).get_JunctionSubtypeCode()
    def put_JunctionSubtypeCode(self, Value):
        '''Method IJunctionConnectivityRule.put_JunctionSubtypeCode

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule, self).put_JunctionSubtypeCode(Value)
    def get_JunctionMinimumCardinality(self):
        '''Method IJunctionConnectivityRule.get_JunctionMinimumCardinality

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule, self).get_JunctionMinimumCardinality()
    def put_JunctionMinimumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_JunctionMinimumCardinality

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule, self).put_JunctionMinimumCardinality(Value)
    def get_JunctionMaximumCardinality(self):
        '''Method IJunctionConnectivityRule.get_JunctionMaximumCardinality

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule, self).get_JunctionMaximumCardinality()
    def put_JunctionMaximumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_JunctionMaximumCardinality

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule, self).put_JunctionMaximumCardinality(Value)
    EdgeClassID = property(get_EdgeClassID, put_EdgeClassID, None)
    EdgeMaximumCardinality = property(get_EdgeMaximumCardinality, put_EdgeMaximumCardinality, None)
    EdgeMinimumCardinality = property(get_EdgeMinimumCardinality, put_EdgeMinimumCardinality, None)
    EdgeSubtypeCode = property(get_EdgeSubtypeCode, put_EdgeSubtypeCode, None)
    JunctionClassID = property(get_JunctionClassID, put_JunctionClassID, None)
    JunctionMaximumCardinality = property(get_JunctionMaximumCardinality, put_JunctionMaximumCardinality, None)
    JunctionMinimumCardinality = property(get_JunctionMinimumCardinality, put_JunctionMinimumCardinality, None)
    JunctionSubtypeCode = property(get_JunctionSubtypeCode, put_JunctionSubtypeCode, None)

class IJunctionConnectivityRule2(_esriGeoDatabase.IJunctionConnectivityRule2):
    _IID = uuid.UUID('b93b7600-0feb-11d4-a063-00c04f6bdd84')

    def __init__(self, *args, **kw):
        super(IJunctionConnectivityRule2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefaultJunction(self):
        '''Method IJunctionConnectivityRule2.get_DefaultJunction

           OUTPUT
            isDefaultJunction   : VARIANT_BOOL*'''
        return super(IJunctionConnectivityRule2, self).get_DefaultJunction()
    def put_DefaultJunction(self, isDefaultJunction):
        '''Method IJunctionConnectivityRule2.put_DefaultJunction

           INPUT
            isDefaultJunction   : VARIANT_BOOL'''
        return super(IJunctionConnectivityRule2, self).put_DefaultJunction(isDefaultJunction)
    def get_EdgeClassID(self):
        '''Method IJunctionConnectivityRule.get_EdgeClassID (from IJunctionConnectivityRule)

           OUTPUT
            ClassID             : long*'''
        return super(IJunctionConnectivityRule2, self).get_EdgeClassID()
    def put_EdgeClassID(self, ClassID):
        '''Method IJunctionConnectivityRule.put_EdgeClassID (from IJunctionConnectivityRule)

           INPUT
            ClassID             : long'''
        return super(IJunctionConnectivityRule2, self).put_EdgeClassID(ClassID)
    def get_EdgeSubtypeCode(self):
        '''Method IJunctionConnectivityRule.get_EdgeSubtypeCode (from IJunctionConnectivityRule)

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule2, self).get_EdgeSubtypeCode()
    def put_EdgeSubtypeCode(self, Value):
        '''Method IJunctionConnectivityRule.put_EdgeSubtypeCode (from IJunctionConnectivityRule)

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule2, self).put_EdgeSubtypeCode(Value)
    def get_EdgeMinimumCardinality(self):
        '''Method IJunctionConnectivityRule.get_EdgeMinimumCardinality (from IJunctionConnectivityRule)

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule2, self).get_EdgeMinimumCardinality()
    def put_EdgeMinimumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_EdgeMinimumCardinality (from IJunctionConnectivityRule)

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule2, self).put_EdgeMinimumCardinality(Value)
    def get_EdgeMaximumCardinality(self):
        '''Method IJunctionConnectivityRule.get_EdgeMaximumCardinality (from IJunctionConnectivityRule)

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule2, self).get_EdgeMaximumCardinality()
    def put_EdgeMaximumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_EdgeMaximumCardinality (from IJunctionConnectivityRule)

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule2, self).put_EdgeMaximumCardinality(Value)
    def get_JunctionClassID(self):
        '''Method IJunctionConnectivityRule.get_JunctionClassID (from IJunctionConnectivityRule)

           OUTPUT
            ClassID             : long*'''
        return super(IJunctionConnectivityRule2, self).get_JunctionClassID()
    def put_JunctionClassID(self, ClassID):
        '''Method IJunctionConnectivityRule.put_JunctionClassID (from IJunctionConnectivityRule)

           INPUT
            ClassID             : long'''
        return super(IJunctionConnectivityRule2, self).put_JunctionClassID(ClassID)
    def get_JunctionSubtypeCode(self):
        '''Method IJunctionConnectivityRule.get_JunctionSubtypeCode (from IJunctionConnectivityRule)

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule2, self).get_JunctionSubtypeCode()
    def put_JunctionSubtypeCode(self, Value):
        '''Method IJunctionConnectivityRule.put_JunctionSubtypeCode (from IJunctionConnectivityRule)

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule2, self).put_JunctionSubtypeCode(Value)
    def get_JunctionMinimumCardinality(self):
        '''Method IJunctionConnectivityRule.get_JunctionMinimumCardinality (from IJunctionConnectivityRule)

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule2, self).get_JunctionMinimumCardinality()
    def put_JunctionMinimumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_JunctionMinimumCardinality (from IJunctionConnectivityRule)

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule2, self).put_JunctionMinimumCardinality(Value)
    def get_JunctionMaximumCardinality(self):
        '''Method IJunctionConnectivityRule.get_JunctionMaximumCardinality (from IJunctionConnectivityRule)

           OUTPUT
            Value               : long*'''
        return super(IJunctionConnectivityRule2, self).get_JunctionMaximumCardinality()
    def put_JunctionMaximumCardinality(self, Value):
        '''Method IJunctionConnectivityRule.put_JunctionMaximumCardinality (from IJunctionConnectivityRule)

           INPUT
            Value               : long'''
        return super(IJunctionConnectivityRule2, self).put_JunctionMaximumCardinality(Value)
    DefaultJunction = property(get_DefaultJunction, put_DefaultJunction, None)
    EdgeClassID = property(get_EdgeClassID, put_EdgeClassID, None)
    EdgeMaximumCardinality = property(get_EdgeMaximumCardinality, put_EdgeMaximumCardinality, None)
    EdgeMinimumCardinality = property(get_EdgeMinimumCardinality, put_EdgeMinimumCardinality, None)
    EdgeSubtypeCode = property(get_EdgeSubtypeCode, put_EdgeSubtypeCode, None)
    JunctionClassID = property(get_JunctionClassID, put_JunctionClassID, None)
    JunctionMaximumCardinality = property(get_JunctionMaximumCardinality, put_JunctionMaximumCardinality, None)
    JunctionMinimumCardinality = property(get_JunctionMinimumCardinality, put_JunctionMinimumCardinality, None)
    JunctionSubtypeCode = property(get_JunctionSubtypeCode, put_JunctionSubtypeCode, None)

class IRelationshipRule(_esriGeoDatabase.IRelationshipRule):
    _IID = uuid.UUID('eb3b2f82-7e5c-11d2-aab5-00c04fa37b82')

    def __init__(self, *args, **kw):
        super(IRelationshipRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DestinationClassID(self):
        '''Method IRelationshipRule.get_DestinationClassID

           OUTPUT
            ClassID             : long*'''
        return super(IRelationshipRule, self).get_DestinationClassID()
    def put_DestinationClassID(self, ClassID):
        '''Method IRelationshipRule.put_DestinationClassID

           INPUT
            ClassID             : long'''
        return super(IRelationshipRule, self).put_DestinationClassID(ClassID)
    def get_DestinationSubtypeCode(self):
        '''Method IRelationshipRule.get_DestinationSubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IRelationshipRule, self).get_DestinationSubtypeCode()
    def put_DestinationSubtypeCode(self, Value):
        '''Method IRelationshipRule.put_DestinationSubtypeCode

           INPUT
            Value               : long'''
        return super(IRelationshipRule, self).put_DestinationSubtypeCode(Value)
    def get_DestinationMinimumCardinality(self):
        '''Method IRelationshipRule.get_DestinationMinimumCardinality

           OUTPUT
            Value               : long*'''
        return super(IRelationshipRule, self).get_DestinationMinimumCardinality()
    def put_DestinationMinimumCardinality(self, Value):
        '''Method IRelationshipRule.put_DestinationMinimumCardinality

           INPUT
            Value               : long'''
        return super(IRelationshipRule, self).put_DestinationMinimumCardinality(Value)
    def get_DestinationMaximumCardinality(self):
        '''Method IRelationshipRule.get_DestinationMaximumCardinality

           OUTPUT
            Value               : long*'''
        return super(IRelationshipRule, self).get_DestinationMaximumCardinality()
    def put_DestinationMaximumCardinality(self, Value):
        '''Method IRelationshipRule.put_DestinationMaximumCardinality

           INPUT
            Value               : long'''
        return super(IRelationshipRule, self).put_DestinationMaximumCardinality(Value)
    def get_OriginClassID(self):
        '''Method IRelationshipRule.get_OriginClassID

           OUTPUT
            ClassID             : long*'''
        return super(IRelationshipRule, self).get_OriginClassID()
    def put_OriginClassID(self, ClassID):
        '''Method IRelationshipRule.put_OriginClassID

           INPUT
            ClassID             : long'''
        return super(IRelationshipRule, self).put_OriginClassID(ClassID)
    def get_OriginSubtypeCode(self):
        '''Method IRelationshipRule.get_OriginSubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IRelationshipRule, self).get_OriginSubtypeCode()
    def put_OriginSubtypeCode(self, Value):
        '''Method IRelationshipRule.put_OriginSubtypeCode

           INPUT
            Value               : long'''
        return super(IRelationshipRule, self).put_OriginSubtypeCode(Value)
    def get_OriginMinimumCardinality(self):
        '''Method IRelationshipRule.get_OriginMinimumCardinality

           OUTPUT
            Value               : long*'''
        return super(IRelationshipRule, self).get_OriginMinimumCardinality()
    def put_OriginMinimumCardinality(self, Value):
        '''Method IRelationshipRule.put_OriginMinimumCardinality

           INPUT
            Value               : long'''
        return super(IRelationshipRule, self).put_OriginMinimumCardinality(Value)
    def get_OriginMaximumCardinality(self):
        '''Method IRelationshipRule.get_OriginMaximumCardinality

           OUTPUT
            Value               : long*'''
        return super(IRelationshipRule, self).get_OriginMaximumCardinality()
    def put_OriginMaximumCardinality(self, Value):
        '''Method IRelationshipRule.put_OriginMaximumCardinality

           INPUT
            Value               : long'''
        return super(IRelationshipRule, self).put_OriginMaximumCardinality(Value)
    def get_Category(self):
        '''Method IRule.get_Category (from IRule)

           OUTPUT
            groupBitmap         : long*'''
        return super(IRelationshipRule, self).get_Category()
    def put_Category(self, groupBitmap):
        '''Method IRule.put_Category (from IRule)

           INPUT
            groupBitmap         : long'''
        return super(IRelationshipRule, self).put_Category(groupBitmap)
    def get_Helpstring(self):
        '''Method IRule.get_Helpstring (from IRule)

           OUTPUT
            Helpstring          : BSTR*'''
        return super(IRelationshipRule, self).get_Helpstring()
    def put_Helpstring(self, Helpstring):
        '''Method IRule.put_Helpstring (from IRule)

           INPUT
            Helpstring          : BSTR'''
        return super(IRelationshipRule, self).put_Helpstring(Helpstring)
    def get_ID(self):
        '''Method IRule.get_ID (from IRule)

           OUTPUT
            ID                  : long*'''
        return super(IRelationshipRule, self).get_ID()
    def put_ID(self, ID):
        '''Method IRule.put_ID (from IRule)

           INPUT
            ID                  : long'''
        return super(IRelationshipRule, self).put_ID(ID)
    def get_Type(self):
        '''Method IRule.get_Type (from IRule)

           OUTPUT
            Type                : esriRuleType*'''
        return super(IRelationshipRule, self).get_Type()
    Category = property(get_Category, put_Category, None)
    DestinationClassID = property(get_DestinationClassID, put_DestinationClassID, None)
    DestinationMaximumCardinality = property(get_DestinationMaximumCardinality, put_DestinationMaximumCardinality, None)
    DestinationMinimumCardinality = property(get_DestinationMinimumCardinality, put_DestinationMinimumCardinality, None)
    DestinationSubtypeCode = property(get_DestinationSubtypeCode, put_DestinationSubtypeCode, None)
    Helpstring = property(get_Helpstring, put_Helpstring, None)
    ID = property(get_ID, put_ID, None)
    OriginClassID = property(get_OriginClassID, put_OriginClassID, None)
    OriginMaximumCardinality = property(get_OriginMaximumCardinality, put_OriginMaximumCardinality, None)
    OriginMinimumCardinality = property(get_OriginMinimumCardinality, put_OriginMinimumCardinality, None)
    OriginSubtypeCode = property(get_OriginSubtypeCode, put_OriginSubtypeCode, None)
    Type = property(get_Type, None, None)

class IObjectClassName(_esriGeoDatabase.IObjectClassName):
    _IID = uuid.UUID('7fc83cfa-09c4-11d4-a05e-00c04f6bdd84')
    def get_ObjectClassID(self):
        '''Method IObjectClassName.get_ObjectClassID

           OUTPUT
            ID                  : long*'''
        return super(IObjectClassName, self).get_ObjectClassID()
    ObjectClassID = property(get_ObjectClassID, None, None)

class IMemoryRelationshipClassName(_esriGeoDatabase.IMemoryRelationshipClassName):
    _IID = uuid.UUID('91dbc553-eb2d-11d3-9f84-00c04f6bc886')

    def __init__(self, *args, **kw):
        super(IMemoryRelationshipClassName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_OriginName(self):
        '''Method IMemoryRelationshipClassName.get_OriginName

           OUTPUT
            OriginName          : IName**'''
        return super(IMemoryRelationshipClassName, self).get_OriginName()
    def putref_OriginName(self, OriginName):
        '''Method IMemoryRelationshipClassName.putref_OriginName

           INPUT
            OriginName          : IName*'''
        return super(IMemoryRelationshipClassName, self).putref_OriginName(OriginName)
    def get_DestinationName(self):
        '''Method IMemoryRelationshipClassName.get_DestinationName

           OUTPUT
            DestinationName     : IName**'''
        return super(IMemoryRelationshipClassName, self).get_DestinationName()
    def putref_DestinationName(self, DestinationName):
        '''Method IMemoryRelationshipClassName.putref_DestinationName

           INPUT
            DestinationName     : IName*'''
        return super(IMemoryRelationshipClassName, self).putref_DestinationName(DestinationName)
    def get_ForwardPathLabel(self):
        '''Method IMemoryRelationshipClassName.get_ForwardPathLabel

           OUTPUT
            ForwardLabel        : BSTR*'''
        return super(IMemoryRelationshipClassName, self).get_ForwardPathLabel()
    def put_ForwardPathLabel(self, ForwardLabel):
        '''Method IMemoryRelationshipClassName.put_ForwardPathLabel

           INPUT
            ForwardLabel        : BSTR'''
        return super(IMemoryRelationshipClassName, self).put_ForwardPathLabel(ForwardLabel)
    def get_BackwardPathLabel(self):
        '''Method IMemoryRelationshipClassName.get_BackwardPathLabel

           OUTPUT
            backLabel           : BSTR*'''
        return super(IMemoryRelationshipClassName, self).get_BackwardPathLabel()
    def put_BackwardPathLabel(self, backLabel):
        '''Method IMemoryRelationshipClassName.put_BackwardPathLabel

           INPUT
            backLabel           : BSTR'''
        return super(IMemoryRelationshipClassName, self).put_BackwardPathLabel(backLabel)
    def get_OriginPrimaryKey(self):
        '''Method IMemoryRelationshipClassName.get_OriginPrimaryKey

           OUTPUT
            OriginPrimaryKey    : BSTR*'''
        return super(IMemoryRelationshipClassName, self).get_OriginPrimaryKey()
    def put_OriginPrimaryKey(self, OriginPrimaryKey):
        '''Method IMemoryRelationshipClassName.put_OriginPrimaryKey

           INPUT
            OriginPrimaryKey    : BSTR'''
        return super(IMemoryRelationshipClassName, self).put_OriginPrimaryKey(OriginPrimaryKey)
    def get_OriginForeignKey(self):
        '''Method IMemoryRelationshipClassName.get_OriginForeignKey

           OUTPUT
            OriginPrimaryKey    : BSTR*'''
        return super(IMemoryRelationshipClassName, self).get_OriginForeignKey()
    def put_OriginForeignKey(self, OriginPrimaryKey):
        '''Method IMemoryRelationshipClassName.put_OriginForeignKey

           INPUT
            OriginPrimaryKey    : BSTR'''
        return super(IMemoryRelationshipClassName, self).put_OriginForeignKey(OriginPrimaryKey)
    BackwardPathLabel = property(get_BackwardPathLabel, put_BackwardPathLabel, None)
    DestinationName = property(get_DestinationName, putref_DestinationName, None)
    ForwardPathLabel = property(get_ForwardPathLabel, put_ForwardPathLabel, None)
    OriginForeignKey = property(get_OriginForeignKey, put_OriginForeignKey, None)
    OriginName = property(get_OriginName, putref_OriginName, None)
    OriginPrimaryKey = property(get_OriginPrimaryKey, put_OriginPrimaryKey, None)

class IClassHelper(_esriGeoDatabase.IClassHelper):
    _IID = uuid.UUID('65ded622-a14e-11d3-9f97-00c04f6bdf0c')
    def get_Class(self):
        '''Method IClassHelper.get_Class

           OUTPUT
            ObjectClass         : IClass**'''
        return super(IClassHelper, self).get_Class()
    Class = property(get_Class, None, None)

class IClassExtension(_esriGeoDatabase.IClassExtension):
    _IID = uuid.UUID('1c014e3d-a1e1-11d3-9f97-00c04f6bdf0c')
    def Init(self, ClassHelper, ExtensionProperties):
        '''Method IClassExtension.Init

           INPUTS
            ClassHelper         : IClassHelper*
            ExtensionProperties : IPropertySet*'''
        return super(IClassExtension, self).Init(ClassHelper, ExtensionProperties)
    def Shutdown(self):
        '''Method IClassExtension.Shutdown'''
        return super(IClassExtension, self).Shutdown()

class IObjectClassInfo(_esriGeoDatabase.IObjectClassInfo):
    _IID = uuid.UUID('872e54f4-619f-11d3-9f7d-00c04f6bdf0c')
    def CanBypassStoreMethod(self):
        '''Method IObjectClassInfo.CanBypassStoreMethod

           OUTPUT
            canBypassStore      : VARIANT_BOOL*'''
        return super(IObjectClassInfo, self).CanBypassStoreMethod()

class IObjectClassInfo2(_esriGeoDatabase.IObjectClassInfo2):
    _IID = uuid.UUID('2840c37d-0513-11d4-9fa7-00c04f6bdf0c')
    def CanBypassStoreMethod(self):
        '''Method IObjectClassInfo2.CanBypassStoreMethod

           OUTPUT
            canBypassStore      : VARIANT_BOOL*'''
        return super(IObjectClassInfo2, self).CanBypassStoreMethod()
    def CanBypassEditSession(self):
        '''Method IObjectClassInfo2.CanBypassEditSession

           OUTPUT
            CanBypassEditSession: VARIANT_BOOL*'''
        return super(IObjectClassInfo2, self).CanBypassEditSession()

class IFeatureClassDraw(_esriGeoDatabase.IFeatureClassDraw):
    _IID = uuid.UUID('ae0603c6-a98b-11d2-aada-00c04fa37b82')
    def get_RequiredFieldsForDraw(self):
        '''Method IFeatureClassDraw.get_RequiredFieldsForDraw

           OUTPUT
            Fields              : IFields**'''
        return super(IFeatureClassDraw, self).get_RequiredFieldsForDraw()
    def DoesCustomDrawing(self):
        '''Method IFeatureClassDraw.DoesCustomDrawing

           OUTPUT
            doesDrawing         : VARIANT_BOOL*'''
        return super(IFeatureClassDraw, self).DoesCustomDrawing()
    def get_CustomRenderer(self):
        '''Method IFeatureClassDraw.get_CustomRenderer

           OUTPUT
            rendererIUnk        : VARIANT*'''
        return super(IFeatureClassDraw, self).get_CustomRenderer()
    def get_CustomRendererPropPageCLSID(self):
        '''Method IFeatureClassDraw.get_CustomRendererPropPageCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IFeatureClassDraw, self).get_CustomRendererPropPageCLSID()
    def get_ExclusiveCustomRenderer(self):
        '''Method IFeatureClassDraw.get_ExclusiveCustomRenderer

           OUTPUT
            isExclusive         : VARIANT_BOOL*'''
        return super(IFeatureClassDraw, self).get_ExclusiveCustomRenderer()
    def HasCustomRenderer(self):
        '''Method IFeatureClassDraw.HasCustomRenderer

           OUTPUT
            hasRenderer         : VARIANT_BOOL*'''
        return super(IFeatureClassDraw, self).HasCustomRenderer()
    CustomRenderer = property(get_CustomRenderer, None, None)
    CustomRendererPropPageCLSID = property(get_CustomRendererPropPageCLSID, None, None)
    ExclusiveCustomRenderer = property(get_ExclusiveCustomRenderer, None, None)
    RequiredFieldsForDraw = property(get_RequiredFieldsForDraw, None, None)

class IRowSubtypes(_esriGeoDatabase.IRowSubtypes):
    _IID = uuid.UUID('d3f18540-bf77-11d2-aaf2-00c04fa37b82')

    def __init__(self, *args, **kw):
        super(IRowSubtypes, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SubtypeCode(self):
        '''Method IRowSubtypes.get_SubtypeCode

           OUTPUT
            SubtypeCode         : long*'''
        return super(IRowSubtypes, self).get_SubtypeCode()
    def put_SubtypeCode(self, SubtypeCode):
        '''Method IRowSubtypes.put_SubtypeCode

           INPUT
            SubtypeCode         : long'''
        return super(IRowSubtypes, self).put_SubtypeCode(SubtypeCode)
    def InitDefaultValues(self):
        '''Method IRowSubtypes.InitDefaultValues'''
        return super(IRowSubtypes, self).InitDefaultValues()
    SubtypeCode = property(get_SubtypeCode, put_SubtypeCode, None)

class IEnumGeometryBind(_esriGeoDatabase.IEnumGeometryBind):
    _IID = uuid.UUID('3bb37818-5029-11d3-9f44-00c04f6bdd7f')
    def BindGeometrySource(self, OutputFilter, collectionSource):
        '''Method IEnumGeometryBind.BindGeometrySource

           INPUTS
            OutputFilter        : IQueryFilter*
            collectionSource    : IUnknown*'''
        return super(IEnumGeometryBind, self).BindGeometrySource(OutputFilter, collectionSource)
    def get_GeometrySource(self, GeometrySource):
        '''Method IEnumGeometryBind.get_GeometrySource

           INPUT
            GeometrySource      : IUnknown**'''
        return super(IEnumGeometryBind, self).get_GeometrySource(GeometrySource)
    def get_OutputFilter(self, OutputFilter):
        '''Method IEnumGeometryBind.get_OutputFilter

           INPUT
            OutputFilter        : IQueryFilter**'''
        return super(IEnumGeometryBind, self).get_OutputFilter(OutputFilter)

class IRowEvents(_esriGeoDatabase.IRowEvents):
    _IID = uuid.UUID('8c387320-12c6-11d2-aad1-00c04fa37b81')
    def OnChanged(self):
        '''Method IRowEvents.OnChanged'''
        return super(IRowEvents, self).OnChanged()
    def OnDelete(self):
        '''Method IRowEvents.OnDelete'''
        return super(IRowEvents, self).OnDelete()
    def OnInitialize(self):
        '''Method IRowEvents.OnInitialize'''
        return super(IRowEvents, self).OnInitialize()
    def OnNew(self):
        '''Method IRowEvents.OnNew'''
        return super(IRowEvents, self).OnNew()
    def OnValidate(self):
        '''Method IRowEvents.OnValidate'''
        return super(IRowEvents, self).OnValidate()

class IRowChanges(_esriGeoDatabase.IRowChanges):
    _IID = uuid.UUID('022f7462-69fa-11d3-9fd0-00c04f6bdd84')
    def get_ValueChanged(self, Index):
        '''Method IRowChanges.get_ValueChanged

           INPUT
            Index               : long

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IRowChanges, self).get_ValueChanged(Index)
    def get_OriginalValue(self, Index):
        '''Method IRowChanges.get_OriginalValue

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IRowChanges, self).get_OriginalValue(Index)
    OriginalValue = IndexProperty(get_OriginalValue, None)
    ValueChanged = IndexProperty(get_ValueChanged, None)

class IFeatureEvents(_esriGeoDatabase.IFeatureEvents):
    _IID = uuid.UUID('46097234-1224-11d2-aacf-00c04fa37b81')
    def InitShape(self):
        '''Method IFeatureEvents.InitShape'''
        return super(IFeatureEvents, self).InitShape()
    def OnSplit(self):
        '''Method IFeatureEvents.OnSplit'''
        return super(IFeatureEvents, self).OnSplit()
    def OnMerge(self):
        '''Method IFeatureEvents.OnMerge'''
        return super(IFeatureEvents, self).OnMerge()

class IFeatureChanges(_esriGeoDatabase.IFeatureChanges):
    _IID = uuid.UUID('022f7463-69fa-11d3-9fd0-00c04f6bdd84')
    def get_ShapeChanged(self):
        '''Method IFeatureChanges.get_ShapeChanged

           OUTPUT
            changed             : VARIANT_BOOL*'''
        return super(IFeatureChanges, self).get_ShapeChanged()
    def get_OriginalShape(self):
        '''Method IFeatureChanges.get_OriginalShape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IFeatureChanges, self).get_OriginalShape()
    OriginalShape = property(get_OriginalShape, None, None)
    ShapeChanged = property(get_ShapeChanged, None, None)

class INetworkFeatureEvents(_esriGeoDatabase.INetworkFeatureEvents):
    _IID = uuid.UUID('826b121a-14e9-11d2-aef5-0000f80372b4')
    def OnConnect(self):
        '''Method INetworkFeatureEvents.OnConnect'''
        return super(INetworkFeatureEvents, self).OnConnect()
    def OnDisconnect(self):
        '''Method INetworkFeatureEvents.OnDisconnect'''
        return super(INetworkFeatureEvents, self).OnDisconnect()

class IEnumFeatureSetup(_esriGeoDatabase.IEnumFeatureSetup):
    _IID = uuid.UUID('6ea26548-cd08-47f3-93ca-bd8d8ab5d30a')

    def __init__(self, *args, **kw):
        super(IEnumFeatureSetup, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Recycling(self):
        '''Method IEnumFeatureSetup.get_Recycling

           OUTPUT
            recyling            : VARIANT_BOOL*'''
        return super(IEnumFeatureSetup, self).get_Recycling()
    def put_Recycling(self, recyling):
        '''Method IEnumFeatureSetup.put_Recycling

           INPUT
            recyling            : VARIANT_BOOL'''
        return super(IEnumFeatureSetup, self).put_Recycling(recyling)
    def get_AllFields(self):
        '''Method IEnumFeatureSetup.get_AllFields

           OUTPUT
            AllFields           : VARIANT_BOOL*'''
        return super(IEnumFeatureSetup, self).get_AllFields()
    def put_AllFields(self, AllFields):
        '''Method IEnumFeatureSetup.put_AllFields

           INPUT
            AllFields           : VARIANT_BOOL'''
        return super(IEnumFeatureSetup, self).put_AllFields(AllFields)
    AllFields = property(get_AllFields, put_AllFields, None)
    Recycling = property(get_Recycling, put_Recycling, None)

class IObjects(_esriGeoDatabase.IObjects):
    _IID = uuid.UUID('abab1c4b-49a8-11d1-9aa6-080009ec734b')
    def Count(self, classFilter):
        '''Method IObjects.Count

           INPUT
            classFilter         : IUID*

           OUTPUT
            Count               : long*'''
        return super(IObjects, self).Count(classFilter)
    def Insert(self, Index, Object, CLSID):
        '''Method IObjects.Insert

           INPUTS
            Index               : long
            Object              : IUnknown*
            CLSID               : IUID*'''
        return super(IObjects, self).Insert(Index, Object, CLSID)
    def Remove(self, Index, Count):
        '''Method IObjects.Remove

           INPUTS
            Index               : long
            Count               : long'''
        return super(IObjects, self).Remove(Index, Count)
    def Get(self, Index):
        '''Method IObjects.Get

           INPUT
            Index               : long

           OUTPUT
            Object              : IUnknown**'''
        return super(IObjects, self).Get(Index)
    def Set(self, Index, Object, CLSID):
        '''Method IObjects.Set

           INPUTS
            Index               : long
            Object              : IUnknown*
            CLSID               : IUID*

           OUTPUT
            previousObject      : IUnknown**'''
        return super(IObjects, self).Set(Index, Object, CLSID)

class IFeatureSnap(_esriGeoDatabase.IFeatureSnap):
    _IID = uuid.UUID('bffb1704-dbc0-11d1-aa7c-00c04fa374bd')
    def Snap(self, point, tolerance):
        '''Method IFeatureSnap.Snap

           INPUTS
            point               : IPoint*
            tolerance           : double

           OUTPUT
            snapped             : VARIANT_BOOL*'''
        return super(IFeatureSnap, self).Snap(point, tolerance)

class ITimeQueryFilter(_esriGeoDatabase.ITimeQueryFilter):
    _IID = uuid.UUID('20e1c9a6-ff1e-489f-bb59-b03bed3a8660')

    def __init__(self, *args, **kw):
        super(ITimeQueryFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TimeValue(self):
        '''Method ITimeQueryFilter.get_TimeValue

           OUTPUT
            TimeValue           : ITimeValue**'''
        return super(ITimeQueryFilter, self).get_TimeValue()
    def putref_TimeValue(self, TimeValue):
        '''Method ITimeQueryFilter.putref_TimeValue

           INPUT
            TimeValue           : ITimeValue*'''
        return super(ITimeQueryFilter, self).putref_TimeValue(TimeValue)
    def get_OutputTimeReference(self):
        '''Method ITimeQueryFilter.get_OutputTimeReference

           OUTPUT
            TimeReference       : ITimeReference**'''
        return super(ITimeQueryFilter, self).get_OutputTimeReference()
    def putref_OutputTimeReference(self, TimeReference):
        '''Method ITimeQueryFilter.putref_OutputTimeReference

           INPUT
            TimeReference       : ITimeReference*'''
        return super(ITimeQueryFilter, self).putref_OutputTimeReference(TimeReference)
    def get_TimeRelation(self):
        '''Method ITimeQueryFilter.get_TimeRelation

           OUTPUT
            relation            : esriTimeRelation*'''
        return super(ITimeQueryFilter, self).get_TimeRelation()
    def put_TimeRelation(self, relation):
        '''Method ITimeQueryFilter.put_TimeRelation

           INPUT
            relation            : esriTimeRelation'''
        return super(ITimeQueryFilter, self).put_TimeRelation(relation)
    OutputTimeReference = property(get_OutputTimeReference, putref_OutputTimeReference, None)
    TimeRelation = property(get_TimeRelation, put_TimeRelation, None)
    TimeValue = property(get_TimeValue, putref_TimeValue, None)

class IFilterDefs(_esriGeoDatabase.IFilterDefs):
    _IID = uuid.UUID('0fa04c6d-25bd-4fee-b9e7-1146219b102d')
    def get_Count(self):
        '''Method IFilterDefs.get_Count

           OUTPUT
            Count               : long*'''
        return super(IFilterDefs, self).get_Count()
    def get_Element(self, Index):
        '''Method IFilterDefs.get_Element

           INPUT
            Index               : long

           OUTPUT
            filterDef           : IFilterDef**'''
        return super(IFilterDefs, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IFilterDefs.Remove

           INPUT
            Index               : long'''
        return super(IFilterDefs, self).Remove(Index)
    def RemoveAll(self):
        '''Method IFilterDefs.RemoveAll'''
        return super(IFilterDefs, self).RemoveAll()
    def Add(self, filterDef):
        '''Method IFilterDefs.Add

           INPUT
            filterDef           : IFilterDef*'''
        return super(IFilterDefs, self).Add(filterDef)
    def Insert(self, Index, filterDef):
        '''Method IFilterDefs.Insert

           INPUTS
            Index               : long
            filterDef           : IFilterDef*'''
        return super(IFilterDefs, self).Insert(Index, filterDef)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IXMLFilterDef(_esriGeoDatabase.IXMLFilterDef):
    _IID = uuid.UUID('0b308561-d65c-4256-9bf9-4363f7997f3b')

    def __init__(self, *args, **kw):
        super(IXMLFilterDef, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FieldName(self):
        '''Method IXMLFilterDef.get_FieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IXMLFilterDef, self).get_FieldName()
    def put_FieldName(self, FieldName):
        '''Method IXMLFilterDef.put_FieldName

           INPUT
            FieldName           : BSTR'''
        return super(IXMLFilterDef, self).put_FieldName(FieldName)
    def get_Expression(self):
        '''Method IXMLFilterDef.get_Expression

           OUTPUT
            expr                : BSTR*'''
        return super(IXMLFilterDef, self).get_Expression()
    def put_Expression(self, expr):
        '''Method IXMLFilterDef.put_Expression

           INPUT
            expr                : BSTR'''
        return super(IXMLFilterDef, self).put_Expression(expr)
    Expression = property(get_Expression, put_Expression, None)
    FieldName = property(get_FieldName, put_FieldName, None)

class IQueryFilterDefinition(_esriGeoDatabase.IQueryFilterDefinition):
    _IID = uuid.UUID('90f3c7ca-30d5-454b-ab33-fb869991edfe')

    def __init__(self, *args, **kw):
        super(IQueryFilterDefinition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PostfixClause(self):
        '''Method IQueryFilterDefinition.get_PostfixClause

           OUTPUT
            clause              : BSTR*'''
        return super(IQueryFilterDefinition, self).get_PostfixClause()
    def put_PostfixClause(self, clause):
        '''Method IQueryFilterDefinition.put_PostfixClause

           INPUT
            clause              : BSTR'''
        return super(IQueryFilterDefinition, self).put_PostfixClause(clause)
    def get_FilterDefs(self):
        '''Method IQueryFilterDefinition.get_FilterDefs

           OUTPUT
            filters             : IFilterDefs**'''
        return super(IQueryFilterDefinition, self).get_FilterDefs()
    def putref_FilterDefs(self, filters):
        '''Method IQueryFilterDefinition.putref_FilterDefs

           INPUT
            filters             : IFilterDefs*'''
        return super(IQueryFilterDefinition, self).putref_FilterDefs(filters)
    FilterDefs = property(get_FilterDefs, putref_FilterDefs, None)
    PostfixClause = property(get_PostfixClause, put_PostfixClause, None)

class IQueryFilterDefinition2(_esriGeoDatabase.IQueryFilterDefinition2):
    _IID = uuid.UUID('45096447-06ff-4e5e-a260-9213e009af29')

    def __init__(self, *args, **kw):
        super(IQueryFilterDefinition2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PrefixClause(self):
        '''Method IQueryFilterDefinition2.get_PrefixClause

           OUTPUT
            clause              : BSTR*'''
        return super(IQueryFilterDefinition2, self).get_PrefixClause()
    def put_PrefixClause(self, clause):
        '''Method IQueryFilterDefinition2.put_PrefixClause

           INPUT
            clause              : BSTR'''
        return super(IQueryFilterDefinition2, self).put_PrefixClause(clause)
    def get_PostfixClause(self):
        '''Method IQueryFilterDefinition.get_PostfixClause (from IQueryFilterDefinition)

           OUTPUT
            clause              : BSTR*'''
        return super(IQueryFilterDefinition2, self).get_PostfixClause()
    def put_PostfixClause(self, clause):
        '''Method IQueryFilterDefinition.put_PostfixClause (from IQueryFilterDefinition)

           INPUT
            clause              : BSTR'''
        return super(IQueryFilterDefinition2, self).put_PostfixClause(clause)
    def get_FilterDefs(self):
        '''Method IQueryFilterDefinition.get_FilterDefs (from IQueryFilterDefinition)

           OUTPUT
            filters             : IFilterDefs**'''
        return super(IQueryFilterDefinition2, self).get_FilterDefs()
    def putref_FilterDefs(self, filters):
        '''Method IQueryFilterDefinition.putref_FilterDefs (from IQueryFilterDefinition)

           INPUT
            filters             : IFilterDefs*'''
        return super(IQueryFilterDefinition2, self).putref_FilterDefs(filters)
    FilterDefs = property(get_FilterDefs, putref_FilterDefs, None)
    PostfixClause = property(get_PostfixClause, put_PostfixClause, None)
    PrefixClause = property(get_PrefixClause, put_PrefixClause, None)

class IGeometricNetworkReconcileProperties(_esriGeoDatabase.IGeometricNetworkReconcileProperties):
    _IID = uuid.UUID('e775f490-ddbf-4710-965c-070bccd1cec4')

    def __init__(self, *args, **kw):
        super(IGeometricNetworkReconcileProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ReduceNetworkConflicts(self):
        '''Method IGeometricNetworkReconcileProperties.get_ReduceNetworkConflicts

           OUTPUT
            ReduceNetworkConflicts: VARIANT_BOOL*'''
        return super(IGeometricNetworkReconcileProperties, self).get_ReduceNetworkConflicts()
    def put_ReduceNetworkConflicts(self, ReduceNetworkConflicts):
        '''Method IGeometricNetworkReconcileProperties.put_ReduceNetworkConflicts

           INPUT
            ReduceNetworkConflicts: VARIANT_BOOL'''
        return super(IGeometricNetworkReconcileProperties, self).put_ReduceNetworkConflicts(ReduceNetworkConflicts)
    ReduceNetworkConflicts = property(get_ReduceNetworkConflicts, put_ReduceNetworkConflicts, None)

class IGeometricNetworkConnectivity(_esriGeoDatabase.IGeometricNetworkConnectivity):
    _IID = uuid.UUID('3fc4db86-64b4-11d4-a0ad-00c04f6bdd84')
    def RebuildConnectivity(self, incrementalRebuildArea):
        '''Method IGeometricNetworkConnectivity.RebuildConnectivity

           INPUT
            incrementalRebuildArea: IEnvelope*'''
        return super(IGeometricNetworkConnectivity, self).RebuildConnectivity(incrementalRebuildArea)

class IRepairConnectivityProgressEvents(_esriGeoDatabase.IRepairConnectivityProgressEvents):
    _IID = uuid.UUID('cfa5b406-5b16-4817-86e5-bc632a7988c8')
    def PutMessage(self, phaseMessage):
        '''Method IRepairConnectivityProgressEvents.PutMessage

           INPUT
            phaseMessage        : BSTR'''
        return super(IRepairConnectivityProgressEvents, self).PutMessage(phaseMessage)
    def MaxFeatures(self, MaxFeatures):
        '''Method IRepairConnectivityProgressEvents.MaxFeatures

           INPUT
            MaxFeatures         : long'''
        return super(IRepairConnectivityProgressEvents, self).MaxFeatures(MaxFeatures)
    def StepValue(self, StepValue):
        '''Method IRepairConnectivityProgressEvents.StepValue

           INPUT
            StepValue           : long'''
        return super(IRepairConnectivityProgressEvents, self).StepValue(StepValue)
    def Step(self):
        '''Method IRepairConnectivityProgressEvents.Step'''
        return super(IRepairConnectivityProgressEvents, self).Step()
    def IsCancelled(self):
        '''Method IRepairConnectivityProgressEvents.IsCancelled

           OUTPUT
            IsCancelled         : VARIANT_BOOL*'''
        return super(IRepairConnectivityProgressEvents, self).IsCancelled()

class IRepairConnectivityProgress(_esriGeoDatabase.IRepairConnectivityProgress):
    _IID = uuid.UUID('eae208a2-2cba-4bb6-a854-b05d389aa798')
    def get_Warnings(self):
        '''Method IRepairConnectivityProgress.get_Warnings

           OUTPUT
            Warnings            : VARIANT*'''
        return super(IRepairConnectivityProgress, self).get_Warnings()
    Warnings = property(get_Warnings, None, None)

class IGeometricNetworkConnectivity2(_esriGeoDatabase.IGeometricNetworkConnectivity2):
    _IID = uuid.UUID('3942bf39-efe9-4094-9089-bc41b459b384')
    def CheckAndRepairConnectivity(self, checkOnly, logFilePath, RepairConnectivityProgress):
        '''Method IGeometricNetworkConnectivity2.CheckAndRepairConnectivity

           INPUTS
            checkOnly           : VARIANT_BOOL
            logFilePath         : BSTR
            RepairConnectivityProgress: IRepairConnectivityProgress*

           OUTPUTS
            errorSelectionSets  : ISet**
            hasInternalInconsistencies: VARIANT_BOOL*'''
        return super(IGeometricNetworkConnectivity2, self).CheckAndRepairConnectivity(checkOnly, logFilePath, RepairConnectivityProgress)
    def RebuildConnectivity2(self, incrementalRebuildArea):
        '''Method IGeometricNetworkConnectivity2.RebuildConnectivity2

           INPUT
            incrementalRebuildArea: IEnvelope*'''
        return super(IGeometricNetworkConnectivity2, self).RebuildConnectivity2(incrementalRebuildArea)
    def RebuildConnectivity(self, incrementalRebuildArea):
        '''Method IGeometricNetworkConnectivity.RebuildConnectivity (from IGeometricNetworkConnectivity)

           INPUT
            incrementalRebuildArea: IEnvelope*'''
        return super(IGeometricNetworkConnectivity2, self).RebuildConnectivity(incrementalRebuildArea)

class IRebuildIndexes(_esriGeoDatabase.IRebuildIndexes):
    _IID = uuid.UUID('d77cd399-a952-4e9f-a17c-7f2bc587146d')
    def RebuildIndexes(self, deltaOnly):
        '''Method IRebuildIndexes.RebuildIndexes

           INPUT
            deltaOnly           : VARIANT_BOOL'''
        return super(IRebuildIndexes, self).RebuildIndexes(deltaOnly)

class IVersionedView(_esriGeoDatabase.IVersionedView):
    _IID = uuid.UUID('7b5e7005-329f-11d4-9fb9-00c04f6bdf0c')
    def get_HasVersionedView(self):
        '''Method IVersionedView.get_HasVersionedView

           OUTPUT
            HasVersionedView    : VARIANT_BOOL*'''
        return super(IVersionedView, self).get_HasVersionedView()
    def get_VersionedViewName(self):
        '''Method IVersionedView.get_VersionedViewName

           OUTPUT
            Name                : BSTR*'''
        return super(IVersionedView, self).get_VersionedViewName()
    def CreateVersionedView(self, Name):
        '''Method IVersionedView.CreateVersionedView

           INPUT
            Name                : BSTR'''
        return super(IVersionedView, self).CreateVersionedView(Name)
    def DropVersionedView(self):
        '''Method IVersionedView.DropVersionedView'''
        return super(IVersionedView, self).DropVersionedView()
    HasVersionedView = property(get_HasVersionedView, None, None)
    VersionedViewName = property(get_VersionedViewName, None, None)

class IVersionEvents(_esriGeoDatabase.IVersionEvents):
    _IID = uuid.UUID('0b437961-89f9-11d4-8b5f-000000000000')
    def OnConflictsDetected(self, conflictsRemoved, errorOccurred, errorString):
        '''Method IVersionEvents.OnConflictsDetected

           INPUTS
            conflictsRemoved    : VARIANT_BOOL*
            errorOccurred       : VARIANT_BOOL*
            errorString         : BSTR*'''
        return super(IVersionEvents, self).OnConflictsDetected(conflictsRemoved, errorOccurred, errorString)
    def OnReconcile(self, targetVersionName, HasConflicts):
        '''Method IVersionEvents.OnReconcile

           INPUTS
            targetVersionName   : BSTR
            HasConflicts        : VARIANT_BOOL'''
        return super(IVersionEvents, self).OnReconcile(targetVersionName, HasConflicts)
    def OnRefreshVersion(self):
        '''Method IVersionEvents.OnRefreshVersion'''
        return super(IVersionEvents, self).OnRefreshVersion()
    def OnRedefineVersion(self, oldVersionName, newVersionName):
        '''Method IVersionEvents.OnRedefineVersion

           INPUTS
            oldVersionName      : BSTR
            newVersionName      : BSTR'''
        return super(IVersionEvents, self).OnRedefineVersion(oldVersionName, newVersionName)

class IVersionEvents2(_esriGeoDatabase.IVersionEvents2):
    _IID = uuid.UUID('97469719-829a-40d7-82d5-a8408e5c276e')
    def OnArchiveUpdated(self, archiveTransactionTime):
        '''Method IVersionEvents2.OnArchiveUpdated

           INPUT
            archiveTransactionTime: VARIANT'''
        return super(IVersionEvents2, self).OnArchiveUpdated(archiveTransactionTime)
    def OnBeginReconcile(self, targetVersionName):
        '''Method IVersionEvents2.OnBeginReconcile

           INPUT
            targetVersionName   : BSTR'''
        return super(IVersionEvents2, self).OnBeginReconcile(targetVersionName)
    def OnPost(self, targetVersionName):
        '''Method IVersionEvents2.OnPost

           INPUT
            targetVersionName   : BSTR'''
        return super(IVersionEvents2, self).OnPost(targetVersionName)
    def OnDeleteVersion(self, VersionName):
        '''Method IVersionEvents2.OnDeleteVersion

           INPUT
            VersionName         : BSTR'''
        return super(IVersionEvents2, self).OnDeleteVersion(VersionName)

class IGeodatabaseRelease2(_esriGeoDatabase.IGeodatabaseRelease2):
    _IID = uuid.UUID('92ca80ca-081b-40c2-a444-9357c681e53c')
    def get_DatasetSupported(self, Type):
        '''Method IGeodatabaseRelease2.get_DatasetSupported

           INPUT
            Type                : esriDatasetType

           OUTPUT
            canSupport          : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease2, self).get_DatasetSupported(Type)
    def get_CanUpgrade(self):
        '''Method IGeodatabaseRelease.get_CanUpgrade (from IGeodatabaseRelease)

           OUTPUT
            CanUpgrade          : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease2, self).get_CanUpgrade()
    def get_CurrentRelease(self):
        '''Method IGeodatabaseRelease.get_CurrentRelease (from IGeodatabaseRelease)

           OUTPUT
            isCurrent           : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease2, self).get_CurrentRelease()
    def get_MajorVersion(self):
        '''Method IGeodatabaseRelease.get_MajorVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease2, self).get_MajorVersion()
    def get_MinorVersion(self):
        '''Method IGeodatabaseRelease.get_MinorVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease2, self).get_MinorVersion()
    def get_BugfixVersion(self):
        '''Method IGeodatabaseRelease.get_BugfixVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease2, self).get_BugfixVersion()
    def Upgrade(self):
        '''Method IGeodatabaseRelease.Upgrade (from IGeodatabaseRelease)'''
        return super(IGeodatabaseRelease2, self).Upgrade()
    BugfixVersion = property(get_BugfixVersion, None, None)
    CanUpgrade = property(get_CanUpgrade, None, None)
    CurrentRelease = property(get_CurrentRelease, None, None)
    MajorVersion = property(get_MajorVersion, None, None)
    MinorVersion = property(get_MinorVersion, None, None)
    DatasetSupported = IndexProperty(get_DatasetSupported, None)

class IGeodatabaseRelease3(_esriGeoDatabase.IGeodatabaseRelease3):
    _IID = uuid.UUID('3b4aaa9d-98f3-4d9d-b561-b58c75a4338c')
    def Upgrade2(self, doPrerequisiteCheck, doUpgrade, cancelTrack, Messages):
        '''Method IGeodatabaseRelease3.Upgrade2

           INPUTS
            doPrerequisiteCheck : VARIANT_BOOL
            doUpgrade           : VARIANT_BOOL
            cancelTrack         : ITrackCancel*
            Messages            : IGPMessages*'''
        return super(IGeodatabaseRelease3, self).Upgrade2(doPrerequisiteCheck, doUpgrade, cancelTrack, Messages)
    def get_DatasetSupported(self, Type):
        '''Method IGeodatabaseRelease2.get_DatasetSupported (from IGeodatabaseRelease2)

           INPUT
            Type                : esriDatasetType

           OUTPUT
            canSupport          : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease3, self).get_DatasetSupported(Type)
    def get_CanUpgrade(self):
        '''Method IGeodatabaseRelease.get_CanUpgrade (from IGeodatabaseRelease)

           OUTPUT
            CanUpgrade          : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease3, self).get_CanUpgrade()
    def get_CurrentRelease(self):
        '''Method IGeodatabaseRelease.get_CurrentRelease (from IGeodatabaseRelease)

           OUTPUT
            isCurrent           : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease3, self).get_CurrentRelease()
    def get_MajorVersion(self):
        '''Method IGeodatabaseRelease.get_MajorVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease3, self).get_MajorVersion()
    def get_MinorVersion(self):
        '''Method IGeodatabaseRelease.get_MinorVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease3, self).get_MinorVersion()
    def get_BugfixVersion(self):
        '''Method IGeodatabaseRelease.get_BugfixVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease3, self).get_BugfixVersion()
    def Upgrade(self):
        '''Method IGeodatabaseRelease.Upgrade (from IGeodatabaseRelease)'''
        return super(IGeodatabaseRelease3, self).Upgrade()
    BugfixVersion = property(get_BugfixVersion, None, None)
    CanUpgrade = property(get_CanUpgrade, None, None)
    CurrentRelease = property(get_CurrentRelease, None, None)
    MajorVersion = property(get_MajorVersion, None, None)
    MinorVersion = property(get_MinorVersion, None, None)
    DatasetSupported = IndexProperty(get_DatasetSupported, None)

class IGeodatabaseRelease4(_esriGeoDatabase.IGeodatabaseRelease4):
    _IID = uuid.UUID('8e602b66-be7f-4d4e-9340-50df434480ad')
    def get_GeodatabaseCurrent(self):
        '''Method IGeodatabaseRelease4.get_GeodatabaseCurrent

           OUTPUT
            isGeodatabaseCurrent: VARIANT_BOOL*'''
        return super(IGeodatabaseRelease4, self).get_GeodatabaseCurrent()
    def Upgrade2(self, doPrerequisiteCheck, doUpgrade, cancelTrack, Messages):
        '''Method IGeodatabaseRelease3.Upgrade2 (from IGeodatabaseRelease3)

           INPUTS
            doPrerequisiteCheck : VARIANT_BOOL
            doUpgrade           : VARIANT_BOOL
            cancelTrack         : ITrackCancel*
            Messages            : IGPMessages*'''
        return super(IGeodatabaseRelease4, self).Upgrade2(doPrerequisiteCheck, doUpgrade, cancelTrack, Messages)
    def get_DatasetSupported(self, Type):
        '''Method IGeodatabaseRelease2.get_DatasetSupported (from IGeodatabaseRelease2)

           INPUT
            Type                : esriDatasetType

           OUTPUT
            canSupport          : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease4, self).get_DatasetSupported(Type)
    def get_CanUpgrade(self):
        '''Method IGeodatabaseRelease.get_CanUpgrade (from IGeodatabaseRelease)

           OUTPUT
            CanUpgrade          : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease4, self).get_CanUpgrade()
    def get_CurrentRelease(self):
        '''Method IGeodatabaseRelease.get_CurrentRelease (from IGeodatabaseRelease)

           OUTPUT
            isCurrent           : VARIANT_BOOL*'''
        return super(IGeodatabaseRelease4, self).get_CurrentRelease()
    def get_MajorVersion(self):
        '''Method IGeodatabaseRelease.get_MajorVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease4, self).get_MajorVersion()
    def get_MinorVersion(self):
        '''Method IGeodatabaseRelease.get_MinorVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease4, self).get_MinorVersion()
    def get_BugfixVersion(self):
        '''Method IGeodatabaseRelease.get_BugfixVersion (from IGeodatabaseRelease)

           OUTPUT
            versionNumber       : long*'''
        return super(IGeodatabaseRelease4, self).get_BugfixVersion()
    def Upgrade(self):
        '''Method IGeodatabaseRelease.Upgrade (from IGeodatabaseRelease)'''
        return super(IGeodatabaseRelease4, self).Upgrade()
    BugfixVersion = property(get_BugfixVersion, None, None)
    CanUpgrade = property(get_CanUpgrade, None, None)
    CurrentRelease = property(get_CurrentRelease, None, None)
    GeodatabaseCurrent = property(get_GeodatabaseCurrent, None, None)
    MajorVersion = property(get_MajorVersion, None, None)
    MinorVersion = property(get_MinorVersion, None, None)
    DatasetSupported = IndexProperty(get_DatasetSupported, None)

class IObjectClassDescription(_esriGeoDatabase.IObjectClassDescription):
    _IID = uuid.UUID('6a68bebc-8b1b-11d2-a06c-0000f877ebd6')
    def get_Name(self):
        '''Method IObjectClassDescription.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IObjectClassDescription, self).get_Name()
    def get_AliasName(self):
        '''Method IObjectClassDescription.get_AliasName

           OUTPUT
            Name                : BSTR*'''
        return super(IObjectClassDescription, self).get_AliasName()
    def get_ModelName(self):
        '''Method IObjectClassDescription.get_ModelName

           OUTPUT
            Name                : BSTR*'''
        return super(IObjectClassDescription, self).get_ModelName()
    def get_ModelNameUnique(self):
        '''Method IObjectClassDescription.get_ModelNameUnique

           OUTPUT
            IsUnique            : VARIANT_BOOL*'''
        return super(IObjectClassDescription, self).get_ModelNameUnique()
    def get_InstanceCLSID(self):
        '''Method IObjectClassDescription.get_InstanceCLSID

           OUTPUT
            InstanceCLSID       : IUID**'''
        return super(IObjectClassDescription, self).get_InstanceCLSID()
    def get_ClassExtensionCLSID(self):
        '''Method IObjectClassDescription.get_ClassExtensionCLSID

           OUTPUT
            ClassExtensionCLSID : IUID**'''
        return super(IObjectClassDescription, self).get_ClassExtensionCLSID()
    def get_RequiredFields(self):
        '''Method IObjectClassDescription.get_RequiredFields

           OUTPUT
            fieldDescription    : IFields**'''
        return super(IObjectClassDescription, self).get_RequiredFields()
    AliasName = property(get_AliasName, None, None)
    ClassExtensionCLSID = property(get_ClassExtensionCLSID, None, None)
    InstanceCLSID = property(get_InstanceCLSID, None, None)
    ModelName = property(get_ModelName, None, None)
    ModelNameUnique = property(get_ModelNameUnique, None, None)
    Name = property(get_Name, None, None)
    RequiredFields = property(get_RequiredFields, None, None)

class IFeatureClassDescription(_esriGeoDatabase.IFeatureClassDescription):
    _IID = uuid.UUID('6a68bebe-8b1b-11d2-a06c-0000f877ebd6')
    def get_FeatureType(self):
        '''Method IFeatureClassDescription.get_FeatureType

           OUTPUT
            FeatureType         : esriFeatureType*'''
        return super(IFeatureClassDescription, self).get_FeatureType()
    def get_ShapeFieldName(self):
        '''Method IFeatureClassDescription.get_ShapeFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureClassDescription, self).get_ShapeFieldName()
    FeatureType = property(get_FeatureType, None, None)
    ShapeFieldName = property(get_ShapeFieldName, None, None)

class INetworkClassDescription(_esriGeoDatabase.INetworkClassDescription):
    _IID = uuid.UUID('c9318830-2052-11d3-9f8a-00c04f6bdd84')
    def get_EnabledFieldName(self):
        '''Method INetworkClassDescription.get_EnabledFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkClassDescription, self).get_EnabledFieldName()
    def get_NetworkAncillaryRoleFieldName(self):
        '''Method INetworkClassDescription.get_NetworkAncillaryRoleFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkClassDescription, self).get_NetworkAncillaryRoleFieldName()
    EnabledFieldName = property(get_EnabledFieldName, None, None)
    NetworkAncillaryRoleFieldName = property(get_NetworkAncillaryRoleFieldName, None, None)

class IXmlPropertySet(_esriGeoDatabase.IXmlPropertySet):
    _IID = uuid.UUID('121bd4bc-2508-11d3-a641-0008c7d3ae50')
    def get_CountX(self, Name):
        '''Method IXmlPropertySet.get_CountX

           INPUT
            Name                : BSTR

           OUTPUT
            Count               : long*'''
        return super(IXmlPropertySet, self).get_CountX(Name)
    def GetPropertiesByAttribute(self, Attribute, Value, noValues):
        '''Method IXmlPropertySet.GetPropertiesByAttribute

           INPUTS
            Attribute           : BSTR
            Value               : BSTR
            noValues            : VARIANT_BOOL

           OUTPUTS
            Tags                : VARIANT*
            values              : VARIANT*'''
        return super(IXmlPropertySet, self).GetPropertiesByAttribute(Attribute, Value, noValues)
    def SetPropertyX(self, Name, Value, propType, action, syncing):
        '''Method IXmlPropertySet.SetPropertyX

           INPUTS
            Name                : BSTR
            Value               : VARIANT
            propType            : esriXmlPropertyType
            action              : esriXmlSetPropertyAction
            syncing             : VARIANT_BOOL'''
        return super(IXmlPropertySet, self).SetPropertyX(Name, Value, propType, action, syncing)
    def DeleteProperty(self, Name):
        '''Method IXmlPropertySet.DeleteProperty

           INPUT
            Name                : BSTR'''
        return super(IXmlPropertySet, self).DeleteProperty(Name)
    def DeletePropertyByAttribute(self, Attribute, Value, deleteParent):
        '''Method IXmlPropertySet.DeletePropertyByAttribute

           INPUTS
            Attribute           : BSTR
            Value               : BSTR
            deleteParent        : VARIANT_BOOL'''
        return super(IXmlPropertySet, self).DeletePropertyByAttribute(Attribute, Value, deleteParent)
    def SimpleGetProperty(self, Name):
        '''Method IXmlPropertySet.SimpleGetProperty

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : BSTR*'''
        return super(IXmlPropertySet, self).SimpleGetProperty(Name)
    def SaveAsFile(self, xslPath, header, outputANSI):
        '''Method IXmlPropertySet.SaveAsFile

           INPUTS
            xslPath             : BSTR
            header              : BSTR
            outputANSI          : VARIANT_BOOL

           OUTPUT
            outPath             : BSTR*'''
        return super(IXmlPropertySet, self).SaveAsFile(xslPath, header, outputANSI)
    def get_IsNew(self):
        '''Method IXmlPropertySet.get_IsNew

           OUTPUT
            IsNew               : VARIANT_BOOL*'''
        return super(IXmlPropertySet, self).get_IsNew()
    def SetAttribute(self, Name, Attribute, Value, action):
        '''Method IXmlPropertySet.SetAttribute

           INPUTS
            Name                : BSTR
            Attribute           : BSTR
            Value               : VARIANT
            action              : esriXmlSetPropertyAction'''
        return super(IXmlPropertySet, self).SetAttribute(Name, Attribute, Value, action)
    def TransformImages(self, Path):
        '''Method IXmlPropertySet.TransformImages

           INPUT
            Path                : BSTR

           OUTPUT
            fileNames           : VARIANT*'''
        return super(IXmlPropertySet, self).TransformImages(Path)
    def InitExisting(self):
        '''Method IXmlPropertySet.InitExisting'''
        return super(IXmlPropertySet, self).InitExisting()
    IsNew = property(get_IsNew, None, None)
    CountX = IndexProperty(get_CountX, None)

class IXmlPropertySet2(_esriGeoDatabase.IXmlPropertySet2):
    _IID = uuid.UUID('01700025-ef62-47e3-bd1e-7a47d0696541')

    def __init__(self, *args, **kw):
        super(IXmlPropertySet2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CountX(self, Name):
        '''Method IXmlPropertySet2.get_CountX

           INPUT
            Name                : BSTR

           OUTPUT
            Count               : long*'''
        return super(IXmlPropertySet2, self).get_CountX(Name)
    def GetPropertiesByAttribute(self, Attribute, Value, noValues):
        '''Method IXmlPropertySet2.GetPropertiesByAttribute

           INPUTS
            Attribute           : BSTR
            Value               : BSTR
            noValues            : VARIANT_BOOL

           OUTPUTS
            Tags                : VARIANT*
            values              : VARIANT*'''
        return super(IXmlPropertySet2, self).GetPropertiesByAttribute(Attribute, Value, noValues)
    def SetPropertyX(self, Name, Value, propType, action, syncing):
        '''Method IXmlPropertySet2.SetPropertyX

           INPUTS
            Name                : BSTR
            Value               : VARIANT
            propType            : esriXmlPropertyType
            action              : esriXmlSetPropertyAction
            syncing             : VARIANT_BOOL'''
        return super(IXmlPropertySet2, self).SetPropertyX(Name, Value, propType, action, syncing)
    def DeleteProperty(self, Name):
        '''Method IXmlPropertySet2.DeleteProperty

           INPUT
            Name                : BSTR'''
        return super(IXmlPropertySet2, self).DeleteProperty(Name)
    def DeletePropertyByAttribute(self, Attribute, Value, deleteParent):
        '''Method IXmlPropertySet2.DeletePropertyByAttribute

           INPUTS
            Attribute           : BSTR
            Value               : BSTR
            deleteParent        : VARIANT_BOOL'''
        return super(IXmlPropertySet2, self).DeletePropertyByAttribute(Attribute, Value, deleteParent)
    def SimpleGetProperty(self, Name):
        '''Method IXmlPropertySet2.SimpleGetProperty

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : BSTR*'''
        return super(IXmlPropertySet2, self).SimpleGetProperty(Name)
    def SaveAsFile(self, xslPath, header, outputANSI):
        '''Method IXmlPropertySet2.SaveAsFile

           INPUTS
            xslPath             : BSTR
            header              : BSTR
            outputANSI          : VARIANT_BOOL

           OUTPUT
            outPath             : BSTR*'''
        return super(IXmlPropertySet2, self).SaveAsFile(xslPath, header, outputANSI)
    def get_IsNew(self):
        '''Method IXmlPropertySet2.get_IsNew

           OUTPUT
            IsNew               : VARIANT_BOOL*'''
        return super(IXmlPropertySet2, self).get_IsNew()
    def SetAttribute(self, Name, Attribute, Value, action):
        '''Method IXmlPropertySet2.SetAttribute

           INPUTS
            Name                : BSTR
            Attribute           : BSTR
            Value               : VARIANT
            action              : esriXmlSetPropertyAction'''
        return super(IXmlPropertySet2, self).SetAttribute(Name, Attribute, Value, action)
    def TransformImages(self, Path):
        '''Method IXmlPropertySet2.TransformImages

           INPUT
            Path                : BSTR

           OUTPUT
            fileNames           : VARIANT*'''
        return super(IXmlPropertySet2, self).TransformImages(Path)
    def InitExisting(self):
        '''Method IXmlPropertySet2.InitExisting'''
        return super(IXmlPropertySet2, self).InitExisting()
    def InitGeneric(self, rootName):
        '''Method IXmlPropertySet2.InitGeneric

           INPUT
            rootName            : BSTR'''
        return super(IXmlPropertySet2, self).InitGeneric(rootName)
    def GetXml(self, Name):
        '''Method IXmlPropertySet2.GetXml

           INPUT
            Name                : BSTR

           OUTPUT
            xml                 : BSTR*'''
        return super(IXmlPropertySet2, self).GetXml(Name)
    def SetXml(self, xml):
        '''Method IXmlPropertySet2.SetXml

           INPUT
            xml                 : BSTR'''
        return super(IXmlPropertySet2, self).SetXml(xml)
    def DeletePropertyByNameAndAttribute(self, Name, Attribute, Value, deleteParent):
        '''Method IXmlPropertySet2.DeletePropertyByNameAndAttribute

           INPUTS
            Name                : BSTR
            Attribute           : BSTR
            Value               : BSTR
            deleteParent        : VARIANT_BOOL'''
        return super(IXmlPropertySet2, self).DeletePropertyByNameAndAttribute(Name, Attribute, Value, deleteParent)
    def GetAttribute(self, Name, Attribute):
        '''Method IXmlPropertySet2.GetAttribute

           INPUTS
            Name                : BSTR
            Attribute           : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(IXmlPropertySet2, self).GetAttribute(Name, Attribute)
    def put_OverwriteSyncAttribute(self, overwriteSyncAttributes):
        '''Method IXmlPropertySet2.put_OverwriteSyncAttribute

           INPUT
            overwriteSyncAttributes: VARIANT_BOOL'''
        return super(IXmlPropertySet2, self).put_OverwriteSyncAttribute(overwriteSyncAttributes)
    def get_OverwriteSyncAttribute(self):
        '''Method IXmlPropertySet2.get_OverwriteSyncAttribute

           OUTPUT
            overwriteSyncAttributes: VARIANT_BOOL*'''
        return super(IXmlPropertySet2, self).get_OverwriteSyncAttribute()
    IsNew = property(get_IsNew, None, None)
    OverwriteSyncAttribute = property(get_OverwriteSyncAttribute, put_OverwriteSyncAttribute, None)
    CountX = IndexProperty(get_CountX, None)

class IMetadataSynchronizer(_esriGeoDatabase.IMetadataSynchronizer):
    _IID = uuid.UUID('6a07ca46-9575-4cfc-a0d4-f2c8f9d30569')
    def get_Name(self):
        '''Method IMetadataSynchronizer.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IMetadataSynchronizer, self).get_Name()
    def get_ClassID(self):
        '''Method IMetadataSynchronizer.get_ClassID

           OUTPUT
            ClassID             : IUID**'''
        return super(IMetadataSynchronizer, self).get_ClassID()
    def Update(self, PropertySet, itemDesc, Value):
        '''Method IMetadataSynchronizer.Update

           INPUTS
            PropertySet         : IXmlPropertySet*
            itemDesc            : BSTR
            Value               : VARIANT'''
        return super(IMetadataSynchronizer, self).Update(PropertySet, itemDesc, Value)
    ClassID = property(get_ClassID, None, None)
    Name = property(get_Name, None, None)

class IMetadataSynchronizerManager(_esriGeoDatabase.IMetadataSynchronizerManager):
    _IID = uuid.UUID('7d41e96f-9216-4f4b-9f9d-7a524aecfbcc')
    def get_NumSynchronizers(self):
        '''Method IMetadataSynchronizerManager.get_NumSynchronizers

           OUTPUT
            NumSynchronizers    : long*'''
        return super(IMetadataSynchronizerManager, self).get_NumSynchronizers()
    def GetSynchronizer(self, Index):
        '''Method IMetadataSynchronizerManager.GetSynchronizer

           INPUT
            Index               : long

           OUTPUT
            synchronizer        : IMetadataSynchronizer**'''
        return super(IMetadataSynchronizerManager, self).GetSynchronizer(Index)
    def SetEnabled(self, Index, Enabled):
        '''Method IMetadataSynchronizerManager.SetEnabled

           INPUTS
            Index               : long
            Enabled             : VARIANT_BOOL'''
        return super(IMetadataSynchronizerManager, self).SetEnabled(Index, Enabled)
    def GetEnabled(self, Index):
        '''Method IMetadataSynchronizerManager.GetEnabled

           INPUT
            Index               : long

           OUTPUT
            Enabled             : VARIANT_BOOL*'''
        return super(IMetadataSynchronizerManager, self).GetEnabled(Index)
    NumSynchronizers = property(get_NumSynchronizers, None, None)

class IFieldInfo2(_esriGeoDatabase.IFieldInfo2):
    _IID = uuid.UUID('8fea7378-8bb3-4a2f-8a61-338b17a1e661')

    def __init__(self, *args, **kw):
        super(IFieldInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method IFieldInfo2.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IFieldInfo2, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IFieldInfo2.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IFieldInfo2, self).put_Visible(Visible)
    def get_Alias(self):
        '''Method IFieldInfo2.get_Alias

           OUTPUT
            AliasName           : BSTR*'''
        return super(IFieldInfo2, self).get_Alias()
    def put_Alias(self, AliasName):
        '''Method IFieldInfo2.put_Alias

           INPUT
            AliasName           : BSTR'''
        return super(IFieldInfo2, self).put_Alias(AliasName)
    def get_NumberFormat(self):
        '''Method IFieldInfo2.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IFieldInfo2, self).get_NumberFormat()
    def putref_NumberFormat(self, Format):
        '''Method IFieldInfo2.putref_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IFieldInfo2, self).putref_NumberFormat(Format)
    def get_AsString(self, Value):
        '''Method IFieldInfo2.get_AsString

           INPUT
            Value               : VARIANT

           OUTPUT
            stringRep           : BSTR*'''
        return super(IFieldInfo2, self).get_AsString(Value)
    def get_ValueAsRatio(self):
        '''Method IFieldInfo2.get_ValueAsRatio

           OUTPUT
            ratio               : VARIANT_BOOL*'''
        return super(IFieldInfo2, self).get_ValueAsRatio()
    def put_ValueAsRatio(self, ratio):
        '''Method IFieldInfo2.put_ValueAsRatio

           INPUT
            ratio               : VARIANT_BOOL'''
        return super(IFieldInfo2, self).put_ValueAsRatio(ratio)
    Alias = property(get_Alias, put_Alias, None)
    NumberFormat = property(get_NumberFormat, putref_NumberFormat, None)
    ValueAsRatio = property(get_ValueAsRatio, put_ValueAsRatio, None)
    Visible = property(get_Visible, put_Visible, None)
    AsString = IndexProperty(get_AsString, None)

class IFieldInfo3(_esriGeoDatabase.IFieldInfo3):
    _IID = uuid.UUID('ca074ae5-0c07-4548-b228-cb0abdd68098')

    def __init__(self, *args, **kw):
        super(IFieldInfo3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Visible(self):
        '''Method IFieldInfo3.get_Visible

           OUTPUT
            Visible             : VARIANT_BOOL*'''
        return super(IFieldInfo3, self).get_Visible()
    def put_Visible(self, Visible):
        '''Method IFieldInfo3.put_Visible

           INPUT
            Visible             : VARIANT_BOOL'''
        return super(IFieldInfo3, self).put_Visible(Visible)
    def get_Alias(self):
        '''Method IFieldInfo3.get_Alias

           OUTPUT
            AliasName           : BSTR*'''
        return super(IFieldInfo3, self).get_Alias()
    def put_Alias(self, AliasName):
        '''Method IFieldInfo3.put_Alias

           INPUT
            AliasName           : BSTR'''
        return super(IFieldInfo3, self).put_Alias(AliasName)
    def get_NumberFormat(self):
        '''Method IFieldInfo3.get_NumberFormat

           OUTPUT
            Format              : INumberFormat**'''
        return super(IFieldInfo3, self).get_NumberFormat()
    def putref_NumberFormat(self, Format):
        '''Method IFieldInfo3.putref_NumberFormat

           INPUT
            Format              : INumberFormat*'''
        return super(IFieldInfo3, self).putref_NumberFormat(Format)
    def get_AsString(self, Value):
        '''Method IFieldInfo3.get_AsString

           INPUT
            Value               : VARIANT

           OUTPUT
            stringRep           : BSTR*'''
        return super(IFieldInfo3, self).get_AsString(Value)
    def get_ValueAsRatio(self):
        '''Method IFieldInfo3.get_ValueAsRatio

           OUTPUT
            ratio               : VARIANT_BOOL*'''
        return super(IFieldInfo3, self).get_ValueAsRatio()
    def put_ValueAsRatio(self, ratio):
        '''Method IFieldInfo3.put_ValueAsRatio

           INPUT
            ratio               : VARIANT_BOOL'''
        return super(IFieldInfo3, self).put_ValueAsRatio(ratio)
    def get_Highlight(self):
        '''Method IFieldInfo3.get_Highlight

           OUTPUT
            Highlight           : VARIANT_BOOL*'''
        return super(IFieldInfo3, self).get_Highlight()
    def put_Highlight(self, Highlight):
        '''Method IFieldInfo3.put_Highlight

           INPUT
            Highlight           : VARIANT_BOOL'''
        return super(IFieldInfo3, self).put_Highlight(Highlight)
    def get_Readonly(self):
        '''Method IFieldInfo3.get_Readonly

           OUTPUT
            readonlyField       : VARIANT_BOOL*'''
        return super(IFieldInfo3, self).get_Readonly()
    def put_Readonly(self, readonlyField):
        '''Method IFieldInfo3.put_Readonly

           INPUT
            readonlyField       : VARIANT_BOOL'''
        return super(IFieldInfo3, self).put_Readonly(readonlyField)
    Alias = property(get_Alias, put_Alias, None)
    Highlight = property(get_Highlight, put_Highlight, None)
    NumberFormat = property(get_NumberFormat, putref_NumberFormat, None)
    Readonly = property(get_Readonly, put_Readonly, None)
    ValueAsRatio = property(get_ValueAsRatio, put_ValueAsRatio, None)
    Visible = property(get_Visible, put_Visible, None)
    AsString = IndexProperty(get_AsString, None)

class IRasterFieldInfo(_esriGeoDatabase.IRasterFieldInfo):
    _IID = uuid.UUID('90fb59f1-d310-11d5-9b74-0000f8780619')
    def get_RasterField(self):
        '''Method IRasterFieldInfo.get_RasterField

           OUTPUT
            Field               : IField**'''
        return super(IRasterFieldInfo, self).get_RasterField()
    def get_RasterFieldName(self):
        '''Method IRasterFieldInfo.get_RasterFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IRasterFieldInfo, self).get_RasterFieldName()
    RasterField = property(get_RasterField, None, None)
    RasterFieldName = property(get_RasterFieldName, None, None)

class ITopologyErrorFeature(_esriGeoDatabase.ITopologyErrorFeature):
    _IID = uuid.UUID('f6ef5c20-b9cc-4bfa-b40d-4f0abb83f3fa')
    def get_ErrorID(self):
        '''Method ITopologyErrorFeature.get_ErrorID

           OUTPUT
            ID                  : long*'''
        return super(ITopologyErrorFeature, self).get_ErrorID()
    def get_IsDeleted(self):
        '''Method ITopologyErrorFeature.get_IsDeleted

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(ITopologyErrorFeature, self).get_IsDeleted()
    def get_OriginOID(self):
        '''Method ITopologyErrorFeature.get_OriginOID

           OUTPUT
            OID                 : long*'''
        return super(ITopologyErrorFeature, self).get_OriginOID()
    def get_OriginClassID(self):
        '''Method ITopologyErrorFeature.get_OriginClassID

           OUTPUT
            ClassID             : long*'''
        return super(ITopologyErrorFeature, self).get_OriginClassID()
    def get_DestinationOID(self):
        '''Method ITopologyErrorFeature.get_DestinationOID

           OUTPUT
            OID                 : long*'''
        return super(ITopologyErrorFeature, self).get_DestinationOID()
    def get_DestinationClassID(self):
        '''Method ITopologyErrorFeature.get_DestinationClassID

           OUTPUT
            ClassID             : long*'''
        return super(ITopologyErrorFeature, self).get_DestinationClassID()
    def get_IsException(self):
        '''Method ITopologyErrorFeature.get_IsException

           OUTPUT
            exception           : VARIANT_BOOL*'''
        return super(ITopologyErrorFeature, self).get_IsException()
    def get_TopologyRule(self):
        '''Method ITopologyErrorFeature.get_TopologyRule

           OUTPUT
            Rule                : IRule**'''
        return super(ITopologyErrorFeature, self).get_TopologyRule()
    def get_TopologyRuleType(self):
        '''Method ITopologyErrorFeature.get_TopologyRuleType

           OUTPUT
            ruleType            : esriTopologyRuleType*'''
        return super(ITopologyErrorFeature, self).get_TopologyRuleType()
    def get_ShapeType(self):
        '''Method ITopologyErrorFeature.get_ShapeType

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(ITopologyErrorFeature, self).get_ShapeType()
    DestinationClassID = property(get_DestinationClassID, None, None)
    DestinationOID = property(get_DestinationOID, None, None)
    ErrorID = property(get_ErrorID, None, None)
    IsDeleted = property(get_IsDeleted, None, None)
    IsException = property(get_IsException, None, None)
    OriginClassID = property(get_OriginClassID, None, None)
    OriginOID = property(get_OriginOID, None, None)
    ShapeType = property(get_ShapeType, None, None)
    TopologyRule = property(get_TopologyRule, None, None)
    TopologyRuleType = property(get_TopologyRuleType, None, None)

class IEnumTopologyErrorFeature(_esriGeoDatabase.IEnumTopologyErrorFeature):
    _IID = uuid.UUID('c18bec52-c376-469b-899f-4dea0ce3cb61')
    def Next(self):
        '''Method IEnumTopologyErrorFeature.Next

           OUTPUT
            error               : ITopologyErrorFeature**'''
        return super(IEnumTopologyErrorFeature, self).Next()
    def __iter__(self):
        try:
            val = super(IEnumTopologyErrorFeature, self).Next()
            while val:
                yield val
                val = super(IEnumTopologyErrorFeature, self).Next()
        except:
            pass

class IErrorFeatureContainer(_esriGeoDatabase.IErrorFeatureContainer):
    _IID = uuid.UUID('27c444dc-25ee-41ff-a2bd-c69b6343a6c3')
    def get_ErrorFeature(self, SpatialReference, errorType, GeometryType, OriginClassID, OriginOID, DestinationClassID, DestinationOID):
        '''Method IErrorFeatureContainer.get_ErrorFeature

           INPUTS
            SpatialReference    : ISpatialReference*
            errorType           : esriTopologyRuleType
            GeometryType        : esriGeometryType
            OriginClassID       : long
            OriginOID           : long
            DestinationClassID  : long
            DestinationOID      : long

           OUTPUT
            ErrorFeature        : ITopologyErrorFeature**'''
        return super(IErrorFeatureContainer, self).get_ErrorFeature(SpatialReference, errorType, GeometryType, OriginClassID, OriginOID, DestinationClassID, DestinationOID)
    def get_ErrorFeatures(self, SpatialReference, Rule, Extent, Errors, Exceptions):
        '''Method IErrorFeatureContainer.get_ErrorFeatures

           INPUTS
            SpatialReference    : ISpatialReference*
            Rule                : ITopologyRule*
            Extent              : IEnvelope*
            Errors              : VARIANT_BOOL
            Exceptions          : VARIANT_BOOL

           OUTPUT
            ErrorFeatures       : IEnumTopologyErrorFeature**'''
        return super(IErrorFeatureContainer, self).get_ErrorFeatures(SpatialReference, Rule, Extent, Errors, Exceptions)
    def get_ErrorFeaturesByGeometryType(self, SpatialReference, GeometryType, Exceptions):
        '''Method IErrorFeatureContainer.get_ErrorFeaturesByGeometryType

           INPUTS
            SpatialReference    : ISpatialReference*
            GeometryType        : esriGeometryType
            Exceptions          : VARIANT_BOOL

           OUTPUT
            ErrorFeatures       : IEnumTopologyErrorFeature**'''
        return super(IErrorFeatureContainer, self).get_ErrorFeaturesByGeometryType(SpatialReference, GeometryType, Exceptions)
    def get_ErrorFeaturesByRuleType(self, SpatialReference, TopologyRuleType, Extent, Errors, Exceptions):
        '''Method IErrorFeatureContainer.get_ErrorFeaturesByRuleType

           INPUTS
            SpatialReference    : ISpatialReference*
            TopologyRuleType    : esriTopologyRuleType
            Extent              : IEnvelope*
            Errors              : VARIANT_BOOL
            Exceptions          : VARIANT_BOOL

           OUTPUT
            ErrorFeatures       : IEnumTopologyErrorFeature**'''
        return super(IErrorFeatureContainer, self).get_ErrorFeaturesByRuleType(SpatialReference, TopologyRuleType, Extent, Errors, Exceptions)

class ITopologyRuleContainer(_esriGeoDatabase.ITopologyRuleContainer):
    _IID = uuid.UUID('b65d9fee-6d67-47fd-ac13-06bde90a1b34')
    def get_Rule(self, RuleID):
        '''Method ITopologyRuleContainer.get_Rule

           INPUT
            RuleID              : long

           OUTPUT
            Rule                : IRule**'''
        return super(ITopologyRuleContainer, self).get_Rule(RuleID)
    def get_Rules(self):
        '''Method ITopologyRuleContainer.get_Rules

           OUTPUT
            Rules               : IEnumRule**'''
        return super(ITopologyRuleContainer, self).get_Rules()
    def get_RuleByGUID(self, GUID):
        '''Method ITopologyRuleContainer.get_RuleByGUID

           INPUT
            GUID                : BSTR

           OUTPUT
            Rule                : IRule**'''
        return super(ITopologyRuleContainer, self).get_RuleByGUID(GUID)
    def get_RulesByClass(self, ClassID):
        '''Method ITopologyRuleContainer.get_RulesByClass

           INPUT
            ClassID             : long

           OUTPUT
            Rules               : IEnumRule**'''
        return super(ITopologyRuleContainer, self).get_RulesByClass(ClassID)
    def get_RulesByClassAndSubtype(self, ClassID, SubType):
        '''Method ITopologyRuleContainer.get_RulesByClassAndSubtype

           INPUTS
            ClassID             : long
            SubType             : long

           OUTPUT
            Rules               : IEnumRule**'''
        return super(ITopologyRuleContainer, self).get_RulesByClassAndSubtype(ClassID, SubType)
    def get_CanAddRule(self, Rule):
        '''Method ITopologyRuleContainer.get_CanAddRule

           INPUT
            Rule                : ITopologyRule*

           OUTPUT
            CanAddRule          : VARIANT_BOOL*'''
        return super(ITopologyRuleContainer, self).get_CanAddRule(Rule)
    def AddRule(self, Rule):
        '''Method ITopologyRuleContainer.AddRule

           INPUT
            Rule                : ITopologyRule*'''
        return super(ITopologyRuleContainer, self).AddRule(Rule)
    def DeleteRule(self, Rule):
        '''Method ITopologyRuleContainer.DeleteRule

           INPUT
            Rule                : ITopologyRule*'''
        return super(ITopologyRuleContainer, self).DeleteRule(Rule)
    def PromoteToRuleException(self, errorException):
        '''Method ITopologyRuleContainer.PromoteToRuleException

           INPUT
            errorException      : ITopologyErrorFeature*'''
        return super(ITopologyRuleContainer, self).PromoteToRuleException(errorException)
    def DemoteFromRuleException(self, errorException):
        '''Method ITopologyRuleContainer.DemoteFromRuleException

           INPUT
            errorException      : ITopologyErrorFeature*'''
        return super(ITopologyRuleContainer, self).DemoteFromRuleException(errorException)
    Rules = property(get_Rules, None, None)
    CanAddRule = IndexProperty(get_CanAddRule, None)
    Rule = IndexProperty(get_Rule, None)
    RuleByGUID = IndexProperty(get_RuleByGUID, None)
    RulesByClass = IndexProperty(get_RulesByClass, None)

class ITopologyClassEvents(_esriGeoDatabase.ITopologyClassEvents):
    _IID = uuid.UUID('ab85a26e-2ceb-41d0-9ee6-7030a8da9174')
    def OnValidate(self, validatedArea):
        '''Method ITopologyClassEvents.OnValidate

           INPUT
            validatedArea       : IGeometry*'''
        return super(ITopologyClassEvents, self).OnValidate(validatedArea)

class ICancelOperation(_esriGeoDatabase.ICancelOperation):
    _IID = uuid.UUID('e9c5f595-6b3a-4f00-b201-05ff64f99bd3')
    def get_IsCancelled(self):
        '''Method ICancelOperation.get_IsCancelled

           OUTPUT
            IsCancelled         : VARIANT_BOOL*'''
        return super(ICancelOperation, self).get_IsCancelled()
    IsCancelled = property(get_IsCancelled, None, None)

class IClassEx(_esriGeoDatabase.IClassEx):
    _IID = uuid.UUID('310e1637-77d5-4847-9361-f98eef1e5bac')
    def get_HasGlobalID(self):
        '''Method IClassEx.get_HasGlobalID

           OUTPUT
            HasGlobalID         : VARIANT_BOOL*'''
        return super(IClassEx, self).get_HasGlobalID()
    def get_GlobalIDFieldName(self):
        '''Method IClassEx.get_GlobalIDFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IClassEx, self).get_GlobalIDFieldName()
    GlobalIDFieldName = property(get_GlobalIDFieldName, None, None)
    HasGlobalID = property(get_HasGlobalID, None, None)

class IAttachment(_esriGeoDatabase.IAttachment):
    _IID = uuid.UUID('475e3d30-5478-46c2-9547-09aa7076dce6')

    def __init__(self, *args, **kw):
        super(IAttachment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AttachmentID(self):
        '''Method IAttachment.get_AttachmentID

           OUTPUT
            attID               : long*'''
        return super(IAttachment, self).get_AttachmentID()
    def get_GlobalID(self):
        '''Method IAttachment.get_GlobalID

           OUTPUT
            GlobalID            : BSTR*'''
        return super(IAttachment, self).get_GlobalID()
    def get_ParentID(self):
        '''Method IAttachment.get_ParentID

           OUTPUT
            OID                 : long*'''
        return super(IAttachment, self).get_ParentID()
    def put_Name(self, Name):
        '''Method IAttachment.put_Name

           INPUT
            Name                : BSTR'''
        return super(IAttachment, self).put_Name(Name)
    def get_Name(self):
        '''Method IAttachment.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IAttachment, self).get_Name()
    def put_ContentType(self, ContentType):
        '''Method IAttachment.put_ContentType

           INPUT
            ContentType         : BSTR'''
        return super(IAttachment, self).put_ContentType(ContentType)
    def get_ContentType(self):
        '''Method IAttachment.get_ContentType

           OUTPUT
            ContentType         : BSTR*'''
        return super(IAttachment, self).get_ContentType()
    def get_Size(self):
        '''Method IAttachment.get_Size

           OUTPUT
            Size                : long*'''
        return super(IAttachment, self).get_Size()
    def putref_Data(self, Data):
        '''Method IAttachment.putref_Data

           INPUT
            Data                : IMemoryBlobStream*'''
        return super(IAttachment, self).putref_Data(Data)
    def get_Data(self):
        '''Method IAttachment.get_Data

           OUTPUT
            Data                : IMemoryBlobStream**'''
        return super(IAttachment, self).get_Data()
    AttachmentID = property(get_AttachmentID, None, None)
    ContentType = property(get_ContentType, put_ContentType, None)
    Data = property(get_Data, putref_Data, None)
    GlobalID = property(get_GlobalID, None, None)
    Name = property(get_Name, put_Name, None)
    ParentID = property(get_ParentID, None, None)
    Size = property(get_Size, None, None)

class IAttachment2(_esriGeoDatabase.IAttachment2):
    _IID = uuid.UUID('475e3d30-5478-46c2-9547-09aa7076d787')

    def __init__(self, *args, **kw):
        super(IAttachment2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ParentGlobalID(self):
        '''Method IAttachment2.get_ParentGlobalID

           OUTPUT
            ParentGlobalID      : BSTR*'''
        return super(IAttachment2, self).get_ParentGlobalID()
    def get_AttachmentID(self):
        '''Method IAttachment.get_AttachmentID (from IAttachment)

           OUTPUT
            attID               : long*'''
        return super(IAttachment2, self).get_AttachmentID()
    def get_GlobalID(self):
        '''Method IAttachment.get_GlobalID (from IAttachment)

           OUTPUT
            GlobalID            : BSTR*'''
        return super(IAttachment2, self).get_GlobalID()
    def get_ParentID(self):
        '''Method IAttachment.get_ParentID (from IAttachment)

           OUTPUT
            OID                 : long*'''
        return super(IAttachment2, self).get_ParentID()
    def put_Name(self, Name):
        '''Method IAttachment.put_Name (from IAttachment)

           INPUT
            Name                : BSTR'''
        return super(IAttachment2, self).put_Name(Name)
    def get_Name(self):
        '''Method IAttachment.get_Name (from IAttachment)

           OUTPUT
            Name                : BSTR*'''
        return super(IAttachment2, self).get_Name()
    def put_ContentType(self, ContentType):
        '''Method IAttachment.put_ContentType (from IAttachment)

           INPUT
            ContentType         : BSTR'''
        return super(IAttachment2, self).put_ContentType(ContentType)
    def get_ContentType(self):
        '''Method IAttachment.get_ContentType (from IAttachment)

           OUTPUT
            ContentType         : BSTR*'''
        return super(IAttachment2, self).get_ContentType()
    def get_Size(self):
        '''Method IAttachment.get_Size (from IAttachment)

           OUTPUT
            Size                : long*'''
        return super(IAttachment2, self).get_Size()
    def putref_Data(self, Data):
        '''Method IAttachment.putref_Data (from IAttachment)

           INPUT
            Data                : IMemoryBlobStream*'''
        return super(IAttachment2, self).putref_Data(Data)
    def get_Data(self):
        '''Method IAttachment.get_Data (from IAttachment)

           OUTPUT
            Data                : IMemoryBlobStream**'''
        return super(IAttachment2, self).get_Data()
    AttachmentID = property(get_AttachmentID, None, None)
    ContentType = property(get_ContentType, put_ContentType, None)
    Data = property(get_Data, putref_Data, None)
    GlobalID = property(get_GlobalID, None, None)
    Name = property(get_Name, put_Name, None)
    ParentGlobalID = property(get_ParentGlobalID, None, None)
    ParentID = property(get_ParentID, None, None)
    Size = property(get_Size, None, None)

class IEnumAttachment(_esriGeoDatabase.IEnumAttachment):
    _IID = uuid.UUID('034aa24a-5fc6-476f-8ca2-8374733d71c5')
    def Reset(self):
        '''Method IEnumAttachment.Reset'''
        return super(IEnumAttachment, self).Reset()
    def Next(self):
        '''Method IEnumAttachment.Next

           OUTPUT
            att                 : IAttachment**'''
        return super(IEnumAttachment, self).Next()
    def __iter__(self):
        try:
            super(IEnumAttachment, self).Reset()
            val = super(IEnumAttachment, self).Next()
            while val:
                yield val
                val = super(IEnumAttachment, self).Next()
        except:
            pass

class IAttachmentManager(_esriGeoDatabase.IAttachmentManager):
    _IID = uuid.UUID('52067577-796d-421a-8502-8f10d4ebd1fe')
    def AddAttachment(self, parentObjectID, Attachment):
        '''Method IAttachmentManager.AddAttachment

           INPUTS
            parentObjectID      : long
            Attachment          : IAttachment*

           OUTPUT
            AttachmentID        : long*'''
        return super(IAttachmentManager, self).AddAttachment(parentObjectID, Attachment)
    def GetAttachmentsByParentIDs(self, oids, infosOnly):
        '''Method IAttachmentManager.GetAttachmentsByParentIDs

           INPUTS
            oids                : ILongArray*
            infosOnly           : VARIANT_BOOL

           OUTPUT
            attachments         : IEnumAttachment**'''
        return super(IAttachmentManager, self).GetAttachmentsByParentIDs(oids, infosOnly)
    def GetAttachmentsByAttachmentIDs(self, attachmentIDs, infosOnly):
        '''Method IAttachmentManager.GetAttachmentsByAttachmentIDs

           INPUTS
            attachmentIDs       : ILongArray*
            infosOnly           : VARIANT_BOOL

           OUTPUT
            attachments         : IEnumAttachment**'''
        return super(IAttachmentManager, self).GetAttachmentsByAttachmentIDs(attachmentIDs, infosOnly)
    def UpdateAttachment(self, Attachment):
        '''Method IAttachmentManager.UpdateAttachment

           INPUT
            Attachment          : IAttachment*'''
        return super(IAttachmentManager, self).UpdateAttachment(Attachment)
    def DeleteAttachment(self, AttachmentID):
        '''Method IAttachmentManager.DeleteAttachment

           INPUT
            AttachmentID        : long'''
        return super(IAttachmentManager, self).DeleteAttachment(AttachmentID)
    def DeleteAttachmentsForParent(self, parentObjectID):
        '''Method IAttachmentManager.DeleteAttachmentsForParent

           INPUT
            parentObjectID      : long'''
        return super(IAttachmentManager, self).DeleteAttachmentsForParent(parentObjectID)
    def get_HasGlobalID(self):
        '''Method IAttachmentManager.get_HasGlobalID

           OUTPUT
            HasGlobalID         : VARIANT_BOOL*'''
        return super(IAttachmentManager, self).get_HasGlobalID()
    HasGlobalID = property(get_HasGlobalID, None, None)

class IAttachmentManager2(_esriGeoDatabase.IAttachmentManager2):
    _IID = uuid.UUID('52067577-796d-421a-8502-8f10d4ebd787')
    def AddAttachmentByGlobalID(self, ParentGlobalID, Attachment):
        '''Method IAttachmentManager2.AddAttachmentByGlobalID

           INPUTS
            ParentGlobalID      : BSTR
            Attachment          : IAttachment*

           OUTPUT
            AttachmentID        : long*'''
        return super(IAttachmentManager2, self).AddAttachmentByGlobalID(ParentGlobalID, Attachment)
    def GetAttachmentsByParentGlobalIDs(self, parentGlobalIDs, infosOnly):
        '''Method IAttachmentManager2.GetAttachmentsByParentGlobalIDs

           INPUTS
            parentGlobalIDs     : IStringArray*
            infosOnly           : VARIANT_BOOL

           OUTPUT
            attachments         : IEnumAttachment**'''
        return super(IAttachmentManager2, self).GetAttachmentsByParentGlobalIDs(parentGlobalIDs, infosOnly)
    def GetAttachmentsByAttachmentGlobalIDs(self, attachmentGlobalIDs, infosOnly):
        '''Method IAttachmentManager2.GetAttachmentsByAttachmentGlobalIDs

           INPUTS
            attachmentGlobalIDs : IStringArray*
            infosOnly           : VARIANT_BOOL

           OUTPUT
            attachments         : IEnumAttachment**'''
        return super(IAttachmentManager2, self).GetAttachmentsByAttachmentGlobalIDs(attachmentGlobalIDs, infosOnly)
    def DeleteAttachmentByGlobalID(self, GlobalID):
        '''Method IAttachmentManager2.DeleteAttachmentByGlobalID

           INPUT
            GlobalID            : BSTR'''
        return super(IAttachmentManager2, self).DeleteAttachmentByGlobalID(GlobalID)
    def DeleteAttachmentsForParentByGlobalID(self, ParentGlobalID):
        '''Method IAttachmentManager2.DeleteAttachmentsForParentByGlobalID

           INPUT
            ParentGlobalID      : BSTR'''
        return super(IAttachmentManager2, self).DeleteAttachmentsForParentByGlobalID(ParentGlobalID)
    def AddAttachment(self, parentObjectID, Attachment):
        '''Method IAttachmentManager.AddAttachment (from IAttachmentManager)

           INPUTS
            parentObjectID      : long
            Attachment          : IAttachment*

           OUTPUT
            AttachmentID        : long*'''
        return super(IAttachmentManager2, self).AddAttachment(parentObjectID, Attachment)
    def GetAttachmentsByParentIDs(self, oids, infosOnly):
        '''Method IAttachmentManager.GetAttachmentsByParentIDs (from IAttachmentManager)

           INPUTS
            oids                : ILongArray*
            infosOnly           : VARIANT_BOOL

           OUTPUT
            attachments         : IEnumAttachment**'''
        return super(IAttachmentManager2, self).GetAttachmentsByParentIDs(oids, infosOnly)
    def GetAttachmentsByAttachmentIDs(self, attachmentIDs, infosOnly):
        '''Method IAttachmentManager.GetAttachmentsByAttachmentIDs (from IAttachmentManager)

           INPUTS
            attachmentIDs       : ILongArray*
            infosOnly           : VARIANT_BOOL

           OUTPUT
            attachments         : IEnumAttachment**'''
        return super(IAttachmentManager2, self).GetAttachmentsByAttachmentIDs(attachmentIDs, infosOnly)
    def UpdateAttachment(self, Attachment):
        '''Method IAttachmentManager.UpdateAttachment (from IAttachmentManager)

           INPUT
            Attachment          : IAttachment*'''
        return super(IAttachmentManager2, self).UpdateAttachment(Attachment)
    def DeleteAttachment(self, AttachmentID):
        '''Method IAttachmentManager.DeleteAttachment (from IAttachmentManager)

           INPUT
            AttachmentID        : long'''
        return super(IAttachmentManager2, self).DeleteAttachment(AttachmentID)
    def DeleteAttachmentsForParent(self, parentObjectID):
        '''Method IAttachmentManager.DeleteAttachmentsForParent (from IAttachmentManager)

           INPUT
            parentObjectID      : long'''
        return super(IAttachmentManager2, self).DeleteAttachmentsForParent(parentObjectID)
    def get_HasGlobalID(self):
        '''Method IAttachmentManager.get_HasGlobalID (from IAttachmentManager)

           OUTPUT
            HasGlobalID         : VARIANT_BOOL*'''
        return super(IAttachmentManager2, self).get_HasGlobalID()
    HasGlobalID = property(get_HasGlobalID, None, None)

class IAttachmentInfoArray(_esriGeoDatabase.IAttachmentInfoArray):
    _IID = uuid.UUID('fc8174e2-f15e-4aba-8c47-78ca3ebcb0b4')
    def get_Count(self):
        '''Method IAttachmentInfoArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IAttachmentInfoArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IAttachmentInfoArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            Attachment          : IAttachmentInfo**'''
        return super(IAttachmentInfoArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IAttachmentInfoArray.Remove

           INPUT
            Index               : long'''
        return super(IAttachmentInfoArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IAttachmentInfoArray.RemoveAll'''
        return super(IAttachmentInfoArray, self).RemoveAll()
    def Add(self, rec):
        '''Method IAttachmentInfoArray.Add

           INPUT
            rec                 : IAttachmentInfo*'''
        return super(IAttachmentInfoArray, self).Add(rec)
    def Insert(self, Index, Attachment):
        '''Method IAttachmentInfoArray.Insert

           INPUTS
            Index               : long
            Attachment          : IAttachmentInfo*'''
        return super(IAttachmentInfoArray, self).Insert(Index, Attachment)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IAttachmentDataArray(_esriGeoDatabase.IAttachmentDataArray):
    _IID = uuid.UUID('7d02063d-57a2-4607-9d78-753526030802')
    def get_Count(self):
        '''Method IAttachmentDataArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IAttachmentDataArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IAttachmentDataArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            Attachment          : IAttachmentData**'''
        return super(IAttachmentDataArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IAttachmentDataArray.Remove

           INPUT
            Index               : long'''
        return super(IAttachmentDataArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IAttachmentDataArray.RemoveAll'''
        return super(IAttachmentDataArray, self).RemoveAll()
    def Add(self, Attachment):
        '''Method IAttachmentDataArray.Add

           INPUT
            Attachment          : IAttachmentData*'''
        return super(IAttachmentDataArray, self).Add(Attachment)
    def Insert(self, Index, Attachment):
        '''Method IAttachmentDataArray.Insert

           INPUTS
            Index               : long
            Attachment          : IAttachmentData*'''
        return super(IAttachmentDataArray, self).Insert(Index, Attachment)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ITableAttachments(_esriGeoDatabase.ITableAttachments):
    _IID = uuid.UUID('8fa8c2b0-5ea0-47c3-bbd2-509487498154')
    def get_AttachmentManager(self):
        '''Method ITableAttachments.get_AttachmentManager

           OUTPUT
            AttachmentManager   : IAttachmentManager**'''
        return super(ITableAttachments, self).get_AttachmentManager()
    def get_HasAttachments(self):
        '''Method ITableAttachments.get_HasAttachments

           OUTPUT
            hasAttachment       : VARIANT_BOOL*'''
        return super(ITableAttachments, self).get_HasAttachments()
    def AddAttachments(self):
        '''Method ITableAttachments.AddAttachments'''
        return super(ITableAttachments, self).AddAttachments()
    def DeleteAttachments(self):
        '''Method ITableAttachments.DeleteAttachments'''
        return super(ITableAttachments, self).DeleteAttachments()
    AttachmentManager = property(get_AttachmentManager, None, None)
    HasAttachments = property(get_HasAttachments, None, None)

class IFIDSetOperator(_esriGeoDatabase.IFIDSetOperator):
    _IID = uuid.UUID('ed3c0c61-0c11-49e1-9d71-f3d2caff085f')
    def Union(self, otherFIDSet):
        '''Method IFIDSetOperator.Union

           INPUT
            otherFIDSet         : IFIDSet*

           OUTPUT
            newFIDSet           : IFIDSet**'''
        return super(IFIDSetOperator, self).Union(otherFIDSet)
    def Intersect(self, otherFIDSet):
        '''Method IFIDSetOperator.Intersect

           INPUT
            otherFIDSet         : IFIDSet*

           OUTPUT
            newFIDSet           : IFIDSet**'''
        return super(IFIDSetOperator, self).Intersect(otherFIDSet)
    def Difference(self, otherFIDSet):
        '''Method IFIDSetOperator.Difference

           INPUT
            otherFIDSet         : IFIDSet*

           OUTPUT
            newFIDSet           : IFIDSet**'''
        return super(IFIDSetOperator, self).Difference(otherFIDSet)
    def SymmetricDifference(self, otherFIDSet):
        '''Method IFIDSetOperator.SymmetricDifference

           INPUT
            otherFIDSet         : IFIDSet*

           OUTPUT
            newFIDSet           : IFIDSet**'''
        return super(IFIDSetOperator, self).SymmetricDifference(otherFIDSet)

class IGeometryResultOptions(_esriGeoDatabase.IGeometryResultOptions):
    _IID = uuid.UUID('f0fcf561-c0df-4d3c-a562-51063550522d')

    def __init__(self, *args, **kw):
        super(IGeometryResultOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DensifyGeometries(self):
        '''Method IGeometryResultOptions.get_DensifyGeometries

           OUTPUT
            doDensify           : VARIANT_BOOL*'''
        return super(IGeometryResultOptions, self).get_DensifyGeometries()
    def put_DensifyGeometries(self, doDensify):
        '''Method IGeometryResultOptions.put_DensifyGeometries

           INPUT
            doDensify           : VARIANT_BOOL'''
        return super(IGeometryResultOptions, self).put_DensifyGeometries(doDensify)
    def get_MaximumSegmentLength(self):
        '''Method IGeometryResultOptions.get_MaximumSegmentLength

           OUTPUT
            maxSegLen           : double*'''
        return super(IGeometryResultOptions, self).get_MaximumSegmentLength()
    def put_MaximumSegmentLength(self, maxSegLen):
        '''Method IGeometryResultOptions.put_MaximumSegmentLength

           INPUT
            maxSegLen           : double'''
        return super(IGeometryResultOptions, self).put_MaximumSegmentLength(maxSegLen)
    def get_MaximumDeviation(self):
        '''Method IGeometryResultOptions.get_MaximumDeviation

           OUTPUT
            maxDev              : double*'''
        return super(IGeometryResultOptions, self).get_MaximumDeviation()
    def put_MaximumDeviation(self, maxDev):
        '''Method IGeometryResultOptions.put_MaximumDeviation

           INPUT
            maxDev              : double'''
        return super(IGeometryResultOptions, self).put_MaximumDeviation(maxDev)
    def get_GeneralizeGeometries(self):
        '''Method IGeometryResultOptions.get_GeneralizeGeometries

           OUTPUT
            doGeneralize        : VARIANT_BOOL*'''
        return super(IGeometryResultOptions, self).get_GeneralizeGeometries()
    def put_GeneralizeGeometries(self, doGeneralize):
        '''Method IGeometryResultOptions.put_GeneralizeGeometries

           INPUT
            doGeneralize        : VARIANT_BOOL'''
        return super(IGeometryResultOptions, self).put_GeneralizeGeometries(doGeneralize)
    def get_MaximumAllowableOffset(self):
        '''Method IGeometryResultOptions.get_MaximumAllowableOffset

           OUTPUT
            maxOffset           : double*'''
        return super(IGeometryResultOptions, self).get_MaximumAllowableOffset()
    def put_MaximumAllowableOffset(self, maxOffset):
        '''Method IGeometryResultOptions.put_MaximumAllowableOffset

           INPUT
            maxOffset           : double'''
        return super(IGeometryResultOptions, self).put_MaximumAllowableOffset(maxOffset)
    DensifyGeometries = property(get_DensifyGeometries, put_DensifyGeometries, None)
    GeneralizeGeometries = property(get_GeneralizeGeometries, put_GeneralizeGeometries, None)
    MaximumAllowableOffset = property(get_MaximumAllowableOffset, put_MaximumAllowableOffset, None)
    MaximumDeviation = property(get_MaximumDeviation, put_MaximumDeviation, None)
    MaximumSegmentLength = property(get_MaximumSegmentLength, put_MaximumSegmentLength, None)

class IGUIDGenerator(_esriGeoDatabase.IGUIDGenerator):
    _IID = uuid.UUID('2f489aa7-6566-4051-9554-8f831211c2d9')
    def CreateGUID(self):
        '''Method IGUIDGenerator.CreateGUID

           OUTPUT
            GUID                : BSTR*'''
        return super(IGUIDGenerator, self).CreateGUID()
    def ValidateGUID(self, GUID):
        '''Method IGUIDGenerator.ValidateGUID

           INPUT
            GUID                : BSTR

           OUTPUT
            isValidFormat       : VARIANT_BOOL*'''
        return super(IGUIDGenerator, self).ValidateGUID(GUID)

class ICompressionInfo(_esriGeoDatabase.ICompressionInfo):
    _IID = uuid.UUID('94d5bd59-176b-44ec-b595-0f423f9dc827')

    def __init__(self, *args, **kw):
        super(ICompressionInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_IsCompressed(self, IsCompressed):
        '''Method ICompressionInfo.put_IsCompressed

           INPUT
            IsCompressed        : VARIANT_BOOL'''
        return super(ICompressionInfo, self).put_IsCompressed(IsCompressed)
    def get_IsCompressed(self):
        '''Method ICompressionInfo.get_IsCompressed

           OUTPUT
            IsCompressed        : VARIANT_BOOL*'''
        return super(ICompressionInfo, self).get_IsCompressed()
    IsCompressed = property(get_IsCompressed, put_IsCompressed, None)

class IRecordArray(_esriGeoDatabase.IRecordArray):
    _IID = uuid.UUID('5cc3bc63-d6d3-4d98-a05b-30eea9d23139')
    def get_Count(self):
        '''Method IRecordArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IRecordArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IRecordArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            rec                 : IRecord**'''
        return super(IRecordArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IRecordArray.Remove

           INPUT
            Index               : long'''
        return super(IRecordArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IRecordArray.RemoveAll'''
        return super(IRecordArray, self).RemoveAll()
    def Add(self, rec):
        '''Method IRecordArray.Add

           INPUT
            rec                 : IRecord*'''
        return super(IRecordArray, self).Add(rec)
    def Insert(self, Index, rec):
        '''Method IRecordArray.Insert

           INPUTS
            Index               : long
            rec                 : IRecord*'''
        return super(IRecordArray, self).Insert(Index, rec)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IAttachmentInfo2(_esriGeoDatabase.IAttachmentInfo2):
    _IID = uuid.UUID('74060067-8955-44ee-8653-c18f388893c0')

    def __init__(self, *args, **kw):
        super(IAttachmentInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsAttachmentRelationshipGlobalIDBased(self):
        '''Method IAttachmentInfo2.get_IsAttachmentRelationshipGlobalIDBased

           OUTPUT
            globalIDBased       : VARIANT_BOOL*'''
        return super(IAttachmentInfo2, self).get_IsAttachmentRelationshipGlobalIDBased()
    def get_GlobalID(self):
        '''Method IAttachmentInfo2.get_GlobalID

           OUTPUT
            GlobalID            : BSTR*'''
        return super(IAttachmentInfo2, self).get_GlobalID()
    def put_GlobalID(self, GlobalID):
        '''Method IAttachmentInfo2.put_GlobalID

           INPUT
            GlobalID            : BSTR'''
        return super(IAttachmentInfo2, self).put_GlobalID(GlobalID)
    def get_ParentGlobalID(self):
        '''Method IAttachmentInfo2.get_ParentGlobalID

           OUTPUT
            GlobalID            : BSTR*'''
        return super(IAttachmentInfo2, self).get_ParentGlobalID()
    def put_ParentGlobalID(self, GlobalID):
        '''Method IAttachmentInfo2.put_ParentGlobalID

           INPUT
            GlobalID            : BSTR'''
        return super(IAttachmentInfo2, self).put_ParentGlobalID(GlobalID)
    def get_AttachmentID(self):
        '''Method IAttachmentInfo.get_AttachmentID (from IAttachmentInfo)

           OUTPUT
            attID               : long*'''
        return super(IAttachmentInfo2, self).get_AttachmentID()
    def get_Name(self):
        '''Method IAttachmentInfo.get_Name (from IAttachmentInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IAttachmentInfo2, self).get_Name()
    def put_Name(self, Name):
        '''Method IAttachmentInfo.put_Name (from IAttachmentInfo)

           INPUT
            Name                : BSTR'''
        return super(IAttachmentInfo2, self).put_Name(Name)
    def get_ParentID(self):
        '''Method IAttachmentInfo.get_ParentID (from IAttachmentInfo)

           OUTPUT
            OID                 : long*'''
        return super(IAttachmentInfo2, self).get_ParentID()
    def put_ParentID(self, OID):
        '''Method IAttachmentInfo.put_ParentID (from IAttachmentInfo)

           INPUT
            OID                 : long'''
        return super(IAttachmentInfo2, self).put_ParentID(OID)
    def get_ContentType(self):
        '''Method IAttachmentInfo.get_ContentType (from IAttachmentInfo)

           OUTPUT
            ContentType         : BSTR*'''
        return super(IAttachmentInfo2, self).get_ContentType()
    def put_ContentType(self, ContentType):
        '''Method IAttachmentInfo.put_ContentType (from IAttachmentInfo)

           INPUT
            ContentType         : BSTR'''
        return super(IAttachmentInfo2, self).put_ContentType(ContentType)
    def get_Size(self):
        '''Method IAttachmentInfo.get_Size (from IAttachmentInfo)

           OUTPUT
            Size                : long*'''
        return super(IAttachmentInfo2, self).get_Size()
    AttachmentID = property(get_AttachmentID, None, None)
    ContentType = property(get_ContentType, put_ContentType, None)
    GlobalID = property(get_GlobalID, put_GlobalID, None)
    IsAttachmentRelationshipGlobalIDBased = property(get_IsAttachmentRelationshipGlobalIDBased, None, None)
    Name = property(get_Name, put_Name, None)
    ParentGlobalID = property(get_ParentGlobalID, put_ParentGlobalID, None)
    ParentID = property(get_ParentID, put_ParentID, None)
    Size = property(get_Size, None, None)

class IThumbnailInfo(_esriGeoDatabase.IThumbnailInfo):
    _IID = uuid.UUID('553e8170-17f7-4f05-bfef-be392bc0a3c8')

    def __init__(self, *args, **kw):
        super(IThumbnailInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_URL(self):
        '''Method IThumbnailInfo.get_URL

           OUTPUT
            pUrl                : BSTR*'''
        return super(IThumbnailInfo, self).get_URL()
    def put_URL(self, pUrl):
        '''Method IThumbnailInfo.put_URL

           INPUT
            pUrl                : BSTR'''
        return super(IThumbnailInfo, self).put_URL(pUrl)
    def get_EmbeddedData(self):
        '''Method IThumbnailInfo.get_EmbeddedData

           OUTPUT
            ppData              : SAFEARRAY**'''
        return super(IThumbnailInfo, self).get_EmbeddedData()
    def put_EmbeddedData(self, ppData):
        '''Method IThumbnailInfo.put_EmbeddedData

           INPUT
            ppData              : SAFEARRAY**'''
        return super(IThumbnailInfo, self).put_EmbeddedData(ppData)
    EmbeddedData = property(get_EmbeddedData, put_EmbeddedData, None)
    URL = property(get_URL, put_URL, None)

class IDocumentationInfo(_esriGeoDatabase.IDocumentationInfo):
    _IID = uuid.UUID('0ffc5219-9896-48a1-a79f-b5697790c987')

    def __init__(self, *args, **kw):
        super(IDocumentationInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_URL(self):
        '''Method IDocumentationInfo.get_URL

           OUTPUT
            pUrl                : BSTR*'''
        return super(IDocumentationInfo, self).get_URL()
    def put_URL(self, pUrl):
        '''Method IDocumentationInfo.put_URL

           INPUT
            pUrl                : BSTR'''
        return super(IDocumentationInfo, self).put_URL(pUrl)
    def get_EmbeddedData(self):
        '''Method IDocumentationInfo.get_EmbeddedData

           OUTPUT
            ppData              : SAFEARRAY**'''
        return super(IDocumentationInfo, self).get_EmbeddedData()
    def put_EmbeddedData(self, ppData):
        '''Method IDocumentationInfo.put_EmbeddedData

           INPUT
            ppData              : SAFEARRAY**'''
        return super(IDocumentationInfo, self).put_EmbeddedData(ppData)
    EmbeddedData = property(get_EmbeddedData, put_EmbeddedData, None)
    URL = property(get_URL, put_URL, None)

class IItemInfo(_esriGeoDatabase.IItemInfo):
    _IID = uuid.UUID('506a8d89-c3af-4c4b-8f03-8f83b36b5329')

    def __init__(self, *args, **kw):
        super(IItemInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IItemInfo.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IItemInfo, self).get_Name()
    def put_Name(self, pName):
        '''Method IItemInfo.put_Name

           INPUT
            pName               : BSTR'''
        return super(IItemInfo, self).put_Name(pName)
    def get_GUID(self):
        '''Method IItemInfo.get_GUID

           OUTPUT
            pGuid               : BSTR*'''
        return super(IItemInfo, self).get_GUID()
    def put_GUID(self, pGuid):
        '''Method IItemInfo.put_GUID

           INPUT
            pGuid               : BSTR'''
        return super(IItemInfo, self).put_GUID(pGuid)
    def get_Type(self):
        '''Method IItemInfo.get_Type

           OUTPUT
            pType               : BSTR*'''
        return super(IItemInfo, self).get_Type()
    def put_Type(self, pType):
        '''Method IItemInfo.put_Type

           INPUT
            pType               : BSTR'''
        return super(IItemInfo, self).put_Type(pType)
    def get_TypeKeywords(self):
        '''Method IItemInfo.get_TypeKeywords

           OUTPUT
            ppKeywords          : IStringArray**'''
        return super(IItemInfo, self).get_TypeKeywords()
    def put_TypeKeywords(self, ppKeywords):
        '''Method IItemInfo.put_TypeKeywords

           INPUT
            ppKeywords          : IStringArray*'''
        return super(IItemInfo, self).put_TypeKeywords(ppKeywords)
    def get_TypeInfo(self):
        '''Method IItemInfo.get_TypeInfo

           OUTPUT
            ppInfo              : IStringArray**'''
        return super(IItemInfo, self).get_TypeInfo()
    def put_TypeInfo(self, ppInfo):
        '''Method IItemInfo.put_TypeInfo

           INPUT
            ppInfo              : IStringArray*'''
        return super(IItemInfo, self).put_TypeInfo(ppInfo)
    def get_CatalogPath(self):
        '''Method IItemInfo.get_CatalogPath

           OUTPUT
            pCatalogPath        : BSTR*'''
        return super(IItemInfo, self).get_CatalogPath()
    def put_CatalogPath(self, pCatalogPath):
        '''Method IItemInfo.put_CatalogPath

           INPUT
            pCatalogPath        : BSTR'''
        return super(IItemInfo, self).put_CatalogPath(pCatalogPath)
    def get_Title(self):
        '''Method IItemInfo.get_Title

           OUTPUT
            pTitle              : BSTR*'''
        return super(IItemInfo, self).get_Title()
    def put_Title(self, pTitle):
        '''Method IItemInfo.put_Title

           INPUT
            pTitle              : BSTR'''
        return super(IItemInfo, self).put_Title(pTitle)
    def get_Description(self):
        '''Method IItemInfo.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IItemInfo, self).get_Description()
    def put_Description(self, pDescription):
        '''Method IItemInfo.put_Description

           INPUT
            pDescription        : BSTR'''
        return super(IItemInfo, self).put_Description(pDescription)
    def get_Tags(self):
        '''Method IItemInfo.get_Tags

           OUTPUT
            ppTags              : IStringArray**'''
        return super(IItemInfo, self).get_Tags()
    def put_Tags(self, ppTags):
        '''Method IItemInfo.put_Tags

           INPUT
            ppTags              : IStringArray*'''
        return super(IItemInfo, self).put_Tags(ppTags)
    def get_Snippet(self):
        '''Method IItemInfo.get_Snippet

           OUTPUT
            pSnippet            : BSTR*'''
        return super(IItemInfo, self).get_Snippet()
    def put_Snippet(self, pSnippet):
        '''Method IItemInfo.put_Snippet

           INPUT
            pSnippet            : BSTR'''
        return super(IItemInfo, self).put_Snippet(pSnippet)
    def get_URL(self):
        '''Method IItemInfo.get_URL

           OUTPUT
            pUrl                : BSTR*'''
        return super(IItemInfo, self).get_URL()
    def put_URL(self, pUrl):
        '''Method IItemInfo.put_URL

           INPUT
            pUrl                : BSTR'''
        return super(IItemInfo, self).put_URL(pUrl)
    def get_LastModifiedTime(self):
        '''Method IItemInfo.get_LastModifiedTime

           OUTPUT
            pDateT              : VARIANT*'''
        return super(IItemInfo, self).get_LastModifiedTime()
    def put_LastModifiedTime(self, pDateT):
        '''Method IItemInfo.put_LastModifiedTime

           INPUT
            pDateT              : VARIANT'''
        return super(IItemInfo, self).put_LastModifiedTime(pDateT)
    def get_Extent(self):
        '''Method IItemInfo.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IItemInfo, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IItemInfo.putref_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IItemInfo, self).putref_Extent(ppExtent)
    def get_SpatialReference(self):
        '''Method IItemInfo.get_SpatialReference

           OUTPUT
            ppSpatialRef        : ISpatialReference**'''
        return super(IItemInfo, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialRef):
        '''Method IItemInfo.putref_SpatialReference

           INPUT
            ppSpatialRef        : ISpatialReference*'''
        return super(IItemInfo, self).putref_SpatialReference(ppSpatialRef)
    def get_ThumbnailInfo(self):
        '''Method IItemInfo.get_ThumbnailInfo

           OUTPUT
            ppThumbnailInfo     : IThumbnailInfo**'''
        return super(IItemInfo, self).get_ThumbnailInfo()
    def putref_ThumbnailInfo(self, ppThumbnailInfo):
        '''Method IItemInfo.putref_ThumbnailInfo

           INPUT
            ppThumbnailInfo     : IThumbnailInfo*'''
        return super(IItemInfo, self).putref_ThumbnailInfo(ppThumbnailInfo)
    def get_DocumentationInfo(self):
        '''Method IItemInfo.get_DocumentationInfo

           OUTPUT
            ppDocInfo           : IDocumentationInfo**'''
        return super(IItemInfo, self).get_DocumentationInfo()
    def putref_DocumentationInfo(self, ppDocInfo):
        '''Method IItemInfo.putref_DocumentationInfo

           INPUT
            ppDocInfo           : IDocumentationInfo*'''
        return super(IItemInfo, self).putref_DocumentationInfo(ppDocInfo)
    def get_AccessConstraints(self):
        '''Method IItemInfo.get_AccessConstraints

           OUTPUT
            pConstraints        : BSTR*'''
        return super(IItemInfo, self).get_AccessConstraints()
    def put_AccessConstraints(self, pConstraints):
        '''Method IItemInfo.put_AccessConstraints

           INPUT
            pConstraints        : BSTR'''
        return super(IItemInfo, self).put_AccessConstraints(pConstraints)
    def get_ItemProperties(self):
        '''Method IItemInfo.get_ItemProperties

           OUTPUT
            ppProps             : IPropertySet**'''
        return super(IItemInfo, self).get_ItemProperties()
    def put_ItemProperties(self, ppProps):
        '''Method IItemInfo.put_ItemProperties

           INPUT
            ppProps             : IPropertySet*'''
        return super(IItemInfo, self).put_ItemProperties(ppProps)
    AccessConstraints = property(get_AccessConstraints, put_AccessConstraints, None)
    CatalogPath = property(get_CatalogPath, put_CatalogPath, None)
    Description = property(get_Description, put_Description, None)
    DocumentationInfo = property(get_DocumentationInfo, putref_DocumentationInfo, None)
    Extent = property(get_Extent, putref_Extent, None)
    GUID = property(get_GUID, put_GUID, None)
    ItemProperties = property(get_ItemProperties, put_ItemProperties, None)
    LastModifiedTime = property(get_LastModifiedTime, put_LastModifiedTime, None)
    Name = property(get_Name, put_Name, None)
    Snippet = property(get_Snippet, put_Snippet, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Tags = property(get_Tags, put_Tags, None)
    ThumbnailInfo = property(get_ThumbnailInfo, putref_ThumbnailInfo, None)
    Title = property(get_Title, put_Title, None)
    Type = property(get_Type, put_Type, None)
    TypeInfo = property(get_TypeInfo, put_TypeInfo, None)
    TypeKeywords = property(get_TypeKeywords, put_TypeKeywords, None)
    URL = property(get_URL, put_URL, None)

class IItemInfo2(_esriGeoDatabase.IItemInfo2):
    _IID = uuid.UUID('9d3c440d-837e-4d7b-ab0d-60e8a4542000')

    def __init__(self, *args, **kw):
        super(IItemInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Credits(self):
        '''Method IItemInfo2.get_Credits

           OUTPUT
            pCredits            : BSTR*'''
        return super(IItemInfo2, self).get_Credits()
    def put_Credits(self, pCredits):
        '''Method IItemInfo2.put_Credits

           INPUT
            pCredits            : BSTR'''
        return super(IItemInfo2, self).put_Credits(pCredits)
    def get_MinScale(self):
        '''Method IItemInfo2.get_MinScale

           OUTPUT
            pScale              : double*'''
        return super(IItemInfo2, self).get_MinScale()
    def put_MinScale(self, pScale):
        '''Method IItemInfo2.put_MinScale

           INPUT
            pScale              : double'''
        return super(IItemInfo2, self).put_MinScale(pScale)
    def get_MaxScale(self):
        '''Method IItemInfo2.get_MaxScale

           OUTPUT
            pScale              : double*'''
        return super(IItemInfo2, self).get_MaxScale()
    def put_MaxScale(self, pScale):
        '''Method IItemInfo2.put_MaxScale

           INPUT
            pScale              : double'''
        return super(IItemInfo2, self).put_MaxScale(pScale)
    def get_SpatialReferenceName(self):
        '''Method IItemInfo2.get_SpatialReferenceName

           OUTPUT
            srName              : BSTR*'''
        return super(IItemInfo2, self).get_SpatialReferenceName()
    def get_Name(self):
        '''Method IItemInfo.get_Name (from IItemInfo)

           OUTPUT
            pName               : BSTR*'''
        return super(IItemInfo2, self).get_Name()
    def put_Name(self, pName):
        '''Method IItemInfo.put_Name (from IItemInfo)

           INPUT
            pName               : BSTR'''
        return super(IItemInfo2, self).put_Name(pName)
    def get_GUID(self):
        '''Method IItemInfo.get_GUID (from IItemInfo)

           OUTPUT
            pGuid               : BSTR*'''
        return super(IItemInfo2, self).get_GUID()
    def put_GUID(self, pGuid):
        '''Method IItemInfo.put_GUID (from IItemInfo)

           INPUT
            pGuid               : BSTR'''
        return super(IItemInfo2, self).put_GUID(pGuid)
    def get_Type(self):
        '''Method IItemInfo.get_Type (from IItemInfo)

           OUTPUT
            pType               : BSTR*'''
        return super(IItemInfo2, self).get_Type()
    def put_Type(self, pType):
        '''Method IItemInfo.put_Type (from IItemInfo)

           INPUT
            pType               : BSTR'''
        return super(IItemInfo2, self).put_Type(pType)
    def get_TypeKeywords(self):
        '''Method IItemInfo.get_TypeKeywords (from IItemInfo)

           OUTPUT
            ppKeywords          : IStringArray**'''
        return super(IItemInfo2, self).get_TypeKeywords()
    def put_TypeKeywords(self, ppKeywords):
        '''Method IItemInfo.put_TypeKeywords (from IItemInfo)

           INPUT
            ppKeywords          : IStringArray*'''
        return super(IItemInfo2, self).put_TypeKeywords(ppKeywords)
    def get_TypeInfo(self):
        '''Method IItemInfo.get_TypeInfo (from IItemInfo)

           OUTPUT
            ppInfo              : IStringArray**'''
        return super(IItemInfo2, self).get_TypeInfo()
    def put_TypeInfo(self, ppInfo):
        '''Method IItemInfo.put_TypeInfo (from IItemInfo)

           INPUT
            ppInfo              : IStringArray*'''
        return super(IItemInfo2, self).put_TypeInfo(ppInfo)
    def get_CatalogPath(self):
        '''Method IItemInfo.get_CatalogPath (from IItemInfo)

           OUTPUT
            pCatalogPath        : BSTR*'''
        return super(IItemInfo2, self).get_CatalogPath()
    def put_CatalogPath(self, pCatalogPath):
        '''Method IItemInfo.put_CatalogPath (from IItemInfo)

           INPUT
            pCatalogPath        : BSTR'''
        return super(IItemInfo2, self).put_CatalogPath(pCatalogPath)
    def get_Title(self):
        '''Method IItemInfo.get_Title (from IItemInfo)

           OUTPUT
            pTitle              : BSTR*'''
        return super(IItemInfo2, self).get_Title()
    def put_Title(self, pTitle):
        '''Method IItemInfo.put_Title (from IItemInfo)

           INPUT
            pTitle              : BSTR'''
        return super(IItemInfo2, self).put_Title(pTitle)
    def get_Description(self):
        '''Method IItemInfo.get_Description (from IItemInfo)

           OUTPUT
            pDescription        : BSTR*'''
        return super(IItemInfo2, self).get_Description()
    def put_Description(self, pDescription):
        '''Method IItemInfo.put_Description (from IItemInfo)

           INPUT
            pDescription        : BSTR'''
        return super(IItemInfo2, self).put_Description(pDescription)
    def get_Tags(self):
        '''Method IItemInfo.get_Tags (from IItemInfo)

           OUTPUT
            ppTags              : IStringArray**'''
        return super(IItemInfo2, self).get_Tags()
    def put_Tags(self, ppTags):
        '''Method IItemInfo.put_Tags (from IItemInfo)

           INPUT
            ppTags              : IStringArray*'''
        return super(IItemInfo2, self).put_Tags(ppTags)
    def get_Snippet(self):
        '''Method IItemInfo.get_Snippet (from IItemInfo)

           OUTPUT
            pSnippet            : BSTR*'''
        return super(IItemInfo2, self).get_Snippet()
    def put_Snippet(self, pSnippet):
        '''Method IItemInfo.put_Snippet (from IItemInfo)

           INPUT
            pSnippet            : BSTR'''
        return super(IItemInfo2, self).put_Snippet(pSnippet)
    def get_URL(self):
        '''Method IItemInfo.get_URL (from IItemInfo)

           OUTPUT
            pUrl                : BSTR*'''
        return super(IItemInfo2, self).get_URL()
    def put_URL(self, pUrl):
        '''Method IItemInfo.put_URL (from IItemInfo)

           INPUT
            pUrl                : BSTR'''
        return super(IItemInfo2, self).put_URL(pUrl)
    def get_LastModifiedTime(self):
        '''Method IItemInfo.get_LastModifiedTime (from IItemInfo)

           OUTPUT
            pDateT              : VARIANT*'''
        return super(IItemInfo2, self).get_LastModifiedTime()
    def put_LastModifiedTime(self, pDateT):
        '''Method IItemInfo.put_LastModifiedTime (from IItemInfo)

           INPUT
            pDateT              : VARIANT'''
        return super(IItemInfo2, self).put_LastModifiedTime(pDateT)
    def get_Extent(self):
        '''Method IItemInfo.get_Extent (from IItemInfo)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IItemInfo2, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IItemInfo.putref_Extent (from IItemInfo)

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IItemInfo2, self).putref_Extent(ppExtent)
    def get_SpatialReference(self):
        '''Method IItemInfo.get_SpatialReference (from IItemInfo)

           OUTPUT
            ppSpatialRef        : ISpatialReference**'''
        return super(IItemInfo2, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialRef):
        '''Method IItemInfo.putref_SpatialReference (from IItemInfo)

           INPUT
            ppSpatialRef        : ISpatialReference*'''
        return super(IItemInfo2, self).putref_SpatialReference(ppSpatialRef)
    def get_ThumbnailInfo(self):
        '''Method IItemInfo.get_ThumbnailInfo (from IItemInfo)

           OUTPUT
            ppThumbnailInfo     : IThumbnailInfo**'''
        return super(IItemInfo2, self).get_ThumbnailInfo()
    def putref_ThumbnailInfo(self, ppThumbnailInfo):
        '''Method IItemInfo.putref_ThumbnailInfo (from IItemInfo)

           INPUT
            ppThumbnailInfo     : IThumbnailInfo*'''
        return super(IItemInfo2, self).putref_ThumbnailInfo(ppThumbnailInfo)
    def get_DocumentationInfo(self):
        '''Method IItemInfo.get_DocumentationInfo (from IItemInfo)

           OUTPUT
            ppDocInfo           : IDocumentationInfo**'''
        return super(IItemInfo2, self).get_DocumentationInfo()
    def putref_DocumentationInfo(self, ppDocInfo):
        '''Method IItemInfo.putref_DocumentationInfo (from IItemInfo)

           INPUT
            ppDocInfo           : IDocumentationInfo*'''
        return super(IItemInfo2, self).putref_DocumentationInfo(ppDocInfo)
    def get_AccessConstraints(self):
        '''Method IItemInfo.get_AccessConstraints (from IItemInfo)

           OUTPUT
            pConstraints        : BSTR*'''
        return super(IItemInfo2, self).get_AccessConstraints()
    def put_AccessConstraints(self, pConstraints):
        '''Method IItemInfo.put_AccessConstraints (from IItemInfo)

           INPUT
            pConstraints        : BSTR'''
        return super(IItemInfo2, self).put_AccessConstraints(pConstraints)
    def get_ItemProperties(self):
        '''Method IItemInfo.get_ItemProperties (from IItemInfo)

           OUTPUT
            ppProps             : IPropertySet**'''
        return super(IItemInfo2, self).get_ItemProperties()
    def put_ItemProperties(self, ppProps):
        '''Method IItemInfo.put_ItemProperties (from IItemInfo)

           INPUT
            ppProps             : IPropertySet*'''
        return super(IItemInfo2, self).put_ItemProperties(ppProps)
    AccessConstraints = property(get_AccessConstraints, put_AccessConstraints, None)
    CatalogPath = property(get_CatalogPath, put_CatalogPath, None)
    Credits = property(get_Credits, put_Credits, None)
    Description = property(get_Description, put_Description, None)
    DocumentationInfo = property(get_DocumentationInfo, putref_DocumentationInfo, None)
    Extent = property(get_Extent, putref_Extent, None)
    GUID = property(get_GUID, put_GUID, None)
    ItemProperties = property(get_ItemProperties, put_ItemProperties, None)
    LastModifiedTime = property(get_LastModifiedTime, put_LastModifiedTime, None)
    MaxScale = property(get_MaxScale, put_MaxScale, None)
    MinScale = property(get_MinScale, put_MinScale, None)
    Name = property(get_Name, put_Name, None)
    Snippet = property(get_Snippet, put_Snippet, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    SpatialReferenceName = property(get_SpatialReferenceName, None, None)
    Tags = property(get_Tags, put_Tags, None)
    ThumbnailInfo = property(get_ThumbnailInfo, putref_ThumbnailInfo, None)
    Title = property(get_Title, put_Title, None)
    Type = property(get_Type, put_Type, None)
    TypeInfo = property(get_TypeInfo, put_TypeInfo, None)
    TypeKeywords = property(get_TypeKeywords, put_TypeKeywords, None)
    URL = property(get_URL, put_URL, None)

class IItemInfos(_esriGeoDatabase.IItemInfos):
    _IID = uuid.UUID('2d9150ae-dded-4d71-b672-26757cd882af')
    def get_Count(self):
        '''Method IItemInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IItemInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IItemInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            ii                  : IItemInfo**'''
        return super(IItemInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IItemInfos.Remove

           INPUT
            Index               : long'''
        return super(IItemInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IItemInfos.RemoveAll'''
        return super(IItemInfos, self).RemoveAll()
    def Add(self, ii):
        '''Method IItemInfos.Add

           INPUT
            ii                  : IItemInfo*'''
        return super(IItemInfos, self).Add(ii)
    def Insert(self, Index, ii):
        '''Method IItemInfos.Insert

           INPUTS
            Index               : long
            ii                  : IItemInfo*'''
        return super(IItemInfos, self).Insert(Index, ii)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IExternalDeserializerGdb(_esriGeoDatabase.IExternalDeserializerGdb):
    _IID = uuid.UUID('b3021be9-c152-4df8-aa79-3d834190da67')
    def ReadSpatialReference(self):
        '''Method IExternalDeserializerGdb.ReadSpatialReference

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IExternalDeserializerGdb, self).ReadSpatialReference()
    def ReadGeometry(self, geomType):
        '''Method IExternalDeserializerGdb.ReadGeometry

           INPUT
            geomType            : esriGeometryType

           OUTPUT
            ppGeom              : IGeometry**'''
        return super(IExternalDeserializerGdb, self).ReadGeometry(geomType)

class ISqlKeywordDictionary(_esriGeoDatabase.ISqlKeywordDictionary):
    _IID = uuid.UUID('764f1a3d-3e8b-11d2-aae0-00c04fa33c20')

    def __init__(self, *args, **kw):
        super(ISqlKeywordDictionary, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method ISqlKeywordDictionary.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(ISqlKeywordDictionary, self).put_Name(_arg1)
    def get_Count(self, reservedWordCount):
        '''Method ISqlKeywordDictionary.get_Count

           INPUT
            reservedWordCount   : long*'''
        return super(ISqlKeywordDictionary, self).get_Count(reservedWordCount)
    def Add(self, reservedWord):
        '''Method ISqlKeywordDictionary.Add

           INPUT
            reservedWord        : BSTR'''
        return super(ISqlKeywordDictionary, self).Add(reservedWord)
    def Remove(self, reservedWord):
        '''Method ISqlKeywordDictionary.Remove

           INPUT
            reservedWord        : BSTR'''
        return super(ISqlKeywordDictionary, self).Remove(reservedWord)
    def Reset(self):
        '''Method ISqlKeywordDictionary.Reset'''
        return super(ISqlKeywordDictionary, self).Reset()
    def Empty(self):
        '''Method ISqlKeywordDictionary.Empty'''
        return super(ISqlKeywordDictionary, self).Empty()
    def FindKeyword(self, keyword):
        '''Method ISqlKeywordDictionary.FindKeyword

           INPUT
            keyword             : BSTR

           OUTPUT
            pbFound             : VARIANT_BOOL*'''
        return super(ISqlKeywordDictionary, self).FindKeyword(keyword)
    Name = property(None, put_Name, None)

class ISqlInvalidCharacterDictionary(_esriGeoDatabase.ISqlInvalidCharacterDictionary):
    _IID = uuid.UUID('b9f1cfd7-2c2f-11d3-bbac-000000000000')

    def __init__(self, *args, **kw):
        super(ISqlInvalidCharacterDictionary, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_InvalidChars(self, InvalidChars):
        '''Method ISqlInvalidCharacterDictionary.put_InvalidChars

           INPUT
            InvalidChars        : BSTR'''
        return super(ISqlInvalidCharacterDictionary, self).put_InvalidChars(InvalidChars)
    def get_InvalidChars(self):
        '''Method ISqlInvalidCharacterDictionary.get_InvalidChars

           OUTPUT
            InvalidChars        : BSTR*'''
        return super(ISqlInvalidCharacterDictionary, self).get_InvalidChars()
    def put_InvalidStartingChars(self, InvalidChars):
        '''Method ISqlInvalidCharacterDictionary.put_InvalidStartingChars

           INPUT
            InvalidChars        : BSTR'''
        return super(ISqlInvalidCharacterDictionary, self).put_InvalidStartingChars(InvalidChars)
    def get_InvalidStartingChars(self):
        '''Method ISqlInvalidCharacterDictionary.get_InvalidStartingChars

           OUTPUT
            InvalidChars        : BSTR*'''
        return super(ISqlInvalidCharacterDictionary, self).get_InvalidStartingChars()
    InvalidChars = property(get_InvalidChars, put_InvalidChars, None)
    InvalidStartingChars = property(get_InvalidStartingChars, put_InvalidStartingChars, None)

class IFieldError(_esriGeoDatabase.IFieldError):
    _IID = uuid.UUID('e013b817-4ccc-11d2-aae7-00c04fa33c20')
    def get_FieldIndex(self):
        '''Method IFieldError.get_FieldIndex

           OUTPUT
            FieldIndex          : long*'''
        return super(IFieldError, self).get_FieldIndex()
    def get_FieldError(self):
        '''Method IFieldError.get_FieldError

           OUTPUT
            FieldError          : esriFieldNameErrorType*'''
        return super(IFieldError, self).get_FieldError()
    FieldError = property(get_FieldError, None, None)
    FieldIndex = property(get_FieldIndex, None, None)

class IEnumFieldError(_esriGeoDatabase.IEnumFieldError):
    _IID = uuid.UUID('c2c69253-4ccb-11d2-aae7-00c04fa33c20')
    def Next(self):
        '''Method IEnumFieldError.Next

           OUTPUT
            FieldError          : IFieldError**'''
        return super(IEnumFieldError, self).Next()
    def __iter__(self):
        try:
            super(IEnumFieldError, self).Reset()
            val = super(IEnumFieldError, self).Next()
            while val:
                yield val
                val = super(IEnumFieldError, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumFieldError.Reset'''
        return super(IEnumFieldError, self).Reset()

class IGeoDatabaseErrorRecords(_esriGeoDatabase.IGeoDatabaseErrorRecords):
    _IID = uuid.UUID('c5b058a3-c789-11d2-aaea-00c04fa37585')
    def get_ErrorCount(self):
        '''Method IGeoDatabaseErrorRecords.get_ErrorCount

           OUTPUT
            Count               : long*'''
        return super(IGeoDatabaseErrorRecords, self).get_ErrorCount()
    def get_ErrorDescription(self, Index):
        '''Method IGeoDatabaseErrorRecords.get_ErrorDescription

           INPUT
            Index               : long

           OUTPUT
            Description         : BSTR*'''
        return super(IGeoDatabaseErrorRecords, self).get_ErrorDescription(Index)
    ErrorCount = property(get_ErrorCount, None, None)
    ErrorDescription = IndexProperty(get_ErrorDescription, None)

class IFeatureProgress(_esriGeoDatabase.IFeatureProgress):
    _IID = uuid.UUID('29d3b6dd-3917-11d2-aadf-00c04fa33c20')

    def __init__(self, *args, **kw):
        super(IFeatureProgress, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FeatureClassName(self, _arg1):
        '''Method IFeatureProgress.put_FeatureClassName

           INPUT
            _arg1               : BSTR'''
        return super(IFeatureProgress, self).put_FeatureClassName(_arg1)
    def put_MinFeatures(self, _arg1):
        '''Method IFeatureProgress.put_MinFeatures

           INPUT
            _arg1               : long'''
        return super(IFeatureProgress, self).put_MinFeatures(_arg1)
    def put_MaxFeatures(self, _arg1):
        '''Method IFeatureProgress.put_MaxFeatures

           INPUT
            _arg1               : long'''
        return super(IFeatureProgress, self).put_MaxFeatures(_arg1)
    def put_Position(self, _arg1):
        '''Method IFeatureProgress.put_Position

           INPUT
            _arg1               : long'''
        return super(IFeatureProgress, self).put_Position(_arg1)
    def put_StepValue(self, _arg1):
        '''Method IFeatureProgress.put_StepValue

           INPUT
            _arg1               : long'''
        return super(IFeatureProgress, self).put_StepValue(_arg1)
    def Step(self):
        '''Method IFeatureProgress.Step'''
        return super(IFeatureProgress, self).Step()
    def get_IsCancelled(self):
        '''Method IFeatureProgress.get_IsCancelled

           OUTPUT
            pbIsCancelled       : VARIANT_BOOL*'''
        return super(IFeatureProgress, self).get_IsCancelled()
    FeatureClassName = property(None, put_FeatureClassName, None)
    IsCancelled = property(get_IsCancelled, None, None)
    MaxFeatures = property(None, put_MaxFeatures, None)
    MinFeatures = property(None, put_MinFeatures, None)
    Position = property(None, put_Position, None)
    StepValue = property(None, put_StepValue, None)

class IRecordNumberSet(_esriGeoDatabase.IRecordNumberSet):
    _IID = uuid.UUID('33572f5a-46c7-11d4-a124-00c04f6bdf0e')
    def SetBounds(self, startRecordNumber, maxRecordNumber):
        '''Method IRecordNumberSet.SetBounds

           INPUTS
            startRecordNumber   : long
            maxRecordNumber     : long'''
        return super(IRecordNumberSet, self).SetBounds(startRecordNumber, maxRecordNumber)
    def get_MinimumRecordNumber(self):
        '''Method IRecordNumberSet.get_MinimumRecordNumber

           OUTPUT
            startRecordNumber   : long*'''
        return super(IRecordNumberSet, self).get_MinimumRecordNumber()
    def get_MaximumRecordNumber(self):
        '''Method IRecordNumberSet.get_MaximumRecordNumber

           OUTPUT
            maxRecordNumber     : long*'''
        return super(IRecordNumberSet, self).get_MaximumRecordNumber()
    def Add(self, recordNumber):
        '''Method IRecordNumberSet.Add

           INPUT
            recordNumber        : long'''
        return super(IRecordNumberSet, self).Add(recordNumber)
    def Delete(self, recordNumber):
        '''Method IRecordNumberSet.Delete

           INPUT
            recordNumber        : long'''
        return super(IRecordNumberSet, self).Delete(recordNumber)
    def AddRange(self, minRecord, maxRecord):
        '''Method IRecordNumberSet.AddRange

           INPUTS
            minRecord           : long
            maxRecord           : long'''
        return super(IRecordNumberSet, self).AddRange(minRecord, maxRecord)
    def SetAll(self):
        '''Method IRecordNumberSet.SetAll'''
        return super(IRecordNumberSet, self).SetAll()
    def ClearAll(self):
        '''Method IRecordNumberSet.ClearAll'''
        return super(IRecordNumberSet, self).ClearAll()
    def And(self, otherRecordNumberSet):
        '''Method IRecordNumberSet.And

           INPUT
            otherRecordNumberSet: IRecordNumberSet*

           OUTPUT
            newRecordNumberSet  : IRecordNumberSet**'''
        return super(IRecordNumberSet, self).And(otherRecordNumberSet)
    def Or(self, otherRecordNumberSet):
        '''Method IRecordNumberSet.Or

           INPUT
            otherRecordNumberSet: IRecordNumberSet*

           OUTPUT
            newRecordNumberSet  : IRecordNumberSet**'''
        return super(IRecordNumberSet, self).Or(otherRecordNumberSet)
    def XOr(self, otherRecordNumberSet):
        '''Method IRecordNumberSet.XOr

           INPUT
            otherRecordNumberSet: IRecordNumberSet*

           OUTPUT
            newRecordNumberSet  : IRecordNumberSet**'''
        return super(IRecordNumberSet, self).XOr(otherRecordNumberSet)
    def Difference(self, otherRecordNumberSet):
        '''Method IRecordNumberSet.Difference

           INPUT
            otherRecordNumberSet: IRecordNumberSet*

           OUTPUT
            newRecordNumberSet  : IRecordNumberSet**'''
        return super(IRecordNumberSet, self).Difference(otherRecordNumberSet)
    def Negate(self):
        '''Method IRecordNumberSet.Negate

           OUTPUT
            newRecordNumberSet  : IRecordNumberSet**'''
        return super(IRecordNumberSet, self).Negate()
    def get_IDs(self):
        '''Method IRecordNumberSet.get_IDs

           OUTPUT
            pEnumIDs            : IEnumIDs**'''
        return super(IRecordNumberSet, self).get_IDs()
    IDs = property(get_IDs, None, None)
    MaximumRecordNumber = property(get_MaximumRecordNumber, None, None)
    MinimumRecordNumber = property(get_MinimumRecordNumber, None, None)

class IReplicaDescriptionExtension(_esriGeoDatabase.IReplicaDescriptionExtension):
    _IID = uuid.UUID('8dcd2ee1-4297-4fd3-916d-fd7de9eafb2a')
    def get_Name(self):
        '''Method IReplicaDescriptionExtension.get_Name

           OUTPUT
            rdeName             : BSTR*'''
        return super(IReplicaDescriptionExtension, self).get_Name()
    def get_GUID(self):
        '''Method IReplicaDescriptionExtension.get_GUID

           OUTPUT
            rdeGUID             : IUID**'''
        return super(IReplicaDescriptionExtension, self).get_GUID()
    GUID = property(get_GUID, None, None)
    Name = property(get_Name, None, None)

class IReplicaLog(_esriGeoDatabase.IReplicaLog):
    _IID = uuid.UUID('a4a65136-5756-4f8d-ab9f-88aca53f2f6f')
    def get_LogID(self):
        '''Method IReplicaLog.get_LogID

           OUTPUT
            LogID               : long*'''
        return super(IReplicaLog, self).get_LogID()
    def get_ReplicaID(self):
        '''Method IReplicaLog.get_ReplicaID

           OUTPUT
            ReplicaID           : long*'''
        return super(IReplicaLog, self).get_ReplicaID()
    def get_SynchronizeOperation(self):
        '''Method IReplicaLog.get_SynchronizeOperation

           OUTPUT
            syncOp              : esriSynchronizationOperations*'''
        return super(IReplicaLog, self).get_SynchronizeOperation()
    def get_ErrorCode(self):
        '''Method IReplicaLog.get_ErrorCode

           OUTPUT
            ErrorCode           : HRESULT*'''
        return super(IReplicaLog, self).get_ErrorCode()
    def get_LogDate(self):
        '''Method IReplicaLog.get_LogDate

           OUTPUT
            LogDate             : VARIANT*'''
        return super(IReplicaLog, self).get_LogDate()
    def get_SourceStartGen(self):
        '''Method IReplicaLog.get_SourceStartGen

           OUTPUT
            startGen            : long*'''
        return super(IReplicaLog, self).get_SourceStartGen()
    def get_SourceEndGen(self):
        '''Method IReplicaLog.get_SourceEndGen

           OUTPUT
            endGen              : long*'''
        return super(IReplicaLog, self).get_SourceEndGen()
    def get_TargetGen(self):
        '''Method IReplicaLog.get_TargetGen

           OUTPUT
            TargetGen           : long*'''
        return super(IReplicaLog, self).get_TargetGen()
    ErrorCode = property(get_ErrorCode, None, None)
    LogDate = property(get_LogDate, None, None)
    LogID = property(get_LogID, None, None)
    ReplicaID = property(get_ReplicaID, None, None)
    SourceEndGen = property(get_SourceEndGen, None, None)
    SourceStartGen = property(get_SourceStartGen, None, None)
    SynchronizeOperation = property(get_SynchronizeOperation, None, None)
    TargetGen = property(get_TargetGen, None, None)

class IEnumReplicaLog(_esriGeoDatabase.IEnumReplicaLog):
    _IID = uuid.UUID('b8135e54-22e8-4344-b7b6-1eefedbaf83d')

    def __init__(self, *args, **kw):
        super(IEnumReplicaLog, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Next(self):
        '''Method IEnumReplicaLog.Next

           OUTPUT
            replicaLog          : IReplicaLog**'''
        return super(IEnumReplicaLog, self).Next()
    def __iter__(self):
        try:
            super(IEnumReplicaLog, self).Reset()
            val = super(IEnumReplicaLog, self).Next()
            while val:
                yield val
                val = super(IEnumReplicaLog, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumReplicaLog.Reset'''
        return super(IEnumReplicaLog, self).Reset()
    def put_QueryAfter(self, _arg1):
        '''Method IEnumReplicaLog.put_QueryAfter

           INPUT
            _arg1               : VARIANT'''
        return super(IEnumReplicaLog, self).put_QueryAfter(_arg1)
    QueryAfter = property(None, put_QueryAfter, None)

class IReplicaDatasetEdit(_esriGeoDatabase.IReplicaDatasetEdit):
    _IID = uuid.UUID('79db3598-6e18-4921-b4f7-2cc03ad52c47')

    def __init__(self, *args, **kw):
        super(IReplicaDatasetEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IReplicaDatasetEdit.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaDatasetEdit, self).put_Name(_arg1)
    def put_Type(self, _arg1):
        '''Method IReplicaDatasetEdit.put_Type

           INPUT
            _arg1               : esriDatasetType'''
        return super(IReplicaDatasetEdit, self).put_Type(_arg1)
    def put_DatasetID(self, _arg1):
        '''Method IReplicaDatasetEdit.put_DatasetID

           INPUT
            _arg1               : long'''
        return super(IReplicaDatasetEdit, self).put_DatasetID(_arg1)
    def put_ParentOwner(self, _arg1):
        '''Method IReplicaDatasetEdit.put_ParentOwner

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaDatasetEdit, self).put_ParentOwner(_arg1)
    def put_ParentDatabase(self, _arg1):
        '''Method IReplicaDatasetEdit.put_ParentDatabase

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaDatasetEdit, self).put_ParentDatabase(_arg1)
    def put_ReplicaID(self, _arg1):
        '''Method IReplicaDatasetEdit.put_ReplicaID

           INPUT
            _arg1               : long'''
        return super(IReplicaDatasetEdit, self).put_ReplicaID(_arg1)
    DatasetID = property(None, put_DatasetID, None)
    Name = property(None, put_Name, None)
    ParentDatabase = property(None, put_ParentDatabase, None)
    ParentOwner = property(None, put_ParentOwner, None)
    ReplicaID = property(None, put_ReplicaID, None)
    Type = property(None, put_Type, None)

class IReplicaDataset2(_esriGeoDatabase.IReplicaDataset2):
    _IID = uuid.UUID('829135b2-0bd4-4422-971c-19e27b8741ab')

    def __init__(self, *args, **kw):
        super(IReplicaDataset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TargetName(self):
        '''Method IReplicaDataset2.get_TargetName

           OUTPUT
            TargetName          : BSTR*'''
        return super(IReplicaDataset2, self).get_TargetName()
    def put_TargetName(self, TargetName):
        '''Method IReplicaDataset2.put_TargetName

           INPUT
            TargetName          : BSTR'''
        return super(IReplicaDataset2, self).put_TargetName(TargetName)
    def get_Name(self):
        '''Method IReplicaDataset.get_Name (from IReplicaDataset)

           OUTPUT
            rName               : BSTR*'''
        return super(IReplicaDataset2, self).get_Name()
    def get_Type(self):
        '''Method IReplicaDataset.get_Type (from IReplicaDataset)

           OUTPUT
            DatasetType         : esriDatasetType*'''
        return super(IReplicaDataset2, self).get_Type()
    def get_DatasetID(self):
        '''Method IReplicaDataset.get_DatasetID (from IReplicaDataset)

           OUTPUT
            DatasetID           : long*'''
        return super(IReplicaDataset2, self).get_DatasetID()
    def get_ParentOwner(self):
        '''Method IReplicaDataset.get_ParentOwner (from IReplicaDataset)

           OUTPUT
            dsParentOwner       : BSTR*'''
        return super(IReplicaDataset2, self).get_ParentOwner()
    def get_ParentDatabase(self):
        '''Method IReplicaDataset.get_ParentDatabase (from IReplicaDataset)

           OUTPUT
            dsParentDatabase    : BSTR*'''
        return super(IReplicaDataset2, self).get_ParentDatabase()
    def get_ReplicaID(self):
        '''Method IReplicaDataset.get_ReplicaID (from IReplicaDataset)

           OUTPUT
            rID                 : long*'''
        return super(IReplicaDataset2, self).get_ReplicaID()
    DatasetID = property(get_DatasetID, None, None)
    Name = property(get_Name, None, None)
    ParentDatabase = property(get_ParentDatabase, None, None)
    ParentOwner = property(get_ParentOwner, None, None)
    ReplicaID = property(get_ReplicaID, None, None)
    TargetName = property(get_TargetName, put_TargetName, None)
    Type = property(get_Type, None, None)

class IXMLReplicaDescription(_esriGeoDatabase.IXMLReplicaDescription):
    _IID = uuid.UUID('d14bb518-5768-4b2e-995d-69190ef369ed')
    def Init2(self, enumNames, OutputXMLFile, BinaryGeometry, Compressed, deType):
        '''Method IXMLReplicaDescription.Init2

           INPUTS
            enumNames           : IEnumName*
            OutputXMLFile       : BSTR
            BinaryGeometry      : VARIANT_BOOL
            Compressed          : VARIANT_BOOL
            deType              : esriDataExtractionType'''
        return super(IXMLReplicaDescription, self).Init2(enumNames, OutputXMLFile, BinaryGeometry, Compressed, deType)
    def get_OutputXMLFile(self):
        '''Method IXMLReplicaDescription.get_OutputXMLFile

           OUTPUT
            OutputXMLFile       : BSTR*'''
        return super(IXMLReplicaDescription, self).get_OutputXMLFile()
    def get_BinaryGeometry(self):
        '''Method IXMLReplicaDescription.get_BinaryGeometry

           OUTPUT
            BinaryGeometry      : VARIANT_BOOL*'''
        return super(IXMLReplicaDescription, self).get_BinaryGeometry()
    def get_Compressed(self):
        '''Method IXMLReplicaDescription.get_Compressed

           OUTPUT
            Compressed          : VARIANT_BOOL*'''
        return super(IXMLReplicaDescription, self).get_Compressed()
    BinaryGeometry = property(get_BinaryGeometry, None, None)
    Compressed = property(get_Compressed, None, None)
    OutputXMLFile = property(get_OutputXMLFile, None, None)

class IReplicaDescriptionExtensionManager(_esriGeoDatabase.IReplicaDescriptionExtensionManager):
    _IID = uuid.UUID('3f980b98-eb3d-4a29-82ae-a2475701048d')
    def FindExtension(self, pGuid):
        '''Method IReplicaDescriptionExtensionManager.FindExtension

           INPUT
            pGuid               : IUID*

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescriptionExtensionManager, self).FindExtension(pGuid)
    def get_ExtensionCount(self):
        '''Method IReplicaDescriptionExtensionManager.get_ExtensionCount

           OUTPUT
            Count               : long*'''
        return super(IReplicaDescriptionExtensionManager, self).get_ExtensionCount()
    def get_Extension(self, Index):
        '''Method IReplicaDescriptionExtensionManager.get_Extension

           INPUT
            Index               : long

           OUTPUT
            rdExtension         : IReplicaDescriptionExtension**'''
        return super(IReplicaDescriptionExtensionManager, self).get_Extension(Index)
    def RegisterExtension(self, rdExtension):
        '''Method IReplicaDescriptionExtensionManager.RegisterExtension

           INPUT
            rdExtension         : IReplicaDescriptionExtension*'''
        return super(IReplicaDescriptionExtensionManager, self).RegisterExtension(rdExtension)
    def UnRegisterExtension(self, pGuid):
        '''Method IReplicaDescriptionExtensionManager.UnRegisterExtension

           INPUT
            pGuid               : IUID*'''
        return super(IReplicaDescriptionExtensionManager, self).UnRegisterExtension(pGuid)
    ExtensionCount = property(get_ExtensionCount, None, None)
    Extension = IndexProperty(get_Extension, None)

class IGPReplicaOptions(_esriGeoDatabase.IGPReplicaOptions):
    _IID = uuid.UUID('c75f38cc-f589-42cd-9a85-b0be9b7fcd2b')

    def __init__(self, *args, **kw):
        super(IGPReplicaOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_IsChildFirstSender(self, childIsFirstSender):
        '''Method IGPReplicaOptions.put_IsChildFirstSender

           INPUT
            childIsFirstSender  : VARIANT_BOOL'''
        return super(IGPReplicaOptions, self).put_IsChildFirstSender(childIsFirstSender)
    def get_IsChildFirstSender(self):
        '''Method IGPReplicaOptions.get_IsChildFirstSender

           OUTPUT
            childIsFirstSender  : VARIANT_BOOL*'''
        return super(IGPReplicaOptions, self).get_IsChildFirstSender()
    def put_AccessType(self, AccessType):
        '''Method IGPReplicaOptions.put_AccessType

           INPUT
            AccessType          : esriReplicaAccessType'''
        return super(IGPReplicaOptions, self).put_AccessType(AccessType)
    def get_AccessType(self):
        '''Method IGPReplicaOptions.get_AccessType

           OUTPUT
            AccessType          : esriReplicaAccessType*'''
        return super(IGPReplicaOptions, self).get_AccessType()
    def put_ChildReconcilePolicy(self, childPolicy):
        '''Method IGPReplicaOptions.put_ChildReconcilePolicy

           INPUT
            childPolicy         : esriReplicaReconcilePolicyType'''
        return super(IGPReplicaOptions, self).put_ChildReconcilePolicy(childPolicy)
    def get_ChildReconcilePolicy(self):
        '''Method IGPReplicaOptions.get_ChildReconcilePolicy

           OUTPUT
            childPolicy         : esriReplicaReconcilePolicyType*'''
        return super(IGPReplicaOptions, self).get_ChildReconcilePolicy()
    def put_ParentReconcilePolicy(self, parentPolicy):
        '''Method IGPReplicaOptions.put_ParentReconcilePolicy

           INPUT
            parentPolicy        : esriReplicaReconcilePolicyType'''
        return super(IGPReplicaOptions, self).put_ParentReconcilePolicy(parentPolicy)
    def get_ParentReconcilePolicy(self):
        '''Method IGPReplicaOptions.get_ParentReconcilePolicy

           OUTPUT
            parentPolicy        : esriReplicaReconcilePolicyType*'''
        return super(IGPReplicaOptions, self).get_ParentReconcilePolicy()
    def put_RegisterReplicaOnly(self, registerReplicaData):
        '''Method IGPReplicaOptions.put_RegisterReplicaOnly

           INPUT
            registerReplicaData : VARIANT_BOOL'''
        return super(IGPReplicaOptions, self).put_RegisterReplicaOnly(registerReplicaData)
    def get_RegisterReplicaOnly(self):
        '''Method IGPReplicaOptions.get_RegisterReplicaOnly

           OUTPUT
            registerReplicaData : VARIANT_BOOL*'''
        return super(IGPReplicaOptions, self).get_RegisterReplicaOnly()
    def put_ChildConnectionString(self, ChildConnectionString):
        '''Method IGPReplicaOptions.put_ChildConnectionString

           INPUT
            ChildConnectionString: BSTR'''
        return super(IGPReplicaOptions, self).put_ChildConnectionString(ChildConnectionString)
    def get_ChildConnectionString(self):
        '''Method IGPReplicaOptions.get_ChildConnectionString

           OUTPUT
            ChildConnectionString: BSTR*'''
        return super(IGPReplicaOptions, self).get_ChildConnectionString()
    def put_ParentConnectionString(self, ParentConnectionString):
        '''Method IGPReplicaOptions.put_ParentConnectionString

           INPUT
            ParentConnectionString: BSTR'''
        return super(IGPReplicaOptions, self).put_ParentConnectionString(ParentConnectionString)
    def get_ParentConnectionString(self):
        '''Method IGPReplicaOptions.get_ParentConnectionString

           OUTPUT
            ParentConnectionString: BSTR*'''
        return super(IGPReplicaOptions, self).get_ParentConnectionString()
    AccessType = property(get_AccessType, put_AccessType, None)
    ChildConnectionString = property(get_ChildConnectionString, put_ChildConnectionString, None)
    ChildReconcilePolicy = property(get_ChildReconcilePolicy, put_ChildReconcilePolicy, None)
    IsChildFirstSender = property(get_IsChildFirstSender, put_IsChildFirstSender, None)
    ParentConnectionString = property(get_ParentConnectionString, put_ParentConnectionString, None)
    ParentReconcilePolicy = property(get_ParentReconcilePolicy, put_ParentReconcilePolicy, None)
    RegisterReplicaOnly = property(get_RegisterReplicaOnly, put_RegisterReplicaOnly, None)

class IGPReplicaOptions2(_esriGeoDatabase.IGPReplicaOptions2):
    _IID = uuid.UUID('c2d25f91-087a-4b2e-bfe1-2dbac9cd6128')

    def __init__(self, *args, **kw):
        super(IGPReplicaOptions2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseArchiving(self, UseArchiving):
        '''Method IGPReplicaOptions2.put_UseArchiving

           INPUT
            UseArchiving        : VARIANT_BOOL'''
        return super(IGPReplicaOptions2, self).put_UseArchiving(UseArchiving)
    def get_UseArchiving(self):
        '''Method IGPReplicaOptions2.get_UseArchiving

           OUTPUT
            UseArchiving        : VARIANT_BOOL*'''
        return super(IGPReplicaOptions2, self).get_UseArchiving()
    def put_IncludeMapLayers(self, IncludeMapLayers):
        '''Method IGPReplicaOptions2.put_IncludeMapLayers

           INPUT
            IncludeMapLayers    : VARIANT_BOOL'''
        return super(IGPReplicaOptions2, self).put_IncludeMapLayers(IncludeMapLayers)
    def get_IncludeMapLayers(self):
        '''Method IGPReplicaOptions2.get_IncludeMapLayers

           OUTPUT
            IncludeMapLayers    : VARIANT_BOOL*'''
        return super(IGPReplicaOptions2, self).get_IncludeMapLayers()
    def put_ReturnAllExpandedDatasets(self, ReturnAllExpandedDatasets):
        '''Method IGPReplicaOptions2.put_ReturnAllExpandedDatasets

           INPUT
            ReturnAllExpandedDatasets: VARIANT_BOOL'''
        return super(IGPReplicaOptions2, self).put_ReturnAllExpandedDatasets(ReturnAllExpandedDatasets)
    def get_ReturnAllExpandedDatasets(self):
        '''Method IGPReplicaOptions2.get_ReturnAllExpandedDatasets

           OUTPUT
            ReturnAllExpandedDatasets: VARIANT_BOOL*'''
        return super(IGPReplicaOptions2, self).get_ReturnAllExpandedDatasets()
    def put_ResolveDatasetNameConflicts(self, ResolveNameConflicts):
        '''Method IGPReplicaOptions2.put_ResolveDatasetNameConflicts

           INPUT
            ResolveNameConflicts: VARIANT_BOOL'''
        return super(IGPReplicaOptions2, self).put_ResolveDatasetNameConflicts(ResolveNameConflicts)
    def get_ResolveDatasetNameConflicts(self):
        '''Method IGPReplicaOptions2.get_ResolveDatasetNameConflicts

           OUTPUT
            ResolveNameConflicts: VARIANT_BOOL*'''
        return super(IGPReplicaOptions2, self).get_ResolveDatasetNameConflicts()
    def put_IsChildFirstSender(self, childIsFirstSender):
        '''Method IGPReplicaOptions.put_IsChildFirstSender (from IGPReplicaOptions)

           INPUT
            childIsFirstSender  : VARIANT_BOOL'''
        return super(IGPReplicaOptions2, self).put_IsChildFirstSender(childIsFirstSender)
    def get_IsChildFirstSender(self):
        '''Method IGPReplicaOptions.get_IsChildFirstSender (from IGPReplicaOptions)

           OUTPUT
            childIsFirstSender  : VARIANT_BOOL*'''
        return super(IGPReplicaOptions2, self).get_IsChildFirstSender()
    def put_AccessType(self, AccessType):
        '''Method IGPReplicaOptions.put_AccessType (from IGPReplicaOptions)

           INPUT
            AccessType          : esriReplicaAccessType'''
        return super(IGPReplicaOptions2, self).put_AccessType(AccessType)
    def get_AccessType(self):
        '''Method IGPReplicaOptions.get_AccessType (from IGPReplicaOptions)

           OUTPUT
            AccessType          : esriReplicaAccessType*'''
        return super(IGPReplicaOptions2, self).get_AccessType()
    def put_ChildReconcilePolicy(self, childPolicy):
        '''Method IGPReplicaOptions.put_ChildReconcilePolicy (from IGPReplicaOptions)

           INPUT
            childPolicy         : esriReplicaReconcilePolicyType'''
        return super(IGPReplicaOptions2, self).put_ChildReconcilePolicy(childPolicy)
    def get_ChildReconcilePolicy(self):
        '''Method IGPReplicaOptions.get_ChildReconcilePolicy (from IGPReplicaOptions)

           OUTPUT
            childPolicy         : esriReplicaReconcilePolicyType*'''
        return super(IGPReplicaOptions2, self).get_ChildReconcilePolicy()
    def put_ParentReconcilePolicy(self, parentPolicy):
        '''Method IGPReplicaOptions.put_ParentReconcilePolicy (from IGPReplicaOptions)

           INPUT
            parentPolicy        : esriReplicaReconcilePolicyType'''
        return super(IGPReplicaOptions2, self).put_ParentReconcilePolicy(parentPolicy)
    def get_ParentReconcilePolicy(self):
        '''Method IGPReplicaOptions.get_ParentReconcilePolicy (from IGPReplicaOptions)

           OUTPUT
            parentPolicy        : esriReplicaReconcilePolicyType*'''
        return super(IGPReplicaOptions2, self).get_ParentReconcilePolicy()
    def put_RegisterReplicaOnly(self, registerReplicaData):
        '''Method IGPReplicaOptions.put_RegisterReplicaOnly (from IGPReplicaOptions)

           INPUT
            registerReplicaData : VARIANT_BOOL'''
        return super(IGPReplicaOptions2, self).put_RegisterReplicaOnly(registerReplicaData)
    def get_RegisterReplicaOnly(self):
        '''Method IGPReplicaOptions.get_RegisterReplicaOnly (from IGPReplicaOptions)

           OUTPUT
            registerReplicaData : VARIANT_BOOL*'''
        return super(IGPReplicaOptions2, self).get_RegisterReplicaOnly()
    def put_ChildConnectionString(self, ChildConnectionString):
        '''Method IGPReplicaOptions.put_ChildConnectionString (from IGPReplicaOptions)

           INPUT
            ChildConnectionString: BSTR'''
        return super(IGPReplicaOptions2, self).put_ChildConnectionString(ChildConnectionString)
    def get_ChildConnectionString(self):
        '''Method IGPReplicaOptions.get_ChildConnectionString (from IGPReplicaOptions)

           OUTPUT
            ChildConnectionString: BSTR*'''
        return super(IGPReplicaOptions2, self).get_ChildConnectionString()
    def put_ParentConnectionString(self, ParentConnectionString):
        '''Method IGPReplicaOptions.put_ParentConnectionString (from IGPReplicaOptions)

           INPUT
            ParentConnectionString: BSTR'''
        return super(IGPReplicaOptions2, self).put_ParentConnectionString(ParentConnectionString)
    def get_ParentConnectionString(self):
        '''Method IGPReplicaOptions.get_ParentConnectionString (from IGPReplicaOptions)

           OUTPUT
            ParentConnectionString: BSTR*'''
        return super(IGPReplicaOptions2, self).get_ParentConnectionString()
    AccessType = property(get_AccessType, put_AccessType, None)
    ChildConnectionString = property(get_ChildConnectionString, put_ChildConnectionString, None)
    ChildReconcilePolicy = property(get_ChildReconcilePolicy, put_ChildReconcilePolicy, None)
    IncludeMapLayers = property(get_IncludeMapLayers, put_IncludeMapLayers, None)
    IsChildFirstSender = property(get_IsChildFirstSender, put_IsChildFirstSender, None)
    ParentConnectionString = property(get_ParentConnectionString, put_ParentConnectionString, None)
    ParentReconcilePolicy = property(get_ParentReconcilePolicy, put_ParentReconcilePolicy, None)
    RegisterReplicaOnly = property(get_RegisterReplicaOnly, put_RegisterReplicaOnly, None)
    ResolveDatasetNameConflicts = property(get_ResolveDatasetNameConflicts, put_ResolveDatasetNameConflicts, None)
    ReturnAllExpandedDatasets = property(get_ReturnAllExpandedDatasets, put_ReturnAllExpandedDatasets, None)
    UseArchiving = property(get_UseArchiving, put_UseArchiving, None)

class IGPReplicaDataset2(_esriGeoDatabase.IGPReplicaDataset2):
    _IID = uuid.UUID('484704ee-1f3c-4342-961b-0337217cf20a')

    def __init__(self, *args, **kw):
        super(IGPReplicaDataset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TargetName(self, TargetName):
        '''Method IGPReplicaDataset2.put_TargetName

           INPUT
            TargetName          : BSTR'''
        return super(IGPReplicaDataset2, self).put_TargetName(TargetName)
    def get_TargetName(self):
        '''Method IGPReplicaDataset2.get_TargetName

           OUTPUT
            TargetName          : BSTR*'''
        return super(IGPReplicaDataset2, self).get_TargetName()
    def put_ParentOwner(self, ParentOwner):
        '''Method IGPReplicaDataset2.put_ParentOwner

           INPUT
            ParentOwner         : BSTR'''
        return super(IGPReplicaDataset2, self).put_ParentOwner(ParentOwner)
    def get_ParentOwner(self):
        '''Method IGPReplicaDataset2.get_ParentOwner

           OUTPUT
            ParentOwner         : BSTR*'''
        return super(IGPReplicaDataset2, self).get_ParentOwner()
    def put_ParentDatabase(self, parentDBase):
        '''Method IGPReplicaDataset2.put_ParentDatabase

           INPUT
            parentDBase         : BSTR'''
        return super(IGPReplicaDataset2, self).put_ParentDatabase(parentDBase)
    def get_ParentDatabase(self):
        '''Method IGPReplicaDataset2.get_ParentDatabase

           OUTPUT
            parentDBase         : BSTR*'''
        return super(IGPReplicaDataset2, self).get_ParentDatabase()
    def put_DatasetID(self, DatasetID):
        '''Method IGPReplicaDataset2.put_DatasetID

           INPUT
            DatasetID           : long'''
        return super(IGPReplicaDataset2, self).put_DatasetID(DatasetID)
    def get_DatasetID(self):
        '''Method IGPReplicaDataset2.get_DatasetID

           OUTPUT
            DatasetID           : long*'''
        return super(IGPReplicaDataset2, self).get_DatasetID()
    def put_LayerID(self, LayerID):
        '''Method IGPReplicaDataset2.put_LayerID

           INPUT
            LayerID             : long'''
        return super(IGPReplicaDataset2, self).put_LayerID(LayerID)
    def get_LayerID(self):
        '''Method IGPReplicaDataset2.get_LayerID

           OUTPUT
            LayerID             : long*'''
        return super(IGPReplicaDataset2, self).get_LayerID()
    def put_Name(self, Name):
        '''Method IGPReplicaDataset.put_Name (from IGPReplicaDataset)

           INPUT
            Name                : BSTR'''
        return super(IGPReplicaDataset2, self).put_Name(Name)
    def get_Name(self):
        '''Method IGPReplicaDataset.get_Name (from IGPReplicaDataset)

           OUTPUT
            Name                : BSTR*'''
        return super(IGPReplicaDataset2, self).get_Name()
    def put_DatasetType(self, DatasetType):
        '''Method IGPReplicaDataset.put_DatasetType (from IGPReplicaDataset)

           INPUT
            DatasetType         : esriDatasetType'''
        return super(IGPReplicaDataset2, self).put_DatasetType(DatasetType)
    def get_DatasetType(self):
        '''Method IGPReplicaDataset.get_DatasetType (from IGPReplicaDataset)

           OUTPUT
            DatasetType         : esriDatasetType*'''
        return super(IGPReplicaDataset2, self).get_DatasetType()
    def put_RowsType(self, RowsType):
        '''Method IGPReplicaDataset.put_RowsType (from IGPReplicaDataset)

           INPUT
            RowsType            : esriRowsType'''
        return super(IGPReplicaDataset2, self).put_RowsType(RowsType)
    def get_RowsType(self):
        '''Method IGPReplicaDataset.get_RowsType (from IGPReplicaDataset)

           OUTPUT
            RowsType            : esriRowsType*'''
        return super(IGPReplicaDataset2, self).get_RowsType()
    def put_IsPrivate(self, IsPrivate):
        '''Method IGPReplicaDataset.put_IsPrivate (from IGPReplicaDataset)

           INPUT
            IsPrivate           : VARIANT_BOOL'''
        return super(IGPReplicaDataset2, self).put_IsPrivate(IsPrivate)
    def get_IsPrivate(self):
        '''Method IGPReplicaDataset.get_IsPrivate (from IGPReplicaDataset)

           OUTPUT
            IsPrivate           : VARIANT_BOOL*'''
        return super(IGPReplicaDataset2, self).get_IsPrivate()
    def put_UseGeometry(self, UseGeometry):
        '''Method IGPReplicaDataset.put_UseGeometry (from IGPReplicaDataset)

           INPUT
            UseGeometry         : VARIANT_BOOL'''
        return super(IGPReplicaDataset2, self).put_UseGeometry(UseGeometry)
    def get_UseGeometry(self):
        '''Method IGPReplicaDataset.get_UseGeometry (from IGPReplicaDataset)

           OUTPUT
            UseGeometry         : VARIANT_BOOL*'''
        return super(IGPReplicaDataset2, self).get_UseGeometry()
    def put_DefQuery(self, DefQuery):
        '''Method IGPReplicaDataset.put_DefQuery (from IGPReplicaDataset)

           INPUT
            DefQuery            : BSTR'''
        return super(IGPReplicaDataset2, self).put_DefQuery(DefQuery)
    def get_DefQuery(self):
        '''Method IGPReplicaDataset.get_DefQuery (from IGPReplicaDataset)

           OUTPUT
            DefQuery            : BSTR*'''
        return super(IGPReplicaDataset2, self).get_DefQuery()
    def putref_SelectionIDs(self, LongArray):
        '''Method IGPReplicaDataset.putref_SelectionIDs (from IGPReplicaDataset)

           INPUT
            LongArray           : ILongArray*'''
        return super(IGPReplicaDataset2, self).putref_SelectionIDs(LongArray)
    def get_SelectionIDs(self):
        '''Method IGPReplicaDataset.get_SelectionIDs (from IGPReplicaDataset)

           OUTPUT
            LongArray           : ILongArray**'''
        return super(IGPReplicaDataset2, self).get_SelectionIDs()
    def put_RelExtractDirection(self, RelExtractDir):
        '''Method IGPReplicaDataset.put_RelExtractDirection (from IGPReplicaDataset)

           INPUT
            RelExtractDir       : esriRelExtractDirection'''
        return super(IGPReplicaDataset2, self).put_RelExtractDirection(RelExtractDir)
    def get_RelExtractDirection(self):
        '''Method IGPReplicaDataset.get_RelExtractDirection (from IGPReplicaDataset)

           OUTPUT
            RelExtractDir       : esriRelExtractDirection*'''
        return super(IGPReplicaDataset2, self).get_RelExtractDirection()
    def put_RelOriginClass(self, OriginClass):
        '''Method IGPReplicaDataset.put_RelOriginClass (from IGPReplicaDataset)

           INPUT
            OriginClass         : BSTR'''
        return super(IGPReplicaDataset2, self).put_RelOriginClass(OriginClass)
    def get_RelOriginClass(self):
        '''Method IGPReplicaDataset.get_RelOriginClass (from IGPReplicaDataset)

           OUTPUT
            OriginClass         : BSTR*'''
        return super(IGPReplicaDataset2, self).get_RelOriginClass()
    def put_RelDestinationClass(self, destClass):
        '''Method IGPReplicaDataset.put_RelDestinationClass (from IGPReplicaDataset)

           INPUT
            destClass           : BSTR'''
        return super(IGPReplicaDataset2, self).put_RelDestinationClass(destClass)
    def get_RelDestinationClass(self):
        '''Method IGPReplicaDataset.get_RelDestinationClass (from IGPReplicaDataset)

           OUTPUT
            destClass           : BSTR*'''
        return super(IGPReplicaDataset2, self).get_RelDestinationClass()
    DatasetID = property(get_DatasetID, put_DatasetID, None)
    DatasetType = property(get_DatasetType, put_DatasetType, None)
    DefQuery = property(get_DefQuery, put_DefQuery, None)
    IsPrivate = property(get_IsPrivate, put_IsPrivate, None)
    LayerID = property(get_LayerID, put_LayerID, None)
    Name = property(get_Name, put_Name, None)
    ParentDatabase = property(get_ParentDatabase, put_ParentDatabase, None)
    ParentOwner = property(get_ParentOwner, put_ParentOwner, None)
    RelDestinationClass = property(get_RelDestinationClass, put_RelDestinationClass, None)
    RelExtractDirection = property(get_RelExtractDirection, put_RelExtractDirection, None)
    RelOriginClass = property(get_RelOriginClass, put_RelOriginClass, None)
    RowsType = property(get_RowsType, put_RowsType, None)
    SelectionIDs = property(get_SelectionIDs, putref_SelectionIDs, None)
    TargetName = property(get_TargetName, put_TargetName, None)
    UseGeometry = property(get_UseGeometry, put_UseGeometry, None)

class IRouteLocatorName(_esriGeoDatabase.IRouteLocatorName):
    _IID = uuid.UUID('d03a61a0-2070-11d4-9fc1-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(IRouteLocatorName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RouteFeatureClassName(self, Name):
        '''Method IRouteLocatorName.putref_RouteFeatureClassName

           INPUT
            Name                : IName*'''
        return super(IRouteLocatorName, self).putref_RouteFeatureClassName(Name)
    def get_RouteFeatureClassName(self):
        '''Method IRouteLocatorName.get_RouteFeatureClassName

           OUTPUT
            Name                : IName**'''
        return super(IRouteLocatorName, self).get_RouteFeatureClassName()
    def put_RouteIDFieldName(self, RouteIDFieldName):
        '''Method IRouteLocatorName.put_RouteIDFieldName

           INPUT
            RouteIDFieldName    : BSTR'''
        return super(IRouteLocatorName, self).put_RouteIDFieldName(RouteIDFieldName)
    def get_RouteIDFieldName(self):
        '''Method IRouteLocatorName.get_RouteIDFieldName

           OUTPUT
            RouteIDFieldName    : BSTR*'''
        return super(IRouteLocatorName, self).get_RouteIDFieldName()
    def put_RouteIDIsUnique(self, RouteIDIsUnique):
        '''Method IRouteLocatorName.put_RouteIDIsUnique

           INPUT
            RouteIDIsUnique     : VARIANT_BOOL'''
        return super(IRouteLocatorName, self).put_RouteIDIsUnique(RouteIDIsUnique)
    def get_RouteIDIsUnique(self):
        '''Method IRouteLocatorName.get_RouteIDIsUnique

           OUTPUT
            RouteIDIsUnique     : VARIANT_BOOL*'''
        return super(IRouteLocatorName, self).get_RouteIDIsUnique()
    def put_RouteMeasureUnit(self, Units):
        '''Method IRouteLocatorName.put_RouteMeasureUnit

           INPUT
            Units               : esriUnits'''
        return super(IRouteLocatorName, self).put_RouteMeasureUnit(Units)
    def get_RouteMeasureUnit(self):
        '''Method IRouteLocatorName.get_RouteMeasureUnit

           OUTPUT
            Units               : esriUnits*'''
        return super(IRouteLocatorName, self).get_RouteMeasureUnit()
    def put_RouteWhereClause(self, WhereClause):
        '''Method IRouteLocatorName.put_RouteWhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(IRouteLocatorName, self).put_RouteWhereClause(WhereClause)
    def get_RouteWhereClause(self):
        '''Method IRouteLocatorName.get_RouteWhereClause

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IRouteLocatorName, self).get_RouteWhereClause()
    RouteFeatureClassName = property(get_RouteFeatureClassName, putref_RouteFeatureClassName, None)
    RouteIDFieldName = property(get_RouteIDFieldName, put_RouteIDFieldName, None)
    RouteIDIsUnique = property(get_RouteIDIsUnique, put_RouteIDIsUnique, None)
    RouteMeasureUnit = property(get_RouteMeasureUnit, put_RouteMeasureUnit, None)
    RouteWhereClause = property(get_RouteWhereClause, put_RouteWhereClause, None)

class IRouteEventProperties(_esriGeoDatabase.IRouteEventProperties):
    _IID = uuid.UUID('35bdf2ed-3b21-11d4-9fcb-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(IRouteEventProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_EventRouteIDFieldName(self, FieldName):
        '''Method IRouteEventProperties.put_EventRouteIDFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IRouteEventProperties, self).put_EventRouteIDFieldName(FieldName)
    def get_EventRouteIDFieldName(self):
        '''Method IRouteEventProperties.get_EventRouteIDFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IRouteEventProperties, self).get_EventRouteIDFieldName()
    def put_EventMeasureUnit(self, Units):
        '''Method IRouteEventProperties.put_EventMeasureUnit

           INPUT
            Units               : esriUnits'''
        return super(IRouteEventProperties, self).put_EventMeasureUnit(Units)
    def get_EventMeasureUnit(self):
        '''Method IRouteEventProperties.get_EventMeasureUnit

           OUTPUT
            Units               : esriUnits*'''
        return super(IRouteEventProperties, self).get_EventMeasureUnit()
    def put_LateralOffsetFieldName(self, FieldName):
        '''Method IRouteEventProperties.put_LateralOffsetFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IRouteEventProperties, self).put_LateralOffsetFieldName(FieldName)
    def get_LateralOffsetFieldName(self):
        '''Method IRouteEventProperties.get_LateralOffsetFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IRouteEventProperties, self).get_LateralOffsetFieldName()
    def get_IsALineEvent(self):
        '''Method IRouteEventProperties.get_IsALineEvent

           OUTPUT
            lineEvent           : VARIANT_BOOL*'''
        return super(IRouteEventProperties, self).get_IsALineEvent()
    def GetSettingError(self):
        '''Method IRouteEventProperties.GetSettingError'''
        return super(IRouteEventProperties, self).GetSettingError()
    EventMeasureUnit = property(get_EventMeasureUnit, put_EventMeasureUnit, None)
    EventRouteIDFieldName = property(get_EventRouteIDFieldName, put_EventRouteIDFieldName, None)
    IsALineEvent = property(get_IsALineEvent, None, None)
    LateralOffsetFieldName = property(get_LateralOffsetFieldName, put_LateralOffsetFieldName, None)

class IRouteEventProperties2(_esriGeoDatabase.IRouteEventProperties2):
    _IID = uuid.UUID('5ae87432-a9c0-42c4-8dfa-03e5c93785e9')

    def __init__(self, *args, **kw):
        super(IRouteEventProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AddErrorField(self, Value):
        '''Method IRouteEventProperties2.put_AddErrorField

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IRouteEventProperties2, self).put_AddErrorField(Value)
    def get_AddErrorField(self):
        '''Method IRouteEventProperties2.get_AddErrorField

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IRouteEventProperties2, self).get_AddErrorField()
    def put_ErrorFieldName(self, FieldName):
        '''Method IRouteEventProperties2.put_ErrorFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IRouteEventProperties2, self).put_ErrorFieldName(FieldName)
    def get_ErrorFieldName(self):
        '''Method IRouteEventProperties2.get_ErrorFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IRouteEventProperties2, self).get_ErrorFieldName()
    def put_MDirectionOffsetting(self, Value):
        '''Method IRouteEventProperties2.put_MDirectionOffsetting

           INPUT
            Value               : VARIANT_BOOL'''
        return super(IRouteEventProperties2, self).put_MDirectionOffsetting(Value)
    def get_MDirectionOffsetting(self):
        '''Method IRouteEventProperties2.get_MDirectionOffsetting

           OUTPUT
            Value               : VARIANT_BOOL*'''
        return super(IRouteEventProperties2, self).get_MDirectionOffsetting()
    def put_EventRouteIDFieldName(self, FieldName):
        '''Method IRouteEventProperties.put_EventRouteIDFieldName (from IRouteEventProperties)

           INPUT
            FieldName           : BSTR'''
        return super(IRouteEventProperties2, self).put_EventRouteIDFieldName(FieldName)
    def get_EventRouteIDFieldName(self):
        '''Method IRouteEventProperties.get_EventRouteIDFieldName (from IRouteEventProperties)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IRouteEventProperties2, self).get_EventRouteIDFieldName()
    def put_EventMeasureUnit(self, Units):
        '''Method IRouteEventProperties.put_EventMeasureUnit (from IRouteEventProperties)

           INPUT
            Units               : esriUnits'''
        return super(IRouteEventProperties2, self).put_EventMeasureUnit(Units)
    def get_EventMeasureUnit(self):
        '''Method IRouteEventProperties.get_EventMeasureUnit (from IRouteEventProperties)

           OUTPUT
            Units               : esriUnits*'''
        return super(IRouteEventProperties2, self).get_EventMeasureUnit()
    def put_LateralOffsetFieldName(self, FieldName):
        '''Method IRouteEventProperties.put_LateralOffsetFieldName (from IRouteEventProperties)

           INPUT
            FieldName           : BSTR'''
        return super(IRouteEventProperties2, self).put_LateralOffsetFieldName(FieldName)
    def get_LateralOffsetFieldName(self):
        '''Method IRouteEventProperties.get_LateralOffsetFieldName (from IRouteEventProperties)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IRouteEventProperties2, self).get_LateralOffsetFieldName()
    def get_IsALineEvent(self):
        '''Method IRouteEventProperties.get_IsALineEvent (from IRouteEventProperties)

           OUTPUT
            lineEvent           : VARIANT_BOOL*'''
        return super(IRouteEventProperties2, self).get_IsALineEvent()
    def GetSettingError(self):
        '''Method IRouteEventProperties.GetSettingError (from IRouteEventProperties)'''
        return super(IRouteEventProperties2, self).GetSettingError()
    AddErrorField = property(get_AddErrorField, put_AddErrorField, None)
    ErrorFieldName = property(get_ErrorFieldName, put_ErrorFieldName, None)
    EventMeasureUnit = property(get_EventMeasureUnit, put_EventMeasureUnit, None)
    EventRouteIDFieldName = property(get_EventRouteIDFieldName, put_EventRouteIDFieldName, None)
    IsALineEvent = property(get_IsALineEvent, None, None)
    LateralOffsetFieldName = property(get_LateralOffsetFieldName, put_LateralOffsetFieldName, None)
    MDirectionOffsetting = property(get_MDirectionOffsetting, put_MDirectionOffsetting, None)

class IRouteEventSourceName(_esriGeoDatabase.IRouteEventSourceName):
    _IID = uuid.UUID('7f9c0d54-b8c7-11d3-9f7c-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(IRouteEventSourceName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RouteLocatorName(self, locatorName):
        '''Method IRouteEventSourceName.putref_RouteLocatorName

           INPUT
            locatorName         : IRouteLocatorName*'''
        return super(IRouteEventSourceName, self).putref_RouteLocatorName(locatorName)
    def get_RouteLocatorName(self):
        '''Method IRouteEventSourceName.get_RouteLocatorName

           OUTPUT
            locatorName         : IRouteLocatorName**'''
        return super(IRouteEventSourceName, self).get_RouteLocatorName()
    def putref_EventTableName(self, aName):
        '''Method IRouteEventSourceName.putref_EventTableName

           INPUT
            aName               : IName*'''
        return super(IRouteEventSourceName, self).putref_EventTableName(aName)
    def get_EventTableName(self):
        '''Method IRouteEventSourceName.get_EventTableName

           OUTPUT
            aName               : IName**'''
        return super(IRouteEventSourceName, self).get_EventTableName()
    def putref_EventProperties(self, EventProperties):
        '''Method IRouteEventSourceName.putref_EventProperties

           INPUT
            EventProperties     : IRouteEventProperties*'''
        return super(IRouteEventSourceName, self).putref_EventProperties(EventProperties)
    def get_EventProperties(self):
        '''Method IRouteEventSourceName.get_EventProperties

           OUTPUT
            EventProperties     : IRouteEventProperties**'''
        return super(IRouteEventSourceName, self).get_EventProperties()
    EventProperties = property(get_EventProperties, putref_EventProperties, None)
    EventTableName = property(get_EventTableName, putref_EventTableName, None)
    RouteLocatorName = property(get_RouteLocatorName, putref_RouteLocatorName, None)

class IXYEventSourceName(_esriGeoDatabase.IXYEventSourceName):
    _IID = uuid.UUID('07f0ce74-eaeb-11d3-9f8a-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(IXYEventSourceName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_EventTableName(self, aName):
        '''Method IXYEventSourceName.putref_EventTableName

           INPUT
            aName               : IName*'''
        return super(IXYEventSourceName, self).putref_EventTableName(aName)
    def get_EventTableName(self):
        '''Method IXYEventSourceName.get_EventTableName

           OUTPUT
            aName               : IName**'''
        return super(IXYEventSourceName, self).get_EventTableName()
    def putref_EventProperties(self, xyProperties):
        '''Method IXYEventSourceName.putref_EventProperties

           INPUT
            xyProperties        : IXYEventProperties*'''
        return super(IXYEventSourceName, self).putref_EventProperties(xyProperties)
    def get_EventProperties(self):
        '''Method IXYEventSourceName.get_EventProperties

           OUTPUT
            xyProperties        : IXYEventProperties**'''
        return super(IXYEventSourceName, self).get_EventProperties()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IXYEventSourceName.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IXYEventSourceName, self).putref_SpatialReference(SpatialReference)
    def get_SpatialReference(self):
        '''Method IXYEventSourceName.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IXYEventSourceName, self).get_SpatialReference()
    EventProperties = property(get_EventProperties, putref_EventProperties, None)
    EventTableName = property(get_EventTableName, putref_EventTableName, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGPMessage2(_esriGeoDatabase.IGPMessage2):
    _IID = uuid.UUID('ed4b67f0-b72b-42f7-b033-bd62c8ed163f')
    def CreateIDMessage(self, Type, ErrorCode):
        '''Method IGPMessage2.CreateIDMessage

           INPUTS
            Type                : esriGPMessageType
            ErrorCode           : long'''
        return super(IGPMessage2, self).CreateIDMessage(Type, ErrorCode)
    def CreateIDMessage1Args(self, Type, ErrorCode, arg):
        '''Method IGPMessage2.CreateIDMessage1Args

           INPUTS
            Type                : esriGPMessageType
            ErrorCode           : long
            arg                 : BSTR'''
        return super(IGPMessage2, self).CreateIDMessage1Args(Type, ErrorCode, arg)
    def CreateIDMessage2Args(self, Type, ErrorCode, arg1, arg2):
        '''Method IGPMessage2.CreateIDMessage2Args

           INPUTS
            Type                : esriGPMessageType
            ErrorCode           : long
            arg1                : BSTR
            arg2                : BSTR'''
        return super(IGPMessage2, self).CreateIDMessage2Args(Type, ErrorCode, arg1, arg2)

class IGPName(_esriGeoDatabase.IGPName):
    _IID = uuid.UUID('17a47938-e1ed-4d82-a1d1-d274465fcbc4')

    def __init__(self, *args, **kw):
        super(IGPName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPName.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPName, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPName.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPName, self).put_Name(Name)
    def get_DisplayName(self):
        '''Method IGPName.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPName, self).get_DisplayName()
    def put_DisplayName(self, Name):
        '''Method IGPName.put_DisplayName

           INPUT
            Name                : BSTR'''
        return super(IGPName, self).put_DisplayName(Name)
    def get_Description(self):
        '''Method IGPName.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IGPName, self).get_Description()
    def put_Description(self, Description):
        '''Method IGPName.put_Description

           INPUT
            Description         : BSTR'''
        return super(IGPName, self).put_Description(Description)
    def get_Category(self):
        '''Method IGPName.get_Category

           OUTPUT
            Path                : BSTR*'''
        return super(IGPName, self).get_Category()
    def put_Category(self, Path):
        '''Method IGPName.put_Category

           INPUT
            Path                : BSTR'''
        return super(IGPName, self).put_Category(Path)
    def get_Factory(self):
        '''Method IGPName.get_Factory

           OUTPUT
            Factory             : IUnknown**'''
        return super(IGPName, self).get_Factory()
    def putref_Factory(self, Factory):
        '''Method IGPName.putref_Factory

           INPUT
            Factory             : IUnknown*'''
        return super(IGPName, self).putref_Factory(Factory)
    Category = property(get_Category, put_Category, None)
    Description = property(get_Description, put_Description, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    Factory = property(get_Factory, putref_Factory, None)
    Name = property(get_Name, put_Name, None)

class IEnumGPName(_esriGeoDatabase.IEnumGPName):
    _IID = uuid.UUID('4daa55f1-b959-4c53-990b-a871b19ba3d6')
    def Next(self):
        '''Method IEnumGPName.Next

           OUTPUT
            Name                : IGPName**'''
        return super(IEnumGPName, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPName, self).Reset()
            val = super(IEnumGPName, self).Next()
            while val:
                yield val
                val = super(IEnumGPName, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPName.Reset'''
        return super(IEnumGPName, self).Reset()

class IGPToolTip(_esriGeoDatabase.IGPToolTip):
    _IID = uuid.UUID('4d95bfa9-aa3f-416a-a4a9-6b6b2cf66f2b')
    def GetToolTip(self):
        '''Method IGPToolTip.GetToolTip

           OUTPUT
            toolTip             : BSTR*'''
        return super(IGPToolTip, self).GetToolTip()

class IRasterColormap(_esriGeoDatabase.IRasterColormap):
    _IID = uuid.UUID('7e7e6105-fa34-11d1-8d22-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRasterColormap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RedValues(self):
        '''Method IRasterColormap.get_RedValues

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap, self).get_RedValues()
    def put_RedValues(self, val):
        '''Method IRasterColormap.put_RedValues

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap, self).put_RedValues(val)
    def get_GreenValues(self):
        '''Method IRasterColormap.get_GreenValues

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap, self).get_GreenValues()
    def put_GreenValues(self, val):
        '''Method IRasterColormap.put_GreenValues

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap, self).put_GreenValues(val)
    def get_BlueValues(self):
        '''Method IRasterColormap.get_BlueValues

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap, self).get_BlueValues()
    def put_BlueValues(self, val):
        '''Method IRasterColormap.put_BlueValues

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap, self).put_BlueValues(val)
    def get_Colors(self):
        '''Method IRasterColormap.get_Colors

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap, self).get_Colors()
    def put_Colors(self, val):
        '''Method IRasterColormap.put_Colors

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap, self).put_Colors(val)
    def Bin(self, pixval):
        '''Method IRasterColormap.Bin

           INPUT
            pixval              : double

           OUTPUT
            Bin                 : long*'''
        return super(IRasterColormap, self).Bin(pixval)
    BlueValues = property(get_BlueValues, put_BlueValues, None)
    Colors = property(get_Colors, put_Colors, None)
    GreenValues = property(get_GreenValues, put_GreenValues, None)
    RedValues = property(get_RedValues, put_RedValues, None)

class IRasterLODInfos(_esriGeoDatabase.IRasterLODInfos):
    _IID = uuid.UUID('2ee0f992-e4cb-429d-b663-7a12213b0cd1')
    def get_NumLevels(self):
        '''Method IRasterLODInfos.get_NumLevels

           OUTPUT
            NumLevels           : long*'''
        return super(IRasterLODInfos, self).get_NumLevels()
    def Snap(self, dx, dy):
        '''Method IRasterLODInfos.Snap

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            level               : long*'''
        return super(IRasterLODInfos, self).Snap(dx, dy)
    def GetResolution(self, level):
        '''Method IRasterLODInfos.GetResolution

           INPUT
            level               : long

           OUTPUTS
            XResolution         : double*
            YResolution         : double*'''
        return super(IRasterLODInfos, self).GetResolution(level)
    NumLevels = property(get_NumLevels, None, None)

class IRasterLODInfos2(_esriGeoDatabase.IRasterLODInfos2):
    _IID = uuid.UUID('85bc9bc4-a306-45cf-a2ef-2c9603d7b13d')
    def Snap2(self, dx, dy, hint):
        '''Method IRasterLODInfos2.Snap2

           INPUTS
            dx                  : double
            dy                  : double
            hint                : esriRasterResamplingHint

           OUTPUT
            level               : long*'''
        return super(IRasterLODInfos2, self).Snap2(dx, dy, hint)
    def get_NumLevels(self):
        '''Method IRasterLODInfos.get_NumLevels (from IRasterLODInfos)

           OUTPUT
            NumLevels           : long*'''
        return super(IRasterLODInfos2, self).get_NumLevels()
    def Snap(self, dx, dy):
        '''Method IRasterLODInfos.Snap (from IRasterLODInfos)

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            level               : long*'''
        return super(IRasterLODInfos2, self).Snap(dx, dy)
    def GetResolution(self, level):
        '''Method IRasterLODInfos.GetResolution (from IRasterLODInfos)

           INPUT
            level               : long

           OUTPUTS
            XResolution         : double*
            YResolution         : double*'''
        return super(IRasterLODInfos2, self).GetResolution(level)
    NumLevels = property(get_NumLevels, None, None)

class IRasterDatasetEdit(_esriGeoDatabase.IRasterDatasetEdit):
    _IID = uuid.UUID('ba86a917-98ec-4994-b692-760abedcc306')
    def Mosaic(self, Raster, tolerance):
        '''Method IRasterDatasetEdit.Mosaic

           INPUTS
            Raster              : IRaster*
            tolerance           : double'''
        return super(IRasterDatasetEdit, self).Mosaic(Raster, tolerance)
    def MosaicBands(self, Raster, start, tolerance):
        '''Method IRasterDatasetEdit.MosaicBands

           INPUTS
            Raster              : IRaster*
            start               : long
            tolerance           : double'''
        return super(IRasterDatasetEdit, self).MosaicBands(Raster, start, tolerance)
    def Erase(self, Extent):
        '''Method IRasterDatasetEdit.Erase

           INPUT
            Extent              : IEnvelope*'''
        return super(IRasterDatasetEdit, self).Erase(Extent)
    def ComputeStats(self, PyramidLevel):
        '''Method IRasterDatasetEdit.ComputeStats

           INPUT
            PyramidLevel        : long'''
        return super(IRasterDatasetEdit, self).ComputeStats(PyramidLevel)
    def DeleteStats(self):
        '''Method IRasterDatasetEdit.DeleteStats'''
        return super(IRasterDatasetEdit, self).DeleteStats()
    def AlterColormap(self, colormap):
        '''Method IRasterDatasetEdit.AlterColormap

           INPUT
            colormap            : IRasterColormap*'''
        return super(IRasterDatasetEdit, self).AlterColormap(colormap)
    def DeleteColormap(self):
        '''Method IRasterDatasetEdit.DeleteColormap'''
        return super(IRasterDatasetEdit, self).DeleteColormap()
    def AppendNewBand(self):
        '''Method IRasterDatasetEdit.AppendNewBand'''
        return super(IRasterDatasetEdit, self).AppendNewBand()

class IRasterDef2(_esriGeoDatabase.IRasterDef2):
    _IID = uuid.UUID('16c76984-e0e8-4112-80c9-e052c9b9c9d2')

    def __init__(self, *args, **kw):
        super(IRasterDef2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsFunction(self):
        '''Method IRasterDef2.get_IsFunction

           OUTPUT
            pIsFunction         : VARIANT_BOOL*'''
        return super(IRasterDef2, self).get_IsFunction()
    def put_IsFunction(self, pIsFunction):
        '''Method IRasterDef2.put_IsFunction

           INPUT
            pIsFunction         : VARIANT_BOOL'''
        return super(IRasterDef2, self).put_IsFunction(pIsFunction)
    def put_Description(self, descrption):
        '''Method IRasterDef.put_Description (from IRasterDef)

           INPUT
            descrption          : BSTR'''
        return super(IRasterDef2, self).put_Description(descrption)
    def get_Description(self):
        '''Method IRasterDef.get_Description (from IRasterDef)

           OUTPUT
            descrption          : BSTR*'''
        return super(IRasterDef2, self).get_Description()
    def get_SpatialReference(self):
        '''Method IRasterDef.get_SpatialReference (from IRasterDef)

           OUTPUT
            spref               : ISpatialReference**'''
        return super(IRasterDef2, self).get_SpatialReference()
    def putref_SpatialReference(self, spref):
        '''Method IRasterDef.putref_SpatialReference (from IRasterDef)

           INPUT
            spref               : ISpatialReference*'''
        return super(IRasterDef2, self).putref_SpatialReference(spref)
    def get_IsManaged(self):
        '''Method IRasterDef.get_IsManaged (from IRasterDef)

           OUTPUT
            IsManaged           : VARIANT_BOOL*'''
        return super(IRasterDef2, self).get_IsManaged()
    def put_IsManaged(self, IsManaged):
        '''Method IRasterDef.put_IsManaged (from IRasterDef)

           INPUT
            IsManaged           : VARIANT_BOOL'''
        return super(IRasterDef2, self).put_IsManaged(IsManaged)
    def get_IsRasterDataset(self):
        '''Method IRasterDef.get_IsRasterDataset (from IRasterDef)

           OUTPUT
            IsRasterDataset     : VARIANT_BOOL*'''
        return super(IRasterDef2, self).get_IsRasterDataset()
    def put_IsRasterDataset(self, IsRasterDataset):
        '''Method IRasterDef.put_IsRasterDataset (from IRasterDef)

           INPUT
            IsRasterDataset     : VARIANT_BOOL'''
        return super(IRasterDef2, self).put_IsRasterDataset(IsRasterDataset)
    Description = property(get_Description, put_Description, None)
    IsFunction = property(get_IsFunction, put_IsFunction, None)
    IsManaged = property(get_IsManaged, put_IsManaged, None)
    IsRasterDataset = property(get_IsRasterDataset, put_IsRasterDataset, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IRasterStorageDef2(_esriGeoDatabase.IRasterStorageDef2):
    _IID = uuid.UUID('5aa61692-eb96-4dcd-9fb9-310869d5620d')

    def __init__(self, *args, **kw):
        super(IRasterStorageDef2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Tiled(self):
        '''Method IRasterStorageDef2.get_Tiled

           OUTPUT
            Tiled               : VARIANT_BOOL*'''
        return super(IRasterStorageDef2, self).get_Tiled()
    def put_Tiled(self, Tiled):
        '''Method IRasterStorageDef2.put_Tiled

           INPUT
            Tiled               : VARIANT_BOOL'''
        return super(IRasterStorageDef2, self).put_Tiled(Tiled)
    def put_TileWidth(self, Width):
        '''Method IRasterStorageDef.put_TileWidth (from IRasterStorageDef)

           INPUT
            Width               : long'''
        return super(IRasterStorageDef2, self).put_TileWidth(Width)
    def get_TileWidth(self):
        '''Method IRasterStorageDef.get_TileWidth (from IRasterStorageDef)

           OUTPUT
            Width               : long*'''
        return super(IRasterStorageDef2, self).get_TileWidth()
    def put_TileHeight(self, Height):
        '''Method IRasterStorageDef.put_TileHeight (from IRasterStorageDef)

           INPUT
            Height              : long'''
        return super(IRasterStorageDef2, self).put_TileHeight(Height)
    def get_TileHeight(self):
        '''Method IRasterStorageDef.get_TileHeight (from IRasterStorageDef)

           OUTPUT
            Height              : long*'''
        return super(IRasterStorageDef2, self).get_TileHeight()
    def put_PyramidResampleType(self, method):
        '''Method IRasterStorageDef.put_PyramidResampleType (from IRasterStorageDef)

           INPUT
            method              : rstResamplingTypes'''
        return super(IRasterStorageDef2, self).put_PyramidResampleType(method)
    def get_PyramidResampleType(self):
        '''Method IRasterStorageDef.get_PyramidResampleType (from IRasterStorageDef)

           OUTPUT
            method              : rstResamplingTypes*'''
        return super(IRasterStorageDef2, self).get_PyramidResampleType()
    def put_PyramidLevel(self, level):
        '''Method IRasterStorageDef.put_PyramidLevel (from IRasterStorageDef)

           INPUT
            level               : long'''
        return super(IRasterStorageDef2, self).put_PyramidLevel(level)
    def get_PyramidLevel(self):
        '''Method IRasterStorageDef.get_PyramidLevel (from IRasterStorageDef)

           OUTPUT
            level               : long*'''
        return super(IRasterStorageDef2, self).get_PyramidLevel()
    def put_CompressionType(self, Type):
        '''Method IRasterStorageDef.put_CompressionType (from IRasterStorageDef)

           INPUT
            Type                : esriRasterCompressionType'''
        return super(IRasterStorageDef2, self).put_CompressionType(Type)
    def get_CompressionType(self):
        '''Method IRasterStorageDef.get_CompressionType (from IRasterStorageDef)

           OUTPUT
            Type                : esriRasterCompressionType*'''
        return super(IRasterStorageDef2, self).get_CompressionType()
    def put_CompressionQuality(self, Value):
        '''Method IRasterStorageDef.put_CompressionQuality (from IRasterStorageDef)

           INPUT
            Value               : long'''
        return super(IRasterStorageDef2, self).put_CompressionQuality(Value)
    def get_CompressionQuality(self):
        '''Method IRasterStorageDef.get_CompressionQuality (from IRasterStorageDef)

           OUTPUT
            Value               : long*'''
        return super(IRasterStorageDef2, self).get_CompressionQuality()
    def putref_Origin(self, Origin):
        '''Method IRasterStorageDef.putref_Origin (from IRasterStorageDef)

           INPUT
            Origin              : IPoint*'''
        return super(IRasterStorageDef2, self).putref_Origin(Origin)
    def get_Origin(self):
        '''Method IRasterStorageDef.get_Origin (from IRasterStorageDef)

           OUTPUT
            Origin              : IPoint**'''
        return super(IRasterStorageDef2, self).get_Origin()
    def putref_CellSize(self, CellSize):
        '''Method IRasterStorageDef.putref_CellSize (from IRasterStorageDef)

           INPUT
            CellSize            : IPnt*'''
        return super(IRasterStorageDef2, self).putref_CellSize(CellSize)
    def get_CellSize(self):
        '''Method IRasterStorageDef.get_CellSize (from IRasterStorageDef)

           OUTPUT
            CellSize            : IPnt**'''
        return super(IRasterStorageDef2, self).get_CellSize()
    CellSize = property(get_CellSize, putref_CellSize, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    Origin = property(get_Origin, putref_Origin, None)
    PyramidLevel = property(get_PyramidLevel, put_PyramidLevel, None)
    PyramidResampleType = property(get_PyramidResampleType, put_PyramidResampleType, None)
    TileHeight = property(get_TileHeight, put_TileHeight, None)
    TileWidth = property(get_TileWidth, put_TileWidth, None)
    Tiled = property(get_Tiled, put_Tiled, None)

class IRasterStorageDef3(_esriGeoDatabase.IRasterStorageDef3):
    _IID = uuid.UUID('27cea6d0-6d18-4ed4-ae3a-0861ad0caf4b')

    def __init__(self, *args, **kw):
        super(IRasterStorageDef3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CreationOptions(self):
        '''Method IRasterStorageDef3.get_CreationOptions

           OUTPUT
            pOptions            : BSTR*'''
        return super(IRasterStorageDef3, self).get_CreationOptions()
    def put_CreationOptions(self, pOptions):
        '''Method IRasterStorageDef3.put_CreationOptions

           INPUT
            pOptions            : BSTR'''
        return super(IRasterStorageDef3, self).put_CreationOptions(pOptions)
    def get_Tiled(self):
        '''Method IRasterStorageDef2.get_Tiled (from IRasterStorageDef2)

           OUTPUT
            Tiled               : VARIANT_BOOL*'''
        return super(IRasterStorageDef3, self).get_Tiled()
    def put_Tiled(self, Tiled):
        '''Method IRasterStorageDef2.put_Tiled (from IRasterStorageDef2)

           INPUT
            Tiled               : VARIANT_BOOL'''
        return super(IRasterStorageDef3, self).put_Tiled(Tiled)
    def put_TileWidth(self, Width):
        '''Method IRasterStorageDef.put_TileWidth (from IRasterStorageDef)

           INPUT
            Width               : long'''
        return super(IRasterStorageDef3, self).put_TileWidth(Width)
    def get_TileWidth(self):
        '''Method IRasterStorageDef.get_TileWidth (from IRasterStorageDef)

           OUTPUT
            Width               : long*'''
        return super(IRasterStorageDef3, self).get_TileWidth()
    def put_TileHeight(self, Height):
        '''Method IRasterStorageDef.put_TileHeight (from IRasterStorageDef)

           INPUT
            Height              : long'''
        return super(IRasterStorageDef3, self).put_TileHeight(Height)
    def get_TileHeight(self):
        '''Method IRasterStorageDef.get_TileHeight (from IRasterStorageDef)

           OUTPUT
            Height              : long*'''
        return super(IRasterStorageDef3, self).get_TileHeight()
    def put_PyramidResampleType(self, method):
        '''Method IRasterStorageDef.put_PyramidResampleType (from IRasterStorageDef)

           INPUT
            method              : rstResamplingTypes'''
        return super(IRasterStorageDef3, self).put_PyramidResampleType(method)
    def get_PyramidResampleType(self):
        '''Method IRasterStorageDef.get_PyramidResampleType (from IRasterStorageDef)

           OUTPUT
            method              : rstResamplingTypes*'''
        return super(IRasterStorageDef3, self).get_PyramidResampleType()
    def put_PyramidLevel(self, level):
        '''Method IRasterStorageDef.put_PyramidLevel (from IRasterStorageDef)

           INPUT
            level               : long'''
        return super(IRasterStorageDef3, self).put_PyramidLevel(level)
    def get_PyramidLevel(self):
        '''Method IRasterStorageDef.get_PyramidLevel (from IRasterStorageDef)

           OUTPUT
            level               : long*'''
        return super(IRasterStorageDef3, self).get_PyramidLevel()
    def put_CompressionType(self, Type):
        '''Method IRasterStorageDef.put_CompressionType (from IRasterStorageDef)

           INPUT
            Type                : esriRasterCompressionType'''
        return super(IRasterStorageDef3, self).put_CompressionType(Type)
    def get_CompressionType(self):
        '''Method IRasterStorageDef.get_CompressionType (from IRasterStorageDef)

           OUTPUT
            Type                : esriRasterCompressionType*'''
        return super(IRasterStorageDef3, self).get_CompressionType()
    def put_CompressionQuality(self, Value):
        '''Method IRasterStorageDef.put_CompressionQuality (from IRasterStorageDef)

           INPUT
            Value               : long'''
        return super(IRasterStorageDef3, self).put_CompressionQuality(Value)
    def get_CompressionQuality(self):
        '''Method IRasterStorageDef.get_CompressionQuality (from IRasterStorageDef)

           OUTPUT
            Value               : long*'''
        return super(IRasterStorageDef3, self).get_CompressionQuality()
    def putref_Origin(self, Origin):
        '''Method IRasterStorageDef.putref_Origin (from IRasterStorageDef)

           INPUT
            Origin              : IPoint*'''
        return super(IRasterStorageDef3, self).putref_Origin(Origin)
    def get_Origin(self):
        '''Method IRasterStorageDef.get_Origin (from IRasterStorageDef)

           OUTPUT
            Origin              : IPoint**'''
        return super(IRasterStorageDef3, self).get_Origin()
    def putref_CellSize(self, CellSize):
        '''Method IRasterStorageDef.putref_CellSize (from IRasterStorageDef)

           INPUT
            CellSize            : IPnt*'''
        return super(IRasterStorageDef3, self).putref_CellSize(CellSize)
    def get_CellSize(self):
        '''Method IRasterStorageDef.get_CellSize (from IRasterStorageDef)

           OUTPUT
            CellSize            : IPnt**'''
        return super(IRasterStorageDef3, self).get_CellSize()
    CellSize = property(get_CellSize, putref_CellSize, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    CreationOptions = property(get_CreationOptions, put_CreationOptions, None)
    Origin = property(get_Origin, putref_Origin, None)
    PyramidLevel = property(get_PyramidLevel, put_PyramidLevel, None)
    PyramidResampleType = property(get_PyramidResampleType, put_PyramidResampleType, None)
    TileHeight = property(get_TileHeight, put_TileHeight, None)
    TileWidth = property(get_TileWidth, put_TileWidth, None)
    Tiled = property(get_Tiled, put_Tiled, None)

class IRasterCatalogName(_esriGeoDatabase.IRasterCatalogName):
    _IID = uuid.UUID('d1909a6f-8eda-4f3d-b9d2-310fd621386a')

    def __init__(self, *args, **kw):
        super(IRasterCatalogName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterFieldName(self):
        '''Method IRasterCatalogName.get_RasterFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IRasterCatalogName, self).get_RasterFieldName()
    def put_RasterFieldName(self, Name):
        '''Method IRasterCatalogName.put_RasterFieldName

           INPUT
            Name                : BSTR'''
        return super(IRasterCatalogName, self).put_RasterFieldName(Name)
    def get_IsRasterDataset(self):
        '''Method IRasterCatalogName.get_IsRasterDataset

           OUTPUT
            IsRasterDataset     : VARIANT_BOOL*'''
        return super(IRasterCatalogName, self).get_IsRasterDataset()
    def put_IsRasterDataset(self, IsRasterDataset):
        '''Method IRasterCatalogName.put_IsRasterDataset

           INPUT
            IsRasterDataset     : VARIANT_BOOL'''
        return super(IRasterCatalogName, self).put_IsRasterDataset(IsRasterDataset)
    IsRasterDataset = property(get_IsRasterDataset, put_IsRasterDataset, None)
    RasterFieldName = property(get_RasterFieldName, put_RasterFieldName, None)

class IRasterCatalogHelper(_esriGeoDatabase.IRasterCatalogHelper):
    _IID = uuid.UUID('0e1096f4-7499-4604-8408-88a0cab3eeab')
    def UpdateFootprint(self, Catalog):
        '''Method IRasterCatalogHelper.UpdateFootprint

           INPUT
            Catalog             : IRasterCatalog*'''
        return super(IRasterCatalogHelper, self).UpdateFootprint(Catalog)
    def UpdateFootprintSpatialReference(self, Catalog):
        '''Method IRasterCatalogHelper.UpdateFootprintSpatialReference

           INPUT
            Catalog             : IRasterCatalog*'''
        return super(IRasterCatalogHelper, self).UpdateFootprintSpatialReference(Catalog)

class IRasterCatalogHelper2(_esriGeoDatabase.IRasterCatalogHelper2):
    _IID = uuid.UUID('a8231c9b-1158-4ea1-a27d-11075df88534')
    def UpdateFootprintEx(self, Catalog, where, onlyIfEmpty, cancel):
        '''Method IRasterCatalogHelper2.UpdateFootprintEx

           INPUTS
            Catalog             : IRasterCatalog*
            where               : BSTR
            onlyIfEmpty         : VARIANT_BOOL
            cancel              : ITrackCancel*'''
        return super(IRasterCatalogHelper2, self).UpdateFootprintEx(Catalog, where, onlyIfEmpty, cancel)
    def UpdateFootprint(self, Catalog):
        '''Method IRasterCatalogHelper.UpdateFootprint (from IRasterCatalogHelper)

           INPUT
            Catalog             : IRasterCatalog*'''
        return super(IRasterCatalogHelper2, self).UpdateFootprint(Catalog)
    def UpdateFootprintSpatialReference(self, Catalog):
        '''Method IRasterCatalogHelper.UpdateFootprintSpatialReference (from IRasterCatalogHelper)

           INPUT
            Catalog             : IRasterCatalog*'''
        return super(IRasterCatalogHelper2, self).UpdateFootprintSpatialReference(Catalog)

class IMosaicDatasetName(_esriGeoDatabase.IMosaicDatasetName):
    _IID = uuid.UUID('8911e302-d22b-42cb-b994-d3774b276460')

    def __init__(self, *args, **kw):
        super(IMosaicDatasetName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Referenced(self):
        '''Method IMosaicDatasetName.get_Referenced

           OUTPUT
            pReferenced         : VARIANT_BOOL*'''
        return super(IMosaicDatasetName, self).get_Referenced()
    def put_Referenced(self, pReferenced):
        '''Method IMosaicDatasetName.put_Referenced

           INPUT
            pReferenced         : VARIANT_BOOL'''
        return super(IMosaicDatasetName, self).put_Referenced(pReferenced)
    Referenced = property(get_Referenced, put_Referenced, None)

class IMosaicDatasetName2(_esriGeoDatabase.IMosaicDatasetName2):
    _IID = uuid.UUID('0b6f5156-2e59-41c8-9817-48d6d27ffa07')

    def __init__(self, *args, **kw):
        super(IMosaicDatasetName2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ChildrenNames(self):
        '''Method IMosaicDatasetName2.get_ChildrenNames

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IMosaicDatasetName2, self).get_ChildrenNames()
    def putref_ChildrenNames(self, ppNames):
        '''Method IMosaicDatasetName2.putref_ChildrenNames

           INPUT
            ppNames             : IStringArray*'''
        return super(IMosaicDatasetName2, self).putref_ChildrenNames(ppNames)
    def get_Referenced(self):
        '''Method IMosaicDatasetName.get_Referenced (from IMosaicDatasetName)

           OUTPUT
            pReferenced         : VARIANT_BOOL*'''
        return super(IMosaicDatasetName2, self).get_Referenced()
    def put_Referenced(self, pReferenced):
        '''Method IMosaicDatasetName.put_Referenced (from IMosaicDatasetName)

           INPUT
            pReferenced         : VARIANT_BOOL'''
        return super(IMosaicDatasetName2, self).put_Referenced(pReferenced)
    ChildrenNames = property(get_ChildrenNames, putref_ChildrenNames, None)
    Referenced = property(get_Referenced, put_Referenced, None)

class IRasterDatasetInfo(_esriGeoDatabase.IRasterDatasetInfo):
    _IID = uuid.UUID('681dcdf0-a80b-402f-842a-de2421b82c2c')
    def get_StorageDef(self):
        '''Method IRasterDatasetInfo.get_StorageDef

           OUTPUT
            StorageDef          : IRasterStorageDef**'''
        return super(IRasterDatasetInfo, self).get_StorageDef()
    def get_FileList(self):
        '''Method IRasterDatasetInfo.get_FileList

           OUTPUT
            pFileList           : IStringArray**'''
        return super(IRasterDatasetInfo, self).get_FileList()
    FileList = property(get_FileList, None, None)
    StorageDef = property(get_StorageDef, None, None)

class IDEBrowseOptions(_esriGeoDatabase.IDEBrowseOptions):
    _IID = uuid.UUID('25e52c75-56a2-4631-9ca3-2de46103ebfb')

    def __init__(self, *args, **kw):
        super(IDEBrowseOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExpandType(self):
        '''Method IDEBrowseOptions.get_ExpandType

           OUTPUT
            ExpandType          : esriDEExpandType*'''
        return super(IDEBrowseOptions, self).get_ExpandType()
    def put_ExpandType(self, ExpandType):
        '''Method IDEBrowseOptions.put_ExpandType

           INPUT
            ExpandType          : esriDEExpandType'''
        return super(IDEBrowseOptions, self).put_ExpandType(ExpandType)
    def get_RetrieveFullProperties(self):
        '''Method IDEBrowseOptions.get_RetrieveFullProperties

           OUTPUT
            fullProp            : VARIANT_BOOL*'''
        return super(IDEBrowseOptions, self).get_RetrieveFullProperties()
    def put_RetrieveFullProperties(self, fullProp):
        '''Method IDEBrowseOptions.put_RetrieveFullProperties

           INPUT
            fullProp            : VARIANT_BOOL'''
        return super(IDEBrowseOptions, self).put_RetrieveFullProperties(fullProp)
    def get_RetrieveMetadata(self):
        '''Method IDEBrowseOptions.get_RetrieveMetadata

           OUTPUT
            fullProp            : VARIANT_BOOL*'''
        return super(IDEBrowseOptions, self).get_RetrieveMetadata()
    def put_RetrieveMetadata(self, fullProp):
        '''Method IDEBrowseOptions.put_RetrieveMetadata

           INPUT
            fullProp            : VARIANT_BOOL'''
        return super(IDEBrowseOptions, self).put_RetrieveMetadata(fullProp)
    ExpandType = property(get_ExpandType, put_ExpandType, None)
    RetrieveFullProperties = property(get_RetrieveFullProperties, put_RetrieveFullProperties, None)
    RetrieveMetadata = property(get_RetrieveMetadata, put_RetrieveMetadata, None)

class IDataElements(_esriGeoDatabase.IDataElements):
    _IID = uuid.UUID('98252e86-5228-4bce-8034-e07e0b2eba94')
    def get_Count(self):
        '''Method IDataElements.get_Count

           OUTPUT
            Count               : long*'''
        return super(IDataElements, self).get_Count()
    def get_Element(self, Index):
        '''Method IDataElements.get_Element

           INPUT
            Index               : long

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IDataElements, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IDataElements.Remove

           INPUT
            Index               : long'''
        return super(IDataElements, self).Remove(Index)
    def RemoveAll(self):
        '''Method IDataElements.RemoveAll'''
        return super(IDataElements, self).RemoveAll()
    def Add(self, DataElement):
        '''Method IDataElements.Add

           INPUT
            DataElement         : IDataElement*'''
        return super(IDataElements, self).Add(DataElement)
    def Insert(self, Index, DataElement):
        '''Method IDataElements.Insert

           INPUTS
            Index               : long
            DataElement         : IDataElement*'''
        return super(IDataElements, self).Insert(Index, DataElement)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IEnumDataElement(_esriGeoDatabase.IEnumDataElement):
    _IID = uuid.UUID('27cd2023-223c-4942-9db0-4e4e83bcf906')
    def Next(self):
        '''Method IEnumDataElement.Next

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IEnumDataElement, self).Next()
    def __iter__(self):
        try:
            super(IEnumDataElement, self).Reset()
            val = super(IEnumDataElement, self).Next()
            while val:
                yield val
                val = super(IEnumDataElement, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumDataElement.Reset'''
        return super(IEnumDataElement, self).Reset()

class IDataElementInfo(_esriGeoDatabase.IDataElementInfo):
    _IID = uuid.UUID('d9ed1335-8e1d-40ca-9ee2-e54772ee500d')
    def GetDataElement(self, browseOptions):
        '''Method IDataElementInfo.GetDataElement

           INPUT
            browseOptions       : IDEBrowseOptions*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IDataElementInfo, self).GetDataElement(browseOptions)

class IDataElementHelper(_esriGeoDatabase.IDataElementHelper):
    _IID = uuid.UUID('11de55f8-84d3-4b69-b157-a1d969859fc2')
    def get_DataElement(self):
        '''Method IDataElementHelper.get_DataElement

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IDataElementHelper, self).get_DataElement()
    DataElement = property(get_DataElement, None, None)

class IDEGeoDataset(_esriGeoDatabase.IDEGeoDataset):
    _IID = uuid.UUID('5ed64e50-a2f2-11d5-931b-0080c71a3226')

    def __init__(self, *args, **kw):
        super(IDEGeoDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Extent(self):
        '''Method IDEGeoDataset.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IDEGeoDataset, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IDEGeoDataset.putref_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IDEGeoDataset, self).putref_Extent(Extent)
    def get_SpatialReference(self):
        '''Method IDEGeoDataset.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IDEGeoDataset, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IDEGeoDataset.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IDEGeoDataset, self).putref_SpatialReference(SpatialReference)
    Extent = property(get_Extent, putref_Extent, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IDEWorkspace(_esriGeoDatabase.IDEWorkspace):
    _IID = uuid.UUID('c7b1fc10-308f-4fb5-890c-8b5293ead096')

    def __init__(self, *args, **kw):
        super(IDEWorkspace, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_WorkspaceType(self):
        '''Method IDEWorkspace.get_WorkspaceType

           OUTPUT
            WorkspaceType       : esriWorkspaceType*'''
        return super(IDEWorkspace, self).get_WorkspaceType()
    def put_WorkspaceType(self, WorkspaceType):
        '''Method IDEWorkspace.put_WorkspaceType

           INPUT
            WorkspaceType       : esriWorkspaceType'''
        return super(IDEWorkspace, self).put_WorkspaceType(WorkspaceType)
    def get_WorkspaceFactoryProgID(self):
        '''Method IDEWorkspace.get_WorkspaceFactoryProgID

           OUTPUT
            progID              : BSTR*'''
        return super(IDEWorkspace, self).get_WorkspaceFactoryProgID()
    def put_WorkspaceFactoryProgID(self, progID):
        '''Method IDEWorkspace.put_WorkspaceFactoryProgID

           INPUT
            progID              : BSTR'''
        return super(IDEWorkspace, self).put_WorkspaceFactoryProgID(progID)
    def get_ConnectionString(self):
        '''Method IDEWorkspace.get_ConnectionString

           OUTPUT
            connection          : BSTR*'''
        return super(IDEWorkspace, self).get_ConnectionString()
    def put_ConnectionString(self, connection):
        '''Method IDEWorkspace.put_ConnectionString

           INPUT
            connection          : BSTR'''
        return super(IDEWorkspace, self).put_ConnectionString(connection)
    def get_ConnectionProperties(self):
        '''Method IDEWorkspace.get_ConnectionProperties

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IDEWorkspace, self).get_ConnectionProperties()
    def putref_ConnectionProperties(self, ConnectionProperties):
        '''Method IDEWorkspace.putref_ConnectionProperties

           INPUT
            ConnectionProperties: IPropertySet*'''
        return super(IDEWorkspace, self).putref_ConnectionProperties(ConnectionProperties)
    def get_Domains(self):
        '''Method IDEWorkspace.get_Domains

           OUTPUT
            Domains             : IArray**'''
        return super(IDEWorkspace, self).get_Domains()
    def putref_Domains(self, Domains):
        '''Method IDEWorkspace.putref_Domains

           INPUT
            Domains             : IArray*'''
        return super(IDEWorkspace, self).putref_Domains(Domains)
    ConnectionProperties = property(get_ConnectionProperties, putref_ConnectionProperties, None)
    ConnectionString = property(get_ConnectionString, put_ConnectionString, None)
    Domains = property(get_Domains, putref_Domains, None)
    WorkspaceFactoryProgID = property(get_WorkspaceFactoryProgID, put_WorkspaceFactoryProgID, None)
    WorkspaceType = property(get_WorkspaceType, put_WorkspaceType, None)

class IDEWorkspace2(_esriGeoDatabase.IDEWorkspace2):
    _IID = uuid.UUID('43c1d06b-0277-4b84-96f5-d4d3ab1173ea')

    def __init__(self, *args, **kw):
        super(IDEWorkspace2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MajorVersion(self):
        '''Method IDEWorkspace2.get_MajorVersion

           OUTPUT
            number              : long*'''
        return super(IDEWorkspace2, self).get_MajorVersion()
    def get_MinorVersion(self):
        '''Method IDEWorkspace2.get_MinorVersion

           OUTPUT
            number              : long*'''
        return super(IDEWorkspace2, self).get_MinorVersion()
    def get_BugfixVersion(self):
        '''Method IDEWorkspace2.get_BugfixVersion

           OUTPUT
            number              : long*'''
        return super(IDEWorkspace2, self).get_BugfixVersion()
    def get_WorkspaceType(self):
        '''Method IDEWorkspace.get_WorkspaceType (from IDEWorkspace)

           OUTPUT
            WorkspaceType       : esriWorkspaceType*'''
        return super(IDEWorkspace2, self).get_WorkspaceType()
    def put_WorkspaceType(self, WorkspaceType):
        '''Method IDEWorkspace.put_WorkspaceType (from IDEWorkspace)

           INPUT
            WorkspaceType       : esriWorkspaceType'''
        return super(IDEWorkspace2, self).put_WorkspaceType(WorkspaceType)
    def get_WorkspaceFactoryProgID(self):
        '''Method IDEWorkspace.get_WorkspaceFactoryProgID (from IDEWorkspace)

           OUTPUT
            progID              : BSTR*'''
        return super(IDEWorkspace2, self).get_WorkspaceFactoryProgID()
    def put_WorkspaceFactoryProgID(self, progID):
        '''Method IDEWorkspace.put_WorkspaceFactoryProgID (from IDEWorkspace)

           INPUT
            progID              : BSTR'''
        return super(IDEWorkspace2, self).put_WorkspaceFactoryProgID(progID)
    def get_ConnectionString(self):
        '''Method IDEWorkspace.get_ConnectionString (from IDEWorkspace)

           OUTPUT
            connection          : BSTR*'''
        return super(IDEWorkspace2, self).get_ConnectionString()
    def put_ConnectionString(self, connection):
        '''Method IDEWorkspace.put_ConnectionString (from IDEWorkspace)

           INPUT
            connection          : BSTR'''
        return super(IDEWorkspace2, self).put_ConnectionString(connection)
    def get_ConnectionProperties(self):
        '''Method IDEWorkspace.get_ConnectionProperties (from IDEWorkspace)

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IDEWorkspace2, self).get_ConnectionProperties()
    def putref_ConnectionProperties(self, ConnectionProperties):
        '''Method IDEWorkspace.putref_ConnectionProperties (from IDEWorkspace)

           INPUT
            ConnectionProperties: IPropertySet*'''
        return super(IDEWorkspace2, self).putref_ConnectionProperties(ConnectionProperties)
    def get_Domains(self):
        '''Method IDEWorkspace.get_Domains (from IDEWorkspace)

           OUTPUT
            Domains             : IArray**'''
        return super(IDEWorkspace2, self).get_Domains()
    def putref_Domains(self, Domains):
        '''Method IDEWorkspace.putref_Domains (from IDEWorkspace)

           INPUT
            Domains             : IArray*'''
        return super(IDEWorkspace2, self).putref_Domains(Domains)
    BugfixVersion = property(get_BugfixVersion, None, None)
    ConnectionProperties = property(get_ConnectionProperties, putref_ConnectionProperties, None)
    ConnectionString = property(get_ConnectionString, put_ConnectionString, None)
    Domains = property(get_Domains, putref_Domains, None)
    MajorVersion = property(get_MajorVersion, None, None)
    MinorVersion = property(get_MinorVersion, None, None)
    WorkspaceFactoryProgID = property(get_WorkspaceFactoryProgID, put_WorkspaceFactoryProgID, None)
    WorkspaceType = property(get_WorkspaceType, put_WorkspaceType, None)

class IDEWorkspace3(_esriGeoDatabase.IDEWorkspace3):
    _IID = uuid.UUID('e9d1755a-01af-43d7-9c6c-b10ef3e6b785')

    def __init__(self, *args, **kw):
        super(IDEWorkspace3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CurrentRelease(self):
        '''Method IDEWorkspace3.get_CurrentRelease

           OUTPUT
            isCurrent           : VARIANT_BOOL*'''
        return super(IDEWorkspace3, self).get_CurrentRelease()
    def get_Realm(self):
        '''Method IDEWorkspace3.get_Realm

           OUTPUT
            Realm               : BSTR*'''
        return super(IDEWorkspace3, self).get_Realm()
    def put_Realm(self, Realm):
        '''Method IDEWorkspace3.put_Realm

           INPUT
            Realm               : BSTR'''
        return super(IDEWorkspace3, self).put_Realm(Realm)
    def get_MajorVersion(self):
        '''Method IDEWorkspace2.get_MajorVersion (from IDEWorkspace2)

           OUTPUT
            number              : long*'''
        return super(IDEWorkspace3, self).get_MajorVersion()
    def get_MinorVersion(self):
        '''Method IDEWorkspace2.get_MinorVersion (from IDEWorkspace2)

           OUTPUT
            number              : long*'''
        return super(IDEWorkspace3, self).get_MinorVersion()
    def get_BugfixVersion(self):
        '''Method IDEWorkspace2.get_BugfixVersion (from IDEWorkspace2)

           OUTPUT
            number              : long*'''
        return super(IDEWorkspace3, self).get_BugfixVersion()
    def get_WorkspaceType(self):
        '''Method IDEWorkspace.get_WorkspaceType (from IDEWorkspace)

           OUTPUT
            WorkspaceType       : esriWorkspaceType*'''
        return super(IDEWorkspace3, self).get_WorkspaceType()
    def put_WorkspaceType(self, WorkspaceType):
        '''Method IDEWorkspace.put_WorkspaceType (from IDEWorkspace)

           INPUT
            WorkspaceType       : esriWorkspaceType'''
        return super(IDEWorkspace3, self).put_WorkspaceType(WorkspaceType)
    def get_WorkspaceFactoryProgID(self):
        '''Method IDEWorkspace.get_WorkspaceFactoryProgID (from IDEWorkspace)

           OUTPUT
            progID              : BSTR*'''
        return super(IDEWorkspace3, self).get_WorkspaceFactoryProgID()
    def put_WorkspaceFactoryProgID(self, progID):
        '''Method IDEWorkspace.put_WorkspaceFactoryProgID (from IDEWorkspace)

           INPUT
            progID              : BSTR'''
        return super(IDEWorkspace3, self).put_WorkspaceFactoryProgID(progID)
    def get_ConnectionString(self):
        '''Method IDEWorkspace.get_ConnectionString (from IDEWorkspace)

           OUTPUT
            connection          : BSTR*'''
        return super(IDEWorkspace3, self).get_ConnectionString()
    def put_ConnectionString(self, connection):
        '''Method IDEWorkspace.put_ConnectionString (from IDEWorkspace)

           INPUT
            connection          : BSTR'''
        return super(IDEWorkspace3, self).put_ConnectionString(connection)
    def get_ConnectionProperties(self):
        '''Method IDEWorkspace.get_ConnectionProperties (from IDEWorkspace)

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IDEWorkspace3, self).get_ConnectionProperties()
    def putref_ConnectionProperties(self, ConnectionProperties):
        '''Method IDEWorkspace.putref_ConnectionProperties (from IDEWorkspace)

           INPUT
            ConnectionProperties: IPropertySet*'''
        return super(IDEWorkspace3, self).putref_ConnectionProperties(ConnectionProperties)
    def get_Domains(self):
        '''Method IDEWorkspace.get_Domains (from IDEWorkspace)

           OUTPUT
            Domains             : IArray**'''
        return super(IDEWorkspace3, self).get_Domains()
    def putref_Domains(self, Domains):
        '''Method IDEWorkspace.putref_Domains (from IDEWorkspace)

           INPUT
            Domains             : IArray*'''
        return super(IDEWorkspace3, self).putref_Domains(Domains)
    BugfixVersion = property(get_BugfixVersion, None, None)
    ConnectionProperties = property(get_ConnectionProperties, putref_ConnectionProperties, None)
    ConnectionString = property(get_ConnectionString, put_ConnectionString, None)
    CurrentRelease = property(get_CurrentRelease, None, None)
    Domains = property(get_Domains, putref_Domains, None)
    MajorVersion = property(get_MajorVersion, None, None)
    MinorVersion = property(get_MinorVersion, None, None)
    Realm = property(get_Realm, put_Realm, None)
    WorkspaceFactoryProgID = property(get_WorkspaceFactoryProgID, put_WorkspaceFactoryProgID, None)
    WorkspaceType = property(get_WorkspaceType, put_WorkspaceType, None)

class IWorkspaceDefinition(_esriGeoDatabase.IWorkspaceDefinition):
    _IID = uuid.UUID('4f1d89ce-c93a-4733-9926-7022a7576d2a')

    def __init__(self, *args, **kw):
        super(IWorkspaceDefinition, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_WorkspaceType(self):
        '''Method IWorkspaceDefinition.get_WorkspaceType

           OUTPUT
            WorkspaceType       : esriWorkspaceType*'''
        return super(IWorkspaceDefinition, self).get_WorkspaceType()
    def put_WorkspaceType(self, WorkspaceType):
        '''Method IWorkspaceDefinition.put_WorkspaceType

           INPUT
            WorkspaceType       : esriWorkspaceType'''
        return super(IWorkspaceDefinition, self).put_WorkspaceType(WorkspaceType)
    def get_Version(self):
        '''Method IWorkspaceDefinition.get_Version

           OUTPUT
            workspaceVersion    : BSTR*'''
        return super(IWorkspaceDefinition, self).get_Version()
    def put_Version(self, workspaceVersion):
        '''Method IWorkspaceDefinition.put_Version

           INPUT
            workspaceVersion    : BSTR'''
        return super(IWorkspaceDefinition, self).put_Version(workspaceVersion)
    def get_Domains(self):
        '''Method IWorkspaceDefinition.get_Domains

           OUTPUT
            Domains             : IArray**'''
        return super(IWorkspaceDefinition, self).get_Domains()
    def putref_Domains(self, Domains):
        '''Method IWorkspaceDefinition.putref_Domains

           INPUT
            Domains             : IArray*'''
        return super(IWorkspaceDefinition, self).putref_Domains(Domains)
    def get_Children(self):
        '''Method IWorkspaceDefinition.get_Children

           OUTPUT
            DataElements        : IArray**'''
        return super(IWorkspaceDefinition, self).get_Children()
    def putref_Children(self, DataElements):
        '''Method IWorkspaceDefinition.putref_Children

           INPUT
            DataElements        : IArray*'''
        return super(IWorkspaceDefinition, self).putref_Children(DataElements)
    Children = property(get_Children, putref_Children, None)
    Domains = property(get_Domains, putref_Domains, None)
    Version = property(get_Version, put_Version, None)
    WorkspaceType = property(get_WorkspaceType, put_WorkspaceType, None)

class IDEDataset2(_esriGeoDatabase.IDEDataset2):
    _IID = uuid.UUID('90532b92-762b-4d10-b2a7-c42c852991ad')

    def __init__(self, *args, **kw):
        super(IDEDataset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConfigurationKeyword(self):
        '''Method IDEDataset2.get_ConfigurationKeyword

           OUTPUT
            keyword             : BSTR*'''
        return super(IDEDataset2, self).get_ConfigurationKeyword()
    def put_ConfigurationKeyword(self, keyword):
        '''Method IDEDataset2.put_ConfigurationKeyword

           INPUT
            keyword             : BSTR'''
        return super(IDEDataset2, self).put_ConfigurationKeyword(keyword)
    def get_DatasetType(self):
        '''Method IDEDataset.get_DatasetType (from IDEDataset)

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IDEDataset2, self).get_DatasetType()
    def put_DatasetType(self, Type):
        '''Method IDEDataset.put_DatasetType (from IDEDataset)

           INPUT
            Type                : esriDatasetType'''
        return super(IDEDataset2, self).put_DatasetType(Type)
    def get_Versioned(self):
        '''Method IDEDataset.get_Versioned (from IDEDataset)

           OUTPUT
            Versioned           : VARIANT_BOOL*'''
        return super(IDEDataset2, self).get_Versioned()
    def put_Versioned(self, Versioned):
        '''Method IDEDataset.put_Versioned (from IDEDataset)

           INPUT
            Versioned           : VARIANT_BOOL'''
        return super(IDEDataset2, self).put_Versioned(Versioned)
    def get_DSID(self):
        '''Method IDEDataset.get_DSID (from IDEDataset)

           OUTPUT
            DSID                : long*'''
        return super(IDEDataset2, self).get_DSID()
    def put_DSID(self, DSID):
        '''Method IDEDataset.put_DSID (from IDEDataset)

           INPUT
            DSID                : long'''
        return super(IDEDataset2, self).put_DSID(DSID)
    def get_CanVersion(self):
        '''Method IDEDataset.get_CanVersion (from IDEDataset)

           OUTPUT
            CanVersion          : VARIANT_BOOL*'''
        return super(IDEDataset2, self).get_CanVersion()
    def put_CanVersion(self, CanVersion):
        '''Method IDEDataset.put_CanVersion (from IDEDataset)

           INPUT
            CanVersion          : VARIANT_BOOL'''
        return super(IDEDataset2, self).put_CanVersion(CanVersion)
    CanVersion = property(get_CanVersion, put_CanVersion, None)
    ConfigurationKeyword = property(get_ConfigurationKeyword, put_ConfigurationKeyword, None)
    DSID = property(get_DSID, put_DSID, None)
    DatasetType = property(get_DatasetType, put_DatasetType, None)
    Versioned = property(get_Versioned, put_Versioned, None)

class IDETable(_esriGeoDatabase.IDETable):
    _IID = uuid.UUID('d7fcbb04-8e59-4ffb-9ee5-ec670aa892e0')

    def __init__(self, *args, **kw):
        super(IDETable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HasOID(self):
        '''Method IDETable.get_HasOID

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IDETable, self).get_HasOID()
    def put_HasOID(self, HasOID):
        '''Method IDETable.put_HasOID

           INPUT
            HasOID              : VARIANT_BOOL'''
        return super(IDETable, self).put_HasOID(HasOID)
    def get_OIDFieldName(self):
        '''Method IDETable.get_OIDFieldName

           OUTPUT
            OIDFieldName        : BSTR*'''
        return super(IDETable, self).get_OIDFieldName()
    def put_OIDFieldName(self, OIDFieldName):
        '''Method IDETable.put_OIDFieldName

           INPUT
            OIDFieldName        : BSTR'''
        return super(IDETable, self).put_OIDFieldName(OIDFieldName)
    def get_Indexes(self):
        '''Method IDETable.get_Indexes

           OUTPUT
            Indexes             : IIndexes**'''
        return super(IDETable, self).get_Indexes()
    def putref_Indexes(self, Indexes):
        '''Method IDETable.putref_Indexes

           INPUT
            Indexes             : IIndexes*'''
        return super(IDETable, self).putref_Indexes(Indexes)
    def get_Fields(self):
        '''Method IDETable.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IDETable, self).get_Fields()
    def putref_Fields(self, Fields):
        '''Method IDETable.putref_Fields

           INPUT
            Fields              : IFields*'''
        return super(IDETable, self).putref_Fields(Fields)
    Fields = property(get_Fields, putref_Fields, None)
    HasOID = property(get_HasOID, put_HasOID, None)
    Indexes = property(get_Indexes, putref_Indexes, None)
    OIDFieldName = property(get_OIDFieldName, put_OIDFieldName, None)

class IDEGdbTable(_esriGeoDatabase.IDEGdbTable):
    _IID = uuid.UUID('f35fe0cf-d9fc-4172-81f8-20ce5a553ab1')

    def __init__(self, *args, **kw):
        super(IDEGdbTable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CLSID(self):
        '''Method IDEGdbTable.get_CLSID

           OUTPUT
            ClassID             : BSTR*'''
        return super(IDEGdbTable, self).get_CLSID()
    def put_CLSID(self, ClassID):
        '''Method IDEGdbTable.put_CLSID

           INPUT
            ClassID             : BSTR'''
        return super(IDEGdbTable, self).put_CLSID(ClassID)
    def get_EXTCLSID(self):
        '''Method IDEGdbTable.get_EXTCLSID

           OUTPUT
            ClassID             : BSTR*'''
        return super(IDEGdbTable, self).get_EXTCLSID()
    def put_EXTCLSID(self, ClassID):
        '''Method IDEGdbTable.put_EXTCLSID

           INPUT
            ClassID             : BSTR'''
        return super(IDEGdbTable, self).put_EXTCLSID(ClassID)
    def get_ExtensionProperties(self):
        '''Method IDEGdbTable.get_ExtensionProperties

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IDEGdbTable, self).get_ExtensionProperties()
    def putref_ExtensionProperties(self, PropertySet):
        '''Method IDEGdbTable.putref_ExtensionProperties

           INPUT
            PropertySet         : IPropertySet*'''
        return super(IDEGdbTable, self).putref_ExtensionProperties(PropertySet)
    def get_SubtypeFieldName(self):
        '''Method IDEGdbTable.get_SubtypeFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDEGdbTable, self).get_SubtypeFieldName()
    def put_SubtypeFieldName(self, FieldName):
        '''Method IDEGdbTable.put_SubtypeFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IDEGdbTable, self).put_SubtypeFieldName(FieldName)
    def get_DefaultSubtypeCode(self):
        '''Method IDEGdbTable.get_DefaultSubtypeCode

           OUTPUT
            SubtypeCode         : long*'''
        return super(IDEGdbTable, self).get_DefaultSubtypeCode()
    def put_DefaultSubtypeCode(self, SubtypeCode):
        '''Method IDEGdbTable.put_DefaultSubtypeCode

           INPUT
            SubtypeCode         : long'''
        return super(IDEGdbTable, self).put_DefaultSubtypeCode(SubtypeCode)
    def get_Subtypes(self):
        '''Method IDEGdbTable.get_Subtypes

           OUTPUT
            Subtypes            : IArray**'''
        return super(IDEGdbTable, self).get_Subtypes()
    def putref_Subtypes(self, Subtypes):
        '''Method IDEGdbTable.putref_Subtypes

           INPUT
            Subtypes            : IArray*'''
        return super(IDEGdbTable, self).putref_Subtypes(Subtypes)
    def get_AliasName(self):
        '''Method IDEGdbTable.get_AliasName

           OUTPUT
            AliasName           : BSTR*'''
        return super(IDEGdbTable, self).get_AliasName()
    def put_AliasName(self, AliasName):
        '''Method IDEGdbTable.put_AliasName

           INPUT
            AliasName           : BSTR'''
        return super(IDEGdbTable, self).put_AliasName(AliasName)
    def get_ModelName(self):
        '''Method IDEGdbTable.get_ModelName

           OUTPUT
            ModelName           : BSTR*'''
        return super(IDEGdbTable, self).get_ModelName()
    def put_ModelName(self, ModelName):
        '''Method IDEGdbTable.put_ModelName

           INPUT
            ModelName           : BSTR'''
        return super(IDEGdbTable, self).put_ModelName(ModelName)
    def get_RelationshipClassNames(self):
        '''Method IDEGdbTable.get_RelationshipClassNames

           OUTPUT
            RelationshipClassNames: IStringArray**'''
        return super(IDEGdbTable, self).get_RelationshipClassNames()
    def putref_RelationshipClassNames(self, RelationshipClassNames):
        '''Method IDEGdbTable.putref_RelationshipClassNames

           INPUT
            RelationshipClassNames: IStringArray*'''
        return super(IDEGdbTable, self).putref_RelationshipClassNames(RelationshipClassNames)
    def get_ControllerMemberships(self):
        '''Method IDEGdbTable.get_ControllerMemberships

           OUTPUT
            ControllerMemberships: IArray**'''
        return super(IDEGdbTable, self).get_ControllerMemberships()
    def putref_ControllerMemberships(self, ControllerMemberships):
        '''Method IDEGdbTable.putref_ControllerMemberships

           INPUT
            ControllerMemberships: IArray*'''
        return super(IDEGdbTable, self).putref_ControllerMemberships(ControllerMemberships)
    def get_HasGlobalID(self):
        '''Method IDEGdbTable.get_HasGlobalID

           OUTPUT
            HasGlobalID         : VARIANT_BOOL*'''
        return super(IDEGdbTable, self).get_HasGlobalID()
    def put_HasGlobalID(self, HasGlobalID):
        '''Method IDEGdbTable.put_HasGlobalID

           INPUT
            HasGlobalID         : VARIANT_BOOL'''
        return super(IDEGdbTable, self).put_HasGlobalID(HasGlobalID)
    def get_GlobalIDFieldName(self):
        '''Method IDEGdbTable.get_GlobalIDFieldName

           OUTPUT
            GlobalIDFieldName   : BSTR*'''
        return super(IDEGdbTable, self).get_GlobalIDFieldName()
    def put_GlobalIDFieldName(self, GlobalIDFieldName):
        '''Method IDEGdbTable.put_GlobalIDFieldName

           INPUT
            GlobalIDFieldName   : BSTR'''
        return super(IDEGdbTable, self).put_GlobalIDFieldName(GlobalIDFieldName)
    def get_RasterFieldName(self):
        '''Method IDEGdbTable.get_RasterFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDEGdbTable, self).get_RasterFieldName()
    def put_RasterFieldName(self, FieldName):
        '''Method IDEGdbTable.put_RasterFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IDEGdbTable, self).put_RasterFieldName(FieldName)
    def get_HasOID(self):
        '''Method IDETable.get_HasOID (from IDETable)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IDEGdbTable, self).get_HasOID()
    def put_HasOID(self, HasOID):
        '''Method IDETable.put_HasOID (from IDETable)

           INPUT
            HasOID              : VARIANT_BOOL'''
        return super(IDEGdbTable, self).put_HasOID(HasOID)
    def get_OIDFieldName(self):
        '''Method IDETable.get_OIDFieldName (from IDETable)

           OUTPUT
            OIDFieldName        : BSTR*'''
        return super(IDEGdbTable, self).get_OIDFieldName()
    def put_OIDFieldName(self, OIDFieldName):
        '''Method IDETable.put_OIDFieldName (from IDETable)

           INPUT
            OIDFieldName        : BSTR'''
        return super(IDEGdbTable, self).put_OIDFieldName(OIDFieldName)
    def get_Indexes(self):
        '''Method IDETable.get_Indexes (from IDETable)

           OUTPUT
            Indexes             : IIndexes**'''
        return super(IDEGdbTable, self).get_Indexes()
    def putref_Indexes(self, Indexes):
        '''Method IDETable.putref_Indexes (from IDETable)

           INPUT
            Indexes             : IIndexes*'''
        return super(IDEGdbTable, self).putref_Indexes(Indexes)
    def get_Fields(self):
        '''Method IDETable.get_Fields (from IDETable)

           OUTPUT
            Fields              : IFields**'''
        return super(IDEGdbTable, self).get_Fields()
    def putref_Fields(self, Fields):
        '''Method IDETable.putref_Fields (from IDETable)

           INPUT
            Fields              : IFields*'''
        return super(IDEGdbTable, self).putref_Fields(Fields)
    AliasName = property(get_AliasName, put_AliasName, None)
    CLSID = property(get_CLSID, put_CLSID, None)
    ControllerMemberships = property(get_ControllerMemberships, putref_ControllerMemberships, None)
    DefaultSubtypeCode = property(get_DefaultSubtypeCode, put_DefaultSubtypeCode, None)
    EXTCLSID = property(get_EXTCLSID, put_EXTCLSID, None)
    ExtensionProperties = property(get_ExtensionProperties, putref_ExtensionProperties, None)
    Fields = property(get_Fields, putref_Fields, None)
    GlobalIDFieldName = property(get_GlobalIDFieldName, put_GlobalIDFieldName, None)
    HasGlobalID = property(get_HasGlobalID, put_HasGlobalID, None)
    HasOID = property(get_HasOID, put_HasOID, None)
    Indexes = property(get_Indexes, putref_Indexes, None)
    ModelName = property(get_ModelName, put_ModelName, None)
    OIDFieldName = property(get_OIDFieldName, put_OIDFieldName, None)
    RasterFieldName = property(get_RasterFieldName, put_RasterFieldName, None)
    RelationshipClassNames = property(get_RelationshipClassNames, putref_RelationshipClassNames, None)
    SubtypeFieldName = property(get_SubtypeFieldName, put_SubtypeFieldName, None)
    Subtypes = property(get_Subtypes, putref_Subtypes, None)

class IDEGdbTable2(_esriGeoDatabase.IDEGdbTable2):
    _IID = uuid.UUID('94bcae52-2f1c-416d-835b-b206da11f69b')

    def __init__(self, *args, **kw):
        super(IDEGdbTable2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_VersionedViewName(self):
        '''Method IDEGdbTable2.get_VersionedViewName

           OUTPUT
            VersionedViewName   : BSTR*'''
        return super(IDEGdbTable2, self).get_VersionedViewName()
    def put_VersionedViewName(self, VersionedViewName):
        '''Method IDEGdbTable2.put_VersionedViewName

           INPUT
            VersionedViewName   : BSTR'''
        return super(IDEGdbTable2, self).put_VersionedViewName(VersionedViewName)
    def get_CLSID(self):
        '''Method IDEGdbTable.get_CLSID (from IDEGdbTable)

           OUTPUT
            ClassID             : BSTR*'''
        return super(IDEGdbTable2, self).get_CLSID()
    def put_CLSID(self, ClassID):
        '''Method IDEGdbTable.put_CLSID (from IDEGdbTable)

           INPUT
            ClassID             : BSTR'''
        return super(IDEGdbTable2, self).put_CLSID(ClassID)
    def get_EXTCLSID(self):
        '''Method IDEGdbTable.get_EXTCLSID (from IDEGdbTable)

           OUTPUT
            ClassID             : BSTR*'''
        return super(IDEGdbTable2, self).get_EXTCLSID()
    def put_EXTCLSID(self, ClassID):
        '''Method IDEGdbTable.put_EXTCLSID (from IDEGdbTable)

           INPUT
            ClassID             : BSTR'''
        return super(IDEGdbTable2, self).put_EXTCLSID(ClassID)
    def get_ExtensionProperties(self):
        '''Method IDEGdbTable.get_ExtensionProperties (from IDEGdbTable)

           OUTPUT
            PropertySet         : IPropertySet**'''
        return super(IDEGdbTable2, self).get_ExtensionProperties()
    def putref_ExtensionProperties(self, PropertySet):
        '''Method IDEGdbTable.putref_ExtensionProperties (from IDEGdbTable)

           INPUT
            PropertySet         : IPropertySet*'''
        return super(IDEGdbTable2, self).putref_ExtensionProperties(PropertySet)
    def get_SubtypeFieldName(self):
        '''Method IDEGdbTable.get_SubtypeFieldName (from IDEGdbTable)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDEGdbTable2, self).get_SubtypeFieldName()
    def put_SubtypeFieldName(self, FieldName):
        '''Method IDEGdbTable.put_SubtypeFieldName (from IDEGdbTable)

           INPUT
            FieldName           : BSTR'''
        return super(IDEGdbTable2, self).put_SubtypeFieldName(FieldName)
    def get_DefaultSubtypeCode(self):
        '''Method IDEGdbTable.get_DefaultSubtypeCode (from IDEGdbTable)

           OUTPUT
            SubtypeCode         : long*'''
        return super(IDEGdbTable2, self).get_DefaultSubtypeCode()
    def put_DefaultSubtypeCode(self, SubtypeCode):
        '''Method IDEGdbTable.put_DefaultSubtypeCode (from IDEGdbTable)

           INPUT
            SubtypeCode         : long'''
        return super(IDEGdbTable2, self).put_DefaultSubtypeCode(SubtypeCode)
    def get_Subtypes(self):
        '''Method IDEGdbTable.get_Subtypes (from IDEGdbTable)

           OUTPUT
            Subtypes            : IArray**'''
        return super(IDEGdbTable2, self).get_Subtypes()
    def putref_Subtypes(self, Subtypes):
        '''Method IDEGdbTable.putref_Subtypes (from IDEGdbTable)

           INPUT
            Subtypes            : IArray*'''
        return super(IDEGdbTable2, self).putref_Subtypes(Subtypes)
    def get_AliasName(self):
        '''Method IDEGdbTable.get_AliasName (from IDEGdbTable)

           OUTPUT
            AliasName           : BSTR*'''
        return super(IDEGdbTable2, self).get_AliasName()
    def put_AliasName(self, AliasName):
        '''Method IDEGdbTable.put_AliasName (from IDEGdbTable)

           INPUT
            AliasName           : BSTR'''
        return super(IDEGdbTable2, self).put_AliasName(AliasName)
    def get_ModelName(self):
        '''Method IDEGdbTable.get_ModelName (from IDEGdbTable)

           OUTPUT
            ModelName           : BSTR*'''
        return super(IDEGdbTable2, self).get_ModelName()
    def put_ModelName(self, ModelName):
        '''Method IDEGdbTable.put_ModelName (from IDEGdbTable)

           INPUT
            ModelName           : BSTR'''
        return super(IDEGdbTable2, self).put_ModelName(ModelName)
    def get_RelationshipClassNames(self):
        '''Method IDEGdbTable.get_RelationshipClassNames (from IDEGdbTable)

           OUTPUT
            RelationshipClassNames: IStringArray**'''
        return super(IDEGdbTable2, self).get_RelationshipClassNames()
    def putref_RelationshipClassNames(self, RelationshipClassNames):
        '''Method IDEGdbTable.putref_RelationshipClassNames (from IDEGdbTable)

           INPUT
            RelationshipClassNames: IStringArray*'''
        return super(IDEGdbTable2, self).putref_RelationshipClassNames(RelationshipClassNames)
    def get_ControllerMemberships(self):
        '''Method IDEGdbTable.get_ControllerMemberships (from IDEGdbTable)

           OUTPUT
            ControllerMemberships: IArray**'''
        return super(IDEGdbTable2, self).get_ControllerMemberships()
    def putref_ControllerMemberships(self, ControllerMemberships):
        '''Method IDEGdbTable.putref_ControllerMemberships (from IDEGdbTable)

           INPUT
            ControllerMemberships: IArray*'''
        return super(IDEGdbTable2, self).putref_ControllerMemberships(ControllerMemberships)
    def get_HasGlobalID(self):
        '''Method IDEGdbTable.get_HasGlobalID (from IDEGdbTable)

           OUTPUT
            HasGlobalID         : VARIANT_BOOL*'''
        return super(IDEGdbTable2, self).get_HasGlobalID()
    def put_HasGlobalID(self, HasGlobalID):
        '''Method IDEGdbTable.put_HasGlobalID (from IDEGdbTable)

           INPUT
            HasGlobalID         : VARIANT_BOOL'''
        return super(IDEGdbTable2, self).put_HasGlobalID(HasGlobalID)
    def get_GlobalIDFieldName(self):
        '''Method IDEGdbTable.get_GlobalIDFieldName (from IDEGdbTable)

           OUTPUT
            GlobalIDFieldName   : BSTR*'''
        return super(IDEGdbTable2, self).get_GlobalIDFieldName()
    def put_GlobalIDFieldName(self, GlobalIDFieldName):
        '''Method IDEGdbTable.put_GlobalIDFieldName (from IDEGdbTable)

           INPUT
            GlobalIDFieldName   : BSTR'''
        return super(IDEGdbTable2, self).put_GlobalIDFieldName(GlobalIDFieldName)
    def get_RasterFieldName(self):
        '''Method IDEGdbTable.get_RasterFieldName (from IDEGdbTable)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDEGdbTable2, self).get_RasterFieldName()
    def put_RasterFieldName(self, FieldName):
        '''Method IDEGdbTable.put_RasterFieldName (from IDEGdbTable)

           INPUT
            FieldName           : BSTR'''
        return super(IDEGdbTable2, self).put_RasterFieldName(FieldName)
    def get_HasOID(self):
        '''Method IDETable.get_HasOID (from IDETable)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IDEGdbTable2, self).get_HasOID()
    def put_HasOID(self, HasOID):
        '''Method IDETable.put_HasOID (from IDETable)

           INPUT
            HasOID              : VARIANT_BOOL'''
        return super(IDEGdbTable2, self).put_HasOID(HasOID)
    def get_OIDFieldName(self):
        '''Method IDETable.get_OIDFieldName (from IDETable)

           OUTPUT
            OIDFieldName        : BSTR*'''
        return super(IDEGdbTable2, self).get_OIDFieldName()
    def put_OIDFieldName(self, OIDFieldName):
        '''Method IDETable.put_OIDFieldName (from IDETable)

           INPUT
            OIDFieldName        : BSTR'''
        return super(IDEGdbTable2, self).put_OIDFieldName(OIDFieldName)
    def get_Indexes(self):
        '''Method IDETable.get_Indexes (from IDETable)

           OUTPUT
            Indexes             : IIndexes**'''
        return super(IDEGdbTable2, self).get_Indexes()
    def putref_Indexes(self, Indexes):
        '''Method IDETable.putref_Indexes (from IDETable)

           INPUT
            Indexes             : IIndexes*'''
        return super(IDEGdbTable2, self).putref_Indexes(Indexes)
    def get_Fields(self):
        '''Method IDETable.get_Fields (from IDETable)

           OUTPUT
            Fields              : IFields**'''
        return super(IDEGdbTable2, self).get_Fields()
    def putref_Fields(self, Fields):
        '''Method IDETable.putref_Fields (from IDETable)

           INPUT
            Fields              : IFields*'''
        return super(IDEGdbTable2, self).putref_Fields(Fields)
    AliasName = property(get_AliasName, put_AliasName, None)
    CLSID = property(get_CLSID, put_CLSID, None)
    ControllerMemberships = property(get_ControllerMemberships, putref_ControllerMemberships, None)
    DefaultSubtypeCode = property(get_DefaultSubtypeCode, put_DefaultSubtypeCode, None)
    EXTCLSID = property(get_EXTCLSID, put_EXTCLSID, None)
    ExtensionProperties = property(get_ExtensionProperties, putref_ExtensionProperties, None)
    Fields = property(get_Fields, putref_Fields, None)
    GlobalIDFieldName = property(get_GlobalIDFieldName, put_GlobalIDFieldName, None)
    HasGlobalID = property(get_HasGlobalID, put_HasGlobalID, None)
    HasOID = property(get_HasOID, put_HasOID, None)
    Indexes = property(get_Indexes, putref_Indexes, None)
    ModelName = property(get_ModelName, put_ModelName, None)
    OIDFieldName = property(get_OIDFieldName, put_OIDFieldName, None)
    RasterFieldName = property(get_RasterFieldName, put_RasterFieldName, None)
    RelationshipClassNames = property(get_RelationshipClassNames, putref_RelationshipClassNames, None)
    SubtypeFieldName = property(get_SubtypeFieldName, put_SubtypeFieldName, None)
    Subtypes = property(get_Subtypes, putref_Subtypes, None)
    VersionedViewName = property(get_VersionedViewName, put_VersionedViewName, None)

class IDEEditorTracking(_esriGeoDatabase.IDEEditorTracking):
    _IID = uuid.UUID('e80995a9-ff03-43e6-a4a7-dc263e681565')

    def __init__(self, *args, **kw):
        super(IDEEditorTracking, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EditorTrackingEnabled(self):
        '''Method IDEEditorTracking.get_EditorTrackingEnabled

           OUTPUT
            isEditorTrackingEnabled: VARIANT_BOOL*'''
        return super(IDEEditorTracking, self).get_EditorTrackingEnabled()
    def put_EditorTrackingEnabled(self, isEditorTrackingEnabled):
        '''Method IDEEditorTracking.put_EditorTrackingEnabled

           INPUT
            isEditorTrackingEnabled: VARIANT_BOOL'''
        return super(IDEEditorTracking, self).put_EditorTrackingEnabled(isEditorTrackingEnabled)
    def get_CreatorFieldName(self):
        '''Method IDEEditorTracking.get_CreatorFieldName

           OUTPUT
            CreatorFieldName    : BSTR*'''
        return super(IDEEditorTracking, self).get_CreatorFieldName()
    def put_CreatorFieldName(self, CreatorFieldName):
        '''Method IDEEditorTracking.put_CreatorFieldName

           INPUT
            CreatorFieldName    : BSTR'''
        return super(IDEEditorTracking, self).put_CreatorFieldName(CreatorFieldName)
    def get_CreatedAtFieldName(self):
        '''Method IDEEditorTracking.get_CreatedAtFieldName

           OUTPUT
            CreatedAtFieldName  : BSTR*'''
        return super(IDEEditorTracking, self).get_CreatedAtFieldName()
    def put_CreatedAtFieldName(self, CreatedAtFieldName):
        '''Method IDEEditorTracking.put_CreatedAtFieldName

           INPUT
            CreatedAtFieldName  : BSTR'''
        return super(IDEEditorTracking, self).put_CreatedAtFieldName(CreatedAtFieldName)
    def get_EditorFieldName(self):
        '''Method IDEEditorTracking.get_EditorFieldName

           OUTPUT
            EditorFieldName     : BSTR*'''
        return super(IDEEditorTracking, self).get_EditorFieldName()
    def put_EditorFieldName(self, EditorFieldName):
        '''Method IDEEditorTracking.put_EditorFieldName

           INPUT
            EditorFieldName     : BSTR'''
        return super(IDEEditorTracking, self).put_EditorFieldName(EditorFieldName)
    def get_EditedAtFieldName(self):
        '''Method IDEEditorTracking.get_EditedAtFieldName

           OUTPUT
            EditedAtFieldName   : BSTR*'''
        return super(IDEEditorTracking, self).get_EditedAtFieldName()
    def put_EditedAtFieldName(self, EditedAtFieldName):
        '''Method IDEEditorTracking.put_EditedAtFieldName

           INPUT
            EditedAtFieldName   : BSTR'''
        return super(IDEEditorTracking, self).put_EditedAtFieldName(EditedAtFieldName)
    def get_IsTimeInUTC(self):
        '''Method IDEEditorTracking.get_IsTimeInUTC

           OUTPUT
            IsTimeInUTC         : VARIANT_BOOL*'''
        return super(IDEEditorTracking, self).get_IsTimeInUTC()
    def put_IsTimeInUTC(self, IsTimeInUTC):
        '''Method IDEEditorTracking.put_IsTimeInUTC

           INPUT
            IsTimeInUTC         : VARIANT_BOOL'''
        return super(IDEEditorTracking, self).put_IsTimeInUTC(IsTimeInUTC)
    CreatedAtFieldName = property(get_CreatedAtFieldName, put_CreatedAtFieldName, None)
    CreatorFieldName = property(get_CreatorFieldName, put_CreatorFieldName, None)
    EditedAtFieldName = property(get_EditedAtFieldName, put_EditedAtFieldName, None)
    EditorFieldName = property(get_EditorFieldName, put_EditorFieldName, None)
    EditorTrackingEnabled = property(get_EditorTrackingEnabled, put_EditorTrackingEnabled, None)
    IsTimeInUTC = property(get_IsTimeInUTC, put_IsTimeInUTC, None)

class IDEFeatureClass(_esriGeoDatabase.IDEFeatureClass):
    _IID = uuid.UUID('2c944211-d17c-45f4-89da-ab37e95e6411')

    def __init__(self, *args, **kw):
        super(IDEFeatureClass, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShapeType(self):
        '''Method IDEFeatureClass.get_ShapeType

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(IDEFeatureClass, self).get_ShapeType()
    def put_ShapeType(self, GeometryType):
        '''Method IDEFeatureClass.put_ShapeType

           INPUT
            GeometryType        : esriGeometryType'''
        return super(IDEFeatureClass, self).put_ShapeType(GeometryType)
    def get_FeatureType(self):
        '''Method IDEFeatureClass.get_FeatureType

           OUTPUT
            FeatureType         : esriFeatureType*'''
        return super(IDEFeatureClass, self).get_FeatureType()
    def put_FeatureType(self, FeatureType):
        '''Method IDEFeatureClass.put_FeatureType

           INPUT
            FeatureType         : esriFeatureType'''
        return super(IDEFeatureClass, self).put_FeatureType(FeatureType)
    def get_ShapeFieldName(self):
        '''Method IDEFeatureClass.get_ShapeFieldName

           OUTPUT
            ShapeFieldName      : BSTR*'''
        return super(IDEFeatureClass, self).get_ShapeFieldName()
    def put_ShapeFieldName(self, ShapeFieldName):
        '''Method IDEFeatureClass.put_ShapeFieldName

           INPUT
            ShapeFieldName      : BSTR'''
        return super(IDEFeatureClass, self).put_ShapeFieldName(ShapeFieldName)
    def get_HasSpatialIndex(self):
        '''Method IDEFeatureClass.get_HasSpatialIndex

           OUTPUT
            HasSpatialIndex     : VARIANT_BOOL*'''
        return super(IDEFeatureClass, self).get_HasSpatialIndex()
    def put_HasSpatialIndex(self, HasSpatialIndex):
        '''Method IDEFeatureClass.put_HasSpatialIndex

           INPUT
            HasSpatialIndex     : VARIANT_BOOL'''
        return super(IDEFeatureClass, self).put_HasSpatialIndex(HasSpatialIndex)
    def get_HasZ(self):
        '''Method IDEFeatureClass.get_HasZ

           OUTPUT
            HasZ                : VARIANT_BOOL*'''
        return super(IDEFeatureClass, self).get_HasZ()
    def put_HasZ(self, HasZ):
        '''Method IDEFeatureClass.put_HasZ

           INPUT
            HasZ                : VARIANT_BOOL'''
        return super(IDEFeatureClass, self).put_HasZ(HasZ)
    def get_HasM(self):
        '''Method IDEFeatureClass.get_HasM

           OUTPUT
            HasM                : VARIANT_BOOL*'''
        return super(IDEFeatureClass, self).get_HasM()
    def put_HasM(self, HasM):
        '''Method IDEFeatureClass.put_HasM

           INPUT
            HasM                : VARIANT_BOOL'''
        return super(IDEFeatureClass, self).put_HasM(HasM)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    HasM = property(get_HasM, put_HasM, None)
    HasSpatialIndex = property(get_HasSpatialIndex, put_HasSpatialIndex, None)
    HasZ = property(get_HasZ, put_HasZ, None)
    ShapeFieldName = property(get_ShapeFieldName, put_ShapeFieldName, None)
    ShapeType = property(get_ShapeType, put_ShapeType, None)

class IDEGdbFeatureClass(_esriGeoDatabase.IDEGdbFeatureClass):
    _IID = uuid.UUID('1ffd96a0-1158-4fb1-9081-1e8f0f801761')

    def __init__(self, *args, **kw):
        super(IDEGdbFeatureClass, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AreaFieldName(self):
        '''Method IDEGdbFeatureClass.get_AreaFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDEGdbFeatureClass, self).get_AreaFieldName()
    def put_AreaFieldName(self, FieldName):
        '''Method IDEGdbFeatureClass.put_AreaFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IDEGdbFeatureClass, self).put_AreaFieldName(FieldName)
    def get_LengthFieldName(self):
        '''Method IDEGdbFeatureClass.get_LengthFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDEGdbFeatureClass, self).get_LengthFieldName()
    def put_LengthFieldName(self, FieldName):
        '''Method IDEGdbFeatureClass.put_LengthFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IDEGdbFeatureClass, self).put_LengthFieldName(FieldName)
    def get_ShapeType(self):
        '''Method IDEFeatureClass.get_ShapeType (from IDEFeatureClass)

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(IDEGdbFeatureClass, self).get_ShapeType()
    def put_ShapeType(self, GeometryType):
        '''Method IDEFeatureClass.put_ShapeType (from IDEFeatureClass)

           INPUT
            GeometryType        : esriGeometryType'''
        return super(IDEGdbFeatureClass, self).put_ShapeType(GeometryType)
    def get_FeatureType(self):
        '''Method IDEFeatureClass.get_FeatureType (from IDEFeatureClass)

           OUTPUT
            FeatureType         : esriFeatureType*'''
        return super(IDEGdbFeatureClass, self).get_FeatureType()
    def put_FeatureType(self, FeatureType):
        '''Method IDEFeatureClass.put_FeatureType (from IDEFeatureClass)

           INPUT
            FeatureType         : esriFeatureType'''
        return super(IDEGdbFeatureClass, self).put_FeatureType(FeatureType)
    def get_ShapeFieldName(self):
        '''Method IDEFeatureClass.get_ShapeFieldName (from IDEFeatureClass)

           OUTPUT
            ShapeFieldName      : BSTR*'''
        return super(IDEGdbFeatureClass, self).get_ShapeFieldName()
    def put_ShapeFieldName(self, ShapeFieldName):
        '''Method IDEFeatureClass.put_ShapeFieldName (from IDEFeatureClass)

           INPUT
            ShapeFieldName      : BSTR'''
        return super(IDEGdbFeatureClass, self).put_ShapeFieldName(ShapeFieldName)
    def get_HasSpatialIndex(self):
        '''Method IDEFeatureClass.get_HasSpatialIndex (from IDEFeatureClass)

           OUTPUT
            HasSpatialIndex     : VARIANT_BOOL*'''
        return super(IDEGdbFeatureClass, self).get_HasSpatialIndex()
    def put_HasSpatialIndex(self, HasSpatialIndex):
        '''Method IDEFeatureClass.put_HasSpatialIndex (from IDEFeatureClass)

           INPUT
            HasSpatialIndex     : VARIANT_BOOL'''
        return super(IDEGdbFeatureClass, self).put_HasSpatialIndex(HasSpatialIndex)
    def get_HasZ(self):
        '''Method IDEFeatureClass.get_HasZ (from IDEFeatureClass)

           OUTPUT
            HasZ                : VARIANT_BOOL*'''
        return super(IDEGdbFeatureClass, self).get_HasZ()
    def put_HasZ(self, HasZ):
        '''Method IDEFeatureClass.put_HasZ (from IDEFeatureClass)

           INPUT
            HasZ                : VARIANT_BOOL'''
        return super(IDEGdbFeatureClass, self).put_HasZ(HasZ)
    def get_HasM(self):
        '''Method IDEFeatureClass.get_HasM (from IDEFeatureClass)

           OUTPUT
            HasM                : VARIANT_BOOL*'''
        return super(IDEGdbFeatureClass, self).get_HasM()
    def put_HasM(self, HasM):
        '''Method IDEFeatureClass.put_HasM (from IDEFeatureClass)

           INPUT
            HasM                : VARIANT_BOOL'''
        return super(IDEGdbFeatureClass, self).put_HasM(HasM)
    AreaFieldName = property(get_AreaFieldName, put_AreaFieldName, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    HasM = property(get_HasM, put_HasM, None)
    HasSpatialIndex = property(get_HasSpatialIndex, put_HasSpatialIndex, None)
    HasZ = property(get_HasZ, put_HasZ, None)
    LengthFieldName = property(get_LengthFieldName, put_LengthFieldName, None)
    ShapeFieldName = property(get_ShapeFieldName, put_ShapeFieldName, None)
    ShapeType = property(get_ShapeType, put_ShapeType, None)

class IDERasterCatalog(_esriGeoDatabase.IDERasterCatalog):
    _IID = uuid.UUID('8f9c9dc8-9ab1-49ed-b1cc-c6fbfde09567')

    def __init__(self, *args, **kw):
        super(IDERasterCatalog, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterFieldName(self):
        '''Method IDERasterCatalog.get_RasterFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDERasterCatalog, self).get_RasterFieldName()
    def put_RasterFieldName(self, FieldName):
        '''Method IDERasterCatalog.put_RasterFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IDERasterCatalog, self).put_RasterFieldName(FieldName)
    RasterFieldName = property(get_RasterFieldName, put_RasterFieldName, None)

class IGPTopologyMembership(_esriGeoDatabase.IGPTopologyMembership):
    _IID = uuid.UUID('e8d97cae-9362-4e48-aa85-aba1d8fd628d')

    def __init__(self, *args, **kw):
        super(IGPTopologyMembership, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TopologyName(self):
        '''Method IGPTopologyMembership.get_TopologyName

           OUTPUT
            TopologyName        : BSTR*'''
        return super(IGPTopologyMembership, self).get_TopologyName()
    def put_TopologyName(self, TopologyName):
        '''Method IGPTopologyMembership.put_TopologyName

           INPUT
            TopologyName        : BSTR'''
        return super(IGPTopologyMembership, self).put_TopologyName(TopologyName)
    def get_Weight(self):
        '''Method IGPTopologyMembership.get_Weight

           OUTPUT
            Weight              : double*'''
        return super(IGPTopologyMembership, self).get_Weight()
    def put_Weight(self, Weight):
        '''Method IGPTopologyMembership.put_Weight

           INPUT
            Weight              : double'''
        return super(IGPTopologyMembership, self).put_Weight(Weight)
    def get_XYRank(self):
        '''Method IGPTopologyMembership.get_XYRank

           OUTPUT
            XYRank              : long*'''
        return super(IGPTopologyMembership, self).get_XYRank()
    def put_XYRank(self, XYRank):
        '''Method IGPTopologyMembership.put_XYRank

           INPUT
            XYRank              : long'''
        return super(IGPTopologyMembership, self).put_XYRank(XYRank)
    def get_ZRank(self):
        '''Method IGPTopologyMembership.get_ZRank

           OUTPUT
            ZRank               : long*'''
        return super(IGPTopologyMembership, self).get_ZRank()
    def put_ZRank(self, ZRank):
        '''Method IGPTopologyMembership.put_ZRank

           INPUT
            ZRank               : long'''
        return super(IGPTopologyMembership, self).put_ZRank(ZRank)
    def get_EventNotificationOnValidate(self):
        '''Method IGPTopologyMembership.get_EventNotificationOnValidate

           OUTPUT
            eventNotification   : VARIANT_BOOL*'''
        return super(IGPTopologyMembership, self).get_EventNotificationOnValidate()
    def put_EventNotificationOnValidate(self, eventNotification):
        '''Method IGPTopologyMembership.put_EventNotificationOnValidate

           INPUT
            eventNotification   : VARIANT_BOOL'''
        return super(IGPTopologyMembership, self).put_EventNotificationOnValidate(eventNotification)
    EventNotificationOnValidate = property(get_EventNotificationOnValidate, put_EventNotificationOnValidate, None)
    TopologyName = property(get_TopologyName, put_TopologyName, None)
    Weight = property(get_Weight, put_Weight, None)
    XYRank = property(get_XYRank, put_XYRank, None)
    ZRank = property(get_ZRank, put_ZRank, None)

class IGPGeometricNetworkMembership(_esriGeoDatabase.IGPGeometricNetworkMembership):
    _IID = uuid.UUID('d012d66d-49f4-409e-bf48-1da710a8d414')

    def __init__(self, *args, **kw):
        super(IGPGeometricNetworkMembership, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GeometricNetworkName(self):
        '''Method IGPGeometricNetworkMembership.get_GeometricNetworkName

           OUTPUT
            GeometricNetworkName: BSTR*'''
        return super(IGPGeometricNetworkMembership, self).get_GeometricNetworkName()
    def put_GeometricNetworkName(self, GeometricNetworkName):
        '''Method IGPGeometricNetworkMembership.put_GeometricNetworkName

           INPUT
            GeometricNetworkName: BSTR'''
        return super(IGPGeometricNetworkMembership, self).put_GeometricNetworkName(GeometricNetworkName)
    def get_NetworkAncillaryRole(self):
        '''Method IGPGeometricNetworkMembership.get_NetworkAncillaryRole

           OUTPUT
            Role                : esriNetworkClassAncillaryRole*'''
        return super(IGPGeometricNetworkMembership, self).get_NetworkAncillaryRole()
    def put_NetworkAncillaryRole(self, Role):
        '''Method IGPGeometricNetworkMembership.put_NetworkAncillaryRole

           INPUT
            Role                : esriNetworkClassAncillaryRole'''
        return super(IGPGeometricNetworkMembership, self).put_NetworkAncillaryRole(Role)
    def get_EnabledFieldName(self):
        '''Method IGPGeometricNetworkMembership.get_EnabledFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IGPGeometricNetworkMembership, self).get_EnabledFieldName()
    def put_EnabledFieldName(self, FieldName):
        '''Method IGPGeometricNetworkMembership.put_EnabledFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IGPGeometricNetworkMembership, self).put_EnabledFieldName(FieldName)
    def get_AncillaryRoleFieldName(self):
        '''Method IGPGeometricNetworkMembership.get_AncillaryRoleFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IGPGeometricNetworkMembership, self).get_AncillaryRoleFieldName()
    def put_AncillaryRoleFieldName(self, FieldName):
        '''Method IGPGeometricNetworkMembership.put_AncillaryRoleFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IGPGeometricNetworkMembership, self).put_AncillaryRoleFieldName(FieldName)
    AncillaryRoleFieldName = property(get_AncillaryRoleFieldName, put_AncillaryRoleFieldName, None)
    EnabledFieldName = property(get_EnabledFieldName, put_EnabledFieldName, None)
    GeometricNetworkName = property(get_GeometricNetworkName, put_GeometricNetworkName, None)
    NetworkAncillaryRole = property(get_NetworkAncillaryRole, put_NetworkAncillaryRole, None)

class IDERelationshipClassEx(_esriGeoDatabase.IDERelationshipClassEx):
    _IID = uuid.UUID('da5f6014-afe5-4f1b-9e9c-ba117cd4e594')

    def __init__(self, *args, **kw):
        super(IDERelationshipClassEx, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_OriginClassNames(self):
        '''Method IDERelationshipClassEx.get_OriginClassNames

           OUTPUT
            OriginClassNames    : IStringArray**'''
        return super(IDERelationshipClassEx, self).get_OriginClassNames()
    def putref_OriginClassNames(self, OriginClassNames):
        '''Method IDERelationshipClassEx.putref_OriginClassNames

           INPUT
            OriginClassNames    : IStringArray*'''
        return super(IDERelationshipClassEx, self).putref_OriginClassNames(OriginClassNames)
    def get_DestinationClassNames(self):
        '''Method IDERelationshipClassEx.get_DestinationClassNames

           OUTPUT
            DestinationClassNames: IStringArray**'''
        return super(IDERelationshipClassEx, self).get_DestinationClassNames()
    def putref_DestinationClassNames(self, DestinationClassNames):
        '''Method IDERelationshipClassEx.putref_DestinationClassNames

           INPUT
            DestinationClassNames: IStringArray*'''
        return super(IDERelationshipClassEx, self).putref_DestinationClassNames(DestinationClassNames)
    def get_OriginClassKeys(self):
        '''Method IDERelationshipClassEx.get_OriginClassKeys

           OUTPUT
            OriginClassKeys     : IArray**'''
        return super(IDERelationshipClassEx, self).get_OriginClassKeys()
    def putref_OriginClassKeys(self, OriginClassKeys):
        '''Method IDERelationshipClassEx.putref_OriginClassKeys

           INPUT
            OriginClassKeys     : IArray*'''
        return super(IDERelationshipClassEx, self).putref_OriginClassKeys(OriginClassKeys)
    def get_DestinationClassKeys(self):
        '''Method IDERelationshipClassEx.get_DestinationClassKeys

           OUTPUT
            DestinationClassNames: IArray**'''
        return super(IDERelationshipClassEx, self).get_DestinationClassKeys()
    def putref_DestinationClassKeys(self, DestinationClassNames):
        '''Method IDERelationshipClassEx.putref_DestinationClassKeys

           INPUT
            DestinationClassNames: IArray*'''
        return super(IDERelationshipClassEx, self).putref_DestinationClassKeys(DestinationClassNames)
    def get_KeyType(self):
        '''Method IDERelationshipClassEx.get_KeyType

           OUTPUT
            KeyType             : esriRelKeyType*'''
        return super(IDERelationshipClassEx, self).get_KeyType()
    def put_KeyType(self, KeyType):
        '''Method IDERelationshipClassEx.put_KeyType

           INPUT
            KeyType             : esriRelKeyType'''
        return super(IDERelationshipClassEx, self).put_KeyType(KeyType)
    def get_ClassKey(self):
        '''Method IDERelationshipClassEx.get_ClassKey

           OUTPUT
            ClassKey            : esriRelClassKey*'''
        return super(IDERelationshipClassEx, self).get_ClassKey()
    def put_ClassKey(self, ClassKey):
        '''Method IDERelationshipClassEx.put_ClassKey

           INPUT
            ClassKey            : esriRelClassKey'''
        return super(IDERelationshipClassEx, self).put_ClassKey(ClassKey)
    def get_IsReflexive(self):
        '''Method IDERelationshipClassEx.get_IsReflexive

           OUTPUT
            reflexive           : VARIANT_BOOL*'''
        return super(IDERelationshipClassEx, self).get_IsReflexive()
    def put_IsReflexive(self, reflexive):
        '''Method IDERelationshipClassEx.put_IsReflexive

           INPUT
            reflexive           : VARIANT_BOOL'''
        return super(IDERelationshipClassEx, self).put_IsReflexive(reflexive)
    def get_ForwardPathLabel(self):
        '''Method IDERelationshipClassEx.get_ForwardPathLabel

           OUTPUT
            label               : BSTR*'''
        return super(IDERelationshipClassEx, self).get_ForwardPathLabel()
    def put_ForwardPathLabel(self, label):
        '''Method IDERelationshipClassEx.put_ForwardPathLabel

           INPUT
            label               : BSTR'''
        return super(IDERelationshipClassEx, self).put_ForwardPathLabel(label)
    def get_BackwardPathLabel(self):
        '''Method IDERelationshipClassEx.get_BackwardPathLabel

           OUTPUT
            label               : BSTR*'''
        return super(IDERelationshipClassEx, self).get_BackwardPathLabel()
    def put_BackwardPathLabel(self, label):
        '''Method IDERelationshipClassEx.put_BackwardPathLabel

           INPUT
            label               : BSTR'''
        return super(IDERelationshipClassEx, self).put_BackwardPathLabel(label)
    def get_Cardinality(self):
        '''Method IDERelationshipClassEx.get_Cardinality

           OUTPUT
            relCardinality      : esriRelCardinality*'''
        return super(IDERelationshipClassEx, self).get_Cardinality()
    def put_Cardinality(self, relCardinality):
        '''Method IDERelationshipClassEx.put_Cardinality

           INPUT
            relCardinality      : esriRelCardinality'''
        return super(IDERelationshipClassEx, self).put_Cardinality(relCardinality)
    def get_Notification(self):
        '''Method IDERelationshipClassEx.get_Notification

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IDERelationshipClassEx, self).get_Notification()
    def put_Notification(self, Notification):
        '''Method IDERelationshipClassEx.put_Notification

           INPUT
            Notification        : esriRelNotification'''
        return super(IDERelationshipClassEx, self).put_Notification(Notification)
    def get_IsAttributed(self):
        '''Method IDERelationshipClassEx.get_IsAttributed

           OUTPUT
            attributed          : VARIANT_BOOL*'''
        return super(IDERelationshipClassEx, self).get_IsAttributed()
    def put_IsAttributed(self, attributed):
        '''Method IDERelationshipClassEx.put_IsAttributed

           INPUT
            attributed          : VARIANT_BOOL'''
        return super(IDERelationshipClassEx, self).put_IsAttributed(attributed)
    def get_IsComposite(self):
        '''Method IDERelationshipClassEx.get_IsComposite

           OUTPUT
            composite           : VARIANT_BOOL*'''
        return super(IDERelationshipClassEx, self).get_IsComposite()
    def put_IsComposite(self, composite):
        '''Method IDERelationshipClassEx.put_IsComposite

           INPUT
            composite           : VARIANT_BOOL'''
        return super(IDERelationshipClassEx, self).put_IsComposite(composite)
    def get_RelationshipRules(self):
        '''Method IDERelationshipClassEx.get_RelationshipRules

           OUTPUT
            Rules               : IArray**'''
        return super(IDERelationshipClassEx, self).get_RelationshipRules()
    def putref_RelationshipRules(self, Rules):
        '''Method IDERelationshipClassEx.putref_RelationshipRules

           INPUT
            Rules               : IArray*'''
        return super(IDERelationshipClassEx, self).putref_RelationshipRules(Rules)
    BackwardPathLabel = property(get_BackwardPathLabel, put_BackwardPathLabel, None)
    Cardinality = property(get_Cardinality, put_Cardinality, None)
    ClassKey = property(get_ClassKey, put_ClassKey, None)
    DestinationClassKeys = property(get_DestinationClassKeys, putref_DestinationClassKeys, None)
    DestinationClassNames = property(get_DestinationClassNames, putref_DestinationClassNames, None)
    ForwardPathLabel = property(get_ForwardPathLabel, put_ForwardPathLabel, None)
    IsAttributed = property(get_IsAttributed, put_IsAttributed, None)
    IsComposite = property(get_IsComposite, put_IsComposite, None)
    IsReflexive = property(get_IsReflexive, put_IsReflexive, None)
    KeyType = property(get_KeyType, put_KeyType, None)
    Notification = property(get_Notification, put_Notification, None)
    OriginClassKeys = property(get_OriginClassKeys, putref_OriginClassKeys, None)
    OriginClassNames = property(get_OriginClassNames, putref_OriginClassNames, None)
    RelationshipRules = property(get_RelationshipRules, putref_RelationshipRules, None)

class IDERelationshipClassEx2(_esriGeoDatabase.IDERelationshipClassEx2):
    _IID = uuid.UUID('aed8f280-fe0e-4b19-9c2a-1a227cd72eec')

    def __init__(self, *args, **kw):
        super(IDERelationshipClassEx2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsAttachmentRelationship(self):
        '''Method IDERelationshipClassEx2.get_IsAttachmentRelationship

           OUTPUT
            Attachment          : VARIANT_BOOL*'''
        return super(IDERelationshipClassEx2, self).get_IsAttachmentRelationship()
    def put_IsAttachmentRelationship(self, Attachment):
        '''Method IDERelationshipClassEx2.put_IsAttachmentRelationship

           INPUT
            Attachment          : VARIANT_BOOL'''
        return super(IDERelationshipClassEx2, self).put_IsAttachmentRelationship(Attachment)
    def get_OriginClassNames(self):
        '''Method IDERelationshipClassEx.get_OriginClassNames (from IDERelationshipClassEx)

           OUTPUT
            OriginClassNames    : IStringArray**'''
        return super(IDERelationshipClassEx2, self).get_OriginClassNames()
    def putref_OriginClassNames(self, OriginClassNames):
        '''Method IDERelationshipClassEx.putref_OriginClassNames (from IDERelationshipClassEx)

           INPUT
            OriginClassNames    : IStringArray*'''
        return super(IDERelationshipClassEx2, self).putref_OriginClassNames(OriginClassNames)
    def get_DestinationClassNames(self):
        '''Method IDERelationshipClassEx.get_DestinationClassNames (from IDERelationshipClassEx)

           OUTPUT
            DestinationClassNames: IStringArray**'''
        return super(IDERelationshipClassEx2, self).get_DestinationClassNames()
    def putref_DestinationClassNames(self, DestinationClassNames):
        '''Method IDERelationshipClassEx.putref_DestinationClassNames (from IDERelationshipClassEx)

           INPUT
            DestinationClassNames: IStringArray*'''
        return super(IDERelationshipClassEx2, self).putref_DestinationClassNames(DestinationClassNames)
    def get_OriginClassKeys(self):
        '''Method IDERelationshipClassEx.get_OriginClassKeys (from IDERelationshipClassEx)

           OUTPUT
            OriginClassKeys     : IArray**'''
        return super(IDERelationshipClassEx2, self).get_OriginClassKeys()
    def putref_OriginClassKeys(self, OriginClassKeys):
        '''Method IDERelationshipClassEx.putref_OriginClassKeys (from IDERelationshipClassEx)

           INPUT
            OriginClassKeys     : IArray*'''
        return super(IDERelationshipClassEx2, self).putref_OriginClassKeys(OriginClassKeys)
    def get_DestinationClassKeys(self):
        '''Method IDERelationshipClassEx.get_DestinationClassKeys (from IDERelationshipClassEx)

           OUTPUT
            DestinationClassNames: IArray**'''
        return super(IDERelationshipClassEx2, self).get_DestinationClassKeys()
    def putref_DestinationClassKeys(self, DestinationClassNames):
        '''Method IDERelationshipClassEx.putref_DestinationClassKeys (from IDERelationshipClassEx)

           INPUT
            DestinationClassNames: IArray*'''
        return super(IDERelationshipClassEx2, self).putref_DestinationClassKeys(DestinationClassNames)
    def get_KeyType(self):
        '''Method IDERelationshipClassEx.get_KeyType (from IDERelationshipClassEx)

           OUTPUT
            KeyType             : esriRelKeyType*'''
        return super(IDERelationshipClassEx2, self).get_KeyType()
    def put_KeyType(self, KeyType):
        '''Method IDERelationshipClassEx.put_KeyType (from IDERelationshipClassEx)

           INPUT
            KeyType             : esriRelKeyType'''
        return super(IDERelationshipClassEx2, self).put_KeyType(KeyType)
    def get_ClassKey(self):
        '''Method IDERelationshipClassEx.get_ClassKey (from IDERelationshipClassEx)

           OUTPUT
            ClassKey            : esriRelClassKey*'''
        return super(IDERelationshipClassEx2, self).get_ClassKey()
    def put_ClassKey(self, ClassKey):
        '''Method IDERelationshipClassEx.put_ClassKey (from IDERelationshipClassEx)

           INPUT
            ClassKey            : esriRelClassKey'''
        return super(IDERelationshipClassEx2, self).put_ClassKey(ClassKey)
    def get_IsReflexive(self):
        '''Method IDERelationshipClassEx.get_IsReflexive (from IDERelationshipClassEx)

           OUTPUT
            reflexive           : VARIANT_BOOL*'''
        return super(IDERelationshipClassEx2, self).get_IsReflexive()
    def put_IsReflexive(self, reflexive):
        '''Method IDERelationshipClassEx.put_IsReflexive (from IDERelationshipClassEx)

           INPUT
            reflexive           : VARIANT_BOOL'''
        return super(IDERelationshipClassEx2, self).put_IsReflexive(reflexive)
    def get_ForwardPathLabel(self):
        '''Method IDERelationshipClassEx.get_ForwardPathLabel (from IDERelationshipClassEx)

           OUTPUT
            label               : BSTR*'''
        return super(IDERelationshipClassEx2, self).get_ForwardPathLabel()
    def put_ForwardPathLabel(self, label):
        '''Method IDERelationshipClassEx.put_ForwardPathLabel (from IDERelationshipClassEx)

           INPUT
            label               : BSTR'''
        return super(IDERelationshipClassEx2, self).put_ForwardPathLabel(label)
    def get_BackwardPathLabel(self):
        '''Method IDERelationshipClassEx.get_BackwardPathLabel (from IDERelationshipClassEx)

           OUTPUT
            label               : BSTR*'''
        return super(IDERelationshipClassEx2, self).get_BackwardPathLabel()
    def put_BackwardPathLabel(self, label):
        '''Method IDERelationshipClassEx.put_BackwardPathLabel (from IDERelationshipClassEx)

           INPUT
            label               : BSTR'''
        return super(IDERelationshipClassEx2, self).put_BackwardPathLabel(label)
    def get_Cardinality(self):
        '''Method IDERelationshipClassEx.get_Cardinality (from IDERelationshipClassEx)

           OUTPUT
            relCardinality      : esriRelCardinality*'''
        return super(IDERelationshipClassEx2, self).get_Cardinality()
    def put_Cardinality(self, relCardinality):
        '''Method IDERelationshipClassEx.put_Cardinality (from IDERelationshipClassEx)

           INPUT
            relCardinality      : esriRelCardinality'''
        return super(IDERelationshipClassEx2, self).put_Cardinality(relCardinality)
    def get_Notification(self):
        '''Method IDERelationshipClassEx.get_Notification (from IDERelationshipClassEx)

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IDERelationshipClassEx2, self).get_Notification()
    def put_Notification(self, Notification):
        '''Method IDERelationshipClassEx.put_Notification (from IDERelationshipClassEx)

           INPUT
            Notification        : esriRelNotification'''
        return super(IDERelationshipClassEx2, self).put_Notification(Notification)
    def get_IsAttributed(self):
        '''Method IDERelationshipClassEx.get_IsAttributed (from IDERelationshipClassEx)

           OUTPUT
            attributed          : VARIANT_BOOL*'''
        return super(IDERelationshipClassEx2, self).get_IsAttributed()
    def put_IsAttributed(self, attributed):
        '''Method IDERelationshipClassEx.put_IsAttributed (from IDERelationshipClassEx)

           INPUT
            attributed          : VARIANT_BOOL'''
        return super(IDERelationshipClassEx2, self).put_IsAttributed(attributed)
    def get_IsComposite(self):
        '''Method IDERelationshipClassEx.get_IsComposite (from IDERelationshipClassEx)

           OUTPUT
            composite           : VARIANT_BOOL*'''
        return super(IDERelationshipClassEx2, self).get_IsComposite()
    def put_IsComposite(self, composite):
        '''Method IDERelationshipClassEx.put_IsComposite (from IDERelationshipClassEx)

           INPUT
            composite           : VARIANT_BOOL'''
        return super(IDERelationshipClassEx2, self).put_IsComposite(composite)
    def get_RelationshipRules(self):
        '''Method IDERelationshipClassEx.get_RelationshipRules (from IDERelationshipClassEx)

           OUTPUT
            Rules               : IArray**'''
        return super(IDERelationshipClassEx2, self).get_RelationshipRules()
    def putref_RelationshipRules(self, Rules):
        '''Method IDERelationshipClassEx.putref_RelationshipRules (from IDERelationshipClassEx)

           INPUT
            Rules               : IArray*'''
        return super(IDERelationshipClassEx2, self).putref_RelationshipRules(Rules)
    BackwardPathLabel = property(get_BackwardPathLabel, put_BackwardPathLabel, None)
    Cardinality = property(get_Cardinality, put_Cardinality, None)
    ClassKey = property(get_ClassKey, put_ClassKey, None)
    DestinationClassKeys = property(get_DestinationClassKeys, putref_DestinationClassKeys, None)
    DestinationClassNames = property(get_DestinationClassNames, putref_DestinationClassNames, None)
    ForwardPathLabel = property(get_ForwardPathLabel, put_ForwardPathLabel, None)
    IsAttachmentRelationship = property(get_IsAttachmentRelationship, put_IsAttachmentRelationship, None)
    IsAttributed = property(get_IsAttributed, put_IsAttributed, None)
    IsComposite = property(get_IsComposite, put_IsComposite, None)
    IsReflexive = property(get_IsReflexive, put_IsReflexive, None)
    KeyType = property(get_KeyType, put_KeyType, None)
    Notification = property(get_Notification, put_Notification, None)
    OriginClassKeys = property(get_OriginClassKeys, putref_OriginClassKeys, None)
    OriginClassNames = property(get_OriginClassNames, putref_OriginClassNames, None)
    RelationshipRules = property(get_RelationshipRules, putref_RelationshipRules, None)

class IGPRelationshipClassKey(_esriGeoDatabase.IGPRelationshipClassKey):
    _IID = uuid.UUID('7c2c531e-4882-40f5-bace-323ef546d33c')

    def __init__(self, *args, **kw):
        super(IGPRelationshipClassKey, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_KeyRole(self, Role):
        '''Method IGPRelationshipClassKey.put_KeyRole

           INPUT
            Role                : esriRelKeyRole'''
        return super(IGPRelationshipClassKey, self).put_KeyRole(Role)
    def get_KeyRole(self):
        '''Method IGPRelationshipClassKey.get_KeyRole

           OUTPUT
            Role                : esriRelKeyRole*'''
        return super(IGPRelationshipClassKey, self).get_KeyRole()
    def put_ObjectKeyName(self, Name):
        '''Method IGPRelationshipClassKey.put_ObjectKeyName

           INPUT
            Name                : BSTR'''
        return super(IGPRelationshipClassKey, self).put_ObjectKeyName(Name)
    def get_ObjectKeyName(self):
        '''Method IGPRelationshipClassKey.get_ObjectKeyName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPRelationshipClassKey, self).get_ObjectKeyName()
    def put_ClassKeyName(self, Name):
        '''Method IGPRelationshipClassKey.put_ClassKeyName

           INPUT
            Name                : BSTR'''
        return super(IGPRelationshipClassKey, self).put_ClassKeyName(Name)
    def get_ClassKeyName(self):
        '''Method IGPRelationshipClassKey.get_ClassKeyName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPRelationshipClassKey, self).get_ClassKeyName()
    ClassKeyName = property(get_ClassKeyName, put_ClassKeyName, None)
    KeyRole = property(get_KeyRole, put_KeyRole, None)
    ObjectKeyName = property(get_ObjectKeyName, put_ObjectKeyName, None)

class IDataElementType(_esriGeoDatabase.IDataElementType):
    _IID = uuid.UUID('4926a958-7885-484c-811b-2c8b12b0c1a2')
    def CreateOutputDataElement(self, CatalogPath, optionalWorkspace):
        '''Method IDataElementType.CreateOutputDataElement

           INPUTS
            CatalogPath         : BSTR
            optionalWorkspace   : BSTR

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IDataElementType, self).CreateOutputDataElement(CatalogPath, optionalWorkspace)

class IGxFilterInfo(_esriGeoDatabase.IGxFilterInfo):
    _IID = uuid.UUID('691be63c-024f-4958-8f9b-d8252342e915')
    def get_OpenGxObjectFilters(self):
        '''Method IGxFilterInfo.get_OpenGxObjectFilters

           OUTPUT
            filters             : IArray**'''
        return super(IGxFilterInfo, self).get_OpenGxObjectFilters()
    def get_SaveGxObjectFilters(self):
        '''Method IGxFilterInfo.get_SaveGxObjectFilters

           OUTPUT
            filters             : IArray**'''
        return super(IGxFilterInfo, self).get_SaveGxObjectFilters()
    OpenGxObjectFilters = property(get_OpenGxObjectFilters, None, None)
    SaveGxObjectFilters = property(get_SaveGxObjectFilters, None, None)

class IDEGeometricNetwork(_esriGeoDatabase.IDEGeometricNetwork):
    _IID = uuid.UUID('acdbe3c0-e303-43e1-8038-8b391692f267')

    def __init__(self, *args, **kw):
        super(IDEGeometricNetwork, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Rules(self):
        '''Method IDEGeometricNetwork.get_Rules

           OUTPUT
            Rules               : IArray**'''
        return super(IDEGeometricNetwork, self).get_Rules()
    def putref_Rules(self, Rules):
        '''Method IDEGeometricNetwork.putref_Rules

           INPUT
            Rules               : IArray*'''
        return super(IDEGeometricNetwork, self).putref_Rules(Rules)
    def get_NetworkType(self):
        '''Method IDEGeometricNetwork.get_NetworkType

           OUTPUT
            Type                : esriNetworkType*'''
        return super(IDEGeometricNetwork, self).get_NetworkType()
    def put_NetworkType(self, Type):
        '''Method IDEGeometricNetwork.put_NetworkType

           INPUT
            Type                : esriNetworkType'''
        return super(IDEGeometricNetwork, self).put_NetworkType(Type)
    def get_OrphanJunctionFeatureClassName(self):
        '''Method IDEGeometricNetwork.get_OrphanJunctionFeatureClassName

           OUTPUT
            FeatureClass        : BSTR*'''
        return super(IDEGeometricNetwork, self).get_OrphanJunctionFeatureClassName()
    def put_OrphanJunctionFeatureClassName(self, FeatureClass):
        '''Method IDEGeometricNetwork.put_OrphanJunctionFeatureClassName

           INPUT
            FeatureClass        : BSTR'''
        return super(IDEGeometricNetwork, self).put_OrphanJunctionFeatureClassName(FeatureClass)
    def get_FeatureClassNames(self):
        '''Method IDEGeometricNetwork.get_FeatureClassNames

           OUTPUT
            FeatureClassNames   : IStringArray**'''
        return super(IDEGeometricNetwork, self).get_FeatureClassNames()
    def putref_FeatureClassNames(self, FeatureClassNames):
        '''Method IDEGeometricNetwork.putref_FeatureClassNames

           INPUT
            FeatureClassNames   : IStringArray*'''
        return super(IDEGeometricNetwork, self).putref_FeatureClassNames(FeatureClassNames)
    def get_NetworkWeights(self):
        '''Method IDEGeometricNetwork.get_NetworkWeights

           OUTPUT
            netWeights          : IArray**'''
        return super(IDEGeometricNetwork, self).get_NetworkWeights()
    def putref_NetworkWeights(self, netWeights):
        '''Method IDEGeometricNetwork.putref_NetworkWeights

           INPUT
            netWeights          : IArray*'''
        return super(IDEGeometricNetwork, self).putref_NetworkWeights(netWeights)
    def get_WeightAssociations(self):
        '''Method IDEGeometricNetwork.get_WeightAssociations

           OUTPUT
            WeightAssociations  : IArray**'''
        return super(IDEGeometricNetwork, self).get_WeightAssociations()
    def putref_WeightAssociations(self, WeightAssociations):
        '''Method IDEGeometricNetwork.putref_WeightAssociations

           INPUT
            WeightAssociations  : IArray*'''
        return super(IDEGeometricNetwork, self).putref_WeightAssociations(WeightAssociations)
    FeatureClassNames = property(get_FeatureClassNames, putref_FeatureClassNames, None)
    NetworkType = property(get_NetworkType, put_NetworkType, None)
    NetworkWeights = property(get_NetworkWeights, putref_NetworkWeights, None)
    OrphanJunctionFeatureClassName = property(get_OrphanJunctionFeatureClassName, put_OrphanJunctionFeatureClassName, None)
    Rules = property(get_Rules, putref_Rules, None)
    WeightAssociations = property(get_WeightAssociations, putref_WeightAssociations, None)

class IDEGeometricNetwork2(_esriGeoDatabase.IDEGeometricNetwork2):
    _IID = uuid.UUID('4169ef6e-9e94-45c2-af70-509a62a0d1ec')

    def __init__(self, *args, **kw):
        super(IDEGeometricNetwork2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseZsForConnectivity(self, UseZsForConnectivity):
        '''Method IDEGeometricNetwork2.put_UseZsForConnectivity

           INPUT
            UseZsForConnectivity: VARIANT_BOOL'''
        return super(IDEGeometricNetwork2, self).put_UseZsForConnectivity(UseZsForConnectivity)
    def get_UseZsForConnectivity(self):
        '''Method IDEGeometricNetwork2.get_UseZsForConnectivity

           OUTPUT
            UseZsForConnectivity: VARIANT_BOOL*'''
        return super(IDEGeometricNetwork2, self).get_UseZsForConnectivity()
    def put_XYSnapTolerance(self, XYSnapTolerance):
        '''Method IDEGeometricNetwork2.put_XYSnapTolerance

           INPUT
            XYSnapTolerance     : double'''
        return super(IDEGeometricNetwork2, self).put_XYSnapTolerance(XYSnapTolerance)
    def get_XYSnapTolerance(self):
        '''Method IDEGeometricNetwork2.get_XYSnapTolerance

           OUTPUT
            XYSnapTolerance     : double*'''
        return super(IDEGeometricNetwork2, self).get_XYSnapTolerance()
    def put_ZSnapTolerance(self, ZSnapTolerance):
        '''Method IDEGeometricNetwork2.put_ZSnapTolerance

           INPUT
            ZSnapTolerance      : double'''
        return super(IDEGeometricNetwork2, self).put_ZSnapTolerance(ZSnapTolerance)
    def get_ZSnapTolerance(self):
        '''Method IDEGeometricNetwork2.get_ZSnapTolerance

           OUTPUT
            ZSnapTolerance      : double*'''
        return super(IDEGeometricNetwork2, self).get_ZSnapTolerance()
    def put_ReduceNetworkConflicts(self, ReduceNetworkConflicts):
        '''Method IDEGeometricNetwork2.put_ReduceNetworkConflicts

           INPUT
            ReduceNetworkConflicts: VARIANT_BOOL'''
        return super(IDEGeometricNetwork2, self).put_ReduceNetworkConflicts(ReduceNetworkConflicts)
    def get_ReduceNetworkConflicts(self):
        '''Method IDEGeometricNetwork2.get_ReduceNetworkConflicts

           OUTPUT
            ReduceNetworkConflicts: VARIANT_BOOL*'''
        return super(IDEGeometricNetwork2, self).get_ReduceNetworkConflicts()
    def get_Rules(self):
        '''Method IDEGeometricNetwork.get_Rules (from IDEGeometricNetwork)

           OUTPUT
            Rules               : IArray**'''
        return super(IDEGeometricNetwork2, self).get_Rules()
    def putref_Rules(self, Rules):
        '''Method IDEGeometricNetwork.putref_Rules (from IDEGeometricNetwork)

           INPUT
            Rules               : IArray*'''
        return super(IDEGeometricNetwork2, self).putref_Rules(Rules)
    def get_NetworkType(self):
        '''Method IDEGeometricNetwork.get_NetworkType (from IDEGeometricNetwork)

           OUTPUT
            Type                : esriNetworkType*'''
        return super(IDEGeometricNetwork2, self).get_NetworkType()
    def put_NetworkType(self, Type):
        '''Method IDEGeometricNetwork.put_NetworkType (from IDEGeometricNetwork)

           INPUT
            Type                : esriNetworkType'''
        return super(IDEGeometricNetwork2, self).put_NetworkType(Type)
    def get_OrphanJunctionFeatureClassName(self):
        '''Method IDEGeometricNetwork.get_OrphanJunctionFeatureClassName (from IDEGeometricNetwork)

           OUTPUT
            FeatureClass        : BSTR*'''
        return super(IDEGeometricNetwork2, self).get_OrphanJunctionFeatureClassName()
    def put_OrphanJunctionFeatureClassName(self, FeatureClass):
        '''Method IDEGeometricNetwork.put_OrphanJunctionFeatureClassName (from IDEGeometricNetwork)

           INPUT
            FeatureClass        : BSTR'''
        return super(IDEGeometricNetwork2, self).put_OrphanJunctionFeatureClassName(FeatureClass)
    def get_FeatureClassNames(self):
        '''Method IDEGeometricNetwork.get_FeatureClassNames (from IDEGeometricNetwork)

           OUTPUT
            FeatureClassNames   : IStringArray**'''
        return super(IDEGeometricNetwork2, self).get_FeatureClassNames()
    def putref_FeatureClassNames(self, FeatureClassNames):
        '''Method IDEGeometricNetwork.putref_FeatureClassNames (from IDEGeometricNetwork)

           INPUT
            FeatureClassNames   : IStringArray*'''
        return super(IDEGeometricNetwork2, self).putref_FeatureClassNames(FeatureClassNames)
    def get_NetworkWeights(self):
        '''Method IDEGeometricNetwork.get_NetworkWeights (from IDEGeometricNetwork)

           OUTPUT
            netWeights          : IArray**'''
        return super(IDEGeometricNetwork2, self).get_NetworkWeights()
    def putref_NetworkWeights(self, netWeights):
        '''Method IDEGeometricNetwork.putref_NetworkWeights (from IDEGeometricNetwork)

           INPUT
            netWeights          : IArray*'''
        return super(IDEGeometricNetwork2, self).putref_NetworkWeights(netWeights)
    def get_WeightAssociations(self):
        '''Method IDEGeometricNetwork.get_WeightAssociations (from IDEGeometricNetwork)

           OUTPUT
            WeightAssociations  : IArray**'''
        return super(IDEGeometricNetwork2, self).get_WeightAssociations()
    def putref_WeightAssociations(self, WeightAssociations):
        '''Method IDEGeometricNetwork.putref_WeightAssociations (from IDEGeometricNetwork)

           INPUT
            WeightAssociations  : IArray*'''
        return super(IDEGeometricNetwork2, self).putref_WeightAssociations(WeightAssociations)
    FeatureClassNames = property(get_FeatureClassNames, putref_FeatureClassNames, None)
    NetworkType = property(get_NetworkType, put_NetworkType, None)
    NetworkWeights = property(get_NetworkWeights, putref_NetworkWeights, None)
    OrphanJunctionFeatureClassName = property(get_OrphanJunctionFeatureClassName, put_OrphanJunctionFeatureClassName, None)
    ReduceNetworkConflicts = property(get_ReduceNetworkConflicts, put_ReduceNetworkConflicts, None)
    Rules = property(get_Rules, putref_Rules, None)
    UseZsForConnectivity = property(get_UseZsForConnectivity, put_UseZsForConnectivity, None)
    WeightAssociations = property(get_WeightAssociations, putref_WeightAssociations, None)
    XYSnapTolerance = property(get_XYSnapTolerance, put_XYSnapTolerance, None)
    ZSnapTolerance = property(get_ZSnapTolerance, put_ZSnapTolerance, None)

class IDETopology(_esriGeoDatabase.IDETopology):
    _IID = uuid.UUID('2f5817ab-5c2f-4250-b515-d2bdcdb5fa84')

    def __init__(self, *args, **kw):
        super(IDETopology, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClusterTolerance(self):
        '''Method IDETopology.get_ClusterTolerance

           OUTPUT
            clusterTol          : double*'''
        return super(IDETopology, self).get_ClusterTolerance()
    def put_ClusterTolerance(self, clusterTol):
        '''Method IDETopology.put_ClusterTolerance

           INPUT
            clusterTol          : double'''
        return super(IDETopology, self).put_ClusterTolerance(clusterTol)
    def get_ZClusterTolerance(self):
        '''Method IDETopology.get_ZClusterTolerance

           OUTPUT
            clusterTol          : double*'''
        return super(IDETopology, self).get_ZClusterTolerance()
    def put_ZClusterTolerance(self, clusterTol):
        '''Method IDETopology.put_ZClusterTolerance

           INPUT
            clusterTol          : double'''
        return super(IDETopology, self).put_ZClusterTolerance(clusterTol)
    def get_MaximumGeneratedErrorCount(self):
        '''Method IDETopology.get_MaximumGeneratedErrorCount

           OUTPUT
            maxErrorCount       : long*'''
        return super(IDETopology, self).get_MaximumGeneratedErrorCount()
    def put_MaximumGeneratedErrorCount(self, maxErrorCount):
        '''Method IDETopology.put_MaximumGeneratedErrorCount

           INPUT
            maxErrorCount       : long'''
        return super(IDETopology, self).put_MaximumGeneratedErrorCount(maxErrorCount)
    def get_Rules(self):
        '''Method IDETopology.get_Rules

           OUTPUT
            Rules               : IArray**'''
        return super(IDETopology, self).get_Rules()
    def putref_Rules(self, Rules):
        '''Method IDETopology.putref_Rules

           INPUT
            Rules               : IArray*'''
        return super(IDETopology, self).putref_Rules(Rules)
    def get_FeatureClassNames(self):
        '''Method IDETopology.get_FeatureClassNames

           OUTPUT
            FeatureClassNames   : IStringArray**'''
        return super(IDETopology, self).get_FeatureClassNames()
    def putref_FeatureClassNames(self, FeatureClassNames):
        '''Method IDETopology.putref_FeatureClassNames

           INPUT
            FeatureClassNames   : IStringArray*'''
        return super(IDETopology, self).putref_FeatureClassNames(FeatureClassNames)
    ClusterTolerance = property(get_ClusterTolerance, put_ClusterTolerance, None)
    FeatureClassNames = property(get_FeatureClassNames, putref_FeatureClassNames, None)
    MaximumGeneratedErrorCount = property(get_MaximumGeneratedErrorCount, put_MaximumGeneratedErrorCount, None)
    Rules = property(get_Rules, putref_Rules, None)
    ZClusterTolerance = property(get_ZClusterTolerance, put_ZClusterTolerance, None)

class IGPVersionInfo(_esriGeoDatabase.IGPVersionInfo):
    _IID = uuid.UUID('e349fcde-57e2-4fab-9094-7675d1add79d')

    def __init__(self, *args, **kw):
        super(IGPVersionInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_VersionName(self):
        '''Method IGPVersionInfo.get_VersionName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPVersionInfo, self).get_VersionName()
    def put_VersionName(self, Name):
        '''Method IGPVersionInfo.put_VersionName

           INPUT
            Name                : BSTR'''
        return super(IGPVersionInfo, self).put_VersionName(Name)
    def get_Description(self):
        '''Method IGPVersionInfo.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IGPVersionInfo, self).get_Description()
    def put_Description(self, Description):
        '''Method IGPVersionInfo.put_Description

           INPUT
            Description         : BSTR'''
        return super(IGPVersionInfo, self).put_Description(Description)
    def get_Access(self):
        '''Method IGPVersionInfo.get_Access

           OUTPUT
            Access              : esriVersionAccess*'''
        return super(IGPVersionInfo, self).get_Access()
    def put_Access(self, Access):
        '''Method IGPVersionInfo.put_Access

           INPUT
            Access              : esriVersionAccess'''
        return super(IGPVersionInfo, self).put_Access(Access)
    def get_Created(self):
        '''Method IGPVersionInfo.get_Created

           OUTPUT
            date                : VARIANT*'''
        return super(IGPVersionInfo, self).get_Created()
    def put_Created(self, date):
        '''Method IGPVersionInfo.put_Created

           INPUT
            date                : VARIANT'''
        return super(IGPVersionInfo, self).put_Created(date)
    def get_Modified(self):
        '''Method IGPVersionInfo.get_Modified

           OUTPUT
            date                : VARIANT*'''
        return super(IGPVersionInfo, self).get_Modified()
    def put_Modified(self, date):
        '''Method IGPVersionInfo.put_Modified

           INPUT
            date                : VARIANT'''
        return super(IGPVersionInfo, self).put_Modified(date)
    def get_ParentName(self):
        '''Method IGPVersionInfo.get_ParentName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPVersionInfo, self).get_ParentName()
    def put_ParentName(self, Name):
        '''Method IGPVersionInfo.put_ParentName

           INPUT
            Name                : BSTR'''
        return super(IGPVersionInfo, self).put_ParentName(Name)
    def get_ChildrenNames(self):
        '''Method IGPVersionInfo.get_ChildrenNames

           OUTPUT
            Names               : IStringArray**'''
        return super(IGPVersionInfo, self).get_ChildrenNames()
    def putref_ChildrenNames(self, Names):
        '''Method IGPVersionInfo.putref_ChildrenNames

           INPUT
            Names               : IStringArray*'''
        return super(IGPVersionInfo, self).putref_ChildrenNames(Names)
    def get_AncestorNames(self):
        '''Method IGPVersionInfo.get_AncestorNames

           OUTPUT
            Names               : IStringArray**'''
        return super(IGPVersionInfo, self).get_AncestorNames()
    def putref_AncestorNames(self, Names):
        '''Method IGPVersionInfo.putref_AncestorNames

           INPUT
            Names               : IStringArray*'''
        return super(IGPVersionInfo, self).putref_AncestorNames(Names)
    Access = property(get_Access, put_Access, None)
    AncestorNames = property(get_AncestorNames, putref_AncestorNames, None)
    ChildrenNames = property(get_ChildrenNames, putref_ChildrenNames, None)
    Created = property(get_Created, put_Created, None)
    Description = property(get_Description, put_Description, None)
    Modified = property(get_Modified, put_Modified, None)
    ParentName = property(get_ParentName, put_ParentName, None)
    VersionName = property(get_VersionName, put_VersionName, None)

class IGPVersionInfos(_esriGeoDatabase.IGPVersionInfos):
    _IID = uuid.UUID('96cd2dff-41c3-4d2c-9619-0a96e21ae341')
    def get_Count(self):
        '''Method IGPVersionInfos.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPVersionInfos, self).get_Count()
    def get_Element(self, Index):
        '''Method IGPVersionInfos.get_Element

           INPUT
            Index               : long

           OUTPUT
            VersionInfo         : IGPVersionInfo**'''
        return super(IGPVersionInfos, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGPVersionInfos.Remove

           INPUT
            Index               : long'''
        return super(IGPVersionInfos, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGPVersionInfos.RemoveAll'''
        return super(IGPVersionInfos, self).RemoveAll()
    def Add(self, VersionInfo):
        '''Method IGPVersionInfos.Add

           INPUT
            VersionInfo         : IGPVersionInfo*'''
        return super(IGPVersionInfos, self).Add(VersionInfo)
    def Insert(self, Index, VersionInfo):
        '''Method IGPVersionInfos.Insert

           INPUTS
            Index               : long
            VersionInfo         : IGPVersionInfo*'''
        return super(IGPVersionInfos, self).Insert(Index, VersionInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGPDomain2(_esriGeoDatabase.IGPDomain2):
    _IID = uuid.UUID('1060ab89-dc4a-4a63-ae01-e1f2da1de886')

    def __init__(self, *args, **kw):
        super(IGPDomain2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DomainID(self):
        '''Method IGPDomain2.get_DomainID

           OUTPUT
            ID                  : long*'''
        return super(IGPDomain2, self).get_DomainID()
    def put_DomainID(self, ID):
        '''Method IGPDomain2.put_DomainID

           INPUT
            ID                  : long'''
        return super(IGPDomain2, self).put_DomainID(ID)
    def get_Description(self):
        '''Method IGPDomain2.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IGPDomain2, self).get_Description()
    def put_Description(self, Description):
        '''Method IGPDomain2.put_Description

           INPUT
            Description         : BSTR'''
        return super(IGPDomain2, self).put_Description(Description)
    def get_FieldType(self):
        '''Method IGPDomain2.get_FieldType

           OUTPUT
            FieldType           : esriFieldType*'''
        return super(IGPDomain2, self).get_FieldType()
    def put_FieldType(self, FieldType):
        '''Method IGPDomain2.put_FieldType

           INPUT
            FieldType           : esriFieldType'''
        return super(IGPDomain2, self).put_FieldType(FieldType)
    def get_MergePolicy(self):
        '''Method IGPDomain2.get_MergePolicy

           OUTPUT
            policy              : esriMergePolicyType*'''
        return super(IGPDomain2, self).get_MergePolicy()
    def put_MergePolicy(self, policy):
        '''Method IGPDomain2.put_MergePolicy

           INPUT
            policy              : esriMergePolicyType'''
        return super(IGPDomain2, self).put_MergePolicy(policy)
    def get_SplitPolicy(self):
        '''Method IGPDomain2.get_SplitPolicy

           OUTPUT
            policy              : esriSplitPolicyType*'''
        return super(IGPDomain2, self).get_SplitPolicy()
    def put_SplitPolicy(self, policy):
        '''Method IGPDomain2.put_SplitPolicy

           INPUT
            policy              : esriSplitPolicyType'''
        return super(IGPDomain2, self).put_SplitPolicy(policy)
    def get_Name(self):
        '''Method IGPDomain2.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPDomain2, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPDomain2.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPDomain2, self).put_Name(Name)
    def get_Owner(self):
        '''Method IGPDomain2.get_Owner

           OUTPUT
            Owner               : BSTR*'''
        return super(IGPDomain2, self).get_Owner()
    def put_Owner(self, Owner):
        '''Method IGPDomain2.put_Owner

           INPUT
            Owner               : BSTR'''
        return super(IGPDomain2, self).put_Owner(Owner)
    def get_Type(self):
        '''Method IGPDomain2.get_Type

           OUTPUT
            Type                : esriDomainType*'''
        return super(IGPDomain2, self).get_Type()
    Description = property(get_Description, put_Description, None)
    DomainID = property(get_DomainID, put_DomainID, None)
    FieldType = property(get_FieldType, put_FieldType, None)
    MergePolicy = property(get_MergePolicy, put_MergePolicy, None)
    Name = property(get_Name, put_Name, None)
    Owner = property(get_Owner, put_Owner, None)
    SplitPolicy = property(get_SplitPolicy, put_SplitPolicy, None)
    Type = property(get_Type, None, None)

class IGPRangeDomain2(_esriGeoDatabase.IGPRangeDomain2):
    _IID = uuid.UUID('e5fd9a61-a3a4-46a5-a72d-db8f585201a6')

    def __init__(self, *args, **kw):
        super(IGPRangeDomain2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MinValue(self):
        '''Method IGPRangeDomain2.get_MinValue

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPRangeDomain2, self).get_MinValue()
    def put_MinValue(self, Value):
        '''Method IGPRangeDomain2.put_MinValue

           INPUT
            Value               : VARIANT'''
        return super(IGPRangeDomain2, self).put_MinValue(Value)
    def get_MaxValue(self):
        '''Method IGPRangeDomain2.get_MaxValue

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPRangeDomain2, self).get_MaxValue()
    def put_MaxValue(self, Value):
        '''Method IGPRangeDomain2.put_MaxValue

           INPUT
            Value               : VARIANT'''
        return super(IGPRangeDomain2, self).put_MaxValue(Value)
    MaxValue = property(get_MaxValue, put_MaxValue, None)
    MinValue = property(get_MinValue, put_MinValue, None)

class IGPCodedValueDomain2(_esriGeoDatabase.IGPCodedValueDomain2):
    _IID = uuid.UUID('4bc49489-93a3-4945-9c24-e3e1bca04664')
    def get_CodeCount(self):
        '''Method IGPCodedValueDomain2.get_CodeCount

           OUTPUT
            values              : long*'''
        return super(IGPCodedValueDomain2, self).get_CodeCount()
    def get_Name(self, Index):
        '''Method IGPCodedValueDomain2.get_Name

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IGPCodedValueDomain2, self).get_Name(Index)
    def get_Value(self, Index):
        '''Method IGPCodedValueDomain2.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPCodedValueDomain2, self).get_Value(Index)
    def AddCode(self, Value, Name):
        '''Method IGPCodedValueDomain2.AddCode

           INPUTS
            Value               : VARIANT
            Name                : BSTR'''
        return super(IGPCodedValueDomain2, self).AddCode(Value, Name)
    def DeleteCode(self, Value):
        '''Method IGPCodedValueDomain2.DeleteCode

           INPUT
            Value               : VARIANT'''
        return super(IGPCodedValueDomain2, self).DeleteCode(Value)
    CodeCount = property(get_CodeCount, None, None)
    Name = IndexProperty(get_Name, None)
    Value = IndexProperty(get_Value, None)

class IGPHistoricalMarker(_esriGeoDatabase.IGPHistoricalMarker):
    _IID = uuid.UUID('ac0cac11-2109-4f21-b98f-237b26da9802')

    def __init__(self, *args, **kw):
        super(IGPHistoricalMarker, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPHistoricalMarker.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPHistoricalMarker, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPHistoricalMarker.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPHistoricalMarker, self).put_Name(Name)
    def get_TimeStamp(self):
        '''Method IGPHistoricalMarker.get_TimeStamp

           OUTPUT
            tstamp              : VARIANT*'''
        return super(IGPHistoricalMarker, self).get_TimeStamp()
    def put_TimeStamp(self, tstamp):
        '''Method IGPHistoricalMarker.put_TimeStamp

           INPUT
            tstamp              : VARIANT'''
        return super(IGPHistoricalMarker, self).put_TimeStamp(tstamp)
    Name = property(get_Name, put_Name, None)
    TimeStamp = property(get_TimeStamp, put_TimeStamp, None)

class IDEServerObject(_esriGeoDatabase.IDEServerObject):
    _IID = uuid.UUID('97fcf277-10a5-4dcd-b098-8a3934a258a1')

    def __init__(self, *args, **kw):
        super(IDEServerObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ServerObjectType(self):
        '''Method IDEServerObject.get_ServerObjectType

           OUTPUT
            soType              : BSTR*'''
        return super(IDEServerObject, self).get_ServerObjectType()
    def put_ServerObjectType(self, soType):
        '''Method IDEServerObject.put_ServerObjectType

           INPUT
            soType              : BSTR'''
        return super(IDEServerObject, self).put_ServerObjectType(soType)
    def get_URL(self):
        '''Method IDEServerObject.get_URL

           OUTPUT
            theUrl              : BSTR*'''
        return super(IDEServerObject, self).get_URL()
    def put_URL(self, theUrl):
        '''Method IDEServerObject.put_URL

           INPUT
            theUrl              : BSTR'''
        return super(IDEServerObject, self).put_URL(theUrl)
    ServerObjectType = property(get_ServerObjectType, put_ServerObjectType, None)
    URL = property(get_URL, put_URL, None)

class IDEServerConnection(_esriGeoDatabase.IDEServerConnection):
    _IID = uuid.UUID('668afa47-33f8-4902-9737-72f01c5fc6c4')

    def __init__(self, *args, **kw):
        super(IDEServerConnection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IDEServerConnection.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IDEServerConnection, self).get_Name()
    def put_Name(self, pName):
        '''Method IDEServerConnection.put_Name

           INPUT
            pName               : BSTR'''
        return super(IDEServerConnection, self).put_Name(pName)
    def get_URL(self):
        '''Method IDEServerConnection.get_URL

           OUTPUT
            pUrl                : BSTR*'''
        return super(IDEServerConnection, self).get_URL()
    def put_URL(self, pUrl):
        '''Method IDEServerConnection.put_URL

           INPUT
            pUrl                : BSTR'''
        return super(IDEServerConnection, self).put_URL(pUrl)
    Name = property(get_Name, put_Name, None)
    URL = property(get_URL, put_URL, None)

class IResultPortionInfo(_esriGeoDatabase.IResultPortionInfo):
    _IID = uuid.UUID('db5e4e17-e15f-4eb1-a600-75e66376159c')

    def __init__(self, *args, **kw):
        super(IResultPortionInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ResultID(self):
        '''Method IResultPortionInfo.get_ResultID

           OUTPUT
            queryID             : BSTR*'''
        return super(IResultPortionInfo, self).get_ResultID()
    def put_ResultID(self, queryID):
        '''Method IResultPortionInfo.put_ResultID

           INPUT
            queryID             : BSTR'''
        return super(IResultPortionInfo, self).put_ResultID(queryID)
    def get_StartIndex(self):
        '''Method IResultPortionInfo.get_StartIndex

           OUTPUT
            StartIndex          : long*'''
        return super(IResultPortionInfo, self).get_StartIndex()
    def put_StartIndex(self, StartIndex):
        '''Method IResultPortionInfo.put_StartIndex

           INPUT
            StartIndex          : long'''
        return super(IResultPortionInfo, self).put_StartIndex(StartIndex)
    def get_Count(self):
        '''Method IResultPortionInfo.get_Count

           OUTPUT
            Count               : long*'''
        return super(IResultPortionInfo, self).get_Count()
    def put_Count(self, Count):
        '''Method IResultPortionInfo.put_Count

           INPUT
            Count               : long'''
        return super(IResultPortionInfo, self).put_Count(Count)
    Count = property(get_Count, put_Count, None)
    ResultID = property(get_ResultID, put_ResultID, None)
    StartIndex = property(get_StartIndex, put_StartIndex, None)

class IResultPortion(_esriGeoDatabase.IResultPortion):
    _IID = uuid.UUID('49f53871-3067-4027-8598-7371a241767c')

    def __init__(self, *args, **kw):
        super(IResultPortion, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ResultPortionInfo(self):
        '''Method IResultPortion.get_ResultPortionInfo

           OUTPUT
            ResultPortionInfo   : IResultPortionInfo**'''
        return super(IResultPortion, self).get_ResultPortionInfo()
    def putref_ResultPortionInfo(self, ResultPortionInfo):
        '''Method IResultPortion.putref_ResultPortionInfo

           INPUT
            ResultPortionInfo   : IResultPortionInfo*'''
        return super(IResultPortion, self).putref_ResultPortionInfo(ResultPortionInfo)
    ResultPortionInfo = property(get_ResultPortionInfo, putref_ResultPortionInfo, None)

class IGPMessageManager(_esriGeoDatabase.IGPMessageManager):
    _IID = uuid.UUID('a440ec5f-34b5-45b3-bcd1-ae631cf84214')
    def GetMessage(self, ID):
        '''Method IGPMessageManager.GetMessage

           INPUT
            ID                  : long

           OUTPUT
            msg                 : BSTR*'''
        return super(IGPMessageManager, self).GetMessage(ID)
    def GenerateMessage(self, Type, ID):
        '''Method IGPMessageManager.GenerateMessage

           INPUTS
            Type                : esriGPMessageType
            ID                  : long

           OUTPUT
            msg                 : BSTR*'''
        return super(IGPMessageManager, self).GenerateMessage(Type, ID)
    def AddMessage(self, Type, ID, msgs):
        '''Method IGPMessageManager.AddMessage

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).AddMessage(Type, ID, msgs)
    def AddMessage1Args(self, Type, ID, arg1, msgs):
        '''Method IGPMessageManager.AddMessage1Args

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            arg1                : BSTR
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).AddMessage1Args(Type, ID, arg1, msgs)
    def AddMessage2Args(self, Type, ID, arg1, arg2, msgs):
        '''Method IGPMessageManager.AddMessage2Args

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            arg1                : BSTR
            arg2                : BSTR
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).AddMessage2Args(Type, ID, arg1, arg2, msgs)
    def AddMessageText(self, Type, ID, msg, msgs):
        '''Method IGPMessageManager.AddMessageText

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            msg                 : BSTR
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).AddMessageText(Type, ID, msg, msgs)
    def SetMessage(self, Type, ID, pos, msgs):
        '''Method IGPMessageManager.SetMessage

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            pos                 : long
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).SetMessage(Type, ID, pos, msgs)
    def SetMessage1Args(self, Type, ID, arg1, pos, msgs):
        '''Method IGPMessageManager.SetMessage1Args

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            arg1                : BSTR
            pos                 : long
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).SetMessage1Args(Type, ID, arg1, pos, msgs)
    def SetMessage2Args(self, Type, ID, arg1, arg2, pos, msgs):
        '''Method IGPMessageManager.SetMessage2Args

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            arg1                : BSTR
            arg2                : BSTR
            pos                 : long
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).SetMessage2Args(Type, ID, arg1, arg2, pos, msgs)
    def SetMessageText(self, Type, ID, msg, pos, msgs):
        '''Method IGPMessageManager.SetMessageText

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            msg                 : BSTR
            pos                 : long
            msgs                : IGPMessages*'''
        return super(IGPMessageManager, self).SetMessageText(Type, ID, msg, pos, msgs)
    def ChainMessage(self, Type, ID):
        '''Method IGPMessageManager.ChainMessage

           INPUTS
            Type                : esriGPMessageType
            ID                  : long'''
        return super(IGPMessageManager, self).ChainMessage(Type, ID)
    def ChainMessage1Args(self, Type, ID, arg1):
        '''Method IGPMessageManager.ChainMessage1Args

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            arg1                : BSTR'''
        return super(IGPMessageManager, self).ChainMessage1Args(Type, ID, arg1)
    def ChainMessage2Args(self, Type, ID, arg1, arg2):
        '''Method IGPMessageManager.ChainMessage2Args

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            arg1                : BSTR
            arg2                : BSTR'''
        return super(IGPMessageManager, self).ChainMessage2Args(Type, ID, arg1, arg2)
    def ChainMessageText(self, Type, ID, msg):
        '''Method IGPMessageManager.ChainMessageText

           INPUTS
            Type                : esriGPMessageType
            ID                  : long
            msg                 : BSTR'''
        return super(IGPMessageManager, self).ChainMessageText(Type, ID, msg)
    def CheckForErrors(self, fdoError, Messages, keepAllErrors):
        '''Method IGPMessageManager.CheckForErrors

           INPUTS
            fdoError            : HRESULT
            Messages            : IGPMessages*
            keepAllErrors       : VARIANT_BOOL'''
        return super(IGPMessageManager, self).CheckForErrors(fdoError, Messages, keepAllErrors)
    def LookForGPChainedErrors(self, Messages):
        '''Method IGPMessageManager.LookForGPChainedErrors

           INPUT
            Messages            : IGPMessages*'''
        return super(IGPMessageManager, self).LookForGPChainedErrors(Messages)

class IDERasterDataset(_esriGeoDatabase.IDERasterDataset):
    _IID = uuid.UUID('533c75e5-7ca0-40b5-9b20-5f6c1d4b4019')

    def __init__(self, *args, **kw):
        super(IDERasterDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Format(self):
        '''Method IDERasterDataset.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IDERasterDataset, self).get_Format()
    def put_Format(self, Format):
        '''Method IDERasterDataset.put_Format

           INPUT
            Format              : BSTR'''
        return super(IDERasterDataset, self).put_Format(Format)
    def get_CompressionType(self):
        '''Method IDERasterDataset.get_CompressionType

           OUTPUT
            comp                : BSTR*'''
        return super(IDERasterDataset, self).get_CompressionType()
    def put_CompressionType(self, comp):
        '''Method IDERasterDataset.put_CompressionType

           INPUT
            comp                : BSTR'''
        return super(IDERasterDataset, self).put_CompressionType(comp)
    def get_SensorType(self):
        '''Method IDERasterDataset.get_SensorType

           OUTPUT
            sensor              : BSTR*'''
        return super(IDERasterDataset, self).get_SensorType()
    def put_SensorType(self, sensor):
        '''Method IDERasterDataset.put_SensorType

           INPUT
            sensor              : BSTR'''
        return super(IDERasterDataset, self).put_SensorType(sensor)
    def get_BandCount(self):
        '''Method IDERasterDataset.get_BandCount

           OUTPUT
            Count               : long*'''
        return super(IDERasterDataset, self).get_BandCount()
    def put_BandCount(self, Count):
        '''Method IDERasterDataset.put_BandCount

           INPUT
            Count               : long'''
        return super(IDERasterDataset, self).put_BandCount(Count)
    def get_Permanent(self):
        '''Method IDERasterDataset.get_Permanent

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IDERasterDataset, self).get_Permanent()
    def put_Permanent(self, b):
        '''Method IDERasterDataset.put_Permanent

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IDERasterDataset, self).put_Permanent(b)
    BandCount = property(get_BandCount, put_BandCount, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    Format = property(get_Format, put_Format, None)
    Permanent = property(get_Permanent, put_Permanent, None)
    SensorType = property(get_SensorType, put_SensorType, None)

class IDERasterDatasetEx(_esriGeoDatabase.IDERasterDatasetEx):
    _IID = uuid.UUID('7622a8d7-7d51-4192-8fc6-74a4e10c6f9e')

    def __init__(self, *args, **kw):
        super(IDERasterDatasetEx, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StorageDef(self):
        '''Method IDERasterDatasetEx.get_StorageDef

           OUTPUT
            StorageDef          : IRasterStorageDef**'''
        return super(IDERasterDatasetEx, self).get_StorageDef()
    def put_StorageDef(self, StorageDef):
        '''Method IDERasterDatasetEx.put_StorageDef

           INPUT
            StorageDef          : IRasterStorageDef*'''
        return super(IDERasterDatasetEx, self).put_StorageDef(StorageDef)
    StorageDef = property(get_StorageDef, put_StorageDef, None)

class IDERasterBand(_esriGeoDatabase.IDERasterBand):
    _IID = uuid.UUID('6cb0daf7-1e85-4822-850a-297f0fb76b1f')

    def __init__(self, *args, **kw):
        super(IDERasterBand, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Width(self):
        '''Method IDERasterBand.get_Width

           OUTPUT
            pVal                : long*'''
        return super(IDERasterBand, self).get_Width()
    def put_Width(self, pVal):
        '''Method IDERasterBand.put_Width

           INPUT
            pVal                : long'''
        return super(IDERasterBand, self).put_Width(pVal)
    def get_Height(self):
        '''Method IDERasterBand.get_Height

           OUTPUT
            pVal                : long*'''
        return super(IDERasterBand, self).get_Height()
    def put_Height(self, pVal):
        '''Method IDERasterBand.put_Height

           INPUT
            pVal                : long'''
        return super(IDERasterBand, self).put_Height(pVal)
    def get_PixelType(self):
        '''Method IDERasterBand.get_PixelType

           OUTPUT
            pVal                : rstPixelType*'''
        return super(IDERasterBand, self).get_PixelType()
    def put_PixelType(self, pVal):
        '''Method IDERasterBand.put_PixelType

           INPUT
            pVal                : rstPixelType'''
        return super(IDERasterBand, self).put_PixelType(pVal)
    def get_NoDataValue(self):
        '''Method IDERasterBand.get_NoDataValue

           OUTPUT
            pVal                : VARIANT*'''
        return super(IDERasterBand, self).get_NoDataValue()
    def put_NoDataValue(self, pVal):
        '''Method IDERasterBand.put_NoDataValue

           INPUT
            pVal                : VARIANT'''
        return super(IDERasterBand, self).put_NoDataValue(pVal)
    def get_MeanCellHeight(self):
        '''Method IDERasterBand.get_MeanCellHeight

           OUTPUT
            cellHeight          : double*'''
        return super(IDERasterBand, self).get_MeanCellHeight()
    def get_MeanCellWidth(self):
        '''Method IDERasterBand.get_MeanCellWidth

           OUTPUT
            cellWidth           : double*'''
        return super(IDERasterBand, self).get_MeanCellWidth()
    def put_MeanCellHeight(self, cellHeight):
        '''Method IDERasterBand.put_MeanCellHeight

           INPUT
            cellHeight          : double'''
        return super(IDERasterBand, self).put_MeanCellHeight(cellHeight)
    def put_MeanCellWidth(self, cellWidth):
        '''Method IDERasterBand.put_MeanCellWidth

           INPUT
            cellWidth           : double'''
        return super(IDERasterBand, self).put_MeanCellWidth(cellWidth)
    def get_IsInteger(self):
        '''Method IDERasterBand.get_IsInteger

           OUTPUT
            IsInteger           : VARIANT_BOOL*'''
        return super(IDERasterBand, self).get_IsInteger()
    def put_IsInteger(self, IsInteger):
        '''Method IDERasterBand.put_IsInteger

           INPUT
            IsInteger           : VARIANT_BOOL'''
        return super(IDERasterBand, self).put_IsInteger(IsInteger)
    def get_TableType(self):
        '''Method IDERasterBand.get_TableType

           OUTPUT
            Type                : esriRasterTableTypeEnum*'''
        return super(IDERasterBand, self).get_TableType()
    def put_TableType(self, Type):
        '''Method IDERasterBand.put_TableType

           INPUT
            Type                : esriRasterTableTypeEnum'''
        return super(IDERasterBand, self).put_TableType(Type)
    def get_PrimaryField(self):
        '''Method IDERasterBand.get_PrimaryField

           OUTPUT
            FieldIndex          : long*'''
        return super(IDERasterBand, self).get_PrimaryField()
    def put_PrimaryField(self, FieldIndex):
        '''Method IDERasterBand.put_PrimaryField

           INPUT
            FieldIndex          : long'''
        return super(IDERasterBand, self).put_PrimaryField(FieldIndex)
    Height = property(get_Height, put_Height, None)
    IsInteger = property(get_IsInteger, put_IsInteger, None)
    MeanCellHeight = property(get_MeanCellHeight, put_MeanCellHeight, None)
    MeanCellWidth = property(get_MeanCellWidth, put_MeanCellWidth, None)
    NoDataValue = property(get_NoDataValue, put_NoDataValue, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    PrimaryField = property(get_PrimaryField, put_PrimaryField, None)
    TableType = property(get_TableType, put_TableType, None)
    Width = property(get_Width, put_Width, None)

class IGPSystemToolboxLocation(_esriGeoDatabase.IGPSystemToolboxLocation):
    _IID = uuid.UUID('cad53770-a929-4ef5-888c-fdb802350d3e')

    def __init__(self, *args, **kw):
        super(IGPSystemToolboxLocation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PathName(self, PathName):
        '''Method IGPSystemToolboxLocation.put_PathName

           INPUT
            PathName            : BSTR'''
        return super(IGPSystemToolboxLocation, self).put_PathName(PathName)
    def get_PathName(self):
        '''Method IGPSystemToolboxLocation.get_PathName

           OUTPUT
            PathName            : BSTR*'''
        return super(IGPSystemToolboxLocation, self).get_PathName()
    PathName = property(get_PathName, put_PathName, None)

class IDEGdbUtilities(_esriGeoDatabase.IDEGdbUtilities):
    _IID = uuid.UUID('bd65b611-aa51-462f-a11a-b0ba223d9e9c')
    def GetDatasetTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetDatasetTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IDEGdbUtilities, self).GetDatasetTypeFromString(desc)
    def GetDatasetTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetDatasetTypeDescription

           INPUT
            Type                : esriDatasetType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetDatasetTypeDescription(Type)
    def GetGeometryTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetGeometryTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriGeometryType*'''
        return super(IDEGdbUtilities, self).GetGeometryTypeFromString(desc)
    def GetGeometryTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetGeometryTypeDescription

           INPUT
            Type                : esriGeometryType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetGeometryTypeDescription(Type)
    def GetFeatureTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetFeatureTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriFeatureType*'''
        return super(IDEGdbUtilities, self).GetFeatureTypeFromString(desc)
    def GetFeatureTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetFeatureTypeDescription

           INPUT
            Type                : esriFeatureType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetFeatureTypeDescription(Type)
    def GetExpandTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetExpandTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriDEExpandType*'''
        return super(IDEGdbUtilities, self).GetExpandTypeFromString(desc)
    def GetExpandTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetExpandTypeDescription

           INPUT
            Type                : esriDEExpandType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetExpandTypeDescription(Type)
    def GetFieldTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetFieldTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriFieldType*'''
        return super(IDEGdbUtilities, self).GetFieldTypeFromString(desc)
    def GetFieldTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetFieldTypeDescription

           INPUT
            Type                : esriFieldType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetFieldTypeDescription(Type)
    def GetWorkspaceTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetWorkspaceTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriWorkspaceType*'''
        return super(IDEGdbUtilities, self).GetWorkspaceTypeFromString(desc)
    def GetWorkspaceTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetWorkspaceTypeDescription

           INPUT
            Type                : esriWorkspaceType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetWorkspaceTypeDescription(Type)
    def GetNetworkClassAncillaryRoleFromString(self, desc):
        '''Method IDEGdbUtilities.GetNetworkClassAncillaryRoleFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Role                : esriNetworkClassAncillaryRole*'''
        return super(IDEGdbUtilities, self).GetNetworkClassAncillaryRoleFromString(desc)
    def GetNetworkClassAncillaryRoleDescription(self, Role):
        '''Method IDEGdbUtilities.GetNetworkClassAncillaryRoleDescription

           INPUT
            Role                : esriNetworkClassAncillaryRole

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetNetworkClassAncillaryRoleDescription(Role)
    def GetRelationshipKeyTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipKeyTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            KeyType             : esriRelKeyType*'''
        return super(IDEGdbUtilities, self).GetRelationshipKeyTypeFromString(desc)
    def GetRelationshipKeyTypeDescription(self, KeyType):
        '''Method IDEGdbUtilities.GetRelationshipKeyTypeDescription

           INPUT
            KeyType             : esriRelKeyType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetRelationshipKeyTypeDescription(KeyType)
    def GetRelationshipClassKeyFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipClassKeyFromString

           INPUT
            desc                : BSTR

           OUTPUT
            ClassKey            : esriRelClassKey*'''
        return super(IDEGdbUtilities, self).GetRelationshipClassKeyFromString(desc)
    def GetRelationshipClassKeyDescription(self, ClassKey):
        '''Method IDEGdbUtilities.GetRelationshipClassKeyDescription

           INPUT
            ClassKey            : esriRelClassKey

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetRelationshipClassKeyDescription(ClassKey)
    def GetRelationshipKeyRoleFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipKeyRoleFromString

           INPUT
            desc                : BSTR

           OUTPUT
            KeyRole             : esriRelKeyRole*'''
        return super(IDEGdbUtilities, self).GetRelationshipKeyRoleFromString(desc)
    def GetRelationshipKeyRoleDescription(self, KeyRole):
        '''Method IDEGdbUtilities.GetRelationshipKeyRoleDescription

           INPUT
            KeyRole             : esriRelKeyRole

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetRelationshipKeyRoleDescription(KeyRole)
    def GetRelationshipCardinalityFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipCardinalityFromString

           INPUT
            desc                : BSTR

           OUTPUT
            card                : esriRelCardinality*'''
        return super(IDEGdbUtilities, self).GetRelationshipCardinalityFromString(desc)
    def GetRelationshipCardinalityDescription(self, card):
        '''Method IDEGdbUtilities.GetRelationshipCardinalityDescription

           INPUT
            card                : esriRelCardinality

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetRelationshipCardinalityDescription(card)
    def GetRelationshipNotificationFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipNotificationFromString

           INPUT
            desc                : BSTR

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IDEGdbUtilities, self).GetRelationshipNotificationFromString(desc)
    def GetRelationshipNotificationDescription(self, Notification):
        '''Method IDEGdbUtilities.GetRelationshipNotificationDescription

           INPUT
            Notification        : esriRelNotification

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetRelationshipNotificationDescription(Notification)
    def GetNetworkTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetNetworkTypeFromString

           INPUT
            desc                : BSTR

           OUTPUT
            netType             : esriNetworkType*'''
        return super(IDEGdbUtilities, self).GetNetworkTypeFromString(desc)
    def GetNetworkTypeDescription(self, netType):
        '''Method IDEGdbUtilities.GetNetworkTypeDescription

           INPUT
            netType             : esriNetworkType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities, self).GetNetworkTypeDescription(netType)
    def IsEqualDEGeoDataset(self, DEGeoDataset1, DEGeoDataset2):
        '''Method IDEGdbUtilities.IsEqualDEGeoDataset

           INPUTS
            DEGeoDataset1       : IDEGeoDataset*
            DEGeoDataset2       : IDEGeoDataset*

           OUTPUT
            equal               : VARIANT_BOOL*'''
        return super(IDEGdbUtilities, self).IsEqualDEGeoDataset(DEGeoDataset1, DEGeoDataset2)

class IDEGdbUtilities2(_esriGeoDatabase.IDEGdbUtilities2):
    _IID = uuid.UUID('bd65b611-aa51-462f-a11a-b0ba223d9e9e')
    def GetRequiredGdbClientVersionFromString(self, desc):
        '''Method IDEGdbUtilities2.GetRequiredGdbClientVersionFromString

           INPUT
            desc                : BSTR

           OUTPUT
            gdbVersion          : esriGeodatabaseVersion*'''
        return super(IDEGdbUtilities2, self).GetRequiredGdbClientVersionFromString(desc)
    def GetRequiredGdbClientVersionDescription(self, gdbVersion):
        '''Method IDEGdbUtilities2.GetRequiredGdbClientVersionDescription

           INPUT
            gdbVersion          : esriGeodatabaseVersion

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetRequiredGdbClientVersionDescription(gdbVersion)
    def GetDatasetTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetDatasetTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IDEGdbUtilities2, self).GetDatasetTypeFromString(desc)
    def GetDatasetTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetDatasetTypeDescription (from IDEGdbUtilities)

           INPUT
            Type                : esriDatasetType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetDatasetTypeDescription(Type)
    def GetGeometryTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetGeometryTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriGeometryType*'''
        return super(IDEGdbUtilities2, self).GetGeometryTypeFromString(desc)
    def GetGeometryTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetGeometryTypeDescription (from IDEGdbUtilities)

           INPUT
            Type                : esriGeometryType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetGeometryTypeDescription(Type)
    def GetFeatureTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetFeatureTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriFeatureType*'''
        return super(IDEGdbUtilities2, self).GetFeatureTypeFromString(desc)
    def GetFeatureTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetFeatureTypeDescription (from IDEGdbUtilities)

           INPUT
            Type                : esriFeatureType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetFeatureTypeDescription(Type)
    def GetExpandTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetExpandTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriDEExpandType*'''
        return super(IDEGdbUtilities2, self).GetExpandTypeFromString(desc)
    def GetExpandTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetExpandTypeDescription (from IDEGdbUtilities)

           INPUT
            Type                : esriDEExpandType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetExpandTypeDescription(Type)
    def GetFieldTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetFieldTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriFieldType*'''
        return super(IDEGdbUtilities2, self).GetFieldTypeFromString(desc)
    def GetFieldTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetFieldTypeDescription (from IDEGdbUtilities)

           INPUT
            Type                : esriFieldType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetFieldTypeDescription(Type)
    def GetWorkspaceTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetWorkspaceTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Type                : esriWorkspaceType*'''
        return super(IDEGdbUtilities2, self).GetWorkspaceTypeFromString(desc)
    def GetWorkspaceTypeDescription(self, Type):
        '''Method IDEGdbUtilities.GetWorkspaceTypeDescription (from IDEGdbUtilities)

           INPUT
            Type                : esriWorkspaceType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetWorkspaceTypeDescription(Type)
    def GetNetworkClassAncillaryRoleFromString(self, desc):
        '''Method IDEGdbUtilities.GetNetworkClassAncillaryRoleFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Role                : esriNetworkClassAncillaryRole*'''
        return super(IDEGdbUtilities2, self).GetNetworkClassAncillaryRoleFromString(desc)
    def GetNetworkClassAncillaryRoleDescription(self, Role):
        '''Method IDEGdbUtilities.GetNetworkClassAncillaryRoleDescription (from IDEGdbUtilities)

           INPUT
            Role                : esriNetworkClassAncillaryRole

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetNetworkClassAncillaryRoleDescription(Role)
    def GetRelationshipKeyTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipKeyTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            KeyType             : esriRelKeyType*'''
        return super(IDEGdbUtilities2, self).GetRelationshipKeyTypeFromString(desc)
    def GetRelationshipKeyTypeDescription(self, KeyType):
        '''Method IDEGdbUtilities.GetRelationshipKeyTypeDescription (from IDEGdbUtilities)

           INPUT
            KeyType             : esriRelKeyType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetRelationshipKeyTypeDescription(KeyType)
    def GetRelationshipClassKeyFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipClassKeyFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            ClassKey            : esriRelClassKey*'''
        return super(IDEGdbUtilities2, self).GetRelationshipClassKeyFromString(desc)
    def GetRelationshipClassKeyDescription(self, ClassKey):
        '''Method IDEGdbUtilities.GetRelationshipClassKeyDescription (from IDEGdbUtilities)

           INPUT
            ClassKey            : esriRelClassKey

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetRelationshipClassKeyDescription(ClassKey)
    def GetRelationshipKeyRoleFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipKeyRoleFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            KeyRole             : esriRelKeyRole*'''
        return super(IDEGdbUtilities2, self).GetRelationshipKeyRoleFromString(desc)
    def GetRelationshipKeyRoleDescription(self, KeyRole):
        '''Method IDEGdbUtilities.GetRelationshipKeyRoleDescription (from IDEGdbUtilities)

           INPUT
            KeyRole             : esriRelKeyRole

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetRelationshipKeyRoleDescription(KeyRole)
    def GetRelationshipCardinalityFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipCardinalityFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            card                : esriRelCardinality*'''
        return super(IDEGdbUtilities2, self).GetRelationshipCardinalityFromString(desc)
    def GetRelationshipCardinalityDescription(self, card):
        '''Method IDEGdbUtilities.GetRelationshipCardinalityDescription (from IDEGdbUtilities)

           INPUT
            card                : esriRelCardinality

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetRelationshipCardinalityDescription(card)
    def GetRelationshipNotificationFromString(self, desc):
        '''Method IDEGdbUtilities.GetRelationshipNotificationFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IDEGdbUtilities2, self).GetRelationshipNotificationFromString(desc)
    def GetRelationshipNotificationDescription(self, Notification):
        '''Method IDEGdbUtilities.GetRelationshipNotificationDescription (from IDEGdbUtilities)

           INPUT
            Notification        : esriRelNotification

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetRelationshipNotificationDescription(Notification)
    def GetNetworkTypeFromString(self, desc):
        '''Method IDEGdbUtilities.GetNetworkTypeFromString (from IDEGdbUtilities)

           INPUT
            desc                : BSTR

           OUTPUT
            netType             : esriNetworkType*'''
        return super(IDEGdbUtilities2, self).GetNetworkTypeFromString(desc)
    def GetNetworkTypeDescription(self, netType):
        '''Method IDEGdbUtilities.GetNetworkTypeDescription (from IDEGdbUtilities)

           INPUT
            netType             : esriNetworkType

           OUTPUT
            desc                : BSTR*'''
        return super(IDEGdbUtilities2, self).GetNetworkTypeDescription(netType)
    def IsEqualDEGeoDataset(self, DEGeoDataset1, DEGeoDataset2):
        '''Method IDEGdbUtilities.IsEqualDEGeoDataset (from IDEGdbUtilities)

           INPUTS
            DEGeoDataset1       : IDEGeoDataset*
            DEGeoDataset2       : IDEGeoDataset*

           OUTPUT
            equal               : VARIANT_BOOL*'''
        return super(IDEGdbUtilities2, self).IsEqualDEGeoDataset(DEGeoDataset1, DEGeoDataset2)

class IGPWorkspaceExtension(_esriGeoDatabase.IGPWorkspaceExtension):
    _IID = uuid.UUID('cf2be146-e51f-4f03-aaad-b352867a8ae0')

    def __init__(self, *args, **kw):
        super(IGPWorkspaceExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPWorkspaceExtension.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPWorkspaceExtension, self).get_Name()
    def get_CLSID(self):
        '''Method IGPWorkspaceExtension.get_CLSID

           OUTPUT
            CLSID               : GUID*'''
        return super(IGPWorkspaceExtension, self).get_CLSID()
    def put_Name(self, Name):
        '''Method IGPWorkspaceExtension.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPWorkspaceExtension, self).put_Name(Name)
    def put_CLSID(self, CLSID):
        '''Method IGPWorkspaceExtension.put_CLSID

           INPUT
            CLSID               : GUID'''
        return super(IGPWorkspaceExtension, self).put_CLSID(CLSID)
    CLSID = property(get_CLSID, put_CLSID, None)
    Name = property(get_Name, put_Name, None)

class IGPDatasetExtension(_esriGeoDatabase.IGPDatasetExtension):
    _IID = uuid.UUID('cf2be146-e51f-4f03-aaad-b352867a8ae1')

    def __init__(self, *args, **kw):
        super(IGPDatasetExtension, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPDatasetExtension.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPDatasetExtension, self).get_Name()
    def get_CLSID(self):
        '''Method IGPDatasetExtension.get_CLSID

           OUTPUT
            CLSID               : GUID*'''
        return super(IGPDatasetExtension, self).get_CLSID()
    def put_Name(self, Name):
        '''Method IGPDatasetExtension.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPDatasetExtension, self).put_Name(Name)
    def put_CLSID(self, CLSID):
        '''Method IGPDatasetExtension.put_CLSID

           INPUT
            CLSID               : GUID'''
        return super(IGPDatasetExtension, self).put_CLSID(CLSID)
    CLSID = property(get_CLSID, put_CLSID, None)
    Name = property(get_Name, put_Name, None)

class IGPSubtype(_esriGeoDatabase.IGPSubtype):
    _IID = uuid.UUID('60cc7230-e78d-4e22-b3c2-069e8fe8ac42')

    def __init__(self, *args, **kw):
        super(IGPSubtype, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SubtypeName(self, SubtypeName):
        '''Method IGPSubtype.put_SubtypeName

           INPUT
            SubtypeName         : BSTR'''
        return super(IGPSubtype, self).put_SubtypeName(SubtypeName)
    def get_SubtypeName(self):
        '''Method IGPSubtype.get_SubtypeName

           OUTPUT
            SubtypeName         : BSTR*'''
        return super(IGPSubtype, self).get_SubtypeName()
    def put_SubtypeCode(self, SubtypeCode):
        '''Method IGPSubtype.put_SubtypeCode

           INPUT
            SubtypeCode         : long'''
        return super(IGPSubtype, self).put_SubtypeCode(SubtypeCode)
    def get_SubtypeCode(self):
        '''Method IGPSubtype.get_SubtypeCode

           OUTPUT
            SubtypeCode         : long*'''
        return super(IGPSubtype, self).get_SubtypeCode()
    def put_DefaultValue(self, FieldName, Value):
        '''Method IGPSubtype.put_DefaultValue

           INPUTS
            FieldName           : BSTR
            Value               : VARIANT'''
        return super(IGPSubtype, self).put_DefaultValue(FieldName, Value)
    def get_DefaultValue(self, FieldName):
        '''Method IGPSubtype.get_DefaultValue

           INPUT
            FieldName           : BSTR

           OUTPUT
            Value               : VARIANT*'''
        return super(IGPSubtype, self).get_DefaultValue(FieldName)
    def put_DomainName(self, FieldName, DomainName):
        '''Method IGPSubtype.put_DomainName

           INPUTS
            FieldName           : BSTR
            DomainName          : BSTR'''
        return super(IGPSubtype, self).put_DomainName(FieldName, DomainName)
    def get_DomainName(self, FieldName):
        '''Method IGPSubtype.get_DomainName

           INPUT
            FieldName           : BSTR

           OUTPUT
            DomainName          : BSTR*'''
        return super(IGPSubtype, self).get_DomainName(FieldName)
    DefaultValue = property(None, put_DefaultValue, None)
    DomainName = property(None, put_DomainName, None)
    SubtypeCode = property(get_SubtypeCode, put_SubtypeCode, None)
    SubtypeName = property(get_SubtypeName, put_SubtypeName, None)
    DefaultValue = IndexProperty(get_DefaultValue, None)
    DomainName = IndexProperty(get_DomainName, None)

class IWorkspaceDataElements(_esriGeoDatabase.IWorkspaceDataElements):
    _IID = uuid.UUID('94dde7ce-aa25-4682-8290-f7ddffee5d98')
    def GetWorkspaceDataElement(self, browseOptions):
        '''Method IWorkspaceDataElements.GetWorkspaceDataElement

           INPUT
            browseOptions       : IDEBrowseOptions*

           OUTPUT
            workspaceDataElement: IDataElement**'''
        return super(IWorkspaceDataElements, self).GetWorkspaceDataElement(browseOptions)
    def GetDatasetDataElement(self, datasetSpec, browseOptions):
        '''Method IWorkspaceDataElements.GetDatasetDataElement

           INPUTS
            datasetSpec         : IUnknown*
            browseOptions       : IDEBrowseOptions*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IWorkspaceDataElements, self).GetDatasetDataElement(datasetSpec, browseOptions)

class IWorkspaceDataElements2(_esriGeoDatabase.IWorkspaceDataElements2):
    _IID = uuid.UUID('8c205305-1f0e-4133-8419-845de172cd7a')
    def GetNameObject(self, DataElement):
        '''Method IWorkspaceDataElements2.GetNameObject

           INPUT
            DataElement         : IDataElement*

           OUTPUT
            nameObject          : IName**'''
        return super(IWorkspaceDataElements2, self).GetNameObject(DataElement)
    def GetWorkspaceDataElement(self, browseOptions):
        '''Method IWorkspaceDataElements.GetWorkspaceDataElement (from IWorkspaceDataElements)

           INPUT
            browseOptions       : IDEBrowseOptions*

           OUTPUT
            workspaceDataElement: IDataElement**'''
        return super(IWorkspaceDataElements2, self).GetWorkspaceDataElement(browseOptions)
    def GetDatasetDataElement(self, datasetSpec, browseOptions):
        '''Method IWorkspaceDataElements.GetDatasetDataElement (from IWorkspaceDataElements)

           INPUTS
            datasetSpec         : IUnknown*
            browseOptions       : IDEBrowseOptions*

           OUTPUT
            DataElement         : IDataElement**'''
        return super(IWorkspaceDataElements2, self).GetDatasetDataElement(datasetSpec, browseOptions)

class IOleDBConnectionInfo(_esriGeoDatabase.IOleDBConnectionInfo):
    _IID = uuid.UUID('1ae253d9-675e-48eb-958f-68554cbf26d3')
    def SetParameters(self, ConnectionString, password):
        '''Method IOleDBConnectionInfo.SetParameters

           INPUTS
            ConnectionString    : BSTR
            password            : BSTR'''
        return super(IOleDBConnectionInfo, self).SetParameters(ConnectionString, password)
    def ClearParameters(self, ConnectionString):
        '''Method IOleDBConnectionInfo.ClearParameters

           INPUT
            ConnectionString    : BSTR'''
        return super(IOleDBConnectionInfo, self).ClearParameters(ConnectionString)

class ITin(_esriGeoDatabase.ITin):
    _IID = uuid.UUID('73b80fbb-ff33-11d1-a549-0000f8774f0f')

    def __init__(self, *args, **kw):
        super(ITin, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsEmpty(self):
        '''Method ITin.get_IsEmpty

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITin, self).get_IsEmpty()
    def get_IsDelaunay(self):
        '''Method ITin.get_IsDelaunay

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITin, self).get_IsDelaunay()
    def SaveAs(self, newName, pOverWrite):
        '''Method ITin.SaveAs

           INPUTS
            newName             : BSTR
            pOverWrite          : VARIANT*'''
        return super(ITin, self).SaveAs(newName, pOverWrite)
    def get_Extent(self):
        '''Method ITin.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ITin, self).get_Extent()
    def get_DataNodeCount(self):
        '''Method ITin.get_DataNodeCount

           OUTPUT
            pcNodes             : long*'''
        return super(ITin, self).get_DataNodeCount()
    def get_DataEdgeCount(self):
        '''Method ITin.get_DataEdgeCount

           OUTPUT
            pcEdges             : long*'''
        return super(ITin, self).get_DataEdgeCount()
    def get_DataTriangleCount(self):
        '''Method ITin.get_DataTriangleCount

           OUTPUT
            pcTriangles         : long*'''
        return super(ITin, self).get_DataTriangleCount()
    def get_ZFactor(self):
        '''Method ITin.get_ZFactor

           OUTPUT
            pFactor             : double*'''
        return super(ITin, self).get_ZFactor()
    def put_ZFactor(self, pFactor):
        '''Method ITin.put_ZFactor

           INPUT
            pFactor             : double'''
        return super(ITin, self).put_ZFactor(pFactor)
    def get_Version(self):
        '''Method ITin.get_Version

           OUTPUT
            pVer                : long*'''
        return super(ITin, self).get_Version()
    def get_HasNodeTagValues(self):
        '''Method ITin.get_HasNodeTagValues

           OUTPUT
            pbHasNodeValues     : VARIANT_BOOL*'''
        return super(ITin, self).get_HasNodeTagValues()
    def get_HasEdgeTagValues(self):
        '''Method ITin.get_HasEdgeTagValues

           OUTPUT
            pbHasEdgeValues     : VARIANT_BOOL*'''
        return super(ITin, self).get_HasEdgeTagValues()
    def get_HasTriangleTagValues(self):
        '''Method ITin.get_HasTriangleTagValues

           OUTPUT
            pbHasTriangleValues : VARIANT_BOOL*'''
        return super(ITin, self).get_HasTriangleTagValues()
    def get_Fields(self):
        '''Method ITin.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(ITin, self).get_Fields()
    DataEdgeCount = property(get_DataEdgeCount, None, None)
    DataNodeCount = property(get_DataNodeCount, None, None)
    DataTriangleCount = property(get_DataTriangleCount, None, None)
    Extent = property(get_Extent, None, None)
    Fields = property(get_Fields, None, None)
    HasEdgeTagValues = property(get_HasEdgeTagValues, None, None)
    HasNodeTagValues = property(get_HasNodeTagValues, None, None)
    HasTriangleTagValues = property(get_HasTriangleTagValues, None, None)
    IsDelaunay = property(get_IsDelaunay, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Version = property(get_Version, None, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ITinElement(_esriGeoDatabase.ITinElement):
    _IID = uuid.UUID('3e541320-1132-11d2-92f7-444553540000')
    def get_IsEmpty(self):
        '''Method ITinElement.get_IsEmpty

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinElement, self).get_IsEmpty()
    def get_TheTin(self):
        '''Method ITinElement.get_TheTin

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinElement, self).get_TheTin()
    def get_Index(self):
        '''Method ITinElement.get_Index

           OUTPUT
            pIndex              : long*'''
        return super(ITinElement, self).get_Index()
    def get_TagValue(self):
        '''Method ITinElement.get_TagValue

           OUTPUT
            pValue              : long*'''
        return super(ITinElement, self).get_TagValue()
    def SetEmpty(self):
        '''Method ITinElement.SetEmpty'''
        return super(ITinElement, self).SetEmpty()
    def Init(self, pTin, Index):
        '''Method ITinElement.Init

           INPUTS
            pTin                : ITin*
            Index               : long'''
        return super(ITinElement, self).Init(pTin, Index)
    def get_IsInsideDataArea(self):
        '''Method ITinElement.get_IsInsideDataArea

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinElement, self).get_IsInsideDataArea()
    def get_HasVoidZ(self):
        '''Method ITinElement.get_HasVoidZ

           OUTPUT
            pbHasVoidZ          : VARIANT_BOOL*'''
        return super(ITinElement, self).get_HasVoidZ()
    def get_IsInsideExtent(self, pExtent):
        '''Method ITinElement.get_IsInsideExtent

           INPUT
            pExtent             : IEnvelope*

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinElement, self).get_IsInsideExtent(pExtent)
    HasVoidZ = property(get_HasVoidZ, None, None)
    Index = property(get_Index, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsInsideDataArea = property(get_IsInsideDataArea, None, None)
    TagValue = property(get_TagValue, None, None)
    TheTin = property(get_TheTin, None, None)
    IsInsideExtent = IndexProperty(get_IsInsideExtent, None)

class ITinFeatureSeed(_esriGeoDatabase.ITinFeatureSeed):
    _IID = uuid.UUID('bb5dbc74-b9ca-11d5-abbb-0008c73fd50c')

    def __init__(self, *args, **kw):
        super(ITinFeatureSeed, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Index(self):
        '''Method ITinFeatureSeed.get_Index

           OUTPUT
            pIndex              : long*'''
        return super(ITinFeatureSeed, self).get_Index()
    def get_TagValue(self):
        '''Method ITinFeatureSeed.get_TagValue

           OUTPUT
            pValue              : long*'''
        return super(ITinFeatureSeed, self).get_TagValue()
    def get_UseTagValue(self):
        '''Method ITinFeatureSeed.get_UseTagValue

           OUTPUT
            pbUseTagValue       : VARIANT_BOOL*'''
        return super(ITinFeatureSeed, self).get_UseTagValue()
    def put_UseTagValue(self, pbUseTagValue):
        '''Method ITinFeatureSeed.put_UseTagValue

           INPUT
            pbUseTagValue       : VARIANT_BOOL'''
        return super(ITinFeatureSeed, self).put_UseTagValue(pbUseTagValue)
    Index = property(get_Index, None, None)
    TagValue = property(get_TagValue, None, None)
    UseTagValue = property(get_UseTagValue, put_UseTagValue, None)

class ITinFilter(_esriGeoDatabase.ITinFilter):
    _IID = uuid.UUID('4eee3270-fa94-11d2-ae10-000000000000')

    def __init__(self, *args, **kw):
        super(ITinFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinFilter, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinFilter, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinFilter, self).get_DataElementsOnly()
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)

class ITinDynamicFilter(_esriGeoDatabase.ITinDynamicFilter):
    _IID = uuid.UUID('0122c788-fd32-11d3-a0d6-00c04f8ece27')

    def __init__(self, *args, **kw):
        super(ITinDynamicFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, pElement):
        '''Method ITinDynamicFilter.Init

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pID                 : long*'''
        return super(ITinDynamicFilter, self).Init(pElement)
    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass (from ITinFilter)

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinDynamicFilter, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly (from ITinFilter)

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinDynamicFilter, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly (from ITinFilter)

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinDynamicFilter, self).get_DataElementsOnly()
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)

class ITinValueFilter(_esriGeoDatabase.ITinValueFilter):
    _IID = uuid.UUID('4eee3277-fa94-11d2-ae10-000000000000')

    def __init__(self, *args, **kw):
        super(ITinValueFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_LowerBound(self, pLowerBound):
        '''Method ITinValueFilter.put_LowerBound

           INPUT
            pLowerBound         : long'''
        return super(ITinValueFilter, self).put_LowerBound(pLowerBound)
    def get_LowerBound(self):
        '''Method ITinValueFilter.get_LowerBound

           OUTPUT
            pLowerBound         : long*'''
        return super(ITinValueFilter, self).get_LowerBound()
    def put_UpperBound(self, pUpperBound):
        '''Method ITinValueFilter.put_UpperBound

           INPUT
            pUpperBound         : long'''
        return super(ITinValueFilter, self).put_UpperBound(pUpperBound)
    def get_UpperBound(self):
        '''Method ITinValueFilter.get_UpperBound

           OUTPUT
            pUpperBound         : long*'''
        return super(ITinValueFilter, self).get_UpperBound()
    def putref_ClassBreaks(self, ppBreaks):
        '''Method ITinValueFilter.putref_ClassBreaks

           INPUT
            ppBreaks            : ILongArray*'''
        return super(ITinValueFilter, self).putref_ClassBreaks(ppBreaks)
    def get_ClassBreaks(self):
        '''Method ITinValueFilter.get_ClassBreaks

           OUTPUT
            ppBreaks            : ILongArray**'''
        return super(ITinValueFilter, self).get_ClassBreaks()
    def putref_ClassBreakCodes(self, ppCodes):
        '''Method ITinValueFilter.putref_ClassBreakCodes

           INPUT
            ppCodes             : ILongArray*'''
        return super(ITinValueFilter, self).putref_ClassBreakCodes(ppCodes)
    def get_ClassBreakCodes(self):
        '''Method ITinValueFilter.get_ClassBreakCodes

           OUTPUT
            ppCodes             : ILongArray**'''
        return super(ITinValueFilter, self).get_ClassBreakCodes()
    def put_UniqueValue(self, pValue):
        '''Method ITinValueFilter.put_UniqueValue

           INPUT
            pValue              : long'''
        return super(ITinValueFilter, self).put_UniqueValue(pValue)
    def get_UniqueValue(self):
        '''Method ITinValueFilter.get_UniqueValue

           OUTPUT
            pValue              : long*'''
        return super(ITinValueFilter, self).get_UniqueValue()
    def put_ActiveBound(self, pType):
        '''Method ITinValueFilter.put_ActiveBound

           INPUT
            pType               : esriTinBoundType'''
        return super(ITinValueFilter, self).put_ActiveBound(pType)
    def get_ActiveBound(self):
        '''Method ITinValueFilter.get_ActiveBound

           OUTPUT
            pType               : esriTinBoundType*'''
        return super(ITinValueFilter, self).get_ActiveBound()
    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass (from ITinFilter)

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinValueFilter, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly (from ITinFilter)

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinValueFilter, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly (from ITinFilter)

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinValueFilter, self).get_DataElementsOnly()
    ActiveBound = property(get_ActiveBound, put_ActiveBound, None)
    ClassBreakCodes = property(get_ClassBreakCodes, putref_ClassBreakCodes, None)
    ClassBreaks = property(get_ClassBreaks, putref_ClassBreaks, None)
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)
    LowerBound = property(get_LowerBound, put_LowerBound, None)
    UniqueValue = property(get_UniqueValue, put_UniqueValue, None)
    UpperBound = property(get_UpperBound, put_UpperBound, None)

class ITinValueFilter2(_esriGeoDatabase.ITinValueFilter2):
    _IID = uuid.UUID('3110a889-298b-4849-8abb-7a3383fd1a4e')

    def __init__(self, *args, **kw):
        super(ITinValueFilter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ZeroTagValueExcluded(self, pbExcludeZeroTagValue):
        '''Method ITinValueFilter2.put_ZeroTagValueExcluded

           INPUT
            pbExcludeZeroTagValue: VARIANT_BOOL'''
        return super(ITinValueFilter2, self).put_ZeroTagValueExcluded(pbExcludeZeroTagValue)
    def get_ZeroTagValueExcluded(self):
        '''Method ITinValueFilter2.get_ZeroTagValueExcluded

           OUTPUT
            pbExcludeZeroTagValue: VARIANT_BOOL*'''
        return super(ITinValueFilter2, self).get_ZeroTagValueExcluded()
    def put_LowerBound(self, pLowerBound):
        '''Method ITinValueFilter.put_LowerBound (from ITinValueFilter)

           INPUT
            pLowerBound         : long'''
        return super(ITinValueFilter2, self).put_LowerBound(pLowerBound)
    def get_LowerBound(self):
        '''Method ITinValueFilter.get_LowerBound (from ITinValueFilter)

           OUTPUT
            pLowerBound         : long*'''
        return super(ITinValueFilter2, self).get_LowerBound()
    def put_UpperBound(self, pUpperBound):
        '''Method ITinValueFilter.put_UpperBound (from ITinValueFilter)

           INPUT
            pUpperBound         : long'''
        return super(ITinValueFilter2, self).put_UpperBound(pUpperBound)
    def get_UpperBound(self):
        '''Method ITinValueFilter.get_UpperBound (from ITinValueFilter)

           OUTPUT
            pUpperBound         : long*'''
        return super(ITinValueFilter2, self).get_UpperBound()
    def putref_ClassBreaks(self, ppBreaks):
        '''Method ITinValueFilter.putref_ClassBreaks (from ITinValueFilter)

           INPUT
            ppBreaks            : ILongArray*'''
        return super(ITinValueFilter2, self).putref_ClassBreaks(ppBreaks)
    def get_ClassBreaks(self):
        '''Method ITinValueFilter.get_ClassBreaks (from ITinValueFilter)

           OUTPUT
            ppBreaks            : ILongArray**'''
        return super(ITinValueFilter2, self).get_ClassBreaks()
    def putref_ClassBreakCodes(self, ppCodes):
        '''Method ITinValueFilter.putref_ClassBreakCodes (from ITinValueFilter)

           INPUT
            ppCodes             : ILongArray*'''
        return super(ITinValueFilter2, self).putref_ClassBreakCodes(ppCodes)
    def get_ClassBreakCodes(self):
        '''Method ITinValueFilter.get_ClassBreakCodes (from ITinValueFilter)

           OUTPUT
            ppCodes             : ILongArray**'''
        return super(ITinValueFilter2, self).get_ClassBreakCodes()
    def put_UniqueValue(self, pValue):
        '''Method ITinValueFilter.put_UniqueValue (from ITinValueFilter)

           INPUT
            pValue              : long'''
        return super(ITinValueFilter2, self).put_UniqueValue(pValue)
    def get_UniqueValue(self):
        '''Method ITinValueFilter.get_UniqueValue (from ITinValueFilter)

           OUTPUT
            pValue              : long*'''
        return super(ITinValueFilter2, self).get_UniqueValue()
    def put_ActiveBound(self, pType):
        '''Method ITinValueFilter.put_ActiveBound (from ITinValueFilter)

           INPUT
            pType               : esriTinBoundType'''
        return super(ITinValueFilter2, self).put_ActiveBound(pType)
    def get_ActiveBound(self):
        '''Method ITinValueFilter.get_ActiveBound (from ITinValueFilter)

           OUTPUT
            pType               : esriTinBoundType*'''
        return super(ITinValueFilter2, self).get_ActiveBound()
    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass (from ITinFilter)

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinValueFilter2, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly (from ITinFilter)

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinValueFilter2, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly (from ITinFilter)

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinValueFilter2, self).get_DataElementsOnly()
    ActiveBound = property(get_ActiveBound, put_ActiveBound, None)
    ClassBreakCodes = property(get_ClassBreakCodes, putref_ClassBreakCodes, None)
    ClassBreaks = property(get_ClassBreaks, putref_ClassBreaks, None)
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)
    LowerBound = property(get_LowerBound, put_LowerBound, None)
    UniqueValue = property(get_UniqueValue, put_UniqueValue, None)
    UpperBound = property(get_UpperBound, put_UpperBound, None)
    ZeroTagValueExcluded = property(get_ZeroTagValueExcluded, put_ZeroTagValueExcluded, None)

class ITinTriangleFilter(_esriGeoDatabase.ITinTriangleFilter):
    _IID = uuid.UUID('4eee3279-fa94-11d2-ae10-000000000000')

    def __init__(self, *args, **kw):
        super(ITinTriangleFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PropertyType(self, pType):
        '''Method ITinTriangleFilter.put_PropertyType

           INPUT
            pType               : esriTinTrianglePropertyType'''
        return super(ITinTriangleFilter, self).put_PropertyType(pType)
    def get_PropertyType(self):
        '''Method ITinTriangleFilter.get_PropertyType

           OUTPUT
            pType               : esriTinTrianglePropertyType*'''
        return super(ITinTriangleFilter, self).get_PropertyType()
    def put_LowerBound(self, pBound):
        '''Method ITinTriangleFilter.put_LowerBound

           INPUT
            pBound              : double'''
        return super(ITinTriangleFilter, self).put_LowerBound(pBound)
    def get_LowerBound(self):
        '''Method ITinTriangleFilter.get_LowerBound

           OUTPUT
            pBound              : double*'''
        return super(ITinTriangleFilter, self).get_LowerBound()
    def put_UpperBound(self, pBound):
        '''Method ITinTriangleFilter.put_UpperBound

           INPUT
            pBound              : double'''
        return super(ITinTriangleFilter, self).put_UpperBound(pBound)
    def get_UpperBound(self):
        '''Method ITinTriangleFilter.get_UpperBound

           OUTPUT
            pBound              : double*'''
        return super(ITinTriangleFilter, self).get_UpperBound()
    def putref_ClassBreaks(self, ppBreaks):
        '''Method ITinTriangleFilter.putref_ClassBreaks

           INPUT
            ppBreaks            : IDoubleArray*'''
        return super(ITinTriangleFilter, self).putref_ClassBreaks(ppBreaks)
    def get_ClassBreaks(self):
        '''Method ITinTriangleFilter.get_ClassBreaks

           OUTPUT
            ppBreaks            : IDoubleArray**'''
        return super(ITinTriangleFilter, self).get_ClassBreaks()
    def putref_ClassBreakCodes(self, ppCodes):
        '''Method ITinTriangleFilter.putref_ClassBreakCodes

           INPUT
            ppCodes             : ILongArray*'''
        return super(ITinTriangleFilter, self).putref_ClassBreakCodes(ppCodes)
    def get_ClassBreakCodes(self):
        '''Method ITinTriangleFilter.get_ClassBreakCodes

           OUTPUT
            ppCodes             : ILongArray**'''
        return super(ITinTriangleFilter, self).get_ClassBreakCodes()
    def put_UniqueValue(self, pValue):
        '''Method ITinTriangleFilter.put_UniqueValue

           INPUT
            pValue              : double'''
        return super(ITinTriangleFilter, self).put_UniqueValue(pValue)
    def get_UniqueValue(self):
        '''Method ITinTriangleFilter.get_UniqueValue

           OUTPUT
            pValue              : double*'''
        return super(ITinTriangleFilter, self).get_UniqueValue()
    def put_ActiveBound(self, pType):
        '''Method ITinTriangleFilter.put_ActiveBound

           INPUT
            pType               : esriTinBoundType'''
        return super(ITinTriangleFilter, self).put_ActiveBound(pType)
    def get_ActiveBound(self):
        '''Method ITinTriangleFilter.get_ActiveBound

           OUTPUT
            pType               : esriTinBoundType*'''
        return super(ITinTriangleFilter, self).get_ActiveBound()
    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass (from ITinFilter)

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinTriangleFilter, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly (from ITinFilter)

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinTriangleFilter, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly (from ITinFilter)

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinTriangleFilter, self).get_DataElementsOnly()
    ActiveBound = property(get_ActiveBound, put_ActiveBound, None)
    ClassBreakCodes = property(get_ClassBreakCodes, putref_ClassBreakCodes, None)
    ClassBreaks = property(get_ClassBreaks, putref_ClassBreaks, None)
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)
    LowerBound = property(get_LowerBound, put_LowerBound, None)
    PropertyType = property(get_PropertyType, put_PropertyType, None)
    UniqueValue = property(get_UniqueValue, put_UniqueValue, None)
    UpperBound = property(get_UpperBound, put_UpperBound, None)

class ITinEdgeTypeFilter(_esriGeoDatabase.ITinEdgeTypeFilter):
    _IID = uuid.UUID('f9b595ae-a9a6-11d3-ab4b-0008c73fd50c')

    def __init__(self, *args, **kw):
        super(ITinEdgeTypeFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Type(self, pType):
        '''Method ITinEdgeTypeFilter.put_Type

           INPUT
            pType               : esriTinEdgeType'''
        return super(ITinEdgeTypeFilter, self).put_Type(pType)
    def get_Type(self):
        '''Method ITinEdgeTypeFilter.get_Type

           OUTPUT
            pType               : esriTinEdgeType*'''
        return super(ITinEdgeTypeFilter, self).get_Type()
    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass (from ITinFilter)

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinEdgeTypeFilter, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly (from ITinFilter)

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinEdgeTypeFilter, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly (from ITinFilter)

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinEdgeTypeFilter, self).get_DataElementsOnly()
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)
    Type = property(get_Type, put_Type, None)

class ITinNodeSourceFilter(_esriGeoDatabase.ITinNodeSourceFilter):
    _IID = uuid.UUID('d462b2cc-b2ab-11d5-abb9-0008c73fd50c')

    def __init__(self, *args, **kw):
        super(ITinNodeSourceFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Criteria(self, pCriteria):
        '''Method ITinNodeSourceFilter.put_Criteria

           INPUT
            pCriteria           : long'''
        return super(ITinNodeSourceFilter, self).put_Criteria(pCriteria)
    def get_Criteria(self):
        '''Method ITinNodeSourceFilter.get_Criteria

           OUTPUT
            pCriteria           : long*'''
        return super(ITinNodeSourceFilter, self).get_Criteria()
    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass (from ITinFilter)

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinNodeSourceFilter, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly (from ITinFilter)

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinNodeSourceFilter, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly (from ITinFilter)

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinNodeSourceFilter, self).get_DataElementsOnly()
    Criteria = property(get_Criteria, put_Criteria, None)
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)

class IEnumTinElement(_esriGeoDatabase.IEnumTinElement):
    _IID = uuid.UUID('4eee3271-fa94-11d2-ae10-000000000000')
    def Reset(self):
        '''Method IEnumTinElement.Reset'''
        return super(IEnumTinElement, self).Reset()
    def Next(self):
        '''Method IEnumTinElement.Next

           OUTPUT
            ppElement           : ITinElement**'''
        return super(IEnumTinElement, self).Next()
    def __iter__(self):
        try:
            super(IEnumTinElement, self).Reset()
            val = super(IEnumTinElement, self).Next()
            while val:
                yield val
                val = super(IEnumTinElement, self).Next()
        except:
            pass
    def QueryNext(self, pElement):
        '''Method IEnumTinElement.QueryNext

           INPUT
            pElement            : ITinElement*'''
        return super(IEnumTinElement, self).QueryNext(pElement)

class ITinAdvanced3(_esriGeoDatabase.ITinAdvanced3):
    _IID = uuid.UUID('911fde18-abb0-4f7b-b960-f40dcd527b46')
    def get_TinVersion(self):
        '''Method ITinAdvanced3.get_TinVersion

           OUTPUT
            pVersion            : esriTinVersion*'''
        return super(ITinAdvanced3, self).get_TinVersion()
    def GetPreviousEdgeIndexInTriangle(self, edgeIndex):
        '''Method ITinAdvanced3.GetPreviousEdgeIndexInTriangle

           INPUT
            edgeIndex           : long

           OUTPUT
            pIndex              : long*'''
        return super(ITinAdvanced3, self).GetPreviousEdgeIndexInTriangle(edgeIndex)
    def GetNextEdgeIndexInTriangle(self, edgeIndex):
        '''Method ITinAdvanced3.GetNextEdgeIndexInTriangle

           INPUT
            edgeIndex           : long

           OUTPUT
            pIndex              : long*'''
        return super(ITinAdvanced3, self).GetNextEdgeIndexInTriangle(edgeIndex)
    def GetNextCWEdgeIndex(self, edgeIndex):
        '''Method ITinAdvanced3.GetNextCWEdgeIndex

           INPUT
            edgeIndex           : long

           OUTPUT
            pIndex              : long*'''
        return super(ITinAdvanced3, self).GetNextCWEdgeIndex(edgeIndex)
    def GetNextCCWEdgeIndex(self, edgeIndex):
        '''Method ITinAdvanced3.GetNextCCWEdgeIndex

           INPUT
            edgeIndex           : long

           OUTPUT
            pIndex              : long*'''
        return super(ITinAdvanced3, self).GetNextCCWEdgeIndex(edgeIndex)
    def QueryElementIndicesAroundNode(self, Type, localNodeIndex, triangleIndex, pIndices):
        '''Method ITinAdvanced3.QueryElementIndicesAroundNode

           INPUTS
            Type                : esriTinElementType
            localNodeIndex      : long
            triangleIndex       : long
            pIndices            : ILongArray*'''
        return super(ITinAdvanced3, self).QueryElementIndicesAroundNode(Type, localNodeIndex, triangleIndex, pIndices)
    TinVersion = property(get_TinVersion, None, None)

class ITinNodeInfo(_esriGeoDatabase.ITinNodeInfo):
    _IID = uuid.UUID('11f2c1ac-188b-4a4f-b221-573c1a0c753d')
    def get_NodeEditInfo(self, nodeIndex):
        '''Method ITinNodeInfo.get_NodeEditInfo

           INPUT
            nodeIndex           : long

           OUTPUT
            pInfo               : long*'''
        return super(ITinNodeInfo, self).get_NodeEditInfo(nodeIndex)
    NodeEditInfo = IndexProperty(get_NodeEditInfo, None)

class ITinEditErrorLog(_esriGeoDatabase.ITinEditErrorLog):
    _IID = uuid.UUID('0f7f5a1e-5588-40ab-b7f0-777a4b0c8958')

    def __init__(self, *args, **kw):
        super(ITinEditErrorLog, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ClearEditErrorLog(self):
        '''Method ITinEditErrorLog.ClearEditErrorLog'''
        return super(ITinEditErrorLog, self).ClearEditErrorLog()
    def SaveEditErrorLog(self, fileName):
        '''Method ITinEditErrorLog.SaveEditErrorLog

           INPUT
            fileName            : BSTR'''
        return super(ITinEditErrorLog, self).SaveEditErrorLog(fileName)
    def get_EditErrorCount(self):
        '''Method ITinEditErrorLog.get_EditErrorCount

           OUTPUT
            pcErrors            : long*'''
        return super(ITinEditErrorLog, self).get_EditErrorCount()
    def put_CurrentObjectClassName(self, pName):
        '''Method ITinEditErrorLog.put_CurrentObjectClassName

           INPUT
            pName               : BSTR'''
        return super(ITinEditErrorLog, self).put_CurrentObjectClassName(pName)
    def get_CurrentObjectClassName(self):
        '''Method ITinEditErrorLog.get_CurrentObjectClassName

           OUTPUT
            pName               : BSTR*'''
        return super(ITinEditErrorLog, self).get_CurrentObjectClassName()
    def put_CurrentObjectID(self, pID):
        '''Method ITinEditErrorLog.put_CurrentObjectID

           INPUT
            pID                 : long'''
        return super(ITinEditErrorLog, self).put_CurrentObjectID(pID)
    def get_CurrentObjectID(self):
        '''Method ITinEditErrorLog.get_CurrentObjectID

           OUTPUT
            pID                 : long*'''
        return super(ITinEditErrorLog, self).get_CurrentObjectID()
    CurrentObjectClassName = property(get_CurrentObjectClassName, put_CurrentObjectClassName, None)
    CurrentObjectID = property(get_CurrentObjectID, put_CurrentObjectID, None)
    EditErrorCount = property(get_EditErrorCount, None, None)

class ITinSelection(_esriGeoDatabase.ITinSelection):
    _IID = uuid.UUID('b0dbc8e2-b4b1-11d3-ab4d-0008c73fd50c')
    def HasSelection(self, Type):
        '''Method ITinSelection.HasSelection

           INPUT
            Type                : esriTinElementType

           OUTPUT
            pbHasSelection      : VARIANT_BOOL*'''
        return super(ITinSelection, self).HasSelection(Type)
    def ClearSelection(self, Type):
        '''Method ITinSelection.ClearSelection

           INPUT
            Type                : esriTinElementType'''
        return super(ITinSelection, self).ClearSelection(Type)
    def SetSelection(self, pElements, action):
        '''Method ITinSelection.SetSelection

           INPUTS
            pElements           : IEnumTinElement*
            action              : esriTinSelectionType'''
        return super(ITinSelection, self).SetSelection(pElements, action)
    def GetSelection(self, Type):
        '''Method ITinSelection.GetSelection

           INPUT
            Type                : esriTinElementType

           OUTPUT
            ppElements          : IEnumTinElement**'''
        return super(ITinSelection, self).GetSelection(Type)
    def SelectAll(self, Type, bDataElementsOnly):
        '''Method ITinSelection.SelectAll

           INPUTS
            Type                : esriTinElementType
            bDataElementsOnly   : VARIANT_BOOL'''
        return super(ITinSelection, self).SelectAll(Type, bDataElementsOnly)
    def FlipSelection(self, Type, bDataElementsOnly):
        '''Method ITinSelection.FlipSelection

           INPUTS
            Type                : esriTinElementType
            bDataElementsOnly   : VARIANT_BOOL'''
        return super(ITinSelection, self).FlipSelection(Type, bDataElementsOnly)
    def SelectByArea(self, Type, pArea, bPassThrough, bDataElementsOnly, action):
        '''Method ITinSelection.SelectByArea

           INPUTS
            Type                : esriTinElementType
            pArea               : IPolygon*
            bPassThrough        : VARIANT_BOOL
            bDataElementsOnly   : VARIANT_BOOL
            action              : esriTinSelectionType'''
        return super(ITinSelection, self).SelectByArea(Type, pArea, bPassThrough, bDataElementsOnly, action)
    def SelectByEnvelope(self, Type, pEnvelope, bPassThrough, bDataElementsOnly, action):
        '''Method ITinSelection.SelectByEnvelope

           INPUTS
            Type                : esriTinElementType
            pEnvelope           : IEnvelope*
            bPassThrough        : VARIANT_BOOL
            bDataElementsOnly   : VARIANT_BOOL
            action              : esriTinSelectionType'''
        return super(ITinSelection, self).SelectByEnvelope(Type, pEnvelope, bPassThrough, bDataElementsOnly, action)
    def SetSelected(self, Index, Type, action):
        '''Method ITinSelection.SetSelected

           INPUTS
            Index               : long
            Type                : esriTinElementType
            action              : esriTinSelectionType'''
        return super(ITinSelection, self).SetSelected(Index, Type, action)
    def IsSelected(self, Index, Type):
        '''Method ITinSelection.IsSelected

           INPUTS
            Index               : long
            Type                : esriTinElementType

           OUTPUT
            pbIsSelected        : VARIANT_BOOL*'''
        return super(ITinSelection, self).IsSelected(Index, Type)
    def QuerySelectionExtent(self, Type, pExtent):
        '''Method ITinSelection.QuerySelectionExtent

           INPUTS
            Type                : esriTinElementType
            pExtent             : IEnvelope*'''
        return super(ITinSelection, self).QuerySelectionExtent(Type, pExtent)
    def get_SelectedElementCount(self, Type):
        '''Method ITinSelection.get_SelectedElementCount

           INPUT
            Type                : esriTinElementType

           OUTPUT
            pCount              : long*'''
        return super(ITinSelection, self).get_SelectedElementCount(Type)
    SelectedElementCount = IndexProperty(get_SelectedElementCount, None)

class ITinWorkspace(_esriGeoDatabase.ITinWorkspace):
    _IID = uuid.UUID('aa2ee0d8-4c34-11d2-a56f-0000f8774f0f')
    def get_IsTin(self, Name):
        '''Method ITinWorkspace.get_IsTin

           INPUT
            Name                : BSTR

           OUTPUT
            pbIsTin             : VARIANT_BOOL*'''
        return super(ITinWorkspace, self).get_IsTin(Name)
    def get_IsTinByFullName(self, Name):
        '''Method ITinWorkspace.get_IsTinByFullName

           INPUT
            Name                : BSTR

           OUTPUT
            pbIsTin             : VARIANT_BOOL*'''
        return super(ITinWorkspace, self).get_IsTinByFullName(Name)
    def OpenTin(self, Name):
        '''Method ITinWorkspace.OpenTin

           INPUT
            Name                : BSTR

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinWorkspace, self).OpenTin(Name)
    IsTin = IndexProperty(get_IsTin, None)
    IsTinByFullName = IndexProperty(get_IsTinByFullName, None)

class ITinImporter(_esriGeoDatabase.ITinImporter):
    _IID = uuid.UUID('d7eff758-0095-41a4-ab6c-e4a87f35bedb')
    def ImportFromLandXML(self, xmlName, TinName, pIndices, pTrackCancel):
        '''Method ITinImporter.ImportFromLandXML

           INPUTS
            xmlName             : BSTR
            TinName             : BSTR
            pIndices            : ILongArray*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppOutTinNames       : IStringArray**'''
        return super(ITinImporter, self).ImportFromLandXML(xmlName, TinName, pIndices, pTrackCancel)
    def GetTinNamesFromLandXML(self, xmlName, pTrackCancel):
        '''Method ITinImporter.GetTinNamesFromLandXML

           INPUTS
            xmlName             : BSTR
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppOutTinNames       : IStringArray**'''
        return super(ITinImporter, self).GetTinNamesFromLandXML(xmlName, pTrackCancel)

class ITinClock(_esriGeoDatabase.ITinClock):
    _IID = uuid.UUID('75d08ef4-23aa-11d5-aba6-0008c73fd50c')
    def Reset(self):
        '''Method ITinClock.Reset'''
        return super(ITinClock, self).Reset()
    def Sleep(self, Seconds):
        '''Method ITinClock.Sleep

           INPUT
            Seconds             : double'''
        return super(ITinClock, self).Sleep(Seconds)
    def GetElapsedTime(self):
        '''Method ITinClock.GetElapsedTime

           OUTPUT
            pElapsedTime        : double*'''
        return super(ITinClock, self).GetElapsedTime()

class ITinEdgeTypeFilter2(_esriGeoDatabase.ITinEdgeTypeFilter2):
    _IID = uuid.UUID('18bbf602-373f-4093-b553-39aa9762c77f')

    def __init__(self, *args, **kw):
        super(ITinEdgeTypeFilter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_RegularEdgesExcluded(self, pbExcludeRegularEdge):
        '''Method ITinEdgeTypeFilter2.put_RegularEdgesExcluded

           INPUT
            pbExcludeRegularEdge: VARIANT_BOOL'''
        return super(ITinEdgeTypeFilter2, self).put_RegularEdgesExcluded(pbExcludeRegularEdge)
    def get_RegularEdgesExcluded(self):
        '''Method ITinEdgeTypeFilter2.get_RegularEdgesExcluded

           OUTPUT
            pbExcludeRegularEdge: VARIANT_BOOL*'''
        return super(ITinEdgeTypeFilter2, self).get_RegularEdgesExcluded()
    def put_Type(self, pType):
        '''Method ITinEdgeTypeFilter.put_Type (from ITinEdgeTypeFilter)

           INPUT
            pType               : esriTinEdgeType'''
        return super(ITinEdgeTypeFilter2, self).put_Type(pType)
    def get_Type(self):
        '''Method ITinEdgeTypeFilter.get_Type (from ITinEdgeTypeFilter)

           OUTPUT
            pType               : esriTinEdgeType*'''
        return super(ITinEdgeTypeFilter2, self).get_Type()
    def CanPass(self, pElement):
        '''Method ITinFilter.CanPass (from ITinFilter)

           INPUT
            pElement            : ITinElement*

           OUTPUT
            pbCanPass           : VARIANT_BOOL*'''
        return super(ITinEdgeTypeFilter2, self).CanPass(pElement)
    def put_DataElementsOnly(self, pbDataElementsOnly):
        '''Method ITinFilter.put_DataElementsOnly (from ITinFilter)

           INPUT
            pbDataElementsOnly  : VARIANT_BOOL'''
        return super(ITinEdgeTypeFilter2, self).put_DataElementsOnly(pbDataElementsOnly)
    def get_DataElementsOnly(self):
        '''Method ITinFilter.get_DataElementsOnly (from ITinFilter)

           OUTPUT
            pbDataElementsOnly  : VARIANT_BOOL*'''
        return super(ITinEdgeTypeFilter2, self).get_DataElementsOnly()
    DataElementsOnly = property(get_DataElementsOnly, put_DataElementsOnly, None)
    RegularEdgesExcluded = property(get_RegularEdgesExcluded, put_RegularEdgesExcluded, None)
    Type = property(get_Type, put_Type, None)

class IXYEvent2FieldsProperties(_esriGeoDatabase.IXYEvent2FieldsProperties):
    _IID = uuid.UUID('71045c9e-7902-11d4-9fe5-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(IXYEvent2FieldsProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_XFieldName(self, FieldName):
        '''Method IXYEvent2FieldsProperties.put_XFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IXYEvent2FieldsProperties, self).put_XFieldName(FieldName)
    def get_XFieldName(self):
        '''Method IXYEvent2FieldsProperties.get_XFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IXYEvent2FieldsProperties, self).get_XFieldName()
    def put_YFieldName(self, FieldName):
        '''Method IXYEvent2FieldsProperties.put_YFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IXYEvent2FieldsProperties, self).put_YFieldName(FieldName)
    def get_YFieldName(self):
        '''Method IXYEvent2FieldsProperties.get_YFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IXYEvent2FieldsProperties, self).get_YFieldName()
    def put_ZFieldName(self, FieldName):
        '''Method IXYEvent2FieldsProperties.put_ZFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IXYEvent2FieldsProperties, self).put_ZFieldName(FieldName)
    def get_ZFieldName(self):
        '''Method IXYEvent2FieldsProperties.get_ZFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IXYEvent2FieldsProperties, self).get_ZFieldName()
    XFieldName = property(get_XFieldName, put_XFieldName, None)
    YFieldName = property(get_YFieldName, put_YFieldName, None)
    ZFieldName = property(get_ZFieldName, put_ZFieldName, None)

class INetworkElement(_esriGeoDatabase.INetworkElement):
    _IID = uuid.UUID('ed843586-99b4-4e36-9684-5bec34938906')
    def get_EID(self):
        '''Method INetworkElement.get_EID

           OUTPUT
            EID                 : long*'''
        return super(INetworkElement, self).get_EID()
    def get_ElementType(self):
        '''Method INetworkElement.get_ElementType

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkElement, self).get_ElementType()
    def get_SourceID(self):
        '''Method INetworkElement.get_SourceID

           OUTPUT
            SourceID            : long*'''
        return super(INetworkElement, self).get_SourceID()
    def get_OID(self):
        '''Method INetworkElement.get_OID

           OUTPUT
            OID                 : long*'''
        return super(INetworkElement, self).get_OID()
    def get_AttributeValue(self, AttributeID):
        '''Method INetworkElement.get_AttributeValue

           INPUT
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkElement, self).get_AttributeValue(AttributeID)
    def get_AttributeValueByName(self, AttributeName):
        '''Method INetworkElement.get_AttributeValueByName

           INPUT
            AttributeName       : BSTR

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkElement, self).get_AttributeValueByName(AttributeName)
    EID = property(get_EID, None, None)
    ElementType = property(get_ElementType, None, None)
    OID = property(get_OID, None, None)
    SourceID = property(get_SourceID, None, None)
    AttributeValue = IndexProperty(get_AttributeValue, None)
    AttributeValueByName = IndexProperty(get_AttributeValueByName, None)

class INetworkScriptEvaluatorFunctions(_esriGeoDatabase.INetworkScriptEvaluatorFunctions):
    _IID = uuid.UUID('58718f2b-880f-41f2-82ce-3bb3144c6866')
    def get_ParameterValueByName(self, parameterName):
        '''Method INetworkScriptEvaluatorFunctions.get_ParameterValueByName

           INPUT
            parameterName       : BSTR

           OUTPUT
            parameterValue      : VARIANT*'''
        return super(INetworkScriptEvaluatorFunctions, self).get_ParameterValueByName(parameterName)
    ParameterValueByName = IndexProperty(get_ParameterValueByName, None)

class INetworkAttribute(_esriGeoDatabase.INetworkAttribute):
    _IID = uuid.UUID('ae92a9b6-9c80-41b1-b84d-765f18b43625')

    def __init__(self, *args, **kw):
        super(INetworkAttribute, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method INetworkAttribute.get_Name

           OUTPUT
            AttributeName       : BSTR*'''
        return super(INetworkAttribute, self).get_Name()
    def put_Name(self, AttributeName):
        '''Method INetworkAttribute.put_Name

           INPUT
            AttributeName       : BSTR'''
        return super(INetworkAttribute, self).put_Name(AttributeName)
    def get_ID(self):
        '''Method INetworkAttribute.get_ID

           OUTPUT
            AttributeID         : long*'''
        return super(INetworkAttribute, self).get_ID()
    def get_DataType(self):
        '''Method INetworkAttribute.get_DataType

           OUTPUT
            DataType            : esriNetworkAttributeDataType*'''
        return super(INetworkAttribute, self).get_DataType()
    def put_DataType(self, DataType):
        '''Method INetworkAttribute.put_DataType

           INPUT
            DataType            : esriNetworkAttributeDataType'''
        return super(INetworkAttribute, self).put_DataType(DataType)
    def get_UsageType(self):
        '''Method INetworkAttribute.get_UsageType

           OUTPUT
            UsageType           : esriNetworkAttributeUsageType*'''
        return super(INetworkAttribute, self).get_UsageType()
    def put_UsageType(self, UsageType):
        '''Method INetworkAttribute.put_UsageType

           INPUT
            UsageType           : esriNetworkAttributeUsageType'''
        return super(INetworkAttribute, self).put_UsageType(UsageType)
    def get_Units(self):
        '''Method INetworkAttribute.get_Units

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(INetworkAttribute, self).get_Units()
    def put_Units(self, Units):
        '''Method INetworkAttribute.put_Units

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(INetworkAttribute, self).put_Units(Units)
    DataType = property(get_DataType, put_DataType, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, put_Name, None)
    Units = property(get_Units, put_Units, None)
    UsageType = property(get_UsageType, put_UsageType, None)

class IShields(_esriGeoDatabase.IShields):
    _IID = uuid.UUID('9e82750b-bddc-40a1-9a63-ff699ffc55e1')

    def __init__(self, *args, **kw):
        super(IShields, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TypeFieldName(self):
        '''Method IShields.get_TypeFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IShields, self).get_TypeFieldName()
    def put_TypeFieldName(self, Name):
        '''Method IShields.put_TypeFieldName

           INPUT
            Name                : BSTR'''
        return super(IShields, self).put_TypeFieldName(Name)
    def get_NumberFieldName(self):
        '''Method IShields.get_NumberFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IShields, self).get_NumberFieldName()
    def put_NumberFieldName(self, Name):
        '''Method IShields.put_NumberFieldName

           INPUT
            Name                : BSTR'''
        return super(IShields, self).put_NumberFieldName(Name)
    def get_CombinedFieldName(self):
        '''Method IShields.get_CombinedFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IShields, self).get_CombinedFieldName()
    def put_CombinedFieldName(self, Name):
        '''Method IShields.put_CombinedFieldName

           INPUT
            Name                : BSTR'''
        return super(IShields, self).put_CombinedFieldName(Name)
    def get_UseCombinedField(self):
        '''Method IShields.get_UseCombinedField

           OUTPUT
            useCombined         : VARIANT_BOOL*'''
        return super(IShields, self).get_UseCombinedField()
    def put_UseCombinedField(self, useCombined):
        '''Method IShields.put_UseCombinedField

           INPUT
            useCombined         : VARIANT_BOOL'''
        return super(IShields, self).put_UseCombinedField(useCombined)
    def get_ShieldCount(self):
        '''Method IShields.get_ShieldCount

           OUTPUT
            Count               : long*'''
        return super(IShields, self).get_ShieldCount()
    def get_ShieldType(self, Index):
        '''Method IShields.get_ShieldType

           INPUT
            Index               : long

           OUTPUT
            Type                : BSTR*'''
        return super(IShields, self).get_ShieldType(Index)
    def get_ShieldDescription(self, Index):
        '''Method IShields.get_ShieldDescription

           INPUT
            Index               : long

           OUTPUT
            Type                : BSTR*'''
        return super(IShields, self).get_ShieldDescription(Index)
    def AddShield(self, Type, Description):
        '''Method IShields.AddShield

           INPUTS
            Type                : BSTR
            Description         : BSTR'''
        return super(IShields, self).AddShield(Type, Description)
    def DeleteShield(self, Index):
        '''Method IShields.DeleteShield

           INPUT
            Index               : long'''
        return super(IShields, self).DeleteShield(Index)
    CombinedFieldName = property(get_CombinedFieldName, put_CombinedFieldName, None)
    NumberFieldName = property(get_NumberFieldName, put_NumberFieldName, None)
    ShieldCount = property(get_ShieldCount, None, None)
    TypeFieldName = property(get_TypeFieldName, put_TypeFieldName, None)
    UseCombinedField = property(get_UseCombinedField, put_UseCombinedField, None)
    ShieldDescription = IndexProperty(get_ShieldDescription, None)
    ShieldType = IndexProperty(get_ShieldType, None)

class INetworkSourceDirections(_esriGeoDatabase.INetworkSourceDirections):
    _IID = uuid.UUID('dfe6c801-152d-4d0f-b3aa-54331384d777')

    def __init__(self, *args, **kw):
        super(INetworkSourceDirections, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Shields(self):
        '''Method INetworkSourceDirections.get_Shields

           OUTPUT
            Shields             : IShields**'''
        return super(INetworkSourceDirections, self).get_Shields()
    def putref_Shields(self, Shields):
        '''Method INetworkSourceDirections.putref_Shields

           INPUT
            Shields             : IShields*'''
        return super(INetworkSourceDirections, self).putref_Shields(Shields)
    def get_AdminAreaFieldName(self):
        '''Method INetworkSourceDirections.get_AdminAreaFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkSourceDirections, self).get_AdminAreaFieldName()
    def put_AdminAreaFieldName(self, Name):
        '''Method INetworkSourceDirections.put_AdminAreaFieldName

           INPUT
            Name                : BSTR'''
        return super(INetworkSourceDirections, self).put_AdminAreaFieldName(Name)
    def get_StreetNameFields(self):
        '''Method INetworkSourceDirections.get_StreetNameFields

           OUTPUT
            Fields              : IArray**'''
        return super(INetworkSourceDirections, self).get_StreetNameFields()
    def putref_StreetNameFields(self, Fields):
        '''Method INetworkSourceDirections.putref_StreetNameFields

           INPUT
            Fields              : IArray*'''
        return super(INetworkSourceDirections, self).putref_StreetNameFields(Fields)
    AdminAreaFieldName = property(get_AdminAreaFieldName, put_AdminAreaFieldName, None)
    Shields = property(get_Shields, putref_Shields, None)
    StreetNameFields = property(get_StreetNameFields, putref_StreetNameFields, None)

class INetworkSource(_esriGeoDatabase.INetworkSource):
    _IID = uuid.UUID('10f8d75c-1d54-4f2a-8ce8-fb7d50a0df1d')

    def __init__(self, *args, **kw):
        super(INetworkSource, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ID(self):
        '''Method INetworkSource.get_ID

           OUTPUT
            ID                  : long*'''
        return super(INetworkSource, self).get_ID()
    def get_ElementType(self):
        '''Method INetworkSource.get_ElementType

           OUTPUT
            ElementType         : esriNetworkElementType*'''
        return super(INetworkSource, self).get_ElementType()
    def put_ElementType(self, ElementType):
        '''Method INetworkSource.put_ElementType

           INPUT
            ElementType         : esriNetworkElementType'''
        return super(INetworkSource, self).put_ElementType(ElementType)
    def get_Name(self):
        '''Method INetworkSource.get_Name

           OUTPUT
            SourceName          : BSTR*'''
        return super(INetworkSource, self).get_Name()
    def put_Name(self, SourceName):
        '''Method INetworkSource.put_Name

           INPUT
            SourceName          : BSTR'''
        return super(INetworkSource, self).put_Name(SourceName)
    def get_Properties(self):
        '''Method INetworkSource.get_Properties

           OUTPUT
            sourceProperties    : IPropertySet**'''
        return super(INetworkSource, self).get_Properties()
    def put_Properties(self, sourceProperties):
        '''Method INetworkSource.put_Properties

           INPUT
            sourceProperties    : IPropertySet*'''
        return super(INetworkSource, self).put_Properties(sourceProperties)
    def get_UsesGeometryInConnectivity(self):
        '''Method INetworkSource.get_UsesGeometryInConnectivity

           OUTPUT
            usesGeometry        : VARIANT_BOOL*'''
        return super(INetworkSource, self).get_UsesGeometryInConnectivity()
    def get_SourceType(self):
        '''Method INetworkSource.get_SourceType

           OUTPUT
            SourceType          : esriNetworkSourceType*'''
        return super(INetworkSource, self).get_SourceType()
    def get_NetworkSourceDirections(self):
        '''Method INetworkSource.get_NetworkSourceDirections

           OUTPUT
            sourceDirections    : INetworkSourceDirections**'''
        return super(INetworkSource, self).get_NetworkSourceDirections()
    def putref_NetworkSourceDirections(self, sourceDirections):
        '''Method INetworkSource.putref_NetworkSourceDirections

           INPUT
            sourceDirections    : INetworkSourceDirections*'''
        return super(INetworkSource, self).putref_NetworkSourceDirections(sourceDirections)
    ElementType = property(get_ElementType, put_ElementType, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, put_Name, None)
    NetworkSourceDirections = property(get_NetworkSourceDirections, putref_NetworkSourceDirections, None)
    Properties = property(get_Properties, put_Properties, None)
    SourceType = property(get_SourceType, None, None)
    UsesGeometryInConnectivity = property(get_UsesGeometryInConnectivity, None, None)

class INetworkDataset(_esriGeoDatabase.INetworkDataset):
    _IID = uuid.UUID('5299f003-fca2-453d-ab8e-28b9ac6648b5')
    def get_Buildable(self):
        '''Method INetworkDataset.get_Buildable

           OUTPUT
            Buildable           : VARIANT_BOOL*'''
        return super(INetworkDataset, self).get_Buildable()
    def get_NetworkType(self):
        '''Method INetworkDataset.get_NetworkType

           OUTPUT
            Type                : esriNetworkDatasetType*'''
        return super(INetworkDataset, self).get_NetworkType()
    def get_SupportsTurns(self):
        '''Method INetworkDataset.get_SupportsTurns

           OUTPUT
            SupportsTurns       : VARIANT_BOOL*'''
        return super(INetworkDataset, self).get_SupportsTurns()
    def get_AttributeByID(self, ID):
        '''Method INetworkDataset.get_AttributeByID

           INPUT
            ID                  : long

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkDataset, self).get_AttributeByID(ID)
    def get_AttributeByName(self, Name):
        '''Method INetworkDataset.get_AttributeByName

           INPUT
            Name                : BSTR

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkDataset, self).get_AttributeByName(Name)
    def get_AttributeCount(self):
        '''Method INetworkDataset.get_AttributeCount

           OUTPUT
            Count               : long*'''
        return super(INetworkDataset, self).get_AttributeCount()
    def get_Attribute(self, Index):
        '''Method INetworkDataset.get_Attribute

           INPUT
            Index               : long

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkDataset, self).get_Attribute(Index)
    def get_SourceByID(self, ID):
        '''Method INetworkDataset.get_SourceByID

           INPUT
            ID                  : long

           OUTPUT
            Source              : INetworkSource**'''
        return super(INetworkDataset, self).get_SourceByID(ID)
    def get_SourceByName(self, Name):
        '''Method INetworkDataset.get_SourceByName

           INPUT
            Name                : BSTR

           OUTPUT
            Source              : INetworkSource**'''
        return super(INetworkDataset, self).get_SourceByName(Name)
    def get_SourceCount(self):
        '''Method INetworkDataset.get_SourceCount

           OUTPUT
            Count               : long*'''
        return super(INetworkDataset, self).get_SourceCount()
    def get_Source(self, Index):
        '''Method INetworkDataset.get_Source

           INPUT
            Index               : long

           OUTPUT
            Source              : INetworkSource**'''
        return super(INetworkDataset, self).get_Source(Index)
    def get_State(self):
        '''Method INetworkDataset.get_State

           OUTPUT
            State               : esriNetworkDatasetState*'''
        return super(INetworkDataset, self).get_State()
    AttributeCount = property(get_AttributeCount, None, None)
    Buildable = property(get_Buildable, None, None)
    NetworkType = property(get_NetworkType, None, None)
    SourceCount = property(get_SourceCount, None, None)
    State = property(get_State, None, None)
    SupportsTurns = property(get_SupportsTurns, None, None)
    Attribute = IndexProperty(get_Attribute, None)
    AttributeByID = IndexProperty(get_AttributeByID, None)
    AttributeByName = IndexProperty(get_AttributeByName, None)
    Source = IndexProperty(get_Source, None)
    SourceByID = IndexProperty(get_SourceByID, None)
    SourceByName = IndexProperty(get_SourceByName, None)

class INetworkDirections(_esriGeoDatabase.INetworkDirections):
    _IID = uuid.UUID('acda7b59-b41f-48b8-a1ce-582fe481053f')

    def __init__(self, *args, **kw):
        super(INetworkDirections, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefaultOutputLengthUnits(self):
        '''Method INetworkDirections.get_DefaultOutputLengthUnits

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(INetworkDirections, self).get_DefaultOutputLengthUnits()
    def put_DefaultOutputLengthUnits(self, Units):
        '''Method INetworkDirections.put_DefaultOutputLengthUnits

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(INetworkDirections, self).put_DefaultOutputLengthUnits(Units)
    def get_LengthAttributeName(self):
        '''Method INetworkDirections.get_LengthAttributeName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkDirections, self).get_LengthAttributeName()
    def put_LengthAttributeName(self, Name):
        '''Method INetworkDirections.put_LengthAttributeName

           INPUT
            Name                : BSTR'''
        return super(INetworkDirections, self).put_LengthAttributeName(Name)
    def get_TimeAttributeName(self):
        '''Method INetworkDirections.get_TimeAttributeName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkDirections, self).get_TimeAttributeName()
    def put_TimeAttributeName(self, Name):
        '''Method INetworkDirections.put_TimeAttributeName

           INPUT
            Name                : BSTR'''
        return super(INetworkDirections, self).put_TimeAttributeName(Name)
    def get_RoadClassAttributeName(self):
        '''Method INetworkDirections.get_RoadClassAttributeName

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkDirections, self).get_RoadClassAttributeName()
    def put_RoadClassAttributeName(self, Name):
        '''Method INetworkDirections.put_RoadClassAttributeName

           INPUT
            Name                : BSTR'''
        return super(INetworkDirections, self).put_RoadClassAttributeName(Name)
    DefaultOutputLengthUnits = property(get_DefaultOutputLengthUnits, put_DefaultOutputLengthUnits, None)
    LengthAttributeName = property(get_LengthAttributeName, put_LengthAttributeName, None)
    RoadClassAttributeName = property(get_RoadClassAttributeName, put_RoadClassAttributeName, None)
    TimeAttributeName = property(get_TimeAttributeName, put_TimeAttributeName, None)

class IDENetworkDataset(_esriGeoDatabase.IDENetworkDataset):
    _IID = uuid.UUID('71e4aa21-1957-4224-b505-984c189aa520')

    def __init__(self, *args, **kw):
        super(IDENetworkDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NetworkType(self):
        '''Method IDENetworkDataset.get_NetworkType

           OUTPUT
            Type                : esriNetworkDatasetType*'''
        return super(IDENetworkDataset, self).get_NetworkType()
    def put_NetworkType(self, Type):
        '''Method IDENetworkDataset.put_NetworkType

           INPUT
            Type                : esriNetworkDatasetType'''
        return super(IDENetworkDataset, self).put_NetworkType(Type)
    def get_Attributes(self):
        '''Method IDENetworkDataset.get_Attributes

           OUTPUT
            Attributes          : IArray**'''
        return super(IDENetworkDataset, self).get_Attributes()
    def putref_Attributes(self, Attributes):
        '''Method IDENetworkDataset.putref_Attributes

           INPUT
            Attributes          : IArray*'''
        return super(IDENetworkDataset, self).putref_Attributes(Attributes)
    def get_ConfigurationKeyword(self):
        '''Method IDENetworkDataset.get_ConfigurationKeyword

           OUTPUT
            ConfigKeyword       : BSTR*'''
        return super(IDENetworkDataset, self).get_ConfigurationKeyword()
    def put_ConfigurationKeyword(self, ConfigKeyword):
        '''Method IDENetworkDataset.put_ConfigurationKeyword

           INPUT
            ConfigKeyword       : BSTR'''
        return super(IDENetworkDataset, self).put_ConfigurationKeyword(ConfigKeyword)
    def get_Sources(self):
        '''Method IDENetworkDataset.get_Sources

           OUTPUT
            Sources             : IArray**'''
        return super(IDENetworkDataset, self).get_Sources()
    def putref_Sources(self, Sources):
        '''Method IDENetworkDataset.putref_Sources

           INPUT
            Sources             : IArray*'''
        return super(IDENetworkDataset, self).putref_Sources(Sources)
    def get_Directions(self):
        '''Method IDENetworkDataset.get_Directions

           OUTPUT
            Directions          : INetworkDirections**'''
        return super(IDENetworkDataset, self).get_Directions()
    def putref_Directions(self, Directions):
        '''Method IDENetworkDataset.putref_Directions

           INPUT
            Directions          : INetworkDirections*'''
        return super(IDENetworkDataset, self).putref_Directions(Directions)
    def get_SupportsTurns(self):
        '''Method IDENetworkDataset.get_SupportsTurns

           OUTPUT
            SupportsTurns       : VARIANT_BOOL*'''
        return super(IDENetworkDataset, self).get_SupportsTurns()
    def put_SupportsTurns(self, SupportsTurns):
        '''Method IDENetworkDataset.put_SupportsTurns

           INPUT
            SupportsTurns       : VARIANT_BOOL'''
        return super(IDENetworkDataset, self).put_SupportsTurns(SupportsTurns)
    def get_Buildable(self):
        '''Method IDENetworkDataset.get_Buildable

           OUTPUT
            SupportsTurns       : VARIANT_BOOL*'''
        return super(IDENetworkDataset, self).get_Buildable()
    def put_Buildable(self, SupportsTurns):
        '''Method IDENetworkDataset.put_Buildable

           INPUT
            SupportsTurns       : VARIANT_BOOL'''
        return super(IDENetworkDataset, self).put_Buildable(SupportsTurns)
    def get_UserData(self):
        '''Method IDENetworkDataset.get_UserData

           OUTPUT
            userProperties      : IPropertySet**'''
        return super(IDENetworkDataset, self).get_UserData()
    def put_UserData(self, userProperties):
        '''Method IDENetworkDataset.put_UserData

           INPUT
            userProperties      : IPropertySet*'''
        return super(IDENetworkDataset, self).put_UserData(userProperties)
    def get_Properties(self):
        '''Method IDENetworkDataset.get_Properties

           OUTPUT
            datasetProperties   : IPropertySet**'''
        return super(IDENetworkDataset, self).get_Properties()
    def put_Properties(self, datasetProperties):
        '''Method IDENetworkDataset.put_Properties

           INPUT
            datasetProperties   : IPropertySet*'''
        return super(IDENetworkDataset, self).put_Properties(datasetProperties)
    def get_HierarchyClusterAttribute(self):
        '''Method IDENetworkDataset.get_HierarchyClusterAttribute

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(IDENetworkDataset, self).get_HierarchyClusterAttribute()
    def put_HierarchyClusterAttribute(self, Attribute):
        '''Method IDENetworkDataset.put_HierarchyClusterAttribute

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(IDENetworkDataset, self).put_HierarchyClusterAttribute(Attribute)
    def put_HierarchyLevelCount(self, Count):
        '''Method IDENetworkDataset.put_HierarchyLevelCount

           INPUT
            Count               : long'''
        return super(IDENetworkDataset, self).put_HierarchyLevelCount(Count)
    def get_HierarchyLevelCount(self):
        '''Method IDENetworkDataset.get_HierarchyLevelCount

           OUTPUT
            Count               : long*'''
        return super(IDENetworkDataset, self).get_HierarchyLevelCount()
    def put_MaxValueForHierarchy(self, level, Value):
        '''Method IDENetworkDataset.put_MaxValueForHierarchy

           INPUTS
            level               : long
            Value               : long'''
        return super(IDENetworkDataset, self).put_MaxValueForHierarchy(level, Value)
    def get_MaxValueForHierarchy(self, level):
        '''Method IDENetworkDataset.get_MaxValueForHierarchy

           INPUT
            level               : long

           OUTPUT
            Value               : long*'''
        return super(IDENetworkDataset, self).get_MaxValueForHierarchy(level)
    Attributes = property(get_Attributes, putref_Attributes, None)
    Buildable = property(get_Buildable, put_Buildable, None)
    ConfigurationKeyword = property(get_ConfigurationKeyword, put_ConfigurationKeyword, None)
    Directions = property(get_Directions, putref_Directions, None)
    HierarchyClusterAttribute = property(get_HierarchyClusterAttribute, put_HierarchyClusterAttribute, None)
    HierarchyLevelCount = property(get_HierarchyLevelCount, put_HierarchyLevelCount, None)
    MaxValueForHierarchy = property(None, put_MaxValueForHierarchy, None)
    NetworkType = property(get_NetworkType, put_NetworkType, None)
    Properties = property(get_Properties, put_Properties, None)
    Sources = property(get_Sources, putref_Sources, None)
    SupportsTurns = property(get_SupportsTurns, put_SupportsTurns, None)
    UserData = property(get_UserData, put_UserData, None)
    MaxValueForHierarchy = IndexProperty(get_MaxValueForHierarchy, None)

class IEnumNetworkElement(_esriGeoDatabase.IEnumNetworkElement):
    _IID = uuid.UUID('cae89ba8-0b3b-439f-89f3-430c3fab0182')
    def Reset(self):
        '''Method IEnumNetworkElement.Reset'''
        return super(IEnumNetworkElement, self).Reset()
    def Next(self):
        '''Method IEnumNetworkElement.Next

           OUTPUT
            Element             : INetworkElement**'''
        return super(IEnumNetworkElement, self).Next()
    def __iter__(self):
        try:
            super(IEnumNetworkElement, self).Reset()
            val = super(IEnumNetworkElement, self).Next()
            while val:
                yield val
                val = super(IEnumNetworkElement, self).Next()
        except:
            pass

class INetworkDirections2(_esriGeoDatabase.INetworkDirections2):
    _IID = uuid.UUID('85301471-abad-49ee-aa65-fc498d75f362')

    def __init__(self, *args, **kw):
        super(INetworkDirections2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AttributeMappings(self):
        '''Method INetworkDirections2.get_AttributeMappings

           OUTPUT
            AttributeMappings   : IArray**'''
        return super(INetworkDirections2, self).get_AttributeMappings()
    def putref_AttributeMappings(self, AttributeMappings):
        '''Method INetworkDirections2.putref_AttributeMappings

           INPUT
            AttributeMappings   : IArray*'''
        return super(INetworkDirections2, self).putref_AttributeMappings(AttributeMappings)
    def get_DefaultOutputLengthUnits(self):
        '''Method INetworkDirections.get_DefaultOutputLengthUnits (from INetworkDirections)

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(INetworkDirections2, self).get_DefaultOutputLengthUnits()
    def put_DefaultOutputLengthUnits(self, Units):
        '''Method INetworkDirections.put_DefaultOutputLengthUnits (from INetworkDirections)

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(INetworkDirections2, self).put_DefaultOutputLengthUnits(Units)
    def get_LengthAttributeName(self):
        '''Method INetworkDirections.get_LengthAttributeName (from INetworkDirections)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkDirections2, self).get_LengthAttributeName()
    def put_LengthAttributeName(self, Name):
        '''Method INetworkDirections.put_LengthAttributeName (from INetworkDirections)

           INPUT
            Name                : BSTR'''
        return super(INetworkDirections2, self).put_LengthAttributeName(Name)
    def get_TimeAttributeName(self):
        '''Method INetworkDirections.get_TimeAttributeName (from INetworkDirections)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkDirections2, self).get_TimeAttributeName()
    def put_TimeAttributeName(self, Name):
        '''Method INetworkDirections.put_TimeAttributeName (from INetworkDirections)

           INPUT
            Name                : BSTR'''
        return super(INetworkDirections2, self).put_TimeAttributeName(Name)
    def get_RoadClassAttributeName(self):
        '''Method INetworkDirections.get_RoadClassAttributeName (from INetworkDirections)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkDirections2, self).get_RoadClassAttributeName()
    def put_RoadClassAttributeName(self, Name):
        '''Method INetworkDirections.put_RoadClassAttributeName (from INetworkDirections)

           INPUT
            Name                : BSTR'''
        return super(INetworkDirections2, self).put_RoadClassAttributeName(Name)
    AttributeMappings = property(get_AttributeMappings, putref_AttributeMappings, None)
    DefaultOutputLengthUnits = property(get_DefaultOutputLengthUnits, put_DefaultOutputLengthUnits, None)
    LengthAttributeName = property(get_LengthAttributeName, put_LengthAttributeName, None)
    RoadClassAttributeName = property(get_RoadClassAttributeName, put_RoadClassAttributeName, None)
    TimeAttributeName = property(get_TimeAttributeName, put_TimeAttributeName, None)

class INetworkSourceDirections2(_esriGeoDatabase.INetworkSourceDirections2):
    _IID = uuid.UUID('cd84e891-2b4a-4ced-83f2-dedd9e24e16b')

    def __init__(self, *args, **kw):
        super(INetworkSourceDirections2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FieldMappings(self):
        '''Method INetworkSourceDirections2.get_FieldMappings

           OUTPUT
            FieldMappings       : IArray**'''
        return super(INetworkSourceDirections2, self).get_FieldMappings()
    def putref_FieldMappings(self, FieldMappings):
        '''Method INetworkSourceDirections2.putref_FieldMappings

           INPUT
            FieldMappings       : IArray*'''
        return super(INetworkSourceDirections2, self).putref_FieldMappings(FieldMappings)
    def get_Shields(self):
        '''Method INetworkSourceDirections.get_Shields (from INetworkSourceDirections)

           OUTPUT
            Shields             : IShields**'''
        return super(INetworkSourceDirections2, self).get_Shields()
    def putref_Shields(self, Shields):
        '''Method INetworkSourceDirections.putref_Shields (from INetworkSourceDirections)

           INPUT
            Shields             : IShields*'''
        return super(INetworkSourceDirections2, self).putref_Shields(Shields)
    def get_AdminAreaFieldName(self):
        '''Method INetworkSourceDirections.get_AdminAreaFieldName (from INetworkSourceDirections)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkSourceDirections2, self).get_AdminAreaFieldName()
    def put_AdminAreaFieldName(self, Name):
        '''Method INetworkSourceDirections.put_AdminAreaFieldName (from INetworkSourceDirections)

           INPUT
            Name                : BSTR'''
        return super(INetworkSourceDirections2, self).put_AdminAreaFieldName(Name)
    def get_StreetNameFields(self):
        '''Method INetworkSourceDirections.get_StreetNameFields (from INetworkSourceDirections)

           OUTPUT
            Fields              : IArray**'''
        return super(INetworkSourceDirections2, self).get_StreetNameFields()
    def putref_StreetNameFields(self, Fields):
        '''Method INetworkSourceDirections.putref_StreetNameFields (from INetworkSourceDirections)

           INPUT
            Fields              : IArray*'''
        return super(INetworkSourceDirections2, self).putref_StreetNameFields(Fields)
    AdminAreaFieldName = property(get_AdminAreaFieldName, put_AdminAreaFieldName, None)
    FieldMappings = property(get_FieldMappings, putref_FieldMappings, None)
    Shields = property(get_Shields, putref_Shields, None)
    StreetNameFields = property(get_StreetNameFields, putref_StreetNameFields, None)

class ITrafficData(_esriGeoDatabase.ITrafficData):
    _IID = uuid.UUID('eb382bcd-c05e-45e7-a625-3c0b55525775')
    def get_TimeInterval(self):
        '''Method ITrafficData.get_TimeInterval

           OUTPUT
            TimeInterval        : double*'''
        return super(ITrafficData, self).get_TimeInterval()
    def get_TimeIntervalUnits(self):
        '''Method ITrafficData.get_TimeIntervalUnits

           OUTPUT
            TimeIntervalUnits   : esriTimeUnits*'''
        return super(ITrafficData, self).get_TimeIntervalUnits()
    TimeInterval = property(get_TimeInterval, None, None)
    TimeIntervalUnits = property(get_TimeIntervalUnits, None, None)

class ISignposts(_esriGeoDatabase.ISignposts):
    _IID = uuid.UUID('e44759d6-d13b-4e36-93ce-1e755f3177d5')

    def __init__(self, *args, **kw):
        super(ISignposts, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SignpostFeatureClassName(self):
        '''Method ISignposts.get_SignpostFeatureClassName

           OUTPUT
            ClassName           : BSTR*'''
        return super(ISignposts, self).get_SignpostFeatureClassName()
    def put_SignpostFeatureClassName(self, ClassName):
        '''Method ISignposts.put_SignpostFeatureClassName

           INPUT
            ClassName           : BSTR'''
        return super(ISignposts, self).put_SignpostFeatureClassName(ClassName)
    def get_SignpostStreetsTableName(self):
        '''Method ISignposts.get_SignpostStreetsTableName

           OUTPUT
            TableName           : BSTR*'''
        return super(ISignposts, self).get_SignpostStreetsTableName()
    def put_SignpostStreetsTableName(self, TableName):
        '''Method ISignposts.put_SignpostStreetsTableName

           INPUT
            TableName           : BSTR'''
        return super(ISignposts, self).put_SignpostStreetsTableName(TableName)
    SignpostFeatureClassName = property(get_SignpostFeatureClassName, put_SignpostFeatureClassName, None)
    SignpostStreetsTableName = property(get_SignpostStreetsTableName, put_SignpostStreetsTableName, None)

class IEnumHierarchyRange(_esriGeoDatabase.IEnumHierarchyRange):
    _IID = uuid.UUID('f41ff50c-6aa3-4d41-8953-e7c4e3986438')
    def Reset(self):
        '''Method IEnumHierarchyRange.Reset'''
        return super(IEnumHierarchyRange, self).Reset()
    def Next(self):
        '''Method IEnumHierarchyRange.Next

           OUTPUTS
            Index               : long*
            lowRange            : long*
            highRange           : long*'''
        return super(IEnumHierarchyRange, self).Next()
    def __iter__(self):
        try:
            super(IEnumHierarchyRange, self).Reset()
            val = super(IEnumHierarchyRange, self).Next()
            while any(val):
                yield val
                val = super(IEnumHierarchyRange, self).Next()
        except:
            pass

class IGPNetworkDatasetMembership(_esriGeoDatabase.IGPNetworkDatasetMembership):
    _IID = uuid.UUID('911aa830-945b-40b7-bd9b-97b451cfbe7a')

    def __init__(self, *args, **kw):
        super(IGPNetworkDatasetMembership, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NetworkDatasetName(self):
        '''Method IGPNetworkDatasetMembership.get_NetworkDatasetName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPNetworkDatasetMembership, self).get_NetworkDatasetName()
    def put_NetworkDatasetName(self, Name):
        '''Method IGPNetworkDatasetMembership.put_NetworkDatasetName

           INPUT
            Name                : BSTR'''
        return super(IGPNetworkDatasetMembership, self).put_NetworkDatasetName(Name)
    NetworkDatasetName = property(get_NetworkDatasetName, put_NetworkDatasetName, None)

class IDENetworkDataset2(_esriGeoDatabase.IDENetworkDataset2):
    _IID = uuid.UUID('9ec0957a-9127-4084-8d0d-d4341101a15e')

    def __init__(self, *args, **kw):
        super(IDENetworkDataset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ElevationModel(self):
        '''Method IDENetworkDataset2.get_ElevationModel

           OUTPUT
            networkElevationModel: esriNetworkElevationModel*'''
        return super(IDENetworkDataset2, self).get_ElevationModel()
    def put_ElevationModel(self, networkElevationModel):
        '''Method IDENetworkDataset2.put_ElevationModel

           INPUT
            networkElevationModel: esriNetworkElevationModel'''
        return super(IDENetworkDataset2, self).put_ElevationModel(networkElevationModel)
    def get_TrafficData(self):
        '''Method IDENetworkDataset2.get_TrafficData

           OUTPUT
            TrafficData         : ITrafficData**'''
        return super(IDENetworkDataset2, self).get_TrafficData()
    def putref_TrafficData(self, TrafficData):
        '''Method IDENetworkDataset2.putref_TrafficData

           INPUT
            TrafficData         : ITrafficData*'''
        return super(IDENetworkDataset2, self).putref_TrafficData(TrafficData)
    def get_TimeZoneAttributeName(self):
        '''Method IDENetworkDataset2.get_TimeZoneAttributeName

           OUTPUT
            AttributeName       : BSTR*'''
        return super(IDENetworkDataset2, self).get_TimeZoneAttributeName()
    def put_TimeZoneAttributeName(self, AttributeName):
        '''Method IDENetworkDataset2.put_TimeZoneAttributeName

           INPUT
            AttributeName       : BSTR'''
        return super(IDENetworkDataset2, self).put_TimeZoneAttributeName(AttributeName)
    def get_TimeZoneTableName(self):
        '''Method IDENetworkDataset2.get_TimeZoneTableName

           OUTPUT
            TableName           : BSTR*'''
        return super(IDENetworkDataset2, self).get_TimeZoneTableName()
    def put_TimeZoneTableName(self, TableName):
        '''Method IDENetworkDataset2.put_TimeZoneTableName

           INPUT
            TableName           : BSTR'''
        return super(IDENetworkDataset2, self).put_TimeZoneTableName(TableName)
    def get_NetworkType(self):
        '''Method IDENetworkDataset.get_NetworkType (from IDENetworkDataset)

           OUTPUT
            Type                : esriNetworkDatasetType*'''
        return super(IDENetworkDataset2, self).get_NetworkType()
    def put_NetworkType(self, Type):
        '''Method IDENetworkDataset.put_NetworkType (from IDENetworkDataset)

           INPUT
            Type                : esriNetworkDatasetType'''
        return super(IDENetworkDataset2, self).put_NetworkType(Type)
    def get_Attributes(self):
        '''Method IDENetworkDataset.get_Attributes (from IDENetworkDataset)

           OUTPUT
            Attributes          : IArray**'''
        return super(IDENetworkDataset2, self).get_Attributes()
    def putref_Attributes(self, Attributes):
        '''Method IDENetworkDataset.putref_Attributes (from IDENetworkDataset)

           INPUT
            Attributes          : IArray*'''
        return super(IDENetworkDataset2, self).putref_Attributes(Attributes)
    def get_ConfigurationKeyword(self):
        '''Method IDENetworkDataset.get_ConfigurationKeyword (from IDENetworkDataset)

           OUTPUT
            ConfigKeyword       : BSTR*'''
        return super(IDENetworkDataset2, self).get_ConfigurationKeyword()
    def put_ConfigurationKeyword(self, ConfigKeyword):
        '''Method IDENetworkDataset.put_ConfigurationKeyword (from IDENetworkDataset)

           INPUT
            ConfigKeyword       : BSTR'''
        return super(IDENetworkDataset2, self).put_ConfigurationKeyword(ConfigKeyword)
    def get_Sources(self):
        '''Method IDENetworkDataset.get_Sources (from IDENetworkDataset)

           OUTPUT
            Sources             : IArray**'''
        return super(IDENetworkDataset2, self).get_Sources()
    def putref_Sources(self, Sources):
        '''Method IDENetworkDataset.putref_Sources (from IDENetworkDataset)

           INPUT
            Sources             : IArray*'''
        return super(IDENetworkDataset2, self).putref_Sources(Sources)
    def get_Directions(self):
        '''Method IDENetworkDataset.get_Directions (from IDENetworkDataset)

           OUTPUT
            Directions          : INetworkDirections**'''
        return super(IDENetworkDataset2, self).get_Directions()
    def putref_Directions(self, Directions):
        '''Method IDENetworkDataset.putref_Directions (from IDENetworkDataset)

           INPUT
            Directions          : INetworkDirections*'''
        return super(IDENetworkDataset2, self).putref_Directions(Directions)
    def get_SupportsTurns(self):
        '''Method IDENetworkDataset.get_SupportsTurns (from IDENetworkDataset)

           OUTPUT
            SupportsTurns       : VARIANT_BOOL*'''
        return super(IDENetworkDataset2, self).get_SupportsTurns()
    def put_SupportsTurns(self, SupportsTurns):
        '''Method IDENetworkDataset.put_SupportsTurns (from IDENetworkDataset)

           INPUT
            SupportsTurns       : VARIANT_BOOL'''
        return super(IDENetworkDataset2, self).put_SupportsTurns(SupportsTurns)
    def get_Buildable(self):
        '''Method IDENetworkDataset.get_Buildable (from IDENetworkDataset)

           OUTPUT
            SupportsTurns       : VARIANT_BOOL*'''
        return super(IDENetworkDataset2, self).get_Buildable()
    def put_Buildable(self, SupportsTurns):
        '''Method IDENetworkDataset.put_Buildable (from IDENetworkDataset)

           INPUT
            SupportsTurns       : VARIANT_BOOL'''
        return super(IDENetworkDataset2, self).put_Buildable(SupportsTurns)
    def get_UserData(self):
        '''Method IDENetworkDataset.get_UserData (from IDENetworkDataset)

           OUTPUT
            userProperties      : IPropertySet**'''
        return super(IDENetworkDataset2, self).get_UserData()
    def put_UserData(self, userProperties):
        '''Method IDENetworkDataset.put_UserData (from IDENetworkDataset)

           INPUT
            userProperties      : IPropertySet*'''
        return super(IDENetworkDataset2, self).put_UserData(userProperties)
    def get_Properties(self):
        '''Method IDENetworkDataset.get_Properties (from IDENetworkDataset)

           OUTPUT
            datasetProperties   : IPropertySet**'''
        return super(IDENetworkDataset2, self).get_Properties()
    def put_Properties(self, datasetProperties):
        '''Method IDENetworkDataset.put_Properties (from IDENetworkDataset)

           INPUT
            datasetProperties   : IPropertySet*'''
        return super(IDENetworkDataset2, self).put_Properties(datasetProperties)
    def get_HierarchyClusterAttribute(self):
        '''Method IDENetworkDataset.get_HierarchyClusterAttribute (from IDENetworkDataset)

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(IDENetworkDataset2, self).get_HierarchyClusterAttribute()
    def put_HierarchyClusterAttribute(self, Attribute):
        '''Method IDENetworkDataset.put_HierarchyClusterAttribute (from IDENetworkDataset)

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(IDENetworkDataset2, self).put_HierarchyClusterAttribute(Attribute)
    def put_HierarchyLevelCount(self, Count):
        '''Method IDENetworkDataset.put_HierarchyLevelCount (from IDENetworkDataset)

           INPUT
            Count               : long'''
        return super(IDENetworkDataset2, self).put_HierarchyLevelCount(Count)
    def get_HierarchyLevelCount(self):
        '''Method IDENetworkDataset.get_HierarchyLevelCount (from IDENetworkDataset)

           OUTPUT
            Count               : long*'''
        return super(IDENetworkDataset2, self).get_HierarchyLevelCount()
    def put_MaxValueForHierarchy(self, level, Value):
        '''Method IDENetworkDataset.put_MaxValueForHierarchy (from IDENetworkDataset)

           INPUTS
            level               : long
            Value               : long'''
        return super(IDENetworkDataset2, self).put_MaxValueForHierarchy(level, Value)
    def get_MaxValueForHierarchy(self, level):
        '''Method IDENetworkDataset.get_MaxValueForHierarchy (from IDENetworkDataset)

           INPUT
            level               : long

           OUTPUT
            Value               : long*'''
        return super(IDENetworkDataset2, self).get_MaxValueForHierarchy(level)
    Attributes = property(get_Attributes, putref_Attributes, None)
    Buildable = property(get_Buildable, put_Buildable, None)
    ConfigurationKeyword = property(get_ConfigurationKeyword, put_ConfigurationKeyword, None)
    Directions = property(get_Directions, putref_Directions, None)
    ElevationModel = property(get_ElevationModel, put_ElevationModel, None)
    HierarchyClusterAttribute = property(get_HierarchyClusterAttribute, put_HierarchyClusterAttribute, None)
    HierarchyLevelCount = property(get_HierarchyLevelCount, put_HierarchyLevelCount, None)
    MaxValueForHierarchy = property(None, put_MaxValueForHierarchy, None)
    NetworkType = property(get_NetworkType, put_NetworkType, None)
    Properties = property(get_Properties, put_Properties, None)
    Sources = property(get_Sources, putref_Sources, None)
    SupportsTurns = property(get_SupportsTurns, put_SupportsTurns, None)
    TimeZoneAttributeName = property(get_TimeZoneAttributeName, put_TimeZoneAttributeName, None)
    TimeZoneTableName = property(get_TimeZoneTableName, put_TimeZoneTableName, None)
    TrafficData = property(get_TrafficData, putref_TrafficData, None)
    UserData = property(get_UserData, put_UserData, None)
    MaxValueForHierarchy = IndexProperty(get_MaxValueForHierarchy, None)

class INetworkAttributeParameter(_esriGeoDatabase.INetworkAttributeParameter):
    _IID = uuid.UUID('51e6e103-27b3-472f-9502-001c631064b3')

    def __init__(self, *args, **kw):
        super(INetworkAttributeParameter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method INetworkAttributeParameter.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkAttributeParameter, self).get_Name()
    def put_Name(self, Name):
        '''Method INetworkAttributeParameter.put_Name

           INPUT
            Name                : BSTR'''
        return super(INetworkAttributeParameter, self).put_Name(Name)
    def get_DefaultValue(self):
        '''Method INetworkAttributeParameter.get_DefaultValue

           OUTPUT
            Value               : VARIANT*'''
        return super(INetworkAttributeParameter, self).get_DefaultValue()
    def put_DefaultValue(self, Value):
        '''Method INetworkAttributeParameter.put_DefaultValue

           INPUT
            Value               : VARIANT'''
        return super(INetworkAttributeParameter, self).put_DefaultValue(Value)
    def get_Value(self):
        '''Method INetworkAttributeParameter.get_Value

           OUTPUT
            Value               : VARIANT*'''
        return super(INetworkAttributeParameter, self).get_Value()
    def put_Value(self, Value):
        '''Method INetworkAttributeParameter.put_Value

           INPUT
            Value               : VARIANT'''
        return super(INetworkAttributeParameter, self).put_Value(Value)
    def get_VarType(self):
        '''Method INetworkAttributeParameter.get_VarType

           OUTPUT
            Value               : long*'''
        return super(INetworkAttributeParameter, self).get_VarType()
    def put_VarType(self, Value):
        '''Method INetworkAttributeParameter.put_VarType

           INPUT
            Value               : long'''
        return super(INetworkAttributeParameter, self).put_VarType(Value)
    DefaultValue = property(get_DefaultValue, put_DefaultValue, None)
    Name = property(get_Name, put_Name, None)
    Value = property(get_Value, put_Value, None)
    VarType = property(get_VarType, put_VarType, None)

class INetworkAttributeParameter2(_esriGeoDatabase.INetworkAttributeParameter2):
    _IID = uuid.UUID('d4ef63a8-e754-4b09-b282-afbc6dcbf5e9')

    def __init__(self, *args, **kw):
        super(INetworkAttributeParameter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ParameterUsageType(self):
        '''Method INetworkAttributeParameter2.get_ParameterUsageType

           OUTPUT
            ParameterUsageType  : esriNetworkAttributeParameterUsageType*'''
        return super(INetworkAttributeParameter2, self).get_ParameterUsageType()
    def put_ParameterUsageType(self, ParameterUsageType):
        '''Method INetworkAttributeParameter2.put_ParameterUsageType

           INPUT
            ParameterUsageType  : esriNetworkAttributeParameterUsageType'''
        return super(INetworkAttributeParameter2, self).put_ParameterUsageType(ParameterUsageType)
    def get_Name(self):
        '''Method INetworkAttributeParameter.get_Name (from INetworkAttributeParameter)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkAttributeParameter2, self).get_Name()
    def put_Name(self, Name):
        '''Method INetworkAttributeParameter.put_Name (from INetworkAttributeParameter)

           INPUT
            Name                : BSTR'''
        return super(INetworkAttributeParameter2, self).put_Name(Name)
    def get_DefaultValue(self):
        '''Method INetworkAttributeParameter.get_DefaultValue (from INetworkAttributeParameter)

           OUTPUT
            Value               : VARIANT*'''
        return super(INetworkAttributeParameter2, self).get_DefaultValue()
    def put_DefaultValue(self, Value):
        '''Method INetworkAttributeParameter.put_DefaultValue (from INetworkAttributeParameter)

           INPUT
            Value               : VARIANT'''
        return super(INetworkAttributeParameter2, self).put_DefaultValue(Value)
    def get_Value(self):
        '''Method INetworkAttributeParameter.get_Value (from INetworkAttributeParameter)

           OUTPUT
            Value               : VARIANT*'''
        return super(INetworkAttributeParameter2, self).get_Value()
    def put_Value(self, Value):
        '''Method INetworkAttributeParameter.put_Value (from INetworkAttributeParameter)

           INPUT
            Value               : VARIANT'''
        return super(INetworkAttributeParameter2, self).put_Value(Value)
    def get_VarType(self):
        '''Method INetworkAttributeParameter.get_VarType (from INetworkAttributeParameter)

           OUTPUT
            Value               : long*'''
        return super(INetworkAttributeParameter2, self).get_VarType()
    def put_VarType(self, Value):
        '''Method INetworkAttributeParameter.put_VarType (from INetworkAttributeParameter)

           INPUT
            Value               : long'''
        return super(INetworkAttributeParameter2, self).put_VarType(Value)
    DefaultValue = property(get_DefaultValue, put_DefaultValue, None)
    Name = property(get_Name, put_Name, None)
    ParameterUsageType = property(get_ParameterUsageType, put_ParameterUsageType, None)
    Value = property(get_Value, put_Value, None)
    VarType = property(get_VarType, put_VarType, None)

class INetworkAttribute2(_esriGeoDatabase.INetworkAttribute2):
    _IID = uuid.UUID('18793a18-1432-4b6e-adfc-63470d92223f')

    def __init__(self, *args, **kw):
        super(INetworkAttribute2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Parameters(self):
        '''Method INetworkAttribute2.get_Parameters

           OUTPUT
            Parameters          : IArray**'''
        return super(INetworkAttribute2, self).get_Parameters()
    def putref_Parameters(self, Parameters):
        '''Method INetworkAttribute2.putref_Parameters

           INPUT
            Parameters          : IArray*'''
        return super(INetworkAttribute2, self).putref_Parameters(Parameters)
    def Refresh(self):
        '''Method INetworkAttribute2.Refresh'''
        return super(INetworkAttribute2, self).Refresh()
    def get_UseByDefault(self):
        '''Method INetworkAttribute2.get_UseByDefault

           OUTPUT
            UseByDefault        : VARIANT_BOOL*'''
        return super(INetworkAttribute2, self).get_UseByDefault()
    def put_UseByDefault(self, UseByDefault):
        '''Method INetworkAttribute2.put_UseByDefault

           INPUT
            UseByDefault        : VARIANT_BOOL'''
        return super(INetworkAttribute2, self).put_UseByDefault(UseByDefault)
    def get_Name(self):
        '''Method INetworkAttribute.get_Name (from INetworkAttribute)

           OUTPUT
            AttributeName       : BSTR*'''
        return super(INetworkAttribute2, self).get_Name()
    def put_Name(self, AttributeName):
        '''Method INetworkAttribute.put_Name (from INetworkAttribute)

           INPUT
            AttributeName       : BSTR'''
        return super(INetworkAttribute2, self).put_Name(AttributeName)
    def get_ID(self):
        '''Method INetworkAttribute.get_ID (from INetworkAttribute)

           OUTPUT
            AttributeID         : long*'''
        return super(INetworkAttribute2, self).get_ID()
    def get_DataType(self):
        '''Method INetworkAttribute.get_DataType (from INetworkAttribute)

           OUTPUT
            DataType            : esriNetworkAttributeDataType*'''
        return super(INetworkAttribute2, self).get_DataType()
    def put_DataType(self, DataType):
        '''Method INetworkAttribute.put_DataType (from INetworkAttribute)

           INPUT
            DataType            : esriNetworkAttributeDataType'''
        return super(INetworkAttribute2, self).put_DataType(DataType)
    def get_UsageType(self):
        '''Method INetworkAttribute.get_UsageType (from INetworkAttribute)

           OUTPUT
            UsageType           : esriNetworkAttributeUsageType*'''
        return super(INetworkAttribute2, self).get_UsageType()
    def put_UsageType(self, UsageType):
        '''Method INetworkAttribute.put_UsageType (from INetworkAttribute)

           INPUT
            UsageType           : esriNetworkAttributeUsageType'''
        return super(INetworkAttribute2, self).put_UsageType(UsageType)
    def get_Units(self):
        '''Method INetworkAttribute.get_Units (from INetworkAttribute)

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(INetworkAttribute2, self).get_Units()
    def put_Units(self, Units):
        '''Method INetworkAttribute.put_Units (from INetworkAttribute)

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(INetworkAttribute2, self).put_Units(Units)
    DataType = property(get_DataType, put_DataType, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, put_Name, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    Units = property(get_Units, put_Units, None)
    UsageType = property(get_UsageType, put_UsageType, None)
    UseByDefault = property(get_UseByDefault, put_UseByDefault, None)

class INetworkAttribute3(_esriGeoDatabase.INetworkAttribute3):
    _IID = uuid.UUID('64c3d5a7-7c12-4290-b458-15d8c76cd688')

    def __init__(self, *args, **kw):
        super(INetworkAttribute3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsTimeAware(self, ElementType):
        '''Method INetworkAttribute3.get_IsTimeAware

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            IsTimeAware         : VARIANT_BOOL*'''
        return super(INetworkAttribute3, self).get_IsTimeAware(ElementType)
    def get_Parameters(self):
        '''Method INetworkAttribute2.get_Parameters (from INetworkAttribute2)

           OUTPUT
            Parameters          : IArray**'''
        return super(INetworkAttribute3, self).get_Parameters()
    def putref_Parameters(self, Parameters):
        '''Method INetworkAttribute2.putref_Parameters (from INetworkAttribute2)

           INPUT
            Parameters          : IArray*'''
        return super(INetworkAttribute3, self).putref_Parameters(Parameters)
    def Refresh(self):
        '''Method INetworkAttribute2.Refresh (from INetworkAttribute2)'''
        return super(INetworkAttribute3, self).Refresh()
    def get_UseByDefault(self):
        '''Method INetworkAttribute2.get_UseByDefault (from INetworkAttribute2)

           OUTPUT
            UseByDefault        : VARIANT_BOOL*'''
        return super(INetworkAttribute3, self).get_UseByDefault()
    def put_UseByDefault(self, UseByDefault):
        '''Method INetworkAttribute2.put_UseByDefault (from INetworkAttribute2)

           INPUT
            UseByDefault        : VARIANT_BOOL'''
        return super(INetworkAttribute3, self).put_UseByDefault(UseByDefault)
    def get_Name(self):
        '''Method INetworkAttribute.get_Name (from INetworkAttribute)

           OUTPUT
            AttributeName       : BSTR*'''
        return super(INetworkAttribute3, self).get_Name()
    def put_Name(self, AttributeName):
        '''Method INetworkAttribute.put_Name (from INetworkAttribute)

           INPUT
            AttributeName       : BSTR'''
        return super(INetworkAttribute3, self).put_Name(AttributeName)
    def get_ID(self):
        '''Method INetworkAttribute.get_ID (from INetworkAttribute)

           OUTPUT
            AttributeID         : long*'''
        return super(INetworkAttribute3, self).get_ID()
    def get_DataType(self):
        '''Method INetworkAttribute.get_DataType (from INetworkAttribute)

           OUTPUT
            DataType            : esriNetworkAttributeDataType*'''
        return super(INetworkAttribute3, self).get_DataType()
    def put_DataType(self, DataType):
        '''Method INetworkAttribute.put_DataType (from INetworkAttribute)

           INPUT
            DataType            : esriNetworkAttributeDataType'''
        return super(INetworkAttribute3, self).put_DataType(DataType)
    def get_UsageType(self):
        '''Method INetworkAttribute.get_UsageType (from INetworkAttribute)

           OUTPUT
            UsageType           : esriNetworkAttributeUsageType*'''
        return super(INetworkAttribute3, self).get_UsageType()
    def put_UsageType(self, UsageType):
        '''Method INetworkAttribute.put_UsageType (from INetworkAttribute)

           INPUT
            UsageType           : esriNetworkAttributeUsageType'''
        return super(INetworkAttribute3, self).put_UsageType(UsageType)
    def get_Units(self):
        '''Method INetworkAttribute.get_Units (from INetworkAttribute)

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(INetworkAttribute3, self).get_Units()
    def put_Units(self, Units):
        '''Method INetworkAttribute.put_Units (from INetworkAttribute)

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(INetworkAttribute3, self).put_Units(Units)
    DataType = property(get_DataType, put_DataType, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, put_Name, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    Units = property(get_Units, put_Units, None)
    UsageType = property(get_UsageType, put_UsageType, None)
    UseByDefault = property(get_UseByDefault, put_UseByDefault, None)
    IsTimeAware = IndexProperty(get_IsTimeAware, None)

class INetworkDataset2(_esriGeoDatabase.INetworkDataset2):
    _IID = uuid.UUID('d108c47b-2030-47c6-9b1a-269c73cdd1fb')
    def get_DirtyArea(self, Location):
        '''Method INetworkDataset2.get_DirtyArea

           INPUT
            Location            : IPolygon*

           OUTPUT
            dirtyAreaPolygon    : IPolygon**'''
        return super(INetworkDataset2, self).get_DirtyArea(Location)
    def get_Buildable(self):
        '''Method INetworkDataset.get_Buildable (from INetworkDataset)

           OUTPUT
            Buildable           : VARIANT_BOOL*'''
        return super(INetworkDataset2, self).get_Buildable()
    def get_NetworkType(self):
        '''Method INetworkDataset.get_NetworkType (from INetworkDataset)

           OUTPUT
            Type                : esriNetworkDatasetType*'''
        return super(INetworkDataset2, self).get_NetworkType()
    def get_SupportsTurns(self):
        '''Method INetworkDataset.get_SupportsTurns (from INetworkDataset)

           OUTPUT
            SupportsTurns       : VARIANT_BOOL*'''
        return super(INetworkDataset2, self).get_SupportsTurns()
    def get_AttributeByID(self, ID):
        '''Method INetworkDataset.get_AttributeByID (from INetworkDataset)

           INPUT
            ID                  : long

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkDataset2, self).get_AttributeByID(ID)
    def get_AttributeByName(self, Name):
        '''Method INetworkDataset.get_AttributeByName (from INetworkDataset)

           INPUT
            Name                : BSTR

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkDataset2, self).get_AttributeByName(Name)
    def get_AttributeCount(self):
        '''Method INetworkDataset.get_AttributeCount (from INetworkDataset)

           OUTPUT
            Count               : long*'''
        return super(INetworkDataset2, self).get_AttributeCount()
    def get_Attribute(self, Index):
        '''Method INetworkDataset.get_Attribute (from INetworkDataset)

           INPUT
            Index               : long

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkDataset2, self).get_Attribute(Index)
    def get_SourceByID(self, ID):
        '''Method INetworkDataset.get_SourceByID (from INetworkDataset)

           INPUT
            ID                  : long

           OUTPUT
            Source              : INetworkSource**'''
        return super(INetworkDataset2, self).get_SourceByID(ID)
    def get_SourceByName(self, Name):
        '''Method INetworkDataset.get_SourceByName (from INetworkDataset)

           INPUT
            Name                : BSTR

           OUTPUT
            Source              : INetworkSource**'''
        return super(INetworkDataset2, self).get_SourceByName(Name)
    def get_SourceCount(self):
        '''Method INetworkDataset.get_SourceCount (from INetworkDataset)

           OUTPUT
            Count               : long*'''
        return super(INetworkDataset2, self).get_SourceCount()
    def get_Source(self, Index):
        '''Method INetworkDataset.get_Source (from INetworkDataset)

           INPUT
            Index               : long

           OUTPUT
            Source              : INetworkSource**'''
        return super(INetworkDataset2, self).get_Source(Index)
    def get_State(self):
        '''Method INetworkDataset.get_State (from INetworkDataset)

           OUTPUT
            State               : esriNetworkDatasetState*'''
        return super(INetworkDataset2, self).get_State()
    AttributeCount = property(get_AttributeCount, None, None)
    Buildable = property(get_Buildable, None, None)
    NetworkType = property(get_NetworkType, None, None)
    SourceCount = property(get_SourceCount, None, None)
    State = property(get_State, None, None)
    SupportsTurns = property(get_SupportsTurns, None, None)
    Attribute = IndexProperty(get_Attribute, None)
    AttributeByID = IndexProperty(get_AttributeByID, None)
    AttributeByName = IndexProperty(get_AttributeByName, None)
    DirtyArea = IndexProperty(get_DirtyArea, None)
    Source = IndexProperty(get_Source, None)
    SourceByID = IndexProperty(get_SourceByID, None)
    SourceByName = IndexProperty(get_SourceByName, None)

class INetworkForwardStarSetup(_esriGeoDatabase.INetworkForwardStarSetup):
    _IID = uuid.UUID('d68a2a0c-f2b9-47af-8ae6-811513349546')

    def __init__(self, *args, **kw):
        super(INetworkForwardStarSetup, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Backtrack(self):
        '''Method INetworkForwardStarSetup.get_Backtrack

           OUTPUT
            Backtrack           : esriNetworkForwardStarBacktrack*'''
        return super(INetworkForwardStarSetup, self).get_Backtrack()
    def put_Backtrack(self, Backtrack):
        '''Method INetworkForwardStarSetup.put_Backtrack

           INPUT
            Backtrack           : esriNetworkForwardStarBacktrack'''
        return super(INetworkForwardStarSetup, self).put_Backtrack(Backtrack)
    def get_IsForwardTraversal(self):
        '''Method INetworkForwardStarSetup.get_IsForwardTraversal

           OUTPUT
            IsForwardTraversal  : VARIANT_BOOL*'''
        return super(INetworkForwardStarSetup, self).get_IsForwardTraversal()
    def put_IsForwardTraversal(self, IsForwardTraversal):
        '''Method INetworkForwardStarSetup.put_IsForwardTraversal

           INPUT
            IsForwardTraversal  : VARIANT_BOOL'''
        return super(INetworkForwardStarSetup, self).put_IsForwardTraversal(IsForwardTraversal)
    def get_NetworkDataset(self):
        '''Method INetworkForwardStarSetup.get_NetworkDataset

           OUTPUT
            Network             : INetworkDataset**'''
        return super(INetworkForwardStarSetup, self).get_NetworkDataset()
    def AddCachedAttribute(self, Attribute):
        '''Method INetworkForwardStarSetup.AddCachedAttribute

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(INetworkForwardStarSetup, self).AddCachedAttribute(Attribute)
    def RemoveAllCachedAttributes(self):
        '''Method INetworkForwardStarSetup.RemoveAllCachedAttributes'''
        return super(INetworkForwardStarSetup, self).RemoveAllCachedAttributes()
    def AddRestriction(self, Attribute):
        '''Method INetworkForwardStarSetup.AddRestriction

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(INetworkForwardStarSetup, self).AddRestriction(Attribute)
    def get_Restriction(self, Index):
        '''Method INetworkForwardStarSetup.get_Restriction

           INPUT
            Index               : long

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkForwardStarSetup, self).get_Restriction(Index)
    def get_RestrictionCount(self):
        '''Method INetworkForwardStarSetup.get_RestrictionCount

           OUTPUT
            Count               : long*'''
        return super(INetworkForwardStarSetup, self).get_RestrictionCount()
    def RemoveRestriction(self, Index):
        '''Method INetworkForwardStarSetup.RemoveRestriction

           INPUT
            Index               : long'''
        return super(INetworkForwardStarSetup, self).RemoveRestriction(Index)
    def putref_HierarchyAttribute(self, Attribute):
        '''Method INetworkForwardStarSetup.putref_HierarchyAttribute

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(INetworkForwardStarSetup, self).putref_HierarchyAttribute(Attribute)
    def get_HierarchyAttribute(self):
        '''Method INetworkForwardStarSetup.get_HierarchyAttribute

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkForwardStarSetup, self).get_HierarchyAttribute()
    def put_MaxHierarchyValue(self, MaxValue):
        '''Method INetworkForwardStarSetup.put_MaxHierarchyValue

           INPUT
            MaxValue            : long'''
        return super(INetworkForwardStarSetup, self).put_MaxHierarchyValue(MaxValue)
    def get_MaxHierarchyValue(self):
        '''Method INetworkForwardStarSetup.get_MaxHierarchyValue

           OUTPUT
            MaxValue            : long*'''
        return super(INetworkForwardStarSetup, self).get_MaxHierarchyValue()
    def get_Traversable(self, Element):
        '''Method INetworkForwardStarSetup.get_Traversable

           INPUT
            Element             : INetworkElement*

           OUTPUT
            Traversable         : VARIANT_BOOL*'''
        return super(INetworkForwardStarSetup, self).get_Traversable(Element)
    def put_Traversable(self, Element, Traversable):
        '''Method INetworkForwardStarSetup.put_Traversable

           INPUTS
            Element             : INetworkElement*
            Traversable         : VARIANT_BOOL'''
        return super(INetworkForwardStarSetup, self).put_Traversable(Element, Traversable)
    def SetTraversable(self, Elements, Traversable):
        '''Method INetworkForwardStarSetup.SetTraversable

           INPUTS
            Elements            : IEnumNetworkElement*
            Traversable         : VARIANT_BOOL'''
        return super(INetworkForwardStarSetup, self).SetTraversable(Elements, Traversable)
    def SetAllTraversable(self, ElementType, Traversable):
        '''Method INetworkForwardStarSetup.SetAllTraversable

           INPUTS
            ElementType         : esriNetworkElementType
            Traversable         : VARIANT_BOOL'''
        return super(INetworkForwardStarSetup, self).SetAllTraversable(ElementType, Traversable)
    def get_NonTraversableElements(self, ElementType, Direction):
        '''Method INetworkForwardStarSetup.get_NonTraversableElements

           INPUTS
            ElementType         : esriNetworkElementType
            Direction           : esriNetworkEdgeDirection

           OUTPUT
            EnumNetworkElement  : IEnumNetworkElement**'''
        return super(INetworkForwardStarSetup, self).get_NonTraversableElements(ElementType, Direction)
    Backtrack = property(get_Backtrack, put_Backtrack, None)
    HierarchyAttribute = property(get_HierarchyAttribute, putref_HierarchyAttribute, None)
    IsForwardTraversal = property(get_IsForwardTraversal, put_IsForwardTraversal, None)
    MaxHierarchyValue = property(get_MaxHierarchyValue, put_MaxHierarchyValue, None)
    NetworkDataset = property(get_NetworkDataset, None, None)
    RestrictionCount = property(get_RestrictionCount, None, None)
    Traversable = property(None, put_Traversable, None)
    Restriction = IndexProperty(get_Restriction, None)
    Traversable = IndexProperty(get_Traversable, None)

class INetworkElement64(_esriGeoDatabase.INetworkElement64):
    _IID = uuid.UUID('3fc192f4-d423-4b49-ae4e-407d6a9aa62e')
    def get_EID(self):
        '''Method INetworkElement64.get_EID

           OUTPUT
            EID                 : __int64*'''
        return super(INetworkElement64, self).get_EID()
    def get_OID(self):
        '''Method INetworkElement64.get_OID

           OUTPUT
            OID                 : __int64*'''
        return super(INetworkElement64, self).get_OID()
    EID = property(get_EID, None, None)
    OID = property(get_OID, None, None)

class ITrafficData2(_esriGeoDatabase.ITrafficData2):
    _IID = uuid.UUID('0f7e13a0-8f82-44c6-9c94-f3d8bdfb32f3')

    def __init__(self, *args, **kw):
        super(ITrafficData2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LengthAttributeName(self):
        '''Method ITrafficData2.get_LengthAttributeName

           OUTPUT
            LengthAttributeName : BSTR*'''
        return super(ITrafficData2, self).get_LengthAttributeName()
    def put_LengthAttributeName(self, LengthAttributeName):
        '''Method ITrafficData2.put_LengthAttributeName

           INPUT
            LengthAttributeName : BSTR'''
        return super(ITrafficData2, self).put_LengthAttributeName(LengthAttributeName)
    def get_TimeInterval(self):
        '''Method ITrafficData.get_TimeInterval (from ITrafficData)

           OUTPUT
            TimeInterval        : double*'''
        return super(ITrafficData2, self).get_TimeInterval()
    def get_TimeIntervalUnits(self):
        '''Method ITrafficData.get_TimeIntervalUnits (from ITrafficData)

           OUTPUT
            TimeIntervalUnits   : esriTimeUnits*'''
        return super(ITrafficData2, self).get_TimeIntervalUnits()
    LengthAttributeName = property(get_LengthAttributeName, put_LengthAttributeName, None)
    TimeInterval = property(get_TimeInterval, None, None)
    TimeIntervalUnits = property(get_TimeIntervalUnits, None, None)

class IHistoricalTrafficData(_esriGeoDatabase.IHistoricalTrafficData):
    _IID = uuid.UUID('074c64b3-0d8b-471d-a16e-606c70ddc84a')

    def __init__(self, *args, **kw):
        super(IHistoricalTrafficData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ProfilesTableName(self):
        '''Method IHistoricalTrafficData.get_ProfilesTableName

           OUTPUT
            ProfilesTableName   : BSTR*'''
        return super(IHistoricalTrafficData, self).get_ProfilesTableName()
    def put_ProfilesTableName(self, ProfilesTableName):
        '''Method IHistoricalTrafficData.put_ProfilesTableName

           INPUT
            ProfilesTableName   : BSTR'''
        return super(IHistoricalTrafficData, self).put_ProfilesTableName(ProfilesTableName)
    def get_TimeSliceDurationInMinutes(self):
        '''Method IHistoricalTrafficData.get_TimeSliceDurationInMinutes

           OUTPUT
            TimeSliceDurationInMinutes: long*'''
        return super(IHistoricalTrafficData, self).get_TimeSliceDurationInMinutes()
    def put_TimeSliceDurationInMinutes(self, TimeSliceDurationInMinutes):
        '''Method IHistoricalTrafficData.put_TimeSliceDurationInMinutes

           INPUT
            TimeSliceDurationInMinutes: long'''
        return super(IHistoricalTrafficData, self).put_TimeSliceDurationInMinutes(TimeSliceDurationInMinutes)
    def get_FirstTimeSliceStartTime(self):
        '''Method IHistoricalTrafficData.get_FirstTimeSliceStartTime

           OUTPUT
            FirstTimeSliceStartTime: DATE*'''
        return super(IHistoricalTrafficData, self).get_FirstTimeSliceStartTime()
    def put_FirstTimeSliceStartTime(self, FirstTimeSliceStartTime):
        '''Method IHistoricalTrafficData.put_FirstTimeSliceStartTime

           INPUT
            FirstTimeSliceStartTime: DATE'''
        return super(IHistoricalTrafficData, self).put_FirstTimeSliceStartTime(FirstTimeSliceStartTime)
    def get_FirstTimeSliceFieldName(self):
        '''Method IHistoricalTrafficData.get_FirstTimeSliceFieldName

           OUTPUT
            FirstTimeSliceFieldName: BSTR*'''
        return super(IHistoricalTrafficData, self).get_FirstTimeSliceFieldName()
    def put_FirstTimeSliceFieldName(self, FirstTimeSliceFieldName):
        '''Method IHistoricalTrafficData.put_FirstTimeSliceFieldName

           INPUT
            FirstTimeSliceFieldName: BSTR'''
        return super(IHistoricalTrafficData, self).put_FirstTimeSliceFieldName(FirstTimeSliceFieldName)
    def get_LastTimeSliceFieldName(self):
        '''Method IHistoricalTrafficData.get_LastTimeSliceFieldName

           OUTPUT
            LastTimeSliceFieldName: BSTR*'''
        return super(IHistoricalTrafficData, self).get_LastTimeSliceFieldName()
    def put_LastTimeSliceFieldName(self, LastTimeSliceFieldName):
        '''Method IHistoricalTrafficData.put_LastTimeSliceFieldName

           INPUT
            LastTimeSliceFieldName: BSTR'''
        return super(IHistoricalTrafficData, self).put_LastTimeSliceFieldName(LastTimeSliceFieldName)
    def get_JoinTableName(self):
        '''Method IHistoricalTrafficData.get_JoinTableName

           OUTPUT
            JoinTableName       : BSTR*'''
        return super(IHistoricalTrafficData, self).get_JoinTableName()
    def put_JoinTableName(self, JoinTableName):
        '''Method IHistoricalTrafficData.put_JoinTableName

           INPUT
            JoinTableName       : BSTR'''
        return super(IHistoricalTrafficData, self).put_JoinTableName(JoinTableName)
    def get_JoinTableBaseTravelTimeFieldName(self):
        '''Method IHistoricalTrafficData.get_JoinTableBaseTravelTimeFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IHistoricalTrafficData, self).get_JoinTableBaseTravelTimeFieldName()
    def put_JoinTableBaseTravelTimeFieldName(self, FieldName):
        '''Method IHistoricalTrafficData.put_JoinTableBaseTravelTimeFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IHistoricalTrafficData, self).put_JoinTableBaseTravelTimeFieldName(FieldName)
    def get_JoinTableBaseTravelTimeUnits(self):
        '''Method IHistoricalTrafficData.get_JoinTableBaseTravelTimeUnits

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(IHistoricalTrafficData, self).get_JoinTableBaseTravelTimeUnits()
    def put_JoinTableBaseTravelTimeUnits(self, Units):
        '''Method IHistoricalTrafficData.put_JoinTableBaseTravelTimeUnits

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(IHistoricalTrafficData, self).put_JoinTableBaseTravelTimeUnits(Units)
    def get_JoinTableProfileIDFieldNames(self):
        '''Method IHistoricalTrafficData.get_JoinTableProfileIDFieldNames

           OUTPUT
            profileIDFields     : IStringArray**'''
        return super(IHistoricalTrafficData, self).get_JoinTableProfileIDFieldNames()
    def putref_JoinTableProfileIDFieldNames(self, profileIDFields):
        '''Method IHistoricalTrafficData.putref_JoinTableProfileIDFieldNames

           INPUT
            profileIDFields     : IStringArray*'''
        return super(IHistoricalTrafficData, self).putref_JoinTableProfileIDFieldNames(profileIDFields)
    FirstTimeSliceFieldName = property(get_FirstTimeSliceFieldName, put_FirstTimeSliceFieldName, None)
    FirstTimeSliceStartTime = property(get_FirstTimeSliceStartTime, put_FirstTimeSliceStartTime, None)
    JoinTableBaseTravelTimeFieldName = property(get_JoinTableBaseTravelTimeFieldName, put_JoinTableBaseTravelTimeFieldName, None)
    JoinTableBaseTravelTimeUnits = property(get_JoinTableBaseTravelTimeUnits, put_JoinTableBaseTravelTimeUnits, None)
    JoinTableName = property(get_JoinTableName, put_JoinTableName, None)
    JoinTableProfileIDFieldNames = property(get_JoinTableProfileIDFieldNames, putref_JoinTableProfileIDFieldNames, None)
    LastTimeSliceFieldName = property(get_LastTimeSliceFieldName, put_LastTimeSliceFieldName, None)
    ProfilesTableName = property(get_ProfilesTableName, put_ProfilesTableName, None)
    TimeSliceDurationInMinutes = property(get_TimeSliceDurationInMinutes, put_TimeSliceDurationInMinutes, None)

class IHistoricalTrafficData2(_esriGeoDatabase.IHistoricalTrafficData2):
    _IID = uuid.UUID('213f0913-ec31-420c-8826-ce8353c28d08')

    def __init__(self, *args, **kw):
        super(IHistoricalTrafficData2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_JoinTableBaseSpeedFieldName(self):
        '''Method IHistoricalTrafficData2.get_JoinTableBaseSpeedFieldName

           OUTPUT
            FieldName           : BSTR*'''
        return super(IHistoricalTrafficData2, self).get_JoinTableBaseSpeedFieldName()
    def put_JoinTableBaseSpeedFieldName(self, FieldName):
        '''Method IHistoricalTrafficData2.put_JoinTableBaseSpeedFieldName

           INPUT
            FieldName           : BSTR'''
        return super(IHistoricalTrafficData2, self).put_JoinTableBaseSpeedFieldName(FieldName)
    def get_JoinTableBaseSpeedUnits(self):
        '''Method IHistoricalTrafficData2.get_JoinTableBaseSpeedUnits

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(IHistoricalTrafficData2, self).get_JoinTableBaseSpeedUnits()
    def put_JoinTableBaseSpeedUnits(self, Units):
        '''Method IHistoricalTrafficData2.put_JoinTableBaseSpeedUnits

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(IHistoricalTrafficData2, self).put_JoinTableBaseSpeedUnits(Units)
    def get_ProfilesTableName(self):
        '''Method IHistoricalTrafficData.get_ProfilesTableName (from IHistoricalTrafficData)

           OUTPUT
            ProfilesTableName   : BSTR*'''
        return super(IHistoricalTrafficData2, self).get_ProfilesTableName()
    def put_ProfilesTableName(self, ProfilesTableName):
        '''Method IHistoricalTrafficData.put_ProfilesTableName (from IHistoricalTrafficData)

           INPUT
            ProfilesTableName   : BSTR'''
        return super(IHistoricalTrafficData2, self).put_ProfilesTableName(ProfilesTableName)
    def get_TimeSliceDurationInMinutes(self):
        '''Method IHistoricalTrafficData.get_TimeSliceDurationInMinutes (from IHistoricalTrafficData)

           OUTPUT
            TimeSliceDurationInMinutes: long*'''
        return super(IHistoricalTrafficData2, self).get_TimeSliceDurationInMinutes()
    def put_TimeSliceDurationInMinutes(self, TimeSliceDurationInMinutes):
        '''Method IHistoricalTrafficData.put_TimeSliceDurationInMinutes (from IHistoricalTrafficData)

           INPUT
            TimeSliceDurationInMinutes: long'''
        return super(IHistoricalTrafficData2, self).put_TimeSliceDurationInMinutes(TimeSliceDurationInMinutes)
    def get_FirstTimeSliceStartTime(self):
        '''Method IHistoricalTrafficData.get_FirstTimeSliceStartTime (from IHistoricalTrafficData)

           OUTPUT
            FirstTimeSliceStartTime: DATE*'''
        return super(IHistoricalTrafficData2, self).get_FirstTimeSliceStartTime()
    def put_FirstTimeSliceStartTime(self, FirstTimeSliceStartTime):
        '''Method IHistoricalTrafficData.put_FirstTimeSliceStartTime (from IHistoricalTrafficData)

           INPUT
            FirstTimeSliceStartTime: DATE'''
        return super(IHistoricalTrafficData2, self).put_FirstTimeSliceStartTime(FirstTimeSliceStartTime)
    def get_FirstTimeSliceFieldName(self):
        '''Method IHistoricalTrafficData.get_FirstTimeSliceFieldName (from IHistoricalTrafficData)

           OUTPUT
            FirstTimeSliceFieldName: BSTR*'''
        return super(IHistoricalTrafficData2, self).get_FirstTimeSliceFieldName()
    def put_FirstTimeSliceFieldName(self, FirstTimeSliceFieldName):
        '''Method IHistoricalTrafficData.put_FirstTimeSliceFieldName (from IHistoricalTrafficData)

           INPUT
            FirstTimeSliceFieldName: BSTR'''
        return super(IHistoricalTrafficData2, self).put_FirstTimeSliceFieldName(FirstTimeSliceFieldName)
    def get_LastTimeSliceFieldName(self):
        '''Method IHistoricalTrafficData.get_LastTimeSliceFieldName (from IHistoricalTrafficData)

           OUTPUT
            LastTimeSliceFieldName: BSTR*'''
        return super(IHistoricalTrafficData2, self).get_LastTimeSliceFieldName()
    def put_LastTimeSliceFieldName(self, LastTimeSliceFieldName):
        '''Method IHistoricalTrafficData.put_LastTimeSliceFieldName (from IHistoricalTrafficData)

           INPUT
            LastTimeSliceFieldName: BSTR'''
        return super(IHistoricalTrafficData2, self).put_LastTimeSliceFieldName(LastTimeSliceFieldName)
    def get_JoinTableName(self):
        '''Method IHistoricalTrafficData.get_JoinTableName (from IHistoricalTrafficData)

           OUTPUT
            JoinTableName       : BSTR*'''
        return super(IHistoricalTrafficData2, self).get_JoinTableName()
    def put_JoinTableName(self, JoinTableName):
        '''Method IHistoricalTrafficData.put_JoinTableName (from IHistoricalTrafficData)

           INPUT
            JoinTableName       : BSTR'''
        return super(IHistoricalTrafficData2, self).put_JoinTableName(JoinTableName)
    def get_JoinTableBaseTravelTimeFieldName(self):
        '''Method IHistoricalTrafficData.get_JoinTableBaseTravelTimeFieldName (from IHistoricalTrafficData)

           OUTPUT
            FieldName           : BSTR*'''
        return super(IHistoricalTrafficData2, self).get_JoinTableBaseTravelTimeFieldName()
    def put_JoinTableBaseTravelTimeFieldName(self, FieldName):
        '''Method IHistoricalTrafficData.put_JoinTableBaseTravelTimeFieldName (from IHistoricalTrafficData)

           INPUT
            FieldName           : BSTR'''
        return super(IHistoricalTrafficData2, self).put_JoinTableBaseTravelTimeFieldName(FieldName)
    def get_JoinTableBaseTravelTimeUnits(self):
        '''Method IHistoricalTrafficData.get_JoinTableBaseTravelTimeUnits (from IHistoricalTrafficData)

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(IHistoricalTrafficData2, self).get_JoinTableBaseTravelTimeUnits()
    def put_JoinTableBaseTravelTimeUnits(self, Units):
        '''Method IHistoricalTrafficData.put_JoinTableBaseTravelTimeUnits (from IHistoricalTrafficData)

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(IHistoricalTrafficData2, self).put_JoinTableBaseTravelTimeUnits(Units)
    def get_JoinTableProfileIDFieldNames(self):
        '''Method IHistoricalTrafficData.get_JoinTableProfileIDFieldNames (from IHistoricalTrafficData)

           OUTPUT
            profileIDFields     : IStringArray**'''
        return super(IHistoricalTrafficData2, self).get_JoinTableProfileIDFieldNames()
    def putref_JoinTableProfileIDFieldNames(self, profileIDFields):
        '''Method IHistoricalTrafficData.putref_JoinTableProfileIDFieldNames (from IHistoricalTrafficData)

           INPUT
            profileIDFields     : IStringArray*'''
        return super(IHistoricalTrafficData2, self).putref_JoinTableProfileIDFieldNames(profileIDFields)
    FirstTimeSliceFieldName = property(get_FirstTimeSliceFieldName, put_FirstTimeSliceFieldName, None)
    FirstTimeSliceStartTime = property(get_FirstTimeSliceStartTime, put_FirstTimeSliceStartTime, None)
    JoinTableBaseSpeedFieldName = property(get_JoinTableBaseSpeedFieldName, put_JoinTableBaseSpeedFieldName, None)
    JoinTableBaseSpeedUnits = property(get_JoinTableBaseSpeedUnits, put_JoinTableBaseSpeedUnits, None)
    JoinTableBaseTravelTimeFieldName = property(get_JoinTableBaseTravelTimeFieldName, put_JoinTableBaseTravelTimeFieldName, None)
    JoinTableBaseTravelTimeUnits = property(get_JoinTableBaseTravelTimeUnits, put_JoinTableBaseTravelTimeUnits, None)
    JoinTableName = property(get_JoinTableName, put_JoinTableName, None)
    JoinTableProfileIDFieldNames = property(get_JoinTableProfileIDFieldNames, putref_JoinTableProfileIDFieldNames, None)
    LastTimeSliceFieldName = property(get_LastTimeSliceFieldName, put_LastTimeSliceFieldName, None)
    ProfilesTableName = property(get_ProfilesTableName, put_ProfilesTableName, None)
    TimeSliceDurationInMinutes = property(get_TimeSliceDurationInMinutes, put_TimeSliceDurationInMinutes, None)

class ITrafficFeedDirectory(_esriGeoDatabase.ITrafficFeedDirectory):
    _IID = uuid.UUID('30365c0d-2b90-4f76-bf61-cbfc038aa4bf')

    def __init__(self, *args, **kw):
        super(ITrafficFeedDirectory, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TrafficDirectory(self):
        '''Method ITrafficFeedDirectory.get_TrafficDirectory

           OUTPUT
            directory           : BSTR*'''
        return super(ITrafficFeedDirectory, self).get_TrafficDirectory()
    def put_TrafficDirectory(self, directory):
        '''Method ITrafficFeedDirectory.put_TrafficDirectory

           INPUT
            directory           : BSTR'''
        return super(ITrafficFeedDirectory, self).put_TrafficDirectory(directory)
    TrafficDirectory = property(get_TrafficDirectory, put_TrafficDirectory, None)

class ITrafficFeedGPService(_esriGeoDatabase.ITrafficFeedGPService):
    _IID = uuid.UUID('92c16e94-9f87-4362-8391-e6711d13ee36')

    def __init__(self, *args, **kw):
        super(ITrafficFeedGPService, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConnectionProperties(self):
        '''Method ITrafficFeedGPService.get_ConnectionProperties

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(ITrafficFeedGPService, self).get_ConnectionProperties()
    def put_ConnectionProperties(self, ConnectionProperties):
        '''Method ITrafficFeedGPService.put_ConnectionProperties

           INPUT
            ConnectionProperties: IPropertySet*'''
        return super(ITrafficFeedGPService, self).put_ConnectionProperties(ConnectionProperties)
    def get_ServiceName(self):
        '''Method ITrafficFeedGPService.get_ServiceName

           OUTPUT
            ServiceName         : BSTR*'''
        return super(ITrafficFeedGPService, self).get_ServiceName()
    def put_ServiceName(self, ServiceName):
        '''Method ITrafficFeedGPService.put_ServiceName

           INPUT
            ServiceName         : BSTR'''
        return super(ITrafficFeedGPService, self).put_ServiceName(ServiceName)
    def get_TaskName(self):
        '''Method ITrafficFeedGPService.get_TaskName

           OUTPUT
            TaskName            : BSTR*'''
        return super(ITrafficFeedGPService, self).get_TaskName()
    def put_TaskName(self, TaskName):
        '''Method ITrafficFeedGPService.put_TaskName

           INPUT
            TaskName            : BSTR'''
        return super(ITrafficFeedGPService, self).put_TaskName(TaskName)
    ConnectionProperties = property(get_ConnectionProperties, put_ConnectionProperties, None)
    ServiceName = property(get_ServiceName, put_ServiceName, None)
    TaskName = property(get_TaskName, put_TaskName, None)

class IDynamicTrafficData(_esriGeoDatabase.IDynamicTrafficData):
    _IID = uuid.UUID('c8696877-c08f-4fec-ac30-50c9aad43fbb')

    def __init__(self, *args, **kw):
        super(IDynamicTrafficData, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DynamicTrafficTableName(self):
        '''Method IDynamicTrafficData.get_DynamicTrafficTableName

           OUTPUT
            DynamicTrafficTableName: BSTR*'''
        return super(IDynamicTrafficData, self).get_DynamicTrafficTableName()
    def put_DynamicTrafficTableName(self, DynamicTrafficTableName):
        '''Method IDynamicTrafficData.put_DynamicTrafficTableName

           INPUT
            DynamicTrafficTableName: BSTR'''
        return super(IDynamicTrafficData, self).put_DynamicTrafficTableName(DynamicTrafficTableName)
    def get_DynamicTrafficTMCFieldName(self):
        '''Method IDynamicTrafficData.get_DynamicTrafficTMCFieldName

           OUTPUT
            DynamicTrafficTMCFieldName: BSTR*'''
        return super(IDynamicTrafficData, self).get_DynamicTrafficTMCFieldName()
    def put_DynamicTrafficTMCFieldName(self, DynamicTrafficTMCFieldName):
        '''Method IDynamicTrafficData.put_DynamicTrafficTMCFieldName

           INPUT
            DynamicTrafficTMCFieldName: BSTR'''
        return super(IDynamicTrafficData, self).put_DynamicTrafficTMCFieldName(DynamicTrafficTMCFieldName)
    def get_TrafficFeedLocation(self):
        '''Method IDynamicTrafficData.get_TrafficFeedLocation

           OUTPUT
            TrafficFeedLocation : ITrafficFeedLocation**'''
        return super(IDynamicTrafficData, self).get_TrafficFeedLocation()
    def putref_TrafficFeedLocation(self, TrafficFeedLocation):
        '''Method IDynamicTrafficData.putref_TrafficFeedLocation

           INPUT
            TrafficFeedLocation : ITrafficFeedLocation*'''
        return super(IDynamicTrafficData, self).putref_TrafficFeedLocation(TrafficFeedLocation)
    DynamicTrafficTMCFieldName = property(get_DynamicTrafficTMCFieldName, put_DynamicTrafficTMCFieldName, None)
    DynamicTrafficTableName = property(get_DynamicTrafficTableName, put_DynamicTrafficTableName, None)
    TrafficFeedLocation = property(get_TrafficFeedLocation, putref_TrafficFeedLocation, None)

class IHistoricalTravelTimeEvaluator(_esriGeoDatabase.IHistoricalTravelTimeEvaluator):
    _IID = uuid.UUID('b65e3a4a-63b3-4a9b-974e-c17a99013376')

    def __init__(self, *args, **kw):
        super(IHistoricalTravelTimeEvaluator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_WeekdayFallbackAttributeName(self):
        '''Method IHistoricalTravelTimeEvaluator.get_WeekdayFallbackAttributeName

           OUTPUT
            AttributeName       : BSTR*'''
        return super(IHistoricalTravelTimeEvaluator, self).get_WeekdayFallbackAttributeName()
    def put_WeekdayFallbackAttributeName(self, AttributeName):
        '''Method IHistoricalTravelTimeEvaluator.put_WeekdayFallbackAttributeName

           INPUT
            AttributeName       : BSTR'''
        return super(IHistoricalTravelTimeEvaluator, self).put_WeekdayFallbackAttributeName(AttributeName)
    def get_WeekendFallbackAttributeName(self):
        '''Method IHistoricalTravelTimeEvaluator.get_WeekendFallbackAttributeName

           OUTPUT
            AttributeName       : BSTR*'''
        return super(IHistoricalTravelTimeEvaluator, self).get_WeekendFallbackAttributeName()
    def put_WeekendFallbackAttributeName(self, AttributeName):
        '''Method IHistoricalTravelTimeEvaluator.put_WeekendFallbackAttributeName

           INPUT
            AttributeName       : BSTR'''
        return super(IHistoricalTravelTimeEvaluator, self).put_WeekendFallbackAttributeName(AttributeName)
    def get_TimeNeutralAttributeName(self):
        '''Method IHistoricalTravelTimeEvaluator.get_TimeNeutralAttributeName

           OUTPUT
            AttributeName       : BSTR*'''
        return super(IHistoricalTravelTimeEvaluator, self).get_TimeNeutralAttributeName()
    def put_TimeNeutralAttributeName(self, AttributeName):
        '''Method IHistoricalTravelTimeEvaluator.put_TimeNeutralAttributeName

           INPUT
            AttributeName       : BSTR'''
        return super(IHistoricalTravelTimeEvaluator, self).put_TimeNeutralAttributeName(AttributeName)
    TimeNeutralAttributeName = property(get_TimeNeutralAttributeName, put_TimeNeutralAttributeName, None)
    WeekdayFallbackAttributeName = property(get_WeekdayFallbackAttributeName, put_WeekdayFallbackAttributeName, None)
    WeekendFallbackAttributeName = property(get_WeekendFallbackAttributeName, put_WeekendFallbackAttributeName, None)

class ITimeAwareEvaluator(_esriGeoDatabase.ITimeAwareEvaluator):
    _IID = uuid.UUID('e55445d9-ff42-4a88-8b5c-132a2b9216f4')
    def QueryValueAtTime(self, Element, localTime, timeUsage):
        '''Method ITimeAwareEvaluator.QueryValueAtTime

           INPUTS
            Element             : INetworkElement*
            localTime           : DATE
            timeUsage           : esriNetworkTimeUsage

           OUTPUT
            Value               : VARIANT*'''
        return super(ITimeAwareEvaluator, self).QueryValueAtTime(Element, localTime, timeUsage)

class INetworkEvaluator(_esriGeoDatabase.INetworkEvaluator):
    _IID = uuid.UUID('0fcb88f9-8b17-4ed8-99c7-c876f5da8b7e')
    def get_Name(self):
        '''Method INetworkEvaluator.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(INetworkEvaluator, self).get_Name()
    def get_DisplayName(self):
        '''Method INetworkEvaluator.get_DisplayName

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(INetworkEvaluator, self).get_DisplayName()
    def get_CacheAttribute(self):
        '''Method INetworkEvaluator.get_CacheAttribute

           OUTPUT
            Cache               : VARIANT_BOOL*'''
        return super(INetworkEvaluator, self).get_CacheAttribute()
    CacheAttribute = property(get_CacheAttribute, None, None)
    DisplayName = property(get_DisplayName, None, None)
    Name = property(get_Name, None, None)

class IEdgeFeatureSource(_esriGeoDatabase.IEdgeFeatureSource):
    _IID = uuid.UUID('cc16e6db-051a-4ccb-adaf-0ca823ecd00b')

    def __init__(self, *args, **kw):
        super(IEdgeFeatureSource, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassConnectivityPolicy(self):
        '''Method IEdgeFeatureSource.get_ClassConnectivityPolicy

           OUTPUT
            policy              : esriNetworkEdgeConnectivityPolicy*'''
        return super(IEdgeFeatureSource, self).get_ClassConnectivityPolicy()
    def put_ClassConnectivityPolicy(self, policy):
        '''Method IEdgeFeatureSource.put_ClassConnectivityPolicy

           INPUT
            policy              : esriNetworkEdgeConnectivityPolicy'''
        return super(IEdgeFeatureSource, self).put_ClassConnectivityPolicy(policy)
    def get_ClassConnectivityGroup(self):
        '''Method IEdgeFeatureSource.get_ClassConnectivityGroup

           OUTPUT
            group               : long*'''
        return super(IEdgeFeatureSource, self).get_ClassConnectivityGroup()
    def put_ClassConnectivityGroup(self, group):
        '''Method IEdgeFeatureSource.put_ClassConnectivityGroup

           INPUT
            group               : long'''
        return super(IEdgeFeatureSource, self).put_ClassConnectivityGroup(group)
    def get_SubtypeConnectivityPolicy(self, SubtypeCode):
        '''Method IEdgeFeatureSource.get_SubtypeConnectivityPolicy

           INPUT
            SubtypeCode         : long

           OUTPUT
            policy              : esriNetworkEdgeConnectivityPolicy*'''
        return super(IEdgeFeatureSource, self).get_SubtypeConnectivityPolicy(SubtypeCode)
    def put_SubtypeConnectivityPolicy(self, SubtypeCode, policy):
        '''Method IEdgeFeatureSource.put_SubtypeConnectivityPolicy

           INPUTS
            SubtypeCode         : long
            policy              : esriNetworkEdgeConnectivityPolicy'''
        return super(IEdgeFeatureSource, self).put_SubtypeConnectivityPolicy(SubtypeCode, policy)
    def get_SubtypeConnectivityGroup(self, SubtypeCode):
        '''Method IEdgeFeatureSource.get_SubtypeConnectivityGroup

           INPUT
            SubtypeCode         : long

           OUTPUT
            group               : long*'''
        return super(IEdgeFeatureSource, self).get_SubtypeConnectivityGroup(SubtypeCode)
    def put_SubtypeConnectivityGroup(self, SubtypeCode, group):
        '''Method IEdgeFeatureSource.put_SubtypeConnectivityGroup

           INPUTS
            SubtypeCode         : long
            group               : long'''
        return super(IEdgeFeatureSource, self).put_SubtypeConnectivityGroup(SubtypeCode, group)
    def get_UsesSubtypes(self):
        '''Method IEdgeFeatureSource.get_UsesSubtypes

           OUTPUT
            bySubtype           : VARIANT_BOOL*'''
        return super(IEdgeFeatureSource, self).get_UsesSubtypes()
    def put_UsesSubtypes(self, bySubtype):
        '''Method IEdgeFeatureSource.put_UsesSubtypes

           INPUT
            bySubtype           : VARIANT_BOOL'''
        return super(IEdgeFeatureSource, self).put_UsesSubtypes(bySubtype)
    def get_FromElevationFieldName(self):
        '''Method IEdgeFeatureSource.get_FromElevationFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IEdgeFeatureSource, self).get_FromElevationFieldName()
    def put_FromElevationFieldName(self, Name):
        '''Method IEdgeFeatureSource.put_FromElevationFieldName

           INPUT
            Name                : BSTR'''
        return super(IEdgeFeatureSource, self).put_FromElevationFieldName(Name)
    def get_ToElevationFieldName(self):
        '''Method IEdgeFeatureSource.get_ToElevationFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IEdgeFeatureSource, self).get_ToElevationFieldName()
    def put_ToElevationFieldName(self, Name):
        '''Method IEdgeFeatureSource.put_ToElevationFieldName

           INPUT
            Name                : BSTR'''
        return super(IEdgeFeatureSource, self).put_ToElevationFieldName(Name)
    ClassConnectivityGroup = property(get_ClassConnectivityGroup, put_ClassConnectivityGroup, None)
    ClassConnectivityPolicy = property(get_ClassConnectivityPolicy, put_ClassConnectivityPolicy, None)
    FromElevationFieldName = property(get_FromElevationFieldName, put_FromElevationFieldName, None)
    SubtypeConnectivityGroup = property(None, put_SubtypeConnectivityGroup, None)
    SubtypeConnectivityPolicy = property(None, put_SubtypeConnectivityPolicy, None)
    ToElevationFieldName = property(get_ToElevationFieldName, put_ToElevationFieldName, None)
    UsesSubtypes = property(get_UsesSubtypes, put_UsesSubtypes, None)
    SubtypeConnectivityGroup = IndexProperty(get_SubtypeConnectivityGroup, None)
    SubtypeConnectivityPolicy = IndexProperty(get_SubtypeConnectivityPolicy, None)

class IJunctionFeatureSource(_esriGeoDatabase.IJunctionFeatureSource):
    _IID = uuid.UUID('442ace6e-78ca-452f-91e9-405534cc9d27')

    def __init__(self, *args, **kw):
        super(IJunctionFeatureSource, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassConnectivityGroups(self):
        '''Method IJunctionFeatureSource.get_ClassConnectivityGroups

           OUTPUT
            groups              : ILongArray**'''
        return super(IJunctionFeatureSource, self).get_ClassConnectivityGroups()
    def AddClassConnectivityGroup(self, group):
        '''Method IJunctionFeatureSource.AddClassConnectivityGroup

           INPUT
            group               : long'''
        return super(IJunctionFeatureSource, self).AddClassConnectivityGroup(group)
    def RemoveAllClassConnectivityGroups(self):
        '''Method IJunctionFeatureSource.RemoveAllClassConnectivityGroups'''
        return super(IJunctionFeatureSource, self).RemoveAllClassConnectivityGroups()
    def get_SubtypeConnectivityGroups(self, SubtypeCode):
        '''Method IJunctionFeatureSource.get_SubtypeConnectivityGroups

           INPUT
            SubtypeCode         : long

           OUTPUT
            groups              : ILongArray**'''
        return super(IJunctionFeatureSource, self).get_SubtypeConnectivityGroups(SubtypeCode)
    def AddSubtypeConnectivityGroup(self, SubtypeCode, group):
        '''Method IJunctionFeatureSource.AddSubtypeConnectivityGroup

           INPUTS
            SubtypeCode         : long
            group               : long'''
        return super(IJunctionFeatureSource, self).AddSubtypeConnectivityGroup(SubtypeCode, group)
    def RemoveAllSubtypeConnectivityGroups(self, SubtypeCode):
        '''Method IJunctionFeatureSource.RemoveAllSubtypeConnectivityGroups

           INPUT
            SubtypeCode         : long'''
        return super(IJunctionFeatureSource, self).RemoveAllSubtypeConnectivityGroups(SubtypeCode)
    def get_ClassConnectivityPolicy(self):
        '''Method IJunctionFeatureSource.get_ClassConnectivityPolicy

           OUTPUT
            policy              : esriNetworkJunctionConnectivityPolicy*'''
        return super(IJunctionFeatureSource, self).get_ClassConnectivityPolicy()
    def put_ClassConnectivityPolicy(self, policy):
        '''Method IJunctionFeatureSource.put_ClassConnectivityPolicy

           INPUT
            policy              : esriNetworkJunctionConnectivityPolicy'''
        return super(IJunctionFeatureSource, self).put_ClassConnectivityPolicy(policy)
    def get_SubtypeConnectivityPolicy(self, SubtypeCode):
        '''Method IJunctionFeatureSource.get_SubtypeConnectivityPolicy

           INPUT
            SubtypeCode         : long

           OUTPUT
            policy              : esriNetworkJunctionConnectivityPolicy*'''
        return super(IJunctionFeatureSource, self).get_SubtypeConnectivityPolicy(SubtypeCode)
    def put_SubtypeConnectivityPolicy(self, SubtypeCode, policy):
        '''Method IJunctionFeatureSource.put_SubtypeConnectivityPolicy

           INPUTS
            SubtypeCode         : long
            policy              : esriNetworkJunctionConnectivityPolicy'''
        return super(IJunctionFeatureSource, self).put_SubtypeConnectivityPolicy(SubtypeCode, policy)
    def get_UsesSubtypes(self):
        '''Method IJunctionFeatureSource.get_UsesSubtypes

           OUTPUT
            bySubtype           : VARIANT_BOOL*'''
        return super(IJunctionFeatureSource, self).get_UsesSubtypes()
    def put_UsesSubtypes(self, bySubtype):
        '''Method IJunctionFeatureSource.put_UsesSubtypes

           INPUT
            bySubtype           : VARIANT_BOOL'''
        return super(IJunctionFeatureSource, self).put_UsesSubtypes(bySubtype)
    def get_ElevationFieldName(self):
        '''Method IJunctionFeatureSource.get_ElevationFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IJunctionFeatureSource, self).get_ElevationFieldName()
    def put_ElevationFieldName(self, Name):
        '''Method IJunctionFeatureSource.put_ElevationFieldName

           INPUT
            Name                : BSTR'''
        return super(IJunctionFeatureSource, self).put_ElevationFieldName(Name)
    ClassConnectivityGroups = property(get_ClassConnectivityGroups, None, None)
    ClassConnectivityPolicy = property(get_ClassConnectivityPolicy, put_ClassConnectivityPolicy, None)
    ElevationFieldName = property(get_ElevationFieldName, put_ElevationFieldName, None)
    SubtypeConnectivityPolicy = property(None, put_SubtypeConnectivityPolicy, None)
    UsesSubtypes = property(get_UsesSubtypes, put_UsesSubtypes, None)
    SubtypeConnectivityGroups = IndexProperty(get_SubtypeConnectivityGroups, None)
    SubtypeConnectivityPolicy = IndexProperty(get_SubtypeConnectivityPolicy, None)

class ISystemJunctionSource(_esriGeoDatabase.ISystemJunctionSource):
    _IID = uuid.UUID('ba5ffb8b-06a4-4a95-b14d-ae71bb9a354e')
    def get_ElevationFieldName(self):
        '''Method ISystemJunctionSource.get_ElevationFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(ISystemJunctionSource, self).get_ElevationFieldName()
    ElevationFieldName = property(get_ElevationFieldName, None, None)

class IDirectionsAttributeMapping(_esriGeoDatabase.IDirectionsAttributeMapping):
    _IID = uuid.UUID('1ac4346c-1c68-4fe9-a5da-fae0eeafc02e')

    def __init__(self, *args, **kw):
        super(IDirectionsAttributeMapping, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_KeyName(self, KeyName):
        '''Method IDirectionsAttributeMapping.put_KeyName

           INPUT
            KeyName             : BSTR'''
        return super(IDirectionsAttributeMapping, self).put_KeyName(KeyName)
    def get_KeyName(self):
        '''Method IDirectionsAttributeMapping.get_KeyName

           OUTPUT
            KeyName             : BSTR*'''
        return super(IDirectionsAttributeMapping, self).get_KeyName()
    def put_AttributeName(self, AttributeName):
        '''Method IDirectionsAttributeMapping.put_AttributeName

           INPUT
            AttributeName       : BSTR'''
        return super(IDirectionsAttributeMapping, self).put_AttributeName(AttributeName)
    def get_AttributeName(self):
        '''Method IDirectionsAttributeMapping.get_AttributeName

           OUTPUT
            AttributeName       : BSTR*'''
        return super(IDirectionsAttributeMapping, self).get_AttributeName()
    AttributeName = property(get_AttributeName, put_AttributeName, None)
    KeyName = property(get_KeyName, put_KeyName, None)

class INetworkSourceDirections3(_esriGeoDatabase.INetworkSourceDirections3):
    _IID = uuid.UUID('031d0936-ffdd-4259-a549-31fab7889ca0')

    def __init__(self, *args, **kw):
        super(INetworkSourceDirections3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LandmarkEventSources(self):
        '''Method INetworkSourceDirections3.get_LandmarkEventSources

           OUTPUT
            eventSources        : IArray**'''
        return super(INetworkSourceDirections3, self).get_LandmarkEventSources()
    def putref_LandmarkEventSources(self, eventSources):
        '''Method INetworkSourceDirections3.putref_LandmarkEventSources

           INPUT
            eventSources        : IArray*'''
        return super(INetworkSourceDirections3, self).putref_LandmarkEventSources(eventSources)
    def get_LandmarkManeuverSources(self):
        '''Method INetworkSourceDirections3.get_LandmarkManeuverSources

           OUTPUT
            maneuverSources     : IArray**'''
        return super(INetworkSourceDirections3, self).get_LandmarkManeuverSources()
    def putref_LandmarkManeuverSources(self, maneuverSources):
        '''Method INetworkSourceDirections3.putref_LandmarkManeuverSources

           INPUT
            maneuverSources     : IArray*'''
        return super(INetworkSourceDirections3, self).putref_LandmarkManeuverSources(maneuverSources)
    def get_FieldMappings(self):
        '''Method INetworkSourceDirections2.get_FieldMappings (from INetworkSourceDirections2)

           OUTPUT
            FieldMappings       : IArray**'''
        return super(INetworkSourceDirections3, self).get_FieldMappings()
    def putref_FieldMappings(self, FieldMappings):
        '''Method INetworkSourceDirections2.putref_FieldMappings (from INetworkSourceDirections2)

           INPUT
            FieldMappings       : IArray*'''
        return super(INetworkSourceDirections3, self).putref_FieldMappings(FieldMappings)
    def get_Shields(self):
        '''Method INetworkSourceDirections.get_Shields (from INetworkSourceDirections)

           OUTPUT
            Shields             : IShields**'''
        return super(INetworkSourceDirections3, self).get_Shields()
    def putref_Shields(self, Shields):
        '''Method INetworkSourceDirections.putref_Shields (from INetworkSourceDirections)

           INPUT
            Shields             : IShields*'''
        return super(INetworkSourceDirections3, self).putref_Shields(Shields)
    def get_AdminAreaFieldName(self):
        '''Method INetworkSourceDirections.get_AdminAreaFieldName (from INetworkSourceDirections)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkSourceDirections3, self).get_AdminAreaFieldName()
    def put_AdminAreaFieldName(self, Name):
        '''Method INetworkSourceDirections.put_AdminAreaFieldName (from INetworkSourceDirections)

           INPUT
            Name                : BSTR'''
        return super(INetworkSourceDirections3, self).put_AdminAreaFieldName(Name)
    def get_StreetNameFields(self):
        '''Method INetworkSourceDirections.get_StreetNameFields (from INetworkSourceDirections)

           OUTPUT
            Fields              : IArray**'''
        return super(INetworkSourceDirections3, self).get_StreetNameFields()
    def putref_StreetNameFields(self, Fields):
        '''Method INetworkSourceDirections.putref_StreetNameFields (from INetworkSourceDirections)

           INPUT
            Fields              : IArray*'''
        return super(INetworkSourceDirections3, self).putref_StreetNameFields(Fields)
    AdminAreaFieldName = property(get_AdminAreaFieldName, put_AdminAreaFieldName, None)
    FieldMappings = property(get_FieldMappings, putref_FieldMappings, None)
    LandmarkEventSources = property(get_LandmarkEventSources, putref_LandmarkEventSources, None)
    LandmarkManeuverSources = property(get_LandmarkManeuverSources, putref_LandmarkManeuverSources, None)
    Shields = property(get_Shields, putref_Shields, None)
    StreetNameFields = property(get_StreetNameFields, putref_StreetNameFields, None)

class IDirectionsLandmarkSource(_esriGeoDatabase.IDirectionsLandmarkSource):
    _IID = uuid.UUID('a85044b3-a490-49b6-b37b-91210e2e9375')

    def __init__(self, *args, **kw):
        super(IDirectionsLandmarkSource, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureClassName(self):
        '''Method IDirectionsLandmarkSource.get_FeatureClassName

           OUTPUT
            Name                : BSTR*'''
        return super(IDirectionsLandmarkSource, self).get_FeatureClassName()
    def put_FeatureClassName(self, Name):
        '''Method IDirectionsLandmarkSource.put_FeatureClassName

           INPUT
            Name                : BSTR'''
        return super(IDirectionsLandmarkSource, self).put_FeatureClassName(Name)
    def get_LabelFieldName(self):
        '''Method IDirectionsLandmarkSource.get_LabelFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IDirectionsLandmarkSource, self).get_LabelFieldName()
    def put_LabelFieldName(self, Name):
        '''Method IDirectionsLandmarkSource.put_LabelFieldName

           INPUT
            Name                : BSTR'''
        return super(IDirectionsLandmarkSource, self).put_LabelFieldName(Name)
    def get_LevelFieldName(self):
        '''Method IDirectionsLandmarkSource.get_LevelFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IDirectionsLandmarkSource, self).get_LevelFieldName()
    def put_LevelFieldName(self, Name):
        '''Method IDirectionsLandmarkSource.put_LevelFieldName

           INPUT
            Name                : BSTR'''
        return super(IDirectionsLandmarkSource, self).put_LevelFieldName(Name)
    def get_SearchTolerance(self):
        '''Method IDirectionsLandmarkSource.get_SearchTolerance

           OUTPUT
            tolerance           : double*'''
        return super(IDirectionsLandmarkSource, self).get_SearchTolerance()
    def put_SearchTolerance(self, tolerance):
        '''Method IDirectionsLandmarkSource.put_SearchTolerance

           INPUT
            tolerance           : double'''
        return super(IDirectionsLandmarkSource, self).put_SearchTolerance(tolerance)
    def get_SearchToleranceUnits(self):
        '''Method IDirectionsLandmarkSource.get_SearchToleranceUnits

           OUTPUT
            Units               : esriUnits*'''
        return super(IDirectionsLandmarkSource, self).get_SearchToleranceUnits()
    def put_SearchToleranceUnits(self, Units):
        '''Method IDirectionsLandmarkSource.put_SearchToleranceUnits

           INPUT
            Units               : esriUnits'''
        return super(IDirectionsLandmarkSource, self).put_SearchToleranceUnits(Units)
    def get_UseSpatialSearch(self):
        '''Method IDirectionsLandmarkSource.get_UseSpatialSearch

           OUTPUT
            useSearch           : VARIANT_BOOL*'''
        return super(IDirectionsLandmarkSource, self).get_UseSpatialSearch()
    def put_UseSpatialSearch(self, useSearch):
        '''Method IDirectionsLandmarkSource.put_UseSpatialSearch

           INPUT
            useSearch           : VARIANT_BOOL'''
        return super(IDirectionsLandmarkSource, self).put_UseSpatialSearch(useSearch)
    FeatureClassName = property(get_FeatureClassName, put_FeatureClassName, None)
    LabelFieldName = property(get_LabelFieldName, put_LabelFieldName, None)
    LevelFieldName = property(get_LevelFieldName, put_LevelFieldName, None)
    SearchTolerance = property(get_SearchTolerance, put_SearchTolerance, None)
    SearchToleranceUnits = property(get_SearchToleranceUnits, put_SearchToleranceUnits, None)
    UseSpatialSearch = property(get_UseSpatialSearch, put_UseSpatialSearch, None)

class IDirectionsFieldMapping(_esriGeoDatabase.IDirectionsFieldMapping):
    _IID = uuid.UUID('83a34c32-8230-4f0e-a647-e63765ce7af4')

    def __init__(self, *args, **kw):
        super(IDirectionsFieldMapping, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_KeyName(self, KeyName):
        '''Method IDirectionsFieldMapping.put_KeyName

           INPUT
            KeyName             : BSTR'''
        return super(IDirectionsFieldMapping, self).put_KeyName(KeyName)
    def get_KeyName(self):
        '''Method IDirectionsFieldMapping.get_KeyName

           OUTPUT
            KeyName             : BSTR*'''
        return super(IDirectionsFieldMapping, self).get_KeyName()
    def put_FieldName(self, Direction, FieldName):
        '''Method IDirectionsFieldMapping.put_FieldName

           INPUTS
            Direction           : esriNetworkEdgeDirection
            FieldName           : BSTR'''
        return super(IDirectionsFieldMapping, self).put_FieldName(Direction, FieldName)
    def get_FieldName(self, Direction):
        '''Method IDirectionsFieldMapping.get_FieldName

           INPUT
            Direction           : esriNetworkEdgeDirection

           OUTPUT
            FieldName           : BSTR*'''
        return super(IDirectionsFieldMapping, self).get_FieldName(Direction)
    FieldName = property(None, put_FieldName, None)
    KeyName = property(get_KeyName, put_KeyName, None)
    FieldName = IndexProperty(get_FieldName, None)

class IStreetNameFields(_esriGeoDatabase.IStreetNameFields):
    _IID = uuid.UUID('a69522da-5c7e-439d-bb91-60cc70ff7fc0')

    def __init__(self, *args, **kw):
        super(IStreetNameFields, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PrefixDirectionFieldName(self):
        '''Method IStreetNameFields.get_PrefixDirectionFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields, self).get_PrefixDirectionFieldName()
    def put_PrefixDirectionFieldName(self, Name):
        '''Method IStreetNameFields.put_PrefixDirectionFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields, self).put_PrefixDirectionFieldName(Name)
    def get_PrefixTypeFieldName(self):
        '''Method IStreetNameFields.get_PrefixTypeFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields, self).get_PrefixTypeFieldName()
    def put_PrefixTypeFieldName(self, Name):
        '''Method IStreetNameFields.put_PrefixTypeFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields, self).put_PrefixTypeFieldName(Name)
    def get_StreetNameFieldName(self):
        '''Method IStreetNameFields.get_StreetNameFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields, self).get_StreetNameFieldName()
    def put_StreetNameFieldName(self, Name):
        '''Method IStreetNameFields.put_StreetNameFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields, self).put_StreetNameFieldName(Name)
    def get_SuffixTypeFieldName(self):
        '''Method IStreetNameFields.get_SuffixTypeFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields, self).get_SuffixTypeFieldName()
    def put_SuffixTypeFieldName(self, Name):
        '''Method IStreetNameFields.put_SuffixTypeFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields, self).put_SuffixTypeFieldName(Name)
    def get_SuffixDirectionFieldName(self):
        '''Method IStreetNameFields.get_SuffixDirectionFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields, self).get_SuffixDirectionFieldName()
    def put_SuffixDirectionFieldName(self, Name):
        '''Method IStreetNameFields.put_SuffixDirectionFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields, self).put_SuffixDirectionFieldName(Name)
    def get_Priority(self):
        '''Method IStreetNameFields.get_Priority

           OUTPUT
            Priority            : long*'''
        return super(IStreetNameFields, self).get_Priority()
    def put_Priority(self, Priority):
        '''Method IStreetNameFields.put_Priority

           INPUT
            Priority            : long'''
        return super(IStreetNameFields, self).put_Priority(Priority)
    PrefixDirectionFieldName = property(get_PrefixDirectionFieldName, put_PrefixDirectionFieldName, None)
    PrefixTypeFieldName = property(get_PrefixTypeFieldName, put_PrefixTypeFieldName, None)
    Priority = property(get_Priority, put_Priority, None)
    StreetNameFieldName = property(get_StreetNameFieldName, put_StreetNameFieldName, None)
    SuffixDirectionFieldName = property(get_SuffixDirectionFieldName, put_SuffixDirectionFieldName, None)
    SuffixTypeFieldName = property(get_SuffixTypeFieldName, put_SuffixTypeFieldName, None)

class IStreetNameFields2(_esriGeoDatabase.IStreetNameFields2):
    _IID = uuid.UUID('195dee8d-4025-49ae-a76b-3a198d110fdb')

    def __init__(self, *args, **kw):
        super(IStreetNameFields2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HighwayDirectionFieldName(self):
        '''Method IStreetNameFields2.get_HighwayDirectionFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_HighwayDirectionFieldName()
    def put_HighwayDirectionFieldName(self, Name):
        '''Method IStreetNameFields2.put_HighwayDirectionFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_HighwayDirectionFieldName(Name)
    def get_LanguageFieldName(self):
        '''Method IStreetNameFields2.get_LanguageFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_LanguageFieldName()
    def put_LanguageFieldName(self, Name):
        '''Method IStreetNameFields2.put_LanguageFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_LanguageFieldName(Name)
    def get_FullNameFieldName(self):
        '''Method IStreetNameFields2.get_FullNameFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_FullNameFieldName()
    def put_FullNameFieldName(self, Name):
        '''Method IStreetNameFields2.put_FullNameFieldName

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_FullNameFieldName(Name)
    def get_PrefixDirectionFieldName(self):
        '''Method IStreetNameFields.get_PrefixDirectionFieldName (from IStreetNameFields)

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_PrefixDirectionFieldName()
    def put_PrefixDirectionFieldName(self, Name):
        '''Method IStreetNameFields.put_PrefixDirectionFieldName (from IStreetNameFields)

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_PrefixDirectionFieldName(Name)
    def get_PrefixTypeFieldName(self):
        '''Method IStreetNameFields.get_PrefixTypeFieldName (from IStreetNameFields)

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_PrefixTypeFieldName()
    def put_PrefixTypeFieldName(self, Name):
        '''Method IStreetNameFields.put_PrefixTypeFieldName (from IStreetNameFields)

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_PrefixTypeFieldName(Name)
    def get_StreetNameFieldName(self):
        '''Method IStreetNameFields.get_StreetNameFieldName (from IStreetNameFields)

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_StreetNameFieldName()
    def put_StreetNameFieldName(self, Name):
        '''Method IStreetNameFields.put_StreetNameFieldName (from IStreetNameFields)

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_StreetNameFieldName(Name)
    def get_SuffixTypeFieldName(self):
        '''Method IStreetNameFields.get_SuffixTypeFieldName (from IStreetNameFields)

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_SuffixTypeFieldName()
    def put_SuffixTypeFieldName(self, Name):
        '''Method IStreetNameFields.put_SuffixTypeFieldName (from IStreetNameFields)

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_SuffixTypeFieldName(Name)
    def get_SuffixDirectionFieldName(self):
        '''Method IStreetNameFields.get_SuffixDirectionFieldName (from IStreetNameFields)

           OUTPUT
            Name                : BSTR*'''
        return super(IStreetNameFields2, self).get_SuffixDirectionFieldName()
    def put_SuffixDirectionFieldName(self, Name):
        '''Method IStreetNameFields.put_SuffixDirectionFieldName (from IStreetNameFields)

           INPUT
            Name                : BSTR'''
        return super(IStreetNameFields2, self).put_SuffixDirectionFieldName(Name)
    def get_Priority(self):
        '''Method IStreetNameFields.get_Priority (from IStreetNameFields)

           OUTPUT
            Priority            : long*'''
        return super(IStreetNameFields2, self).get_Priority()
    def put_Priority(self, Priority):
        '''Method IStreetNameFields.put_Priority (from IStreetNameFields)

           INPUT
            Priority            : long'''
        return super(IStreetNameFields2, self).put_Priority(Priority)
    FullNameFieldName = property(get_FullNameFieldName, put_FullNameFieldName, None)
    HighwayDirectionFieldName = property(get_HighwayDirectionFieldName, put_HighwayDirectionFieldName, None)
    LanguageFieldName = property(get_LanguageFieldName, put_LanguageFieldName, None)
    PrefixDirectionFieldName = property(get_PrefixDirectionFieldName, put_PrefixDirectionFieldName, None)
    PrefixTypeFieldName = property(get_PrefixTypeFieldName, put_PrefixTypeFieldName, None)
    Priority = property(get_Priority, put_Priority, None)
    StreetNameFieldName = property(get_StreetNameFieldName, put_StreetNameFieldName, None)
    SuffixDirectionFieldName = property(get_SuffixDirectionFieldName, put_SuffixDirectionFieldName, None)
    SuffixTypeFieldName = property(get_SuffixTypeFieldName, put_SuffixTypeFieldName, None)

class IEvaluatedNetworkAttribute(_esriGeoDatabase.IEvaluatedNetworkAttribute):
    _IID = uuid.UUID('afb92f55-f7e1-4210-b44e-e118ac2d4d99')

    def __init__(self, *args, **kw):
        super(IEvaluatedNetworkAttribute, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DefaultEvaluator(self, ElementType, Evaluator):
        '''Method IEvaluatedNetworkAttribute.putref_DefaultEvaluator

           INPUTS
            ElementType         : esriNetworkElementType
            Evaluator           : INetworkEvaluator*'''
        return super(IEvaluatedNetworkAttribute, self).putref_DefaultEvaluator(ElementType, Evaluator)
    def get_DefaultEvaluator(self, ElementType):
        '''Method IEvaluatedNetworkAttribute.get_DefaultEvaluator

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Evaluator           : INetworkEvaluator**'''
        return super(IEvaluatedNetworkAttribute, self).get_DefaultEvaluator(ElementType)
    def putref_Evaluator(self, NetworkSource, Direction, Evaluator):
        '''Method IEvaluatedNetworkAttribute.putref_Evaluator

           INPUTS
            NetworkSource       : INetworkSource*
            Direction           : esriNetworkEdgeDirection
            Evaluator           : INetworkEvaluator*'''
        return super(IEvaluatedNetworkAttribute, self).putref_Evaluator(NetworkSource, Direction, Evaluator)
    def get_Evaluator(self, NetworkSource, Direction):
        '''Method IEvaluatedNetworkAttribute.get_Evaluator

           INPUTS
            NetworkSource       : INetworkSource*
            Direction           : esriNetworkEdgeDirection

           OUTPUT
            Evaluator           : INetworkEvaluator**'''
        return super(IEvaluatedNetworkAttribute, self).get_Evaluator(NetworkSource, Direction)
    def get_Name(self):
        '''Method INetworkAttribute.get_Name (from INetworkAttribute)

           OUTPUT
            AttributeName       : BSTR*'''
        return super(IEvaluatedNetworkAttribute, self).get_Name()
    def put_Name(self, AttributeName):
        '''Method INetworkAttribute.put_Name (from INetworkAttribute)

           INPUT
            AttributeName       : BSTR'''
        return super(IEvaluatedNetworkAttribute, self).put_Name(AttributeName)
    def get_ID(self):
        '''Method INetworkAttribute.get_ID (from INetworkAttribute)

           OUTPUT
            AttributeID         : long*'''
        return super(IEvaluatedNetworkAttribute, self).get_ID()
    def get_DataType(self):
        '''Method INetworkAttribute.get_DataType (from INetworkAttribute)

           OUTPUT
            DataType            : esriNetworkAttributeDataType*'''
        return super(IEvaluatedNetworkAttribute, self).get_DataType()
    def put_DataType(self, DataType):
        '''Method INetworkAttribute.put_DataType (from INetworkAttribute)

           INPUT
            DataType            : esriNetworkAttributeDataType'''
        return super(IEvaluatedNetworkAttribute, self).put_DataType(DataType)
    def get_UsageType(self):
        '''Method INetworkAttribute.get_UsageType (from INetworkAttribute)

           OUTPUT
            UsageType           : esriNetworkAttributeUsageType*'''
        return super(IEvaluatedNetworkAttribute, self).get_UsageType()
    def put_UsageType(self, UsageType):
        '''Method INetworkAttribute.put_UsageType (from INetworkAttribute)

           INPUT
            UsageType           : esriNetworkAttributeUsageType'''
        return super(IEvaluatedNetworkAttribute, self).put_UsageType(UsageType)
    def get_Units(self):
        '''Method INetworkAttribute.get_Units (from INetworkAttribute)

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(IEvaluatedNetworkAttribute, self).get_Units()
    def put_Units(self, Units):
        '''Method INetworkAttribute.put_Units (from INetworkAttribute)

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(IEvaluatedNetworkAttribute, self).put_Units(Units)
    DataType = property(get_DataType, put_DataType, None)
    DefaultEvaluator = property(None, putref_DefaultEvaluator, None)
    Evaluator = property(None, putref_Evaluator, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, put_Name, None)
    Units = property(get_Units, put_Units, None)
    UsageType = property(get_UsageType, put_UsageType, None)
    DefaultEvaluator = IndexProperty(get_DefaultEvaluator, None)

class IEvaluatedNetworkAttribute2(_esriGeoDatabase.IEvaluatedNetworkAttribute2):
    _IID = uuid.UUID('b330f518-d166-42b9-a7ea-015cf104c41d')

    def __init__(self, *args, **kw):
        super(IEvaluatedNetworkAttribute2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DENetworkDataset(self):
        '''Method IEvaluatedNetworkAttribute2.get_DENetworkDataset

           OUTPUT
            DataElement         : IDENetworkDataset**'''
        return super(IEvaluatedNetworkAttribute2, self).get_DENetworkDataset()
    def putref_DefaultEvaluator(self, ElementType, Evaluator):
        '''Method IEvaluatedNetworkAttribute.putref_DefaultEvaluator (from IEvaluatedNetworkAttribute)

           INPUTS
            ElementType         : esriNetworkElementType
            Evaluator           : INetworkEvaluator*'''
        return super(IEvaluatedNetworkAttribute2, self).putref_DefaultEvaluator(ElementType, Evaluator)
    def get_DefaultEvaluator(self, ElementType):
        '''Method IEvaluatedNetworkAttribute.get_DefaultEvaluator (from IEvaluatedNetworkAttribute)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Evaluator           : INetworkEvaluator**'''
        return super(IEvaluatedNetworkAttribute2, self).get_DefaultEvaluator(ElementType)
    def putref_Evaluator(self, NetworkSource, Direction, Evaluator):
        '''Method IEvaluatedNetworkAttribute.putref_Evaluator (from IEvaluatedNetworkAttribute)

           INPUTS
            NetworkSource       : INetworkSource*
            Direction           : esriNetworkEdgeDirection
            Evaluator           : INetworkEvaluator*'''
        return super(IEvaluatedNetworkAttribute2, self).putref_Evaluator(NetworkSource, Direction, Evaluator)
    def get_Evaluator(self, NetworkSource, Direction):
        '''Method IEvaluatedNetworkAttribute.get_Evaluator (from IEvaluatedNetworkAttribute)

           INPUTS
            NetworkSource       : INetworkSource*
            Direction           : esriNetworkEdgeDirection

           OUTPUT
            Evaluator           : INetworkEvaluator**'''
        return super(IEvaluatedNetworkAttribute2, self).get_Evaluator(NetworkSource, Direction)
    def get_Name(self):
        '''Method INetworkAttribute.get_Name (from INetworkAttribute)

           OUTPUT
            AttributeName       : BSTR*'''
        return super(IEvaluatedNetworkAttribute2, self).get_Name()
    def put_Name(self, AttributeName):
        '''Method INetworkAttribute.put_Name (from INetworkAttribute)

           INPUT
            AttributeName       : BSTR'''
        return super(IEvaluatedNetworkAttribute2, self).put_Name(AttributeName)
    def get_ID(self):
        '''Method INetworkAttribute.get_ID (from INetworkAttribute)

           OUTPUT
            AttributeID         : long*'''
        return super(IEvaluatedNetworkAttribute2, self).get_ID()
    def get_DataType(self):
        '''Method INetworkAttribute.get_DataType (from INetworkAttribute)

           OUTPUT
            DataType            : esriNetworkAttributeDataType*'''
        return super(IEvaluatedNetworkAttribute2, self).get_DataType()
    def put_DataType(self, DataType):
        '''Method INetworkAttribute.put_DataType (from INetworkAttribute)

           INPUT
            DataType            : esriNetworkAttributeDataType'''
        return super(IEvaluatedNetworkAttribute2, self).put_DataType(DataType)
    def get_UsageType(self):
        '''Method INetworkAttribute.get_UsageType (from INetworkAttribute)

           OUTPUT
            UsageType           : esriNetworkAttributeUsageType*'''
        return super(IEvaluatedNetworkAttribute2, self).get_UsageType()
    def put_UsageType(self, UsageType):
        '''Method INetworkAttribute.put_UsageType (from INetworkAttribute)

           INPUT
            UsageType           : esriNetworkAttributeUsageType'''
        return super(IEvaluatedNetworkAttribute2, self).put_UsageType(UsageType)
    def get_Units(self):
        '''Method INetworkAttribute.get_Units (from INetworkAttribute)

           OUTPUT
            Units               : esriNetworkAttributeUnits*'''
        return super(IEvaluatedNetworkAttribute2, self).get_Units()
    def put_Units(self, Units):
        '''Method INetworkAttribute.put_Units (from INetworkAttribute)

           INPUT
            Units               : esriNetworkAttributeUnits'''
        return super(IEvaluatedNetworkAttribute2, self).put_Units(Units)
    DENetworkDataset = property(get_DENetworkDataset, None, None)
    DataType = property(get_DataType, put_DataType, None)
    DefaultEvaluator = property(None, putref_DefaultEvaluator, None)
    Evaluator = property(None, putref_Evaluator, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, put_Name, None)
    Units = property(get_Units, put_Units, None)
    UsageType = property(get_UsageType, put_UsageType, None)
    DefaultEvaluator = IndexProperty(get_DefaultEvaluator, None)

class INetworkEvaluator2(_esriGeoDatabase.INetworkEvaluator2):
    _IID = uuid.UUID('8498de86-9e39-4f92-9301-d1e9862b1dbd')
    def get_RequiredFieldNames(self):
        '''Method INetworkEvaluator2.get_RequiredFieldNames

           OUTPUT
            fieldNames          : IStringArray**'''
        return super(INetworkEvaluator2, self).get_RequiredFieldNames()
    def Refresh(self):
        '''Method INetworkEvaluator2.Refresh'''
        return super(INetworkEvaluator2, self).Refresh()
    def get_Name(self):
        '''Method INetworkEvaluator.get_Name (from INetworkEvaluator)

           OUTPUT
            pName               : BSTR*'''
        return super(INetworkEvaluator2, self).get_Name()
    def get_DisplayName(self):
        '''Method INetworkEvaluator.get_DisplayName (from INetworkEvaluator)

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(INetworkEvaluator2, self).get_DisplayName()
    def get_CacheAttribute(self):
        '''Method INetworkEvaluator.get_CacheAttribute (from INetworkEvaluator)

           OUTPUT
            Cache               : VARIANT_BOOL*'''
        return super(INetworkEvaluator2, self).get_CacheAttribute()
    CacheAttribute = property(get_CacheAttribute, None, None)
    DisplayName = property(get_DisplayName, None, None)
    Name = property(get_Name, None, None)
    RequiredFieldNames = property(get_RequiredFieldNames, None, None)

class INetworkConstantEvaluator(_esriGeoDatabase.INetworkConstantEvaluator):
    _IID = uuid.UUID('2ce6ce13-a6ac-4633-bba3-ff1b294cee02')

    def __init__(self, *args, **kw):
        super(INetworkConstantEvaluator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ConstantValue(self, val):
        '''Method INetworkConstantEvaluator.put_ConstantValue

           INPUT
            val                 : VARIANT'''
        return super(INetworkConstantEvaluator, self).put_ConstantValue(val)
    def get_ConstantValue(self):
        '''Method INetworkConstantEvaluator.get_ConstantValue

           OUTPUT
            val                 : VARIANT*'''
        return super(INetworkConstantEvaluator, self).get_ConstantValue()
    ConstantValue = property(get_ConstantValue, put_ConstantValue, None)

class INetworkFieldEvaluator(_esriGeoDatabase.INetworkFieldEvaluator):
    _IID = uuid.UUID('6337ab0f-7a5e-4de6-bb75-492b407146ff')
    def SetExpression(self, Expression, preLogic):
        '''Method INetworkFieldEvaluator.SetExpression

           INPUTS
            Expression          : BSTR
            preLogic            : BSTR'''
        return super(INetworkFieldEvaluator, self).SetExpression(Expression, preLogic)
    def GetExpression(self):
        '''Method INetworkFieldEvaluator.GetExpression

           OUTPUTS
            Expression          : BSTR*
            preLogic            : BSTR*'''
        return super(INetworkFieldEvaluator, self).GetExpression()

class INetworkFieldEvaluator2(_esriGeoDatabase.INetworkFieldEvaluator2):
    _IID = uuid.UUID('371f4a7d-edea-457e-920d-4b7de2d2b6a5')
    def SetLanguage(self, language):
        '''Method INetworkFieldEvaluator2.SetLanguage

           INPUT
            language            : BSTR'''
        return super(INetworkFieldEvaluator2, self).SetLanguage(language)
    def GetLanguage(self):
        '''Method INetworkFieldEvaluator2.GetLanguage

           OUTPUT
            language            : BSTR*'''
        return super(INetworkFieldEvaluator2, self).GetLanguage()
    def SetExpression(self, Expression, preLogic):
        '''Method INetworkFieldEvaluator.SetExpression (from INetworkFieldEvaluator)

           INPUTS
            Expression          : BSTR
            preLogic            : BSTR'''
        return super(INetworkFieldEvaluator2, self).SetExpression(Expression, preLogic)
    def GetExpression(self):
        '''Method INetworkFieldEvaluator.GetExpression (from INetworkFieldEvaluator)

           OUTPUTS
            Expression          : BSTR*
            preLogic            : BSTR*'''
        return super(INetworkFieldEvaluator2, self).GetExpression()

class INetworkScriptEvaluator(_esriGeoDatabase.INetworkScriptEvaluator):
    _IID = uuid.UUID('9603b546-894d-4dcd-93ed-a2e046faf32c')
    def SetExpression(self, Expression, preLogic):
        '''Method INetworkScriptEvaluator.SetExpression

           INPUTS
            Expression          : BSTR
            preLogic            : BSTR'''
        return super(INetworkScriptEvaluator, self).SetExpression(Expression, preLogic)
    def GetExpression(self):
        '''Method INetworkScriptEvaluator.GetExpression

           OUTPUTS
            Expression          : BSTR*
            preLogic            : BSTR*'''
        return super(INetworkScriptEvaluator, self).GetExpression()

class INetworkScriptEvaluator2(_esriGeoDatabase.INetworkScriptEvaluator2):
    _IID = uuid.UUID('6430e4f4-ad03-4310-9a30-0a24ff6c413a')
    def SetLanguage(self, language):
        '''Method INetworkScriptEvaluator2.SetLanguage

           INPUT
            language            : BSTR'''
        return super(INetworkScriptEvaluator2, self).SetLanguage(language)
    def GetLanguage(self):
        '''Method INetworkScriptEvaluator2.GetLanguage

           OUTPUT
            language            : BSTR*'''
        return super(INetworkScriptEvaluator2, self).GetLanguage()
    def SetExpression(self, Expression, preLogic):
        '''Method INetworkScriptEvaluator.SetExpression (from INetworkScriptEvaluator)

           INPUTS
            Expression          : BSTR
            preLogic            : BSTR'''
        return super(INetworkScriptEvaluator2, self).SetExpression(Expression, preLogic)
    def GetExpression(self):
        '''Method INetworkScriptEvaluator.GetExpression (from INetworkScriptEvaluator)

           OUTPUTS
            Expression          : BSTR*
            preLogic            : BSTR*'''
        return super(INetworkScriptEvaluator2, self).GetExpression()

class INetworkGlobalTurnDelayCategory(_esriGeoDatabase.INetworkGlobalTurnDelayCategory):
    _IID = uuid.UUID('a67bf724-a607-4820-b8e4-7017a398066c')

    def __init__(self, *args, **kw):
        super(INetworkGlobalTurnDelayCategory, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Initialize(self, Seconds, AngleCategory, FromRoadCategory, ToRoadCategory, CrossRoadCategory):
        '''Method INetworkGlobalTurnDelayCategory.Initialize

           INPUTS
            Seconds             : double
            AngleCategory       : esriNetworkTurnAngleCategory
            FromRoadCategory    : esriNetworkRoadCategory
            ToRoadCategory      : esriNetworkRoadCategory
            CrossRoadCategory   : esriNetworkRoadCategory'''
        return super(INetworkGlobalTurnDelayCategory, self).Initialize(Seconds, AngleCategory, FromRoadCategory, ToRoadCategory, CrossRoadCategory)
    def get_Seconds(self):
        '''Method INetworkGlobalTurnDelayCategory.get_Seconds

           OUTPUT
            Seconds             : double*'''
        return super(INetworkGlobalTurnDelayCategory, self).get_Seconds()
    def put_Seconds(self, Seconds):
        '''Method INetworkGlobalTurnDelayCategory.put_Seconds

           INPUT
            Seconds             : double'''
        return super(INetworkGlobalTurnDelayCategory, self).put_Seconds(Seconds)
    def get_AngleCategory(self):
        '''Method INetworkGlobalTurnDelayCategory.get_AngleCategory

           OUTPUT
            AngleCategory       : esriNetworkTurnAngleCategory*'''
        return super(INetworkGlobalTurnDelayCategory, self).get_AngleCategory()
    def get_FromRoadCategory(self):
        '''Method INetworkGlobalTurnDelayCategory.get_FromRoadCategory

           OUTPUT
            FromRoadCategory    : esriNetworkRoadCategory*'''
        return super(INetworkGlobalTurnDelayCategory, self).get_FromRoadCategory()
    def get_ToRoadCategory(self):
        '''Method INetworkGlobalTurnDelayCategory.get_ToRoadCategory

           OUTPUT
            ToRoadCategory      : esriNetworkRoadCategory*'''
        return super(INetworkGlobalTurnDelayCategory, self).get_ToRoadCategory()
    def get_CrossRoadCategory(self):
        '''Method INetworkGlobalTurnDelayCategory.get_CrossRoadCategory

           OUTPUT
            CrossRoadCategory   : esriNetworkRoadCategory*'''
        return super(INetworkGlobalTurnDelayCategory, self).get_CrossRoadCategory()
    AngleCategory = property(get_AngleCategory, None, None)
    CrossRoadCategory = property(get_CrossRoadCategory, None, None)
    FromRoadCategory = property(get_FromRoadCategory, None, None)
    Seconds = property(get_Seconds, put_Seconds, None)
    ToRoadCategory = property(get_ToRoadCategory, None, None)

class INetworkGlobalTurnDelayEvaluator(_esriGeoDatabase.INetworkGlobalTurnDelayEvaluator):
    _IID = uuid.UUID('17d76a4b-1365-4e09-a4e0-9bf02dbf07b2')

    def __init__(self, *args, **kw):
        super(INetworkGlobalTurnDelayEvaluator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseCustomRoadCategoryRanges(self):
        '''Method INetworkGlobalTurnDelayEvaluator.get_UseCustomRoadCategoryRanges

           OUTPUT
            Flag                : VARIANT_BOOL*'''
        return super(INetworkGlobalTurnDelayEvaluator, self).get_UseCustomRoadCategoryRanges()
    def put_UseCustomRoadCategoryRanges(self, Flag):
        '''Method INetworkGlobalTurnDelayEvaluator.put_UseCustomRoadCategoryRanges

           INPUT
            Flag                : VARIANT_BOOL'''
        return super(INetworkGlobalTurnDelayEvaluator, self).put_UseCustomRoadCategoryRanges(Flag)
    def SetCustomRoadCategoryMaxValues(self, maxPrimaryRoadValue, maxSecondaryRoadValue):
        '''Method INetworkGlobalTurnDelayEvaluator.SetCustomRoadCategoryMaxValues

           INPUTS
            maxPrimaryRoadValue : long
            maxSecondaryRoadValue: long'''
        return super(INetworkGlobalTurnDelayEvaluator, self).SetCustomRoadCategoryMaxValues(maxPrimaryRoadValue, maxSecondaryRoadValue)
    def get_CustomPrimaryRoadCategoryMaxValue(self):
        '''Method INetworkGlobalTurnDelayEvaluator.get_CustomPrimaryRoadCategoryMaxValue

           OUTPUT
            MaxValue            : long*'''
        return super(INetworkGlobalTurnDelayEvaluator, self).get_CustomPrimaryRoadCategoryMaxValue()
    def get_CustomSecondaryRoadCategoryMaxValue(self):
        '''Method INetworkGlobalTurnDelayEvaluator.get_CustomSecondaryRoadCategoryMaxValue

           OUTPUT
            MaxValue            : long*'''
        return super(INetworkGlobalTurnDelayEvaluator, self).get_CustomSecondaryRoadCategoryMaxValue()
    def get_DefaultSeconds(self):
        '''Method INetworkGlobalTurnDelayEvaluator.get_DefaultSeconds

           OUTPUT
            Seconds             : double*'''
        return super(INetworkGlobalTurnDelayEvaluator, self).get_DefaultSeconds()
    def put_DefaultSeconds(self, Seconds):
        '''Method INetworkGlobalTurnDelayEvaluator.put_DefaultSeconds

           INPUT
            Seconds             : double'''
        return super(INetworkGlobalTurnDelayEvaluator, self).put_DefaultSeconds(Seconds)
    def get_TurnDelayCategories(self):
        '''Method INetworkGlobalTurnDelayEvaluator.get_TurnDelayCategories

           OUTPUT
            categories          : IArray**'''
        return super(INetworkGlobalTurnDelayEvaluator, self).get_TurnDelayCategories()
    def putref_TurnDelayCategories(self, categories):
        '''Method INetworkGlobalTurnDelayEvaluator.putref_TurnDelayCategories

           INPUT
            categories          : IArray*'''
        return super(INetworkGlobalTurnDelayEvaluator, self).putref_TurnDelayCategories(categories)
    def get_MaxStraightTurnDeflectionAngle(self):
        '''Method INetworkGlobalTurnDelayEvaluator.get_MaxStraightTurnDeflectionAngle

           OUTPUT
            maxDeflectionAngle  : long*'''
        return super(INetworkGlobalTurnDelayEvaluator, self).get_MaxStraightTurnDeflectionAngle()
    def put_MaxStraightTurnDeflectionAngle(self, maxDeflectionAngle):
        '''Method INetworkGlobalTurnDelayEvaluator.put_MaxStraightTurnDeflectionAngle

           INPUT
            maxDeflectionAngle  : long'''
        return super(INetworkGlobalTurnDelayEvaluator, self).put_MaxStraightTurnDeflectionAngle(maxDeflectionAngle)
    def get_MaxReverseTurnDeflectionAngle(self):
        '''Method INetworkGlobalTurnDelayEvaluator.get_MaxReverseTurnDeflectionAngle

           OUTPUT
            maxDeflectionAngle  : long*'''
        return super(INetworkGlobalTurnDelayEvaluator, self).get_MaxReverseTurnDeflectionAngle()
    def put_MaxReverseTurnDeflectionAngle(self, maxDeflectionAngle):
        '''Method INetworkGlobalTurnDelayEvaluator.put_MaxReverseTurnDeflectionAngle

           INPUT
            maxDeflectionAngle  : long'''
        return super(INetworkGlobalTurnDelayEvaluator, self).put_MaxReverseTurnDeflectionAngle(maxDeflectionAngle)
    CustomPrimaryRoadCategoryMaxValue = property(get_CustomPrimaryRoadCategoryMaxValue, None, None)
    CustomSecondaryRoadCategoryMaxValue = property(get_CustomSecondaryRoadCategoryMaxValue, None, None)
    DefaultSeconds = property(get_DefaultSeconds, put_DefaultSeconds, None)
    MaxReverseTurnDeflectionAngle = property(get_MaxReverseTurnDeflectionAngle, put_MaxReverseTurnDeflectionAngle, None)
    MaxStraightTurnDeflectionAngle = property(get_MaxStraightTurnDeflectionAngle, put_MaxStraightTurnDeflectionAngle, None)
    TurnDelayCategories = property(get_TurnDelayCategories, putref_TurnDelayCategories, None)
    UseCustomRoadCategoryRanges = property(get_UseCustomRoadCategoryRanges, put_UseCustomRoadCategoryRanges, None)

class INetworkFunctionEvaluator(_esriGeoDatabase.INetworkFunctionEvaluator):
    _IID = uuid.UUID('6699c29b-86cc-4c25-b3dd-98959760477b')

    def __init__(self, *args, **kw):
        super(INetworkFunctionEvaluator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FirstArgument(self, arg1):
        '''Method INetworkFunctionEvaluator.put_FirstArgument

           INPUT
            arg1                : VARIANT'''
        return super(INetworkFunctionEvaluator, self).put_FirstArgument(arg1)
    def get_FirstArgument(self):
        '''Method INetworkFunctionEvaluator.get_FirstArgument

           OUTPUT
            arg1                : VARIANT*'''
        return super(INetworkFunctionEvaluator, self).get_FirstArgument()
    def put_Operator(self, op):
        '''Method INetworkFunctionEvaluator.put_Operator

           INPUT
            op                  : BSTR'''
        return super(INetworkFunctionEvaluator, self).put_Operator(op)
    def get_Operator(self):
        '''Method INetworkFunctionEvaluator.get_Operator

           OUTPUT
            op                  : BSTR*'''
        return super(INetworkFunctionEvaluator, self).get_Operator()
    def put_SecondArgument(self, arg2):
        '''Method INetworkFunctionEvaluator.put_SecondArgument

           INPUT
            arg2                : VARIANT'''
        return super(INetworkFunctionEvaluator, self).put_SecondArgument(arg2)
    def get_SecondArgument(self):
        '''Method INetworkFunctionEvaluator.get_SecondArgument

           OUTPUT
            arg2                : VARIANT*'''
        return super(INetworkFunctionEvaluator, self).get_SecondArgument()
    def GetOperators(self, returnDataType):
        '''Method INetworkFunctionEvaluator.GetOperators

           INPUT
            returnDataType      : esriNetworkAttributeDataType

           OUTPUT
            opNames             : IEnumBSTR**'''
        return super(INetworkFunctionEvaluator, self).GetOperators(returnDataType)
    FirstArgument = property(get_FirstArgument, put_FirstArgument, None)
    Operator = property(get_Operator, put_Operator, None)
    SecondArgument = property(get_SecondArgument, put_SecondArgument, None)

class INetworkBuild(_esriGeoDatabase.INetworkBuild):
    _IID = uuid.UUID('99ca1a8e-0301-4089-b939-1634e45f14a3')
    def AddAttribute(self, Attribute):
        '''Method INetworkBuild.AddAttribute

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(INetworkBuild, self).AddAttribute(Attribute)
    def AddSource(self, Source):
        '''Method INetworkBuild.AddSource

           INPUT
            Source              : INetworkSource*'''
        return super(INetworkBuild, self).AddSource(Source)
    def DeleteAttribute(self, Attribute):
        '''Method INetworkBuild.DeleteAttribute

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(INetworkBuild, self).DeleteAttribute(Attribute)
    def DeleteSource(self, Source):
        '''Method INetworkBuild.DeleteSource

           INPUT
            Source              : INetworkSource*'''
        return super(INetworkBuild, self).DeleteSource(Source)
    def UpdateSchema(self, DataElement):
        '''Method INetworkBuild.UpdateSchema

           INPUT
            DataElement         : IDENetworkDataset*'''
        return super(INetworkBuild, self).UpdateSchema(DataElement)
    def BuildNetwork(self, areaToBuild):
        '''Method INetworkBuild.BuildNetwork

           INPUT
            areaToBuild         : IEnvelope*

           OUTPUT
            affectedArea        : IEnvelope**'''
        return super(INetworkBuild, self).BuildNetwork(areaToBuild)

class ITrafficDataManager(_esriGeoDatabase.ITrafficDataManager):
    _IID = uuid.UUID('dd1ae245-b211-4502-89d4-b880bb10701d')
    def StartEditing(self, feedUTCStartTime, estimatedKeyCount, timeSliceCount, firstTimeSliceUTCStartTime, TimeSliceDurationInMinutes, speedUnits, updateIntervalInMinutes, feedVersionNumber):
        '''Method ITrafficDataManager.StartEditing

           INPUTS
            feedUTCStartTime    : DATE
            estimatedKeyCount   : long
            timeSliceCount      : long
            firstTimeSliceUTCStartTime: DATE
            TimeSliceDurationInMinutes: long
            speedUnits          : esriNetworkAttributeUnits
            updateIntervalInMinutes: long
            feedVersionNumber   : long'''
        return super(ITrafficDataManager, self).StartEditing(feedUTCStartTime, estimatedKeyCount, timeSliceCount, firstTimeSliceUTCStartTime, TimeSliceDurationInMinutes, speedUnits, updateIntervalInMinutes, feedVersionNumber)
    def Insert(self, key, pTimeSliceSpeeds):
        '''Method ITrafficDataManager.Insert

           INPUTS
            key                 : unsignedlong
            pTimeSliceSpeeds    : IDoubleArray*'''
        return super(ITrafficDataManager, self).Insert(key, pTimeSliceSpeeds)
    def StopEditing(self, feedFolderPath, createCompressedFile):
        '''Method ITrafficDataManager.StopEditing

           INPUTS
            feedFolderPath      : BSTR
            createCompressedFile: VARIANT_BOOL'''
        return super(ITrafficDataManager, self).StopEditing(feedFolderPath, createCompressedFile)
    def DeleteData(self, feedFolderPath, utcCutoffDate):
        '''Method ITrafficDataManager.DeleteData

           INPUTS
            feedFolderPath      : BSTR
            utcCutoffDate       : DATE'''
        return super(ITrafficDataManager, self).DeleteData(feedFolderPath, utcCutoffDate)
    def ConvertTMCToKey(self, tmcCode):
        '''Method ITrafficDataManager.ConvertTMCToKey

           INPUT
            tmcCode             : BSTR

           OUTPUT
            pKey                : unsignedlong*'''
        return super(ITrafficDataManager, self).ConvertTMCToKey(tmcCode)

class IRepresentationRules(_esriGeoDatabase.IRepresentationRules):
    _IID = uuid.UUID('84e3b47a-b26d-41f3-8d1b-f4d9e300d454')

    def __init__(self, *args, **kw):
        super(IRepresentationRules, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self, ID):
        '''Method IRepresentationRules.get_Name

           INPUT
            ID                  : long

           OUTPUT
            Name                : BSTR*'''
        return super(IRepresentationRules, self).get_Name(ID)
    def put_Name(self, ID, Name):
        '''Method IRepresentationRules.put_Name

           INPUTS
            ID                  : long
            Name                : BSTR'''
        return super(IRepresentationRules, self).put_Name(ID, Name)
    def get_Index(self, ID):
        '''Method IRepresentationRules.get_Index

           INPUT
            ID                  : long

           OUTPUT
            Index               : long*'''
        return super(IRepresentationRules, self).get_Index(ID)
    def put_Index(self, ID, Index):
        '''Method IRepresentationRules.put_Index

           INPUTS
            ID                  : long
            Index               : long'''
        return super(IRepresentationRules, self).put_Index(ID, Index)
    def Reset(self):
        '''Method IRepresentationRules.Reset'''
        return super(IRepresentationRules, self).Reset()
    def Next(self):
        '''Method IRepresentationRules.Next

           OUTPUTS
            ID                  : long*
            repRule             : IRepresentationRule**'''
        return super(IRepresentationRules, self).Next()
    def __iter__(self):
        try:
            super(IRepresentationRules, self).Reset()
            val = super(IRepresentationRules, self).Next()
            while any(val):
                yield val
                val = super(IRepresentationRules, self).Next()
        except:
            pass
    def get_Rule(self, ID):
        '''Method IRepresentationRules.get_Rule

           INPUT
            ID                  : long

           OUTPUT
            repRule             : IRepresentationRule**'''
        return super(IRepresentationRules, self).get_Rule(ID)
    def put_Rule(self, ID, repRule):
        '''Method IRepresentationRules.put_Rule

           INPUTS
            ID                  : long
            repRule             : IRepresentationRule*'''
        return super(IRepresentationRules, self).put_Rule(ID, repRule)
    def Add(self, repRule):
        '''Method IRepresentationRules.Add

           INPUT
            repRule             : IRepresentationRule*

           OUTPUT
            ID                  : long*'''
        return super(IRepresentationRules, self).Add(repRule)
    def Remove(self, ID):
        '''Method IRepresentationRules.Remove

           INPUT
            ID                  : long'''
        return super(IRepresentationRules, self).Remove(ID)
    def RemoveAll(self):
        '''Method IRepresentationRules.RemoveAll'''
        return super(IRepresentationRules, self).RemoveAll()
    def Exists(self, ID):
        '''Method IRepresentationRules.Exists

           INPUT
            ID                  : long

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IRepresentationRules, self).Exists(ID)
    Index = property(None, put_Index, None)
    Name = property(None, put_Name, None)
    Rule = property(None, put_Rule, None)
    Index = IndexProperty(get_Index, None)
    Name = IndexProperty(get_Name, None)
    Rule = IndexProperty(get_Rule, None)

class IRepresentationClassName(_esriGeoDatabase.IRepresentationClassName):
    _IID = uuid.UUID('ddec16ba-1c6f-46b4-9410-f09e9984b766')

    def __init__(self, *args, **kw):
        super(IRepresentationClassName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_RuleIDFieldName(self, Name):
        '''Method IRepresentationClassName.put_RuleIDFieldName

           INPUT
            Name                : BSTR'''
        return super(IRepresentationClassName, self).put_RuleIDFieldName(Name)
    def get_RuleIDFieldName(self):
        '''Method IRepresentationClassName.get_RuleIDFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IRepresentationClassName, self).get_RuleIDFieldName()
    def put_OverrideFieldName(self, Name):
        '''Method IRepresentationClassName.put_OverrideFieldName

           INPUT
            Name                : BSTR'''
        return super(IRepresentationClassName, self).put_OverrideFieldName(Name)
    def get_OverrideFieldName(self):
        '''Method IRepresentationClassName.get_OverrideFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IRepresentationClassName, self).get_OverrideFieldName()
    OverrideFieldName = property(get_OverrideFieldName, put_OverrideFieldName, None)
    RuleIDFieldName = property(get_RuleIDFieldName, put_RuleIDFieldName, None)

class IOverride(_esriGeoDatabase.IOverride):
    _IID = uuid.UUID('60f814ef-730e-42a2-b043-bf28097a16d6')
    def RemoveOverride(self, attrs, idx):
        '''Method IOverride.RemoveOverride

           INPUTS
            attrs               : IGraphicAttributes*
            idx                 : long'''
        return super(IOverride, self).RemoveOverride(attrs, idx)
    def IsOverridenWithField(self, attrs, idx):
        '''Method IOverride.IsOverridenWithField

           INPUTS
            attrs               : IGraphicAttributes*
            idx                 : long

           OUTPUT
            fldIdx              : long*'''
        return super(IOverride, self).IsOverridenWithField(attrs, idx)
    def RemoveOverrides(self):
        '''Method IOverride.RemoveOverrides'''
        return super(IOverride, self).RemoveOverrides()
    def get_HasAttributeOverride(self):
        '''Method IOverride.get_HasAttributeOverride

           OUTPUT
            HasAttributeOverride: VARIANT_BOOL*'''
        return super(IOverride, self).get_HasAttributeOverride()
    HasAttributeOverride = property(get_HasAttributeOverride, None, None)

class IDERepresentationClass(_esriGeoDatabase.IDERepresentationClass):
    _IID = uuid.UUID('4494c7c5-4f45-4970-a4fd-8e611508b8ac')

    def __init__(self, *args, **kw):
        super(IDERepresentationClass, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureClassName(self):
        '''Method IDERepresentationClass.get_FeatureClassName

           OUTPUT
            Name                : BSTR*'''
        return super(IDERepresentationClass, self).get_FeatureClassName()
    def put_FeatureClassName(self, Name):
        '''Method IDERepresentationClass.put_FeatureClassName

           INPUT
            Name                : BSTR'''
        return super(IDERepresentationClass, self).put_FeatureClassName(Name)
    def get_RuleIDFieldName(self):
        '''Method IDERepresentationClass.get_RuleIDFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IDERepresentationClass, self).get_RuleIDFieldName()
    def put_RuleIDFieldName(self, Name):
        '''Method IDERepresentationClass.put_RuleIDFieldName

           INPUT
            Name                : BSTR'''
        return super(IDERepresentationClass, self).put_RuleIDFieldName(Name)
    def get_OverrideFieldName(self):
        '''Method IDERepresentationClass.get_OverrideFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IDERepresentationClass, self).get_OverrideFieldName()
    def put_OverrideFieldName(self, Name):
        '''Method IDERepresentationClass.put_OverrideFieldName

           INPUT
            Name                : BSTR'''
        return super(IDERepresentationClass, self).put_OverrideFieldName(Name)
    def get_RepresentationRules(self):
        '''Method IDERepresentationClass.get_RepresentationRules

           OUTPUT
            repRules            : IRepresentationRules**'''
        return super(IDERepresentationClass, self).get_RepresentationRules()
    def putref_RepresentationRules(self, repRules):
        '''Method IDERepresentationClass.putref_RepresentationRules

           INPUT
            repRules            : IRepresentationRules*'''
        return super(IDERepresentationClass, self).putref_RepresentationRules(repRules)
    def get_Attributes(self):
        '''Method IDERepresentationClass.get_Attributes

           OUTPUT
            Attributes          : IGraphicAttributes**'''
        return super(IDERepresentationClass, self).get_Attributes()
    def putref_Attributes(self, Attributes):
        '''Method IDERepresentationClass.putref_Attributes

           INPUT
            Attributes          : IGraphicAttributes*'''
        return super(IDERepresentationClass, self).putref_Attributes(Attributes)
    def get_RequireShapeOverride(self):
        '''Method IDERepresentationClass.get_RequireShapeOverride

           OUTPUT
            RequireShapeOverride: VARIANT_BOOL*'''
        return super(IDERepresentationClass, self).get_RequireShapeOverride()
    def put_RequireShapeOverride(self, RequireShapeOverride):
        '''Method IDERepresentationClass.put_RequireShapeOverride

           INPUT
            RequireShapeOverride: VARIANT_BOOL'''
        return super(IDERepresentationClass, self).put_RequireShapeOverride(RequireShapeOverride)
    Attributes = property(get_Attributes, putref_Attributes, None)
    FeatureClassName = property(get_FeatureClassName, put_FeatureClassName, None)
    OverrideFieldName = property(get_OverrideFieldName, put_OverrideFieldName, None)
    RepresentationRules = property(get_RepresentationRules, putref_RepresentationRules, None)
    RequireShapeOverride = property(get_RequireShapeOverride, put_RequireShapeOverride, None)
    RuleIDFieldName = property(get_RuleIDFieldName, put_RuleIDFieldName, None)

class IPlugInCursorHelper(_esriGeoDatabase.IPlugInCursorHelper):
    _IID = uuid.UUID('b91a4256-1d0a-46dd-b8a1-a237dedd539f')
    def NextRecord(self):
        '''Method IPlugInCursorHelper.NextRecord'''
        return super(IPlugInCursorHelper, self).NextRecord()
    def IsFinished(self):
        '''Method IPlugInCursorHelper.IsFinished

           OUTPUT
            finished            : VARIANT_BOOL*'''
        return super(IPlugInCursorHelper, self).IsFinished()
    def QueryValues(self, Row):
        '''Method IPlugInCursorHelper.QueryValues

           INPUT
            Row                 : IRowBuffer*

           OUTPUT
            OID                 : long*'''
        return super(IPlugInCursorHelper, self).QueryValues(Row)
    def QueryShape(self, pGeometry):
        '''Method IPlugInCursorHelper.QueryShape

           INPUT
            pGeometry           : IGeometry*'''
        return super(IPlugInCursorHelper, self).QueryShape(pGeometry)

class IPlugInDatasetHelper(_esriGeoDatabase.IPlugInDatasetHelper):
    _IID = uuid.UUID('d22b5232-eb1b-44a1-b2ca-b0d085059cfb')
    def get_ClassCount(self):
        '''Method IPlugInDatasetHelper.get_ClassCount

           OUTPUT
            Count               : long*'''
        return super(IPlugInDatasetHelper, self).get_ClassCount()
    def get_ClassName(self, Index):
        '''Method IPlugInDatasetHelper.get_ClassName

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IPlugInDatasetHelper, self).get_ClassName(Index)
    def get_ClassIndex(self, Name):
        '''Method IPlugInDatasetHelper.get_ClassIndex

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IPlugInDatasetHelper, self).get_ClassIndex(Name)
    def get_Bounds(self):
        '''Method IPlugInDatasetHelper.get_Bounds

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IPlugInDatasetHelper, self).get_Bounds()
    def get_Fields(self, ClassIndex):
        '''Method IPlugInDatasetHelper.get_Fields

           INPUT
            ClassIndex          : long

           OUTPUT
            FieldSet            : IFields**'''
        return super(IPlugInDatasetHelper, self).get_Fields(ClassIndex)
    def get_OIDFieldIndex(self, ClassIndex):
        '''Method IPlugInDatasetHelper.get_OIDFieldIndex

           INPUT
            ClassIndex          : long

           OUTPUT
            OIDFieldIndex       : long*'''
        return super(IPlugInDatasetHelper, self).get_OIDFieldIndex(ClassIndex)
    def get_ShapeFieldIndex(self, ClassIndex):
        '''Method IPlugInDatasetHelper.get_ShapeFieldIndex

           INPUT
            ClassIndex          : long

           OUTPUT
            ShapeFieldIndex     : long*'''
        return super(IPlugInDatasetHelper, self).get_ShapeFieldIndex(ClassIndex)
    def FetchByID(self, ClassIndex, ID, FieldMap):
        '''Method IPlugInDatasetHelper.FetchByID

           INPUTS
            ClassIndex          : long
            ID                  : long
            FieldMap            : VARIANT

           OUTPUT
            cursorHelper        : IPlugInCursorHelper**'''
        return super(IPlugInDatasetHelper, self).FetchByID(ClassIndex, ID, FieldMap)
    def FetchAll(self, ClassIndex, WhereClause, FieldMap):
        '''Method IPlugInDatasetHelper.FetchAll

           INPUTS
            ClassIndex          : long
            WhereClause         : BSTR
            FieldMap            : VARIANT

           OUTPUT
            cursorHelper        : IPlugInCursorHelper**'''
        return super(IPlugInDatasetHelper, self).FetchAll(ClassIndex, WhereClause, FieldMap)
    def FetchByEnvelope(self, ClassIndex, env, strictSearch, WhereClause, FieldMap):
        '''Method IPlugInDatasetHelper.FetchByEnvelope

           INPUTS
            ClassIndex          : long
            env                 : IEnvelope*
            strictSearch        : VARIANT_BOOL
            WhereClause         : BSTR
            FieldMap            : VARIANT

           OUTPUT
            cursorHelper        : IPlugInCursorHelper**'''
        return super(IPlugInDatasetHelper, self).FetchByEnvelope(ClassIndex, env, strictSearch, WhereClause, FieldMap)
    Bounds = property(get_Bounds, None, None)
    ClassCount = property(get_ClassCount, None, None)
    ClassIndex = IndexProperty(get_ClassIndex, None)
    ClassName = IndexProperty(get_ClassName, None)
    Fields = IndexProperty(get_Fields, None)
    OIDFieldIndex = IndexProperty(get_OIDFieldIndex, None)
    ShapeFieldIndex = IndexProperty(get_ShapeFieldIndex, None)

class IPlugInWorkspaceHelper(_esriGeoDatabase.IPlugInWorkspaceHelper):
    _IID = uuid.UUID('897bda47-2bf9-420f-886f-e0f49e2d570f')
    def get_RowCountIsCalculated(self):
        '''Method IPlugInWorkspaceHelper.get_RowCountIsCalculated

           OUTPUT
            rowCountCalculated  : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceHelper, self).get_RowCountIsCalculated()
    def get_OIDIsRecordNumber(self):
        '''Method IPlugInWorkspaceHelper.get_OIDIsRecordNumber

           OUTPUT
            OIDIsRecordNumber   : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceHelper, self).get_OIDIsRecordNumber()
    def get_NativeType(self, DatasetType, localName):
        '''Method IPlugInWorkspaceHelper.get_NativeType

           INPUTS
            DatasetType         : esriDatasetType
            localName           : BSTR

           OUTPUT
            NativeType          : INativeType**'''
        return super(IPlugInWorkspaceHelper, self).get_NativeType(DatasetType, localName)
    def get_DatasetNames(self, DatasetType):
        '''Method IPlugInWorkspaceHelper.get_DatasetNames

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            DatasetNames        : IArray**'''
        return super(IPlugInWorkspaceHelper, self).get_DatasetNames(DatasetType)
    def OpenDataset(self, localName):
        '''Method IPlugInWorkspaceHelper.OpenDataset

           INPUT
            localName           : BSTR

           OUTPUT
            datasetHelper       : IPlugInDatasetHelper**'''
        return super(IPlugInWorkspaceHelper, self).OpenDataset(localName)
    OIDIsRecordNumber = property(get_OIDIsRecordNumber, None, None)
    RowCountIsCalculated = property(get_RowCountIsCalculated, None, None)
    DatasetNames = IndexProperty(get_DatasetNames, None)

class IPlugInDatasetInfo(_esriGeoDatabase.IPlugInDatasetInfo):
    _IID = uuid.UUID('ee190b37-11b4-414a-bd25-43c49caa6433')
    def get_LocalDatasetName(self):
        '''Method IPlugInDatasetInfo.get_LocalDatasetName

           OUTPUT
            localName           : BSTR*'''
        return super(IPlugInDatasetInfo, self).get_LocalDatasetName()
    def get_DatasetType(self):
        '''Method IPlugInDatasetInfo.get_DatasetType

           OUTPUT
            DatasetType         : esriDatasetType*'''
        return super(IPlugInDatasetInfo, self).get_DatasetType()
    def get_GeometryType(self):
        '''Method IPlugInDatasetInfo.get_GeometryType

           OUTPUT
            GeometryType        : esriGeometryType*'''
        return super(IPlugInDatasetInfo, self).get_GeometryType()
    def get_ShapeFieldName(self):
        '''Method IPlugInDatasetInfo.get_ShapeFieldName

           OUTPUT
            ShapeFieldName      : BSTR*'''
        return super(IPlugInDatasetInfo, self).get_ShapeFieldName()
    DatasetType = property(get_DatasetType, None, None)
    GeometryType = property(get_GeometryType, None, None)
    LocalDatasetName = property(get_LocalDatasetName, None, None)
    ShapeFieldName = property(get_ShapeFieldName, None, None)

class IPlugInLicense(_esriGeoDatabase.IPlugInLicense):
    _IID = uuid.UUID('a08cf453-1acc-440d-9dae-5a110a0a94d2')
    def CheckExtensionLicense(self):
        '''Method IPlugInLicense.CheckExtensionLicense'''
        return super(IPlugInLicense, self).CheckExtensionLicense()
    def AddLicenseRef(self):
        '''Method IPlugInLicense.AddLicenseRef'''
        return super(IPlugInLicense, self).AddLicenseRef()
    def ReleaseLicenseRef(self):
        '''Method IPlugInLicense.ReleaseLicenseRef'''
        return super(IPlugInLicense, self).ReleaseLicenseRef()

class IPlugInWorkspaceFactoryHelper(_esriGeoDatabase.IPlugInWorkspaceFactoryHelper):
    _IID = uuid.UUID('a5e6e3fc-3a5c-42e4-b058-273f3bc57734')
    def get_DataSourceName(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_DataSourceName

           OUTPUT
            Name                : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper, self).get_DataSourceName()
    def get_DatasetDescription(self, DatasetType):
        '''Method IPlugInWorkspaceFactoryHelper.get_DatasetDescription

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            dsDesc              : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper, self).get_DatasetDescription(DatasetType)
    def get_WorkspaceDescription(self, plural):
        '''Method IPlugInWorkspaceFactoryHelper.get_WorkspaceDescription

           INPUT
            plural              : VARIANT_BOOL

           OUTPUT
            wksDesc             : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper, self).get_WorkspaceDescription(plural)
    def get_WorkspaceFactoryTypeID(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_WorkspaceFactoryTypeID

           OUTPUT
            wksFactID           : IUID**'''
        return super(IPlugInWorkspaceFactoryHelper, self).get_WorkspaceFactoryTypeID()
    def get_WorkspaceType(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_WorkspaceType

           OUTPUT
            wksType             : esriWorkspaceType*'''
        return super(IPlugInWorkspaceFactoryHelper, self).get_WorkspaceType()
    def get_CanSupportSQL(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_CanSupportSQL

           OUTPUT
            CanSupportSQL       : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceFactoryHelper, self).get_CanSupportSQL()
    def IsWorkspace(self, wksString):
        '''Method IPlugInWorkspaceFactoryHelper.IsWorkspace

           INPUT
            wksString           : BSTR

           OUTPUT
            isWks               : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceFactoryHelper, self).IsWorkspace(wksString)
    def ContainsWorkspace(self, parentDirectory, fileNames):
        '''Method IPlugInWorkspaceFactoryHelper.ContainsWorkspace

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            ContainsWorkspace   : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceFactoryHelper, self).ContainsWorkspace(parentDirectory, fileNames)
    def GetWorkspaceString(self, parentDirectory, fileNames):
        '''Method IPlugInWorkspaceFactoryHelper.GetWorkspaceString

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            wksString           : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper, self).GetWorkspaceString(parentDirectory, fileNames)
    def OpenWorkspace(self, wksString):
        '''Method IPlugInWorkspaceFactoryHelper.OpenWorkspace

           INPUT
            wksString           : BSTR

           OUTPUT
            wksHelper           : IPlugInWorkspaceHelper**'''
        return super(IPlugInWorkspaceFactoryHelper, self).OpenWorkspace(wksString)
    CanSupportSQL = property(get_CanSupportSQL, None, None)
    DataSourceName = property(get_DataSourceName, None, None)
    WorkspaceFactoryTypeID = property(get_WorkspaceFactoryTypeID, None, None)
    WorkspaceType = property(get_WorkspaceType, None, None)
    DatasetDescription = IndexProperty(get_DatasetDescription, None)
    WorkspaceDescription = IndexProperty(get_WorkspaceDescription, None)

class IPlugInWorkspaceFactoryHelper2(_esriGeoDatabase.IPlugInWorkspaceFactoryHelper2):
    _IID = uuid.UUID('a6ba6eda-95a0-49b9-9edf-a83099448798')
    def OpenWorkspaceEx(self, wksString, pConnectionProps):
        '''Method IPlugInWorkspaceFactoryHelper2.OpenWorkspaceEx

           INPUTS
            wksString           : BSTR
            pConnectionProps    : IPropertySet*

           OUTPUT
            wksHelper           : IPlugInWorkspaceHelper**'''
        return super(IPlugInWorkspaceFactoryHelper2, self).OpenWorkspaceEx(wksString, pConnectionProps)
    def get_DataSourceName(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_DataSourceName (from IPlugInWorkspaceFactoryHelper)

           OUTPUT
            Name                : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).get_DataSourceName()
    def get_DatasetDescription(self, DatasetType):
        '''Method IPlugInWorkspaceFactoryHelper.get_DatasetDescription (from IPlugInWorkspaceFactoryHelper)

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            dsDesc              : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).get_DatasetDescription(DatasetType)
    def get_WorkspaceDescription(self, plural):
        '''Method IPlugInWorkspaceFactoryHelper.get_WorkspaceDescription (from IPlugInWorkspaceFactoryHelper)

           INPUT
            plural              : VARIANT_BOOL

           OUTPUT
            wksDesc             : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).get_WorkspaceDescription(plural)
    def get_WorkspaceFactoryTypeID(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_WorkspaceFactoryTypeID (from IPlugInWorkspaceFactoryHelper)

           OUTPUT
            wksFactID           : IUID**'''
        return super(IPlugInWorkspaceFactoryHelper2, self).get_WorkspaceFactoryTypeID()
    def get_WorkspaceType(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_WorkspaceType (from IPlugInWorkspaceFactoryHelper)

           OUTPUT
            wksType             : esriWorkspaceType*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).get_WorkspaceType()
    def get_CanSupportSQL(self):
        '''Method IPlugInWorkspaceFactoryHelper.get_CanSupportSQL (from IPlugInWorkspaceFactoryHelper)

           OUTPUT
            CanSupportSQL       : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).get_CanSupportSQL()
    def IsWorkspace(self, wksString):
        '''Method IPlugInWorkspaceFactoryHelper.IsWorkspace (from IPlugInWorkspaceFactoryHelper)

           INPUT
            wksString           : BSTR

           OUTPUT
            isWks               : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).IsWorkspace(wksString)
    def ContainsWorkspace(self, parentDirectory, fileNames):
        '''Method IPlugInWorkspaceFactoryHelper.ContainsWorkspace (from IPlugInWorkspaceFactoryHelper)

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            ContainsWorkspace   : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).ContainsWorkspace(parentDirectory, fileNames)
    def GetWorkspaceString(self, parentDirectory, fileNames):
        '''Method IPlugInWorkspaceFactoryHelper.GetWorkspaceString (from IPlugInWorkspaceFactoryHelper)

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            wksString           : BSTR*'''
        return super(IPlugInWorkspaceFactoryHelper2, self).GetWorkspaceString(parentDirectory, fileNames)
    def OpenWorkspace(self, wksString):
        '''Method IPlugInWorkspaceFactoryHelper.OpenWorkspace (from IPlugInWorkspaceFactoryHelper)

           INPUT
            wksString           : BSTR

           OUTPUT
            wksHelper           : IPlugInWorkspaceHelper**'''
        return super(IPlugInWorkspaceFactoryHelper2, self).OpenWorkspace(wksString)
    CanSupportSQL = property(get_CanSupportSQL, None, None)
    DataSourceName = property(get_DataSourceName, None, None)
    WorkspaceFactoryTypeID = property(get_WorkspaceFactoryTypeID, None, None)
    WorkspaceType = property(get_WorkspaceType, None, None)
    DatasetDescription = IndexProperty(get_DatasetDescription, None)
    WorkspaceDescription = IndexProperty(get_WorkspaceDescription, None)

class IPlugInCreateWorkspace(_esriGeoDatabase.IPlugInCreateWorkspace):
    _IID = uuid.UUID('697ffbd6-7d45-48c2-9810-7131183edcaf')
    def MakeWorkspaceString(self, parentDirectory, file, ConnectionProperties):
        '''Method IPlugInCreateWorkspace.MakeWorkspaceString

           INPUTS
            parentDirectory     : BSTR
            file                : BSTR
            ConnectionProperties: IPropertySet*

           OUTPUT
            workspaceString     : BSTR*'''
        return super(IPlugInCreateWorkspace, self).MakeWorkspaceString(parentDirectory, file, ConnectionProperties)
    def CreateWorkspace(self, workspaceString):
        '''Method IPlugInCreateWorkspace.CreateWorkspace

           INPUT
            workspaceString     : BSTR'''
        return super(IPlugInCreateWorkspace, self).CreateWorkspace(workspaceString)

class IPlugInWorkspaceHelper2(_esriGeoDatabase.IPlugInWorkspaceHelper2):
    _IID = uuid.UUID('d4ce2db3-e5d8-4aba-b11e-39d47646339d')
    def get_CanAddIndex(self):
        '''Method IPlugInWorkspaceHelper2.get_CanAddIndex

           OUTPUT
            CanAddIndex         : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceHelper2, self).get_CanAddIndex()
    def get_CanDeleteIndex(self):
        '''Method IPlugInWorkspaceHelper2.get_CanDeleteIndex

           OUTPUT
            CanDeleteIndex      : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceHelper2, self).get_CanDeleteIndex()
    def get_IsReadOnly(self):
        '''Method IPlugInWorkspaceHelper2.get_IsReadOnly

           OUTPUT
            IsReadOnly          : VARIANT_BOOL*'''
        return super(IPlugInWorkspaceHelper2, self).get_IsReadOnly()
    CanAddIndex = property(get_CanAddIndex, None, None)
    CanDeleteIndex = property(get_CanDeleteIndex, None, None)
    IsReadOnly = property(get_IsReadOnly, None, None)

class IPlugInMetadataPath(_esriGeoDatabase.IPlugInMetadataPath):
    _IID = uuid.UUID('62e8c42d-1b76-497e-8865-d53e2b65c98c')
    def get_MetadataPath(self, localName):
        '''Method IPlugInMetadataPath.get_MetadataPath

           INPUT
            localName           : BSTR

           OUTPUT
            MetadataPath        : BSTR*'''
        return super(IPlugInMetadataPath, self).get_MetadataPath(localName)
    MetadataPath = IndexProperty(get_MetadataPath, None)

class IPlugInMetadataPath2(_esriGeoDatabase.IPlugInMetadataPath2):
    _IID = uuid.UUID('e67be0ca-2683-4508-bc43-4fe4d381a7dd')
    def get_MetadataPathByType(self, Type, localName):
        '''Method IPlugInMetadataPath2.get_MetadataPathByType

           INPUTS
            Type                : esriDatasetType
            localName           : BSTR

           OUTPUT
            MetadataPath        : BSTR*'''
        return super(IPlugInMetadataPath2, self).get_MetadataPathByType(Type, localName)
    def get_MetadataPath(self, localName):
        '''Method IPlugInMetadataPath.get_MetadataPath (from IPlugInMetadataPath)

           INPUT
            localName           : BSTR

           OUTPUT
            MetadataPath        : BSTR*'''
        return super(IPlugInMetadataPath2, self).get_MetadataPath(localName)
    MetadataPath = IndexProperty(get_MetadataPath, None)

class IPlugInMetadata(_esriGeoDatabase.IPlugInMetadata):
    _IID = uuid.UUID('a21946ce-11a9-4241-84f5-7b10c1d6d8b9')

    def __init__(self, *args, **kw):
        super(IPlugInMetadata, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CanEditMetadata(self):
        '''Method IPlugInMetadata.get_CanEditMetadata

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IPlugInMetadata, self).get_CanEditMetadata()
    def get_Metadata(self, localName):
        '''Method IPlugInMetadata.get_Metadata

           INPUT
            localName           : BSTR

           OUTPUT
            Metadata            : IPropertySet**'''
        return super(IPlugInMetadata, self).get_Metadata(localName)
    def put_Metadata(self, localName, Metadata):
        '''Method IPlugInMetadata.put_Metadata

           INPUTS
            localName           : BSTR
            Metadata            : IPropertySet*'''
        return super(IPlugInMetadata, self).put_Metadata(localName, Metadata)
    CanEditMetadata = property(get_CanEditMetadata, None, None)
    Metadata = property(None, put_Metadata, None)
    Metadata = IndexProperty(get_Metadata, None)

class IPlugInMetadata2(_esriGeoDatabase.IPlugInMetadata2):
    _IID = uuid.UUID('c8e04d84-6557-40c5-a30a-b564c4d00560')

    def __init__(self, *args, **kw):
        super(IPlugInMetadata2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MetadataByType(self, Type, localName):
        '''Method IPlugInMetadata2.get_MetadataByType

           INPUTS
            Type                : esriDatasetType
            localName           : BSTR

           OUTPUT
            Metadata            : IPropertySet**'''
        return super(IPlugInMetadata2, self).get_MetadataByType(Type, localName)
    def put_MetadataByType(self, Type, localName, Metadata):
        '''Method IPlugInMetadata2.put_MetadataByType

           INPUTS
            Type                : esriDatasetType
            localName           : BSTR
            Metadata            : IPropertySet*'''
        return super(IPlugInMetadata2, self).put_MetadataByType(Type, localName, Metadata)
    def get_CanEditMetadata(self):
        '''Method IPlugInMetadata.get_CanEditMetadata (from IPlugInMetadata)

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IPlugInMetadata2, self).get_CanEditMetadata()
    def get_Metadata(self, localName):
        '''Method IPlugInMetadata.get_Metadata (from IPlugInMetadata)

           INPUT
            localName           : BSTR

           OUTPUT
            Metadata            : IPropertySet**'''
        return super(IPlugInMetadata2, self).get_Metadata(localName)
    def put_Metadata(self, localName, Metadata):
        '''Method IPlugInMetadata.put_Metadata (from IPlugInMetadata)

           INPUTS
            localName           : BSTR
            Metadata            : IPropertySet*'''
        return super(IPlugInMetadata2, self).put_Metadata(localName, Metadata)
    CanEditMetadata = property(get_CanEditMetadata, None, None)
    Metadata = property(None, put_Metadata, None)
    MetadataByType = property(None, put_MetadataByType, None)
    Metadata = IndexProperty(get_Metadata, None)

class IPlugInFastRowCount(_esriGeoDatabase.IPlugInFastRowCount):
    _IID = uuid.UUID('c3dd33fe-6447-4472-8898-693ab4acfcfc')
    def get_RowCount(self):
        '''Method IPlugInFastRowCount.get_RowCount

           OUTPUT
            numRows             : long*'''
        return super(IPlugInFastRowCount, self).get_RowCount()
    RowCount = property(get_RowCount, None, None)

class IPlugInRowCount(_esriGeoDatabase.IPlugInRowCount):
    _IID = uuid.UUID('a860dd65-a3b4-4cfe-be56-47e8afdb7cbd')
    def get_RowCount(self, Index):
        '''Method IPlugInRowCount.get_RowCount

           INPUT
            Index               : long

           OUTPUT
            numRows             : long*'''
        return super(IPlugInRowCount, self).get_RowCount(Index)
    RowCount = IndexProperty(get_RowCount, None)

class IPlugInFileSystemDataset(_esriGeoDatabase.IPlugInFileSystemDataset):
    _IID = uuid.UUID('a553189f-79f4-4647-9d5c-898d69dc59ae')
    def get_FullPath(self):
        '''Method IPlugInFileSystemDataset.get_FullPath

           OUTPUT
            Path                : BSTR*'''
        return super(IPlugInFileSystemDataset, self).get_FullPath()
    def get_Size(self):
        '''Method IPlugInFileSystemDataset.get_Size

           OUTPUT
            Size                : long*'''
        return super(IPlugInFileSystemDataset, self).get_Size()
    FullPath = property(get_FullPath, None, None)
    Size = property(get_Size, None, None)

class IPlugInIndexInfo(_esriGeoDatabase.IPlugInIndexInfo):
    _IID = uuid.UUID('32f25f5b-a97c-489f-90d9-e93dc84494c0')
    def get_Indexes(self, ClassIndex):
        '''Method IPlugInIndexInfo.get_Indexes

           INPUT
            ClassIndex          : long

           OUTPUT
            Indexes             : IIndexes**'''
        return super(IPlugInIndexInfo, self).get_Indexes(ClassIndex)
    Indexes = IndexProperty(get_Indexes, None)

class IPlugInIndexManager(_esriGeoDatabase.IPlugInIndexManager):
    _IID = uuid.UUID('9bd2fee7-beec-4b70-9f18-ad16b6e7d2d5')
    def AddIndex(self, ClassIndex, Index):
        '''Method IPlugInIndexManager.AddIndex

           INPUTS
            ClassIndex          : long
            Index               : IIndex*'''
        return super(IPlugInIndexManager, self).AddIndex(ClassIndex, Index)
    def DeleteIndex(self, ClassIndex, Index):
        '''Method IPlugInIndexManager.DeleteIndex

           INPUTS
            ClassIndex          : long
            Index               : IIndex*'''
        return super(IPlugInIndexManager, self).DeleteIndex(ClassIndex, Index)

class IPlugInDatasetHelper2(_esriGeoDatabase.IPlugInDatasetHelper2):
    _IID = uuid.UUID('09362a67-f8f6-4dae-8df0-a32a6f0f38a6')
    def FetchWithFilter(self, ClassIndex, env, strictSearch, WhereClause, FIDSet, FieldMap):
        '''Method IPlugInDatasetHelper2.FetchWithFilter

           INPUTS
            ClassIndex          : long
            env                 : IEnvelope*
            strictSearch        : VARIANT_BOOL
            WhereClause         : BSTR
            FIDSet              : IFIDSet*
            FieldMap            : VARIANT

           OUTPUT
            cursorHelper        : IPlugInCursorHelper**'''
        return super(IPlugInDatasetHelper2, self).FetchWithFilter(ClassIndex, env, strictSearch, WhereClause, FIDSet, FieldMap)
    def get_ClassCount(self):
        '''Method IPlugInDatasetHelper.get_ClassCount (from IPlugInDatasetHelper)

           OUTPUT
            Count               : long*'''
        return super(IPlugInDatasetHelper2, self).get_ClassCount()
    def get_ClassName(self, Index):
        '''Method IPlugInDatasetHelper.get_ClassName (from IPlugInDatasetHelper)

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IPlugInDatasetHelper2, self).get_ClassName(Index)
    def get_ClassIndex(self, Name):
        '''Method IPlugInDatasetHelper.get_ClassIndex (from IPlugInDatasetHelper)

           INPUT
            Name                : BSTR

           OUTPUT
            Index               : long*'''
        return super(IPlugInDatasetHelper2, self).get_ClassIndex(Name)
    def get_Bounds(self):
        '''Method IPlugInDatasetHelper.get_Bounds (from IPlugInDatasetHelper)

           OUTPUT
            Bounds              : IEnvelope**'''
        return super(IPlugInDatasetHelper2, self).get_Bounds()
    def get_Fields(self, ClassIndex):
        '''Method IPlugInDatasetHelper.get_Fields (from IPlugInDatasetHelper)

           INPUT
            ClassIndex          : long

           OUTPUT
            FieldSet            : IFields**'''
        return super(IPlugInDatasetHelper2, self).get_Fields(ClassIndex)
    def get_OIDFieldIndex(self, ClassIndex):
        '''Method IPlugInDatasetHelper.get_OIDFieldIndex (from IPlugInDatasetHelper)

           INPUT
            ClassIndex          : long

           OUTPUT
            OIDFieldIndex       : long*'''
        return super(IPlugInDatasetHelper2, self).get_OIDFieldIndex(ClassIndex)
    def get_ShapeFieldIndex(self, ClassIndex):
        '''Method IPlugInDatasetHelper.get_ShapeFieldIndex (from IPlugInDatasetHelper)

           INPUT
            ClassIndex          : long

           OUTPUT
            ShapeFieldIndex     : long*'''
        return super(IPlugInDatasetHelper2, self).get_ShapeFieldIndex(ClassIndex)
    def FetchByID(self, ClassIndex, ID, FieldMap):
        '''Method IPlugInDatasetHelper.FetchByID (from IPlugInDatasetHelper)

           INPUTS
            ClassIndex          : long
            ID                  : long
            FieldMap            : VARIANT

           OUTPUT
            cursorHelper        : IPlugInCursorHelper**'''
        return super(IPlugInDatasetHelper2, self).FetchByID(ClassIndex, ID, FieldMap)
    def FetchAll(self, ClassIndex, WhereClause, FieldMap):
        '''Method IPlugInDatasetHelper.FetchAll (from IPlugInDatasetHelper)

           INPUTS
            ClassIndex          : long
            WhereClause         : BSTR
            FieldMap            : VARIANT

           OUTPUT
            cursorHelper        : IPlugInCursorHelper**'''
        return super(IPlugInDatasetHelper2, self).FetchAll(ClassIndex, WhereClause, FieldMap)
    def FetchByEnvelope(self, ClassIndex, env, strictSearch, WhereClause, FieldMap):
        '''Method IPlugInDatasetHelper.FetchByEnvelope (from IPlugInDatasetHelper)

           INPUTS
            ClassIndex          : long
            env                 : IEnvelope*
            strictSearch        : VARIANT_BOOL
            WhereClause         : BSTR
            FieldMap            : VARIANT

           OUTPUT
            cursorHelper        : IPlugInCursorHelper**'''
        return super(IPlugInDatasetHelper2, self).FetchByEnvelope(ClassIndex, env, strictSearch, WhereClause, FieldMap)
    Bounds = property(get_Bounds, None, None)
    ClassCount = property(get_ClassCount, None, None)
    ClassIndex = IndexProperty(get_ClassIndex, None)
    ClassName = IndexProperty(get_ClassName, None)
    Fields = IndexProperty(get_Fields, None)
    OIDFieldIndex = IndexProperty(get_OIDFieldIndex, None)
    ShapeFieldIndex = IndexProperty(get_ShapeFieldIndex, None)

class IPlugInFastQueryValues(_esriGeoDatabase.IPlugInFastQueryValues):
    _IID = uuid.UUID('865271a7-61c1-41e8-9f6e-31d825b37b57')
    def FastQueryValues(self, values):
        '''Method IPlugInFastQueryValues.FastQueryValues

           INPUT
            values              : FieldValue*'''
        return super(IPlugInFastQueryValues, self).FastQueryValues(values)

class IPlugInGxIntegration(_esriGeoDatabase.IPlugInGxIntegration):
    _IID = uuid.UUID('575849ad-6b49-4c34-b9e7-f9cb63cef3cb')
    def get_SmallImage(self, dsType, GeometryType):
        '''Method IPlugInGxIntegration.get_SmallImage

           INPUTS
            dsType              : esriDatasetType
            GeometryType        : esriGeometryType

           OUTPUT
            hSmallImage         : long*'''
        return super(IPlugInGxIntegration, self).get_SmallImage(dsType, GeometryType)
    def get_LargeImage(self, dsType, GeometryType):
        '''Method IPlugInGxIntegration.get_LargeImage

           INPUTS
            dsType              : esriDatasetType
            GeometryType        : esriGeometryType

           OUTPUT
            hLargeImage         : long*'''
        return super(IPlugInGxIntegration, self).get_LargeImage(dsType, GeometryType)
    def get_ContextMenu(self, dsType):
        '''Method IPlugInGxIntegration.get_ContextMenu

           INPUT
            dsType              : esriDatasetType

           OUTPUT
            ClassID             : IUID**'''
        return super(IPlugInGxIntegration, self).get_ContextMenu(dsType)
    def get_PropertyPageCategory(self, dsType):
        '''Method IPlugInGxIntegration.get_PropertyPageCategory

           INPUT
            dsType              : esriDatasetType

           OUTPUT
            cateoryID           : IUID**'''
        return super(IPlugInGxIntegration, self).get_PropertyPageCategory(dsType)
    ContextMenu = IndexProperty(get_ContextMenu, None)
    PropertyPageCategory = IndexProperty(get_PropertyPageCategory, None)

class IPlugInCreateDataset(_esriGeoDatabase.IPlugInCreateDataset):
    _IID = uuid.UUID('6e845a7e-4c0b-4cc0-afe2-7a17215e7eef')
    def CreateDataset(self, Name, FieldSet):
        '''Method IPlugInCreateDataset.CreateDataset

           INPUTS
            Name                : BSTR
            FieldSet            : IFields*

           OUTPUT
            datasetHelper       : IPlugInDatasetHelper**'''
        return super(IPlugInCreateDataset, self).CreateDataset(Name, FieldSet)

class IPlugInDatasetLoader(_esriGeoDatabase.IPlugInDatasetLoader):
    _IID = uuid.UUID('389d83ea-a560-4668-bf5a-d7d8f77ad0f3')
    def InsertRow(self, Row):
        '''Method IPlugInDatasetLoader.InsertRow

           INPUT
            Row                 : IRowBuffer*'''
        return super(IPlugInDatasetLoader, self).InsertRow(Row)

class IPlugInDatasetLoad(_esriGeoDatabase.IPlugInDatasetLoad):
    _IID = uuid.UUID('cd9a0a6a-e0c7-4627-aad7-d891a5fbd93a')
    def GetLoader(self, ClassIndex, loader):
        '''Method IPlugInDatasetLoad.GetLoader

           INPUTS
            ClassIndex          : long
            loader              : IPlugInDatasetLoader**'''
        return super(IPlugInDatasetLoad, self).GetLoader(ClassIndex, loader)

class IRelationshipChanges(_esriGeoDatabase.IRelationshipChanges):
    _IID = uuid.UUID('92365b91-2779-11d3-8a72-000000000000')
    def InitResolveProcess(self, isPulling):
        '''Method IRelationshipChanges.InitResolveProcess

           INPUT
            isPulling           : VARIANT_BOOL'''
        return super(IRelationshipChanges, self).InitResolveProcess(isPulling)
    def InitObjectDifferenceAugmentation(self):
        '''Method IRelationshipChanges.InitObjectDifferenceAugmentation'''
        return super(IRelationshipChanges, self).InitObjectDifferenceAugmentation()
    def AugumentObjectDifferences(self):
        '''Method IRelationshipChanges.AugumentObjectDifferences'''
        return super(IRelationshipChanges, self).AugumentObjectDifferences()
    def EndObjectDifferenceAugmentation(self):
        '''Method IRelationshipChanges.EndObjectDifferenceAugmentation'''
        return super(IRelationshipChanges, self).EndObjectDifferenceAugmentation()
    def PropagateChangesToRelatedObjects(self, ObjectClassID, oidCount, oids):
        '''Method IRelationshipChanges.PropagateChangesToRelatedObjects

           INPUTS
            ObjectClassID       : long
            oidCount            : long
            oids                : long*'''
        return super(IRelationshipChanges, self).PropagateChangesToRelatedObjects(ObjectClassID, oidCount, oids)
    def CopyRelationshipChanges(self):
        '''Method IRelationshipChanges.CopyRelationshipChanges'''
        return super(IRelationshipChanges, self).CopyRelationshipChanges()
    def EndResolveProcess(self):
        '''Method IRelationshipChanges.EndResolveProcess'''
        return super(IRelationshipChanges, self).EndResolveProcess()

class IThumbnailInfoImpl(_esriGeoDatabase.IThumbnailInfoImpl):
    _IID = uuid.UUID('1001dcba-aee2-4a00-bc37-9e40220c92d6')

    def __init__(self, *args, **kw):
        super(IThumbnailInfoImpl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Modified(self):
        '''Method IThumbnailInfoImpl.get_Modified

           OUTPUT
            pModified           : VARIANT_BOOL*'''
        return super(IThumbnailInfoImpl, self).get_Modified()
    def put_Modified(self, pModified):
        '''Method IThumbnailInfoImpl.put_Modified

           INPUT
            pModified           : VARIANT_BOOL'''
        return super(IThumbnailInfoImpl, self).put_Modified(pModified)
    Modified = property(get_Modified, put_Modified, None)

class IItemInfoImpl(_esriGeoDatabase.IItemInfoImpl):
    _IID = uuid.UUID('3c0bee38-3036-4909-a1b5-36fd883d6346')
    def LoadFromXmlFile(self, xmlFilePath):
        '''Method IItemInfoImpl.LoadFromXmlFile

           INPUT
            xmlFilePath         : BSTR'''
        return super(IItemInfoImpl, self).LoadFromXmlFile(xmlFilePath)
    def SaveToXmlFile(self, xmlFilePath):
        '''Method IItemInfoImpl.SaveToXmlFile

           INPUT
            xmlFilePath         : BSTR'''
        return super(IItemInfoImpl, self).SaveToXmlFile(xmlFilePath)
    def ReadFromJSON(self, pJObject):
        '''Method IItemInfoImpl.ReadFromJSON

           INPUT
            pJObject            : IJSONObject*'''
        return super(IItemInfoImpl, self).ReadFromJSON(pJObject)
    def SaveToJSON(self):
        '''Method IItemInfoImpl.SaveToJSON

           OUTPUT
            ppJObject           : IJSONObject**'''
        return super(IItemInfoImpl, self).SaveToJSON()
    def LoadThumbnailFromFile(self, thumbnailFilePath):
        '''Method IItemInfoImpl.LoadThumbnailFromFile

           INPUT
            thumbnailFilePath   : BSTR'''
        return super(IItemInfoImpl, self).LoadThumbnailFromFile(thumbnailFilePath)
    def SaveThumbnailToFile(self, thumbnailFilePath):
        '''Method IItemInfoImpl.SaveThumbnailToFile

           INPUT
            thumbnailFilePath   : BSTR'''
        return super(IItemInfoImpl, self).SaveThumbnailToFile(thumbnailFilePath)
    def StringArrayToString(self, pSA):
        '''Method IItemInfoImpl.StringArrayToString

           INPUT
            pSA                 : IStringArray*

           OUTPUT
            pStr                : BSTR*'''
        return super(IItemInfoImpl, self).StringArrayToString(pSA)
    def StringToStringArray(self, str):
        '''Method IItemInfoImpl.StringToStringArray

           INPUT
            str                 : BSTR

           OUTPUT
            ppSA                : IStringArray**'''
        return super(IItemInfoImpl, self).StringToStringArray(str)

class IWorkspace(_esriGeoDatabase.IWorkspace):
    _IID = uuid.UUID('d4803ee1-79f4-11d0-97fc-0080c7f79481')
    def get_ConnectionProperties(self):
        '''Method IWorkspace.get_ConnectionProperties

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IWorkspace, self).get_ConnectionProperties()
    def get_WorkspaceFactory(self):
        '''Method IWorkspace.get_WorkspaceFactory

           OUTPUT
            Factory             : IWorkspaceFactory**'''
        return super(IWorkspace, self).get_WorkspaceFactory()
    def get_Datasets(self, DatasetType):
        '''Method IWorkspace.get_Datasets

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            Datasets            : IEnumDataset**'''
        return super(IWorkspace, self).get_Datasets(DatasetType)
    def get_DatasetNames(self, DatasetType):
        '''Method IWorkspace.get_DatasetNames

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            DatasetNames        : IEnumDatasetName**'''
        return super(IWorkspace, self).get_DatasetNames(DatasetType)
    def get_PathName(self):
        '''Method IWorkspace.get_PathName

           OUTPUT
            PathName            : BSTR*'''
        return super(IWorkspace, self).get_PathName()
    def get_Type(self):
        '''Method IWorkspace.get_Type

           OUTPUT
            Type                : esriWorkspaceType*'''
        return super(IWorkspace, self).get_Type()
    def IsDirectory(self):
        '''Method IWorkspace.IsDirectory

           OUTPUT
            isDir               : VARIANT_BOOL*'''
        return super(IWorkspace, self).IsDirectory()
    def Exists(self):
        '''Method IWorkspace.Exists

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(IWorkspace, self).Exists()
    def ExecuteSQL(self, sqlStmt):
        '''Method IWorkspace.ExecuteSQL

           INPUT
            sqlStmt             : BSTR'''
        return super(IWorkspace, self).ExecuteSQL(sqlStmt)
    ConnectionProperties = property(get_ConnectionProperties, None, None)
    PathName = property(get_PathName, None, None)
    Type = property(get_Type, None, None)
    WorkspaceFactory = property(get_WorkspaceFactory, None, None)
    DatasetNames = IndexProperty(get_DatasetNames, None)
    Datasets = IndexProperty(get_Datasets, None)

class IEnumWorkspace(_esriGeoDatabase.IEnumWorkspace):
    _IID = uuid.UUID('8d39a5ff-bdc8-11d0-87f8-080009ec732a')
    def Next(self, numRequested):
        '''Method IEnumWorkspace.Next

           INPUT
            numRequested        : long

           OUTPUTS
            workspaces          : IWorkspace**
            numFetched          : long*'''
        return super(IEnumWorkspace, self).Next(numRequested)
    def Skip(self, numToSkip):
        '''Method IEnumWorkspace.Skip

           INPUT
            numToSkip           : long'''
        return super(IEnumWorkspace, self).Skip(numToSkip)
    def Reset(self):
        '''Method IEnumWorkspace.Reset'''
        return super(IEnumWorkspace, self).Reset()
    def Clone(self):
        '''Method IEnumWorkspace.Clone

           OUTPUT
            workspaces          : IEnumWorkspace**'''
        return super(IEnumWorkspace, self).Clone()

class IEnumWorkspaceEx(_esriGeoDatabase.IEnumWorkspaceEx):
    _IID = uuid.UUID('10d42686-2f6e-4d6a-a27d-1823ffad34ec')
    def Next(self):
        '''Method IEnumWorkspaceEx.Next

           OUTPUT
            ws                  : IWorkspace**'''
        return super(IEnumWorkspaceEx, self).Next()
    def __iter__(self):
        try:
            super(IEnumWorkspaceEx, self).Reset()
            val = super(IEnumWorkspaceEx, self).Next()
            while val:
                yield val
                val = super(IEnumWorkspaceEx, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumWorkspaceEx.Reset'''
        return super(IEnumWorkspaceEx, self).Reset()

class IEnterpriseWorkspaceFactory(_esriGeoDatabase.IEnterpriseWorkspaceFactory):
    _IID = uuid.UUID('b871b848-7b8f-4aef-bd4d-ec3aefe76ebf')
    def OpenWithNewPassword(self, ConnectionProperties, hWnd, newPassword):
        '''Method IEnterpriseWorkspaceFactory.OpenWithNewPassword

           INPUTS
            ConnectionProperties: IPropertySet*
            hWnd                : OLE_HANDLE
            newPassword         : BSTR

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IEnterpriseWorkspaceFactory, self).OpenWithNewPassword(ConnectionProperties, hWnd, newPassword)
    def OpenWithNewLicense(self, ConnectionProperties, hWnd, newLicensePath):
        '''Method IEnterpriseWorkspaceFactory.OpenWithNewLicense

           INPUTS
            ConnectionProperties: IPropertySet*
            hWnd                : OLE_HANDLE
            newLicensePath      : BSTR

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IEnterpriseWorkspaceFactory, self).OpenWithNewLicense(ConnectionProperties, hWnd, newLicensePath)

class IWorkspaceHelper(_esriGeoDatabase.IWorkspaceHelper):
    _IID = uuid.UUID('da10c1bd-09a3-11d4-9faa-00c04f6bdf0c')
    def get_Workspace(self):
        '''Method IWorkspaceHelper.get_Workspace

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceHelper, self).get_Workspace()
    Workspace = property(get_Workspace, None, None)

class IWorkspaceExtensionControl(_esriGeoDatabase.IWorkspaceExtensionControl):
    _IID = uuid.UUID('da10c1c0-09a3-11d4-9faa-00c04f6bdf0c')
    def Init(self, WorkspaceHelper):
        '''Method IWorkspaceExtensionControl.Init

           INPUT
            WorkspaceHelper     : IWorkspaceHelper*'''
        return super(IWorkspaceExtensionControl, self).Init(WorkspaceHelper)
    def Shutdown(self):
        '''Method IWorkspaceExtensionControl.Shutdown'''
        return super(IWorkspaceExtensionControl, self).Shutdown()

class IWorkspaceExtension2(_esriGeoDatabase.IWorkspaceExtension2):
    _IID = uuid.UUID('727f1038-6df0-4972-b504-4a44cfea2b57')
    def OwnsDatasetType(self, DatasetType):
        '''Method IWorkspaceExtension2.OwnsDatasetType

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            ownsType            : VARIANT_BOOL*'''
        return super(IWorkspaceExtension2, self).OwnsDatasetType(DatasetType)
    def get_Workspace(self):
        '''Method IWorkspaceExtension2.get_Workspace

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceExtension2, self).get_Workspace()
    def get_Name(self):
        '''Method IWorkspaceExtension.get_Name (from IWorkspaceExtension)

           OUTPUT
            Name                : BSTR*'''
        return super(IWorkspaceExtension2, self).get_Name()
    def get_GUID(self):
        '''Method IWorkspaceExtension.get_GUID (from IWorkspaceExtension)

           OUTPUT
            GUID                : IUID**'''
        return super(IWorkspaceExtension2, self).get_GUID()
    def get_PrivateDatasetNames(self, dtype):
        '''Method IWorkspaceExtension.get_PrivateDatasetNames (from IWorkspaceExtension)

           INPUT
            dtype               : esriDatasetType

           OUTPUT
            privateNames        : IEnumBSTR**'''
        return super(IWorkspaceExtension2, self).get_PrivateDatasetNames(dtype)
    def get_DataDictionaryTableNames(self):
        '''Method IWorkspaceExtension.get_DataDictionaryTableNames (from IWorkspaceExtension)

           OUTPUT
            privateNames        : IEnumBSTR**'''
        return super(IWorkspaceExtension2, self).get_DataDictionaryTableNames()
    DataDictionaryTableNames = property(get_DataDictionaryTableNames, None, None)
    GUID = property(get_GUID, None, None)
    Name = property(get_Name, None, None)
    Workspace = property(get_Workspace, None, None)
    PrivateDatasetNames = IndexProperty(get_PrivateDatasetNames, None)

class IWorkspaceStatus(_esriGeoDatabase.IWorkspaceStatus):
    _IID = uuid.UUID('bbe342c6-2618-4540-95b5-d6a82f618dfa')
    def get_Workspace(self):
        '''Method IWorkspaceStatus.get_Workspace

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceStatus, self).get_Workspace()
    def get_ConnectionStatus(self):
        '''Method IWorkspaceStatus.get_ConnectionStatus

           OUTPUT
            cstatus             : esriWorkspaceConnectionStatus*'''
        return super(IWorkspaceStatus, self).get_ConnectionStatus()
    ConnectionStatus = property(get_ConnectionStatus, None, None)
    Workspace = property(get_Workspace, None, None)

class IEnumWorkspaceStatus(_esriGeoDatabase.IEnumWorkspaceStatus):
    _IID = uuid.UUID('c2608adb-10a1-4d0c-aba6-5975f6d9c1df')
    def Next(self):
        '''Method IEnumWorkspaceStatus.Next

           OUTPUT
            wstatus             : IWorkspaceStatus**'''
        return super(IEnumWorkspaceStatus, self).Next()
    def __iter__(self):
        try:
            super(IEnumWorkspaceStatus, self).Reset()
            val = super(IEnumWorkspaceStatus, self).Next()
            while val:
                yield val
                val = super(IEnumWorkspaceStatus, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumWorkspaceStatus.Reset'''
        return super(IEnumWorkspaceStatus, self).Reset()

class IWorkspaceFactoryStatus(_esriGeoDatabase.IWorkspaceFactoryStatus):
    _IID = uuid.UUID('9b90c0b4-6848-4a17-a0a4-708ee05193d6')
    def get_WorkspaceStatus(self):
        '''Method IWorkspaceFactoryStatus.get_WorkspaceStatus

           OUTPUT
            ewstatus            : IEnumWorkspaceStatus**'''
        return super(IWorkspaceFactoryStatus, self).get_WorkspaceStatus()
    def PingWorkspaceStatus(self, Workspace):
        '''Method IWorkspaceFactoryStatus.PingWorkspaceStatus

           INPUT
            Workspace           : IWorkspace*

           OUTPUT
            wstatus             : IWorkspaceStatus**'''
        return super(IWorkspaceFactoryStatus, self).PingWorkspaceStatus(Workspace)
    def OpenAvailableWorkspace(self, wstatus):
        '''Method IWorkspaceFactoryStatus.OpenAvailableWorkspace

           INPUT
            wstatus             : IWorkspaceStatus*

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceFactoryStatus, self).OpenAvailableWorkspace(wstatus)
    WorkspaceStatus = property(get_WorkspaceStatus, None, None)

class IScratchWorkspaceFactory(_esriGeoDatabase.IScratchWorkspaceFactory):
    _IID = uuid.UUID('06dc8e4b-951c-11d2-ae75-080009ec732a')
    def get_DefaultScratchWorkspace(self):
        '''Method IScratchWorkspaceFactory.get_DefaultScratchWorkspace

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IScratchWorkspaceFactory, self).get_DefaultScratchWorkspace()
    def CreateNewScratchWorkspace(self):
        '''Method IScratchWorkspaceFactory.CreateNewScratchWorkspace

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IScratchWorkspaceFactory, self).CreateNewScratchWorkspace()
    DefaultScratchWorkspace = property(get_DefaultScratchWorkspace, None, None)

class IScratchWorkspaceFactory2(_esriGeoDatabase.IScratchWorkspaceFactory2):
    _IID = uuid.UUID('ceb80992-ebc0-482b-9cd9-9974ab40d4c2')
    def get_CurrentScratchWorkspace(self):
        '''Method IScratchWorkspaceFactory2.get_CurrentScratchWorkspace

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IScratchWorkspaceFactory2, self).get_CurrentScratchWorkspace()
    def get_DefaultScratchWorkspace(self):
        '''Method IScratchWorkspaceFactory.get_DefaultScratchWorkspace (from IScratchWorkspaceFactory)

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IScratchWorkspaceFactory2, self).get_DefaultScratchWorkspace()
    def CreateNewScratchWorkspace(self):
        '''Method IScratchWorkspaceFactory.CreateNewScratchWorkspace (from IScratchWorkspaceFactory)

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IScratchWorkspaceFactory2, self).CreateNewScratchWorkspace()
    CurrentScratchWorkspace = property(get_CurrentScratchWorkspace, None, None)
    DefaultScratchWorkspace = property(get_DefaultScratchWorkspace, None, None)

class IWorkspaceFactorySchemaCache(_esriGeoDatabase.IWorkspaceFactorySchemaCache):
    _IID = uuid.UUID('968ab1ea-7c1f-4aa1-9055-ca98cb622278')
    def EnableSchemaCaching(self):
        '''Method IWorkspaceFactorySchemaCache.EnableSchemaCaching'''
        return super(IWorkspaceFactorySchemaCache, self).EnableSchemaCaching()
    def DisableSchemaCaching(self):
        '''Method IWorkspaceFactorySchemaCache.DisableSchemaCaching'''
        return super(IWorkspaceFactorySchemaCache, self).DisableSchemaCaching()
    def EnableSchemaCache(self, Workspace):
        '''Method IWorkspaceFactorySchemaCache.EnableSchemaCache

           INPUT
            Workspace           : IWorkspace*'''
        return super(IWorkspaceFactorySchemaCache, self).EnableSchemaCache(Workspace)
    def EnableAllSchemaCaches(self):
        '''Method IWorkspaceFactorySchemaCache.EnableAllSchemaCaches'''
        return super(IWorkspaceFactorySchemaCache, self).EnableAllSchemaCaches()
    def DisableSchemaCache(self, Workspace):
        '''Method IWorkspaceFactorySchemaCache.DisableSchemaCache

           INPUT
            Workspace           : IWorkspace*'''
        return super(IWorkspaceFactorySchemaCache, self).DisableSchemaCache(Workspace)
    def DisableAllSchemaCaches(self):
        '''Method IWorkspaceFactorySchemaCache.DisableAllSchemaCaches'''
        return super(IWorkspaceFactorySchemaCache, self).DisableAllSchemaCaches()
    def IsSchemaCacheStale(self, Workspace):
        '''Method IWorkspaceFactorySchemaCache.IsSchemaCacheStale

           INPUT
            Workspace           : IWorkspace*

           OUTPUT
            isStale             : VARIANT_BOOL*'''
        return super(IWorkspaceFactorySchemaCache, self).IsSchemaCacheStale(Workspace)
    def IsAnySchemaCacheStale(self):
        '''Method IWorkspaceFactorySchemaCache.IsAnySchemaCacheStale

           OUTPUT
            isStale             : VARIANT_BOOL*'''
        return super(IWorkspaceFactorySchemaCache, self).IsAnySchemaCacheStale()
    def RefreshSchemaCache(self, Workspace):
        '''Method IWorkspaceFactorySchemaCache.RefreshSchemaCache

           INPUT
            Workspace           : IWorkspace*'''
        return super(IWorkspaceFactorySchemaCache, self).RefreshSchemaCache(Workspace)
    def RefreshAllSchemaCaches(self):
        '''Method IWorkspaceFactorySchemaCache.RefreshAllSchemaCaches'''
        return super(IWorkspaceFactorySchemaCache, self).RefreshAllSchemaCaches()

class IFieldChecker(_esriGeoDatabase.IFieldChecker):
    _IID = uuid.UUID('7370629b-3e8f-11d2-aae0-00c04fa33c20')

    def __init__(self, *args, **kw):
        super(IFieldChecker, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Validate(self, inputField):
        '''Method IFieldChecker.Validate

           INPUT
            inputField          : IFields*

           OUTPUTS
            error               : IEnumFieldError**
            fixedFields         : IFields**'''
        return super(IFieldChecker, self).Validate(inputField)
    def ValidateTableName(self, TableName):
        '''Method IFieldChecker.ValidateTableName

           INPUT
            TableName           : BSTR

           OUTPUTS
            fixedName           : BSTR*
            error               : long*'''
        return super(IFieldChecker, self).ValidateTableName(TableName)
    def ValidateField(self, FieldIndex, inputFields):
        '''Method IFieldChecker.ValidateField

           INPUTS
            FieldIndex          : long
            inputFields         : IFields*

           OUTPUTS
            error               : IEnumFieldError**
            fixedFields         : IFields**'''
        return super(IFieldChecker, self).ValidateField(FieldIndex, inputFields)
    def get_ValidateWorkspace(self):
        '''Method IFieldChecker.get_ValidateWorkspace

           OUTPUT
            ValidateWorkspace   : IWorkspace**'''
        return super(IFieldChecker, self).get_ValidateWorkspace()
    def putref_ValidateWorkspace(self, ValidateWorkspace):
        '''Method IFieldChecker.putref_ValidateWorkspace

           INPUT
            ValidateWorkspace   : IWorkspace*'''
        return super(IFieldChecker, self).putref_ValidateWorkspace(ValidateWorkspace)
    def get_InputWorkspace(self):
        '''Method IFieldChecker.get_InputWorkspace

           OUTPUT
            InputWorkspace      : IWorkspace**'''
        return super(IFieldChecker, self).get_InputWorkspace()
    def put_InputWorkspace(self, InputWorkspace):
        '''Method IFieldChecker.put_InputWorkspace

           INPUT
            InputWorkspace      : IWorkspace*'''
        return super(IFieldChecker, self).put_InputWorkspace(InputWorkspace)
    def get_ValidateDictionary(self):
        '''Method IFieldChecker.get_ValidateDictionary

           OUTPUT
            ValidateDictionary  : ISqlKeywordDictionary**'''
        return super(IFieldChecker, self).get_ValidateDictionary()
    def putref_ValidateDictionary(self, ValidateDictionary):
        '''Method IFieldChecker.putref_ValidateDictionary

           INPUT
            ValidateDictionary  : ISqlKeywordDictionary*'''
        return super(IFieldChecker, self).putref_ValidateDictionary(ValidateDictionary)
    InputWorkspace = property(get_InputWorkspace, put_InputWorkspace, None)
    ValidateDictionary = property(get_ValidateDictionary, putref_ValidateDictionary, None)
    ValidateWorkspace = property(get_ValidateWorkspace, putref_ValidateWorkspace, None)

class IPlugInFileOperations(_esriGeoDatabase.IPlugInFileOperations):
    _IID = uuid.UUID('cab44598-68f6-490e-9f32-6d5fd06d22d2')
    def CanCopy(self):
        '''Method IPlugInFileOperations.CanCopy

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IPlugInFileOperations, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IPlugInFileOperations.Copy

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*'''
        return super(IPlugInFileOperations, self).Copy(copyName, copyWorkspace)
    def CanDelete(self):
        '''Method IPlugInFileOperations.CanDelete

           OUTPUT
            CanDelete           : VARIANT_BOOL*'''
        return super(IPlugInFileOperations, self).CanDelete()
    def Delete(self):
        '''Method IPlugInFileOperations.Delete'''
        return super(IPlugInFileOperations, self).Delete()
    def CanRename(self):
        '''Method IPlugInFileOperations.CanRename

           OUTPUT
            CanRename           : VARIANT_BOOL*'''
        return super(IPlugInFileOperations, self).CanRename()
    def Rename(self, Name):
        '''Method IPlugInFileOperations.Rename

           INPUT
            Name                : BSTR

           OUTPUT
            newName             : BSTR*'''
        return super(IPlugInFileOperations, self).Rename(Name)

class IPlugInFileOperationsClass(_esriGeoDatabase.IPlugInFileOperationsClass):
    _IID = uuid.UUID('0936597f-ebe1-4b29-bac4-47dafce72a36')
    def CanCopy(self, ClassIndex):
        '''Method IPlugInFileOperationsClass.CanCopy

           INPUT
            ClassIndex          : long

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IPlugInFileOperationsClass, self).CanCopy(ClassIndex)
    def Copy(self, ClassIndex, copyName, copyWorkspace):
        '''Method IPlugInFileOperationsClass.Copy

           INPUTS
            ClassIndex          : long
            copyName            : BSTR
            copyWorkspace       : IWorkspace*'''
        return super(IPlugInFileOperationsClass, self).Copy(ClassIndex, copyName, copyWorkspace)
    def CanDelete(self, ClassIndex):
        '''Method IPlugInFileOperationsClass.CanDelete

           INPUT
            ClassIndex          : long

           OUTPUT
            CanDelete           : VARIANT_BOOL*'''
        return super(IPlugInFileOperationsClass, self).CanDelete(ClassIndex)
    def Delete(self, ClassIndex):
        '''Method IPlugInFileOperationsClass.Delete

           INPUT
            ClassIndex          : long'''
        return super(IPlugInFileOperationsClass, self).Delete(ClassIndex)
    def CanRename(self, ClassIndex):
        '''Method IPlugInFileOperationsClass.CanRename

           INPUT
            ClassIndex          : long

           OUTPUT
            CanRename           : VARIANT_BOOL*'''
        return super(IPlugInFileOperationsClass, self).CanRename(ClassIndex)
    def Rename(self, ClassIndex, Name):
        '''Method IPlugInFileOperationsClass.Rename

           INPUTS
            ClassIndex          : long
            Name                : BSTR

           OUTPUT
            newName             : BSTR*'''
        return super(IPlugInFileOperationsClass, self).Rename(ClassIndex, Name)

class IWorkspaceFactory(_esriGeoDatabase.IWorkspaceFactory):
    _IID = uuid.UUID('f173fc16-d63a-11d1-aa81-00c04fa33a15')
    def Open(self, ConnectionProperties, hWnd):
        '''Method IWorkspaceFactory.Open

           INPUTS
            ConnectionProperties: IPropertySet*
            hWnd                : OLE_HANDLE

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceFactory, self).Open(ConnectionProperties, hWnd)
    def OpenFromFile(self, fileName, hWnd):
        '''Method IWorkspaceFactory.OpenFromFile

           INPUTS
            fileName            : BSTR
            hWnd                : OLE_HANDLE

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceFactory, self).OpenFromFile(fileName, hWnd)
    def Create(self, parentDirectory, Name, ConnectionProperties, hWnd):
        '''Method IWorkspaceFactory.Create

           INPUTS
            parentDirectory     : BSTR
            Name                : BSTR
            ConnectionProperties: IPropertySet*
            hWnd                : OLE_HANDLE

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IWorkspaceFactory, self).Create(parentDirectory, Name, ConnectionProperties, hWnd)
    def ContainsWorkspace(self, parentDirectory, fileNames):
        '''Method IWorkspaceFactory.ContainsWorkspace

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            ContainsWorkspace   : VARIANT_BOOL*'''
        return super(IWorkspaceFactory, self).ContainsWorkspace(parentDirectory, fileNames)
    def GetWorkspaceName(self, parentDirectory, fileNames):
        '''Method IWorkspaceFactory.GetWorkspaceName

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IWorkspaceFactory, self).GetWorkspaceName(parentDirectory, fileNames)
    def GetClassID(self):
        '''Method IWorkspaceFactory.GetClassID

           OUTPUT
            ClassID             : IUID**'''
        return super(IWorkspaceFactory, self).GetClassID()
    def IsWorkspace(self, fileName):
        '''Method IWorkspaceFactory.IsWorkspace

           INPUT
            fileName            : BSTR

           OUTPUT
            IsWorkspace         : VARIANT_BOOL*'''
        return super(IWorkspaceFactory, self).IsWorkspace(fileName)
    def ReadConnectionPropertiesFromFile(self, fileName):
        '''Method IWorkspaceFactory.ReadConnectionPropertiesFromFile

           INPUT
            fileName            : BSTR

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IWorkspaceFactory, self).ReadConnectionPropertiesFromFile(fileName)
    def get_WorkspaceDescription(self, plural):
        '''Method IWorkspaceFactory.get_WorkspaceDescription

           INPUT
            plural              : VARIANT_BOOL

           OUTPUT
            Description         : BSTR*'''
        return super(IWorkspaceFactory, self).get_WorkspaceDescription(plural)
    def get_WorkspaceType(self):
        '''Method IWorkspaceFactory.get_WorkspaceType

           OUTPUT
            Type                : esriWorkspaceType*'''
        return super(IWorkspaceFactory, self).get_WorkspaceType()
    def Copy(self, WorkspaceName, destinationFolder):
        '''Method IWorkspaceFactory.Copy

           INPUTS
            WorkspaceName       : IWorkspaceName*
            destinationFolder   : BSTR

           OUTPUTS
            workspaceNameCopy   : IWorkspaceName**
            successfulCopy      : VARIANT_BOOL*'''
        return super(IWorkspaceFactory, self).Copy(WorkspaceName, destinationFolder)
    def Move(self, WorkspaceName, destinationFolder):
        '''Method IWorkspaceFactory.Move

           INPUTS
            WorkspaceName       : IWorkspaceName*
            destinationFolder   : BSTR

           OUTPUT
            successfulMove      : VARIANT_BOOL*'''
        return super(IWorkspaceFactory, self).Move(WorkspaceName, destinationFolder)
    WorkspaceType = property(get_WorkspaceType, None, None)
    WorkspaceDescription = IndexProperty(get_WorkspaceDescription, None)

class IWorkspaceName(_esriGeoDatabase.IWorkspaceName):
    _IID = uuid.UUID('fadd975c-e36f-11d1-aa81-00c04fa33a15')

    def __init__(self, *args, **kw):
        super(IWorkspaceName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PathName(self):
        '''Method IWorkspaceName.get_PathName

           OUTPUT
            PathName            : BSTR*'''
        return super(IWorkspaceName, self).get_PathName()
    def put_PathName(self, PathName):
        '''Method IWorkspaceName.put_PathName

           INPUT
            PathName            : BSTR'''
        return super(IWorkspaceName, self).put_PathName(PathName)
    def get_WorkspaceFactoryProgID(self):
        '''Method IWorkspaceName.get_WorkspaceFactoryProgID

           OUTPUT
            progID              : BSTR*'''
        return super(IWorkspaceName, self).get_WorkspaceFactoryProgID()
    def put_WorkspaceFactoryProgID(self, progID):
        '''Method IWorkspaceName.put_WorkspaceFactoryProgID

           INPUT
            progID              : BSTR'''
        return super(IWorkspaceName, self).put_WorkspaceFactoryProgID(progID)
    def get_BrowseName(self):
        '''Method IWorkspaceName.get_BrowseName

           OUTPUT
            BrowseName          : BSTR*'''
        return super(IWorkspaceName, self).get_BrowseName()
    def put_BrowseName(self, BrowseName):
        '''Method IWorkspaceName.put_BrowseName

           INPUT
            BrowseName          : BSTR'''
        return super(IWorkspaceName, self).put_BrowseName(BrowseName)
    def get_WorkspaceFactory(self):
        '''Method IWorkspaceName.get_WorkspaceFactory

           OUTPUT
            Factory             : IWorkspaceFactory**'''
        return super(IWorkspaceName, self).get_WorkspaceFactory()
    def put_ConnectionProperties(self, ConnectionProperties):
        '''Method IWorkspaceName.put_ConnectionProperties

           INPUT
            ConnectionProperties: IPropertySet*'''
        return super(IWorkspaceName, self).put_ConnectionProperties(ConnectionProperties)
    def get_ConnectionProperties(self):
        '''Method IWorkspaceName.get_ConnectionProperties

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IWorkspaceName, self).get_ConnectionProperties()
    def get_Type(self):
        '''Method IWorkspaceName.get_Type

           OUTPUT
            Type                : esriWorkspaceType*'''
        return super(IWorkspaceName, self).get_Type()
    def get_Category(self):
        '''Method IWorkspaceName.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IWorkspaceName, self).get_Category()
    BrowseName = property(get_BrowseName, put_BrowseName, None)
    Category = property(get_Category, None, None)
    ConnectionProperties = property(get_ConnectionProperties, put_ConnectionProperties, None)
    PathName = property(get_PathName, put_PathName, None)
    Type = property(get_Type, None, None)
    WorkspaceFactory = property(get_WorkspaceFactory, None, None)
    WorkspaceFactoryProgID = property(get_WorkspaceFactoryProgID, put_WorkspaceFactoryProgID, None)

class IRemoteDatabaseWorkspaceFactory(_esriGeoDatabase.IRemoteDatabaseWorkspaceFactory):
    _IID = uuid.UUID('ab4a2d7a-055b-11d2-aa97-00c04fa33a15')
    def DeleteConnectionFile(self, PathName):
        '''Method IRemoteDatabaseWorkspaceFactory.DeleteConnectionFile

           INPUT
            PathName            : BSTR'''
        return super(IRemoteDatabaseWorkspaceFactory, self).DeleteConnectionFile(PathName)
    def RenameConnectionFile(self, oldPathName, newName):
        '''Method IRemoteDatabaseWorkspaceFactory.RenameConnectionFile

           INPUTS
            oldPathName         : BSTR
            newName             : BSTR

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IRemoteDatabaseWorkspaceFactory, self).RenameConnectionFile(oldPathName, newName)
    def EditConnectionFile(self, PathName, hWnd):
        '''Method IRemoteDatabaseWorkspaceFactory.EditConnectionFile

           INPUTS
            PathName            : BSTR
            hWnd                : OLE_HANDLE

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IRemoteDatabaseWorkspaceFactory, self).EditConnectionFile(PathName, hWnd)

class IRemoteDatabaseWorkspaceFactory2(_esriGeoDatabase.IRemoteDatabaseWorkspaceFactory2):
    _IID = uuid.UUID('02ddefe3-468d-456d-a862-53296b590988')
    def EditGeodatabaseConnectionProperties(self, PathName, hWnd):
        '''Method IRemoteDatabaseWorkspaceFactory2.EditGeodatabaseConnectionProperties

           INPUTS
            PathName            : BSTR
            hWnd                : OLE_HANDLE

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IRemoteDatabaseWorkspaceFactory2, self).EditGeodatabaseConnectionProperties(PathName, hWnd)

class IWorkspaceName2(_esriGeoDatabase.IWorkspaceName2):
    _IID = uuid.UUID('05fc30e9-3007-11d4-8140-00c04f686238')

    def __init__(self, *args, **kw):
        super(IWorkspaceName2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConnectionString(self):
        '''Method IWorkspaceName2.get_ConnectionString

           OUTPUT
            connectionSting     : BSTR*'''
        return super(IWorkspaceName2, self).get_ConnectionString()
    def put_ConnectionString(self, connectionSting):
        '''Method IWorkspaceName2.put_ConnectionString

           INPUT
            connectionSting     : BSTR'''
        return super(IWorkspaceName2, self).put_ConnectionString(connectionSting)
    def get_PathName(self):
        '''Method IWorkspaceName.get_PathName (from IWorkspaceName)

           OUTPUT
            PathName            : BSTR*'''
        return super(IWorkspaceName2, self).get_PathName()
    def put_PathName(self, PathName):
        '''Method IWorkspaceName.put_PathName (from IWorkspaceName)

           INPUT
            PathName            : BSTR'''
        return super(IWorkspaceName2, self).put_PathName(PathName)
    def get_WorkspaceFactoryProgID(self):
        '''Method IWorkspaceName.get_WorkspaceFactoryProgID (from IWorkspaceName)

           OUTPUT
            progID              : BSTR*'''
        return super(IWorkspaceName2, self).get_WorkspaceFactoryProgID()
    def put_WorkspaceFactoryProgID(self, progID):
        '''Method IWorkspaceName.put_WorkspaceFactoryProgID (from IWorkspaceName)

           INPUT
            progID              : BSTR'''
        return super(IWorkspaceName2, self).put_WorkspaceFactoryProgID(progID)
    def get_BrowseName(self):
        '''Method IWorkspaceName.get_BrowseName (from IWorkspaceName)

           OUTPUT
            BrowseName          : BSTR*'''
        return super(IWorkspaceName2, self).get_BrowseName()
    def put_BrowseName(self, BrowseName):
        '''Method IWorkspaceName.put_BrowseName (from IWorkspaceName)

           INPUT
            BrowseName          : BSTR'''
        return super(IWorkspaceName2, self).put_BrowseName(BrowseName)
    def get_WorkspaceFactory(self):
        '''Method IWorkspaceName.get_WorkspaceFactory (from IWorkspaceName)

           OUTPUT
            Factory             : IWorkspaceFactory**'''
        return super(IWorkspaceName2, self).get_WorkspaceFactory()
    def put_ConnectionProperties(self, ConnectionProperties):
        '''Method IWorkspaceName.put_ConnectionProperties (from IWorkspaceName)

           INPUT
            ConnectionProperties: IPropertySet*'''
        return super(IWorkspaceName2, self).put_ConnectionProperties(ConnectionProperties)
    def get_ConnectionProperties(self):
        '''Method IWorkspaceName.get_ConnectionProperties (from IWorkspaceName)

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IWorkspaceName2, self).get_ConnectionProperties()
    def get_Type(self):
        '''Method IWorkspaceName.get_Type (from IWorkspaceName)

           OUTPUT
            Type                : esriWorkspaceType*'''
        return super(IWorkspaceName2, self).get_Type()
    def get_Category(self):
        '''Method IWorkspaceName.get_Category (from IWorkspaceName)

           OUTPUT
            Category            : BSTR*'''
        return super(IWorkspaceName2, self).get_Category()
    BrowseName = property(get_BrowseName, put_BrowseName, None)
    Category = property(get_Category, None, None)
    ConnectionProperties = property(get_ConnectionProperties, put_ConnectionProperties, None)
    ConnectionString = property(get_ConnectionString, put_ConnectionString, None)
    PathName = property(get_PathName, put_PathName, None)
    Type = property(get_Type, None, None)
    WorkspaceFactory = property(get_WorkspaceFactory, None, None)
    WorkspaceFactoryProgID = property(get_WorkspaceFactoryProgID, put_WorkspaceFactoryProgID, None)

class IWorkspaceFactory2(_esriGeoDatabase.IWorkspaceFactory2):
    _IID = uuid.UUID('d29cd15f-3014-11d4-8141-00c04f686238')
    def OpenFromString(self, connectStr, hWnd):
        '''Method IWorkspaceFactory2.OpenFromString

           INPUTS
            connectStr          : BSTR
            hWnd                : OLE_HANDLE

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceFactory2, self).OpenFromString(connectStr, hWnd)
    def Open(self, ConnectionProperties, hWnd):
        '''Method IWorkspaceFactory.Open (from IWorkspaceFactory)

           INPUTS
            ConnectionProperties: IPropertySet*
            hWnd                : OLE_HANDLE

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceFactory2, self).Open(ConnectionProperties, hWnd)
    def OpenFromFile(self, fileName, hWnd):
        '''Method IWorkspaceFactory.OpenFromFile (from IWorkspaceFactory)

           INPUTS
            fileName            : BSTR
            hWnd                : OLE_HANDLE

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceFactory2, self).OpenFromFile(fileName, hWnd)
    def Create(self, parentDirectory, Name, ConnectionProperties, hWnd):
        '''Method IWorkspaceFactory.Create (from IWorkspaceFactory)

           INPUTS
            parentDirectory     : BSTR
            Name                : BSTR
            ConnectionProperties: IPropertySet*
            hWnd                : OLE_HANDLE

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IWorkspaceFactory2, self).Create(parentDirectory, Name, ConnectionProperties, hWnd)
    def ContainsWorkspace(self, parentDirectory, fileNames):
        '''Method IWorkspaceFactory.ContainsWorkspace (from IWorkspaceFactory)

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            ContainsWorkspace   : VARIANT_BOOL*'''
        return super(IWorkspaceFactory2, self).ContainsWorkspace(parentDirectory, fileNames)
    def GetWorkspaceName(self, parentDirectory, fileNames):
        '''Method IWorkspaceFactory.GetWorkspaceName (from IWorkspaceFactory)

           INPUTS
            parentDirectory     : BSTR
            fileNames           : IFileNames*

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IWorkspaceFactory2, self).GetWorkspaceName(parentDirectory, fileNames)
    def GetClassID(self):
        '''Method IWorkspaceFactory.GetClassID (from IWorkspaceFactory)

           OUTPUT
            ClassID             : IUID**'''
        return super(IWorkspaceFactory2, self).GetClassID()
    def IsWorkspace(self, fileName):
        '''Method IWorkspaceFactory.IsWorkspace (from IWorkspaceFactory)

           INPUT
            fileName            : BSTR

           OUTPUT
            IsWorkspace         : VARIANT_BOOL*'''
        return super(IWorkspaceFactory2, self).IsWorkspace(fileName)
    def ReadConnectionPropertiesFromFile(self, fileName):
        '''Method IWorkspaceFactory.ReadConnectionPropertiesFromFile (from IWorkspaceFactory)

           INPUT
            fileName            : BSTR

           OUTPUT
            ConnectionProperties: IPropertySet**'''
        return super(IWorkspaceFactory2, self).ReadConnectionPropertiesFromFile(fileName)
    def get_WorkspaceDescription(self, plural):
        '''Method IWorkspaceFactory.get_WorkspaceDescription (from IWorkspaceFactory)

           INPUT
            plural              : VARIANT_BOOL

           OUTPUT
            Description         : BSTR*'''
        return super(IWorkspaceFactory2, self).get_WorkspaceDescription(plural)
    def get_WorkspaceType(self):
        '''Method IWorkspaceFactory.get_WorkspaceType (from IWorkspaceFactory)

           OUTPUT
            Type                : esriWorkspaceType*'''
        return super(IWorkspaceFactory2, self).get_WorkspaceType()
    def Copy(self, WorkspaceName, destinationFolder):
        '''Method IWorkspaceFactory.Copy (from IWorkspaceFactory)

           INPUTS
            WorkspaceName       : IWorkspaceName*
            destinationFolder   : BSTR

           OUTPUTS
            workspaceNameCopy   : IWorkspaceName**
            successfulCopy      : VARIANT_BOOL*'''
        return super(IWorkspaceFactory2, self).Copy(WorkspaceName, destinationFolder)
    def Move(self, WorkspaceName, destinationFolder):
        '''Method IWorkspaceFactory.Move (from IWorkspaceFactory)

           INPUTS
            WorkspaceName       : IWorkspaceName*
            destinationFolder   : BSTR

           OUTPUT
            successfulMove      : VARIANT_BOOL*'''
        return super(IWorkspaceFactory2, self).Move(WorkspaceName, destinationFolder)
    WorkspaceType = property(get_WorkspaceType, None, None)
    WorkspaceDescription = IndexProperty(get_WorkspaceDescription, None)

class ILocalDatabaseCompact(_esriGeoDatabase.ILocalDatabaseCompact):
    _IID = uuid.UUID('516c0a6d-8021-11d3-80eb-00c04f686238')
    def Compact(self, Name):
        '''Method ILocalDatabaseCompact.Compact

           INPUT
            Name                : IWorkspaceName*'''
        return super(ILocalDatabaseCompact, self).Compact(Name)

class IReplicaDescription(_esriGeoDatabase.IReplicaDescription):
    _IID = uuid.UUID('3afc1997-7a42-483b-9a6a-ecc00a3ba86a')

    def __init__(self, *args, **kw):
        super(IReplicaDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, enumNames, OutputWSName, ReuseSchema, deType):
        '''Method IReplicaDescription.Init

           INPUTS
            enumNames           : IEnumName*
            OutputWSName        : IWorkspaceName*
            ReuseSchema         : VARIANT_BOOL
            deType              : esriDataExtractionType'''
        return super(IReplicaDescription, self).Init(enumNames, OutputWSName, ReuseSchema, deType)
    def get_DatasetNames(self):
        '''Method IReplicaDescription.get_DatasetNames

           OUTPUT
            enumNames           : IEnumName**'''
        return super(IReplicaDescription, self).get_DatasetNames()
    def get_TableNameCount(self):
        '''Method IReplicaDescription.get_TableNameCount

           OUTPUT
            Count               : long*'''
        return super(IReplicaDescription, self).get_TableNameCount()
    def get_TableName(self, Index):
        '''Method IReplicaDescription.get_TableName

           INPUT
            Index               : long

           OUTPUT
            DatasetName         : IName**'''
        return super(IReplicaDescription, self).get_TableName(Index)
    def put_TableExcluded(self, Index, exclude):
        '''Method IReplicaDescription.put_TableExcluded

           INPUTS
            Index               : long
            exclude             : VARIANT_BOOL'''
        return super(IReplicaDescription, self).put_TableExcluded(Index, exclude)
    def get_TableExcluded(self, Index):
        '''Method IReplicaDescription.get_TableExcluded

           INPUT
            Index               : long

           OUTPUT
            exclude             : VARIANT_BOOL*'''
        return super(IReplicaDescription, self).get_TableExcluded(Index)
    def put_ReplicaModelType(self, ModelType):
        '''Method IReplicaDescription.put_ReplicaModelType

           INPUT
            ModelType           : esriReplicaModelType'''
        return super(IReplicaDescription, self).put_ReplicaModelType(ModelType)
    def get_ReplicaModelType(self):
        '''Method IReplicaDescription.get_ReplicaModelType

           OUTPUT
            ModelType           : esriReplicaModelType*'''
        return super(IReplicaDescription, self).get_ReplicaModelType()
    def FindTable(self, DatasetName):
        '''Method IReplicaDescription.FindTable

           INPUT
            DatasetName         : IName*

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescription, self).FindTable(DatasetName)
    def AddDatasetNames(self, DatasetNames):
        '''Method IReplicaDescription.AddDatasetNames

           INPUT
            DatasetNames        : IEnumName*'''
        return super(IReplicaDescription, self).AddDatasetNames(DatasetNames)
    def put_IsPrivateTable(self, Index, IsPrivate):
        '''Method IReplicaDescription.put_IsPrivateTable

           INPUTS
            Index               : long
            IsPrivate           : VARIANT_BOOL'''
        return super(IReplicaDescription, self).put_IsPrivateTable(Index, IsPrivate)
    def get_IsPrivateTable(self, Index):
        '''Method IReplicaDescription.get_IsPrivateTable

           INPUT
            Index               : long

           OUTPUT
            IsPrivate           : VARIANT_BOOL*'''
        return super(IReplicaDescription, self).get_IsPrivateTable(Index)
    DatasetNames = property(get_DatasetNames, None, None)
    IsPrivateTable = property(None, put_IsPrivateTable, None)
    ReplicaModelType = property(get_ReplicaModelType, put_ReplicaModelType, None)
    TableExcluded = property(None, put_TableExcluded, None)
    TableNameCount = property(get_TableNameCount, None, None)
    IsPrivateTable = IndexProperty(get_IsPrivateTable, None)
    TableExcluded = IndexProperty(get_TableExcluded, None)
    TableName = IndexProperty(get_TableName, None)

class IReplica(_esriGeoDatabase.IReplica):
    _IID = uuid.UUID('c475452c-72f3-4277-9fb7-fd8099665cec')
    def get_ReplicaID(self):
        '''Method IReplica.get_ReplicaID

           OUTPUT
            rID                 : long*'''
        return super(IReplica, self).get_ReplicaID()
    def get_Name(self):
        '''Method IReplica.get_Name

           OUTPUT
            ReplicaName         : BSTR*'''
        return super(IReplica, self).get_Name()
    def get_Owner(self):
        '''Method IReplica.get_Owner

           OUTPUT
            replicaOwner        : BSTR*'''
        return super(IReplica, self).get_Owner()
    def get_Version(self):
        '''Method IReplica.get_Version

           OUTPUT
            ReplicaVersion      : BSTR*'''
        return super(IReplica, self).get_Version()
    def get_ParentID(self):
        '''Method IReplica.get_ParentID

           OUTPUT
            replicaParentID     : long*'''
        return super(IReplica, self).get_ParentID()
    def get_ReplicaDate(self):
        '''Method IReplica.get_ReplicaDate

           OUTPUT
            rDate               : double*'''
        return super(IReplica, self).get_ReplicaDate()
    def get_ReplicaGuid(self):
        '''Method IReplica.get_ReplicaGuid

           OUTPUT
            rGUID               : BSTR*'''
        return super(IReplica, self).get_ReplicaGuid()
    def get_Description(self):
        '''Method IReplica.get_Description

           OUTPUT
            ReplicaDescription  : IReplicaDescription**'''
        return super(IReplica, self).get_Description()
    def get_ConnectionInfo(self):
        '''Method IReplica.get_ConnectionInfo

           OUTPUT
            replicaConnectionInfo: IWorkspaceName**'''
        return super(IReplica, self).get_ConnectionInfo()
    def get_ReplicaRole(self):
        '''Method IReplica.get_ReplicaRole

           OUTPUT
            rRole               : esriReplicaType*'''
        return super(IReplica, self).get_ReplicaRole()
    def get_ReplicaDatasets(self):
        '''Method IReplica.get_ReplicaDatasets

           OUTPUT
            enumReplicaDataset  : IEnumReplicaDataset**'''
        return super(IReplica, self).get_ReplicaDatasets()
    ConnectionInfo = property(get_ConnectionInfo, None, None)
    Description = property(get_Description, None, None)
    Name = property(get_Name, None, None)
    Owner = property(get_Owner, None, None)
    ParentID = property(get_ParentID, None, None)
    ReplicaDatasets = property(get_ReplicaDatasets, None, None)
    ReplicaDate = property(get_ReplicaDate, None, None)
    ReplicaGuid = property(get_ReplicaGuid, None, None)
    ReplicaID = property(get_ReplicaID, None, None)
    ReplicaRole = property(get_ReplicaRole, None, None)
    Version = property(get_Version, None, None)

class IEnumReplica(_esriGeoDatabase.IEnumReplica):
    _IID = uuid.UUID('13ca9c95-bee7-4c14-947c-f37f26a62d9c')
    def Next(self):
        '''Method IEnumReplica.Next

           OUTPUT
            Replica             : IReplica**'''
        return super(IEnumReplica, self).Next()
    def __iter__(self):
        try:
            super(IEnumReplica, self).Reset()
            val = super(IEnumReplica, self).Next()
            while val:
                yield val
                val = super(IEnumReplica, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumReplica.Reset'''
        return super(IEnumReplica, self).Reset()

class IWorkspaceReplicas(_esriGeoDatabase.IWorkspaceReplicas):
    _IID = uuid.UUID('d7463e40-9508-4b36-8728-29524d897fff')
    def get_Replicas(self):
        '''Method IWorkspaceReplicas.get_Replicas

           OUTPUT
            enumReplica         : IEnumReplica**'''
        return super(IWorkspaceReplicas, self).get_Replicas()
    def get_ReplicaByName(self, ReplicaName):
        '''Method IWorkspaceReplicas.get_ReplicaByName

           INPUT
            ReplicaName         : BSTR

           OUTPUT
            Replica             : IReplica**'''
        return super(IWorkspaceReplicas, self).get_ReplicaByName(ReplicaName)
    def get_ReplicaByID(self, ReplicaID):
        '''Method IWorkspaceReplicas.get_ReplicaByID

           INPUT
            ReplicaID           : long

           OUTPUT
            Replica             : IReplica**'''
        return super(IWorkspaceReplicas, self).get_ReplicaByID(ReplicaID)
    def get_ReplicaByGuid(self, ReplicaGuid):
        '''Method IWorkspaceReplicas.get_ReplicaByGuid

           INPUT
            ReplicaGuid         : BSTR

           OUTPUT
            Replica             : IReplica**'''
        return super(IWorkspaceReplicas, self).get_ReplicaByGuid(ReplicaGuid)
    def RefreshReplicas(self):
        '''Method IWorkspaceReplicas.RefreshReplicas'''
        return super(IWorkspaceReplicas, self).RefreshReplicas()
    Replicas = property(get_Replicas, None, None)
    ReplicaByGuid = IndexProperty(get_ReplicaByGuid, None)
    ReplicaByID = IndexProperty(get_ReplicaByID, None)
    ReplicaByName = IndexProperty(get_ReplicaByName, None)

class IWorkspaceReplicasAdmin(_esriGeoDatabase.IWorkspaceReplicasAdmin):
    _IID = uuid.UUID('72ad4bea-a562-4c4a-a264-14fc6234b187')
    def AlterReplica(self, Replica):
        '''Method IWorkspaceReplicasAdmin.AlterReplica

           INPUT
            Replica             : IReplica*'''
        return super(IWorkspaceReplicasAdmin, self).AlterReplica(Replica)
    def RegisterReplica(self, Replica):
        '''Method IWorkspaceReplicasAdmin.RegisterReplica

           INPUT
            Replica             : IReplica*

           OUTPUT
            ReplicaID           : long*'''
        return super(IWorkspaceReplicasAdmin, self).RegisterReplica(Replica)
    def UnregisterReplica(self, Replica, removeCOVersion):
        '''Method IWorkspaceReplicasAdmin.UnregisterReplica

           INPUTS
            Replica             : IReplica*
            removeCOVersion     : VARIANT_BOOL'''
        return super(IWorkspaceReplicasAdmin, self).UnregisterReplica(Replica, removeCOVersion)

class IWorkspaceReplicasAdmin2(_esriGeoDatabase.IWorkspaceReplicasAdmin2):
    _IID = uuid.UUID('9aa14e6d-aa5a-4dae-a868-d70e8fd5a0be')
    def CanRegisterReplicaDataset(self, ReplicaDataset, Replica):
        '''Method IWorkspaceReplicasAdmin2.CanRegisterReplicaDataset

           INPUTS
            ReplicaDataset      : IReplicaDataset*
            Replica             : IReplica*

           OUTPUT
            CanRegister         : VARIANT_BOOL*'''
        return super(IWorkspaceReplicasAdmin2, self).CanRegisterReplicaDataset(ReplicaDataset, Replica)
    def RegisterReplicaDataset(self, RDataset, filter, UseGeometry, QueryDef, pSelID, pToReplica):
        '''Method IWorkspaceReplicasAdmin2.RegisterReplicaDataset

           INPUTS
            RDataset            : IReplicaDataset*
            filter              : esriRowsType
            UseGeometry         : VARIANT_BOOL
            QueryDef            : BSTR
            pSelID              : IFIDSet*
            pToReplica          : IReplica*'''
        return super(IWorkspaceReplicasAdmin2, self).RegisterReplicaDataset(RDataset, filter, UseGeometry, QueryDef, pSelID, pToReplica)
    def CanUnregisterReplicaDataset(self, ReplicaDataset):
        '''Method IWorkspaceReplicasAdmin2.CanUnregisterReplicaDataset

           INPUT
            ReplicaDataset      : IReplicaDataset*

           OUTPUT
            CanUnregister       : VARIANT_BOOL*'''
        return super(IWorkspaceReplicasAdmin2, self).CanUnregisterReplicaDataset(ReplicaDataset)
    def UnregisterReplicaDataset(self, ReplicaDataset, Replica):
        '''Method IWorkspaceReplicasAdmin2.UnregisterReplicaDataset

           INPUTS
            ReplicaDataset      : IReplicaDataset*
            Replica             : IReplica*'''
        return super(IWorkspaceReplicasAdmin2, self).UnregisterReplicaDataset(ReplicaDataset, Replica)
    def AlterReplica2(self, Replica, PersistParentUserInfo):
        '''Method IWorkspaceReplicasAdmin2.AlterReplica2

           INPUTS
            Replica             : IReplica*
            PersistParentUserInfo: VARIANT_BOOL'''
        return super(IWorkspaceReplicasAdmin2, self).AlterReplica2(Replica, PersistParentUserInfo)
    def get_IsReferencedByReplica(self, DatasetType, DatasetID):
        '''Method IWorkspaceReplicasAdmin2.get_IsReferencedByReplica

           INPUTS
            DatasetType         : esriDatasetType
            DatasetID           : long

           OUTPUT
            isReferenced        : VARIANT_BOOL*'''
        return super(IWorkspaceReplicasAdmin2, self).get_IsReferencedByReplica(DatasetType, DatasetID)
    def AlterReplica(self, Replica):
        '''Method IWorkspaceReplicasAdmin.AlterReplica (from IWorkspaceReplicasAdmin)

           INPUT
            Replica             : IReplica*'''
        return super(IWorkspaceReplicasAdmin2, self).AlterReplica(Replica)
    def RegisterReplica(self, Replica):
        '''Method IWorkspaceReplicasAdmin.RegisterReplica (from IWorkspaceReplicasAdmin)

           INPUT
            Replica             : IReplica*

           OUTPUT
            ReplicaID           : long*'''
        return super(IWorkspaceReplicasAdmin2, self).RegisterReplica(Replica)
    def UnregisterReplica(self, Replica, removeCOVersion):
        '''Method IWorkspaceReplicasAdmin.UnregisterReplica (from IWorkspaceReplicasAdmin)

           INPUTS
            Replica             : IReplica*
            removeCOVersion     : VARIANT_BOOL'''
        return super(IWorkspaceReplicasAdmin2, self).UnregisterReplica(Replica, removeCOVersion)

class IWorkspaceReplicasAdmin3(_esriGeoDatabase.IWorkspaceReplicasAdmin3):
    _IID = uuid.UUID('9aa25800-7148-4680-9b14-d9f8818869aa')
    def get_ReplicasByDataset(self, DatasetType, DatasetID):
        '''Method IWorkspaceReplicasAdmin3.get_ReplicasByDataset

           INPUTS
            DatasetType         : esriDatasetType
            DatasetID           : long

           OUTPUT
            ReplicaID           : ILongArray**'''
        return super(IWorkspaceReplicasAdmin3, self).get_ReplicasByDataset(DatasetType, DatasetID)
    def CanRegisterReplicaDataset(self, ReplicaDataset, Replica):
        '''Method IWorkspaceReplicasAdmin2.CanRegisterReplicaDataset (from IWorkspaceReplicasAdmin2)

           INPUTS
            ReplicaDataset      : IReplicaDataset*
            Replica             : IReplica*

           OUTPUT
            CanRegister         : VARIANT_BOOL*'''
        return super(IWorkspaceReplicasAdmin3, self).CanRegisterReplicaDataset(ReplicaDataset, Replica)
    def RegisterReplicaDataset(self, RDataset, filter, UseGeometry, QueryDef, pSelID, pToReplica):
        '''Method IWorkspaceReplicasAdmin2.RegisterReplicaDataset (from IWorkspaceReplicasAdmin2)

           INPUTS
            RDataset            : IReplicaDataset*
            filter              : esriRowsType
            UseGeometry         : VARIANT_BOOL
            QueryDef            : BSTR
            pSelID              : IFIDSet*
            pToReplica          : IReplica*'''
        return super(IWorkspaceReplicasAdmin3, self).RegisterReplicaDataset(RDataset, filter, UseGeometry, QueryDef, pSelID, pToReplica)
    def CanUnregisterReplicaDataset(self, ReplicaDataset):
        '''Method IWorkspaceReplicasAdmin2.CanUnregisterReplicaDataset (from IWorkspaceReplicasAdmin2)

           INPUT
            ReplicaDataset      : IReplicaDataset*

           OUTPUT
            CanUnregister       : VARIANT_BOOL*'''
        return super(IWorkspaceReplicasAdmin3, self).CanUnregisterReplicaDataset(ReplicaDataset)
    def UnregisterReplicaDataset(self, ReplicaDataset, Replica):
        '''Method IWorkspaceReplicasAdmin2.UnregisterReplicaDataset (from IWorkspaceReplicasAdmin2)

           INPUTS
            ReplicaDataset      : IReplicaDataset*
            Replica             : IReplica*'''
        return super(IWorkspaceReplicasAdmin3, self).UnregisterReplicaDataset(ReplicaDataset, Replica)
    def AlterReplica2(self, Replica, PersistParentUserInfo):
        '''Method IWorkspaceReplicasAdmin2.AlterReplica2 (from IWorkspaceReplicasAdmin2)

           INPUTS
            Replica             : IReplica*
            PersistParentUserInfo: VARIANT_BOOL'''
        return super(IWorkspaceReplicasAdmin3, self).AlterReplica2(Replica, PersistParentUserInfo)
    def get_IsReferencedByReplica(self, DatasetType, DatasetID):
        '''Method IWorkspaceReplicasAdmin2.get_IsReferencedByReplica (from IWorkspaceReplicasAdmin2)

           INPUTS
            DatasetType         : esriDatasetType
            DatasetID           : long

           OUTPUT
            isReferenced        : VARIANT_BOOL*'''
        return super(IWorkspaceReplicasAdmin3, self).get_IsReferencedByReplica(DatasetType, DatasetID)
    def AlterReplica(self, Replica):
        '''Method IWorkspaceReplicasAdmin.AlterReplica (from IWorkspaceReplicasAdmin)

           INPUT
            Replica             : IReplica*'''
        return super(IWorkspaceReplicasAdmin3, self).AlterReplica(Replica)
    def RegisterReplica(self, Replica):
        '''Method IWorkspaceReplicasAdmin.RegisterReplica (from IWorkspaceReplicasAdmin)

           INPUT
            Replica             : IReplica*

           OUTPUT
            ReplicaID           : long*'''
        return super(IWorkspaceReplicasAdmin3, self).RegisterReplica(Replica)
    def UnregisterReplica(self, Replica, removeCOVersion):
        '''Method IWorkspaceReplicasAdmin.UnregisterReplica (from IWorkspaceReplicasAdmin)

           INPUTS
            Replica             : IReplica*
            removeCOVersion     : VARIANT_BOOL'''
        return super(IWorkspaceReplicasAdmin3, self).UnregisterReplica(Replica, removeCOVersion)

class IGPReplicaDescription(_esriGeoDatabase.IGPReplicaDescription):
    _IID = uuid.UUID('e4c1358f-56cf-4c9b-99cd-1bf58d45f1bb')

    def __init__(self, *args, **kw):
        super(IGPReplicaDescription, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, Replica):
        '''Method IGPReplicaDescription.Init

           INPUT
            Replica             : IReplica*'''
        return super(IGPReplicaDescription, self).Init(Replica)
    def put_ModelType(self, ModelType):
        '''Method IGPReplicaDescription.put_ModelType

           INPUT
            ModelType           : esriReplicaModelType'''
        return super(IGPReplicaDescription, self).put_ModelType(ModelType)
    def get_ModelType(self):
        '''Method IGPReplicaDescription.get_ModelType

           OUTPUT
            ModelType           : esriReplicaModelType*'''
        return super(IGPReplicaDescription, self).get_ModelType()
    def put_SingleGeneration(self, SingleGeneration):
        '''Method IGPReplicaDescription.put_SingleGeneration

           INPUT
            SingleGeneration    : VARIANT_BOOL'''
        return super(IGPReplicaDescription, self).put_SingleGeneration(SingleGeneration)
    def get_SingleGeneration(self):
        '''Method IGPReplicaDescription.get_SingleGeneration

           OUTPUT
            SingleGeneration    : VARIANT_BOOL*'''
        return super(IGPReplicaDescription, self).get_SingleGeneration()
    def put_SpatialRelation(self, SpatialRelation):
        '''Method IGPReplicaDescription.put_SpatialRelation

           INPUT
            SpatialRelation     : esriSpatialRelEnum'''
        return super(IGPReplicaDescription, self).put_SpatialRelation(SpatialRelation)
    def get_SpatialRelation(self):
        '''Method IGPReplicaDescription.get_SpatialRelation

           OUTPUT
            SpatialRelation     : esriSpatialRelEnum*'''
        return super(IGPReplicaDescription, self).get_SpatialRelation()
    def putref_QueryGeometry(self, QueryGeometry):
        '''Method IGPReplicaDescription.putref_QueryGeometry

           INPUT
            QueryGeometry       : IGeometry*'''
        return super(IGPReplicaDescription, self).putref_QueryGeometry(QueryGeometry)
    def get_QueryGeometry(self):
        '''Method IGPReplicaDescription.get_QueryGeometry

           OUTPUT
            QueryGeometry       : IGeometry**'''
        return super(IGPReplicaDescription, self).get_QueryGeometry()
    def putref_ReplicaDatasets(self, ReplicaDatasets):
        '''Method IGPReplicaDescription.putref_ReplicaDatasets

           INPUT
            ReplicaDatasets     : IGPReplicaDatasets*'''
        return super(IGPReplicaDescription, self).putref_ReplicaDatasets(ReplicaDatasets)
    def get_ReplicaDatasets(self):
        '''Method IGPReplicaDescription.get_ReplicaDatasets

           OUTPUT
            ReplicaDatasets     : IGPReplicaDatasets**'''
        return super(IGPReplicaDescription, self).get_ReplicaDatasets()
    def put_TransferRelatedObjects(self, transferRelObjects):
        '''Method IGPReplicaDescription.put_TransferRelatedObjects

           INPUT
            transferRelObjects  : VARIANT_BOOL'''
        return super(IGPReplicaDescription, self).put_TransferRelatedObjects(transferRelObjects)
    def get_TransferRelatedObjects(self):
        '''Method IGPReplicaDescription.get_TransferRelatedObjects

           OUTPUT
            transferRelObjects  : VARIANT_BOOL*'''
        return super(IGPReplicaDescription, self).get_TransferRelatedObjects()
    ModelType = property(get_ModelType, put_ModelType, None)
    QueryGeometry = property(get_QueryGeometry, putref_QueryGeometry, None)
    ReplicaDatasets = property(get_ReplicaDatasets, putref_ReplicaDatasets, None)
    SingleGeneration = property(get_SingleGeneration, put_SingleGeneration, None)
    SpatialRelation = property(get_SpatialRelation, put_SpatialRelation, None)
    TransferRelatedObjects = property(get_TransferRelatedObjects, put_TransferRelatedObjects, None)

class IGPReplica(_esriGeoDatabase.IGPReplica):
    _IID = uuid.UUID('a64e67f0-91d2-4b3f-8553-bc9f641cbc37')

    def __init__(self, *args, **kw):
        super(IGPReplica, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, Replica):
        '''Method IGPReplica.Init

           INPUT
            Replica             : IReplica*'''
        return super(IGPReplica, self).Init(Replica)
    def put_Name(self, ReplicaName):
        '''Method IGPReplica.put_Name

           INPUT
            ReplicaName         : BSTR'''
        return super(IGPReplica, self).put_Name(ReplicaName)
    def get_Name(self):
        '''Method IGPReplica.get_Name

           OUTPUT
            ReplicaName         : BSTR*'''
        return super(IGPReplica, self).get_Name()
    def put_ID(self, ReplicaID):
        '''Method IGPReplica.put_ID

           INPUT
            ReplicaID           : long'''
        return super(IGPReplica, self).put_ID(ReplicaID)
    def get_ID(self):
        '''Method IGPReplica.get_ID

           OUTPUT
            ReplicaID           : long*'''
        return super(IGPReplica, self).get_ID()
    def put_GUID(self, GUID):
        '''Method IGPReplica.put_GUID

           INPUT
            GUID                : BSTR'''
        return super(IGPReplica, self).put_GUID(GUID)
    def get_GUID(self):
        '''Method IGPReplica.get_GUID

           OUTPUT
            GUID                : BSTR*'''
        return super(IGPReplica, self).get_GUID()
    def put_Role(self, ReplicaRole):
        '''Method IGPReplica.put_Role

           INPUT
            ReplicaRole         : esriReplicaRole'''
        return super(IGPReplica, self).put_Role(ReplicaRole)
    def get_Role(self):
        '''Method IGPReplica.get_Role

           OUTPUT
            ReplicaRole         : esriReplicaRole*'''
        return super(IGPReplica, self).get_Role()
    def put_AccessType(self, AccessType):
        '''Method IGPReplica.put_AccessType

           INPUT
            AccessType          : esriReplicaAccessType'''
        return super(IGPReplica, self).put_AccessType(AccessType)
    def get_AccessType(self):
        '''Method IGPReplica.get_AccessType

           OUTPUT
            AccessType          : esriReplicaAccessType*'''
        return super(IGPReplica, self).get_AccessType()
    def put_CreationDate(self, ReplicaRole):
        '''Method IGPReplica.put_CreationDate

           INPUT
            ReplicaRole         : VARIANT'''
        return super(IGPReplica, self).put_CreationDate(ReplicaRole)
    def get_CreationDate(self):
        '''Method IGPReplica.get_CreationDate

           OUTPUT
            ReplicaRole         : VARIANT*'''
        return super(IGPReplica, self).get_CreationDate()
    def put_ReplicaVersion(self, ReplicaVersion):
        '''Method IGPReplica.put_ReplicaVersion

           INPUT
            ReplicaVersion      : BSTR'''
        return super(IGPReplica, self).put_ReplicaVersion(ReplicaVersion)
    def get_ReplicaVersion(self):
        '''Method IGPReplica.get_ReplicaVersion

           OUTPUT
            ReplicaVersion      : BSTR*'''
        return super(IGPReplica, self).get_ReplicaVersion()
    def put_MyGenerationNumber(self, pMyGenerationNumber):
        '''Method IGPReplica.put_MyGenerationNumber

           INPUT
            pMyGenerationNumber : long'''
        return super(IGPReplica, self).put_MyGenerationNumber(pMyGenerationNumber)
    def get_MyGenerationNumber(self):
        '''Method IGPReplica.get_MyGenerationNumber

           OUTPUT
            pMyGenerationNumber : long*'''
        return super(IGPReplica, self).get_MyGenerationNumber()
    def put_SibGenerationNumber(self, pSibGenerationNumber):
        '''Method IGPReplica.put_SibGenerationNumber

           INPUT
            pSibGenerationNumber: long'''
        return super(IGPReplica, self).put_SibGenerationNumber(pSibGenerationNumber)
    def get_SibGenerationNumber(self):
        '''Method IGPReplica.get_SibGenerationNumber

           OUTPUT
            pSibGenerationNumber: long*'''
        return super(IGPReplica, self).get_SibGenerationNumber()
    def put_SibMyGenerationNumber(self, pSibMyGenerationNumber):
        '''Method IGPReplica.put_SibMyGenerationNumber

           INPUT
            pSibMyGenerationNumber: long'''
        return super(IGPReplica, self).put_SibMyGenerationNumber(pSibMyGenerationNumber)
    def get_SibMyGenerationNumber(self):
        '''Method IGPReplica.get_SibMyGenerationNumber

           OUTPUT
            pSibMyGenerationNumber: long*'''
        return super(IGPReplica, self).get_SibMyGenerationNumber()
    def put_ReplicaState(self, ReplicaState):
        '''Method IGPReplica.put_ReplicaState

           INPUT
            ReplicaState        : esriReplicaState'''
        return super(IGPReplica, self).put_ReplicaState(ReplicaState)
    def get_ReplicaState(self):
        '''Method IGPReplica.get_ReplicaState

           OUTPUT
            ReplicaState        : esriReplicaState*'''
        return super(IGPReplica, self).get_ReplicaState()
    def put_SibConnectionString(self, SibConnectionString):
        '''Method IGPReplica.put_SibConnectionString

           INPUT
            SibConnectionString : BSTR'''
        return super(IGPReplica, self).put_SibConnectionString(SibConnectionString)
    def get_SibConnectionString(self):
        '''Method IGPReplica.get_SibConnectionString

           OUTPUT
            SibConnectionString : BSTR*'''
        return super(IGPReplica, self).get_SibConnectionString()
    def putref_ReplicaDescription(self, ReplicaDescription):
        '''Method IGPReplica.putref_ReplicaDescription

           INPUT
            ReplicaDescription  : IGPReplicaDescription*'''
        return super(IGPReplica, self).putref_ReplicaDescription(ReplicaDescription)
    def get_ReplicaDescription(self):
        '''Method IGPReplica.get_ReplicaDescription

           OUTPUT
            ReplicaDescription  : IGPReplicaDescription**'''
        return super(IGPReplica, self).get_ReplicaDescription()
    def put_ReconcilePolicy(self, policy):
        '''Method IGPReplica.put_ReconcilePolicy

           INPUT
            policy              : esriReplicaReconcilePolicyType'''
        return super(IGPReplica, self).put_ReconcilePolicy(policy)
    def get_ReconcilePolicy(self):
        '''Method IGPReplica.get_ReconcilePolicy

           OUTPUT
            policy              : esriReplicaReconcilePolicyType*'''
        return super(IGPReplica, self).get_ReconcilePolicy()
    def put_HasConflicts(self, HasConflicts):
        '''Method IGPReplica.put_HasConflicts

           INPUT
            HasConflicts        : VARIANT_BOOL'''
        return super(IGPReplica, self).put_HasConflicts(HasConflicts)
    def get_HasConflicts(self):
        '''Method IGPReplica.get_HasConflicts

           OUTPUT
            HasConflicts        : VARIANT_BOOL*'''
        return super(IGPReplica, self).get_HasConflicts()
    AccessType = property(get_AccessType, put_AccessType, None)
    CreationDate = property(get_CreationDate, put_CreationDate, None)
    GUID = property(get_GUID, put_GUID, None)
    HasConflicts = property(get_HasConflicts, put_HasConflicts, None)
    ID = property(get_ID, put_ID, None)
    MyGenerationNumber = property(get_MyGenerationNumber, put_MyGenerationNumber, None)
    Name = property(get_Name, put_Name, None)
    ReconcilePolicy = property(get_ReconcilePolicy, put_ReconcilePolicy, None)
    ReplicaDescription = property(get_ReplicaDescription, putref_ReplicaDescription, None)
    ReplicaState = property(get_ReplicaState, put_ReplicaState, None)
    ReplicaVersion = property(get_ReplicaVersion, put_ReplicaVersion, None)
    Role = property(get_Role, put_Role, None)
    SibConnectionString = property(get_SibConnectionString, put_SibConnectionString, None)
    SibGenerationNumber = property(get_SibGenerationNumber, put_SibGenerationNumber, None)
    SibMyGenerationNumber = property(get_SibMyGenerationNumber, put_SibMyGenerationNumber, None)

class IWorkspaceReplicas2(_esriGeoDatabase.IWorkspaceReplicas2):
    _IID = uuid.UUID('21841681-bc98-4c79-aff1-b13ccd06f107')
    def RefreshReplica(self, ReplicaGuid):
        '''Method IWorkspaceReplicas2.RefreshReplica

           INPUT
            ReplicaGuid         : BSTR'''
        return super(IWorkspaceReplicas2, self).RefreshReplica(ReplicaGuid)
    def get_Replicas(self):
        '''Method IWorkspaceReplicas.get_Replicas (from IWorkspaceReplicas)

           OUTPUT
            enumReplica         : IEnumReplica**'''
        return super(IWorkspaceReplicas2, self).get_Replicas()
    def get_ReplicaByName(self, ReplicaName):
        '''Method IWorkspaceReplicas.get_ReplicaByName (from IWorkspaceReplicas)

           INPUT
            ReplicaName         : BSTR

           OUTPUT
            Replica             : IReplica**'''
        return super(IWorkspaceReplicas2, self).get_ReplicaByName(ReplicaName)
    def get_ReplicaByID(self, ReplicaID):
        '''Method IWorkspaceReplicas.get_ReplicaByID (from IWorkspaceReplicas)

           INPUT
            ReplicaID           : long

           OUTPUT
            Replica             : IReplica**'''
        return super(IWorkspaceReplicas2, self).get_ReplicaByID(ReplicaID)
    def get_ReplicaByGuid(self, ReplicaGuid):
        '''Method IWorkspaceReplicas.get_ReplicaByGuid (from IWorkspaceReplicas)

           INPUT
            ReplicaGuid         : BSTR

           OUTPUT
            Replica             : IReplica**'''
        return super(IWorkspaceReplicas2, self).get_ReplicaByGuid(ReplicaGuid)
    def RefreshReplicas(self):
        '''Method IWorkspaceReplicas.RefreshReplicas (from IWorkspaceReplicas)'''
        return super(IWorkspaceReplicas2, self).RefreshReplicas()
    Replicas = property(get_Replicas, None, None)
    ReplicaByGuid = IndexProperty(get_ReplicaByGuid, None)
    ReplicaByID = IndexProperty(get_ReplicaByID, None)
    ReplicaByName = IndexProperty(get_ReplicaByName, None)

class IReplica2(_esriGeoDatabase.IReplica2):
    _IID = uuid.UUID('3b29c4b9-4989-4871-8006-57dcc67f59d9')
    def get_MyGenerationNumber(self):
        '''Method IReplica2.get_MyGenerationNumber

           OUTPUT
            myGen               : long*'''
        return super(IReplica2, self).get_MyGenerationNumber()
    def get_SibGenerationNumber(self):
        '''Method IReplica2.get_SibGenerationNumber

           OUTPUT
            sibGen              : long*'''
        return super(IReplica2, self).get_SibGenerationNumber()
    def get_SibMyGenNumber(self):
        '''Method IReplica2.get_SibMyGenNumber

           OUTPUT
            sibMyGen            : long*'''
        return super(IReplica2, self).get_SibMyGenNumber()
    def get_Log(self):
        '''Method IReplica2.get_Log

           OUTPUT
            enumReplicaLog      : IEnumReplicaLog**'''
        return super(IReplica2, self).get_Log()
    def get_AllReplicaDatasets(self):
        '''Method IReplica2.get_AllReplicaDatasets

           OUTPUT
            enumReplicaDataset  : IEnumReplicaDataset**'''
        return super(IReplica2, self).get_AllReplicaDatasets()
    def Init2(self, GPReplica, TargetWorkspace):
        '''Method IReplica2.Init2

           INPUTS
            GPReplica           : IGPReplica*
            TargetWorkspace     : IWorkspace*'''
        return super(IReplica2, self).Init2(GPReplica, TargetWorkspace)
    def get_AccessType(self):
        '''Method IReplica2.get_AccessType

           OUTPUT
            replicaAccessType   : esriReplicaAccessType*'''
        return super(IReplica2, self).get_AccessType()
    def get_ReconcilePolicyType(self):
        '''Method IReplica2.get_ReconcilePolicyType

           OUTPUT
            replicaReconcilePolicy: esriReplicaReconcilePolicyType*'''
        return super(IReplica2, self).get_ReconcilePolicyType()
    def get_HasConflicts(self):
        '''Method IReplica2.get_HasConflicts

           OUTPUT
            HasConflicts        : VARIANT_BOOL*'''
        return super(IReplica2, self).get_HasConflicts()
    def get_ReplicaReceivingVersion(self):
        '''Method IReplica2.get_ReplicaReceivingVersion

           OUTPUT
            ReplicaReceivingVersion: BSTR*'''
        return super(IReplica2, self).get_ReplicaReceivingVersion()
    def get_ReplicaState(self):
        '''Method IReplica2.get_ReplicaState

           OUTPUT
            ReplicaState        : esriReplicaState*'''
        return super(IReplica2, self).get_ReplicaState()
    def get_SibConnectionString(self):
        '''Method IReplica2.get_SibConnectionString

           OUTPUT
            ConnectionString    : BSTR*'''
        return super(IReplica2, self).get_SibConnectionString()
    def get_ReplicaID(self):
        '''Method IReplica.get_ReplicaID (from IReplica)

           OUTPUT
            rID                 : long*'''
        return super(IReplica2, self).get_ReplicaID()
    def get_Name(self):
        '''Method IReplica.get_Name (from IReplica)

           OUTPUT
            ReplicaName         : BSTR*'''
        return super(IReplica2, self).get_Name()
    def get_Owner(self):
        '''Method IReplica.get_Owner (from IReplica)

           OUTPUT
            replicaOwner        : BSTR*'''
        return super(IReplica2, self).get_Owner()
    def get_Version(self):
        '''Method IReplica.get_Version (from IReplica)

           OUTPUT
            ReplicaVersion      : BSTR*'''
        return super(IReplica2, self).get_Version()
    def get_ParentID(self):
        '''Method IReplica.get_ParentID (from IReplica)

           OUTPUT
            replicaParentID     : long*'''
        return super(IReplica2, self).get_ParentID()
    def get_ReplicaDate(self):
        '''Method IReplica.get_ReplicaDate (from IReplica)

           OUTPUT
            rDate               : double*'''
        return super(IReplica2, self).get_ReplicaDate()
    def get_ReplicaGuid(self):
        '''Method IReplica.get_ReplicaGuid (from IReplica)

           OUTPUT
            rGUID               : BSTR*'''
        return super(IReplica2, self).get_ReplicaGuid()
    def get_Description(self):
        '''Method IReplica.get_Description (from IReplica)

           OUTPUT
            ReplicaDescription  : IReplicaDescription**'''
        return super(IReplica2, self).get_Description()
    def get_ConnectionInfo(self):
        '''Method IReplica.get_ConnectionInfo (from IReplica)

           OUTPUT
            replicaConnectionInfo: IWorkspaceName**'''
        return super(IReplica2, self).get_ConnectionInfo()
    def get_ReplicaRole(self):
        '''Method IReplica.get_ReplicaRole (from IReplica)

           OUTPUT
            rRole               : esriReplicaType*'''
        return super(IReplica2, self).get_ReplicaRole()
    def get_ReplicaDatasets(self):
        '''Method IReplica.get_ReplicaDatasets (from IReplica)

           OUTPUT
            enumReplicaDataset  : IEnumReplicaDataset**'''
        return super(IReplica2, self).get_ReplicaDatasets()
    AccessType = property(get_AccessType, None, None)
    AllReplicaDatasets = property(get_AllReplicaDatasets, None, None)
    ConnectionInfo = property(get_ConnectionInfo, None, None)
    Description = property(get_Description, None, None)
    HasConflicts = property(get_HasConflicts, None, None)
    Log = property(get_Log, None, None)
    MyGenerationNumber = property(get_MyGenerationNumber, None, None)
    Name = property(get_Name, None, None)
    Owner = property(get_Owner, None, None)
    ParentID = property(get_ParentID, None, None)
    ReconcilePolicyType = property(get_ReconcilePolicyType, None, None)
    ReplicaDatasets = property(get_ReplicaDatasets, None, None)
    ReplicaDate = property(get_ReplicaDate, None, None)
    ReplicaGuid = property(get_ReplicaGuid, None, None)
    ReplicaID = property(get_ReplicaID, None, None)
    ReplicaReceivingVersion = property(get_ReplicaReceivingVersion, None, None)
    ReplicaRole = property(get_ReplicaRole, None, None)
    ReplicaState = property(get_ReplicaState, None, None)
    SibConnectionString = property(get_SibConnectionString, None, None)
    SibGenerationNumber = property(get_SibGenerationNumber, None, None)
    SibMyGenNumber = property(get_SibMyGenNumber, None, None)
    Version = property(get_Version, None, None)

class IReplica3(_esriGeoDatabase.IReplica3):
    _IID = uuid.UUID('a3213932-009d-4a49-ae5e-945f32e079f2')

    def __init__(self, *args, **kw):
        super(IReplica3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UseArchiving(self):
        '''Method IReplica3.get_UseArchiving

           OUTPUT
            UseArchiving        : VARIANT_BOOL*'''
        return super(IReplica3, self).get_UseArchiving()
    def put_UseArchiving(self, UseArchiving):
        '''Method IReplica3.put_UseArchiving

           INPUT
            UseArchiving        : VARIANT_BOOL'''
        return super(IReplica3, self).put_UseArchiving(UseArchiving)
    def get_MyGenerationNumber(self):
        '''Method IReplica2.get_MyGenerationNumber (from IReplica2)

           OUTPUT
            myGen               : long*'''
        return super(IReplica3, self).get_MyGenerationNumber()
    def get_SibGenerationNumber(self):
        '''Method IReplica2.get_SibGenerationNumber (from IReplica2)

           OUTPUT
            sibGen              : long*'''
        return super(IReplica3, self).get_SibGenerationNumber()
    def get_SibMyGenNumber(self):
        '''Method IReplica2.get_SibMyGenNumber (from IReplica2)

           OUTPUT
            sibMyGen            : long*'''
        return super(IReplica3, self).get_SibMyGenNumber()
    def get_Log(self):
        '''Method IReplica2.get_Log (from IReplica2)

           OUTPUT
            enumReplicaLog      : IEnumReplicaLog**'''
        return super(IReplica3, self).get_Log()
    def get_AllReplicaDatasets(self):
        '''Method IReplica2.get_AllReplicaDatasets (from IReplica2)

           OUTPUT
            enumReplicaDataset  : IEnumReplicaDataset**'''
        return super(IReplica3, self).get_AllReplicaDatasets()
    def Init2(self, GPReplica, TargetWorkspace):
        '''Method IReplica2.Init2 (from IReplica2)

           INPUTS
            GPReplica           : IGPReplica*
            TargetWorkspace     : IWorkspace*'''
        return super(IReplica3, self).Init2(GPReplica, TargetWorkspace)
    def get_AccessType(self):
        '''Method IReplica2.get_AccessType (from IReplica2)

           OUTPUT
            replicaAccessType   : esriReplicaAccessType*'''
        return super(IReplica3, self).get_AccessType()
    def get_ReconcilePolicyType(self):
        '''Method IReplica2.get_ReconcilePolicyType (from IReplica2)

           OUTPUT
            replicaReconcilePolicy: esriReplicaReconcilePolicyType*'''
        return super(IReplica3, self).get_ReconcilePolicyType()
    def get_HasConflicts(self):
        '''Method IReplica2.get_HasConflicts (from IReplica2)

           OUTPUT
            HasConflicts        : VARIANT_BOOL*'''
        return super(IReplica3, self).get_HasConflicts()
    def get_ReplicaReceivingVersion(self):
        '''Method IReplica2.get_ReplicaReceivingVersion (from IReplica2)

           OUTPUT
            ReplicaReceivingVersion: BSTR*'''
        return super(IReplica3, self).get_ReplicaReceivingVersion()
    def get_ReplicaState(self):
        '''Method IReplica2.get_ReplicaState (from IReplica2)

           OUTPUT
            ReplicaState        : esriReplicaState*'''
        return super(IReplica3, self).get_ReplicaState()
    def get_SibConnectionString(self):
        '''Method IReplica2.get_SibConnectionString (from IReplica2)

           OUTPUT
            ConnectionString    : BSTR*'''
        return super(IReplica3, self).get_SibConnectionString()
    def get_ReplicaID(self):
        '''Method IReplica.get_ReplicaID (from IReplica)

           OUTPUT
            rID                 : long*'''
        return super(IReplica3, self).get_ReplicaID()
    def get_Name(self):
        '''Method IReplica.get_Name (from IReplica)

           OUTPUT
            ReplicaName         : BSTR*'''
        return super(IReplica3, self).get_Name()
    def get_Owner(self):
        '''Method IReplica.get_Owner (from IReplica)

           OUTPUT
            replicaOwner        : BSTR*'''
        return super(IReplica3, self).get_Owner()
    def get_Version(self):
        '''Method IReplica.get_Version (from IReplica)

           OUTPUT
            ReplicaVersion      : BSTR*'''
        return super(IReplica3, self).get_Version()
    def get_ParentID(self):
        '''Method IReplica.get_ParentID (from IReplica)

           OUTPUT
            replicaParentID     : long*'''
        return super(IReplica3, self).get_ParentID()
    def get_ReplicaDate(self):
        '''Method IReplica.get_ReplicaDate (from IReplica)

           OUTPUT
            rDate               : double*'''
        return super(IReplica3, self).get_ReplicaDate()
    def get_ReplicaGuid(self):
        '''Method IReplica.get_ReplicaGuid (from IReplica)

           OUTPUT
            rGUID               : BSTR*'''
        return super(IReplica3, self).get_ReplicaGuid()
    def get_Description(self):
        '''Method IReplica.get_Description (from IReplica)

           OUTPUT
            ReplicaDescription  : IReplicaDescription**'''
        return super(IReplica3, self).get_Description()
    def get_ConnectionInfo(self):
        '''Method IReplica.get_ConnectionInfo (from IReplica)

           OUTPUT
            replicaConnectionInfo: IWorkspaceName**'''
        return super(IReplica3, self).get_ConnectionInfo()
    def get_ReplicaRole(self):
        '''Method IReplica.get_ReplicaRole (from IReplica)

           OUTPUT
            rRole               : esriReplicaType*'''
        return super(IReplica3, self).get_ReplicaRole()
    def get_ReplicaDatasets(self):
        '''Method IReplica.get_ReplicaDatasets (from IReplica)

           OUTPUT
            enumReplicaDataset  : IEnumReplicaDataset**'''
        return super(IReplica3, self).get_ReplicaDatasets()
    AccessType = property(get_AccessType, None, None)
    AllReplicaDatasets = property(get_AllReplicaDatasets, None, None)
    ConnectionInfo = property(get_ConnectionInfo, None, None)
    Description = property(get_Description, None, None)
    HasConflicts = property(get_HasConflicts, None, None)
    Log = property(get_Log, None, None)
    MyGenerationNumber = property(get_MyGenerationNumber, None, None)
    Name = property(get_Name, None, None)
    Owner = property(get_Owner, None, None)
    ParentID = property(get_ParentID, None, None)
    ReconcilePolicyType = property(get_ReconcilePolicyType, None, None)
    ReplicaDatasets = property(get_ReplicaDatasets, None, None)
    ReplicaDate = property(get_ReplicaDate, None, None)
    ReplicaGuid = property(get_ReplicaGuid, None, None)
    ReplicaID = property(get_ReplicaID, None, None)
    ReplicaReceivingVersion = property(get_ReplicaReceivingVersion, None, None)
    ReplicaRole = property(get_ReplicaRole, None, None)
    ReplicaState = property(get_ReplicaState, None, None)
    SibConnectionString = property(get_SibConnectionString, None, None)
    SibGenerationNumber = property(get_SibGenerationNumber, None, None)
    SibMyGenNumber = property(get_SibMyGenNumber, None, None)
    UseArchiving = property(get_UseArchiving, put_UseArchiving, None)
    Version = property(get_Version, None, None)

class IReplicaEdit(_esriGeoDatabase.IReplicaEdit):
    _IID = uuid.UUID('891ac2b8-4744-454c-8e16-1c46c38fc0b4')

    def __init__(self, *args, **kw):
        super(IReplicaEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ReplicaID(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaID

           INPUT
            _arg1               : long'''
        return super(IReplicaEdit, self).put_ReplicaID(_arg1)
    def put_Name(self, _arg1):
        '''Method IReplicaEdit.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit, self).put_Name(_arg1)
    def put_Owner(self, _arg1):
        '''Method IReplicaEdit.put_Owner

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit, self).put_Owner(_arg1)
    def put_Version(self, _arg1):
        '''Method IReplicaEdit.put_Version

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit, self).put_Version(_arg1)
    def put_ParentID(self, _arg1):
        '''Method IReplicaEdit.put_ParentID

           INPUT
            _arg1               : long'''
        return super(IReplicaEdit, self).put_ParentID(_arg1)
    def put_ReplicaDate(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaDate

           INPUT
            _arg1               : double'''
        return super(IReplicaEdit, self).put_ReplicaDate(_arg1)
    def put_ReplicaGuid(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaGuid

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit, self).put_ReplicaGuid(_arg1)
    def putref_Description(self, _arg1):
        '''Method IReplicaEdit.putref_Description

           INPUT
            _arg1               : IReplicaDescription*'''
        return super(IReplicaEdit, self).putref_Description(_arg1)
    def putref_ConnectionInfo(self, _arg1):
        '''Method IReplicaEdit.putref_ConnectionInfo

           INPUT
            _arg1               : IWorkspaceName*'''
        return super(IReplicaEdit, self).putref_ConnectionInfo(_arg1)
    def put_ReplicaRole(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaRole

           INPUT
            _arg1               : esriReplicaType'''
        return super(IReplicaEdit, self).put_ReplicaRole(_arg1)
    def putref_ReplicaDatasets(self, _arg1):
        '''Method IReplicaEdit.putref_ReplicaDatasets

           INPUT
            _arg1               : IEnumReplicaDataset*'''
        return super(IReplicaEdit, self).putref_ReplicaDatasets(_arg1)
    def Init(self, otherReplica):
        '''Method IReplicaEdit.Init

           INPUT
            otherReplica        : IReplica*'''
        return super(IReplicaEdit, self).Init(otherReplica)
    ConnectionInfo = property(None, putref_ConnectionInfo, None)
    Description = property(None, putref_Description, None)
    Name = property(None, put_Name, None)
    Owner = property(None, put_Owner, None)
    ParentID = property(None, put_ParentID, None)
    ReplicaDatasets = property(None, putref_ReplicaDatasets, None)
    ReplicaDate = property(None, put_ReplicaDate, None)
    ReplicaGuid = property(None, put_ReplicaGuid, None)
    ReplicaID = property(None, put_ReplicaID, None)
    ReplicaRole = property(None, put_ReplicaRole, None)
    Version = property(None, put_Version, None)

class IReplicaEdit2(_esriGeoDatabase.IReplicaEdit2):
    _IID = uuid.UUID('e4f414d0-398a-47b8-8176-daa6860cdd77')

    def __init__(self, *args, **kw):
        super(IReplicaEdit2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SibMyGenNumber(self, _arg1):
        '''Method IReplicaEdit2.put_SibMyGenNumber

           INPUT
            _arg1               : long'''
        return super(IReplicaEdit2, self).put_SibMyGenNumber(_arg1)
    def putref_AllReplicaDatasets(self, _arg1):
        '''Method IReplicaEdit2.putref_AllReplicaDatasets

           INPUT
            _arg1               : IEnumReplicaDataset*'''
        return super(IReplicaEdit2, self).putref_AllReplicaDatasets(_arg1)
    def put_AccessType(self, _arg1):
        '''Method IReplicaEdit2.put_AccessType

           INPUT
            _arg1               : esriReplicaAccessType'''
        return super(IReplicaEdit2, self).put_AccessType(_arg1)
    def put_ReconcilePolicyType(self, _arg1):
        '''Method IReplicaEdit2.put_ReconcilePolicyType

           INPUT
            _arg1               : esriReplicaReconcilePolicyType'''
        return super(IReplicaEdit2, self).put_ReconcilePolicyType(_arg1)
    def put_SibConnectionString(self, _arg1):
        '''Method IReplicaEdit2.put_SibConnectionString

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit2, self).put_SibConnectionString(_arg1)
    def put_ReplicaID(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaID (from IReplicaEdit)

           INPUT
            _arg1               : long'''
        return super(IReplicaEdit2, self).put_ReplicaID(_arg1)
    def put_Name(self, _arg1):
        '''Method IReplicaEdit.put_Name (from IReplicaEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit2, self).put_Name(_arg1)
    def put_Owner(self, _arg1):
        '''Method IReplicaEdit.put_Owner (from IReplicaEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit2, self).put_Owner(_arg1)
    def put_Version(self, _arg1):
        '''Method IReplicaEdit.put_Version (from IReplicaEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit2, self).put_Version(_arg1)
    def put_ParentID(self, _arg1):
        '''Method IReplicaEdit.put_ParentID (from IReplicaEdit)

           INPUT
            _arg1               : long'''
        return super(IReplicaEdit2, self).put_ParentID(_arg1)
    def put_ReplicaDate(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaDate (from IReplicaEdit)

           INPUT
            _arg1               : double'''
        return super(IReplicaEdit2, self).put_ReplicaDate(_arg1)
    def put_ReplicaGuid(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaGuid (from IReplicaEdit)

           INPUT
            _arg1               : BSTR'''
        return super(IReplicaEdit2, self).put_ReplicaGuid(_arg1)
    def putref_Description(self, _arg1):
        '''Method IReplicaEdit.putref_Description (from IReplicaEdit)

           INPUT
            _arg1               : IReplicaDescription*'''
        return super(IReplicaEdit2, self).putref_Description(_arg1)
    def putref_ConnectionInfo(self, _arg1):
        '''Method IReplicaEdit.putref_ConnectionInfo (from IReplicaEdit)

           INPUT
            _arg1               : IWorkspaceName*'''
        return super(IReplicaEdit2, self).putref_ConnectionInfo(_arg1)
    def put_ReplicaRole(self, _arg1):
        '''Method IReplicaEdit.put_ReplicaRole (from IReplicaEdit)

           INPUT
            _arg1               : esriReplicaType'''
        return super(IReplicaEdit2, self).put_ReplicaRole(_arg1)
    def putref_ReplicaDatasets(self, _arg1):
        '''Method IReplicaEdit.putref_ReplicaDatasets (from IReplicaEdit)

           INPUT
            _arg1               : IEnumReplicaDataset*'''
        return super(IReplicaEdit2, self).putref_ReplicaDatasets(_arg1)
    def Init(self, otherReplica):
        '''Method IReplicaEdit.Init (from IReplicaEdit)

           INPUT
            otherReplica        : IReplica*'''
        return super(IReplicaEdit2, self).Init(otherReplica)
    AccessType = property(None, put_AccessType, None)
    AllReplicaDatasets = property(None, putref_AllReplicaDatasets, None)
    ConnectionInfo = property(None, putref_ConnectionInfo, None)
    Description = property(None, putref_Description, None)
    Name = property(None, put_Name, None)
    Owner = property(None, put_Owner, None)
    ParentID = property(None, put_ParentID, None)
    ReconcilePolicyType = property(None, put_ReconcilePolicyType, None)
    ReplicaDatasets = property(None, putref_ReplicaDatasets, None)
    ReplicaDate = property(None, put_ReplicaDate, None)
    ReplicaGuid = property(None, put_ReplicaGuid, None)
    ReplicaID = property(None, put_ReplicaID, None)
    ReplicaRole = property(None, put_ReplicaRole, None)
    SibConnectionString = property(None, put_SibConnectionString, None)
    SibMyGenNumber = property(None, put_SibMyGenNumber, None)
    Version = property(None, put_Version, None)

class IWorkspaceReplicaEvents(_esriGeoDatabase.IWorkspaceReplicaEvents):
    _IID = uuid.UUID('56df3b04-8684-4432-9a21-cb5e72d73e56')
    def BeforeCreateChildReplica(self, Name, parentReplicaType, rDescription, childWorkspace):
        '''Method IWorkspaceReplicaEvents.BeforeCreateChildReplica

           INPUTS
            Name                : BSTR
            parentReplicaType   : esriReplicaType
            rDescription        : IReplicaDescription*
            childWorkspace      : IWorkspace*'''
        return super(IWorkspaceReplicaEvents, self).BeforeCreateChildReplica(Name, parentReplicaType, rDescription, childWorkspace)
    def AfterCreateChildReplica(self, Name, parentReplicaType, rDescription, childWorkspace):
        '''Method IWorkspaceReplicaEvents.AfterCreateChildReplica

           INPUTS
            Name                : BSTR
            parentReplicaType   : esriReplicaType
            rDescription        : IReplicaDescription*
            childWorkspace      : IWorkspace*'''
        return super(IWorkspaceReplicaEvents, self).AfterCreateChildReplica(Name, parentReplicaType, rDescription, childWorkspace)

class IGPReplica2(_esriGeoDatabase.IGPReplica2):
    _IID = uuid.UUID('4202a324-d1de-46d9-8469-f14ed363f12c')

    def __init__(self, *args, **kw):
        super(IGPReplica2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseArchiving(self, UseArchiving):
        '''Method IGPReplica2.put_UseArchiving

           INPUT
            UseArchiving        : VARIANT_BOOL'''
        return super(IGPReplica2, self).put_UseArchiving(UseArchiving)
    def get_UseArchiving(self):
        '''Method IGPReplica2.get_UseArchiving

           OUTPUT
            UseArchiving        : VARIANT_BOOL*'''
        return super(IGPReplica2, self).get_UseArchiving()
    def get_MyTime(self):
        '''Method IGPReplica2.get_MyTime

           OUTPUT
            MyTime              : VARIANT*'''
        return super(IGPReplica2, self).get_MyTime()
    def put_MyTime(self, MyTime):
        '''Method IGPReplica2.put_MyTime

           INPUT
            MyTime              : VARIANT'''
        return super(IGPReplica2, self).put_MyTime(MyTime)
    def get_SibTime(self):
        '''Method IGPReplica2.get_SibTime

           OUTPUT
            SibTime             : VARIANT*'''
        return super(IGPReplica2, self).get_SibTime()
    def put_SibTime(self, SibTime):
        '''Method IGPReplica2.put_SibTime

           INPUT
            SibTime             : VARIANT'''
        return super(IGPReplica2, self).put_SibTime(SibTime)
    def get_SibMyTime(self):
        '''Method IGPReplica2.get_SibMyTime

           OUTPUT
            SibMyTime           : VARIANT*'''
        return super(IGPReplica2, self).get_SibMyTime()
    def put_SibMyTime(self, SibMyTime):
        '''Method IGPReplica2.put_SibMyTime

           INPUT
            SibMyTime           : VARIANT'''
        return super(IGPReplica2, self).put_SibMyTime(SibMyTime)
    def put_InTransportFile(self, InTransportFile):
        '''Method IGPReplica2.put_InTransportFile

           INPUT
            InTransportFile     : VARIANT_BOOL'''
        return super(IGPReplica2, self).put_InTransportFile(InTransportFile)
    def get_InTransportFile(self):
        '''Method IGPReplica2.get_InTransportFile

           OUTPUT
            InTransportFile     : VARIANT_BOOL*'''
        return super(IGPReplica2, self).get_InTransportFile()
    def put_ResolveDatasetNameConflicts(self, ResolveDatasetNameConflicts):
        '''Method IGPReplica2.put_ResolveDatasetNameConflicts

           INPUT
            ResolveDatasetNameConflicts: VARIANT_BOOL'''
        return super(IGPReplica2, self).put_ResolveDatasetNameConflicts(ResolveDatasetNameConflicts)
    def get_ResolveDatasetNameConflicts(self):
        '''Method IGPReplica2.get_ResolveDatasetNameConflicts

           OUTPUT
            ResolveDatasetNameConflicts: VARIANT_BOOL*'''
        return super(IGPReplica2, self).get_ResolveDatasetNameConflicts()
    def Init(self, Replica):
        '''Method IGPReplica.Init (from IGPReplica)

           INPUT
            Replica             : IReplica*'''
        return super(IGPReplica2, self).Init(Replica)
    def put_Name(self, ReplicaName):
        '''Method IGPReplica.put_Name (from IGPReplica)

           INPUT
            ReplicaName         : BSTR'''
        return super(IGPReplica2, self).put_Name(ReplicaName)
    def get_Name(self):
        '''Method IGPReplica.get_Name (from IGPReplica)

           OUTPUT
            ReplicaName         : BSTR*'''
        return super(IGPReplica2, self).get_Name()
    def put_ID(self, ReplicaID):
        '''Method IGPReplica.put_ID (from IGPReplica)

           INPUT
            ReplicaID           : long'''
        return super(IGPReplica2, self).put_ID(ReplicaID)
    def get_ID(self):
        '''Method IGPReplica.get_ID (from IGPReplica)

           OUTPUT
            ReplicaID           : long*'''
        return super(IGPReplica2, self).get_ID()
    def put_GUID(self, GUID):
        '''Method IGPReplica.put_GUID (from IGPReplica)

           INPUT
            GUID                : BSTR'''
        return super(IGPReplica2, self).put_GUID(GUID)
    def get_GUID(self):
        '''Method IGPReplica.get_GUID (from IGPReplica)

           OUTPUT
            GUID                : BSTR*'''
        return super(IGPReplica2, self).get_GUID()
    def put_Role(self, ReplicaRole):
        '''Method IGPReplica.put_Role (from IGPReplica)

           INPUT
            ReplicaRole         : esriReplicaRole'''
        return super(IGPReplica2, self).put_Role(ReplicaRole)
    def get_Role(self):
        '''Method IGPReplica.get_Role (from IGPReplica)

           OUTPUT
            ReplicaRole         : esriReplicaRole*'''
        return super(IGPReplica2, self).get_Role()
    def put_AccessType(self, AccessType):
        '''Method IGPReplica.put_AccessType (from IGPReplica)

           INPUT
            AccessType          : esriReplicaAccessType'''
        return super(IGPReplica2, self).put_AccessType(AccessType)
    def get_AccessType(self):
        '''Method IGPReplica.get_AccessType (from IGPReplica)

           OUTPUT
            AccessType          : esriReplicaAccessType*'''
        return super(IGPReplica2, self).get_AccessType()
    def put_CreationDate(self, ReplicaRole):
        '''Method IGPReplica.put_CreationDate (from IGPReplica)

           INPUT
            ReplicaRole         : VARIANT'''
        return super(IGPReplica2, self).put_CreationDate(ReplicaRole)
    def get_CreationDate(self):
        '''Method IGPReplica.get_CreationDate (from IGPReplica)

           OUTPUT
            ReplicaRole         : VARIANT*'''
        return super(IGPReplica2, self).get_CreationDate()
    def put_ReplicaVersion(self, ReplicaVersion):
        '''Method IGPReplica.put_ReplicaVersion (from IGPReplica)

           INPUT
            ReplicaVersion      : BSTR'''
        return super(IGPReplica2, self).put_ReplicaVersion(ReplicaVersion)
    def get_ReplicaVersion(self):
        '''Method IGPReplica.get_ReplicaVersion (from IGPReplica)

           OUTPUT
            ReplicaVersion      : BSTR*'''
        return super(IGPReplica2, self).get_ReplicaVersion()
    def put_MyGenerationNumber(self, pMyGenerationNumber):
        '''Method IGPReplica.put_MyGenerationNumber (from IGPReplica)

           INPUT
            pMyGenerationNumber : long'''
        return super(IGPReplica2, self).put_MyGenerationNumber(pMyGenerationNumber)
    def get_MyGenerationNumber(self):
        '''Method IGPReplica.get_MyGenerationNumber (from IGPReplica)

           OUTPUT
            pMyGenerationNumber : long*'''
        return super(IGPReplica2, self).get_MyGenerationNumber()
    def put_SibGenerationNumber(self, pSibGenerationNumber):
        '''Method IGPReplica.put_SibGenerationNumber (from IGPReplica)

           INPUT
            pSibGenerationNumber: long'''
        return super(IGPReplica2, self).put_SibGenerationNumber(pSibGenerationNumber)
    def get_SibGenerationNumber(self):
        '''Method IGPReplica.get_SibGenerationNumber (from IGPReplica)

           OUTPUT
            pSibGenerationNumber: long*'''
        return super(IGPReplica2, self).get_SibGenerationNumber()
    def put_SibMyGenerationNumber(self, pSibMyGenerationNumber):
        '''Method IGPReplica.put_SibMyGenerationNumber (from IGPReplica)

           INPUT
            pSibMyGenerationNumber: long'''
        return super(IGPReplica2, self).put_SibMyGenerationNumber(pSibMyGenerationNumber)
    def get_SibMyGenerationNumber(self):
        '''Method IGPReplica.get_SibMyGenerationNumber (from IGPReplica)

           OUTPUT
            pSibMyGenerationNumber: long*'''
        return super(IGPReplica2, self).get_SibMyGenerationNumber()
    def put_ReplicaState(self, ReplicaState):
        '''Method IGPReplica.put_ReplicaState (from IGPReplica)

           INPUT
            ReplicaState        : esriReplicaState'''
        return super(IGPReplica2, self).put_ReplicaState(ReplicaState)
    def get_ReplicaState(self):
        '''Method IGPReplica.get_ReplicaState (from IGPReplica)

           OUTPUT
            ReplicaState        : esriReplicaState*'''
        return super(IGPReplica2, self).get_ReplicaState()
    def put_SibConnectionString(self, SibConnectionString):
        '''Method IGPReplica.put_SibConnectionString (from IGPReplica)

           INPUT
            SibConnectionString : BSTR'''
        return super(IGPReplica2, self).put_SibConnectionString(SibConnectionString)
    def get_SibConnectionString(self):
        '''Method IGPReplica.get_SibConnectionString (from IGPReplica)

           OUTPUT
            SibConnectionString : BSTR*'''
        return super(IGPReplica2, self).get_SibConnectionString()
    def putref_ReplicaDescription(self, ReplicaDescription):
        '''Method IGPReplica.putref_ReplicaDescription (from IGPReplica)

           INPUT
            ReplicaDescription  : IGPReplicaDescription*'''
        return super(IGPReplica2, self).putref_ReplicaDescription(ReplicaDescription)
    def get_ReplicaDescription(self):
        '''Method IGPReplica.get_ReplicaDescription (from IGPReplica)

           OUTPUT
            ReplicaDescription  : IGPReplicaDescription**'''
        return super(IGPReplica2, self).get_ReplicaDescription()
    def put_ReconcilePolicy(self, policy):
        '''Method IGPReplica.put_ReconcilePolicy (from IGPReplica)

           INPUT
            policy              : esriReplicaReconcilePolicyType'''
        return super(IGPReplica2, self).put_ReconcilePolicy(policy)
    def get_ReconcilePolicy(self):
        '''Method IGPReplica.get_ReconcilePolicy (from IGPReplica)

           OUTPUT
            policy              : esriReplicaReconcilePolicyType*'''
        return super(IGPReplica2, self).get_ReconcilePolicy()
    def put_HasConflicts(self, HasConflicts):
        '''Method IGPReplica.put_HasConflicts (from IGPReplica)

           INPUT
            HasConflicts        : VARIANT_BOOL'''
        return super(IGPReplica2, self).put_HasConflicts(HasConflicts)
    def get_HasConflicts(self):
        '''Method IGPReplica.get_HasConflicts (from IGPReplica)

           OUTPUT
            HasConflicts        : VARIANT_BOOL*'''
        return super(IGPReplica2, self).get_HasConflicts()
    AccessType = property(get_AccessType, put_AccessType, None)
    CreationDate = property(get_CreationDate, put_CreationDate, None)
    GUID = property(get_GUID, put_GUID, None)
    HasConflicts = property(get_HasConflicts, put_HasConflicts, None)
    ID = property(get_ID, put_ID, None)
    InTransportFile = property(get_InTransportFile, put_InTransportFile, None)
    MyGenerationNumber = property(get_MyGenerationNumber, put_MyGenerationNumber, None)
    MyTime = property(get_MyTime, put_MyTime, None)
    Name = property(get_Name, put_Name, None)
    ReconcilePolicy = property(get_ReconcilePolicy, put_ReconcilePolicy, None)
    ReplicaDescription = property(get_ReplicaDescription, putref_ReplicaDescription, None)
    ReplicaState = property(get_ReplicaState, put_ReplicaState, None)
    ReplicaVersion = property(get_ReplicaVersion, put_ReplicaVersion, None)
    ResolveDatasetNameConflicts = property(get_ResolveDatasetNameConflicts, put_ResolveDatasetNameConflicts, None)
    Role = property(get_Role, put_Role, None)
    SibConnectionString = property(get_SibConnectionString, put_SibConnectionString, None)
    SibGenerationNumber = property(get_SibGenerationNumber, put_SibGenerationNumber, None)
    SibMyGenerationNumber = property(get_SibMyGenerationNumber, put_SibMyGenerationNumber, None)
    SibMyTime = property(get_SibMyTime, put_SibMyTime, None)
    SibTime = property(get_SibTime, put_SibTime, None)
    UseArchiving = property(get_UseArchiving, put_UseArchiving, None)

class IGPReplicas(_esriGeoDatabase.IGPReplicas):
    _IID = uuid.UUID('12ae744e-eb1d-46f5-8e94-650ea55bc9f9')
    def get_Count(self):
        '''Method IGPReplicas.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGPReplicas, self).get_Count()
    def get_Element(self, Index):
        '''Method IGPReplicas.get_Element

           INPUT
            Index               : long

           OUTPUT
            Replica             : IGPReplica**'''
        return super(IGPReplicas, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGPReplicas.Remove

           INPUT
            Index               : long'''
        return super(IGPReplicas, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGPReplicas.RemoveAll'''
        return super(IGPReplicas, self).RemoveAll()
    def Add(self, Replica):
        '''Method IGPReplicas.Add

           INPUT
            Replica             : IGPReplica*'''
        return super(IGPReplicas, self).Add(Replica)
    def Insert(self, Index, Replica):
        '''Method IGPReplicas.Insert

           INPUTS
            Index               : long
            Replica             : IGPReplica*'''
        return super(IGPReplicas, self).Insert(Index, Replica)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ILocatorWorkspaceName(_esriGeoDatabase.ILocatorWorkspaceName):
    _IID = uuid.UUID('fc747401-39c0-4842-8635-6db6f96717e5')

    def __init__(self, *args, **kw):
        super(ILocatorWorkspaceName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Path(self):
        '''Method ILocatorWorkspaceName.get_Path

           OUTPUT
            Path                : BSTR*'''
        return super(ILocatorWorkspaceName, self).get_Path()
    def put_Path(self, Path):
        '''Method ILocatorWorkspaceName.put_Path

           INPUT
            Path                : BSTR'''
        return super(ILocatorWorkspaceName, self).put_Path(Path)
    def get_WorkspaceName(self):
        '''Method ILocatorWorkspaceName.get_WorkspaceName

           OUTPUT
            wksName             : IWorkspaceName**'''
        return super(ILocatorWorkspaceName, self).get_WorkspaceName()
    def putref_WorkspaceName(self, wksName):
        '''Method ILocatorWorkspaceName.putref_WorkspaceName

           INPUT
            wksName             : IWorkspaceName*'''
        return super(ILocatorWorkspaceName, self).putref_WorkspaceName(wksName)
    def get_Type(self):
        '''Method ILocatorWorkspaceName.get_Type

           OUTPUT
            locWksType          : esriLocatorWorkspaceType*'''
        return super(ILocatorWorkspaceName, self).get_Type()
    Path = property(get_Path, put_Path, None)
    Type = property(get_Type, None, None)
    WorkspaceName = property(get_WorkspaceName, putref_WorkspaceName, None)

class ILocatorName(_esriGeoDatabase.ILocatorName):
    _IID = uuid.UUID('837a9cf2-88c9-11d3-9f66-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(ILocatorName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILocatorName.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILocatorName, self).get_Name()
    def put_Name(self, Name):
        '''Method ILocatorName.put_Name

           INPUT
            Name                : BSTR'''
        return super(ILocatorName, self).put_Name(Name)
    def get_Description(self):
        '''Method ILocatorName.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(ILocatorName, self).get_Description()
    def put_Description(self, Description):
        '''Method ILocatorName.put_Description

           INPUT
            Description         : BSTR'''
        return super(ILocatorName, self).put_Description(Description)
    def get_Category(self):
        '''Method ILocatorName.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(ILocatorName, self).get_Category()
    def put_Category(self, Category):
        '''Method ILocatorName.put_Category

           INPUT
            Category            : BSTR'''
        return super(ILocatorName, self).put_Category(Category)
    def get_Style(self):
        '''Method ILocatorName.get_Style

           OUTPUT
            isStyle             : VARIANT_BOOL*'''
        return super(ILocatorName, self).get_Style()
    def put_Style(self, isStyle):
        '''Method ILocatorName.put_Style

           INPUT
            isStyle             : VARIANT_BOOL'''
        return super(ILocatorName, self).put_Style(isStyle)
    def get_LocatorWorkspaceName(self):
        '''Method ILocatorName.get_LocatorWorkspaceName

           OUTPUT
            LocatorWorkspaceName: ILocatorWorkspaceName**'''
        return super(ILocatorName, self).get_LocatorWorkspaceName()
    def putref_LocatorWorkspaceName(self, LocatorWorkspaceName):
        '''Method ILocatorName.putref_LocatorWorkspaceName

           INPUT
            LocatorWorkspaceName: ILocatorWorkspaceName*'''
        return super(ILocatorName, self).putref_LocatorWorkspaceName(LocatorWorkspaceName)
    Category = property(get_Category, put_Category, None)
    Description = property(get_Description, put_Description, None)
    LocatorWorkspaceName = property(get_LocatorWorkspaceName, putref_LocatorWorkspaceName, None)
    Name = property(get_Name, put_Name, None)
    Style = property(get_Style, put_Style, None)

class IEnumLocatorName(_esriGeoDatabase.IEnumLocatorName):
    _IID = uuid.UUID('8ddaeee6-8b07-11d3-9f69-00c04f6bdf06')
    def Next(self):
        '''Method IEnumLocatorName.Next

           OUTPUT
            outLocatorName      : ILocatorName**'''
        return super(IEnumLocatorName, self).Next()
    def __iter__(self):
        try:
            super(IEnumLocatorName, self).Reset()
            val = super(IEnumLocatorName, self).Next()
            while val:
                yield val
                val = super(IEnumLocatorName, self).Next()
        except:
            pass
    def Previous(self):
        '''Method IEnumLocatorName.Previous

           OUTPUT
            outLocatorName      : ILocatorName**'''
        return super(IEnumLocatorName, self).Previous()
    def Reset(self):
        '''Method IEnumLocatorName.Reset'''
        return super(IEnumLocatorName, self).Reset()
    def Clone(self):
        '''Method IEnumLocatorName.Clone

           OUTPUT
            outNameEnumerator   : IEnumLocatorName**'''
        return super(IEnumLocatorName, self).Clone()
    def get_Count(self):
        '''Method IEnumLocatorName.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEnumLocatorName, self).get_Count()
    Count = property(get_Count, None, None)

class IWorkspaceDefinition2(_esriGeoDatabase.IWorkspaceDefinition2):
    _IID = uuid.UUID('fb6b7e43-30f9-4c2f-9920-d145ce9f92db')

    def __init__(self, *args, **kw):
        super(IWorkspaceDefinition2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_GPReplica(self, Replica):
        '''Method IWorkspaceDefinition2.putref_GPReplica

           INPUT
            Replica             : IGPReplica*'''
        return super(IWorkspaceDefinition2, self).putref_GPReplica(Replica)
    def get_GPReplica(self):
        '''Method IWorkspaceDefinition2.get_GPReplica

           OUTPUT
            Replica             : IGPReplica**'''
        return super(IWorkspaceDefinition2, self).get_GPReplica()
    def get_WorkspaceType(self):
        '''Method IWorkspaceDefinition.get_WorkspaceType (from IWorkspaceDefinition)

           OUTPUT
            WorkspaceType       : esriWorkspaceType*'''
        return super(IWorkspaceDefinition2, self).get_WorkspaceType()
    def put_WorkspaceType(self, WorkspaceType):
        '''Method IWorkspaceDefinition.put_WorkspaceType (from IWorkspaceDefinition)

           INPUT
            WorkspaceType       : esriWorkspaceType'''
        return super(IWorkspaceDefinition2, self).put_WorkspaceType(WorkspaceType)
    def get_Version(self):
        '''Method IWorkspaceDefinition.get_Version (from IWorkspaceDefinition)

           OUTPUT
            workspaceVersion    : BSTR*'''
        return super(IWorkspaceDefinition2, self).get_Version()
    def put_Version(self, workspaceVersion):
        '''Method IWorkspaceDefinition.put_Version (from IWorkspaceDefinition)

           INPUT
            workspaceVersion    : BSTR'''
        return super(IWorkspaceDefinition2, self).put_Version(workspaceVersion)
    def get_Domains(self):
        '''Method IWorkspaceDefinition.get_Domains (from IWorkspaceDefinition)

           OUTPUT
            Domains             : IArray**'''
        return super(IWorkspaceDefinition2, self).get_Domains()
    def putref_Domains(self, Domains):
        '''Method IWorkspaceDefinition.putref_Domains (from IWorkspaceDefinition)

           INPUT
            Domains             : IArray*'''
        return super(IWorkspaceDefinition2, self).putref_Domains(Domains)
    def get_Children(self):
        '''Method IWorkspaceDefinition.get_Children (from IWorkspaceDefinition)

           OUTPUT
            DataElements        : IArray**'''
        return super(IWorkspaceDefinition2, self).get_Children()
    def putref_Children(self, DataElements):
        '''Method IWorkspaceDefinition.putref_Children (from IWorkspaceDefinition)

           INPUT
            DataElements        : IArray*'''
        return super(IWorkspaceDefinition2, self).putref_Children(DataElements)
    Children = property(get_Children, putref_Children, None)
    Domains = property(get_Domains, putref_Domains, None)
    GPReplica = property(get_GPReplica, putref_GPReplica, None)
    Version = property(get_Version, put_Version, None)
    WorkspaceType = property(get_WorkspaceType, put_WorkspaceType, None)

class IEnumDataset(_esriGeoDatabase.IEnumDataset):
    _IID = uuid.UUID('2d04c044-7766-11d0-b77d-00805f7ced21')
    def Next(self):
        '''Method IEnumDataset.Next

           OUTPUT
            item                : IDataset**'''
        return super(IEnumDataset, self).Next()
    def __iter__(self):
        try:
            super(IEnumDataset, self).Reset()
            val = super(IEnumDataset, self).Next()
            while val:
                yield val
                val = super(IEnumDataset, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumDataset.Reset'''
        return super(IEnumDataset, self).Reset()

class IDataset(_esriGeoDatabase.IDataset):
    _IID = uuid.UUID('2d04c042-7766-11d0-b77d-00805f7ced21')

    def __init__(self, *args, **kw):
        super(IDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IDataset.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDataset, self).get_Name()
    def get_FullName(self):
        '''Method IDataset.get_FullName

           OUTPUT
            Name                : IName**'''
        return super(IDataset, self).get_FullName()
    def get_BrowseName(self):
        '''Method IDataset.get_BrowseName

           OUTPUT
            Name                : BSTR*'''
        return super(IDataset, self).get_BrowseName()
    def put_BrowseName(self, Name):
        '''Method IDataset.put_BrowseName

           INPUT
            Name                : BSTR'''
        return super(IDataset, self).put_BrowseName(Name)
    def get_Type(self):
        '''Method IDataset.get_Type

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IDataset, self).get_Type()
    def get_Category(self):
        '''Method IDataset.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IDataset, self).get_Category()
    def get_Subsets(self):
        '''Method IDataset.get_Subsets

           OUTPUT
            Datasets            : IEnumDataset**'''
        return super(IDataset, self).get_Subsets()
    def get_Workspace(self):
        '''Method IDataset.get_Workspace

           OUTPUT
            database            : IWorkspace**'''
        return super(IDataset, self).get_Workspace()
    def get_PropertySet(self):
        '''Method IDataset.get_PropertySet

           OUTPUT
            props               : IPropertySet**'''
        return super(IDataset, self).get_PropertySet()
    def CanCopy(self):
        '''Method IDataset.CanCopy

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IDataset, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IDataset.Copy

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            CopyDataset         : IDataset**'''
        return super(IDataset, self).Copy(copyName, copyWorkspace)
    def CanDelete(self):
        '''Method IDataset.CanDelete

           OUTPUT
            CanDelete           : VARIANT_BOOL*'''
        return super(IDataset, self).CanDelete()
    def Delete(self):
        '''Method IDataset.Delete'''
        return super(IDataset, self).Delete()
    def CanRename(self):
        '''Method IDataset.CanRename

           OUTPUT
            CanRename           : VARIANT_BOOL*'''
        return super(IDataset, self).CanRename()
    def Rename(self, Name):
        '''Method IDataset.Rename

           INPUT
            Name                : BSTR'''
        return super(IDataset, self).Rename(Name)
    BrowseName = property(get_BrowseName, put_BrowseName, None)
    Category = property(get_Category, None, None)
    FullName = property(get_FullName, None, None)
    Name = property(get_Name, None, None)
    PropertySet = property(get_PropertySet, None, None)
    Subsets = property(get_Subsets, None, None)
    Type = property(get_Type, None, None)
    Workspace = property(get_Workspace, None, None)

class IWorkspaceEvents(_esriGeoDatabase.IWorkspaceEvents):
    _IID = uuid.UUID('da10c1c4-09a3-11d4-9faa-00c04f6bdf0c')
    def OnCreateDataset(self, Dataset):
        '''Method IWorkspaceEvents.OnCreateDataset

           INPUT
            Dataset             : IDataset*'''
        return super(IWorkspaceEvents, self).OnCreateDataset(Dataset)
    def OnRenameDataset(self, Dataset, oldName, newName):
        '''Method IWorkspaceEvents.OnRenameDataset

           INPUTS
            Dataset             : IDataset*
            oldName             : BSTR
            newName             : BSTR'''
        return super(IWorkspaceEvents, self).OnRenameDataset(Dataset, oldName, newName)
    def OnDeleteDataset(self, Dataset):
        '''Method IWorkspaceEvents.OnDeleteDataset

           INPUT
            Dataset             : IDataset*'''
        return super(IWorkspaceEvents, self).OnDeleteDataset(Dataset)

class IWorkspaceEvents2(_esriGeoDatabase.IWorkspaceEvents2):
    _IID = uuid.UUID('aa21c2d4-12a3-d1d4-901a-80305f60dfca')
    def OnModifyDataset(self, Dataset):
        '''Method IWorkspaceEvents2.OnModifyDataset

           INPUT
            Dataset             : IDataset*'''
        return super(IWorkspaceEvents2, self).OnModifyDataset(Dataset)
    def OnCreateDataset(self, Dataset):
        '''Method IWorkspaceEvents.OnCreateDataset (from IWorkspaceEvents)

           INPUT
            Dataset             : IDataset*'''
        return super(IWorkspaceEvents2, self).OnCreateDataset(Dataset)
    def OnRenameDataset(self, Dataset, oldName, newName):
        '''Method IWorkspaceEvents.OnRenameDataset (from IWorkspaceEvents)

           INPUTS
            Dataset             : IDataset*
            oldName             : BSTR
            newName             : BSTR'''
        return super(IWorkspaceEvents2, self).OnRenameDataset(Dataset, oldName, newName)
    def OnDeleteDataset(self, Dataset):
        '''Method IWorkspaceEvents.OnDeleteDataset (from IWorkspaceEvents)

           INPUT
            Dataset             : IDataset*'''
        return super(IWorkspaceEvents2, self).OnDeleteDataset(Dataset)

class IDatasetContainer(_esriGeoDatabase.IDatasetContainer):
    _IID = uuid.UUID('bd770969-efb7-11d3-9fa2-00c04f6bdf0c')
    def AddDataset(self, datasetToAdd):
        '''Method IDatasetContainer.AddDataset

           INPUT
            datasetToAdd        : IDataset*'''
        return super(IDatasetContainer, self).AddDataset(datasetToAdd)

class IRasterDataset(_esriGeoDatabase.IRasterDataset):
    _IID = uuid.UUID('7aca3d01-0629-11d2-8d24-0000f8780535')
    def get_Format(self):
        '''Method IRasterDataset.get_Format

           OUTPUT
            Format              : BSTR*'''
        return super(IRasterDataset, self).get_Format()
    def get_SensorType(self):
        '''Method IRasterDataset.get_SensorType

           OUTPUT
            SensorType          : BSTR*'''
        return super(IRasterDataset, self).get_SensorType()
    def get_CompressionType(self):
        '''Method IRasterDataset.get_CompressionType

           OUTPUT
            comp                : BSTR*'''
        return super(IRasterDataset, self).get_CompressionType()
    def CreateDefaultRaster(self):
        '''Method IRasterDataset.CreateDefaultRaster

           OUTPUT
            ras                 : IRaster**'''
        return super(IRasterDataset, self).CreateDefaultRaster()
    def CanCopy(self):
        '''Method IRasterDataset.CanCopy

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IRasterDataset, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IRasterDataset.Copy

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            CopyDataset         : IDataset**'''
        return super(IRasterDataset, self).Copy(copyName, copyWorkspace)
    def OpenFromFile(self, Path):
        '''Method IRasterDataset.OpenFromFile

           INPUT
            Path                : BSTR'''
        return super(IRasterDataset, self).OpenFromFile(Path)
    def PrecalculateStats(self, index_list):
        '''Method IRasterDataset.PrecalculateStats

           INPUT
            index_list          : VARIANT'''
        return super(IRasterDataset, self).PrecalculateStats(index_list)
    def get_CompleteName(self):
        '''Method IRasterDataset.get_CompleteName

           OUTPUT
            CompleteName        : BSTR*'''
        return super(IRasterDataset, self).get_CompleteName()
    def BasicOpenFromFile(self, Path):
        '''Method IRasterDataset.BasicOpenFromFile

           INPUT
            Path                : BSTR'''
        return super(IRasterDataset, self).BasicOpenFromFile(Path)
    CompleteName = property(get_CompleteName, None, None)
    CompressionType = property(get_CompressionType, None, None)
    Format = property(get_Format, None, None)
    SensorType = property(get_SensorType, None, None)

class IRasterWorkspaceEx(_esriGeoDatabase.IRasterWorkspaceEx):
    _IID = uuid.UUID('c8778a65-0e27-4cb5-9a50-a7471b398ea7')
    def CreateRasterDataset(self, Name, numBands, PixelType, StorageDef, ConfigKeyword, RasterDef, GeometryDef):
        '''Method IRasterWorkspaceEx.CreateRasterDataset

           INPUTS
            Name                : BSTR
            numBands            : long
            PixelType           : rstPixelType
            StorageDef          : IRasterStorageDef*
            ConfigKeyword       : BSTR
            RasterDef           : IRasterDef*
            GeometryDef         : IGeometryDef*

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(IRasterWorkspaceEx, self).CreateRasterDataset(Name, numBands, PixelType, StorageDef, ConfigKeyword, RasterDef, GeometryDef)
    def SaveAsRasterDataset(self, Name, Raster, StorageDef, ConfigKeyword, RasterDef, GeometryDef):
        '''Method IRasterWorkspaceEx.SaveAsRasterDataset

           INPUTS
            Name                : BSTR
            Raster              : IRaster*
            StorageDef          : IRasterStorageDef*
            ConfigKeyword       : BSTR
            RasterDef           : IRasterDef*
            GeometryDef         : IGeometryDef*

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(IRasterWorkspaceEx, self).SaveAsRasterDataset(Name, Raster, StorageDef, ConfigKeyword, RasterDef, GeometryDef)
    def OpenRasterDataset(self, Name):
        '''Method IRasterWorkspaceEx.OpenRasterDataset

           INPUT
            Name                : BSTR

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(IRasterWorkspaceEx, self).OpenRasterDataset(Name)
    def DeleteRasterDataset(self, Name):
        '''Method IRasterWorkspaceEx.DeleteRasterDataset

           INPUT
            Name                : BSTR'''
        return super(IRasterWorkspaceEx, self).DeleteRasterDataset(Name)
    def RegisterAsRasterDataset(self, Name, GeometryDef):
        '''Method IRasterWorkspaceEx.RegisterAsRasterDataset

           INPUTS
            Name                : BSTR
            GeometryDef         : IGeometryDef*'''
        return super(IRasterWorkspaceEx, self).RegisterAsRasterDataset(Name, GeometryDef)
    def CreateRasterCatalog(self, Name, Fields, ShapeFieldName, RasterFieldName, ConfigKeyword):
        '''Method IRasterWorkspaceEx.CreateRasterCatalog

           INPUTS
            Name                : BSTR
            Fields              : IFields*
            ShapeFieldName      : BSTR
            RasterFieldName     : BSTR
            ConfigKeyword       : BSTR

           OUTPUT
            Catalog             : IRasterCatalog**'''
        return super(IRasterWorkspaceEx, self).CreateRasterCatalog(Name, Fields, ShapeFieldName, RasterFieldName, ConfigKeyword)
    def OpenRasterCatalog(self, Name):
        '''Method IRasterWorkspaceEx.OpenRasterCatalog

           INPUT
            Name                : BSTR

           OUTPUT
            Catalog             : IRasterCatalog**'''
        return super(IRasterWorkspaceEx, self).OpenRasterCatalog(Name)
    def DeleteRasterCatalog(self, Name):
        '''Method IRasterWorkspaceEx.DeleteRasterCatalog

           INPUT
            Name                : BSTR'''
        return super(IRasterWorkspaceEx, self).DeleteRasterCatalog(Name)
    def RegisterAsRasterCatalog(self, Name, OIDFieldName, GeometryDef):
        '''Method IRasterWorkspaceEx.RegisterAsRasterCatalog

           INPUTS
            Name                : BSTR
            OIDFieldName        : BSTR
            GeometryDef         : IGeometryDef*'''
        return super(IRasterWorkspaceEx, self).RegisterAsRasterCatalog(Name, OIDFieldName, GeometryDef)

class IDatasetComponent(_esriGeoDatabase.IDatasetComponent):
    _IID = uuid.UUID('5f636f00-4b3c-46eb-a684-c2d746357061')
    def get_DataElement(self):
        '''Method IDatasetComponent.get_DataElement

           OUTPUT
            DataElement         : IDEDataset**'''
        return super(IDatasetComponent, self).get_DataElement()
    def get_Parent(self):
        '''Method IDatasetComponent.get_Parent

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetComponent, self).get_Parent()
    DataElement = property(get_DataElement, None, None)
    Parent = property(get_Parent, None, None)

class IDatasetComponent2(_esriGeoDatabase.IDatasetComponent2):
    _IID = uuid.UUID('06422a95-1f61-4e3c-9523-bcdae837ddcb')
    def get_ID(self):
        '''Method IDatasetComponent2.get_ID

           OUTPUT
            datasetComponentID  : long*'''
        return super(IDatasetComponent2, self).get_ID()
    def get_DataElement(self):
        '''Method IDatasetComponent.get_DataElement (from IDatasetComponent)

           OUTPUT
            DataElement         : IDEDataset**'''
        return super(IDatasetComponent2, self).get_DataElement()
    def get_Parent(self):
        '''Method IDatasetComponent.get_Parent (from IDatasetComponent)

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetComponent2, self).get_Parent()
    DataElement = property(get_DataElement, None, None)
    ID = property(get_ID, None, None)
    Parent = property(get_Parent, None, None)

class IXmlPropertySetEdit(_esriGeoDatabase.IXmlPropertySetEdit):
    _IID = uuid.UUID('b2676165-2396-11d3-a63e-0008c7d3ae50')

    def __init__(self, *args, **kw):
        super(IXmlPropertySetEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Dataset(self, _arg1):
        '''Method IXmlPropertySetEdit.putref_Dataset

           INPUT
            _arg1               : IDataset*'''
        return super(IXmlPropertySetEdit, self).putref_Dataset(_arg1)
    def GetProperty(self, Name):
        '''Method IXmlPropertySetEdit.GetProperty

           INPUT
            Name                : BSTR

           OUTPUT
            values              : VARIANT*'''
        return super(IXmlPropertySetEdit, self).GetProperty(Name)
    def SetProperty(self, Name, Value, propType, action):
        '''Method IXmlPropertySetEdit.SetProperty

           INPUTS
            Name                : BSTR
            Value               : VARIANT
            propType            : esriXmlPropertyType
            action              : esriXmlSetPropertyAction'''
        return super(IXmlPropertySetEdit, self).SetProperty(Name, Value, propType, action)
    Dataset = property(None, putref_Dataset, None)

class IRasterDataset2(_esriGeoDatabase.IRasterDataset2):
    _IID = uuid.UUID('76aa6a59-25b4-4f26-9079-7a634759fed9')
    def CreateRaster(self):
        '''Method IRasterDataset2.CreateRaster

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterDataset2, self).CreateRaster()
    def CreateFullRaster(self):
        '''Method IRasterDataset2.CreateFullRaster

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterDataset2, self).CreateFullRaster()
    def get_IsEmpty(self):
        '''Method IRasterDataset2.get_IsEmpty

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IRasterDataset2, self).get_IsEmpty()
    def get_Format(self):
        '''Method IRasterDataset.get_Format (from IRasterDataset)

           OUTPUT
            Format              : BSTR*'''
        return super(IRasterDataset2, self).get_Format()
    def get_SensorType(self):
        '''Method IRasterDataset.get_SensorType (from IRasterDataset)

           OUTPUT
            SensorType          : BSTR*'''
        return super(IRasterDataset2, self).get_SensorType()
    def get_CompressionType(self):
        '''Method IRasterDataset.get_CompressionType (from IRasterDataset)

           OUTPUT
            comp                : BSTR*'''
        return super(IRasterDataset2, self).get_CompressionType()
    def CreateDefaultRaster(self):
        '''Method IRasterDataset.CreateDefaultRaster (from IRasterDataset)

           OUTPUT
            ras                 : IRaster**'''
        return super(IRasterDataset2, self).CreateDefaultRaster()
    def CanCopy(self):
        '''Method IRasterDataset.CanCopy (from IRasterDataset)

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IRasterDataset2, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IRasterDataset.Copy (from IRasterDataset)

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            CopyDataset         : IDataset**'''
        return super(IRasterDataset2, self).Copy(copyName, copyWorkspace)
    def OpenFromFile(self, Path):
        '''Method IRasterDataset.OpenFromFile (from IRasterDataset)

           INPUT
            Path                : BSTR'''
        return super(IRasterDataset2, self).OpenFromFile(Path)
    def PrecalculateStats(self, index_list):
        '''Method IRasterDataset.PrecalculateStats (from IRasterDataset)

           INPUT
            index_list          : VARIANT'''
        return super(IRasterDataset2, self).PrecalculateStats(index_list)
    def get_CompleteName(self):
        '''Method IRasterDataset.get_CompleteName (from IRasterDataset)

           OUTPUT
            CompleteName        : BSTR*'''
        return super(IRasterDataset2, self).get_CompleteName()
    def BasicOpenFromFile(self, Path):
        '''Method IRasterDataset.BasicOpenFromFile (from IRasterDataset)

           INPUT
            Path                : BSTR'''
        return super(IRasterDataset2, self).BasicOpenFromFile(Path)
    CompleteName = property(get_CompleteName, None, None)
    CompressionType = property(get_CompressionType, None, None)
    Format = property(get_Format, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SensorType = property(get_SensorType, None, None)

class IRasterDataset3(_esriGeoDatabase.IRasterDataset3):
    _IID = uuid.UUID('2c046294-251c-43b4-8cff-d80c24dec088')
    def get_BlockWidth(self):
        '''Method IRasterDataset3.get_BlockWidth

           OUTPUT
            Width               : long*'''
        return super(IRasterDataset3, self).get_BlockWidth()
    def get_BlockHeight(self):
        '''Method IRasterDataset3.get_BlockHeight

           OUTPUT
            Height              : long*'''
        return super(IRasterDataset3, self).get_BlockHeight()
    def get_MaximumPyramidLevel(self):
        '''Method IRasterDataset3.get_MaximumPyramidLevel

           OUTPUT
            maxLevel            : long*'''
        return super(IRasterDataset3, self).get_MaximumPyramidLevel()
    def get_FirstPyramidLevel(self):
        '''Method IRasterDataset3.get_FirstPyramidLevel

           OUTPUT
            firstLevel          : long*'''
        return super(IRasterDataset3, self).get_FirstPyramidLevel()
    def get_LODInfos(self):
        '''Method IRasterDataset3.get_LODInfos

           OUTPUT
            LODInfos            : IRasterLODInfos**'''
        return super(IRasterDataset3, self).get_LODInfos()
    def get_CanWrite(self):
        '''Method IRasterDataset3.get_CanWrite

           OUTPUT
            CanWrite            : VARIANT_BOOL*'''
        return super(IRasterDataset3, self).get_CanWrite()
    def Read(self, tlc, Raster, PixelBlock):
        '''Method IRasterDataset3.Read

           INPUTS
            tlc                 : IPnt*
            Raster              : IRaster*
            PixelBlock          : IPixelBlock*'''
        return super(IRasterDataset3, self).Read(tlc, Raster, PixelBlock)
    def Write(self, tlc, Raster, mode, PixelBlock):
        '''Method IRasterDataset3.Write

           INPUTS
            tlc                 : IPnt*
            Raster              : IRaster*
            mode                : esriRasterWriteMode
            PixelBlock          : IPixelBlock*'''
        return super(IRasterDataset3, self).Write(tlc, Raster, mode, PixelBlock)
    def Refresh(self):
        '''Method IRasterDataset3.Refresh'''
        return super(IRasterDataset3, self).Refresh()
    def ReadPyramid(self, tlc, PyramidLevel, Raster, PixelBlock):
        '''Method IRasterDataset3.ReadPyramid

           INPUTS
            tlc                 : IPnt*
            PyramidLevel        : long
            Raster              : IRaster*
            PixelBlock          : IPixelBlock*'''
        return super(IRasterDataset3, self).ReadPyramid(tlc, PyramidLevel, Raster, PixelBlock)
    def CreateRaster(self):
        '''Method IRasterDataset2.CreateRaster (from IRasterDataset2)

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterDataset3, self).CreateRaster()
    def CreateFullRaster(self):
        '''Method IRasterDataset2.CreateFullRaster (from IRasterDataset2)

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterDataset3, self).CreateFullRaster()
    def get_IsEmpty(self):
        '''Method IRasterDataset2.get_IsEmpty (from IRasterDataset2)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IRasterDataset3, self).get_IsEmpty()
    def get_Format(self):
        '''Method IRasterDataset.get_Format (from IRasterDataset)

           OUTPUT
            Format              : BSTR*'''
        return super(IRasterDataset3, self).get_Format()
    def get_SensorType(self):
        '''Method IRasterDataset.get_SensorType (from IRasterDataset)

           OUTPUT
            SensorType          : BSTR*'''
        return super(IRasterDataset3, self).get_SensorType()
    def get_CompressionType(self):
        '''Method IRasterDataset.get_CompressionType (from IRasterDataset)

           OUTPUT
            comp                : BSTR*'''
        return super(IRasterDataset3, self).get_CompressionType()
    def CreateDefaultRaster(self):
        '''Method IRasterDataset.CreateDefaultRaster (from IRasterDataset)

           OUTPUT
            ras                 : IRaster**'''
        return super(IRasterDataset3, self).CreateDefaultRaster()
    def CanCopy(self):
        '''Method IRasterDataset.CanCopy (from IRasterDataset)

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IRasterDataset3, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IRasterDataset.Copy (from IRasterDataset)

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            CopyDataset         : IDataset**'''
        return super(IRasterDataset3, self).Copy(copyName, copyWorkspace)
    def OpenFromFile(self, Path):
        '''Method IRasterDataset.OpenFromFile (from IRasterDataset)

           INPUT
            Path                : BSTR'''
        return super(IRasterDataset3, self).OpenFromFile(Path)
    def PrecalculateStats(self, index_list):
        '''Method IRasterDataset.PrecalculateStats (from IRasterDataset)

           INPUT
            index_list          : VARIANT'''
        return super(IRasterDataset3, self).PrecalculateStats(index_list)
    def get_CompleteName(self):
        '''Method IRasterDataset.get_CompleteName (from IRasterDataset)

           OUTPUT
            CompleteName        : BSTR*'''
        return super(IRasterDataset3, self).get_CompleteName()
    def BasicOpenFromFile(self, Path):
        '''Method IRasterDataset.BasicOpenFromFile (from IRasterDataset)

           INPUT
            Path                : BSTR'''
        return super(IRasterDataset3, self).BasicOpenFromFile(Path)
    BlockHeight = property(get_BlockHeight, None, None)
    BlockWidth = property(get_BlockWidth, None, None)
    CanWrite = property(get_CanWrite, None, None)
    CompleteName = property(get_CompleteName, None, None)
    CompressionType = property(get_CompressionType, None, None)
    FirstPyramidLevel = property(get_FirstPyramidLevel, None, None)
    Format = property(get_Format, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    LODInfos = property(get_LODInfos, None, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, None, None)
    SensorType = property(get_SensorType, None, None)

class IRasterCatalogItem(_esriGeoDatabase.IRasterCatalogItem):
    _IID = uuid.UUID('6e0577d2-8fe5-44d6-b18c-222687a19025')

    def __init__(self, *args, **kw):
        super(IRasterCatalogItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterDataset(self):
        '''Method IRasterCatalogItem.get_RasterDataset

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(IRasterCatalogItem, self).get_RasterDataset()
    def putref_RasterDataset(self, Dataset):
        '''Method IRasterCatalogItem.putref_RasterDataset

           INPUT
            Dataset             : IRasterDataset*'''
        return super(IRasterCatalogItem, self).putref_RasterDataset(Dataset)
    RasterDataset = property(get_RasterDataset, putref_RasterDataset, None)

class IRasterWorkspace2(_esriGeoDatabase.IRasterWorkspace2):
    _IID = uuid.UUID('9fd9a370-1d1b-11d4-abda-0008c73fca1c')
    def OpenRasterDataset(self, Name):
        '''Method IRasterWorkspace2.OpenRasterDataset

           INPUT
            Name                : BSTR

           OUTPUT
            RasterDataset       : IRasterDataset**'''
        return super(IRasterWorkspace2, self).OpenRasterDataset(Name)
    def CreateRasterDataset(self, Name, Format, Origin, columnCount, RowCount, cellSizeX, cellSizeY, numBands, PixelType, SpatialReference, Permanent):
        '''Method IRasterWorkspace2.CreateRasterDataset

           INPUTS
            Name                : BSTR
            Format              : BSTR
            Origin              : IPoint*
            columnCount         : long
            RowCount            : long
            cellSizeX           : double
            cellSizeY           : double
            numBands            : long
            PixelType           : rstPixelType
            SpatialReference    : ISpatialReference*
            Permanent           : VARIANT_BOOL

           OUTPUT
            RasterDataset       : IRasterDataset**'''
        return super(IRasterWorkspace2, self).CreateRasterDataset(Name, Format, Origin, columnCount, RowCount, cellSizeX, cellSizeY, numBands, PixelType, SpatialReference, Permanent)
    def IsWorkspace(self, Name):
        '''Method IRasterWorkspace2.IsWorkspace

           INPUT
            Name                : BSTR

           OUTPUT
            IsWorkspace         : VARIANT_BOOL*'''
        return super(IRasterWorkspace2, self).IsWorkspace(Name)
    def CanCopy(self):
        '''Method IRasterWorkspace2.CanCopy

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IRasterWorkspace2, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IRasterWorkspace2.Copy

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            CopyDataset         : IDataset**'''
        return super(IRasterWorkspace2, self).Copy(copyName, copyWorkspace)

class IRasterWorkspace4(_esriGeoDatabase.IRasterWorkspace4):
    _IID = uuid.UUID('2eeb0761-2d5a-459b-8b71-c19a810fb896')
    def CreateRasterDataset(self, Name, Format, pOrigin, nCols, nRows, dx, dy, nBands, PixelType, SpatialReference, Permanent, pStorageDef, ConfigKeyword):
        '''Method IRasterWorkspace4.CreateRasterDataset

           INPUTS
            Name                : BSTR
            Format              : BSTR
            pOrigin             : IPoint*
            nCols               : long
            nRows               : long
            dx                  : double
            dy                  : double
            nBands              : long
            PixelType           : rstPixelType
            SpatialReference    : ISpatialReference*
            Permanent           : VARIANT_BOOL
            pStorageDef         : IRasterStorageDef*
            ConfigKeyword       : BSTR

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterWorkspace4, self).CreateRasterDataset(Name, Format, pOrigin, nCols, nRows, dx, dy, nBands, PixelType, SpatialReference, Permanent, pStorageDef, ConfigKeyword)

class IRasterValue(_esriGeoDatabase.IRasterValue):
    _IID = uuid.UUID('6b2d0243-7100-4e3f-aa02-5ec12daf6980')

    def __init__(self, *args, **kw):
        super(IRasterValue, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterStorageDef(self):
        '''Method IRasterValue.get_RasterStorageDef

           OUTPUT
            StorageDef          : IRasterStorageDef**'''
        return super(IRasterValue, self).get_RasterStorageDef()
    def putref_RasterStorageDef(self, StorageDef):
        '''Method IRasterValue.putref_RasterStorageDef

           INPUT
            StorageDef          : IRasterStorageDef*'''
        return super(IRasterValue, self).putref_RasterStorageDef(StorageDef)
    def get_Extent(self):
        '''Method IRasterValue.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IRasterValue, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IRasterValue.putref_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IRasterValue, self).putref_Extent(Extent)
    def get_RasterDataset(self):
        '''Method IRasterValue.get_RasterDataset

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(IRasterValue, self).get_RasterDataset()
    def putref_RasterDataset(self, Dataset):
        '''Method IRasterValue.putref_RasterDataset

           INPUT
            Dataset             : IRasterDataset*'''
        return super(IRasterValue, self).putref_RasterDataset(Dataset)
    def get_RasterDatasetName(self):
        '''Method IRasterValue.get_RasterDatasetName

           OUTPUT
            DatasetName         : IName**'''
        return super(IRasterValue, self).get_RasterDatasetName()
    def putref_RasterDatasetName(self, DatasetName):
        '''Method IRasterValue.putref_RasterDatasetName

           INPUT
            DatasetName         : IName*'''
        return super(IRasterValue, self).putref_RasterDatasetName(DatasetName)
    def get_Raster(self):
        '''Method IRasterValue.get_Raster

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterValue, self).get_Raster()
    def putref_Raster(self, Raster):
        '''Method IRasterValue.putref_Raster

           INPUT
            Raster              : IRaster*'''
        return super(IRasterValue, self).putref_Raster(Raster)
    def SetEmptyRasterDataset(self, nBands, PixelType):
        '''Method IRasterValue.SetEmptyRasterDataset

           INPUTS
            nBands              : long
            PixelType           : rstPixelType'''
        return super(IRasterValue, self).SetEmptyRasterDataset(nBands, PixelType)
    Extent = property(get_Extent, putref_Extent, None)
    Raster = property(get_Raster, putref_Raster, None)
    RasterDataset = property(get_RasterDataset, putref_RasterDataset, None)
    RasterDatasetName = property(get_RasterDatasetName, putref_RasterDatasetName, None)
    RasterStorageDef = property(get_RasterStorageDef, putref_RasterStorageDef, None)

class IRasterValue2(_esriGeoDatabase.IRasterValue2):
    _IID = uuid.UUID('4f128505-c63b-474b-9167-a92c8a90536a')

    def __init__(self, *args, **kw):
        super(IRasterValue2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PersistXform(self):
        '''Method IRasterValue2.get_PersistXform

           OUTPUT
            xform               : IGeodataXform**'''
        return super(IRasterValue2, self).get_PersistXform()
    def putref_PersistXform(self, xform):
        '''Method IRasterValue2.putref_PersistXform

           INPUT
            xform               : IGeodataXform*'''
        return super(IRasterValue2, self).putref_PersistXform(xform)
    def get_RasterStorageDef(self):
        '''Method IRasterValue.get_RasterStorageDef (from IRasterValue)

           OUTPUT
            StorageDef          : IRasterStorageDef**'''
        return super(IRasterValue2, self).get_RasterStorageDef()
    def putref_RasterStorageDef(self, StorageDef):
        '''Method IRasterValue.putref_RasterStorageDef (from IRasterValue)

           INPUT
            StorageDef          : IRasterStorageDef*'''
        return super(IRasterValue2, self).putref_RasterStorageDef(StorageDef)
    def get_Extent(self):
        '''Method IRasterValue.get_Extent (from IRasterValue)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IRasterValue2, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IRasterValue.putref_Extent (from IRasterValue)

           INPUT
            Extent              : IEnvelope*'''
        return super(IRasterValue2, self).putref_Extent(Extent)
    def get_RasterDataset(self):
        '''Method IRasterValue.get_RasterDataset (from IRasterValue)

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(IRasterValue2, self).get_RasterDataset()
    def putref_RasterDataset(self, Dataset):
        '''Method IRasterValue.putref_RasterDataset (from IRasterValue)

           INPUT
            Dataset             : IRasterDataset*'''
        return super(IRasterValue2, self).putref_RasterDataset(Dataset)
    def get_RasterDatasetName(self):
        '''Method IRasterValue.get_RasterDatasetName (from IRasterValue)

           OUTPUT
            DatasetName         : IName**'''
        return super(IRasterValue2, self).get_RasterDatasetName()
    def putref_RasterDatasetName(self, DatasetName):
        '''Method IRasterValue.putref_RasterDatasetName (from IRasterValue)

           INPUT
            DatasetName         : IName*'''
        return super(IRasterValue2, self).putref_RasterDatasetName(DatasetName)
    def get_Raster(self):
        '''Method IRasterValue.get_Raster (from IRasterValue)

           OUTPUT
            Raster              : IRaster**'''
        return super(IRasterValue2, self).get_Raster()
    def putref_Raster(self, Raster):
        '''Method IRasterValue.putref_Raster (from IRasterValue)

           INPUT
            Raster              : IRaster*'''
        return super(IRasterValue2, self).putref_Raster(Raster)
    def SetEmptyRasterDataset(self, nBands, PixelType):
        '''Method IRasterValue.SetEmptyRasterDataset (from IRasterValue)

           INPUTS
            nBands              : long
            PixelType           : rstPixelType'''
        return super(IRasterValue2, self).SetEmptyRasterDataset(nBands, PixelType)
    Extent = property(get_Extent, putref_Extent, None)
    PersistXform = property(get_PersistXform, putref_PersistXform, None)
    Raster = property(get_Raster, putref_Raster, None)
    RasterDataset = property(get_RasterDataset, putref_RasterDataset, None)
    RasterDatasetName = property(get_RasterDatasetName, putref_RasterDatasetName, None)
    RasterStorageDef = property(get_RasterStorageDef, putref_RasterStorageDef, None)

class ISaveAs(_esriGeoDatabase.ISaveAs):
    _IID = uuid.UUID('c7a92e97-597e-4a69-a872-29cb60b5e0db')
    def SaveAs(self, Name, Workspace, Format):
        '''Method ISaveAs.SaveAs

           INPUTS
            Name                : BSTR
            Workspace           : IWorkspace*
            Format              : BSTR

           OUTPUT
            Dataset             : IDataset**'''
        return super(ISaveAs, self).SaveAs(Name, Workspace, Format)
    def CanSaveAs(self, Format):
        '''Method ISaveAs.CanSaveAs

           INPUT
            Format              : BSTR

           OUTPUT
            CanSaveAs           : VARIANT_BOOL*'''
        return super(ISaveAs, self).CanSaveAs(Format)

class ISaveAs2(_esriGeoDatabase.ISaveAs2):
    _IID = uuid.UUID('ba3968e7-a18b-416d-8140-e4a06068cf1b')
    def SaveAsRasterDataset(self, Name, Workspace, Format, StorageDef):
        '''Method ISaveAs2.SaveAsRasterDataset

           INPUTS
            Name                : BSTR
            Workspace           : IWorkspace*
            Format              : BSTR
            StorageDef          : IRasterStorageDef*

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(ISaveAs2, self).SaveAsRasterDataset(Name, Workspace, Format, StorageDef)
    def SaveAs(self, Name, Workspace, Format):
        '''Method ISaveAs.SaveAs (from ISaveAs)

           INPUTS
            Name                : BSTR
            Workspace           : IWorkspace*
            Format              : BSTR

           OUTPUT
            Dataset             : IDataset**'''
        return super(ISaveAs2, self).SaveAs(Name, Workspace, Format)
    def CanSaveAs(self, Format):
        '''Method ISaveAs.CanSaveAs (from ISaveAs)

           INPUT
            Format              : BSTR

           OUTPUT
            CanSaveAs           : VARIANT_BOOL*'''
        return super(ISaveAs2, self).CanSaveAs(Format)

class IEnumDatasetName(_esriGeoDatabase.IEnumDatasetName):
    _IID = uuid.UUID('89e75919-c287-11d1-aa77-00c04fa33a15')
    def Next(self):
        '''Method IEnumDatasetName.Next

           OUTPUT
            DatasetName         : IDatasetName**'''
        return super(IEnumDatasetName, self).Next()
    def __iter__(self):
        try:
            super(IEnumDatasetName, self).Reset()
            val = super(IEnumDatasetName, self).Next()
            while val:
                yield val
                val = super(IEnumDatasetName, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumDatasetName.Reset'''
        return super(IEnumDatasetName, self).Reset()

class IDatasetName(_esriGeoDatabase.IDatasetName):
    _IID = uuid.UUID('89e75917-c287-11d1-aa77-00c04fa33a15')

    def __init__(self, *args, **kw):
        super(IDatasetName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IDatasetName.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDatasetName, self).get_Name()
    def put_Name(self, Name):
        '''Method IDatasetName.put_Name

           INPUT
            Name                : BSTR'''
        return super(IDatasetName, self).put_Name(Name)
    def get_Type(self):
        '''Method IDatasetName.get_Type

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IDatasetName, self).get_Type()
    def get_Category(self):
        '''Method IDatasetName.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(IDatasetName, self).get_Category()
    def put_Category(self, Category):
        '''Method IDatasetName.put_Category

           INPUT
            Category            : BSTR'''
        return super(IDatasetName, self).put_Category(Category)
    def get_WorkspaceName(self):
        '''Method IDatasetName.get_WorkspaceName

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IDatasetName, self).get_WorkspaceName()
    def putref_WorkspaceName(self, WorkspaceName):
        '''Method IDatasetName.putref_WorkspaceName

           INPUT
            WorkspaceName       : IWorkspaceName*'''
        return super(IDatasetName, self).putref_WorkspaceName(WorkspaceName)
    def get_SubsetNames(self):
        '''Method IDatasetName.get_SubsetNames

           OUTPUT
            SubsetNames         : IEnumDatasetName**'''
        return super(IDatasetName, self).get_SubsetNames()
    Category = property(get_Category, put_Category, None)
    Name = property(get_Name, put_Name, None)
    SubsetNames = property(get_SubsetNames, None, None)
    Type = property(get_Type, None, None)
    WorkspaceName = property(get_WorkspaceName, putref_WorkspaceName, None)

class IWorkspaceExtension3(_esriGeoDatabase.IWorkspaceExtension3):
    _IID = uuid.UUID('5353322d-0cf1-4963-84d4-dad544ac5a0c')
    def get_PrivateTableAndOwnerNames(self):
        '''Method IWorkspaceExtension3.get_PrivateTableAndOwnerNames

           OUTPUTS
            privateTables       : IEnumDatasetName**
            owningDatasets      : IEnumDatasetName**'''
        return super(IWorkspaceExtension3, self).get_PrivateTableAndOwnerNames()
    def OwnsDatasetType(self, DatasetType):
        '''Method IWorkspaceExtension2.OwnsDatasetType (from IWorkspaceExtension2)

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            ownsType            : VARIANT_BOOL*'''
        return super(IWorkspaceExtension3, self).OwnsDatasetType(DatasetType)
    def get_Workspace(self):
        '''Method IWorkspaceExtension2.get_Workspace (from IWorkspaceExtension2)

           OUTPUT
            Workspace           : IWorkspace**'''
        return super(IWorkspaceExtension3, self).get_Workspace()
    def get_Name(self):
        '''Method IWorkspaceExtension.get_Name (from IWorkspaceExtension)

           OUTPUT
            Name                : BSTR*'''
        return super(IWorkspaceExtension3, self).get_Name()
    def get_GUID(self):
        '''Method IWorkspaceExtension.get_GUID (from IWorkspaceExtension)

           OUTPUT
            GUID                : IUID**'''
        return super(IWorkspaceExtension3, self).get_GUID()
    def get_PrivateDatasetNames(self, dtype):
        '''Method IWorkspaceExtension.get_PrivateDatasetNames (from IWorkspaceExtension)

           INPUT
            dtype               : esriDatasetType

           OUTPUT
            privateNames        : IEnumBSTR**'''
        return super(IWorkspaceExtension3, self).get_PrivateDatasetNames(dtype)
    def get_DataDictionaryTableNames(self):
        '''Method IWorkspaceExtension.get_DataDictionaryTableNames (from IWorkspaceExtension)

           OUTPUT
            privateNames        : IEnumBSTR**'''
        return super(IWorkspaceExtension3, self).get_DataDictionaryTableNames()
    DataDictionaryTableNames = property(get_DataDictionaryTableNames, None, None)
    GUID = property(get_GUID, None, None)
    Name = property(get_Name, None, None)
    PrivateTableAndOwnerNames = property(get_PrivateTableAndOwnerNames, None, None)
    Workspace = property(get_Workspace, None, None)
    PrivateDatasetNames = IndexProperty(get_PrivateDatasetNames, None)

class ITableNameSet(_esriGeoDatabase.ITableNameSet):
    _IID = uuid.UUID('612806d1-9887-4bf7-b555-03b84aa8c8e5')
    def Add(self, Name, TableName):
        '''Method ITableNameSet.Add

           INPUTS
            Name                : BSTR
            TableName           : IDatasetName*'''
        return super(ITableNameSet, self).Add(Name, TableName)
    def Remove(self, Name):
        '''Method ITableNameSet.Remove

           INPUT
            Name                : BSTR'''
        return super(ITableNameSet, self).Remove(Name)
    def Find(self, Name):
        '''Method ITableNameSet.Find

           INPUT
            Name                : BSTR

           OUTPUT
            TableName           : IDatasetName**'''
        return super(ITableNameSet, self).Find(Name)
    def get_Exists(self, Name):
        '''Method ITableNameSet.get_Exists

           INPUT
            Name                : BSTR

           OUTPUT
            Exists              : VARIANT_BOOL*'''
        return super(ITableNameSet, self).get_Exists(Name)
    Exists = IndexProperty(get_Exists, None)

class IDatasetName2(_esriGeoDatabase.IDatasetName2):
    _IID = uuid.UUID('033d515e-0f94-4c23-8eb8-daff16b1f17b')

    def __init__(self, *args, **kw):
        super(IDatasetName2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ControllerNames(self, DatasetType):
        '''Method IDatasetName2.get_ControllerNames

           INPUT
            DatasetType         : esriDatasetType

           OUTPUT
            DatasetNames        : IEnumDatasetName**'''
        return super(IDatasetName2, self).get_ControllerNames(DatasetType)
    def putref_ControllerName(self, _arg1):
        '''Method IDatasetName2.putref_ControllerName

           INPUT
            _arg1               : IDatasetName*'''
        return super(IDatasetName2, self).putref_ControllerName(_arg1)
    def get_Name(self):
        '''Method IDatasetName.get_Name (from IDatasetName)

           OUTPUT
            Name                : BSTR*'''
        return super(IDatasetName2, self).get_Name()
    def put_Name(self, Name):
        '''Method IDatasetName.put_Name (from IDatasetName)

           INPUT
            Name                : BSTR'''
        return super(IDatasetName2, self).put_Name(Name)
    def get_Type(self):
        '''Method IDatasetName.get_Type (from IDatasetName)

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IDatasetName2, self).get_Type()
    def get_Category(self):
        '''Method IDatasetName.get_Category (from IDatasetName)

           OUTPUT
            Category            : BSTR*'''
        return super(IDatasetName2, self).get_Category()
    def put_Category(self, Category):
        '''Method IDatasetName.put_Category (from IDatasetName)

           INPUT
            Category            : BSTR'''
        return super(IDatasetName2, self).put_Category(Category)
    def get_WorkspaceName(self):
        '''Method IDatasetName.get_WorkspaceName (from IDatasetName)

           OUTPUT
            WorkspaceName       : IWorkspaceName**'''
        return super(IDatasetName2, self).get_WorkspaceName()
    def putref_WorkspaceName(self, WorkspaceName):
        '''Method IDatasetName.putref_WorkspaceName (from IDatasetName)

           INPUT
            WorkspaceName       : IWorkspaceName*'''
        return super(IDatasetName2, self).putref_WorkspaceName(WorkspaceName)
    def get_SubsetNames(self):
        '''Method IDatasetName.get_SubsetNames (from IDatasetName)

           OUTPUT
            SubsetNames         : IEnumDatasetName**'''
        return super(IDatasetName2, self).get_SubsetNames()
    Category = property(get_Category, put_Category, None)
    ControllerName = property(None, putref_ControllerName, None)
    Name = property(get_Name, put_Name, None)
    SubsetNames = property(get_SubsetNames, None, None)
    Type = property(get_Type, None, None)
    WorkspaceName = property(get_WorkspaceName, putref_WorkspaceName, None)
    ControllerNames = IndexProperty(get_ControllerNames, None)

class IFeatureWorkspaceManage(_esriGeoDatabase.IFeatureWorkspaceManage):
    _IID = uuid.UUID('ff866b9f-6f94-11d3-80e5-00c04f686238')
    def DeleteByName(self, aName):
        '''Method IFeatureWorkspaceManage.DeleteByName

           INPUT
            aName               : IDatasetName*'''
        return super(IFeatureWorkspaceManage, self).DeleteByName(aName)
    def IsRegisteredAsVersioned(self, aName):
        '''Method IFeatureWorkspaceManage.IsRegisteredAsVersioned

           INPUT
            aName               : IName*

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage, self).IsRegisteredAsVersioned(aName)
    def IsRegisteredAsObjectClass(self, Name):
        '''Method IFeatureWorkspaceManage.IsRegisteredAsObjectClass

           INPUT
            Name                : BSTR

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage, self).IsRegisteredAsObjectClass(Name)
    def CanDelete(self, aName):
        '''Method IFeatureWorkspaceManage.CanDelete

           INPUT
            aName               : IName*

           OUTPUT
            CanDelete           : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage, self).CanDelete(aName)
    def CanRename(self, aName):
        '''Method IFeatureWorkspaceManage.CanRename

           INPUT
            aName               : IName*

           OUTPUT
            CanRename           : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage, self).CanRename(aName)
    def AnalyzeTable(self, TableName, tableComponents):
        '''Method IFeatureWorkspaceManage.AnalyzeTable

           INPUTS
            TableName           : BSTR
            tableComponents     : long'''
        return super(IFeatureWorkspaceManage, self).AnalyzeTable(TableName, tableComponents)
    def AnalyzeIndex(self, TableName, Index):
        '''Method IFeatureWorkspaceManage.AnalyzeIndex

           INPUTS
            TableName           : BSTR
            Index               : BSTR'''
        return super(IFeatureWorkspaceManage, self).AnalyzeIndex(TableName, Index)
    def ValidateField(self, inField):
        '''Method IFeatureWorkspaceManage.ValidateField

           INPUT
            inField             : IField*

           OUTPUT
            outField            : IField**'''
        return super(IFeatureWorkspaceManage, self).ValidateField(inField)

class IFeatureDatasetName(_esriGeoDatabase.IFeatureDatasetName):
    _IID = uuid.UUID('89e7591a-c287-11d1-aa77-00c04fa33a15')
    def get_FeatureClassNames(self):
        '''Method IFeatureDatasetName.get_FeatureClassNames

           OUTPUT
            FeatureClassNames   : IEnumDatasetName**'''
        return super(IFeatureDatasetName, self).get_FeatureClassNames()
    def get_GeometricNetworkNames(self):
        '''Method IFeatureDatasetName.get_GeometricNetworkNames

           OUTPUT
            GeometricNetworkNames: IEnumDatasetName**'''
        return super(IFeatureDatasetName, self).get_GeometricNetworkNames()
    def get_TableNames(self):
        '''Method IFeatureDatasetName.get_TableNames

           OUTPUT
            FeatureClassNames   : IEnumDatasetName**'''
        return super(IFeatureDatasetName, self).get_TableNames()
    def get_RelationshipClassNames(self):
        '''Method IFeatureDatasetName.get_RelationshipClassNames

           OUTPUT
            RelationshipClassNames: IEnumDatasetName**'''
        return super(IFeatureDatasetName, self).get_RelationshipClassNames()
    FeatureClassNames = property(get_FeatureClassNames, None, None)
    GeometricNetworkNames = property(get_GeometricNetworkNames, None, None)
    RelationshipClassNames = property(get_RelationshipClassNames, None, None)
    TableNames = property(get_TableNames, None, None)

class ISimpleDataConverter(_esriGeoDatabase.ISimpleDataConverter):
    _IID = uuid.UUID('0446469d-fafa-11d1-aab1-00c04fa33c20')

    def __init__(self, *args, **kw):
        super(ISimpleDataConverter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Convert(self):
        '''Method ISimpleDataConverter.Convert

           OUTPUT
            EnumInvalidObject   : IEnumInvalidObject**'''
        return super(ISimpleDataConverter, self).Convert()
    def Reset(self):
        '''Method ISimpleDataConverter.Reset'''
        return super(ISimpleDataConverter, self).Reset()
    def put_IsFeatureTypeSimple(self, _arg1):
        '''Method ISimpleDataConverter.put_IsFeatureTypeSimple

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(ISimpleDataConverter, self).put_IsFeatureTypeSimple(_arg1)
    def putref_InputDatasetName(self, _arg1):
        '''Method ISimpleDataConverter.putref_InputDatasetName

           INPUT
            _arg1               : IDatasetName*'''
        return super(ISimpleDataConverter, self).putref_InputDatasetName(_arg1)
    def putref_InputQueryFilter(self, _arg1):
        '''Method ISimpleDataConverter.putref_InputQueryFilter

           INPUT
            _arg1               : IQueryFilter*'''
        return super(ISimpleDataConverter, self).putref_InputQueryFilter(_arg1)
    def putref_OutputGeometryDef(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputGeometryDef

           INPUT
            _arg1               : IGeometryDef*'''
        return super(ISimpleDataConverter, self).putref_OutputGeometryDef(_arg1)
    def putref_OutputFields(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputFields

           INPUT
            _arg1               : IFields*'''
        return super(ISimpleDataConverter, self).putref_OutputFields(_arg1)
    def putref_OutputFeatureDatasetName(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputFeatureDatasetName

           INPUT
            _arg1               : IFeatureDatasetName*'''
        return super(ISimpleDataConverter, self).putref_OutputFeatureDatasetName(_arg1)
    def putref_OutputDatasetName(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputDatasetName

           INPUT
            _arg1               : IDatasetName*'''
        return super(ISimpleDataConverter, self).putref_OutputDatasetName(_arg1)
    def put_ConfigurationKeyword(self, _arg1):
        '''Method ISimpleDataConverter.put_ConfigurationKeyword

           INPUT
            _arg1               : BSTR'''
        return super(ISimpleDataConverter, self).put_ConfigurationKeyword(_arg1)
    def put_FlushInterval(self, _arg1):
        '''Method ISimpleDataConverter.put_FlushInterval

           INPUT
            _arg1               : long'''
        return super(ISimpleDataConverter, self).put_FlushInterval(_arg1)
    def put_ParentWindowHandle(self, _arg1):
        '''Method ISimpleDataConverter.put_ParentWindowHandle

           INPUT
            _arg1               : OLE_HANDLE'''
        return super(ISimpleDataConverter, self).put_ParentWindowHandle(_arg1)
    ConfigurationKeyword = property(None, put_ConfigurationKeyword, None)
    FlushInterval = property(None, put_FlushInterval, None)
    InputDatasetName = property(None, putref_InputDatasetName, None)
    InputQueryFilter = property(None, putref_InputQueryFilter, None)
    IsFeatureTypeSimple = property(None, put_IsFeatureTypeSimple, None)
    OutputDatasetName = property(None, putref_OutputDatasetName, None)
    OutputFeatureDatasetName = property(None, putref_OutputFeatureDatasetName, None)
    OutputFields = property(None, putref_OutputFields, None)
    OutputGeometryDef = property(None, putref_OutputGeometryDef, None)
    ParentWindowHandle = property(None, put_ParentWindowHandle, None)

class IFeatureDatasetName2(_esriGeoDatabase.IFeatureDatasetName2):
    _IID = uuid.UUID('2d661a88-8067-4579-b569-5531db29799a')
    def get_TopologyNames(self):
        '''Method IFeatureDatasetName2.get_TopologyNames

           OUTPUT
            TopologyNames       : IEnumDatasetName**'''
        return super(IFeatureDatasetName2, self).get_TopologyNames()
    def get_FeatureClassNames(self):
        '''Method IFeatureDatasetName.get_FeatureClassNames (from IFeatureDatasetName)

           OUTPUT
            FeatureClassNames   : IEnumDatasetName**'''
        return super(IFeatureDatasetName2, self).get_FeatureClassNames()
    def get_GeometricNetworkNames(self):
        '''Method IFeatureDatasetName.get_GeometricNetworkNames (from IFeatureDatasetName)

           OUTPUT
            GeometricNetworkNames: IEnumDatasetName**'''
        return super(IFeatureDatasetName2, self).get_GeometricNetworkNames()
    def get_TableNames(self):
        '''Method IFeatureDatasetName.get_TableNames (from IFeatureDatasetName)

           OUTPUT
            FeatureClassNames   : IEnumDatasetName**'''
        return super(IFeatureDatasetName2, self).get_TableNames()
    def get_RelationshipClassNames(self):
        '''Method IFeatureDatasetName.get_RelationshipClassNames (from IFeatureDatasetName)

           OUTPUT
            RelationshipClassNames: IEnumDatasetName**'''
        return super(IFeatureDatasetName2, self).get_RelationshipClassNames()
    FeatureClassNames = property(get_FeatureClassNames, None, None)
    GeometricNetworkNames = property(get_GeometricNetworkNames, None, None)
    RelationshipClassNames = property(get_RelationshipClassNames, None, None)
    TableNames = property(get_TableNames, None, None)
    TopologyNames = property(get_TopologyNames, None, None)

class IFeatureClassName(_esriGeoDatabase.IFeatureClassName):
    _IID = uuid.UUID('3c5bbe8f-c9c3-11d1-aa7c-00c04fa33a15')

    def __init__(self, *args, **kw):
        super(IFeatureClassName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShapeType(self):
        '''Method IFeatureClassName.get_ShapeType

           OUTPUT
            Type                : esriGeometryType*'''
        return super(IFeatureClassName, self).get_ShapeType()
    def put_ShapeType(self, Type):
        '''Method IFeatureClassName.put_ShapeType

           INPUT
            Type                : esriGeometryType'''
        return super(IFeatureClassName, self).put_ShapeType(Type)
    def get_FeatureDatasetName(self):
        '''Method IFeatureClassName.get_FeatureDatasetName

           OUTPUT
            FeatureDatasetName  : IDatasetName**'''
        return super(IFeatureClassName, self).get_FeatureDatasetName()
    def putref_FeatureDatasetName(self, FeatureDatasetName):
        '''Method IFeatureClassName.putref_FeatureDatasetName

           INPUT
            FeatureDatasetName  : IDatasetName*'''
        return super(IFeatureClassName, self).putref_FeatureDatasetName(FeatureDatasetName)
    def get_FeatureType(self):
        '''Method IFeatureClassName.get_FeatureType

           OUTPUT
            Type                : esriFeatureType*'''
        return super(IFeatureClassName, self).get_FeatureType()
    def put_FeatureType(self, Type):
        '''Method IFeatureClassName.put_FeatureType

           INPUT
            Type                : esriFeatureType'''
        return super(IFeatureClassName, self).put_FeatureType(Type)
    def get_ShapeFieldName(self):
        '''Method IFeatureClassName.get_ShapeFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureClassName, self).get_ShapeFieldName()
    def put_ShapeFieldName(self, Name):
        '''Method IFeatureClassName.put_ShapeFieldName

           INPUT
            Name                : BSTR'''
        return super(IFeatureClassName, self).put_ShapeFieldName(Name)
    FeatureDatasetName = property(get_FeatureDatasetName, putref_FeatureDatasetName, None)
    FeatureType = property(get_FeatureType, put_FeatureType, None)
    ShapeFieldName = property(get_ShapeFieldName, put_ShapeFieldName, None)
    ShapeType = property(get_ShapeType, put_ShapeType, None)

class ITopologyName(_esriGeoDatabase.ITopologyName):
    _IID = uuid.UUID('505b6fdd-9e6e-42f9-b705-53355b2f1def')

    def __init__(self, *args, **kw):
        super(ITopologyName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DirtyAreasName(self):
        '''Method ITopologyName.get_DirtyAreasName

           OUTPUT
            Name                : IName**'''
        return super(ITopologyName, self).get_DirtyAreasName()
    def get_TopologyErrorName(self, GeometryType):
        '''Method ITopologyName.get_TopologyErrorName

           INPUT
            GeometryType        : esriGeometryType

           OUTPUT
            Name                : IName**'''
        return super(ITopologyName, self).get_TopologyErrorName(GeometryType)
    def get_FeatureDatasetName(self):
        '''Method ITopologyName.get_FeatureDatasetName

           OUTPUT
            Name                : IDatasetName**'''
        return super(ITopologyName, self).get_FeatureDatasetName()
    def putref_FeatureDatasetName(self, Name):
        '''Method ITopologyName.putref_FeatureDatasetName

           INPUT
            Name                : IDatasetName*'''
        return super(ITopologyName, self).putref_FeatureDatasetName(Name)
    DirtyAreasName = property(get_DirtyAreasName, None, None)
    FeatureDatasetName = property(get_FeatureDatasetName, putref_FeatureDatasetName, None)
    TopologyErrorName = IndexProperty(get_TopologyErrorName, None)

class IDatasetContainerName(_esriGeoDatabase.IDatasetContainerName):
    _IID = uuid.UUID('721db11a-1001-44dc-9670-8577e824aff2')
    def get_DatasetNames(self, Type):
        '''Method IDatasetContainerName.get_DatasetNames

           INPUT
            Type                : esriDatasetType

           OUTPUT
            DatasetNames        : IEnumDatasetName**'''
        return super(IDatasetContainerName, self).get_DatasetNames(Type)
    DatasetNames = IndexProperty(get_DatasetNames, None)

class IDatasetContainer2(_esriGeoDatabase.IDatasetContainer2):
    _IID = uuid.UUID('c826e861-dbfa-4b86-95fe-8352e287e284')
    def get_Dataset(self, Type, Index):
        '''Method IDatasetContainer2.get_Dataset

           INPUTS
            Type                : esriDatasetType
            Index               : long

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetContainer2, self).get_Dataset(Type, Index)
    def get_Datasets(self, Type):
        '''Method IDatasetContainer2.get_Datasets

           INPUT
            Type                : esriDatasetType

           OUTPUT
            Datasets            : IEnumDataset**'''
        return super(IDatasetContainer2, self).get_Datasets(Type)
    def get_DatasetCount(self, Type):
        '''Method IDatasetContainer2.get_DatasetCount

           INPUT
            Type                : esriDatasetType

           OUTPUT
            Count               : long*'''
        return super(IDatasetContainer2, self).get_DatasetCount(Type)
    def get_DatasetByName(self, Type, Name):
        '''Method IDatasetContainer2.get_DatasetByName

           INPUTS
            Type                : esriDatasetType
            Name                : BSTR

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetContainer2, self).get_DatasetByName(Type, Name)
    def get_DatasetNames(self, Type):
        '''Method IDatasetContainer2.get_DatasetNames

           INPUT
            Type                : esriDatasetType

           OUTPUT
            Names               : IEnumDatasetName**'''
        return super(IDatasetContainer2, self).get_DatasetNames(Type)
    def get_DatasetTypes(self):
        '''Method IDatasetContainer2.get_DatasetTypes

           OUTPUT
            types               : IEnumDatasetType**'''
        return super(IDatasetContainer2, self).get_DatasetTypes()
    def CreateDataset(self, DataElement):
        '''Method IDatasetContainer2.CreateDataset

           INPUT
            DataElement         : IDEDataset*

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetContainer2, self).CreateDataset(DataElement)
    def AddDataset(self, datasetToAdd):
        '''Method IDatasetContainer.AddDataset (from IDatasetContainer)

           INPUT
            datasetToAdd        : IDataset*'''
        return super(IDatasetContainer2, self).AddDataset(datasetToAdd)
    DatasetTypes = property(get_DatasetTypes, None, None)
    DatasetCount = IndexProperty(get_DatasetCount, None)
    DatasetNames = IndexProperty(get_DatasetNames, None)
    Datasets = IndexProperty(get_Datasets, None)

class IDatasetContainer3(_esriGeoDatabase.IDatasetContainer3):
    _IID = uuid.UUID('1b7498c6-f47b-4ac6-a716-835b702a9cac')
    def get_DatasetByID(self, Type, DatasetID):
        '''Method IDatasetContainer3.get_DatasetByID

           INPUTS
            Type                : esriDatasetType
            DatasetID           : long

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetContainer3, self).get_DatasetByID(Type, DatasetID)
    def get_Dataset(self, Type, Index):
        '''Method IDatasetContainer2.get_Dataset (from IDatasetContainer2)

           INPUTS
            Type                : esriDatasetType
            Index               : long

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetContainer3, self).get_Dataset(Type, Index)
    def get_Datasets(self, Type):
        '''Method IDatasetContainer2.get_Datasets (from IDatasetContainer2)

           INPUT
            Type                : esriDatasetType

           OUTPUT
            Datasets            : IEnumDataset**'''
        return super(IDatasetContainer3, self).get_Datasets(Type)
    def get_DatasetCount(self, Type):
        '''Method IDatasetContainer2.get_DatasetCount (from IDatasetContainer2)

           INPUT
            Type                : esriDatasetType

           OUTPUT
            Count               : long*'''
        return super(IDatasetContainer3, self).get_DatasetCount(Type)
    def get_DatasetByName(self, Type, Name):
        '''Method IDatasetContainer2.get_DatasetByName (from IDatasetContainer2)

           INPUTS
            Type                : esriDatasetType
            Name                : BSTR

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetContainer3, self).get_DatasetByName(Type, Name)
    def get_DatasetNames(self, Type):
        '''Method IDatasetContainer2.get_DatasetNames (from IDatasetContainer2)

           INPUT
            Type                : esriDatasetType

           OUTPUT
            Names               : IEnumDatasetName**'''
        return super(IDatasetContainer3, self).get_DatasetNames(Type)
    def get_DatasetTypes(self):
        '''Method IDatasetContainer2.get_DatasetTypes (from IDatasetContainer2)

           OUTPUT
            types               : IEnumDatasetType**'''
        return super(IDatasetContainer3, self).get_DatasetTypes()
    def CreateDataset(self, DataElement):
        '''Method IDatasetContainer2.CreateDataset (from IDatasetContainer2)

           INPUT
            DataElement         : IDEDataset*

           OUTPUT
            Dataset             : IDataset**'''
        return super(IDatasetContainer3, self).CreateDataset(DataElement)
    def AddDataset(self, datasetToAdd):
        '''Method IDatasetContainer.AddDataset (from IDatasetContainer)

           INPUT
            datasetToAdd        : IDataset*'''
        return super(IDatasetContainer3, self).AddDataset(datasetToAdd)
    DatasetTypes = property(get_DatasetTypes, None, None)
    DatasetCount = IndexProperty(get_DatasetCount, None)
    DatasetNames = IndexProperty(get_DatasetNames, None)
    Datasets = IndexProperty(get_Datasets, None)

class ITopologyClassName(_esriGeoDatabase.ITopologyClassName):
    _IID = uuid.UUID('5b4b95c8-a6ef-4218-9e6e-5cd7605e1291')

    def __init__(self, *args, **kw):
        super(ITopologyClassName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TopologyName(self):
        '''Method ITopologyClassName.get_TopologyName

           OUTPUT
            TopologyName        : ITopologyName**'''
        return super(ITopologyClassName, self).get_TopologyName()
    def putref_TopologyName(self, TopologyName):
        '''Method ITopologyClassName.putref_TopologyName

           INPUT
            TopologyName        : ITopologyName*'''
        return super(ITopologyClassName, self).putref_TopologyName(TopologyName)
    TopologyName = property(get_TopologyName, putref_TopologyName, None)

class IRelationshipClassName(_esriGeoDatabase.IRelationshipClassName):
    _IID = uuid.UUID('311c2ee2-da65-11d2-8a54-000000000000')

    def __init__(self, *args, **kw):
        super(IRelationshipClassName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureDatasetName(self):
        '''Method IRelationshipClassName.get_FeatureDatasetName

           OUTPUT
            FeatureDatasetName  : IDatasetName**'''
        return super(IRelationshipClassName, self).get_FeatureDatasetName()
    def putref_FeatureDatasetName(self, FeatureDatasetName):
        '''Method IRelationshipClassName.putref_FeatureDatasetName

           INPUT
            FeatureDatasetName  : IDatasetName*'''
        return super(IRelationshipClassName, self).putref_FeatureDatasetName(FeatureDatasetName)
    def get_Cardinality(self):
        '''Method IRelationshipClassName.get_Cardinality

           OUTPUT
            Cardinality         : esriRelCardinality*'''
        return super(IRelationshipClassName, self).get_Cardinality()
    def put_Cardinality(self, Cardinality):
        '''Method IRelationshipClassName.put_Cardinality

           INPUT
            Cardinality         : esriRelCardinality'''
        return super(IRelationshipClassName, self).put_Cardinality(Cardinality)
    def get_Notification(self):
        '''Method IRelationshipClassName.get_Notification

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IRelationshipClassName, self).get_Notification()
    def put_Notification(self, Notification):
        '''Method IRelationshipClassName.put_Notification

           INPUT
            Notification        : esriRelNotification'''
        return super(IRelationshipClassName, self).put_Notification(Notification)
    def get_IsComposite(self):
        '''Method IRelationshipClassName.get_IsComposite

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IRelationshipClassName, self).get_IsComposite()
    def put_IsComposite(self, IsComposite):
        '''Method IRelationshipClassName.put_IsComposite

           INPUT
            IsComposite         : VARIANT_BOOL'''
        return super(IRelationshipClassName, self).put_IsComposite(IsComposite)
    def get_IsAttributed(self):
        '''Method IRelationshipClassName.get_IsAttributed

           OUTPUT
            IsAttributed        : VARIANT_BOOL*'''
        return super(IRelationshipClassName, self).get_IsAttributed()
    def put_IsAttributed(self, IsAttributed):
        '''Method IRelationshipClassName.put_IsAttributed

           INPUT
            IsAttributed        : VARIANT_BOOL'''
        return super(IRelationshipClassName, self).put_IsAttributed(IsAttributed)
    Cardinality = property(get_Cardinality, put_Cardinality, None)
    FeatureDatasetName = property(get_FeatureDatasetName, putref_FeatureDatasetName, None)
    IsAttributed = property(get_IsAttributed, put_IsAttributed, None)
    IsComposite = property(get_IsComposite, put_IsComposite, None)
    Notification = property(get_Notification, put_Notification, None)

class IGeometricNetworkName(_esriGeoDatabase.IGeometricNetworkName):
    _IID = uuid.UUID('ceb75d36-9a95-11d2-aacf-00c04fa37b82')

    def __init__(self, *args, **kw):
        super(IGeometricNetworkName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureDatasetName(self):
        '''Method IGeometricNetworkName.get_FeatureDatasetName

           OUTPUT
            FeatureDatasetName  : IDatasetName**'''
        return super(IGeometricNetworkName, self).get_FeatureDatasetName()
    def putref_FeatureDatasetName(self, FeatureDatasetName):
        '''Method IGeometricNetworkName.putref_FeatureDatasetName

           INPUT
            FeatureDatasetName  : IDatasetName*'''
        return super(IGeometricNetworkName, self).putref_FeatureDatasetName(FeatureDatasetName)
    FeatureDatasetName = property(get_FeatureDatasetName, putref_FeatureDatasetName, None)

class IFeatureWorkspaceManage2(_esriGeoDatabase.IFeatureWorkspaceManage2):
    _IID = uuid.UUID('7b041afb-1ad6-45ab-9c34-4e98b41df506')
    def GetObjectClassNameByID(self, ObjectClassID):
        '''Method IFeatureWorkspaceManage2.GetObjectClassNameByID

           INPUT
            ObjectClassID       : long

           OUTPUT
            qname               : BSTR*'''
        return super(IFeatureWorkspaceManage2, self).GetObjectClassNameByID(ObjectClassID)
    def GetRelationshipClassNameByID(self, relClassId):
        '''Method IFeatureWorkspaceManage2.GetRelationshipClassNameByID

           INPUT
            relClassId          : long

           OUTPUT
            qname               : BSTR*'''
        return super(IFeatureWorkspaceManage2, self).GetRelationshipClassNameByID(relClassId)
    def DeleteByName(self, aName):
        '''Method IFeatureWorkspaceManage.DeleteByName (from IFeatureWorkspaceManage)

           INPUT
            aName               : IDatasetName*'''
        return super(IFeatureWorkspaceManage2, self).DeleteByName(aName)
    def IsRegisteredAsVersioned(self, aName):
        '''Method IFeatureWorkspaceManage.IsRegisteredAsVersioned (from IFeatureWorkspaceManage)

           INPUT
            aName               : IName*

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage2, self).IsRegisteredAsVersioned(aName)
    def IsRegisteredAsObjectClass(self, Name):
        '''Method IFeatureWorkspaceManage.IsRegisteredAsObjectClass (from IFeatureWorkspaceManage)

           INPUT
            Name                : BSTR

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage2, self).IsRegisteredAsObjectClass(Name)
    def CanDelete(self, aName):
        '''Method IFeatureWorkspaceManage.CanDelete (from IFeatureWorkspaceManage)

           INPUT
            aName               : IName*

           OUTPUT
            CanDelete           : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage2, self).CanDelete(aName)
    def CanRename(self, aName):
        '''Method IFeatureWorkspaceManage.CanRename (from IFeatureWorkspaceManage)

           INPUT
            aName               : IName*

           OUTPUT
            CanRename           : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage2, self).CanRename(aName)
    def AnalyzeTable(self, TableName, tableComponents):
        '''Method IFeatureWorkspaceManage.AnalyzeTable (from IFeatureWorkspaceManage)

           INPUTS
            TableName           : BSTR
            tableComponents     : long'''
        return super(IFeatureWorkspaceManage2, self).AnalyzeTable(TableName, tableComponents)
    def AnalyzeIndex(self, TableName, Index):
        '''Method IFeatureWorkspaceManage.AnalyzeIndex (from IFeatureWorkspaceManage)

           INPUTS
            TableName           : BSTR
            Index               : BSTR'''
        return super(IFeatureWorkspaceManage2, self).AnalyzeIndex(TableName, Index)
    def ValidateField(self, inField):
        '''Method IFeatureWorkspaceManage.ValidateField (from IFeatureWorkspaceManage)

           INPUT
            inField             : IField*

           OUTPUT
            outField            : IField**'''
        return super(IFeatureWorkspaceManage2, self).ValidateField(inField)

class IFeatureWorkspaceManage3(_esriGeoDatabase.IFeatureWorkspaceManage3):
    _IID = uuid.UUID('e219df6c-a539-47de-9e04-67bbdcf5cbae')
    def AnalyzeSystemTables(self):
        '''Method IFeatureWorkspaceManage3.AnalyzeSystemTables'''
        return super(IFeatureWorkspaceManage3, self).AnalyzeSystemTables()
    def RebuildSystemTableIndexes(self):
        '''Method IFeatureWorkspaceManage3.RebuildSystemTableIndexes'''
        return super(IFeatureWorkspaceManage3, self).RebuildSystemTableIndexes()
    def IsArchivingEnabled(self, Name):
        '''Method IFeatureWorkspaceManage3.IsArchivingEnabled

           INPUT
            Name                : IName*

           OUTPUT
            IsArchivingEnabled  : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage3, self).IsArchivingEnabled(Name)
    def GetObjectClassNameByID(self, ObjectClassID):
        '''Method IFeatureWorkspaceManage2.GetObjectClassNameByID (from IFeatureWorkspaceManage2)

           INPUT
            ObjectClassID       : long

           OUTPUT
            qname               : BSTR*'''
        return super(IFeatureWorkspaceManage3, self).GetObjectClassNameByID(ObjectClassID)
    def GetRelationshipClassNameByID(self, relClassId):
        '''Method IFeatureWorkspaceManage2.GetRelationshipClassNameByID (from IFeatureWorkspaceManage2)

           INPUT
            relClassId          : long

           OUTPUT
            qname               : BSTR*'''
        return super(IFeatureWorkspaceManage3, self).GetRelationshipClassNameByID(relClassId)
    def DeleteByName(self, aName):
        '''Method IFeatureWorkspaceManage.DeleteByName (from IFeatureWorkspaceManage)

           INPUT
            aName               : IDatasetName*'''
        return super(IFeatureWorkspaceManage3, self).DeleteByName(aName)
    def IsRegisteredAsVersioned(self, aName):
        '''Method IFeatureWorkspaceManage.IsRegisteredAsVersioned (from IFeatureWorkspaceManage)

           INPUT
            aName               : IName*

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage3, self).IsRegisteredAsVersioned(aName)
    def IsRegisteredAsObjectClass(self, Name):
        '''Method IFeatureWorkspaceManage.IsRegisteredAsObjectClass (from IFeatureWorkspaceManage)

           INPUT
            Name                : BSTR

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage3, self).IsRegisteredAsObjectClass(Name)
    def CanDelete(self, aName):
        '''Method IFeatureWorkspaceManage.CanDelete (from IFeatureWorkspaceManage)

           INPUT
            aName               : IName*

           OUTPUT
            CanDelete           : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage3, self).CanDelete(aName)
    def CanRename(self, aName):
        '''Method IFeatureWorkspaceManage.CanRename (from IFeatureWorkspaceManage)

           INPUT
            aName               : IName*

           OUTPUT
            CanRename           : VARIANT_BOOL*'''
        return super(IFeatureWorkspaceManage3, self).CanRename(aName)
    def AnalyzeTable(self, TableName, tableComponents):
        '''Method IFeatureWorkspaceManage.AnalyzeTable (from IFeatureWorkspaceManage)

           INPUTS
            TableName           : BSTR
            tableComponents     : long'''
        return super(IFeatureWorkspaceManage3, self).AnalyzeTable(TableName, tableComponents)
    def AnalyzeIndex(self, TableName, Index):
        '''Method IFeatureWorkspaceManage.AnalyzeIndex (from IFeatureWorkspaceManage)

           INPUTS
            TableName           : BSTR
            Index               : BSTR'''
        return super(IFeatureWorkspaceManage3, self).AnalyzeIndex(TableName, Index)
    def ValidateField(self, inField):
        '''Method IFeatureWorkspaceManage.ValidateField (from IFeatureWorkspaceManage)

           INPUT
            inField             : IField*

           OUTPUT
            outField            : IField**'''
        return super(IFeatureWorkspaceManage3, self).ValidateField(inField)

class ICopyHelper(_esriGeoDatabase.ICopyHelper):
    _IID = uuid.UUID('7e3d4a40-727c-4d4f-9c06-b0e93c8dfe0a')
    def UpdateMetadata(self, src, dest, isMove):
        '''Method ICopyHelper.UpdateMetadata

           INPUTS
            src                 : IName*
            dest                : IName*
            isMove              : VARIANT_BOOL'''
        return super(ICopyHelper, self).UpdateMetadata(src, dest, isMove)
    def UpdateDatabaseMetadata(self, destPropertySet, src, dest):
        '''Method ICopyHelper.UpdateDatabaseMetadata

           INPUTS
            destPropertySet     : IPropertySet*
            src                 : IDatasetName*
            dest                : IDatasetName*'''
        return super(ICopyHelper, self).UpdateDatabaseMetadata(destPropertySet, src, dest)

class IRelationshipClassInfo(_esriGeoDatabase.IRelationshipClassInfo):
    _IID = uuid.UUID('713a5cef-a814-47aa-aae2-ee8937c4613b')

    def __init__(self, *args, **kw):
        super(IRelationshipClassInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RelationshipClassName(self):
        '''Method IRelationshipClassInfo.get_RelationshipClassName

           OUTPUT
            RelationshipClassName: IRelationshipClassName**'''
        return super(IRelationshipClassInfo, self).get_RelationshipClassName()
    def put_RelExtractDirection(self, RelExtractDirection):
        '''Method IRelationshipClassInfo.put_RelExtractDirection

           INPUT
            RelExtractDirection : esriRelExtractDirection'''
        return super(IRelationshipClassInfo, self).put_RelExtractDirection(RelExtractDirection)
    def get_RelExtractDirection(self):
        '''Method IRelationshipClassInfo.get_RelExtractDirection

           OUTPUT
            RelExtractDirection : esriRelExtractDirection*'''
        return super(IRelationshipClassInfo, self).get_RelExtractDirection()
    def put_Excluded(self, RelExcluded):
        '''Method IRelationshipClassInfo.put_Excluded

           INPUT
            RelExcluded         : VARIANT_BOOL'''
        return super(IRelationshipClassInfo, self).put_Excluded(RelExcluded)
    def get_Excluded(self):
        '''Method IRelationshipClassInfo.get_Excluded

           OUTPUT
            RelExcluded         : VARIANT_BOOL*'''
        return super(IRelationshipClassInfo, self).get_Excluded()
    def get_TargetID(self):
        '''Method IRelationshipClassInfo.get_TargetID

           OUTPUT
            TargetID            : long*'''
        return super(IRelationshipClassInfo, self).get_TargetID()
    Excluded = property(get_Excluded, put_Excluded, None)
    RelExtractDirection = property(get_RelExtractDirection, put_RelExtractDirection, None)
    RelationshipClassName = property(get_RelationshipClassName, None, None)
    TargetID = property(get_TargetID, None, None)

class IEnumRelationshipClassInfo(_esriGeoDatabase.IEnumRelationshipClassInfo):
    _IID = uuid.UUID('d3ad61ab-cadf-469e-8d7b-02483329a66d')
    def Next(self):
        '''Method IEnumRelationshipClassInfo.Next

           OUTPUT
            RelInfo             : IRelationshipClassInfo**'''
        return super(IEnumRelationshipClassInfo, self).Next()
    def __iter__(self):
        try:
            super(IEnumRelationshipClassInfo, self).Reset()
            val = super(IEnumRelationshipClassInfo, self).Next()
            while val:
                yield val
                val = super(IEnumRelationshipClassInfo, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumRelationshipClassInfo.Reset'''
        return super(IEnumRelationshipClassInfo, self).Reset()

class IReplicaDescription2(_esriGeoDatabase.IReplicaDescription2):
    _IID = uuid.UUID('aa08b5ac-b67e-4e8b-9154-891c3cffcbce')

    def __init__(self, *args, **kw):
        super(IReplicaDescription2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FetchRelatedObjects(self):
        '''Method IReplicaDescription2.get_FetchRelatedObjects

           OUTPUT
            GetRelatedObjects   : VARIANT_BOOL*'''
        return super(IReplicaDescription2, self).get_FetchRelatedObjects()
    def FindTable2(self, Name, database, Owner, Type):
        '''Method IReplicaDescription2.FindTable2

           INPUTS
            Name                : BSTR
            database            : BSTR
            Owner               : BSTR
            Type                : esriDatasetType

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescription2, self).FindTable2(Name, database, Owner, Type)
    def FindRelationshipClassInfoByName(self, Name, database, Owner):
        '''Method IReplicaDescription2.FindRelationshipClassInfoByName

           INPUTS
            Name                : BSTR
            database            : BSTR
            Owner               : BSTR

           OUTPUT
            RelDescription      : IRelationshipClassInfo**'''
        return super(IReplicaDescription2, self).FindRelationshipClassInfoByName(Name, database, Owner)
    def FindRelationshipClassInfo(self, RCName):
        '''Method IReplicaDescription2.FindRelationshipClassInfo

           INPUT
            RCName              : IRelationshipClassName*

           OUTPUT
            RelDescription      : IRelationshipClassInfo**'''
        return super(IReplicaDescription2, self).FindRelationshipClassInfo(RCName)
    def get_RelationshipClassesInfo(self):
        '''Method IReplicaDescription2.get_RelationshipClassesInfo

           OUTPUT
            EnumRelInfo         : IEnumRelationshipClassInfo**'''
        return super(IReplicaDescription2, self).get_RelationshipClassesInfo()
    def Init(self, enumNames, OutputWSName, ReuseSchema, deType):
        '''Method IReplicaDescription.Init (from IReplicaDescription)

           INPUTS
            enumNames           : IEnumName*
            OutputWSName        : IWorkspaceName*
            ReuseSchema         : VARIANT_BOOL
            deType              : esriDataExtractionType'''
        return super(IReplicaDescription2, self).Init(enumNames, OutputWSName, ReuseSchema, deType)
    def get_DatasetNames(self):
        '''Method IReplicaDescription.get_DatasetNames (from IReplicaDescription)

           OUTPUT
            enumNames           : IEnumName**'''
        return super(IReplicaDescription2, self).get_DatasetNames()
    def get_TableNameCount(self):
        '''Method IReplicaDescription.get_TableNameCount (from IReplicaDescription)

           OUTPUT
            Count               : long*'''
        return super(IReplicaDescription2, self).get_TableNameCount()
    def get_TableName(self, Index):
        '''Method IReplicaDescription.get_TableName (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            DatasetName         : IName**'''
        return super(IReplicaDescription2, self).get_TableName(Index)
    def put_TableExcluded(self, Index, exclude):
        '''Method IReplicaDescription.put_TableExcluded (from IReplicaDescription)

           INPUTS
            Index               : long
            exclude             : VARIANT_BOOL'''
        return super(IReplicaDescription2, self).put_TableExcluded(Index, exclude)
    def get_TableExcluded(self, Index):
        '''Method IReplicaDescription.get_TableExcluded (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            exclude             : VARIANT_BOOL*'''
        return super(IReplicaDescription2, self).get_TableExcluded(Index)
    def put_ReplicaModelType(self, ModelType):
        '''Method IReplicaDescription.put_ReplicaModelType (from IReplicaDescription)

           INPUT
            ModelType           : esriReplicaModelType'''
        return super(IReplicaDescription2, self).put_ReplicaModelType(ModelType)
    def get_ReplicaModelType(self):
        '''Method IReplicaDescription.get_ReplicaModelType (from IReplicaDescription)

           OUTPUT
            ModelType           : esriReplicaModelType*'''
        return super(IReplicaDescription2, self).get_ReplicaModelType()
    def FindTable(self, DatasetName):
        '''Method IReplicaDescription.FindTable (from IReplicaDescription)

           INPUT
            DatasetName         : IName*

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescription2, self).FindTable(DatasetName)
    def AddDatasetNames(self, DatasetNames):
        '''Method IReplicaDescription.AddDatasetNames (from IReplicaDescription)

           INPUT
            DatasetNames        : IEnumName*'''
        return super(IReplicaDescription2, self).AddDatasetNames(DatasetNames)
    def put_IsPrivateTable(self, Index, IsPrivate):
        '''Method IReplicaDescription.put_IsPrivateTable (from IReplicaDescription)

           INPUTS
            Index               : long
            IsPrivate           : VARIANT_BOOL'''
        return super(IReplicaDescription2, self).put_IsPrivateTable(Index, IsPrivate)
    def get_IsPrivateTable(self, Index):
        '''Method IReplicaDescription.get_IsPrivateTable (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            IsPrivate           : VARIANT_BOOL*'''
        return super(IReplicaDescription2, self).get_IsPrivateTable(Index)
    DatasetNames = property(get_DatasetNames, None, None)
    FetchRelatedObjects = property(get_FetchRelatedObjects, None, None)
    IsPrivateTable = property(None, put_IsPrivateTable, None)
    RelationshipClassesInfo = property(get_RelationshipClassesInfo, None, None)
    ReplicaModelType = property(get_ReplicaModelType, put_ReplicaModelType, None)
    TableExcluded = property(None, put_TableExcluded, None)
    TableNameCount = property(get_TableNameCount, None, None)
    IsPrivateTable = IndexProperty(get_IsPrivateTable, None)
    TableExcluded = IndexProperty(get_TableExcluded, None)
    TableName = IndexProperty(get_TableName, None)

class IReplicaDescription3(_esriGeoDatabase.IReplicaDescription3):
    _IID = uuid.UUID('b9cfadea-b314-419a-841d-517c6be19e3d')

    def __init__(self, *args, **kw):
        super(IReplicaDescription3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AccessType(self, AccessType):
        '''Method IReplicaDescription3.put_AccessType

           INPUT
            AccessType          : esriReplicaAccessType'''
        return super(IReplicaDescription3, self).put_AccessType(AccessType)
    def get_AccessType(self):
        '''Method IReplicaDescription3.get_AccessType

           OUTPUT
            AccessType          : esriReplicaAccessType*'''
        return super(IReplicaDescription3, self).get_AccessType()
    def get_FetchRelatedObjects(self):
        '''Method IReplicaDescription2.get_FetchRelatedObjects (from IReplicaDescription2)

           OUTPUT
            GetRelatedObjects   : VARIANT_BOOL*'''
        return super(IReplicaDescription3, self).get_FetchRelatedObjects()
    def FindTable2(self, Name, database, Owner, Type):
        '''Method IReplicaDescription2.FindTable2 (from IReplicaDescription2)

           INPUTS
            Name                : BSTR
            database            : BSTR
            Owner               : BSTR
            Type                : esriDatasetType

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescription3, self).FindTable2(Name, database, Owner, Type)
    def FindRelationshipClassInfoByName(self, Name, database, Owner):
        '''Method IReplicaDescription2.FindRelationshipClassInfoByName (from IReplicaDescription2)

           INPUTS
            Name                : BSTR
            database            : BSTR
            Owner               : BSTR

           OUTPUT
            RelDescription      : IRelationshipClassInfo**'''
        return super(IReplicaDescription3, self).FindRelationshipClassInfoByName(Name, database, Owner)
    def FindRelationshipClassInfo(self, RCName):
        '''Method IReplicaDescription2.FindRelationshipClassInfo (from IReplicaDescription2)

           INPUT
            RCName              : IRelationshipClassName*

           OUTPUT
            RelDescription      : IRelationshipClassInfo**'''
        return super(IReplicaDescription3, self).FindRelationshipClassInfo(RCName)
    def get_RelationshipClassesInfo(self):
        '''Method IReplicaDescription2.get_RelationshipClassesInfo (from IReplicaDescription2)

           OUTPUT
            EnumRelInfo         : IEnumRelationshipClassInfo**'''
        return super(IReplicaDescription3, self).get_RelationshipClassesInfo()
    def Init(self, enumNames, OutputWSName, ReuseSchema, deType):
        '''Method IReplicaDescription.Init (from IReplicaDescription)

           INPUTS
            enumNames           : IEnumName*
            OutputWSName        : IWorkspaceName*
            ReuseSchema         : VARIANT_BOOL
            deType              : esriDataExtractionType'''
        return super(IReplicaDescription3, self).Init(enumNames, OutputWSName, ReuseSchema, deType)
    def get_DatasetNames(self):
        '''Method IReplicaDescription.get_DatasetNames (from IReplicaDescription)

           OUTPUT
            enumNames           : IEnumName**'''
        return super(IReplicaDescription3, self).get_DatasetNames()
    def get_TableNameCount(self):
        '''Method IReplicaDescription.get_TableNameCount (from IReplicaDescription)

           OUTPUT
            Count               : long*'''
        return super(IReplicaDescription3, self).get_TableNameCount()
    def get_TableName(self, Index):
        '''Method IReplicaDescription.get_TableName (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            DatasetName         : IName**'''
        return super(IReplicaDescription3, self).get_TableName(Index)
    def put_TableExcluded(self, Index, exclude):
        '''Method IReplicaDescription.put_TableExcluded (from IReplicaDescription)

           INPUTS
            Index               : long
            exclude             : VARIANT_BOOL'''
        return super(IReplicaDescription3, self).put_TableExcluded(Index, exclude)
    def get_TableExcluded(self, Index):
        '''Method IReplicaDescription.get_TableExcluded (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            exclude             : VARIANT_BOOL*'''
        return super(IReplicaDescription3, self).get_TableExcluded(Index)
    def put_ReplicaModelType(self, ModelType):
        '''Method IReplicaDescription.put_ReplicaModelType (from IReplicaDescription)

           INPUT
            ModelType           : esriReplicaModelType'''
        return super(IReplicaDescription3, self).put_ReplicaModelType(ModelType)
    def get_ReplicaModelType(self):
        '''Method IReplicaDescription.get_ReplicaModelType (from IReplicaDescription)

           OUTPUT
            ModelType           : esriReplicaModelType*'''
        return super(IReplicaDescription3, self).get_ReplicaModelType()
    def FindTable(self, DatasetName):
        '''Method IReplicaDescription.FindTable (from IReplicaDescription)

           INPUT
            DatasetName         : IName*

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescription3, self).FindTable(DatasetName)
    def AddDatasetNames(self, DatasetNames):
        '''Method IReplicaDescription.AddDatasetNames (from IReplicaDescription)

           INPUT
            DatasetNames        : IEnumName*'''
        return super(IReplicaDescription3, self).AddDatasetNames(DatasetNames)
    def put_IsPrivateTable(self, Index, IsPrivate):
        '''Method IReplicaDescription.put_IsPrivateTable (from IReplicaDescription)

           INPUTS
            Index               : long
            IsPrivate           : VARIANT_BOOL'''
        return super(IReplicaDescription3, self).put_IsPrivateTable(Index, IsPrivate)
    def get_IsPrivateTable(self, Index):
        '''Method IReplicaDescription.get_IsPrivateTable (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            IsPrivate           : VARIANT_BOOL*'''
        return super(IReplicaDescription3, self).get_IsPrivateTable(Index)
    AccessType = property(get_AccessType, put_AccessType, None)
    DatasetNames = property(get_DatasetNames, None, None)
    FetchRelatedObjects = property(get_FetchRelatedObjects, None, None)
    IsPrivateTable = property(None, put_IsPrivateTable, None)
    RelationshipClassesInfo = property(get_RelationshipClassesInfo, None, None)
    ReplicaModelType = property(get_ReplicaModelType, put_ReplicaModelType, None)
    TableExcluded = property(None, put_TableExcluded, None)
    TableNameCount = property(get_TableNameCount, None, None)
    IsPrivateTable = IndexProperty(get_IsPrivateTable, None)
    TableExcluded = IndexProperty(get_TableExcluded, None)
    TableName = IndexProperty(get_TableName, None)

class IRasterDatasetName(_esriGeoDatabase.IRasterDatasetName):
    _IID = uuid.UUID('bc25e11e-168b-11d2-8d25-0000f8780535')
    def get_RasterBandNames(self):
        '''Method IRasterDatasetName.get_RasterBandNames

           OUTPUT
            RasterBandNames     : IEnumDatasetName**'''
        return super(IRasterDatasetName, self).get_RasterBandNames()
    RasterBandNames = property(get_RasterBandNames, None, None)

class IRasterBandName(_esriGeoDatabase.IRasterBandName):
    _IID = uuid.UUID('bc25e121-168b-11d2-8d25-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRasterBandName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterDatasetName(self):
        '''Method IRasterBandName.get_RasterDatasetName

           OUTPUT
            RasterDatasetName   : IDatasetName**'''
        return super(IRasterBandName, self).get_RasterDatasetName()
    def putref_RasterDatasetName(self, RasterDatasetName):
        '''Method IRasterBandName.putref_RasterDatasetName

           INPUT
            RasterDatasetName   : IDatasetName*'''
        return super(IRasterBandName, self).putref_RasterDatasetName(RasterDatasetName)
    def put_NameString(self, RasterDatasetName):
        '''Method IRasterBandName.put_NameString

           INPUT
            RasterDatasetName   : BSTR'''
        return super(IRasterBandName, self).put_NameString(RasterDatasetName)
    def get_NameString(self):
        '''Method IRasterBandName.get_NameString

           OUTPUT
            RasterDatasetName   : BSTR*'''
        return super(IRasterBandName, self).get_NameString()
    NameString = property(get_NameString, put_NameString, None)
    RasterDatasetName = property(get_RasterDatasetName, putref_RasterDatasetName, None)

class IFeatureDataConverter(_esriGeoDatabase.IFeatureDataConverter):
    _IID = uuid.UUID('4ed85a73-7054-11d2-aafe-00c04fa33c20')
    def ConvertFeatureDataset(self, inputFDatasetName, outputFDatasetName, OutputGeometryDef, configKey, FlushInterval, parentHWND):
        '''Method IFeatureDataConverter.ConvertFeatureDataset

           INPUTS
            inputFDatasetName   : IFeatureDatasetName*
            outputFDatasetName  : IFeatureDatasetName*
            OutputGeometryDef   : IGeometryDef*
            configKey           : BSTR
            FlushInterval       : long
            parentHWND          : OLE_HANDLE'''
        return super(IFeatureDataConverter, self).ConvertFeatureDataset(inputFDatasetName, outputFDatasetName, OutputGeometryDef, configKey, FlushInterval, parentHWND)
    def ConvertFeatureClass(self, InputDatasetName, InputQueryFilter, outputFDatasetName, outputFClassName, OutputGeometryDef, OutputFields, configKey, FlushInterval, parentHWND):
        '''Method IFeatureDataConverter.ConvertFeatureClass

           INPUTS
            InputDatasetName    : IFeatureClassName*
            InputQueryFilter    : IQueryFilter*
            outputFDatasetName  : IFeatureDatasetName*
            outputFClassName    : IFeatureClassName*
            OutputGeometryDef   : IGeometryDef*
            OutputFields        : IFields*
            configKey           : BSTR
            FlushInterval       : long
            parentHWND          : OLE_HANDLE

           OUTPUT
            EnumInvalidObject   : IEnumInvalidObject**'''
        return super(IFeatureDataConverter, self).ConvertFeatureClass(InputDatasetName, InputQueryFilter, outputFDatasetName, outputFClassName, OutputGeometryDef, OutputFields, configKey, FlushInterval, parentHWND)
    def ConvertTable(self, InputDatasetName, InputQueryFilter, OutputDatasetName, OutputFields, configKey, FlushInterval, parentHWND):
        '''Method IFeatureDataConverter.ConvertTable

           INPUTS
            InputDatasetName    : IDatasetName*
            InputQueryFilter    : IQueryFilter*
            OutputDatasetName   : IDatasetName*
            OutputFields        : IFields*
            configKey           : BSTR
            FlushInterval       : long
            parentHWND          : OLE_HANDLE

           OUTPUT
            EnumInvalidObject   : IEnumInvalidObject**'''
        return super(IFeatureDataConverter, self).ConvertTable(InputDatasetName, InputQueryFilter, OutputDatasetName, OutputFields, configKey, FlushInterval, parentHWND)

class INetworkDatasetName(_esriGeoDatabase.INetworkDatasetName):
    _IID = uuid.UUID('f0294b3e-f11d-4857-a932-b468f5abc02b')

    def __init__(self, *args, **kw):
        super(INetworkDatasetName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FeatureDatasetName(self):
        '''Method INetworkDatasetName.get_FeatureDatasetName

           OUTPUT
            Name                : IDatasetName**'''
        return super(INetworkDatasetName, self).get_FeatureDatasetName()
    def putref_FeatureDatasetName(self, Name):
        '''Method INetworkDatasetName.putref_FeatureDatasetName

           INPUT
            Name                : IDatasetName*'''
        return super(INetworkDatasetName, self).putref_FeatureDatasetName(Name)
    FeatureDatasetName = property(get_FeatureDatasetName, putref_FeatureDatasetName, None)

class IPlugInNetworkDatasetContainer(_esriGeoDatabase.IPlugInNetworkDatasetContainer):
    _IID = uuid.UUID('bd7acddc-c32a-4068-925b-9c3eb1345f04')
    def get_NetworkDatasetCount(self):
        '''Method IPlugInNetworkDatasetContainer.get_NetworkDatasetCount

           OUTPUT
            Count               : long*'''
        return super(IPlugInNetworkDatasetContainer, self).get_NetworkDatasetCount()
    def get_NetworkDataset(self, Index):
        '''Method IPlugInNetworkDatasetContainer.get_NetworkDataset

           INPUT
            Index               : long

           OUTPUT
            NetworkDataset      : INetworkDataset**'''
        return super(IPlugInNetworkDatasetContainer, self).get_NetworkDataset(Index)
    def get_NetworkDatasetByName(self, NetworkName):
        '''Method IPlugInNetworkDatasetContainer.get_NetworkDatasetByName

           INPUT
            NetworkName         : BSTR

           OUTPUT
            NetworkDataset      : INetworkDataset**'''
        return super(IPlugInNetworkDatasetContainer, self).get_NetworkDatasetByName(NetworkName)
    def get_NetworkDatasets(self):
        '''Method IPlugInNetworkDatasetContainer.get_NetworkDatasets

           OUTPUT
            NetworkDatasetNames : IEnumDataset**'''
        return super(IPlugInNetworkDatasetContainer, self).get_NetworkDatasets()
    def get_NetworkDatasetNames(self):
        '''Method IPlugInNetworkDatasetContainer.get_NetworkDatasetNames

           OUTPUT
            NetworkDatasetNames : IEnumDatasetName**'''
        return super(IPlugInNetworkDatasetContainer, self).get_NetworkDatasetNames()
    NetworkDatasetCount = property(get_NetworkDatasetCount, None, None)
    NetworkDatasetNames = property(get_NetworkDatasetNames, None, None)
    NetworkDatasets = property(get_NetworkDatasets, None, None)
    NetworkDataset = IndexProperty(get_NetworkDataset, None)
    NetworkDatasetByName = IndexProperty(get_NetworkDatasetByName, None)

class IVersionedWorkspace(_esriGeoDatabase.IVersionedWorkspace):
    _IID = uuid.UUID('1b256191-b380-11d1-9ce6-0000f8780619')
    def get_Versions(self):
        '''Method IVersionedWorkspace.get_Versions

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace, self).get_Versions()
    def get_DefaultVersion(self):
        '''Method IVersionedWorkspace.get_DefaultVersion

           OUTPUT
            DefaultVersion      : IVersion**'''
        return super(IVersionedWorkspace, self).get_DefaultVersion()
    def FindVersion(self, Name):
        '''Method IVersionedWorkspace.FindVersion

           INPUT
            Name                : BSTR

           OUTPUT
            resultVersion       : IVersion**'''
        return super(IVersionedWorkspace, self).FindVersion(Name)
    def Compress(self):
        '''Method IVersionedWorkspace.Compress'''
        return super(IVersionedWorkspace, self).Compress()
    DefaultVersion = property(get_DefaultVersion, None, None)
    Versions = property(get_Versions, None, None)

class IEnumVersionInfo(_esriGeoDatabase.IEnumVersionInfo):
    _IID = uuid.UUID('c0d27014-d933-11d1-aa7d-00c04fa37585')
    def Next(self):
        '''Method IEnumVersionInfo.Next

           OUTPUT
            info                : IVersionInfo**'''
        return super(IEnumVersionInfo, self).Next()
    def __iter__(self):
        try:
            super(IEnumVersionInfo, self).Reset()
            val = super(IEnumVersionInfo, self).Next()
            while val:
                yield val
                val = super(IEnumVersionInfo, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumVersionInfo.Reset'''
        return super(IEnumVersionInfo, self).Reset()

class IVersionInfo(_esriGeoDatabase.IVersionInfo):
    _IID = uuid.UUID('904c01cf-0ed9-11d3-9f3e-00c04f6bddd9')
    def get_VersionName(self):
        '''Method IVersionInfo.get_VersionName

           OUTPUT
            Name                : BSTR*'''
        return super(IVersionInfo, self).get_VersionName()
    def get_Description(self):
        '''Method IVersionInfo.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IVersionInfo, self).get_Description()
    def get_Access(self):
        '''Method IVersionInfo.get_Access

           OUTPUT
            Access              : esriVersionAccess*'''
        return super(IVersionInfo, self).get_Access()
    def get_Created(self):
        '''Method IVersionInfo.get_Created

           OUTPUT
            date                : VARIANT*'''
        return super(IVersionInfo, self).get_Created()
    def get_Modified(self):
        '''Method IVersionInfo.get_Modified

           OUTPUT
            date                : VARIANT*'''
        return super(IVersionInfo, self).get_Modified()
    def get_Parent(self):
        '''Method IVersionInfo.get_Parent

           OUTPUT
            Parent              : IVersionInfo**'''
        return super(IVersionInfo, self).get_Parent()
    def get_Children(self):
        '''Method IVersionInfo.get_Children

           OUTPUT
            Children            : IEnumVersionInfo**'''
        return super(IVersionInfo, self).get_Children()
    def get_Ancestors(self):
        '''Method IVersionInfo.get_Ancestors

           OUTPUT
            Ancestors           : IEnumVersionInfo**'''
        return super(IVersionInfo, self).get_Ancestors()
    def IsOwner(self):
        '''Method IVersionInfo.IsOwner

           OUTPUT
            IsOwner             : VARIANT_BOOL*'''
        return super(IVersionInfo, self).IsOwner()
    Access = property(get_Access, None, None)
    Ancestors = property(get_Ancestors, None, None)
    Children = property(get_Children, None, None)
    Created = property(get_Created, None, None)
    Description = property(get_Description, None, None)
    Modified = property(get_Modified, None, None)
    Parent = property(get_Parent, None, None)
    VersionName = property(get_VersionName, None, None)

class IVersion(_esriGeoDatabase.IVersion):
    _IID = uuid.UUID('1a945841-b381-11d1-9ce6-0000f8780619')

    def __init__(self, *args, **kw):
        super(IVersion, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_VersionLocks(self):
        '''Method IVersion.get_VersionLocks

           OUTPUT
            locks               : IEnumLockInfo**'''
        return super(IVersion, self).get_VersionLocks()
    def get_VersionInfo(self):
        '''Method IVersion.get_VersionInfo

           OUTPUT
            info                : IVersionInfo**'''
        return super(IVersion, self).get_VersionInfo()
    def get_VersionName(self):
        '''Method IVersion.get_VersionName

           OUTPUT
            Name                : BSTR*'''
        return super(IVersion, self).get_VersionName()
    def put_VersionName(self, Name):
        '''Method IVersion.put_VersionName

           INPUT
            Name                : BSTR'''
        return super(IVersion, self).put_VersionName(Name)
    def get_Description(self):
        '''Method IVersion.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(IVersion, self).get_Description()
    def put_Description(self, Description):
        '''Method IVersion.put_Description

           INPUT
            Description         : BSTR'''
        return super(IVersion, self).put_Description(Description)
    def get_Access(self):
        '''Method IVersion.get_Access

           OUTPUT
            Access              : esriVersionAccess*'''
        return super(IVersion, self).get_Access()
    def put_Access(self, Access):
        '''Method IVersion.put_Access

           INPUT
            Access              : esriVersionAccess'''
        return super(IVersion, self).put_Access(Access)
    def HasParent(self):
        '''Method IVersion.HasParent

           OUTPUT
            HasParent           : VARIANT_BOOL*'''
        return super(IVersion, self).HasParent()
    def Delete(self):
        '''Method IVersion.Delete'''
        return super(IVersion, self).Delete()
    def RefreshVersion(self):
        '''Method IVersion.RefreshVersion'''
        return super(IVersion, self).RefreshVersion()
    def CreateVersion(self, newName):
        '''Method IVersion.CreateVersion

           INPUT
            newName             : BSTR

           OUTPUT
            newVersion          : IVersion**'''
        return super(IVersion, self).CreateVersion(newName)
    Access = property(get_Access, put_Access, None)
    Description = property(get_Description, put_Description, None)
    VersionInfo = property(get_VersionInfo, None, None)
    VersionLocks = property(get_VersionLocks, None, None)
    VersionName = property(get_VersionName, put_VersionName, None)

class IVersionedObject(_esriGeoDatabase.IVersionedObject):
    _IID = uuid.UUID('4a1fb361-b863-11d1-9ce7-0000f8780619')
    def get_Version(self):
        '''Method IVersionedObject.get_Version

           OUTPUT
            Version             : IVersion**'''
        return super(IVersionedObject, self).get_Version()
    def get_IsRegisteredAsVersioned(self):
        '''Method IVersionedObject.get_IsRegisteredAsVersioned

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IVersionedObject, self).get_IsRegisteredAsVersioned()
    def RegisterAsVersioned(self, isVersioned):
        '''Method IVersionedObject.RegisterAsVersioned

           INPUT
            isVersioned         : VARIANT_BOOL'''
        return super(IVersionedObject, self).RegisterAsVersioned(isVersioned)
    IsRegisteredAsVersioned = property(get_IsRegisteredAsVersioned, None, None)
    Version = property(get_Version, None, None)

class IVersion2(_esriGeoDatabase.IVersion2):
    _IID = uuid.UUID('e21436a7-87ca-4e97-9f47-d096c8871bae')

    def __init__(self, *args, **kw):
        super(IVersion2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetCommonAncestor(self, otherVersion):
        '''Method IVersion2.GetCommonAncestor

           INPUT
            otherVersion        : IVersion*

           OUTPUT
            CommonAncestorVersion: IVersion**'''
        return super(IVersion2, self).GetCommonAncestor(otherVersion)
    def CreateChild(self, Name, initialStateVersion):
        '''Method IVersion2.CreateChild

           INPUTS
            Name                : BSTR
            initialStateVersion : IVersion*

           OUTPUT
            newChildVersion     : IVersion**'''
        return super(IVersion2, self).CreateChild(Name, initialStateVersion)
    def get_IsRedefined(self):
        '''Method IVersion2.get_IsRedefined

           OUTPUT
            isRedef             : VARIANT_BOOL*'''
        return super(IVersion2, self).get_IsRedefined()
    def get_VersionLocks(self):
        '''Method IVersion.get_VersionLocks (from IVersion)

           OUTPUT
            locks               : IEnumLockInfo**'''
        return super(IVersion2, self).get_VersionLocks()
    def get_VersionInfo(self):
        '''Method IVersion.get_VersionInfo (from IVersion)

           OUTPUT
            info                : IVersionInfo**'''
        return super(IVersion2, self).get_VersionInfo()
    def get_VersionName(self):
        '''Method IVersion.get_VersionName (from IVersion)

           OUTPUT
            Name                : BSTR*'''
        return super(IVersion2, self).get_VersionName()
    def put_VersionName(self, Name):
        '''Method IVersion.put_VersionName (from IVersion)

           INPUT
            Name                : BSTR'''
        return super(IVersion2, self).put_VersionName(Name)
    def get_Description(self):
        '''Method IVersion.get_Description (from IVersion)

           OUTPUT
            Description         : BSTR*'''
        return super(IVersion2, self).get_Description()
    def put_Description(self, Description):
        '''Method IVersion.put_Description (from IVersion)

           INPUT
            Description         : BSTR'''
        return super(IVersion2, self).put_Description(Description)
    def get_Access(self):
        '''Method IVersion.get_Access (from IVersion)

           OUTPUT
            Access              : esriVersionAccess*'''
        return super(IVersion2, self).get_Access()
    def put_Access(self, Access):
        '''Method IVersion.put_Access (from IVersion)

           INPUT
            Access              : esriVersionAccess'''
        return super(IVersion2, self).put_Access(Access)
    def HasParent(self):
        '''Method IVersion.HasParent (from IVersion)

           OUTPUT
            HasParent           : VARIANT_BOOL*'''
        return super(IVersion2, self).HasParent()
    def Delete(self):
        '''Method IVersion.Delete (from IVersion)'''
        return super(IVersion2, self).Delete()
    def RefreshVersion(self):
        '''Method IVersion.RefreshVersion (from IVersion)'''
        return super(IVersion2, self).RefreshVersion()
    def CreateVersion(self, newName):
        '''Method IVersion.CreateVersion (from IVersion)

           INPUT
            newName             : BSTR

           OUTPUT
            newVersion          : IVersion**'''
        return super(IVersion2, self).CreateVersion(newName)
    Access = property(get_Access, put_Access, None)
    Description = property(get_Description, put_Description, None)
    IsRedefined = property(get_IsRedefined, None, None)
    VersionInfo = property(get_VersionInfo, None, None)
    VersionLocks = property(get_VersionLocks, None, None)
    VersionName = property(get_VersionName, put_VersionName, None)

class IVersionInfo2(_esriGeoDatabase.IVersionInfo2):
    _IID = uuid.UUID('0d147c7b-7284-4779-8fcc-072bb6891a32')
    def get_ParentName(self):
        '''Method IVersionInfo2.get_ParentName

           OUTPUT
            ParentName          : BSTR*'''
        return super(IVersionInfo2, self).get_ParentName()
    def get_BlocksCompress(self):
        '''Method IVersionInfo2.get_BlocksCompress

           OUTPUT
            blocks              : VARIANT_BOOL*'''
        return super(IVersionInfo2, self).get_BlocksCompress()
    def get_VersionName(self):
        '''Method IVersionInfo.get_VersionName (from IVersionInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IVersionInfo2, self).get_VersionName()
    def get_Description(self):
        '''Method IVersionInfo.get_Description (from IVersionInfo)

           OUTPUT
            Description         : BSTR*'''
        return super(IVersionInfo2, self).get_Description()
    def get_Access(self):
        '''Method IVersionInfo.get_Access (from IVersionInfo)

           OUTPUT
            Access              : esriVersionAccess*'''
        return super(IVersionInfo2, self).get_Access()
    def get_Created(self):
        '''Method IVersionInfo.get_Created (from IVersionInfo)

           OUTPUT
            date                : VARIANT*'''
        return super(IVersionInfo2, self).get_Created()
    def get_Modified(self):
        '''Method IVersionInfo.get_Modified (from IVersionInfo)

           OUTPUT
            date                : VARIANT*'''
        return super(IVersionInfo2, self).get_Modified()
    def get_Parent(self):
        '''Method IVersionInfo.get_Parent (from IVersionInfo)

           OUTPUT
            Parent              : IVersionInfo**'''
        return super(IVersionInfo2, self).get_Parent()
    def get_Children(self):
        '''Method IVersionInfo.get_Children (from IVersionInfo)

           OUTPUT
            Children            : IEnumVersionInfo**'''
        return super(IVersionInfo2, self).get_Children()
    def get_Ancestors(self):
        '''Method IVersionInfo.get_Ancestors (from IVersionInfo)

           OUTPUT
            Ancestors           : IEnumVersionInfo**'''
        return super(IVersionInfo2, self).get_Ancestors()
    def IsOwner(self):
        '''Method IVersionInfo.IsOwner (from IVersionInfo)

           OUTPUT
            IsOwner             : VARIANT_BOOL*'''
        return super(IVersionInfo2, self).IsOwner()
    Access = property(get_Access, None, None)
    Ancestors = property(get_Ancestors, None, None)
    BlocksCompress = property(get_BlocksCompress, None, None)
    Children = property(get_Children, None, None)
    Created = property(get_Created, None, None)
    Description = property(get_Description, None, None)
    Modified = property(get_Modified, None, None)
    Parent = property(get_Parent, None, None)
    ParentName = property(get_ParentName, None, None)
    VersionName = property(get_VersionName, None, None)

class IEnumVersionInfo2(_esriGeoDatabase.IEnumVersionInfo2):
    _IID = uuid.UUID('eea4dfdd-a91d-44e2-a419-dcfe016efaf3')
    def get_Count(self):
        '''Method IEnumVersionInfo2.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEnumVersionInfo2, self).get_Count()
    def Next(self):
        '''Method IEnumVersionInfo.Next (from IEnumVersionInfo)

           OUTPUT
            info                : IVersionInfo**'''
        return super(IEnumVersionInfo2, self).Next()
    def __iter__(self):
        try:
            super(IEnumVersionInfo2, self).Reset()
            val = super(IEnumVersionInfo2, self).Next()
            while val:
                yield val
                val = super(IEnumVersionInfo2, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumVersionInfo.Reset (from IEnumVersionInfo)'''
        return super(IEnumVersionInfo2, self).Reset()
    Count = property(get_Count, None, None)

class IVersion3(_esriGeoDatabase.IVersion3):
    _IID = uuid.UUID('d17c7f63-6c94-4c61-8702-a06f631567ad')

    def __init__(self, *args, **kw):
        super(IVersion3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DeleteWithChildren(self):
        '''Method IVersion3.DeleteWithChildren'''
        return super(IVersion3, self).DeleteWithChildren()
    def GetCommonAncestor(self, otherVersion):
        '''Method IVersion2.GetCommonAncestor (from IVersion2)

           INPUT
            otherVersion        : IVersion*

           OUTPUT
            CommonAncestorVersion: IVersion**'''
        return super(IVersion3, self).GetCommonAncestor(otherVersion)
    def CreateChild(self, Name, initialStateVersion):
        '''Method IVersion2.CreateChild (from IVersion2)

           INPUTS
            Name                : BSTR
            initialStateVersion : IVersion*

           OUTPUT
            newChildVersion     : IVersion**'''
        return super(IVersion3, self).CreateChild(Name, initialStateVersion)
    def get_IsRedefined(self):
        '''Method IVersion2.get_IsRedefined (from IVersion2)

           OUTPUT
            isRedef             : VARIANT_BOOL*'''
        return super(IVersion3, self).get_IsRedefined()
    def get_VersionLocks(self):
        '''Method IVersion.get_VersionLocks (from IVersion)

           OUTPUT
            locks               : IEnumLockInfo**'''
        return super(IVersion3, self).get_VersionLocks()
    def get_VersionInfo(self):
        '''Method IVersion.get_VersionInfo (from IVersion)

           OUTPUT
            info                : IVersionInfo**'''
        return super(IVersion3, self).get_VersionInfo()
    def get_VersionName(self):
        '''Method IVersion.get_VersionName (from IVersion)

           OUTPUT
            Name                : BSTR*'''
        return super(IVersion3, self).get_VersionName()
    def put_VersionName(self, Name):
        '''Method IVersion.put_VersionName (from IVersion)

           INPUT
            Name                : BSTR'''
        return super(IVersion3, self).put_VersionName(Name)
    def get_Description(self):
        '''Method IVersion.get_Description (from IVersion)

           OUTPUT
            Description         : BSTR*'''
        return super(IVersion3, self).get_Description()
    def put_Description(self, Description):
        '''Method IVersion.put_Description (from IVersion)

           INPUT
            Description         : BSTR'''
        return super(IVersion3, self).put_Description(Description)
    def get_Access(self):
        '''Method IVersion.get_Access (from IVersion)

           OUTPUT
            Access              : esriVersionAccess*'''
        return super(IVersion3, self).get_Access()
    def put_Access(self, Access):
        '''Method IVersion.put_Access (from IVersion)

           INPUT
            Access              : esriVersionAccess'''
        return super(IVersion3, self).put_Access(Access)
    def HasParent(self):
        '''Method IVersion.HasParent (from IVersion)

           OUTPUT
            HasParent           : VARIANT_BOOL*'''
        return super(IVersion3, self).HasParent()
    def Delete(self):
        '''Method IVersion.Delete (from IVersion)'''
        return super(IVersion3, self).Delete()
    def RefreshVersion(self):
        '''Method IVersion.RefreshVersion (from IVersion)'''
        return super(IVersion3, self).RefreshVersion()
    def CreateVersion(self, newName):
        '''Method IVersion.CreateVersion (from IVersion)

           INPUT
            newName             : BSTR

           OUTPUT
            newVersion          : IVersion**'''
        return super(IVersion3, self).CreateVersion(newName)
    Access = property(get_Access, put_Access, None)
    Description = property(get_Description, put_Description, None)
    IsRedefined = property(get_IsRedefined, None, None)
    VersionInfo = property(get_VersionInfo, None, None)
    VersionLocks = property(get_VersionLocks, None, None)
    VersionName = property(get_VersionName, put_VersionName, None)

class IVersionedWorkspace2(_esriGeoDatabase.IVersionedWorkspace2):
    _IID = uuid.UUID('9d039f1b-8b1e-494d-81b1-c6b6ae7c167a')
    def get_RecommendedReconcileOrder(self):
        '''Method IVersionedWorkspace2.get_RecommendedReconcileOrder

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace2, self).get_RecommendedReconcileOrder()
    def get_Versions(self):
        '''Method IVersionedWorkspace.get_Versions (from IVersionedWorkspace)

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace2, self).get_Versions()
    def get_DefaultVersion(self):
        '''Method IVersionedWorkspace.get_DefaultVersion (from IVersionedWorkspace)

           OUTPUT
            DefaultVersion      : IVersion**'''
        return super(IVersionedWorkspace2, self).get_DefaultVersion()
    def FindVersion(self, Name):
        '''Method IVersionedWorkspace.FindVersion (from IVersionedWorkspace)

           INPUT
            Name                : BSTR

           OUTPUT
            resultVersion       : IVersion**'''
        return super(IVersionedWorkspace2, self).FindVersion(Name)
    def Compress(self):
        '''Method IVersionedWorkspace.Compress (from IVersionedWorkspace)'''
        return super(IVersionedWorkspace2, self).Compress()
    DefaultVersion = property(get_DefaultVersion, None, None)
    RecommendedReconcileOrder = property(get_RecommendedReconcileOrder, None, None)
    Versions = property(get_Versions, None, None)

class IVersionedWorkspace3(_esriGeoDatabase.IVersionedWorkspace3):
    _IID = uuid.UUID('5e1f7e4f-213e-4f46-a1ca-294c997c1823')
    def get_RecommendedSyncOrder(self):
        '''Method IVersionedWorkspace3.get_RecommendedSyncOrder

           OUTPUT
            ReplicaNameEnum     : IEnumBSTR**'''
        return super(IVersionedWorkspace3, self).get_RecommendedSyncOrder()
    def get_RecommendedReconcileOrder(self):
        '''Method IVersionedWorkspace2.get_RecommendedReconcileOrder (from IVersionedWorkspace2)

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace3, self).get_RecommendedReconcileOrder()
    def get_Versions(self):
        '''Method IVersionedWorkspace.get_Versions (from IVersionedWorkspace)

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace3, self).get_Versions()
    def get_DefaultVersion(self):
        '''Method IVersionedWorkspace.get_DefaultVersion (from IVersionedWorkspace)

           OUTPUT
            DefaultVersion      : IVersion**'''
        return super(IVersionedWorkspace3, self).get_DefaultVersion()
    def FindVersion(self, Name):
        '''Method IVersionedWorkspace.FindVersion (from IVersionedWorkspace)

           INPUT
            Name                : BSTR

           OUTPUT
            resultVersion       : IVersion**'''
        return super(IVersionedWorkspace3, self).FindVersion(Name)
    def Compress(self):
        '''Method IVersionedWorkspace.Compress (from IVersionedWorkspace)'''
        return super(IVersionedWorkspace3, self).Compress()
    DefaultVersion = property(get_DefaultVersion, None, None)
    RecommendedReconcileOrder = property(get_RecommendedReconcileOrder, None, None)
    RecommendedSyncOrder = property(get_RecommendedSyncOrder, None, None)
    Versions = property(get_Versions, None, None)

class IVersionedWorkspace4(_esriGeoDatabase.IVersionedWorkspace4):
    _IID = uuid.UUID('a86a6e1b-702a-453f-8faf-bd2100b439b3')
    def get_DescendantVersions(self, Version, orderForReconcileAndPost):
        '''Method IVersionedWorkspace4.get_DescendantVersions

           INPUTS
            Version             : BSTR
            orderForReconcileAndPost: VARIANT_BOOL

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace4, self).get_DescendantVersions(Version, orderForReconcileAndPost)
    def get_ParentVersions(self):
        '''Method IVersionedWorkspace4.get_ParentVersions

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace4, self).get_ParentVersions()
    def get_RecommendedSyncOrder(self):
        '''Method IVersionedWorkspace3.get_RecommendedSyncOrder (from IVersionedWorkspace3)

           OUTPUT
            ReplicaNameEnum     : IEnumBSTR**'''
        return super(IVersionedWorkspace4, self).get_RecommendedSyncOrder()
    def get_RecommendedReconcileOrder(self):
        '''Method IVersionedWorkspace2.get_RecommendedReconcileOrder (from IVersionedWorkspace2)

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace4, self).get_RecommendedReconcileOrder()
    def get_Versions(self):
        '''Method IVersionedWorkspace.get_Versions (from IVersionedWorkspace)

           OUTPUT
            infoEnum            : IEnumVersionInfo**'''
        return super(IVersionedWorkspace4, self).get_Versions()
    def get_DefaultVersion(self):
        '''Method IVersionedWorkspace.get_DefaultVersion (from IVersionedWorkspace)

           OUTPUT
            DefaultVersion      : IVersion**'''
        return super(IVersionedWorkspace4, self).get_DefaultVersion()
    def FindVersion(self, Name):
        '''Method IVersionedWorkspace.FindVersion (from IVersionedWorkspace)

           INPUT
            Name                : BSTR

           OUTPUT
            resultVersion       : IVersion**'''
        return super(IVersionedWorkspace4, self).FindVersion(Name)
    def Compress(self):
        '''Method IVersionedWorkspace.Compress (from IVersionedWorkspace)'''
        return super(IVersionedWorkspace4, self).Compress()
    DefaultVersion = property(get_DefaultVersion, None, None)
    ParentVersions = property(get_ParentVersions, None, None)
    RecommendedReconcileOrder = property(get_RecommendedReconcileOrder, None, None)
    RecommendedSyncOrder = property(get_RecommendedSyncOrder, None, None)
    Versions = property(get_Versions, None, None)

class IVersionedObject2(_esriGeoDatabase.IVersionedObject2):
    _IID = uuid.UUID('884d388e-8918-443a-8f4a-db5aac5b9d5e')
    def get_HasUncompressedEdits(self):
        '''Method IVersionedObject2.get_HasUncompressedEdits

           OUTPUT
            HasUncompressedEdits: VARIANT_BOOL*'''
        return super(IVersionedObject2, self).get_HasUncompressedEdits()
    def get_Version(self):
        '''Method IVersionedObject.get_Version (from IVersionedObject)

           OUTPUT
            Version             : IVersion**'''
        return super(IVersionedObject2, self).get_Version()
    def get_IsRegisteredAsVersioned(self):
        '''Method IVersionedObject.get_IsRegisteredAsVersioned (from IVersionedObject)

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IVersionedObject2, self).get_IsRegisteredAsVersioned()
    def RegisterAsVersioned(self, isVersioned):
        '''Method IVersionedObject.RegisterAsVersioned (from IVersionedObject)

           INPUT
            isVersioned         : VARIANT_BOOL'''
        return super(IVersionedObject2, self).RegisterAsVersioned(isVersioned)
    HasUncompressedEdits = property(get_HasUncompressedEdits, None, None)
    IsRegisteredAsVersioned = property(get_IsRegisteredAsVersioned, None, None)
    Version = property(get_Version, None, None)

class IVersionedObject3(_esriGeoDatabase.IVersionedObject3):
    _IID = uuid.UUID('092d0bf9-9e6c-42be-aa79-2f8167e0ff75')
    def SupportsMovingEditsToBase(self):
        '''Method IVersionedObject3.SupportsMovingEditsToBase

           OUTPUT
            CanMove             : VARIANT_BOOL*'''
        return super(IVersionedObject3, self).SupportsMovingEditsToBase()
    def RegisterAsVersioned3(self, moveEditsToBase):
        '''Method IVersionedObject3.RegisterAsVersioned3

           INPUT
            moveEditsToBase     : VARIANT_BOOL'''
        return super(IVersionedObject3, self).RegisterAsVersioned3(moveEditsToBase)
    def UnRegisterAsVersioned3(self, compressDefault):
        '''Method IVersionedObject3.UnRegisterAsVersioned3

           INPUT
            compressDefault     : VARIANT_BOOL'''
        return super(IVersionedObject3, self).UnRegisterAsVersioned3(compressDefault)
    def GetVersionRegistrationInfo(self):
        '''Method IVersionedObject3.GetVersionRegistrationInfo

           OUTPUTS
            isRegistered        : VARIANT_BOOL*
            isMovingEditsToBase : VARIANT_BOOL*'''
        return super(IVersionedObject3, self).GetVersionRegistrationInfo()
    def get_HasUncompressedEdits(self):
        '''Method IVersionedObject2.get_HasUncompressedEdits (from IVersionedObject2)

           OUTPUT
            HasUncompressedEdits: VARIANT_BOOL*'''
        return super(IVersionedObject3, self).get_HasUncompressedEdits()
    def get_Version(self):
        '''Method IVersionedObject.get_Version (from IVersionedObject)

           OUTPUT
            Version             : IVersion**'''
        return super(IVersionedObject3, self).get_Version()
    def get_IsRegisteredAsVersioned(self):
        '''Method IVersionedObject.get_IsRegisteredAsVersioned (from IVersionedObject)

           OUTPUT
            isRegistered        : VARIANT_BOOL*'''
        return super(IVersionedObject3, self).get_IsRegisteredAsVersioned()
    def RegisterAsVersioned(self, isVersioned):
        '''Method IVersionedObject.RegisterAsVersioned (from IVersionedObject)

           INPUT
            isVersioned         : VARIANT_BOOL'''
        return super(IVersionedObject3, self).RegisterAsVersioned(isVersioned)
    HasUncompressedEdits = property(get_HasUncompressedEdits, None, None)
    IsRegisteredAsVersioned = property(get_IsRegisteredAsVersioned, None, None)
    Version = property(get_Version, None, None)

class IDataChangesEx(_esriGeoDatabase.IDataChangesEx):
    _IID = uuid.UUID('5b0c36b9-2891-4653-8757-97117924fe7a')
    def get_ModifiedClasses(self):
        '''Method IDataChangesEx.get_ModifiedClasses

           OUTPUT
            ModifiedClasses     : IEnumBSTR**'''
        return super(IDataChangesEx, self).get_ModifiedClasses()
    def get_ChangedIDs(self, ClassName, DiffType):
        '''Method IDataChangesEx.get_ChangedIDs

           INPUTS
            ClassName           : BSTR
            DiffType            : esriDifferenceType

           OUTPUT
            FIDSet              : IFIDSet**'''
        return super(IDataChangesEx, self).get_ChangedIDs(ClassName, DiffType)
    def Extract(self, ClassName, DiffType):
        '''Method IDataChangesEx.Extract

           INPUTS
            ClassName           : BSTR
            DiffType            : esriDifferenceType

           OUTPUT
            diffCursor          : IDifferenceCursor**'''
        return super(IDataChangesEx, self).Extract(ClassName, DiffType)
    def ExtractEx(self, ClassName, DiffType):
        '''Method IDataChangesEx.ExtractEx

           INPUTS
            ClassName           : BSTR
            DiffType            : esriDifferenceType

           OUTPUT
            diffCursor          : IDifferenceCursorEx**'''
        return super(IDataChangesEx, self).ExtractEx(ClassName, DiffType)
    ModifiedClasses = property(get_ModifiedClasses, None, None)

class IWorkspaceEdit2(_esriGeoDatabase.IWorkspaceEdit2):
    _IID = uuid.UUID('199a1f9d-435a-4118-9b3f-4e0b8f984aa0')
    def get_IsInEditOperation(self):
        '''Method IWorkspaceEdit2.get_IsInEditOperation

           OUTPUT
            inEditOp            : VARIANT_BOOL*'''
        return super(IWorkspaceEdit2, self).get_IsInEditOperation()
    def get_EditDataChanges(self, editChangeType):
        '''Method IWorkspaceEdit2.get_EditDataChanges

           INPUT
            editChangeType      : esriEditDataChangesType

           OUTPUT
            EditDataChanges     : IDataChangesEx**'''
        return super(IWorkspaceEdit2, self).get_EditDataChanges(editChangeType)
    def StartEditing(self, withUndoRedo):
        '''Method IWorkspaceEdit.StartEditing (from IWorkspaceEdit)

           INPUT
            withUndoRedo        : VARIANT_BOOL'''
        return super(IWorkspaceEdit2, self).StartEditing(withUndoRedo)
    def StopEditing(self, saveEdits):
        '''Method IWorkspaceEdit.StopEditing (from IWorkspaceEdit)

           INPUT
            saveEdits           : VARIANT_BOOL'''
        return super(IWorkspaceEdit2, self).StopEditing(saveEdits)
    def IsBeingEdited(self):
        '''Method IWorkspaceEdit.IsBeingEdited (from IWorkspaceEdit)

           OUTPUT
            IsBeingEdited       : VARIANT_BOOL*'''
        return super(IWorkspaceEdit2, self).IsBeingEdited()
    def StartEditOperation(self):
        '''Method IWorkspaceEdit.StartEditOperation (from IWorkspaceEdit)'''
        return super(IWorkspaceEdit2, self).StartEditOperation()
    def StopEditOperation(self):
        '''Method IWorkspaceEdit.StopEditOperation (from IWorkspaceEdit)'''
        return super(IWorkspaceEdit2, self).StopEditOperation()
    def AbortEditOperation(self):
        '''Method IWorkspaceEdit.AbortEditOperation (from IWorkspaceEdit)'''
        return super(IWorkspaceEdit2, self).AbortEditOperation()
    def HasUndos(self):
        '''Method IWorkspaceEdit.HasUndos (from IWorkspaceEdit)

           OUTPUT
            HasUndos            : VARIANT_BOOL*'''
        return super(IWorkspaceEdit2, self).HasUndos()
    def UndoEditOperation(self):
        '''Method IWorkspaceEdit.UndoEditOperation (from IWorkspaceEdit)'''
        return super(IWorkspaceEdit2, self).UndoEditOperation()
    def HasRedos(self):
        '''Method IWorkspaceEdit.HasRedos (from IWorkspaceEdit)

           OUTPUT
            HasRedos            : VARIANT_BOOL*'''
        return super(IWorkspaceEdit2, self).HasRedos()
    def RedoEditOperation(self):
        '''Method IWorkspaceEdit.RedoEditOperation (from IWorkspaceEdit)'''
        return super(IWorkspaceEdit2, self).RedoEditOperation()
    def EnableUndoRedo(self):
        '''Method IWorkspaceEdit.EnableUndoRedo (from IWorkspaceEdit)'''
        return super(IWorkspaceEdit2, self).EnableUndoRedo()
    def DisableUndoRedo(self):
        '''Method IWorkspaceEdit.DisableUndoRedo (from IWorkspaceEdit)'''
        return super(IWorkspaceEdit2, self).DisableUndoRedo()
    def HasEdits(self):
        '''Method IWorkspaceEdit.HasEdits (from IWorkspaceEdit)

           OUTPUT
            HasEdits            : VARIANT_BOOL*'''
        return super(IWorkspaceEdit2, self).HasEdits()
    IsInEditOperation = property(get_IsInEditOperation, None, None)
    EditDataChanges = IndexProperty(get_EditDataChanges, None)

class IDifferenceCursor(_esriGeoDatabase.IDifferenceCursor):
    _IID = uuid.UUID('3791e745-7995-11d2-aade-00c04fa37585')
    def Next(self):
        '''Method IDifferenceCursor.Next

           OUTPUTS
            OID                 : long*
            differenceRow       : IRow**'''
        return super(IDifferenceCursor, self).Next()
    def __iter__(self):
        try:
            val = super(IDifferenceCursor, self).Next()
            while any(val):
                yield val
                val = super(IDifferenceCursor, self).Next()
        except:
            pass

class IRow(_esriGeoDatabase.IRow):
    _IID = uuid.UUID('fcb01cb4-9f0b-11d0-bec7-00805f7c4268')

    def __init__(self, *args, **kw):
        super(IRow, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_HasOID(self):
        '''Method IRow.get_HasOID

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IRow, self).get_HasOID()
    def get_OID(self):
        '''Method IRow.get_OID

           OUTPUT
            OID                 : long*'''
        return super(IRow, self).get_OID()
    def get_Table(self):
        '''Method IRow.get_Table

           OUTPUT
            Table               : ITable**'''
        return super(IRow, self).get_Table()
    def Store(self):
        '''Method IRow.Store'''
        return super(IRow, self).Store()
    def Delete(self):
        '''Method IRow.Delete'''
        return super(IRow, self).Delete()
    def get_Value(self, Index):
        '''Method IRowBuffer.get_Value (from IRowBuffer)

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IRow, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method IRowBuffer.put_Value (from IRowBuffer)

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IRow, self).put_Value(Index, Value)
    def get_Fields(self):
        '''Method IRowBuffer.get_Fields (from IRowBuffer)

           OUTPUT
            Fields              : IFields**'''
        return super(IRow, self).get_Fields()
    Fields = property(get_Fields, None, None)
    HasOID = property(get_HasOID, None, None)
    OID = property(get_OID, None, None)
    Table = property(get_Table, None, None)
    Value = property(None, put_Value, None)
    Value = IndexProperty(get_Value, None)

class ICursor(_esriGeoDatabase.ICursor):
    _IID = uuid.UUID('d4803ee7-79f4-11d0-97fc-0080c7f79481')
    def FindField(self, Name):
        '''Method ICursor.FindField

           INPUT
            Name                : BSTR

           OUTPUT
            FieldIndex          : long*'''
        return super(ICursor, self).FindField(Name)
    def get_Fields(self):
        '''Method ICursor.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(ICursor, self).get_Fields()
    def NextRow(self):
        '''Method ICursor.NextRow

           OUTPUT
            Row                 : IRow**'''
        return super(ICursor, self).NextRow()
    def UpdateRow(self, Row):
        '''Method ICursor.UpdateRow

           INPUT
            Row                 : IRow*'''
        return super(ICursor, self).UpdateRow(Row)
    def DeleteRow(self):
        '''Method ICursor.DeleteRow'''
        return super(ICursor, self).DeleteRow()
    def InsertRow(self, buffer):
        '''Method ICursor.InsertRow

           INPUT
            buffer              : IRowBuffer*

           OUTPUT
            OID                 : VARIANT*'''
        return super(ICursor, self).InsertRow(buffer)
    def Flush(self):
        '''Method ICursor.Flush'''
        return super(ICursor, self).Flush()
    Fields = property(get_Fields, None, None)

class IDifferenceCursorEx(_esriGeoDatabase.IDifferenceCursorEx):
    _IID = uuid.UUID('810856ce-680b-443b-930d-cd26b1b0c412')
    def Next(self):
        '''Method IDifferenceCursorEx.Next

           OUTPUTS
            OID                 : long*
            SourceRow           : IRow**
            differenceRow       : IRow**
            differentValueIndices: ILongArray**'''
        return super(IDifferenceCursorEx, self).Next()
    def __iter__(self):
        try:
            val = super(IDifferenceCursorEx, self).Next()
            while any(val):
                yield val
                val = super(IDifferenceCursorEx, self).Next()
        except:
            pass

class IRelClassEnumRowPairs(_esriGeoDatabase.IRelClassEnumRowPairs):
    _IID = uuid.UUID('a53a808e-13c4-11d3-a0de-0000f8775bf9')
    def Next(self):
        '''Method IRelClassEnumRowPairs.Next

           OUTPUTS
            SourceRow           : IRow**
            targetRow           : IRow**'''
        return super(IRelClassEnumRowPairs, self).Next()
    def __iter__(self):
        try:
            super(IRelClassEnumRowPairs, self).Reset()
            val = super(IRelClassEnumRowPairs, self).Next()
            while any(val):
                yield val
                val = super(IRelClassEnumRowPairs, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IRelClassEnumRowPairs.Reset'''
        return super(IRelClassEnumRowPairs, self).Reset()

class IQueryDef(_esriGeoDatabase.IQueryDef):
    _IID = uuid.UUID('97103d51-3a9e-11d1-8816-0000f877762d')

    def __init__(self, *args, **kw):
        super(IQueryDef, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Tables(self):
        '''Method IQueryDef.get_Tables

           OUTPUT
            Tables              : BSTR*'''
        return super(IQueryDef, self).get_Tables()
    def put_Tables(self, Tables):
        '''Method IQueryDef.put_Tables

           INPUT
            Tables              : BSTR'''
        return super(IQueryDef, self).put_Tables(Tables)
    def get_SubFields(self):
        '''Method IQueryDef.get_SubFields

           OUTPUT
            SubFields           : BSTR*'''
        return super(IQueryDef, self).get_SubFields()
    def put_SubFields(self, SubFields):
        '''Method IQueryDef.put_SubFields

           INPUT
            SubFields           : BSTR'''
        return super(IQueryDef, self).put_SubFields(SubFields)
    def get_WhereClause(self):
        '''Method IQueryDef.get_WhereClause

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IQueryDef, self).get_WhereClause()
    def put_WhereClause(self, WhereClause):
        '''Method IQueryDef.put_WhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(IQueryDef, self).put_WhereClause(WhereClause)
    def Evaluate(self):
        '''Method IQueryDef.Evaluate

           OUTPUT
            Cursor              : ICursor**'''
        return super(IQueryDef, self).Evaluate()
    SubFields = property(get_SubFields, put_SubFields, None)
    Tables = property(get_Tables, put_Tables, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class ITableWrite(_esriGeoDatabase.ITableWrite):
    _IID = uuid.UUID('d4c2be91-c50c-11d1-8876-0000f877762d')
    def DeleteRows(self, Rows):
        '''Method ITableWrite.DeleteRows

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite, self).DeleteRows(Rows)
    def RemoveDeletedRows(self, Rows):
        '''Method ITableWrite.RemoveDeletedRows

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite, self).RemoveDeletedRows(Rows)
    def WriteMovedRows(self, Rows, moveVector):
        '''Method ITableWrite.WriteMovedRows

           INPUTS
            Rows                : ISet*
            moveVector          : ILine*'''
        return super(ITableWrite, self).WriteMovedRows(Rows, moveVector)
    def WriteRotatedRows(self, Rows, Origin, Angle):
        '''Method ITableWrite.WriteRotatedRows

           INPUTS
            Rows                : ISet*
            Origin              : IPoint*
            Angle               : double'''
        return super(ITableWrite, self).WriteRotatedRows(Rows, Origin, Angle)
    def WriteChangedRows(self, Rows):
        '''Method ITableWrite.WriteChangedRows

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite, self).WriteChangedRows(Rows)
    def WriteRow(self, Row):
        '''Method ITableWrite.WriteRow

           INPUT
            Row                 : IRow*'''
        return super(ITableWrite, self).WriteRow(Row)
    def WriteRows(self, Rows):
        '''Method ITableWrite.WriteRows

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite, self).WriteRows(Rows)
    def RemoveRow(self, Row):
        '''Method ITableWrite.RemoveRow

           INPUT
            Row                 : IRow*'''
        return super(ITableWrite, self).RemoveRow(Row)
    def RemoveRows(self, Rows):
        '''Method ITableWrite.RemoveRows

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite, self).RemoveRows(Rows)
    def UpdateRows(self, QueryFilter, Recycling):
        '''Method ITableWrite.UpdateRows

           INPUTS
            QueryFilter         : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITableWrite, self).UpdateRows(QueryFilter, Recycling)
    def InsertRows(self, useBuffering):
        '''Method ITableWrite.InsertRows

           INPUT
            useBuffering        : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITableWrite, self).InsertRows(useBuffering)

class IQueryDef2(_esriGeoDatabase.IQueryDef2):
    _IID = uuid.UUID('d825c680-72a9-4870-b71c-e3da72a00eee')

    def __init__(self, *args, **kw):
        super(IQueryDef2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PrefixClause(self):
        '''Method IQueryDef2.get_PrefixClause

           OUTPUT
            clause              : BSTR*'''
        return super(IQueryDef2, self).get_PrefixClause()
    def put_PrefixClause(self, clause):
        '''Method IQueryDef2.put_PrefixClause

           INPUT
            clause              : BSTR'''
        return super(IQueryDef2, self).put_PrefixClause(clause)
    def get_PostfixClause(self):
        '''Method IQueryDef2.get_PostfixClause

           OUTPUT
            clause              : BSTR*'''
        return super(IQueryDef2, self).get_PostfixClause()
    def put_PostfixClause(self, clause):
        '''Method IQueryDef2.put_PostfixClause

           INPUT
            clause              : BSTR'''
        return super(IQueryDef2, self).put_PostfixClause(clause)
    def Evaluate2(self, Recycling):
        '''Method IQueryDef2.Evaluate2

           INPUT
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(IQueryDef2, self).Evaluate2(Recycling)
    def get_Tables(self):
        '''Method IQueryDef.get_Tables (from IQueryDef)

           OUTPUT
            Tables              : BSTR*'''
        return super(IQueryDef2, self).get_Tables()
    def put_Tables(self, Tables):
        '''Method IQueryDef.put_Tables (from IQueryDef)

           INPUT
            Tables              : BSTR'''
        return super(IQueryDef2, self).put_Tables(Tables)
    def get_SubFields(self):
        '''Method IQueryDef.get_SubFields (from IQueryDef)

           OUTPUT
            SubFields           : BSTR*'''
        return super(IQueryDef2, self).get_SubFields()
    def put_SubFields(self, SubFields):
        '''Method IQueryDef.put_SubFields (from IQueryDef)

           INPUT
            SubFields           : BSTR'''
        return super(IQueryDef2, self).put_SubFields(SubFields)
    def get_WhereClause(self):
        '''Method IQueryDef.get_WhereClause (from IQueryDef)

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IQueryDef2, self).get_WhereClause()
    def put_WhereClause(self, WhereClause):
        '''Method IQueryDef.put_WhereClause (from IQueryDef)

           INPUT
            WhereClause         : BSTR'''
        return super(IQueryDef2, self).put_WhereClause(WhereClause)
    def Evaluate(self):
        '''Method IQueryDef.Evaluate (from IQueryDef)

           OUTPUT
            Cursor              : ICursor**'''
        return super(IQueryDef2, self).Evaluate()
    PostfixClause = property(get_PostfixClause, put_PostfixClause, None)
    PrefixClause = property(get_PrefixClause, put_PrefixClause, None)
    SubFields = property(get_SubFields, put_SubFields, None)
    Tables = property(get_Tables, put_Tables, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IQueryName(_esriGeoDatabase.IQueryName):
    _IID = uuid.UUID('c833c1f6-90b8-11d3-9f7b-00c04f6bc886')

    def __init__(self, *args, **kw):
        super(IQueryName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_QueryDef(self):
        '''Method IQueryName.get_QueryDef

           OUTPUT
            QueryDef            : IQueryDef**'''
        return super(IQueryName, self).get_QueryDef()
    def put_QueryDef(self, QueryDef):
        '''Method IQueryName.put_QueryDef

           INPUT
            QueryDef            : IQueryDef*'''
        return super(IQueryName, self).put_QueryDef(QueryDef)
    QueryDef = property(get_QueryDef, put_QueryDef, None)

class IQueryName2(_esriGeoDatabase.IQueryName2):
    _IID = uuid.UUID('c1e0f902-0857-434e-84db-351b6747f155')

    def __init__(self, *args, **kw):
        super(IQueryName2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CopyLocally(self, CopyLocally):
        '''Method IQueryName2.put_CopyLocally

           INPUT
            CopyLocally         : VARIANT_BOOL'''
        return super(IQueryName2, self).put_CopyLocally(CopyLocally)
    def get_CopyLocally(self):
        '''Method IQueryName2.get_CopyLocally

           OUTPUT
            CopyLocally         : VARIANT_BOOL*'''
        return super(IQueryName2, self).get_CopyLocally()
    def put_PrimaryKey(self, fieldNames):
        '''Method IQueryName2.put_PrimaryKey

           INPUT
            fieldNames          : BSTR'''
        return super(IQueryName2, self).put_PrimaryKey(fieldNames)
    def get_PrimaryKey(self):
        '''Method IQueryName2.get_PrimaryKey

           OUTPUT
            fieldNames          : BSTR*'''
        return super(IQueryName2, self).get_PrimaryKey()
    def get_QueryDef(self):
        '''Method IQueryName.get_QueryDef (from IQueryName)

           OUTPUT
            QueryDef            : IQueryDef**'''
        return super(IQueryName2, self).get_QueryDef()
    def put_QueryDef(self, QueryDef):
        '''Method IQueryName.put_QueryDef (from IQueryName)

           INPUT
            QueryDef            : IQueryDef*'''
        return super(IQueryName2, self).put_QueryDef(QueryDef)
    CopyLocally = property(get_CopyLocally, put_CopyLocally, None)
    PrimaryKey = property(get_PrimaryKey, put_PrimaryKey, None)
    QueryDef = property(get_QueryDef, put_QueryDef, None)

class IAttributeRule(_esriGeoDatabase.IAttributeRule):
    _IID = uuid.UUID('9ed62772-475d-11d2-9932-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IAttributeRule, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DomainName(self):
        '''Method IAttributeRule.get_DomainName

           OUTPUT
            Name                : BSTR*'''
        return super(IAttributeRule, self).get_DomainName()
    def put_DomainName(self, Name):
        '''Method IAttributeRule.put_DomainName

           INPUT
            Name                : BSTR'''
        return super(IAttributeRule, self).put_DomainName(Name)
    def get_FieldName(self):
        '''Method IAttributeRule.get_FieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IAttributeRule, self).get_FieldName()
    def put_FieldName(self, Name):
        '''Method IAttributeRule.put_FieldName

           INPUT
            Name                : BSTR'''
        return super(IAttributeRule, self).put_FieldName(Name)
    def get_SubtypeCode(self):
        '''Method IAttributeRule.get_SubtypeCode

           OUTPUT
            Value               : long*'''
        return super(IAttributeRule, self).get_SubtypeCode()
    def put_SubtypeCode(self, Value):
        '''Method IAttributeRule.put_SubtypeCode

           INPUT
            Value               : long'''
        return super(IAttributeRule, self).put_SubtypeCode(Value)
    def Validate(self, Row):
        '''Method IAttributeRule.Validate

           INPUT
            Row                 : IRow*

           OUTPUTS
            errorMessage        : BSTR*
            isValid             : VARIANT_BOOL*'''
        return super(IAttributeRule, self).Validate(Row)
    def get_Category(self):
        '''Method IRule.get_Category (from IRule)

           OUTPUT
            groupBitmap         : long*'''
        return super(IAttributeRule, self).get_Category()
    def put_Category(self, groupBitmap):
        '''Method IRule.put_Category (from IRule)

           INPUT
            groupBitmap         : long'''
        return super(IAttributeRule, self).put_Category(groupBitmap)
    def get_Helpstring(self):
        '''Method IRule.get_Helpstring (from IRule)

           OUTPUT
            Helpstring          : BSTR*'''
        return super(IAttributeRule, self).get_Helpstring()
    def put_Helpstring(self, Helpstring):
        '''Method IRule.put_Helpstring (from IRule)

           INPUT
            Helpstring          : BSTR'''
        return super(IAttributeRule, self).put_Helpstring(Helpstring)
    def get_ID(self):
        '''Method IRule.get_ID (from IRule)

           OUTPUT
            ID                  : long*'''
        return super(IAttributeRule, self).get_ID()
    def put_ID(self, ID):
        '''Method IRule.put_ID (from IRule)

           INPUT
            ID                  : long'''
        return super(IAttributeRule, self).put_ID(ID)
    def get_Type(self):
        '''Method IRule.get_Type (from IRule)

           OUTPUT
            Type                : esriRuleType*'''
        return super(IAttributeRule, self).get_Type()
    Category = property(get_Category, put_Category, None)
    DomainName = property(get_DomainName, put_DomainName, None)
    FieldName = property(get_FieldName, put_FieldName, None)
    Helpstring = property(get_Helpstring, put_Helpstring, None)
    ID = property(get_ID, put_ID, None)
    SubtypeCode = property(get_SubtypeCode, put_SubtypeCode, None)
    Type = property(get_Type, None, None)

class ITableUtil(_esriGeoDatabase.ITableUtil):
    _IID = uuid.UUID('d3cb0fc1-8c02-11d3-9f91-00c04f6bdf0c')
    def GetRow(self, OID, SpatialReference):
        '''Method ITableUtil.GetRow

           INPUTS
            OID                 : long
            SpatialReference    : ISpatialReference*

           OUTPUT
            Row                 : IRow**'''
        return super(ITableUtil, self).GetRow(OID, SpatialReference)
    def GetRows(self, oids, Recycling, SpatialReference):
        '''Method ITableUtil.GetRows

           INPUTS
            oids                : VARIANT
            Recycling           : VARIANT_BOOL
            SpatialReference    : ISpatialReference*

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITableUtil, self).GetRows(oids, Recycling, SpatialReference)

class ITableWrite2(_esriGeoDatabase.ITableWrite2):
    _IID = uuid.UUID('02e142c4-f7e9-4d67-ab25-7f88b839ee54')
    def Truncate(self):
        '''Method ITableWrite2.Truncate'''
        return super(ITableWrite2, self).Truncate()
    def DeleteRows(self, Rows):
        '''Method ITableWrite.DeleteRows (from ITableWrite)

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite2, self).DeleteRows(Rows)
    def RemoveDeletedRows(self, Rows):
        '''Method ITableWrite.RemoveDeletedRows (from ITableWrite)

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite2, self).RemoveDeletedRows(Rows)
    def WriteMovedRows(self, Rows, moveVector):
        '''Method ITableWrite.WriteMovedRows (from ITableWrite)

           INPUTS
            Rows                : ISet*
            moveVector          : ILine*'''
        return super(ITableWrite2, self).WriteMovedRows(Rows, moveVector)
    def WriteRotatedRows(self, Rows, Origin, Angle):
        '''Method ITableWrite.WriteRotatedRows (from ITableWrite)

           INPUTS
            Rows                : ISet*
            Origin              : IPoint*
            Angle               : double'''
        return super(ITableWrite2, self).WriteRotatedRows(Rows, Origin, Angle)
    def WriteChangedRows(self, Rows):
        '''Method ITableWrite.WriteChangedRows (from ITableWrite)

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite2, self).WriteChangedRows(Rows)
    def WriteRow(self, Row):
        '''Method ITableWrite.WriteRow (from ITableWrite)

           INPUT
            Row                 : IRow*'''
        return super(ITableWrite2, self).WriteRow(Row)
    def WriteRows(self, Rows):
        '''Method ITableWrite.WriteRows (from ITableWrite)

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite2, self).WriteRows(Rows)
    def RemoveRow(self, Row):
        '''Method ITableWrite.RemoveRow (from ITableWrite)

           INPUT
            Row                 : IRow*'''
        return super(ITableWrite2, self).RemoveRow(Row)
    def RemoveRows(self, Rows):
        '''Method ITableWrite.RemoveRows (from ITableWrite)

           INPUT
            Rows                : ISet*'''
        return super(ITableWrite2, self).RemoveRows(Rows)
    def UpdateRows(self, QueryFilter, Recycling):
        '''Method ITableWrite.UpdateRows (from ITableWrite)

           INPUTS
            QueryFilter         : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITableWrite2, self).UpdateRows(QueryFilter, Recycling)
    def InsertRows(self, useBuffering):
        '''Method ITableWrite.InsertRows (from ITableWrite)

           INPUT
            useBuffering        : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITableWrite2, self).InsertRows(useBuffering)

class IObjectClassValidation(_esriGeoDatabase.IObjectClassValidation):
    _IID = uuid.UUID('7aee5f1a-a98b-11d2-aada-00c04fa37b82')
    def ValidateField(self, Row, FieldName):
        '''Method IObjectClassValidation.ValidateField

           INPUTS
            Row                 : IRow*
            FieldName           : BSTR

           OUTPUT
            errorMessage        : BSTR*'''
        return super(IObjectClassValidation, self).ValidateField(Row, FieldName)
    def ValidateRow(self, Row):
        '''Method IObjectClassValidation.ValidateRow

           INPUT
            Row                 : IRow*

           OUTPUT
            errorMessage        : BSTR*'''
        return super(IObjectClassValidation, self).ValidateRow(Row)

class IRandomAccessCursor(_esriGeoDatabase.IRandomAccessCursor):
    _IID = uuid.UUID('d756d09b-9ba9-11d4-9f7c-00c04f6bdf0e')
    def GetRow(self, rowID):
        '''Method IRandomAccessCursor.GetRow

           INPUT
            rowID               : long

           OUTPUT
            Row                 : IRow**'''
        return super(IRandomAccessCursor, self).GetRow(rowID)

class IRandomAccessTable(_esriGeoDatabase.IRandomAccessTable):
    _IID = uuid.UUID('5735af8f-9baa-11d4-9f7c-00c04f6bdf0e')
    def GetRandomRows(self, SubFields, recycle):
        '''Method IRandomAccessTable.GetRandomRows

           INPUTS
            SubFields           : BSTR
            recycle             : VARIANT_BOOL

           OUTPUT
            randomCursor        : IRandomAccessCursor**'''
        return super(IRandomAccessTable, self).GetRandomRows(SubFields, recycle)

class IRowCompare(_esriGeoDatabase.IRowCompare):
    _IID = uuid.UUID('7d3e2831-6c5a-11d3-8a98-000000000000')
    def get_IsEqual(self, otherRow):
        '''Method IRowCompare.get_IsEqual

           INPUT
            otherRow            : IRow*

           OUTPUT
            IsEqual             : VARIANT_BOOL*'''
        return super(IRowCompare, self).get_IsEqual(otherRow)
    IsEqual = IndexProperty(get_IsEqual, None)

class IDataStatistics(_esriGeoDatabase.IDataStatistics):
    _IID = uuid.UUID('ca691dd5-8a14-11d2-ae6c-080009ec732a')

    def __init__(self, *args, **kw):
        super(IDataStatistics, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Field(self, Field):
        '''Method IDataStatistics.put_Field

           INPUT
            Field               : BSTR'''
        return super(IDataStatistics, self).put_Field(Field)
    def get_Field(self):
        '''Method IDataStatistics.get_Field

           OUTPUT
            Field               : BSTR*'''
        return super(IDataStatistics, self).get_Field()
    def putref_Cursor(self, _arg1):
        '''Method IDataStatistics.putref_Cursor

           INPUT
            _arg1               : ICursor*'''
        return super(IDataStatistics, self).putref_Cursor(_arg1)
    def put_SampleRate(self, maxRecords):
        '''Method IDataStatistics.put_SampleRate

           INPUT
            maxRecords          : long'''
        return super(IDataStatistics, self).put_SampleRate(maxRecords)
    def get_SampleRate(self):
        '''Method IDataStatistics.get_SampleRate

           OUTPUT
            maxRecords          : long*'''
        return super(IDataStatistics, self).get_SampleRate()
    def put_SimpleStats(self, simple):
        '''Method IDataStatistics.put_SimpleStats

           INPUT
            simple              : VARIANT_BOOL'''
        return super(IDataStatistics, self).put_SimpleStats(simple)
    def get_SimpleStats(self):
        '''Method IDataStatistics.get_SimpleStats

           OUTPUT
            simple              : VARIANT_BOOL*'''
        return super(IDataStatistics, self).get_SimpleStats()
    def get_Statistics(self):
        '''Method IDataStatistics.get_Statistics

           OUTPUT
            results             : IStatisticsResults**'''
        return super(IDataStatistics, self).get_Statistics()
    def get_UniqueValues(self):
        '''Method IDataStatistics.get_UniqueValues

           OUTPUT
            values              : IEnumVARIANT**'''
        return super(IDataStatistics, self).get_UniqueValues()
    def get_UniqueValueCount(self):
        '''Method IDataStatistics.get_UniqueValueCount

           OUTPUT
            Count               : long*'''
        return super(IDataStatistics, self).get_UniqueValueCount()
    def get_Continue(self):
        '''Method IDataStatistics.get_Continue

           OUTPUT
            canContinue         : VARIANT_BOOL*'''
        return super(IDataStatistics, self).get_Continue()
    def get_Cancelled(self):
        '''Method IDataStatistics.get_Cancelled

           OUTPUT
            Cancelled           : VARIANT_BOOL*'''
        return super(IDataStatistics, self).get_Cancelled()
    Cancelled = property(get_Cancelled, None, None)
    Continue = property(get_Continue, None, None)
    Cursor = property(None, putref_Cursor, None)
    Field = property(get_Field, put_Field, None)
    SampleRate = property(get_SampleRate, put_SampleRate, None)
    SimpleStats = property(get_SimpleStats, put_SimpleStats, None)
    Statistics = property(get_Statistics, None, None)
    UniqueValueCount = property(get_UniqueValueCount, None, None)
    UniqueValues = property(get_UniqueValues, None, None)

class IEnumEventError(_esriGeoDatabase.IEnumEventError):
    _IID = uuid.UUID('a9eb56e2-7452-11d4-9fe4-00c04f6bdf06')
    def Next(self):
        '''Method IEnumEventError.Next

           OUTPUTS
            eventRow            : IRow**
            locatingError       : esriLocatingError*'''
        return super(IEnumEventError, self).Next()
    def __iter__(self):
        try:
            val = super(IEnumEventError, self).Next()
            while any(val):
                yield val
                val = super(IEnumEventError, self).Next()
        except:
            pass

class IEventSourceErrors(_esriGeoDatabase.IEventSourceErrors):
    _IID = uuid.UUID('a9eb56e1-7452-11d4-9fe4-00c04f6bdf06')
    def GetErrors(self):
        '''Method IEventSourceErrors.GetErrors

           OUTPUT
            eventErrors         : IEnumEventError**'''
        return super(IEventSourceErrors, self).GetErrors()
    def GetErrorCursor(self, filter):
        '''Method IEventSourceErrors.GetErrorCursor

           INPUT
            filter              : IQueryFilter*

           OUTPUT
            Cursor              : ICursor**'''
        return super(IEventSourceErrors, self).GetErrorCursor(filter)
    def GetLocatingErrorOID(self, OID):
        '''Method IEventSourceErrors.GetLocatingErrorOID

           INPUT
            OID                 : long

           OUTPUT
            locatingError       : esriLocatingError*'''
        return super(IEventSourceErrors, self).GetLocatingErrorOID(OID)
    def GetLocatingErrorRow(self, Row):
        '''Method IEventSourceErrors.GetLocatingErrorRow

           INPUT
            Row                 : IRow*

           OUTPUT
            locatingError       : esriLocatingError*'''
        return super(IEventSourceErrors, self).GetLocatingErrorRow(Row)

class INetworkEvaluatorSetup(_esriGeoDatabase.INetworkEvaluatorSetup):
    _IID = uuid.UUID('bd8eccef-092d-43dd-80dc-04684ba60d60')

    def __init__(self, *args, **kw):
        super(INetworkEvaluatorSetup, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Initialize(self, NetworkDataset, DataElement, Source, Attribute):
        '''Method INetworkEvaluatorSetup.Initialize

           INPUTS
            NetworkDataset      : INetworkDataset*
            DataElement         : IDENetworkDataset*
            Source              : INetworkSource*
            Attribute           : IEvaluatedNetworkAttribute*'''
        return super(INetworkEvaluatorSetup, self).Initialize(NetworkDataset, DataElement, Source, Attribute)
    def put_Data(self, Data):
        '''Method INetworkEvaluatorSetup.put_Data

           INPUT
            Data                : IPropertySet*'''
        return super(INetworkEvaluatorSetup, self).put_Data(Data)
    def get_Data(self):
        '''Method INetworkEvaluatorSetup.get_Data

           OUTPUT
            Data                : IPropertySet**'''
        return super(INetworkEvaluatorSetup, self).get_Data()
    def get_DataHasEdits(self):
        '''Method INetworkEvaluatorSetup.get_DataHasEdits

           OUTPUT
            HasEdits            : VARIANT_BOOL*'''
        return super(INetworkEvaluatorSetup, self).get_DataHasEdits()
    def get_CLSID(self):
        '''Method INetworkEvaluatorSetup.get_CLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(INetworkEvaluatorSetup, self).get_CLSID()
    def SupportsSource(self, Source, Attribute):
        '''Method INetworkEvaluatorSetup.SupportsSource

           INPUTS
            Source              : INetworkSource*
            Attribute           : IEvaluatedNetworkAttribute*

           OUTPUT
            IsSupported         : VARIANT_BOOL*'''
        return super(INetworkEvaluatorSetup, self).SupportsSource(Source, Attribute)
    def SupportsDefault(self, ElementType, Attribute):
        '''Method INetworkEvaluatorSetup.SupportsDefault

           INPUTS
            ElementType         : esriNetworkElementType
            Attribute           : IEvaluatedNetworkAttribute*

           OUTPUT
            IsSupported         : VARIANT_BOOL*'''
        return super(INetworkEvaluatorSetup, self).SupportsDefault(ElementType, Attribute)
    def ValidateSource(self, datasetContainer, NetworkSource, Attribute):
        '''Method INetworkEvaluatorSetup.ValidateSource

           INPUTS
            datasetContainer    : IDatasetContainer2*
            NetworkSource       : INetworkSource*
            Attribute           : IEvaluatedNetworkAttribute*

           OUTPUTS
            ErrorCode           : long*
            ErrorDescription    : BSTR*
            errorAppendInfo     : BSTR*
            isValid             : VARIANT_BOOL*'''
        return super(INetworkEvaluatorSetup, self).ValidateSource(datasetContainer, NetworkSource, Attribute)
    def ValidateDefault(self, ElementType, Attribute):
        '''Method INetworkEvaluatorSetup.ValidateDefault

           INPUTS
            ElementType         : esriNetworkElementType
            Attribute           : IEvaluatedNetworkAttribute*

           OUTPUTS
            ErrorCode           : long*
            ErrorDescription    : BSTR*
            errorAppendInfo     : BSTR*
            isValid             : VARIANT_BOOL*'''
        return super(INetworkEvaluatorSetup, self).ValidateDefault(ElementType, Attribute)
    def QueryValue(self, Element, Row):
        '''Method INetworkEvaluatorSetup.QueryValue

           INPUTS
            Element             : INetworkElement*
            Row                 : IRow*

           OUTPUT
            resultValue         : VARIANT*'''
        return super(INetworkEvaluatorSetup, self).QueryValue(Element, Row)
    CLSID = property(get_CLSID, None, None)
    Data = property(get_Data, put_Data, None)
    DataHasEdits = property(get_DataHasEdits, None, None)

class ITable(_esriGeoDatabase.ITable):
    _IID = uuid.UUID('fcb01cb5-9f0b-11d0-bec7-00805f7c4268')
    def CreateRow(self):
        '''Method ITable.CreateRow

           OUTPUT
            Row                 : IRow**'''
        return super(ITable, self).CreateRow()
    def GetRow(self, OID):
        '''Method ITable.GetRow

           INPUT
            OID                 : long

           OUTPUT
            Row                 : IRow**'''
        return super(ITable, self).GetRow(OID)
    def GetRows(self, oids, Recycling):
        '''Method ITable.GetRows

           INPUTS
            oids                : VARIANT
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITable, self).GetRows(oids, Recycling)
    def CreateRowBuffer(self):
        '''Method ITable.CreateRowBuffer

           OUTPUT
            buffer              : IRowBuffer**'''
        return super(ITable, self).CreateRowBuffer()
    def UpdateSearchedRows(self, QueryFilter, buffer):
        '''Method ITable.UpdateSearchedRows

           INPUTS
            QueryFilter         : IQueryFilter*
            buffer              : IRowBuffer*'''
        return super(ITable, self).UpdateSearchedRows(QueryFilter, buffer)
    def DeleteSearchedRows(self, QueryFilter):
        '''Method ITable.DeleteSearchedRows

           INPUT
            QueryFilter         : IQueryFilter*'''
        return super(ITable, self).DeleteSearchedRows(QueryFilter)
    def RowCount(self, QueryFilter):
        '''Method ITable.RowCount

           INPUT
            QueryFilter         : IQueryFilter*

           OUTPUT
            numRows             : long*'''
        return super(ITable, self).RowCount(QueryFilter)
    def Search(self, QueryFilter, Recycling):
        '''Method ITable.Search

           INPUTS
            QueryFilter         : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITable, self).Search(QueryFilter, Recycling)
    def Update(self, QueryFilter, Recycling):
        '''Method ITable.Update

           INPUTS
            QueryFilter         : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITable, self).Update(QueryFilter, Recycling)
    def Insert(self, useBuffering):
        '''Method ITable.Insert

           INPUT
            useBuffering        : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITable, self).Insert(useBuffering)
    def Select(self, QueryFilter, selType, selOption, selectionContainer):
        '''Method ITable.Select

           INPUTS
            QueryFilter         : IQueryFilter*
            selType             : esriSelectionType
            selOption           : esriSelectionOption
            selectionContainer  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(ITable, self).Select(QueryFilter, selType, selOption, selectionContainer)
    def FindField(self, Name):
        '''Method IClass.FindField (from IClass)

           INPUT
            Name                : BSTR

           OUTPUT
            FieldIndex          : long*'''
        return super(ITable, self).FindField(Name)
    def get_Fields(self):
        '''Method IClass.get_Fields (from IClass)

           OUTPUT
            Fields              : IFields**'''
        return super(ITable, self).get_Fields()
    def get_Indexes(self):
        '''Method IClass.get_Indexes (from IClass)

           OUTPUT
            Indexes             : IIndexes**'''
        return super(ITable, self).get_Indexes()
    def AddField(self, Field):
        '''Method IClass.AddField (from IClass)

           INPUT
            Field               : IField*'''
        return super(ITable, self).AddField(Field)
    def DeleteField(self, Field):
        '''Method IClass.DeleteField (from IClass)

           INPUT
            Field               : IField*'''
        return super(ITable, self).DeleteField(Field)
    def AddIndex(self, Index):
        '''Method IClass.AddIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(ITable, self).AddIndex(Index)
    def DeleteIndex(self, Index):
        '''Method IClass.DeleteIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(ITable, self).DeleteIndex(Index)
    def get_HasOID(self):
        '''Method IClass.get_HasOID (from IClass)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(ITable, self).get_HasOID()
    def get_OIDFieldName(self):
        '''Method IClass.get_OIDFieldName (from IClass)

           OUTPUT
            Name                : BSTR*'''
        return super(ITable, self).get_OIDFieldName()
    def get_CLSID(self):
        '''Method IClass.get_CLSID (from IClass)

           OUTPUT
            InstanceCLSID       : IUID**'''
        return super(ITable, self).get_CLSID()
    def get_EXTCLSID(self):
        '''Method IClass.get_EXTCLSID (from IClass)

           OUTPUT
            ClassExtensionCLSID : IUID**'''
        return super(ITable, self).get_EXTCLSID()
    def get_Extension(self):
        '''Method IClass.get_Extension (from IClass)

           OUTPUT
            Extension           : IUnknown**'''
        return super(ITable, self).get_Extension()
    def get_ExtensionProperties(self):
        '''Method IClass.get_ExtensionProperties (from IClass)

           OUTPUT
            extProps            : IPropertySet**'''
        return super(ITable, self).get_ExtensionProperties()
    CLSID = property(get_CLSID, None, None)
    EXTCLSID = property(get_EXTCLSID, None, None)
    Extension = property(get_Extension, None, None)
    ExtensionProperties = property(get_ExtensionProperties, None, None)
    Fields = property(get_Fields, None, None)
    HasOID = property(get_HasOID, None, None)
    Indexes = property(get_Indexes, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)

class ISelectionSet(_esriGeoDatabase.ISelectionSet):
    _IID = uuid.UUID('f7ad47d1-d55e-11d1-8882-0000f877762d')
    def get_FullName(self):
        '''Method ISelectionSet.get_FullName

           OUTPUT
            Name                : IName**'''
        return super(ISelectionSet, self).get_FullName()
    def get_Target(self):
        '''Method ISelectionSet.get_Target

           OUTPUT
            Target              : ITable**'''
        return super(ISelectionSet, self).get_Target()
    def MakePermanent(self):
        '''Method ISelectionSet.MakePermanent'''
        return super(ISelectionSet, self).MakePermanent()
    def get_Count(self):
        '''Method ISelectionSet.get_Count

           OUTPUT
            numObjectIds        : long*'''
        return super(ISelectionSet, self).get_Count()
    def Add(self, OID):
        '''Method ISelectionSet.Add

           INPUT
            OID                 : long'''
        return super(ISelectionSet, self).Add(OID)
    def AddList(self, Count, OIDList):
        '''Method ISelectionSet.AddList

           INPUTS
            Count               : long
            OIDList             : long*'''
        return super(ISelectionSet, self).AddList(Count, OIDList)
    def Combine(self, otherSet, setOp):
        '''Method ISelectionSet.Combine

           INPUTS
            otherSet            : ISelectionSet*
            setOp               : esriSetOperation

           OUTPUT
            resultSet           : ISelectionSet**'''
        return super(ISelectionSet, self).Combine(otherSet, setOp)
    def Search(self, QueryFilter, Recycling):
        '''Method ISelectionSet.Search

           INPUTS
            QueryFilter         : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ISelectionSet, self).Search(QueryFilter, Recycling)
    def Select(self, QueryFilter, selType, selOption, selectionContainer):
        '''Method ISelectionSet.Select

           INPUTS
            QueryFilter         : IQueryFilter*
            selType             : esriSelectionType
            selOption           : esriSelectionOption
            selectionContainer  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(ISelectionSet, self).Select(QueryFilter, selType, selOption, selectionContainer)
    def Refresh(self):
        '''Method ISelectionSet.Refresh'''
        return super(ISelectionSet, self).Refresh()
    def get_IDs(self):
        '''Method ISelectionSet.get_IDs

           OUTPUT
            EnumIDs             : IEnumIDs**'''
        return super(ISelectionSet, self).get_IDs()
    def RemoveList(self, Count, OIDList):
        '''Method ISelectionSet.RemoveList

           INPUTS
            Count               : long
            OIDList             : long*'''
        return super(ISelectionSet, self).RemoveList(Count, OIDList)
    Count = property(get_Count, None, None)
    FullName = property(get_FullName, None, None)
    IDs = property(get_IDs, None, None)
    Target = property(get_Target, None, None)

class IConflictClass(_esriGeoDatabase.IConflictClass):
    _IID = uuid.UUID('ab22306b-8a2f-11d2-aae3-00c04fa37585')
    def get_HasConflicts(self):
        '''Method IConflictClass.get_HasConflicts

           OUTPUT
            HasConflicts        : VARIANT_BOOL*'''
        return super(IConflictClass, self).get_HasConflicts()
    def get_UpdateDeletes(self):
        '''Method IConflictClass.get_UpdateDeletes

           OUTPUT
            updateDeleteSet     : ISelectionSet**'''
        return super(IConflictClass, self).get_UpdateDeletes()
    def get_DeleteUpdates(self):
        '''Method IConflictClass.get_DeleteUpdates

           OUTPUT
            deleteUpdateSet     : ISelectionSet**'''
        return super(IConflictClass, self).get_DeleteUpdates()
    def get_UpdateUpdates(self):
        '''Method IConflictClass.get_UpdateUpdates

           OUTPUT
            updateUpdateSet     : ISelectionSet**'''
        return super(IConflictClass, self).get_UpdateUpdates()
    def RestoreRow(self, rowID):
        '''Method IConflictClass.RestoreRow

           INPUT
            rowID               : long

           OUTPUT
            Row                 : IRow**'''
        return super(IConflictClass, self).RestoreRow(rowID)
    DeleteUpdates = property(get_DeleteUpdates, None, None)
    HasConflicts = property(get_HasConflicts, None, None)
    UpdateDeletes = property(get_UpdateDeletes, None, None)
    UpdateUpdates = property(get_UpdateUpdates, None, None)

class IEnumConflictClass(_esriGeoDatabase.IEnumConflictClass):
    _IID = uuid.UUID('2ba511e1-8a2f-11d2-aae3-00c04fa37585')
    def Next(self):
        '''Method IEnumConflictClass.Next

           OUTPUT
            conflictClass       : IConflictClass**'''
        return super(IEnumConflictClass, self).Next()
    def __iter__(self):
        try:
            super(IEnumConflictClass, self).Reset()
            val = super(IEnumConflictClass, self).Next()
            while val:
                yield val
                val = super(IEnumConflictClass, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumConflictClass.Reset'''
        return super(IEnumConflictClass, self).Reset()

class IVersionEdit(_esriGeoDatabase.IVersionEdit):
    _IID = uuid.UUID('2393b65d-74d4-11d2-aad9-00c04fa37585')
    def get_ModifiedClasses(self):
        '''Method IVersionEdit.get_ModifiedClasses

           OUTPUT
            classNames          : IEnumBSTR**'''
        return super(IVersionEdit, self).get_ModifiedClasses()
    def get_ConflictClasses(self):
        '''Method IVersionEdit.get_ConflictClasses

           OUTPUT
            ConflictClasses     : IEnumConflictClass**'''
        return super(IVersionEdit, self).get_ConflictClasses()
    def get_ReconcileVersion(self):
        '''Method IVersionEdit.get_ReconcileVersion

           OUTPUT
            conflictVersion     : IVersion**'''
        return super(IVersionEdit, self).get_ReconcileVersion()
    def get_StartEditingVersion(self):
        '''Method IVersionEdit.get_StartEditingVersion

           OUTPUT
            StartEditingVersion : IVersion**'''
        return super(IVersionEdit, self).get_StartEditingVersion()
    def get_PreReconcileVersion(self):
        '''Method IVersionEdit.get_PreReconcileVersion

           OUTPUT
            PreReconcileVersion : IVersion**'''
        return super(IVersionEdit, self).get_PreReconcileVersion()
    def get_CommonAncestorVersion(self):
        '''Method IVersionEdit.get_CommonAncestorVersion

           OUTPUT
            ancestorVersion     : IVersion**'''
        return super(IVersionEdit, self).get_CommonAncestorVersion()
    def Reconcile(self, VersionName):
        '''Method IVersionEdit.Reconcile

           INPUT
            VersionName         : BSTR

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit, self).Reconcile(VersionName)
    def CanPost(self):
        '''Method IVersionEdit.CanPost

           OUTPUT
            CanPost             : VARIANT_BOOL*'''
        return super(IVersionEdit, self).CanPost()
    def Post(self, VersionName):
        '''Method IVersionEdit.Post

           INPUT
            VersionName         : BSTR'''
        return super(IVersionEdit, self).Post(VersionName)
    CommonAncestorVersion = property(get_CommonAncestorVersion, None, None)
    ConflictClasses = property(get_ConflictClasses, None, None)
    ModifiedClasses = property(get_ModifiedClasses, None, None)
    PreReconcileVersion = property(get_PreReconcileVersion, None, None)
    ReconcileVersion = property(get_ReconcileVersion, None, None)
    StartEditingVersion = property(get_StartEditingVersion, None, None)

class IVersionEdit2(_esriGeoDatabase.IVersionEdit2):
    _IID = uuid.UUID('650b3674-3aea-44d5-8441-794cf3c36a27')
    def Reconcile2(self, VersionName, acquireLock):
        '''Method IVersionEdit2.Reconcile2

           INPUTS
            VersionName         : BSTR
            acquireLock         : VARIANT_BOOL

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit2, self).Reconcile2(VersionName, acquireLock)
    def get_ModifiedClasses(self):
        '''Method IVersionEdit.get_ModifiedClasses (from IVersionEdit)

           OUTPUT
            classNames          : IEnumBSTR**'''
        return super(IVersionEdit2, self).get_ModifiedClasses()
    def get_ConflictClasses(self):
        '''Method IVersionEdit.get_ConflictClasses (from IVersionEdit)

           OUTPUT
            ConflictClasses     : IEnumConflictClass**'''
        return super(IVersionEdit2, self).get_ConflictClasses()
    def get_ReconcileVersion(self):
        '''Method IVersionEdit.get_ReconcileVersion (from IVersionEdit)

           OUTPUT
            conflictVersion     : IVersion**'''
        return super(IVersionEdit2, self).get_ReconcileVersion()
    def get_StartEditingVersion(self):
        '''Method IVersionEdit.get_StartEditingVersion (from IVersionEdit)

           OUTPUT
            StartEditingVersion : IVersion**'''
        return super(IVersionEdit2, self).get_StartEditingVersion()
    def get_PreReconcileVersion(self):
        '''Method IVersionEdit.get_PreReconcileVersion (from IVersionEdit)

           OUTPUT
            PreReconcileVersion : IVersion**'''
        return super(IVersionEdit2, self).get_PreReconcileVersion()
    def get_CommonAncestorVersion(self):
        '''Method IVersionEdit.get_CommonAncestorVersion (from IVersionEdit)

           OUTPUT
            ancestorVersion     : IVersion**'''
        return super(IVersionEdit2, self).get_CommonAncestorVersion()
    def Reconcile(self, VersionName):
        '''Method IVersionEdit.Reconcile (from IVersionEdit)

           INPUT
            VersionName         : BSTR

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit2, self).Reconcile(VersionName)
    def CanPost(self):
        '''Method IVersionEdit.CanPost (from IVersionEdit)

           OUTPUT
            CanPost             : VARIANT_BOOL*'''
        return super(IVersionEdit2, self).CanPost()
    def Post(self, VersionName):
        '''Method IVersionEdit.Post (from IVersionEdit)

           INPUT
            VersionName         : BSTR'''
        return super(IVersionEdit2, self).Post(VersionName)
    CommonAncestorVersion = property(get_CommonAncestorVersion, None, None)
    ConflictClasses = property(get_ConflictClasses, None, None)
    ModifiedClasses = property(get_ModifiedClasses, None, None)
    PreReconcileVersion = property(get_PreReconcileVersion, None, None)
    ReconcileVersion = property(get_ReconcileVersion, None, None)
    StartEditingVersion = property(get_StartEditingVersion, None, None)

class IVersionEdit3(_esriGeoDatabase.IVersionEdit3):
    _IID = uuid.UUID('69d4c025-1a2c-4cca-b901-20eb2093ab6b')
    def Reconcile3(self, VersionName, acquireLock, abortIfConflicts):
        '''Method IVersionEdit3.Reconcile3

           INPUTS
            VersionName         : BSTR
            acquireLock         : VARIANT_BOOL
            abortIfConflicts    : VARIANT_BOOL

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit3, self).Reconcile3(VersionName, acquireLock, abortIfConflicts)
    def Reconcile2(self, VersionName, acquireLock):
        '''Method IVersionEdit2.Reconcile2 (from IVersionEdit2)

           INPUTS
            VersionName         : BSTR
            acquireLock         : VARIANT_BOOL

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit3, self).Reconcile2(VersionName, acquireLock)
    def get_ModifiedClasses(self):
        '''Method IVersionEdit.get_ModifiedClasses (from IVersionEdit)

           OUTPUT
            classNames          : IEnumBSTR**'''
        return super(IVersionEdit3, self).get_ModifiedClasses()
    def get_ConflictClasses(self):
        '''Method IVersionEdit.get_ConflictClasses (from IVersionEdit)

           OUTPUT
            ConflictClasses     : IEnumConflictClass**'''
        return super(IVersionEdit3, self).get_ConflictClasses()
    def get_ReconcileVersion(self):
        '''Method IVersionEdit.get_ReconcileVersion (from IVersionEdit)

           OUTPUT
            conflictVersion     : IVersion**'''
        return super(IVersionEdit3, self).get_ReconcileVersion()
    def get_StartEditingVersion(self):
        '''Method IVersionEdit.get_StartEditingVersion (from IVersionEdit)

           OUTPUT
            StartEditingVersion : IVersion**'''
        return super(IVersionEdit3, self).get_StartEditingVersion()
    def get_PreReconcileVersion(self):
        '''Method IVersionEdit.get_PreReconcileVersion (from IVersionEdit)

           OUTPUT
            PreReconcileVersion : IVersion**'''
        return super(IVersionEdit3, self).get_PreReconcileVersion()
    def get_CommonAncestorVersion(self):
        '''Method IVersionEdit.get_CommonAncestorVersion (from IVersionEdit)

           OUTPUT
            ancestorVersion     : IVersion**'''
        return super(IVersionEdit3, self).get_CommonAncestorVersion()
    def Reconcile(self, VersionName):
        '''Method IVersionEdit.Reconcile (from IVersionEdit)

           INPUT
            VersionName         : BSTR

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit3, self).Reconcile(VersionName)
    def CanPost(self):
        '''Method IVersionEdit.CanPost (from IVersionEdit)

           OUTPUT
            CanPost             : VARIANT_BOOL*'''
        return super(IVersionEdit3, self).CanPost()
    def Post(self, VersionName):
        '''Method IVersionEdit.Post (from IVersionEdit)

           INPUT
            VersionName         : BSTR'''
        return super(IVersionEdit3, self).Post(VersionName)
    CommonAncestorVersion = property(get_CommonAncestorVersion, None, None)
    ConflictClasses = property(get_ConflictClasses, None, None)
    ModifiedClasses = property(get_ModifiedClasses, None, None)
    PreReconcileVersion = property(get_PreReconcileVersion, None, None)
    ReconcileVersion = property(get_ReconcileVersion, None, None)
    StartEditingVersion = property(get_StartEditingVersion, None, None)

class ISqlWorkspace(_esriGeoDatabase.ISqlWorkspace):
    _IID = uuid.UUID('eed692f3-04e5-42d8-a232-4aad0085e471')
    def GetQueryDescription(self, Query):
        '''Method ISqlWorkspace.GetQueryDescription

           INPUT
            Query               : BSTR

           OUTPUT
            ppQueryDescription  : IQueryDescription**'''
        return super(ISqlWorkspace, self).GetQueryDescription(Query)
    def OpenQueryClass(self, Name, pQueryDescription):
        '''Method ISqlWorkspace.OpenQueryClass

           INPUTS
            Name                : BSTR
            pQueryDescription   : IQueryDescription*

           OUTPUT
            ppTable             : ITable**'''
        return super(ISqlWorkspace, self).OpenQueryClass(Name, pQueryDescription)
    def OpenQueryCursor(self, Query):
        '''Method ISqlWorkspace.OpenQueryCursor

           INPUT
            Query               : BSTR

           OUTPUT
            ppCursor            : ICursor**'''
        return super(ISqlWorkspace, self).OpenQueryCursor(Query)
    def GetTables(self):
        '''Method ISqlWorkspace.GetTables

           OUTPUT
            ppTableNames        : IStringArray**'''
        return super(ISqlWorkspace, self).GetTables()
    def GetColumns(self, TableName):
        '''Method ISqlWorkspace.GetColumns

           INPUT
            TableName           : BSTR

           OUTPUTS
            ppColumnName        : IStringArray**
            ppColumnType        : IStringArray**
            ppIsNullable        : IVariantArray**
            ppSize              : ILongArray**
            ppPrecision         : ILongArray**
            ppScale             : ILongArray**'''
        return super(ISqlWorkspace, self).GetColumns(TableName)
    def CheckDatasetName(self, Name, pQueryDescription):
        '''Method ISqlWorkspace.CheckDatasetName

           INPUTS
            Name                : BSTR
            pQueryDescription   : IQueryDescription*

           OUTPUT
            pNewName            : BSTR*'''
        return super(ISqlWorkspace, self).CheckDatasetName(Name, pQueryDescription)

class IEnumTable(_esriGeoDatabase.IEnumTable):
    _IID = uuid.UUID('b3cbc2e1-28e2-4bed-830d-d30cd500dc1c')
    def Next(self):
        '''Method IEnumTable.Next

           OUTPUT
            oneClass            : ITable**'''
        return super(IEnumTable, self).Next()
    def __iter__(self):
        try:
            super(IEnumTable, self).Reset()
            val = super(IEnumTable, self).Next()
            while val:
                yield val
                val = super(IEnumTable, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumTable.Reset'''
        return super(IEnumTable, self).Reset()

class ITableSort(_esriGeoDatabase.ITableSort):
    _IID = uuid.UUID('2d0f935e-32f5-11d2-a06f-0000f8775bf9')

    def __init__(self, *args, **kw):
        super(ITableSort, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Table(self, Table):
        '''Method ITableSort.putref_Table

           INPUT
            Table               : ITable*'''
        return super(ITableSort, self).putref_Table(Table)
    def putref_SelectionSet(self, SelectionSet):
        '''Method ITableSort.putref_SelectionSet

           INPUT
            SelectionSet        : ISelectionSet*'''
        return super(ITableSort, self).putref_SelectionSet(SelectionSet)
    def putref_Cursor(self, _arg1):
        '''Method ITableSort.putref_Cursor

           INPUT
            _arg1               : ICursor*'''
        return super(ITableSort, self).putref_Cursor(_arg1)
    def putref_QueryFilter(self, QueryFilter):
        '''Method ITableSort.putref_QueryFilter

           INPUT
            QueryFilter         : IQueryFilter*'''
        return super(ITableSort, self).putref_QueryFilter(QueryFilter)
    def get_QueryFilter(self):
        '''Method ITableSort.get_QueryFilter

           OUTPUT
            QueryFilter         : IQueryFilter**'''
        return super(ITableSort, self).get_QueryFilter()
    def put_Fields(self, _arg1):
        '''Method ITableSort.put_Fields

           INPUT
            _arg1               : BSTR'''
        return super(ITableSort, self).put_Fields(_arg1)
    def put_Ascending(self, Field, _arg2):
        '''Method ITableSort.put_Ascending

           INPUTS
            Field               : BSTR
            _arg2               : VARIANT_BOOL'''
        return super(ITableSort, self).put_Ascending(Field, _arg2)
    def put_SortCharacters(self, Field, _arg2):
        '''Method ITableSort.put_SortCharacters

           INPUTS
            Field               : BSTR
            _arg2               : long'''
        return super(ITableSort, self).put_SortCharacters(Field, _arg2)
    def put_CaseSensitive(self, Field, _arg2):
        '''Method ITableSort.put_CaseSensitive

           INPUTS
            Field               : BSTR
            _arg2               : VARIANT_BOOL'''
        return super(ITableSort, self).put_CaseSensitive(Field, _arg2)
    def putref_Compare(self, _arg1):
        '''Method ITableSort.putref_Compare

           INPUT
            _arg1               : ITableSortCallBack*'''
        return super(ITableSort, self).putref_Compare(_arg1)
    def get_IDs(self):
        '''Method ITableSort.get_IDs

           OUTPUT
            EnumIDs             : IEnumIDs**'''
        return super(ITableSort, self).get_IDs()
    def get_Rows(self):
        '''Method ITableSort.get_Rows

           OUTPUT
            Cursor              : ICursor**'''
        return super(ITableSort, self).get_Rows()
    def Sort(self, TrackCancel):
        '''Method ITableSort.Sort

           INPUT
            TrackCancel         : ITrackCancel*'''
        return super(ITableSort, self).Sort(TrackCancel)
    def get_IDByIndex(self, Index):
        '''Method ITableSort.get_IDByIndex

           INPUT
            Index               : long

           OUTPUT
            IdVal               : long*'''
        return super(ITableSort, self).get_IDByIndex(Index)
    def get_Table(self):
        '''Method ITableSort.get_Table

           OUTPUT
            Table               : ITable**'''
        return super(ITableSort, self).get_Table()
    def get_SelectionSet(self):
        '''Method ITableSort.get_SelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(ITableSort, self).get_SelectionSet()
    Ascending = property(None, put_Ascending, None)
    CaseSensitive = property(None, put_CaseSensitive, None)
    Compare = property(None, putref_Compare, None)
    Cursor = property(None, putref_Cursor, None)
    Fields = property(None, put_Fields, None)
    IDs = property(get_IDs, None, None)
    QueryFilter = property(get_QueryFilter, putref_QueryFilter, None)
    Rows = property(get_Rows, None, None)
    SelectionSet = property(get_SelectionSet, putref_SelectionSet, None)
    SortCharacters = property(None, put_SortCharacters, None)
    Table = property(get_Table, putref_Table, None)
    IDByIndex = IndexProperty(get_IDByIndex, None)

class IArchivableClass(_esriGeoDatabase.IArchivableClass):
    _IID = uuid.UUID('c1eaa4ce-bf6d-4956-b4cf-8aefc0568b83')
    def get_Archive(self):
        '''Method IArchivableClass.get_Archive

           OUTPUT
            archiveTable        : ITable**'''
        return super(IArchivableClass, self).get_Archive()
    def get_ArchiveRegistrationInfo(self):
        '''Method IArchivableClass.get_ArchiveRegistrationInfo

           OUTPUT
            archiveRegInfo      : IArchiveRegistrationInfo**'''
        return super(IArchivableClass, self).get_ArchiveRegistrationInfo()
    Archive = property(get_Archive, None, None)
    ArchiveRegistrationInfo = property(get_ArchiveRegistrationInfo, None, None)

class IRelQueryTableInfo(_esriGeoDatabase.IRelQueryTableInfo):
    _IID = uuid.UUID('d5a1b5bc-9a9f-4a40-bf34-69800d27ebe3')
    def get_JoinType(self):
        '''Method IRelQueryTableInfo.get_JoinType

           OUTPUT
            JoinType            : esriJoinType*'''
        return super(IRelQueryTableInfo, self).get_JoinType()
    def get_QueryDef(self):
        '''Method IRelQueryTableInfo.get_QueryDef

           OUTPUT
            QueryDef            : IQueryDef**'''
        return super(IRelQueryTableInfo, self).get_QueryDef()
    def GetBaseTableOfField(self, column):
        '''Method IRelQueryTableInfo.GetBaseTableOfField

           INPUT
            column              : BSTR

           OUTPUT
            Table               : ITable**'''
        return super(IRelQueryTableInfo, self).GetBaseTableOfField(column)
    def get_HasDirectAccessLookup(self):
        '''Method IRelQueryTableInfo.get_HasDirectAccessLookup

           OUTPUT
            directAccess        : VARIANT_BOOL*'''
        return super(IRelQueryTableInfo, self).get_HasDirectAccessLookup()
    HasDirectAccessLookup = property(get_HasDirectAccessLookup, None, None)
    JoinType = property(get_JoinType, None, None)
    QueryDef = property(get_QueryDef, None, None)

class ICollectionTableVersionChanges(_esriGeoDatabase.ICollectionTableVersionChanges):
    _IID = uuid.UUID('e1e2702e-8b9e-4322-a332-caae8770d657')
    def Add(self, oldTable, newTable):
        '''Method ICollectionTableVersionChanges.Add

           INPUTS
            oldTable            : ITable*
            newTable            : ITable*'''
        return super(ICollectionTableVersionChanges, self).Add(oldTable, newTable)
    def RemoveAll(self):
        '''Method ICollectionTableVersionChanges.RemoveAll'''
        return super(ICollectionTableVersionChanges, self).RemoveAll()

class IEnumTableVersionChanges(_esriGeoDatabase.IEnumTableVersionChanges):
    _IID = uuid.UUID('f7f1308a-8f93-40ef-932c-f3f359c221ee')
    def Next(self):
        '''Method IEnumTableVersionChanges.Next

           OUTPUTS
            oldTable            : ITable**
            newTable            : ITable**'''
        return super(IEnumTableVersionChanges, self).Next()
    def __iter__(self):
        try:
            super(IEnumTableVersionChanges, self).Reset()
            val = super(IEnumTableVersionChanges, self).Next()
            while any(val):
                yield val
                val = super(IEnumTableVersionChanges, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumTableVersionChanges.Reset'''
        return super(IEnumTableVersionChanges, self).Reset()

class IRelQueryTableManage(_esriGeoDatabase.IRelQueryTableManage):
    _IID = uuid.UUID('c27587ab-ab36-4203-b9bd-d7906cf27b7c')
    def VersionChanged(self, selectedWorkspace, targetVersion, tablesRequiringMapEventFiring):
        '''Method IRelQueryTableManage.VersionChanged

           INPUTS
            selectedWorkspace   : IVersion*
            targetVersion       : IVersion*
            tablesRequiringMapEventFiring: IEnumTableVersionChanges*'''
        return super(IRelQueryTableManage, self).VersionChanged(selectedWorkspace, targetVersion, tablesRequiringMapEventFiring)

class IValidation(_esriGeoDatabase.IValidation):
    _IID = uuid.UUID('d410a9ba-475a-11d2-9932-0000f80372b4')
    def get_Rules(self):
        '''Method IValidation.get_Rules

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IValidation, self).get_Rules()
    def get_RulesByField(self, FieldName):
        '''Method IValidation.get_RulesByField

           INPUT
            FieldName           : BSTR

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IValidation, self).get_RulesByField(FieldName)
    def get_RulesBySubtypeCode(self, SubtypeCode):
        '''Method IValidation.get_RulesBySubtypeCode

           INPUT
            SubtypeCode         : long

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IValidation, self).get_RulesBySubtypeCode(SubtypeCode)
    def AddRule(self, Rule):
        '''Method IValidation.AddRule

           INPUT
            Rule                : IRule*'''
        return super(IValidation, self).AddRule(Rule)
    def DeleteRule(self, Rule):
        '''Method IValidation.DeleteRule

           INPUT
            Rule                : IRule*'''
        return super(IValidation, self).DeleteRule(Rule)
    def Validate(self, Selection, Workspace):
        '''Method IValidation.Validate

           INPUTS
            Selection           : IQueryFilter*
            Workspace           : IWorkspace*

           OUTPUT
            invalidSet          : ISelectionSet**'''
        return super(IValidation, self).Validate(Selection, Workspace)
    def ValidateSelection(self, Selection, Workspace):
        '''Method IValidation.ValidateSelection

           INPUTS
            Selection           : ISelectionSet*
            Workspace           : IWorkspace*

           OUTPUT
            invalidSet          : ISelectionSet**'''
        return super(IValidation, self).ValidateSelection(Selection, Workspace)
    def ValidateSet(self, Selection):
        '''Method IValidation.ValidateSet

           INPUT
            Selection           : ISet*

           OUTPUT
            invalidSet          : ISet**'''
        return super(IValidation, self).ValidateSet(Selection)
    Rules = property(get_Rules, None, None)
    RulesByField = IndexProperty(get_RulesByField, None)
    RulesBySubtypeCode = IndexProperty(get_RulesBySubtypeCode, None)

class IValidation2(_esriGeoDatabase.IValidation2):
    _IID = uuid.UUID('48469230-851c-11d4-a0c9-00c04f6bdd84')
    def AlterRule(self, Rule):
        '''Method IValidation2.AlterRule

           INPUT
            Rule                : IRule*'''
        return super(IValidation2, self).AlterRule(Rule)
    def get_Rules(self):
        '''Method IValidation.get_Rules (from IValidation)

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IValidation2, self).get_Rules()
    def get_RulesByField(self, FieldName):
        '''Method IValidation.get_RulesByField (from IValidation)

           INPUT
            FieldName           : BSTR

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IValidation2, self).get_RulesByField(FieldName)
    def get_RulesBySubtypeCode(self, SubtypeCode):
        '''Method IValidation.get_RulesBySubtypeCode (from IValidation)

           INPUT
            SubtypeCode         : long

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IValidation2, self).get_RulesBySubtypeCode(SubtypeCode)
    def AddRule(self, Rule):
        '''Method IValidation.AddRule (from IValidation)

           INPUT
            Rule                : IRule*'''
        return super(IValidation2, self).AddRule(Rule)
    def DeleteRule(self, Rule):
        '''Method IValidation.DeleteRule (from IValidation)

           INPUT
            Rule                : IRule*'''
        return super(IValidation2, self).DeleteRule(Rule)
    def Validate(self, Selection, Workspace):
        '''Method IValidation.Validate (from IValidation)

           INPUTS
            Selection           : IQueryFilter*
            Workspace           : IWorkspace*

           OUTPUT
            invalidSet          : ISelectionSet**'''
        return super(IValidation2, self).Validate(Selection, Workspace)
    def ValidateSelection(self, Selection, Workspace):
        '''Method IValidation.ValidateSelection (from IValidation)

           INPUTS
            Selection           : ISelectionSet*
            Workspace           : IWorkspace*

           OUTPUT
            invalidSet          : ISelectionSet**'''
        return super(IValidation2, self).ValidateSelection(Selection, Workspace)
    def ValidateSet(self, Selection):
        '''Method IValidation.ValidateSet (from IValidation)

           INPUT
            Selection           : ISet*

           OUTPUT
            invalidSet          : ISet**'''
        return super(IValidation2, self).ValidateSet(Selection)
    Rules = property(get_Rules, None, None)
    RulesByField = IndexProperty(get_RulesByField, None)
    RulesBySubtypeCode = IndexProperty(get_RulesBySubtypeCode, None)

class IRelQueryTableName(_esriGeoDatabase.IRelQueryTableName):
    _IID = uuid.UUID('64485e14-dcca-4747-8046-ee7d82a01928')

    def __init__(self, *args, **kw):
        super(IRelQueryTableName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RelationshipClassName(self, relClassName):
        '''Method IRelQueryTableName.putref_RelationshipClassName

           INPUT
            relClassName        : IName*'''
        return super(IRelQueryTableName, self).putref_RelationshipClassName(relClassName)
    def get_RelationshipClassName(self):
        '''Method IRelQueryTableName.get_RelationshipClassName

           OUTPUT
            relClassName        : IName**'''
        return super(IRelQueryTableName, self).get_RelationshipClassName()
    def put_ForwardDirection(self, forward):
        '''Method IRelQueryTableName.put_ForwardDirection

           INPUT
            forward             : VARIANT_BOOL'''
        return super(IRelQueryTableName, self).put_ForwardDirection(forward)
    def get_ForwardDirection(self):
        '''Method IRelQueryTableName.get_ForwardDirection

           OUTPUT
            forward             : VARIANT_BOOL*'''
        return super(IRelQueryTableName, self).get_ForwardDirection()
    def putref_SrcQueryFilter(self, QueryFilter):
        '''Method IRelQueryTableName.putref_SrcQueryFilter

           INPUT
            QueryFilter         : IQueryFilter*'''
        return super(IRelQueryTableName, self).putref_SrcQueryFilter(QueryFilter)
    def get_SrcQueryFilter(self):
        '''Method IRelQueryTableName.get_SrcQueryFilter

           OUTPUT
            QueryFilter         : IQueryFilter**'''
        return super(IRelQueryTableName, self).get_SrcQueryFilter()
    def putref_SrcSelectionSet(self, SelectionSet):
        '''Method IRelQueryTableName.putref_SrcSelectionSet

           INPUT
            SelectionSet        : ISelectionSet*'''
        return super(IRelQueryTableName, self).putref_SrcSelectionSet(SelectionSet)
    def get_SrcSelectionSet(self):
        '''Method IRelQueryTableName.get_SrcSelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IRelQueryTableName, self).get_SrcSelectionSet()
    def put_TargetColumns(self, TargetColumns):
        '''Method IRelQueryTableName.put_TargetColumns

           INPUT
            TargetColumns       : BSTR'''
        return super(IRelQueryTableName, self).put_TargetColumns(TargetColumns)
    def get_TargetColumns(self):
        '''Method IRelQueryTableName.get_TargetColumns

           OUTPUT
            TargetColumns       : BSTR*'''
        return super(IRelQueryTableName, self).get_TargetColumns()
    def put_DoNotPushJoinToDB(self, DoNotPushJoinToDB):
        '''Method IRelQueryTableName.put_DoNotPushJoinToDB

           INPUT
            DoNotPushJoinToDB   : VARIANT_BOOL'''
        return super(IRelQueryTableName, self).put_DoNotPushJoinToDB(DoNotPushJoinToDB)
    def get_DoNotPushJoinToDB(self):
        '''Method IRelQueryTableName.get_DoNotPushJoinToDB

           OUTPUT
            DoNotPushJoinToDB   : VARIANT_BOOL*'''
        return super(IRelQueryTableName, self).get_DoNotPushJoinToDB()
    def put_LeftOuterJoin(self, LeftOuterJoin):
        '''Method IRelQueryTableName.put_LeftOuterJoin

           INPUT
            LeftOuterJoin       : VARIANT_BOOL'''
        return super(IRelQueryTableName, self).put_LeftOuterJoin(LeftOuterJoin)
    def get_LeftOuterJoin(self):
        '''Method IRelQueryTableName.get_LeftOuterJoin

           OUTPUT
            LeftOuterJoin       : VARIANT_BOOL*'''
        return super(IRelQueryTableName, self).get_LeftOuterJoin()
    DoNotPushJoinToDB = property(get_DoNotPushJoinToDB, put_DoNotPushJoinToDB, None)
    ForwardDirection = property(get_ForwardDirection, put_ForwardDirection, None)
    LeftOuterJoin = property(get_LeftOuterJoin, put_LeftOuterJoin, None)
    RelationshipClassName = property(get_RelationshipClassName, putref_RelationshipClassName, None)
    SrcQueryFilter = property(get_SrcQueryFilter, putref_SrcQueryFilter, None)
    SrcSelectionSet = property(get_SrcSelectionSet, putref_SrcSelectionSet, None)
    TargetColumns = property(get_TargetColumns, put_TargetColumns, None)

class IRelQueryTableName2(_esriGeoDatabase.IRelQueryTableName2):
    _IID = uuid.UUID('7042b894-fb07-4bc4-917d-15e282ba1b27')

    def __init__(self, *args, **kw):
        super(IRelQueryTableName2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RelationshipClassName(self, relClassName):
        '''Method IRelQueryTableName2.putref_RelationshipClassName

           INPUT
            relClassName        : IName*'''
        return super(IRelQueryTableName2, self).putref_RelationshipClassName(relClassName)
    def get_RelationshipClassName(self):
        '''Method IRelQueryTableName2.get_RelationshipClassName

           OUTPUT
            relClassName        : IName**'''
        return super(IRelQueryTableName2, self).get_RelationshipClassName()
    def put_ForwardDirection(self, forward):
        '''Method IRelQueryTableName2.put_ForwardDirection

           INPUT
            forward             : VARIANT_BOOL'''
        return super(IRelQueryTableName2, self).put_ForwardDirection(forward)
    def get_ForwardDirection(self):
        '''Method IRelQueryTableName2.get_ForwardDirection

           OUTPUT
            forward             : VARIANT_BOOL*'''
        return super(IRelQueryTableName2, self).get_ForwardDirection()
    def putref_SrcQueryFilter(self, QueryFilter):
        '''Method IRelQueryTableName2.putref_SrcQueryFilter

           INPUT
            QueryFilter         : IQueryFilter*'''
        return super(IRelQueryTableName2, self).putref_SrcQueryFilter(QueryFilter)
    def get_SrcQueryFilter(self):
        '''Method IRelQueryTableName2.get_SrcQueryFilter

           OUTPUT
            QueryFilter         : IQueryFilter**'''
        return super(IRelQueryTableName2, self).get_SrcQueryFilter()
    def putref_SrcSelectionSet(self, SelectionSet):
        '''Method IRelQueryTableName2.putref_SrcSelectionSet

           INPUT
            SelectionSet        : ISelectionSet*'''
        return super(IRelQueryTableName2, self).putref_SrcSelectionSet(SelectionSet)
    def get_SrcSelectionSet(self):
        '''Method IRelQueryTableName2.get_SrcSelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IRelQueryTableName2, self).get_SrcSelectionSet()
    def put_TargetColumns(self, TargetColumns):
        '''Method IRelQueryTableName2.put_TargetColumns

           INPUT
            TargetColumns       : BSTR'''
        return super(IRelQueryTableName2, self).put_TargetColumns(TargetColumns)
    def get_TargetColumns(self):
        '''Method IRelQueryTableName2.get_TargetColumns

           OUTPUT
            TargetColumns       : BSTR*'''
        return super(IRelQueryTableName2, self).get_TargetColumns()
    def put_DoNotPushJoinToDB(self, DoNotPushJoinToDB):
        '''Method IRelQueryTableName2.put_DoNotPushJoinToDB

           INPUT
            DoNotPushJoinToDB   : VARIANT_BOOL'''
        return super(IRelQueryTableName2, self).put_DoNotPushJoinToDB(DoNotPushJoinToDB)
    def get_DoNotPushJoinToDB(self):
        '''Method IRelQueryTableName2.get_DoNotPushJoinToDB

           OUTPUT
            DoNotPushJoinToDB   : VARIANT_BOOL*'''
        return super(IRelQueryTableName2, self).get_DoNotPushJoinToDB()
    def put_LeftOuterJoin(self, LeftOuterJoin):
        '''Method IRelQueryTableName2.put_LeftOuterJoin

           INPUT
            LeftOuterJoin       : VARIANT_BOOL'''
        return super(IRelQueryTableName2, self).put_LeftOuterJoin(LeftOuterJoin)
    def get_LeftOuterJoin(self):
        '''Method IRelQueryTableName2.get_LeftOuterJoin

           OUTPUT
            LeftOuterJoin       : VARIANT_BOOL*'''
        return super(IRelQueryTableName2, self).get_LeftOuterJoin()
    def get_FireRowChangedEvents(self):
        '''Method IRelQueryTableName2.get_FireRowChangedEvents

           OUTPUT
            fireRowEvents       : VARIANT_BOOL*'''
        return super(IRelQueryTableName2, self).get_FireRowChangedEvents()
    def put_FireRowChangedEvents(self, fireRowEvents):
        '''Method IRelQueryTableName2.put_FireRowChangedEvents

           INPUT
            fireRowEvents       : VARIANT_BOOL'''
        return super(IRelQueryTableName2, self).put_FireRowChangedEvents(fireRowEvents)
    DoNotPushJoinToDB = property(get_DoNotPushJoinToDB, put_DoNotPushJoinToDB, None)
    FireRowChangedEvents = property(get_FireRowChangedEvents, put_FireRowChangedEvents, None)
    ForwardDirection = property(get_ForwardDirection, put_ForwardDirection, None)
    LeftOuterJoin = property(get_LeftOuterJoin, put_LeftOuterJoin, None)
    RelationshipClassName = property(get_RelationshipClassName, putref_RelationshipClassName, None)
    SrcQueryFilter = property(get_SrcQueryFilter, putref_SrcQueryFilter, None)
    SrcSelectionSet = property(get_SrcSelectionSet, putref_SrcSelectionSet, None)
    TargetColumns = property(get_TargetColumns, put_TargetColumns, None)

class ISelectionSet2(_esriGeoDatabase.ISelectionSet2):
    _IID = uuid.UUID('098af83f-8390-11d4-9fd1-00c04f6bdf0c')
    def Update(self, QueryFilter, Recycling):
        '''Method ISelectionSet2.Update

           INPUTS
            QueryFilter         : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ISelectionSet2, self).Update(QueryFilter, Recycling)
    def get_FullName(self):
        '''Method ISelectionSet.get_FullName (from ISelectionSet)

           OUTPUT
            Name                : IName**'''
        return super(ISelectionSet2, self).get_FullName()
    def get_Target(self):
        '''Method ISelectionSet.get_Target (from ISelectionSet)

           OUTPUT
            Target              : ITable**'''
        return super(ISelectionSet2, self).get_Target()
    def MakePermanent(self):
        '''Method ISelectionSet.MakePermanent (from ISelectionSet)'''
        return super(ISelectionSet2, self).MakePermanent()
    def get_Count(self):
        '''Method ISelectionSet.get_Count (from ISelectionSet)

           OUTPUT
            numObjectIds        : long*'''
        return super(ISelectionSet2, self).get_Count()
    def Add(self, OID):
        '''Method ISelectionSet.Add (from ISelectionSet)

           INPUT
            OID                 : long'''
        return super(ISelectionSet2, self).Add(OID)
    def AddList(self, Count, OIDList):
        '''Method ISelectionSet.AddList (from ISelectionSet)

           INPUTS
            Count               : long
            OIDList             : long*'''
        return super(ISelectionSet2, self).AddList(Count, OIDList)
    def Combine(self, otherSet, setOp):
        '''Method ISelectionSet.Combine (from ISelectionSet)

           INPUTS
            otherSet            : ISelectionSet*
            setOp               : esriSetOperation

           OUTPUT
            resultSet           : ISelectionSet**'''
        return super(ISelectionSet2, self).Combine(otherSet, setOp)
    def Search(self, QueryFilter, Recycling):
        '''Method ISelectionSet.Search (from ISelectionSet)

           INPUTS
            QueryFilter         : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(ISelectionSet2, self).Search(QueryFilter, Recycling)
    def Select(self, QueryFilter, selType, selOption, selectionContainer):
        '''Method ISelectionSet.Select (from ISelectionSet)

           INPUTS
            QueryFilter         : IQueryFilter*
            selType             : esriSelectionType
            selOption           : esriSelectionOption
            selectionContainer  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(ISelectionSet2, self).Select(QueryFilter, selType, selOption, selectionContainer)
    def Refresh(self):
        '''Method ISelectionSet.Refresh (from ISelectionSet)'''
        return super(ISelectionSet2, self).Refresh()
    def get_IDs(self):
        '''Method ISelectionSet.get_IDs (from ISelectionSet)

           OUTPUT
            EnumIDs             : IEnumIDs**'''
        return super(ISelectionSet2, self).get_IDs()
    def RemoveList(self, Count, OIDList):
        '''Method ISelectionSet.RemoveList (from ISelectionSet)

           INPUTS
            Count               : long
            OIDList             : long*'''
        return super(ISelectionSet2, self).RemoveList(Count, OIDList)
    Count = property(get_Count, None, None)
    FullName = property(get_FullName, None, None)
    IDs = property(get_IDs, None, None)
    Target = property(get_Target, None, None)

class IRelQueryTableSelectionSet(_esriGeoDatabase.IRelQueryTableSelectionSet):
    _IID = uuid.UUID('90d0f0b9-5b96-4fbc-948c-d6c04b57910f')
    def get_BaseTableSelectionSet(self):
        '''Method IRelQueryTableSelectionSet.get_BaseTableSelectionSet

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IRelQueryTableSelectionSet, self).get_BaseTableSelectionSet()
    BaseTableSelectionSet = property(get_BaseTableSelectionSet, None, None)

class IGeometricNetworkErrorDetection(_esriGeoDatabase.IGeometricNetworkErrorDetection):
    _IID = uuid.UUID('8bf5c9a4-6d40-11d4-a0b4-00c04f6bdd84')

    def __init__(self, *args, **kw):
        super(IGeometricNetworkErrorDetection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ErrorTable(self):
        '''Method IGeometricNetworkErrorDetection.get_ErrorTable

           OUTPUT
            ErrorTable          : ITable**'''
        return super(IGeometricNetworkErrorDetection, self).get_ErrorTable()
    def put_ErrorTable(self, ErrorTable):
        '''Method IGeometricNetworkErrorDetection.put_ErrorTable

           INPUT
            ErrorTable          : ITable*'''
        return super(IGeometricNetworkErrorDetection, self).put_ErrorTable(ErrorTable)
    def CreateSelectionSetFromErrorTable(self):
        '''Method IGeometricNetworkErrorDetection.CreateSelectionSetFromErrorTable

           OUTPUT
            selectionSets       : ISet**'''
        return super(IGeometricNetworkErrorDetection, self).CreateSelectionSetFromErrorTable()
    def CreateErrorTable(self, Name):
        '''Method IGeometricNetworkErrorDetection.CreateErrorTable

           INPUT
            Name                : BSTR

           OUTPUT
            ErrorTable          : ITable**'''
        return super(IGeometricNetworkErrorDetection, self).CreateErrorTable(Name)
    def DetectNetworkErrors(self, errorType, AreaOfInterest, selectionSets):
        '''Method IGeometricNetworkErrorDetection.DetectNetworkErrors

           INPUTS
            errorType           : esriNetworkErrorType
            AreaOfInterest      : IEnvelope*
            selectionSets       : ISet*

           OUTPUT
            problemSelectionSets: ISet**'''
        return super(IGeometricNetworkErrorDetection, self).DetectNetworkErrors(errorType, AreaOfInterest, selectionSets)
    def DeleteNetworkElements(self, selectionSets):
        '''Method IGeometricNetworkErrorDetection.DeleteNetworkElements

           INPUT
            selectionSets       : ISet*'''
        return super(IGeometricNetworkErrorDetection, self).DeleteNetworkElements(selectionSets)
    ErrorTable = property(get_ErrorTable, put_ErrorTable, None)

class IVersionedTable(_esriGeoDatabase.IVersionedTable):
    _IID = uuid.UUID('aa983a4d-8488-11d2-aae2-00c04fa37585')
    def Differences(self, differenceTable, differenceType, QueryFilter):
        '''Method IVersionedTable.Differences

           INPUTS
            differenceTable     : ITable*
            differenceType      : esriDifferenceType
            QueryFilter         : IQueryFilter*

           OUTPUT
            Cursor              : IDifferenceCursor**'''
        return super(IVersionedTable, self).Differences(differenceTable, differenceType, QueryFilter)

class IVersionEdit4(_esriGeoDatabase.IVersionEdit4):
    _IID = uuid.UUID('5d9eddd2-9549-4778-bc30-db190902c6e7')
    def Reconcile4(self, VersionName, acquireLock, abortIfConflicts, ChildWins, ColumnLevel):
        '''Method IVersionEdit4.Reconcile4

           INPUTS
            VersionName         : BSTR
            acquireLock         : VARIANT_BOOL
            abortIfConflicts    : VARIANT_BOOL
            ChildWins           : VARIANT_BOOL
            ColumnLevel         : VARIANT_BOOL

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit4, self).Reconcile4(VersionName, acquireLock, abortIfConflicts, ChildWins, ColumnLevel)
    def Reconcile3(self, VersionName, acquireLock, abortIfConflicts):
        '''Method IVersionEdit3.Reconcile3 (from IVersionEdit3)

           INPUTS
            VersionName         : BSTR
            acquireLock         : VARIANT_BOOL
            abortIfConflicts    : VARIANT_BOOL

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit4, self).Reconcile3(VersionName, acquireLock, abortIfConflicts)
    def Reconcile2(self, VersionName, acquireLock):
        '''Method IVersionEdit2.Reconcile2 (from IVersionEdit2)

           INPUTS
            VersionName         : BSTR
            acquireLock         : VARIANT_BOOL

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit4, self).Reconcile2(VersionName, acquireLock)
    def get_ModifiedClasses(self):
        '''Method IVersionEdit.get_ModifiedClasses (from IVersionEdit)

           OUTPUT
            classNames          : IEnumBSTR**'''
        return super(IVersionEdit4, self).get_ModifiedClasses()
    def get_ConflictClasses(self):
        '''Method IVersionEdit.get_ConflictClasses (from IVersionEdit)

           OUTPUT
            ConflictClasses     : IEnumConflictClass**'''
        return super(IVersionEdit4, self).get_ConflictClasses()
    def get_ReconcileVersion(self):
        '''Method IVersionEdit.get_ReconcileVersion (from IVersionEdit)

           OUTPUT
            conflictVersion     : IVersion**'''
        return super(IVersionEdit4, self).get_ReconcileVersion()
    def get_StartEditingVersion(self):
        '''Method IVersionEdit.get_StartEditingVersion (from IVersionEdit)

           OUTPUT
            StartEditingVersion : IVersion**'''
        return super(IVersionEdit4, self).get_StartEditingVersion()
    def get_PreReconcileVersion(self):
        '''Method IVersionEdit.get_PreReconcileVersion (from IVersionEdit)

           OUTPUT
            PreReconcileVersion : IVersion**'''
        return super(IVersionEdit4, self).get_PreReconcileVersion()
    def get_CommonAncestorVersion(self):
        '''Method IVersionEdit.get_CommonAncestorVersion (from IVersionEdit)

           OUTPUT
            ancestorVersion     : IVersion**'''
        return super(IVersionEdit4, self).get_CommonAncestorVersion()
    def Reconcile(self, VersionName):
        '''Method IVersionEdit.Reconcile (from IVersionEdit)

           INPUT
            VersionName         : BSTR

           OUTPUT
            foundConflicts      : VARIANT_BOOL*'''
        return super(IVersionEdit4, self).Reconcile(VersionName)
    def CanPost(self):
        '''Method IVersionEdit.CanPost (from IVersionEdit)

           OUTPUT
            CanPost             : VARIANT_BOOL*'''
        return super(IVersionEdit4, self).CanPost()
    def Post(self, VersionName):
        '''Method IVersionEdit.Post (from IVersionEdit)

           INPUT
            VersionName         : BSTR'''
        return super(IVersionEdit4, self).Post(VersionName)
    CommonAncestorVersion = property(get_CommonAncestorVersion, None, None)
    ConflictClasses = property(get_ConflictClasses, None, None)
    ModifiedClasses = property(get_ModifiedClasses, None, None)
    PreReconcileVersion = property(get_PreReconcileVersion, None, None)
    ReconcileVersion = property(get_ReconcileVersion, None, None)
    StartEditingVersion = property(get_StartEditingVersion, None, None)

class IRecordSetInit(_esriGeoDatabase.IRecordSetInit):
    _IID = uuid.UUID('40d32697-0b40-4023-8d73-20e004b5377b')

    def __init__(self, *args, **kw):
        super(IRecordSetInit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MaxRecordCount(self):
        '''Method IRecordSetInit.get_MaxRecordCount

           OUTPUT
            MaxRecordCount      : long*'''
        return super(IRecordSetInit, self).get_MaxRecordCount()
    def put_MaxRecordCount(self, MaxRecordCount):
        '''Method IRecordSetInit.put_MaxRecordCount

           INPUT
            MaxRecordCount      : long'''
        return super(IRecordSetInit, self).put_MaxRecordCount(MaxRecordCount)
    def SetSourceTable(self, Table, QueryFilter):
        '''Method IRecordSetInit.SetSourceTable

           INPUTS
            Table               : ITable*
            QueryFilter         : IQueryFilter*'''
        return super(IRecordSetInit, self).SetSourceTable(Table, QueryFilter)
    def SetSourceQueryDef(self, QueryDef):
        '''Method IRecordSetInit.SetSourceQueryDef

           INPUT
            QueryDef            : IQueryDef*'''
        return super(IRecordSetInit, self).SetSourceQueryDef(QueryDef)
    def CreateTable(self, Fields):
        '''Method IRecordSetInit.CreateTable

           INPUT
            Fields              : IFields*'''
        return super(IRecordSetInit, self).CreateTable(Fields)
    def CreateRowBuffer(self):
        '''Method IRecordSetInit.CreateRowBuffer

           OUTPUT
            RowBuffer           : IRowBuffer**'''
        return super(IRecordSetInit, self).CreateRowBuffer()
    def Insert(self):
        '''Method IRecordSetInit.Insert

           OUTPUT
            Cursor              : ICursor**'''
        return super(IRecordSetInit, self).Insert()
    MaxRecordCount = property(get_MaxRecordCount, put_MaxRecordCount, None)

class IRecordSet(_esriGeoDatabase.IRecordSet):
    _IID = uuid.UUID('4510a65b-acd1-4046-b8b0-10f9d0da673f')
    def get_Fields(self):
        '''Method IRecordSet.get_Fields

           OUTPUT
            FieldSet            : IFields**'''
        return super(IRecordSet, self).get_Fields()
    def get_Cursor(self, Recycling):
        '''Method IRecordSet.get_Cursor

           INPUT
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(IRecordSet, self).get_Cursor(Recycling)
    def get_IsFeatureCollection(self):
        '''Method IRecordSet.get_IsFeatureCollection

           OUTPUT
            IsFeatureCollection : VARIANT_BOOL*'''
        return super(IRecordSet, self).get_IsFeatureCollection()
    def get_Table(self):
        '''Method IRecordSet.get_Table

           OUTPUT
            Table               : ITable**'''
        return super(IRecordSet, self).get_Table()
    Fields = property(get_Fields, None, None)
    IsFeatureCollection = property(get_IsFeatureCollection, None, None)
    Table = property(get_Table, None, None)
    Cursor = IndexProperty(get_Cursor, None)

class IRecordSet2(_esriGeoDatabase.IRecordSet2):
    _IID = uuid.UUID('2d6cb9cc-c6a0-437f-a431-9c9b7fdc4862')
    def SaveAsTable(self, Workspace, TableName):
        '''Method IRecordSet2.SaveAsTable

           INPUTS
            Workspace           : IWorkspace*
            TableName           : BSTR

           OUTPUT
            Table               : ITable**'''
        return super(IRecordSet2, self).SaveAsTable(Workspace, TableName)
    def DetachTable(self):
        '''Method IRecordSet2.DetachTable'''
        return super(IRecordSet2, self).DetachTable()
    def get_Fields(self):
        '''Method IRecordSet.get_Fields (from IRecordSet)

           OUTPUT
            FieldSet            : IFields**'''
        return super(IRecordSet2, self).get_Fields()
    def get_Cursor(self, Recycling):
        '''Method IRecordSet.get_Cursor (from IRecordSet)

           INPUT
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : ICursor**'''
        return super(IRecordSet2, self).get_Cursor(Recycling)
    def get_IsFeatureCollection(self):
        '''Method IRecordSet.get_IsFeatureCollection (from IRecordSet)

           OUTPUT
            IsFeatureCollection : VARIANT_BOOL*'''
        return super(IRecordSet2, self).get_IsFeatureCollection()
    def get_Table(self):
        '''Method IRecordSet.get_Table (from IRecordSet)

           OUTPUT
            Table               : ITable**'''
        return super(IRecordSet2, self).get_Table()
    Fields = property(get_Fields, None, None)
    IsFeatureCollection = property(get_IsFeatureCollection, None, None)
    Table = property(get_Table, None, None)
    Cursor = IndexProperty(get_Cursor, None)

class IExternalSerializerGdb(_esriGeoDatabase.IExternalSerializerGdb):
    _IID = uuid.UUID('eed3eea0-a5a5-49e8-b23c-ba29ae21d3da')
    def WriteSpatialReference(self, propname, pSR):
        '''Method IExternalSerializerGdb.WriteSpatialReference

           INPUTS
            propname            : BSTR
            pSR                 : ISpatialReference*'''
        return super(IExternalSerializerGdb, self).WriteSpatialReference(propname, pSR)
    def WriteGeometry(self, propname, pGeom):
        '''Method IExternalSerializerGdb.WriteGeometry

           INPUTS
            propname            : BSTR
            pGeom               : IGeometry*'''
        return super(IExternalSerializerGdb, self).WriteGeometry(propname, pGeom)
    def WriteRow(self, propname, pRow, pFields, rowFieldIndexes, pGeomOpt):
        '''Method IExternalSerializerGdb.WriteRow

           INPUTS
            propname            : BSTR
            pRow                : IRow*
            pFields             : IFields*
            rowFieldIndexes     : SAFEARRAY*
            pGeomOpt            : IGeometryResultOptions*'''
        return super(IExternalSerializerGdb, self).WriteRow(propname, pRow, pFields, rowFieldIndexes, pGeomOpt)
    def WriteRecordSet(self, propname, pRecordset, pGeomOpt):
        '''Method IExternalSerializerGdb.WriteRecordSet

           INPUTS
            propname            : BSTR
            pRecordset          : IRecordSet*
            pGeomOpt            : IGeometryResultOptions*'''
        return super(IExternalSerializerGdb, self).WriteRecordSet(propname, pRecordset, pGeomOpt)
    def WriteErrorObject(self, propname, Code, Message, details):
        '''Method IExternalSerializerGdb.WriteErrorObject

           INPUTS
            propname            : BSTR
            Code                : long
            Message             : BSTR
            details             : IStringArray*'''
        return super(IExternalSerializerGdb, self).WriteErrorObject(propname, Code, Message, details)
    def GetErrorObject(self, propname, Code, Message, details):
        '''Method IExternalSerializerGdb.GetErrorObject

           INPUTS
            propname            : BSTR
            Code                : long
            Message             : BSTR
            details             : IStringArray*

           OUTPUT
            ppReturnBytes       : SAFEARRAY**'''
        return super(IExternalSerializerGdb, self).GetErrorObject(propname, Code, Message, details)

class IJSONConverterGdb(_esriGeoDatabase.IJSONConverterGdb):
    _IID = uuid.UUID('f28d230e-0f29-4022-b84f-e7e955a9a873')
    def ReadRecordSet(self, pReader, pDefaultSchema, pConversionProps):
        '''Method IJSONConverterGdb.ReadRecordSet

           INPUTS
            pReader             : IJSONReader*
            pDefaultSchema      : IFields*
            pConversionProps    : IPropertySet*

           OUTPUTS
            ppRecordset         : IRecordSet**
            ppOriginalToNewFieldMap: IPropertySet**'''
        return super(IJSONConverterGdb, self).ReadRecordSet(pReader, pDefaultSchema, pConversionProps)
    def ToRecordSet(self, pObj, pDefaultSchema, pConversionProps):
        '''Method IJSONConverterGdb.ToRecordSet

           INPUTS
            pObj                : IJSONObject*
            pDefaultSchema      : IFields*
            pConversionProps    : IPropertySet*

           OUTPUTS
            ppRecordset         : IRecordSet**
            ppOriginalToNewFieldMap: IPropertySet**'''
        return super(IJSONConverterGdb, self).ToRecordSet(pObj, pDefaultSchema, pConversionProps)
    def WriteRecordSet(self, pWriter, pGeomConv, pProps, propname, pRecordset, pGeomOpt, bWriteEndOfObj):
        '''Method IJSONConverterGdb.WriteRecordSet

           INPUTS
            pWriter             : IJSONWriter*
            pGeomConv           : IJSONConverterGeometry*
            pProps              : IPropertySet*
            propname            : BSTR
            pRecordset          : IRecordSet*
            pGeomOpt            : IGeometryResultOptions*
            bWriteEndOfObj      : VARIANT_BOOL'''
        return super(IJSONConverterGdb, self).WriteRecordSet(pWriter, pGeomConv, pProps, propname, pRecordset, pGeomOpt, bWriteEndOfObj)
    def QueryJSONDomain(self, pDomain, pDomainJO):
        '''Method IJSONConverterGdb.QueryJSONDomain

           INPUTS
            pDomain             : IDomain*
            pDomainJO           : IJSONObject*'''
        return super(IJSONConverterGdb, self).QueryJSONDomain(pDomain, pDomainJO)

class IDataConvertProcess(_esriGeoDatabase.IDataConvertProcess):
    _IID = uuid.UUID('27e4225d-1afd-11d4-812e-00c04f686238')
    def Init(self, outputTable):
        '''Method IDataConvertProcess.Init

           INPUT
            outputTable         : ITable*'''
        return super(IDataConvertProcess, self).Init(outputTable)
    def ProcessRowbuffer(self, RowBuffer):
        '''Method IDataConvertProcess.ProcessRowbuffer

           INPUT
            RowBuffer           : IRowBuffer*'''
        return super(IDataConvertProcess, self).ProcessRowbuffer(RowBuffer)

class ISimpleDataConverter2(_esriGeoDatabase.ISimpleDataConverter2):
    _IID = uuid.UUID('d1e48d08-ee0b-11d3-a0a1-00c04f6bc626')

    def __init__(self, *args, **kw):
        super(ISimpleDataConverter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_InputSelectionSet(self, _arg1):
        '''Method ISimpleDataConverter2.putref_InputSelectionSet

           INPUT
            _arg1               : ISelectionSet*'''
        return super(ISimpleDataConverter2, self).putref_InputSelectionSet(_arg1)
    def putref_DataConvertProcess(self, _arg1):
        '''Method ISimpleDataConverter2.putref_DataConvertProcess

           INPUT
            _arg1               : IDataConvertProcess*'''
        return super(ISimpleDataConverter2, self).putref_DataConvertProcess(_arg1)
    def Convert(self):
        '''Method ISimpleDataConverter.Convert (from ISimpleDataConverter)

           OUTPUT
            EnumInvalidObject   : IEnumInvalidObject**'''
        return super(ISimpleDataConverter2, self).Convert()
    def Reset(self):
        '''Method ISimpleDataConverter.Reset (from ISimpleDataConverter)'''
        return super(ISimpleDataConverter2, self).Reset()
    def put_IsFeatureTypeSimple(self, _arg1):
        '''Method ISimpleDataConverter.put_IsFeatureTypeSimple (from ISimpleDataConverter)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(ISimpleDataConverter2, self).put_IsFeatureTypeSimple(_arg1)
    def putref_InputDatasetName(self, _arg1):
        '''Method ISimpleDataConverter.putref_InputDatasetName (from ISimpleDataConverter)

           INPUT
            _arg1               : IDatasetName*'''
        return super(ISimpleDataConverter2, self).putref_InputDatasetName(_arg1)
    def putref_InputQueryFilter(self, _arg1):
        '''Method ISimpleDataConverter.putref_InputQueryFilter (from ISimpleDataConverter)

           INPUT
            _arg1               : IQueryFilter*'''
        return super(ISimpleDataConverter2, self).putref_InputQueryFilter(_arg1)
    def putref_OutputGeometryDef(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputGeometryDef (from ISimpleDataConverter)

           INPUT
            _arg1               : IGeometryDef*'''
        return super(ISimpleDataConverter2, self).putref_OutputGeometryDef(_arg1)
    def putref_OutputFields(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputFields (from ISimpleDataConverter)

           INPUT
            _arg1               : IFields*'''
        return super(ISimpleDataConverter2, self).putref_OutputFields(_arg1)
    def putref_OutputFeatureDatasetName(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputFeatureDatasetName (from ISimpleDataConverter)

           INPUT
            _arg1               : IFeatureDatasetName*'''
        return super(ISimpleDataConverter2, self).putref_OutputFeatureDatasetName(_arg1)
    def putref_OutputDatasetName(self, _arg1):
        '''Method ISimpleDataConverter.putref_OutputDatasetName (from ISimpleDataConverter)

           INPUT
            _arg1               : IDatasetName*'''
        return super(ISimpleDataConverter2, self).putref_OutputDatasetName(_arg1)
    def put_ConfigurationKeyword(self, _arg1):
        '''Method ISimpleDataConverter.put_ConfigurationKeyword (from ISimpleDataConverter)

           INPUT
            _arg1               : BSTR'''
        return super(ISimpleDataConverter2, self).put_ConfigurationKeyword(_arg1)
    def put_FlushInterval(self, _arg1):
        '''Method ISimpleDataConverter.put_FlushInterval (from ISimpleDataConverter)

           INPUT
            _arg1               : long'''
        return super(ISimpleDataConverter2, self).put_FlushInterval(_arg1)
    def put_ParentWindowHandle(self, _arg1):
        '''Method ISimpleDataConverter.put_ParentWindowHandle (from ISimpleDataConverter)

           INPUT
            _arg1               : OLE_HANDLE'''
        return super(ISimpleDataConverter2, self).put_ParentWindowHandle(_arg1)
    ConfigurationKeyword = property(None, put_ConfigurationKeyword, None)
    DataConvertProcess = property(None, putref_DataConvertProcess, None)
    FlushInterval = property(None, put_FlushInterval, None)
    InputDatasetName = property(None, putref_InputDatasetName, None)
    InputQueryFilter = property(None, putref_InputQueryFilter, None)
    InputSelectionSet = property(None, putref_InputSelectionSet, None)
    IsFeatureTypeSimple = property(None, put_IsFeatureTypeSimple, None)
    OutputDatasetName = property(None, putref_OutputDatasetName, None)
    OutputFeatureDatasetName = property(None, putref_OutputFeatureDatasetName, None)
    OutputFields = property(None, putref_OutputFields, None)
    OutputGeometryDef = property(None, putref_OutputGeometryDef, None)
    ParentWindowHandle = property(None, put_ParentWindowHandle, None)

class IReplicaFilterDescriptionEdit(_esriGeoDatabase.IReplicaFilterDescriptionEdit):
    _IID = uuid.UUID('50befd5a-3978-470f-b6db-15916162c15c')

    def __init__(self, *args, **kw):
        super(IReplicaFilterDescriptionEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Geometry(self, _arg1):
        '''Method IReplicaFilterDescriptionEdit.putref_Geometry

           INPUT
            _arg1               : IGeometry*'''
        return super(IReplicaFilterDescriptionEdit, self).putref_Geometry(_arg1)
    def put_SpatialRelation(self, _arg1):
        '''Method IReplicaFilterDescriptionEdit.put_SpatialRelation

           INPUT
            _arg1               : esriSpatialRelEnum'''
        return super(IReplicaFilterDescriptionEdit, self).put_SpatialRelation(_arg1)
    def put_TableUsesQueryGeometry(self, Index, _arg2):
        '''Method IReplicaFilterDescriptionEdit.put_TableUsesQueryGeometry

           INPUTS
            Index               : long
            _arg2               : VARIANT_BOOL'''
        return super(IReplicaFilterDescriptionEdit, self).put_TableUsesQueryGeometry(Index, _arg2)
    def put_TableUsesSelection(self, Index, _arg2):
        '''Method IReplicaFilterDescriptionEdit.put_TableUsesSelection

           INPUTS
            Index               : long
            _arg2               : VARIANT_BOOL'''
        return super(IReplicaFilterDescriptionEdit, self).put_TableUsesSelection(Index, _arg2)
    def put_TableUsesDefQuery(self, Index, _arg2):
        '''Method IReplicaFilterDescriptionEdit.put_TableUsesDefQuery

           INPUTS
            Index               : long
            _arg2               : VARIANT_BOOL'''
        return super(IReplicaFilterDescriptionEdit, self).put_TableUsesDefQuery(Index, _arg2)
    def putref_TableSelection(self, Index, _arg2):
        '''Method IReplicaFilterDescriptionEdit.putref_TableSelection

           INPUTS
            Index               : long
            _arg2               : ISelectionSet*'''
        return super(IReplicaFilterDescriptionEdit, self).putref_TableSelection(Index, _arg2)
    def put_TableDefQuery(self, Index, _arg2):
        '''Method IReplicaFilterDescriptionEdit.put_TableDefQuery

           INPUTS
            Index               : long
            _arg2               : BSTR'''
        return super(IReplicaFilterDescriptionEdit, self).put_TableDefQuery(Index, _arg2)
    def put_RowsType(self, Index, _arg2):
        '''Method IReplicaFilterDescriptionEdit.put_RowsType

           INPUTS
            Index               : long
            _arg2               : esriRowsType'''
        return super(IReplicaFilterDescriptionEdit, self).put_RowsType(Index, _arg2)
    Geometry = property(None, putref_Geometry, None)
    RowsType = property(None, put_RowsType, None)
    SpatialRelation = property(None, put_SpatialRelation, None)
    TableDefQuery = property(None, put_TableDefQuery, None)
    TableSelection = property(None, putref_TableSelection, None)
    TableUsesDefQuery = property(None, put_TableUsesDefQuery, None)
    TableUsesQueryGeometry = property(None, put_TableUsesQueryGeometry, None)
    TableUsesSelection = property(None, put_TableUsesSelection, None)

class IReplicaFilterDescription(_esriGeoDatabase.IReplicaFilterDescription):
    _IID = uuid.UUID('f0455780-be29-46e4-a25a-459dcaff6276')
    def get_Geometry(self):
        '''Method IReplicaFilterDescription.get_Geometry

           OUTPUT
            qGeometry           : IGeometry**'''
        return super(IReplicaFilterDescription, self).get_Geometry()
    def get_SpatialRelation(self):
        '''Method IReplicaFilterDescription.get_SpatialRelation

           OUTPUT
            SpatialRel          : esriSpatialRelEnum*'''
        return super(IReplicaFilterDescription, self).get_SpatialRelation()
    def get_TableUsesQueryGeometry(self, Index):
        '''Method IReplicaFilterDescription.get_TableUsesQueryGeometry

           INPUT
            Index               : long

           OUTPUT
            UseGeometry         : VARIANT_BOOL*'''
        return super(IReplicaFilterDescription, self).get_TableUsesQueryGeometry(Index)
    def get_TableUsesSelection(self, Index):
        '''Method IReplicaFilterDescription.get_TableUsesSelection

           INPUT
            Index               : long

           OUTPUT
            useSelection        : VARIANT_BOOL*'''
        return super(IReplicaFilterDescription, self).get_TableUsesSelection(Index)
    def get_TableUsesDefQuery(self, Index):
        '''Method IReplicaFilterDescription.get_TableUsesDefQuery

           INPUT
            Index               : long

           OUTPUT
            useDefinition       : VARIANT_BOOL*'''
        return super(IReplicaFilterDescription, self).get_TableUsesDefQuery(Index)
    def get_TableSelection(self, Index):
        '''Method IReplicaFilterDescription.get_TableSelection

           INPUT
            Index               : long

           OUTPUT
            selections          : ISelectionSet**'''
        return super(IReplicaFilterDescription, self).get_TableSelection(Index)
    def get_TableDefQuery(self, Index):
        '''Method IReplicaFilterDescription.get_TableDefQuery

           INPUT
            Index               : long

           OUTPUT
            DefQuery            : BSTR*'''
        return super(IReplicaFilterDescription, self).get_TableDefQuery(Index)
    def get_RowsType(self, Index):
        '''Method IReplicaFilterDescription.get_RowsType

           INPUT
            Index               : long

           OUTPUT
            rType               : esriRowsType*'''
        return super(IReplicaFilterDescription, self).get_RowsType(Index)
    Geometry = property(get_Geometry, None, None)
    SpatialRelation = property(get_SpatialRelation, None, None)
    RowsType = IndexProperty(get_RowsType, None)
    TableDefQuery = IndexProperty(get_TableDefQuery, None)
    TableSelection = IndexProperty(get_TableSelection, None)
    TableUsesDefQuery = IndexProperty(get_TableUsesDefQuery, None)
    TableUsesQueryGeometry = IndexProperty(get_TableUsesQueryGeometry, None)
    TableUsesSelection = IndexProperty(get_TableUsesSelection, None)

class IReplicaFilterDescription2(_esriGeoDatabase.IReplicaFilterDescription2):
    _IID = uuid.UUID('40f7cb0d-c8a1-413e-9112-c7862db1bee1')
    def get_TableSelectionIDs(self, Index):
        '''Method IReplicaFilterDescription2.get_TableSelectionIDs

           INPUT
            Index               : long

           OUTPUT
            SelectionIDs        : IFIDSet**'''
        return super(IReplicaFilterDescription2, self).get_TableSelectionIDs(Index)
    def get_Geometry(self):
        '''Method IReplicaFilterDescription.get_Geometry (from IReplicaFilterDescription)

           OUTPUT
            qGeometry           : IGeometry**'''
        return super(IReplicaFilterDescription2, self).get_Geometry()
    def get_SpatialRelation(self):
        '''Method IReplicaFilterDescription.get_SpatialRelation (from IReplicaFilterDescription)

           OUTPUT
            SpatialRel          : esriSpatialRelEnum*'''
        return super(IReplicaFilterDescription2, self).get_SpatialRelation()
    def get_TableUsesQueryGeometry(self, Index):
        '''Method IReplicaFilterDescription.get_TableUsesQueryGeometry (from IReplicaFilterDescription)

           INPUT
            Index               : long

           OUTPUT
            UseGeometry         : VARIANT_BOOL*'''
        return super(IReplicaFilterDescription2, self).get_TableUsesQueryGeometry(Index)
    def get_TableUsesSelection(self, Index):
        '''Method IReplicaFilterDescription.get_TableUsesSelection (from IReplicaFilterDescription)

           INPUT
            Index               : long

           OUTPUT
            useSelection        : VARIANT_BOOL*'''
        return super(IReplicaFilterDescription2, self).get_TableUsesSelection(Index)
    def get_TableUsesDefQuery(self, Index):
        '''Method IReplicaFilterDescription.get_TableUsesDefQuery (from IReplicaFilterDescription)

           INPUT
            Index               : long

           OUTPUT
            useDefinition       : VARIANT_BOOL*'''
        return super(IReplicaFilterDescription2, self).get_TableUsesDefQuery(Index)
    def get_TableSelection(self, Index):
        '''Method IReplicaFilterDescription.get_TableSelection (from IReplicaFilterDescription)

           INPUT
            Index               : long

           OUTPUT
            selections          : ISelectionSet**'''
        return super(IReplicaFilterDescription2, self).get_TableSelection(Index)
    def get_TableDefQuery(self, Index):
        '''Method IReplicaFilterDescription.get_TableDefQuery (from IReplicaFilterDescription)

           INPUT
            Index               : long

           OUTPUT
            DefQuery            : BSTR*'''
        return super(IReplicaFilterDescription2, self).get_TableDefQuery(Index)
    def get_RowsType(self, Index):
        '''Method IReplicaFilterDescription.get_RowsType (from IReplicaFilterDescription)

           INPUT
            Index               : long

           OUTPUT
            rType               : esriRowsType*'''
        return super(IReplicaFilterDescription2, self).get_RowsType(Index)
    Geometry = property(get_Geometry, None, None)
    SpatialRelation = property(get_SpatialRelation, None, None)
    RowsType = IndexProperty(get_RowsType, None)
    TableDefQuery = IndexProperty(get_TableDefQuery, None)
    TableSelection = IndexProperty(get_TableSelection, None)
    TableSelectionIDs = IndexProperty(get_TableSelectionIDs, None)
    TableUsesDefQuery = IndexProperty(get_TableUsesDefQuery, None)
    TableUsesQueryGeometry = IndexProperty(get_TableUsesQueryGeometry, None)
    TableUsesSelection = IndexProperty(get_TableUsesSelection, None)

class IWorkspaceReplicaSyncEvents(_esriGeoDatabase.IWorkspaceReplicaSyncEvents):
    _IID = uuid.UUID('6ab1120f-81df-4c11-b255-c5dd15690939')
    def BeforeExportingDataChanges(self, sourceReplica, dataChangesSource, DeltaFile):
        '''Method IWorkspaceReplicaSyncEvents.BeforeExportingDataChanges

           INPUTS
            sourceReplica       : IReplica*
            dataChangesSource   : IUnknown*
            DeltaFile           : IUnknown*'''
        return super(IWorkspaceReplicaSyncEvents, self).BeforeExportingDataChanges(sourceReplica, dataChangesSource, DeltaFile)
    def AfterExportingDataChanges(self, sourceReplica, dataChangesSource, DeltaFile):
        '''Method IWorkspaceReplicaSyncEvents.AfterExportingDataChanges

           INPUTS
            sourceReplica       : IReplica*
            dataChangesSource   : IUnknown*
            DeltaFile           : IUnknown*'''
        return super(IWorkspaceReplicaSyncEvents, self).AfterExportingDataChanges(sourceReplica, dataChangesSource, DeltaFile)
    def BeforeSynchronizingDataChanges(self, targetReplica, dataChangesSource):
        '''Method IWorkspaceReplicaSyncEvents.BeforeSynchronizingDataChanges

           INPUTS
            targetReplica       : IReplica*
            dataChangesSource   : IUnknown*'''
        return super(IWorkspaceReplicaSyncEvents, self).BeforeSynchronizingDataChanges(targetReplica, dataChangesSource)
    def AfterSynchronizingDataChanges(self, targetReplica, dataChangesSource, oidMappingTable, changesTable):
        '''Method IWorkspaceReplicaSyncEvents.AfterSynchronizingDataChanges

           INPUTS
            targetReplica       : IReplica*
            dataChangesSource   : IUnknown*
            oidMappingTable     : ITable*
            changesTable        : ITable*'''
        return super(IWorkspaceReplicaSyncEvents, self).AfterSynchronizingDataChanges(targetReplica, dataChangesSource, oidMappingTable, changesTable)

class IRasterDatasetEdit2(_esriGeoDatabase.IRasterDatasetEdit2):
    _IID = uuid.UUID('24217915-7f69-4317-b0e0-908400e578c4')
    def AlterAttributeTable(self, newTable):
        '''Method IRasterDatasetEdit2.AlterAttributeTable

           INPUT
            newTable            : ITable*'''
        return super(IRasterDatasetEdit2, self).AlterAttributeTable(newTable)
    def DeleteAttributeTable(self):
        '''Method IRasterDatasetEdit2.DeleteAttributeTable'''
        return super(IRasterDatasetEdit2, self).DeleteAttributeTable()
    def get_CanAlterAttributeTable(self):
        '''Method IRasterDatasetEdit2.get_CanAlterAttributeTable

           OUTPUT
            canAlter            : VARIANT_BOOL*'''
        return super(IRasterDatasetEdit2, self).get_CanAlterAttributeTable()
    def BuildAttributeTable(self):
        '''Method IRasterDatasetEdit2.BuildAttributeTable'''
        return super(IRasterDatasetEdit2, self).BuildAttributeTable()
    def Mosaic(self, Raster, tolerance):
        '''Method IRasterDatasetEdit.Mosaic (from IRasterDatasetEdit)

           INPUTS
            Raster              : IRaster*
            tolerance           : double'''
        return super(IRasterDatasetEdit2, self).Mosaic(Raster, tolerance)
    def MosaicBands(self, Raster, start, tolerance):
        '''Method IRasterDatasetEdit.MosaicBands (from IRasterDatasetEdit)

           INPUTS
            Raster              : IRaster*
            start               : long
            tolerance           : double'''
        return super(IRasterDatasetEdit2, self).MosaicBands(Raster, start, tolerance)
    def Erase(self, Extent):
        '''Method IRasterDatasetEdit.Erase (from IRasterDatasetEdit)

           INPUT
            Extent              : IEnvelope*'''
        return super(IRasterDatasetEdit2, self).Erase(Extent)
    def ComputeStats(self, PyramidLevel):
        '''Method IRasterDatasetEdit.ComputeStats (from IRasterDatasetEdit)

           INPUT
            PyramidLevel        : long'''
        return super(IRasterDatasetEdit2, self).ComputeStats(PyramidLevel)
    def DeleteStats(self):
        '''Method IRasterDatasetEdit.DeleteStats (from IRasterDatasetEdit)'''
        return super(IRasterDatasetEdit2, self).DeleteStats()
    def AlterColormap(self, colormap):
        '''Method IRasterDatasetEdit.AlterColormap (from IRasterDatasetEdit)

           INPUT
            colormap            : IRasterColormap*'''
        return super(IRasterDatasetEdit2, self).AlterColormap(colormap)
    def DeleteColormap(self):
        '''Method IRasterDatasetEdit.DeleteColormap (from IRasterDatasetEdit)'''
        return super(IRasterDatasetEdit2, self).DeleteColormap()
    def AppendNewBand(self):
        '''Method IRasterDatasetEdit.AppendNewBand (from IRasterDatasetEdit)'''
        return super(IRasterDatasetEdit2, self).AppendNewBand()
    CanAlterAttributeTable = property(get_CanAlterAttributeTable, None, None)

class IRasterDatasetEdit3(_esriGeoDatabase.IRasterDatasetEdit3):
    _IID = uuid.UUID('8e68e3da-30d6-492b-b12e-ca2669a106ef')
    def ComputeStatisticsHistogram(self, skipx, skipy, ignoreValues, requireHistogram):
        '''Method IRasterDatasetEdit3.ComputeStatisticsHistogram

           INPUTS
            skipx               : long
            skipy               : long
            ignoreValues        : VARIANT
            requireHistogram    : VARIANT_BOOL'''
        return super(IRasterDatasetEdit3, self).ComputeStatisticsHistogram(skipx, skipy, ignoreValues, requireHistogram)
    def AlterAttributeTable(self, newTable):
        '''Method IRasterDatasetEdit2.AlterAttributeTable (from IRasterDatasetEdit2)

           INPUT
            newTable            : ITable*'''
        return super(IRasterDatasetEdit3, self).AlterAttributeTable(newTable)
    def DeleteAttributeTable(self):
        '''Method IRasterDatasetEdit2.DeleteAttributeTable (from IRasterDatasetEdit2)'''
        return super(IRasterDatasetEdit3, self).DeleteAttributeTable()
    def get_CanAlterAttributeTable(self):
        '''Method IRasterDatasetEdit2.get_CanAlterAttributeTable (from IRasterDatasetEdit2)

           OUTPUT
            canAlter            : VARIANT_BOOL*'''
        return super(IRasterDatasetEdit3, self).get_CanAlterAttributeTable()
    def BuildAttributeTable(self):
        '''Method IRasterDatasetEdit2.BuildAttributeTable (from IRasterDatasetEdit2)'''
        return super(IRasterDatasetEdit3, self).BuildAttributeTable()
    def Mosaic(self, Raster, tolerance):
        '''Method IRasterDatasetEdit.Mosaic (from IRasterDatasetEdit)

           INPUTS
            Raster              : IRaster*
            tolerance           : double'''
        return super(IRasterDatasetEdit3, self).Mosaic(Raster, tolerance)
    def MosaicBands(self, Raster, start, tolerance):
        '''Method IRasterDatasetEdit.MosaicBands (from IRasterDatasetEdit)

           INPUTS
            Raster              : IRaster*
            start               : long
            tolerance           : double'''
        return super(IRasterDatasetEdit3, self).MosaicBands(Raster, start, tolerance)
    def Erase(self, Extent):
        '''Method IRasterDatasetEdit.Erase (from IRasterDatasetEdit)

           INPUT
            Extent              : IEnvelope*'''
        return super(IRasterDatasetEdit3, self).Erase(Extent)
    def ComputeStats(self, PyramidLevel):
        '''Method IRasterDatasetEdit.ComputeStats (from IRasterDatasetEdit)

           INPUT
            PyramidLevel        : long'''
        return super(IRasterDatasetEdit3, self).ComputeStats(PyramidLevel)
    def DeleteStats(self):
        '''Method IRasterDatasetEdit.DeleteStats (from IRasterDatasetEdit)'''
        return super(IRasterDatasetEdit3, self).DeleteStats()
    def AlterColormap(self, colormap):
        '''Method IRasterDatasetEdit.AlterColormap (from IRasterDatasetEdit)

           INPUT
            colormap            : IRasterColormap*'''
        return super(IRasterDatasetEdit3, self).AlterColormap(colormap)
    def DeleteColormap(self):
        '''Method IRasterDatasetEdit.DeleteColormap (from IRasterDatasetEdit)'''
        return super(IRasterDatasetEdit3, self).DeleteColormap()
    def AppendNewBand(self):
        '''Method IRasterDatasetEdit.AppendNewBand (from IRasterDatasetEdit)'''
        return super(IRasterDatasetEdit3, self).AppendNewBand()
    CanAlterAttributeTable = property(get_CanAlterAttributeTable, None, None)

class IFeatureDataConverter2(_esriGeoDatabase.IFeatureDataConverter2):
    _IID = uuid.UUID('5c37086d-ee25-11d3-a0a1-00c04f6bc626')
    def ConvertFeatureDataset(self, inputFDatasetName, outputFDatasetName, OutputGeometryDef, configKey, FlushInterval, parentHWND):
        '''Method IFeatureDataConverter2.ConvertFeatureDataset

           INPUTS
            inputFDatasetName   : IFeatureDatasetName*
            outputFDatasetName  : IFeatureDatasetName*
            OutputGeometryDef   : IGeometryDef*
            configKey           : BSTR
            FlushInterval       : long
            parentHWND          : OLE_HANDLE'''
        return super(IFeatureDataConverter2, self).ConvertFeatureDataset(inputFDatasetName, outputFDatasetName, OutputGeometryDef, configKey, FlushInterval, parentHWND)
    def ConvertFeatureClass(self, inputFClassName, InputQueryFilter, InputSelectionSet, outputFDatasetName, outputFClassName, OutputGeometryDef, OutputFields, configKey, FlushInterval, parentHWND):
        '''Method IFeatureDataConverter2.ConvertFeatureClass

           INPUTS
            inputFClassName     : IDatasetName*
            InputQueryFilter    : IQueryFilter*
            InputSelectionSet   : ISelectionSet*
            outputFDatasetName  : IFeatureDatasetName*
            outputFClassName    : IFeatureClassName*
            OutputGeometryDef   : IGeometryDef*
            OutputFields        : IFields*
            configKey           : BSTR
            FlushInterval       : long
            parentHWND          : OLE_HANDLE

           OUTPUT
            EnumInvalidObject   : IEnumInvalidObject**'''
        return super(IFeatureDataConverter2, self).ConvertFeatureClass(inputFClassName, InputQueryFilter, InputSelectionSet, outputFDatasetName, outputFClassName, OutputGeometryDef, OutputFields, configKey, FlushInterval, parentHWND)
    def ConvertTable(self, InputDatasetName, InputQueryFilter, InputSelectionSet, OutputDatasetName, OutputFields, configKey, FlushInterval, parentHWND):
        '''Method IFeatureDataConverter2.ConvertTable

           INPUTS
            InputDatasetName    : IDatasetName*
            InputQueryFilter    : IQueryFilter*
            InputSelectionSet   : ISelectionSet*
            OutputDatasetName   : IDatasetName*
            OutputFields        : IFields*
            configKey           : BSTR
            FlushInterval       : long
            parentHWND          : OLE_HANDLE

           OUTPUT
            EnumInvalidObject   : IEnumInvalidObject**'''
        return super(IFeatureDataConverter2, self).ConvertTable(InputDatasetName, InputQueryFilter, InputSelectionSet, OutputDatasetName, OutputFields, configKey, FlushInterval, parentHWND)

class IXYEventSource(_esriGeoDatabase.IXYEventSource):
    _IID = uuid.UUID('681441e2-eaea-11d3-9f8a-00c04f6bdf06')
    def get_EventTable(self):
        '''Method IXYEventSource.get_EventTable

           OUTPUT
            aTable              : ITable**'''
        return super(IXYEventSource, self).get_EventTable()
    def get_EventProperties(self):
        '''Method IXYEventSource.get_EventProperties

           OUTPUT
            xyProperties        : IXYEventProperties**'''
        return super(IXYEventSource, self).get_EventProperties()
    def RefreshExtent(self):
        '''Method IXYEventSource.RefreshExtent'''
        return super(IXYEventSource, self).RefreshExtent()
    EventProperties = property(get_EventProperties, None, None)
    EventTable = property(get_EventTable, None, None)

class IExternalSerializerGdb2(_esriGeoDatabase.IExternalSerializerGdb2):
    _IID = uuid.UUID('bd834841-484f-4903-aaae-0fa26e5206cd')
    def WriteSpatialReference(self, propname, pSR):
        '''Method IExternalSerializerGdb2.WriteSpatialReference

           INPUTS
            propname            : BSTR
            pSR                 : ISpatialReference*'''
        return super(IExternalSerializerGdb2, self).WriteSpatialReference(propname, pSR)
    def WriteGeometry(self, propname, pGeom):
        '''Method IExternalSerializerGdb2.WriteGeometry

           INPUTS
            propname            : BSTR
            pGeom               : IGeometry*'''
        return super(IExternalSerializerGdb2, self).WriteGeometry(propname, pGeom)
    def WriteRow(self, propname, pRow, pFields, rowFieldIndexes, pGeomOpt):
        '''Method IExternalSerializerGdb2.WriteRow

           INPUTS
            propname            : BSTR
            pRow                : IRow*
            pFields             : IFields*
            rowFieldIndexes     : SAFEARRAY*
            pGeomOpt            : IGeometryResultOptions*'''
        return super(IExternalSerializerGdb2, self).WriteRow(propname, pRow, pFields, rowFieldIndexes, pGeomOpt)
    def WriteRecordSet(self, propname, pRecordset, pGeomOpt):
        '''Method IExternalSerializerGdb2.WriteRecordSet

           INPUTS
            propname            : BSTR
            pRecordset          : IRecordSet*
            pGeomOpt            : IGeometryResultOptions*'''
        return super(IExternalSerializerGdb2, self).WriteRecordSet(propname, pRecordset, pGeomOpt)
    def WriteErrorObject(self, propname, Code, Message, details):
        '''Method IExternalSerializerGdb2.WriteErrorObject

           INPUTS
            propname            : BSTR
            Code                : long
            Message             : BSTR
            details             : IStringArray*'''
        return super(IExternalSerializerGdb2, self).WriteErrorObject(propname, Code, Message, details)
    def GetErrorObject(self, propname, Code, Message, details):
        '''Method IExternalSerializerGdb2.GetErrorObject

           INPUTS
            propname            : BSTR
            Code                : long
            Message             : BSTR
            details             : IStringArray*

           OUTPUT
            ppReturnBytes       : SAFEARRAY**'''
        return super(IExternalSerializerGdb2, self).GetErrorObject(propname, Code, Message, details)
    def WriteRecordSetEx(self, propname, pRecordset, pGeomOpt):
        '''Method IExternalSerializerGdb2.WriteRecordSetEx

           INPUTS
            propname            : BSTR
            pRecordset          : IRecordSet*
            pGeomOpt            : IGeometryResultOptions*

           OUTPUT
            recordsSerialized   : long*'''
        return super(IExternalSerializerGdb2, self).WriteRecordSetEx(propname, pRecordset, pGeomOpt)

class IEnumNameMapping(_esriGeoDatabase.IEnumNameMapping):
    _IID = uuid.UUID('36a4d970-f5d5-11d3-8120-00c04f686238')
    def Next(self):
        '''Method IEnumNameMapping.Next

           OUTPUT
            info                : INameMapping**'''
        return super(IEnumNameMapping, self).Next()
    def __iter__(self):
        try:
            super(IEnumNameMapping, self).Reset()
            val = super(IEnumNameMapping, self).Next()
            while val:
                yield val
                val = super(IEnumNameMapping, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumNameMapping.Reset'''
        return super(IEnumNameMapping, self).Reset()
    def FindDatasetName(self, Name, Type):
        '''Method IEnumNameMapping.FindDatasetName

           INPUTS
            Name                : BSTR
            Type                : esriDatasetType

           OUTPUT
            info                : INameMapping**'''
        return super(IEnumNameMapping, self).FindDatasetName(Name, Type)
    def FindDomain(self, Name):
        '''Method IEnumNameMapping.FindDomain

           INPUT
            Name                : BSTR

           OUTPUT
            info                : INameMapping**'''
        return super(IEnumNameMapping, self).FindDomain(Name)

class INameMapping(_esriGeoDatabase.INameMapping):
    _IID = uuid.UUID('36a4d96f-f5d5-11d3-8120-00c04f686238')

    def __init__(self, *args, **kw):
        super(INameMapping, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SourceObject(self):
        '''Method INameMapping.get_SourceObject

           OUTPUT
            sObject             : IUnknown**'''
        return super(INameMapping, self).get_SourceObject()
    def put_TargetName(self, Name):
        '''Method INameMapping.put_TargetName

           INPUT
            Name                : BSTR'''
        return super(INameMapping, self).put_TargetName(Name)
    def get_TargetName(self):
        '''Method INameMapping.get_TargetName

           OUTPUT
            Name                : BSTR*'''
        return super(INameMapping, self).get_TargetName()
    def get_NameConflicts(self):
        '''Method INameMapping.get_NameConflicts

           OUTPUT
            conflicts           : VARIANT_BOOL*'''
        return super(INameMapping, self).get_NameConflicts()
    def ValidateTargetName(self, toName):
        '''Method INameMapping.ValidateTargetName

           INPUT
            toName              : IName*'''
        return super(INameMapping, self).ValidateTargetName(toName)
    def GetSuggestedName(self, toName):
        '''Method INameMapping.GetSuggestedName

           INPUT
            toName              : IName*

           OUTPUT
            Name                : BSTR*'''
        return super(INameMapping, self).GetSuggestedName(toName)
    def get_Children(self):
        '''Method INameMapping.get_Children

           OUTPUT
            Objects             : IEnumNameMapping**'''
        return super(INameMapping, self).get_Children()
    def put_ConfigKeyword(self, _arg1):
        '''Method INameMapping.put_ConfigKeyword

           INPUT
            _arg1               : BSTR'''
        return super(INameMapping, self).put_ConfigKeyword(_arg1)
    Children = property(get_Children, None, None)
    ConfigKeyword = property(None, put_ConfigKeyword, None)
    NameConflicts = property(get_NameConflicts, None, None)
    SourceObject = property(get_SourceObject, None, None)
    TargetName = property(get_TargetName, put_TargetName, None)

class INameMapping2(_esriGeoDatabase.INameMapping2):
    _IID = uuid.UUID('d4e6badf-3eb9-4f4e-9103-c7d0cbc119a2')

    def __init__(self, *args, **kw):
        super(INameMapping2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConfigKeyword(self):
        '''Method INameMapping2.get_ConfigKeyword

           OUTPUT
            keyword             : BSTR*'''
        return super(INameMapping2, self).get_ConfigKeyword()
    def get_Created(self):
        '''Method INameMapping2.get_Created

           OUTPUT
            Created             : VARIANT_BOOL*'''
        return super(INameMapping2, self).get_Created()
    def get_SourceObject(self):
        '''Method INameMapping.get_SourceObject (from INameMapping)

           OUTPUT
            sObject             : IUnknown**'''
        return super(INameMapping2, self).get_SourceObject()
    def put_TargetName(self, Name):
        '''Method INameMapping.put_TargetName (from INameMapping)

           INPUT
            Name                : BSTR'''
        return super(INameMapping2, self).put_TargetName(Name)
    def get_TargetName(self):
        '''Method INameMapping.get_TargetName (from INameMapping)

           OUTPUT
            Name                : BSTR*'''
        return super(INameMapping2, self).get_TargetName()
    def get_NameConflicts(self):
        '''Method INameMapping.get_NameConflicts (from INameMapping)

           OUTPUT
            conflicts           : VARIANT_BOOL*'''
        return super(INameMapping2, self).get_NameConflicts()
    def ValidateTargetName(self, toName):
        '''Method INameMapping.ValidateTargetName (from INameMapping)

           INPUT
            toName              : IName*'''
        return super(INameMapping2, self).ValidateTargetName(toName)
    def GetSuggestedName(self, toName):
        '''Method INameMapping.GetSuggestedName (from INameMapping)

           INPUT
            toName              : IName*

           OUTPUT
            Name                : BSTR*'''
        return super(INameMapping2, self).GetSuggestedName(toName)
    def get_Children(self):
        '''Method INameMapping.get_Children (from INameMapping)

           OUTPUT
            Objects             : IEnumNameMapping**'''
        return super(INameMapping2, self).get_Children()
    def put_ConfigKeyword(self, _arg1):
        '''Method INameMapping.put_ConfigKeyword (from INameMapping)

           INPUT
            _arg1               : BSTR'''
        return super(INameMapping2, self).put_ConfigKeyword(_arg1)
    Children = property(get_Children, None, None)
    ConfigKeyword = property(get_ConfigKeyword, put_ConfigKeyword, None)
    Created = property(get_Created, None, None)
    NameConflicts = property(get_NameConflicts, None, None)
    SourceObject = property(get_SourceObject, None, None)
    TargetName = property(get_TargetName, put_TargetName, None)

class IReplicaDescription4(_esriGeoDatabase.IReplicaDescription4):
    _IID = uuid.UUID('cd9668c2-d755-44fd-97f6-b1649e1c3f6e')

    def __init__(self, *args, **kw):
        super(IReplicaDescription4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseArchiving(self, UseArchiving):
        '''Method IReplicaDescription4.put_UseArchiving

           INPUT
            UseArchiving        : VARIANT_BOOL'''
        return super(IReplicaDescription4, self).put_UseArchiving(UseArchiving)
    def get_UseArchiving(self):
        '''Method IReplicaDescription4.get_UseArchiving

           OUTPUT
            UseArchiving        : VARIANT_BOOL*'''
        return super(IReplicaDescription4, self).get_UseArchiving()
    def get_ReplicaEnumNameMapping(self):
        '''Method IReplicaDescription4.get_ReplicaEnumNameMapping

           OUTPUT
            EnumNameMapping     : IEnumNameMapping**'''
        return super(IReplicaDescription4, self).get_ReplicaEnumNameMapping()
    def put_AccessType(self, AccessType):
        '''Method IReplicaDescription3.put_AccessType (from IReplicaDescription3)

           INPUT
            AccessType          : esriReplicaAccessType'''
        return super(IReplicaDescription4, self).put_AccessType(AccessType)
    def get_AccessType(self):
        '''Method IReplicaDescription3.get_AccessType (from IReplicaDescription3)

           OUTPUT
            AccessType          : esriReplicaAccessType*'''
        return super(IReplicaDescription4, self).get_AccessType()
    def get_FetchRelatedObjects(self):
        '''Method IReplicaDescription2.get_FetchRelatedObjects (from IReplicaDescription2)

           OUTPUT
            GetRelatedObjects   : VARIANT_BOOL*'''
        return super(IReplicaDescription4, self).get_FetchRelatedObjects()
    def FindTable2(self, Name, database, Owner, Type):
        '''Method IReplicaDescription2.FindTable2 (from IReplicaDescription2)

           INPUTS
            Name                : BSTR
            database            : BSTR
            Owner               : BSTR
            Type                : esriDatasetType

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescription4, self).FindTable2(Name, database, Owner, Type)
    def FindRelationshipClassInfoByName(self, Name, database, Owner):
        '''Method IReplicaDescription2.FindRelationshipClassInfoByName (from IReplicaDescription2)

           INPUTS
            Name                : BSTR
            database            : BSTR
            Owner               : BSTR

           OUTPUT
            RelDescription      : IRelationshipClassInfo**'''
        return super(IReplicaDescription4, self).FindRelationshipClassInfoByName(Name, database, Owner)
    def FindRelationshipClassInfo(self, RCName):
        '''Method IReplicaDescription2.FindRelationshipClassInfo (from IReplicaDescription2)

           INPUT
            RCName              : IRelationshipClassName*

           OUTPUT
            RelDescription      : IRelationshipClassInfo**'''
        return super(IReplicaDescription4, self).FindRelationshipClassInfo(RCName)
    def get_RelationshipClassesInfo(self):
        '''Method IReplicaDescription2.get_RelationshipClassesInfo (from IReplicaDescription2)

           OUTPUT
            EnumRelInfo         : IEnumRelationshipClassInfo**'''
        return super(IReplicaDescription4, self).get_RelationshipClassesInfo()
    def Init(self, enumNames, OutputWSName, ReuseSchema, deType):
        '''Method IReplicaDescription.Init (from IReplicaDescription)

           INPUTS
            enumNames           : IEnumName*
            OutputWSName        : IWorkspaceName*
            ReuseSchema         : VARIANT_BOOL
            deType              : esriDataExtractionType'''
        return super(IReplicaDescription4, self).Init(enumNames, OutputWSName, ReuseSchema, deType)
    def get_DatasetNames(self):
        '''Method IReplicaDescription.get_DatasetNames (from IReplicaDescription)

           OUTPUT
            enumNames           : IEnumName**'''
        return super(IReplicaDescription4, self).get_DatasetNames()
    def get_TableNameCount(self):
        '''Method IReplicaDescription.get_TableNameCount (from IReplicaDescription)

           OUTPUT
            Count               : long*'''
        return super(IReplicaDescription4, self).get_TableNameCount()
    def get_TableName(self, Index):
        '''Method IReplicaDescription.get_TableName (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            DatasetName         : IName**'''
        return super(IReplicaDescription4, self).get_TableName(Index)
    def put_TableExcluded(self, Index, exclude):
        '''Method IReplicaDescription.put_TableExcluded (from IReplicaDescription)

           INPUTS
            Index               : long
            exclude             : VARIANT_BOOL'''
        return super(IReplicaDescription4, self).put_TableExcluded(Index, exclude)
    def get_TableExcluded(self, Index):
        '''Method IReplicaDescription.get_TableExcluded (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            exclude             : VARIANT_BOOL*'''
        return super(IReplicaDescription4, self).get_TableExcluded(Index)
    def put_ReplicaModelType(self, ModelType):
        '''Method IReplicaDescription.put_ReplicaModelType (from IReplicaDescription)

           INPUT
            ModelType           : esriReplicaModelType'''
        return super(IReplicaDescription4, self).put_ReplicaModelType(ModelType)
    def get_ReplicaModelType(self):
        '''Method IReplicaDescription.get_ReplicaModelType (from IReplicaDescription)

           OUTPUT
            ModelType           : esriReplicaModelType*'''
        return super(IReplicaDescription4, self).get_ReplicaModelType()
    def FindTable(self, DatasetName):
        '''Method IReplicaDescription.FindTable (from IReplicaDescription)

           INPUT
            DatasetName         : IName*

           OUTPUT
            Index               : long*'''
        return super(IReplicaDescription4, self).FindTable(DatasetName)
    def AddDatasetNames(self, DatasetNames):
        '''Method IReplicaDescription.AddDatasetNames (from IReplicaDescription)

           INPUT
            DatasetNames        : IEnumName*'''
        return super(IReplicaDescription4, self).AddDatasetNames(DatasetNames)
    def put_IsPrivateTable(self, Index, IsPrivate):
        '''Method IReplicaDescription.put_IsPrivateTable (from IReplicaDescription)

           INPUTS
            Index               : long
            IsPrivate           : VARIANT_BOOL'''
        return super(IReplicaDescription4, self).put_IsPrivateTable(Index, IsPrivate)
    def get_IsPrivateTable(self, Index):
        '''Method IReplicaDescription.get_IsPrivateTable (from IReplicaDescription)

           INPUT
            Index               : long

           OUTPUT
            IsPrivate           : VARIANT_BOOL*'''
        return super(IReplicaDescription4, self).get_IsPrivateTable(Index)
    AccessType = property(get_AccessType, put_AccessType, None)
    DatasetNames = property(get_DatasetNames, None, None)
    FetchRelatedObjects = property(get_FetchRelatedObjects, None, None)
    IsPrivateTable = property(None, put_IsPrivateTable, None)
    RelationshipClassesInfo = property(get_RelationshipClassesInfo, None, None)
    ReplicaEnumNameMapping = property(get_ReplicaEnumNameMapping, None, None)
    ReplicaModelType = property(get_ReplicaModelType, put_ReplicaModelType, None)
    TableExcluded = property(None, put_TableExcluded, None)
    TableNameCount = property(get_TableNameCount, None, None)
    UseArchiving = property(get_UseArchiving, put_UseArchiving, None)
    IsPrivateTable = IndexProperty(get_IsPrivateTable, None)
    TableExcluded = IndexProperty(get_TableExcluded, None)
    TableName = IndexProperty(get_TableName, None)

class IExtractionUtilities(_esriGeoDatabase.IExtractionUtilities):
    _IID = uuid.UUID('22669f77-d848-4586-8720-4f079e796d91')
    def ToEnumNameMapping(self):
        '''Method IExtractionUtilities.ToEnumNameMapping

           OUTPUT
            EnumNameMapping     : IEnumNameMapping**'''
        return super(IExtractionUtilities, self).ToEnumNameMapping()

class IGeoDBDataTransfer(_esriGeoDatabase.IGeoDBDataTransfer):
    _IID = uuid.UUID('9b6b1ad3-e0e7-11d3-8118-00c04f686238')
    def GenerateNameMapping(self, From, toName):
        '''Method IGeoDBDataTransfer.GenerateNameMapping

           INPUTS
            from                : IEnumName*
            toName              : IName*

           OUTPUTS
            to                  : IEnumNameMapping**
            conflicts           : VARIANT_BOOL*'''
        return super(IGeoDBDataTransfer, self).GenerateNameMapping(From, toName)
    def Transfer(self, From, toName):
        '''Method IGeoDBDataTransfer.Transfer

           INPUTS
            from                : IEnumNameMapping*
            toName              : IName*'''
        return super(IGeoDBDataTransfer, self).Transfer(From, toName)
    def NumberObjectsToTransfer(self, From):
        '''Method IGeoDBDataTransfer.NumberObjectsToTransfer

           INPUT
            from                : IEnumNameMapping*

           OUTPUT
            nObjects            : long*'''
        return super(IGeoDBDataTransfer, self).NumberObjectsToTransfer(From)

class IGeoDBDataTransfer2(_esriGeoDatabase.IGeoDBDataTransfer2):
    _IID = uuid.UUID('69ebda67-d1fc-4f5a-829f-3e73098cd6d7')
    def Delete(self, From, toName):
        '''Method IGeoDBDataTransfer2.Delete

           INPUTS
            from                : IEnumNameMapping*
            toName              : IName*'''
        return super(IGeoDBDataTransfer2, self).Delete(From, toName)
    def GenerateNameMapping(self, From, toName):
        '''Method IGeoDBDataTransfer.GenerateNameMapping (from IGeoDBDataTransfer)

           INPUTS
            from                : IEnumName*
            toName              : IName*

           OUTPUTS
            to                  : IEnumNameMapping**
            conflicts           : VARIANT_BOOL*'''
        return super(IGeoDBDataTransfer2, self).GenerateNameMapping(From, toName)
    def Transfer(self, From, toName):
        '''Method IGeoDBDataTransfer.Transfer (from IGeoDBDataTransfer)

           INPUTS
            from                : IEnumNameMapping*
            toName              : IName*'''
        return super(IGeoDBDataTransfer2, self).Transfer(From, toName)
    def NumberObjectsToTransfer(self, From):
        '''Method IGeoDBDataTransfer.NumberObjectsToTransfer (from IGeoDBDataTransfer)

           INPUT
            from                : IEnumNameMapping*

           OUTPUT
            nObjects            : long*'''
        return super(IGeoDBDataTransfer2, self).NumberObjectsToTransfer(From)

class IFeatureWorkspace(_esriGeoDatabase.IFeatureWorkspace):
    _IID = uuid.UUID('d9cab491-3f69-11d1-b095-0000f8780820')
    def OpenTable(self, Name):
        '''Method IFeatureWorkspace.OpenTable

           INPUT
            Name                : BSTR

           OUTPUT
            Table               : ITable**'''
        return super(IFeatureWorkspace, self).OpenTable(Name)
    def CreateTable(self, Name, Fields, CLSID, EXTCLSID, ConfigKeyword):
        '''Method IFeatureWorkspace.CreateTable

           INPUTS
            Name                : BSTR
            Fields              : IFields*
            CLSID               : IUID*
            EXTCLSID            : IUID*
            ConfigKeyword       : BSTR

           OUTPUT
            Table               : ITable**'''
        return super(IFeatureWorkspace, self).CreateTable(Name, Fields, CLSID, EXTCLSID, ConfigKeyword)
    def OpenFeatureClass(self, Name):
        '''Method IFeatureWorkspace.OpenFeatureClass

           INPUT
            Name                : BSTR

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IFeatureWorkspace, self).OpenFeatureClass(Name)
    def CreateFeatureClass(self, Name, Fields, CLSID, EXTCLSID, FeatureType, ShapeFieldName, ConfigKeyword):
        '''Method IFeatureWorkspace.CreateFeatureClass

           INPUTS
            Name                : BSTR
            Fields              : IFields*
            CLSID               : IUID*
            EXTCLSID            : IUID*
            FeatureType         : esriFeatureType
            ShapeFieldName      : BSTR
            ConfigKeyword       : BSTR

           OUTPUT
            oclass              : IFeatureClass**'''
        return super(IFeatureWorkspace, self).CreateFeatureClass(Name, Fields, CLSID, EXTCLSID, FeatureType, ShapeFieldName, ConfigKeyword)
    def OpenFeatureDataset(self, Name):
        '''Method IFeatureWorkspace.OpenFeatureDataset

           INPUT
            Name                : BSTR

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(IFeatureWorkspace, self).OpenFeatureDataset(Name)
    def CreateFeatureDataset(self, Name, SpatialReference):
        '''Method IFeatureWorkspace.CreateFeatureDataset

           INPUTS
            Name                : BSTR
            SpatialReference    : ISpatialReference*

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(IFeatureWorkspace, self).CreateFeatureDataset(Name, SpatialReference)
    def CreateQueryDef(self):
        '''Method IFeatureWorkspace.CreateQueryDef

           OUTPUT
            QueryDef            : IQueryDef**'''
        return super(IFeatureWorkspace, self).CreateQueryDef()
    def OpenFeatureQuery(self, QueryName, QueryDef):
        '''Method IFeatureWorkspace.OpenFeatureQuery

           INPUTS
            QueryName           : BSTR
            QueryDef            : IQueryDef*

           OUTPUT
            FeatureDataset      : IFeatureDataset**'''
        return super(IFeatureWorkspace, self).OpenFeatureQuery(QueryName, QueryDef)
    def OpenRelationshipClass(self, Name):
        '''Method IFeatureWorkspace.OpenRelationshipClass

           INPUT
            Name                : BSTR

           OUTPUT
            RelationshipClass   : IRelationshipClass**'''
        return super(IFeatureWorkspace, self).OpenRelationshipClass(Name)
    def CreateRelationshipClass(self, relClassName, OriginClass, DestinationClass, ForwardLabel, BackwardLabel, Cardinality, Notification, IsComposite, IsAttributed, relAttrFields, OriginPrimaryKey, destPrimaryKey, OriginForeignKey, destForeignKey):
        '''Method IFeatureWorkspace.CreateRelationshipClass

           INPUTS
            relClassName        : BSTR
            OriginClass         : IObjectClass*
            DestinationClass    : IObjectClass*
            ForwardLabel        : BSTR
            BackwardLabel       : BSTR
            Cardinality         : esriRelCardinality
            Notification        : esriRelNotification
            IsComposite         : VARIANT_BOOL
            IsAttributed        : VARIANT_BOOL
            relAttrFields       : IFields*
            OriginPrimaryKey    : BSTR
            destPrimaryKey      : BSTR
            OriginForeignKey    : BSTR
            destForeignKey      : BSTR

           OUTPUT
            RelationshipClass   : IRelationshipClass**'''
        return super(IFeatureWorkspace, self).CreateRelationshipClass(relClassName, OriginClass, DestinationClass, ForwardLabel, BackwardLabel, Cardinality, Notification, IsComposite, IsAttributed, relAttrFields, OriginPrimaryKey, destPrimaryKey, OriginForeignKey, destForeignKey)
    def OpenRelationshipQuery(self, relClass, joinForward, SrcQueryFilter, SrcSelectionSet, TargetColumns, DoNotPushJoinToDB):
        '''Method IFeatureWorkspace.OpenRelationshipQuery

           INPUTS
            relClass            : IRelationshipClass*
            joinForward         : VARIANT_BOOL
            SrcQueryFilter      : IQueryFilter*
            SrcSelectionSet     : ISelectionSet*
            TargetColumns       : BSTR
            DoNotPushJoinToDB   : VARIANT_BOOL

           OUTPUT
            Table               : ITable**'''
        return super(IFeatureWorkspace, self).OpenRelationshipQuery(relClass, joinForward, SrcQueryFilter, SrcSelectionSet, TargetColumns, DoNotPushJoinToDB)

class IObjectClass(_esriGeoDatabase.IObjectClass):
    _IID = uuid.UUID('1afcdb31-ac09-11d2-8a1e-006097aff44e')
    def get_ObjectClassID(self):
        '''Method IObjectClass.get_ObjectClassID

           OUTPUT
            ObjectClassID       : long*'''
        return super(IObjectClass, self).get_ObjectClassID()
    def get_RelationshipClasses(self, Role):
        '''Method IObjectClass.get_RelationshipClasses

           INPUT
            Role                : esriRelRole

           OUTPUT
            RelationshipClasses : IEnumRelationshipClass**'''
        return super(IObjectClass, self).get_RelationshipClasses(Role)
    def get_AliasName(self):
        '''Method IObjectClass.get_AliasName

           OUTPUT
            Name                : BSTR*'''
        return super(IObjectClass, self).get_AliasName()
    def FindField(self, Name):
        '''Method IClass.FindField (from IClass)

           INPUT
            Name                : BSTR

           OUTPUT
            FieldIndex          : long*'''
        return super(IObjectClass, self).FindField(Name)
    def get_Fields(self):
        '''Method IClass.get_Fields (from IClass)

           OUTPUT
            Fields              : IFields**'''
        return super(IObjectClass, self).get_Fields()
    def get_Indexes(self):
        '''Method IClass.get_Indexes (from IClass)

           OUTPUT
            Indexes             : IIndexes**'''
        return super(IObjectClass, self).get_Indexes()
    def AddField(self, Field):
        '''Method IClass.AddField (from IClass)

           INPUT
            Field               : IField*'''
        return super(IObjectClass, self).AddField(Field)
    def DeleteField(self, Field):
        '''Method IClass.DeleteField (from IClass)

           INPUT
            Field               : IField*'''
        return super(IObjectClass, self).DeleteField(Field)
    def AddIndex(self, Index):
        '''Method IClass.AddIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(IObjectClass, self).AddIndex(Index)
    def DeleteIndex(self, Index):
        '''Method IClass.DeleteIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(IObjectClass, self).DeleteIndex(Index)
    def get_HasOID(self):
        '''Method IClass.get_HasOID (from IClass)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IObjectClass, self).get_HasOID()
    def get_OIDFieldName(self):
        '''Method IClass.get_OIDFieldName (from IClass)

           OUTPUT
            Name                : BSTR*'''
        return super(IObjectClass, self).get_OIDFieldName()
    def get_CLSID(self):
        '''Method IClass.get_CLSID (from IClass)

           OUTPUT
            InstanceCLSID       : IUID**'''
        return super(IObjectClass, self).get_CLSID()
    def get_EXTCLSID(self):
        '''Method IClass.get_EXTCLSID (from IClass)

           OUTPUT
            ClassExtensionCLSID : IUID**'''
        return super(IObjectClass, self).get_EXTCLSID()
    def get_Extension(self):
        '''Method IClass.get_Extension (from IClass)

           OUTPUT
            Extension           : IUnknown**'''
        return super(IObjectClass, self).get_Extension()
    def get_ExtensionProperties(self):
        '''Method IClass.get_ExtensionProperties (from IClass)

           OUTPUT
            extProps            : IPropertySet**'''
        return super(IObjectClass, self).get_ExtensionProperties()
    AliasName = property(get_AliasName, None, None)
    CLSID = property(get_CLSID, None, None)
    EXTCLSID = property(get_EXTCLSID, None, None)
    Extension = property(get_Extension, None, None)
    ExtensionProperties = property(get_ExtensionProperties, None, None)
    Fields = property(get_Fields, None, None)
    HasOID = property(get_HasOID, None, None)
    Indexes = property(get_Indexes, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)
    ObjectClassID = property(get_ObjectClassID, None, None)
    RelationshipClasses = IndexProperty(get_RelationshipClasses, None)

class IObject(_esriGeoDatabase.IObject):
    _IID = uuid.UUID('1afcdb34-ac09-11d2-8a1e-006097aff44e')

    def __init__(self, *args, **kw):
        super(IObject, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Class(self):
        '''Method IObject.get_Class

           OUTPUT
            Table               : IObjectClass**'''
        return super(IObject, self).get_Class()
    def get_HasOID(self):
        '''Method IRow.get_HasOID (from IRow)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IObject, self).get_HasOID()
    def get_OID(self):
        '''Method IRow.get_OID (from IRow)

           OUTPUT
            OID                 : long*'''
        return super(IObject, self).get_OID()
    def get_Table(self):
        '''Method IRow.get_Table (from IRow)

           OUTPUT
            Table               : ITable**'''
        return super(IObject, self).get_Table()
    def Store(self):
        '''Method IRow.Store (from IRow)'''
        return super(IObject, self).Store()
    def Delete(self):
        '''Method IRow.Delete (from IRow)'''
        return super(IObject, self).Delete()
    def get_Value(self, Index):
        '''Method IRowBuffer.get_Value (from IRowBuffer)

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IObject, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method IRowBuffer.put_Value (from IRowBuffer)

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IObject, self).put_Value(Index, Value)
    def get_Fields(self):
        '''Method IRowBuffer.get_Fields (from IRowBuffer)

           OUTPUT
            Fields              : IFields**'''
        return super(IObject, self).get_Fields()
    Class = property(get_Class, None, None)
    Fields = property(get_Fields, None, None)
    HasOID = property(get_HasOID, None, None)
    OID = property(get_OID, None, None)
    Table = property(get_Table, None, None)
    Value = property(None, put_Value, None)
    Value = IndexProperty(get_Value, None)

class IFeature(_esriGeoDatabase.IFeature):
    _IID = uuid.UUID('d4803ee9-79f4-11d0-97fc-0080c7f79481')

    def __init__(self, *args, **kw):
        super(IFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ShapeCopy(self):
        '''Method IFeature.get_ShapeCopy

           OUTPUT
            Shape               : IGeometry**'''
        return super(IFeature, self).get_ShapeCopy()
    def get_Shape(self):
        '''Method IFeature.get_Shape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IFeature, self).get_Shape()
    def putref_Shape(self, Shape):
        '''Method IFeature.putref_Shape

           INPUT
            Shape               : IGeometry*'''
        return super(IFeature, self).putref_Shape(Shape)
    def get_Extent(self):
        '''Method IFeature.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IFeature, self).get_Extent()
    def get_FeatureType(self):
        '''Method IFeature.get_FeatureType

           OUTPUT
            Type                : esriFeatureType*'''
        return super(IFeature, self).get_FeatureType()
    def get_Class(self):
        '''Method IObject.get_Class (from IObject)

           OUTPUT
            Table               : IObjectClass**'''
        return super(IFeature, self).get_Class()
    def get_HasOID(self):
        '''Method IRow.get_HasOID (from IRow)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IFeature, self).get_HasOID()
    def get_OID(self):
        '''Method IRow.get_OID (from IRow)

           OUTPUT
            OID                 : long*'''
        return super(IFeature, self).get_OID()
    def get_Table(self):
        '''Method IRow.get_Table (from IRow)

           OUTPUT
            Table               : ITable**'''
        return super(IFeature, self).get_Table()
    def Store(self):
        '''Method IRow.Store (from IRow)'''
        return super(IFeature, self).Store()
    def Delete(self):
        '''Method IRow.Delete (from IRow)'''
        return super(IFeature, self).Delete()
    def get_Value(self, Index):
        '''Method IRowBuffer.get_Value (from IRowBuffer)

           INPUT
            Index               : long

           OUTPUT
            Value               : VARIANT*'''
        return super(IFeature, self).get_Value(Index)
    def put_Value(self, Index, Value):
        '''Method IRowBuffer.put_Value (from IRowBuffer)

           INPUTS
            Index               : long
            Value               : VARIANT'''
        return super(IFeature, self).put_Value(Index, Value)
    def get_Fields(self):
        '''Method IRowBuffer.get_Fields (from IRowBuffer)

           OUTPUT
            Fields              : IFields**'''
        return super(IFeature, self).get_Fields()
    Class = property(get_Class, None, None)
    Extent = property(get_Extent, None, None)
    FeatureType = property(get_FeatureType, None, None)
    Fields = property(get_Fields, None, None)
    HasOID = property(get_HasOID, None, None)
    OID = property(get_OID, None, None)
    Shape = property(get_Shape, putref_Shape, None)
    ShapeCopy = property(get_ShapeCopy, None, None)
    Table = property(get_Table, None, None)
    Value = property(None, put_Value, None)
    Value = IndexProperty(get_Value, None)

class IFeatureCursor(_esriGeoDatabase.IFeatureCursor):
    _IID = uuid.UUID('d4803ef8-79f4-11d0-97fc-0080c7f79481')
    def FindField(self, Name):
        '''Method IFeatureCursor.FindField

           INPUT
            Name                : BSTR

           OUTPUT
            FieldIndex          : long*'''
        return super(IFeatureCursor, self).FindField(Name)
    def get_Fields(self):
        '''Method IFeatureCursor.get_Fields

           OUTPUT
            Fields              : IFields**'''
        return super(IFeatureCursor, self).get_Fields()
    def NextFeature(self):
        '''Method IFeatureCursor.NextFeature

           OUTPUT
            Object              : IFeature**'''
        return super(IFeatureCursor, self).NextFeature()
    def UpdateFeature(self, Object):
        '''Method IFeatureCursor.UpdateFeature

           INPUT
            Object              : IFeature*'''
        return super(IFeatureCursor, self).UpdateFeature(Object)
    def DeleteFeature(self):
        '''Method IFeatureCursor.DeleteFeature'''
        return super(IFeatureCursor, self).DeleteFeature()
    def InsertFeature(self, buffer):
        '''Method IFeatureCursor.InsertFeature

           INPUT
            buffer              : IFeatureBuffer*

           OUTPUT
            ID                  : VARIANT*'''
        return super(IFeatureCursor, self).InsertFeature(buffer)
    def Flush(self):
        '''Method IFeatureCursor.Flush'''
        return super(IFeatureCursor, self).Flush()
    Fields = property(get_Fields, None, None)

class IFeatureClassWrite(_esriGeoDatabase.IFeatureClassWrite):
    _IID = uuid.UUID('b3e3a101-c50c-11d1-8876-0000f877762d')
    def WriteFeature(self, Feature):
        '''Method IFeatureClassWrite.WriteFeature

           INPUT
            Feature             : IFeature*'''
        return super(IFeatureClassWrite, self).WriteFeature(Feature)
    def WriteFeatures(self, features):
        '''Method IFeatureClassWrite.WriteFeatures

           INPUT
            features            : ISet*'''
        return super(IFeatureClassWrite, self).WriteFeatures(features)
    def RemoveFeature(self, Feature):
        '''Method IFeatureClassWrite.RemoveFeature

           INPUT
            Feature             : IFeature*'''
        return super(IFeatureClassWrite, self).RemoveFeature(Feature)
    def RemoveFeatures(self, features):
        '''Method IFeatureClassWrite.RemoveFeatures

           INPUT
            features            : ISet*'''
        return super(IFeatureClassWrite, self).RemoveFeatures(features)

class IFeatureEdit(_esriGeoDatabase.IFeatureEdit):
    _IID = uuid.UUID('33848e00-983b-11d1-8463-0000f875b9c6')
    def BeginMoveSet(self, features, start):
        '''Method IFeatureEdit.BeginMoveSet

           INPUTS
            features            : ISet*
            start               : IPoint*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(IFeatureEdit, self).BeginMoveSet(features, start)
    def MoveSet(self, features, moveVector):
        '''Method IFeatureEdit.MoveSet

           INPUTS
            features            : ISet*
            moveVector          : ILine*'''
        return super(IFeatureEdit, self).MoveSet(features, moveVector)
    def RotateSet(self, features, Origin, Angle):
        '''Method IFeatureEdit.RotateSet

           INPUTS
            features            : ISet*
            Origin              : IPoint*
            Angle               : double'''
        return super(IFeatureEdit, self).RotateSet(features, Origin, Angle)
    def Split(self, point):
        '''Method IFeatureEdit.Split

           INPUT
            point               : IGeometry*

           OUTPUT
            newFeatures         : ISet**'''
        return super(IFeatureEdit, self).Split(point)
    def SplitAttributes(self, baseFeature):
        '''Method IFeatureEdit.SplitAttributes

           INPUT
            baseFeature         : IFeature*'''
        return super(IFeatureEdit, self).SplitAttributes(baseFeature)
    def DeleteSet(self, Rows):
        '''Method IRowEdit.DeleteSet (from IRowEdit)

           INPUT
            Rows                : ISet*'''
        return super(IFeatureEdit, self).DeleteSet(Rows)

class IFeatureElement(_esriGeoDatabase.IFeatureElement):
    _IID = uuid.UUID('b617fb50-c4fd-11d1-aea9-0000f80372b4')
    def get_Owner(self):
        '''Method IFeatureElement.get_Owner

           OUTPUT
            Feature             : IFeature**'''
        return super(IFeatureElement, self).get_Owner()
    def get_ElementType(self):
        '''Method IFeatureElement.get_ElementType

           OUTPUT
            Type                : esriFeatureElementType*'''
        return super(IFeatureElement, self).get_ElementType()
    def get_Geometry(self):
        '''Method IFeatureElement.get_Geometry

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IFeatureElement, self).get_Geometry()
    def get_Parent(self):
        '''Method IFeatureElement.get_Parent

           OUTPUT
            Parent              : IFeatureElement**'''
        return super(IFeatureElement, self).get_Parent()
    ElementType = property(get_ElementType, None, None)
    Geometry = property(get_Geometry, None, None)
    Owner = property(get_Owner, None, None)
    Parent = property(get_Parent, None, None)

class IFeatureConnect(_esriGeoDatabase.IFeatureConnect):
    _IID = uuid.UUID('a175835a-c4fa-11d1-aea9-0000f80372b4')
    def get_ConnectionPointCount(self):
        '''Method IFeatureConnect.get_ConnectionPointCount

           OUTPUT
            numPoints           : long*'''
        return super(IFeatureConnect, self).get_ConnectionPointCount()
    def get_ConnectionPoint(self, connectionPointIndex):
        '''Method IFeatureConnect.get_ConnectionPoint

           INPUT
            connectionPointIndex: long

           OUTPUT
            ConnectionPoint     : IFeatureElement**'''
        return super(IFeatureConnect, self).get_ConnectionPoint(connectionPointIndex)
    def get_ConnectionPointName(self, connectionPointIndex):
        '''Method IFeatureConnect.get_ConnectionPointName

           INPUT
            connectionPointIndex: long

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureConnect, self).get_ConnectionPointName(connectionPointIndex)
    def get_ConnectionPointByName(self, ConnectionPointName):
        '''Method IFeatureConnect.get_ConnectionPointByName

           INPUT
            ConnectionPointName : BSTR

           OUTPUT
            ConnectionPoint     : IFeatureElement**'''
        return super(IFeatureConnect, self).get_ConnectionPointByName(ConnectionPointName)
    ConnectionPointCount = property(get_ConnectionPointCount, None, None)
    ConnectionPoint = IndexProperty(get_ConnectionPoint, None)
    ConnectionPointByName = IndexProperty(get_ConnectionPointByName, None)
    ConnectionPointName = IndexProperty(get_ConnectionPointName, None)

class IEnumFeature(_esriGeoDatabase.IEnumFeature):
    _IID = uuid.UUID('e373db08-56ff-11d1-ae55-0000f80372b4')
    def Next(self):
        '''Method IEnumFeature.Next

           OUTPUT
            Feature             : IFeature**'''
        return super(IEnumFeature, self).Next()
    def __iter__(self):
        try:
            super(IEnumFeature, self).Reset()
            val = super(IEnumFeature, self).Next()
            while val:
                yield val
                val = super(IEnumFeature, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumFeature.Reset'''
        return super(IEnumFeature, self).Reset()

class IEnumObjectClass(_esriGeoDatabase.IEnumObjectClass):
    _IID = uuid.UUID('705e133d-fcb6-43d5-9f6a-694198c85c20')
    def Next(self):
        '''Method IEnumObjectClass.Next

           OUTPUT
            ObjectClass         : IObjectClass**'''
        return super(IEnumObjectClass, self).Next()
    def __iter__(self):
        try:
            super(IEnumObjectClass, self).Reset()
            val = super(IEnumObjectClass, self).Next()
            while val:
                yield val
                val = super(IEnumObjectClass, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumObjectClass.Reset'''
        return super(IEnumObjectClass, self).Reset()

class ITransformGroup(_esriGeoDatabase.ITransformGroup):
    _IID = uuid.UUID('77118148-e91d-11d2-9f55-00c04f6bdd84')
    def Add(self, ClassID, OID, Feature):
        '''Method ITransformGroup.Add

           INPUTS
            ClassID             : long
            OID                 : long
            Feature             : IFeature*'''
        return super(ITransformGroup, self).Add(ClassID, OID, Feature)
    def Delete(self, ClassID, OID):
        '''Method ITransformGroup.Delete

           INPUTS
            ClassID             : long
            OID                 : long'''
        return super(ITransformGroup, self).Delete(ClassID, OID)
    def DeleteAllInClass(self, ClassID):
        '''Method ITransformGroup.DeleteAllInClass

           INPUT
            ClassID             : long'''
        return super(ITransformGroup, self).DeleteAllInClass(ClassID)
    def Next(self):
        '''Method ITransformGroup.Next

           OUTPUTS
            ClassID             : long*
            OID                 : long*
            Count               : long*'''
        return super(ITransformGroup, self).Next()
    def __iter__(self):
        try:
            super(ITransformGroup, self).Reset()
            val = super(ITransformGroup, self).Next()
            while any(val):
                yield val
                val = super(ITransformGroup, self).Next()
        except:
            pass
    def Reset(self):
        '''Method ITransformGroup.Reset'''
        return super(ITransformGroup, self).Reset()
    def NextSet(self):
        '''Method ITransformGroup.NextSet

           OUTPUTS
            ClassID             : long*
            featureSet          : ISet**'''
        return super(ITransformGroup, self).NextSet()

class IObjectClassContainer(_esriGeoDatabase.IObjectClassContainer):
    _IID = uuid.UUID('f5625307-3565-4d1f-839e-3705e882dc48')
    def get_ObjectClassByID(self, ID):
        '''Method IObjectClassContainer.get_ObjectClassByID

           INPUT
            ID                  : long

           OUTPUT
            ObjectClass         : IObjectClass**'''
        return super(IObjectClassContainer, self).get_ObjectClassByID(ID)
    def get_ObjectClassByName(self, Name):
        '''Method IObjectClassContainer.get_ObjectClassByName

           INPUT
            Name                : BSTR

           OUTPUT
            ObjectClass         : IObjectClass**'''
        return super(IObjectClassContainer, self).get_ObjectClassByName(Name)
    def get_ObjectClassCount(self):
        '''Method IObjectClassContainer.get_ObjectClassCount

           OUTPUT
            numClasses          : long*'''
        return super(IObjectClassContainer, self).get_ObjectClassCount()
    def get_ObjectClasses(self):
        '''Method IObjectClassContainer.get_ObjectClasses

           OUTPUT
            ObjectClasses       : IEnumObjectClass**'''
        return super(IObjectClassContainer, self).get_ObjectClasses()
    ObjectClassCount = property(get_ObjectClassCount, None, None)
    ObjectClasses = property(get_ObjectClasses, None, None)
    ObjectClassByID = IndexProperty(get_ObjectClassByID, None)
    ObjectClassByName = IndexProperty(get_ObjectClassByName, None)

class IObjectClassEvents(_esriGeoDatabase.IObjectClassEvents):
    _IID = uuid.UUID('e53afb0e-e6d4-11d2-9f29-00c04f6bc979')
    def OnCreate(self, obj):
        '''Method IObjectClassEvents.OnCreate

           INPUT
            obj                 : IObject*'''
        return super(IObjectClassEvents, self).OnCreate(obj)
    def OnDelete(self, obj):
        '''Method IObjectClassEvents.OnDelete

           INPUT
            obj                 : IObject*'''
        return super(IObjectClassEvents, self).OnDelete(obj)
    def OnChange(self, obj):
        '''Method IObjectClassEvents.OnChange

           INPUT
            obj                 : IObject*'''
        return super(IObjectClassEvents, self).OnChange(obj)

class IFeatureClassUtil(_esriGeoDatabase.IFeatureClassUtil):
    _IID = uuid.UUID('d3cb0fc2-8c02-11d3-9f91-00c04f6bdf0c')
    def GetFeature(self, OID, SpatialReference):
        '''Method IFeatureClassUtil.GetFeature

           INPUTS
            OID                 : long
            SpatialReference    : ISpatialReference*

           OUTPUT
            Feature             : IFeature**'''
        return super(IFeatureClassUtil, self).GetFeature(OID, SpatialReference)
    def GetFeatures(self, oids, Recycling, SpatialReference):
        '''Method IFeatureClassUtil.GetFeatures

           INPUTS
            oids                : VARIANT
            Recycling           : VARIANT_BOOL
            SpatialReference    : ISpatialReference*

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IFeatureClassUtil, self).GetFeatures(oids, Recycling, SpatialReference)

class IPersistCustomFeaturesExtension(_esriGeoDatabase.IPersistCustomFeaturesExtension):
    _IID = uuid.UUID('600811e1-2c1d-11d4-8303-0080c7e20671')
    def SaveClass(self, stream):
        '''Method IPersistCustomFeaturesExtension.SaveClass

           INPUT
            stream              : IStream*'''
        return super(IPersistCustomFeaturesExtension, self).SaveClass(stream)
    def LoadClass(self, stream, canLoad):
        '''Method IPersistCustomFeaturesExtension.LoadClass

           INPUTS
            stream              : IStream*
            canLoad             : VARIANT_BOOL*'''
        return super(IPersistCustomFeaturesExtension, self).LoadClass(stream, canLoad)
    def SaveFeature(self, stream, Feature):
        '''Method IPersistCustomFeaturesExtension.SaveFeature

           INPUTS
            stream              : IStream*
            Feature             : IFeature*'''
        return super(IPersistCustomFeaturesExtension, self).SaveFeature(stream, Feature)
    def LoadFeature(self, stream, Feature):
        '''Method IPersistCustomFeaturesExtension.LoadFeature

           INPUTS
            stream              : IStream*
            Feature             : IFeature*'''
        return super(IPersistCustomFeaturesExtension, self).LoadFeature(stream, Feature)

class IFeatureEdit2(_esriGeoDatabase.IFeatureEdit2):
    _IID = uuid.UUID('2892ce6b-96d6-45d6-9002-7a6cc91968ad')
    def SplitWithUpdate(self, Geometry):
        '''Method IFeatureEdit2.SplitWithUpdate

           INPUT
            Geometry            : IGeometry*

           OUTPUT
            newFeatures         : ISet**'''
        return super(IFeatureEdit2, self).SplitWithUpdate(Geometry)
    def BeginMoveSet(self, features, start):
        '''Method IFeatureEdit.BeginMoveSet (from IFeatureEdit)

           INPUTS
            features            : ISet*
            start               : IPoint*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(IFeatureEdit2, self).BeginMoveSet(features, start)
    def MoveSet(self, features, moveVector):
        '''Method IFeatureEdit.MoveSet (from IFeatureEdit)

           INPUTS
            features            : ISet*
            moveVector          : ILine*'''
        return super(IFeatureEdit2, self).MoveSet(features, moveVector)
    def RotateSet(self, features, Origin, Angle):
        '''Method IFeatureEdit.RotateSet (from IFeatureEdit)

           INPUTS
            features            : ISet*
            Origin              : IPoint*
            Angle               : double'''
        return super(IFeatureEdit2, self).RotateSet(features, Origin, Angle)
    def Split(self, point):
        '''Method IFeatureEdit.Split (from IFeatureEdit)

           INPUT
            point               : IGeometry*

           OUTPUT
            newFeatures         : ISet**'''
        return super(IFeatureEdit2, self).Split(point)
    def SplitAttributes(self, baseFeature):
        '''Method IFeatureEdit.SplitAttributes (from IFeatureEdit)

           INPUT
            baseFeature         : IFeature*'''
        return super(IFeatureEdit2, self).SplitAttributes(baseFeature)
    def DeleteSet(self, Rows):
        '''Method IRowEdit.DeleteSet (from IRowEdit)

           INPUT
            Rows                : ISet*'''
        return super(IFeatureEdit2, self).DeleteSet(Rows)

class IFeatureElementEdit(_esriGeoDatabase.IFeatureElementEdit):
    _IID = uuid.UUID('78773728-e142-11d1-aec3-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IFeatureElementEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Owner(self, _arg1):
        '''Method IFeatureElementEdit.putref_Owner

           INPUT
            _arg1               : IFeature*'''
        return super(IFeatureElementEdit, self).putref_Owner(_arg1)
    def put_ElementType(self, _arg1):
        '''Method IFeatureElementEdit.put_ElementType

           INPUT
            _arg1               : esriFeatureElementType'''
        return super(IFeatureElementEdit, self).put_ElementType(_arg1)
    def putref_Geometry(self, _arg1):
        '''Method IFeatureElementEdit.putref_Geometry

           INPUT
            _arg1               : IGeometry*'''
        return super(IFeatureElementEdit, self).putref_Geometry(_arg1)
    def putref_Parent(self, _arg1):
        '''Method IFeatureElementEdit.putref_Parent

           INPUT
            _arg1               : IFeatureElement*'''
        return super(IFeatureElementEdit, self).putref_Parent(_arg1)
    ElementType = property(None, put_ElementType, None)
    Geometry = property(None, putref_Geometry, None)
    Owner = property(None, putref_Owner, None)
    Parent = property(None, putref_Parent, None)

class IEnumObject(_esriGeoDatabase.IEnumObject):
    _IID = uuid.UUID('3322eb49-7679-4ea0-a7bf-7404c01ff313')
    def Next(self):
        '''Method IEnumObject.Next

           OUTPUT
            Object              : IObject**'''
        return super(IEnumObject, self).Next()
    def __iter__(self):
        try:
            super(IEnumObject, self).Reset()
            val = super(IEnumObject, self).Next()
            while val:
                yield val
                val = super(IEnumObject, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumObject.Reset'''
        return super(IEnumObject, self).Reset()

class IFeatureClass(_esriGeoDatabase.IFeatureClass):
    _IID = uuid.UUID('d4803ee6-79f4-11d0-97fc-0080c7f79481')
    def get_ShapeType(self):
        '''Method IFeatureClass.get_ShapeType

           OUTPUT
            Type                : esriGeometryType*'''
        return super(IFeatureClass, self).get_ShapeType()
    def get_FeatureType(self):
        '''Method IFeatureClass.get_FeatureType

           OUTPUT
            Type                : esriFeatureType*'''
        return super(IFeatureClass, self).get_FeatureType()
    def get_ShapeFieldName(self):
        '''Method IFeatureClass.get_ShapeFieldName

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureClass, self).get_ShapeFieldName()
    def get_AreaField(self):
        '''Method IFeatureClass.get_AreaField

           OUTPUT
            Field               : IField**'''
        return super(IFeatureClass, self).get_AreaField()
    def get_LengthField(self):
        '''Method IFeatureClass.get_LengthField

           OUTPUT
            Field               : IField**'''
        return super(IFeatureClass, self).get_LengthField()
    def get_FeatureDataset(self):
        '''Method IFeatureClass.get_FeatureDataset

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(IFeatureClass, self).get_FeatureDataset()
    def CreateFeature(self):
        '''Method IFeatureClass.CreateFeature

           OUTPUT
            Feature             : IFeature**'''
        return super(IFeatureClass, self).CreateFeature()
    def GetFeature(self, ID):
        '''Method IFeatureClass.GetFeature

           INPUT
            ID                  : long

           OUTPUT
            Feature             : IFeature**'''
        return super(IFeatureClass, self).GetFeature(ID)
    def GetFeatures(self, fids, Recycling):
        '''Method IFeatureClass.GetFeatures

           INPUTS
            fids                : VARIANT
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IFeatureClass, self).GetFeatures(fids, Recycling)
    def get_FeatureClassID(self):
        '''Method IFeatureClass.get_FeatureClassID

           OUTPUT
            fID                 : long*'''
        return super(IFeatureClass, self).get_FeatureClassID()
    def CreateFeatureBuffer(self):
        '''Method IFeatureClass.CreateFeatureBuffer

           OUTPUT
            buffer              : IFeatureBuffer**'''
        return super(IFeatureClass, self).CreateFeatureBuffer()
    def FeatureCount(self, QueryFilter):
        '''Method IFeatureClass.FeatureCount

           INPUT
            QueryFilter         : IQueryFilter*

           OUTPUT
            numFeatures         : long*'''
        return super(IFeatureClass, self).FeatureCount(QueryFilter)
    def Search(self, filter, Recycling):
        '''Method IFeatureClass.Search

           INPUTS
            filter              : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IFeatureClass, self).Search(filter, Recycling)
    def Update(self, filter, Recycling):
        '''Method IFeatureClass.Update

           INPUTS
            filter              : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IFeatureClass, self).Update(filter, Recycling)
    def Insert(self, useBuffering):
        '''Method IFeatureClass.Insert

           INPUT
            useBuffering        : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IFeatureClass, self).Insert(useBuffering)
    def Select(self, QueryFilter, selType, selOption, selectionContainer):
        '''Method IFeatureClass.Select

           INPUTS
            QueryFilter         : IQueryFilter*
            selType             : esriSelectionType
            selOption           : esriSelectionOption
            selectionContainer  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IFeatureClass, self).Select(QueryFilter, selType, selOption, selectionContainer)
    def get_ObjectClassID(self):
        '''Method IObjectClass.get_ObjectClassID (from IObjectClass)

           OUTPUT
            ObjectClassID       : long*'''
        return super(IFeatureClass, self).get_ObjectClassID()
    def get_RelationshipClasses(self, Role):
        '''Method IObjectClass.get_RelationshipClasses (from IObjectClass)

           INPUT
            Role                : esriRelRole

           OUTPUT
            RelationshipClasses : IEnumRelationshipClass**'''
        return super(IFeatureClass, self).get_RelationshipClasses(Role)
    def get_AliasName(self):
        '''Method IObjectClass.get_AliasName (from IObjectClass)

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureClass, self).get_AliasName()
    def FindField(self, Name):
        '''Method IClass.FindField (from IClass)

           INPUT
            Name                : BSTR

           OUTPUT
            FieldIndex          : long*'''
        return super(IFeatureClass, self).FindField(Name)
    def get_Fields(self):
        '''Method IClass.get_Fields (from IClass)

           OUTPUT
            Fields              : IFields**'''
        return super(IFeatureClass, self).get_Fields()
    def get_Indexes(self):
        '''Method IClass.get_Indexes (from IClass)

           OUTPUT
            Indexes             : IIndexes**'''
        return super(IFeatureClass, self).get_Indexes()
    def AddField(self, Field):
        '''Method IClass.AddField (from IClass)

           INPUT
            Field               : IField*'''
        return super(IFeatureClass, self).AddField(Field)
    def DeleteField(self, Field):
        '''Method IClass.DeleteField (from IClass)

           INPUT
            Field               : IField*'''
        return super(IFeatureClass, self).DeleteField(Field)
    def AddIndex(self, Index):
        '''Method IClass.AddIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(IFeatureClass, self).AddIndex(Index)
    def DeleteIndex(self, Index):
        '''Method IClass.DeleteIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(IFeatureClass, self).DeleteIndex(Index)
    def get_HasOID(self):
        '''Method IClass.get_HasOID (from IClass)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(IFeatureClass, self).get_HasOID()
    def get_OIDFieldName(self):
        '''Method IClass.get_OIDFieldName (from IClass)

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureClass, self).get_OIDFieldName()
    def get_CLSID(self):
        '''Method IClass.get_CLSID (from IClass)

           OUTPUT
            InstanceCLSID       : IUID**'''
        return super(IFeatureClass, self).get_CLSID()
    def get_EXTCLSID(self):
        '''Method IClass.get_EXTCLSID (from IClass)

           OUTPUT
            ClassExtensionCLSID : IUID**'''
        return super(IFeatureClass, self).get_EXTCLSID()
    def get_Extension(self):
        '''Method IClass.get_Extension (from IClass)

           OUTPUT
            Extension           : IUnknown**'''
        return super(IFeatureClass, self).get_Extension()
    def get_ExtensionProperties(self):
        '''Method IClass.get_ExtensionProperties (from IClass)

           OUTPUT
            extProps            : IPropertySet**'''
        return super(IFeatureClass, self).get_ExtensionProperties()
    AliasName = property(get_AliasName, None, None)
    AreaField = property(get_AreaField, None, None)
    CLSID = property(get_CLSID, None, None)
    EXTCLSID = property(get_EXTCLSID, None, None)
    Extension = property(get_Extension, None, None)
    ExtensionProperties = property(get_ExtensionProperties, None, None)
    FeatureClassID = property(get_FeatureClassID, None, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    FeatureType = property(get_FeatureType, None, None)
    Fields = property(get_Fields, None, None)
    HasOID = property(get_HasOID, None, None)
    Indexes = property(get_Indexes, None, None)
    LengthField = property(get_LengthField, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)
    ObjectClassID = property(get_ObjectClassID, None, None)
    ShapeFieldName = property(get_ShapeFieldName, None, None)
    ShapeType = property(get_ShapeType, None, None)
    RelationshipClasses = IndexProperty(get_RelationshipClasses, None)

class IFeatureDataset(_esriGeoDatabase.IFeatureDataset):
    _IID = uuid.UUID('d4803ee3-79f4-11d0-97fc-0080c7f79481')

    def __init__(self, *args, **kw):
        super(IFeatureDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def CreateFeatureClass(self, Name, Fields, CLSID, EXTCLSID, FeatureType, ShapeFieldName, ConfigKeyword):
        '''Method IFeatureDataset.CreateFeatureClass

           INPUTS
            Name                : BSTR
            Fields              : IFields*
            CLSID               : IUID*
            EXTCLSID            : IUID*
            FeatureType         : esriFeatureType
            ShapeFieldName      : BSTR
            ConfigKeyword       : BSTR

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IFeatureDataset, self).CreateFeatureClass(Name, Fields, CLSID, EXTCLSID, FeatureType, ShapeFieldName, ConfigKeyword)
    def get_Name(self):
        '''Method IDataset.get_Name (from IDataset)

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureDataset, self).get_Name()
    def get_FullName(self):
        '''Method IDataset.get_FullName (from IDataset)

           OUTPUT
            Name                : IName**'''
        return super(IFeatureDataset, self).get_FullName()
    def get_BrowseName(self):
        '''Method IDataset.get_BrowseName (from IDataset)

           OUTPUT
            Name                : BSTR*'''
        return super(IFeatureDataset, self).get_BrowseName()
    def put_BrowseName(self, Name):
        '''Method IDataset.put_BrowseName (from IDataset)

           INPUT
            Name                : BSTR'''
        return super(IFeatureDataset, self).put_BrowseName(Name)
    def get_Type(self):
        '''Method IDataset.get_Type (from IDataset)

           OUTPUT
            Type                : esriDatasetType*'''
        return super(IFeatureDataset, self).get_Type()
    def get_Category(self):
        '''Method IDataset.get_Category (from IDataset)

           OUTPUT
            Category            : BSTR*'''
        return super(IFeatureDataset, self).get_Category()
    def get_Subsets(self):
        '''Method IDataset.get_Subsets (from IDataset)

           OUTPUT
            Datasets            : IEnumDataset**'''
        return super(IFeatureDataset, self).get_Subsets()
    def get_Workspace(self):
        '''Method IDataset.get_Workspace (from IDataset)

           OUTPUT
            database            : IWorkspace**'''
        return super(IFeatureDataset, self).get_Workspace()
    def get_PropertySet(self):
        '''Method IDataset.get_PropertySet (from IDataset)

           OUTPUT
            props               : IPropertySet**'''
        return super(IFeatureDataset, self).get_PropertySet()
    def CanCopy(self):
        '''Method IDataset.CanCopy (from IDataset)

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IFeatureDataset, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IDataset.Copy (from IDataset)

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            CopyDataset         : IDataset**'''
        return super(IFeatureDataset, self).Copy(copyName, copyWorkspace)
    def CanDelete(self):
        '''Method IDataset.CanDelete (from IDataset)

           OUTPUT
            CanDelete           : VARIANT_BOOL*'''
        return super(IFeatureDataset, self).CanDelete()
    def Delete(self):
        '''Method IDataset.Delete (from IDataset)'''
        return super(IFeatureDataset, self).Delete()
    def CanRename(self):
        '''Method IDataset.CanRename (from IDataset)

           OUTPUT
            CanRename           : VARIANT_BOOL*'''
        return super(IFeatureDataset, self).CanRename()
    def Rename(self, Name):
        '''Method IDataset.Rename (from IDataset)

           INPUT
            Name                : BSTR'''
        return super(IFeatureDataset, self).Rename(Name)
    BrowseName = property(get_BrowseName, put_BrowseName, None)
    Category = property(get_Category, None, None)
    FullName = property(get_FullName, None, None)
    Name = property(get_Name, None, None)
    PropertySet = property(get_PropertySet, None, None)
    Subsets = property(get_Subsets, None, None)
    Type = property(get_Type, None, None)
    Workspace = property(get_Workspace, None, None)

class IFeatureWorkspaceAnno(_esriGeoDatabase.IFeatureWorkspaceAnno):
    _IID = uuid.UUID('14eb5331-ca80-11d2-8a2f-006097aff44e')
    def CreateAnnotationClass(self, Name, Fields, CLSID, EXTCLSID, ShapeFieldName, ConfigKeyword, dstFeatureDataset, srcFeatureClass, annoProperties, referenceScale, symbolCollection, autoCreate):
        '''Method IFeatureWorkspaceAnno.CreateAnnotationClass

           INPUTS
            Name                : BSTR
            Fields              : IFields*
            CLSID               : IUID*
            EXTCLSID            : IUID*
            ShapeFieldName      : BSTR
            ConfigKeyword       : BSTR
            dstFeatureDataset   : IFeatureDataset*
            srcFeatureClass     : IFeatureClass*
            annoProperties      : IUnknown*
            referenceScale      : IUnknown*
            symbolCollection    : IUnknown*
            autoCreate          : VARIANT_BOOL

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IFeatureWorkspaceAnno, self).CreateAnnotationClass(Name, Fields, CLSID, EXTCLSID, ShapeFieldName, ConfigKeyword, dstFeatureDataset, srcFeatureClass, annoProperties, referenceScale, symbolCollection, autoCreate)
    def AddSymbolCollection(self, Name, symbolCollection):
        '''Method IFeatureWorkspaceAnno.AddSymbolCollection

           INPUTS
            Name                : BSTR
            symbolCollection    : IUnknown*'''
        return super(IFeatureWorkspaceAnno, self).AddSymbolCollection(Name, symbolCollection)
    def ReplaceSymbolCollection(self, Name, symbolCollection):
        '''Method IFeatureWorkspaceAnno.ReplaceSymbolCollection

           INPUTS
            Name                : BSTR
            symbolCollection    : IUnknown*'''
        return super(IFeatureWorkspaceAnno, self).ReplaceSymbolCollection(Name, symbolCollection)

class IEnumFeatureClass(_esriGeoDatabase.IEnumFeatureClass):
    _IID = uuid.UUID('d4803ee5-79f4-11d0-97fc-0080c7f79481')
    def Next(self):
        '''Method IEnumFeatureClass.Next

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IEnumFeatureClass, self).Next()
    def __iter__(self):
        try:
            super(IEnumFeatureClass, self).Reset()
            val = super(IEnumFeatureClass, self).Next()
            while val:
                yield val
                val = super(IEnumFeatureClass, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumFeatureClass.Reset'''
        return super(IEnumFeatureClass, self).Reset()

class IFeatureClassContainer(_esriGeoDatabase.IFeatureClassContainer):
    _IID = uuid.UUID('3b439634-cfc3-11d1-aead-0000f80372b4')
    def get_Class(self, ClassIndex):
        '''Method IFeatureClassContainer.get_Class

           INPUT
            ClassIndex          : long

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IFeatureClassContainer, self).get_Class(ClassIndex)
    def get_ClassByID(self, ID):
        '''Method IFeatureClassContainer.get_ClassByID

           INPUT
            ID                  : long

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IFeatureClassContainer, self).get_ClassByID(ID)
    def get_ClassByName(self, Name):
        '''Method IFeatureClassContainer.get_ClassByName

           INPUT
            Name                : BSTR

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IFeatureClassContainer, self).get_ClassByName(Name)
    def get_ClassCount(self):
        '''Method IFeatureClassContainer.get_ClassCount

           OUTPUT
            numClasses          : long*'''
        return super(IFeatureClassContainer, self).get_ClassCount()
    def get_Classes(self):
        '''Method IFeatureClassContainer.get_Classes

           OUTPUT
            featureClasses      : IEnumFeatureClass**'''
        return super(IFeatureClassContainer, self).get_Classes()
    ClassCount = property(get_ClassCount, None, None)
    Classes = property(get_Classes, None, None)
    Class = IndexProperty(get_Class, None)
    ClassByID = IndexProperty(get_ClassByID, None)
    ClassByName = IndexProperty(get_ClassByName, None)

class IFeatureDatasetExtension(_esriGeoDatabase.IFeatureDatasetExtension):
    _IID = uuid.UUID('f0a333bf-b864-4b71-8ff5-086da66851d8')
    def get_FeatureDataset(self):
        '''Method IFeatureDatasetExtension.get_FeatureDataset

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(IFeatureDatasetExtension, self).get_FeatureDataset()
    def Init(self, Dataset):
        '''Method IFeatureDatasetExtension.Init

           INPUT
            Dataset             : IFeatureDataset*'''
        return super(IFeatureDatasetExtension, self).Init(Dataset)
    FeatureDataset = property(get_FeatureDataset, None, None)

class IFeatureDatasetExtension2(_esriGeoDatabase.IFeatureDatasetExtension2):
    _IID = uuid.UUID('f0a333bf-b864-4b71-8ff5-086da66851d9')
    def get_CanParticipateInDataset(self, Type):
        '''Method IFeatureDatasetExtension2.get_CanParticipateInDataset

           INPUT
            Type                : esriDatasetType

           OUTPUT
            canParticipate      : VARIANT_BOOL*'''
        return super(IFeatureDatasetExtension2, self).get_CanParticipateInDataset(Type)
    def get_FeatureDataset(self):
        '''Method IFeatureDatasetExtension.get_FeatureDataset (from IFeatureDatasetExtension)

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(IFeatureDatasetExtension2, self).get_FeatureDataset()
    def Init(self, Dataset):
        '''Method IFeatureDatasetExtension.Init (from IFeatureDatasetExtension)

           INPUT
            Dataset             : IFeatureDataset*'''
        return super(IFeatureDatasetExtension2, self).Init(Dataset)
    FeatureDataset = property(get_FeatureDataset, None, None)
    CanParticipateInDataset = IndexProperty(get_CanParticipateInDataset, None)

class IFeatureDatasetExtensionContainer(_esriGeoDatabase.IFeatureDatasetExtensionContainer):
    _IID = uuid.UUID('23869b3a-1ad9-468b-9e52-6fdc3c261fda')
    def get_ExtensionCount(self):
        '''Method IFeatureDatasetExtensionContainer.get_ExtensionCount

           OUTPUT
            Count               : long*'''
        return super(IFeatureDatasetExtensionContainer, self).get_ExtensionCount()
    def get_Extension(self, Index):
        '''Method IFeatureDatasetExtensionContainer.get_Extension

           INPUT
            Index               : long

           OUTPUT
            Extension           : IFeatureDatasetExtension**'''
        return super(IFeatureDatasetExtensionContainer, self).get_Extension(Index)
    def FindExtension(self, Type):
        '''Method IFeatureDatasetExtensionContainer.FindExtension

           INPUT
            Type                : esriDatasetType

           OUTPUT
            Extension           : IFeatureDatasetExtension**'''
        return super(IFeatureDatasetExtensionContainer, self).FindExtension(Type)
    ExtensionCount = property(get_ExtensionCount, None, None)
    Extension = IndexProperty(get_Extension, None)

class ITopologyProperties(_esriGeoDatabase.ITopologyProperties):
    _IID = uuid.UUID('40658b10-2c65-4b38-b00f-4d40ab551e27')
    def get_ClusterTolerance(self):
        '''Method ITopologyProperties.get_ClusterTolerance

           OUTPUT
            tolerance           : double*'''
        return super(ITopologyProperties, self).get_ClusterTolerance()
    def get_Classes(self):
        '''Method ITopologyProperties.get_Classes

           OUTPUT
            Classes             : IEnumFeatureClass**'''
        return super(ITopologyProperties, self).get_Classes()
    def get_SpatialReference(self):
        '''Method ITopologyProperties.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ITopologyProperties, self).get_SpatialReference()
    Classes = property(get_Classes, None, None)
    ClusterTolerance = property(get_ClusterTolerance, None, None)
    SpatialReference = property(get_SpatialReference, None, None)

class IFeatureConstruction(_esriGeoDatabase.IFeatureConstruction):
    _IID = uuid.UUID('fdbc8766-19c6-43b7-a887-e556f15ec185')

    def __init__(self, *args, **kw):
        super(IFeatureConstruction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ConstructLines(self, cancel, targetFC, sel, replaceExistingInTarget, InvalidArea, ClusterTolerance):
        '''Method IFeatureConstruction.ConstructLines

           INPUTS
            cancel              : ICancelOperation*
            targetFC            : IFeatureClass*
            sel                 : IEnumFeature*
            replaceExistingInTarget: VARIANT_BOOL
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double'''
        return super(IFeatureConstruction, self).ConstructLines(cancel, targetFC, sel, replaceExistingInTarget, InvalidArea, ClusterTolerance)
    def ConstructLinesFromCursor(self, cancel, targetFC, sel, replaceExistingInTarget, InvalidArea, ClusterTolerance):
        '''Method IFeatureConstruction.ConstructLinesFromCursor

           INPUTS
            cancel              : ICancelOperation*
            targetFC            : IFeatureClass*
            sel                 : IFeatureCursor*
            replaceExistingInTarget: VARIANT_BOOL
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double'''
        return super(IFeatureConstruction, self).ConstructLinesFromCursor(cancel, targetFC, sel, replaceExistingInTarget, InvalidArea, ClusterTolerance)
    def ConstructPolygonsFromFeatures(self, cancel, FeatureClass, processingBounds, modifyExisting, replaceTargetSelection, lineSrc, InvalidArea, ClusterTolerance, labels):
        '''Method IFeatureConstruction.ConstructPolygonsFromFeatures

           INPUTS
            cancel              : ICancelOperation*
            FeatureClass        : IFeatureClass*
            processingBounds    : IEnvelope*
            modifyExisting      : VARIANT_BOOL
            replaceTargetSelection: VARIANT_BOOL
            lineSrc             : IEnumFeature*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double
            labels              : IFeatureClass*'''
        return super(IFeatureConstruction, self).ConstructPolygonsFromFeatures(cancel, FeatureClass, processingBounds, modifyExisting, replaceTargetSelection, lineSrc, InvalidArea, ClusterTolerance, labels)
    def ConstructPolygonsFromFeaturesFromCursor(self, cancel, targetFC, processingBounds, modifyExisting, replaceTargetSelection, pLineSrc, InvalidArea, ClusterTolerance, pLabels):
        '''Method IFeatureConstruction.ConstructPolygonsFromFeaturesFromCursor

           INPUTS
            cancel              : ICancelOperation*
            targetFC            : IFeatureClass*
            processingBounds    : IEnvelope*
            modifyExisting      : VARIANT_BOOL
            replaceTargetSelection: VARIANT_BOOL
            pLineSrc            : IFeatureCursor*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double
            pLabels             : IFeatureClass*'''
        return super(IFeatureConstruction, self).ConstructPolygonsFromFeaturesFromCursor(cancel, targetFC, processingBounds, modifyExisting, replaceTargetSelection, pLineSrc, InvalidArea, ClusterTolerance, pLabels)
    def ConstructPolygonsFromGeometries(self, cancel, FeatureClass, processingBounds, modifyExisting, pLineSrc, InvalidArea, ClusterTolerance):
        '''Method IFeatureConstruction.ConstructPolygonsFromGeometries

           INPUTS
            cancel              : ICancelOperation*
            FeatureClass        : IFeatureClass*
            processingBounds    : IEnvelope*
            modifyExisting      : VARIANT_BOOL
            pLineSrc            : IEnumGeometry*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double'''
        return super(IFeatureConstruction, self).ConstructPolygonsFromGeometries(cancel, FeatureClass, processingBounds, modifyExisting, pLineSrc, InvalidArea, ClusterTolerance)
    def SplitPolygonsWithLines(self, cancel, FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance):
        '''Method IFeatureConstruction.SplitPolygonsWithLines

           INPUTS
            cancel              : ICancelOperation*
            FeatureClass        : IFeatureClass*
            processingBounds    : IEnvelope*
            lineSrc             : IEnumFeature*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double'''
        return super(IFeatureConstruction, self).SplitPolygonsWithLines(cancel, FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance)
    def SplitPolygonsWithLinesFromCursor(self, cancel, FeatureClass, processingBounds, pLineSrc, InvalidArea, ClusterTolerance):
        '''Method IFeatureConstruction.SplitPolygonsWithLinesFromCursor

           INPUTS
            cancel              : ICancelOperation*
            FeatureClass        : IFeatureClass*
            processingBounds    : IEnvelope*
            pLineSrc            : IFeatureCursor*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double'''
        return super(IFeatureConstruction, self).SplitPolygonsWithLinesFromCursor(cancel, FeatureClass, processingBounds, pLineSrc, InvalidArea, ClusterTolerance)
    def AutoCompleteFromGeometries(self, FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance, selectionWorkspace):
        '''Method IFeatureConstruction.AutoCompleteFromGeometries

           INPUTS
            FeatureClass        : IFeatureClass*
            processingBounds    : IEnvelope*
            lineSrc             : IEnumGeometry*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double
            selectionWorkspace  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IFeatureConstruction, self).AutoCompleteFromGeometries(FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance, selectionWorkspace)
    def AutoCompleteFromFeatures(self, FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance, selectionWorkspace):
        '''Method IFeatureConstruction.AutoCompleteFromFeatures

           INPUTS
            FeatureClass        : IFeatureClass*
            processingBounds    : IEnvelope*
            lineSrc             : IEnumFeature*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double
            selectionWorkspace  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IFeatureConstruction, self).AutoCompleteFromFeatures(FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance, selectionWorkspace)
    def AutoCompleteFromFeaturesFromCursor(self, FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance, selectionWorkspace):
        '''Method IFeatureConstruction.AutoCompleteFromFeaturesFromCursor

           INPUTS
            FeatureClass        : IFeatureClass*
            processingBounds    : IEnvelope*
            lineSrc             : IFeatureCursor*
            InvalidArea         : IInvalidArea*
            ClusterTolerance    : double
            selectionWorkspace  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(IFeatureConstruction, self).AutoCompleteFromFeaturesFromCursor(FeatureClass, processingBounds, lineSrc, InvalidArea, ClusterTolerance, selectionWorkspace)
    def PlanarizeLines(self, cancel, enumFeature, ClusterTolerance):
        '''Method IFeatureConstruction.PlanarizeLines

           INPUTS
            cancel              : ICancelOperation*
            enumFeature         : IEnumFeature*
            ClusterTolerance    : double'''
        return super(IFeatureConstruction, self).PlanarizeLines(cancel, enumFeature, ClusterTolerance)
    def PlanarizeLinesFromCursor(self, cancel, FeatureClass, FeatureCursor, ClusterTolerance):
        '''Method IFeatureConstruction.PlanarizeLinesFromCursor

           INPUTS
            cancel              : ICancelOperation*
            FeatureClass        : IFeatureClass*
            FeatureCursor       : IFeatureCursor*
            ClusterTolerance    : double'''
        return super(IFeatureConstruction, self).PlanarizeLinesFromCursor(cancel, FeatureClass, FeatureCursor, ClusterTolerance)
    def put_ConstructedFeaturesSubtype(self, _arg1):
        '''Method IFeatureConstruction.put_ConstructedFeaturesSubtype

           INPUT
            _arg1               : long'''
        return super(IFeatureConstruction, self).put_ConstructedFeaturesSubtype(_arg1)
    def put_DefaultZ(self, _arg1):
        '''Method IFeatureConstruction.put_DefaultZ

           INPUT
            _arg1               : double'''
        return super(IFeatureConstruction, self).put_DefaultZ(_arg1)
    def get_FeaturesChanged(self):
        '''Method IFeatureConstruction.get_FeaturesChanged

           OUTPUT
            FeaturesChanged     : VARIANT_BOOL*'''
        return super(IFeatureConstruction, self).get_FeaturesChanged()
    ConstructedFeaturesSubtype = property(None, put_ConstructedFeaturesSubtype, None)
    DefaultZ = property(None, put_DefaultZ, None)
    FeaturesChanged = property(get_FeaturesChanged, None, None)

class ISurface(_esriGeoDatabase.ISurface):
    _IID = uuid.UUID('73b80fbc-ff33-11d1-a549-0000f8774f0f')

    def __init__(self, *args, **kw):
        super(ISurface, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ZFactor(self):
        '''Method ISurface.get_ZFactor

           OUTPUT
            pFactor             : double*'''
        return super(ISurface, self).get_ZFactor()
    def put_ZFactor(self, pFactor):
        '''Method ISurface.put_ZFactor

           INPUT
            pFactor             : double'''
        return super(ISurface, self).put_ZFactor(pFactor)
    def GetProjectedArea(self, referenceHeight, Type):
        '''Method ISurface.GetProjectedArea

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pArea               : double*'''
        return super(ISurface, self).GetProjectedArea(referenceHeight, Type)
    def GetSurfaceArea(self, referenceHeight, Type):
        '''Method ISurface.GetSurfaceArea

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pArea               : double*'''
        return super(ISurface, self).GetSurfaceArea(referenceHeight, Type)
    def GetVolume(self, reference, Type):
        '''Method ISurface.GetVolume

           INPUTS
            reference           : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pVolume             : double*'''
        return super(ISurface, self).GetVolume(reference, Type)
    def QueryNormal(self, pLocation, pNormal):
        '''Method ISurface.QueryNormal

           INPUTS
            pLocation           : IPoint*
            pNormal             : IVector3D*'''
        return super(ISurface, self).QueryNormal(pLocation, pNormal)
    def GetNormal(self, pLocation):
        '''Method ISurface.GetNormal

           INPUT
            pLocation           : IPoint*

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ISurface, self).GetNormal(pLocation)
    def FindNormal(self, X, Y):
        '''Method ISurface.FindNormal

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ISurface, self).FindNormal(X, Y)
    def GetElevation(self, pPoint):
        '''Method ISurface.GetElevation

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pElevation          : double*'''
        return super(ISurface, self).GetElevation(pPoint)
    def GetSlopeDegrees(self, pPoint):
        '''Method ISurface.GetSlopeDegrees

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ISurface, self).GetSlopeDegrees(pPoint)
    def GetSlopeRadians(self, pPoint):
        '''Method ISurface.GetSlopeRadians

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ISurface, self).GetSlopeRadians(pPoint)
    def GetSlopePercent(self, pPoint):
        '''Method ISurface.GetSlopePercent

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ISurface, self).GetSlopePercent(pPoint)
    def GetAspectDegrees(self, pPoint):
        '''Method ISurface.GetAspectDegrees

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pAspect             : double*'''
        return super(ISurface, self).GetAspectDegrees(pPoint)
    def GetAspectRadians(self, pPoint):
        '''Method ISurface.GetAspectRadians

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pAspect             : double*'''
        return super(ISurface, self).GetAspectRadians(pPoint)
    def IsVoidZ(self, Value):
        '''Method ISurface.IsVoidZ

           INPUT
            Value               : double

           OUTPUT
            pbIsVoid            : VARIANT_BOOL*'''
        return super(ISurface, self).IsVoidZ(Value)
    def InterpolateShape(self, pShape, pStepSize):
        '''Method ISurface.InterpolateShape

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            ppOutShape          : IGeometry**'''
        return super(ISurface, self).InterpolateShape(pShape, pStepSize)
    def InterpolateShapeVertices(self, pShape):
        '''Method ISurface.InterpolateShapeVertices

           INPUT
            pShape              : IGeometry*

           OUTPUT
            ppOutShape          : IGeometry**'''
        return super(ISurface, self).InterpolateShapeVertices(pShape)
    def GetProfile(self, pShape, pStepSize):
        '''Method ISurface.GetProfile

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            ppProfile           : IGeometry**'''
        return super(ISurface, self).GetProfile(pShape, pStepSize)
    def get_CanDoCurvature(self):
        '''Method ISurface.get_CanDoCurvature

           OUTPUT
            pbCanDo             : VARIANT_BOOL*'''
        return super(ISurface, self).get_CanDoCurvature()
    def GetLineOfSight(self, pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor):
        '''Method ISurface.GetLineOfSight

           INPUTS
            pObserver           : IPoint*
            pTarget             : IPoint*
            bApplyCurvature     : VARIANT_BOOL
            bApplyRefraction    : VARIANT_BOOL
            pRefractionFactor   : VARIANT*

           OUTPUTS
            ppObstruction       : IPoint**
            ppVisibleLines      : IPolyline**
            ppInvisibleLines    : IPolyline**
            pbIsVisible         : VARIANT_BOOL*'''
        return super(ISurface, self).GetLineOfSight(pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor)
    def QuerySurfaceLength(self, pShape, pStepSize):
        '''Method ISurface.QuerySurfaceLength

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            pLength             : double*'''
        return super(ISurface, self).QuerySurfaceLength(pShape, pStepSize)
    def Locate(self, pRay, hint):
        '''Method ISurface.Locate

           INPUTS
            pRay                : IRay*
            hint                : long

           OUTPUT
            ppLocation          : IPoint**'''
        return super(ISurface, self).Locate(pRay, hint)
    def LocateAll(self, pRay, hint):
        '''Method ISurface.LocateAll

           INPUTS
            pRay                : IRay*
            hint                : long

           OUTPUT
            ppDistances         : IDoubleArray**'''
        return super(ISurface, self).LocateAll(pRay, hint)
    def GetContour(self, pPoint):
        '''Method ISurface.GetContour

           INPUT
            pPoint              : IPoint*

           OUTPUTS
            ppContour           : IPolyline**
            pElevation          : double*'''
        return super(ISurface, self).GetContour(pPoint)
    def ContourList(self, pBreaks, pFeatureClass, FieldName, digitsAfterDecimalPoint):
        '''Method ISurface.ContourList

           INPUTS
            pBreaks             : IDoubleArray*
            pFeatureClass       : IFeatureClass*
            FieldName           : BSTR
            digitsAfterDecimalPoint: long'''
        return super(ISurface, self).ContourList(pBreaks, pFeatureClass, FieldName, digitsAfterDecimalPoint)
    def Contour(self, referenceContourHeight, interval, pFeatureClass, FieldName, digitsAfterDecimalPoint):
        '''Method ISurface.Contour

           INPUTS
            referenceContourHeight: double
            interval            : double
            pFeatureClass       : IFeatureClass*
            FieldName           : BSTR
            digitsAfterDecimalPoint: long'''
        return super(ISurface, self).Contour(referenceContourHeight, interval, pFeatureClass, FieldName, digitsAfterDecimalPoint)
    def AsPolygons(self, pFeatureClass, Type, pClassBreaks, pClassCodes, FieldName):
        '''Method ISurface.AsPolygons

           INPUTS
            pFeatureClass       : IFeatureClass*
            Type                : esriSurfaceConversionType
            pClassBreaks        : IDoubleArray*
            pClassCodes         : ILongArray*
            FieldName           : VARIANT*'''
        return super(ISurface, self).AsPolygons(pFeatureClass, Type, pClassBreaks, pClassCodes, FieldName)
    def GetSteepestPath(self, pPoint):
        '''Method ISurface.GetSteepestPath

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppPath              : IPolyline**'''
        return super(ISurface, self).GetSteepestPath(pPoint)
    def QueryPixelBlock(self, xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData, block):
        '''Method ISurface.QueryPixelBlock

           INPUTS
            xOrigin             : double
            yOrigin             : double
            xPixelSize          : double
            yPixelSize          : double
            Type                : esriRasterizationType
            valueForNoData      : VARIANT
            block               : VARIANT'''
        return super(ISurface, self).QueryPixelBlock(xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData, block)
    def get_Z(self, X, Y):
        '''Method IFunctionalSurface.get_Z (from IFunctionalSurface)

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            Z                   : double*'''
        return super(ISurface, self).get_Z(X, Y)
    def get_Domain(self):
        '''Method IFunctionalSurface.get_Domain (from IFunctionalSurface)

           OUTPUT
            Domain              : IPolygon**'''
        return super(ISurface, self).get_Domain()
    CanDoCurvature = property(get_CanDoCurvature, None, None)
    Domain = property(get_Domain, None, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ITinEdit2(_esriGeoDatabase.ITinEdit2):
    _IID = uuid.UUID('21c49cc8-3c46-454e-9115-57490fb6ba4f')
    def ResetExtent(self, pExtent):
        '''Method ITinEdit2.ResetExtent

           INPUT
            pExtent             : IEnvelope*'''
        return super(ITinEdit2, self).ResetExtent(pExtent)
    def SetToConstrainedDelaunay(self):
        '''Method ITinEdit2.SetToConstrainedDelaunay'''
        return super(ITinEdit2, self).SetToConstrainedDelaunay()
    def SwapEdge(self, Index, Type, Tag):
        '''Method ITinEdit2.SwapEdge

           INPUTS
            Index               : long
            Type                : esriTinEdgeType
            Tag                 : long

           OUTPUT
            pNewIndex           : long*'''
        return super(ITinEdit2, self).SwapEdge(Index, Type, Tag)
    def AddFrom3dMultipointFeatureClass(self, pFeatureClass, pClippingFilter):
        '''Method ITinEdit2.AddFrom3dMultipointFeatureClass

           INPUTS
            pFeatureClass       : IFeatureClass*
            pClippingFilter     : ISpatialFilter*'''
        return super(ITinEdit2, self).AddFrom3dMultipointFeatureClass(pFeatureClass, pClippingFilter)
    def SaveSnapshot(self, Name, bOverWrite):
        '''Method ITinEdit2.SaveSnapshot

           INPUTS
            Name                : BSTR
            bOverWrite          : VARIANT_BOOL'''
        return super(ITinEdit2, self).SaveSnapshot(Name, bOverWrite)

class IGeoDatabaseBridge(_esriGeoDatabase.IGeoDatabaseBridge):
    _IID = uuid.UUID('9999e240-ecd1-4979-83e6-b557748c18b7')
    def GetFeatures(self, pFeatureClass, fids, Recycling):
        '''Method IGeoDatabaseBridge.GetFeatures

           INPUTS
            pFeatureClass       : IFeatureClass*
            fids                : SAFEARRAY**
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IGeoDatabaseBridge, self).GetFeatures(pFeatureClass, fids, Recycling)

class IEnumRelationshipClass(_esriGeoDatabase.IEnumRelationshipClass):
    _IID = uuid.UUID('22b00697-8895-11d2-8a0d-006097aff44e')
    def Next(self):
        '''Method IEnumRelationshipClass.Next

           OUTPUT
            FeatureClass        : IRelationshipClass**'''
        return super(IEnumRelationshipClass, self).Next()
    def __iter__(self):
        try:
            super(IEnumRelationshipClass, self).Reset()
            val = super(IEnumRelationshipClass, self).Next()
            while val:
                yield val
                val = super(IEnumRelationshipClass, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumRelationshipClass.Reset'''
        return super(IEnumRelationshipClass, self).Reset()

class IRelationshipClass(_esriGeoDatabase.IRelationshipClass):
    _IID = uuid.UUID('22b00693-8895-11d2-8a0d-006097aff44e')
    def get_OriginPrimaryKey(self):
        '''Method IRelationshipClass.get_OriginPrimaryKey

           OUTPUT
            relOrigPKey         : BSTR*'''
        return super(IRelationshipClass, self).get_OriginPrimaryKey()
    def get_DestinationPrimaryKey(self):
        '''Method IRelationshipClass.get_DestinationPrimaryKey

           OUTPUT
            relDestPKey         : BSTR*'''
        return super(IRelationshipClass, self).get_DestinationPrimaryKey()
    def get_OriginForeignKey(self):
        '''Method IRelationshipClass.get_OriginForeignKey

           OUTPUT
            relOrigFKey         : BSTR*'''
        return super(IRelationshipClass, self).get_OriginForeignKey()
    def get_DestinationForeignKey(self):
        '''Method IRelationshipClass.get_DestinationForeignKey

           OUTPUT
            relDestFKey         : BSTR*'''
        return super(IRelationshipClass, self).get_DestinationForeignKey()
    def get_RelationshipClassID(self):
        '''Method IRelationshipClass.get_RelationshipClassID

           OUTPUT
            relClassId          : long*'''
        return super(IRelationshipClass, self).get_RelationshipClassID()
    def get_OriginClass(self):
        '''Method IRelationshipClass.get_OriginClass

           OUTPUT
            OriginClass         : IObjectClass**'''
        return super(IRelationshipClass, self).get_OriginClass()
    def get_DestinationClass(self):
        '''Method IRelationshipClass.get_DestinationClass

           OUTPUT
            DestinationClass    : IObjectClass**'''
        return super(IRelationshipClass, self).get_DestinationClass()
    def get_FeatureDataset(self):
        '''Method IRelationshipClass.get_FeatureDataset

           OUTPUT
            FeatureDataset      : IFeatureDataset**'''
        return super(IRelationshipClass, self).get_FeatureDataset()
    def get_ForwardPathLabel(self):
        '''Method IRelationshipClass.get_ForwardPathLabel

           OUTPUT
            ForwardLabel        : BSTR*'''
        return super(IRelationshipClass, self).get_ForwardPathLabel()
    def get_BackwardPathLabel(self):
        '''Method IRelationshipClass.get_BackwardPathLabel

           OUTPUT
            BackwardLabel       : BSTR*'''
        return super(IRelationshipClass, self).get_BackwardPathLabel()
    def get_Cardinality(self):
        '''Method IRelationshipClass.get_Cardinality

           OUTPUT
            Cardinality         : esriRelCardinality*'''
        return super(IRelationshipClass, self).get_Cardinality()
    def get_Notification(self):
        '''Method IRelationshipClass.get_Notification

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IRelationshipClass, self).get_Notification()
    def get_IsAttributed(self):
        '''Method IRelationshipClass.get_IsAttributed

           OUTPUT
            IsAttributed        : VARIANT_BOOL*'''
        return super(IRelationshipClass, self).get_IsAttributed()
    def get_IsComposite(self):
        '''Method IRelationshipClass.get_IsComposite

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IRelationshipClass, self).get_IsComposite()
    def CreateRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.CreateRelationship

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IRelationshipClass, self).CreateRelationship(OriginObject, DestinationObject)
    def GetRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.GetRelationship

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IRelationshipClass, self).GetRelationship(OriginObject, DestinationObject)
    def DeleteRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.DeleteRelationship

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*'''
        return super(IRelationshipClass, self).DeleteRelationship(OriginObject, DestinationObject)
    def GetObjectsRelatedToObject(self, anObject):
        '''Method IRelationshipClass.GetObjectsRelatedToObject

           INPUT
            anObject            : IObject*

           OUTPUT
            relatedObjects      : ISet**'''
        return super(IRelationshipClass, self).GetObjectsRelatedToObject(anObject)
    def GetRelationshipsForObject(self, anObject):
        '''Method IRelationshipClass.GetRelationshipsForObject

           INPUT
            anObject            : IObject*

           OUTPUT
            relationships       : IEnumRelationship**'''
        return super(IRelationshipClass, self).GetRelationshipsForObject(anObject)
    def DeleteRelationshipsForObject(self, anObject):
        '''Method IRelationshipClass.DeleteRelationshipsForObject

           INPUT
            anObject            : IObject*'''
        return super(IRelationshipClass, self).DeleteRelationshipsForObject(anObject)
    def GetObjectsRelatedToObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.GetObjectsRelatedToObjectSet

           INPUT
            anObjectSet         : ISet*

           OUTPUT
            relatedObjectSet    : ISet**'''
        return super(IRelationshipClass, self).GetObjectsRelatedToObjectSet(anObjectSet)
    def GetRelationshipsForObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.GetRelationshipsForObjectSet

           INPUT
            anObjectSet         : ISet*

           OUTPUT
            relationships       : IEnumRelationship**'''
        return super(IRelationshipClass, self).GetRelationshipsForObjectSet(anObjectSet)
    def GetObjectsMatchingObjectSet(self, srcObjectSet):
        '''Method IRelationshipClass.GetObjectsMatchingObjectSet

           INPUT
            srcObjectSet        : ISet*

           OUTPUT
            matchedPairRows     : IRelClassEnumRowPairs**'''
        return super(IRelationshipClass, self).GetObjectsMatchingObjectSet(srcObjectSet)
    def DeleteRelationshipsForObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.DeleteRelationshipsForObjectSet

           INPUT
            anObjectSet         : ISet*'''
        return super(IRelationshipClass, self).DeleteRelationshipsForObjectSet(anObjectSet)
    def get_RelationshipRules(self):
        '''Method IRelationshipClass.get_RelationshipRules

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IRelationshipClass, self).get_RelationshipRules()
    def AddRelationshipRule(self, Rule):
        '''Method IRelationshipClass.AddRelationshipRule

           INPUT
            Rule                : IRule*'''
        return super(IRelationshipClass, self).AddRelationshipRule(Rule)
    def DeleteRelationshipRule(self, Rule):
        '''Method IRelationshipClass.DeleteRelationshipRule

           INPUT
            Rule                : IRule*'''
        return super(IRelationshipClass, self).DeleteRelationshipRule(Rule)
    BackwardPathLabel = property(get_BackwardPathLabel, None, None)
    Cardinality = property(get_Cardinality, None, None)
    DestinationClass = property(get_DestinationClass, None, None)
    DestinationForeignKey = property(get_DestinationForeignKey, None, None)
    DestinationPrimaryKey = property(get_DestinationPrimaryKey, None, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    ForwardPathLabel = property(get_ForwardPathLabel, None, None)
    IsAttributed = property(get_IsAttributed, None, None)
    IsComposite = property(get_IsComposite, None, None)
    Notification = property(get_Notification, None, None)
    OriginClass = property(get_OriginClass, None, None)
    OriginForeignKey = property(get_OriginForeignKey, None, None)
    OriginPrimaryKey = property(get_OriginPrimaryKey, None, None)
    RelationshipClassID = property(get_RelationshipClassID, None, None)
    RelationshipRules = property(get_RelationshipRules, None, None)

class IRelationship(_esriGeoDatabase.IRelationship):
    _IID = uuid.UUID('22b00696-8895-11d2-8a0d-006097aff44e')
    def get_RelationshipClass(self):
        '''Method IRelationship.get_RelationshipClass

           OUTPUT
            RelationshipClass   : IRelationshipClass**'''
        return super(IRelationship, self).get_RelationshipClass()
    def get_OriginObject(self):
        '''Method IRelationship.get_OriginObject

           OUTPUT
            OriginObject        : IObject**'''
        return super(IRelationship, self).get_OriginObject()
    def get_DestinationObject(self):
        '''Method IRelationship.get_DestinationObject

           OUTPUT
            DestinationObject   : IObject**'''
        return super(IRelationship, self).get_DestinationObject()
    DestinationObject = property(get_DestinationObject, None, None)
    OriginObject = property(get_OriginObject, None, None)
    RelationshipClass = property(get_RelationshipClass, None, None)

class IEnumRelationship(_esriGeoDatabase.IEnumRelationship):
    _IID = uuid.UUID('22b00695-8895-11d2-8a0d-006097aff44e')
    def Next(self):
        '''Method IEnumRelationship.Next

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IEnumRelationship, self).Next()
    def __iter__(self):
        try:
            super(IEnumRelationship, self).Reset()
            val = super(IEnumRelationship, self).Next()
            while val:
                yield val
                val = super(IEnumRelationship, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumRelationship.Reset'''
        return super(IEnumRelationship, self).Reset()

class IRelationshipClassContainer(_esriGeoDatabase.IRelationshipClassContainer):
    _IID = uuid.UUID('c6c98e41-ee39-11d2-8a5a-000000000000')
    def get_RelationshipClasses(self):
        '''Method IRelationshipClassContainer.get_RelationshipClasses

           OUTPUT
            relClasses          : IEnumRelationshipClass**'''
        return super(IRelationshipClassContainer, self).get_RelationshipClasses()
    def CreateRelationshipClass(self, relClassName, OriginClass, DestinationClass, ForwardLabel, BackwardLabel, Cardinality, Notification, IsComposite, IsAttributed, relAttrFields, OriginPrimaryKey, destPrimaryKey, OriginForeignKey, destForeignKey):
        '''Method IRelationshipClassContainer.CreateRelationshipClass

           INPUTS
            relClassName        : BSTR
            OriginClass         : IObjectClass*
            DestinationClass    : IObjectClass*
            ForwardLabel        : BSTR
            BackwardLabel       : BSTR
            Cardinality         : esriRelCardinality
            Notification        : esriRelNotification
            IsComposite         : VARIANT_BOOL
            IsAttributed        : VARIANT_BOOL
            relAttrFields       : IFields*
            OriginPrimaryKey    : BSTR
            destPrimaryKey      : BSTR
            OriginForeignKey    : BSTR
            destForeignKey      : BSTR

           OUTPUT
            RelationshipClass   : IRelationshipClass**'''
        return super(IRelationshipClassContainer, self).CreateRelationshipClass(relClassName, OriginClass, DestinationClass, ForwardLabel, BackwardLabel, Cardinality, Notification, IsComposite, IsAttributed, relAttrFields, OriginPrimaryKey, destPrimaryKey, OriginForeignKey, destForeignKey)
    def AddRelationshipClass(self, RelationshipClass):
        '''Method IRelationshipClassContainer.AddRelationshipClass

           INPUT
            RelationshipClass   : IRelationshipClass*'''
        return super(IRelationshipClassContainer, self).AddRelationshipClass(RelationshipClass)
    RelationshipClasses = property(get_RelationshipClasses, None, None)

class IRelQueryTable(_esriGeoDatabase.IRelQueryTable):
    _IID = uuid.UUID('e9075692-7072-11d3-a11e-0000f8775bf9')
    def get_SourceTable(self):
        '''Method IRelQueryTable.get_SourceTable

           OUTPUT
            SourceTable         : ITable**'''
        return super(IRelQueryTable, self).get_SourceTable()
    def get_DestinationTable(self):
        '''Method IRelQueryTable.get_DestinationTable

           OUTPUT
            desinationTable     : ITable**'''
        return super(IRelQueryTable, self).get_DestinationTable()
    def get_RelationshipClass(self):
        '''Method IRelQueryTable.get_RelationshipClass

           OUTPUT
            RelationshipClass   : IRelationshipClass**'''
        return super(IRelQueryTable, self).get_RelationshipClass()
    DestinationTable = property(get_DestinationTable, None, None)
    RelationshipClass = property(get_RelationshipClass, None, None)
    SourceTable = property(get_SourceTable, None, None)

class IRelQueryTableFactory(_esriGeoDatabase.IRelQueryTableFactory):
    _IID = uuid.UUID('b3949d86-3078-4f3b-9dc8-651053366119')
    def Open(self, RelationshipClass, joinForward, QueryFilter, SrcSelectionSet, TargetColumns, DoNotPushJoinToDB, openAsLeftOuterJoin):
        '''Method IRelQueryTableFactory.Open

           INPUTS
            RelationshipClass   : IRelationshipClass*
            joinForward         : VARIANT_BOOL
            QueryFilter         : IQueryFilter*
            SrcSelectionSet     : ISelectionSet*
            TargetColumns       : BSTR
            DoNotPushJoinToDB   : VARIANT_BOOL
            openAsLeftOuterJoin : VARIANT_BOOL

           OUTPUT
            Table               : IRelQueryTable**'''
        return super(IRelQueryTableFactory, self).Open(RelationshipClass, joinForward, QueryFilter, SrcSelectionSet, TargetColumns, DoNotPushJoinToDB, openAsLeftOuterJoin)

class IRelationshipClassEvents(_esriGeoDatabase.IRelationshipClassEvents):
    _IID = uuid.UUID('a6693f58-eff3-11d4-9fef-00c04f6bdf0c')
    def OnCreate(self, rel):
        '''Method IRelationshipClassEvents.OnCreate

           INPUT
            rel                 : IRelationship*'''
        return super(IRelationshipClassEvents, self).OnCreate(rel)
    def OnDelete(self, rel):
        '''Method IRelationshipClassEvents.OnDelete

           INPUT
            rel                 : IRelationship*'''
        return super(IRelationshipClassEvents, self).OnDelete(rel)
    def OnChange(self, rel):
        '''Method IRelationshipClassEvents.OnChange

           INPUT
            rel                 : IRelationship*'''
        return super(IRelationshipClassEvents, self).OnChange(rel)

class IRelationshipClass2(_esriGeoDatabase.IRelationshipClass2):
    _IID = uuid.UUID('c9c39723-40b6-454f-a7ff-a25491c72256')
    def GetObjectsMatchingObjectSetEx(self, srcObjectSet, queryFilterAppliedToMatchingObjects, returnAllObjectMatches):
        '''Method IRelationshipClass2.GetObjectsMatchingObjectSetEx

           INPUTS
            srcObjectSet        : ISet*
            queryFilterAppliedToMatchingObjects: IQueryFilter*
            returnAllObjectMatches: VARIANT_BOOL

           OUTPUT
            matchedPairRows     : IRelClassEnumRowPairs**'''
        return super(IRelationshipClass2, self).GetObjectsMatchingObjectSetEx(srcObjectSet, queryFilterAppliedToMatchingObjects, returnAllObjectMatches)
    def GetObjectsMatchingObjectArray(self, srcObjectArray, queryFilterAppliedToMatchingObjects, returnAllObjectMatches):
        '''Method IRelationshipClass2.GetObjectsMatchingObjectArray

           INPUTS
            srcObjectArray      : IArray*
            queryFilterAppliedToMatchingObjects: IQueryFilter*
            returnAllObjectMatches: VARIANT_BOOL

           OUTPUT
            matchedPairRows     : IRelClassEnumRowPairs**'''
        return super(IRelationshipClass2, self).GetObjectsMatchingObjectArray(srcObjectArray, queryFilterAppliedToMatchingObjects, returnAllObjectMatches)
    def get_OriginPrimaryKey(self):
        '''Method IRelationshipClass.get_OriginPrimaryKey (from IRelationshipClass)

           OUTPUT
            relOrigPKey         : BSTR*'''
        return super(IRelationshipClass2, self).get_OriginPrimaryKey()
    def get_DestinationPrimaryKey(self):
        '''Method IRelationshipClass.get_DestinationPrimaryKey (from IRelationshipClass)

           OUTPUT
            relDestPKey         : BSTR*'''
        return super(IRelationshipClass2, self).get_DestinationPrimaryKey()
    def get_OriginForeignKey(self):
        '''Method IRelationshipClass.get_OriginForeignKey (from IRelationshipClass)

           OUTPUT
            relOrigFKey         : BSTR*'''
        return super(IRelationshipClass2, self).get_OriginForeignKey()
    def get_DestinationForeignKey(self):
        '''Method IRelationshipClass.get_DestinationForeignKey (from IRelationshipClass)

           OUTPUT
            relDestFKey         : BSTR*'''
        return super(IRelationshipClass2, self).get_DestinationForeignKey()
    def get_RelationshipClassID(self):
        '''Method IRelationshipClass.get_RelationshipClassID (from IRelationshipClass)

           OUTPUT
            relClassId          : long*'''
        return super(IRelationshipClass2, self).get_RelationshipClassID()
    def get_OriginClass(self):
        '''Method IRelationshipClass.get_OriginClass (from IRelationshipClass)

           OUTPUT
            OriginClass         : IObjectClass**'''
        return super(IRelationshipClass2, self).get_OriginClass()
    def get_DestinationClass(self):
        '''Method IRelationshipClass.get_DestinationClass (from IRelationshipClass)

           OUTPUT
            DestinationClass    : IObjectClass**'''
        return super(IRelationshipClass2, self).get_DestinationClass()
    def get_FeatureDataset(self):
        '''Method IRelationshipClass.get_FeatureDataset (from IRelationshipClass)

           OUTPUT
            FeatureDataset      : IFeatureDataset**'''
        return super(IRelationshipClass2, self).get_FeatureDataset()
    def get_ForwardPathLabel(self):
        '''Method IRelationshipClass.get_ForwardPathLabel (from IRelationshipClass)

           OUTPUT
            ForwardLabel        : BSTR*'''
        return super(IRelationshipClass2, self).get_ForwardPathLabel()
    def get_BackwardPathLabel(self):
        '''Method IRelationshipClass.get_BackwardPathLabel (from IRelationshipClass)

           OUTPUT
            BackwardLabel       : BSTR*'''
        return super(IRelationshipClass2, self).get_BackwardPathLabel()
    def get_Cardinality(self):
        '''Method IRelationshipClass.get_Cardinality (from IRelationshipClass)

           OUTPUT
            Cardinality         : esriRelCardinality*'''
        return super(IRelationshipClass2, self).get_Cardinality()
    def get_Notification(self):
        '''Method IRelationshipClass.get_Notification (from IRelationshipClass)

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IRelationshipClass2, self).get_Notification()
    def get_IsAttributed(self):
        '''Method IRelationshipClass.get_IsAttributed (from IRelationshipClass)

           OUTPUT
            IsAttributed        : VARIANT_BOOL*'''
        return super(IRelationshipClass2, self).get_IsAttributed()
    def get_IsComposite(self):
        '''Method IRelationshipClass.get_IsComposite (from IRelationshipClass)

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IRelationshipClass2, self).get_IsComposite()
    def CreateRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.CreateRelationship (from IRelationshipClass)

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IRelationshipClass2, self).CreateRelationship(OriginObject, DestinationObject)
    def GetRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.GetRelationship (from IRelationshipClass)

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IRelationshipClass2, self).GetRelationship(OriginObject, DestinationObject)
    def DeleteRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.DeleteRelationship (from IRelationshipClass)

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*'''
        return super(IRelationshipClass2, self).DeleteRelationship(OriginObject, DestinationObject)
    def GetObjectsRelatedToObject(self, anObject):
        '''Method IRelationshipClass.GetObjectsRelatedToObject (from IRelationshipClass)

           INPUT
            anObject            : IObject*

           OUTPUT
            relatedObjects      : ISet**'''
        return super(IRelationshipClass2, self).GetObjectsRelatedToObject(anObject)
    def GetRelationshipsForObject(self, anObject):
        '''Method IRelationshipClass.GetRelationshipsForObject (from IRelationshipClass)

           INPUT
            anObject            : IObject*

           OUTPUT
            relationships       : IEnumRelationship**'''
        return super(IRelationshipClass2, self).GetRelationshipsForObject(anObject)
    def DeleteRelationshipsForObject(self, anObject):
        '''Method IRelationshipClass.DeleteRelationshipsForObject (from IRelationshipClass)

           INPUT
            anObject            : IObject*'''
        return super(IRelationshipClass2, self).DeleteRelationshipsForObject(anObject)
    def GetObjectsRelatedToObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.GetObjectsRelatedToObjectSet (from IRelationshipClass)

           INPUT
            anObjectSet         : ISet*

           OUTPUT
            relatedObjectSet    : ISet**'''
        return super(IRelationshipClass2, self).GetObjectsRelatedToObjectSet(anObjectSet)
    def GetRelationshipsForObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.GetRelationshipsForObjectSet (from IRelationshipClass)

           INPUT
            anObjectSet         : ISet*

           OUTPUT
            relationships       : IEnumRelationship**'''
        return super(IRelationshipClass2, self).GetRelationshipsForObjectSet(anObjectSet)
    def GetObjectsMatchingObjectSet(self, srcObjectSet):
        '''Method IRelationshipClass.GetObjectsMatchingObjectSet (from IRelationshipClass)

           INPUT
            srcObjectSet        : ISet*

           OUTPUT
            matchedPairRows     : IRelClassEnumRowPairs**'''
        return super(IRelationshipClass2, self).GetObjectsMatchingObjectSet(srcObjectSet)
    def DeleteRelationshipsForObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.DeleteRelationshipsForObjectSet (from IRelationshipClass)

           INPUT
            anObjectSet         : ISet*'''
        return super(IRelationshipClass2, self).DeleteRelationshipsForObjectSet(anObjectSet)
    def get_RelationshipRules(self):
        '''Method IRelationshipClass.get_RelationshipRules (from IRelationshipClass)

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IRelationshipClass2, self).get_RelationshipRules()
    def AddRelationshipRule(self, Rule):
        '''Method IRelationshipClass.AddRelationshipRule (from IRelationshipClass)

           INPUT
            Rule                : IRule*'''
        return super(IRelationshipClass2, self).AddRelationshipRule(Rule)
    def DeleteRelationshipRule(self, Rule):
        '''Method IRelationshipClass.DeleteRelationshipRule (from IRelationshipClass)

           INPUT
            Rule                : IRule*'''
        return super(IRelationshipClass2, self).DeleteRelationshipRule(Rule)
    BackwardPathLabel = property(get_BackwardPathLabel, None, None)
    Cardinality = property(get_Cardinality, None, None)
    DestinationClass = property(get_DestinationClass, None, None)
    DestinationForeignKey = property(get_DestinationForeignKey, None, None)
    DestinationPrimaryKey = property(get_DestinationPrimaryKey, None, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    ForwardPathLabel = property(get_ForwardPathLabel, None, None)
    IsAttributed = property(get_IsAttributed, None, None)
    IsComposite = property(get_IsComposite, None, None)
    Notification = property(get_Notification, None, None)
    OriginClass = property(get_OriginClass, None, None)
    OriginForeignKey = property(get_OriginForeignKey, None, None)
    OriginPrimaryKey = property(get_OriginPrimaryKey, None, None)
    RelationshipClassID = property(get_RelationshipClassID, None, None)
    RelationshipRules = property(get_RelationshipRules, None, None)

class IRelationshipClass3(_esriGeoDatabase.IRelationshipClass3):
    _IID = uuid.UUID('79ce2129-71db-422a-87d8-b6a3807b2062')
    def get_IsAttachmentRelationship(self):
        '''Method IRelationshipClass3.get_IsAttachmentRelationship

           OUTPUT
            isAttachment        : VARIANT_BOOL*'''
        return super(IRelationshipClass3, self).get_IsAttachmentRelationship()
    def GetObjectsMatchingObjectSetEx(self, srcObjectSet, queryFilterAppliedToMatchingObjects, returnAllObjectMatches):
        '''Method IRelationshipClass2.GetObjectsMatchingObjectSetEx (from IRelationshipClass2)

           INPUTS
            srcObjectSet        : ISet*
            queryFilterAppliedToMatchingObjects: IQueryFilter*
            returnAllObjectMatches: VARIANT_BOOL

           OUTPUT
            matchedPairRows     : IRelClassEnumRowPairs**'''
        return super(IRelationshipClass3, self).GetObjectsMatchingObjectSetEx(srcObjectSet, queryFilterAppliedToMatchingObjects, returnAllObjectMatches)
    def GetObjectsMatchingObjectArray(self, srcObjectArray, queryFilterAppliedToMatchingObjects, returnAllObjectMatches):
        '''Method IRelationshipClass2.GetObjectsMatchingObjectArray (from IRelationshipClass2)

           INPUTS
            srcObjectArray      : IArray*
            queryFilterAppliedToMatchingObjects: IQueryFilter*
            returnAllObjectMatches: VARIANT_BOOL

           OUTPUT
            matchedPairRows     : IRelClassEnumRowPairs**'''
        return super(IRelationshipClass3, self).GetObjectsMatchingObjectArray(srcObjectArray, queryFilterAppliedToMatchingObjects, returnAllObjectMatches)
    def get_OriginPrimaryKey(self):
        '''Method IRelationshipClass.get_OriginPrimaryKey (from IRelationshipClass)

           OUTPUT
            relOrigPKey         : BSTR*'''
        return super(IRelationshipClass3, self).get_OriginPrimaryKey()
    def get_DestinationPrimaryKey(self):
        '''Method IRelationshipClass.get_DestinationPrimaryKey (from IRelationshipClass)

           OUTPUT
            relDestPKey         : BSTR*'''
        return super(IRelationshipClass3, self).get_DestinationPrimaryKey()
    def get_OriginForeignKey(self):
        '''Method IRelationshipClass.get_OriginForeignKey (from IRelationshipClass)

           OUTPUT
            relOrigFKey         : BSTR*'''
        return super(IRelationshipClass3, self).get_OriginForeignKey()
    def get_DestinationForeignKey(self):
        '''Method IRelationshipClass.get_DestinationForeignKey (from IRelationshipClass)

           OUTPUT
            relDestFKey         : BSTR*'''
        return super(IRelationshipClass3, self).get_DestinationForeignKey()
    def get_RelationshipClassID(self):
        '''Method IRelationshipClass.get_RelationshipClassID (from IRelationshipClass)

           OUTPUT
            relClassId          : long*'''
        return super(IRelationshipClass3, self).get_RelationshipClassID()
    def get_OriginClass(self):
        '''Method IRelationshipClass.get_OriginClass (from IRelationshipClass)

           OUTPUT
            OriginClass         : IObjectClass**'''
        return super(IRelationshipClass3, self).get_OriginClass()
    def get_DestinationClass(self):
        '''Method IRelationshipClass.get_DestinationClass (from IRelationshipClass)

           OUTPUT
            DestinationClass    : IObjectClass**'''
        return super(IRelationshipClass3, self).get_DestinationClass()
    def get_FeatureDataset(self):
        '''Method IRelationshipClass.get_FeatureDataset (from IRelationshipClass)

           OUTPUT
            FeatureDataset      : IFeatureDataset**'''
        return super(IRelationshipClass3, self).get_FeatureDataset()
    def get_ForwardPathLabel(self):
        '''Method IRelationshipClass.get_ForwardPathLabel (from IRelationshipClass)

           OUTPUT
            ForwardLabel        : BSTR*'''
        return super(IRelationshipClass3, self).get_ForwardPathLabel()
    def get_BackwardPathLabel(self):
        '''Method IRelationshipClass.get_BackwardPathLabel (from IRelationshipClass)

           OUTPUT
            BackwardLabel       : BSTR*'''
        return super(IRelationshipClass3, self).get_BackwardPathLabel()
    def get_Cardinality(self):
        '''Method IRelationshipClass.get_Cardinality (from IRelationshipClass)

           OUTPUT
            Cardinality         : esriRelCardinality*'''
        return super(IRelationshipClass3, self).get_Cardinality()
    def get_Notification(self):
        '''Method IRelationshipClass.get_Notification (from IRelationshipClass)

           OUTPUT
            Notification        : esriRelNotification*'''
        return super(IRelationshipClass3, self).get_Notification()
    def get_IsAttributed(self):
        '''Method IRelationshipClass.get_IsAttributed (from IRelationshipClass)

           OUTPUT
            IsAttributed        : VARIANT_BOOL*'''
        return super(IRelationshipClass3, self).get_IsAttributed()
    def get_IsComposite(self):
        '''Method IRelationshipClass.get_IsComposite (from IRelationshipClass)

           OUTPUT
            IsComposite         : VARIANT_BOOL*'''
        return super(IRelationshipClass3, self).get_IsComposite()
    def CreateRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.CreateRelationship (from IRelationshipClass)

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IRelationshipClass3, self).CreateRelationship(OriginObject, DestinationObject)
    def GetRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.GetRelationship (from IRelationshipClass)

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IRelationshipClass3, self).GetRelationship(OriginObject, DestinationObject)
    def DeleteRelationship(self, OriginObject, DestinationObject):
        '''Method IRelationshipClass.DeleteRelationship (from IRelationshipClass)

           INPUTS
            OriginObject        : IObject*
            DestinationObject   : IObject*'''
        return super(IRelationshipClass3, self).DeleteRelationship(OriginObject, DestinationObject)
    def GetObjectsRelatedToObject(self, anObject):
        '''Method IRelationshipClass.GetObjectsRelatedToObject (from IRelationshipClass)

           INPUT
            anObject            : IObject*

           OUTPUT
            relatedObjects      : ISet**'''
        return super(IRelationshipClass3, self).GetObjectsRelatedToObject(anObject)
    def GetRelationshipsForObject(self, anObject):
        '''Method IRelationshipClass.GetRelationshipsForObject (from IRelationshipClass)

           INPUT
            anObject            : IObject*

           OUTPUT
            relationships       : IEnumRelationship**'''
        return super(IRelationshipClass3, self).GetRelationshipsForObject(anObject)
    def DeleteRelationshipsForObject(self, anObject):
        '''Method IRelationshipClass.DeleteRelationshipsForObject (from IRelationshipClass)

           INPUT
            anObject            : IObject*'''
        return super(IRelationshipClass3, self).DeleteRelationshipsForObject(anObject)
    def GetObjectsRelatedToObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.GetObjectsRelatedToObjectSet (from IRelationshipClass)

           INPUT
            anObjectSet         : ISet*

           OUTPUT
            relatedObjectSet    : ISet**'''
        return super(IRelationshipClass3, self).GetObjectsRelatedToObjectSet(anObjectSet)
    def GetRelationshipsForObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.GetRelationshipsForObjectSet (from IRelationshipClass)

           INPUT
            anObjectSet         : ISet*

           OUTPUT
            relationships       : IEnumRelationship**'''
        return super(IRelationshipClass3, self).GetRelationshipsForObjectSet(anObjectSet)
    def GetObjectsMatchingObjectSet(self, srcObjectSet):
        '''Method IRelationshipClass.GetObjectsMatchingObjectSet (from IRelationshipClass)

           INPUT
            srcObjectSet        : ISet*

           OUTPUT
            matchedPairRows     : IRelClassEnumRowPairs**'''
        return super(IRelationshipClass3, self).GetObjectsMatchingObjectSet(srcObjectSet)
    def DeleteRelationshipsForObjectSet(self, anObjectSet):
        '''Method IRelationshipClass.DeleteRelationshipsForObjectSet (from IRelationshipClass)

           INPUT
            anObjectSet         : ISet*'''
        return super(IRelationshipClass3, self).DeleteRelationshipsForObjectSet(anObjectSet)
    def get_RelationshipRules(self):
        '''Method IRelationshipClass.get_RelationshipRules (from IRelationshipClass)

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IRelationshipClass3, self).get_RelationshipRules()
    def AddRelationshipRule(self, Rule):
        '''Method IRelationshipClass.AddRelationshipRule (from IRelationshipClass)

           INPUT
            Rule                : IRule*'''
        return super(IRelationshipClass3, self).AddRelationshipRule(Rule)
    def DeleteRelationshipRule(self, Rule):
        '''Method IRelationshipClass.DeleteRelationshipRule (from IRelationshipClass)

           INPUT
            Rule                : IRule*'''
        return super(IRelationshipClass3, self).DeleteRelationshipRule(Rule)
    BackwardPathLabel = property(get_BackwardPathLabel, None, None)
    Cardinality = property(get_Cardinality, None, None)
    DestinationClass = property(get_DestinationClass, None, None)
    DestinationForeignKey = property(get_DestinationForeignKey, None, None)
    DestinationPrimaryKey = property(get_DestinationPrimaryKey, None, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    ForwardPathLabel = property(get_ForwardPathLabel, None, None)
    IsAttachmentRelationship = property(get_IsAttachmentRelationship, None, None)
    IsAttributed = property(get_IsAttributed, None, None)
    IsComposite = property(get_IsComposite, None, None)
    Notification = property(get_Notification, None, None)
    OriginClass = property(get_OriginClass, None, None)
    OriginForeignKey = property(get_OriginForeignKey, None, None)
    OriginPrimaryKey = property(get_OriginPrimaryKey, None, None)
    RelationshipClassID = property(get_RelationshipClassID, None, None)
    RelationshipRules = property(get_RelationshipRules, None, None)

class IMemoryRelationshipClassFactory(_esriGeoDatabase.IMemoryRelationshipClassFactory):
    _IID = uuid.UUID('9aae7f41-e171-4bba-9d77-ab6a02309116')
    def Open(self, Name, originPrimaryClass, originPrimaryKeyField, originForeignClass, originForeignKeyField, ForwardPathLabel, BackwardPathLabel, Cardinality):
        '''Method IMemoryRelationshipClassFactory.Open

           INPUTS
            Name                : BSTR
            originPrimaryClass  : IObjectClass*
            originPrimaryKeyField: BSTR
            originForeignClass  : IObjectClass*
            originForeignKeyField: BSTR
            ForwardPathLabel    : BSTR
            BackwardPathLabel   : BSTR
            Cardinality         : esriRelCardinality

           OUTPUT
            RelationshipClass   : IRelationshipClass**'''
        return super(IMemoryRelationshipClassFactory, self).Open(Name, originPrimaryClass, originPrimaryKeyField, originForeignClass, originForeignKeyField, ForwardPathLabel, BackwardPathLabel, Cardinality)

class IRelatedObjectEvents(_esriGeoDatabase.IRelatedObjectEvents):
    _IID = uuid.UUID('22b0069a-8895-11d2-8a0d-006097aff44e')
    def RelatedObjectChanged(self, RelationshipClass, objectThatChanged):
        '''Method IRelatedObjectEvents.RelatedObjectChanged

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*'''
        return super(IRelatedObjectEvents, self).RelatedObjectChanged(RelationshipClass, objectThatChanged)
    def RelatedObjectMoved(self, RelationshipClass, objectThatChanged, moveVector):
        '''Method IRelatedObjectEvents.RelatedObjectMoved

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*
            moveVector          : ILine*'''
        return super(IRelatedObjectEvents, self).RelatedObjectMoved(RelationshipClass, objectThatChanged, moveVector)
    def RelatedObjectSetMoved(self, RelationshipClass, objectsThatNeedToChange, objectsThatChanged, moveVector):
        '''Method IRelatedObjectEvents.RelatedObjectSetMoved

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectsThatNeedToChange: ISet*
            objectsThatChanged  : ISet*
            moveVector          : ILine*'''
        return super(IRelatedObjectEvents, self).RelatedObjectSetMoved(RelationshipClass, objectsThatNeedToChange, objectsThatChanged, moveVector)
    def RelatedObjectRotated(self, RelationshipClass, objectThatChanged, Origin, Angle):
        '''Method IRelatedObjectEvents.RelatedObjectRotated

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*
            Origin              : IPoint*
            Angle               : double'''
        return super(IRelatedObjectEvents, self).RelatedObjectRotated(RelationshipClass, objectThatChanged, Origin, Angle)
    def RelatedObjectSetRotated(self, RelationshipClass, objectsThatNeedToChange, objectsThatChanged, Origin, Angle):
        '''Method IRelatedObjectEvents.RelatedObjectSetRotated

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectsThatNeedToChange: ISet*
            objectsThatChanged  : ISet*
            Origin              : IPoint*
            Angle               : double'''
        return super(IRelatedObjectEvents, self).RelatedObjectSetRotated(RelationshipClass, objectsThatNeedToChange, objectsThatChanged, Origin, Angle)

class IRelatedObjectClassEvents(_esriGeoDatabase.IRelatedObjectClassEvents):
    _IID = uuid.UUID('22b00699-8895-11d2-8a0d-006097aff44e')
    def RelatedObjectCreated(self, RelationshipClass, objectThatWasCreated):
        '''Method IRelatedObjectClassEvents.RelatedObjectCreated

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatWasCreated: IObject*'''
        return super(IRelatedObjectClassEvents, self).RelatedObjectCreated(RelationshipClass, objectThatWasCreated)

class IRelatedObjectClassEvents2(_esriGeoDatabase.IRelatedObjectClassEvents2):
    _IID = uuid.UUID('c0e79d54-844c-11d4-80ed-00c04f601565')
    def RelatedObjectChanged(self, RelationshipClass, objectThatChanged, RelatedObject):
        '''Method IRelatedObjectClassEvents2.RelatedObjectChanged

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*
            RelatedObject       : IObject*'''
        return super(IRelatedObjectClassEvents2, self).RelatedObjectChanged(RelationshipClass, objectThatChanged, RelatedObject)
    def RelatedObjectMoved(self, RelationshipClass, objectThatChanged, moveVector, RelatedObject):
        '''Method IRelatedObjectClassEvents2.RelatedObjectMoved

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*
            moveVector          : ILine*
            RelatedObject       : IObject*'''
        return super(IRelatedObjectClassEvents2, self).RelatedObjectMoved(RelationshipClass, objectThatChanged, moveVector, RelatedObject)
    def RelatedObjectSetMoved(self, RelationshipClass, objectsThatNeedToChange, objectsThatChanged, moveVector):
        '''Method IRelatedObjectClassEvents2.RelatedObjectSetMoved

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectsThatNeedToChange: ISet*
            objectsThatChanged  : ISet*
            moveVector          : ILine*'''
        return super(IRelatedObjectClassEvents2, self).RelatedObjectSetMoved(RelationshipClass, objectsThatNeedToChange, objectsThatChanged, moveVector)
    def RelatedObjectRotated(self, RelationshipClass, objectThatChanged, Origin, Angle, RelatedObject):
        '''Method IRelatedObjectClassEvents2.RelatedObjectRotated

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*
            Origin              : IPoint*
            Angle               : double
            RelatedObject       : IObject*'''
        return super(IRelatedObjectClassEvents2, self).RelatedObjectRotated(RelationshipClass, objectThatChanged, Origin, Angle, RelatedObject)
    def RelatedObjectSetRotated(self, RelationshipClass, objectsThatNeedToChange, objectsThatChanged, Origin, Angle):
        '''Method IRelatedObjectClassEvents2.RelatedObjectSetRotated

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectsThatNeedToChange: ISet*
            objectsThatChanged  : ISet*
            Origin              : IPoint*
            Angle               : double'''
        return super(IRelatedObjectClassEvents2, self).RelatedObjectSetRotated(RelationshipClass, objectsThatNeedToChange, objectsThatChanged, Origin, Angle)

class IConfirmSendRelatedObjectEvents(_esriGeoDatabase.IConfirmSendRelatedObjectEvents):
    _IID = uuid.UUID('4a72e282-52bf-11d4-80dd-00c04f601565')
    def ConfirmSendRelatedObjectChanged(self, RelationshipClass, objectThatChanged):
        '''Method IConfirmSendRelatedObjectEvents.ConfirmSendRelatedObjectChanged

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*

           OUTPUT
            doSend              : VARIANT_BOOL*'''
        return super(IConfirmSendRelatedObjectEvents, self).ConfirmSendRelatedObjectChanged(RelationshipClass, objectThatChanged)
    def ConfirmSendRelatedObjectMoved(self, RelationshipClass, objectThatChanged, moveVector):
        '''Method IConfirmSendRelatedObjectEvents.ConfirmSendRelatedObjectMoved

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*
            moveVector          : ILine*

           OUTPUT
            doSend              : VARIANT_BOOL*'''
        return super(IConfirmSendRelatedObjectEvents, self).ConfirmSendRelatedObjectMoved(RelationshipClass, objectThatChanged, moveVector)
    def ConfirmSendRelatedObjectSetMoved(self, RelationshipClass, objectsThatChanged, moveVector):
        '''Method IConfirmSendRelatedObjectEvents.ConfirmSendRelatedObjectSetMoved

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectsThatChanged  : ISet*
            moveVector          : ILine*

           OUTPUT
            doSend              : VARIANT_BOOL*'''
        return super(IConfirmSendRelatedObjectEvents, self).ConfirmSendRelatedObjectSetMoved(RelationshipClass, objectsThatChanged, moveVector)
    def ConfirmSendRelatedObjectRotated(self, RelationshipClass, objectThatChanged, Origin, Angle):
        '''Method IConfirmSendRelatedObjectEvents.ConfirmSendRelatedObjectRotated

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectThatChanged   : IObject*
            Origin              : IPoint*
            Angle               : double

           OUTPUT
            doSend              : VARIANT_BOOL*'''
        return super(IConfirmSendRelatedObjectEvents, self).ConfirmSendRelatedObjectRotated(RelationshipClass, objectThatChanged, Origin, Angle)
    def ConfirmSendRelatedObjectSetRotated(self, RelationshipClass, objectsThatChanged, Origin, Angle):
        '''Method IConfirmSendRelatedObjectEvents.ConfirmSendRelatedObjectSetRotated

           INPUTS
            RelationshipClass   : IRelationshipClass*
            objectsThatChanged  : ISet*
            Origin              : IPoint*
            Angle               : double

           OUTPUT
            doSend              : VARIANT_BOOL*'''
        return super(IConfirmSendRelatedObjectEvents, self).ConfirmSendRelatedObjectSetRotated(RelationshipClass, objectsThatChanged, Origin, Angle)

class IFeatureClassEdit(_esriGeoDatabase.IFeatureClassEdit):
    _IID = uuid.UUID('a5d5e364-fea9-11d3-a052-00c04f6bdd84')
    def get_CanEditWithProjection(self):
        '''Method IFeatureClassEdit.get_CanEditWithProjection

           OUTPUT
            IsEditable          : VARIANT_BOOL*'''
        return super(IFeatureClassEdit, self).get_CanEditWithProjection()
    def HasCustomSplitPolicyForRelationship(self):
        '''Method IFeatureClassEdit.HasCustomSplitPolicyForRelationship

           OUTPUT
            hasCustomPolicy     : VARIANT_BOOL*'''
        return super(IFeatureClassEdit, self).HasCustomSplitPolicyForRelationship()
    def get_CustomSplitPolicyForRelationship(self, Row, relClass):
        '''Method IFeatureClassEdit.get_CustomSplitPolicyForRelationship

           INPUTS
            Row                 : IRow*
            relClass            : IRelationshipClass*

           OUTPUT
            policy              : esriRelationshipSplitPolicy*'''
        return super(IFeatureClassEdit, self).get_CustomSplitPolicyForRelationship(Row, relClass)
    CanEditWithProjection = property(get_CanEditWithProjection, None, None)

class ISynchronizationHelper(_esriGeoDatabase.ISynchronizationHelper):
    _IID = uuid.UUID('7002c8b5-1d00-11d3-a63b-0008c7d3ae50')
    def StartSynchronization(self, PropertySet, action, interval):
        '''Method ISynchronizationHelper.StartSynchronization

           INPUTS
            PropertySet         : IPropertySet*
            action              : esriMetadataSyncAction
            interval            : long

           OUTPUT
            Ok                  : VARIANT_BOOL*'''
        return super(ISynchronizationHelper, self).StartSynchronization(PropertySet, action, interval)
    def FinishSynchronization(self, PropertySet):
        '''Method ISynchronizationHelper.FinishSynchronization

           INPUT
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).FinishSynchronization(PropertySet)
    def PopulateStaticProperties(self, PropertySet):
        '''Method ISynchronizationHelper.PopulateStaticProperties

           INPUT
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).PopulateStaticProperties(PropertySet)
    def ExtractSpatialProperties(self, geoDataset, PropertySet):
        '''Method ISynchronizationHelper.ExtractSpatialProperties

           INPUTS
            geoDataset          : IGeoDataset*
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).ExtractSpatialProperties(geoDataset, PropertySet)
    def ExtractFeatureClassProperties(self, geoDataset, Index, PropertySet):
        '''Method ISynchronizationHelper.ExtractFeatureClassProperties

           INPUTS
            geoDataset          : IFeatureClass*
            Index               : long
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).ExtractFeatureClassProperties(geoDataset, Index, PropertySet)
    def ExtractEntityAttrProperties(self, geoDataset, Index, PropertySet):
        '''Method ISynchronizationHelper.ExtractEntityAttrProperties

           INPUTS
            geoDataset          : IClass*
            Index               : long
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).ExtractEntityAttrProperties(geoDataset, Index, PropertySet)
    def ExtractRelationshipProperties(self, RelationshipClass, Index, PropertySet):
        '''Method ISynchronizationHelper.ExtractRelationshipProperties

           INPUTS
            RelationshipClass   : IRelationshipClass*
            Index               : long
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).ExtractRelationshipProperties(RelationshipClass, Index, PropertySet)
    def PopulateDistributionProperties(self, fileName, fileType, PropertySet):
        '''Method ISynchronizationHelper.PopulateDistributionProperties

           INPUTS
            fileName            : BSTR
            fileType            : BSTR
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).PopulateDistributionProperties(fileName, fileType, PropertySet)
    def PopulateDistributionPropertiesForDatabase(self, Dataset, PropertySet):
        '''Method ISynchronizationHelper.PopulateDistributionPropertiesForDatabase

           INPUTS
            Dataset             : IDataset*
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).PopulateDistributionPropertiesForDatabase(Dataset, PropertySet)
    def ExtractBriefEntityAttrProperties(self, geoDataset, Index, PropertySet):
        '''Method ISynchronizationHelper.ExtractBriefEntityAttrProperties

           INPUTS
            geoDataset          : IClass*
            Index               : long
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).ExtractBriefEntityAttrProperties(geoDataset, Index, PropertySet)
    def ExtractBriefRelationshipProperties(self, RelationshipClass, Index, PropertySet):
        '''Method ISynchronizationHelper.ExtractBriefRelationshipProperties

           INPUTS
            RelationshipClass   : IRelationshipClass*
            Index               : long
            PropertySet         : IPropertySet*'''
        return super(ISynchronizationHelper, self).ExtractBriefRelationshipProperties(RelationshipClass, Index, PropertySet)

class IEnumAttributedRelationship(_esriGeoDatabase.IEnumAttributedRelationship):
    _IID = uuid.UUID('d245d158-e17e-4412-b894-934dea6193b6')
    def Next(self):
        '''Method IEnumAttributedRelationship.Next

           OUTPUT
            Relationship        : IRelationship**'''
        return super(IEnumAttributedRelationship, self).Next()
    def __iter__(self):
        try:
            super(IEnumAttributedRelationship, self).Reset()
            val = super(IEnumAttributedRelationship, self).Next()
            while val:
                yield val
                val = super(IEnumAttributedRelationship, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumAttributedRelationship.Reset'''
        return super(IEnumAttributedRelationship, self).Reset()

class ITopologyWorkspace(_esriGeoDatabase.ITopologyWorkspace):
    _IID = uuid.UUID('ea103f9f-8226-4d62-afd8-a9aead2a3be3')
    def OpenTopology(self, Name):
        '''Method ITopologyWorkspace.OpenTopology

           INPUT
            Name                : BSTR

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyWorkspace, self).OpenTopology(Name)

class ITopology(_esriGeoDatabase.ITopology):
    _IID = uuid.UUID('c08348e2-5ac1-4d88-a2d0-b675317bb6cd')
    def get_State(self):
        '''Method ITopology.get_State

           OUTPUT
            State               : esriTopologyState*'''
        return super(ITopology, self).get_State()
    def ValidateTopology(self, areaToValidate):
        '''Method ITopology.ValidateTopology

           INPUT
            areaToValidate      : IEnvelope*

           OUTPUT
            affectedArea        : IEnvelope**'''
        return super(ITopology, self).ValidateTopology(areaToValidate)
    def get_ClusterTolerance(self):
        '''Method ITopology.get_ClusterTolerance

           OUTPUT
            tolerance           : double*'''
        return super(ITopology, self).get_ClusterTolerance()
    def get_Cache(self):
        '''Method ITopology.get_Cache

           OUTPUT
            graph               : ITopologyGraph**'''
        return super(ITopology, self).get_Cache()
    def get_FeatureDataset(self):
        '''Method ITopology.get_FeatureDataset

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(ITopology, self).get_FeatureDataset()
    def AddClass(self, classToAdd, Weight, XYRank, ZRank, EventNotificationOnValidate):
        '''Method ITopology.AddClass

           INPUTS
            classToAdd          : IClass*
            Weight              : double
            XYRank              : long
            ZRank               : long
            EventNotificationOnValidate: VARIANT_BOOL'''
        return super(ITopology, self).AddClass(classToAdd, Weight, XYRank, ZRank, EventNotificationOnValidate)
    def RemoveClass(self, classToRemove):
        '''Method ITopology.RemoveClass

           INPUT
            classToRemove       : IClass*'''
        return super(ITopology, self).RemoveClass(classToRemove)
    def get_MaximumGeneratedErrorCount(self):
        '''Method ITopology.get_MaximumGeneratedErrorCount

           OUTPUT
            Count               : long*'''
        return super(ITopology, self).get_MaximumGeneratedErrorCount()
    def get_TopologyID(self):
        '''Method ITopology.get_TopologyID

           OUTPUT
            ID                  : long*'''
        return super(ITopology, self).get_TopologyID()
    def get_DirtyArea(self, Location):
        '''Method ITopology.get_DirtyArea

           INPUT
            Location            : IPolygon*

           OUTPUT
            dirtyAreaPolygon    : IPolygon**'''
        return super(ITopology, self).get_DirtyArea(Location)
    Cache = property(get_Cache, None, None)
    ClusterTolerance = property(get_ClusterTolerance, None, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    MaximumGeneratedErrorCount = property(get_MaximumGeneratedErrorCount, None, None)
    State = property(get_State, None, None)
    TopologyID = property(get_TopologyID, None, None)
    DirtyArea = IndexProperty(get_DirtyArea, None)

class ITopologyContainer(_esriGeoDatabase.ITopologyContainer):
    _IID = uuid.UUID('c2a33a05-adab-4fc9-938c-cb0e14476686')
    def get_Topology(self, Index):
        '''Method ITopologyContainer.get_Topology

           INPUT
            Index               : long

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer, self).get_Topology(Index)
    def get_TopologyByName(self, Name):
        '''Method ITopologyContainer.get_TopologyByName

           INPUT
            Name                : BSTR

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer, self).get_TopologyByName(Name)
    def get_TopologyByID(self, ID):
        '''Method ITopologyContainer.get_TopologyByID

           INPUT
            ID                  : long

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer, self).get_TopologyByID(ID)
    def get_TopologyCount(self):
        '''Method ITopologyContainer.get_TopologyCount

           OUTPUT
            Count               : long*'''
        return super(ITopologyContainer, self).get_TopologyCount()
    def CreateTopology(self, Name, ClusterTolerance, maxGeneratedErrorCount, ConfigurationKeyword):
        '''Method ITopologyContainer.CreateTopology

           INPUTS
            Name                : BSTR
            ClusterTolerance    : double
            maxGeneratedErrorCount: long
            ConfigurationKeyword: BSTR

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer, self).CreateTopology(Name, ClusterTolerance, maxGeneratedErrorCount, ConfigurationKeyword)
    def get_DefaultClusterTolerance(self):
        '''Method ITopologyContainer.get_DefaultClusterTolerance

           OUTPUT
            ClusterTolerance    : double*'''
        return super(ITopologyContainer, self).get_DefaultClusterTolerance()
    def get_MinimumClusterTolerance(self):
        '''Method ITopologyContainer.get_MinimumClusterTolerance

           OUTPUT
            ClusterTolerance    : double*'''
        return super(ITopologyContainer, self).get_MinimumClusterTolerance()
    def get_MaximumClusterTolerance(self):
        '''Method ITopologyContainer.get_MaximumClusterTolerance

           OUTPUT
            ClusterTolerance    : double*'''
        return super(ITopologyContainer, self).get_MaximumClusterTolerance()
    DefaultClusterTolerance = property(get_DefaultClusterTolerance, None, None)
    MaximumClusterTolerance = property(get_MaximumClusterTolerance, None, None)
    MinimumClusterTolerance = property(get_MinimumClusterTolerance, None, None)
    TopologyCount = property(get_TopologyCount, None, None)
    Topology = IndexProperty(get_Topology, None)
    TopologyByID = IndexProperty(get_TopologyByID, None)
    TopologyByName = IndexProperty(get_TopologyByName, None)

class ITopology2(_esriGeoDatabase.ITopology2):
    _IID = uuid.UUID('ff9b929c-9726-4f60-ac10-e798999bce71')
    def get_ZClusterTolerance(self):
        '''Method ITopology2.get_ZClusterTolerance

           OUTPUT
            tolerance           : double*'''
        return super(ITopology2, self).get_ZClusterTolerance()
    def get_State(self):
        '''Method ITopology.get_State (from ITopology)

           OUTPUT
            State               : esriTopologyState*'''
        return super(ITopology2, self).get_State()
    def ValidateTopology(self, areaToValidate):
        '''Method ITopology.ValidateTopology (from ITopology)

           INPUT
            areaToValidate      : IEnvelope*

           OUTPUT
            affectedArea        : IEnvelope**'''
        return super(ITopology2, self).ValidateTopology(areaToValidate)
    def get_ClusterTolerance(self):
        '''Method ITopology.get_ClusterTolerance (from ITopology)

           OUTPUT
            tolerance           : double*'''
        return super(ITopology2, self).get_ClusterTolerance()
    def get_Cache(self):
        '''Method ITopology.get_Cache (from ITopology)

           OUTPUT
            graph               : ITopologyGraph**'''
        return super(ITopology2, self).get_Cache()
    def get_FeatureDataset(self):
        '''Method ITopology.get_FeatureDataset (from ITopology)

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(ITopology2, self).get_FeatureDataset()
    def AddClass(self, classToAdd, Weight, XYRank, ZRank, EventNotificationOnValidate):
        '''Method ITopology.AddClass (from ITopology)

           INPUTS
            classToAdd          : IClass*
            Weight              : double
            XYRank              : long
            ZRank               : long
            EventNotificationOnValidate: VARIANT_BOOL'''
        return super(ITopology2, self).AddClass(classToAdd, Weight, XYRank, ZRank, EventNotificationOnValidate)
    def RemoveClass(self, classToRemove):
        '''Method ITopology.RemoveClass (from ITopology)

           INPUT
            classToRemove       : IClass*'''
        return super(ITopology2, self).RemoveClass(classToRemove)
    def get_MaximumGeneratedErrorCount(self):
        '''Method ITopology.get_MaximumGeneratedErrorCount (from ITopology)

           OUTPUT
            Count               : long*'''
        return super(ITopology2, self).get_MaximumGeneratedErrorCount()
    def get_TopologyID(self):
        '''Method ITopology.get_TopologyID (from ITopology)

           OUTPUT
            ID                  : long*'''
        return super(ITopology2, self).get_TopologyID()
    def get_DirtyArea(self, Location):
        '''Method ITopology.get_DirtyArea (from ITopology)

           INPUT
            Location            : IPolygon*

           OUTPUT
            dirtyAreaPolygon    : IPolygon**'''
        return super(ITopology2, self).get_DirtyArea(Location)
    Cache = property(get_Cache, None, None)
    ClusterTolerance = property(get_ClusterTolerance, None, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    MaximumGeneratedErrorCount = property(get_MaximumGeneratedErrorCount, None, None)
    State = property(get_State, None, None)
    TopologyID = property(get_TopologyID, None, None)
    ZClusterTolerance = property(get_ZClusterTolerance, None, None)
    DirtyArea = IndexProperty(get_DirtyArea, None)

class ITopologyContainer2(_esriGeoDatabase.ITopologyContainer2):
    _IID = uuid.UUID('f6146622-e8f8-496e-9d50-800594ff3378')
    def CreateTopologyEx(self, Name, ClusterTolerance, ZClusterTolerance, maxGeneratedErrorCount, ConfigurationKeyword):
        '''Method ITopologyContainer2.CreateTopologyEx

           INPUTS
            Name                : BSTR
            ClusterTolerance    : double
            ZClusterTolerance   : double
            maxGeneratedErrorCount: long
            ConfigurationKeyword: BSTR

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer2, self).CreateTopologyEx(Name, ClusterTolerance, ZClusterTolerance, maxGeneratedErrorCount, ConfigurationKeyword)
    def get_DefaultZClusterTolerance(self):
        '''Method ITopologyContainer2.get_DefaultZClusterTolerance

           OUTPUT
            ZClusterTolerance   : double*'''
        return super(ITopologyContainer2, self).get_DefaultZClusterTolerance()
    def get_MinimumZClusterTolerance(self):
        '''Method ITopologyContainer2.get_MinimumZClusterTolerance

           OUTPUT
            ZClusterTolerance   : double*'''
        return super(ITopologyContainer2, self).get_MinimumZClusterTolerance()
    def get_MaximumZClusterTolerance(self):
        '''Method ITopologyContainer2.get_MaximumZClusterTolerance

           OUTPUT
            ZClusterTolerance   : double*'''
        return super(ITopologyContainer2, self).get_MaximumZClusterTolerance()
    def get_Topology(self, Index):
        '''Method ITopologyContainer.get_Topology (from ITopologyContainer)

           INPUT
            Index               : long

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer2, self).get_Topology(Index)
    def get_TopologyByName(self, Name):
        '''Method ITopologyContainer.get_TopologyByName (from ITopologyContainer)

           INPUT
            Name                : BSTR

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer2, self).get_TopologyByName(Name)
    def get_TopologyByID(self, ID):
        '''Method ITopologyContainer.get_TopologyByID (from ITopologyContainer)

           INPUT
            ID                  : long

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer2, self).get_TopologyByID(ID)
    def get_TopologyCount(self):
        '''Method ITopologyContainer.get_TopologyCount (from ITopologyContainer)

           OUTPUT
            Count               : long*'''
        return super(ITopologyContainer2, self).get_TopologyCount()
    def CreateTopology(self, Name, ClusterTolerance, maxGeneratedErrorCount, ConfigurationKeyword):
        '''Method ITopologyContainer.CreateTopology (from ITopologyContainer)

           INPUTS
            Name                : BSTR
            ClusterTolerance    : double
            maxGeneratedErrorCount: long
            ConfigurationKeyword: BSTR

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyContainer2, self).CreateTopology(Name, ClusterTolerance, maxGeneratedErrorCount, ConfigurationKeyword)
    def get_DefaultClusterTolerance(self):
        '''Method ITopologyContainer.get_DefaultClusterTolerance (from ITopologyContainer)

           OUTPUT
            ClusterTolerance    : double*'''
        return super(ITopologyContainer2, self).get_DefaultClusterTolerance()
    def get_MinimumClusterTolerance(self):
        '''Method ITopologyContainer.get_MinimumClusterTolerance (from ITopologyContainer)

           OUTPUT
            ClusterTolerance    : double*'''
        return super(ITopologyContainer2, self).get_MinimumClusterTolerance()
    def get_MaximumClusterTolerance(self):
        '''Method ITopologyContainer.get_MaximumClusterTolerance (from ITopologyContainer)

           OUTPUT
            ClusterTolerance    : double*'''
        return super(ITopologyContainer2, self).get_MaximumClusterTolerance()
    DefaultClusterTolerance = property(get_DefaultClusterTolerance, None, None)
    DefaultZClusterTolerance = property(get_DefaultZClusterTolerance, None, None)
    MaximumClusterTolerance = property(get_MaximumClusterTolerance, None, None)
    MaximumZClusterTolerance = property(get_MaximumZClusterTolerance, None, None)
    MinimumClusterTolerance = property(get_MinimumClusterTolerance, None, None)
    MinimumZClusterTolerance = property(get_MinimumZClusterTolerance, None, None)
    TopologyCount = property(get_TopologyCount, None, None)
    Topology = IndexProperty(get_Topology, None)
    TopologyByID = IndexProperty(get_TopologyByID, None)
    TopologyByName = IndexProperty(get_TopologyByName, None)

class ITopologyClass(_esriGeoDatabase.ITopologyClass):
    _IID = uuid.UUID('fb93b289-790e-42b6-9dd3-8f0c0728da9f')
    def get_Topology(self):
        '''Method ITopologyClass.get_Topology

           OUTPUT
            Topology            : ITopology**'''
        return super(ITopologyClass, self).get_Topology()
    def get_IsInTopology(self):
        '''Method ITopologyClass.get_IsInTopology

           OUTPUT
            inTopology          : VARIANT_BOOL*'''
        return super(ITopologyClass, self).get_IsInTopology()
    def get_Weight(self):
        '''Method ITopologyClass.get_Weight

           OUTPUT
            Weight              : double*'''
        return super(ITopologyClass, self).get_Weight()
    def get_XYRank(self):
        '''Method ITopologyClass.get_XYRank

           OUTPUT
            XYRank              : long*'''
        return super(ITopologyClass, self).get_XYRank()
    def get_ZRank(self):
        '''Method ITopologyClass.get_ZRank

           OUTPUT
            ZRank               : long*'''
        return super(ITopologyClass, self).get_ZRank()
    def get_EventNotificationOnValidate(self):
        '''Method ITopologyClass.get_EventNotificationOnValidate

           OUTPUT
            eventNotification   : VARIANT_BOOL*'''
        return super(ITopologyClass, self).get_EventNotificationOnValidate()
    EventNotificationOnValidate = property(get_EventNotificationOnValidate, None, None)
    IsInTopology = property(get_IsInTopology, None, None)
    Topology = property(get_Topology, None, None)
    Weight = property(get_Weight, None, None)
    XYRank = property(get_XYRank, None, None)
    ZRank = property(get_ZRank, None, None)

class ITopologyGraph(_esriGeoDatabase.ITopologyGraph):
    _IID = uuid.UUID('4adc1017-3c78-434b-a32c-1817a42eb857')
    def SetEmpty(self):
        '''Method ITopologyGraph.SetEmpty'''
        return super(ITopologyGraph, self).SetEmpty()
    def SetSelectionEmpty(self, whichType):
        '''Method ITopologyGraph.SetSelectionEmpty

           INPUT
            whichType           : long'''
        return super(ITopologyGraph, self).SetSelectionEmpty(whichType)
    def Build(self, Extent, preserveSelection):
        '''Method ITopologyGraph.Build

           INPUTS
            Extent              : IEnvelope*
            preserveSelection   : VARIANT_BOOL'''
        return super(ITopologyGraph, self).Build(Extent, preserveSelection)
    def get_Extent(self):
        '''Method ITopologyGraph.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph, self).get_Extent()
    def get_BuildExtent(self):
        '''Method ITopologyGraph.get_BuildExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph, self).get_BuildExtent()
    def HitTest(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTest

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph, self).HitTest(whichElements, QueryPoint, searchRadius, hitPoint)
    def EnumHitTest(self, whichElements, QueryPoint, searchRadius):
        '''Method ITopologyGraph.EnumHitTest

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double

           OUTPUTS
            hitInfo             : IEnumTGHitInfo**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph, self).EnumHitTest(whichElements, QueryPoint, searchRadius)
    def get_SelectionCount(self, whichElements):
        '''Method ITopologyGraph.get_SelectionCount

           INPUT
            whichElements       : long

           OUTPUT
            Count               : long*'''
        return super(ITopologyGraph, self).get_SelectionCount(whichElements)
    def Select(self, selectHow, Element):
        '''Method ITopologyGraph.Select

           INPUTS
            selectHow           : esriTopologySelectionResultEnum
            Element             : ITopologyElement*

           OUTPUT
            SelectionChanged    : VARIANT_BOOL*'''
        return super(ITopologyGraph, self).Select(selectHow, Element)
    def get_NodeSelection(self):
        '''Method ITopologyGraph.get_NodeSelection

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph, self).get_NodeSelection()
    def get_EdgeSelection(self):
        '''Method ITopologyGraph.get_EdgeSelection

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph, self).get_EdgeSelection()
    def get_SelectionExtent(self, whichElements, includeAdjacent):
        '''Method ITopologyGraph.get_SelectionExtent

           INPUTS
            whichElements       : long
            includeAdjacent     : VARIANT_BOOL

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph, self).get_SelectionExtent(whichElements, includeAdjacent)
    def TransformSelection(self, Direction, transformation, proportionalStretch):
        '''Method ITopologyGraph.TransformSelection

           INPUTS
            Direction           : esriTransformDirection
            transformation      : ITransformation*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph, self).TransformSelection(Direction, transformation, proportionalStretch)
    def Post(self):
        '''Method ITopologyGraph.Post

           OUTPUT
            InvalidArea         : IEnvelope**'''
        return super(ITopologyGraph, self).Post()
    def get_IsPosting(self):
        '''Method ITopologyGraph.get_IsPosting

           OUTPUT
            posting             : VARIANT_BOOL*'''
        return super(ITopologyGraph, self).get_IsPosting()
    def ReshapeEdgeGeometry(self, Edge, reshapeGeometry):
        '''Method ITopologyGraph.ReshapeEdgeGeometry

           INPUTS
            Edge                : ITopologyEdge*
            reshapeGeometry     : IPath*

           OUTPUT
            reshaped            : VARIANT_BOOL*'''
        return super(ITopologyGraph, self).ReshapeEdgeGeometry(Edge, reshapeGeometry)
    def get_SelectionParents(self):
        '''Method ITopologyGraph.get_SelectionParents

           OUTPUT
            enumParents         : IEnumTopologyParent**'''
        return super(ITopologyGraph, self).get_SelectionParents()
    def SetParentSelected(self, FeatureClass, fID, selected):
        '''Method ITopologyGraph.SetParentSelected

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long
            selected            : VARIANT_BOOL

           OUTPUT
            edgeSelectionChanged: VARIANT_BOOL*'''
        return super(ITopologyGraph, self).SetParentSelected(FeatureClass, fID, selected)
    def GetParentGeometry(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentGeometry

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            theParentGeometry   : IGeometry**'''
        return super(ITopologyGraph, self).GetParentGeometry(FeatureClass, fID)
    def GetSelectionFeedback(self, whichElements, anchor, proportionalStretch):
        '''Method ITopologyGraph.GetSelectionFeedback

           INPUTS
            whichElements       : long
            anchor              : IPoint*
            proportionalStretch : VARIANT_BOOL

           OUTPUT
            selFeedback         : IDisplayFeedback**'''
        return super(ITopologyGraph, self).GetSelectionFeedback(whichElements, anchor, proportionalStretch)
    def SplitMoveNode(self, nodeToSplit, moveTo, proportionalStretch):
        '''Method ITopologyGraph.SplitMoveNode

           INPUTS
            nodeToSplit         : ITopologyNode*
            moveTo              : IPoint*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph, self).SplitMoveNode(nodeToSplit, moveTo, proportionalStretch)
    def GetSplitMoveNodeFeedback(self, nodeToSplit, proportionalStretch, outputSR):
        '''Method ITopologyGraph.GetSplitMoveNodeFeedback

           INPUTS
            nodeToSplit         : ITopologyNode*
            proportionalStretch : VARIANT_BOOL
            outputSR            : ISpatialReference*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(ITopologyGraph, self).GetSplitMoveNodeFeedback(nodeToSplit, proportionalStretch, outputSR)
    def SplitEdgeAtPoint(self, Edge, splitPoint, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtPoint

           INPUTS
            Edge                : ITopologyEdge*
            splitPoint          : IPoint*
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph, self).SplitEdgeAtPoint(Edge, splitPoint, tolerance)
    def SplitEdgeAtDistance(self, Edge, Distance, asRatio, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtDistance

           INPUTS
            Edge                : ITopologyEdge*
            Distance            : double
            asRatio             : VARIANT_BOOL
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph, self).SplitEdgeAtDistance(Edge, Distance, asRatio, tolerance)
    def SetEdgeGeometry(self, Edge, Geometry):
        '''Method ITopologyGraph.SetEdgeGeometry

           INPUTS
            Edge                : ITopologyEdge*
            Geometry            : IPath*'''
        return super(ITopologyGraph, self).SetEdgeGeometry(Edge, Geometry)
    def DeletePseudoNodesFromSelection(self):
        '''Method ITopologyGraph.DeletePseudoNodesFromSelection'''
        return super(ITopologyGraph, self).DeletePseudoNodesFromSelection()
    def DeleteEdge(self, Edge):
        '''Method ITopologyGraph.DeleteEdge

           INPUT
            Edge                : ITopologyEdge*'''
        return super(ITopologyGraph, self).DeleteEdge(Edge)
    def SelectByGeometry(self, whichElements, selectHow, Geometry):
        '''Method ITopologyGraph.SelectByGeometry

           INPUTS
            whichElements       : long
            selectHow           : esriTopologySelectionResultEnum
            Geometry            : IGeometry*'''
        return super(ITopologyGraph, self).SelectByGeometry(whichElements, selectHow, Geometry)
    def GetParentNodes(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentNodes

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumNode            : IEnumTopologyNode**'''
        return super(ITopologyGraph, self).GetParentNodes(FeatureClass, fID)
    def GetParentEdges(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentEdges

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumEdge            : IEnumTopologyEdge**'''
        return super(ITopologyGraph, self).GetParentEdges(FeatureClass, fID)
    def get_Edges(self):
        '''Method ITopologyGraph.get_Edges

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph, self).get_Edges()
    def get_Nodes(self):
        '''Method ITopologyGraph.get_Nodes

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph, self).get_Nodes()
    def get_HasElement(self, Element):
        '''Method ITopologyGraph.get_HasElement

           INPUT
            Element             : ITopologyElement*

           OUTPUT
            HasElement          : VARIANT_BOOL*'''
        return super(ITopologyGraph, self).get_HasElement(Element)
    def HitTestSelection(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTestSelection

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph, self).HitTestSelection(whichElements, QueryPoint, searchRadius, hitPoint)
    BuildExtent = property(get_BuildExtent, None, None)
    EdgeSelection = property(get_EdgeSelection, None, None)
    Edges = property(get_Edges, None, None)
    Extent = property(get_Extent, None, None)
    IsPosting = property(get_IsPosting, None, None)
    NodeSelection = property(get_NodeSelection, None, None)
    Nodes = property(get_Nodes, None, None)
    SelectionParents = property(get_SelectionParents, None, None)
    HasElement = IndexProperty(get_HasElement, None)
    SelectionCount = IndexProperty(get_SelectionCount, None)

class ITopologyGraph2(_esriGeoDatabase.ITopologyGraph2):
    _IID = uuid.UUID('08198140-4151-4218-b6e1-cddb110e1d0c')
    def get_HasPseudoNodes(self):
        '''Method ITopologyGraph2.get_HasPseudoNodes

           OUTPUT
            HasPseudoNodes      : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).get_HasPseudoNodes()
    def SetEmpty(self):
        '''Method ITopologyGraph.SetEmpty (from ITopologyGraph)'''
        return super(ITopologyGraph2, self).SetEmpty()
    def SetSelectionEmpty(self, whichType):
        '''Method ITopologyGraph.SetSelectionEmpty (from ITopologyGraph)

           INPUT
            whichType           : long'''
        return super(ITopologyGraph2, self).SetSelectionEmpty(whichType)
    def Build(self, Extent, preserveSelection):
        '''Method ITopologyGraph.Build (from ITopologyGraph)

           INPUTS
            Extent              : IEnvelope*
            preserveSelection   : VARIANT_BOOL'''
        return super(ITopologyGraph2, self).Build(Extent, preserveSelection)
    def get_Extent(self):
        '''Method ITopologyGraph.get_Extent (from ITopologyGraph)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph2, self).get_Extent()
    def get_BuildExtent(self):
        '''Method ITopologyGraph.get_BuildExtent (from ITopologyGraph)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph2, self).get_BuildExtent()
    def HitTest(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTest (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).HitTest(whichElements, QueryPoint, searchRadius, hitPoint)
    def EnumHitTest(self, whichElements, QueryPoint, searchRadius):
        '''Method ITopologyGraph.EnumHitTest (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double

           OUTPUTS
            hitInfo             : IEnumTGHitInfo**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).EnumHitTest(whichElements, QueryPoint, searchRadius)
    def get_SelectionCount(self, whichElements):
        '''Method ITopologyGraph.get_SelectionCount (from ITopologyGraph)

           INPUT
            whichElements       : long

           OUTPUT
            Count               : long*'''
        return super(ITopologyGraph2, self).get_SelectionCount(whichElements)
    def Select(self, selectHow, Element):
        '''Method ITopologyGraph.Select (from ITopologyGraph)

           INPUTS
            selectHow           : esriTopologySelectionResultEnum
            Element             : ITopologyElement*

           OUTPUT
            SelectionChanged    : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).Select(selectHow, Element)
    def get_NodeSelection(self):
        '''Method ITopologyGraph.get_NodeSelection (from ITopologyGraph)

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph2, self).get_NodeSelection()
    def get_EdgeSelection(self):
        '''Method ITopologyGraph.get_EdgeSelection (from ITopologyGraph)

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph2, self).get_EdgeSelection()
    def get_SelectionExtent(self, whichElements, includeAdjacent):
        '''Method ITopologyGraph.get_SelectionExtent (from ITopologyGraph)

           INPUTS
            whichElements       : long
            includeAdjacent     : VARIANT_BOOL

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph2, self).get_SelectionExtent(whichElements, includeAdjacent)
    def TransformSelection(self, Direction, transformation, proportionalStretch):
        '''Method ITopologyGraph.TransformSelection (from ITopologyGraph)

           INPUTS
            Direction           : esriTransformDirection
            transformation      : ITransformation*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph2, self).TransformSelection(Direction, transformation, proportionalStretch)
    def Post(self):
        '''Method ITopologyGraph.Post (from ITopologyGraph)

           OUTPUT
            InvalidArea         : IEnvelope**'''
        return super(ITopologyGraph2, self).Post()
    def get_IsPosting(self):
        '''Method ITopologyGraph.get_IsPosting (from ITopologyGraph)

           OUTPUT
            posting             : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).get_IsPosting()
    def ReshapeEdgeGeometry(self, Edge, reshapeGeometry):
        '''Method ITopologyGraph.ReshapeEdgeGeometry (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            reshapeGeometry     : IPath*

           OUTPUT
            reshaped            : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).ReshapeEdgeGeometry(Edge, reshapeGeometry)
    def get_SelectionParents(self):
        '''Method ITopologyGraph.get_SelectionParents (from ITopologyGraph)

           OUTPUT
            enumParents         : IEnumTopologyParent**'''
        return super(ITopologyGraph2, self).get_SelectionParents()
    def SetParentSelected(self, FeatureClass, fID, selected):
        '''Method ITopologyGraph.SetParentSelected (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long
            selected            : VARIANT_BOOL

           OUTPUT
            edgeSelectionChanged: VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).SetParentSelected(FeatureClass, fID, selected)
    def GetParentGeometry(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentGeometry (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            theParentGeometry   : IGeometry**'''
        return super(ITopologyGraph2, self).GetParentGeometry(FeatureClass, fID)
    def GetSelectionFeedback(self, whichElements, anchor, proportionalStretch):
        '''Method ITopologyGraph.GetSelectionFeedback (from ITopologyGraph)

           INPUTS
            whichElements       : long
            anchor              : IPoint*
            proportionalStretch : VARIANT_BOOL

           OUTPUT
            selFeedback         : IDisplayFeedback**'''
        return super(ITopologyGraph2, self).GetSelectionFeedback(whichElements, anchor, proportionalStretch)
    def SplitMoveNode(self, nodeToSplit, moveTo, proportionalStretch):
        '''Method ITopologyGraph.SplitMoveNode (from ITopologyGraph)

           INPUTS
            nodeToSplit         : ITopologyNode*
            moveTo              : IPoint*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph2, self).SplitMoveNode(nodeToSplit, moveTo, proportionalStretch)
    def GetSplitMoveNodeFeedback(self, nodeToSplit, proportionalStretch, outputSR):
        '''Method ITopologyGraph.GetSplitMoveNodeFeedback (from ITopologyGraph)

           INPUTS
            nodeToSplit         : ITopologyNode*
            proportionalStretch : VARIANT_BOOL
            outputSR            : ISpatialReference*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(ITopologyGraph2, self).GetSplitMoveNodeFeedback(nodeToSplit, proportionalStretch, outputSR)
    def SplitEdgeAtPoint(self, Edge, splitPoint, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtPoint (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            splitPoint          : IPoint*
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph2, self).SplitEdgeAtPoint(Edge, splitPoint, tolerance)
    def SplitEdgeAtDistance(self, Edge, Distance, asRatio, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtDistance (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            Distance            : double
            asRatio             : VARIANT_BOOL
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph2, self).SplitEdgeAtDistance(Edge, Distance, asRatio, tolerance)
    def SetEdgeGeometry(self, Edge, Geometry):
        '''Method ITopologyGraph.SetEdgeGeometry (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            Geometry            : IPath*'''
        return super(ITopologyGraph2, self).SetEdgeGeometry(Edge, Geometry)
    def DeletePseudoNodesFromSelection(self):
        '''Method ITopologyGraph.DeletePseudoNodesFromSelection (from ITopologyGraph)'''
        return super(ITopologyGraph2, self).DeletePseudoNodesFromSelection()
    def DeleteEdge(self, Edge):
        '''Method ITopologyGraph.DeleteEdge (from ITopologyGraph)

           INPUT
            Edge                : ITopologyEdge*'''
        return super(ITopologyGraph2, self).DeleteEdge(Edge)
    def SelectByGeometry(self, whichElements, selectHow, Geometry):
        '''Method ITopologyGraph.SelectByGeometry (from ITopologyGraph)

           INPUTS
            whichElements       : long
            selectHow           : esriTopologySelectionResultEnum
            Geometry            : IGeometry*'''
        return super(ITopologyGraph2, self).SelectByGeometry(whichElements, selectHow, Geometry)
    def GetParentNodes(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentNodes (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumNode            : IEnumTopologyNode**'''
        return super(ITopologyGraph2, self).GetParentNodes(FeatureClass, fID)
    def GetParentEdges(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentEdges (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumEdge            : IEnumTopologyEdge**'''
        return super(ITopologyGraph2, self).GetParentEdges(FeatureClass, fID)
    def get_Edges(self):
        '''Method ITopologyGraph.get_Edges (from ITopologyGraph)

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph2, self).get_Edges()
    def get_Nodes(self):
        '''Method ITopologyGraph.get_Nodes (from ITopologyGraph)

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph2, self).get_Nodes()
    def get_HasElement(self, Element):
        '''Method ITopologyGraph.get_HasElement (from ITopologyGraph)

           INPUT
            Element             : ITopologyElement*

           OUTPUT
            HasElement          : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).get_HasElement(Element)
    def HitTestSelection(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTestSelection (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph2, self).HitTestSelection(whichElements, QueryPoint, searchRadius, hitPoint)
    BuildExtent = property(get_BuildExtent, None, None)
    EdgeSelection = property(get_EdgeSelection, None, None)
    Edges = property(get_Edges, None, None)
    Extent = property(get_Extent, None, None)
    HasPseudoNodes = property(get_HasPseudoNodes, None, None)
    IsPosting = property(get_IsPosting, None, None)
    NodeSelection = property(get_NodeSelection, None, None)
    Nodes = property(get_Nodes, None, None)
    SelectionParents = property(get_SelectionParents, None, None)
    HasElement = IndexProperty(get_HasElement, None)
    SelectionCount = IndexProperty(get_SelectionCount, None)

class ITopologyGraph3(_esriGeoDatabase.ITopologyGraph3):
    _IID = uuid.UUID('15736f85-dd4f-4297-9921-65168571aca0')
    def PostEx(self, InvalidArea):
        '''Method ITopologyGraph3.PostEx

           INPUT
            InvalidArea         : IInvalidArea*'''
        return super(ITopologyGraph3, self).PostEx(InvalidArea)
    def get_HasPseudoNodes(self):
        '''Method ITopologyGraph2.get_HasPseudoNodes (from ITopologyGraph2)

           OUTPUT
            HasPseudoNodes      : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).get_HasPseudoNodes()
    def SetEmpty(self):
        '''Method ITopologyGraph.SetEmpty (from ITopologyGraph)'''
        return super(ITopologyGraph3, self).SetEmpty()
    def SetSelectionEmpty(self, whichType):
        '''Method ITopologyGraph.SetSelectionEmpty (from ITopologyGraph)

           INPUT
            whichType           : long'''
        return super(ITopologyGraph3, self).SetSelectionEmpty(whichType)
    def Build(self, Extent, preserveSelection):
        '''Method ITopologyGraph.Build (from ITopologyGraph)

           INPUTS
            Extent              : IEnvelope*
            preserveSelection   : VARIANT_BOOL'''
        return super(ITopologyGraph3, self).Build(Extent, preserveSelection)
    def get_Extent(self):
        '''Method ITopologyGraph.get_Extent (from ITopologyGraph)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph3, self).get_Extent()
    def get_BuildExtent(self):
        '''Method ITopologyGraph.get_BuildExtent (from ITopologyGraph)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph3, self).get_BuildExtent()
    def HitTest(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTest (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).HitTest(whichElements, QueryPoint, searchRadius, hitPoint)
    def EnumHitTest(self, whichElements, QueryPoint, searchRadius):
        '''Method ITopologyGraph.EnumHitTest (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double

           OUTPUTS
            hitInfo             : IEnumTGHitInfo**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).EnumHitTest(whichElements, QueryPoint, searchRadius)
    def get_SelectionCount(self, whichElements):
        '''Method ITopologyGraph.get_SelectionCount (from ITopologyGraph)

           INPUT
            whichElements       : long

           OUTPUT
            Count               : long*'''
        return super(ITopologyGraph3, self).get_SelectionCount(whichElements)
    def Select(self, selectHow, Element):
        '''Method ITopologyGraph.Select (from ITopologyGraph)

           INPUTS
            selectHow           : esriTopologySelectionResultEnum
            Element             : ITopologyElement*

           OUTPUT
            SelectionChanged    : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).Select(selectHow, Element)
    def get_NodeSelection(self):
        '''Method ITopologyGraph.get_NodeSelection (from ITopologyGraph)

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph3, self).get_NodeSelection()
    def get_EdgeSelection(self):
        '''Method ITopologyGraph.get_EdgeSelection (from ITopologyGraph)

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph3, self).get_EdgeSelection()
    def get_SelectionExtent(self, whichElements, includeAdjacent):
        '''Method ITopologyGraph.get_SelectionExtent (from ITopologyGraph)

           INPUTS
            whichElements       : long
            includeAdjacent     : VARIANT_BOOL

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph3, self).get_SelectionExtent(whichElements, includeAdjacent)
    def TransformSelection(self, Direction, transformation, proportionalStretch):
        '''Method ITopologyGraph.TransformSelection (from ITopologyGraph)

           INPUTS
            Direction           : esriTransformDirection
            transformation      : ITransformation*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph3, self).TransformSelection(Direction, transformation, proportionalStretch)
    def Post(self):
        '''Method ITopologyGraph.Post (from ITopologyGraph)

           OUTPUT
            InvalidArea         : IEnvelope**'''
        return super(ITopologyGraph3, self).Post()
    def get_IsPosting(self):
        '''Method ITopologyGraph.get_IsPosting (from ITopologyGraph)

           OUTPUT
            posting             : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).get_IsPosting()
    def ReshapeEdgeGeometry(self, Edge, reshapeGeometry):
        '''Method ITopologyGraph.ReshapeEdgeGeometry (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            reshapeGeometry     : IPath*

           OUTPUT
            reshaped            : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).ReshapeEdgeGeometry(Edge, reshapeGeometry)
    def get_SelectionParents(self):
        '''Method ITopologyGraph.get_SelectionParents (from ITopologyGraph)

           OUTPUT
            enumParents         : IEnumTopologyParent**'''
        return super(ITopologyGraph3, self).get_SelectionParents()
    def SetParentSelected(self, FeatureClass, fID, selected):
        '''Method ITopologyGraph.SetParentSelected (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long
            selected            : VARIANT_BOOL

           OUTPUT
            edgeSelectionChanged: VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).SetParentSelected(FeatureClass, fID, selected)
    def GetParentGeometry(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentGeometry (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            theParentGeometry   : IGeometry**'''
        return super(ITopologyGraph3, self).GetParentGeometry(FeatureClass, fID)
    def GetSelectionFeedback(self, whichElements, anchor, proportionalStretch):
        '''Method ITopologyGraph.GetSelectionFeedback (from ITopologyGraph)

           INPUTS
            whichElements       : long
            anchor              : IPoint*
            proportionalStretch : VARIANT_BOOL

           OUTPUT
            selFeedback         : IDisplayFeedback**'''
        return super(ITopologyGraph3, self).GetSelectionFeedback(whichElements, anchor, proportionalStretch)
    def SplitMoveNode(self, nodeToSplit, moveTo, proportionalStretch):
        '''Method ITopologyGraph.SplitMoveNode (from ITopologyGraph)

           INPUTS
            nodeToSplit         : ITopologyNode*
            moveTo              : IPoint*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph3, self).SplitMoveNode(nodeToSplit, moveTo, proportionalStretch)
    def GetSplitMoveNodeFeedback(self, nodeToSplit, proportionalStretch, outputSR):
        '''Method ITopologyGraph.GetSplitMoveNodeFeedback (from ITopologyGraph)

           INPUTS
            nodeToSplit         : ITopologyNode*
            proportionalStretch : VARIANT_BOOL
            outputSR            : ISpatialReference*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(ITopologyGraph3, self).GetSplitMoveNodeFeedback(nodeToSplit, proportionalStretch, outputSR)
    def SplitEdgeAtPoint(self, Edge, splitPoint, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtPoint (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            splitPoint          : IPoint*
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph3, self).SplitEdgeAtPoint(Edge, splitPoint, tolerance)
    def SplitEdgeAtDistance(self, Edge, Distance, asRatio, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtDistance (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            Distance            : double
            asRatio             : VARIANT_BOOL
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph3, self).SplitEdgeAtDistance(Edge, Distance, asRatio, tolerance)
    def SetEdgeGeometry(self, Edge, Geometry):
        '''Method ITopologyGraph.SetEdgeGeometry (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            Geometry            : IPath*'''
        return super(ITopologyGraph3, self).SetEdgeGeometry(Edge, Geometry)
    def DeletePseudoNodesFromSelection(self):
        '''Method ITopologyGraph.DeletePseudoNodesFromSelection (from ITopologyGraph)'''
        return super(ITopologyGraph3, self).DeletePseudoNodesFromSelection()
    def DeleteEdge(self, Edge):
        '''Method ITopologyGraph.DeleteEdge (from ITopologyGraph)

           INPUT
            Edge                : ITopologyEdge*'''
        return super(ITopologyGraph3, self).DeleteEdge(Edge)
    def SelectByGeometry(self, whichElements, selectHow, Geometry):
        '''Method ITopologyGraph.SelectByGeometry (from ITopologyGraph)

           INPUTS
            whichElements       : long
            selectHow           : esriTopologySelectionResultEnum
            Geometry            : IGeometry*'''
        return super(ITopologyGraph3, self).SelectByGeometry(whichElements, selectHow, Geometry)
    def GetParentNodes(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentNodes (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumNode            : IEnumTopologyNode**'''
        return super(ITopologyGraph3, self).GetParentNodes(FeatureClass, fID)
    def GetParentEdges(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentEdges (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumEdge            : IEnumTopologyEdge**'''
        return super(ITopologyGraph3, self).GetParentEdges(FeatureClass, fID)
    def get_Edges(self):
        '''Method ITopologyGraph.get_Edges (from ITopologyGraph)

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph3, self).get_Edges()
    def get_Nodes(self):
        '''Method ITopologyGraph.get_Nodes (from ITopologyGraph)

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph3, self).get_Nodes()
    def get_HasElement(self, Element):
        '''Method ITopologyGraph.get_HasElement (from ITopologyGraph)

           INPUT
            Element             : ITopologyElement*

           OUTPUT
            HasElement          : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).get_HasElement(Element)
    def HitTestSelection(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTestSelection (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph3, self).HitTestSelection(whichElements, QueryPoint, searchRadius, hitPoint)
    BuildExtent = property(get_BuildExtent, None, None)
    EdgeSelection = property(get_EdgeSelection, None, None)
    Edges = property(get_Edges, None, None)
    Extent = property(get_Extent, None, None)
    HasPseudoNodes = property(get_HasPseudoNodes, None, None)
    IsPosting = property(get_IsPosting, None, None)
    NodeSelection = property(get_NodeSelection, None, None)
    Nodes = property(get_Nodes, None, None)
    SelectionParents = property(get_SelectionParents, None, None)
    HasElement = IndexProperty(get_HasElement, None)
    SelectionCount = IndexProperty(get_SelectionCount, None)

class ITopologyGraph4(_esriGeoDatabase.ITopologyGraph4):
    _IID = uuid.UUID('2174251c-d2f1-4188-824b-785a1cc6d673')
    def BuildFromPolygon(self, Extent, preserveSelection):
        '''Method ITopologyGraph4.BuildFromPolygon

           INPUTS
            Extent              : IPolygon*
            preserveSelection   : VARIANT_BOOL'''
        return super(ITopologyGraph4, self).BuildFromPolygon(Extent, preserveSelection)
    def get_BuildPolygonExtent(self):
        '''Method ITopologyGraph4.get_BuildPolygonExtent

           OUTPUT
            BuildExtent         : IPolygon**'''
        return super(ITopologyGraph4, self).get_BuildPolygonExtent()
    def DetermineNodeDegree(self):
        '''Method ITopologyGraph4.DetermineNodeDegree'''
        return super(ITopologyGraph4, self).DetermineNodeDegree()
    def MergeSelectedEdges(self):
        '''Method ITopologyGraph4.MergeSelectedEdges'''
        return super(ITopologyGraph4, self).MergeSelectedEdges()
    def PostEx(self, InvalidArea):
        '''Method ITopologyGraph3.PostEx (from ITopologyGraph3)

           INPUT
            InvalidArea         : IInvalidArea*'''
        return super(ITopologyGraph4, self).PostEx(InvalidArea)
    def get_HasPseudoNodes(self):
        '''Method ITopologyGraph2.get_HasPseudoNodes (from ITopologyGraph2)

           OUTPUT
            HasPseudoNodes      : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).get_HasPseudoNodes()
    def SetEmpty(self):
        '''Method ITopologyGraph.SetEmpty (from ITopologyGraph)'''
        return super(ITopologyGraph4, self).SetEmpty()
    def SetSelectionEmpty(self, whichType):
        '''Method ITopologyGraph.SetSelectionEmpty (from ITopologyGraph)

           INPUT
            whichType           : long'''
        return super(ITopologyGraph4, self).SetSelectionEmpty(whichType)
    def Build(self, Extent, preserveSelection):
        '''Method ITopologyGraph.Build (from ITopologyGraph)

           INPUTS
            Extent              : IEnvelope*
            preserveSelection   : VARIANT_BOOL'''
        return super(ITopologyGraph4, self).Build(Extent, preserveSelection)
    def get_Extent(self):
        '''Method ITopologyGraph.get_Extent (from ITopologyGraph)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph4, self).get_Extent()
    def get_BuildExtent(self):
        '''Method ITopologyGraph.get_BuildExtent (from ITopologyGraph)

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph4, self).get_BuildExtent()
    def HitTest(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTest (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).HitTest(whichElements, QueryPoint, searchRadius, hitPoint)
    def EnumHitTest(self, whichElements, QueryPoint, searchRadius):
        '''Method ITopologyGraph.EnumHitTest (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double

           OUTPUTS
            hitInfo             : IEnumTGHitInfo**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).EnumHitTest(whichElements, QueryPoint, searchRadius)
    def get_SelectionCount(self, whichElements):
        '''Method ITopologyGraph.get_SelectionCount (from ITopologyGraph)

           INPUT
            whichElements       : long

           OUTPUT
            Count               : long*'''
        return super(ITopologyGraph4, self).get_SelectionCount(whichElements)
    def Select(self, selectHow, Element):
        '''Method ITopologyGraph.Select (from ITopologyGraph)

           INPUTS
            selectHow           : esriTopologySelectionResultEnum
            Element             : ITopologyElement*

           OUTPUT
            SelectionChanged    : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).Select(selectHow, Element)
    def get_NodeSelection(self):
        '''Method ITopologyGraph.get_NodeSelection (from ITopologyGraph)

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph4, self).get_NodeSelection()
    def get_EdgeSelection(self):
        '''Method ITopologyGraph.get_EdgeSelection (from ITopologyGraph)

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph4, self).get_EdgeSelection()
    def get_SelectionExtent(self, whichElements, includeAdjacent):
        '''Method ITopologyGraph.get_SelectionExtent (from ITopologyGraph)

           INPUTS
            whichElements       : long
            includeAdjacent     : VARIANT_BOOL

           OUTPUT
            Extent              : IEnvelope**'''
        return super(ITopologyGraph4, self).get_SelectionExtent(whichElements, includeAdjacent)
    def TransformSelection(self, Direction, transformation, proportionalStretch):
        '''Method ITopologyGraph.TransformSelection (from ITopologyGraph)

           INPUTS
            Direction           : esriTransformDirection
            transformation      : ITransformation*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph4, self).TransformSelection(Direction, transformation, proportionalStretch)
    def Post(self):
        '''Method ITopologyGraph.Post (from ITopologyGraph)

           OUTPUT
            InvalidArea         : IEnvelope**'''
        return super(ITopologyGraph4, self).Post()
    def get_IsPosting(self):
        '''Method ITopologyGraph.get_IsPosting (from ITopologyGraph)

           OUTPUT
            posting             : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).get_IsPosting()
    def ReshapeEdgeGeometry(self, Edge, reshapeGeometry):
        '''Method ITopologyGraph.ReshapeEdgeGeometry (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            reshapeGeometry     : IPath*

           OUTPUT
            reshaped            : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).ReshapeEdgeGeometry(Edge, reshapeGeometry)
    def get_SelectionParents(self):
        '''Method ITopologyGraph.get_SelectionParents (from ITopologyGraph)

           OUTPUT
            enumParents         : IEnumTopologyParent**'''
        return super(ITopologyGraph4, self).get_SelectionParents()
    def SetParentSelected(self, FeatureClass, fID, selected):
        '''Method ITopologyGraph.SetParentSelected (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long
            selected            : VARIANT_BOOL

           OUTPUT
            edgeSelectionChanged: VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).SetParentSelected(FeatureClass, fID, selected)
    def GetParentGeometry(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentGeometry (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            theParentGeometry   : IGeometry**'''
        return super(ITopologyGraph4, self).GetParentGeometry(FeatureClass, fID)
    def GetSelectionFeedback(self, whichElements, anchor, proportionalStretch):
        '''Method ITopologyGraph.GetSelectionFeedback (from ITopologyGraph)

           INPUTS
            whichElements       : long
            anchor              : IPoint*
            proportionalStretch : VARIANT_BOOL

           OUTPUT
            selFeedback         : IDisplayFeedback**'''
        return super(ITopologyGraph4, self).GetSelectionFeedback(whichElements, anchor, proportionalStretch)
    def SplitMoveNode(self, nodeToSplit, moveTo, proportionalStretch):
        '''Method ITopologyGraph.SplitMoveNode (from ITopologyGraph)

           INPUTS
            nodeToSplit         : ITopologyNode*
            moveTo              : IPoint*
            proportionalStretch : VARIANT_BOOL'''
        return super(ITopologyGraph4, self).SplitMoveNode(nodeToSplit, moveTo, proportionalStretch)
    def GetSplitMoveNodeFeedback(self, nodeToSplit, proportionalStretch, outputSR):
        '''Method ITopologyGraph.GetSplitMoveNodeFeedback (from ITopologyGraph)

           INPUTS
            nodeToSplit         : ITopologyNode*
            proportionalStretch : VARIANT_BOOL
            outputSR            : ISpatialReference*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(ITopologyGraph4, self).GetSplitMoveNodeFeedback(nodeToSplit, proportionalStretch, outputSR)
    def SplitEdgeAtPoint(self, Edge, splitPoint, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtPoint (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            splitPoint          : IPoint*
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph4, self).SplitEdgeAtPoint(Edge, splitPoint, tolerance)
    def SplitEdgeAtDistance(self, Edge, Distance, asRatio, tolerance):
        '''Method ITopologyGraph.SplitEdgeAtDistance (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            Distance            : double
            asRatio             : VARIANT_BOOL
            tolerance           : double

           OUTPUTS
            from                : ITopologyEdge**
            mid                 : ITopologyNode**
            to                  : ITopologyEdge**'''
        return super(ITopologyGraph4, self).SplitEdgeAtDistance(Edge, Distance, asRatio, tolerance)
    def SetEdgeGeometry(self, Edge, Geometry):
        '''Method ITopologyGraph.SetEdgeGeometry (from ITopologyGraph)

           INPUTS
            Edge                : ITopologyEdge*
            Geometry            : IPath*'''
        return super(ITopologyGraph4, self).SetEdgeGeometry(Edge, Geometry)
    def DeletePseudoNodesFromSelection(self):
        '''Method ITopologyGraph.DeletePseudoNodesFromSelection (from ITopologyGraph)'''
        return super(ITopologyGraph4, self).DeletePseudoNodesFromSelection()
    def DeleteEdge(self, Edge):
        '''Method ITopologyGraph.DeleteEdge (from ITopologyGraph)

           INPUT
            Edge                : ITopologyEdge*'''
        return super(ITopologyGraph4, self).DeleteEdge(Edge)
    def SelectByGeometry(self, whichElements, selectHow, Geometry):
        '''Method ITopologyGraph.SelectByGeometry (from ITopologyGraph)

           INPUTS
            whichElements       : long
            selectHow           : esriTopologySelectionResultEnum
            Geometry            : IGeometry*'''
        return super(ITopologyGraph4, self).SelectByGeometry(whichElements, selectHow, Geometry)
    def GetParentNodes(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentNodes (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumNode            : IEnumTopologyNode**'''
        return super(ITopologyGraph4, self).GetParentNodes(FeatureClass, fID)
    def GetParentEdges(self, FeatureClass, fID):
        '''Method ITopologyGraph.GetParentEdges (from ITopologyGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            fID                 : long

           OUTPUT
            enumEdge            : IEnumTopologyEdge**'''
        return super(ITopologyGraph4, self).GetParentEdges(FeatureClass, fID)
    def get_Edges(self):
        '''Method ITopologyGraph.get_Edges (from ITopologyGraph)

           OUTPUT
            edgeEnumerator      : IEnumTopologyEdge**'''
        return super(ITopologyGraph4, self).get_Edges()
    def get_Nodes(self):
        '''Method ITopologyGraph.get_Nodes (from ITopologyGraph)

           OUTPUT
            nodeEnumerator      : IEnumTopologyNode**'''
        return super(ITopologyGraph4, self).get_Nodes()
    def get_HasElement(self, Element):
        '''Method ITopologyGraph.get_HasElement (from ITopologyGraph)

           INPUT
            Element             : ITopologyElement*

           OUTPUT
            HasElement          : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).get_HasElement(Element)
    def HitTestSelection(self, whichElements, QueryPoint, searchRadius, hitPoint):
        '''Method ITopologyGraph.HitTestSelection (from ITopologyGraph)

           INPUTS
            whichElements       : long
            QueryPoint          : IPoint*
            searchRadius        : double
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitElement          : ITopologyElement**
            hit                 : VARIANT_BOOL*'''
        return super(ITopologyGraph4, self).HitTestSelection(whichElements, QueryPoint, searchRadius, hitPoint)
    BuildExtent = property(get_BuildExtent, None, None)
    BuildPolygonExtent = property(get_BuildPolygonExtent, None, None)
    EdgeSelection = property(get_EdgeSelection, None, None)
    Edges = property(get_Edges, None, None)
    Extent = property(get_Extent, None, None)
    HasPseudoNodes = property(get_HasPseudoNodes, None, None)
    IsPosting = property(get_IsPosting, None, None)
    NodeSelection = property(get_NodeSelection, None, None)
    Nodes = property(get_Nodes, None, None)
    SelectionParents = property(get_SelectionParents, None, None)
    HasElement = IndexProperty(get_HasElement, None)
    SelectionCount = IndexProperty(get_SelectionCount, None)

class IEnumTopologyNode(_esriGeoDatabase.IEnumTopologyNode):
    _IID = uuid.UUID('0fcbd3ed-d810-40d3-92b1-1a7b451f0f4c')
    def Reset(self):
        '''Method IEnumTopologyNode.Reset'''
        return super(IEnumTopologyNode, self).Reset()
    def Next(self):
        '''Method IEnumTopologyNode.Next

           OUTPUT
            Node                : ITopologyNode**'''
        return super(IEnumTopologyNode, self).Next()
    def __iter__(self):
        try:
            super(IEnumTopologyNode, self).Reset()
            val = super(IEnumTopologyNode, self).Next()
            while val:
                yield val
                val = super(IEnumTopologyNode, self).Next()
        except:
            pass
    def get_Count(self):
        '''Method IEnumTopologyNode.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEnumTopologyNode, self).get_Count()
    Count = property(get_Count, None, None)

class ITopologyNode(_esriGeoDatabase.ITopologyNode):
    _IID = uuid.UUID('d04b7154-4989-11d5-9fe9-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ITopologyNode, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Edges(self, clockwise):
        '''Method ITopologyNode.get_Edges

           INPUT
            clockwise           : VARIANT_BOOL

           OUTPUT
            Edges               : IEnumNodeEdge**'''
        return super(ITopologyNode, self).get_Edges(clockwise)
    def get_Degree(self):
        '''Method ITopologyNode.get_Degree

           OUTPUT
            Degree              : long*'''
        return super(ITopologyNode, self).get_Degree()
    def get_IsDegreeKnown(self):
        '''Method ITopologyNode.get_IsDegreeKnown

           OUTPUT
            degreeKnown         : VARIANT_BOOL*'''
        return super(ITopologyNode, self).get_IsDegreeKnown()
    def get_Geometry(self):
        '''Method ITopologyElement.get_Geometry (from ITopologyElement)

           OUTPUT
            Geometry            : IGeometry**'''
        return super(ITopologyNode, self).get_Geometry()
    def get_IsSelected(self):
        '''Method ITopologyElement.get_IsSelected (from ITopologyElement)

           OUTPUT
            selected            : VARIANT_BOOL*'''
        return super(ITopologyNode, self).get_IsSelected()
    def QueryGeometry(self, Geometry):
        '''Method ITopologyElement.QueryGeometry (from ITopologyElement)

           INPUT
            Geometry            : IGeometry*'''
        return super(ITopologyNode, self).QueryGeometry(Geometry)
    def get_IsDeleted(self):
        '''Method ITopologyElement.get_IsDeleted (from ITopologyElement)

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(ITopologyNode, self).get_IsDeleted()
    def get_Parents(self):
        '''Method ITopologyElement.get_Parents (from ITopologyElement)

           OUTPUT
            enumParents         : IEnumTopologyParent**'''
        return super(ITopologyNode, self).get_Parents()
    def get_Visited(self):
        '''Method ITopologyElement.get_Visited (from ITopologyElement)

           OUTPUT
            isVisited           : VARIANT_BOOL*'''
        return super(ITopologyNode, self).get_Visited()
    def put_Visited(self, isVisited):
        '''Method ITopologyElement.put_Visited (from ITopologyElement)

           INPUT
            isVisited           : VARIANT_BOOL'''
        return super(ITopologyNode, self).put_Visited(isVisited)
    Degree = property(get_Degree, None, None)
    Geometry = property(get_Geometry, None, None)
    IsDegreeKnown = property(get_IsDegreeKnown, None, None)
    IsDeleted = property(get_IsDeleted, None, None)
    IsSelected = property(get_IsSelected, None, None)
    Parents = property(get_Parents, None, None)
    Visited = property(get_Visited, put_Visited, None)
    Edges = IndexProperty(get_Edges, None)

class ITopologyEdge(_esriGeoDatabase.ITopologyEdge):
    _IID = uuid.UUID('d04b7152-4989-11d5-9fe9-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ITopologyEdge, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FromNode(self):
        '''Method ITopologyEdge.get_FromNode

           OUTPUT
            FromNode            : ITopologyNode**'''
        return super(ITopologyEdge, self).get_FromNode()
    def get_ToNode(self):
        '''Method ITopologyEdge.get_ToNode

           OUTPUT
            ToNode              : ITopologyNode**'''
        return super(ITopologyEdge, self).get_ToNode()
    def get_LeftParents(self, boundedByEdge):
        '''Method ITopologyEdge.get_LeftParents

           INPUT
            boundedByEdge       : VARIANT_BOOL

           OUTPUT
            left                : IEnumTopologyParent**'''
        return super(ITopologyEdge, self).get_LeftParents(boundedByEdge)
    def get_RightParents(self, boundedByEdge):
        '''Method ITopologyEdge.get_RightParents

           INPUT
            boundedByEdge       : VARIANT_BOOL

           OUTPUT
            right               : IEnumTopologyParent**'''
        return super(ITopologyEdge, self).get_RightParents(boundedByEdge)
    def get_LeftVisited(self):
        '''Method ITopologyEdge.get_LeftVisited

           OUTPUT
            isLeftVisited       : VARIANT_BOOL*'''
        return super(ITopologyEdge, self).get_LeftVisited()
    def put_LeftVisited(self, isLeftVisited):
        '''Method ITopologyEdge.put_LeftVisited

           INPUT
            isLeftVisited       : VARIANT_BOOL'''
        return super(ITopologyEdge, self).put_LeftVisited(isLeftVisited)
    def get_RightVisited(self):
        '''Method ITopologyEdge.get_RightVisited

           OUTPUT
            isRightVisited      : VARIANT_BOOL*'''
        return super(ITopologyEdge, self).get_RightVisited()
    def put_RightVisited(self, isRightVisited):
        '''Method ITopologyEdge.put_RightVisited

           INPUT
            isRightVisited      : VARIANT_BOOL'''
        return super(ITopologyEdge, self).put_RightVisited(isRightVisited)
    def get_Geometry(self):
        '''Method ITopologyElement.get_Geometry (from ITopologyElement)

           OUTPUT
            Geometry            : IGeometry**'''
        return super(ITopologyEdge, self).get_Geometry()
    def get_IsSelected(self):
        '''Method ITopologyElement.get_IsSelected (from ITopologyElement)

           OUTPUT
            selected            : VARIANT_BOOL*'''
        return super(ITopologyEdge, self).get_IsSelected()
    def QueryGeometry(self, Geometry):
        '''Method ITopologyElement.QueryGeometry (from ITopologyElement)

           INPUT
            Geometry            : IGeometry*'''
        return super(ITopologyEdge, self).QueryGeometry(Geometry)
    def get_IsDeleted(self):
        '''Method ITopologyElement.get_IsDeleted (from ITopologyElement)

           OUTPUT
            deleted             : VARIANT_BOOL*'''
        return super(ITopologyEdge, self).get_IsDeleted()
    def get_Parents(self):
        '''Method ITopologyElement.get_Parents (from ITopologyElement)

           OUTPUT
            enumParents         : IEnumTopologyParent**'''
        return super(ITopologyEdge, self).get_Parents()
    def get_Visited(self):
        '''Method ITopologyElement.get_Visited (from ITopologyElement)

           OUTPUT
            isVisited           : VARIANT_BOOL*'''
        return super(ITopologyEdge, self).get_Visited()
    def put_Visited(self, isVisited):
        '''Method ITopologyElement.put_Visited (from ITopologyElement)

           INPUT
            isVisited           : VARIANT_BOOL'''
        return super(ITopologyEdge, self).put_Visited(isVisited)
    FromNode = property(get_FromNode, None, None)
    Geometry = property(get_Geometry, None, None)
    IsDeleted = property(get_IsDeleted, None, None)
    IsSelected = property(get_IsSelected, None, None)
    LeftVisited = property(get_LeftVisited, put_LeftVisited, None)
    Parents = property(get_Parents, None, None)
    RightVisited = property(get_RightVisited, put_RightVisited, None)
    ToNode = property(get_ToNode, None, None)
    Visited = property(get_Visited, put_Visited, None)
    LeftParents = IndexProperty(get_LeftParents, None)
    RightParents = IndexProperty(get_RightParents, None)

class IEnumNodeEdge(_esriGeoDatabase.IEnumNodeEdge):
    _IID = uuid.UUID('5cee64be-56dc-11d5-9fee-00c04f6bdd7f')
    def Reset(self):
        '''Method IEnumNodeEdge.Reset'''
        return super(IEnumNodeEdge, self).Reset()
    def Next(self):
        '''Method IEnumNodeEdge.Next

           OUTPUTS
            nextEdge            : ITopologyEdge**
            atFrom              : VARIANT_BOOL*'''
        return super(IEnumNodeEdge, self).Next()
    def __iter__(self):
        try:
            super(IEnumNodeEdge, self).Reset()
            val = super(IEnumNodeEdge, self).Next()
            while any(val):
                yield val
                val = super(IEnumNodeEdge, self).Next()
        except:
            pass
    def get_Count(self):
        '''Method IEnumNodeEdge.get_Count

           OUTPUT
            EdgeCount           : long*'''
        return super(IEnumNodeEdge, self).get_Count()
    def get_IsClockwise(self):
        '''Method IEnumNodeEdge.get_IsClockwise

           OUTPUT
            clockwise           : VARIANT_BOOL*'''
        return super(IEnumNodeEdge, self).get_IsClockwise()
    Count = property(get_Count, None, None)
    IsClockwise = property(get_IsClockwise, None, None)

class IEnumTopologyEdge(_esriGeoDatabase.IEnumTopologyEdge):
    _IID = uuid.UUID('9a876db0-4a30-11d5-9fe9-00c04f6bdd7f')
    def Reset(self):
        '''Method IEnumTopologyEdge.Reset'''
        return super(IEnumTopologyEdge, self).Reset()
    def Next(self):
        '''Method IEnumTopologyEdge.Next

           OUTPUT
            nextEdge            : ITopologyEdge**'''
        return super(IEnumTopologyEdge, self).Next()
    def __iter__(self):
        try:
            super(IEnumTopologyEdge, self).Reset()
            val = super(IEnumTopologyEdge, self).Next()
            while val:
                yield val
                val = super(IEnumTopologyEdge, self).Next()
        except:
            pass
    def get_Count(self):
        '''Method IEnumTopologyEdge.get_Count

           OUTPUT
            EdgeCount           : long*'''
        return super(IEnumTopologyEdge, self).get_Count()
    Count = property(get_Count, None, None)

class IGPValue(_esriGeoDatabase.IGPValue):
    _IID = uuid.UUID('92ee08b6-c757-4178-803c-67cd665ac801')
    def get_DataType(self):
        '''Method IGPValue.get_DataType

           OUTPUT
            DataType            : IGPDataType**'''
        return super(IGPValue, self).get_DataType()
    def IsEmpty(self):
        '''Method IGPValue.IsEmpty

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IGPValue, self).IsEmpty()
    def Empty(self):
        '''Method IGPValue.Empty'''
        return super(IGPValue, self).Empty()
    def GetAsText(self):
        '''Method IGPValue.GetAsText

           OUTPUT
            text                : BSTR*'''
        return super(IGPValue, self).GetAsText()
    def SetAsText(self, text):
        '''Method IGPValue.SetAsText

           INPUT
            text                : BSTR

           OUTPUT
            Message             : IGPMessage**'''
        return super(IGPValue, self).SetAsText(text)
    DataType = property(get_DataType, None, None)

class IGPDomain(_esriGeoDatabase.IGPDomain):
    _IID = uuid.UUID('0948f56f-9a99-4672-959e-3519f5676add')
    def MemberOf(self, Value):
        '''Method IGPDomain.MemberOf

           INPUT
            Value               : IGPValue*

           OUTPUT
            Message             : IGPMessage**'''
        return super(IGPDomain, self).MemberOf(Value)

class IGPDataType(_esriGeoDatabase.IGPDataType):
    _IID = uuid.UUID('172a93a9-afc1-432d-8f04-54b7309ba432')
    def get_Name(self):
        '''Method IGPDataType.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPDataType, self).get_Name()
    def get_DisplayName(self):
        '''Method IGPDataType.get_DisplayName

           OUTPUT
            Name                : BSTR*'''
        return super(IGPDataType, self).get_DisplayName()
    def get_ControlCLSID(self):
        '''Method IGPDataType.get_ControlCLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPDataType, self).get_ControlCLSID()
    def get_FullName(self):
        '''Method IGPDataType.get_FullName

           OUTPUT
            Name                : IName**'''
        return super(IGPDataType, self).get_FullName()
    def get_HelpFile(self):
        '''Method IGPDataType.get_HelpFile

           OUTPUT
            file                : BSTR*'''
        return super(IGPDataType, self).get_HelpFile()
    def get_HelpContext(self):
        '''Method IGPDataType.get_HelpContext

           OUTPUT
            context             : long*'''
        return super(IGPDataType, self).get_HelpContext()
    def get_MetadataFile(self):
        '''Method IGPDataType.get_MetadataFile

           OUTPUT
            file                : BSTR*'''
        return super(IGPDataType, self).get_MetadataFile()
    def CreateValue(self, text):
        '''Method IGPDataType.CreateValue

           INPUT
            text                : BSTR

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPDataType, self).CreateValue(text)
    def ValidateDataType(self, Type):
        '''Method IGPDataType.ValidateDataType

           INPUT
            Type                : IGPDataType*

           OUTPUT
            Message             : IGPMessage**'''
        return super(IGPDataType, self).ValidateDataType(Type)
    def ValidateValue(self, Value, Domain):
        '''Method IGPDataType.ValidateValue

           INPUTS
            Value               : IGPValue*
            Domain              : IGPDomain*

           OUTPUT
            Message             : IGPMessage**'''
        return super(IGPDataType, self).ValidateValue(Value, Domain)
    ControlCLSID = property(get_ControlCLSID, None, None)
    DisplayName = property(get_DisplayName, None, None)
    FullName = property(get_FullName, None, None)
    HelpContext = property(get_HelpContext, None, None)
    HelpFile = property(get_HelpFile, None, None)
    MetadataFile = property(get_MetadataFile, None, None)
    Name = property(get_Name, None, None)

class IEnumGPValue(_esriGeoDatabase.IEnumGPValue):
    _IID = uuid.UUID('06414895-d64d-46b0-856c-f7b7ece73d36')
    def Next(self):
        '''Method IEnumGPValue.Next

           OUTPUT
            Value               : IGPValue**'''
        return super(IEnumGPValue, self).Next()
    def __iter__(self):
        try:
            super(IEnumGPValue, self).Reset()
            val = super(IEnumGPValue, self).Next()
            while val:
                yield val
                val = super(IEnumGPValue, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGPValue.Reset'''
        return super(IEnumGPValue, self).Reset()

class IGPDataTypeFactory(_esriGeoDatabase.IGPDataTypeFactory):
    _IID = uuid.UUID('1aff0d88-e9b8-4571-8df1-217dcaf48a50')
    def get_CLSID(self):
        '''Method IGPDataTypeFactory.get_CLSID

           OUTPUT
            CLSID               : IUID**'''
        return super(IGPDataTypeFactory, self).get_CLSID()
    def GetDataType(self, Name):
        '''Method IGPDataTypeFactory.GetDataType

           INPUT
            Name                : BSTR

           OUTPUT
            Type                : IGPDataType**'''
        return super(IGPDataTypeFactory, self).GetDataType(Name)
    def GetDataTypeName(self, Name):
        '''Method IGPDataTypeFactory.GetDataTypeName

           INPUT
            Name                : BSTR

           OUTPUT
            datatypename        : IGPName**'''
        return super(IGPDataTypeFactory, self).GetDataTypeName(Name)
    def GetDataTypeNames(self):
        '''Method IGPDataTypeFactory.GetDataTypeNames

           OUTPUT
            datatypenames       : IEnumGPName**'''
        return super(IGPDataTypeFactory, self).GetDataTypeNames()
    CLSID = property(get_CLSID, None, None)

class IGPVariable(_esriGeoDatabase.IGPVariable):
    _IID = uuid.UUID('91290e84-b518-43e3-8e7a-9ee8e0cef5c9')

    def __init__(self, *args, **kw):
        super(IGPVariable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGPVariable.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGPVariable, self).get_Name()
    def put_Name(self, Name):
        '''Method IGPVariable.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGPVariable, self).put_Name(Name)
    def get_Value(self):
        '''Method IGPVariable.get_Value

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPVariable, self).get_Value()
    def putref_Value(self, Value):
        '''Method IGPVariable.putref_Value

           INPUT
            Value               : IGPValue*'''
        return super(IGPVariable, self).putref_Value(Value)
    def get_DataType(self):
        '''Method IGPVariable.get_DataType

           OUTPUT
            DataType            : IGPDataType**'''
        return super(IGPVariable, self).get_DataType()
    def putref_DataType(self, DataType):
        '''Method IGPVariable.putref_DataType

           INPUT
            DataType            : IGPDataType*'''
        return super(IGPVariable, self).putref_DataType(DataType)
    def get_Derived(self):
        '''Method IGPVariable.get_Derived

           OUTPUT
            Derived             : VARIANT_BOOL*'''
        return super(IGPVariable, self).get_Derived()
    def put_Derived(self, Derived):
        '''Method IGPVariable.put_Derived

           INPUT
            Derived             : VARIANT_BOOL'''
        return super(IGPVariable, self).put_Derived(Derived)
    DataType = property(get_DataType, putref_DataType, None)
    Derived = property(get_Derived, put_Derived, None)
    Name = property(get_Name, put_Name, None)
    Value = property(get_Value, putref_Value, None)

class IGPCodedValueDomain(_esriGeoDatabase.IGPCodedValueDomain):
    _IID = uuid.UUID('41dc44a0-d2eb-11d5-933f-0080c71a3226')
    def get_CodeCount(self):
        '''Method IGPCodedValueDomain.get_CodeCount

           OUTPUT
            values              : long*'''
        return super(IGPCodedValueDomain, self).get_CodeCount()
    def get_Name(self, Index):
        '''Method IGPCodedValueDomain.get_Name

           INPUT
            Index               : long

           OUTPUT
            Name                : BSTR*'''
        return super(IGPCodedValueDomain, self).get_Name(Index)
    def get_Value(self, Index):
        '''Method IGPCodedValueDomain.get_Value

           INPUT
            Index               : long

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPCodedValueDomain, self).get_Value(Index)
    def FindValue(self, Name):
        '''Method IGPCodedValueDomain.FindValue

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : IGPValue**'''
        return super(IGPCodedValueDomain, self).FindValue(Name)
    def AddCode(self, Value, Name):
        '''Method IGPCodedValueDomain.AddCode

           INPUTS
            Value               : IGPValue*
            Name                : BSTR'''
        return super(IGPCodedValueDomain, self).AddCode(Value, Name)
    def AddStringCode(self, Value, Name):
        '''Method IGPCodedValueDomain.AddStringCode

           INPUTS
            Value               : BSTR
            Name                : BSTR'''
        return super(IGPCodedValueDomain, self).AddStringCode(Value, Name)
    def DeleteCode(self, Value):
        '''Method IGPCodedValueDomain.DeleteCode

           INPUT
            Value               : IGPValue*'''
        return super(IGPCodedValueDomain, self).DeleteCode(Value)
    def Empty(self):
        '''Method IGPCodedValueDomain.Empty'''
        return super(IGPCodedValueDomain, self).Empty()
    def PopulateDomain(self, values, Names, GPDataType):
        '''Method IGPCodedValueDomain.PopulateDomain

           INPUTS
            values              : BSTR
            Names               : BSTR
            GPDataType          : IGPDataType*'''
        return super(IGPCodedValueDomain, self).PopulateDomain(values, Names, GPDataType)
    def FindName(self, Value):
        '''Method IGPCodedValueDomain.FindName

           INPUT
            Value               : IGPValue*

           OUTPUT
            Name                : BSTR*'''
        return super(IGPCodedValueDomain, self).FindName(Value)
    CodeCount = property(get_CodeCount, None, None)
    Name = IndexProperty(get_Name, None)
    Value = IndexProperty(get_Value, None)

class IGPChoiceList(_esriGeoDatabase.IGPChoiceList):
    _IID = uuid.UUID('1a4b7a52-e1d9-4ab8-a741-70467cbf9f5f')
    def MakeChoiceList(self, Value, Domain):
        '''Method IGPChoiceList.MakeChoiceList

           INPUTS
            Value               : IArray*
            Domain              : IGPDomain*

           OUTPUT
            codeValueDomain     : IGPCodedValueDomain**'''
        return super(IGPChoiceList, self).MakeChoiceList(Value, Domain)

class INetwork(_esriGeoDatabase.INetwork):
    _IID = uuid.UUID('19f99c80-a089-11d0-9cc9-00805f74d243')
    def get_Status(self):
        '''Method INetwork.get_Status

           OUTPUT
            networkStatus       : esriNetworkStatus*'''
        return super(INetwork, self).get_Status()
    def get_JunctionCount(self):
        '''Method INetwork.get_JunctionCount

           OUTPUT
            JunctionCount       : long*'''
        return super(INetwork, self).get_JunctionCount()
    def get_EdgeCount(self):
        '''Method INetwork.get_EdgeCount

           OUTPUT
            EdgeCount           : long*'''
        return super(INetwork, self).get_EdgeCount()
    def get_TurnCount(self):
        '''Method INetwork.get_TurnCount

           OUTPUT
            TurnCount           : long*'''
        return super(INetwork, self).get_TurnCount()
    def get_MaxDegree(self):
        '''Method INetwork.get_MaxDegree

           OUTPUT
            MaxDegree           : long*'''
        return super(INetwork, self).get_MaxDegree()
    def get_MaxTurn(self):
        '''Method INetwork.get_MaxTurn

           OUTPUT
            MaxTurn             : long*'''
        return super(INetwork, self).get_MaxTurn()
    def CreateForwardStar(self, honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight):
        '''Method INetwork.CreateForwardStar

           INPUTS
            honorState          : VARIANT_BOOL
            JunctionWeight      : INetWeight*
            FromToEdgeWeight    : INetWeight*
            ToFromEdgeWeight    : INetWeight*
            turnWeight          : INetWeight*

           OUTPUT
            ForwardStar         : IForwardStar**'''
        return super(INetwork, self).CreateForwardStar(honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight)
    def CreateNetBrowser(self, ElementType):
        '''Method INetwork.CreateNetBrowser

           INPUT
            ElementType         : esriElementType

           OUTPUT
            netBrowser          : IEnumNetEID**'''
        return super(INetwork, self).CreateNetBrowser(ElementType)
    EdgeCount = property(get_EdgeCount, None, None)
    JunctionCount = property(get_JunctionCount, None, None)
    MaxDegree = property(get_MaxDegree, None, None)
    MaxTurn = property(get_MaxTurn, None, None)
    Status = property(get_Status, None, None)
    TurnCount = property(get_TurnCount, None, None)

class IForwardStar(_esriGeoDatabase.IForwardStar):
    _IID = uuid.UUID('19f99c81-a089-11d0-9cc9-00805f74d243')
    def get_Network(self):
        '''Method IForwardStar.get_Network

           OUTPUT
            Network             : INetwork**'''
        return super(IForwardStar, self).get_Network()
    def FindAdjacent(self, fromEdgeEID, AtJunctionEID):
        '''Method IForwardStar.FindAdjacent

           INPUTS
            fromEdgeEID         : long
            AtJunctionEID       : long

           OUTPUT
            adjacentEdgesCount  : long*'''
        return super(IForwardStar, self).FindAdjacent(fromEdgeEID, AtJunctionEID)
    def QueryAdjacentJunction(self, Index):
        '''Method IForwardStar.QueryAdjacentJunction

           INPUT
            Index               : long

           OUTPUTS
            adjacentJunctionEID : long*
            adjacentJunctionWeightValue: VARIANT*'''
        return super(IForwardStar, self).QueryAdjacentJunction(Index)
    def QueryAdjacentEdge(self, Index):
        '''Method IForwardStar.QueryAdjacentEdge

           INPUT
            Index               : long

           OUTPUTS
            adjacentEdgeEID     : long*
            reverseOrientation  : VARIANT_BOOL*
            adjacentEdgeWeightValue: VARIANT*'''
        return super(IForwardStar, self).QueryAdjacentEdge(Index)
    def QueryAtTurn(self, Index):
        '''Method IForwardStar.QueryAtTurn

           INPUT
            Index               : long

           OUTPUTS
            adjacentTurnEID     : long*
            adjacentTurnWeightValue: VARIANT*'''
        return super(IForwardStar, self).QueryAtTurn(Index)
    def QueryAdjacentJunctions(self, Count):
        '''Method IForwardStar.QueryAdjacentJunctions

           INPUT
            Count               : long

           OUTPUTS
            adjacentJunctionEIDs: long*
            adjacentJunctionsWeightValue: VARIANT*'''
        return super(IForwardStar, self).QueryAdjacentJunctions(Count)
    def QueryAdjacentEdges(self, Count):
        '''Method IForwardStar.QueryAdjacentEdges

           INPUT
            Count               : long

           OUTPUTS
            adjacentEdgeEIDs    : long*
            reverseOrientation  : VARIANT_BOOL*
            adjacentEdgesWeightValue: VARIANT*'''
        return super(IForwardStar, self).QueryAdjacentEdges(Count)
    def QueryAtTurns(self, Count):
        '''Method IForwardStar.QueryAtTurns

           INPUT
            Count               : long

           OUTPUTS
            adjacentTurnEIDs    : long*
            adjacentTurnsWeightValue: VARIANT*'''
        return super(IForwardStar, self).QueryAtTurns(Count)
    Network = property(get_Network, None, None)

class IEnumNetEID(_esriGeoDatabase.IEnumNetEID):
    _IID = uuid.UUID('5db91db4-afb4-11d0-9ccd-00805f74d243')
    def get_Network(self):
        '''Method IEnumNetEID.get_Network

           OUTPUT
            Network             : INetwork**'''
        return super(IEnumNetEID, self).get_Network()
    def get_Count(self):
        '''Method IEnumNetEID.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEnumNetEID, self).get_Count()
    def get_ElementType(self):
        '''Method IEnumNetEID.get_ElementType

           OUTPUT
            ElementType         : esriElementType*'''
        return super(IEnumNetEID, self).get_ElementType()
    def Reset(self):
        '''Method IEnumNetEID.Reset'''
        return super(IEnumNetEID, self).Reset()
    def Next(self):
        '''Method IEnumNetEID.Next

           OUTPUT
            EID                 : long*'''
        return super(IEnumNetEID, self).Next()
    def __iter__(self):
        try:
            super(IEnumNetEID, self).Reset()
            val = super(IEnumNetEID, self).Next()
            while val:
                yield val
                val = super(IEnumNetEID, self).Next()
        except:
            pass
    def Last(self):
        '''Method IEnumNetEID.Last

           OUTPUT
            EID                 : long*'''
        return super(IEnumNetEID, self).Last()
    def Prev(self):
        '''Method IEnumNetEID.Prev

           OUTPUT
            EID                 : long*'''
        return super(IEnumNetEID, self).Prev()
    Count = property(get_Count, None, None)
    ElementType = property(get_ElementType, None, None)
    Network = property(get_Network, None, None)

class INetworkWorkspace(_esriGeoDatabase.INetworkWorkspace):
    _IID = uuid.UUID('4700c2e0-2e11-11d1-b24e-0000f878229e')
    def CreateNetwork(self, NetworkName, NetworkType, buildNormalizedTables):
        '''Method INetworkWorkspace.CreateNetwork

           INPUTS
            NetworkName         : BSTR
            NetworkType         : esriNetworkType
            buildNormalizedTables: VARIANT_BOOL

           OUTPUT
            Network             : INetwork**'''
        return super(INetworkWorkspace, self).CreateNetwork(NetworkName, NetworkType, buildNormalizedTables)
    def OpenNetwork(self, NetworkName, NetworkType, networkAccess):
        '''Method INetworkWorkspace.OpenNetwork

           INPUTS
            NetworkName         : BSTR
            NetworkType         : esriNetworkType
            networkAccess       : esriNetworkAccess

           OUTPUT
            Network             : INetwork**'''
        return super(INetworkWorkspace, self).OpenNetwork(NetworkName, NetworkType, networkAccess)
    def GetNetworkNames(self):
        '''Method INetworkWorkspace.GetNetworkNames

           OUTPUT
            networkNames        : IEnumBSTR**'''
        return super(INetworkWorkspace, self).GetNetworkNames()

class INetworkWorkspace2(_esriGeoDatabase.INetworkWorkspace2):
    _IID = uuid.UUID('33978fff-118d-11d4-a0e7-00c04f6bdf0e')
    def get_FormatNumberCount(self):
        '''Method INetworkWorkspace2.get_FormatNumberCount

           OUTPUT
            Count               : long*'''
        return super(INetworkWorkspace2, self).get_FormatNumberCount()
    def get_FormatNumber(self, Index):
        '''Method INetworkWorkspace2.get_FormatNumber

           INPUT
            Index               : long

           OUTPUT
            formatNum           : long*'''
        return super(INetworkWorkspace2, self).get_FormatNumber(Index)
    def GetMaxStorableClassID(self, formatNum):
        '''Method INetworkWorkspace2.GetMaxStorableClassID

           INPUT
            formatNum           : long

           OUTPUT
            maxClassID          : long*'''
        return super(INetworkWorkspace2, self).GetMaxStorableClassID(formatNum)
    def CreateNetworkEx(self, NetworkName, NetworkType, buildNormalizedTables, ConfigKeyword, formatNum):
        '''Method INetworkWorkspace2.CreateNetworkEx

           INPUTS
            NetworkName         : BSTR
            NetworkType         : esriNetworkType
            buildNormalizedTables: VARIANT_BOOL
            ConfigKeyword       : BSTR
            formatNum           : long

           OUTPUT
            Network             : INetwork**'''
        return super(INetworkWorkspace2, self).CreateNetworkEx(NetworkName, NetworkType, buildNormalizedTables, ConfigKeyword, formatNum)
    def CreateNetwork(self, NetworkName, NetworkType, buildNormalizedTables):
        '''Method INetworkWorkspace.CreateNetwork (from INetworkWorkspace)

           INPUTS
            NetworkName         : BSTR
            NetworkType         : esriNetworkType
            buildNormalizedTables: VARIANT_BOOL

           OUTPUT
            Network             : INetwork**'''
        return super(INetworkWorkspace2, self).CreateNetwork(NetworkName, NetworkType, buildNormalizedTables)
    def OpenNetwork(self, NetworkName, NetworkType, networkAccess):
        '''Method INetworkWorkspace.OpenNetwork (from INetworkWorkspace)

           INPUTS
            NetworkName         : BSTR
            NetworkType         : esriNetworkType
            networkAccess       : esriNetworkAccess

           OUTPUT
            Network             : INetwork**'''
        return super(INetworkWorkspace2, self).OpenNetwork(NetworkName, NetworkType, networkAccess)
    def GetNetworkNames(self):
        '''Method INetworkWorkspace.GetNetworkNames (from INetworkWorkspace)

           OUTPUT
            networkNames        : IEnumBSTR**'''
        return super(INetworkWorkspace2, self).GetNetworkNames()
    FormatNumberCount = property(get_FormatNumberCount, None, None)
    FormatNumber = IndexProperty(get_FormatNumber, None)

class INetElements(_esriGeoDatabase.INetElements):
    _IID = uuid.UUID('5db91db3-afb4-11d0-9ccd-00805f74d243')
    def IsValidElement(self, EID, ElementType):
        '''Method INetElements.IsValidElement

           INPUTS
            EID                 : long
            ElementType         : esriElementType

           OUTPUT
            validState          : VARIANT_BOOL*'''
        return super(INetElements, self).IsValidElement(EID, ElementType)
    def GetEID(self, UserClassID, UserID, UserSubID, ElementType):
        '''Method INetElements.GetEID

           INPUTS
            UserClassID         : long
            UserID              : long
            UserSubID           : long
            ElementType         : esriElementType

           OUTPUT
            EID                 : long*'''
        return super(INetElements, self).GetEID(UserClassID, UserID, UserSubID, ElementType)
    def GetEIDCount(self, UserClassID, UserID, ElementType):
        '''Method INetElements.GetEIDCount

           INPUTS
            UserClassID         : long
            UserID              : long
            ElementType         : esriElementType

           OUTPUT
            eIDCount            : long*'''
        return super(INetElements, self).GetEIDCount(UserClassID, UserID, ElementType)
    def GetEIDs(self, UserClassID, UserID, ElementType):
        '''Method INetElements.GetEIDs

           INPUTS
            UserClassID         : long
            UserID              : long
            ElementType         : esriElementType

           OUTPUT
            EIDs                : IEnumNetEID**'''
        return super(INetElements, self).GetEIDs(UserClassID, UserID, ElementType)
    def QueryIDs(self, EID, ElementType):
        '''Method INetElements.QueryIDs

           INPUTS
            EID                 : long
            ElementType         : esriElementType

           OUTPUTS
            UserClassID         : long*
            UserID              : long*
            UserSubID           : long*'''
        return super(INetElements, self).QueryIDs(EID, ElementType)

class IForwardStarGEN(_esriGeoDatabase.IForwardStarGEN):
    _IID = uuid.UUID('7ebfc159-e0da-4d21-9c3b-5d81f2e6ad9f')
    def get_Network(self):
        '''Method IForwardStarGEN.get_Network

           OUTPUT
            Network             : INetwork**'''
        return super(IForwardStarGEN, self).get_Network()
    def FindAdjacent(self, fromEdgeEID, AtJunctionEID):
        '''Method IForwardStarGEN.FindAdjacent

           INPUTS
            fromEdgeEID         : long
            AtJunctionEID       : long

           OUTPUT
            adjacentEdgesCount  : long*'''
        return super(IForwardStarGEN, self).FindAdjacent(fromEdgeEID, AtJunctionEID)
    def QueryAdjacentJunction(self, Index):
        '''Method IForwardStarGEN.QueryAdjacentJunction

           INPUT
            Index               : long

           OUTPUTS
            adjacentJunctionEID : long*
            adjacentJunctionWeightValue: VARIANT*'''
        return super(IForwardStarGEN, self).QueryAdjacentJunction(Index)
    def QueryAdjacentEdge(self, Index):
        '''Method IForwardStarGEN.QueryAdjacentEdge

           INPUT
            Index               : long

           OUTPUTS
            adjacentEdgeEID     : long*
            reverseOrientation  : VARIANT_BOOL*
            adjacentEdgeWeightValue: VARIANT*'''
        return super(IForwardStarGEN, self).QueryAdjacentEdge(Index)
    def QueryAtTurn(self, Index):
        '''Method IForwardStarGEN.QueryAtTurn

           INPUT
            Index               : long

           OUTPUTS
            adjacentTurnEID     : long*
            adjacentTurnWeightValue: VARIANT*'''
        return super(IForwardStarGEN, self).QueryAtTurn(Index)
    def QueryAdjacentJunctions(self):
        '''Method IForwardStarGEN.QueryAdjacentJunctions

           OUTPUTS
            adjacentJunctionEIDs: SAFEARRAY**
            adjacentJunctionsWeightValue: SAFEARRAY**'''
        return super(IForwardStarGEN, self).QueryAdjacentJunctions()
    def QueryAdjacentEdges(self):
        '''Method IForwardStarGEN.QueryAdjacentEdges

           OUTPUTS
            adjacentEdgeEIDs    : SAFEARRAY**
            reverseOrientation  : SAFEARRAY**
            adjacentEdgesWeightValue: SAFEARRAY**'''
        return super(IForwardStarGEN, self).QueryAdjacentEdges()
    Network = property(get_Network, None, None)

class IUtilityNetworkGEN(_esriGeoDatabase.IUtilityNetworkGEN):
    _IID = uuid.UUID('32012812-0631-4d1e-b92f-13cad1502edf')
    def get_ValidFlowDirection(self):
        '''Method IUtilityNetworkGEN.get_ValidFlowDirection

           OUTPUT
            pValidFlowDirection : VARIANT_BOOL*'''
        return super(IUtilityNetworkGEN, self).get_ValidFlowDirection()
    def GetFlowDirection(self, edgeEID):
        '''Method IUtilityNetworkGEN.GetFlowDirection

           INPUT
            edgeEID             : long

           OUTPUT
            flowDirection       : esriFlowDirection*'''
        return super(IUtilityNetworkGEN, self).GetFlowDirection(edgeEID)
    def SetFlowDirection(self, edgeEID, flowDirection):
        '''Method IUtilityNetworkGEN.SetFlowDirection

           INPUTS
            edgeEID             : long
            flowDirection       : esriFlowDirection'''
        return super(IUtilityNetworkGEN, self).SetFlowDirection(edgeEID, flowDirection)
    def EstablishFlowDirection(self, sourceEIDs, sinkEIDs):
        '''Method IUtilityNetworkGEN.EstablishFlowDirection

           INPUTS
            sourceEIDs          : SAFEARRAY**
            sinkEIDs            : SAFEARRAY**'''
        return super(IUtilityNetworkGEN, self).EstablishFlowDirection(sourceEIDs, sinkEIDs)
    def PartialEstablishFlowDirection(self, sourceEIDs, sinkEIDs):
        '''Method IUtilityNetworkGEN.PartialEstablishFlowDirection

           INPUTS
            sourceEIDs          : SAFEARRAY**
            sinkEIDs            : SAFEARRAY**'''
        return super(IUtilityNetworkGEN, self).PartialEstablishFlowDirection(sourceEIDs, sinkEIDs)
    def get_Status(self):
        '''Method INetwork.get_Status (from INetwork)

           OUTPUT
            networkStatus       : esriNetworkStatus*'''
        return super(IUtilityNetworkGEN, self).get_Status()
    def get_JunctionCount(self):
        '''Method INetwork.get_JunctionCount (from INetwork)

           OUTPUT
            JunctionCount       : long*'''
        return super(IUtilityNetworkGEN, self).get_JunctionCount()
    def get_EdgeCount(self):
        '''Method INetwork.get_EdgeCount (from INetwork)

           OUTPUT
            EdgeCount           : long*'''
        return super(IUtilityNetworkGEN, self).get_EdgeCount()
    def get_TurnCount(self):
        '''Method INetwork.get_TurnCount (from INetwork)

           OUTPUT
            TurnCount           : long*'''
        return super(IUtilityNetworkGEN, self).get_TurnCount()
    def get_MaxDegree(self):
        '''Method INetwork.get_MaxDegree (from INetwork)

           OUTPUT
            MaxDegree           : long*'''
        return super(IUtilityNetworkGEN, self).get_MaxDegree()
    def get_MaxTurn(self):
        '''Method INetwork.get_MaxTurn (from INetwork)

           OUTPUT
            MaxTurn             : long*'''
        return super(IUtilityNetworkGEN, self).get_MaxTurn()
    def CreateForwardStar(self, honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight):
        '''Method INetwork.CreateForwardStar (from INetwork)

           INPUTS
            honorState          : VARIANT_BOOL
            JunctionWeight      : INetWeight*
            FromToEdgeWeight    : INetWeight*
            ToFromEdgeWeight    : INetWeight*
            turnWeight          : INetWeight*

           OUTPUT
            ForwardStar         : IForwardStar**'''
        return super(IUtilityNetworkGEN, self).CreateForwardStar(honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight)
    def CreateNetBrowser(self, ElementType):
        '''Method INetwork.CreateNetBrowser (from INetwork)

           INPUT
            ElementType         : esriElementType

           OUTPUT
            netBrowser          : IEnumNetEID**'''
        return super(IUtilityNetworkGEN, self).CreateNetBrowser(ElementType)
    EdgeCount = property(get_EdgeCount, None, None)
    JunctionCount = property(get_JunctionCount, None, None)
    MaxDegree = property(get_MaxDegree, None, None)
    MaxTurn = property(get_MaxTurn, None, None)
    Status = property(get_Status, None, None)
    TurnCount = property(get_TurnCount, None, None)
    ValidFlowDirection = property(get_ValidFlowDirection, None, None)

class IEnumNetEIDBuilderGEN(_esriGeoDatabase.IEnumNetEIDBuilderGEN):
    _IID = uuid.UUID('17582ddf-c06d-4c81-b32a-f23b74b1546e')

    def __init__(self, *args, **kw):
        super(IEnumNetEIDBuilderGEN, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Network(self, _arg1):
        '''Method IEnumNetEIDBuilderGEN.putref_Network

           INPUT
            _arg1               : INetwork*'''
        return super(IEnumNetEIDBuilderGEN, self).putref_Network(_arg1)
    def Add(self, EID):
        '''Method IEnumNetEIDBuilderGEN.Add

           INPUT
            EID                 : long'''
        return super(IEnumNetEIDBuilderGEN, self).Add(EID)
    def put_ElementType(self, _arg1):
        '''Method IEnumNetEIDBuilderGEN.put_ElementType

           INPUT
            _arg1               : esriElementType'''
        return super(IEnumNetEIDBuilderGEN, self).put_ElementType(_arg1)
    def put_EIDs(self, _arg1):
        '''Method IEnumNetEIDBuilderGEN.put_EIDs

           INPUT
            _arg1               : SAFEARRAY**'''
        return super(IEnumNetEIDBuilderGEN, self).put_EIDs(_arg1)
    EIDs = property(None, put_EIDs, None)
    ElementType = property(None, put_ElementType, None)
    Network = property(None, putref_Network, None)

class IEnumNetEIDBuilder(_esriGeoDatabase.IEnumNetEIDBuilder):
    _IID = uuid.UUID('697ada1e-a05c-4ffb-bd41-eb47b1773310')

    def __init__(self, *args, **kw):
        super(IEnumNetEIDBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Network(self, _arg1):
        '''Method IEnumNetEIDBuilder.putref_Network

           INPUT
            _arg1               : INetwork*'''
        return super(IEnumNetEIDBuilder, self).putref_Network(_arg1)
    def Add(self, EID):
        '''Method IEnumNetEIDBuilder.Add

           INPUT
            EID                 : long'''
        return super(IEnumNetEIDBuilder, self).Add(EID)
    def put_ElementType(self, _arg1):
        '''Method IEnumNetEIDBuilder.put_ElementType

           INPUT
            _arg1               : esriElementType'''
        return super(IEnumNetEIDBuilder, self).put_ElementType(_arg1)
    def put_EIDs(self, Count, _arg2):
        '''Method IEnumNetEIDBuilder.put_EIDs

           INPUTS
            Count               : long
            _arg2               : long*'''
        return super(IEnumNetEIDBuilder, self).put_EIDs(Count, _arg2)
    EIDs = property(None, put_EIDs, None)
    ElementType = property(None, put_ElementType, None)
    Network = property(None, putref_Network, None)

class IUtilityNetwork(_esriGeoDatabase.IUtilityNetwork):
    _IID = uuid.UUID('19f99c84-a089-11d0-9cc9-00805f74d243')
    def get_ValidFlowDirection(self):
        '''Method IUtilityNetwork.get_ValidFlowDirection

           OUTPUT
            ValidFlowDirection  : VARIANT_BOOL*'''
        return super(IUtilityNetwork, self).get_ValidFlowDirection()
    def GetFlowDirection(self, edgeEID):
        '''Method IUtilityNetwork.GetFlowDirection

           INPUT
            edgeEID             : long

           OUTPUT
            flowDirection       : esriFlowDirection*'''
        return super(IUtilityNetwork, self).GetFlowDirection(edgeEID)
    def SetFlowDirection(self, edgeEID, flowDirection):
        '''Method IUtilityNetwork.SetFlowDirection

           INPUTS
            edgeEID             : long
            flowDirection       : esriFlowDirection'''
        return super(IUtilityNetwork, self).SetFlowDirection(edgeEID, flowDirection)
    def EstablishFlowDirection(self, SourceCount, sourceEIDs, sinkCount, sinkEIDs):
        '''Method IUtilityNetwork.EstablishFlowDirection

           INPUTS
            SourceCount         : long
            sourceEIDs          : long*
            sinkCount           : long
            sinkEIDs            : long*'''
        return super(IUtilityNetwork, self).EstablishFlowDirection(SourceCount, sourceEIDs, sinkCount, sinkEIDs)
    def get_Status(self):
        '''Method INetwork.get_Status (from INetwork)

           OUTPUT
            networkStatus       : esriNetworkStatus*'''
        return super(IUtilityNetwork, self).get_Status()
    def get_JunctionCount(self):
        '''Method INetwork.get_JunctionCount (from INetwork)

           OUTPUT
            JunctionCount       : long*'''
        return super(IUtilityNetwork, self).get_JunctionCount()
    def get_EdgeCount(self):
        '''Method INetwork.get_EdgeCount (from INetwork)

           OUTPUT
            EdgeCount           : long*'''
        return super(IUtilityNetwork, self).get_EdgeCount()
    def get_TurnCount(self):
        '''Method INetwork.get_TurnCount (from INetwork)

           OUTPUT
            TurnCount           : long*'''
        return super(IUtilityNetwork, self).get_TurnCount()
    def get_MaxDegree(self):
        '''Method INetwork.get_MaxDegree (from INetwork)

           OUTPUT
            MaxDegree           : long*'''
        return super(IUtilityNetwork, self).get_MaxDegree()
    def get_MaxTurn(self):
        '''Method INetwork.get_MaxTurn (from INetwork)

           OUTPUT
            MaxTurn             : long*'''
        return super(IUtilityNetwork, self).get_MaxTurn()
    def CreateForwardStar(self, honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight):
        '''Method INetwork.CreateForwardStar (from INetwork)

           INPUTS
            honorState          : VARIANT_BOOL
            JunctionWeight      : INetWeight*
            FromToEdgeWeight    : INetWeight*
            ToFromEdgeWeight    : INetWeight*
            turnWeight          : INetWeight*

           OUTPUT
            ForwardStar         : IForwardStar**'''
        return super(IUtilityNetwork, self).CreateForwardStar(honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight)
    def CreateNetBrowser(self, ElementType):
        '''Method INetwork.CreateNetBrowser (from INetwork)

           INPUT
            ElementType         : esriElementType

           OUTPUT
            netBrowser          : IEnumNetEID**'''
        return super(IUtilityNetwork, self).CreateNetBrowser(ElementType)
    EdgeCount = property(get_EdgeCount, None, None)
    JunctionCount = property(get_JunctionCount, None, None)
    MaxDegree = property(get_MaxDegree, None, None)
    MaxTurn = property(get_MaxTurn, None, None)
    Status = property(get_Status, None, None)
    TurnCount = property(get_TurnCount, None, None)
    ValidFlowDirection = property(get_ValidFlowDirection, None, None)

class IUtilityNetwork2(_esriGeoDatabase.IUtilityNetwork2):
    _IID = uuid.UUID('fa8bc670-d572-11d5-a134-00508ba0c977')
    def PartialEstablishFlowDirection(self, SourceCount, sourceEIDs, sinkCount, sinkEIDs):
        '''Method IUtilityNetwork2.PartialEstablishFlowDirection

           INPUTS
            SourceCount         : long
            sourceEIDs          : long*
            sinkCount           : long
            sinkEIDs            : long*'''
        return super(IUtilityNetwork2, self).PartialEstablishFlowDirection(SourceCount, sourceEIDs, sinkCount, sinkEIDs)
    def get_ValidFlowDirection(self):
        '''Method IUtilityNetwork.get_ValidFlowDirection (from IUtilityNetwork)

           OUTPUT
            ValidFlowDirection  : VARIANT_BOOL*'''
        return super(IUtilityNetwork2, self).get_ValidFlowDirection()
    def GetFlowDirection(self, edgeEID):
        '''Method IUtilityNetwork.GetFlowDirection (from IUtilityNetwork)

           INPUT
            edgeEID             : long

           OUTPUT
            flowDirection       : esriFlowDirection*'''
        return super(IUtilityNetwork2, self).GetFlowDirection(edgeEID)
    def SetFlowDirection(self, edgeEID, flowDirection):
        '''Method IUtilityNetwork.SetFlowDirection (from IUtilityNetwork)

           INPUTS
            edgeEID             : long
            flowDirection       : esriFlowDirection'''
        return super(IUtilityNetwork2, self).SetFlowDirection(edgeEID, flowDirection)
    def EstablishFlowDirection(self, SourceCount, sourceEIDs, sinkCount, sinkEIDs):
        '''Method IUtilityNetwork.EstablishFlowDirection (from IUtilityNetwork)

           INPUTS
            SourceCount         : long
            sourceEIDs          : long*
            sinkCount           : long
            sinkEIDs            : long*'''
        return super(IUtilityNetwork2, self).EstablishFlowDirection(SourceCount, sourceEIDs, sinkCount, sinkEIDs)
    def get_Status(self):
        '''Method INetwork.get_Status (from INetwork)

           OUTPUT
            networkStatus       : esriNetworkStatus*'''
        return super(IUtilityNetwork2, self).get_Status()
    def get_JunctionCount(self):
        '''Method INetwork.get_JunctionCount (from INetwork)

           OUTPUT
            JunctionCount       : long*'''
        return super(IUtilityNetwork2, self).get_JunctionCount()
    def get_EdgeCount(self):
        '''Method INetwork.get_EdgeCount (from INetwork)

           OUTPUT
            EdgeCount           : long*'''
        return super(IUtilityNetwork2, self).get_EdgeCount()
    def get_TurnCount(self):
        '''Method INetwork.get_TurnCount (from INetwork)

           OUTPUT
            TurnCount           : long*'''
        return super(IUtilityNetwork2, self).get_TurnCount()
    def get_MaxDegree(self):
        '''Method INetwork.get_MaxDegree (from INetwork)

           OUTPUT
            MaxDegree           : long*'''
        return super(IUtilityNetwork2, self).get_MaxDegree()
    def get_MaxTurn(self):
        '''Method INetwork.get_MaxTurn (from INetwork)

           OUTPUT
            MaxTurn             : long*'''
        return super(IUtilityNetwork2, self).get_MaxTurn()
    def CreateForwardStar(self, honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight):
        '''Method INetwork.CreateForwardStar (from INetwork)

           INPUTS
            honorState          : VARIANT_BOOL
            JunctionWeight      : INetWeight*
            FromToEdgeWeight    : INetWeight*
            ToFromEdgeWeight    : INetWeight*
            turnWeight          : INetWeight*

           OUTPUT
            ForwardStar         : IForwardStar**'''
        return super(IUtilityNetwork2, self).CreateForwardStar(honorState, JunctionWeight, FromToEdgeWeight, ToFromEdgeWeight, turnWeight)
    def CreateNetBrowser(self, ElementType):
        '''Method INetwork.CreateNetBrowser (from INetwork)

           INPUT
            ElementType         : esriElementType

           OUTPUT
            netBrowser          : IEnumNetEID**'''
        return super(IUtilityNetwork2, self).CreateNetBrowser(ElementType)
    EdgeCount = property(get_EdgeCount, None, None)
    JunctionCount = property(get_JunctionCount, None, None)
    MaxDegree = property(get_MaxDegree, None, None)
    MaxTurn = property(get_MaxTurn, None, None)
    Status = property(get_Status, None, None)
    TurnCount = property(get_TurnCount, None, None)
    ValidFlowDirection = property(get_ValidFlowDirection, None, None)

class IGraph(_esriGeoDatabase.IGraph):
    _IID = uuid.UUID('436a48bc-56f6-11d1-ae55-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IGraph, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Add(self, NewFeature):
        '''Method IGraph.Add

           INPUT
            NewFeature          : IFeature*'''
        return super(IGraph, self).Add(NewFeature)
    def AddFeatureClass(self, FeatureClass, EnabledFieldName, Role, AncillaryRoleFieldName):
        '''Method IGraph.AddFeatureClass

           INPUTS
            FeatureClass        : IFeatureClass*
            EnabledFieldName    : BSTR
            Role                : esriNetworkClassAncillaryRole
            AncillaryRoleFieldName: BSTR'''
        return super(IGraph, self).AddFeatureClass(FeatureClass, EnabledFieldName, Role, AncillaryRoleFieldName)
    def DeleteSet(self, featuresToDelete):
        '''Method IGraph.DeleteSet

           INPUT
            featuresToDelete    : ISet*'''
        return super(IGraph, self).DeleteSet(featuresToDelete)
    def get_FeatureDataset(self):
        '''Method IGraph.get_FeatureDataset

           OUTPUT
            FeatureDataset      : IFeatureDataset**'''
        return super(IGraph, self).get_FeatureDataset()
    def GetDisplayFeedback(self, Feature, features, point):
        '''Method IGraph.GetDisplayFeedback

           INPUTS
            Feature             : IFeature*
            features            : ISet*
            point               : IPoint*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(IGraph, self).GetDisplayFeedback(Feature, features, point)
    def Init(self, Dataset, graphID, graphName, buildNormalizedTables, createGraph):
        '''Method IGraph.Init

           INPUTS
            Dataset             : IFeatureDataset*
            graphID             : long
            graphName           : BSTR
            buildNormalizedTables: VARIANT_BOOL
            createGraph         : VARIANT_BOOL'''
        return super(IGraph, self).Init(Dataset, graphID, graphName, buildNormalizedTables, createGraph)
    def Merge(self, mergingFeatures):
        '''Method IGraph.Merge

           INPUT
            mergingFeatures     : IEnumFeature*

           OUTPUT
            newFeatures         : IEnumFeature**'''
        return super(IGraph, self).Merge(mergingFeatures)
    def Split(self, splittingEdge, point):
        '''Method IGraph.Split

           INPUTS
            splittingEdge       : IEdgeFeature*
            point               : IGeometry*

           OUTPUT
            newFeatures         : ISet**'''
        return super(IGraph, self).Split(splittingEdge, point)
    def TransformSet(self, features, Type, tranformation):
        '''Method IGraph.TransformSet

           INPUTS
            features            : ISet*
            Type                : esriTransformType
            tranformation       : IAffineTransformation2D*'''
        return super(IGraph, self).TransformSet(features, Type, tranformation)
    def get_VertexBasedStretching(self):
        '''Method IGraph.get_VertexBasedStretching

           OUTPUT
            vertexBased         : VARIANT_BOOL*'''
        return super(IGraph, self).get_VertexBasedStretching()
    def put_VertexBasedStretching(self, vertexBased):
        '''Method IGraph.put_VertexBasedStretching

           INPUT
            vertexBased         : VARIANT_BOOL'''
        return super(IGraph, self).put_VertexBasedStretching(vertexBased)
    FeatureDataset = property(get_FeatureDataset, None, None)
    VertexBasedStretching = property(get_VertexBasedStretching, put_VertexBasedStretching, None)

class IEdgeFeature(_esriGeoDatabase.IEdgeFeature):
    _IID = uuid.UUID('84fbb0c8-ea84-11d1-aecc-0000f80372b4')
    def DisconnectAtEndpoint(self, EID, fromEID, toEID, disconnectFrom, disconnectTo):
        '''Method IEdgeFeature.DisconnectAtEndpoint

           INPUTS
            EID                 : long
            fromEID             : long
            toEID               : long
            disconnectFrom      : VARIANT_BOOL
            disconnectTo        : VARIANT_BOOL'''
        return super(IEdgeFeature, self).DisconnectAtEndpoint(EID, fromEID, toEID, disconnectFrom, disconnectTo)
    def DisconnectAtJunction(self, EID, junctionEID):
        '''Method IEdgeFeature.DisconnectAtJunction

           INPUTS
            EID                 : long
            junctionEID         : long'''
        return super(IEdgeFeature, self).DisconnectAtJunction(EID, junctionEID)
    def get_GeometryForEdgeElement(self, subID):
        '''Method IEdgeFeature.get_GeometryForEdgeElement

           INPUT
            subID               : long

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IEdgeFeature, self).get_GeometryForEdgeElement(subID)
    def get_FromJunctionEID(self):
        '''Method IEdgeFeature.get_FromJunctionEID

           OUTPUT
            EID                 : long*'''
        return super(IEdgeFeature, self).get_FromJunctionEID()
    def get_FromJunctionFeature(self):
        '''Method IEdgeFeature.get_FromJunctionFeature

           OUTPUT
            Junction            : IJunctionFeature**'''
        return super(IEdgeFeature, self).get_FromJunctionFeature()
    def get_ToJunctionEID(self):
        '''Method IEdgeFeature.get_ToJunctionEID

           OUTPUT
            EID                 : long*'''
        return super(IEdgeFeature, self).get_ToJunctionEID()
    def get_ToJunctionFeature(self):
        '''Method IEdgeFeature.get_ToJunctionFeature

           OUTPUT
            Junction            : IJunctionFeature**'''
        return super(IEdgeFeature, self).get_ToJunctionFeature()
    def get_FromToJunctionEIDs(self):
        '''Method IEdgeFeature.get_FromToJunctionEIDs

           OUTPUT
            EIDs                : IEnumNetEID**'''
        return super(IEdgeFeature, self).get_FromToJunctionEIDs()
    def Update(self, callingFeature, oldJunctionLocation, newJunctionLocation, rigidEdges, group):
        '''Method IEdgeFeature.Update

           INPUTS
            callingFeature      : INetworkFeature*
            oldJunctionLocation : IPoint*
            newJunctionLocation : IPoint*
            rigidEdges          : ISet*
            group               : ITransformGroup*'''
        return super(IEdgeFeature, self).Update(callingFeature, oldJunctionLocation, newJunctionLocation, rigidEdges, group)
    FromJunctionEID = property(get_FromJunctionEID, None, None)
    FromJunctionFeature = property(get_FromJunctionFeature, None, None)
    FromToJunctionEIDs = property(get_FromToJunctionEIDs, None, None)
    ToJunctionEID = property(get_ToJunctionEID, None, None)
    ToJunctionFeature = property(get_ToJunctionFeature, None, None)
    GeometryForEdgeElement = IndexProperty(get_GeometryForEdgeElement, None)

class ISimpleJunctionFeature(_esriGeoDatabase.ISimpleJunctionFeature):
    _IID = uuid.UUID('f9b04a4a-557a-11d1-ae55-0000f80372b4')
    def get_EdgeFeatureCount(self):
        '''Method ISimpleJunctionFeature.get_EdgeFeatureCount

           OUTPUT
            numFeatures         : long*'''
        return super(ISimpleJunctionFeature, self).get_EdgeFeatureCount()
    def get_EdgeFeature(self, Index):
        '''Method ISimpleJunctionFeature.get_EdgeFeature

           INPUT
            Index               : long

           OUTPUT
            EdgeFeature         : IEdgeFeature**'''
        return super(ISimpleJunctionFeature, self).get_EdgeFeature(Index)
    def get_EID(self):
        '''Method ISimpleJunctionFeature.get_EID

           OUTPUT
            ElementID           : long*'''
        return super(ISimpleJunctionFeature, self).get_EID()
    EID = property(get_EID, None, None)
    EdgeFeatureCount = property(get_EdgeFeatureCount, None, None)
    EdgeFeature = IndexProperty(get_EdgeFeature, None)

class IComplexJunctionFeature(_esriGeoDatabase.IComplexJunctionFeature):
    _IID = uuid.UUID('8ae6975e-ea99-11d1-aecc-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IComplexJunctionFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GeometryForEdgeElement(self, subID):
        '''Method IComplexJunctionFeature.get_GeometryForEdgeElement

           INPUT
            subID               : long

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IComplexJunctionFeature, self).get_GeometryForEdgeElement(subID)
    def get_EdgeFeatureCount(self, connectionPointIndex):
        '''Method IComplexJunctionFeature.get_EdgeFeatureCount

           INPUT
            connectionPointIndex: long

           OUTPUT
            numFeatures         : long*'''
        return super(IComplexJunctionFeature, self).get_EdgeFeatureCount(connectionPointIndex)
    def get_EdgeFeature(self, connectionPointIndex, Index):
        '''Method IComplexJunctionFeature.get_EdgeFeature

           INPUTS
            connectionPointIndex: long
            Index               : long

           OUTPUT
            EdgeFeature         : IEdgeFeature**'''
        return super(IComplexJunctionFeature, self).get_EdgeFeature(connectionPointIndex, Index)
    def get_TopologicalConfiguration(self):
        '''Method IComplexJunctionFeature.get_TopologicalConfiguration

           OUTPUT
            configuration       : esriTopoConfiguration*'''
        return super(IComplexJunctionFeature, self).get_TopologicalConfiguration()
    def put_TopologicalConfiguration(self, configuration):
        '''Method IComplexJunctionFeature.put_TopologicalConfiguration

           INPUT
            configuration       : esriTopoConfiguration'''
        return super(IComplexJunctionFeature, self).put_TopologicalConfiguration(configuration)
    def put_RotationAngle(self, _arg1):
        '''Method IComplexJunctionFeature.put_RotationAngle

           INPUT
            _arg1               : double'''
        return super(IComplexJunctionFeature, self).put_RotationAngle(_arg1)
    def get_FieldToEIDMapping(self, FieldIndex):
        '''Method IComplexJunctionFeature.get_FieldToEIDMapping

           INPUT
            FieldIndex          : long

           OUTPUT
            EID                 : long*'''
        return super(IComplexJunctionFeature, self).get_FieldToEIDMapping(FieldIndex)
    def get_JunctionElementCount(self):
        '''Method IComplexJunctionFeature.get_JunctionElementCount

           OUTPUT
            numJunctions        : long*'''
        return super(IComplexJunctionFeature, self).get_JunctionElementCount()
    def put_JunctionElementCount(self, numJunctions):
        '''Method IComplexJunctionFeature.put_JunctionElementCount

           INPUT
            numJunctions        : long'''
        return super(IComplexJunctionFeature, self).put_JunctionElementCount(numJunctions)
    def FindJunctionEID(self, point):
        '''Method IComplexJunctionFeature.FindJunctionEID

           INPUT
            point               : IPoint*

           OUTPUT
            junctionEID         : long*'''
        return super(IComplexJunctionFeature, self).FindJunctionEID(point)
    JunctionElementCount = property(get_JunctionElementCount, put_JunctionElementCount, None)
    RotationAngle = property(None, put_RotationAngle, None)
    TopologicalConfiguration = property(get_TopologicalConfiguration, put_TopologicalConfiguration, None)
    EdgeFeatureCount = IndexProperty(get_EdgeFeatureCount, None)
    FieldToEIDMapping = IndexProperty(get_FieldToEIDMapping, None)
    GeometryForEdgeElement = IndexProperty(get_GeometryForEdgeElement, None)

class IEnumEdgeFeature(_esriGeoDatabase.IEnumEdgeFeature):
    _IID = uuid.UUID('655e3f50-55fc-11d1-ae55-0000f80372b4')
    def Next(self):
        '''Method IEnumEdgeFeature.Next

           OUTPUT
            Edge                : IEdgeFeature**'''
        return super(IEnumEdgeFeature, self).Next()
    def __iter__(self):
        try:
            super(IEnumEdgeFeature, self).Reset()
            val = super(IEnumEdgeFeature, self).Next()
            while val:
                yield val
                val = super(IEnumEdgeFeature, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumEdgeFeature.Reset'''
        return super(IEnumEdgeFeature, self).Reset()

class IJunctionFeature(_esriGeoDatabase.IJunctionFeature):
    _IID = uuid.UUID('2c411bae-ea1a-11d1-aa91-00c04fa37b81')

    def __init__(self, *args, **kw):
        super(IJunctionFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GeometryForJunctionElement(self, subID):
        '''Method IJunctionFeature.get_GeometryForJunctionElement

           INPUT
            subID               : long

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IJunctionFeature, self).get_GeometryForJunctionElement(subID)
    def get_OriginalGeometryForJunctionElement(self, subID):
        '''Method IJunctionFeature.get_OriginalGeometryForJunctionElement

           INPUT
            subID               : long

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IJunctionFeature, self).get_OriginalGeometryForJunctionElement(subID)
    def Update(self, callingFeature, transformation, rigidEdges, group):
        '''Method IJunctionFeature.Update

           INPUTS
            callingFeature      : INetworkFeature*
            transformation      : IAffineTransformation2D*
            rigidEdges          : ISet*
            group               : ITransformGroup*'''
        return super(IJunctionFeature, self).Update(callingFeature, transformation, rigidEdges, group)
    def get_NetworkAncillaryRole(self):
        '''Method IJunctionFeature.get_NetworkAncillaryRole

           OUTPUT
            Role                : esriNetworkFeatureAncillaryRole*'''
        return super(IJunctionFeature, self).get_NetworkAncillaryRole()
    def put_NetworkAncillaryRole(self, Role):
        '''Method IJunctionFeature.put_NetworkAncillaryRole

           INPUT
            Role                : esriNetworkFeatureAncillaryRole'''
        return super(IJunctionFeature, self).put_NetworkAncillaryRole(Role)
    NetworkAncillaryRole = property(get_NetworkAncillaryRole, put_NetworkAncillaryRole, None)
    GeometryForJunctionElement = IndexProperty(get_GeometryForJunctionElement, None)
    OriginalGeometryForJunctionElement = IndexProperty(get_OriginalGeometryForJunctionElement, None)

class IComplexEdgeFeature(_esriGeoDatabase.IComplexEdgeFeature):
    _IID = uuid.UUID('66f783ae-ea1b-11d1-aa91-00c04fa37b81')
    def get_JunctionFeatureCount(self):
        '''Method IComplexEdgeFeature.get_JunctionFeatureCount

           OUTPUT
            numFeatures         : long*'''
        return super(IComplexEdgeFeature, self).get_JunctionFeatureCount()
    def get_JunctionFeature(self, Index):
        '''Method IComplexEdgeFeature.get_JunctionFeature

           INPUT
            Index               : long

           OUTPUT
            JunctionFeature     : IJunctionFeature**'''
        return super(IComplexEdgeFeature, self).get_JunctionFeature(Index)
    def SplitEdgeElement(self, point, newJunctionEID):
        '''Method IComplexEdgeFeature.SplitEdgeElement

           INPUTS
            point               : IPoint*
            newJunctionEID      : long'''
        return super(IComplexEdgeFeature, self).SplitEdgeElement(point, newJunctionEID)
    def get_GeometryByPoints(self, fromPoint, toPoint):
        '''Method IComplexEdgeFeature.get_GeometryByPoints

           INPUTS
            fromPoint           : IPoint*
            toPoint             : IPoint*

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IComplexEdgeFeature, self).get_GeometryByPoints(fromPoint, toPoint)
    def get_GeometryForEID(self, edgeEID):
        '''Method IComplexEdgeFeature.get_GeometryForEID

           INPUT
            edgeEID             : long

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IComplexEdgeFeature, self).get_GeometryForEID(edgeEID)
    def ConnectAtIntermediateVertices(self):
        '''Method IComplexEdgeFeature.ConnectAtIntermediateVertices'''
        return super(IComplexEdgeFeature, self).ConnectAtIntermediateVertices()
    JunctionFeatureCount = property(get_JunctionFeatureCount, None, None)
    GeometryForEID = IndexProperty(get_GeometryForEID, None)
    JunctionFeature = IndexProperty(get_JunctionFeature, None)

class IEnumJunctionFeature(_esriGeoDatabase.IEnumJunctionFeature):
    _IID = uuid.UUID('91644b26-55fc-11d1-ae55-0000f80372b4')
    def Next(self):
        '''Method IEnumJunctionFeature.Next

           OUTPUT
            Junction            : IJunctionFeature**'''
        return super(IEnumJunctionFeature, self).Next()
    def __iter__(self):
        try:
            super(IEnumJunctionFeature, self).Reset()
            val = super(IEnumJunctionFeature, self).Next()
            while val:
                yield val
                val = super(IEnumJunctionFeature, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumJunctionFeature.Reset'''
        return super(IEnumJunctionFeature, self).Reset()

class INetworkFeature(_esriGeoDatabase.INetworkFeature):
    _IID = uuid.UUID('317e551c-55fc-11d1-ae55-0000f80372b4')

    def __init__(self, *args, **kw):
        super(INetworkFeature, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GeometricNetwork(self):
        '''Method INetworkFeature.get_GeometricNetwork

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkFeature, self).get_GeometricNetwork()
    def get_Enabled(self):
        '''Method INetworkFeature.get_Enabled

           OUTPUT
            isEnabled           : VARIANT_BOOL*'''
        return super(INetworkFeature, self).get_Enabled()
    def put_Enabled(self, isEnabled):
        '''Method INetworkFeature.put_Enabled

           INPUT
            isEnabled           : VARIANT_BOOL'''
        return super(INetworkFeature, self).put_Enabled(isEnabled)
    def Connect(self):
        '''Method INetworkFeature.Connect'''
        return super(INetworkFeature, self).Connect()
    def Disconnect(self):
        '''Method INetworkFeature.Disconnect'''
        return super(INetworkFeature, self).Disconnect()
    def OnDisconnect(self):
        '''Method INetworkFeature.OnDisconnect'''
        return super(INetworkFeature, self).OnDisconnect()
    def CreateNetworkElements(self):
        '''Method INetworkFeature.CreateNetworkElements

           OUTPUT
            newEIDs             : IEnumNetEID**'''
        return super(INetworkFeature, self).CreateNetworkElements()
    Enabled = property(get_Enabled, put_Enabled, None)
    GeometricNetwork = property(get_GeometricNetwork, None, None)

class IGeometricNetwork(_esriGeoDatabase.IGeometricNetwork):
    _IID = uuid.UUID('dbff01c2-5579-11d1-ae55-0000f80372b4')

    def __init__(self, *args, **kw):
        super(IGeometricNetwork, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassesByNetworkAncillaryRole(self, Role):
        '''Method IGeometricNetwork.get_ClassesByNetworkAncillaryRole

           INPUT
            Role                : esriNetworkClassAncillaryRole

           OUTPUT
            Classes             : IEnumFeatureClass**'''
        return super(IGeometricNetwork, self).get_ClassesByNetworkAncillaryRole(Role)
    def EstablishFlowDirection(self):
        '''Method IGeometricNetwork.EstablishFlowDirection'''
        return super(IGeometricNetwork, self).EstablishFlowDirection()
    def get_ValidFlowDirection(self):
        '''Method IGeometricNetwork.get_ValidFlowDirection

           OUTPUT
            ValidFlowDirection  : VARIANT_BOOL*'''
        return super(IGeometricNetwork, self).get_ValidFlowDirection()
    def get_ClassesByType(self, Type):
        '''Method IGeometricNetwork.get_ClassesByType

           INPUT
            Type                : esriFeatureType

           OUTPUT
            featureClasses      : IEnumFeatureClass**'''
        return super(IGeometricNetwork, self).get_ClassesByType(Type)
    def CreateOrphanFeature(self, Location):
        '''Method IGeometricNetwork.CreateOrphanFeature

           INPUT
            Location            : IPoint*

           OUTPUTS
            orphanEID           : long*
            orphan              : ISimpleJunctionFeature**'''
        return super(IGeometricNetwork, self).CreateOrphanFeature(Location)
    def get_EdgeElement(self, Location):
        '''Method IGeometricNetwork.get_EdgeElement

           INPUT
            Location            : IPoint*

           OUTPUT
            edgeEID             : long*'''
        return super(IGeometricNetwork, self).get_EdgeElement(Location)
    def get_InvalidArea(self):
        '''Method IGeometricNetwork.get_InvalidArea

           OUTPUT
            InvalidArea         : IInvalidArea**'''
        return super(IGeometricNetwork, self).get_InvalidArea()
    def putref_InvalidArea(self, InvalidArea):
        '''Method IGeometricNetwork.putref_InvalidArea

           INPUT
            InvalidArea         : IInvalidArea*'''
        return super(IGeometricNetwork, self).putref_InvalidArea(InvalidArea)
    def get_JunctionElement(self, Location):
        '''Method IGeometricNetwork.get_JunctionElement

           INPUT
            Location            : IPoint*

           OUTPUT
            junctionEID         : long*'''
        return super(IGeometricNetwork, self).get_JunctionElement(Location)
    def get_Network(self):
        '''Method IGeometricNetwork.get_Network

           OUTPUT
            Network             : INetwork**'''
        return super(IGeometricNetwork, self).get_Network()
    def get_NetworkType(self):
        '''Method IGeometricNetwork.get_NetworkType

           OUTPUT
            Type                : esriNetworkType*'''
        return super(IGeometricNetwork, self).get_NetworkType()
    def get_OrphanJunctionFeatureClass(self):
        '''Method IGeometricNetwork.get_OrphanJunctionFeatureClass

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IGeometricNetwork, self).get_OrphanJunctionFeatureClass()
    def AddRule(self, Rule):
        '''Method IGeometricNetwork.AddRule

           INPUT
            Rule                : IConnectivityRule*'''
        return super(IGeometricNetwork, self).AddRule(Rule)
    def DeleteRule(self, Rule):
        '''Method IGeometricNetwork.DeleteRule

           INPUT
            Rule                : IConnectivityRule*'''
        return super(IGeometricNetwork, self).DeleteRule(Rule)
    def get_Rules(self):
        '''Method IGeometricNetwork.get_Rules

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IGeometricNetwork, self).get_Rules()
    def get_RulesByClassAndSubtype(self, ClassID, SubtypeCode):
        '''Method IGeometricNetwork.get_RulesByClassAndSubtype

           INPUTS
            ClassID             : long
            SubtypeCode         : long

           OUTPUT
            Rules               : IEnumRule**'''
        return super(IGeometricNetwork, self).get_RulesByClassAndSubtype(ClassID, SubtypeCode)
    def SearchForNetworkFeature(self, Location, Type):
        '''Method IGeometricNetwork.SearchForNetworkFeature

           INPUTS
            Location            : IPoint*
            Type                : esriFeatureType

           OUTPUT
            features            : IEnumFeature**'''
        return super(IGeometricNetwork, self).SearchForNetworkFeature(Location, Type)
    def get_GeometryForEdgeEID(self, edgeEID):
        '''Method IGeometricNetwork.get_GeometryForEdgeEID

           INPUT
            edgeEID             : long

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IGeometricNetwork, self).get_GeometryForEdgeEID(edgeEID)
    def get_GeometryForJunctionEID(self, junctionEID):
        '''Method IGeometricNetwork.get_GeometryForJunctionEID

           INPUT
            junctionEID         : long

           OUTPUT
            Geometry            : IGeometry**'''
        return super(IGeometricNetwork, self).get_GeometryForJunctionEID(junctionEID)
    def get_NetworkFeature(self, networkElement):
        '''Method IGeometricNetwork.get_NetworkFeature

           INPUT
            networkElement      : INetElementDescription*

           OUTPUT
            Feature             : INetworkFeature**'''
        return super(IGeometricNetwork, self).get_NetworkFeature(networkElement)
    def SpliceSimpleJunction(self, Junction, junctionEID, Geometry, forceConnectivity):
        '''Method IGeometricNetwork.SpliceSimpleJunction

           INPUTS
            Junction            : ISimpleJunctionFeature*
            junctionEID         : long
            Geometry            : IGeometry*
            forceConnectivity   : VARIANT_BOOL'''
        return super(IGeometricNetwork, self).SpliceSimpleJunction(Junction, junctionEID, Geometry, forceConnectivity)
    def AddJunctionWithSubsumption(self, Junction, junctionEID, subsumedJunction):
        '''Method IGeometricNetwork.AddJunctionWithSubsumption

           INPUTS
            Junction            : ISimpleJunctionFeature*
            junctionEID         : long
            subsumedJunction    : ISimpleJunctionFeature*'''
        return super(IGeometricNetwork, self).AddJunctionWithSubsumption(Junction, junctionEID, subsumedJunction)
    def Add(self, NewFeature):
        '''Method IGraph.Add (from IGraph)

           INPUT
            NewFeature          : IFeature*'''
        return super(IGeometricNetwork, self).Add(NewFeature)
    def AddFeatureClass(self, FeatureClass, EnabledFieldName, Role, AncillaryRoleFieldName):
        '''Method IGraph.AddFeatureClass (from IGraph)

           INPUTS
            FeatureClass        : IFeatureClass*
            EnabledFieldName    : BSTR
            Role                : esriNetworkClassAncillaryRole
            AncillaryRoleFieldName: BSTR'''
        return super(IGeometricNetwork, self).AddFeatureClass(FeatureClass, EnabledFieldName, Role, AncillaryRoleFieldName)
    def DeleteSet(self, featuresToDelete):
        '''Method IGraph.DeleteSet (from IGraph)

           INPUT
            featuresToDelete    : ISet*'''
        return super(IGeometricNetwork, self).DeleteSet(featuresToDelete)
    def get_FeatureDataset(self):
        '''Method IGraph.get_FeatureDataset (from IGraph)

           OUTPUT
            FeatureDataset      : IFeatureDataset**'''
        return super(IGeometricNetwork, self).get_FeatureDataset()
    def GetDisplayFeedback(self, Feature, features, point):
        '''Method IGraph.GetDisplayFeedback (from IGraph)

           INPUTS
            Feature             : IFeature*
            features            : ISet*
            point               : IPoint*

           OUTPUT
            feedback            : IDisplayFeedback**'''
        return super(IGeometricNetwork, self).GetDisplayFeedback(Feature, features, point)
    def Init(self, Dataset, graphID, graphName, buildNormalizedTables, createGraph):
        '''Method IGraph.Init (from IGraph)

           INPUTS
            Dataset             : IFeatureDataset*
            graphID             : long
            graphName           : BSTR
            buildNormalizedTables: VARIANT_BOOL
            createGraph         : VARIANT_BOOL'''
        return super(IGeometricNetwork, self).Init(Dataset, graphID, graphName, buildNormalizedTables, createGraph)
    def Merge(self, mergingFeatures):
        '''Method IGraph.Merge (from IGraph)

           INPUT
            mergingFeatures     : IEnumFeature*

           OUTPUT
            newFeatures         : IEnumFeature**'''
        return super(IGeometricNetwork, self).Merge(mergingFeatures)
    def Split(self, splittingEdge, point):
        '''Method IGraph.Split (from IGraph)

           INPUTS
            splittingEdge       : IEdgeFeature*
            point               : IGeometry*

           OUTPUT
            newFeatures         : ISet**'''
        return super(IGeometricNetwork, self).Split(splittingEdge, point)
    def TransformSet(self, features, Type, tranformation):
        '''Method IGraph.TransformSet (from IGraph)

           INPUTS
            features            : ISet*
            Type                : esriTransformType
            tranformation       : IAffineTransformation2D*'''
        return super(IGeometricNetwork, self).TransformSet(features, Type, tranformation)
    def get_VertexBasedStretching(self):
        '''Method IGraph.get_VertexBasedStretching (from IGraph)

           OUTPUT
            vertexBased         : VARIANT_BOOL*'''
        return super(IGeometricNetwork, self).get_VertexBasedStretching()
    def put_VertexBasedStretching(self, vertexBased):
        '''Method IGraph.put_VertexBasedStretching (from IGraph)

           INPUT
            vertexBased         : VARIANT_BOOL'''
        return super(IGeometricNetwork, self).put_VertexBasedStretching(vertexBased)
    FeatureDataset = property(get_FeatureDataset, None, None)
    InvalidArea = property(get_InvalidArea, putref_InvalidArea, None)
    Network = property(get_Network, None, None)
    NetworkType = property(get_NetworkType, None, None)
    OrphanJunctionFeatureClass = property(get_OrphanJunctionFeatureClass, None, None)
    Rules = property(get_Rules, None, None)
    ValidFlowDirection = property(get_ValidFlowDirection, None, None)
    VertexBasedStretching = property(get_VertexBasedStretching, put_VertexBasedStretching, None)
    ClassesByNetworkAncillaryRole = IndexProperty(get_ClassesByNetworkAncillaryRole, None)
    ClassesByType = IndexProperty(get_ClassesByType, None)
    EdgeElement = IndexProperty(get_EdgeElement, None)
    GeometryForEdgeEID = IndexProperty(get_GeometryForEdgeEID, None)
    GeometryForJunctionEID = IndexProperty(get_GeometryForJunctionEID, None)
    JunctionElement = IndexProperty(get_JunctionElement, None)
    NetworkFeature = IndexProperty(get_NetworkFeature, None)

class IEnumNetworkFeature(_esriGeoDatabase.IEnumNetworkFeature):
    _IID = uuid.UUID('e75e9906-55fb-11d1-ae55-0000f80372b4')
    def Next(self):
        '''Method IEnumNetworkFeature.Next

           OUTPUT
            Feature             : INetworkFeature**'''
        return super(IEnumNetworkFeature, self).Next()
    def __iter__(self):
        try:
            super(IEnumNetworkFeature, self).Reset()
            val = super(IEnumNetworkFeature, self).Next()
            while val:
                yield val
                val = super(IEnumNetworkFeature, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumNetworkFeature.Reset'''
        return super(IEnumNetworkFeature, self).Reset()

class INetworkCollection(_esriGeoDatabase.INetworkCollection):
    _IID = uuid.UUID('a933f752-5ed3-11d2-aa8a-00c04fa37b82')
    def get_GeometricNetworkCount(self):
        '''Method INetworkCollection.get_GeometricNetworkCount

           OUTPUT
            numNetworks         : int*'''
        return super(INetworkCollection, self).get_GeometricNetworkCount()
    def get_GeometricNetwork(self, Index):
        '''Method INetworkCollection.get_GeometricNetwork

           INPUT
            Index               : int

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkCollection, self).get_GeometricNetwork(Index)
    def get_GeometricNetworkByName(self, Name):
        '''Method INetworkCollection.get_GeometricNetworkByName

           INPUT
            Name                : BSTR

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkCollection, self).get_GeometricNetworkByName(Name)
    def CreateGeometricNetwork(self, Name, NetworkType, buildNormalizedTables):
        '''Method INetworkCollection.CreateGeometricNetwork

           INPUTS
            Name                : BSTR
            NetworkType         : esriNetworkType
            buildNormalizedTables: VARIANT_BOOL

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkCollection, self).CreateGeometricNetwork(Name, NetworkType, buildNormalizedTables)
    GeometricNetworkCount = property(get_GeometricNetworkCount, None, None)
    GeometricNetwork = IndexProperty(get_GeometricNetwork, None)
    GeometricNetworkByName = IndexProperty(get_GeometricNetworkByName, None)

class INetworkCollection2(_esriGeoDatabase.INetworkCollection2):
    _IID = uuid.UUID('a2b19ed3-0fe6-11d4-a0e5-00c04f6bdf0e')
    def get_FormatNumberCount(self):
        '''Method INetworkCollection2.get_FormatNumberCount

           OUTPUT
            Count               : long*'''
        return super(INetworkCollection2, self).get_FormatNumberCount()
    def get_FormatNumber(self, Index):
        '''Method INetworkCollection2.get_FormatNumber

           INPUT
            Index               : long

           OUTPUT
            formatNum           : long*'''
        return super(INetworkCollection2, self).get_FormatNumber(Index)
    def GetMaxStorableClassID(self, formatNum):
        '''Method INetworkCollection2.GetMaxStorableClassID

           INPUT
            formatNum           : long

           OUTPUT
            maxClassID          : long*'''
        return super(INetworkCollection2, self).GetMaxStorableClassID(formatNum)
    def CreateGeometricNetworkEx(self, Name, NetworkType, buildNormalizedTables, ConfigKeyword, formatNum):
        '''Method INetworkCollection2.CreateGeometricNetworkEx

           INPUTS
            Name                : BSTR
            NetworkType         : esriNetworkType
            buildNormalizedTables: VARIANT_BOOL
            ConfigKeyword       : BSTR
            formatNum           : long

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkCollection2, self).CreateGeometricNetworkEx(Name, NetworkType, buildNormalizedTables, ConfigKeyword, formatNum)
    def get_GeometricNetworkCount(self):
        '''Method INetworkCollection.get_GeometricNetworkCount (from INetworkCollection)

           OUTPUT
            numNetworks         : int*'''
        return super(INetworkCollection2, self).get_GeometricNetworkCount()
    def get_GeometricNetwork(self, Index):
        '''Method INetworkCollection.get_GeometricNetwork (from INetworkCollection)

           INPUT
            Index               : int

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkCollection2, self).get_GeometricNetwork(Index)
    def get_GeometricNetworkByName(self, Name):
        '''Method INetworkCollection.get_GeometricNetworkByName (from INetworkCollection)

           INPUT
            Name                : BSTR

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkCollection2, self).get_GeometricNetworkByName(Name)
    def CreateGeometricNetwork(self, Name, NetworkType, buildNormalizedTables):
        '''Method INetworkCollection.CreateGeometricNetwork (from INetworkCollection)

           INPUTS
            Name                : BSTR
            NetworkType         : esriNetworkType
            buildNormalizedTables: VARIANT_BOOL

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkCollection2, self).CreateGeometricNetwork(Name, NetworkType, buildNormalizedTables)
    FormatNumberCount = property(get_FormatNumberCount, None, None)
    GeometricNetworkCount = property(get_GeometricNetworkCount, None, None)
    FormatNumber = IndexProperty(get_FormatNumber, None)
    GeometricNetwork = IndexProperty(get_GeometricNetwork, None)
    GeometricNetworkByName = IndexProperty(get_GeometricNetworkByName, None)

class INetworkClass(_esriGeoDatabase.INetworkClass):
    _IID = uuid.UUID('ee2896b0-5ed8-11d2-aa8a-00c04fa37b82')
    def get_GeometricNetwork(self):
        '''Method INetworkClass.get_GeometricNetwork

           OUTPUT
            Network             : IGeometricNetwork**'''
        return super(INetworkClass, self).get_GeometricNetwork()
    def get_FieldToWeightMapping(self, FieldIndex):
        '''Method INetworkClass.get_FieldToWeightMapping

           INPUT
            FieldIndex          : long

           OUTPUT
            WeightID            : long*'''
        return super(INetworkClass, self).get_FieldToWeightMapping(FieldIndex)
    def get_NetworkAncillaryRole(self):
        '''Method INetworkClass.get_NetworkAncillaryRole

           OUTPUT
            Role                : esriNetworkClassAncillaryRole*'''
        return super(INetworkClass, self).get_NetworkAncillaryRole()
    def get_ShapeType(self):
        '''Method IFeatureClass.get_ShapeType (from IFeatureClass)

           OUTPUT
            Type                : esriGeometryType*'''
        return super(INetworkClass, self).get_ShapeType()
    def get_FeatureType(self):
        '''Method IFeatureClass.get_FeatureType (from IFeatureClass)

           OUTPUT
            Type                : esriFeatureType*'''
        return super(INetworkClass, self).get_FeatureType()
    def get_ShapeFieldName(self):
        '''Method IFeatureClass.get_ShapeFieldName (from IFeatureClass)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkClass, self).get_ShapeFieldName()
    def get_AreaField(self):
        '''Method IFeatureClass.get_AreaField (from IFeatureClass)

           OUTPUT
            Field               : IField**'''
        return super(INetworkClass, self).get_AreaField()
    def get_LengthField(self):
        '''Method IFeatureClass.get_LengthField (from IFeatureClass)

           OUTPUT
            Field               : IField**'''
        return super(INetworkClass, self).get_LengthField()
    def get_FeatureDataset(self):
        '''Method IFeatureClass.get_FeatureDataset (from IFeatureClass)

           OUTPUT
            Dataset             : IFeatureDataset**'''
        return super(INetworkClass, self).get_FeatureDataset()
    def CreateFeature(self):
        '''Method IFeatureClass.CreateFeature (from IFeatureClass)

           OUTPUT
            Feature             : IFeature**'''
        return super(INetworkClass, self).CreateFeature()
    def GetFeature(self, ID):
        '''Method IFeatureClass.GetFeature (from IFeatureClass)

           INPUT
            ID                  : long

           OUTPUT
            Feature             : IFeature**'''
        return super(INetworkClass, self).GetFeature(ID)
    def GetFeatures(self, fids, Recycling):
        '''Method IFeatureClass.GetFeatures (from IFeatureClass)

           INPUTS
            fids                : VARIANT
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(INetworkClass, self).GetFeatures(fids, Recycling)
    def get_FeatureClassID(self):
        '''Method IFeatureClass.get_FeatureClassID (from IFeatureClass)

           OUTPUT
            fID                 : long*'''
        return super(INetworkClass, self).get_FeatureClassID()
    def CreateFeatureBuffer(self):
        '''Method IFeatureClass.CreateFeatureBuffer (from IFeatureClass)

           OUTPUT
            buffer              : IFeatureBuffer**'''
        return super(INetworkClass, self).CreateFeatureBuffer()
    def FeatureCount(self, QueryFilter):
        '''Method IFeatureClass.FeatureCount (from IFeatureClass)

           INPUT
            QueryFilter         : IQueryFilter*

           OUTPUT
            numFeatures         : long*'''
        return super(INetworkClass, self).FeatureCount(QueryFilter)
    def Search(self, filter, Recycling):
        '''Method IFeatureClass.Search (from IFeatureClass)

           INPUTS
            filter              : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(INetworkClass, self).Search(filter, Recycling)
    def Update(self, filter, Recycling):
        '''Method IFeatureClass.Update (from IFeatureClass)

           INPUTS
            filter              : IQueryFilter*
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(INetworkClass, self).Update(filter, Recycling)
    def Insert(self, useBuffering):
        '''Method IFeatureClass.Insert (from IFeatureClass)

           INPUT
            useBuffering        : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(INetworkClass, self).Insert(useBuffering)
    def Select(self, QueryFilter, selType, selOption, selectionContainer):
        '''Method IFeatureClass.Select (from IFeatureClass)

           INPUTS
            QueryFilter         : IQueryFilter*
            selType             : esriSelectionType
            selOption           : esriSelectionOption
            selectionContainer  : IWorkspace*

           OUTPUT
            SelectionSet        : ISelectionSet**'''
        return super(INetworkClass, self).Select(QueryFilter, selType, selOption, selectionContainer)
    def get_ObjectClassID(self):
        '''Method IObjectClass.get_ObjectClassID (from IObjectClass)

           OUTPUT
            ObjectClassID       : long*'''
        return super(INetworkClass, self).get_ObjectClassID()
    def get_RelationshipClasses(self, Role):
        '''Method IObjectClass.get_RelationshipClasses (from IObjectClass)

           INPUT
            Role                : esriRelRole

           OUTPUT
            RelationshipClasses : IEnumRelationshipClass**'''
        return super(INetworkClass, self).get_RelationshipClasses(Role)
    def get_AliasName(self):
        '''Method IObjectClass.get_AliasName (from IObjectClass)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkClass, self).get_AliasName()
    def FindField(self, Name):
        '''Method IClass.FindField (from IClass)

           INPUT
            Name                : BSTR

           OUTPUT
            FieldIndex          : long*'''
        return super(INetworkClass, self).FindField(Name)
    def get_Fields(self):
        '''Method IClass.get_Fields (from IClass)

           OUTPUT
            Fields              : IFields**'''
        return super(INetworkClass, self).get_Fields()
    def get_Indexes(self):
        '''Method IClass.get_Indexes (from IClass)

           OUTPUT
            Indexes             : IIndexes**'''
        return super(INetworkClass, self).get_Indexes()
    def AddField(self, Field):
        '''Method IClass.AddField (from IClass)

           INPUT
            Field               : IField*'''
        return super(INetworkClass, self).AddField(Field)
    def DeleteField(self, Field):
        '''Method IClass.DeleteField (from IClass)

           INPUT
            Field               : IField*'''
        return super(INetworkClass, self).DeleteField(Field)
    def AddIndex(self, Index):
        '''Method IClass.AddIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(INetworkClass, self).AddIndex(Index)
    def DeleteIndex(self, Index):
        '''Method IClass.DeleteIndex (from IClass)

           INPUT
            Index               : IIndex*'''
        return super(INetworkClass, self).DeleteIndex(Index)
    def get_HasOID(self):
        '''Method IClass.get_HasOID (from IClass)

           OUTPUT
            HasOID              : VARIANT_BOOL*'''
        return super(INetworkClass, self).get_HasOID()
    def get_OIDFieldName(self):
        '''Method IClass.get_OIDFieldName (from IClass)

           OUTPUT
            Name                : BSTR*'''
        return super(INetworkClass, self).get_OIDFieldName()
    def get_CLSID(self):
        '''Method IClass.get_CLSID (from IClass)

           OUTPUT
            InstanceCLSID       : IUID**'''
        return super(INetworkClass, self).get_CLSID()
    def get_EXTCLSID(self):
        '''Method IClass.get_EXTCLSID (from IClass)

           OUTPUT
            ClassExtensionCLSID : IUID**'''
        return super(INetworkClass, self).get_EXTCLSID()
    def get_Extension(self):
        '''Method IClass.get_Extension (from IClass)

           OUTPUT
            Extension           : IUnknown**'''
        return super(INetworkClass, self).get_Extension()
    def get_ExtensionProperties(self):
        '''Method IClass.get_ExtensionProperties (from IClass)

           OUTPUT
            extProps            : IPropertySet**'''
        return super(INetworkClass, self).get_ExtensionProperties()
    AliasName = property(get_AliasName, None, None)
    AreaField = property(get_AreaField, None, None)
    CLSID = property(get_CLSID, None, None)
    EXTCLSID = property(get_EXTCLSID, None, None)
    Extension = property(get_Extension, None, None)
    ExtensionProperties = property(get_ExtensionProperties, None, None)
    FeatureClassID = property(get_FeatureClassID, None, None)
    FeatureDataset = property(get_FeatureDataset, None, None)
    FeatureType = property(get_FeatureType, None, None)
    Fields = property(get_Fields, None, None)
    GeometricNetwork = property(get_GeometricNetwork, None, None)
    HasOID = property(get_HasOID, None, None)
    Indexes = property(get_Indexes, None, None)
    LengthField = property(get_LengthField, None, None)
    NetworkAncillaryRole = property(get_NetworkAncillaryRole, None, None)
    OIDFieldName = property(get_OIDFieldName, None, None)
    ObjectClassID = property(get_ObjectClassID, None, None)
    ShapeFieldName = property(get_ShapeFieldName, None, None)
    ShapeType = property(get_ShapeType, None, None)
    FieldToWeightMapping = IndexProperty(get_FieldToWeightMapping, None)
    RelationshipClasses = IndexProperty(get_RelationshipClasses, None)

class ILocatorUI(_esriGeoDatabase.ILocatorUI):
    _IID = uuid.UUID('e0f10b77-eb7c-11d2-9f47-00c04f8ed1c4')
    def CreateLocator(self, parentWindow, locatorStyle, locWks, connectionName):
        '''Method ILocatorUI.CreateLocator

           INPUTS
            parentWindow        : OLE_HANDLE
            locatorStyle        : ILocatorStyle*
            locWks              : ILocatorWorkspace*
            connectionName      : BSTR

           OUTPUT
            locator             : ILocator**'''
        return super(ILocatorUI, self).CreateLocator(parentWindow, locatorStyle, locWks, connectionName)
    def LocatorProperties(self, parentWindow, locator, Title):
        '''Method ILocatorUI.LocatorProperties

           INPUTS
            parentWindow        : OLE_HANDLE
            locator             : ILocator*
            Title               : BSTR

           OUTPUT
            Ok                  : VARIANT_BOOL*'''
        return super(ILocatorUI, self).LocatorProperties(parentWindow, locator, Title)
    def MatchTable(self, parentWindow, tableOfLocations, locator):
        '''Method ILocatorUI.MatchTable

           INPUTS
            parentWindow        : OLE_HANDLE
            tableOfLocations    : ITable*
            locator             : ILocator*

           OUTPUTS
            pathForGxBrowser    : BSTR*
            resultDatasetName   : IName**'''
        return super(ILocatorUI, self).MatchTable(parentWindow, tableOfLocations, locator)

class ILocator(_esriGeoDatabase.ILocator):
    _IID = uuid.UUID('655c5c62-6478-11d3-9f57-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(ILocator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ILocator.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ILocator, self).get_Name()
    def get_Description(self):
        '''Method ILocator.get_Description

           OUTPUT
            Description         : BSTR*'''
        return super(ILocator, self).get_Description()
    def put_Description(self, Description):
        '''Method ILocator.put_Description

           INPUT
            Description         : BSTR'''
        return super(ILocator, self).put_Description(Description)
    def get_Category(self):
        '''Method ILocator.get_Category

           OUTPUT
            Category            : BSTR*'''
        return super(ILocator, self).get_Category()
    def get_UserInterface(self):
        '''Method ILocator.get_UserInterface

           OUTPUT
            outLocatorUI        : ILocatorUI**'''
        return super(ILocator, self).get_UserInterface()
    Category = property(get_Category, None, None)
    Description = property(get_Description, put_Description, None)
    Name = property(get_Name, None, None)
    UserInterface = property(get_UserInterface, None, None)

class IEnumLocator(_esriGeoDatabase.IEnumLocator):
    _IID = uuid.UUID('e0f10b78-eb7c-11d2-9f47-00c04f8ed1c4')
    def Next(self):
        '''Method IEnumLocator.Next

           OUTPUT
            outLocator          : ILocator**'''
        return super(IEnumLocator, self).Next()
    def __iter__(self):
        try:
            super(IEnumLocator, self).Reset()
            val = super(IEnumLocator, self).Next()
            while val:
                yield val
                val = super(IEnumLocator, self).Next()
        except:
            pass
    def Previous(self):
        '''Method IEnumLocator.Previous

           OUTPUT
            outLocator          : ILocator**'''
        return super(IEnumLocator, self).Previous()
    def Reset(self):
        '''Method IEnumLocator.Reset'''
        return super(IEnumLocator, self).Reset()
    def Clone(self):
        '''Method IEnumLocator.Clone

           OUTPUT
            outEnumerator       : IEnumLocator**'''
        return super(IEnumLocator, self).Clone()
    def get_Count(self):
        '''Method IEnumLocator.get_Count

           OUTPUT
            Count               : long*'''
        return super(IEnumLocator, self).get_Count()
    Count = property(get_Count, None, None)

class ILocatorWorkspace(_esriGeoDatabase.ILocatorWorkspace):
    _IID = uuid.UUID('ae5a3a08-f756-11d2-9f4f-00c04f8ed1c4')
    def get_Name(self):
        '''Method ILocatorWorkspace.get_Name

           OUTPUT
            LocatorWorkspaceName: ILocatorWorkspaceName**'''
        return super(ILocatorWorkspace, self).get_Name()
    def get_LocatorNames(self, queryType, Category):
        '''Method ILocatorWorkspace.get_LocatorNames

           INPUTS
            queryType           : esriLocatorQuery
            Category            : BSTR

           OUTPUT
            enumLocatorNames    : IEnumLocatorName**'''
        return super(ILocatorWorkspace, self).get_LocatorNames(queryType, Category)
    def get_Locators(self, queryType, Category):
        '''Method ILocatorWorkspace.get_Locators

           INPUTS
            queryType           : esriLocatorQuery
            Category            : BSTR

           OUTPUT
            enumLocators        : IEnumLocator**'''
        return super(ILocatorWorkspace, self).get_Locators(queryType, Category)
    def GetLocatorName(self, Name):
        '''Method ILocatorWorkspace.GetLocatorName

           INPUT
            Name                : BSTR

           OUTPUT
            outLocatorName      : ILocatorName**'''
        return super(ILocatorWorkspace, self).GetLocatorName(Name)
    def GetLocator(self, Name):
        '''Method ILocatorWorkspace.GetLocator

           INPUT
            Name                : BSTR

           OUTPUT
            locator             : ILocator**'''
        return super(ILocatorWorkspace, self).GetLocator(Name)
    def GetLocatorStyle(self, Name):
        '''Method ILocatorWorkspace.GetLocatorStyle

           INPUT
            Name                : BSTR

           OUTPUT
            aLocatorStyle       : ILocatorStyle**'''
        return super(ILocatorWorkspace, self).GetLocatorStyle(Name)
    def AddLocator(self, Name, locator, ConfigKeyword, CancelTracker):
        '''Method ILocatorWorkspace.AddLocator

           INPUTS
            Name                : BSTR
            locator             : ILocator*
            ConfigKeyword       : BSTR
            CancelTracker       : ITrackCancel*

           OUTPUT
            newLocator          : ILocator**'''
        return super(ILocatorWorkspace, self).AddLocator(Name, locator, ConfigKeyword, CancelTracker)
    def AddLocatorStyle(self, Name, Category, locatorStyle):
        '''Method ILocatorWorkspace.AddLocatorStyle

           INPUTS
            Name                : BSTR
            Category            : BSTR
            locatorStyle        : ILocatorStyle*'''
        return super(ILocatorWorkspace, self).AddLocatorStyle(Name, Category, locatorStyle)
    def UpdateLocator(self, locator):
        '''Method ILocatorWorkspace.UpdateLocator

           INPUT
            locator             : ILocator*'''
        return super(ILocatorWorkspace, self).UpdateLocator(locator)
    def DeleteLocator(self, Name):
        '''Method ILocatorWorkspace.DeleteLocator

           INPUT
            Name                : BSTR'''
        return super(ILocatorWorkspace, self).DeleteLocator(Name)
    def RenameLocator(self, oldName, newName):
        '''Method ILocatorWorkspace.RenameLocator

           INPUTS
            oldName             : BSTR
            newName             : BSTR'''
        return super(ILocatorWorkspace, self).RenameLocator(oldName, newName)
    def CopyLocator(self, srcName, dstName):
        '''Method ILocatorWorkspace.CopyLocator

           INPUTS
            srcName             : BSTR
            dstName             : BSTR'''
        return super(ILocatorWorkspace, self).CopyLocator(srcName, dstName)
    Name = property(get_Name, None, None)

class ILocatorUI2(_esriGeoDatabase.ILocatorUI2):
    _IID = uuid.UUID('46e6ab9d-c09e-4482-9cc5-871274c83785')
    def RepairLocator(self, parentWindow, locator, Title):
        '''Method ILocatorUI2.RepairLocator

           INPUTS
            parentWindow        : OLE_HANDLE
            locator             : ILocator*
            Title               : BSTR

           OUTPUT
            Ok                  : VARIANT_BOOL*'''
        return super(ILocatorUI2, self).RepairLocator(parentWindow, locator, Title)
    def CreateLocator(self, parentWindow, locatorStyle, locWks, connectionName):
        '''Method ILocatorUI.CreateLocator (from ILocatorUI)

           INPUTS
            parentWindow        : OLE_HANDLE
            locatorStyle        : ILocatorStyle*
            locWks              : ILocatorWorkspace*
            connectionName      : BSTR

           OUTPUT
            locator             : ILocator**'''
        return super(ILocatorUI2, self).CreateLocator(parentWindow, locatorStyle, locWks, connectionName)
    def LocatorProperties(self, parentWindow, locator, Title):
        '''Method ILocatorUI.LocatorProperties (from ILocatorUI)

           INPUTS
            parentWindow        : OLE_HANDLE
            locator             : ILocator*
            Title               : BSTR

           OUTPUT
            Ok                  : VARIANT_BOOL*'''
        return super(ILocatorUI2, self).LocatorProperties(parentWindow, locator, Title)
    def MatchTable(self, parentWindow, tableOfLocations, locator):
        '''Method ILocatorUI.MatchTable (from ILocatorUI)

           INPUTS
            parentWindow        : OLE_HANDLE
            tableOfLocations    : ITable*
            locator             : ILocator*

           OUTPUTS
            pathForGxBrowser    : BSTR*
            resultDatasetName   : IName**'''
        return super(ILocatorUI2, self).MatchTable(parentWindow, tableOfLocations, locator)

class ILocatorWorkspace2(_esriGeoDatabase.ILocatorWorkspace2):
    _IID = uuid.UUID('3238f288-f52c-45f0-a4c4-cb9e7d2488f2')
    def RebuildLocator(self, Name, CancelTracker):
        '''Method ILocatorWorkspace2.RebuildLocator

           INPUTS
            Name                : BSTR
            CancelTracker       : ITrackCancel*'''
        return super(ILocatorWorkspace2, self).RebuildLocator(Name, CancelTracker)
    def get_Name(self):
        '''Method ILocatorWorkspace.get_Name (from ILocatorWorkspace)

           OUTPUT
            LocatorWorkspaceName: ILocatorWorkspaceName**'''
        return super(ILocatorWorkspace2, self).get_Name()
    def get_LocatorNames(self, queryType, Category):
        '''Method ILocatorWorkspace.get_LocatorNames (from ILocatorWorkspace)

           INPUTS
            queryType           : esriLocatorQuery
            Category            : BSTR

           OUTPUT
            enumLocatorNames    : IEnumLocatorName**'''
        return super(ILocatorWorkspace2, self).get_LocatorNames(queryType, Category)
    def get_Locators(self, queryType, Category):
        '''Method ILocatorWorkspace.get_Locators (from ILocatorWorkspace)

           INPUTS
            queryType           : esriLocatorQuery
            Category            : BSTR

           OUTPUT
            enumLocators        : IEnumLocator**'''
        return super(ILocatorWorkspace2, self).get_Locators(queryType, Category)
    def GetLocatorName(self, Name):
        '''Method ILocatorWorkspace.GetLocatorName (from ILocatorWorkspace)

           INPUT
            Name                : BSTR

           OUTPUT
            outLocatorName      : ILocatorName**'''
        return super(ILocatorWorkspace2, self).GetLocatorName(Name)
    def GetLocator(self, Name):
        '''Method ILocatorWorkspace.GetLocator (from ILocatorWorkspace)

           INPUT
            Name                : BSTR

           OUTPUT
            locator             : ILocator**'''
        return super(ILocatorWorkspace2, self).GetLocator(Name)
    def GetLocatorStyle(self, Name):
        '''Method ILocatorWorkspace.GetLocatorStyle (from ILocatorWorkspace)

           INPUT
            Name                : BSTR

           OUTPUT
            aLocatorStyle       : ILocatorStyle**'''
        return super(ILocatorWorkspace2, self).GetLocatorStyle(Name)
    def AddLocator(self, Name, locator, ConfigKeyword, CancelTracker):
        '''Method ILocatorWorkspace.AddLocator (from ILocatorWorkspace)

           INPUTS
            Name                : BSTR
            locator             : ILocator*
            ConfigKeyword       : BSTR
            CancelTracker       : ITrackCancel*

           OUTPUT
            newLocator          : ILocator**'''
        return super(ILocatorWorkspace2, self).AddLocator(Name, locator, ConfigKeyword, CancelTracker)
    def AddLocatorStyle(self, Name, Category, locatorStyle):
        '''Method ILocatorWorkspace.AddLocatorStyle (from ILocatorWorkspace)

           INPUTS
            Name                : BSTR
            Category            : BSTR
            locatorStyle        : ILocatorStyle*'''
        return super(ILocatorWorkspace2, self).AddLocatorStyle(Name, Category, locatorStyle)
    def UpdateLocator(self, locator):
        '''Method ILocatorWorkspace.UpdateLocator (from ILocatorWorkspace)

           INPUT
            locator             : ILocator*'''
        return super(ILocatorWorkspace2, self).UpdateLocator(locator)
    def DeleteLocator(self, Name):
        '''Method ILocatorWorkspace.DeleteLocator (from ILocatorWorkspace)

           INPUT
            Name                : BSTR'''
        return super(ILocatorWorkspace2, self).DeleteLocator(Name)
    def RenameLocator(self, oldName, newName):
        '''Method ILocatorWorkspace.RenameLocator (from ILocatorWorkspace)

           INPUTS
            oldName             : BSTR
            newName             : BSTR'''
        return super(ILocatorWorkspace2, self).RenameLocator(oldName, newName)
    def CopyLocator(self, srcName, dstName):
        '''Method ILocatorWorkspace.CopyLocator (from ILocatorWorkspace)

           INPUTS
            srcName             : BSTR
            dstName             : BSTR'''
        return super(ILocatorWorkspace2, self).CopyLocator(srcName, dstName)
    Name = property(get_Name, None, None)

class ILocatorDataset(_esriGeoDatabase.ILocatorDataset):
    _IID = uuid.UUID('fdadfae4-939d-11d3-9f6b-00c04f6bdf06')
    def get_FullName(self):
        '''Method ILocatorDataset.get_FullName

           OUTPUT
            ppLocName           : ILocatorName**'''
        return super(ILocatorDataset, self).get_FullName()
    def get_LocatorWorkspace(self):
        '''Method ILocatorDataset.get_LocatorWorkspace

           OUTPUT
            LocatorWorkspace    : ILocatorWorkspace**'''
        return super(ILocatorDataset, self).get_LocatorWorkspace()
    FullName = property(get_FullName, None, None)
    LocatorWorkspace = property(get_LocatorWorkspace, None, None)

class ITinNode(_esriGeoDatabase.ITinNode):
    _IID = uuid.UUID('3e541321-1132-11d2-92f7-444553540000')
    def get_X(self):
        '''Method ITinNode.get_X

           OUTPUT
            X                   : double*'''
        return super(ITinNode, self).get_X()
    def get_Y(self):
        '''Method ITinNode.get_Y

           OUTPUT
            Y                   : double*'''
        return super(ITinNode, self).get_Y()
    def get_Z(self):
        '''Method ITinNode.get_Z

           OUTPUT
            Z                   : double*'''
        return super(ITinNode, self).get_Z()
    def QueryAsPoint(self, pPoint):
        '''Method ITinNode.QueryAsPoint

           INPUT
            pPoint              : IPoint*'''
        return super(ITinNode, self).QueryAsPoint(pPoint)
    def QueryAsWKSPointZ(self):
        '''Method ITinNode.QueryAsWKSPointZ

           OUTPUT
            pPoint              : WKSPointZ*'''
        return super(ITinNode, self).QueryAsWKSPointZ()
    def GetAdjacentNodes(self):
        '''Method ITinNode.GetAdjacentNodes

           OUTPUT
            ppNodes             : ITinNodeArray**'''
        return super(ITinNode, self).GetAdjacentNodes()
    def GetIncidentEdges(self):
        '''Method ITinNode.GetIncidentEdges

           OUTPUT
            ppEdges             : ITinEdgeArray**'''
        return super(ITinNode, self).GetIncidentEdges()
    def GetIncidentTriangles(self):
        '''Method ITinNode.GetIncidentTriangles

           OUTPUT
            ppTriangles         : ITinTriangleArray**'''
        return super(ITinNode, self).GetIncidentTriangles()
    def GetVoronoiRegion(self, pClippingPolygon):
        '''Method ITinNode.GetVoronoiRegion

           INPUT
            pClippingPolygon    : IPolygon*

           OUTPUT
            ppRegion            : IPolygon**'''
        return super(ITinNode, self).GetVoronoiRegion(pClippingPolygon)
    def IsSameNode(self, pNode):
        '''Method ITinNode.IsSameNode

           INPUT
            pNode               : ITinNode*

           OUTPUT
            pbIsTheSame         : VARIANT_BOOL*'''
        return super(ITinNode, self).IsSameNode(pNode)
    def get_IsEmpty(self):
        '''Method ITinElement.get_IsEmpty (from ITinElement)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinNode, self).get_IsEmpty()
    def get_TheTin(self):
        '''Method ITinElement.get_TheTin (from ITinElement)

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinNode, self).get_TheTin()
    def get_Index(self):
        '''Method ITinElement.get_Index (from ITinElement)

           OUTPUT
            pIndex              : long*'''
        return super(ITinNode, self).get_Index()
    def get_TagValue(self):
        '''Method ITinElement.get_TagValue (from ITinElement)

           OUTPUT
            pValue              : long*'''
        return super(ITinNode, self).get_TagValue()
    def SetEmpty(self):
        '''Method ITinElement.SetEmpty (from ITinElement)'''
        return super(ITinNode, self).SetEmpty()
    def Init(self, pTin, Index):
        '''Method ITinElement.Init (from ITinElement)

           INPUTS
            pTin                : ITin*
            Index               : long'''
        return super(ITinNode, self).Init(pTin, Index)
    def get_IsInsideDataArea(self):
        '''Method ITinElement.get_IsInsideDataArea (from ITinElement)

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinNode, self).get_IsInsideDataArea()
    def get_HasVoidZ(self):
        '''Method ITinElement.get_HasVoidZ (from ITinElement)

           OUTPUT
            pbHasVoidZ          : VARIANT_BOOL*'''
        return super(ITinNode, self).get_HasVoidZ()
    def get_IsInsideExtent(self, pExtent):
        '''Method ITinElement.get_IsInsideExtent (from ITinElement)

           INPUT
            pExtent             : IEnvelope*

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinNode, self).get_IsInsideExtent(pExtent)
    HasVoidZ = property(get_HasVoidZ, None, None)
    Index = property(get_Index, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsInsideDataArea = property(get_IsInsideDataArea, None, None)
    TagValue = property(get_TagValue, None, None)
    TheTin = property(get_TheTin, None, None)
    X = property(get_X, None, None)
    Y = property(get_Y, None, None)
    Z = property(get_Z, None, None)
    IsInsideExtent = IndexProperty(get_IsInsideExtent, None)

class ITinNodeArray(_esriGeoDatabase.ITinNodeArray):
    _IID = uuid.UUID('c0e04940-b08c-11d2-9f6a-00c04f8ece27')
    def get_Count(self):
        '''Method ITinNodeArray.get_Count

           OUTPUT
            pCount              : long*'''
        return super(ITinNodeArray, self).get_Count()
    def Remove(self, Index):
        '''Method ITinNodeArray.Remove

           INPUT
            Index               : long'''
        return super(ITinNodeArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method ITinNodeArray.RemoveAll'''
        return super(ITinNodeArray, self).RemoveAll()
    def get_Element(self, Index):
        '''Method ITinNodeArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppNode              : ITinNode**'''
        return super(ITinNodeArray, self).get_Element(Index)
    def Add(self, pNode):
        '''Method ITinNodeArray.Add

           INPUT
            pNode               : ITinNode*'''
        return super(ITinNodeArray, self).Add(pNode)
    def Insert(self, Index, pNode):
        '''Method ITinNodeArray.Insert

           INPUTS
            Index               : long
            pNode               : ITinNode*'''
        return super(ITinNodeArray, self).Insert(Index, pNode)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IEnumTinNode(_esriGeoDatabase.IEnumTinNode):
    _IID = uuid.UUID('6bfa889c-bf0d-11d3-ab4f-0008c73fd50c')
    def Reset(self):
        '''Method IEnumTinNode.Reset'''
        return super(IEnumTinNode, self).Reset()
    def Next(self):
        '''Method IEnumTinNode.Next

           OUTPUT
            ppNode              : ITinNode**'''
        return super(IEnumTinNode, self).Next()
    def __iter__(self):
        try:
            super(IEnumTinNode, self).Reset()
            val = super(IEnumTinNode, self).Next()
            while val:
                yield val
                val = super(IEnumTinNode, self).Next()
        except:
            pass
    def QueryNext(self, pNode):
        '''Method IEnumTinNode.QueryNext

           INPUT
            pNode               : ITinNode*'''
        return super(IEnumTinNode, self).QueryNext(pNode)
    def QueryNextAsWKSPointZ(self):
        '''Method IEnumTinNode.QueryNextAsWKSPointZ

           OUTPUTS
            pPoint              : WKSPointZ*
            pbIsEnd             : VARIANT_BOOL*'''
        return super(IEnumTinNode, self).QueryNextAsWKSPointZ()
    def QueryNextAsWKSPointZ2(self):
        '''Method IEnumTinNode.QueryNextAsWKSPointZ2

           OUTPUTS
            pTriangleIndex      : long*
            pPoint              : WKSPointZ*
            pbIsEnd             : VARIANT_BOOL*'''
        return super(IEnumTinNode, self).QueryNextAsWKSPointZ2()

class ITinNodeCollection(_esriGeoDatabase.ITinNodeCollection):
    _IID = uuid.UUID('9a2a4b72-11cf-11d2-a556-0000f8774f0f')
    def get_NodeCount(self):
        '''Method ITinNodeCollection.get_NodeCount

           OUTPUT
            pcNodes             : long*'''
        return super(ITinNodeCollection, self).get_NodeCount()
    def GetNode(self, Index):
        '''Method ITinNodeCollection.GetNode

           INPUT
            Index               : long

           OUTPUT
            ppNode              : ITinNode**'''
        return super(ITinNodeCollection, self).GetNode(Index)
    def QueryNode(self, Index, pNode):
        '''Method ITinNodeCollection.QueryNode

           INPUTS
            Index               : long
            pNode               : ITinNode*'''
        return super(ITinNodeCollection, self).QueryNode(Index, pNode)
    def QueryNodeAsPoint(self, Index, pPoint):
        '''Method ITinNodeCollection.QueryNodeAsPoint

           INPUTS
            Index               : long
            pPoint              : IPoint*'''
        return super(ITinNodeCollection, self).QueryNodeAsPoint(Index, pPoint)
    def QueryNodeAsWKSPointZ(self, Index):
        '''Method ITinNodeCollection.QueryNodeAsWKSPointZ

           INPUT
            Index               : long

           OUTPUT
            pPoint              : WKSPointZ*'''
        return super(ITinNodeCollection, self).QueryNodeAsWKSPointZ(Index)
    def GetVoronoiRegionNoClip(self, nodeIndex):
        '''Method ITinNodeCollection.GetVoronoiRegionNoClip

           INPUT
            nodeIndex           : long

           OUTPUT
            ppRegion            : IPolygon**'''
        return super(ITinNodeCollection, self).GetVoronoiRegionNoClip(nodeIndex)
    def GetVoronoiRegion(self, nodeIndex, pClippingPolygon):
        '''Method ITinNodeCollection.GetVoronoiRegion

           INPUTS
            nodeIndex           : long
            pClippingPolygon    : IPolygon*

           OUTPUT
            ppRegion            : IPolygon**'''
        return super(ITinNodeCollection, self).GetVoronoiRegion(nodeIndex, pClippingPolygon)
    def ConvertToVoronoiRegions(self, pFeatureClass, pFilter, pClippingPolygon, indexFieldName, tagFieldName):
        '''Method ITinNodeCollection.ConvertToVoronoiRegions

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : ITinFilter*
            pClippingPolygon    : IPolygon*
            indexFieldName      : BSTR
            tagFieldName        : BSTR'''
        return super(ITinNodeCollection, self).ConvertToVoronoiRegions(pFeatureClass, pFilter, pClippingPolygon, indexFieldName, tagFieldName)
    def GetNodeZ(self, Index):
        '''Method ITinNodeCollection.GetNodeZ

           INPUT
            Index               : long

           OUTPUT
            pZ                  : double*'''
        return super(ITinNodeCollection, self).GetNodeZ(Index)
    def GetNodeTagValue(self, Index):
        '''Method ITinNodeCollection.GetNodeTagValue

           INPUT
            Index               : long

           OUTPUT
            pValue              : long*'''
        return super(ITinNodeCollection, self).GetNodeTagValue(Index)
    def get_HasNodeTagValues(self):
        '''Method ITinNodeCollection.get_HasNodeTagValues

           OUTPUT
            pbHasNodeValues     : VARIANT_BOOL*'''
        return super(ITinNodeCollection, self).get_HasNodeTagValues()
    HasNodeTagValues = property(get_HasNodeTagValues, None, None)
    NodeCount = property(get_NodeCount, None, None)

class ITinEdgeArray(_esriGeoDatabase.ITinEdgeArray):
    _IID = uuid.UUID('c0e04941-b08c-11d2-9f6a-00c04f8ece27')
    def get_Count(self):
        '''Method ITinEdgeArray.get_Count

           OUTPUT
            pCount              : long*'''
        return super(ITinEdgeArray, self).get_Count()
    def Remove(self, Index):
        '''Method ITinEdgeArray.Remove

           INPUT
            Index               : long'''
        return super(ITinEdgeArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method ITinEdgeArray.RemoveAll'''
        return super(ITinEdgeArray, self).RemoveAll()
    def get_Element(self, Index):
        '''Method ITinEdgeArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinEdgeArray, self).get_Element(Index)
    def Add(self, pEdge):
        '''Method ITinEdgeArray.Add

           INPUT
            pEdge               : ITinEdge*'''
        return super(ITinEdgeArray, self).Add(pEdge)
    def Insert(self, Index, pEdge):
        '''Method ITinEdgeArray.Insert

           INPUTS
            Index               : long
            pEdge               : ITinEdge*'''
        return super(ITinEdgeArray, self).Insert(Index, pEdge)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ITinEdge(_esriGeoDatabase.ITinEdge):
    _IID = uuid.UUID('3e541322-1132-11d2-92f7-444553540000')
    def get_Type(self):
        '''Method ITinEdge.get_Type

           OUTPUT
            pType               : esriTinEdgeType*'''
        return super(ITinEdge, self).get_Type()
    def get_FromNode(self):
        '''Method ITinEdge.get_FromNode

           OUTPUT
            ppNode              : ITinNode**'''
        return super(ITinEdge, self).get_FromNode()
    def get_ToNode(self):
        '''Method ITinEdge.get_ToNode

           OUTPUT
            ppNode              : ITinNode**'''
        return super(ITinEdge, self).get_ToNode()
    def get_LeftTriangle(self):
        '''Method ITinEdge.get_LeftTriangle

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinEdge, self).get_LeftTriangle()
    def get_RightTriangle(self):
        '''Method ITinEdge.get_RightTriangle

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinEdge, self).get_RightTriangle()
    def get_Length(self):
        '''Method ITinEdge.get_Length

           OUTPUT
            pLength             : double*'''
        return super(ITinEdge, self).get_Length()
    def get_Length3D(self):
        '''Method ITinEdge.get_Length3D

           OUTPUT
            pLength             : double*'''
        return super(ITinEdge, self).get_Length3D()
    def get_AzimuthRadians(self):
        '''Method ITinEdge.get_AzimuthRadians

           OUTPUT
            pAzimuth            : double*'''
        return super(ITinEdge, self).get_AzimuthRadians()
    def get_AzimuthDegrees(self):
        '''Method ITinEdge.get_AzimuthDegrees

           OUTPUT
            pAzimuth            : double*'''
        return super(ITinEdge, self).get_AzimuthDegrees()
    def QueryAsLine(self, pLine):
        '''Method ITinEdge.QueryAsLine

           INPUT
            pLine               : ILine*'''
        return super(ITinEdge, self).QueryAsLine(pLine)
    def QueryAsWKSPointZs(self):
        '''Method ITinEdge.QueryAsWKSPointZs

           OUTPUTS
            pFrom               : WKSPointZ*
            pTo                 : WKSPointZ*'''
        return super(ITinEdge, self).QueryAsWKSPointZs()
    def GetNextInTriangle(self):
        '''Method ITinEdge.GetNextInTriangle

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinEdge, self).GetNextInTriangle()
    def GetPreviousInTriangle(self):
        '''Method ITinEdge.GetPreviousInTriangle

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinEdge, self).GetPreviousInTriangle()
    def GetNeighbor(self):
        '''Method ITinEdge.GetNeighbor

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinEdge, self).GetNeighbor()
    def GetNextCW(self):
        '''Method ITinEdge.GetNextCW

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinEdge, self).GetNextCW()
    def GetNextCCW(self):
        '''Method ITinEdge.GetNextCCW

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinEdge, self).GetNextCCW()
    def IsSameEdge(self, pEdge):
        '''Method ITinEdge.IsSameEdge

           INPUT
            pEdge               : ITinEdge*

           OUTPUT
            pbIsTheSame         : VARIANT_BOOL*'''
        return super(ITinEdge, self).IsSameEdge(pEdge)
    def get_IsEmpty(self):
        '''Method ITinElement.get_IsEmpty (from ITinElement)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinEdge, self).get_IsEmpty()
    def get_TheTin(self):
        '''Method ITinElement.get_TheTin (from ITinElement)

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinEdge, self).get_TheTin()
    def get_Index(self):
        '''Method ITinElement.get_Index (from ITinElement)

           OUTPUT
            pIndex              : long*'''
        return super(ITinEdge, self).get_Index()
    def get_TagValue(self):
        '''Method ITinElement.get_TagValue (from ITinElement)

           OUTPUT
            pValue              : long*'''
        return super(ITinEdge, self).get_TagValue()
    def SetEmpty(self):
        '''Method ITinElement.SetEmpty (from ITinElement)'''
        return super(ITinEdge, self).SetEmpty()
    def Init(self, pTin, Index):
        '''Method ITinElement.Init (from ITinElement)

           INPUTS
            pTin                : ITin*
            Index               : long'''
        return super(ITinEdge, self).Init(pTin, Index)
    def get_IsInsideDataArea(self):
        '''Method ITinElement.get_IsInsideDataArea (from ITinElement)

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinEdge, self).get_IsInsideDataArea()
    def get_HasVoidZ(self):
        '''Method ITinElement.get_HasVoidZ (from ITinElement)

           OUTPUT
            pbHasVoidZ          : VARIANT_BOOL*'''
        return super(ITinEdge, self).get_HasVoidZ()
    def get_IsInsideExtent(self, pExtent):
        '''Method ITinElement.get_IsInsideExtent (from ITinElement)

           INPUT
            pExtent             : IEnvelope*

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinEdge, self).get_IsInsideExtent(pExtent)
    AzimuthDegrees = property(get_AzimuthDegrees, None, None)
    AzimuthRadians = property(get_AzimuthRadians, None, None)
    FromNode = property(get_FromNode, None, None)
    HasVoidZ = property(get_HasVoidZ, None, None)
    Index = property(get_Index, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsInsideDataArea = property(get_IsInsideDataArea, None, None)
    LeftTriangle = property(get_LeftTriangle, None, None)
    Length = property(get_Length, None, None)
    Length3D = property(get_Length3D, None, None)
    RightTriangle = property(get_RightTriangle, None, None)
    TagValue = property(get_TagValue, None, None)
    TheTin = property(get_TheTin, None, None)
    ToNode = property(get_ToNode, None, None)
    Type = property(get_Type, None, None)
    IsInsideExtent = IndexProperty(get_IsInsideExtent, None)

class ITinTriangle(_esriGeoDatabase.ITinTriangle):
    _IID = uuid.UUID('3e541323-1132-11d2-92f7-444553540000')
    def get_Node(self, Index):
        '''Method ITinTriangle.get_Node

           INPUT
            Index               : long

           OUTPUT
            ppNode              : ITinNode**'''
        return super(ITinTriangle, self).get_Node(Index)
    def get_Edge(self, Index):
        '''Method ITinTriangle.get_Edge

           INPUT
            Index               : long

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinTriangle, self).get_Edge(Index)
    def get_Area(self):
        '''Method ITinTriangle.get_Area

           OUTPUT
            pArea               : double*'''
        return super(ITinTriangle, self).get_Area()
    def get_Perimeter(self):
        '''Method ITinTriangle.get_Perimeter

           OUTPUT
            pPerimeter          : double*'''
        return super(ITinTriangle, self).get_Perimeter()
    def get_Area3D(self):
        '''Method ITinTriangle.get_Area3D

           OUTPUT
            pArea               : double*'''
        return super(ITinTriangle, self).get_Area3D()
    def get_Perimeter3D(self):
        '''Method ITinTriangle.get_Perimeter3D

           OUTPUT
            pPerimeter          : double*'''
        return super(ITinTriangle, self).get_Perimeter3D()
    def get_Normal(self):
        '''Method ITinTriangle.get_Normal

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinTriangle, self).get_Normal()
    def get_UnitNormal(self):
        '''Method ITinTriangle.get_UnitNormal

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinTriangle, self).get_UnitNormal()
    def QueryNormal(self, pNormal):
        '''Method ITinTriangle.QueryNormal

           INPUT
            pNormal             : IVector3D*'''
        return super(ITinTriangle, self).QueryNormal(pNormal)
    def get_SlopeRadians(self):
        '''Method ITinTriangle.get_SlopeRadians

           OUTPUT
            pSlope              : double*'''
        return super(ITinTriangle, self).get_SlopeRadians()
    def get_SlopeDegrees(self):
        '''Method ITinTriangle.get_SlopeDegrees

           OUTPUT
            pSlope              : double*'''
        return super(ITinTriangle, self).get_SlopeDegrees()
    def get_SlopePercent(self):
        '''Method ITinTriangle.get_SlopePercent

           OUTPUT
            pSlope              : double*'''
        return super(ITinTriangle, self).get_SlopePercent()
    def get_AspectRadians(self):
        '''Method ITinTriangle.get_AspectRadians

           OUTPUT
            pAspect             : double*'''
        return super(ITinTriangle, self).get_AspectRadians()
    def get_AspectDegrees(self):
        '''Method ITinTriangle.get_AspectDegrees

           OUTPUT
            pAspect             : double*'''
        return super(ITinTriangle, self).get_AspectDegrees()
    def get_Intensity(self):
        '''Method ITinTriangle.get_Intensity

           OUTPUT
            pIntensity          : double*'''
        return super(ITinTriangle, self).get_Intensity()
    def QueryVertices(self):
        '''Method ITinTriangle.QueryVertices

           OUTPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*'''
        return super(ITinTriangle, self).QueryVertices()
    def QueryAsRing(self, pRing):
        '''Method ITinTriangle.QueryAsRing

           INPUT
            pRing               : IRing*'''
        return super(ITinTriangle, self).QueryAsRing(pRing)
    def QueryCentroid(self, pCentroid):
        '''Method ITinTriangle.QueryCentroid

           INPUT
            pCentroid           : IPoint*'''
        return super(ITinTriangle, self).QueryCentroid(pCentroid)
    def QueryCircumCircle(self, pCenter):
        '''Method ITinTriangle.QueryCircumCircle

           INPUT
            pCenter             : IPoint*

           OUTPUT
            pRadius             : double*'''
        return super(ITinTriangle, self).QueryCircumCircle(pCenter)
    def QueryElevationBand(self, zLowerBound, zUpperBound):
        '''Method ITinTriangle.QueryElevationBand

           INPUTS
            zLowerBound         : double
            zUpperBound         : double

           OUTPUTS
            pCount              : long*
            pRegion             : WKSPointZ*'''
        return super(ITinTriangle, self).QueryElevationBand(zLowerBound, zUpperBound)
    def QueryAdjacentTriangles(self, pTi, pTj, pTk):
        '''Method ITinTriangle.QueryAdjacentTriangles

           INPUTS
            pTi                 : ITinTriangle*
            pTj                 : ITinTriangle*
            pTk                 : ITinTriangle*'''
        return super(ITinTriangle, self).QueryAdjacentTriangles(pTi, pTj, pTk)
    def QueryAdjacentTriangleIndices(self):
        '''Method ITinTriangle.QueryAdjacentTriangleIndices

           OUTPUTS
            pTi                 : long*
            pTj                 : long*
            pTk                 : long*'''
        return super(ITinTriangle, self).QueryAdjacentTriangleIndices()
    def IsSameTriangle(self, pTriangle):
        '''Method ITinTriangle.IsSameTriangle

           INPUT
            pTriangle           : ITinTriangle*

           OUTPUT
            pbIsTheSame         : VARIANT_BOOL*'''
        return super(ITinTriangle, self).IsSameTriangle(pTriangle)
    def get_IsEmpty(self):
        '''Method ITinElement.get_IsEmpty (from ITinElement)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinTriangle, self).get_IsEmpty()
    def get_TheTin(self):
        '''Method ITinElement.get_TheTin (from ITinElement)

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinTriangle, self).get_TheTin()
    def get_Index(self):
        '''Method ITinElement.get_Index (from ITinElement)

           OUTPUT
            pIndex              : long*'''
        return super(ITinTriangle, self).get_Index()
    def get_TagValue(self):
        '''Method ITinElement.get_TagValue (from ITinElement)

           OUTPUT
            pValue              : long*'''
        return super(ITinTriangle, self).get_TagValue()
    def SetEmpty(self):
        '''Method ITinElement.SetEmpty (from ITinElement)'''
        return super(ITinTriangle, self).SetEmpty()
    def Init(self, pTin, Index):
        '''Method ITinElement.Init (from ITinElement)

           INPUTS
            pTin                : ITin*
            Index               : long'''
        return super(ITinTriangle, self).Init(pTin, Index)
    def get_IsInsideDataArea(self):
        '''Method ITinElement.get_IsInsideDataArea (from ITinElement)

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinTriangle, self).get_IsInsideDataArea()
    def get_HasVoidZ(self):
        '''Method ITinElement.get_HasVoidZ (from ITinElement)

           OUTPUT
            pbHasVoidZ          : VARIANT_BOOL*'''
        return super(ITinTriangle, self).get_HasVoidZ()
    def get_IsInsideExtent(self, pExtent):
        '''Method ITinElement.get_IsInsideExtent (from ITinElement)

           INPUT
            pExtent             : IEnvelope*

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinTriangle, self).get_IsInsideExtent(pExtent)
    Area = property(get_Area, None, None)
    Area3D = property(get_Area3D, None, None)
    AspectDegrees = property(get_AspectDegrees, None, None)
    AspectRadians = property(get_AspectRadians, None, None)
    HasVoidZ = property(get_HasVoidZ, None, None)
    Index = property(get_Index, None, None)
    Intensity = property(get_Intensity, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsInsideDataArea = property(get_IsInsideDataArea, None, None)
    Normal = property(get_Normal, None, None)
    Perimeter = property(get_Perimeter, None, None)
    Perimeter3D = property(get_Perimeter3D, None, None)
    SlopeDegrees = property(get_SlopeDegrees, None, None)
    SlopePercent = property(get_SlopePercent, None, None)
    SlopeRadians = property(get_SlopeRadians, None, None)
    TagValue = property(get_TagValue, None, None)
    TheTin = property(get_TheTin, None, None)
    UnitNormal = property(get_UnitNormal, None, None)
    Edge = IndexProperty(get_Edge, None)
    IsInsideExtent = IndexProperty(get_IsInsideExtent, None)
    Node = IndexProperty(get_Node, None)

class ITinTriangleArray(_esriGeoDatabase.ITinTriangleArray):
    _IID = uuid.UUID('c0e04942-b08c-11d2-9f6a-00c04f8ece27')
    def get_Count(self):
        '''Method ITinTriangleArray.get_Count

           OUTPUT
            pCount              : long*'''
        return super(ITinTriangleArray, self).get_Count()
    def Remove(self, Index):
        '''Method ITinTriangleArray.Remove

           INPUT
            Index               : long'''
        return super(ITinTriangleArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method ITinTriangleArray.RemoveAll'''
        return super(ITinTriangleArray, self).RemoveAll()
    def get_Element(self, Index):
        '''Method ITinTriangleArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinTriangleArray, self).get_Element(Index)
    def Add(self, pTriangle):
        '''Method ITinTriangleArray.Add

           INPUT
            pTriangle           : ITinTriangle*'''
        return super(ITinTriangleArray, self).Add(pTriangle)
    def Insert(self, Index, pTriangle):
        '''Method ITinTriangleArray.Insert

           INPUTS
            Index               : long
            pTriangle           : ITinTriangle*'''
        return super(ITinTriangleArray, self).Insert(Index, pTriangle)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ITinNode2(_esriGeoDatabase.ITinNode2):
    _IID = uuid.UUID('3d212052-ad4b-11d5-abb8-0008c73fd50c')
    def get_Source(self):
        '''Method ITinNode2.get_Source

           OUTPUT
            pSource             : esriTinNodeSourceType*'''
        return super(ITinNode2, self).get_Source()
    def get_Degree(self, bEnforcedEdgesOnly):
        '''Method ITinNode2.get_Degree

           INPUT
            bEnforcedEdgesOnly  : VARIANT_BOOL

           OUTPUT
            pDegree             : long*'''
        return super(ITinNode2, self).get_Degree(bEnforcedEdgesOnly)
    def get_IsOnDomainBoundary(self):
        '''Method ITinNode2.get_IsOnDomainBoundary

           OUTPUT
            pbIsOn              : VARIANT_BOOL*'''
        return super(ITinNode2, self).get_IsOnDomainBoundary()
    def QueryAdjacentNodeIndices(self, pNodes):
        '''Method ITinNode2.QueryAdjacentNodeIndices

           INPUT
            pNodes              : ILongArray*'''
        return super(ITinNode2, self).QueryAdjacentNodeIndices(pNodes)
    def QueryIncidentEdgeIndices(self, pEdges):
        '''Method ITinNode2.QueryIncidentEdgeIndices

           INPUT
            pEdges              : ILongArray*'''
        return super(ITinNode2, self).QueryIncidentEdgeIndices(pEdges)
    def QueryIncidentTriangleIndices(self, pTriangles):
        '''Method ITinNode2.QueryIncidentTriangleIndices

           INPUT
            pTriangles          : ILongArray*'''
        return super(ITinNode2, self).QueryIncidentTriangleIndices(pTriangles)
    def IncidentTriangle(self):
        '''Method ITinNode2.IncidentTriangle

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinNode2, self).IncidentTriangle()
    def IncidentTriangleIndex(self):
        '''Method ITinNode2.IncidentTriangleIndex

           OUTPUT
            pTriangle           : long*'''
        return super(ITinNode2, self).IncidentTriangleIndex()
    def get_X(self):
        '''Method ITinNode.get_X (from ITinNode)

           OUTPUT
            X                   : double*'''
        return super(ITinNode2, self).get_X()
    def get_Y(self):
        '''Method ITinNode.get_Y (from ITinNode)

           OUTPUT
            Y                   : double*'''
        return super(ITinNode2, self).get_Y()
    def get_Z(self):
        '''Method ITinNode.get_Z (from ITinNode)

           OUTPUT
            Z                   : double*'''
        return super(ITinNode2, self).get_Z()
    def QueryAsPoint(self, pPoint):
        '''Method ITinNode.QueryAsPoint (from ITinNode)

           INPUT
            pPoint              : IPoint*'''
        return super(ITinNode2, self).QueryAsPoint(pPoint)
    def QueryAsWKSPointZ(self):
        '''Method ITinNode.QueryAsWKSPointZ (from ITinNode)

           OUTPUT
            pPoint              : WKSPointZ*'''
        return super(ITinNode2, self).QueryAsWKSPointZ()
    def GetAdjacentNodes(self):
        '''Method ITinNode.GetAdjacentNodes (from ITinNode)

           OUTPUT
            ppNodes             : ITinNodeArray**'''
        return super(ITinNode2, self).GetAdjacentNodes()
    def GetIncidentEdges(self):
        '''Method ITinNode.GetIncidentEdges (from ITinNode)

           OUTPUT
            ppEdges             : ITinEdgeArray**'''
        return super(ITinNode2, self).GetIncidentEdges()
    def GetIncidentTriangles(self):
        '''Method ITinNode.GetIncidentTriangles (from ITinNode)

           OUTPUT
            ppTriangles         : ITinTriangleArray**'''
        return super(ITinNode2, self).GetIncidentTriangles()
    def GetVoronoiRegion(self, pClippingPolygon):
        '''Method ITinNode.GetVoronoiRegion (from ITinNode)

           INPUT
            pClippingPolygon    : IPolygon*

           OUTPUT
            ppRegion            : IPolygon**'''
        return super(ITinNode2, self).GetVoronoiRegion(pClippingPolygon)
    def IsSameNode(self, pNode):
        '''Method ITinNode.IsSameNode (from ITinNode)

           INPUT
            pNode               : ITinNode*

           OUTPUT
            pbIsTheSame         : VARIANT_BOOL*'''
        return super(ITinNode2, self).IsSameNode(pNode)
    def get_IsEmpty(self):
        '''Method ITinElement.get_IsEmpty (from ITinElement)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinNode2, self).get_IsEmpty()
    def get_TheTin(self):
        '''Method ITinElement.get_TheTin (from ITinElement)

           OUTPUT
            ppTin               : ITin**'''
        return super(ITinNode2, self).get_TheTin()
    def get_Index(self):
        '''Method ITinElement.get_Index (from ITinElement)

           OUTPUT
            pIndex              : long*'''
        return super(ITinNode2, self).get_Index()
    def get_TagValue(self):
        '''Method ITinElement.get_TagValue (from ITinElement)

           OUTPUT
            pValue              : long*'''
        return super(ITinNode2, self).get_TagValue()
    def SetEmpty(self):
        '''Method ITinElement.SetEmpty (from ITinElement)'''
        return super(ITinNode2, self).SetEmpty()
    def Init(self, pTin, Index):
        '''Method ITinElement.Init (from ITinElement)

           INPUTS
            pTin                : ITin*
            Index               : long'''
        return super(ITinNode2, self).Init(pTin, Index)
    def get_IsInsideDataArea(self):
        '''Method ITinElement.get_IsInsideDataArea (from ITinElement)

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinNode2, self).get_IsInsideDataArea()
    def get_HasVoidZ(self):
        '''Method ITinElement.get_HasVoidZ (from ITinElement)

           OUTPUT
            pbHasVoidZ          : VARIANT_BOOL*'''
        return super(ITinNode2, self).get_HasVoidZ()
    def get_IsInsideExtent(self, pExtent):
        '''Method ITinElement.get_IsInsideExtent (from ITinElement)

           INPUT
            pExtent             : IEnvelope*

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinNode2, self).get_IsInsideExtent(pExtent)
    HasVoidZ = property(get_HasVoidZ, None, None)
    Index = property(get_Index, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsInsideDataArea = property(get_IsInsideDataArea, None, None)
    IsOnDomainBoundary = property(get_IsOnDomainBoundary, None, None)
    Source = property(get_Source, None, None)
    TagValue = property(get_TagValue, None, None)
    TheTin = property(get_TheTin, None, None)
    X = property(get_X, None, None)
    Y = property(get_Y, None, None)
    Z = property(get_Z, None, None)
    Degree = IndexProperty(get_Degree, None)
    IsInsideExtent = IndexProperty(get_IsInsideExtent, None)

class IEnumTinEdge(_esriGeoDatabase.IEnumTinEdge):
    _IID = uuid.UUID('6bfa889d-bf0d-11d3-ab4f-0008c73fd50c')
    def Reset(self):
        '''Method IEnumTinEdge.Reset'''
        return super(IEnumTinEdge, self).Reset()
    def Next(self):
        '''Method IEnumTinEdge.Next

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(IEnumTinEdge, self).Next()
    def __iter__(self):
        try:
            super(IEnumTinEdge, self).Reset()
            val = super(IEnumTinEdge, self).Next()
            while val:
                yield val
                val = super(IEnumTinEdge, self).Next()
        except:
            pass
    def QueryNext(self, pEdge):
        '''Method IEnumTinEdge.QueryNext

           INPUT
            pEdge               : ITinEdge*'''
        return super(IEnumTinEdge, self).QueryNext(pEdge)
    def QueryNextAsWKSPointZs(self):
        '''Method IEnumTinEdge.QueryNextAsWKSPointZs

           OUTPUTS
            pFrom               : WKSPointZ*
            pTo                 : WKSPointZ*
            pbIsEnd             : VARIANT_BOOL*'''
        return super(IEnumTinEdge, self).QueryNextAsWKSPointZs()
    def QueryNextAsWKSPointZs2(self):
        '''Method IEnumTinEdge.QueryNextAsWKSPointZs2

           OUTPUTS
            pTriangleIndex      : long*
            pEdgeIndex          : long*
            pFrom               : WKSPointZ*
            pTo                 : WKSPointZ*
            pbIsEnd             : VARIANT_BOOL*'''
        return super(IEnumTinEdge, self).QueryNextAsWKSPointZs2()

class IEnumTinTriangle(_esriGeoDatabase.IEnumTinTriangle):
    _IID = uuid.UUID('6bfa889e-bf0d-11d3-ab4f-0008c73fd50c')
    def Reset(self):
        '''Method IEnumTinTriangle.Reset'''
        return super(IEnumTinTriangle, self).Reset()
    def Next(self):
        '''Method IEnumTinTriangle.Next

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(IEnumTinTriangle, self).Next()
    def __iter__(self):
        try:
            super(IEnumTinTriangle, self).Reset()
            val = super(IEnumTinTriangle, self).Next()
            while val:
                yield val
                val = super(IEnumTinTriangle, self).Next()
        except:
            pass
    def QueryNext(self, pTriangle):
        '''Method IEnumTinTriangle.QueryNext

           INPUT
            pTriangle           : ITinTriangle*'''
        return super(IEnumTinTriangle, self).QueryNext(pTriangle)
    def QueryNextAsWKSPointZs(self):
        '''Method IEnumTinTriangle.QueryNextAsWKSPointZs

           OUTPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*
            pbIsEnd             : VARIANT_BOOL*'''
        return super(IEnumTinTriangle, self).QueryNextAsWKSPointZs()
    def QueryNextAsWKSPointZs2(self):
        '''Method IEnumTinTriangle.QueryNextAsWKSPointZs2

           OUTPUTS
            pTriangleIndex      : long*
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*
            pbIsEnd             : VARIANT_BOOL*'''
        return super(IEnumTinTriangle, self).QueryNextAsWKSPointZs2()
    def NextTriangleStrip(self, maxSize):
        '''Method IEnumTinTriangle.NextTriangleStrip

           INPUT
            maxSize             : long

           OUTPUT
            ppNodes             : ITinNodeArray**'''
        return super(IEnumTinTriangle, self).NextTriangleStrip(maxSize)
    def NextTriangleStripIndices(self, maxSize):
        '''Method IEnumTinTriangle.NextTriangleStripIndices

           INPUT
            maxSize             : long

           OUTPUT
            ppNodes             : ILongArray**'''
        return super(IEnumTinTriangle, self).NextTriangleStripIndices(maxSize)

class ITinPolygon(_esriGeoDatabase.ITinPolygon):
    _IID = uuid.UUID('addda5ca-a214-11d3-ab4b-0008c73fd50c')
    def AsNodes(self):
        '''Method ITinPolygon.AsNodes

           OUTPUT
            ppNodes             : IEnumTinNode**'''
        return super(ITinPolygon, self).AsNodes()
    def AsEdges(self):
        '''Method ITinPolygon.AsEdges

           OUTPUT
            ppEdges             : IEnumTinEdge**'''
        return super(ITinPolygon, self).AsEdges()
    def AsTriangles(self):
        '''Method ITinPolygon.AsTriangles

           OUTPUT
            ppTriangles         : IEnumTinTriangle**'''
        return super(ITinPolygon, self).AsTriangles()
    def AsPolygon(self, pNodeFilter, bGetZ):
        '''Method ITinPolygon.AsPolygon

           INPUTS
            pNodeFilter         : ITinFilter*
            bGetZ               : VARIANT_BOOL

           OUTPUT
            ppPolygon           : IPolygon**'''
        return super(ITinPolygon, self).AsPolygon(pNodeFilter, bGetZ)
    def GetBoundaryEdgeType(self):
        '''Method ITinPolygon.GetBoundaryEdgeType

           OUTPUT
            pType               : esriTinEdgeType*'''
        return super(ITinPolygon, self).GetBoundaryEdgeType()

class ITinPolyline(_esriGeoDatabase.ITinPolyline):
    _IID = uuid.UUID('83a9e75c-a212-11d3-ab4b-0008c73fd50c')
    def AsNodes(self):
        '''Method ITinPolyline.AsNodes

           OUTPUT
            ppNodes             : IEnumTinNode**'''
        return super(ITinPolyline, self).AsNodes()
    def AsEdges(self):
        '''Method ITinPolyline.AsEdges

           OUTPUT
            ppEdges             : IEnumTinEdge**'''
        return super(ITinPolyline, self).AsEdges()
    def AsPolyline(self, pNodeFilter, bGetZ):
        '''Method ITinPolyline.AsPolyline

           INPUTS
            pNodeFilter         : ITinFilter*
            bGetZ               : VARIANT_BOOL

           OUTPUT
            ppPolyline          : IPolyline**'''
        return super(ITinPolyline, self).AsPolyline(pNodeFilter, bGetZ)

class ITinAdvanced(_esriGeoDatabase.ITinAdvanced):
    _IID = uuid.UUID('a8523ee8-7b16-11d2-9f4b-00c04f8ece27')

    def __init__(self, *args, **kw):
        super(ITinAdvanced, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TrackCancel(self):
        '''Method ITinAdvanced.get_TrackCancel

           OUTPUT
            ppTrackCancle       : ITrackCancel**'''
        return super(ITinAdvanced, self).get_TrackCancel()
    def putref_TrackCancel(self, ppTrackCancle):
        '''Method ITinAdvanced.putref_TrackCancel

           INPUT
            ppTrackCancle       : ITrackCancel*'''
        return super(ITinAdvanced, self).putref_TrackCancel(ppTrackCancle)
    def get_ProcessCancelled(self):
        '''Method ITinAdvanced.get_ProcessCancelled

           OUTPUT
            pbCancelled         : VARIANT_BOOL*'''
        return super(ITinAdvanced, self).get_ProcessCancelled()
    def put_ProcessCancelled(self, pbCancelled):
        '''Method ITinAdvanced.put_ProcessCancelled

           INPUT
            pbCancelled         : VARIANT_BOOL'''
        return super(ITinAdvanced, self).put_ProcessCancelled(pbCancelled)
    def get_Surface(self):
        '''Method ITinAdvanced.get_Surface

           OUTPUT
            ppSurface           : ISurface**'''
        return super(ITinAdvanced, self).get_Surface()
    def SetEmpty(self):
        '''Method ITinAdvanced.SetEmpty'''
        return super(ITinAdvanced, self).SetEmpty()
    def Init(self, Name):
        '''Method ITinAdvanced.Init

           INPUT
            Name                : BSTR'''
        return super(ITinAdvanced, self).Init(Name)
    def put_Flag(self, pFlag):
        '''Method ITinAdvanced.put_Flag

           INPUT
            pFlag               : long'''
        return super(ITinAdvanced, self).put_Flag(pFlag)
    def get_Flag(self):
        '''Method ITinAdvanced.get_Flag

           OUTPUT
            pFlag               : long*'''
        return super(ITinAdvanced, self).get_Flag()
    def get_FullExtent(self):
        '''Method ITinAdvanced.get_FullExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ITinAdvanced, self).get_FullExtent()
    def get_SuperNodeExtent(self):
        '''Method ITinAdvanced.get_SuperNodeExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ITinAdvanced, self).get_SuperNodeExtent()
    def IsVoidZ(self, Value):
        '''Method ITinAdvanced.IsVoidZ

           INPUT
            Value               : double

           OUTPUT
            pbIsVoid            : VARIANT_BOOL*'''
        return super(ITinAdvanced, self).IsVoidZ(Value)
    def MakeNodeEnumerator(self, pAreaOfInterest, Criteria, pFilter):
        '''Method ITinAdvanced.MakeNodeEnumerator

           INPUTS
            pAreaOfInterest     : IEnvelope*
            Criteria            : long
            pFilter             : ITinFilter*

           OUTPUT
            ppEnumerator        : IEnumTinNode**'''
        return super(ITinAdvanced, self).MakeNodeEnumerator(pAreaOfInterest, Criteria, pFilter)
    def MakeEdgeEnumerator(self, pAreaOfInterest, Criteria, pFilter):
        '''Method ITinAdvanced.MakeEdgeEnumerator

           INPUTS
            pAreaOfInterest     : IEnvelope*
            Criteria            : long
            pFilter             : ITinFilter*

           OUTPUT
            ppEnumerator        : IEnumTinEdge**'''
        return super(ITinAdvanced, self).MakeEdgeEnumerator(pAreaOfInterest, Criteria, pFilter)
    def MakeTriangleEnumerator(self, pAreaOfInterest, Criteria, pFilter):
        '''Method ITinAdvanced.MakeTriangleEnumerator

           INPUTS
            pAreaOfInterest     : IEnvelope*
            Criteria            : long
            pFilter             : ITinFilter*

           OUTPUT
            ppEnumerator        : IEnumTinTriangle**'''
        return super(ITinAdvanced, self).MakeTriangleEnumerator(pAreaOfInterest, Criteria, pFilter)
    def get_NodeCount(self):
        '''Method ITinAdvanced.get_NodeCount

           OUTPUT
            pcNodes             : long*'''
        return super(ITinAdvanced, self).get_NodeCount()
    def GetNode(self, Index):
        '''Method ITinAdvanced.GetNode

           INPUT
            Index               : long

           OUTPUT
            ppNode              : ITinNode**'''
        return super(ITinAdvanced, self).GetNode(Index)
    def QueryNode(self, Index, pNode):
        '''Method ITinAdvanced.QueryNode

           INPUTS
            Index               : long
            pNode               : ITinNode*'''
        return super(ITinAdvanced, self).QueryNode(Index, pNode)
    def QueryNodeAsPoint(self, Index, pPoint):
        '''Method ITinAdvanced.QueryNodeAsPoint

           INPUTS
            Index               : long
            pPoint              : IPoint*'''
        return super(ITinAdvanced, self).QueryNodeAsPoint(Index, pPoint)
    def QueryNodeAsWKSPointZ(self, Index):
        '''Method ITinAdvanced.QueryNodeAsWKSPointZ

           INPUT
            Index               : long

           OUTPUT
            pPoint              : WKSPointZ*'''
        return super(ITinAdvanced, self).QueryNodeAsWKSPointZ(Index)
    def GetNodeZ(self, Index):
        '''Method ITinAdvanced.GetNodeZ

           INPUT
            Index               : long

           OUTPUT
            pZ                  : double*'''
        return super(ITinAdvanced, self).GetNodeZ(Index)
    def GetNodeTagValue(self, Index):
        '''Method ITinAdvanced.GetNodeTagValue

           INPUT
            Index               : long

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced, self).GetNodeTagValue(Index)
    def get_EdgeCount(self):
        '''Method ITinAdvanced.get_EdgeCount

           OUTPUT
            pcEdges             : long*'''
        return super(ITinAdvanced, self).get_EdgeCount()
    def GetEdge(self, Index):
        '''Method ITinAdvanced.GetEdge

           INPUT
            Index               : long

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinAdvanced, self).GetEdge(Index)
    def QueryEdge(self, Index, pEdge):
        '''Method ITinAdvanced.QueryEdge

           INPUTS
            Index               : long
            pEdge               : ITinEdge*'''
        return super(ITinAdvanced, self).QueryEdge(Index, pEdge)
    def QueryEdgeAsLine(self, Index, pLine):
        '''Method ITinAdvanced.QueryEdgeAsLine

           INPUTS
            Index               : long
            pLine               : ILine*'''
        return super(ITinAdvanced, self).QueryEdgeAsLine(Index, pLine)
    def QueryEdgeAsWKSPointZs(self, Index):
        '''Method ITinAdvanced.QueryEdgeAsWKSPointZs

           INPUT
            Index               : long

           OUTPUTS
            pFrom               : WKSPointZ*
            pTo                 : WKSPointZ*'''
        return super(ITinAdvanced, self).QueryEdgeAsWKSPointZs(Index)
    def GetEdgeTagValue(self, Index):
        '''Method ITinAdvanced.GetEdgeTagValue

           INPUT
            Index               : long

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced, self).GetEdgeTagValue(Index)
    def GetEdgeType(self, edgeIndex):
        '''Method ITinAdvanced.GetEdgeType

           INPUT
            edgeIndex           : long

           OUTPUT
            pType               : esriTinEdgeType*'''
        return super(ITinAdvanced, self).GetEdgeType(edgeIndex)
    def get_TriangleCount(self):
        '''Method ITinAdvanced.get_TriangleCount

           OUTPUT
            pcTriangles         : long*'''
        return super(ITinAdvanced, self).get_TriangleCount()
    def GetTriangle(self, Index):
        '''Method ITinAdvanced.GetTriangle

           INPUT
            Index               : long

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinAdvanced, self).GetTriangle(Index)
    def QueryTriangle(self, Index, pTriangle):
        '''Method ITinAdvanced.QueryTriangle

           INPUTS
            Index               : long
            pTriangle           : ITinTriangle*'''
        return super(ITinAdvanced, self).QueryTriangle(Index, pTriangle)
    def QueryTriangleAsRing(self, Index, pRing):
        '''Method ITinAdvanced.QueryTriangleAsRing

           INPUTS
            Index               : long
            pRing               : IRing*'''
        return super(ITinAdvanced, self).QueryTriangleAsRing(Index, pRing)
    def QueryTriangleAsWKSPointZs(self, Index):
        '''Method ITinAdvanced.QueryTriangleAsWKSPointZs

           INPUT
            Index               : long

           OUTPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*'''
        return super(ITinAdvanced, self).QueryTriangleAsWKSPointZs(Index)
    def GetTriangleTagValue(self, Index):
        '''Method ITinAdvanced.GetTriangleTagValue

           INPUT
            Index               : long

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced, self).GetTriangleTagValue(Index)
    def QueryNearestNode(self, pPoint, pNode, pDistance):
        '''Method ITinAdvanced.QueryNearestNode

           INPUTS
            pPoint              : IPoint*
            pNode               : ITinNode*
            pDistance           : double*'''
        return super(ITinAdvanced, self).QueryNearestNode(pPoint, pNode, pDistance)
    def QueryNearestEdge(self, pPoint, pEdge, pDistance):
        '''Method ITinAdvanced.QueryNearestEdge

           INPUTS
            pPoint              : IPoint*
            pEdge               : ITinEdge*
            pDistance           : double*'''
        return super(ITinAdvanced, self).QueryNearestEdge(pPoint, pEdge, pDistance)
    def FindTriangle(self, pPoint):
        '''Method ITinAdvanced.FindTriangle

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinAdvanced, self).FindTriangle(pPoint)
    def FindNaturalNeighbors(self, pPoint):
        '''Method ITinAdvanced.FindNaturalNeighbors

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppNodes             : ITinNodeArray**'''
        return super(ITinAdvanced, self).FindNaturalNeighbors(pPoint)
    def FindTriangleNeighborhood(self, pPoint):
        '''Method ITinAdvanced.FindTriangleNeighborhood

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppTriangles         : ITinTriangleArray**'''
        return super(ITinAdvanced, self).FindTriangleNeighborhood(pPoint)
    def ExtractPolyline(self, pSeed, pFilter):
        '''Method ITinAdvanced.ExtractPolyline

           INPUTS
            pSeed               : ITinEdge*
            pFilter             : ITinFilter*

           OUTPUT
            ppPolyline          : ITinPolyline**'''
        return super(ITinAdvanced, self).ExtractPolyline(pSeed, pFilter)
    def ExtractPolygon(self, pSeed, pFilter, bStopAtEnforcedEdge):
        '''Method ITinAdvanced.ExtractPolygon

           INPUTS
            pSeed               : ITinElement*
            pFilter             : ITinFilter*
            bStopAtEnforcedEdge : VARIANT_BOOL

           OUTPUT
            ppPolygon           : ITinPolygon**'''
        return super(ITinAdvanced, self).ExtractPolygon(pSeed, pFilter, bStopAtEnforcedEdge)
    def GetTriangleSeeds(self, pFilter, bStopAtEnforcedEdge):
        '''Method ITinAdvanced.GetTriangleSeeds

           INPUTS
            pFilter             : ITinDynamicFilter*
            bStopAtEnforcedEdge : VARIANT_BOOL

           OUTPUT
            ppTriangles         : IEnumTinTriangle**'''
        return super(ITinAdvanced, self).GetTriangleSeeds(pFilter, bStopAtEnforcedEdge)
    def ConvertToPolygons(self, pFeatureClass, pFilter, bStopAtEnforcedEdge, pFieldName):
        '''Method ITinAdvanced.ConvertToPolygons

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : ITinDynamicFilter*
            bStopAtEnforcedEdge : VARIANT_BOOL
            pFieldName          : VARIANT*'''
        return super(ITinAdvanced, self).ConvertToPolygons(pFeatureClass, pFilter, bStopAtEnforcedEdge, pFieldName)
    def GetDataArea(self):
        '''Method ITinAdvanced.GetDataArea

           OUTPUT
            ppArea              : IPolygon**'''
        return super(ITinAdvanced, self).GetDataArea()
    def get_UniqueTagValueCount(self, Type):
        '''Method ITinAdvanced.get_UniqueTagValueCount

           INPUT
            Type                : esriTinElementType

           OUTPUT
            pCount              : long*'''
        return super(ITinAdvanced, self).get_UniqueTagValueCount(Type)
    def GetUniqueTagValues(self, Type):
        '''Method ITinAdvanced.GetUniqueTagValues

           INPUT
            Type                : esriTinElementType

           OUTPUT
            ppValues            : ILongArray**'''
        return super(ITinAdvanced, self).GetUniqueTagValues(Type)
    def GenerateUniqueTagValue(self, Type):
        '''Method ITinAdvanced.GenerateUniqueTagValue

           INPUT
            Type                : esriTinElementType

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced, self).GenerateUniqueTagValue(Type)
    def get_IsEmpty(self):
        '''Method ITin.get_IsEmpty (from ITin)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinAdvanced, self).get_IsEmpty()
    def get_IsDelaunay(self):
        '''Method ITin.get_IsDelaunay (from ITin)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinAdvanced, self).get_IsDelaunay()
    def SaveAs(self, newName, pOverWrite):
        '''Method ITin.SaveAs (from ITin)

           INPUTS
            newName             : BSTR
            pOverWrite          : VARIANT*'''
        return super(ITinAdvanced, self).SaveAs(newName, pOverWrite)
    def get_Extent(self):
        '''Method ITin.get_Extent (from ITin)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ITinAdvanced, self).get_Extent()
    def get_DataNodeCount(self):
        '''Method ITin.get_DataNodeCount (from ITin)

           OUTPUT
            pcNodes             : long*'''
        return super(ITinAdvanced, self).get_DataNodeCount()
    def get_DataEdgeCount(self):
        '''Method ITin.get_DataEdgeCount (from ITin)

           OUTPUT
            pcEdges             : long*'''
        return super(ITinAdvanced, self).get_DataEdgeCount()
    def get_DataTriangleCount(self):
        '''Method ITin.get_DataTriangleCount (from ITin)

           OUTPUT
            pcTriangles         : long*'''
        return super(ITinAdvanced, self).get_DataTriangleCount()
    def get_ZFactor(self):
        '''Method ITin.get_ZFactor (from ITin)

           OUTPUT
            pFactor             : double*'''
        return super(ITinAdvanced, self).get_ZFactor()
    def put_ZFactor(self, pFactor):
        '''Method ITin.put_ZFactor (from ITin)

           INPUT
            pFactor             : double'''
        return super(ITinAdvanced, self).put_ZFactor(pFactor)
    def get_Version(self):
        '''Method ITin.get_Version (from ITin)

           OUTPUT
            pVer                : long*'''
        return super(ITinAdvanced, self).get_Version()
    def get_HasNodeTagValues(self):
        '''Method ITin.get_HasNodeTagValues (from ITin)

           OUTPUT
            pbHasNodeValues     : VARIANT_BOOL*'''
        return super(ITinAdvanced, self).get_HasNodeTagValues()
    def get_HasEdgeTagValues(self):
        '''Method ITin.get_HasEdgeTagValues (from ITin)

           OUTPUT
            pbHasEdgeValues     : VARIANT_BOOL*'''
        return super(ITinAdvanced, self).get_HasEdgeTagValues()
    def get_HasTriangleTagValues(self):
        '''Method ITin.get_HasTriangleTagValues (from ITin)

           OUTPUT
            pbHasTriangleValues : VARIANT_BOOL*'''
        return super(ITinAdvanced, self).get_HasTriangleTagValues()
    def get_Fields(self):
        '''Method ITin.get_Fields (from ITin)

           OUTPUT
            Fields              : IFields**'''
        return super(ITinAdvanced, self).get_Fields()
    DataEdgeCount = property(get_DataEdgeCount, None, None)
    DataNodeCount = property(get_DataNodeCount, None, None)
    DataTriangleCount = property(get_DataTriangleCount, None, None)
    EdgeCount = property(get_EdgeCount, None, None)
    Extent = property(get_Extent, None, None)
    Fields = property(get_Fields, None, None)
    Flag = property(get_Flag, put_Flag, None)
    FullExtent = property(get_FullExtent, None, None)
    HasEdgeTagValues = property(get_HasEdgeTagValues, None, None)
    HasNodeTagValues = property(get_HasNodeTagValues, None, None)
    HasTriangleTagValues = property(get_HasTriangleTagValues, None, None)
    IsDelaunay = property(get_IsDelaunay, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    NodeCount = property(get_NodeCount, None, None)
    ProcessCancelled = property(get_ProcessCancelled, put_ProcessCancelled, None)
    SuperNodeExtent = property(get_SuperNodeExtent, None, None)
    Surface = property(get_Surface, None, None)
    TrackCancel = property(get_TrackCancel, putref_TrackCancel, None)
    TriangleCount = property(get_TriangleCount, None, None)
    Version = property(get_Version, None, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)
    UniqueTagValueCount = IndexProperty(get_UniqueTagValueCount, None)

class ITinAdvanced2(_esriGeoDatabase.ITinAdvanced2):
    _IID = uuid.UUID('23ffd401-973f-11d5-8111-00c04fa0adf8')

    def __init__(self, *args, **kw):
        super(ITinAdvanced2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetNodeSource(self, nodeIndex):
        '''Method ITinAdvanced2.GetNodeSource

           INPUT
            nodeIndex           : long

           OUTPUT
            pSource             : esriTinNodeSourceType*'''
        return super(ITinAdvanced2, self).GetNodeSource(nodeIndex)
    def GetNodeSourceCounts(self):
        '''Method ITinAdvanced2.GetNodeSourceCounts

           OUTPUTS
            pcOriginal          : long*
            pcSuper             : long*
            pcDensified         : long*
            pcIntersection      : long*
            pcUnknown           : long*'''
        return super(ITinAdvanced2, self).GetNodeSourceCounts()
    def GetNodeDegree(self, nodeIndex, bEnforcedEdgesOnly):
        '''Method ITinAdvanced2.GetNodeDegree

           INPUTS
            nodeIndex           : long
            bEnforcedEdgesOnly  : VARIANT_BOOL

           OUTPUT
            pDegree             : long*'''
        return super(ITinAdvanced2, self).GetNodeDegree(nodeIndex, bEnforcedEdgesOnly)
    def IsNodeOnDomainBoundary(self, nodeIndex):
        '''Method ITinAdvanced2.IsNodeOnDomainBoundary

           INPUT
            nodeIndex           : long

           OUTPUT
            pbIsOn              : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).IsNodeOnDomainBoundary(nodeIndex)
    def GetSpecialEdgeCounts(self):
        '''Method ITinAdvanced2.GetSpecialEdgeCounts

           OUTPUTS
            pcHardDataEdges     : long*
            pcSoftDataEdges     : long*
            pcTagValueDataEdges : long*'''
        return super(ITinAdvanced2, self).GetSpecialEdgeCounts()
    def HasEdgeType(self, Type):
        '''Method ITinAdvanced2.HasEdgeType

           INPUT
            Type                : esriTinEdgeType

           OUTPUT
            pbHasType           : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).HasEdgeType(Type)
    def GetLeftTriangleIndex(self, edgeIndex):
        '''Method ITinAdvanced2.GetLeftTriangleIndex

           INPUT
            edgeIndex           : long

           OUTPUT
            pTriangle           : long*'''
        return super(ITinAdvanced2, self).GetLeftTriangleIndex(edgeIndex)
    def GetRightTriangleIndex(self, edgeIndex):
        '''Method ITinAdvanced2.GetRightTriangleIndex

           INPUT
            edgeIndex           : long

           OUTPUT
            pTriangle           : long*'''
        return super(ITinAdvanced2, self).GetRightTriangleIndex(edgeIndex)
    def QueryBeginEndNodeIndices(self, edgeIndex):
        '''Method ITinAdvanced2.QueryBeginEndNodeIndices

           INPUT
            edgeIndex           : long

           OUTPUTS
            pBegin              : long*
            pEnd                : long*'''
        return super(ITinAdvanced2, self).QueryBeginEndNodeIndices(edgeIndex)
    def GetNeighborEdgeIndex(self, edgeIndex):
        '''Method ITinAdvanced2.GetNeighborEdgeIndex

           INPUT
            edgeIndex           : long

           OUTPUT
            pNeighbor           : long*'''
        return super(ITinAdvanced2, self).GetNeighborEdgeIndex(edgeIndex)
    def QueryTriangleNodeIndices(self, triangleIndex):
        '''Method ITinAdvanced2.QueryTriangleNodeIndices

           INPUT
            triangleIndex       : long

           OUTPUTS
            pA                  : long*
            pB                  : long*
            pC                  : long*'''
        return super(ITinAdvanced2, self).QueryTriangleNodeIndices(triangleIndex)
    def QueryTriangleEdgeIndices(self, triangleIndex):
        '''Method ITinAdvanced2.QueryTriangleEdgeIndices

           INPUT
            triangleIndex       : long

           OUTPUTS
            pA                  : long*
            pB                  : long*
            pC                  : long*'''
        return super(ITinAdvanced2, self).QueryTriangleEdgeIndices(triangleIndex)
    def QueryNodeIndicesAroundNode(self, nodeIndex, pNodes):
        '''Method ITinAdvanced2.QueryNodeIndicesAroundNode

           INPUTS
            nodeIndex           : long
            pNodes              : ILongArray*'''
        return super(ITinAdvanced2, self).QueryNodeIndicesAroundNode(nodeIndex, pNodes)
    def QueryEdgeIndicesAroundNode(self, nodeIndex, pEdges):
        '''Method ITinAdvanced2.QueryEdgeIndicesAroundNode

           INPUTS
            nodeIndex           : long
            pEdges              : ILongArray*'''
        return super(ITinAdvanced2, self).QueryEdgeIndicesAroundNode(nodeIndex, pEdges)
    def QueryAllEdgeIndicesAroundNode(self, nodeIndex, pEdges):
        '''Method ITinAdvanced2.QueryAllEdgeIndicesAroundNode

           INPUTS
            nodeIndex           : long
            pEdges              : ILongArray*'''
        return super(ITinAdvanced2, self).QueryAllEdgeIndicesAroundNode(nodeIndex, pEdges)
    def QueryTriangleIndicesAroundNode(self, nodeIndex, pTriangles):
        '''Method ITinAdvanced2.QueryTriangleIndicesAroundNode

           INPUTS
            nodeIndex           : long
            pTriangles          : ILongArray*'''
        return super(ITinAdvanced2, self).QueryTriangleIndicesAroundNode(nodeIndex, pTriangles)
    def QueryNaturalNeighborIndices(self, pPoint, pNodes):
        '''Method ITinAdvanced2.QueryNaturalNeighborIndices

           INPUTS
            pPoint              : IPoint*
            pNodes              : ILongArray*'''
        return super(ITinAdvanced2, self).QueryNaturalNeighborIndices(pPoint, pNodes)
    def QueryTriangleNeighborhoodIndices(self, pPoint, pTriangles):
        '''Method ITinAdvanced2.QueryTriangleNeighborhoodIndices

           INPUTS
            pPoint              : IPoint*
            pTriangles          : ILongArray*'''
        return super(ITinAdvanced2, self).QueryTriangleNeighborhoodIndices(pPoint, pTriangles)
    def QueryElementAsGeometry(self, Type, Index, pGeometry):
        '''Method ITinAdvanced2.QueryElementAsGeometry

           INPUTS
            Type                : esriTinElementType
            Index               : long
            pGeometry           : IGeometry*'''
        return super(ITinAdvanced2, self).QueryElementAsGeometry(Type, Index, pGeometry)
    def QueryNeighborsAndWeights(self, X, Y, pNeighbors, pWeights):
        '''Method ITinAdvanced2.QueryNeighborsAndWeights

           INPUTS
            X                   : double
            Y                   : double
            pNeighbors          : ILongArray*
            pWeights            : IDoubleArray*'''
        return super(ITinAdvanced2, self).QueryNeighborsAndWeights(X, Y, pNeighbors, pWeights)
    def FindTriangleIndex(self, pPoint):
        '''Method ITinAdvanced2.FindTriangleIndex

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pTriangle           : long*'''
        return super(ITinAdvanced2, self).FindTriangleIndex(pPoint)
    def IsTriangleInsideDataArea(self, triangleIndex):
        '''Method ITinAdvanced2.IsTriangleInsideDataArea

           INPUT
            triangleIndex       : long

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).IsTriangleInsideDataArea(triangleIndex)
    def IsEdgeInsideDataArea(self, edgeIndex):
        '''Method ITinAdvanced2.IsEdgeInsideDataArea

           INPUT
            edgeIndex           : long

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).IsEdgeInsideDataArea(edgeIndex)
    def IsNodeInsideDataArea(self, nodeIndex):
        '''Method ITinAdvanced2.IsNodeInsideDataArea

           INPUT
            nodeIndex           : long

           OUTPUT
            pbIsInside          : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).IsNodeInsideDataArea(nodeIndex)
    def GetCountedUniqueTagValues(self, Type):
        '''Method ITinAdvanced2.GetCountedUniqueTagValues

           INPUT
            Type                : esriTinElementType

           OUTPUTS
            ppValues            : ILongArray**
            ppCounts            : ILongArray**'''
        return super(ITinAdvanced2, self).GetCountedUniqueTagValues(Type)
    def GetNaturalNeighborZ(self, X, Y):
        '''Method ITinAdvanced2.GetNaturalNeighborZ

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            pZ                  : double*'''
        return super(ITinAdvanced2, self).GetNaturalNeighborZ(X, Y)
    def ConvertToPolylines(self, pFeatureClass, pFilter, pFieldName):
        '''Method ITinAdvanced2.ConvertToPolylines

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : ITinDynamicFilter*
            pFieldName          : VARIANT*'''
        return super(ITinAdvanced2, self).ConvertToPolylines(pFeatureClass, pFilter, pFieldName)
    def SaveAsVersion(self, newName, ver, pOverWrite):
        '''Method ITinAdvanced2.SaveAsVersion

           INPUTS
            newName             : BSTR
            ver                 : esriTinVersion
            pOverWrite          : VARIANT*'''
        return super(ITinAdvanced2, self).SaveAsVersion(newName, ver, pOverWrite)
    def FreeMemory(self):
        '''Method ITinAdvanced2.FreeMemory'''
        return super(ITinAdvanced2, self).FreeMemory()
    def get_TrackCancel(self):
        '''Method ITinAdvanced.get_TrackCancel (from ITinAdvanced)

           OUTPUT
            ppTrackCancle       : ITrackCancel**'''
        return super(ITinAdvanced2, self).get_TrackCancel()
    def putref_TrackCancel(self, ppTrackCancle):
        '''Method ITinAdvanced.putref_TrackCancel (from ITinAdvanced)

           INPUT
            ppTrackCancle       : ITrackCancel*'''
        return super(ITinAdvanced2, self).putref_TrackCancel(ppTrackCancle)
    def get_ProcessCancelled(self):
        '''Method ITinAdvanced.get_ProcessCancelled (from ITinAdvanced)

           OUTPUT
            pbCancelled         : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).get_ProcessCancelled()
    def put_ProcessCancelled(self, pbCancelled):
        '''Method ITinAdvanced.put_ProcessCancelled (from ITinAdvanced)

           INPUT
            pbCancelled         : VARIANT_BOOL'''
        return super(ITinAdvanced2, self).put_ProcessCancelled(pbCancelled)
    def get_Surface(self):
        '''Method ITinAdvanced.get_Surface (from ITinAdvanced)

           OUTPUT
            ppSurface           : ISurface**'''
        return super(ITinAdvanced2, self).get_Surface()
    def SetEmpty(self):
        '''Method ITinAdvanced.SetEmpty (from ITinAdvanced)'''
        return super(ITinAdvanced2, self).SetEmpty()
    def Init(self, Name):
        '''Method ITinAdvanced.Init (from ITinAdvanced)

           INPUT
            Name                : BSTR'''
        return super(ITinAdvanced2, self).Init(Name)
    def put_Flag(self, pFlag):
        '''Method ITinAdvanced.put_Flag (from ITinAdvanced)

           INPUT
            pFlag               : long'''
        return super(ITinAdvanced2, self).put_Flag(pFlag)
    def get_Flag(self):
        '''Method ITinAdvanced.get_Flag (from ITinAdvanced)

           OUTPUT
            pFlag               : long*'''
        return super(ITinAdvanced2, self).get_Flag()
    def get_FullExtent(self):
        '''Method ITinAdvanced.get_FullExtent (from ITinAdvanced)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ITinAdvanced2, self).get_FullExtent()
    def get_SuperNodeExtent(self):
        '''Method ITinAdvanced.get_SuperNodeExtent (from ITinAdvanced)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ITinAdvanced2, self).get_SuperNodeExtent()
    def IsVoidZ(self, Value):
        '''Method ITinAdvanced.IsVoidZ (from ITinAdvanced)

           INPUT
            Value               : double

           OUTPUT
            pbIsVoid            : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).IsVoidZ(Value)
    def MakeNodeEnumerator(self, pAreaOfInterest, Criteria, pFilter):
        '''Method ITinAdvanced.MakeNodeEnumerator (from ITinAdvanced)

           INPUTS
            pAreaOfInterest     : IEnvelope*
            Criteria            : long
            pFilter             : ITinFilter*

           OUTPUT
            ppEnumerator        : IEnumTinNode**'''
        return super(ITinAdvanced2, self).MakeNodeEnumerator(pAreaOfInterest, Criteria, pFilter)
    def MakeEdgeEnumerator(self, pAreaOfInterest, Criteria, pFilter):
        '''Method ITinAdvanced.MakeEdgeEnumerator (from ITinAdvanced)

           INPUTS
            pAreaOfInterest     : IEnvelope*
            Criteria            : long
            pFilter             : ITinFilter*

           OUTPUT
            ppEnumerator        : IEnumTinEdge**'''
        return super(ITinAdvanced2, self).MakeEdgeEnumerator(pAreaOfInterest, Criteria, pFilter)
    def MakeTriangleEnumerator(self, pAreaOfInterest, Criteria, pFilter):
        '''Method ITinAdvanced.MakeTriangleEnumerator (from ITinAdvanced)

           INPUTS
            pAreaOfInterest     : IEnvelope*
            Criteria            : long
            pFilter             : ITinFilter*

           OUTPUT
            ppEnumerator        : IEnumTinTriangle**'''
        return super(ITinAdvanced2, self).MakeTriangleEnumerator(pAreaOfInterest, Criteria, pFilter)
    def get_NodeCount(self):
        '''Method ITinAdvanced.get_NodeCount (from ITinAdvanced)

           OUTPUT
            pcNodes             : long*'''
        return super(ITinAdvanced2, self).get_NodeCount()
    def GetNode(self, Index):
        '''Method ITinAdvanced.GetNode (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            ppNode              : ITinNode**'''
        return super(ITinAdvanced2, self).GetNode(Index)
    def QueryNode(self, Index, pNode):
        '''Method ITinAdvanced.QueryNode (from ITinAdvanced)

           INPUTS
            Index               : long
            pNode               : ITinNode*'''
        return super(ITinAdvanced2, self).QueryNode(Index, pNode)
    def QueryNodeAsPoint(self, Index, pPoint):
        '''Method ITinAdvanced.QueryNodeAsPoint (from ITinAdvanced)

           INPUTS
            Index               : long
            pPoint              : IPoint*'''
        return super(ITinAdvanced2, self).QueryNodeAsPoint(Index, pPoint)
    def QueryNodeAsWKSPointZ(self, Index):
        '''Method ITinAdvanced.QueryNodeAsWKSPointZ (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            pPoint              : WKSPointZ*'''
        return super(ITinAdvanced2, self).QueryNodeAsWKSPointZ(Index)
    def GetNodeZ(self, Index):
        '''Method ITinAdvanced.GetNodeZ (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            pZ                  : double*'''
        return super(ITinAdvanced2, self).GetNodeZ(Index)
    def GetNodeTagValue(self, Index):
        '''Method ITinAdvanced.GetNodeTagValue (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced2, self).GetNodeTagValue(Index)
    def get_EdgeCount(self):
        '''Method ITinAdvanced.get_EdgeCount (from ITinAdvanced)

           OUTPUT
            pcEdges             : long*'''
        return super(ITinAdvanced2, self).get_EdgeCount()
    def GetEdge(self, Index):
        '''Method ITinAdvanced.GetEdge (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            ppEdge              : ITinEdge**'''
        return super(ITinAdvanced2, self).GetEdge(Index)
    def QueryEdge(self, Index, pEdge):
        '''Method ITinAdvanced.QueryEdge (from ITinAdvanced)

           INPUTS
            Index               : long
            pEdge               : ITinEdge*'''
        return super(ITinAdvanced2, self).QueryEdge(Index, pEdge)
    def QueryEdgeAsLine(self, Index, pLine):
        '''Method ITinAdvanced.QueryEdgeAsLine (from ITinAdvanced)

           INPUTS
            Index               : long
            pLine               : ILine*'''
        return super(ITinAdvanced2, self).QueryEdgeAsLine(Index, pLine)
    def QueryEdgeAsWKSPointZs(self, Index):
        '''Method ITinAdvanced.QueryEdgeAsWKSPointZs (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUTS
            pFrom               : WKSPointZ*
            pTo                 : WKSPointZ*'''
        return super(ITinAdvanced2, self).QueryEdgeAsWKSPointZs(Index)
    def GetEdgeTagValue(self, Index):
        '''Method ITinAdvanced.GetEdgeTagValue (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced2, self).GetEdgeTagValue(Index)
    def GetEdgeType(self, edgeIndex):
        '''Method ITinAdvanced.GetEdgeType (from ITinAdvanced)

           INPUT
            edgeIndex           : long

           OUTPUT
            pType               : esriTinEdgeType*'''
        return super(ITinAdvanced2, self).GetEdgeType(edgeIndex)
    def get_TriangleCount(self):
        '''Method ITinAdvanced.get_TriangleCount (from ITinAdvanced)

           OUTPUT
            pcTriangles         : long*'''
        return super(ITinAdvanced2, self).get_TriangleCount()
    def GetTriangle(self, Index):
        '''Method ITinAdvanced.GetTriangle (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinAdvanced2, self).GetTriangle(Index)
    def QueryTriangle(self, Index, pTriangle):
        '''Method ITinAdvanced.QueryTriangle (from ITinAdvanced)

           INPUTS
            Index               : long
            pTriangle           : ITinTriangle*'''
        return super(ITinAdvanced2, self).QueryTriangle(Index, pTriangle)
    def QueryTriangleAsRing(self, Index, pRing):
        '''Method ITinAdvanced.QueryTriangleAsRing (from ITinAdvanced)

           INPUTS
            Index               : long
            pRing               : IRing*'''
        return super(ITinAdvanced2, self).QueryTriangleAsRing(Index, pRing)
    def QueryTriangleAsWKSPointZs(self, Index):
        '''Method ITinAdvanced.QueryTriangleAsWKSPointZs (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*'''
        return super(ITinAdvanced2, self).QueryTriangleAsWKSPointZs(Index)
    def GetTriangleTagValue(self, Index):
        '''Method ITinAdvanced.GetTriangleTagValue (from ITinAdvanced)

           INPUT
            Index               : long

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced2, self).GetTriangleTagValue(Index)
    def QueryNearestNode(self, pPoint, pNode, pDistance):
        '''Method ITinAdvanced.QueryNearestNode (from ITinAdvanced)

           INPUTS
            pPoint              : IPoint*
            pNode               : ITinNode*
            pDistance           : double*'''
        return super(ITinAdvanced2, self).QueryNearestNode(pPoint, pNode, pDistance)
    def QueryNearestEdge(self, pPoint, pEdge, pDistance):
        '''Method ITinAdvanced.QueryNearestEdge (from ITinAdvanced)

           INPUTS
            pPoint              : IPoint*
            pEdge               : ITinEdge*
            pDistance           : double*'''
        return super(ITinAdvanced2, self).QueryNearestEdge(pPoint, pEdge, pDistance)
    def FindTriangle(self, pPoint):
        '''Method ITinAdvanced.FindTriangle (from ITinAdvanced)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinAdvanced2, self).FindTriangle(pPoint)
    def FindNaturalNeighbors(self, pPoint):
        '''Method ITinAdvanced.FindNaturalNeighbors (from ITinAdvanced)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppNodes             : ITinNodeArray**'''
        return super(ITinAdvanced2, self).FindNaturalNeighbors(pPoint)
    def FindTriangleNeighborhood(self, pPoint):
        '''Method ITinAdvanced.FindTriangleNeighborhood (from ITinAdvanced)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppTriangles         : ITinTriangleArray**'''
        return super(ITinAdvanced2, self).FindTriangleNeighborhood(pPoint)
    def ExtractPolyline(self, pSeed, pFilter):
        '''Method ITinAdvanced.ExtractPolyline (from ITinAdvanced)

           INPUTS
            pSeed               : ITinEdge*
            pFilter             : ITinFilter*

           OUTPUT
            ppPolyline          : ITinPolyline**'''
        return super(ITinAdvanced2, self).ExtractPolyline(pSeed, pFilter)
    def ExtractPolygon(self, pSeed, pFilter, bStopAtEnforcedEdge):
        '''Method ITinAdvanced.ExtractPolygon (from ITinAdvanced)

           INPUTS
            pSeed               : ITinElement*
            pFilter             : ITinFilter*
            bStopAtEnforcedEdge : VARIANT_BOOL

           OUTPUT
            ppPolygon           : ITinPolygon**'''
        return super(ITinAdvanced2, self).ExtractPolygon(pSeed, pFilter, bStopAtEnforcedEdge)
    def GetTriangleSeeds(self, pFilter, bStopAtEnforcedEdge):
        '''Method ITinAdvanced.GetTriangleSeeds (from ITinAdvanced)

           INPUTS
            pFilter             : ITinDynamicFilter*
            bStopAtEnforcedEdge : VARIANT_BOOL

           OUTPUT
            ppTriangles         : IEnumTinTriangle**'''
        return super(ITinAdvanced2, self).GetTriangleSeeds(pFilter, bStopAtEnforcedEdge)
    def ConvertToPolygons(self, pFeatureClass, pFilter, bStopAtEnforcedEdge, pFieldName):
        '''Method ITinAdvanced.ConvertToPolygons (from ITinAdvanced)

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : ITinDynamicFilter*
            bStopAtEnforcedEdge : VARIANT_BOOL
            pFieldName          : VARIANT*'''
        return super(ITinAdvanced2, self).ConvertToPolygons(pFeatureClass, pFilter, bStopAtEnforcedEdge, pFieldName)
    def GetDataArea(self):
        '''Method ITinAdvanced.GetDataArea (from ITinAdvanced)

           OUTPUT
            ppArea              : IPolygon**'''
        return super(ITinAdvanced2, self).GetDataArea()
    def get_UniqueTagValueCount(self, Type):
        '''Method ITinAdvanced.get_UniqueTagValueCount (from ITinAdvanced)

           INPUT
            Type                : esriTinElementType

           OUTPUT
            pCount              : long*'''
        return super(ITinAdvanced2, self).get_UniqueTagValueCount(Type)
    def GetUniqueTagValues(self, Type):
        '''Method ITinAdvanced.GetUniqueTagValues (from ITinAdvanced)

           INPUT
            Type                : esriTinElementType

           OUTPUT
            ppValues            : ILongArray**'''
        return super(ITinAdvanced2, self).GetUniqueTagValues(Type)
    def GenerateUniqueTagValue(self, Type):
        '''Method ITinAdvanced.GenerateUniqueTagValue (from ITinAdvanced)

           INPUT
            Type                : esriTinElementType

           OUTPUT
            pValue              : long*'''
        return super(ITinAdvanced2, self).GenerateUniqueTagValue(Type)
    def get_IsEmpty(self):
        '''Method ITin.get_IsEmpty (from ITin)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).get_IsEmpty()
    def get_IsDelaunay(self):
        '''Method ITin.get_IsDelaunay (from ITin)

           OUTPUT
            pbIsEmpty           : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).get_IsDelaunay()
    def SaveAs(self, newName, pOverWrite):
        '''Method ITin.SaveAs (from ITin)

           INPUTS
            newName             : BSTR
            pOverWrite          : VARIANT*'''
        return super(ITinAdvanced2, self).SaveAs(newName, pOverWrite)
    def get_Extent(self):
        '''Method ITin.get_Extent (from ITin)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ITinAdvanced2, self).get_Extent()
    def get_DataNodeCount(self):
        '''Method ITin.get_DataNodeCount (from ITin)

           OUTPUT
            pcNodes             : long*'''
        return super(ITinAdvanced2, self).get_DataNodeCount()
    def get_DataEdgeCount(self):
        '''Method ITin.get_DataEdgeCount (from ITin)

           OUTPUT
            pcEdges             : long*'''
        return super(ITinAdvanced2, self).get_DataEdgeCount()
    def get_DataTriangleCount(self):
        '''Method ITin.get_DataTriangleCount (from ITin)

           OUTPUT
            pcTriangles         : long*'''
        return super(ITinAdvanced2, self).get_DataTriangleCount()
    def get_ZFactor(self):
        '''Method ITin.get_ZFactor (from ITin)

           OUTPUT
            pFactor             : double*'''
        return super(ITinAdvanced2, self).get_ZFactor()
    def put_ZFactor(self, pFactor):
        '''Method ITin.put_ZFactor (from ITin)

           INPUT
            pFactor             : double'''
        return super(ITinAdvanced2, self).put_ZFactor(pFactor)
    def get_Version(self):
        '''Method ITin.get_Version (from ITin)

           OUTPUT
            pVer                : long*'''
        return super(ITinAdvanced2, self).get_Version()
    def get_HasNodeTagValues(self):
        '''Method ITin.get_HasNodeTagValues (from ITin)

           OUTPUT
            pbHasNodeValues     : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).get_HasNodeTagValues()
    def get_HasEdgeTagValues(self):
        '''Method ITin.get_HasEdgeTagValues (from ITin)

           OUTPUT
            pbHasEdgeValues     : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).get_HasEdgeTagValues()
    def get_HasTriangleTagValues(self):
        '''Method ITin.get_HasTriangleTagValues (from ITin)

           OUTPUT
            pbHasTriangleValues : VARIANT_BOOL*'''
        return super(ITinAdvanced2, self).get_HasTriangleTagValues()
    def get_Fields(self):
        '''Method ITin.get_Fields (from ITin)

           OUTPUT
            Fields              : IFields**'''
        return super(ITinAdvanced2, self).get_Fields()
    DataEdgeCount = property(get_DataEdgeCount, None, None)
    DataNodeCount = property(get_DataNodeCount, None, None)
    DataTriangleCount = property(get_DataTriangleCount, None, None)
    EdgeCount = property(get_EdgeCount, None, None)
    Extent = property(get_Extent, None, None)
    Fields = property(get_Fields, None, None)
    Flag = property(get_Flag, put_Flag, None)
    FullExtent = property(get_FullExtent, None, None)
    HasEdgeTagValues = property(get_HasEdgeTagValues, None, None)
    HasNodeTagValues = property(get_HasNodeTagValues, None, None)
    HasTriangleTagValues = property(get_HasTriangleTagValues, None, None)
    IsDelaunay = property(get_IsDelaunay, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    NodeCount = property(get_NodeCount, None, None)
    ProcessCancelled = property(get_ProcessCancelled, put_ProcessCancelled, None)
    SuperNodeExtent = property(get_SuperNodeExtent, None, None)
    Surface = property(get_Surface, None, None)
    TrackCancel = property(get_TrackCancel, putref_TrackCancel, None)
    TriangleCount = property(get_TriangleCount, None, None)
    Version = property(get_Version, None, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)
    UniqueTagValueCount = IndexProperty(get_UniqueTagValueCount, None)

class ITinEdit(_esriGeoDatabase.ITinEdit):
    _IID = uuid.UUID('6615635a-bfab-11d2-9f6d-00c04f8ece27')
    def get_IsEditable(self):
        '''Method ITinEdit.get_IsEditable

           OUTPUT
            pbIsEditable        : VARIANT_BOOL*'''
        return super(ITinEdit, self).get_IsEditable()
    def get_IsInEditMode(self):
        '''Method ITinEdit.get_IsInEditMode

           OUTPUT
            pbIsInEditMode      : VARIANT_BOOL*'''
        return super(ITinEdit, self).get_IsInEditMode()
    def get_IsDirty(self):
        '''Method ITinEdit.get_IsDirty

           OUTPUT
            pbIsDirty           : VARIANT_BOOL*'''
        return super(ITinEdit, self).get_IsDirty()
    def StartEditing(self):
        '''Method ITinEdit.StartEditing

           OUTPUT
            pbIsSuccessful      : VARIANT_BOOL*'''
        return super(ITinEdit, self).StartEditing()
    def StopEditing(self, bSaveEdits):
        '''Method ITinEdit.StopEditing

           INPUT
            bSaveEdits          : VARIANT_BOOL

           OUTPUT
            pbIsSuccessful      : VARIANT_BOOL*'''
        return super(ITinEdit, self).StopEditing(bSaveEdits)
    def InitNew(self, pExtent):
        '''Method ITinEdit.InitNew

           INPUT
            pExtent             : IEnvelope*'''
        return super(ITinEdit, self).InitNew(pExtent)
    def Save(self):
        '''Method ITinEdit.Save'''
        return super(ITinEdit, self).Save()
    def SaveAs(self, newName, pOverWrite):
        '''Method ITinEdit.SaveAs

           INPUTS
            newName             : BSTR
            pOverWrite          : VARIANT*'''
        return super(ITinEdit, self).SaveAs(newName, pOverWrite)
    def AddWKSPointZ(self, pPoint, vlue):
        '''Method ITinEdit.AddWKSPointZ

           INPUTS
            pPoint              : WKSPointZ*
            vlue                : long

           OUTPUT
            pNodeIndex          : long*'''
        return super(ITinEdit, self).AddWKSPointZ(pPoint, vlue)
    def AddPointZ(self, pPoint, TagValue):
        '''Method ITinEdit.AddPointZ

           INPUTS
            pPoint              : IPoint*
            TagValue            : long

           OUTPUT
            pNodeIndex          : long*'''
        return super(ITinEdit, self).AddPointZ(pPoint, TagValue)
    def AddShapeZ(self, pShape, Type, TagValue, pbUseShapeZ):
        '''Method ITinEdit.AddShapeZ

           INPUTS
            pShape              : IGeometry*
            Type                : esriTinSurfaceType
            TagValue            : long
            pbUseShapeZ         : VARIANT*'''
        return super(ITinEdit, self).AddShapeZ(pShape, Type, TagValue, pbUseShapeZ)
    def AddShape(self, pShape, Type, TagValue, pZ):
        '''Method ITinEdit.AddShape

           INPUTS
            pShape              : IGeometry*
            Type                : esriTinSurfaceType
            TagValue            : long
            pZ                  : VARIANT*'''
        return super(ITinEdit, self).AddShape(pShape, Type, TagValue, pZ)
    def AddFromFeatureClass(self, pFeatureClass, pFilter, pHeightField, pTagValueField, Type, pbUseShapeZ):
        '''Method ITinEdit.AddFromFeatureClass

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : IQueryFilter*
            pHeightField        : IField*
            pTagValueField      : IField*
            Type                : esriTinSurfaceType
            pbUseShapeZ         : VARIANT*'''
        return super(ITinEdit, self).AddFromFeatureClass(pFeatureClass, pFilter, pHeightField, pTagValueField, Type, pbUseShapeZ)
    def AddFromFeatureCursor(self, pCursor, pHeightField, pTagValueField, Type, pbUseShapeZ):
        '''Method ITinEdit.AddFromFeatureCursor

           INPUTS
            pCursor             : IFeatureCursor*
            pHeightField        : IField*
            pTagValueField      : IField*
            Type                : esriTinSurfaceType
            pbUseShapeZ         : VARIANT*'''
        return super(ITinEdit, self).AddFromFeatureCursor(pCursor, pHeightField, pTagValueField, Type, pbUseShapeZ)
    def AddFromPixelBlock(self, xOrigin, yOrigin, xPixelSize, yPixelSize, valueForNoData, block, ZTolerance, pMaxPoints):
        '''Method ITinEdit.AddFromPixelBlock

           INPUTS
            xOrigin             : double
            yOrigin             : double
            xPixelSize          : double
            yPixelSize          : double
            valueForNoData      : VARIANT
            block               : VARIANT
            ZTolerance          : double
            pMaxPoints          : VARIANT*

           OUTPUT
            pbToleranceAchieved : VARIANT*'''
        return super(ITinEdit, self).AddFromPixelBlock(xOrigin, yOrigin, xPixelSize, yPixelSize, valueForNoData, block, ZTolerance, pMaxPoints)
    def DeleteNode(self, Index):
        '''Method ITinEdit.DeleteNode

           INPUT
            Index               : long'''
        return super(ITinEdit, self).DeleteNode(Index)
    def DeleteSelectedNodes(self):
        '''Method ITinEdit.DeleteSelectedNodes'''
        return super(ITinEdit, self).DeleteSelectedNodes()
    def DeleteNodesOutsideDataArea(self):
        '''Method ITinEdit.DeleteNodesOutsideDataArea'''
        return super(ITinEdit, self).DeleteNodesOutsideDataArea()
    def SetEdgeType(self, Index, Type):
        '''Method ITinEdit.SetEdgeType

           INPUTS
            Index               : long
            Type                : esriTinEdgeType'''
        return super(ITinEdit, self).SetEdgeType(Index, Type)
    def SetNodeZ(self, Index, Z):
        '''Method ITinEdit.SetNodeZ

           INPUTS
            Index               : long
            Z                   : double'''
        return super(ITinEdit, self).SetNodeZ(Index, Z)
    def SetNodeTagValue(self, Index, Value):
        '''Method ITinEdit.SetNodeTagValue

           INPUTS
            Index               : long
            Value               : long'''
        return super(ITinEdit, self).SetNodeTagValue(Index, Value)
    def SetEdgeTagValue(self, Index, Value):
        '''Method ITinEdit.SetEdgeTagValue

           INPUTS
            Index               : long
            Value               : long'''
        return super(ITinEdit, self).SetEdgeTagValue(Index, Value)
    def SetTriangleTagValue(self, Index, Value):
        '''Method ITinEdit.SetTriangleTagValue

           INPUTS
            Index               : long
            Value               : long'''
        return super(ITinEdit, self).SetTriangleTagValue(Index, Value)
    def PropagateTriangleTagValue(self, pSeed, newTagValue, bStopAtEnforcedEdge):
        '''Method ITinEdit.PropagateTriangleTagValue

           INPUTS
            pSeed               : ITinTriangle*
            newTagValue         : long
            bStopAtEnforcedEdge : VARIANT_BOOL'''
        return super(ITinEdit, self).PropagateTriangleTagValue(pSeed, newTagValue, bStopAtEnforcedEdge)
    def SetTrianglesInsideDataArea(self):
        '''Method ITinEdit.SetTrianglesInsideDataArea'''
        return super(ITinEdit, self).SetTrianglesInsideDataArea()
    def SetTriangleInsideDataArea(self, Index):
        '''Method ITinEdit.SetTriangleInsideDataArea

           INPUT
            Index               : long'''
        return super(ITinEdit, self).SetTriangleInsideDataArea(Index)
    def SetTriangleOutsideDataArea(self, Index):
        '''Method ITinEdit.SetTriangleOutsideDataArea

           INPUT
            Index               : long'''
        return super(ITinEdit, self).SetTriangleOutsideDataArea(Index)
    def DeleteNodeTagValues(self):
        '''Method ITinEdit.DeleteNodeTagValues'''
        return super(ITinEdit, self).DeleteNodeTagValues()
    def DeleteEdgeTagValues(self):
        '''Method ITinEdit.DeleteEdgeTagValues'''
        return super(ITinEdit, self).DeleteEdgeTagValues()
    def DeleteTriangleTagValues(self):
        '''Method ITinEdit.DeleteTriangleTagValues'''
        return super(ITinEdit, self).DeleteTriangleTagValues()
    def Refresh(self):
        '''Method ITinEdit.Refresh'''
        return super(ITinEdit, self).Refresh()
    def SetSpatialReference(self, pSpatialReference):
        '''Method ITinEdit.SetSpatialReference

           INPUT
            pSpatialReference   : ISpatialReference*'''
        return super(ITinEdit, self).SetSpatialReference(pSpatialReference)
    IsDirty = property(get_IsDirty, None, None)
    IsEditable = property(get_IsEditable, None, None)
    IsInEditMode = property(get_IsInEditMode, None, None)

class ITinSurfaceElement(_esriGeoDatabase.ITinSurfaceElement):
    _IID = uuid.UUID('ff7e9000-d0dd-11d2-9f76-00c04f8ece27')
    def get_Elevation(self):
        '''Method ITinSurfaceElement.get_Elevation

           OUTPUT
            pElevation          : double*'''
        return super(ITinSurfaceElement, self).get_Elevation()
    def get_SlopeDegrees(self):
        '''Method ITinSurfaceElement.get_SlopeDegrees

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurfaceElement, self).get_SlopeDegrees()
    def get_AspectDegrees(self):
        '''Method ITinSurfaceElement.get_AspectDegrees

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurfaceElement, self).get_AspectDegrees()
    def get_FaceTagValue(self):
        '''Method ITinSurfaceElement.get_FaceTagValue

           OUTPUT
            pValue              : long*'''
        return super(ITinSurfaceElement, self).get_FaceTagValue()
    def get_NodeTagValue(self):
        '''Method ITinSurfaceElement.get_NodeTagValue

           OUTPUT
            pValue              : long*'''
        return super(ITinSurfaceElement, self).get_NodeTagValue()
    def get_Triangle(self):
        '''Method ITinSurfaceElement.get_Triangle

           OUTPUT
            ppTriangle          : ITinTriangle**'''
        return super(ITinSurfaceElement, self).get_Triangle()
    AspectDegrees = property(get_AspectDegrees, None, None)
    Elevation = property(get_Elevation, None, None)
    FaceTagValue = property(get_FaceTagValue, None, None)
    NodeTagValue = property(get_NodeTagValue, None, None)
    SlopeDegrees = property(get_SlopeDegrees, None, None)
    Triangle = property(get_Triangle, None, None)

class ITinSurface(_esriGeoDatabase.ITinSurface):
    _IID = uuid.UUID('73b80fbd-ff33-11d1-a549-0000f8774f0f')

    def __init__(self, *args, **kw):
        super(ITinSurface, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_RasterInterpolationMethod(self, pType):
        '''Method ITinSurface.put_RasterInterpolationMethod

           INPUT
            pType               : esriSurfaceInterpolationType'''
        return super(ITinSurface, self).put_RasterInterpolationMethod(pType)
    def get_RasterInterpolationMethod(self):
        '''Method ITinSurface.get_RasterInterpolationMethod

           OUTPUT
            pType               : esriSurfaceInterpolationType*'''
        return super(ITinSurface, self).get_RasterInterpolationMethod()
    def put_SunPosition(self, pPosition):
        '''Method ITinSurface.put_SunPosition

           INPUT
            pPosition           : WKSPointZ*'''
        return super(ITinSurface, self).put_SunPosition(pPosition)
    def get_SunPosition(self):
        '''Method ITinSurface.get_SunPosition

           OUTPUT
            pPosition           : WKSPointZ*'''
        return super(ITinSurface, self).get_SunPosition()
    def GetIntensity(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetIntensity

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pIntensity          : double*'''
        return super(ITinSurface, self).GetIntensity(pPi, pPj, pPk)
    def QueryElevationBand(self, pPi, pPj, pPk, zLowerBound, zUpperBound):
        '''Method ITinSurface.QueryElevationBand

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*
            zLowerBound         : double
            zUpperBound         : double

           OUTPUTS
            pCount              : long*
            pRegion             : WKSPointZ*'''
        return super(ITinSurface, self).QueryElevationBand(pPi, pPj, pPk, zLowerBound, zUpperBound)
    def GetTriNormal(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriNormal

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface, self).GetTriNormal(pPi, pPj, pPk)
    def GetUnitTriNormal(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetUnitTriNormal

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface, self).GetUnitTriNormal(pPi, pPj, pPk)
    def GetTriSlopeRadians(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriSlopeRadians

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface, self).GetTriSlopeRadians(pPi, pPj, pPk)
    def GetTriSlopeDegrees(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriSlopeDegrees

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface, self).GetTriSlopeDegrees(pPi, pPj, pPk)
    def GetTriSlopePercent(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriSlopePercent

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface, self).GetTriSlopePercent(pPi, pPj, pPk)
    def GetTriAspectRadians(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriAspectRadians

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface, self).GetTriAspectRadians(pPi, pPj, pPk)
    def GetTriAspectDegrees(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriAspectDegrees

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface, self).GetTriAspectDegrees(pPi, pPj, pPk)
    def GetSurfaceElement(self, pPoint):
        '''Method ITinSurface.GetSurfaceElement

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppElement           : ITinSurfaceElement**'''
        return super(ITinSurface, self).GetSurfaceElement(pPoint)
    def GetPartialVolumeAndArea(self, referenceHeight, Type, pTriangles):
        '''Method ITinSurface.GetPartialVolumeAndArea

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType
            pTriangles          : IEnumTinTriangle*

           OUTPUTS
            pVolume             : VARIANT*
            pSurfaceArea        : VARIANT*
            pProjectedArea      : VARIANT*'''
        return super(ITinSurface, self).GetPartialVolumeAndArea(referenceHeight, Type, pTriangles)
    def get_ZFactor(self):
        '''Method ISurface.get_ZFactor (from ISurface)

           OUTPUT
            pFactor             : double*'''
        return super(ITinSurface, self).get_ZFactor()
    def put_ZFactor(self, pFactor):
        '''Method ISurface.put_ZFactor (from ISurface)

           INPUT
            pFactor             : double'''
        return super(ITinSurface, self).put_ZFactor(pFactor)
    def GetProjectedArea(self, referenceHeight, Type):
        '''Method ISurface.GetProjectedArea (from ISurface)

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pArea               : double*'''
        return super(ITinSurface, self).GetProjectedArea(referenceHeight, Type)
    def GetSurfaceArea(self, referenceHeight, Type):
        '''Method ISurface.GetSurfaceArea (from ISurface)

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pArea               : double*'''
        return super(ITinSurface, self).GetSurfaceArea(referenceHeight, Type)
    def GetVolume(self, reference, Type):
        '''Method ISurface.GetVolume (from ISurface)

           INPUTS
            reference           : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pVolume             : double*'''
        return super(ITinSurface, self).GetVolume(reference, Type)
    def QueryNormal(self, pLocation, pNormal):
        '''Method ISurface.QueryNormal (from ISurface)

           INPUTS
            pLocation           : IPoint*
            pNormal             : IVector3D*'''
        return super(ITinSurface, self).QueryNormal(pLocation, pNormal)
    def GetNormal(self, pLocation):
        '''Method ISurface.GetNormal (from ISurface)

           INPUT
            pLocation           : IPoint*

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface, self).GetNormal(pLocation)
    def FindNormal(self, X, Y):
        '''Method ISurface.FindNormal (from ISurface)

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface, self).FindNormal(X, Y)
    def GetElevation(self, pPoint):
        '''Method ISurface.GetElevation (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pElevation          : double*'''
        return super(ITinSurface, self).GetElevation(pPoint)
    def GetSlopeDegrees(self, pPoint):
        '''Method ISurface.GetSlopeDegrees (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface, self).GetSlopeDegrees(pPoint)
    def GetSlopeRadians(self, pPoint):
        '''Method ISurface.GetSlopeRadians (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface, self).GetSlopeRadians(pPoint)
    def GetSlopePercent(self, pPoint):
        '''Method ISurface.GetSlopePercent (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface, self).GetSlopePercent(pPoint)
    def GetAspectDegrees(self, pPoint):
        '''Method ISurface.GetAspectDegrees (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface, self).GetAspectDegrees(pPoint)
    def GetAspectRadians(self, pPoint):
        '''Method ISurface.GetAspectRadians (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface, self).GetAspectRadians(pPoint)
    def IsVoidZ(self, Value):
        '''Method ISurface.IsVoidZ (from ISurface)

           INPUT
            Value               : double

           OUTPUT
            pbIsVoid            : VARIANT_BOOL*'''
        return super(ITinSurface, self).IsVoidZ(Value)
    def InterpolateShape(self, pShape, pStepSize):
        '''Method ISurface.InterpolateShape (from ISurface)

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            ppOutShape          : IGeometry**'''
        return super(ITinSurface, self).InterpolateShape(pShape, pStepSize)
    def InterpolateShapeVertices(self, pShape):
        '''Method ISurface.InterpolateShapeVertices (from ISurface)

           INPUT
            pShape              : IGeometry*

           OUTPUT
            ppOutShape          : IGeometry**'''
        return super(ITinSurface, self).InterpolateShapeVertices(pShape)
    def GetProfile(self, pShape, pStepSize):
        '''Method ISurface.GetProfile (from ISurface)

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            ppProfile           : IGeometry**'''
        return super(ITinSurface, self).GetProfile(pShape, pStepSize)
    def get_CanDoCurvature(self):
        '''Method ISurface.get_CanDoCurvature (from ISurface)

           OUTPUT
            pbCanDo             : VARIANT_BOOL*'''
        return super(ITinSurface, self).get_CanDoCurvature()
    def GetLineOfSight(self, pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor):
        '''Method ISurface.GetLineOfSight (from ISurface)

           INPUTS
            pObserver           : IPoint*
            pTarget             : IPoint*
            bApplyCurvature     : VARIANT_BOOL
            bApplyRefraction    : VARIANT_BOOL
            pRefractionFactor   : VARIANT*

           OUTPUTS
            ppObstruction       : IPoint**
            ppVisibleLines      : IPolyline**
            ppInvisibleLines    : IPolyline**
            pbIsVisible         : VARIANT_BOOL*'''
        return super(ITinSurface, self).GetLineOfSight(pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor)
    def QuerySurfaceLength(self, pShape, pStepSize):
        '''Method ISurface.QuerySurfaceLength (from ISurface)

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            pLength             : double*'''
        return super(ITinSurface, self).QuerySurfaceLength(pShape, pStepSize)
    def Locate(self, pRay, hint):
        '''Method ISurface.Locate (from ISurface)

           INPUTS
            pRay                : IRay*
            hint                : long

           OUTPUT
            ppLocation          : IPoint**'''
        return super(ITinSurface, self).Locate(pRay, hint)
    def LocateAll(self, pRay, hint):
        '''Method ISurface.LocateAll (from ISurface)

           INPUTS
            pRay                : IRay*
            hint                : long

           OUTPUT
            ppDistances         : IDoubleArray**'''
        return super(ITinSurface, self).LocateAll(pRay, hint)
    def GetContour(self, pPoint):
        '''Method ISurface.GetContour (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUTS
            ppContour           : IPolyline**
            pElevation          : double*'''
        return super(ITinSurface, self).GetContour(pPoint)
    def ContourList(self, pBreaks, pFeatureClass, FieldName, digitsAfterDecimalPoint):
        '''Method ISurface.ContourList (from ISurface)

           INPUTS
            pBreaks             : IDoubleArray*
            pFeatureClass       : IFeatureClass*
            FieldName           : BSTR
            digitsAfterDecimalPoint: long'''
        return super(ITinSurface, self).ContourList(pBreaks, pFeatureClass, FieldName, digitsAfterDecimalPoint)
    def Contour(self, referenceContourHeight, interval, pFeatureClass, FieldName, digitsAfterDecimalPoint):
        '''Method ISurface.Contour (from ISurface)

           INPUTS
            referenceContourHeight: double
            interval            : double
            pFeatureClass       : IFeatureClass*
            FieldName           : BSTR
            digitsAfterDecimalPoint: long'''
        return super(ITinSurface, self).Contour(referenceContourHeight, interval, pFeatureClass, FieldName, digitsAfterDecimalPoint)
    def AsPolygons(self, pFeatureClass, Type, pClassBreaks, pClassCodes, FieldName):
        '''Method ISurface.AsPolygons (from ISurface)

           INPUTS
            pFeatureClass       : IFeatureClass*
            Type                : esriSurfaceConversionType
            pClassBreaks        : IDoubleArray*
            pClassCodes         : ILongArray*
            FieldName           : VARIANT*'''
        return super(ITinSurface, self).AsPolygons(pFeatureClass, Type, pClassBreaks, pClassCodes, FieldName)
    def GetSteepestPath(self, pPoint):
        '''Method ISurface.GetSteepestPath (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppPath              : IPolyline**'''
        return super(ITinSurface, self).GetSteepestPath(pPoint)
    def QueryPixelBlock(self, xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData, block):
        '''Method ISurface.QueryPixelBlock (from ISurface)

           INPUTS
            xOrigin             : double
            yOrigin             : double
            xPixelSize          : double
            yPixelSize          : double
            Type                : esriRasterizationType
            valueForNoData      : VARIANT
            block               : VARIANT'''
        return super(ITinSurface, self).QueryPixelBlock(xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData, block)
    def get_Z(self, X, Y):
        '''Method IFunctionalSurface.get_Z (from IFunctionalSurface)

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            Z                   : double*'''
        return super(ITinSurface, self).get_Z(X, Y)
    def get_Domain(self):
        '''Method IFunctionalSurface.get_Domain (from IFunctionalSurface)

           OUTPUT
            Domain              : IPolygon**'''
        return super(ITinSurface, self).get_Domain()
    CanDoCurvature = property(get_CanDoCurvature, None, None)
    Domain = property(get_Domain, None, None)
    RasterInterpolationMethod = property(get_RasterInterpolationMethod, put_RasterInterpolationMethod, None)
    SunPosition = property(get_SunPosition, put_SunPosition, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ITinSurface2(_esriGeoDatabase.ITinSurface2):
    _IID = uuid.UUID('249cd6b0-8441-42e7-bbe6-2cae4a1dac9a')

    def __init__(self, *args, **kw):
        super(ITinSurface2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def InterpolateAsMultiPatch(self, pShape, maxStripSize):
        '''Method ITinSurface2.InterpolateAsMultiPatch

           INPUTS
            pShape              : IPolygon*
            maxStripSize        : long

           OUTPUT
            ppMultiPatch        : IMultiPatch**'''
        return super(ITinSurface2, self).InterpolateAsMultiPatch(pShape, maxStripSize)
    def ConvertToMultiPatches(self, pFeatureClass, maxPatchSize, maxStripSize):
        '''Method ITinSurface2.ConvertToMultiPatches

           INPUTS
            pFeatureClass       : IFeatureClass*
            maxPatchSize        : long
            maxStripSize        : long'''
        return super(ITinSurface2, self).ConvertToMultiPatches(pFeatureClass, maxPatchSize, maxStripSize)
    def DecimateNodes(self, pAreaOfInterest, ZTolerance, bCopyBreakline, pMaxRemainingNodeCount):
        '''Method ITinSurface2.DecimateNodes

           INPUTS
            pAreaOfInterest     : IEnvelope*
            ZTolerance          : double
            bCopyBreakline      : VARIANT_BOOL
            pMaxRemainingNodeCount: VARIANT*

           OUTPUTS
            ppNewTin            : ITin**
            pbToleranceAchieved : VARIANT*'''
        return super(ITinSurface2, self).DecimateNodes(pAreaOfInterest, ZTolerance, bCopyBreakline, pMaxRemainingNodeCount)
    def DecimateNodesByCount(self, pAreaOfInterest, maxRemainingNodeCount, bCopyBreakline):
        '''Method ITinSurface2.DecimateNodesByCount

           INPUTS
            pAreaOfInterest     : IEnvelope*
            maxRemainingNodeCount: long
            bCopyBreakline      : VARIANT_BOOL

           OUTPUT
            ppNewTin            : ITin**'''
        return super(ITinSurface2, self).DecimateNodesByCount(pAreaOfInterest, maxRemainingNodeCount, bCopyBreakline)
    def Generalize(self, pAreaOfInterest, ZTolerance, pMaxRemainingNodeCount):
        '''Method ITinSurface2.Generalize

           INPUTS
            pAreaOfInterest     : IEnvelope*
            ZTolerance          : double
            pMaxRemainingNodeCount: VARIANT*

           OUTPUTS
            ppNewTin            : ITin**
            pbToleranceAchieved : VARIANT*'''
        return super(ITinSurface2, self).Generalize(pAreaOfInterest, ZTolerance, pMaxRemainingNodeCount)
    def GeneralizeByNodeCount(self, pAreaOfInterest, maxRemainingNodeCount):
        '''Method ITinSurface2.GeneralizeByNodeCount

           INPUTS
            pAreaOfInterest     : IEnvelope*
            maxRemainingNodeCount: long

           OUTPUT
            ppNewTin            : ITin**'''
        return super(ITinSurface2, self).GeneralizeByNodeCount(pAreaOfInterest, maxRemainingNodeCount)
    def LocateMultiple(self, pRay):
        '''Method ITinSurface2.LocateMultiple

           INPUT
            pRay                : IRay*

           OUTPUT
            ppLocations         : IMultipoint**'''
        return super(ITinSurface2, self).LocateMultiple(pRay)
    def put_RasterInterpolationMethod(self, pType):
        '''Method ITinSurface.put_RasterInterpolationMethod (from ITinSurface)

           INPUT
            pType               : esriSurfaceInterpolationType'''
        return super(ITinSurface2, self).put_RasterInterpolationMethod(pType)
    def get_RasterInterpolationMethod(self):
        '''Method ITinSurface.get_RasterInterpolationMethod (from ITinSurface)

           OUTPUT
            pType               : esriSurfaceInterpolationType*'''
        return super(ITinSurface2, self).get_RasterInterpolationMethod()
    def put_SunPosition(self, pPosition):
        '''Method ITinSurface.put_SunPosition (from ITinSurface)

           INPUT
            pPosition           : WKSPointZ*'''
        return super(ITinSurface2, self).put_SunPosition(pPosition)
    def get_SunPosition(self):
        '''Method ITinSurface.get_SunPosition (from ITinSurface)

           OUTPUT
            pPosition           : WKSPointZ*'''
        return super(ITinSurface2, self).get_SunPosition()
    def GetIntensity(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetIntensity (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pIntensity          : double*'''
        return super(ITinSurface2, self).GetIntensity(pPi, pPj, pPk)
    def QueryElevationBand(self, pPi, pPj, pPk, zLowerBound, zUpperBound):
        '''Method ITinSurface.QueryElevationBand (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*
            zLowerBound         : double
            zUpperBound         : double

           OUTPUTS
            pCount              : long*
            pRegion             : WKSPointZ*'''
        return super(ITinSurface2, self).QueryElevationBand(pPi, pPj, pPk, zLowerBound, zUpperBound)
    def GetTriNormal(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriNormal (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface2, self).GetTriNormal(pPi, pPj, pPk)
    def GetUnitTriNormal(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetUnitTriNormal (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface2, self).GetUnitTriNormal(pPi, pPj, pPk)
    def GetTriSlopeRadians(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriSlopeRadians (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface2, self).GetTriSlopeRadians(pPi, pPj, pPk)
    def GetTriSlopeDegrees(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriSlopeDegrees (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface2, self).GetTriSlopeDegrees(pPi, pPj, pPk)
    def GetTriSlopePercent(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriSlopePercent (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface2, self).GetTriSlopePercent(pPi, pPj, pPk)
    def GetTriAspectRadians(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriAspectRadians (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface2, self).GetTriAspectRadians(pPi, pPj, pPk)
    def GetTriAspectDegrees(self, pPi, pPj, pPk):
        '''Method ITinSurface.GetTriAspectDegrees (from ITinSurface)

           INPUTS
            pPi                 : WKSPointZ*
            pPj                 : WKSPointZ*
            pPk                 : WKSPointZ*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface2, self).GetTriAspectDegrees(pPi, pPj, pPk)
    def GetSurfaceElement(self, pPoint):
        '''Method ITinSurface.GetSurfaceElement (from ITinSurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppElement           : ITinSurfaceElement**'''
        return super(ITinSurface2, self).GetSurfaceElement(pPoint)
    def GetPartialVolumeAndArea(self, referenceHeight, Type, pTriangles):
        '''Method ITinSurface.GetPartialVolumeAndArea (from ITinSurface)

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType
            pTriangles          : IEnumTinTriangle*

           OUTPUTS
            pVolume             : VARIANT*
            pSurfaceArea        : VARIANT*
            pProjectedArea      : VARIANT*'''
        return super(ITinSurface2, self).GetPartialVolumeAndArea(referenceHeight, Type, pTriangles)
    def get_ZFactor(self):
        '''Method ISurface.get_ZFactor (from ISurface)

           OUTPUT
            pFactor             : double*'''
        return super(ITinSurface2, self).get_ZFactor()
    def put_ZFactor(self, pFactor):
        '''Method ISurface.put_ZFactor (from ISurface)

           INPUT
            pFactor             : double'''
        return super(ITinSurface2, self).put_ZFactor(pFactor)
    def GetProjectedArea(self, referenceHeight, Type):
        '''Method ISurface.GetProjectedArea (from ISurface)

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pArea               : double*'''
        return super(ITinSurface2, self).GetProjectedArea(referenceHeight, Type)
    def GetSurfaceArea(self, referenceHeight, Type):
        '''Method ISurface.GetSurfaceArea (from ISurface)

           INPUTS
            referenceHeight     : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pArea               : double*'''
        return super(ITinSurface2, self).GetSurfaceArea(referenceHeight, Type)
    def GetVolume(self, reference, Type):
        '''Method ISurface.GetVolume (from ISurface)

           INPUTS
            reference           : double
            Type                : esriPlaneReferenceType

           OUTPUT
            pVolume             : double*'''
        return super(ITinSurface2, self).GetVolume(reference, Type)
    def QueryNormal(self, pLocation, pNormal):
        '''Method ISurface.QueryNormal (from ISurface)

           INPUTS
            pLocation           : IPoint*
            pNormal             : IVector3D*'''
        return super(ITinSurface2, self).QueryNormal(pLocation, pNormal)
    def GetNormal(self, pLocation):
        '''Method ISurface.GetNormal (from ISurface)

           INPUT
            pLocation           : IPoint*

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface2, self).GetNormal(pLocation)
    def FindNormal(self, X, Y):
        '''Method ISurface.FindNormal (from ISurface)

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            pNormal             : WKSPointZ*'''
        return super(ITinSurface2, self).FindNormal(X, Y)
    def GetElevation(self, pPoint):
        '''Method ISurface.GetElevation (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pElevation          : double*'''
        return super(ITinSurface2, self).GetElevation(pPoint)
    def GetSlopeDegrees(self, pPoint):
        '''Method ISurface.GetSlopeDegrees (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface2, self).GetSlopeDegrees(pPoint)
    def GetSlopeRadians(self, pPoint):
        '''Method ISurface.GetSlopeRadians (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface2, self).GetSlopeRadians(pPoint)
    def GetSlopePercent(self, pPoint):
        '''Method ISurface.GetSlopePercent (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pSlope              : double*'''
        return super(ITinSurface2, self).GetSlopePercent(pPoint)
    def GetAspectDegrees(self, pPoint):
        '''Method ISurface.GetAspectDegrees (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface2, self).GetAspectDegrees(pPoint)
    def GetAspectRadians(self, pPoint):
        '''Method ISurface.GetAspectRadians (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            pAspect             : double*'''
        return super(ITinSurface2, self).GetAspectRadians(pPoint)
    def IsVoidZ(self, Value):
        '''Method ISurface.IsVoidZ (from ISurface)

           INPUT
            Value               : double

           OUTPUT
            pbIsVoid            : VARIANT_BOOL*'''
        return super(ITinSurface2, self).IsVoidZ(Value)
    def InterpolateShape(self, pShape, pStepSize):
        '''Method ISurface.InterpolateShape (from ISurface)

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            ppOutShape          : IGeometry**'''
        return super(ITinSurface2, self).InterpolateShape(pShape, pStepSize)
    def InterpolateShapeVertices(self, pShape):
        '''Method ISurface.InterpolateShapeVertices (from ISurface)

           INPUT
            pShape              : IGeometry*

           OUTPUT
            ppOutShape          : IGeometry**'''
        return super(ITinSurface2, self).InterpolateShapeVertices(pShape)
    def GetProfile(self, pShape, pStepSize):
        '''Method ISurface.GetProfile (from ISurface)

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            ppProfile           : IGeometry**'''
        return super(ITinSurface2, self).GetProfile(pShape, pStepSize)
    def get_CanDoCurvature(self):
        '''Method ISurface.get_CanDoCurvature (from ISurface)

           OUTPUT
            pbCanDo             : VARIANT_BOOL*'''
        return super(ITinSurface2, self).get_CanDoCurvature()
    def GetLineOfSight(self, pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor):
        '''Method ISurface.GetLineOfSight (from ISurface)

           INPUTS
            pObserver           : IPoint*
            pTarget             : IPoint*
            bApplyCurvature     : VARIANT_BOOL
            bApplyRefraction    : VARIANT_BOOL
            pRefractionFactor   : VARIANT*

           OUTPUTS
            ppObstruction       : IPoint**
            ppVisibleLines      : IPolyline**
            ppInvisibleLines    : IPolyline**
            pbIsVisible         : VARIANT_BOOL*'''
        return super(ITinSurface2, self).GetLineOfSight(pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor)
    def QuerySurfaceLength(self, pShape, pStepSize):
        '''Method ISurface.QuerySurfaceLength (from ISurface)

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            pLength             : double*'''
        return super(ITinSurface2, self).QuerySurfaceLength(pShape, pStepSize)
    def Locate(self, pRay, hint):
        '''Method ISurface.Locate (from ISurface)

           INPUTS
            pRay                : IRay*
            hint                : long

           OUTPUT
            ppLocation          : IPoint**'''
        return super(ITinSurface2, self).Locate(pRay, hint)
    def LocateAll(self, pRay, hint):
        '''Method ISurface.LocateAll (from ISurface)

           INPUTS
            pRay                : IRay*
            hint                : long

           OUTPUT
            ppDistances         : IDoubleArray**'''
        return super(ITinSurface2, self).LocateAll(pRay, hint)
    def GetContour(self, pPoint):
        '''Method ISurface.GetContour (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUTS
            ppContour           : IPolyline**
            pElevation          : double*'''
        return super(ITinSurface2, self).GetContour(pPoint)
    def ContourList(self, pBreaks, pFeatureClass, FieldName, digitsAfterDecimalPoint):
        '''Method ISurface.ContourList (from ISurface)

           INPUTS
            pBreaks             : IDoubleArray*
            pFeatureClass       : IFeatureClass*
            FieldName           : BSTR
            digitsAfterDecimalPoint: long'''
        return super(ITinSurface2, self).ContourList(pBreaks, pFeatureClass, FieldName, digitsAfterDecimalPoint)
    def Contour(self, referenceContourHeight, interval, pFeatureClass, FieldName, digitsAfterDecimalPoint):
        '''Method ISurface.Contour (from ISurface)

           INPUTS
            referenceContourHeight: double
            interval            : double
            pFeatureClass       : IFeatureClass*
            FieldName           : BSTR
            digitsAfterDecimalPoint: long'''
        return super(ITinSurface2, self).Contour(referenceContourHeight, interval, pFeatureClass, FieldName, digitsAfterDecimalPoint)
    def AsPolygons(self, pFeatureClass, Type, pClassBreaks, pClassCodes, FieldName):
        '''Method ISurface.AsPolygons (from ISurface)

           INPUTS
            pFeatureClass       : IFeatureClass*
            Type                : esriSurfaceConversionType
            pClassBreaks        : IDoubleArray*
            pClassCodes         : ILongArray*
            FieldName           : VARIANT*'''
        return super(ITinSurface2, self).AsPolygons(pFeatureClass, Type, pClassBreaks, pClassCodes, FieldName)
    def GetSteepestPath(self, pPoint):
        '''Method ISurface.GetSteepestPath (from ISurface)

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppPath              : IPolyline**'''
        return super(ITinSurface2, self).GetSteepestPath(pPoint)
    def QueryPixelBlock(self, xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData, block):
        '''Method ISurface.QueryPixelBlock (from ISurface)

           INPUTS
            xOrigin             : double
            yOrigin             : double
            xPixelSize          : double
            yPixelSize          : double
            Type                : esriRasterizationType
            valueForNoData      : VARIANT
            block               : VARIANT'''
        return super(ITinSurface2, self).QueryPixelBlock(xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData, block)
    def get_Z(self, X, Y):
        '''Method IFunctionalSurface.get_Z (from IFunctionalSurface)

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            Z                   : double*'''
        return super(ITinSurface2, self).get_Z(X, Y)
    def get_Domain(self):
        '''Method IFunctionalSurface.get_Domain (from IFunctionalSurface)

           OUTPUT
            Domain              : IPolygon**'''
        return super(ITinSurface2, self).get_Domain()
    CanDoCurvature = property(get_CanDoCurvature, None, None)
    Domain = property(get_Domain, None, None)
    RasterInterpolationMethod = property(get_RasterInterpolationMethod, put_RasterInterpolationMethod, None)
    SunPosition = property(get_SunPosition, put_SunPosition, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ITinSurface3(_esriGeoDatabase.ITinSurface3):
    _IID = uuid.UUID('6fc85cbe-929c-4482-8192-2959d4e673cd')

    def __init__(self, *args, **kw):
        super(ITinSurface3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_InterpolationMethod(self, pType):
        '''Method ITinSurface3.put_InterpolationMethod

           INPUT
            pType               : esriSurfaceInterpolationType'''
        return super(ITinSurface3, self).put_InterpolationMethod(pType)
    def get_InterpolationMethod(self):
        '''Method ITinSurface3.get_InterpolationMethod

           OUTPUT
            pType               : esriSurfaceInterpolationType*'''
        return super(ITinSurface3, self).get_InterpolationMethod()
    def InterpolateZ(self, X, Y):
        '''Method ITinSurface3.InterpolateZ

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            pZ                  : double*'''
        return super(ITinSurface3, self).InterpolateZ(X, Y)
    def GetVolumeAndArea(self, pAOI, referenceHeight, Type):
        '''Method ITinSurface3.GetVolumeAndArea

           INPUTS
            pAOI                : IGeometry*
            referenceHeight     : double
            Type                : esriPlaneReferenceType

           OUTPUTS
            pbIsOutsideDataArea : VARIANT_BOOL*
            pVolume             : VARIANT*
            pSurfaceArea        : VARIANT*
            pProjectedArea      : VARIANT*'''
        return super(ITinSurface3, self).GetVolumeAndArea(pAOI, referenceHeight, Type)
    def Intersect(self, pReferenceSurface, pAOI, pOutFeatureClass, volumeFieldName, surfaceAreaFieldName, codeFieldName):
        '''Method ITinSurface3.Intersect

           INPUTS
            pReferenceSurface   : ITinSurface*
            pAOI                : IGeometry*
            pOutFeatureClass    : IFeatureClass*
            volumeFieldName     : BSTR
            surfaceAreaFieldName: BSTR
            codeFieldName       : BSTR'''
        return super(ITinSurface3, self).Intersect(pReferenceSurface, pAOI, pOutFeatureClass, volumeFieldName, surfaceAreaFieldName, codeFieldName)
    def QueryTriangleNormal(self, Triangle, pNormal):
        '''Method ITinSurface3.QueryTriangleNormal

           INPUTS
            Triangle            : long
            pNormal             : IVector3D*'''
        return super(ITinSurface3, self).QueryTriangleNormal(Triangle, pNormal)
    def QueryLocate(self, pRay, hint, pLocation):
        '''Method ITinSurface3.QueryLocate

           INPUTS
            pRay                : IRay*
            hint                : long
            pLocation           : IPoint*'''
        return super(ITinSurface3, self).QueryLocate(pRay, hint, pLocation)
    def QueryLocateWithinDistance(self, pRay, maxDistance, pLocations):
        '''Method ITinSurface3.QueryLocateWithinDistance

           INPUTS
            pRay                : IRay*
            maxDistance         : double
            pLocations          : IGeometry*'''
        return super(ITinSurface3, self).QueryLocateWithinDistance(pRay, maxDistance, pLocations)
    def Extract(self, pBoundary, boundaryEdgeType, boundaryEdgeValue, bConstrainedDelaunay, bAllowEdgeSwapping):
        '''Method ITinSurface3.Extract

           INPUTS
            pBoundary           : IPolygon*
            boundaryEdgeType    : esriTinEdgeType
            boundaryEdgeValue   : long
            bConstrainedDelaunay: VARIANT_BOOL
            bAllowEdgeSwapping  : VARIANT_BOOL

           OUTPUT
            ppSubTin            : ITin**'''
        return super(ITinSurface3, self).Extract(pBoundary, boundaryEdgeType, boundaryEdgeValue, bConstrainedDelaunay, bAllowEdgeSwapping)
    def put_ProfileWeedTolerance(self, pTolerance):
        '''Method ITinSurface3.put_ProfileWeedTolerance

           INPUT
            pTolerance          : double'''
        return super(ITinSurface3, self).put_ProfileWeedTolerance(pTolerance)
    def get_ProfileWeedTolerance(self):
        '''Method ITinSurface3.get_ProfileWeedTolerance

           OUTPUT
            pTolerance          : double*'''
        return super(ITinSurface3, self).get_ProfileWeedTolerance()
    InterpolationMethod = property(get_InterpolationMethod, put_InterpolationMethod, None)
    ProfileWeedTolerance = property(get_ProfileWeedTolerance, put_ProfileWeedTolerance, None)

class ITinFeatureEdit(_esriGeoDatabase.ITinFeatureEdit):
    _IID = uuid.UUID('73b80fc1-ff33-11d1-a549-0000f8774f0f')

    def __init__(self, *args, **kw):
        super(ITinFeatureEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def StartInMemoryEditing(self):
        '''Method ITinFeatureEdit.StartInMemoryEditing

           OUTPUT
            pbIsSuccessful      : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).StartInMemoryEditing()
    def get_IsInMemoryEditMode(self):
        '''Method ITinFeatureEdit.get_IsInMemoryEditMode

           OUTPUT
            pbIsInEditMode      : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).get_IsInMemoryEditMode()
    def SetToConstrainedDelaunay(self):
        '''Method ITinFeatureEdit.SetToConstrainedDelaunay'''
        return super(ITinFeatureEdit, self).SetToConstrainedDelaunay()
    def ExtractPolyline(self, pSeed, bGetZ, bSkipDensifiedNodes):
        '''Method ITinFeatureEdit.ExtractPolyline

           INPUTS
            pSeed               : ITinFeatureSeed*
            bGetZ               : VARIANT_BOOL
            bSkipDensifiedNodes : VARIANT_BOOL

           OUTPUT
            ppPolyline          : IPolyline**'''
        return super(ITinFeatureEdit, self).ExtractPolyline(pSeed, bGetZ, bSkipDensifiedNodes)
    def ExtractPolygon(self, pSeed, bGetZ, bSkipDensifiedNodes):
        '''Method ITinFeatureEdit.ExtractPolygon

           INPUTS
            pSeed               : ITinFeatureSeed*
            bGetZ               : VARIANT_BOOL
            bSkipDensifiedNodes : VARIANT_BOOL

           OUTPUT
            ppPolygon           : IPolygon**'''
        return super(ITinFeatureEdit, self).ExtractPolygon(pSeed, bGetZ, bSkipDensifiedNodes)
    def ConvertToPolylines(self, pFeatureClass, pFilter, bSkipDensifiedNodes, pFieldName):
        '''Method ITinFeatureEdit.ConvertToPolylines

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : ITinDynamicFilter*
            bSkipDensifiedNodes : VARIANT_BOOL
            pFieldName          : VARIANT*'''
        return super(ITinFeatureEdit, self).ConvertToPolylines(pFeatureClass, pFilter, bSkipDensifiedNodes, pFieldName)
    def ConvertToPolygons(self, pFeatureClass, pFilter, bStopAtEnforcedEdge, bSkipDensifiedNodes, pFieldName):
        '''Method ITinFeatureEdit.ConvertToPolygons

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : ITinDynamicFilter*
            bStopAtEnforcedEdge : VARIANT_BOOL
            bSkipDensifiedNodes : VARIANT_BOOL
            pFieldName          : VARIANT*'''
        return super(ITinFeatureEdit, self).ConvertToPolygons(pFeatureClass, pFilter, bStopAtEnforcedEdge, bSkipDensifiedNodes, pFieldName)
    def put_StopAtJuncture(self, pbStop):
        '''Method ITinFeatureEdit.put_StopAtJuncture

           INPUT
            pbStop              : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).put_StopAtJuncture(pbStop)
    def get_StopAtJuncture(self):
        '''Method ITinFeatureEdit.get_StopAtJuncture

           OUTPUT
            pbStop              : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).get_StopAtJuncture()
    def put_StopAtEnforcedEdge(self, pbStop):
        '''Method ITinFeatureEdit.put_StopAtEnforcedEdge

           INPUT
            pbStop              : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).put_StopAtEnforcedEdge(pbStop)
    def get_StopAtEnforcedEdge(self):
        '''Method ITinFeatureEdit.get_StopAtEnforcedEdge

           OUTPUT
            pbStop              : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).get_StopAtEnforcedEdge()
    def put_ElementsIgnoredInConflictTest(self, pElementsExcluded):
        '''Method ITinFeatureEdit.put_ElementsIgnoredInConflictTest

           INPUT
            pElementsExcluded   : long'''
        return super(ITinFeatureEdit, self).put_ElementsIgnoredInConflictTest(pElementsExcluded)
    def get_ElementsIgnoredInConflictTest(self):
        '''Method ITinFeatureEdit.get_ElementsIgnoredInConflictTest

           OUTPUT
            pElementsExcluded   : long*'''
        return super(ITinFeatureEdit, self).get_ElementsIgnoredInConflictTest()
    def CanAdd(self, pShape, spacing):
        '''Method ITinFeatureEdit.CanAdd

           INPUTS
            pShape              : IGeometry*
            spacing             : double

           OUTPUT
            pbCanAdd            : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanAdd(pShape, spacing)
    def CanReplace(self, pShape, pSeed, spacing):
        '''Method ITinFeatureEdit.CanReplace

           INPUTS
            pShape              : IGeometry*
            pSeed               : ITinFeatureSeed*
            spacing             : double

           OUTPUT
            pbCanReplace        : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanReplace(pShape, pSeed, spacing)
    def CanDisplace(self, pSeed, dx, dy, spacing):
        '''Method ITinFeatureEdit.CanDisplace

           INPUTS
            pSeed               : ITinFeatureSeed*
            dx                  : double
            dy                  : double
            spacing             : double

           OUTPUT
            pbCanDisplace       : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanDisplace(pSeed, dx, dy, spacing)
    def CanMove(self, pSeed, dx, dy, spacing):
        '''Method ITinFeatureEdit.CanMove

           INPUTS
            pSeed               : ITinFeatureSeed*
            dx                  : double
            dy                  : double
            spacing             : double

           OUTPUT
            pbCanMove           : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanMove(pSeed, dx, dy, spacing)
    def CanRotate(self, pSeed, pOrigin, Angle, spacing):
        '''Method ITinFeatureEdit.CanRotate

           INPUTS
            pSeed               : ITinFeatureSeed*
            pOrigin             : IPoint*
            Angle               : double
            spacing             : double

           OUTPUT
            pbCanRotate         : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanRotate(pSeed, pOrigin, Angle, spacing)
    def CanScalePolygon(self, pSeed, pOrigin, Scale, spacing):
        '''Method ITinFeatureEdit.CanScalePolygon

           INPUTS
            pSeed               : ITinTriangle*
            pOrigin             : IPoint*
            Scale               : double
            spacing             : double

           OUTPUT
            pbCanScale          : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanScalePolygon(pSeed, pOrigin, Scale, spacing)
    def CanAddVertex(self, pPoly, pNewPoint, bClose, spacing):
        '''Method ITinFeatureEdit.CanAddVertex

           INPUTS
            pPoly               : IGeometry*
            pNewPoint           : IPoint*
            bClose              : VARIANT_BOOL
            spacing             : double

           OUTPUT
            pbCanAdd            : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanAddVertex(pPoly, pNewPoint, bClose, spacing)
    def CanDeleteVertex(self, pNode, pSeed, spacing):
        '''Method ITinFeatureEdit.CanDeleteVertex

           INPUTS
            pNode               : ITinNode*
            pSeed               : ITinFeatureSeed*
            spacing             : double

           OUTPUT
            pbCanDelete         : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanDeleteVertex(pNode, pSeed, spacing)
    def CanMoveVertex(self, pNode, pSeed, pNewLocation, spacing):
        '''Method ITinFeatureEdit.CanMoveVertex

           INPUTS
            pNode               : ITinNode*
            pSeed               : ITinFeatureSeed*
            pNewLocation        : WKSPoint*
            spacing             : double

           OUTPUT
            pbCanMove           : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).CanMoveVertex(pNode, pSeed, pNewLocation, spacing)
    def AddPointZ(self, pPoint, TagValue, pSeed):
        '''Method ITinFeatureEdit.AddPointZ

           INPUTS
            pPoint              : IPoint*
            TagValue            : long
            pSeed               : ITinNode*'''
        return super(ITinFeatureEdit, self).AddPointZ(pPoint, TagValue, pSeed)
    def AddPolygonZ(self, pShape, Type, TagValue, edgeTagValue, NodeTagValue, pSeed):
        '''Method ITinFeatureEdit.AddPolygonZ

           INPUTS
            pShape              : IPolygon*
            Type                : esriTinEdgeType
            TagValue            : long
            edgeTagValue        : long
            NodeTagValue        : long
            pSeed               : ITinTriangle*'''
        return super(ITinFeatureEdit, self).AddPolygonZ(pShape, Type, TagValue, edgeTagValue, NodeTagValue, pSeed)
    def AddPolygon(self, pShape, Type, TagValue, edgeTagValue, NodeTagValue, pSeed, pZ):
        '''Method ITinFeatureEdit.AddPolygon

           INPUTS
            pShape              : IPolygon*
            Type                : esriTinEdgeType
            TagValue            : long
            edgeTagValue        : long
            NodeTagValue        : long
            pSeed               : ITinTriangle*
            pZ                  : VARIANT*'''
        return super(ITinFeatureEdit, self).AddPolygon(pShape, Type, TagValue, edgeTagValue, NodeTagValue, pSeed, pZ)
    def AddPolylineZ(self, pShape, Type, TagValue, NodeTagValue, pSeed):
        '''Method ITinFeatureEdit.AddPolylineZ

           INPUTS
            pShape              : IPolyline*
            Type                : esriTinEdgeType
            TagValue            : long
            NodeTagValue        : long
            pSeed               : ITinEdge*'''
        return super(ITinFeatureEdit, self).AddPolylineZ(pShape, Type, TagValue, NodeTagValue, pSeed)
    def AddPolyline(self, pShape, Type, TagValue, NodeTagValue, pSeed, pZ):
        '''Method ITinFeatureEdit.AddPolyline

           INPUTS
            pShape              : IPolyline*
            Type                : esriTinEdgeType
            TagValue            : long
            NodeTagValue        : long
            pSeed               : ITinEdge*
            pZ                  : VARIANT*'''
        return super(ITinFeatureEdit, self).AddPolyline(pShape, Type, TagValue, NodeTagValue, pSeed, pZ)
    def AddPolyObjects(self, pFeatureClass, pFilter, pHeightField, pValueField, bSetEdgeTagValue, bSetNodeTagValue, Type):
        '''Method ITinFeatureEdit.AddPolyObjects

           INPUTS
            pFeatureClass       : IFeatureClass*
            pFilter             : IQueryFilter*
            pHeightField        : IField*
            pValueField         : IField*
            bSetEdgeTagValue    : VARIANT_BOOL
            bSetNodeTagValue    : VARIANT_BOOL
            Type                : esriTinEdgeType'''
        return super(ITinFeatureEdit, self).AddPolyObjects(pFeatureClass, pFilter, pHeightField, pValueField, bSetEdgeTagValue, bSetNodeTagValue, Type)
    def Delete(self, pSeed):
        '''Method ITinFeatureEdit.Delete

           INPUT
            pSeed               : ITinFeatureSeed*'''
        return super(ITinFeatureEdit, self).Delete(pSeed)
    def Move(self, pSeed, dx, dy, bGetNewZ):
        '''Method ITinFeatureEdit.Move

           INPUTS
            pSeed               : ITinFeatureSeed*
            dx                  : double
            dy                  : double
            bGetNewZ            : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).Move(pSeed, dx, dy, bGetNewZ)
    def Rotate(self, pSeed, pOrigin, Angle, bGetNewZ):
        '''Method ITinFeatureEdit.Rotate

           INPUTS
            pSeed               : ITinFeatureSeed*
            pOrigin             : IPoint*
            Angle               : double
            bGetNewZ            : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).Rotate(pSeed, pOrigin, Angle, bGetNewZ)
    def ScalePolygon(self, pSeed, pOrigin, Scale, bGetNewZ):
        '''Method ITinFeatureEdit.ScalePolygon

           INPUTS
            pSeed               : ITinTriangle*
            pOrigin             : IPoint*
            Scale               : double
            bGetNewZ            : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).ScalePolygon(pSeed, pOrigin, Scale, bGetNewZ)
    def RemoveIslands(self, pSeed, Area, bKeepNodes, bZeroTag):
        '''Method ITinFeatureEdit.RemoveIslands

           INPUTS
            pSeed               : ITinTriangle*
            Area                : double
            bKeepNodes          : VARIANT_BOOL
            bZeroTag            : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).RemoveIslands(pSeed, Area, bKeepNodes, bZeroTag)
    def Merge(self, pCommonEdge, newValue, bKeepCommonNodes):
        '''Method ITinFeatureEdit.Merge

           INPUTS
            pCommonEdge         : ITinEdge*
            newValue            : long
            bKeepCommonNodes    : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).Merge(pCommonEdge, newValue, bKeepCommonNodes)
    def DeleteVertex(self, pNode, pSeed):
        '''Method ITinFeatureEdit.DeleteVertex

           INPUTS
            pNode               : ITinNode*
            pSeed               : ITinFeatureSeed*'''
        return super(ITinFeatureEdit, self).DeleteVertex(pNode, pSeed)
    def MoveVertex(self, pNode, pSeed, pNewLocation, bGetNewZ):
        '''Method ITinFeatureEdit.MoveVertex

           INPUTS
            pNode               : ITinNode*
            pSeed               : ITinFeatureSeed*
            pNewLocation        : WKSPoint*
            bGetNewZ            : VARIANT_BOOL'''
        return super(ITinFeatureEdit, self).MoveVertex(pNode, pSeed, pNewLocation, bGetNewZ)
    def QueryAdjacentVertices(self, pSeedEdge, pBehind, pFront):
        '''Method ITinFeatureEdit.QueryAdjacentVertices

           INPUTS
            pSeedEdge           : ITinFeatureSeed*
            pBehind             : ITinNode*
            pFront              : ITinNode*'''
        return super(ITinFeatureEdit, self).QueryAdjacentVertices(pSeedEdge, pBehind, pFront)
    def ClusterPoints(self, pSeed, spacing, pFilter):
        '''Method ITinFeatureEdit.ClusterPoints

           INPUTS
            pSeed               : ITinNode*
            spacing             : double
            pFilter             : ITinFilter*

           OUTPUT
            ppNodes             : IEnumTinNode**'''
        return super(ITinFeatureEdit, self).ClusterPoints(pSeed, spacing, pFilter)
    def IsNodeShared(self, pNode):
        '''Method ITinFeatureEdit.IsNodeShared

           INPUT
            pNode               : ITinNode*

           OUTPUT
            pIsShared           : VARIANT_BOOL*'''
        return super(ITinFeatureEdit, self).IsNodeShared(pNode)
    def RefreshTagValues(self):
        '''Method ITinFeatureEdit.RefreshTagValues'''
        return super(ITinFeatureEdit, self).RefreshTagValues()
    ElementsIgnoredInConflictTest = property(get_ElementsIgnoredInConflictTest, put_ElementsIgnoredInConflictTest, None)
    IsInMemoryEditMode = property(get_IsInMemoryEditMode, None, None)
    StopAtEnforcedEdge = property(get_StopAtEnforcedEdge, put_StopAtEnforcedEdge, None)
    StopAtJuncture = property(get_StopAtJuncture, put_StopAtJuncture, None)

class ISurfaceIntersectionEvents(_esriGeoDatabase.ISurfaceIntersectionEvents):
    _IID = uuid.UUID('63ce4874-b31c-48d3-ba60-5d1b74a63ceb')
    def OnIntersect(self, pDifferenceSurface):
        '''Method ISurfaceIntersectionEvents.OnIntersect

           INPUT
            pDifferenceSurface  : ITinSurface*'''
        return super(ISurfaceIntersectionEvents, self).OnIntersect(pDifferenceSurface)

class IGeoDatabaseBridge2(_esriGeoDatabase.IGeoDatabaseBridge2):
    _IID = uuid.UUID('84a92bc8-ee99-4d54-8547-8f6f7181f777')
    def AddList(self, SelectionSet, OIDList):
        '''Method IGeoDatabaseBridge2.AddList

           INPUTS
            SelectionSet        : ISelectionSet*
            OIDList             : SAFEARRAY**'''
        return super(IGeoDatabaseBridge2, self).AddList(SelectionSet, OIDList)
    def RemoveList(self, SelectionSet, OIDList):
        '''Method IGeoDatabaseBridge2.RemoveList

           INPUTS
            SelectionSet        : ISelectionSet*
            OIDList             : SAFEARRAY**'''
        return super(IGeoDatabaseBridge2, self).RemoveList(SelectionSet, OIDList)
    def QueryElevationBand(self, pTinTriangle, zLowerBound, zUpperBound):
        '''Method IGeoDatabaseBridge2.QueryElevationBand

           INPUTS
            pTinTriangle        : ITinTriangle*
            zLowerBound         : double
            zUpperBound         : double

           OUTPUTS
            pCount              : long*
            pRegion             : SAFEARRAY**'''
        return super(IGeoDatabaseBridge2, self).QueryElevationBand(pTinTriangle, zLowerBound, zUpperBound)
    def QueryPixelBlock(self, pSurface, xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData):
        '''Method IGeoDatabaseBridge2.QueryPixelBlock

           INPUTS
            pSurface            : ISurface*
            xOrigin             : double
            yOrigin             : double
            xPixelSize          : double
            yPixelSize          : double
            Type                : esriRasterizationType
            valueForNoData      : VARIANT

           OUTPUT
            block               : VARIANT*'''
        return super(IGeoDatabaseBridge2, self).QueryPixelBlock(pSurface, xOrigin, yOrigin, xPixelSize, yPixelSize, Type, valueForNoData)
    def GetLineOfSight(self, pSurface, pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor):
        '''Method IGeoDatabaseBridge2.GetLineOfSight

           INPUTS
            pSurface            : ISurface*
            pObserver           : IPoint*
            pTarget             : IPoint*
            bApplyCurvature     : VARIANT_BOOL
            bApplyRefraction    : VARIANT_BOOL
            pRefractionFactor   : VARIANT*

           OUTPUTS
            ppObstruction       : IPoint**
            ppVisibleLines      : IPolyline**
            ppInvisibleLines    : IPolyline**
            pbIsVisible         : VARIANT_BOOL*'''
        return super(IGeoDatabaseBridge2, self).GetLineOfSight(pSurface, pObserver, pTarget, bApplyCurvature, bApplyRefraction, pRefractionFactor)
    def GetFeatures(self, pFeatureClass, fids, Recycling):
        '''Method IGeoDatabaseBridge.GetFeatures (from IGeoDatabaseBridge)

           INPUTS
            pFeatureClass       : IFeatureClass*
            fids                : SAFEARRAY**
            Recycling           : VARIANT_BOOL

           OUTPUT
            Cursor              : IFeatureCursor**'''
        return super(IGeoDatabaseBridge2, self).GetFeatures(pFeatureClass, fids, Recycling)

class INetworkEdge(_esriGeoDatabase.INetworkEdge):
    _IID = uuid.UUID('eadcd556-0857-41d9-9714-03b0dbb16dfb')
    def get_Direction(self):
        '''Method INetworkEdge.get_Direction

           OUTPUT
            Direction           : esriNetworkEdgeDirection*'''
        return super(INetworkEdge, self).get_Direction()
    def QueryPositions(self):
        '''Method INetworkEdge.QueryPositions

           OUTPUTS
            fromPosition        : double*
            toPosition          : double*'''
        return super(INetworkEdge, self).QueryPositions()
    def get_FromAzimuth(self):
        '''Method INetworkEdge.get_FromAzimuth

           OUTPUT
            FromAzimuth         : double*'''
        return super(INetworkEdge, self).get_FromAzimuth()
    def get_ToAzimuth(self):
        '''Method INetworkEdge.get_ToAzimuth

           OUTPUT
            ToAzimuth           : double*'''
        return super(INetworkEdge, self).get_ToAzimuth()
    def get_TurnParticipationType(self):
        '''Method INetworkEdge.get_TurnParticipationType

           OUTPUT
            turnParticipation   : esriNetworkTurnParticipationType*'''
        return super(INetworkEdge, self).get_TurnParticipationType()
    def get_PositionAlongObject(self, positionAlongElement):
        '''Method INetworkEdge.get_PositionAlongObject

           INPUT
            positionAlongElement: double

           OUTPUT
            PositionAlongObject : double*'''
        return super(INetworkEdge, self).get_PositionAlongObject(positionAlongElement)
    def get_TurnCount(self):
        '''Method INetworkEdge.get_TurnCount

           OUTPUT
            Count               : long*'''
        return super(INetworkEdge, self).get_TurnCount()
    def QueryTurn(self, Index, Turn):
        '''Method INetworkEdge.QueryTurn

           INPUTS
            Index               : long
            Turn                : INetworkTurn*'''
        return super(INetworkEdge, self).QueryTurn(Index, Turn)
    def QueryEdgeInOtherDirection(self, Edge):
        '''Method INetworkEdge.QueryEdgeInOtherDirection

           INPUT
            Edge                : INetworkEdge*'''
        return super(INetworkEdge, self).QueryEdgeInOtherDirection(Edge)
    def QueryJunctions(self, FromJunction, ToJunction):
        '''Method INetworkEdge.QueryJunctions

           INPUTS
            FromJunction        : INetworkJunction*
            ToJunction          : INetworkJunction*'''
        return super(INetworkEdge, self).QueryJunctions(FromJunction, ToJunction)
    def get_EID(self):
        '''Method INetworkElement.get_EID (from INetworkElement)

           OUTPUT
            EID                 : long*'''
        return super(INetworkEdge, self).get_EID()
    def get_ElementType(self):
        '''Method INetworkElement.get_ElementType (from INetworkElement)

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkEdge, self).get_ElementType()
    def get_SourceID(self):
        '''Method INetworkElement.get_SourceID (from INetworkElement)

           OUTPUT
            SourceID            : long*'''
        return super(INetworkEdge, self).get_SourceID()
    def get_OID(self):
        '''Method INetworkElement.get_OID (from INetworkElement)

           OUTPUT
            OID                 : long*'''
        return super(INetworkEdge, self).get_OID()
    def get_AttributeValue(self, AttributeID):
        '''Method INetworkElement.get_AttributeValue (from INetworkElement)

           INPUT
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkEdge, self).get_AttributeValue(AttributeID)
    def get_AttributeValueByName(self, AttributeName):
        '''Method INetworkElement.get_AttributeValueByName (from INetworkElement)

           INPUT
            AttributeName       : BSTR

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkEdge, self).get_AttributeValueByName(AttributeName)
    Direction = property(get_Direction, None, None)
    EID = property(get_EID, None, None)
    ElementType = property(get_ElementType, None, None)
    FromAzimuth = property(get_FromAzimuth, None, None)
    OID = property(get_OID, None, None)
    SourceID = property(get_SourceID, None, None)
    ToAzimuth = property(get_ToAzimuth, None, None)
    TurnCount = property(get_TurnCount, None, None)
    TurnParticipationType = property(get_TurnParticipationType, None, None)
    AttributeValue = IndexProperty(get_AttributeValue, None)
    AttributeValueByName = IndexProperty(get_AttributeValueByName, None)
    PositionAlongObject = IndexProperty(get_PositionAlongObject, None)

class INetworkEdge2(_esriGeoDatabase.INetworkEdge2):
    _IID = uuid.UUID('97669d60-6fea-450d-aad4-a917f19fd420')
    def get_PartialEdgeAttributeValue(self, fromPosition, toPosition, AttributeID):
        '''Method INetworkEdge2.get_PartialEdgeAttributeValue

           INPUTS
            fromPosition        : double
            toPosition          : double
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkEdge2, self).get_PartialEdgeAttributeValue(fromPosition, toPosition, AttributeID)
    def get_AttributeValueAtTime(self, AttributeID, localTime, timeUsage):
        '''Method INetworkEdge2.get_AttributeValueAtTime

           INPUTS
            AttributeID         : long
            localTime           : DATE
            timeUsage           : esriNetworkTimeUsage

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkEdge2, self).get_AttributeValueAtTime(AttributeID, localTime, timeUsage)
    def get_PartialEdgeAttributeValueAtTime(self, fromPosition, toPosition, AttributeID, localTime, timeUsage):
        '''Method INetworkEdge2.get_PartialEdgeAttributeValueAtTime

           INPUTS
            fromPosition        : double
            toPosition          : double
            AttributeID         : long
            localTime           : DATE
            timeUsage           : esriNetworkTimeUsage

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkEdge2, self).get_PartialEdgeAttributeValueAtTime(fromPosition, toPosition, AttributeID, localTime, timeUsage)
    def get_IsHyperedge(self):
        '''Method INetworkEdge2.get_IsHyperedge

           OUTPUT
            IsHyperedge         : VARIANT_BOOL*'''
        return super(INetworkEdge2, self).get_IsHyperedge()
    def get_HasCoveringHyperedge(self):
        '''Method INetworkEdge2.get_HasCoveringHyperedge

           OUTPUT
            HasCoveringHyperedge: VARIANT_BOOL*'''
        return super(INetworkEdge2, self).get_HasCoveringHyperedge()
    def QueryCoveringHyperedge(self, Edge):
        '''Method INetworkEdge2.QueryCoveringHyperedge

           INPUT
            Edge                : INetworkEdge*

           OUTPUTS
            fromPosition        : double*
            toPosition          : double*'''
        return super(INetworkEdge2, self).QueryCoveringHyperedge(Edge)
    def get_CoveredEdgeCount(self):
        '''Method INetworkEdge2.get_CoveredEdgeCount

           OUTPUT
            CoveredEdgeCount    : long*'''
        return super(INetworkEdge2, self).get_CoveredEdgeCount()
    def QueryCoveredEdge(self, Index, Edge):
        '''Method INetworkEdge2.QueryCoveredEdge

           INPUTS
            Index               : long
            Edge                : INetworkEdge*'''
        return super(INetworkEdge2, self).QueryCoveredEdge(Index, Edge)
    def get_Direction(self):
        '''Method INetworkEdge.get_Direction (from INetworkEdge)

           OUTPUT
            Direction           : esriNetworkEdgeDirection*'''
        return super(INetworkEdge2, self).get_Direction()
    def QueryPositions(self):
        '''Method INetworkEdge.QueryPositions (from INetworkEdge)

           OUTPUTS
            fromPosition        : double*
            toPosition          : double*'''
        return super(INetworkEdge2, self).QueryPositions()
    def get_FromAzimuth(self):
        '''Method INetworkEdge.get_FromAzimuth (from INetworkEdge)

           OUTPUT
            FromAzimuth         : double*'''
        return super(INetworkEdge2, self).get_FromAzimuth()
    def get_ToAzimuth(self):
        '''Method INetworkEdge.get_ToAzimuth (from INetworkEdge)

           OUTPUT
            ToAzimuth           : double*'''
        return super(INetworkEdge2, self).get_ToAzimuth()
    def get_TurnParticipationType(self):
        '''Method INetworkEdge.get_TurnParticipationType (from INetworkEdge)

           OUTPUT
            turnParticipation   : esriNetworkTurnParticipationType*'''
        return super(INetworkEdge2, self).get_TurnParticipationType()
    def get_PositionAlongObject(self, positionAlongElement):
        '''Method INetworkEdge.get_PositionAlongObject (from INetworkEdge)

           INPUT
            positionAlongElement: double

           OUTPUT
            PositionAlongObject : double*'''
        return super(INetworkEdge2, self).get_PositionAlongObject(positionAlongElement)
    def get_TurnCount(self):
        '''Method INetworkEdge.get_TurnCount (from INetworkEdge)

           OUTPUT
            Count               : long*'''
        return super(INetworkEdge2, self).get_TurnCount()
    def QueryTurn(self, Index, Turn):
        '''Method INetworkEdge.QueryTurn (from INetworkEdge)

           INPUTS
            Index               : long
            Turn                : INetworkTurn*'''
        return super(INetworkEdge2, self).QueryTurn(Index, Turn)
    def QueryEdgeInOtherDirection(self, Edge):
        '''Method INetworkEdge.QueryEdgeInOtherDirection (from INetworkEdge)

           INPUT
            Edge                : INetworkEdge*'''
        return super(INetworkEdge2, self).QueryEdgeInOtherDirection(Edge)
    def QueryJunctions(self, FromJunction, ToJunction):
        '''Method INetworkEdge.QueryJunctions (from INetworkEdge)

           INPUTS
            FromJunction        : INetworkJunction*
            ToJunction          : INetworkJunction*'''
        return super(INetworkEdge2, self).QueryJunctions(FromJunction, ToJunction)
    def get_EID(self):
        '''Method INetworkElement.get_EID (from INetworkElement)

           OUTPUT
            EID                 : long*'''
        return super(INetworkEdge2, self).get_EID()
    def get_ElementType(self):
        '''Method INetworkElement.get_ElementType (from INetworkElement)

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkEdge2, self).get_ElementType()
    def get_SourceID(self):
        '''Method INetworkElement.get_SourceID (from INetworkElement)

           OUTPUT
            SourceID            : long*'''
        return super(INetworkEdge2, self).get_SourceID()
    def get_OID(self):
        '''Method INetworkElement.get_OID (from INetworkElement)

           OUTPUT
            OID                 : long*'''
        return super(INetworkEdge2, self).get_OID()
    def get_AttributeValue(self, AttributeID):
        '''Method INetworkElement.get_AttributeValue (from INetworkElement)

           INPUT
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkEdge2, self).get_AttributeValue(AttributeID)
    def get_AttributeValueByName(self, AttributeName):
        '''Method INetworkElement.get_AttributeValueByName (from INetworkElement)

           INPUT
            AttributeName       : BSTR

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkEdge2, self).get_AttributeValueByName(AttributeName)
    CoveredEdgeCount = property(get_CoveredEdgeCount, None, None)
    Direction = property(get_Direction, None, None)
    EID = property(get_EID, None, None)
    ElementType = property(get_ElementType, None, None)
    FromAzimuth = property(get_FromAzimuth, None, None)
    HasCoveringHyperedge = property(get_HasCoveringHyperedge, None, None)
    IsHyperedge = property(get_IsHyperedge, None, None)
    OID = property(get_OID, None, None)
    SourceID = property(get_SourceID, None, None)
    ToAzimuth = property(get_ToAzimuth, None, None)
    TurnCount = property(get_TurnCount, None, None)
    TurnParticipationType = property(get_TurnParticipationType, None, None)
    AttributeValue = IndexProperty(get_AttributeValue, None)
    AttributeValueByName = IndexProperty(get_AttributeValueByName, None)
    PositionAlongObject = IndexProperty(get_PositionAlongObject, None)

class INetworkTurn(_esriGeoDatabase.INetworkTurn):
    _IID = uuid.UUID('e284790c-e7b0-40c5-8ea8-146323bedefa')
    def get_TurnType(self):
        '''Method INetworkTurn.get_TurnType

           OUTPUT
            TurnType            : esriNetworkTurnType*'''
        return super(INetworkTurn, self).get_TurnType()
    def QueryAtJunction(self, Junction):
        '''Method INetworkTurn.QueryAtJunction

           INPUT
            Junction            : INetworkJunction*'''
        return super(INetworkTurn, self).QueryAtJunction(Junction)
    def get_Angle(self):
        '''Method INetworkTurn.get_Angle

           OUTPUT
            Angle               : double*'''
        return super(INetworkTurn, self).get_Angle()
    def get_EdgeCount(self):
        '''Method INetworkTurn.get_EdgeCount

           OUTPUT
            EdgeCount           : long*'''
        return super(INetworkTurn, self).get_EdgeCount()
    def QueryEdge(self, Index, Edge):
        '''Method INetworkTurn.QueryEdge

           INPUTS
            Index               : long
            Edge                : INetworkEdge*'''
        return super(INetworkTurn, self).QueryEdge(Index, Edge)
    def get_EID(self):
        '''Method INetworkElement.get_EID (from INetworkElement)

           OUTPUT
            EID                 : long*'''
        return super(INetworkTurn, self).get_EID()
    def get_ElementType(self):
        '''Method INetworkElement.get_ElementType (from INetworkElement)

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkTurn, self).get_ElementType()
    def get_SourceID(self):
        '''Method INetworkElement.get_SourceID (from INetworkElement)

           OUTPUT
            SourceID            : long*'''
        return super(INetworkTurn, self).get_SourceID()
    def get_OID(self):
        '''Method INetworkElement.get_OID (from INetworkElement)

           OUTPUT
            OID                 : long*'''
        return super(INetworkTurn, self).get_OID()
    def get_AttributeValue(self, AttributeID):
        '''Method INetworkElement.get_AttributeValue (from INetworkElement)

           INPUT
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkTurn, self).get_AttributeValue(AttributeID)
    def get_AttributeValueByName(self, AttributeName):
        '''Method INetworkElement.get_AttributeValueByName (from INetworkElement)

           INPUT
            AttributeName       : BSTR

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkTurn, self).get_AttributeValueByName(AttributeName)
    Angle = property(get_Angle, None, None)
    EID = property(get_EID, None, None)
    EdgeCount = property(get_EdgeCount, None, None)
    ElementType = property(get_ElementType, None, None)
    OID = property(get_OID, None, None)
    SourceID = property(get_SourceID, None, None)
    TurnType = property(get_TurnType, None, None)
    AttributeValue = IndexProperty(get_AttributeValue, None)
    AttributeValueByName = IndexProperty(get_AttributeValueByName, None)

class INetworkJunction(_esriGeoDatabase.INetworkJunction):
    _IID = uuid.UUID('e3d2d64e-c620-4262-888a-dc724a82f62d')
    def get_EdgeCount(self):
        '''Method INetworkJunction.get_EdgeCount

           OUTPUT
            adjacentEdgeCount   : long*'''
        return super(INetworkJunction, self).get_EdgeCount()
    def get_TurnCount(self):
        '''Method INetworkJunction.get_TurnCount

           OUTPUT
            TurnCount           : long*'''
        return super(INetworkJunction, self).get_TurnCount()
    def QueryEdge(self, Index, leavingJunction, Edge):
        '''Method INetworkJunction.QueryEdge

           INPUTS
            Index               : long
            leavingJunction     : VARIANT_BOOL
            Edge                : INetworkEdge*'''
        return super(INetworkJunction, self).QueryEdge(Index, leavingJunction, Edge)
    def QueryTurn(self, Index, Turn):
        '''Method INetworkJunction.QueryTurn

           INPUTS
            Index               : long
            Turn                : INetworkTurn*'''
        return super(INetworkJunction, self).QueryTurn(Index, Turn)
    def QueryPoint(self, point):
        '''Method INetworkJunction.QueryPoint

           INPUT
            point               : IPoint*'''
        return super(INetworkJunction, self).QueryPoint(point)
    def get_EID(self):
        '''Method INetworkElement.get_EID (from INetworkElement)

           OUTPUT
            EID                 : long*'''
        return super(INetworkJunction, self).get_EID()
    def get_ElementType(self):
        '''Method INetworkElement.get_ElementType (from INetworkElement)

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkJunction, self).get_ElementType()
    def get_SourceID(self):
        '''Method INetworkElement.get_SourceID (from INetworkElement)

           OUTPUT
            SourceID            : long*'''
        return super(INetworkJunction, self).get_SourceID()
    def get_OID(self):
        '''Method INetworkElement.get_OID (from INetworkElement)

           OUTPUT
            OID                 : long*'''
        return super(INetworkJunction, self).get_OID()
    def get_AttributeValue(self, AttributeID):
        '''Method INetworkElement.get_AttributeValue (from INetworkElement)

           INPUT
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkJunction, self).get_AttributeValue(AttributeID)
    def get_AttributeValueByName(self, AttributeName):
        '''Method INetworkElement.get_AttributeValueByName (from INetworkElement)

           INPUT
            AttributeName       : BSTR

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkJunction, self).get_AttributeValueByName(AttributeName)
    EID = property(get_EID, None, None)
    EdgeCount = property(get_EdgeCount, None, None)
    ElementType = property(get_ElementType, None, None)
    OID = property(get_OID, None, None)
    SourceID = property(get_SourceID, None, None)
    TurnCount = property(get_TurnCount, None, None)
    AttributeValue = IndexProperty(get_AttributeValue, None)
    AttributeValueByName = IndexProperty(get_AttributeValueByName, None)

class INetworkJunction2(_esriGeoDatabase.INetworkJunction2):
    _IID = uuid.UUID('10c79f21-f00b-4f1f-b6d3-372c8dc3c129')
    def get_AttributeValueAtTime(self, AttributeID, localTime, timeUsage):
        '''Method INetworkJunction2.get_AttributeValueAtTime

           INPUTS
            AttributeID         : long
            localTime           : DATE
            timeUsage           : esriNetworkTimeUsage

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkJunction2, self).get_AttributeValueAtTime(AttributeID, localTime, timeUsage)
    def get_EdgeCount(self):
        '''Method INetworkJunction.get_EdgeCount (from INetworkJunction)

           OUTPUT
            adjacentEdgeCount   : long*'''
        return super(INetworkJunction2, self).get_EdgeCount()
    def get_TurnCount(self):
        '''Method INetworkJunction.get_TurnCount (from INetworkJunction)

           OUTPUT
            TurnCount           : long*'''
        return super(INetworkJunction2, self).get_TurnCount()
    def QueryEdge(self, Index, leavingJunction, Edge):
        '''Method INetworkJunction.QueryEdge (from INetworkJunction)

           INPUTS
            Index               : long
            leavingJunction     : VARIANT_BOOL
            Edge                : INetworkEdge*'''
        return super(INetworkJunction2, self).QueryEdge(Index, leavingJunction, Edge)
    def QueryTurn(self, Index, Turn):
        '''Method INetworkJunction.QueryTurn (from INetworkJunction)

           INPUTS
            Index               : long
            Turn                : INetworkTurn*'''
        return super(INetworkJunction2, self).QueryTurn(Index, Turn)
    def QueryPoint(self, point):
        '''Method INetworkJunction.QueryPoint (from INetworkJunction)

           INPUT
            point               : IPoint*'''
        return super(INetworkJunction2, self).QueryPoint(point)
    def get_EID(self):
        '''Method INetworkElement.get_EID (from INetworkElement)

           OUTPUT
            EID                 : long*'''
        return super(INetworkJunction2, self).get_EID()
    def get_ElementType(self):
        '''Method INetworkElement.get_ElementType (from INetworkElement)

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkJunction2, self).get_ElementType()
    def get_SourceID(self):
        '''Method INetworkElement.get_SourceID (from INetworkElement)

           OUTPUT
            SourceID            : long*'''
        return super(INetworkJunction2, self).get_SourceID()
    def get_OID(self):
        '''Method INetworkElement.get_OID (from INetworkElement)

           OUTPUT
            OID                 : long*'''
        return super(INetworkJunction2, self).get_OID()
    def get_AttributeValue(self, AttributeID):
        '''Method INetworkElement.get_AttributeValue (from INetworkElement)

           INPUT
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkJunction2, self).get_AttributeValue(AttributeID)
    def get_AttributeValueByName(self, AttributeName):
        '''Method INetworkElement.get_AttributeValueByName (from INetworkElement)

           INPUT
            AttributeName       : BSTR

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkJunction2, self).get_AttributeValueByName(AttributeName)
    EID = property(get_EID, None, None)
    EdgeCount = property(get_EdgeCount, None, None)
    ElementType = property(get_ElementType, None, None)
    OID = property(get_OID, None, None)
    SourceID = property(get_SourceID, None, None)
    TurnCount = property(get_TurnCount, None, None)
    AttributeValue = IndexProperty(get_AttributeValue, None)
    AttributeValueByName = IndexProperty(get_AttributeValueByName, None)

class INetworkTurn2(_esriGeoDatabase.INetworkTurn2):
    _IID = uuid.UUID('fc74a0bd-1fa9-4669-a9fe-02833ff07547')
    def get_AttributeValueAtTime(self, AttributeID, localTime, timeUsage):
        '''Method INetworkTurn2.get_AttributeValueAtTime

           INPUTS
            AttributeID         : long
            localTime           : DATE
            timeUsage           : esriNetworkTimeUsage

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkTurn2, self).get_AttributeValueAtTime(AttributeID, localTime, timeUsage)
    def get_TurnType(self):
        '''Method INetworkTurn.get_TurnType (from INetworkTurn)

           OUTPUT
            TurnType            : esriNetworkTurnType*'''
        return super(INetworkTurn2, self).get_TurnType()
    def QueryAtJunction(self, Junction):
        '''Method INetworkTurn.QueryAtJunction (from INetworkTurn)

           INPUT
            Junction            : INetworkJunction*'''
        return super(INetworkTurn2, self).QueryAtJunction(Junction)
    def get_Angle(self):
        '''Method INetworkTurn.get_Angle (from INetworkTurn)

           OUTPUT
            Angle               : double*'''
        return super(INetworkTurn2, self).get_Angle()
    def get_EdgeCount(self):
        '''Method INetworkTurn.get_EdgeCount (from INetworkTurn)

           OUTPUT
            EdgeCount           : long*'''
        return super(INetworkTurn2, self).get_EdgeCount()
    def QueryEdge(self, Index, Edge):
        '''Method INetworkTurn.QueryEdge (from INetworkTurn)

           INPUTS
            Index               : long
            Edge                : INetworkEdge*'''
        return super(INetworkTurn2, self).QueryEdge(Index, Edge)
    def get_EID(self):
        '''Method INetworkElement.get_EID (from INetworkElement)

           OUTPUT
            EID                 : long*'''
        return super(INetworkTurn2, self).get_EID()
    def get_ElementType(self):
        '''Method INetworkElement.get_ElementType (from INetworkElement)

           OUTPUT
            Type                : esriNetworkElementType*'''
        return super(INetworkTurn2, self).get_ElementType()
    def get_SourceID(self):
        '''Method INetworkElement.get_SourceID (from INetworkElement)

           OUTPUT
            SourceID            : long*'''
        return super(INetworkTurn2, self).get_SourceID()
    def get_OID(self):
        '''Method INetworkElement.get_OID (from INetworkElement)

           OUTPUT
            OID                 : long*'''
        return super(INetworkTurn2, self).get_OID()
    def get_AttributeValue(self, AttributeID):
        '''Method INetworkElement.get_AttributeValue (from INetworkElement)

           INPUT
            AttributeID         : long

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkTurn2, self).get_AttributeValue(AttributeID)
    def get_AttributeValueByName(self, AttributeName):
        '''Method INetworkElement.get_AttributeValueByName (from INetworkElement)

           INPUT
            AttributeName       : BSTR

           OUTPUT
            AttributeValue      : VARIANT*'''
        return super(INetworkTurn2, self).get_AttributeValueByName(AttributeName)
    Angle = property(get_Angle, None, None)
    EID = property(get_EID, None, None)
    EdgeCount = property(get_EdgeCount, None, None)
    ElementType = property(get_ElementType, None, None)
    OID = property(get_OID, None, None)
    SourceID = property(get_SourceID, None, None)
    TurnType = property(get_TurnType, None, None)
    AttributeValue = IndexProperty(get_AttributeValue, None)
    AttributeValueByName = IndexProperty(get_AttributeValueByName, None)

class INetworkForwardStarAdjacencies(_esriGeoDatabase.INetworkForwardStarAdjacencies):
    _IID = uuid.UUID('f7b90a86-48db-46fe-af94-869e19b9fe75')
    def get_Count(self):
        '''Method INetworkForwardStarAdjacencies.get_Count

           OUTPUT
            Count               : long*'''
        return super(INetworkForwardStarAdjacencies, self).get_Count()
    def QueryAtJunction(self, Junction):
        '''Method INetworkForwardStarAdjacencies.QueryAtJunction

           INPUT
            Junction            : INetworkJunction*'''
        return super(INetworkForwardStarAdjacencies, self).QueryAtJunction(Junction)
    def QueryEdge(self, Index, adjacentEdge):
        '''Method INetworkForwardStarAdjacencies.QueryEdge

           INPUTS
            Index               : long
            adjacentEdge        : INetworkEdge*

           OUTPUTS
            fromPosition        : double*
            toPosition          : double*'''
        return super(INetworkForwardStarAdjacencies, self).QueryEdge(Index, adjacentEdge)
    def QueryToJunction(self, Index, adjacentJunction):
        '''Method INetworkForwardStarAdjacencies.QueryToJunction

           INPUTS
            Index               : long
            adjacentJunction    : INetworkJunction*

           OUTPUT
            IsFiltered          : VARIANT_BOOL*'''
        return super(INetworkForwardStarAdjacencies, self).QueryToJunction(Index, adjacentJunction)
    def QueryTurn(self, Index, adjacentTurn):
        '''Method INetworkForwardStarAdjacencies.QueryTurn

           INPUTS
            Index               : long
            adjacentTurn        : INetworkTurn*'''
        return super(INetworkForwardStarAdjacencies, self).QueryTurn(Index, adjacentTurn)
    def get_HasTurn(self, Index):
        '''Method INetworkForwardStarAdjacencies.get_HasTurn

           INPUT
            Index               : long

           OUTPUT
            HasTurn             : VARIANT_BOOL*'''
        return super(INetworkForwardStarAdjacencies, self).get_HasTurn(Index)
    def get_HasTurnRestriction(self):
        '''Method INetworkForwardStarAdjacencies.get_HasTurnRestriction

           OUTPUT
            HasTurnRestriction  : VARIANT_BOOL*'''
        return super(INetworkForwardStarAdjacencies, self).get_HasTurnRestriction()
    Count = property(get_Count, None, None)
    HasTurnRestriction = property(get_HasTurnRestriction, None, None)
    HasTurn = IndexProperty(get_HasTurn, None)

class INetworkForwardStar(_esriGeoDatabase.INetworkForwardStar):
    _IID = uuid.UUID('fde593a2-8e96-40c8-8ab2-6da6d60af9b9')
    def QueryAdjacencies(self, atJunction, fromEdge, lastExteriorEdge, adjacencies):
        '''Method INetworkForwardStar.QueryAdjacencies

           INPUTS
            atJunction          : INetworkJunction*
            fromEdge            : INetworkEdge*
            lastExteriorEdge    : INetworkEdge*
            adjacencies         : INetworkForwardStarAdjacencies*'''
        return super(INetworkForwardStar, self).QueryAdjacencies(atJunction, fromEdge, lastExteriorEdge, adjacencies)
    def get_IsFiltered(self, Element):
        '''Method INetworkForwardStar.get_IsFiltered

           INPUT
            Element             : INetworkElement*

           OUTPUT
            IsFiltered          : VARIANT_BOOL*'''
        return super(INetworkForwardStar, self).get_IsFiltered(Element)
    IsFiltered = IndexProperty(get_IsFiltered, None)

class INetworkQuery(_esriGeoDatabase.INetworkQuery):
    _IID = uuid.UUID('73bed6fc-fda9-45b0-a82d-1b42d52a26d0')
    def get_MaxEID(self, ElementType):
        '''Method INetworkQuery.get_MaxEID

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            MaxEID              : long*'''
        return super(INetworkQuery, self).get_MaxEID(ElementType)
    def get_MaxValence(self):
        '''Method INetworkQuery.get_MaxValence

           OUTPUT
            MaxValence          : long*'''
        return super(INetworkQuery, self).get_MaxValence()
    def get_ElementCount(self, ElementType):
        '''Method INetworkQuery.get_ElementCount

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            ElementCount        : long*'''
        return super(INetworkQuery, self).get_ElementCount(ElementType)
    def get_ComplexTurnCount(self):
        '''Method INetworkQuery.get_ComplexTurnCount

           OUTPUT
            ComplexTurnCount    : long*'''
        return super(INetworkQuery, self).get_ComplexTurnCount()
    def CreateForwardStar(self):
        '''Method INetworkQuery.CreateForwardStar

           OUTPUT
            ForwardStar         : INetworkForwardStar**'''
        return super(INetworkQuery, self).CreateForwardStar()
    def CreateForwardStarAdjacencies(self):
        '''Method INetworkQuery.CreateForwardStarAdjacencies

           OUTPUT
            forwardStarAdjacencies: INetworkForwardStarAdjacencies**'''
        return super(INetworkQuery, self).CreateForwardStarAdjacencies()
    def CreateNetworkElement(self, ElementType):
        '''Method INetworkQuery.CreateNetworkElement

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Element             : INetworkElement**'''
        return super(INetworkQuery, self).CreateNetworkElement(ElementType)
    def QueryEdge(self, EID, Direction, Edge):
        '''Method INetworkQuery.QueryEdge

           INPUTS
            EID                 : long
            Direction           : esriNetworkEdgeDirection
            Edge                : INetworkEdge*'''
        return super(INetworkQuery, self).QueryEdge(EID, Direction, Edge)
    def QueryJunction(self, EID, Junction):
        '''Method INetworkQuery.QueryJunction

           INPUTS
            EID                 : long
            Junction            : INetworkJunction*'''
        return super(INetworkQuery, self).QueryJunction(EID, Junction)
    def QueryTurn(self, EID, Turn):
        '''Method INetworkQuery.QueryTurn

           INPUTS
            EID                 : long
            Turn                : INetworkTurn*'''
        return super(INetworkQuery, self).QueryTurn(EID, Turn)
    def get_ElementsByOID(self, SourceID, OID):
        '''Method INetworkQuery.get_ElementsByOID

           INPUTS
            SourceID            : long
            OID                 : long

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery, self).get_ElementsByOID(SourceID, OID)
    def get_EdgesByPosition(self, SourceID, OID, Position, includeRelatedSDCHyperEdges):
        '''Method INetworkQuery.get_EdgesByPosition

           INPUTS
            SourceID            : long
            OID                 : long
            Position            : double
            includeRelatedSDCHyperEdges: VARIANT_BOOL

           OUTPUT
            Edges               : IEnumNetworkElement**'''
        return super(INetworkQuery, self).get_EdgesByPosition(SourceID, OID, Position, includeRelatedSDCHyperEdges)
    def get_EdgesBySegment(self, SourceID, OID, fromPosition, toPosition):
        '''Method INetworkQuery.get_EdgesBySegment

           INPUTS
            SourceID            : long
            OID                 : long
            fromPosition        : double
            toPosition          : double

           OUTPUT
            Edges               : IEnumNetworkElement**'''
        return super(INetworkQuery, self).get_EdgesBySegment(SourceID, OID, fromPosition, toPosition)
    def get_Elements(self, ElementType):
        '''Method INetworkQuery.get_Elements

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery, self).get_Elements(ElementType)
    def get_ElementsByOIDs(self, SourceID, oids):
        '''Method INetworkQuery.get_ElementsByOIDs

           INPUTS
            SourceID            : long
            oids                : ILongArray*

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery, self).get_ElementsByOIDs(SourceID, oids)
    def get_ElementsForSource(self, SourceID):
        '''Method INetworkQuery.get_ElementsForSource

           INPUT
            SourceID            : long

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery, self).get_ElementsForSource(SourceID)
    def ClearIDCache(self):
        '''Method INetworkQuery.ClearIDCache'''
        return super(INetworkQuery, self).ClearIDCache()
    def PopulateIDCache(self, SourceID):
        '''Method INetworkQuery.PopulateIDCache

           INPUT
            SourceID            : long'''
        return super(INetworkQuery, self).PopulateIDCache(SourceID)
    ComplexTurnCount = property(get_ComplexTurnCount, None, None)
    MaxValence = property(get_MaxValence, None, None)
    ElementCount = IndexProperty(get_ElementCount, None)
    Elements = IndexProperty(get_Elements, None)
    ElementsForSource = IndexProperty(get_ElementsForSource, None)
    MaxEID = IndexProperty(get_MaxEID, None)

class INetworkQuery2(_esriGeoDatabase.INetworkQuery2):
    _IID = uuid.UUID('f5c55877-9fbe-47dc-92cd-b49037605b9f')
    def get_TimeZoneID(self, networkElement):
        '''Method INetworkQuery2.get_TimeZoneID

           INPUT
            networkElement      : INetworkElement*

           OUTPUT
            TimeZoneID          : long*'''
        return super(INetworkQuery2, self).get_TimeZoneID(networkElement)
    def ConvertLocalTimeToUTCTime(self, localTimeZoneID, localTime):
        '''Method INetworkQuery2.ConvertLocalTimeToUTCTime

           INPUTS
            localTimeZoneID     : long
            localTime           : DATE

           OUTPUT
            utcTime             : DATE*'''
        return super(INetworkQuery2, self).ConvertLocalTimeToUTCTime(localTimeZoneID, localTime)
    def ConvertUTCTimeToLocalTime(self, localTimeZoneID, utcTime):
        '''Method INetworkQuery2.ConvertUTCTimeToLocalTime

           INPUTS
            localTimeZoneID     : long
            utcTime             : DATE

           OUTPUT
            localTime           : DATE*'''
        return super(INetworkQuery2, self).ConvertUTCTimeToLocalTime(localTimeZoneID, utcTime)
    def get_MaxEID(self, ElementType):
        '''Method INetworkQuery.get_MaxEID (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            MaxEID              : long*'''
        return super(INetworkQuery2, self).get_MaxEID(ElementType)
    def get_MaxValence(self):
        '''Method INetworkQuery.get_MaxValence (from INetworkQuery)

           OUTPUT
            MaxValence          : long*'''
        return super(INetworkQuery2, self).get_MaxValence()
    def get_ElementCount(self, ElementType):
        '''Method INetworkQuery.get_ElementCount (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            ElementCount        : long*'''
        return super(INetworkQuery2, self).get_ElementCount(ElementType)
    def get_ComplexTurnCount(self):
        '''Method INetworkQuery.get_ComplexTurnCount (from INetworkQuery)

           OUTPUT
            ComplexTurnCount    : long*'''
        return super(INetworkQuery2, self).get_ComplexTurnCount()
    def CreateForwardStar(self):
        '''Method INetworkQuery.CreateForwardStar (from INetworkQuery)

           OUTPUT
            ForwardStar         : INetworkForwardStar**'''
        return super(INetworkQuery2, self).CreateForwardStar()
    def CreateForwardStarAdjacencies(self):
        '''Method INetworkQuery.CreateForwardStarAdjacencies (from INetworkQuery)

           OUTPUT
            forwardStarAdjacencies: INetworkForwardStarAdjacencies**'''
        return super(INetworkQuery2, self).CreateForwardStarAdjacencies()
    def CreateNetworkElement(self, ElementType):
        '''Method INetworkQuery.CreateNetworkElement (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Element             : INetworkElement**'''
        return super(INetworkQuery2, self).CreateNetworkElement(ElementType)
    def QueryEdge(self, EID, Direction, Edge):
        '''Method INetworkQuery.QueryEdge (from INetworkQuery)

           INPUTS
            EID                 : long
            Direction           : esriNetworkEdgeDirection
            Edge                : INetworkEdge*'''
        return super(INetworkQuery2, self).QueryEdge(EID, Direction, Edge)
    def QueryJunction(self, EID, Junction):
        '''Method INetworkQuery.QueryJunction (from INetworkQuery)

           INPUTS
            EID                 : long
            Junction            : INetworkJunction*'''
        return super(INetworkQuery2, self).QueryJunction(EID, Junction)
    def QueryTurn(self, EID, Turn):
        '''Method INetworkQuery.QueryTurn (from INetworkQuery)

           INPUTS
            EID                 : long
            Turn                : INetworkTurn*'''
        return super(INetworkQuery2, self).QueryTurn(EID, Turn)
    def get_ElementsByOID(self, SourceID, OID):
        '''Method INetworkQuery.get_ElementsByOID (from INetworkQuery)

           INPUTS
            SourceID            : long
            OID                 : long

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery2, self).get_ElementsByOID(SourceID, OID)
    def get_EdgesByPosition(self, SourceID, OID, Position, includeRelatedSDCHyperEdges):
        '''Method INetworkQuery.get_EdgesByPosition (from INetworkQuery)

           INPUTS
            SourceID            : long
            OID                 : long
            Position            : double
            includeRelatedSDCHyperEdges: VARIANT_BOOL

           OUTPUT
            Edges               : IEnumNetworkElement**'''
        return super(INetworkQuery2, self).get_EdgesByPosition(SourceID, OID, Position, includeRelatedSDCHyperEdges)
    def get_EdgesBySegment(self, SourceID, OID, fromPosition, toPosition):
        '''Method INetworkQuery.get_EdgesBySegment (from INetworkQuery)

           INPUTS
            SourceID            : long
            OID                 : long
            fromPosition        : double
            toPosition          : double

           OUTPUT
            Edges               : IEnumNetworkElement**'''
        return super(INetworkQuery2, self).get_EdgesBySegment(SourceID, OID, fromPosition, toPosition)
    def get_Elements(self, ElementType):
        '''Method INetworkQuery.get_Elements (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery2, self).get_Elements(ElementType)
    def get_ElementsByOIDs(self, SourceID, oids):
        '''Method INetworkQuery.get_ElementsByOIDs (from INetworkQuery)

           INPUTS
            SourceID            : long
            oids                : ILongArray*

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery2, self).get_ElementsByOIDs(SourceID, oids)
    def get_ElementsForSource(self, SourceID):
        '''Method INetworkQuery.get_ElementsForSource (from INetworkQuery)

           INPUT
            SourceID            : long

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery2, self).get_ElementsForSource(SourceID)
    def ClearIDCache(self):
        '''Method INetworkQuery.ClearIDCache (from INetworkQuery)'''
        return super(INetworkQuery2, self).ClearIDCache()
    def PopulateIDCache(self, SourceID):
        '''Method INetworkQuery.PopulateIDCache (from INetworkQuery)

           INPUT
            SourceID            : long'''
        return super(INetworkQuery2, self).PopulateIDCache(SourceID)
    ComplexTurnCount = property(get_ComplexTurnCount, None, None)
    MaxValence = property(get_MaxValence, None, None)
    ElementCount = IndexProperty(get_ElementCount, None)
    Elements = IndexProperty(get_Elements, None)
    ElementsForSource = IndexProperty(get_ElementsForSource, None)
    MaxEID = IndexProperty(get_MaxEID, None)
    TimeZoneID = IndexProperty(get_TimeZoneID, None)

class INetworkQuery3(_esriGeoDatabase.INetworkQuery3):
    _IID = uuid.UUID('c8451f72-ca7e-47d1-8e07-d545073dedce')
    def RefreshDynamicTrafficData(self, utcTime, utcTimeUsage):
        '''Method INetworkQuery3.RefreshDynamicTrafficData

           INPUTS
            utcTime             : DATE
            utcTimeUsage        : esriNetworkTimeUsage

           OUTPUTS
            pDynamicTrafficUTCStartTime: DATE*
            pDynamicTrafficUTCEndTime: DATE*'''
        return super(INetworkQuery3, self).RefreshDynamicTrafficData(utcTime, utcTimeUsage)
    def get_TimeZoneID(self, networkElement):
        '''Method INetworkQuery2.get_TimeZoneID (from INetworkQuery2)

           INPUT
            networkElement      : INetworkElement*

           OUTPUT
            TimeZoneID          : long*'''
        return super(INetworkQuery3, self).get_TimeZoneID(networkElement)
    def ConvertLocalTimeToUTCTime(self, localTimeZoneID, localTime):
        '''Method INetworkQuery2.ConvertLocalTimeToUTCTime (from INetworkQuery2)

           INPUTS
            localTimeZoneID     : long
            localTime           : DATE

           OUTPUT
            utcTime             : DATE*'''
        return super(INetworkQuery3, self).ConvertLocalTimeToUTCTime(localTimeZoneID, localTime)
    def ConvertUTCTimeToLocalTime(self, localTimeZoneID, utcTime):
        '''Method INetworkQuery2.ConvertUTCTimeToLocalTime (from INetworkQuery2)

           INPUTS
            localTimeZoneID     : long
            utcTime             : DATE

           OUTPUT
            localTime           : DATE*'''
        return super(INetworkQuery3, self).ConvertUTCTimeToLocalTime(localTimeZoneID, utcTime)
    def get_MaxEID(self, ElementType):
        '''Method INetworkQuery.get_MaxEID (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            MaxEID              : long*'''
        return super(INetworkQuery3, self).get_MaxEID(ElementType)
    def get_MaxValence(self):
        '''Method INetworkQuery.get_MaxValence (from INetworkQuery)

           OUTPUT
            MaxValence          : long*'''
        return super(INetworkQuery3, self).get_MaxValence()
    def get_ElementCount(self, ElementType):
        '''Method INetworkQuery.get_ElementCount (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            ElementCount        : long*'''
        return super(INetworkQuery3, self).get_ElementCount(ElementType)
    def get_ComplexTurnCount(self):
        '''Method INetworkQuery.get_ComplexTurnCount (from INetworkQuery)

           OUTPUT
            ComplexTurnCount    : long*'''
        return super(INetworkQuery3, self).get_ComplexTurnCount()
    def CreateForwardStar(self):
        '''Method INetworkQuery.CreateForwardStar (from INetworkQuery)

           OUTPUT
            ForwardStar         : INetworkForwardStar**'''
        return super(INetworkQuery3, self).CreateForwardStar()
    def CreateForwardStarAdjacencies(self):
        '''Method INetworkQuery.CreateForwardStarAdjacencies (from INetworkQuery)

           OUTPUT
            forwardStarAdjacencies: INetworkForwardStarAdjacencies**'''
        return super(INetworkQuery3, self).CreateForwardStarAdjacencies()
    def CreateNetworkElement(self, ElementType):
        '''Method INetworkQuery.CreateNetworkElement (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Element             : INetworkElement**'''
        return super(INetworkQuery3, self).CreateNetworkElement(ElementType)
    def QueryEdge(self, EID, Direction, Edge):
        '''Method INetworkQuery.QueryEdge (from INetworkQuery)

           INPUTS
            EID                 : long
            Direction           : esriNetworkEdgeDirection
            Edge                : INetworkEdge*'''
        return super(INetworkQuery3, self).QueryEdge(EID, Direction, Edge)
    def QueryJunction(self, EID, Junction):
        '''Method INetworkQuery.QueryJunction (from INetworkQuery)

           INPUTS
            EID                 : long
            Junction            : INetworkJunction*'''
        return super(INetworkQuery3, self).QueryJunction(EID, Junction)
    def QueryTurn(self, EID, Turn):
        '''Method INetworkQuery.QueryTurn (from INetworkQuery)

           INPUTS
            EID                 : long
            Turn                : INetworkTurn*'''
        return super(INetworkQuery3, self).QueryTurn(EID, Turn)
    def get_ElementsByOID(self, SourceID, OID):
        '''Method INetworkQuery.get_ElementsByOID (from INetworkQuery)

           INPUTS
            SourceID            : long
            OID                 : long

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery3, self).get_ElementsByOID(SourceID, OID)
    def get_EdgesByPosition(self, SourceID, OID, Position, includeRelatedSDCHyperEdges):
        '''Method INetworkQuery.get_EdgesByPosition (from INetworkQuery)

           INPUTS
            SourceID            : long
            OID                 : long
            Position            : double
            includeRelatedSDCHyperEdges: VARIANT_BOOL

           OUTPUT
            Edges               : IEnumNetworkElement**'''
        return super(INetworkQuery3, self).get_EdgesByPosition(SourceID, OID, Position, includeRelatedSDCHyperEdges)
    def get_EdgesBySegment(self, SourceID, OID, fromPosition, toPosition):
        '''Method INetworkQuery.get_EdgesBySegment (from INetworkQuery)

           INPUTS
            SourceID            : long
            OID                 : long
            fromPosition        : double
            toPosition          : double

           OUTPUT
            Edges               : IEnumNetworkElement**'''
        return super(INetworkQuery3, self).get_EdgesBySegment(SourceID, OID, fromPosition, toPosition)
    def get_Elements(self, ElementType):
        '''Method INetworkQuery.get_Elements (from INetworkQuery)

           INPUT
            ElementType         : esriNetworkElementType

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery3, self).get_Elements(ElementType)
    def get_ElementsByOIDs(self, SourceID, oids):
        '''Method INetworkQuery.get_ElementsByOIDs (from INetworkQuery)

           INPUTS
            SourceID            : long
            oids                : ILongArray*

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery3, self).get_ElementsByOIDs(SourceID, oids)
    def get_ElementsForSource(self, SourceID):
        '''Method INetworkQuery.get_ElementsForSource (from INetworkQuery)

           INPUT
            SourceID            : long

           OUTPUT
            Elements            : IEnumNetworkElement**'''
        return super(INetworkQuery3, self).get_ElementsForSource(SourceID)
    def ClearIDCache(self):
        '''Method INetworkQuery.ClearIDCache (from INetworkQuery)'''
        return super(INetworkQuery3, self).ClearIDCache()
    def PopulateIDCache(self, SourceID):
        '''Method INetworkQuery.PopulateIDCache (from INetworkQuery)

           INPUT
            SourceID            : long'''
        return super(INetworkQuery3, self).PopulateIDCache(SourceID)
    ComplexTurnCount = property(get_ComplexTurnCount, None, None)
    MaxValence = property(get_MaxValence, None, None)
    ElementCount = IndexProperty(get_ElementCount, None)
    Elements = IndexProperty(get_Elements, None)
    ElementsForSource = IndexProperty(get_ElementsForSource, None)
    MaxEID = IndexProperty(get_MaxEID, None)
    TimeZoneID = IndexProperty(get_TimeZoneID, None)

class INetworkForwardStarEx(_esriGeoDatabase.INetworkForwardStarEx):
    _IID = uuid.UUID('25c310eb-bff3-4a47-a694-3f17e16fbfda')

    def __init__(self, *args, **kw):
        super(INetworkForwardStarEx, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryAdjacencies(self, atJunction, fromEdge, lastExteriorEdge, adjacencies):
        '''Method INetworkForwardStarEx.QueryAdjacencies

           INPUTS
            atJunction          : INetworkJunction*
            fromEdge            : INetworkEdge*
            lastExteriorEdge    : INetworkEdge*
            adjacencies         : INetworkForwardStarAdjacencies*'''
        return super(INetworkForwardStarEx, self).QueryAdjacencies(atJunction, fromEdge, lastExteriorEdge, adjacencies)
    def QueryJunction(self, EID, Junction):
        '''Method INetworkForwardStarEx.QueryJunction

           INPUTS
            EID                 : long
            Junction            : INetworkJunction*'''
        return super(INetworkForwardStarEx, self).QueryJunction(EID, Junction)
    def QueryEdge(self, EID, Direction, Edge):
        '''Method INetworkForwardStarEx.QueryEdge

           INPUTS
            EID                 : long
            Direction           : esriNetworkEdgeDirection
            Edge                : INetworkEdge*'''
        return super(INetworkForwardStarEx, self).QueryEdge(EID, Direction, Edge)
    def QueryTurn(self, EID, Turn):
        '''Method INetworkForwardStarEx.QueryTurn

           INPUTS
            EID                 : long
            Turn                : INetworkTurn*'''
        return super(INetworkForwardStarEx, self).QueryTurn(EID, Turn)
    def QueryTraversableRange(self, Edge, queryPosition):
        '''Method INetworkForwardStarEx.QueryTraversableRange

           INPUTS
            Edge                : INetworkEdge*
            queryPosition       : double

           OUTPUTS
            fromPosition        : double*
            toPosition          : double*
            isFromPositionAccessible: VARIANT_BOOL*
            isToPositionAccessible: VARIANT_BOOL*'''
        return super(INetworkForwardStarEx, self).QueryTraversableRange(Edge, queryPosition)
    def QueryAttributeCutoffRange(self, Edge, Attribute, queryPosition, cutoffValue):
        '''Method INetworkForwardStarEx.QueryAttributeCutoffRange

           INPUTS
            Edge                : INetworkEdge*
            Attribute           : INetworkAttribute*
            queryPosition       : double
            cutoffValue         : VARIANT

           OUTPUTS
            fromPosition        : double*
            toPosition          : double*'''
        return super(INetworkForwardStarEx, self).QueryAttributeCutoffRange(Edge, Attribute, queryPosition, cutoffValue)
    def get_NetworkDataset(self):
        '''Method INetworkForwardStarEx.get_NetworkDataset

           OUTPUT
            Network             : INetworkDataset**'''
        return super(INetworkForwardStarEx, self).get_NetworkDataset()
    def get_BacktrackPolicy(self):
        '''Method INetworkForwardStarEx.get_BacktrackPolicy

           OUTPUT
            Backtrack           : esriNetworkForwardStarBacktrack*'''
        return super(INetworkForwardStarEx, self).get_BacktrackPolicy()
    def put_BacktrackPolicy(self, Backtrack):
        '''Method INetworkForwardStarEx.put_BacktrackPolicy

           INPUT
            Backtrack           : esriNetworkForwardStarBacktrack'''
        return super(INetworkForwardStarEx, self).put_BacktrackPolicy(Backtrack)
    def get_IsForwardTraversal(self):
        '''Method INetworkForwardStarEx.get_IsForwardTraversal

           OUTPUT
            IsForwardTraversal  : VARIANT_BOOL*'''
        return super(INetworkForwardStarEx, self).get_IsForwardTraversal()
    def put_IsForwardTraversal(self, IsForwardTraversal):
        '''Method INetworkForwardStarEx.put_IsForwardTraversal

           INPUT
            IsForwardTraversal  : VARIANT_BOOL'''
        return super(INetworkForwardStarEx, self).put_IsForwardTraversal(IsForwardTraversal)
    def AddRestrictionAttribute(self, Attribute):
        '''Method INetworkForwardStarEx.AddRestrictionAttribute

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(INetworkForwardStarEx, self).AddRestrictionAttribute(Attribute)
    def get_RestrictionAttribute(self, Index):
        '''Method INetworkForwardStarEx.get_RestrictionAttribute

           INPUT
            Index               : long

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkForwardStarEx, self).get_RestrictionAttribute(Index)
    def get_RestrictionAttributeCount(self):
        '''Method INetworkForwardStarEx.get_RestrictionAttributeCount

           OUTPUT
            Count               : long*'''
        return super(INetworkForwardStarEx, self).get_RestrictionAttributeCount()
    def RemoveRestrictionAttributes(self):
        '''Method INetworkForwardStarEx.RemoveRestrictionAttributes'''
        return super(INetworkForwardStarEx, self).RemoveRestrictionAttributes()
    def get_HierarchyAttribute(self):
        '''Method INetworkForwardStarEx.get_HierarchyAttribute

           OUTPUT
            Attribute           : INetworkAttribute**'''
        return super(INetworkForwardStarEx, self).get_HierarchyAttribute()
    def putref_HierarchyAttribute(self, Attribute):
        '''Method INetworkForwardStarEx.putref_HierarchyAttribute

           INPUT
            Attribute           : INetworkAttribute*'''
        return super(INetworkForwardStarEx, self).putref_HierarchyAttribute(Attribute)
    def get_MaxTraversableHierarchyValue(self):
        '''Method INetworkForwardStarEx.get_MaxTraversableHierarchyValue

           OUTPUT
            MaxValue            : long*'''
        return super(INetworkForwardStarEx, self).get_MaxTraversableHierarchyValue()
    def put_MaxTraversableHierarchyValue(self, MaxValue):
        '''Method INetworkForwardStarEx.put_MaxTraversableHierarchyValue

           INPUT
            MaxValue            : long'''
        return super(INetworkForwardStarEx, self).put_MaxTraversableHierarchyValue(MaxValue)
    def AddJunctionRestriction(self, Junction):
        '''Method INetworkForwardStarEx.AddJunctionRestriction

           INPUT
            Junction            : INetworkJunction*'''
        return super(INetworkForwardStarEx, self).AddJunctionRestriction(Junction)
    def AddEdgeRestriction(self, Edge, fromPosition, toPosition):
        '''Method INetworkForwardStarEx.AddEdgeRestriction

           INPUTS
            Edge                : INetworkEdge*
            fromPosition        : double
            toPosition          : double'''
        return super(INetworkForwardStarEx, self).AddEdgeRestriction(Edge, fromPosition, toPosition)
    def AddTurnRestriction(self, Turn):
        '''Method INetworkForwardStarEx.AddTurnRestriction

           INPUT
            Turn                : INetworkTurn*'''
        return super(INetworkForwardStarEx, self).AddTurnRestriction(Turn)
    def RemoveElementRestrictions(self):
        '''Method INetworkForwardStarEx.RemoveElementRestrictions'''
        return super(INetworkForwardStarEx, self).RemoveElementRestrictions()
    def AdjustJunctionAttributeValue(self, Junction, Attribute, adjustmentType, Value):
        '''Method INetworkForwardStarEx.AdjustJunctionAttributeValue

           INPUTS
            Junction            : INetworkJunction*
            Attribute           : INetworkAttribute*
            adjustmentType      : esriNetworkAttributeAdjustmentType
            Value               : VARIANT'''
        return super(INetworkForwardStarEx, self).AdjustJunctionAttributeValue(Junction, Attribute, adjustmentType, Value)
    def AdjustEdgeAttributeValue(self, Edge, fromPosition, toPosition, Attribute, adjustmentType, Value):
        '''Method INetworkForwardStarEx.AdjustEdgeAttributeValue

           INPUTS
            Edge                : INetworkEdge*
            fromPosition        : double
            toPosition          : double
            Attribute           : INetworkAttribute*
            adjustmentType      : esriNetworkAttributeAdjustmentType
            Value               : VARIANT'''
        return super(INetworkForwardStarEx, self).AdjustEdgeAttributeValue(Edge, fromPosition, toPosition, Attribute, adjustmentType, Value)
    def AdjustTurnAttributeValue(self, Turn, Attribute, adjustmentType, Value):
        '''Method INetworkForwardStarEx.AdjustTurnAttributeValue

           INPUTS
            Turn                : INetworkTurn*
            Attribute           : INetworkAttribute*
            adjustmentType      : esriNetworkAttributeAdjustmentType
            Value               : VARIANT'''
        return super(INetworkForwardStarEx, self).AdjustTurnAttributeValue(Turn, Attribute, adjustmentType, Value)
    def RemoveAttributeValueAdjustments(self):
        '''Method INetworkForwardStarEx.RemoveAttributeValueAdjustments'''
        return super(INetworkForwardStarEx, self).RemoveAttributeValueAdjustments()
    def get_IsRestricted(self, Element):
        '''Method INetworkForwardStarEx.get_IsRestricted

           INPUT
            Element             : INetworkElement*

           OUTPUT
            IsRestricted        : VARIANT_BOOL*'''
        return super(INetworkForwardStarEx, self).get_IsRestricted(Element)
    BacktrackPolicy = property(get_BacktrackPolicy, put_BacktrackPolicy, None)
    HierarchyAttribute = property(get_HierarchyAttribute, putref_HierarchyAttribute, None)
    IsForwardTraversal = property(get_IsForwardTraversal, put_IsForwardTraversal, None)
    MaxTraversableHierarchyValue = property(get_MaxTraversableHierarchyValue, put_MaxTraversableHierarchyValue, None)
    NetworkDataset = property(get_NetworkDataset, None, None)
    RestrictionAttributeCount = property(get_RestrictionAttributeCount, None, None)
    IsRestricted = IndexProperty(get_IsRestricted, None)
    RestrictionAttribute = IndexProperty(get_RestrictionAttribute, None)

class IRepresentationClass(_esriGeoDatabase.IRepresentationClass):
    _IID = uuid.UUID('b4480153-ca17-4c52-a39a-0f0d12d2364a')

    def __init__(self, *args, **kw):
        super(IRepresentationClass, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_OverrideFieldIndex(self):
        '''Method IRepresentationClass.get_OverrideFieldIndex

           OUTPUT
            idx                 : long*'''
        return super(IRepresentationClass, self).get_OverrideFieldIndex()
    def get_RuleIDFieldIndex(self):
        '''Method IRepresentationClass.get_RuleIDFieldIndex

           OUTPUT
            idx                 : long*'''
        return super(IRepresentationClass, self).get_RuleIDFieldIndex()
    def get_FeatureClass(self):
        '''Method IRepresentationClass.get_FeatureClass

           OUTPUT
            FeatureClass        : IFeatureClass**'''
        return super(IRepresentationClass, self).get_FeatureClass()
    def get_ID(self):
        '''Method IRepresentationClass.get_ID

           OUTPUT
            ID                  : long*'''
        return super(IRepresentationClass, self).get_ID()
    def GetRepresentation(self, Feature, MapContext):
        '''Method IRepresentationClass.GetRepresentation

           INPUTS
            Feature             : IFeature*
            MapContext          : IMapContext*

           OUTPUT
            rep                 : IRepresentation**'''
        return super(IRepresentationClass, self).GetRepresentation(Feature, MapContext)
    def get_RepresentationRules(self):
        '''Method IRepresentationClass.get_RepresentationRules

           OUTPUT
            repRules            : IRepresentationRules**'''
        return super(IRepresentationClass, self).get_RepresentationRules()
    def putref_RepresentationRules(self, repRules):
        '''Method IRepresentationClass.putref_RepresentationRules

           INPUT
            repRules            : IRepresentationRules*'''
        return super(IRepresentationClass, self).putref_RepresentationRules(repRules)
    def get_GraphicAttributes(self):
        '''Method IRepresentationClass.get_GraphicAttributes

           OUTPUT
            Attributes          : IGraphicAttributes**'''
        return super(IRepresentationClass, self).get_GraphicAttributes()
    def putref_GraphicAttributes(self, Attributes):
        '''Method IRepresentationClass.putref_GraphicAttributes

           INPUT
            Attributes          : IGraphicAttributes*'''
        return super(IRepresentationClass, self).putref_GraphicAttributes(Attributes)
    def get_RequireShapeOverride(self):
        '''Method IRepresentationClass.get_RequireShapeOverride

           OUTPUT
            RequireShapeOverride: VARIANT_BOOL*'''
        return super(IRepresentationClass, self).get_RequireShapeOverride()
    def put_RequireShapeOverride(self, RequireShapeOverride):
        '''Method IRepresentationClass.put_RequireShapeOverride

           INPUT
            RequireShapeOverride: VARIANT_BOOL'''
        return super(IRepresentationClass, self).put_RequireShapeOverride(RequireShapeOverride)
    def PrepareFilter(self, filter):
        '''Method IRepresentationClass.PrepareFilter

           INPUT
            filter              : IQueryFilter*'''
        return super(IRepresentationClass, self).PrepareFilter(filter)
    FeatureClass = property(get_FeatureClass, None, None)
    GraphicAttributes = property(get_GraphicAttributes, putref_GraphicAttributes, None)
    ID = property(get_ID, None, None)
    OverrideFieldIndex = property(get_OverrideFieldIndex, None, None)
    RepresentationRules = property(get_RepresentationRules, putref_RepresentationRules, None)
    RequireShapeOverride = property(get_RequireShapeOverride, put_RequireShapeOverride, None)
    RuleIDFieldIndex = property(get_RuleIDFieldIndex, None, None)

class IRepresentation(_esriGeoDatabase.IRepresentation):
    _IID = uuid.UUID('2da11044-d45b-44ad-b982-d9b09c59928a')

    def __init__(self, *args, **kw):
        super(IRepresentation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RepresentationClass(self):
        '''Method IRepresentation.get_RepresentationClass

           OUTPUT
            repClass            : IRepresentationClass**'''
        return super(IRepresentation, self).get_RepresentationClass()
    def get_Feature(self):
        '''Method IRepresentation.get_Feature

           OUTPUT
            Feature             : IFeature**'''
        return super(IRepresentation, self).get_Feature()
    def get_MapContext(self):
        '''Method IRepresentation.get_MapContext

           OUTPUT
            MapContext          : IMapContext**'''
        return super(IRepresentation, self).get_MapContext()
    def get_RuleID(self):
        '''Method IRepresentation.get_RuleID

           OUTPUT
            ID                  : long*'''
        return super(IRepresentation, self).get_RuleID()
    def put_RuleID(self, ID):
        '''Method IRepresentation.put_RuleID

           INPUT
            ID                  : long'''
        return super(IRepresentation, self).put_RuleID(ID)
    def get_Shape(self):
        '''Method IRepresentation.get_Shape

           OUTPUT
            Shape               : IGeometry**'''
        return super(IRepresentation, self).get_Shape()
    def get_ShapeEdit(self):
        '''Method IRepresentation.get_ShapeEdit

           OUTPUT
            Shape               : IGeometry**'''
        return super(IRepresentation, self).get_ShapeEdit()
    def get_ShapeCopy(self):
        '''Method IRepresentation.get_ShapeCopy

           OUTPUT
            Shape               : IGeometry**'''
        return super(IRepresentation, self).get_ShapeCopy()
    def putref_Shape(self, Shape):
        '''Method IRepresentation.putref_Shape

           INPUT
            Shape               : IGeometry*'''
        return super(IRepresentation, self).putref_Shape(Shape)
    def get_HasShapeOverride(self):
        '''Method IRepresentation.get_HasShapeOverride

           OUTPUT
            HasShapeOverride    : VARIANT_BOOL*'''
        return super(IRepresentation, self).get_HasShapeOverride()
    def RemoveShapeOverride(self):
        '''Method IRepresentation.RemoveShapeOverride'''
        return super(IRepresentation, self).RemoveShapeOverride()
    def get_Graphics(self):
        '''Method IRepresentation.get_Graphics

           OUTPUT
            Graphics            : IRepresentationGraphics**'''
        return super(IRepresentation, self).get_Graphics()
    def put_Graphics(self, Graphics):
        '''Method IRepresentation.put_Graphics

           INPUT
            Graphics            : IRepresentationGraphics*'''
        return super(IRepresentation, self).put_Graphics(Graphics)
    def UpdateFeature(self):
        '''Method IRepresentation.UpdateFeature'''
        return super(IRepresentation, self).UpdateFeature()
    def get_Value(self, attrs, idx):
        '''Method IRepresentation.get_Value

           INPUTS
            attrs               : IGraphicAttributes*
            idx                 : long

           OUTPUT
            val                 : VARIANT*'''
        return super(IRepresentation, self).get_Value(attrs, idx)
    def put_Value(self, attrs, idx, val):
        '''Method IRepresentation.put_Value

           INPUTS
            attrs               : IGraphicAttributes*
            idx                 : long
            val                 : VARIANT'''
        return super(IRepresentation, self).put_Value(attrs, idx, val)
    Feature = property(get_Feature, None, None)
    Graphics = property(get_Graphics, put_Graphics, None)
    HasShapeOverride = property(get_HasShapeOverride, None, None)
    MapContext = property(get_MapContext, None, None)
    RepresentationClass = property(get_RepresentationClass, None, None)
    RuleID = property(get_RuleID, put_RuleID, None)
    Shape = property(get_Shape, putref_Shape, None)
    ShapeCopy = property(get_ShapeCopy, None, None)
    ShapeEdit = property(get_ShapeEdit, None, None)
    Value = property(None, put_Value, None)

class IRepresentationWorkspaceExtension(_esriGeoDatabase.IRepresentationWorkspaceExtension):
    _IID = uuid.UUID('8b22787f-f0d2-4390-99d2-2d971861025b')
    def OpenRepresentationClass(self, Name):
        '''Method IRepresentationWorkspaceExtension.OpenRepresentationClass

           INPUT
            Name                : BSTR

           OUTPUT
            repClass            : IRepresentationClass**'''
        return super(IRepresentationWorkspaceExtension, self).OpenRepresentationClass(Name)
    def CreateRepresentationClass(self, FeatureClass, Name, ruleIDFldName, overrideFldName, RequireShapeOverride, Rules, ClassAttributes):
        '''Method IRepresentationWorkspaceExtension.CreateRepresentationClass

           INPUTS
            FeatureClass        : IFeatureClass*
            Name                : BSTR
            ruleIDFldName       : BSTR
            overrideFldName     : BSTR
            RequireShapeOverride: VARIANT_BOOL
            Rules               : IRepresentationRules*
            ClassAttributes     : IGraphicAttributes*

           OUTPUT
            repClass            : IRepresentationClass**'''
        return super(IRepresentationWorkspaceExtension, self).CreateRepresentationClass(FeatureClass, Name, ruleIDFldName, overrideFldName, RequireShapeOverride, Rules, ClassAttributes)
    def get_RepresentationClassNames(self):
        '''Method IRepresentationWorkspaceExtension.get_RepresentationClassNames

           OUTPUT
            enumNames           : IEnumDatasetName**'''
        return super(IRepresentationWorkspaceExtension, self).get_RepresentationClassNames()
    def get_FeatureClassHasRepresentations(self, FeatureClass):
        '''Method IRepresentationWorkspaceExtension.get_FeatureClassHasRepresentations

           INPUT
            FeatureClass        : IFeatureClass*

           OUTPUT
            hasRep              : VARIANT_BOOL*'''
        return super(IRepresentationWorkspaceExtension, self).get_FeatureClassHasRepresentations(FeatureClass)
    def get_FeatureClassRepresentationNames(self, FeatureClass):
        '''Method IRepresentationWorkspaceExtension.get_FeatureClassRepresentationNames

           INPUT
            FeatureClass        : IFeatureClass*

           OUTPUT
            enumDataset         : IEnumDatasetName**'''
        return super(IRepresentationWorkspaceExtension, self).get_FeatureClassRepresentationNames(FeatureClass)
    RepresentationClassNames = property(get_RepresentationClassNames, None, None)
    FeatureClassHasRepresentations = IndexProperty(get_FeatureClassHasRepresentations, None)
    FeatureClassRepresentationNames = IndexProperty(get_FeatureClassRepresentationNames, None)


# IIDs
IID_INetworkProtectNames = INetworkProtectNames._IID
IID_INetworkDatasetProtectNames = INetworkDatasetProtectNames._IID
IID_IGeoDBProtectNames = IGeoDBProtectNames._IID
IID_ISQLPrivilege = ISQLPrivilege._IID
IID_IGeoDataset = IGeoDataset._IID
IID_IProperty = IProperty._IID
IID_IEnumProperty = IEnumProperty._IID
IID_IDatasetEditInfo = IDatasetEditInfo._IID
IID_IDatasetEdit = IDatasetEdit._IID
IID_ITransactions = ITransactions._IID
IID_ITransactionsOptions = ITransactionsOptions._IID
IID_ILockInfo = ILockInfo._IID
IID_IEnumLockInfo = IEnumLockInfo._IID
IID_IFIDSet = IFIDSet._IID
IID_IDomain = IDomain._IID
IID_IGeometryDef = IGeometryDef._IID
IID_IField = IField._IID
IID_IFields = IFields._IID
IID_IRowBuffer = IRowBuffer._IID
IID_IIndex = IIndex._IID
IID_IEnumIndex = IEnumIndex._IID
IID_IIndexes = IIndexes._IID
IID_IClass = IClass._IID
IID_IQueryFilter = IQueryFilter._IID
IID_IEnumIDs = IEnumIDs._IID
IID_IMetadata = IMetadata._IID
IID_IMetadataEdit = IMetadataEdit._IID
IID_ISQLSyntax = ISQLSyntax._IID
IID_ISchemaLockInfo = ISchemaLockInfo._IID
IID_IEnumSchemaLockInfo = IEnumSchemaLockInfo._IID
IID_ISchemaLock = ISchemaLock._IID
IID_IEnumDatasetType = IEnumDatasetType._IID
IID_IDataElement = IDataElement._IID
IID_IFeatureClassStorage = IFeatureClassStorage._IID
IID_IFeatureClassStorage2 = IFeatureClassStorage2._IID
IID_IDatasetMigration = IDatasetMigration._IID
IID_IWorkspace2 = IWorkspace2._IID
IID_IDatabaseConnectionInfo = IDatabaseConnectionInfo._IID
IID_IDatabaseConnectionInfo2 = IDatabaseConnectionInfo2._IID
IID_IUserInfo = IUserInfo._IID
IID_IEnumUserInfo = IEnumUserInfo._IID
IID_IDatabaseConnectionInfo3 = IDatabaseConnectionInfo3._IID
IID_IDatabaseConnectionInfo4 = IDatabaseConnectionInfo4._IID
IID_IWorkspaceProperty = IWorkspaceProperty._IID
IID_IWorkspaceProperties = IWorkspaceProperties._IID
IID_IWorkspaceProperties2 = IWorkspaceProperties2._IID
IID_IWorkspaceExtension = IWorkspaceExtension._IID
IID_IWorkspaceExtensionManager = IWorkspaceExtensionManager._IID
IID_IWorkspaceFactoryFileExtensions = IWorkspaceFactoryFileExtensions._IID
IID_IWorkspaceFactoryLockControl = IWorkspaceFactoryLockControl._IID
IID_IWorkspaceProgressTracker = IWorkspaceProgressTracker._IID
IID_IDatasetEditEx = IDatasetEditEx._IID
IID_IDatasetFileStat = IDatasetFileStat._IID
IID_IDatasetFileStat2 = IDatasetFileStat2._IID
IID_IDatasetNameFileStat = IDatasetNameFileStat._IID
IID_IDatasetNameFileStat2 = IDatasetNameFileStat2._IID
IID_IDatasetNameFileSize = IDatasetNameFileSize._IID
IID_IWorkspaceEditInfo = IWorkspaceEditInfo._IID
IID_IWorkspaceEdit = IWorkspaceEdit._IID
IID_IMultiuserWorkspaceEdit = IMultiuserWorkspaceEdit._IID
IID_IWorkspaceEditControl = IWorkspaceEditControl._IID
IID_IWorkspaceEditEvents = IWorkspaceEditEvents._IID
IID_IWorkspaceEditEvents2 = IWorkspaceEditEvents2._IID
IID_ISpatialCacheManager = ISpatialCacheManager._IID
IID_ISpatialCacheManager2 = ISpatialCacheManager2._IID
IID_ISpatialCacheManager3 = ISpatialCacheManager3._IID
IID_IGeodataXform = IGeodataXform._IID
IID_IGeoDataset2 = IGeoDataset2._IID
IID_IGeoDatasetSchemaEdit = IGeoDatasetSchemaEdit._IID
IID_IGeoDatasetSchemaEdit2 = IGeoDatasetSchemaEdit2._IID
IID_IHistoricalMarker = IHistoricalMarker._IID
IID_IEnumHistoricalMarker = IEnumHistoricalMarker._IID
IID_IHistoricalVersion = IHistoricalVersion._IID
IID_IHistoricalWorkspace = IHistoricalWorkspace._IID
IID_IArchivableObject = IArchivableObject._IID
IID_IArchiveRegistrationInfo = IArchiveRegistrationInfo._IID
IID_IFileDataLock = IFileDataLock._IID
IID_IDatabaseCompact = IDatabaseCompact._IID
IID_ISetDefaultConnectionInfo = ISetDefaultConnectionInfo._IID
IID_ISetDefaultConnectionInfo2 = ISetDefaultConnectionInfo2._IID
IID_ISetDefaultConnectionInfo3 = ISetDefaultConnectionInfo3._IID
IID_ISqlDefaultConnectionInfo = ISqlDefaultConnectionInfo._IID
IID_INativeType = INativeType._IID
IID_INativeTypeSearch = INativeTypeSearch._IID
IID_INativeTypeInfo = INativeTypeInfo._IID
IID_IComplexNativeType = IComplexNativeType._IID
IID_IEnumSpatialReferenceInfo = IEnumSpatialReferenceInfo._IID
IID_IWorkspaceSpatialReferenceInfo = IWorkspaceSpatialReferenceInfo._IID
IID_IConfigurationParameter = IConfigurationParameter._IID
IID_IEnumConfigurationParameter = IEnumConfigurationParameter._IID
IID_IConfigurationKeyword = IConfigurationKeyword._IID
IID_IEnumConfigurationKeyword = IEnumConfigurationKeyword._IID
IID_IConfigurationKeyword2 = IConfigurationKeyword2._IID
IID_IConfigurationParameter2 = IConfigurationParameter2._IID
IID_IWorkspaceConfiguration = IWorkspaceConfiguration._IID
IID_IXMLIndexTag = IXMLIndexTag._IID
IID_IXMLIndexTags = IXMLIndexTags._IID
IID_IXMLIndexTemplate = IXMLIndexTemplate._IID
IID_IEnumXMLIndexTemplate = IEnumXMLIndexTemplate._IID
IID_IXMLIndex = IXMLIndex._IID
IID_IXMLIndexEdit = IXMLIndexEdit._IID
IID_IXMLIndexTemplateManage = IXMLIndexTemplateManage._IID
IID_IXMLIndexUtil = IXMLIndexUtil._IID
IID_IRule = IRule._IID
IID_IEnumRule = IEnumRule._IID
IID_IFeatureBuffer = IFeatureBuffer._IID
IID_IFeatureWorkspaceSchemaEdit = IFeatureWorkspaceSchemaEdit._IID
IID_IGeodatabaseRelease = IGeodatabaseRelease._IID
IID_IEnumDomain = IEnumDomain._IID
IID_IWorkspaceDomains = IWorkspaceDomains._IID
IID_IWorkspaceDomains2 = IWorkspaceDomains2._IID
IID_IWorkspaceDomains3 = IWorkspaceDomains3._IID
IID_IPnt = IPnt._IID
IID_IRasterStorageDef = IRasterStorageDef._IID
IID_IRasterDef = IRasterDef._IID
IID_IPixelBlock = IPixelBlock._IID
IID_IRasterCursor = IRasterCursor._IID
IID_IRaster = IRaster._IID
IID_IRasterCatalog = IRasterCatalog._IID
IID_IReplicaDataset = IReplicaDataset._IID
IID_IEnumReplicaDataset = IEnumReplicaDataset._IID
IID_IWorkspaceReplicaDatasets = IWorkspaceReplicaDatasets._IID
IID_IEnumTopologyParent = IEnumTopologyParent._IID
IID_ITopologyElement = ITopologyElement._IID
IID_IEnumTGHitInfo = IEnumTGHitInfo._IID
IID_IIndexEdit = IIndexEdit._IID
IID_IGPMessage = IGPMessage._IID
IID_IGPDescribe = IGPDescribe._IID
IID_INetWeight = INetWeight._IID
IID_INetTopology = INetTopology._IID
IID_INetElementDescription = INetElementDescription._IID
IID_INetTopologyEdit = INetTopologyEdit._IID
IID_INetElementClass = INetElementClass._IID
IID_INetWeightAssociation = INetWeightAssociation._IID
IID_IEnumNetWeightAssociation = IEnumNetWeightAssociation._IID
IID_IInvalidObjectInfo = IInvalidObjectInfo._IID
IID_IEnumInvalidObject = IEnumInvalidObject._IID
IID_INetworkUpdate = INetworkUpdate._IID
IID_INetSchema = INetSchema._IID
IID_INetSchemaEdit = INetSchemaEdit._IID
IID_INetWeightEdit = INetWeightEdit._IID
IID_INetWeightAssociationEdit = INetWeightAssociationEdit._IID
IID_INetAttributes = INetAttributes._IID
IID_INetAttributesEdit = INetAttributesEdit._IID
IID_INetElementDescriptionEdit = INetElementDescriptionEdit._IID
IID_INetDiagnostics = INetDiagnostics._IID
IID_INetTopologyEditGEN = INetTopologyEditGEN._IID
IID_IDatasetAnalyze = IDatasetAnalyze._IID
IID_ITopologyProtectNames = ITopologyProtectNames._IID
IID_IFeatureDatasetManage = IFeatureDatasetManage._IID
IID_IFeatureClassLoad = IFeatureClassLoad._IID
IID_IQueryDescription = IQueryDescription._IID
IID_IQueryTableName = IQueryTableName._IID
IID_IFeatureClassCreation = IFeatureClassCreation._IID
IID_IInvalidArea = IInvalidArea._IID
IID_IFeatureDraw = IFeatureDraw._IID
IID_IRowEdit = IRowEdit._IID
IID_IFeatureSimplify = IFeatureSimplify._IID
IID_IFeatureSimplify2 = IFeatureSimplify2._IID
IID_IQueryFilter2 = IQueryFilter2._IID
IID_ISpatialFilter = ISpatialFilter._IID
IID_ISQLCheck = ISQLCheck._IID
IID_ITableSortCallBack = ITableSortCallBack._IID
IID_IFieldInfo = IFieldInfo._IID
IID_ITableFields = ITableFields._IID
IID_ISimpleEdgeFeature = ISimpleEdgeFeature._IID
IID_IComplexNetworkFeature = IComplexNetworkFeature._IID
IID_IFIDSet2 = IFIDSet2._IID
IID_ITopologyRule = ITopologyRule._IID
IID_IDEDataset = IDEDataset._IID
IID_IGPReplicaDataset = IGPReplicaDataset._IID
IID_IGPReplicaDatasets = IGPReplicaDatasets._IID
IID_IGPMessagesCallback = IGPMessagesCallback._IID
IID_IGPMessages = IGPMessages._IID
IID_IRecord = IRecord._IID
IID_IAttachmentInfo = IAttachmentInfo._IID
IID_IAttachmentData = IAttachmentData._IID
IID_IEditorTrackingInfo = IEditorTrackingInfo._IID
IID_IOwnershipBasedAccessControl = IOwnershipBasedAccessControl._IID
IID_ICoverageAnnotationFeature = ICoverageAnnotationFeature._IID
IID_IFeatureClassManage = IFeatureClassManage._IID
IID_IFeatureProject = IFeatureProject._IID
IID_IFieldEdit = IFieldEdit._IID
IID_IField2 = IField2._IID
IID_IFieldEdit2 = IFieldEdit2._IID
IID_IModelInfo = IModelInfo._IID
IID_IFields2 = IFields2._IID
IID_IFieldsEdit = IFieldsEdit._IID
IID_IGeometryDefEdit = IGeometryDefEdit._IID
IID_IIndexesEdit = IIndexesEdit._IID
IID_IClassSchemaEdit = IClassSchemaEdit._IID
IID_IClassSchemaEdit2 = IClassSchemaEdit2._IID
IID_IClassSchemaEdit3 = IClassSchemaEdit3._IID
IID_IClassSchemaEdit4 = IClassSchemaEdit4._IID
IID_IClassSchemaEditEx = IClassSchemaEditEx._IID
IID_IRelClassSchemaEdit = IRelClassSchemaEdit._IID
IID_IRelQueryTableSettings = IRelQueryTableSettings._IID
IID_ITableCapabilities = ITableCapabilities._IID
IID_ITopologyGraphEvents = ITopologyGraphEvents._IID
IID_IObjectClassSchemaEvents = IObjectClassSchemaEvents._IID
IID_IObjectClass2 = IObjectClass2._IID
IID_ISimpleRelationshipChanges = ISimpleRelationshipChanges._IID
IID_IEnumSubtype = IEnumSubtype._IID
IID_ISubtypes = ISubtypes._IID
IID_IValidate = IValidate._IID
IID_IRangeDomain = IRangeDomain._IID
IID_ICodedValueDomain = ICodedValueDomain._IID
IID_ICodedValueDomain2 = ICodedValueDomain2._IID
IID_IStringDomain = IStringDomain._IID
IID_IEdgeConnectivityRule = IEdgeConnectivityRule._IID
IID_IJunctionConnectivityRule = IJunctionConnectivityRule._IID
IID_IJunctionConnectivityRule2 = IJunctionConnectivityRule2._IID
IID_IRelationshipRule = IRelationshipRule._IID
IID_IObjectClassName = IObjectClassName._IID
IID_IMemoryRelationshipClassName = IMemoryRelationshipClassName._IID
IID_IClassHelper = IClassHelper._IID
IID_IClassExtension = IClassExtension._IID
IID_IObjectClassInfo = IObjectClassInfo._IID
IID_IObjectClassInfo2 = IObjectClassInfo2._IID
IID_IFeatureClassDraw = IFeatureClassDraw._IID
IID_IRowSubtypes = IRowSubtypes._IID
IID_IEnumGeometryBind = IEnumGeometryBind._IID
IID_IRowEvents = IRowEvents._IID
IID_IRowChanges = IRowChanges._IID
IID_IFeatureEvents = IFeatureEvents._IID
IID_IFeatureChanges = IFeatureChanges._IID
IID_INetworkFeatureEvents = INetworkFeatureEvents._IID
IID_IEnumFeatureSetup = IEnumFeatureSetup._IID
IID_IObjects = IObjects._IID
IID_IFeatureSnap = IFeatureSnap._IID
IID_ITimeQueryFilter = ITimeQueryFilter._IID
IID_IFilterDefs = IFilterDefs._IID
IID_IXMLFilterDef = IXMLFilterDef._IID
IID_IQueryFilterDefinition = IQueryFilterDefinition._IID
IID_IQueryFilterDefinition2 = IQueryFilterDefinition2._IID
IID_IGeometricNetworkReconcileProperties = IGeometricNetworkReconcileProperties._IID
IID_IGeometricNetworkConnectivity = IGeometricNetworkConnectivity._IID
IID_IRepairConnectivityProgressEvents = IRepairConnectivityProgressEvents._IID
IID_IRepairConnectivityProgress = IRepairConnectivityProgress._IID
IID_IGeometricNetworkConnectivity2 = IGeometricNetworkConnectivity2._IID
IID_IRebuildIndexes = IRebuildIndexes._IID
IID_IVersionedView = IVersionedView._IID
IID_IVersionEvents = IVersionEvents._IID
IID_IVersionEvents2 = IVersionEvents2._IID
IID_IGeodatabaseRelease2 = IGeodatabaseRelease2._IID
IID_IGeodatabaseRelease3 = IGeodatabaseRelease3._IID
IID_IGeodatabaseRelease4 = IGeodatabaseRelease4._IID
IID_IObjectClassDescription = IObjectClassDescription._IID
IID_IFeatureClassDescription = IFeatureClassDescription._IID
IID_INetworkClassDescription = INetworkClassDescription._IID
IID_IXmlPropertySet = IXmlPropertySet._IID
IID_IXmlPropertySet2 = IXmlPropertySet2._IID
IID_IMetadataSynchronizer = IMetadataSynchronizer._IID
IID_IMetadataSynchronizerManager = IMetadataSynchronizerManager._IID
IID_IFieldInfo2 = IFieldInfo2._IID
IID_IFieldInfo3 = IFieldInfo3._IID
IID_IRasterFieldInfo = IRasterFieldInfo._IID
IID_ITopologyErrorFeature = ITopologyErrorFeature._IID
IID_IEnumTopologyErrorFeature = IEnumTopologyErrorFeature._IID
IID_IErrorFeatureContainer = IErrorFeatureContainer._IID
IID_ITopologyRuleContainer = ITopologyRuleContainer._IID
IID_ITopologyClassEvents = ITopologyClassEvents._IID
IID_ICancelOperation = ICancelOperation._IID
IID_IClassEx = IClassEx._IID
IID_IAttachment = IAttachment._IID
IID_IAttachment2 = IAttachment2._IID
IID_IEnumAttachment = IEnumAttachment._IID
IID_IAttachmentManager = IAttachmentManager._IID
IID_IAttachmentManager2 = IAttachmentManager2._IID
IID_IAttachmentInfoArray = IAttachmentInfoArray._IID
IID_IAttachmentDataArray = IAttachmentDataArray._IID
IID_ITableAttachments = ITableAttachments._IID
IID_IFIDSetOperator = IFIDSetOperator._IID
IID_IGeometryResultOptions = IGeometryResultOptions._IID
IID_IGUIDGenerator = IGUIDGenerator._IID
IID_ICompressionInfo = ICompressionInfo._IID
IID_IRecordArray = IRecordArray._IID
IID_IAttachmentInfo2 = IAttachmentInfo2._IID
IID_IThumbnailInfo = IThumbnailInfo._IID
IID_IDocumentationInfo = IDocumentationInfo._IID
IID_IItemInfo = IItemInfo._IID
IID_IItemInfo2 = IItemInfo2._IID
IID_IItemInfos = IItemInfos._IID
IID_IExternalDeserializerGdb = IExternalDeserializerGdb._IID
IID_ISqlKeywordDictionary = ISqlKeywordDictionary._IID
IID_ISqlInvalidCharacterDictionary = ISqlInvalidCharacterDictionary._IID
IID_IFieldError = IFieldError._IID
IID_IEnumFieldError = IEnumFieldError._IID
IID_IGeoDatabaseErrorRecords = IGeoDatabaseErrorRecords._IID
IID_IFeatureProgress = IFeatureProgress._IID
IID_IRecordNumberSet = IRecordNumberSet._IID
IID_IReplicaDescriptionExtension = IReplicaDescriptionExtension._IID
IID_IReplicaLog = IReplicaLog._IID
IID_IEnumReplicaLog = IEnumReplicaLog._IID
IID_IReplicaDatasetEdit = IReplicaDatasetEdit._IID
IID_IReplicaDataset2 = IReplicaDataset2._IID
IID_IXMLReplicaDescription = IXMLReplicaDescription._IID
IID_IReplicaDescriptionExtensionManager = IReplicaDescriptionExtensionManager._IID
IID_IGPReplicaOptions = IGPReplicaOptions._IID
IID_IGPReplicaOptions2 = IGPReplicaOptions2._IID
IID_IGPReplicaDataset2 = IGPReplicaDataset2._IID
IID_IRouteLocatorName = IRouteLocatorName._IID
IID_IRouteEventProperties = IRouteEventProperties._IID
IID_IRouteEventProperties2 = IRouteEventProperties2._IID
IID_IRouteEventSourceName = IRouteEventSourceName._IID
IID_IXYEventSourceName = IXYEventSourceName._IID
IID_IGPMessage2 = IGPMessage2._IID
IID_IGPName = IGPName._IID
IID_IEnumGPName = IEnumGPName._IID
IID_IGPToolTip = IGPToolTip._IID
IID_IRasterColormap = IRasterColormap._IID
IID_IRasterLODInfos = IRasterLODInfos._IID
IID_IRasterLODInfos2 = IRasterLODInfos2._IID
IID_IRasterDatasetEdit = IRasterDatasetEdit._IID
IID_IRasterDef2 = IRasterDef2._IID
IID_IRasterStorageDef2 = IRasterStorageDef2._IID
IID_IRasterStorageDef3 = IRasterStorageDef3._IID
IID_IRasterCatalogName = IRasterCatalogName._IID
IID_IRasterCatalogHelper = IRasterCatalogHelper._IID
IID_IRasterCatalogHelper2 = IRasterCatalogHelper2._IID
IID_IMosaicDatasetName = IMosaicDatasetName._IID
IID_IMosaicDatasetName2 = IMosaicDatasetName2._IID
IID_IRasterDatasetInfo = IRasterDatasetInfo._IID
IID_IDEBrowseOptions = IDEBrowseOptions._IID
IID_IDataElements = IDataElements._IID
IID_IEnumDataElement = IEnumDataElement._IID
IID_IDataElementInfo = IDataElementInfo._IID
IID_IDataElementHelper = IDataElementHelper._IID
IID_IDEGeoDataset = IDEGeoDataset._IID
IID_IDEWorkspace = IDEWorkspace._IID
IID_IDEWorkspace2 = IDEWorkspace2._IID
IID_IDEWorkspace3 = IDEWorkspace3._IID
IID_IWorkspaceDefinition = IWorkspaceDefinition._IID
IID_IDEDataset2 = IDEDataset2._IID
IID_IDETable = IDETable._IID
IID_IDEGdbTable = IDEGdbTable._IID
IID_IDEGdbTable2 = IDEGdbTable2._IID
IID_IDEEditorTracking = IDEEditorTracking._IID
IID_IDEFeatureClass = IDEFeatureClass._IID
IID_IDEGdbFeatureClass = IDEGdbFeatureClass._IID
IID_IDERasterCatalog = IDERasterCatalog._IID
IID_IGPTopologyMembership = IGPTopologyMembership._IID
IID_IGPGeometricNetworkMembership = IGPGeometricNetworkMembership._IID
IID_IDERelationshipClassEx = IDERelationshipClassEx._IID
IID_IDERelationshipClassEx2 = IDERelationshipClassEx2._IID
IID_IGPRelationshipClassKey = IGPRelationshipClassKey._IID
IID_IDataElementType = IDataElementType._IID
IID_IGxFilterInfo = IGxFilterInfo._IID
IID_IDEGeometricNetwork = IDEGeometricNetwork._IID
IID_IDEGeometricNetwork2 = IDEGeometricNetwork2._IID
IID_IDETopology = IDETopology._IID
IID_IGPVersionInfo = IGPVersionInfo._IID
IID_IGPVersionInfos = IGPVersionInfos._IID
IID_IGPDomain2 = IGPDomain2._IID
IID_IGPRangeDomain2 = IGPRangeDomain2._IID
IID_IGPCodedValueDomain2 = IGPCodedValueDomain2._IID
IID_IGPHistoricalMarker = IGPHistoricalMarker._IID
IID_IDEServerObject = IDEServerObject._IID
IID_IDEServerConnection = IDEServerConnection._IID
IID_IResultPortionInfo = IResultPortionInfo._IID
IID_IResultPortion = IResultPortion._IID
IID_IGPMessageManager = IGPMessageManager._IID
IID_IDERasterDataset = IDERasterDataset._IID
IID_IDERasterDatasetEx = IDERasterDatasetEx._IID
IID_IDERasterBand = IDERasterBand._IID
IID_IGPSystemToolboxLocation = IGPSystemToolboxLocation._IID
IID_IDEGdbUtilities = IDEGdbUtilities._IID
IID_IDEGdbUtilities2 = IDEGdbUtilities2._IID
IID_IGPWorkspaceExtension = IGPWorkspaceExtension._IID
IID_IGPDatasetExtension = IGPDatasetExtension._IID
IID_IGPSubtype = IGPSubtype._IID
IID_IWorkspaceDataElements = IWorkspaceDataElements._IID
IID_IWorkspaceDataElements2 = IWorkspaceDataElements2._IID
IID_IOleDBConnectionInfo = IOleDBConnectionInfo._IID
IID_ITin = ITin._IID
IID_ITinElement = ITinElement._IID
IID_ITinFeatureSeed = ITinFeatureSeed._IID
IID_ITinFilter = ITinFilter._IID
IID_ITinDynamicFilter = ITinDynamicFilter._IID
IID_ITinValueFilter = ITinValueFilter._IID
IID_ITinValueFilter2 = ITinValueFilter2._IID
IID_ITinTriangleFilter = ITinTriangleFilter._IID
IID_ITinEdgeTypeFilter = ITinEdgeTypeFilter._IID
IID_ITinNodeSourceFilter = ITinNodeSourceFilter._IID
IID_IEnumTinElement = IEnumTinElement._IID
IID_ITinAdvanced3 = ITinAdvanced3._IID
IID_ITinNodeInfo = ITinNodeInfo._IID
IID_ITinEditErrorLog = ITinEditErrorLog._IID
IID_ITinSelection = ITinSelection._IID
IID_ITinWorkspace = ITinWorkspace._IID
IID_ITinImporter = ITinImporter._IID
IID_ITinClock = ITinClock._IID
IID_ITinEdgeTypeFilter2 = ITinEdgeTypeFilter2._IID
IID_IXYEvent2FieldsProperties = IXYEvent2FieldsProperties._IID
IID_INetworkElement = INetworkElement._IID
IID_INetworkScriptEvaluatorFunctions = INetworkScriptEvaluatorFunctions._IID
IID_INetworkAttribute = INetworkAttribute._IID
IID_IShields = IShields._IID
IID_INetworkSourceDirections = INetworkSourceDirections._IID
IID_INetworkSource = INetworkSource._IID
IID_INetworkDataset = INetworkDataset._IID
IID_INetworkDirections = INetworkDirections._IID
IID_IDENetworkDataset = IDENetworkDataset._IID
IID_IEnumNetworkElement = IEnumNetworkElement._IID
IID_INetworkDirections2 = INetworkDirections2._IID
IID_INetworkSourceDirections2 = INetworkSourceDirections2._IID
IID_ITrafficData = ITrafficData._IID
IID_ISignposts = ISignposts._IID
IID_IEnumHierarchyRange = IEnumHierarchyRange._IID
IID_IGPNetworkDatasetMembership = IGPNetworkDatasetMembership._IID
IID_IDENetworkDataset2 = IDENetworkDataset2._IID
IID_INetworkAttributeParameter = INetworkAttributeParameter._IID
IID_INetworkAttributeParameter2 = INetworkAttributeParameter2._IID
IID_INetworkAttribute2 = INetworkAttribute2._IID
IID_INetworkAttribute3 = INetworkAttribute3._IID
IID_INetworkDataset2 = INetworkDataset2._IID
IID_INetworkForwardStarSetup = INetworkForwardStarSetup._IID
IID_INetworkElement64 = INetworkElement64._IID
IID_ITrafficData2 = ITrafficData2._IID
IID_IHistoricalTrafficData = IHistoricalTrafficData._IID
IID_IHistoricalTrafficData2 = IHistoricalTrafficData2._IID
IID_ITrafficFeedDirectory = ITrafficFeedDirectory._IID
IID_ITrafficFeedGPService = ITrafficFeedGPService._IID
IID_IDynamicTrafficData = IDynamicTrafficData._IID
IID_IHistoricalTravelTimeEvaluator = IHistoricalTravelTimeEvaluator._IID
IID_ITimeAwareEvaluator = ITimeAwareEvaluator._IID
IID_INetworkEvaluator = INetworkEvaluator._IID
IID_IEdgeFeatureSource = IEdgeFeatureSource._IID
IID_IJunctionFeatureSource = IJunctionFeatureSource._IID
IID_ISystemJunctionSource = ISystemJunctionSource._IID
IID_IDirectionsAttributeMapping = IDirectionsAttributeMapping._IID
IID_INetworkSourceDirections3 = INetworkSourceDirections3._IID
IID_IDirectionsLandmarkSource = IDirectionsLandmarkSource._IID
IID_IDirectionsFieldMapping = IDirectionsFieldMapping._IID
IID_IStreetNameFields = IStreetNameFields._IID
IID_IStreetNameFields2 = IStreetNameFields2._IID
IID_IEvaluatedNetworkAttribute = IEvaluatedNetworkAttribute._IID
IID_IEvaluatedNetworkAttribute2 = IEvaluatedNetworkAttribute2._IID
IID_INetworkEvaluator2 = INetworkEvaluator2._IID
IID_INetworkConstantEvaluator = INetworkConstantEvaluator._IID
IID_INetworkFieldEvaluator = INetworkFieldEvaluator._IID
IID_INetworkFieldEvaluator2 = INetworkFieldEvaluator2._IID
IID_INetworkScriptEvaluator = INetworkScriptEvaluator._IID
IID_INetworkScriptEvaluator2 = INetworkScriptEvaluator2._IID
IID_INetworkGlobalTurnDelayCategory = INetworkGlobalTurnDelayCategory._IID
IID_INetworkGlobalTurnDelayEvaluator = INetworkGlobalTurnDelayEvaluator._IID
IID_INetworkFunctionEvaluator = INetworkFunctionEvaluator._IID
IID_INetworkBuild = INetworkBuild._IID
IID_ITrafficDataManager = ITrafficDataManager._IID
IID_IRepresentationRules = IRepresentationRules._IID
IID_IRepresentationClassName = IRepresentationClassName._IID
IID_IOverride = IOverride._IID
IID_IDERepresentationClass = IDERepresentationClass._IID
IID_IPlugInCursorHelper = IPlugInCursorHelper._IID
IID_IPlugInDatasetHelper = IPlugInDatasetHelper._IID
IID_IPlugInWorkspaceHelper = IPlugInWorkspaceHelper._IID
IID_IPlugInDatasetInfo = IPlugInDatasetInfo._IID
IID_IPlugInLicense = IPlugInLicense._IID
IID_IPlugInWorkspaceFactoryHelper = IPlugInWorkspaceFactoryHelper._IID
IID_IPlugInWorkspaceFactoryHelper2 = IPlugInWorkspaceFactoryHelper2._IID
IID_IPlugInCreateWorkspace = IPlugInCreateWorkspace._IID
IID_IPlugInWorkspaceHelper2 = IPlugInWorkspaceHelper2._IID
IID_IPlugInMetadataPath = IPlugInMetadataPath._IID
IID_IPlugInMetadataPath2 = IPlugInMetadataPath2._IID
IID_IPlugInMetadata = IPlugInMetadata._IID
IID_IPlugInMetadata2 = IPlugInMetadata2._IID
IID_IPlugInFastRowCount = IPlugInFastRowCount._IID
IID_IPlugInRowCount = IPlugInRowCount._IID
IID_IPlugInFileSystemDataset = IPlugInFileSystemDataset._IID
IID_IPlugInIndexInfo = IPlugInIndexInfo._IID
IID_IPlugInIndexManager = IPlugInIndexManager._IID
IID_IPlugInDatasetHelper2 = IPlugInDatasetHelper2._IID
IID_IPlugInFastQueryValues = IPlugInFastQueryValues._IID
IID_IPlugInGxIntegration = IPlugInGxIntegration._IID
IID_IPlugInCreateDataset = IPlugInCreateDataset._IID
IID_IPlugInDatasetLoader = IPlugInDatasetLoader._IID
IID_IPlugInDatasetLoad = IPlugInDatasetLoad._IID
IID_IRelationshipChanges = IRelationshipChanges._IID
IID_IThumbnailInfoImpl = IThumbnailInfoImpl._IID
IID_IItemInfoImpl = IItemInfoImpl._IID
IID_IWorkspace = IWorkspace._IID
IID_IEnumWorkspace = IEnumWorkspace._IID
IID_IEnumWorkspaceEx = IEnumWorkspaceEx._IID
IID_IEnterpriseWorkspaceFactory = IEnterpriseWorkspaceFactory._IID
IID_IWorkspaceHelper = IWorkspaceHelper._IID
IID_IWorkspaceExtensionControl = IWorkspaceExtensionControl._IID
IID_IWorkspaceExtension2 = IWorkspaceExtension2._IID
IID_IWorkspaceStatus = IWorkspaceStatus._IID
IID_IEnumWorkspaceStatus = IEnumWorkspaceStatus._IID
IID_IWorkspaceFactoryStatus = IWorkspaceFactoryStatus._IID
IID_IScratchWorkspaceFactory = IScratchWorkspaceFactory._IID
IID_IScratchWorkspaceFactory2 = IScratchWorkspaceFactory2._IID
IID_IWorkspaceFactorySchemaCache = IWorkspaceFactorySchemaCache._IID
IID_IFieldChecker = IFieldChecker._IID
IID_IPlugInFileOperations = IPlugInFileOperations._IID
IID_IPlugInFileOperationsClass = IPlugInFileOperationsClass._IID
IID_IWorkspaceFactory = IWorkspaceFactory._IID
IID_IWorkspaceName = IWorkspaceName._IID
IID_IRemoteDatabaseWorkspaceFactory = IRemoteDatabaseWorkspaceFactory._IID
IID_IRemoteDatabaseWorkspaceFactory2 = IRemoteDatabaseWorkspaceFactory2._IID
IID_IWorkspaceName2 = IWorkspaceName2._IID
IID_IWorkspaceFactory2 = IWorkspaceFactory2._IID
IID_ILocalDatabaseCompact = ILocalDatabaseCompact._IID
IID_IReplicaDescription = IReplicaDescription._IID
IID_IReplica = IReplica._IID
IID_IEnumReplica = IEnumReplica._IID
IID_IWorkspaceReplicas = IWorkspaceReplicas._IID
IID_IWorkspaceReplicasAdmin = IWorkspaceReplicasAdmin._IID
IID_IWorkspaceReplicasAdmin2 = IWorkspaceReplicasAdmin2._IID
IID_IWorkspaceReplicasAdmin3 = IWorkspaceReplicasAdmin3._IID
IID_IGPReplicaDescription = IGPReplicaDescription._IID
IID_IGPReplica = IGPReplica._IID
IID_IWorkspaceReplicas2 = IWorkspaceReplicas2._IID
IID_IReplica2 = IReplica2._IID
IID_IReplica3 = IReplica3._IID
IID_IReplicaEdit = IReplicaEdit._IID
IID_IReplicaEdit2 = IReplicaEdit2._IID
IID_IWorkspaceReplicaEvents = IWorkspaceReplicaEvents._IID
IID_IGPReplica2 = IGPReplica2._IID
IID_IGPReplicas = IGPReplicas._IID
IID_ILocatorWorkspaceName = ILocatorWorkspaceName._IID
IID_ILocatorName = ILocatorName._IID
IID_IEnumLocatorName = IEnumLocatorName._IID
IID_IWorkspaceDefinition2 = IWorkspaceDefinition2._IID
IID_IEnumDataset = IEnumDataset._IID
IID_IDataset = IDataset._IID
IID_IWorkspaceEvents = IWorkspaceEvents._IID
IID_IWorkspaceEvents2 = IWorkspaceEvents2._IID
IID_IDatasetContainer = IDatasetContainer._IID
IID_IRasterDataset = IRasterDataset._IID
IID_IRasterWorkspaceEx = IRasterWorkspaceEx._IID
IID_IDatasetComponent = IDatasetComponent._IID
IID_IDatasetComponent2 = IDatasetComponent2._IID
IID_IXmlPropertySetEdit = IXmlPropertySetEdit._IID
IID_IRasterDataset2 = IRasterDataset2._IID
IID_IRasterDataset3 = IRasterDataset3._IID
IID_IRasterCatalogItem = IRasterCatalogItem._IID
IID_IRasterWorkspace2 = IRasterWorkspace2._IID
IID_IRasterWorkspace4 = IRasterWorkspace4._IID
IID_IRasterValue = IRasterValue._IID
IID_IRasterValue2 = IRasterValue2._IID
IID_ISaveAs = ISaveAs._IID
IID_ISaveAs2 = ISaveAs2._IID
IID_IEnumDatasetName = IEnumDatasetName._IID
IID_IDatasetName = IDatasetName._IID
IID_IWorkspaceExtension3 = IWorkspaceExtension3._IID
IID_ITableNameSet = ITableNameSet._IID
IID_IDatasetName2 = IDatasetName2._IID
IID_IFeatureWorkspaceManage = IFeatureWorkspaceManage._IID
IID_IFeatureDatasetName = IFeatureDatasetName._IID
IID_ISimpleDataConverter = ISimpleDataConverter._IID
IID_IFeatureDatasetName2 = IFeatureDatasetName2._IID
IID_IFeatureClassName = IFeatureClassName._IID
IID_ITopologyName = ITopologyName._IID
IID_IDatasetContainerName = IDatasetContainerName._IID
IID_IDatasetContainer2 = IDatasetContainer2._IID
IID_IDatasetContainer3 = IDatasetContainer3._IID
IID_ITopologyClassName = ITopologyClassName._IID
IID_IRelationshipClassName = IRelationshipClassName._IID
IID_IGeometricNetworkName = IGeometricNetworkName._IID
IID_IFeatureWorkspaceManage2 = IFeatureWorkspaceManage2._IID
IID_IFeatureWorkspaceManage3 = IFeatureWorkspaceManage3._IID
IID_ICopyHelper = ICopyHelper._IID
IID_IRelationshipClassInfo = IRelationshipClassInfo._IID
IID_IEnumRelationshipClassInfo = IEnumRelationshipClassInfo._IID
IID_IReplicaDescription2 = IReplicaDescription2._IID
IID_IReplicaDescription3 = IReplicaDescription3._IID
IID_IRasterDatasetName = IRasterDatasetName._IID
IID_IRasterBandName = IRasterBandName._IID
IID_IFeatureDataConverter = IFeatureDataConverter._IID
IID_INetworkDatasetName = INetworkDatasetName._IID
IID_IPlugInNetworkDatasetContainer = IPlugInNetworkDatasetContainer._IID
IID_IVersionedWorkspace = IVersionedWorkspace._IID
IID_IEnumVersionInfo = IEnumVersionInfo._IID
IID_IVersionInfo = IVersionInfo._IID
IID_IVersion = IVersion._IID
IID_IVersionedObject = IVersionedObject._IID
IID_IVersion2 = IVersion2._IID
IID_IVersionInfo2 = IVersionInfo2._IID
IID_IEnumVersionInfo2 = IEnumVersionInfo2._IID
IID_IVersion3 = IVersion3._IID
IID_IVersionedWorkspace2 = IVersionedWorkspace2._IID
IID_IVersionedWorkspace3 = IVersionedWorkspace3._IID
IID_IVersionedWorkspace4 = IVersionedWorkspace4._IID
IID_IVersionedObject2 = IVersionedObject2._IID
IID_IVersionedObject3 = IVersionedObject3._IID
IID_IDataChangesEx = IDataChangesEx._IID
IID_IWorkspaceEdit2 = IWorkspaceEdit2._IID
IID_IDifferenceCursor = IDifferenceCursor._IID
IID_IRow = IRow._IID
IID_ICursor = ICursor._IID
IID_IDifferenceCursorEx = IDifferenceCursorEx._IID
IID_IRelClassEnumRowPairs = IRelClassEnumRowPairs._IID
IID_IQueryDef = IQueryDef._IID
IID_ITableWrite = ITableWrite._IID
IID_IQueryDef2 = IQueryDef2._IID
IID_IQueryName = IQueryName._IID
IID_IQueryName2 = IQueryName2._IID
IID_IAttributeRule = IAttributeRule._IID
IID_ITableUtil = ITableUtil._IID
IID_ITableWrite2 = ITableWrite2._IID
IID_IObjectClassValidation = IObjectClassValidation._IID
IID_IRandomAccessCursor = IRandomAccessCursor._IID
IID_IRandomAccessTable = IRandomAccessTable._IID
IID_IRowCompare = IRowCompare._IID
IID_IDataStatistics = IDataStatistics._IID
IID_IEnumEventError = IEnumEventError._IID
IID_IEventSourceErrors = IEventSourceErrors._IID
IID_INetworkEvaluatorSetup = INetworkEvaluatorSetup._IID
IID_ITable = ITable._IID
IID_ISelectionSet = ISelectionSet._IID
IID_IConflictClass = IConflictClass._IID
IID_IEnumConflictClass = IEnumConflictClass._IID
IID_IVersionEdit = IVersionEdit._IID
IID_IVersionEdit2 = IVersionEdit2._IID
IID_IVersionEdit3 = IVersionEdit3._IID
IID_ISqlWorkspace = ISqlWorkspace._IID
IID_IEnumTable = IEnumTable._IID
IID_ITableSort = ITableSort._IID
IID_IArchivableClass = IArchivableClass._IID
IID_IRelQueryTableInfo = IRelQueryTableInfo._IID
IID_ICollectionTableVersionChanges = ICollectionTableVersionChanges._IID
IID_IEnumTableVersionChanges = IEnumTableVersionChanges._IID
IID_IRelQueryTableManage = IRelQueryTableManage._IID
IID_IValidation = IValidation._IID
IID_IValidation2 = IValidation2._IID
IID_IRelQueryTableName = IRelQueryTableName._IID
IID_IRelQueryTableName2 = IRelQueryTableName2._IID
IID_ISelectionSet2 = ISelectionSet2._IID
IID_IRelQueryTableSelectionSet = IRelQueryTableSelectionSet._IID
IID_IGeometricNetworkErrorDetection = IGeometricNetworkErrorDetection._IID
IID_IVersionedTable = IVersionedTable._IID
IID_IVersionEdit4 = IVersionEdit4._IID
IID_IRecordSetInit = IRecordSetInit._IID
IID_IRecordSet = IRecordSet._IID
IID_IRecordSet2 = IRecordSet2._IID
IID_IExternalSerializerGdb = IExternalSerializerGdb._IID
IID_IJSONConverterGdb = IJSONConverterGdb._IID
IID_IDataConvertProcess = IDataConvertProcess._IID
IID_ISimpleDataConverter2 = ISimpleDataConverter2._IID
IID_IReplicaFilterDescriptionEdit = IReplicaFilterDescriptionEdit._IID
IID_IReplicaFilterDescription = IReplicaFilterDescription._IID
IID_IReplicaFilterDescription2 = IReplicaFilterDescription2._IID
IID_IWorkspaceReplicaSyncEvents = IWorkspaceReplicaSyncEvents._IID
IID_IRasterDatasetEdit2 = IRasterDatasetEdit2._IID
IID_IRasterDatasetEdit3 = IRasterDatasetEdit3._IID
IID_IFeatureDataConverter2 = IFeatureDataConverter2._IID
IID_IXYEventSource = IXYEventSource._IID
IID_IExternalSerializerGdb2 = IExternalSerializerGdb2._IID
IID_IEnumNameMapping = IEnumNameMapping._IID
IID_INameMapping = INameMapping._IID
IID_INameMapping2 = INameMapping2._IID
IID_IReplicaDescription4 = IReplicaDescription4._IID
IID_IExtractionUtilities = IExtractionUtilities._IID
IID_IGeoDBDataTransfer = IGeoDBDataTransfer._IID
IID_IGeoDBDataTransfer2 = IGeoDBDataTransfer2._IID
IID_IFeatureWorkspace = IFeatureWorkspace._IID
IID_IObjectClass = IObjectClass._IID
IID_IObject = IObject._IID
IID_IFeature = IFeature._IID
IID_IFeatureCursor = IFeatureCursor._IID
IID_IFeatureClassWrite = IFeatureClassWrite._IID
IID_IFeatureEdit = IFeatureEdit._IID
IID_IFeatureElement = IFeatureElement._IID
IID_IFeatureConnect = IFeatureConnect._IID
IID_IEnumFeature = IEnumFeature._IID
IID_IEnumObjectClass = IEnumObjectClass._IID
IID_ITransformGroup = ITransformGroup._IID
IID_IObjectClassContainer = IObjectClassContainer._IID
IID_IObjectClassEvents = IObjectClassEvents._IID
IID_IFeatureClassUtil = IFeatureClassUtil._IID
IID_IPersistCustomFeaturesExtension = IPersistCustomFeaturesExtension._IID
IID_IFeatureEdit2 = IFeatureEdit2._IID
IID_IFeatureElementEdit = IFeatureElementEdit._IID
IID_IEnumObject = IEnumObject._IID
IID_IFeatureClass = IFeatureClass._IID
IID_IFeatureDataset = IFeatureDataset._IID
IID_IFeatureWorkspaceAnno = IFeatureWorkspaceAnno._IID
IID_IEnumFeatureClass = IEnumFeatureClass._IID
IID_IFeatureClassContainer = IFeatureClassContainer._IID
IID_IFeatureDatasetExtension = IFeatureDatasetExtension._IID
IID_IFeatureDatasetExtension2 = IFeatureDatasetExtension2._IID
IID_IFeatureDatasetExtensionContainer = IFeatureDatasetExtensionContainer._IID
IID_ITopologyProperties = ITopologyProperties._IID
IID_IFeatureConstruction = IFeatureConstruction._IID
IID_ISurface = ISurface._IID
IID_ITinEdit2 = ITinEdit2._IID
IID_IGeoDatabaseBridge = IGeoDatabaseBridge._IID
IID_IEnumRelationshipClass = IEnumRelationshipClass._IID
IID_IRelationshipClass = IRelationshipClass._IID
IID_IRelationship = IRelationship._IID
IID_IEnumRelationship = IEnumRelationship._IID
IID_IRelationshipClassContainer = IRelationshipClassContainer._IID
IID_IRelQueryTable = IRelQueryTable._IID
IID_IRelQueryTableFactory = IRelQueryTableFactory._IID
IID_IRelationshipClassEvents = IRelationshipClassEvents._IID
IID_IRelationshipClass2 = IRelationshipClass2._IID
IID_IRelationshipClass3 = IRelationshipClass3._IID
IID_IMemoryRelationshipClassFactory = IMemoryRelationshipClassFactory._IID
IID_IRelatedObjectEvents = IRelatedObjectEvents._IID
IID_IRelatedObjectClassEvents = IRelatedObjectClassEvents._IID
IID_IRelatedObjectClassEvents2 = IRelatedObjectClassEvents2._IID
IID_IConfirmSendRelatedObjectEvents = IConfirmSendRelatedObjectEvents._IID
IID_IFeatureClassEdit = IFeatureClassEdit._IID
IID_ISynchronizationHelper = ISynchronizationHelper._IID
IID_IEnumAttributedRelationship = IEnumAttributedRelationship._IID
IID_ITopologyWorkspace = ITopologyWorkspace._IID
IID_ITopology = ITopology._IID
IID_ITopologyContainer = ITopologyContainer._IID
IID_ITopology2 = ITopology2._IID
IID_ITopologyContainer2 = ITopologyContainer2._IID
IID_ITopologyClass = ITopologyClass._IID
IID_ITopologyGraph = ITopologyGraph._IID
IID_ITopologyGraph2 = ITopologyGraph2._IID
IID_ITopologyGraph3 = ITopologyGraph3._IID
IID_ITopologyGraph4 = ITopologyGraph4._IID
IID_IEnumTopologyNode = IEnumTopologyNode._IID
IID_ITopologyNode = ITopologyNode._IID
IID_ITopologyEdge = ITopologyEdge._IID
IID_IEnumNodeEdge = IEnumNodeEdge._IID
IID_IEnumTopologyEdge = IEnumTopologyEdge._IID
IID_IGPValue = IGPValue._IID
IID_IGPDomain = IGPDomain._IID
IID_IGPDataType = IGPDataType._IID
IID_IEnumGPValue = IEnumGPValue._IID
IID_IGPDataTypeFactory = IGPDataTypeFactory._IID
IID_IGPVariable = IGPVariable._IID
IID_IGPCodedValueDomain = IGPCodedValueDomain._IID
IID_IGPChoiceList = IGPChoiceList._IID
IID_INetwork = INetwork._IID
IID_IForwardStar = IForwardStar._IID
IID_IEnumNetEID = IEnumNetEID._IID
IID_INetworkWorkspace = INetworkWorkspace._IID
IID_INetworkWorkspace2 = INetworkWorkspace2._IID
IID_INetElements = INetElements._IID
IID_IForwardStarGEN = IForwardStarGEN._IID
IID_IUtilityNetworkGEN = IUtilityNetworkGEN._IID
IID_IEnumNetEIDBuilderGEN = IEnumNetEIDBuilderGEN._IID
IID_IEnumNetEIDBuilder = IEnumNetEIDBuilder._IID
IID_IUtilityNetwork = IUtilityNetwork._IID
IID_IUtilityNetwork2 = IUtilityNetwork2._IID
IID_IGraph = IGraph._IID
IID_IEdgeFeature = IEdgeFeature._IID
IID_ISimpleJunctionFeature = ISimpleJunctionFeature._IID
IID_IComplexJunctionFeature = IComplexJunctionFeature._IID
IID_IEnumEdgeFeature = IEnumEdgeFeature._IID
IID_IJunctionFeature = IJunctionFeature._IID
IID_IComplexEdgeFeature = IComplexEdgeFeature._IID
IID_IEnumJunctionFeature = IEnumJunctionFeature._IID
IID_INetworkFeature = INetworkFeature._IID
IID_IGeometricNetwork = IGeometricNetwork._IID
IID_IEnumNetworkFeature = IEnumNetworkFeature._IID
IID_INetworkCollection = INetworkCollection._IID
IID_INetworkCollection2 = INetworkCollection2._IID
IID_INetworkClass = INetworkClass._IID
IID_ILocatorUI = ILocatorUI._IID
IID_ILocator = ILocator._IID
IID_IEnumLocator = IEnumLocator._IID
IID_ILocatorWorkspace = ILocatorWorkspace._IID
IID_ILocatorUI2 = ILocatorUI2._IID
IID_ILocatorWorkspace2 = ILocatorWorkspace2._IID
IID_ILocatorDataset = ILocatorDataset._IID
IID_ITinNode = ITinNode._IID
IID_ITinNodeArray = ITinNodeArray._IID
IID_IEnumTinNode = IEnumTinNode._IID
IID_ITinNodeCollection = ITinNodeCollection._IID
IID_ITinEdgeArray = ITinEdgeArray._IID
IID_ITinEdge = ITinEdge._IID
IID_ITinTriangle = ITinTriangle._IID
IID_ITinTriangleArray = ITinTriangleArray._IID
IID_ITinNode2 = ITinNode2._IID
IID_IEnumTinEdge = IEnumTinEdge._IID
IID_IEnumTinTriangle = IEnumTinTriangle._IID
IID_ITinPolygon = ITinPolygon._IID
IID_ITinPolyline = ITinPolyline._IID
IID_ITinAdvanced = ITinAdvanced._IID
IID_ITinAdvanced2 = ITinAdvanced2._IID
IID_ITinEdit = ITinEdit._IID
IID_ITinSurfaceElement = ITinSurfaceElement._IID
IID_ITinSurface = ITinSurface._IID
IID_ITinSurface2 = ITinSurface2._IID
IID_ITinSurface3 = ITinSurface3._IID
IID_ITinFeatureEdit = ITinFeatureEdit._IID
IID_ISurfaceIntersectionEvents = ISurfaceIntersectionEvents._IID
IID_IGeoDatabaseBridge2 = IGeoDatabaseBridge2._IID
IID_INetworkEdge = INetworkEdge._IID
IID_INetworkEdge2 = INetworkEdge2._IID
IID_INetworkTurn = INetworkTurn._IID
IID_INetworkJunction = INetworkJunction._IID
IID_INetworkJunction2 = INetworkJunction2._IID
IID_INetworkTurn2 = INetworkTurn2._IID
IID_INetworkForwardStarAdjacencies = INetworkForwardStarAdjacencies._IID
IID_INetworkForwardStar = INetworkForwardStar._IID
IID_INetworkQuery = INetworkQuery._IID
IID_INetworkQuery2 = INetworkQuery2._IID
IID_INetworkQuery3 = INetworkQuery3._IID
IID_INetworkForwardStarEx = INetworkForwardStarEx._IID
IID_IRepresentationClass = IRepresentationClass._IID
IID_IRepresentation = IRepresentation._IID
IID_IRepresentationWorkspaceExtension = IRepresentationWorkspaceExtension._IID
_IIDMap[IID_INetworkProtectNames] = INetworkProtectNames
_IIDMap[IID_INetworkDatasetProtectNames] = INetworkDatasetProtectNames
_IIDMap[IID_IGeoDBProtectNames] = IGeoDBProtectNames
_IIDMap[IID_ISQLPrivilege] = ISQLPrivilege
_IIDMap[IID_IGeoDataset] = IGeoDataset
_IIDMap[IID_IProperty] = IProperty
_IIDMap[IID_IEnumProperty] = IEnumProperty
_IIDMap[IID_IDatasetEditInfo] = IDatasetEditInfo
_IIDMap[IID_IDatasetEdit] = IDatasetEdit
_IIDMap[IID_ITransactions] = ITransactions
_IIDMap[IID_ITransactionsOptions] = ITransactionsOptions
_IIDMap[IID_ILockInfo] = ILockInfo
_IIDMap[IID_IEnumLockInfo] = IEnumLockInfo
_IIDMap[IID_IFIDSet] = IFIDSet
_IIDMap[IID_IDomain] = IDomain
_IIDMap[IID_IGeometryDef] = IGeometryDef
_IIDMap[IID_IField] = IField
_IIDMap[IID_IFields] = IFields
_IIDMap[IID_IRowBuffer] = IRowBuffer
_IIDMap[IID_IIndex] = IIndex
_IIDMap[IID_IEnumIndex] = IEnumIndex
_IIDMap[IID_IIndexes] = IIndexes
_IIDMap[IID_IClass] = IClass
_IIDMap[IID_IQueryFilter] = IQueryFilter
_IIDMap[IID_IEnumIDs] = IEnumIDs
_IIDMap[IID_IMetadata] = IMetadata
_IIDMap[IID_IMetadataEdit] = IMetadataEdit
_IIDMap[IID_ISQLSyntax] = ISQLSyntax
_IIDMap[IID_ISchemaLockInfo] = ISchemaLockInfo
_IIDMap[IID_IEnumSchemaLockInfo] = IEnumSchemaLockInfo
_IIDMap[IID_ISchemaLock] = ISchemaLock
_IIDMap[IID_IEnumDatasetType] = IEnumDatasetType
_IIDMap[IID_IDataElement] = IDataElement
_IIDMap[IID_IFeatureClassStorage] = IFeatureClassStorage
_IIDMap[IID_IFeatureClassStorage2] = IFeatureClassStorage2
_IIDMap[IID_IDatasetMigration] = IDatasetMigration
_IIDMap[IID_IWorkspace2] = IWorkspace2
_IIDMap[IID_IDatabaseConnectionInfo] = IDatabaseConnectionInfo
_IIDMap[IID_IDatabaseConnectionInfo2] = IDatabaseConnectionInfo2
_IIDMap[IID_IUserInfo] = IUserInfo
_IIDMap[IID_IEnumUserInfo] = IEnumUserInfo
_IIDMap[IID_IDatabaseConnectionInfo3] = IDatabaseConnectionInfo3
_IIDMap[IID_IDatabaseConnectionInfo4] = IDatabaseConnectionInfo4
_IIDMap[IID_IWorkspaceProperty] = IWorkspaceProperty
_IIDMap[IID_IWorkspaceProperties] = IWorkspaceProperties
_IIDMap[IID_IWorkspaceProperties2] = IWorkspaceProperties2
_IIDMap[IID_IWorkspaceExtension] = IWorkspaceExtension
_IIDMap[IID_IWorkspaceExtensionManager] = IWorkspaceExtensionManager
_IIDMap[IID_IWorkspaceFactoryFileExtensions] = IWorkspaceFactoryFileExtensions
_IIDMap[IID_IWorkspaceFactoryLockControl] = IWorkspaceFactoryLockControl
_IIDMap[IID_IWorkspaceProgressTracker] = IWorkspaceProgressTracker
_IIDMap[IID_IDatasetEditEx] = IDatasetEditEx
_IIDMap[IID_IDatasetFileStat] = IDatasetFileStat
_IIDMap[IID_IDatasetFileStat2] = IDatasetFileStat2
_IIDMap[IID_IDatasetNameFileStat] = IDatasetNameFileStat
_IIDMap[IID_IDatasetNameFileStat2] = IDatasetNameFileStat2
_IIDMap[IID_IDatasetNameFileSize] = IDatasetNameFileSize
_IIDMap[IID_IWorkspaceEditInfo] = IWorkspaceEditInfo
_IIDMap[IID_IWorkspaceEdit] = IWorkspaceEdit
_IIDMap[IID_IMultiuserWorkspaceEdit] = IMultiuserWorkspaceEdit
_IIDMap[IID_IWorkspaceEditControl] = IWorkspaceEditControl
_IIDMap[IID_IWorkspaceEditEvents] = IWorkspaceEditEvents
_IIDMap[IID_IWorkspaceEditEvents2] = IWorkspaceEditEvents2
_IIDMap[IID_ISpatialCacheManager] = ISpatialCacheManager
_IIDMap[IID_ISpatialCacheManager2] = ISpatialCacheManager2
_IIDMap[IID_ISpatialCacheManager3] = ISpatialCacheManager3
_IIDMap[IID_IGeodataXform] = IGeodataXform
_IIDMap[IID_IGeoDataset2] = IGeoDataset2
_IIDMap[IID_IGeoDatasetSchemaEdit] = IGeoDatasetSchemaEdit
_IIDMap[IID_IGeoDatasetSchemaEdit2] = IGeoDatasetSchemaEdit2
_IIDMap[IID_IHistoricalMarker] = IHistoricalMarker
_IIDMap[IID_IEnumHistoricalMarker] = IEnumHistoricalMarker
_IIDMap[IID_IHistoricalVersion] = IHistoricalVersion
_IIDMap[IID_IHistoricalWorkspace] = IHistoricalWorkspace
_IIDMap[IID_IArchivableObject] = IArchivableObject
_IIDMap[IID_IArchiveRegistrationInfo] = IArchiveRegistrationInfo
_IIDMap[IID_IFileDataLock] = IFileDataLock
_IIDMap[IID_IDatabaseCompact] = IDatabaseCompact
_IIDMap[IID_ISetDefaultConnectionInfo] = ISetDefaultConnectionInfo
_IIDMap[IID_ISetDefaultConnectionInfo2] = ISetDefaultConnectionInfo2
_IIDMap[IID_ISetDefaultConnectionInfo3] = ISetDefaultConnectionInfo3
_IIDMap[IID_ISqlDefaultConnectionInfo] = ISqlDefaultConnectionInfo
_IIDMap[IID_INativeType] = INativeType
_IIDMap[IID_INativeTypeSearch] = INativeTypeSearch
_IIDMap[IID_INativeTypeInfo] = INativeTypeInfo
_IIDMap[IID_IComplexNativeType] = IComplexNativeType
_IIDMap[IID_IEnumSpatialReferenceInfo] = IEnumSpatialReferenceInfo
_IIDMap[IID_IWorkspaceSpatialReferenceInfo] = IWorkspaceSpatialReferenceInfo
_IIDMap[IID_IConfigurationParameter] = IConfigurationParameter
_IIDMap[IID_IEnumConfigurationParameter] = IEnumConfigurationParameter
_IIDMap[IID_IConfigurationKeyword] = IConfigurationKeyword
_IIDMap[IID_IEnumConfigurationKeyword] = IEnumConfigurationKeyword
_IIDMap[IID_IConfigurationKeyword2] = IConfigurationKeyword2
_IIDMap[IID_IConfigurationParameter2] = IConfigurationParameter2
_IIDMap[IID_IWorkspaceConfiguration] = IWorkspaceConfiguration
_IIDMap[IID_IXMLIndexTag] = IXMLIndexTag
_IIDMap[IID_IXMLIndexTags] = IXMLIndexTags
_IIDMap[IID_IXMLIndexTemplate] = IXMLIndexTemplate
_IIDMap[IID_IEnumXMLIndexTemplate] = IEnumXMLIndexTemplate
_IIDMap[IID_IXMLIndex] = IXMLIndex
_IIDMap[IID_IXMLIndexEdit] = IXMLIndexEdit
_IIDMap[IID_IXMLIndexTemplateManage] = IXMLIndexTemplateManage
_IIDMap[IID_IXMLIndexUtil] = IXMLIndexUtil
_IIDMap[IID_IRule] = IRule
_IIDMap[IID_IEnumRule] = IEnumRule
_IIDMap[IID_IFeatureBuffer] = IFeatureBuffer
_IIDMap[IID_IFeatureWorkspaceSchemaEdit] = IFeatureWorkspaceSchemaEdit
_IIDMap[IID_IGeodatabaseRelease] = IGeodatabaseRelease
_IIDMap[IID_IEnumDomain] = IEnumDomain
_IIDMap[IID_IWorkspaceDomains] = IWorkspaceDomains
_IIDMap[IID_IWorkspaceDomains2] = IWorkspaceDomains2
_IIDMap[IID_IWorkspaceDomains3] = IWorkspaceDomains3
_IIDMap[IID_IPnt] = IPnt
_IIDMap[IID_IRasterStorageDef] = IRasterStorageDef
_IIDMap[IID_IRasterDef] = IRasterDef
_IIDMap[IID_IPixelBlock] = IPixelBlock
_IIDMap[IID_IRasterCursor] = IRasterCursor
_IIDMap[IID_IRaster] = IRaster
_IIDMap[IID_IRasterCatalog] = IRasterCatalog
_IIDMap[IID_IReplicaDataset] = IReplicaDataset
_IIDMap[IID_IEnumReplicaDataset] = IEnumReplicaDataset
_IIDMap[IID_IWorkspaceReplicaDatasets] = IWorkspaceReplicaDatasets
_IIDMap[IID_IEnumTopologyParent] = IEnumTopologyParent
_IIDMap[IID_ITopologyElement] = ITopologyElement
_IIDMap[IID_IEnumTGHitInfo] = IEnumTGHitInfo
_IIDMap[IID_IIndexEdit] = IIndexEdit
_IIDMap[IID_IGPMessage] = IGPMessage
_IIDMap[IID_IGPDescribe] = IGPDescribe
_IIDMap[IID_INetWeight] = INetWeight
_IIDMap[IID_INetTopology] = INetTopology
_IIDMap[IID_INetElementDescription] = INetElementDescription
_IIDMap[IID_INetTopologyEdit] = INetTopologyEdit
_IIDMap[IID_INetElementClass] = INetElementClass
_IIDMap[IID_INetWeightAssociation] = INetWeightAssociation
_IIDMap[IID_IEnumNetWeightAssociation] = IEnumNetWeightAssociation
_IIDMap[IID_IInvalidObjectInfo] = IInvalidObjectInfo
_IIDMap[IID_IEnumInvalidObject] = IEnumInvalidObject
_IIDMap[IID_INetworkUpdate] = INetworkUpdate
_IIDMap[IID_INetSchema] = INetSchema
_IIDMap[IID_INetSchemaEdit] = INetSchemaEdit
_IIDMap[IID_INetWeightEdit] = INetWeightEdit
_IIDMap[IID_INetWeightAssociationEdit] = INetWeightAssociationEdit
_IIDMap[IID_INetAttributes] = INetAttributes
_IIDMap[IID_INetAttributesEdit] = INetAttributesEdit
_IIDMap[IID_INetElementDescriptionEdit] = INetElementDescriptionEdit
_IIDMap[IID_INetDiagnostics] = INetDiagnostics
_IIDMap[IID_INetTopologyEditGEN] = INetTopologyEditGEN
_IIDMap[IID_IDatasetAnalyze] = IDatasetAnalyze
_IIDMap[IID_ITopologyProtectNames] = ITopologyProtectNames
_IIDMap[IID_IFeatureDatasetManage] = IFeatureDatasetManage
_IIDMap[IID_IFeatureClassLoad] = IFeatureClassLoad
_IIDMap[IID_IQueryDescription] = IQueryDescription
_IIDMap[IID_IQueryTableName] = IQueryTableName
_IIDMap[IID_IFeatureClassCreation] = IFeatureClassCreation
_IIDMap[IID_IInvalidArea] = IInvalidArea
_IIDMap[IID_IFeatureDraw] = IFeatureDraw
_IIDMap[IID_IRowEdit] = IRowEdit
_IIDMap[IID_IFeatureSimplify] = IFeatureSimplify
_IIDMap[IID_IFeatureSimplify2] = IFeatureSimplify2
_IIDMap[IID_IQueryFilter2] = IQueryFilter2
_IIDMap[IID_ISpatialFilter] = ISpatialFilter
_IIDMap[IID_ISQLCheck] = ISQLCheck
_IIDMap[IID_ITableSortCallBack] = ITableSortCallBack
_IIDMap[IID_IFieldInfo] = IFieldInfo
_IIDMap[IID_ITableFields] = ITableFields
_IIDMap[IID_ISimpleEdgeFeature] = ISimpleEdgeFeature
_IIDMap[IID_IComplexNetworkFeature] = IComplexNetworkFeature
_IIDMap[IID_IFIDSet2] = IFIDSet2
_IIDMap[IID_ITopologyRule] = ITopologyRule
_IIDMap[IID_IDEDataset] = IDEDataset
_IIDMap[IID_IGPReplicaDataset] = IGPReplicaDataset
_IIDMap[IID_IGPReplicaDatasets] = IGPReplicaDatasets
_IIDMap[IID_IGPMessagesCallback] = IGPMessagesCallback
_IIDMap[IID_IGPMessages] = IGPMessages
_IIDMap[IID_IRecord] = IRecord
_IIDMap[IID_IAttachmentInfo] = IAttachmentInfo
_IIDMap[IID_IAttachmentData] = IAttachmentData
_IIDMap[IID_IEditorTrackingInfo] = IEditorTrackingInfo
_IIDMap[IID_IOwnershipBasedAccessControl] = IOwnershipBasedAccessControl
_IIDMap[IID_ICoverageAnnotationFeature] = ICoverageAnnotationFeature
_IIDMap[IID_IFeatureClassManage] = IFeatureClassManage
_IIDMap[IID_IFeatureProject] = IFeatureProject
_IIDMap[IID_IFieldEdit] = IFieldEdit
_IIDMap[IID_IField2] = IField2
_IIDMap[IID_IFieldEdit2] = IFieldEdit2
_IIDMap[IID_IModelInfo] = IModelInfo
_IIDMap[IID_IFields2] = IFields2
_IIDMap[IID_IFieldsEdit] = IFieldsEdit
_IIDMap[IID_IGeometryDefEdit] = IGeometryDefEdit
_IIDMap[IID_IIndexesEdit] = IIndexesEdit
_IIDMap[IID_IClassSchemaEdit] = IClassSchemaEdit
_IIDMap[IID_IClassSchemaEdit2] = IClassSchemaEdit2
_IIDMap[IID_IClassSchemaEdit3] = IClassSchemaEdit3
_IIDMap[IID_IClassSchemaEdit4] = IClassSchemaEdit4
_IIDMap[IID_IClassSchemaEditEx] = IClassSchemaEditEx
_IIDMap[IID_IRelClassSchemaEdit] = IRelClassSchemaEdit
_IIDMap[IID_IRelQueryTableSettings] = IRelQueryTableSettings
_IIDMap[IID_ITableCapabilities] = ITableCapabilities
_IIDMap[IID_ITopologyGraphEvents] = ITopologyGraphEvents
_IIDMap[IID_IObjectClassSchemaEvents] = IObjectClassSchemaEvents
_IIDMap[IID_IObjectClass2] = IObjectClass2
_IIDMap[IID_ISimpleRelationshipChanges] = ISimpleRelationshipChanges
_IIDMap[IID_IEnumSubtype] = IEnumSubtype
_IIDMap[IID_ISubtypes] = ISubtypes
_IIDMap[IID_IValidate] = IValidate
_IIDMap[IID_IRangeDomain] = IRangeDomain
_IIDMap[IID_ICodedValueDomain] = ICodedValueDomain
_IIDMap[IID_ICodedValueDomain2] = ICodedValueDomain2
_IIDMap[IID_IStringDomain] = IStringDomain
_IIDMap[IID_IEdgeConnectivityRule] = IEdgeConnectivityRule
_IIDMap[IID_IJunctionConnectivityRule] = IJunctionConnectivityRule
_IIDMap[IID_IJunctionConnectivityRule2] = IJunctionConnectivityRule2
_IIDMap[IID_IRelationshipRule] = IRelationshipRule
_IIDMap[IID_IObjectClassName] = IObjectClassName
_IIDMap[IID_IMemoryRelationshipClassName] = IMemoryRelationshipClassName
_IIDMap[IID_IClassHelper] = IClassHelper
_IIDMap[IID_IClassExtension] = IClassExtension
_IIDMap[IID_IObjectClassInfo] = IObjectClassInfo
_IIDMap[IID_IObjectClassInfo2] = IObjectClassInfo2
_IIDMap[IID_IFeatureClassDraw] = IFeatureClassDraw
_IIDMap[IID_IRowSubtypes] = IRowSubtypes
_IIDMap[IID_IEnumGeometryBind] = IEnumGeometryBind
_IIDMap[IID_IRowEvents] = IRowEvents
_IIDMap[IID_IRowChanges] = IRowChanges
_IIDMap[IID_IFeatureEvents] = IFeatureEvents
_IIDMap[IID_IFeatureChanges] = IFeatureChanges
_IIDMap[IID_INetworkFeatureEvents] = INetworkFeatureEvents
_IIDMap[IID_IEnumFeatureSetup] = IEnumFeatureSetup
_IIDMap[IID_IObjects] = IObjects
_IIDMap[IID_IFeatureSnap] = IFeatureSnap
_IIDMap[IID_ITimeQueryFilter] = ITimeQueryFilter
_IIDMap[IID_IFilterDefs] = IFilterDefs
_IIDMap[IID_IXMLFilterDef] = IXMLFilterDef
_IIDMap[IID_IQueryFilterDefinition] = IQueryFilterDefinition
_IIDMap[IID_IQueryFilterDefinition2] = IQueryFilterDefinition2
_IIDMap[IID_IGeometricNetworkReconcileProperties] = IGeometricNetworkReconcileProperties
_IIDMap[IID_IGeometricNetworkConnectivity] = IGeometricNetworkConnectivity
_IIDMap[IID_IRepairConnectivityProgressEvents] = IRepairConnectivityProgressEvents
_IIDMap[IID_IRepairConnectivityProgress] = IRepairConnectivityProgress
_IIDMap[IID_IGeometricNetworkConnectivity2] = IGeometricNetworkConnectivity2
_IIDMap[IID_IRebuildIndexes] = IRebuildIndexes
_IIDMap[IID_IVersionedView] = IVersionedView
_IIDMap[IID_IVersionEvents] = IVersionEvents
_IIDMap[IID_IVersionEvents2] = IVersionEvents2
_IIDMap[IID_IGeodatabaseRelease2] = IGeodatabaseRelease2
_IIDMap[IID_IGeodatabaseRelease3] = IGeodatabaseRelease3
_IIDMap[IID_IGeodatabaseRelease4] = IGeodatabaseRelease4
_IIDMap[IID_IObjectClassDescription] = IObjectClassDescription
_IIDMap[IID_IFeatureClassDescription] = IFeatureClassDescription
_IIDMap[IID_INetworkClassDescription] = INetworkClassDescription
_IIDMap[IID_IXmlPropertySet] = IXmlPropertySet
_IIDMap[IID_IXmlPropertySet2] = IXmlPropertySet2
_IIDMap[IID_IMetadataSynchronizer] = IMetadataSynchronizer
_IIDMap[IID_IMetadataSynchronizerManager] = IMetadataSynchronizerManager
_IIDMap[IID_IFieldInfo2] = IFieldInfo2
_IIDMap[IID_IFieldInfo3] = IFieldInfo3
_IIDMap[IID_IRasterFieldInfo] = IRasterFieldInfo
_IIDMap[IID_ITopologyErrorFeature] = ITopologyErrorFeature
_IIDMap[IID_IEnumTopologyErrorFeature] = IEnumTopologyErrorFeature
_IIDMap[IID_IErrorFeatureContainer] = IErrorFeatureContainer
_IIDMap[IID_ITopologyRuleContainer] = ITopologyRuleContainer
_IIDMap[IID_ITopologyClassEvents] = ITopologyClassEvents
_IIDMap[IID_ICancelOperation] = ICancelOperation
_IIDMap[IID_IClassEx] = IClassEx
_IIDMap[IID_IAttachment] = IAttachment
_IIDMap[IID_IAttachment2] = IAttachment2
_IIDMap[IID_IEnumAttachment] = IEnumAttachment
_IIDMap[IID_IAttachmentManager] = IAttachmentManager
_IIDMap[IID_IAttachmentManager2] = IAttachmentManager2
_IIDMap[IID_IAttachmentInfoArray] = IAttachmentInfoArray
_IIDMap[IID_IAttachmentDataArray] = IAttachmentDataArray
_IIDMap[IID_ITableAttachments] = ITableAttachments
_IIDMap[IID_IFIDSetOperator] = IFIDSetOperator
_IIDMap[IID_IGeometryResultOptions] = IGeometryResultOptions
_IIDMap[IID_IGUIDGenerator] = IGUIDGenerator
_IIDMap[IID_ICompressionInfo] = ICompressionInfo
_IIDMap[IID_IRecordArray] = IRecordArray
_IIDMap[IID_IAttachmentInfo2] = IAttachmentInfo2
_IIDMap[IID_IThumbnailInfo] = IThumbnailInfo
_IIDMap[IID_IDocumentationInfo] = IDocumentationInfo
_IIDMap[IID_IItemInfo] = IItemInfo
_IIDMap[IID_IItemInfo2] = IItemInfo2
_IIDMap[IID_IItemInfos] = IItemInfos
_IIDMap[IID_IExternalDeserializerGdb] = IExternalDeserializerGdb
_IIDMap[IID_ISqlKeywordDictionary] = ISqlKeywordDictionary
_IIDMap[IID_ISqlInvalidCharacterDictionary] = ISqlInvalidCharacterDictionary
_IIDMap[IID_IFieldError] = IFieldError
_IIDMap[IID_IEnumFieldError] = IEnumFieldError
_IIDMap[IID_IGeoDatabaseErrorRecords] = IGeoDatabaseErrorRecords
_IIDMap[IID_IFeatureProgress] = IFeatureProgress
_IIDMap[IID_IRecordNumberSet] = IRecordNumberSet
_IIDMap[IID_IReplicaDescriptionExtension] = IReplicaDescriptionExtension
_IIDMap[IID_IReplicaLog] = IReplicaLog
_IIDMap[IID_IEnumReplicaLog] = IEnumReplicaLog
_IIDMap[IID_IReplicaDatasetEdit] = IReplicaDatasetEdit
_IIDMap[IID_IReplicaDataset2] = IReplicaDataset2
_IIDMap[IID_IXMLReplicaDescription] = IXMLReplicaDescription
_IIDMap[IID_IReplicaDescriptionExtensionManager] = IReplicaDescriptionExtensionManager
_IIDMap[IID_IGPReplicaOptions] = IGPReplicaOptions
_IIDMap[IID_IGPReplicaOptions2] = IGPReplicaOptions2
_IIDMap[IID_IGPReplicaDataset2] = IGPReplicaDataset2
_IIDMap[IID_IRouteLocatorName] = IRouteLocatorName
_IIDMap[IID_IRouteEventProperties] = IRouteEventProperties
_IIDMap[IID_IRouteEventProperties2] = IRouteEventProperties2
_IIDMap[IID_IRouteEventSourceName] = IRouteEventSourceName
_IIDMap[IID_IXYEventSourceName] = IXYEventSourceName
_IIDMap[IID_IGPMessage2] = IGPMessage2
_IIDMap[IID_IGPName] = IGPName
_IIDMap[IID_IEnumGPName] = IEnumGPName
_IIDMap[IID_IGPToolTip] = IGPToolTip
_IIDMap[IID_IRasterColormap] = IRasterColormap
_IIDMap[IID_IRasterLODInfos] = IRasterLODInfos
_IIDMap[IID_IRasterLODInfos2] = IRasterLODInfos2
_IIDMap[IID_IRasterDatasetEdit] = IRasterDatasetEdit
_IIDMap[IID_IRasterDef2] = IRasterDef2
_IIDMap[IID_IRasterStorageDef2] = IRasterStorageDef2
_IIDMap[IID_IRasterStorageDef3] = IRasterStorageDef3
_IIDMap[IID_IRasterCatalogName] = IRasterCatalogName
_IIDMap[IID_IRasterCatalogHelper] = IRasterCatalogHelper
_IIDMap[IID_IRasterCatalogHelper2] = IRasterCatalogHelper2
_IIDMap[IID_IMosaicDatasetName] = IMosaicDatasetName
_IIDMap[IID_IMosaicDatasetName2] = IMosaicDatasetName2
_IIDMap[IID_IRasterDatasetInfo] = IRasterDatasetInfo
_IIDMap[IID_IDEBrowseOptions] = IDEBrowseOptions
_IIDMap[IID_IDataElements] = IDataElements
_IIDMap[IID_IEnumDataElement] = IEnumDataElement
_IIDMap[IID_IDataElementInfo] = IDataElementInfo
_IIDMap[IID_IDataElementHelper] = IDataElementHelper
_IIDMap[IID_IDEGeoDataset] = IDEGeoDataset
_IIDMap[IID_IDEWorkspace] = IDEWorkspace
_IIDMap[IID_IDEWorkspace2] = IDEWorkspace2
_IIDMap[IID_IDEWorkspace3] = IDEWorkspace3
_IIDMap[IID_IWorkspaceDefinition] = IWorkspaceDefinition
_IIDMap[IID_IDEDataset2] = IDEDataset2
_IIDMap[IID_IDETable] = IDETable
_IIDMap[IID_IDEGdbTable] = IDEGdbTable
_IIDMap[IID_IDEGdbTable2] = IDEGdbTable2
_IIDMap[IID_IDEEditorTracking] = IDEEditorTracking
_IIDMap[IID_IDEFeatureClass] = IDEFeatureClass
_IIDMap[IID_IDEGdbFeatureClass] = IDEGdbFeatureClass
_IIDMap[IID_IDERasterCatalog] = IDERasterCatalog
_IIDMap[IID_IGPTopologyMembership] = IGPTopologyMembership
_IIDMap[IID_IGPGeometricNetworkMembership] = IGPGeometricNetworkMembership
_IIDMap[IID_IDERelationshipClassEx] = IDERelationshipClassEx
_IIDMap[IID_IDERelationshipClassEx2] = IDERelationshipClassEx2
_IIDMap[IID_IGPRelationshipClassKey] = IGPRelationshipClassKey
_IIDMap[IID_IDataElementType] = IDataElementType
_IIDMap[IID_IGxFilterInfo] = IGxFilterInfo
_IIDMap[IID_IDEGeometricNetwork] = IDEGeometricNetwork
_IIDMap[IID_IDEGeometricNetwork2] = IDEGeometricNetwork2
_IIDMap[IID_IDETopology] = IDETopology
_IIDMap[IID_IGPVersionInfo] = IGPVersionInfo
_IIDMap[IID_IGPVersionInfos] = IGPVersionInfos
_IIDMap[IID_IGPDomain2] = IGPDomain2
_IIDMap[IID_IGPRangeDomain2] = IGPRangeDomain2
_IIDMap[IID_IGPCodedValueDomain2] = IGPCodedValueDomain2
_IIDMap[IID_IGPHistoricalMarker] = IGPHistoricalMarker
_IIDMap[IID_IDEServerObject] = IDEServerObject
_IIDMap[IID_IDEServerConnection] = IDEServerConnection
_IIDMap[IID_IResultPortionInfo] = IResultPortionInfo
_IIDMap[IID_IResultPortion] = IResultPortion
_IIDMap[IID_IGPMessageManager] = IGPMessageManager
_IIDMap[IID_IDERasterDataset] = IDERasterDataset
_IIDMap[IID_IDERasterDatasetEx] = IDERasterDatasetEx
_IIDMap[IID_IDERasterBand] = IDERasterBand
_IIDMap[IID_IGPSystemToolboxLocation] = IGPSystemToolboxLocation
_IIDMap[IID_IDEGdbUtilities] = IDEGdbUtilities
_IIDMap[IID_IDEGdbUtilities2] = IDEGdbUtilities2
_IIDMap[IID_IGPWorkspaceExtension] = IGPWorkspaceExtension
_IIDMap[IID_IGPDatasetExtension] = IGPDatasetExtension
_IIDMap[IID_IGPSubtype] = IGPSubtype
_IIDMap[IID_IWorkspaceDataElements] = IWorkspaceDataElements
_IIDMap[IID_IWorkspaceDataElements2] = IWorkspaceDataElements2
_IIDMap[IID_IOleDBConnectionInfo] = IOleDBConnectionInfo
_IIDMap[IID_ITin] = ITin
_IIDMap[IID_ITinElement] = ITinElement
_IIDMap[IID_ITinFeatureSeed] = ITinFeatureSeed
_IIDMap[IID_ITinFilter] = ITinFilter
_IIDMap[IID_ITinDynamicFilter] = ITinDynamicFilter
_IIDMap[IID_ITinValueFilter] = ITinValueFilter
_IIDMap[IID_ITinValueFilter2] = ITinValueFilter2
_IIDMap[IID_ITinTriangleFilter] = ITinTriangleFilter
_IIDMap[IID_ITinEdgeTypeFilter] = ITinEdgeTypeFilter
_IIDMap[IID_ITinNodeSourceFilter] = ITinNodeSourceFilter
_IIDMap[IID_IEnumTinElement] = IEnumTinElement
_IIDMap[IID_ITinAdvanced3] = ITinAdvanced3
_IIDMap[IID_ITinNodeInfo] = ITinNodeInfo
_IIDMap[IID_ITinEditErrorLog] = ITinEditErrorLog
_IIDMap[IID_ITinSelection] = ITinSelection
_IIDMap[IID_ITinWorkspace] = ITinWorkspace
_IIDMap[IID_ITinImporter] = ITinImporter
_IIDMap[IID_ITinClock] = ITinClock
_IIDMap[IID_ITinEdgeTypeFilter2] = ITinEdgeTypeFilter2
_IIDMap[IID_IXYEvent2FieldsProperties] = IXYEvent2FieldsProperties
_IIDMap[IID_INetworkElement] = INetworkElement
_IIDMap[IID_INetworkScriptEvaluatorFunctions] = INetworkScriptEvaluatorFunctions
_IIDMap[IID_INetworkAttribute] = INetworkAttribute
_IIDMap[IID_IShields] = IShields
_IIDMap[IID_INetworkSourceDirections] = INetworkSourceDirections
_IIDMap[IID_INetworkSource] = INetworkSource
_IIDMap[IID_INetworkDataset] = INetworkDataset
_IIDMap[IID_INetworkDirections] = INetworkDirections
_IIDMap[IID_IDENetworkDataset] = IDENetworkDataset
_IIDMap[IID_IEnumNetworkElement] = IEnumNetworkElement
_IIDMap[IID_INetworkDirections2] = INetworkDirections2
_IIDMap[IID_INetworkSourceDirections2] = INetworkSourceDirections2
_IIDMap[IID_ITrafficData] = ITrafficData
_IIDMap[IID_ISignposts] = ISignposts
_IIDMap[IID_IEnumHierarchyRange] = IEnumHierarchyRange
_IIDMap[IID_IGPNetworkDatasetMembership] = IGPNetworkDatasetMembership
_IIDMap[IID_IDENetworkDataset2] = IDENetworkDataset2
_IIDMap[IID_INetworkAttributeParameter] = INetworkAttributeParameter
_IIDMap[IID_INetworkAttributeParameter2] = INetworkAttributeParameter2
_IIDMap[IID_INetworkAttribute2] = INetworkAttribute2
_IIDMap[IID_INetworkAttribute3] = INetworkAttribute3
_IIDMap[IID_INetworkDataset2] = INetworkDataset2
_IIDMap[IID_INetworkForwardStarSetup] = INetworkForwardStarSetup
_IIDMap[IID_INetworkElement64] = INetworkElement64
_IIDMap[IID_ITrafficData2] = ITrafficData2
_IIDMap[IID_IHistoricalTrafficData] = IHistoricalTrafficData
_IIDMap[IID_IHistoricalTrafficData2] = IHistoricalTrafficData2
_IIDMap[IID_ITrafficFeedDirectory] = ITrafficFeedDirectory
_IIDMap[IID_ITrafficFeedGPService] = ITrafficFeedGPService
_IIDMap[IID_IDynamicTrafficData] = IDynamicTrafficData
_IIDMap[IID_IHistoricalTravelTimeEvaluator] = IHistoricalTravelTimeEvaluator
_IIDMap[IID_ITimeAwareEvaluator] = ITimeAwareEvaluator
_IIDMap[IID_INetworkEvaluator] = INetworkEvaluator
_IIDMap[IID_IEdgeFeatureSource] = IEdgeFeatureSource
_IIDMap[IID_IJunctionFeatureSource] = IJunctionFeatureSource
_IIDMap[IID_ISystemJunctionSource] = ISystemJunctionSource
_IIDMap[IID_IDirectionsAttributeMapping] = IDirectionsAttributeMapping
_IIDMap[IID_INetworkSourceDirections3] = INetworkSourceDirections3
_IIDMap[IID_IDirectionsLandmarkSource] = IDirectionsLandmarkSource
_IIDMap[IID_IDirectionsFieldMapping] = IDirectionsFieldMapping
_IIDMap[IID_IStreetNameFields] = IStreetNameFields
_IIDMap[IID_IStreetNameFields2] = IStreetNameFields2
_IIDMap[IID_IEvaluatedNetworkAttribute] = IEvaluatedNetworkAttribute
_IIDMap[IID_IEvaluatedNetworkAttribute2] = IEvaluatedNetworkAttribute2
_IIDMap[IID_INetworkEvaluator2] = INetworkEvaluator2
_IIDMap[IID_INetworkConstantEvaluator] = INetworkConstantEvaluator
_IIDMap[IID_INetworkFieldEvaluator] = INetworkFieldEvaluator
_IIDMap[IID_INetworkFieldEvaluator2] = INetworkFieldEvaluator2
_IIDMap[IID_INetworkScriptEvaluator] = INetworkScriptEvaluator
_IIDMap[IID_INetworkScriptEvaluator2] = INetworkScriptEvaluator2
_IIDMap[IID_INetworkGlobalTurnDelayCategory] = INetworkGlobalTurnDelayCategory
_IIDMap[IID_INetworkGlobalTurnDelayEvaluator] = INetworkGlobalTurnDelayEvaluator
_IIDMap[IID_INetworkFunctionEvaluator] = INetworkFunctionEvaluator
_IIDMap[IID_INetworkBuild] = INetworkBuild
_IIDMap[IID_ITrafficDataManager] = ITrafficDataManager
_IIDMap[IID_IRepresentationRules] = IRepresentationRules
_IIDMap[IID_IRepresentationClassName] = IRepresentationClassName
_IIDMap[IID_IOverride] = IOverride
_IIDMap[IID_IDERepresentationClass] = IDERepresentationClass
_IIDMap[IID_IPlugInCursorHelper] = IPlugInCursorHelper
_IIDMap[IID_IPlugInDatasetHelper] = IPlugInDatasetHelper
_IIDMap[IID_IPlugInWorkspaceHelper] = IPlugInWorkspaceHelper
_IIDMap[IID_IPlugInDatasetInfo] = IPlugInDatasetInfo
_IIDMap[IID_IPlugInLicense] = IPlugInLicense
_IIDMap[IID_IPlugInWorkspaceFactoryHelper] = IPlugInWorkspaceFactoryHelper
_IIDMap[IID_IPlugInWorkspaceFactoryHelper2] = IPlugInWorkspaceFactoryHelper2
_IIDMap[IID_IPlugInCreateWorkspace] = IPlugInCreateWorkspace
_IIDMap[IID_IPlugInWorkspaceHelper2] = IPlugInWorkspaceHelper2
_IIDMap[IID_IPlugInMetadataPath] = IPlugInMetadataPath
_IIDMap[IID_IPlugInMetadataPath2] = IPlugInMetadataPath2
_IIDMap[IID_IPlugInMetadata] = IPlugInMetadata
_IIDMap[IID_IPlugInMetadata2] = IPlugInMetadata2
_IIDMap[IID_IPlugInFastRowCount] = IPlugInFastRowCount
_IIDMap[IID_IPlugInRowCount] = IPlugInRowCount
_IIDMap[IID_IPlugInFileSystemDataset] = IPlugInFileSystemDataset
_IIDMap[IID_IPlugInIndexInfo] = IPlugInIndexInfo
_IIDMap[IID_IPlugInIndexManager] = IPlugInIndexManager
_IIDMap[IID_IPlugInDatasetHelper2] = IPlugInDatasetHelper2
_IIDMap[IID_IPlugInFastQueryValues] = IPlugInFastQueryValues
_IIDMap[IID_IPlugInGxIntegration] = IPlugInGxIntegration
_IIDMap[IID_IPlugInCreateDataset] = IPlugInCreateDataset
_IIDMap[IID_IPlugInDatasetLoader] = IPlugInDatasetLoader
_IIDMap[IID_IPlugInDatasetLoad] = IPlugInDatasetLoad
_IIDMap[IID_IRelationshipChanges] = IRelationshipChanges
_IIDMap[IID_IThumbnailInfoImpl] = IThumbnailInfoImpl
_IIDMap[IID_IItemInfoImpl] = IItemInfoImpl
_IIDMap[IID_IWorkspace] = IWorkspace
_IIDMap[IID_IEnumWorkspace] = IEnumWorkspace
_IIDMap[IID_IEnumWorkspaceEx] = IEnumWorkspaceEx
_IIDMap[IID_IEnterpriseWorkspaceFactory] = IEnterpriseWorkspaceFactory
_IIDMap[IID_IWorkspaceHelper] = IWorkspaceHelper
_IIDMap[IID_IWorkspaceExtensionControl] = IWorkspaceExtensionControl
_IIDMap[IID_IWorkspaceExtension2] = IWorkspaceExtension2
_IIDMap[IID_IWorkspaceStatus] = IWorkspaceStatus
_IIDMap[IID_IEnumWorkspaceStatus] = IEnumWorkspaceStatus
_IIDMap[IID_IWorkspaceFactoryStatus] = IWorkspaceFactoryStatus
_IIDMap[IID_IScratchWorkspaceFactory] = IScratchWorkspaceFactory
_IIDMap[IID_IScratchWorkspaceFactory2] = IScratchWorkspaceFactory2
_IIDMap[IID_IWorkspaceFactorySchemaCache] = IWorkspaceFactorySchemaCache
_IIDMap[IID_IFieldChecker] = IFieldChecker
_IIDMap[IID_IPlugInFileOperations] = IPlugInFileOperations
_IIDMap[IID_IPlugInFileOperationsClass] = IPlugInFileOperationsClass
_IIDMap[IID_IWorkspaceFactory] = IWorkspaceFactory
_IIDMap[IID_IWorkspaceName] = IWorkspaceName
_IIDMap[IID_IRemoteDatabaseWorkspaceFactory] = IRemoteDatabaseWorkspaceFactory
_IIDMap[IID_IRemoteDatabaseWorkspaceFactory2] = IRemoteDatabaseWorkspaceFactory2
_IIDMap[IID_IWorkspaceName2] = IWorkspaceName2
_IIDMap[IID_IWorkspaceFactory2] = IWorkspaceFactory2
_IIDMap[IID_ILocalDatabaseCompact] = ILocalDatabaseCompact
_IIDMap[IID_IReplicaDescription] = IReplicaDescription
_IIDMap[IID_IReplica] = IReplica
_IIDMap[IID_IEnumReplica] = IEnumReplica
_IIDMap[IID_IWorkspaceReplicas] = IWorkspaceReplicas
_IIDMap[IID_IWorkspaceReplicasAdmin] = IWorkspaceReplicasAdmin
_IIDMap[IID_IWorkspaceReplicasAdmin2] = IWorkspaceReplicasAdmin2
_IIDMap[IID_IWorkspaceReplicasAdmin3] = IWorkspaceReplicasAdmin3
_IIDMap[IID_IGPReplicaDescription] = IGPReplicaDescription
_IIDMap[IID_IGPReplica] = IGPReplica
_IIDMap[IID_IWorkspaceReplicas2] = IWorkspaceReplicas2
_IIDMap[IID_IReplica2] = IReplica2
_IIDMap[IID_IReplica3] = IReplica3
_IIDMap[IID_IReplicaEdit] = IReplicaEdit
_IIDMap[IID_IReplicaEdit2] = IReplicaEdit2
_IIDMap[IID_IWorkspaceReplicaEvents] = IWorkspaceReplicaEvents
_IIDMap[IID_IGPReplica2] = IGPReplica2
_IIDMap[IID_IGPReplicas] = IGPReplicas
_IIDMap[IID_ILocatorWorkspaceName] = ILocatorWorkspaceName
_IIDMap[IID_ILocatorName] = ILocatorName
_IIDMap[IID_IEnumLocatorName] = IEnumLocatorName
_IIDMap[IID_IWorkspaceDefinition2] = IWorkspaceDefinition2
_IIDMap[IID_IEnumDataset] = IEnumDataset
_IIDMap[IID_IDataset] = IDataset
_IIDMap[IID_IWorkspaceEvents] = IWorkspaceEvents
_IIDMap[IID_IWorkspaceEvents2] = IWorkspaceEvents2
_IIDMap[IID_IDatasetContainer] = IDatasetContainer
_IIDMap[IID_IRasterDataset] = IRasterDataset
_IIDMap[IID_IRasterWorkspaceEx] = IRasterWorkspaceEx
_IIDMap[IID_IDatasetComponent] = IDatasetComponent
_IIDMap[IID_IDatasetComponent2] = IDatasetComponent2
_IIDMap[IID_IXmlPropertySetEdit] = IXmlPropertySetEdit
_IIDMap[IID_IRasterDataset2] = IRasterDataset2
_IIDMap[IID_IRasterDataset3] = IRasterDataset3
_IIDMap[IID_IRasterCatalogItem] = IRasterCatalogItem
_IIDMap[IID_IRasterWorkspace2] = IRasterWorkspace2
_IIDMap[IID_IRasterWorkspace4] = IRasterWorkspace4
_IIDMap[IID_IRasterValue] = IRasterValue
_IIDMap[IID_IRasterValue2] = IRasterValue2
_IIDMap[IID_ISaveAs] = ISaveAs
_IIDMap[IID_ISaveAs2] = ISaveAs2
_IIDMap[IID_IEnumDatasetName] = IEnumDatasetName
_IIDMap[IID_IDatasetName] = IDatasetName
_IIDMap[IID_IWorkspaceExtension3] = IWorkspaceExtension3
_IIDMap[IID_ITableNameSet] = ITableNameSet
_IIDMap[IID_IDatasetName2] = IDatasetName2
_IIDMap[IID_IFeatureWorkspaceManage] = IFeatureWorkspaceManage
_IIDMap[IID_IFeatureDatasetName] = IFeatureDatasetName
_IIDMap[IID_ISimpleDataConverter] = ISimpleDataConverter
_IIDMap[IID_IFeatureDatasetName2] = IFeatureDatasetName2
_IIDMap[IID_IFeatureClassName] = IFeatureClassName
_IIDMap[IID_ITopologyName] = ITopologyName
_IIDMap[IID_IDatasetContainerName] = IDatasetContainerName
_IIDMap[IID_IDatasetContainer2] = IDatasetContainer2
_IIDMap[IID_IDatasetContainer3] = IDatasetContainer3
_IIDMap[IID_ITopologyClassName] = ITopologyClassName
_IIDMap[IID_IRelationshipClassName] = IRelationshipClassName
_IIDMap[IID_IGeometricNetworkName] = IGeometricNetworkName
_IIDMap[IID_IFeatureWorkspaceManage2] = IFeatureWorkspaceManage2
_IIDMap[IID_IFeatureWorkspaceManage3] = IFeatureWorkspaceManage3
_IIDMap[IID_ICopyHelper] = ICopyHelper
_IIDMap[IID_IRelationshipClassInfo] = IRelationshipClassInfo
_IIDMap[IID_IEnumRelationshipClassInfo] = IEnumRelationshipClassInfo
_IIDMap[IID_IReplicaDescription2] = IReplicaDescription2
_IIDMap[IID_IReplicaDescription3] = IReplicaDescription3
_IIDMap[IID_IRasterDatasetName] = IRasterDatasetName
_IIDMap[IID_IRasterBandName] = IRasterBandName
_IIDMap[IID_IFeatureDataConverter] = IFeatureDataConverter
_IIDMap[IID_INetworkDatasetName] = INetworkDatasetName
_IIDMap[IID_IPlugInNetworkDatasetContainer] = IPlugInNetworkDatasetContainer
_IIDMap[IID_IVersionedWorkspace] = IVersionedWorkspace
_IIDMap[IID_IEnumVersionInfo] = IEnumVersionInfo
_IIDMap[IID_IVersionInfo] = IVersionInfo
_IIDMap[IID_IVersion] = IVersion
_IIDMap[IID_IVersionedObject] = IVersionedObject
_IIDMap[IID_IVersion2] = IVersion2
_IIDMap[IID_IVersionInfo2] = IVersionInfo2
_IIDMap[IID_IEnumVersionInfo2] = IEnumVersionInfo2
_IIDMap[IID_IVersion3] = IVersion3
_IIDMap[IID_IVersionedWorkspace2] = IVersionedWorkspace2
_IIDMap[IID_IVersionedWorkspace3] = IVersionedWorkspace3
_IIDMap[IID_IVersionedWorkspace4] = IVersionedWorkspace4
_IIDMap[IID_IVersionedObject2] = IVersionedObject2
_IIDMap[IID_IVersionedObject3] = IVersionedObject3
_IIDMap[IID_IDataChangesEx] = IDataChangesEx
_IIDMap[IID_IWorkspaceEdit2] = IWorkspaceEdit2
_IIDMap[IID_IDifferenceCursor] = IDifferenceCursor
_IIDMap[IID_IRow] = IRow
_IIDMap[IID_ICursor] = ICursor
_IIDMap[IID_IDifferenceCursorEx] = IDifferenceCursorEx
_IIDMap[IID_IRelClassEnumRowPairs] = IRelClassEnumRowPairs
_IIDMap[IID_IQueryDef] = IQueryDef
_IIDMap[IID_ITableWrite] = ITableWrite
_IIDMap[IID_IQueryDef2] = IQueryDef2
_IIDMap[IID_IQueryName] = IQueryName
_IIDMap[IID_IQueryName2] = IQueryName2
_IIDMap[IID_IAttributeRule] = IAttributeRule
_IIDMap[IID_ITableUtil] = ITableUtil
_IIDMap[IID_ITableWrite2] = ITableWrite2
_IIDMap[IID_IObjectClassValidation] = IObjectClassValidation
_IIDMap[IID_IRandomAccessCursor] = IRandomAccessCursor
_IIDMap[IID_IRandomAccessTable] = IRandomAccessTable
_IIDMap[IID_IRowCompare] = IRowCompare
_IIDMap[IID_IDataStatistics] = IDataStatistics
_IIDMap[IID_IEnumEventError] = IEnumEventError
_IIDMap[IID_IEventSourceErrors] = IEventSourceErrors
_IIDMap[IID_INetworkEvaluatorSetup] = INetworkEvaluatorSetup
_IIDMap[IID_ITable] = ITable
_IIDMap[IID_ISelectionSet] = ISelectionSet
_IIDMap[IID_IConflictClass] = IConflictClass
_IIDMap[IID_IEnumConflictClass] = IEnumConflictClass
_IIDMap[IID_IVersionEdit] = IVersionEdit
_IIDMap[IID_IVersionEdit2] = IVersionEdit2
_IIDMap[IID_IVersionEdit3] = IVersionEdit3
_IIDMap[IID_ISqlWorkspace] = ISqlWorkspace
_IIDMap[IID_IEnumTable] = IEnumTable
_IIDMap[IID_ITableSort] = ITableSort
_IIDMap[IID_IArchivableClass] = IArchivableClass
_IIDMap[IID_IRelQueryTableInfo] = IRelQueryTableInfo
_IIDMap[IID_ICollectionTableVersionChanges] = ICollectionTableVersionChanges
_IIDMap[IID_IEnumTableVersionChanges] = IEnumTableVersionChanges
_IIDMap[IID_IRelQueryTableManage] = IRelQueryTableManage
_IIDMap[IID_IValidation] = IValidation
_IIDMap[IID_IValidation2] = IValidation2
_IIDMap[IID_IRelQueryTableName] = IRelQueryTableName
_IIDMap[IID_IRelQueryTableName2] = IRelQueryTableName2
_IIDMap[IID_ISelectionSet2] = ISelectionSet2
_IIDMap[IID_IRelQueryTableSelectionSet] = IRelQueryTableSelectionSet
_IIDMap[IID_IGeometricNetworkErrorDetection] = IGeometricNetworkErrorDetection
_IIDMap[IID_IVersionedTable] = IVersionedTable
_IIDMap[IID_IVersionEdit4] = IVersionEdit4
_IIDMap[IID_IRecordSetInit] = IRecordSetInit
_IIDMap[IID_IRecordSet] = IRecordSet
_IIDMap[IID_IRecordSet2] = IRecordSet2
_IIDMap[IID_IExternalSerializerGdb] = IExternalSerializerGdb
_IIDMap[IID_IJSONConverterGdb] = IJSONConverterGdb
_IIDMap[IID_IDataConvertProcess] = IDataConvertProcess
_IIDMap[IID_ISimpleDataConverter2] = ISimpleDataConverter2
_IIDMap[IID_IReplicaFilterDescriptionEdit] = IReplicaFilterDescriptionEdit
_IIDMap[IID_IReplicaFilterDescription] = IReplicaFilterDescription
_IIDMap[IID_IReplicaFilterDescription2] = IReplicaFilterDescription2
_IIDMap[IID_IWorkspaceReplicaSyncEvents] = IWorkspaceReplicaSyncEvents
_IIDMap[IID_IRasterDatasetEdit2] = IRasterDatasetEdit2
_IIDMap[IID_IRasterDatasetEdit3] = IRasterDatasetEdit3
_IIDMap[IID_IFeatureDataConverter2] = IFeatureDataConverter2
_IIDMap[IID_IXYEventSource] = IXYEventSource
_IIDMap[IID_IExternalSerializerGdb2] = IExternalSerializerGdb2
_IIDMap[IID_IEnumNameMapping] = IEnumNameMapping
_IIDMap[IID_INameMapping] = INameMapping
_IIDMap[IID_INameMapping2] = INameMapping2
_IIDMap[IID_IReplicaDescription4] = IReplicaDescription4
_IIDMap[IID_IExtractionUtilities] = IExtractionUtilities
_IIDMap[IID_IGeoDBDataTransfer] = IGeoDBDataTransfer
_IIDMap[IID_IGeoDBDataTransfer2] = IGeoDBDataTransfer2
_IIDMap[IID_IFeatureWorkspace] = IFeatureWorkspace
_IIDMap[IID_IObjectClass] = IObjectClass
_IIDMap[IID_IObject] = IObject
_IIDMap[IID_IFeature] = IFeature
_IIDMap[IID_IFeatureCursor] = IFeatureCursor
_IIDMap[IID_IFeatureClassWrite] = IFeatureClassWrite
_IIDMap[IID_IFeatureEdit] = IFeatureEdit
_IIDMap[IID_IFeatureElement] = IFeatureElement
_IIDMap[IID_IFeatureConnect] = IFeatureConnect
_IIDMap[IID_IEnumFeature] = IEnumFeature
_IIDMap[IID_IEnumObjectClass] = IEnumObjectClass
_IIDMap[IID_ITransformGroup] = ITransformGroup
_IIDMap[IID_IObjectClassContainer] = IObjectClassContainer
_IIDMap[IID_IObjectClassEvents] = IObjectClassEvents
_IIDMap[IID_IFeatureClassUtil] = IFeatureClassUtil
_IIDMap[IID_IPersistCustomFeaturesExtension] = IPersistCustomFeaturesExtension
_IIDMap[IID_IFeatureEdit2] = IFeatureEdit2
_IIDMap[IID_IFeatureElementEdit] = IFeatureElementEdit
_IIDMap[IID_IEnumObject] = IEnumObject
_IIDMap[IID_IFeatureClass] = IFeatureClass
_IIDMap[IID_IFeatureDataset] = IFeatureDataset
_IIDMap[IID_IFeatureWorkspaceAnno] = IFeatureWorkspaceAnno
_IIDMap[IID_IEnumFeatureClass] = IEnumFeatureClass
_IIDMap[IID_IFeatureClassContainer] = IFeatureClassContainer
_IIDMap[IID_IFeatureDatasetExtension] = IFeatureDatasetExtension
_IIDMap[IID_IFeatureDatasetExtension2] = IFeatureDatasetExtension2
_IIDMap[IID_IFeatureDatasetExtensionContainer] = IFeatureDatasetExtensionContainer
_IIDMap[IID_ITopologyProperties] = ITopologyProperties
_IIDMap[IID_IFeatureConstruction] = IFeatureConstruction
_IIDMap[IID_ISurface] = ISurface
_IIDMap[IID_ITinEdit2] = ITinEdit2
_IIDMap[IID_IGeoDatabaseBridge] = IGeoDatabaseBridge
_IIDMap[IID_IEnumRelationshipClass] = IEnumRelationshipClass
_IIDMap[IID_IRelationshipClass] = IRelationshipClass
_IIDMap[IID_IRelationship] = IRelationship
_IIDMap[IID_IEnumRelationship] = IEnumRelationship
_IIDMap[IID_IRelationshipClassContainer] = IRelationshipClassContainer
_IIDMap[IID_IRelQueryTable] = IRelQueryTable
_IIDMap[IID_IRelQueryTableFactory] = IRelQueryTableFactory
_IIDMap[IID_IRelationshipClassEvents] = IRelationshipClassEvents
_IIDMap[IID_IRelationshipClass2] = IRelationshipClass2
_IIDMap[IID_IRelationshipClass3] = IRelationshipClass3
_IIDMap[IID_IMemoryRelationshipClassFactory] = IMemoryRelationshipClassFactory
_IIDMap[IID_IRelatedObjectEvents] = IRelatedObjectEvents
_IIDMap[IID_IRelatedObjectClassEvents] = IRelatedObjectClassEvents
_IIDMap[IID_IRelatedObjectClassEvents2] = IRelatedObjectClassEvents2
_IIDMap[IID_IConfirmSendRelatedObjectEvents] = IConfirmSendRelatedObjectEvents
_IIDMap[IID_IFeatureClassEdit] = IFeatureClassEdit
_IIDMap[IID_ISynchronizationHelper] = ISynchronizationHelper
_IIDMap[IID_IEnumAttributedRelationship] = IEnumAttributedRelationship
_IIDMap[IID_ITopologyWorkspace] = ITopologyWorkspace
_IIDMap[IID_ITopology] = ITopology
_IIDMap[IID_ITopologyContainer] = ITopologyContainer
_IIDMap[IID_ITopology2] = ITopology2
_IIDMap[IID_ITopologyContainer2] = ITopologyContainer2
_IIDMap[IID_ITopologyClass] = ITopologyClass
_IIDMap[IID_ITopologyGraph] = ITopologyGraph
_IIDMap[IID_ITopologyGraph2] = ITopologyGraph2
_IIDMap[IID_ITopologyGraph3] = ITopologyGraph3
_IIDMap[IID_ITopologyGraph4] = ITopologyGraph4
_IIDMap[IID_IEnumTopologyNode] = IEnumTopologyNode
_IIDMap[IID_ITopologyNode] = ITopologyNode
_IIDMap[IID_ITopologyEdge] = ITopologyEdge
_IIDMap[IID_IEnumNodeEdge] = IEnumNodeEdge
_IIDMap[IID_IEnumTopologyEdge] = IEnumTopologyEdge
_IIDMap[IID_IGPValue] = IGPValue
_IIDMap[IID_IGPDomain] = IGPDomain
_IIDMap[IID_IGPDataType] = IGPDataType
_IIDMap[IID_IEnumGPValue] = IEnumGPValue
_IIDMap[IID_IGPDataTypeFactory] = IGPDataTypeFactory
_IIDMap[IID_IGPVariable] = IGPVariable
_IIDMap[IID_IGPCodedValueDomain] = IGPCodedValueDomain
_IIDMap[IID_IGPChoiceList] = IGPChoiceList
_IIDMap[IID_INetwork] = INetwork
_IIDMap[IID_IForwardStar] = IForwardStar
_IIDMap[IID_IEnumNetEID] = IEnumNetEID
_IIDMap[IID_INetworkWorkspace] = INetworkWorkspace
_IIDMap[IID_INetworkWorkspace2] = INetworkWorkspace2
_IIDMap[IID_INetElements] = INetElements
_IIDMap[IID_IForwardStarGEN] = IForwardStarGEN
_IIDMap[IID_IUtilityNetworkGEN] = IUtilityNetworkGEN
_IIDMap[IID_IEnumNetEIDBuilderGEN] = IEnumNetEIDBuilderGEN
_IIDMap[IID_IEnumNetEIDBuilder] = IEnumNetEIDBuilder
_IIDMap[IID_IUtilityNetwork] = IUtilityNetwork
_IIDMap[IID_IUtilityNetwork2] = IUtilityNetwork2
_IIDMap[IID_IGraph] = IGraph
_IIDMap[IID_IEdgeFeature] = IEdgeFeature
_IIDMap[IID_ISimpleJunctionFeature] = ISimpleJunctionFeature
_IIDMap[IID_IComplexJunctionFeature] = IComplexJunctionFeature
_IIDMap[IID_IEnumEdgeFeature] = IEnumEdgeFeature
_IIDMap[IID_IJunctionFeature] = IJunctionFeature
_IIDMap[IID_IComplexEdgeFeature] = IComplexEdgeFeature
_IIDMap[IID_IEnumJunctionFeature] = IEnumJunctionFeature
_IIDMap[IID_INetworkFeature] = INetworkFeature
_IIDMap[IID_IGeometricNetwork] = IGeometricNetwork
_IIDMap[IID_IEnumNetworkFeature] = IEnumNetworkFeature
_IIDMap[IID_INetworkCollection] = INetworkCollection
_IIDMap[IID_INetworkCollection2] = INetworkCollection2
_IIDMap[IID_INetworkClass] = INetworkClass
_IIDMap[IID_ILocatorUI] = ILocatorUI
_IIDMap[IID_ILocator] = ILocator
_IIDMap[IID_IEnumLocator] = IEnumLocator
_IIDMap[IID_ILocatorWorkspace] = ILocatorWorkspace
_IIDMap[IID_ILocatorUI2] = ILocatorUI2
_IIDMap[IID_ILocatorWorkspace2] = ILocatorWorkspace2
_IIDMap[IID_ILocatorDataset] = ILocatorDataset
_IIDMap[IID_ITinNode] = ITinNode
_IIDMap[IID_ITinNodeArray] = ITinNodeArray
_IIDMap[IID_IEnumTinNode] = IEnumTinNode
_IIDMap[IID_ITinNodeCollection] = ITinNodeCollection
_IIDMap[IID_ITinEdgeArray] = ITinEdgeArray
_IIDMap[IID_ITinEdge] = ITinEdge
_IIDMap[IID_ITinTriangle] = ITinTriangle
_IIDMap[IID_ITinTriangleArray] = ITinTriangleArray
_IIDMap[IID_ITinNode2] = ITinNode2
_IIDMap[IID_IEnumTinEdge] = IEnumTinEdge
_IIDMap[IID_IEnumTinTriangle] = IEnumTinTriangle
_IIDMap[IID_ITinPolygon] = ITinPolygon
_IIDMap[IID_ITinPolyline] = ITinPolyline
_IIDMap[IID_ITinAdvanced] = ITinAdvanced
_IIDMap[IID_ITinAdvanced2] = ITinAdvanced2
_IIDMap[IID_ITinEdit] = ITinEdit
_IIDMap[IID_ITinSurfaceElement] = ITinSurfaceElement
_IIDMap[IID_ITinSurface] = ITinSurface
_IIDMap[IID_ITinSurface2] = ITinSurface2
_IIDMap[IID_ITinSurface3] = ITinSurface3
_IIDMap[IID_ITinFeatureEdit] = ITinFeatureEdit
_IIDMap[IID_ISurfaceIntersectionEvents] = ISurfaceIntersectionEvents
_IIDMap[IID_IGeoDatabaseBridge2] = IGeoDatabaseBridge2
_IIDMap[IID_INetworkEdge] = INetworkEdge
_IIDMap[IID_INetworkEdge2] = INetworkEdge2
_IIDMap[IID_INetworkTurn] = INetworkTurn
_IIDMap[IID_INetworkJunction] = INetworkJunction
_IIDMap[IID_INetworkJunction2] = INetworkJunction2
_IIDMap[IID_INetworkTurn2] = INetworkTurn2
_IIDMap[IID_INetworkForwardStarAdjacencies] = INetworkForwardStarAdjacencies
_IIDMap[IID_INetworkForwardStar] = INetworkForwardStar
_IIDMap[IID_INetworkQuery] = INetworkQuery
_IIDMap[IID_INetworkQuery2] = INetworkQuery2
_IIDMap[IID_INetworkQuery3] = INetworkQuery3
_IIDMap[IID_INetworkForwardStarEx] = INetworkForwardStarEx
_IIDMap[IID_IRepresentationClass] = IRepresentationClass
_IIDMap[IID_IRepresentation] = IRepresentation
_IIDMap[IID_IRepresentationWorkspaceExtension] = IRepresentationWorkspaceExtension


# CLSIDs
CLSID_WorkspaceHelper = uuid.UUID('da10c1c6-09a3-11d4-9faa-00c04f6bdf0c')
CLSID_WorkspaceProperty = uuid.UUID('2a07e8d8-309f-47f1-b9ae-c546add83a83')
CLSID_WorkspaceEditEvents = uuid.UUID('849fc785-8d9e-11d4-9fd8-00c04f6bdf0c')
CLSID_WorkspaceEditEvents2 = uuid.UUID('796c3852-86c5-414d-a65f-9c790283ef22')
CLSID_Workspace = uuid.UUID('fbf5715b-a05d-11d4-a64c-0008c711c8c1')
CLSID_WorkspaceExtension = uuid.UUID('fbf5715c-a05d-11d4-a64c-0008c711c8c1')
CLSID_WorkspaceFactory = uuid.UUID('fbf5715d-a05d-11d4-a64c-0008c711c8c1')
CLSID_ConfigurationKeyword = uuid.UUID('fbf57161-a05d-11d4-a64c-0008c711c8c1')
CLSID_ConfigurationParameter = uuid.UUID('fbf57162-a05d-11d4-a64c-0008c711c8c1')
CLSID_VersionedWorkspace = uuid.UUID('23a7329a-ab83-11d4-a64c-0008c711c8c1')
CLSID_EnumVersionInfo = uuid.UUID('23a7329f-ab83-11d4-a64c-0008c711c8c1')
CLSID_VersionInfo = uuid.UUID('23a7329c-ab83-11d4-a64c-0008c711c8c1')
CLSID_XMLIndex = uuid.UUID('18ec559b-07be-4f98-8960-206636ba259a')
CLSID_XMLIndexTags = uuid.UUID('78d0f170-0f98-41cf-8768-d7c8887c1935')
CLSID_XMLIndexTag = uuid.UUID('c83ec191-d234-4353-9522-722329d2bcbf')
CLSID_XMLIndexTemplate = uuid.UUID('e44e541b-b0af-45bc-86e8-d7c53451e225')
CLSID_EnumXMLIndexTemplate = uuid.UUID('a11f14ec-e6f1-4504-afa1-5cc6ff912212')
CLSID_HistoricalVersionMarker = uuid.UUID('30965a12-613f-4532-9856-2c641f01512d')
CLSID_EnumHistoricalMarker = uuid.UUID('cd1a42ae-d13c-489d-8dc4-008f9f14e312')
CLSID_ArchiveRegistrationInfo = uuid.UUID('1623b8e8-eb09-4a49-91e0-32a6ed2e0356')
CLSID_TableNameSet = uuid.UUID('54019669-0dc7-4a1b-9583-230185c8ba7e')
CLSID_NetworkWorkspace = uuid.UUID('1f07a0b0-2e14-11d1-b24e-0000f878229e')
CLSID_UtilityNetwork = uuid.UUID('91dd8ab5-e33d-11d4-9fea-00c04f68e627')
CLSID_StreetNetwork = uuid.UUID('91dd8ab6-e33d-11d4-9fea-00c04f68e627')
CLSID_NetElementClass = uuid.UUID('91dd8ab7-e33d-11d4-9fea-00c04f68e627')
CLSID_NetWeight = uuid.UUID('3ebbe031-557d-11d1-b254-0000f878229e')
CLSID_NetWeightAssociation = uuid.UUID('19bdc491-6201-11d1-b255-0000f878229e')
CLSID_EnumNetWeightAssociation = uuid.UUID('e3d2b732-e652-11d4-9feb-00c04f68e627')
CLSID_NetElementDescription = uuid.UUID('b1eb90e2-0cfa-11d1-9cd7-00805f74d243')
CLSID_EnumNetEIDArray = uuid.UUID('4d2236de-1525-11d3-9f4a-00c04f68e627')
CLSID_ForwardStar = uuid.UUID('91dd8ab8-e33d-11d4-9fea-00c04f68e627')
CLSID_RepairConnectivityProgress = uuid.UUID('168d1fb6-fe34-4ad7-a011-541a3fccb92c')
CLSID_GeometryServer = uuid.UUID('167c8c43-d0dd-4dbb-95b6-b01777ab8af6')
CLSID_FeatureConstruction = uuid.UUID('b92b8ad8-9555-4e14-8142-f7d589072354')
CLSID_Topology = uuid.UUID('ab456700-e5b2-482b-b935-2911bcd94567')
CLSID_TopologyGraph = uuid.UUID('201d6a15-781c-4345-b9da-e679dec0b692')
CLSID_TopologyGraphEventsHelper = uuid.UUID('72d5f011-d7cc-4551-88bf-80bb7b7acbda')
CLSID_TopologyEdge = uuid.UUID('c8d4a1e1-abc1-4269-becb-6a3ea04fe444')
CLSID_TopologyNode = uuid.UUID('aa177a93-8e87-4392-b14b-571908bd3688')
CLSID_TopologyWorkspaceExtension = uuid.UUID('8c690139-67be-4b5f-86d7-b73474db26d0')
CLSID_TopologyName = uuid.UUID('9fca50ec-c413-440c-b453-49a591440096')
CLSID_TopologyRule = uuid.UUID('8ad43889-f2a4-43b2-83dc-6d1d38ddbcc8')
CLSID_TopologyErrorFeature = uuid.UUID('ac7dbf37-7523-4186-8d40-b20fa197af19')
CLSID_CoverageAnnotationFeature = uuid.UUID('9c285de9-6a15-11d3-9f58-00c04f6bddd9')
CLSID_Field = uuid.UUID('f94f7534-9fdf-11d0-bec7-00805f7c4268')
CLSID_Fields = uuid.UUID('f94f7535-9fdf-11d0-bec7-00805f7c4268')
CLSID_Index = uuid.UUID('826e2701-4da6-11d1-8824-0000f877762d')
CLSID_Indexes = uuid.UUID('03859813-4da5-11d1-8824-0000f877762d')
CLSID_EnumFeatureGeometry = uuid.UUID('39466cf4-54be-11d3-9f45-00c04f6bdd7f')
CLSID_GeometryDef = uuid.UUID('439a0d52-3915-11d1-9ca7-0000f8780619')
CLSID_Row = uuid.UUID('f94f7533-9fdf-11d0-bec7-00805f7c4268')
CLSID_Object = uuid.UUID('7a566981-c114-11d2-8a28-006097aff44e')
CLSID_ObjectClassDescription = uuid.UUID('08136232-a72e-11d2-8924-0000f877762d')
CLSID_Feature = uuid.UUID('52353152-891a-11d0-bec6-00805f7c4268')
CLSID_ClassHelper = uuid.UUID('9aaac925-a14e-11d3-9f97-00c04f6bdf0c')
CLSID_FeatureClassDescription = uuid.UUID('08136233-a72e-11d2-8924-0000f877762d')
CLSID_SimpleRelationship = uuid.UUID('a07e9cb2-9a95-11d2-891a-0000f877762d')
CLSID_AttributedRelationship = uuid.UUID('a07e9cb1-9a95-11d2-891a-0000f877762d')
CLSID_SQLCheck = uuid.UUID('7a236d41-ae55-462f-8d50-c1411df68e5f')
CLSID_QueryFilter = uuid.UUID('fdfebd95-ed75-11d0-9a95-080009ec734b')
CLSID_FIDSet = uuid.UUID('d79bdaf0-caa8-11d2-b2be-0000f878229e')
CLSID_SpatialFilter = uuid.UUID('fdfebd96-ed75-11d0-9a95-080009ec734b')
CLSID_FilterDefs = uuid.UUID('3131151a-4b5c-4526-98be-711746b03df8')
CLSID_XMLFilterDef = uuid.UUID('47f975db-77c0-4a8c-b8a0-8e9fe77a9795')
CLSID_TableSort = uuid.UUID('2d0f935d-32f5-11d2-a06f-0000f8775bf9')
CLSID_GeometricNetwork = uuid.UUID('e30eadca-5d47-11d1-ae5f-0000f80372b4')
CLSID_SimpleJunctionFeature = uuid.UUID('cee8d6b8-55fe-11d1-ae55-0000f80372b4')
CLSID_SimpleEdgeFeature = uuid.UUID('e7031c90-55fe-11d1-ae55-0000f80372b4')
CLSID_ComplexEdgeFeature = uuid.UUID('a30e8a2a-c50b-11d1-aea9-0000f80372b4')
CLSID_ComplexJunctionFeature = uuid.UUID('df9d71f4-da32-11d1-aeba-0000f80372b4')
CLSID_Objects = uuid.UUID('6674054c-4ffc-11d1-9aa8-080009ec734b')
CLSID_TableName = uuid.UUID('06783db1-e5ee-11d1-b0a2-0000f8780820')
CLSID_ObjectClassName = uuid.UUID('905cec64-0b2c-11d4-a060-00c04f6bdd84')
CLSID_FeatureDatasetName = uuid.UUID('198846cf-ca42-11d1-aa7c-00c04fa33a15')
CLSID_FeatureClassName = uuid.UUID('198846d0-ca42-11d1-aa7c-00c04fa33a15')
CLSID_TableQueryName = uuid.UUID('81caa5d8-90c5-11d3-9f7b-00c04f6bc886')
CLSID_RelQueryTableName = uuid.UUID('dab3ee10-0f92-455d-8aa2-3d4ade5b2f7d')
CLSID_FeatureQueryName = uuid.UUID('81caa5d9-90c5-11d3-9f7b-00c04f6bc886')
CLSID_QueryTableName = uuid.UUID('793873de-c0bb-48f4-a6bf-f6f83fa3c1bc')
CLSID_RelationshipClassName = uuid.UUID('311c2ee1-da65-11d2-8a54-000000000000')
CLSID_MemoryRelationshipClassName = uuid.UUID('6dba211b-ebdb-11d3-9f84-00c04f6bc886')
CLSID_MemoryRelationshipClassFactory = uuid.UUID('2fc5c57b-eb92-4a61-bbc5-434e388bf3b9')
CLSID_GeometricNetworkName = uuid.UUID('f452b4d2-9a95-11d2-aacf-00c04fa37b82')
CLSID_WorkspaceName = uuid.UUID('5a350011-e371-11d1-aa82-00c04fa33a15')
CLSID_UnknownDatasetName = uuid.UUID('06783db1-e5ee-11d1-b0a2-0000f878082e')
CLSID_AttributeRule = uuid.UUID('54c085d0-84eb-11d2-ab61-000000000000')
CLSID_CodedValueDomain = uuid.UUID('f84c6c1b-47ff-11d2-9933-0000f80372b4')
CLSID_EdgeConnectivityRule = uuid.UUID('f290d9e0-58e5-11d2-ab26-000000000000')
CLSID_JunctionConnectivityRule = uuid.UUID('f290d9e1-58e5-11d2-ab26-000000000000')
CLSID_RangeDomain = uuid.UUID('f84c6c1a-47ff-11d2-9933-0000f80372b4')
CLSID_RelationshipRule = uuid.UUID('f84c6c1e-47ff-11d2-9933-0000f80372b4')
CLSID_ObjectClassValidator = uuid.UUID('f84c6c21-47ff-11d2-9933-0000f80372b4')
CLSID_TransformGroup = uuid.UUID('fcdde1f8-e93c-11d2-9f55-00c04f6bdd84')
CLSID_DataStatistics = uuid.UUID('bf64319c-9062-11d2-ae71-080009ec732a')
CLSID_ObjectClassEvents = uuid.UUID('e53afb0f-e6d4-11d2-9f29-00c04f6bc979')
CLSID_TopologyClassEvents = uuid.UUID('ca92c58e-431f-4c1c-aa44-853ede7fc834')
CLSID_RelationshipClassEvents = uuid.UUID('56d897b7-3b15-4ad8-bd77-b3940ddc28da')
CLSID_ObjectClassSchemaEvents = uuid.UUID('426d599d-6bc9-11d3-a021-00c04f6bdf0e')
CLSID_VersionEvents = uuid.UUID('849fc783-8d9e-11d4-9fd8-00c04f6bdf0c')
CLSID_VersionEvents2 = uuid.UUID('5f1ceb3c-9d61-4a5a-9a87-14cb54bf3cec')
CLSID_FGDCSynchronizationHelper = uuid.UUID('7002c8b6-1d00-11d3-a63b-0008c7d3ae50')
CLSID_MetadataCopyHelper = uuid.UUID('375a6df7-81b0-4278-b83f-d2be99694e56')
CLSID_XmlPropertySet = uuid.UUID('99f50761-c137-11d2-9f83-00c04f8ed211')
CLSID_XmlPropertySetEdit = uuid.UUID('b2676166-2396-11d3-a63e-0008c7d3ae50')
CLSID_MetadataSynchronizer = uuid.UUID('c10124ee-3648-445e-a16b-9d2755fbd690')
CLSID_FGDCSynchronizer = uuid.UUID('1d8f7efd-2b53-4045-bbdb-ab160c05a9f9')
CLSID_RelQueryTableFactory = uuid.UUID('9b4e4d0c-753a-43bb-83fb-ba16f6652e1c')
CLSID_MemoryRelationshipClass = uuid.UUID('224bf65e-d9b1-11d3-a154-0000f8775bf9')
CLSID_RelQueryTable = uuid.UUID('365f6148-1d24-11d3-9f5c-00c04f6bc886')
CLSID_RelQueryCursor = uuid.UUID('365f6149-1d24-11d3-9f5c-00c04f6bc886')
CLSID_RelQueryRow = uuid.UUID('365f614a-1d24-11d3-9f5c-00c04f6bc886')
CLSID_NamesEnumerator = uuid.UUID('27301be1-6800-11d4-8155-00c04f686238')
CLSID_EnumTableVersionChanges = uuid.UUID('74975793-50c8-4420-b2ed-928232b16449')
CLSID_QueryDef = uuid.UUID('fbf57160-a05d-11d4-a64c-0008c711c8c1')
CLSID_FeatureDataset = uuid.UUID('aa4596e4-a39c-11d4-a64c-0008c711c8c1')
CLSID_RowBuffer = uuid.UUID('af10d716-a61b-11d4-a64c-0008c711c8c1')
CLSID_Relationship = uuid.UUID('af10d717-a61b-11d4-a64c-0008c711c8c1')
CLSID_SelectionSet = uuid.UUID('af10d718-a61b-11d4-a64c-0008c711c8c1')
CLSID_RelQueryTableSelectionSet = uuid.UUID('6fc04eaf-f7b8-432f-b87c-c9d9b17e79bf')
CLSID_Cursor = uuid.UUID('af10d719-a61b-11d4-a64c-0008c711c8c1')
CLSID_ObjectClass = uuid.UUID('af10d71a-a61b-11d4-a64c-0008c711c8c1')
CLSID_FeatureClass = uuid.UUID('af10d71b-a61b-11d4-a64c-0008c711c8c1')
CLSID_Table = uuid.UUID('af10d71c-a61b-11d4-a64c-0008c711c8c1')
CLSID_RelationshipClass = uuid.UUID('af10d71d-a61b-11d4-a64c-0008c711c8c1')
CLSID_AttributedRelationshipClass = uuid.UUID('af10d71e-a61b-11d4-a64c-0008c711c8c1')
CLSID_EnumDatasetType = uuid.UUID('83ac9e2e-46b4-435b-92f9-84fd3d3c2ba8')
CLSID_EnumIDs = uuid.UUID('af10d71f-a61b-11d4-a64c-0008c711c8c1')
CLSID_EnumConflictClass = uuid.UUID('23a7329d-ab83-11d4-a64c-0008c711c8c1')
CLSID_DifferenceCursor = uuid.UUID('23a7329e-ab83-11d4-a64c-0008c711c8c1')
CLSID_FeatureCursor = uuid.UUID('4dd32c19-1720-11d5-a664-0008c711c8c1')
CLSID_GeometryResultOptions = uuid.UUID('9466df6b-ac1f-4fbe-92e3-85e25cb06e2a')
CLSID_RecordSet = uuid.UUID('b517e8c7-6ec0-46e0-80bb-d61ed691c5ce')
CLSID_Record = uuid.UUID('6c2de02a-1b28-4680-b65f-5f2f58bf1ffa')
CLSID_RecordArray = uuid.UUID('e0a5bffb-c720-4562-a61f-43679c04caf3')
CLSID_AttachmentInfo = uuid.UUID('b78722fb-e016-40b7-bc4e-cbaf9c74e7dc')
CLSID_AttachmentData = uuid.UUID('0b8ebbc6-7944-4af8-9914-c2946cedd8eb')
CLSID_AttachmentInfoArray = uuid.UUID('0b85e7b3-5ff9-457a-a3ef-1043e2cc1611')
CLSID_AttachmentDataArray = uuid.UUID('99ad256b-eef2-406c-ae5c-f11f7a3af7f3')
CLSID_Attachment = uuid.UUID('6bb22b36-eef6-4945-83db-0be9d010cf6b')
CLSID_EnumAttachment = uuid.UUID('2501262b-34a1-4362-b40c-bbbc185318d6')
CLSID_AttachmentManager = uuid.UUID('431a70d7-5f78-4574-82e4-c2ce96356d79')
CLSID_EditorTrackingInfo = uuid.UUID('11e0012e-b45d-42d5-89eb-bcf9d1cfcfbe')
CLSID_OwnershipBasedAccessControl = uuid.UUID('4ffa97b6-ed84-4b38-a6e7-d06c3dd6d0b5')
CLSID_JSONDeserializerGdb = uuid.UUID('2f106f25-6bde-45ae-a7c5-9b1820e498c5')
CLSID_JSONSerializerGdb = uuid.UUID('69bfd577-1f8a-44ae-9ef0-fdd580c01a62')
CLSID_JSONConverterGdb = uuid.UUID('90c68873-1a9e-4562-a07f-8e9c6729ab11')
CLSID_ThumbnailInfo = uuid.UUID('90578c48-5d05-4efa-8ad8-783b8464b7a7')
CLSID_DocumentationInfo = uuid.UUID('8bc2e4f6-0264-41bf-b2fe-347c0bbdd361')
CLSID_ItemInfo = uuid.UUID('b75a7b90-51c5-408e-9807-e63ace560448')
CLSID_ItemInfos = uuid.UUID('3eb14159-d61c-436c-8fca-597085fcbc12')
CLSID_FieldChecker = uuid.UUID('84cf806b-3e95-11d2-aae0-00c04fa33c20')
CLSID_EnumFieldError = uuid.UUID('23a73297-ab83-11d4-a64c-0008c711c8c1')
CLSID_FieldError = uuid.UUID('23a73299-ab83-11d4-a64c-0008c711c8c1')
CLSID_SimpleDataConverter = uuid.UUID('4866984b-fafa-11d1-aab1-00c04fa33c20')
CLSID_EnumInvalidObject = uuid.UUID('23a73295-ab83-11d4-a64c-0008c711c8c1')
CLSID_InvalidObjectInfo = uuid.UUID('23a73296-ab83-11d4-a64c-0008c711c8c1')
CLSID_RecordNumberSet = uuid.UUID('f59ccd31-46c6-11d4-a124-00c04f6bdf0e')
CLSID_Replica = uuid.UUID('92008893-9e26-46eb-baf7-fdf8beac848e')
CLSID_ReplicaDataset = uuid.UUID('27036541-b2e8-4862-8cea-1cf49bc37266')
CLSID_ReplicaDescription = uuid.UUID('1858b629-9870-49f1-ad2e-947c7cf5d47a')
CLSID_ReplicaDescriptionExtension = uuid.UUID('f964b93c-bc66-4982-b415-3051465b5da4')
CLSID_GPReplica = uuid.UUID('e5524dfc-66e0-49b0-88e7-094040c98f74')
CLSID_GPReplicas = uuid.UUID('ce61437f-0cae-4148-af5b-cd8832213cf1')
CLSID_GPReplicaDescription = uuid.UUID('f163839a-58b8-45b9-93ad-88803e0fa50f')
CLSID_GPReplicaDataset = uuid.UUID('72477e3c-85ce-49de-aa3e-5d55909c22ea')
CLSID_GPReplicaDatasets = uuid.UUID('fc68ec62-cda0-4497-9977-b45820268a43')
CLSID_GPReplicaOptions = uuid.UUID('5f18882d-8e9e-4a36-b566-071ee728298a')
CLSID_GeoDBDataTransfer = uuid.UUID('5f0a6da5-e0e7-11d3-8118-00c04f686238')
CLSID_RasterDef = uuid.UUID('a8386192-3659-4525-984f-5d643a40ee8c')
CLSID_RasterStorageDef = uuid.UUID('82abc602-67f9-4042-bee1-645b0139fd70')
CLSID_RasterValue = uuid.UUID('93d0b191-6bf1-418f-ab89-6f290278c245')
CLSID_RasterCatalogItem = uuid.UUID('3eaa2478-5332-40f8-8fa8-62382390a3ba')
CLSID_RasterCatalog = uuid.UUID('55e13e7e-52bd-4145-9adf-9cf8b776c346')
CLSID_RasterDatasetName = uuid.UUID('75bce6e2-8af5-478e-8892-fa45ca50af4d')
CLSID_RasterBandName = uuid.UUID('bc25e113-168b-11d2-8d25-0000f8780535')
CLSID_RasterCatalogName = uuid.UUID('33ff62fc-d7d6-48e8-82d9-77c0aadbf5d1')
CLSID_RasterCatalogClassDescription = uuid.UUID('69b9e430-9f7d-4689-b6e7-9611928e6036')
CLSID_RasterCatalogHelper = uuid.UUID('04d7fade-b9e6-4b18-aa22-b424a17e7fb5')
CLSID_Pnt = uuid.UUID('064087e4-09b9-4892-a893-fca89bb171d1')
CLSID_MosaicDatasetName = uuid.UUID('5cd5bb6d-6549-429e-80f4-0dd4731198d1')
CLSID_DEBrowseOptions = uuid.UUID('0592f426-4f2c-4016-adc7-0a84ed2e1bc0')
CLSID_DEWorkspaceType = uuid.UUID('de546f38-3266-48d2-bfe8-61fa0baef5d1')
CLSID_DETableType = uuid.UUID('d19dd6fc-2460-42c0-9197-5d2e840ac485')
CLSID_FieldType = uuid.UUID('b44ef553-fa9f-4987-804c-fcaa537024ed')
CLSID_IndexType = uuid.UUID('37b22058-107e-4bce-9a52-81b31fb2f0a4')
CLSID_DEFeatureDatasetType = uuid.UUID('b073022c-969e-4e42-bcb4-8ce637ca2332')
CLSID_DEFeatureClassType = uuid.UUID('e87c2f50-7758-4a34-bd92-d66beb2df03e')
CLSID_DERelationshipClassType = uuid.UUID('7693bf47-9e32-40a3-b643-0b093c2a6cfc')
CLSID_WorkspaceDefinition = uuid.UUID('bade4285-63ed-495c-ac57-435dd4687b31')
CLSID_DEWorkspace = uuid.UUID('2127af36-cae1-427e-b1a8-bf0f1ad19f6e')
CLSID_DETable = uuid.UUID('9c8405db-bb87-4bd6-932d-7ffb35b04ba0')
CLSID_DEFeatureDataset = uuid.UUID('6ac619fe-191f-432d-b1a3-28ce85a591af')
CLSID_DEFeatureClass = uuid.UUID('00bb7f40-3e51-4864-a66c-7f0c8ee9a842')
CLSID_GPGeometricNetworkMembership = uuid.UUID('7ee891d6-6acd-4687-9bf4-fce49fc47157')
CLSID_GPTopologyMembership = uuid.UUID('5da78ff6-546b-4af0-84b8-50b68484d9d5')
CLSID_DERelationshipClass = uuid.UUID('d41f5487-6b16-42fd-ab61-63a55b519b71')
CLSID_GPDataTypeName = uuid.UUID('960cb02a-8caf-442b-acf7-6b6256fc19f9')
CLSID_GPMessage = uuid.UUID('fd0bb2d3-6c4e-43af-b084-a806a6c8e66e')
CLSID_GPMessages = uuid.UUID('6d59957c-ead2-491b-963c-2c41feb79c2f')
CLSID_DEGeometricNetworkType = uuid.UUID('d2ba94ef-a424-4fcf-a6d2-5015a1b2080e')
CLSID_DEGeometricNetwork = uuid.UUID('fe68ba8c-935d-4f6f-80d5-7957f8dbefdf')
CLSID_DETopology = uuid.UUID('acc4637d-d5e0-47d5-abcd-9f25ab326e6f')
CLSID_DETopologyType = uuid.UUID('4c008436-c283-408f-b5f9-f6804c7e3635')
CLSID_DERasterCatalog = uuid.UUID('80207192-7ce8-4d06-9542-763e78518ffb')
CLSID_DERasterCatalogType = uuid.UUID('46ee5b40-1292-4c56-b27c-a1f6dfbc0287')
CLSID_DEGdbUtilities = uuid.UUID('48f71b4d-72ce-42aa-a45c-5c180f6e78e8')
CLSID_GPRelationshipClassKey = uuid.UUID('5dca4e1f-81a4-41c3-b160-818d22fc50b0')
CLSID_GPSubtype = uuid.UUID('741b5302-2917-4aab-952a-df5f0e019eb6')
CLSID_GPWorkspaceExtension = uuid.UUID('8b233dbe-0591-459b-bfd1-468d2db5267d')
CLSID_GPDatasetExtension = uuid.UUID('8b233dbe-0591-459b-bfd1-468d2db5267e')
CLSID_GPRangeDomain2 = uuid.UUID('2bfaedbf-d251-452f-b39d-5c7a9d318478')
CLSID_GPCodedValueDomain2 = uuid.UUID('83b0aae8-01ac-4c74-949c-dcb8c2bbd629')
CLSID_Names = uuid.UUID('e141c7af-1c30-4b67-99a1-2ddd2ff2c04d')
CLSID_DataElements = uuid.UUID('796a16fe-2f8f-4971-b14b-e42f041f6703')
CLSID_DataElementHelper = uuid.UUID('52865bc9-81c0-4aec-b339-047c0a6cb425')
CLSID_GPVersionInfos = uuid.UUID('a3003c8d-e092-4be7-ab7d-ae5ccb94da84')
CLSID_GPVersionInfo = uuid.UUID('4ff43cdc-cbf0-4ecf-a31b-6b80433ad46d')
CLSID_DEGeoDataServerType = uuid.UUID('64ff9c15-fc3f-40fe-b311-765b801f08ab')
CLSID_DEGeoDataServer = uuid.UUID('d6e941e4-9ef4-438d-ae31-2fb082a2814d')
CLSID_DEMapServerType = uuid.UUID('0ac3c41d-fef8-4de7-a3a3-7e0e5fddbf76')
CLSID_DEMapServer = uuid.UUID('69d74387-7684-458e-84a3-bd9e013669c0')
CLSID_DEGlobeServerType = uuid.UUID('7ef7d3e7-d2ee-4b19-af27-56ddee7e0b14')
CLSID_DEGlobeServer = uuid.UUID('9adf8e53-b3fc-4348-b0c1-27bf1a5f5f39')
CLSID_DEGPServerType = uuid.UUID('8a479029-0746-4a99-b443-bbf390f82e0c')
CLSID_DEGPServer = uuid.UUID('a8177ada-390d-420c-a433-ee67dd2e8638')
CLSID_DEGeometryServerType = uuid.UUID('99e8c17a-259f-4a66-a3a1-e0a24e1b461b')
CLSID_DEGeometryServer = uuid.UUID('1388334d-11a5-4bc0-8c5e-77f8123da43b')
CLSID_DEServerConnectionType = uuid.UUID('0e88a630-36b2-4623-9a54-a1cf4d654d63')
CLSID_DEServerConnection = uuid.UUID('887d4940-9343-42a3-8c8f-5c41d4dcfafd')
CLSID_ResultPortionInfo = uuid.UUID('ef14fd40-8890-4674-9941-d00eb91b0e44')
CLSID_GPMessageManager = uuid.UUID('e1a80771-862a-494b-8aed-6d9125f5afac')
CLSID_DERasterDatasetType = uuid.UUID('71414275-578c-466d-b0be-699747d0d502')
CLSID_DERasterBandType = uuid.UUID('14114930-a62a-11d5-931d-0080c71a3226')
CLSID_DERasterDataset = uuid.UUID('8295bb68-f200-4ca6-803f-979952d732bd')
CLSID_DERasterBand = uuid.UUID('37c63b33-c7d6-4311-91d5-9e98a2a0e39a')
CLSID_GPHistoricalMarker = uuid.UUID('177baf01-ff42-4e08-b1e9-866c4e61cd1e')
CLSID_FeatureDataConverter = uuid.UUID('78b08005-7054-11d2-aafe-00c04fa33c20')
CLSID_Tin = uuid.UUID('73b80fc3-ff33-11d1-a549-0000f8774f0f')
CLSID_DddServerEnvironment = uuid.UUID('3b6c52a4-7231-4189-b341-c30e7fb58bcf')
CLSID_TinNodeEnumerator = uuid.UUID('f4377d42-2f1d-11d2-92f7-444553540000')
CLSID_TinEdgeEnumerator = uuid.UUID('f4377d43-2f1d-11d2-92f7-444553540000')
CLSID_TinTriangleEnumerator = uuid.UUID('f4377d44-2f1d-11d2-92f7-444553540000')
CLSID_TinSurfaceElement = uuid.UUID('b9767bc1-d0df-11d2-9f76-00c04f8ece27')
CLSID_TinNodeArray = uuid.UUID('a9bc13f2-3e88-4b68-826d-1866d07fc9a2')
CLSID_TinEdgeArray = uuid.UUID('a72fe99f-c4c4-4ea9-a6b8-fd77ba0de025')
CLSID_TinTriangleArray = uuid.UUID('2d594880-7fdb-490f-b139-88a82dd639e1')
CLSID_TinPolyline = uuid.UUID('2fa264b6-a214-11d3-ab4b-0008c73fd50c')
CLSID_TinPolygon = uuid.UUID('2fa264b7-a214-11d3-ab4b-0008c73fd50c')
CLSID_TinNode = uuid.UUID('9a2a4b76-11cf-11d2-a556-0000f8774f0f')
CLSID_TinEdge = uuid.UUID('9a2a4b77-11cf-11d2-a556-0000f8774f0f')
CLSID_TinTriangle = uuid.UUID('9a2a4b78-11cf-11d2-a556-0000f8774f0f')
CLSID_TinValueFilter = uuid.UUID('3c132c0e-fe5d-11d2-9f88-00c04f8ece27')
CLSID_TinTriangleFilter = uuid.UUID('927a94c0-01e1-11d3-ae19-000000000000')
CLSID_TinEdgeTypeFilter = uuid.UUID('8369a822-a9a6-11d3-ab4b-0008c73fd50c')
CLSID_TinDataElementFilter = uuid.UUID('e21a9cae-fabf-11d3-ab5a-0008c73fd50c')
CLSID_TinNodeSourceFilter = uuid.UUID('124f6d4a-b2a3-11d5-abb9-0008c73fd50c')
CLSID_TinName = uuid.UUID('5f13f416-42bc-11d2-a569-0000f8774f0f')
CLSID_TinNativeType = uuid.UUID('e378e871-f24f-4332-b1e6-339c7aceb25c')
CLSID_TinImporter = uuid.UUID('89f42218-3268-4550-a8bc-f08f8d4ab822')
CLSID_XYEvent2FieldsProperties = uuid.UUID('71045ca2-7902-11d4-9fe5-00c04f6bdf06')
CLSID_XYEventSourceName = uuid.UUID('309aa920-eaec-11d3-9f8a-00c04f6bdf06')
CLSID_XYEventSource = uuid.UUID('4b194345-a3e3-11d4-9ff0-00c04f6bdf06')
CLSID_NetworkForwardStar = uuid.UUID('fd93e68c-3cfe-4c12-b34d-2fdb38b38d4e')
CLSID_EnumNetworkElement = uuid.UUID('7b90405e-6882-47dc-b4ec-7c54cb537d2e')
CLSID_DENetworkDataset = uuid.UUID('ff8808b7-e50c-45fe-84ea-1c061d7431f6')
CLSID_DENetworkDatasetType = uuid.UUID('4b24f738-c123-43e6-8dd9-cbf057f10ad0')
CLSID_NetworkSource = uuid.UUID('32e3d06d-f792-45eb-1089-a6ea57232bc0')
CLSID_SystemJunctionSource = uuid.UUID('619f181f-4a40-4a95-bceb-5ca7c8c63b60')
CLSID_EdgeFeatureSource = uuid.UUID('f2140d50-6b26-414d-a39f-f35ac54d10de')
CLSID_JunctionFeatureSource = uuid.UUID('74c871bd-648e-40c0-a46a-e38521216a7b')
CLSID_TurnFeatureSource = uuid.UUID('44bb047b-c080-4597-b36b-e56905983c4c')
CLSID_NetworkAttributeParameter = uuid.UUID('ba43ab15-045d-4eb1-8526-ea65c4548d4a')
CLSID_NetworkAttribute = uuid.UUID('a86f7ce3-37e0-4bef-b66c-72b41796cf03')
CLSID_EvaluatedNetworkAttribute = uuid.UUID('cf8d7b2f-628b-4f9d-b149-d5db3cd32a35')
CLSID_NetworkConstantEvaluator = uuid.UUID('318c4b91-f5d2-467a-996c-0ab51b0d8ff2')
CLSID_NetworkFieldEvaluator = uuid.UUID('68055fc4-37d5-4bd0-81a5-cd177a29759c')
CLSID_NetworkScriptEvaluator = uuid.UUID('fdf2bb9c-9ea4-4752-bc9c-67a5c6780606')
CLSID_NetworkGlobalTurnDelayCategory = uuid.UUID('615c84ce-a6c5-4ada-ad2e-a478350c009b')
CLSID_NetworkGlobalTurnDelayEvaluator = uuid.UUID('ce072de5-8c43-4d4f-945b-5fceb34a7281')
CLSID_NetworkFunctionEvaluator = uuid.UUID('92b433f5-556e-4a39-b674-d02213634cc4')
CLSID_NetworkSourceDirections = uuid.UUID('29e5825c-6bcd-4063-a6da-f943e8b262bd')
CLSID_Shields = uuid.UUID('f2d646b4-f0d6-40b5-a798-823c1bfa4e99')
CLSID_StreetNameFields = uuid.UUID('fe4b2823-407b-418e-ab25-40d85767ea24')
CLSID_DirectionsFieldMapping = uuid.UUID('1aaadf55-7530-4ca5-9d41-90ff94c91c5a')
CLSID_NetworkDirections = uuid.UUID('f921bd59-a8ad-4425-b5a0-75bce88d22fe')
CLSID_DirectionsAttributeMapping = uuid.UUID('d8366160-0e1f-4109-a765-fac6d37c2ef2')
CLSID_DirectionsLandmarkSource = uuid.UUID('64c88f04-9557-4113-89c9-469955527422')
CLSID_NetworkDatasetFDExtension = uuid.UUID('c9c119f6-a49c-4bb9-948b-cf04c30701d4')
CLSID_NetworkDatasetWorkspaceExtension = uuid.UUID('4c1b151c-48c3-46c5-ab57-e6b941a1d00a')
CLSID_NetworkDatasetName = uuid.UUID('8167fe6a-e992-4ecb-b6ae-e5dfe4655247')
CLSID_NetworkDataset = uuid.UUID('5f1f09d6-571a-4b71-8dde-dda40c2a61bb')
CLSID_NetworkJunction = uuid.UUID('69244a33-366d-47c2-8c9c-96cac2cd6a14')
CLSID_NetworkEdge = uuid.UUID('6976b647-c243-49ab-9cfb-8d7e253f3b1a')
CLSID_NetworkTurn = uuid.UUID('94b4c767-cc2b-41d5-a9dd-4f1f8fbca1ba')
CLSID_NetworkForwardStarAdjacencies = uuid.UUID('c8d3323a-ca44-4303-ab9e-f92a19bb61cb')
CLSID_GPNetworkDatasetMembership = uuid.UUID('2aae84d4-417c-4e61-946c-b3a20aaa80b8')
CLSID_NetworkScriptEvaluatorFunctions = uuid.UUID('77b4488d-bd07-4a6d-9479-2eadf8ca761a')
CLSID_TrafficData = uuid.UUID('e7a1cd66-c6ef-440b-91ca-d6b8db9c01f9')
CLSID_NetworkEdgeTrafficEvaluator = uuid.UUID('848aa108-2899-4830-9405-4b02ad3cd312')
CLSID_TrafficDataManager = uuid.UUID('95eee584-d873-491a-8248-49a4ed60e35d')
CLSID_TrafficFeedDirectory = uuid.UUID('2c4b45d8-7288-4bd9-9f7e-4167dece6d34')
CLSID_TrafficFeedGPService = uuid.UUID('c8a68870-3769-4271-b480-e95e806b72df')
CLSID_RepresentationWorkspaceExtension = uuid.UUID('fd05270a-8e0b-4823-9dee-f149347c32b6')
CLSID_Representation = uuid.UUID('3fa48a52-2f4e-4762-9258-2d16943f8d36')
CLSID_RepresentationClass = uuid.UUID('5fb4a66d-d466-4ca0-b219-a4155413d589')
CLSID_RepresentationClassName = uuid.UUID('4e74aa22-a1b6-47d4-9914-20f8c6c2b699')
CLSID_RepresentationRules = uuid.UUID('fa485356-8ff1-4515-adbd-1655beb500c1')
CLSID_DERepresentationClass = uuid.UUID('aba829a6-9c55-41ee-8c15-2daa3821d565')
CLSID_PlugInWorkspaceFactory = uuid.UUID('13ba0a70-7fe3-4a24-bb0b-750b44e72ad6')
CLSID_GeoDatabaseHelper = uuid.UUID('4e35da0b-c5d1-4ac9-bd62-b36b4155ee4b')

# Enumerations
class esriWorkspaceType(Enumeration):
    __slots__ = ['esriFileSystemWorkspace',
                 'esriLocalDatabaseWorkspace',
                 'esriRemoteDatabaseWorkspace']
    esriFileSystemWorkspace = 0
    esriLocalDatabaseWorkspace = 1
    esriRemoteDatabaseWorkspace = 2

class esriDatasetType(Enumeration):
    __slots__ = ['esriDTAny',
                 'esriDTContainer',
                 'esriDTGeo',
                 'esriDTFeatureDataset',
                 'esriDTFeatureClass',
                 'esriDTPlanarGraph',
                 'esriDTGeometricNetwork',
                 'esriDTTopology',
                 'esriDTText',
                 'esriDTTable',
                 'esriDTRelationshipClass',
                 'esriDTRasterDataset',
                 'esriDTRasterBand',
                 'esriDTTin',
                 'esriDTCadDrawing',
                 'esriDTRasterCatalog',
                 'esriDTToolbox',
                 'esriDTTool',
                 'esriDTNetworkDataset',
                 'esriDTTerrain',
                 'esriDTRepresentationClass',
                 'esriDTCadastralFabric',
                 'esriDTSchematicDataset',
                 'esriDTLocator',
                 'esriDTMap',
                 'esriDTLayer',
                 'esriDTStyle',
                 'esriDTMosaicDataset',
                 'esriDTLasDataset']
    esriDTAny = 1
    esriDTContainer = 2
    esriDTGeo = 3
    esriDTFeatureDataset = 4
    esriDTFeatureClass = 5
    esriDTPlanarGraph = 6
    esriDTGeometricNetwork = 7
    esriDTTopology = 8
    esriDTText = 9
    esriDTTable = 10
    esriDTRelationshipClass = 11
    esriDTRasterDataset = 12
    esriDTRasterBand = 13
    esriDTTin = 14
    esriDTCadDrawing = 15
    esriDTRasterCatalog = 16
    esriDTToolbox = 17
    esriDTTool = 18
    esriDTNetworkDataset = 19
    esriDTTerrain = 20
    esriDTRepresentationClass = 21
    esriDTCadastralFabric = 22
    esriDTSchematicDataset = 23
    esriDTLocator = 24
    esriDTMap = 26
    esriDTLayer = 27
    esriDTStyle = 28
    esriDTMosaicDataset = 29
    esriDTLasDataset = 30

class esriVersionAccess(Enumeration):
    __slots__ = ['esriVersionAccessPrivate',
                 'esriVersionAccessPublic',
                 'esriVersionAccessProtected']
    esriVersionAccessPrivate = 0
    esriVersionAccessPublic = 1
    esriVersionAccessProtected = 2

class esriLockType(Enumeration):
    __slots__ = ['esriLockTypeShared',
                 'esriLockTypeExclusive']
    esriLockTypeShared = 1
    esriLockTypeExclusive = 2

class esriDifferenceType(Enumeration):
    __slots__ = ['esriDifferenceTypeInsert',
                 'esriDifferenceTypeDeleteNoChange',
                 'esriDifferenceTypeUpdateNoChange',
                 'esriDifferenceTypeUpdateUpdate',
                 'esriDifferenceTypeUpdateDelete',
                 'esriDifferenceTypeDeleteUpdate']
    esriDifferenceTypeInsert = 0
    esriDifferenceTypeDeleteNoChange = 1
    esriDifferenceTypeUpdateNoChange = 2
    esriDifferenceTypeUpdateUpdate = 3
    esriDifferenceTypeUpdateDelete = 4
    esriDifferenceTypeDeleteUpdate = 5

class esriFieldType(Enumeration):
    __slots__ = ['esriFieldTypeSmallInteger',
                 'esriFieldTypeInteger',
                 'esriFieldTypeSingle',
                 'esriFieldTypeDouble',
                 'esriFieldTypeString',
                 'esriFieldTypeDate',
                 'esriFieldTypeOID',
                 'esriFieldTypeGeometry',
                 'esriFieldTypeBlob',
                 'esriFieldTypeRaster',
                 'esriFieldTypeGUID',
                 'esriFieldTypeGlobalID',
                 'esriFieldTypeXML']
    esriFieldTypeSmallInteger = 0
    esriFieldTypeInteger = 1
    esriFieldTypeSingle = 2
    esriFieldTypeDouble = 3
    esriFieldTypeString = 4
    esriFieldTypeDate = 5
    esriFieldTypeOID = 6
    esriFieldTypeGeometry = 7
    esriFieldTypeBlob = 8
    esriFieldTypeRaster = 9
    esriFieldTypeGUID = 10
    esriFieldTypeGlobalID = 11
    esriFieldTypeXML = 12

class esriMergePolicyType(Enumeration):
    __slots__ = ['esriMPTSumValues',
                 'esriMPTAreaWeighted',
                 'esriMPTDefaultValue']
    esriMPTSumValues = 1
    esriMPTAreaWeighted = 2
    esriMPTDefaultValue = 3

class esriSplitPolicyType(Enumeration):
    __slots__ = ['esriSPTGeometryRatio',
                 'esriSPTDuplicate',
                 'esriSPTDefaultValue']
    esriSPTGeometryRatio = 1
    esriSPTDuplicate = 2
    esriSPTDefaultValue = 3

class esriDomainType(Enumeration):
    __slots__ = ['esriDTRange',
                 'esriDTCodedValue',
                 'esriDTString']
    esriDTRange = 1
    esriDTCodedValue = 2
    esriDTString = 3

class esriSelectionType(Enumeration):
    __slots__ = ['esriSelectionTypeIDSet',
                 'esriSelectionTypeSnapshot',
                 'esriSelectionTypeHybrid']
    esriSelectionTypeIDSet = 1
    esriSelectionTypeSnapshot = 2
    esriSelectionTypeHybrid = 3

class esriSelectionOption(Enumeration):
    __slots__ = ['esriSelectionOptionNormal',
                 'esriSelectionOptionOnlyOne',
                 'esriSelectionOptionEmpty']
    esriSelectionOptionNormal = 1
    esriSelectionOptionOnlyOne = 2
    esriSelectionOptionEmpty = 3

class esriSetOperation(Enumeration):
    __slots__ = ['esriSetUnion',
                 'esriSetIntersection',
                 'esriSetDifference',
                 'esriSetSymDifference']
    esriSetUnion = 1
    esriSetIntersection = 2
    esriSetDifference = 3
    esriSetSymDifference = 4

class esriMetadataSyncAction(Enumeration):
    __slots__ = ['esriMSAAccessed',
                 'esriMSAAlways',
                 'esriMSACreated',
                 'esriMSANotCreated',
                 'esriMSAOverwrite',
                 'esriMSASelective']
    esriMSAAccessed = 0
    esriMSAAlways = 1
    esriMSACreated = 2
    esriMSANotCreated = 3
    esriMSAOverwrite = 4
    esriMSASelective = 5

class esriSQLFunctionName(Enumeration):
    __slots__ = ['esriSQL_MIN',
                 'esriSQL_MAX',
                 'esriSQL_COUNT',
                 'esriSQL_SUM',
                 'esriSQL_AVG',
                 'esriSQL_VAR',
                 'esriSQL_STDDEV',
                 'esriSQL_CONCAT',
                 'esriSQL_LEADING',
                 'esriSQL_LOWER',
                 'esriSQL_TRAILING',
                 'esriSQL_SUBSTRING',
                 'esriSQL_SUBSTRINGBYTES',
                 'esriSQL_UPPER',
                 'esriSQL_ASCII',
                 'esriSQL_CHAR',
                 'esriSQL_SOUNDEX',
                 'esriSQL_TRANSLATE',
                 'esriSQL_TRIM',
                 'esriSQL_ABS',
                 'esriSQL_ACOS',
                 'esriSQL_ASIN',
                 'esriSQL_ATAN',
                 'esriSQL_CEILING',
                 'esriSQL_COS',
                 'esriSQL_FLOOR',
                 'esriSQL_LOG',
                 'esriSQL_LN',
                 'esriSQL_MOD',
                 'esriSQL_SIGN',
                 'esriSQL_SIN',
                 'esriSQL_TAN',
                 'esriSQL_LOG10',
                 'esriSQL_POWER',
                 'esriSQL_ROUND',
                 'esriSQL_TRUNCATE',
                 'esriSQL_SINH',
                 'esriSQL_COSH',
                 'esriSQL_TANH',
                 'esriSQL_HEX',
                 'esriSQL_EXTRACT',
                 'esriSQL_BITLENGTH',
                 'esriSQL_CHARLENGTH',
                 'esriSQL_OCTETLENGTH',
                 'esriSQL_POSITION',
                 'esriSQL_CURRENTDATE',
                 'esriSQL_CURRENTTIME',
                 'esriSQL_CURRENTUSER',
                 'esriSQL_COALESCE',
                 'esriSQL_CONVERT',
                 'esriSQL_CAST',
                 'esriSQL_CURRENTTIMESTAMP',
                 'esriSQL_NULLIF',
                 'esriSQL_VAR_SAMP',
                 'esriSQL_VAR_POP',
                 'esriSQL_STDDEV_SAMP',
                 'esriSQL_STDDEV_POP']
    esriSQL_MIN = 1
    esriSQL_MAX = 2
    esriSQL_COUNT = 3
    esriSQL_SUM = 4
    esriSQL_AVG = 5
    esriSQL_VAR = 6
    esriSQL_STDDEV = 7
    esriSQL_CONCAT = 8
    esriSQL_LEADING = 9
    esriSQL_LOWER = 10
    esriSQL_TRAILING = 11
    esriSQL_SUBSTRING = 12
    esriSQL_SUBSTRINGBYTES = 13
    esriSQL_UPPER = 14
    esriSQL_ASCII = 15
    esriSQL_CHAR = 16
    esriSQL_SOUNDEX = 17
    esriSQL_TRANSLATE = 18
    esriSQL_TRIM = 19
    esriSQL_ABS = 20
    esriSQL_ACOS = 21
    esriSQL_ASIN = 22
    esriSQL_ATAN = 23
    esriSQL_CEILING = 24
    esriSQL_COS = 25
    esriSQL_FLOOR = 26
    esriSQL_LOG = 27
    esriSQL_LN = 28
    esriSQL_MOD = 29
    esriSQL_SIGN = 30
    esriSQL_SIN = 31
    esriSQL_TAN = 32
    esriSQL_LOG10 = 33
    esriSQL_POWER = 34
    esriSQL_ROUND = 35
    esriSQL_TRUNCATE = 36
    esriSQL_SINH = 37
    esriSQL_COSH = 38
    esriSQL_TANH = 39
    esriSQL_HEX = 40
    esriSQL_EXTRACT = 41
    esriSQL_BITLENGTH = 42
    esriSQL_CHARLENGTH = 43
    esriSQL_OCTETLENGTH = 44
    esriSQL_POSITION = 45
    esriSQL_CURRENTDATE = 46
    esriSQL_CURRENTTIME = 47
    esriSQL_CURRENTUSER = 48
    esriSQL_COALESCE = 49
    esriSQL_CONVERT = 50
    esriSQL_CAST = 51
    esriSQL_CURRENTTIMESTAMP = 52
    esriSQL_NULLIF = 53
    esriSQL_VAR_SAMP = 54
    esriSQL_VAR_POP = 55
    esriSQL_STDDEV_SAMP = 56
    esriSQL_STDDEV_POP = 57

class esriSQLSpecialCharacters(Enumeration):
    __slots__ = ['esriSQL_WildcardManyMatch',
                 'esriSQL_WildcardSingleMatch',
                 'esriSQL_DelimitedIdentifierPrefix',
                 'esriSQL_DelimitedIdentifierSuffix',
                 'esriSQL_EscapeKeyPrefix',
                 'esriSQL_EscapeKeySuffix']
    esriSQL_WildcardManyMatch = 1
    esriSQL_WildcardSingleMatch = 2
    esriSQL_DelimitedIdentifierPrefix = 3
    esriSQL_DelimitedIdentifierSuffix = 4
    esriSQL_EscapeKeyPrefix = 5
    esriSQL_EscapeKeySuffix = 6

class esriSchemaLock(Enumeration):
    __slots__ = ['esriSharedSchemaLock',
                 'esriExclusiveSchemaLock']
    esriSharedSchemaLock = 1
    esriExclusiveSchemaLock = 2

class esriConnectionDBMS(Enumeration):
    __slots__ = ['esriDBMS_Unknown',
                 'esriDBMS_Oracle',
                 'esriDBMS_Informix',
                 'esriDBMS_SQLServer',
                 'esriDBMS_DB2',
                 'esriDBMS_PostgreSQL',
                 'esriDBMS_Netezza',
                 'esriDBMS_Teradata',
                 'esriDBMS_SQLite']
    esriDBMS_Unknown = 0
    esriDBMS_Oracle = 1
    esriDBMS_Informix = 2
    esriDBMS_SQLServer = 3
    esriDBMS_DB2 = 4
    esriDBMS_PostgreSQL = 5
    esriDBMS_Netezza = 6
    esriDBMS_Teradata = 7
    esriDBMS_SQLite = 8

class esriMultiuserEditSessionMode(Enumeration):
    __slots__ = ['esriMESMVersioned',
                 'esriMESMNonVersioned']
    esriMESMVersioned = 0
    esriMESMNonVersioned = 1

class esriXMLIndexType(Enumeration):
    __slots__ = ['esriXMLIndexTypeAuto',
                 'esriXMLIndexTypeAutoString',
                 'esriXMLIndexTypeDefined',
                 'esriXMLIndexTypeTemplate']
    esriXMLIndexTypeAuto = 0
    esriXMLIndexTypeAutoString = 1
    esriXMLIndexTypeDefined = 2
    esriXMLIndexTypeTemplate = 3

class esriXMLIndexTagDataType(Enumeration):
    __slots__ = ['esriXMLIndexTagDataTypeDouble',
                 'esriXMLIndexTagDataTypeString',
                 'esriXMLIndexTagDataTypeVarChar']
    esriXMLIndexTagDataTypeDouble = 0
    esriXMLIndexTagDataTypeString = 1
    esriXMLIndexTagDataTypeVarChar = 2

class esriGeodatabaseVersion(Enumeration):
    __slots__ = ['esriGeodatabaseVersion10',
                 'esriGeodatabaseVersion101',
                 'esriGeodatabaseVersion102']
    esriGeodatabaseVersion10 = 0
    esriGeodatabaseVersion101 = 1
    esriGeodatabaseVersion102 = 2

class esriSQLPrivilege(Enumeration):
    __slots__ = ['esriSelectPrivilege',
                 'esriUpdatePrivilege',
                 'esriInsertPrivilege',
                 'esriDeletePrivilege']
    esriSelectPrivilege = 1
    esriUpdatePrivilege = 2
    esriInsertPrivilege = 4
    esriDeletePrivilege = 8

class esriSQLPredicates(Enumeration):
    __slots__ = ['esriSQL_EQ',
                 'esriSQL_NOT_EQ',
                 'esriSQL_LT',
                 'esriSQL_GT',
                 'esriSQL_LE',
                 'esriSQL_GE',
                 'esriSQL_BETWEEN',
                 'esriSQL_NOT_BETWEEN',
                 'esriSQL_IN',
                 'esriSQL_NOT_IN',
                 'esriSQL_LIKE',
                 'esriSQL_NOT_LIKE',
                 'esriSQL_IS_NULL',
                 'esriSQL_IS_NOT_NULL',
                 'esriSQL_EXISTS',
                 'esriSQL_NOT_EXISTS',
                 'esriSQL_SIMILAR_TO',
                 'esriSQL_NOT_SIMILAR_TO']
    esriSQL_EQ = 1
    esriSQL_NOT_EQ = 2
    esriSQL_LT = 4
    esriSQL_GT = 8
    esriSQL_LE = 16
    esriSQL_GE = 32
    esriSQL_BETWEEN = 64
    esriSQL_NOT_BETWEEN = 128
    esriSQL_IN = 256
    esriSQL_NOT_IN = 512
    esriSQL_LIKE = 1024
    esriSQL_NOT_LIKE = 2048
    esriSQL_IS_NULL = 4096
    esriSQL_IS_NOT_NULL = 8192
    esriSQL_EXISTS = 16384
    esriSQL_NOT_EXISTS = 32768
    esriSQL_SIMILAR_TO = 65536
    esriSQL_NOT_SIMILAR_TO = 131072

class esriSQLClauses(Enumeration):
    __slots__ = ['esriSQL_DISTINCT',
                 'esriSQL_ALL',
                 'esriSQL_AS',
                 'esriSQL_ORDER_BY',
                 'esriSQL_GROUP_BY']
    esriSQL_DISTINCT = 1
    esriSQL_ALL = 2
    esriSQL_AS = 4
    esriSQL_ORDER_BY = 8
    esriSQL_GROUP_BY = 16

class esriSQLOperator(Enumeration):
    __slots__ = ['esriSQL_StringConcatenate']
    esriSQL_StringConcatenate = 1

class esriSQLDatetimeType(Enumeration):
    __slots__ = ['esriSQL_Date',
                 'esriSQL_Time',
                 'esriSQL_Timestamp']
    esriSQL_Date = 1
    esriSQL_Time = 2
    esriSQL_Timestamp = 3

class esriSQLInfo(Enumeration):
    __slots__ = ['esriSQL_CurrentDateRequiresParentheses',
                 'esriSQL_PositionRequiresCommas',
                 'esriSQL_SubstringRequiresCommas',
                 'esriSQL_CorrelationNameAllowsASKeyword']
    esriSQL_CurrentDateRequiresParentheses = 0
    esriSQL_PositionRequiresCommas = 1
    esriSQL_SubstringRequiresCommas = 2
    esriSQL_CorrelationNameAllowsASKeyword = 3

class esriWorkspacePropertyGroupType(Enumeration):
    __slots__ = ['esriWorkspacePropertyGroup',
                 'esriWorkspaceTablePropertyGroup']
    esriWorkspacePropertyGroup = 1
    esriWorkspaceTablePropertyGroup = 2

class esriWorkspacePropertyType(Enumeration):
    __slots__ = ['esriWorkspacePropCanExecuteSQL',
                 'esriWorkspacePropCanEdit',
                 'esriWorkspacePropIsReadonly',
                 'esriWorkspacePropSupportsQualifiedNames',
                 'esriWorkspacePropSupportsMetadata',
                 'esriWorkspacePropCanAnalyze',
                 'esriWorkspacePropCanGetConfigurationKeywords',
                 'esriWorkspacePropIsGeoDatabase',
                 'esriWorkspacePropMaxWhereClauseLength',
                 'esriWorkspacePropHasPrivateEditSession',
                 'esriWorkspacePropSupportsHighPrecisionStorage',
                 'esriWorkspacePropSupportsExtensionDatasets',
                 'esriWorkspacePropLastCompressDate',
                 'esriWorkspacePropLastCompressStatus',
                 'esriWorkspacePropSupportsArchiving',
                 'esriWorkspacePropSupportsMoveEditsToBase']
    esriWorkspacePropCanExecuteSQL = 0
    esriWorkspacePropCanEdit = 1
    esriWorkspacePropIsReadonly = 2
    esriWorkspacePropSupportsQualifiedNames = 3
    esriWorkspacePropSupportsMetadata = 4
    esriWorkspacePropCanAnalyze = 5
    esriWorkspacePropCanGetConfigurationKeywords = 6
    esriWorkspacePropIsGeoDatabase = 7
    esriWorkspacePropMaxWhereClauseLength = 8
    esriWorkspacePropHasPrivateEditSession = 9
    esriWorkspacePropSupportsHighPrecisionStorage = 10
    esriWorkspacePropSupportsExtensionDatasets = 11
    esriWorkspacePropLastCompressDate = 12
    esriWorkspacePropLastCompressStatus = 13
    esriWorkspacePropSupportsArchiving = 14
    esriWorkspacePropSupportsMoveEditsToBase = 15

class esriWorkspaceTablePropertyType(Enumeration):
    __slots__ = ['esriTablePropRowCountIsCalculated',
                 'esriTablePropCanAddField',
                 'esriTablePropCanDeleteField',
                 'esriTablePropCanAddIndex',
                 'esriTablePropCanDeleteIndex',
                 'esriTablePropOIDIsRecordNumber',
                 'esriTablePropMaxFieldNameLength',
                 'esriTablePropBindCursor',
                 'esriTablePropSupportsMultiColumnIndexes']
    esriTablePropRowCountIsCalculated = 1
    esriTablePropCanAddField = 2
    esriTablePropCanDeleteField = 3
    esriTablePropCanAddIndex = 4
    esriTablePropCanDeleteIndex = 5
    esriTablePropOIDIsRecordNumber = 6
    esriTablePropMaxFieldNameLength = 7
    esriTablePropBindCursor = 8
    esriTablePropSupportsMultiColumnIndexes = 9

class esriDatasetFileStatTimeMode(Enumeration):
    __slots__ = ['esriDatasetFileStatTimeLastAccess',
                 'esriDatasetFileStatTimeCreation',
                 'esriDatasetFileStatTimeLastModification']
    esriDatasetFileStatTimeLastAccess = 0
    esriDatasetFileStatTimeCreation = 1
    esriDatasetFileStatTimeLastModification = 2

class esriDatasetFileStatAccessMode(Enumeration):
    __slots__ = ['esriDatasetFileStatAccessUnknown',
                 'esriDatasetFileStatAccessWrite',
                 'esriDatasetFileStatAccessReadOnly',
                 'esriDatasetFileStatAccessReadWrite']
    esriDatasetFileStatAccessUnknown = 0
    esriDatasetFileStatAccessWrite = 2
    esriDatasetFileStatAccessReadOnly = 4
    esriDatasetFileStatAccessReadWrite = 6

class esriEditDataChangesType(Enumeration):
    __slots__ = ['esriEditDataChangesWithinSession',
                 'esriEditDataChangesWithinOperation']
    esriEditDataChangesWithinSession = 0
    esriEditDataChangesWithinOperation = 1

class esriGeodatabaseServerClassType(Enumeration):
    __slots__ = ['esriServerClassUnknown',
                 'esriServerClassPersonal',
                 'esriServerClassWorkgroup',
                 'esriServerClassEnterprise']
    esriServerClassUnknown = 0
    esriServerClassPersonal = 1
    esriServerClassWorkgroup = 2
    esriServerClassEnterprise = 3

class esriGeometryStorage(Enumeration):
    __slots__ = ['esriGeometryStorageBinary',
                 'esriGeometryStorageLOB',
                 'esriGeometryStorageWKB',
                 'esriGeometryStorageST',
                 'esriGeometryStorageSDO',
                 'esriGeometryStoragePostGIS',
                 'esriGeometryStorageMSSQLGeometry',
                 'esriGeometryStorageMSSQLGeography']
    esriGeometryStorageBinary = 0
    esriGeometryStorageLOB = 1
    esriGeometryStorageWKB = 2
    esriGeometryStorageST = 3
    esriGeometryStorageSDO = 4
    esriGeometryStoragePostGIS = 5
    esriGeometryStorageMSSQLGeometry = 6
    esriGeometryStorageMSSQLGeography = 7

class esriWorkspaceConnectionStatus(Enumeration):
    __slots__ = ['esriWCSUp',
                 'esriWCSDown',
                 'esriWCSAvailable']
    esriWCSUp = 0
    esriWCSDown = 1
    esriWCSAvailable = 2

class esriConfigurationKeywordType(Enumeration):
    __slots__ = ['esriConfigurationKeywordGeneral',
                 'esriConfigurationKeywordNetwork',
                 'esriConfigurationKeywordTopology',
                 'esriConfigurationKeywordNetworkDataset',
                 'esriConfigurationKeywordTerrain',
                 'esriConfigurationKeywordMosaic']
    esriConfigurationKeywordGeneral = 1
    esriConfigurationKeywordNetwork = 2
    esriConfigurationKeywordTopology = 3
    esriConfigurationKeywordNetworkDataset = 4
    esriConfigurationKeywordTerrain = 5
    esriConfigurationKeywordMosaic = 6

class esriRelRole(Enumeration):
    __slots__ = ['esriRelRoleAny',
                 'esriRelRoleOrigin',
                 'esriRelRoleDestination']
    esriRelRoleAny = 1
    esriRelRoleOrigin = 2
    esriRelRoleDestination = 3

class esriFeatureType(Enumeration):
    __slots__ = ['esriFTSimple',
                 'esriFTSimpleJunction',
                 'esriFTSimpleEdge',
                 'esriFTComplexJunction',
                 'esriFTComplexEdge',
                 'esriFTAnnotation',
                 'esriFTCoverageAnnotation',
                 'esriFTDimension',
                 'esriFTRasterCatalogItem']
    esriFTSimple = 1
    esriFTSimpleJunction = 7
    esriFTSimpleEdge = 8
    esriFTComplexJunction = 9
    esriFTComplexEdge = 10
    esriFTAnnotation = 11
    esriFTCoverageAnnotation = 12
    esriFTDimension = 13
    esriFTRasterCatalogItem = 14

class esriRelCardinality(Enumeration):
    __slots__ = ['esriRelCardinalityOneToOne',
                 'esriRelCardinalityOneToMany',
                 'esriRelCardinalityManyToMany']
    esriRelCardinalityOneToOne = 1
    esriRelCardinalityOneToMany = 2
    esriRelCardinalityManyToMany = 3

class esriRelNotification(Enumeration):
    __slots__ = ['esriRelNotificationNone',
                 'esriRelNotificationForward',
                 'esriRelNotificationBackward',
                 'esriRelNotificationBoth']
    esriRelNotificationNone = 1
    esriRelNotificationForward = 2
    esriRelNotificationBackward = 3
    esriRelNotificationBoth = 4

class esriRuleType(Enumeration):
    __slots__ = ['esriRTAttribute',
                 'esriRTEdgeConnectivity',
                 'esriRTJunctionConnectivity',
                 'esriRTSpatial',
                 'esriRTRelationship',
                 'esriRTTopology']
    esriRTAttribute = 1
    esriRTEdgeConnectivity = 2
    esriRTJunctionConnectivity = 3
    esriRTSpatial = 4
    esriRTRelationship = 5
    esriRTTopology = 6

class rstPixelType(Enumeration):
    __slots__ = ['PT_UNKNOWN',
                 'PT_U1',
                 'PT_U2',
                 'PT_U4',
                 'PT_UCHAR',
                 'PT_CHAR',
                 'PT_USHORT',
                 'PT_SHORT',
                 'PT_ULONG',
                 'PT_LONG',
                 'PT_FLOAT',
                 'PT_DOUBLE',
                 'PT_COMPLEX',
                 'PT_DCOMPLEX',
                 'PT_CSHORT',
                 'PT_CLONG']
    PT_UNKNOWN = -1
    PT_U1 = 0
    PT_U2 = 1
    PT_U4 = 2
    PT_UCHAR = 3
    PT_CHAR = 4
    PT_USHORT = 5
    PT_SHORT = 6
    PT_ULONG = 7
    PT_LONG = 8
    PT_FLOAT = 9
    PT_DOUBLE = 10
    PT_COMPLEX = 11
    PT_DCOMPLEX = 12
    PT_CSHORT = 13
    PT_CLONG = 14

class rstResamplingTypes(Enumeration):
    __slots__ = ['RSP_NearestNeighbor',
                 'RSP_BilinearInterpolation',
                 'RSP_CubicConvolution',
                 'RSP_Majority',
                 'RSP_BilinearInterpolationPlus',
                 'RSP_BilinearGaussBlur',
                 'RSP_BilinearGaussBlurPlus']
    RSP_NearestNeighbor = 0
    RSP_BilinearInterpolation = 1
    RSP_CubicConvolution = 2
    RSP_Majority = 3
    RSP_BilinearInterpolationPlus = 4
    RSP_BilinearGaussBlur = 5
    RSP_BilinearGaussBlurPlus = 6

class esriRasterCompressionType(Enumeration):
    __slots__ = ['esriRasterCompressionUnknown',
                 'esriRasterCompressionUncompressed',
                 'esriRasterCompressionLZ77',
                 'esriRasterCompressionJPEG',
                 'esriRasterCompressionJPEG2000',
                 'esriRasterCompressionPackBits',
                 'esriRasterCompressionLZW',
                 'esriRasterCompressionRLE',
                 'esriRasterCompressionCCITTG3',
                 'esriRasterCompressionCCITTG4',
                 'esriRasterCompressionCCITTRLE',
                 'esriRasterCompressionJPEGYCbCr']
    esriRasterCompressionUnknown = -1
    esriRasterCompressionUncompressed = 0
    esriRasterCompressionLZ77 = 1
    esriRasterCompressionJPEG = 2
    esriRasterCompressionJPEG2000 = 4
    esriRasterCompressionPackBits = 5
    esriRasterCompressionLZW = 6
    esriRasterCompressionRLE = 7
    esriRasterCompressionCCITTG3 = 8
    esriRasterCompressionCCITTG4 = 9
    esriRasterCompressionCCITTRLE = 10
    esriRasterCompressionJPEGYCbCr = 11

class esriDataExtractionType(Enumeration):
    __slots__ = ['esriDataExtraction',
                 'esriDataCheckOut',
                 'esriDataReplication',
                 'esriDataXMLExport',
                 'esriDataXMLCheckOut',
                 'esriDataXMLExtraction',
                 'esriDataXMLReplication',
                 'esriRegisterXMLCheckOut',
                 'esriRegisterCheckOut',
                 'esriRegisterXMLReplica',
                 'esriRegisterReplica']
    esriDataExtraction = 1
    esriDataCheckOut = 2
    esriDataReplication = 3
    esriDataXMLExport = 4
    esriDataXMLCheckOut = 5
    esriDataXMLExtraction = 6
    esriDataXMLReplication = 7
    esriRegisterXMLCheckOut = 8
    esriRegisterCheckOut = 9
    esriRegisterXMLReplica = 10
    esriRegisterReplica = 11

class esriReplicaModelType(Enumeration):
    __slots__ = ['esriModelTypeSimple',
                 'esriModelTypeFullGeodatabase']
    esriModelTypeSimple = 1
    esriModelTypeFullGeodatabase = 2

class esriReplicaType(Enumeration):
    __slots__ = ['esriReplicaTypeChild',
                 'esriReplicaTypeParent',
                 'esriCheckOutTypeChild',
                 'esriCheckOutTypeParent',
                 'esriReplicaTypeAny']
    esriReplicaTypeChild = 1
    esriReplicaTypeParent = 2
    esriCheckOutTypeChild = 4
    esriCheckOutTypeParent = 8
    esriReplicaTypeAny = 15

class esriRowsType(Enumeration):
    __slots__ = ['esriRowsTypeNone',
                 'esriRowsTypeAll',
                 'esriRowsTypeFilter']
    esriRowsTypeNone = 0
    esriRowsTypeAll = 1
    esriRowsTypeFilter = 2

class esriTopologyState(Enumeration):
    __slots__ = ['esriTSUnanalyzed',
                 'esriTSAnalyzedWithErrors',
                 'esriTSAnalyzedWithoutErrors',
                 'esriTSEmpty']
    esriTSUnanalyzed = 0
    esriTSAnalyzedWithErrors = 1
    esriTSAnalyzedWithoutErrors = 2
    esriTSEmpty = 3

class esriTopologySelectionResultEnum(Enumeration):
    __slots__ = ['esriTopologySelectionResultNew',
                 'esriTopologySelectionResultAdd',
                 'esriTopologySelectionResultSubtract',
                 'esriTopologySelectionResultXOR']
    esriTopologySelectionResultNew = 0
    esriTopologySelectionResultAdd = 1
    esriTopologySelectionResultSubtract = 2
    esriTopologySelectionResultXOR = 3

class esriGPMessageType(Enumeration):
    __slots__ = ['esriGPMessageTypeInformative',
                 'esriGPMessageTypeProcessDefinition',
                 'esriGPMessageTypeProcessStart',
                 'esriGPMessageTypeProcessStop',
                 'esriGPMessageTypeWarning',
                 'esriGPMessageTypeError',
                 'esriGPMessageTypeEmpty',
                 'esriGPMessageTypeGDBError',
                 'esriGPMessageTypeAbort']
    esriGPMessageTypeInformative = 0
    esriGPMessageTypeProcessDefinition = 1
    esriGPMessageTypeProcessStart = 2
    esriGPMessageTypeProcessStop = 3
    esriGPMessageTypeWarning = 50
    esriGPMessageTypeError = 100
    esriGPMessageTypeEmpty = 101
    esriGPMessageTypeGDBError = 102
    esriGPMessageTypeAbort = 200

class esriNetworkErrors(Enumeration):
    __slots__ = ['NETWORK_E_INVALID_FEATURE_WORKSPACE',
                 'NETWORK_E_INVALID_NETWORK_NAME',
                 'NETWORK_E_UNKNOWN_NETWORK_TYPE',
                 'NETWORK_E_CANNOT_OPEN_TABLE',
                 'NETWORK_E_CANNOT_CREATE_TABLE',
                 'NETWORK_E_INVALID_ELEMENT_CLASSES',
                 'NETWORK_E_INVALID_WEIGHT_DEFINITIONS',
                 'NETWORK_E_INVALID_WEIGHT_ASSOCIATION',
                 'NETWORK_E_INVALID_NETWORK_ACCESS',
                 'NETWORK_E_INVALID_FORMAT_NUMBER',
                 'NETWORK_E_OLD_WORKSPACE_VERSION',
                 'NETWORK_E_CANNOT_CLOSE_TABLE',
                 'NETWORK_E_CANNOT_DELETE_TABLE',
                 'NETWORK_E_UNKNOWN_ERROR',
                 'NETWORK_E_REACHED_MEMORY_QUOTA',
                 'NETWORK_E_INVALID_ENGINE_CONNECTION',
                 'NETWORK_E_INVALID_ENGINE',
                 'NETWORK_E_INVALID_ENGINE_FSTAR',
                 'NETWORK_E_UNKNOWN_ENGINE_ERROR',
                 'NETWORK_E_INVALID_NETWORK',
                 'NETWORK_E_NETWORK_ALREADY_EXISTS',
                 'NETWORK_E_INVALID_USER_CLASS_ID',
                 'NETWORK_E_INVALID_WEIGHT_NAME',
                 'NETWORK_E_READ_ONLY_NETWORK',
                 'NETWORK_E_EDIT_SESSION_IN_PROGRESS',
                 'NETWORK_E_UPDATE_SESSION_IN_PROGRESS',
                 'NETWORK_E_NO_EDIT_SESSION_IN_PROGRESS',
                 'NETWORK_E_NO_UPDATE_SESSION_IN_PROGRESS',
                 'NETWORK_E_PROPERTY_IS_ALREADY_SET',
                 'NETWORK_E_INVALID_ELEMENT_TYPE',
                 'NETWORK_E_INVALID_WEIGHT_TYPE',
                 'NETWORK_E_INVALID_ELEMENT_ID',
                 'NETWORK_E_INVALID_USER_ID',
                 'NETWORK_E_INVALID_USER_SUB_ID',
                 'NETWORK_E_OVERFLOW_USER_CLASS_ID',
                 'NETWORK_E_OVERFLOW_USER_ID',
                 'NETWORK_E_OVERFLOW_USER_SUB_ID',
                 'NETWORK_E_OVERFLOW_ELEMENT_ID',
                 'NETWORK_E_INVALID_WEIGHT_ID',
                 'NETWORK_E_COPY_OVERFLOW_USER_CLASS_ID',
                 'NETWORK_E_INVALID_WEIGHT_VALUE',
                 'NETWORK_E_NO_EDIT_OPERATION_IN_PROGRESS',
                 'NETWORK_E_EDIT_OPERATION_IN_PROGRESS',
                 'NETWORK_E_LOOP_EDGE_CHAIN',
                 'NETWORK_E_CANNOT_READ_TABLE',
                 'NETWORK_E_CANNOT_WRITE_TABLE',
                 'NETWORK_E_CORRUPT_DATA',
                 'NETWORK_E_INVALID_WEIGHT_ELEMENT_TYPES',
                 'NETWORK_E_INVALID_BITGATE_SIZE',
                 'NETWORK_E_ELEMENT_TYPE_MISMATCH',
                 'NETWORK_E_INVALID_TABLE_NAME',
                 'NETWORK_E_INVALID_FIELD_NAME',
                 'NETWORK_E_OLD_NETWORK_VERSION',
                 'NETWORK_E_DUPLICATE_TURN',
                 'NETWORK_E_BAD_TURN_INTERIOR_EXTERIOR_CONFLICT',
                 'NETWORK_E_BAD_TURN_DUPLICATED_FIRST_LAST_EDGES',
                 'NETWORK_E_BAD_TURN_SELF_LOOP',
                 'NETWORK_E_BAD_TURN_UNCONNECTED_ANCHOR',
                 'NETWORK_E_BAD_TURN_UNCONNECTED_EDGES',
                 'NETWORK_E_ADD_WEIGHT_HAS_ELEMENTS',
                 'NETWORK_E_DELETE_WEIGHT_HAS_ASSOCIATIONS',
                 'NETWORK_E_DUPLICATE_PROPERTY',
                 'NETWORK_E_UNDEFINED_PROPERTY',
                 'NETWORK_E_MISSING_PROPERTY',
                 'NETWORK_E_CANNOT_OPEN_LOGICAL_NETWORK']
    NETWORK_E_INVALID_FEATURE_WORKSPACE = -2147205119
    NETWORK_E_INVALID_NETWORK_NAME = -2147205118
    NETWORK_E_UNKNOWN_NETWORK_TYPE = -2147205117
    NETWORK_E_CANNOT_OPEN_TABLE = -2147205116
    NETWORK_E_CANNOT_CREATE_TABLE = -2147205115
    NETWORK_E_INVALID_ELEMENT_CLASSES = -2147205114
    NETWORK_E_INVALID_WEIGHT_DEFINITIONS = -2147205113
    NETWORK_E_INVALID_WEIGHT_ASSOCIATION = -2147205112
    NETWORK_E_INVALID_NETWORK_ACCESS = -2147205111
    NETWORK_E_INVALID_FORMAT_NUMBER = -2147205110
    NETWORK_E_OLD_WORKSPACE_VERSION = -2147205109
    NETWORK_E_CANNOT_CLOSE_TABLE = -2147205108
    NETWORK_E_CANNOT_DELETE_TABLE = -2147205107
    NETWORK_E_UNKNOWN_ERROR = -2147205106
    NETWORK_E_REACHED_MEMORY_QUOTA = -2147205105
    NETWORK_E_INVALID_ENGINE_CONNECTION = -2147205104
    NETWORK_E_INVALID_ENGINE = -2147205103
    NETWORK_E_INVALID_ENGINE_FSTAR = -2147205102
    NETWORK_E_UNKNOWN_ENGINE_ERROR = -2147205101
    NETWORK_E_INVALID_NETWORK = -2147205100
    NETWORK_E_NETWORK_ALREADY_EXISTS = -2147205099
    NETWORK_E_INVALID_USER_CLASS_ID = -2147205098
    NETWORK_E_INVALID_WEIGHT_NAME = -2147205097
    NETWORK_E_READ_ONLY_NETWORK = -2147205096
    NETWORK_E_EDIT_SESSION_IN_PROGRESS = -2147205095
    NETWORK_E_UPDATE_SESSION_IN_PROGRESS = -2147205094
    NETWORK_E_NO_EDIT_SESSION_IN_PROGRESS = -2147205093
    NETWORK_E_NO_UPDATE_SESSION_IN_PROGRESS = -2147205092
    NETWORK_E_PROPERTY_IS_ALREADY_SET = -2147205091
    NETWORK_E_INVALID_ELEMENT_TYPE = -2147205090
    NETWORK_E_INVALID_WEIGHT_TYPE = -2147205089
    NETWORK_E_INVALID_ELEMENT_ID = -2147205088
    NETWORK_E_INVALID_USER_ID = -2147205087
    NETWORK_E_INVALID_USER_SUB_ID = -2147205086
    NETWORK_E_OVERFLOW_USER_CLASS_ID = -2147205085
    NETWORK_E_OVERFLOW_USER_ID = -2147205084
    NETWORK_E_OVERFLOW_USER_SUB_ID = -2147205083
    NETWORK_E_OVERFLOW_ELEMENT_ID = -2147205082
    NETWORK_E_INVALID_WEIGHT_ID = -2147205081
    NETWORK_E_COPY_OVERFLOW_USER_CLASS_ID = -2147205080
    NETWORK_E_INVALID_WEIGHT_VALUE = -2147205079
    NETWORK_E_NO_EDIT_OPERATION_IN_PROGRESS = -2147205078
    NETWORK_E_EDIT_OPERATION_IN_PROGRESS = -2147205077
    NETWORK_E_LOOP_EDGE_CHAIN = -2147205076
    NETWORK_E_CANNOT_READ_TABLE = -2147205075
    NETWORK_E_CANNOT_WRITE_TABLE = -2147205074
    NETWORK_E_CORRUPT_DATA = -2147205073
    NETWORK_E_INVALID_WEIGHT_ELEMENT_TYPES = -2147205072
    NETWORK_E_INVALID_BITGATE_SIZE = -2147205071
    NETWORK_E_ELEMENT_TYPE_MISMATCH = -2147205070
    NETWORK_E_INVALID_TABLE_NAME = -2147205069
    NETWORK_E_INVALID_FIELD_NAME = -2147205068
    NETWORK_E_OLD_NETWORK_VERSION = -2147205067
    NETWORK_E_DUPLICATE_TURN = -2147205066
    NETWORK_E_BAD_TURN_INTERIOR_EXTERIOR_CONFLICT = -2147205065
    NETWORK_E_BAD_TURN_DUPLICATED_FIRST_LAST_EDGES = -2147205064
    NETWORK_E_BAD_TURN_SELF_LOOP = -2147205063
    NETWORK_E_BAD_TURN_UNCONNECTED_ANCHOR = -2147205062
    NETWORK_E_BAD_TURN_UNCONNECTED_EDGES = -2147205061
    NETWORK_E_ADD_WEIGHT_HAS_ELEMENTS = -2147205060
    NETWORK_E_DELETE_WEIGHT_HAS_ASSOCIATIONS = -2147205059
    NETWORK_E_DUPLICATE_PROPERTY = -2147205058
    NETWORK_E_UNDEFINED_PROPERTY = -2147205057
    NETWORK_E_MISSING_PROPERTY = -2147205056
    NETWORK_E_CANNOT_OPEN_LOGICAL_NETWORK = -2147205055

class esriNetworkStatus(Enumeration):
    __slots__ = ['esriNSInvalidConnection',
                 'esriNSNetworkAlreadyExist',
                 'esriNSReadOnlyNetwork',
                 'esriNSCannotOpenTables',
                 'esriNSCannotCreateTables',
                 'esriNSInvalidElementClasses',
                 'esriNSInvalidWeights',
                 'esriNSUnknownStatus',
                 'esriNSValidNetwork',
                 'esriNSInvalidName']
    esriNSInvalidConnection = 0
    esriNSNetworkAlreadyExist = 1
    esriNSReadOnlyNetwork = 2
    esriNSCannotOpenTables = 3
    esriNSCannotCreateTables = 4
    esriNSInvalidElementClasses = 5
    esriNSInvalidWeights = 6
    esriNSUnknownStatus = 7
    esriNSValidNetwork = 8
    esriNSInvalidName = 9

class esriWeightType(Enumeration):
    __slots__ = ['esriWTNull',
                 'esriWTBitGate',
                 'esriWTInteger',
                 'esriWTSingle',
                 'esriWTDouble',
                 'esriWTBoolean']
    esriWTNull = 0
    esriWTBitGate = 1
    esriWTInteger = 2
    esriWTSingle = 3
    esriWTDouble = 4
    esriWTBoolean = 5

class esriElementType(Enumeration):
    __slots__ = ['esriETNone',
                 'esriETJunction',
                 'esriETEdge',
                 'esriETTurn']
    esriETNone = 0
    esriETJunction = 1
    esriETEdge = 2
    esriETTurn = 3

class esriNetworkType(Enumeration):
    __slots__ = ['esriNTStreetNetwork',
                 'esriNTUtilityNetwork']
    esriNTStreetNetwork = 0
    esriNTUtilityNetwork = 1

class esriNetworkAccess(Enumeration):
    __slots__ = ['esriNAReadOnly',
                 'esriNAReadWrite',
                 'esriNACreate']
    esriNAReadOnly = 0
    esriNAReadWrite = 1
    esriNACreate = 2

class esriNetworkClassAncillaryRole(Enumeration):
    __slots__ = ['esriNCARNone',
                 'esriNCARSourceSink']
    esriNCARNone = 0
    esriNCARSourceSink = 1

class esriFlowDirection(Enumeration):
    __slots__ = ['esriFDIndeterminate',
                 'esriFDWithFlow',
                 'esriFDAgainstFlow',
                 'esriFDUninitialized']
    esriFDIndeterminate = 3
    esriFDWithFlow = 1
    esriFDAgainstFlow = 2
    esriFDUninitialized = 0

class fdoError(Enumeration):
    __slots__ = ['FDO_E_LOADING_RESOURCE',
                 'FDO_E_INDEX_OUT_OF_RANGE',
                 'FDO_E_NOT_SUPPORTED',
                 'FDO_E_NOT_ENOUGH_SPACE',
                 'FDO_E_NO_PERMISSION',
                 'FDO_E_IMPLEMENTATION',
                 'FDO_E_INVALID_SQL',
                 'FDO_E_NETWORK',
                 'FDO_E_DATE_CONVERSION',
                 'FDO_E_OBJECT_IS_DELETED',
                 'FDO_E_WORKSPACE_NOT_COMPATIBLE',
                 'FDO_E_OBJECT_IS_READONLY',
                 'FDO_E_OBJECT_IN_USE',
                 'FDO_E_OBJECT_MAX_REACHED',
                 'FDO_E_OBJECT_IS_LOCKED',
                 'FDO_E_INVALID_ENVELOPE',
                 'FDO_E_FILE_IO',
                 'FDO_E_LICENSE_FAILURE',
                 'FDO_E_DBMS_ERROR',
                 'FDO_E_COERCING',
                 'FDO_E_BINDING',
                 'FDO_E_SCHEMA_LOCK_CONFLICT',
                 'FDO_E_MUST_BE_OWNER',
                 'FDO_E_OBJECT_NOT_LOCKED',
                 'FDO_E_ESRI_PROVIDER_CONNECT_INVALID',
                 'FDO_E_CONNECTION_CANCELLED',
                 'FDO_E_INVALID_RELEASE',
                 'FDO_E_NO_SYSTEM_TABLES',
                 'FDO_E_CONNECT_PARAMETERS_CONFLICT',
                 'FDO_E_FIELDINFO_SYSTEM_TABLE_INCONSISTENCY',
                 'FDO_E_NO_EDIT_LICENSE',
                 'FDO_E_NO_SCHEMA_LICENSE',
                 'FDO_E_NO_OPERATION_LICENSE',
                 'FDO_E_OPERATION_CANNOT_BE_UNDONE',
                 'FDO_E_EDIT_OPERATION_REQUIRED',
                 'FDO_E_RECONCILE_CANNOT_BE_UNDONE',
                 'FDO_E_OBJECT_NOT_INITIALIZED',
                 'FDO_E_INTEGER_REQUIRES_64BITS',
                 'FDO_E_SYNTAX_ERROR',
                 'FDO_E_LICENSE_NOT_INITIALIZED',
                 'FDO_E_TABLE_SIZE_EXCEEDED',
                 'FDO_E_SECURED_DATA_NO_ACCESS',
                 'FDO_E_INVALID_SQLQUERY',
                 'FDO_E_INVALID_NAME',
                 'FDO_E_LOCK_CONFLICT',
                 'FDO_E_UPGRADE_NEEDS_WRITE_ACCESS',
                 'FDO_E_NEGATIVE_FID',
                 'FDO_E_INCOMPATIBLE_CLIENT_VERSION',
                 'FDO_E_NEW_SCHEMA_REQUIRED',
                 'FDO_E_NON_FORWARD_COMPATIBLE_CONNECTION',
                 'FDO_E_WORKSPACE_NOT_CONNECTED',
                 'FDO_E_WORKSPACE_ALREADY_CONNECTED',
                 'FDO_E_SERVER_NOT_FOUND',
                 'FDO_E_SERVER_NOT_AVAILABLE',
                 'FDO_E_SERVER_MAX_CONNECTIONS',
                 'FDO_E_USER_INVALID',
                 'FDO_E_USER_NOACCESS',
                 'FDO_E_DATABASE_NOT_FOUND',
                 'FDO_E_DATABASE_NOT_AVAILABLE',
                 'FDO_E_WORKSPACE_ALREADY_EXISTS',
                 'FDO_E_WORKSPACE_EXTENSION_CREATE_FAILED',
                 'FDO_E_WORKSPACE_EXTENSION_INIT_FAILED',
                 'FDO_E_WORKSPACE_EXTENSION_DATASET_CREATE_FAILED',
                 'FDO_E_WORKSPACE_EXTENSION_DATASET_RENAME_FAILED',
                 'FDO_E_WORKSPACE_EXTENSION_DATASET_DELETE_FAILED',
                 'FDO_E_WORKSPACE_EXTENSION_DUP_NAME',
                 'FDO_E_WORKSPACE_EXTENSION_DUP_GUID',
                 'FDO_E_WORKSPACE_EXTENSION_NO_REG_PRIV',
                 'FDO_E_WORKSPACE_READONLY',
                 'FDO_E_DATASET_NOT_SUPPORTED_AT_WORKSPACE_LEVEL',
                 'FDO_E_WORKSPACE_NO_KEYSETTABLEMANAGER',
                 'FDO_E_WORKSPACE_NO_KEYSETTABLE',
                 'FDO_E_WORKSPACE_INVALID_KEYSETID',
                 'FDO_E_WORKSPACEFACTORY_BAD_CONNECTIONPROPERTY',
                 'FDO_E_WORKSPACE_EXTENSION_NOT_SUPPORTED',
                 'FDO_E_WORKSPACE_EXTENSION_DATASET_MODIFY_FAILED',
                 'FDO_E_WORKSPACE_NO_SPATIAL_TYPE',
                 'FDO_E_HISTORICAL_MARKER_ALREADY_EXISTS',
                 'FDO_E_OLEDB_NOT_SUPPORTED_ON_LINUX',
                 'FDO_E_DATASET_NOT_FOUND',
                 'FDO_E_DATASET_INVALID_NAME',
                 'FDO_E_DATASET_ALREADY_EXISTS',
                 'FDO_E_DATASET_CANNOT_RENAME',
                 'FDO_E_DATASET_INVALID_TYPE',
                 'FDO_E_DATASET_CANNOT_DELETE',
                 'FDO_E_DATASET_EXTENSION_TYPE_NOT_FOUND',
                 'FDO_E_DATASET_PASTE_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_DATASET_CANNOT_RENAME_NOT_SUPPORTED',
                 'FDO_E_DATASET_EXTENSION_CREATE_FAILED',
                 'FDO_E_DATASET_EXTENSION_INIT_FAILED',
                 'FDO_E_CANNOT_CREATE_LOW_PREC_DATASET_IN_HIGH_PREC_DB',
                 'FDO_E_CANNOT_CREATE_HIGH_PREC_DATASET_IN_LOW_PREC_DB',
                 'FDO_E_DATASET_TYPE_NOT_PRESENT',
                 'FDO_E_CANNOT_COPY_CLASS_WITHOUT_ALL_CONTROLLERS',
                 'FDO_E_DATASET_TYPE_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_DATASET_INVALID_DEFINITION',
                 'FDO_E_DATASET_INVALID_ID',
                 'FDO_E_CANNOT_RENAME_WHILE_EDITING',
                 'FDO_E_CANNOT_MODIFY_SCHEMA_WHILE_EDITING',
                 'FDO_E_INCOMPATIBLE_CLIENT_CANNOT_OPEN_DATASET',
                 'FDO_E_TABLE_NOT_FOUND',
                 'FDO_E_TABLE_INVALID_NAME',
                 'FDO_E_TABLE_ALREADY_EXISTS',
                 'FDO_E_TABLE_NO_OID_FIELD',
                 'FDO_E_TABLE_INVALID_KEYWORD',
                 'FDO_E_TABLE_NOT_VERSIONED',
                 'FDO_E_TABLE_DUPLICATE_COLUMN',
                 'FDO_E_TABLE_COLUMN_NOT_FOUND',
                 'FDO_E_TABLE_IN_USE',
                 'FDO_E_TABLE_RECORD_LENGTH_EXCEEDED',
                 'FDO_E_TABLE_VERSIONED',
                 'FDO_E_TABLE_MOVINGEDITSTOBASE',
                 'FDO_E_TABLE_ARCHIVING',
                 'FDO_E_TABLE_NOT_ARCHIVING',
                 'FDO_E_TABLE_READONLY_HISTORICAL',
                 'FDO_E_TABLE_NO_ATTACHMENTS',
                 'FDO_E_TABLE_ATTACHMENTS_NOT_SUPPORTED',
                 'FDO_E_TABLE_CANNOT_ANALYZE_TABLE_VIEW',
                 'FDO_E_TABLE_NO_GLOBALID_FIELD',
                 'FDO_E_ATTACHMENTS_ON_ATTACHMENT_TABLE_NOT_SUPPORTED',
                 'FDO_E_TABLE_NOT_EMPTY',
                 'FDO_E_ATTACHMENTS_ONLY_ON_GEODATABASES',
                 'FDO_E_NON_SIMPLE_DATASET_ARCHIVING',
                 'FDO_E_FEATURECLASS_NOT_FOUND',
                 'FDO_E_FEATURECLASS_BAD_EXTENT',
                 'FDO_E_FEATURECLASS_INVALID_NAME',
                 'FDO_E_FEATURECLASS_ALREADY_EXISTS',
                 'FDO_E_FEATURECLASS_LOAD_MODE',
                 'FDO_E_FEATURECLASS_NETWORK_CANNOT_DELETE',
                 'FDO_E_FEATURECLASS_BAD_DEFAULT_SUBTYPE_CODE',
                 'FDO_E_FEATURECLASS_NO_SUBTYPE_FIELD',
                 'FDO_E_FEATURECLASS_NETWORK_CANNOT_RENAME',
                 'FDO_E_FEATURECLASS_SUBTYPE_EXISTS',
                 'FDO_E_FEATURECLASS_FD_NOT_EDITABLE',
                 'FDO_E_FEATURECLASS_SUBTYPE_FIELD_CANNOT_RENAME',
                 'FDO_E_SUBTYPE_CODE_INVALID',
                 'FDO_E_SUBTYPE_CODE_DOES_NOT_EXIST',
                 'FDO_E_SUBTYPE_CODE_IS_NULL',
                 'FDO_E_SUBTYPE_CODE_NOT_INTEGER',
                 'FDO_E_FEATURECLASS_NO_SHAPE_COLUMN',
                 'FDO_E_FEATURECLASS_TOPOLOGY_CANNOT_DELETE',
                 'FDO_E_SUBTYPE_CODE_HAS_ASSOCIATED_TOPOLOGY_RULE',
                 'FDO_E_SUBTYPE_IN_USE_CANNOT_DELETE',
                 'FDO_E_SUBTYPE_CANNOT_ADD',
                 'FDO_E_SPATIAL_CACHE_EMPTY_EXTENT',
                 'FDO_E_FEATURECLASS_MEMBER_OF_CONTROLLER',
                 'FDO_E_FEATURECLASS_CANT_OPEN_GEOMETRICNETWORK',
                 'FDO_E_FEATURECLASS_CANT_OPEN_TOPOLOGY',
                 'FDO_E_FEATURECLASS_NETWORK_DATASET_CANNOT_DELETE',
                 'FDO_E_FEATURECLASS_INSUFFICIENT_PRIVILEGE',
                 'FDO_E_PLANARGRAPH_NOT_FOUND',
                 'FDO_E_GEOMETRICNETWORK_NOT_FOUND',
                 'FDO_E_ADD_FEATURE_TO_NETWORK',
                 'FDO_E_CREATE_LOGICAL_NETWORK',
                 'FDO_E_GEOMETRICNETWORK_ALREADY_EXISTS',
                 'FDO_E_ZERO_LENGTH_EDGE_ELEMENT',
                 'FDO_E_GEOMETRICNETWORK_CANNOT_RENAME',
                 'FDO_E_GEOMETRICNETWORK_ELEMENT_INCONSISTENCY',
                 'FDO_E_NETWORK_FEATURES_HAVE_HOMOGENEOUS_Z_SUPPORT',
                 'FDO_E_NO_ASSOCIATED_ERROR_TABLE',
                 'FDO_E_FEATURE_ELEMENT_MISSING_POINT_GEOMETRY',
                 'FDO_E_NETWORK_FEATURES_HAVE_HOMOGENEOUS_M_SUPPORT',
                 'FDO_E_CLASS_EXISTS_WITH_ORPHAN_JUNCTION_CLASS_NAME',
                 'FDO_E_GEOMETRICNETWORK_INVALID_NAME',
                 'FDO_E_INVALID_FIELD_FOR_WEIGHT_ASSOCIATION',
                 'FDO_E_INVALID_CLASS_FOR_WEIGHT_ASSOCIATION',
                 'FDO_E_CONNECTED_FEATURE_DOES_NOT_EXIST',
                 'FDO_E_OPEN_LOGICAL_NETWORK',
                 'FDO_E_NETWORK_ELEMENT_ID_BEYOND_MAX',
                 'FDO_E_EDGE_ENDPOINT_NOT_COINCIDENT',
                 'FDO_E_CANNOT_DELETE_POPULATED_FEATURE_CLASS',
                 'FDO_E_CANNOT_DELETE_ORPHAN_JUNCTION_CLASS',
                 'FDO_E_EMPTY_GEOMETRICNETWORK_IS_NOT_ALLOWED',
                 'FDO_E_DATASET_UNEDITABLE',
                 'FDO_E_START_EDITING',
                 'FDO_E_SAVE_EDIT_SESSION',
                 'FDO_E_STOP_EDITING_WITH_SAVE',
                 'FDO_E_STOP_EDITING_WITH_DISCARD',
                 'FDO_E_NOT_ALLOWED_WHILE_EDITING',
                 'FDO_E_COULD_NOT_CLEAN_COVERAGE',
                 'FDO_E_NO_INTEGRATEABLE_LAYERS',
                 'FDO_E_INVALID_TOPOLOGY',
                 'FDO_E_NOT_EDITING',
                 'FDO_E_COULD_NOT_ENCODE_INFO_ITEM',
                 'FDO_E_NODE_NOT_ON_ARC',
                 'FDO_E_CANNOT_REMOVE_LAST_LABEL',
                 'FDO_E_CANNOT_MOVE_LABEL_OUT_OF_POLYGON',
                 'FDO_E_INVALID_POLYGON_LABEL_DELETED',
                 'FDO_E_CANNOT_BREAK_TOPOLOGY',
                 'FDO_E_CANNOT_CREATE_UNIVERSE_LABEL',
                 'FDO_E_CANNOT_MOVE_UNIVERSE_LABELS',
                 'FDO_E_INVALID_GEOMETRY',
                 'FDO_E_CORUPTED_COVERAGE',
                 'FDO_E_DUPLICATE_FIELD_NAMES',
                 'FDO_E_CANNOT_EDIT_ZS',
                 'FDO_E_NO_POLYGONS_CREATED',
                 'FDO_E_ABORT_EDITS_FAILED',
                 'FDO_E_FLUSH_EDITS_FAILED',
                 'FDO_E_CANNOT_EDIT_TABLE_WITH_UNIQ_USER_INDEX',
                 'FDO_E_CANNOT_EDIT_DATASET_WITH_UNIQ_USER_INDEX',
                 'FDO_E_CANNOT_REBUILD_POLYGONS',
                 'FDO_E_USERTRANSACTION_NOT_ALLOWED',
                 'FDO_E_NOT_EDITABLE_EDITSESSIONMODE',
                 'FDO_E_CANNOT_EDIT_COMPRESSED_DATASET',
                 'FDO_E_CANNOT_UPDATE_COMPRESSED_DATASET',
                 'FDO_E_COMPRESSED_DATASET_NOT_SUPPORTED',
                 'FDO_E_INVALID_OPERATION_FOR_EDITSESSIONMODE',
                 'FDO_E_COMPRESSED_DATASET_NOT_INSTALLED',
                 'FDO_E_MODIFIED_GEOMETRY_MUST_BE_COPY',
                 'FDO_E_PENDING_BACKGROUND_PROCESSES',
                 'FDO_E_PENDING_GEOPROCESSING_INPUT',
                 'FDO_E_PROPERTY_NO_SUBTYPE',
                 'FDO_E_PROPERTY_NOT_FOUND',
                 'FDO_E_FIELD_INVALID',
                 'FDO_E_FIELD_INVALID_NAME',
                 'FDO_E_FIELD_NOT_FOUND',
                 'FDO_E_FIELD_ALREADY_EXISTS',
                 'FDO_E_FIELD_INVALID_TYPE',
                 'FDO_E_FIELD_UNSUPPORTED_OPERATION',
                 'FDO_E_FIELD_INVALID_GEOMETRY_TYPE',
                 'FDO_E_FIELD_NOT_EDITABLE',
                 'FDO_E_FIELD_NOT_NULLABLE',
                 'FDO_E_FIELD_CANNOT_DELETE_WEIGHT_FIELD',
                 'FDO_E_FIELD_CANNOT_DELETE_REQUIRED_FIELD',
                 'FDO_E_FIELD_CANNOT_DELETE_SUBTYPE_FIELD',
                 'FDO_E_FIELD_CANNOT_DELETE_LAST_FIELD',
                 'FDO_E_FIELD_IS_KEYWORD',
                 'FDO_E_FIELD_CANNOT_DELETE_RELKEY_FIELD',
                 'FDO_E_FIELD_MISSING_GEOMETRY_DEF',
                 'FDO_E_FIELD_IS_RELKEY_FIELD',
                 'FDO_E_FIELD_USED_BY_EDITOR_TRACKING',
                 'FDO_E_FIELD_IS_SUBTYPE_FIELD',
                 'FDO_E_FIELD_IS_NETWORK_ANCILLARY_FIELD',
                 'FDO_E_FIELD_IS_WEIGHT_FIELD',
                 'FDO_E_FIELD_IS_ENABLED_FIELD',
                 'FDO_E_FIELD_IS_REQUIRED_FIELD',
                 'FDO_E_FIELD_ALIAS_EXCEEDS_MAX_LENGTH',
                 'FDO_E_FIELD_IS_ASSOCIATED_WITH_DOMAIN',
                 'FDO_E_FIELD_HAS_DEFAULT_VALUE',
                 'FDO_E_FIELD_IS_ASSOCIATED_WITH_INDEX',
                 'FDO_E_FIELDS_INVALID',
                 'FDO_E_FIELDS_NOT_FOUND',
                 'FDO_E_FIELDS_NO_GEOMETRY',
                 'FDO_E_FIELDS_NO_OID',
                 'FDO_E_FIELDS_MULTIPLE_OIDS',
                 'FDO_E_FIELDS_MULTIPLE_GEOMETRIES',
                 'FDO_E_FIELDS_MODEL_NAME_ALREADY_EXISTS',
                 'FDO_E_FIELDS_MULTIPLE_RASTERS',
                 'FDO_E_FIELDS_MULTIPLE_GLOBALIDS',
                 'FDO_E_FIELDS_EMPTY',
                 'FDO_E_INDEX_WRONG_TYPE',
                 'FDO_E_INDEX_ALREADY_EXISTS',
                 'FDO_E_INDEX_NOT_FOUND',
                 'FDO_E_INDEX_NOT_ALLOWED',
                 'FDO_E_METADATA_TABLE_NOT_FOUND',
                 'FDO_E_METADATA_FIELD_NOT_FOUND',
                 'FDO_E_METADATA_ADDING_DATASET',
                 'FDO_E_METADATA_ADDING_FEATURECLASS',
                 'FDO_E_METADATA_BAD_CLSID',
                 'FDO_E_SPATIALREL_NOT_SUPPORTED',
                 'FDO_E_SPATIALREL_UNKNOWN',
                 'FDO_E_FEATURETYPE_NOT_SUPPORTED',
                 'FDO_E_FEATURETYPE_UNKNOWN',
                 'FDO_E_DATASETTYPE_NOT_SUPPORTED',
                 'FDO_E_DATASETTYPE_UNKNOWN',
                 'FDO_E_DRAWSTYLE_NOT_SUPPORTED',
                 'FDO_E_DRAWSTYLE_UNKNOWN',
                 'FDO_E_DRAWPHASE_NOT_SUPPORTED',
                 'FDO_E_DRAWPHASE_UNKNOWN',
                 'FDO_E_GEOMETRY_TYPE_NOT_SUPPORTED',
                 'FDO_E_MULTIPART_EDGE_FEATURE_NOT_SUPPORTED',
                 'FDO_E_GEOMETRY_HAS_NO_M_VALUES',
                 'FDO_E_GEOMETRY_HAS_NO_Z_VALUES',
                 'FDO_E_GEOMETRY_HAS_NULL_Z_VALUES',
                 'FDO_E_GEOMETRY_NOT_SIMPLE',
                 'FDO_E_GEOMETRY_CANNOT_HAVE_Z_VALUES',
                 'FDO_E_GEOMETRY_SPATIAL_REFERENCE',
                 'FDO_E_GEOMETRY_MISSING_SPATIAL_REFERENCE',
                 'FDO_E_CANT_STORE_VERTICAL_SEGMENT',
                 'FDO_E_ROW_NO_SETUPINTERFACE',
                 'FDO_E_ROW_NOT_FOUND',
                 'FDO_E_ROW_NO_OID',
                 'FDO_E_ROW_NO_OBJCLASS',
                 'FDO_E_ROW_BAD_VALUE',
                 'FDO_E_ROW_ALREADY_EXISTS',
                 'FDO_E_COMPARE_TYPE_MISMATCH',
                 'FDO_E_CANNOT_STORE_RECYCLED_ROW_IN_EDIT_SESSION',
                 'FDO_E_FEATURE_NO_ANNO',
                 'FDO_E_FEATURE_BAD_SHAPE',
                 'FDO_E_FEATURE_OUTSIDE_SPATIALREF',
                 'FDO_E_FEATURE_SHAPE_UPDATE_BLOCKED',
                 'FDO_E_FEATURE_AREA_LENGTH_UPDATE_FAILED',
                 'FDO_E_ON_DELETE_MESSAGE_FAILED',
                 'FDO_E_DELETE_PART_OBJECTS_FAILED',
                 'FDO_E_DELETE_RELATIONSHIPS_FAILED',
                 'FDO_E_ON_CHANGED_MESSAGE_FAILED',
                 'FDO_E_MOVE_RELATED_FEATURES_FAILED',
                 'FDO_E_ROTATE_RELATED_FEATURES_FAILED',
                 'FDO_E_FEATURE_DELETED',
                 'FDO_E_FEATURE_VALUE_TYPE_MISMATCH',
                 'FDO_E_CUSTOM_COMPLEX_JUNCTION_NOT_IMPLEMENTED',
                 'FDO_E_FEATURE_NOT_FOUND',
                 'FDO_E_SPLIT_NOT_SUPPORTED_ON_GEOMETRY_TYPE',
                 'FDO_E_SPLITTING_POLYGONS_REQUIRES_POLYLINE',
                 'FDO_E_SPLITTING_POLYLINES_REQUIRES_POINT',
                 'FDO_E_SPLIT_POINT_YIELDS_ZERO_LENGTH_POLYLINE',
                 'FDO_E_CUTTER_YIELDS_ZERO_AREA_POLYGON',
                 'FDO_E_FEATURE_NO_GEOMETRY',
                 'FDO_E_REQUIRED_INTERFACE_NOT_FOUND',
                 'FDO_E_REQUIRED_CONNECTION_POINT_NOT_FOUND',
                 'FDO_E_INVALID_CONNECTION_POINT_GEOMETRY',
                 'FDO_E_FEATURE_EMPTY_GEOMETRY',
                 'FDO_E_CURSOR_WRONG_TYPE',
                 'FDO_E_CURSOR_INVALID',
                 'FDO_E_CURSOR_FINISHED',
                 'FDO_E_CURSOR_LOCKED',
                 'FDO_E_CURSOR_INVALIDATED',
                 'FDO_E_VERSION_BAD_NAME',
                 'FDO_E_VERSION_UNEDITABLE',
                 'FDO_E_VERSION_HAS_CONFLICTS',
                 'FDO_E_VERSION_ALREADY_EXISTS',
                 'FDO_E_VERSION_REDEFINED',
                 'FDO_E_VERSION_NOT_FOUND',
                 'FDO_E_VERSION_INVALID_STATE',
                 'FDO_E_VERSION_NOT_OWNER',
                 'FDO_E_VERSION_HAS_CHILDREN',
                 'FDO_E_VERSION_NOT_RECONCILED',
                 'FDO_E_VERSION_IS_PROTECTED',
                 'FDO_E_VERSION_IN_USE',
                 'FDO_E_VERSION_BEING_EDITED',
                 'FDO_E_VERSION_BEING_RECONCILED',
                 'FDO_E_RECONCILE_VERSION_NOT_AVAILABLE',
                 'FDO_E_VERSION_RECONCILE_LOST',
                 'FDO_E_FAILED_FILTERING_CONFLICTS',
                 'FDO_E_RECONCILE_VERSION_NOT_ANCESTOR',
                 'FDO_E_VERSION_CANNOT_BE_RECONCILED',
                 'FDO_E_VERSION_NOT_HISTORICAL',
                 'FDO_E_VERSION_REQUIRES_PARENT_RECONCILE',
                 'FDO_E_DATASOURCE_LOCK_FAILED',
                 'FDO_E_DATASOURCE_RELEASELOCK_FAILED',
                 'FDO_E_DATASOURCE_INUSE_ELSEWHERE',
                 'FDO_E_INVALID_UNITS',
                 'FDO_E_INVALID_GRID_SIZE',
                 'FDO_E_SPATIALREF_MISMATCH',
                 'FDO_E_SPATIALREF_INVALID',
                 'FDO_E_INVALID_M_DOMAIN',
                 'FDO_E_CANNOT_ALTER_SPATIALREF',
                 'FDO_E_NO_SPATIALREF',
                 'FDO_E_HIGH_PRECISION_SR_NOT_SUPPORTED',
                 'FDO_E_LOW_PRECISION_SR_NOT_SUPPORTED',
                 'FDO_E_CANNOT_ALTER_PRECISION',
                 'FDO_E_SPATIALREF_PRECISION_MISMATCH',
                 'FDO_E_NEGATIVE_RESOLUTION',
                 'FDO_E_RESOLUTION_DOES_NOT_MATCH_PERMISSIBLE_VALUE',
                 'FDO_E_INVALID_XY_DOMAIN',
                 'FDO_E_GRID_SIZE_TOO_SMALL',
                 'FDO_E_INVALID_Z_DOMAIN',
                 'FDO_E_SPATIALREF_Z_MISMATCH',
                 'FDO_E_SPATIALFILTER_INVALID',
                 'FDO_E_SPATIALFILTER_INVALID_GEOMETRY',
                 'FDO_E_SPATIALFILTER_INVALID_SPATIAL_RELATION',
                 'FDO_E_SELECTION_MISMATCH',
                 'FDO_E_SELECTION_INVALID_TYPE',
                 'FDO_E_SELECTION_NO_SELECTABLE_LAYERS',
                 'FDO_E_OBJECTCLASS_COULD_NOT_CREATE_CLASS_INSTANCE',
                 'FDO_E_OBJECTCLASS_COULD_NOT_CREATE_CLASS_EXTENSION',
                 'FDO_E_OBJECTCLASS_COULD_NOT_INITIALIZE_CLASS_EXTENSION',
                 'FDO_E_OBJECTCLASS_REQUIRES_AN_EDIT_SESSION',
                 'FDO_E_OBJECTCLASS_MODEL_NAME_ALREADY_EXISTS',
                 'FDO_E_CLASS_FD_NOT_EDITABLE',
                 'FDO_E_COULD_NOT_LOAD_CLASS_EXTENSION_PROPERTIES',
                 'FDO_E_OBJECTCLASS_NOT_REGISTERED',
                 'FDO_E_OBJECTCLASS_IN_CONTROLLER_DATASET',
                 'FDO_E_SE_FAILURE',
                 'FDO_E_SE_INVALID_LAYERINFO_OBJECT',
                 'FDO_E_SE_NO_ANNOTATION',
                 'FDO_E_SE_FINISHED',
                 'FDO_E_SE_SDE_NOT_STARTED',
                 'FDO_E_SE_UNCHANGED',
                 'FDO_E_SE_CONNECTIONS_EXCEEDED',
                 'FDO_E_SE_LOGIN_NOT_ALLOWED',
                 'FDO_E_SE_INVALID_USER',
                 'FDO_E_SE_NET_FAILURE',
                 'FDO_E_SE_NET_TIMEOUT',
                 'FDO_E_SE_OUT_OF_SVMEM',
                 'FDO_E_SE_OUT_OF_CLMEM',
                 'FDO_E_SE_OUT_OF_CONTEXT',
                 'FDO_E_SE_NO_ACCESS',
                 'FDO_E_SE_TOO_MANY_LAYERS',
                 'FDO_E_SE_NO_LAYER_SPECIFIED',
                 'FDO_E_SE_LAYER_LOCKED',
                 'FDO_E_SE_LAYER_EXISTS',
                 'FDO_E_SE_LAYER_NOEXIST',
                 'FDO_E_SE_LAYER_INUSE',
                 'FDO_E_SE_ROW_NOEXIST',
                 'FDO_E_SE_ROW_EXISTS',
                 'FDO_E_SE_LAYER_MISMATCH',
                 'FDO_E_SE_NO_PERMISSIONS',
                 'FDO_E_SE_INVALID_NOT_NULL',
                 'FDO_E_SE_INVALID_SHAPE',
                 'FDO_E_SE_INVALID_LAYER_NUMBER',
                 'FDO_E_SE_INVALID_ENTITY_TYPE',
                 'FDO_E_SE_INVALID_SEARCH_METHOD',
                 'FDO_E_SE_INVALID_ETYPE_MASK',
                 'FDO_E_SE_BIND_CONFLICT',
                 'FDO_E_SE_INVALID_GRIDSIZE',
                 'FDO_E_SE_INVALID_LOCK_MODE',
                 'FDO_E_SE_ETYPE_NOT_ALLOWED',
                 'FDO_E_SE_INVALID_NUM_OF_PTS',
                 'FDO_E_SE_TABLE_NOEXIST',
                 'FDO_E_SE_ATTR_NOEXIST',
                 'FDO_E_SE_LICENSE_FAILURE',
                 'FDO_E_SE_OUT_OF_LICENSES',
                 'FDO_E_SE_INVALID_COLUMN_VALUE',
                 'FDO_E_SE_INVALID_SQL',
                 'FDO_E_SE_LOG_NOEXIST',
                 'FDO_E_SE_LOG_NOACCESS',
                 'FDO_E_SE_LOG_NOTOPEN',
                 'FDO_E_SE_LOG_IO_ERROR',
                 'FDO_E_SE_NO_SHAPES',
                 'FDO_E_SE_NO_LOCKS',
                 'FDO_E_SE_LOCK_CONFLICT',
                 'FDO_E_SE_OUT_OF_LOCKS',
                 'FDO_E_SE_DB_IO_ERROR',
                 'FDO_E_SE_STREAM_IN_PROGRESS',
                 'FDO_E_SE_INVALID_COLUMN_TYPE',
                 'FDO_E_SE_TOPO_ERROR',
                 'FDO_E_SE_ATTR_CONV_ERROR',
                 'FDO_E_SE_INVALID_COLUMN_DEF',
                 'FDO_E_SE_INVALID_SHAPE_BUF_SIZE',
                 'FDO_E_SE_INVALID_ENVELOPE',
                 'FDO_E_SE_TEMP_IO_ERROR',
                 'FDO_E_SE_GSIZE_TOO_SMALL',
                 'FDO_E_SE_LICENSE_EXPIRED',
                 'FDO_E_SE_TABLE_EXISTS',
                 'FDO_E_SE_INDEX_EXISTS',
                 'FDO_E_SE_INDEX_NOEXIST',
                 'FDO_E_SE_INVALID_POINTER',
                 'FDO_E_SE_INVALID_PARAM_VALUE',
                 'FDO_E_SE_ALL_SLIVERS',
                 'FDO_E_SE_TRANS_IN_PROGRESS',
                 'FDO_E_SE_IOMGR_NO_DBMS_CONNECT',
                 'FDO_E_SE_DUPLICATE_ARC',
                 'FDO_E_SE_INVALID_ANNO_OBJECT',
                 'FDO_E_SE_PT_NO_EXIST',
                 'FDO_E_SE_PTS_NOT_ADJACENT',
                 'FDO_E_SE_INVALID_MID_PT',
                 'FDO_E_SE_INVALID_END_PT',
                 'FDO_E_SE_INVALID_RADIUS',
                 'FDO_E_SE_LOAD_ONLY_LAYER',
                 'FDO_E_SE_LAYERS_NOT_FOUND',
                 'FDO_E_SE_FILE_IO_ERROR',
                 'FDO_E_SE_BLOB_SIZE_TOO_LARGE',
                 'FDO_E_SE_CORRIDOR_OUT_OF_BOUNDS',
                 'FDO_E_SE_SHAPE_INTEGRITY_ERROR',
                 'FDO_E_SE_NOT_IMPLEMENTED_YET',
                 'FDO_E_SE_CAD_EXISTS',
                 'FDO_E_SE_INVALID_TRANSID',
                 'FDO_E_SE_INVALID_LAYER_NAME',
                 'FDO_E_SE_INVALID_LAYER_KEYWORD',
                 'FDO_E_SE_INVALID_RELEASE',
                 'FDO_E_SE_VERSION_TBL_EXISTS',
                 'FDO_E_SE_COLUMN_NOT_BOUND',
                 'FDO_E_SE_INVALID_INDICATOR_VALUE',
                 'FDO_E_SE_INVALID_CONNECTION',
                 'FDO_E_SE_INVALID_DBA_PASSWORD',
                 'FDO_E_SE_PATH_NOT_FOUND',
                 'FDO_E_SE_SDEHOME_NOT_SET',
                 'FDO_E_SE_NOT_TABLE_OWNER',
                 'FDO_E_SE_PROCESS_NOT_FOUND',
                 'FDO_E_SE_INVALID_DBMS_LOGIN',
                 'FDO_E_SE_PASSWORD_TIMEOUT',
                 'FDO_E_SE_INVALID_SERVER',
                 'FDO_E_SE_IOMGR_NOT_AVAILABLE',
                 'FDO_E_SE_SERVICE_NOT_FOUND',
                 'FDO_E_SE_INVALID_STATS_TYPE',
                 'FDO_E_SE_INVALID_DISTINCT_TYPE',
                 'FDO_E_SE_INVALID_GRANT_REVOKE',
                 'FDO_E_SE_INVALID_SDEHOME',
                 'FDO_E_SE_INVALID_STREAM',
                 'FDO_E_SE_TOO_MANY_STREAMS',
                 'FDO_E_SE_OUT_OF_MUTEXES',
                 'FDO_E_SE_CONNECTION_LOCKED',
                 'FDO_E_SE_CONNECTION_IN_USE',
                 'FDO_E_SE_NOT_A_SELECT_STATEMENT',
                 'FDO_E_SE_FUNCTION_SEQUENCE_ERROR',
                 'FDO_E_SE_WRONG_COLUMN_TYPE',
                 'FDO_E_SE_PTABLE_LOCKED',
                 'FDO_E_SE_PTABLE_IN_USE',
                 'FDO_E_SE_STABLE_LOCKED',
                 'FDO_E_SE_STABLE_IN_USE',
                 'FDO_E_SE_INVALID_FILTER_TYPE',
                 'FDO_E_SE_NO_CAD',
                 'FDO_E_SE_INSTANCE_NOT_AVAILABLE',
                 'FDO_E_SE_INSTANCE_TOO_EARLY',
                 'FDO_E_SE_INVALID_SYSTEM_UNITS',
                 'FDO_E_SE_INVALID_UNITS',
                 'FDO_E_SE_INVALID_CAD_OBJECT',
                 'FDO_E_SE_VERSION_NOEXIST',
                 'FDO_E_SE_INVALID_SPATIAL_CONSTRAINT',
                 'FDO_E_SE_INVALID_STREAM_TYPE',
                 'FDO_E_SE_INVALID_SPATIAL_COLUMN',
                 'FDO_E_SE_NO_SPATIAL_MASKS',
                 'FDO_E_SE_IOMGR_NOT_FOUND',
                 'FDO_E_SE_SYSTEM_IS_CLIENT_ONLY',
                 'FDO_E_SE_MULTIPLE_SPATIAL_COLS',
                 'FDO_E_SE_INVALID_SHAPE_OBJECT',
                 'FDO_E_SE_INVALID_PARTNUM',
                 'FDO_E_SE_INCOMPATIBLE_SHAPES',
                 'FDO_E_SE_INVALID_PART_OFFSET',
                 'FDO_E_SE_INCOMPATIBLE_COORDREFS',
                 'FDO_E_SE_COORD_OUT_OF_BOUNDS',
                 'FDO_E_SE_LAYER_CACHE_FULL',
                 'FDO_E_SE_INVALID_COORDREF_OBJECT',
                 'FDO_E_SE_INVALID_COORDSYS_ID',
                 'FDO_E_SE_INVALID_COORDSYS_DESC',
                 'FDO_E_SE_INVALID_ROW_ID_LAYER',
                 'FDO_E_SE_PROJECTION_ERROR',
                 'FDO_E_SE_ARRAY_BYTES_EXCEEDED',
                 'FDO_E_SE_POLY_SHELLS_OVERLAP',
                 'FDO_E_SE_TOO_FEW_POINTS',
                 'FDO_E_SE_INVALID_PART_SEPARATOR',
                 'FDO_E_SE_INVALID_POLYGON_CLOSURE',
                 'FDO_E_SE_INVALID_OUTER_SHELL',
                 'FDO_E_SE_ZERO_AREA_POLYGON',
                 'FDO_E_SE_POLYGON_HAS_VERTICAL_LINE',
                 'FDO_E_SE_OUTER_SHELLS_OVERLAP',
                 'FDO_E_SE_SELF_INTERSECTING',
                 'FDO_E_SE_INVALID_EXPORT_FILE',
                 'FDO_E_SE_READ_ONLY_SHAPE',
                 'FDO_E_SE_INVALID_DATA_SOURCE',
                 'FDO_E_SE_INVALID_STREAM_SPEC',
                 'FDO_E_SE_INVALID_ALTER_OPERATION',
                 'FDO_E_SE_INVALID_SPATIAL_COL_NAME',
                 'FDO_E_SE_INVALID_DATABASE',
                 'FDO_E_SE_SPATIAL_SQL_NOT_INSTALLED',
                 'FDO_E_SE_NORM_DIM_INFO_NOT_FOUND',
                 'FDO_E_SE_NORM_DIM_TAB_VALUE_NOT_FOUND',
                 'FDO_E_SE_UNSUPPORTED_NORMALIZED_OPERATION',
                 'FDO_E_SE_INVALID_REGISTERED_LAYER_OPTION',
                 'FDO_E_SE_READ_ONLY',
                 'FDO_E_SE_NO_SDE_ROWID_COLUMN',
                 'FDO_E_SE_READ_ONLY_COLUMN',
                 'FDO_E_SE_INVALID_VERSION_NAME',
                 'FDO_E_SE_STATE_NOEXIST',
                 'FDO_E_SE_INVALID_STATEINFO_OBJECT',
                 'FDO_E_SE_VERSION_HAS_MOVED',
                 'FDO_E_SE_STATE_HAS_CHILDREN',
                 'FDO_E_SE_PARENT_NOT_CLOSED',
                 'FDO_E_SE_VERSION_EXISTS',
                 'FDO_E_SE_TABLE_NOT_MULTIVERSION',
                 'FDO_E_SE_STATE_USED_BY_VERSION',
                 'FDO_E_SE_INVALID_VERSIONINFO_OBJECT',
                 'FDO_E_SE_INVALID_STATE_ID',
                 'FDO_E_SE_SDETRACELOC_NOT_SET',
                 'FDO_E_SE_ERROR_LOADING_SSA',
                 'FDO_E_SE_TOO_MANY_STATES',
                 'FDO_E_SE_STATES_ARE_SAME',
                 'FDO_E_SE_NO_ROWID_COLUMN',
                 'FDO_E_SE_NO_STATE_SET',
                 'FDO_E_SE_SSA_FUNCTION_ERROR',
                 'FDO_E_SE_INVALID_REGINFO_OBJECT',
                 'FDO_E_SE_NO_COMMON_LINEAGE',
                 'FDO_E_SE_STATE_INUSE',
                 'FDO_E_SE_STATE_TREE_INUSE',
                 'FDO_E_SE_INVALID_RASTER_COLUMN',
                 'FDO_E_SE_RASTERCOLUMN_EXISTS',
                 'FDO_E_SE_INVALID_MVTABLE_INDEX',
                 'FDO_E_SE_INVALID_STORAGE_TYPE',
                 'FDO_E_SE_AMBIGUOUS_NIL_SHAPE',
                 'FDO_E_SE_INVALID_BYTE_ORDER',
                 'FDO_E_SE_INVALID_GEOMETRY_TYPE',
                 'FDO_E_SE_INVALID_NUM_MEASURES',
                 'FDO_E_SE_INVALID_NUM_PARTS',
                 'FDO_E_SE_BINARY_TOO_SMALL',
                 'FDO_E_SE_SHAPE_TEXT_TOO_LONG',
                 'FDO_E_SE_SHAPE_TEXT_ERROR',
                 'FDO_E_SE_TOO_MANY_PARTS',
                 'FDO_E_SE_TYPE_MISMATCH',
                 'FDO_E_SE_SQL_PARENTHESIS_MISMATCH',
                 'FDO_E_SE_NIL_SHAPE_NOT_ALLOWED',
                 'FDO_E_SE_INSTANCE_ALREADY_RUNNING',
                 'FDO_E_SE_UNSUPPORTED_OPERATION',
                 'FDO_E_SE_INVALID_EXTERNAL_LAYER_OPTION',
                 'FDO_E_SE_NORMALIZE_VALUE_NOT_FOUND',
                 'FDO_E_SE_INVALID_QUERY_TYPE',
                 'FDO_E_SE_NO_TRACE_LIBRARY',
                 'FDO_E_SE_TRACE_ON',
                 'FDO_E_SE_TRACE_OFF',
                 'FDO_E_SE_SCL_SYNTAX_ERROR',
                 'FDO_E_SE_TABLE_REGISTERED',
                 'FDO_E_SE_INVALID_REGISTRATION_ID',
                 'FDO_E_SE_TABLE_NOREGISTERED',
                 'FDO_E_SE_TOO_MANY_REGISTRATIONS',
                 'FDO_E_SE_DELETE_NOT_ALLOWED',
                 'FDO_E_SE_RASTERCOLUMN_INUSE',
                 'FDO_E_SE_RASTERCOLUMN_NOEXIST',
                 'FDO_E_SE_INVALID_RASTERCOLUMN_NUMBER',
                 'FDO_E_SE_TOO_MANY_RASTERCOLUMNS',
                 'FDO_E_SE_INVALID_RASTER_NUMBER',
                 'FDO_E_SE_NO_REQUEST_STATUS',
                 'FDO_E_SE_NO_REQUEST_RESULTS',
                 'FDO_E_SE_RASTERBAND_EXISTS',
                 'FDO_E_SE_RASTERBAND_NOEXIST',
                 'FDO_E_SE_RASTER_EXISTS',
                 'FDO_E_SE_RASTER_NOEXIST',
                 'FDO_E_SE_TOO_MANY_RASTERBANDS',
                 'FDO_E_SE_TOO_MANY_RASTERS',
                 'FDO_E_SE_VIEW_EXISTS',
                 'FDO_E_SE_VIEW_NOEXIST',
                 'FDO_E_SE_LOCK_EXISTS',
                 'FDO_E_SE_ROWLOCK_MASK_CONFLICT',
                 'FDO_E_SE_NOT_IN_RASTER',
                 'FDO_E_SE_INVALID_RASBANDINFO_OBJECT',
                 'FDO_E_SE_INVALID_RASCOLINFO_OBJECT',
                 'FDO_E_SE_INVALID_RASTERINFO_OBJECT',
                 'FDO_E_SE_INVALID_RASTERBAND_NUMBER',
                 'FDO_E_SE_MULTIPLE_RASTER_COLS',
                 'FDO_E_SE_TABLE_SCHEMA_IS_LOCKED',
                 'FDO_E_SE_INVALID_LOGINFO_OBJECT',
                 'FDO_E_SE_SQL_TOO_LONG',
                 'FDO_E_SE_UNSUPPORTED_ON_VIEW',
                 'FDO_E_SE_LOG_EXISTS',
                 'FDO_E_SE_SDE_WARNING',
                 'FDO_E_SE_ETYPE_CHANGED',
                 'FDO_E_SE_NO_ROWS_DELETED',
                 'FDO_E_SE_TOO_MANY_DISTINCTS',
                 'FDO_E_SE_NULL_VALUE',
                 'FDO_E_SE_NO_ROWS_UPDATED',
                 'FDO_E_SE_NO_CPGCVT',
                 'FDO_E_SE_NO_CPGHOME',
                 'FDO_E_SE_DBMS_DOES_NOT_SUPPORT',
                 'FDO_E_SE_ROWLOCKING_ENABLED',
                 'FDO_E_SE_ROWLOCKING_NOT_ENABLED',
                 'FDO_E_SE_LOG_IS_OPEN',
                 'FDO_E_SE_SPATIALREF_EXISTS',
                 'FDO_E_SE_SPATIALREF_NOEXIST',
                 'FDO_E_SE_SPATIALREF_IN_USE',
                 'FDO_E_SE_INVALID_SPATIALREFINFO_OBJECT',
                 'FDO_E_SE_INVALID_FUNCTION_ID',
                 'FDO_E_SE_MOSAIC_NOT_ALLOWED',
                 'FDO_E_SE_PASSWORD_EXPIRED',
                 'FDO_E_SE_NO_ARCSDE_LICENSE',
                 'FDO_E_SE_NO_ARCSDE_LICENSE_NO_PERMISSION',
                 'FDO_E_SE_NO_ARCSDE_LICENSE_SQLEXPRESS',
                 'FDO_E_DEFAULT_VALUE_NOT_NULLABLE',
                 'FDO_E_DEFAULT_VALUE_INVALID',
                 'FDO_E_OBJECT_IN_ANOTHER_FEATUREDATASET',
                 'FDO_E_ONLY_SIMPLE_FEATURES_SUPPORTED',
                 'FDO_E_XML_PARSE_ERROR',
                 'FDO_E_TOPOLOGY_ILLEGAL_RESHAPE',
                 'FDO_E_TOPOLOGY_ALREADY_EXISTS',
                 'FDO_E_TOPOLOGY_NOT_FOUND',
                 'FDO_E_TOPOLOGY_CANNOT_RENAME',
                 'FDO_E_INVALID_FEATURE_TYPE_FOR_TOPOLOGY',
                 'FDO_E_INVALID_GEOMETRY_TYPE_FOR_TOPOLOGY',
                 'FDO_E_INVALID_TOPOLOGY_RULE',
                 'FDO_E_TOPOLOGY_WORKSPACE_EXTENSION_NOT_FOUND',
                 'FDO_E_CANNOT_RESET_CLUSTER_TOLERANCE',
                 'FDO_E_TOPOLOGIES_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_TOPOLOGY_INVALID_WEIGHT',
                 'FDO_E_CANNOT_MODIFY_TOPOLOGY_ERROR_FEATURE',
                 'FDO_E_TOPOCLASSES_SYSTEM_TABLE_INCONSISTENCY',
                 'FDO_E_INVALID_CLUSTER_TOLERANCE',
                 'FDO_E_INVALID_GEOMETRY_TYPE_FOR_TOPOLOGY_RULE',
                 'FDO_E_NOT_SUPPORTED_ON_TOPOLOGY_ERROR_FEATURE',
                 'FDO_E_CANNOT_MODIFY_SYSTEM_MANAGED_TABLES',
                 'FDO_E_TOPOLOGY_EDGE_NOT_SELECTABLE',
                 'FDO_E_CLASS_ALREADY_MEMBER_OF_TOPOLOGY',
                 'FDO_E_EMPTY_ENVELOPE_FOR_CLEAN',
                 'FDO_E_INVALID_TOPOLOGY_ID',
                 'FDO_E_TOPOLOGY_ENGINE_FAILURE',
                 'FDO_E_TOPOLOGY_ENGINE_OVERPROC_FAILURE',
                 'FDO_E_INVALID_TOPOLOGY_RULE_TYPE',
                 'FDO_E_NO_PARTIAL_REBUILD',
                 'FDO_E_CANNOT_ADD_REGISTERED_CLASS_TO_TOPOLOGY',
                 'FDO_E_TOPOLOGY_ERROR_OVERFLOW',
                 'FDO_E_NETWORK_CANNOT_RENAME',
                 'FDO_E_NETWORK_INVALID_TYPE',
                 'FDO_E_NETWORK_ALREADY_EXISTS',
                 'FDO_E_NETWORK_INVALID_GEOMETRY_TYPE',
                 'FDO_E_NETWORK_NOT_FOUND',
                 'FDO_E_VERSIONING_NOT_SUPPORTED',
                 'FDO_E_CLASS_NOT_IN_TOPOLOGIES_FEATURE_DATASET',
                 'FDO_E_TOPOLOGY_HAS_NO_CLASSES',
                 'FDO_E_TOPOLOGY_INVALID_RANK',
                 'FDO_E_OUT_OF_PHYSICAL_MEMORY',
                 'FDO_E_TOPOLOGY_OPERATION_CANCELLED',
                 'FDO_E_CLASS_NOT_IN_TOPOLOGY',
                 'FDO_E_MODIFY_EDGE_ENDPOINT',
                 'FDO_E_CANNOT_ADD_STANDALONE_CLASS_TO_TOPOLOGY',
                 'FDO_E_CLASS_IN_TOPOLOGY_REQUIRES_EDIT_SESSION',
                 'FDO_E_CANNOT_ADD_RULE_TO_VERSIONED_TOPOLOGY',
                 'FDO_E_TOPOLOGY_SCHEMA_LOCK_CONFLICT',
                 'FDO_E_DIRTY_AREA_OUTSIDE_SPATIAL_DOMAIN',
                 'FDO_E_TOPOLOGY_INVALID_NAME',
                 'FDO_E_TOPOLOGY_ENGINE_TEMP_SPACE_EXHAUSTED',
                 'FDO_E_INCONSISTENT_TOPOLOGY_RULE',
                 'FDO_E_UNSUPPORTED_TOPOLOGY_RULE',
                 'FDO_E_INVALID_TOPOLOGY_RULE_CLASS_ASSIGNMENT',
                 'FDO_E_OPERATION_NOT_SUPPORTED_IN_EDIT_SESSION',
                 'FDO_E_TOPOLOGY_EMPTY_GEOMETRY',
                 'FDO_E_TOPOLOGY_EXTENT_TOO_LARGE',
                 'FDO_E_Z_CLUSTER_TOLERANCE_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_OPERATION_REQUIRES_EDIT_SESSION',
                 'FDO_E_OPERATION_NOT_SUPPORTED_IN_EDIT_OPERATION',
                 'FDO_E_TOPOGRAPH_NOT_BUILT',
                 'FDO_E_TOPOGRAPH_CORRUPT',
                 'FDO_E_CANT_MERGE_VERTICALEDGES',
                 'FDO_E_INCONSISTANT_MERGE_PARENTS',
                 'FDO_E_EDGE_SET_NOT_CONNECTED',
                 'FDO_E_TOPOLOGY_RULE_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_CANT_MERGE_BRANCHINGEDGES',
                 'FDO_E_NOT_PSEUDONODE',
                 'FDO_E_CLASS_IN_NETWORK_REQUIRES_EDIT_SESSION',
                 'FDO_E_CANNOT_ADD_VERSIONED_CLASS_TO_NON_VERSIONED_TOPOLOGY',
                 'FDO_E_CANNOT_ADD_NON_VERSIONED_CLASS_TO_VERSIONED_TOPOLOGY',
                 'FDO_E_TOPOLOGIES_SCHEMA_CHANGES_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_TERRAIN_NOT_FOUND',
                 'FDO_E_NAME_STRING_SYNTAX',
                 'FDO_E_INVALID_IMPORT_XML',
                 'FDO_E_REQUIRED_XML_ELEMENT_NOT_FOUND',
                 'FDO_E_XML_EXPORT_DATASET_NOT_FOUND',
                 'FDO_E_CLASS_NOT_REPLICABLE',
                 'FDO_E_SYNCHRONIZATION_CONFLICTS',
                 'FDO_E_CANNOT_SYNCHRONIZE',
                 'FDO_E_REPLICA_NOT_FOUND',
                 'FDO_E_RECONCILE_FAILED',
                 'FDO_E_INVALID_REPLICA',
                 'FDO_E_GENERATION_OUT_OF_ORDER',
                 'FDO_E_SYNCHRONIZATION_HAS_CONFLICTS',
                 'FDO_E_REPLICATION_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_REPLICATION_NOT_SUPPORTED',
                 'FDO_E_MISSING_ACKNOWLEDGEMENT',
                 'FDO_E_CANNOT_SEND_TRANSMISSION',
                 'FDO_E_REPLICA_LOCKED',
                 'FDO_E_RELATED_DATASET_IS_REFERENCED_BY_REPLICA',
                 'FDO_E_READONLY_REPLICA',
                 'FDO_E_OLD_MESSAGE',
                 'FDO_E_REPLICA_IN_SENDING_DATA_STATE',
                 'FDO_E_REPLICA_CAN_ONLY_IMPORT_ACKNOWLEDGMENT',
                 'FDO_E_REPLICA_NO_UNACKNOWLEDGED_GENERATIONS',
                 'FDO_E_MULTIGEN_REPLICAS_NOT_SUPPORTED_IN_WORKSPACE',
                 'FDO_E_CHECKOUTS_CANNOT_REEXPORT_CHANGES',
                 'FDO_E_REPLICA_RECEIVER_CANNOT_REEXPORT_CHANGES',
                 'FDO_E_REPLICA_RECEIVER_CANNOT_EXPORT_CHANGES',
                 'FDO_E_CANNOT_CHECKOUT_HIGH_PREC_DATA_IN_LOW_PREC_DATASET',
                 'FDO_E_CANNOT_REPLICATE_LOW_PRECISION_DATA',
                 'FDO_E_REPLICA_INVALID_OUTPUT_XML_FILE',
                 'FDO_NO_MATCH_DATASETS_FOUND_FOR_REGISTER_REPLICAS',
                 'FDO_E_NON_SIMPLE_DATASET_CANNOT_BE_REGISTERED_BY_REPLICA',
                 'FDO_E_INVALID_REPLICA_NAME',
                 'FDO_E_REPLICA_OLD_ACK',
                 'FDO_E_REPLICA_SCHEMA_CHANGES_WRONG_DIRECTION',
                 'FDO_E_CANNOT_CREATE_EMPTY_REPLICA',
                 'FDO_E_INVALID_DATA_FOR_THIS_OPERATION',
                 'FDO_E_REPLICA_SYNC_VERSION_NOT_YET_POSTED',
                 'FDO_E_CHILD_REPLICA_CANNOT_BE_CREATED_IN_PARENTDB',
                 'FDO_E_GLOBALID_FIELD_REFERENCED_BY_REPLICA_CANNOT_BE_DELETED',
                 'FDO_E_MUST_BE_REPLICA_OWNER',
                 'FDO_E_REPLICA_NAME_ALEARDY_EXISTS',
                 'FDO_E_CANNOT_REGISTER_EMPTY_REPLICA',
                 'FDO_UNREGISTER_GLOBALID_NOT_SUPPORTED',
                 'FDO_REGISTER_NULLABLE_GLOBALID_NOT_SUPPORTED',
                 'FDO_REGISTER_VERSIONED_GLOBALID_NOT_SUPPORTED',
                 'FDO_ONEWAY_REPLICA_USING_ARCHIVING_NOT_SUPPORTED_IN_NAMED_VERSIONS',
                 'FDO_ONEWAY_REPLICA_PARENT_READONLY_NOT_SUPPORTED_IN_LOCAL_CHILD_WORKSPACES',
                 'FDO_E_MUST_BE_VERSION_OWNER_TO_SYNC',
                 'FDO_DATA_CANNOT_BE_REGISTERED_AS_REPLICAS_IN_TRANSPORT_FGDB',
                 'FDO_E_CHILD_PARENT_REPLICA_CANNOT_EXIST_IN_SAME_GEODATABASE',
                 'FDO_E_FAILED_TO_SET_TARGET_NAME',
                 'FDO_E_PERSONAL_GEODATABASE_NOT_SUPPORTED_ON_SERVER',
                 'FDO_E_FAILED_TO_CREATE_DELTA_WORKSPACE',
                 'FDO_E_NO_DEFAULT_TURN_EVALUATOR',
                 'FDO_E_FEATURE_DATASET_CONTAINERS_NOT_SUPPORTED',
                 'FDO_E_NETWORK_DATASET_INVALID_NAME',
                 'FDO_E_INVALID_NETWORK_ATTRIBUTE_NAME',
                 'FDO_E_INVALID_NETWORK_SOURCE_FOR_EVALUATOR',
                 'FDO_E_INVALID_EXPRESSION_FOR_EVALUATOR',
                 'FDO_E_INVALID_CONSTANT_FOR_NETWORK_ATTRIBUTE',
                 'FDO_E_SUBTYPES_REQUIRED',
                 'FDO_E_INVALID_NETWORK_DATASET_SCHEMA',
                 'FDO_E_NETWORK_OBJECT_EVALUATOR_ERROR',
                 'FDO_E_NETWORK_BAD_EDGE_ORIENTATION',
                 'FDO_E_NETWORK_DATASET_INVALID_ACCESS',
                 'FDO_E_NO_DEFAULT_JUNCTION_EVALUATOR',
                 'FDO_E_NO_DEFAULT_EDGE_EVALUATOR',
                 'FDO_E_NETWORK_DATASET_NOTURNS',
                 'FDO_E_NETWORK_ELEMENT_EVALUATOR_ERROR',
                 'FDO_E_NETWORK_SOURCE_DATASET_NOT_FOUND',
                 'FDO_E_INVALID_NETWORK_SOURCE',
                 'FDO_E_INVALID_NETWORK_ATTRIBUTE',
                 'FDO_E_INVALID_CONNECTIVITY_GROUP_NAME',
                 'FDO_E_SUBTYPES_NOT_IN_USE',
                 'FDO_E_NETWORK_DATASETS_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_NETWORK_DATASET_ALREADY_EXISTS',
                 'FDO_E_SUBTYPES_UNSPECIFIED_CONN_GROUP',
                 'FDO_E_SUBTYPES_UNSPECIFIED_CONN_POLICY',
                 'FDO_E_INVALID_NETWORK_SOURCE_GEOMETRY_TYPE',
                 'FDO_E_INVALID_NETWORK_SOURCE_FEATURE_TYPE',
                 'FDO_E_FSTAR_INVALID_FROM_EDGE',
                 'FDO_E_EVALUATOR_CREATE',
                 'FDO_E_EVALUATOR_INITIALIZE_DATA',
                 'FDO_E_EVALUATOR_INITIALIZE_QUERY',
                 'FDO_E_EVALUATOR_QUERY',
                 'FDO_E_INVALID_NETWORK_ELEMENT_ID',
                 'FDO_E_INVALID_NETWORK_EDGE_DIRECTION',
                 'FDO_E_INVALID_NETWORK_TURN_TYPE',
                 'FDO_E_TURN_NOT_PRESENT',
                 'FDO_E_BUILD_NOT_SUPPORTED',
                 'FDO_E_OPERATION_NOT_SUPPORTED_ON_BUILDABLE_NETWORK',
                 'FDO_E_NETWORK_SOURCE_INVALID_NAME',
                 'FDO_E_NETWORK_SOURCE_INVALID_ELEMENT_TYPE',
                 'FDO_E_NO_SYSTEM_JUNCTION_SOURCE',
                 'FDO_E_BAD_SYSTEM_JUNCTION_SOURCE',
                 'FDO_E_NETWORK_ELEMENT_NOT_INITIALIZED',
                 'FDO_E_ATTRIBUTES_WITHOUT_SOURCES',
                 'FDO_E_INVALID_HIERARCHY_RANGES',
                 'FDO_E_CANNOT_DELETE_NETWORK_ATTRIBUTES',
                 'FDO_E_SOURCE_DIRECTIONS_NOT_SUPPORTED',
                 'FDO_E_NETWORK_SOURCE_ALREADY_EXISTS',
                 'FDO_E_NETWORK_SOURCE_NAME_DOESNT_EXIST',
                 'FDO_E_EVALUATOR_CANNOT_BE_DEFAULT_EVALUATOR',
                 'FDO_E_INVALID_NETWORK_ATTRIBUTE_FOR_EVALUATOR',
                 'FDO_E_EVALUATOR_NOT_VALIDATED',
                 'FDO_E_EVALUATOR_NOT_VALID',
                 'FDO_E_EVALUATOR_NOT_INITIALIZED',
                 'FDO_E_EVALUATOR_SYNTAX_ERROR',
                 'FDO_E_FIELD_EVALUATOR_FIELD_NOT_FOUND',
                 'FDO_E_INVALID_NETWORK_ATTRIBUTE_ID',
                 'FDO_E_NETWORK_SOURCE_INVALID_FULLNAME',
                 'FDO_E_NOT_CONSTANT_EVALUATOR',
                 'FDO_E_DIRECTIONAL_EVALUATOR_WITH_JUNCTION_SOURCE',
                 'FDO_E_INCORRECT_DATA_ELEMENT_TYPE',
                 'FDO_E_INVALID_SOURCES_FOR_SHAPEFILE_NETWORK_DATASET',
                 'FDO_E_NETWORK_SOURCE_INCONSISTENT_ELEVATION_SPECIFICATION',
                 'FDO_E_TURN_NO_NETWORK',
                 'FDO_E_TURN_GEOM_TOO_MANY_VERTICES',
                 'FDO_E_TURN_NOT_VALID',
                 'FDO_E_TURN_GEOM_NOT_POLYLINE',
                 'FDO_E_TURN_GEOM_NOT_ENOUGH_VERTICES',
                 'FDO_E_TURN_GEOM_MULTIPART',
                 'FDO_E_TURN_GEOM_NO_FIRST_FEATURE',
                 'FDO_E_TURN_GEOM_NO_LAST_FEATURE',
                 'FDO_E_TURN_GEOM_NO_FEATURES',
                 'FDO_E_TURN_GEOM_DISCONNECTED_FEATURES',
                 'FDO_E_TURN_GEOM_INVALID_SEQUENCE',
                 'FDO_E_TURN_NOT_ENOUGH_PARTS',
                 'FDO_E_TURN_NDS_INTERIOR_EXTERIOR_CONFLICT',
                 'FDO_E_TURN_NDS_EXTERIOR_LOOP',
                 'FDO_E_TURN_NO_EDGE_SOURCES',
                 'FDO_E_TURN_INVALID_EDGE1END',
                 'FDO_E_TURN_GEOM_AMBIGUOUS_FEATURES',
                 'FDO_E_NETWORK_MISSING_SOURCE',
                 'FDO_E_DIRECTIONAL_EVALUATOR_WITH_TURN_SOURCE',
                 'FDO_E_NETWORK_SOURCE_MISSING_FEATURE_CLASS',
                 'FDO_E_NETWORK_SOURCE_NOT_SIMPLE_FEATURE_CLASS',
                 'FDO_E_NETWORK_SOURCE_IN_MULTIPLE_NETWORKS',
                 'FDO_E_NETWORK_EVALUATOR_CREATE_FAILED',
                 'FDO_E_FIELD_EVALUATOR_AS_DEFAULT_EVALUATOR',
                 'FDO_E_NODIRECTIONAL_EVALUATOR_WITH_EDGE_SOURCE',
                 'FDO_E_MISSING_NETWORK_SOURCE_FOR_EVALUATOR',
                 'FDO_E_TURN_ILLEGAL_START_END_POS',
                 'FDO_E_CANNOT_DELETE_SYSTEM_JUNCTION_SOURCE',
                 'FDO_E_TURN_INVALID_EDGE_DESCRIPTOR',
                 'FDO_E_TURN_CANNOT_CHANGE_SUPPORT',
                 'FDO_E_ID_OVERFLOW',
                 'FDO_E_TURN_INVALID_MAX_EDGES',
                 'FDO_E_TURN_INVALID_CUR_MAX_EDGES',
                 'FDO_E_NO_SCRIPT_CONTROL',
                 'FDO_E_TURN_MISSING_EDGE',
                 'FDO_E_MISSING_SYSTEM_JUNCTION_CLASS_ELEV_FIELD',
                 'FDO_E_BAD_TYPE_SYSTEM_JUNCTION_CLASS_ELEV_FIELD',
                 'FDO_E_INVALID_SCHEMA_UPDATE',
                 'FDO_E_USE_BY_DEFAULT_NOT_SUPPORTED',
                 'FDO_E_SIGNPOSTS_NOT_SUPPORTED',
                 'FDO_E_NETWORK_ATTRIBUTE_ALREADY_EXISTS',
                 'FDO_E_INVALID_DIRECTIONS_LENGTH_UNIT',
                 'FDO_E_OVERLAPPING_NETWORK_GLOBAL_TURN_DELAY_CATEGORIES',
                 'FDO_E_NETWORK_ATTRIBUTE_NOT_COST_USAGE',
                 'FDO_E_NETWORK_ATTRIBUTE_NOT_TIME_UNITS',
                 'FDO_E_NETWORK_ATTRIBUTE_REFERENCES_SELF',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_OPERATOR_NOT_SUPPORTED',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_ARGUMENT1_INVALID',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_ARGUMENT2_INVALID',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_PARAMETER_MISSING',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_PARAMETER_NOT_NUMERIC',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_OVERFLOW',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_MISSING_REFERENCED_NETWORK_ATTRIBUTE',
                 'FDO_E_NETWORK_FUNCTION_EVALUATOR_REFERENCED_NETWORK_ATTRIBUTE_NOT_NUMERIC',
                 'FDO_E_EVALUATOR_NOT_SUPPORTED',
                 'FDO_E_FORWARDSTAR_ADD_CACHED_ATTRIBUTE_DEPRECATED',
                 'FDO_E_FORWARDSTAR_REMOVE_CACHED_ATTRIBUTES_DEPRECATED',
                 'FDO_E_INVALID_NETWORK_ATTRIBUTE_USAGE_TYPE',
                 'FDO_E_INVALID_NETWORK_EDGE_ATTRIBUTE_ADJUSTMENT',
                 'FDO_E_INVALID_NETWORK_ATTRIBUTE_ADJUSTMENT_VALUE',
                 'FDO_E_INVALID_POSITION_RANGE',
                 'FDO_E_NETWORK_ELEVATION_MODEL_CANNOT_CHANGE',
                 'FDO_E_ZCOORDINATES_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_NETWORK_SOURCE_INVALID_ELAVATION_MODEL',
                 'FDO_E_NETWORK_COVERING_HYPEREDGE_DOES_NOT_EXIST',
                 'FDO_E_INVALID_EVALUATOR_FOR_SHAPEFILE_NETWORK_DATASET',
                 'FDO_E_INVALID_USAGE_OR_UNIT_TYPE_FOR_EVALUATOR',
                 'FDO_E_INVALID_TRAFFIC_DATA',
                 'FDO_E_INVALID_TIME_SLICE_FIELD_NAME',
                 'FDO_E_HISTORICAL_TRAFFIC_DATA_CANNOT_CHANGE',
                 'FDO_E_TRAFFIC_DATA_NOT_SUPPORTED',
                 'FDO_E_TRAFFIC_DATA_ATTRIBUTE_MISSING',
                 'FDO_E_NETWORK_DATASET_NO_TIME_ZONE',
                 'FDO_E_SIGNPOST_TABLE_NOT_REGISTERED',
                 'FDO_E_BUILD_INSIDE_EDIT_SESSION',
                 'FDO_E_BUILDNETWORK_ALREADYBUILD',
                 'FDO_E_FSTAR_INVALID_FROM_EDGE_FORWARD',
                 'FDO_E_FSTAR_INVALID_FROM_EDGE_BACKWARD',
                 'FDO_E_NO_ATTRIBUTE_RECORD',
                 'FDO_E_NETWORK_DATASET_NEEDS_UPGRADE',
                 'FDO_E_NETWORK_DATASET_ALREADY_UPGRADED',
                 'FDO_E_INVALID_TIME_VALUE',
                 'FDO_E_INVALID_NETWORK_TIME_USAGE_TYPE',
                 'FDO_E_INVALID_TIME_ZONE_OBJECTID',
                 'FDO_E_INVALID_TIME_ZONE_NAME',
                 'FDO_E_TRAFFIC_DATA_LENGTH_ATTRIBUTE_MISSING',
                 'FDO_E_INVALID_TIME_SLICE_ARRAY',
                 'FDO_E_NETWORK_SCHEMA_CHANGES_NOT_SUPPORTED',
                 'FDO_E_INVALID_NETWORK_LANDMARK_SOURCE',
                 'FDO_E_INVALID_NETWORK_LANDMARK_SOURCE_GEOMETRY_TYPE',
                 'FDO_E_INVALID_NETWORK_LANDMARK_SOURCE_FIELD',
                 'FDO_E_TIME_ZONE_ATTRIBUTE_IS_REQUIRED',
                 'FDO_E_CADASTRAL_FABRIC_INVALID_NAME',
                 'FDO_E_CADASTRAL_FABRICS_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_CADASTRAL_FABRIC_ALREADY_EXISTS',
                 'FDO_E_CADASTRAL_FABRIC_JOB_ALREADY_EXISTS',
                 'FDO_E_CADASTRAL_FABRIC_JOB_INVALID_STATUS',
                 'FDO_E_CADASTRAL_FABRIC_SCHEMA_CORRUPTION',
                 'FDO_E_CADASTRAL_FABRIC_JOB_LOCK_ALREADY_EXISTS',
                 'FDO_E_CADASTRAL_FABRIC_MISSING_SYSTEM_TABLE',
                 'FDO_E_CADASTRAL_FABRIC_DATA_CORRUPTION',
                 'FDO_E_CADASTRAL_FABRIC_JOB_ALREADY_COMMITTED',
                 'FDO_E_CADASTRAL_FABRIC_JOB_NOT_FOUND',
                 'FDO_E_CADASTRAL_FABRIC_PACKET_LOAD_FAILED',
                 'FDO_E_CADASTRAL_FABRIC_PACKET_MISSING_DATA',
                 'FDO_E_JOB_DOES_NOT_BELONG_TO_FABRIC',
                 'FDO_E_CADASTRAL_FABRIC_PACKET_POST_REQUIRES_EDIT_SESSION',
                 'FDO_E_JOB_UNJOINED_PARCEL_PRESENT',
                 'FDO_E_CADASTRAL_FABRIC_XML_PARSER_NOT_FOUND',
                 'FDO_E_CADASTRAL_FABRIC_OBJECT_ALREADY_MODIFIED',
                 'FDO_E_CADASTRAL_FABRIC_JOB_CURRENTLY_EDITED',
                 'FDO_E_CADASTRAL_FABRIC_DATUM_MISMATCH',
                 'FDO_E_CADASTRAL_FABRIC_ILLEGAL_RECONCILE',
                 'FDO_E_CADASTRAL_FABRIC_COMMIT_NO_NAME',
                 'FDO_E_CADASTRAL_FABRIC_COMMIT_NOT_DEFAULT',
                 'FDO_E_CADASTRAL_FABRIC_COMMIT_JOB_LOCKED',
                 'FDO_E_CADASTRAL_FABRIC_JOB_NOT_COMMITTED',
                 'FDO_E_CADASTRAL_FABRIC_COPY_WITH_TOPOLOGY_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_CADASTRAL_FABRIC_OPERATION_CANCELLED',
                 'FDO_E_CADASTRAL_FABRIC_ALREADY_UPGRADED',
                 'FDO_E_PERSONAL_SDE_ONE_EDITOR',
                 'FDO_E_CANNOT_CONNECT_TO_SERVER',
                 'FDO_E_ITEM_NOT_FOUND',
                 'FDO_E_ITEM_WITH_PATH_EXISTS',
                 'FDO_E_ITEM_DOES_NOT_HAVE_DEFINITION',
                 'FDO_E_INVALID_CATALOG_PATH',
                 'FDO_E_ITEM_RELATIONSHIP_EXISTS',
                 'FDO_E_CANNOT_CHANGE_ITEM_VISIBILITY',
                 'FDO_E_RELATIONSHIP_VISIBILITY_INVALID',
                 'FDO_E_CANNOT_CHANGE_ITEM_PROPERTY',
                 'FDO_E_RELATIONSHIP_ATTRIBUTES_INVALID',
                 'FDO_E_OTHER_ACTIVE_CONNECTIONS',
                 'FDO_E_USER_DOES_NOT_HAVE_UPGRADE_PRIVILIGES',
                 'FDO_E_INSTANCE_IS_NOT_UPGRADABLE',
                 'FDO_E_INSTANCE_DOES_NOT_SUPPORT_XML_TYPE',
                 'FDO_E_ITEM_RELATIONSHIP_NOT_FOUND',
                 'FDO_E_ITEM_RELATIONSHIP_ITEM_NOT_FOUND',
                 'FDO_E_DEFINITION_MISSING_CONTROLLER_MEMBERSHIP',
                 'FDO_E_UNKNOWN_CATALOG_TYPE',
                 'FDO_E_DOES_NOT_SUPPORT_UNMANAGED_RASTER_CATALOG',
                 'FDO_E_QUERYDESCRIPTION_NOSPATIALCOLUMN',
                 'FDO_E_QUERYDESCRIPTION_INVALIDCOLUMN',
                 'FDO_E_QUERYDESCRIPTION_OIDNOTMAPPEDCOLUMN',
                 'FDO_E_QUERYDESCRIPTION_COLUMNEXISTS',
                 'FDO_E_QUERYDESCRIPTION_INVALIDFIELDTYPE',
                 'FDO_E_QUERYTABLE_OIDMAPPEDCOLUMNHASNULL',
                 'FDO_E_QUERYDESCRIPTION_OUTOFSYNC',
                 'FDO_E_QUERYDESCRIPTION_OIDFIELDSMISSING',
                 'FDO_E_QUERYDESCRIPTION_INVALIDGEOMETRYTYPE',
                 'FDO_E_QUERYCLASS_INVALIDWHERE',
                 'FDO_E_QUERYCLASS_OIDUNKNOWN',
                 'FDO_E_QUERYTABLE_QUERYMISSING',
                 'FDO_E_QUERYTABLE_WORKSPACEMISSING',
                 'FDO_E_QUERYTABLE_OIDCOLUMNHASNULL',
                 'FDO_E_QUERYCLASS_NULLGEOMETRYTYPE',
                 'FDO_E_QUERYCLASS_INVALIDSRID',
                 'FDO_E_QUERYCLASS_INVALIDSPATIALREFERENCE',
                 'FDO_E_QUERYCLASS_INVALIDNAME',
                 'FDO_E_RELCLASS_COULD_NOT_GET_ORIG_PRIM_KEY',
                 'FDO_E_RELCLASS_COULD_NOT_GET_ORIG_FOR_KEY',
                 'FDO_E_RELCLASS_COULD_NOT_GET_DEST_PRIM_KEY',
                 'FDO_E_RELCLASS_COULD_NOT_GET_DEST_FOR_KEY',
                 'FDO_E_RELCLASS_INCOMPATIBLE_WITH_EXISTING_RELCLASS',
                 'FDO_E_RELCLASS_CANNOT_RESET_FKEYS',
                 'FDO_E_RELCLASS_INVALID_FKEY',
                 'FDO_E_RELCLASS_INVALID_CURSOR',
                 'FDO_E_RELATIONSHIPCLASS_NOT_FOUND',
                 'FDO_E_RELATIONSHIPCLASS_INVALID_NAME',
                 'FDO_E_RELATIONSHIPCLASS_ALREADY_EXISTS',
                 'FDO_E_RELATIONSHIPCLASS_INVALID_SPEC',
                 'FDO_E_RELATIONSHIPCLASS_ORIGIN_DEST_NOT_FOUND',
                 'FDO_E_MISSING_ORIGIN_OR_DESTINATION_OBJECT',
                 'FDO_E_INVALID_CONNECTIVITY_RULE',
                 'FDO_E_VALIDATION_NOT_SUPPORTED',
                 'FDO_E_INVALID_CARDINALITY',
                 'FDO_E_DEFAULT_JUNCTIONS_NOT_SUPPORTED_IN_RELEASE',
                 'FDO_E_ALTERING_RULE_NOT_SUPPORTED',
                 'FDO_E_CONNECTIVITY_RULES_NOT_SUPPORTED',
                 'FDO_E_CANNOT_ALTER_NON_EXISTANT_RULE',
                 'FDO_E_RULE_NOT_FOUND',
                 'FDO_E_ZERO_LENGTH_POLYLINE',
                 'FDO_E_CLOSED_POLYLINE',
                 'FDO_E_NO_NETWORK_ANCILLARY_ROLE',
                 'FDO_E_FLIPPED_POLYLINE',
                 'FDO_E_CANNOT_SPLIT_JUNCTION',
                 'FDO_E_INVALID_NETWORK_ANCILLARY_ROLE',
                 'FDO_E_CANNOT_ADD_ORPHAN_JUNCTION_ON_EXISTING_JUNCTION',
                 'FDO_E_INVALID_JUNCTION_INDEX',
                 'FDO_E_CANNOT_SET_ENABLED_FIELD',
                 'FDO_E_CANNOT_SET_WEIGHT_FIELD',
                 'FDO_E_INVALID_GEOMETRY_FOR_COMPLEX_JUNCTION',
                 'FDO_E_INVALID_GEOMETRY_TYPE_FOR_NETWORK_FEATURE_CLASS',
                 'FDO_E_NO_ASSOCIATED_NETWORK_ELEMENT',
                 'FDO_E_IDENTICAL_FROM_TO_JUNCTIONS',
                 'FDO_E_EDGE_MISSING_ENDPOINT_JUNCTION',
                 'FDO_E_CONNECTED_EDGE_INVALID_CONNECTIVITY',
                 'FDO_E_INVALID_CONNECTIVITY_CANNOT_BE_CORRECTED',
                 'FDO_E_INVALID_NETWORK_FEATURE_CLASS',
                 'FDO_E_DOMAIN_NOT_FOUND',
                 'FDO_E_DOMAIN_USED_BY_ATTRIBUTE_RULE',
                 'FDO_E_DOMAIN_USED_AS_DEFAULT_DOMAIN',
                 'FDO_E_DOMAIN_NAME_ALREADY_EXISTS',
                 'FDO_E_DOMAIN_VALUE_EXCEEDS_FIELD_LENGTH',
                 'FDO_E_DOMAIN_OWNER_DOESNT_MATCH',
                 'FDO_E_DOMAIN_FIELD_TYPE_DOESNT_MATCH',
                 'FDO_E_DOMAIN_TYPE_NOT_SUPPORTED',
                 'FDO_E_CODED_VALUE_DOMAIN_VALUE_ALREADY_EXISTS',
                 'FDO_E_CANNOT_LOCK_COCREATED_DOMAIN',
                 'FDO_E_DOMAIN_USED_BY_OTHER_WORKSPACE',
                 'FDO_E_DOMAIN_FIELD_TYPE_MISMATCH',
                 'FDO_E_CANNOT_LOCK_DOMAIN_AS_NOT_OWNER',
                 'FDO_E_DEFAULT_DOMAIN_NOT_FOUND',
                 'FDO_E_DOMAIN_RECORD_NOT_FOUND',
                 'FDO_E_DOMAIN_TYPE_DOESNT_MATCH',
                 'FDO_E_CODED_VALUE_DOMAIN_NAME_EMPTY',
                 'FDO_E_CODED_VALUE_DOMAIN_VALUE_NOT_COMPATIBLE',
                 'FDO_E_CODED_VALUE_DOMAIN_VALUE_INCONSISTENT',
                 'FDO_E_CODED_VALUE_DOMAIN_FIELD_TYPE_NOT_COMPATIBLE',
                 'FDO_E_CANNOT_DELETE_DOMAIN',
                 'FDO_E_DOMAIN_INVALID_NAME',
                 'FDO_E_DOMAIN_DOES_NOT_MATCH_WORKSPACE',
                 'FDO_E_DOMAIN_INCOMPATIBLE_WITH_DEFAULT_VALUE',
                 'FDO_E_TRAFFIC_DOWNLOAD_TIMEOUT',
                 'FDO_E_REFRESH_DYNAMIC_TRAFFIC_ERROR',
                 'FDO_E_INVALID_NAME_OBJECT']
    FDO_E_LOADING_RESOURCE = -2147220991
    FDO_E_INDEX_OUT_OF_RANGE = -2147220990
    FDO_E_NOT_SUPPORTED = -2147220989
    FDO_E_NOT_ENOUGH_SPACE = -2147220988
    FDO_E_NO_PERMISSION = -2147220987
    FDO_E_IMPLEMENTATION = -2147220986
    FDO_E_INVALID_SQL = -2147220985
    FDO_E_NETWORK = -2147220984
    FDO_E_DATE_CONVERSION = -2147220983
    FDO_E_OBJECT_IS_DELETED = -2147220982
    FDO_E_WORKSPACE_NOT_COMPATIBLE = -2147220981
    FDO_E_OBJECT_IS_READONLY = -2147220980
    FDO_E_OBJECT_IN_USE = -2147220979
    FDO_E_OBJECT_MAX_REACHED = -2147220978
    FDO_E_OBJECT_IS_LOCKED = -2147220977
    FDO_E_INVALID_ENVELOPE = -2147220976
    FDO_E_FILE_IO = -2147220975
    FDO_E_LICENSE_FAILURE = -2147220974
    FDO_E_DBMS_ERROR = -2147220973
    FDO_E_COERCING = -2147220972
    FDO_E_BINDING = -2147220971
    FDO_E_SCHEMA_LOCK_CONFLICT = -2147220970
    FDO_E_MUST_BE_OWNER = -2147220969
    FDO_E_OBJECT_NOT_LOCKED = -2147220968
    FDO_E_ESRI_PROVIDER_CONNECT_INVALID = -2147220967
    FDO_E_CONNECTION_CANCELLED = -2147220966
    FDO_E_INVALID_RELEASE = -2147220965
    FDO_E_NO_SYSTEM_TABLES = -2147220964
    FDO_E_CONNECT_PARAMETERS_CONFLICT = -2147220963
    FDO_E_FIELDINFO_SYSTEM_TABLE_INCONSISTENCY = -2147220962
    FDO_E_NO_EDIT_LICENSE = -2147220961
    FDO_E_NO_SCHEMA_LICENSE = -2147220960
    FDO_E_NO_OPERATION_LICENSE = -2147220959
    FDO_E_OPERATION_CANNOT_BE_UNDONE = -2147220958
    FDO_E_EDIT_OPERATION_REQUIRED = -2147220957
    FDO_E_RECONCILE_CANNOT_BE_UNDONE = -2147220956
    FDO_E_OBJECT_NOT_INITIALIZED = -2147220955
    FDO_E_INTEGER_REQUIRES_64BITS = -2147220954
    FDO_E_SYNTAX_ERROR = -2147220953
    FDO_E_LICENSE_NOT_INITIALIZED = -2147220952
    FDO_E_TABLE_SIZE_EXCEEDED = -2147220951
    FDO_E_SECURED_DATA_NO_ACCESS = -2147220950
    FDO_E_INVALID_SQLQUERY = -2147220949
    FDO_E_INVALID_NAME = -2147220948
    FDO_E_LOCK_CONFLICT = -2147220947
    FDO_E_UPGRADE_NEEDS_WRITE_ACCESS = -2147220946
    FDO_E_NEGATIVE_FID = -2147220945
    FDO_E_INCOMPATIBLE_CLIENT_VERSION = -2147220944
    FDO_E_NEW_SCHEMA_REQUIRED = -2147220943
    FDO_E_NON_FORWARD_COMPATIBLE_CONNECTION = -2147220942
    FDO_E_WORKSPACE_NOT_CONNECTED = -2147220911
    FDO_E_WORKSPACE_ALREADY_CONNECTED = -2147220910
    FDO_E_SERVER_NOT_FOUND = -2147220909
    FDO_E_SERVER_NOT_AVAILABLE = -2147220908
    FDO_E_SERVER_MAX_CONNECTIONS = -2147220907
    FDO_E_USER_INVALID = -2147220906
    FDO_E_USER_NOACCESS = -2147220905
    FDO_E_DATABASE_NOT_FOUND = -2147220904
    FDO_E_DATABASE_NOT_AVAILABLE = -2147220903
    FDO_E_WORKSPACE_ALREADY_EXISTS = -2147220902
    FDO_E_WORKSPACE_EXTENSION_CREATE_FAILED = -2147220901
    FDO_E_WORKSPACE_EXTENSION_INIT_FAILED = -2147220900
    FDO_E_WORKSPACE_EXTENSION_DATASET_CREATE_FAILED = -2147220899
    FDO_E_WORKSPACE_EXTENSION_DATASET_RENAME_FAILED = -2147220898
    FDO_E_WORKSPACE_EXTENSION_DATASET_DELETE_FAILED = -2147220897
    FDO_E_WORKSPACE_EXTENSION_DUP_NAME = -2147220896
    FDO_E_WORKSPACE_EXTENSION_DUP_GUID = -2147220895
    FDO_E_WORKSPACE_EXTENSION_NO_REG_PRIV = -2147220894
    FDO_E_WORKSPACE_READONLY = -2147220893
    FDO_E_DATASET_NOT_SUPPORTED_AT_WORKSPACE_LEVEL = -2147220892
    FDO_E_WORKSPACE_NO_KEYSETTABLEMANAGER = -2147220891
    FDO_E_WORKSPACE_NO_KEYSETTABLE = -2147220890
    FDO_E_WORKSPACE_INVALID_KEYSETID = -2147220889
    FDO_E_WORKSPACEFACTORY_BAD_CONNECTIONPROPERTY = -2147220888
    FDO_E_WORKSPACE_EXTENSION_NOT_SUPPORTED = -2147220887
    FDO_E_WORKSPACE_EXTENSION_DATASET_MODIFY_FAILED = -2147220886
    FDO_E_WORKSPACE_NO_SPATIAL_TYPE = -2147220885
    FDO_E_HISTORICAL_MARKER_ALREADY_EXISTS = -2147220885
    FDO_E_OLEDB_NOT_SUPPORTED_ON_LINUX = -2147220884
    FDO_E_DATASET_NOT_FOUND = -2147220735
    FDO_E_DATASET_INVALID_NAME = -2147220734
    FDO_E_DATASET_ALREADY_EXISTS = -2147220733
    FDO_E_DATASET_CANNOT_RENAME = -2147220732
    FDO_E_DATASET_INVALID_TYPE = -2147220731
    FDO_E_DATASET_CANNOT_DELETE = -2147220730
    FDO_E_DATASET_EXTENSION_TYPE_NOT_FOUND = -2147220729
    FDO_E_DATASET_PASTE_NOT_SUPPORTED_IN_RELEASE = -2147220728
    FDO_E_DATASET_CANNOT_RENAME_NOT_SUPPORTED = -2147220727
    FDO_E_DATASET_EXTENSION_CREATE_FAILED = -2147220726
    FDO_E_DATASET_EXTENSION_INIT_FAILED = -2147220725
    FDO_E_CANNOT_CREATE_LOW_PREC_DATASET_IN_HIGH_PREC_DB = -2147220724
    FDO_E_CANNOT_CREATE_HIGH_PREC_DATASET_IN_LOW_PREC_DB = -2147220723
    FDO_E_DATASET_TYPE_NOT_PRESENT = -2147220722
    FDO_E_CANNOT_COPY_CLASS_WITHOUT_ALL_CONTROLLERS = -2147220721
    FDO_E_DATASET_TYPE_NOT_SUPPORTED_IN_RELEASE = -2147220720
    FDO_E_DATASET_INVALID_DEFINITION = -2147220719
    FDO_E_DATASET_INVALID_ID = -2147220718
    FDO_E_CANNOT_RENAME_WHILE_EDITING = -2147220717
    FDO_E_CANNOT_MODIFY_SCHEMA_WHILE_EDITING = -2147220716
    FDO_E_INCOMPATIBLE_CLIENT_CANNOT_OPEN_DATASET = -2147220715
    FDO_E_TABLE_NOT_FOUND = -2147220655
    FDO_E_TABLE_INVALID_NAME = -2147220654
    FDO_E_TABLE_ALREADY_EXISTS = -2147220653
    FDO_E_TABLE_NO_OID_FIELD = -2147220652
    FDO_E_TABLE_INVALID_KEYWORD = -2147220651
    FDO_E_TABLE_NOT_VERSIONED = -2147220650
    FDO_E_TABLE_DUPLICATE_COLUMN = -2147220649
    FDO_E_TABLE_COLUMN_NOT_FOUND = -2147220648
    FDO_E_TABLE_IN_USE = -2147220647
    FDO_E_TABLE_RECORD_LENGTH_EXCEEDED = -2147220646
    FDO_E_TABLE_VERSIONED = -2147220645
    FDO_E_TABLE_MOVINGEDITSTOBASE = -2147220644
    FDO_E_TABLE_ARCHIVING = -2147220643
    FDO_E_TABLE_NOT_ARCHIVING = -2147220642
    FDO_E_TABLE_READONLY_HISTORICAL = -2147220641
    FDO_E_TABLE_NO_ATTACHMENTS = -2147220640
    FDO_E_TABLE_ATTACHMENTS_NOT_SUPPORTED = -2147220639
    FDO_E_TABLE_CANNOT_ANALYZE_TABLE_VIEW = -2147220638
    FDO_E_TABLE_NO_GLOBALID_FIELD = -2147220637
    FDO_E_ATTACHMENTS_ON_ATTACHMENT_TABLE_NOT_SUPPORTED = -2147220636
    FDO_E_TABLE_NOT_EMPTY = -2147220635
    FDO_E_ATTACHMENTS_ONLY_ON_GEODATABASES = -2147220634
    FDO_E_NON_SIMPLE_DATASET_ARCHIVING = -2147220633
    FDO_E_FEATURECLASS_NOT_FOUND = -2147220479
    FDO_E_FEATURECLASS_BAD_EXTENT = -2147220478
    FDO_E_FEATURECLASS_INVALID_NAME = -2147220477
    FDO_E_FEATURECLASS_ALREADY_EXISTS = -2147220476
    FDO_E_FEATURECLASS_LOAD_MODE = -2147220475
    FDO_E_FEATURECLASS_NETWORK_CANNOT_DELETE = -2147220474
    FDO_E_FEATURECLASS_BAD_DEFAULT_SUBTYPE_CODE = -2147220473
    FDO_E_FEATURECLASS_NO_SUBTYPE_FIELD = -2147220472
    FDO_E_FEATURECLASS_NETWORK_CANNOT_RENAME = -2147220471
    FDO_E_FEATURECLASS_SUBTYPE_EXISTS = -2147220470
    FDO_E_FEATURECLASS_FD_NOT_EDITABLE = -2147220469
    FDO_E_FEATURECLASS_SUBTYPE_FIELD_CANNOT_RENAME = -2147220468
    FDO_E_SUBTYPE_CODE_INVALID = -2147220467
    FDO_E_SUBTYPE_CODE_DOES_NOT_EXIST = -2147220466
    FDO_E_SUBTYPE_CODE_IS_NULL = -2147220465
    FDO_E_SUBTYPE_CODE_NOT_INTEGER = -2147220464
    FDO_E_FEATURECLASS_NO_SHAPE_COLUMN = -2147220463
    FDO_E_FEATURECLASS_TOPOLOGY_CANNOT_DELETE = -2147220462
    FDO_E_SUBTYPE_CODE_HAS_ASSOCIATED_TOPOLOGY_RULE = -2147220461
    FDO_E_SUBTYPE_IN_USE_CANNOT_DELETE = -2147220460
    FDO_E_SUBTYPE_CANNOT_ADD = -2147220459
    FDO_E_SPATIAL_CACHE_EMPTY_EXTENT = -2147220458
    FDO_E_FEATURECLASS_MEMBER_OF_CONTROLLER = -2147220457
    FDO_E_FEATURECLASS_CANT_OPEN_GEOMETRICNETWORK = -2147220456
    FDO_E_FEATURECLASS_CANT_OPEN_TOPOLOGY = -2147220455
    FDO_E_FEATURECLASS_NETWORK_DATASET_CANNOT_DELETE = -2147220454
    FDO_E_FEATURECLASS_INSUFFICIENT_PRIVILEGE = -2147220453
    FDO_E_PLANARGRAPH_NOT_FOUND = -2147220399
    FDO_E_GEOMETRICNETWORK_NOT_FOUND = -2147220223
    FDO_E_ADD_FEATURE_TO_NETWORK = -2147220222
    FDO_E_CREATE_LOGICAL_NETWORK = -2147220221
    FDO_E_GEOMETRICNETWORK_ALREADY_EXISTS = -2147220220
    FDO_E_ZERO_LENGTH_EDGE_ELEMENT = -2147220219
    FDO_E_GEOMETRICNETWORK_CANNOT_RENAME = -2147220218
    FDO_E_GEOMETRICNETWORK_ELEMENT_INCONSISTENCY = -2147220217
    FDO_E_NETWORK_FEATURES_HAVE_HOMOGENEOUS_Z_SUPPORT = -2147220216
    FDO_E_NO_ASSOCIATED_ERROR_TABLE = -2147220215
    FDO_E_FEATURE_ELEMENT_MISSING_POINT_GEOMETRY = -2147220214
    FDO_E_NETWORK_FEATURES_HAVE_HOMOGENEOUS_M_SUPPORT = -2147220213
    FDO_E_CLASS_EXISTS_WITH_ORPHAN_JUNCTION_CLASS_NAME = -2147220212
    FDO_E_GEOMETRICNETWORK_INVALID_NAME = -2147220211
    FDO_E_INVALID_FIELD_FOR_WEIGHT_ASSOCIATION = -2147220210
    FDO_E_INVALID_CLASS_FOR_WEIGHT_ASSOCIATION = -2147220209
    FDO_E_CONNECTED_FEATURE_DOES_NOT_EXIST = -2147220208
    FDO_E_OPEN_LOGICAL_NETWORK = -2147220207
    FDO_E_NETWORK_ELEMENT_ID_BEYOND_MAX = -2147220206
    FDO_E_EDGE_ENDPOINT_NOT_COINCIDENT = -2147220205
    FDO_E_CANNOT_DELETE_POPULATED_FEATURE_CLASS = -2147220204
    FDO_E_CANNOT_DELETE_ORPHAN_JUNCTION_CLASS = -2147220203
    FDO_E_EMPTY_GEOMETRICNETWORK_IS_NOT_ALLOWED = -2147220202
    FDO_E_DATASET_UNEDITABLE = -2147220143
    FDO_E_START_EDITING = -2147220142
    FDO_E_SAVE_EDIT_SESSION = -2147220141
    FDO_E_STOP_EDITING_WITH_SAVE = -2147220140
    FDO_E_STOP_EDITING_WITH_DISCARD = -2147220139
    FDO_E_NOT_ALLOWED_WHILE_EDITING = -2147220138
    FDO_E_COULD_NOT_CLEAN_COVERAGE = -2147220137
    FDO_E_NO_INTEGRATEABLE_LAYERS = -2147220136
    FDO_E_INVALID_TOPOLOGY = -2147220135
    FDO_E_NOT_EDITING = -2147220134
    FDO_E_COULD_NOT_ENCODE_INFO_ITEM = -2147220133
    FDO_E_NODE_NOT_ON_ARC = -2147220132
    FDO_E_CANNOT_REMOVE_LAST_LABEL = -2147220131
    FDO_E_CANNOT_MOVE_LABEL_OUT_OF_POLYGON = -2147220130
    FDO_E_INVALID_POLYGON_LABEL_DELETED = -2147220129
    FDO_E_CANNOT_BREAK_TOPOLOGY = -2147220128
    FDO_E_CANNOT_CREATE_UNIVERSE_LABEL = -2147220127
    FDO_E_CANNOT_MOVE_UNIVERSE_LABELS = -2147220126
    FDO_E_INVALID_GEOMETRY = -2147220125
    FDO_E_CORUPTED_COVERAGE = -2147220124
    FDO_E_DUPLICATE_FIELD_NAMES = -2147220123
    FDO_E_CANNOT_EDIT_ZS = -2147220122
    FDO_E_NO_POLYGONS_CREATED = -2147220121
    FDO_E_ABORT_EDITS_FAILED = -2147220120
    FDO_E_FLUSH_EDITS_FAILED = -2147220119
    FDO_E_CANNOT_EDIT_TABLE_WITH_UNIQ_USER_INDEX = -2147220118
    FDO_E_CANNOT_EDIT_DATASET_WITH_UNIQ_USER_INDEX = -2147220117
    FDO_E_CANNOT_REBUILD_POLYGONS = -2147220116
    FDO_E_USERTRANSACTION_NOT_ALLOWED = -2147220115
    FDO_E_NOT_EDITABLE_EDITSESSIONMODE = -2147220114
    FDO_E_CANNOT_EDIT_COMPRESSED_DATASET = -2147220113
    FDO_E_CANNOT_UPDATE_COMPRESSED_DATASET = -2147220112
    FDO_E_COMPRESSED_DATASET_NOT_SUPPORTED = -2147220111
    FDO_E_INVALID_OPERATION_FOR_EDITSESSIONMODE = -2147220110
    FDO_E_COMPRESSED_DATASET_NOT_INSTALLED = -2147220109
    FDO_E_MODIFIED_GEOMETRY_MUST_BE_COPY = -2147220108
    FDO_E_PENDING_BACKGROUND_PROCESSES = -2147220107
    FDO_E_PENDING_GEOPROCESSING_INPUT = -2147220106
    FDO_E_PROPERTY_NO_SUBTYPE = -2147219967
    FDO_E_PROPERTY_NOT_FOUND = -2147219966
    FDO_E_FIELD_INVALID = -2147219887
    FDO_E_FIELD_INVALID_NAME = -2147219886
    FDO_E_FIELD_NOT_FOUND = -2147219885
    FDO_E_FIELD_ALREADY_EXISTS = -2147219884
    FDO_E_FIELD_INVALID_TYPE = -2147219883
    FDO_E_FIELD_UNSUPPORTED_OPERATION = -2147219882
    FDO_E_FIELD_INVALID_GEOMETRY_TYPE = -2147219881
    FDO_E_FIELD_NOT_EDITABLE = -2147219880
    FDO_E_FIELD_NOT_NULLABLE = -2147219879
    FDO_E_FIELD_CANNOT_DELETE_WEIGHT_FIELD = -2147219878
    FDO_E_FIELD_CANNOT_DELETE_REQUIRED_FIELD = -2147219877
    FDO_E_FIELD_CANNOT_DELETE_SUBTYPE_FIELD = -2147219876
    FDO_E_FIELD_CANNOT_DELETE_LAST_FIELD = -2147219875
    FDO_E_FIELD_IS_KEYWORD = -2147219874
    FDO_E_FIELD_CANNOT_DELETE_RELKEY_FIELD = -2147219873
    FDO_E_FIELD_MISSING_GEOMETRY_DEF = -2147219872
    FDO_E_FIELD_IS_RELKEY_FIELD = -2147219871
    FDO_E_FIELD_USED_BY_EDITOR_TRACKING = -2147219870
    FDO_E_FIELD_IS_SUBTYPE_FIELD = -2147219869
    FDO_E_FIELD_IS_NETWORK_ANCILLARY_FIELD = -2147219868
    FDO_E_FIELD_IS_WEIGHT_FIELD = -2147219867
    FDO_E_FIELD_IS_ENABLED_FIELD = -2147219866
    FDO_E_FIELD_IS_REQUIRED_FIELD = -2147219865
    FDO_E_FIELD_ALIAS_EXCEEDS_MAX_LENGTH = -2147219864
    FDO_E_FIELD_IS_ASSOCIATED_WITH_DOMAIN = -2147219863
    FDO_E_FIELD_HAS_DEFAULT_VALUE = -2147219862
    FDO_E_FIELD_IS_ASSOCIATED_WITH_INDEX = -2147219861
    FDO_E_FIELDS_INVALID = -2147219711
    FDO_E_FIELDS_NOT_FOUND = -2147219710
    FDO_E_FIELDS_NO_GEOMETRY = -2147219709
    FDO_E_FIELDS_NO_OID = -2147219708
    FDO_E_FIELDS_MULTIPLE_OIDS = -2147219707
    FDO_E_FIELDS_MULTIPLE_GEOMETRIES = -2147219706
    FDO_E_FIELDS_MODEL_NAME_ALREADY_EXISTS = -2147219705
    FDO_E_FIELDS_MULTIPLE_RASTERS = -2147219704
    FDO_E_FIELDS_MULTIPLE_GLOBALIDS = -2147219703
    FDO_E_FIELDS_EMPTY = -2147219702
    FDO_E_INDEX_WRONG_TYPE = -2147219631
    FDO_E_INDEX_ALREADY_EXISTS = -2147219630
    FDO_E_INDEX_NOT_FOUND = -2147219629
    FDO_E_INDEX_NOT_ALLOWED = -2147219628
    FDO_E_METADATA_TABLE_NOT_FOUND = -2147219455
    FDO_E_METADATA_FIELD_NOT_FOUND = -2147219454
    FDO_E_METADATA_ADDING_DATASET = -2147219453
    FDO_E_METADATA_ADDING_FEATURECLASS = -2147219452
    FDO_E_METADATA_BAD_CLSID = -2147219451
    FDO_E_SPATIALREL_NOT_SUPPORTED = -2147219375
    FDO_E_SPATIALREL_UNKNOWN = -2147219374
    FDO_E_FEATURETYPE_NOT_SUPPORTED = -2147219373
    FDO_E_FEATURETYPE_UNKNOWN = -2147219372
    FDO_E_DATASETTYPE_NOT_SUPPORTED = -2147219371
    FDO_E_DATASETTYPE_UNKNOWN = -2147219370
    FDO_E_DRAWSTYLE_NOT_SUPPORTED = -2147219369
    FDO_E_DRAWSTYLE_UNKNOWN = -2147219368
    FDO_E_DRAWPHASE_NOT_SUPPORTED = -2147219367
    FDO_E_DRAWPHASE_UNKNOWN = -2147219366
    FDO_E_GEOMETRY_TYPE_NOT_SUPPORTED = -2147219199
    FDO_E_MULTIPART_EDGE_FEATURE_NOT_SUPPORTED = -2147219198
    FDO_E_GEOMETRY_HAS_NO_M_VALUES = -2147219197
    FDO_E_GEOMETRY_HAS_NO_Z_VALUES = -2147219196
    FDO_E_GEOMETRY_HAS_NULL_Z_VALUES = -2147219195
    FDO_E_GEOMETRY_NOT_SIMPLE = -2147219194
    FDO_E_GEOMETRY_CANNOT_HAVE_Z_VALUES = -2147219193
    FDO_E_GEOMETRY_SPATIAL_REFERENCE = -2147219192
    FDO_E_GEOMETRY_MISSING_SPATIAL_REFERENCE = -2147219191
    FDO_E_CANT_STORE_VERTICAL_SEGMENT = -2147219190
    FDO_E_ROW_NO_SETUPINTERFACE = -2147219119
    FDO_E_ROW_NOT_FOUND = -2147219118
    FDO_E_ROW_NO_OID = -2147219117
    FDO_E_ROW_NO_OBJCLASS = -2147219116
    FDO_E_ROW_BAD_VALUE = -2147219115
    FDO_E_ROW_ALREADY_EXISTS = -2147219114
    FDO_E_COMPARE_TYPE_MISMATCH = -2147219113
    FDO_E_CANNOT_STORE_RECYCLED_ROW_IN_EDIT_SESSION = -2147219112
    FDO_E_FEATURE_NO_ANNO = -2147217407
    FDO_E_FEATURE_BAD_SHAPE = -2147217406
    FDO_E_FEATURE_OUTSIDE_SPATIALREF = -2147217405
    FDO_E_FEATURE_SHAPE_UPDATE_BLOCKED = -2147217404
    FDO_E_FEATURE_AREA_LENGTH_UPDATE_FAILED = -2147217403
    FDO_E_ON_DELETE_MESSAGE_FAILED = -2147217402
    FDO_E_DELETE_PART_OBJECTS_FAILED = -2147217401
    FDO_E_DELETE_RELATIONSHIPS_FAILED = -2147217400
    FDO_E_ON_CHANGED_MESSAGE_FAILED = -2147217399
    FDO_E_MOVE_RELATED_FEATURES_FAILED = -2147217398
    FDO_E_ROTATE_RELATED_FEATURES_FAILED = -2147217397
    FDO_E_FEATURE_DELETED = -2147217396
    FDO_E_FEATURE_VALUE_TYPE_MISMATCH = -2147217395
    FDO_E_CUSTOM_COMPLEX_JUNCTION_NOT_IMPLEMENTED = -2147217394
    FDO_E_FEATURE_NOT_FOUND = -2147217393
    FDO_E_SPLIT_NOT_SUPPORTED_ON_GEOMETRY_TYPE = -2147217392
    FDO_E_SPLITTING_POLYGONS_REQUIRES_POLYLINE = -2147217391
    FDO_E_SPLITTING_POLYLINES_REQUIRES_POINT = -2147217390
    FDO_E_SPLIT_POINT_YIELDS_ZERO_LENGTH_POLYLINE = -2147217389
    FDO_E_CUTTER_YIELDS_ZERO_AREA_POLYGON = -2147217388
    FDO_E_FEATURE_NO_GEOMETRY = -2147217387
    FDO_E_REQUIRED_INTERFACE_NOT_FOUND = -2147217386
    FDO_E_REQUIRED_CONNECTION_POINT_NOT_FOUND = -2147217385
    FDO_E_INVALID_CONNECTION_POINT_GEOMETRY = -2147217384
    FDO_E_FEATURE_EMPTY_GEOMETRY = -2147217383
    FDO_E_CURSOR_WRONG_TYPE = -2147217327
    FDO_E_CURSOR_INVALID = -2147217326
    FDO_E_CURSOR_FINISHED = -2147217325
    FDO_E_CURSOR_LOCKED = -2147217324
    FDO_E_CURSOR_INVALIDATED = -2147217323
    FDO_E_VERSION_BAD_NAME = -2147217151
    FDO_E_VERSION_UNEDITABLE = -2147217150
    FDO_E_VERSION_HAS_CONFLICTS = -2147217149
    FDO_E_VERSION_ALREADY_EXISTS = -2147217148
    FDO_E_VERSION_REDEFINED = -2147217147
    FDO_E_VERSION_NOT_FOUND = -2147217146
    FDO_E_VERSION_INVALID_STATE = -2147217145
    FDO_E_VERSION_NOT_OWNER = -2147217144
    FDO_E_VERSION_HAS_CHILDREN = -2147217143
    FDO_E_VERSION_NOT_RECONCILED = -2147217142
    FDO_E_VERSION_IS_PROTECTED = -2147217141
    FDO_E_VERSION_IN_USE = -2147217140
    FDO_E_VERSION_BEING_EDITED = -2147217139
    FDO_E_VERSION_BEING_RECONCILED = -2147217138
    FDO_E_RECONCILE_VERSION_NOT_AVAILABLE = -2147217137
    FDO_E_VERSION_RECONCILE_LOST = -2147217136
    FDO_E_FAILED_FILTERING_CONFLICTS = -2147217135
    FDO_E_RECONCILE_VERSION_NOT_ANCESTOR = -2147217134
    FDO_E_VERSION_CANNOT_BE_RECONCILED = -2147217133
    FDO_E_VERSION_NOT_HISTORICAL = -2147217132
    FDO_E_VERSION_REQUIRES_PARENT_RECONCILE = -2147217131
    FDO_E_DATASOURCE_LOCK_FAILED = -2147217071
    FDO_E_DATASOURCE_RELEASELOCK_FAILED = -2147217070
    FDO_E_DATASOURCE_INUSE_ELSEWHERE = -2147217069
    FDO_E_INVALID_UNITS = -2147216895
    FDO_E_INVALID_GRID_SIZE = -2147216894
    FDO_E_SPATIALREF_MISMATCH = -2147216893
    FDO_E_SPATIALREF_INVALID = -2147216892
    FDO_E_INVALID_M_DOMAIN = -2147216891
    FDO_E_CANNOT_ALTER_SPATIALREF = -2147216890
    FDO_E_NO_SPATIALREF = -2147216889
    FDO_E_HIGH_PRECISION_SR_NOT_SUPPORTED = -2147216888
    FDO_E_LOW_PRECISION_SR_NOT_SUPPORTED = -2147216887
    FDO_E_CANNOT_ALTER_PRECISION = -2147216886
    FDO_E_SPATIALREF_PRECISION_MISMATCH = -2147216885
    FDO_E_NEGATIVE_RESOLUTION = -2147216884
    FDO_E_RESOLUTION_DOES_NOT_MATCH_PERMISSIBLE_VALUE = -2147216883
    FDO_E_INVALID_XY_DOMAIN = -2147216882
    FDO_E_GRID_SIZE_TOO_SMALL = -2147216881
    FDO_E_INVALID_Z_DOMAIN = -2147216880
    FDO_E_SPATIALREF_Z_MISMATCH = -2147216879
    FDO_E_SPATIALFILTER_INVALID = -2147216815
    FDO_E_SPATIALFILTER_INVALID_GEOMETRY = -2147216814
    FDO_E_SPATIALFILTER_INVALID_SPATIAL_RELATION = -2147216813
    FDO_E_SELECTION_MISMATCH = -2147216639
    FDO_E_SELECTION_INVALID_TYPE = -2147216638
    FDO_E_SELECTION_NO_SELECTABLE_LAYERS = -2147216637
    FDO_E_OBJECTCLASS_COULD_NOT_CREATE_CLASS_INSTANCE = -2147216559
    FDO_E_OBJECTCLASS_COULD_NOT_CREATE_CLASS_EXTENSION = -2147216558
    FDO_E_OBJECTCLASS_COULD_NOT_INITIALIZE_CLASS_EXTENSION = -2147216557
    FDO_E_OBJECTCLASS_REQUIRES_AN_EDIT_SESSION = -2147216556
    FDO_E_OBJECTCLASS_MODEL_NAME_ALREADY_EXISTS = -2147216555
    FDO_E_CLASS_FD_NOT_EDITABLE = -2147216554
    FDO_E_COULD_NOT_LOAD_CLASS_EXTENSION_PROPERTIES = -2147216553
    FDO_E_OBJECTCLASS_NOT_REGISTERED = -2147216552
    FDO_E_OBJECTCLASS_IN_CONTROLLER_DATASET = -2147216551
    FDO_E_SE_FAILURE = -2147216127
    FDO_E_SE_INVALID_LAYERINFO_OBJECT = -2147216126
    FDO_E_SE_NO_ANNOTATION = -2147216125
    FDO_E_SE_FINISHED = -2147216124
    FDO_E_SE_SDE_NOT_STARTED = -2147216123
    FDO_E_SE_UNCHANGED = -2147216122
    FDO_E_SE_CONNECTIONS_EXCEEDED = -2147216120
    FDO_E_SE_LOGIN_NOT_ALLOWED = -2147216119
    FDO_E_SE_INVALID_USER = -2147216118
    FDO_E_SE_NET_FAILURE = -2147216117
    FDO_E_SE_NET_TIMEOUT = -2147216116
    FDO_E_SE_OUT_OF_SVMEM = -2147216115
    FDO_E_SE_OUT_OF_CLMEM = -2147216114
    FDO_E_SE_OUT_OF_CONTEXT = -2147216113
    FDO_E_SE_NO_ACCESS = -2147216112
    FDO_E_SE_TOO_MANY_LAYERS = -2147216111
    FDO_E_SE_NO_LAYER_SPECIFIED = -2147216110
    FDO_E_SE_LAYER_LOCKED = -2147216109
    FDO_E_SE_LAYER_EXISTS = -2147216108
    FDO_E_SE_LAYER_NOEXIST = -2147216107
    FDO_E_SE_LAYER_INUSE = -2147216106
    FDO_E_SE_ROW_NOEXIST = -2147216104
    FDO_E_SE_ROW_EXISTS = -2147216102
    FDO_E_SE_LAYER_MISMATCH = -2147216101
    FDO_E_SE_NO_PERMISSIONS = -2147216100
    FDO_E_SE_INVALID_NOT_NULL = -2147216099
    FDO_E_SE_INVALID_SHAPE = -2147216098
    FDO_E_SE_INVALID_LAYER_NUMBER = -2147216097
    FDO_E_SE_INVALID_ENTITY_TYPE = -2147216096
    FDO_E_SE_INVALID_SEARCH_METHOD = -2147216095
    FDO_E_SE_INVALID_ETYPE_MASK = -2147216094
    FDO_E_SE_BIND_CONFLICT = -2147216093
    FDO_E_SE_INVALID_GRIDSIZE = -2147216092
    FDO_E_SE_INVALID_LOCK_MODE = -2147216091
    FDO_E_SE_ETYPE_NOT_ALLOWED = -2147216090
    FDO_E_SE_INVALID_NUM_OF_PTS = -2147216088
    FDO_E_SE_TABLE_NOEXIST = -2147216087
    FDO_E_SE_ATTR_NOEXIST = -2147216086
    FDO_E_SE_LICENSE_FAILURE = -2147216085
    FDO_E_SE_OUT_OF_LICENSES = -2147216084
    FDO_E_SE_INVALID_COLUMN_VALUE = -2147216083
    FDO_E_SE_INVALID_SQL = -2147216081
    FDO_E_SE_LOG_NOEXIST = -2147216080
    FDO_E_SE_LOG_NOACCESS = -2147216079
    FDO_E_SE_LOG_NOTOPEN = -2147216078
    FDO_E_SE_LOG_IO_ERROR = -2147216077
    FDO_E_SE_NO_SHAPES = -2147216076
    FDO_E_SE_NO_LOCKS = -2147216075
    FDO_E_SE_LOCK_CONFLICT = -2147216074
    FDO_E_SE_OUT_OF_LOCKS = -2147216073
    FDO_E_SE_DB_IO_ERROR = -2147216072
    FDO_E_SE_STREAM_IN_PROGRESS = -2147216071
    FDO_E_SE_INVALID_COLUMN_TYPE = -2147216070
    FDO_E_SE_TOPO_ERROR = -2147216069
    FDO_E_SE_ATTR_CONV_ERROR = -2147216068
    FDO_E_SE_INVALID_COLUMN_DEF = -2147216067
    FDO_E_SE_INVALID_SHAPE_BUF_SIZE = -2147216066
    FDO_E_SE_INVALID_ENVELOPE = -2147216065
    FDO_E_SE_TEMP_IO_ERROR = -2147216064
    FDO_E_SE_GSIZE_TOO_SMALL = -2147216063
    FDO_E_SE_LICENSE_EXPIRED = -2147216062
    FDO_E_SE_TABLE_EXISTS = -2147216061
    FDO_E_SE_INDEX_EXISTS = -2147216060
    FDO_E_SE_INDEX_NOEXIST = -2147216059
    FDO_E_SE_INVALID_POINTER = -2147216058
    FDO_E_SE_INVALID_PARAM_VALUE = -2147216057
    FDO_E_SE_ALL_SLIVERS = -2147216056
    FDO_E_SE_TRANS_IN_PROGRESS = -2147216055
    FDO_E_SE_IOMGR_NO_DBMS_CONNECT = -2147216054
    FDO_E_SE_DUPLICATE_ARC = -2147216053
    FDO_E_SE_INVALID_ANNO_OBJECT = -2147216052
    FDO_E_SE_PT_NO_EXIST = -2147216051
    FDO_E_SE_PTS_NOT_ADJACENT = -2147216050
    FDO_E_SE_INVALID_MID_PT = -2147216049
    FDO_E_SE_INVALID_END_PT = -2147216048
    FDO_E_SE_INVALID_RADIUS = -2147216047
    FDO_E_SE_LOAD_ONLY_LAYER = -2147216046
    FDO_E_SE_LAYERS_NOT_FOUND = -2147216045
    FDO_E_SE_FILE_IO_ERROR = -2147216044
    FDO_E_SE_BLOB_SIZE_TOO_LARGE = -2147216043
    FDO_E_SE_CORRIDOR_OUT_OF_BOUNDS = -2147216042
    FDO_E_SE_SHAPE_INTEGRITY_ERROR = -2147216041
    FDO_E_SE_NOT_IMPLEMENTED_YET = -2147216040
    FDO_E_SE_CAD_EXISTS = -2147216039
    FDO_E_SE_INVALID_TRANSID = -2147216038
    FDO_E_SE_INVALID_LAYER_NAME = -2147216037
    FDO_E_SE_INVALID_LAYER_KEYWORD = -2147216036
    FDO_E_SE_INVALID_RELEASE = -2147216035
    FDO_E_SE_VERSION_TBL_EXISTS = -2147216034
    FDO_E_SE_COLUMN_NOT_BOUND = -2147216033
    FDO_E_SE_INVALID_INDICATOR_VALUE = -2147216032
    FDO_E_SE_INVALID_CONNECTION = -2147216031
    FDO_E_SE_INVALID_DBA_PASSWORD = -2147216030
    FDO_E_SE_PATH_NOT_FOUND = -2147216029
    FDO_E_SE_SDEHOME_NOT_SET = -2147216028
    FDO_E_SE_NOT_TABLE_OWNER = -2147216027
    FDO_E_SE_PROCESS_NOT_FOUND = -2147216026
    FDO_E_SE_INVALID_DBMS_LOGIN = -2147216025
    FDO_E_SE_PASSWORD_TIMEOUT = -2147216024
    FDO_E_SE_INVALID_SERVER = -2147216023
    FDO_E_SE_IOMGR_NOT_AVAILABLE = -2147216022
    FDO_E_SE_SERVICE_NOT_FOUND = -2147216021
    FDO_E_SE_INVALID_STATS_TYPE = -2147216020
    FDO_E_SE_INVALID_DISTINCT_TYPE = -2147216019
    FDO_E_SE_INVALID_GRANT_REVOKE = -2147216018
    FDO_E_SE_INVALID_SDEHOME = -2147216017
    FDO_E_SE_INVALID_STREAM = -2147216016
    FDO_E_SE_TOO_MANY_STREAMS = -2147216015
    FDO_E_SE_OUT_OF_MUTEXES = -2147216014
    FDO_E_SE_CONNECTION_LOCKED = -2147216013
    FDO_E_SE_CONNECTION_IN_USE = -2147216012
    FDO_E_SE_NOT_A_SELECT_STATEMENT = -2147216011
    FDO_E_SE_FUNCTION_SEQUENCE_ERROR = -2147216010
    FDO_E_SE_WRONG_COLUMN_TYPE = -2147216009
    FDO_E_SE_PTABLE_LOCKED = -2147216008
    FDO_E_SE_PTABLE_IN_USE = -2147216007
    FDO_E_SE_STABLE_LOCKED = -2147216006
    FDO_E_SE_STABLE_IN_USE = -2147216005
    FDO_E_SE_INVALID_FILTER_TYPE = -2147216004
    FDO_E_SE_NO_CAD = -2147216003
    FDO_E_SE_INSTANCE_NOT_AVAILABLE = -2147216002
    FDO_E_SE_INSTANCE_TOO_EARLY = -2147216001
    FDO_E_SE_INVALID_SYSTEM_UNITS = -2147216000
    FDO_E_SE_INVALID_UNITS = -2147215999
    FDO_E_SE_INVALID_CAD_OBJECT = -2147215998
    FDO_E_SE_VERSION_NOEXIST = -2147215997
    FDO_E_SE_INVALID_SPATIAL_CONSTRAINT = -2147215996
    FDO_E_SE_INVALID_STREAM_TYPE = -2147215995
    FDO_E_SE_INVALID_SPATIAL_COLUMN = -2147215994
    FDO_E_SE_NO_SPATIAL_MASKS = -2147215993
    FDO_E_SE_IOMGR_NOT_FOUND = -2147215992
    FDO_E_SE_SYSTEM_IS_CLIENT_ONLY = -2147215991
    FDO_E_SE_MULTIPLE_SPATIAL_COLS = -2147215990
    FDO_E_SE_INVALID_SHAPE_OBJECT = -2147215989
    FDO_E_SE_INVALID_PARTNUM = -2147215988
    FDO_E_SE_INCOMPATIBLE_SHAPES = -2147215987
    FDO_E_SE_INVALID_PART_OFFSET = -2147215986
    FDO_E_SE_INCOMPATIBLE_COORDREFS = -2147215985
    FDO_E_SE_COORD_OUT_OF_BOUNDS = -2147215984
    FDO_E_SE_LAYER_CACHE_FULL = -2147215983
    FDO_E_SE_INVALID_COORDREF_OBJECT = -2147215982
    FDO_E_SE_INVALID_COORDSYS_ID = -2147215981
    FDO_E_SE_INVALID_COORDSYS_DESC = -2147215980
    FDO_E_SE_INVALID_ROW_ID_LAYER = -2147215979
    FDO_E_SE_PROJECTION_ERROR = -2147215978
    FDO_E_SE_ARRAY_BYTES_EXCEEDED = -2147215977
    FDO_E_SE_POLY_SHELLS_OVERLAP = -2147215976
    FDO_E_SE_TOO_FEW_POINTS = -2147215975
    FDO_E_SE_INVALID_PART_SEPARATOR = -2147215974
    FDO_E_SE_INVALID_POLYGON_CLOSURE = -2147215973
    FDO_E_SE_INVALID_OUTER_SHELL = -2147215972
    FDO_E_SE_ZERO_AREA_POLYGON = -2147215971
    FDO_E_SE_POLYGON_HAS_VERTICAL_LINE = -2147215970
    FDO_E_SE_OUTER_SHELLS_OVERLAP = -2147215969
    FDO_E_SE_SELF_INTERSECTING = -2147215968
    FDO_E_SE_INVALID_EXPORT_FILE = -2147215967
    FDO_E_SE_READ_ONLY_SHAPE = -2147215966
    FDO_E_SE_INVALID_DATA_SOURCE = -2147215965
    FDO_E_SE_INVALID_STREAM_SPEC = -2147215964
    FDO_E_SE_INVALID_ALTER_OPERATION = -2147215963
    FDO_E_SE_INVALID_SPATIAL_COL_NAME = -2147215962
    FDO_E_SE_INVALID_DATABASE = -2147215961
    FDO_E_SE_SPATIAL_SQL_NOT_INSTALLED = -2147215960
    FDO_E_SE_NORM_DIM_INFO_NOT_FOUND = -2147215959
    FDO_E_SE_NORM_DIM_TAB_VALUE_NOT_FOUND = -2147215958
    FDO_E_SE_UNSUPPORTED_NORMALIZED_OPERATION = -2147215957
    FDO_E_SE_INVALID_REGISTERED_LAYER_OPTION = -2147215956
    FDO_E_SE_READ_ONLY = -2147215955
    FDO_E_SE_NO_SDE_ROWID_COLUMN = -2147215954
    FDO_E_SE_READ_ONLY_COLUMN = -2147215953
    FDO_E_SE_INVALID_VERSION_NAME = -2147215952
    FDO_E_SE_STATE_NOEXIST = -2147215951
    FDO_E_SE_INVALID_STATEINFO_OBJECT = -2147215950
    FDO_E_SE_VERSION_HAS_MOVED = -2147215949
    FDO_E_SE_STATE_HAS_CHILDREN = -2147215948
    FDO_E_SE_PARENT_NOT_CLOSED = -2147215947
    FDO_E_SE_VERSION_EXISTS = -2147215946
    FDO_E_SE_TABLE_NOT_MULTIVERSION = -2147215945
    FDO_E_SE_STATE_USED_BY_VERSION = -2147215944
    FDO_E_SE_INVALID_VERSIONINFO_OBJECT = -2147215943
    FDO_E_SE_INVALID_STATE_ID = -2147215942
    FDO_E_SE_SDETRACELOC_NOT_SET = -2147215941
    FDO_E_SE_ERROR_LOADING_SSA = -2147215940
    FDO_E_SE_TOO_MANY_STATES = -2147215939
    FDO_E_SE_STATES_ARE_SAME = -2147215938
    FDO_E_SE_NO_ROWID_COLUMN = -2147215937
    FDO_E_SE_NO_STATE_SET = -2147215936
    FDO_E_SE_SSA_FUNCTION_ERROR = -2147215935
    FDO_E_SE_INVALID_REGINFO_OBJECT = -2147215934
    FDO_E_SE_NO_COMMON_LINEAGE = -2147215933
    FDO_E_SE_STATE_INUSE = -2147215932
    FDO_E_SE_STATE_TREE_INUSE = -2147215931
    FDO_E_SE_INVALID_RASTER_COLUMN = -2147215930
    FDO_E_SE_RASTERCOLUMN_EXISTS = -2147215929
    FDO_E_SE_INVALID_MVTABLE_INDEX = -2147215928
    FDO_E_SE_INVALID_STORAGE_TYPE = -2147215927
    FDO_E_SE_AMBIGUOUS_NIL_SHAPE = -2147215926
    FDO_E_SE_INVALID_BYTE_ORDER = -2147215925
    FDO_E_SE_INVALID_GEOMETRY_TYPE = -2147215924
    FDO_E_SE_INVALID_NUM_MEASURES = -2147215923
    FDO_E_SE_INVALID_NUM_PARTS = -2147215922
    FDO_E_SE_BINARY_TOO_SMALL = -2147215921
    FDO_E_SE_SHAPE_TEXT_TOO_LONG = -2147215920
    FDO_E_SE_SHAPE_TEXT_ERROR = -2147215919
    FDO_E_SE_TOO_MANY_PARTS = -2147215918
    FDO_E_SE_TYPE_MISMATCH = -2147215917
    FDO_E_SE_SQL_PARENTHESIS_MISMATCH = -2147215916
    FDO_E_SE_NIL_SHAPE_NOT_ALLOWED = -2147215915
    FDO_E_SE_INSTANCE_ALREADY_RUNNING = -2147215914
    FDO_E_SE_UNSUPPORTED_OPERATION = -2147215913
    FDO_E_SE_INVALID_EXTERNAL_LAYER_OPTION = -2147215912
    FDO_E_SE_NORMALIZE_VALUE_NOT_FOUND = -2147215911
    FDO_E_SE_INVALID_QUERY_TYPE = -2147215910
    FDO_E_SE_NO_TRACE_LIBRARY = -2147215909
    FDO_E_SE_TRACE_ON = -2147215908
    FDO_E_SE_TRACE_OFF = -2147215907
    FDO_E_SE_SCL_SYNTAX_ERROR = -2147215906
    FDO_E_SE_TABLE_REGISTERED = -2147215905
    FDO_E_SE_INVALID_REGISTRATION_ID = -2147215904
    FDO_E_SE_TABLE_NOREGISTERED = -2147215903
    FDO_E_SE_TOO_MANY_REGISTRATIONS = -2147215902
    FDO_E_SE_DELETE_NOT_ALLOWED = -2147215901
    FDO_E_SE_RASTERCOLUMN_INUSE = -2147215898
    FDO_E_SE_RASTERCOLUMN_NOEXIST = -2147215897
    FDO_E_SE_INVALID_RASTERCOLUMN_NUMBER = -2147215896
    FDO_E_SE_TOO_MANY_RASTERCOLUMNS = -2147215895
    FDO_E_SE_INVALID_RASTER_NUMBER = -2147215894
    FDO_E_SE_NO_REQUEST_STATUS = -2147215893
    FDO_E_SE_NO_REQUEST_RESULTS = -2147215892
    FDO_E_SE_RASTERBAND_EXISTS = -2147215891
    FDO_E_SE_RASTERBAND_NOEXIST = -2147215890
    FDO_E_SE_RASTER_EXISTS = -2147215889
    FDO_E_SE_RASTER_NOEXIST = -2147215888
    FDO_E_SE_TOO_MANY_RASTERBANDS = -2147215887
    FDO_E_SE_TOO_MANY_RASTERS = -2147215886
    FDO_E_SE_VIEW_EXISTS = -2147215885
    FDO_E_SE_VIEW_NOEXIST = -2147215884
    FDO_E_SE_LOCK_EXISTS = -2147215883
    FDO_E_SE_ROWLOCK_MASK_CONFLICT = -2147215882
    FDO_E_SE_NOT_IN_RASTER = -2147215881
    FDO_E_SE_INVALID_RASBANDINFO_OBJECT = -2147215880
    FDO_E_SE_INVALID_RASCOLINFO_OBJECT = -2147215879
    FDO_E_SE_INVALID_RASTERINFO_OBJECT = -2147215878
    FDO_E_SE_INVALID_RASTERBAND_NUMBER = -2147215877
    FDO_E_SE_MULTIPLE_RASTER_COLS = -2147215876
    FDO_E_SE_TABLE_SCHEMA_IS_LOCKED = -2147215875
    FDO_E_SE_INVALID_LOGINFO_OBJECT = -2147215874
    FDO_E_SE_SQL_TOO_LONG = -2147215873
    FDO_E_SE_UNSUPPORTED_ON_VIEW = -2147215872
    FDO_E_SE_LOG_EXISTS = -2147215871
    FDO_E_SE_SDE_WARNING = -2147215870
    FDO_E_SE_ETYPE_CHANGED = -2147215869
    FDO_E_SE_NO_ROWS_DELETED = -2147215868
    FDO_E_SE_TOO_MANY_DISTINCTS = -2147215867
    FDO_E_SE_NULL_VALUE = -2147215866
    FDO_E_SE_NO_ROWS_UPDATED = -2147215865
    FDO_E_SE_NO_CPGCVT = -2147215864
    FDO_E_SE_NO_CPGHOME = -2147215863
    FDO_E_SE_DBMS_DOES_NOT_SUPPORT = -2147215862
    FDO_E_SE_ROWLOCKING_ENABLED = -2147215861
    FDO_E_SE_ROWLOCKING_NOT_ENABLED = -2147215860
    FDO_E_SE_LOG_IS_OPEN = -2147215859
    FDO_E_SE_SPATIALREF_EXISTS = -2147215858
    FDO_E_SE_SPATIALREF_NOEXIST = -2147215857
    FDO_E_SE_SPATIALREF_IN_USE = -2147215856
    FDO_E_SE_INVALID_SPATIALREFINFO_OBJECT = -2147215855
    FDO_E_SE_INVALID_FUNCTION_ID = -2147215854
    FDO_E_SE_MOSAIC_NOT_ALLOWED = -2147215853
    FDO_E_SE_PASSWORD_EXPIRED = -2147215852
    FDO_E_SE_NO_ARCSDE_LICENSE = -2147215851
    FDO_E_SE_NO_ARCSDE_LICENSE_NO_PERMISSION = -2147215850
    FDO_E_SE_NO_ARCSDE_LICENSE_SQLEXPRESS = -2147215849
    FDO_E_DEFAULT_VALUE_NOT_NULLABLE = -2147215359
    FDO_E_DEFAULT_VALUE_INVALID = -2147215358
    FDO_E_OBJECT_IN_ANOTHER_FEATUREDATASET = -2147215279
    FDO_E_ONLY_SIMPLE_FEATURES_SUPPORTED = -2147215278
    FDO_E_XML_PARSE_ERROR = -2147215103
    FDO_E_TOPOLOGY_ILLEGAL_RESHAPE = -2147215023
    FDO_E_TOPOLOGY_ALREADY_EXISTS = -2147215022
    FDO_E_TOPOLOGY_NOT_FOUND = -2147215021
    FDO_E_TOPOLOGY_CANNOT_RENAME = -2147215020
    FDO_E_INVALID_FEATURE_TYPE_FOR_TOPOLOGY = -2147215019
    FDO_E_INVALID_GEOMETRY_TYPE_FOR_TOPOLOGY = -2147215018
    FDO_E_INVALID_TOPOLOGY_RULE = -2147215017
    FDO_E_TOPOLOGY_WORKSPACE_EXTENSION_NOT_FOUND = -2147215016
    FDO_E_CANNOT_RESET_CLUSTER_TOLERANCE = -2147215015
    FDO_E_TOPOLOGIES_NOT_SUPPORTED_IN_RELEASE = -2147215014
    FDO_E_TOPOLOGY_INVALID_WEIGHT = -2147215013
    FDO_E_CANNOT_MODIFY_TOPOLOGY_ERROR_FEATURE = -2147215012
    FDO_E_TOPOCLASSES_SYSTEM_TABLE_INCONSISTENCY = -2147215011
    FDO_E_INVALID_CLUSTER_TOLERANCE = -2147215010
    FDO_E_INVALID_GEOMETRY_TYPE_FOR_TOPOLOGY_RULE = -2147215009
    FDO_E_NOT_SUPPORTED_ON_TOPOLOGY_ERROR_FEATURE = -2147215008
    FDO_E_CANNOT_MODIFY_SYSTEM_MANAGED_TABLES = -2147215007
    FDO_E_TOPOLOGY_EDGE_NOT_SELECTABLE = -2147215006
    FDO_E_CLASS_ALREADY_MEMBER_OF_TOPOLOGY = -2147215005
    FDO_E_EMPTY_ENVELOPE_FOR_CLEAN = -2147215004
    FDO_E_INVALID_TOPOLOGY_ID = -2147215003
    FDO_E_TOPOLOGY_ENGINE_FAILURE = -2147215002
    FDO_E_TOPOLOGY_ENGINE_OVERPROC_FAILURE = -2147215001
    FDO_E_INVALID_TOPOLOGY_RULE_TYPE = -2147215000
    FDO_E_NO_PARTIAL_REBUILD = -2147214999
    FDO_E_CANNOT_ADD_REGISTERED_CLASS_TO_TOPOLOGY = -2147214998
    FDO_E_TOPOLOGY_ERROR_OVERFLOW = -2147214997
    FDO_E_NETWORK_CANNOT_RENAME = -2147214996
    FDO_E_NETWORK_INVALID_TYPE = -2147214995
    FDO_E_NETWORK_ALREADY_EXISTS = -2147214994
    FDO_E_NETWORK_INVALID_GEOMETRY_TYPE = -2147214993
    FDO_E_NETWORK_NOT_FOUND = -2147214992
    FDO_E_VERSIONING_NOT_SUPPORTED = -2147214991
    FDO_E_CLASS_NOT_IN_TOPOLOGIES_FEATURE_DATASET = -2147214990
    FDO_E_TOPOLOGY_HAS_NO_CLASSES = -2147214989
    FDO_E_TOPOLOGY_INVALID_RANK = -2147214988
    FDO_E_OUT_OF_PHYSICAL_MEMORY = -2147214987
    FDO_E_TOPOLOGY_OPERATION_CANCELLED = -2147214986
    FDO_E_CLASS_NOT_IN_TOPOLOGY = -2147214985
    FDO_E_MODIFY_EDGE_ENDPOINT = -2147214984
    FDO_E_CANNOT_ADD_STANDALONE_CLASS_TO_TOPOLOGY = -2147214983
    FDO_E_CLASS_IN_TOPOLOGY_REQUIRES_EDIT_SESSION = -2147214982
    FDO_E_CANNOT_ADD_RULE_TO_VERSIONED_TOPOLOGY = -2147214981
    FDO_E_TOPOLOGY_SCHEMA_LOCK_CONFLICT = -2147214980
    FDO_E_DIRTY_AREA_OUTSIDE_SPATIAL_DOMAIN = -2147214979
    FDO_E_TOPOLOGY_INVALID_NAME = -2147214978
    FDO_E_TOPOLOGY_ENGINE_TEMP_SPACE_EXHAUSTED = -2147214977
    FDO_E_INCONSISTENT_TOPOLOGY_RULE = -2147214976
    FDO_E_UNSUPPORTED_TOPOLOGY_RULE = -2147214975
    FDO_E_INVALID_TOPOLOGY_RULE_CLASS_ASSIGNMENT = -2147214974
    FDO_E_OPERATION_NOT_SUPPORTED_IN_EDIT_SESSION = -2147214973
    FDO_E_TOPOLOGY_EMPTY_GEOMETRY = -2147214972
    FDO_E_TOPOLOGY_EXTENT_TOO_LARGE = -2147214971
    FDO_E_Z_CLUSTER_TOLERANCE_NOT_SUPPORTED_IN_RELEASE = -2147214970
    FDO_E_OPERATION_REQUIRES_EDIT_SESSION = -2147214969
    FDO_E_OPERATION_NOT_SUPPORTED_IN_EDIT_OPERATION = -2147214968
    FDO_E_TOPOGRAPH_NOT_BUILT = -2147214967
    FDO_E_TOPOGRAPH_CORRUPT = -2147214966
    FDO_E_CANT_MERGE_VERTICALEDGES = -2147214965
    FDO_E_INCONSISTANT_MERGE_PARENTS = -2147214964
    FDO_E_EDGE_SET_NOT_CONNECTED = -2147214963
    FDO_E_TOPOLOGY_RULE_NOT_SUPPORTED_IN_RELEASE = -2147214962
    FDO_E_CANT_MERGE_BRANCHINGEDGES = -2147214961
    FDO_E_NOT_PSEUDONODE = -2147214960
    FDO_E_CLASS_IN_NETWORK_REQUIRES_EDIT_SESSION = -2147214959
    FDO_E_CANNOT_ADD_VERSIONED_CLASS_TO_NON_VERSIONED_TOPOLOGY = -2147214958
    FDO_E_CANNOT_ADD_NON_VERSIONED_CLASS_TO_VERSIONED_TOPOLOGY = -2147214957
    FDO_E_TOPOLOGIES_SCHEMA_CHANGES_NOT_SUPPORTED_IN_RELEASE = -2147214956
    FDO_E_TERRAIN_NOT_FOUND = -2147214955
    FDO_E_NAME_STRING_SYNTAX = -2147213231
    FDO_E_INVALID_IMPORT_XML = -2147213055
    FDO_E_REQUIRED_XML_ELEMENT_NOT_FOUND = -2147213054
    FDO_E_XML_EXPORT_DATASET_NOT_FOUND = -2147213053
    FDO_E_CLASS_NOT_REPLICABLE = -2147212975
    FDO_E_SYNCHRONIZATION_CONFLICTS = -2147212974
    FDO_E_CANNOT_SYNCHRONIZE = -2147212973
    FDO_E_REPLICA_NOT_FOUND = -2147212972
    FDO_E_RECONCILE_FAILED = -2147212971
    FDO_E_INVALID_REPLICA = -2147212970
    FDO_E_GENERATION_OUT_OF_ORDER = -2147212969
    FDO_E_SYNCHRONIZATION_HAS_CONFLICTS = -2147212968
    FDO_E_REPLICATION_NOT_SUPPORTED_IN_RELEASE = -2147212967
    FDO_E_REPLICATION_NOT_SUPPORTED = -2147212966
    FDO_E_MISSING_ACKNOWLEDGEMENT = -2147212965
    FDO_E_CANNOT_SEND_TRANSMISSION = -2147212964
    FDO_E_REPLICA_LOCKED = -2147212963
    FDO_E_RELATED_DATASET_IS_REFERENCED_BY_REPLICA = -2147212962
    FDO_E_READONLY_REPLICA = -2147212961
    FDO_E_OLD_MESSAGE = -2147212960
    FDO_E_REPLICA_IN_SENDING_DATA_STATE = -2147212959
    FDO_E_REPLICA_CAN_ONLY_IMPORT_ACKNOWLEDGMENT = -2147212958
    FDO_E_REPLICA_NO_UNACKNOWLEDGED_GENERATIONS = -2147212957
    FDO_E_MULTIGEN_REPLICAS_NOT_SUPPORTED_IN_WORKSPACE = -2147212956
    FDO_E_CHECKOUTS_CANNOT_REEXPORT_CHANGES = -2147212955
    FDO_E_REPLICA_RECEIVER_CANNOT_REEXPORT_CHANGES = -2147212954
    FDO_E_REPLICA_RECEIVER_CANNOT_EXPORT_CHANGES = -2147212953
    FDO_E_CANNOT_CHECKOUT_HIGH_PREC_DATA_IN_LOW_PREC_DATASET = -2147212952
    FDO_E_CANNOT_REPLICATE_LOW_PRECISION_DATA = -2147212951
    FDO_E_REPLICA_INVALID_OUTPUT_XML_FILE = -2147212950
    FDO_NO_MATCH_DATASETS_FOUND_FOR_REGISTER_REPLICAS = -2147212949
    FDO_E_NON_SIMPLE_DATASET_CANNOT_BE_REGISTERED_BY_REPLICA = -2147212948
    FDO_E_INVALID_REPLICA_NAME = -2147212947
    FDO_E_REPLICA_OLD_ACK = -2147212946
    FDO_E_REPLICA_SCHEMA_CHANGES_WRONG_DIRECTION = -2147212945
    FDO_E_CANNOT_CREATE_EMPTY_REPLICA = -2147212944
    FDO_E_INVALID_DATA_FOR_THIS_OPERATION = -2147212943
    FDO_E_REPLICA_SYNC_VERSION_NOT_YET_POSTED = -2147212942
    FDO_E_CHILD_REPLICA_CANNOT_BE_CREATED_IN_PARENTDB = -2147212941
    FDO_E_GLOBALID_FIELD_REFERENCED_BY_REPLICA_CANNOT_BE_DELETED = -2147212940
    FDO_E_MUST_BE_REPLICA_OWNER = -2147212939
    FDO_E_REPLICA_NAME_ALEARDY_EXISTS = -2147212938
    FDO_E_CANNOT_REGISTER_EMPTY_REPLICA = -2147212937
    FDO_UNREGISTER_GLOBALID_NOT_SUPPORTED = -2147212936
    FDO_REGISTER_NULLABLE_GLOBALID_NOT_SUPPORTED = -2147212935
    FDO_REGISTER_VERSIONED_GLOBALID_NOT_SUPPORTED = -2147212934
    FDO_ONEWAY_REPLICA_USING_ARCHIVING_NOT_SUPPORTED_IN_NAMED_VERSIONS = -2147212933
    FDO_ONEWAY_REPLICA_PARENT_READONLY_NOT_SUPPORTED_IN_LOCAL_CHILD_WORKSPACES = -2147212932
    FDO_E_MUST_BE_VERSION_OWNER_TO_SYNC = -2147212931
    FDO_DATA_CANNOT_BE_REGISTERED_AS_REPLICAS_IN_TRANSPORT_FGDB = -2147212930
    FDO_E_CHILD_PARENT_REPLICA_CANNOT_EXIST_IN_SAME_GEODATABASE = -2147212929
    FDO_E_FAILED_TO_SET_TARGET_NAME = -2147212928
    FDO_E_PERSONAL_GEODATABASE_NOT_SUPPORTED_ON_SERVER = -2147212927
    FDO_E_FAILED_TO_CREATE_DELTA_WORKSPACE = -2147212926
    FDO_E_NO_DEFAULT_TURN_EVALUATOR = -2147212719
    FDO_E_FEATURE_DATASET_CONTAINERS_NOT_SUPPORTED = -2147212718
    FDO_E_NETWORK_DATASET_INVALID_NAME = -2147212717
    FDO_E_INVALID_NETWORK_ATTRIBUTE_NAME = -2147212716
    FDO_E_INVALID_NETWORK_SOURCE_FOR_EVALUATOR = -2147212715
    FDO_E_INVALID_EXPRESSION_FOR_EVALUATOR = -2147212714
    FDO_E_INVALID_CONSTANT_FOR_NETWORK_ATTRIBUTE = -2147212713
    FDO_E_SUBTYPES_REQUIRED = -2147212712
    FDO_E_INVALID_NETWORK_DATASET_SCHEMA = -2147212711
    FDO_E_NETWORK_OBJECT_EVALUATOR_ERROR = -2147212710
    FDO_E_NETWORK_BAD_EDGE_ORIENTATION = -2147212709
    FDO_E_NETWORK_DATASET_INVALID_ACCESS = -2147212708
    FDO_E_NO_DEFAULT_JUNCTION_EVALUATOR = -2147212707
    FDO_E_NO_DEFAULT_EDGE_EVALUATOR = -2147212706
    FDO_E_NETWORK_DATASET_NOTURNS = -2147212705
    FDO_E_NETWORK_ELEMENT_EVALUATOR_ERROR = -2147212704
    FDO_E_NETWORK_SOURCE_DATASET_NOT_FOUND = -2147212703
    FDO_E_INVALID_NETWORK_SOURCE = -2147212702
    FDO_E_INVALID_NETWORK_ATTRIBUTE = -2147212701
    FDO_E_INVALID_CONNECTIVITY_GROUP_NAME = -2147212700
    FDO_E_SUBTYPES_NOT_IN_USE = -2147212699
    FDO_E_NETWORK_DATASETS_NOT_SUPPORTED_IN_RELEASE = -2147212698
    FDO_E_NETWORK_DATASET_ALREADY_EXISTS = -2147212697
    FDO_E_SUBTYPES_UNSPECIFIED_CONN_GROUP = -2147212696
    FDO_E_SUBTYPES_UNSPECIFIED_CONN_POLICY = -2147212695
    FDO_E_INVALID_NETWORK_SOURCE_GEOMETRY_TYPE = -2147212694
    FDO_E_INVALID_NETWORK_SOURCE_FEATURE_TYPE = -2147212693
    FDO_E_FSTAR_INVALID_FROM_EDGE = -2147212692
    FDO_E_EVALUATOR_CREATE = -2147212691
    FDO_E_EVALUATOR_INITIALIZE_DATA = -2147212690
    FDO_E_EVALUATOR_INITIALIZE_QUERY = -2147212689
    FDO_E_EVALUATOR_QUERY = -2147212688
    FDO_E_INVALID_NETWORK_ELEMENT_ID = -2147212687
    FDO_E_INVALID_NETWORK_EDGE_DIRECTION = -2147212686
    FDO_E_INVALID_NETWORK_TURN_TYPE = -2147212685
    FDO_E_TURN_NOT_PRESENT = -2147212684
    FDO_E_BUILD_NOT_SUPPORTED = -2147212683
    FDO_E_OPERATION_NOT_SUPPORTED_ON_BUILDABLE_NETWORK = -2147212682
    FDO_E_NETWORK_SOURCE_INVALID_NAME = -2147212681
    FDO_E_NETWORK_SOURCE_INVALID_ELEMENT_TYPE = -2147212680
    FDO_E_NO_SYSTEM_JUNCTION_SOURCE = -2147212679
    FDO_E_BAD_SYSTEM_JUNCTION_SOURCE = -2147212678
    FDO_E_NETWORK_ELEMENT_NOT_INITIALIZED = -2147212677
    FDO_E_ATTRIBUTES_WITHOUT_SOURCES = -2147212676
    FDO_E_INVALID_HIERARCHY_RANGES = -2147212675
    FDO_E_CANNOT_DELETE_NETWORK_ATTRIBUTES = -2147212674
    FDO_E_SOURCE_DIRECTIONS_NOT_SUPPORTED = -2147212673
    FDO_E_NETWORK_SOURCE_ALREADY_EXISTS = -2147212672
    FDO_E_NETWORK_SOURCE_NAME_DOESNT_EXIST = -2147212671
    FDO_E_EVALUATOR_CANNOT_BE_DEFAULT_EVALUATOR = -2147212670
    FDO_E_INVALID_NETWORK_ATTRIBUTE_FOR_EVALUATOR = -2147212669
    FDO_E_EVALUATOR_NOT_VALIDATED = -2147212668
    FDO_E_EVALUATOR_NOT_VALID = -2147212667
    FDO_E_EVALUATOR_NOT_INITIALIZED = -2147212666
    FDO_E_EVALUATOR_SYNTAX_ERROR = -2147212665
    FDO_E_FIELD_EVALUATOR_FIELD_NOT_FOUND = -2147212664
    FDO_E_INVALID_NETWORK_ATTRIBUTE_ID = -2147212663
    FDO_E_NETWORK_SOURCE_INVALID_FULLNAME = -2147212662
    FDO_E_NOT_CONSTANT_EVALUATOR = -2147212661
    FDO_E_DIRECTIONAL_EVALUATOR_WITH_JUNCTION_SOURCE = -2147212660
    FDO_E_INCORRECT_DATA_ELEMENT_TYPE = -2147212659
    FDO_E_INVALID_SOURCES_FOR_SHAPEFILE_NETWORK_DATASET = -2147212658
    FDO_E_NETWORK_SOURCE_INCONSISTENT_ELEVATION_SPECIFICATION = -2147212657
    FDO_E_TURN_NO_NETWORK = -2147212656
    FDO_E_TURN_GEOM_TOO_MANY_VERTICES = -2147212655
    FDO_E_TURN_NOT_VALID = -2147212654
    FDO_E_TURN_GEOM_NOT_POLYLINE = -2147212653
    FDO_E_TURN_GEOM_NOT_ENOUGH_VERTICES = -2147212652
    FDO_E_TURN_GEOM_MULTIPART = -2147212651
    FDO_E_TURN_GEOM_NO_FIRST_FEATURE = -2147212650
    FDO_E_TURN_GEOM_NO_LAST_FEATURE = -2147212649
    FDO_E_TURN_GEOM_NO_FEATURES = -2147212648
    FDO_E_TURN_GEOM_DISCONNECTED_FEATURES = -2147212647
    FDO_E_TURN_GEOM_INVALID_SEQUENCE = -2147212646
    FDO_E_TURN_NOT_ENOUGH_PARTS = -2147212645
    FDO_E_TURN_NDS_INTERIOR_EXTERIOR_CONFLICT = -2147212644
    FDO_E_TURN_NDS_EXTERIOR_LOOP = -2147212643
    FDO_E_TURN_NO_EDGE_SOURCES = -2147212642
    FDO_E_TURN_INVALID_EDGE1END = -2147212641
    FDO_E_TURN_GEOM_AMBIGUOUS_FEATURES = -2147212640
    FDO_E_NETWORK_MISSING_SOURCE = -2147212639
    FDO_E_DIRECTIONAL_EVALUATOR_WITH_TURN_SOURCE = -2147212638
    FDO_E_NETWORK_SOURCE_MISSING_FEATURE_CLASS = -2147212637
    FDO_E_NETWORK_SOURCE_NOT_SIMPLE_FEATURE_CLASS = -2147212636
    FDO_E_NETWORK_SOURCE_IN_MULTIPLE_NETWORKS = -2147212635
    FDO_E_NETWORK_EVALUATOR_CREATE_FAILED = -2147212634
    FDO_E_FIELD_EVALUATOR_AS_DEFAULT_EVALUATOR = -2147212633
    FDO_E_NODIRECTIONAL_EVALUATOR_WITH_EDGE_SOURCE = -2147212632
    FDO_E_MISSING_NETWORK_SOURCE_FOR_EVALUATOR = -2147212631
    FDO_E_TURN_ILLEGAL_START_END_POS = -2147212630
    FDO_E_CANNOT_DELETE_SYSTEM_JUNCTION_SOURCE = -2147212629
    FDO_E_TURN_INVALID_EDGE_DESCRIPTOR = -2147212628
    FDO_E_TURN_CANNOT_CHANGE_SUPPORT = -2147212627
    FDO_E_ID_OVERFLOW = -2147212626
    FDO_E_TURN_INVALID_MAX_EDGES = -2147212625
    FDO_E_TURN_INVALID_CUR_MAX_EDGES = -2147212624
    FDO_E_NO_SCRIPT_CONTROL = -2147212623
    FDO_E_TURN_MISSING_EDGE = -2147212622
    FDO_E_MISSING_SYSTEM_JUNCTION_CLASS_ELEV_FIELD = -2147212621
    FDO_E_BAD_TYPE_SYSTEM_JUNCTION_CLASS_ELEV_FIELD = -2147212620
    FDO_E_INVALID_SCHEMA_UPDATE = -2147212619
    FDO_E_USE_BY_DEFAULT_NOT_SUPPORTED = -2147212618
    FDO_E_SIGNPOSTS_NOT_SUPPORTED = -2147212617
    FDO_E_NETWORK_ATTRIBUTE_ALREADY_EXISTS = -2147212616
    FDO_E_INVALID_DIRECTIONS_LENGTH_UNIT = -2147212615
    FDO_E_OVERLAPPING_NETWORK_GLOBAL_TURN_DELAY_CATEGORIES = -2147212614
    FDO_E_NETWORK_ATTRIBUTE_NOT_COST_USAGE = -2147212613
    FDO_E_NETWORK_ATTRIBUTE_NOT_TIME_UNITS = -2147212612
    FDO_E_NETWORK_ATTRIBUTE_REFERENCES_SELF = -2147212611
    FDO_E_NETWORK_FUNCTION_EVALUATOR_OPERATOR_NOT_SUPPORTED = -2147212610
    FDO_E_NETWORK_FUNCTION_EVALUATOR_ARGUMENT1_INVALID = -2147212609
    FDO_E_NETWORK_FUNCTION_EVALUATOR_ARGUMENT2_INVALID = -2147212608
    FDO_E_NETWORK_FUNCTION_EVALUATOR_PARAMETER_MISSING = -2147212607
    FDO_E_NETWORK_FUNCTION_EVALUATOR_PARAMETER_NOT_NUMERIC = -2147212606
    FDO_E_NETWORK_FUNCTION_EVALUATOR_OVERFLOW = -2147212605
    FDO_E_NETWORK_FUNCTION_EVALUATOR_MISSING_REFERENCED_NETWORK_ATTRIBUTE = -2147212604
    FDO_E_NETWORK_FUNCTION_EVALUATOR_REFERENCED_NETWORK_ATTRIBUTE_NOT_NUMERIC = -2147212603
    FDO_E_EVALUATOR_NOT_SUPPORTED = -2147212602
    FDO_E_FORWARDSTAR_ADD_CACHED_ATTRIBUTE_DEPRECATED = -2147212601
    FDO_E_FORWARDSTAR_REMOVE_CACHED_ATTRIBUTES_DEPRECATED = -2147212600
    FDO_E_INVALID_NETWORK_ATTRIBUTE_USAGE_TYPE = -2147212599
    FDO_E_INVALID_NETWORK_EDGE_ATTRIBUTE_ADJUSTMENT = -2147212598
    FDO_E_INVALID_NETWORK_ATTRIBUTE_ADJUSTMENT_VALUE = -2147212597
    FDO_E_INVALID_POSITION_RANGE = -2147212596
    FDO_E_NETWORK_ELEVATION_MODEL_CANNOT_CHANGE = -2147212595
    FDO_E_ZCOORDINATES_NOT_SUPPORTED_IN_RELEASE = -2147212594
    FDO_E_NETWORK_SOURCE_INVALID_ELAVATION_MODEL = -2147212593
    FDO_E_NETWORK_COVERING_HYPEREDGE_DOES_NOT_EXIST = -2147212592
    FDO_E_INVALID_EVALUATOR_FOR_SHAPEFILE_NETWORK_DATASET = -2147212591
    FDO_E_INVALID_USAGE_OR_UNIT_TYPE_FOR_EVALUATOR = -2147212590
    FDO_E_INVALID_TRAFFIC_DATA = -2147212589
    FDO_E_INVALID_TIME_SLICE_FIELD_NAME = -2147212588
    FDO_E_HISTORICAL_TRAFFIC_DATA_CANNOT_CHANGE = -2147212587
    FDO_E_TRAFFIC_DATA_NOT_SUPPORTED = -2147212586
    FDO_E_TRAFFIC_DATA_ATTRIBUTE_MISSING = -2147212585
    FDO_E_NETWORK_DATASET_NO_TIME_ZONE = -2147212584
    FDO_E_SIGNPOST_TABLE_NOT_REGISTERED = -2147212583
    FDO_E_BUILD_INSIDE_EDIT_SESSION = -2147212582
    FDO_E_BUILDNETWORK_ALREADYBUILD = -2147212581
    FDO_E_FSTAR_INVALID_FROM_EDGE_FORWARD = -2147212580
    FDO_E_FSTAR_INVALID_FROM_EDGE_BACKWARD = -2147212579
    FDO_E_NO_ATTRIBUTE_RECORD = -2147212578
    FDO_E_NETWORK_DATASET_NEEDS_UPGRADE = -2147212577
    FDO_E_NETWORK_DATASET_ALREADY_UPGRADED = -2147212576
    FDO_E_INVALID_TIME_VALUE = -2147212575
    FDO_E_INVALID_NETWORK_TIME_USAGE_TYPE = -2147212574
    FDO_E_INVALID_TIME_ZONE_OBJECTID = -2147212573
    FDO_E_INVALID_TIME_ZONE_NAME = -2147212572
    FDO_E_TRAFFIC_DATA_LENGTH_ATTRIBUTE_MISSING = -2147212571
    FDO_E_INVALID_TIME_SLICE_ARRAY = -2147212570
    FDO_E_NETWORK_SCHEMA_CHANGES_NOT_SUPPORTED = -2147212569
    FDO_E_INVALID_NETWORK_LANDMARK_SOURCE = -2147212568
    FDO_E_INVALID_NETWORK_LANDMARK_SOURCE_GEOMETRY_TYPE = -2147212567
    FDO_E_INVALID_NETWORK_LANDMARK_SOURCE_FIELD = -2147212566
    FDO_E_TIME_ZONE_ATTRIBUTE_IS_REQUIRED = -2147212565
    FDO_E_CADASTRAL_FABRIC_INVALID_NAME = -2147212287
    FDO_E_CADASTRAL_FABRICS_NOT_SUPPORTED_IN_RELEASE = -2147212286
    FDO_E_CADASTRAL_FABRIC_ALREADY_EXISTS = -2147212285
    FDO_E_CADASTRAL_FABRIC_JOB_ALREADY_EXISTS = -2147212284
    FDO_E_CADASTRAL_FABRIC_JOB_INVALID_STATUS = -2147212283
    FDO_E_CADASTRAL_FABRIC_SCHEMA_CORRUPTION = -2147212282
    FDO_E_CADASTRAL_FABRIC_JOB_LOCK_ALREADY_EXISTS = -2147212281
    FDO_E_CADASTRAL_FABRIC_MISSING_SYSTEM_TABLE = -2147212280
    FDO_E_CADASTRAL_FABRIC_DATA_CORRUPTION = -2147212279
    FDO_E_CADASTRAL_FABRIC_JOB_ALREADY_COMMITTED = -2147212278
    FDO_E_CADASTRAL_FABRIC_JOB_NOT_FOUND = -2147212277
    FDO_E_CADASTRAL_FABRIC_PACKET_LOAD_FAILED = -2147212276
    FDO_E_CADASTRAL_FABRIC_PACKET_MISSING_DATA = -2147212275
    FDO_E_JOB_DOES_NOT_BELONG_TO_FABRIC = -2147212274
    FDO_E_CADASTRAL_FABRIC_PACKET_POST_REQUIRES_EDIT_SESSION = -2147212273
    FDO_E_JOB_UNJOINED_PARCEL_PRESENT = -2147212272
    FDO_E_CADASTRAL_FABRIC_XML_PARSER_NOT_FOUND = -2147212271
    FDO_E_CADASTRAL_FABRIC_OBJECT_ALREADY_MODIFIED = -2147212270
    FDO_E_CADASTRAL_FABRIC_JOB_CURRENTLY_EDITED = -2147212269
    FDO_E_CADASTRAL_FABRIC_DATUM_MISMATCH = -2147212268
    FDO_E_CADASTRAL_FABRIC_ILLEGAL_RECONCILE = -2147212267
    FDO_E_CADASTRAL_FABRIC_COMMIT_NO_NAME = -2147212266
    FDO_E_CADASTRAL_FABRIC_COMMIT_NOT_DEFAULT = -2147212265
    FDO_E_CADASTRAL_FABRIC_COMMIT_JOB_LOCKED = -2147212264
    FDO_E_CADASTRAL_FABRIC_JOB_NOT_COMMITTED = -2147212263
    FDO_E_CADASTRAL_FABRIC_COPY_WITH_TOPOLOGY_NOT_SUPPORTED_IN_RELEASE = -2147212262
    FDO_E_CADASTRAL_FABRIC_OPERATION_CANCELLED = -2147212261
    FDO_E_CADASTRAL_FABRIC_ALREADY_UPGRADED = -2147212260
    FDO_E_PERSONAL_SDE_ONE_EDITOR = -2147212031
    FDO_E_CANNOT_CONNECT_TO_SERVER = -2147212030
    FDO_E_ITEM_NOT_FOUND = -2147211775
    FDO_E_ITEM_WITH_PATH_EXISTS = -2147211774
    FDO_E_ITEM_DOES_NOT_HAVE_DEFINITION = -2147211773
    FDO_E_INVALID_CATALOG_PATH = -2147211772
    FDO_E_ITEM_RELATIONSHIP_EXISTS = -2147211771
    FDO_E_CANNOT_CHANGE_ITEM_VISIBILITY = -2147211770
    FDO_E_RELATIONSHIP_VISIBILITY_INVALID = -2147211769
    FDO_E_CANNOT_CHANGE_ITEM_PROPERTY = -2147211768
    FDO_E_RELATIONSHIP_ATTRIBUTES_INVALID = -2147211767
    FDO_E_OTHER_ACTIVE_CONNECTIONS = -2147211766
    FDO_E_USER_DOES_NOT_HAVE_UPGRADE_PRIVILIGES = -2147211765
    FDO_E_INSTANCE_IS_NOT_UPGRADABLE = -2147211764
    FDO_E_INSTANCE_DOES_NOT_SUPPORT_XML_TYPE = -2147211763
    FDO_E_ITEM_RELATIONSHIP_NOT_FOUND = -2147211762
    FDO_E_ITEM_RELATIONSHIP_ITEM_NOT_FOUND = -2147211761
    FDO_E_DEFINITION_MISSING_CONTROLLER_MEMBERSHIP = -2147211760
    FDO_E_UNKNOWN_CATALOG_TYPE = -2147211759
    FDO_E_DOES_NOT_SUPPORT_UNMANAGED_RASTER_CATALOG = -2147211519
    FDO_E_QUERYDESCRIPTION_NOSPATIALCOLUMN = -2147211263
    FDO_E_QUERYDESCRIPTION_INVALIDCOLUMN = -2147211262
    FDO_E_QUERYDESCRIPTION_OIDNOTMAPPEDCOLUMN = -2147211261
    FDO_E_QUERYDESCRIPTION_COLUMNEXISTS = -2147211260
    FDO_E_QUERYDESCRIPTION_INVALIDFIELDTYPE = -2147211259
    FDO_E_QUERYTABLE_OIDMAPPEDCOLUMNHASNULL = -2147211258
    FDO_E_QUERYDESCRIPTION_OUTOFSYNC = -2147211257
    FDO_E_QUERYDESCRIPTION_OIDFIELDSMISSING = -2147211256
    FDO_E_QUERYDESCRIPTION_INVALIDGEOMETRYTYPE = -2147211255
    FDO_E_QUERYCLASS_INVALIDWHERE = -2147211254
    FDO_E_QUERYCLASS_OIDUNKNOWN = -2147211253
    FDO_E_QUERYTABLE_QUERYMISSING = -2147211252
    FDO_E_QUERYTABLE_WORKSPACEMISSING = -2147211251
    FDO_E_QUERYTABLE_OIDCOLUMNHASNULL = -2147211250
    FDO_E_QUERYCLASS_NULLGEOMETRYTYPE = -2147211249
    FDO_E_QUERYCLASS_INVALIDSRID = -2147211248
    FDO_E_QUERYCLASS_INVALIDSPATIALREFERENCE = -2147211247
    FDO_E_QUERYCLASS_INVALIDNAME = -2147211246
    FDO_E_RELCLASS_COULD_NOT_GET_ORIG_PRIM_KEY = -2147211183
    FDO_E_RELCLASS_COULD_NOT_GET_ORIG_FOR_KEY = -2147211182
    FDO_E_RELCLASS_COULD_NOT_GET_DEST_PRIM_KEY = -2147211181
    FDO_E_RELCLASS_COULD_NOT_GET_DEST_FOR_KEY = -2147211180
    FDO_E_RELCLASS_INCOMPATIBLE_WITH_EXISTING_RELCLASS = -2147211179
    FDO_E_RELCLASS_CANNOT_RESET_FKEYS = -2147211178
    FDO_E_RELCLASS_INVALID_FKEY = -2147211177
    FDO_E_RELCLASS_INVALID_CURSOR = -2147211176
    FDO_E_RELATIONSHIPCLASS_NOT_FOUND = -2147211175
    FDO_E_RELATIONSHIPCLASS_INVALID_NAME = -2147211174
    FDO_E_RELATIONSHIPCLASS_ALREADY_EXISTS = -2147211173
    FDO_E_RELATIONSHIPCLASS_INVALID_SPEC = -2147211172
    FDO_E_RELATIONSHIPCLASS_ORIGIN_DEST_NOT_FOUND = -2147211171
    FDO_E_MISSING_ORIGIN_OR_DESTINATION_OBJECT = -2147211170
    FDO_E_INVALID_CONNECTIVITY_RULE = -2147211007
    FDO_E_VALIDATION_NOT_SUPPORTED = -2147211006
    FDO_E_INVALID_CARDINALITY = -2147211005
    FDO_E_DEFAULT_JUNCTIONS_NOT_SUPPORTED_IN_RELEASE = -2147211004
    FDO_E_ALTERING_RULE_NOT_SUPPORTED = -2147211003
    FDO_E_CONNECTIVITY_RULES_NOT_SUPPORTED = -2147211002
    FDO_E_CANNOT_ALTER_NON_EXISTANT_RULE = -2147211001
    FDO_E_RULE_NOT_FOUND = -2147211000
    FDO_E_ZERO_LENGTH_POLYLINE = -2147210927
    FDO_E_CLOSED_POLYLINE = -2147210926
    FDO_E_NO_NETWORK_ANCILLARY_ROLE = -2147210925
    FDO_E_FLIPPED_POLYLINE = -2147210924
    FDO_E_CANNOT_SPLIT_JUNCTION = -2147210923
    FDO_E_INVALID_NETWORK_ANCILLARY_ROLE = -2147210922
    FDO_E_CANNOT_ADD_ORPHAN_JUNCTION_ON_EXISTING_JUNCTION = -2147210921
    FDO_E_INVALID_JUNCTION_INDEX = -2147210920
    FDO_E_CANNOT_SET_ENABLED_FIELD = -2147210919
    FDO_E_CANNOT_SET_WEIGHT_FIELD = -2147210918
    FDO_E_INVALID_GEOMETRY_FOR_COMPLEX_JUNCTION = -2147210917
    FDO_E_INVALID_GEOMETRY_TYPE_FOR_NETWORK_FEATURE_CLASS = -2147210916
    FDO_E_NO_ASSOCIATED_NETWORK_ELEMENT = -2147210915
    FDO_E_IDENTICAL_FROM_TO_JUNCTIONS = -2147210914
    FDO_E_EDGE_MISSING_ENDPOINT_JUNCTION = -2147210913
    FDO_E_CONNECTED_EDGE_INVALID_CONNECTIVITY = -2147210912
    FDO_E_INVALID_CONNECTIVITY_CANNOT_BE_CORRECTED = -2147210911
    FDO_E_INVALID_NETWORK_FEATURE_CLASS = -2147210910
    FDO_E_DOMAIN_NOT_FOUND = -2147209215
    FDO_E_DOMAIN_USED_BY_ATTRIBUTE_RULE = -2147209214
    FDO_E_DOMAIN_USED_AS_DEFAULT_DOMAIN = -2147209213
    FDO_E_DOMAIN_NAME_ALREADY_EXISTS = -2147209212
    FDO_E_DOMAIN_VALUE_EXCEEDS_FIELD_LENGTH = -2147209211
    FDO_E_DOMAIN_OWNER_DOESNT_MATCH = -2147209210
    FDO_E_DOMAIN_FIELD_TYPE_DOESNT_MATCH = -2147209209
    FDO_E_DOMAIN_TYPE_NOT_SUPPORTED = -2147209208
    FDO_E_CODED_VALUE_DOMAIN_VALUE_ALREADY_EXISTS = -2147209207
    FDO_E_CANNOT_LOCK_COCREATED_DOMAIN = -2147209206
    FDO_E_DOMAIN_USED_BY_OTHER_WORKSPACE = -2147209205
    FDO_E_DOMAIN_FIELD_TYPE_MISMATCH = -2147209204
    FDO_E_CANNOT_LOCK_DOMAIN_AS_NOT_OWNER = -2147209203
    FDO_E_DEFAULT_DOMAIN_NOT_FOUND = -2147209202
    FDO_E_DOMAIN_RECORD_NOT_FOUND = -2147209201
    FDO_E_DOMAIN_TYPE_DOESNT_MATCH = -2147209200
    FDO_E_CODED_VALUE_DOMAIN_NAME_EMPTY = -2147209199
    FDO_E_CODED_VALUE_DOMAIN_VALUE_NOT_COMPATIBLE = -2147209198
    FDO_E_CODED_VALUE_DOMAIN_VALUE_INCONSISTENT = -2147209197
    FDO_E_CODED_VALUE_DOMAIN_FIELD_TYPE_NOT_COMPATIBLE = -2147209196
    FDO_E_CANNOT_DELETE_DOMAIN = -2147209195
    FDO_E_DOMAIN_INVALID_NAME = -2147209194
    FDO_E_DOMAIN_DOES_NOT_MATCH_WORKSPACE = -2147209193
    FDO_E_DOMAIN_INCOMPATIBLE_WITH_DEFAULT_VALUE = -2147209192
    FDO_E_TRAFFIC_DOWNLOAD_TIMEOUT = -2147209191
    FDO_E_REFRESH_DYNAMIC_TRAFFIC_ERROR = -2147209190
    FDO_E_INVALID_NAME_OBJECT = -2147209135

class esriDrawStyle(Enumeration):
    __slots__ = ['esriDSNormal',
                 'esriDSValid',
                 'esriDSInvalid',
                 'esriDSUnknown']
    esriDSNormal = 1
    esriDSValid = 2
    esriDSInvalid = 4
    esriDSUnknown = 8

class esriFeatureElementType(Enumeration):
    __slots__ = ['esriFETWholeFeature',
                 'esriFETVertex',
                 'esriFETEdge',
                 'esriFETPart',
                 'esriFETAnnotation',
                 'esriFETConnectionPoint',
                 'esriFETConnectorPoint']
    esriFETWholeFeature = 1
    esriFETVertex = 2
    esriFETEdge = 4
    esriFETPart = 8
    esriFETAnnotation = 16
    esriFETConnectionPoint = 32
    esriFETConnectorPoint = 64

class esriSearchOrder(Enumeration):
    __slots__ = ['esriSearchOrderSpatial',
                 'esriSearchOrderAttribute']
    esriSearchOrderSpatial = 0
    esriSearchOrderAttribute = 1

class esriSpatialRelEnum(Enumeration):
    __slots__ = ['esriSpatialRelUndefined',
                 'esriSpatialRelIntersects',
                 'esriSpatialRelEnvelopeIntersects',
                 'esriSpatialRelIndexIntersects',
                 'esriSpatialRelTouches',
                 'esriSpatialRelOverlaps',
                 'esriSpatialRelCrosses',
                 'esriSpatialRelWithin',
                 'esriSpatialRelContains',
                 'esriSpatialRelRelation']
    esriSpatialRelUndefined = 0
    esriSpatialRelIntersects = 1
    esriSpatialRelEnvelopeIntersects = 2
    esriSpatialRelIndexIntersects = 3
    esriSpatialRelTouches = 4
    esriSpatialRelOverlaps = 5
    esriSpatialRelCrosses = 6
    esriSpatialRelWithin = 7
    esriSpatialRelContains = 8
    esriSpatialRelRelation = 9

class esriNetworkFeatureAncillaryRole(Enumeration):
    __slots__ = ['esriNFARNone',
                 'esriNFARSource',
                 'esriNFARSink']
    esriNFARNone = 0
    esriNFARSource = 1
    esriNFARSink = 2

class esriTransformType(Enumeration):
    __slots__ = ['esriTTMove',
                 'esriTTStretch',
                 'esriTTRotate',
                 'esriTTProgrammatic']
    esriTTMove = 1
    esriTTStretch = 2
    esriTTRotate = 3
    esriTTProgrammatic = 4

class esriTopoConfiguration(Enumeration):
    __slots__ = ['esriTCChain',
                 'esriTCLoop',
                 'esriTCStar',
                 'esriTCMesh']
    esriTCChain = 0
    esriTCLoop = 1
    esriTCStar = 2
    esriTCMesh = 3

class esriTopologyRuleType(Enumeration):
    __slots__ = ['esriTRTAny',
                 'esriTRTFeatureLargerThanClusterTolerance',
                 'esriTRTAreaNoGaps',
                 'esriTRTAreaNoOverlap',
                 'esriTRTAreaCoveredByAreaClass',
                 'esriTRTAreaAreaCoverEachOther',
                 'esriTRTAreaCoveredByArea',
                 'esriTRTAreaNoOverlapArea',
                 'esriTRTLineCoveredByAreaBoundary',
                 'esriTRTLineInsideArea',
                 'esriTRTPointCoveredByAreaBoundary',
                 'esriTRTPointProperlyInsideArea',
                 'esriTRTAreaContainOnePoint',
                 'esriTRTLineNoOverlap',
                 'esriTRTLineNoIntersection',
                 'esriTRTLineNoDangles',
                 'esriTRTLineNoPseudos',
                 'esriTRTLineCoveredByLineClass',
                 'esriTRTLineNoOverlapLine',
                 'esriTRTPointCoveredByLine',
                 'esriTRTPointCoveredByLineEndpoint',
                 'esriTRTPointDisjoint',
                 'esriTRTPointCoincidePoint',
                 'esriTRTAreaBoundaryCoveredByLine',
                 'esriTRTAreaBoundaryCoveredByAreaBoundary',
                 'esriTRTLineNoSelfOverlap',
                 'esriTRTLineNoSelfIntersect',
                 'esriTRTLineNoIntersectOrInteriorTouch',
                 'esriTRTLineEndpointCoveredByPoint',
                 'esriTRTAreaContainPoint',
                 'esriTRTLineNoMultipart',
                 'esriTRTLineNoIntersectLine',
                 'esriTRTLineNoIntersectOrInteriorTouchLine']
    esriTRTAny = -1
    esriTRTFeatureLargerThanClusterTolerance = 0
    esriTRTAreaNoGaps = 1
    esriTRTAreaNoOverlap = 3
    esriTRTAreaCoveredByAreaClass = 4
    esriTRTAreaAreaCoverEachOther = 5
    esriTRTAreaCoveredByArea = 7
    esriTRTAreaNoOverlapArea = 8
    esriTRTLineCoveredByAreaBoundary = 10
    esriTRTLineInsideArea = 11
    esriTRTPointCoveredByAreaBoundary = 13
    esriTRTPointProperlyInsideArea = 15
    esriTRTAreaContainOnePoint = 16
    esriTRTLineNoOverlap = 19
    esriTRTLineNoIntersection = 20
    esriTRTLineNoDangles = 21
    esriTRTLineNoPseudos = 22
    esriTRTLineCoveredByLineClass = 26
    esriTRTLineNoOverlapLine = 28
    esriTRTPointCoveredByLine = 29
    esriTRTPointCoveredByLineEndpoint = 31
    esriTRTPointDisjoint = 34
    esriTRTPointCoincidePoint = 35
    esriTRTAreaBoundaryCoveredByLine = 37
    esriTRTAreaBoundaryCoveredByAreaBoundary = 38
    esriTRTLineNoSelfOverlap = 39
    esriTRTLineNoSelfIntersect = 40
    esriTRTLineNoIntersectOrInteriorTouch = 41
    esriTRTLineEndpointCoveredByPoint = 42
    esriTRTAreaContainPoint = 43
    esriTRTLineNoMultipart = 44
    esriTRTLineNoIntersectLine = 45
    esriTRTLineNoIntersectOrInteriorTouchLine = 46

class esriReplicaRole(Enumeration):
    __slots__ = ['esriReplicaRoleChild',
                 'esriReplicaRoleParent']
    esriReplicaRoleChild = 0
    esriReplicaRoleParent = 1

class esriReplicaAccessType(Enumeration):
    __slots__ = ['esriReplicaAccessNone',
                 'esriReplicaChildReadOnly',
                 'esriReplicaParentReadOnly',
                 'esriReplicaBothReadWrite',
                 'esriReplicaParentOrChildReadOnly']
    esriReplicaAccessNone = 0
    esriReplicaChildReadOnly = 1
    esriReplicaParentReadOnly = 2
    esriReplicaBothReadWrite = 3
    esriReplicaParentOrChildReadOnly = 4

class esriReplicaState(Enumeration):
    __slots__ = ['esriReplicaStateSendingData',
                 'esriReplicaStateWaitingForData',
                 'esriReplicaStateSendingAcknowledgment']
    esriReplicaStateSendingData = 1
    esriReplicaStateWaitingForData = 2
    esriReplicaStateSendingAcknowledgment = 4

class esriRelExtractDirection(Enumeration):
    __slots__ = ['esriRelExtractDirectionForward',
                 'esriRelExtractDirectionBackward',
                 'esriRelExtractDirectionNone']
    esriRelExtractDirectionForward = 0
    esriRelExtractDirectionBackward = 1
    esriRelExtractDirectionNone = 2

class esriReplicaReconcilePolicyType(Enumeration):
    __slots__ = ['esriReplicaDetectConflicts',
                 'esriReplicaResolveConflictsInFavorOfImportedChanges',
                 'esriReplicaResolveConflictsInFavorOfDatabaseChanges',
                 'esriReplicaResolveConflictsNone']
    esriReplicaDetectConflicts = 1
    esriReplicaResolveConflictsInFavorOfImportedChanges = 2
    esriReplicaResolveConflictsInFavorOfDatabaseChanges = 3
    esriReplicaResolveConflictsNone = 4

class esriGPMessageSeverity(Enumeration):
    __slots__ = ['esriGPMessageSeverityInformative',
                 'esriGPMessageSeverityWarning',
                 'esriGPMessageSeverityError',
                 'esriGPMessageSeverityAbort']
    esriGPMessageSeverityInformative = 0
    esriGPMessageSeverityWarning = 1
    esriGPMessageSeverityError = 2
    esriGPMessageSeverityAbort = 3

class esriTableComponents(Enumeration):
    __slots__ = ['esriBusinessTable',
                 'esriFeatureTable',
                 'esriAddsTable',
                 'esriDeletesTable',
                 'esriRasterTable',
                 'esriArchive']
    esriBusinessTable = 1
    esriFeatureTable = 2
    esriAddsTable = 4
    esriDeletesTable = 8
    esriRasterTable = 16
    esriArchive = 32

class esriTopoDirection(Enumeration):
    __slots__ = ['esriTDTo',
                 'esriTDFrom']
    esriTDTo = 0
    esriTDFrom = 1

class esriTopoSide(Enumeration):
    __slots__ = ['esriTSLeft',
                 'esriTSRight']
    esriTSLeft = 0
    esriTSRight = 1

class esriEditSearchOption(Enumeration):
    __slots__ = ['esriEditSearchBoth',
                 'esriEditSearchBasicOnly',
                 'esriEditSearchDeltaOnly',
                 'esriEditSearchNewDeltaOnly',
                 'esriEditSearchDeletedBasicOnly']
    esriEditSearchBoth = 1
    esriEditSearchBasicOnly = 2
    esriEditSearchDeltaOnly = 3
    esriEditSearchNewDeltaOnly = 4
    esriEditSearchDeletedBasicOnly = 5

class esriJoinType(Enumeration):
    __slots__ = ['esriLeftOuterJoin',
                 'esriLeftInnerJoin']
    esriLeftOuterJoin = 0
    esriLeftInnerJoin = 1

class esriRelClassKey(Enumeration):
    __slots__ = ['esriRelClassKeyUndefined',
                 'esriRelClassKeyClassID',
                 'esriRelClassKeyClassCode']
    esriRelClassKeyUndefined = 0
    esriRelClassKeyClassID = 1
    esriRelClassKeyClassCode = 2

class esriRelKeyType(Enumeration):
    __slots__ = ['esriRelKeyTypeSingle',
                 'esriRelKeyTypeDual']
    esriRelKeyTypeSingle = 0
    esriRelKeyTypeDual = 1

class esriRelKeyRole(Enumeration):
    __slots__ = ['esriRelKeyRoleOriginPrimary',
                 'esriRelKeyRoleDestinationPrimary',
                 'esriRelKeyRoleOriginForeign',
                 'esriRelKeyRoleDestinationForeign']
    esriRelKeyRoleOriginPrimary = 0
    esriRelKeyRoleDestinationPrimary = 1
    esriRelKeyRoleOriginForeign = 2
    esriRelKeyRoleDestinationForeign = 3

class esriRelDirection(Enumeration):
    __slots__ = ['esriRelDirectionForward',
                 'esriRelDirectionBackward',
                 'esriRelDirectionBoth']
    esriRelDirectionForward = 0
    esriRelDirectionBackward = 1
    esriRelDirectionBoth = 2

class esriRelClassCodeType(Enumeration):
    __slots__ = ['esriRelClassCodeTypeInteger',
                 'esriRelClassCodeTypeString']
    esriRelClassCodeTypeInteger = 0
    esriRelClassCodeTypeString = 1

class esriFGDBDatafileFormat(Enumeration):
    __slots__ = ['esriFGDBStandardDatafile',
                 'esriFGDBCompressedDatafile']
    esriFGDBStandardDatafile = 0
    esriFGDBCompressedDatafile = 1

class esriRelationshipSplitPolicy(Enumeration):
    __slots__ = ['esriRSPUseDefault',
                 'esriRSPPreserveOnLargest',
                 'esriRSPPreserveOnSmallest',
                 'esriRSPPreserveOnAll',
                 'esriRSPDeleteRelationship',
                 'esriRSPDeleteParts']
    esriRSPUseDefault = 1
    esriRSPPreserveOnLargest = 2
    esriRSPPreserveOnSmallest = 3
    esriRSPPreserveOnAll = 4
    esriRSPDeleteRelationship = 5
    esriRSPDeleteParts = 6

class esriNetworkErrorType(Enumeration):
    __slots__ = ['esriNETAll',
                 'esriNETConnectivity',
                 'esriNETAssociatedElements',
                 'esriNETMissingAllElements',
                 'esriNETMissingAnyElements',
                 'esriNETDuplicateElements',
                 'esriNETAssociatedWithInvalidElements',
                 'esriNETAssociatedFeatures',
                 'esriNETAssociatedWithMissingFeatures',
                 'esriNETGeometry',
                 'esriNETEmptyGeometry',
                 'esriNETMultipartGeometry',
                 'esriNETIdenticalStartStopVertex',
                 'esriNETZeroLengthGeometry',
                 'esriNETAssociatedWithSameFromToJunction',
                 'esriNETMismatchedZValue',
                 'esriNETStandaloneJunction',
                 'esriNETEdgeTooSmall',
                 'esriNETInvalidSubtypeValue']
    esriNETAll = 0
    esriNETConnectivity = 1
    esriNETAssociatedElements = 2
    esriNETMissingAllElements = 3
    esriNETMissingAnyElements = 4
    esriNETDuplicateElements = 5
    esriNETAssociatedWithInvalidElements = 6
    esriNETAssociatedFeatures = 7
    esriNETAssociatedWithMissingFeatures = 8
    esriNETGeometry = 9
    esriNETEmptyGeometry = 10
    esriNETMultipartGeometry = 11
    esriNETIdenticalStartStopVertex = 12
    esriNETZeroLengthGeometry = 13
    esriNETAssociatedWithSameFromToJunction = 14
    esriNETMismatchedZValue = 15
    esriNETStandaloneJunction = 16
    esriNETEdgeTooSmall = 17
    esriNETInvalidSubtypeValue = 18

class esriXmlPropertyType(Enumeration):
    __slots__ = ['esriXPTText',
                 'esriXPTBinaryEnclosure',
                 'esriXPTLink',
                 'esriXPTPicture',
                 'esriXPTImage',
                 'esriXPTPictureX']
    esriXPTText = 0
    esriXPTBinaryEnclosure = 1
    esriXPTLink = 2
    esriXPTPicture = 3
    esriXPTImage = 4
    esriXPTPictureX = 5

class esriXmlSetPropertyAction(Enumeration):
    __slots__ = ['esriXSPAAddOrReplace',
                 'esriXSPAAddIfNotExists',
                 'esriXSPAReplaceIfExists',
                 'esriXSPAAddDuplicate']
    esriXSPAAddOrReplace = 0
    esriXSPAAddIfNotExists = 1
    esriXSPAReplaceIfExists = 2
    esriXSPAAddDuplicate = 3

class esriTopologyElementType(Enumeration):
    __slots__ = ['esriTopologyNode',
                 'esriTopologyEdge',
                 'esriTopologyFace']
    esriTopologyNode = 1
    esriTopologyEdge = 2
    esriTopologyFace = 4

class esriMetadataChangeType(Enumeration):
    __slots__ = ['esriMCTAddRule',
                 'esriMCTDeleteRule',
                 'esriMCTChangeTolerance',
                 'esriMCTAttributeMapping',
                 'esriMCTConnectivityPolicy']
    esriMCTAddRule = 0
    esriMCTDeleteRule = 1
    esriMCTChangeTolerance = 2
    esriMCTAttributeMapping = 3
    esriMCTConnectivityPolicy = 4

class esriFieldNameErrorType(Enumeration):
    __slots__ = ['esriNoFieldError',
                 'esriSQLReservedWord',
                 'esriDuplicatedFieldName',
                 'esriInvalidCharacter',
                 'esriInvalidFieldNameLength']
    esriNoFieldError = 0
    esriSQLReservedWord = 1
    esriDuplicatedFieldName = 2
    esriInvalidCharacter = 3
    esriInvalidFieldNameLength = 4

class esriTableNameErrorType(Enumeration):
    __slots__ = ['esriIsSQLReservedWord',
                 'esriHasInvalidCharacter',
                 'esriHasInvalidStartingCharacter']
    esriIsSQLReservedWord = 1
    esriHasInvalidCharacter = 2
    esriHasInvalidStartingCharacter = 4

class esriSynchronizationOperations(Enumeration):
    __slots__ = ['esriSOImportDataChanges',
                 'esriSOExportDataChanges']
    esriSOImportDataChanges = 1
    esriSOExportDataChanges = 2

class esriSyncDirection(Enumeration):
    __slots__ = ['esriSyncDirectionUpload',
                 'esriSyncDirectionDownload',
                 'esriSyncDirectionBiDirectional',
                 'esriSyncDirectionSnapshot',
                 'esriSyncDirectionNone']
    esriSyncDirectionUpload = 0
    esriSyncDirectionDownload = 1
    esriSyncDirectionBiDirectional = 2
    esriSyncDirectionSnapshot = 3
    esriSyncDirectionNone = 4

class esriSyncModel(Enumeration):
    __slots__ = ['esriSyncModelPerReplica',
                 'esriSyncModelPerLayer']
    esriSyncModelPerReplica = 0
    esriSyncModelPerLayer = 1

class esriLocatorWorkspaceType(Enumeration):
    __slots__ = ['esriLocalSystemLocatorWorkspace',
                 'esriFileSystemLocatorWorkspace',
                 'esriRemoteDatabaseLocatorWorkspace',
                 'esriExtensionLocatorWorkspace',
                 'esriArcGISServerLocatorWorkspace',
                 'esriLocalDatabaseLocatorWorkspace']
    esriLocalSystemLocatorWorkspace = 0
    esriFileSystemLocatorWorkspace = 1
    esriRemoteDatabaseLocatorWorkspace = 2
    esriExtensionLocatorWorkspace = 3
    esriArcGISServerLocatorWorkspace = 4
    esriLocalDatabaseLocatorWorkspace = 5

class esriLocatorQuery(Enumeration):
    __slots__ = ['esriLocatorStyle',
                 'esriLocator',
                 'esriAllTypes']
    esriLocatorStyle = 0
    esriLocator = 1
    esriAllTypes = 2

class esriLocatingError(Enumeration):
    __slots__ = ['LOCATING_OK',
                 'LOCATING_E_INVALIDRID',
                 'LOCATING_E_INVALIDMEASURE',
                 'LOCATING_E_CANT_FIND_ROUTE',
                 'LOCATING_E_ROUTE_SHAPE_EMPTY',
                 'LOCATING_E_CANT_FIND_LOCATION',
                 'LOCATING_E_CANT_FIND_EXTENT',
                 'LOCATING_E_FROM_PARTIAL_MATCH',
                 'LOCATING_E_TO_PARTIAL_MATCH',
                 'LOCATING_E_ROUTE_MS_NULL',
                 'LOCATING_E_ROUTE_NOT_MAWARE',
                 'LOCATING_E_FROM_TO_PARTIAL_MATCH',
                 'LOCATING_E_MULTIPLE_LOCATION',
                 'LOCATING_E_NULL_EXTENT']
    LOCATING_OK = 0
    LOCATING_E_INVALIDRID = 1
    LOCATING_E_INVALIDMEASURE = 2
    LOCATING_E_CANT_FIND_ROUTE = 3
    LOCATING_E_ROUTE_SHAPE_EMPTY = 4
    LOCATING_E_CANT_FIND_LOCATION = 5
    LOCATING_E_CANT_FIND_EXTENT = 6
    LOCATING_E_FROM_PARTIAL_MATCH = 7
    LOCATING_E_TO_PARTIAL_MATCH = 8
    LOCATING_E_ROUTE_MS_NULL = 9
    LOCATING_E_ROUTE_NOT_MAWARE = 10
    LOCATING_E_FROM_TO_PARTIAL_MATCH = 11
    LOCATING_E_MULTIPLE_LOCATION = 12
    LOCATING_E_NULL_EXTENT = 13

class esriRasterSdeCompressionTypeEnum(Enumeration):
    __slots__ = ['esriRasterSdeCompressionTypeUncompressed',
                 'esriRasterSdeCompressionTypeRunLength',
                 'esriRasterSdeCompressionTypeJPEG',
                 'esriRasterSdeCompressionTypeJPEG2000']
    esriRasterSdeCompressionTypeUncompressed = 0
    esriRasterSdeCompressionTypeRunLength = 1
    esriRasterSdeCompressionTypeJPEG = 2
    esriRasterSdeCompressionTypeJPEG2000 = 3

class esriRasterResamplingHint(Enumeration):
    __slots__ = ['esriRasterResamplingClosest',
                 'esriRasterResamplingUpsampling',
                 'esriRasterResamplingDownsampling',
                 'esriRasterResamplingFinest']
    esriRasterResamplingClosest = 1
    esriRasterResamplingUpsampling = 2
    esriRasterResamplingDownsampling = 3
    esriRasterResamplingFinest = 4

class esriDEExpandType(Enumeration):
    __slots__ = ['esriDEExpandNone',
                 'esriDEExpandChildren',
                 'esriDEExpandDescendants']
    esriDEExpandNone = 0
    esriDEExpandChildren = 1
    esriDEExpandDescendants = 2

class esriRasterTableTypeEnum(Enumeration):
    __slots__ = ['esriRasterTableIndex',
                 'esriRasterTableValue',
                 'esriRasterTableInvalid']
    esriRasterTableIndex = 0
    esriRasterTableValue = 1
    esriRasterTableInvalid = 99

class esriDataConverterError(Enumeration):
    __slots__ = ['S_DATACONVERTER_OK',
                 'E_DATACONVERTER_OPENFEATURECLASSFAILED',
                 'E_DATACONVERTER_OPENTABLEFAILED',
                 'E_DATACONVERTER_OPENFEATUREDATASETFAILED',
                 'E_DATACONVERTER_OPENFEATUREWORKSPACEFAILED',
                 'E_DATACONVERTER_CREATEFEATURECLASSFAILED',
                 'E_DATACONVERTER_CREATETABLEFAILED',
                 'E_DATACONVERTER_WRITEFEATURESFAILED',
                 'E_DATACONVERTER_WRITEROWSFAILED',
                 'E_DATACONVERTER_UNLOADFAILED',
                 'E_DATACONVERTER_OPENCURSORFAILED',
                 'E_DATACONVERTER_OPENINSERTCURSORFAILED',
                 'E_DATACONVERTER_INSERTCURSORFAILED',
                 'E_DATACONVERTER_CANCELLED',
                 'E_DATACONVERTER_MATCHINPUTFIELDSETFAILED',
                 'E_DATACONVERTER_FLUSHINSERTCURSORFAILED',
                 'E_DATACONVERTER_ACQUIRESCHEMALOCKFAILED',
                 'E_DATACONVERTER_INVALID_INPUT_DATASET_NAME',
                 'E_DATACONVERTER_CANNOT_CREATE_FEATURE_DATASET',
                 'E_DATACONVERTER_ERROR_READ_ROWS',
                 'E_DATACONVERTER_ERROR_READ_ALL_ROWS']
    S_DATACONVERTER_OK = 0
    E_DATACONVERTER_OPENFEATURECLASSFAILED = 513
    E_DATACONVERTER_OPENTABLEFAILED = 514
    E_DATACONVERTER_OPENFEATUREDATASETFAILED = 515
    E_DATACONVERTER_OPENFEATUREWORKSPACEFAILED = 516
    E_DATACONVERTER_CREATEFEATURECLASSFAILED = 517
    E_DATACONVERTER_CREATETABLEFAILED = 518
    E_DATACONVERTER_WRITEFEATURESFAILED = 519
    E_DATACONVERTER_WRITEROWSFAILED = 520
    E_DATACONVERTER_UNLOADFAILED = 521
    E_DATACONVERTER_OPENCURSORFAILED = 522
    E_DATACONVERTER_OPENINSERTCURSORFAILED = 523
    E_DATACONVERTER_INSERTCURSORFAILED = 524
    E_DATACONVERTER_CANCELLED = 525
    E_DATACONVERTER_MATCHINPUTFIELDSETFAILED = 526
    E_DATACONVERTER_FLUSHINSERTCURSORFAILED = 527
    E_DATACONVERTER_ACQUIRESCHEMALOCKFAILED = 528
    E_DATACONVERTER_INVALID_INPUT_DATASET_NAME = 529
    E_DATACONVERTER_CANNOT_CREATE_FEATURE_DATASET = 530
    E_DATACONVERTER_ERROR_READ_ROWS = 531
    E_DATACONVERTER_ERROR_READ_ALL_ROWS = 532

class esriTinEdgeType(Enumeration):
    __slots__ = ['esriTinRegularEdge',
                 'esriTinSoftEdge',
                 'esriTinHardEdge']
    esriTinRegularEdge = 0
    esriTinSoftEdge = 1
    esriTinHardEdge = 2

class esriTinNodeSourceType(Enumeration):
    __slots__ = ['esriTinUnknown',
                 'esriTinSuperNode',
                 'esriTinOriginal',
                 'esriTinDensified',
                 'esriTinIntersection']
    esriTinUnknown = 1
    esriTinSuperNode = 2
    esriTinOriginal = 4
    esriTinDensified = 8
    esriTinIntersection = 32

class esriTinBoundType(Enumeration):
    __slots__ = ['esriTinClassBreaks',
                 'esriTinSimpleBounds',
                 'esriTinUniqueValue',
                 'esriTinSimpleBoundsExclude']
    esriTinClassBreaks = 0
    esriTinSimpleBounds = 1
    esriTinUniqueValue = 2
    esriTinSimpleBoundsExclude = 3

class esriTinTrianglePropertyType(Enumeration):
    __slots__ = ['esriTinDegreeSlope',
                 'esriTinPercentageSlope',
                 'esriTinDegreeAspect',
                 'esriTinArea',
                 'esriTinSurfaceArea',
                 'esriTinPerimeter',
                 'esriTinSurfacePerimeter']
    esriTinDegreeSlope = 0
    esriTinPercentageSlope = 1
    esriTinDegreeAspect = 2
    esriTinArea = 3
    esriTinSurfaceArea = 4
    esriTinPerimeter = 5
    esriTinSurfacePerimeter = 6

class esriPlaneReferenceType(Enumeration):
    __slots__ = ['esriPlaneReferenceAbove',
                 'esriPlaneReferenceBelow']
    esriPlaneReferenceAbove = 0
    esriPlaneReferenceBelow = 1

class esriSurfaceConversionType(Enumeration):
    __slots__ = ['esriDegreeSlope',
                 'esriPercentageSlope',
                 'esriDegreeAspect']
    esriDegreeSlope = 0
    esriPercentageSlope = 1
    esriDegreeAspect = 2

class esriRasterizationType(Enumeration):
    __slots__ = ['esriDegreeSlopeAsRaster',
                 'esriPercentageSlopeAsRaster',
                 'esriDegreeAspectAsRaster',
                 'esriElevationAsRaster',
                 'esriHillShadeAsRaster']
    esriDegreeSlopeAsRaster = 0
    esriPercentageSlopeAsRaster = 1
    esriDegreeAspectAsRaster = 2
    esriElevationAsRaster = 3
    esriHillShadeAsRaster = 4

class esriTinElementType(Enumeration):
    __slots__ = ['esriTinNode',
                 'esriTinEdge',
                 'esriTinTriangle']
    esriTinNode = 0
    esriTinEdge = 1
    esriTinTriangle = 2

class esriTinVersion(Enumeration):
    __slots__ = ['esriTin70001',
                 'esriTin80001']
    esriTin70001 = 0
    esriTin80001 = 1

class esriTinSurfaceType(Enumeration):
    __slots__ = ['esriTinContour',
                 'esriTinHardLine',
                 'esriTinHardClip',
                 'esriTinHardErase',
                 'esriTinHardReplace',
                 'esriTinHardValueFill',
                 'esriTinZLessHardLine',
                 'esriTinZLessHardClip',
                 'esriTinZLessHardErase',
                 'esriTinSoftLine',
                 'esriTinSoftClip',
                 'esriTinSoftErase',
                 'esriTinSoftReplace',
                 'esriTinSoftValueFill',
                 'esriTinZLessSoftLine',
                 'esriTinZLessContour',
                 'esriTinZLessSoftClip',
                 'esriTinZLessSoftErase',
                 'esriTinMassPoint']
    esriTinContour = 0
    esriTinHardLine = 1
    esriTinHardClip = 2
    esriTinHardErase = 3
    esriTinHardReplace = 4
    esriTinHardValueFill = 5
    esriTinZLessHardLine = 6
    esriTinZLessHardClip = 7
    esriTinZLessHardErase = 8
    esriTinSoftLine = 9
    esriTinSoftClip = 10
    esriTinSoftErase = 11
    esriTinSoftReplace = 12
    esriTinSoftValueFill = 13
    esriTinZLessSoftLine = 14
    esriTinZLessContour = 15
    esriTinZLessSoftClip = 16
    esriTinZLessSoftErase = 17
    esriTinMassPoint = 18

class esriSurfaceInterpolationType(Enumeration):
    __slots__ = ['esriLinearInterpolation',
                 'esriNaturalNeighborInterpolation',
                 'esriNaturalNeighborZmin',
                 'esriNaturalNeighborZmax',
                 'esriNaturalNeighborZaverage',
                 'esriNaturalNeighborZnearest',
                 'esriNaturalNeighborIDW']
    esriLinearInterpolation = 0
    esriNaturalNeighborInterpolation = 1
    esriNaturalNeighborZmin = 2
    esriNaturalNeighborZmax = 3
    esriNaturalNeighborZaverage = 4
    esriNaturalNeighborZnearest = 5
    esriNaturalNeighborIDW = 6

class esriTinSelectionType(Enumeration):
    __slots__ = ['esriTinSelectionNew',
                 'esriTinSelectionAdd',
                 'esriTinSelectionSubtract',
                 'esriTinSelectionFlip']
    esriTinSelectionNew = 0
    esriTinSelectionAdd = 1
    esriTinSelectionSubtract = 2
    esriTinSelectionFlip = 3

class esriTinError(Enumeration):
    __slots__ = ['E_TIN_WORKSPACE_EXISTS',
                 'E_TIN_WORKSPACE_NOT_CONNECTED',
                 'E_TIN_WORKSPACE_ALREADY_CONNECTED',
                 'E_TIN_EMPTY_OBJECT',
                 'E_TIN_WRONG_DATASET_TYPE',
                 'E_TIN_WRONG_TOPOLOGY',
                 'E_TIN_NUMERIC_LIMIT',
                 'E_TIN_FAILED_TO_OPEN',
                 'E_TIN_FAILED_TO_SAVE',
                 'E_TIN_FAILED_TO_COPY',
                 'E_TIN_FAILED_TO_RENAME',
                 'E_TIN_FAILED_TO_DELETE',
                 'E_TIN_FILE_EXISTS',
                 'E_TIN_OPERATION_NOT_SUPPORTED',
                 'E_TIN_OUT_OF_MEMORY',
                 'E_TIN_IN_EDIT_MODE',
                 'E_TIN_NOT_IN_EDIT_MODE',
                 'E_TIN_CANNOT_CREATE_GEOMETRY',
                 'E_TIN_POLYGON_NOT_DEFINED',
                 'E_TIN_POLYLINE_NOT_DEFINED',
                 'E_TIN_HAS_VOID_Z',
                 'E_TIN_HAS_NO_VALUE',
                 'E_TIN_NODE_UNDELETABL',
                 'E_TIN_FIELD_ALREADY_EXISTS',
                 'E_TIN_OBJECT_NOT_EMPTY',
                 'E_TIN_WRONG_FIELD_TYPE',
                 'E_TIN_WRONG_GEOMETRY_TYPE',
                 'E_TIN_NEED_VALUE',
                 'E_TIN_FAILED_TO_OVER_WRITE',
                 'E_TIN_ZERO_VALUE',
                 'E_TIN_INDEX_OUT_OF_RANGE',
                 'E_TIN_INVALID_NAME',
                 'E_TIN_ALREADY_INITIALIZED',
                 'E_TIN_MEMORY_TIN',
                 'E_TIN_FAILED_TO_SWAP',
                 'E_TIN_NAN',
                 'E_TIN_SUPER_NODE',
                 'E_TIN_FAILED_TO_CREATE_FILE',
                 'E_TIN_FAILED_TO_OPEN_FILE',
                 'E_TIN_FAILED_TO_DELETE_FILE',
                 'E_TIN_GEOMETRY_HAS_NO_Z',
                 'E_TIN_WRONG_VARIANT_TYPE',
                 'E_TIN_WRONG_SURFACE_TYPE',
                 'E_TIN_WRONG_ELEMENT_TYPE',
                 'E_TIN_DIFFERENT_TIN',
                 'E_TIN_FIELD_ERROR',
                 'E_TIN_NEED_TRIANGLE_SEED',
                 'E_TIN_WRONG_SEED_TYPE',
                 'E_TIN_WRONG_GEN_SEED',
                 'E_TIN_FAILED_UPDATE_SEED',
                 'E_TIN_NODE_SHARED',
                 'E_TIN_INTERNAL_ERROR',
                 'E_TIN_FILTER_REQUIRED',
                 'E_TIN_NO_SPATIALREF_INFO',
                 'E_TIN_NOT_PROJECTED_SYSTEM',
                 'E_TIN_METADATA_ERROR',
                 'E_TIN_CANNOT_CREATE_OBJ',
                 'E_TIN_UPDATE_ERROR',
                 'E_TIN_BAD_CLASS_BREAKS',
                 'E_TIN_BAD_CLASS_CODES',
                 'E_TIN_UNSUPPORTED_SPATIAL_REFERENCE',
                 'E_TIN_LICENSE_NOT_AVAILABLE',
                 'E_TIN_EXTENSION_DISABLED',
                 'E_TIN_BELOW_V8',
                 'E_TIN_IN_MEMORY_EDIT',
                 'E_TIN_WRONG_EDGE_TYPE',
                 'E_TIN_BAD_VALUE',
                 'E_TIN_FATAL',
                 'E_TIN_FDS_FATAL',
                 'E_TIN_CANCELLED',
                 'E_TIN_MUST_BE_DELAUNAY',
                 'E_TIN_XML_CORRUPTED',
                 'E_TIN_INVALID_LANDXML_FILE',
                 'E_TIN_FAILED_RESET_EXTENT',
                 'E_TIN_NULL_FIELD_VALUE',
                 'E_TIN_UNHANDLED_EXCEPTION']
    E_TIN_WORKSPACE_EXISTS = -2147219456
    E_TIN_WORKSPACE_NOT_CONNECTED = -2147219455
    E_TIN_WORKSPACE_ALREADY_CONNECTED = -2147219454
    E_TIN_EMPTY_OBJECT = -2147219453
    E_TIN_WRONG_DATASET_TYPE = -2147219452
    E_TIN_WRONG_TOPOLOGY = -2147219451
    E_TIN_NUMERIC_LIMIT = -2147219450
    E_TIN_FAILED_TO_OPEN = -2147219449
    E_TIN_FAILED_TO_SAVE = -2147219448
    E_TIN_FAILED_TO_COPY = -2147219447
    E_TIN_FAILED_TO_RENAME = -2147219446
    E_TIN_FAILED_TO_DELETE = -2147219445
    E_TIN_FILE_EXISTS = -2147219444
    E_TIN_OPERATION_NOT_SUPPORTED = -2147219443
    E_TIN_OUT_OF_MEMORY = -2147219442
    E_TIN_IN_EDIT_MODE = -2147219441
    E_TIN_NOT_IN_EDIT_MODE = -2147219440
    E_TIN_CANNOT_CREATE_GEOMETRY = -2147219439
    E_TIN_POLYGON_NOT_DEFINED = -2147219438
    E_TIN_POLYLINE_NOT_DEFINED = -2147219437
    E_TIN_HAS_VOID_Z = -2147219436
    E_TIN_HAS_NO_VALUE = -2147219435
    E_TIN_NODE_UNDELETABL = -2147219434
    E_TIN_FIELD_ALREADY_EXISTS = -2147219433
    E_TIN_OBJECT_NOT_EMPTY = -2147219432
    E_TIN_WRONG_FIELD_TYPE = -2147219431
    E_TIN_WRONG_GEOMETRY_TYPE = -2147219430
    E_TIN_NEED_VALUE = -2147219429
    E_TIN_FAILED_TO_OVER_WRITE = -2147219428
    E_TIN_ZERO_VALUE = -2147219427
    E_TIN_INDEX_OUT_OF_RANGE = -2147219426
    E_TIN_INVALID_NAME = -2147219425
    E_TIN_ALREADY_INITIALIZED = -2147219424
    E_TIN_MEMORY_TIN = -2147219423
    E_TIN_FAILED_TO_SWAP = -2147219422
    E_TIN_NAN = -2147219421
    E_TIN_SUPER_NODE = -2147219420
    E_TIN_FAILED_TO_CREATE_FILE = -2147219419
    E_TIN_FAILED_TO_OPEN_FILE = -2147219418
    E_TIN_FAILED_TO_DELETE_FILE = -2147219417
    E_TIN_GEOMETRY_HAS_NO_Z = -2147219416
    E_TIN_WRONG_VARIANT_TYPE = -2147219415
    E_TIN_WRONG_SURFACE_TYPE = -2147219414
    E_TIN_WRONG_ELEMENT_TYPE = -2147219413
    E_TIN_DIFFERENT_TIN = -2147219412
    E_TIN_FIELD_ERROR = -2147219411
    E_TIN_NEED_TRIANGLE_SEED = -2147219410
    E_TIN_WRONG_SEED_TYPE = -2147219409
    E_TIN_WRONG_GEN_SEED = -2147219408
    E_TIN_FAILED_UPDATE_SEED = -2147219407
    E_TIN_NODE_SHARED = -2147219406
    E_TIN_INTERNAL_ERROR = -2147219405
    E_TIN_FILTER_REQUIRED = -2147219404
    E_TIN_NO_SPATIALREF_INFO = -2147219403
    E_TIN_NOT_PROJECTED_SYSTEM = -2147219402
    E_TIN_METADATA_ERROR = -2147219401
    E_TIN_CANNOT_CREATE_OBJ = -2147219400
    E_TIN_UPDATE_ERROR = -2147219399
    E_TIN_BAD_CLASS_BREAKS = -2147219398
    E_TIN_BAD_CLASS_CODES = -2147219397
    E_TIN_UNSUPPORTED_SPATIAL_REFERENCE = -2147219396
    E_TIN_LICENSE_NOT_AVAILABLE = -2147219395
    E_TIN_EXTENSION_DISABLED = -2147219394
    E_TIN_BELOW_V8 = -2147219393
    E_TIN_IN_MEMORY_EDIT = -2147219392
    E_TIN_WRONG_EDGE_TYPE = -2147219391
    E_TIN_BAD_VALUE = -2147219390
    E_TIN_FATAL = -2147219389
    E_TIN_FDS_FATAL = -2147219388
    E_TIN_CANCELLED = -2147219387
    E_TIN_MUST_BE_DELAUNAY = -2147219386
    E_TIN_XML_CORRUPTED = -2147219385
    E_TIN_INVALID_LANDXML_FILE = -2147219384
    E_TIN_FAILED_RESET_EXTENT = -2147219383
    E_TIN_NULL_FIELD_VALUE = -2147219382
    E_TIN_UNHANDLED_EXCEPTION = -2147219381

class esriTinQualification(Enumeration):
    __slots__ = ['esriTinAll',
                 'esriTinInsideTin',
                 'esriTinInsideDataArea',
                 'esriTinSingleEdge',
                 'esriTinDoubleEdges']
    esriTinAll = 1
    esriTinInsideTin = 2
    esriTinInsideDataArea = 4
    esriTinSingleEdge = 8
    esriTinDoubleEdges = 16

class esriTinNodeEditInfo(Enumeration):
    __slots__ = ['esriTinNodeUnknown',
                 'esriTinNodeSuperNode',
                 'esriTinNodeOriginal',
                 'esriTinNodeDensified',
                 'esriTinNodeLineEnforce',
                 'esriTinNodeIntersection',
                 'esriTinNodeLineTouch',
                 'esriTinNodeCoincident',
                 'esriTinNodeSnap',
                 'esriTinNodeModified']
    esriTinNodeUnknown = 1
    esriTinNodeSuperNode = 2
    esriTinNodeOriginal = 4
    esriTinNodeDensified = 8
    esriTinNodeLineEnforce = 16
    esriTinNodeIntersection = 32
    esriTinNodeLineTouch = 64
    esriTinNodeCoincident = 128
    esriTinNodeSnap = 256
    esriTinNodeModified = 512

class esriTinIgnoredElementType(Enumeration):
    __slots__ = ['esriTinNothing',
                 'esriTinNodesWithNonZeroTag',
                 'esriTinNodesWithZeroTag']
    esriTinNothing = 1
    esriTinNodesWithNonZeroTag = 2
    esriTinNodesWithZeroTag = 4

class esriXYEventError(Enumeration):
    __slots__ = ['XYEVENT_E_INVALID_X_NAME',
                 'XYEVENT_E_INVALID_X_TYPE',
                 'XYEVENT_E_INVALID_Y_NAME',
                 'XYEVENT_E_INVALID_Y_TYPE',
                 'XYEVENT_E_INVALID_Z_NAME',
                 'XYEVENT_E_INVALID_Z_TYPE',
                 'XYEVENT_E_CANT_SELECT',
                 'XYEVENT_E_SOURCENAME_NOT_SETUP',
                 'XYEVENT_E_CANT_DELETE_FIELD']
    XYEVENT_E_INVALID_X_NAME = -2147201023
    XYEVENT_E_INVALID_X_TYPE = -2147201022
    XYEVENT_E_INVALID_Y_NAME = -2147201021
    XYEVENT_E_INVALID_Y_TYPE = -2147201020
    XYEVENT_E_INVALID_Z_NAME = -2147201019
    XYEVENT_E_INVALID_Z_TYPE = -2147201018
    XYEVENT_E_CANT_SELECT = -2147201017
    XYEVENT_E_SOURCENAME_NOT_SETUP = -2147201016
    XYEVENT_E_CANT_DELETE_FIELD = -2147201015

class esriNetworkElementType(Enumeration):
    __slots__ = ['esriNETJunction',
                 'esriNETEdge',
                 'esriNETTurn']
    esriNETJunction = 1
    esriNETEdge = 2
    esriNETTurn = 3

class esriNetworkEdgeDirection(Enumeration):
    __slots__ = ['esriNEDNone',
                 'esriNEDAlongDigitized',
                 'esriNEDAgainstDigitized']
    esriNEDNone = 0
    esriNEDAlongDigitized = 1
    esriNEDAgainstDigitized = 2

class esriNetworkTurnParticipationType(Enumeration):
    __slots__ = ['esriNTPTNone',
                 'esriNTPTInterior',
                 'esriNTPTExterior']
    esriNTPTNone = 0
    esriNTPTInterior = 1
    esriNTPTExterior = 2

class esriNetworkTurnType(Enumeration):
    __slots__ = ['esriNTTImplicit',
                 'esriNTTExplicit']
    esriNTTImplicit = 0
    esriNTTExplicit = 1

class esriNetworkAttributeDataType(Enumeration):
    __slots__ = ['esriNADTInteger',
                 'esriNADTFloat',
                 'esriNADTDouble',
                 'esriNADTBoolean']
    esriNADTInteger = 0
    esriNADTFloat = 1
    esriNADTDouble = 2
    esriNADTBoolean = 3

class esriNetworkAttributeUsageType(Enumeration):
    __slots__ = ['esriNAUTCost',
                 'esriNAUTDescriptor',
                 'esriNAUTRestriction',
                 'esriNAUTHierarchy']
    esriNAUTCost = 0
    esriNAUTDescriptor = 1
    esriNAUTRestriction = 2
    esriNAUTHierarchy = 3

class esriNetworkAttributeUnits(Enumeration):
    __slots__ = ['esriNAUUnknown',
                 'esriNAUInches',
                 'esriNAUFeet',
                 'esriNAUYards',
                 'esriNAUMiles',
                 'esriNAUNauticalMiles',
                 'esriNAUMillimeters',
                 'esriNAUCentimeters',
                 'esriNAUMeters',
                 'esriNAUKilometers',
                 'esriNAUDecimalDegrees',
                 'esriNAUDecimeters',
                 'esriNAUSeconds',
                 'esriNAUMinutes',
                 'esriNAUHours',
                 'esriNAUDays',
                 'esriNAUMilesPerHour',
                 'esriNAUKilometersPerHour']
    esriNAUUnknown = 0
    esriNAUInches = 1
    esriNAUFeet = 3
    esriNAUYards = 4
    esriNAUMiles = 5
    esriNAUNauticalMiles = 6
    esriNAUMillimeters = 7
    esriNAUCentimeters = 8
    esriNAUMeters = 9
    esriNAUKilometers = 10
    esriNAUDecimalDegrees = 11
    esriNAUDecimeters = 12
    esriNAUSeconds = 20
    esriNAUMinutes = 21
    esriNAUHours = 22
    esriNAUDays = 23
    esriNAUMilesPerHour = 30
    esriNAUKilometersPerHour = 31

class esriNetworkDatasetType(Enumeration):
    __slots__ = ['esriNDTUnknown',
                 'esriNDTGeodatabase',
                 'esriNDTShapefile',
                 'esriNDTSDC']
    esriNDTUnknown = 0
    esriNDTGeodatabase = 1
    esriNDTShapefile = 2
    esriNDTSDC = 3

class esriNetworkSourceType(Enumeration):
    __slots__ = ['esriNSTNetworkSource',
                 'esriNSTSystemJunction',
                 'esriNSTJunctionFeature',
                 'esriNSTEdgeFeature',
                 'esriNSTTurnFeature']
    esriNSTNetworkSource = 0
    esriNSTSystemJunction = 1
    esriNSTJunctionFeature = 2
    esriNSTEdgeFeature = 3
    esriNSTTurnFeature = 4

class esriNetworkDatasetState(Enumeration):
    __slots__ = ['esriNDSUnbuilt',
                 'esriNDSBuilt',
                 'esriNDSEmpty']
    esriNDSUnbuilt = 0
    esriNDSBuilt = 1
    esriNDSEmpty = 2

class esriNetworkTimeUsage(Enumeration):
    __slots__ = ['esriNTUBeforeTraversal',
                 'esriNTUAfterTraversal']
    esriNTUBeforeTraversal = 1
    esriNTUAfterTraversal = 2

class esriNetworkAttributeAdjustmentType(Enumeration):
    __slots__ = ['esriNAATScale',
                 'esriNAATAdd',
                 'esriNAATReplace']
    esriNAATScale = 0
    esriNAATAdd = 1
    esriNAATReplace = 2

class esriNetworkAttributeParameterUsageType(Enumeration):
    __slots__ = ['esriNAPUTGeneral',
                 'esriNAPUTRestriction']
    esriNAPUTGeneral = 0
    esriNAPUTRestriction = 1

class esriNetworkForwardStarBacktrack(Enumeration):
    __slots__ = ['esriNFSBNoBacktrack',
                 'esriNFSBAllowBacktrack',
                 'esriNFSBAtDeadEndsOnly',
                 'esriNFSBAtDeadEndsAndIntersections']
    esriNFSBNoBacktrack = 0
    esriNFSBAllowBacktrack = 1
    esriNFSBAtDeadEndsOnly = 2
    esriNFSBAtDeadEndsAndIntersections = 3

class esriRoadClass(Enumeration):
    __slots__ = ['esriRCUnknown',
                 'esriRCStreet',
                 'esriRCHighway',
                 'esriRCRamp',
                 'esriRCFerry',
                 'esriRCRoundabout',
                 'esriRCMajorRoad']
    esriRCUnknown = 0
    esriRCStreet = 1
    esriRCHighway = 2
    esriRCRamp = 3
    esriRCFerry = 4
    esriRCRoundabout = 5
    esriRCMajorRoad = 6

class esriNetworkTurnAngleCategory(Enumeration):
    __slots__ = ['esriNTACStraight',
                 'esriNTACReverse',
                 'esriNTACRight',
                 'esriNTACLeft']
    esriNTACStraight = 0
    esriNTACReverse = 1
    esriNTACRight = 2
    esriNTACLeft = 3

class esriNetworkRoadCategory(Enumeration):
    __slots__ = ['esriNRCNone',
                 'esriNRCLocal',
                 'esriNRCSecondary',
                 'esriNRCPrimary',
                 'esriNRCMajor',
                 'esriNRCAny']
    esriNRCNone = 0
    esriNRCLocal = 1
    esriNRCSecondary = 2
    esriNRCPrimary = 4
    esriNRCMajor = 6
    esriNRCAny = 7

class esriNetworkElevationModel(Enumeration):
    __slots__ = ['esriNEMNone',
                 'esriNEMElevationFields',
                 'esriNEMZCoordinates']
    esriNEMNone = 0
    esriNEMElevationFields = 1
    esriNEMZCoordinates = 2

class esriNetworkEdgeConnectivityPolicy(Enumeration):
    __slots__ = ['esriNECPAnyVertex',
                 'esriNECPEndVertex']
    esriNECPAnyVertex = 0
    esriNECPEndVertex = 1

class esriNetworkJunctionConnectivityPolicy(Enumeration):
    __slots__ = ['esriNJCPHonor',
                 'esriNJCPOverride']
    esriNJCPHonor = 0
    esriNJCPOverride = 1

class esriRepresentationError(Enumeration):
    __slots__ = ['REP_E_INVALID_REP_RULE_ID',
                 'REP_E_REP_RULE_NAME_ALREADY_EXISTS',
                 'REP_E_REP_CLASS_NOT_FOUND',
                 'REP_E_REP_IS_FREE_GRAPHICS',
                 'REP_E_REP_USES_REP_RULE',
                 'REP_E_CANT_ACQUIRE_SCHEMA_LOCK',
                 'REP_E_OBJECT_IS_DELETED',
                 'REP_E_NO_REP_RULES',
                 'REP_E_WORKSPACE_DOESNT_SUPPORT_REP_EXTENSION',
                 'REP_E_FEATURE_TYPE_NOT_SUPPORTED',
                 'REP_E_GEODATABASE_DOESNT_SUPPORT_REPRESENTATIONS',
                 'REP_E_NO_REP_SYSTEM_TABLES',
                 'REP_E_REP_CLASS_NAME_ALREADY_EXISTS',
                 'REP_E_FIELD_NAME_ALREADY_EXISTS',
                 'REP_E_NAME_HAS_INVALID_CHARACTERS',
                 'REP_E_MUST_BE_THE_OWNER',
                 'REP_E_INVALID_LICENSE',
                 'REP_E_COMPRESSED_FEATURE_CLASS']
    REP_E_INVALID_REP_RULE_ID = -2147218687
    REP_E_REP_RULE_NAME_ALREADY_EXISTS = -2147218686
    REP_E_REP_CLASS_NOT_FOUND = -2147218685
    REP_E_REP_IS_FREE_GRAPHICS = -2147218684
    REP_E_REP_USES_REP_RULE = -2147218683
    REP_E_CANT_ACQUIRE_SCHEMA_LOCK = -2147218682
    REP_E_OBJECT_IS_DELETED = -2147218681
    REP_E_NO_REP_RULES = -2147218680
    REP_E_WORKSPACE_DOESNT_SUPPORT_REP_EXTENSION = -2147218679
    REP_E_FEATURE_TYPE_NOT_SUPPORTED = -2147218678
    REP_E_GEODATABASE_DOESNT_SUPPORT_REPRESENTATIONS = -2147218677
    REP_E_NO_REP_SYSTEM_TABLES = -2147218676
    REP_E_REP_CLASS_NAME_ALREADY_EXISTS = -2147218675
    REP_E_FIELD_NAME_ALREADY_EXISTS = -2147218674
    REP_E_NAME_HAS_INVALID_CHARACTERS = -2147218673
    REP_E_MUST_BE_THE_OWNER = -2147218672
    REP_E_INVALID_LICENSE = -2147218671
    REP_E_COMPRESSED_FEATURE_CLASS = -2147218670

