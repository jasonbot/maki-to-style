'Type library'
__all__ = ['ISpatialReferenceInfo', 'IUnit', 'ILinearUnit', 'ISpatialReference', 'IParameter', 'IProjection', 'ISpheroid', 'IDatum', 'IPrimeMeridian', 'IAngularUnit', 'IGeographicCoordinateSystem', 'IProjectedCoordinateSystem', 'IVerticalCoordinateSystem', 'ITransformation', 'IGeoTransformation', 'IGeoTransformationOperationSet', 'ISpatialReferenceFactory', 'ISpatialReferenceAuthority', 'ITransformationGEN', 'IVerticalCoordinateSystemGEN', 'IMolodenskyBadekasTransformation', 'IGeographic2DOffsetTransformation', 'ICompositeGeoTransformation', 'IGeocentricTranslation', 'IPositionVectorTransformation', 'ICoordinateFrameTransformation', 'IMolodenskyTransformation', 'IGridTransformation', 'ILongitudeRotationTransformation', 'ICompareCoordinateSystems', 'ISpatialReferenceResolution', 'ISpatialReferenceTolerance', 'ISpatialReference2GEN', 'IAngularUnitEdit', 'ILinearUnitEdit', 'ISpheroidEdit', 'IDatumEdit', 'IVerticalDatumEdit', 'IPrimeMeridianEdit', 'IGeographicCoordinateSystem2', 'IGeographicCoordinateSystemEdit', 'IParameterEdit', 'IProjectionGEN', 'IESRISpatialReference', 'IESRISpatialReferenceGEN', 'IESRISpatialReferenceGEN2', 'IPRJSpatialReference', 'IPRJSpatialReferenceGEN', 'ISRPersistStream', 'ISpatialReferenceSingletonManager', 'ISpatialReferenceFactory2', 'ISpatialReference2', 'ISpatialReference4', 'IControlPrecision', 'IControlPrecision2', 'IProjectedCoordinateSystemEdit', 'IVerticalCoordinateSystemEdit', 'IControlPrecision3', 'IWkb', 'IESRIShape', 'IESRISegment', 'IVector', 'IConversionMGRS', 'INetworkShape', 'INetworkShape3D', 'IMSnap', 'IAffineTransformation3DGEN', 'IProjectiveTransformation2DGEN', 'IZShift', 'IPolycurve3D', 'IPolycurve4', 'IPolycurveGeodetic', 'ISegmentM', 'ISegmentZ', 'ISegmentID', 'IConversionNotation', 'IAreaGeodetic', 'ISpatialIndex', 'ISpatialIndex2', 'IMAware', 'IMCollection', 'IMSegmentationInternal', 'IZAware', 'IZCollection', 'IPointIDAware', 'ITextureAware', 'INormalAware', 'IPartIDAware', 'IVolume', 'IRelationResult', 'IGeometryEnvironment', 'IGeometryEnvironment2', 'IGeometryEnvironment3', 'IGeometryEnvironment4', 'IBufferProgress', 'IBufferConstructionProperties', 'IBufferConstructionProperties2', 'ITexturePersistenceProperties', 'IRelationResultArray', 'IEnvelope4', 'IPolygon5', 'IESRIShape2', 'IESRISegment2', 'IGeometry', 'IPoint', 'IEnvelope', 'IProjectedCoordinateSystem4GEN', 'IConstructUnknownCoordinateSystem', 'ISpatialReferenceFactory3', 'ISpatialReferenceFactory4', 'ISpatialReferenceFactory5', 'ISpatialReference3', 'IProjectedCoordinateSystem2', 'IProjectedCoordinateSystem3', 'IProjectedCoordinateSystem4', 'IProjectedCoordinateSystem5', 'IEnumVertex', 'IPointCollection', 'IPointCollection2', 'IPointCollection3', 'IPointCollection4', 'IVector3D', 'IEnumGeometry', 'IGeometryCollection', 'IEnumSplitPoint', 'IEnumIntersection', 'IEnumPointAndDistance', 'IGeometry2', 'IGeometryBag', 'ITransformation3D', 'IGeometry3', 'IGeometry4', 'IGeometry5', 'IEnvelopeGEN', 'IEnvelope3D', 'IBezierCurveGEN', 'ITransformation3DGEN', 'ISphere', 'IRay', 'IRay2', 'ITransform3D', 'IArea', 'IArea3D', 'IGeometricBufferSourceSink', 'IEnumVertex2', 'IConstructMerge', 'IMSegmentation', 'IEncode3DProperties', 'IRelationalOperator', 'IRelationalOperator2', 'IRelationalOperator3D', 'IRelationalOperator3D2', 'IRelationalOperatorNxM', 'IProximityOperator', 'IProximityOperator3D', 'ITopologicalOperator6', 'IConstructGeodetic', 'IConstructEllipticArc', 'IGeometryArray', 'IBufferConstruction', 'IGeometryFactory', 'IGeometryFactory2', 'IGeometryFactory3', 'IConstructDomainExtent', 'IConstructDomainExtent2', 'IGeneralMultiPatchInfo', 'IPointArray', 'IProjectiveTransformation2D', 'IAffineTransformation3D', 'IHitTest', 'IHitTest3D', 'ICurve3D', 'IEnvelope2', 'IPointCollection5', 'IMSegmentation2', 'IMSegmentation3', 'IMSegmentation4', 'IWin32Shape', 'IWin32Shape2', 'ICurve', 'ILine', 'IPolycurve', 'IPath', 'IPolyline', 'ISegment', 'IRing', 'IEnumSegment', 'IEnumCurve', 'ISegmentCollection', 'ITransform2D', 'ITopologicalSegment', 'IEllipticArc', 'IPolygon', 'IFunctionalSurface', 'ISegmentGraphCursor', 'ISegmentGraph', 'IMultiPatch', 'ICurve2', 'ICircularArc', 'IAffineTransformation2D', 'ITopologicalOperator', 'ITopologicalOperator2', 'IFunctionalSurface2', 'IFunctionalSurface3', 'IAffineTransformation2D3GEN', 'IPolycurve2', 'ISegmentZ2', 'IConstructClothoid', 'IEnumCurve2', 'IPolyline2', 'IPolyline3', 'IPolyline4', 'IPolyline5', 'IPolyline6', 'IConstructMultiPatch', 'IExtrude', 'IExtrude2', 'IZ', 'IZ2', 'IVertexAttribute', 'IVertexAttribute2', 'IConstructAngle', 'IConstructPath', 'IConstructPoint', 'IConstructPoint2', 'IConstructCurve', 'IConstructCurve2', 'IConstructCurve3', 'IConstructCurve4', 'IConstructLine', 'IConstructCircularArc', 'IConstructCircularArc2', 'IConstructBezierCurve', 'IConstructGeometryCollection', 'IGeometryBridge', 'IGeometryBridge2', 'ISegmentGraph2', 'ILinePolygonHelper', 'IPolylineArray', 'IPolygonArray', 'IGeometryServer', 'IGeometryServer2', 'IGeometryServer3', 'IJSONConverterGeometry', 'IAffineTransformation2D2', 'IAffineTransformation2D3', 'ILine2', 'ILine3', 'ICurve3', 'IBezierCurve', 'IBezierCurve2', 'IBezierCurve3', 'IRing2', 'IConstructMultipoint', 'ITopologicalOperator3', 'ITopologicalOperator4', 'ITopologicalOperator5', 'IPolygon2', 'IPolygon3', 'IPolygon4', 'IPolycurve3', 'IMultiPatch2', 'ITopologicalSegment2', 'LinearUnit', 'AngularUnit', 'Spheroid', 'VerticalDatum', 'Datum', 'PrimeMeridian', 'GeographicCoordinateSystem', 'Parameter', 'ProjectedCoordinateSystem', 'VerticalCoordinateSystem', 'SpatialReferenceEnvironment', 'GeoTransformationOperationSet', 'Projection', 'GeoTransformation', 'GeocentricTranslation', 'CoordinateFrameTransformation', 'PositionVectorTransformation', 'MolodenskyTransformation', 'MolodenskyBadekasTransformation', 'NullTransformation', 'UnitChangeTransformation', 'Geographic2DOffsetTransformation', 'AbridgedMolodenskyTransformation', 'LongitudeRotationTransformation', 'NADCONTransformation', 'HARNTransformation', 'NTv2Transformation', 'CompositeGeoTransformation', 'UnknownCoordinateSystem', 'JSONConverterGeometry', 'GeometryServerImpl', 'PointArray', 'RelationResultArray', 'PolygonArray', 'PolylineArray', 'GeometryArray', 'AffineTransformation2D', 'ProjectiveTransformation2D', 'AffineTransformation3D', 'Point', 'Vector3D', 'Sphere', 'Ray', 'Line', 'EllipticArc', 'CircularArc', 'BezierCurve', 'Envelope', 'Path', 'Ring', 'Multipoint', 'Polyline', 'Polygon', 'SegmentGraph', 'RelationResult', 'BufferConstruction', 'GeometryBag', 'MultiPatch', 'TriangleFan', 'Triangles', 'TriangleStrip', 'GeometryEnvironment', 'LinePolygonHelper', 'TexturePersistenceProperties', 'IID_ISpatialReferenceInfo', 'IID_IUnit', 'IID_ILinearUnit', 'IID_ISpatialReference', 'IID_IParameter', 'IID_IProjection', 'IID_ISpheroid', 'IID_IDatum', 'IID_IPrimeMeridian', 'IID_IAngularUnit', 'IID_IGeographicCoordinateSystem', 'IID_IProjectedCoordinateSystem', 'IID_IVerticalCoordinateSystem', 'IID_ITransformation', 'IID_IGeoTransformation', 'IID_IGeoTransformationOperationSet', 'IID_ISpatialReferenceFactory', 'IID_ISpatialReferenceAuthority', 'IID_ITransformationGEN', 'IID_IVerticalCoordinateSystemGEN', 'IID_IMolodenskyBadekasTransformation', 'IID_IGeographic2DOffsetTransformation', 'IID_ICompositeGeoTransformation', 'IID_IGeocentricTranslation', 'IID_IPositionVectorTransformation', 'IID_ICoordinateFrameTransformation', 'IID_IMolodenskyTransformation', 'IID_IGridTransformation', 'IID_ILongitudeRotationTransformation', 'IID_ICompareCoordinateSystems', 'IID_ISpatialReferenceResolution', 'IID_ISpatialReferenceTolerance', 'IID_ISpatialReference2GEN', 'IID_IAngularUnitEdit', 'IID_ILinearUnitEdit', 'IID_ISpheroidEdit', 'IID_IDatumEdit', 'IID_IVerticalDatumEdit', 'IID_IPrimeMeridianEdit', 'IID_IGeographicCoordinateSystem2', 'IID_IGeographicCoordinateSystemEdit', 'IID_IParameterEdit', 'IID_IProjectionGEN', 'IID_IESRISpatialReference', 'IID_IESRISpatialReferenceGEN', 'IID_IESRISpatialReferenceGEN2', 'IID_IPRJSpatialReference', 'IID_IPRJSpatialReferenceGEN', 'IID_ISRPersistStream', 'IID_ISpatialReferenceSingletonManager', 'IID_ISpatialReferenceFactory2', 'IID_ISpatialReference2', 'IID_ISpatialReference4', 'IID_IControlPrecision', 'IID_IControlPrecision2', 'IID_IProjectedCoordinateSystemEdit', 'IID_IVerticalCoordinateSystemEdit', 'IID_IControlPrecision3', 'IID_IWkb', 'IID_IESRIShape', 'IID_IESRISegment', 'IID_IVector', 'IID_IConversionMGRS', 'IID_INetworkShape', 'IID_INetworkShape3D', 'IID_IMSnap', 'IID_IAffineTransformation3DGEN', 'IID_IProjectiveTransformation2DGEN', 'IID_IZShift', 'IID_IPolycurve3D', 'IID_IPolycurve4', 'IID_IPolycurveGeodetic', 'IID_ISegmentM', 'IID_ISegmentZ', 'IID_ISegmentID', 'IID_IConversionNotation', 'IID_IAreaGeodetic', 'IID_ISpatialIndex', 'IID_ISpatialIndex2', 'IID_IMAware', 'IID_IMCollection', 'IID_IMSegmentationInternal', 'IID_IZAware', 'IID_IZCollection', 'IID_IPointIDAware', 'IID_ITextureAware', 'IID_INormalAware', 'IID_IPartIDAware', 'IID_IVolume', 'IID_IRelationResult', 'IID_IGeometryEnvironment', 'IID_IGeometryEnvironment2', 'IID_IGeometryEnvironment3', 'IID_IGeometryEnvironment4', 'IID_IBufferProgress', 'IID_IBufferConstructionProperties', 'IID_IBufferConstructionProperties2', 'IID_ITexturePersistenceProperties', 'IID_IRelationResultArray', 'IID_IEnvelope4', 'IID_IPolygon5', 'IID_IESRIShape2', 'IID_IESRISegment2', 'IID_IGeometry', 'IID_IPoint', 'IID_IEnvelope', 'IID_IProjectedCoordinateSystem4GEN', 'IID_IConstructUnknownCoordinateSystem', 'IID_ISpatialReferenceFactory3', 'IID_ISpatialReferenceFactory4', 'IID_ISpatialReferenceFactory5', 'IID_ISpatialReference3', 'IID_IProjectedCoordinateSystem2', 'IID_IProjectedCoordinateSystem3', 'IID_IProjectedCoordinateSystem4', 'IID_IProjectedCoordinateSystem5', 'IID_IEnumVertex', 'IID_IPointCollection', 'IID_IPointCollection2', 'IID_IPointCollection3', 'IID_IPointCollection4', 'IID_IVector3D', 'IID_IEnumGeometry', 'IID_IGeometryCollection', 'IID_IEnumSplitPoint', 'IID_IEnumIntersection', 'IID_IEnumPointAndDistance', 'IID_IGeometry2', 'IID_IGeometryBag', 'IID_ITransformation3D', 'IID_IGeometry3', 'IID_IGeometry4', 'IID_IGeometry5', 'IID_IEnvelopeGEN', 'IID_IEnvelope3D', 'IID_IBezierCurveGEN', 'IID_ITransformation3DGEN', 'IID_ISphere', 'IID_IRay', 'IID_IRay2', 'IID_ITransform3D', 'IID_IArea', 'IID_IArea3D', 'IID_IGeometricBufferSourceSink', 'IID_IEnumVertex2', 'IID_IConstructMerge', 'IID_IMSegmentation', 'IID_IEncode3DProperties', 'IID_IRelationalOperator', 'IID_IRelationalOperator2', 'IID_IRelationalOperator3D', 'IID_IRelationalOperator3D2', 'IID_IRelationalOperatorNxM', 'IID_IProximityOperator', 'IID_IProximityOperator3D', 'IID_ITopologicalOperator6', 'IID_IConstructGeodetic', 'IID_IConstructEllipticArc', 'IID_IGeometryArray', 'IID_IBufferConstruction', 'IID_IGeometryFactory', 'IID_IGeometryFactory2', 'IID_IGeometryFactory3', 'IID_IConstructDomainExtent', 'IID_IConstructDomainExtent2', 'IID_IGeneralMultiPatchInfo', 'IID_IPointArray', 'IID_IProjectiveTransformation2D', 'IID_IAffineTransformation3D', 'IID_IHitTest', 'IID_IHitTest3D', 'IID_ICurve3D', 'IID_IEnvelope2', 'IID_IPointCollection5', 'IID_IMSegmentation2', 'IID_IMSegmentation3', 'IID_IMSegmentation4', 'IID_IWin32Shape', 'IID_IWin32Shape2', 'IID_ICurve', 'IID_ILine', 'IID_IPolycurve', 'IID_IPath', 'IID_IPolyline', 'IID_ISegment', 'IID_IRing', 'IID_IEnumSegment', 'IID_IEnumCurve', 'IID_ISegmentCollection', 'IID_ITransform2D', 'IID_ITopologicalSegment', 'IID_IEllipticArc', 'IID_IPolygon', 'IID_IFunctionalSurface', 'IID_ISegmentGraphCursor', 'IID_ISegmentGraph', 'IID_IMultiPatch', 'IID_ICurve2', 'IID_ICircularArc', 'IID_IAffineTransformation2D', 'IID_ITopologicalOperator', 'IID_ITopologicalOperator2', 'IID_IFunctionalSurface2', 'IID_IFunctionalSurface3', 'IID_IAffineTransformation2D3GEN', 'IID_IPolycurve2', 'IID_ISegmentZ2', 'IID_IConstructClothoid', 'IID_IEnumCurve2', 'IID_IPolyline2', 'IID_IPolyline3', 'IID_IPolyline4', 'IID_IPolyline5', 'IID_IPolyline6', 'IID_IConstructMultiPatch', 'IID_IExtrude', 'IID_IExtrude2', 'IID_IZ', 'IID_IZ2', 'IID_IVertexAttribute', 'IID_IVertexAttribute2', 'IID_IConstructAngle', 'IID_IConstructPath', 'IID_IConstructPoint', 'IID_IConstructPoint2', 'IID_IConstructCurve', 'IID_IConstructCurve2', 'IID_IConstructCurve3', 'IID_IConstructCurve4', 'IID_IConstructLine', 'IID_IConstructCircularArc', 'IID_IConstructCircularArc2', 'IID_IConstructBezierCurve', 'IID_IConstructGeometryCollection', 'IID_IGeometryBridge', 'IID_IGeometryBridge2', 'IID_ISegmentGraph2', 'IID_ILinePolygonHelper', 'IID_IPolylineArray', 'IID_IPolygonArray', 'IID_IGeometryServer', 'IID_IGeometryServer2', 'IID_IGeometryServer3', 'IID_IJSONConverterGeometry', 'IID_IAffineTransformation2D2', 'IID_IAffineTransformation2D3', 'IID_ILine2', 'IID_ILine3', 'IID_ICurve3', 'IID_IBezierCurve', 'IID_IBezierCurve2', 'IID_IBezierCurve3', 'IID_IRing2', 'IID_IConstructMultipoint', 'IID_ITopologicalOperator3', 'IID_ITopologicalOperator4', 'IID_ITopologicalOperator5', 'IID_IPolygon2', 'IID_IPolygon3', 'IID_IPolygon4', 'IID_IPolycurve3', 'IID_IMultiPatch2', 'IID_ITopologicalSegment2', 'CLSID_LinearUnit', 'CLSID_AngularUnit', 'CLSID_Spheroid', 'CLSID_VerticalDatum', 'CLSID_Datum', 'CLSID_PrimeMeridian', 'CLSID_GeographicCoordinateSystem', 'CLSID_Parameter', 'CLSID_ProjectedCoordinateSystem', 'CLSID_VerticalCoordinateSystem', 'CLSID_SpatialReferenceEnvironment', 'CLSID_GeoTransformationOperationSet', 'CLSID_Projection', 'CLSID_GeoTransformation', 'CLSID_GeocentricTranslation', 'CLSID_CoordinateFrameTransformation', 'CLSID_PositionVectorTransformation', 'CLSID_MolodenskyTransformation', 'CLSID_MolodenskyBadekasTransformation', 'CLSID_NullTransformation', 'CLSID_UnitChangeTransformation', 'CLSID_Geographic2DOffsetTransformation', 'CLSID_AbridgedMolodenskyTransformation', 'CLSID_LongitudeRotationTransformation', 'CLSID_NADCONTransformation', 'CLSID_HARNTransformation', 'CLSID_NTv2Transformation', 'CLSID_CompositeGeoTransformation', 'CLSID_UnknownCoordinateSystem', 'CLSID_JSONConverterGeometry', 'CLSID_GeometryServerImpl', 'CLSID_PointArray', 'CLSID_RelationResultArray', 'CLSID_PolygonArray', 'CLSID_PolylineArray', 'CLSID_GeometryArray', 'CLSID_AffineTransformation2D', 'CLSID_ProjectiveTransformation2D', 'CLSID_AffineTransformation3D', 'CLSID_Point', 'CLSID_Vector3D', 'CLSID_Sphere', 'CLSID_Ray', 'CLSID_Line', 'CLSID_EllipticArc', 'CLSID_CircularArc', 'CLSID_BezierCurve', 'CLSID_Envelope', 'CLSID_Path', 'CLSID_Ring', 'CLSID_Multipoint', 'CLSID_Polyline', 'CLSID_Polygon', 'CLSID_SegmentGraph', 'CLSID_RelationResult', 'CLSID_BufferConstruction', 'CLSID_GeometryBag', 'CLSID_MultiPatch', 'CLSID_TriangleFan', 'CLSID_Triangles', 'CLSID_TriangleStrip', 'CLSID_GeometryEnvironment', 'CLSID_LinePolygonHelper', 'CLSID_TexturePersistenceProperties', 'esriGeometryType', 'esriGeometryDimension', 'esriGeometryAttributes', 'esriMGRSModeEnum', 'esriGARSModeEnum', 'esriUTMConversionOptionsEnum', 'esriSpatialReferenceError', 'esriSRHorizonType', 'esriSRLimitsEnum', 'esriSRToleranceEnum', 'esriCoordinateSystemFilter', 'esriTransformDirection', 'esriSegmentExtension', 'esriSRPoleLocation', 'esriSRPoleGeometry', 'esriProjectionHint', 'wkbByteOrder', 'esriSRUnitType', 'esriSRSpheroidType', 'esriSRDatumType', 'esriSRDatum2Type', 'esriSRPrimeMType', 'esriSRProjectionType', 'esriSRProjection2Type', 'esriSRProjection3Type', 'esriSRParameterType', 'esriSRParameter2Type', 'esriSRParameter3Type', 'esriSRGeoCSType', 'esriSRGeoCS2Type', 'esriSRProjCSType', 'esriSRProjCS2Type', 'esriSRProjCS3Type', 'esriSRGeoTransformationType', 'esriSRGeoTransformation2Type', 'esriSRUnit2Type', 'esriSRSpheroid2Type', 'esriSRDatum3Type', 'esriSRPrimeM2Type', 'esriSRProjection4Type', 'esriSRParameter4Type', 'esriSRGeoCS3Type', 'esriSRProjCS4Type', 'esriSRGeoTransformation3Type', 'esriSRVerticalCSType', 'esriSRVerticalDatumType', 'esriShapeType', 'esriShapeModifiers', 'esriCurveIteratorEnum', 'esriArcOrientation', 'esriMultiPatchRingType', 'esriGeodeticType', 'esriCurveDensifyMethod', 'esriGeometryHitPartType', 'esriSegmentType', 'esriMonotinicityEnum', 'esriShapeExportFlags', 'esriShapeImportFlags', 'wkbGeometryType', 'esriGeometryEmbeddingDimension', 'esriEnvelopeVertex', 'esriPatchType', 'esriCurveExtension', 'esriGeometryUpdateMEnum', 'esriExtrapolationEnum', 'esriMCurveRelationEnum', 'esriTurnDirectionEnum', 'esriSpatialRelationEnum', 'esriSpatialRelationExEnum', 'esriBufferConstructionSideEnum', 'esriBufferConstructionEndEnum', 'esriGeometryError', 'esriNonSimpleReasonEnum', 'esriGeometryServerMessageCodeEnum', 'esriMMonotonicEnum', 'esriConstructOffsetEnum', 'esriConstructOffsetSimplifyEnum', 'esriConstructDivideEnum', 'SegmentOverlapEnum', 'WKSPointVA', 'esriSegmentInfo']
from cartocomutils import _esriGeometry
from cartocomutils._esriGeometry import LinearUnit, AngularUnit, Spheroid, VerticalDatum, Datum, PrimeMeridian, GeographicCoordinateSystem, Parameter, ProjectedCoordinateSystem, VerticalCoordinateSystem, SpatialReferenceEnvironment, GeoTransformationOperationSet, Projection, GeoTransformation, GeocentricTranslation, CoordinateFrameTransformation, PositionVectorTransformation, MolodenskyTransformation, MolodenskyBadekasTransformation, NullTransformation, UnitChangeTransformation, Geographic2DOffsetTransformation, AbridgedMolodenskyTransformation, LongitudeRotationTransformation, NADCONTransformation, HARNTransformation, NTv2Transformation, CompositeGeoTransformation, UnknownCoordinateSystem, JSONConverterGeometry, GeometryServerImpl, PointArray, RelationResultArray, PolygonArray, PolylineArray, GeometryArray, AffineTransformation2D, ProjectiveTransformation2D, AffineTransformation3D, Point, Vector3D, Sphere, Ray, Line, EllipticArc, CircularArc, BezierCurve, Envelope, Path, Ring, Multipoint, Polyline, Polygon, SegmentGraph, RelationResult, BufferConstruction, GeometryBag, MultiPatch, TriangleFan, Triangles, TriangleStrip, GeometryEnvironment, LinePolygonHelper, TexturePersistenceProperties
from cartocomutils import Enumeration, IndexProperty, _IIDMap, _CLSIDMap, _RecordMap
import uuid


# Interfaces
class ISpatialReferenceInfo(_esriGeometry.ISpatialReferenceInfo):
    _IID = uuid.UUID('4da0fe00-1dd2-11b2-bf49-08002022f573')
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ISpatialReferenceInfo, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(ISpatialReferenceInfo, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(ISpatialReferenceInfo, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks

           OUTPUT
            Remarks             : BSTR*'''
        return super(ISpatialReferenceInfo, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode

           OUTPUT
            Code                : long*'''
        return super(ISpatialReferenceInfo, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)

class IUnit(_esriGeometry.IUnit):
    _IID = uuid.UUID('0ae02580-1dd2-11b2-bf4a-08002022f573')
    def get_ConversionFactor(self):
        '''Method IUnit.get_ConversionFactor

           OUTPUT
            ConversionFactor    : double*'''
        return super(IUnit, self).get_ConversionFactor()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IUnit, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IUnit, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IUnit, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IUnit, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IUnit, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    ConversionFactor = property(get_ConversionFactor, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)

class ILinearUnit(_esriGeometry.ILinearUnit):
    _IID = uuid.UUID('74ad43f1-d31c-11d1-bc9b-0000f875bcce')
    def get_MetersPerUnit(self):
        '''Method ILinearUnit.get_MetersPerUnit

           OUTPUT
            MetersPerUnit       : double*'''
        return super(ILinearUnit, self).get_MetersPerUnit()
    def get_ConversionFactor(self):
        '''Method IUnit.get_ConversionFactor (from IUnit)

           OUTPUT
            ConversionFactor    : double*'''
        return super(ILinearUnit, self).get_ConversionFactor()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(ILinearUnit, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(ILinearUnit, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(ILinearUnit, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(ILinearUnit, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(ILinearUnit, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    ConversionFactor = property(get_ConversionFactor, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    MetersPerUnit = property(get_MetersPerUnit, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)

class ISpatialReference(_esriGeometry.ISpatialReference):
    _IID = uuid.UUID('4434d680-f4da-11d1-bca6-0000f875bcce')

    def __init__(self, *args, **kw):
        super(ISpatialReference, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(ISpatialReference, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(ISpatialReference, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(ISpatialReference, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(ISpatialReference, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(ISpatialReference, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(ISpatialReference, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(ISpatialReference, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(ISpatialReference, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(ISpatialReference, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(ISpatialReference, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(ISpatialReference, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(ISpatialReference, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(ISpatialReference, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(ISpatialReference, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(ISpatialReference, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(ISpatialReference, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(ISpatialReference, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(ISpatialReference, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit

           INPUT
            zunit               : ILinearUnit*'''
        return super(ISpatialReference, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed'''
        return super(ISpatialReference, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(ISpatialReference, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(ISpatialReference, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(ISpatialReference, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(ISpatialReference, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(ISpatialReference, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Remarks = property(get_Remarks, None, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)

class IParameter(_esriGeometry.IParameter):
    _IID = uuid.UUID('dae75100-1dd1-11b2-bf4d-08002022f573')

    def __init__(self, *args, **kw):
        super(IParameter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Value(self, Value):
        '''Method IParameter.put_Value

           INPUT
            Value               : double'''
        return super(IParameter, self).put_Value(Value)
    def get_Value(self):
        '''Method IParameter.get_Value

           OUTPUT
            Value               : double*'''
        return super(IParameter, self).get_Value()
    def get_Index(self):
        '''Method IParameter.get_Index

           OUTPUT
            i                   : long*'''
        return super(IParameter, self).get_Index()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IParameter, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IParameter, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IParameter, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IParameter, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IParameter, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Index = property(get_Index, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)
    Value = property(get_Value, put_Value, None)

class IProjection(_esriGeometry.IProjection):
    _IID = uuid.UUID('0ae32400-1dd2-11b2-bf4d-08002022f573')
    def get_Usage(self):
        '''Method IProjection.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjection, self).get_Usage()
    def get_Classification(self):
        '''Method IProjection.get_Classification

           OUTPUT
            Classification      : BSTR*'''
        return super(IProjection, self).get_Classification()
    def GetDefaultParameters(self, parameters):
        '''Method IProjection.GetDefaultParameters

           INPUT
            parameters          : IParameter**'''
        return super(IProjection, self).GetDefaultParameters(parameters)
    def get_ProjectionImpl(self, ProjectionImpl):
        '''Method IProjection.get_ProjectionImpl

           INPUT
            ProjectionImpl      : esriProjectionImplHandle*'''
        return super(IProjection, self).get_ProjectionImpl(ProjectionImpl)
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IProjection, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjection, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjection, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjection, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IProjection, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Classification = property(get_Classification, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)
    Usage = property(get_Usage, None, None)

class ISpheroid(_esriGeometry.ISpheroid):
    _IID = uuid.UUID('429b9d00-1dd2-11b2-bf4b-08002022f573')
    def get_SemiMajorAxis(self):
        '''Method ISpheroid.get_SemiMajorAxis

           OUTPUT
            axis                : double*'''
        return super(ISpheroid, self).get_SemiMajorAxis()
    def get_SemiMinorAxis(self):
        '''Method ISpheroid.get_SemiMinorAxis

           OUTPUT
            axis                : double*'''
        return super(ISpheroid, self).get_SemiMinorAxis()
    def get_Flattening(self):
        '''Method ISpheroid.get_Flattening

           OUTPUT
            Flattening          : double*'''
        return super(ISpheroid, self).get_Flattening()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(ISpheroid, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(ISpheroid, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(ISpheroid, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(ISpheroid, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(ISpheroid, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Flattening = property(get_Flattening, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)
    SemiMajorAxis = property(get_SemiMajorAxis, None, None)
    SemiMinorAxis = property(get_SemiMinorAxis, None, None)

class IDatum(_esriGeometry.IDatum):
    _IID = uuid.UUID('53004780-1dd2-11b2-bf4b-08002022f573')
    def get_Spheroid(self):
        '''Method IDatum.get_Spheroid

           OUTPUT
            Spheroid            : ISpheroid**'''
        return super(IDatum, self).get_Spheroid()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IDatum, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IDatum, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IDatum, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IDatum, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IDatum, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)
    Spheroid = property(get_Spheroid, None, None)

class IPrimeMeridian(_esriGeometry.IPrimeMeridian):
    _IID = uuid.UUID('f05b7b80-1dd1-11b2-bf4c-08002022f573')
    def get_Longitude(self):
        '''Method IPrimeMeridian.get_Longitude

           OUTPUT
            Longitude           : double*'''
        return super(IPrimeMeridian, self).get_Longitude()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IPrimeMeridian, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IPrimeMeridian, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IPrimeMeridian, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IPrimeMeridian, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IPrimeMeridian, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Longitude = property(get_Longitude, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)

class IAngularUnit(_esriGeometry.IAngularUnit):
    _IID = uuid.UUID('74ad43f0-d31c-11d1-bc9b-0000f875bcce')
    def get_RadiansPerUnit(self):
        '''Method IAngularUnit.get_RadiansPerUnit

           OUTPUT
            RadiansPerUnit      : double*'''
        return super(IAngularUnit, self).get_RadiansPerUnit()
    def get_ConversionFactor(self):
        '''Method IUnit.get_ConversionFactor (from IUnit)

           OUTPUT
            ConversionFactor    : double*'''
        return super(IAngularUnit, self).get_ConversionFactor()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IAngularUnit, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IAngularUnit, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IAngularUnit, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IAngularUnit, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IAngularUnit, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    ConversionFactor = property(get_ConversionFactor, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    RadiansPerUnit = property(get_RadiansPerUnit, None, None)
    Remarks = property(get_Remarks, None, None)

class IGeographicCoordinateSystem(_esriGeometry.IGeographicCoordinateSystem):
    _IID = uuid.UUID('40870d80-1dd2-11b2-bf4c-08002022f573')

    def __init__(self, *args, **kw):
        super(IGeographicCoordinateSystem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Usage(self):
        '''Method IGeographicCoordinateSystem.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IGeographicCoordinateSystem, self).get_Usage()
    def get_Datum(self):
        '''Method IGeographicCoordinateSystem.get_Datum

           OUTPUT
            Datum               : IDatum**'''
        return super(IGeographicCoordinateSystem, self).get_Datum()
    def get_PrimeMeridian(self):
        '''Method IGeographicCoordinateSystem.get_PrimeMeridian

           OUTPUT
            prime               : IPrimeMeridian**'''
        return super(IGeographicCoordinateSystem, self).get_PrimeMeridian()
    def get_CoordinateUnit(self):
        '''Method IGeographicCoordinateSystem.get_CoordinateUnit

           OUTPUT
            CoordinateUnit      : IAngularUnit**'''
        return super(IGeographicCoordinateSystem, self).get_CoordinateUnit()
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IGeographicCoordinateSystem, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IGeographicCoordinateSystem, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IGeographicCoordinateSystem, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IGeographicCoordinateSystem, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IGeographicCoordinateSystem, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IGeographicCoordinateSystem, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IGeographicCoordinateSystem, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IGeographicCoordinateSystem, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IGeographicCoordinateSystem, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IGeographicCoordinateSystem, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IGeographicCoordinateSystem, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IGeographicCoordinateSystem, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IGeographicCoordinateSystem, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IGeographicCoordinateSystem, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IGeographicCoordinateSystem, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IGeographicCoordinateSystem, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(IGeographicCoordinateSystem, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(IGeographicCoordinateSystem, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IGeographicCoordinateSystem, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IGeographicCoordinateSystem, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IGeographicCoordinateSystem, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IGeographicCoordinateSystem, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IGeographicCoordinateSystem, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    Datum = property(get_Datum, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    PrimeMeridian = property(get_PrimeMeridian, None, None)
    Remarks = property(get_Remarks, None, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    Usage = property(get_Usage, None, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)

class IProjectedCoordinateSystem(_esriGeometry.IProjectedCoordinateSystem):
    _IID = uuid.UUID('f94e4c00-1dd1-11b2-bf4e-08002022f573')

    def __init__(self, *args, **kw):
        super(IProjectedCoordinateSystem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Usage(self):
        '''Method IProjectedCoordinateSystem.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjectedCoordinateSystem, self).get_Usage()
    def get_GeographicCoordinateSystem(self):
        '''Method IProjectedCoordinateSystem.get_GeographicCoordinateSystem

           OUTPUT
            geographic          : IGeographicCoordinateSystem**'''
        return super(IProjectedCoordinateSystem, self).get_GeographicCoordinateSystem()
    def get_Projection(self):
        '''Method IProjectedCoordinateSystem.get_Projection

           OUTPUT
            Projection          : IProjection**'''
        return super(IProjectedCoordinateSystem, self).get_Projection()
    def GetParameters(self):
        '''Method IProjectedCoordinateSystem.GetParameters

           OUTPUT
            parameters          : IParameter**'''
        return super(IProjectedCoordinateSystem, self).GetParameters()
    def get_CoordinateUnit(self):
        '''Method IProjectedCoordinateSystem.get_CoordinateUnit

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IProjectedCoordinateSystem, self).get_CoordinateUnit()
    def Forward(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Forward

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem, self).Forward(Count, Points)
    def Inverse(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Inverse

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem, self).Inverse(Count, Points)
    def get_HorizonCount(self):
        '''Method IProjectedCoordinateSystem.get_HorizonCount

           OUTPUT
            HorizonCount        : long*'''
        return super(IProjectedCoordinateSystem, self).get_HorizonCount()
    def get_Horizon(self, horizonIndex):
        '''Method IProjectedCoordinateSystem.get_Horizon

           INPUT
            horizonIndex        : long

           OUTPUT
            Horizon             : esriSRHorizon**'''
        return super(IProjectedCoordinateSystem, self).get_Horizon(horizonIndex)
    def get_CentralMeridian(self, inDegrees):
        '''Method IProjectedCoordinateSystem.get_CentralMeridian

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            CentralMeridian     : double*'''
        return super(IProjectedCoordinateSystem, self).get_CentralMeridian(inDegrees)
    def put_CentralMeridian(self, inDegrees, CentralMeridian):
        '''Method IProjectedCoordinateSystem.put_CentralMeridian

           INPUTS
            inDegrees           : VARIANT_BOOL
            CentralMeridian     : double'''
        return super(IProjectedCoordinateSystem, self).put_CentralMeridian(inDegrees, CentralMeridian)
    def get_LongitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOfOrigin

           OUTPUT
            LongitudeOfOrigin   : double*'''
        return super(IProjectedCoordinateSystem, self).get_LongitudeOfOrigin()
    def put_LongitudeOfOrigin(self, LongitudeOfOrigin):
        '''Method IProjectedCoordinateSystem.put_LongitudeOfOrigin

           INPUT
            LongitudeOfOrigin   : double'''
        return super(IProjectedCoordinateSystem, self).put_LongitudeOfOrigin(LongitudeOfOrigin)
    def get_LatitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf1st

           OUTPUT
            standardLongitude1  : double*'''
        return super(IProjectedCoordinateSystem, self).get_LatitudeOf1st()
    def put_LatitudeOf1st(self, standardLongitude1):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf1st

           INPUT
            standardLongitude1  : double'''
        return super(IProjectedCoordinateSystem, self).put_LatitudeOf1st(standardLongitude1)
    def get_LatitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf2nd

           OUTPUT
            LatitudeOf2nd       : double*'''
        return super(IProjectedCoordinateSystem, self).get_LatitudeOf2nd()
    def put_LatitudeOf2nd(self, LatitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf2nd

           INPUT
            LatitudeOf2nd       : double'''
        return super(IProjectedCoordinateSystem, self).put_LatitudeOf2nd(LatitudeOf2nd)
    def get_FalseEasting(self):
        '''Method IProjectedCoordinateSystem.get_FalseEasting

           OUTPUT
            FalseEasting        : double*'''
        return super(IProjectedCoordinateSystem, self).get_FalseEasting()
    def put_FalseEasting(self, FalseEasting):
        '''Method IProjectedCoordinateSystem.put_FalseEasting

           INPUT
            FalseEasting        : double'''
        return super(IProjectedCoordinateSystem, self).put_FalseEasting(FalseEasting)
    def get_FalseNorthing(self):
        '''Method IProjectedCoordinateSystem.get_FalseNorthing

           OUTPUT
            FalseNorthing       : double*'''
        return super(IProjectedCoordinateSystem, self).get_FalseNorthing()
    def put_FalseNorthing(self, FalseNorthing):
        '''Method IProjectedCoordinateSystem.put_FalseNorthing

           INPUT
            FalseNorthing       : double'''
        return super(IProjectedCoordinateSystem, self).put_FalseNorthing(FalseNorthing)
    def get_CentralParallel(self):
        '''Method IProjectedCoordinateSystem.get_CentralParallel

           OUTPUT
            CentralParallel     : double*'''
        return super(IProjectedCoordinateSystem, self).get_CentralParallel()
    def put_CentralParallel(self, CentralParallel):
        '''Method IProjectedCoordinateSystem.put_CentralParallel

           INPUT
            CentralParallel     : double'''
        return super(IProjectedCoordinateSystem, self).put_CentralParallel(CentralParallel)
    def get_StandardParallel1(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel1

           OUTPUT
            StandardParallel1   : double*'''
        return super(IProjectedCoordinateSystem, self).get_StandardParallel1()
    def put_StandardParallel1(self, StandardParallel1):
        '''Method IProjectedCoordinateSystem.put_StandardParallel1

           INPUT
            StandardParallel1   : double'''
        return super(IProjectedCoordinateSystem, self).put_StandardParallel1(StandardParallel1)
    def get_StandardParallel2(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel2

           OUTPUT
            StandardParallel2   : double*'''
        return super(IProjectedCoordinateSystem, self).get_StandardParallel2()
    def put_StandardParallel2(self, StandardParallel2):
        '''Method IProjectedCoordinateSystem.put_StandardParallel2

           INPUT
            StandardParallel2   : double'''
        return super(IProjectedCoordinateSystem, self).put_StandardParallel2(StandardParallel2)
    def get_LongitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf1st

           OUTPUT
            LongitudeOf1st      : double*'''
        return super(IProjectedCoordinateSystem, self).get_LongitudeOf1st()
    def put_LongitudeOf1st(self, LongitudeOf1st):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf1st

           INPUT
            LongitudeOf1st      : double'''
        return super(IProjectedCoordinateSystem, self).put_LongitudeOf1st(LongitudeOf1st)
    def get_LongitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf2nd

           OUTPUT
            LongitudeOf2nd      : double*'''
        return super(IProjectedCoordinateSystem, self).get_LongitudeOf2nd()
    def put_LongitudeOf2nd(self, LongitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf2nd

           INPUT
            LongitudeOf2nd      : double'''
        return super(IProjectedCoordinateSystem, self).put_LongitudeOf2nd(LongitudeOf2nd)
    def get_ScaleFactor(self):
        '''Method IProjectedCoordinateSystem.get_ScaleFactor

           OUTPUT
            ScaleFactor         : double*'''
        return super(IProjectedCoordinateSystem, self).get_ScaleFactor()
    def put_ScaleFactor(self, ScaleFactor):
        '''Method IProjectedCoordinateSystem.put_ScaleFactor

           INPUT
            ScaleFactor         : double'''
        return super(IProjectedCoordinateSystem, self).put_ScaleFactor(ScaleFactor)
    def get_Azimuth(self):
        '''Method IProjectedCoordinateSystem.get_Azimuth

           OUTPUT
            Azimuth             : double*'''
        return super(IProjectedCoordinateSystem, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IProjectedCoordinateSystem.put_Azimuth

           INPUT
            Azimuth             : double'''
        return super(IProjectedCoordinateSystem, self).put_Azimuth(Azimuth)
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IProjectedCoordinateSystem, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IProjectedCoordinateSystem, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IProjectedCoordinateSystem, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IProjectedCoordinateSystem, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IProjectedCoordinateSystem, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IProjectedCoordinateSystem, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IProjectedCoordinateSystem, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IProjectedCoordinateSystem, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IProjectedCoordinateSystem, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IProjectedCoordinateSystem, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IProjectedCoordinateSystem, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IProjectedCoordinateSystem, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IProjectedCoordinateSystem, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IProjectedCoordinateSystem, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IProjectedCoordinateSystem, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IProjectedCoordinateSystem, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(IProjectedCoordinateSystem, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(IProjectedCoordinateSystem, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IProjectedCoordinateSystem, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjectedCoordinateSystem, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjectedCoordinateSystem, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjectedCoordinateSystem, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IProjectedCoordinateSystem, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    CentralMeridian = property(None, put_CentralMeridian, None)
    CentralParallel = property(get_CentralParallel, put_CentralParallel, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    FalseEasting = property(get_FalseEasting, put_FalseEasting, None)
    FalseNorthing = property(get_FalseNorthing, put_FalseNorthing, None)
    GeographicCoordinateSystem = property(get_GeographicCoordinateSystem, None, None)
    HorizonCount = property(get_HorizonCount, None, None)
    LatitudeOf1st = property(get_LatitudeOf1st, put_LatitudeOf1st, None)
    LatitudeOf2nd = property(get_LatitudeOf2nd, put_LatitudeOf2nd, None)
    LongitudeOf1st = property(get_LongitudeOf1st, put_LongitudeOf1st, None)
    LongitudeOf2nd = property(get_LongitudeOf2nd, put_LongitudeOf2nd, None)
    LongitudeOfOrigin = property(get_LongitudeOfOrigin, put_LongitudeOfOrigin, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Projection = property(get_Projection, None, None)
    Remarks = property(get_Remarks, None, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    StandardParallel1 = property(get_StandardParallel1, put_StandardParallel1, None)
    StandardParallel2 = property(get_StandardParallel2, put_StandardParallel2, None)
    Usage = property(get_Usage, None, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)
    CentralMeridian = IndexProperty(get_CentralMeridian, None)
    Horizon = IndexProperty(get_Horizon, None)

class IVerticalCoordinateSystem(_esriGeometry.IVerticalCoordinateSystem):
    _IID = uuid.UUID('3f6c2145-3320-446f-82bf-b3e38fadc833')

    def __init__(self, *args, **kw):
        super(IVerticalCoordinateSystem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Usage(self):
        '''Method IVerticalCoordinateSystem.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IVerticalCoordinateSystem, self).get_Usage()
    def get_Datum(self):
        '''Method IVerticalCoordinateSystem.get_Datum

           OUTPUT
            hvDatum             : IHVDatum**'''
        return super(IVerticalCoordinateSystem, self).get_Datum()
    def get_CoordinateUnit(self):
        '''Method IVerticalCoordinateSystem.get_CoordinateUnit

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IVerticalCoordinateSystem, self).get_CoordinateUnit()
    def put_CoordinateUnit(self, Unit):
        '''Method IVerticalCoordinateSystem.put_CoordinateUnit

           INPUT
            Unit                : ILinearUnit*'''
        return super(IVerticalCoordinateSystem, self).put_CoordinateUnit(Unit)
    def get_VerticalShift(self):
        '''Method IVerticalCoordinateSystem.get_VerticalShift

           OUTPUT
            vshift              : double*'''
        return super(IVerticalCoordinateSystem, self).get_VerticalShift()
    def put_VerticalShift(self, vshift):
        '''Method IVerticalCoordinateSystem.put_VerticalShift

           INPUT
            vshift              : double'''
        return super(IVerticalCoordinateSystem, self).put_VerticalShift(vshift)
    def get_PositiveDirection(self):
        '''Method IVerticalCoordinateSystem.get_PositiveDirection

           OUTPUT
            pd                  : int*'''
        return super(IVerticalCoordinateSystem, self).get_PositiveDirection()
    def put_PositiveDirection(self, pd):
        '''Method IVerticalCoordinateSystem.put_PositiveDirection

           INPUT
            pd                  : int'''
        return super(IVerticalCoordinateSystem, self).put_PositiveDirection(pd)
    def GetParameters(self):
        '''Method IVerticalCoordinateSystem.GetParameters

           OUTPUT
            parameters          : IParameter**'''
        return super(IVerticalCoordinateSystem, self).GetParameters()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IVerticalCoordinateSystem, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IVerticalCoordinateSystem, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IVerticalCoordinateSystem, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IVerticalCoordinateSystem, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IVerticalCoordinateSystem, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    CoordinateUnit = property(get_CoordinateUnit, put_CoordinateUnit, None)
    Datum = property(get_Datum, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    PositiveDirection = property(get_PositiveDirection, put_PositiveDirection, None)
    Remarks = property(get_Remarks, None, None)
    Usage = property(get_Usage, None, None)
    VerticalShift = property(get_VerticalShift, put_VerticalShift, None)

class ITransformation(_esriGeometry.ITransformation):
    _IID = uuid.UUID('6f2cf924-7e00-11d0-82f4-0000f8034032')
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(ITransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(ITransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(ITransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(ITransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(ITransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(ITransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(ITransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(ITransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)

class IGeoTransformation(_esriGeometry.IGeoTransformation):
    _IID = uuid.UUID('9273bb60-c611-11d2-bd08-0000f875bcce')

    def __init__(self, *args, **kw):
        super(IGeoTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGeoTransformation.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IGeoTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name

           INPUT
            Name                : BSTR'''
        return super(IGeoTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(IGeoTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(IGeoTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IGeoTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IGeoTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IGeoTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IGeoTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IGeoTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IGeoTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IGeoTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IGeoTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)

class IGeoTransformationOperationSet(_esriGeometry.IGeoTransformationOperationSet):
    _IID = uuid.UUID('0049530e-e3ec-11d3-9f62-00c04f6bdd7f')
    def Set(self, direction, transformation):
        '''Method IGeoTransformationOperationSet.Set

           INPUTS
            direction           : esriTransformDirection
            transformation      : IGeoTransformation*'''
        return super(IGeoTransformationOperationSet, self).Set(direction, transformation)
    def Get(self, pFromGCS, pToGCS):
        '''Method IGeoTransformationOperationSet.Get

           INPUTS
            pFromGCS            : IGeographicCoordinateSystem*
            pToGCS              : IGeographicCoordinateSystem*

           OUTPUTS
            direction           : esriTransformDirection*
            transformation      : IGeoTransformation**'''
        return super(IGeoTransformationOperationSet, self).Get(pFromGCS, pToGCS)
    def Find(self, direction, GT):
        '''Method IGeoTransformationOperationSet.Find

           INPUTS
            direction           : esriTransformDirection
            GT                  : IGeoTransformation*

           OUTPUT
            found               : VARIANT_BOOL*'''
        return super(IGeoTransformationOperationSet, self).Find(direction, GT)
    def Remove(self, direction, transformation):
        '''Method IGeoTransformationOperationSet.Remove

           INPUTS
            direction           : esriTransformDirection
            transformation      : IGeoTransformation*'''
        return super(IGeoTransformationOperationSet, self).Remove(direction, transformation)
    def RemoveByKey(self, pFromGCS, pToGCS):
        '''Method IGeoTransformationOperationSet.RemoveByKey

           INPUTS
            pFromGCS            : IGeographicCoordinateSystem*
            pToGCS              : IGeographicCoordinateSystem*'''
        return super(IGeoTransformationOperationSet, self).RemoveByKey(pFromGCS, pToGCS)
    def Next(self):
        '''Method IGeoTransformationOperationSet.Next

           OUTPUTS
            direction           : esriTransformDirection*
            GT                  : IGeoTransformation**'''
        return super(IGeoTransformationOperationSet, self).Next()
    def __iter__(self):
        try:
            super(IGeoTransformationOperationSet, self).Reset()
            val = super(IGeoTransformationOperationSet, self).Next()
            while any(val):
                yield val
                val = super(IGeoTransformationOperationSet, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IGeoTransformationOperationSet.Reset'''
        return super(IGeoTransformationOperationSet, self).Reset()
    def RemoveAll(self):
        '''Method IGeoTransformationOperationSet.RemoveAll'''
        return super(IGeoTransformationOperationSet, self).RemoveAll()
    def get_Count(self):
        '''Method IGeoTransformationOperationSet.get_Count

           OUTPUT
            gtCount             : long*'''
        return super(IGeoTransformationOperationSet, self).get_Count()
    Count = property(get_Count, None, None)

class ISpatialReferenceFactory(_esriGeometry.ISpatialReferenceFactory):
    _IID = uuid.UUID('6cd10b60-c4f6-11d1-bc92-0000f875bcce')
    def CreateESRISpatialReference(self, spatRefInfo):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReference

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReference**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory, self).CreateESRISpatialReference(spatRefInfo)
    def CreateESRISpatialReferenceFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJ

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory, self).CreateESRISpatialReferenceFromPRJ(prj)
    def CreateESRISpatialReferenceFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJFile

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory, self).CreateESRISpatialReferenceFromPRJFile(prjFile)
    def ExportESRISpatialReferenceToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory.ExportESRISpatialReferenceToPRJFile

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReference*'''
        return super(ISpatialReferenceFactory, self).ExportESRISpatialReferenceToPRJFile(prjFile, SpatialReference)
    def CreateUnit(self, unitType):
        '''Method ISpatialReferenceFactory.CreateUnit

           INPUT
            unitType            : long

           OUTPUT
            Unit                : IUnit**'''
        return super(ISpatialReferenceFactory, self).CreateUnit(unitType)
    def CreateSpheroid(self, spheroidType):
        '''Method ISpatialReferenceFactory.CreateSpheroid

           INPUT
            spheroidType        : long

           OUTPUT
            Spheroid            : ISpheroid**'''
        return super(ISpatialReferenceFactory, self).CreateSpheroid(spheroidType)
    def CreateDatum(self, datumType):
        '''Method ISpatialReferenceFactory.CreateDatum

           INPUT
            datumType           : long

           OUTPUT
            Datum               : IDatum**'''
        return super(ISpatialReferenceFactory, self).CreateDatum(datumType)
    def CreatePrimeMeridian(self, primeMeridianType):
        '''Method ISpatialReferenceFactory.CreatePrimeMeridian

           INPUT
            primeMeridianType   : long

           OUTPUT
            PrimeMeridian       : IPrimeMeridian**'''
        return super(ISpatialReferenceFactory, self).CreatePrimeMeridian(primeMeridianType)
    def CreateProjection(self, projectionType):
        '''Method ISpatialReferenceFactory.CreateProjection

           INPUT
            projectionType      : long

           OUTPUT
            Projection          : IProjection**'''
        return super(ISpatialReferenceFactory, self).CreateProjection(projectionType)
    def CreateParameter(self, parameterType):
        '''Method ISpatialReferenceFactory.CreateParameter

           INPUT
            parameterType       : long

           OUTPUT
            newParameter        : IParameter**'''
        return super(ISpatialReferenceFactory, self).CreateParameter(parameterType)
    def CreateProjectedCoordinateSystem(self, pcsType):
        '''Method ISpatialReferenceFactory.CreateProjectedCoordinateSystem

           INPUT
            pcsType             : long

           OUTPUT
            pcs                 : IProjectedCoordinateSystem**'''
        return super(ISpatialReferenceFactory, self).CreateProjectedCoordinateSystem(pcsType)
    def CreateGeographicCoordinateSystem(self, gcsType):
        '''Method ISpatialReferenceFactory.CreateGeographicCoordinateSystem

           INPUT
            gcsType             : long

           OUTPUT
            gcs                 : IGeographicCoordinateSystem**'''
        return super(ISpatialReferenceFactory, self).CreateGeographicCoordinateSystem(gcsType)
    def CreateGeoTransformation(self, gTransformationType):
        '''Method ISpatialReferenceFactory.CreateGeoTransformation

           INPUT
            gTransformationType : long

           OUTPUT
            GeoTransformation   : ITransformation**'''
        return super(ISpatialReferenceFactory, self).CreateGeoTransformation(gTransformationType)
    def CreatePredefinedProjections(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedProjections

           OUTPUT
            projections         : ISet**'''
        return super(ISpatialReferenceFactory, self).CreatePredefinedProjections()
    def CreatePredefinedLinearUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedLinearUnits

           OUTPUT
            linearUnits         : ISet**'''
        return super(ISpatialReferenceFactory, self).CreatePredefinedLinearUnits()
    def CreatePredefinedDatums(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedDatums

           OUTPUT
            datums              : ISet**'''
        return super(ISpatialReferenceFactory, self).CreatePredefinedDatums()
    def CreatePredefinedAngularUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedAngularUnits

           OUTPUT
            angularUnits        : ISet**'''
        return super(ISpatialReferenceFactory, self).CreatePredefinedAngularUnits()
    def CreatePredefinedPrimeMeridians(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedPrimeMeridians

           OUTPUT
            primeMeridians      : ISet**'''
        return super(ISpatialReferenceFactory, self).CreatePredefinedPrimeMeridians()
    def CreatePredefinedSpheroids(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedSpheroids

           OUTPUT
            spheroids           : ISet**'''
        return super(ISpatialReferenceFactory, self).CreatePredefinedSpheroids()

class ISpatialReferenceAuthority(_esriGeometry.ISpatialReferenceAuthority):
    _IID = uuid.UUID('d2f20dac-5ca7-4b58-bddb-309fdd0e364a')
    def get_AuthorityName(self):
        '''Method ISpatialReferenceAuthority.get_AuthorityName

           OUTPUT
            pAuthName           : BSTR*'''
        return super(ISpatialReferenceAuthority, self).get_AuthorityName()
    def get_Version(self):
        '''Method ISpatialReferenceAuthority.get_Version

           OUTPUT
            pVersion            : BSTR*'''
        return super(ISpatialReferenceAuthority, self).get_Version()
    def get_Code(self):
        '''Method ISpatialReferenceAuthority.get_Code

           OUTPUT
            pAuthCode           : long*'''
        return super(ISpatialReferenceAuthority, self).get_Code()
    def Define(self, AuthorityName, authorityCode, authorityVersion):
        '''Method ISpatialReferenceAuthority.Define

           INPUTS
            AuthorityName       : BSTR
            authorityCode       : long
            authorityVersion    : BSTR'''
        return super(ISpatialReferenceAuthority, self).Define(AuthorityName, authorityCode, authorityVersion)
    AuthorityName = property(get_AuthorityName, None, None)
    Code = property(get_Code, None, None)
    Version = property(get_Version, None, None)

class ITransformationGEN(_esriGeometry.ITransformationGEN):
    _IID = uuid.UUID('5f015fe6-38cf-451d-81cd-7e784b71add7')
    def TransformMeasuresFF(self, direction, inMeasures):
        '''Method ITransformationGEN.TransformMeasuresFF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformMeasuresFF(direction, inMeasures)
    def TransformMeasuresFI(self, direction, inMeasures):
        '''Method ITransformationGEN.TransformMeasuresFI

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformMeasuresFI(direction, inMeasures)
    def TransformMeasuresIF(self, direction, inMeasures):
        '''Method ITransformationGEN.TransformMeasuresIF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformMeasuresIF(direction, inMeasures)
    def TransformMeasuresII(self, direction, inMeasures):
        '''Method ITransformationGEN.TransformMeasuresII

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformMeasuresII(direction, inMeasures)
    def TransformPointsFF(self, direction, inPoints):
        '''Method ITransformationGEN.TransformPointsFF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformPointsFF(direction, inPoints)
    def TransformPointsFI(self, direction, inPoints):
        '''Method ITransformationGEN.TransformPointsFI

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformPointsFI(direction, inPoints)
    def TransformPointsIF(self, direction, inPoints):
        '''Method ITransformationGEN.TransformPointsIF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformPointsIF(direction, inPoints)
    def TransformPointsII(self, direction, inPoints):
        '''Method ITransformationGEN.TransformPointsII

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(ITransformationGEN, self).TransformPointsII(direction, inPoints)

class IVerticalCoordinateSystemGEN(_esriGeometry.IVerticalCoordinateSystemGEN):
    _IID = uuid.UUID('d9f23920-ee88-4b14-aa07-a526aa1dfc03')

    def __init__(self, *args, **kw):
        super(IVerticalCoordinateSystemGEN, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Usage(self):
        '''Method IVerticalCoordinateSystemGEN.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IVerticalCoordinateSystemGEN, self).get_Usage()
    def get_Datum(self):
        '''Method IVerticalCoordinateSystemGEN.get_Datum

           OUTPUT
            hvDatum             : IHVDatum**'''
        return super(IVerticalCoordinateSystemGEN, self).get_Datum()
    def get_CoordinateUnit(self):
        '''Method IVerticalCoordinateSystemGEN.get_CoordinateUnit

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IVerticalCoordinateSystemGEN, self).get_CoordinateUnit()
    def put_CoordinateUnit(self, Unit):
        '''Method IVerticalCoordinateSystemGEN.put_CoordinateUnit

           INPUT
            Unit                : ILinearUnit*'''
        return super(IVerticalCoordinateSystemGEN, self).put_CoordinateUnit(Unit)
    def get_VerticalShift(self):
        '''Method IVerticalCoordinateSystemGEN.get_VerticalShift

           OUTPUT
            vshift              : double*'''
        return super(IVerticalCoordinateSystemGEN, self).get_VerticalShift()
    def put_VerticalShift(self, vshift):
        '''Method IVerticalCoordinateSystemGEN.put_VerticalShift

           INPUT
            vshift              : double'''
        return super(IVerticalCoordinateSystemGEN, self).put_VerticalShift(vshift)
    def get_PositiveDirection(self):
        '''Method IVerticalCoordinateSystemGEN.get_PositiveDirection

           OUTPUT
            pd                  : int*'''
        return super(IVerticalCoordinateSystemGEN, self).get_PositiveDirection()
    def GetParameters(self):
        '''Method IVerticalCoordinateSystemGEN.GetParameters

           OUTPUT
            parameters          : SAFEARRAY**'''
        return super(IVerticalCoordinateSystemGEN, self).GetParameters()
    CoordinateUnit = property(get_CoordinateUnit, put_CoordinateUnit, None)
    Datum = property(get_Datum, None, None)
    PositiveDirection = property(get_PositiveDirection, None, None)
    Usage = property(get_Usage, None, None)
    VerticalShift = property(get_VerticalShift, put_VerticalShift, None)

class IMolodenskyBadekasTransformation(_esriGeometry.IMolodenskyBadekasTransformation):
    _IID = uuid.UUID('62040069-0799-422f-b2a6-1ac5b63bcaa2')

    def __init__(self, *args, **kw):
        super(IMolodenskyBadekasTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutParameters(self, dx, dy, dz, rx, ry, rz, s, xcr, ycr, zcr):
        '''Method IMolodenskyBadekasTransformation.PutParameters

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double
            rx                  : double
            ry                  : double
            rz                  : double
            s                   : double
            xcr                 : double
            ycr                 : double
            zcr                 : double'''
        return super(IMolodenskyBadekasTransformation, self).PutParameters(dx, dy, dz, rx, ry, rz, s, xcr, ycr, zcr)
    def GetParameters(self):
        '''Method IMolodenskyBadekasTransformation.GetParameters

           OUTPUTS
            dx                  : double*
            dy                  : double*
            dz                  : double*
            rx                  : double*
            ry                  : double*
            rz                  : double*
            s                   : double*
            xcr                 : double*
            ycr                 : double*
            zcr                 : double*'''
        return super(IMolodenskyBadekasTransformation, self).GetParameters()
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(IMolodenskyBadekasTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(IMolodenskyBadekasTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(IMolodenskyBadekasTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(IMolodenskyBadekasTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IMolodenskyBadekasTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IMolodenskyBadekasTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IMolodenskyBadekasTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IMolodenskyBadekasTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IMolodenskyBadekasTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IMolodenskyBadekasTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IMolodenskyBadekasTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IMolodenskyBadekasTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)

class IGeographic2DOffsetTransformation(_esriGeometry.IGeographic2DOffsetTransformation):
    _IID = uuid.UUID('1c5a7b93-e68e-11de-8a39-0800200c9a66')

    def __init__(self, *args, **kw):
        super(IGeographic2DOffsetTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutParameters(self, dlon, dlat):
        '''Method IGeographic2DOffsetTransformation.PutParameters

           INPUTS
            dlon                : double
            dlat                : double'''
        return super(IGeographic2DOffsetTransformation, self).PutParameters(dlon, dlat)
    def GetParameters(self):
        '''Method IGeographic2DOffsetTransformation.GetParameters

           OUTPUTS
            dlon                : double*
            dlat                : double*'''
        return super(IGeographic2DOffsetTransformation, self).GetParameters()
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(IGeographic2DOffsetTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(IGeographic2DOffsetTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(IGeographic2DOffsetTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(IGeographic2DOffsetTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IGeographic2DOffsetTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IGeographic2DOffsetTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IGeographic2DOffsetTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IGeographic2DOffsetTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IGeographic2DOffsetTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IGeographic2DOffsetTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IGeographic2DOffsetTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IGeographic2DOffsetTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)

class ICompositeGeoTransformation(_esriGeometry.ICompositeGeoTransformation):
    _IID = uuid.UUID('3be52788-dda4-11d3-9f61-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ICompositeGeoTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Add(self, direction, pXForm):
        '''Method ICompositeGeoTransformation.Add

           INPUTS
            direction           : esriTransformDirection
            pXForm              : IGeoTransformation*'''
        return super(ICompositeGeoTransformation, self).Add(direction, pXForm)
    def get_GeoTransformation(self, i):
        '''Method ICompositeGeoTransformation.get_GeoTransformation

           INPUT
            i                   : long

           OUTPUT
            geoXForm            : IGeoTransformation**'''
        return super(ICompositeGeoTransformation, self).get_GeoTransformation(i)
    def get_TransformationDirection(self, i):
        '''Method ICompositeGeoTransformation.get_TransformationDirection

           INPUT
            i                   : long

           OUTPUT
            direction           : esriTransformDirection*'''
        return super(ICompositeGeoTransformation, self).get_TransformationDirection(i)
    def get_Count(self):
        '''Method ICompositeGeoTransformation.get_Count

           OUTPUT
            geoTransformationElement: long*'''
        return super(ICompositeGeoTransformation, self).get_Count()
    def SetEmpty(self):
        '''Method ICompositeGeoTransformation.SetEmpty'''
        return super(ICompositeGeoTransformation, self).SetEmpty()
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(ICompositeGeoTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(ICompositeGeoTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(ICompositeGeoTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(ICompositeGeoTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(ICompositeGeoTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(ICompositeGeoTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(ICompositeGeoTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(ICompositeGeoTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(ICompositeGeoTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(ICompositeGeoTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(ICompositeGeoTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(ICompositeGeoTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Count = property(get_Count, None, None)
    Name = property(get_Name, put_Name, None)
    GeoTransformation = IndexProperty(get_GeoTransformation, None)
    TransformationDirection = IndexProperty(get_TransformationDirection, None)

class IGeocentricTranslation(_esriGeometry.IGeocentricTranslation):
    _IID = uuid.UUID('063954b0-c1fb-11d2-bd07-0000f875bcce')

    def __init__(self, *args, **kw):
        super(IGeocentricTranslation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetParameters(self):
        '''Method IGeocentricTranslation.GetParameters

           OUTPUTS
            dx                  : double*
            dy                  : double*
            dz                  : double*'''
        return super(IGeocentricTranslation, self).GetParameters()
    def PutParameters(self, dx, dy, dz):
        '''Method IGeocentricTranslation.PutParameters

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double'''
        return super(IGeocentricTranslation, self).PutParameters(dx, dy, dz)
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(IGeocentricTranslation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(IGeocentricTranslation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(IGeocentricTranslation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(IGeocentricTranslation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IGeocentricTranslation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IGeocentricTranslation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IGeocentricTranslation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IGeocentricTranslation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IGeocentricTranslation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IGeocentricTranslation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IGeocentricTranslation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IGeocentricTranslation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)

class IPositionVectorTransformation(_esriGeometry.IPositionVectorTransformation):
    _IID = uuid.UUID('063954b1-c1fb-11d2-bd07-0000f875bcce')

    def __init__(self, *args, **kw):
        super(IPositionVectorTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutParameters(self, dx, dy, dz, rx, ry, rz, s):
        '''Method IPositionVectorTransformation.PutParameters

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double
            rx                  : double
            ry                  : double
            rz                  : double
            s                   : double'''
        return super(IPositionVectorTransformation, self).PutParameters(dx, dy, dz, rx, ry, rz, s)
    def GetParameters(self):
        '''Method IPositionVectorTransformation.GetParameters

           OUTPUTS
            dx                  : double*
            dy                  : double*
            dz                  : double*
            rx                  : double*
            ry                  : double*
            rz                  : double*
            s                   : double*'''
        return super(IPositionVectorTransformation, self).GetParameters()
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(IPositionVectorTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(IPositionVectorTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(IPositionVectorTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(IPositionVectorTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IPositionVectorTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IPositionVectorTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IPositionVectorTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IPositionVectorTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IPositionVectorTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IPositionVectorTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IPositionVectorTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IPositionVectorTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)

class ICoordinateFrameTransformation(_esriGeometry.ICoordinateFrameTransformation):
    _IID = uuid.UUID('0cdf92b2-c2a0-11d2-bd08-0000f875bcce')

    def __init__(self, *args, **kw):
        super(ICoordinateFrameTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutParameters(self, dx, dy, dz, rx, ry, rz, s):
        '''Method ICoordinateFrameTransformation.PutParameters

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double
            rx                  : double
            ry                  : double
            rz                  : double
            s                   : double'''
        return super(ICoordinateFrameTransformation, self).PutParameters(dx, dy, dz, rx, ry, rz, s)
    def GetParameters(self):
        '''Method ICoordinateFrameTransformation.GetParameters

           OUTPUTS
            dx                  : double*
            dy                  : double*
            dz                  : double*
            rx                  : double*
            ry                  : double*
            rz                  : double*
            s                   : double*'''
        return super(ICoordinateFrameTransformation, self).GetParameters()
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(ICoordinateFrameTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(ICoordinateFrameTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(ICoordinateFrameTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(ICoordinateFrameTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(ICoordinateFrameTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(ICoordinateFrameTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(ICoordinateFrameTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(ICoordinateFrameTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(ICoordinateFrameTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(ICoordinateFrameTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(ICoordinateFrameTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(ICoordinateFrameTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)

class IMolodenskyTransformation(_esriGeometry.IMolodenskyTransformation):
    _IID = uuid.UUID('0cdf92b3-c2a0-11d2-bd08-0000f875bcce')

    def __init__(self, *args, **kw):
        super(IMolodenskyTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetParameters(self):
        '''Method IMolodenskyTransformation.GetParameters

           OUTPUTS
            dx                  : double*
            dy                  : double*
            dz                  : double*'''
        return super(IMolodenskyTransformation, self).GetParameters()
    def PutParameters(self, dx, dy, dz):
        '''Method IMolodenskyTransformation.PutParameters

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double'''
        return super(IMolodenskyTransformation, self).PutParameters(dx, dy, dz)
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(IMolodenskyTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(IMolodenskyTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(IMolodenskyTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(IMolodenskyTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IMolodenskyTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IMolodenskyTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IMolodenskyTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IMolodenskyTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IMolodenskyTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IMolodenskyTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IMolodenskyTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IMolodenskyTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)

class IGridTransformation(_esriGeometry.IGridTransformation):
    _IID = uuid.UUID('b807845e-da8a-11d3-9f60-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IGridTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_GridDatasetName(self, datasetName):
        '''Method IGridTransformation.put_GridDatasetName

           INPUT
            datasetName         : BSTR'''
        return super(IGridTransformation, self).put_GridDatasetName(datasetName)
    def get_GridDatasetName(self):
        '''Method IGridTransformation.get_GridDatasetName

           OUTPUT
            datasetName         : BSTR*'''
        return super(IGridTransformation, self).get_GridDatasetName()
    def Load(self):
        '''Method IGridTransformation.Load'''
        return super(IGridTransformation, self).Load()
    def Unload(self):
        '''Method IGridTransformation.Unload'''
        return super(IGridTransformation, self).Unload()
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(IGridTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(IGridTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(IGridTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(IGridTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IGridTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IGridTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IGridTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IGridTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IGridTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IGridTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IGridTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IGridTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    GridDatasetName = property(get_GridDatasetName, put_GridDatasetName, None)
    Name = property(get_Name, put_Name, None)

class ILongitudeRotationTransformation(_esriGeometry.ILongitudeRotationTransformation):
    _IID = uuid.UUID('64c7c780-da8b-11d3-9f60-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ILongitudeRotationTransformation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Rotation(self):
        '''Method ILongitudeRotationTransformation.get_Rotation

           OUTPUT
            rz                  : double*'''
        return super(ILongitudeRotationTransformation, self).get_Rotation()
    def get_Name(self):
        '''Method IGeoTransformation.get_Name (from IGeoTransformation)

           OUTPUT
            Name                : BSTR*'''
        return super(ILongitudeRotationTransformation, self).get_Name()
    def put_Name(self, Name):
        '''Method IGeoTransformation.put_Name (from IGeoTransformation)

           INPUT
            Name                : BSTR'''
        return super(ILongitudeRotationTransformation, self).put_Name(Name)
    def GetSpatialReferences(self):
        '''Method IGeoTransformation.GetSpatialReferences (from IGeoTransformation)

           OUTPUTS
            from                : ISpatialReference**
            to                  : ISpatialReference**'''
        return super(ILongitudeRotationTransformation, self).GetSpatialReferences()
    def PutSpatialReferences(self, From, to):
        '''Method IGeoTransformation.PutSpatialReferences (from IGeoTransformation)

           INPUTS
            from                : ISpatialReference*
            to                  : ISpatialReference*'''
        return super(ILongitudeRotationTransformation, self).PutSpatialReferences(From, to)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(ILongitudeRotationTransformation, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(ILongitudeRotationTransformation, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(ILongitudeRotationTransformation, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(ILongitudeRotationTransformation, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(ILongitudeRotationTransformation, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(ILongitudeRotationTransformation, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(ILongitudeRotationTransformation, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(ILongitudeRotationTransformation, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    Name = property(get_Name, put_Name, None)
    Rotation = property(get_Rotation, None, None)

class ICompareCoordinateSystems(_esriGeometry.ICompareCoordinateSystems):
    _IID = uuid.UUID('75f37757-465c-43b1-afe8-8a4fdcb02839')
    def IsEqualNoVCS(self, other):
        '''Method ICompareCoordinateSystems.IsEqualNoVCS

           INPUT
            other               : ISpatialReference*

           OUTPUT
            equal               : VARIANT_BOOL*'''
        return super(ICompareCoordinateSystems, self).IsEqualNoVCS(other)
    def IsEqualLeftLongitude(self, other, compareVCS):
        '''Method ICompareCoordinateSystems.IsEqualLeftLongitude

           INPUTS
            other               : ISpatialReference*
            compareVCS          : VARIANT_BOOL

           OUTPUT
            equal               : VARIANT_BOOL*'''
        return super(ICompareCoordinateSystems, self).IsEqualLeftLongitude(other, compareVCS)

class ISpatialReferenceResolution(_esriGeometry.ISpatialReferenceResolution):
    _IID = uuid.UUID('833ac5b9-20e3-4896-8d55-770f4e90a2e4')

    def __init__(self, *args, **kw):
        super(ISpatialReferenceResolution, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ConstructFromHorizon(self):
        '''Method ISpatialReferenceResolution.ConstructFromHorizon'''
        return super(ISpatialReferenceResolution, self).ConstructFromHorizon()
    def put_XYResolution(self, bStandardUnits, XYResolution):
        '''Method ISpatialReferenceResolution.put_XYResolution

           INPUTS
            bStandardUnits      : VARIANT_BOOL
            XYResolution        : double'''
        return super(ISpatialReferenceResolution, self).put_XYResolution(bStandardUnits, XYResolution)
    def get_XYResolution(self, bStandardUnits):
        '''Method ISpatialReferenceResolution.get_XYResolution

           INPUT
            bStandardUnits      : VARIANT_BOOL

           OUTPUT
            XYResolution        : double*'''
        return super(ISpatialReferenceResolution, self).get_XYResolution(bStandardUnits)
    def SetDefaultXYResolution(self):
        '''Method ISpatialReferenceResolution.SetDefaultXYResolution'''
        return super(ISpatialReferenceResolution, self).SetDefaultXYResolution()
    def put_ZResolution(self, bStandardUnits, ZResolution):
        '''Method ISpatialReferenceResolution.put_ZResolution

           INPUTS
            bStandardUnits      : VARIANT_BOOL
            ZResolution         : double'''
        return super(ISpatialReferenceResolution, self).put_ZResolution(bStandardUnits, ZResolution)
    def get_ZResolution(self, bStandardUnits):
        '''Method ISpatialReferenceResolution.get_ZResolution

           INPUT
            bStandardUnits      : VARIANT_BOOL

           OUTPUT
            ZResolution         : double*'''
        return super(ISpatialReferenceResolution, self).get_ZResolution(bStandardUnits)
    def SetDefaultZResolution(self):
        '''Method ISpatialReferenceResolution.SetDefaultZResolution'''
        return super(ISpatialReferenceResolution, self).SetDefaultZResolution()
    def put_MResolution(self, interval):
        '''Method ISpatialReferenceResolution.put_MResolution

           INPUT
            interval            : double'''
        return super(ISpatialReferenceResolution, self).put_MResolution(interval)
    def get_MResolution(self):
        '''Method ISpatialReferenceResolution.get_MResolution

           OUTPUT
            interval            : double*'''
        return super(ISpatialReferenceResolution, self).get_MResolution()
    def SetDefaultMResolution(self):
        '''Method ISpatialReferenceResolution.SetDefaultMResolution'''
        return super(ISpatialReferenceResolution, self).SetDefaultMResolution()
    MResolution = property(get_MResolution, put_MResolution, None)
    XYResolution = property(None, put_XYResolution, None)
    ZResolution = property(None, put_ZResolution, None)
    XYResolution = IndexProperty(get_XYResolution, None)
    ZResolution = IndexProperty(get_ZResolution, None)

class ISpatialReferenceTolerance(_esriGeometry.ISpatialReferenceTolerance):
    _IID = uuid.UUID('587dc301-2766-4597-a3e5-9fa152329eb8')

    def __init__(self, *args, **kw):
        super(ISpatialReferenceTolerance, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SetDefaultXYTolerance(self):
        '''Method ISpatialReferenceTolerance.SetDefaultXYTolerance'''
        return super(ISpatialReferenceTolerance, self).SetDefaultXYTolerance()
    def SetMinimumXYTolerance(self):
        '''Method ISpatialReferenceTolerance.SetMinimumXYTolerance'''
        return super(ISpatialReferenceTolerance, self).SetMinimumXYTolerance()
    def get_XYTolerance(self):
        '''Method ISpatialReferenceTolerance.get_XYTolerance

           OUTPUT
            XYTolerance         : double*'''
        return super(ISpatialReferenceTolerance, self).get_XYTolerance()
    def put_XYTolerance(self, XYTolerance):
        '''Method ISpatialReferenceTolerance.put_XYTolerance

           INPUT
            XYTolerance         : double'''
        return super(ISpatialReferenceTolerance, self).put_XYTolerance(XYTolerance)
    def SetDefaultZTolerance(self):
        '''Method ISpatialReferenceTolerance.SetDefaultZTolerance'''
        return super(ISpatialReferenceTolerance, self).SetDefaultZTolerance()
    def SetMinimumZTolerance(self):
        '''Method ISpatialReferenceTolerance.SetMinimumZTolerance'''
        return super(ISpatialReferenceTolerance, self).SetMinimumZTolerance()
    def get_ZTolerance(self):
        '''Method ISpatialReferenceTolerance.get_ZTolerance

           OUTPUT
            ZTolerance          : double*'''
        return super(ISpatialReferenceTolerance, self).get_ZTolerance()
    def put_ZTolerance(self, ZTolerance):
        '''Method ISpatialReferenceTolerance.put_ZTolerance

           INPUT
            ZTolerance          : double'''
        return super(ISpatialReferenceTolerance, self).put_ZTolerance(ZTolerance)
    def SetDefaultMTolerance(self):
        '''Method ISpatialReferenceTolerance.SetDefaultMTolerance'''
        return super(ISpatialReferenceTolerance, self).SetDefaultMTolerance()
    def SetMinimumMTolerance(self):
        '''Method ISpatialReferenceTolerance.SetMinimumMTolerance'''
        return super(ISpatialReferenceTolerance, self).SetMinimumMTolerance()
    def get_MTolerance(self):
        '''Method ISpatialReferenceTolerance.get_MTolerance

           OUTPUT
            MTolerance          : double*'''
        return super(ISpatialReferenceTolerance, self).get_MTolerance()
    def put_MTolerance(self, MTolerance):
        '''Method ISpatialReferenceTolerance.put_MTolerance

           INPUT
            MTolerance          : double'''
        return super(ISpatialReferenceTolerance, self).put_MTolerance(MTolerance)
    def get_XYToleranceValid(self):
        '''Method ISpatialReferenceTolerance.get_XYToleranceValid

           OUTPUT
            isValid             : esriSRToleranceEnum*'''
        return super(ISpatialReferenceTolerance, self).get_XYToleranceValid()
    def get_ZToleranceValid(self):
        '''Method ISpatialReferenceTolerance.get_ZToleranceValid

           OUTPUT
            isValid             : esriSRToleranceEnum*'''
        return super(ISpatialReferenceTolerance, self).get_ZToleranceValid()
    def get_MToleranceValid(self):
        '''Method ISpatialReferenceTolerance.get_MToleranceValid

           OUTPUT
            isValid             : esriSRToleranceEnum*'''
        return super(ISpatialReferenceTolerance, self).get_MToleranceValid()
    def IsXYToleranceEqual(self, otherSR):
        '''Method ISpatialReferenceTolerance.IsXYToleranceEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsXYToleranceEqual  : VARIANT_BOOL*'''
        return super(ISpatialReferenceTolerance, self).IsXYToleranceEqual(otherSR)
    def IsMToleranceEqual(self, otherSR):
        '''Method ISpatialReferenceTolerance.IsMToleranceEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsMToleranceEqual   : VARIANT_BOOL*'''
        return super(ISpatialReferenceTolerance, self).IsMToleranceEqual(otherSR)
    def IsZToleranceEqual(self, otherSR):
        '''Method ISpatialReferenceTolerance.IsZToleranceEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsZToleranceEqual   : VARIANT_BOOL*'''
        return super(ISpatialReferenceTolerance, self).IsZToleranceEqual(otherSR)
    MTolerance = property(get_MTolerance, put_MTolerance, None)
    MToleranceValid = property(get_MToleranceValid, None, None)
    XYTolerance = property(get_XYTolerance, put_XYTolerance, None)
    XYToleranceValid = property(get_XYToleranceValid, None, None)
    ZTolerance = property(get_ZTolerance, put_ZTolerance, None)
    ZToleranceValid = property(get_ZToleranceValid, None, None)

class ISpatialReference2GEN(_esriGeometry.ISpatialReference2GEN):
    _IID = uuid.UUID('3b563182-cf62-4d40-9157-5022f7ae4561')

    def __init__(self, *args, **kw):
        super(ISpatialReference2GEN, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method ISpatialReference2GEN.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(ISpatialReference2GEN, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReference2GEN.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(ISpatialReference2GEN, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReference2GEN.get_Abbreviation

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(ISpatialReference2GEN, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReference2GEN.get_Remarks

           OUTPUT
            Remarks             : BSTR*'''
        return super(ISpatialReference2GEN, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReference2GEN.get_FactoryCode

           OUTPUT
            Code                : long*'''
        return super(ISpatialReference2GEN, self).get_FactoryCode()
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference2GEN.get_SpatialReferenceImpl

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(ISpatialReference2GEN, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference2GEN.get_PrecisionImpl

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(ISpatialReference2GEN, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference2GEN.get_PrecisionExImpl

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(ISpatialReference2GEN, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference2GEN.HasXYPrecision

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(ISpatialReference2GEN, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference2GEN.HasZPrecision

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference2GEN, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference2GEN.HasMPrecision

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference2GEN, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2GEN.IsPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(ISpatialReference2GEN, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference2GEN.SetFalseOriginAndUnits

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(ISpatialReference2GEN, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference2GEN.SetZFalseOriginAndUnits

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(ISpatialReference2GEN, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference2GEN.SetMFalseOriginAndUnits

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(ISpatialReference2GEN, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference2GEN.GetFalseOriginAndUnits

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(ISpatialReference2GEN, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference2GEN.GetZFalseOriginAndUnits

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(ISpatialReference2GEN, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference2GEN.GetMFalseOriginAndUnits

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(ISpatialReference2GEN, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference2GEN.GetDomain

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(ISpatialReference2GEN, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference2GEN.SetDomain

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(ISpatialReference2GEN, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference2GEN.GetZDomain

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(ISpatialReference2GEN, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference2GEN.SetZDomain

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(ISpatialReference2GEN, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference2GEN.GetMDomain

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(ISpatialReference2GEN, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference2GEN.SetMDomain

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(ISpatialReference2GEN, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference2GEN.get_ZCoordinateUnit

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(ISpatialReference2GEN, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference2GEN.put_ZCoordinateUnit

           INPUT
            zunit               : ILinearUnit*'''
        return super(ISpatialReference2GEN, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference2GEN.Changed'''
        return super(ISpatialReference2GEN, self).Changed()
    def IsXYPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2GEN.IsXYPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsXYPrecisionEqual  : VARIANT_BOOL*'''
        return super(ISpatialReference2GEN, self).IsXYPrecisionEqual(otherSR)
    def IsMPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2GEN.IsMPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsMPrecisionEqual   : VARIANT_BOOL*'''
        return super(ISpatialReference2GEN, self).IsMPrecisionEqual(otherSR)
    def IsZPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2GEN.IsZPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsZPrecisionEqual   : VARIANT_BOOL*'''
        return super(ISpatialReference2GEN, self).IsZPrecisionEqual(otherSR)
    def ApplyXYPrecision(self, Points):
        '''Method ISpatialReference2GEN.ApplyXYPrecision

           INPUT
            Points              : SAFEARRAY**'''
        return super(ISpatialReference2GEN, self).ApplyXYPrecision(Points)
    def ApplyPrecision(self, Points, ms, zs):
        '''Method ISpatialReference2GEN.ApplyPrecision

           INPUTS
            Points              : SAFEARRAY**
            ms                  : SAFEARRAY**
            zs                  : SAFEARRAY**'''
        return super(ISpatialReference2GEN, self).ApplyPrecision(Points, ms, zs)
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Remarks = property(get_Remarks, None, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)

class IAngularUnitEdit(_esriGeometry.IAngularUnitEdit):
    _IID = uuid.UUID('3b219f22-d3ff-11d1-bc9b-0000f875bcce')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, RadiansPerUnit):
        '''Method IAngularUnitEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            RadiansPerUnit      : double*'''
        return super(IAngularUnitEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, RadiansPerUnit)
    def Define(self, Name, Alias, Abbreviation, Remarks, RadiansPerUnit):
        '''Method IAngularUnitEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            RadiansPerUnit      : VARIANT*'''
        return super(IAngularUnitEdit, self).Define(Name, Alias, Abbreviation, Remarks, RadiansPerUnit)

class ILinearUnitEdit(_esriGeometry.ILinearUnitEdit):
    _IID = uuid.UUID('3b219f23-d3ff-11d1-bc9b-0000f875bcce')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, MetersPerUnit):
        '''Method ILinearUnitEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            MetersPerUnit       : double*'''
        return super(ILinearUnitEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, MetersPerUnit)
    def Define(self, Name, Alias, Abbreviation, Remarks, MetersPerUnit):
        '''Method ILinearUnitEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            MetersPerUnit       : VARIANT*'''
        return super(ILinearUnitEdit, self).Define(Name, Alias, Abbreviation, Remarks, MetersPerUnit)

class ISpheroidEdit(_esriGeometry.ISpheroidEdit):
    _IID = uuid.UUID('3b219f20-d3ff-11d1-bc9b-0000f875bcce')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, majorAxis, Flattening):
        '''Method ISpheroidEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            majorAxis           : double*
            Flattening          : double*'''
        return super(ISpheroidEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, majorAxis, Flattening)
    def Define(self, Name, Alias, Abbreviation, Remarks, majorAxis, Flattening):
        '''Method ISpheroidEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            majorAxis           : VARIANT*
            Flattening          : VARIANT*'''
        return super(ISpheroidEdit, self).Define(Name, Alias, Abbreviation, Remarks, majorAxis, Flattening)

class IDatumEdit(_esriGeometry.IDatumEdit):
    _IID = uuid.UUID('3b219f21-d3ff-11d1-bc9b-0000f875bcce')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, Spheroid):
        '''Method IDatumEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            Spheroid            : ISpheroid*'''
        return super(IDatumEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, Spheroid)
    def Define(self, Name, Alias, Abbreviation, Remarks, Spheroid):
        '''Method IDatumEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            Spheroid            : VARIANT*'''
        return super(IDatumEdit, self).Define(Name, Alias, Abbreviation, Remarks, Spheroid)

class IVerticalDatumEdit(_esriGeometry.IVerticalDatumEdit):
    _IID = uuid.UUID('7e887f04-3f5a-4d26-ac12-41b33cf253bb')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks):
        '''Method IVerticalDatumEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR'''
        return super(IVerticalDatumEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks)
    def Define(self, Name, Alias, Abbreviation, Remarks):
        '''Method IVerticalDatumEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*'''
        return super(IVerticalDatumEdit, self).Define(Name, Alias, Abbreviation, Remarks)

class IPrimeMeridianEdit(_esriGeometry.IPrimeMeridianEdit):
    _IID = uuid.UUID('228d7221-d335-11d1-bc9b-0000f875bcce')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, Longitude):
        '''Method IPrimeMeridianEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            Longitude           : double*'''
        return super(IPrimeMeridianEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, Longitude)
    def Define(self, Name, Alias, Abbreviation, Remarks, Longitude):
        '''Method IPrimeMeridianEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            Longitude           : VARIANT*'''
        return super(IPrimeMeridianEdit, self).Define(Name, Alias, Abbreviation, Remarks, Longitude)

class IGeographicCoordinateSystem2(_esriGeometry.IGeographicCoordinateSystem2):
    _IID = uuid.UUID('f78b2a38-89c4-11d4-9f9f-00c04f6bc8e8')

    def __init__(self, *args, **kw):
        super(IGeographicCoordinateSystem2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetGCSParams(self):
        '''Method IGeographicCoordinateSystem2.GetGCSParams

           OUTPUTS
            p_180               : double*
            pDelta              : double*'''
        return super(IGeographicCoordinateSystem2, self).GetGCSParams()
    def GetHorizon(self):
        '''Method IGeographicCoordinateSystem2.GetHorizon

           OUTPUT
            horizonEnvelope     : WKSEnvelope*'''
        return super(IGeographicCoordinateSystem2, self).GetHorizon()
    def get_AngularConversionFactor(self, pDstGCS):
        '''Method IGeographicCoordinateSystem2.get_AngularConversionFactor

           INPUT
            pDstGCS             : IGeographicCoordinateSystem2*

           OUTPUT
            pFactor             : double*'''
        return super(IGeographicCoordinateSystem2, self).get_AngularConversionFactor(pDstGCS)
    def get_LeftLongitude(self, inDegrees):
        '''Method IGeographicCoordinateSystem2.get_LeftLongitude

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            LeftLongitude       : double*'''
        return super(IGeographicCoordinateSystem2, self).get_LeftLongitude(inDegrees)
    def put_LeftLongitude(self, inDegrees, LeftLongitude):
        '''Method IGeographicCoordinateSystem2.put_LeftLongitude

           INPUTS
            inDegrees           : VARIANT_BOOL
            LeftLongitude       : double'''
        return super(IGeographicCoordinateSystem2, self).put_LeftLongitude(inDegrees, LeftLongitude)
    def get_RightLongitude(self, inDegrees):
        '''Method IGeographicCoordinateSystem2.get_RightLongitude

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            RightLongitude      : double*'''
        return super(IGeographicCoordinateSystem2, self).get_RightLongitude(inDegrees)
    def put_RightLongitude(self, inDegrees, RightLongitude):
        '''Method IGeographicCoordinateSystem2.put_RightLongitude

           INPUTS
            inDegrees           : VARIANT_BOOL
            RightLongitude      : double'''
        return super(IGeographicCoordinateSystem2, self).put_RightLongitude(inDegrees, RightLongitude)
    def put_ExtentHint(self, _arg1):
        '''Method IGeographicCoordinateSystem2.put_ExtentHint

           INPUT
            _arg1               : WKSEnvelope*'''
        return super(IGeographicCoordinateSystem2, self).put_ExtentHint(_arg1)
    def get_Usage(self):
        '''Method IGeographicCoordinateSystem.get_Usage (from IGeographicCoordinateSystem)

           OUTPUT
            Usage               : BSTR*'''
        return super(IGeographicCoordinateSystem2, self).get_Usage()
    def get_Datum(self):
        '''Method IGeographicCoordinateSystem.get_Datum (from IGeographicCoordinateSystem)

           OUTPUT
            Datum               : IDatum**'''
        return super(IGeographicCoordinateSystem2, self).get_Datum()
    def get_PrimeMeridian(self):
        '''Method IGeographicCoordinateSystem.get_PrimeMeridian (from IGeographicCoordinateSystem)

           OUTPUT
            prime               : IPrimeMeridian**'''
        return super(IGeographicCoordinateSystem2, self).get_PrimeMeridian()
    def get_CoordinateUnit(self):
        '''Method IGeographicCoordinateSystem.get_CoordinateUnit (from IGeographicCoordinateSystem)

           OUTPUT
            CoordinateUnit      : IAngularUnit**'''
        return super(IGeographicCoordinateSystem2, self).get_CoordinateUnit()
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IGeographicCoordinateSystem2, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IGeographicCoordinateSystem2, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IGeographicCoordinateSystem2, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem2, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem2, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem2, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IGeographicCoordinateSystem2, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IGeographicCoordinateSystem2, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IGeographicCoordinateSystem2, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IGeographicCoordinateSystem2, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IGeographicCoordinateSystem2, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IGeographicCoordinateSystem2, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IGeographicCoordinateSystem2, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IGeographicCoordinateSystem2, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IGeographicCoordinateSystem2, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IGeographicCoordinateSystem2, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IGeographicCoordinateSystem2, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IGeographicCoordinateSystem2, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IGeographicCoordinateSystem2, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IGeographicCoordinateSystem2, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(IGeographicCoordinateSystem2, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(IGeographicCoordinateSystem2, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IGeographicCoordinateSystem2, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IGeographicCoordinateSystem2, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IGeographicCoordinateSystem2, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IGeographicCoordinateSystem2, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IGeographicCoordinateSystem2, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    Datum = property(get_Datum, None, None)
    ExtentHint = property(None, put_ExtentHint, None)
    FactoryCode = property(get_FactoryCode, None, None)
    LeftLongitude = property(None, put_LeftLongitude, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    PrimeMeridian = property(get_PrimeMeridian, None, None)
    Remarks = property(get_Remarks, None, None)
    RightLongitude = property(None, put_RightLongitude, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    Usage = property(get_Usage, None, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)
    AngularConversionFactor = IndexProperty(get_AngularConversionFactor, None)
    LeftLongitude = IndexProperty(get_LeftLongitude, None)
    RightLongitude = IndexProperty(get_RightLongitude, None)

class IGeographicCoordinateSystemEdit(_esriGeometry.IGeographicCoordinateSystemEdit):
    _IID = uuid.UUID('3b219f24-d3ff-11d1-bc9b-0000f875bcce')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, useage, Datum, PrimeMeridian, geographicUnit):
        '''Method IGeographicCoordinateSystemEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            useage              : BSTR
            Datum               : IDatum*
            PrimeMeridian       : IPrimeMeridian*
            geographicUnit      : IAngularUnit*'''
        return super(IGeographicCoordinateSystemEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, useage, Datum, PrimeMeridian, geographicUnit)
    def Define(self, Name, Alias, Abbreviation, Remarks, useage, Datum, PrimeMeridian, geographicUnit):
        '''Method IGeographicCoordinateSystemEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            useage              : VARIANT*
            Datum               : VARIANT*
            PrimeMeridian       : VARIANT*
            geographicUnit      : VARIANT*'''
        return super(IGeographicCoordinateSystemEdit, self).Define(Name, Alias, Abbreviation, Remarks, useage, Datum, PrimeMeridian, geographicUnit)

class IParameterEdit(_esriGeometry.IParameterEdit):
    _IID = uuid.UUID('06b20118-3cfb-4e1e-b984-d94b0fe262af')

    def __init__(self, *args, **kw):
        super(IParameterEdit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, _arg1):
        '''Method IParameterEdit.put_Name

           INPUT
            _arg1               : BSTR'''
        return super(IParameterEdit, self).put_Name(_arg1)
    def put_Index(self, _arg1):
        '''Method IParameterEdit.put_Index

           INPUT
            _arg1               : long'''
        return super(IParameterEdit, self).put_Index(_arg1)
    def put_Value(self, Value):
        '''Method IParameter.put_Value (from IParameter)

           INPUT
            Value               : double'''
        return super(IParameterEdit, self).put_Value(Value)
    def get_Value(self):
        '''Method IParameter.get_Value (from IParameter)

           OUTPUT
            Value               : double*'''
        return super(IParameterEdit, self).get_Value()
    def get_Index(self):
        '''Method IParameter.get_Index (from IParameter)

           OUTPUT
            i                   : long*'''
        return super(IParameterEdit, self).get_Index()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IParameterEdit, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IParameterEdit, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IParameterEdit, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IParameterEdit, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IParameterEdit, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Index = property(get_Index, put_Index, None)
    Name = property(get_Name, put_Name, None)
    Remarks = property(get_Remarks, None, None)
    Value = property(get_Value, put_Value, None)

class IProjectionGEN(_esriGeometry.IProjectionGEN):
    _IID = uuid.UUID('b6bb6277-7c88-4c70-9e36-ceb3e00fd190')
    def get_Usage(self):
        '''Method IProjectionGEN.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjectionGEN, self).get_Usage()
    def get_Classification(self):
        '''Method IProjectionGEN.get_Classification

           OUTPUT
            Classification      : BSTR*'''
        return super(IProjectionGEN, self).get_Classification()
    def GetDefaultParameters(self):
        '''Method IProjectionGEN.GetDefaultParameters

           OUTPUT
            parameters          : SAFEARRAY**'''
        return super(IProjectionGEN, self).GetDefaultParameters()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IProjectionGEN, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjectionGEN, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjectionGEN, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjectionGEN, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IProjectionGEN, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Classification = property(get_Classification, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    Remarks = property(get_Remarks, None, None)
    Usage = property(get_Usage, None, None)

class IESRISpatialReference(_esriGeometry.IESRISpatialReference):
    _IID = uuid.UUID('e78f2cd0-c9b2-11d1-bc93-0000f875bcce')
    def get_ESRISpatialReferenceSize(self):
        '''Method IESRISpatialReference.get_ESRISpatialReferenceSize

           OUTPUT
            cBytes              : long*'''
        return super(IESRISpatialReference, self).get_ESRISpatialReferenceSize()
    def ImportFromESRISpatialReference(self, str):
        '''Method IESRISpatialReference.ImportFromESRISpatialReference

           INPUT
            str                 : BSTR

           OUTPUT
            cBytesRead          : long*'''
        return super(IESRISpatialReference, self).ImportFromESRISpatialReference(str)
    def ExportToESRISpatialReference(self):
        '''Method IESRISpatialReference.ExportToESRISpatialReference

           OUTPUTS
            str                 : BSTR
            cBytesWrote         : long*'''
        return super(IESRISpatialReference, self).ExportToESRISpatialReference()
    ESRISpatialReferenceSize = property(get_ESRISpatialReferenceSize, None, None)

class IESRISpatialReferenceGEN(_esriGeometry.IESRISpatialReferenceGEN):
    _IID = uuid.UUID('f90e304c-a0f7-4a7d-9f62-25fd2a5c96af')
    def get_ESRISpatialReferenceSize(self):
        '''Method IESRISpatialReferenceGEN.get_ESRISpatialReferenceSize

           OUTPUT
            cBytes              : long*'''
        return super(IESRISpatialReferenceGEN, self).get_ESRISpatialReferenceSize()
    def ImportFromESRISpatialReference(self, str):
        '''Method IESRISpatialReferenceGEN.ImportFromESRISpatialReference

           INPUT
            str                 : BSTR

           OUTPUT
            cBytesRead          : long*'''
        return super(IESRISpatialReferenceGEN, self).ImportFromESRISpatialReference(str)
    def ExportToESRISpatialReference(self):
        '''Method IESRISpatialReferenceGEN.ExportToESRISpatialReference

           OUTPUTS
            str                 : BSTR*
            cBytesWrote         : long*'''
        return super(IESRISpatialReferenceGEN, self).ExportToESRISpatialReference()
    ESRISpatialReferenceSize = property(get_ESRISpatialReferenceSize, None, None)

class IESRISpatialReferenceGEN2(_esriGeometry.IESRISpatialReferenceGEN2):
    _IID = uuid.UUID('3f9863b9-5477-4757-ac6f-63204de301ee')
    def get_ESRISpatialReferenceSize(self):
        '''Method IESRISpatialReferenceGEN2.get_ESRISpatialReferenceSize

           OUTPUT
            cBytes              : long*'''
        return super(IESRISpatialReferenceGEN2, self).get_ESRISpatialReferenceSize()
    def ImportFromESRISpatialReference(self, str):
        '''Method IESRISpatialReferenceGEN2.ImportFromESRISpatialReference

           INPUT
            str                 : BSTR

           OUTPUT
            cBytesRead          : long*'''
        return super(IESRISpatialReferenceGEN2, self).ImportFromESRISpatialReference(str)
    def ExportToESRISpatialReference2(self):
        '''Method IESRISpatialReferenceGEN2.ExportToESRISpatialReference2

           OUTPUTS
            str                 : BSTR*
            cBytesWrote         : long*'''
        return super(IESRISpatialReferenceGEN2, self).ExportToESRISpatialReference2()
    ESRISpatialReferenceSize = property(get_ESRISpatialReferenceSize, None, None)

class IPRJSpatialReference(_esriGeometry.IPRJSpatialReference):
    _IID = uuid.UUID('be52f1b6-7bae-4bab-9e92-aad9dd9331de')
    def get_PRJSpatialReferenceSize(self):
        '''Method IPRJSpatialReference.get_PRJSpatialReferenceSize

           OUTPUT
            cBytes              : long*'''
        return super(IPRJSpatialReference, self).get_PRJSpatialReferenceSize()
    def ImportSpatialReferenceFromPRJ(self, str):
        '''Method IPRJSpatialReference.ImportSpatialReferenceFromPRJ

           INPUT
            str                 : BSTR

           OUTPUT
            cBytesRead          : long*'''
        return super(IPRJSpatialReference, self).ImportSpatialReferenceFromPRJ(str)
    def ExportSpatialReferenceToPRJ(self):
        '''Method IPRJSpatialReference.ExportSpatialReferenceToPRJ

           OUTPUTS
            str                 : BSTR
            cBytesWrote         : long*'''
        return super(IPRJSpatialReference, self).ExportSpatialReferenceToPRJ()
    PRJSpatialReferenceSize = property(get_PRJSpatialReferenceSize, None, None)

class IPRJSpatialReferenceGEN(_esriGeometry.IPRJSpatialReferenceGEN):
    _IID = uuid.UUID('f0e1978b-ab3d-4f82-a374-c5533b179b17')
    def get_PRJSpatialReferenceSize(self):
        '''Method IPRJSpatialReferenceGEN.get_PRJSpatialReferenceSize

           OUTPUT
            cBytes              : long*'''
        return super(IPRJSpatialReferenceGEN, self).get_PRJSpatialReferenceSize()
    def ImportSpatialReferenceFromPRJ(self, str):
        '''Method IPRJSpatialReferenceGEN.ImportSpatialReferenceFromPRJ

           INPUT
            str                 : BSTR

           OUTPUT
            cBytesRead          : long*'''
        return super(IPRJSpatialReferenceGEN, self).ImportSpatialReferenceFromPRJ(str)
    def ExportSpatialReferenceToPRJ(self):
        '''Method IPRJSpatialReferenceGEN.ExportSpatialReferenceToPRJ

           OUTPUTS
            str                 : BSTR*
            cBytesWrote         : long*'''
        return super(IPRJSpatialReferenceGEN, self).ExportSpatialReferenceToPRJ()
    PRJSpatialReferenceSize = property(get_PRJSpatialReferenceSize, None, None)

class ISRPersistStream(_esriGeometry.ISRPersistStream):
    _IID = uuid.UUID('e88c7db0-9e84-11d2-bd00-0000f875bcce')
    def GetPrecisionSizeMax(self):
        '''Method ISRPersistStream.GetPrecisionSizeMax

           OUTPUT
            byteCount           : long*'''
        return super(ISRPersistStream, self).GetPrecisionSizeMax()
    def LoadPrecision(self, pStream):
        '''Method ISRPersistStream.LoadPrecision

           INPUT
            pStream             : IStream*'''
        return super(ISRPersistStream, self).LoadPrecision(pStream)
    def SavePrecision(self, pStream, fClearDirty):
        '''Method ISRPersistStream.SavePrecision

           INPUTS
            pStream             : IStream*
            fClearDirty         : long'''
        return super(ISRPersistStream, self).SavePrecision(pStream, fClearDirty)

class ISpatialReferenceSingletonManager(_esriGeometry.ISpatialReferenceSingletonManager):
    _IID = uuid.UUID('58ab2690-5981-11d2-bcda-0000f875bcce')
    def CreateOwnedCS(self):
        '''Method ISpatialReferenceSingletonManager.CreateOwnedCS

           OUTPUT
            ppInOutCoordSys     : esriSpatialReferenceImplHandle*'''
        return super(ISpatialReferenceSingletonManager, self).CreateOwnedCS()
    def CommitIdentity(self):
        '''Method ISpatialReferenceSingletonManager.CommitIdentity

           OUTPUT
            ppInOutCoordSys     : esriSpatialReferenceImplHandle*'''
        return super(ISpatialReferenceSingletonManager, self).CommitIdentity()
    def FindFactoryCS(self, factoryCSCode):
        '''Method ISpatialReferenceSingletonManager.FindFactoryCS

           INPUT
            factoryCSCode       : long

           OUTPUT
            ppOutCoordSys       : esriSpatialReferenceImplHandle*'''
        return super(ISpatialReferenceSingletonManager, self).FindFactoryCS(factoryCSCode)
    def ReleaseCoordSys(self, pInCoordSys):
        '''Method ISpatialReferenceSingletonManager.ReleaseCoordSys

           INPUT
            pInCoordSys         : esriSpatialReferenceImplHandle'''
        return super(ISpatialReferenceSingletonManager, self).ReleaseCoordSys(pInCoordSys)

class ISpatialReferenceFactory2(_esriGeometry.ISpatialReferenceFactory2):
    _IID = uuid.UUID('1f050200-da7f-11d3-9f60-00c04f6bdd7f')
    def CreatePredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.CreatePredefinedGeographicTransformations

           OUTPUT
            geotransformations  : ISet**'''
        return super(ISpatialReferenceFactory2, self).CreatePredefinedGeographicTransformations()
    def CreateSpatialReference(self, srID):
        '''Method ISpatialReferenceFactory2.CreateSpatialReference

           INPUT
            srID                : long

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(ISpatialReferenceFactory2, self).CreateSpatialReference(srID)
    def get_GeoTransformationDefaults(self):
        '''Method ISpatialReferenceFactory2.get_GeoTransformationDefaults

           OUTPUT
            GTDefaults          : IGeoTransformationOperationSet**'''
        return super(ISpatialReferenceFactory2, self).get_GeoTransformationDefaults()
    def GetPredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.GetPredefinedGeographicTransformations

           OUTPUT
            predefinedGTs       : ISet**'''
        return super(ISpatialReferenceFactory2, self).GetPredefinedGeographicTransformations()
    def CreateESRISpatialReference(self, spatRefInfo):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReference (from ISpatialReferenceFactory)

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReference**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory2, self).CreateESRISpatialReference(spatRefInfo)
    def CreateESRISpatialReferenceFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJ (from ISpatialReferenceFactory)

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory2, self).CreateESRISpatialReferenceFromPRJ(prj)
    def CreateESRISpatialReferenceFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJFile (from ISpatialReferenceFactory)

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory2, self).CreateESRISpatialReferenceFromPRJFile(prjFile)
    def ExportESRISpatialReferenceToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory.ExportESRISpatialReferenceToPRJFile (from ISpatialReferenceFactory)

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReference*'''
        return super(ISpatialReferenceFactory2, self).ExportESRISpatialReferenceToPRJFile(prjFile, SpatialReference)
    def CreateUnit(self, unitType):
        '''Method ISpatialReferenceFactory.CreateUnit (from ISpatialReferenceFactory)

           INPUT
            unitType            : long

           OUTPUT
            Unit                : IUnit**'''
        return super(ISpatialReferenceFactory2, self).CreateUnit(unitType)
    def CreateSpheroid(self, spheroidType):
        '''Method ISpatialReferenceFactory.CreateSpheroid (from ISpatialReferenceFactory)

           INPUT
            spheroidType        : long

           OUTPUT
            Spheroid            : ISpheroid**'''
        return super(ISpatialReferenceFactory2, self).CreateSpheroid(spheroidType)
    def CreateDatum(self, datumType):
        '''Method ISpatialReferenceFactory.CreateDatum (from ISpatialReferenceFactory)

           INPUT
            datumType           : long

           OUTPUT
            Datum               : IDatum**'''
        return super(ISpatialReferenceFactory2, self).CreateDatum(datumType)
    def CreatePrimeMeridian(self, primeMeridianType):
        '''Method ISpatialReferenceFactory.CreatePrimeMeridian (from ISpatialReferenceFactory)

           INPUT
            primeMeridianType   : long

           OUTPUT
            PrimeMeridian       : IPrimeMeridian**'''
        return super(ISpatialReferenceFactory2, self).CreatePrimeMeridian(primeMeridianType)
    def CreateProjection(self, projectionType):
        '''Method ISpatialReferenceFactory.CreateProjection (from ISpatialReferenceFactory)

           INPUT
            projectionType      : long

           OUTPUT
            Projection          : IProjection**'''
        return super(ISpatialReferenceFactory2, self).CreateProjection(projectionType)
    def CreateParameter(self, parameterType):
        '''Method ISpatialReferenceFactory.CreateParameter (from ISpatialReferenceFactory)

           INPUT
            parameterType       : long

           OUTPUT
            newParameter        : IParameter**'''
        return super(ISpatialReferenceFactory2, self).CreateParameter(parameterType)
    def CreateProjectedCoordinateSystem(self, pcsType):
        '''Method ISpatialReferenceFactory.CreateProjectedCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            pcsType             : long

           OUTPUT
            pcs                 : IProjectedCoordinateSystem**'''
        return super(ISpatialReferenceFactory2, self).CreateProjectedCoordinateSystem(pcsType)
    def CreateGeographicCoordinateSystem(self, gcsType):
        '''Method ISpatialReferenceFactory.CreateGeographicCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            gcsType             : long

           OUTPUT
            gcs                 : IGeographicCoordinateSystem**'''
        return super(ISpatialReferenceFactory2, self).CreateGeographicCoordinateSystem(gcsType)
    def CreateGeoTransformation(self, gTransformationType):
        '''Method ISpatialReferenceFactory.CreateGeoTransformation (from ISpatialReferenceFactory)

           INPUT
            gTransformationType : long

           OUTPUT
            GeoTransformation   : ITransformation**'''
        return super(ISpatialReferenceFactory2, self).CreateGeoTransformation(gTransformationType)
    def CreatePredefinedProjections(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedProjections (from ISpatialReferenceFactory)

           OUTPUT
            projections         : ISet**'''
        return super(ISpatialReferenceFactory2, self).CreatePredefinedProjections()
    def CreatePredefinedLinearUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedLinearUnits (from ISpatialReferenceFactory)

           OUTPUT
            linearUnits         : ISet**'''
        return super(ISpatialReferenceFactory2, self).CreatePredefinedLinearUnits()
    def CreatePredefinedDatums(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedDatums (from ISpatialReferenceFactory)

           OUTPUT
            datums              : ISet**'''
        return super(ISpatialReferenceFactory2, self).CreatePredefinedDatums()
    def CreatePredefinedAngularUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedAngularUnits (from ISpatialReferenceFactory)

           OUTPUT
            angularUnits        : ISet**'''
        return super(ISpatialReferenceFactory2, self).CreatePredefinedAngularUnits()
    def CreatePredefinedPrimeMeridians(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedPrimeMeridians (from ISpatialReferenceFactory)

           OUTPUT
            primeMeridians      : ISet**'''
        return super(ISpatialReferenceFactory2, self).CreatePredefinedPrimeMeridians()
    def CreatePredefinedSpheroids(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedSpheroids (from ISpatialReferenceFactory)

           OUTPUT
            spheroids           : ISet**'''
        return super(ISpatialReferenceFactory2, self).CreatePredefinedSpheroids()
    GeoTransformationDefaults = property(get_GeoTransformationDefaults, None, None)

class ISpatialReference2(_esriGeometry.ISpatialReference2):
    _IID = uuid.UUID('3267d410-f5d9-11d3-9f69-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ISpatialReference2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def IsXYPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2.IsXYPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsXYPrecisionEqual  : VARIANT_BOOL*'''
        return super(ISpatialReference2, self).IsXYPrecisionEqual(otherSR)
    def IsMPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2.IsMPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsMPrecisionEqual   : VARIANT_BOOL*'''
        return super(ISpatialReference2, self).IsMPrecisionEqual(otherSR)
    def IsZPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2.IsZPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsZPrecisionEqual   : VARIANT_BOOL*'''
        return super(ISpatialReference2, self).IsZPrecisionEqual(otherSR)
    def ApplyXYPrecision(self, cPoints, Points):
        '''Method ISpatialReference2.ApplyXYPrecision

           INPUTS
            cPoints             : long
            Points              : WKSPoint*'''
        return super(ISpatialReference2, self).ApplyXYPrecision(cPoints, Points)
    def ApplyPrecision(self, cPoints, Points, ms, zs):
        '''Method ISpatialReference2.ApplyPrecision

           INPUTS
            cPoints             : long
            Points              : WKSPoint*
            ms                  : double*
            zs                  : double*'''
        return super(ISpatialReference2, self).ApplyPrecision(cPoints, Points, ms, zs)
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(ISpatialReference2, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(ISpatialReference2, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(ISpatialReference2, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(ISpatialReference2, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference2, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference2, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(ISpatialReference2, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(ISpatialReference2, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(ISpatialReference2, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(ISpatialReference2, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(ISpatialReference2, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(ISpatialReference2, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(ISpatialReference2, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(ISpatialReference2, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(ISpatialReference2, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(ISpatialReference2, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(ISpatialReference2, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(ISpatialReference2, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(ISpatialReference2, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(ISpatialReference2, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(ISpatialReference2, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(ISpatialReference2, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(ISpatialReference2, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(ISpatialReference2, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(ISpatialReference2, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(ISpatialReference2, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(ISpatialReference2, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Remarks = property(get_Remarks, None, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)

class ISpatialReference4(_esriGeometry.ISpatialReference4):
    _IID = uuid.UUID('0ed8c73a-da12-4d3e-9e7f-5748619888cb')
    def get_ZToXYFactor(self):
        '''Method ISpatialReference4.get_ZToXYFactor

           OUTPUT
            pZFactor            : double*'''
        return super(ISpatialReference4, self).get_ZToXYFactor()
    ZToXYFactor = property(get_ZToXYFactor, None, None)

class IControlPrecision(_esriGeometry.IControlPrecision):
    _IID = uuid.UUID('ed4e18dd-ee33-11d3-9fef-00c04f6bc724')

    def __init__(self, *args, **kw):
        super(IControlPrecision, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_UsePrecision(self):
        '''Method IControlPrecision.get_UsePrecision

           OUTPUT
            UsePrecision        : VARIANT_BOOL*'''
        return super(IControlPrecision, self).get_UsePrecision()
    def put_UsePrecision(self, UsePrecision):
        '''Method IControlPrecision.put_UsePrecision

           INPUT
            UsePrecision        : VARIANT_BOOL'''
        return super(IControlPrecision, self).put_UsePrecision(UsePrecision)
    UsePrecision = property(get_UsePrecision, put_UsePrecision, None)

class IControlPrecision2(_esriGeometry.IControlPrecision2):
    _IID = uuid.UUID('a1b0d8b3-474c-4fab-808e-0a3c5c498b1b')

    def __init__(self, *args, **kw):
        super(IControlPrecision2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsHighPrecision(self):
        '''Method IControlPrecision2.get_IsHighPrecision

           OUTPUT
            IsHighPrecision     : VARIANT_BOOL*'''
        return super(IControlPrecision2, self).get_IsHighPrecision()
    def put_IsHighPrecision(self, IsHighPrecision):
        '''Method IControlPrecision2.put_IsHighPrecision

           INPUT
            IsHighPrecision     : VARIANT_BOOL'''
        return super(IControlPrecision2, self).put_IsHighPrecision(IsHighPrecision)
    def get_UsePrecision(self):
        '''Method IControlPrecision.get_UsePrecision (from IControlPrecision)

           OUTPUT
            UsePrecision        : VARIANT_BOOL*'''
        return super(IControlPrecision2, self).get_UsePrecision()
    def put_UsePrecision(self, UsePrecision):
        '''Method IControlPrecision.put_UsePrecision (from IControlPrecision)

           INPUT
            UsePrecision        : VARIANT_BOOL'''
        return super(IControlPrecision2, self).put_UsePrecision(UsePrecision)
    IsHighPrecision = property(get_IsHighPrecision, put_IsHighPrecision, None)
    UsePrecision = property(get_UsePrecision, put_UsePrecision, None)

class IProjectedCoordinateSystemEdit(_esriGeometry.IProjectedCoordinateSystemEdit):
    _IID = uuid.UUID('228d7220-d335-11d1-bc9b-0000f875bcce')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, useage, gcs, projectedXYUnit, Projection, parameters):
        '''Method IProjectedCoordinateSystemEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            useage              : BSTR
            gcs                 : IGeographicCoordinateSystem*
            projectedXYUnit     : ILinearUnit*
            Projection          : IProjection*
            parameters          : IParameter**'''
        return super(IProjectedCoordinateSystemEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, useage, gcs, projectedXYUnit, Projection, parameters)
    def Define(self, Name, Alias, Abbreviation, Remarks, useage, gcs, projectedUnit, Projection, parameters):
        '''Method IProjectedCoordinateSystemEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            useage              : VARIANT*
            gcs                 : VARIANT*
            projectedUnit       : VARIANT*
            Projection          : VARIANT*
            parameters          : VARIANT*'''
        return super(IProjectedCoordinateSystemEdit, self).Define(Name, Alias, Abbreviation, Remarks, useage, gcs, projectedUnit, Projection, parameters)

class IVerticalCoordinateSystemEdit(_esriGeometry.IVerticalCoordinateSystemEdit):
    _IID = uuid.UUID('cd01a024-c9cf-46c8-8fc9-acec374c1c4c')
    def DefineEx(self, Name, Alias, Abbreviation, Remarks, useage, pDatum, projectedXYUnit, VerticalShift, PositiveDirection):
        '''Method IVerticalCoordinateSystemEdit.DefineEx

           INPUTS
            Name                : BSTR
            Alias               : BSTR
            Abbreviation        : BSTR
            Remarks             : BSTR
            useage              : BSTR
            pDatum              : IHVDatum*
            projectedXYUnit     : ILinearUnit*
            VerticalShift       : double*
            PositiveDirection   : int*'''
        return super(IVerticalCoordinateSystemEdit, self).DefineEx(Name, Alias, Abbreviation, Remarks, useage, pDatum, projectedXYUnit, VerticalShift, PositiveDirection)
    def Define(self, Name, Alias, Abbreviation, Remarks, useage, hvDatum, projectedUnit, VerticalShift, PositiveDirection):
        '''Method IVerticalCoordinateSystemEdit.Define

           INPUTS
            Name                : VARIANT*
            Alias               : VARIANT*
            Abbreviation        : VARIANT*
            Remarks             : VARIANT*
            useage              : VARIANT*
            hvDatum             : VARIANT*
            projectedUnit       : VARIANT*
            VerticalShift       : VARIANT*
            PositiveDirection   : VARIANT*'''
        return super(IVerticalCoordinateSystemEdit, self).Define(Name, Alias, Abbreviation, Remarks, useage, hvDatum, projectedUnit, VerticalShift, PositiveDirection)

class IControlPrecision3(_esriGeometry.IControlPrecision3):
    _IID = uuid.UUID('2fbcd817-02bc-489c-9e91-ba53284b0ab3')

    def __init__(self, *args, **kw):
        super(IControlPrecision3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PrecisionLocked(self):
        '''Method IControlPrecision3.get_PrecisionLocked

           OUTPUT
            pbPrecisionLocked   : VARIANT_BOOL*'''
        return super(IControlPrecision3, self).get_PrecisionLocked()
    def put_PrecisionLocked(self, pbPrecisionLocked):
        '''Method IControlPrecision3.put_PrecisionLocked

           INPUT
            pbPrecisionLocked   : VARIANT_BOOL'''
        return super(IControlPrecision3, self).put_PrecisionLocked(pbPrecisionLocked)
    def get_IsHighPrecision(self):
        '''Method IControlPrecision2.get_IsHighPrecision (from IControlPrecision2)

           OUTPUT
            IsHighPrecision     : VARIANT_BOOL*'''
        return super(IControlPrecision3, self).get_IsHighPrecision()
    def put_IsHighPrecision(self, IsHighPrecision):
        '''Method IControlPrecision2.put_IsHighPrecision (from IControlPrecision2)

           INPUT
            IsHighPrecision     : VARIANT_BOOL'''
        return super(IControlPrecision3, self).put_IsHighPrecision(IsHighPrecision)
    def get_UsePrecision(self):
        '''Method IControlPrecision.get_UsePrecision (from IControlPrecision)

           OUTPUT
            UsePrecision        : VARIANT_BOOL*'''
        return super(IControlPrecision3, self).get_UsePrecision()
    def put_UsePrecision(self, UsePrecision):
        '''Method IControlPrecision.put_UsePrecision (from IControlPrecision)

           INPUT
            UsePrecision        : VARIANT_BOOL'''
        return super(IControlPrecision3, self).put_UsePrecision(UsePrecision)
    IsHighPrecision = property(get_IsHighPrecision, put_IsHighPrecision, None)
    PrecisionLocked = property(get_PrecisionLocked, put_PrecisionLocked, None)
    UsePrecision = property(get_UsePrecision, put_UsePrecision, None)

class IWkb(_esriGeometry.IWkb):
    _IID = uuid.UUID('8d9097ee-2f7c-11d1-833b-0000f8775be9')
    def get_WkbSize(self):
        '''Method IWkb.get_WkbSize

           OUTPUT
            cBytes              : long*'''
        return super(IWkb, self).get_WkbSize()
    def ExportToWkb(self):
        '''Method IWkb.ExportToWkb

           OUTPUTS
            byteCountInOut      : long*
            byteBuffer          : unsignedchar*'''
        return super(IWkb, self).ExportToWkb()
    def ImportFromWkb(self, byteBuffer):
        '''Method IWkb.ImportFromWkb

           INPUT
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IWkb, self).ImportFromWkb(byteBuffer)
    WkbSize = property(get_WkbSize, None, None)

class IESRIShape(_esriGeometry.IESRIShape):
    _IID = uuid.UUID('7b91ff70-53a9-11d0-a8f3-00608c85ede5')
    def QueryESRIShapeType(self, basicShapeType, shapeModifiers):
        '''Method IESRIShape.QueryESRIShapeType

           INPUTS
            basicShapeType      : esriShapeType*
            shapeModifiers      : long*'''
        return super(IESRIShape, self).QueryESRIShapeType(basicShapeType, shapeModifiers)
    def get_ESRIShapeSize(self):
        '''Method IESRIShape.get_ESRIShapeSize

           OUTPUT
            cBytes              : long*'''
        return super(IESRIShape, self).get_ESRIShapeSize()
    def get_ESRIShapeSizeEx(self, modifiersToAllow):
        '''Method IESRIShape.get_ESRIShapeSizeEx

           INPUT
            modifiersToAllow    : long

           OUTPUT
            cBytes              : long*'''
        return super(IESRIShape, self).get_ESRIShapeSizeEx(modifiersToAllow)
    def ImportFromESRIShape(self, byteBuffer):
        '''Method IESRIShape.ImportFromESRIShape

           INPUT
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IESRIShape, self).ImportFromESRIShape(byteBuffer)
    def NonTrustedImportFromESRIShape(self, byteBuffer):
        '''Method IESRIShape.NonTrustedImportFromESRIShape

           INPUT
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IESRIShape, self).NonTrustedImportFromESRIShape(byteBuffer)
    def AttachToESRIShape(self, byteBuffer):
        '''Method IESRIShape.AttachToESRIShape

           INPUT
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IESRIShape, self).AttachToESRIShape(byteBuffer)
    def ExportToESRIShape(self):
        '''Method IESRIShape.ExportToESRIShape

           OUTPUTS
            byteCountInOut      : long*
            byteBuffer          : unsignedchar*'''
        return super(IESRIShape, self).ExportToESRIShape()
    def ExportToESRIShapeEx(self, modifiersToAllow, useArcViewNaNs):
        '''Method IESRIShape.ExportToESRIShapeEx

           INPUTS
            modifiersToAllow    : long
            useArcViewNaNs      : VARIANT_BOOL

           OUTPUTS
            byteCountInOut      : long*
            byteBuffer          : unsignedchar*'''
        return super(IESRIShape, self).ExportToESRIShapeEx(modifiersToAllow, useArcViewNaNs)
    def GetModifierOffset(self, modifierType):
        '''Method IESRIShape.GetModifierOffset

           INPUT
            modifierType        : esriShapeModifiers

           OUTPUT
            Offset              : long*'''
        return super(IESRIShape, self).GetModifierOffset(modifierType)
    ESRIShapeSize = property(get_ESRIShapeSize, None, None)
    ESRIShapeSizeEx = IndexProperty(get_ESRIShapeSizeEx, None)

class IESRISegment(_esriGeometry.IESRISegment):
    _IID = uuid.UUID('a9da7976-4b22-11d1-834c-0000f8775be9')
    def get_ESRISegmentSize(self):
        '''Method IESRISegment.get_ESRISegmentSize

           OUTPUT
            cBytes              : long*'''
        return super(IESRISegment, self).get_ESRISegmentSize()
    def get_MaxDenseSegments(self, maxDeviation):
        '''Method IESRISegment.get_MaxDenseSegments

           INPUT
            maxDeviation        : double

           OUTPUT
            cBytes              : long*'''
        return super(IESRISegment, self).get_MaxDenseSegments(maxDeviation)
    def ImportFromESRISegment(self, From, to, zs, ms, IDs, numModifierBytes, segmentBuffer):
        '''Method IESRISegment.ImportFromESRISegment

           INPUTS
            from                : WKSPoint*
            to                  : WKSPoint*
            zs                  : double*
            ms                  : double*
            IDs                 : long*
            numModifierBytes    : long
            segmentBuffer       : unsignedchar*

           OUTPUT
            cBytesRead          : long*'''
        return super(IESRISegment, self).ImportFromESRISegment(From, to, zs, ms, IDs, numModifierBytes, segmentBuffer)
    def ExportToESRISegment(self):
        '''Method IESRISegment.ExportToESRISegment

           OUTPUTS
            byteBuffer          : unsignedchar*
            cBytesWrote         : long*'''
        return super(IESRISegment, self).ExportToESRISegment()
    ESRISegmentSize = property(get_ESRISegmentSize, None, None)
    MaxDenseSegments = IndexProperty(get_MaxDenseSegments, None)

class IVector(_esriGeometry.IVector):
    _IID = uuid.UUID('40d717c9-10c2-11d4-9f59-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IVector, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Dimension(self):
        '''Method IVector.get_Dimension

           OUTPUT
            Dimension           : long*'''
        return super(IVector, self).get_Dimension()
    def get_IsEmpty(self):
        '''Method IVector.get_IsEmpty

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IVector, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IVector.SetEmpty'''
        return super(IVector, self).SetEmpty()
    def get_ComponentByIndex(self, componentIndex):
        '''Method IVector.get_ComponentByIndex

           INPUT
            componentIndex      : long

           OUTPUT
            componentValue      : double*'''
        return super(IVector, self).get_ComponentByIndex(componentIndex)
    def put_ComponentByIndex(self, componentIndex, componentValue):
        '''Method IVector.put_ComponentByIndex

           INPUTS
            componentIndex      : long
            componentValue      : double'''
        return super(IVector, self).put_ComponentByIndex(componentIndex, componentValue)
    def get_Magnitude(self):
        '''Method IVector.get_Magnitude

           OUTPUT
            Magnitude           : double*'''
        return super(IVector, self).get_Magnitude()
    def put_Magnitude(self, Magnitude):
        '''Method IVector.put_Magnitude

           INPUT
            Magnitude           : double'''
        return super(IVector, self).put_Magnitude(Magnitude)
    def Normalize(self):
        '''Method IVector.Normalize'''
        return super(IVector, self).Normalize()
    def Scale(self, ScaleFactor):
        '''Method IVector.Scale

           INPUT
            ScaleFactor         : double'''
        return super(IVector, self).Scale(ScaleFactor)
    def AddVector(self, otherVector):
        '''Method IVector.AddVector

           INPUT
            otherVector         : IVector*

           OUTPUT
            result              : IVector**'''
        return super(IVector, self).AddVector(otherVector)
    def SubtractVector(self, otherVector):
        '''Method IVector.SubtractVector

           INPUT
            otherVector         : IVector*

           OUTPUT
            result              : IVector**'''
        return super(IVector, self).SubtractVector(otherVector)
    def ConstructAddVector(self, vector1, vector2):
        '''Method IVector.ConstructAddVector

           INPUTS
            vector1             : IVector*
            vector2             : IVector*'''
        return super(IVector, self).ConstructAddVector(vector1, vector2)
    def ConstructSubtractVector(self, vector1, vector2):
        '''Method IVector.ConstructSubtractVector

           INPUTS
            vector1             : IVector*
            vector2             : IVector*'''
        return super(IVector, self).ConstructSubtractVector(vector1, vector2)
    def DotProduct(self, otherVector):
        '''Method IVector.DotProduct

           INPUT
            otherVector         : IVector*

           OUTPUT
            result              : double*'''
        return super(IVector, self).DotProduct(otherVector)
    ComponentByIndex = property(None, put_ComponentByIndex, None)
    Dimension = property(get_Dimension, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Magnitude = property(get_Magnitude, put_Magnitude, None)
    ComponentByIndex = IndexProperty(get_ComponentByIndex, None)

class IConversionMGRS(_esriGeometry.IConversionMGRS):
    _IID = uuid.UUID('9c5419f0-872e-4dad-ab83-e9cd0935202b')
    def PutCoordsFromMGRS(self, mgrs, mode):
        '''Method IConversionMGRS.PutCoordsFromMGRS

           INPUTS
            mgrs                : BSTR
            mode                : esriMGRSModeEnum'''
        return super(IConversionMGRS, self).PutCoordsFromMGRS(mgrs, mode)
    def CreateMGRS(self, numDigits, round, mode):
        '''Method IConversionMGRS.CreateMGRS

           INPUTS
            numDigits           : int
            round               : VARIANT_BOOL
            mode                : esriMGRSModeEnum

           OUTPUT
            mgrs                : BSTR*'''
        return super(IConversionMGRS, self).CreateMGRS(numDigits, round, mode)

class INetworkShape(_esriGeometry.INetworkShape):
    _IID = uuid.UUID('7324e79c-e452-4797-ab8f-b4d0c4181f0a')
    def ExportToNetworkShape(self, aVertices):
        '''Method INetworkShape.ExportToNetworkShape

           INPUT
            aVertices           : esriGeometryNetworkVertexInfo*'''
        return super(INetworkShape, self).ExportToNetworkShape(aVertices)

class INetworkShape3D(_esriGeometry.INetworkShape3D):
    _IID = uuid.UUID('4cf48287-174a-492c-aaf3-c627a172f412')
    def ExportToNetworkShape3D(self, aVertices):
        '''Method INetworkShape3D.ExportToNetworkShape3D

           INPUT
            aVertices           : esriGeometryNetworkVertexInfo3D*'''
        return super(INetworkShape3D, self).ExportToNetworkShape3D(aVertices)

class IMSnap(_esriGeometry.IMSnap):
    _IID = uuid.UUID('3732f8b2-0f64-11d5-9fde-00c04f6bdd7f')
    def Snap(self):
        '''Method IMSnap.Snap'''
        return super(IMSnap, self).Snap()

class IAffineTransformation3DGEN(_esriGeometry.IAffineTransformation3DGEN):
    _IID = uuid.UUID('d1f0124f-a469-4653-a360-d29bc023722d')
    def TransformMeasuresFF(self, direction, inMeasures):
        '''Method IAffineTransformation3DGEN.TransformMeasuresFF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformMeasuresFF(direction, inMeasures)
    def TransformMeasuresFI(self, direction, inMeasures):
        '''Method IAffineTransformation3DGEN.TransformMeasuresFI

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformMeasuresFI(direction, inMeasures)
    def TransformMeasuresIF(self, direction, inMeasures):
        '''Method IAffineTransformation3DGEN.TransformMeasuresIF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformMeasuresIF(direction, inMeasures)
    def TransformMeasuresII(self, direction, inMeasures):
        '''Method IAffineTransformation3DGEN.TransformMeasuresII

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformMeasuresII(direction, inMeasures)
    def TransformPointsFF(self, direction, inPoints):
        '''Method IAffineTransformation3DGEN.TransformPointsFF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformPointsFF(direction, inPoints)
    def TransformPointsFI(self, direction, inPoints):
        '''Method IAffineTransformation3DGEN.TransformPointsFI

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformPointsFI(direction, inPoints)
    def TransformPointsIF(self, direction, inPoints):
        '''Method IAffineTransformation3DGEN.TransformPointsIF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformPointsIF(direction, inPoints)
    def TransformPointsII(self, direction, inPoints):
        '''Method IAffineTransformation3DGEN.TransformPointsII

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).TransformPointsII(direction, inPoints)
    def DefineFromControlPoints(self, fromPoints, toPoints):
        '''Method IAffineTransformation3DGEN.DefineFromControlPoints

           INPUTS
            fromPoints          : SAFEARRAY**
            toPoints            : SAFEARRAY**'''
        return super(IAffineTransformation3DGEN, self).DefineFromControlPoints(fromPoints, toPoints)
    def GetRMSError(self):
        '''Method IAffineTransformation3DGEN.GetRMSError

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation3DGEN, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IAffineTransformation3DGEN.GetControlPointError

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation3DGEN, self).GetControlPointError(i)

class IProjectiveTransformation2DGEN(_esriGeometry.IProjectiveTransformation2DGEN):
    _IID = uuid.UUID('c7a467a9-0374-4f1a-9cbd-7156fe7dacb9')

    def __init__(self, *args, **kw):
        super(IProjectiveTransformation2DGEN, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def TransformMeasuresFF(self, direction, inMeasures):
        '''Method IProjectiveTransformation2DGEN.TransformMeasuresFF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformMeasuresFF(direction, inMeasures)
    def TransformMeasuresFI(self, direction, inMeasures):
        '''Method IProjectiveTransformation2DGEN.TransformMeasuresFI

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformMeasuresFI(direction, inMeasures)
    def TransformMeasuresIF(self, direction, inMeasures):
        '''Method IProjectiveTransformation2DGEN.TransformMeasuresIF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformMeasuresIF(direction, inMeasures)
    def TransformMeasuresII(self, direction, inMeasures):
        '''Method IProjectiveTransformation2DGEN.TransformMeasuresII

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformMeasuresII(direction, inMeasures)
    def TransformPointsFF(self, direction, inPoints):
        '''Method IProjectiveTransformation2DGEN.TransformPointsFF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformPointsFF(direction, inPoints)
    def TransformPointsFI(self, direction, inPoints):
        '''Method IProjectiveTransformation2DGEN.TransformPointsFI

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformPointsFI(direction, inPoints)
    def TransformPointsIF(self, direction, inPoints):
        '''Method IProjectiveTransformation2DGEN.TransformPointsIF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformPointsIF(direction, inPoints)
    def TransformPointsII(self, direction, inPoints):
        '''Method IProjectiveTransformation2DGEN.TransformPointsII

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).TransformPointsII(direction, inPoints)
    def putref_SpatialReference(self, SR):
        '''Method IProjectiveTransformation2DGEN.putref_SpatialReference

           INPUT
            SR                  : ISpatialReference*'''
        return super(IProjectiveTransformation2DGEN, self).putref_SpatialReference(SR)
    def get_SpatialReference(self):
        '''Method IProjectiveTransformation2DGEN.get_SpatialReference

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(IProjectiveTransformation2DGEN, self).get_SpatialReference()
    def Reset(self):
        '''Method IProjectiveTransformation2DGEN.Reset'''
        return super(IProjectiveTransformation2DGEN, self).Reset()
    def DefineFromControlPoints(self, fromPoints, toPoints):
        '''Method IProjectiveTransformation2DGEN.DefineFromControlPoints

           INPUTS
            fromPoints          : SAFEARRAY**
            toPoints            : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).DefineFromControlPoints(fromPoints, toPoints)
    def GetRMSError(self):
        '''Method IProjectiveTransformation2DGEN.GetRMSError

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IProjectiveTransformation2DGEN, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IProjectiveTransformation2DGEN.GetControlPointError

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IProjectiveTransformation2DGEN, self).GetControlPointError(i)
    def Project(self, newSpatialReference):
        '''Method IProjectiveTransformation2DGEN.Project

           INPUT
            newSpatialReference : ISpatialReference*'''
        return super(IProjectiveTransformation2DGEN, self).Project(newSpatialReference)
    def QueryTransformationParameters(self, direction):
        '''Method IProjectiveTransformation2DGEN.QueryTransformationParameters

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            params              : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).QueryTransformationParameters(direction)
    def SetTransformationParameters(self, direction, params):
        '''Method IProjectiveTransformation2DGEN.SetTransformationParameters

           INPUTS
            direction           : esriTransformDirection
            params              : SAFEARRAY**'''
        return super(IProjectiveTransformation2DGEN, self).SetTransformationParameters(direction, params)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IZShift(_esriGeometry.IZShift):
    _IID = uuid.UUID('2439619f-6516-4a91-a0b9-3cfc98d214d2')
    def PutZShift(self, zOrigin, zOffset):
        '''Method IZShift.PutZShift

           INPUTS
            zOrigin             : double
            zOffset             : double'''
        return super(IZShift, self).PutZShift(zOrigin, zOffset)
    def GetZShift(self):
        '''Method IZShift.GetZShift

           OUTPUTS
            zOrigin             : double*
            zOffset             : double*'''
        return super(IZShift, self).GetZShift()

class IPolycurve3D(_esriGeometry.IPolycurve3D):
    _IID = uuid.UUID('6774df52-07a6-4509-9523-50b4c485bb52')
    def Densify3D(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve3D.Densify3D

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolycurve3D, self).Densify3D(maxSegmentLength, maxDeviation)
    def Generalize3D(self, maxAllowableOffset):
        '''Method IPolycurve3D.Generalize3D

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolycurve3D, self).Generalize3D(maxAllowableOffset)
    def Weed3D(self, maxAllowableOffsetFactor):
        '''Method IPolycurve3D.Weed3D

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolycurve3D, self).Weed3D(maxAllowableOffsetFactor)

class IPolycurve4(_esriGeometry.IPolycurve4):
    _IID = uuid.UUID('c0ea9a43-8884-4b70-9726-9cb6acfc0788')
    def GeodesicDensify(self, maxSegmentLength):
        '''Method IPolycurve4.GeodesicDensify

           INPUT
            maxSegmentLength    : double'''
        return super(IPolycurve4, self).GeodesicDensify(maxSegmentLength)

class IPolycurveGeodetic(_esriGeometry.IPolycurveGeodetic):
    _IID = uuid.UUID('00fcc4e5-5a6c-482b-9b77-1524d05b19d3')
    def get_LengthGeodetic(self, geodeticLineType, pLU):
        '''Method IPolycurveGeodetic.get_LengthGeodetic

           INPUTS
            geodeticLineType    : esriGeodeticType
            pLU                 : ILinearUnit*

           OUTPUT
            pLength             : double*'''
        return super(IPolycurveGeodetic, self).get_LengthGeodetic(geodeticLineType, pLU)
    def DensifyGeodetic(self, geodeticLineType, pLU, densifyMethod, densifyParameter):
        '''Method IPolycurveGeodetic.DensifyGeodetic

           INPUTS
            geodeticLineType    : esriGeodeticType
            pLU                 : ILinearUnit*
            densifyMethod       : esriCurveDensifyMethod
            densifyParameter    : double'''
        return super(IPolycurveGeodetic, self).DensifyGeodetic(geodeticLineType, pLU, densifyMethod, densifyParameter)
    def GeodesicDensify(self, maxSegmentLength):
        '''Method IPolycurve4.GeodesicDensify (from IPolycurve4)

           INPUT
            maxSegmentLength    : double'''
        return super(IPolycurveGeodetic, self).GeodesicDensify(maxSegmentLength)

class ISegmentM(_esriGeometry.ISegmentM):
    _IID = uuid.UUID('48cf4c91-e3d5-11d2-9f2e-00c04f6bdf0d')
    def GetMs(self):
        '''Method ISegmentM.GetMs

           OUTPUTS
            fromM               : double*
            toM                 : double*'''
        return super(ISegmentM, self).GetMs()
    def SetMs(self, fromM, toM):
        '''Method ISegmentM.SetMs

           INPUTS
            fromM               : double
            toM                 : double'''
        return super(ISegmentM, self).SetMs(fromM, toM)

class ISegmentZ(_esriGeometry.ISegmentZ):
    _IID = uuid.UUID('61b43a4b-e3d5-11d2-9f2e-00c04f6bdf0d')
    def GetZs(self):
        '''Method ISegmentZ.GetZs

           OUTPUTS
            fromZ               : double*
            toZ                 : double*'''
        return super(ISegmentZ, self).GetZs()
    def SetZs(self, fromZ, toZ):
        '''Method ISegmentZ.SetZs

           INPUTS
            fromZ               : double
            toZ                 : double'''
        return super(ISegmentZ, self).SetZs(fromZ, toZ)

class ISegmentID(_esriGeometry.ISegmentID):
    _IID = uuid.UUID('703052bd-25f1-11d3-9f3f-00c04f6bdf0d')
    def GetIDs(self):
        '''Method ISegmentID.GetIDs

           OUTPUTS
            fromID              : long*
            toID                : long*'''
        return super(ISegmentID, self).GetIDs()
    def SetIDs(self, fromID, toID):
        '''Method ISegmentID.SetIDs

           INPUTS
            fromID              : long
            toID                : long'''
        return super(ISegmentID, self).SetIDs(fromID, toID)

class IConversionNotation(_esriGeometry.IConversionNotation):
    _IID = uuid.UUID('5f90bcef-a161-443a-a8c7-450c3faef4ab')
    def GetUSNGFromCoords(self, numDigits, numericRounding, addSpaces):
        '''Method IConversionNotation.GetUSNGFromCoords

           INPUTS
            numDigits           : long
            numericRounding     : VARIANT_BOOL
            addSpaces           : VARIANT_BOOL

           OUTPUT
            USNGString          : BSTR*'''
        return super(IConversionNotation, self).GetUSNGFromCoords(numDigits, numericRounding, addSpaces)
    def GetUTMFromCoords(self, utmOptions):
        '''Method IConversionNotation.GetUTMFromCoords

           INPUT
            utmOptions          : esriUTMConversionOptionsEnum

           OUTPUT
            UTMString           : BSTR*'''
        return super(IConversionNotation, self).GetUTMFromCoords(utmOptions)
    def GetGARSFromCoords(self):
        '''Method IConversionNotation.GetGARSFromCoords

           OUTPUT
            GARSString          : BSTR*'''
        return super(IConversionNotation, self).GetGARSFromCoords()
    def GetGeoRefFromCoords(self, numDigits, numericRounding):
        '''Method IConversionNotation.GetGeoRefFromCoords

           INPUTS
            numDigits           : long
            numericRounding     : VARIANT_BOOL

           OUTPUT
            GeoRefString        : BSTR*'''
        return super(IConversionNotation, self).GetGeoRefFromCoords(numDigits, numericRounding)
    def GetDDFromCoords(self, precision):
        '''Method IConversionNotation.GetDDFromCoords

           INPUT
            precision           : long

           OUTPUT
            DDString            : BSTR*'''
        return super(IConversionNotation, self).GetDDFromCoords(precision)
    def GetDDMFromCoords(self, precision):
        '''Method IConversionNotation.GetDDMFromCoords

           INPUT
            precision           : long

           OUTPUT
            DDMString           : BSTR*'''
        return super(IConversionNotation, self).GetDDMFromCoords(precision)
    def GetDMSFromCoords(self, precision):
        '''Method IConversionNotation.GetDMSFromCoords

           INPUT
            precision           : long

           OUTPUT
            DMSString           : BSTR*'''
        return super(IConversionNotation, self).GetDMSFromCoords(precision)
    def PutCoordsFromUSNG(self, USNGString):
        '''Method IConversionNotation.PutCoordsFromUSNG

           INPUT
            USNGString          : BSTR'''
        return super(IConversionNotation, self).PutCoordsFromUSNG(USNGString)
    def PutCoordsFromUTM(self, utmOptions, UTMString):
        '''Method IConversionNotation.PutCoordsFromUTM

           INPUTS
            utmOptions          : esriUTMConversionOptionsEnum
            UTMString           : BSTR'''
        return super(IConversionNotation, self).PutCoordsFromUTM(utmOptions, UTMString)
    def PutCoordsFromGARS(self, mode, GARSString):
        '''Method IConversionNotation.PutCoordsFromGARS

           INPUTS
            mode                : esriGARSModeEnum
            GARSString          : BSTR'''
        return super(IConversionNotation, self).PutCoordsFromGARS(mode, GARSString)
    def PutCoordsFromGeoRef(self, GeoRefString):
        '''Method IConversionNotation.PutCoordsFromGeoRef

           INPUT
            GeoRefString        : BSTR'''
        return super(IConversionNotation, self).PutCoordsFromGeoRef(GeoRefString)
    def PutCoordsFromDD(self, DDString):
        '''Method IConversionNotation.PutCoordsFromDD

           INPUT
            DDString            : BSTR'''
        return super(IConversionNotation, self).PutCoordsFromDD(DDString)
    def PutCoordsFromDDM(self, DDMString):
        '''Method IConversionNotation.PutCoordsFromDDM

           INPUT
            DDMString           : BSTR'''
        return super(IConversionNotation, self).PutCoordsFromDDM(DDMString)
    def PutCoordsFromDMS(self, DMSString):
        '''Method IConversionNotation.PutCoordsFromDMS

           INPUT
            DMSString           : BSTR'''
        return super(IConversionNotation, self).PutCoordsFromDMS(DMSString)
    def PutCoordsFromMGRS(self, mgrs, mode):
        '''Method IConversionMGRS.PutCoordsFromMGRS (from IConversionMGRS)

           INPUTS
            mgrs                : BSTR
            mode                : esriMGRSModeEnum'''
        return super(IConversionNotation, self).PutCoordsFromMGRS(mgrs, mode)
    def CreateMGRS(self, numDigits, round, mode):
        '''Method IConversionMGRS.CreateMGRS (from IConversionMGRS)

           INPUTS
            numDigits           : int
            round               : VARIANT_BOOL
            mode                : esriMGRSModeEnum

           OUTPUT
            mgrs                : BSTR*'''
        return super(IConversionNotation, self).CreateMGRS(numDigits, round, mode)

class IAreaGeodetic(_esriGeometry.IAreaGeodetic):
    _IID = uuid.UUID('2c6209ae-7ed5-4ae1-bd5f-7d858b13dc35')
    def get_AreaGeodetic(self, lineType, pAreaUnit):
        '''Method IAreaGeodetic.get_AreaGeodetic

           INPUTS
            lineType            : esriGeodeticType
            pAreaUnit           : ILinearUnit*

           OUTPUT
            Area                : double*'''
        return super(IAreaGeodetic, self).get_AreaGeodetic(lineType, pAreaUnit)

class ISpatialIndex(_esriGeometry.ISpatialIndex):
    _IID = uuid.UUID('8c6e62ce-74fd-11d3-9f49-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ISpatialIndex, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AllowIndexing(self, AllowIndexing):
        '''Method ISpatialIndex.put_AllowIndexing

           INPUT
            AllowIndexing       : VARIANT_BOOL'''
        return super(ISpatialIndex, self).put_AllowIndexing(AllowIndexing)
    def get_AllowIndexing(self):
        '''Method ISpatialIndex.get_AllowIndexing

           OUTPUT
            AllowIndexing       : VARIANT_BOOL*'''
        return super(ISpatialIndex, self).get_AllowIndexing()
    def Invalidate(self):
        '''Method ISpatialIndex.Invalidate'''
        return super(ISpatialIndex, self).Invalidate()
    AllowIndexing = property(get_AllowIndexing, put_AllowIndexing, None)

class ISpatialIndex2(_esriGeometry.ISpatialIndex2):
    _IID = uuid.UUID('8d7948bc-8dca-4e81-a7d5-8c259f202bd3')

    def __init__(self, *args, **kw):
        super(ISpatialIndex2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def CheckInvalidate(self):
        '''Method ISpatialIndex2.CheckInvalidate'''
        return super(ISpatialIndex2, self).CheckInvalidate()
    def put_AllowIndexing(self, AllowIndexing):
        '''Method ISpatialIndex.put_AllowIndexing (from ISpatialIndex)

           INPUT
            AllowIndexing       : VARIANT_BOOL'''
        return super(ISpatialIndex2, self).put_AllowIndexing(AllowIndexing)
    def get_AllowIndexing(self):
        '''Method ISpatialIndex.get_AllowIndexing (from ISpatialIndex)

           OUTPUT
            AllowIndexing       : VARIANT_BOOL*'''
        return super(ISpatialIndex2, self).get_AllowIndexing()
    def Invalidate(self):
        '''Method ISpatialIndex.Invalidate (from ISpatialIndex)'''
        return super(ISpatialIndex2, self).Invalidate()
    AllowIndexing = property(get_AllowIndexing, put_AllowIndexing, None)

class IMAware(_esriGeometry.IMAware):
    _IID = uuid.UUID('52c59396-d744-11d2-9f34-00c04f6bdf06')

    def __init__(self, *args, **kw):
        super(IMAware, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MAware(self):
        '''Method IMAware.get_MAware

           OUTPUT
            MAware              : VARIANT_BOOL*'''
        return super(IMAware, self).get_MAware()
    def put_MAware(self, MAware):
        '''Method IMAware.put_MAware

           INPUT
            MAware              : VARIANT_BOOL'''
        return super(IMAware, self).put_MAware(MAware)
    def get_MSimple(self):
        '''Method IMAware.get_MSimple

           OUTPUT
            MSimple             : VARIANT_BOOL*'''
        return super(IMAware, self).get_MSimple()
    def DropMs(self):
        '''Method IMAware.DropMs'''
        return super(IMAware, self).DropMs()
    MAware = property(get_MAware, put_MAware, None)
    MSimple = property(get_MSimple, None, None)

class IMCollection(_esriGeometry.IMCollection):
    _IID = uuid.UUID('01faff20-5191-11d2-92f6-0000f875171d')
    def get_MMin(self):
        '''Method IMCollection.get_MMin

           OUTPUT
            outMMin             : double*'''
        return super(IMCollection, self).get_MMin()
    def get_MMax(self):
        '''Method IMCollection.get_MMax

           OUTPUT
            outMMax             : double*'''
        return super(IMCollection, self).get_MMax()
    def MultiplyMs(self, factor):
        '''Method IMCollection.MultiplyMs

           INPUT
            factor              : double'''
        return super(IMCollection, self).MultiplyMs(factor)
    def OffsetMs(self, Offset):
        '''Method IMCollection.OffsetMs

           INPUT
            Offset              : double'''
        return super(IMCollection, self).OffsetMs(Offset)
    MMax = property(get_MMax, None, None)
    MMin = property(get_MMin, None, None)

class IMSegmentationInternal(_esriGeometry.IMSegmentationInternal):
    _IID = uuid.UUID('040e3809-1106-11d6-9fa9-00c04f6bdf0d')
    def get_MMonotonicity(self):
        '''Method IMSegmentationInternal.get_MMonotonicity

           OUTPUT
            monotonicityDetails : long*'''
        return super(IMSegmentationInternal, self).get_MMonotonicity()
    def QueryFirstLastM(self):
        '''Method IMSegmentationInternal.QueryFirstLastM

           OUTPUTS
            firstM              : double*
            lastM               : double*'''
        return super(IMSegmentationInternal, self).QueryFirstLastM()
    def OrientByMs(self):
        '''Method IMSegmentationInternal.OrientByMs'''
        return super(IMSegmentationInternal, self).OrientByMs()
    MMonotonicity = property(get_MMonotonicity, None, None)

class IZAware(_esriGeometry.IZAware):
    _IID = uuid.UUID('efeeb8b3-dc23-11d2-9f2e-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IZAware, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ZAware(self):
        '''Method IZAware.get_ZAware

           OUTPUT
            ZAware              : VARIANT_BOOL*'''
        return super(IZAware, self).get_ZAware()
    def put_ZAware(self, ZAware):
        '''Method IZAware.put_ZAware

           INPUT
            ZAware              : VARIANT_BOOL'''
        return super(IZAware, self).put_ZAware(ZAware)
    def get_ZSimple(self):
        '''Method IZAware.get_ZSimple

           OUTPUT
            ZSimple             : VARIANT_BOOL*'''
        return super(IZAware, self).get_ZSimple()
    def DropZs(self):
        '''Method IZAware.DropZs'''
        return super(IZAware, self).DropZs()
    ZAware = property(get_ZAware, put_ZAware, None)
    ZSimple = property(get_ZSimple, None, None)

class IZCollection(_esriGeometry.IZCollection):
    _IID = uuid.UUID('efeeb8b4-dc23-11d2-9f2e-00c04f6bdf0d')
    def get_ZMin(self):
        '''Method IZCollection.get_ZMin

           OUTPUT
            ZMin                : double*'''
        return super(IZCollection, self).get_ZMin()
    def get_ZMax(self):
        '''Method IZCollection.get_ZMax

           OUTPUT
            ZMax                : double*'''
        return super(IZCollection, self).get_ZMax()
    def MultiplyZs(self, factor):
        '''Method IZCollection.MultiplyZs

           INPUT
            factor              : double'''
        return super(IZCollection, self).MultiplyZs(factor)
    def OffsetZs(self, Offset):
        '''Method IZCollection.OffsetZs

           INPUT
            Offset              : double'''
        return super(IZCollection, self).OffsetZs(Offset)
    ZMax = property(get_ZMax, None, None)
    ZMin = property(get_ZMin, None, None)

class IPointIDAware(_esriGeometry.IPointIDAware):
    _IID = uuid.UUID('739a1669-e870-11d2-9f30-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IPointIDAware, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PointIDAware(self):
        '''Method IPointIDAware.get_PointIDAware

           OUTPUT
            idAware             : VARIANT_BOOL*'''
        return super(IPointIDAware, self).get_PointIDAware()
    def put_PointIDAware(self, idAware):
        '''Method IPointIDAware.put_PointIDAware

           INPUT
            idAware             : VARIANT_BOOL'''
        return super(IPointIDAware, self).put_PointIDAware(idAware)
    def get_PointIDSimple(self):
        '''Method IPointIDAware.get_PointIDSimple

           OUTPUT
            idSimple            : VARIANT_BOOL*'''
        return super(IPointIDAware, self).get_PointIDSimple()
    def DropPointIDs(self):
        '''Method IPointIDAware.DropPointIDs'''
        return super(IPointIDAware, self).DropPointIDs()
    PointIDAware = property(get_PointIDAware, put_PointIDAware, None)
    PointIDSimple = property(get_PointIDSimple, None, None)

class ITextureAware(_esriGeometry.ITextureAware):
    _IID = uuid.UUID('e433a193-ceb0-11d3-9f50-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(ITextureAware, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TextureAware(self):
        '''Method ITextureAware.get_TextureAware

           OUTPUT
            TextureAware        : VARIANT_BOOL*'''
        return super(ITextureAware, self).get_TextureAware()
    def put_TextureAware(self, TextureAware):
        '''Method ITextureAware.put_TextureAware

           INPUT
            TextureAware        : VARIANT_BOOL'''
        return super(ITextureAware, self).put_TextureAware(TextureAware)
    def get_TextureDimension(self):
        '''Method ITextureAware.get_TextureDimension

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ITextureAware, self).get_TextureDimension()
    def put_TextureDimension(self, Dimension):
        '''Method ITextureAware.put_TextureDimension

           INPUT
            Dimension           : esriGeometryDimension'''
        return super(ITextureAware, self).put_TextureDimension(Dimension)
    def get_TextureSimple(self):
        '''Method ITextureAware.get_TextureSimple

           OUTPUT
            TextureSimple       : VARIANT_BOOL*'''
        return super(ITextureAware, self).get_TextureSimple()
    def DropTextures(self):
        '''Method ITextureAware.DropTextures'''
        return super(ITextureAware, self).DropTextures()
    TextureAware = property(get_TextureAware, put_TextureAware, None)
    TextureDimension = property(get_TextureDimension, put_TextureDimension, None)
    TextureSimple = property(get_TextureSimple, None, None)

class INormalAware(_esriGeometry.INormalAware):
    _IID = uuid.UUID('e433a194-ceb0-11d3-9f50-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(INormalAware, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NormalAware(self):
        '''Method INormalAware.get_NormalAware

           OUTPUT
            NormalAware         : VARIANT_BOOL*'''
        return super(INormalAware, self).get_NormalAware()
    def put_NormalAware(self, NormalAware):
        '''Method INormalAware.put_NormalAware

           INPUT
            NormalAware         : VARIANT_BOOL'''
        return super(INormalAware, self).put_NormalAware(NormalAware)
    def get_NormalSimple(self):
        '''Method INormalAware.get_NormalSimple

           OUTPUT
            NormalSimple        : VARIANT_BOOL*'''
        return super(INormalAware, self).get_NormalSimple()
    def DropNormals(self):
        '''Method INormalAware.DropNormals'''
        return super(INormalAware, self).DropNormals()
    NormalAware = property(get_NormalAware, put_NormalAware, None)
    NormalSimple = property(get_NormalSimple, None, None)

class IPartIDAware(_esriGeometry.IPartIDAware):
    _IID = uuid.UUID('97fd6869-d4fe-11d3-9f50-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IPartIDAware, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PartIDAware(self):
        '''Method IPartIDAware.get_PartIDAware

           OUTPUT
            idAware             : VARIANT_BOOL*'''
        return super(IPartIDAware, self).get_PartIDAware()
    def put_PartIDAware(self, idAware):
        '''Method IPartIDAware.put_PartIDAware

           INPUT
            idAware             : VARIANT_BOOL'''
        return super(IPartIDAware, self).put_PartIDAware(idAware)
    def get_PartIDSimple(self):
        '''Method IPartIDAware.get_PartIDSimple

           OUTPUT
            idSimple            : VARIANT_BOOL*'''
        return super(IPartIDAware, self).get_PartIDSimple()
    def DropPartIDs(self):
        '''Method IPartIDAware.DropPartIDs'''
        return super(IPartIDAware, self).DropPartIDs()
    PartIDAware = property(get_PartIDAware, put_PartIDAware, None)
    PartIDSimple = property(get_PartIDSimple, None, None)

class IVolume(_esriGeometry.IVolume):
    _IID = uuid.UUID('aade8029-6549-41e8-85f5-b17b8e7d9212')
    def get_Volume(self):
        '''Method IVolume.get_Volume

           OUTPUT
            volumeValue         : double*'''
        return super(IVolume, self).get_Volume()
    Volume = property(get_Volume, None, None)

class IRelationResult(_esriGeometry.IRelationResult):
    _IID = uuid.UUID('3ff13d39-ea3b-42cb-98f6-0f73a1c89b89')
    def get_RelationElementCount(self):
        '''Method IRelationResult.get_RelationElementCount

           OUTPUT
            resultPairCount     : long*'''
        return super(IRelationResult, self).get_RelationElementCount()
    def get_RelationElement(self, i):
        '''Method IRelationResult.get_RelationElement

           INPUT
            i                   : long

           OUTPUTS
            left                : long*
            right               : long*'''
        return super(IRelationResult, self).get_RelationElement(i)
    def SetRelationElement(self, i, left, right):
        '''Method IRelationResult.SetRelationElement

           INPUTS
            i                   : long
            left                : long
            right               : long'''
        return super(IRelationResult, self).SetRelationElement(i, left, right)
    def SetRelationElements(self, cPairs, Pairs):
        '''Method IRelationResult.SetRelationElements

           INPUTS
            cPairs              : long
            Pairs               : esriRelationPair*'''
        return super(IRelationResult, self).SetRelationElements(cPairs, Pairs)
    def SortRight(self):
        '''Method IRelationResult.SortRight'''
        return super(IRelationResult, self).SortRight()
    def SortLeft(self):
        '''Method IRelationResult.SortLeft'''
        return super(IRelationResult, self).SortLeft()
    def FlipRelations(self):
        '''Method IRelationResult.FlipRelations'''
        return super(IRelationResult, self).FlipRelations()
    def Subtract(self, pRelations):
        '''Method IRelationResult.Subtract

           INPUT
            pRelations          : IRelationResult*'''
        return super(IRelationResult, self).Subtract(pRelations)
    def Intersect(self, pRelations):
        '''Method IRelationResult.Intersect

           INPUT
            pRelations          : IRelationResult*'''
        return super(IRelationResult, self).Intersect(pRelations)
    def Add(self, pRelations):
        '''Method IRelationResult.Add

           INPUT
            pRelations          : IRelationResult*'''
        return super(IRelationResult, self).Add(pRelations)
    RelationElementCount = property(get_RelationElementCount, None, None)

class IGeometryEnvironment(_esriGeometry.IGeometryEnvironment):
    _IID = uuid.UUID('e7a6280c-3e2f-11d3-9f41-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IGeometryEnvironment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_NoDiceLimit(self, cMaxPoints):
        '''Method IGeometryEnvironment.put_NoDiceLimit

           INPUT
            cMaxPoints          : long'''
        return super(IGeometryEnvironment, self).put_NoDiceLimit(cMaxPoints)
    def get_NoDiceLimit(self):
        '''Method IGeometryEnvironment.get_NoDiceLimit

           OUTPUT
            cMaxPoints          : long*'''
        return super(IGeometryEnvironment, self).get_NoDiceLimit()
    def put_AutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment.put_AutoDensifyTolerance

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment, self).put_AutoDensifyTolerance(tolerance)
    def get_AutoDensifyTolerance(self):
        '''Method IGeometryEnvironment.get_AutoDensifyTolerance

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment, self).get_AutoDensifyTolerance()
    AutoDensifyTolerance = property(get_AutoDensifyTolerance, put_AutoDensifyTolerance, None)
    NoDiceLimit = property(get_NoDiceLimit, put_NoDiceLimit, None)

class IGeometryEnvironment2(_esriGeometry.IGeometryEnvironment2):
    _IID = uuid.UUID('6dded3b4-1f7c-11d4-9f7f-00c04f6bc8e8')

    def __init__(self, *args, **kw):
        super(IGeometryEnvironment2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Pre81Compatibility(self, pre81Compatible):
        '''Method IGeometryEnvironment2.put_Pre81Compatibility

           INPUT
            pre81Compatible     : VARIANT_BOOL'''
        return super(IGeometryEnvironment2, self).put_Pre81Compatibility(pre81Compatible)
    def get_Pre81Compatibility(self):
        '''Method IGeometryEnvironment2.get_Pre81Compatibility

           OUTPUT
            pre81Compatible     : VARIANT_BOOL*'''
        return super(IGeometryEnvironment2, self).get_Pre81Compatibility()
    def put_AngularAutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment2.put_AngularAutoDensifyTolerance

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment2, self).put_AngularAutoDensifyTolerance(tolerance)
    def get_AngularAutoDensifyTolerance(self):
        '''Method IGeometryEnvironment2.get_AngularAutoDensifyTolerance

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment2, self).get_AngularAutoDensifyTolerance()
    def put_DeviationAutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment2.put_DeviationAutoDensifyTolerance

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment2, self).put_DeviationAutoDensifyTolerance(tolerance)
    def get_DeviationAutoDensifyTolerance(self):
        '''Method IGeometryEnvironment2.get_DeviationAutoDensifyTolerance

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment2, self).get_DeviationAutoDensifyTolerance()
    def put_UseAlternativeTopoOps(self, alternativeTopoOps):
        '''Method IGeometryEnvironment2.put_UseAlternativeTopoOps

           INPUT
            alternativeTopoOps  : VARIANT_BOOL'''
        return super(IGeometryEnvironment2, self).put_UseAlternativeTopoOps(alternativeTopoOps)
    def get_UseAlternativeTopoOps(self):
        '''Method IGeometryEnvironment2.get_UseAlternativeTopoOps

           OUTPUT
            alternativeTopoOps  : VARIANT_BOOL*'''
        return super(IGeometryEnvironment2, self).get_UseAlternativeTopoOps()
    def put_NoDiceLimit(self, cMaxPoints):
        '''Method IGeometryEnvironment.put_NoDiceLimit (from IGeometryEnvironment)

           INPUT
            cMaxPoints          : long'''
        return super(IGeometryEnvironment2, self).put_NoDiceLimit(cMaxPoints)
    def get_NoDiceLimit(self):
        '''Method IGeometryEnvironment.get_NoDiceLimit (from IGeometryEnvironment)

           OUTPUT
            cMaxPoints          : long*'''
        return super(IGeometryEnvironment2, self).get_NoDiceLimit()
    def put_AutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment.put_AutoDensifyTolerance (from IGeometryEnvironment)

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment2, self).put_AutoDensifyTolerance(tolerance)
    def get_AutoDensifyTolerance(self):
        '''Method IGeometryEnvironment.get_AutoDensifyTolerance (from IGeometryEnvironment)

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment2, self).get_AutoDensifyTolerance()
    AngularAutoDensifyTolerance = property(get_AngularAutoDensifyTolerance, put_AngularAutoDensifyTolerance, None)
    AutoDensifyTolerance = property(get_AutoDensifyTolerance, put_AutoDensifyTolerance, None)
    DeviationAutoDensifyTolerance = property(get_DeviationAutoDensifyTolerance, put_DeviationAutoDensifyTolerance, None)
    NoDiceLimit = property(get_NoDiceLimit, put_NoDiceLimit, None)
    Pre81Compatibility = property(get_Pre81Compatibility, put_Pre81Compatibility, None)
    UseAlternativeTopoOps = property(get_UseAlternativeTopoOps, put_UseAlternativeTopoOps, None)

class IGeometryEnvironment3(_esriGeometry.IGeometryEnvironment3):
    _IID = uuid.UUID('923d59be-a083-44b3-b9a8-a01a580c4f2e')

    def __init__(self, *args, **kw):
        super(IGeometryEnvironment3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DicingEnabled(self):
        '''Method IGeometryEnvironment3.get_DicingEnabled

           OUTPUT
            DicingEnabled       : VARIANT_BOOL*'''
        return super(IGeometryEnvironment3, self).get_DicingEnabled()
    def put_DicingEnabled(self, DicingEnabled):
        '''Method IGeometryEnvironment3.put_DicingEnabled

           INPUT
            DicingEnabled       : VARIANT_BOOL'''
        return super(IGeometryEnvironment3, self).put_DicingEnabled(DicingEnabled)
    def put_Pre81Compatibility(self, pre81Compatible):
        '''Method IGeometryEnvironment2.put_Pre81Compatibility (from IGeometryEnvironment2)

           INPUT
            pre81Compatible     : VARIANT_BOOL'''
        return super(IGeometryEnvironment3, self).put_Pre81Compatibility(pre81Compatible)
    def get_Pre81Compatibility(self):
        '''Method IGeometryEnvironment2.get_Pre81Compatibility (from IGeometryEnvironment2)

           OUTPUT
            pre81Compatible     : VARIANT_BOOL*'''
        return super(IGeometryEnvironment3, self).get_Pre81Compatibility()
    def put_AngularAutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment2.put_AngularAutoDensifyTolerance (from IGeometryEnvironment2)

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment3, self).put_AngularAutoDensifyTolerance(tolerance)
    def get_AngularAutoDensifyTolerance(self):
        '''Method IGeometryEnvironment2.get_AngularAutoDensifyTolerance (from IGeometryEnvironment2)

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment3, self).get_AngularAutoDensifyTolerance()
    def put_DeviationAutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment2.put_DeviationAutoDensifyTolerance (from IGeometryEnvironment2)

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment3, self).put_DeviationAutoDensifyTolerance(tolerance)
    def get_DeviationAutoDensifyTolerance(self):
        '''Method IGeometryEnvironment2.get_DeviationAutoDensifyTolerance (from IGeometryEnvironment2)

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment3, self).get_DeviationAutoDensifyTolerance()
    def put_UseAlternativeTopoOps(self, alternativeTopoOps):
        '''Method IGeometryEnvironment2.put_UseAlternativeTopoOps (from IGeometryEnvironment2)

           INPUT
            alternativeTopoOps  : VARIANT_BOOL'''
        return super(IGeometryEnvironment3, self).put_UseAlternativeTopoOps(alternativeTopoOps)
    def get_UseAlternativeTopoOps(self):
        '''Method IGeometryEnvironment2.get_UseAlternativeTopoOps (from IGeometryEnvironment2)

           OUTPUT
            alternativeTopoOps  : VARIANT_BOOL*'''
        return super(IGeometryEnvironment3, self).get_UseAlternativeTopoOps()
    def put_NoDiceLimit(self, cMaxPoints):
        '''Method IGeometryEnvironment.put_NoDiceLimit (from IGeometryEnvironment)

           INPUT
            cMaxPoints          : long'''
        return super(IGeometryEnvironment3, self).put_NoDiceLimit(cMaxPoints)
    def get_NoDiceLimit(self):
        '''Method IGeometryEnvironment.get_NoDiceLimit (from IGeometryEnvironment)

           OUTPUT
            cMaxPoints          : long*'''
        return super(IGeometryEnvironment3, self).get_NoDiceLimit()
    def put_AutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment.put_AutoDensifyTolerance (from IGeometryEnvironment)

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment3, self).put_AutoDensifyTolerance(tolerance)
    def get_AutoDensifyTolerance(self):
        '''Method IGeometryEnvironment.get_AutoDensifyTolerance (from IGeometryEnvironment)

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment3, self).get_AutoDensifyTolerance()
    AngularAutoDensifyTolerance = property(get_AngularAutoDensifyTolerance, put_AngularAutoDensifyTolerance, None)
    AutoDensifyTolerance = property(get_AutoDensifyTolerance, put_AutoDensifyTolerance, None)
    DeviationAutoDensifyTolerance = property(get_DeviationAutoDensifyTolerance, put_DeviationAutoDensifyTolerance, None)
    DicingEnabled = property(get_DicingEnabled, put_DicingEnabled, None)
    NoDiceLimit = property(get_NoDiceLimit, put_NoDiceLimit, None)
    Pre81Compatibility = property(get_Pre81Compatibility, put_Pre81Compatibility, None)
    UseAlternativeTopoOps = property(get_UseAlternativeTopoOps, put_UseAlternativeTopoOps, None)

class IGeometryEnvironment4(_esriGeometry.IGeometryEnvironment4):
    _IID = uuid.UUID('abb994f7-df63-46d5-80b5-57ec1e0bfc88')

    def __init__(self, *args, **kw):
        super(IGeometryEnvironment4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DiceWithTrapezoids(self):
        '''Method IGeometryEnvironment4.get_DiceWithTrapezoids

           OUTPUT
            DiceWithTrapezoids  : VARIANT_BOOL*'''
        return super(IGeometryEnvironment4, self).get_DiceWithTrapezoids()
    def put_DiceWithTrapezoids(self, DiceWithTrapezoids):
        '''Method IGeometryEnvironment4.put_DiceWithTrapezoids

           INPUT
            DiceWithTrapezoids  : VARIANT_BOOL'''
        return super(IGeometryEnvironment4, self).put_DiceWithTrapezoids(DiceWithTrapezoids)
    def get_ExpandSubPixelParts(self):
        '''Method IGeometryEnvironment4.get_ExpandSubPixelParts

           OUTPUT
            ExpandSubPixelParts : VARIANT_BOOL*'''
        return super(IGeometryEnvironment4, self).get_ExpandSubPixelParts()
    def put_ExpandSubPixelParts(self, ExpandSubPixelParts):
        '''Method IGeometryEnvironment4.put_ExpandSubPixelParts

           INPUT
            ExpandSubPixelParts : VARIANT_BOOL'''
        return super(IGeometryEnvironment4, self).put_ExpandSubPixelParts(ExpandSubPixelParts)
    def get_DicingEnabled(self):
        '''Method IGeometryEnvironment3.get_DicingEnabled (from IGeometryEnvironment3)

           OUTPUT
            DicingEnabled       : VARIANT_BOOL*'''
        return super(IGeometryEnvironment4, self).get_DicingEnabled()
    def put_DicingEnabled(self, DicingEnabled):
        '''Method IGeometryEnvironment3.put_DicingEnabled (from IGeometryEnvironment3)

           INPUT
            DicingEnabled       : VARIANT_BOOL'''
        return super(IGeometryEnvironment4, self).put_DicingEnabled(DicingEnabled)
    def put_Pre81Compatibility(self, pre81Compatible):
        '''Method IGeometryEnvironment2.put_Pre81Compatibility (from IGeometryEnvironment2)

           INPUT
            pre81Compatible     : VARIANT_BOOL'''
        return super(IGeometryEnvironment4, self).put_Pre81Compatibility(pre81Compatible)
    def get_Pre81Compatibility(self):
        '''Method IGeometryEnvironment2.get_Pre81Compatibility (from IGeometryEnvironment2)

           OUTPUT
            pre81Compatible     : VARIANT_BOOL*'''
        return super(IGeometryEnvironment4, self).get_Pre81Compatibility()
    def put_AngularAutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment2.put_AngularAutoDensifyTolerance (from IGeometryEnvironment2)

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment4, self).put_AngularAutoDensifyTolerance(tolerance)
    def get_AngularAutoDensifyTolerance(self):
        '''Method IGeometryEnvironment2.get_AngularAutoDensifyTolerance (from IGeometryEnvironment2)

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment4, self).get_AngularAutoDensifyTolerance()
    def put_DeviationAutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment2.put_DeviationAutoDensifyTolerance (from IGeometryEnvironment2)

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment4, self).put_DeviationAutoDensifyTolerance(tolerance)
    def get_DeviationAutoDensifyTolerance(self):
        '''Method IGeometryEnvironment2.get_DeviationAutoDensifyTolerance (from IGeometryEnvironment2)

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment4, self).get_DeviationAutoDensifyTolerance()
    def put_UseAlternativeTopoOps(self, alternativeTopoOps):
        '''Method IGeometryEnvironment2.put_UseAlternativeTopoOps (from IGeometryEnvironment2)

           INPUT
            alternativeTopoOps  : VARIANT_BOOL'''
        return super(IGeometryEnvironment4, self).put_UseAlternativeTopoOps(alternativeTopoOps)
    def get_UseAlternativeTopoOps(self):
        '''Method IGeometryEnvironment2.get_UseAlternativeTopoOps (from IGeometryEnvironment2)

           OUTPUT
            alternativeTopoOps  : VARIANT_BOOL*'''
        return super(IGeometryEnvironment4, self).get_UseAlternativeTopoOps()
    def put_NoDiceLimit(self, cMaxPoints):
        '''Method IGeometryEnvironment.put_NoDiceLimit (from IGeometryEnvironment)

           INPUT
            cMaxPoints          : long'''
        return super(IGeometryEnvironment4, self).put_NoDiceLimit(cMaxPoints)
    def get_NoDiceLimit(self):
        '''Method IGeometryEnvironment.get_NoDiceLimit (from IGeometryEnvironment)

           OUTPUT
            cMaxPoints          : long*'''
        return super(IGeometryEnvironment4, self).get_NoDiceLimit()
    def put_AutoDensifyTolerance(self, tolerance):
        '''Method IGeometryEnvironment.put_AutoDensifyTolerance (from IGeometryEnvironment)

           INPUT
            tolerance           : double'''
        return super(IGeometryEnvironment4, self).put_AutoDensifyTolerance(tolerance)
    def get_AutoDensifyTolerance(self):
        '''Method IGeometryEnvironment.get_AutoDensifyTolerance (from IGeometryEnvironment)

           OUTPUT
            tolerance           : double*'''
        return super(IGeometryEnvironment4, self).get_AutoDensifyTolerance()
    AngularAutoDensifyTolerance = property(get_AngularAutoDensifyTolerance, put_AngularAutoDensifyTolerance, None)
    AutoDensifyTolerance = property(get_AutoDensifyTolerance, put_AutoDensifyTolerance, None)
    DeviationAutoDensifyTolerance = property(get_DeviationAutoDensifyTolerance, put_DeviationAutoDensifyTolerance, None)
    DiceWithTrapezoids = property(get_DiceWithTrapezoids, put_DiceWithTrapezoids, None)
    DicingEnabled = property(get_DicingEnabled, put_DicingEnabled, None)
    ExpandSubPixelParts = property(get_ExpandSubPixelParts, put_ExpandSubPixelParts, None)
    NoDiceLimit = property(get_NoDiceLimit, put_NoDiceLimit, None)
    Pre81Compatibility = property(get_Pre81Compatibility, put_Pre81Compatibility, None)
    UseAlternativeTopoOps = property(get_UseAlternativeTopoOps, put_UseAlternativeTopoOps, None)

class IBufferProgress(_esriGeometry.IBufferProgress):
    _IID = uuid.UUID('073823ce-6e7f-475c-947e-99c207f82100')
    def OnOperationBegin(self, currentOperation, numOperations):
        '''Method IBufferProgress.OnOperationBegin

           INPUTS
            currentOperation    : long
            numOperations       : long

           OUTPUT
            pbContinue          : VARIANT_BOOL*'''
        return super(IBufferProgress, self).OnOperationBegin(currentOperation, numOperations)
    def OnStageBegin(self, currentStage, currentNumStages):
        '''Method IBufferProgress.OnStageBegin

           INPUTS
            currentStage        : long
            currentNumStages    : long

           OUTPUT
            pbContinue          : VARIANT_BOOL*'''
        return super(IBufferProgress, self).OnStageBegin(currentStage, currentNumStages)
    def OnStepCompleted(self, stepsCompleted, numSteps):
        '''Method IBufferProgress.OnStepCompleted

           INPUTS
            stepsCompleted      : long
            numSteps            : long

           OUTPUT
            pbContinue          : VARIANT_BOOL*'''
        return super(IBufferProgress, self).OnStepCompleted(stepsCompleted, numSteps)

class IBufferConstructionProperties(_esriGeometry.IBufferConstructionProperties):
    _IID = uuid.UUID('ea859cce-60b2-4621-8b54-154cddd81947')

    def __init__(self, *args, **kw):
        super(IBufferConstructionProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_BufferProgress(self, ppProgress):
        '''Method IBufferConstructionProperties.putref_BufferProgress

           INPUT
            ppProgress          : IBufferProgress*'''
        return super(IBufferConstructionProperties, self).putref_BufferProgress(ppProgress)
    def get_BufferProgress(self):
        '''Method IBufferConstructionProperties.get_BufferProgress

           OUTPUT
            ppProgress          : IBufferProgress**'''
        return super(IBufferConstructionProperties, self).get_BufferProgress()
    def putref_DistanceOffsets(self, ppDistanceOffsets):
        '''Method IBufferConstructionProperties.putref_DistanceOffsets

           INPUT
            ppDistanceOffsets   : IDoubleArray*'''
        return super(IBufferConstructionProperties, self).putref_DistanceOffsets(ppDistanceOffsets)
    def get_DistanceOffsets(self):
        '''Method IBufferConstructionProperties.get_DistanceOffsets

           OUTPUT
            ppDistanceOffsets   : IDoubleArray**'''
        return super(IBufferConstructionProperties, self).get_DistanceOffsets()
    def putref_Unit(self, ppUnit):
        '''Method IBufferConstructionProperties.putref_Unit

           INPUT
            ppUnit              : IUnit*'''
        return super(IBufferConstructionProperties, self).putref_Unit(ppUnit)
    def get_Unit(self):
        '''Method IBufferConstructionProperties.get_Unit

           OUTPUT
            ppUnit              : IUnit**'''
        return super(IBufferConstructionProperties, self).get_Unit()
    def put_SideOption(self, pSideOption):
        '''Method IBufferConstructionProperties.put_SideOption

           INPUT
            pSideOption         : esriBufferConstructionSideEnum'''
        return super(IBufferConstructionProperties, self).put_SideOption(pSideOption)
    def get_SideOption(self):
        '''Method IBufferConstructionProperties.get_SideOption

           OUTPUT
            pSideOption         : esriBufferConstructionSideEnum*'''
        return super(IBufferConstructionProperties, self).get_SideOption()
    def put_OutsideOnly(self, bpOutsideOnly):
        '''Method IBufferConstructionProperties.put_OutsideOnly

           INPUT
            bpOutsideOnly       : VARIANT_BOOL'''
        return super(IBufferConstructionProperties, self).put_OutsideOnly(bpOutsideOnly)
    def get_OutsideOnly(self):
        '''Method IBufferConstructionProperties.get_OutsideOnly

           OUTPUT
            bpOutsideOnly       : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties, self).get_OutsideOnly()
    def put_EndOption(self, pEndOption):
        '''Method IBufferConstructionProperties.put_EndOption

           INPUT
            pEndOption          : esriBufferConstructionEndEnum'''
        return super(IBufferConstructionProperties, self).put_EndOption(pEndOption)
    def get_EndOption(self):
        '''Method IBufferConstructionProperties.get_EndOption

           OUTPUT
            pEndOption          : esriBufferConstructionEndEnum*'''
        return super(IBufferConstructionProperties, self).get_EndOption()
    def put_GenerateCurves(self, pbGenerateCurves):
        '''Method IBufferConstructionProperties.put_GenerateCurves

           INPUT
            pbGenerateCurves    : VARIANT_BOOL'''
        return super(IBufferConstructionProperties, self).put_GenerateCurves(pbGenerateCurves)
    def get_GenerateCurves(self):
        '''Method IBufferConstructionProperties.get_GenerateCurves

           OUTPUT
            pbGenerateCurves    : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties, self).get_GenerateCurves()
    def put_DensifyDeviation(self, pDeviation):
        '''Method IBufferConstructionProperties.put_DensifyDeviation

           INPUT
            pDeviation          : double'''
        return super(IBufferConstructionProperties, self).put_DensifyDeviation(pDeviation)
    def get_DensifyDeviation(self):
        '''Method IBufferConstructionProperties.get_DensifyDeviation

           OUTPUT
            pDeviation          : double*'''
        return super(IBufferConstructionProperties, self).get_DensifyDeviation()
    def put_UnionOverlappingBuffers(self, pbUnionOverlapping):
        '''Method IBufferConstructionProperties.put_UnionOverlappingBuffers

           INPUT
            pbUnionOverlapping  : VARIANT_BOOL'''
        return super(IBufferConstructionProperties, self).put_UnionOverlappingBuffers(pbUnionOverlapping)
    def get_UnionOverlappingBuffers(self):
        '''Method IBufferConstructionProperties.get_UnionOverlappingBuffers

           OUTPUT
            pbUnionOverlapping  : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties, self).get_UnionOverlappingBuffers()
    def put_ExplodeBuffers(self, pExplodeBuffers):
        '''Method IBufferConstructionProperties.put_ExplodeBuffers

           INPUT
            pExplodeBuffers     : VARIANT_BOOL'''
        return super(IBufferConstructionProperties, self).put_ExplodeBuffers(pExplodeBuffers)
    def get_ExplodeBuffers(self):
        '''Method IBufferConstructionProperties.get_ExplodeBuffers

           OUTPUT
            pExplodeBuffers     : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties, self).get_ExplodeBuffers()
    BufferProgress = property(get_BufferProgress, putref_BufferProgress, None)
    DensifyDeviation = property(get_DensifyDeviation, put_DensifyDeviation, None)
    DistanceOffsets = property(get_DistanceOffsets, putref_DistanceOffsets, None)
    EndOption = property(get_EndOption, put_EndOption, None)
    ExplodeBuffers = property(get_ExplodeBuffers, put_ExplodeBuffers, None)
    GenerateCurves = property(get_GenerateCurves, put_GenerateCurves, None)
    OutsideOnly = property(get_OutsideOnly, put_OutsideOnly, None)
    SideOption = property(get_SideOption, put_SideOption, None)
    UnionOverlappingBuffers = property(get_UnionOverlappingBuffers, put_UnionOverlappingBuffers, None)
    Unit = property(get_Unit, putref_Unit, None)

class IBufferConstructionProperties2(_esriGeometry.IBufferConstructionProperties2):
    _IID = uuid.UUID('3b4ca07a-7a46-4766-86dc-4b4f81035c88')

    def __init__(self, *args, **kw):
        super(IBufferConstructionProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UseGeodesicBuffering(self, pbUseGeodesicBuffering):
        '''Method IBufferConstructionProperties2.put_UseGeodesicBuffering

           INPUT
            pbUseGeodesicBuffering: VARIANT_BOOL'''
        return super(IBufferConstructionProperties2, self).put_UseGeodesicBuffering(pbUseGeodesicBuffering)
    def get_UseGeodesicBuffering(self):
        '''Method IBufferConstructionProperties2.get_UseGeodesicBuffering

           OUTPUT
            pbUseGeodesicBuffering: VARIANT_BOOL*'''
        return super(IBufferConstructionProperties2, self).get_UseGeodesicBuffering()
    def putref_BufferProgress(self, ppProgress):
        '''Method IBufferConstructionProperties.putref_BufferProgress (from IBufferConstructionProperties)

           INPUT
            ppProgress          : IBufferProgress*'''
        return super(IBufferConstructionProperties2, self).putref_BufferProgress(ppProgress)
    def get_BufferProgress(self):
        '''Method IBufferConstructionProperties.get_BufferProgress (from IBufferConstructionProperties)

           OUTPUT
            ppProgress          : IBufferProgress**'''
        return super(IBufferConstructionProperties2, self).get_BufferProgress()
    def putref_DistanceOffsets(self, ppDistanceOffsets):
        '''Method IBufferConstructionProperties.putref_DistanceOffsets (from IBufferConstructionProperties)

           INPUT
            ppDistanceOffsets   : IDoubleArray*'''
        return super(IBufferConstructionProperties2, self).putref_DistanceOffsets(ppDistanceOffsets)
    def get_DistanceOffsets(self):
        '''Method IBufferConstructionProperties.get_DistanceOffsets (from IBufferConstructionProperties)

           OUTPUT
            ppDistanceOffsets   : IDoubleArray**'''
        return super(IBufferConstructionProperties2, self).get_DistanceOffsets()
    def putref_Unit(self, ppUnit):
        '''Method IBufferConstructionProperties.putref_Unit (from IBufferConstructionProperties)

           INPUT
            ppUnit              : IUnit*'''
        return super(IBufferConstructionProperties2, self).putref_Unit(ppUnit)
    def get_Unit(self):
        '''Method IBufferConstructionProperties.get_Unit (from IBufferConstructionProperties)

           OUTPUT
            ppUnit              : IUnit**'''
        return super(IBufferConstructionProperties2, self).get_Unit()
    def put_SideOption(self, pSideOption):
        '''Method IBufferConstructionProperties.put_SideOption (from IBufferConstructionProperties)

           INPUT
            pSideOption         : esriBufferConstructionSideEnum'''
        return super(IBufferConstructionProperties2, self).put_SideOption(pSideOption)
    def get_SideOption(self):
        '''Method IBufferConstructionProperties.get_SideOption (from IBufferConstructionProperties)

           OUTPUT
            pSideOption         : esriBufferConstructionSideEnum*'''
        return super(IBufferConstructionProperties2, self).get_SideOption()
    def put_OutsideOnly(self, bpOutsideOnly):
        '''Method IBufferConstructionProperties.put_OutsideOnly (from IBufferConstructionProperties)

           INPUT
            bpOutsideOnly       : VARIANT_BOOL'''
        return super(IBufferConstructionProperties2, self).put_OutsideOnly(bpOutsideOnly)
    def get_OutsideOnly(self):
        '''Method IBufferConstructionProperties.get_OutsideOnly (from IBufferConstructionProperties)

           OUTPUT
            bpOutsideOnly       : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties2, self).get_OutsideOnly()
    def put_EndOption(self, pEndOption):
        '''Method IBufferConstructionProperties.put_EndOption (from IBufferConstructionProperties)

           INPUT
            pEndOption          : esriBufferConstructionEndEnum'''
        return super(IBufferConstructionProperties2, self).put_EndOption(pEndOption)
    def get_EndOption(self):
        '''Method IBufferConstructionProperties.get_EndOption (from IBufferConstructionProperties)

           OUTPUT
            pEndOption          : esriBufferConstructionEndEnum*'''
        return super(IBufferConstructionProperties2, self).get_EndOption()
    def put_GenerateCurves(self, pbGenerateCurves):
        '''Method IBufferConstructionProperties.put_GenerateCurves (from IBufferConstructionProperties)

           INPUT
            pbGenerateCurves    : VARIANT_BOOL'''
        return super(IBufferConstructionProperties2, self).put_GenerateCurves(pbGenerateCurves)
    def get_GenerateCurves(self):
        '''Method IBufferConstructionProperties.get_GenerateCurves (from IBufferConstructionProperties)

           OUTPUT
            pbGenerateCurves    : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties2, self).get_GenerateCurves()
    def put_DensifyDeviation(self, pDeviation):
        '''Method IBufferConstructionProperties.put_DensifyDeviation (from IBufferConstructionProperties)

           INPUT
            pDeviation          : double'''
        return super(IBufferConstructionProperties2, self).put_DensifyDeviation(pDeviation)
    def get_DensifyDeviation(self):
        '''Method IBufferConstructionProperties.get_DensifyDeviation (from IBufferConstructionProperties)

           OUTPUT
            pDeviation          : double*'''
        return super(IBufferConstructionProperties2, self).get_DensifyDeviation()
    def put_UnionOverlappingBuffers(self, pbUnionOverlapping):
        '''Method IBufferConstructionProperties.put_UnionOverlappingBuffers (from IBufferConstructionProperties)

           INPUT
            pbUnionOverlapping  : VARIANT_BOOL'''
        return super(IBufferConstructionProperties2, self).put_UnionOverlappingBuffers(pbUnionOverlapping)
    def get_UnionOverlappingBuffers(self):
        '''Method IBufferConstructionProperties.get_UnionOverlappingBuffers (from IBufferConstructionProperties)

           OUTPUT
            pbUnionOverlapping  : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties2, self).get_UnionOverlappingBuffers()
    def put_ExplodeBuffers(self, pExplodeBuffers):
        '''Method IBufferConstructionProperties.put_ExplodeBuffers (from IBufferConstructionProperties)

           INPUT
            pExplodeBuffers     : VARIANT_BOOL'''
        return super(IBufferConstructionProperties2, self).put_ExplodeBuffers(pExplodeBuffers)
    def get_ExplodeBuffers(self):
        '''Method IBufferConstructionProperties.get_ExplodeBuffers (from IBufferConstructionProperties)

           OUTPUT
            pExplodeBuffers     : VARIANT_BOOL*'''
        return super(IBufferConstructionProperties2, self).get_ExplodeBuffers()
    BufferProgress = property(get_BufferProgress, putref_BufferProgress, None)
    DensifyDeviation = property(get_DensifyDeviation, put_DensifyDeviation, None)
    DistanceOffsets = property(get_DistanceOffsets, putref_DistanceOffsets, None)
    EndOption = property(get_EndOption, put_EndOption, None)
    ExplodeBuffers = property(get_ExplodeBuffers, put_ExplodeBuffers, None)
    GenerateCurves = property(get_GenerateCurves, put_GenerateCurves, None)
    OutsideOnly = property(get_OutsideOnly, put_OutsideOnly, None)
    SideOption = property(get_SideOption, put_SideOption, None)
    UnionOverlappingBuffers = property(get_UnionOverlappingBuffers, put_UnionOverlappingBuffers, None)
    Unit = property(get_Unit, putref_Unit, None)
    UseGeodesicBuffering = property(get_UseGeodesicBuffering, put_UseGeodesicBuffering, None)

class ITexturePersistenceProperties(_esriGeometry.ITexturePersistenceProperties):
    _IID = uuid.UUID('e46bc8ff-56ca-4f70-a4a4-70f7be5f5b2b')

    def __init__(self, *args, **kw):
        super(ITexturePersistenceProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SaveScaledTextures(self, pSaveScaledTex):
        '''Method ITexturePersistenceProperties.put_SaveScaledTextures

           INPUT
            pSaveScaledTex      : VARIANT_BOOL'''
        return super(ITexturePersistenceProperties, self).put_SaveScaledTextures(pSaveScaledTex)
    def get_SaveScaledTextures(self):
        '''Method ITexturePersistenceProperties.get_SaveScaledTextures

           OUTPUT
            pSaveScaledTex      : VARIANT_BOOL*'''
        return super(ITexturePersistenceProperties, self).get_SaveScaledTextures()
    def put_TextureScaleFactor(self, pScale):
        '''Method ITexturePersistenceProperties.put_TextureScaleFactor

           INPUT
            pScale              : double'''
        return super(ITexturePersistenceProperties, self).put_TextureScaleFactor(pScale)
    def get_TextureScaleFactor(self):
        '''Method ITexturePersistenceProperties.get_TextureScaleFactor

           OUTPUT
            pScale              : double*'''
        return super(ITexturePersistenceProperties, self).get_TextureScaleFactor()
    SaveScaledTextures = property(get_SaveScaledTextures, put_SaveScaledTextures, None)
    TextureScaleFactor = property(get_TextureScaleFactor, put_TextureScaleFactor, None)

class IRelationResultArray(_esriGeometry.IRelationResultArray):
    _IID = uuid.UUID('8410cd13-773f-43ed-8208-b0bf2f383917')
    def get_Count(self):
        '''Method IRelationResultArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IRelationResultArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IRelationResultArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            r                   : esriRelationPair*'''
        return super(IRelationResultArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IRelationResultArray.Remove

           INPUT
            Index               : long'''
        return super(IRelationResultArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IRelationResultArray.RemoveAll'''
        return super(IRelationResultArray, self).RemoveAll()
    def Add(self, r):
        '''Method IRelationResultArray.Add

           INPUT
            r                   : esriRelationPair'''
        return super(IRelationResultArray, self).Add(r)
    def Insert(self, Index, r):
        '''Method IRelationResultArray.Insert

           INPUTS
            Index               : long
            r                   : esriRelationPair'''
        return super(IRelationResultArray, self).Insert(Index, r)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IEnvelope4(_esriGeometry.IEnvelope4):
    _IID = uuid.UUID('f5c13cdc-b6e7-4760-962e-19357623c896')
    def QueryWKSCoordsZ(self):
        '''Method IEnvelope4.QueryWKSCoordsZ

           OUTPUT
            e                   : WKSEnvelopeZ*'''
        return super(IEnvelope4, self).QueryWKSCoordsZ()
    def PutWKSCoordsZ(self, e):
        '''Method IEnvelope4.PutWKSCoordsZ

           INPUT
            e                   : WKSEnvelopeZ*'''
        return super(IEnvelope4, self).PutWKSCoordsZ(e)

class IPolygon5(_esriGeometry.IPolygon5):
    _IID = uuid.UUID('9c4a7438-f213-411c-9a24-1465c61838f4')
    def get_IsEnvelope(self):
        '''Method IPolygon5.get_IsEnvelope

           OUTPUT
            IsEnvelope          : VARIANT_BOOL*'''
        return super(IPolygon5, self).get_IsEnvelope()
    IsEnvelope = property(get_IsEnvelope, None, None)

class IESRIShape2(_esriGeometry.IESRIShape2):
    _IID = uuid.UUID('c90ee28c-01af-11d4-9f6c-00c04f6bdd7f')
    def get_ESRIShapeSizeEx2(self, exportFlags):
        '''Method IESRIShape2.get_ESRIShapeSizeEx2

           INPUT
            exportFlags         : long

           OUTPUT
            cBytes              : long*'''
        return super(IESRIShape2, self).get_ESRIShapeSizeEx2(exportFlags)
    def ExportToESRIShapeEx2(self, exportFlags):
        '''Method IESRIShape2.ExportToESRIShapeEx2

           INPUT
            exportFlags         : long

           OUTPUTS
            byteCountInOut      : long*
            byteBuffer          : unsignedchar*'''
        return super(IESRIShape2, self).ExportToESRIShapeEx2(exportFlags)
    def ImportFromESRIShapeEx(self, importFlags, byteBuffer):
        '''Method IESRIShape2.ImportFromESRIShapeEx

           INPUTS
            importFlags         : long
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IESRIShape2, self).ImportFromESRIShapeEx(importFlags, byteBuffer)
    def QueryESRIShapeType(self, basicShapeType, shapeModifiers):
        '''Method IESRIShape.QueryESRIShapeType (from IESRIShape)

           INPUTS
            basicShapeType      : esriShapeType*
            shapeModifiers      : long*'''
        return super(IESRIShape2, self).QueryESRIShapeType(basicShapeType, shapeModifiers)
    def get_ESRIShapeSize(self):
        '''Method IESRIShape.get_ESRIShapeSize (from IESRIShape)

           OUTPUT
            cBytes              : long*'''
        return super(IESRIShape2, self).get_ESRIShapeSize()
    def get_ESRIShapeSizeEx(self, modifiersToAllow):
        '''Method IESRIShape.get_ESRIShapeSizeEx (from IESRIShape)

           INPUT
            modifiersToAllow    : long

           OUTPUT
            cBytes              : long*'''
        return super(IESRIShape2, self).get_ESRIShapeSizeEx(modifiersToAllow)
    def ImportFromESRIShape(self, byteBuffer):
        '''Method IESRIShape.ImportFromESRIShape (from IESRIShape)

           INPUT
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IESRIShape2, self).ImportFromESRIShape(byteBuffer)
    def NonTrustedImportFromESRIShape(self, byteBuffer):
        '''Method IESRIShape.NonTrustedImportFromESRIShape (from IESRIShape)

           INPUT
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IESRIShape2, self).NonTrustedImportFromESRIShape(byteBuffer)
    def AttachToESRIShape(self, byteBuffer):
        '''Method IESRIShape.AttachToESRIShape (from IESRIShape)

           INPUT
            byteBuffer          : unsignedchar*

           OUTPUT
            byteCountInOut      : long*'''
        return super(IESRIShape2, self).AttachToESRIShape(byteBuffer)
    def ExportToESRIShape(self):
        '''Method IESRIShape.ExportToESRIShape (from IESRIShape)

           OUTPUTS
            byteCountInOut      : long*
            byteBuffer          : unsignedchar*'''
        return super(IESRIShape2, self).ExportToESRIShape()
    def ExportToESRIShapeEx(self, modifiersToAllow, useArcViewNaNs):
        '''Method IESRIShape.ExportToESRIShapeEx (from IESRIShape)

           INPUTS
            modifiersToAllow    : long
            useArcViewNaNs      : VARIANT_BOOL

           OUTPUTS
            byteCountInOut      : long*
            byteBuffer          : unsignedchar*'''
        return super(IESRIShape2, self).ExportToESRIShapeEx(modifiersToAllow, useArcViewNaNs)
    def GetModifierOffset(self, modifierType):
        '''Method IESRIShape.GetModifierOffset (from IESRIShape)

           INPUT
            modifierType        : esriShapeModifiers

           OUTPUT
            Offset              : long*'''
        return super(IESRIShape2, self).GetModifierOffset(modifierType)
    ESRIShapeSize = property(get_ESRIShapeSize, None, None)
    ESRIShapeSizeEx = IndexProperty(get_ESRIShapeSizeEx, None)
    ESRIShapeSizeEx2 = IndexProperty(get_ESRIShapeSizeEx2, None)

class IESRISegment2(_esriGeometry.IESRISegment2):
    _IID = uuid.UUID('60578e87-cb38-4b4c-81ec-b854c0b600df')
    def ExportToESRISegment2(self, exportTo92ArcFormat):
        '''Method IESRISegment2.ExportToESRISegment2

           INPUT
            exportTo92ArcFormat : VARIANT_BOOL

           OUTPUTS
            byteBuffer          : unsignedchar*
            cBytesWrote         : long*'''
        return super(IESRISegment2, self).ExportToESRISegment2(exportTo92ArcFormat)
    def get_ESRISegmentSize(self):
        '''Method IESRISegment.get_ESRISegmentSize (from IESRISegment)

           OUTPUT
            cBytes              : long*'''
        return super(IESRISegment2, self).get_ESRISegmentSize()
    def get_MaxDenseSegments(self, maxDeviation):
        '''Method IESRISegment.get_MaxDenseSegments (from IESRISegment)

           INPUT
            maxDeviation        : double

           OUTPUT
            cBytes              : long*'''
        return super(IESRISegment2, self).get_MaxDenseSegments(maxDeviation)
    def ImportFromESRISegment(self, From, to, zs, ms, IDs, numModifierBytes, segmentBuffer):
        '''Method IESRISegment.ImportFromESRISegment (from IESRISegment)

           INPUTS
            from                : WKSPoint*
            to                  : WKSPoint*
            zs                  : double*
            ms                  : double*
            IDs                 : long*
            numModifierBytes    : long
            segmentBuffer       : unsignedchar*

           OUTPUT
            cBytesRead          : long*'''
        return super(IESRISegment2, self).ImportFromESRISegment(From, to, zs, ms, IDs, numModifierBytes, segmentBuffer)
    def ExportToESRISegment(self):
        '''Method IESRISegment.ExportToESRISegment (from IESRISegment)

           OUTPUTS
            byteBuffer          : unsignedchar*
            cBytesWrote         : long*'''
        return super(IESRISegment2, self).ExportToESRISegment()
    ESRISegmentSize = property(get_ESRISegmentSize, None, None)
    MaxDenseSegments = IndexProperty(get_MaxDenseSegments, None)

class IGeometry(_esriGeometry.IGeometry):
    _IID = uuid.UUID('1b07790d-38c5-11d0-92d2-00805f7c28b0')

    def __init__(self, *args, **kw):
        super(IGeometry, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IGeometry, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IGeometry, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IGeometry, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IGeometry, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IGeometry, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty'''
        return super(IGeometry, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IGeometry, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IGeometry, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IGeometry, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference'''
        return super(IGeometry, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize'''
        return super(IGeometry, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude

           INPUT
            Longitude           : double'''
        return super(IGeometry, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IPoint(_esriGeometry.IPoint):
    _IID = uuid.UUID('1b077915-38c5-11d0-92d2-00805f7c28b0')

    def __init__(self, *args, **kw):
        super(IPoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryCoords(self):
        '''Method IPoint.QueryCoords

           OUTPUTS
            X                   : double*
            Y                   : double*'''
        return super(IPoint, self).QueryCoords()
    def PutCoords(self, X, Y):
        '''Method IPoint.PutCoords

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IPoint, self).PutCoords(X, Y)
    def get_X(self):
        '''Method IPoint.get_X

           OUTPUT
            X                   : double*'''
        return super(IPoint, self).get_X()
    def put_X(self, X):
        '''Method IPoint.put_X

           INPUT
            X                   : double'''
        return super(IPoint, self).put_X(X)
    def get_Y(self):
        '''Method IPoint.get_Y

           OUTPUT
            Y                   : double*'''
        return super(IPoint, self).get_Y()
    def put_Y(self, Y):
        '''Method IPoint.put_Y

           INPUT
            Y                   : double'''
        return super(IPoint, self).put_Y(Y)
    def get_Z(self):
        '''Method IPoint.get_Z

           OUTPUT
            Z                   : double*'''
        return super(IPoint, self).get_Z()
    def put_Z(self, Z):
        '''Method IPoint.put_Z

           INPUT
            Z                   : double'''
        return super(IPoint, self).put_Z(Z)
    def get_M(self):
        '''Method IPoint.get_M

           OUTPUT
            M                   : double*'''
        return super(IPoint, self).get_M()
    def put_M(self, M):
        '''Method IPoint.put_M

           INPUT
            M                   : double'''
        return super(IPoint, self).put_M(M)
    def get_ID(self):
        '''Method IPoint.get_ID

           OUTPUT
            pointID             : long*'''
        return super(IPoint, self).get_ID()
    def put_ID(self, pointID):
        '''Method IPoint.put_ID

           INPUT
            pointID             : long'''
        return super(IPoint, self).put_ID(pointID)
    def get_VertexAttribute(self, attributeType):
        '''Method IPoint.get_VertexAttribute

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeValue      : double*'''
        return super(IPoint, self).get_VertexAttribute(attributeType)
    def put_VertexAttribute(self, attributeType, attributeValue):
        '''Method IPoint.put_VertexAttribute

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double'''
        return super(IPoint, self).put_VertexAttribute(attributeType, attributeValue)
    def ConstrainDistance(self, constraintRadius, anchor):
        '''Method IPoint.ConstrainDistance

           INPUTS
            constraintRadius    : double
            anchor              : IPoint*'''
        return super(IPoint, self).ConstrainDistance(constraintRadius, anchor)
    def ConstrainAngle(self, constraintAngle, anchor, allowOpposite):
        '''Method IPoint.ConstrainAngle

           INPUTS
            constraintAngle     : double
            anchor              : IPoint*
            allowOpposite       : VARIANT_BOOL'''
        return super(IPoint, self).ConstrainAngle(constraintAngle, anchor, allowOpposite)
    def Compare(self, otherPoint):
        '''Method IPoint.Compare

           INPUT
            otherPoint          : IPoint*

           OUTPUT
            result              : int*'''
        return super(IPoint, self).Compare(otherPoint)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPoint, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPoint, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPoint, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPoint, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPoint, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPoint, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPoint, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPoint, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPoint, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPoint, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPoint, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPoint, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    ID = property(get_ID, put_ID, None)
    IsEmpty = property(get_IsEmpty, None, None)
    M = property(get_M, put_M, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    VertexAttribute = property(None, put_VertexAttribute, None)
    X = property(get_X, put_X, None)
    Y = property(get_Y, put_Y, None)
    Z = property(get_Z, put_Z, None)
    VertexAttribute = IndexProperty(get_VertexAttribute, None)

class IEnvelope(_esriGeometry.IEnvelope):
    _IID = uuid.UUID('1b077914-38c5-11d0-92d2-00805f7c28b0')

    def __init__(self, *args, **kw):
        super(IEnvelope, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Width(self):
        '''Method IEnvelope.get_Width

           OUTPUT
            Width               : double*'''
        return super(IEnvelope, self).get_Width()
    def put_Width(self, Width):
        '''Method IEnvelope.put_Width

           INPUT
            Width               : double'''
        return super(IEnvelope, self).put_Width(Width)
    def get_Height(self):
        '''Method IEnvelope.get_Height

           OUTPUT
            Height              : double*'''
        return super(IEnvelope, self).get_Height()
    def put_Depth(self, Depth):
        '''Method IEnvelope.put_Depth

           INPUT
            Depth               : double'''
        return super(IEnvelope, self).put_Depth(Depth)
    def get_Depth(self):
        '''Method IEnvelope.get_Depth

           OUTPUT
            Depth               : double*'''
        return super(IEnvelope, self).get_Depth()
    def put_Height(self, Height):
        '''Method IEnvelope.put_Height

           INPUT
            Height              : double'''
        return super(IEnvelope, self).put_Height(Height)
    def get_LowerLeft(self):
        '''Method IEnvelope.get_LowerLeft

           OUTPUT
            LowerLeft           : IPoint**'''
        return super(IEnvelope, self).get_LowerLeft()
    def put_LowerLeft(self, LowerLeft):
        '''Method IEnvelope.put_LowerLeft

           INPUT
            LowerLeft           : IPoint*'''
        return super(IEnvelope, self).put_LowerLeft(LowerLeft)
    def get_UpperLeft(self):
        '''Method IEnvelope.get_UpperLeft

           OUTPUT
            UpperLeft           : IPoint**'''
        return super(IEnvelope, self).get_UpperLeft()
    def put_UpperLeft(self, UpperLeft):
        '''Method IEnvelope.put_UpperLeft

           INPUT
            UpperLeft           : IPoint*'''
        return super(IEnvelope, self).put_UpperLeft(UpperLeft)
    def get_UpperRight(self):
        '''Method IEnvelope.get_UpperRight

           OUTPUT
            UpperRight          : IPoint**'''
        return super(IEnvelope, self).get_UpperRight()
    def put_UpperRight(self, UpperRight):
        '''Method IEnvelope.put_UpperRight

           INPUT
            UpperRight          : IPoint*'''
        return super(IEnvelope, self).put_UpperRight(UpperRight)
    def get_LowerRight(self):
        '''Method IEnvelope.get_LowerRight

           OUTPUT
            LowerRight          : IPoint**'''
        return super(IEnvelope, self).get_LowerRight()
    def put_LowerRight(self, LowerRight):
        '''Method IEnvelope.put_LowerRight

           INPUT
            LowerRight          : IPoint*'''
        return super(IEnvelope, self).put_LowerRight(LowerRight)
    def get_XMin(self):
        '''Method IEnvelope.get_XMin

           OUTPUT
            XMin                : double*'''
        return super(IEnvelope, self).get_XMin()
    def put_XMin(self, XMin):
        '''Method IEnvelope.put_XMin

           INPUT
            XMin                : double'''
        return super(IEnvelope, self).put_XMin(XMin)
    def get_YMin(self):
        '''Method IEnvelope.get_YMin

           OUTPUT
            YMin                : double*'''
        return super(IEnvelope, self).get_YMin()
    def put_YMin(self, YMin):
        '''Method IEnvelope.put_YMin

           INPUT
            YMin                : double'''
        return super(IEnvelope, self).put_YMin(YMin)
    def get_XMax(self):
        '''Method IEnvelope.get_XMax

           OUTPUT
            XMax                : double*'''
        return super(IEnvelope, self).get_XMax()
    def put_XMax(self, XMax):
        '''Method IEnvelope.put_XMax

           INPUT
            XMax                : double'''
        return super(IEnvelope, self).put_XMax(XMax)
    def get_YMax(self):
        '''Method IEnvelope.get_YMax

           OUTPUT
            YMax                : double*'''
        return super(IEnvelope, self).get_YMax()
    def put_YMax(self, YMax):
        '''Method IEnvelope.put_YMax

           INPUT
            YMax                : double'''
        return super(IEnvelope, self).put_YMax(YMax)
    def get_MMin(self):
        '''Method IEnvelope.get_MMin

           OUTPUT
            MMin                : double*'''
        return super(IEnvelope, self).get_MMin()
    def put_MMin(self, MMin):
        '''Method IEnvelope.put_MMin

           INPUT
            MMin                : double'''
        return super(IEnvelope, self).put_MMin(MMin)
    def get_MMax(self):
        '''Method IEnvelope.get_MMax

           OUTPUT
            MMax                : double*'''
        return super(IEnvelope, self).get_MMax()
    def put_MMax(self, MMax):
        '''Method IEnvelope.put_MMax

           INPUT
            MMax                : double'''
        return super(IEnvelope, self).put_MMax(MMax)
    def get_ZMin(self):
        '''Method IEnvelope.get_ZMin

           OUTPUT
            ZMin                : double*'''
        return super(IEnvelope, self).get_ZMin()
    def put_ZMin(self, ZMin):
        '''Method IEnvelope.put_ZMin

           INPUT
            ZMin                : double'''
        return super(IEnvelope, self).put_ZMin(ZMin)
    def get_ZMax(self):
        '''Method IEnvelope.get_ZMax

           OUTPUT
            ZMax                : double*'''
        return super(IEnvelope, self).get_ZMax()
    def put_ZMax(self, ZMax):
        '''Method IEnvelope.put_ZMax

           INPUT
            ZMax                : double'''
        return super(IEnvelope, self).put_ZMax(ZMax)
    def Union(self, inEnvelope):
        '''Method IEnvelope.Union

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelope, self).Union(inEnvelope)
    def Intersect(self, inEnvelope):
        '''Method IEnvelope.Intersect

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelope, self).Intersect(inEnvelope)
    def Offset(self, X, Y):
        '''Method IEnvelope.Offset

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IEnvelope, self).Offset(X, Y)
    def OffsetZ(self, Z):
        '''Method IEnvelope.OffsetZ

           INPUT
            Z                   : double'''
        return super(IEnvelope, self).OffsetZ(Z)
    def OffsetM(self, M):
        '''Method IEnvelope.OffsetM

           INPUT
            M                   : double'''
        return super(IEnvelope, self).OffsetM(M)
    def Expand(self, dx, dy, asRatio):
        '''Method IEnvelope.Expand

           INPUTS
            dx                  : double
            dy                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelope, self).Expand(dx, dy, asRatio)
    def ExpandZ(self, dz, asRatio):
        '''Method IEnvelope.ExpandZ

           INPUTS
            dz                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelope, self).ExpandZ(dz, asRatio)
    def ExpandM(self, dm, asRatio):
        '''Method IEnvelope.ExpandM

           INPUTS
            dm                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelope, self).ExpandM(dm, asRatio)
    def DefineFromWKSPoints(self, Count, Points):
        '''Method IEnvelope.DefineFromWKSPoints

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IEnvelope, self).DefineFromWKSPoints(Count, Points)
    def DefineFromPoints(self, Count, Points):
        '''Method IEnvelope.DefineFromPoints

           INPUTS
            Count               : long
            Points              : IPoint**'''
        return super(IEnvelope, self).DefineFromPoints(Count, Points)
    def QueryWKSCoords(self):
        '''Method IEnvelope.QueryWKSCoords

           OUTPUT
            e                   : WKSEnvelope*'''
        return super(IEnvelope, self).QueryWKSCoords()
    def PutWKSCoords(self, e):
        '''Method IEnvelope.PutWKSCoords

           INPUT
            e                   : WKSEnvelope*'''
        return super(IEnvelope, self).PutWKSCoords(e)
    def PutCoords(self, XMin, YMin, XMax, YMax):
        '''Method IEnvelope.PutCoords

           INPUTS
            XMin                : double
            YMin                : double
            XMax                : double
            YMax                : double'''
        return super(IEnvelope, self).PutCoords(XMin, YMin, XMax, YMax)
    def QueryCoords(self):
        '''Method IEnvelope.QueryCoords

           OUTPUTS
            XMin                : double*
            YMin                : double*
            XMax                : double*
            YMax                : double*'''
        return super(IEnvelope, self).QueryCoords()
    def CenterAt(self, p):
        '''Method IEnvelope.CenterAt

           INPUT
            p                   : IPoint*'''
        return super(IEnvelope, self).CenterAt(p)
    def get_MinMaxAttributes(self):
        '''Method IEnvelope.get_MinMaxAttributes

           OUTPUT
            MinMaxAttributes    : esriPointAttributes**'''
        return super(IEnvelope, self).get_MinMaxAttributes()
    def put_MinMaxAttributes(self, MinMaxAttributes):
        '''Method IEnvelope.put_MinMaxAttributes

           INPUT
            MinMaxAttributes    : esriPointAttributes*'''
        return super(IEnvelope, self).put_MinMaxAttributes(MinMaxAttributes)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IEnvelope, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IEnvelope, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IEnvelope, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IEnvelope, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IEnvelope, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IEnvelope, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IEnvelope, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IEnvelope, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IEnvelope, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IEnvelope, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IEnvelope, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IEnvelope, self).GeoNormalizeFromLongitude(Longitude)
    Depth = property(get_Depth, put_Depth, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    Height = property(get_Height, put_Height, None)
    IsEmpty = property(get_IsEmpty, None, None)
    LowerLeft = property(get_LowerLeft, put_LowerLeft, None)
    LowerRight = property(get_LowerRight, put_LowerRight, None)
    MMax = property(get_MMax, put_MMax, None)
    MMin = property(get_MMin, put_MMin, None)
    MinMaxAttributes = property(get_MinMaxAttributes, put_MinMaxAttributes, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    UpperLeft = property(get_UpperLeft, put_UpperLeft, None)
    UpperRight = property(get_UpperRight, put_UpperRight, None)
    Width = property(get_Width, put_Width, None)
    XMax = property(get_XMax, put_XMax, None)
    XMin = property(get_XMin, put_XMin, None)
    YMax = property(get_YMax, put_YMax, None)
    YMin = property(get_YMin, put_YMin, None)
    ZMax = property(get_ZMax, put_ZMax, None)
    ZMin = property(get_ZMin, put_ZMin, None)

class IProjectedCoordinateSystem4GEN(_esriGeometry.IProjectedCoordinateSystem4GEN):
    _IID = uuid.UUID('d44edb15-8866-4641-872d-3c81f73ac8aa')

    def __init__(self, *args, **kw):
        super(IProjectedCoordinateSystem4GEN, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Name()
    def get_Alias(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Alias

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Alias()
    def get_Abbreviation(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Abbreviation

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Remarks

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method IProjectedCoordinateSystem4GEN.get_FactoryCode

           OUTPUT
            Code                : long*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_FactoryCode()
    def get_SpatialReferenceImpl(self):
        '''Method IProjectedCoordinateSystem4GEN.get_SpatialReferenceImpl

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method IProjectedCoordinateSystem4GEN.get_PrecisionImpl

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method IProjectedCoordinateSystem4GEN.get_PrecisionExImpl

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method IProjectedCoordinateSystem4GEN.HasXYPrecision

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method IProjectedCoordinateSystem4GEN.HasZPrecision

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method IProjectedCoordinateSystem4GEN.HasMPrecision

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method IProjectedCoordinateSystem4GEN.IsPrecisionEqual

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method IProjectedCoordinateSystem4GEN.SetFalseOriginAndUnits

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IProjectedCoordinateSystem4GEN, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method IProjectedCoordinateSystem4GEN.SetZFalseOriginAndUnits

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IProjectedCoordinateSystem4GEN, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method IProjectedCoordinateSystem4GEN.SetMFalseOriginAndUnits

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IProjectedCoordinateSystem4GEN, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method IProjectedCoordinateSystem4GEN.GetFalseOriginAndUnits

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method IProjectedCoordinateSystem4GEN.GetZFalseOriginAndUnits

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method IProjectedCoordinateSystem4GEN.GetMFalseOriginAndUnits

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method IProjectedCoordinateSystem4GEN.GetDomain

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method IProjectedCoordinateSystem4GEN.SetDomain

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IProjectedCoordinateSystem4GEN, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method IProjectedCoordinateSystem4GEN.GetZDomain

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method IProjectedCoordinateSystem4GEN.SetZDomain

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IProjectedCoordinateSystem4GEN, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method IProjectedCoordinateSystem4GEN.GetMDomain

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method IProjectedCoordinateSystem4GEN.SetMDomain

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IProjectedCoordinateSystem4GEN, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method IProjectedCoordinateSystem4GEN.get_ZCoordinateUnit

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IProjectedCoordinateSystem4GEN, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method IProjectedCoordinateSystem4GEN.put_ZCoordinateUnit

           INPUT
            zunit               : ILinearUnit*'''
        return super(IProjectedCoordinateSystem4GEN, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method IProjectedCoordinateSystem4GEN.Changed'''
        return super(IProjectedCoordinateSystem4GEN, self).Changed()
    def get_Usage(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Usage

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Usage()
    def get_GeographicCoordinateSystem(self):
        '''Method IProjectedCoordinateSystem4GEN.get_GeographicCoordinateSystem

           OUTPUT
            geographic          : IGeographicCoordinateSystem**'''
        return super(IProjectedCoordinateSystem4GEN, self).get_GeographicCoordinateSystem()
    def get_Projection(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Projection

           OUTPUT
            Projection          : IProjection**'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Projection()
    def GetParameters(self):
        '''Method IProjectedCoordinateSystem4GEN.GetParameters

           OUTPUT
            parameters          : SAFEARRAY**'''
        return super(IProjectedCoordinateSystem4GEN, self).GetParameters()
    def get_CoordinateUnit(self):
        '''Method IProjectedCoordinateSystem4GEN.get_CoordinateUnit

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IProjectedCoordinateSystem4GEN, self).get_CoordinateUnit()
    def Forward(self):
        '''Method IProjectedCoordinateSystem4GEN.Forward

           OUTPUT
            Points              : SAFEARRAY**'''
        return super(IProjectedCoordinateSystem4GEN, self).Forward()
    def Inverse(self):
        '''Method IProjectedCoordinateSystem4GEN.Inverse

           OUTPUT
            Points              : SAFEARRAY**'''
        return super(IProjectedCoordinateSystem4GEN, self).Inverse()
    def get_HorizonCount(self):
        '''Method IProjectedCoordinateSystem4GEN.get_HorizonCount

           OUTPUT
            HorizonCount        : long*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_HorizonCount()
    def get_Horizon(self, horizonIndex):
        '''Method IProjectedCoordinateSystem4GEN.get_Horizon

           INPUT
            horizonIndex        : long

           OUTPUT
            Horizon             : esriSRHorizon**'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Horizon(horizonIndex)
    def get_CentralMeridian(self, inDegrees):
        '''Method IProjectedCoordinateSystem4GEN.get_CentralMeridian

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            CentralMeridian     : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_CentralMeridian(inDegrees)
    def put_CentralMeridian(self, inDegrees, CentralMeridian):
        '''Method IProjectedCoordinateSystem4GEN.put_CentralMeridian

           INPUTS
            inDegrees           : VARIANT_BOOL
            CentralMeridian     : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_CentralMeridian(inDegrees, CentralMeridian)
    def get_LongitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LongitudeOfOrigin

           OUTPUT
            LongitudeOfOrigin   : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LongitudeOfOrigin()
    def put_LongitudeOfOrigin(self, LongitudeOfOrigin):
        '''Method IProjectedCoordinateSystem4GEN.put_LongitudeOfOrigin

           INPUT
            LongitudeOfOrigin   : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LongitudeOfOrigin(LongitudeOfOrigin)
    def get_LatitudeOf1st(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LatitudeOf1st

           OUTPUT
            standardLongitude1  : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LatitudeOf1st()
    def put_LatitudeOf1st(self, standardLongitude1):
        '''Method IProjectedCoordinateSystem4GEN.put_LatitudeOf1st

           INPUT
            standardLongitude1  : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LatitudeOf1st(standardLongitude1)
    def get_LatitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LatitudeOf2nd

           OUTPUT
            LatitudeOf2nd       : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LatitudeOf2nd()
    def put_LatitudeOf2nd(self, LatitudeOf2nd):
        '''Method IProjectedCoordinateSystem4GEN.put_LatitudeOf2nd

           INPUT
            LatitudeOf2nd       : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LatitudeOf2nd(LatitudeOf2nd)
    def get_FalseEasting(self):
        '''Method IProjectedCoordinateSystem4GEN.get_FalseEasting

           OUTPUT
            FalseEasting        : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_FalseEasting()
    def put_FalseEasting(self, FalseEasting):
        '''Method IProjectedCoordinateSystem4GEN.put_FalseEasting

           INPUT
            FalseEasting        : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_FalseEasting(FalseEasting)
    def get_FalseNorthing(self):
        '''Method IProjectedCoordinateSystem4GEN.get_FalseNorthing

           OUTPUT
            FalseNorthing       : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_FalseNorthing()
    def put_FalseNorthing(self, FalseNorthing):
        '''Method IProjectedCoordinateSystem4GEN.put_FalseNorthing

           INPUT
            FalseNorthing       : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_FalseNorthing(FalseNorthing)
    def get_CentralParallel(self):
        '''Method IProjectedCoordinateSystem4GEN.get_CentralParallel

           OUTPUT
            CentralParallel     : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_CentralParallel()
    def put_CentralParallel(self, CentralParallel):
        '''Method IProjectedCoordinateSystem4GEN.put_CentralParallel

           INPUT
            CentralParallel     : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_CentralParallel(CentralParallel)
    def get_StandardParallel1(self):
        '''Method IProjectedCoordinateSystem4GEN.get_StandardParallel1

           OUTPUT
            StandardParallel1   : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_StandardParallel1()
    def put_StandardParallel1(self, StandardParallel1):
        '''Method IProjectedCoordinateSystem4GEN.put_StandardParallel1

           INPUT
            StandardParallel1   : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_StandardParallel1(StandardParallel1)
    def get_StandardParallel2(self):
        '''Method IProjectedCoordinateSystem4GEN.get_StandardParallel2

           OUTPUT
            StandardParallel2   : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_StandardParallel2()
    def put_StandardParallel2(self, StandardParallel2):
        '''Method IProjectedCoordinateSystem4GEN.put_StandardParallel2

           INPUT
            StandardParallel2   : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_StandardParallel2(StandardParallel2)
    def get_LongitudeOf1st(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LongitudeOf1st

           OUTPUT
            LongitudeOf1st      : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LongitudeOf1st()
    def put_LongitudeOf1st(self, LongitudeOf1st):
        '''Method IProjectedCoordinateSystem4GEN.put_LongitudeOf1st

           INPUT
            LongitudeOf1st      : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LongitudeOf1st(LongitudeOf1st)
    def get_LongitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LongitudeOf2nd

           OUTPUT
            LongitudeOf2nd      : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LongitudeOf2nd()
    def put_LongitudeOf2nd(self, LongitudeOf2nd):
        '''Method IProjectedCoordinateSystem4GEN.put_LongitudeOf2nd

           INPUT
            LongitudeOf2nd      : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LongitudeOf2nd(LongitudeOf2nd)
    def get_ScaleFactor(self):
        '''Method IProjectedCoordinateSystem4GEN.get_ScaleFactor

           OUTPUT
            ScaleFactor         : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_ScaleFactor()
    def put_ScaleFactor(self, ScaleFactor):
        '''Method IProjectedCoordinateSystem4GEN.put_ScaleFactor

           INPUT
            ScaleFactor         : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_ScaleFactor(ScaleFactor)
    def get_Azimuth(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Azimuth

           OUTPUT
            Azimuth             : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IProjectedCoordinateSystem4GEN.put_Azimuth

           INPUT
            Azimuth             : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_Azimuth(Azimuth)
    def get_LongitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LongitudeOfCenter

           OUTPUT
            LongitudeOfCenter   : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LongitudeOfCenter()
    def put_LongitudeOfCenter(self, LongitudeOfCenter):
        '''Method IProjectedCoordinateSystem4GEN.put_LongitudeOfCenter

           INPUT
            LongitudeOfCenter   : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LongitudeOfCenter(LongitudeOfCenter)
    def get_LatitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LatitudeOfCenter

           OUTPUT
            LatitudeOfCenter    : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LatitudeOfCenter()
    def put_LatitudeOfCenter(self, LatitudeOfCenter):
        '''Method IProjectedCoordinateSystem4GEN.put_LatitudeOfCenter

           INPUT
            LatitudeOfCenter    : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LatitudeOfCenter(LatitudeOfCenter)
    def GetGCSParams(self):
        '''Method IProjectedCoordinateSystem4GEN.GetGCSParams

           OUTPUTS
            p_180               : double*
            pDelta              : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetGCSParams()
    def GetHorizon(self):
        '''Method IProjectedCoordinateSystem4GEN.GetHorizon

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem4GEN, self).GetHorizon()
    def GetShiftedHorizon(self, shift):
        '''Method IProjectedCoordinateSystem4GEN.GetShiftedHorizon

           INPUT
            shift               : int

           OUTPUT
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem4GEN, self).GetShiftedHorizon(shift)
    def get_PseudoStandardParallel1(self):
        '''Method IProjectedCoordinateSystem4GEN.get_PseudoStandardParallel1

           OUTPUT
            psp1                : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_PseudoStandardParallel1()
    def put_PseudoStandardParallel1(self, psp1):
        '''Method IProjectedCoordinateSystem4GEN.put_PseudoStandardParallel1

           INPUT
            psp1                : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_PseudoStandardParallel1(psp1)
    def get_XScaleFactor(self):
        '''Method IProjectedCoordinateSystem4GEN.get_XScaleFactor

           OUTPUT
            xs                  : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_XScaleFactor()
    def put_XScaleFactor(self, xs):
        '''Method IProjectedCoordinateSystem4GEN.put_XScaleFactor

           INPUT
            xs                  : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_XScaleFactor(xs)
    def get_YScaleFactor(self):
        '''Method IProjectedCoordinateSystem4GEN.get_YScaleFactor

           OUTPUT
            ys                  : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_YScaleFactor()
    def put_YScaleFactor(self, ys):
        '''Method IProjectedCoordinateSystem4GEN.put_YScaleFactor

           INPUT
            ys                  : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_YScaleFactor(ys)
    def get_Rotation(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Rotation

           OUTPUT
            r                   : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Rotation()
    def put_Rotation(self, r):
        '''Method IProjectedCoordinateSystem4GEN.put_Rotation

           INPUT
            r                   : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_Rotation(r)
    def InverseWithShift(self, shift):
        '''Method IProjectedCoordinateSystem4GEN.InverseWithShift

           INPUT
            shift               : double

           OUTPUT
            Points              : SAFEARRAY**'''
        return super(IProjectedCoordinateSystem4GEN, self).InverseWithShift(shift)
    def PutLinearAndAngularUnits(self, LinearUnit, AngularUnit):
        '''Method IProjectedCoordinateSystem4GEN.PutLinearAndAngularUnits

           INPUTS
            LinearUnit          : ILinearUnit*
            AngularUnit         : IAngularUnit*'''
        return super(IProjectedCoordinateSystem4GEN, self).PutLinearAndAngularUnits(LinearUnit, AngularUnit)
    def get_LatitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem4GEN.get_LatitudeOfOrigin

           OUTPUT
            LatitudeOfOrigin    : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_LatitudeOfOrigin()
    def put_LatitudeOfOrigin(self, LatitudeOfOrigin):
        '''Method IProjectedCoordinateSystem4GEN.put_LatitudeOfOrigin

           INPUT
            LatitudeOfOrigin    : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_LatitudeOfOrigin(LatitudeOfOrigin)
    def IsEqualNoNames(self, pOther):
        '''Method IProjectedCoordinateSystem4GEN.IsEqualNoNames

           INPUT
            pOther              : IProjectedCoordinateSystem*

           OUTPUT
            equalNoNames        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).IsEqualNoNames(pOther)
    def get_Height(self):
        '''Method IProjectedCoordinateSystem4GEN.get_Height

           OUTPUT
            Height              : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).get_Height()
    def put_Height(self, Height):
        '''Method IProjectedCoordinateSystem4GEN.put_Height

           INPUT
            Height              : double'''
        return super(IProjectedCoordinateSystem4GEN, self).put_Height(Height)
    def GetPCSHorizon(self):
        '''Method IProjectedCoordinateSystem4GEN.GetPCSHorizon

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            Horizon             : IGeometry**'''
        return super(IProjectedCoordinateSystem4GEN, self).GetPCSHorizon()
    def GetCentralLongitude(self):
        '''Method IProjectedCoordinateSystem4GEN.GetCentralLongitude

           OUTPUT
            centralLongitude    : double*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetCentralLongitude()
    def GetNorthPole(self):
        '''Method IProjectedCoordinateSystem4GEN.GetNorthPole

           OUTPUT
            pole                : WKSPoint*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetNorthPole()
    def GetSouthPole(self):
        '''Method IProjectedCoordinateSystem4GEN.GetSouthPole

           OUTPUT
            pole                : WKSPoint*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetSouthPole()
    def GetNorthPoleLocation(self):
        '''Method IProjectedCoordinateSystem4GEN.GetNorthPoleLocation

           OUTPUT
            poleLocation        : esriSRPoleLocation*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetNorthPoleLocation()
    def GetSouthPoleLocation(self):
        '''Method IProjectedCoordinateSystem4GEN.GetSouthPoleLocation

           OUTPUT
            poleLocation        : esriSRPoleLocation*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetSouthPoleLocation()
    def GetNorthPoleGeometry(self):
        '''Method IProjectedCoordinateSystem4GEN.GetNorthPoleGeometry

           OUTPUT
            poleGeometry        : esriSRPoleGeometry*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetNorthPoleGeometry()
    def GetSouthPoleGeometry(self):
        '''Method IProjectedCoordinateSystem4GEN.GetSouthPoleGeometry

           OUTPUT
            poleGeometry        : esriSRPoleGeometry*'''
        return super(IProjectedCoordinateSystem4GEN, self).GetSouthPoleGeometry()
    def IsHorizonEdgeDuplicated(self):
        '''Method IProjectedCoordinateSystem4GEN.IsHorizonEdgeDuplicated

           OUTPUT
            isEdgeDuplicated    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).IsHorizonEdgeDuplicated()
    def IsHorizonConvexHull(self):
        '''Method IProjectedCoordinateSystem4GEN.IsHorizonConvexHull

           OUTPUT
            isConvexHull        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).IsHorizonConvexHull()
    def IsHorizonEntireWorld(self):
        '''Method IProjectedCoordinateSystem4GEN.IsHorizonEntireWorld

           OUTPUT
            isWorld             : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4GEN, self).IsHorizonEntireWorld()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    CentralMeridian = property(None, put_CentralMeridian, None)
    CentralParallel = property(get_CentralParallel, put_CentralParallel, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    FalseEasting = property(get_FalseEasting, put_FalseEasting, None)
    FalseNorthing = property(get_FalseNorthing, put_FalseNorthing, None)
    GeographicCoordinateSystem = property(get_GeographicCoordinateSystem, None, None)
    Height = property(get_Height, put_Height, None)
    HorizonCount = property(get_HorizonCount, None, None)
    LatitudeOf1st = property(get_LatitudeOf1st, put_LatitudeOf1st, None)
    LatitudeOf2nd = property(get_LatitudeOf2nd, put_LatitudeOf2nd, None)
    LatitudeOfCenter = property(get_LatitudeOfCenter, put_LatitudeOfCenter, None)
    LatitudeOfOrigin = property(get_LatitudeOfOrigin, put_LatitudeOfOrigin, None)
    LongitudeOf1st = property(get_LongitudeOf1st, put_LongitudeOf1st, None)
    LongitudeOf2nd = property(get_LongitudeOf2nd, put_LongitudeOf2nd, None)
    LongitudeOfCenter = property(get_LongitudeOfCenter, put_LongitudeOfCenter, None)
    LongitudeOfOrigin = property(get_LongitudeOfOrigin, put_LongitudeOfOrigin, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Projection = property(get_Projection, None, None)
    PseudoStandardParallel1 = property(get_PseudoStandardParallel1, put_PseudoStandardParallel1, None)
    Remarks = property(get_Remarks, None, None)
    Rotation = property(get_Rotation, put_Rotation, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    StandardParallel1 = property(get_StandardParallel1, put_StandardParallel1, None)
    StandardParallel2 = property(get_StandardParallel2, put_StandardParallel2, None)
    Usage = property(get_Usage, None, None)
    XScaleFactor = property(get_XScaleFactor, put_XScaleFactor, None)
    YScaleFactor = property(get_YScaleFactor, put_YScaleFactor, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)
    CentralMeridian = IndexProperty(get_CentralMeridian, None)
    Horizon = IndexProperty(get_Horizon, None)

class IConstructUnknownCoordinateSystem(_esriGeometry.IConstructUnknownCoordinateSystem):
    _IID = uuid.UUID('d087590a-822c-4349-95ed-509668930118')
    def ConstructFromEnvelope(self, pEnvelope):
        '''Method IConstructUnknownCoordinateSystem.ConstructFromEnvelope

           INPUT
            pEnvelope           : IEnvelope*'''
        return super(IConstructUnknownCoordinateSystem, self).ConstructFromEnvelope(pEnvelope)

class ISpatialReferenceFactory3(_esriGeometry.ISpatialReferenceFactory3):
    _IID = uuid.UUID('59025a77-2cf9-4ef6-992a-1ea18f0012f0')
    def CreateVerticalCoordinateSystem(self, vcsID):
        '''Method ISpatialReferenceFactory3.CreateVerticalCoordinateSystem

           INPUT
            vcsID               : long

           OUTPUT
            VerticalCoordinateSystem: IVerticalCoordinateSystem**'''
        return super(ISpatialReferenceFactory3, self).CreateVerticalCoordinateSystem(vcsID)
    def CreateVerticalDatum(self, vdID):
        '''Method ISpatialReferenceFactory3.CreateVerticalDatum

           INPUT
            vdID                : long

           OUTPUT
            VerticalDatum       : IVerticalDatum**'''
        return super(ISpatialReferenceFactory3, self).CreateVerticalDatum(vdID)
    def CreatePredefinedVerticalDatums(self):
        '''Method ISpatialReferenceFactory3.CreatePredefinedVerticalDatums

           OUTPUT
            verticalDatums      : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedVerticalDatums()
    def CreatePredefinedVerticalCoordinateSystems(self):
        '''Method ISpatialReferenceFactory3.CreatePredefinedVerticalCoordinateSystems

           OUTPUT
            verticalCoordinateSystems: ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedVerticalCoordinateSystems()
    def CreateVerticalCoordinateSystemFromESRISpatialReference(self, srInfo):
        '''Method ISpatialReferenceFactory3.CreateVerticalCoordinateSystemFromESRISpatialReference

           INPUT
            srInfo              : BSTR

           OUTPUT
            vcs                 : IVerticalCoordinateSystem**'''
        return super(ISpatialReferenceFactory3, self).CreateVerticalCoordinateSystemFromESRISpatialReference(srInfo)
    def CreateESRISpatialReferenceInfo(self, spatRefInfo):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfo

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReferenceInfo**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory3, self).CreateESRISpatialReferenceInfo(spatRefInfo)
    def CreateESRISpatialReferenceInfoFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfoFromPRJ

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory3, self).CreateESRISpatialReferenceInfoFromPRJ(prj)
    def CreateESRISpatialReferenceInfoFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfoFromPRJFile

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory3, self).CreateESRISpatialReferenceInfoFromPRJFile(prjFile)
    def ExportESRISpatialReferenceInfoToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory3.ExportESRISpatialReferenceInfoToPRJFile

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReferenceInfo*'''
        return super(ISpatialReferenceFactory3, self).ExportESRISpatialReferenceInfoToPRJFile(prjFile, SpatialReference)
    def ConstructHighPrecisionSpatialReference(self, inSR, xyDoubler, zDoubler, mDoubler):
        '''Method ISpatialReferenceFactory3.ConstructHighPrecisionSpatialReference

           INPUTS
            inSR                : ISpatialReference*
            xyDoubler           : long
            zDoubler            : long
            mDoubler            : long

           OUTPUT
            outSR               : ISpatialReference**'''
        return super(ISpatialReferenceFactory3, self).ConstructHighPrecisionSpatialReference(inSR, xyDoubler, zDoubler, mDoubler)
    def ConstructLowPrecisionSpatialReference(self, bMatchPrecision, inSR, dataExtent):
        '''Method ISpatialReferenceFactory3.ConstructLowPrecisionSpatialReference

           INPUTS
            bMatchPrecision     : VARIANT_BOOL
            inSR                : ISpatialReference*
            dataExtent          : IEnvelope*

           OUTPUT
            ppOutSR             : ISpatialReference**'''
        return super(ISpatialReferenceFactory3, self).ConstructLowPrecisionSpatialReference(bMatchPrecision, inSR, dataExtent)
    def CreatePredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.CreatePredefinedGeographicTransformations (from ISpatialReferenceFactory2)

           OUTPUT
            geotransformations  : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedGeographicTransformations()
    def CreateSpatialReference(self, srID):
        '''Method ISpatialReferenceFactory2.CreateSpatialReference (from ISpatialReferenceFactory2)

           INPUT
            srID                : long

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(ISpatialReferenceFactory3, self).CreateSpatialReference(srID)
    def get_GeoTransformationDefaults(self):
        '''Method ISpatialReferenceFactory2.get_GeoTransformationDefaults (from ISpatialReferenceFactory2)

           OUTPUT
            GTDefaults          : IGeoTransformationOperationSet**'''
        return super(ISpatialReferenceFactory3, self).get_GeoTransformationDefaults()
    def GetPredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.GetPredefinedGeographicTransformations (from ISpatialReferenceFactory2)

           OUTPUT
            predefinedGTs       : ISet**'''
        return super(ISpatialReferenceFactory3, self).GetPredefinedGeographicTransformations()
    def CreateESRISpatialReference(self, spatRefInfo):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReference (from ISpatialReferenceFactory)

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReference**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory3, self).CreateESRISpatialReference(spatRefInfo)
    def CreateESRISpatialReferenceFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJ (from ISpatialReferenceFactory)

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory3, self).CreateESRISpatialReferenceFromPRJ(prj)
    def CreateESRISpatialReferenceFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJFile (from ISpatialReferenceFactory)

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory3, self).CreateESRISpatialReferenceFromPRJFile(prjFile)
    def ExportESRISpatialReferenceToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory.ExportESRISpatialReferenceToPRJFile (from ISpatialReferenceFactory)

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReference*'''
        return super(ISpatialReferenceFactory3, self).ExportESRISpatialReferenceToPRJFile(prjFile, SpatialReference)
    def CreateUnit(self, unitType):
        '''Method ISpatialReferenceFactory.CreateUnit (from ISpatialReferenceFactory)

           INPUT
            unitType            : long

           OUTPUT
            Unit                : IUnit**'''
        return super(ISpatialReferenceFactory3, self).CreateUnit(unitType)
    def CreateSpheroid(self, spheroidType):
        '''Method ISpatialReferenceFactory.CreateSpheroid (from ISpatialReferenceFactory)

           INPUT
            spheroidType        : long

           OUTPUT
            Spheroid            : ISpheroid**'''
        return super(ISpatialReferenceFactory3, self).CreateSpheroid(spheroidType)
    def CreateDatum(self, datumType):
        '''Method ISpatialReferenceFactory.CreateDatum (from ISpatialReferenceFactory)

           INPUT
            datumType           : long

           OUTPUT
            Datum               : IDatum**'''
        return super(ISpatialReferenceFactory3, self).CreateDatum(datumType)
    def CreatePrimeMeridian(self, primeMeridianType):
        '''Method ISpatialReferenceFactory.CreatePrimeMeridian (from ISpatialReferenceFactory)

           INPUT
            primeMeridianType   : long

           OUTPUT
            PrimeMeridian       : IPrimeMeridian**'''
        return super(ISpatialReferenceFactory3, self).CreatePrimeMeridian(primeMeridianType)
    def CreateProjection(self, projectionType):
        '''Method ISpatialReferenceFactory.CreateProjection (from ISpatialReferenceFactory)

           INPUT
            projectionType      : long

           OUTPUT
            Projection          : IProjection**'''
        return super(ISpatialReferenceFactory3, self).CreateProjection(projectionType)
    def CreateParameter(self, parameterType):
        '''Method ISpatialReferenceFactory.CreateParameter (from ISpatialReferenceFactory)

           INPUT
            parameterType       : long

           OUTPUT
            newParameter        : IParameter**'''
        return super(ISpatialReferenceFactory3, self).CreateParameter(parameterType)
    def CreateProjectedCoordinateSystem(self, pcsType):
        '''Method ISpatialReferenceFactory.CreateProjectedCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            pcsType             : long

           OUTPUT
            pcs                 : IProjectedCoordinateSystem**'''
        return super(ISpatialReferenceFactory3, self).CreateProjectedCoordinateSystem(pcsType)
    def CreateGeographicCoordinateSystem(self, gcsType):
        '''Method ISpatialReferenceFactory.CreateGeographicCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            gcsType             : long

           OUTPUT
            gcs                 : IGeographicCoordinateSystem**'''
        return super(ISpatialReferenceFactory3, self).CreateGeographicCoordinateSystem(gcsType)
    def CreateGeoTransformation(self, gTransformationType):
        '''Method ISpatialReferenceFactory.CreateGeoTransformation (from ISpatialReferenceFactory)

           INPUT
            gTransformationType : long

           OUTPUT
            GeoTransformation   : ITransformation**'''
        return super(ISpatialReferenceFactory3, self).CreateGeoTransformation(gTransformationType)
    def CreatePredefinedProjections(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedProjections (from ISpatialReferenceFactory)

           OUTPUT
            projections         : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedProjections()
    def CreatePredefinedLinearUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedLinearUnits (from ISpatialReferenceFactory)

           OUTPUT
            linearUnits         : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedLinearUnits()
    def CreatePredefinedDatums(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedDatums (from ISpatialReferenceFactory)

           OUTPUT
            datums              : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedDatums()
    def CreatePredefinedAngularUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedAngularUnits (from ISpatialReferenceFactory)

           OUTPUT
            angularUnits        : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedAngularUnits()
    def CreatePredefinedPrimeMeridians(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedPrimeMeridians (from ISpatialReferenceFactory)

           OUTPUT
            primeMeridians      : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedPrimeMeridians()
    def CreatePredefinedSpheroids(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedSpheroids (from ISpatialReferenceFactory)

           OUTPUT
            spheroids           : ISet**'''
        return super(ISpatialReferenceFactory3, self).CreatePredefinedSpheroids()
    GeoTransformationDefaults = property(get_GeoTransformationDefaults, None, None)

class ISpatialReferenceFactory4(_esriGeometry.ISpatialReferenceFactory4):
    _IID = uuid.UUID('d383f512-5377-4dd6-8fcd-5bf05203577d')
    def GetAreaNames(self, typeFilter, nameFilter, returnCategorizedNames, hydrateSR):
        '''Method ISpatialReferenceFactory4.GetAreaNames

           INPUTS
            typeFilter          : esriCoordinateSystemFilter
            nameFilter          : BSTR
            returnCategorizedNames: VARIANT_BOOL
            hydrateSR           : VARIANT_BOOL

           OUTPUT
            ppResults           : IPropertySet**'''
        return super(ISpatialReferenceFactory4, self).GetAreaNames(typeFilter, nameFilter, returnCategorizedNames, hydrateSR)
    def CreateFromAreaName(self, areaName, typeFilter):
        '''Method ISpatialReferenceFactory4.CreateFromAreaName

           INPUTS
            areaName            : BSTR
            typeFilter          : esriCoordinateSystemFilter

           OUTPUT
            ppSRInfo            : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory4, self).CreateFromAreaName(areaName, typeFilter)
    def CreateVerticalCoordinateSystem(self, vcsID):
        '''Method ISpatialReferenceFactory3.CreateVerticalCoordinateSystem (from ISpatialReferenceFactory3)

           INPUT
            vcsID               : long

           OUTPUT
            VerticalCoordinateSystem: IVerticalCoordinateSystem**'''
        return super(ISpatialReferenceFactory4, self).CreateVerticalCoordinateSystem(vcsID)
    def CreateVerticalDatum(self, vdID):
        '''Method ISpatialReferenceFactory3.CreateVerticalDatum (from ISpatialReferenceFactory3)

           INPUT
            vdID                : long

           OUTPUT
            VerticalDatum       : IVerticalDatum**'''
        return super(ISpatialReferenceFactory4, self).CreateVerticalDatum(vdID)
    def CreatePredefinedVerticalDatums(self):
        '''Method ISpatialReferenceFactory3.CreatePredefinedVerticalDatums (from ISpatialReferenceFactory3)

           OUTPUT
            verticalDatums      : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedVerticalDatums()
    def CreatePredefinedVerticalCoordinateSystems(self):
        '''Method ISpatialReferenceFactory3.CreatePredefinedVerticalCoordinateSystems (from ISpatialReferenceFactory3)

           OUTPUT
            verticalCoordinateSystems: ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedVerticalCoordinateSystems()
    def CreateVerticalCoordinateSystemFromESRISpatialReference(self, srInfo):
        '''Method ISpatialReferenceFactory3.CreateVerticalCoordinateSystemFromESRISpatialReference (from ISpatialReferenceFactory3)

           INPUT
            srInfo              : BSTR

           OUTPUT
            vcs                 : IVerticalCoordinateSystem**'''
        return super(ISpatialReferenceFactory4, self).CreateVerticalCoordinateSystemFromESRISpatialReference(srInfo)
    def CreateESRISpatialReferenceInfo(self, spatRefInfo):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfo (from ISpatialReferenceFactory3)

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReferenceInfo**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory4, self).CreateESRISpatialReferenceInfo(spatRefInfo)
    def CreateESRISpatialReferenceInfoFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfoFromPRJ (from ISpatialReferenceFactory3)

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory4, self).CreateESRISpatialReferenceInfoFromPRJ(prj)
    def CreateESRISpatialReferenceInfoFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfoFromPRJFile (from ISpatialReferenceFactory3)

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory4, self).CreateESRISpatialReferenceInfoFromPRJFile(prjFile)
    def ExportESRISpatialReferenceInfoToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory3.ExportESRISpatialReferenceInfoToPRJFile (from ISpatialReferenceFactory3)

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReferenceInfo*'''
        return super(ISpatialReferenceFactory4, self).ExportESRISpatialReferenceInfoToPRJFile(prjFile, SpatialReference)
    def ConstructHighPrecisionSpatialReference(self, inSR, xyDoubler, zDoubler, mDoubler):
        '''Method ISpatialReferenceFactory3.ConstructHighPrecisionSpatialReference (from ISpatialReferenceFactory3)

           INPUTS
            inSR                : ISpatialReference*
            xyDoubler           : long
            zDoubler            : long
            mDoubler            : long

           OUTPUT
            outSR               : ISpatialReference**'''
        return super(ISpatialReferenceFactory4, self).ConstructHighPrecisionSpatialReference(inSR, xyDoubler, zDoubler, mDoubler)
    def ConstructLowPrecisionSpatialReference(self, bMatchPrecision, inSR, dataExtent):
        '''Method ISpatialReferenceFactory3.ConstructLowPrecisionSpatialReference (from ISpatialReferenceFactory3)

           INPUTS
            bMatchPrecision     : VARIANT_BOOL
            inSR                : ISpatialReference*
            dataExtent          : IEnvelope*

           OUTPUT
            ppOutSR             : ISpatialReference**'''
        return super(ISpatialReferenceFactory4, self).ConstructLowPrecisionSpatialReference(bMatchPrecision, inSR, dataExtent)
    def CreatePredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.CreatePredefinedGeographicTransformations (from ISpatialReferenceFactory2)

           OUTPUT
            geotransformations  : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedGeographicTransformations()
    def CreateSpatialReference(self, srID):
        '''Method ISpatialReferenceFactory2.CreateSpatialReference (from ISpatialReferenceFactory2)

           INPUT
            srID                : long

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(ISpatialReferenceFactory4, self).CreateSpatialReference(srID)
    def get_GeoTransformationDefaults(self):
        '''Method ISpatialReferenceFactory2.get_GeoTransformationDefaults (from ISpatialReferenceFactory2)

           OUTPUT
            GTDefaults          : IGeoTransformationOperationSet**'''
        return super(ISpatialReferenceFactory4, self).get_GeoTransformationDefaults()
    def GetPredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.GetPredefinedGeographicTransformations (from ISpatialReferenceFactory2)

           OUTPUT
            predefinedGTs       : ISet**'''
        return super(ISpatialReferenceFactory4, self).GetPredefinedGeographicTransformations()
    def CreateESRISpatialReference(self, spatRefInfo):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReference (from ISpatialReferenceFactory)

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReference**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory4, self).CreateESRISpatialReference(spatRefInfo)
    def CreateESRISpatialReferenceFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJ (from ISpatialReferenceFactory)

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory4, self).CreateESRISpatialReferenceFromPRJ(prj)
    def CreateESRISpatialReferenceFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJFile (from ISpatialReferenceFactory)

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory4, self).CreateESRISpatialReferenceFromPRJFile(prjFile)
    def ExportESRISpatialReferenceToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory.ExportESRISpatialReferenceToPRJFile (from ISpatialReferenceFactory)

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReference*'''
        return super(ISpatialReferenceFactory4, self).ExportESRISpatialReferenceToPRJFile(prjFile, SpatialReference)
    def CreateUnit(self, unitType):
        '''Method ISpatialReferenceFactory.CreateUnit (from ISpatialReferenceFactory)

           INPUT
            unitType            : long

           OUTPUT
            Unit                : IUnit**'''
        return super(ISpatialReferenceFactory4, self).CreateUnit(unitType)
    def CreateSpheroid(self, spheroidType):
        '''Method ISpatialReferenceFactory.CreateSpheroid (from ISpatialReferenceFactory)

           INPUT
            spheroidType        : long

           OUTPUT
            Spheroid            : ISpheroid**'''
        return super(ISpatialReferenceFactory4, self).CreateSpheroid(spheroidType)
    def CreateDatum(self, datumType):
        '''Method ISpatialReferenceFactory.CreateDatum (from ISpatialReferenceFactory)

           INPUT
            datumType           : long

           OUTPUT
            Datum               : IDatum**'''
        return super(ISpatialReferenceFactory4, self).CreateDatum(datumType)
    def CreatePrimeMeridian(self, primeMeridianType):
        '''Method ISpatialReferenceFactory.CreatePrimeMeridian (from ISpatialReferenceFactory)

           INPUT
            primeMeridianType   : long

           OUTPUT
            PrimeMeridian       : IPrimeMeridian**'''
        return super(ISpatialReferenceFactory4, self).CreatePrimeMeridian(primeMeridianType)
    def CreateProjection(self, projectionType):
        '''Method ISpatialReferenceFactory.CreateProjection (from ISpatialReferenceFactory)

           INPUT
            projectionType      : long

           OUTPUT
            Projection          : IProjection**'''
        return super(ISpatialReferenceFactory4, self).CreateProjection(projectionType)
    def CreateParameter(self, parameterType):
        '''Method ISpatialReferenceFactory.CreateParameter (from ISpatialReferenceFactory)

           INPUT
            parameterType       : long

           OUTPUT
            newParameter        : IParameter**'''
        return super(ISpatialReferenceFactory4, self).CreateParameter(parameterType)
    def CreateProjectedCoordinateSystem(self, pcsType):
        '''Method ISpatialReferenceFactory.CreateProjectedCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            pcsType             : long

           OUTPUT
            pcs                 : IProjectedCoordinateSystem**'''
        return super(ISpatialReferenceFactory4, self).CreateProjectedCoordinateSystem(pcsType)
    def CreateGeographicCoordinateSystem(self, gcsType):
        '''Method ISpatialReferenceFactory.CreateGeographicCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            gcsType             : long

           OUTPUT
            gcs                 : IGeographicCoordinateSystem**'''
        return super(ISpatialReferenceFactory4, self).CreateGeographicCoordinateSystem(gcsType)
    def CreateGeoTransformation(self, gTransformationType):
        '''Method ISpatialReferenceFactory.CreateGeoTransformation (from ISpatialReferenceFactory)

           INPUT
            gTransformationType : long

           OUTPUT
            GeoTransformation   : ITransformation**'''
        return super(ISpatialReferenceFactory4, self).CreateGeoTransformation(gTransformationType)
    def CreatePredefinedProjections(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedProjections (from ISpatialReferenceFactory)

           OUTPUT
            projections         : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedProjections()
    def CreatePredefinedLinearUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedLinearUnits (from ISpatialReferenceFactory)

           OUTPUT
            linearUnits         : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedLinearUnits()
    def CreatePredefinedDatums(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedDatums (from ISpatialReferenceFactory)

           OUTPUT
            datums              : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedDatums()
    def CreatePredefinedAngularUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedAngularUnits (from ISpatialReferenceFactory)

           OUTPUT
            angularUnits        : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedAngularUnits()
    def CreatePredefinedPrimeMeridians(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedPrimeMeridians (from ISpatialReferenceFactory)

           OUTPUT
            primeMeridians      : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedPrimeMeridians()
    def CreatePredefinedSpheroids(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedSpheroids (from ISpatialReferenceFactory)

           OUTPUT
            spheroids           : ISet**'''
        return super(ISpatialReferenceFactory4, self).CreatePredefinedSpheroids()
    GeoTransformationDefaults = property(get_GeoTransformationDefaults, None, None)

class ISpatialReferenceFactory5(_esriGeometry.ISpatialReferenceFactory5):
    _IID = uuid.UUID('68d7afce-9129-4569-acf6-32c7a8da077f')

    def __init__(self, *args, **kw):
        super(ISpatialReferenceFactory5, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GeoTransformationFallback(self):
        '''Method ISpatialReferenceFactory5.get_GeoTransformationFallback

           OUTPUT
            vbYesNo             : VARIANT_BOOL*'''
        return super(ISpatialReferenceFactory5, self).get_GeoTransformationFallback()
    def put_GeoTransformationFallback(self, vbYesNo):
        '''Method ISpatialReferenceFactory5.put_GeoTransformationFallback

           INPUT
            vbYesNo             : VARIANT_BOOL'''
        return super(ISpatialReferenceFactory5, self).put_GeoTransformationFallback(vbYesNo)
    def GetAreaNames(self, typeFilter, nameFilter, returnCategorizedNames, hydrateSR):
        '''Method ISpatialReferenceFactory4.GetAreaNames (from ISpatialReferenceFactory4)

           INPUTS
            typeFilter          : esriCoordinateSystemFilter
            nameFilter          : BSTR
            returnCategorizedNames: VARIANT_BOOL
            hydrateSR           : VARIANT_BOOL

           OUTPUT
            ppResults           : IPropertySet**'''
        return super(ISpatialReferenceFactory5, self).GetAreaNames(typeFilter, nameFilter, returnCategorizedNames, hydrateSR)
    def CreateFromAreaName(self, areaName, typeFilter):
        '''Method ISpatialReferenceFactory4.CreateFromAreaName (from ISpatialReferenceFactory4)

           INPUTS
            areaName            : BSTR
            typeFilter          : esriCoordinateSystemFilter

           OUTPUT
            ppSRInfo            : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory5, self).CreateFromAreaName(areaName, typeFilter)
    def CreateVerticalCoordinateSystem(self, vcsID):
        '''Method ISpatialReferenceFactory3.CreateVerticalCoordinateSystem (from ISpatialReferenceFactory3)

           INPUT
            vcsID               : long

           OUTPUT
            VerticalCoordinateSystem: IVerticalCoordinateSystem**'''
        return super(ISpatialReferenceFactory5, self).CreateVerticalCoordinateSystem(vcsID)
    def CreateVerticalDatum(self, vdID):
        '''Method ISpatialReferenceFactory3.CreateVerticalDatum (from ISpatialReferenceFactory3)

           INPUT
            vdID                : long

           OUTPUT
            VerticalDatum       : IVerticalDatum**'''
        return super(ISpatialReferenceFactory5, self).CreateVerticalDatum(vdID)
    def CreatePredefinedVerticalDatums(self):
        '''Method ISpatialReferenceFactory3.CreatePredefinedVerticalDatums (from ISpatialReferenceFactory3)

           OUTPUT
            verticalDatums      : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedVerticalDatums()
    def CreatePredefinedVerticalCoordinateSystems(self):
        '''Method ISpatialReferenceFactory3.CreatePredefinedVerticalCoordinateSystems (from ISpatialReferenceFactory3)

           OUTPUT
            verticalCoordinateSystems: ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedVerticalCoordinateSystems()
    def CreateVerticalCoordinateSystemFromESRISpatialReference(self, srInfo):
        '''Method ISpatialReferenceFactory3.CreateVerticalCoordinateSystemFromESRISpatialReference (from ISpatialReferenceFactory3)

           INPUT
            srInfo              : BSTR

           OUTPUT
            vcs                 : IVerticalCoordinateSystem**'''
        return super(ISpatialReferenceFactory5, self).CreateVerticalCoordinateSystemFromESRISpatialReference(srInfo)
    def CreateESRISpatialReferenceInfo(self, spatRefInfo):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfo (from ISpatialReferenceFactory3)

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReferenceInfo**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory5, self).CreateESRISpatialReferenceInfo(spatRefInfo)
    def CreateESRISpatialReferenceInfoFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfoFromPRJ (from ISpatialReferenceFactory3)

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory5, self).CreateESRISpatialReferenceInfoFromPRJ(prj)
    def CreateESRISpatialReferenceInfoFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory3.CreateESRISpatialReferenceInfoFromPRJFile (from ISpatialReferenceFactory3)

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReferenceInfo**'''
        return super(ISpatialReferenceFactory5, self).CreateESRISpatialReferenceInfoFromPRJFile(prjFile)
    def ExportESRISpatialReferenceInfoToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory3.ExportESRISpatialReferenceInfoToPRJFile (from ISpatialReferenceFactory3)

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReferenceInfo*'''
        return super(ISpatialReferenceFactory5, self).ExportESRISpatialReferenceInfoToPRJFile(prjFile, SpatialReference)
    def ConstructHighPrecisionSpatialReference(self, inSR, xyDoubler, zDoubler, mDoubler):
        '''Method ISpatialReferenceFactory3.ConstructHighPrecisionSpatialReference (from ISpatialReferenceFactory3)

           INPUTS
            inSR                : ISpatialReference*
            xyDoubler           : long
            zDoubler            : long
            mDoubler            : long

           OUTPUT
            outSR               : ISpatialReference**'''
        return super(ISpatialReferenceFactory5, self).ConstructHighPrecisionSpatialReference(inSR, xyDoubler, zDoubler, mDoubler)
    def ConstructLowPrecisionSpatialReference(self, bMatchPrecision, inSR, dataExtent):
        '''Method ISpatialReferenceFactory3.ConstructLowPrecisionSpatialReference (from ISpatialReferenceFactory3)

           INPUTS
            bMatchPrecision     : VARIANT_BOOL
            inSR                : ISpatialReference*
            dataExtent          : IEnvelope*

           OUTPUT
            ppOutSR             : ISpatialReference**'''
        return super(ISpatialReferenceFactory5, self).ConstructLowPrecisionSpatialReference(bMatchPrecision, inSR, dataExtent)
    def CreatePredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.CreatePredefinedGeographicTransformations (from ISpatialReferenceFactory2)

           OUTPUT
            geotransformations  : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedGeographicTransformations()
    def CreateSpatialReference(self, srID):
        '''Method ISpatialReferenceFactory2.CreateSpatialReference (from ISpatialReferenceFactory2)

           INPUT
            srID                : long

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(ISpatialReferenceFactory5, self).CreateSpatialReference(srID)
    def get_GeoTransformationDefaults(self):
        '''Method ISpatialReferenceFactory2.get_GeoTransformationDefaults (from ISpatialReferenceFactory2)

           OUTPUT
            GTDefaults          : IGeoTransformationOperationSet**'''
        return super(ISpatialReferenceFactory5, self).get_GeoTransformationDefaults()
    def GetPredefinedGeographicTransformations(self):
        '''Method ISpatialReferenceFactory2.GetPredefinedGeographicTransformations (from ISpatialReferenceFactory2)

           OUTPUT
            predefinedGTs       : ISet**'''
        return super(ISpatialReferenceFactory5, self).GetPredefinedGeographicTransformations()
    def CreateESRISpatialReference(self, spatRefInfo):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReference (from ISpatialReferenceFactory)

           INPUT
            spatRefInfo         : BSTR

           OUTPUTS
            SpatialReference    : ISpatialReference**
            cBytesRead          : long*'''
        return super(ISpatialReferenceFactory5, self).CreateESRISpatialReference(spatRefInfo)
    def CreateESRISpatialReferenceFromPRJ(self, prj):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJ (from ISpatialReferenceFactory)

           INPUT
            prj                 : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory5, self).CreateESRISpatialReferenceFromPRJ(prj)
    def CreateESRISpatialReferenceFromPRJFile(self, prjFile):
        '''Method ISpatialReferenceFactory.CreateESRISpatialReferenceFromPRJFile (from ISpatialReferenceFactory)

           INPUT
            prjFile             : BSTR

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(ISpatialReferenceFactory5, self).CreateESRISpatialReferenceFromPRJFile(prjFile)
    def ExportESRISpatialReferenceToPRJFile(self, prjFile, SpatialReference):
        '''Method ISpatialReferenceFactory.ExportESRISpatialReferenceToPRJFile (from ISpatialReferenceFactory)

           INPUTS
            prjFile             : BSTR
            SpatialReference    : ISpatialReference*'''
        return super(ISpatialReferenceFactory5, self).ExportESRISpatialReferenceToPRJFile(prjFile, SpatialReference)
    def CreateUnit(self, unitType):
        '''Method ISpatialReferenceFactory.CreateUnit (from ISpatialReferenceFactory)

           INPUT
            unitType            : long

           OUTPUT
            Unit                : IUnit**'''
        return super(ISpatialReferenceFactory5, self).CreateUnit(unitType)
    def CreateSpheroid(self, spheroidType):
        '''Method ISpatialReferenceFactory.CreateSpheroid (from ISpatialReferenceFactory)

           INPUT
            spheroidType        : long

           OUTPUT
            Spheroid            : ISpheroid**'''
        return super(ISpatialReferenceFactory5, self).CreateSpheroid(spheroidType)
    def CreateDatum(self, datumType):
        '''Method ISpatialReferenceFactory.CreateDatum (from ISpatialReferenceFactory)

           INPUT
            datumType           : long

           OUTPUT
            Datum               : IDatum**'''
        return super(ISpatialReferenceFactory5, self).CreateDatum(datumType)
    def CreatePrimeMeridian(self, primeMeridianType):
        '''Method ISpatialReferenceFactory.CreatePrimeMeridian (from ISpatialReferenceFactory)

           INPUT
            primeMeridianType   : long

           OUTPUT
            PrimeMeridian       : IPrimeMeridian**'''
        return super(ISpatialReferenceFactory5, self).CreatePrimeMeridian(primeMeridianType)
    def CreateProjection(self, projectionType):
        '''Method ISpatialReferenceFactory.CreateProjection (from ISpatialReferenceFactory)

           INPUT
            projectionType      : long

           OUTPUT
            Projection          : IProjection**'''
        return super(ISpatialReferenceFactory5, self).CreateProjection(projectionType)
    def CreateParameter(self, parameterType):
        '''Method ISpatialReferenceFactory.CreateParameter (from ISpatialReferenceFactory)

           INPUT
            parameterType       : long

           OUTPUT
            newParameter        : IParameter**'''
        return super(ISpatialReferenceFactory5, self).CreateParameter(parameterType)
    def CreateProjectedCoordinateSystem(self, pcsType):
        '''Method ISpatialReferenceFactory.CreateProjectedCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            pcsType             : long

           OUTPUT
            pcs                 : IProjectedCoordinateSystem**'''
        return super(ISpatialReferenceFactory5, self).CreateProjectedCoordinateSystem(pcsType)
    def CreateGeographicCoordinateSystem(self, gcsType):
        '''Method ISpatialReferenceFactory.CreateGeographicCoordinateSystem (from ISpatialReferenceFactory)

           INPUT
            gcsType             : long

           OUTPUT
            gcs                 : IGeographicCoordinateSystem**'''
        return super(ISpatialReferenceFactory5, self).CreateGeographicCoordinateSystem(gcsType)
    def CreateGeoTransformation(self, gTransformationType):
        '''Method ISpatialReferenceFactory.CreateGeoTransformation (from ISpatialReferenceFactory)

           INPUT
            gTransformationType : long

           OUTPUT
            GeoTransformation   : ITransformation**'''
        return super(ISpatialReferenceFactory5, self).CreateGeoTransformation(gTransformationType)
    def CreatePredefinedProjections(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedProjections (from ISpatialReferenceFactory)

           OUTPUT
            projections         : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedProjections()
    def CreatePredefinedLinearUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedLinearUnits (from ISpatialReferenceFactory)

           OUTPUT
            linearUnits         : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedLinearUnits()
    def CreatePredefinedDatums(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedDatums (from ISpatialReferenceFactory)

           OUTPUT
            datums              : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedDatums()
    def CreatePredefinedAngularUnits(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedAngularUnits (from ISpatialReferenceFactory)

           OUTPUT
            angularUnits        : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedAngularUnits()
    def CreatePredefinedPrimeMeridians(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedPrimeMeridians (from ISpatialReferenceFactory)

           OUTPUT
            primeMeridians      : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedPrimeMeridians()
    def CreatePredefinedSpheroids(self):
        '''Method ISpatialReferenceFactory.CreatePredefinedSpheroids (from ISpatialReferenceFactory)

           OUTPUT
            spheroids           : ISet**'''
        return super(ISpatialReferenceFactory5, self).CreatePredefinedSpheroids()
    GeoTransformationDefaults = property(get_GeoTransformationDefaults, None, None)
    GeoTransformationFallback = property(get_GeoTransformationFallback, put_GeoTransformationFallback, None)

class ISpatialReference3(_esriGeometry.ISpatialReference3):
    _IID = uuid.UUID('170572bf-545c-45a8-a45d-0d33c79441c7')

    def __init__(self, *args, **kw):
        super(ISpatialReference3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_VerticalCoordinateSystem(self):
        '''Method ISpatialReference3.get_VerticalCoordinateSystem

           OUTPUT
            vcs                 : IVerticalCoordinateSystem**'''
        return super(ISpatialReference3, self).get_VerticalCoordinateSystem()
    def putref_VerticalCoordinateSystem(self, vcs):
        '''Method ISpatialReference3.putref_VerticalCoordinateSystem

           INPUT
            vcs                 : IVerticalCoordinateSystem*'''
        return super(ISpatialReference3, self).putref_VerticalCoordinateSystem(vcs)
    def ProjectionHint(self, Geometry, targetSR):
        '''Method ISpatialReference3.ProjectionHint

           INPUTS
            Geometry            : IGeometry*
            targetSR            : ISpatialReference*

           OUTPUTS
            direction           : esriTransformDirection*
            pXForm              : ITransformation**
            ProjectionHint      : long*'''
        return super(ISpatialReference3, self).ProjectionHint(Geometry, targetSR)
    def IsXYPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2.IsXYPrecisionEqual (from ISpatialReference2)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsXYPrecisionEqual  : VARIANT_BOOL*'''
        return super(ISpatialReference3, self).IsXYPrecisionEqual(otherSR)
    def IsMPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2.IsMPrecisionEqual (from ISpatialReference2)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsMPrecisionEqual   : VARIANT_BOOL*'''
        return super(ISpatialReference3, self).IsMPrecisionEqual(otherSR)
    def IsZPrecisionEqual(self, otherSR):
        '''Method ISpatialReference2.IsZPrecisionEqual (from ISpatialReference2)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsZPrecisionEqual   : VARIANT_BOOL*'''
        return super(ISpatialReference3, self).IsZPrecisionEqual(otherSR)
    def ApplyXYPrecision(self, cPoints, Points):
        '''Method ISpatialReference2.ApplyXYPrecision (from ISpatialReference2)

           INPUTS
            cPoints             : long
            Points              : WKSPoint*'''
        return super(ISpatialReference3, self).ApplyXYPrecision(cPoints, Points)
    def ApplyPrecision(self, cPoints, Points, ms, zs):
        '''Method ISpatialReference2.ApplyPrecision (from ISpatialReference2)

           INPUTS
            cPoints             : long
            Points              : WKSPoint*
            ms                  : double*
            zs                  : double*'''
        return super(ISpatialReference3, self).ApplyPrecision(cPoints, Points, ms, zs)
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(ISpatialReference3, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(ISpatialReference3, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(ISpatialReference3, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(ISpatialReference3, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference3, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(ISpatialReference3, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(ISpatialReference3, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(ISpatialReference3, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(ISpatialReference3, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(ISpatialReference3, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(ISpatialReference3, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(ISpatialReference3, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(ISpatialReference3, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(ISpatialReference3, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(ISpatialReference3, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(ISpatialReference3, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(ISpatialReference3, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(ISpatialReference3, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(ISpatialReference3, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(ISpatialReference3, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(ISpatialReference3, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(ISpatialReference3, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(ISpatialReference3, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(ISpatialReference3, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(ISpatialReference3, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(ISpatialReference3, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(ISpatialReference3, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Remarks = property(get_Remarks, None, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    VerticalCoordinateSystem = property(get_VerticalCoordinateSystem, putref_VerticalCoordinateSystem, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)

class IProjectedCoordinateSystem2(_esriGeometry.IProjectedCoordinateSystem2):
    _IID = uuid.UUID('a690307d-6c11-43a1-966a-9e8db0672033')

    def __init__(self, *args, **kw):
        super(IProjectedCoordinateSystem2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LongitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LongitudeOfCenter

           OUTPUT
            LongitudeOfCenter   : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LongitudeOfCenter()
    def put_LongitudeOfCenter(self, LongitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LongitudeOfCenter

           INPUT
            LongitudeOfCenter   : double'''
        return super(IProjectedCoordinateSystem2, self).put_LongitudeOfCenter(LongitudeOfCenter)
    def get_LatitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfCenter

           OUTPUT
            LatitudeOfCenter    : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LatitudeOfCenter()
    def put_LatitudeOfCenter(self, LatitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfCenter

           INPUT
            LatitudeOfCenter    : double'''
        return super(IProjectedCoordinateSystem2, self).put_LatitudeOfCenter(LatitudeOfCenter)
    def GetGCSParams(self):
        '''Method IProjectedCoordinateSystem2.GetGCSParams

           OUTPUTS
            p_180               : double*
            pDelta              : double*'''
        return super(IProjectedCoordinateSystem2, self).GetGCSParams()
    def GetHorizon(self):
        '''Method IProjectedCoordinateSystem2.GetHorizon

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem2, self).GetHorizon()
    def GetShiftedHorizon(self, shift):
        '''Method IProjectedCoordinateSystem2.GetShiftedHorizon

           INPUT
            shift               : int

           OUTPUT
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem2, self).GetShiftedHorizon(shift)
    def get_PseudoStandardParallel1(self):
        '''Method IProjectedCoordinateSystem2.get_PseudoStandardParallel1

           OUTPUT
            psp1                : double*'''
        return super(IProjectedCoordinateSystem2, self).get_PseudoStandardParallel1()
    def put_PseudoStandardParallel1(self, psp1):
        '''Method IProjectedCoordinateSystem2.put_PseudoStandardParallel1

           INPUT
            psp1                : double'''
        return super(IProjectedCoordinateSystem2, self).put_PseudoStandardParallel1(psp1)
    def get_XScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_XScaleFactor

           OUTPUT
            xs                  : double*'''
        return super(IProjectedCoordinateSystem2, self).get_XScaleFactor()
    def put_XScaleFactor(self, xs):
        '''Method IProjectedCoordinateSystem2.put_XScaleFactor

           INPUT
            xs                  : double'''
        return super(IProjectedCoordinateSystem2, self).put_XScaleFactor(xs)
    def get_YScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_YScaleFactor

           OUTPUT
            ys                  : double*'''
        return super(IProjectedCoordinateSystem2, self).get_YScaleFactor()
    def put_YScaleFactor(self, ys):
        '''Method IProjectedCoordinateSystem2.put_YScaleFactor

           INPUT
            ys                  : double'''
        return super(IProjectedCoordinateSystem2, self).put_YScaleFactor(ys)
    def get_Rotation(self):
        '''Method IProjectedCoordinateSystem2.get_Rotation

           OUTPUT
            r                   : double*'''
        return super(IProjectedCoordinateSystem2, self).get_Rotation()
    def put_Rotation(self, r):
        '''Method IProjectedCoordinateSystem2.put_Rotation

           INPUT
            r                   : double'''
        return super(IProjectedCoordinateSystem2, self).put_Rotation(r)
    def InverseWithShift(self, shift, Count, Points):
        '''Method IProjectedCoordinateSystem2.InverseWithShift

           INPUTS
            shift               : double
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem2, self).InverseWithShift(shift, Count, Points)
    def PutLinearAndAngularUnits(self, LinearUnit, AngularUnit):
        '''Method IProjectedCoordinateSystem2.PutLinearAndAngularUnits

           INPUTS
            LinearUnit          : ILinearUnit*
            AngularUnit         : IAngularUnit*'''
        return super(IProjectedCoordinateSystem2, self).PutLinearAndAngularUnits(LinearUnit, AngularUnit)
    def get_LatitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfOrigin

           OUTPUT
            LatitudeOfOrigin    : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LatitudeOfOrigin()
    def put_LatitudeOfOrigin(self, LatitudeOfOrigin):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfOrigin

           INPUT
            LatitudeOfOrigin    : double'''
        return super(IProjectedCoordinateSystem2, self).put_LatitudeOfOrigin(LatitudeOfOrigin)
    def IsEqualNoNames(self, pOther):
        '''Method IProjectedCoordinateSystem2.IsEqualNoNames

           INPUT
            pOther              : IProjectedCoordinateSystem*

           OUTPUT
            equalNoNames        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem2, self).IsEqualNoNames(pOther)
    def get_Usage(self):
        '''Method IProjectedCoordinateSystem.get_Usage (from IProjectedCoordinateSystem)

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjectedCoordinateSystem2, self).get_Usage()
    def get_GeographicCoordinateSystem(self):
        '''Method IProjectedCoordinateSystem.get_GeographicCoordinateSystem (from IProjectedCoordinateSystem)

           OUTPUT
            geographic          : IGeographicCoordinateSystem**'''
        return super(IProjectedCoordinateSystem2, self).get_GeographicCoordinateSystem()
    def get_Projection(self):
        '''Method IProjectedCoordinateSystem.get_Projection (from IProjectedCoordinateSystem)

           OUTPUT
            Projection          : IProjection**'''
        return super(IProjectedCoordinateSystem2, self).get_Projection()
    def GetParameters(self):
        '''Method IProjectedCoordinateSystem.GetParameters (from IProjectedCoordinateSystem)

           OUTPUT
            parameters          : IParameter**'''
        return super(IProjectedCoordinateSystem2, self).GetParameters()
    def get_CoordinateUnit(self):
        '''Method IProjectedCoordinateSystem.get_CoordinateUnit (from IProjectedCoordinateSystem)

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IProjectedCoordinateSystem2, self).get_CoordinateUnit()
    def Forward(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Forward (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem2, self).Forward(Count, Points)
    def Inverse(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Inverse (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem2, self).Inverse(Count, Points)
    def get_HorizonCount(self):
        '''Method IProjectedCoordinateSystem.get_HorizonCount (from IProjectedCoordinateSystem)

           OUTPUT
            HorizonCount        : long*'''
        return super(IProjectedCoordinateSystem2, self).get_HorizonCount()
    def get_Horizon(self, horizonIndex):
        '''Method IProjectedCoordinateSystem.get_Horizon (from IProjectedCoordinateSystem)

           INPUT
            horizonIndex        : long

           OUTPUT
            Horizon             : esriSRHorizon**'''
        return super(IProjectedCoordinateSystem2, self).get_Horizon(horizonIndex)
    def get_CentralMeridian(self, inDegrees):
        '''Method IProjectedCoordinateSystem.get_CentralMeridian (from IProjectedCoordinateSystem)

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            CentralMeridian     : double*'''
        return super(IProjectedCoordinateSystem2, self).get_CentralMeridian(inDegrees)
    def put_CentralMeridian(self, inDegrees, CentralMeridian):
        '''Method IProjectedCoordinateSystem.put_CentralMeridian (from IProjectedCoordinateSystem)

           INPUTS
            inDegrees           : VARIANT_BOOL
            CentralMeridian     : double'''
        return super(IProjectedCoordinateSystem2, self).put_CentralMeridian(inDegrees, CentralMeridian)
    def get_LongitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOfOrigin   : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LongitudeOfOrigin()
    def put_LongitudeOfOrigin(self, LongitudeOfOrigin):
        '''Method IProjectedCoordinateSystem.put_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOfOrigin   : double'''
        return super(IProjectedCoordinateSystem2, self).put_LongitudeOfOrigin(LongitudeOfOrigin)
    def get_LatitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            standardLongitude1  : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LatitudeOf1st()
    def put_LatitudeOf1st(self, standardLongitude1):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            standardLongitude1  : double'''
        return super(IProjectedCoordinateSystem2, self).put_LatitudeOf1st(standardLongitude1)
    def get_LatitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LatitudeOf2nd       : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LatitudeOf2nd()
    def put_LatitudeOf2nd(self, LatitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LatitudeOf2nd       : double'''
        return super(IProjectedCoordinateSystem2, self).put_LatitudeOf2nd(LatitudeOf2nd)
    def get_FalseEasting(self):
        '''Method IProjectedCoordinateSystem.get_FalseEasting (from IProjectedCoordinateSystem)

           OUTPUT
            FalseEasting        : double*'''
        return super(IProjectedCoordinateSystem2, self).get_FalseEasting()
    def put_FalseEasting(self, FalseEasting):
        '''Method IProjectedCoordinateSystem.put_FalseEasting (from IProjectedCoordinateSystem)

           INPUT
            FalseEasting        : double'''
        return super(IProjectedCoordinateSystem2, self).put_FalseEasting(FalseEasting)
    def get_FalseNorthing(self):
        '''Method IProjectedCoordinateSystem.get_FalseNorthing (from IProjectedCoordinateSystem)

           OUTPUT
            FalseNorthing       : double*'''
        return super(IProjectedCoordinateSystem2, self).get_FalseNorthing()
    def put_FalseNorthing(self, FalseNorthing):
        '''Method IProjectedCoordinateSystem.put_FalseNorthing (from IProjectedCoordinateSystem)

           INPUT
            FalseNorthing       : double'''
        return super(IProjectedCoordinateSystem2, self).put_FalseNorthing(FalseNorthing)
    def get_CentralParallel(self):
        '''Method IProjectedCoordinateSystem.get_CentralParallel (from IProjectedCoordinateSystem)

           OUTPUT
            CentralParallel     : double*'''
        return super(IProjectedCoordinateSystem2, self).get_CentralParallel()
    def put_CentralParallel(self, CentralParallel):
        '''Method IProjectedCoordinateSystem.put_CentralParallel (from IProjectedCoordinateSystem)

           INPUT
            CentralParallel     : double'''
        return super(IProjectedCoordinateSystem2, self).put_CentralParallel(CentralParallel)
    def get_StandardParallel1(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel1 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel1   : double*'''
        return super(IProjectedCoordinateSystem2, self).get_StandardParallel1()
    def put_StandardParallel1(self, StandardParallel1):
        '''Method IProjectedCoordinateSystem.put_StandardParallel1 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel1   : double'''
        return super(IProjectedCoordinateSystem2, self).put_StandardParallel1(StandardParallel1)
    def get_StandardParallel2(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel2 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel2   : double*'''
        return super(IProjectedCoordinateSystem2, self).get_StandardParallel2()
    def put_StandardParallel2(self, StandardParallel2):
        '''Method IProjectedCoordinateSystem.put_StandardParallel2 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel2   : double'''
        return super(IProjectedCoordinateSystem2, self).put_StandardParallel2(StandardParallel2)
    def get_LongitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf1st      : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LongitudeOf1st()
    def put_LongitudeOf1st(self, LongitudeOf1st):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf1st      : double'''
        return super(IProjectedCoordinateSystem2, self).put_LongitudeOf1st(LongitudeOf1st)
    def get_LongitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf2nd      : double*'''
        return super(IProjectedCoordinateSystem2, self).get_LongitudeOf2nd()
    def put_LongitudeOf2nd(self, LongitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf2nd      : double'''
        return super(IProjectedCoordinateSystem2, self).put_LongitudeOf2nd(LongitudeOf2nd)
    def get_ScaleFactor(self):
        '''Method IProjectedCoordinateSystem.get_ScaleFactor (from IProjectedCoordinateSystem)

           OUTPUT
            ScaleFactor         : double*'''
        return super(IProjectedCoordinateSystem2, self).get_ScaleFactor()
    def put_ScaleFactor(self, ScaleFactor):
        '''Method IProjectedCoordinateSystem.put_ScaleFactor (from IProjectedCoordinateSystem)

           INPUT
            ScaleFactor         : double'''
        return super(IProjectedCoordinateSystem2, self).put_ScaleFactor(ScaleFactor)
    def get_Azimuth(self):
        '''Method IProjectedCoordinateSystem.get_Azimuth (from IProjectedCoordinateSystem)

           OUTPUT
            Azimuth             : double*'''
        return super(IProjectedCoordinateSystem2, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IProjectedCoordinateSystem.put_Azimuth (from IProjectedCoordinateSystem)

           INPUT
            Azimuth             : double'''
        return super(IProjectedCoordinateSystem2, self).put_Azimuth(Azimuth)
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IProjectedCoordinateSystem2, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IProjectedCoordinateSystem2, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IProjectedCoordinateSystem2, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem2, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem2, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem2, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem2, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IProjectedCoordinateSystem2, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IProjectedCoordinateSystem2, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IProjectedCoordinateSystem2, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IProjectedCoordinateSystem2, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IProjectedCoordinateSystem2, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IProjectedCoordinateSystem2, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IProjectedCoordinateSystem2, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IProjectedCoordinateSystem2, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IProjectedCoordinateSystem2, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IProjectedCoordinateSystem2, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IProjectedCoordinateSystem2, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IProjectedCoordinateSystem2, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IProjectedCoordinateSystem2, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(IProjectedCoordinateSystem2, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(IProjectedCoordinateSystem2, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IProjectedCoordinateSystem2, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjectedCoordinateSystem2, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjectedCoordinateSystem2, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjectedCoordinateSystem2, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IProjectedCoordinateSystem2, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    CentralMeridian = property(None, put_CentralMeridian, None)
    CentralParallel = property(get_CentralParallel, put_CentralParallel, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    FalseEasting = property(get_FalseEasting, put_FalseEasting, None)
    FalseNorthing = property(get_FalseNorthing, put_FalseNorthing, None)
    GeographicCoordinateSystem = property(get_GeographicCoordinateSystem, None, None)
    HorizonCount = property(get_HorizonCount, None, None)
    LatitudeOf1st = property(get_LatitudeOf1st, put_LatitudeOf1st, None)
    LatitudeOf2nd = property(get_LatitudeOf2nd, put_LatitudeOf2nd, None)
    LatitudeOfCenter = property(get_LatitudeOfCenter, put_LatitudeOfCenter, None)
    LatitudeOfOrigin = property(get_LatitudeOfOrigin, put_LatitudeOfOrigin, None)
    LongitudeOf1st = property(get_LongitudeOf1st, put_LongitudeOf1st, None)
    LongitudeOf2nd = property(get_LongitudeOf2nd, put_LongitudeOf2nd, None)
    LongitudeOfCenter = property(get_LongitudeOfCenter, put_LongitudeOfCenter, None)
    LongitudeOfOrigin = property(get_LongitudeOfOrigin, put_LongitudeOfOrigin, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Projection = property(get_Projection, None, None)
    PseudoStandardParallel1 = property(get_PseudoStandardParallel1, put_PseudoStandardParallel1, None)
    Remarks = property(get_Remarks, None, None)
    Rotation = property(get_Rotation, put_Rotation, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    StandardParallel1 = property(get_StandardParallel1, put_StandardParallel1, None)
    StandardParallel2 = property(get_StandardParallel2, put_StandardParallel2, None)
    Usage = property(get_Usage, None, None)
    XScaleFactor = property(get_XScaleFactor, put_XScaleFactor, None)
    YScaleFactor = property(get_YScaleFactor, put_YScaleFactor, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)
    CentralMeridian = IndexProperty(get_CentralMeridian, None)
    Horizon = IndexProperty(get_Horizon, None)

class IProjectedCoordinateSystem3(_esriGeometry.IProjectedCoordinateSystem3):
    _IID = uuid.UUID('d9b13c10-5c5e-11d5-9fee-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IProjectedCoordinateSystem3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Height(self):
        '''Method IProjectedCoordinateSystem3.get_Height

           OUTPUT
            Height              : double*'''
        return super(IProjectedCoordinateSystem3, self).get_Height()
    def put_Height(self, Height):
        '''Method IProjectedCoordinateSystem3.put_Height

           INPUT
            Height              : double'''
        return super(IProjectedCoordinateSystem3, self).put_Height(Height)
    def get_LongitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LongitudeOfCenter (from IProjectedCoordinateSystem2)

           OUTPUT
            LongitudeOfCenter   : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LongitudeOfCenter()
    def put_LongitudeOfCenter(self, LongitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LongitudeOfCenter (from IProjectedCoordinateSystem2)

           INPUT
            LongitudeOfCenter   : double'''
        return super(IProjectedCoordinateSystem3, self).put_LongitudeOfCenter(LongitudeOfCenter)
    def get_LatitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfCenter (from IProjectedCoordinateSystem2)

           OUTPUT
            LatitudeOfCenter    : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LatitudeOfCenter()
    def put_LatitudeOfCenter(self, LatitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfCenter (from IProjectedCoordinateSystem2)

           INPUT
            LatitudeOfCenter    : double'''
        return super(IProjectedCoordinateSystem3, self).put_LatitudeOfCenter(LatitudeOfCenter)
    def GetGCSParams(self):
        '''Method IProjectedCoordinateSystem2.GetGCSParams (from IProjectedCoordinateSystem2)

           OUTPUTS
            p_180               : double*
            pDelta              : double*'''
        return super(IProjectedCoordinateSystem3, self).GetGCSParams()
    def GetHorizon(self):
        '''Method IProjectedCoordinateSystem2.GetHorizon (from IProjectedCoordinateSystem2)

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem3, self).GetHorizon()
    def GetShiftedHorizon(self, shift):
        '''Method IProjectedCoordinateSystem2.GetShiftedHorizon (from IProjectedCoordinateSystem2)

           INPUT
            shift               : int

           OUTPUT
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem3, self).GetShiftedHorizon(shift)
    def get_PseudoStandardParallel1(self):
        '''Method IProjectedCoordinateSystem2.get_PseudoStandardParallel1 (from IProjectedCoordinateSystem2)

           OUTPUT
            psp1                : double*'''
        return super(IProjectedCoordinateSystem3, self).get_PseudoStandardParallel1()
    def put_PseudoStandardParallel1(self, psp1):
        '''Method IProjectedCoordinateSystem2.put_PseudoStandardParallel1 (from IProjectedCoordinateSystem2)

           INPUT
            psp1                : double'''
        return super(IProjectedCoordinateSystem3, self).put_PseudoStandardParallel1(psp1)
    def get_XScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_XScaleFactor (from IProjectedCoordinateSystem2)

           OUTPUT
            xs                  : double*'''
        return super(IProjectedCoordinateSystem3, self).get_XScaleFactor()
    def put_XScaleFactor(self, xs):
        '''Method IProjectedCoordinateSystem2.put_XScaleFactor (from IProjectedCoordinateSystem2)

           INPUT
            xs                  : double'''
        return super(IProjectedCoordinateSystem3, self).put_XScaleFactor(xs)
    def get_YScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_YScaleFactor (from IProjectedCoordinateSystem2)

           OUTPUT
            ys                  : double*'''
        return super(IProjectedCoordinateSystem3, self).get_YScaleFactor()
    def put_YScaleFactor(self, ys):
        '''Method IProjectedCoordinateSystem2.put_YScaleFactor (from IProjectedCoordinateSystem2)

           INPUT
            ys                  : double'''
        return super(IProjectedCoordinateSystem3, self).put_YScaleFactor(ys)
    def get_Rotation(self):
        '''Method IProjectedCoordinateSystem2.get_Rotation (from IProjectedCoordinateSystem2)

           OUTPUT
            r                   : double*'''
        return super(IProjectedCoordinateSystem3, self).get_Rotation()
    def put_Rotation(self, r):
        '''Method IProjectedCoordinateSystem2.put_Rotation (from IProjectedCoordinateSystem2)

           INPUT
            r                   : double'''
        return super(IProjectedCoordinateSystem3, self).put_Rotation(r)
    def InverseWithShift(self, shift, Count, Points):
        '''Method IProjectedCoordinateSystem2.InverseWithShift (from IProjectedCoordinateSystem2)

           INPUTS
            shift               : double
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem3, self).InverseWithShift(shift, Count, Points)
    def PutLinearAndAngularUnits(self, LinearUnit, AngularUnit):
        '''Method IProjectedCoordinateSystem2.PutLinearAndAngularUnits (from IProjectedCoordinateSystem2)

           INPUTS
            LinearUnit          : ILinearUnit*
            AngularUnit         : IAngularUnit*'''
        return super(IProjectedCoordinateSystem3, self).PutLinearAndAngularUnits(LinearUnit, AngularUnit)
    def get_LatitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfOrigin (from IProjectedCoordinateSystem2)

           OUTPUT
            LatitudeOfOrigin    : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LatitudeOfOrigin()
    def put_LatitudeOfOrigin(self, LatitudeOfOrigin):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfOrigin (from IProjectedCoordinateSystem2)

           INPUT
            LatitudeOfOrigin    : double'''
        return super(IProjectedCoordinateSystem3, self).put_LatitudeOfOrigin(LatitudeOfOrigin)
    def IsEqualNoNames(self, pOther):
        '''Method IProjectedCoordinateSystem2.IsEqualNoNames (from IProjectedCoordinateSystem2)

           INPUT
            pOther              : IProjectedCoordinateSystem*

           OUTPUT
            equalNoNames        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem3, self).IsEqualNoNames(pOther)
    def get_Usage(self):
        '''Method IProjectedCoordinateSystem.get_Usage (from IProjectedCoordinateSystem)

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjectedCoordinateSystem3, self).get_Usage()
    def get_GeographicCoordinateSystem(self):
        '''Method IProjectedCoordinateSystem.get_GeographicCoordinateSystem (from IProjectedCoordinateSystem)

           OUTPUT
            geographic          : IGeographicCoordinateSystem**'''
        return super(IProjectedCoordinateSystem3, self).get_GeographicCoordinateSystem()
    def get_Projection(self):
        '''Method IProjectedCoordinateSystem.get_Projection (from IProjectedCoordinateSystem)

           OUTPUT
            Projection          : IProjection**'''
        return super(IProjectedCoordinateSystem3, self).get_Projection()
    def GetParameters(self):
        '''Method IProjectedCoordinateSystem.GetParameters (from IProjectedCoordinateSystem)

           OUTPUT
            parameters          : IParameter**'''
        return super(IProjectedCoordinateSystem3, self).GetParameters()
    def get_CoordinateUnit(self):
        '''Method IProjectedCoordinateSystem.get_CoordinateUnit (from IProjectedCoordinateSystem)

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IProjectedCoordinateSystem3, self).get_CoordinateUnit()
    def Forward(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Forward (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem3, self).Forward(Count, Points)
    def Inverse(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Inverse (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem3, self).Inverse(Count, Points)
    def get_HorizonCount(self):
        '''Method IProjectedCoordinateSystem.get_HorizonCount (from IProjectedCoordinateSystem)

           OUTPUT
            HorizonCount        : long*'''
        return super(IProjectedCoordinateSystem3, self).get_HorizonCount()
    def get_Horizon(self, horizonIndex):
        '''Method IProjectedCoordinateSystem.get_Horizon (from IProjectedCoordinateSystem)

           INPUT
            horizonIndex        : long

           OUTPUT
            Horizon             : esriSRHorizon**'''
        return super(IProjectedCoordinateSystem3, self).get_Horizon(horizonIndex)
    def get_CentralMeridian(self, inDegrees):
        '''Method IProjectedCoordinateSystem.get_CentralMeridian (from IProjectedCoordinateSystem)

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            CentralMeridian     : double*'''
        return super(IProjectedCoordinateSystem3, self).get_CentralMeridian(inDegrees)
    def put_CentralMeridian(self, inDegrees, CentralMeridian):
        '''Method IProjectedCoordinateSystem.put_CentralMeridian (from IProjectedCoordinateSystem)

           INPUTS
            inDegrees           : VARIANT_BOOL
            CentralMeridian     : double'''
        return super(IProjectedCoordinateSystem3, self).put_CentralMeridian(inDegrees, CentralMeridian)
    def get_LongitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOfOrigin   : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LongitudeOfOrigin()
    def put_LongitudeOfOrigin(self, LongitudeOfOrigin):
        '''Method IProjectedCoordinateSystem.put_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOfOrigin   : double'''
        return super(IProjectedCoordinateSystem3, self).put_LongitudeOfOrigin(LongitudeOfOrigin)
    def get_LatitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            standardLongitude1  : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LatitudeOf1st()
    def put_LatitudeOf1st(self, standardLongitude1):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            standardLongitude1  : double'''
        return super(IProjectedCoordinateSystem3, self).put_LatitudeOf1st(standardLongitude1)
    def get_LatitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LatitudeOf2nd       : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LatitudeOf2nd()
    def put_LatitudeOf2nd(self, LatitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LatitudeOf2nd       : double'''
        return super(IProjectedCoordinateSystem3, self).put_LatitudeOf2nd(LatitudeOf2nd)
    def get_FalseEasting(self):
        '''Method IProjectedCoordinateSystem.get_FalseEasting (from IProjectedCoordinateSystem)

           OUTPUT
            FalseEasting        : double*'''
        return super(IProjectedCoordinateSystem3, self).get_FalseEasting()
    def put_FalseEasting(self, FalseEasting):
        '''Method IProjectedCoordinateSystem.put_FalseEasting (from IProjectedCoordinateSystem)

           INPUT
            FalseEasting        : double'''
        return super(IProjectedCoordinateSystem3, self).put_FalseEasting(FalseEasting)
    def get_FalseNorthing(self):
        '''Method IProjectedCoordinateSystem.get_FalseNorthing (from IProjectedCoordinateSystem)

           OUTPUT
            FalseNorthing       : double*'''
        return super(IProjectedCoordinateSystem3, self).get_FalseNorthing()
    def put_FalseNorthing(self, FalseNorthing):
        '''Method IProjectedCoordinateSystem.put_FalseNorthing (from IProjectedCoordinateSystem)

           INPUT
            FalseNorthing       : double'''
        return super(IProjectedCoordinateSystem3, self).put_FalseNorthing(FalseNorthing)
    def get_CentralParallel(self):
        '''Method IProjectedCoordinateSystem.get_CentralParallel (from IProjectedCoordinateSystem)

           OUTPUT
            CentralParallel     : double*'''
        return super(IProjectedCoordinateSystem3, self).get_CentralParallel()
    def put_CentralParallel(self, CentralParallel):
        '''Method IProjectedCoordinateSystem.put_CentralParallel (from IProjectedCoordinateSystem)

           INPUT
            CentralParallel     : double'''
        return super(IProjectedCoordinateSystem3, self).put_CentralParallel(CentralParallel)
    def get_StandardParallel1(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel1 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel1   : double*'''
        return super(IProjectedCoordinateSystem3, self).get_StandardParallel1()
    def put_StandardParallel1(self, StandardParallel1):
        '''Method IProjectedCoordinateSystem.put_StandardParallel1 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel1   : double'''
        return super(IProjectedCoordinateSystem3, self).put_StandardParallel1(StandardParallel1)
    def get_StandardParallel2(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel2 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel2   : double*'''
        return super(IProjectedCoordinateSystem3, self).get_StandardParallel2()
    def put_StandardParallel2(self, StandardParallel2):
        '''Method IProjectedCoordinateSystem.put_StandardParallel2 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel2   : double'''
        return super(IProjectedCoordinateSystem3, self).put_StandardParallel2(StandardParallel2)
    def get_LongitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf1st      : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LongitudeOf1st()
    def put_LongitudeOf1st(self, LongitudeOf1st):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf1st      : double'''
        return super(IProjectedCoordinateSystem3, self).put_LongitudeOf1st(LongitudeOf1st)
    def get_LongitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf2nd      : double*'''
        return super(IProjectedCoordinateSystem3, self).get_LongitudeOf2nd()
    def put_LongitudeOf2nd(self, LongitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf2nd      : double'''
        return super(IProjectedCoordinateSystem3, self).put_LongitudeOf2nd(LongitudeOf2nd)
    def get_ScaleFactor(self):
        '''Method IProjectedCoordinateSystem.get_ScaleFactor (from IProjectedCoordinateSystem)

           OUTPUT
            ScaleFactor         : double*'''
        return super(IProjectedCoordinateSystem3, self).get_ScaleFactor()
    def put_ScaleFactor(self, ScaleFactor):
        '''Method IProjectedCoordinateSystem.put_ScaleFactor (from IProjectedCoordinateSystem)

           INPUT
            ScaleFactor         : double'''
        return super(IProjectedCoordinateSystem3, self).put_ScaleFactor(ScaleFactor)
    def get_Azimuth(self):
        '''Method IProjectedCoordinateSystem.get_Azimuth (from IProjectedCoordinateSystem)

           OUTPUT
            Azimuth             : double*'''
        return super(IProjectedCoordinateSystem3, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IProjectedCoordinateSystem.put_Azimuth (from IProjectedCoordinateSystem)

           INPUT
            Azimuth             : double'''
        return super(IProjectedCoordinateSystem3, self).put_Azimuth(Azimuth)
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IProjectedCoordinateSystem3, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IProjectedCoordinateSystem3, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IProjectedCoordinateSystem3, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem3, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem3, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem3, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem3, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IProjectedCoordinateSystem3, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IProjectedCoordinateSystem3, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IProjectedCoordinateSystem3, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IProjectedCoordinateSystem3, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IProjectedCoordinateSystem3, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IProjectedCoordinateSystem3, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IProjectedCoordinateSystem3, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IProjectedCoordinateSystem3, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IProjectedCoordinateSystem3, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IProjectedCoordinateSystem3, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IProjectedCoordinateSystem3, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IProjectedCoordinateSystem3, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IProjectedCoordinateSystem3, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(IProjectedCoordinateSystem3, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(IProjectedCoordinateSystem3, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IProjectedCoordinateSystem3, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjectedCoordinateSystem3, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjectedCoordinateSystem3, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjectedCoordinateSystem3, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IProjectedCoordinateSystem3, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    CentralMeridian = property(None, put_CentralMeridian, None)
    CentralParallel = property(get_CentralParallel, put_CentralParallel, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    FalseEasting = property(get_FalseEasting, put_FalseEasting, None)
    FalseNorthing = property(get_FalseNorthing, put_FalseNorthing, None)
    GeographicCoordinateSystem = property(get_GeographicCoordinateSystem, None, None)
    Height = property(get_Height, put_Height, None)
    HorizonCount = property(get_HorizonCount, None, None)
    LatitudeOf1st = property(get_LatitudeOf1st, put_LatitudeOf1st, None)
    LatitudeOf2nd = property(get_LatitudeOf2nd, put_LatitudeOf2nd, None)
    LatitudeOfCenter = property(get_LatitudeOfCenter, put_LatitudeOfCenter, None)
    LatitudeOfOrigin = property(get_LatitudeOfOrigin, put_LatitudeOfOrigin, None)
    LongitudeOf1st = property(get_LongitudeOf1st, put_LongitudeOf1st, None)
    LongitudeOf2nd = property(get_LongitudeOf2nd, put_LongitudeOf2nd, None)
    LongitudeOfCenter = property(get_LongitudeOfCenter, put_LongitudeOfCenter, None)
    LongitudeOfOrigin = property(get_LongitudeOfOrigin, put_LongitudeOfOrigin, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Projection = property(get_Projection, None, None)
    PseudoStandardParallel1 = property(get_PseudoStandardParallel1, put_PseudoStandardParallel1, None)
    Remarks = property(get_Remarks, None, None)
    Rotation = property(get_Rotation, put_Rotation, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    StandardParallel1 = property(get_StandardParallel1, put_StandardParallel1, None)
    StandardParallel2 = property(get_StandardParallel2, put_StandardParallel2, None)
    Usage = property(get_Usage, None, None)
    XScaleFactor = property(get_XScaleFactor, put_XScaleFactor, None)
    YScaleFactor = property(get_YScaleFactor, put_YScaleFactor, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)
    CentralMeridian = IndexProperty(get_CentralMeridian, None)
    Horizon = IndexProperty(get_Horizon, None)

class IProjectedCoordinateSystem4(_esriGeometry.IProjectedCoordinateSystem4):
    _IID = uuid.UUID('d765fb6b-05d3-4398-86ac-79430de530e5')

    def __init__(self, *args, **kw):
        super(IProjectedCoordinateSystem4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetPCSHorizon(self):
        '''Method IProjectedCoordinateSystem4.GetPCSHorizon

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            Horizon             : IGeometry**'''
        return super(IProjectedCoordinateSystem4, self).GetPCSHorizon()
    def GetCentralLongitude(self):
        '''Method IProjectedCoordinateSystem4.GetCentralLongitude

           OUTPUT
            centralLongitude    : double*'''
        return super(IProjectedCoordinateSystem4, self).GetCentralLongitude()
    def GetNorthPole(self):
        '''Method IProjectedCoordinateSystem4.GetNorthPole

           OUTPUT
            pole                : WKSPoint*'''
        return super(IProjectedCoordinateSystem4, self).GetNorthPole()
    def GetSouthPole(self):
        '''Method IProjectedCoordinateSystem4.GetSouthPole

           OUTPUT
            pole                : WKSPoint*'''
        return super(IProjectedCoordinateSystem4, self).GetSouthPole()
    def GetNorthPoleLocation(self):
        '''Method IProjectedCoordinateSystem4.GetNorthPoleLocation

           OUTPUT
            poleLocation        : esriSRPoleLocation*'''
        return super(IProjectedCoordinateSystem4, self).GetNorthPoleLocation()
    def GetSouthPoleLocation(self):
        '''Method IProjectedCoordinateSystem4.GetSouthPoleLocation

           OUTPUT
            poleLocation        : esriSRPoleLocation*'''
        return super(IProjectedCoordinateSystem4, self).GetSouthPoleLocation()
    def GetNorthPoleGeometry(self):
        '''Method IProjectedCoordinateSystem4.GetNorthPoleGeometry

           OUTPUT
            poleGeometry        : esriSRPoleGeometry*'''
        return super(IProjectedCoordinateSystem4, self).GetNorthPoleGeometry()
    def GetSouthPoleGeometry(self):
        '''Method IProjectedCoordinateSystem4.GetSouthPoleGeometry

           OUTPUT
            poleGeometry        : esriSRPoleGeometry*'''
        return super(IProjectedCoordinateSystem4, self).GetSouthPoleGeometry()
    def IsHorizonEdgeDuplicated(self):
        '''Method IProjectedCoordinateSystem4.IsHorizonEdgeDuplicated

           OUTPUT
            isEdgeDuplicated    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).IsHorizonEdgeDuplicated()
    def IsHorizonConvexHull(self):
        '''Method IProjectedCoordinateSystem4.IsHorizonConvexHull

           OUTPUT
            isConvexHull        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).IsHorizonConvexHull()
    def IsHorizonEntireWorld(self):
        '''Method IProjectedCoordinateSystem4.IsHorizonEntireWorld

           OUTPUT
            isWorld             : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).IsHorizonEntireWorld()
    def get_Height(self):
        '''Method IProjectedCoordinateSystem3.get_Height (from IProjectedCoordinateSystem3)

           OUTPUT
            Height              : double*'''
        return super(IProjectedCoordinateSystem4, self).get_Height()
    def put_Height(self, Height):
        '''Method IProjectedCoordinateSystem3.put_Height (from IProjectedCoordinateSystem3)

           INPUT
            Height              : double'''
        return super(IProjectedCoordinateSystem4, self).put_Height(Height)
    def get_LongitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LongitudeOfCenter (from IProjectedCoordinateSystem2)

           OUTPUT
            LongitudeOfCenter   : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LongitudeOfCenter()
    def put_LongitudeOfCenter(self, LongitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LongitudeOfCenter (from IProjectedCoordinateSystem2)

           INPUT
            LongitudeOfCenter   : double'''
        return super(IProjectedCoordinateSystem4, self).put_LongitudeOfCenter(LongitudeOfCenter)
    def get_LatitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfCenter (from IProjectedCoordinateSystem2)

           OUTPUT
            LatitudeOfCenter    : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LatitudeOfCenter()
    def put_LatitudeOfCenter(self, LatitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfCenter (from IProjectedCoordinateSystem2)

           INPUT
            LatitudeOfCenter    : double'''
        return super(IProjectedCoordinateSystem4, self).put_LatitudeOfCenter(LatitudeOfCenter)
    def GetGCSParams(self):
        '''Method IProjectedCoordinateSystem2.GetGCSParams (from IProjectedCoordinateSystem2)

           OUTPUTS
            p_180               : double*
            pDelta              : double*'''
        return super(IProjectedCoordinateSystem4, self).GetGCSParams()
    def GetHorizon(self):
        '''Method IProjectedCoordinateSystem2.GetHorizon (from IProjectedCoordinateSystem2)

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem4, self).GetHorizon()
    def GetShiftedHorizon(self, shift):
        '''Method IProjectedCoordinateSystem2.GetShiftedHorizon (from IProjectedCoordinateSystem2)

           INPUT
            shift               : int

           OUTPUT
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem4, self).GetShiftedHorizon(shift)
    def get_PseudoStandardParallel1(self):
        '''Method IProjectedCoordinateSystem2.get_PseudoStandardParallel1 (from IProjectedCoordinateSystem2)

           OUTPUT
            psp1                : double*'''
        return super(IProjectedCoordinateSystem4, self).get_PseudoStandardParallel1()
    def put_PseudoStandardParallel1(self, psp1):
        '''Method IProjectedCoordinateSystem2.put_PseudoStandardParallel1 (from IProjectedCoordinateSystem2)

           INPUT
            psp1                : double'''
        return super(IProjectedCoordinateSystem4, self).put_PseudoStandardParallel1(psp1)
    def get_XScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_XScaleFactor (from IProjectedCoordinateSystem2)

           OUTPUT
            xs                  : double*'''
        return super(IProjectedCoordinateSystem4, self).get_XScaleFactor()
    def put_XScaleFactor(self, xs):
        '''Method IProjectedCoordinateSystem2.put_XScaleFactor (from IProjectedCoordinateSystem2)

           INPUT
            xs                  : double'''
        return super(IProjectedCoordinateSystem4, self).put_XScaleFactor(xs)
    def get_YScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_YScaleFactor (from IProjectedCoordinateSystem2)

           OUTPUT
            ys                  : double*'''
        return super(IProjectedCoordinateSystem4, self).get_YScaleFactor()
    def put_YScaleFactor(self, ys):
        '''Method IProjectedCoordinateSystem2.put_YScaleFactor (from IProjectedCoordinateSystem2)

           INPUT
            ys                  : double'''
        return super(IProjectedCoordinateSystem4, self).put_YScaleFactor(ys)
    def get_Rotation(self):
        '''Method IProjectedCoordinateSystem2.get_Rotation (from IProjectedCoordinateSystem2)

           OUTPUT
            r                   : double*'''
        return super(IProjectedCoordinateSystem4, self).get_Rotation()
    def put_Rotation(self, r):
        '''Method IProjectedCoordinateSystem2.put_Rotation (from IProjectedCoordinateSystem2)

           INPUT
            r                   : double'''
        return super(IProjectedCoordinateSystem4, self).put_Rotation(r)
    def InverseWithShift(self, shift, Count, Points):
        '''Method IProjectedCoordinateSystem2.InverseWithShift (from IProjectedCoordinateSystem2)

           INPUTS
            shift               : double
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem4, self).InverseWithShift(shift, Count, Points)
    def PutLinearAndAngularUnits(self, LinearUnit, AngularUnit):
        '''Method IProjectedCoordinateSystem2.PutLinearAndAngularUnits (from IProjectedCoordinateSystem2)

           INPUTS
            LinearUnit          : ILinearUnit*
            AngularUnit         : IAngularUnit*'''
        return super(IProjectedCoordinateSystem4, self).PutLinearAndAngularUnits(LinearUnit, AngularUnit)
    def get_LatitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfOrigin (from IProjectedCoordinateSystem2)

           OUTPUT
            LatitudeOfOrigin    : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LatitudeOfOrigin()
    def put_LatitudeOfOrigin(self, LatitudeOfOrigin):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfOrigin (from IProjectedCoordinateSystem2)

           INPUT
            LatitudeOfOrigin    : double'''
        return super(IProjectedCoordinateSystem4, self).put_LatitudeOfOrigin(LatitudeOfOrigin)
    def IsEqualNoNames(self, pOther):
        '''Method IProjectedCoordinateSystem2.IsEqualNoNames (from IProjectedCoordinateSystem2)

           INPUT
            pOther              : IProjectedCoordinateSystem*

           OUTPUT
            equalNoNames        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).IsEqualNoNames(pOther)
    def get_Usage(self):
        '''Method IProjectedCoordinateSystem.get_Usage (from IProjectedCoordinateSystem)

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjectedCoordinateSystem4, self).get_Usage()
    def get_GeographicCoordinateSystem(self):
        '''Method IProjectedCoordinateSystem.get_GeographicCoordinateSystem (from IProjectedCoordinateSystem)

           OUTPUT
            geographic          : IGeographicCoordinateSystem**'''
        return super(IProjectedCoordinateSystem4, self).get_GeographicCoordinateSystem()
    def get_Projection(self):
        '''Method IProjectedCoordinateSystem.get_Projection (from IProjectedCoordinateSystem)

           OUTPUT
            Projection          : IProjection**'''
        return super(IProjectedCoordinateSystem4, self).get_Projection()
    def GetParameters(self):
        '''Method IProjectedCoordinateSystem.GetParameters (from IProjectedCoordinateSystem)

           OUTPUT
            parameters          : IParameter**'''
        return super(IProjectedCoordinateSystem4, self).GetParameters()
    def get_CoordinateUnit(self):
        '''Method IProjectedCoordinateSystem.get_CoordinateUnit (from IProjectedCoordinateSystem)

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IProjectedCoordinateSystem4, self).get_CoordinateUnit()
    def Forward(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Forward (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem4, self).Forward(Count, Points)
    def Inverse(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Inverse (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem4, self).Inverse(Count, Points)
    def get_HorizonCount(self):
        '''Method IProjectedCoordinateSystem.get_HorizonCount (from IProjectedCoordinateSystem)

           OUTPUT
            HorizonCount        : long*'''
        return super(IProjectedCoordinateSystem4, self).get_HorizonCount()
    def get_Horizon(self, horizonIndex):
        '''Method IProjectedCoordinateSystem.get_Horizon (from IProjectedCoordinateSystem)

           INPUT
            horizonIndex        : long

           OUTPUT
            Horizon             : esriSRHorizon**'''
        return super(IProjectedCoordinateSystem4, self).get_Horizon(horizonIndex)
    def get_CentralMeridian(self, inDegrees):
        '''Method IProjectedCoordinateSystem.get_CentralMeridian (from IProjectedCoordinateSystem)

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            CentralMeridian     : double*'''
        return super(IProjectedCoordinateSystem4, self).get_CentralMeridian(inDegrees)
    def put_CentralMeridian(self, inDegrees, CentralMeridian):
        '''Method IProjectedCoordinateSystem.put_CentralMeridian (from IProjectedCoordinateSystem)

           INPUTS
            inDegrees           : VARIANT_BOOL
            CentralMeridian     : double'''
        return super(IProjectedCoordinateSystem4, self).put_CentralMeridian(inDegrees, CentralMeridian)
    def get_LongitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOfOrigin   : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LongitudeOfOrigin()
    def put_LongitudeOfOrigin(self, LongitudeOfOrigin):
        '''Method IProjectedCoordinateSystem.put_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOfOrigin   : double'''
        return super(IProjectedCoordinateSystem4, self).put_LongitudeOfOrigin(LongitudeOfOrigin)
    def get_LatitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            standardLongitude1  : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LatitudeOf1st()
    def put_LatitudeOf1st(self, standardLongitude1):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            standardLongitude1  : double'''
        return super(IProjectedCoordinateSystem4, self).put_LatitudeOf1st(standardLongitude1)
    def get_LatitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LatitudeOf2nd       : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LatitudeOf2nd()
    def put_LatitudeOf2nd(self, LatitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LatitudeOf2nd       : double'''
        return super(IProjectedCoordinateSystem4, self).put_LatitudeOf2nd(LatitudeOf2nd)
    def get_FalseEasting(self):
        '''Method IProjectedCoordinateSystem.get_FalseEasting (from IProjectedCoordinateSystem)

           OUTPUT
            FalseEasting        : double*'''
        return super(IProjectedCoordinateSystem4, self).get_FalseEasting()
    def put_FalseEasting(self, FalseEasting):
        '''Method IProjectedCoordinateSystem.put_FalseEasting (from IProjectedCoordinateSystem)

           INPUT
            FalseEasting        : double'''
        return super(IProjectedCoordinateSystem4, self).put_FalseEasting(FalseEasting)
    def get_FalseNorthing(self):
        '''Method IProjectedCoordinateSystem.get_FalseNorthing (from IProjectedCoordinateSystem)

           OUTPUT
            FalseNorthing       : double*'''
        return super(IProjectedCoordinateSystem4, self).get_FalseNorthing()
    def put_FalseNorthing(self, FalseNorthing):
        '''Method IProjectedCoordinateSystem.put_FalseNorthing (from IProjectedCoordinateSystem)

           INPUT
            FalseNorthing       : double'''
        return super(IProjectedCoordinateSystem4, self).put_FalseNorthing(FalseNorthing)
    def get_CentralParallel(self):
        '''Method IProjectedCoordinateSystem.get_CentralParallel (from IProjectedCoordinateSystem)

           OUTPUT
            CentralParallel     : double*'''
        return super(IProjectedCoordinateSystem4, self).get_CentralParallel()
    def put_CentralParallel(self, CentralParallel):
        '''Method IProjectedCoordinateSystem.put_CentralParallel (from IProjectedCoordinateSystem)

           INPUT
            CentralParallel     : double'''
        return super(IProjectedCoordinateSystem4, self).put_CentralParallel(CentralParallel)
    def get_StandardParallel1(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel1 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel1   : double*'''
        return super(IProjectedCoordinateSystem4, self).get_StandardParallel1()
    def put_StandardParallel1(self, StandardParallel1):
        '''Method IProjectedCoordinateSystem.put_StandardParallel1 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel1   : double'''
        return super(IProjectedCoordinateSystem4, self).put_StandardParallel1(StandardParallel1)
    def get_StandardParallel2(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel2 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel2   : double*'''
        return super(IProjectedCoordinateSystem4, self).get_StandardParallel2()
    def put_StandardParallel2(self, StandardParallel2):
        '''Method IProjectedCoordinateSystem.put_StandardParallel2 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel2   : double'''
        return super(IProjectedCoordinateSystem4, self).put_StandardParallel2(StandardParallel2)
    def get_LongitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf1st      : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LongitudeOf1st()
    def put_LongitudeOf1st(self, LongitudeOf1st):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf1st      : double'''
        return super(IProjectedCoordinateSystem4, self).put_LongitudeOf1st(LongitudeOf1st)
    def get_LongitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf2nd      : double*'''
        return super(IProjectedCoordinateSystem4, self).get_LongitudeOf2nd()
    def put_LongitudeOf2nd(self, LongitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf2nd      : double'''
        return super(IProjectedCoordinateSystem4, self).put_LongitudeOf2nd(LongitudeOf2nd)
    def get_ScaleFactor(self):
        '''Method IProjectedCoordinateSystem.get_ScaleFactor (from IProjectedCoordinateSystem)

           OUTPUT
            ScaleFactor         : double*'''
        return super(IProjectedCoordinateSystem4, self).get_ScaleFactor()
    def put_ScaleFactor(self, ScaleFactor):
        '''Method IProjectedCoordinateSystem.put_ScaleFactor (from IProjectedCoordinateSystem)

           INPUT
            ScaleFactor         : double'''
        return super(IProjectedCoordinateSystem4, self).put_ScaleFactor(ScaleFactor)
    def get_Azimuth(self):
        '''Method IProjectedCoordinateSystem.get_Azimuth (from IProjectedCoordinateSystem)

           OUTPUT
            Azimuth             : double*'''
        return super(IProjectedCoordinateSystem4, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IProjectedCoordinateSystem.put_Azimuth (from IProjectedCoordinateSystem)

           INPUT
            Azimuth             : double'''
        return super(IProjectedCoordinateSystem4, self).put_Azimuth(Azimuth)
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IProjectedCoordinateSystem4, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IProjectedCoordinateSystem4, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IProjectedCoordinateSystem4, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem4, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IProjectedCoordinateSystem4, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IProjectedCoordinateSystem4, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IProjectedCoordinateSystem4, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IProjectedCoordinateSystem4, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IProjectedCoordinateSystem4, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IProjectedCoordinateSystem4, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IProjectedCoordinateSystem4, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IProjectedCoordinateSystem4, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IProjectedCoordinateSystem4, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IProjectedCoordinateSystem4, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IProjectedCoordinateSystem4, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IProjectedCoordinateSystem4, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IProjectedCoordinateSystem4, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(IProjectedCoordinateSystem4, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(IProjectedCoordinateSystem4, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IProjectedCoordinateSystem4, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjectedCoordinateSystem4, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjectedCoordinateSystem4, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjectedCoordinateSystem4, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IProjectedCoordinateSystem4, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    CentralMeridian = property(None, put_CentralMeridian, None)
    CentralParallel = property(get_CentralParallel, put_CentralParallel, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    FalseEasting = property(get_FalseEasting, put_FalseEasting, None)
    FalseNorthing = property(get_FalseNorthing, put_FalseNorthing, None)
    GeographicCoordinateSystem = property(get_GeographicCoordinateSystem, None, None)
    Height = property(get_Height, put_Height, None)
    HorizonCount = property(get_HorizonCount, None, None)
    LatitudeOf1st = property(get_LatitudeOf1st, put_LatitudeOf1st, None)
    LatitudeOf2nd = property(get_LatitudeOf2nd, put_LatitudeOf2nd, None)
    LatitudeOfCenter = property(get_LatitudeOfCenter, put_LatitudeOfCenter, None)
    LatitudeOfOrigin = property(get_LatitudeOfOrigin, put_LatitudeOfOrigin, None)
    LongitudeOf1st = property(get_LongitudeOf1st, put_LongitudeOf1st, None)
    LongitudeOf2nd = property(get_LongitudeOf2nd, put_LongitudeOf2nd, None)
    LongitudeOfCenter = property(get_LongitudeOfCenter, put_LongitudeOfCenter, None)
    LongitudeOfOrigin = property(get_LongitudeOfOrigin, put_LongitudeOfOrigin, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Projection = property(get_Projection, None, None)
    PseudoStandardParallel1 = property(get_PseudoStandardParallel1, put_PseudoStandardParallel1, None)
    Remarks = property(get_Remarks, None, None)
    Rotation = property(get_Rotation, put_Rotation, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    StandardParallel1 = property(get_StandardParallel1, put_StandardParallel1, None)
    StandardParallel2 = property(get_StandardParallel2, put_StandardParallel2, None)
    Usage = property(get_Usage, None, None)
    XScaleFactor = property(get_XScaleFactor, put_XScaleFactor, None)
    YScaleFactor = property(get_YScaleFactor, put_YScaleFactor, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)
    CentralMeridian = IndexProperty(get_CentralMeridian, None)
    Horizon = IndexProperty(get_Horizon, None)

class IProjectedCoordinateSystem5(_esriGeometry.IProjectedCoordinateSystem5):
    _IID = uuid.UUID('734e8d44-09b8-4796-8fb7-1985a32be7be')

    def __init__(self, *args, **kw):
        super(IProjectedCoordinateSystem5, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def IsCentralLongitudeVertical(self):
        '''Method IProjectedCoordinateSystem5.IsCentralLongitudeVertical

           OUTPUT
            pbIsVertical        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).IsCentralLongitudeVertical()
    def get_ConvergenceAngle(self, pt, trueToGridNorth):
        '''Method IProjectedCoordinateSystem5.get_ConvergenceAngle

           INPUTS
            pt                  : WKSPoint
            trueToGridNorth     : VARIANT_BOOL

           OUTPUT
            Angle               : double*'''
        return super(IProjectedCoordinateSystem5, self).get_ConvergenceAngle(pt, trueToGridNorth)
    def GetPCSHorizon(self):
        '''Method IProjectedCoordinateSystem4.GetPCSHorizon (from IProjectedCoordinateSystem4)

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            Horizon             : IGeometry**'''
        return super(IProjectedCoordinateSystem5, self).GetPCSHorizon()
    def GetCentralLongitude(self):
        '''Method IProjectedCoordinateSystem4.GetCentralLongitude (from IProjectedCoordinateSystem4)

           OUTPUT
            centralLongitude    : double*'''
        return super(IProjectedCoordinateSystem5, self).GetCentralLongitude()
    def GetNorthPole(self):
        '''Method IProjectedCoordinateSystem4.GetNorthPole (from IProjectedCoordinateSystem4)

           OUTPUT
            pole                : WKSPoint*'''
        return super(IProjectedCoordinateSystem5, self).GetNorthPole()
    def GetSouthPole(self):
        '''Method IProjectedCoordinateSystem4.GetSouthPole (from IProjectedCoordinateSystem4)

           OUTPUT
            pole                : WKSPoint*'''
        return super(IProjectedCoordinateSystem5, self).GetSouthPole()
    def GetNorthPoleLocation(self):
        '''Method IProjectedCoordinateSystem4.GetNorthPoleLocation (from IProjectedCoordinateSystem4)

           OUTPUT
            poleLocation        : esriSRPoleLocation*'''
        return super(IProjectedCoordinateSystem5, self).GetNorthPoleLocation()
    def GetSouthPoleLocation(self):
        '''Method IProjectedCoordinateSystem4.GetSouthPoleLocation (from IProjectedCoordinateSystem4)

           OUTPUT
            poleLocation        : esriSRPoleLocation*'''
        return super(IProjectedCoordinateSystem5, self).GetSouthPoleLocation()
    def GetNorthPoleGeometry(self):
        '''Method IProjectedCoordinateSystem4.GetNorthPoleGeometry (from IProjectedCoordinateSystem4)

           OUTPUT
            poleGeometry        : esriSRPoleGeometry*'''
        return super(IProjectedCoordinateSystem5, self).GetNorthPoleGeometry()
    def GetSouthPoleGeometry(self):
        '''Method IProjectedCoordinateSystem4.GetSouthPoleGeometry (from IProjectedCoordinateSystem4)

           OUTPUT
            poleGeometry        : esriSRPoleGeometry*'''
        return super(IProjectedCoordinateSystem5, self).GetSouthPoleGeometry()
    def IsHorizonEdgeDuplicated(self):
        '''Method IProjectedCoordinateSystem4.IsHorizonEdgeDuplicated (from IProjectedCoordinateSystem4)

           OUTPUT
            isEdgeDuplicated    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).IsHorizonEdgeDuplicated()
    def IsHorizonConvexHull(self):
        '''Method IProjectedCoordinateSystem4.IsHorizonConvexHull (from IProjectedCoordinateSystem4)

           OUTPUT
            isConvexHull        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).IsHorizonConvexHull()
    def IsHorizonEntireWorld(self):
        '''Method IProjectedCoordinateSystem4.IsHorizonEntireWorld (from IProjectedCoordinateSystem4)

           OUTPUT
            isWorld             : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).IsHorizonEntireWorld()
    def get_Height(self):
        '''Method IProjectedCoordinateSystem3.get_Height (from IProjectedCoordinateSystem3)

           OUTPUT
            Height              : double*'''
        return super(IProjectedCoordinateSystem5, self).get_Height()
    def put_Height(self, Height):
        '''Method IProjectedCoordinateSystem3.put_Height (from IProjectedCoordinateSystem3)

           INPUT
            Height              : double'''
        return super(IProjectedCoordinateSystem5, self).put_Height(Height)
    def get_LongitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LongitudeOfCenter (from IProjectedCoordinateSystem2)

           OUTPUT
            LongitudeOfCenter   : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LongitudeOfCenter()
    def put_LongitudeOfCenter(self, LongitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LongitudeOfCenter (from IProjectedCoordinateSystem2)

           INPUT
            LongitudeOfCenter   : double'''
        return super(IProjectedCoordinateSystem5, self).put_LongitudeOfCenter(LongitudeOfCenter)
    def get_LatitudeOfCenter(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfCenter (from IProjectedCoordinateSystem2)

           OUTPUT
            LatitudeOfCenter    : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LatitudeOfCenter()
    def put_LatitudeOfCenter(self, LatitudeOfCenter):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfCenter (from IProjectedCoordinateSystem2)

           INPUT
            LatitudeOfCenter    : double'''
        return super(IProjectedCoordinateSystem5, self).put_LatitudeOfCenter(LatitudeOfCenter)
    def GetGCSParams(self):
        '''Method IProjectedCoordinateSystem2.GetGCSParams (from IProjectedCoordinateSystem2)

           OUTPUTS
            p_180               : double*
            pDelta              : double*'''
        return super(IProjectedCoordinateSystem5, self).GetGCSParams()
    def GetHorizon(self):
        '''Method IProjectedCoordinateSystem2.GetHorizon (from IProjectedCoordinateSystem2)

           OUTPUTS
            horizonEnvelope     : WKSEnvelope*
            Inclusive           : VARIANT_BOOL*
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem5, self).GetHorizon()
    def GetShiftedHorizon(self, shift):
        '''Method IProjectedCoordinateSystem2.GetShiftedHorizon (from IProjectedCoordinateSystem2)

           INPUT
            shift               : int

           OUTPUT
            ppHorizon           : IGeometry**'''
        return super(IProjectedCoordinateSystem5, self).GetShiftedHorizon(shift)
    def get_PseudoStandardParallel1(self):
        '''Method IProjectedCoordinateSystem2.get_PseudoStandardParallel1 (from IProjectedCoordinateSystem2)

           OUTPUT
            psp1                : double*'''
        return super(IProjectedCoordinateSystem5, self).get_PseudoStandardParallel1()
    def put_PseudoStandardParallel1(self, psp1):
        '''Method IProjectedCoordinateSystem2.put_PseudoStandardParallel1 (from IProjectedCoordinateSystem2)

           INPUT
            psp1                : double'''
        return super(IProjectedCoordinateSystem5, self).put_PseudoStandardParallel1(psp1)
    def get_XScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_XScaleFactor (from IProjectedCoordinateSystem2)

           OUTPUT
            xs                  : double*'''
        return super(IProjectedCoordinateSystem5, self).get_XScaleFactor()
    def put_XScaleFactor(self, xs):
        '''Method IProjectedCoordinateSystem2.put_XScaleFactor (from IProjectedCoordinateSystem2)

           INPUT
            xs                  : double'''
        return super(IProjectedCoordinateSystem5, self).put_XScaleFactor(xs)
    def get_YScaleFactor(self):
        '''Method IProjectedCoordinateSystem2.get_YScaleFactor (from IProjectedCoordinateSystem2)

           OUTPUT
            ys                  : double*'''
        return super(IProjectedCoordinateSystem5, self).get_YScaleFactor()
    def put_YScaleFactor(self, ys):
        '''Method IProjectedCoordinateSystem2.put_YScaleFactor (from IProjectedCoordinateSystem2)

           INPUT
            ys                  : double'''
        return super(IProjectedCoordinateSystem5, self).put_YScaleFactor(ys)
    def get_Rotation(self):
        '''Method IProjectedCoordinateSystem2.get_Rotation (from IProjectedCoordinateSystem2)

           OUTPUT
            r                   : double*'''
        return super(IProjectedCoordinateSystem5, self).get_Rotation()
    def put_Rotation(self, r):
        '''Method IProjectedCoordinateSystem2.put_Rotation (from IProjectedCoordinateSystem2)

           INPUT
            r                   : double'''
        return super(IProjectedCoordinateSystem5, self).put_Rotation(r)
    def InverseWithShift(self, shift, Count, Points):
        '''Method IProjectedCoordinateSystem2.InverseWithShift (from IProjectedCoordinateSystem2)

           INPUTS
            shift               : double
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem5, self).InverseWithShift(shift, Count, Points)
    def PutLinearAndAngularUnits(self, LinearUnit, AngularUnit):
        '''Method IProjectedCoordinateSystem2.PutLinearAndAngularUnits (from IProjectedCoordinateSystem2)

           INPUTS
            LinearUnit          : ILinearUnit*
            AngularUnit         : IAngularUnit*'''
        return super(IProjectedCoordinateSystem5, self).PutLinearAndAngularUnits(LinearUnit, AngularUnit)
    def get_LatitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem2.get_LatitudeOfOrigin (from IProjectedCoordinateSystem2)

           OUTPUT
            LatitudeOfOrigin    : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LatitudeOfOrigin()
    def put_LatitudeOfOrigin(self, LatitudeOfOrigin):
        '''Method IProjectedCoordinateSystem2.put_LatitudeOfOrigin (from IProjectedCoordinateSystem2)

           INPUT
            LatitudeOfOrigin    : double'''
        return super(IProjectedCoordinateSystem5, self).put_LatitudeOfOrigin(LatitudeOfOrigin)
    def IsEqualNoNames(self, pOther):
        '''Method IProjectedCoordinateSystem2.IsEqualNoNames (from IProjectedCoordinateSystem2)

           INPUT
            pOther              : IProjectedCoordinateSystem*

           OUTPUT
            equalNoNames        : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).IsEqualNoNames(pOther)
    def get_Usage(self):
        '''Method IProjectedCoordinateSystem.get_Usage (from IProjectedCoordinateSystem)

           OUTPUT
            Usage               : BSTR*'''
        return super(IProjectedCoordinateSystem5, self).get_Usage()
    def get_GeographicCoordinateSystem(self):
        '''Method IProjectedCoordinateSystem.get_GeographicCoordinateSystem (from IProjectedCoordinateSystem)

           OUTPUT
            geographic          : IGeographicCoordinateSystem**'''
        return super(IProjectedCoordinateSystem5, self).get_GeographicCoordinateSystem()
    def get_Projection(self):
        '''Method IProjectedCoordinateSystem.get_Projection (from IProjectedCoordinateSystem)

           OUTPUT
            Projection          : IProjection**'''
        return super(IProjectedCoordinateSystem5, self).get_Projection()
    def GetParameters(self):
        '''Method IProjectedCoordinateSystem.GetParameters (from IProjectedCoordinateSystem)

           OUTPUT
            parameters          : IParameter**'''
        return super(IProjectedCoordinateSystem5, self).GetParameters()
    def get_CoordinateUnit(self):
        '''Method IProjectedCoordinateSystem.get_CoordinateUnit (from IProjectedCoordinateSystem)

           OUTPUT
            Unit                : ILinearUnit**'''
        return super(IProjectedCoordinateSystem5, self).get_CoordinateUnit()
    def Forward(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Forward (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem5, self).Forward(Count, Points)
    def Inverse(self, Count, Points):
        '''Method IProjectedCoordinateSystem.Inverse (from IProjectedCoordinateSystem)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IProjectedCoordinateSystem5, self).Inverse(Count, Points)
    def get_HorizonCount(self):
        '''Method IProjectedCoordinateSystem.get_HorizonCount (from IProjectedCoordinateSystem)

           OUTPUT
            HorizonCount        : long*'''
        return super(IProjectedCoordinateSystem5, self).get_HorizonCount()
    def get_Horizon(self, horizonIndex):
        '''Method IProjectedCoordinateSystem.get_Horizon (from IProjectedCoordinateSystem)

           INPUT
            horizonIndex        : long

           OUTPUT
            Horizon             : esriSRHorizon**'''
        return super(IProjectedCoordinateSystem5, self).get_Horizon(horizonIndex)
    def get_CentralMeridian(self, inDegrees):
        '''Method IProjectedCoordinateSystem.get_CentralMeridian (from IProjectedCoordinateSystem)

           INPUT
            inDegrees           : VARIANT_BOOL

           OUTPUT
            CentralMeridian     : double*'''
        return super(IProjectedCoordinateSystem5, self).get_CentralMeridian(inDegrees)
    def put_CentralMeridian(self, inDegrees, CentralMeridian):
        '''Method IProjectedCoordinateSystem.put_CentralMeridian (from IProjectedCoordinateSystem)

           INPUTS
            inDegrees           : VARIANT_BOOL
            CentralMeridian     : double'''
        return super(IProjectedCoordinateSystem5, self).put_CentralMeridian(inDegrees, CentralMeridian)
    def get_LongitudeOfOrigin(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOfOrigin   : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LongitudeOfOrigin()
    def put_LongitudeOfOrigin(self, LongitudeOfOrigin):
        '''Method IProjectedCoordinateSystem.put_LongitudeOfOrigin (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOfOrigin   : double'''
        return super(IProjectedCoordinateSystem5, self).put_LongitudeOfOrigin(LongitudeOfOrigin)
    def get_LatitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            standardLongitude1  : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LatitudeOf1st()
    def put_LatitudeOf1st(self, standardLongitude1):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            standardLongitude1  : double'''
        return super(IProjectedCoordinateSystem5, self).put_LatitudeOf1st(standardLongitude1)
    def get_LatitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LatitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LatitudeOf2nd       : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LatitudeOf2nd()
    def put_LatitudeOf2nd(self, LatitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LatitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LatitudeOf2nd       : double'''
        return super(IProjectedCoordinateSystem5, self).put_LatitudeOf2nd(LatitudeOf2nd)
    def get_FalseEasting(self):
        '''Method IProjectedCoordinateSystem.get_FalseEasting (from IProjectedCoordinateSystem)

           OUTPUT
            FalseEasting        : double*'''
        return super(IProjectedCoordinateSystem5, self).get_FalseEasting()
    def put_FalseEasting(self, FalseEasting):
        '''Method IProjectedCoordinateSystem.put_FalseEasting (from IProjectedCoordinateSystem)

           INPUT
            FalseEasting        : double'''
        return super(IProjectedCoordinateSystem5, self).put_FalseEasting(FalseEasting)
    def get_FalseNorthing(self):
        '''Method IProjectedCoordinateSystem.get_FalseNorthing (from IProjectedCoordinateSystem)

           OUTPUT
            FalseNorthing       : double*'''
        return super(IProjectedCoordinateSystem5, self).get_FalseNorthing()
    def put_FalseNorthing(self, FalseNorthing):
        '''Method IProjectedCoordinateSystem.put_FalseNorthing (from IProjectedCoordinateSystem)

           INPUT
            FalseNorthing       : double'''
        return super(IProjectedCoordinateSystem5, self).put_FalseNorthing(FalseNorthing)
    def get_CentralParallel(self):
        '''Method IProjectedCoordinateSystem.get_CentralParallel (from IProjectedCoordinateSystem)

           OUTPUT
            CentralParallel     : double*'''
        return super(IProjectedCoordinateSystem5, self).get_CentralParallel()
    def put_CentralParallel(self, CentralParallel):
        '''Method IProjectedCoordinateSystem.put_CentralParallel (from IProjectedCoordinateSystem)

           INPUT
            CentralParallel     : double'''
        return super(IProjectedCoordinateSystem5, self).put_CentralParallel(CentralParallel)
    def get_StandardParallel1(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel1 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel1   : double*'''
        return super(IProjectedCoordinateSystem5, self).get_StandardParallel1()
    def put_StandardParallel1(self, StandardParallel1):
        '''Method IProjectedCoordinateSystem.put_StandardParallel1 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel1   : double'''
        return super(IProjectedCoordinateSystem5, self).put_StandardParallel1(StandardParallel1)
    def get_StandardParallel2(self):
        '''Method IProjectedCoordinateSystem.get_StandardParallel2 (from IProjectedCoordinateSystem)

           OUTPUT
            StandardParallel2   : double*'''
        return super(IProjectedCoordinateSystem5, self).get_StandardParallel2()
    def put_StandardParallel2(self, StandardParallel2):
        '''Method IProjectedCoordinateSystem.put_StandardParallel2 (from IProjectedCoordinateSystem)

           INPUT
            StandardParallel2   : double'''
        return super(IProjectedCoordinateSystem5, self).put_StandardParallel2(StandardParallel2)
    def get_LongitudeOf1st(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf1st (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf1st      : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LongitudeOf1st()
    def put_LongitudeOf1st(self, LongitudeOf1st):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf1st (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf1st      : double'''
        return super(IProjectedCoordinateSystem5, self).put_LongitudeOf1st(LongitudeOf1st)
    def get_LongitudeOf2nd(self):
        '''Method IProjectedCoordinateSystem.get_LongitudeOf2nd (from IProjectedCoordinateSystem)

           OUTPUT
            LongitudeOf2nd      : double*'''
        return super(IProjectedCoordinateSystem5, self).get_LongitudeOf2nd()
    def put_LongitudeOf2nd(self, LongitudeOf2nd):
        '''Method IProjectedCoordinateSystem.put_LongitudeOf2nd (from IProjectedCoordinateSystem)

           INPUT
            LongitudeOf2nd      : double'''
        return super(IProjectedCoordinateSystem5, self).put_LongitudeOf2nd(LongitudeOf2nd)
    def get_ScaleFactor(self):
        '''Method IProjectedCoordinateSystem.get_ScaleFactor (from IProjectedCoordinateSystem)

           OUTPUT
            ScaleFactor         : double*'''
        return super(IProjectedCoordinateSystem5, self).get_ScaleFactor()
    def put_ScaleFactor(self, ScaleFactor):
        '''Method IProjectedCoordinateSystem.put_ScaleFactor (from IProjectedCoordinateSystem)

           INPUT
            ScaleFactor         : double'''
        return super(IProjectedCoordinateSystem5, self).put_ScaleFactor(ScaleFactor)
    def get_Azimuth(self):
        '''Method IProjectedCoordinateSystem.get_Azimuth (from IProjectedCoordinateSystem)

           OUTPUT
            Azimuth             : double*'''
        return super(IProjectedCoordinateSystem5, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IProjectedCoordinateSystem.put_Azimuth (from IProjectedCoordinateSystem)

           INPUT
            Azimuth             : double'''
        return super(IProjectedCoordinateSystem5, self).put_Azimuth(Azimuth)
    def get_SpatialReferenceImpl(self):
        '''Method ISpatialReference.get_SpatialReferenceImpl (from ISpatialReference)

           OUTPUT
            srImpl              : esriSpatialReferenceImplHandle*'''
        return super(IProjectedCoordinateSystem5, self).get_SpatialReferenceImpl()
    def get_PrecisionImpl(self):
        '''Method ISpatialReference.get_PrecisionImpl (from ISpatialReference)

           OUTPUT
            PrecisionImpl       : esriPrecisionImplHandle*'''
        return super(IProjectedCoordinateSystem5, self).get_PrecisionImpl()
    def get_PrecisionExImpl(self):
        '''Method ISpatialReference.get_PrecisionExImpl (from ISpatialReference)

           OUTPUT
            PrecisionExImpl     : esriPrecisionExImplHandle*'''
        return super(IProjectedCoordinateSystem5, self).get_PrecisionExImpl()
    def HasXYPrecision(self):
        '''Method ISpatialReference.HasXYPrecision (from ISpatialReference)

           OUTPUT
            HasXYPrecision      : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).HasXYPrecision()
    def HasZPrecision(self):
        '''Method ISpatialReference.HasZPrecision (from ISpatialReference)

           OUTPUT
            HasZPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).HasZPrecision()
    def HasMPrecision(self):
        '''Method ISpatialReference.HasMPrecision (from ISpatialReference)

           OUTPUT
            HasMPrecision       : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).HasMPrecision()
    def IsPrecisionEqual(self, otherSR):
        '''Method ISpatialReference.IsPrecisionEqual (from ISpatialReference)

           INPUT
            otherSR             : ISpatialReference*

           OUTPUT
            IsPrecisionEqual    : VARIANT_BOOL*'''
        return super(IProjectedCoordinateSystem5, self).IsPrecisionEqual(otherSR)
    def SetFalseOriginAndUnits(self, falseX, falseY, xyUnits):
        '''Method ISpatialReference.SetFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseX              : double
            falseY              : double
            xyUnits             : double'''
        return super(IProjectedCoordinateSystem5, self).SetFalseOriginAndUnits(falseX, falseY, xyUnits)
    def SetZFalseOriginAndUnits(self, falseZ, zUnits):
        '''Method ISpatialReference.SetZFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseZ              : double
            zUnits              : double'''
        return super(IProjectedCoordinateSystem5, self).SetZFalseOriginAndUnits(falseZ, zUnits)
    def SetMFalseOriginAndUnits(self, falseM, mUnits):
        '''Method ISpatialReference.SetMFalseOriginAndUnits (from ISpatialReference)

           INPUTS
            falseM              : double
            mUnits              : double'''
        return super(IProjectedCoordinateSystem5, self).SetMFalseOriginAndUnits(falseM, mUnits)
    def GetFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseX              : double*
            falseY              : double*
            xyUnits             : double*'''
        return super(IProjectedCoordinateSystem5, self).GetFalseOriginAndUnits()
    def GetZFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetZFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseZ              : double*
            zUnits              : double*'''
        return super(IProjectedCoordinateSystem5, self).GetZFalseOriginAndUnits()
    def GetMFalseOriginAndUnits(self):
        '''Method ISpatialReference.GetMFalseOriginAndUnits (from ISpatialReference)

           OUTPUTS
            falseM              : double*
            mUnits              : double*'''
        return super(IProjectedCoordinateSystem5, self).GetMFalseOriginAndUnits()
    def GetDomain(self):
        '''Method ISpatialReference.GetDomain (from ISpatialReference)

           OUTPUTS
            XMin                : double*
            XMax                : double*
            YMin                : double*
            YMax                : double*'''
        return super(IProjectedCoordinateSystem5, self).GetDomain()
    def SetDomain(self, XMin, XMax, YMin, YMax):
        '''Method ISpatialReference.SetDomain (from ISpatialReference)

           INPUTS
            XMin                : double
            XMax                : double
            YMin                : double
            YMax                : double'''
        return super(IProjectedCoordinateSystem5, self).SetDomain(XMin, XMax, YMin, YMax)
    def GetZDomain(self):
        '''Method ISpatialReference.GetZDomain (from ISpatialReference)

           OUTPUTS
            outZMin             : double*
            outZMax             : double*'''
        return super(IProjectedCoordinateSystem5, self).GetZDomain()
    def SetZDomain(self, inZMin, inZMax):
        '''Method ISpatialReference.SetZDomain (from ISpatialReference)

           INPUTS
            inZMin              : double
            inZMax              : double'''
        return super(IProjectedCoordinateSystem5, self).SetZDomain(inZMin, inZMax)
    def GetMDomain(self):
        '''Method ISpatialReference.GetMDomain (from ISpatialReference)

           OUTPUTS
            outMMin             : double*
            outMMax             : double*'''
        return super(IProjectedCoordinateSystem5, self).GetMDomain()
    def SetMDomain(self, inMMin, inMMax):
        '''Method ISpatialReference.SetMDomain (from ISpatialReference)

           INPUTS
            inMMin              : double
            inMMax              : double'''
        return super(IProjectedCoordinateSystem5, self).SetMDomain(inMMin, inMMax)
    def get_ZCoordinateUnit(self):
        '''Method ISpatialReference.get_ZCoordinateUnit (from ISpatialReference)

           OUTPUT
            zunit               : ILinearUnit**'''
        return super(IProjectedCoordinateSystem5, self).get_ZCoordinateUnit()
    def put_ZCoordinateUnit(self, zunit):
        '''Method ISpatialReference.put_ZCoordinateUnit (from ISpatialReference)

           INPUT
            zunit               : ILinearUnit*'''
        return super(IProjectedCoordinateSystem5, self).put_ZCoordinateUnit(zunit)
    def Changed(self):
        '''Method ISpatialReference.Changed (from ISpatialReference)'''
        return super(IProjectedCoordinateSystem5, self).Changed()
    def get_Name(self):
        '''Method ISpatialReferenceInfo.get_Name (from ISpatialReferenceInfo)

           OUTPUT
            Name                : BSTR*'''
        return super(IProjectedCoordinateSystem5, self).get_Name()
    def get_Alias(self):
        '''Method ISpatialReferenceInfo.get_Alias (from ISpatialReferenceInfo)

           OUTPUT
            Alias               : BSTR*'''
        return super(IProjectedCoordinateSystem5, self).get_Alias()
    def get_Abbreviation(self):
        '''Method ISpatialReferenceInfo.get_Abbreviation (from ISpatialReferenceInfo)

           OUTPUT
            Abbreviation        : BSTR*'''
        return super(IProjectedCoordinateSystem5, self).get_Abbreviation()
    def get_Remarks(self):
        '''Method ISpatialReferenceInfo.get_Remarks (from ISpatialReferenceInfo)

           OUTPUT
            Remarks             : BSTR*'''
        return super(IProjectedCoordinateSystem5, self).get_Remarks()
    def get_FactoryCode(self):
        '''Method ISpatialReferenceInfo.get_FactoryCode (from ISpatialReferenceInfo)

           OUTPUT
            Code                : long*'''
        return super(IProjectedCoordinateSystem5, self).get_FactoryCode()
    Abbreviation = property(get_Abbreviation, None, None)
    Alias = property(get_Alias, None, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    CentralMeridian = property(None, put_CentralMeridian, None)
    CentralParallel = property(get_CentralParallel, put_CentralParallel, None)
    CoordinateUnit = property(get_CoordinateUnit, None, None)
    FactoryCode = property(get_FactoryCode, None, None)
    FalseEasting = property(get_FalseEasting, put_FalseEasting, None)
    FalseNorthing = property(get_FalseNorthing, put_FalseNorthing, None)
    GeographicCoordinateSystem = property(get_GeographicCoordinateSystem, None, None)
    Height = property(get_Height, put_Height, None)
    HorizonCount = property(get_HorizonCount, None, None)
    LatitudeOf1st = property(get_LatitudeOf1st, put_LatitudeOf1st, None)
    LatitudeOf2nd = property(get_LatitudeOf2nd, put_LatitudeOf2nd, None)
    LatitudeOfCenter = property(get_LatitudeOfCenter, put_LatitudeOfCenter, None)
    LatitudeOfOrigin = property(get_LatitudeOfOrigin, put_LatitudeOfOrigin, None)
    LongitudeOf1st = property(get_LongitudeOf1st, put_LongitudeOf1st, None)
    LongitudeOf2nd = property(get_LongitudeOf2nd, put_LongitudeOf2nd, None)
    LongitudeOfCenter = property(get_LongitudeOfCenter, put_LongitudeOfCenter, None)
    LongitudeOfOrigin = property(get_LongitudeOfOrigin, put_LongitudeOfOrigin, None)
    Name = property(get_Name, None, None)
    PrecisionExImpl = property(get_PrecisionExImpl, None, None)
    PrecisionImpl = property(get_PrecisionImpl, None, None)
    Projection = property(get_Projection, None, None)
    PseudoStandardParallel1 = property(get_PseudoStandardParallel1, put_PseudoStandardParallel1, None)
    Remarks = property(get_Remarks, None, None)
    Rotation = property(get_Rotation, put_Rotation, None)
    ScaleFactor = property(get_ScaleFactor, put_ScaleFactor, None)
    SpatialReferenceImpl = property(get_SpatialReferenceImpl, None, None)
    StandardParallel1 = property(get_StandardParallel1, put_StandardParallel1, None)
    StandardParallel2 = property(get_StandardParallel2, put_StandardParallel2, None)
    Usage = property(get_Usage, None, None)
    XScaleFactor = property(get_XScaleFactor, put_XScaleFactor, None)
    YScaleFactor = property(get_YScaleFactor, put_YScaleFactor, None)
    ZCoordinateUnit = property(get_ZCoordinateUnit, put_ZCoordinateUnit, None)
    CentralMeridian = IndexProperty(get_CentralMeridian, None)
    Horizon = IndexProperty(get_Horizon, None)

class IEnumVertex(_esriGeometry.IEnumVertex):
    _IID = uuid.UUID('4cf93638-eb81-11d2-9f2d-00c04f6bc8e8')

    def __init__(self, *args, **kw):
        super(IEnumVertex, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Next(self):
        '''Method IEnumVertex.Next

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex, self).Next()
    def __iter__(self):
        try:
            super(IEnumVertex, self).Reset()
            val = super(IEnumVertex, self).Next()
            while any(val):
                yield val
                val = super(IEnumVertex, self).Next()
        except:
            pass
    def QueryNext(self, vertex):
        '''Method IEnumVertex.QueryNext

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex, self).QueryNext(vertex)
    def Previous(self):
        '''Method IEnumVertex.Previous

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex, self).Previous()
    def QueryPrevious(self, vertex):
        '''Method IEnumVertex.QueryPrevious

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex, self).QueryPrevious(vertex)
    def NextInPart(self):
        '''Method IEnumVertex.NextInPart

           OUTPUTS
            outVertex           : IPoint**
            OutVertexIndex      : long*'''
        return super(IEnumVertex, self).NextInPart()
    def QueryNextInPart(self, vertex):
        '''Method IEnumVertex.QueryNextInPart

           INPUT
            vertex              : IPoint*

           OUTPUT
            OutVertexIndex      : long*'''
        return super(IEnumVertex, self).QueryNextInPart(vertex)
    def Skip(self, numVertices):
        '''Method IEnumVertex.Skip

           INPUT
            numVertices         : long'''
        return super(IEnumVertex, self).Skip(numVertices)
    def Reset(self):
        '''Method IEnumVertex.Reset'''
        return super(IEnumVertex, self).Reset()
    def Clone(self):
        '''Method IEnumVertex.Clone

           OUTPUT
            outEnumerator       : IEnumVertex**'''
        return super(IEnumVertex, self).Clone()
    def ResetToEnd(self):
        '''Method IEnumVertex.ResetToEnd'''
        return super(IEnumVertex, self).ResetToEnd()
    def SetAt(self, iPart, iVertex):
        '''Method IEnumVertex.SetAt

           INPUTS
            iPart               : long
            iVertex             : long'''
        return super(IEnumVertex, self).SetAt(iPart, iVertex)
    def IsLastInPart(self):
        '''Method IEnumVertex.IsLastInPart

           OUTPUT
            IsLastInPart        : VARIANT_BOOL*'''
        return super(IEnumVertex, self).IsLastInPart()
    def put_X(self, X):
        '''Method IEnumVertex.put_X

           INPUT
            X                   : double'''
        return super(IEnumVertex, self).put_X(X)
    def put_Y(self, Y):
        '''Method IEnumVertex.put_Y

           INPUT
            Y                   : double'''
        return super(IEnumVertex, self).put_Y(Y)
    def put_Z(self, Z):
        '''Method IEnumVertex.put_Z

           INPUT
            Z                   : double'''
        return super(IEnumVertex, self).put_Z(Z)
    def put_M(self, M):
        '''Method IEnumVertex.put_M

           INPUT
            M                   : double'''
        return super(IEnumVertex, self).put_M(M)
    def put_ID(self, pointID):
        '''Method IEnumVertex.put_ID

           INPUT
            pointID             : long'''
        return super(IEnumVertex, self).put_ID(pointID)
    def put_Attribute(self, attributeType, Value):
        '''Method IEnumVertex.put_Attribute

           INPUTS
            attributeType       : esriGeometryAttributes
            Value               : double'''
        return super(IEnumVertex, self).put_Attribute(attributeType, Value)
    Attribute = property(None, put_Attribute, None)
    ID = property(None, put_ID, None)
    M = property(None, put_M, None)
    X = property(None, put_X, None)
    Y = property(None, put_Y, None)
    Z = property(None, put_Z, None)

class IPointCollection(_esriGeometry.IPointCollection):
    _IID = uuid.UUID('de08a214-4fc2-11d1-834e-0000f8775be9')
    def get_PointCount(self):
        '''Method IPointCollection.get_PointCount

           OUTPUT
            cPoints             : long*'''
        return super(IPointCollection, self).get_PointCount()
    def get_Point(self, i):
        '''Method IPointCollection.get_Point

           INPUT
            i                   : long

           OUTPUT
            Point               : IPoint**'''
        return super(IPointCollection, self).get_Point(i)
    def AddPoint(self, inPoint, before, after):
        '''Method IPointCollection.AddPoint

           INPUTS
            inPoint             : IPoint*
            before              : VARIANT*
            after               : VARIANT*'''
        return super(IPointCollection, self).AddPoint(inPoint, before, after)
    def UpdatePoint(self, i, p):
        '''Method IPointCollection.UpdatePoint

           INPUTS
            i                   : long
            p                   : IPoint*'''
        return super(IPointCollection, self).UpdatePoint(i, p)
    def QueryPoints(self, Index, Count, Points):
        '''Method IPointCollection.QueryPoints

           INPUTS
            Index               : long
            Count               : long
            Points              : IPoint**'''
        return super(IPointCollection, self).QueryPoints(Index, Count, Points)
    def InsertPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertPoints

           INPUTS
            Index               : long
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection, self).InsertPoints(Index, Count, newPoints)
    def InsertPointCollection(self, Index, newPoints):
        '''Method IPointCollection.InsertPointCollection

           INPUTS
            Index               : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection, self).InsertPointCollection(Index, newPoints)
    def AddPoints(self, Count, newPoints):
        '''Method IPointCollection.AddPoints

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection, self).AddPoints(Count, newPoints)
    def AddPointCollection(self, newPoints):
        '''Method IPointCollection.AddPointCollection

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection, self).AddPointCollection(newPoints)
    def SetPoints(self, Count, newPoints):
        '''Method IPointCollection.SetPoints

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection, self).SetPoints(Count, newPoints)
    def SetPointCollection(self, newPoints):
        '''Method IPointCollection.SetPointCollection

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection, self).SetPointCollection(newPoints)
    def RemovePoints(self, Index, Count):
        '''Method IPointCollection.RemovePoints

           INPUTS
            Index               : long
            Count               : long'''
        return super(IPointCollection, self).RemovePoints(Index, Count)
    def get_EnumVertices(self):
        '''Method IPointCollection.get_EnumVertices

           OUTPUT
            newVertexEnumerator : IEnumVertex**'''
        return super(IPointCollection, self).get_EnumVertices()
    def AddWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.AddWKSPoints

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection, self).AddWKSPoints(Count, pointStructures)
    def SetWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.SetWKSPoints

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection, self).SetWKSPoints(Count, pointStructures)
    def QueryWKSPoints(self, Index, Count):
        '''Method IPointCollection.QueryWKSPoints

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPoint*'''
        return super(IPointCollection, self).QueryWKSPoints(Index, Count)
    def InsertWKSPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertWKSPoints

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPoint*'''
        return super(IPointCollection, self).InsertWKSPoints(Index, Count, newPoints)
    def ReplacePoints(self, Index, comingIn, goingAway, newPoints):
        '''Method IPointCollection.ReplacePoints

           INPUTS
            Index               : long
            comingIn            : long
            goingAway           : long
            newPoints           : IPoint**'''
        return super(IPointCollection, self).ReplacePoints(Index, comingIn, goingAway, newPoints)
    def ReplacePointCollection(self, Index, goingAway, newPoints):
        '''Method IPointCollection.ReplacePointCollection

           INPUTS
            Index               : long
            goingAway           : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection, self).ReplacePointCollection(Index, goingAway, newPoints)
    def QueryPoint(self, Index, Point):
        '''Method IPointCollection.QueryPoint

           INPUTS
            Index               : long
            Point               : IPoint*'''
        return super(IPointCollection, self).QueryPoint(Index, Point)
    EnumVertices = property(get_EnumVertices, None, None)
    PointCount = property(get_PointCount, None, None)
    Point = IndexProperty(get_Point, None)

class IPointCollection2(_esriGeometry.IPointCollection2):
    _IID = uuid.UUID('f643a012-c208-48db-b2d6-565f52b55c8e')
    def GetPoints(self, Index, Count):
        '''Method IPointCollection2.GetPoints

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            Points              : IPoint**'''
        return super(IPointCollection2, self).GetPoints(Index, Count)
    def get_PointCount(self):
        '''Method IPointCollection.get_PointCount (from IPointCollection)

           OUTPUT
            cPoints             : long*'''
        return super(IPointCollection2, self).get_PointCount()
    def get_Point(self, i):
        '''Method IPointCollection.get_Point (from IPointCollection)

           INPUT
            i                   : long

           OUTPUT
            Point               : IPoint**'''
        return super(IPointCollection2, self).get_Point(i)
    def AddPoint(self, inPoint, before, after):
        '''Method IPointCollection.AddPoint (from IPointCollection)

           INPUTS
            inPoint             : IPoint*
            before              : VARIANT*
            after               : VARIANT*'''
        return super(IPointCollection2, self).AddPoint(inPoint, before, after)
    def UpdatePoint(self, i, p):
        '''Method IPointCollection.UpdatePoint (from IPointCollection)

           INPUTS
            i                   : long
            p                   : IPoint*'''
        return super(IPointCollection2, self).UpdatePoint(i, p)
    def QueryPoints(self, Index, Count, Points):
        '''Method IPointCollection.QueryPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            Points              : IPoint**'''
        return super(IPointCollection2, self).QueryPoints(Index, Count, Points)
    def InsertPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection2, self).InsertPoints(Index, Count, newPoints)
    def InsertPointCollection(self, Index, newPoints):
        '''Method IPointCollection.InsertPointCollection (from IPointCollection)

           INPUTS
            Index               : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection2, self).InsertPointCollection(Index, newPoints)
    def AddPoints(self, Count, newPoints):
        '''Method IPointCollection.AddPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection2, self).AddPoints(Count, newPoints)
    def AddPointCollection(self, newPoints):
        '''Method IPointCollection.AddPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection2, self).AddPointCollection(newPoints)
    def SetPoints(self, Count, newPoints):
        '''Method IPointCollection.SetPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection2, self).SetPoints(Count, newPoints)
    def SetPointCollection(self, newPoints):
        '''Method IPointCollection.SetPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection2, self).SetPointCollection(newPoints)
    def RemovePoints(self, Index, Count):
        '''Method IPointCollection.RemovePoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long'''
        return super(IPointCollection2, self).RemovePoints(Index, Count)
    def get_EnumVertices(self):
        '''Method IPointCollection.get_EnumVertices (from IPointCollection)

           OUTPUT
            newVertexEnumerator : IEnumVertex**'''
        return super(IPointCollection2, self).get_EnumVertices()
    def AddWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.AddWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection2, self).AddWKSPoints(Count, pointStructures)
    def SetWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.SetWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection2, self).SetWKSPoints(Count, pointStructures)
    def QueryWKSPoints(self, Index, Count):
        '''Method IPointCollection.QueryWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPoint*'''
        return super(IPointCollection2, self).QueryWKSPoints(Index, Count)
    def InsertWKSPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPoint*'''
        return super(IPointCollection2, self).InsertWKSPoints(Index, Count, newPoints)
    def ReplacePoints(self, Index, comingIn, goingAway, newPoints):
        '''Method IPointCollection.ReplacePoints (from IPointCollection)

           INPUTS
            Index               : long
            comingIn            : long
            goingAway           : long
            newPoints           : IPoint**'''
        return super(IPointCollection2, self).ReplacePoints(Index, comingIn, goingAway, newPoints)
    def ReplacePointCollection(self, Index, goingAway, newPoints):
        '''Method IPointCollection.ReplacePointCollection (from IPointCollection)

           INPUTS
            Index               : long
            goingAway           : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection2, self).ReplacePointCollection(Index, goingAway, newPoints)
    def QueryPoint(self, Index, Point):
        '''Method IPointCollection.QueryPoint (from IPointCollection)

           INPUTS
            Index               : long
            Point               : IPoint*'''
        return super(IPointCollection2, self).QueryPoint(Index, Point)
    EnumVertices = property(get_EnumVertices, None, None)
    PointCount = property(get_PointCount, None, None)
    Point = IndexProperty(get_Point, None)

class IPointCollection3(_esriGeometry.IPointCollection3):
    _IID = uuid.UUID('af10d3e8-f2f8-49ec-a6c5-7018099eeaed')
    def get_IndexedEnumVertices(self, queryGeometry):
        '''Method IPointCollection3.get_IndexedEnumVertices

           INPUT
            queryGeometry       : IGeometry*

           OUTPUT
            indexedVertexEnumerator: IEnumVertex**'''
        return super(IPointCollection3, self).get_IndexedEnumVertices(queryGeometry)
    def GetPoints(self, Index, Count):
        '''Method IPointCollection2.GetPoints (from IPointCollection2)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            Points              : IPoint**'''
        return super(IPointCollection3, self).GetPoints(Index, Count)
    def get_PointCount(self):
        '''Method IPointCollection.get_PointCount (from IPointCollection)

           OUTPUT
            cPoints             : long*'''
        return super(IPointCollection3, self).get_PointCount()
    def get_Point(self, i):
        '''Method IPointCollection.get_Point (from IPointCollection)

           INPUT
            i                   : long

           OUTPUT
            Point               : IPoint**'''
        return super(IPointCollection3, self).get_Point(i)
    def AddPoint(self, inPoint, before, after):
        '''Method IPointCollection.AddPoint (from IPointCollection)

           INPUTS
            inPoint             : IPoint*
            before              : VARIANT*
            after               : VARIANT*'''
        return super(IPointCollection3, self).AddPoint(inPoint, before, after)
    def UpdatePoint(self, i, p):
        '''Method IPointCollection.UpdatePoint (from IPointCollection)

           INPUTS
            i                   : long
            p                   : IPoint*'''
        return super(IPointCollection3, self).UpdatePoint(i, p)
    def QueryPoints(self, Index, Count, Points):
        '''Method IPointCollection.QueryPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            Points              : IPoint**'''
        return super(IPointCollection3, self).QueryPoints(Index, Count, Points)
    def InsertPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection3, self).InsertPoints(Index, Count, newPoints)
    def InsertPointCollection(self, Index, newPoints):
        '''Method IPointCollection.InsertPointCollection (from IPointCollection)

           INPUTS
            Index               : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection3, self).InsertPointCollection(Index, newPoints)
    def AddPoints(self, Count, newPoints):
        '''Method IPointCollection.AddPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection3, self).AddPoints(Count, newPoints)
    def AddPointCollection(self, newPoints):
        '''Method IPointCollection.AddPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection3, self).AddPointCollection(newPoints)
    def SetPoints(self, Count, newPoints):
        '''Method IPointCollection.SetPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection3, self).SetPoints(Count, newPoints)
    def SetPointCollection(self, newPoints):
        '''Method IPointCollection.SetPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection3, self).SetPointCollection(newPoints)
    def RemovePoints(self, Index, Count):
        '''Method IPointCollection.RemovePoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long'''
        return super(IPointCollection3, self).RemovePoints(Index, Count)
    def get_EnumVertices(self):
        '''Method IPointCollection.get_EnumVertices (from IPointCollection)

           OUTPUT
            newVertexEnumerator : IEnumVertex**'''
        return super(IPointCollection3, self).get_EnumVertices()
    def AddWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.AddWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection3, self).AddWKSPoints(Count, pointStructures)
    def SetWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.SetWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection3, self).SetWKSPoints(Count, pointStructures)
    def QueryWKSPoints(self, Index, Count):
        '''Method IPointCollection.QueryWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPoint*'''
        return super(IPointCollection3, self).QueryWKSPoints(Index, Count)
    def InsertWKSPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPoint*'''
        return super(IPointCollection3, self).InsertWKSPoints(Index, Count, newPoints)
    def ReplacePoints(self, Index, comingIn, goingAway, newPoints):
        '''Method IPointCollection.ReplacePoints (from IPointCollection)

           INPUTS
            Index               : long
            comingIn            : long
            goingAway           : long
            newPoints           : IPoint**'''
        return super(IPointCollection3, self).ReplacePoints(Index, comingIn, goingAway, newPoints)
    def ReplacePointCollection(self, Index, goingAway, newPoints):
        '''Method IPointCollection.ReplacePointCollection (from IPointCollection)

           INPUTS
            Index               : long
            goingAway           : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection3, self).ReplacePointCollection(Index, goingAway, newPoints)
    def QueryPoint(self, Index, Point):
        '''Method IPointCollection.QueryPoint (from IPointCollection)

           INPUTS
            Index               : long
            Point               : IPoint*'''
        return super(IPointCollection3, self).QueryPoint(Index, Point)
    EnumVertices = property(get_EnumVertices, None, None)
    PointCount = property(get_PointCount, None, None)
    IndexedEnumVertices = IndexProperty(get_IndexedEnumVertices, None)
    Point = IndexProperty(get_Point, None)

class IPointCollection4(_esriGeometry.IPointCollection4):
    _IID = uuid.UUID('773f7279-aefb-11d5-8112-00c04fa0adf8')
    def AddWKSPointZs(self, Count, pointStructures):
        '''Method IPointCollection4.AddWKSPointZs

           INPUTS
            Count               : long
            pointStructures     : WKSPointZ*'''
        return super(IPointCollection4, self).AddWKSPointZs(Count, pointStructures)
    def SetWKSPointZs(self, Count, pointStructures):
        '''Method IPointCollection4.SetWKSPointZs

           INPUTS
            Count               : long
            pointStructures     : WKSPointZ*'''
        return super(IPointCollection4, self).SetWKSPointZs(Count, pointStructures)
    def QueryWKSPointZs(self, Index, Count):
        '''Method IPointCollection4.QueryWKSPointZs

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPointZ*'''
        return super(IPointCollection4, self).QueryWKSPointZs(Index, Count)
    def InsertWKSPointZs(self, Index, Count, newPoints):
        '''Method IPointCollection4.InsertWKSPointZs

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPointZ*'''
        return super(IPointCollection4, self).InsertWKSPointZs(Index, Count, newPoints)
    def get_IndexedEnumVertices(self, queryGeometry):
        '''Method IPointCollection3.get_IndexedEnumVertices (from IPointCollection3)

           INPUT
            queryGeometry       : IGeometry*

           OUTPUT
            indexedVertexEnumerator: IEnumVertex**'''
        return super(IPointCollection4, self).get_IndexedEnumVertices(queryGeometry)
    def GetPoints(self, Index, Count):
        '''Method IPointCollection2.GetPoints (from IPointCollection2)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            Points              : IPoint**'''
        return super(IPointCollection4, self).GetPoints(Index, Count)
    def get_PointCount(self):
        '''Method IPointCollection.get_PointCount (from IPointCollection)

           OUTPUT
            cPoints             : long*'''
        return super(IPointCollection4, self).get_PointCount()
    def get_Point(self, i):
        '''Method IPointCollection.get_Point (from IPointCollection)

           INPUT
            i                   : long

           OUTPUT
            Point               : IPoint**'''
        return super(IPointCollection4, self).get_Point(i)
    def AddPoint(self, inPoint, before, after):
        '''Method IPointCollection.AddPoint (from IPointCollection)

           INPUTS
            inPoint             : IPoint*
            before              : VARIANT*
            after               : VARIANT*'''
        return super(IPointCollection4, self).AddPoint(inPoint, before, after)
    def UpdatePoint(self, i, p):
        '''Method IPointCollection.UpdatePoint (from IPointCollection)

           INPUTS
            i                   : long
            p                   : IPoint*'''
        return super(IPointCollection4, self).UpdatePoint(i, p)
    def QueryPoints(self, Index, Count, Points):
        '''Method IPointCollection.QueryPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            Points              : IPoint**'''
        return super(IPointCollection4, self).QueryPoints(Index, Count, Points)
    def InsertPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection4, self).InsertPoints(Index, Count, newPoints)
    def InsertPointCollection(self, Index, newPoints):
        '''Method IPointCollection.InsertPointCollection (from IPointCollection)

           INPUTS
            Index               : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection4, self).InsertPointCollection(Index, newPoints)
    def AddPoints(self, Count, newPoints):
        '''Method IPointCollection.AddPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection4, self).AddPoints(Count, newPoints)
    def AddPointCollection(self, newPoints):
        '''Method IPointCollection.AddPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection4, self).AddPointCollection(newPoints)
    def SetPoints(self, Count, newPoints):
        '''Method IPointCollection.SetPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection4, self).SetPoints(Count, newPoints)
    def SetPointCollection(self, newPoints):
        '''Method IPointCollection.SetPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection4, self).SetPointCollection(newPoints)
    def RemovePoints(self, Index, Count):
        '''Method IPointCollection.RemovePoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long'''
        return super(IPointCollection4, self).RemovePoints(Index, Count)
    def get_EnumVertices(self):
        '''Method IPointCollection.get_EnumVertices (from IPointCollection)

           OUTPUT
            newVertexEnumerator : IEnumVertex**'''
        return super(IPointCollection4, self).get_EnumVertices()
    def AddWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.AddWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection4, self).AddWKSPoints(Count, pointStructures)
    def SetWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.SetWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection4, self).SetWKSPoints(Count, pointStructures)
    def QueryWKSPoints(self, Index, Count):
        '''Method IPointCollection.QueryWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPoint*'''
        return super(IPointCollection4, self).QueryWKSPoints(Index, Count)
    def InsertWKSPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPoint*'''
        return super(IPointCollection4, self).InsertWKSPoints(Index, Count, newPoints)
    def ReplacePoints(self, Index, comingIn, goingAway, newPoints):
        '''Method IPointCollection.ReplacePoints (from IPointCollection)

           INPUTS
            Index               : long
            comingIn            : long
            goingAway           : long
            newPoints           : IPoint**'''
        return super(IPointCollection4, self).ReplacePoints(Index, comingIn, goingAway, newPoints)
    def ReplacePointCollection(self, Index, goingAway, newPoints):
        '''Method IPointCollection.ReplacePointCollection (from IPointCollection)

           INPUTS
            Index               : long
            goingAway           : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection4, self).ReplacePointCollection(Index, goingAway, newPoints)
    def QueryPoint(self, Index, Point):
        '''Method IPointCollection.QueryPoint (from IPointCollection)

           INPUTS
            Index               : long
            Point               : IPoint*'''
        return super(IPointCollection4, self).QueryPoint(Index, Point)
    EnumVertices = property(get_EnumVertices, None, None)
    PointCount = property(get_PointCount, None, None)
    IndexedEnumVertices = IndexProperty(get_IndexedEnumVertices, None)
    Point = IndexProperty(get_Point, None)

class IVector3D(_esriGeometry.IVector3D):
    _IID = uuid.UUID('b3fa5971-ada3-11d2-9fae-00c04f8ece3d')

    def __init__(self, *args, **kw):
        super(IVector3D, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_XComponent(self):
        '''Method IVector3D.get_XComponent

           OUTPUT
            dx                  : double*'''
        return super(IVector3D, self).get_XComponent()
    def put_XComponent(self, dx):
        '''Method IVector3D.put_XComponent

           INPUT
            dx                  : double'''
        return super(IVector3D, self).put_XComponent(dx)
    def get_YComponent(self):
        '''Method IVector3D.get_YComponent

           OUTPUT
            dy                  : double*'''
        return super(IVector3D, self).get_YComponent()
    def put_YComponent(self, dy):
        '''Method IVector3D.put_YComponent

           INPUT
            dy                  : double'''
        return super(IVector3D, self).put_YComponent(dy)
    def get_ZComponent(self):
        '''Method IVector3D.get_ZComponent

           OUTPUT
            dz                  : double*'''
        return super(IVector3D, self).get_ZComponent()
    def put_ZComponent(self, dz):
        '''Method IVector3D.put_ZComponent

           INPUT
            dz                  : double'''
        return super(IVector3D, self).put_ZComponent(dz)
    def get_Inclination(self):
        '''Method IVector3D.get_Inclination

           OUTPUT
            Inclination         : double*'''
        return super(IVector3D, self).get_Inclination()
    def put_Inclination(self, Inclination):
        '''Method IVector3D.put_Inclination

           INPUT
            Inclination         : double'''
        return super(IVector3D, self).put_Inclination(Inclination)
    def get_Azimuth(self):
        '''Method IVector3D.get_Azimuth

           OUTPUT
            Azimuth             : double*'''
        return super(IVector3D, self).get_Azimuth()
    def put_Azimuth(self, Azimuth):
        '''Method IVector3D.put_Azimuth

           INPUT
            Azimuth             : double'''
        return super(IVector3D, self).put_Azimuth(Azimuth)
    def Move(self, dx, dy, dz):
        '''Method IVector3D.Move

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double'''
        return super(IVector3D, self).Move(dx, dy, dz)
    def QueryComponents(self):
        '''Method IVector3D.QueryComponents

           OUTPUTS
            dx                  : double*
            dy                  : double*
            dz                  : double*'''
        return super(IVector3D, self).QueryComponents()
    def SetComponents(self, dx, dy, dz):
        '''Method IVector3D.SetComponents

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double'''
        return super(IVector3D, self).SetComponents(dx, dy, dz)
    def ConstructDifference(self, point1, point2):
        '''Method IVector3D.ConstructDifference

           INPUTS
            point1              : IPoint*
            point2              : IPoint*'''
        return super(IVector3D, self).ConstructDifference(point1, point2)
    def Rotate(self, Angle, axis):
        '''Method IVector3D.Rotate

           INPUTS
            Angle               : double
            axis                : IVector3D*'''
        return super(IVector3D, self).Rotate(Angle, axis)
    def PolarSet(self, Azimuth, Inclination, radiusLength):
        '''Method IVector3D.PolarSet

           INPUTS
            Azimuth             : double
            Inclination         : double
            radiusLength        : double'''
        return super(IVector3D, self).PolarSet(Azimuth, Inclination, radiusLength)
    def PolarQuery(self):
        '''Method IVector3D.PolarQuery

           OUTPUTS
            Azimuth             : double*
            Inclination         : double*
            radiusLength        : double*'''
        return super(IVector3D, self).PolarQuery()
    def PolarMove(self, dAzimuth, dInclination, dRadius):
        '''Method IVector3D.PolarMove

           INPUTS
            dAzimuth            : double
            dInclination        : double
            dRadius             : double'''
        return super(IVector3D, self).PolarMove(dAzimuth, dInclination, dRadius)
    def CrossProduct(self, otherVector):
        '''Method IVector3D.CrossProduct

           INPUT
            otherVector         : IVector*

           OUTPUT
            result              : IVector**'''
        return super(IVector3D, self).CrossProduct(otherVector)
    def ConstructCrossProduct(self, vector1, vector2):
        '''Method IVector3D.ConstructCrossProduct

           INPUTS
            vector1             : IVector*
            vector2             : IVector*'''
        return super(IVector3D, self).ConstructCrossProduct(vector1, vector2)
    def get_Dimension(self):
        '''Method IVector.get_Dimension (from IVector)

           OUTPUT
            Dimension           : long*'''
        return super(IVector3D, self).get_Dimension()
    def get_IsEmpty(self):
        '''Method IVector.get_IsEmpty (from IVector)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IVector3D, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IVector.SetEmpty (from IVector)'''
        return super(IVector3D, self).SetEmpty()
    def get_ComponentByIndex(self, componentIndex):
        '''Method IVector.get_ComponentByIndex (from IVector)

           INPUT
            componentIndex      : long

           OUTPUT
            componentValue      : double*'''
        return super(IVector3D, self).get_ComponentByIndex(componentIndex)
    def put_ComponentByIndex(self, componentIndex, componentValue):
        '''Method IVector.put_ComponentByIndex (from IVector)

           INPUTS
            componentIndex      : long
            componentValue      : double'''
        return super(IVector3D, self).put_ComponentByIndex(componentIndex, componentValue)
    def get_Magnitude(self):
        '''Method IVector.get_Magnitude (from IVector)

           OUTPUT
            Magnitude           : double*'''
        return super(IVector3D, self).get_Magnitude()
    def put_Magnitude(self, Magnitude):
        '''Method IVector.put_Magnitude (from IVector)

           INPUT
            Magnitude           : double'''
        return super(IVector3D, self).put_Magnitude(Magnitude)
    def Normalize(self):
        '''Method IVector.Normalize (from IVector)'''
        return super(IVector3D, self).Normalize()
    def Scale(self, ScaleFactor):
        '''Method IVector.Scale (from IVector)

           INPUT
            ScaleFactor         : double'''
        return super(IVector3D, self).Scale(ScaleFactor)
    def AddVector(self, otherVector):
        '''Method IVector.AddVector (from IVector)

           INPUT
            otherVector         : IVector*

           OUTPUT
            result              : IVector**'''
        return super(IVector3D, self).AddVector(otherVector)
    def SubtractVector(self, otherVector):
        '''Method IVector.SubtractVector (from IVector)

           INPUT
            otherVector         : IVector*

           OUTPUT
            result              : IVector**'''
        return super(IVector3D, self).SubtractVector(otherVector)
    def ConstructAddVector(self, vector1, vector2):
        '''Method IVector.ConstructAddVector (from IVector)

           INPUTS
            vector1             : IVector*
            vector2             : IVector*'''
        return super(IVector3D, self).ConstructAddVector(vector1, vector2)
    def ConstructSubtractVector(self, vector1, vector2):
        '''Method IVector.ConstructSubtractVector (from IVector)

           INPUTS
            vector1             : IVector*
            vector2             : IVector*'''
        return super(IVector3D, self).ConstructSubtractVector(vector1, vector2)
    def DotProduct(self, otherVector):
        '''Method IVector.DotProduct (from IVector)

           INPUT
            otherVector         : IVector*

           OUTPUT
            result              : double*'''
        return super(IVector3D, self).DotProduct(otherVector)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    ComponentByIndex = property(None, put_ComponentByIndex, None)
    Dimension = property(get_Dimension, None, None)
    Inclination = property(get_Inclination, put_Inclination, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Magnitude = property(get_Magnitude, put_Magnitude, None)
    XComponent = property(get_XComponent, put_XComponent, None)
    YComponent = property(get_YComponent, put_YComponent, None)
    ZComponent = property(get_ZComponent, put_ZComponent, None)
    ComponentByIndex = IndexProperty(get_ComponentByIndex, None)

class IEnumGeometry(_esriGeometry.IEnumGeometry):
    _IID = uuid.UUID('bd2503ef-dea7-11d0-867f-0000f8751720')
    def Next(self):
        '''Method IEnumGeometry.Next

           OUTPUT
            nextGeometry        : IGeometry**'''
        return super(IEnumGeometry, self).Next()
    def __iter__(self):
        try:
            super(IEnumGeometry, self).Reset()
            val = super(IEnumGeometry, self).Next()
            while val:
                yield val
                val = super(IEnumGeometry, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumGeometry.Reset'''
        return super(IEnumGeometry, self).Reset()
    def get_Count(self):
        '''Method IEnumGeometry.get_Count

           OUTPUT
            GeometryCount       : long*'''
        return super(IEnumGeometry, self).get_Count()
    Count = property(get_Count, None, None)

class IGeometryCollection(_esriGeometry.IGeometryCollection):
    _IID = uuid.UUID('c801565e-99ca-11d0-82f7-0000f8034032')
    def get_GeometryCount(self):
        '''Method IGeometryCollection.get_GeometryCount

           OUTPUT
            cParts              : long*'''
        return super(IGeometryCollection, self).get_GeometryCount()
    def get_Geometry(self, Index):
        '''Method IGeometryCollection.get_Geometry

           INPUT
            Index               : long

           OUTPUT
            outPart             : IGeometry**'''
        return super(IGeometryCollection, self).get_Geometry(Index)
    def AddGeometry(self, inGeometry, before, after):
        '''Method IGeometryCollection.AddGeometry

           INPUTS
            inGeometry          : IGeometry*
            before              : VARIANT*
            after               : VARIANT*'''
        return super(IGeometryCollection, self).AddGeometry(inGeometry, before, after)
    def QueryGeometries(self, Index, Count):
        '''Method IGeometryCollection.QueryGeometries

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            geometries          : IGeometry**'''
        return super(IGeometryCollection, self).QueryGeometries(Index, Count)
    def AddGeometries(self, Count, newGeometries):
        '''Method IGeometryCollection.AddGeometries

           INPUTS
            Count               : long
            newGeometries       : IGeometry**'''
        return super(IGeometryCollection, self).AddGeometries(Count, newGeometries)
    def AddGeometryCollection(self, newGeometries):
        '''Method IGeometryCollection.AddGeometryCollection

           INPUT
            newGeometries       : IGeometryCollection*'''
        return super(IGeometryCollection, self).AddGeometryCollection(newGeometries)
    def InsertGeometries(self, Index, Count, newGeometries):
        '''Method IGeometryCollection.InsertGeometries

           INPUTS
            Index               : long
            Count               : long
            newGeometries       : IGeometry**'''
        return super(IGeometryCollection, self).InsertGeometries(Index, Count, newGeometries)
    def InsertGeometryCollection(self, Index, newGeometries):
        '''Method IGeometryCollection.InsertGeometryCollection

           INPUTS
            Index               : long
            newGeometries       : IGeometryCollection*'''
        return super(IGeometryCollection, self).InsertGeometryCollection(Index, newGeometries)
    def SetGeometries(self, Count, newGeometries):
        '''Method IGeometryCollection.SetGeometries

           INPUTS
            Count               : long
            newGeometries       : IGeometry**'''
        return super(IGeometryCollection, self).SetGeometries(Count, newGeometries)
    def SetGeometryCollection(self, newParts):
        '''Method IGeometryCollection.SetGeometryCollection

           INPUT
            newParts            : IGeometryCollection*'''
        return super(IGeometryCollection, self).SetGeometryCollection(newParts)
    def RemoveGeometries(self, Index, Count):
        '''Method IGeometryCollection.RemoveGeometries

           INPUTS
            Index               : long
            Count               : long'''
        return super(IGeometryCollection, self).RemoveGeometries(Index, Count)
    def GeometriesChanged(self):
        '''Method IGeometryCollection.GeometriesChanged'''
        return super(IGeometryCollection, self).GeometriesChanged()
    GeometryCount = property(get_GeometryCount, None, None)
    Geometry = IndexProperty(get_Geometry, None)

class IEnumSplitPoint(_esriGeometry.IEnumSplitPoint):
    _IID = uuid.UUID('6b640160-fa9a-11d3-9f6a-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IEnumSplitPoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def NextInSequence(self):
        '''Method IEnumSplitPoint.NextInSequence

           OUTPUTS
            splitPoint          : IPoint**
            part                : long*
            vertex              : long*'''
        return super(IEnumSplitPoint, self).NextInSequence()
    def PreviousInSequence(self):
        '''Method IEnumSplitPoint.PreviousInSequence

           OUTPUTS
            splitPoint          : IPoint**
            part                : long*
            vertex              : long*'''
        return super(IEnumSplitPoint, self).PreviousInSequence()
    def get_SplitHappened(self):
        '''Method IEnumSplitPoint.get_SplitHappened

           OUTPUT
            SplitHappened       : VARIANT_BOOL*'''
        return super(IEnumSplitPoint, self).get_SplitHappened()
    def get_SplitDistance(self):
        '''Method IEnumSplitPoint.get_SplitDistance

           OUTPUT
            SplitDistance       : double*'''
        return super(IEnumSplitPoint, self).get_SplitDistance()
    def QueryOldAttributes(self, oldAttributes):
        '''Method IEnumSplitPoint.QueryOldAttributes

           INPUT
            oldAttributes       : esriPointAttributes*'''
        return super(IEnumSplitPoint, self).QueryOldAttributes(oldAttributes)
    def get_OldM(self):
        '''Method IEnumSplitPoint.get_OldM

           OUTPUT
            OldM                : double*'''
        return super(IEnumSplitPoint, self).get_OldM()
    def get_OldZ(self):
        '''Method IEnumSplitPoint.get_OldZ

           OUTPUT
            OldZ                : double*'''
        return super(IEnumSplitPoint, self).get_OldZ()
    def get_OldID(self):
        '''Method IEnumSplitPoint.get_OldID

           OUTPUT
            OldID               : long*'''
        return super(IEnumSplitPoint, self).get_OldID()
    def Next(self):
        '''Method IEnumVertex.Next (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumSplitPoint, self).Next()
    def __iter__(self):
        try:
            super(IEnumSplitPoint, self).Reset()
            val = super(IEnumSplitPoint, self).Next()
            while any(val):
                yield val
                val = super(IEnumSplitPoint, self).Next()
        except:
            pass
    def QueryNext(self, vertex):
        '''Method IEnumVertex.QueryNext (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumSplitPoint, self).QueryNext(vertex)
    def Previous(self):
        '''Method IEnumVertex.Previous (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumSplitPoint, self).Previous()
    def QueryPrevious(self, vertex):
        '''Method IEnumVertex.QueryPrevious (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumSplitPoint, self).QueryPrevious(vertex)
    def NextInPart(self):
        '''Method IEnumVertex.NextInPart (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            OutVertexIndex      : long*'''
        return super(IEnumSplitPoint, self).NextInPart()
    def QueryNextInPart(self, vertex):
        '''Method IEnumVertex.QueryNextInPart (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUT
            OutVertexIndex      : long*'''
        return super(IEnumSplitPoint, self).QueryNextInPart(vertex)
    def Skip(self, numVertices):
        '''Method IEnumVertex.Skip (from IEnumVertex)

           INPUT
            numVertices         : long'''
        return super(IEnumSplitPoint, self).Skip(numVertices)
    def Reset(self):
        '''Method IEnumVertex.Reset (from IEnumVertex)'''
        return super(IEnumSplitPoint, self).Reset()
    def Clone(self):
        '''Method IEnumVertex.Clone (from IEnumVertex)

           OUTPUT
            outEnumerator       : IEnumVertex**'''
        return super(IEnumSplitPoint, self).Clone()
    def ResetToEnd(self):
        '''Method IEnumVertex.ResetToEnd (from IEnumVertex)'''
        return super(IEnumSplitPoint, self).ResetToEnd()
    def SetAt(self, iPart, iVertex):
        '''Method IEnumVertex.SetAt (from IEnumVertex)

           INPUTS
            iPart               : long
            iVertex             : long'''
        return super(IEnumSplitPoint, self).SetAt(iPart, iVertex)
    def IsLastInPart(self):
        '''Method IEnumVertex.IsLastInPart (from IEnumVertex)

           OUTPUT
            IsLastInPart        : VARIANT_BOOL*'''
        return super(IEnumSplitPoint, self).IsLastInPart()
    def put_X(self, X):
        '''Method IEnumVertex.put_X (from IEnumVertex)

           INPUT
            X                   : double'''
        return super(IEnumSplitPoint, self).put_X(X)
    def put_Y(self, Y):
        '''Method IEnumVertex.put_Y (from IEnumVertex)

           INPUT
            Y                   : double'''
        return super(IEnumSplitPoint, self).put_Y(Y)
    def put_Z(self, Z):
        '''Method IEnumVertex.put_Z (from IEnumVertex)

           INPUT
            Z                   : double'''
        return super(IEnumSplitPoint, self).put_Z(Z)
    def put_M(self, M):
        '''Method IEnumVertex.put_M (from IEnumVertex)

           INPUT
            M                   : double'''
        return super(IEnumSplitPoint, self).put_M(M)
    def put_ID(self, pointID):
        '''Method IEnumVertex.put_ID (from IEnumVertex)

           INPUT
            pointID             : long'''
        return super(IEnumSplitPoint, self).put_ID(pointID)
    def put_Attribute(self, attributeType, Value):
        '''Method IEnumVertex.put_Attribute (from IEnumVertex)

           INPUTS
            attributeType       : esriGeometryAttributes
            Value               : double'''
        return super(IEnumSplitPoint, self).put_Attribute(attributeType, Value)
    Attribute = property(None, put_Attribute, None)
    ID = property(None, put_ID, None)
    M = property(None, put_M, None)
    OldID = property(get_OldID, None, None)
    OldM = property(get_OldM, None, None)
    OldZ = property(get_OldZ, None, None)
    SplitDistance = property(get_SplitDistance, None, None)
    SplitHappened = property(get_SplitHappened, None, None)
    X = property(None, put_X, None)
    Y = property(None, put_Y, None)
    Z = property(None, put_Z, None)

class IEnumIntersection(_esriGeometry.IEnumIntersection):
    _IID = uuid.UUID('0cd38cbb-1c89-11d4-9f5c-00c04f6bdf0d')
    def Next(self):
        '''Method IEnumIntersection.Next

           OUTPUTS
            distance            : double*
            Point               : IPoint**'''
        return super(IEnumIntersection, self).Next()
    def __iter__(self):
        try:
            super(IEnumIntersection, self).Reset()
            val = super(IEnumIntersection, self).Next()
            while any(val):
                yield val
                val = super(IEnumIntersection, self).Next()
        except:
            pass
    def QueryNext(self, numWanted, distances, Points):
        '''Method IEnumIntersection.QueryNext

           INPUTS
            numWanted           : long
            distances           : double*
            Points              : IPoint**

           OUTPUT
            numGotten           : long*'''
        return super(IEnumIntersection, self).QueryNext(numWanted, distances, Points)
    def Clone(self):
        '''Method IEnumIntersection.Clone

           OUTPUT
            outEnumerator       : IEnumIntersection**'''
        return super(IEnumIntersection, self).Clone()
    def Reset(self):
        '''Method IEnumIntersection.Reset'''
        return super(IEnumIntersection, self).Reset()

class IEnumPointAndDistance(_esriGeometry.IEnumPointAndDistance):
    _IID = uuid.UUID('ea7ab50c-1a9d-11d6-9fa9-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IEnumPointAndDistance, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ContinuousSectionBefore(self):
        '''Method IEnumPointAndDistance.get_ContinuousSectionBefore

           OUTPUT
            ContinuousSectionBefore: VARIANT_BOOL*'''
        return super(IEnumPointAndDistance, self).get_ContinuousSectionBefore()
    def get_ContinuousSectionAfter(self):
        '''Method IEnumPointAndDistance.get_ContinuousSectionAfter

           OUTPUT
            ContinuousSectionAfter: VARIANT_BOOL*'''
        return super(IEnumPointAndDistance, self).get_ContinuousSectionAfter()
    def get_OnRightSide(self):
        '''Method IEnumPointAndDistance.get_OnRightSide

           OUTPUT
            OnRightSide         : VARIANT_BOOL*'''
        return super(IEnumPointAndDistance, self).get_OnRightSide()
    def get_DistanceAlongCurve(self):
        '''Method IEnumPointAndDistance.get_DistanceAlongCurve

           OUTPUT
            distanceAlong       : double*'''
        return super(IEnumPointAndDistance, self).get_DistanceAlongCurve()
    def Next(self):
        '''Method IEnumVertex.Next (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumPointAndDistance, self).Next()
    def __iter__(self):
        try:
            super(IEnumPointAndDistance, self).Reset()
            val = super(IEnumPointAndDistance, self).Next()
            while any(val):
                yield val
                val = super(IEnumPointAndDistance, self).Next()
        except:
            pass
    def QueryNext(self, vertex):
        '''Method IEnumVertex.QueryNext (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumPointAndDistance, self).QueryNext(vertex)
    def Previous(self):
        '''Method IEnumVertex.Previous (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumPointAndDistance, self).Previous()
    def QueryPrevious(self, vertex):
        '''Method IEnumVertex.QueryPrevious (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumPointAndDistance, self).QueryPrevious(vertex)
    def NextInPart(self):
        '''Method IEnumVertex.NextInPart (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            OutVertexIndex      : long*'''
        return super(IEnumPointAndDistance, self).NextInPart()
    def QueryNextInPart(self, vertex):
        '''Method IEnumVertex.QueryNextInPart (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUT
            OutVertexIndex      : long*'''
        return super(IEnumPointAndDistance, self).QueryNextInPart(vertex)
    def Skip(self, numVertices):
        '''Method IEnumVertex.Skip (from IEnumVertex)

           INPUT
            numVertices         : long'''
        return super(IEnumPointAndDistance, self).Skip(numVertices)
    def Reset(self):
        '''Method IEnumVertex.Reset (from IEnumVertex)'''
        return super(IEnumPointAndDistance, self).Reset()
    def Clone(self):
        '''Method IEnumVertex.Clone (from IEnumVertex)

           OUTPUT
            outEnumerator       : IEnumVertex**'''
        return super(IEnumPointAndDistance, self).Clone()
    def ResetToEnd(self):
        '''Method IEnumVertex.ResetToEnd (from IEnumVertex)'''
        return super(IEnumPointAndDistance, self).ResetToEnd()
    def SetAt(self, iPart, iVertex):
        '''Method IEnumVertex.SetAt (from IEnumVertex)

           INPUTS
            iPart               : long
            iVertex             : long'''
        return super(IEnumPointAndDistance, self).SetAt(iPart, iVertex)
    def IsLastInPart(self):
        '''Method IEnumVertex.IsLastInPart (from IEnumVertex)

           OUTPUT
            IsLastInPart        : VARIANT_BOOL*'''
        return super(IEnumPointAndDistance, self).IsLastInPart()
    def put_X(self, X):
        '''Method IEnumVertex.put_X (from IEnumVertex)

           INPUT
            X                   : double'''
        return super(IEnumPointAndDistance, self).put_X(X)
    def put_Y(self, Y):
        '''Method IEnumVertex.put_Y (from IEnumVertex)

           INPUT
            Y                   : double'''
        return super(IEnumPointAndDistance, self).put_Y(Y)
    def put_Z(self, Z):
        '''Method IEnumVertex.put_Z (from IEnumVertex)

           INPUT
            Z                   : double'''
        return super(IEnumPointAndDistance, self).put_Z(Z)
    def put_M(self, M):
        '''Method IEnumVertex.put_M (from IEnumVertex)

           INPUT
            M                   : double'''
        return super(IEnumPointAndDistance, self).put_M(M)
    def put_ID(self, pointID):
        '''Method IEnumVertex.put_ID (from IEnumVertex)

           INPUT
            pointID             : long'''
        return super(IEnumPointAndDistance, self).put_ID(pointID)
    def put_Attribute(self, attributeType, Value):
        '''Method IEnumVertex.put_Attribute (from IEnumVertex)

           INPUTS
            attributeType       : esriGeometryAttributes
            Value               : double'''
        return super(IEnumPointAndDistance, self).put_Attribute(attributeType, Value)
    Attribute = property(None, put_Attribute, None)
    ContinuousSectionAfter = property(get_ContinuousSectionAfter, None, None)
    ContinuousSectionBefore = property(get_ContinuousSectionBefore, None, None)
    DistanceAlongCurve = property(get_DistanceAlongCurve, None, None)
    ID = property(None, put_ID, None)
    M = property(None, put_M, None)
    OnRightSide = property(get_OnRightSide, None, None)
    X = property(None, put_X, None)
    Y = property(None, put_Y, None)
    Z = property(None, put_Z, None)

class IGeometry2(_esriGeometry.IGeometry2):
    _IID = uuid.UUID('b79b2d7e-dbc8-11d3-9f60-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IGeometry2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ProjectEx(self, newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation):
        '''Method IGeometry2.ProjectEx

           INPUTS
            newReferenceSystem  : ISpatialReference*
            direction           : esriTransformDirection
            GeoTransformation   : IGeoTransformation*
            bAngularDensify     : VARIANT_BOOL
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IGeometry2, self).ProjectEx(newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IGeometry2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IGeometry2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IGeometry2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IGeometry2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IGeometry2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IGeometry2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IGeometry2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IGeometry2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IGeometry2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IGeometry2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IGeometry2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IGeometry2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGeometryBag(_esriGeometry.IGeometryBag):
    _IID = uuid.UUID('b5b8cda0-9d24-11d3-810d-0080c75e8a71')

    def __init__(self, *args, **kw):
        super(IGeometryBag, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LosslessExport(self):
        '''Method IGeometryBag.get_LosslessExport

           OUTPUT
            nothingLost         : VARIANT_BOOL*'''
        return super(IGeometryBag, self).get_LosslessExport()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IGeometryBag, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IGeometryBag, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IGeometryBag, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IGeometryBag, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IGeometryBag, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IGeometryBag, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IGeometryBag, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IGeometryBag, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IGeometryBag, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IGeometryBag, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IGeometryBag, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IGeometryBag, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    LosslessExport = property(get_LosslessExport, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class ITransformation3D(_esriGeometry.ITransformation3D):
    _IID = uuid.UUID('c06e0427-90d2-11d3-9f5c-00c04f6bc5f4')
    def Reset(self):
        '''Method ITransformation3D.Reset'''
        return super(ITransformation3D, self).Reset()
    def Translate(self, offsetVector):
        '''Method ITransformation3D.Translate

           INPUT
            offsetVector        : IVector3D*'''
        return super(ITransformation3D, self).Translate(offsetVector)
    def Scale(self, sx, sy, sz):
        '''Method ITransformation3D.Scale

           INPUTS
            sx                  : double
            sy                  : double
            sz                  : double'''
        return super(ITransformation3D, self).Scale(sx, sy, sz)
    def Rotate(self, rotationAngle, rotationAxis):
        '''Method ITransformation3D.Rotate

           INPUTS
            rotationAngle       : double
            rotationAxis        : IVector3D*'''
        return super(ITransformation3D, self).Rotate(rotationAngle, rotationAxis)
    def PostMultiply(self, postTransform):
        '''Method ITransformation3D.PostMultiply

           INPUT
            postTransform       : ITransformation3D*'''
        return super(ITransformation3D, self).PostMultiply(postTransform)
    def PreMultiply(self, preTransform):
        '''Method ITransformation3D.PreMultiply

           INPUT
            preTransform        : ITransformation3D*'''
        return super(ITransformation3D, self).PreMultiply(preTransform)
    def Transform(self, numPoints, originalPoints):
        '''Method ITransformation3D.Transform

           INPUTS
            numPoints           : long
            originalPoints      : WKSPointZ*

           OUTPUT
            transformedPoints   : WKSPointZ*'''
        return super(ITransformation3D, self).Transform(numPoints, originalPoints)

class IGeometry3(_esriGeometry.IGeometry3):
    _IID = uuid.UUID('d034f81b-7137-40a6-90ea-d88968c33e60')

    def __init__(self, *args, **kw):
        super(IGeometry3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryWKSEnvelope(self):
        '''Method IGeometry3.QueryWKSEnvelope

           OUTPUT
            e                   : WKSEnvelope*'''
        return super(IGeometry3, self).QueryWKSEnvelope()
    def ProjectEx(self, newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation):
        '''Method IGeometry2.ProjectEx (from IGeometry2)

           INPUTS
            newReferenceSystem  : ISpatialReference*
            direction           : esriTransformDirection
            GeoTransformation   : IGeoTransformation*
            bAngularDensify     : VARIANT_BOOL
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IGeometry3, self).ProjectEx(newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IGeometry3, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IGeometry3, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IGeometry3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IGeometry3, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IGeometry3, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IGeometry3, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IGeometry3, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IGeometry3, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IGeometry3, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IGeometry3, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IGeometry3, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IGeometry3, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGeometry4(_esriGeometry.IGeometry4):
    _IID = uuid.UUID('c4c70b7a-dfba-4892-86cd-a9100357409b')

    def __init__(self, *args, **kw):
        super(IGeometry4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Changed(self):
        '''Method IGeometry4.get_Changed

           OUTPUT
            isChanged           : VARIANT_BOOL*'''
        return super(IGeometry4, self).get_Changed()
    def put_Changed(self, isChanged):
        '''Method IGeometry4.put_Changed

           INPUT
            isChanged           : VARIANT_BOOL'''
        return super(IGeometry4, self).put_Changed(isChanged)
    def QueryWKSEnvelope(self):
        '''Method IGeometry3.QueryWKSEnvelope (from IGeometry3)

           OUTPUT
            e                   : WKSEnvelope*'''
        return super(IGeometry4, self).QueryWKSEnvelope()
    def ProjectEx(self, newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation):
        '''Method IGeometry2.ProjectEx (from IGeometry2)

           INPUTS
            newReferenceSystem  : ISpatialReference*
            direction           : esriTransformDirection
            GeoTransformation   : IGeoTransformation*
            bAngularDensify     : VARIANT_BOOL
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IGeometry4, self).ProjectEx(newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IGeometry4, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IGeometry4, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IGeometry4, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IGeometry4, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IGeometry4, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IGeometry4, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IGeometry4, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IGeometry4, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IGeometry4, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IGeometry4, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IGeometry4, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IGeometry4, self).GeoNormalizeFromLongitude(Longitude)
    Changed = property(get_Changed, put_Changed, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGeometry5(_esriGeometry.IGeometry5):
    _IID = uuid.UUID('134b247e-83f6-471c-9ad1-11c35312d5ef')

    def __init__(self, *args, **kw):
        super(IGeometry5, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Project5(self, newSpatialReference, ProjectionHint):
        '''Method IGeometry5.Project5

           INPUTS
            newSpatialReference : ISpatialReference*
            ProjectionHint      : long'''
        return super(IGeometry5, self).Project5(newSpatialReference, ProjectionHint)
    def ProjectEx5(self, newReferenceSystem, direction, transformation, bAngularDensify, maxSegmentLength, maxDeviation, ProjectionHint):
        '''Method IGeometry5.ProjectEx5

           INPUTS
            newReferenceSystem  : ISpatialReference*
            direction           : esriTransformDirection
            transformation      : ITransformation*
            bAngularDensify     : VARIANT_BOOL
            maxSegmentLength    : double
            maxDeviation        : double
            ProjectionHint      : long'''
        return super(IGeometry5, self).ProjectEx5(newReferenceSystem, direction, transformation, bAngularDensify, maxSegmentLength, maxDeviation, ProjectionHint)
    def get_CentroidEx(self):
        '''Method IGeometry5.get_CentroidEx

           OUTPUT
            Center              : IPoint**'''
        return super(IGeometry5, self).get_CentroidEx()
    def get_Changed(self):
        '''Method IGeometry4.get_Changed (from IGeometry4)

           OUTPUT
            isChanged           : VARIANT_BOOL*'''
        return super(IGeometry5, self).get_Changed()
    def put_Changed(self, isChanged):
        '''Method IGeometry4.put_Changed (from IGeometry4)

           INPUT
            isChanged           : VARIANT_BOOL'''
        return super(IGeometry5, self).put_Changed(isChanged)
    def QueryWKSEnvelope(self):
        '''Method IGeometry3.QueryWKSEnvelope (from IGeometry3)

           OUTPUT
            e                   : WKSEnvelope*'''
        return super(IGeometry5, self).QueryWKSEnvelope()
    def ProjectEx(self, newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation):
        '''Method IGeometry2.ProjectEx (from IGeometry2)

           INPUTS
            newReferenceSystem  : ISpatialReference*
            direction           : esriTransformDirection
            GeoTransformation   : IGeoTransformation*
            bAngularDensify     : VARIANT_BOOL
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IGeometry5, self).ProjectEx(newReferenceSystem, direction, GeoTransformation, bAngularDensify, maxSegmentLength, maxDeviation)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IGeometry5, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IGeometry5, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IGeometry5, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IGeometry5, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IGeometry5, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IGeometry5, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IGeometry5, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IGeometry5, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IGeometry5, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IGeometry5, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IGeometry5, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IGeometry5, self).GeoNormalizeFromLongitude(Longitude)
    CentroidEx = property(get_CentroidEx, None, None)
    Changed = property(get_Changed, put_Changed, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IEnvelopeGEN(_esriGeometry.IEnvelopeGEN):
    _IID = uuid.UUID('ad6492fa-8902-4d83-acd1-418f476b306f')

    def __init__(self, *args, **kw):
        super(IEnvelopeGEN, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DefineFromWKSPoints(self, wksPoints):
        '''Method IEnvelopeGEN.DefineFromWKSPoints

           INPUT
            wksPoints           : SAFEARRAY**'''
        return super(IEnvelopeGEN, self).DefineFromWKSPoints(wksPoints)
    def DefineFromPoints(self, Points):
        '''Method IEnvelopeGEN.DefineFromPoints

           INPUT
            Points              : SAFEARRAY**'''
        return super(IEnvelopeGEN, self).DefineFromPoints(Points)
    def get_Width(self):
        '''Method IEnvelopeGEN.get_Width

           OUTPUT
            Width               : double*'''
        return super(IEnvelopeGEN, self).get_Width()
    def put_Width(self, Width):
        '''Method IEnvelopeGEN.put_Width

           INPUT
            Width               : double'''
        return super(IEnvelopeGEN, self).put_Width(Width)
    def get_Height(self):
        '''Method IEnvelopeGEN.get_Height

           OUTPUT
            Height              : double*'''
        return super(IEnvelopeGEN, self).get_Height()
    def put_Depth(self, Depth):
        '''Method IEnvelopeGEN.put_Depth

           INPUT
            Depth               : double'''
        return super(IEnvelopeGEN, self).put_Depth(Depth)
    def get_Depth(self):
        '''Method IEnvelopeGEN.get_Depth

           OUTPUT
            Depth               : double*'''
        return super(IEnvelopeGEN, self).get_Depth()
    def put_Height(self, Height):
        '''Method IEnvelopeGEN.put_Height

           INPUT
            Height              : double'''
        return super(IEnvelopeGEN, self).put_Height(Height)
    def get_LowerLeft(self):
        '''Method IEnvelopeGEN.get_LowerLeft

           OUTPUT
            LowerLeft           : IPoint**'''
        return super(IEnvelopeGEN, self).get_LowerLeft()
    def put_LowerLeft(self, LowerLeft):
        '''Method IEnvelopeGEN.put_LowerLeft

           INPUT
            LowerLeft           : IPoint*'''
        return super(IEnvelopeGEN, self).put_LowerLeft(LowerLeft)
    def get_UpperLeft(self):
        '''Method IEnvelopeGEN.get_UpperLeft

           OUTPUT
            UpperLeft           : IPoint**'''
        return super(IEnvelopeGEN, self).get_UpperLeft()
    def put_UpperLeft(self, UpperLeft):
        '''Method IEnvelopeGEN.put_UpperLeft

           INPUT
            UpperLeft           : IPoint*'''
        return super(IEnvelopeGEN, self).put_UpperLeft(UpperLeft)
    def get_UpperRight(self):
        '''Method IEnvelopeGEN.get_UpperRight

           OUTPUT
            UpperRight          : IPoint**'''
        return super(IEnvelopeGEN, self).get_UpperRight()
    def put_UpperRight(self, UpperRight):
        '''Method IEnvelopeGEN.put_UpperRight

           INPUT
            UpperRight          : IPoint*'''
        return super(IEnvelopeGEN, self).put_UpperRight(UpperRight)
    def get_LowerRight(self):
        '''Method IEnvelopeGEN.get_LowerRight

           OUTPUT
            LowerRight          : IPoint**'''
        return super(IEnvelopeGEN, self).get_LowerRight()
    def put_LowerRight(self, LowerRight):
        '''Method IEnvelopeGEN.put_LowerRight

           INPUT
            LowerRight          : IPoint*'''
        return super(IEnvelopeGEN, self).put_LowerRight(LowerRight)
    def get_XMin(self):
        '''Method IEnvelopeGEN.get_XMin

           OUTPUT
            XMin                : double*'''
        return super(IEnvelopeGEN, self).get_XMin()
    def put_XMin(self, XMin):
        '''Method IEnvelopeGEN.put_XMin

           INPUT
            XMin                : double'''
        return super(IEnvelopeGEN, self).put_XMin(XMin)
    def get_YMin(self):
        '''Method IEnvelopeGEN.get_YMin

           OUTPUT
            YMin                : double*'''
        return super(IEnvelopeGEN, self).get_YMin()
    def put_YMin(self, YMin):
        '''Method IEnvelopeGEN.put_YMin

           INPUT
            YMin                : double'''
        return super(IEnvelopeGEN, self).put_YMin(YMin)
    def get_XMax(self):
        '''Method IEnvelopeGEN.get_XMax

           OUTPUT
            XMax                : double*'''
        return super(IEnvelopeGEN, self).get_XMax()
    def put_XMax(self, XMax):
        '''Method IEnvelopeGEN.put_XMax

           INPUT
            XMax                : double'''
        return super(IEnvelopeGEN, self).put_XMax(XMax)
    def get_YMax(self):
        '''Method IEnvelopeGEN.get_YMax

           OUTPUT
            YMax                : double*'''
        return super(IEnvelopeGEN, self).get_YMax()
    def put_YMax(self, YMax):
        '''Method IEnvelopeGEN.put_YMax

           INPUT
            YMax                : double'''
        return super(IEnvelopeGEN, self).put_YMax(YMax)
    def get_MMin(self):
        '''Method IEnvelopeGEN.get_MMin

           OUTPUT
            MMin                : double*'''
        return super(IEnvelopeGEN, self).get_MMin()
    def put_MMin(self, MMin):
        '''Method IEnvelopeGEN.put_MMin

           INPUT
            MMin                : double'''
        return super(IEnvelopeGEN, self).put_MMin(MMin)
    def get_MMax(self):
        '''Method IEnvelopeGEN.get_MMax

           OUTPUT
            MMax                : double*'''
        return super(IEnvelopeGEN, self).get_MMax()
    def put_MMax(self, MMax):
        '''Method IEnvelopeGEN.put_MMax

           INPUT
            MMax                : double'''
        return super(IEnvelopeGEN, self).put_MMax(MMax)
    def get_ZMin(self):
        '''Method IEnvelopeGEN.get_ZMin

           OUTPUT
            ZMin                : double*'''
        return super(IEnvelopeGEN, self).get_ZMin()
    def put_ZMin(self, ZMin):
        '''Method IEnvelopeGEN.put_ZMin

           INPUT
            ZMin                : double'''
        return super(IEnvelopeGEN, self).put_ZMin(ZMin)
    def get_ZMax(self):
        '''Method IEnvelopeGEN.get_ZMax

           OUTPUT
            ZMax                : double*'''
        return super(IEnvelopeGEN, self).get_ZMax()
    def put_ZMax(self, ZMax):
        '''Method IEnvelopeGEN.put_ZMax

           INPUT
            ZMax                : double'''
        return super(IEnvelopeGEN, self).put_ZMax(ZMax)
    def Union(self, inEnvelope):
        '''Method IEnvelopeGEN.Union

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelopeGEN, self).Union(inEnvelope)
    def Intersect(self, inEnvelope):
        '''Method IEnvelopeGEN.Intersect

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelopeGEN, self).Intersect(inEnvelope)
    def Offset(self, X, Y):
        '''Method IEnvelopeGEN.Offset

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IEnvelopeGEN, self).Offset(X, Y)
    def OffsetZ(self, Z):
        '''Method IEnvelopeGEN.OffsetZ

           INPUT
            Z                   : double'''
        return super(IEnvelopeGEN, self).OffsetZ(Z)
    def OffsetM(self, M):
        '''Method IEnvelopeGEN.OffsetM

           INPUT
            M                   : double'''
        return super(IEnvelopeGEN, self).OffsetM(M)
    def Expand(self, dx, dy, asRatio):
        '''Method IEnvelopeGEN.Expand

           INPUTS
            dx                  : double
            dy                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelopeGEN, self).Expand(dx, dy, asRatio)
    def ExpandZ(self, dz, asRatio):
        '''Method IEnvelopeGEN.ExpandZ

           INPUTS
            dz                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelopeGEN, self).ExpandZ(dz, asRatio)
    def ExpandM(self, dm, asRatio):
        '''Method IEnvelopeGEN.ExpandM

           INPUTS
            dm                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelopeGEN, self).ExpandM(dm, asRatio)
    def QueryWKSCoords(self):
        '''Method IEnvelopeGEN.QueryWKSCoords

           OUTPUT
            e                   : WKSEnvelope*'''
        return super(IEnvelopeGEN, self).QueryWKSCoords()
    def PutWKSCoords(self, e):
        '''Method IEnvelopeGEN.PutWKSCoords

           INPUT
            e                   : WKSEnvelope*'''
        return super(IEnvelopeGEN, self).PutWKSCoords(e)
    def PutCoords(self, XMin, YMin, XMax, YMax):
        '''Method IEnvelopeGEN.PutCoords

           INPUTS
            XMin                : double
            YMin                : double
            XMax                : double
            YMax                : double'''
        return super(IEnvelopeGEN, self).PutCoords(XMin, YMin, XMax, YMax)
    def QueryCoords(self):
        '''Method IEnvelopeGEN.QueryCoords

           OUTPUTS
            XMin                : double*
            YMin                : double*
            XMax                : double*
            YMax                : double*'''
        return super(IEnvelopeGEN, self).QueryCoords()
    def CenterAt(self, p):
        '''Method IEnvelopeGEN.CenterAt

           INPUT
            p                   : IPoint*'''
        return super(IEnvelopeGEN, self).CenterAt(p)
    def get_MinMaxAttributes(self):
        '''Method IEnvelopeGEN.get_MinMaxAttributes

           OUTPUT
            MinMaxAttributes    : esriPointAttributes**'''
        return super(IEnvelopeGEN, self).get_MinMaxAttributes()
    def put_MinMaxAttributes(self, MinMaxAttributes):
        '''Method IEnvelopeGEN.put_MinMaxAttributes

           INPUT
            MinMaxAttributes    : esriPointAttributes*'''
        return super(IEnvelopeGEN, self).put_MinMaxAttributes(MinMaxAttributes)
    Depth = property(get_Depth, put_Depth, None)
    Height = property(get_Height, put_Height, None)
    LowerLeft = property(get_LowerLeft, put_LowerLeft, None)
    LowerRight = property(get_LowerRight, put_LowerRight, None)
    MMax = property(get_MMax, put_MMax, None)
    MMin = property(get_MMin, put_MMin, None)
    MinMaxAttributes = property(get_MinMaxAttributes, put_MinMaxAttributes, None)
    UpperLeft = property(get_UpperLeft, put_UpperLeft, None)
    UpperRight = property(get_UpperRight, put_UpperRight, None)
    Width = property(get_Width, put_Width, None)
    XMax = property(get_XMax, put_XMax, None)
    XMin = property(get_XMin, put_XMin, None)
    YMax = property(get_YMax, put_YMax, None)
    YMin = property(get_YMin, put_YMin, None)
    ZMax = property(get_ZMax, put_ZMax, None)
    ZMin = property(get_ZMin, put_ZMin, None)

class IEnvelope3D(_esriGeometry.IEnvelope3D):
    _IID = uuid.UUID('2eaa6edb-3e14-49f6-a2d4-0f17ad91f4ae')
    def Intersect3D(self, inEnvelope):
        '''Method IEnvelope3D.Intersect3D

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelope3D, self).Intersect3D(inEnvelope)
    def Union3D(self, inEnvelope):
        '''Method IEnvelope3D.Union3D

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelope3D, self).Union3D(inEnvelope)

class IBezierCurveGEN(_esriGeometry.IBezierCurveGEN):
    _IID = uuid.UUID('64de4fd4-6e85-41ef-8401-8bde5e7beaab')
    def QueryCoords(self, controlPoints):
        '''Method IBezierCurveGEN.QueryCoords

           INPUT
            controlPoints       : SAFEARRAY**'''
        return super(IBezierCurveGEN, self).QueryCoords(controlPoints)
    def PutCoords(self, controlPoints):
        '''Method IBezierCurveGEN.PutCoords

           INPUT
            controlPoints       : SAFEARRAY**'''
        return super(IBezierCurveGEN, self).PutCoords(controlPoints)
    def QueryCoord(self, Index, controlPoint):
        '''Method IBezierCurveGEN.QueryCoord

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurveGEN, self).QueryCoord(Index, controlPoint)
    def PutCoord(self, Index, controlPoint):
        '''Method IBezierCurveGEN.PutCoord

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurveGEN, self).PutCoord(Index, controlPoint)
    def get_Degree(self):
        '''Method IBezierCurveGEN.get_Degree

           OUTPUT
            Degree              : long*'''
        return super(IBezierCurveGEN, self).get_Degree()
    def QueryChordLengthTangentAtFrom(self, tangent):
        '''Method IBezierCurveGEN.QueryChordLengthTangentAtFrom

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurveGEN, self).QueryChordLengthTangentAtFrom(tangent)
    def QueryChordLengthTangentAtTo(self, tangent):
        '''Method IBezierCurveGEN.QueryChordLengthTangentAtTo

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurveGEN, self).QueryChordLengthTangentAtTo(tangent)
    def SetChordLengthTangentAtFrom(self, tangent, setByUser):
        '''Method IBezierCurveGEN.SetChordLengthTangentAtFrom

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurveGEN, self).SetChordLengthTangentAtFrom(tangent, setByUser)
    def SetChordLengthTangentAtTo(self, tangent, setByUser):
        '''Method IBezierCurveGEN.SetChordLengthTangentAtTo

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurveGEN, self).SetChordLengthTangentAtTo(tangent, setByUser)
    def QueryInflectionPoint(self, inflectionPoint):
        '''Method IBezierCurveGEN.QueryInflectionPoint

           INPUT
            inflectionPoint     : IPoint*'''
        return super(IBezierCurveGEN, self).QueryInflectionPoint(inflectionPoint)
    Degree = property(get_Degree, None, None)

class ITransformation3DGEN(_esriGeometry.ITransformation3DGEN):
    _IID = uuid.UUID('1b9fa97e-66c8-477c-88c2-e87a96b56239')
    def Reset(self):
        '''Method ITransformation3DGEN.Reset'''
        return super(ITransformation3DGEN, self).Reset()
    def Translate(self, offsetVector):
        '''Method ITransformation3DGEN.Translate

           INPUT
            offsetVector        : IVector3D*'''
        return super(ITransformation3DGEN, self).Translate(offsetVector)
    def Scale(self, sx, sy, sz):
        '''Method ITransformation3DGEN.Scale

           INPUTS
            sx                  : double
            sy                  : double
            sz                  : double'''
        return super(ITransformation3DGEN, self).Scale(sx, sy, sz)
    def Rotate(self, rotationAngle, rotationAxis):
        '''Method ITransformation3DGEN.Rotate

           INPUTS
            rotationAngle       : double
            rotationAxis        : IVector3D*'''
        return super(ITransformation3DGEN, self).Rotate(rotationAngle, rotationAxis)
    def PostMultiply(self, postTransform):
        '''Method ITransformation3DGEN.PostMultiply

           INPUT
            postTransform       : ITransformation3D*'''
        return super(ITransformation3DGEN, self).PostMultiply(postTransform)
    def PreMultiply(self, preTransform):
        '''Method ITransformation3DGEN.PreMultiply

           INPUT
            preTransform        : ITransformation3D*'''
        return super(ITransformation3DGEN, self).PreMultiply(preTransform)
    def Transform(self, originalPoints):
        '''Method ITransformation3DGEN.Transform

           INPUT
            originalPoints      : SAFEARRAY**

           OUTPUT
            transformedPoints   : SAFEARRAY**'''
        return super(ITransformation3DGEN, self).Transform(originalPoints)

class ISphere(_esriGeometry.ISphere):
    _IID = uuid.UUID('0cd38cb9-1c89-11d4-9f5c-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(ISphere, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryCenter(self, CenterPoint):
        '''Method ISphere.QueryCenter

           INPUT
            CenterPoint         : IPoint*'''
        return super(ISphere, self).QueryCenter(CenterPoint)
    def get_Center(self):
        '''Method ISphere.get_Center

           OUTPUT
            CenterPoint         : IPoint**'''
        return super(ISphere, self).get_Center()
    def put_Center(self, CenterPoint):
        '''Method ISphere.put_Center

           INPUT
            CenterPoint         : IPoint*'''
        return super(ISphere, self).put_Center(CenterPoint)
    def get_Radius(self):
        '''Method ISphere.get_Radius

           OUTPUT
            radiusLength        : double*'''
        return super(ISphere, self).get_Radius()
    def put_Radius(self, radiusLength):
        '''Method ISphere.put_Radius

           INPUT
            radiusLength        : double'''
        return super(ISphere, self).put_Radius(radiusLength)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ISphere, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ISphere, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ISphere, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ISphere, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ISphere, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ISphere, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ISphere, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ISphere, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ISphere, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ISphere, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ISphere, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ISphere, self).GeoNormalizeFromLongitude(Longitude)
    Center = property(get_Center, put_Center, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Radius = property(get_Radius, put_Radius, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IRay(_esriGeometry.IRay):
    _IID = uuid.UUID('0cd38cba-1c89-11d4-9f5c-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IRay, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryOrigin(self, vectorOrigin):
        '''Method IRay.QueryOrigin

           INPUT
            vectorOrigin        : IPoint*'''
        return super(IRay, self).QueryOrigin(vectorOrigin)
    def get_Origin(self):
        '''Method IRay.get_Origin

           OUTPUT
            vectorOrigin        : IPoint**'''
        return super(IRay, self).get_Origin()
    def put_Origin(self, vectorOrigin):
        '''Method IRay.put_Origin

           INPUT
            vectorOrigin        : IPoint*'''
        return super(IRay, self).put_Origin(vectorOrigin)
    def QueryVector(self, directionVector):
        '''Method IRay.QueryVector

           INPUT
            directionVector     : IVector3D*'''
        return super(IRay, self).QueryVector(directionVector)
    def get_Vector(self):
        '''Method IRay.get_Vector

           OUTPUT
            directionVector     : IVector3D**'''
        return super(IRay, self).get_Vector()
    def put_Vector(self, directionVector):
        '''Method IRay.put_Vector

           INPUT
            directionVector     : IVector3D*'''
        return super(IRay, self).put_Vector(directionVector)
    def QueryPointAtDistance(self, distance, Point):
        '''Method IRay.QueryPointAtDistance

           INPUTS
            distance            : double
            Point               : IPoint*'''
        return super(IRay, self).QueryPointAtDistance(distance, Point)
    def GetPointAtDistance(self, distance):
        '''Method IRay.GetPointAtDistance

           INPUT
            distance            : double

           OUTPUT
            Point               : IPoint**'''
        return super(IRay, self).GetPointAtDistance(distance)
    def Intersects(self, targetGeometry):
        '''Method IRay.Intersects

           INPUT
            targetGeometry      : IGeometry*

           OUTPUT
            intersectsTarget    : VARIANT_BOOL*'''
        return super(IRay, self).Intersects(targetGeometry)
    def QueryFirstIntersection(self, targetGeometry, intersectionPoint):
        '''Method IRay.QueryFirstIntersection

           INPUTS
            targetGeometry      : IGeometry*
            intersectionPoint   : IPoint*'''
        return super(IRay, self).QueryFirstIntersection(targetGeometry, intersectionPoint)
    def Intersect(self, targetGeometry, intersectionPoints):
        '''Method IRay.Intersect

           INPUTS
            targetGeometry      : IGeometry*
            intersectionPoints  : IPointCollection*'''
        return super(IRay, self).Intersect(targetGeometry, intersectionPoints)
    def GetEnumIntersect(self, targetGeometry):
        '''Method IRay.GetEnumIntersect

           INPUT
            targetGeometry      : IGeometry*

           OUTPUT
            enumIntersections   : IEnumIntersection**'''
        return super(IRay, self).GetEnumIntersect(targetGeometry)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IRay, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IRay, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IRay, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IRay, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IRay, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IRay, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IRay, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IRay, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IRay, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IRay, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IRay, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IRay, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Origin = property(get_Origin, put_Origin, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Vector = property(get_Vector, put_Vector, None)

class IRay2(_esriGeometry.IRay2):
    _IID = uuid.UUID('0c968eea-5de9-45db-b885-531a04738122')

    def __init__(self, *args, **kw):
        super(IRay2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryPlaneIntersection(self, pPlaneNormal, D, pPoint):
        '''Method IRay2.QueryPlaneIntersection

           INPUTS
            pPlaneNormal        : WKSPointZ*
            D                   : double
            pPoint              : IPoint*'''
        return super(IRay2, self).QueryPlaneIntersection(pPlaneNormal, D, pPoint)
    def QueryOrigin(self, vectorOrigin):
        '''Method IRay.QueryOrigin (from IRay)

           INPUT
            vectorOrigin        : IPoint*'''
        return super(IRay2, self).QueryOrigin(vectorOrigin)
    def get_Origin(self):
        '''Method IRay.get_Origin (from IRay)

           OUTPUT
            vectorOrigin        : IPoint**'''
        return super(IRay2, self).get_Origin()
    def put_Origin(self, vectorOrigin):
        '''Method IRay.put_Origin (from IRay)

           INPUT
            vectorOrigin        : IPoint*'''
        return super(IRay2, self).put_Origin(vectorOrigin)
    def QueryVector(self, directionVector):
        '''Method IRay.QueryVector (from IRay)

           INPUT
            directionVector     : IVector3D*'''
        return super(IRay2, self).QueryVector(directionVector)
    def get_Vector(self):
        '''Method IRay.get_Vector (from IRay)

           OUTPUT
            directionVector     : IVector3D**'''
        return super(IRay2, self).get_Vector()
    def put_Vector(self, directionVector):
        '''Method IRay.put_Vector (from IRay)

           INPUT
            directionVector     : IVector3D*'''
        return super(IRay2, self).put_Vector(directionVector)
    def QueryPointAtDistance(self, distance, Point):
        '''Method IRay.QueryPointAtDistance (from IRay)

           INPUTS
            distance            : double
            Point               : IPoint*'''
        return super(IRay2, self).QueryPointAtDistance(distance, Point)
    def GetPointAtDistance(self, distance):
        '''Method IRay.GetPointAtDistance (from IRay)

           INPUT
            distance            : double

           OUTPUT
            Point               : IPoint**'''
        return super(IRay2, self).GetPointAtDistance(distance)
    def Intersects(self, targetGeometry):
        '''Method IRay.Intersects (from IRay)

           INPUT
            targetGeometry      : IGeometry*

           OUTPUT
            intersectsTarget    : VARIANT_BOOL*'''
        return super(IRay2, self).Intersects(targetGeometry)
    def QueryFirstIntersection(self, targetGeometry, intersectionPoint):
        '''Method IRay.QueryFirstIntersection (from IRay)

           INPUTS
            targetGeometry      : IGeometry*
            intersectionPoint   : IPoint*'''
        return super(IRay2, self).QueryFirstIntersection(targetGeometry, intersectionPoint)
    def Intersect(self, targetGeometry, intersectionPoints):
        '''Method IRay.Intersect (from IRay)

           INPUTS
            targetGeometry      : IGeometry*
            intersectionPoints  : IPointCollection*'''
        return super(IRay2, self).Intersect(targetGeometry, intersectionPoints)
    def GetEnumIntersect(self, targetGeometry):
        '''Method IRay.GetEnumIntersect (from IRay)

           INPUT
            targetGeometry      : IGeometry*

           OUTPUT
            enumIntersections   : IEnumIntersection**'''
        return super(IRay2, self).GetEnumIntersect(targetGeometry)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IRay2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IRay2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IRay2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IRay2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IRay2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IRay2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IRay2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IRay2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IRay2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IRay2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IRay2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IRay2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Origin = property(get_Origin, put_Origin, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Vector = property(get_Vector, put_Vector, None)

class ITransform3D(_esriGeometry.ITransform3D):
    _IID = uuid.UUID('9414e949-ffa0-11d3-9f56-00c04f6bdf0d')
    def Move3D(self, dx, dy, dz):
        '''Method ITransform3D.Move3D

           INPUTS
            dx                  : double
            dy                  : double
            dz                  : double'''
        return super(ITransform3D, self).Move3D(dx, dy, dz)
    def MoveVector3D(self, v):
        '''Method ITransform3D.MoveVector3D

           INPUT
            v                   : IVector3D*'''
        return super(ITransform3D, self).MoveVector3D(v)
    def Scale3D(self, Origin, sx, sy, sz):
        '''Method ITransform3D.Scale3D

           INPUTS
            Origin              : IPoint*
            sx                  : double
            sy                  : double
            sz                  : double'''
        return super(ITransform3D, self).Scale3D(Origin, sx, sy, sz)
    def RotateVector3D(self, axis, rotationAngle):
        '''Method ITransform3D.RotateVector3D

           INPUTS
            axis                : IVector3D*
            rotationAngle       : double'''
        return super(ITransform3D, self).RotateVector3D(axis, rotationAngle)
    def Transform3D(self, direction, transformation):
        '''Method ITransform3D.Transform3D

           INPUTS
            direction           : esriTransformDirection
            transformation      : ITransformation3D*'''
        return super(ITransform3D, self).Transform3D(direction, transformation)
    def ProjectToPlane(self, planarOrigin, planarPositiveX, planarNorm):
        '''Method ITransform3D.ProjectToPlane

           INPUTS
            planarOrigin        : IPoint*
            planarPositiveX     : IVector3D*
            planarNorm          : IVector3D*

           OUTPUT
            footprint           : IGeometry**'''
        return super(ITransform3D, self).ProjectToPlane(planarOrigin, planarPositiveX, planarNorm)

class IArea(_esriGeometry.IArea):
    _IID = uuid.UUID('6039e192-4cc8-11d1-834e-0000f8775be9')
    def get_Area(self):
        '''Method IArea.get_Area

           OUTPUT
            Area                : double*'''
        return super(IArea, self).get_Area()
    def get_Centroid(self):
        '''Method IArea.get_Centroid

           OUTPUT
            Center              : IPoint**'''
        return super(IArea, self).get_Centroid()
    def get_LabelPoint(self):
        '''Method IArea.get_LabelPoint

           OUTPUT
            LabelPoint          : IPoint**'''
        return super(IArea, self).get_LabelPoint()
    def QueryCentroid(self, Center):
        '''Method IArea.QueryCentroid

           INPUT
            Center              : IPoint*'''
        return super(IArea, self).QueryCentroid(Center)
    def QueryLabelPoint(self, LabelPoint):
        '''Method IArea.QueryLabelPoint

           INPUT
            LabelPoint          : IPoint*'''
        return super(IArea, self).QueryLabelPoint(LabelPoint)
    Area = property(get_Area, None, None)
    Centroid = property(get_Centroid, None, None)
    LabelPoint = property(get_LabelPoint, None, None)

class IArea3D(_esriGeometry.IArea3D):
    _IID = uuid.UUID('984839b4-f7ea-42f8-ae20-48632369cc08')
    def get_Area3D(self):
        '''Method IArea3D.get_Area3D

           OUTPUT
            Area                : double*'''
        return super(IArea3D, self).get_Area3D()
    def get_Centroid3D(self):
        '''Method IArea3D.get_Centroid3D

           OUTPUT
            Center              : IPoint**'''
        return super(IArea3D, self).get_Centroid3D()
    def get_LabelPoint3D(self):
        '''Method IArea3D.get_LabelPoint3D

           OUTPUT
            LabelPoint          : IPoint**'''
        return super(IArea3D, self).get_LabelPoint3D()
    def QueryCentroid3D(self, Center):
        '''Method IArea3D.QueryCentroid3D

           INPUT
            Center              : IPoint*'''
        return super(IArea3D, self).QueryCentroid3D(Center)
    def QueryLabelPoint3D(self, LabelPoint):
        '''Method IArea3D.QueryLabelPoint3D

           INPUT
            LabelPoint          : IPoint*'''
        return super(IArea3D, self).QueryLabelPoint3D(LabelPoint)
    Area3D = property(get_Area3D, None, None)
    Centroid3D = property(get_Centroid3D, None, None)
    LabelPoint3D = property(get_LabelPoint3D, None, None)

class IGeometricBufferSourceSink(_esriGeometry.IGeometricBufferSourceSink):
    _IID = uuid.UUID('d21aaa44-d277-4d18-8edf-d90debca3f40')
    def ReadNext(self):
        '''Method IGeometricBufferSourceSink.ReadNext

           OUTPUTS
            geomID              : long*
            nextGeometry        : IGeometry**
            pDistance           : double*'''
        return super(IGeometricBufferSourceSink, self).ReadNext()
    def WriteNext(self, geomID, pBufferedGeometry):
        '''Method IGeometricBufferSourceSink.WriteNext

           INPUTS
            geomID              : long
            pBufferedGeometry   : IGeometry*'''
        return super(IGeometricBufferSourceSink, self).WriteNext(geomID, pBufferedGeometry)

class IEnumVertex2(_esriGeometry.IEnumVertex2):
    _IID = uuid.UUID('82a0b2f0-59bd-437e-9ead-cde15775f260')

    def __init__(self, *args, **kw):
        super(IEnumVertex2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def WKSNext(self):
        '''Method IEnumVertex2.WKSNext

           OUTPUTS
            outVertex           : WKSPoint*
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex2, self).WKSNext()
    def Next(self):
        '''Method IEnumVertex.Next (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex2, self).Next()
    def __iter__(self):
        try:
            super(IEnumVertex2, self).Reset()
            val = super(IEnumVertex2, self).Next()
            while any(val):
                yield val
                val = super(IEnumVertex2, self).Next()
        except:
            pass
    def QueryNext(self, vertex):
        '''Method IEnumVertex.QueryNext (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex2, self).QueryNext(vertex)
    def Previous(self):
        '''Method IEnumVertex.Previous (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex2, self).Previous()
    def QueryPrevious(self, vertex):
        '''Method IEnumVertex.QueryPrevious (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUTS
            outPartIndex        : long*
            vertexIndex         : long*'''
        return super(IEnumVertex2, self).QueryPrevious(vertex)
    def NextInPart(self):
        '''Method IEnumVertex.NextInPart (from IEnumVertex)

           OUTPUTS
            outVertex           : IPoint**
            OutVertexIndex      : long*'''
        return super(IEnumVertex2, self).NextInPart()
    def QueryNextInPart(self, vertex):
        '''Method IEnumVertex.QueryNextInPart (from IEnumVertex)

           INPUT
            vertex              : IPoint*

           OUTPUT
            OutVertexIndex      : long*'''
        return super(IEnumVertex2, self).QueryNextInPart(vertex)
    def Skip(self, numVertices):
        '''Method IEnumVertex.Skip (from IEnumVertex)

           INPUT
            numVertices         : long'''
        return super(IEnumVertex2, self).Skip(numVertices)
    def Reset(self):
        '''Method IEnumVertex.Reset (from IEnumVertex)'''
        return super(IEnumVertex2, self).Reset()
    def Clone(self):
        '''Method IEnumVertex.Clone (from IEnumVertex)

           OUTPUT
            outEnumerator       : IEnumVertex**'''
        return super(IEnumVertex2, self).Clone()
    def ResetToEnd(self):
        '''Method IEnumVertex.ResetToEnd (from IEnumVertex)'''
        return super(IEnumVertex2, self).ResetToEnd()
    def SetAt(self, iPart, iVertex):
        '''Method IEnumVertex.SetAt (from IEnumVertex)

           INPUTS
            iPart               : long
            iVertex             : long'''
        return super(IEnumVertex2, self).SetAt(iPart, iVertex)
    def IsLastInPart(self):
        '''Method IEnumVertex.IsLastInPart (from IEnumVertex)

           OUTPUT
            IsLastInPart        : VARIANT_BOOL*'''
        return super(IEnumVertex2, self).IsLastInPart()
    def put_X(self, X):
        '''Method IEnumVertex.put_X (from IEnumVertex)

           INPUT
            X                   : double'''
        return super(IEnumVertex2, self).put_X(X)
    def put_Y(self, Y):
        '''Method IEnumVertex.put_Y (from IEnumVertex)

           INPUT
            Y                   : double'''
        return super(IEnumVertex2, self).put_Y(Y)
    def put_Z(self, Z):
        '''Method IEnumVertex.put_Z (from IEnumVertex)

           INPUT
            Z                   : double'''
        return super(IEnumVertex2, self).put_Z(Z)
    def put_M(self, M):
        '''Method IEnumVertex.put_M (from IEnumVertex)

           INPUT
            M                   : double'''
        return super(IEnumVertex2, self).put_M(M)
    def put_ID(self, pointID):
        '''Method IEnumVertex.put_ID (from IEnumVertex)

           INPUT
            pointID             : long'''
        return super(IEnumVertex2, self).put_ID(pointID)
    def put_Attribute(self, attributeType, Value):
        '''Method IEnumVertex.put_Attribute (from IEnumVertex)

           INPUTS
            attributeType       : esriGeometryAttributes
            Value               : double'''
        return super(IEnumVertex2, self).put_Attribute(attributeType, Value)
    Attribute = property(None, put_Attribute, None)
    ID = property(None, put_ID, None)
    M = property(None, put_M, None)
    X = property(None, put_X, None)
    Y = property(None, put_Y, None)
    Z = property(None, put_Z, None)

class IConstructMerge(_esriGeometry.IConstructMerge):
    _IID = uuid.UUID('3313dab7-edad-46e0-87b9-c332ec64c5b3')
    def MergeGeometries(self, pOriginal, pEdit1, pEdit2):
        '''Method IConstructMerge.MergeGeometries

           INPUTS
            pOriginal           : IGeometry*
            pEdit1              : IGeometry*
            pEdit2              : IGeometry*

           OUTPUT
            ppMerged            : IGeometry**'''
        return super(IConstructMerge, self).MergeGeometries(pOriginal, pEdit1, pEdit2)

class IMSegmentation(_esriGeometry.IMSegmentation):
    _IID = uuid.UUID('fd5e17ec-d717-11d2-9f34-00c04f6bdf06')
    def get_MMonotonic(self):
        '''Method IMSegmentation.get_MMonotonic

           OUTPUT
            MMonotonic          : esriMMonotonicEnum*'''
        return super(IMSegmentation, self).get_MMonotonic()
    def GetMsAtDistance(self, distance, asRatio):
        '''Method IMSegmentation.GetMsAtDistance

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            ms                  : VARIANT*'''
        return super(IMSegmentation, self).GetMsAtDistance(distance, asRatio)
    def InsertMAtDistance(self, M, distance, asRatio, createPart):
        '''Method IMSegmentation.InsertMAtDistance

           INPUTS
            M                   : double
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IMSegmentation, self).InsertMAtDistance(M, distance, asRatio, createPart)
    def GetDistancesAtM(self, asRatio, M):
        '''Method IMSegmentation.GetDistancesAtM

           INPUTS
            asRatio             : VARIANT_BOOL
            M                   : double

           OUTPUT
            distances           : VARIANT*'''
        return super(IMSegmentation, self).GetDistancesAtM(asRatio, M)
    def ReverseMsOrder(self):
        '''Method IMSegmentation.ReverseMsOrder'''
        return super(IMSegmentation, self).ReverseMsOrder()
    def InterpolateMsBetween(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.InterpolateMsBetween

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation, self).InterpolateMsBetween(fromPart, FromPoint, toPart, ToPoint)
    def SetAndInterpolateMsBetween(self, fromM, toM):
        '''Method IMSegmentation.SetAndInterpolateMsBetween

           INPUTS
            fromM               : double
            toM                 : double'''
        return super(IMSegmentation, self).SetAndInterpolateMsBetween(fromM, toM)
    def SetMsAsDistance(self, asRatio):
        '''Method IMSegmentation.SetMsAsDistance

           INPUT
            asRatio             : VARIANT_BOOL'''
        return super(IMSegmentation, self).SetMsAsDistance(asRatio)
    def ExtrapolateMs(self, extrapolationStyle, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.ExtrapolateMs

           INPUTS
            extrapolationStyle  : esriExtrapolationEnum
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation, self).ExtrapolateMs(extrapolationStyle, fromPart, FromPoint, toPart, ToPoint)
    def CalculateNonSimpleMs(self):
        '''Method IMSegmentation.CalculateNonSimpleMs'''
        return super(IMSegmentation, self).CalculateNonSimpleMs()
    def GetPointsAtM(self, M, lateralOffset):
        '''Method IMSegmentation.GetPointsAtM

           INPUTS
            M                   : double
            lateralOffset       : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation, self).GetPointsAtM(M, lateralOffset)
    def GetSubcurveBetweenMs(self, fromM, toM):
        '''Method IMSegmentation.GetSubcurveBetweenMs

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation, self).GetSubcurveBetweenMs(fromM, toM)
    def get_MMin(self):
        '''Method IMCollection.get_MMin (from IMCollection)

           OUTPUT
            outMMin             : double*'''
        return super(IMSegmentation, self).get_MMin()
    def get_MMax(self):
        '''Method IMCollection.get_MMax (from IMCollection)

           OUTPUT
            outMMax             : double*'''
        return super(IMSegmentation, self).get_MMax()
    def MultiplyMs(self, factor):
        '''Method IMCollection.MultiplyMs (from IMCollection)

           INPUT
            factor              : double'''
        return super(IMSegmentation, self).MultiplyMs(factor)
    def OffsetMs(self, Offset):
        '''Method IMCollection.OffsetMs (from IMCollection)

           INPUT
            Offset              : double'''
        return super(IMSegmentation, self).OffsetMs(Offset)
    MMax = property(get_MMax, None, None)
    MMin = property(get_MMin, None, None)
    MMonotonic = property(get_MMonotonic, None, None)

class IEncode3DProperties(_esriGeometry.IEncode3DProperties):
    _IID = uuid.UUID('7767a6f1-69d1-11d4-9f66-00c04f6bdf0d')
    def PackNormal(self, normalVector):
        '''Method IEncode3DProperties.PackNormal

           INPUT
            normalVector        : IVector3D*

           OUTPUT
            packedNormal        : double*'''
        return super(IEncode3DProperties, self).PackNormal(normalVector)
    def UnPackNormal(self, packedNormal, normalVector):
        '''Method IEncode3DProperties.UnPackNormal

           INPUTS
            packedNormal        : double
            normalVector        : IVector3D*

           OUTPUT
            wasProductive       : VARIANT_BOOL*'''
        return super(IEncode3DProperties, self).UnPackNormal(packedNormal, normalVector)
    def PackTexture2D(self, textureS, textureT):
        '''Method IEncode3DProperties.PackTexture2D

           INPUTS
            textureS            : double
            textureT            : double

           OUTPUT
            packedTexture       : double*'''
        return super(IEncode3DProperties, self).PackTexture2D(textureS, textureT)
    def UnPackTexture2D(self, packedTextureST):
        '''Method IEncode3DProperties.UnPackTexture2D

           INPUT
            packedTextureST     : double

           OUTPUTS
            textureS            : double*
            textureT            : double*
            wasProductive       : VARIANT_BOOL*'''
        return super(IEncode3DProperties, self).UnPackTexture2D(packedTextureST)

class IRelationalOperator(_esriGeometry.IRelationalOperator):
    _IID = uuid.UUID('1b07790e-38c5-11d0-92d2-00805f7c28b0')
    def Equals(self, other):
        '''Method IRelationalOperator.Equals

           INPUT
            other               : IGeometry*

           OUTPUT
            Equals              : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Equals(other)
    def Touches(self, other):
        '''Method IRelationalOperator.Touches

           INPUT
            other               : IGeometry*

           OUTPUT
            Touches             : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Touches(other)
    def Contains(self, other):
        '''Method IRelationalOperator.Contains

           INPUT
            other               : IGeometry*

           OUTPUT
            Contains            : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Contains(other)
    def Within(self, other):
        '''Method IRelationalOperator.Within

           INPUT
            other               : IGeometry*

           OUTPUT
            Within              : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Within(other)
    def Disjoint(self, other):
        '''Method IRelationalOperator.Disjoint

           INPUT
            other               : IGeometry*

           OUTPUT
            Disjoint            : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Disjoint(other)
    def Crosses(self, other):
        '''Method IRelationalOperator.Crosses

           INPUT
            other               : IGeometry*

           OUTPUT
            Crosses             : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Crosses(other)
    def Overlaps(self, other):
        '''Method IRelationalOperator.Overlaps

           INPUT
            other               : IGeometry*

           OUTPUT
            Overlaps            : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Overlaps(other)
    def Relation(self, other, relationDescription):
        '''Method IRelationalOperator.Relation

           INPUTS
            other               : IGeometry*
            relationDescription : BSTR

           OUTPUT
            RelationResult      : VARIANT_BOOL*'''
        return super(IRelationalOperator, self).Relation(other, relationDescription)

class IRelationalOperator2(_esriGeometry.IRelationalOperator2):
    _IID = uuid.UUID('839f5c7e-ed5f-4b3f-8f97-c0a9cc4817ee')
    def ContainsEx(self, pOther, Relation):
        '''Method IRelationalOperator2.ContainsEx

           INPUTS
            pOther              : IGeometry*
            Relation            : esriSpatialRelationExEnum

           OUTPUT
            pbContains          : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).ContainsEx(pOther, Relation)
    def WithinEx(self, pOther, Relation):
        '''Method IRelationalOperator2.WithinEx

           INPUTS
            pOther              : IGeometry*
            Relation            : esriSpatialRelationExEnum

           OUTPUT
            pbWithin            : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).WithinEx(pOther, Relation)
    def IsNear(self, pOther, distance):
        '''Method IRelationalOperator2.IsNear

           INPUTS
            pOther              : IGeometry*
            distance            : double

           OUTPUT
            pbNear              : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).IsNear(pOther, distance)
    def Equals(self, other):
        '''Method IRelationalOperator.Equals (from IRelationalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            Equals              : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Equals(other)
    def Touches(self, other):
        '''Method IRelationalOperator.Touches (from IRelationalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            Touches             : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Touches(other)
    def Contains(self, other):
        '''Method IRelationalOperator.Contains (from IRelationalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            Contains            : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Contains(other)
    def Within(self, other):
        '''Method IRelationalOperator.Within (from IRelationalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            Within              : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Within(other)
    def Disjoint(self, other):
        '''Method IRelationalOperator.Disjoint (from IRelationalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            Disjoint            : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Disjoint(other)
    def Crosses(self, other):
        '''Method IRelationalOperator.Crosses (from IRelationalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            Crosses             : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Crosses(other)
    def Overlaps(self, other):
        '''Method IRelationalOperator.Overlaps (from IRelationalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            Overlaps            : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Overlaps(other)
    def Relation(self, other, relationDescription):
        '''Method IRelationalOperator.Relation (from IRelationalOperator)

           INPUTS
            other               : IGeometry*
            relationDescription : BSTR

           OUTPUT
            RelationResult      : VARIANT_BOOL*'''
        return super(IRelationalOperator2, self).Relation(other, relationDescription)

class IRelationalOperator3D(_esriGeometry.IRelationalOperator3D):
    _IID = uuid.UUID('f6eaefde-888e-4f1d-b5b7-84f36da677b0')
    def Disjoint3D(self, pOther):
        '''Method IRelationalOperator3D.Disjoint3D

           INPUT
            pOther              : IGeometry*

           OUTPUT
            pbDisjoint          : VARIANT_BOOL*'''
        return super(IRelationalOperator3D, self).Disjoint3D(pOther)

class IRelationalOperator3D2(_esriGeometry.IRelationalOperator3D2):
    _IID = uuid.UUID('cc14f157-ec46-4498-8148-fde8d6b43e20')
    def IsNear3D(self, pOther, distance):
        '''Method IRelationalOperator3D2.IsNear3D

           INPUTS
            pOther              : IGeometry*
            distance            : double

           OUTPUT
            pbNear              : VARIANT_BOOL*'''
        return super(IRelationalOperator3D2, self).IsNear3D(pOther, distance)
    def Disjoint3D(self, pOther):
        '''Method IRelationalOperator3D.Disjoint3D (from IRelationalOperator3D)

           INPUT
            pOther              : IGeometry*

           OUTPUT
            pbDisjoint          : VARIANT_BOOL*'''
        return super(IRelationalOperator3D2, self).Disjoint3D(pOther)

class IRelationalOperatorNxM(_esriGeometry.IRelationalOperatorNxM):
    _IID = uuid.UUID('d3214902-bc54-402d-931b-a808e2bee81e')
    def Equals(self, other):
        '''Method IRelationalOperatorNxM.Equals

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Equals(other)
    def Touches(self, other):
        '''Method IRelationalOperatorNxM.Touches

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Touches(other)
    def Contains(self, other):
        '''Method IRelationalOperatorNxM.Contains

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Contains(other)
    def Within(self, other):
        '''Method IRelationalOperatorNxM.Within

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Within(other)
    def Disjoint(self, other):
        '''Method IRelationalOperatorNxM.Disjoint

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Disjoint(other)
    def Intersects(self, other):
        '''Method IRelationalOperatorNxM.Intersects

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Intersects(other)
    def Crosses(self, other):
        '''Method IRelationalOperatorNxM.Crosses

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Crosses(other)
    def Overlaps(self, other):
        '''Method IRelationalOperatorNxM.Overlaps

           INPUT
            other               : IGeometryBag*

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Overlaps(other)
    def Relation(self, other, relationDescription):
        '''Method IRelationalOperatorNxM.Relation

           INPUTS
            other               : IGeometryBag*
            relationDescription : BSTR

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).Relation(other, relationDescription)
    def RelationEx(self, other, Relation):
        '''Method IRelationalOperatorNxM.RelationEx

           INPUTS
            other               : IGeometryBag*
            Relation            : esriSpatialRelationEnum

           OUTPUT
            result              : IRelationResult**'''
        return super(IRelationalOperatorNxM, self).RelationEx(other, Relation)
    def Compress(self, leftIndex):
        '''Method IRelationalOperatorNxM.Compress

           INPUT
            leftIndex           : VARIANT_BOOL

           OUTPUT
            result              : IRelationResult*'''
        return super(IRelationalOperatorNxM, self).Compress(leftIndex)

class IProximityOperator(_esriGeometry.IProximityOperator):
    _IID = uuid.UUID('1b07790f-38c5-11d0-92d2-00805f7c28b0')
    def QueryNearestPoint(self, p, extension, nearest):
        '''Method IProximityOperator.QueryNearestPoint

           INPUTS
            p                   : IPoint*
            extension           : esriSegmentExtension
            nearest             : IPoint*'''
        return super(IProximityOperator, self).QueryNearestPoint(p, extension, nearest)
    def ReturnNearestPoint(self, p, extension):
        '''Method IProximityOperator.ReturnNearestPoint

           INPUTS
            p                   : IPoint*
            extension           : esriSegmentExtension

           OUTPUT
            nearest             : IPoint**'''
        return super(IProximityOperator, self).ReturnNearestPoint(p, extension)
    def ReturnDistance(self, other):
        '''Method IProximityOperator.ReturnDistance

           INPUT
            other               : IGeometry*

           OUTPUT
            distance            : double*'''
        return super(IProximityOperator, self).ReturnDistance(other)

class IProximityOperator3D(_esriGeometry.IProximityOperator3D):
    _IID = uuid.UUID('97e08cf7-7a24-4290-ba8a-acedb753b42c')
    def QueryNearestPoint3D(self, pInP, extension, pNearest):
        '''Method IProximityOperator3D.QueryNearestPoint3D

           INPUTS
            pInP                : IPoint*
            extension           : esriSegmentExtension
            pNearest            : IPoint*'''
        return super(IProximityOperator3D, self).QueryNearestPoint3D(pInP, extension, pNearest)
    def ReturnNearestPoint3D(self, pInP, extension):
        '''Method IProximityOperator3D.ReturnNearestPoint3D

           INPUTS
            pInP                : IPoint*
            extension           : esriSegmentExtension

           OUTPUT
            ppNearest           : IPoint**'''
        return super(IProximityOperator3D, self).ReturnNearestPoint3D(pInP, extension)
    def ReturnDistance3D(self, pOther):
        '''Method IProximityOperator3D.ReturnDistance3D

           INPUT
            pOther              : IGeometry*

           OUTPUT
            pDistance           : double*'''
        return super(IProximityOperator3D, self).ReturnDistance3D(pOther)

class ITopologicalOperator6(_esriGeometry.ITopologicalOperator6):
    _IID = uuid.UUID('5bb94960-4a59-48ff-aacd-d0e906c56e0d')
    def ConstructUnionEx(self, pEnum, bNonPlanar):
        '''Method ITopologicalOperator6.ConstructUnionEx

           INPUTS
            pEnum               : IEnumGeometry*
            bNonPlanar          : VARIANT_BOOL'''
        return super(ITopologicalOperator6, self).ConstructUnionEx(pEnum, bNonPlanar)
    def IntersectEx(self, other, bNonPlanar, resultDimension):
        '''Method ITopologicalOperator6.IntersectEx

           INPUTS
            other               : IGeometry*
            bNonPlanar          : VARIANT_BOOL
            resultDimension     : esriGeometryDimension

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator6, self).IntersectEx(other, bNonPlanar, resultDimension)
    def UnionEx(self, other, bNonPlanar):
        '''Method ITopologicalOperator6.UnionEx

           INPUTS
            other               : IGeometry*
            bNonPlanar          : VARIANT_BOOL

           OUTPUT
            pUnion              : IGeometry**'''
        return super(ITopologicalOperator6, self).UnionEx(other, bNonPlanar)
    def IntersectMultidimensionEx(self, other, bNonPlanar):
        '''Method ITopologicalOperator6.IntersectMultidimensionEx

           INPUTS
            other               : IGeometry*
            bNonPlanar          : VARIANT_BOOL

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator6, self).IntersectMultidimensionEx(other, bNonPlanar)
    def DifferenceEx(self, other, bNonPlanar):
        '''Method ITopologicalOperator6.DifferenceEx

           INPUTS
            other               : IGeometry*
            bNonPlanar          : VARIANT_BOOL

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator6, self).DifferenceEx(other, bNonPlanar)
    def SymmetricDifferenceEx(self, other, bNonPlanar):
        '''Method ITopologicalOperator6.SymmetricDifferenceEx

           INPUTS
            other               : IGeometry*
            bNonPlanar          : VARIANT_BOOL

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator6, self).SymmetricDifferenceEx(other, bNonPlanar)
    def SimplifyAsFeature(self):
        '''Method ITopologicalOperator6.SimplifyAsFeature'''
        return super(ITopologicalOperator6, self).SimplifyAsFeature()

class IConstructGeodetic(_esriGeometry.IConstructGeodetic):
    _IID = uuid.UUID('bda1eef8-15a0-47cf-91a8-06d4287086ce')
    def ConstructGeodeticLineFromPoints(self, geodeticLineType, FromPoint, ToPoint, LinearUnit, densifyMethod, densifyParameter):
        '''Method IConstructGeodetic.ConstructGeodeticLineFromPoints

           INPUTS
            geodeticLineType    : esriGeodeticType
            FromPoint           : IPoint*
            ToPoint             : IPoint*
            LinearUnit          : ILinearUnit*
            densifyMethod       : esriCurveDensifyMethod
            densifyParameter    : double'''
        return super(IConstructGeodetic, self).ConstructGeodeticLineFromPoints(geodeticLineType, FromPoint, ToPoint, LinearUnit, densifyMethod, densifyParameter)
    def ConstructGeodeticLineFromDistance(self, geodeticLineType, FromPoint, LinearUnit, Length, Azimuth, densifyMethod, densifyParameter):
        '''Method IConstructGeodetic.ConstructGeodeticLineFromDistance

           INPUTS
            geodeticLineType    : esriGeodeticType
            FromPoint           : IPoint*
            LinearUnit          : ILinearUnit*
            Length              : double
            Azimuth             : double
            densifyMethod       : esriCurveDensifyMethod
            densifyParameter    : double'''
        return super(IConstructGeodetic, self).ConstructGeodeticLineFromDistance(geodeticLineType, FromPoint, LinearUnit, Length, Azimuth, densifyMethod, densifyParameter)
    def ConstructGeodesicCircle(self, CenterPoint, LinearUnit, Radius, densifyMethod, densifyParameter):
        '''Method IConstructGeodetic.ConstructGeodesicCircle

           INPUTS
            CenterPoint         : IPoint*
            LinearUnit          : ILinearUnit*
            Radius              : double
            densifyMethod       : esriCurveDensifyMethod
            densifyParameter    : double'''
        return super(IConstructGeodetic, self).ConstructGeodesicCircle(CenterPoint, LinearUnit, Radius, densifyMethod, densifyParameter)
    def ConstructGeodesicEllipse(self, CenterPoint, LinearUnit, semiMajorAxisLength, semiMinorAxisLength, semiMajorAxisAzimuth, densifyMethod, densifyParameter):
        '''Method IConstructGeodetic.ConstructGeodesicEllipse

           INPUTS
            CenterPoint         : IPoint*
            LinearUnit          : ILinearUnit*
            semiMajorAxisLength : double
            semiMinorAxisLength : double
            semiMajorAxisAzimuth: double
            densifyMethod       : esriCurveDensifyMethod
            densifyParameter    : double'''
        return super(IConstructGeodetic, self).ConstructGeodesicEllipse(CenterPoint, LinearUnit, semiMajorAxisLength, semiMinorAxisLength, semiMajorAxisAzimuth, densifyMethod, densifyParameter)

class IConstructEllipticArc(_esriGeometry.IConstructEllipticArc):
    _IID = uuid.UUID('b12317d5-16d7-11d2-aa7a-00c04fa37ba4')
    def ConstructEnvelope(self, boundingEnvelope):
        '''Method IConstructEllipticArc.ConstructEnvelope

           INPUT
            boundingEnvelope    : IEnvelope*'''
        return super(IConstructEllipticArc, self).ConstructEnvelope(boundingEnvelope)
    def ConstructUpToFivePoints(self, From, to, thru, point4, point5):
        '''Method IConstructEllipticArc.ConstructUpToFivePoints

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            thru                : IPoint*
            point4              : IPoint*
            point5              : IPoint*'''
        return super(IConstructEllipticArc, self).ConstructUpToFivePoints(From, to, thru, point4, point5)
    def ConstructQuarterEllipse(self, FromPoint, ToPoint, CCW):
        '''Method IConstructEllipticArc.ConstructQuarterEllipse

           INPUTS
            FromPoint           : IPoint*
            ToPoint             : IPoint*
            CCW                 : VARIANT_BOOL'''
        return super(IConstructEllipticArc, self).ConstructQuarterEllipse(FromPoint, ToPoint, CCW)
    def ConstructTwoPointsEnvelope(self, FromPoint, ToPoint, suggestedEnvelope, orientation):
        '''Method IConstructEllipticArc.ConstructTwoPointsEnvelope

           INPUTS
            FromPoint           : IPoint*
            ToPoint             : IPoint*
            suggestedEnvelope   : IEnvelope*
            orientation         : esriArcOrientation'''
        return super(IConstructEllipticArc, self).ConstructTwoPointsEnvelope(FromPoint, ToPoint, suggestedEnvelope, orientation)

class IGeometryArray(_esriGeometry.IGeometryArray):
    _IID = uuid.UUID('2c2f7f27-ae8c-4bb1-a635-502f1a70dc57')
    def get_Count(self):
        '''Method IGeometryArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IGeometryArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IGeometryArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            g                   : IGeometry**'''
        return super(IGeometryArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IGeometryArray.Remove

           INPUT
            Index               : long'''
        return super(IGeometryArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IGeometryArray.RemoveAll'''
        return super(IGeometryArray, self).RemoveAll()
    def Add(self, g):
        '''Method IGeometryArray.Add

           INPUT
            g                   : IGeometry*'''
        return super(IGeometryArray, self).Add(g)
    def Insert(self, Index, g):
        '''Method IGeometryArray.Insert

           INPUTS
            Index               : long
            g                   : IGeometry*'''
        return super(IGeometryArray, self).Insert(Index, g)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IBufferConstruction(_esriGeometry.IBufferConstruction):
    _IID = uuid.UUID('2d199435-c30b-480d-b7da-587f8fd32124')
    def ConstructBuffers(self, pInputGeometries, distance, pOutputBuffers):
        '''Method IBufferConstruction.ConstructBuffers

           INPUTS
            pInputGeometries    : IEnumGeometry*
            distance            : double
            pOutputBuffers      : IGeometryCollection*'''
        return super(IBufferConstruction, self).ConstructBuffers(pInputGeometries, distance, pOutputBuffers)
    def ConstructBuffersByDistances(self, pBufferInputOutput):
        '''Method IBufferConstruction.ConstructBuffersByDistances

           INPUT
            pBufferInputOutput  : IGeometricBufferSourceSink*'''
        return super(IBufferConstruction, self).ConstructBuffersByDistances(pBufferInputOutput)
    def ConstructBuffersByDistances2(self, pInputGeometries, pDistances, pOutputBuffers):
        '''Method IBufferConstruction.ConstructBuffersByDistances2

           INPUTS
            pInputGeometries    : IEnumGeometry*
            pDistances          : IDoubleArray*
            pOutputBuffers      : IGeometryCollection*'''
        return super(IBufferConstruction, self).ConstructBuffersByDistances2(pInputGeometries, pDistances, pOutputBuffers)
    def Buffer(self, pInGeometry, distance):
        '''Method IBufferConstruction.Buffer

           INPUTS
            pInGeometry         : IGeometry*
            distance            : double

           OUTPUT
            ppOutBuffer         : IGeometry**'''
        return super(IBufferConstruction, self).Buffer(pInGeometry, distance)
    def get_EmptyBufferIDs(self):
        '''Method IBufferConstruction.get_EmptyBufferIDs

           OUTPUT
            ppGeomIDArray       : ILongArray**'''
        return super(IBufferConstruction, self).get_EmptyBufferIDs()
    EmptyBufferIDs = property(get_EmptyBufferIDs, None, None)

class IGeometryFactory(_esriGeometry.IGeometryFactory):
    _IID = uuid.UUID('f71f8c16-ef07-11d0-8327-0000f8775be9')
    def CreateGeometry(self, geometryInfo):
        '''Method IGeometryFactory.CreateGeometry

           INPUT
            geometryInfo        : unsignedchar*

           OUTPUTS
            byteCountInOut      : long*
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory, self).CreateGeometry(geometryInfo)
    def CreateGeometryFromWkb(self, geometryInfo):
        '''Method IGeometryFactory.CreateGeometryFromWkb

           INPUT
            geometryInfo        : unsignedchar*

           OUTPUTS
            byteCountInOut      : long*
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory, self).CreateGeometryFromWkb(geometryInfo)
    def CreateEmptyGeometryByESRIType(self, shapeType):
        '''Method IGeometryFactory.CreateEmptyGeometryByESRIType

           INPUT
            shapeType           : esriShapeType

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory, self).CreateEmptyGeometryByESRIType(shapeType)
    def CreateEmptyGeometryByType(self, GeometryType):
        '''Method IGeometryFactory.CreateEmptyGeometryByType

           INPUT
            GeometryType        : esriGeometryType

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory, self).CreateEmptyGeometryByType(GeometryType)
    def CreateGeometryFromWkbVariant(self, wkb):
        '''Method IGeometryFactory.CreateGeometryFromWkbVariant

           INPUT
            wkb                 : VARIANT

           OUTPUTS
            outGeometry         : IGeometry**
            numBytesRead        : long*'''
        return super(IGeometryFactory, self).CreateGeometryFromWkbVariant(wkb)
    def CreateGeometryFromEnumerator(self, geometries):
        '''Method IGeometryFactory.CreateGeometryFromEnumerator

           INPUT
            geometries          : IEnumGeometry*

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory, self).CreateGeometryFromEnumerator(geometries)

class IGeometryFactory2(_esriGeometry.IGeometryFactory2):
    _IID = uuid.UUID('8859da8a-64e0-4f2b-bdfc-46182248bf53')
    def CreateWkbVariantFromGeometry(self, inGeometry):
        '''Method IGeometryFactory2.CreateWkbVariantFromGeometry

           INPUT
            inGeometry          : IGeometry*

           OUTPUT
            wkb                 : VARIANT*'''
        return super(IGeometryFactory2, self).CreateWkbVariantFromGeometry(inGeometry)
    def CreateGeometry(self, geometryInfo):
        '''Method IGeometryFactory.CreateGeometry (from IGeometryFactory)

           INPUT
            geometryInfo        : unsignedchar*

           OUTPUTS
            byteCountInOut      : long*
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory2, self).CreateGeometry(geometryInfo)
    def CreateGeometryFromWkb(self, geometryInfo):
        '''Method IGeometryFactory.CreateGeometryFromWkb (from IGeometryFactory)

           INPUT
            geometryInfo        : unsignedchar*

           OUTPUTS
            byteCountInOut      : long*
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory2, self).CreateGeometryFromWkb(geometryInfo)
    def CreateEmptyGeometryByESRIType(self, shapeType):
        '''Method IGeometryFactory.CreateEmptyGeometryByESRIType (from IGeometryFactory)

           INPUT
            shapeType           : esriShapeType

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory2, self).CreateEmptyGeometryByESRIType(shapeType)
    def CreateEmptyGeometryByType(self, GeometryType):
        '''Method IGeometryFactory.CreateEmptyGeometryByType (from IGeometryFactory)

           INPUT
            GeometryType        : esriGeometryType

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory2, self).CreateEmptyGeometryByType(GeometryType)
    def CreateGeometryFromWkbVariant(self, wkb):
        '''Method IGeometryFactory.CreateGeometryFromWkbVariant (from IGeometryFactory)

           INPUT
            wkb                 : VARIANT

           OUTPUTS
            outGeometry         : IGeometry**
            numBytesRead        : long*'''
        return super(IGeometryFactory2, self).CreateGeometryFromWkbVariant(wkb)
    def CreateGeometryFromEnumerator(self, geometries):
        '''Method IGeometryFactory.CreateGeometryFromEnumerator (from IGeometryFactory)

           INPUT
            geometries          : IEnumGeometry*

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory2, self).CreateGeometryFromEnumerator(geometries)

class IGeometryFactory3(_esriGeometry.IGeometryFactory3):
    _IID = uuid.UUID('7592c306-75b2-4a2c-8fee-c1abbe3d5491')
    def CreateGeometryEx(self, importFlags, geometryInfo):
        '''Method IGeometryFactory3.CreateGeometryEx

           INPUTS
            importFlags         : long
            geometryInfo        : unsignedchar*

           OUTPUTS
            byteCountInOut      : long*
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory3, self).CreateGeometryEx(importFlags, geometryInfo)
    def CreateWkbVariantFromGeometry(self, inGeometry):
        '''Method IGeometryFactory2.CreateWkbVariantFromGeometry (from IGeometryFactory2)

           INPUT
            inGeometry          : IGeometry*

           OUTPUT
            wkb                 : VARIANT*'''
        return super(IGeometryFactory3, self).CreateWkbVariantFromGeometry(inGeometry)
    def CreateGeometry(self, geometryInfo):
        '''Method IGeometryFactory.CreateGeometry (from IGeometryFactory)

           INPUT
            geometryInfo        : unsignedchar*

           OUTPUTS
            byteCountInOut      : long*
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory3, self).CreateGeometry(geometryInfo)
    def CreateGeometryFromWkb(self, geometryInfo):
        '''Method IGeometryFactory.CreateGeometryFromWkb (from IGeometryFactory)

           INPUT
            geometryInfo        : unsignedchar*

           OUTPUTS
            byteCountInOut      : long*
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory3, self).CreateGeometryFromWkb(geometryInfo)
    def CreateEmptyGeometryByESRIType(self, shapeType):
        '''Method IGeometryFactory.CreateEmptyGeometryByESRIType (from IGeometryFactory)

           INPUT
            shapeType           : esriShapeType

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory3, self).CreateEmptyGeometryByESRIType(shapeType)
    def CreateEmptyGeometryByType(self, GeometryType):
        '''Method IGeometryFactory.CreateEmptyGeometryByType (from IGeometryFactory)

           INPUT
            GeometryType        : esriGeometryType

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory3, self).CreateEmptyGeometryByType(GeometryType)
    def CreateGeometryFromWkbVariant(self, wkb):
        '''Method IGeometryFactory.CreateGeometryFromWkbVariant (from IGeometryFactory)

           INPUT
            wkb                 : VARIANT

           OUTPUTS
            outGeometry         : IGeometry**
            numBytesRead        : long*'''
        return super(IGeometryFactory3, self).CreateGeometryFromWkbVariant(wkb)
    def CreateGeometryFromEnumerator(self, geometries):
        '''Method IGeometryFactory.CreateGeometryFromEnumerator (from IGeometryFactory)

           INPUT
            geometries          : IEnumGeometry*

           OUTPUT
            outGeometry         : IGeometry**'''
        return super(IGeometryFactory3, self).CreateGeometryFromEnumerator(geometries)

class IConstructDomainExtent(_esriGeometry.IConstructDomainExtent):
    _IID = uuid.UUID('3f419d43-5486-11d2-aaeb-00c04fa33c20')
    def ConstructDomainExtent(self, extent, Scale):
        '''Method IConstructDomainExtent.ConstructDomainExtent

           INPUTS
            extent              : IEnvelope*
            Scale               : double

           OUTPUT
            newExtent           : IEnvelope**'''
        return super(IConstructDomainExtent, self).ConstructDomainExtent(extent, Scale)
    def ConstructZMDomainExtent(self, inMin, inMax, Scale):
        '''Method IConstructDomainExtent.ConstructZMDomainExtent

           INPUTS
            inMin               : double
            inMax               : double
            Scale               : double

           OUTPUTS
            outMin              : double*
            outMax              : double*'''
        return super(IConstructDomainExtent, self).ConstructZMDomainExtent(inMin, inMax, Scale)

class IConstructDomainExtent2(_esriGeometry.IConstructDomainExtent2):
    _IID = uuid.UUID('32839157-dbc8-40a8-8ff9-fe8f716a300c')
    def ConstructZMDomainExtent2(self, pSR, inMin, inMax, inScale):
        '''Method IConstructDomainExtent2.ConstructZMDomainExtent2

           INPUTS
            pSR                 : ISpatialReference*
            inMin               : double
            inMax               : double
            inScale             : double

           OUTPUTS
            outMin              : double*
            outMax              : double*
            outScale            : double*'''
        return super(IConstructDomainExtent2, self).ConstructZMDomainExtent2(pSR, inMin, inMax, inScale)
    def ConstructDomainExtent(self, extent, Scale):
        '''Method IConstructDomainExtent.ConstructDomainExtent (from IConstructDomainExtent)

           INPUTS
            extent              : IEnvelope*
            Scale               : double

           OUTPUT
            newExtent           : IEnvelope**'''
        return super(IConstructDomainExtent2, self).ConstructDomainExtent(extent, Scale)
    def ConstructZMDomainExtent(self, inMin, inMax, Scale):
        '''Method IConstructDomainExtent.ConstructZMDomainExtent (from IConstructDomainExtent)

           INPUTS
            inMin               : double
            inMax               : double
            Scale               : double

           OUTPUTS
            outMin              : double*
            outMax              : double*'''
        return super(IConstructDomainExtent2, self).ConstructZMDomainExtent(inMin, inMax, Scale)

class IGeneralMultiPatchInfo(_esriGeometry.IGeneralMultiPatchInfo):
    _IID = uuid.UUID('69656158-701d-408c-8b6a-a0b4c012c843')
    def get_VertexCount(self):
        '''Method IGeneralMultiPatchInfo.get_VertexCount

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_VertexCount()
    def get_PatchCount(self):
        '''Method IGeneralMultiPatchInfo.get_PatchCount

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchCount()
    def get_MCount(self):
        '''Method IGeneralMultiPatchInfo.get_MCount

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_MCount()
    def get_NormalCount(self):
        '''Method IGeneralMultiPatchInfo.get_NormalCount

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_NormalCount()
    def get_TextureVertexCount(self):
        '''Method IGeneralMultiPatchInfo.get_TextureVertexCount

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_TextureVertexCount()
    def get_IdCount(self):
        '''Method IGeneralMultiPatchInfo.get_IdCount

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_IdCount()
    def get_MaterialCount(self):
        '''Method IGeneralMultiPatchInfo.get_MaterialCount

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialCount()
    def get_PatchVertexCount(self, patch):
        '''Method IGeneralMultiPatchInfo.get_PatchVertexCount

           INPUT
            patch               : long

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchVertexCount(patch)
    def get_PatchType(self, patch):
        '''Method IGeneralMultiPatchInfo.get_PatchType

           INPUT
            patch               : long

           OUTPUT
            pType               : esriPatchType*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchType(patch)
    def get_PatchPriority(self, patch):
        '''Method IGeneralMultiPatchInfo.get_PatchPriority

           INPUT
            patch               : long

           OUTPUT
            pPriority           : long*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchPriority(patch)
    def get_PatchMaterialIndex(self, patch):
        '''Method IGeneralMultiPatchInfo.get_PatchMaterialIndex

           INPUT
            patch               : long

           OUTPUT
            pIndex              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchMaterialIndex(patch)
    def get_PatchVertex(self, patch, Index):
        '''Method IGeneralMultiPatchInfo.get_PatchVertex

           INPUTS
            patch               : long
            Index               : long

           OUTPUT
            pPoint              : WKSPointZ*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchVertex(patch, Index)
    def get_PatchM(self, patch, Index):
        '''Method IGeneralMultiPatchInfo.get_PatchM

           INPUTS
            patch               : long
            Index               : long

           OUTPUT
            pValue              : double*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchM(patch, Index)
    def QueryPatchNormal(self, patch, Index, pNormal):
        '''Method IGeneralMultiPatchInfo.QueryPatchNormal

           INPUTS
            patch               : long
            Index               : long
            pNormal             : IVector3D*'''
        return super(IGeneralMultiPatchInfo, self).QueryPatchNormal(patch, Index, pNormal)
    def get_PatchTextureVertexCount(self, patch):
        '''Method IGeneralMultiPatchInfo.get_PatchTextureVertexCount

           INPUT
            patch               : long

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchTextureVertexCount(patch)
    def get_PatchTextureVertex(self, patch, Index):
        '''Method IGeneralMultiPatchInfo.get_PatchTextureVertex

           INPUTS
            patch               : long
            Index               : long

           OUTPUT
            pPoint              : WKSPoint*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchTextureVertex(patch, Index)
    def get_PatchVertexID(self, patch, Index):
        '''Method IGeneralMultiPatchInfo.get_PatchVertexID

           INPUTS
            patch               : long
            Index               : long

           OUTPUT
            pId                 : long*'''
        return super(IGeneralMultiPatchInfo, self).get_PatchVertexID(patch, Index)
    def get_MaterialColor(self, Index):
        '''Method IGeneralMultiPatchInfo.get_MaterialColor

           INPUT
            Index               : long

           OUTPUT
            pColor              : OLE_COLOR*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialColor(Index)
    def get_MaterialTransparencyPercent(self, Index):
        '''Method IGeneralMultiPatchInfo.get_MaterialTransparencyPercent

           INPUT
            Index               : long

           OUTPUT
            pTransparency       : long*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialTransparencyPercent(Index)
    def get_MaterialCullBackface(self, Index):
        '''Method IGeneralMultiPatchInfo.get_MaterialCullBackface

           INPUT
            Index               : long

           OUTPUT
            pCull               : VARIANT_BOOL*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialCullBackface(Index)
    def get_IsMaterialTextured(self, Index):
        '''Method IGeneralMultiPatchInfo.get_IsMaterialTextured

           INPUT
            Index               : long

           OUTPUT
            pIsTextured         : VARIANT_BOOL*'''
        return super(IGeneralMultiPatchInfo, self).get_IsMaterialTextured(Index)
    def get_MaterialTextureRowCount(self, Index):
        '''Method IGeneralMultiPatchInfo.get_MaterialTextureRowCount

           INPUT
            Index               : long

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialTextureRowCount(Index)
    def get_MaterialTextureColumnCount(self, Index):
        '''Method IGeneralMultiPatchInfo.get_MaterialTextureColumnCount

           INPUT
            Index               : long

           OUTPUT
            pCount              : long*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialTextureColumnCount(Index)
    def get_MaterialTextureBytesPerPixel(self, Index):
        '''Method IGeneralMultiPatchInfo.get_MaterialTextureBytesPerPixel

           INPUT
            Index               : long

           OUTPUT
            pBytesPerPixel      : long*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialTextureBytesPerPixel(Index)
    def get_MaterialTexturePixelColor(self, Index, row, column):
        '''Method IGeneralMultiPatchInfo.get_MaterialTexturePixelColor

           INPUTS
            Index               : long
            row                 : long
            column              : long

           OUTPUT
            pColor              : OLE_COLOR*'''
        return super(IGeneralMultiPatchInfo, self).get_MaterialTexturePixelColor(Index, row, column)
    IdCount = property(get_IdCount, None, None)
    MCount = property(get_MCount, None, None)
    MaterialCount = property(get_MaterialCount, None, None)
    NormalCount = property(get_NormalCount, None, None)
    PatchCount = property(get_PatchCount, None, None)
    TextureVertexCount = property(get_TextureVertexCount, None, None)
    VertexCount = property(get_VertexCount, None, None)
    IsMaterialTextured = IndexProperty(get_IsMaterialTextured, None)
    MaterialColor = IndexProperty(get_MaterialColor, None)
    MaterialCullBackface = IndexProperty(get_MaterialCullBackface, None)
    MaterialTextureBytesPerPixel = IndexProperty(get_MaterialTextureBytesPerPixel, None)
    MaterialTextureColumnCount = IndexProperty(get_MaterialTextureColumnCount, None)
    MaterialTextureRowCount = IndexProperty(get_MaterialTextureRowCount, None)
    MaterialTransparencyPercent = IndexProperty(get_MaterialTransparencyPercent, None)
    PatchMaterialIndex = IndexProperty(get_PatchMaterialIndex, None)
    PatchPriority = IndexProperty(get_PatchPriority, None)
    PatchTextureVertexCount = IndexProperty(get_PatchTextureVertexCount, None)
    PatchType = IndexProperty(get_PatchType, None)
    PatchVertexCount = IndexProperty(get_PatchVertexCount, None)

class IPointArray(_esriGeometry.IPointArray):
    _IID = uuid.UUID('14e5444e-9fc2-4fc9-adda-941e0342ca3d')
    def get_Count(self):
        '''Method IPointArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IPointArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IPointArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            p                   : IPoint**'''
        return super(IPointArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IPointArray.Remove

           INPUT
            Index               : long'''
        return super(IPointArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IPointArray.RemoveAll'''
        return super(IPointArray, self).RemoveAll()
    def Add(self, p):
        '''Method IPointArray.Add

           INPUT
            p                   : IPoint*'''
        return super(IPointArray, self).Add(p)
    def Insert(self, Index, p):
        '''Method IPointArray.Insert

           INPUTS
            Index               : long
            p                   : IPoint*'''
        return super(IPointArray, self).Insert(Index, p)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IProjectiveTransformation2D(_esriGeometry.IProjectiveTransformation2D):
    _IID = uuid.UUID('1c8a72c4-5a43-48ef-938e-2119608d77d0')

    def __init__(self, *args, **kw):
        super(IProjectiveTransformation2D, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_SpatialReference(self, SR):
        '''Method IProjectiveTransformation2D.putref_SpatialReference

           INPUT
            SR                  : ISpatialReference*'''
        return super(IProjectiveTransformation2D, self).putref_SpatialReference(SR)
    def get_SpatialReference(self):
        '''Method IProjectiveTransformation2D.get_SpatialReference

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(IProjectiveTransformation2D, self).get_SpatialReference()
    def Reset(self):
        '''Method IProjectiveTransformation2D.Reset'''
        return super(IProjectiveTransformation2D, self).Reset()
    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
        '''Method IProjectiveTransformation2D.DefineFromControlPointsEx

           INPUTS
            numPoints           : long
            fromPoints          : WKSPoint*
            toPoints            : WKSPoint*'''
        return super(IProjectiveTransformation2D, self).DefineFromControlPointsEx(numPoints, fromPoints, toPoints)
    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
        '''Method IProjectiveTransformation2D.DefineFromControlPoints

           INPUTS
            numPoints           : long
            fromPoints          : IPoint**
            toPoints            : IPoint**'''
        return super(IProjectiveTransformation2D, self).DefineFromControlPoints(numPoints, fromPoints, toPoints)
    def GetRMSError(self):
        '''Method IProjectiveTransformation2D.GetRMSError

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IProjectiveTransformation2D, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IProjectiveTransformation2D.GetControlPointError

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IProjectiveTransformation2D, self).GetControlPointError(i)
    def Project(self, newSpatialReference):
        '''Method IProjectiveTransformation2D.Project

           INPUT
            newSpatialReference : ISpatialReference*'''
        return super(IProjectiveTransformation2D, self).Project(newSpatialReference)
    def QueryTransformationParameters(self, direction, params):
        '''Method IProjectiveTransformation2D.QueryTransformationParameters

           INPUTS
            direction           : esriTransformDirection
            params              : double*'''
        return super(IProjectiveTransformation2D, self).QueryTransformationParameters(direction, params)
    def SetTransformationParameters(self, direction, params):
        '''Method IProjectiveTransformation2D.SetTransformationParameters

           INPUTS
            direction           : esriTransformDirection
            params              : double*'''
        return super(IProjectiveTransformation2D, self).SetTransformationParameters(direction, params)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IProjectiveTransformation2D, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IProjectiveTransformation2D, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IProjectiveTransformation2D, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IProjectiveTransformation2D, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IProjectiveTransformation2D, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IProjectiveTransformation2D, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IProjectiveTransformation2D, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IProjectiveTransformation2D, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IAffineTransformation3D(_esriGeometry.IAffineTransformation3D):
    _IID = uuid.UUID('c3e86164-2f35-4068-8706-0a07614f6ac3')
    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation3D.DefineFromControlPointsEx

           INPUTS
            numPoints           : long
            fromPoints          : WKSPointZ*
            toPoints            : WKSPointZ*'''
        return super(IAffineTransformation3D, self).DefineFromControlPointsEx(numPoints, fromPoints, toPoints)
    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation3D.DefineFromControlPoints

           INPUTS
            numPoints           : long
            fromPoints          : IPoint**
            toPoints            : IPoint**'''
        return super(IAffineTransformation3D, self).DefineFromControlPoints(numPoints, fromPoints, toPoints)
    def GetRMSError(self):
        '''Method IAffineTransformation3D.GetRMSError

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation3D, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IAffineTransformation3D.GetControlPointError

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation3D, self).GetControlPointError(i)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IAffineTransformation3D, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IAffineTransformation3D, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IAffineTransformation3D, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IAffineTransformation3D, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IAffineTransformation3D, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IAffineTransformation3D, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IAffineTransformation3D, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IAffineTransformation3D, self).TransformPointsII(direction, cPoints, inPoints, outPoints)

class IHitTest(_esriGeometry.IHitTest):
    _IID = uuid.UUID('0eb12c6e-18f6-11d1-8337-0000f8775be9')
    def HitTest(self, QueryPoint, searchRadius, geometryPart, hitPoint):
        '''Method IHitTest.HitTest

           INPUTS
            QueryPoint          : IPoint*
            searchRadius        : double
            geometryPart        : esriGeometryHitPartType
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitPartIndex        : long*
            hitSegmentIndex     : long*
            bRightSide          : VARIANT_BOOL*
            bHit                : VARIANT_BOOL*'''
        return super(IHitTest, self).HitTest(QueryPoint, searchRadius, geometryPart, hitPoint)

class IHitTest3D(_esriGeometry.IHitTest3D):
    _IID = uuid.UUID('a2fa4e9a-4e10-4a62-9eed-48680a7423dd')
    def HitTest3D(self, QueryPoint, searchRadius, geometryPart, hitPoint):
        '''Method IHitTest3D.HitTest3D

           INPUTS
            QueryPoint          : IPoint*
            searchRadius        : double
            geometryPart        : esriGeometryHitPartType
            hitPoint            : IPoint*

           OUTPUTS
            hitDistance         : double*
            hitPartIndex        : long*
            hitSegmentIndex     : long*
            bHit                : VARIANT_BOOL*'''
        return super(IHitTest3D, self).HitTest3D(QueryPoint, searchRadius, geometryPart, hitPoint)
    def HitTestCone(self, pQueryRay, minAngle, geometryPart, pHitPoint):
        '''Method IHitTest3D.HitTestCone

           INPUTS
            pQueryRay           : IRay*
            minAngle            : double
            geometryPart        : esriGeometryHitPartType
            pHitPoint           : IPoint*

           OUTPUTS
            pHitDistance        : double*
            pHitPartIndex       : long*
            pHitSegmentIndex    : long*
            pbHit               : VARIANT_BOOL*'''
        return super(IHitTest3D, self).HitTestCone(pQueryRay, minAngle, geometryPart, pHitPoint)

class ICurve3D(_esriGeometry.ICurve3D):
    _IID = uuid.UUID('ac4d3da2-4b76-48dd-b393-2468452ca30d')
    def get_Length3D(self):
        '''Method ICurve3D.get_Length3D

           OUTPUT
            pLength             : double*'''
        return super(ICurve3D, self).get_Length3D()
    def QueryPoint3D(self, extension, DistanceAlongCurve, bAsRatio, pOutPoint):
        '''Method ICurve3D.QueryPoint3D

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            bAsRatio            : VARIANT_BOOL
            pOutPoint           : IPoint*'''
        return super(ICurve3D, self).QueryPoint3D(extension, DistanceAlongCurve, bAsRatio, pOutPoint)
    def GetSubcurve3D(self, fromDistance, toDistance, bAsRatio):
        '''Method ICurve3D.GetSubcurve3D

           INPUTS
            fromDistance        : double
            toDistance          : double
            bAsRatio            : VARIANT_BOOL

           OUTPUT
            ppOutSubCurve       : ICurve3D**'''
        return super(ICurve3D, self).GetSubcurve3D(fromDistance, toDistance, bAsRatio)
    def QueryPointAndDistance3D(self, extension, pInPoint, bAsRatio, pOutPoint):
        '''Method ICurve3D.QueryPointAndDistance3D

           INPUTS
            extension           : esriSegmentExtension
            pInPoint            : IPoint*
            bAsRatio            : VARIANT_BOOL
            pOutPoint           : IPoint*

           OUTPUTS
            pDistanceAlongCurve : double*
            pDistanceFromCurve  : double*'''
        return super(ICurve3D, self).QueryPointAndDistance3D(extension, pInPoint, bAsRatio, pOutPoint)
    def get_IsClosed3D(self):
        '''Method ICurve3D.get_IsClosed3D

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ICurve3D, self).get_IsClosed3D()
    IsClosed3D = property(get_IsClosed3D, None, None)
    Length3D = property(get_Length3D, None, None)

class IEnvelope2(_esriGeometry.IEnvelope2):
    _IID = uuid.UUID('6b256adf-1cde-11d4-9f5c-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IEnvelope2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutZCoords(self, ZMin, ZMax):
        '''Method IEnvelope2.PutZCoords

           INPUTS
            ZMin                : double
            ZMax                : double'''
        return super(IEnvelope2, self).PutZCoords(ZMin, ZMax)
    def QueryZCoords(self):
        '''Method IEnvelope2.QueryZCoords

           OUTPUTS
            ZMin                : double*
            ZMax                : double*'''
        return super(IEnvelope2, self).QueryZCoords()
    def PutMCoords(self, MMin, MMax):
        '''Method IEnvelope2.PutMCoords

           INPUTS
            MMin                : double
            MMax                : double'''
        return super(IEnvelope2, self).PutMCoords(MMin, MMax)
    def QueryMCoords(self):
        '''Method IEnvelope2.QueryMCoords

           OUTPUTS
            MMin                : double*
            MMax                : double*'''
        return super(IEnvelope2, self).QueryMCoords()
    def get_Width(self):
        '''Method IEnvelope.get_Width (from IEnvelope)

           OUTPUT
            Width               : double*'''
        return super(IEnvelope2, self).get_Width()
    def put_Width(self, Width):
        '''Method IEnvelope.put_Width (from IEnvelope)

           INPUT
            Width               : double'''
        return super(IEnvelope2, self).put_Width(Width)
    def get_Height(self):
        '''Method IEnvelope.get_Height (from IEnvelope)

           OUTPUT
            Height              : double*'''
        return super(IEnvelope2, self).get_Height()
    def put_Depth(self, Depth):
        '''Method IEnvelope.put_Depth (from IEnvelope)

           INPUT
            Depth               : double'''
        return super(IEnvelope2, self).put_Depth(Depth)
    def get_Depth(self):
        '''Method IEnvelope.get_Depth (from IEnvelope)

           OUTPUT
            Depth               : double*'''
        return super(IEnvelope2, self).get_Depth()
    def put_Height(self, Height):
        '''Method IEnvelope.put_Height (from IEnvelope)

           INPUT
            Height              : double'''
        return super(IEnvelope2, self).put_Height(Height)
    def get_LowerLeft(self):
        '''Method IEnvelope.get_LowerLeft (from IEnvelope)

           OUTPUT
            LowerLeft           : IPoint**'''
        return super(IEnvelope2, self).get_LowerLeft()
    def put_LowerLeft(self, LowerLeft):
        '''Method IEnvelope.put_LowerLeft (from IEnvelope)

           INPUT
            LowerLeft           : IPoint*'''
        return super(IEnvelope2, self).put_LowerLeft(LowerLeft)
    def get_UpperLeft(self):
        '''Method IEnvelope.get_UpperLeft (from IEnvelope)

           OUTPUT
            UpperLeft           : IPoint**'''
        return super(IEnvelope2, self).get_UpperLeft()
    def put_UpperLeft(self, UpperLeft):
        '''Method IEnvelope.put_UpperLeft (from IEnvelope)

           INPUT
            UpperLeft           : IPoint*'''
        return super(IEnvelope2, self).put_UpperLeft(UpperLeft)
    def get_UpperRight(self):
        '''Method IEnvelope.get_UpperRight (from IEnvelope)

           OUTPUT
            UpperRight          : IPoint**'''
        return super(IEnvelope2, self).get_UpperRight()
    def put_UpperRight(self, UpperRight):
        '''Method IEnvelope.put_UpperRight (from IEnvelope)

           INPUT
            UpperRight          : IPoint*'''
        return super(IEnvelope2, self).put_UpperRight(UpperRight)
    def get_LowerRight(self):
        '''Method IEnvelope.get_LowerRight (from IEnvelope)

           OUTPUT
            LowerRight          : IPoint**'''
        return super(IEnvelope2, self).get_LowerRight()
    def put_LowerRight(self, LowerRight):
        '''Method IEnvelope.put_LowerRight (from IEnvelope)

           INPUT
            LowerRight          : IPoint*'''
        return super(IEnvelope2, self).put_LowerRight(LowerRight)
    def get_XMin(self):
        '''Method IEnvelope.get_XMin (from IEnvelope)

           OUTPUT
            XMin                : double*'''
        return super(IEnvelope2, self).get_XMin()
    def put_XMin(self, XMin):
        '''Method IEnvelope.put_XMin (from IEnvelope)

           INPUT
            XMin                : double'''
        return super(IEnvelope2, self).put_XMin(XMin)
    def get_YMin(self):
        '''Method IEnvelope.get_YMin (from IEnvelope)

           OUTPUT
            YMin                : double*'''
        return super(IEnvelope2, self).get_YMin()
    def put_YMin(self, YMin):
        '''Method IEnvelope.put_YMin (from IEnvelope)

           INPUT
            YMin                : double'''
        return super(IEnvelope2, self).put_YMin(YMin)
    def get_XMax(self):
        '''Method IEnvelope.get_XMax (from IEnvelope)

           OUTPUT
            XMax                : double*'''
        return super(IEnvelope2, self).get_XMax()
    def put_XMax(self, XMax):
        '''Method IEnvelope.put_XMax (from IEnvelope)

           INPUT
            XMax                : double'''
        return super(IEnvelope2, self).put_XMax(XMax)
    def get_YMax(self):
        '''Method IEnvelope.get_YMax (from IEnvelope)

           OUTPUT
            YMax                : double*'''
        return super(IEnvelope2, self).get_YMax()
    def put_YMax(self, YMax):
        '''Method IEnvelope.put_YMax (from IEnvelope)

           INPUT
            YMax                : double'''
        return super(IEnvelope2, self).put_YMax(YMax)
    def get_MMin(self):
        '''Method IEnvelope.get_MMin (from IEnvelope)

           OUTPUT
            MMin                : double*'''
        return super(IEnvelope2, self).get_MMin()
    def put_MMin(self, MMin):
        '''Method IEnvelope.put_MMin (from IEnvelope)

           INPUT
            MMin                : double'''
        return super(IEnvelope2, self).put_MMin(MMin)
    def get_MMax(self):
        '''Method IEnvelope.get_MMax (from IEnvelope)

           OUTPUT
            MMax                : double*'''
        return super(IEnvelope2, self).get_MMax()
    def put_MMax(self, MMax):
        '''Method IEnvelope.put_MMax (from IEnvelope)

           INPUT
            MMax                : double'''
        return super(IEnvelope2, self).put_MMax(MMax)
    def get_ZMin(self):
        '''Method IEnvelope.get_ZMin (from IEnvelope)

           OUTPUT
            ZMin                : double*'''
        return super(IEnvelope2, self).get_ZMin()
    def put_ZMin(self, ZMin):
        '''Method IEnvelope.put_ZMin (from IEnvelope)

           INPUT
            ZMin                : double'''
        return super(IEnvelope2, self).put_ZMin(ZMin)
    def get_ZMax(self):
        '''Method IEnvelope.get_ZMax (from IEnvelope)

           OUTPUT
            ZMax                : double*'''
        return super(IEnvelope2, self).get_ZMax()
    def put_ZMax(self, ZMax):
        '''Method IEnvelope.put_ZMax (from IEnvelope)

           INPUT
            ZMax                : double'''
        return super(IEnvelope2, self).put_ZMax(ZMax)
    def Union(self, inEnvelope):
        '''Method IEnvelope.Union (from IEnvelope)

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelope2, self).Union(inEnvelope)
    def Intersect(self, inEnvelope):
        '''Method IEnvelope.Intersect (from IEnvelope)

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(IEnvelope2, self).Intersect(inEnvelope)
    def Offset(self, X, Y):
        '''Method IEnvelope.Offset (from IEnvelope)

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IEnvelope2, self).Offset(X, Y)
    def OffsetZ(self, Z):
        '''Method IEnvelope.OffsetZ (from IEnvelope)

           INPUT
            Z                   : double'''
        return super(IEnvelope2, self).OffsetZ(Z)
    def OffsetM(self, M):
        '''Method IEnvelope.OffsetM (from IEnvelope)

           INPUT
            M                   : double'''
        return super(IEnvelope2, self).OffsetM(M)
    def Expand(self, dx, dy, asRatio):
        '''Method IEnvelope.Expand (from IEnvelope)

           INPUTS
            dx                  : double
            dy                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelope2, self).Expand(dx, dy, asRatio)
    def ExpandZ(self, dz, asRatio):
        '''Method IEnvelope.ExpandZ (from IEnvelope)

           INPUTS
            dz                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelope2, self).ExpandZ(dz, asRatio)
    def ExpandM(self, dm, asRatio):
        '''Method IEnvelope.ExpandM (from IEnvelope)

           INPUTS
            dm                  : double
            asRatio             : VARIANT_BOOL'''
        return super(IEnvelope2, self).ExpandM(dm, asRatio)
    def DefineFromWKSPoints(self, Count, Points):
        '''Method IEnvelope.DefineFromWKSPoints (from IEnvelope)

           INPUTS
            Count               : long
            Points              : WKSPoint*'''
        return super(IEnvelope2, self).DefineFromWKSPoints(Count, Points)
    def DefineFromPoints(self, Count, Points):
        '''Method IEnvelope.DefineFromPoints (from IEnvelope)

           INPUTS
            Count               : long
            Points              : IPoint**'''
        return super(IEnvelope2, self).DefineFromPoints(Count, Points)
    def QueryWKSCoords(self):
        '''Method IEnvelope.QueryWKSCoords (from IEnvelope)

           OUTPUT
            e                   : WKSEnvelope*'''
        return super(IEnvelope2, self).QueryWKSCoords()
    def PutWKSCoords(self, e):
        '''Method IEnvelope.PutWKSCoords (from IEnvelope)

           INPUT
            e                   : WKSEnvelope*'''
        return super(IEnvelope2, self).PutWKSCoords(e)
    def PutCoords(self, XMin, YMin, XMax, YMax):
        '''Method IEnvelope.PutCoords (from IEnvelope)

           INPUTS
            XMin                : double
            YMin                : double
            XMax                : double
            YMax                : double'''
        return super(IEnvelope2, self).PutCoords(XMin, YMin, XMax, YMax)
    def QueryCoords(self):
        '''Method IEnvelope.QueryCoords (from IEnvelope)

           OUTPUTS
            XMin                : double*
            YMin                : double*
            XMax                : double*
            YMax                : double*'''
        return super(IEnvelope2, self).QueryCoords()
    def CenterAt(self, p):
        '''Method IEnvelope.CenterAt (from IEnvelope)

           INPUT
            p                   : IPoint*'''
        return super(IEnvelope2, self).CenterAt(p)
    def get_MinMaxAttributes(self):
        '''Method IEnvelope.get_MinMaxAttributes (from IEnvelope)

           OUTPUT
            MinMaxAttributes    : esriPointAttributes**'''
        return super(IEnvelope2, self).get_MinMaxAttributes()
    def put_MinMaxAttributes(self, MinMaxAttributes):
        '''Method IEnvelope.put_MinMaxAttributes (from IEnvelope)

           INPUT
            MinMaxAttributes    : esriPointAttributes*'''
        return super(IEnvelope2, self).put_MinMaxAttributes(MinMaxAttributes)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IEnvelope2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IEnvelope2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IEnvelope2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IEnvelope2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IEnvelope2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IEnvelope2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IEnvelope2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IEnvelope2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IEnvelope2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IEnvelope2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IEnvelope2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IEnvelope2, self).GeoNormalizeFromLongitude(Longitude)
    Depth = property(get_Depth, put_Depth, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    Height = property(get_Height, put_Height, None)
    IsEmpty = property(get_IsEmpty, None, None)
    LowerLeft = property(get_LowerLeft, put_LowerLeft, None)
    LowerRight = property(get_LowerRight, put_LowerRight, None)
    MMax = property(get_MMax, put_MMax, None)
    MMin = property(get_MMin, put_MMin, None)
    MinMaxAttributes = property(get_MinMaxAttributes, put_MinMaxAttributes, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    UpperLeft = property(get_UpperLeft, put_UpperLeft, None)
    UpperRight = property(get_UpperRight, put_UpperRight, None)
    Width = property(get_Width, put_Width, None)
    XMax = property(get_XMax, put_XMax, None)
    XMin = property(get_XMin, put_XMin, None)
    YMax = property(get_YMax, put_YMax, None)
    YMin = property(get_YMin, put_YMin, None)
    ZMax = property(get_ZMax, put_ZMax, None)
    ZMin = property(get_ZMin, put_ZMin, None)

class IPointCollection5(_esriGeometry.IPointCollection5):
    _IID = uuid.UUID('87c8de06-d8b5-4f5d-bcd5-a27c3a994b07')
    def AddWKSPointVA(self, Count, pointStructures):
        '''Method IPointCollection5.AddWKSPointVA

           INPUTS
            Count               : long
            pointStructures     : WKSPointVA*'''
        return super(IPointCollection5, self).AddWKSPointVA(Count, pointStructures)
    def SetWKSPointVA(self, Count, pointStructures):
        '''Method IPointCollection5.SetWKSPointVA

           INPUTS
            Count               : long
            pointStructures     : WKSPointVA*'''
        return super(IPointCollection5, self).SetWKSPointVA(Count, pointStructures)
    def QueryWKSPointVA(self, Index, Count):
        '''Method IPointCollection5.QueryWKSPointVA

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPointVA*'''
        return super(IPointCollection5, self).QueryWKSPointVA(Index, Count)
    def InsertWKSPointVA(self, Index, Count, newPoints):
        '''Method IPointCollection5.InsertWKSPointVA

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPointVA*'''
        return super(IPointCollection5, self).InsertWKSPointVA(Index, Count, newPoints)
    def AddWKSPointZs(self, Count, pointStructures):
        '''Method IPointCollection4.AddWKSPointZs (from IPointCollection4)

           INPUTS
            Count               : long
            pointStructures     : WKSPointZ*'''
        return super(IPointCollection5, self).AddWKSPointZs(Count, pointStructures)
    def SetWKSPointZs(self, Count, pointStructures):
        '''Method IPointCollection4.SetWKSPointZs (from IPointCollection4)

           INPUTS
            Count               : long
            pointStructures     : WKSPointZ*'''
        return super(IPointCollection5, self).SetWKSPointZs(Count, pointStructures)
    def QueryWKSPointZs(self, Index, Count):
        '''Method IPointCollection4.QueryWKSPointZs (from IPointCollection4)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPointZ*'''
        return super(IPointCollection5, self).QueryWKSPointZs(Index, Count)
    def InsertWKSPointZs(self, Index, Count, newPoints):
        '''Method IPointCollection4.InsertWKSPointZs (from IPointCollection4)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPointZ*'''
        return super(IPointCollection5, self).InsertWKSPointZs(Index, Count, newPoints)
    def get_IndexedEnumVertices(self, queryGeometry):
        '''Method IPointCollection3.get_IndexedEnumVertices (from IPointCollection3)

           INPUT
            queryGeometry       : IGeometry*

           OUTPUT
            indexedVertexEnumerator: IEnumVertex**'''
        return super(IPointCollection5, self).get_IndexedEnumVertices(queryGeometry)
    def GetPoints(self, Index, Count):
        '''Method IPointCollection2.GetPoints (from IPointCollection2)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            Points              : IPoint**'''
        return super(IPointCollection5, self).GetPoints(Index, Count)
    def get_PointCount(self):
        '''Method IPointCollection.get_PointCount (from IPointCollection)

           OUTPUT
            cPoints             : long*'''
        return super(IPointCollection5, self).get_PointCount()
    def get_Point(self, i):
        '''Method IPointCollection.get_Point (from IPointCollection)

           INPUT
            i                   : long

           OUTPUT
            Point               : IPoint**'''
        return super(IPointCollection5, self).get_Point(i)
    def AddPoint(self, inPoint, before, after):
        '''Method IPointCollection.AddPoint (from IPointCollection)

           INPUTS
            inPoint             : IPoint*
            before              : VARIANT*
            after               : VARIANT*'''
        return super(IPointCollection5, self).AddPoint(inPoint, before, after)
    def UpdatePoint(self, i, p):
        '''Method IPointCollection.UpdatePoint (from IPointCollection)

           INPUTS
            i                   : long
            p                   : IPoint*'''
        return super(IPointCollection5, self).UpdatePoint(i, p)
    def QueryPoints(self, Index, Count, Points):
        '''Method IPointCollection.QueryPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            Points              : IPoint**'''
        return super(IPointCollection5, self).QueryPoints(Index, Count, Points)
    def InsertPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection5, self).InsertPoints(Index, Count, newPoints)
    def InsertPointCollection(self, Index, newPoints):
        '''Method IPointCollection.InsertPointCollection (from IPointCollection)

           INPUTS
            Index               : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection5, self).InsertPointCollection(Index, newPoints)
    def AddPoints(self, Count, newPoints):
        '''Method IPointCollection.AddPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection5, self).AddPoints(Count, newPoints)
    def AddPointCollection(self, newPoints):
        '''Method IPointCollection.AddPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection5, self).AddPointCollection(newPoints)
    def SetPoints(self, Count, newPoints):
        '''Method IPointCollection.SetPoints (from IPointCollection)

           INPUTS
            Count               : long
            newPoints           : IPoint**'''
        return super(IPointCollection5, self).SetPoints(Count, newPoints)
    def SetPointCollection(self, newPoints):
        '''Method IPointCollection.SetPointCollection (from IPointCollection)

           INPUT
            newPoints           : IPointCollection*'''
        return super(IPointCollection5, self).SetPointCollection(newPoints)
    def RemovePoints(self, Index, Count):
        '''Method IPointCollection.RemovePoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long'''
        return super(IPointCollection5, self).RemovePoints(Index, Count)
    def get_EnumVertices(self):
        '''Method IPointCollection.get_EnumVertices (from IPointCollection)

           OUTPUT
            newVertexEnumerator : IEnumVertex**'''
        return super(IPointCollection5, self).get_EnumVertices()
    def AddWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.AddWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection5, self).AddWKSPoints(Count, pointStructures)
    def SetWKSPoints(self, Count, pointStructures):
        '''Method IPointCollection.SetWKSPoints (from IPointCollection)

           INPUTS
            Count               : long
            pointStructures     : WKSPoint*'''
        return super(IPointCollection5, self).SetWKSPoints(Count, pointStructures)
    def QueryWKSPoints(self, Index, Count):
        '''Method IPointCollection.QueryWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            pointStructures     : WKSPoint*'''
        return super(IPointCollection5, self).QueryWKSPoints(Index, Count)
    def InsertWKSPoints(self, Index, Count, newPoints):
        '''Method IPointCollection.InsertWKSPoints (from IPointCollection)

           INPUTS
            Index               : long
            Count               : long
            newPoints           : WKSPoint*'''
        return super(IPointCollection5, self).InsertWKSPoints(Index, Count, newPoints)
    def ReplacePoints(self, Index, comingIn, goingAway, newPoints):
        '''Method IPointCollection.ReplacePoints (from IPointCollection)

           INPUTS
            Index               : long
            comingIn            : long
            goingAway           : long
            newPoints           : IPoint**'''
        return super(IPointCollection5, self).ReplacePoints(Index, comingIn, goingAway, newPoints)
    def ReplacePointCollection(self, Index, goingAway, newPoints):
        '''Method IPointCollection.ReplacePointCollection (from IPointCollection)

           INPUTS
            Index               : long
            goingAway           : long
            newPoints           : IPointCollection*'''
        return super(IPointCollection5, self).ReplacePointCollection(Index, goingAway, newPoints)
    def QueryPoint(self, Index, Point):
        '''Method IPointCollection.QueryPoint (from IPointCollection)

           INPUTS
            Index               : long
            Point               : IPoint*'''
        return super(IPointCollection5, self).QueryPoint(Index, Point)
    EnumVertices = property(get_EnumVertices, None, None)
    PointCount = property(get_PointCount, None, None)
    IndexedEnumVertices = IndexProperty(get_IndexedEnumVertices, None)
    Point = IndexProperty(get_Point, None)

class IMSegmentation2(_esriGeometry.IMSegmentation2):
    _IID = uuid.UUID('b80d4790-f452-11d3-9f69-00c04f6bdd7f')
    def SetMsAsDistance2(self, Origin, Scale, Offset, ignoreGaps):
        '''Method IMSegmentation2.SetMsAsDistance2

           INPUTS
            Origin              : IPoint*
            Scale               : double
            Offset              : double
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation2, self).SetMsAsDistance2(Origin, Scale, Offset, ignoreGaps)
    def UpdateMsByDistance(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow, ignoreGaps):
        '''Method IMSegmentation2.UpdateMsByDistance

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long
            fromM               : double
            toM                 : double
            updateHow           : long
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation2, self).UpdateMsByDistance(fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow, ignoreGaps)
    def UpdateMsByMs(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow):
        '''Method IMSegmentation2.UpdateMsByMs

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long
            fromM               : double
            toM                 : double
            updateHow           : long'''
        return super(IMSegmentation2, self).UpdateMsByMs(fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow)
    def CalibrateByDistance(self, Points, updateHow, ignoreGaps, cutoffDistance):
        '''Method IMSegmentation2.CalibrateByDistance

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            ignoreGaps          : VARIANT_BOOL
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation2, self).CalibrateByDistance(Points, updateHow, ignoreGaps, cutoffDistance)
    def CalibrateByMs(self, Points, updateHow, cutoffDistance):
        '''Method IMSegmentation2.CalibrateByMs

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation2, self).CalibrateByMs(Points, updateHow, cutoffDistance)
    def GetSubcurveBetweenMsEx(self, fromM, toM):
        '''Method IMSegmentation2.GetSubcurveBetweenMsEx

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUTS
            fromMDetails        : long*
            toMDetails          : long*
            result              : IGeometryCollection**'''
        return super(IMSegmentation2, self).GetSubcurveBetweenMsEx(fromM, toM)
    def get_MMonotonic(self):
        '''Method IMSegmentation.get_MMonotonic (from IMSegmentation)

           OUTPUT
            MMonotonic          : esriMMonotonicEnum*'''
        return super(IMSegmentation2, self).get_MMonotonic()
    def GetMsAtDistance(self, distance, asRatio):
        '''Method IMSegmentation.GetMsAtDistance (from IMSegmentation)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            ms                  : VARIANT*'''
        return super(IMSegmentation2, self).GetMsAtDistance(distance, asRatio)
    def InsertMAtDistance(self, M, distance, asRatio, createPart):
        '''Method IMSegmentation.InsertMAtDistance (from IMSegmentation)

           INPUTS
            M                   : double
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IMSegmentation2, self).InsertMAtDistance(M, distance, asRatio, createPart)
    def GetDistancesAtM(self, asRatio, M):
        '''Method IMSegmentation.GetDistancesAtM (from IMSegmentation)

           INPUTS
            asRatio             : VARIANT_BOOL
            M                   : double

           OUTPUT
            distances           : VARIANT*'''
        return super(IMSegmentation2, self).GetDistancesAtM(asRatio, M)
    def ReverseMsOrder(self):
        '''Method IMSegmentation.ReverseMsOrder (from IMSegmentation)'''
        return super(IMSegmentation2, self).ReverseMsOrder()
    def InterpolateMsBetween(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.InterpolateMsBetween (from IMSegmentation)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation2, self).InterpolateMsBetween(fromPart, FromPoint, toPart, ToPoint)
    def SetAndInterpolateMsBetween(self, fromM, toM):
        '''Method IMSegmentation.SetAndInterpolateMsBetween (from IMSegmentation)

           INPUTS
            fromM               : double
            toM                 : double'''
        return super(IMSegmentation2, self).SetAndInterpolateMsBetween(fromM, toM)
    def SetMsAsDistance(self, asRatio):
        '''Method IMSegmentation.SetMsAsDistance (from IMSegmentation)

           INPUT
            asRatio             : VARIANT_BOOL'''
        return super(IMSegmentation2, self).SetMsAsDistance(asRatio)
    def ExtrapolateMs(self, extrapolationStyle, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.ExtrapolateMs (from IMSegmentation)

           INPUTS
            extrapolationStyle  : esriExtrapolationEnum
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation2, self).ExtrapolateMs(extrapolationStyle, fromPart, FromPoint, toPart, ToPoint)
    def CalculateNonSimpleMs(self):
        '''Method IMSegmentation.CalculateNonSimpleMs (from IMSegmentation)'''
        return super(IMSegmentation2, self).CalculateNonSimpleMs()
    def GetPointsAtM(self, M, lateralOffset):
        '''Method IMSegmentation.GetPointsAtM (from IMSegmentation)

           INPUTS
            M                   : double
            lateralOffset       : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation2, self).GetPointsAtM(M, lateralOffset)
    def GetSubcurveBetweenMs(self, fromM, toM):
        '''Method IMSegmentation.GetSubcurveBetweenMs (from IMSegmentation)

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation2, self).GetSubcurveBetweenMs(fromM, toM)
    def get_MMin(self):
        '''Method IMCollection.get_MMin (from IMCollection)

           OUTPUT
            outMMin             : double*'''
        return super(IMSegmentation2, self).get_MMin()
    def get_MMax(self):
        '''Method IMCollection.get_MMax (from IMCollection)

           OUTPUT
            outMMax             : double*'''
        return super(IMSegmentation2, self).get_MMax()
    def MultiplyMs(self, factor):
        '''Method IMCollection.MultiplyMs (from IMCollection)

           INPUT
            factor              : double'''
        return super(IMSegmentation2, self).MultiplyMs(factor)
    def OffsetMs(self, Offset):
        '''Method IMCollection.OffsetMs (from IMCollection)

           INPUT
            Offset              : double'''
        return super(IMSegmentation2, self).OffsetMs(Offset)
    MMax = property(get_MMax, None, None)
    MMin = property(get_MMin, None, None)
    MMonotonic = property(get_MMonotonic, None, None)

class IMSegmentation3(_esriGeometry.IMSegmentation3):
    _IID = uuid.UUID('58ad0d5d-393d-44aa-9797-6e50d06ed524')
    def UpdateAllMsByMs(self, Origin, Scale, Offset, ignoreGaps):
        '''Method IMSegmentation3.UpdateAllMsByMs

           INPUTS
            Origin              : IPoint*
            Scale               : double
            Offset              : double
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation3, self).UpdateAllMsByMs(Origin, Scale, Offset, ignoreGaps)
    def GetNormalsAtM(self, M, Length):
        '''Method IMSegmentation3.GetNormalsAtM

           INPUTS
            M                   : double
            Length              : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation3, self).GetNormalsAtM(M, Length)
    def get_MMonotonicity(self):
        '''Method IMSegmentation3.get_MMonotonicity

           OUTPUT
            monotonicityDetails : long*'''
        return super(IMSegmentation3, self).get_MMonotonicity()
    def QueryFirstLastM(self):
        '''Method IMSegmentation3.QueryFirstLastM

           OUTPUTS
            firstM              : double*
            lastM               : double*'''
        return super(IMSegmentation3, self).QueryFirstLastM()
    def OrientByMs(self):
        '''Method IMSegmentation3.OrientByMs'''
        return super(IMSegmentation3, self).OrientByMs()
    def SetMsAsDistance2(self, Origin, Scale, Offset, ignoreGaps):
        '''Method IMSegmentation2.SetMsAsDistance2 (from IMSegmentation2)

           INPUTS
            Origin              : IPoint*
            Scale               : double
            Offset              : double
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation3, self).SetMsAsDistance2(Origin, Scale, Offset, ignoreGaps)
    def UpdateMsByDistance(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow, ignoreGaps):
        '''Method IMSegmentation2.UpdateMsByDistance (from IMSegmentation2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long
            fromM               : double
            toM                 : double
            updateHow           : long
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation3, self).UpdateMsByDistance(fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow, ignoreGaps)
    def UpdateMsByMs(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow):
        '''Method IMSegmentation2.UpdateMsByMs (from IMSegmentation2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long
            fromM               : double
            toM                 : double
            updateHow           : long'''
        return super(IMSegmentation3, self).UpdateMsByMs(fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow)
    def CalibrateByDistance(self, Points, updateHow, ignoreGaps, cutoffDistance):
        '''Method IMSegmentation2.CalibrateByDistance (from IMSegmentation2)

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            ignoreGaps          : VARIANT_BOOL
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation3, self).CalibrateByDistance(Points, updateHow, ignoreGaps, cutoffDistance)
    def CalibrateByMs(self, Points, updateHow, cutoffDistance):
        '''Method IMSegmentation2.CalibrateByMs (from IMSegmentation2)

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation3, self).CalibrateByMs(Points, updateHow, cutoffDistance)
    def GetSubcurveBetweenMsEx(self, fromM, toM):
        '''Method IMSegmentation2.GetSubcurveBetweenMsEx (from IMSegmentation2)

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUTS
            fromMDetails        : long*
            toMDetails          : long*
            result              : IGeometryCollection**'''
        return super(IMSegmentation3, self).GetSubcurveBetweenMsEx(fromM, toM)
    def get_MMonotonic(self):
        '''Method IMSegmentation.get_MMonotonic (from IMSegmentation)

           OUTPUT
            MMonotonic          : esriMMonotonicEnum*'''
        return super(IMSegmentation3, self).get_MMonotonic()
    def GetMsAtDistance(self, distance, asRatio):
        '''Method IMSegmentation.GetMsAtDistance (from IMSegmentation)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            ms                  : VARIANT*'''
        return super(IMSegmentation3, self).GetMsAtDistance(distance, asRatio)
    def InsertMAtDistance(self, M, distance, asRatio, createPart):
        '''Method IMSegmentation.InsertMAtDistance (from IMSegmentation)

           INPUTS
            M                   : double
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IMSegmentation3, self).InsertMAtDistance(M, distance, asRatio, createPart)
    def GetDistancesAtM(self, asRatio, M):
        '''Method IMSegmentation.GetDistancesAtM (from IMSegmentation)

           INPUTS
            asRatio             : VARIANT_BOOL
            M                   : double

           OUTPUT
            distances           : VARIANT*'''
        return super(IMSegmentation3, self).GetDistancesAtM(asRatio, M)
    def ReverseMsOrder(self):
        '''Method IMSegmentation.ReverseMsOrder (from IMSegmentation)'''
        return super(IMSegmentation3, self).ReverseMsOrder()
    def InterpolateMsBetween(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.InterpolateMsBetween (from IMSegmentation)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation3, self).InterpolateMsBetween(fromPart, FromPoint, toPart, ToPoint)
    def SetAndInterpolateMsBetween(self, fromM, toM):
        '''Method IMSegmentation.SetAndInterpolateMsBetween (from IMSegmentation)

           INPUTS
            fromM               : double
            toM                 : double'''
        return super(IMSegmentation3, self).SetAndInterpolateMsBetween(fromM, toM)
    def SetMsAsDistance(self, asRatio):
        '''Method IMSegmentation.SetMsAsDistance (from IMSegmentation)

           INPUT
            asRatio             : VARIANT_BOOL'''
        return super(IMSegmentation3, self).SetMsAsDistance(asRatio)
    def ExtrapolateMs(self, extrapolationStyle, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.ExtrapolateMs (from IMSegmentation)

           INPUTS
            extrapolationStyle  : esriExtrapolationEnum
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation3, self).ExtrapolateMs(extrapolationStyle, fromPart, FromPoint, toPart, ToPoint)
    def CalculateNonSimpleMs(self):
        '''Method IMSegmentation.CalculateNonSimpleMs (from IMSegmentation)'''
        return super(IMSegmentation3, self).CalculateNonSimpleMs()
    def GetPointsAtM(self, M, lateralOffset):
        '''Method IMSegmentation.GetPointsAtM (from IMSegmentation)

           INPUTS
            M                   : double
            lateralOffset       : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation3, self).GetPointsAtM(M, lateralOffset)
    def GetSubcurveBetweenMs(self, fromM, toM):
        '''Method IMSegmentation.GetSubcurveBetweenMs (from IMSegmentation)

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation3, self).GetSubcurveBetweenMs(fromM, toM)
    def get_MMin(self):
        '''Method IMCollection.get_MMin (from IMCollection)

           OUTPUT
            outMMin             : double*'''
        return super(IMSegmentation3, self).get_MMin()
    def get_MMax(self):
        '''Method IMCollection.get_MMax (from IMCollection)

           OUTPUT
            outMMax             : double*'''
        return super(IMSegmentation3, self).get_MMax()
    def MultiplyMs(self, factor):
        '''Method IMCollection.MultiplyMs (from IMCollection)

           INPUT
            factor              : double'''
        return super(IMSegmentation3, self).MultiplyMs(factor)
    def OffsetMs(self, Offset):
        '''Method IMCollection.OffsetMs (from IMCollection)

           INPUT
            Offset              : double'''
        return super(IMSegmentation3, self).OffsetMs(Offset)
    MMax = property(get_MMax, None, None)
    MMin = property(get_MMin, None, None)
    MMonotonic = property(get_MMonotonic, None, None)
    MMonotonicity = property(get_MMonotonicity, None, None)

class IMSegmentation4(_esriGeometry.IMSegmentation4):
    _IID = uuid.UUID('0aa29b2f-a1ad-448c-9b13-2aa06d14c022')
    def CalibrateByDistance3D(self, Points, updateHow, ignoreGaps, cutoffDistance):
        '''Method IMSegmentation4.CalibrateByDistance3D

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            ignoreGaps          : VARIANT_BOOL
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation4, self).CalibrateByDistance3D(Points, updateHow, ignoreGaps, cutoffDistance)
    def CalibrateByMs3D(self, Points, updateHow, cutoffDistance):
        '''Method IMSegmentation4.CalibrateByMs3D

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation4, self).CalibrateByMs3D(Points, updateHow, cutoffDistance)
    def GetDistancesAtM3D(self, asRatio, M):
        '''Method IMSegmentation4.GetDistancesAtM3D

           INPUTS
            asRatio             : VARIANT_BOOL
            M                   : double

           OUTPUT
            distances           : VARIANT*'''
        return super(IMSegmentation4, self).GetDistancesAtM3D(asRatio, M)
    def GetMsAtDistance3D(self, distance, asRatio):
        '''Method IMSegmentation4.GetMsAtDistance3D

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            ms                  : VARIANT*'''
        return super(IMSegmentation4, self).GetMsAtDistance3D(distance, asRatio)
    def InterpolateMsBetween3D(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation4.InterpolateMsBetween3D

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation4, self).InterpolateMsBetween3D(fromPart, FromPoint, toPart, ToPoint)
    def SetAndInterpolateMsBetween3D(self, fromM, toM):
        '''Method IMSegmentation4.SetAndInterpolateMsBetween3D

           INPUTS
            fromM               : double
            toM                 : double'''
        return super(IMSegmentation4, self).SetAndInterpolateMsBetween3D(fromM, toM)
    def InsertMAtDistance3D(self, M, distance, asRatio, createPart):
        '''Method IMSegmentation4.InsertMAtDistance3D

           INPUTS
            M                   : double
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IMSegmentation4, self).InsertMAtDistance3D(M, distance, asRatio, createPart)
    def GetPointsAtM3D(self, M, Offset):
        '''Method IMSegmentation4.GetPointsAtM3D

           INPUTS
            M                   : double
            Offset              : IVector3D*

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation4, self).GetPointsAtM3D(M, Offset)
    def GetSubcurveBetweenMs3D(self, fromM, toM):
        '''Method IMSegmentation4.GetSubcurveBetweenMs3D

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation4, self).GetSubcurveBetweenMs3D(fromM, toM)
    def GetSubcurveBetweenMsEx3D(self, fromM, toM):
        '''Method IMSegmentation4.GetSubcurveBetweenMsEx3D

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUTS
            fromMDetails        : long*
            toMDetails          : long*
            result              : IGeometryCollection**'''
        return super(IMSegmentation4, self).GetSubcurveBetweenMsEx3D(fromM, toM)
    def ExtrapolateMs3D(self, extrapolationStyle, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation4.ExtrapolateMs3D

           INPUTS
            extrapolationStyle  : esriExtrapolationEnum
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation4, self).ExtrapolateMs3D(extrapolationStyle, fromPart, FromPoint, toPart, ToPoint)
    def SetMsAsDistance3D(self, asRatio):
        '''Method IMSegmentation4.SetMsAsDistance3D

           INPUT
            asRatio             : VARIANT_BOOL'''
        return super(IMSegmentation4, self).SetMsAsDistance3D(asRatio)
    def UpdateAllMsByMs(self, Origin, Scale, Offset, ignoreGaps):
        '''Method IMSegmentation3.UpdateAllMsByMs (from IMSegmentation3)

           INPUTS
            Origin              : IPoint*
            Scale               : double
            Offset              : double
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation4, self).UpdateAllMsByMs(Origin, Scale, Offset, ignoreGaps)
    def GetNormalsAtM(self, M, Length):
        '''Method IMSegmentation3.GetNormalsAtM (from IMSegmentation3)

           INPUTS
            M                   : double
            Length              : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation4, self).GetNormalsAtM(M, Length)
    def get_MMonotonicity(self):
        '''Method IMSegmentation3.get_MMonotonicity (from IMSegmentation3)

           OUTPUT
            monotonicityDetails : long*'''
        return super(IMSegmentation4, self).get_MMonotonicity()
    def QueryFirstLastM(self):
        '''Method IMSegmentation3.QueryFirstLastM (from IMSegmentation3)

           OUTPUTS
            firstM              : double*
            lastM               : double*'''
        return super(IMSegmentation4, self).QueryFirstLastM()
    def OrientByMs(self):
        '''Method IMSegmentation3.OrientByMs (from IMSegmentation3)'''
        return super(IMSegmentation4, self).OrientByMs()
    def SetMsAsDistance2(self, Origin, Scale, Offset, ignoreGaps):
        '''Method IMSegmentation2.SetMsAsDistance2 (from IMSegmentation2)

           INPUTS
            Origin              : IPoint*
            Scale               : double
            Offset              : double
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation4, self).SetMsAsDistance2(Origin, Scale, Offset, ignoreGaps)
    def UpdateMsByDistance(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow, ignoreGaps):
        '''Method IMSegmentation2.UpdateMsByDistance (from IMSegmentation2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long
            fromM               : double
            toM                 : double
            updateHow           : long
            ignoreGaps          : VARIANT_BOOL'''
        return super(IMSegmentation4, self).UpdateMsByDistance(fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow, ignoreGaps)
    def UpdateMsByMs(self, fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow):
        '''Method IMSegmentation2.UpdateMsByMs (from IMSegmentation2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long
            fromM               : double
            toM                 : double
            updateHow           : long'''
        return super(IMSegmentation4, self).UpdateMsByMs(fromPart, FromPoint, toPart, ToPoint, fromM, toM, updateHow)
    def CalibrateByDistance(self, Points, updateHow, ignoreGaps, cutoffDistance):
        '''Method IMSegmentation2.CalibrateByDistance (from IMSegmentation2)

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            ignoreGaps          : VARIANT_BOOL
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation4, self).CalibrateByDistance(Points, updateHow, ignoreGaps, cutoffDistance)
    def CalibrateByMs(self, Points, updateHow, cutoffDistance):
        '''Method IMSegmentation2.CalibrateByMs (from IMSegmentation2)

           INPUTS
            Points              : IEnumVertex*
            updateHow           : long
            cutoffDistance      : double

           OUTPUT
            splitPoints         : IEnumSplitPoint**'''
        return super(IMSegmentation4, self).CalibrateByMs(Points, updateHow, cutoffDistance)
    def GetSubcurveBetweenMsEx(self, fromM, toM):
        '''Method IMSegmentation2.GetSubcurveBetweenMsEx (from IMSegmentation2)

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUTS
            fromMDetails        : long*
            toMDetails          : long*
            result              : IGeometryCollection**'''
        return super(IMSegmentation4, self).GetSubcurveBetweenMsEx(fromM, toM)
    def get_MMonotonic(self):
        '''Method IMSegmentation.get_MMonotonic (from IMSegmentation)

           OUTPUT
            MMonotonic          : esriMMonotonicEnum*'''
        return super(IMSegmentation4, self).get_MMonotonic()
    def GetMsAtDistance(self, distance, asRatio):
        '''Method IMSegmentation.GetMsAtDistance (from IMSegmentation)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            ms                  : VARIANT*'''
        return super(IMSegmentation4, self).GetMsAtDistance(distance, asRatio)
    def InsertMAtDistance(self, M, distance, asRatio, createPart):
        '''Method IMSegmentation.InsertMAtDistance (from IMSegmentation)

           INPUTS
            M                   : double
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IMSegmentation4, self).InsertMAtDistance(M, distance, asRatio, createPart)
    def GetDistancesAtM(self, asRatio, M):
        '''Method IMSegmentation.GetDistancesAtM (from IMSegmentation)

           INPUTS
            asRatio             : VARIANT_BOOL
            M                   : double

           OUTPUT
            distances           : VARIANT*'''
        return super(IMSegmentation4, self).GetDistancesAtM(asRatio, M)
    def ReverseMsOrder(self):
        '''Method IMSegmentation.ReverseMsOrder (from IMSegmentation)'''
        return super(IMSegmentation4, self).ReverseMsOrder()
    def InterpolateMsBetween(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.InterpolateMsBetween (from IMSegmentation)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation4, self).InterpolateMsBetween(fromPart, FromPoint, toPart, ToPoint)
    def SetAndInterpolateMsBetween(self, fromM, toM):
        '''Method IMSegmentation.SetAndInterpolateMsBetween (from IMSegmentation)

           INPUTS
            fromM               : double
            toM                 : double'''
        return super(IMSegmentation4, self).SetAndInterpolateMsBetween(fromM, toM)
    def SetMsAsDistance(self, asRatio):
        '''Method IMSegmentation.SetMsAsDistance (from IMSegmentation)

           INPUT
            asRatio             : VARIANT_BOOL'''
        return super(IMSegmentation4, self).SetMsAsDistance(asRatio)
    def ExtrapolateMs(self, extrapolationStyle, fromPart, FromPoint, toPart, ToPoint):
        '''Method IMSegmentation.ExtrapolateMs (from IMSegmentation)

           INPUTS
            extrapolationStyle  : esriExtrapolationEnum
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long'''
        return super(IMSegmentation4, self).ExtrapolateMs(extrapolationStyle, fromPart, FromPoint, toPart, ToPoint)
    def CalculateNonSimpleMs(self):
        '''Method IMSegmentation.CalculateNonSimpleMs (from IMSegmentation)'''
        return super(IMSegmentation4, self).CalculateNonSimpleMs()
    def GetPointsAtM(self, M, lateralOffset):
        '''Method IMSegmentation.GetPointsAtM (from IMSegmentation)

           INPUTS
            M                   : double
            lateralOffset       : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation4, self).GetPointsAtM(M, lateralOffset)
    def GetSubcurveBetweenMs(self, fromM, toM):
        '''Method IMSegmentation.GetSubcurveBetweenMs (from IMSegmentation)

           INPUTS
            fromM               : double
            toM                 : double

           OUTPUT
            result              : IGeometryCollection**'''
        return super(IMSegmentation4, self).GetSubcurveBetweenMs(fromM, toM)
    def get_MMin(self):
        '''Method IMCollection.get_MMin (from IMCollection)

           OUTPUT
            outMMin             : double*'''
        return super(IMSegmentation4, self).get_MMin()
    def get_MMax(self):
        '''Method IMCollection.get_MMax (from IMCollection)

           OUTPUT
            outMMax             : double*'''
        return super(IMSegmentation4, self).get_MMax()
    def MultiplyMs(self, factor):
        '''Method IMCollection.MultiplyMs (from IMCollection)

           INPUT
            factor              : double'''
        return super(IMSegmentation4, self).MultiplyMs(factor)
    def OffsetMs(self, Offset):
        '''Method IMCollection.OffsetMs (from IMCollection)

           INPUT
            Offset              : double'''
        return super(IMSegmentation4, self).OffsetMs(Offset)
    MMax = property(get_MMax, None, None)
    MMin = property(get_MMin, None, None)
    MMonotonic = property(get_MMonotonic, None, None)
    MMonotonicity = property(get_MMonotonicity, None, None)

class IWin32Shape(_esriGeometry.IWin32Shape):
    _IID = uuid.UUID('c1f45030-5836-11d0-a8f5-00608c85ede5')
    def ExportToWin32Shape(self, Transform, displayExtent, compatibleBuffer):
        '''Method IWin32Shape.ExportToWin32Shape

           INPUTS
            Transform           : ITransformation*
            displayExtent       : IEnvelope*
            compatibleBuffer    : VARIANT_BOOL

           OUTPUTS
            byteCount           : long*
            byteBuffer          : unsignedchar**
            dice                : VARIANT_BOOL*'''
        return super(IWin32Shape, self).ExportToWin32Shape(Transform, displayExtent, compatibleBuffer)

class IWin32Shape2(_esriGeometry.IWin32Shape2):
    _IID = uuid.UUID('ab5eb1e9-90cc-11d4-9f6a-00c04f6bdf0d')
    def ExportToWin32ShapeEx(self, modifyTangents, Transform, clipShape, compatibleBuffer):
        '''Method IWin32Shape2.ExportToWin32ShapeEx

           INPUTS
            modifyTangents      : VARIANT_BOOL
            Transform           : ITransformation*
            clipShape           : IGeometry*
            compatibleBuffer    : VARIANT_BOOL

           OUTPUTS
            byteCount           : long*
            byteBuffer          : unsignedchar**
            dice                : VARIANT_BOOL*'''
        return super(IWin32Shape2, self).ExportToWin32ShapeEx(modifyTangents, Transform, clipShape, compatibleBuffer)
    def ExportToWin32Shape(self, Transform, displayExtent, compatibleBuffer):
        '''Method IWin32Shape.ExportToWin32Shape (from IWin32Shape)

           INPUTS
            Transform           : ITransformation*
            displayExtent       : IEnvelope*
            compatibleBuffer    : VARIANT_BOOL

           OUTPUTS
            byteCount           : long*
            byteBuffer          : unsignedchar**
            dice                : VARIANT_BOOL*'''
        return super(IWin32Shape2, self).ExportToWin32Shape(Transform, displayExtent, compatibleBuffer)

class ICurve(_esriGeometry.ICurve):
    _IID = uuid.UUID('1b077916-38c5-11d0-92d2-00805f7c28b0')

    def __init__(self, *args, **kw):
        super(ICurve, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Length(self):
        '''Method ICurve.get_Length

           OUTPUT
            Length              : double*'''
        return super(ICurve, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint

           OUTPUT
            from                : IPoint**'''
        return super(ICurve, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint

           INPUT
            from                : IPoint*'''
        return super(ICurve, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint

           INPUT
            from                : IPoint*'''
        return super(ICurve, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint

           OUTPUT
            to                  : IPoint**'''
        return super(ICurve, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint

           INPUT
            to                  : IPoint*'''
        return super(ICurve, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint

           INPUT
            to                  : IPoint*'''
        return super(ICurve, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ICurve, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ICurve, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ICurve, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ICurve, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ICurve, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation'''
        return super(ICurve, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ICurve, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ICurve, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ICurve, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ICurve, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ICurve, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ICurve, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ICurve, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ICurve, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ICurve, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ICurve, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ICurve, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ICurve, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ICurve, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class ILine(_esriGeometry.ILine):
    _IID = uuid.UUID('fea4c71c-c5ae-11d0-8307-0000f8034032')

    def __init__(self, *args, **kw):
        super(ILine, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutCoords(self, From, to):
        '''Method ILine.PutCoords

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ILine, self).PutCoords(From, to)
    def QueryCoords(self, From, to):
        '''Method ILine.QueryCoords

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ILine, self).QueryCoords(From, to)
    def get_Angle(self):
        '''Method ILine.get_Angle

           OUTPUT
            outAngle            : double*'''
        return super(ILine, self).get_Angle()
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ILine, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ILine, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ILine, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ILine, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ILine, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ILine, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ILine, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ILine, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ILine, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ILine, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ILine, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ILine, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ILine, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ILine, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ILine, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ILine, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ILine, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ILine, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ILine, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ILine, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ILine, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ILine, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ILine, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ILine, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ILine, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ILine, self).GeoNormalizeFromLongitude(Longitude)
    Angle = property(get_Angle, None, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IPolycurve(_esriGeometry.IPolycurve):
    _IID = uuid.UUID('4aff82e0-f984-11d1-bca7-0000f875bcce')

    def __init__(self, *args, **kw):
        super(IPolycurve, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolycurve, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolycurve, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolycurve, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolycurve, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolycurve, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolycurve, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolycurve, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolycurve, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolycurve, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolycurve, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolycurve, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolycurve, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolycurve, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolycurve, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolycurve, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolycurve, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolycurve, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolycurve, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolycurve, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolycurve, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolycurve, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolycurve, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolycurve, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolycurve, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolycurve, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolycurve, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolycurve, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolycurve, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolycurve, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolycurve, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolycurve, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolycurve, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IPath(_esriGeometry.IPath):
    _IID = uuid.UUID('0a82061c-95cb-11d0-82f7-0000f8034032')

    def __init__(self, *args, **kw):
        super(IPath, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Generalize(self, maxAllowableOffset):
        '''Method IPath.Generalize

           INPUT
            maxAllowableOffset  : double'''
        return super(IPath, self).Generalize(maxAllowableOffset)
    def Smooth(self, maxAllowableOffset):
        '''Method IPath.Smooth

           INPUT
            maxAllowableOffset  : double'''
        return super(IPath, self).Smooth(maxAllowableOffset)
    def SmoothLocal(self, vertexIndex):
        '''Method IPath.SmoothLocal

           INPUT
            vertexIndex         : long'''
        return super(IPath, self).SmoothLocal(vertexIndex)
    def QueryChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
        '''Method IPath.QueryChordLengthTangents

           INPUTS
            pointIndex          : long
            prevTangent         : IPoint*
            nextTangent         : IPoint*

           OUTPUTS
            prevSetByUser       : VARIANT_BOOL*
            nextSetByUser       : VARIANT_BOOL*'''
        return super(IPath, self).QueryChordLengthTangents(pointIndex, prevTangent, nextTangent)
    def SetChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
        '''Method IPath.SetChordLengthTangents

           INPUTS
            pointIndex          : long
            prevTangent         : IPoint*
            nextTangent         : IPoint*'''
        return super(IPath, self).SetChordLengthTangents(pointIndex, prevTangent, nextTangent)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPath, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPath, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPath, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPath, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPath, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPath, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPath, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPath, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPath, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPath, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPath, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPath, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPath, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPath, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPath, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPath, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPath, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPath, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPath, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPath, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPath, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPath, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPath, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPath, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPath, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPath, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IPolyline(_esriGeometry.IPolyline):
    _IID = uuid.UUID('f2485894-4cbd-11d1-834e-0000f8775be9')

    def __init__(self, *args, **kw):
        super(IPolyline, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Reshape(self, reshapeSource):
        '''Method IPolyline.Reshape

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline, self).Reshape(reshapeSource)
    def SimplifyNetwork(self):
        '''Method IPolyline.SimplifyNetwork'''
        return super(IPolyline, self).SimplifyNetwork()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolyline, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolyline, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolyline, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolyline, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolyline, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolyline, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolyline, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolyline, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolyline, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolyline, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolyline, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolyline, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolyline, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolyline, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolyline, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolyline, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolyline, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolyline, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolyline, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolyline, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolyline, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolyline, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolyline, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolyline, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class ISegment(_esriGeometry.ISegment):
    _IID = uuid.UUID('f2c4f0de-c5ae-11d0-8307-0000f8034032')

    def __init__(self, *args, **kw):
        super(ISegment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryAttributes(self, getAttributes, getAwareness, From, to):
        '''Method ISegment.QueryAttributes

           INPUTS
            getAttributes       : VARIANT_BOOL
            getAwareness        : VARIANT_BOOL
            from                : esriPointAttributes*
            to                  : esriPointAttributes*'''
        return super(ISegment, self).QueryAttributes(getAttributes, getAwareness, From, to)
    def PutAttributes(self, PutAttributes, putAwareness, From, to):
        '''Method ISegment.PutAttributes

           INPUTS
            PutAttributes       : VARIANT_BOOL
            putAwareness        : VARIANT_BOOL
            from                : esriPointAttributes*
            to                  : esriPointAttributes*'''
        return super(ISegment, self).PutAttributes(PutAttributes, putAwareness, From, to)
    def get_VertexAttributeAware(self, attributeType):
        '''Method ISegment.get_VertexAttributeAware

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeAware      : VARIANT_BOOL*'''
        return super(ISegment, self).get_VertexAttributeAware(attributeType)
    def put_VertexAttributeAware(self, attributeType, attributeAware):
        '''Method ISegment.put_VertexAttributeAware

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeAware      : VARIANT_BOOL'''
        return super(ISegment, self).put_VertexAttributeAware(attributeType, attributeAware)
    def HasVertexAttributes(self, attributeType):
        '''Method ISegment.HasVertexAttributes

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUTS
            hasFromAttribute    : VARIANT_BOOL*
            hasToAttribute      : VARIANT_BOOL*'''
        return super(ISegment, self).HasVertexAttributes(attributeType)
    def VertexAttributeOn(self, attributeType, attributeValue):
        '''Method ISegment.VertexAttributeOn

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double

           OUTPUT
            countInteractions   : long*'''
        return super(ISegment, self).VertexAttributeOn(attributeType, attributeValue)
    def QueryVertexAttributes(self, attributeType):
        '''Method ISegment.QueryVertexAttributes

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUTS
            fromAttribute       : double*
            toAttribute         : double*'''
        return super(ISegment, self).QueryVertexAttributes(attributeType)
    def PutVertexAttributes(self, attributeType, fromAttribute, toAttribute):
        '''Method ISegment.PutVertexAttributes

           INPUTS
            attributeType       : esriGeometryAttributes
            fromAttribute       : double
            toAttribute         : double'''
        return super(ISegment, self).PutVertexAttributes(attributeType, fromAttribute, toAttribute)
    def GetVertexAttributeAtDistance(self, attributeType, distance, asRatio):
        '''Method ISegment.GetVertexAttributeAtDistance

           INPUTS
            attributeType       : esriGeometryAttributes
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            attributeValue      : double*'''
        return super(ISegment, self).GetVertexAttributeAtDistance(attributeType, distance, asRatio)
    def GetDistanceAtVertexAttribute(self, attributeType, attributeValue, asRatio):
        '''Method ISegment.GetDistanceAtVertexAttribute

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            distance            : double*'''
        return super(ISegment, self).GetDistanceAtVertexAttribute(attributeType, attributeValue, asRatio)
    def SplitAtVertexAttribute(self, attributeType, attributeValue):
        '''Method ISegment.SplitAtVertexAttribute

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double

           OUTPUTS
            fromSegment         : ISegment**
            toSegment           : ISegment**'''
        return super(ISegment, self).SplitAtVertexAttribute(attributeType, attributeValue)
    def GetPointsAtVertexAttribute(self, attributeType, attributeValue, lateralOffset):
        '''Method ISegment.GetPointsAtVertexAttribute

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double
            lateralOffset       : double

           OUTPUT
            outPoints           : IPointCollection**'''
        return super(ISegment, self).GetPointsAtVertexAttribute(attributeType, attributeValue, lateralOffset)
    def GetSubSegmentBetweenVertexAttributes(self, attributeType, fromAttribute, toAttribute):
        '''Method ISegment.GetSubSegmentBetweenVertexAttributes

           INPUTS
            attributeType       : esriGeometryAttributes
            fromAttribute       : double
            toAttribute         : double

           OUTPUT
            outSegment          : ISegment**'''
        return super(ISegment, self).GetSubSegmentBetweenVertexAttributes(attributeType, fromAttribute, toAttribute)
    def InterpolateVertexAttributes(self, distanceAlongSegment, asRatio, atPoint):
        '''Method ISegment.InterpolateVertexAttributes

           INPUTS
            distanceAlongSegment: double
            asRatio             : VARIANT_BOOL
            atPoint             : IPoint*'''
        return super(ISegment, self).InterpolateVertexAttributes(distanceAlongSegment, asRatio, atPoint)
    def SynchronizeEmptyAttributes(self, toSegment):
        '''Method ISegment.SynchronizeEmptyAttributes

           INPUT
            toSegment           : ISegment*'''
        return super(ISegment, self).SynchronizeEmptyAttributes(toSegment)
    def QueryCurvature(self, DistanceAlongCurve, asRatio, unitVector):
        '''Method ISegment.QueryCurvature

           INPUTS
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            unitVector          : ILine*

           OUTPUT
            curvature           : double*'''
        return super(ISegment, self).QueryCurvature(DistanceAlongCurve, asRatio, unitVector)
    def ReturnTurnDirection(self, otherSegment):
        '''Method ISegment.ReturnTurnDirection

           INPUT
            otherSegment        : ISegment*

           OUTPUT
            turnDirection       : long*'''
        return super(ISegment, self).ReturnTurnDirection(otherSegment)
    def EnvelopeIntersection(self, intersectionEnvelope, boundaryOverlap):
        '''Method ISegment.EnvelopeIntersection

           INPUTS
            intersectionEnvelope: IEnvelope*
            boundaryOverlap     : VARIANT_BOOL

           OUTPUTS
            segmentParams       : double*
            envelopeDistances   : double*
            numIntersections    : long*
            outcode             : long*'''
        return super(ISegment, self).EnvelopeIntersection(intersectionEnvelope, boundaryOverlap)
    def QueryAreaCorrection(self):
        '''Method ISegment.QueryAreaCorrection

           OUTPUT
            areaCorrection      : double*'''
        return super(ISegment, self).QueryAreaCorrection()
    def QueryCentroidCorrection(self, weightedCentroidX, weightedCentroidY, areaCorrection):
        '''Method ISegment.QueryCentroidCorrection

           INPUTS
            weightedCentroidX   : double*
            weightedCentroidY   : double*
            areaCorrection      : double*'''
        return super(ISegment, self).QueryCentroidCorrection(weightedCentroidX, weightedCentroidY, areaCorrection)
    def QueryWKSEnvelope(self, Envelope):
        '''Method ISegment.QueryWKSEnvelope

           INPUT
            Envelope            : WKSEnvelope*'''
        return super(ISegment, self).QueryWKSEnvelope(Envelope)
    def HorizontalIntersectionCount(self, p):
        '''Method ISegment.HorizontalIntersectionCount

           INPUT
            p                   : WKSPoint*

           OUTPUTS
            pointOnLine         : VARIANT_BOOL*
            numIntersections    : long*'''
        return super(ISegment, self).HorizontalIntersectionCount(p)
    def SplitAtDistance(self, distances, asRatio):
        '''Method ISegment.SplitAtDistance

           INPUTS
            distances           : double
            asRatio             : VARIANT_BOOL

           OUTPUTS
            fromSegment         : ISegment**
            toSegment           : ISegment**'''
        return super(ISegment, self).SplitAtDistance(distances, asRatio)
    def SplitDivideLength(self, Offset, Length, asRatio, numSplitSegments, splitSegments):
        '''Method ISegment.SplitDivideLength

           INPUTS
            Offset              : double
            Length              : double
            asRatio             : VARIANT_BOOL
            numSplitSegments    : long*
            splitSegments       : ISegment**'''
        return super(ISegment, self).SplitDivideLength(Offset, Length, asRatio, numSplitSegments, splitSegments)
    def Densify(self, cInSlots, maxDeviation):
        '''Method ISegment.Densify

           INPUTS
            cInSlots            : long
            maxDeviation        : double

           OUTPUTS
            pcOutSegments       : long*
            segments            : ILine**'''
        return super(ISegment, self).Densify(cInSlots, maxDeviation)
    def MaxDistanceFromLine(self, baseFrom, baseTo, minOffset, fromArcDistance, toArcDistance, maxOffset, atArcDistance, farPoint):
        '''Method ISegment.MaxDistanceFromLine

           INPUTS
            baseFrom            : WKSPoint*
            baseTo              : WKSPoint*
            minOffset           : double
            fromArcDistance     : double
            toArcDistance       : double
            maxOffset           : double*
            atArcDistance       : double*
            farPoint            : WKSPoint*'''
        return super(ISegment, self).MaxDistanceFromLine(baseFrom, baseTo, minOffset, fromArcDistance, toArcDistance, maxOffset, atArcDistance, farPoint)
    def ConvertDistanceMeasureToRatio(self, distanceMeasure, distanceRatio):
        '''Method ISegment.ConvertDistanceMeasureToRatio

           INPUTS
            distanceMeasure     : double
            distanceRatio       : double*'''
        return super(ISegment, self).ConvertDistanceMeasureToRatio(distanceMeasure, distanceRatio)
    def QueryWKSFromPoint(self):
        '''Method ISegment.QueryWKSFromPoint

           OUTPUT
            p                   : WKSPoint*'''
        return super(ISegment, self).QueryWKSFromPoint()
    def QueryWKSToPoint(self):
        '''Method ISegment.QueryWKSToPoint

           OUTPUT
            p                   : WKSPoint*'''
        return super(ISegment, self).QueryWKSToPoint()
    def GeographicShift(self, splitLongitude):
        '''Method ISegment.GeographicShift

           INPUT
            splitLongitude      : double'''
        return super(ISegment, self).GeographicShift(splitLongitude)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ISegment, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ISegment, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ISegment, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ISegment, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ISegment, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ISegment, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ISegment, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ISegment, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ISegment, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ISegment, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ISegment, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ISegment, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ISegment, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ISegment, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ISegment, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ISegment, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ISegment, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ISegment, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ISegment, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ISegment, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ISegment, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ISegment, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ISegment, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ISegment, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ISegment, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ISegment, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    VertexAttributeAware = property(None, put_VertexAttributeAware, None)
    VertexAttributeAware = IndexProperty(get_VertexAttributeAware, None)

class IRing(_esriGeometry.IRing):
    _IID = uuid.UUID('592121ae-4cc8-11d1-834e-0000f8775be9')

    def __init__(self, *args, **kw):
        super(IRing, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsExterior(self):
        '''Method IRing.get_IsExterior

           OUTPUT
            IsExterior          : VARIANT_BOOL*'''
        return super(IRing, self).get_IsExterior()
    def Reshape(self, reshapeSource):
        '''Method IRing.Reshape

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            reshapeHappened     : VARIANT_BOOL*'''
        return super(IRing, self).Reshape(reshapeSource)
    def Close(self):
        '''Method IRing.Close'''
        return super(IRing, self).Close()
    def GetSubcurveEx(self, fromDistance, toDistance, asRatio, isCCW, useRingOrientation):
        '''Method IRing.GetSubcurveEx

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            useRingOrientation  : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IRing, self).GetSubcurveEx(fromDistance, toDistance, asRatio, isCCW, useRingOrientation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPath.Generalize (from IPath)

           INPUT
            maxAllowableOffset  : double'''
        return super(IRing, self).Generalize(maxAllowableOffset)
    def Smooth(self, maxAllowableOffset):
        '''Method IPath.Smooth (from IPath)

           INPUT
            maxAllowableOffset  : double'''
        return super(IRing, self).Smooth(maxAllowableOffset)
    def SmoothLocal(self, vertexIndex):
        '''Method IPath.SmoothLocal (from IPath)

           INPUT
            vertexIndex         : long'''
        return super(IRing, self).SmoothLocal(vertexIndex)
    def QueryChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
        '''Method IPath.QueryChordLengthTangents (from IPath)

           INPUTS
            pointIndex          : long
            prevTangent         : IPoint*
            nextTangent         : IPoint*

           OUTPUTS
            prevSetByUser       : VARIANT_BOOL*
            nextSetByUser       : VARIANT_BOOL*'''
        return super(IRing, self).QueryChordLengthTangents(pointIndex, prevTangent, nextTangent)
    def SetChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
        '''Method IPath.SetChordLengthTangents (from IPath)

           INPUTS
            pointIndex          : long
            prevTangent         : IPoint*
            nextTangent         : IPoint*'''
        return super(IRing, self).SetChordLengthTangents(pointIndex, prevTangent, nextTangent)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IRing, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IRing, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IRing, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IRing, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IRing, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IRing, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IRing, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IRing, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IRing, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IRing, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IRing, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IRing, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IRing, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IRing, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IRing, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IRing, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IRing, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IRing, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IRing, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IRing, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IRing, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IRing, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IRing, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IRing, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IRing, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IRing, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsExterior = property(get_IsExterior, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IEnumSegment(_esriGeometry.IEnumSegment):
    _IID = uuid.UUID('c63faf0e-1040-11d1-a27d-0000f8775fbf')
    def NextEx(self):
        '''Method IEnumSegment.NextEx

           OUTPUT
            outSegment          : esriSegmentInfo*'''
        return super(IEnumSegment, self).NextEx()
    def Next(self):
        '''Method IEnumSegment.Next

           OUTPUTS
            outSegment          : ISegment**
            outPartIndex        : long*
            SegmentIndex        : long*'''
        return super(IEnumSegment, self).Next()
    def __iter__(self):
        try:
            super(IEnumSegment, self).Reset()
            val = super(IEnumSegment, self).Next()
            while any(val):
                yield val
                val = super(IEnumSegment, self).Next()
        except:
            pass
    def Skip(self, numSegments):
        '''Method IEnumSegment.Skip

           INPUT
            numSegments         : long'''
        return super(IEnumSegment, self).Skip(numSegments)
    def Reset(self):
        '''Method IEnumSegment.Reset'''
        return super(IEnumSegment, self).Reset()
    def Clone(self):
        '''Method IEnumSegment.Clone

           OUTPUT
            outEnumerator       : IEnumSegment**'''
        return super(IEnumSegment, self).Clone()
    def ResetToEnd(self):
        '''Method IEnumSegment.ResetToEnd'''
        return super(IEnumSegment, self).ResetToEnd()
    def Previous(self):
        '''Method IEnumSegment.Previous

           OUTPUTS
            outSegment          : ISegment**
            outPartIndex        : long*
            SegmentIndex        : long*'''
        return super(IEnumSegment, self).Previous()
    def SetAt(self, iPart, ISegment):
        '''Method IEnumSegment.SetAt

           INPUTS
            iPart               : long
            ISegment            : long'''
        return super(IEnumSegment, self).SetAt(iPart, ISegment)
    def NextInPartEx(self):
        '''Method IEnumSegment.NextInPartEx

           OUTPUT
            outSegment          : esriSegmentInfo*'''
        return super(IEnumSegment, self).NextInPartEx()
    def NextInPart(self):
        '''Method IEnumSegment.NextInPart

           OUTPUTS
            outSegment          : ISegment**
            OutSegmentIndex     : long*'''
        return super(IEnumSegment, self).NextInPart()
    def IsLastInPart(self):
        '''Method IEnumSegment.IsLastInPart

           OUTPUT
            IsLastInPart        : VARIANT_BOOL*'''
        return super(IEnumSegment, self).IsLastInPart()
    def get_IsRecycling(self):
        '''Method IEnumSegment.get_IsRecycling

           OUTPUT
            IsRecycling         : VARIANT_BOOL*'''
        return super(IEnumSegment, self).get_IsRecycling()
    IsRecycling = property(get_IsRecycling, None, None)

class IEnumCurve(_esriGeometry.IEnumCurve):
    _IID = uuid.UUID('a478c6a8-ddad-11d2-9f27-00c04f6bc8e8')

    def __init__(self, *args, **kw):
        super(IEnumCurve, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Clone(self):
        '''Method IEnumCurve.Clone

           OUTPUT
            outEnumerator       : IEnumCurve**'''
        return super(IEnumCurve, self).Clone()
    def Reset(self):
        '''Method IEnumCurve.Reset'''
        return super(IEnumCurve, self).Reset()
    def Next(self, distance):
        '''Method IEnumCurve.Next

           INPUT
            distance            : double'''
        return super(IEnumCurve, self).Next(distance)
    def get_Segment(self):
        '''Method IEnumCurve.get_Segment

           OUTPUT
            Segment             : ISegment**'''
        return super(IEnumCurve, self).get_Segment()
    def get_SegmentDistance(self):
        '''Method IEnumCurve.get_SegmentDistance

           OUTPUT
            SegmentDistance     : double*'''
        return super(IEnumCurve, self).get_SegmentDistance()
    def get_CurveDistance(self):
        '''Method IEnumCurve.get_CurveDistance

           OUTPUT
            CurveDistance       : double*'''
        return super(IEnumCurve, self).get_CurveDistance()
    def get_PartIndex(self):
        '''Method IEnumCurve.get_PartIndex

           OUTPUT
            PartIndex           : long*'''
        return super(IEnumCurve, self).get_PartIndex()
    def get_SegmentIndex(self):
        '''Method IEnumCurve.get_SegmentIndex

           OUTPUT
            SegmentIndex        : long*'''
        return super(IEnumCurve, self).get_SegmentIndex()
    def get_StopReason(self):
        '''Method IEnumCurve.get_StopReason

           OUTPUT
            StopReason          : esriCurveIteratorEnum*'''
        return super(IEnumCurve, self).get_StopReason()
    def put_StopOptions(self, StopOptions):
        '''Method IEnumCurve.put_StopOptions

           INPUT
            StopOptions         : esriCurveIteratorEnum'''
        return super(IEnumCurve, self).put_StopOptions(StopOptions)
    def get_StopOptions(self):
        '''Method IEnumCurve.get_StopOptions

           OUTPUT
            StopOptions         : esriCurveIteratorEnum*'''
        return super(IEnumCurve, self).get_StopOptions()
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method IEnumCurve.GetSubcurve

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            subcurve            : ICurve**'''
        return super(IEnumCurve, self).GetSubcurve(fromDistance, toDistance, asRatio)
    CurveDistance = property(get_CurveDistance, None, None)
    PartIndex = property(get_PartIndex, None, None)
    Segment = property(get_Segment, None, None)
    SegmentDistance = property(get_SegmentDistance, None, None)
    SegmentIndex = property(get_SegmentIndex, None, None)
    StopOptions = property(get_StopOptions, put_StopOptions, None)
    StopReason = property(get_StopReason, None, None)

class ISegmentCollection(_esriGeometry.ISegmentCollection):
    _IID = uuid.UUID('b3fe6b20-4fc2-11d1-834e-0000f8775be9')
    def get_SegmentCount(self):
        '''Method ISegmentCollection.get_SegmentCount

           OUTPUT
            cSegments           : long*'''
        return super(ISegmentCollection, self).get_SegmentCount()
    def get_Segment(self, i):
        '''Method ISegmentCollection.get_Segment

           INPUT
            i                   : long

           OUTPUT
            Segment             : ISegment**'''
        return super(ISegmentCollection, self).get_Segment(i)
    def AddSegment(self, inSegment, before, after):
        '''Method ISegmentCollection.AddSegment

           INPUTS
            inSegment           : ISegment*
            before              : VARIANT*
            after               : VARIANT*'''
        return super(ISegmentCollection, self).AddSegment(inSegment, before, after)
    def QuerySegments(self, Index, Count):
        '''Method ISegmentCollection.QuerySegments

           INPUTS
            Index               : long
            Count               : long

           OUTPUT
            segments            : ISegment**'''
        return super(ISegmentCollection, self).QuerySegments(Index, Count)
    def AddSegments(self, Count, newSegments):
        '''Method ISegmentCollection.AddSegments

           INPUTS
            Count               : long
            newSegments         : ISegment**'''
        return super(ISegmentCollection, self).AddSegments(Count, newSegments)
    def AddSegmentCollection(self, segments):
        '''Method ISegmentCollection.AddSegmentCollection

           INPUT
            segments            : ISegmentCollection*'''
        return super(ISegmentCollection, self).AddSegmentCollection(segments)
    def InsertSegments(self, Index, Count, newSegments):
        '''Method ISegmentCollection.InsertSegments

           INPUTS
            Index               : long
            Count               : long
            newSegments         : ISegment**'''
        return super(ISegmentCollection, self).InsertSegments(Index, Count, newSegments)
    def InsertSegmentCollection(self, Index, newSegments):
        '''Method ISegmentCollection.InsertSegmentCollection

           INPUTS
            Index               : long
            newSegments         : ISegmentCollection*'''
        return super(ISegmentCollection, self).InsertSegmentCollection(Index, newSegments)
    def InsertSegmentCollectionEx(self, Index, start, Count, newSegments):
        '''Method ISegmentCollection.InsertSegmentCollectionEx

           INPUTS
            Index               : long
            start               : long
            Count               : long
            newSegments         : ISegmentCollection*'''
        return super(ISegmentCollection, self).InsertSegmentCollectionEx(Index, start, Count, newSegments)
    def ReplaceSegments(self, Index, comingIn, goingAway, newSegments):
        '''Method ISegmentCollection.ReplaceSegments

           INPUTS
            Index               : long
            comingIn            : long
            goingAway           : long
            newSegments         : ISegment**'''
        return super(ISegmentCollection, self).ReplaceSegments(Index, comingIn, goingAway, newSegments)
    def ReplaceSegmentCollection(self, Index, goingAway, newSegments):
        '''Method ISegmentCollection.ReplaceSegmentCollection

           INPUTS
            Index               : long
            goingAway           : long
            newSegments         : ISegmentCollection*'''
        return super(ISegmentCollection, self).ReplaceSegmentCollection(Index, goingAway, newSegments)
    def RemoveSegments(self, Index, Count, closeGap):
        '''Method ISegmentCollection.RemoveSegments

           INPUTS
            Index               : long
            Count               : long
            closeGap            : VARIANT_BOOL'''
        return super(ISegmentCollection, self).RemoveSegments(Index, Count, closeGap)
    def SetCircle(self, cp, circleRadius):
        '''Method ISegmentCollection.SetCircle

           INPUTS
            cp                  : IPoint*
            circleRadius        : double'''
        return super(ISegmentCollection, self).SetCircle(cp, circleRadius)
    def SetRectangle(self, inEnvelope):
        '''Method ISegmentCollection.SetRectangle

           INPUT
            inEnvelope          : IEnvelope*'''
        return super(ISegmentCollection, self).SetRectangle(inEnvelope)
    def SetSegments(self, Count, newSegments):
        '''Method ISegmentCollection.SetSegments

           INPUTS
            Count               : long
            newSegments         : ISegment**'''
        return super(ISegmentCollection, self).SetSegments(Count, newSegments)
    def SetSegmentCollection(self, newSegments):
        '''Method ISegmentCollection.SetSegmentCollection

           INPUT
            newSegments         : ISegmentCollection*'''
        return super(ISegmentCollection, self).SetSegmentCollection(newSegments)
    def get_EnumSegments(self):
        '''Method ISegmentCollection.get_EnumSegments

           OUTPUT
            newSegmentEnumerator: IEnumSegment**'''
        return super(ISegmentCollection, self).get_EnumSegments()
    def get_EnumCurve(self):
        '''Method ISegmentCollection.get_EnumCurve

           OUTPUT
            newCurveEnumerator  : IEnumCurve**'''
        return super(ISegmentCollection, self).get_EnumCurve()
    def HasNonLinearSegments(self):
        '''Method ISegmentCollection.HasNonLinearSegments

           OUTPUT
            nonLinearSegments   : VARIANT_BOOL*'''
        return super(ISegmentCollection, self).HasNonLinearSegments()
    def get_IndexedEnumSegments(self, queryGeometry):
        '''Method ISegmentCollection.get_IndexedEnumSegments

           INPUT
            queryGeometry       : IGeometry*

           OUTPUT
            newIndexedSegmentEnumerator: IEnumSegment**'''
        return super(ISegmentCollection, self).get_IndexedEnumSegments(queryGeometry)
    def SynchronizeEmptyAttributes(self):
        '''Method ISegmentCollection.SynchronizeEmptyAttributes'''
        return super(ISegmentCollection, self).SynchronizeEmptyAttributes()
    def SegmentsChanged(self):
        '''Method ISegmentCollection.SegmentsChanged'''
        return super(ISegmentCollection, self).SegmentsChanged()
    EnumCurve = property(get_EnumCurve, None, None)
    EnumSegments = property(get_EnumSegments, None, None)
    SegmentCount = property(get_SegmentCount, None, None)
    IndexedEnumSegments = IndexProperty(get_IndexedEnumSegments, None)
    Segment = IndexProperty(get_Segment, None)

class ITransform2D(_esriGeometry.ITransform2D):
    _IID = uuid.UUID('3be78ad0-886e-11d1-bc78-0000f875bcce')
    def Move(self, dx, dy):
        '''Method ITransform2D.Move

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(ITransform2D, self).Move(dx, dy)
    def MoveVector(self, v):
        '''Method ITransform2D.MoveVector

           INPUT
            v                   : ILine*'''
        return super(ITransform2D, self).MoveVector(v)
    def Scale(self, Origin, sx, sy):
        '''Method ITransform2D.Scale

           INPUTS
            Origin              : IPoint*
            sx                  : double
            sy                  : double'''
        return super(ITransform2D, self).Scale(Origin, sx, sy)
    def Rotate(self, Origin, rotationAngle):
        '''Method ITransform2D.Rotate

           INPUTS
            Origin              : IPoint*
            rotationAngle       : double'''
        return super(ITransform2D, self).Rotate(Origin, rotationAngle)
    def Transform(self, direction, transformation):
        '''Method ITransform2D.Transform

           INPUTS
            direction           : esriTransformDirection
            transformation      : ITransformation*'''
        return super(ITransform2D, self).Transform(direction, transformation)

class ITopologicalSegment(_esriGeometry.ITopologicalSegment):
    _IID = uuid.UUID('4df409c0-2b14-11d2-bcbd-0000f875bcce')

    def __init__(self, *args, **kw):
        super(ITopologicalSegment, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_YAtX(self, p):
        '''Method ITopologicalSegment.get_YAtX

           INPUT
            p                   : WKSPoint*

           OUTPUT
            Y                   : double*'''
        return super(ITopologicalSegment, self).get_YAtX(p)
    def BreakOverlap(self, otherSegment, interpolator, busted, overlapKind):
        '''Method ITopologicalSegment.BreakOverlap

           INPUTS
            otherSegment        : ITopologicalSegment*
            interpolator        : ITopologicalSegment*
            busted              : ITopologicalSegment**
            overlapKind         : long*'''
        return super(ITopologicalSegment, self).BreakOverlap(otherSegment, interpolator, busted, overlapKind)
    def SplitYMonotonic(self, numSegments, segments, flipped):
        '''Method ITopologicalSegment.SplitYMonotonic

           INPUTS
            numSegments         : long*
            segments            : ITopologicalSegment**
            flipped             : VARIANT_BOOL*'''
        return super(ITopologicalSegment, self).SplitYMonotonic(numSegments, segments, flipped)
    def QueryAttributes(self, getAttributes, getAwareness, From, to):
        '''Method ISegment.QueryAttributes (from ISegment)

           INPUTS
            getAttributes       : VARIANT_BOOL
            getAwareness        : VARIANT_BOOL
            from                : esriPointAttributes*
            to                  : esriPointAttributes*'''
        return super(ITopologicalSegment, self).QueryAttributes(getAttributes, getAwareness, From, to)
    def PutAttributes(self, PutAttributes, putAwareness, From, to):
        '''Method ISegment.PutAttributes (from ISegment)

           INPUTS
            PutAttributes       : VARIANT_BOOL
            putAwareness        : VARIANT_BOOL
            from                : esriPointAttributes*
            to                  : esriPointAttributes*'''
        return super(ITopologicalSegment, self).PutAttributes(PutAttributes, putAwareness, From, to)
    def get_VertexAttributeAware(self, attributeType):
        '''Method ISegment.get_VertexAttributeAware (from ISegment)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeAware      : VARIANT_BOOL*'''
        return super(ITopologicalSegment, self).get_VertexAttributeAware(attributeType)
    def put_VertexAttributeAware(self, attributeType, attributeAware):
        '''Method ISegment.put_VertexAttributeAware (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeAware      : VARIANT_BOOL'''
        return super(ITopologicalSegment, self).put_VertexAttributeAware(attributeType, attributeAware)
    def HasVertexAttributes(self, attributeType):
        '''Method ISegment.HasVertexAttributes (from ISegment)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUTS
            hasFromAttribute    : VARIANT_BOOL*
            hasToAttribute      : VARIANT_BOOL*'''
        return super(ITopologicalSegment, self).HasVertexAttributes(attributeType)
    def VertexAttributeOn(self, attributeType, attributeValue):
        '''Method ISegment.VertexAttributeOn (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double

           OUTPUT
            countInteractions   : long*'''
        return super(ITopologicalSegment, self).VertexAttributeOn(attributeType, attributeValue)
    def QueryVertexAttributes(self, attributeType):
        '''Method ISegment.QueryVertexAttributes (from ISegment)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUTS
            fromAttribute       : double*
            toAttribute         : double*'''
        return super(ITopologicalSegment, self).QueryVertexAttributes(attributeType)
    def PutVertexAttributes(self, attributeType, fromAttribute, toAttribute):
        '''Method ISegment.PutVertexAttributes (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            fromAttribute       : double
            toAttribute         : double'''
        return super(ITopologicalSegment, self).PutVertexAttributes(attributeType, fromAttribute, toAttribute)
    def GetVertexAttributeAtDistance(self, attributeType, distance, asRatio):
        '''Method ISegment.GetVertexAttributeAtDistance (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            attributeValue      : double*'''
        return super(ITopologicalSegment, self).GetVertexAttributeAtDistance(attributeType, distance, asRatio)
    def GetDistanceAtVertexAttribute(self, attributeType, attributeValue, asRatio):
        '''Method ISegment.GetDistanceAtVertexAttribute (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            distance            : double*'''
        return super(ITopologicalSegment, self).GetDistanceAtVertexAttribute(attributeType, attributeValue, asRatio)
    def SplitAtVertexAttribute(self, attributeType, attributeValue):
        '''Method ISegment.SplitAtVertexAttribute (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double

           OUTPUTS
            fromSegment         : ISegment**
            toSegment           : ISegment**'''
        return super(ITopologicalSegment, self).SplitAtVertexAttribute(attributeType, attributeValue)
    def GetPointsAtVertexAttribute(self, attributeType, attributeValue, lateralOffset):
        '''Method ISegment.GetPointsAtVertexAttribute (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double
            lateralOffset       : double

           OUTPUT
            outPoints           : IPointCollection**'''
        return super(ITopologicalSegment, self).GetPointsAtVertexAttribute(attributeType, attributeValue, lateralOffset)
    def GetSubSegmentBetweenVertexAttributes(self, attributeType, fromAttribute, toAttribute):
        '''Method ISegment.GetSubSegmentBetweenVertexAttributes (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            fromAttribute       : double
            toAttribute         : double

           OUTPUT
            outSegment          : ISegment**'''
        return super(ITopologicalSegment, self).GetSubSegmentBetweenVertexAttributes(attributeType, fromAttribute, toAttribute)
    def InterpolateVertexAttributes(self, distanceAlongSegment, asRatio, atPoint):
        '''Method ISegment.InterpolateVertexAttributes (from ISegment)

           INPUTS
            distanceAlongSegment: double
            asRatio             : VARIANT_BOOL
            atPoint             : IPoint*'''
        return super(ITopologicalSegment, self).InterpolateVertexAttributes(distanceAlongSegment, asRatio, atPoint)
    def SynchronizeEmptyAttributes(self, toSegment):
        '''Method ISegment.SynchronizeEmptyAttributes (from ISegment)

           INPUT
            toSegment           : ISegment*'''
        return super(ITopologicalSegment, self).SynchronizeEmptyAttributes(toSegment)
    def QueryCurvature(self, DistanceAlongCurve, asRatio, unitVector):
        '''Method ISegment.QueryCurvature (from ISegment)

           INPUTS
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            unitVector          : ILine*

           OUTPUT
            curvature           : double*'''
        return super(ITopologicalSegment, self).QueryCurvature(DistanceAlongCurve, asRatio, unitVector)
    def ReturnTurnDirection(self, otherSegment):
        '''Method ISegment.ReturnTurnDirection (from ISegment)

           INPUT
            otherSegment        : ISegment*

           OUTPUT
            turnDirection       : long*'''
        return super(ITopologicalSegment, self).ReturnTurnDirection(otherSegment)
    def EnvelopeIntersection(self, intersectionEnvelope, boundaryOverlap):
        '''Method ISegment.EnvelopeIntersection (from ISegment)

           INPUTS
            intersectionEnvelope: IEnvelope*
            boundaryOverlap     : VARIANT_BOOL

           OUTPUTS
            segmentParams       : double*
            envelopeDistances   : double*
            numIntersections    : long*
            outcode             : long*'''
        return super(ITopologicalSegment, self).EnvelopeIntersection(intersectionEnvelope, boundaryOverlap)
    def QueryAreaCorrection(self):
        '''Method ISegment.QueryAreaCorrection (from ISegment)

           OUTPUT
            areaCorrection      : double*'''
        return super(ITopologicalSegment, self).QueryAreaCorrection()
    def QueryCentroidCorrection(self, weightedCentroidX, weightedCentroidY, areaCorrection):
        '''Method ISegment.QueryCentroidCorrection (from ISegment)

           INPUTS
            weightedCentroidX   : double*
            weightedCentroidY   : double*
            areaCorrection      : double*'''
        return super(ITopologicalSegment, self).QueryCentroidCorrection(weightedCentroidX, weightedCentroidY, areaCorrection)
    def QueryWKSEnvelope(self, Envelope):
        '''Method ISegment.QueryWKSEnvelope (from ISegment)

           INPUT
            Envelope            : WKSEnvelope*'''
        return super(ITopologicalSegment, self).QueryWKSEnvelope(Envelope)
    def HorizontalIntersectionCount(self, p):
        '''Method ISegment.HorizontalIntersectionCount (from ISegment)

           INPUT
            p                   : WKSPoint*

           OUTPUTS
            pointOnLine         : VARIANT_BOOL*
            numIntersections    : long*'''
        return super(ITopologicalSegment, self).HorizontalIntersectionCount(p)
    def SplitAtDistance(self, distances, asRatio):
        '''Method ISegment.SplitAtDistance (from ISegment)

           INPUTS
            distances           : double
            asRatio             : VARIANT_BOOL

           OUTPUTS
            fromSegment         : ISegment**
            toSegment           : ISegment**'''
        return super(ITopologicalSegment, self).SplitAtDistance(distances, asRatio)
    def SplitDivideLength(self, Offset, Length, asRatio, numSplitSegments, splitSegments):
        '''Method ISegment.SplitDivideLength (from ISegment)

           INPUTS
            Offset              : double
            Length              : double
            asRatio             : VARIANT_BOOL
            numSplitSegments    : long*
            splitSegments       : ISegment**'''
        return super(ITopologicalSegment, self).SplitDivideLength(Offset, Length, asRatio, numSplitSegments, splitSegments)
    def Densify(self, cInSlots, maxDeviation):
        '''Method ISegment.Densify (from ISegment)

           INPUTS
            cInSlots            : long
            maxDeviation        : double

           OUTPUTS
            pcOutSegments       : long*
            segments            : ILine**'''
        return super(ITopologicalSegment, self).Densify(cInSlots, maxDeviation)
    def MaxDistanceFromLine(self, baseFrom, baseTo, minOffset, fromArcDistance, toArcDistance, maxOffset, atArcDistance, farPoint):
        '''Method ISegment.MaxDistanceFromLine (from ISegment)

           INPUTS
            baseFrom            : WKSPoint*
            baseTo              : WKSPoint*
            minOffset           : double
            fromArcDistance     : double
            toArcDistance       : double
            maxOffset           : double*
            atArcDistance       : double*
            farPoint            : WKSPoint*'''
        return super(ITopologicalSegment, self).MaxDistanceFromLine(baseFrom, baseTo, minOffset, fromArcDistance, toArcDistance, maxOffset, atArcDistance, farPoint)
    def ConvertDistanceMeasureToRatio(self, distanceMeasure, distanceRatio):
        '''Method ISegment.ConvertDistanceMeasureToRatio (from ISegment)

           INPUTS
            distanceMeasure     : double
            distanceRatio       : double*'''
        return super(ITopologicalSegment, self).ConvertDistanceMeasureToRatio(distanceMeasure, distanceRatio)
    def QueryWKSFromPoint(self):
        '''Method ISegment.QueryWKSFromPoint (from ISegment)

           OUTPUT
            p                   : WKSPoint*'''
        return super(ITopologicalSegment, self).QueryWKSFromPoint()
    def QueryWKSToPoint(self):
        '''Method ISegment.QueryWKSToPoint (from ISegment)

           OUTPUT
            p                   : WKSPoint*'''
        return super(ITopologicalSegment, self).QueryWKSToPoint()
    def GeographicShift(self, splitLongitude):
        '''Method ISegment.GeographicShift (from ISegment)

           INPUT
            splitLongitude      : double'''
        return super(ITopologicalSegment, self).GeographicShift(splitLongitude)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ITopologicalSegment, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ITopologicalSegment, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ITopologicalSegment, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ITopologicalSegment, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ITopologicalSegment, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ITopologicalSegment, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ITopologicalSegment, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ITopologicalSegment, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ITopologicalSegment, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ITopologicalSegment, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ITopologicalSegment, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ITopologicalSegment, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ITopologicalSegment, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ITopologicalSegment, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ITopologicalSegment, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ITopologicalSegment, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ITopologicalSegment, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ITopologicalSegment, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ITopologicalSegment, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ITopologicalSegment, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ITopologicalSegment, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ITopologicalSegment, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ITopologicalSegment, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ITopologicalSegment, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ITopologicalSegment, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ITopologicalSegment, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    VertexAttributeAware = property(None, put_VertexAttributeAware, None)
    VertexAttributeAware = IndexProperty(get_VertexAttributeAware, None)
    YAtX = IndexProperty(get_YAtX, None)

class IEllipticArc(_esriGeometry.IEllipticArc):
    _IID = uuid.UUID('fa44c5f5-16c6-11d2-aa7a-00c04fa37ba4')

    def __init__(self, *args, **kw):
        super(IEllipticArc, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryCoords(self, ellipseStd, Center, From, to):
        '''Method IEllipticArc.QueryCoords

           INPUTS
            ellipseStd          : VARIANT_BOOL
            Center              : IPoint*
            from                : IPoint*
            to                  : IPoint*

           OUTPUTS
            rotationAngle       : double*
            minorMajorRatio     : double*
            isCCW               : VARIANT_BOOL*
            minor               : VARIANT_BOOL*'''
        return super(IEllipticArc, self).QueryCoords(ellipseStd, Center, From, to)
    def PutCoords(self, ellipseStd, Center, From, to, rotationAngle, minorMajorRatio, orientation):
        '''Method IEllipticArc.PutCoords

           INPUTS
            ellipseStd          : VARIANT_BOOL
            Center              : IPoint*
            from                : IPoint*
            to                  : IPoint*
            rotationAngle       : double
            minorMajorRatio     : double
            orientation         : esriArcOrientation'''
        return super(IEllipticArc, self).PutCoords(ellipseStd, Center, From, to, rotationAngle, minorMajorRatio, orientation)
    def QueryCoordsByAngle(self, ellipseStd, Center):
        '''Method IEllipticArc.QueryCoordsByAngle

           INPUTS
            ellipseStd          : VARIANT_BOOL
            Center              : IPoint*

           OUTPUTS
            FromAngle           : double*
            CentralAngle        : double*
            rotationAngle       : double*
            semiMajor           : double*
            minorMajorRatio     : double*'''
        return super(IEllipticArc, self).QueryCoordsByAngle(ellipseStd, Center)
    def PutCoordsByAngle(self, ellipseStd, Center, FromAngle, CentralAngle, rotationAngle, semiMajor, minorMajorRatio):
        '''Method IEllipticArc.PutCoordsByAngle

           INPUTS
            ellipseStd          : VARIANT_BOOL
            Center              : IPoint*
            FromAngle           : double
            CentralAngle        : double
            rotationAngle       : double
            semiMajor           : double
            minorMajorRatio     : double'''
        return super(IEllipticArc, self).PutCoordsByAngle(ellipseStd, Center, FromAngle, CentralAngle, rotationAngle, semiMajor, minorMajorRatio)
    def get_CenterPoint(self):
        '''Method IEllipticArc.get_CenterPoint

           OUTPUT
            Center              : IPoint**'''
        return super(IEllipticArc, self).get_CenterPoint()
    def QueryCenterPoint(self, Center):
        '''Method IEllipticArc.QueryCenterPoint

           INPUT
            Center              : IPoint*'''
        return super(IEllipticArc, self).QueryCenterPoint(Center)
    def GetAxes(self):
        '''Method IEllipticArc.GetAxes

           OUTPUTS
            semiMajor           : double*
            semiMinor           : double*
            minorMajorRatio     : double*'''
        return super(IEllipticArc, self).GetAxes()
    def PutAxes(self, semiMajor, minorMajorRatio):
        '''Method IEllipticArc.PutAxes

           INPUTS
            semiMajor           : double
            minorMajorRatio     : double'''
        return super(IEllipticArc, self).PutAxes(semiMajor, minorMajorRatio)
    def get_FromAngle(self, ellipseStd):
        '''Method IEllipticArc.get_FromAngle

           INPUT
            ellipseStd          : VARIANT_BOOL

           OUTPUT
            FromAngle           : double*'''
        return super(IEllipticArc, self).get_FromAngle(ellipseStd)
    def put_FromAngle(self, ellipseStd, FromAngle):
        '''Method IEllipticArc.put_FromAngle

           INPUTS
            ellipseStd          : VARIANT_BOOL
            FromAngle           : double'''
        return super(IEllipticArc, self).put_FromAngle(ellipseStd, FromAngle)
    def get_ToAngle(self, ellipseStd):
        '''Method IEllipticArc.get_ToAngle

           INPUT
            ellipseStd          : VARIANT_BOOL

           OUTPUT
            ToAngle             : double*'''
        return super(IEllipticArc, self).get_ToAngle(ellipseStd)
    def put_ToAngle(self, ellipseStd, ToAngle):
        '''Method IEllipticArc.put_ToAngle

           INPUTS
            ellipseStd          : VARIANT_BOOL
            ToAngle             : double'''
        return super(IEllipticArc, self).put_ToAngle(ellipseStd, ToAngle)
    def get_CentralAngle(self):
        '''Method IEllipticArc.get_CentralAngle

           OUTPUT
            CentralAngle        : double*'''
        return super(IEllipticArc, self).get_CentralAngle()
    def put_CentralAngle(self, CentralAngle):
        '''Method IEllipticArc.put_CentralAngle

           INPUT
            CentralAngle        : double'''
        return super(IEllipticArc, self).put_CentralAngle(CentralAngle)
    def get_IsPoint(self):
        '''Method IEllipticArc.get_IsPoint

           OUTPUT
            IsPoint             : VARIANT_BOOL*'''
        return super(IEllipticArc, self).get_IsPoint()
    def get_IsLine(self):
        '''Method IEllipticArc.get_IsLine

           OUTPUT
            IsLine              : VARIANT_BOOL*'''
        return super(IEllipticArc, self).get_IsLine()
    def get_IsCounterClockwise(self):
        '''Method IEllipticArc.get_IsCounterClockwise

           OUTPUT
            isCCW               : VARIANT_BOOL*'''
        return super(IEllipticArc, self).get_IsCounterClockwise()
    def put_IsCounterClockwise(self, isCCW):
        '''Method IEllipticArc.put_IsCounterClockwise

           INPUT
            isCCW               : VARIANT_BOOL'''
        return super(IEllipticArc, self).put_IsCounterClockwise(isCCW)
    def get_IsMinor(self):
        '''Method IEllipticArc.get_IsMinor

           OUTPUT
            IsMinor             : VARIANT_BOOL*'''
        return super(IEllipticArc, self).get_IsMinor()
    def put_IsMinor(self, IsMinor):
        '''Method IEllipticArc.put_IsMinor

           INPUT
            IsMinor             : VARIANT_BOOL'''
        return super(IEllipticArc, self).put_IsMinor(IsMinor)
    def Complement(self):
        '''Method IEllipticArc.Complement'''
        return super(IEllipticArc, self).Complement()
    def get_IsCircular(self):
        '''Method IEllipticArc.get_IsCircular

           OUTPUT
            IsCircular          : VARIANT_BOOL*'''
        return super(IEllipticArc, self).get_IsCircular()
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IEllipticArc, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IEllipticArc, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IEllipticArc, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IEllipticArc, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IEllipticArc, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IEllipticArc, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IEllipticArc, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IEllipticArc, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IEllipticArc, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IEllipticArc, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IEllipticArc, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IEllipticArc, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IEllipticArc, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IEllipticArc, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IEllipticArc, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IEllipticArc, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IEllipticArc, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IEllipticArc, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IEllipticArc, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IEllipticArc, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IEllipticArc, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IEllipticArc, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IEllipticArc, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IEllipticArc, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IEllipticArc, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IEllipticArc, self).GeoNormalizeFromLongitude(Longitude)
    CenterPoint = property(get_CenterPoint, None, None)
    CentralAngle = property(get_CentralAngle, put_CentralAngle, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromAngle = property(None, put_FromAngle, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsCircular = property(get_IsCircular, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsCounterClockwise = property(get_IsCounterClockwise, put_IsCounterClockwise, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsLine = property(get_IsLine, None, None)
    IsMinor = property(get_IsMinor, put_IsMinor, None)
    IsPoint = property(get_IsPoint, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToAngle = property(None, put_ToAngle, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    FromAngle = IndexProperty(get_FromAngle, None)
    ToAngle = IndexProperty(get_ToAngle, None)

class IPolygon(_esriGeometry.IPolygon):
    _IID = uuid.UUID('a4c490b8-9441-11d0-82f7-0000f8034032')

    def __init__(self, *args, **kw):
        super(IPolygon, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def FindExteriorRing(self, interiorRing):
        '''Method IPolygon.FindExteriorRing

           INPUT
            interiorRing        : IRing*

           OUTPUT
            exteriorRing        : IRing**'''
        return super(IPolygon, self).FindExteriorRing(interiorRing)
    def get_ExteriorRingCount(self):
        '''Method IPolygon.get_ExteriorRingCount

           OUTPUT
            cExteriorRings      : long*'''
        return super(IPolygon, self).get_ExteriorRingCount()
    def QueryExteriorRings(self, exteriorRings):
        '''Method IPolygon.QueryExteriorRings

           INPUT
            exteriorRings       : IRing**'''
        return super(IPolygon, self).QueryExteriorRings(exteriorRings)
    def get_InteriorRingCount(self, exteriorRing):
        '''Method IPolygon.get_InteriorRingCount

           INPUT
            exteriorRing        : IRing*

           OUTPUT
            cInteriorRings      : long*'''
        return super(IPolygon, self).get_InteriorRingCount(exteriorRing)
    def QueryInteriorRings(self, exteriorRing, interiorRings):
        '''Method IPolygon.QueryInteriorRings

           INPUTS
            exteriorRing        : IRing*
            interiorRings       : IRing**'''
        return super(IPolygon, self).QueryInteriorRings(exteriorRing, interiorRings)
    def Close(self):
        '''Method IPolygon.Close'''
        return super(IPolygon, self).Close()
    def SimplifyPreserveFromTo(self):
        '''Method IPolygon.SimplifyPreserveFromTo'''
        return super(IPolygon, self).SimplifyPreserveFromTo()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolygon, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolygon, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolygon, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolygon, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolygon, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolygon, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolygon, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolygon, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolygon, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolygon, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolygon, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolygon, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolygon, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolygon, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolygon, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolygon, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolygon, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolygon, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolygon, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolygon, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolygon, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolygon, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolygon, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolygon, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    ExteriorRingCount = property(get_ExteriorRingCount, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    InteriorRingCount = IndexProperty(get_InteriorRingCount, None)

class IFunctionalSurface(_esriGeometry.IFunctionalSurface):
    _IID = uuid.UUID('98d17b10-951c-11d2-bcfc-0000f875bcce')
    def get_Z(self, X, Y):
        '''Method IFunctionalSurface.get_Z

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            Z                   : double*'''
        return super(IFunctionalSurface, self).get_Z(X, Y)
    def get_Domain(self):
        '''Method IFunctionalSurface.get_Domain

           OUTPUT
            Domain              : IPolygon**'''
        return super(IFunctionalSurface, self).get_Domain()
    Domain = property(get_Domain, None, None)

class ISegmentGraphCursor(_esriGeometry.ISegmentGraphCursor):
    _IID = uuid.UUID('329bfbd8-0e2a-11d3-9f33-00c04f6bdd7f')
    def get_Location(self):
        '''Method ISegmentGraphCursor.get_Location

           OUTPUT
            currentGraphLocation: IPoint**'''
        return super(ISegmentGraphCursor, self).get_Location()
    def QueryLocation(self, currentGraphLocation):
        '''Method ISegmentGraphCursor.QueryLocation

           INPUT
            currentGraphLocation: IPoint*'''
        return super(ISegmentGraphCursor, self).QueryLocation(currentGraphLocation)
    def get_CurrentTrace(self):
        '''Method ISegmentGraphCursor.get_CurrentTrace

           OUTPUT
            CurrentTrace        : IPolyline**'''
        return super(ISegmentGraphCursor, self).get_CurrentTrace()
    def MoveTo(self, newLocation):
        '''Method ISegmentGraphCursor.MoveTo

           INPUT
            newLocation         : IPoint*

           OUTPUT
            canMove             : VARIANT_BOOL*'''
        return super(ISegmentGraphCursor, self).MoveTo(newLocation)
    def FinishMoveTo(self, newLocation):
        '''Method ISegmentGraphCursor.FinishMoveTo

           INPUT
            newLocation         : IPoint*'''
        return super(ISegmentGraphCursor, self).FinishMoveTo(newLocation)
    def Reset(self, startPoint):
        '''Method ISegmentGraphCursor.Reset

           INPUT
            startPoint          : IPoint*'''
        return super(ISegmentGraphCursor, self).Reset(startPoint)
    CurrentTrace = property(get_CurrentTrace, None, None)
    Location = property(get_Location, None, None)

class ISegmentGraph(_esriGeometry.ISegmentGraph):
    _IID = uuid.UUID('1e402754-0e2a-11d3-9f33-00c04f6bdd7f')
    def GetCursor(self, p):
        '''Method ISegmentGraph.GetCursor

           INPUT
            p                   : IPoint*

           OUTPUT
            cursor              : ISegmentGraphCursor**'''
        return super(ISegmentGraph, self).GetCursor(p)
    def Load(self, geometries, generateFaces, takeOwnership):
        '''Method ISegmentGraph.Load

           INPUTS
            geometries          : IEnumGeometry*
            generateFaces       : VARIANT_BOOL
            takeOwnership       : VARIANT_BOOL'''
        return super(ISegmentGraph, self).Load(geometries, generateFaces, takeOwnership)
    def SetEmpty(self):
        '''Method ISegmentGraph.SetEmpty'''
        return super(ISegmentGraph, self).SetEmpty()
    def get_Envelope(self):
        '''Method ISegmentGraph.get_Envelope

           OUTPUT
            Envelope            : IEnvelope**'''
        return super(ISegmentGraph, self).get_Envelope()
    Envelope = property(get_Envelope, None, None)

class IMultiPatch(_esriGeometry.IMultiPatch):
    _IID = uuid.UUID('f3c041c8-ae4d-11d2-9c93-00c04fb17838')

    def __init__(self, *args, **kw):
        super(IMultiPatch, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def FindBeginningRing(self, followingRing):
        '''Method IMultiPatch.FindBeginningRing

           INPUT
            followingRing       : IRing*

           OUTPUT
            beginningRing       : IRing**'''
        return super(IMultiPatch, self).FindBeginningRing(followingRing)
    def get_BeginningRingCount(self, ringTypesDesired):
        '''Method IMultiPatch.get_BeginningRingCount

           INPUT
            ringTypesDesired    : long

           OUTPUT
            BeginningRingCount  : long*'''
        return super(IMultiPatch, self).get_BeginningRingCount(ringTypesDesired)
    def QueryBeginningRings(self, ringTypesDesired, numBeginningRingsRequested):
        '''Method IMultiPatch.QueryBeginningRings

           INPUTS
            ringTypesDesired    : long
            numBeginningRingsRequested: long

           OUTPUT
            beginningRings      : IRing**'''
        return super(IMultiPatch, self).QueryBeginningRings(ringTypesDesired, numBeginningRingsRequested)
    def get_FollowingRingCount(self, beginningRing):
        '''Method IMultiPatch.get_FollowingRingCount

           INPUT
            beginningRing       : IRing*

           OUTPUT
            FollowingRingCount  : long*'''
        return super(IMultiPatch, self).get_FollowingRingCount(beginningRing)
    def QueryFollowingRings(self, beginningRing, numFollowingRingsRequested):
        '''Method IMultiPatch.QueryFollowingRings

           INPUTS
            beginningRing       : IRing*
            numFollowingRingsRequested: long

           OUTPUT
            followingRings      : IRing**'''
        return super(IMultiPatch, self).QueryFollowingRings(beginningRing, numFollowingRingsRequested)
    def GetRingType(self, queryRing):
        '''Method IMultiPatch.GetRingType

           INPUT
            queryRing           : IRing*

           OUTPUTS
            isBeginningRing     : VARIANT_BOOL*
            ringType            : esriMultiPatchRingType*'''
        return super(IMultiPatch, self).GetRingType(queryRing)
    def PutRingType(self, queryRing, ringType):
        '''Method IMultiPatch.PutRingType

           INPUTS
            queryRing           : IRing*
            ringType            : esriMultiPatchRingType'''
        return super(IMultiPatch, self).PutRingType(queryRing, ringType)
    def get_XYFootprint(self):
        '''Method IMultiPatch.get_XYFootprint

           OUTPUT
            XYFootprint         : IGeometry**'''
        return super(IMultiPatch, self).get_XYFootprint()
    def InvalXYFootprint(self):
        '''Method IMultiPatch.InvalXYFootprint'''
        return super(IMultiPatch, self).InvalXYFootprint()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IMultiPatch, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IMultiPatch, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IMultiPatch, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IMultiPatch, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IMultiPatch, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IMultiPatch, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IMultiPatch, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IMultiPatch, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IMultiPatch, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IMultiPatch, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IMultiPatch, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IMultiPatch, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    XYFootprint = property(get_XYFootprint, None, None)
    BeginningRingCount = IndexProperty(get_BeginningRingCount, None)
    FollowingRingCount = IndexProperty(get_FollowingRingCount, None)

class ICurve2(_esriGeometry.ICurve2):
    _IID = uuid.UUID('058def33-2848-11d4-9f82-00c04f6bc8e8')

    def __init__(self, *args, **kw):
        super(ICurve2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutCoordsEx(self, From, to):
        '''Method ICurve2.PutCoordsEx

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ICurve2, self).PutCoordsEx(From, to)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ICurve2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ICurve2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ICurve2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ICurve2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ICurve2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ICurve2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ICurve2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ICurve2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ICurve2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ICurve2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ICurve2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ICurve2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ICurve2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ICurve2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ICurve2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ICurve2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ICurve2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ICurve2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ICurve2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ICurve2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ICurve2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ICurve2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ICurve2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ICurve2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ICurve2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ICurve2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class ICircularArc(_esriGeometry.ICircularArc):
    _IID = uuid.UUID('991f5c10-bc4c-11d0-8303-0000f8034032')

    def __init__(self, *args, **kw):
        super(ICircularArc, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryCoords(self, Center, From, to):
        '''Method ICircularArc.QueryCoords

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            to                  : IPoint*

           OUTPUTS
            isCCW               : VARIANT_BOOL*
            IsMinor             : VARIANT_BOOL*'''
        return super(ICircularArc, self).QueryCoords(Center, From, to)
    def PutCoords(self, Center, From, to, arcOrientation):
        '''Method ICircularArc.PutCoords

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            to                  : IPoint*
            arcOrientation      : esriArcOrientation'''
        return super(ICircularArc, self).PutCoords(Center, From, to, arcOrientation)
    def QueryCoordsByAngle(self, Center):
        '''Method ICircularArc.QueryCoordsByAngle

           INPUT
            Center              : IPoint*

           OUTPUTS
            FromAngle           : double*
            centerAngle         : double*
            arcRadius           : double*'''
        return super(ICircularArc, self).QueryCoordsByAngle(Center)
    def PutCoordsByAngle(self, cp, FromAngle, CentralAngle, arcRadius):
        '''Method ICircularArc.PutCoordsByAngle

           INPUTS
            cp                  : IPoint*
            FromAngle           : double
            CentralAngle        : double
            arcRadius           : double'''
        return super(ICircularArc, self).PutCoordsByAngle(cp, FromAngle, CentralAngle, arcRadius)
    def PutRadiusByPoint(self, radialPoint):
        '''Method ICircularArc.PutRadiusByPoint

           INPUT
            radialPoint         : IPoint*'''
        return super(ICircularArc, self).PutRadiusByPoint(radialPoint)
    def get_CenterPoint(self):
        '''Method ICircularArc.get_CenterPoint

           OUTPUT
            outCenter           : IPoint**'''
        return super(ICircularArc, self).get_CenterPoint()
    def QueryCenterPoint(self, Center):
        '''Method ICircularArc.QueryCenterPoint

           INPUT
            Center              : IPoint*'''
        return super(ICircularArc, self).QueryCenterPoint(Center)
    def get_Radius(self):
        '''Method ICircularArc.get_Radius

           OUTPUT
            outRadius           : double*'''
        return super(ICircularArc, self).get_Radius()
    def put_Radius(self, outRadius):
        '''Method ICircularArc.put_Radius

           INPUT
            outRadius           : double'''
        return super(ICircularArc, self).put_Radius(outRadius)
    def get_FromAngle(self):
        '''Method ICircularArc.get_FromAngle

           OUTPUT
            outFromAngle        : double*'''
        return super(ICircularArc, self).get_FromAngle()
    def put_FromAngle(self, outFromAngle):
        '''Method ICircularArc.put_FromAngle

           INPUT
            outFromAngle        : double'''
        return super(ICircularArc, self).put_FromAngle(outFromAngle)
    def get_ToAngle(self):
        '''Method ICircularArc.get_ToAngle

           OUTPUT
            outToAngle          : double*'''
        return super(ICircularArc, self).get_ToAngle()
    def put_ToAngle(self, outToAngle):
        '''Method ICircularArc.put_ToAngle

           INPUT
            outToAngle          : double'''
        return super(ICircularArc, self).put_ToAngle(outToAngle)
    def get_CentralAngle(self):
        '''Method ICircularArc.get_CentralAngle

           OUTPUT
            outCentalAngle      : double*'''
        return super(ICircularArc, self).get_CentralAngle()
    def put_CentralAngle(self, outCentalAngle):
        '''Method ICircularArc.put_CentralAngle

           INPUT
            outCentalAngle      : double'''
        return super(ICircularArc, self).put_CentralAngle(outCentalAngle)
    def get_ChordHeight(self):
        '''Method ICircularArc.get_ChordHeight

           OUTPUT
            ChordHeight         : double*'''
        return super(ICircularArc, self).get_ChordHeight()
    def put_ChordHeight(self, ChordHeight):
        '''Method ICircularArc.put_ChordHeight

           INPUT
            ChordHeight         : double'''
        return super(ICircularArc, self).put_ChordHeight(ChordHeight)
    def get_IsLine(self):
        '''Method ICircularArc.get_IsLine

           OUTPUT
            IsLine              : VARIANT_BOOL*'''
        return super(ICircularArc, self).get_IsLine()
    def get_IsPoint(self):
        '''Method ICircularArc.get_IsPoint

           OUTPUT
            IsPoint             : VARIANT_BOOL*'''
        return super(ICircularArc, self).get_IsPoint()
    def get_IsCounterClockwise(self):
        '''Method ICircularArc.get_IsCounterClockwise

           OUTPUT
            isCCW               : VARIANT_BOOL*'''
        return super(ICircularArc, self).get_IsCounterClockwise()
    def put_IsCounterClockwise(self, isCCW):
        '''Method ICircularArc.put_IsCounterClockwise

           INPUT
            isCCW               : VARIANT_BOOL'''
        return super(ICircularArc, self).put_IsCounterClockwise(isCCW)
    def get_IsMinor(self):
        '''Method ICircularArc.get_IsMinor

           OUTPUT
            IsMinor             : VARIANT_BOOL*'''
        return super(ICircularArc, self).get_IsMinor()
    def put_IsMinor(self, IsMinor):
        '''Method ICircularArc.put_IsMinor

           INPUT
            IsMinor             : VARIANT_BOOL'''
        return super(ICircularArc, self).put_IsMinor(IsMinor)
    def Complement(self):
        '''Method ICircularArc.Complement'''
        return super(ICircularArc, self).Complement()
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ICircularArc, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ICircularArc, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ICircularArc, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ICircularArc, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ICircularArc, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ICircularArc, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ICircularArc, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ICircularArc, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ICircularArc, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ICircularArc, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ICircularArc, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ICircularArc, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ICircularArc, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ICircularArc, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ICircularArc, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ICircularArc, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ICircularArc, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ICircularArc, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ICircularArc, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ICircularArc, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ICircularArc, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ICircularArc, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ICircularArc, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ICircularArc, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ICircularArc, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ICircularArc, self).GeoNormalizeFromLongitude(Longitude)
    CenterPoint = property(get_CenterPoint, None, None)
    CentralAngle = property(get_CentralAngle, put_CentralAngle, None)
    ChordHeight = property(get_ChordHeight, put_ChordHeight, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromAngle = property(get_FromAngle, put_FromAngle, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsCounterClockwise = property(get_IsCounterClockwise, put_IsCounterClockwise, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsLine = property(get_IsLine, None, None)
    IsMinor = property(get_IsMinor, put_IsMinor, None)
    IsPoint = property(get_IsPoint, None, None)
    Length = property(get_Length, None, None)
    Radius = property(get_Radius, put_Radius, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToAngle = property(get_ToAngle, put_ToAngle, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IAffineTransformation2D(_esriGeometry.IAffineTransformation2D):
    _IID = uuid.UUID('d12f81b4-d263-11d2-9f29-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IAffineTransformation2D, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_SpatialReference(self, SR):
        '''Method IAffineTransformation2D.putref_SpatialReference

           INPUT
            SR                  : ISpatialReference*'''
        return super(IAffineTransformation2D, self).putref_SpatialReference(SR)
    def get_SpatialReference(self):
        '''Method IAffineTransformation2D.get_SpatialReference

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(IAffineTransformation2D, self).get_SpatialReference()
    def Reset(self):
        '''Method IAffineTransformation2D.Reset'''
        return super(IAffineTransformation2D, self).Reset()
    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D.DefineFromControlPointsEx

           INPUTS
            numPoints           : long
            fromPoints          : WKSPoint*
            toPoints            : WKSPoint*'''
        return super(IAffineTransformation2D, self).DefineFromControlPointsEx(numPoints, fromPoints, toPoints)
    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D.DefineFromControlPoints

           INPUTS
            numPoints           : long
            fromPoints          : IPoint**
            toPoints            : IPoint**'''
        return super(IAffineTransformation2D, self).DefineFromControlPoints(numPoints, fromPoints, toPoints)
    def DefineFromEnvelopes(self, From, to):
        '''Method IAffineTransformation2D.DefineFromEnvelopes

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*'''
        return super(IAffineTransformation2D, self).DefineFromEnvelopes(From, to)
    def DefineFromEnvelopesEx(self, From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt):
        '''Method IAffineTransformation2D.DefineFromEnvelopesEx

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*
            outFrom             : IEnvelope*
            assumeFalseOrigin   : VARIANT_BOOL
            keepAspect          : VARIANT_BOOL
            flipIt              : VARIANT_BOOL'''
        return super(IAffineTransformation2D, self).DefineFromEnvelopesEx(From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt)
    def DefineReflection(self, l):
        '''Method IAffineTransformation2D.DefineReflection

           INPUT
            l                   : ILine*'''
        return super(IAffineTransformation2D, self).DefineReflection(l)
    def GetRMSError(self):
        '''Method IAffineTransformation2D.GetRMSError

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IAffineTransformation2D.GetControlPointError

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D, self).GetControlPointError(i)
    def get_XScale(self):
        '''Method IAffineTransformation2D.get_XScale

           OUTPUT
            sx                  : double*'''
        return super(IAffineTransformation2D, self).get_XScale()
    def get_YScale(self):
        '''Method IAffineTransformation2D.get_YScale

           OUTPUT
            sy                  : double*'''
        return super(IAffineTransformation2D, self).get_YScale()
    def get_XTranslation(self):
        '''Method IAffineTransformation2D.get_XTranslation

           OUTPUT
            dx                  : double*'''
        return super(IAffineTransformation2D, self).get_XTranslation()
    def get_YTranslation(self):
        '''Method IAffineTransformation2D.get_YTranslation

           OUTPUT
            dy                  : double*'''
        return super(IAffineTransformation2D, self).get_YTranslation()
    def get_Rotation(self):
        '''Method IAffineTransformation2D.get_Rotation

           OUTPUT
            r                   : double*'''
        return super(IAffineTransformation2D, self).get_Rotation()
    def Scale(self, dx, dy):
        '''Method IAffineTransformation2D.Scale

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D, self).Scale(dx, dy)
    def put_MoveOrigin(self, _arg1):
        '''Method IAffineTransformation2D.put_MoveOrigin

           INPUT
            _arg1               : IPoint*'''
        return super(IAffineTransformation2D, self).put_MoveOrigin(_arg1)
    def MoveVector(self, movementVector):
        '''Method IAffineTransformation2D.MoveVector

           INPUT
            movementVector      : ILine*'''
        return super(IAffineTransformation2D, self).MoveVector(movementVector)
    def Move(self, dx, dy):
        '''Method IAffineTransformation2D.Move

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D, self).Move(dx, dy)
    def Rotate(self, da):
        '''Method IAffineTransformation2D.Rotate

           INPUT
            da                  : double'''
        return super(IAffineTransformation2D, self).Rotate(da)
    def PostMultiply(self, postTransform):
        '''Method IAffineTransformation2D.PostMultiply

           INPUT
            postTransform       : IAffineTransformation2D*'''
        return super(IAffineTransformation2D, self).PostMultiply(postTransform)
    def PreMultiply(self, preTransform):
        '''Method IAffineTransformation2D.PreMultiply

           INPUT
            preTransform        : IAffineTransformation2D*'''
        return super(IAffineTransformation2D, self).PreMultiply(preTransform)
    def get_IsReflective(self):
        '''Method IAffineTransformation2D.get_IsReflective

           OUTPUT
            IsReflective        : VARIANT_BOOL*'''
        return super(IAffineTransformation2D, self).get_IsReflective()
    def Project(self, newSpatialReference):
        '''Method IAffineTransformation2D.Project

           INPUT
            newSpatialReference : ISpatialReference*'''
        return super(IAffineTransformation2D, self).Project(newSpatialReference)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IAffineTransformation2D, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IAffineTransformation2D, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IAffineTransformation2D, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IAffineTransformation2D, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IAffineTransformation2D, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IAffineTransformation2D, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IAffineTransformation2D, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IAffineTransformation2D, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    IsReflective = property(get_IsReflective, None, None)
    MoveOrigin = property(None, put_MoveOrigin, None)
    Rotation = property(get_Rotation, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    XScale = property(get_XScale, None, None)
    XTranslation = property(get_XTranslation, None, None)
    YScale = property(get_YScale, None, None)
    YTranslation = property(get_YTranslation, None, None)

class ITopologicalOperator(_esriGeometry.ITopologicalOperator):
    _IID = uuid.UUID('1b077911-38c5-11d0-92d2-00805f7c28b0')
    def get_IsSimple(self):
        '''Method ITopologicalOperator.get_IsSimple

           OUTPUT
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator, self).get_IsSimple()
    def get_IsKnownSimple(self):
        '''Method ITopologicalOperator.get_IsKnownSimple

           OUTPUT
            IsKnownSimple       : VARIANT_BOOL*'''
        return super(ITopologicalOperator, self).get_IsKnownSimple()
    def Simplify(self):
        '''Method ITopologicalOperator.Simplify'''
        return super(ITopologicalOperator, self).Simplify()
    def Buffer(self, distance):
        '''Method ITopologicalOperator.Buffer

           INPUT
            distance            : double

           OUTPUT
            outBuffer           : IGeometry**'''
        return super(ITopologicalOperator, self).Buffer(distance)
    def ConvexHull(self):
        '''Method ITopologicalOperator.ConvexHull

           OUTPUT
            outHull             : IGeometry**'''
        return super(ITopologicalOperator, self).ConvexHull()
    def Intersect(self, other, resultDimension):
        '''Method ITopologicalOperator.Intersect

           INPUTS
            other               : IGeometry*
            resultDimension     : esriGeometryDimension

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator, self).Intersect(other, resultDimension)
    def Union(self, other):
        '''Method ITopologicalOperator.Union

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator, self).Union(other)
    def ConstructUnion(self, geometries):
        '''Method ITopologicalOperator.ConstructUnion

           INPUT
            geometries          : IEnumGeometry*'''
        return super(ITopologicalOperator, self).ConstructUnion(geometries)
    def Difference(self, other):
        '''Method ITopologicalOperator.Difference

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator, self).Difference(other)
    def SymmetricDifference(self, other):
        '''Method ITopologicalOperator.SymmetricDifference

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator, self).SymmetricDifference(other)
    def Clip(self, clipperEnvelope):
        '''Method ITopologicalOperator.Clip

           INPUT
            clipperEnvelope     : IEnvelope*'''
        return super(ITopologicalOperator, self).Clip(clipperEnvelope)
    def QueryClipped(self, clipperEnvelope, clippedGeometry):
        '''Method ITopologicalOperator.QueryClipped

           INPUTS
            clipperEnvelope     : IEnvelope*
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator, self).QueryClipped(clipperEnvelope, clippedGeometry)
    def QueryClippedDense(self, clipperEnvelope, denseDistance, clippedGeometry):
        '''Method ITopologicalOperator.QueryClippedDense

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator, self).QueryClippedDense(clipperEnvelope, denseDistance, clippedGeometry)
    def Cut(self, cutter):
        '''Method ITopologicalOperator.Cut

           INPUT
            cutter              : IPolyline*

           OUTPUTS
            leftGeom            : IGeometry**
            rightGeom           : IGeometry**'''
        return super(ITopologicalOperator, self).Cut(cutter)
    def get_Boundary(self):
        '''Method ITopologicalOperator.get_Boundary

           OUTPUT
            outBoundary         : IGeometry**'''
        return super(ITopologicalOperator, self).get_Boundary()
    def ClipDense(self, clipperEnvelope, denseDistance):
        '''Method ITopologicalOperator.ClipDense

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double'''
        return super(ITopologicalOperator, self).ClipDense(clipperEnvelope, denseDistance)
    def get_TopologyCache(self):
        '''Method ITopologicalOperator.get_TopologyCache

           OUTPUT
            topologyCacheHandle : TopologyHandle*'''
        return super(ITopologicalOperator, self).get_TopologyCache()
    Boundary = property(get_Boundary, None, None)
    IsKnownSimple = property(get_IsKnownSimple, None, None)
    IsSimple = property(get_IsSimple, None, None)
    TopologyCache = property(get_TopologyCache, None, None)

class ITopologicalOperator2(_esriGeometry.ITopologicalOperator2):
    _IID = uuid.UUID('805aeeb0-1d4c-11d4-9f75-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ITopologicalOperator2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ConstructBuffers(self, numBuffers, distances):
        '''Method ITopologicalOperator2.ConstructBuffers

           INPUTS
            numBuffers          : long
            distances           : double*

           OUTPUT
            buffers             : IEnumGeometry**'''
        return super(ITopologicalOperator2, self).ConstructBuffers(numBuffers, distances)
    def ClipToDomain(self):
        '''Method ITopologicalOperator2.ClipToDomain'''
        return super(ITopologicalOperator2, self).ClipToDomain()
    def put_IsKnownSimple(self, _arg1):
        '''Method ITopologicalOperator2.put_IsKnownSimple

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(ITopologicalOperator2, self).put_IsKnownSimple(_arg1)
    def IntersectMultidimension(self, other):
        '''Method ITopologicalOperator2.IntersectMultidimension

           INPUT
            other               : IGeometry*

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator2, self).IntersectMultidimension(other)
    def get_IsSimple(self):
        '''Method ITopologicalOperator.get_IsSimple (from ITopologicalOperator)

           OUTPUT
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator2, self).get_IsSimple()
    def get_IsKnownSimple(self):
        '''Method ITopologicalOperator.get_IsKnownSimple (from ITopologicalOperator)

           OUTPUT
            IsKnownSimple       : VARIANT_BOOL*'''
        return super(ITopologicalOperator2, self).get_IsKnownSimple()
    def Simplify(self):
        '''Method ITopologicalOperator.Simplify (from ITopologicalOperator)'''
        return super(ITopologicalOperator2, self).Simplify()
    def Buffer(self, distance):
        '''Method ITopologicalOperator.Buffer (from ITopologicalOperator)

           INPUT
            distance            : double

           OUTPUT
            outBuffer           : IGeometry**'''
        return super(ITopologicalOperator2, self).Buffer(distance)
    def ConvexHull(self):
        '''Method ITopologicalOperator.ConvexHull (from ITopologicalOperator)

           OUTPUT
            outHull             : IGeometry**'''
        return super(ITopologicalOperator2, self).ConvexHull()
    def Intersect(self, other, resultDimension):
        '''Method ITopologicalOperator.Intersect (from ITopologicalOperator)

           INPUTS
            other               : IGeometry*
            resultDimension     : esriGeometryDimension

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator2, self).Intersect(other, resultDimension)
    def Union(self, other):
        '''Method ITopologicalOperator.Union (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator2, self).Union(other)
    def ConstructUnion(self, geometries):
        '''Method ITopologicalOperator.ConstructUnion (from ITopologicalOperator)

           INPUT
            geometries          : IEnumGeometry*'''
        return super(ITopologicalOperator2, self).ConstructUnion(geometries)
    def Difference(self, other):
        '''Method ITopologicalOperator.Difference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator2, self).Difference(other)
    def SymmetricDifference(self, other):
        '''Method ITopologicalOperator.SymmetricDifference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator2, self).SymmetricDifference(other)
    def Clip(self, clipperEnvelope):
        '''Method ITopologicalOperator.Clip (from ITopologicalOperator)

           INPUT
            clipperEnvelope     : IEnvelope*'''
        return super(ITopologicalOperator2, self).Clip(clipperEnvelope)
    def QueryClipped(self, clipperEnvelope, clippedGeometry):
        '''Method ITopologicalOperator.QueryClipped (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator2, self).QueryClipped(clipperEnvelope, clippedGeometry)
    def QueryClippedDense(self, clipperEnvelope, denseDistance, clippedGeometry):
        '''Method ITopologicalOperator.QueryClippedDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator2, self).QueryClippedDense(clipperEnvelope, denseDistance, clippedGeometry)
    def Cut(self, cutter):
        '''Method ITopologicalOperator.Cut (from ITopologicalOperator)

           INPUT
            cutter              : IPolyline*

           OUTPUTS
            leftGeom            : IGeometry**
            rightGeom           : IGeometry**'''
        return super(ITopologicalOperator2, self).Cut(cutter)
    def get_Boundary(self):
        '''Method ITopologicalOperator.get_Boundary (from ITopologicalOperator)

           OUTPUT
            outBoundary         : IGeometry**'''
        return super(ITopologicalOperator2, self).get_Boundary()
    def ClipDense(self, clipperEnvelope, denseDistance):
        '''Method ITopologicalOperator.ClipDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double'''
        return super(ITopologicalOperator2, self).ClipDense(clipperEnvelope, denseDistance)
    def get_TopologyCache(self):
        '''Method ITopologicalOperator.get_TopologyCache (from ITopologicalOperator)

           OUTPUT
            topologyCacheHandle : TopologyHandle*'''
        return super(ITopologicalOperator2, self).get_TopologyCache()
    Boundary = property(get_Boundary, None, None)
    IsKnownSimple = property(get_IsKnownSimple, put_IsKnownSimple, None)
    IsSimple = property(get_IsSimple, None, None)
    TopologyCache = property(get_TopologyCache, None, None)

class IFunctionalSurface2(_esriGeometry.IFunctionalSurface2):
    _IID = uuid.UUID('e91ae5c7-2c16-11d4-80e2-00c04fa0adf8')

    def __init__(self, *args, **kw):
        super(IFunctionalSurface2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Domain(self, _arg1):
        '''Method IFunctionalSurface2.put_Domain

           INPUT
            _arg1               : IPolygon*'''
        return super(IFunctionalSurface2, self).put_Domain(_arg1)
    def get_Z(self, X, Y):
        '''Method IFunctionalSurface.get_Z (from IFunctionalSurface)

           INPUTS
            X                   : double
            Y                   : double

           OUTPUT
            Z                   : double*'''
        return super(IFunctionalSurface2, self).get_Z(X, Y)
    def get_Domain(self):
        '''Method IFunctionalSurface.get_Domain (from IFunctionalSurface)

           OUTPUT
            Domain              : IPolygon**'''
        return super(IFunctionalSurface2, self).get_Domain()
    Domain = property(get_Domain, put_Domain, None)

class IFunctionalSurface3(_esriGeometry.IFunctionalSurface3):
    _IID = uuid.UUID('2c6b9dbb-1c4b-435c-8a85-807eb33553e4')
    def InterpolateShape(self, pShape, pStepSize):
        '''Method IFunctionalSurface3.InterpolateShape

           INPUTS
            pShape              : IGeometry*
            pStepSize           : VARIANT*

           OUTPUT
            ppOutShape          : IGeometry**'''
        return super(IFunctionalSurface3, self).InterpolateShape(pShape, pStepSize)
    def InterpolateAsMultiPatch(self, pShape, maxStripSize):
        '''Method IFunctionalSurface3.InterpolateAsMultiPatch

           INPUTS
            pShape              : IPolygon*
            maxStripSize        : long

           OUTPUT
            ppMultiPatch        : IMultiPatch**'''
        return super(IFunctionalSurface3, self).InterpolateAsMultiPatch(pShape, maxStripSize)

class IAffineTransformation2D3GEN(_esriGeometry.IAffineTransformation2D3GEN):
    _IID = uuid.UUID('20f586de-9b4b-47a2-a9a7-abc70ffd6e56')

    def __init__(self, *args, **kw):
        super(IAffineTransformation2D3GEN, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def TransformMeasuresFF(self, direction, inMeasures):
        '''Method IAffineTransformation2D3GEN.TransformMeasuresFF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformMeasuresFF(direction, inMeasures)
    def TransformMeasuresFI(self, direction, inMeasures):
        '''Method IAffineTransformation2D3GEN.TransformMeasuresFI

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformMeasuresFI(direction, inMeasures)
    def TransformMeasuresIF(self, direction, inMeasures):
        '''Method IAffineTransformation2D3GEN.TransformMeasuresIF

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformMeasuresIF(direction, inMeasures)
    def TransformMeasuresII(self, direction, inMeasures):
        '''Method IAffineTransformation2D3GEN.TransformMeasuresII

           INPUTS
            direction           : esriTransformDirection
            inMeasures          : SAFEARRAY**

           OUTPUT
            outMeasures         : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformMeasuresII(direction, inMeasures)
    def TransformPointsFF(self, direction, inPoints):
        '''Method IAffineTransformation2D3GEN.TransformPointsFF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformPointsFF(direction, inPoints)
    def TransformPointsFI(self, direction, inPoints):
        '''Method IAffineTransformation2D3GEN.TransformPointsFI

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformPointsFI(direction, inPoints)
    def TransformPointsIF(self, direction, inPoints):
        '''Method IAffineTransformation2D3GEN.TransformPointsIF

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformPointsIF(direction, inPoints)
    def TransformPointsII(self, direction, inPoints):
        '''Method IAffineTransformation2D3GEN.TransformPointsII

           INPUTS
            direction           : esriTransformDirection
            inPoints            : SAFEARRAY**

           OUTPUT
            outPoints           : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).TransformPointsII(direction, inPoints)
    def putref_SpatialReference(self, SR):
        '''Method IAffineTransformation2D3GEN.putref_SpatialReference

           INPUT
            SR                  : ISpatialReference*'''
        return super(IAffineTransformation2D3GEN, self).putref_SpatialReference(SR)
    def get_SpatialReference(self):
        '''Method IAffineTransformation2D3GEN.get_SpatialReference

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(IAffineTransformation2D3GEN, self).get_SpatialReference()
    def Reset(self):
        '''Method IAffineTransformation2D3GEN.Reset'''
        return super(IAffineTransformation2D3GEN, self).Reset()
    def DefineFromControlPoints(self, fromPoints, toPoints):
        '''Method IAffineTransformation2D3GEN.DefineFromControlPoints

           INPUTS
            fromPoints          : SAFEARRAY**
            toPoints            : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).DefineFromControlPoints(fromPoints, toPoints)
    def DefineFromEnvelopes(self, From, to):
        '''Method IAffineTransformation2D3GEN.DefineFromEnvelopes

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*'''
        return super(IAffineTransformation2D3GEN, self).DefineFromEnvelopes(From, to)
    def DefineFromEnvelopesEx(self, From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt):
        '''Method IAffineTransformation2D3GEN.DefineFromEnvelopesEx

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*
            outFrom             : IEnvelope*
            assumeFalseOrigin   : VARIANT_BOOL
            keepAspect          : VARIANT_BOOL
            flipIt              : VARIANT_BOOL'''
        return super(IAffineTransformation2D3GEN, self).DefineFromEnvelopesEx(From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt)
    def DefineReflection(self, l):
        '''Method IAffineTransformation2D3GEN.DefineReflection

           INPUT
            l                   : ILine*'''
        return super(IAffineTransformation2D3GEN, self).DefineReflection(l)
    def GetRMSError(self):
        '''Method IAffineTransformation2D3GEN.GetRMSError

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D3GEN, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IAffineTransformation2D3GEN.GetControlPointError

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D3GEN, self).GetControlPointError(i)
    def get_XScale(self):
        '''Method IAffineTransformation2D3GEN.get_XScale

           OUTPUT
            sx                  : double*'''
        return super(IAffineTransformation2D3GEN, self).get_XScale()
    def get_YScale(self):
        '''Method IAffineTransformation2D3GEN.get_YScale

           OUTPUT
            sy                  : double*'''
        return super(IAffineTransformation2D3GEN, self).get_YScale()
    def get_XTranslation(self):
        '''Method IAffineTransformation2D3GEN.get_XTranslation

           OUTPUT
            dx                  : double*'''
        return super(IAffineTransformation2D3GEN, self).get_XTranslation()
    def get_YTranslation(self):
        '''Method IAffineTransformation2D3GEN.get_YTranslation

           OUTPUT
            dy                  : double*'''
        return super(IAffineTransformation2D3GEN, self).get_YTranslation()
    def get_Rotation(self):
        '''Method IAffineTransformation2D3GEN.get_Rotation

           OUTPUT
            r                   : double*'''
        return super(IAffineTransformation2D3GEN, self).get_Rotation()
    def Scale(self, dx, dy):
        '''Method IAffineTransformation2D3GEN.Scale

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D3GEN, self).Scale(dx, dy)
    def put_MoveOrigin(self, Origin):
        '''Method IAffineTransformation2D3GEN.put_MoveOrigin

           INPUT
            Origin              : IPoint*'''
        return super(IAffineTransformation2D3GEN, self).put_MoveOrigin(Origin)
    def MoveVector(self, movementVector):
        '''Method IAffineTransformation2D3GEN.MoveVector

           INPUT
            movementVector      : ILine*'''
        return super(IAffineTransformation2D3GEN, self).MoveVector(movementVector)
    def Move(self, dx, dy):
        '''Method IAffineTransformation2D3GEN.Move

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D3GEN, self).Move(dx, dy)
    def Rotate(self, da):
        '''Method IAffineTransformation2D3GEN.Rotate

           INPUT
            da                  : double'''
        return super(IAffineTransformation2D3GEN, self).Rotate(da)
    def PostMultiply(self, postTransform):
        '''Method IAffineTransformation2D3GEN.PostMultiply

           INPUT
            postTransform       : IAffineTransformation2D3GEN*'''
        return super(IAffineTransformation2D3GEN, self).PostMultiply(postTransform)
    def PreMultiply(self, preTransform):
        '''Method IAffineTransformation2D3GEN.PreMultiply

           INPUT
            preTransform        : IAffineTransformation2D3GEN*'''
        return super(IAffineTransformation2D3GEN, self).PreMultiply(preTransform)
    def get_IsReflective(self):
        '''Method IAffineTransformation2D3GEN.get_IsReflective

           OUTPUT
            IsReflective        : VARIANT_BOOL*'''
        return super(IAffineTransformation2D3GEN, self).get_IsReflective()
    def Project(self, newSpatialReference):
        '''Method IAffineTransformation2D3GEN.Project

           INPUT
            newSpatialReference : ISpatialReference*'''
        return super(IAffineTransformation2D3GEN, self).Project(newSpatialReference)
    def get_MoveOrigin(self):
        '''Method IAffineTransformation2D3GEN.get_MoveOrigin

           OUTPUT
            Origin              : IPoint**'''
        return super(IAffineTransformation2D3GEN, self).get_MoveOrigin()
    def DefineConformalFromControlPoints(self, fromPoints, toPoints):
        '''Method IAffineTransformation2D3GEN.DefineConformalFromControlPoints

           INPUTS
            fromPoints          : SAFEARRAY**
            toPoints            : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).DefineConformalFromControlPoints(fromPoints, toPoints)
    def QueryLinearCoefficients(self, direction):
        '''Method IAffineTransformation2D3GEN.QueryLinearCoefficients

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            params              : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).QueryLinearCoefficients(direction)
    def SetLinearCoefficients(self, direction, params):
        '''Method IAffineTransformation2D3GEN.SetLinearCoefficients

           INPUTS
            direction           : esriTransformDirection
            params              : SAFEARRAY**'''
        return super(IAffineTransformation2D3GEN, self).SetLinearCoefficients(direction, params)
    IsReflective = property(get_IsReflective, None, None)
    MoveOrigin = property(get_MoveOrigin, put_MoveOrigin, None)
    Rotation = property(get_Rotation, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    XScale = property(get_XScale, None, None)
    XTranslation = property(get_XTranslation, None, None)
    YScale = property(get_YScale, None, None)
    YTranslation = property(get_YTranslation, None, None)

class IPolycurve2(_esriGeometry.IPolycurve2):
    _IID = uuid.UUID('f4737332-f6b7-11d3-9f6a-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IPolycurve2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SplitAtPoints(self, splitPoints, projectOnto, createParts, cutoffDistance):
        '''Method IPolycurve2.SplitAtPoints

           INPUTS
            splitPoints         : IEnumVertex*
            projectOnto         : VARIANT_BOOL
            createParts         : VARIANT_BOOL
            cutoffDistance      : double

           OUTPUT
            splitInfo           : IEnumSplitPoint**'''
        return super(IPolycurve2, self).SplitAtPoints(splitPoints, projectOnto, createParts, cutoffDistance)
    def SplitAtDistances(self, distanceCount, distances, asRatios, createParts):
        '''Method IPolycurve2.SplitAtDistances

           INPUTS
            distanceCount       : long
            distances           : double*
            asRatios            : VARIANT_BOOL
            createParts         : VARIANT_BOOL

           OUTPUT
            splitInfo           : IEnumSplitPoint**'''
        return super(IPolycurve2, self).SplitAtDistances(distanceCount, distances, asRatios, createParts)
    def DensifyByAngle(self, maxSegmentLength, maxAngleDeviation):
        '''Method IPolycurve2.DensifyByAngle

           INPUTS
            maxSegmentLength    : double
            maxAngleDeviation   : double'''
        return super(IPolycurve2, self).DensifyByAngle(maxSegmentLength, maxAngleDeviation)
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolycurve2, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolycurve2, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolycurve2, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolycurve2, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolycurve2, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolycurve2, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolycurve2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolycurve2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolycurve2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolycurve2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolycurve2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolycurve2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolycurve2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolycurve2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolycurve2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolycurve2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolycurve2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolycurve2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolycurve2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolycurve2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolycurve2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolycurve2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolycurve2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolycurve2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolycurve2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolycurve2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolycurve2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolycurve2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolycurve2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolycurve2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolycurve2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolycurve2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class ISegmentZ2(_esriGeometry.ISegmentZ2):
    _IID = uuid.UUID('df1f1e7d-6b8c-44c1-a005-92a8a56cb4cf')
    def Densify3D(self, cMaxSegments, maxDeviation):
        '''Method ISegmentZ2.Densify3D

           INPUTS
            cMaxSegments        : long
            maxDeviation        : double

           OUTPUTS
            pcOutSegments       : long*
            ppSegments          : ILine**'''
        return super(ISegmentZ2, self).Densify3D(cMaxSegments, maxDeviation)
    def MaxDistanceFromLine3D(self, pBaseFromZ, pBaseToZ, minOffset, fromArcDistance, toArcDistance, pMaxOffset, pAtArcDistance, pFarPointZ):
        '''Method ISegmentZ2.MaxDistanceFromLine3D

           INPUTS
            pBaseFromZ          : WKSPointZ*
            pBaseToZ            : WKSPointZ*
            minOffset           : double
            fromArcDistance     : double
            toArcDistance       : double
            pMaxOffset          : double*
            pAtArcDistance      : double*
            pFarPointZ          : WKSPointZ*'''
        return super(ISegmentZ2, self).MaxDistanceFromLine3D(pBaseFromZ, pBaseToZ, minOffset, fromArcDistance, toArcDistance, pMaxOffset, pAtArcDistance, pFarPointZ)
    def GetZs(self):
        '''Method ISegmentZ.GetZs (from ISegmentZ)

           OUTPUTS
            fromZ               : double*
            toZ                 : double*'''
        return super(ISegmentZ2, self).GetZs()
    def SetZs(self, fromZ, toZ):
        '''Method ISegmentZ.SetZs (from ISegmentZ)

           INPUTS
            fromZ               : double
            toZ                 : double'''
        return super(ISegmentZ2, self).SetZs(fromZ, toZ)

class IConstructClothoid(_esriGeometry.IConstructClothoid):
    _IID = uuid.UUID('6203381c-a184-4a3e-88be-d19235f42177')
    def ConstructClothoidByLength(self, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, curveLength, __MIDL__IConstructClothoid0000, densifyParameter):
        '''Method IConstructClothoid.ConstructClothoidByLength

           INPUTS
            pFrom               : IPoint*
            pFromTangent        : IPoint*
            bCurveRight         : VARIANT_BOOL
            fromCurvature       : double
            toCurvature         : double
            curveLength         : double
            __MIDL__IConstructClothoid0000: esriCurveDensifyMethod
            densifyParameter    : double

           OUTPUT
            ppSpiral            : IPolyline**'''
        return super(IConstructClothoid, self).ConstructClothoidByLength(pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, curveLength, __MIDL__IConstructClothoid0000, densifyParameter)
    def ConstructClothoidByAngle(self, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, deflectionAngle, __MIDL__IConstructClothoid0001, densifyParameter):
        '''Method IConstructClothoid.ConstructClothoidByAngle

           INPUTS
            pFrom               : IPoint*
            pFromTangent        : IPoint*
            bCurveRight         : VARIANT_BOOL
            fromCurvature       : double
            toCurvature         : double
            deflectionAngle     : double
            __MIDL__IConstructClothoid0001: esriCurveDensifyMethod
            densifyParameter    : double

           OUTPUT
            ppSpiral            : IPolyline**'''
        return super(IConstructClothoid, self).ConstructClothoidByAngle(pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, deflectionAngle, __MIDL__IConstructClothoid0001, densifyParameter)
    def ConstructSplitClothoidByLength(self, pSplitQuery, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, curveLength):
        '''Method IConstructClothoid.ConstructSplitClothoidByLength

           INPUTS
            pSplitQuery         : IPoint*
            pFrom               : IPoint*
            pFromTangent        : IPoint*
            bCurveRight         : VARIANT_BOOL
            fromCurvature       : double
            toCurvature         : double
            curveLength         : double

           OUTPUTS
            pSplitCurvature     : double*
            pSplitLength        : double*
            pSplitAngle         : double*
            ppSplitTangent      : ILine**'''
        return super(IConstructClothoid, self).ConstructSplitClothoidByLength(pSplitQuery, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, curveLength)
    def ConstructSplitClothoidByAngle(self, pSplitQuery, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, deflectionAngle):
        '''Method IConstructClothoid.ConstructSplitClothoidByAngle

           INPUTS
            pSplitQuery         : IPoint*
            pFrom               : IPoint*
            pFromTangent        : IPoint*
            bCurveRight         : VARIANT_BOOL
            fromCurvature       : double
            toCurvature         : double
            deflectionAngle     : double

           OUTPUTS
            pSplitCurvature     : double*
            pSplitLength        : double*
            pSplitAngle         : double*
            ppSplitTangent      : ILine**'''
        return super(IConstructClothoid, self).ConstructSplitClothoidByAngle(pSplitQuery, pFrom, pFromTangent, bCurveRight, fromCurvature, toCurvature, deflectionAngle)

class IEnumCurve2(_esriGeometry.IEnumCurve2):
    _IID = uuid.UUID('847e3f3d-5ebb-43f1-848d-f3eefbc525ed')

    def __init__(self, *args, **kw):
        super(IEnumCurve2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QuerySubcurve(self, fromDistance, toDistance, asRatio, subcurve):
        '''Method IEnumCurve2.QuerySubcurve

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL
            subcurve            : ICurve*'''
        return super(IEnumCurve2, self).QuerySubcurve(fromDistance, toDistance, asRatio, subcurve)
    def QueryPoint(self, fromDistance, asRatio, pointOnCurve):
        '''Method IEnumCurve2.QueryPoint

           INPUTS
            fromDistance        : double
            asRatio             : VARIANT_BOOL
            pointOnCurve        : IPoint*'''
        return super(IEnumCurve2, self).QueryPoint(fromDistance, asRatio, pointOnCurve)
    def Clone(self):
        '''Method IEnumCurve.Clone (from IEnumCurve)

           OUTPUT
            outEnumerator       : IEnumCurve**'''
        return super(IEnumCurve2, self).Clone()
    def Reset(self):
        '''Method IEnumCurve.Reset (from IEnumCurve)'''
        return super(IEnumCurve2, self).Reset()
    def Next(self, distance):
        '''Method IEnumCurve.Next (from IEnumCurve)

           INPUT
            distance            : double'''
        return super(IEnumCurve2, self).Next(distance)
    def get_Segment(self):
        '''Method IEnumCurve.get_Segment (from IEnumCurve)

           OUTPUT
            Segment             : ISegment**'''
        return super(IEnumCurve2, self).get_Segment()
    def get_SegmentDistance(self):
        '''Method IEnumCurve.get_SegmentDistance (from IEnumCurve)

           OUTPUT
            SegmentDistance     : double*'''
        return super(IEnumCurve2, self).get_SegmentDistance()
    def get_CurveDistance(self):
        '''Method IEnumCurve.get_CurveDistance (from IEnumCurve)

           OUTPUT
            CurveDistance       : double*'''
        return super(IEnumCurve2, self).get_CurveDistance()
    def get_PartIndex(self):
        '''Method IEnumCurve.get_PartIndex (from IEnumCurve)

           OUTPUT
            PartIndex           : long*'''
        return super(IEnumCurve2, self).get_PartIndex()
    def get_SegmentIndex(self):
        '''Method IEnumCurve.get_SegmentIndex (from IEnumCurve)

           OUTPUT
            SegmentIndex        : long*'''
        return super(IEnumCurve2, self).get_SegmentIndex()
    def get_StopReason(self):
        '''Method IEnumCurve.get_StopReason (from IEnumCurve)

           OUTPUT
            StopReason          : esriCurveIteratorEnum*'''
        return super(IEnumCurve2, self).get_StopReason()
    def put_StopOptions(self, StopOptions):
        '''Method IEnumCurve.put_StopOptions (from IEnumCurve)

           INPUT
            StopOptions         : esriCurveIteratorEnum'''
        return super(IEnumCurve2, self).put_StopOptions(StopOptions)
    def get_StopOptions(self):
        '''Method IEnumCurve.get_StopOptions (from IEnumCurve)

           OUTPUT
            StopOptions         : esriCurveIteratorEnum*'''
        return super(IEnumCurve2, self).get_StopOptions()
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method IEnumCurve.GetSubcurve (from IEnumCurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            subcurve            : ICurve**'''
        return super(IEnumCurve2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    CurveDistance = property(get_CurveDistance, None, None)
    PartIndex = property(get_PartIndex, None, None)
    Segment = property(get_Segment, None, None)
    SegmentDistance = property(get_SegmentDistance, None, None)
    SegmentIndex = property(get_SegmentIndex, None, None)
    StopOptions = property(get_StopOptions, put_StopOptions, None)
    StopReason = property(get_StopReason, None, None)

class IPolyline2(_esriGeometry.IPolyline2):
    _IID = uuid.UUID('7a5ae276-1230-11d4-9f72-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(IPolyline2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_EnumShortestPath(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IPolyline2.get_EnumShortestPath

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long

           OUTPUT
            shortPathEnum       : IEnumSegment**'''
        return super(IPolyline2, self).get_EnumShortestPath(fromPart, FromPoint, toPart, ToPoint)
    def Reshape(self, reshapeSource):
        '''Method IPolyline.Reshape (from IPolyline)

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline2, self).Reshape(reshapeSource)
    def SimplifyNetwork(self):
        '''Method IPolyline.SimplifyNetwork (from IPolyline)'''
        return super(IPolyline2, self).SimplifyNetwork()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolyline2, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline2, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolyline2, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline2, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline2, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline2, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolyline2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolyline2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolyline2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolyline2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolyline2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolyline2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolyline2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolyline2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolyline2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolyline2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolyline2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolyline2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolyline2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolyline2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolyline2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolyline2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolyline2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolyline2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolyline2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolyline2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolyline2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolyline2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IPolyline3(_esriGeometry.IPolyline3):
    _IID = uuid.UUID('88af3cf5-75b6-4ef2-91db-7e9eaff81f27')

    def __init__(self, *args, **kw):
        super(IPolyline3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def TouchCut(self, pCutter):
        '''Method IPolyline3.TouchCut

           INPUT
            pCutter             : IPolyline*

           OUTPUTS
            ppLeftGeom          : IGeometry**
            ppRightGeom         : IGeometry**'''
        return super(IPolyline3, self).TouchCut(pCutter)
    def get_EnumShortestPath(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IPolyline2.get_EnumShortestPath (from IPolyline2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long

           OUTPUT
            shortPathEnum       : IEnumSegment**'''
        return super(IPolyline3, self).get_EnumShortestPath(fromPart, FromPoint, toPart, ToPoint)
    def Reshape(self, reshapeSource):
        '''Method IPolyline.Reshape (from IPolyline)

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline3, self).Reshape(reshapeSource)
    def SimplifyNetwork(self):
        '''Method IPolyline.SimplifyNetwork (from IPolyline)'''
        return super(IPolyline3, self).SimplifyNetwork()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolyline3, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline3, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolyline3, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline3, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline3, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline3, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolyline3, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolyline3, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline3, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline3, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolyline3, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline3, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline3, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolyline3, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolyline3, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolyline3, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolyline3, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolyline3, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolyline3, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolyline3, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolyline3, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolyline3, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolyline3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolyline3, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolyline3, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolyline3, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolyline3, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolyline3, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolyline3, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolyline3, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolyline3, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolyline3, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IPolyline4(_esriGeometry.IPolyline4):
    _IID = uuid.UUID('5fa07d6c-d2b7-4a83-870a-0fb8155a4376')

    def __init__(self, *args, **kw):
        super(IPolyline4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SimplifyEx(self, planarSimplify):
        '''Method IPolyline4.SimplifyEx

           INPUT
            planarSimplify      : VARIANT_BOOL'''
        return super(IPolyline4, self).SimplifyEx(planarSimplify)
    def TouchCut(self, pCutter):
        '''Method IPolyline3.TouchCut (from IPolyline3)

           INPUT
            pCutter             : IPolyline*

           OUTPUTS
            ppLeftGeom          : IGeometry**
            ppRightGeom         : IGeometry**'''
        return super(IPolyline4, self).TouchCut(pCutter)
    def get_EnumShortestPath(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IPolyline2.get_EnumShortestPath (from IPolyline2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long

           OUTPUT
            shortPathEnum       : IEnumSegment**'''
        return super(IPolyline4, self).get_EnumShortestPath(fromPart, FromPoint, toPart, ToPoint)
    def Reshape(self, reshapeSource):
        '''Method IPolyline.Reshape (from IPolyline)

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline4, self).Reshape(reshapeSource)
    def SimplifyNetwork(self):
        '''Method IPolyline.SimplifyNetwork (from IPolyline)'''
        return super(IPolyline4, self).SimplifyNetwork()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolyline4, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline4, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolyline4, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline4, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline4, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline4, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolyline4, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolyline4, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline4, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline4, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolyline4, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline4, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline4, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolyline4, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolyline4, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolyline4, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolyline4, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolyline4, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolyline4, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolyline4, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolyline4, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolyline4, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolyline4, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolyline4, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolyline4, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolyline4, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolyline4, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolyline4, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolyline4, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolyline4, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolyline4, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolyline4, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IPolyline5(_esriGeometry.IPolyline5):
    _IID = uuid.UUID('c6a70c30-f30a-4649-8c01-48dfdfa97c2a')

    def __init__(self, *args, **kw):
        super(IPolyline5, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ReshapeEx(self, reshapeSource, bInterpolateReshaped):
        '''Method IPolyline5.ReshapeEx

           INPUTS
            reshapeSource       : IPath*
            bInterpolateReshaped: VARIANT_BOOL

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline5, self).ReshapeEx(reshapeSource, bInterpolateReshaped)
    def SimplifyEx(self, planarSimplify):
        '''Method IPolyline4.SimplifyEx (from IPolyline4)

           INPUT
            planarSimplify      : VARIANT_BOOL'''
        return super(IPolyline5, self).SimplifyEx(planarSimplify)
    def TouchCut(self, pCutter):
        '''Method IPolyline3.TouchCut (from IPolyline3)

           INPUT
            pCutter             : IPolyline*

           OUTPUTS
            ppLeftGeom          : IGeometry**
            ppRightGeom         : IGeometry**'''
        return super(IPolyline5, self).TouchCut(pCutter)
    def get_EnumShortestPath(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IPolyline2.get_EnumShortestPath (from IPolyline2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long

           OUTPUT
            shortPathEnum       : IEnumSegment**'''
        return super(IPolyline5, self).get_EnumShortestPath(fromPart, FromPoint, toPart, ToPoint)
    def Reshape(self, reshapeSource):
        '''Method IPolyline.Reshape (from IPolyline)

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline5, self).Reshape(reshapeSource)
    def SimplifyNetwork(self):
        '''Method IPolyline.SimplifyNetwork (from IPolyline)'''
        return super(IPolyline5, self).SimplifyNetwork()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolyline5, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline5, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolyline5, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline5, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline5, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline5, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolyline5, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolyline5, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline5, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline5, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolyline5, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline5, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline5, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolyline5, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolyline5, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolyline5, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolyline5, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolyline5, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolyline5, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolyline5, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolyline5, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolyline5, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolyline5, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolyline5, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolyline5, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolyline5, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolyline5, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolyline5, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolyline5, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolyline5, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolyline5, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolyline5, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IPolyline6(_esriGeometry.IPolyline6):
    _IID = uuid.UUID('da17ca7a-4c0e-410a-be7d-8e0e274475a2')

    def __init__(self, *args, **kw):
        super(IPolyline6, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SimplifyNonPlanar(self):
        '''Method IPolyline6.SimplifyNonPlanar'''
        return super(IPolyline6, self).SimplifyNonPlanar()
    def get_IsSimpleNonPlanar(self):
        '''Method IPolyline6.get_IsSimpleNonPlanar

           OUTPUTS
            pReason             : esriNonSimpleReasonEnum*
            pbIsSimpleNonPlanar : VARIANT_BOOL*'''
        return super(IPolyline6, self).get_IsSimpleNonPlanar()
    def ReshapeEx(self, reshapeSource, bInterpolateReshaped):
        '''Method IPolyline5.ReshapeEx (from IPolyline5)

           INPUTS
            reshapeSource       : IPath*
            bInterpolateReshaped: VARIANT_BOOL

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline6, self).ReshapeEx(reshapeSource, bInterpolateReshaped)
    def SimplifyEx(self, planarSimplify):
        '''Method IPolyline4.SimplifyEx (from IPolyline4)

           INPUT
            planarSimplify      : VARIANT_BOOL'''
        return super(IPolyline6, self).SimplifyEx(planarSimplify)
    def TouchCut(self, pCutter):
        '''Method IPolyline3.TouchCut (from IPolyline3)

           INPUT
            pCutter             : IPolyline*

           OUTPUTS
            ppLeftGeom          : IGeometry**
            ppRightGeom         : IGeometry**'''
        return super(IPolyline6, self).TouchCut(pCutter)
    def get_EnumShortestPath(self, fromPart, FromPoint, toPart, ToPoint):
        '''Method IPolyline2.get_EnumShortestPath (from IPolyline2)

           INPUTS
            fromPart            : long
            FromPoint           : long
            toPart              : long
            ToPoint             : long

           OUTPUT
            shortPathEnum       : IEnumSegment**'''
        return super(IPolyline6, self).get_EnumShortestPath(fromPart, FromPoint, toPart, ToPoint)
    def Reshape(self, reshapeSource):
        '''Method IPolyline.Reshape (from IPolyline)

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            didReshape          : VARIANT_BOOL*'''
        return super(IPolyline6, self).Reshape(reshapeSource)
    def SimplifyNetwork(self):
        '''Method IPolyline.SimplifyNetwork (from IPolyline)'''
        return super(IPolyline6, self).SimplifyNetwork()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolyline6, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline6, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolyline6, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolyline6, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline6, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolyline6, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolyline6, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolyline6, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline6, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolyline6, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolyline6, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline6, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolyline6, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolyline6, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolyline6, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolyline6, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolyline6, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolyline6, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolyline6, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolyline6, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolyline6, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolyline6, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolyline6, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolyline6, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolyline6, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolyline6, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolyline6, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolyline6, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolyline6, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolyline6, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolyline6, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolyline6, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsSimpleNonPlanar = property(get_IsSimpleNonPlanar, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IConstructMultiPatch(_esriGeometry.IConstructMultiPatch):
    _IID = uuid.UUID('51cde393-03b4-11d4-9f56-00c04f6bdf0d')
    def ConstructExtrudeFromTo(self, fromZ, toZ, baseGeom):
        '''Method IConstructMultiPatch.ConstructExtrudeFromTo

           INPUTS
            fromZ               : double
            toZ                 : double
            baseGeom            : IGeometry*'''
        return super(IConstructMultiPatch, self).ConstructExtrudeFromTo(fromZ, toZ, baseGeom)
    def ConstructExtrudeAbsolute(self, toZ, baseGeom):
        '''Method IConstructMultiPatch.ConstructExtrudeAbsolute

           INPUTS
            toZ                 : double
            baseGeom            : IGeometry*'''
        return super(IConstructMultiPatch, self).ConstructExtrudeAbsolute(toZ, baseGeom)
    def ConstructExtrudeBetween(self, fromSurface, toSurface, baseGeom):
        '''Method IConstructMultiPatch.ConstructExtrudeBetween

           INPUTS
            fromSurface         : IFunctionalSurface*
            toSurface           : IFunctionalSurface*
            baseGeom            : IGeometry*'''
        return super(IConstructMultiPatch, self).ConstructExtrudeBetween(fromSurface, toSurface, baseGeom)
    def ConstructExtrudeAlongLine(self, extrusionLine, baseGeom):
        '''Method IConstructMultiPatch.ConstructExtrudeAlongLine

           INPUTS
            extrusionLine       : ILine*
            baseGeom            : IGeometry*'''
        return super(IConstructMultiPatch, self).ConstructExtrudeAlongLine(extrusionLine, baseGeom)
    def ConstructExtrudeRelative(self, extrusionVector, baseGeom):
        '''Method IConstructMultiPatch.ConstructExtrudeRelative

           INPUTS
            extrusionVector     : IVector3D*
            baseGeom            : IGeometry*'''
        return super(IConstructMultiPatch, self).ConstructExtrudeRelative(extrusionVector, baseGeom)
    def ConstructExtrude(self, OffsetZ, baseGeom):
        '''Method IConstructMultiPatch.ConstructExtrude

           INPUTS
            OffsetZ             : double
            baseGeom            : IGeometry*'''
        return super(IConstructMultiPatch, self).ConstructExtrude(OffsetZ, baseGeom)

class IExtrude(_esriGeometry.IExtrude):
    _IID = uuid.UUID('6b256ae0-1cde-11d4-9f5c-00c04f6bdf0d')
    def ExtrudeFromTo(self, fromZ, toZ, baseGeom):
        '''Method IExtrude.ExtrudeFromTo

           INPUTS
            fromZ               : double
            toZ                 : double
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude, self).ExtrudeFromTo(fromZ, toZ, baseGeom)
    def ExtrudeAbsolute(self, toZ, baseGeom):
        '''Method IExtrude.ExtrudeAbsolute

           INPUTS
            toZ                 : double
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude, self).ExtrudeAbsolute(toZ, baseGeom)
    def ExtrudeBetween(self, fromSurface, toSurface, baseGeom):
        '''Method IExtrude.ExtrudeBetween

           INPUTS
            fromSurface         : IFunctionalSurface*
            toSurface           : IFunctionalSurface*
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude, self).ExtrudeBetween(fromSurface, toSurface, baseGeom)
    def ExtrudeAlongLine(self, extrusionLine, baseGeom):
        '''Method IExtrude.ExtrudeAlongLine

           INPUTS
            extrusionLine       : ILine*
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude, self).ExtrudeAlongLine(extrusionLine, baseGeom)
    def ExtrudeRelative(self, extrusionVector, baseGeom):
        '''Method IExtrude.ExtrudeRelative

           INPUTS
            extrusionVector     : IVector3D*
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude, self).ExtrudeRelative(extrusionVector, baseGeom)
    def Extrude(self, OffsetZ, baseGeom):
        '''Method IExtrude.Extrude

           INPUTS
            OffsetZ             : double
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude, self).Extrude(OffsetZ, baseGeom)

class IExtrude2(_esriGeometry.IExtrude2):
    _IID = uuid.UUID('177b5661-e873-47ac-aa42-2457ff6968f3')

    def __init__(self, *args, **kw):
        super(IExtrude2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_GenerateNoBottoms(self, extrudeWithoutBottoms):
        '''Method IExtrude2.put_GenerateNoBottoms

           INPUT
            extrudeWithoutBottoms: VARIANT_BOOL'''
        return super(IExtrude2, self).put_GenerateNoBottoms(extrudeWithoutBottoms)
    def get_GenerateNoBottoms(self):
        '''Method IExtrude2.get_GenerateNoBottoms

           OUTPUT
            extrudeWithoutBottoms: VARIANT_BOOL*'''
        return super(IExtrude2, self).get_GenerateNoBottoms()
    def ExtrudeFromTo(self, fromZ, toZ, baseGeom):
        '''Method IExtrude.ExtrudeFromTo (from IExtrude)

           INPUTS
            fromZ               : double
            toZ                 : double
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude2, self).ExtrudeFromTo(fromZ, toZ, baseGeom)
    def ExtrudeAbsolute(self, toZ, baseGeom):
        '''Method IExtrude.ExtrudeAbsolute (from IExtrude)

           INPUTS
            toZ                 : double
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude2, self).ExtrudeAbsolute(toZ, baseGeom)
    def ExtrudeBetween(self, fromSurface, toSurface, baseGeom):
        '''Method IExtrude.ExtrudeBetween (from IExtrude)

           INPUTS
            fromSurface         : IFunctionalSurface*
            toSurface           : IFunctionalSurface*
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude2, self).ExtrudeBetween(fromSurface, toSurface, baseGeom)
    def ExtrudeAlongLine(self, extrusionLine, baseGeom):
        '''Method IExtrude.ExtrudeAlongLine (from IExtrude)

           INPUTS
            extrusionLine       : ILine*
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude2, self).ExtrudeAlongLine(extrusionLine, baseGeom)
    def ExtrudeRelative(self, extrusionVector, baseGeom):
        '''Method IExtrude.ExtrudeRelative (from IExtrude)

           INPUTS
            extrusionVector     : IVector3D*
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude2, self).ExtrudeRelative(extrusionVector, baseGeom)
    def Extrude(self, OffsetZ, baseGeom):
        '''Method IExtrude.Extrude (from IExtrude)

           INPUTS
            OffsetZ             : double
            baseGeom            : IGeometry*

           OUTPUT
            extrudedGeom        : IGeometry**'''
        return super(IExtrude2, self).Extrude(OffsetZ, baseGeom)
    GenerateNoBottoms = property(get_GenerateNoBottoms, put_GenerateNoBottoms, None)

class IZ(_esriGeometry.IZ):
    _IID = uuid.UUID('fe5d57ef-3052-11d4-9f5e-00c04f6bdf0d')
    def get_ZVertical(self):
        '''Method IZ.get_ZVertical

           OUTPUT
            ZVertical           : VARIANT_BOOL*'''
        return super(IZ, self).get_ZVertical()
    def InterpolateFromSurface(self, interpolationSurface):
        '''Method IZ.InterpolateFromSurface

           INPUT
            interpolationSurface: IFunctionalSurface*'''
        return super(IZ, self).InterpolateFromSurface(interpolationSurface)
    def InterpolateZsBetween(self, startPart, startPoint, endPart, endPoint):
        '''Method IZ.InterpolateZsBetween

           INPUTS
            startPart           : long
            startPoint          : long
            endPart             : long
            endPoint            : long'''
        return super(IZ, self).InterpolateZsBetween(startPart, startPoint, endPart, endPoint)
    def CalculateNonSimpleZs(self):
        '''Method IZ.CalculateNonSimpleZs'''
        return super(IZ, self).CalculateNonSimpleZs()
    def SetConstantZ(self, zLevel):
        '''Method IZ.SetConstantZ

           INPUT
            zLevel              : double'''
        return super(IZ, self).SetConstantZ(zLevel)
    def get_ZMin(self):
        '''Method IZCollection.get_ZMin (from IZCollection)

           OUTPUT
            ZMin                : double*'''
        return super(IZ, self).get_ZMin()
    def get_ZMax(self):
        '''Method IZCollection.get_ZMax (from IZCollection)

           OUTPUT
            ZMax                : double*'''
        return super(IZ, self).get_ZMax()
    def MultiplyZs(self, factor):
        '''Method IZCollection.MultiplyZs (from IZCollection)

           INPUT
            factor              : double'''
        return super(IZ, self).MultiplyZs(factor)
    def OffsetZs(self, Offset):
        '''Method IZCollection.OffsetZs (from IZCollection)

           INPUT
            Offset              : double'''
        return super(IZ, self).OffsetZs(Offset)
    ZMax = property(get_ZMax, None, None)
    ZMin = property(get_ZMin, None, None)
    ZVertical = property(get_ZVertical, None, None)

class IZ2(_esriGeometry.IZ2):
    _IID = uuid.UUID('473b374d-0f02-461a-b60e-070045c6110b')
    def SetNonSimpleZs(self, zLevel):
        '''Method IZ2.SetNonSimpleZs

           INPUT
            zLevel              : double'''
        return super(IZ2, self).SetNonSimpleZs(zLevel)
    def get_ZVertical(self):
        '''Method IZ.get_ZVertical (from IZ)

           OUTPUT
            ZVertical           : VARIANT_BOOL*'''
        return super(IZ2, self).get_ZVertical()
    def InterpolateFromSurface(self, interpolationSurface):
        '''Method IZ.InterpolateFromSurface (from IZ)

           INPUT
            interpolationSurface: IFunctionalSurface*'''
        return super(IZ2, self).InterpolateFromSurface(interpolationSurface)
    def InterpolateZsBetween(self, startPart, startPoint, endPart, endPoint):
        '''Method IZ.InterpolateZsBetween (from IZ)

           INPUTS
            startPart           : long
            startPoint          : long
            endPart             : long
            endPoint            : long'''
        return super(IZ2, self).InterpolateZsBetween(startPart, startPoint, endPart, endPoint)
    def CalculateNonSimpleZs(self):
        '''Method IZ.CalculateNonSimpleZs (from IZ)'''
        return super(IZ2, self).CalculateNonSimpleZs()
    def SetConstantZ(self, zLevel):
        '''Method IZ.SetConstantZ (from IZ)

           INPUT
            zLevel              : double'''
        return super(IZ2, self).SetConstantZ(zLevel)
    def get_ZMin(self):
        '''Method IZCollection.get_ZMin (from IZCollection)

           OUTPUT
            ZMin                : double*'''
        return super(IZ2, self).get_ZMin()
    def get_ZMax(self):
        '''Method IZCollection.get_ZMax (from IZCollection)

           OUTPUT
            ZMax                : double*'''
        return super(IZ2, self).get_ZMax()
    def MultiplyZs(self, factor):
        '''Method IZCollection.MultiplyZs (from IZCollection)

           INPUT
            factor              : double'''
        return super(IZ2, self).MultiplyZs(factor)
    def OffsetZs(self, Offset):
        '''Method IZCollection.OffsetZs (from IZCollection)

           INPUT
            Offset              : double'''
        return super(IZ2, self).OffsetZs(Offset)
    ZMax = property(get_ZMax, None, None)
    ZMin = property(get_ZMin, None, None)
    ZVertical = property(get_ZVertical, None, None)

class IVertexAttribute(_esriGeometry.IVertexAttribute):
    _IID = uuid.UUID('ab2a8c25-d660-11d2-9f2a-00c04f6bdf0d')
    def get_VertexAttributeSimple(self, attributeType):
        '''Method IVertexAttribute.get_VertexAttributeSimple

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attribSimple        : VARIANT_BOOL*'''
        return super(IVertexAttribute, self).get_VertexAttributeSimple(attributeType)
    def get_VertexAttributeMin(self, attributeType):
        '''Method IVertexAttribute.get_VertexAttributeMin

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeMin        : double*'''
        return super(IVertexAttribute, self).get_VertexAttributeMin(attributeType)
    def get_VertexAttributeMax(self, attributeType):
        '''Method IVertexAttribute.get_VertexAttributeMax

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeMax        : double*'''
        return super(IVertexAttribute, self).get_VertexAttributeMax(attributeType)
    def MultiplyVertexAttributes(self, attributeType, factor):
        '''Method IVertexAttribute.MultiplyVertexAttributes

           INPUTS
            attributeType       : esriGeometryAttributes
            factor              : double'''
        return super(IVertexAttribute, self).MultiplyVertexAttributes(attributeType, factor)
    def OffsetVertexAttributes(self, attributeType, Offset):
        '''Method IVertexAttribute.OffsetVertexAttributes

           INPUTS
            attributeType       : esriGeometryAttributes
            Offset              : double'''
        return super(IVertexAttribute, self).OffsetVertexAttributes(attributeType, Offset)
    def InterpolateVertexAttributesBetween(self, interpolatedAttributes, startPart, startPoint, endPart, endPoint):
        '''Method IVertexAttribute.InterpolateVertexAttributesBetween

           INPUTS
            interpolatedAttributes: long
            startPart           : long
            startPoint          : long
            endPart             : long
            endPoint            : long'''
        return super(IVertexAttribute, self).InterpolateVertexAttributesBetween(interpolatedAttributes, startPart, startPoint, endPart, endPoint)
    def ExtrapolateVertexAttributes(self, attributeType, extrapolationStyle, startPart, startPoint, endPart, endPoint):
        '''Method IVertexAttribute.ExtrapolateVertexAttributes

           INPUTS
            attributeType       : esriGeometryAttributes
            extrapolationStyle  : esriExtrapolationEnum
            startPart           : long
            startPoint          : long
            endPart             : long
            endPoint            : long'''
        return super(IVertexAttribute, self).ExtrapolateVertexAttributes(attributeType, extrapolationStyle, startPart, startPoint, endPart, endPoint)
    def CalculateNonSimpleVertexAttributes(self, attributeType):
        '''Method IVertexAttribute.CalculateNonSimpleVertexAttributes

           INPUT
            attributeType       : esriGeometryAttributes'''
        return super(IVertexAttribute, self).CalculateNonSimpleVertexAttributes(attributeType)
    def TransferAttributes(self, srcCurve):
        '''Method IVertexAttribute.TransferAttributes

           INPUT
            srcCurve            : ICurve*'''
        return super(IVertexAttribute, self).TransferAttributes(srcCurve)
    VertexAttributeMax = IndexProperty(get_VertexAttributeMax, None)
    VertexAttributeMin = IndexProperty(get_VertexAttributeMin, None)
    VertexAttributeSimple = IndexProperty(get_VertexAttributeSimple, None)

class IVertexAttribute2(_esriGeometry.IVertexAttribute2):
    _IID = uuid.UUID('2356db4e-721c-45d1-8a22-9dd1865bfa8f')
    def CalculateNonSimpleVertexAttributes2(self, attributeType, useSegmentExtrapolation, applySingleAtt):
        '''Method IVertexAttribute2.CalculateNonSimpleVertexAttributes2

           INPUTS
            attributeType       : esriGeometryAttributes
            useSegmentExtrapolation: VARIANT_BOOL
            applySingleAtt      : VARIANT_BOOL'''
        return super(IVertexAttribute2, self).CalculateNonSimpleVertexAttributes2(attributeType, useSegmentExtrapolation, applySingleAtt)
    def ReplaceVertexAttributes(self, attributeType, oldAtt, newAtt):
        '''Method IVertexAttribute2.ReplaceVertexAttributes

           INPUTS
            attributeType       : esriGeometryAttributes
            oldAtt              : double
            newAtt              : double'''
        return super(IVertexAttribute2, self).ReplaceVertexAttributes(attributeType, oldAtt, newAtt)
    def get_VertexAttributeSimple(self, attributeType):
        '''Method IVertexAttribute.get_VertexAttributeSimple (from IVertexAttribute)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attribSimple        : VARIANT_BOOL*'''
        return super(IVertexAttribute2, self).get_VertexAttributeSimple(attributeType)
    def get_VertexAttributeMin(self, attributeType):
        '''Method IVertexAttribute.get_VertexAttributeMin (from IVertexAttribute)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeMin        : double*'''
        return super(IVertexAttribute2, self).get_VertexAttributeMin(attributeType)
    def get_VertexAttributeMax(self, attributeType):
        '''Method IVertexAttribute.get_VertexAttributeMax (from IVertexAttribute)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeMax        : double*'''
        return super(IVertexAttribute2, self).get_VertexAttributeMax(attributeType)
    def MultiplyVertexAttributes(self, attributeType, factor):
        '''Method IVertexAttribute.MultiplyVertexAttributes (from IVertexAttribute)

           INPUTS
            attributeType       : esriGeometryAttributes
            factor              : double'''
        return super(IVertexAttribute2, self).MultiplyVertexAttributes(attributeType, factor)
    def OffsetVertexAttributes(self, attributeType, Offset):
        '''Method IVertexAttribute.OffsetVertexAttributes (from IVertexAttribute)

           INPUTS
            attributeType       : esriGeometryAttributes
            Offset              : double'''
        return super(IVertexAttribute2, self).OffsetVertexAttributes(attributeType, Offset)
    def InterpolateVertexAttributesBetween(self, interpolatedAttributes, startPart, startPoint, endPart, endPoint):
        '''Method IVertexAttribute.InterpolateVertexAttributesBetween (from IVertexAttribute)

           INPUTS
            interpolatedAttributes: long
            startPart           : long
            startPoint          : long
            endPart             : long
            endPoint            : long'''
        return super(IVertexAttribute2, self).InterpolateVertexAttributesBetween(interpolatedAttributes, startPart, startPoint, endPart, endPoint)
    def ExtrapolateVertexAttributes(self, attributeType, extrapolationStyle, startPart, startPoint, endPart, endPoint):
        '''Method IVertexAttribute.ExtrapolateVertexAttributes (from IVertexAttribute)

           INPUTS
            attributeType       : esriGeometryAttributes
            extrapolationStyle  : esriExtrapolationEnum
            startPart           : long
            startPoint          : long
            endPart             : long
            endPoint            : long'''
        return super(IVertexAttribute2, self).ExtrapolateVertexAttributes(attributeType, extrapolationStyle, startPart, startPoint, endPart, endPoint)
    def CalculateNonSimpleVertexAttributes(self, attributeType):
        '''Method IVertexAttribute.CalculateNonSimpleVertexAttributes (from IVertexAttribute)

           INPUT
            attributeType       : esriGeometryAttributes'''
        return super(IVertexAttribute2, self).CalculateNonSimpleVertexAttributes(attributeType)
    def TransferAttributes(self, srcCurve):
        '''Method IVertexAttribute.TransferAttributes (from IVertexAttribute)

           INPUT
            srcCurve            : ICurve*'''
        return super(IVertexAttribute2, self).TransferAttributes(srcCurve)
    VertexAttributeMax = IndexProperty(get_VertexAttributeMax, None)
    VertexAttributeMin = IndexProperty(get_VertexAttributeMin, None)
    VertexAttributeSimple = IndexProperty(get_VertexAttributeSimple, None)

class IConstructAngle(_esriGeometry.IConstructAngle):
    _IID = uuid.UUID('7e9812d8-5ac6-11d1-8352-0000f8775be9')
    def ConstructThreePoint(self, From, through, to):
        '''Method IConstructAngle.ConstructThreePoint

           INPUTS
            from                : IPoint*
            through             : IPoint*
            to                  : IPoint*

           OUTPUT
            outAngle            : double*'''
        return super(IConstructAngle, self).ConstructThreePoint(From, through, to)
    def ConstructLine(self, inLine):
        '''Method IConstructAngle.ConstructLine

           INPUT
            inLine              : ILine*

           OUTPUT
            outAngle            : double*'''
        return super(IConstructAngle, self).ConstructLine(inLine)

class IConstructPath(_esriGeometry.IConstructPath):
    _IID = uuid.UUID('f4fd2ec0-990a-11d1-bc7d-0000f875bcce')
    def ConstructRigidStretch(self, srcPath, stretchStartIndex, startAnchor, endAnchor, stretchEnd):
        '''Method IConstructPath.ConstructRigidStretch

           INPUTS
            srcPath             : IPath*
            stretchStartIndex   : long
            startAnchor         : long
            endAnchor           : long
            stretchEnd          : IPoint*'''
        return super(IConstructPath, self).ConstructRigidStretch(srcPath, stretchStartIndex, startAnchor, endAnchor, stretchEnd)

class IConstructPoint(_esriGeometry.IConstructPoint):
    _IID = uuid.UUID('eaf5d48c-c666-11d0-8307-0000f8034032')
    def ConstructAlong(self, curve, extension, distance, asRatio):
        '''Method IConstructPoint.ConstructAlong

           INPUTS
            curve               : ICurve*
            extension           : esriSegmentExtension
            distance            : double
            asRatio             : VARIANT_BOOL'''
        return super(IConstructPoint, self).ConstructAlong(curve, extension, distance, asRatio)
    def ConstructAngleDistance(self, p, inAngle, distance):
        '''Method IConstructPoint.ConstructAngleDistance

           INPUTS
            p                   : IPoint*
            inAngle             : double
            distance            : double'''
        return super(IConstructPoint, self).ConstructAngleDistance(p, inAngle, distance)
    def ConstructDeflection(self, baseLine, distance, inAngle):
        '''Method IConstructPoint.ConstructDeflection

           INPUTS
            baseLine            : ILine*
            distance            : double
            inAngle             : double'''
        return super(IConstructPoint, self).ConstructDeflection(baseLine, distance, inAngle)
    def ConstructDeflectionIntersection(self, baseLine, startAngle, endAngle, OnRightSide):
        '''Method IConstructPoint.ConstructDeflectionIntersection

           INPUTS
            baseLine            : ILine*
            startAngle          : double
            endAngle            : double
            OnRightSide         : VARIANT_BOOL'''
        return super(IConstructPoint, self).ConstructDeflectionIntersection(baseLine, startAngle, endAngle, OnRightSide)
    def ConstructThreePointResection(self, point1, angleP1P2, point2, angleP2P3, point3):
        '''Method IConstructPoint.ConstructThreePointResection

           INPUTS
            point1              : IPoint*
            angleP1P2           : double
            point2              : IPoint*
            angleP2P3           : double
            point3              : IPoint*

           OUTPUT
            arcAngle            : double*'''
        return super(IConstructPoint, self).ConstructThreePointResection(point1, angleP1P2, point2, angleP2P3, point3)
    def ConstructOffset(self, curve, extension, distance, asRatio, Offset):
        '''Method IConstructPoint.ConstructOffset

           INPUTS
            curve               : ICurve*
            extension           : esriSegmentExtension
            distance            : double
            asRatio             : VARIANT_BOOL
            Offset              : double'''
        return super(IConstructPoint, self).ConstructOffset(curve, extension, distance, asRatio, Offset)
    def ConstructParallel(self, Segment, extension, start, distance):
        '''Method IConstructPoint.ConstructParallel

           INPUTS
            Segment             : ISegment*
            extension           : esriSegmentExtension
            start               : IPoint*
            distance            : double'''
        return super(IConstructPoint, self).ConstructParallel(Segment, extension, start, distance)
    def ConstructAngleBisector(self, From, through, to, distance, useAcuteAngle):
        '''Method IConstructPoint.ConstructAngleBisector

           INPUTS
            from                : IPoint*
            through             : IPoint*
            to                  : IPoint*
            distance            : double
            useAcuteAngle       : VARIANT_BOOL'''
        return super(IConstructPoint, self).ConstructAngleBisector(From, through, to, distance, useAcuteAngle)
    def ConstructPerpendicular(self, base, extension, p, distance, bUseLineOrientation):
        '''Method IConstructPoint.ConstructPerpendicular

           INPUTS
            base                : ISegment*
            extension           : esriSegmentExtension
            p                   : IPoint*
            distance            : double
            bUseLineOrientation : VARIANT_BOOL'''
        return super(IConstructPoint, self).ConstructPerpendicular(base, extension, p, distance, bUseLineOrientation)
    def ConstructAngleIntersection(self, p1, angle1, p2, angle2):
        '''Method IConstructPoint.ConstructAngleIntersection

           INPUTS
            p1                  : IPoint*
            angle1              : double
            p2                  : IPoint*
            angle2              : double'''
        return super(IConstructPoint, self).ConstructAngleIntersection(p1, angle1, p2, angle2)

class IConstructPoint2(_esriGeometry.IConstructPoint2):
    _IID = uuid.UUID('affe2936-6d7d-4261-b391-0de4269dd4b3')
    def ConstructAverage(self, Points, attributeType):
        '''Method IConstructPoint2.ConstructAverage

           INPUTS
            Points              : IPointCollection*
            attributeType       : esriGeometryAttributes'''
        return super(IConstructPoint2, self).ConstructAverage(Points, attributeType)
    def ConstructAlong(self, curve, extension, distance, asRatio):
        '''Method IConstructPoint.ConstructAlong (from IConstructPoint)

           INPUTS
            curve               : ICurve*
            extension           : esriSegmentExtension
            distance            : double
            asRatio             : VARIANT_BOOL'''
        return super(IConstructPoint2, self).ConstructAlong(curve, extension, distance, asRatio)
    def ConstructAngleDistance(self, p, inAngle, distance):
        '''Method IConstructPoint.ConstructAngleDistance (from IConstructPoint)

           INPUTS
            p                   : IPoint*
            inAngle             : double
            distance            : double'''
        return super(IConstructPoint2, self).ConstructAngleDistance(p, inAngle, distance)
    def ConstructDeflection(self, baseLine, distance, inAngle):
        '''Method IConstructPoint.ConstructDeflection (from IConstructPoint)

           INPUTS
            baseLine            : ILine*
            distance            : double
            inAngle             : double'''
        return super(IConstructPoint2, self).ConstructDeflection(baseLine, distance, inAngle)
    def ConstructDeflectionIntersection(self, baseLine, startAngle, endAngle, OnRightSide):
        '''Method IConstructPoint.ConstructDeflectionIntersection (from IConstructPoint)

           INPUTS
            baseLine            : ILine*
            startAngle          : double
            endAngle            : double
            OnRightSide         : VARIANT_BOOL'''
        return super(IConstructPoint2, self).ConstructDeflectionIntersection(baseLine, startAngle, endAngle, OnRightSide)
    def ConstructThreePointResection(self, point1, angleP1P2, point2, angleP2P3, point3):
        '''Method IConstructPoint.ConstructThreePointResection (from IConstructPoint)

           INPUTS
            point1              : IPoint*
            angleP1P2           : double
            point2              : IPoint*
            angleP2P3           : double
            point3              : IPoint*

           OUTPUT
            arcAngle            : double*'''
        return super(IConstructPoint2, self).ConstructThreePointResection(point1, angleP1P2, point2, angleP2P3, point3)
    def ConstructOffset(self, curve, extension, distance, asRatio, Offset):
        '''Method IConstructPoint.ConstructOffset (from IConstructPoint)

           INPUTS
            curve               : ICurve*
            extension           : esriSegmentExtension
            distance            : double
            asRatio             : VARIANT_BOOL
            Offset              : double'''
        return super(IConstructPoint2, self).ConstructOffset(curve, extension, distance, asRatio, Offset)
    def ConstructParallel(self, Segment, extension, start, distance):
        '''Method IConstructPoint.ConstructParallel (from IConstructPoint)

           INPUTS
            Segment             : ISegment*
            extension           : esriSegmentExtension
            start               : IPoint*
            distance            : double'''
        return super(IConstructPoint2, self).ConstructParallel(Segment, extension, start, distance)
    def ConstructAngleBisector(self, From, through, to, distance, useAcuteAngle):
        '''Method IConstructPoint.ConstructAngleBisector (from IConstructPoint)

           INPUTS
            from                : IPoint*
            through             : IPoint*
            to                  : IPoint*
            distance            : double
            useAcuteAngle       : VARIANT_BOOL'''
        return super(IConstructPoint2, self).ConstructAngleBisector(From, through, to, distance, useAcuteAngle)
    def ConstructPerpendicular(self, base, extension, p, distance, bUseLineOrientation):
        '''Method IConstructPoint.ConstructPerpendicular (from IConstructPoint)

           INPUTS
            base                : ISegment*
            extension           : esriSegmentExtension
            p                   : IPoint*
            distance            : double
            bUseLineOrientation : VARIANT_BOOL'''
        return super(IConstructPoint2, self).ConstructPerpendicular(base, extension, p, distance, bUseLineOrientation)
    def ConstructAngleIntersection(self, p1, angle1, p2, angle2):
        '''Method IConstructPoint.ConstructAngleIntersection (from IConstructPoint)

           INPUTS
            p1                  : IPoint*
            angle1              : double
            p2                  : IPoint*
            angle2              : double'''
        return super(IConstructPoint2, self).ConstructAngleIntersection(p1, angle1, p2, angle2)

class IConstructCurve(_esriGeometry.IConstructCurve):
    _IID = uuid.UUID('650cfdc0-d947-11d0-830d-0000f8034032')
    def ConstructOffset(self, inCurve, Offset, offsetHow, bevelRatio):
        '''Method IConstructCurve.ConstructOffset

           INPUTS
            inCurve             : IPolycurve*
            Offset              : double
            offsetHow           : VARIANT*
            bevelRatio          : VARIANT*'''
        return super(IConstructCurve, self).ConstructOffset(inCurve, Offset, offsetHow, bevelRatio)
    def ConstructKoch(self, p, r, recursionLevel):
        '''Method IConstructCurve.ConstructKoch

           INPUTS
            p                   : IPolycurve*
            r                   : double
            recursionLevel      : int'''
        return super(IConstructCurve, self).ConstructKoch(p, r, recursionLevel)
    def ConstructExtended(self, fromCurve, toCurve, extensionFlags):
        '''Method IConstructCurve.ConstructExtended

           INPUTS
            fromCurve           : ICurve*
            toCurve             : ICurve*
            extensionFlags      : long

           OUTPUT
            extensionsPerformed : VARIANT_BOOL*'''
        return super(IConstructCurve, self).ConstructExtended(fromCurve, toCurve, extensionFlags)

class IConstructCurve2(_esriGeometry.IConstructCurve2):
    _IID = uuid.UUID('4a877e3c-ba67-4f78-b1ef-a728c968d787')
    def ApproximateByBeziers(self, pInCurve, pMaxDistance, smoothClosedParts):
        '''Method IConstructCurve2.ApproximateByBeziers

           INPUTS
            pInCurve            : IPolycurve*
            pMaxDistance        : VARIANT*
            smoothClosedParts   : VARIANT*'''
        return super(IConstructCurve2, self).ApproximateByBeziers(pInCurve, pMaxDistance, smoothClosedParts)
    def ConstructOffset(self, inCurve, Offset, offsetHow, bevelRatio):
        '''Method IConstructCurve.ConstructOffset (from IConstructCurve)

           INPUTS
            inCurve             : IPolycurve*
            Offset              : double
            offsetHow           : VARIANT*
            bevelRatio          : VARIANT*'''
        return super(IConstructCurve2, self).ConstructOffset(inCurve, Offset, offsetHow, bevelRatio)
    def ConstructKoch(self, p, r, recursionLevel):
        '''Method IConstructCurve.ConstructKoch (from IConstructCurve)

           INPUTS
            p                   : IPolycurve*
            r                   : double
            recursionLevel      : int'''
        return super(IConstructCurve2, self).ConstructKoch(p, r, recursionLevel)
    def ConstructExtended(self, fromCurve, toCurve, extensionFlags):
        '''Method IConstructCurve.ConstructExtended (from IConstructCurve)

           INPUTS
            fromCurve           : ICurve*
            toCurve             : ICurve*
            extensionFlags      : long

           OUTPUT
            extensionsPerformed : VARIANT_BOOL*'''
        return super(IConstructCurve2, self).ConstructExtended(fromCurve, toCurve, extensionFlags)

class IConstructCurve3(_esriGeometry.IConstructCurve3):
    _IID = uuid.UUID('f45ae5d3-5a1d-4c09-8512-bd22b79bdc12')
    def ConstructExtendedEx(self, fromCurve, toCurve, extensionFlags):
        '''Method IConstructCurve3.ConstructExtendedEx

           INPUTS
            fromCurve           : ICurve*
            toCurve             : ICurve*
            extensionFlags      : long

           OUTPUTS
            extensionsPerformed : VARIANT_BOOL*
            addedModifiedSegments: IEnumSegment**'''
        return super(IConstructCurve3, self).ConstructExtendedEx(fromCurve, toCurve, extensionFlags)
    def ApproximateByBeziers(self, pInCurve, pMaxDistance, smoothClosedParts):
        '''Method IConstructCurve2.ApproximateByBeziers (from IConstructCurve2)

           INPUTS
            pInCurve            : IPolycurve*
            pMaxDistance        : VARIANT*
            smoothClosedParts   : VARIANT*'''
        return super(IConstructCurve3, self).ApproximateByBeziers(pInCurve, pMaxDistance, smoothClosedParts)
    def ConstructOffset(self, inCurve, Offset, offsetHow, bevelRatio):
        '''Method IConstructCurve.ConstructOffset (from IConstructCurve)

           INPUTS
            inCurve             : IPolycurve*
            Offset              : double
            offsetHow           : VARIANT*
            bevelRatio          : VARIANT*'''
        return super(IConstructCurve3, self).ConstructOffset(inCurve, Offset, offsetHow, bevelRatio)
    def ConstructKoch(self, p, r, recursionLevel):
        '''Method IConstructCurve.ConstructKoch (from IConstructCurve)

           INPUTS
            p                   : IPolycurve*
            r                   : double
            recursionLevel      : int'''
        return super(IConstructCurve3, self).ConstructKoch(p, r, recursionLevel)
    def ConstructExtended(self, fromCurve, toCurve, extensionFlags):
        '''Method IConstructCurve.ConstructExtended (from IConstructCurve)

           INPUTS
            fromCurve           : ICurve*
            toCurve             : ICurve*
            extensionFlags      : long

           OUTPUT
            extensionsPerformed : VARIANT_BOOL*'''
        return super(IConstructCurve3, self).ConstructExtended(fromCurve, toCurve, extensionFlags)

class IConstructCurve4(_esriGeometry.IConstructCurve4):
    _IID = uuid.UUID('448a9468-d7fb-4446-8914-771160c24b68')
    def ConstructOffset(self, pSrcCurve, Offset, offsetTol, offsetHow, __MIDL__IConstructCurve40000, bevelRatio):
        '''Method IConstructCurve4.ConstructOffset

           INPUTS
            pSrcCurve           : IPolycurve*
            Offset              : double
            offsetTol           : double
            offsetHow           : esriConstructOffsetEnum
            __MIDL__IConstructCurve40000: esriConstructOffsetSimplifyEnum
            bevelRatio          : double'''
        return super(IConstructCurve4, self).ConstructOffset(pSrcCurve, Offset, offsetTol, offsetHow, __MIDL__IConstructCurve40000, bevelRatio)

class IConstructLine(_esriGeometry.IConstructLine):
    _IID = uuid.UUID('199120b6-c677-11d0-8307-0000f8034032')
    def ConstructAngleBisector(self, From, through, to, Length, useAcuteAngle):
        '''Method IConstructLine.ConstructAngleBisector

           INPUTS
            from                : IPoint*
            through             : IPoint*
            to                  : IPoint*
            Length              : double
            useAcuteAngle       : VARIANT_BOOL'''
        return super(IConstructLine, self).ConstructAngleBisector(From, through, to, Length, useAcuteAngle)
    def ConstructExtended(self, inLine, extendHow):
        '''Method IConstructLine.ConstructExtended

           INPUTS
            inLine              : ILine*
            extendHow           : esriSegmentExtension'''
        return super(IConstructLine, self).ConstructExtended(inLine, extendHow)

class IConstructCircularArc(_esriGeometry.IConstructCircularArc):
    _IID = uuid.UUID('91b6f492-c70a-11d0-8307-0000f8034032')
    def ConstructEndPointsRadius(self, From, to, isCCW, inRadius, IsMinor):
        '''Method IConstructCircularArc.ConstructEndPointsRadius

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            inRadius            : double
            IsMinor             : VARIANT_BOOL'''
        return super(IConstructCircularArc, self).ConstructEndPointsRadius(From, to, isCCW, inRadius, IsMinor)
    def ConstructEndPointsAngle(self, From, to, isCCW, CentralAngle):
        '''Method IConstructCircularArc.ConstructEndPointsAngle

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            CentralAngle        : double'''
        return super(IConstructCircularArc, self).ConstructEndPointsAngle(From, to, isCCW, CentralAngle)
    def ConstructEndPointsArc(self, From, to, isCCW, arcDistance):
        '''Method IConstructCircularArc.ConstructEndPointsArc

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructEndPointsArc(From, to, isCCW, arcDistance)
    def ConstructEndPointsTangent(self, From, to, isCCW, tangentDistance):
        '''Method IConstructCircularArc.ConstructEndPointsTangent

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructEndPointsTangent(From, to, isCCW, tangentDistance)
    def ConstructArcDistance(self, Center, From, isCCW, arcDistance):
        '''Method IConstructCircularArc.ConstructArcDistance

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            isCCW               : VARIANT_BOOL
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructArcDistance(Center, From, isCCW, arcDistance)
    def ConstructChordDistance(self, Center, From, isCCW, chordDistance):
        '''Method IConstructCircularArc.ConstructChordDistance

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            isCCW               : VARIANT_BOOL
            chordDistance       : double'''
        return super(IConstructCircularArc, self).ConstructChordDistance(Center, From, isCCW, chordDistance)
    def ConstructTangentDistance(self, Center, From, isCCW, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentDistance

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            isCCW               : VARIANT_BOOL
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructTangentDistance(Center, From, isCCW, tangentDistance)
    def ConstructTangentRadiusArc(self, Segment, atStart, isCCW, inRadius, arcDistance):
        '''Method IConstructCircularArc.ConstructTangentRadiusArc

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructTangentRadiusArc(Segment, atStart, isCCW, inRadius, arcDistance)
    def ConstructTangentRadiusChord(self, Segment, atStart, isCCW, inRadius, chordDistance):
        '''Method IConstructCircularArc.ConstructTangentRadiusChord

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            chordDistance       : double'''
        return super(IConstructCircularArc, self).ConstructTangentRadiusChord(Segment, atStart, isCCW, inRadius, chordDistance)
    def ConstructTangentRadiusTangent(self, Segment, atStart, isCCW, inRadius, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentRadiusTangent

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructTangentRadiusTangent(Segment, atStart, isCCW, inRadius, tangentDistance)
    def ConstructTangentRadiusAngle(self, Segment, atStart, isCCW, inRadius, CentralAngle):
        '''Method IConstructCircularArc.ConstructTangentRadiusAngle

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            CentralAngle        : double'''
        return super(IConstructCircularArc, self).ConstructTangentRadiusAngle(Segment, atStart, isCCW, inRadius, CentralAngle)
    def ConstructTangentAngleArc(self, Segment, atStart, isCCW, CentralAngle, arcDistance):
        '''Method IConstructCircularArc.ConstructTangentAngleArc

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructTangentAngleArc(Segment, atStart, isCCW, CentralAngle, arcDistance)
    def ConstructTangentAngleChord(self, Segment, atStart, isCCW, CentralAngle, chordDistance):
        '''Method IConstructCircularArc.ConstructTangentAngleChord

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            chordDistance       : double'''
        return super(IConstructCircularArc, self).ConstructTangentAngleChord(Segment, atStart, isCCW, CentralAngle, chordDistance)
    def ConstructTangentAngleTangent(self, Segment, atStart, isCCW, CentralAngle, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentAngleTangent

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructTangentAngleTangent(Segment, atStart, isCCW, CentralAngle, tangentDistance)
    def ConstructTangentChordArc(self, Segment, atStart, isCCW, chordDistance, arcDistance):
        '''Method IConstructCircularArc.ConstructTangentChordArc

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructTangentChordArc(Segment, atStart, isCCW, chordDistance, arcDistance)
    def ConstructTangentChordTangent(self, Segment, atStart, isCCW, chordDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentChordTangent

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructTangentChordTangent(Segment, atStart, isCCW, chordDistance, tangentDistance)
    def ConstructTangentArcTangent(self, Segment, atStart, isCCW, arcDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentArcTangent

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            arcDistance         : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructTangentArcTangent(Segment, atStart, isCCW, arcDistance, tangentDistance)
    def ConstructBearingRadiusAngle(self, startPoint, inAngle, isCCW, inRadius, CentralAngle):
        '''Method IConstructCircularArc.ConstructBearingRadiusAngle

           INPUTS
            startPoint          : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            CentralAngle        : double'''
        return super(IConstructCircularArc, self).ConstructBearingRadiusAngle(startPoint, inAngle, isCCW, inRadius, CentralAngle)
    def ConstructBearingRadiusArc(self, From, inAngle, isCCW, inRadius, arcDistance):
        '''Method IConstructCircularArc.ConstructBearingRadiusArc

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructBearingRadiusArc(From, inAngle, isCCW, inRadius, arcDistance)
    def ConstructBearingRadiusChord(self, From, inAngle, isCCW, inRadius, chordDistance, IsMinor):
        '''Method IConstructCircularArc.ConstructBearingRadiusChord

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            chordDistance       : double
            IsMinor             : VARIANT_BOOL'''
        return super(IConstructCircularArc, self).ConstructBearingRadiusChord(From, inAngle, isCCW, inRadius, chordDistance, IsMinor)
    def ConstructBearingRadiusTangent(self, From, inAngle, isCCW, inRadius, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingRadiusTangent

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructBearingRadiusTangent(From, inAngle, isCCW, inRadius, tangentDistance)
    def ConstructBearingAngleArc(self, From, inAngle, isCCW, CentralAngle, arcDistance):
        '''Method IConstructCircularArc.ConstructBearingAngleArc

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructBearingAngleArc(From, inAngle, isCCW, CentralAngle, arcDistance)
    def ConstructBearingAngleChord(self, From, inAngle, isCCW, CentralAngle, chordDistance):
        '''Method IConstructCircularArc.ConstructBearingAngleChord

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            chordDistance       : double'''
        return super(IConstructCircularArc, self).ConstructBearingAngleChord(From, inAngle, isCCW, CentralAngle, chordDistance)
    def ConstructBearingAngleTangent(self, From, inAngle, isCCW, CentralAngle, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingAngleTangent

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructBearingAngleTangent(From, inAngle, isCCW, CentralAngle, tangentDistance)
    def ConstructBearingChordArc(self, From, inAngle, isCCW, chordDistance, arcDistance):
        '''Method IConstructCircularArc.ConstructBearingChordArc

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            arcDistance         : double'''
        return super(IConstructCircularArc, self).ConstructBearingChordArc(From, inAngle, isCCW, chordDistance, arcDistance)
    def ConstructBearingChordTangent(self, From, inAngle, isCCW, chordDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingChordTangent

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructBearingChordTangent(From, inAngle, isCCW, chordDistance, tangentDistance)
    def ConstructBearingArcTangent(self, From, inAngle, isCCW, arcDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingArcTangent

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            arcDistance         : double
            tangentDistance     : double'''
        return super(IConstructCircularArc, self).ConstructBearingArcTangent(From, inAngle, isCCW, arcDistance, tangentDistance)
    def ConstructThreePoints(self, From, middle, to, useExistingCenter):
        '''Method IConstructCircularArc.ConstructThreePoints

           INPUTS
            from                : IPoint*
            middle              : IPoint*
            to                  : IPoint*
            useExistingCenter   : VARIANT_BOOL'''
        return super(IConstructCircularArc, self).ConstructThreePoints(From, middle, to, useExistingCenter)
    def ConstructFilletPoint(self, s1, s2, From, hintPoint):
        '''Method IConstructCircularArc.ConstructFilletPoint

           INPUTS
            s1                  : ISegment*
            s2                  : ISegment*
            from                : IPoint*
            hintPoint           : IPoint*'''
        return super(IConstructCircularArc, self).ConstructFilletPoint(s1, s2, From, hintPoint)
    def ConstructFilletRadius(self, s1, s2, inRadius, hintPoint):
        '''Method IConstructCircularArc.ConstructFilletRadius

           INPUTS
            s1                  : ISegment*
            s2                  : ISegment*
            inRadius            : double
            hintPoint           : IPoint*'''
        return super(IConstructCircularArc, self).ConstructFilletRadius(s1, s2, inRadius, hintPoint)
    def QueryFilletRadiusRange(self, s1, s2, hintPoint):
        '''Method IConstructCircularArc.QueryFilletRadiusRange

           INPUTS
            s1                  : ISegment*
            s2                  : ISegment*
            hintPoint           : IPoint*

           OUTPUTS
            minRadius           : double*
            maxRadius           : double*'''
        return super(IConstructCircularArc, self).QueryFilletRadiusRange(s1, s2, hintPoint)
    def ConstructTangentAndPoint(self, s, atFrom, p):
        '''Method IConstructCircularArc.ConstructTangentAndPoint

           INPUTS
            s                   : ISegment*
            atFrom              : VARIANT_BOOL
            p                   : IPoint*'''
        return super(IConstructCircularArc, self).ConstructTangentAndPoint(s, atFrom, p)
    def ConstructEndPointsChordHeight(self, From, to, isCCW, ChordHeight):
        '''Method IConstructCircularArc.ConstructEndPointsChordHeight

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            ChordHeight         : double'''
        return super(IConstructCircularArc, self).ConstructEndPointsChordHeight(From, to, isCCW, ChordHeight)
    def ConstructCircle(self, CenterPoint, Radius, isCCW):
        '''Method IConstructCircularArc.ConstructCircle

           INPUTS
            CenterPoint         : IPoint*
            Radius              : double
            isCCW               : VARIANT_BOOL'''
        return super(IConstructCircularArc, self).ConstructCircle(CenterPoint, Radius, isCCW)

class IConstructCircularArc2(_esriGeometry.IConstructCircularArc2):
    _IID = uuid.UUID('f4ee06a7-7854-485d-9689-914be1b4e900')
    def ConstructChordDistanceEx(self, Center, From, isCCW, chordDistance, IsMinor):
        '''Method IConstructCircularArc2.ConstructChordDistanceEx

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            IsMinor             : VARIANT_BOOL'''
        return super(IConstructCircularArc2, self).ConstructChordDistanceEx(Center, From, isCCW, chordDistance, IsMinor)
    def ConstructTangentRadiusChordEx(self, Segment, atStart, isCCW, inRadius, chordDistance, IsMinor):
        '''Method IConstructCircularArc2.ConstructTangentRadiusChordEx

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            chordDistance       : double
            IsMinor             : VARIANT_BOOL'''
        return super(IConstructCircularArc2, self).ConstructTangentRadiusChordEx(Segment, atStart, isCCW, inRadius, chordDistance, IsMinor)
    def ConstructEndPointsRadius(self, From, to, isCCW, inRadius, IsMinor):
        '''Method IConstructCircularArc.ConstructEndPointsRadius (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            inRadius            : double
            IsMinor             : VARIANT_BOOL'''
        return super(IConstructCircularArc2, self).ConstructEndPointsRadius(From, to, isCCW, inRadius, IsMinor)
    def ConstructEndPointsAngle(self, From, to, isCCW, CentralAngle):
        '''Method IConstructCircularArc.ConstructEndPointsAngle (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            CentralAngle        : double'''
        return super(IConstructCircularArc2, self).ConstructEndPointsAngle(From, to, isCCW, CentralAngle)
    def ConstructEndPointsArc(self, From, to, isCCW, arcDistance):
        '''Method IConstructCircularArc.ConstructEndPointsArc (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructEndPointsArc(From, to, isCCW, arcDistance)
    def ConstructEndPointsTangent(self, From, to, isCCW, tangentDistance):
        '''Method IConstructCircularArc.ConstructEndPointsTangent (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructEndPointsTangent(From, to, isCCW, tangentDistance)
    def ConstructArcDistance(self, Center, From, isCCW, arcDistance):
        '''Method IConstructCircularArc.ConstructArcDistance (from IConstructCircularArc)

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            isCCW               : VARIANT_BOOL
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructArcDistance(Center, From, isCCW, arcDistance)
    def ConstructChordDistance(self, Center, From, isCCW, chordDistance):
        '''Method IConstructCircularArc.ConstructChordDistance (from IConstructCircularArc)

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            isCCW               : VARIANT_BOOL
            chordDistance       : double'''
        return super(IConstructCircularArc2, self).ConstructChordDistance(Center, From, isCCW, chordDistance)
    def ConstructTangentDistance(self, Center, From, isCCW, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentDistance (from IConstructCircularArc)

           INPUTS
            Center              : IPoint*
            from                : IPoint*
            isCCW               : VARIANT_BOOL
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructTangentDistance(Center, From, isCCW, tangentDistance)
    def ConstructTangentRadiusArc(self, Segment, atStart, isCCW, inRadius, arcDistance):
        '''Method IConstructCircularArc.ConstructTangentRadiusArc (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructTangentRadiusArc(Segment, atStart, isCCW, inRadius, arcDistance)
    def ConstructTangentRadiusChord(self, Segment, atStart, isCCW, inRadius, chordDistance):
        '''Method IConstructCircularArc.ConstructTangentRadiusChord (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            chordDistance       : double'''
        return super(IConstructCircularArc2, self).ConstructTangentRadiusChord(Segment, atStart, isCCW, inRadius, chordDistance)
    def ConstructTangentRadiusTangent(self, Segment, atStart, isCCW, inRadius, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentRadiusTangent (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructTangentRadiusTangent(Segment, atStart, isCCW, inRadius, tangentDistance)
    def ConstructTangentRadiusAngle(self, Segment, atStart, isCCW, inRadius, CentralAngle):
        '''Method IConstructCircularArc.ConstructTangentRadiusAngle (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            inRadius            : double
            CentralAngle        : double'''
        return super(IConstructCircularArc2, self).ConstructTangentRadiusAngle(Segment, atStart, isCCW, inRadius, CentralAngle)
    def ConstructTangentAngleArc(self, Segment, atStart, isCCW, CentralAngle, arcDistance):
        '''Method IConstructCircularArc.ConstructTangentAngleArc (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructTangentAngleArc(Segment, atStart, isCCW, CentralAngle, arcDistance)
    def ConstructTangentAngleChord(self, Segment, atStart, isCCW, CentralAngle, chordDistance):
        '''Method IConstructCircularArc.ConstructTangentAngleChord (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            chordDistance       : double'''
        return super(IConstructCircularArc2, self).ConstructTangentAngleChord(Segment, atStart, isCCW, CentralAngle, chordDistance)
    def ConstructTangentAngleTangent(self, Segment, atStart, isCCW, CentralAngle, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentAngleTangent (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructTangentAngleTangent(Segment, atStart, isCCW, CentralAngle, tangentDistance)
    def ConstructTangentChordArc(self, Segment, atStart, isCCW, chordDistance, arcDistance):
        '''Method IConstructCircularArc.ConstructTangentChordArc (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructTangentChordArc(Segment, atStart, isCCW, chordDistance, arcDistance)
    def ConstructTangentChordTangent(self, Segment, atStart, isCCW, chordDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentChordTangent (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructTangentChordTangent(Segment, atStart, isCCW, chordDistance, tangentDistance)
    def ConstructTangentArcTangent(self, Segment, atStart, isCCW, arcDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructTangentArcTangent (from IConstructCircularArc)

           INPUTS
            Segment             : ISegment*
            atStart             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            arcDistance         : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructTangentArcTangent(Segment, atStart, isCCW, arcDistance, tangentDistance)
    def ConstructBearingRadiusAngle(self, startPoint, inAngle, isCCW, inRadius, CentralAngle):
        '''Method IConstructCircularArc.ConstructBearingRadiusAngle (from IConstructCircularArc)

           INPUTS
            startPoint          : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            CentralAngle        : double'''
        return super(IConstructCircularArc2, self).ConstructBearingRadiusAngle(startPoint, inAngle, isCCW, inRadius, CentralAngle)
    def ConstructBearingRadiusArc(self, From, inAngle, isCCW, inRadius, arcDistance):
        '''Method IConstructCircularArc.ConstructBearingRadiusArc (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructBearingRadiusArc(From, inAngle, isCCW, inRadius, arcDistance)
    def ConstructBearingRadiusChord(self, From, inAngle, isCCW, inRadius, chordDistance, IsMinor):
        '''Method IConstructCircularArc.ConstructBearingRadiusChord (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            chordDistance       : double
            IsMinor             : VARIANT_BOOL'''
        return super(IConstructCircularArc2, self).ConstructBearingRadiusChord(From, inAngle, isCCW, inRadius, chordDistance, IsMinor)
    def ConstructBearingRadiusTangent(self, From, inAngle, isCCW, inRadius, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingRadiusTangent (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            inRadius            : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructBearingRadiusTangent(From, inAngle, isCCW, inRadius, tangentDistance)
    def ConstructBearingAngleArc(self, From, inAngle, isCCW, CentralAngle, arcDistance):
        '''Method IConstructCircularArc.ConstructBearingAngleArc (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructBearingAngleArc(From, inAngle, isCCW, CentralAngle, arcDistance)
    def ConstructBearingAngleChord(self, From, inAngle, isCCW, CentralAngle, chordDistance):
        '''Method IConstructCircularArc.ConstructBearingAngleChord (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            chordDistance       : double'''
        return super(IConstructCircularArc2, self).ConstructBearingAngleChord(From, inAngle, isCCW, CentralAngle, chordDistance)
    def ConstructBearingAngleTangent(self, From, inAngle, isCCW, CentralAngle, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingAngleTangent (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            CentralAngle        : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructBearingAngleTangent(From, inAngle, isCCW, CentralAngle, tangentDistance)
    def ConstructBearingChordArc(self, From, inAngle, isCCW, chordDistance, arcDistance):
        '''Method IConstructCircularArc.ConstructBearingChordArc (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            arcDistance         : double'''
        return super(IConstructCircularArc2, self).ConstructBearingChordArc(From, inAngle, isCCW, chordDistance, arcDistance)
    def ConstructBearingChordTangent(self, From, inAngle, isCCW, chordDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingChordTangent (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            chordDistance       : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructBearingChordTangent(From, inAngle, isCCW, chordDistance, tangentDistance)
    def ConstructBearingArcTangent(self, From, inAngle, isCCW, arcDistance, tangentDistance):
        '''Method IConstructCircularArc.ConstructBearingArcTangent (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            inAngle             : double
            isCCW               : VARIANT_BOOL
            arcDistance         : double
            tangentDistance     : double'''
        return super(IConstructCircularArc2, self).ConstructBearingArcTangent(From, inAngle, isCCW, arcDistance, tangentDistance)
    def ConstructThreePoints(self, From, middle, to, useExistingCenter):
        '''Method IConstructCircularArc.ConstructThreePoints (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            middle              : IPoint*
            to                  : IPoint*
            useExistingCenter   : VARIANT_BOOL'''
        return super(IConstructCircularArc2, self).ConstructThreePoints(From, middle, to, useExistingCenter)
    def ConstructFilletPoint(self, s1, s2, From, hintPoint):
        '''Method IConstructCircularArc.ConstructFilletPoint (from IConstructCircularArc)

           INPUTS
            s1                  : ISegment*
            s2                  : ISegment*
            from                : IPoint*
            hintPoint           : IPoint*'''
        return super(IConstructCircularArc2, self).ConstructFilletPoint(s1, s2, From, hintPoint)
    def ConstructFilletRadius(self, s1, s2, inRadius, hintPoint):
        '''Method IConstructCircularArc.ConstructFilletRadius (from IConstructCircularArc)

           INPUTS
            s1                  : ISegment*
            s2                  : ISegment*
            inRadius            : double
            hintPoint           : IPoint*'''
        return super(IConstructCircularArc2, self).ConstructFilletRadius(s1, s2, inRadius, hintPoint)
    def QueryFilletRadiusRange(self, s1, s2, hintPoint):
        '''Method IConstructCircularArc.QueryFilletRadiusRange (from IConstructCircularArc)

           INPUTS
            s1                  : ISegment*
            s2                  : ISegment*
            hintPoint           : IPoint*

           OUTPUTS
            minRadius           : double*
            maxRadius           : double*'''
        return super(IConstructCircularArc2, self).QueryFilletRadiusRange(s1, s2, hintPoint)
    def ConstructTangentAndPoint(self, s, atFrom, p):
        '''Method IConstructCircularArc.ConstructTangentAndPoint (from IConstructCircularArc)

           INPUTS
            s                   : ISegment*
            atFrom              : VARIANT_BOOL
            p                   : IPoint*'''
        return super(IConstructCircularArc2, self).ConstructTangentAndPoint(s, atFrom, p)
    def ConstructEndPointsChordHeight(self, From, to, isCCW, ChordHeight):
        '''Method IConstructCircularArc.ConstructEndPointsChordHeight (from IConstructCircularArc)

           INPUTS
            from                : IPoint*
            to                  : IPoint*
            isCCW               : VARIANT_BOOL
            ChordHeight         : double'''
        return super(IConstructCircularArc2, self).ConstructEndPointsChordHeight(From, to, isCCW, ChordHeight)
    def ConstructCircle(self, CenterPoint, Radius, isCCW):
        '''Method IConstructCircularArc.ConstructCircle (from IConstructCircularArc)

           INPUTS
            CenterPoint         : IPoint*
            Radius              : double
            isCCW               : VARIANT_BOOL'''
        return super(IConstructCircularArc2, self).ConstructCircle(CenterPoint, Radius, isCCW)

class IConstructBezierCurve(_esriGeometry.IConstructBezierCurve):
    _IID = uuid.UUID('252c0510-b381-11d1-a2d4-0000f8775fbf')
    def ConstructTangentsAtEndpoints(self, pTangentAtFrom, pTangentAtTo):
        '''Method IConstructBezierCurve.ConstructTangentsAtEndpoints

           INPUTS
            pTangentAtFrom      : ILine*
            pTangentAtTo        : ILine*'''
        return super(IConstructBezierCurve, self).ConstructTangentsAtEndpoints(pTangentAtFrom, pTangentAtTo)

class IConstructGeometryCollection(_esriGeometry.IConstructGeometryCollection):
    _IID = uuid.UUID('8680c0e0-377f-11d2-bcc5-0000f875bcce')
    def ConstructDivideEqual(self, divideSource, numDivisions, divideHow):
        '''Method IConstructGeometryCollection.ConstructDivideEqual

           INPUTS
            divideSource        : IPolyline*
            numDivisions        : long
            divideHow           : esriConstructDivideEnum'''
        return super(IConstructGeometryCollection, self).ConstructDivideEqual(divideSource, numDivisions, divideHow)
    def ConstructDivideLength(self, divideSource, Length, asRatio, divideHow):
        '''Method IConstructGeometryCollection.ConstructDivideLength

           INPUTS
            divideSource        : IPolyline*
            Length              : double
            asRatio             : VARIANT_BOOL
            divideHow           : esriConstructDivideEnum'''
        return super(IConstructGeometryCollection, self).ConstructDivideLength(divideSource, Length, asRatio, divideHow)

class IGeometryBridge(_esriGeometry.IGeometryBridge):
    _IID = uuid.UUID('518cba93-621e-476a-824d-26a104a42902')
    def QueryGeometries(self, pGeometryCollection, Index):
        '''Method IGeometryBridge.QueryGeometries

           INPUTS
            pGeometryCollection : IGeometryCollection*
            Index               : long

           OUTPUT
            geometries          : SAFEARRAY**'''
        return super(IGeometryBridge, self).QueryGeometries(pGeometryCollection, Index)
    def AddGeometries(self, pGeometryCollection, newGeometries):
        '''Method IGeometryBridge.AddGeometries

           INPUTS
            pGeometryCollection : IGeometryCollection*
            newGeometries       : SAFEARRAY**'''
        return super(IGeometryBridge, self).AddGeometries(pGeometryCollection, newGeometries)
    def InsertGeometries(self, pGeometryCollection, Index, newGeometries):
        '''Method IGeometryBridge.InsertGeometries

           INPUTS
            pGeometryCollection : IGeometryCollection*
            Index               : long
            newGeometries       : SAFEARRAY**'''
        return super(IGeometryBridge, self).InsertGeometries(pGeometryCollection, Index, newGeometries)
    def SetGeometries(self, pGeometryCollection, newGeometries):
        '''Method IGeometryBridge.SetGeometries

           INPUTS
            pGeometryCollection : IGeometryCollection*
            newGeometries       : SAFEARRAY**'''
        return super(IGeometryBridge, self).SetGeometries(pGeometryCollection, newGeometries)
    def QueryPoints(self, pPointCollection, Index):
        '''Method IGeometryBridge.QueryPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long

           OUTPUT
            Points              : SAFEARRAY**'''
        return super(IGeometryBridge, self).QueryPoints(pPointCollection, Index)
    def InsertPoints(self, pPointCollection, Index, newPoints):
        '''Method IGeometryBridge.InsertPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge, self).InsertPoints(pPointCollection, Index, newPoints)
    def AddPoints(self, pPointCollection, newPoints):
        '''Method IGeometryBridge.AddPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge, self).AddPoints(pPointCollection, newPoints)
    def SetPoints(self, pPointCollection, newPoints):
        '''Method IGeometryBridge.SetPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge, self).SetPoints(pPointCollection, newPoints)
    def GetPoints(self, pPointCollection, Index):
        '''Method IGeometryBridge.GetPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long

           OUTPUT
            Points              : SAFEARRAY**'''
        return super(IGeometryBridge, self).GetPoints(pPointCollection, Index)
    def ReplacePoints(self, pPointCollection, Index, goingAway, newPoints):
        '''Method IGeometryBridge.ReplacePoints

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long
            goingAway           : long
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge, self).ReplacePoints(pPointCollection, Index, goingAway, newPoints)
    def AddWKSPointZs(self, pPointCollection, pointStructures):
        '''Method IGeometryBridge.AddWKSPointZs

           INPUTS
            pPointCollection    : IPointCollection4*
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge, self).AddWKSPointZs(pPointCollection, pointStructures)
    def SetWKSPointZs(self, pPointCollection, pointStructures):
        '''Method IGeometryBridge.SetWKSPointZs

           INPUTS
            pPointCollection    : IPointCollection4*
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge, self).SetWKSPointZs(pPointCollection, pointStructures)
    def QueryWKSPointZs(self, pPointCollection, Index):
        '''Method IGeometryBridge.QueryWKSPointZs

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long

           OUTPUT
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge, self).QueryWKSPointZs(pPointCollection, Index)
    def InsertWKSPointZs(self, pPointCollection, Index, newPoints):
        '''Method IGeometryBridge.InsertWKSPointZs

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge, self).InsertWKSPointZs(pPointCollection, Index, newPoints)
    def QuerySegments(self, pSegmentCollection, Index):
        '''Method IGeometryBridge.QuerySegments

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            Index               : long

           OUTPUT
            segments            : SAFEARRAY**'''
        return super(IGeometryBridge, self).QuerySegments(pSegmentCollection, Index)
    def AddSegments(self, pSegmentCollection, newSegments):
        '''Method IGeometryBridge.AddSegments

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge, self).AddSegments(pSegmentCollection, newSegments)
    def InsertSegments(self, pSegmentCollection, Index, newSegments):
        '''Method IGeometryBridge.InsertSegments

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            Index               : long
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge, self).InsertSegments(pSegmentCollection, Index, newSegments)
    def ReplaceSegments(self, pSegmentCollection, Index, goingAway, newSegments):
        '''Method IGeometryBridge.ReplaceSegments

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            Index               : long
            goingAway           : long
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge, self).ReplaceSegments(pSegmentCollection, Index, goingAway, newSegments)
    def SetSegments(self, pSegmentCollection, newSegments):
        '''Method IGeometryBridge.SetSegments

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge, self).SetSegments(pSegmentCollection, newSegments)
    def Densify(self, pSegment, maxDeviation):
        '''Method IGeometryBridge.Densify

           INPUTS
            pSegment            : ISegment*
            maxDeviation        : double

           OUTPUTS
            pcOutSegments       : long*
            segments            : SAFEARRAY**'''
        return super(IGeometryBridge, self).Densify(pSegment, maxDeviation)
    def ConstructBuffers(self, pTopologicalOperator, distances):
        '''Method IGeometryBridge.ConstructBuffers

           INPUTS
            pTopologicalOperator: ITopologicalOperator2*
            distances           : SAFEARRAY**

           OUTPUT
            buffers             : IEnumGeometry**'''
        return super(IGeometryBridge, self).ConstructBuffers(pTopologicalOperator, distances)
    def QueryBeginningRings(self, pMultiPatch, ringTypesDesired):
        '''Method IGeometryBridge.QueryBeginningRings

           INPUTS
            pMultiPatch         : IMultiPatch*
            ringTypesDesired    : long

           OUTPUT
            beginningRings      : SAFEARRAY**'''
        return super(IGeometryBridge, self).QueryBeginningRings(pMultiPatch, ringTypesDesired)
    def QueryFollowingRings(self, pMultiPatch, beginningRing):
        '''Method IGeometryBridge.QueryFollowingRings

           INPUTS
            pMultiPatch         : IMultiPatch*
            beginningRing       : IRing*

           OUTPUT
            followingRings      : SAFEARRAY**'''
        return super(IGeometryBridge, self).QueryFollowingRings(pMultiPatch, beginningRing)

class IGeometryBridge2(_esriGeometry.IGeometryBridge2):
    _IID = uuid.UUID('a83caa20-47e4-4a10-aa4c-bb2a25fe7108')
    def AddWKSPoints(self, pPointCollection, pointStructures):
        '''Method IGeometryBridge2.AddWKSPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge2, self).AddWKSPoints(pPointCollection, pointStructures)
    def SetWKSPoints(self, pPointCollection, pointStructures):
        '''Method IGeometryBridge2.SetWKSPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge2, self).SetWKSPoints(pPointCollection, pointStructures)
    def QueryWKSPoints(self, pPointCollection, Index):
        '''Method IGeometryBridge2.QueryWKSPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long

           OUTPUT
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge2, self).QueryWKSPoints(pPointCollection, Index)
    def InsertWKSPoints(self, pPointCollection, Index, pointStructures):
        '''Method IGeometryBridge2.InsertWKSPoints

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge2, self).InsertWKSPoints(pPointCollection, Index, pointStructures)
    def SplitAtDistances(self, polyCurve, distances, asRatios, createParts):
        '''Method IGeometryBridge2.SplitAtDistances

           INPUTS
            polyCurve           : IPolycurve2*
            distances           : SAFEARRAY**
            asRatios            : VARIANT_BOOL
            createParts         : VARIANT_BOOL

           OUTPUT
            splitInfo           : IEnumSplitPoint**'''
        return super(IGeometryBridge2, self).SplitAtDistances(polyCurve, distances, asRatios, createParts)
    def SplitDivideLength(self, pSegment, Offset, Length, asRatio):
        '''Method IGeometryBridge2.SplitDivideLength

           INPUTS
            pSegment            : ISegment*
            Offset              : double
            Length              : double
            asRatio             : VARIANT_BOOL

           OUTPUTS
            numSplitSegments    : long*
            splitSegments       : SAFEARRAY**'''
        return super(IGeometryBridge2, self).SplitDivideLength(pSegment, Offset, Length, asRatio)
    def QueryGeometries(self, pGeometryCollection, Index):
        '''Method IGeometryBridge.QueryGeometries (from IGeometryBridge)

           INPUTS
            pGeometryCollection : IGeometryCollection*
            Index               : long

           OUTPUT
            geometries          : SAFEARRAY**'''
        return super(IGeometryBridge2, self).QueryGeometries(pGeometryCollection, Index)
    def AddGeometries(self, pGeometryCollection, newGeometries):
        '''Method IGeometryBridge.AddGeometries (from IGeometryBridge)

           INPUTS
            pGeometryCollection : IGeometryCollection*
            newGeometries       : SAFEARRAY**'''
        return super(IGeometryBridge2, self).AddGeometries(pGeometryCollection, newGeometries)
    def InsertGeometries(self, pGeometryCollection, Index, newGeometries):
        '''Method IGeometryBridge.InsertGeometries (from IGeometryBridge)

           INPUTS
            pGeometryCollection : IGeometryCollection*
            Index               : long
            newGeometries       : SAFEARRAY**'''
        return super(IGeometryBridge2, self).InsertGeometries(pGeometryCollection, Index, newGeometries)
    def SetGeometries(self, pGeometryCollection, newGeometries):
        '''Method IGeometryBridge.SetGeometries (from IGeometryBridge)

           INPUTS
            pGeometryCollection : IGeometryCollection*
            newGeometries       : SAFEARRAY**'''
        return super(IGeometryBridge2, self).SetGeometries(pGeometryCollection, newGeometries)
    def QueryPoints(self, pPointCollection, Index):
        '''Method IGeometryBridge.QueryPoints (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long

           OUTPUT
            Points              : SAFEARRAY**'''
        return super(IGeometryBridge2, self).QueryPoints(pPointCollection, Index)
    def InsertPoints(self, pPointCollection, Index, newPoints):
        '''Method IGeometryBridge.InsertPoints (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge2, self).InsertPoints(pPointCollection, Index, newPoints)
    def AddPoints(self, pPointCollection, newPoints):
        '''Method IGeometryBridge.AddPoints (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge2, self).AddPoints(pPointCollection, newPoints)
    def SetPoints(self, pPointCollection, newPoints):
        '''Method IGeometryBridge.SetPoints (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge2, self).SetPoints(pPointCollection, newPoints)
    def GetPoints(self, pPointCollection, Index):
        '''Method IGeometryBridge.GetPoints (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long

           OUTPUT
            Points              : SAFEARRAY**'''
        return super(IGeometryBridge2, self).GetPoints(pPointCollection, Index)
    def ReplacePoints(self, pPointCollection, Index, goingAway, newPoints):
        '''Method IGeometryBridge.ReplacePoints (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long
            goingAway           : long
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge2, self).ReplacePoints(pPointCollection, Index, goingAway, newPoints)
    def AddWKSPointZs(self, pPointCollection, pointStructures):
        '''Method IGeometryBridge.AddWKSPointZs (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge2, self).AddWKSPointZs(pPointCollection, pointStructures)
    def SetWKSPointZs(self, pPointCollection, pointStructures):
        '''Method IGeometryBridge.SetWKSPointZs (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge2, self).SetWKSPointZs(pPointCollection, pointStructures)
    def QueryWKSPointZs(self, pPointCollection, Index):
        '''Method IGeometryBridge.QueryWKSPointZs (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long

           OUTPUT
            pointStructures     : SAFEARRAY**'''
        return super(IGeometryBridge2, self).QueryWKSPointZs(pPointCollection, Index)
    def InsertWKSPointZs(self, pPointCollection, Index, newPoints):
        '''Method IGeometryBridge.InsertWKSPointZs (from IGeometryBridge)

           INPUTS
            pPointCollection    : IPointCollection4*
            Index               : long
            newPoints           : SAFEARRAY**'''
        return super(IGeometryBridge2, self).InsertWKSPointZs(pPointCollection, Index, newPoints)
    def QuerySegments(self, pSegmentCollection, Index):
        '''Method IGeometryBridge.QuerySegments (from IGeometryBridge)

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            Index               : long

           OUTPUT
            segments            : SAFEARRAY**'''
        return super(IGeometryBridge2, self).QuerySegments(pSegmentCollection, Index)
    def AddSegments(self, pSegmentCollection, newSegments):
        '''Method IGeometryBridge.AddSegments (from IGeometryBridge)

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge2, self).AddSegments(pSegmentCollection, newSegments)
    def InsertSegments(self, pSegmentCollection, Index, newSegments):
        '''Method IGeometryBridge.InsertSegments (from IGeometryBridge)

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            Index               : long
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge2, self).InsertSegments(pSegmentCollection, Index, newSegments)
    def ReplaceSegments(self, pSegmentCollection, Index, goingAway, newSegments):
        '''Method IGeometryBridge.ReplaceSegments (from IGeometryBridge)

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            Index               : long
            goingAway           : long
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge2, self).ReplaceSegments(pSegmentCollection, Index, goingAway, newSegments)
    def SetSegments(self, pSegmentCollection, newSegments):
        '''Method IGeometryBridge.SetSegments (from IGeometryBridge)

           INPUTS
            pSegmentCollection  : ISegmentCollection*
            newSegments         : SAFEARRAY**'''
        return super(IGeometryBridge2, self).SetSegments(pSegmentCollection, newSegments)
    def Densify(self, pSegment, maxDeviation):
        '''Method IGeometryBridge.Densify (from IGeometryBridge)

           INPUTS
            pSegment            : ISegment*
            maxDeviation        : double

           OUTPUTS
            pcOutSegments       : long*
            segments            : SAFEARRAY**'''
        return super(IGeometryBridge2, self).Densify(pSegment, maxDeviation)
    def ConstructBuffers(self, pTopologicalOperator, distances):
        '''Method IGeometryBridge.ConstructBuffers (from IGeometryBridge)

           INPUTS
            pTopologicalOperator: ITopologicalOperator2*
            distances           : SAFEARRAY**

           OUTPUT
            buffers             : IEnumGeometry**'''
        return super(IGeometryBridge2, self).ConstructBuffers(pTopologicalOperator, distances)
    def QueryBeginningRings(self, pMultiPatch, ringTypesDesired):
        '''Method IGeometryBridge.QueryBeginningRings (from IGeometryBridge)

           INPUTS
            pMultiPatch         : IMultiPatch*
            ringTypesDesired    : long

           OUTPUT
            beginningRings      : SAFEARRAY**'''
        return super(IGeometryBridge2, self).QueryBeginningRings(pMultiPatch, ringTypesDesired)
    def QueryFollowingRings(self, pMultiPatch, beginningRing):
        '''Method IGeometryBridge.QueryFollowingRings (from IGeometryBridge)

           INPUTS
            pMultiPatch         : IMultiPatch*
            beginningRing       : IRing*

           OUTPUT
            followingRings      : SAFEARRAY**'''
        return super(IGeometryBridge2, self).QueryFollowingRings(pMultiPatch, beginningRing)

class ISegmentGraph2(_esriGeometry.ISegmentGraph2):
    _IID = uuid.UUID('8b901909-46bf-4cf6-9d7a-fd0248f734ef')
    def get_Edges(self):
        '''Method ISegmentGraph2.get_Edges

           OUTPUT
            ppOutEdges          : IPolyline**'''
        return super(ISegmentGraph2, self).get_Edges()
    def GetCursor(self, p):
        '''Method ISegmentGraph.GetCursor (from ISegmentGraph)

           INPUT
            p                   : IPoint*

           OUTPUT
            cursor              : ISegmentGraphCursor**'''
        return super(ISegmentGraph2, self).GetCursor(p)
    def Load(self, geometries, generateFaces, takeOwnership):
        '''Method ISegmentGraph.Load (from ISegmentGraph)

           INPUTS
            geometries          : IEnumGeometry*
            generateFaces       : VARIANT_BOOL
            takeOwnership       : VARIANT_BOOL'''
        return super(ISegmentGraph2, self).Load(geometries, generateFaces, takeOwnership)
    def SetEmpty(self):
        '''Method ISegmentGraph.SetEmpty (from ISegmentGraph)'''
        return super(ISegmentGraph2, self).SetEmpty()
    def get_Envelope(self):
        '''Method ISegmentGraph.get_Envelope (from ISegmentGraph)

           OUTPUT
            Envelope            : IEnvelope**'''
        return super(ISegmentGraph2, self).get_Envelope()
    Edges = property(get_Edges, None, None)
    Envelope = property(get_Envelope, None, None)

class ILinePolygonHelper(_esriGeometry.ILinePolygonHelper):
    _IID = uuid.UUID('c7ac18fb-782e-47f1-a9bc-cf7953dda963')
    def Triangulate(self, pPolygon):
        '''Method ILinePolygonHelper.Triangulate

           INPUT
            pPolygon            : IPolygon*

           OUTPUTS
            ppMultiPatch        : IMultiPatch**
            pbOK                : VARIANT_BOOL*'''
        return super(ILinePolygonHelper, self).Triangulate(pPolygon)

class IPolylineArray(_esriGeometry.IPolylineArray):
    _IID = uuid.UUID('1f9ee0ae-d900-4b3f-928f-1117c32f2a18')
    def get_Count(self):
        '''Method IPolylineArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IPolylineArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IPolylineArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            Polyline            : IPolyline**'''
        return super(IPolylineArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IPolylineArray.Remove

           INPUT
            Index               : long'''
        return super(IPolylineArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IPolylineArray.RemoveAll'''
        return super(IPolylineArray, self).RemoveAll()
    def Add(self, pPolyline):
        '''Method IPolylineArray.Add

           INPUT
            pPolyline           : IPolyline*'''
        return super(IPolylineArray, self).Add(pPolyline)
    def Insert(self, Index, Polyline):
        '''Method IPolylineArray.Insert

           INPUTS
            Index               : long
            Polyline            : IPolyline*'''
        return super(IPolylineArray, self).Insert(Index, Polyline)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IPolygonArray(_esriGeometry.IPolygonArray):
    _IID = uuid.UUID('6cdf7c6e-eeb6-4ea8-ac53-264f0b8ccc82')
    def get_Count(self):
        '''Method IPolygonArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IPolygonArray, self).get_Count()
    def get_Element(self, Index):
        '''Method IPolygonArray.get_Element

           INPUT
            Index               : long

           OUTPUT
            Polygon             : IPolygon**'''
        return super(IPolygonArray, self).get_Element(Index)
    def Remove(self, Index):
        '''Method IPolygonArray.Remove

           INPUT
            Index               : long'''
        return super(IPolygonArray, self).Remove(Index)
    def RemoveAll(self):
        '''Method IPolygonArray.RemoveAll'''
        return super(IPolygonArray, self).RemoveAll()
    def Add(self, Polygon):
        '''Method IPolygonArray.Add

           INPUT
            Polygon             : IPolygon*'''
        return super(IPolygonArray, self).Add(Polygon)
    def Insert(self, Index, Polygon):
        '''Method IPolygonArray.Insert

           INPUTS
            Index               : long
            Polygon             : IPolygon*'''
        return super(IPolygonArray, self).Insert(Index, Polygon)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IGeometryServer(_esriGeometry.IGeometryServer):
    _IID = uuid.UUID('cb6db57f-ca37-485d-b0a5-0931fa62ab84')
    def Project(self, pInSR, pOutSR, xFormDir, pXForm, pExtent, pInGeometries):
        '''Method IGeometryServer.Project

           INPUTS
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            xFormDir            : esriTransformDirection
            pXForm              : ITransformation*
            pExtent             : IEnvelope*
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppProjectedGeometries: IGeometryArray**'''
        return super(IGeometryServer, self).Project(pInSR, pOutSR, xFormDir, pXForm, pExtent, pInGeometries)
    def Buffer(self, pInSR, pBufferSR, pOutSR, pDistances, pUnit, bUnion, pInGeometries):
        '''Method IGeometryServer.Buffer

           INPUTS
            pInSR               : ISpatialReference*
            pBufferSR           : ISpatialReference*
            pOutSR              : ISpatialReference*
            pDistances          : IDoubleArray*
            pUnit               : IUnit*
            bUnion              : VARIANT_BOOL
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppBufferedGeometries: IGeometryArray**'''
        return super(IGeometryServer, self).Buffer(pInSR, pBufferSR, pOutSR, pDistances, pUnit, bUnion, pInGeometries)
    def Relation(self, pSR, pInGA1, pInGA2, r, param):
        '''Method IGeometryServer.Relation

           INPUTS
            pSR                 : ISpatialReference*
            pInGA1              : IGeometryArray*
            pInGA2              : IGeometryArray*
            r                   : esriSpatialRelationEnum
            param               : BSTR

           OUTPUT
            ppRelations         : IRelationResultArray**'''
        return super(IGeometryServer, self).Relation(pSR, pInGA1, pInGA2, r, param)
    def Simplify(self, pSR, pInGeometries):
        '''Method IGeometryServer.Simplify

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppSimplifiedGeometries: IGeometryArray**'''
        return super(IGeometryServer, self).Simplify(pSR, pInGeometries)
    def Densify(self, pSR, pInGeometries, maxSegmentLength, useDeviationDensification, densificationParameter):
        '''Method IGeometryServer.Densify

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*
            maxSegmentLength    : double
            useDeviationDensification: VARIANT_BOOL
            densificationParameter: double

           OUTPUT
            ppDensifiedGeometries: IGeometryArray**'''
        return super(IGeometryServer, self).Densify(pSR, pInGeometries, maxSegmentLength, useDeviationDensification, densificationParameter)
    def FindSRByWKID(self, authority, WKID, WKID_Z, bDefaultXYResolution, bDefaultXYTolerance):
        '''Method IGeometryServer.FindSRByWKID

           INPUTS
            authority           : BSTR
            WKID                : long
            WKID_Z              : long
            bDefaultXYResolution: VARIANT_BOOL
            bDefaultXYTolerance : VARIANT_BOOL

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IGeometryServer, self).FindSRByWKID(authority, WKID, WKID_Z, bDefaultXYResolution, bDefaultXYTolerance)
    def FindSRByWKT(self, WKT, WKT_Z, bDefaultXYResolution, bDefaultXYTolerance):
        '''Method IGeometryServer.FindSRByWKT

           INPUTS
            WKT                 : BSTR
            WKT_Z               : BSTR
            bDefaultXYResolution: VARIANT_BOOL
            bDefaultXYTolerance : VARIANT_BOOL

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IGeometryServer, self).FindSRByWKT(WKT, WKT_Z, bDefaultXYResolution, bDefaultXYTolerance)
    def FindUnitsByWKID(self, authority, WKID):
        '''Method IGeometryServer.FindUnitsByWKID

           INPUTS
            authority           : BSTR
            WKID                : long

           OUTPUT
            ppU                 : IUnit**'''
        return super(IGeometryServer, self).FindUnitsByWKID(authority, WKID)
    def FindUnitsByWKT(self, WKT):
        '''Method IGeometryServer.FindUnitsByWKT

           INPUT
            WKT                 : BSTR

           OUTPUT
            ppU                 : IUnit**'''
        return super(IGeometryServer, self).FindUnitsByWKT(WKT)
    def GetAreasAndLengths(self, pSR, pInPolygons):
        '''Method IGeometryServer.GetAreasAndLengths

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*

           OUTPUTS
            ppAreas             : IDoubleArray**
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer, self).GetAreasAndLengths(pSR, pInPolygons)
    def GetLengths(self, pSR, pInPolylines):
        '''Method IGeometryServer.GetLengths

           INPUTS
            pSR                 : ISpatialReference*
            pInPolylines        : IPolylineArray*

           OUTPUT
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer, self).GetLengths(pSR, pInPolylines)
    def GetLabelPoints(self, pSR, pInPolygons):
        '''Method IGeometryServer.GetLabelPoints

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*

           OUTPUT
            pOutLabels          : IPointArray**'''
        return super(IGeometryServer, self).GetLabelPoints(pSR, pInPolygons)

class IGeometryServer2(_esriGeometry.IGeometryServer2):
    _IID = uuid.UUID('f3b51e61-2b28-4033-9615-d93a76171a85')
    def GetAreasAndLengths2(self, pSR, pInPolygons, pLengthUnit, pAreaUnit, areaUnitEnum):
        '''Method IGeometryServer2.GetAreasAndLengths2

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*
            pLengthUnit         : ILinearUnit*
            pAreaUnit           : ILinearUnit*
            areaUnitEnum        : esriAreaUnits

           OUTPUTS
            ppAreas             : IDoubleArray**
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer2, self).GetAreasAndLengths2(pSR, pInPolygons, pLengthUnit, pAreaUnit, areaUnitEnum)
    def GetLengths2(self, pSR, pInPolylines, pLengthUnit):
        '''Method IGeometryServer2.GetLengths2

           INPUTS
            pSR                 : ISpatialReference*
            pInPolylines        : IPolylineArray*
            pLengthUnit         : ILinearUnit*

           OUTPUT
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer2, self).GetLengths2(pSR, pInPolylines, pLengthUnit)
    def DensifyGeodesic(self, pSR, pInGeometries, maxSegmentLength, pLengthUnit):
        '''Method IGeometryServer2.DensifyGeodesic

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*
            maxSegmentLength    : double
            pLengthUnit         : ILinearUnit*

           OUTPUT
            ppOutGeometries     : IGeometryArray**'''
        return super(IGeometryServer2, self).DensifyGeodesic(pSR, pInGeometries, maxSegmentLength, pLengthUnit)
    def GetLengthsGeodesic(self, pSR, polylines, pLengthUnit):
        '''Method IGeometryServer2.GetLengthsGeodesic

           INPUTS
            pSR                 : ISpatialReference*
            polylines           : IPolylineArray*
            pLengthUnit         : ILinearUnit*

           OUTPUT
            ppLengthsArray      : IDoubleArray**'''
        return super(IGeometryServer2, self).GetLengthsGeodesic(pSR, polylines, pLengthUnit)
    def GetDistance(self, pSR, pG1, pG2, pDistanceUnit):
        '''Method IGeometryServer2.GetDistance

           INPUTS
            pSR                 : ISpatialReference*
            pG1                 : IGeometry*
            pG2                 : IGeometry*
            pDistanceUnit       : ILinearUnit*

           OUTPUT
            pDistance           : double*'''
        return super(IGeometryServer2, self).GetDistance(pSR, pG1, pG2, pDistanceUnit)
    def Union(self, pSR, pInGA):
        '''Method IGeometryServer2.Union

           INPUTS
            pSR                 : ISpatialReference*
            pInGA               : IGeometryArray*

           OUTPUT
            ppUnionedGeometry   : IGeometry**'''
        return super(IGeometryServer2, self).Union(pSR, pInGA)
    def Intersect(self, pSR, pInGA1, pInG2):
        '''Method IGeometryServer2.Intersect

           INPUTS
            pSR                 : ISpatialReference*
            pInGA1              : IGeometryArray*
            pInG2               : IGeometry*

           OUTPUT
            ppIntersectGA       : IGeometryArray**'''
        return super(IGeometryServer2, self).Intersect(pSR, pInGA1, pInG2)
    def Difference(self, pSR, pInGA1, pInG2):
        '''Method IGeometryServer2.Difference

           INPUTS
            pSR                 : ISpatialReference*
            pInGA1              : IGeometryArray*
            pInG2               : IGeometry*

           OUTPUT
            pDifferenceGA       : IGeometryArray**'''
        return super(IGeometryServer2, self).Difference(pSR, pInGA1, pInG2)
    def Cut(self, pSR, pTargets, pCutter):
        '''Method IGeometryServer2.Cut

           INPUTS
            pSR                 : ISpatialReference*
            pTargets            : IGeometryArray*
            pCutter             : IPolyline*

           OUTPUTS
            ppCutIndexes        : ILongArray**
            ppCutPiecesGA       : IGeometryArray**'''
        return super(IGeometryServer2, self).Cut(pSR, pTargets, pCutter)
    def TrimExtend(self, pSR, pInPA, pTrimExtendTo, extendHow):
        '''Method IGeometryServer2.TrimExtend

           INPUTS
            pSR                 : ISpatialReference*
            pInPA               : IPolylineArray*
            pTrimExtendTo       : IPolyline*
            extendHow           : long

           OUTPUT
            pTE_PA              : IPolylineArray**'''
        return super(IGeometryServer2, self).TrimExtend(pSR, pInPA, pTrimExtendTo, extendHow)
    def Offset(self, pSR, pInGA, offsetDistance, pOffsetUnit, offsetHow, bevelRatio):
        '''Method IGeometryServer2.Offset

           INPUTS
            pSR                 : ISpatialReference*
            pInGA               : IGeometryArray*
            offsetDistance      : double
            pOffsetUnit         : ILinearUnit*
            offsetHow           : long
            bevelRatio          : double

           OUTPUT
            ppOffsetGA          : IGeometryArray**'''
        return super(IGeometryServer2, self).Offset(pSR, pInGA, offsetDistance, pOffsetUnit, offsetHow, bevelRatio)
    def Generalize(self, pSR, pInGA, maxDeviation, pDeviationUnit):
        '''Method IGeometryServer2.Generalize

           INPUTS
            pSR                 : ISpatialReference*
            pInGA               : IGeometryArray*
            maxDeviation        : double
            pDeviationUnit      : ILinearUnit*

           OUTPUT
            ppGeneralizedGA     : IGeometryArray**'''
        return super(IGeometryServer2, self).Generalize(pSR, pInGA, maxDeviation, pDeviationUnit)
    def Reshape(self, pSR, pTarget, pReshaper):
        '''Method IGeometryServer2.Reshape

           INPUTS
            pSR                 : ISpatialReference*
            pTarget             : IGeometry*
            pReshaper           : IPolyline*

           OUTPUT
            pReshaped           : IGeometry**'''
        return super(IGeometryServer2, self).Reshape(pSR, pTarget, pReshaper)
    def ConvexHull(self, pSR, pInGeometryArray):
        '''Method IGeometryServer2.ConvexHull

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometryArray    : IGeometryArray*

           OUTPUT
            pHull               : IGeometry**'''
        return super(IGeometryServer2, self).ConvexHull(pSR, pInGeometryArray)
    def AutoComplete(self, pSR, pInPolygons, pCompletionLines):
        '''Method IGeometryServer2.AutoComplete

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*
            pCompletionLines    : IPolylineArray*

           OUTPUT
            ppCompletedPolygons : IPolygonArray**'''
        return super(IGeometryServer2, self).AutoComplete(pSR, pInPolygons, pCompletionLines)
    def GetDistanceGeodesic(self, pSR, pG1, pG2, pDistanceUnit):
        '''Method IGeometryServer2.GetDistanceGeodesic

           INPUTS
            pSR                 : ISpatialReference*
            pG1                 : IGeometry*
            pG2                 : IGeometry*
            pDistanceUnit       : ILinearUnit*

           OUTPUT
            pDistanceGeodesic   : double*'''
        return super(IGeometryServer2, self).GetDistanceGeodesic(pSR, pG1, pG2, pDistanceUnit)
    def Project(self, pInSR, pOutSR, xFormDir, pXForm, pExtent, pInGeometries):
        '''Method IGeometryServer.Project (from IGeometryServer)

           INPUTS
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            xFormDir            : esriTransformDirection
            pXForm              : ITransformation*
            pExtent             : IEnvelope*
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppProjectedGeometries: IGeometryArray**'''
        return super(IGeometryServer2, self).Project(pInSR, pOutSR, xFormDir, pXForm, pExtent, pInGeometries)
    def Buffer(self, pInSR, pBufferSR, pOutSR, pDistances, pUnit, bUnion, pInGeometries):
        '''Method IGeometryServer.Buffer (from IGeometryServer)

           INPUTS
            pInSR               : ISpatialReference*
            pBufferSR           : ISpatialReference*
            pOutSR              : ISpatialReference*
            pDistances          : IDoubleArray*
            pUnit               : IUnit*
            bUnion              : VARIANT_BOOL
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppBufferedGeometries: IGeometryArray**'''
        return super(IGeometryServer2, self).Buffer(pInSR, pBufferSR, pOutSR, pDistances, pUnit, bUnion, pInGeometries)
    def Relation(self, pSR, pInGA1, pInGA2, r, param):
        '''Method IGeometryServer.Relation (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInGA1              : IGeometryArray*
            pInGA2              : IGeometryArray*
            r                   : esriSpatialRelationEnum
            param               : BSTR

           OUTPUT
            ppRelations         : IRelationResultArray**'''
        return super(IGeometryServer2, self).Relation(pSR, pInGA1, pInGA2, r, param)
    def Simplify(self, pSR, pInGeometries):
        '''Method IGeometryServer.Simplify (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppSimplifiedGeometries: IGeometryArray**'''
        return super(IGeometryServer2, self).Simplify(pSR, pInGeometries)
    def Densify(self, pSR, pInGeometries, maxSegmentLength, useDeviationDensification, densificationParameter):
        '''Method IGeometryServer.Densify (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*
            maxSegmentLength    : double
            useDeviationDensification: VARIANT_BOOL
            densificationParameter: double

           OUTPUT
            ppDensifiedGeometries: IGeometryArray**'''
        return super(IGeometryServer2, self).Densify(pSR, pInGeometries, maxSegmentLength, useDeviationDensification, densificationParameter)
    def FindSRByWKID(self, authority, WKID, WKID_Z, bDefaultXYResolution, bDefaultXYTolerance):
        '''Method IGeometryServer.FindSRByWKID (from IGeometryServer)

           INPUTS
            authority           : BSTR
            WKID                : long
            WKID_Z              : long
            bDefaultXYResolution: VARIANT_BOOL
            bDefaultXYTolerance : VARIANT_BOOL

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IGeometryServer2, self).FindSRByWKID(authority, WKID, WKID_Z, bDefaultXYResolution, bDefaultXYTolerance)
    def FindSRByWKT(self, WKT, WKT_Z, bDefaultXYResolution, bDefaultXYTolerance):
        '''Method IGeometryServer.FindSRByWKT (from IGeometryServer)

           INPUTS
            WKT                 : BSTR
            WKT_Z               : BSTR
            bDefaultXYResolution: VARIANT_BOOL
            bDefaultXYTolerance : VARIANT_BOOL

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IGeometryServer2, self).FindSRByWKT(WKT, WKT_Z, bDefaultXYResolution, bDefaultXYTolerance)
    def FindUnitsByWKID(self, authority, WKID):
        '''Method IGeometryServer.FindUnitsByWKID (from IGeometryServer)

           INPUTS
            authority           : BSTR
            WKID                : long

           OUTPUT
            ppU                 : IUnit**'''
        return super(IGeometryServer2, self).FindUnitsByWKID(authority, WKID)
    def FindUnitsByWKT(self, WKT):
        '''Method IGeometryServer.FindUnitsByWKT (from IGeometryServer)

           INPUT
            WKT                 : BSTR

           OUTPUT
            ppU                 : IUnit**'''
        return super(IGeometryServer2, self).FindUnitsByWKT(WKT)
    def GetAreasAndLengths(self, pSR, pInPolygons):
        '''Method IGeometryServer.GetAreasAndLengths (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*

           OUTPUTS
            ppAreas             : IDoubleArray**
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer2, self).GetAreasAndLengths(pSR, pInPolygons)
    def GetLengths(self, pSR, pInPolylines):
        '''Method IGeometryServer.GetLengths (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolylines        : IPolylineArray*

           OUTPUT
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer2, self).GetLengths(pSR, pInPolylines)
    def GetLabelPoints(self, pSR, pInPolygons):
        '''Method IGeometryServer.GetLabelPoints (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*

           OUTPUT
            pOutLabels          : IPointArray**'''
        return super(IGeometryServer2, self).GetLabelPoints(pSR, pInPolygons)

class IGeometryServer3(_esriGeometry.IGeometryServer3):
    _IID = uuid.UUID('710b159c-a771-4bc7-bdd7-8779ccfe3821')
    def BufferGeodesic(self, pInSR, pOutSR, pDistances, bufferDeviation, pLinearDistanceUnit, bUnion, pInGeometries):
        '''Method IGeometryServer3.BufferGeodesic

           INPUTS
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            pDistances          : IDoubleArray*
            bufferDeviation     : double
            pLinearDistanceUnit : ILinearUnit*
            bUnion              : VARIANT_BOOL
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppBufferedGeometries: IGeometryArray**'''
        return super(IGeometryServer3, self).BufferGeodesic(pInSR, pOutSR, pDistances, bufferDeviation, pLinearDistanceUnit, bUnion, pInGeometries)
    def GetAreasAndLengthsGeodesic(self, pSR, pPolygons, pLengthUnit, pAreaUnit, areaUnitEnum):
        '''Method IGeometryServer3.GetAreasAndLengthsGeodesic

           INPUTS
            pSR                 : ISpatialReference*
            pPolygons           : IPolygonArray*
            pLengthUnit         : ILinearUnit*
            pAreaUnit           : ILinearUnit*
            areaUnitEnum        : esriAreaUnits

           OUTPUTS
            ppAreas             : IDoubleArray**
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer3, self).GetAreasAndLengthsGeodesic(pSR, pPolygons, pLengthUnit, pAreaUnit, areaUnitEnum)
    def GetAreasAndLengthsPreserveShape(self, pSR, pPolygons, pLengthUnit, pAreaUnit, areaUnitEnum):
        '''Method IGeometryServer3.GetAreasAndLengthsPreserveShape

           INPUTS
            pSR                 : ISpatialReference*
            pPolygons           : IPolygonArray*
            pLengthUnit         : ILinearUnit*
            pAreaUnit           : ILinearUnit*
            areaUnitEnum        : esriAreaUnits

           OUTPUTS
            ppAreas             : IDoubleArray**
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer3, self).GetAreasAndLengthsPreserveShape(pSR, pPolygons, pLengthUnit, pAreaUnit, areaUnitEnum)
    def GetLengthsPreserveShape(self, pSR, polylines, pLengthUnit):
        '''Method IGeometryServer3.GetLengthsPreserveShape

           INPUTS
            pSR                 : ISpatialReference*
            polylines           : IPolylineArray*
            pLengthUnit         : ILinearUnit*

           OUTPUT
            ppLengthsArray      : IDoubleArray**'''
        return super(IGeometryServer3, self).GetLengthsPreserveShape(pSR, polylines, pLengthUnit)
    def GetAreasAndLengths2(self, pSR, pInPolygons, pLengthUnit, pAreaUnit, areaUnitEnum):
        '''Method IGeometryServer2.GetAreasAndLengths2 (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*
            pLengthUnit         : ILinearUnit*
            pAreaUnit           : ILinearUnit*
            areaUnitEnum        : esriAreaUnits

           OUTPUTS
            ppAreas             : IDoubleArray**
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer3, self).GetAreasAndLengths2(pSR, pInPolygons, pLengthUnit, pAreaUnit, areaUnitEnum)
    def GetLengths2(self, pSR, pInPolylines, pLengthUnit):
        '''Method IGeometryServer2.GetLengths2 (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolylines        : IPolylineArray*
            pLengthUnit         : ILinearUnit*

           OUTPUT
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer3, self).GetLengths2(pSR, pInPolylines, pLengthUnit)
    def DensifyGeodesic(self, pSR, pInGeometries, maxSegmentLength, pLengthUnit):
        '''Method IGeometryServer2.DensifyGeodesic (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*
            maxSegmentLength    : double
            pLengthUnit         : ILinearUnit*

           OUTPUT
            ppOutGeometries     : IGeometryArray**'''
        return super(IGeometryServer3, self).DensifyGeodesic(pSR, pInGeometries, maxSegmentLength, pLengthUnit)
    def GetLengthsGeodesic(self, pSR, polylines, pLengthUnit):
        '''Method IGeometryServer2.GetLengthsGeodesic (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            polylines           : IPolylineArray*
            pLengthUnit         : ILinearUnit*

           OUTPUT
            ppLengthsArray      : IDoubleArray**'''
        return super(IGeometryServer3, self).GetLengthsGeodesic(pSR, polylines, pLengthUnit)
    def GetDistance(self, pSR, pG1, pG2, pDistanceUnit):
        '''Method IGeometryServer2.GetDistance (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pG1                 : IGeometry*
            pG2                 : IGeometry*
            pDistanceUnit       : ILinearUnit*

           OUTPUT
            pDistance           : double*'''
        return super(IGeometryServer3, self).GetDistance(pSR, pG1, pG2, pDistanceUnit)
    def Union(self, pSR, pInGA):
        '''Method IGeometryServer2.Union (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInGA               : IGeometryArray*

           OUTPUT
            ppUnionedGeometry   : IGeometry**'''
        return super(IGeometryServer3, self).Union(pSR, pInGA)
    def Intersect(self, pSR, pInGA1, pInG2):
        '''Method IGeometryServer2.Intersect (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInGA1              : IGeometryArray*
            pInG2               : IGeometry*

           OUTPUT
            ppIntersectGA       : IGeometryArray**'''
        return super(IGeometryServer3, self).Intersect(pSR, pInGA1, pInG2)
    def Difference(self, pSR, pInGA1, pInG2):
        '''Method IGeometryServer2.Difference (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInGA1              : IGeometryArray*
            pInG2               : IGeometry*

           OUTPUT
            pDifferenceGA       : IGeometryArray**'''
        return super(IGeometryServer3, self).Difference(pSR, pInGA1, pInG2)
    def Cut(self, pSR, pTargets, pCutter):
        '''Method IGeometryServer2.Cut (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pTargets            : IGeometryArray*
            pCutter             : IPolyline*

           OUTPUTS
            ppCutIndexes        : ILongArray**
            ppCutPiecesGA       : IGeometryArray**'''
        return super(IGeometryServer3, self).Cut(pSR, pTargets, pCutter)
    def TrimExtend(self, pSR, pInPA, pTrimExtendTo, extendHow):
        '''Method IGeometryServer2.TrimExtend (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInPA               : IPolylineArray*
            pTrimExtendTo       : IPolyline*
            extendHow           : long

           OUTPUT
            pTE_PA              : IPolylineArray**'''
        return super(IGeometryServer3, self).TrimExtend(pSR, pInPA, pTrimExtendTo, extendHow)
    def Offset(self, pSR, pInGA, offsetDistance, pOffsetUnit, offsetHow, bevelRatio):
        '''Method IGeometryServer2.Offset (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInGA               : IGeometryArray*
            offsetDistance      : double
            pOffsetUnit         : ILinearUnit*
            offsetHow           : long
            bevelRatio          : double

           OUTPUT
            ppOffsetGA          : IGeometryArray**'''
        return super(IGeometryServer3, self).Offset(pSR, pInGA, offsetDistance, pOffsetUnit, offsetHow, bevelRatio)
    def Generalize(self, pSR, pInGA, maxDeviation, pDeviationUnit):
        '''Method IGeometryServer2.Generalize (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInGA               : IGeometryArray*
            maxDeviation        : double
            pDeviationUnit      : ILinearUnit*

           OUTPUT
            ppGeneralizedGA     : IGeometryArray**'''
        return super(IGeometryServer3, self).Generalize(pSR, pInGA, maxDeviation, pDeviationUnit)
    def Reshape(self, pSR, pTarget, pReshaper):
        '''Method IGeometryServer2.Reshape (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pTarget             : IGeometry*
            pReshaper           : IPolyline*

           OUTPUT
            pReshaped           : IGeometry**'''
        return super(IGeometryServer3, self).Reshape(pSR, pTarget, pReshaper)
    def ConvexHull(self, pSR, pInGeometryArray):
        '''Method IGeometryServer2.ConvexHull (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometryArray    : IGeometryArray*

           OUTPUT
            pHull               : IGeometry**'''
        return super(IGeometryServer3, self).ConvexHull(pSR, pInGeometryArray)
    def AutoComplete(self, pSR, pInPolygons, pCompletionLines):
        '''Method IGeometryServer2.AutoComplete (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*
            pCompletionLines    : IPolylineArray*

           OUTPUT
            ppCompletedPolygons : IPolygonArray**'''
        return super(IGeometryServer3, self).AutoComplete(pSR, pInPolygons, pCompletionLines)
    def GetDistanceGeodesic(self, pSR, pG1, pG2, pDistanceUnit):
        '''Method IGeometryServer2.GetDistanceGeodesic (from IGeometryServer2)

           INPUTS
            pSR                 : ISpatialReference*
            pG1                 : IGeometry*
            pG2                 : IGeometry*
            pDistanceUnit       : ILinearUnit*

           OUTPUT
            pDistanceGeodesic   : double*'''
        return super(IGeometryServer3, self).GetDistanceGeodesic(pSR, pG1, pG2, pDistanceUnit)
    def Project(self, pInSR, pOutSR, xFormDir, pXForm, pExtent, pInGeometries):
        '''Method IGeometryServer.Project (from IGeometryServer)

           INPUTS
            pInSR               : ISpatialReference*
            pOutSR              : ISpatialReference*
            xFormDir            : esriTransformDirection
            pXForm              : ITransformation*
            pExtent             : IEnvelope*
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppProjectedGeometries: IGeometryArray**'''
        return super(IGeometryServer3, self).Project(pInSR, pOutSR, xFormDir, pXForm, pExtent, pInGeometries)
    def Buffer(self, pInSR, pBufferSR, pOutSR, pDistances, pUnit, bUnion, pInGeometries):
        '''Method IGeometryServer.Buffer (from IGeometryServer)

           INPUTS
            pInSR               : ISpatialReference*
            pBufferSR           : ISpatialReference*
            pOutSR              : ISpatialReference*
            pDistances          : IDoubleArray*
            pUnit               : IUnit*
            bUnion              : VARIANT_BOOL
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppBufferedGeometries: IGeometryArray**'''
        return super(IGeometryServer3, self).Buffer(pInSR, pBufferSR, pOutSR, pDistances, pUnit, bUnion, pInGeometries)
    def Relation(self, pSR, pInGA1, pInGA2, r, param):
        '''Method IGeometryServer.Relation (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInGA1              : IGeometryArray*
            pInGA2              : IGeometryArray*
            r                   : esriSpatialRelationEnum
            param               : BSTR

           OUTPUT
            ppRelations         : IRelationResultArray**'''
        return super(IGeometryServer3, self).Relation(pSR, pInGA1, pInGA2, r, param)
    def Simplify(self, pSR, pInGeometries):
        '''Method IGeometryServer.Simplify (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*

           OUTPUT
            ppSimplifiedGeometries: IGeometryArray**'''
        return super(IGeometryServer3, self).Simplify(pSR, pInGeometries)
    def Densify(self, pSR, pInGeometries, maxSegmentLength, useDeviationDensification, densificationParameter):
        '''Method IGeometryServer.Densify (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInGeometries       : IGeometryArray*
            maxSegmentLength    : double
            useDeviationDensification: VARIANT_BOOL
            densificationParameter: double

           OUTPUT
            ppDensifiedGeometries: IGeometryArray**'''
        return super(IGeometryServer3, self).Densify(pSR, pInGeometries, maxSegmentLength, useDeviationDensification, densificationParameter)
    def FindSRByWKID(self, authority, WKID, WKID_Z, bDefaultXYResolution, bDefaultXYTolerance):
        '''Method IGeometryServer.FindSRByWKID (from IGeometryServer)

           INPUTS
            authority           : BSTR
            WKID                : long
            WKID_Z              : long
            bDefaultXYResolution: VARIANT_BOOL
            bDefaultXYTolerance : VARIANT_BOOL

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IGeometryServer3, self).FindSRByWKID(authority, WKID, WKID_Z, bDefaultXYResolution, bDefaultXYTolerance)
    def FindSRByWKT(self, WKT, WKT_Z, bDefaultXYResolution, bDefaultXYTolerance):
        '''Method IGeometryServer.FindSRByWKT (from IGeometryServer)

           INPUTS
            WKT                 : BSTR
            WKT_Z               : BSTR
            bDefaultXYResolution: VARIANT_BOOL
            bDefaultXYTolerance : VARIANT_BOOL

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IGeometryServer3, self).FindSRByWKT(WKT, WKT_Z, bDefaultXYResolution, bDefaultXYTolerance)
    def FindUnitsByWKID(self, authority, WKID):
        '''Method IGeometryServer.FindUnitsByWKID (from IGeometryServer)

           INPUTS
            authority           : BSTR
            WKID                : long

           OUTPUT
            ppU                 : IUnit**'''
        return super(IGeometryServer3, self).FindUnitsByWKID(authority, WKID)
    def FindUnitsByWKT(self, WKT):
        '''Method IGeometryServer.FindUnitsByWKT (from IGeometryServer)

           INPUT
            WKT                 : BSTR

           OUTPUT
            ppU                 : IUnit**'''
        return super(IGeometryServer3, self).FindUnitsByWKT(WKT)
    def GetAreasAndLengths(self, pSR, pInPolygons):
        '''Method IGeometryServer.GetAreasAndLengths (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*

           OUTPUTS
            ppAreas             : IDoubleArray**
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer3, self).GetAreasAndLengths(pSR, pInPolygons)
    def GetLengths(self, pSR, pInPolylines):
        '''Method IGeometryServer.GetLengths (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolylines        : IPolylineArray*

           OUTPUT
            ppLengths           : IDoubleArray**'''
        return super(IGeometryServer3, self).GetLengths(pSR, pInPolylines)
    def GetLabelPoints(self, pSR, pInPolygons):
        '''Method IGeometryServer.GetLabelPoints (from IGeometryServer)

           INPUTS
            pSR                 : ISpatialReference*
            pInPolygons         : IPolygonArray*

           OUTPUT
            pOutLabels          : IPointArray**'''
        return super(IGeometryServer3, self).GetLabelPoints(pSR, pInPolygons)

class IJSONConverterGeometry(_esriGeometry.IJSONConverterGeometry):
    _IID = uuid.UUID('7cc69669-7023-4dd6-9cdc-3a75325673d7')
    def WriteSpatialReference(self, pWriter, propname, pSR):
        '''Method IJSONConverterGeometry.WriteSpatialReference

           INPUTS
            pWriter             : IJSONWriter*
            propname            : BSTR
            pSR                 : ISpatialReference*'''
        return super(IJSONConverterGeometry, self).WriteSpatialReference(pWriter, propname, pSR)
    def WriteGeoTransformation(self, pWriter, propname, pSR):
        '''Method IJSONConverterGeometry.WriteGeoTransformation

           INPUTS
            pWriter             : IJSONWriter*
            propname            : BSTR
            pSR                 : IGeoTransformation*'''
        return super(IJSONConverterGeometry, self).WriteGeoTransformation(pWriter, propname, pSR)
    def WriteGeometry(self, pWriter, propname, pGeom, skip_spref):
        '''Method IJSONConverterGeometry.WriteGeometry

           INPUTS
            pWriter             : IJSONWriter*
            propname            : BSTR
            pGeom               : IGeometry*
            skip_spref          : VARIANT_BOOL'''
        return super(IJSONConverterGeometry, self).WriteGeometry(pWriter, propname, pGeom, skip_spref)
    def QueryJSONSpatialReference(self, pSR, pJSON):
        '''Method IJSONConverterGeometry.QueryJSONSpatialReference

           INPUTS
            pSR                 : ISpatialReference*
            pJSON               : IJSONObject*'''
        return super(IJSONConverterGeometry, self).QueryJSONSpatialReference(pSR, pJSON)
    def QueryJSONGeoTransformation(self, pSR, pJSON):
        '''Method IJSONConverterGeometry.QueryJSONGeoTransformation

           INPUTS
            pSR                 : IGeoTransformation*
            pJSON               : IJSONObject*'''
        return super(IJSONConverterGeometry, self).QueryJSONGeoTransformation(pSR, pJSON)
    def QueryJSONEnvelope(self, pEnvelope, skip_spref, pJSON):
        '''Method IJSONConverterGeometry.QueryJSONEnvelope

           INPUTS
            pEnvelope           : IEnvelope*
            skip_spref          : VARIANT_BOOL
            pJSON               : IJSONObject*'''
        return super(IJSONConverterGeometry, self).QueryJSONEnvelope(pEnvelope, skip_spref, pJSON)
    def QueryJSONGeometry(self, pGeom, skip_spref, pJSON):
        '''Method IJSONConverterGeometry.QueryJSONGeometry

           INPUTS
            pGeom               : IGeometry*
            skip_spref          : VARIANT_BOOL
            pJSON               : IJSONObject*'''
        return super(IJSONConverterGeometry, self).QueryJSONGeometry(pGeom, skip_spref, pJSON)
    def ReadSpatialReference(self, pReader):
        '''Method IJSONConverterGeometry.ReadSpatialReference

           INPUT
            pReader             : IJSONReader*

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IJSONConverterGeometry, self).ReadSpatialReference(pReader)
    def ReadGeoTransformation(self, pReader):
        '''Method IJSONConverterGeometry.ReadGeoTransformation

           INPUT
            pReader             : IJSONReader*

           OUTPUT
            ppGT                : IGeoTransformation**'''
        return super(IJSONConverterGeometry, self).ReadGeoTransformation(pReader)
    def ReadGeometry(self, pReader, geomType, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ReadGeometry

           INPUTS
            pReader             : IJSONReader*
            geomType            : esriGeometryType
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppGeom              : IGeometry**'''
        return super(IJSONConverterGeometry, self).ReadGeometry(pReader, geomType, bDefaultHasZs, bDefaultHasMs)
    def ReadPoint(self, pReader):
        '''Method IJSONConverterGeometry.ReadPoint

           INPUT
            pReader             : IJSONReader*

           OUTPUT
            ppPoint             : IPoint**'''
        return super(IJSONConverterGeometry, self).ReadPoint(pReader)
    def ReadMultipoint(self, pReader, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ReadMultipoint

           INPUTS
            pReader             : IJSONReader*
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppMultipoint        : IMultipoint**'''
        return super(IJSONConverterGeometry, self).ReadMultipoint(pReader, bDefaultHasZs, bDefaultHasMs)
    def ReadPolygon(self, pReader, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ReadPolygon

           INPUTS
            pReader             : IJSONReader*
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppPolygon           : IPolygon**'''
        return super(IJSONConverterGeometry, self).ReadPolygon(pReader, bDefaultHasZs, bDefaultHasMs)
    def ReadPolyline(self, pReader, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ReadPolyline

           INPUTS
            pReader             : IJSONReader*
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppPolyLine          : IPolyline**'''
        return super(IJSONConverterGeometry, self).ReadPolyline(pReader, bDefaultHasZs, bDefaultHasMs)
    def ReadEnvelope(self, pReader):
        '''Method IJSONConverterGeometry.ReadEnvelope

           INPUT
            pReader             : IJSONReader*

           OUTPUT
            ppEnvelope          : IEnvelope**'''
        return super(IJSONConverterGeometry, self).ReadEnvelope(pReader)
    def ToGeometry(self, pJSONObject, geomType, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ToGeometry

           INPUTS
            pJSONObject         : IJSONObject*
            geomType            : esriGeometryType
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppGeom              : IGeometry**'''
        return super(IJSONConverterGeometry, self).ToGeometry(pJSONObject, geomType, bDefaultHasZs, bDefaultHasMs)
    def ToEnvelope(self, pJSONObject):
        '''Method IJSONConverterGeometry.ToEnvelope

           INPUT
            pJSONObject         : IJSONObject*

           OUTPUT
            ppEnvelope          : IEnvelope**'''
        return super(IJSONConverterGeometry, self).ToEnvelope(pJSONObject)
    def ToSpatialReference(self, pJSONObject):
        '''Method IJSONConverterGeometry.ToSpatialReference

           INPUT
            pJSONObject         : IJSONObject*

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IJSONConverterGeometry, self).ToSpatialReference(pJSONObject)
    def ToGeoTransformation(self, pJSONObject):
        '''Method IJSONConverterGeometry.ToGeoTransformation

           INPUT
            pJSONObject         : IJSONObject*

           OUTPUT
            ppGT                : IGeoTransformation**'''
        return super(IJSONConverterGeometry, self).ToGeoTransformation(pJSONObject)
    def ToPoint(self, pJSONObject):
        '''Method IJSONConverterGeometry.ToPoint

           INPUT
            pJSONObject         : IJSONObject*

           OUTPUT
            ppPoint             : IPoint**'''
        return super(IJSONConverterGeometry, self).ToPoint(pJSONObject)
    def ToMultipoint(self, pJSONObject, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ToMultipoint

           INPUTS
            pJSONObject         : IJSONObject*
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppMultipoint        : IMultipoint**'''
        return super(IJSONConverterGeometry, self).ToMultipoint(pJSONObject, bDefaultHasZs, bDefaultHasMs)
    def ToPolygon(self, pJSONObject, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ToPolygon

           INPUTS
            pJSONObject         : IJSONObject*
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppPolygon           : IPolygon**'''
        return super(IJSONConverterGeometry, self).ToPolygon(pJSONObject, bDefaultHasZs, bDefaultHasMs)
    def ToPolyline(self, pJSONObject, bDefaultHasZs, bDefaultHasMs):
        '''Method IJSONConverterGeometry.ToPolyline

           INPUTS
            pJSONObject         : IJSONObject*
            bDefaultHasZs       : VARIANT_BOOL
            bDefaultHasMs       : VARIANT_BOOL

           OUTPUT
            ppPolyLine          : IPolyline**'''
        return super(IJSONConverterGeometry, self).ToPolyline(pJSONObject, bDefaultHasZs, bDefaultHasMs)

class IAffineTransformation2D2(_esriGeometry.IAffineTransformation2D2):
    _IID = uuid.UUID('8bedce87-6cee-4e7b-9d17-73b3562e9ae6')

    def __init__(self, *args, **kw):
        super(IAffineTransformation2D2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MoveOrigin(self):
        '''Method IAffineTransformation2D2.get_MoveOrigin

           OUTPUT
            Origin              : IPoint**'''
        return super(IAffineTransformation2D2, self).get_MoveOrigin()
    def putref_SpatialReference(self, SR):
        '''Method IAffineTransformation2D.putref_SpatialReference (from IAffineTransformation2D)

           INPUT
            SR                  : ISpatialReference*'''
        return super(IAffineTransformation2D2, self).putref_SpatialReference(SR)
    def get_SpatialReference(self):
        '''Method IAffineTransformation2D.get_SpatialReference (from IAffineTransformation2D)

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(IAffineTransformation2D2, self).get_SpatialReference()
    def Reset(self):
        '''Method IAffineTransformation2D.Reset (from IAffineTransformation2D)'''
        return super(IAffineTransformation2D2, self).Reset()
    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D.DefineFromControlPointsEx (from IAffineTransformation2D)

           INPUTS
            numPoints           : long
            fromPoints          : WKSPoint*
            toPoints            : WKSPoint*'''
        return super(IAffineTransformation2D2, self).DefineFromControlPointsEx(numPoints, fromPoints, toPoints)
    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D.DefineFromControlPoints (from IAffineTransformation2D)

           INPUTS
            numPoints           : long
            fromPoints          : IPoint**
            toPoints            : IPoint**'''
        return super(IAffineTransformation2D2, self).DefineFromControlPoints(numPoints, fromPoints, toPoints)
    def DefineFromEnvelopes(self, From, to):
        '''Method IAffineTransformation2D.DefineFromEnvelopes (from IAffineTransformation2D)

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*'''
        return super(IAffineTransformation2D2, self).DefineFromEnvelopes(From, to)
    def DefineFromEnvelopesEx(self, From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt):
        '''Method IAffineTransformation2D.DefineFromEnvelopesEx (from IAffineTransformation2D)

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*
            outFrom             : IEnvelope*
            assumeFalseOrigin   : VARIANT_BOOL
            keepAspect          : VARIANT_BOOL
            flipIt              : VARIANT_BOOL'''
        return super(IAffineTransformation2D2, self).DefineFromEnvelopesEx(From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt)
    def DefineReflection(self, l):
        '''Method IAffineTransformation2D.DefineReflection (from IAffineTransformation2D)

           INPUT
            l                   : ILine*'''
        return super(IAffineTransformation2D2, self).DefineReflection(l)
    def GetRMSError(self):
        '''Method IAffineTransformation2D.GetRMSError (from IAffineTransformation2D)

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D2, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IAffineTransformation2D.GetControlPointError (from IAffineTransformation2D)

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D2, self).GetControlPointError(i)
    def get_XScale(self):
        '''Method IAffineTransformation2D.get_XScale (from IAffineTransformation2D)

           OUTPUT
            sx                  : double*'''
        return super(IAffineTransformation2D2, self).get_XScale()
    def get_YScale(self):
        '''Method IAffineTransformation2D.get_YScale (from IAffineTransformation2D)

           OUTPUT
            sy                  : double*'''
        return super(IAffineTransformation2D2, self).get_YScale()
    def get_XTranslation(self):
        '''Method IAffineTransformation2D.get_XTranslation (from IAffineTransformation2D)

           OUTPUT
            dx                  : double*'''
        return super(IAffineTransformation2D2, self).get_XTranslation()
    def get_YTranslation(self):
        '''Method IAffineTransformation2D.get_YTranslation (from IAffineTransformation2D)

           OUTPUT
            dy                  : double*'''
        return super(IAffineTransformation2D2, self).get_YTranslation()
    def get_Rotation(self):
        '''Method IAffineTransformation2D.get_Rotation (from IAffineTransformation2D)

           OUTPUT
            r                   : double*'''
        return super(IAffineTransformation2D2, self).get_Rotation()
    def Scale(self, dx, dy):
        '''Method IAffineTransformation2D.Scale (from IAffineTransformation2D)

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D2, self).Scale(dx, dy)
    def put_MoveOrigin(self, _arg1):
        '''Method IAffineTransformation2D.put_MoveOrigin (from IAffineTransformation2D)

           INPUT
            _arg1               : IPoint*'''
        return super(IAffineTransformation2D2, self).put_MoveOrigin(_arg1)
    def MoveVector(self, movementVector):
        '''Method IAffineTransformation2D.MoveVector (from IAffineTransformation2D)

           INPUT
            movementVector      : ILine*'''
        return super(IAffineTransformation2D2, self).MoveVector(movementVector)
    def Move(self, dx, dy):
        '''Method IAffineTransformation2D.Move (from IAffineTransformation2D)

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D2, self).Move(dx, dy)
    def Rotate(self, da):
        '''Method IAffineTransformation2D.Rotate (from IAffineTransformation2D)

           INPUT
            da                  : double'''
        return super(IAffineTransformation2D2, self).Rotate(da)
    def PostMultiply(self, postTransform):
        '''Method IAffineTransformation2D.PostMultiply (from IAffineTransformation2D)

           INPUT
            postTransform       : IAffineTransformation2D*'''
        return super(IAffineTransformation2D2, self).PostMultiply(postTransform)
    def PreMultiply(self, preTransform):
        '''Method IAffineTransformation2D.PreMultiply (from IAffineTransformation2D)

           INPUT
            preTransform        : IAffineTransformation2D*'''
        return super(IAffineTransformation2D2, self).PreMultiply(preTransform)
    def get_IsReflective(self):
        '''Method IAffineTransformation2D.get_IsReflective (from IAffineTransformation2D)

           OUTPUT
            IsReflective        : VARIANT_BOOL*'''
        return super(IAffineTransformation2D2, self).get_IsReflective()
    def Project(self, newSpatialReference):
        '''Method IAffineTransformation2D.Project (from IAffineTransformation2D)

           INPUT
            newSpatialReference : ISpatialReference*'''
        return super(IAffineTransformation2D2, self).Project(newSpatialReference)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IAffineTransformation2D2, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IAffineTransformation2D2, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IAffineTransformation2D2, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IAffineTransformation2D2, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IAffineTransformation2D2, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IAffineTransformation2D2, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IAffineTransformation2D2, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IAffineTransformation2D2, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    IsReflective = property(get_IsReflective, None, None)
    MoveOrigin = property(get_MoveOrigin, put_MoveOrigin, None)
    Rotation = property(get_Rotation, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    XScale = property(get_XScale, None, None)
    XTranslation = property(get_XTranslation, None, None)
    YScale = property(get_YScale, None, None)
    YTranslation = property(get_YTranslation, None, None)

class IAffineTransformation2D3(_esriGeometry.IAffineTransformation2D3):
    _IID = uuid.UUID('cd315758-16ae-4438-99b3-f5ffa6bcf3f3')

    def __init__(self, *args, **kw):
        super(IAffineTransformation2D3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DefineConformalFromControlPointsEx(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D3.DefineConformalFromControlPointsEx

           INPUTS
            numPoints           : long
            fromPoints          : WKSPoint*
            toPoints            : WKSPoint*'''
        return super(IAffineTransformation2D3, self).DefineConformalFromControlPointsEx(numPoints, fromPoints, toPoints)
    def DefineConformalFromControlPoints(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D3.DefineConformalFromControlPoints

           INPUTS
            numPoints           : long
            fromPoints          : IPoint**
            toPoints            : IPoint**'''
        return super(IAffineTransformation2D3, self).DefineConformalFromControlPoints(numPoints, fromPoints, toPoints)
    def QueryLinearCoefficients(self, direction, params):
        '''Method IAffineTransformation2D3.QueryLinearCoefficients

           INPUTS
            direction           : esriTransformDirection
            params              : double*'''
        return super(IAffineTransformation2D3, self).QueryLinearCoefficients(direction, params)
    def SetLinearCoefficients(self, direction, params):
        '''Method IAffineTransformation2D3.SetLinearCoefficients

           INPUTS
            direction           : esriTransformDirection
            params              : double*'''
        return super(IAffineTransformation2D3, self).SetLinearCoefficients(direction, params)
    def get_MoveOrigin(self):
        '''Method IAffineTransformation2D2.get_MoveOrigin (from IAffineTransformation2D2)

           OUTPUT
            Origin              : IPoint**'''
        return super(IAffineTransformation2D3, self).get_MoveOrigin()
    def putref_SpatialReference(self, SR):
        '''Method IAffineTransformation2D.putref_SpatialReference (from IAffineTransformation2D)

           INPUT
            SR                  : ISpatialReference*'''
        return super(IAffineTransformation2D3, self).putref_SpatialReference(SR)
    def get_SpatialReference(self):
        '''Method IAffineTransformation2D.get_SpatialReference (from IAffineTransformation2D)

           OUTPUT
            SR                  : ISpatialReference**'''
        return super(IAffineTransformation2D3, self).get_SpatialReference()
    def Reset(self):
        '''Method IAffineTransformation2D.Reset (from IAffineTransformation2D)'''
        return super(IAffineTransformation2D3, self).Reset()
    def DefineFromControlPointsEx(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D.DefineFromControlPointsEx (from IAffineTransformation2D)

           INPUTS
            numPoints           : long
            fromPoints          : WKSPoint*
            toPoints            : WKSPoint*'''
        return super(IAffineTransformation2D3, self).DefineFromControlPointsEx(numPoints, fromPoints, toPoints)
    def DefineFromControlPoints(self, numPoints, fromPoints, toPoints):
        '''Method IAffineTransformation2D.DefineFromControlPoints (from IAffineTransformation2D)

           INPUTS
            numPoints           : long
            fromPoints          : IPoint**
            toPoints            : IPoint**'''
        return super(IAffineTransformation2D3, self).DefineFromControlPoints(numPoints, fromPoints, toPoints)
    def DefineFromEnvelopes(self, From, to):
        '''Method IAffineTransformation2D.DefineFromEnvelopes (from IAffineTransformation2D)

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*'''
        return super(IAffineTransformation2D3, self).DefineFromEnvelopes(From, to)
    def DefineFromEnvelopesEx(self, From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt):
        '''Method IAffineTransformation2D.DefineFromEnvelopesEx (from IAffineTransformation2D)

           INPUTS
            from                : IEnvelope*
            to                  : IEnvelope*
            outFrom             : IEnvelope*
            assumeFalseOrigin   : VARIANT_BOOL
            keepAspect          : VARIANT_BOOL
            flipIt              : VARIANT_BOOL'''
        return super(IAffineTransformation2D3, self).DefineFromEnvelopesEx(From, to, outFrom, assumeFalseOrigin, keepAspect, flipIt)
    def DefineReflection(self, l):
        '''Method IAffineTransformation2D.DefineReflection (from IAffineTransformation2D)

           INPUT
            l                   : ILine*'''
        return super(IAffineTransformation2D3, self).DefineReflection(l)
    def GetRMSError(self):
        '''Method IAffineTransformation2D.GetRMSError (from IAffineTransformation2D)

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D3, self).GetRMSError()
    def GetControlPointError(self, i):
        '''Method IAffineTransformation2D.GetControlPointError (from IAffineTransformation2D)

           INPUT
            i                   : long

           OUTPUTS
            fromError           : double*
            toError             : double*'''
        return super(IAffineTransformation2D3, self).GetControlPointError(i)
    def get_XScale(self):
        '''Method IAffineTransformation2D.get_XScale (from IAffineTransformation2D)

           OUTPUT
            sx                  : double*'''
        return super(IAffineTransformation2D3, self).get_XScale()
    def get_YScale(self):
        '''Method IAffineTransformation2D.get_YScale (from IAffineTransformation2D)

           OUTPUT
            sy                  : double*'''
        return super(IAffineTransformation2D3, self).get_YScale()
    def get_XTranslation(self):
        '''Method IAffineTransformation2D.get_XTranslation (from IAffineTransformation2D)

           OUTPUT
            dx                  : double*'''
        return super(IAffineTransformation2D3, self).get_XTranslation()
    def get_YTranslation(self):
        '''Method IAffineTransformation2D.get_YTranslation (from IAffineTransformation2D)

           OUTPUT
            dy                  : double*'''
        return super(IAffineTransformation2D3, self).get_YTranslation()
    def get_Rotation(self):
        '''Method IAffineTransformation2D.get_Rotation (from IAffineTransformation2D)

           OUTPUT
            r                   : double*'''
        return super(IAffineTransformation2D3, self).get_Rotation()
    def Scale(self, dx, dy):
        '''Method IAffineTransformation2D.Scale (from IAffineTransformation2D)

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D3, self).Scale(dx, dy)
    def put_MoveOrigin(self, _arg1):
        '''Method IAffineTransformation2D.put_MoveOrigin (from IAffineTransformation2D)

           INPUT
            _arg1               : IPoint*'''
        return super(IAffineTransformation2D3, self).put_MoveOrigin(_arg1)
    def MoveVector(self, movementVector):
        '''Method IAffineTransformation2D.MoveVector (from IAffineTransformation2D)

           INPUT
            movementVector      : ILine*'''
        return super(IAffineTransformation2D3, self).MoveVector(movementVector)
    def Move(self, dx, dy):
        '''Method IAffineTransformation2D.Move (from IAffineTransformation2D)

           INPUTS
            dx                  : double
            dy                  : double'''
        return super(IAffineTransformation2D3, self).Move(dx, dy)
    def Rotate(self, da):
        '''Method IAffineTransformation2D.Rotate (from IAffineTransformation2D)

           INPUT
            da                  : double'''
        return super(IAffineTransformation2D3, self).Rotate(da)
    def PostMultiply(self, postTransform):
        '''Method IAffineTransformation2D.PostMultiply (from IAffineTransformation2D)

           INPUT
            postTransform       : IAffineTransformation2D*'''
        return super(IAffineTransformation2D3, self).PostMultiply(postTransform)
    def PreMultiply(self, preTransform):
        '''Method IAffineTransformation2D.PreMultiply (from IAffineTransformation2D)

           INPUT
            preTransform        : IAffineTransformation2D*'''
        return super(IAffineTransformation2D3, self).PreMultiply(preTransform)
    def get_IsReflective(self):
        '''Method IAffineTransformation2D.get_IsReflective (from IAffineTransformation2D)

           OUTPUT
            IsReflective        : VARIANT_BOOL*'''
        return super(IAffineTransformation2D3, self).get_IsReflective()
    def Project(self, newSpatialReference):
        '''Method IAffineTransformation2D.Project (from IAffineTransformation2D)

           INPUT
            newSpatialReference : ISpatialReference*'''
        return super(IAffineTransformation2D3, self).Project(newSpatialReference)
    def TransformMeasuresFF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : double*'''
        return super(IAffineTransformation2D3, self).TransformMeasuresFF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresFI(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : double*
            outMeasures         : long*'''
        return super(IAffineTransformation2D3, self).TransformMeasuresFI(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresIF(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : double*'''
        return super(IAffineTransformation2D3, self).TransformMeasuresIF(direction, cMeasures, inMeasures, outMeasures)
    def TransformMeasuresII(self, direction, cMeasures, inMeasures, outMeasures):
        '''Method ITransformation.TransformMeasuresII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cMeasures           : long
            inMeasures          : long*
            outMeasures         : long*'''
        return super(IAffineTransformation2D3, self).TransformMeasuresII(direction, cMeasures, inMeasures, outMeasures)
    def TransformPointsFF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : double*'''
        return super(IAffineTransformation2D3, self).TransformPointsFF(direction, cPoints, inPoints, outPoints)
    def TransformPointsFI(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsFI (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : double*
            outPoints           : long*'''
        return super(IAffineTransformation2D3, self).TransformPointsFI(direction, cPoints, inPoints, outPoints)
    def TransformPointsIF(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsIF (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : double*'''
        return super(IAffineTransformation2D3, self).TransformPointsIF(direction, cPoints, inPoints, outPoints)
    def TransformPointsII(self, direction, cPoints, inPoints, outPoints):
        '''Method ITransformation.TransformPointsII (from ITransformation)

           INPUTS
            direction           : esriTransformDirection
            cPoints             : long
            inPoints            : long*
            outPoints           : long*'''
        return super(IAffineTransformation2D3, self).TransformPointsII(direction, cPoints, inPoints, outPoints)
    IsReflective = property(get_IsReflective, None, None)
    MoveOrigin = property(get_MoveOrigin, put_MoveOrigin, None)
    Rotation = property(get_Rotation, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    XScale = property(get_XScale, None, None)
    XTranslation = property(get_XTranslation, None, None)
    YScale = property(get_YScale, None, None)
    YTranslation = property(get_YTranslation, None, None)

class ILine2(_esriGeometry.ILine2):
    _IID = uuid.UUID('a1d604a8-7914-4435-9b26-43e1ea5baa99')

    def __init__(self, *args, **kw):
        super(ILine2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutWKSCoords(self, From, to):
        '''Method ILine2.PutWKSCoords

           INPUTS
            from                : WKSPoint*
            to                  : WKSPoint*'''
        return super(ILine2, self).PutWKSCoords(From, to)
    def QueryWKSCoords(self):
        '''Method ILine2.QueryWKSCoords

           OUTPUTS
            from                : WKSPoint*
            to                  : WKSPoint*'''
        return super(ILine2, self).QueryWKSCoords()
    def PutCoords(self, From, to):
        '''Method ILine.PutCoords (from ILine)

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ILine2, self).PutCoords(From, to)
    def QueryCoords(self, From, to):
        '''Method ILine.QueryCoords (from ILine)

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ILine2, self).QueryCoords(From, to)
    def get_Angle(self):
        '''Method ILine.get_Angle (from ILine)

           OUTPUT
            outAngle            : double*'''
        return super(ILine2, self).get_Angle()
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ILine2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ILine2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ILine2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ILine2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ILine2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ILine2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ILine2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ILine2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ILine2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ILine2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ILine2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ILine2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ILine2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ILine2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ILine2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ILine2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ILine2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ILine2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ILine2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ILine2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ILine2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ILine2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ILine2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ILine2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ILine2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ILine2, self).GeoNormalizeFromLongitude(Longitude)
    Angle = property(get_Angle, None, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class ILine3(_esriGeometry.ILine3):
    _IID = uuid.UUID('80dac471-f855-4934-884c-a812cf9a99ba')

    def __init__(self, *args, **kw):
        super(ILine3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SplitAtDistance3D(self, distances, asRatio):
        '''Method ILine3.SplitAtDistance3D

           INPUTS
            distances           : double
            asRatio             : VARIANT_BOOL

           OUTPUTS
            fromSegment         : ISegment**
            toSegment           : ISegment**'''
        return super(ILine3, self).SplitAtDistance3D(distances, asRatio)
    def GetDistanceAtVertexAttribute3D(self, attributeType, attributeValue, asRatio):
        '''Method ILine3.GetDistanceAtVertexAttribute3D

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            distance            : double*'''
        return super(ILine3, self).GetDistanceAtVertexAttribute3D(attributeType, attributeValue, asRatio)
    def GetVertexAttributeAtDistance3D(self, attributeType, distance, asRatio):
        '''Method ILine3.GetVertexAttributeAtDistance3D

           INPUTS
            attributeType       : esriGeometryAttributes
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            attributeValue      : double*'''
        return super(ILine3, self).GetVertexAttributeAtDistance3D(attributeType, distance, asRatio)
    def PutWKSCoords(self, From, to):
        '''Method ILine2.PutWKSCoords (from ILine2)

           INPUTS
            from                : WKSPoint*
            to                  : WKSPoint*'''
        return super(ILine3, self).PutWKSCoords(From, to)
    def QueryWKSCoords(self):
        '''Method ILine2.QueryWKSCoords (from ILine2)

           OUTPUTS
            from                : WKSPoint*
            to                  : WKSPoint*'''
        return super(ILine3, self).QueryWKSCoords()
    def PutCoords(self, From, to):
        '''Method ILine.PutCoords (from ILine)

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ILine3, self).PutCoords(From, to)
    def QueryCoords(self, From, to):
        '''Method ILine.QueryCoords (from ILine)

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ILine3, self).QueryCoords(From, to)
    def get_Angle(self):
        '''Method ILine.get_Angle (from ILine)

           OUTPUT
            outAngle            : double*'''
        return super(ILine3, self).get_Angle()
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ILine3, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ILine3, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ILine3, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ILine3, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ILine3, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ILine3, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ILine3, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ILine3, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ILine3, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ILine3, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ILine3, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ILine3, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ILine3, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ILine3, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ILine3, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ILine3, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ILine3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ILine3, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ILine3, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ILine3, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ILine3, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ILine3, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ILine3, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ILine3, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ILine3, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ILine3, self).GeoNormalizeFromLongitude(Longitude)
    Angle = property(get_Angle, None, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class ICurve3(_esriGeometry.ICurve3):
    _IID = uuid.UUID('ea7ab50b-1a9d-11d6-9fa9-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(ICurve3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryPointsAndDistances(self, extension, searchRadius, inPoint, asRatio):
        '''Method ICurve3.QueryPointsAndDistances

           INPUTS
            extension           : esriSegmentExtension
            searchRadius        : double
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL

           OUTPUTS
            distanceFromCurve   : double*
            pointsAndDistances  : IEnumPointAndDistance**'''
        return super(ICurve3, self).QueryPointsAndDistances(extension, searchRadius, inPoint, asRatio)
    def PutCoordsEx(self, From, to):
        '''Method ICurve2.PutCoordsEx (from ICurve2)

           INPUTS
            from                : IPoint*
            to                  : IPoint*'''
        return super(ICurve3, self).PutCoordsEx(From, to)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ICurve3, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ICurve3, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ICurve3, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ICurve3, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ICurve3, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ICurve3, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ICurve3, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ICurve3, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ICurve3, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ICurve3, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ICurve3, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ICurve3, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ICurve3, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ICurve3, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ICurve3, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ICurve3, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ICurve3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ICurve3, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ICurve3, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ICurve3, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ICurve3, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ICurve3, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ICurve3, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ICurve3, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ICurve3, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ICurve3, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IBezierCurve(_esriGeometry.IBezierCurve):
    _IID = uuid.UUID('19b8936c-b159-11d1-a2d3-0000f8775fbf')

    def __init__(self, *args, **kw):
        super(IBezierCurve, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryCoords(self, controlPoints):
        '''Method IBezierCurve.QueryCoords

           INPUT
            controlPoints       : IPoint**'''
        return super(IBezierCurve, self).QueryCoords(controlPoints)
    def PutCoords(self, numPoints, controlPoints):
        '''Method IBezierCurve.PutCoords

           INPUTS
            numPoints           : long
            controlPoints       : IPoint**'''
        return super(IBezierCurve, self).PutCoords(numPoints, controlPoints)
    def QueryWKSCoords(self):
        '''Method IBezierCurve.QueryWKSCoords

           OUTPUT
            controlPoints       : WKSPoint*'''
        return super(IBezierCurve, self).QueryWKSCoords()
    def PutWKSCoords(self, controlPoints):
        '''Method IBezierCurve.PutWKSCoords

           INPUT
            controlPoints       : WKSPoint*'''
        return super(IBezierCurve, self).PutWKSCoords(controlPoints)
    def QueryCoord(self, Index, controlPoint):
        '''Method IBezierCurve.QueryCoord

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurve, self).QueryCoord(Index, controlPoint)
    def PutCoord(self, Index, controlPoint):
        '''Method IBezierCurve.PutCoord

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurve, self).PutCoord(Index, controlPoint)
    def get_Degree(self):
        '''Method IBezierCurve.get_Degree

           OUTPUT
            Degree              : long*'''
        return super(IBezierCurve, self).get_Degree()
    def QueryChordLengthTangentAtFrom(self, tangent):
        '''Method IBezierCurve.QueryChordLengthTangentAtFrom

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurve, self).QueryChordLengthTangentAtFrom(tangent)
    def QueryChordLengthTangentAtTo(self, tangent):
        '''Method IBezierCurve.QueryChordLengthTangentAtTo

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurve, self).QueryChordLengthTangentAtTo(tangent)
    def SetChordLengthTangentAtFrom(self, tangent, setByUser):
        '''Method IBezierCurve.SetChordLengthTangentAtFrom

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurve, self).SetChordLengthTangentAtFrom(tangent, setByUser)
    def SetChordLengthTangentAtTo(self, tangent, setByUser):
        '''Method IBezierCurve.SetChordLengthTangentAtTo

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurve, self).SetChordLengthTangentAtTo(tangent, setByUser)
    def QueryInflectionPoint(self, inflectionPoint):
        '''Method IBezierCurve.QueryInflectionPoint

           INPUT
            inflectionPoint     : IPoint*'''
        return super(IBezierCurve, self).QueryInflectionPoint(inflectionPoint)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IBezierCurve, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IBezierCurve, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IBezierCurve, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IBezierCurve, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IBezierCurve, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IBezierCurve, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IBezierCurve, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IBezierCurve, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IBezierCurve, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IBezierCurve, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IBezierCurve, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IBezierCurve, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IBezierCurve, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IBezierCurve, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IBezierCurve, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IBezierCurve, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IBezierCurve, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IBezierCurve, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IBezierCurve, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IBezierCurve, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IBezierCurve, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IBezierCurve, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IBezierCurve, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IBezierCurve, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IBezierCurve, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IBezierCurve, self).GeoNormalizeFromLongitude(Longitude)
    Degree = property(get_Degree, None, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IBezierCurve2(_esriGeometry.IBezierCurve2):
    _IID = uuid.UUID('6657316f-ec45-4d6b-9526-440de441c250')

    def __init__(self, *args, **kw):
        super(IBezierCurve2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsLine(self):
        '''Method IBezierCurve2.get_IsLine

           OUTPUT
            IsLine              : VARIANT_BOOL*'''
        return super(IBezierCurve2, self).get_IsLine()
    def QueryCoords(self, controlPoints):
        '''Method IBezierCurve.QueryCoords (from IBezierCurve)

           INPUT
            controlPoints       : IPoint**'''
        return super(IBezierCurve2, self).QueryCoords(controlPoints)
    def PutCoords(self, numPoints, controlPoints):
        '''Method IBezierCurve.PutCoords (from IBezierCurve)

           INPUTS
            numPoints           : long
            controlPoints       : IPoint**'''
        return super(IBezierCurve2, self).PutCoords(numPoints, controlPoints)
    def QueryWKSCoords(self):
        '''Method IBezierCurve.QueryWKSCoords (from IBezierCurve)

           OUTPUT
            controlPoints       : WKSPoint*'''
        return super(IBezierCurve2, self).QueryWKSCoords()
    def PutWKSCoords(self, controlPoints):
        '''Method IBezierCurve.PutWKSCoords (from IBezierCurve)

           INPUT
            controlPoints       : WKSPoint*'''
        return super(IBezierCurve2, self).PutWKSCoords(controlPoints)
    def QueryCoord(self, Index, controlPoint):
        '''Method IBezierCurve.QueryCoord (from IBezierCurve)

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurve2, self).QueryCoord(Index, controlPoint)
    def PutCoord(self, Index, controlPoint):
        '''Method IBezierCurve.PutCoord (from IBezierCurve)

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurve2, self).PutCoord(Index, controlPoint)
    def get_Degree(self):
        '''Method IBezierCurve.get_Degree (from IBezierCurve)

           OUTPUT
            Degree              : long*'''
        return super(IBezierCurve2, self).get_Degree()
    def QueryChordLengthTangentAtFrom(self, tangent):
        '''Method IBezierCurve.QueryChordLengthTangentAtFrom (from IBezierCurve)

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurve2, self).QueryChordLengthTangentAtFrom(tangent)
    def QueryChordLengthTangentAtTo(self, tangent):
        '''Method IBezierCurve.QueryChordLengthTangentAtTo (from IBezierCurve)

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurve2, self).QueryChordLengthTangentAtTo(tangent)
    def SetChordLengthTangentAtFrom(self, tangent, setByUser):
        '''Method IBezierCurve.SetChordLengthTangentAtFrom (from IBezierCurve)

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurve2, self).SetChordLengthTangentAtFrom(tangent, setByUser)
    def SetChordLengthTangentAtTo(self, tangent, setByUser):
        '''Method IBezierCurve.SetChordLengthTangentAtTo (from IBezierCurve)

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurve2, self).SetChordLengthTangentAtTo(tangent, setByUser)
    def QueryInflectionPoint(self, inflectionPoint):
        '''Method IBezierCurve.QueryInflectionPoint (from IBezierCurve)

           INPUT
            inflectionPoint     : IPoint*'''
        return super(IBezierCurve2, self).QueryInflectionPoint(inflectionPoint)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IBezierCurve2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IBezierCurve2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IBezierCurve2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IBezierCurve2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IBezierCurve2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IBezierCurve2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IBezierCurve2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IBezierCurve2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IBezierCurve2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IBezierCurve2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IBezierCurve2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IBezierCurve2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IBezierCurve2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IBezierCurve2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IBezierCurve2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IBezierCurve2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IBezierCurve2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IBezierCurve2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IBezierCurve2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IBezierCurve2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IBezierCurve2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IBezierCurve2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IBezierCurve2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IBezierCurve2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IBezierCurve2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IBezierCurve2, self).GeoNormalizeFromLongitude(Longitude)
    Degree = property(get_Degree, None, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsLine = property(get_IsLine, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IBezierCurve3(_esriGeometry.IBezierCurve3):
    _IID = uuid.UUID('7d2ebdd3-edf5-4072-91f4-978fb62c6e3b')

    def __init__(self, *args, **kw):
        super(IBezierCurve3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Parameter(self, DistanceAlongCurve, asRatio):
        '''Method IBezierCurve3.get_Parameter

           INPUTS
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            u                   : double*'''
        return super(IBezierCurve3, self).get_Parameter(DistanceAlongCurve, asRatio)
    def get_IsLine(self):
        '''Method IBezierCurve2.get_IsLine (from IBezierCurve2)

           OUTPUT
            IsLine              : VARIANT_BOOL*'''
        return super(IBezierCurve3, self).get_IsLine()
    def QueryCoords(self, controlPoints):
        '''Method IBezierCurve.QueryCoords (from IBezierCurve)

           INPUT
            controlPoints       : IPoint**'''
        return super(IBezierCurve3, self).QueryCoords(controlPoints)
    def PutCoords(self, numPoints, controlPoints):
        '''Method IBezierCurve.PutCoords (from IBezierCurve)

           INPUTS
            numPoints           : long
            controlPoints       : IPoint**'''
        return super(IBezierCurve3, self).PutCoords(numPoints, controlPoints)
    def QueryWKSCoords(self):
        '''Method IBezierCurve.QueryWKSCoords (from IBezierCurve)

           OUTPUT
            controlPoints       : WKSPoint*'''
        return super(IBezierCurve3, self).QueryWKSCoords()
    def PutWKSCoords(self, controlPoints):
        '''Method IBezierCurve.PutWKSCoords (from IBezierCurve)

           INPUT
            controlPoints       : WKSPoint*'''
        return super(IBezierCurve3, self).PutWKSCoords(controlPoints)
    def QueryCoord(self, Index, controlPoint):
        '''Method IBezierCurve.QueryCoord (from IBezierCurve)

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurve3, self).QueryCoord(Index, controlPoint)
    def PutCoord(self, Index, controlPoint):
        '''Method IBezierCurve.PutCoord (from IBezierCurve)

           INPUTS
            Index               : long
            controlPoint        : IPoint*'''
        return super(IBezierCurve3, self).PutCoord(Index, controlPoint)
    def get_Degree(self):
        '''Method IBezierCurve.get_Degree (from IBezierCurve)

           OUTPUT
            Degree              : long*'''
        return super(IBezierCurve3, self).get_Degree()
    def QueryChordLengthTangentAtFrom(self, tangent):
        '''Method IBezierCurve.QueryChordLengthTangentAtFrom (from IBezierCurve)

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurve3, self).QueryChordLengthTangentAtFrom(tangent)
    def QueryChordLengthTangentAtTo(self, tangent):
        '''Method IBezierCurve.QueryChordLengthTangentAtTo (from IBezierCurve)

           INPUT
            tangent             : IPoint*

           OUTPUT
            setByUser           : VARIANT_BOOL*'''
        return super(IBezierCurve3, self).QueryChordLengthTangentAtTo(tangent)
    def SetChordLengthTangentAtFrom(self, tangent, setByUser):
        '''Method IBezierCurve.SetChordLengthTangentAtFrom (from IBezierCurve)

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurve3, self).SetChordLengthTangentAtFrom(tangent, setByUser)
    def SetChordLengthTangentAtTo(self, tangent, setByUser):
        '''Method IBezierCurve.SetChordLengthTangentAtTo (from IBezierCurve)

           INPUTS
            tangent             : IPoint*
            setByUser           : VARIANT_BOOL'''
        return super(IBezierCurve3, self).SetChordLengthTangentAtTo(tangent, setByUser)
    def QueryInflectionPoint(self, inflectionPoint):
        '''Method IBezierCurve.QueryInflectionPoint (from IBezierCurve)

           INPUT
            inflectionPoint     : IPoint*'''
        return super(IBezierCurve3, self).QueryInflectionPoint(inflectionPoint)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IBezierCurve3, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IBezierCurve3, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IBezierCurve3, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IBezierCurve3, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IBezierCurve3, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IBezierCurve3, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IBezierCurve3, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IBezierCurve3, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IBezierCurve3, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IBezierCurve3, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IBezierCurve3, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IBezierCurve3, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IBezierCurve3, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IBezierCurve3, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IBezierCurve3, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IBezierCurve3, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IBezierCurve3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IBezierCurve3, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IBezierCurve3, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IBezierCurve3, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IBezierCurve3, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IBezierCurve3, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IBezierCurve3, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IBezierCurve3, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IBezierCurve3, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IBezierCurve3, self).GeoNormalizeFromLongitude(Longitude)
    Degree = property(get_Degree, None, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsLine = property(get_IsLine, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IRing2(_esriGeometry.IRing2):
    _IID = uuid.UUID('6011fa75-0c4a-11d6-9fa9-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IRing2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ReshapeEx(self, reshapeSource):
        '''Method IRing2.ReshapeEx

           INPUT
            reshapeSource       : IPath*

           OUTPUTS
            leftResult          : IGeometry**
            rightResult         : IGeometry**'''
        return super(IRing2, self).ReshapeEx(reshapeSource)
    def get_IsExterior(self):
        '''Method IRing.get_IsExterior (from IRing)

           OUTPUT
            IsExterior          : VARIANT_BOOL*'''
        return super(IRing2, self).get_IsExterior()
    def Reshape(self, reshapeSource):
        '''Method IRing.Reshape (from IRing)

           INPUT
            reshapeSource       : IPath*

           OUTPUT
            reshapeHappened     : VARIANT_BOOL*'''
        return super(IRing2, self).Reshape(reshapeSource)
    def Close(self):
        '''Method IRing.Close (from IRing)'''
        return super(IRing2, self).Close()
    def GetSubcurveEx(self, fromDistance, toDistance, asRatio, isCCW, useRingOrientation):
        '''Method IRing.GetSubcurveEx (from IRing)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL
            isCCW               : VARIANT_BOOL
            useRingOrientation  : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IRing2, self).GetSubcurveEx(fromDistance, toDistance, asRatio, isCCW, useRingOrientation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPath.Generalize (from IPath)

           INPUT
            maxAllowableOffset  : double'''
        return super(IRing2, self).Generalize(maxAllowableOffset)
    def Smooth(self, maxAllowableOffset):
        '''Method IPath.Smooth (from IPath)

           INPUT
            maxAllowableOffset  : double'''
        return super(IRing2, self).Smooth(maxAllowableOffset)
    def SmoothLocal(self, vertexIndex):
        '''Method IPath.SmoothLocal (from IPath)

           INPUT
            vertexIndex         : long'''
        return super(IRing2, self).SmoothLocal(vertexIndex)
    def QueryChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
        '''Method IPath.QueryChordLengthTangents (from IPath)

           INPUTS
            pointIndex          : long
            prevTangent         : IPoint*
            nextTangent         : IPoint*

           OUTPUTS
            prevSetByUser       : VARIANT_BOOL*
            nextSetByUser       : VARIANT_BOOL*'''
        return super(IRing2, self).QueryChordLengthTangents(pointIndex, prevTangent, nextTangent)
    def SetChordLengthTangents(self, pointIndex, prevTangent, nextTangent):
        '''Method IPath.SetChordLengthTangents (from IPath)

           INPUTS
            pointIndex          : long
            prevTangent         : IPoint*
            nextTangent         : IPoint*'''
        return super(IRing2, self).SetChordLengthTangents(pointIndex, prevTangent, nextTangent)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IRing2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IRing2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IRing2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IRing2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IRing2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IRing2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IRing2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IRing2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IRing2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IRing2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IRing2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IRing2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IRing2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IRing2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IRing2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IRing2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IRing2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IRing2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IRing2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IRing2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IRing2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IRing2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IRing2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IRing2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IRing2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IRing2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsExterior = property(get_IsExterior, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IConstructMultipoint(_esriGeometry.IConstructMultipoint):
    _IID = uuid.UUID('be99e37a-14f8-11d1-8336-0000f8775be9')
    def ConstructTangent(self, inCurve, p):
        '''Method IConstructMultipoint.ConstructTangent

           INPUTS
            inCurve             : ICurve*
            p                   : IPoint*'''
        return super(IConstructMultipoint, self).ConstructTangent(inCurve, p)
    def ConstructDivideEqual(self, inCurve, numInnerPoints):
        '''Method IConstructMultipoint.ConstructDivideEqual

           INPUTS
            inCurve             : ICurve*
            numInnerPoints      : long'''
        return super(IConstructMultipoint, self).ConstructDivideEqual(inCurve, numInnerPoints)
    def ConstructDivideLength(self, inCurve, separationDistance):
        '''Method IConstructMultipoint.ConstructDivideLength

           INPUTS
            inCurve             : ICurve*
            separationDistance  : double'''
        return super(IConstructMultipoint, self).ConstructDivideLength(inCurve, separationDistance)
    def ConstructArcPoints(self, a):
        '''Method IConstructMultipoint.ConstructArcPoints

           INPUT
            a                   : ICircularArc*'''
        return super(IConstructMultipoint, self).ConstructArcPoints(a)
    def ConstructIntersectionEx(self, segment1, extension1, segment2, extension2):
        '''Method IConstructMultipoint.ConstructIntersectionEx

           INPUTS
            segment1            : ISegment*
            extension1          : esriSegmentExtension
            segment2            : ISegment*
            extension2          : esriSegmentExtension

           OUTPUTS
            params1             : double*
            params2             : double*
            tangentBits         : long*'''
        return super(IConstructMultipoint, self).ConstructIntersectionEx(segment1, extension1, segment2, extension2)
    def ConstructIntersection(self, segment1, extension1, segment2, extension2):
        '''Method IConstructMultipoint.ConstructIntersection

           INPUTS
            segment1            : ISegment*
            extension1          : esriSegmentExtension
            segment2            : ISegment*
            extension2          : esriSegmentExtension

           OUTPUTS
            params1             : VARIANT*
            params2             : VARIANT*
            isTangentPoint      : VARIANT*'''
        return super(IConstructMultipoint, self).ConstructIntersection(segment1, extension1, segment2, extension2)

class ITopologicalOperator3(_esriGeometry.ITopologicalOperator3):
    _IID = uuid.UUID('d4dc3b12-88ea-42d8-87b7-4eb7460737c1')

    def __init__(self, *args, **kw):
        super(ITopologicalOperator3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsSimpleEx(self):
        '''Method ITopologicalOperator3.get_IsSimpleEx

           OUTPUTS
            reason              : esriNonSimpleReasonEnum*
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator3, self).get_IsSimpleEx()
    def GeoNormalizeEx(self, SR, denseDistance):
        '''Method ITopologicalOperator3.GeoNormalizeEx

           INPUTS
            SR                  : ISpatialReference*
            denseDistance       : double'''
        return super(ITopologicalOperator3, self).GeoNormalizeEx(SR, denseDistance)
    def ConstructBuffers(self, numBuffers, distances):
        '''Method ITopologicalOperator2.ConstructBuffers (from ITopologicalOperator2)

           INPUTS
            numBuffers          : long
            distances           : double*

           OUTPUT
            buffers             : IEnumGeometry**'''
        return super(ITopologicalOperator3, self).ConstructBuffers(numBuffers, distances)
    def ClipToDomain(self):
        '''Method ITopologicalOperator2.ClipToDomain (from ITopologicalOperator2)'''
        return super(ITopologicalOperator3, self).ClipToDomain()
    def put_IsKnownSimple(self, _arg1):
        '''Method ITopologicalOperator2.put_IsKnownSimple (from ITopologicalOperator2)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(ITopologicalOperator3, self).put_IsKnownSimple(_arg1)
    def IntersectMultidimension(self, other):
        '''Method ITopologicalOperator2.IntersectMultidimension (from ITopologicalOperator2)

           INPUT
            other               : IGeometry*

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator3, self).IntersectMultidimension(other)
    def get_IsSimple(self):
        '''Method ITopologicalOperator.get_IsSimple (from ITopologicalOperator)

           OUTPUT
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator3, self).get_IsSimple()
    def get_IsKnownSimple(self):
        '''Method ITopologicalOperator.get_IsKnownSimple (from ITopologicalOperator)

           OUTPUT
            IsKnownSimple       : VARIANT_BOOL*'''
        return super(ITopologicalOperator3, self).get_IsKnownSimple()
    def Simplify(self):
        '''Method ITopologicalOperator.Simplify (from ITopologicalOperator)'''
        return super(ITopologicalOperator3, self).Simplify()
    def Buffer(self, distance):
        '''Method ITopologicalOperator.Buffer (from ITopologicalOperator)

           INPUT
            distance            : double

           OUTPUT
            outBuffer           : IGeometry**'''
        return super(ITopologicalOperator3, self).Buffer(distance)
    def ConvexHull(self):
        '''Method ITopologicalOperator.ConvexHull (from ITopologicalOperator)

           OUTPUT
            outHull             : IGeometry**'''
        return super(ITopologicalOperator3, self).ConvexHull()
    def Intersect(self, other, resultDimension):
        '''Method ITopologicalOperator.Intersect (from ITopologicalOperator)

           INPUTS
            other               : IGeometry*
            resultDimension     : esriGeometryDimension

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator3, self).Intersect(other, resultDimension)
    def Union(self, other):
        '''Method ITopologicalOperator.Union (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator3, self).Union(other)
    def ConstructUnion(self, geometries):
        '''Method ITopologicalOperator.ConstructUnion (from ITopologicalOperator)

           INPUT
            geometries          : IEnumGeometry*'''
        return super(ITopologicalOperator3, self).ConstructUnion(geometries)
    def Difference(self, other):
        '''Method ITopologicalOperator.Difference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator3, self).Difference(other)
    def SymmetricDifference(self, other):
        '''Method ITopologicalOperator.SymmetricDifference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator3, self).SymmetricDifference(other)
    def Clip(self, clipperEnvelope):
        '''Method ITopologicalOperator.Clip (from ITopologicalOperator)

           INPUT
            clipperEnvelope     : IEnvelope*'''
        return super(ITopologicalOperator3, self).Clip(clipperEnvelope)
    def QueryClipped(self, clipperEnvelope, clippedGeometry):
        '''Method ITopologicalOperator.QueryClipped (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator3, self).QueryClipped(clipperEnvelope, clippedGeometry)
    def QueryClippedDense(self, clipperEnvelope, denseDistance, clippedGeometry):
        '''Method ITopologicalOperator.QueryClippedDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator3, self).QueryClippedDense(clipperEnvelope, denseDistance, clippedGeometry)
    def Cut(self, cutter):
        '''Method ITopologicalOperator.Cut (from ITopologicalOperator)

           INPUT
            cutter              : IPolyline*

           OUTPUTS
            leftGeom            : IGeometry**
            rightGeom           : IGeometry**'''
        return super(ITopologicalOperator3, self).Cut(cutter)
    def get_Boundary(self):
        '''Method ITopologicalOperator.get_Boundary (from ITopologicalOperator)

           OUTPUT
            outBoundary         : IGeometry**'''
        return super(ITopologicalOperator3, self).get_Boundary()
    def ClipDense(self, clipperEnvelope, denseDistance):
        '''Method ITopologicalOperator.ClipDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double'''
        return super(ITopologicalOperator3, self).ClipDense(clipperEnvelope, denseDistance)
    def get_TopologyCache(self):
        '''Method ITopologicalOperator.get_TopologyCache (from ITopologicalOperator)

           OUTPUT
            topologyCacheHandle : TopologyHandle*'''
        return super(ITopologicalOperator3, self).get_TopologyCache()
    Boundary = property(get_Boundary, None, None)
    IsKnownSimple = property(get_IsKnownSimple, put_IsKnownSimple, None)
    IsSimple = property(get_IsSimple, None, None)
    IsSimpleEx = property(get_IsSimpleEx, None, None)
    TopologyCache = property(get_TopologyCache, None, None)

class ITopologicalOperator4(_esriGeometry.ITopologicalOperator4):
    _IID = uuid.UUID('6aba2e62-630e-4d93-86ca-3d397c28cf44')

    def __init__(self, *args, **kw):
        super(ITopologicalOperator4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Cut2(self, pCutter):
        '''Method ITopologicalOperator4.Cut2

           INPUT
            pCutter             : IPolyline*

           OUTPUT
            ppParts             : IGeometryCollection**'''
        return super(ITopologicalOperator4, self).Cut2(pCutter)
    def get_IsSimpleEx(self):
        '''Method ITopologicalOperator3.get_IsSimpleEx (from ITopologicalOperator3)

           OUTPUTS
            reason              : esriNonSimpleReasonEnum*
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator4, self).get_IsSimpleEx()
    def GeoNormalizeEx(self, SR, denseDistance):
        '''Method ITopologicalOperator3.GeoNormalizeEx (from ITopologicalOperator3)

           INPUTS
            SR                  : ISpatialReference*
            denseDistance       : double'''
        return super(ITopologicalOperator4, self).GeoNormalizeEx(SR, denseDistance)
    def ConstructBuffers(self, numBuffers, distances):
        '''Method ITopologicalOperator2.ConstructBuffers (from ITopologicalOperator2)

           INPUTS
            numBuffers          : long
            distances           : double*

           OUTPUT
            buffers             : IEnumGeometry**'''
        return super(ITopologicalOperator4, self).ConstructBuffers(numBuffers, distances)
    def ClipToDomain(self):
        '''Method ITopologicalOperator2.ClipToDomain (from ITopologicalOperator2)'''
        return super(ITopologicalOperator4, self).ClipToDomain()
    def put_IsKnownSimple(self, _arg1):
        '''Method ITopologicalOperator2.put_IsKnownSimple (from ITopologicalOperator2)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(ITopologicalOperator4, self).put_IsKnownSimple(_arg1)
    def IntersectMultidimension(self, other):
        '''Method ITopologicalOperator2.IntersectMultidimension (from ITopologicalOperator2)

           INPUT
            other               : IGeometry*

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator4, self).IntersectMultidimension(other)
    def get_IsSimple(self):
        '''Method ITopologicalOperator.get_IsSimple (from ITopologicalOperator)

           OUTPUT
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator4, self).get_IsSimple()
    def get_IsKnownSimple(self):
        '''Method ITopologicalOperator.get_IsKnownSimple (from ITopologicalOperator)

           OUTPUT
            IsKnownSimple       : VARIANT_BOOL*'''
        return super(ITopologicalOperator4, self).get_IsKnownSimple()
    def Simplify(self):
        '''Method ITopologicalOperator.Simplify (from ITopologicalOperator)'''
        return super(ITopologicalOperator4, self).Simplify()
    def Buffer(self, distance):
        '''Method ITopologicalOperator.Buffer (from ITopologicalOperator)

           INPUT
            distance            : double

           OUTPUT
            outBuffer           : IGeometry**'''
        return super(ITopologicalOperator4, self).Buffer(distance)
    def ConvexHull(self):
        '''Method ITopologicalOperator.ConvexHull (from ITopologicalOperator)

           OUTPUT
            outHull             : IGeometry**'''
        return super(ITopologicalOperator4, self).ConvexHull()
    def Intersect(self, other, resultDimension):
        '''Method ITopologicalOperator.Intersect (from ITopologicalOperator)

           INPUTS
            other               : IGeometry*
            resultDimension     : esriGeometryDimension

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator4, self).Intersect(other, resultDimension)
    def Union(self, other):
        '''Method ITopologicalOperator.Union (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator4, self).Union(other)
    def ConstructUnion(self, geometries):
        '''Method ITopologicalOperator.ConstructUnion (from ITopologicalOperator)

           INPUT
            geometries          : IEnumGeometry*'''
        return super(ITopologicalOperator4, self).ConstructUnion(geometries)
    def Difference(self, other):
        '''Method ITopologicalOperator.Difference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator4, self).Difference(other)
    def SymmetricDifference(self, other):
        '''Method ITopologicalOperator.SymmetricDifference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator4, self).SymmetricDifference(other)
    def Clip(self, clipperEnvelope):
        '''Method ITopologicalOperator.Clip (from ITopologicalOperator)

           INPUT
            clipperEnvelope     : IEnvelope*'''
        return super(ITopologicalOperator4, self).Clip(clipperEnvelope)
    def QueryClipped(self, clipperEnvelope, clippedGeometry):
        '''Method ITopologicalOperator.QueryClipped (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator4, self).QueryClipped(clipperEnvelope, clippedGeometry)
    def QueryClippedDense(self, clipperEnvelope, denseDistance, clippedGeometry):
        '''Method ITopologicalOperator.QueryClippedDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator4, self).QueryClippedDense(clipperEnvelope, denseDistance, clippedGeometry)
    def Cut(self, cutter):
        '''Method ITopologicalOperator.Cut (from ITopologicalOperator)

           INPUT
            cutter              : IPolyline*

           OUTPUTS
            leftGeom            : IGeometry**
            rightGeom           : IGeometry**'''
        return super(ITopologicalOperator4, self).Cut(cutter)
    def get_Boundary(self):
        '''Method ITopologicalOperator.get_Boundary (from ITopologicalOperator)

           OUTPUT
            outBoundary         : IGeometry**'''
        return super(ITopologicalOperator4, self).get_Boundary()
    def ClipDense(self, clipperEnvelope, denseDistance):
        '''Method ITopologicalOperator.ClipDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double'''
        return super(ITopologicalOperator4, self).ClipDense(clipperEnvelope, denseDistance)
    def get_TopologyCache(self):
        '''Method ITopologicalOperator.get_TopologyCache (from ITopologicalOperator)

           OUTPUT
            topologyCacheHandle : TopologyHandle*'''
        return super(ITopologicalOperator4, self).get_TopologyCache()
    Boundary = property(get_Boundary, None, None)
    IsKnownSimple = property(get_IsKnownSimple, put_IsKnownSimple, None)
    IsSimple = property(get_IsSimple, None, None)
    IsSimpleEx = property(get_IsSimpleEx, None, None)
    TopologyCache = property(get_TopologyCache, None, None)

class ITopologicalOperator5(_esriGeometry.ITopologicalOperator5):
    _IID = uuid.UUID('8e98af7f-791e-419e-ba0b-60ba36b27639')

    def __init__(self, *args, **kw):
        super(ITopologicalOperator5, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ClipEx(self, clipperEnvelope, bIncludeBoundary):
        '''Method ITopologicalOperator5.ClipEx

           INPUTS
            clipperEnvelope     : IEnvelope*
            bIncludeBoundary    : VARIANT_BOOL'''
        return super(ITopologicalOperator5, self).ClipEx(clipperEnvelope, bIncludeBoundary)
    def Cut2(self, pCutter):
        '''Method ITopologicalOperator4.Cut2 (from ITopologicalOperator4)

           INPUT
            pCutter             : IPolyline*

           OUTPUT
            ppParts             : IGeometryCollection**'''
        return super(ITopologicalOperator5, self).Cut2(pCutter)
    def get_IsSimpleEx(self):
        '''Method ITopologicalOperator3.get_IsSimpleEx (from ITopologicalOperator3)

           OUTPUTS
            reason              : esriNonSimpleReasonEnum*
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator5, self).get_IsSimpleEx()
    def GeoNormalizeEx(self, SR, denseDistance):
        '''Method ITopologicalOperator3.GeoNormalizeEx (from ITopologicalOperator3)

           INPUTS
            SR                  : ISpatialReference*
            denseDistance       : double'''
        return super(ITopologicalOperator5, self).GeoNormalizeEx(SR, denseDistance)
    def ConstructBuffers(self, numBuffers, distances):
        '''Method ITopologicalOperator2.ConstructBuffers (from ITopologicalOperator2)

           INPUTS
            numBuffers          : long
            distances           : double*

           OUTPUT
            buffers             : IEnumGeometry**'''
        return super(ITopologicalOperator5, self).ConstructBuffers(numBuffers, distances)
    def ClipToDomain(self):
        '''Method ITopologicalOperator2.ClipToDomain (from ITopologicalOperator2)'''
        return super(ITopologicalOperator5, self).ClipToDomain()
    def put_IsKnownSimple(self, _arg1):
        '''Method ITopologicalOperator2.put_IsKnownSimple (from ITopologicalOperator2)

           INPUT
            _arg1               : VARIANT_BOOL'''
        return super(ITopologicalOperator5, self).put_IsKnownSimple(_arg1)
    def IntersectMultidimension(self, other):
        '''Method ITopologicalOperator2.IntersectMultidimension (from ITopologicalOperator2)

           INPUT
            other               : IGeometry*

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator5, self).IntersectMultidimension(other)
    def get_IsSimple(self):
        '''Method ITopologicalOperator.get_IsSimple (from ITopologicalOperator)

           OUTPUT
            IsSimple            : VARIANT_BOOL*'''
        return super(ITopologicalOperator5, self).get_IsSimple()
    def get_IsKnownSimple(self):
        '''Method ITopologicalOperator.get_IsKnownSimple (from ITopologicalOperator)

           OUTPUT
            IsKnownSimple       : VARIANT_BOOL*'''
        return super(ITopologicalOperator5, self).get_IsKnownSimple()
    def Simplify(self):
        '''Method ITopologicalOperator.Simplify (from ITopologicalOperator)'''
        return super(ITopologicalOperator5, self).Simplify()
    def Buffer(self, distance):
        '''Method ITopologicalOperator.Buffer (from ITopologicalOperator)

           INPUT
            distance            : double

           OUTPUT
            outBuffer           : IGeometry**'''
        return super(ITopologicalOperator5, self).Buffer(distance)
    def ConvexHull(self):
        '''Method ITopologicalOperator.ConvexHull (from ITopologicalOperator)

           OUTPUT
            outHull             : IGeometry**'''
        return super(ITopologicalOperator5, self).ConvexHull()
    def Intersect(self, other, resultDimension):
        '''Method ITopologicalOperator.Intersect (from ITopologicalOperator)

           INPUTS
            other               : IGeometry*
            resultDimension     : esriGeometryDimension

           OUTPUT
            intersection        : IGeometry**'''
        return super(ITopologicalOperator5, self).Intersect(other, resultDimension)
    def Union(self, other):
        '''Method ITopologicalOperator.Union (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator5, self).Union(other)
    def ConstructUnion(self, geometries):
        '''Method ITopologicalOperator.ConstructUnion (from ITopologicalOperator)

           INPUT
            geometries          : IEnumGeometry*'''
        return super(ITopologicalOperator5, self).ConstructUnion(geometries)
    def Difference(self, other):
        '''Method ITopologicalOperator.Difference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator5, self).Difference(other)
    def SymmetricDifference(self, other):
        '''Method ITopologicalOperator.SymmetricDifference (from ITopologicalOperator)

           INPUT
            other               : IGeometry*

           OUTPUT
            resultGeom          : IGeometry**'''
        return super(ITopologicalOperator5, self).SymmetricDifference(other)
    def Clip(self, clipperEnvelope):
        '''Method ITopologicalOperator.Clip (from ITopologicalOperator)

           INPUT
            clipperEnvelope     : IEnvelope*'''
        return super(ITopologicalOperator5, self).Clip(clipperEnvelope)
    def QueryClipped(self, clipperEnvelope, clippedGeometry):
        '''Method ITopologicalOperator.QueryClipped (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator5, self).QueryClipped(clipperEnvelope, clippedGeometry)
    def QueryClippedDense(self, clipperEnvelope, denseDistance, clippedGeometry):
        '''Method ITopologicalOperator.QueryClippedDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double
            clippedGeometry     : IGeometry*'''
        return super(ITopologicalOperator5, self).QueryClippedDense(clipperEnvelope, denseDistance, clippedGeometry)
    def Cut(self, cutter):
        '''Method ITopologicalOperator.Cut (from ITopologicalOperator)

           INPUT
            cutter              : IPolyline*

           OUTPUTS
            leftGeom            : IGeometry**
            rightGeom           : IGeometry**'''
        return super(ITopologicalOperator5, self).Cut(cutter)
    def get_Boundary(self):
        '''Method ITopologicalOperator.get_Boundary (from ITopologicalOperator)

           OUTPUT
            outBoundary         : IGeometry**'''
        return super(ITopologicalOperator5, self).get_Boundary()
    def ClipDense(self, clipperEnvelope, denseDistance):
        '''Method ITopologicalOperator.ClipDense (from ITopologicalOperator)

           INPUTS
            clipperEnvelope     : IEnvelope*
            denseDistance       : double'''
        return super(ITopologicalOperator5, self).ClipDense(clipperEnvelope, denseDistance)
    def get_TopologyCache(self):
        '''Method ITopologicalOperator.get_TopologyCache (from ITopologicalOperator)

           OUTPUT
            topologyCacheHandle : TopologyHandle*'''
        return super(ITopologicalOperator5, self).get_TopologyCache()
    Boundary = property(get_Boundary, None, None)
    IsKnownSimple = property(get_IsKnownSimple, put_IsKnownSimple, None)
    IsSimple = property(get_IsSimple, None, None)
    IsSimpleEx = property(get_IsSimpleEx, None, None)
    TopologyCache = property(get_TopologyCache, None, None)

class IPolygon2(_esriGeometry.IPolygon2):
    _IID = uuid.UUID('55e67f71-30ff-11d4-9f5e-00c04f6bdf0d')

    def __init__(self, *args, **kw):
        super(IPolygon2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryExteriorRingsEx(self, numExteriorRingsRequested):
        '''Method IPolygon2.QueryExteriorRingsEx

           INPUT
            numExteriorRingsRequested: long

           OUTPUT
            exteriorRings       : IRing**'''
        return super(IPolygon2, self).QueryExteriorRingsEx(numExteriorRingsRequested)
    def QueryInteriorRingsEx(self, exteriorRing, numInteriorRingsRequested):
        '''Method IPolygon2.QueryInteriorRingsEx

           INPUTS
            exteriorRing        : IRing*
            numInteriorRingsRequested: long

           OUTPUT
            interiorRings       : IRing**'''
        return super(IPolygon2, self).QueryInteriorRingsEx(exteriorRing, numInteriorRingsRequested)
    def GetConnectedComponents(self, numComponentsRequested):
        '''Method IPolygon2.GetConnectedComponents

           INPUT
            numComponentsRequested: long

           OUTPUT
            components          : IPolygon**'''
        return super(IPolygon2, self).GetConnectedComponents(numComponentsRequested)
    def GetOutermostComponents(self, numComponentsRequested):
        '''Method IPolygon2.GetOutermostComponents

           INPUT
            numComponentsRequested: long

           OUTPUTS
            numComponentsReturned: long*
            components          : IPolygon**
            moreComponentsExist : VARIANT_BOOL*'''
        return super(IPolygon2, self).GetOutermostComponents(numComponentsRequested)
    def FindExteriorRing(self, interiorRing):
        '''Method IPolygon.FindExteriorRing (from IPolygon)

           INPUT
            interiorRing        : IRing*

           OUTPUT
            exteriorRing        : IRing**'''
        return super(IPolygon2, self).FindExteriorRing(interiorRing)
    def get_ExteriorRingCount(self):
        '''Method IPolygon.get_ExteriorRingCount (from IPolygon)

           OUTPUT
            cExteriorRings      : long*'''
        return super(IPolygon2, self).get_ExteriorRingCount()
    def QueryExteriorRings(self, exteriorRings):
        '''Method IPolygon.QueryExteriorRings (from IPolygon)

           INPUT
            exteriorRings       : IRing**'''
        return super(IPolygon2, self).QueryExteriorRings(exteriorRings)
    def get_InteriorRingCount(self, exteriorRing):
        '''Method IPolygon.get_InteriorRingCount (from IPolygon)

           INPUT
            exteriorRing        : IRing*

           OUTPUT
            cInteriorRings      : long*'''
        return super(IPolygon2, self).get_InteriorRingCount(exteriorRing)
    def QueryInteriorRings(self, exteriorRing, interiorRings):
        '''Method IPolygon.QueryInteriorRings (from IPolygon)

           INPUTS
            exteriorRing        : IRing*
            interiorRings       : IRing**'''
        return super(IPolygon2, self).QueryInteriorRings(exteriorRing, interiorRings)
    def Close(self):
        '''Method IPolygon.Close (from IPolygon)'''
        return super(IPolygon2, self).Close()
    def SimplifyPreserveFromTo(self):
        '''Method IPolygon.SimplifyPreserveFromTo (from IPolygon)'''
        return super(IPolygon2, self).SimplifyPreserveFromTo()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolygon2, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon2, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolygon2, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon2, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon2, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon2, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolygon2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolygon2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolygon2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolygon2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolygon2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolygon2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolygon2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolygon2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolygon2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolygon2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolygon2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolygon2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolygon2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolygon2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolygon2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolygon2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolygon2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolygon2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolygon2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolygon2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolygon2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolygon2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    ExteriorRingCount = property(get_ExteriorRingCount, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    InteriorRingCount = IndexProperty(get_InteriorRingCount, None)

class IPolygon3(_esriGeometry.IPolygon3):
    _IID = uuid.UUID('287370ce-b306-4892-8a4c-a7970b132b79')

    def __init__(self, *args, **kw):
        super(IPolygon3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SimplifySpaghetti(self):
        '''Method IPolygon3.SimplifySpaghetti'''
        return super(IPolygon3, self).SimplifySpaghetti()
    def QueryExteriorRingsEx(self, numExteriorRingsRequested):
        '''Method IPolygon2.QueryExteriorRingsEx (from IPolygon2)

           INPUT
            numExteriorRingsRequested: long

           OUTPUT
            exteriorRings       : IRing**'''
        return super(IPolygon3, self).QueryExteriorRingsEx(numExteriorRingsRequested)
    def QueryInteriorRingsEx(self, exteriorRing, numInteriorRingsRequested):
        '''Method IPolygon2.QueryInteriorRingsEx (from IPolygon2)

           INPUTS
            exteriorRing        : IRing*
            numInteriorRingsRequested: long

           OUTPUT
            interiorRings       : IRing**'''
        return super(IPolygon3, self).QueryInteriorRingsEx(exteriorRing, numInteriorRingsRequested)
    def GetConnectedComponents(self, numComponentsRequested):
        '''Method IPolygon2.GetConnectedComponents (from IPolygon2)

           INPUT
            numComponentsRequested: long

           OUTPUT
            components          : IPolygon**'''
        return super(IPolygon3, self).GetConnectedComponents(numComponentsRequested)
    def GetOutermostComponents(self, numComponentsRequested):
        '''Method IPolygon2.GetOutermostComponents (from IPolygon2)

           INPUT
            numComponentsRequested: long

           OUTPUTS
            numComponentsReturned: long*
            components          : IPolygon**
            moreComponentsExist : VARIANT_BOOL*'''
        return super(IPolygon3, self).GetOutermostComponents(numComponentsRequested)
    def FindExteriorRing(self, interiorRing):
        '''Method IPolygon.FindExteriorRing (from IPolygon)

           INPUT
            interiorRing        : IRing*

           OUTPUT
            exteriorRing        : IRing**'''
        return super(IPolygon3, self).FindExteriorRing(interiorRing)
    def get_ExteriorRingCount(self):
        '''Method IPolygon.get_ExteriorRingCount (from IPolygon)

           OUTPUT
            cExteriorRings      : long*'''
        return super(IPolygon3, self).get_ExteriorRingCount()
    def QueryExteriorRings(self, exteriorRings):
        '''Method IPolygon.QueryExteriorRings (from IPolygon)

           INPUT
            exteriorRings       : IRing**'''
        return super(IPolygon3, self).QueryExteriorRings(exteriorRings)
    def get_InteriorRingCount(self, exteriorRing):
        '''Method IPolygon.get_InteriorRingCount (from IPolygon)

           INPUT
            exteriorRing        : IRing*

           OUTPUT
            cInteriorRings      : long*'''
        return super(IPolygon3, self).get_InteriorRingCount(exteriorRing)
    def QueryInteriorRings(self, exteriorRing, interiorRings):
        '''Method IPolygon.QueryInteriorRings (from IPolygon)

           INPUTS
            exteriorRing        : IRing*
            interiorRings       : IRing**'''
        return super(IPolygon3, self).QueryInteriorRings(exteriorRing, interiorRings)
    def Close(self):
        '''Method IPolygon.Close (from IPolygon)'''
        return super(IPolygon3, self).Close()
    def SimplifyPreserveFromTo(self):
        '''Method IPolygon.SimplifyPreserveFromTo (from IPolygon)'''
        return super(IPolygon3, self).SimplifyPreserveFromTo()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolygon3, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon3, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolygon3, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon3, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon3, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon3, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolygon3, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolygon3, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon3, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon3, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolygon3, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon3, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon3, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolygon3, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolygon3, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolygon3, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolygon3, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolygon3, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolygon3, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolygon3, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolygon3, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolygon3, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolygon3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolygon3, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolygon3, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolygon3, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolygon3, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolygon3, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolygon3, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolygon3, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolygon3, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolygon3, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    ExteriorRingCount = property(get_ExteriorRingCount, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    InteriorRingCount = IndexProperty(get_InteriorRingCount, None)

class IPolygon4(_esriGeometry.IPolygon4):
    _IID = uuid.UUID('5af81eb6-5616-49a0-b0a6-e265803e4bd2')

    def __init__(self, *args, **kw):
        super(IPolygon4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SimplifyEx(self, preserveFromToPoints, closeRings, useXORRule):
        '''Method IPolygon4.SimplifyEx

           INPUTS
            preserveFromToPoints: VARIANT_BOOL
            closeRings          : VARIANT_BOOL
            useXORRule          : VARIANT_BOOL'''
        return super(IPolygon4, self).SimplifyEx(preserveFromToPoints, closeRings, useXORRule)
    def get_ExteriorRingBag(self):
        '''Method IPolygon4.get_ExteriorRingBag

           OUTPUT
            ringBag             : IGeometryBag**'''
        return super(IPolygon4, self).get_ExteriorRingBag()
    def get_InteriorRingBag(self, exteriorRing):
        '''Method IPolygon4.get_InteriorRingBag

           INPUT
            exteriorRing        : IRing*

           OUTPUT
            ringBag             : IGeometryBag**'''
        return super(IPolygon4, self).get_InteriorRingBag(exteriorRing)
    def get_ConnectedComponentBag(self):
        '''Method IPolygon4.get_ConnectedComponentBag

           OUTPUT
            polygonBag          : IGeometryBag**'''
        return super(IPolygon4, self).get_ConnectedComponentBag()
    def get_OutermostComponentBag(self):
        '''Method IPolygon4.get_OutermostComponentBag

           OUTPUT
            polygonBag          : IGeometryBag**'''
        return super(IPolygon4, self).get_OutermostComponentBag()
    def SimplifySpaghetti(self):
        '''Method IPolygon3.SimplifySpaghetti (from IPolygon3)'''
        return super(IPolygon4, self).SimplifySpaghetti()
    def QueryExteriorRingsEx(self, numExteriorRingsRequested):
        '''Method IPolygon2.QueryExteriorRingsEx (from IPolygon2)

           INPUT
            numExteriorRingsRequested: long

           OUTPUT
            exteriorRings       : IRing**'''
        return super(IPolygon4, self).QueryExteriorRingsEx(numExteriorRingsRequested)
    def QueryInteriorRingsEx(self, exteriorRing, numInteriorRingsRequested):
        '''Method IPolygon2.QueryInteriorRingsEx (from IPolygon2)

           INPUTS
            exteriorRing        : IRing*
            numInteriorRingsRequested: long

           OUTPUT
            interiorRings       : IRing**'''
        return super(IPolygon4, self).QueryInteriorRingsEx(exteriorRing, numInteriorRingsRequested)
    def GetConnectedComponents(self, numComponentsRequested):
        '''Method IPolygon2.GetConnectedComponents (from IPolygon2)

           INPUT
            numComponentsRequested: long

           OUTPUT
            components          : IPolygon**'''
        return super(IPolygon4, self).GetConnectedComponents(numComponentsRequested)
    def GetOutermostComponents(self, numComponentsRequested):
        '''Method IPolygon2.GetOutermostComponents (from IPolygon2)

           INPUT
            numComponentsRequested: long

           OUTPUTS
            numComponentsReturned: long*
            components          : IPolygon**
            moreComponentsExist : VARIANT_BOOL*'''
        return super(IPolygon4, self).GetOutermostComponents(numComponentsRequested)
    def FindExteriorRing(self, interiorRing):
        '''Method IPolygon.FindExteriorRing (from IPolygon)

           INPUT
            interiorRing        : IRing*

           OUTPUT
            exteriorRing        : IRing**'''
        return super(IPolygon4, self).FindExteriorRing(interiorRing)
    def get_ExteriorRingCount(self):
        '''Method IPolygon.get_ExteriorRingCount (from IPolygon)

           OUTPUT
            cExteriorRings      : long*'''
        return super(IPolygon4, self).get_ExteriorRingCount()
    def QueryExteriorRings(self, exteriorRings):
        '''Method IPolygon.QueryExteriorRings (from IPolygon)

           INPUT
            exteriorRings       : IRing**'''
        return super(IPolygon4, self).QueryExteriorRings(exteriorRings)
    def get_InteriorRingCount(self, exteriorRing):
        '''Method IPolygon.get_InteriorRingCount (from IPolygon)

           INPUT
            exteriorRing        : IRing*

           OUTPUT
            cInteriorRings      : long*'''
        return super(IPolygon4, self).get_InteriorRingCount(exteriorRing)
    def QueryInteriorRings(self, exteriorRing, interiorRings):
        '''Method IPolygon.QueryInteriorRings (from IPolygon)

           INPUTS
            exteriorRing        : IRing*
            interiorRings       : IRing**'''
        return super(IPolygon4, self).QueryInteriorRings(exteriorRing, interiorRings)
    def Close(self):
        '''Method IPolygon.Close (from IPolygon)'''
        return super(IPolygon4, self).Close()
    def SimplifyPreserveFromTo(self):
        '''Method IPolygon.SimplifyPreserveFromTo (from IPolygon)'''
        return super(IPolygon4, self).SimplifyPreserveFromTo()
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolygon4, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon4, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolygon4, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolygon4, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon4, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolygon4, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolygon4, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolygon4, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon4, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolygon4, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolygon4, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon4, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolygon4, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolygon4, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolygon4, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolygon4, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolygon4, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolygon4, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolygon4, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolygon4, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolygon4, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolygon4, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolygon4, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolygon4, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolygon4, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolygon4, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolygon4, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolygon4, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolygon4, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolygon4, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolygon4, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolygon4, self).GeoNormalizeFromLongitude(Longitude)
    ConnectedComponentBag = property(get_ConnectedComponentBag, None, None)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    ExteriorRingBag = property(get_ExteriorRingBag, None, None)
    ExteriorRingCount = property(get_ExteriorRingCount, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    OutermostComponentBag = property(get_OutermostComponentBag, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    InteriorRingBag = IndexProperty(get_InteriorRingBag, None)
    InteriorRingCount = IndexProperty(get_InteriorRingCount, None)

class IPolycurve3(_esriGeometry.IPolycurve3):
    _IID = uuid.UUID('92e9489d-5a7a-4a82-b7a7-885df6e1ed5e')

    def __init__(self, *args, **kw):
        super(IPolycurve3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DensifyByAngleEx(self, maxSegmentLength, maxAngleDeviation, bTrackAll):
        '''Method IPolycurve3.DensifyByAngleEx

           INPUTS
            maxSegmentLength    : double
            maxAngleDeviation   : double
            bTrackAll           : VARIANT_BOOL

           OUTPUTS
            cOriginalSegments   : long*
            originalSegments    : esriOriginalSegmentMapping**'''
        return super(IPolycurve3, self).DensifyByAngleEx(maxSegmentLength, maxAngleDeviation, bTrackAll)
    def DensifyEx(self, maxSegmentLength, maxDeviation, bTrackAll):
        '''Method IPolycurve3.DensifyEx

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double
            bTrackAll           : VARIANT_BOOL

           OUTPUTS
            cOriginalSegments   : long*
            originalSegments    : esriOriginalSegmentMapping**'''
        return super(IPolycurve3, self).DensifyEx(maxSegmentLength, maxDeviation, bTrackAll)
    def SplitAtPoints(self, splitPoints, projectOnto, createParts, cutoffDistance):
        '''Method IPolycurve2.SplitAtPoints (from IPolycurve2)

           INPUTS
            splitPoints         : IEnumVertex*
            projectOnto         : VARIANT_BOOL
            createParts         : VARIANT_BOOL
            cutoffDistance      : double

           OUTPUT
            splitInfo           : IEnumSplitPoint**'''
        return super(IPolycurve3, self).SplitAtPoints(splitPoints, projectOnto, createParts, cutoffDistance)
    def SplitAtDistances(self, distanceCount, distances, asRatios, createParts):
        '''Method IPolycurve2.SplitAtDistances (from IPolycurve2)

           INPUTS
            distanceCount       : long
            distances           : double*
            asRatios            : VARIANT_BOOL
            createParts         : VARIANT_BOOL

           OUTPUT
            splitInfo           : IEnumSplitPoint**'''
        return super(IPolycurve3, self).SplitAtDistances(distanceCount, distances, asRatios, createParts)
    def DensifyByAngle(self, maxSegmentLength, maxAngleDeviation):
        '''Method IPolycurve2.DensifyByAngle (from IPolycurve2)

           INPUTS
            maxSegmentLength    : double
            maxAngleDeviation   : double'''
        return super(IPolycurve3, self).DensifyByAngle(maxSegmentLength, maxAngleDeviation)
    def Densify(self, maxSegmentLength, maxDeviation):
        '''Method IPolycurve.Densify (from IPolycurve)

           INPUTS
            maxSegmentLength    : double
            maxDeviation        : double'''
        return super(IPolycurve3, self).Densify(maxSegmentLength, maxDeviation)
    def Generalize(self, maxAllowableOffset):
        '''Method IPolycurve.Generalize (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolycurve3, self).Generalize(maxAllowableOffset)
    def Weed(self, maxAllowableOffsetFactor):
        '''Method IPolycurve.Weed (from IPolycurve)

           INPUT
            maxAllowableOffsetFactor: double'''
        return super(IPolycurve3, self).Weed(maxAllowableOffsetFactor)
    def Smooth(self, maxAllowableOffset):
        '''Method IPolycurve.Smooth (from IPolycurve)

           INPUT
            maxAllowableOffset  : double'''
        return super(IPolycurve3, self).Smooth(maxAllowableOffset)
    def SplitAtPoint(self, splitPoint, projectOnto, createPart):
        '''Method IPolycurve.SplitAtPoint (from IPolycurve)

           INPUTS
            splitPoint          : IPoint*
            projectOnto         : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolycurve3, self).SplitAtPoint(splitPoint, projectOnto, createPart)
    def SplitAtDistance(self, distance, asRatio, createPart):
        '''Method IPolycurve.SplitAtDistance (from IPolycurve)

           INPUTS
            distance            : double
            asRatio             : VARIANT_BOOL
            createPart          : VARIANT_BOOL

           OUTPUTS
            SplitHappened       : VARIANT_BOOL*
            newPartIndex        : long*
            newSegmentIndex     : long*'''
        return super(IPolycurve3, self).SplitAtDistance(distance, asRatio, createPart)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(IPolycurve3, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(IPolycurve3, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolycurve3, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(IPolycurve3, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(IPolycurve3, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolycurve3, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(IPolycurve3, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(IPolycurve3, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(IPolycurve3, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(IPolycurve3, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(IPolycurve3, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(IPolycurve3, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(IPolycurve3, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(IPolycurve3, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IPolycurve3, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IPolycurve3, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IPolycurve3, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IPolycurve3, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IPolycurve3, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IPolycurve3, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IPolycurve3, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IPolycurve3, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IPolycurve3, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IPolycurve3, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IPolycurve3, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IPolycurve3, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)

class IMultiPatch2(_esriGeometry.IMultiPatch2):
    _IID = uuid.UUID('292b91df-0e21-4489-9f14-ce2c96e9a777')

    def __init__(self, *args, **kw):
        super(IMultiPatch2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_XYFootprint(self, _arg1):
        '''Method IMultiPatch2.putref_XYFootprint

           INPUT
            _arg1               : IGeometry*'''
        return super(IMultiPatch2, self).putref_XYFootprint(_arg1)
    def FindBeginningRing(self, followingRing):
        '''Method IMultiPatch.FindBeginningRing (from IMultiPatch)

           INPUT
            followingRing       : IRing*

           OUTPUT
            beginningRing       : IRing**'''
        return super(IMultiPatch2, self).FindBeginningRing(followingRing)
    def get_BeginningRingCount(self, ringTypesDesired):
        '''Method IMultiPatch.get_BeginningRingCount (from IMultiPatch)

           INPUT
            ringTypesDesired    : long

           OUTPUT
            BeginningRingCount  : long*'''
        return super(IMultiPatch2, self).get_BeginningRingCount(ringTypesDesired)
    def QueryBeginningRings(self, ringTypesDesired, numBeginningRingsRequested):
        '''Method IMultiPatch.QueryBeginningRings (from IMultiPatch)

           INPUTS
            ringTypesDesired    : long
            numBeginningRingsRequested: long

           OUTPUT
            beginningRings      : IRing**'''
        return super(IMultiPatch2, self).QueryBeginningRings(ringTypesDesired, numBeginningRingsRequested)
    def get_FollowingRingCount(self, beginningRing):
        '''Method IMultiPatch.get_FollowingRingCount (from IMultiPatch)

           INPUT
            beginningRing       : IRing*

           OUTPUT
            FollowingRingCount  : long*'''
        return super(IMultiPatch2, self).get_FollowingRingCount(beginningRing)
    def QueryFollowingRings(self, beginningRing, numFollowingRingsRequested):
        '''Method IMultiPatch.QueryFollowingRings (from IMultiPatch)

           INPUTS
            beginningRing       : IRing*
            numFollowingRingsRequested: long

           OUTPUT
            followingRings      : IRing**'''
        return super(IMultiPatch2, self).QueryFollowingRings(beginningRing, numFollowingRingsRequested)
    def GetRingType(self, queryRing):
        '''Method IMultiPatch.GetRingType (from IMultiPatch)

           INPUT
            queryRing           : IRing*

           OUTPUTS
            isBeginningRing     : VARIANT_BOOL*
            ringType            : esriMultiPatchRingType*'''
        return super(IMultiPatch2, self).GetRingType(queryRing)
    def PutRingType(self, queryRing, ringType):
        '''Method IMultiPatch.PutRingType (from IMultiPatch)

           INPUTS
            queryRing           : IRing*
            ringType            : esriMultiPatchRingType'''
        return super(IMultiPatch2, self).PutRingType(queryRing, ringType)
    def get_XYFootprint(self):
        '''Method IMultiPatch.get_XYFootprint (from IMultiPatch)

           OUTPUT
            XYFootprint         : IGeometry**'''
        return super(IMultiPatch2, self).get_XYFootprint()
    def InvalXYFootprint(self):
        '''Method IMultiPatch.InvalXYFootprint (from IMultiPatch)'''
        return super(IMultiPatch2, self).InvalXYFootprint()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IMultiPatch2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IMultiPatch2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IMultiPatch2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IMultiPatch2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IMultiPatch2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IMultiPatch2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IMultiPatch2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IMultiPatch2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IMultiPatch2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IMultiPatch2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IMultiPatch2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IMultiPatch2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    XYFootprint = property(get_XYFootprint, putref_XYFootprint, None)
    BeginningRingCount = IndexProperty(get_BeginningRingCount, None)
    FollowingRingCount = IndexProperty(get_FollowingRingCount, None)

class ITopologicalSegment2(_esriGeometry.ITopologicalSegment2):
    _IID = uuid.UUID('fe736c24-01da-11d4-9f6c-00c04f6bdd7f')

    def __init__(self, *args, **kw):
        super(ITopologicalSegment2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsShort(self):
        '''Method ITopologicalSegment2.get_IsShort

           OUTPUT
            IsShort             : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).get_IsShort()
    def get_IsCounterClockwise2(self):
        '''Method ITopologicalSegment2.get_IsCounterClockwise2

           OUTPUT
            isCCW               : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).get_IsCounterClockwise2()
    def SplitYMonotonicEx(self, numSegments, segments, flipped, parentSegments):
        '''Method ITopologicalSegment2.SplitYMonotonicEx

           INPUTS
            numSegments         : long*
            segments            : ITopologicalSegment**
            flipped             : VARIANT_BOOL*
            parentSegments      : ITopologicalSegment2**'''
        return super(ITopologicalSegment2, self).SplitYMonotonicEx(numSegments, segments, flipped, parentSegments)
    def get_YAtX(self, p):
        '''Method ITopologicalSegment.get_YAtX (from ITopologicalSegment)

           INPUT
            p                   : WKSPoint*

           OUTPUT
            Y                   : double*'''
        return super(ITopologicalSegment2, self).get_YAtX(p)
    def BreakOverlap(self, otherSegment, interpolator, busted, overlapKind):
        '''Method ITopologicalSegment.BreakOverlap (from ITopologicalSegment)

           INPUTS
            otherSegment        : ITopologicalSegment*
            interpolator        : ITopologicalSegment*
            busted              : ITopologicalSegment**
            overlapKind         : long*'''
        return super(ITopologicalSegment2, self).BreakOverlap(otherSegment, interpolator, busted, overlapKind)
    def SplitYMonotonic(self, numSegments, segments, flipped):
        '''Method ITopologicalSegment.SplitYMonotonic (from ITopologicalSegment)

           INPUTS
            numSegments         : long*
            segments            : ITopologicalSegment**
            flipped             : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).SplitYMonotonic(numSegments, segments, flipped)
    def QueryAttributes(self, getAttributes, getAwareness, From, to):
        '''Method ISegment.QueryAttributes (from ISegment)

           INPUTS
            getAttributes       : VARIANT_BOOL
            getAwareness        : VARIANT_BOOL
            from                : esriPointAttributes*
            to                  : esriPointAttributes*'''
        return super(ITopologicalSegment2, self).QueryAttributes(getAttributes, getAwareness, From, to)
    def PutAttributes(self, PutAttributes, putAwareness, From, to):
        '''Method ISegment.PutAttributes (from ISegment)

           INPUTS
            PutAttributes       : VARIANT_BOOL
            putAwareness        : VARIANT_BOOL
            from                : esriPointAttributes*
            to                  : esriPointAttributes*'''
        return super(ITopologicalSegment2, self).PutAttributes(PutAttributes, putAwareness, From, to)
    def get_VertexAttributeAware(self, attributeType):
        '''Method ISegment.get_VertexAttributeAware (from ISegment)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeAware      : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).get_VertexAttributeAware(attributeType)
    def put_VertexAttributeAware(self, attributeType, attributeAware):
        '''Method ISegment.put_VertexAttributeAware (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeAware      : VARIANT_BOOL'''
        return super(ITopologicalSegment2, self).put_VertexAttributeAware(attributeType, attributeAware)
    def HasVertexAttributes(self, attributeType):
        '''Method ISegment.HasVertexAttributes (from ISegment)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUTS
            hasFromAttribute    : VARIANT_BOOL*
            hasToAttribute      : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).HasVertexAttributes(attributeType)
    def VertexAttributeOn(self, attributeType, attributeValue):
        '''Method ISegment.VertexAttributeOn (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double

           OUTPUT
            countInteractions   : long*'''
        return super(ITopologicalSegment2, self).VertexAttributeOn(attributeType, attributeValue)
    def QueryVertexAttributes(self, attributeType):
        '''Method ISegment.QueryVertexAttributes (from ISegment)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUTS
            fromAttribute       : double*
            toAttribute         : double*'''
        return super(ITopologicalSegment2, self).QueryVertexAttributes(attributeType)
    def PutVertexAttributes(self, attributeType, fromAttribute, toAttribute):
        '''Method ISegment.PutVertexAttributes (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            fromAttribute       : double
            toAttribute         : double'''
        return super(ITopologicalSegment2, self).PutVertexAttributes(attributeType, fromAttribute, toAttribute)
    def GetVertexAttributeAtDistance(self, attributeType, distance, asRatio):
        '''Method ISegment.GetVertexAttributeAtDistance (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            distance            : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            attributeValue      : double*'''
        return super(ITopologicalSegment2, self).GetVertexAttributeAtDistance(attributeType, distance, asRatio)
    def GetDistanceAtVertexAttribute(self, attributeType, attributeValue, asRatio):
        '''Method ISegment.GetDistanceAtVertexAttribute (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            distance            : double*'''
        return super(ITopologicalSegment2, self).GetDistanceAtVertexAttribute(attributeType, attributeValue, asRatio)
    def SplitAtVertexAttribute(self, attributeType, attributeValue):
        '''Method ISegment.SplitAtVertexAttribute (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double

           OUTPUTS
            fromSegment         : ISegment**
            toSegment           : ISegment**'''
        return super(ITopologicalSegment2, self).SplitAtVertexAttribute(attributeType, attributeValue)
    def GetPointsAtVertexAttribute(self, attributeType, attributeValue, lateralOffset):
        '''Method ISegment.GetPointsAtVertexAttribute (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double
            lateralOffset       : double

           OUTPUT
            outPoints           : IPointCollection**'''
        return super(ITopologicalSegment2, self).GetPointsAtVertexAttribute(attributeType, attributeValue, lateralOffset)
    def GetSubSegmentBetweenVertexAttributes(self, attributeType, fromAttribute, toAttribute):
        '''Method ISegment.GetSubSegmentBetweenVertexAttributes (from ISegment)

           INPUTS
            attributeType       : esriGeometryAttributes
            fromAttribute       : double
            toAttribute         : double

           OUTPUT
            outSegment          : ISegment**'''
        return super(ITopologicalSegment2, self).GetSubSegmentBetweenVertexAttributes(attributeType, fromAttribute, toAttribute)
    def InterpolateVertexAttributes(self, distanceAlongSegment, asRatio, atPoint):
        '''Method ISegment.InterpolateVertexAttributes (from ISegment)

           INPUTS
            distanceAlongSegment: double
            asRatio             : VARIANT_BOOL
            atPoint             : IPoint*'''
        return super(ITopologicalSegment2, self).InterpolateVertexAttributes(distanceAlongSegment, asRatio, atPoint)
    def SynchronizeEmptyAttributes(self, toSegment):
        '''Method ISegment.SynchronizeEmptyAttributes (from ISegment)

           INPUT
            toSegment           : ISegment*'''
        return super(ITopologicalSegment2, self).SynchronizeEmptyAttributes(toSegment)
    def QueryCurvature(self, DistanceAlongCurve, asRatio, unitVector):
        '''Method ISegment.QueryCurvature (from ISegment)

           INPUTS
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            unitVector          : ILine*

           OUTPUT
            curvature           : double*'''
        return super(ITopologicalSegment2, self).QueryCurvature(DistanceAlongCurve, asRatio, unitVector)
    def ReturnTurnDirection(self, otherSegment):
        '''Method ISegment.ReturnTurnDirection (from ISegment)

           INPUT
            otherSegment        : ISegment*

           OUTPUT
            turnDirection       : long*'''
        return super(ITopologicalSegment2, self).ReturnTurnDirection(otherSegment)
    def EnvelopeIntersection(self, intersectionEnvelope, boundaryOverlap):
        '''Method ISegment.EnvelopeIntersection (from ISegment)

           INPUTS
            intersectionEnvelope: IEnvelope*
            boundaryOverlap     : VARIANT_BOOL

           OUTPUTS
            segmentParams       : double*
            envelopeDistances   : double*
            numIntersections    : long*
            outcode             : long*'''
        return super(ITopologicalSegment2, self).EnvelopeIntersection(intersectionEnvelope, boundaryOverlap)
    def QueryAreaCorrection(self):
        '''Method ISegment.QueryAreaCorrection (from ISegment)

           OUTPUT
            areaCorrection      : double*'''
        return super(ITopologicalSegment2, self).QueryAreaCorrection()
    def QueryCentroidCorrection(self, weightedCentroidX, weightedCentroidY, areaCorrection):
        '''Method ISegment.QueryCentroidCorrection (from ISegment)

           INPUTS
            weightedCentroidX   : double*
            weightedCentroidY   : double*
            areaCorrection      : double*'''
        return super(ITopologicalSegment2, self).QueryCentroidCorrection(weightedCentroidX, weightedCentroidY, areaCorrection)
    def QueryWKSEnvelope(self, Envelope):
        '''Method ISegment.QueryWKSEnvelope (from ISegment)

           INPUT
            Envelope            : WKSEnvelope*'''
        return super(ITopologicalSegment2, self).QueryWKSEnvelope(Envelope)
    def HorizontalIntersectionCount(self, p):
        '''Method ISegment.HorizontalIntersectionCount (from ISegment)

           INPUT
            p                   : WKSPoint*

           OUTPUTS
            pointOnLine         : VARIANT_BOOL*
            numIntersections    : long*'''
        return super(ITopologicalSegment2, self).HorizontalIntersectionCount(p)
    def SplitAtDistance(self, distances, asRatio):
        '''Method ISegment.SplitAtDistance (from ISegment)

           INPUTS
            distances           : double
            asRatio             : VARIANT_BOOL

           OUTPUTS
            fromSegment         : ISegment**
            toSegment           : ISegment**'''
        return super(ITopologicalSegment2, self).SplitAtDistance(distances, asRatio)
    def SplitDivideLength(self, Offset, Length, asRatio, numSplitSegments, splitSegments):
        '''Method ISegment.SplitDivideLength (from ISegment)

           INPUTS
            Offset              : double
            Length              : double
            asRatio             : VARIANT_BOOL
            numSplitSegments    : long*
            splitSegments       : ISegment**'''
        return super(ITopologicalSegment2, self).SplitDivideLength(Offset, Length, asRatio, numSplitSegments, splitSegments)
    def Densify(self, cInSlots, maxDeviation):
        '''Method ISegment.Densify (from ISegment)

           INPUTS
            cInSlots            : long
            maxDeviation        : double

           OUTPUTS
            pcOutSegments       : long*
            segments            : ILine**'''
        return super(ITopologicalSegment2, self).Densify(cInSlots, maxDeviation)
    def MaxDistanceFromLine(self, baseFrom, baseTo, minOffset, fromArcDistance, toArcDistance, maxOffset, atArcDistance, farPoint):
        '''Method ISegment.MaxDistanceFromLine (from ISegment)

           INPUTS
            baseFrom            : WKSPoint*
            baseTo              : WKSPoint*
            minOffset           : double
            fromArcDistance     : double
            toArcDistance       : double
            maxOffset           : double*
            atArcDistance       : double*
            farPoint            : WKSPoint*'''
        return super(ITopologicalSegment2, self).MaxDistanceFromLine(baseFrom, baseTo, minOffset, fromArcDistance, toArcDistance, maxOffset, atArcDistance, farPoint)
    def ConvertDistanceMeasureToRatio(self, distanceMeasure, distanceRatio):
        '''Method ISegment.ConvertDistanceMeasureToRatio (from ISegment)

           INPUTS
            distanceMeasure     : double
            distanceRatio       : double*'''
        return super(ITopologicalSegment2, self).ConvertDistanceMeasureToRatio(distanceMeasure, distanceRatio)
    def QueryWKSFromPoint(self):
        '''Method ISegment.QueryWKSFromPoint (from ISegment)

           OUTPUT
            p                   : WKSPoint*'''
        return super(ITopologicalSegment2, self).QueryWKSFromPoint()
    def QueryWKSToPoint(self):
        '''Method ISegment.QueryWKSToPoint (from ISegment)

           OUTPUT
            p                   : WKSPoint*'''
        return super(ITopologicalSegment2, self).QueryWKSToPoint()
    def GeographicShift(self, splitLongitude):
        '''Method ISegment.GeographicShift (from ISegment)

           INPUT
            splitLongitude      : double'''
        return super(ITopologicalSegment2, self).GeographicShift(splitLongitude)
    def get_Length(self):
        '''Method ICurve.get_Length (from ICurve)

           OUTPUT
            Length              : double*'''
        return super(ITopologicalSegment2, self).get_Length()
    def get_FromPoint(self):
        '''Method ICurve.get_FromPoint (from ICurve)

           OUTPUT
            from                : IPoint**'''
        return super(ITopologicalSegment2, self).get_FromPoint()
    def put_FromPoint(self, From):
        '''Method ICurve.put_FromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ITopologicalSegment2, self).put_FromPoint(From)
    def QueryFromPoint(self, From):
        '''Method ICurve.QueryFromPoint (from ICurve)

           INPUT
            from                : IPoint*'''
        return super(ITopologicalSegment2, self).QueryFromPoint(From)
    def get_ToPoint(self):
        '''Method ICurve.get_ToPoint (from ICurve)

           OUTPUT
            to                  : IPoint**'''
        return super(ITopologicalSegment2, self).get_ToPoint()
    def put_ToPoint(self, to):
        '''Method ICurve.put_ToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ITopologicalSegment2, self).put_ToPoint(to)
    def QueryToPoint(self, to):
        '''Method ICurve.QueryToPoint (from ICurve)

           INPUT
            to                  : IPoint*'''
        return super(ITopologicalSegment2, self).QueryToPoint(to)
    def QueryPoint(self, extension, DistanceAlongCurve, asRatio, outPoint):
        '''Method ICurve.QueryPoint (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*'''
        return super(ITopologicalSegment2, self).QueryPoint(extension, DistanceAlongCurve, asRatio, outPoint)
    def QueryPointAndDistance(self, extension, inPoint, asRatio, outPoint):
        '''Method ICurve.QueryPointAndDistance (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            inPoint             : IPoint*
            asRatio             : VARIANT_BOOL
            outPoint            : IPoint*

           OUTPUTS
            DistanceAlongCurve  : double*
            distanceFromCurve   : double*
            bRightSide          : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).QueryPointAndDistance(extension, inPoint, asRatio, outPoint)
    def QueryTangent(self, extension, DistanceAlongCurve, asRatio, Length, tangent):
        '''Method ICurve.QueryTangent (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            tangent             : ILine*'''
        return super(ITopologicalSegment2, self).QueryTangent(extension, DistanceAlongCurve, asRatio, Length, tangent)
    def QueryNormal(self, extension, DistanceAlongCurve, asRatio, Length, normal):
        '''Method ICurve.QueryNormal (from ICurve)

           INPUTS
            extension           : esriSegmentExtension
            DistanceAlongCurve  : double
            asRatio             : VARIANT_BOOL
            Length              : double
            normal              : ILine*'''
        return super(ITopologicalSegment2, self).QueryNormal(extension, DistanceAlongCurve, asRatio, Length, normal)
    def GetSubcurve(self, fromDistance, toDistance, asRatio):
        '''Method ICurve.GetSubcurve (from ICurve)

           INPUTS
            fromDistance        : double
            toDistance          : double
            asRatio             : VARIANT_BOOL

           OUTPUT
            outSubcurve         : ICurve**'''
        return super(ITopologicalSegment2, self).GetSubcurve(fromDistance, toDistance, asRatio)
    def ReverseOrientation(self):
        '''Method ICurve.ReverseOrientation (from ICurve)'''
        return super(ITopologicalSegment2, self).ReverseOrientation()
    def get_IsClosed(self):
        '''Method ICurve.get_IsClosed (from ICurve)

           OUTPUT
            IsClosed            : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).get_IsClosed()
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(ITopologicalSegment2, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(ITopologicalSegment2, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(ITopologicalSegment2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(ITopologicalSegment2, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(ITopologicalSegment2, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(ITopologicalSegment2, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(ITopologicalSegment2, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(ITopologicalSegment2, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(ITopologicalSegment2, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(ITopologicalSegment2, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(ITopologicalSegment2, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(ITopologicalSegment2, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    FromPoint = property(get_FromPoint, put_FromPoint, None)
    GeometryType = property(get_GeometryType, None, None)
    IsClosed = property(get_IsClosed, None, None)
    IsCounterClockwise2 = property(get_IsCounterClockwise2, None, None)
    IsEmpty = property(get_IsEmpty, None, None)
    IsShort = property(get_IsShort, None, None)
    Length = property(get_Length, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    ToPoint = property(get_ToPoint, put_ToPoint, None)
    VertexAttributeAware = property(None, put_VertexAttributeAware, None)
    VertexAttributeAware = IndexProperty(get_VertexAttributeAware, None)
    YAtX = IndexProperty(get_YAtX, None)


# IIDs
IID_ISpatialReferenceInfo = ISpatialReferenceInfo._IID
IID_IUnit = IUnit._IID
IID_ILinearUnit = ILinearUnit._IID
IID_ISpatialReference = ISpatialReference._IID
IID_IParameter = IParameter._IID
IID_IProjection = IProjection._IID
IID_ISpheroid = ISpheroid._IID
IID_IDatum = IDatum._IID
IID_IPrimeMeridian = IPrimeMeridian._IID
IID_IAngularUnit = IAngularUnit._IID
IID_IGeographicCoordinateSystem = IGeographicCoordinateSystem._IID
IID_IProjectedCoordinateSystem = IProjectedCoordinateSystem._IID
IID_IVerticalCoordinateSystem = IVerticalCoordinateSystem._IID
IID_ITransformation = ITransformation._IID
IID_IGeoTransformation = IGeoTransformation._IID
IID_IGeoTransformationOperationSet = IGeoTransformationOperationSet._IID
IID_ISpatialReferenceFactory = ISpatialReferenceFactory._IID
IID_ISpatialReferenceAuthority = ISpatialReferenceAuthority._IID
IID_ITransformationGEN = ITransformationGEN._IID
IID_IVerticalCoordinateSystemGEN = IVerticalCoordinateSystemGEN._IID
IID_IMolodenskyBadekasTransformation = IMolodenskyBadekasTransformation._IID
IID_IGeographic2DOffsetTransformation = IGeographic2DOffsetTransformation._IID
IID_ICompositeGeoTransformation = ICompositeGeoTransformation._IID
IID_IGeocentricTranslation = IGeocentricTranslation._IID
IID_IPositionVectorTransformation = IPositionVectorTransformation._IID
IID_ICoordinateFrameTransformation = ICoordinateFrameTransformation._IID
IID_IMolodenskyTransformation = IMolodenskyTransformation._IID
IID_IGridTransformation = IGridTransformation._IID
IID_ILongitudeRotationTransformation = ILongitudeRotationTransformation._IID
IID_ICompareCoordinateSystems = ICompareCoordinateSystems._IID
IID_ISpatialReferenceResolution = ISpatialReferenceResolution._IID
IID_ISpatialReferenceTolerance = ISpatialReferenceTolerance._IID
IID_ISpatialReference2GEN = ISpatialReference2GEN._IID
IID_IAngularUnitEdit = IAngularUnitEdit._IID
IID_ILinearUnitEdit = ILinearUnitEdit._IID
IID_ISpheroidEdit = ISpheroidEdit._IID
IID_IDatumEdit = IDatumEdit._IID
IID_IVerticalDatumEdit = IVerticalDatumEdit._IID
IID_IPrimeMeridianEdit = IPrimeMeridianEdit._IID
IID_IGeographicCoordinateSystem2 = IGeographicCoordinateSystem2._IID
IID_IGeographicCoordinateSystemEdit = IGeographicCoordinateSystemEdit._IID
IID_IParameterEdit = IParameterEdit._IID
IID_IProjectionGEN = IProjectionGEN._IID
IID_IESRISpatialReference = IESRISpatialReference._IID
IID_IESRISpatialReferenceGEN = IESRISpatialReferenceGEN._IID
IID_IESRISpatialReferenceGEN2 = IESRISpatialReferenceGEN2._IID
IID_IPRJSpatialReference = IPRJSpatialReference._IID
IID_IPRJSpatialReferenceGEN = IPRJSpatialReferenceGEN._IID
IID_ISRPersistStream = ISRPersistStream._IID
IID_ISpatialReferenceSingletonManager = ISpatialReferenceSingletonManager._IID
IID_ISpatialReferenceFactory2 = ISpatialReferenceFactory2._IID
IID_ISpatialReference2 = ISpatialReference2._IID
IID_ISpatialReference4 = ISpatialReference4._IID
IID_IControlPrecision = IControlPrecision._IID
IID_IControlPrecision2 = IControlPrecision2._IID
IID_IProjectedCoordinateSystemEdit = IProjectedCoordinateSystemEdit._IID
IID_IVerticalCoordinateSystemEdit = IVerticalCoordinateSystemEdit._IID
IID_IControlPrecision3 = IControlPrecision3._IID
IID_IWkb = IWkb._IID
IID_IESRIShape = IESRIShape._IID
IID_IESRISegment = IESRISegment._IID
IID_IVector = IVector._IID
IID_IConversionMGRS = IConversionMGRS._IID
IID_INetworkShape = INetworkShape._IID
IID_INetworkShape3D = INetworkShape3D._IID
IID_IMSnap = IMSnap._IID
IID_IAffineTransformation3DGEN = IAffineTransformation3DGEN._IID
IID_IProjectiveTransformation2DGEN = IProjectiveTransformation2DGEN._IID
IID_IZShift = IZShift._IID
IID_IPolycurve3D = IPolycurve3D._IID
IID_IPolycurve4 = IPolycurve4._IID
IID_IPolycurveGeodetic = IPolycurveGeodetic._IID
IID_ISegmentM = ISegmentM._IID
IID_ISegmentZ = ISegmentZ._IID
IID_ISegmentID = ISegmentID._IID
IID_IConversionNotation = IConversionNotation._IID
IID_IAreaGeodetic = IAreaGeodetic._IID
IID_ISpatialIndex = ISpatialIndex._IID
IID_ISpatialIndex2 = ISpatialIndex2._IID
IID_IMAware = IMAware._IID
IID_IMCollection = IMCollection._IID
IID_IMSegmentationInternal = IMSegmentationInternal._IID
IID_IZAware = IZAware._IID
IID_IZCollection = IZCollection._IID
IID_IPointIDAware = IPointIDAware._IID
IID_ITextureAware = ITextureAware._IID
IID_INormalAware = INormalAware._IID
IID_IPartIDAware = IPartIDAware._IID
IID_IVolume = IVolume._IID
IID_IRelationResult = IRelationResult._IID
IID_IGeometryEnvironment = IGeometryEnvironment._IID
IID_IGeometryEnvironment2 = IGeometryEnvironment2._IID
IID_IGeometryEnvironment3 = IGeometryEnvironment3._IID
IID_IGeometryEnvironment4 = IGeometryEnvironment4._IID
IID_IBufferProgress = IBufferProgress._IID
IID_IBufferConstructionProperties = IBufferConstructionProperties._IID
IID_IBufferConstructionProperties2 = IBufferConstructionProperties2._IID
IID_ITexturePersistenceProperties = ITexturePersistenceProperties._IID
IID_IRelationResultArray = IRelationResultArray._IID
IID_IEnvelope4 = IEnvelope4._IID
IID_IPolygon5 = IPolygon5._IID
IID_IESRIShape2 = IESRIShape2._IID
IID_IESRISegment2 = IESRISegment2._IID
IID_IGeometry = IGeometry._IID
IID_IPoint = IPoint._IID
IID_IEnvelope = IEnvelope._IID
IID_IProjectedCoordinateSystem4GEN = IProjectedCoordinateSystem4GEN._IID
IID_IConstructUnknownCoordinateSystem = IConstructUnknownCoordinateSystem._IID
IID_ISpatialReferenceFactory3 = ISpatialReferenceFactory3._IID
IID_ISpatialReferenceFactory4 = ISpatialReferenceFactory4._IID
IID_ISpatialReferenceFactory5 = ISpatialReferenceFactory5._IID
IID_ISpatialReference3 = ISpatialReference3._IID
IID_IProjectedCoordinateSystem2 = IProjectedCoordinateSystem2._IID
IID_IProjectedCoordinateSystem3 = IProjectedCoordinateSystem3._IID
IID_IProjectedCoordinateSystem4 = IProjectedCoordinateSystem4._IID
IID_IProjectedCoordinateSystem5 = IProjectedCoordinateSystem5._IID
IID_IEnumVertex = IEnumVertex._IID
IID_IPointCollection = IPointCollection._IID
IID_IPointCollection2 = IPointCollection2._IID
IID_IPointCollection3 = IPointCollection3._IID
IID_IPointCollection4 = IPointCollection4._IID
IID_IVector3D = IVector3D._IID
IID_IEnumGeometry = IEnumGeometry._IID
IID_IGeometryCollection = IGeometryCollection._IID
IID_IEnumSplitPoint = IEnumSplitPoint._IID
IID_IEnumIntersection = IEnumIntersection._IID
IID_IEnumPointAndDistance = IEnumPointAndDistance._IID
IID_IGeometry2 = IGeometry2._IID
IID_IGeometryBag = IGeometryBag._IID
IID_ITransformation3D = ITransformation3D._IID
IID_IGeometry3 = IGeometry3._IID
IID_IGeometry4 = IGeometry4._IID
IID_IGeometry5 = IGeometry5._IID
IID_IEnvelopeGEN = IEnvelopeGEN._IID
IID_IEnvelope3D = IEnvelope3D._IID
IID_IBezierCurveGEN = IBezierCurveGEN._IID
IID_ITransformation3DGEN = ITransformation3DGEN._IID
IID_ISphere = ISphere._IID
IID_IRay = IRay._IID
IID_IRay2 = IRay2._IID
IID_ITransform3D = ITransform3D._IID
IID_IArea = IArea._IID
IID_IArea3D = IArea3D._IID
IID_IGeometricBufferSourceSink = IGeometricBufferSourceSink._IID
IID_IEnumVertex2 = IEnumVertex2._IID
IID_IConstructMerge = IConstructMerge._IID
IID_IMSegmentation = IMSegmentation._IID
IID_IEncode3DProperties = IEncode3DProperties._IID
IID_IRelationalOperator = IRelationalOperator._IID
IID_IRelationalOperator2 = IRelationalOperator2._IID
IID_IRelationalOperator3D = IRelationalOperator3D._IID
IID_IRelationalOperator3D2 = IRelationalOperator3D2._IID
IID_IRelationalOperatorNxM = IRelationalOperatorNxM._IID
IID_IProximityOperator = IProximityOperator._IID
IID_IProximityOperator3D = IProximityOperator3D._IID
IID_ITopologicalOperator6 = ITopologicalOperator6._IID
IID_IConstructGeodetic = IConstructGeodetic._IID
IID_IConstructEllipticArc = IConstructEllipticArc._IID
IID_IGeometryArray = IGeometryArray._IID
IID_IBufferConstruction = IBufferConstruction._IID
IID_IGeometryFactory = IGeometryFactory._IID
IID_IGeometryFactory2 = IGeometryFactory2._IID
IID_IGeometryFactory3 = IGeometryFactory3._IID
IID_IConstructDomainExtent = IConstructDomainExtent._IID
IID_IConstructDomainExtent2 = IConstructDomainExtent2._IID
IID_IGeneralMultiPatchInfo = IGeneralMultiPatchInfo._IID
IID_IPointArray = IPointArray._IID
IID_IProjectiveTransformation2D = IProjectiveTransformation2D._IID
IID_IAffineTransformation3D = IAffineTransformation3D._IID
IID_IHitTest = IHitTest._IID
IID_IHitTest3D = IHitTest3D._IID
IID_ICurve3D = ICurve3D._IID
IID_IEnvelope2 = IEnvelope2._IID
IID_IPointCollection5 = IPointCollection5._IID
IID_IMSegmentation2 = IMSegmentation2._IID
IID_IMSegmentation3 = IMSegmentation3._IID
IID_IMSegmentation4 = IMSegmentation4._IID
IID_IWin32Shape = IWin32Shape._IID
IID_IWin32Shape2 = IWin32Shape2._IID
IID_ICurve = ICurve._IID
IID_ILine = ILine._IID
IID_IPolycurve = IPolycurve._IID
IID_IPath = IPath._IID
IID_IPolyline = IPolyline._IID
IID_ISegment = ISegment._IID
IID_IRing = IRing._IID
IID_IEnumSegment = IEnumSegment._IID
IID_IEnumCurve = IEnumCurve._IID
IID_ISegmentCollection = ISegmentCollection._IID
IID_ITransform2D = ITransform2D._IID
IID_ITopologicalSegment = ITopologicalSegment._IID
IID_IEllipticArc = IEllipticArc._IID
IID_IPolygon = IPolygon._IID
IID_IFunctionalSurface = IFunctionalSurface._IID
IID_ISegmentGraphCursor = ISegmentGraphCursor._IID
IID_ISegmentGraph = ISegmentGraph._IID
IID_IMultiPatch = IMultiPatch._IID
IID_ICurve2 = ICurve2._IID
IID_ICircularArc = ICircularArc._IID
IID_IAffineTransformation2D = IAffineTransformation2D._IID
IID_ITopologicalOperator = ITopologicalOperator._IID
IID_ITopologicalOperator2 = ITopologicalOperator2._IID
IID_IFunctionalSurface2 = IFunctionalSurface2._IID
IID_IFunctionalSurface3 = IFunctionalSurface3._IID
IID_IAffineTransformation2D3GEN = IAffineTransformation2D3GEN._IID
IID_IPolycurve2 = IPolycurve2._IID
IID_ISegmentZ2 = ISegmentZ2._IID
IID_IConstructClothoid = IConstructClothoid._IID
IID_IEnumCurve2 = IEnumCurve2._IID
IID_IPolyline2 = IPolyline2._IID
IID_IPolyline3 = IPolyline3._IID
IID_IPolyline4 = IPolyline4._IID
IID_IPolyline5 = IPolyline5._IID
IID_IPolyline6 = IPolyline6._IID
IID_IConstructMultiPatch = IConstructMultiPatch._IID
IID_IExtrude = IExtrude._IID
IID_IExtrude2 = IExtrude2._IID
IID_IZ = IZ._IID
IID_IZ2 = IZ2._IID
IID_IVertexAttribute = IVertexAttribute._IID
IID_IVertexAttribute2 = IVertexAttribute2._IID
IID_IConstructAngle = IConstructAngle._IID
IID_IConstructPath = IConstructPath._IID
IID_IConstructPoint = IConstructPoint._IID
IID_IConstructPoint2 = IConstructPoint2._IID
IID_IConstructCurve = IConstructCurve._IID
IID_IConstructCurve2 = IConstructCurve2._IID
IID_IConstructCurve3 = IConstructCurve3._IID
IID_IConstructCurve4 = IConstructCurve4._IID
IID_IConstructLine = IConstructLine._IID
IID_IConstructCircularArc = IConstructCircularArc._IID
IID_IConstructCircularArc2 = IConstructCircularArc2._IID
IID_IConstructBezierCurve = IConstructBezierCurve._IID
IID_IConstructGeometryCollection = IConstructGeometryCollection._IID
IID_IGeometryBridge = IGeometryBridge._IID
IID_IGeometryBridge2 = IGeometryBridge2._IID
IID_ISegmentGraph2 = ISegmentGraph2._IID
IID_ILinePolygonHelper = ILinePolygonHelper._IID
IID_IPolylineArray = IPolylineArray._IID
IID_IPolygonArray = IPolygonArray._IID
IID_IGeometryServer = IGeometryServer._IID
IID_IGeometryServer2 = IGeometryServer2._IID
IID_IGeometryServer3 = IGeometryServer3._IID
IID_IJSONConverterGeometry = IJSONConverterGeometry._IID
IID_IAffineTransformation2D2 = IAffineTransformation2D2._IID
IID_IAffineTransformation2D3 = IAffineTransformation2D3._IID
IID_ILine2 = ILine2._IID
IID_ILine3 = ILine3._IID
IID_ICurve3 = ICurve3._IID
IID_IBezierCurve = IBezierCurve._IID
IID_IBezierCurve2 = IBezierCurve2._IID
IID_IBezierCurve3 = IBezierCurve3._IID
IID_IRing2 = IRing2._IID
IID_IConstructMultipoint = IConstructMultipoint._IID
IID_ITopologicalOperator3 = ITopologicalOperator3._IID
IID_ITopologicalOperator4 = ITopologicalOperator4._IID
IID_ITopologicalOperator5 = ITopologicalOperator5._IID
IID_IPolygon2 = IPolygon2._IID
IID_IPolygon3 = IPolygon3._IID
IID_IPolygon4 = IPolygon4._IID
IID_IPolycurve3 = IPolycurve3._IID
IID_IMultiPatch2 = IMultiPatch2._IID
IID_ITopologicalSegment2 = ITopologicalSegment2._IID
_IIDMap[IID_ISpatialReferenceInfo] = ISpatialReferenceInfo
_IIDMap[IID_IUnit] = IUnit
_IIDMap[IID_ILinearUnit] = ILinearUnit
_IIDMap[IID_ISpatialReference] = ISpatialReference
_IIDMap[IID_IParameter] = IParameter
_IIDMap[IID_IProjection] = IProjection
_IIDMap[IID_ISpheroid] = ISpheroid
_IIDMap[IID_IDatum] = IDatum
_IIDMap[IID_IPrimeMeridian] = IPrimeMeridian
_IIDMap[IID_IAngularUnit] = IAngularUnit
_IIDMap[IID_IGeographicCoordinateSystem] = IGeographicCoordinateSystem
_IIDMap[IID_IProjectedCoordinateSystem] = IProjectedCoordinateSystem
_IIDMap[IID_IVerticalCoordinateSystem] = IVerticalCoordinateSystem
_IIDMap[IID_ITransformation] = ITransformation
_IIDMap[IID_IGeoTransformation] = IGeoTransformation
_IIDMap[IID_IGeoTransformationOperationSet] = IGeoTransformationOperationSet
_IIDMap[IID_ISpatialReferenceFactory] = ISpatialReferenceFactory
_IIDMap[IID_ISpatialReferenceAuthority] = ISpatialReferenceAuthority
_IIDMap[IID_ITransformationGEN] = ITransformationGEN
_IIDMap[IID_IVerticalCoordinateSystemGEN] = IVerticalCoordinateSystemGEN
_IIDMap[IID_IMolodenskyBadekasTransformation] = IMolodenskyBadekasTransformation
_IIDMap[IID_IGeographic2DOffsetTransformation] = IGeographic2DOffsetTransformation
_IIDMap[IID_ICompositeGeoTransformation] = ICompositeGeoTransformation
_IIDMap[IID_IGeocentricTranslation] = IGeocentricTranslation
_IIDMap[IID_IPositionVectorTransformation] = IPositionVectorTransformation
_IIDMap[IID_ICoordinateFrameTransformation] = ICoordinateFrameTransformation
_IIDMap[IID_IMolodenskyTransformation] = IMolodenskyTransformation
_IIDMap[IID_IGridTransformation] = IGridTransformation
_IIDMap[IID_ILongitudeRotationTransformation] = ILongitudeRotationTransformation
_IIDMap[IID_ICompareCoordinateSystems] = ICompareCoordinateSystems
_IIDMap[IID_ISpatialReferenceResolution] = ISpatialReferenceResolution
_IIDMap[IID_ISpatialReferenceTolerance] = ISpatialReferenceTolerance
_IIDMap[IID_ISpatialReference2GEN] = ISpatialReference2GEN
_IIDMap[IID_IAngularUnitEdit] = IAngularUnitEdit
_IIDMap[IID_ILinearUnitEdit] = ILinearUnitEdit
_IIDMap[IID_ISpheroidEdit] = ISpheroidEdit
_IIDMap[IID_IDatumEdit] = IDatumEdit
_IIDMap[IID_IVerticalDatumEdit] = IVerticalDatumEdit
_IIDMap[IID_IPrimeMeridianEdit] = IPrimeMeridianEdit
_IIDMap[IID_IGeographicCoordinateSystem2] = IGeographicCoordinateSystem2
_IIDMap[IID_IGeographicCoordinateSystemEdit] = IGeographicCoordinateSystemEdit
_IIDMap[IID_IParameterEdit] = IParameterEdit
_IIDMap[IID_IProjectionGEN] = IProjectionGEN
_IIDMap[IID_IESRISpatialReference] = IESRISpatialReference
_IIDMap[IID_IESRISpatialReferenceGEN] = IESRISpatialReferenceGEN
_IIDMap[IID_IESRISpatialReferenceGEN2] = IESRISpatialReferenceGEN2
_IIDMap[IID_IPRJSpatialReference] = IPRJSpatialReference
_IIDMap[IID_IPRJSpatialReferenceGEN] = IPRJSpatialReferenceGEN
_IIDMap[IID_ISRPersistStream] = ISRPersistStream
_IIDMap[IID_ISpatialReferenceSingletonManager] = ISpatialReferenceSingletonManager
_IIDMap[IID_ISpatialReferenceFactory2] = ISpatialReferenceFactory2
_IIDMap[IID_ISpatialReference2] = ISpatialReference2
_IIDMap[IID_ISpatialReference4] = ISpatialReference4
_IIDMap[IID_IControlPrecision] = IControlPrecision
_IIDMap[IID_IControlPrecision2] = IControlPrecision2
_IIDMap[IID_IProjectedCoordinateSystemEdit] = IProjectedCoordinateSystemEdit
_IIDMap[IID_IVerticalCoordinateSystemEdit] = IVerticalCoordinateSystemEdit
_IIDMap[IID_IControlPrecision3] = IControlPrecision3
_IIDMap[IID_IWkb] = IWkb
_IIDMap[IID_IESRIShape] = IESRIShape
_IIDMap[IID_IESRISegment] = IESRISegment
_IIDMap[IID_IVector] = IVector
_IIDMap[IID_IConversionMGRS] = IConversionMGRS
_IIDMap[IID_INetworkShape] = INetworkShape
_IIDMap[IID_INetworkShape3D] = INetworkShape3D
_IIDMap[IID_IMSnap] = IMSnap
_IIDMap[IID_IAffineTransformation3DGEN] = IAffineTransformation3DGEN
_IIDMap[IID_IProjectiveTransformation2DGEN] = IProjectiveTransformation2DGEN
_IIDMap[IID_IZShift] = IZShift
_IIDMap[IID_IPolycurve3D] = IPolycurve3D
_IIDMap[IID_IPolycurve4] = IPolycurve4
_IIDMap[IID_IPolycurveGeodetic] = IPolycurveGeodetic
_IIDMap[IID_ISegmentM] = ISegmentM
_IIDMap[IID_ISegmentZ] = ISegmentZ
_IIDMap[IID_ISegmentID] = ISegmentID
_IIDMap[IID_IConversionNotation] = IConversionNotation
_IIDMap[IID_IAreaGeodetic] = IAreaGeodetic
_IIDMap[IID_ISpatialIndex] = ISpatialIndex
_IIDMap[IID_ISpatialIndex2] = ISpatialIndex2
_IIDMap[IID_IMAware] = IMAware
_IIDMap[IID_IMCollection] = IMCollection
_IIDMap[IID_IMSegmentationInternal] = IMSegmentationInternal
_IIDMap[IID_IZAware] = IZAware
_IIDMap[IID_IZCollection] = IZCollection
_IIDMap[IID_IPointIDAware] = IPointIDAware
_IIDMap[IID_ITextureAware] = ITextureAware
_IIDMap[IID_INormalAware] = INormalAware
_IIDMap[IID_IPartIDAware] = IPartIDAware
_IIDMap[IID_IVolume] = IVolume
_IIDMap[IID_IRelationResult] = IRelationResult
_IIDMap[IID_IGeometryEnvironment] = IGeometryEnvironment
_IIDMap[IID_IGeometryEnvironment2] = IGeometryEnvironment2
_IIDMap[IID_IGeometryEnvironment3] = IGeometryEnvironment3
_IIDMap[IID_IGeometryEnvironment4] = IGeometryEnvironment4
_IIDMap[IID_IBufferProgress] = IBufferProgress
_IIDMap[IID_IBufferConstructionProperties] = IBufferConstructionProperties
_IIDMap[IID_IBufferConstructionProperties2] = IBufferConstructionProperties2
_IIDMap[IID_ITexturePersistenceProperties] = ITexturePersistenceProperties
_IIDMap[IID_IRelationResultArray] = IRelationResultArray
_IIDMap[IID_IEnvelope4] = IEnvelope4
_IIDMap[IID_IPolygon5] = IPolygon5
_IIDMap[IID_IESRIShape2] = IESRIShape2
_IIDMap[IID_IESRISegment2] = IESRISegment2
_IIDMap[IID_IGeometry] = IGeometry
_IIDMap[IID_IPoint] = IPoint
_IIDMap[IID_IEnvelope] = IEnvelope
_IIDMap[IID_IProjectedCoordinateSystem4GEN] = IProjectedCoordinateSystem4GEN
_IIDMap[IID_IConstructUnknownCoordinateSystem] = IConstructUnknownCoordinateSystem
_IIDMap[IID_ISpatialReferenceFactory3] = ISpatialReferenceFactory3
_IIDMap[IID_ISpatialReferenceFactory4] = ISpatialReferenceFactory4
_IIDMap[IID_ISpatialReferenceFactory5] = ISpatialReferenceFactory5
_IIDMap[IID_ISpatialReference3] = ISpatialReference3
_IIDMap[IID_IProjectedCoordinateSystem2] = IProjectedCoordinateSystem2
_IIDMap[IID_IProjectedCoordinateSystem3] = IProjectedCoordinateSystem3
_IIDMap[IID_IProjectedCoordinateSystem4] = IProjectedCoordinateSystem4
_IIDMap[IID_IProjectedCoordinateSystem5] = IProjectedCoordinateSystem5
_IIDMap[IID_IEnumVertex] = IEnumVertex
_IIDMap[IID_IPointCollection] = IPointCollection
_IIDMap[IID_IPointCollection2] = IPointCollection2
_IIDMap[IID_IPointCollection3] = IPointCollection3
_IIDMap[IID_IPointCollection4] = IPointCollection4
_IIDMap[IID_IVector3D] = IVector3D
_IIDMap[IID_IEnumGeometry] = IEnumGeometry
_IIDMap[IID_IGeometryCollection] = IGeometryCollection
_IIDMap[IID_IEnumSplitPoint] = IEnumSplitPoint
_IIDMap[IID_IEnumIntersection] = IEnumIntersection
_IIDMap[IID_IEnumPointAndDistance] = IEnumPointAndDistance
_IIDMap[IID_IGeometry2] = IGeometry2
_IIDMap[IID_IGeometryBag] = IGeometryBag
_IIDMap[IID_ITransformation3D] = ITransformation3D
_IIDMap[IID_IGeometry3] = IGeometry3
_IIDMap[IID_IGeometry4] = IGeometry4
_IIDMap[IID_IGeometry5] = IGeometry5
_IIDMap[IID_IEnvelopeGEN] = IEnvelopeGEN
_IIDMap[IID_IEnvelope3D] = IEnvelope3D
_IIDMap[IID_IBezierCurveGEN] = IBezierCurveGEN
_IIDMap[IID_ITransformation3DGEN] = ITransformation3DGEN
_IIDMap[IID_ISphere] = ISphere
_IIDMap[IID_IRay] = IRay
_IIDMap[IID_IRay2] = IRay2
_IIDMap[IID_ITransform3D] = ITransform3D
_IIDMap[IID_IArea] = IArea
_IIDMap[IID_IArea3D] = IArea3D
_IIDMap[IID_IGeometricBufferSourceSink] = IGeometricBufferSourceSink
_IIDMap[IID_IEnumVertex2] = IEnumVertex2
_IIDMap[IID_IConstructMerge] = IConstructMerge
_IIDMap[IID_IMSegmentation] = IMSegmentation
_IIDMap[IID_IEncode3DProperties] = IEncode3DProperties
_IIDMap[IID_IRelationalOperator] = IRelationalOperator
_IIDMap[IID_IRelationalOperator2] = IRelationalOperator2
_IIDMap[IID_IRelationalOperator3D] = IRelationalOperator3D
_IIDMap[IID_IRelationalOperator3D2] = IRelationalOperator3D2
_IIDMap[IID_IRelationalOperatorNxM] = IRelationalOperatorNxM
_IIDMap[IID_IProximityOperator] = IProximityOperator
_IIDMap[IID_IProximityOperator3D] = IProximityOperator3D
_IIDMap[IID_ITopologicalOperator6] = ITopologicalOperator6
_IIDMap[IID_IConstructGeodetic] = IConstructGeodetic
_IIDMap[IID_IConstructEllipticArc] = IConstructEllipticArc
_IIDMap[IID_IGeometryArray] = IGeometryArray
_IIDMap[IID_IBufferConstruction] = IBufferConstruction
_IIDMap[IID_IGeometryFactory] = IGeometryFactory
_IIDMap[IID_IGeometryFactory2] = IGeometryFactory2
_IIDMap[IID_IGeometryFactory3] = IGeometryFactory3
_IIDMap[IID_IConstructDomainExtent] = IConstructDomainExtent
_IIDMap[IID_IConstructDomainExtent2] = IConstructDomainExtent2
_IIDMap[IID_IGeneralMultiPatchInfo] = IGeneralMultiPatchInfo
_IIDMap[IID_IPointArray] = IPointArray
_IIDMap[IID_IProjectiveTransformation2D] = IProjectiveTransformation2D
_IIDMap[IID_IAffineTransformation3D] = IAffineTransformation3D
_IIDMap[IID_IHitTest] = IHitTest
_IIDMap[IID_IHitTest3D] = IHitTest3D
_IIDMap[IID_ICurve3D] = ICurve3D
_IIDMap[IID_IEnvelope2] = IEnvelope2
_IIDMap[IID_IPointCollection5] = IPointCollection5
_IIDMap[IID_IMSegmentation2] = IMSegmentation2
_IIDMap[IID_IMSegmentation3] = IMSegmentation3
_IIDMap[IID_IMSegmentation4] = IMSegmentation4
_IIDMap[IID_IWin32Shape] = IWin32Shape
_IIDMap[IID_IWin32Shape2] = IWin32Shape2
_IIDMap[IID_ICurve] = ICurve
_IIDMap[IID_ILine] = ILine
_IIDMap[IID_IPolycurve] = IPolycurve
_IIDMap[IID_IPath] = IPath
_IIDMap[IID_IPolyline] = IPolyline
_IIDMap[IID_ISegment] = ISegment
_IIDMap[IID_IRing] = IRing
_IIDMap[IID_IEnumSegment] = IEnumSegment
_IIDMap[IID_IEnumCurve] = IEnumCurve
_IIDMap[IID_ISegmentCollection] = ISegmentCollection
_IIDMap[IID_ITransform2D] = ITransform2D
_IIDMap[IID_ITopologicalSegment] = ITopologicalSegment
_IIDMap[IID_IEllipticArc] = IEllipticArc
_IIDMap[IID_IPolygon] = IPolygon
_IIDMap[IID_IFunctionalSurface] = IFunctionalSurface
_IIDMap[IID_ISegmentGraphCursor] = ISegmentGraphCursor
_IIDMap[IID_ISegmentGraph] = ISegmentGraph
_IIDMap[IID_IMultiPatch] = IMultiPatch
_IIDMap[IID_ICurve2] = ICurve2
_IIDMap[IID_ICircularArc] = ICircularArc
_IIDMap[IID_IAffineTransformation2D] = IAffineTransformation2D
_IIDMap[IID_ITopologicalOperator] = ITopologicalOperator
_IIDMap[IID_ITopologicalOperator2] = ITopologicalOperator2
_IIDMap[IID_IFunctionalSurface2] = IFunctionalSurface2
_IIDMap[IID_IFunctionalSurface3] = IFunctionalSurface3
_IIDMap[IID_IAffineTransformation2D3GEN] = IAffineTransformation2D3GEN
_IIDMap[IID_IPolycurve2] = IPolycurve2
_IIDMap[IID_ISegmentZ2] = ISegmentZ2
_IIDMap[IID_IConstructClothoid] = IConstructClothoid
_IIDMap[IID_IEnumCurve2] = IEnumCurve2
_IIDMap[IID_IPolyline2] = IPolyline2
_IIDMap[IID_IPolyline3] = IPolyline3
_IIDMap[IID_IPolyline4] = IPolyline4
_IIDMap[IID_IPolyline5] = IPolyline5
_IIDMap[IID_IPolyline6] = IPolyline6
_IIDMap[IID_IConstructMultiPatch] = IConstructMultiPatch
_IIDMap[IID_IExtrude] = IExtrude
_IIDMap[IID_IExtrude2] = IExtrude2
_IIDMap[IID_IZ] = IZ
_IIDMap[IID_IZ2] = IZ2
_IIDMap[IID_IVertexAttribute] = IVertexAttribute
_IIDMap[IID_IVertexAttribute2] = IVertexAttribute2
_IIDMap[IID_IConstructAngle] = IConstructAngle
_IIDMap[IID_IConstructPath] = IConstructPath
_IIDMap[IID_IConstructPoint] = IConstructPoint
_IIDMap[IID_IConstructPoint2] = IConstructPoint2
_IIDMap[IID_IConstructCurve] = IConstructCurve
_IIDMap[IID_IConstructCurve2] = IConstructCurve2
_IIDMap[IID_IConstructCurve3] = IConstructCurve3
_IIDMap[IID_IConstructCurve4] = IConstructCurve4
_IIDMap[IID_IConstructLine] = IConstructLine
_IIDMap[IID_IConstructCircularArc] = IConstructCircularArc
_IIDMap[IID_IConstructCircularArc2] = IConstructCircularArc2
_IIDMap[IID_IConstructBezierCurve] = IConstructBezierCurve
_IIDMap[IID_IConstructGeometryCollection] = IConstructGeometryCollection
_IIDMap[IID_IGeometryBridge] = IGeometryBridge
_IIDMap[IID_IGeometryBridge2] = IGeometryBridge2
_IIDMap[IID_ISegmentGraph2] = ISegmentGraph2
_IIDMap[IID_ILinePolygonHelper] = ILinePolygonHelper
_IIDMap[IID_IPolylineArray] = IPolylineArray
_IIDMap[IID_IPolygonArray] = IPolygonArray
_IIDMap[IID_IGeometryServer] = IGeometryServer
_IIDMap[IID_IGeometryServer2] = IGeometryServer2
_IIDMap[IID_IGeometryServer3] = IGeometryServer3
_IIDMap[IID_IJSONConverterGeometry] = IJSONConverterGeometry
_IIDMap[IID_IAffineTransformation2D2] = IAffineTransformation2D2
_IIDMap[IID_IAffineTransformation2D3] = IAffineTransformation2D3
_IIDMap[IID_ILine2] = ILine2
_IIDMap[IID_ILine3] = ILine3
_IIDMap[IID_ICurve3] = ICurve3
_IIDMap[IID_IBezierCurve] = IBezierCurve
_IIDMap[IID_IBezierCurve2] = IBezierCurve2
_IIDMap[IID_IBezierCurve3] = IBezierCurve3
_IIDMap[IID_IRing2] = IRing2
_IIDMap[IID_IConstructMultipoint] = IConstructMultipoint
_IIDMap[IID_ITopologicalOperator3] = ITopologicalOperator3
_IIDMap[IID_ITopologicalOperator4] = ITopologicalOperator4
_IIDMap[IID_ITopologicalOperator5] = ITopologicalOperator5
_IIDMap[IID_IPolygon2] = IPolygon2
_IIDMap[IID_IPolygon3] = IPolygon3
_IIDMap[IID_IPolygon4] = IPolygon4
_IIDMap[IID_IPolycurve3] = IPolycurve3
_IIDMap[IID_IMultiPatch2] = IMultiPatch2
_IIDMap[IID_ITopologicalSegment2] = ITopologicalSegment2


# CLSIDs
CLSID_LinearUnit = uuid.UUID('de162780-1dd1-11b2-bf4f-08002022f573')
CLSID_AngularUnit = uuid.UUID('74ad43f4-d31c-11d1-bc9b-0000f875bcce')
CLSID_Spheroid = uuid.UUID('2b929480-1dd2-11b2-bf4f-08002022f573')
CLSID_VerticalDatum = uuid.UUID('2594a37f-575d-4eab-9809-94f4b56ef3fb')
CLSID_Datum = uuid.UUID('862bf080-1dd2-11b2-bf4f-08002022f573')
CLSID_PrimeMeridian = uuid.UUID('c55a4180-1dd1-11b2-bf50-08002022f573')
CLSID_GeographicCoordinateSystem = uuid.UUID('a6a87a80-1dd1-11b2-bf51-08002022f573')
CLSID_Parameter = uuid.UUID('e2dbdb00-1dd1-11b2-bf51-08002022f573')
CLSID_ProjectedCoordinateSystem = uuid.UUID('2a626700-1dd2-11b2-bf51-08002022f573')
CLSID_VerticalCoordinateSystem = uuid.UUID('6d7ef7c6-40db-48fb-b5bb-badfdca5a2d8')
CLSID_SpatialReferenceEnvironment = uuid.UUID('7b5b7020-c4f6-11d1-bc92-0000f875bcce')
CLSID_GeoTransformationOperationSet = uuid.UUID('38ac4b99-a4c9-41e8-88e0-ceea37888932')
CLSID_Projection = uuid.UUID('7ca36480-c8f4-11d1-bc93-0000f875bcce')
CLSID_GeoTransformation = uuid.UUID('843c4d40-bd7e-4542-a126-24aeba43af20')
CLSID_GeocentricTranslation = uuid.UUID('0f024430-c1f8-11d2-bd07-0000f875bcce')
CLSID_CoordinateFrameTransformation = uuid.UUID('0f024431-c1f8-11d2-bd07-0000f875bcce')
CLSID_PositionVectorTransformation = uuid.UUID('0cdf92b1-c2a0-11d2-bd08-0000f875bcce')
CLSID_MolodenskyTransformation = uuid.UUID('0cdf92b0-c2a0-11d2-bd08-0000f875bcce')
CLSID_MolodenskyBadekasTransformation = uuid.UUID('e739e629-0d22-48f7-841c-54111ca6d666')
CLSID_NullTransformation = uuid.UUID('1c5a7b90-e68e-11de-8a39-0800200c9a66')
CLSID_UnitChangeTransformation = uuid.UUID('1c5a7b91-e68e-11de-8a39-0800200c9a66')
CLSID_Geographic2DOffsetTransformation = uuid.UUID('1c5a7b92-e68e-11de-8a39-0800200c9a66')
CLSID_AbridgedMolodenskyTransformation = uuid.UUID('dd2f68d0-c6b0-11d2-bd09-0000f875bcce')
CLSID_LongitudeRotationTransformation = uuid.UUID('6f3c0002-da7f-11d3-9f60-00c04f6bdd7f')
CLSID_NADCONTransformation = uuid.UUID('d661941c-da8a-11d3-9f60-00c04f6bdd7f')
CLSID_HARNTransformation = uuid.UUID('df146878-da8a-11d3-9f60-00c04f6bdd7f')
CLSID_NTv2Transformation = uuid.UUID('52b971e2-ebec-11d4-9fd6-00c04f6bdd7f')
CLSID_CompositeGeoTransformation = uuid.UUID('5847fb82-dbae-11d3-9f60-00c04f6bdd7f')
CLSID_UnknownCoordinateSystem = uuid.UUID('b286c06b-0879-11d2-aaca-00c04fa33c20')
CLSID_JSONConverterGeometry = uuid.UUID('ad041a31-21a7-4fb7-9309-3836a7333e6c')
CLSID_GeometryServerImpl = uuid.UUID('0c38b104-a3a8-4bde-858f-4231430f2101')
CLSID_PointArray = uuid.UUID('d111f9d0-6c3a-4f9c-a378-d227483bec1f')
CLSID_RelationResultArray = uuid.UUID('59505ffc-6516-472d-bf32-861ec5f37b04')
CLSID_PolygonArray = uuid.UUID('a04ddf71-54e6-4232-937c-e22c6f75939a')
CLSID_PolylineArray = uuid.UUID('31d19fd8-1836-464c-9cbe-1b9108df70d2')
CLSID_GeometryArray = uuid.UUID('664abf52-70e1-469f-aad3-5a7c2505528e')
CLSID_AffineTransformation2D = uuid.UUID('6fa1a8d6-d264-11d2-9f29-00c04f6bdd7f')
CLSID_ProjectiveTransformation2D = uuid.UUID('f82eb04a-4e5a-43c7-9a54-457439aa8e9e')
CLSID_AffineTransformation3D = uuid.UUID('c55f63f7-27b9-11d5-9f84-00c04f6bdf0d')
CLSID_Point = uuid.UUID('00a5cb41-52da-11d0-a8f2-00608c85ede5')
CLSID_Vector3D = uuid.UUID('b3fa5973-ada3-11d2-9fae-00c04f8ece3d')
CLSID_Sphere = uuid.UUID('ecfb3332-9869-11d3-9f5e-00c04f6bc5f4')
CLSID_Ray = uuid.UUID('83a20d9d-1c70-11d4-9f5c-00c04f6bdf0d')
CLSID_Line = uuid.UUID('6f4e63e0-5ab4-11d0-a8f6-00608c85ede5')
CLSID_EllipticArc = uuid.UUID('e54925bb-16d9-11d2-aa7a-00c04fa37ba4')
CLSID_CircularArc = uuid.UUID('cd3a614e-bc4b-11d0-8303-0000f8034032')
CLSID_BezierCurve = uuid.UUID('c8970bdc-b15b-11d1-a2d3-0000f8775fbf')
CLSID_Envelope = uuid.UUID('30707212-52d5-11d0-a8f2-00608c85ede5')
CLSID_Path = uuid.UUID('30707211-52d5-11d0-a8f2-00608c85ede5')
CLSID_Ring = uuid.UUID('b9bc6bce-7891-11d0-82f4-0000f8034032')
CLSID_Multipoint = uuid.UUID('00a5cb40-52da-11d0-a8f2-00608c85ede5')
CLSID_Polyline = uuid.UUID('30707210-52d5-11d0-a8f2-00608c85ede5')
CLSID_Polygon = uuid.UUID('00a5cb42-52da-11d0-a8f2-00608c85ede5')
CLSID_SegmentGraph = uuid.UUID('688c3098-0e28-11d3-9f33-00c04f6bdd7f')
CLSID_RelationResult = uuid.UUID('256e4807-2a58-4360-90bd-fbd03517d95b')
CLSID_BufferConstruction = uuid.UUID('2177368c-0201-4102-9281-7ed72e176463')
CLSID_GeometryBag = uuid.UUID('10b5f5c0-3781-11d2-bcc5-0000f875bcce')
CLSID_MultiPatch = uuid.UUID('f3c041c6-ae4d-11d2-9c93-00c04fb17838')
CLSID_TriangleFan = uuid.UUID('8b555499-1d26-11d4-9f5c-00c04f6bdf0d')
CLSID_Triangles = uuid.UUID('5100f0a0-cf23-11d5-9fa1-00c04f6bdf0d')
CLSID_TriangleStrip = uuid.UUID('8b55549a-1d26-11d4-9f5c-00c04f6bdf0d')
CLSID_GeometryEnvironment = uuid.UUID('11735dae-816c-11d0-82f5-0000f8034032')
CLSID_LinePolygonHelper = uuid.UUID('2e53c850-5ae3-4b79-8e72-fa0c0018f861')
CLSID_TexturePersistenceProperties = uuid.UUID('01cfeaf1-4d26-4084-84f8-7d2fda7c40d9')

# Enumerations
class esriGeometryType(Enumeration):
    __slots__ = ['esriGeometryNull',
                 'esriGeometryPoint',
                 'esriGeometryMultipoint',
                 'esriGeometryLine',
                 'esriGeometryCircularArc',
                 'esriGeometryEllipticArc',
                 'esriGeometryBezier3Curve',
                 'esriGeometryPath',
                 'esriGeometryPolyline',
                 'esriGeometryRing',
                 'esriGeometryPolygon',
                 'esriGeometryEnvelope',
                 'esriGeometryAny',
                 'esriGeometryBag',
                 'esriGeometryMultiPatch',
                 'esriGeometryTriangleStrip',
                 'esriGeometryTriangleFan',
                 'esriGeometryRay',
                 'esriGeometrySphere',
                 'esriGeometryTriangles']
    esriGeometryNull = 0
    esriGeometryPoint = 1
    esriGeometryMultipoint = 2
    esriGeometryLine = 13
    esriGeometryCircularArc = 14
    esriGeometryEllipticArc = 16
    esriGeometryBezier3Curve = 15
    esriGeometryPath = 6
    esriGeometryPolyline = 3
    esriGeometryRing = 11
    esriGeometryPolygon = 4
    esriGeometryEnvelope = 5
    esriGeometryAny = 7
    esriGeometryBag = 17
    esriGeometryMultiPatch = 9
    esriGeometryTriangleStrip = 18
    esriGeometryTriangleFan = 19
    esriGeometryRay = 20
    esriGeometrySphere = 21
    esriGeometryTriangles = 22

class esriGeometryDimension(Enumeration):
    __slots__ = ['esriGeometry0Dimension',
                 'esriGeometry1Dimension',
                 'esriGeometry2Dimension',
                 'esriGeometry25Dimension',
                 'esriGeometry3Dimension',
                 'esriGeometryNoDimension']
    esriGeometry0Dimension = 1
    esriGeometry1Dimension = 2
    esriGeometry2Dimension = 4
    esriGeometry25Dimension = 5
    esriGeometry3Dimension = 6
    esriGeometryNoDimension = -1

class esriGeometryAttributes(Enumeration):
    __slots__ = ['esriAttributeNone',
                 'esriAttributeZ',
                 'esriAttributeM',
                 'esriAttributeID',
                 'esriAttributeNormal',
                 'esriAttributeTexture',
                 'esriAttributeAll']
    esriAttributeNone = 0
    esriAttributeZ = 128
    esriAttributeM = 64
    esriAttributeID = 16
    esriAttributeNormal = 8
    esriAttributeTexture = 4
    esriAttributeAll = 255

class esriMGRSModeEnum(Enumeration):
    __slots__ = ['esriMGRSMode_Automatic',
                 'esriMGRSMode_USNG',
                 'esriMGRSMode_NewStyle',
                 'esriMGRSMode_OldStyle',
                 'esriMGRSMode_NewWith180InZone01',
                 'esriMGRSMode_OldWith180InZone01']
    esriMGRSMode_Automatic = 0
    esriMGRSMode_USNG = 1
    esriMGRSMode_NewStyle = 2
    esriMGRSMode_OldStyle = 3
    esriMGRSMode_NewWith180InZone01 = 11
    esriMGRSMode_OldWith180InZone01 = 12

class esriGARSModeEnum(Enumeration):
    __slots__ = ['esriGARSModeLL',
                 'esriGARSModeCENTER']
    esriGARSModeLL = 0
    esriGARSModeCENTER = 1

class esriUTMConversionOptionsEnum(Enumeration):
    __slots__ = ['esriUTMNoOptions',
                 'esriUTMAddSpaces',
                 'esriUTMUseNS']
    esriUTMNoOptions = 0
    esriUTMAddSpaces = 1
    esriUTMUseNS = 2

class esriSpatialReferenceError(Enumeration):
    __slots__ = ['S_SPATIALREFERENCE_OK',
                 'E_SPATIALREFERENCE_NOPRECISION',
                 'E_SPATIALREFERENCE_INVALID_PARAMETER',
                 'E_SPATIALREFERENCE_CANTDEFINESR',
                 'E_SPATIALREFERENCE_PRECISIONTOOHIGH',
                 'E_SPATIALREFERENCE_INSUFFICIENTPRECISION',
                 'E_SPATIALREFERENCE_NOTAPRJFILE',
                 'E_SPATIALREFERENCE_NOTAGCS',
                 'E_SPATIALREFERENCE_NOTAPCS',
                 'E_SPATIALREFERENCE_NOTAUNIT',
                 'E_SPATIALREFERENCE_EMPTYUNIT',
                 'E_SPATIALREFERENCE_CANTDEFINEAUTH',
                 'E_SPATIALREFERENCE_BADVCSID',
                 'E_SPATIALREFERENCE_NOMPRECISION',
                 'E_SPATIALREFERENCE_NOZPRECISION',
                 'E_SPATIALREFERENCE_CANTLOADXFORMFILE',
                 'E_SPATIALREFERENCE_INVALID_JSON_SR',
                 'E_SPATIALREFERENCE_WRONG_UNIT_TYPE']
    S_SPATIALREFERENCE_OK = 0
    E_SPATIALREFERENCE_NOPRECISION = 514
    E_SPATIALREFERENCE_INVALID_PARAMETER = 515
    E_SPATIALREFERENCE_CANTDEFINESR = 516
    E_SPATIALREFERENCE_PRECISIONTOOHIGH = 517
    E_SPATIALREFERENCE_INSUFFICIENTPRECISION = 518
    E_SPATIALREFERENCE_NOTAPRJFILE = 519
    E_SPATIALREFERENCE_NOTAGCS = 520
    E_SPATIALREFERENCE_NOTAPCS = 521
    E_SPATIALREFERENCE_NOTAUNIT = 522
    E_SPATIALREFERENCE_EMPTYUNIT = 523
    E_SPATIALREFERENCE_CANTDEFINEAUTH = 524
    E_SPATIALREFERENCE_BADVCSID = 525
    E_SPATIALREFERENCE_NOMPRECISION = 526
    E_SPATIALREFERENCE_NOZPRECISION = 527
    E_SPATIALREFERENCE_CANTLOADXFORMFILE = 528
    E_SPATIALREFERENCE_INVALID_JSON_SR = 529
    E_SPATIALREFERENCE_WRONG_UNIT_TYPE = 530

class esriSRHorizonType(Enumeration):
    __slots__ = ['esriSRHorizon_Envelope',
                 'esriSRHorizon_Polygon',
                 'esriSRHorizon_Polyline',
                 'esriSRHorizon_Point']
    esriSRHorizon_Envelope = 0
    esriSRHorizon_Polygon = 1
    esriSRHorizon_Polyline = 2
    esriSRHorizon_Point = 3

class esriSRLimitsEnum(Enumeration):
    __slots__ = ['esriSR_MaxParameterCount']
    esriSR_MaxParameterCount = 16

class esriSRToleranceEnum(Enumeration):
    __slots__ = ['esriSRToleranceIsNaN',
                 'esriSRToleranceIsTooSmall',
                 'esriSRToleranceOK']
    esriSRToleranceIsNaN = 1
    esriSRToleranceIsTooSmall = 2
    esriSRToleranceOK = 3

class esriCoordinateSystemFilter(Enumeration):
    __slots__ = ['esriFilterGCS',
                 'esriFilterPCS',
                 'esriFilterHCS',
                 'esriFilterVCS']
    esriFilterGCS = 1
    esriFilterPCS = 2
    esriFilterHCS = 3
    esriFilterVCS = 8

class esriTransformDirection(Enumeration):
    __slots__ = ['esriTransformForward',
                 'esriTransformReverse']
    esriTransformForward = 0
    esriTransformReverse = 1

class esriSegmentExtension(Enumeration):
    __slots__ = ['esriNoExtension',
                 'esriExtendTangentAtFrom',
                 'esriExtendEmbeddedAtFrom',
                 'esriExtendTangentAtTo',
                 'esriExtendEmbeddedAtTo',
                 'esriExtendTangents',
                 'esriExtendEmbedded',
                 'esriExtendAtFrom',
                 'esriExtendAtTo']
    esriNoExtension = 0
    esriExtendTangentAtFrom = 1
    esriExtendEmbeddedAtFrom = 2
    esriExtendTangentAtTo = 4
    esriExtendEmbeddedAtTo = 8
    esriExtendTangents = 5
    esriExtendEmbedded = 10
    esriExtendAtFrom = 3
    esriExtendAtTo = 12

class esriSRPoleLocation(Enumeration):
    __slots__ = ['esriSRPole_OutsideBoundary',
                 'esriSRPole_OnBoundary',
                 'esriSRPole_InsideBoundary']
    esriSRPole_OutsideBoundary = 0
    esriSRPole_OnBoundary = 1
    esriSRPole_InsideBoundary = 2

class esriSRPoleGeometry(Enumeration):
    __slots__ = ['esriSRPole_None',
                 'esriSRPole_IsPoint',
                 'esriSRPole_IsStraightLine',
                 'esriSRPole_IsCurvedLine']
    esriSRPole_None = 0
    esriSRPole_IsPoint = 1
    esriSRPole_IsStraightLine = 2
    esriSRPole_IsCurvedLine = 3

class esriProjectionHint(Enumeration):
    __slots__ = ['esriProjectionHintNoHorizonCheck',
                 'esriProjectionHintCheckPCSHorizon',
                 'esriProjectionHintCheckGCSHorizon',
                 'esriProjectionHintFindGeoTransformation',
                 'esriProjectionHintDefault',
                 'esriProjectionHintExplore',
                 'esriProjectionHintDoNotProject',
                 'esriProjectionHintForceSplittingInGCS',
                 'esriProjectionHintSetEmpty']
    esriProjectionHintNoHorizonCheck = 0
    esriProjectionHintCheckPCSHorizon = 1
    esriProjectionHintCheckGCSHorizon = 2
    esriProjectionHintFindGeoTransformation = 4
    esriProjectionHintDefault = 7
    esriProjectionHintExplore = 8
    esriProjectionHintDoNotProject = 16
    esriProjectionHintForceSplittingInGCS = 32
    esriProjectionHintSetEmpty = 64

class wkbByteOrder(Enumeration):
    __slots__ = ['wkbXDR',
                 'wkbNDR']
    wkbXDR = 0
    wkbNDR = 1

class esriSRUnitType(Enumeration):
    __slots__ = ['esriSRUnit_Meter',
                 'esriSRUnit_GermanMeter',
                 'esriSRUnit_Foot',
                 'esriSRUnit_SurveyFoot',
                 'esriSRUnit_ClarkeFoot',
                 'esriSRUnit_Fathom',
                 'esriSRUnit_NauticalMile',
                 'esriSRUnit_SurveyChain',
                 'esriSRUnit_SurveyLink',
                 'esriSRUnit_SurveyMile',
                 'esriSRUnit_Kilometer',
                 'esriSRUnit_ClarkeYard',
                 'esriSRUnit_ClarkeChain',
                 'esriSRUnit_ClarkeLink',
                 'esriSRUnit_SearsYard',
                 'esriSRUnit_SearsFoot',
                 'esriSRUnit_SearsChain',
                 'esriSRUnit_SearsLink',
                 'esriSRUnit_Benoit1895A_Yard',
                 'esriSRUnit_Benoit1895A_Foot',
                 'esriSRUnit_Benoit1895A_Chain',
                 'esriSRUnit_Benoit1895A_Link',
                 'esriSRUnit_Benoit1895B_Yard',
                 'esriSRUnit_Benoit1895B_Foot',
                 'esriSRUnit_Benoit1895B_Chain',
                 'esriSRUnit_Benoit1895B_Link',
                 'esriSRUnit_IndianFoot',
                 'esriSRUnit_Indian1937Foot',
                 'esriSRUnit_Indian1962Foot',
                 'esriSRUnit_Indian1975Foot',
                 'esriSRUnit_IndianYard',
                 'esriSRUnit_Indian1937Yard',
                 'esriSRUnit_Indian1962Yard',
                 'esriSRUnit_Indian1975Yard',
                 'esriSRUnit_Foot1865',
                 'esriSRUnit_Radian',
                 'esriSRUnit_Degree',
                 'esriSRUnit_ArcMinute',
                 'esriSRUnit_ArcSecond',
                 'esriSRUnit_Grad',
                 'esriSRUnit_Gon',
                 'esriSRUnit_Microradian',
                 'esriSRUnit_ArcMinuteCentesimal',
                 'esriSRUnit_ArcSecondCentesimal',
                 'esriSRUnit_Mil6400']
    esriSRUnit_Meter = 9001
    esriSRUnit_GermanMeter = 9031
    esriSRUnit_Foot = 9002
    esriSRUnit_SurveyFoot = 9003
    esriSRUnit_ClarkeFoot = 9005
    esriSRUnit_Fathom = 9014
    esriSRUnit_NauticalMile = 9030
    esriSRUnit_SurveyChain = 9033
    esriSRUnit_SurveyLink = 9034
    esriSRUnit_SurveyMile = 9035
    esriSRUnit_Kilometer = 9036
    esriSRUnit_ClarkeYard = 9037
    esriSRUnit_ClarkeChain = 9038
    esriSRUnit_ClarkeLink = 9039
    esriSRUnit_SearsYard = 9040
    esriSRUnit_SearsFoot = 9041
    esriSRUnit_SearsChain = 9042
    esriSRUnit_SearsLink = 9043
    esriSRUnit_Benoit1895A_Yard = 9050
    esriSRUnit_Benoit1895A_Foot = 9051
    esriSRUnit_Benoit1895A_Chain = 9052
    esriSRUnit_Benoit1895A_Link = 9053
    esriSRUnit_Benoit1895B_Yard = 9060
    esriSRUnit_Benoit1895B_Foot = 9061
    esriSRUnit_Benoit1895B_Chain = 9062
    esriSRUnit_Benoit1895B_Link = 9063
    esriSRUnit_IndianFoot = 9080
    esriSRUnit_Indian1937Foot = 9081
    esriSRUnit_Indian1962Foot = 9082
    esriSRUnit_Indian1975Foot = 9083
    esriSRUnit_IndianYard = 9084
    esriSRUnit_Indian1937Yard = 9085
    esriSRUnit_Indian1962Yard = 9086
    esriSRUnit_Indian1975Yard = 9087
    esriSRUnit_Foot1865 = 9070
    esriSRUnit_Radian = 9101
    esriSRUnit_Degree = 9102
    esriSRUnit_ArcMinute = 9103
    esriSRUnit_ArcSecond = 9104
    esriSRUnit_Grad = 9105
    esriSRUnit_Gon = 9106
    esriSRUnit_Microradian = 9109
    esriSRUnit_ArcMinuteCentesimal = 9112
    esriSRUnit_ArcSecondCentesimal = 9113
    esriSRUnit_Mil6400 = 9114

class esriSRSpheroidType(Enumeration):
    __slots__ = ['esriSRSpheroid_Airy1830',
                 'esriSRSpheroid_ModifiedAiry',
                 'esriSRSpheroid_ATS1977',
                 'esriSRSpheroid_Australian',
                 'esriSRSpheroid_Bessel1841',
                 'esriSRSpheroid_ModifiedBessel',
                 'esriSRSpheroid_BesselNamibia',
                 'esriSRSpheroid_Clarke1858',
                 'esriSRSpheroid_Clarke1866',
                 'esriSRSpheroid_Clarke1866Michigan',
                 'esriSRSpheroid_Clarke1880',
                 'esriSRSpheroid_Clarke1880Arc',
                 'esriSRSpheroid_Clarke1880Benoit',
                 'esriSRSpheroid_Clarke1880IGN',
                 'esriSRSpheroid_Clarke1880RGS',
                 'esriSRSpheroid_Clarke1880SGA',
                 'esriSRSpheroid_Everest1830',
                 'esriSRSpheroid_Everest1937',
                 'esriSRSpheroid_Everest1962',
                 'esriSRSpheroid_Everest1967',
                 'esriSRSpheroid_Everest1975',
                 'esriSRSpheroid_ModifiedEverest',
                 'esriSRSpheroid_GEM10C',
                 'esriSRSpheroid_GRS1967',
                 'esriSRSpheroid_GRS1980',
                 'esriSRSpheroid_Helmert1906',
                 'esriSRSpheroid_Indonesian',
                 'esriSRSpheroid_International1924',
                 'esriSRSpheroid_International1967',
                 'esriSRSpheroid_Krasovsky1940',
                 'esriSRSpheroid_NWL9D',
                 'esriSRSpheroid_OSU1986F',
                 'esriSRSpheroid_OSU1991A',
                 'esriSRSpheroid_Plessis1817',
                 'esriSRSpheroid_AuthalicSphere',
                 'esriSRSpheroid_Struve1860',
                 'esriSRSpheroid_WarOffice',
                 'esriSRSpheroid_NWL10D',
                 'esriSRSpheroid_WGS1972',
                 'esriSRSpheroid_WGS1984',
                 'esriSRSpheroid_WGS1966',
                 'esriSRSpheroid_Fischer1960',
                 'esriSRSpheroid_Fischer1968',
                 'esriSRSpheroid_ModifiedFischer',
                 'esriSRSpheroid_Hough1960',
                 'esriSRSpheroid_ModifiedEverest1969',
                 'esriSRSpheroid_Walbeck',
                 'esriSRSpheroid_AuthalicSphereArcInfo',
                 'esriSRSpheroid_GRS1967Truncated',
                 'esriSRSpheroid_Clarke1866AuthalicSphere',
                 'esriSRSpheroid_Danish1876',
                 'esriSRSpheroid_PZ1990',
                 'esriSRSpheroid_Clarke1880_IntlFt',
                 'esriSRSpheroid_AuthalicSphere_Intl1924',
                 'esriSRSpheroid_Hughes1980',
                 'esriSRSpheroid_MajorAuxiliarySphere_WGS1984']
    esriSRSpheroid_Airy1830 = 7001
    esriSRSpheroid_ModifiedAiry = 7002
    esriSRSpheroid_ATS1977 = 7041
    esriSRSpheroid_Australian = 7003
    esriSRSpheroid_Bessel1841 = 7004
    esriSRSpheroid_ModifiedBessel = 7005
    esriSRSpheroid_BesselNamibia = 7006
    esriSRSpheroid_Clarke1858 = 7007
    esriSRSpheroid_Clarke1866 = 7008
    esriSRSpheroid_Clarke1866Michigan = 7009
    esriSRSpheroid_Clarke1880 = 7034
    esriSRSpheroid_Clarke1880Arc = 7013
    esriSRSpheroid_Clarke1880Benoit = 7010
    esriSRSpheroid_Clarke1880IGN = 7011
    esriSRSpheroid_Clarke1880RGS = 7012
    esriSRSpheroid_Clarke1880SGA = 7014
    esriSRSpheroid_Everest1830 = 7042
    esriSRSpheroid_Everest1937 = 7015
    esriSRSpheroid_Everest1962 = 7044
    esriSRSpheroid_Everest1967 = 7016
    esriSRSpheroid_Everest1975 = 7045
    esriSRSpheroid_ModifiedEverest = 7018
    esriSRSpheroid_GEM10C = 7031
    esriSRSpheroid_GRS1967 = 7036
    esriSRSpheroid_GRS1980 = 7019
    esriSRSpheroid_Helmert1906 = 7020
    esriSRSpheroid_Indonesian = 7021
    esriSRSpheroid_International1924 = 7022
    esriSRSpheroid_International1967 = 7023
    esriSRSpheroid_Krasovsky1940 = 7024
    esriSRSpheroid_NWL9D = 7025
    esriSRSpheroid_OSU1986F = 7032
    esriSRSpheroid_OSU1991A = 7033
    esriSRSpheroid_Plessis1817 = 7027
    esriSRSpheroid_AuthalicSphere = 7035
    esriSRSpheroid_Struve1860 = 7028
    esriSRSpheroid_WarOffice = 7029
    esriSRSpheroid_NWL10D = 7026
    esriSRSpheroid_WGS1972 = 7043
    esriSRSpheroid_WGS1984 = 7030
    esriSRSpheroid_WGS1966 = 107001
    esriSRSpheroid_Fischer1960 = 107002
    esriSRSpheroid_Fischer1968 = 107003
    esriSRSpheroid_ModifiedFischer = 107004
    esriSRSpheroid_Hough1960 = 7053
    esriSRSpheroid_ModifiedEverest1969 = 7056
    esriSRSpheroid_Walbeck = 107007
    esriSRSpheroid_AuthalicSphereArcInfo = 107008
    esriSRSpheroid_GRS1967Truncated = 7050
    esriSRSpheroid_Clarke1866AuthalicSphere = 7052
    esriSRSpheroid_Danish1876 = 7051
    esriSRSpheroid_PZ1990 = 7054
    esriSRSpheroid_Clarke1880_IntlFt = 7055
    esriSRSpheroid_AuthalicSphere_Intl1924 = 7057
    esriSRSpheroid_Hughes1980 = 7058
    esriSRSpheroid_MajorAuxiliarySphere_WGS1984 = 7059

class esriSRDatumType(Enumeration):
    __slots__ = ['esriSRDatum_Airy1830',
                 'esriSRDatum_ModifiedAiry',
                 'esriSRDatum_Australian',
                 'esriSRDatum_Bessel1841',
                 'esriSRDatum_ModifiedBessel',
                 'esriSRDatum_BesselNamibia',
                 'esriSRDatum_Clarke1858',
                 'esriSRDatum_Clarke1866',
                 'esriSRDatum_Clarke1866Michigan',
                 'esriSRDatum_Clarke1880',
                 'esriSRDatum_Clarke1880Arc',
                 'esriSRDatum_Clarke1880Benoit',
                 'esriSRDatum_Clarke1880IGN',
                 'esriSRDatum_Clarke1880RGS',
                 'esriSRDatum_Clarke1880SGA',
                 'esriSRDatum_Everest1830',
                 'esriSRDatum_Everest1937',
                 'esriSRDatum_Everest1962',
                 'esriSRDatum_Everest1967',
                 'esriSRDatum_Everest1975',
                 'esriSRDatum_ModifiedEverest',
                 'esriSRDatum_GEM10C',
                 'esriSRDatum_GRS1967',
                 'esriSRDatum_GRS1980',
                 'esriSRDatum_Helmert1906',
                 'esriSRDatum_Indonesian',
                 'esriSRDatum_International1924',
                 'esriSRDatum_International1967',
                 'esriSRDatum_Krasovksy1940',
                 'esriSRDatum_NWL9D',
                 'esriSRDatum_OSU1986F',
                 'esriSRDatum_OSU1991A',
                 'esriSRDatum_Plessis1817',
                 'esriSRDatum_AuthalicSphere',
                 'esriSRDatum_Struve1860',
                 'esriSRDatum_WarOffice',
                 'esriSRDatum_WGS1966',
                 'esriSRDatum_Fischer1960',
                 'esriSRDatum_Fischer1968',
                 'esriSRDatum_ModifiedFischer',
                 'esriSRDatum_Hough1960',
                 'esriSRDatum_ModifiedEverest1969',
                 'esriSRDatum_Walbeck',
                 'esriSRDatum_AuthalicSphereArcInfo',
                 'esriSRDatum_Abidjan1987',
                 'esriSRDatum_Adindan',
                 'esriSRDatum_Afgooye',
                 'esriSRDatum_Agadez',
                 'esriSRDatum_AGD1966',
                 'esriSRDatum_AGD1984',
                 'esriSRDatum_AinElAbd1970',
                 'esriSRDatum_AmersFoort',
                 'esriSRDatum_Aratu',
                 'esriSRDatum_Arc1950',
                 'esriSRDatum_Arc1960',
                 'esriSRDatum_ATF',
                 'esriSRDatum_ATS1977',
                 'esriSRDatum_Barbados1938',
                 'esriSRDatum_Batavia',
                 'esriSRDatum_Beduaram',
                 'esriSRDatum_Beijing1954',
                 'esriSRDatum_Belge1950',
                 'esriSRDatum_Belge1972',
                 'esriSRDatum_Bermuda1957',
                 'esriSRDatum_Bern1898',
                 'esriSRDatum_Bern1938',
                 'esriSRDatum_Bogota',
                 'esriSRDatum_BukitRimpah',
                 'esriSRDatum_Camacupa',
                 'esriSRDatum_CampoInchauspe',
                 'esriSRDatum_Cape',
                 'esriSRDatum_Carthage',
                 'esriSRDatum_CH1903',
                 'esriSRDatum_CH1903Plus',
                 'esriSRDatum_CHTRF1995',
                 'esriSRDatum_Chua',
                 'esriSRDatum_Conakry1905',
                 'esriSRDatum_CorregoAlegre',
                 'esriSRDatum_CoteDIvoire',
                 'esriSRDatum_Datum73',
                 'esriSRDatum_DeirEzZor',
                 'esriSRDatum_DealulPiscului1933',
                 'esriSRDatum_DealulPiscului1970',
                 'esriSRDatum_DHDN',
                 'esriSRDatum_Douala',
                 'esriSRDatum_EuropeanDatum1950',
                 'esriSRDatum_EuropeanDatum1950ED77',
                 'esriSRDatum_EuropeanDatum1987',
                 'esriSRDatum_Egypt1907',
                 'esriSRDatum_ETRF1989',
                 'esriSRDatum_Fahud',
                 'esriSRDatum_FD1958',
                 'esriSRDatum_Gandajika1970',
                 'esriSRDatum_Garoua',
                 'esriSRDatum_GDA1994',
                 'esriSRDatum_GGRS1987',
                 'esriSRDatum_Greek',
                 'esriSRDatum_GuyaneFrancaise',
                 'esriSRDatum_Hanoi1972',
                 'esriSRDatum_Hartebeesthoek94',
                 'esriSRDatum_HeratNorth',
                 'esriSRDatum_HitoXVIII1963',
                 'esriSRDatum_HuTzuShan',
                 'esriSRDatum_Hungarian1972',
                 'esriSRDatum_Indian1954',
                 'esriSRDatum_Indian1975',
                 'esriSRDatum_Indonesian1974',
                 'esriSRDatum_Israel',
                 'esriSRDatum_Jamaica1875',
                 'esriSRDatum_Jamaica1969',
                 'esriSRDatum_Kalianpur1880',
                 'esriSRDatum_Kalianpur1937',
                 'esriSRDatum_Kalianpur1962',
                 'esriSRDatum_Kalianpur1975',
                 'esriSRDatum_Kandawala',
                 'esriSRDatum_Kertau',
                 'esriSRDatum_KKJ',
                 'esriSRDatum_KOC',
                 'esriSRDatum_KUDAMS',
                 'esriSRDatum_LaCanoa',
                 'esriSRDatum_Lake',
                 'esriSRDatum_Leigon',
                 'esriSRDatum_Liberia1964',
                 'esriSRDatum_Lisbon',
                 'esriSRDatum_Lithuania1994',
                 'esriSRDatum_Locodjo1965',
                 'esriSRDatum_LomaQuintana',
                 'esriSRDatum_Lome',
                 'esriSRDatum_Luzon1911',
                 'esriSRDatum_Madrid1870',
                 'esriSRDatum_Madzansua',
                 'esriSRDatum_Mahe1971',
                 'esriSRDatum_Makassar',
                 'esriSRDatum_Malongo1987',
                 'esriSRDatum_Manoca',
                 'esriSRDatum_Massawa',
                 'esriSRDatum_Merchich',
                 'esriSRDatum_MGI',
                 'esriSRDatum_Mhast',
                 'esriSRDatum_Minna',
                 'esriSRDatum_MonteMario',
                 'esriSRDatum_Moznet',
                 'esriSRDatum_MPoraloko',
                 'esriSRDatum_NADMichigan',
                 'esriSRDatum_NAD1927',
                 'esriSRDatum_NAD1983',
                 'esriSRDatum_NAD1983HARN',
                 'esriSRDatum_NAD1983CSRS98',
                 'esriSRDatum_Nahrwan1967',
                 'esriSRDatum_Naparima1972',
                 'esriSRDatum_NordDeGuerre',
                 'esriSRDatum_NGN',
                 'esriSRDatum_NGO1948',
                 'esriSRDatum_NordSahara1959',
                 'esriSRDatum_NSWC9Z_2',
                 'esriSRDatum_NTF',
                 'esriSRDatum_NZGD1949',
                 'esriSRDatum_Observatario',
                 'esriSRDatum_OSSN1980',
                 'esriSRDatum_OSGB1936',
                 'esriSRDatum_OSGB1970SN',
                 'esriSRDatum_Padang1884',
                 'esriSRDatum_Palestine1923',
                 'esriSRDatum_PointeNoire',
                 'esriSRDatum_PSAD1956',
                 'esriSRDatum_Pulkovo1942',
                 'esriSRDatum_Pulkovo1995',
                 'esriSRDatum_Qatar',
                 'esriSRDatum_Qatar1948',
                 'esriSRDatum_Qornoq',
                 'esriSRDatum_Rassadiran',
                 'esriSRDatum_RT90',
                 'esriSRDatum_SAD1969',
                 'esriSRDatum_Samboja',
                 'esriSRDatum_SapperHill1943',
                 'esriSRDatum_Schwarzeck',
                 'esriSRDatum_Segora',
                 'esriSRDatum_Serindung',
                 'esriSRDatum_StGeorgeIsland',
                 'esriSRDatum_StLawrenceIsland',
                 'esriSRDatum_StPaulIsland',
                 'esriSRDatum_Stockholm1938',
                 'esriSRDatum_Sudan',
                 'esriSRDatum_Tananarive1925',
                 'esriSRDatum_Tete',
                 'esriSRDatum_Timbalai1948',
                 'esriSRDatum_TM65',
                 'esriSRDatum_TM75',
                 'esriSRDatum_Tokyo',
                 'esriSRDatum_Trinidad1903',
                 'esriSRDatum_TrucialCoast1948',
                 'esriSRDatum_Voirol1875',
                 'esriSRDatum_VoirolUnifie1960',
                 'esriSRDatum_WGS1972',
                 'esriSRDatum_WGS1972BE',
                 'esriSRDatum_WGS1984',
                 'esriSRDatum_Yacare',
                 'esriSRDatum_Yoff',
                 'esriSRDatum_Zanderij',
                 'esriSRDatum_Anguilla1957',
                 'esriSRDatum_Estonia1992',
                 'esriSRDatum_Dominica1945',
                 'esriSRDatum_Grenada1953',
                 'esriSRDatum_NAD1927CGQ77',
                 'esriSRDatum_NAD19271976',
                 'esriSRDatum_PDO1993',
                 'esriSRDatum_StKitts1955',
                 'esriSRDatum_StLucia1955',
                 'esriSRDatum_StVincent1945',
                 'esriSRDatum_European1979',
                 'esriSRDatum_EverestBangladesh',
                 'esriSRDatum_EverestIndiaNepal',
                 'esriSRDatum_Hjorsey1955',
                 'esriSRDatum_HongKong1963',
                 'esriSRDatum_Oman',
                 'esriSRDatum_SouthAsiaSingapore',
                 'esriSRDatum_AyabelleLighthouse',
                 'esriSRDatum_Bissau',
                 'esriSRDatum_Dabola',
                 'esriSRDatum_Point58',
                 'esriSRDatum_BeaconE1945',
                 'esriSRDatum_TernIsland1961',
                 'esriSRDatum_Astro1952',
                 'esriSRDatum_Bellevue',
                 'esriSRDatum_Canton1966',
                 'esriSRDatum_ChathamIsland1971',
                 'esriSRDatum_DOS1968',
                 'esriSRDatum_EasterIsland1967',
                 'esriSRDatum_Guam1963',
                 'esriSRDatum_GUX1',
                 'esriSRDatum_JohnstonIsland1961',
                 'esriSRDatum_Kusaie1951',
                 'esriSRDatum_Midway1961',
                 'esriSRDatum_OldHawaiian',
                 'esriSRDatum_Pitcairn1967',
                 'esriSRDatum_SantoDOS1965',
                 'esriSRDatum_VitiLevu1916',
                 'esriSRDatum_WakeEniwetok1960',
                 'esriSRDatum_WakeIsland1952',
                 'esriSRDatum_Anna1_1965',
                 'esriSRDatum_Gan1970',
                 'esriSRDatum_ISTS073_1969',
                 'esriSRDatum_KerguelenIsland1949',
                 'esriSRDatum_Reunion',
                 'esriSRDatum_Antigua1943',
                 'esriSRDatum_AscensionIsland1958',
                 'esriSRDatum_DOS71_4',
                 'esriSRDatum_CapeCanaveral',
                 'esriSRDatum_FortThomas1955',
                 'esriSRDatum_Graciosa1948',
                 'esriSRDatum_ISTS061_1968',
                 'esriSRDatum_LC5_1961',
                 'esriSRDatum_Montserrat1958',
                 'esriSRDatum_ObservMeteor1939',
                 'esriSRDatum_PicoDeLasNieves',
                 'esriSRDatum_PortoSanto1936',
                 'esriSRDatum_PuertoRico',
                 'esriSRDatum_SaoBraz',
                 'esriSRDatum_SelvagemGrande1938',
                 'esriSRDatum_Tristan1968',
                 'esriSRDatum_Samoa1962',
                 'esriSRDatum_CampArea',
                 'esriSRDatum_DeceptionIsland',
                 'esriSRDatum_GunungSegara',
                 'esriSRDatum_Indian1960',
                 'esriSRDatum_S42Hungary',
                 'esriSRDatum_S_JTSK',
                 'esriSRDatum_AlaskanIslands']
    esriSRDatum_Airy1830 = 6001
    esriSRDatum_ModifiedAiry = 6002
    esriSRDatum_Australian = 6003
    esriSRDatum_Bessel1841 = 6004
    esriSRDatum_ModifiedBessel = 6005
    esriSRDatum_BesselNamibia = 6006
    esriSRDatum_Clarke1858 = 6007
    esriSRDatum_Clarke1866 = 6008
    esriSRDatum_Clarke1866Michigan = 6009
    esriSRDatum_Clarke1880 = 6034
    esriSRDatum_Clarke1880Arc = 6013
    esriSRDatum_Clarke1880Benoit = 6010
    esriSRDatum_Clarke1880IGN = 6011
    esriSRDatum_Clarke1880RGS = 6012
    esriSRDatum_Clarke1880SGA = 6014
    esriSRDatum_Everest1830 = 6042
    esriSRDatum_Everest1937 = 6015
    esriSRDatum_Everest1962 = 6044
    esriSRDatum_Everest1967 = 6016
    esriSRDatum_Everest1975 = 6045
    esriSRDatum_ModifiedEverest = 6018
    esriSRDatum_GEM10C = 6031
    esriSRDatum_GRS1967 = 6036
    esriSRDatum_GRS1980 = 6019
    esriSRDatum_Helmert1906 = 6020
    esriSRDatum_Indonesian = 6021
    esriSRDatum_International1924 = 6022
    esriSRDatum_International1967 = 6023
    esriSRDatum_Krasovksy1940 = 6024
    esriSRDatum_NWL9D = 6025
    esriSRDatum_OSU1986F = 6032
    esriSRDatum_OSU1991A = 6033
    esriSRDatum_Plessis1817 = 6027
    esriSRDatum_AuthalicSphere = 6035
    esriSRDatum_Struve1860 = 6028
    esriSRDatum_WarOffice = 6029
    esriSRDatum_WGS1966 = 6760
    esriSRDatum_Fischer1960 = 106002
    esriSRDatum_Fischer1968 = 106003
    esriSRDatum_ModifiedFischer = 106004
    esriSRDatum_Hough1960 = 106005
    esriSRDatum_ModifiedEverest1969 = 106006
    esriSRDatum_Walbeck = 106007
    esriSRDatum_AuthalicSphereArcInfo = 106008
    esriSRDatum_Abidjan1987 = 6143
    esriSRDatum_Adindan = 6201
    esriSRDatum_Afgooye = 6205
    esriSRDatum_Agadez = 6206
    esriSRDatum_AGD1966 = 6202
    esriSRDatum_AGD1984 = 6203
    esriSRDatum_AinElAbd1970 = 6204
    esriSRDatum_AmersFoort = 6289
    esriSRDatum_Aratu = 6208
    esriSRDatum_Arc1950 = 6209
    esriSRDatum_Arc1960 = 6210
    esriSRDatum_ATF = 6901
    esriSRDatum_ATS1977 = 6122
    esriSRDatum_Barbados1938 = 6212
    esriSRDatum_Batavia = 6211
    esriSRDatum_Beduaram = 6213
    esriSRDatum_Beijing1954 = 6214
    esriSRDatum_Belge1950 = 6215
    esriSRDatum_Belge1972 = 6313
    esriSRDatum_Bermuda1957 = 6216
    esriSRDatum_Bern1898 = 6217
    esriSRDatum_Bern1938 = 6306
    esriSRDatum_Bogota = 6218
    esriSRDatum_BukitRimpah = 6219
    esriSRDatum_Camacupa = 6220
    esriSRDatum_CampoInchauspe = 6221
    esriSRDatum_Cape = 6222
    esriSRDatum_Carthage = 6223
    esriSRDatum_CH1903 = 6149
    esriSRDatum_CH1903Plus = 6150
    esriSRDatum_CHTRF1995 = 6151
    esriSRDatum_Chua = 6224
    esriSRDatum_Conakry1905 = 6315
    esriSRDatum_CorregoAlegre = 6225
    esriSRDatum_CoteDIvoire = 6226
    esriSRDatum_Datum73 = 6274
    esriSRDatum_DeirEzZor = 6227
    esriSRDatum_DealulPiscului1933 = 6316
    esriSRDatum_DealulPiscului1970 = 6317
    esriSRDatum_DHDN = 6314
    esriSRDatum_Douala = 6228
    esriSRDatum_EuropeanDatum1950 = 6230
    esriSRDatum_EuropeanDatum1950ED77 = 6154
    esriSRDatum_EuropeanDatum1987 = 6231
    esriSRDatum_Egypt1907 = 6229
    esriSRDatum_ETRF1989 = 106258
    esriSRDatum_Fahud = 6232
    esriSRDatum_FD1958 = 6132
    esriSRDatum_Gandajika1970 = 6233
    esriSRDatum_Garoua = 6197
    esriSRDatum_GDA1994 = 6283
    esriSRDatum_GGRS1987 = 6121
    esriSRDatum_Greek = 6120
    esriSRDatum_GuyaneFrancaise = 6235
    esriSRDatum_Hanoi1972 = 6147
    esriSRDatum_Hartebeesthoek94 = 6148
    esriSRDatum_HeratNorth = 6255
    esriSRDatum_HitoXVIII1963 = 6254
    esriSRDatum_HuTzuShan = 6236
    esriSRDatum_Hungarian1972 = 6237
    esriSRDatum_Indian1954 = 6239
    esriSRDatum_Indian1975 = 6240
    esriSRDatum_Indonesian1974 = 6238
    esriSRDatum_Israel = 6141
    esriSRDatum_Jamaica1875 = 6241
    esriSRDatum_Jamaica1969 = 6242
    esriSRDatum_Kalianpur1880 = 6243
    esriSRDatum_Kalianpur1937 = 6144
    esriSRDatum_Kalianpur1962 = 6145
    esriSRDatum_Kalianpur1975 = 6146
    esriSRDatum_Kandawala = 6244
    esriSRDatum_Kertau = 6245
    esriSRDatum_KKJ = 6123
    esriSRDatum_KOC = 6246
    esriSRDatum_KUDAMS = 6319
    esriSRDatum_LaCanoa = 6247
    esriSRDatum_Lake = 6249
    esriSRDatum_Leigon = 6250
    esriSRDatum_Liberia1964 = 6251
    esriSRDatum_Lisbon = 6207
    esriSRDatum_Lithuania1994 = 6126
    esriSRDatum_Locodjo1965 = 6142
    esriSRDatum_LomaQuintana = 6288
    esriSRDatum_Lome = 6252
    esriSRDatum_Luzon1911 = 6253
    esriSRDatum_Madrid1870 = 6903
    esriSRDatum_Madzansua = 6128
    esriSRDatum_Mahe1971 = 6256
    esriSRDatum_Makassar = 6257
    esriSRDatum_Malongo1987 = 6259
    esriSRDatum_Manoca = 6260
    esriSRDatum_Massawa = 6262
    esriSRDatum_Merchich = 6261
    esriSRDatum_MGI = 6312
    esriSRDatum_Mhast = 6264
    esriSRDatum_Minna = 6263
    esriSRDatum_MonteMario = 6265
    esriSRDatum_Moznet = 6130
    esriSRDatum_MPoraloko = 6266
    esriSRDatum_NADMichigan = 6268
    esriSRDatum_NAD1927 = 6267
    esriSRDatum_NAD1983 = 6269
    esriSRDatum_NAD1983HARN = 6152
    esriSRDatum_NAD1983CSRS98 = 6140
    esriSRDatum_Nahrwan1967 = 6270
    esriSRDatum_Naparima1972 = 6271
    esriSRDatum_NordDeGuerre = 6902
    esriSRDatum_NGN = 6318
    esriSRDatum_NGO1948 = 6273
    esriSRDatum_NordSahara1959 = 6307
    esriSRDatum_NSWC9Z_2 = 6276
    esriSRDatum_NTF = 6275
    esriSRDatum_NZGD1949 = 6272
    esriSRDatum_Observatario = 6129
    esriSRDatum_OSSN1980 = 6279
    esriSRDatum_OSGB1936 = 6277
    esriSRDatum_OSGB1970SN = 6278
    esriSRDatum_Padang1884 = 6280
    esriSRDatum_Palestine1923 = 6281
    esriSRDatum_PointeNoire = 6282
    esriSRDatum_PSAD1956 = 6248
    esriSRDatum_Pulkovo1942 = 6284
    esriSRDatum_Pulkovo1995 = 6200
    esriSRDatum_Qatar = 6285
    esriSRDatum_Qatar1948 = 6286
    esriSRDatum_Qornoq = 6287
    esriSRDatum_Rassadiran = 6153
    esriSRDatum_RT90 = 6124
    esriSRDatum_SAD1969 = 6618
    esriSRDatum_Samboja = 6125
    esriSRDatum_SapperHill1943 = 6292
    esriSRDatum_Schwarzeck = 6293
    esriSRDatum_Segora = 6294
    esriSRDatum_Serindung = 6295
    esriSRDatum_StGeorgeIsland = 6138
    esriSRDatum_StLawrenceIsland = 6136
    esriSRDatum_StPaulIsland = 6137
    esriSRDatum_Stockholm1938 = 6308
    esriSRDatum_Sudan = 6296
    esriSRDatum_Tananarive1925 = 6297
    esriSRDatum_Tete = 6127
    esriSRDatum_Timbalai1948 = 6298
    esriSRDatum_TM65 = 6299
    esriSRDatum_TM75 = 6300
    esriSRDatum_Tokyo = 6301
    esriSRDatum_Trinidad1903 = 6302
    esriSRDatum_TrucialCoast1948 = 6303
    esriSRDatum_Voirol1875 = 6304
    esriSRDatum_VoirolUnifie1960 = 6305
    esriSRDatum_WGS1972 = 6322
    esriSRDatum_WGS1972BE = 6324
    esriSRDatum_WGS1984 = 6326
    esriSRDatum_Yacare = 6309
    esriSRDatum_Yoff = 6310
    esriSRDatum_Zanderij = 6311
    esriSRDatum_Anguilla1957 = 6600
    esriSRDatum_Estonia1992 = 6133
    esriSRDatum_Dominica1945 = 6602
    esriSRDatum_Grenada1953 = 6603
    esriSRDatum_NAD1927CGQ77 = 6609
    esriSRDatum_NAD19271976 = 6608
    esriSRDatum_PDO1993 = 6134
    esriSRDatum_StKitts1955 = 6605
    esriSRDatum_StLucia1955 = 6606
    esriSRDatum_StVincent1945 = 6607
    esriSRDatum_European1979 = 6668
    esriSRDatum_EverestBangladesh = 106202
    esriSRDatum_EverestIndiaNepal = 106203
    esriSRDatum_Hjorsey1955 = 6658
    esriSRDatum_HongKong1963 = 6738
    esriSRDatum_Oman = 106206
    esriSRDatum_SouthAsiaSingapore = 106207
    esriSRDatum_AyabelleLighthouse = 6713
    esriSRDatum_Bissau = 6165
    esriSRDatum_Dabola = 6155
    esriSRDatum_Point58 = 6620
    esriSRDatum_BeaconE1945 = 6709
    esriSRDatum_TernIsland1961 = 6707
    esriSRDatum_Astro1952 = 6711
    esriSRDatum_Bellevue = 6714
    esriSRDatum_Canton1966 = 6716
    esriSRDatum_ChathamIsland1971 = 6672
    esriSRDatum_DOS1968 = 106218
    esriSRDatum_EasterIsland1967 = 6719
    esriSRDatum_Guam1963 = 6675
    esriSRDatum_GUX1 = 106221
    esriSRDatum_JohnstonIsland1961 = 6725
    esriSRDatum_Kusaie1951 = 6735
    esriSRDatum_Midway1961 = 6727
    esriSRDatum_OldHawaiian = 6135
    esriSRDatum_Pitcairn1967 = 6729
    esriSRDatum_SantoDOS1965 = 6730
    esriSRDatum_VitiLevu1916 = 6731
    esriSRDatum_WakeEniwetok1960 = 6732
    esriSRDatum_WakeIsland1952 = 6733
    esriSRDatum_Anna1_1965 = 6708
    esriSRDatum_Gan1970 = 6684
    esriSRDatum_ISTS073_1969 = 6724
    esriSRDatum_KerguelenIsland1949 = 6698
    esriSRDatum_Reunion = 6626
    esriSRDatum_Antigua1943 = 6601
    esriSRDatum_AscensionIsland1958 = 6712
    esriSRDatum_DOS71_4 = 6710
    esriSRDatum_CapeCanaveral = 6717
    esriSRDatum_FortThomas1955 = 106240
    esriSRDatum_Graciosa1948 = 106241
    esriSRDatum_ISTS061_1968 = 6722
    esriSRDatum_LC5_1961 = 106243
    esriSRDatum_Montserrat1958 = 6604
    esriSRDatum_ObservMeteor1939 = 106245
    esriSRDatum_PicoDeLasNieves = 6728
    esriSRDatum_PortoSanto1936 = 6615
    esriSRDatum_PuertoRico = 6139
    esriSRDatum_SaoBraz = 106249
    esriSRDatum_SelvagemGrande1938 = 6616
    esriSRDatum_Tristan1968 = 6734
    esriSRDatum_Samoa1962 = 6169
    esriSRDatum_CampArea = 6715
    esriSRDatum_DeceptionIsland = 6736
    esriSRDatum_GunungSegara = 6613
    esriSRDatum_Indian1960 = 6131
    esriSRDatum_S42Hungary = 106257
    esriSRDatum_S_JTSK = 6156
    esriSRDatum_AlaskanIslands = 106260

class esriSRDatum2Type(Enumeration):
    __slots__ = ['esriSRDatum_Estonia1937',
                 'esriSRDatum_Hermannskogel',
                 'esriSRDatum_SierraLeone1960',
                 'esriSRDatum_HongKong1980',
                 'esriSRDatum_LisboaBessel',
                 'esriSRDatum_LisboaHayford',
                 'esriSRDatum_RGF1993',
                 'esriSRDatum_NZGD_2000',
                 'esriSRDatum_Clarke1866AuthalicSphere',
                 'esriSRDatum_Voirol1879',
                 'esriSRDatum_SIRGAS2000',
                 'esriSRDatum_Vientiane1982',
                 'esriSRDatum_Lao1993',
                 'esriSRDatum_Lao1997',
                 'esriSRDatum_Jouik1961',
                 'esriSRDatum_Nouakchott1965',
                 'esriSRDatum_Mauritania1999',
                 'esriSRDatum_Gulshan303',
                 'esriSRDatum_D48',
                 'esriSRDatum_Ocotepeque1935',
                 'esriSRDatum_JAD2001',
                 'esriSRDatum_PRJ1992',
                 'esriSRDatum_MAGNA',
                 'esriSRDatum_RGPF',
                 'esriSRDatum_FatuIva1972',
                 'esriSRDatum_IGN63HivaOa',
                 'esriSRDatum_Tahiti1979',
                 'esriSRDatum_Moorea1987',
                 'esriSRDatum_Maupiti1983',
                 'esriSRDatum_Nakhl_e_Ghanem',
                 'esriSRDatum_POSGAR94',
                 'esriSRDatum_Katanga1955',
                 'esriSRDatum_Kasai1953',
                 'esriSRDatum_IGC1962_6th_Parallel_S',
                 'esriSRDatum_IGCB1955',
                 'esriSRDatum_MHAST1951',
                 'esriSRDatum_MHAST_Onshore',
                 'esriSRDatum_MHAST_Offshore',
                 'esriSRDatum_EgyptGulfSuez_S650TL',
                 'esriSRDatum_Fiji1986',
                 'esriSRDatum_Fiji1956',
                 'esriSRDatum_GrandCayman1959',
                 'esriSRDatum_LittleCayman1961',
                 'esriSRDatum_Korea2000',
                 'esriSRDatum_HongKong1963_67',
                 'esriSRDatum_GDM2000',
                 'esriSRDatum_TWD1967',
                 'esriSRDatum_TWD1997',
                 'esriSRDatum_AuthalicSphere_GRS1980',
                 'esriSRDatum_AuthalicSphere_Intl1924',
                 'esriSRDatum_Hughes1980',
                 'esriSRDatum_NAD1983_CSRS',
                 'esriSRDatum_LePouce1934',
                 'esriSRDatum_IGNAstro1960',
                 'esriSRDatum_Solomon1968',
                 'esriSRDatum_PZ1990',
                 'esriSRDatum_FaroeDatum1954',
                 'esriSRDatum_Karbala1979Polservice',
                 'esriSRDatum_Nahrwan1934',
                 'esriSRDatum_Rauenberg1983',
                 'esriSRDatum_Potsdam1983',
                 'esriSRDatum_Greenland1996',
                 'esriSRDatum_VanuaLevu1915',
                 'esriSRDatum_RGNC1991_93',
                 'esriSRDatum_fk89',
                 'esriSRDatum_LibyanGeodeticDatum2006',
                 'esriSRDatum_DatumGeodesiNasional1995',
                 'esriSRDatum_Vietnam2000',
                 'esriSRDatum_SVY21',
                 'esriSRDatum_NAD1983_NSRS2007',
                 'esriSRDatum_ITRF2005',
                 'esriSRDatum_MajorAuxSphere_WGS1984']
    esriSRDatum_Estonia1937 = 106101
    esriSRDatum_Hermannskogel = 106102
    esriSRDatum_SierraLeone1960 = 106103
    esriSRDatum_HongKong1980 = 6611
    esriSRDatum_LisboaBessel = 106262
    esriSRDatum_LisboaHayford = 106263
    esriSRDatum_RGF1993 = 6171
    esriSRDatum_NZGD_2000 = 6167
    esriSRDatum_Clarke1866AuthalicSphere = 6052
    esriSRDatum_Voirol1879 = 6671
    esriSRDatum_SIRGAS2000 = 6674
    esriSRDatum_Vientiane1982 = 6676
    esriSRDatum_Lao1993 = 6677
    esriSRDatum_Lao1997 = 6678
    esriSRDatum_Jouik1961 = 6679
    esriSRDatum_Nouakchott1965 = 6680
    esriSRDatum_Mauritania1999 = 6702
    esriSRDatum_Gulshan303 = 6682
    esriSRDatum_D48 = 106278
    esriSRDatum_Ocotepeque1935 = 1070
    esriSRDatum_JAD2001 = 6758
    esriSRDatum_PRJ1992 = 6683
    esriSRDatum_MAGNA = 6686
    esriSRDatum_RGPF = 6687
    esriSRDatum_FatuIva1972 = 6688
    esriSRDatum_IGN63HivaOa = 6689
    esriSRDatum_Tahiti1979 = 6690
    esriSRDatum_Moorea1987 = 6691
    esriSRDatum_Maupiti1983 = 6692
    esriSRDatum_Nakhl_e_Ghanem = 6693
    esriSRDatum_POSGAR94 = 6694
    esriSRDatum_Katanga1955 = 6695
    esriSRDatum_Kasai1953 = 6696
    esriSRDatum_IGC1962_6th_Parallel_S = 6697
    esriSRDatum_IGCB1955 = 6701
    esriSRDatum_MHAST1951 = 6703
    esriSRDatum_MHAST_Onshore = 6704
    esriSRDatum_MHAST_Offshore = 6705
    esriSRDatum_EgyptGulfSuez_S650TL = 6706
    esriSRDatum_Fiji1986 = 6720
    esriSRDatum_Fiji1956 = 6721
    esriSRDatum_GrandCayman1959 = 6723
    esriSRDatum_LittleCayman1961 = 6726
    esriSRDatum_Korea2000 = 6737
    esriSRDatum_HongKong1963_67 = 6739
    esriSRDatum_GDM2000 = 6742
    esriSRDatum_TWD1967 = 1025
    esriSRDatum_TWD1997 = 1026
    esriSRDatum_AuthalicSphere_GRS1980 = 6047
    esriSRDatum_AuthalicSphere_Intl1924 = 6053
    esriSRDatum_Hughes1980 = 6054
    esriSRDatum_NAD1983_CSRS = 6140
    esriSRDatum_LePouce1934 = 6699
    esriSRDatum_IGNAstro1960 = 6700
    esriSRDatum_Solomon1968 = 6718
    esriSRDatum_PZ1990 = 6740
    esriSRDatum_FaroeDatum1954 = 6741
    esriSRDatum_Karbala1979Polservice = 6743
    esriSRDatum_Nahrwan1934 = 6744
    esriSRDatum_Rauenberg1983 = 6745
    esriSRDatum_Potsdam1983 = 6746
    esriSRDatum_Greenland1996 = 6747
    esriSRDatum_VanuaLevu1915 = 6748
    esriSRDatum_RGNC1991_93 = 6749
    esriSRDatum_fk89 = 6753
    esriSRDatum_LibyanGeodeticDatum2006 = 6754
    esriSRDatum_DatumGeodesiNasional1995 = 6755
    esriSRDatum_Vietnam2000 = 6756
    esriSRDatum_SVY21 = 6757
    esriSRDatum_NAD1983_NSRS2007 = 6759
    esriSRDatum_ITRF2005 = 6896
    esriSRDatum_MajorAuxSphere_WGS1984 = 6055

class esriSRPrimeMType(Enumeration):
    __slots__ = ['esriSRPrimeM_Greenwich',
                 'esriSRPrimeM_Athens',
                 'esriSRPrimeM_Bern',
                 'esriSRPrimeM_Bogota',
                 'esriSRPrimeM_Brussels',
                 'esriSRPrimeM_Ferro',
                 'esriSRPrimeM_Jakarta',
                 'esriSRPrimeM_Lisbon',
                 'esriSRPrimeM_Madrid',
                 'esriSRPrimeM_Oslo',
                 'esriSRPrimeM_Paris',
                 'esriSRPrimeM_Rome',
                 'esriSRPrimeM_Stockholm']
    esriSRPrimeM_Greenwich = 8901
    esriSRPrimeM_Athens = 8912
    esriSRPrimeM_Bern = 8907
    esriSRPrimeM_Bogota = 8904
    esriSRPrimeM_Brussels = 8910
    esriSRPrimeM_Ferro = 8909
    esriSRPrimeM_Jakarta = 8908
    esriSRPrimeM_Lisbon = 8902
    esriSRPrimeM_Madrid = 8905
    esriSRPrimeM_Oslo = 8913
    esriSRPrimeM_Paris = 8903
    esriSRPrimeM_Rome = 8906
    esriSRPrimeM_Stockholm = 8911

class esriSRProjectionType(Enumeration):
    __slots__ = ['esriSRProjection_PlateCarree',
                 'esriSRProjection_EquidistantCylindrical',
                 'esriSRProjection_MillerCylindrical',
                 'esriSRProjection_Mercator',
                 'esriSRProjection_GaussKruger',
                 'esriSRProjection_TransverseMercator',
                 'esriSRProjection_Albers',
                 'esriSRProjection_Sinusoidal',
                 'esriSRProjection_Mollweide',
                 'esriSRProjection_EckertVI',
                 'esriSRProjection_EckertV',
                 'esriSRProjection_EckertIV',
                 'esriSRProjection_EckertIII',
                 'esriSRProjection_EckertII',
                 'esriSRProjection_EckertI',
                 'esriSRProjection_GallStereographic',
                 'esriSRProjection_Behrmann',
                 'esriSRProjection_WinkelI',
                 'esriSRProjection_WinkelII',
                 'esriSRProjection_LambertConformalConic',
                 'esriSRProjection_Polyconic',
                 'esriSRProjection_QuarticAuthalic',
                 'esriSRProjection_Loximuthal',
                 'esriSRProjection_Bonne',
                 'esriSRProjection_HotineTwoPointNatOrigin',
                 'esriSRProjection_HotineTwoPointerCenter',
                 'esriSRProjection_HotineAzimuthNatOrigin',
                 'esriSRProjection_HotineAzimuthCenter',
                 'esriSRProjection_Stereographic',
                 'esriSRProjection_EquidistantConic',
                 'esriSRProjection_Cassini',
                 'esriSRProjection_VanDerGrintenI',
                 'esriSRProjection_Robinson',
                 'esriSRProjection_TwoPointEquidistant',
                 'esriSRProjection_AzimuthalEquidistant',
                 'esriSRProjection_LambertAzimuthal',
                 'esriSRProjection_CylindricalEqualArea',
                 'esriSRProjection_DoubleStereographic']
    esriSRProjection_PlateCarree = 43001
    esriSRProjection_EquidistantCylindrical = 43002
    esriSRProjection_MillerCylindrical = 43003
    esriSRProjection_Mercator = 43004
    esriSRProjection_GaussKruger = 43005
    esriSRProjection_TransverseMercator = 43006
    esriSRProjection_Albers = 43007
    esriSRProjection_Sinusoidal = 43008
    esriSRProjection_Mollweide = 43009
    esriSRProjection_EckertVI = 43010
    esriSRProjection_EckertV = 43011
    esriSRProjection_EckertIV = 43012
    esriSRProjection_EckertIII = 43013
    esriSRProjection_EckertII = 43014
    esriSRProjection_EckertI = 43015
    esriSRProjection_GallStereographic = 43016
    esriSRProjection_Behrmann = 43017
    esriSRProjection_WinkelI = 43018
    esriSRProjection_WinkelII = 43019
    esriSRProjection_LambertConformalConic = 43020
    esriSRProjection_Polyconic = 43021
    esriSRProjection_QuarticAuthalic = 43022
    esriSRProjection_Loximuthal = 43023
    esriSRProjection_Bonne = 43024
    esriSRProjection_HotineTwoPointNatOrigin = 43025
    esriSRProjection_HotineTwoPointerCenter = 43035
    esriSRProjection_HotineAzimuthNatOrigin = 43036
    esriSRProjection_HotineAzimuthCenter = 43037
    esriSRProjection_Stereographic = 43026
    esriSRProjection_EquidistantConic = 43027
    esriSRProjection_Cassini = 43028
    esriSRProjection_VanDerGrintenI = 43029
    esriSRProjection_Robinson = 43030
    esriSRProjection_TwoPointEquidistant = 43031
    esriSRProjection_AzimuthalEquidistant = 43032
    esriSRProjection_LambertAzimuthal = 43033
    esriSRProjection_CylindricalEqualArea = 43034
    esriSRProjection_DoubleStereographic = 43038

class esriSRProjection2Type(Enumeration):
    __slots__ = ['esriSRProjection_NewZealandMapGrid',
                 'esriSRProjection_Krovak']
    esriSRProjection_NewZealandMapGrid = 43040
    esriSRProjection_Krovak = 43039

class esriSRProjection3Type(Enumeration):
    __slots__ = ['esriSRProjection_Aitoff',
                 'esriSRProjection_HammerAitoff',
                 'esriSRProjection_CrasterParabolic',
                 'esriSRProjection_WinkelTripel',
                 'esriSRProjection_Times',
                 'esriSRProjection_Gnomonic',
                 'esriSRProjection_Orthographic',
                 'esriSRProjection_FlatPolarQuartic',
                 'esriSRProjection_VerticalNearSidePerspective']
    esriSRProjection_Aitoff = 43043
    esriSRProjection_HammerAitoff = 43044
    esriSRProjection_CrasterParabolic = 43046
    esriSRProjection_WinkelTripel = 43042
    esriSRProjection_Times = 43048
    esriSRProjection_Gnomonic = 43047
    esriSRProjection_Orthographic = 43041
    esriSRProjection_FlatPolarQuartic = 43045
    esriSRProjection_VerticalNearSidePerspective = 43049

class esriSRParameterType(Enumeration):
    __slots__ = ['esriSRParameter_FalseEasting',
                 'esriSRParameter_FalseNorthing',
                 'esriSRParameter_ScaleFactor',
                 'esriSRParameter_Azimuth',
                 'esriSRParameter_CentralMeridian',
                 'esriSRParameter_LongitudeOfOrigin',
                 'esriSRParameter_LongitudeOfCenter',
                 'esriSRParameter_LongitudeOf1st',
                 'esriSRParameter_LongitudeOf2nd',
                 'esriSRParameter_CentralParallel',
                 'esriSRParameter_LatitudeOfOrigin',
                 'esriSRParameter_LatitudeOfCenter',
                 'esriSRParameter_StandardParallel1',
                 'esriSRParameter_StandardParallel2',
                 'esriSRParameter_LatitudeOf1st',
                 'esriSRParameter_LatitudeOf2nd',
                 'esriSRParameter_XAxisTranslation',
                 'esriSRParameter_YAxisTranslation',
                 'esriSRParameter_ZAxisTranslation',
                 'esriSRParameter_XAxisRotation',
                 'esriSRParameter_YAxisRotation',
                 'esriSRParameter_ZAxisRotation',
                 'esriSRParameter_ScaleDifference',
                 'esriSRParameter_NameDataset',
                 'esriSRParameter_ZShift',
                 'esriSRParameter_ZPositiveDirection']
    esriSRParameter_FalseEasting = 100001
    esriSRParameter_FalseNorthing = 100002
    esriSRParameter_ScaleFactor = 100003
    esriSRParameter_Azimuth = 100004
    esriSRParameter_CentralMeridian = 100010
    esriSRParameter_LongitudeOfOrigin = 100011
    esriSRParameter_LongitudeOfCenter = 100012
    esriSRParameter_LongitudeOf1st = 100013
    esriSRParameter_LongitudeOf2nd = 100014
    esriSRParameter_CentralParallel = 100020
    esriSRParameter_LatitudeOfOrigin = 100021
    esriSRParameter_LatitudeOfCenter = 100022
    esriSRParameter_StandardParallel1 = 100025
    esriSRParameter_StandardParallel2 = 100026
    esriSRParameter_LatitudeOf1st = 100023
    esriSRParameter_LatitudeOf2nd = 100024
    esriSRParameter_XAxisTranslation = 100040
    esriSRParameter_YAxisTranslation = 100041
    esriSRParameter_ZAxisTranslation = 100042
    esriSRParameter_XAxisRotation = 100043
    esriSRParameter_YAxisRotation = 100044
    esriSRParameter_ZAxisRotation = 100045
    esriSRParameter_ScaleDifference = 100046
    esriSRParameter_NameDataset = 100047
    esriSRParameter_ZShift = 100006
    esriSRParameter_ZPositiveDirection = 100007

class esriSRParameter2Type(Enumeration):
    __slots__ = ['esriSRParameter_XScale',
                 'esriSRParameter_YScale',
                 'esriSRParameter_PseudoStandardParallel1',
                 'esriSRParameter_XYPlaneRotation']
    esriSRParameter_XScale = 100037
    esriSRParameter_YScale = 100038
    esriSRParameter_PseudoStandardParallel1 = 100027
    esriSRParameter_XYPlaneRotation = 100039

class esriSRParameter3Type(Enumeration):
    __slots__ = ['esriSRParameter_Height']
    esriSRParameter_Height = 100005

class esriSRGeoCSType(Enumeration):
    __slots__ = ['esriSRGeoCS_Airy1830',
                 'esriSRGeoCS_ModifiedAiry',
                 'esriSRGeoCS_ATS1977',
                 'esriSRGeoCS_Australian',
                 'esriSRGeoCS_Bessel1841',
                 'esriSRGeoCS_ModifiedBessel',
                 'esriSRGeoCS_BesselNamibia',
                 'esriSRGeoCS_Clarke1858',
                 'esriSRGeoCS_Clarke1866',
                 'esriSRGeoCS_Clarke1866Michigan',
                 'esriSRGeoCS_Clarke1880',
                 'esriSRGeoCS_Clarke1880Arc',
                 'esriSRGeoCS_Clarke1880Benoit',
                 'esriSRGeoCS_Clarke1880IGN',
                 'esriSRGeoCS_Clarke1880RGS',
                 'esriSRGeoCS_Clarke1880SGA',
                 'esriSRGeoCS_Everest1830',
                 'esriSRGeoCS_Everest1962',
                 'esriSRGeoCS_Everest1967',
                 'esriSRGeoCS_Everest1975',
                 'esriSRGeoCS_ModifiedEverest',
                 'esriSRGeoCS_GEM10C',
                 'esriSRGeoCS_GRS1967',
                 'esriSRGeoCS_GRS1980',
                 'esriSRGeoCS_Helmert1906',
                 'esriSRGeoCS_Indonesian',
                 'esriSRGeoCS_International1924',
                 'esriSRGeoCS_International1967',
                 'esriSRGeoCS_Krasovsky1940',
                 'esriSRGeoCS_NWL9D',
                 'esriSRGeoCS_OSU1986F',
                 'esriSRGeoCS_OSU1991A',
                 'esriSRGeoCS_Plessis1817',
                 'esriSRGeoCS_Authalicsphere',
                 'esriSRGeoCS_Struve1860',
                 'esriSRGeoCS_WarOffice',
                 'esriSRGeoCS_WGS1966',
                 'esriSRGeoCS_Fischer1960',
                 'esriSRGeoCS_Fischer1968',
                 'esriSRGeoCS_ModifiedFischer',
                 'esriSRGeoCS_Hough1960',
                 'esriSRGeoCS_ModifiedEverest1969',
                 'esriSRGeoCS_Walbeck',
                 'esriSRGeoCS_AuthalicsphereARCINFO',
                 'esriSRGeoCS_AssumedGeographic1',
                 'esriSRGeoCS_Abidjan1987',
                 'esriSRGeoCS_Adindan',
                 'esriSRGeoCS_Afgooye',
                 'esriSRGeoCS_Agadez',
                 'esriSRGeoCS_AGD1966',
                 'esriSRGeoCS_AGD1984',
                 'esriSRGeoCS_AinElAbd1970',
                 'esriSRGeoCS_Amersfoort',
                 'esriSRGeoCS_Aratu',
                 'esriSRGeoCS_Arc1950',
                 'esriSRGeoCS_Arc1960',
                 'esriSRGeoCS_ATFParis',
                 'esriSRGeoCS_Barbados1938',
                 'esriSRGeoCS_Batavia',
                 'esriSRGeoCS_BataviaJakarta',
                 'esriSRGeoCS_Beduaram',
                 'esriSRGeoCS_Beijing1954',
                 'esriSRGeoCS_Belge1950',
                 'esriSRGeoCS_Belge1950Brussels',
                 'esriSRGeoCS_Belge1972',
                 'esriSRGeoCS_Bermuda1957',
                 'esriSRGeoCS_Bern1898Bern',
                 'esriSRGeoCS_Bern1938',
                 'esriSRGeoCS_Bogota',
                 'esriSRGeoCS_BogotaBogota',
                 'esriSRGeoCS_BukitRimpah',
                 'esriSRGeoCS_Camacupa',
                 'esriSRGeoCS_CampoInchauspe',
                 'esriSRGeoCS_Cape',
                 'esriSRGeoCS_Carthage',
                 'esriSRGeoCS_CarthageDegrees',
                 'esriSRGeoCS_CH1903',
                 'esriSRGeoCS_CH1903Plus',
                 'esriSRGeoCS_CHTRF1995',
                 'esriSRGeoCS_CHUA',
                 'esriSRGeoCS_Conakry1905',
                 'esriSRGeoCS_CorregoAlegre',
                 'esriSRGeoCS_CoteDIvoire',
                 'esriSRGeoCS_Datum73',
                 'esriSRGeoCS_DealulPiscului1933',
                 'esriSRGeoCS_DealulPiscului1970',
                 'esriSRGeoCS_DeirezZor',
                 'esriSRGeoCS_DHDN',
                 'esriSRGeoCS_Douala',
                 'esriSRGeoCS_EuropeanDatum1950',
                 'esriSRGeoCS_EuropeanDatum1950ED77',
                 'esriSRGeoCS_EuropeanDatum1987',
                 'esriSRGeoCS_Egypt1907',
                 'esriSRGeoCS_ETRF1989',
                 'esriSRGeoCS_Fahud',
                 'esriSRGeoCS_Gandajika1970',
                 'esriSRGeoCS_Garoua',
                 'esriSRGeoCS_GDA1994',
                 'esriSRGeoCS_GGRS1987',
                 'esriSRGeoCS_Greek',
                 'esriSRGeoCS_GreekAthens',
                 'esriSRGeoCS_GuyaneFrancaise',
                 'esriSRGeoCS_Hanoi1972',
                 'esriSRGeoCS_Hartebeesthoek1994',
                 'esriSRGeoCS_HeratNorth',
                 'esriSRGeoCS_HitoXVIII1963',
                 'esriSRGeoCS_HuTzuShan',
                 'esriSRGeoCS_Hungarian1972',
                 'esriSRGeoCS_Indian1954',
                 'esriSRGeoCS_Indian1975',
                 'esriSRGeoCS_Indonesian1974',
                 'esriSRGeoCS_Israel',
                 'esriSRGeoCS_Jamaica1875',
                 'esriSRGeoCS_Jamaica1969',
                 'esriSRGeoCS_Kalianpur1880',
                 'esriSRGeoCS_Kalianpur1937',
                 'esriSRGeoCS_Kalianpur1962',
                 'esriSRGeoCS_Kalianpur1975',
                 'esriSRGeoCS_Kandawala',
                 'esriSRGeoCS_Kertau',
                 'esriSRGeoCS_KKJ',
                 'esriSRGeoCS_KOC',
                 'esriSRGeoCS_KUDAMS',
                 'esriSRGeoCS_LaCanoa',
                 'esriSRGeoCS_Lake',
                 'esriSRGeoCS_Leigon',
                 'esriSRGeoCS_Liberia1964',
                 'esriSRGeoCS_Lisbon',
                 'esriSRGeoCS_LisbonLisbon',
                 'esriSRGeoCS_Locodjo1965',
                 'esriSRGeoCS_LomaQuintana',
                 'esriSRGeoCS_Lome',
                 'esriSRGeoCS_Luzon1911',
                 'esriSRGeoCS_Mahe1971',
                 'esriSRGeoCS_Makassar',
                 'esriSRGeoCS_MakassarJakarta',
                 'esriSRGeoCS_Malongo1987',
                 'esriSRGeoCS_Manoca',
                 'esriSRGeoCS_Massawa',
                 'esriSRGeoCS_Merchich',
                 'esriSRGeoCS_MerchichDegree',
                 'esriSRGeoCS_MGI',
                 'esriSRGeoCS_MGIFerro',
                 'esriSRGeoCS_Mhast',
                 'esriSRGeoCS_Minna',
                 'esriSRGeoCS_MonteMario',
                 'esriSRGeoCS_MonteMarioRome',
                 'esriSRGeoCS_MPoraloko',
                 'esriSRGeoCS_NADMichigan',
                 'esriSRGeoCS_NAD1927',
                 'esriSRGeoCS_NAD1983',
                 'esriSRGeoCS_NAD1983HARN',
                 'esriSRGeoCS_NAD1983CSRS98',
                 'esriSRGeoCS_Nahrwan1967',
                 'esriSRGeoCS_Naparima1972',
                 'esriSRGeoCS_NorddeGuerreParis',
                 'esriSRGeoCS_NGN',
                 'esriSRGeoCS_NGO1948',
                 'esriSRGeoCS_NGO1948Oslo',
                 'esriSRGeoCS_NordSahara1959',
                 'esriSRGeoCS_NSWC9Z_2',
                 'esriSRGeoCS_NTF',
                 'esriSRGeoCS_NTFParis',
                 'esriSRGeoCS_NZGD1949',
                 'esriSRGeoCS_OSSN1980',
                 'esriSRGeoCS_OSGB1936',
                 'esriSRGeoCS_OSGB1970SN',
                 'esriSRGeoCS_Padang1884',
                 'esriSRGeoCS_Padang1884Jakarta',
                 'esriSRGeoCS_Palestine1923',
                 'esriSRGeoCS_PointeNoire',
                 'esriSRGeoCS_PSAD1956',
                 'esriSRGeoCS_Pulkovo1942',
                 'esriSRGeoCS_Pulkovo1995',
                 'esriSRGeoCS_Qatar',
                 'esriSRGeoCS_Qatar1948',
                 'esriSRGeoCS_Qornoq',
                 'esriSRGeoCS_Rassadiran',
                 'esriSRGeoCS_RT38',
                 'esriSRGeoCS_RT38Stockholm',
                 'esriSRGeoCS_SAD1969',
                 'esriSRGeoCS_SapperHill1943',
                 'esriSRGeoCS_Schwarzeck',
                 'esriSRGeoCS_Segora',
                 'esriSRGeoCS_Serindung',
                 'esriSRGeoCS_Sudan',
                 'esriSRGeoCS_Tananarive1925',
                 'esriSRGeoCS_Tananarive1925Paris',
                 'esriSRGeoCS_Timbalai1948',
                 'esriSRGeoCS_TM65',
                 'esriSRGeoCS_TM75',
                 'esriSRGeoCS_Tokyo',
                 'esriSRGeoCS_Trinidad1903',
                 'esriSRGeoCS_TrucialCoast1948',
                 'esriSRGeoCS_Voirol1875',
                 'esriSRGeoCS_Voirol1875Degree',
                 'esriSRGeoCS_Voirol1875Paris',
                 'esriSRGeoCS_VoirolUnifie1960',
                 'esriSRGeoCS_VoirolUnifie1960Degree',
                 'esriSRGeoCS_VoirolUnifie1960Paris',
                 'esriSRGeoCS_WGS1972',
                 'esriSRGeoCS_WGS1972BE',
                 'esriSRGeoCS_WGS1984',
                 'esriSRGeoCS_Yacare',
                 'esriSRGeoCS_Yoff',
                 'esriSRGeoCS_Zanderij',
                 'esriSRGeoCS_CarthageParis',
                 'esriSRGeoCS_FD1958',
                 'esriSRGeoCS_LKS1994',
                 'esriSRGeoCS_Madrid1870Madrid',
                 'esriSRGeoCS_Madzansua',
                 'esriSRGeoCS_Moznet',
                 'esriSRGeoCS_Observatario',
                 'esriSRGeoCS_RT90',
                 'esriSRGeoCS_Samboja',
                 'esriSRGeoCS_Tete',
                 'esriSRGeoCS_Estonia1992',
                 'esriSRGeoCS_PDO1993',
                 'esriSRGeoCS_Anguilla1957',
                 'esriSRGeoCS_Antigua1943',
                 'esriSRGeoCS_Dominica1945',
                 'esriSRGeoCS_Grenada1953',
                 'esriSRGeoCS_StKitts1955',
                 'esriSRGeoCS_StLucia1955',
                 'esriSRGeoCS_StVincent1945',
                 'esriSRGeoCS_NAD1927Def1976',
                 'esriSRGeoCS_NAD1927CGQ77',
                 'esriSRGeoCS_StGeorgeIsland',
                 'esriSRGeoCS_StLawrenceIsland',
                 'esriSRGeoCS_StPaulIsland',
                 'esriSRGeoCS_European1979',
                 'esriSRGeoCS_EverestBangladesh',
                 'esriSRGeoCS_EverestIndiaNepal',
                 'esriSRGeoCS_Hjorsey1955',
                 'esriSRGeoCS_HongKong1963',
                 'esriSRGeoCS_Oman',
                 'esriSRGeoCS_SouthAsiaSingapore',
                 'esriSRGeoCS_Ayabelle',
                 'esriSRGeoCS_Bissau',
                 'esriSRGeoCS_Dabola',
                 'esriSRGeoCS_Point58',
                 'esriSRGeoCS_BeaconE1945',
                 'esriSRGeoCS_TernIsland1961',
                 'esriSRGeoCS_Astro1952',
                 'esriSRGeoCS_BellevueIGN',
                 'esriSRGeoCS_Canton1966',
                 'esriSRGeoCS_ChathamIsland1971',
                 'esriSRGeoCS_DOS1968',
                 'esriSRGeoCS_EasterIsland1967',
                 'esriSRGeoCS_Guam1963',
                 'esriSRGeoCS_GUX1',
                 'esriSRGeoCS_JohnstonIsland1961',
                 'esriSRGeoCS_Kusaie1951',
                 'esriSRGeoCS_Midway1961',
                 'esriSRGeoCS_OldHawaiian',
                 'esriSRGeoCS_Pitcairn1967',
                 'esriSRGeoCS_SantoDOS1965',
                 'esriSRGeoCS_VitiLevu1916',
                 'esriSRGeoCS_WakeEniwetok1960',
                 'esriSRGeoCS_WakeIsland1952',
                 'esriSRGeoCS_Anna1_1965',
                 'esriSRGeoCS_Gan1970',
                 'esriSRGeoCS_ISTS073_1969',
                 'esriSRGeoCS_KerguelenIsland1949',
                 'esriSRGeoCS_Reunion',
                 'esriSRGeoCS_AscensionIsland1958',
                 'esriSRGeoCS_DOS71_4',
                 'esriSRGeoCS_CapeCanaveral',
                 'esriSRGeoCS_FortThomas1955',
                 'esriSRGeoCS_Graciosa1948',
                 'esriSRGeoCS_ISTS061_1968',
                 'esriSRGeoCS_LC5_1961',
                 'esriSRGeoCS_Montserrat1958',
                 'esriSRGeoCS_ObservMeteor1939',
                 'esriSRGeoCS_PicodeLasNieves',
                 'esriSRGeoCS_PortoSanto1936',
                 'esriSRGeoCS_PuertoRico',
                 'esriSRGeoCS_SaoBraz',
                 'esriSRGeoCS_SelvagemGrande1938',
                 'esriSRGeoCS_Tristan1968',
                 'esriSRGeoCS_Samoa1962',
                 'esriSRGeoCS_CampArea',
                 'esriSRGeoCS_DeceptionIsland',
                 'esriSRGeoCS_GunungSegara',
                 'esriSRGeoCS_Indian1960',
                 'esriSRGeoCS_S_42Hungary',
                 'esriSRGeoCS_S_JTSK',
                 'esriSRGeoCS_AlaskanIslands']
    esriSRGeoCS_Airy1830 = 4001
    esriSRGeoCS_ModifiedAiry = 4002
    esriSRGeoCS_ATS1977 = 4122
    esriSRGeoCS_Australian = 4003
    esriSRGeoCS_Bessel1841 = 4004
    esriSRGeoCS_ModifiedBessel = 4005
    esriSRGeoCS_BesselNamibia = 4006
    esriSRGeoCS_Clarke1858 = 4007
    esriSRGeoCS_Clarke1866 = 4008
    esriSRGeoCS_Clarke1866Michigan = 4009
    esriSRGeoCS_Clarke1880 = 4034
    esriSRGeoCS_Clarke1880Arc = 4013
    esriSRGeoCS_Clarke1880Benoit = 4010
    esriSRGeoCS_Clarke1880IGN = 4011
    esriSRGeoCS_Clarke1880RGS = 4012
    esriSRGeoCS_Clarke1880SGA = 4014
    esriSRGeoCS_Everest1830 = 4042
    esriSRGeoCS_Everest1962 = 4044
    esriSRGeoCS_Everest1967 = 4016
    esriSRGeoCS_Everest1975 = 4045
    esriSRGeoCS_ModifiedEverest = 4018
    esriSRGeoCS_GEM10C = 4031
    esriSRGeoCS_GRS1967 = 4036
    esriSRGeoCS_GRS1980 = 4019
    esriSRGeoCS_Helmert1906 = 4020
    esriSRGeoCS_Indonesian = 4021
    esriSRGeoCS_International1924 = 4022
    esriSRGeoCS_International1967 = 104023
    esriSRGeoCS_Krasovsky1940 = 4024
    esriSRGeoCS_NWL9D = 4025
    esriSRGeoCS_OSU1986F = 4032
    esriSRGeoCS_OSU1991A = 4033
    esriSRGeoCS_Plessis1817 = 4027
    esriSRGeoCS_Authalicsphere = 4035
    esriSRGeoCS_Struve1860 = 4028
    esriSRGeoCS_WarOffice = 4029
    esriSRGeoCS_WGS1966 = 4760
    esriSRGeoCS_Fischer1960 = 37002
    esriSRGeoCS_Fischer1968 = 37003
    esriSRGeoCS_ModifiedFischer = 37004
    esriSRGeoCS_Hough1960 = 37005
    esriSRGeoCS_ModifiedEverest1969 = 37006
    esriSRGeoCS_Walbeck = 37007
    esriSRGeoCS_AuthalicsphereARCINFO = 37008
    esriSRGeoCS_AssumedGeographic1 = 104000
    esriSRGeoCS_Abidjan1987 = 4143
    esriSRGeoCS_Adindan = 4201
    esriSRGeoCS_Afgooye = 4205
    esriSRGeoCS_Agadez = 4206
    esriSRGeoCS_AGD1966 = 4202
    esriSRGeoCS_AGD1984 = 4203
    esriSRGeoCS_AinElAbd1970 = 4204
    esriSRGeoCS_Amersfoort = 4289
    esriSRGeoCS_Aratu = 4208
    esriSRGeoCS_Arc1950 = 4209
    esriSRGeoCS_Arc1960 = 4210
    esriSRGeoCS_ATFParis = 4901
    esriSRGeoCS_Barbados1938 = 4212
    esriSRGeoCS_Batavia = 4211
    esriSRGeoCS_BataviaJakarta = 4813
    esriSRGeoCS_Beduaram = 4213
    esriSRGeoCS_Beijing1954 = 4214
    esriSRGeoCS_Belge1950 = 4215
    esriSRGeoCS_Belge1950Brussels = 4809
    esriSRGeoCS_Belge1972 = 4313
    esriSRGeoCS_Bermuda1957 = 4216
    esriSRGeoCS_Bern1898Bern = 4801
    esriSRGeoCS_Bern1938 = 4306
    esriSRGeoCS_Bogota = 4218
    esriSRGeoCS_BogotaBogota = 4802
    esriSRGeoCS_BukitRimpah = 4219
    esriSRGeoCS_Camacupa = 4220
    esriSRGeoCS_CampoInchauspe = 4221
    esriSRGeoCS_Cape = 4222
    esriSRGeoCS_Carthage = 4223
    esriSRGeoCS_CarthageDegrees = 4223
    esriSRGeoCS_CH1903 = 4149
    esriSRGeoCS_CH1903Plus = 4150
    esriSRGeoCS_CHTRF1995 = 4151
    esriSRGeoCS_CHUA = 4224
    esriSRGeoCS_Conakry1905 = 4315
    esriSRGeoCS_CorregoAlegre = 4225
    esriSRGeoCS_CoteDIvoire = 4226
    esriSRGeoCS_Datum73 = 4274
    esriSRGeoCS_DealulPiscului1933 = 4316
    esriSRGeoCS_DealulPiscului1970 = 4317
    esriSRGeoCS_DeirezZor = 4227
    esriSRGeoCS_DHDN = 4314
    esriSRGeoCS_Douala = 4228
    esriSRGeoCS_EuropeanDatum1950 = 4230
    esriSRGeoCS_EuropeanDatum1950ED77 = 4154
    esriSRGeoCS_EuropeanDatum1987 = 4231
    esriSRGeoCS_Egypt1907 = 4229
    esriSRGeoCS_ETRF1989 = 104258
    esriSRGeoCS_Fahud = 4232
    esriSRGeoCS_Gandajika1970 = 4233
    esriSRGeoCS_Garoua = 4197
    esriSRGeoCS_GDA1994 = 4283
    esriSRGeoCS_GGRS1987 = 4121
    esriSRGeoCS_Greek = 4120
    esriSRGeoCS_GreekAthens = 4815
    esriSRGeoCS_GuyaneFrancaise = 4235
    esriSRGeoCS_Hanoi1972 = 4147
    esriSRGeoCS_Hartebeesthoek1994 = 4148
    esriSRGeoCS_HeratNorth = 4255
    esriSRGeoCS_HitoXVIII1963 = 4254
    esriSRGeoCS_HuTzuShan = 4236
    esriSRGeoCS_Hungarian1972 = 4237
    esriSRGeoCS_Indian1954 = 4239
    esriSRGeoCS_Indian1975 = 4240
    esriSRGeoCS_Indonesian1974 = 4238
    esriSRGeoCS_Israel = 4141
    esriSRGeoCS_Jamaica1875 = 4241
    esriSRGeoCS_Jamaica1969 = 4242
    esriSRGeoCS_Kalianpur1880 = 4243
    esriSRGeoCS_Kalianpur1937 = 4144
    esriSRGeoCS_Kalianpur1962 = 4145
    esriSRGeoCS_Kalianpur1975 = 4146
    esriSRGeoCS_Kandawala = 4244
    esriSRGeoCS_Kertau = 4245
    esriSRGeoCS_KKJ = 4123
    esriSRGeoCS_KOC = 4246
    esriSRGeoCS_KUDAMS = 4319
    esriSRGeoCS_LaCanoa = 4247
    esriSRGeoCS_Lake = 4249
    esriSRGeoCS_Leigon = 4250
    esriSRGeoCS_Liberia1964 = 4251
    esriSRGeoCS_Lisbon = 4207
    esriSRGeoCS_LisbonLisbon = 4803
    esriSRGeoCS_Locodjo1965 = 4142
    esriSRGeoCS_LomaQuintana = 4288
    esriSRGeoCS_Lome = 4252
    esriSRGeoCS_Luzon1911 = 4253
    esriSRGeoCS_Mahe1971 = 4256
    esriSRGeoCS_Makassar = 4257
    esriSRGeoCS_MakassarJakarta = 4804
    esriSRGeoCS_Malongo1987 = 4259
    esriSRGeoCS_Manoca = 4260
    esriSRGeoCS_Massawa = 4262
    esriSRGeoCS_Merchich = 4261
    esriSRGeoCS_MerchichDegree = 104261
    esriSRGeoCS_MGI = 4312
    esriSRGeoCS_MGIFerro = 4805
    esriSRGeoCS_Mhast = 4264
    esriSRGeoCS_Minna = 4263
    esriSRGeoCS_MonteMario = 4265
    esriSRGeoCS_MonteMarioRome = 4806
    esriSRGeoCS_MPoraloko = 4266
    esriSRGeoCS_NADMichigan = 4268
    esriSRGeoCS_NAD1927 = 4267
    esriSRGeoCS_NAD1983 = 4269
    esriSRGeoCS_NAD1983HARN = 4152
    esriSRGeoCS_NAD1983CSRS98 = 4617
    esriSRGeoCS_Nahrwan1967 = 4270
    esriSRGeoCS_Naparima1972 = 4271
    esriSRGeoCS_NorddeGuerreParis = 4902
    esriSRGeoCS_NGN = 4318
    esriSRGeoCS_NGO1948 = 4273
    esriSRGeoCS_NGO1948Oslo = 4817
    esriSRGeoCS_NordSahara1959 = 4307
    esriSRGeoCS_NSWC9Z_2 = 4276
    esriSRGeoCS_NTF = 4275
    esriSRGeoCS_NTFParis = 4807
    esriSRGeoCS_NZGD1949 = 4272
    esriSRGeoCS_OSSN1980 = 4279
    esriSRGeoCS_OSGB1936 = 4277
    esriSRGeoCS_OSGB1970SN = 4278
    esriSRGeoCS_Padang1884 = 4280
    esriSRGeoCS_Padang1884Jakarta = 4808
    esriSRGeoCS_Palestine1923 = 4281
    esriSRGeoCS_PointeNoire = 4282
    esriSRGeoCS_PSAD1956 = 4248
    esriSRGeoCS_Pulkovo1942 = 4284
    esriSRGeoCS_Pulkovo1995 = 4200
    esriSRGeoCS_Qatar = 4285
    esriSRGeoCS_Qatar1948 = 4286
    esriSRGeoCS_Qornoq = 4287
    esriSRGeoCS_Rassadiran = 4153
    esriSRGeoCS_RT38 = 4308
    esriSRGeoCS_RT38Stockholm = 4814
    esriSRGeoCS_SAD1969 = 4618
    esriSRGeoCS_SapperHill1943 = 4292
    esriSRGeoCS_Schwarzeck = 4293
    esriSRGeoCS_Segora = 4294
    esriSRGeoCS_Serindung = 4295
    esriSRGeoCS_Sudan = 4296
    esriSRGeoCS_Tananarive1925 = 4297
    esriSRGeoCS_Tananarive1925Paris = 4810
    esriSRGeoCS_Timbalai1948 = 4298
    esriSRGeoCS_TM65 = 4299
    esriSRGeoCS_TM75 = 4300
    esriSRGeoCS_Tokyo = 4301
    esriSRGeoCS_Trinidad1903 = 4302
    esriSRGeoCS_TrucialCoast1948 = 4303
    esriSRGeoCS_Voirol1875 = 4304
    esriSRGeoCS_Voirol1875Degree = 4304
    esriSRGeoCS_Voirol1875Paris = 4811
    esriSRGeoCS_VoirolUnifie1960 = 4305
    esriSRGeoCS_VoirolUnifie1960Degree = 104305
    esriSRGeoCS_VoirolUnifie1960Paris = 4812
    esriSRGeoCS_WGS1972 = 4322
    esriSRGeoCS_WGS1972BE = 4324
    esriSRGeoCS_WGS1984 = 4326
    esriSRGeoCS_Yacare = 4309
    esriSRGeoCS_Yoff = 4310
    esriSRGeoCS_Zanderij = 4311
    esriSRGeoCS_CarthageParis = 4816
    esriSRGeoCS_FD1958 = 4132
    esriSRGeoCS_LKS1994 = 4669
    esriSRGeoCS_Madrid1870Madrid = 4903
    esriSRGeoCS_Madzansua = 4128
    esriSRGeoCS_Moznet = 4130
    esriSRGeoCS_Observatario = 4129
    esriSRGeoCS_RT90 = 4124
    esriSRGeoCS_Samboja = 4125
    esriSRGeoCS_Tete = 4127
    esriSRGeoCS_Estonia1992 = 4133
    esriSRGeoCS_PDO1993 = 4134
    esriSRGeoCS_Anguilla1957 = 4600
    esriSRGeoCS_Antigua1943 = 4601
    esriSRGeoCS_Dominica1945 = 4602
    esriSRGeoCS_Grenada1953 = 4603
    esriSRGeoCS_StKitts1955 = 4605
    esriSRGeoCS_StLucia1955 = 4606
    esriSRGeoCS_StVincent1945 = 4607
    esriSRGeoCS_NAD1927Def1976 = 4608
    esriSRGeoCS_NAD1927CGQ77 = 4609
    esriSRGeoCS_StGeorgeIsland = 4138
    esriSRGeoCS_StLawrenceIsland = 4136
    esriSRGeoCS_StPaulIsland = 4137
    esriSRGeoCS_European1979 = 4668
    esriSRGeoCS_EverestBangladesh = 37202
    esriSRGeoCS_EverestIndiaNepal = 37203
    esriSRGeoCS_Hjorsey1955 = 4658
    esriSRGeoCS_HongKong1963 = 4738
    esriSRGeoCS_Oman = 37206
    esriSRGeoCS_SouthAsiaSingapore = 37207
    esriSRGeoCS_Ayabelle = 4713
    esriSRGeoCS_Bissau = 4165
    esriSRGeoCS_Dabola = 4155
    esriSRGeoCS_Point58 = 4620
    esriSRGeoCS_BeaconE1945 = 4709
    esriSRGeoCS_TernIsland1961 = 4707
    esriSRGeoCS_Astro1952 = 4711
    esriSRGeoCS_BellevueIGN = 4714
    esriSRGeoCS_Canton1966 = 4716
    esriSRGeoCS_ChathamIsland1971 = 4672
    esriSRGeoCS_DOS1968 = 37218
    esriSRGeoCS_EasterIsland1967 = 4719
    esriSRGeoCS_Guam1963 = 4675
    esriSRGeoCS_GUX1 = 37221
    esriSRGeoCS_JohnstonIsland1961 = 4725
    esriSRGeoCS_Kusaie1951 = 4735
    esriSRGeoCS_Midway1961 = 4727
    esriSRGeoCS_OldHawaiian = 4135
    esriSRGeoCS_Pitcairn1967 = 4729
    esriSRGeoCS_SantoDOS1965 = 4730
    esriSRGeoCS_VitiLevu1916 = 4731
    esriSRGeoCS_WakeEniwetok1960 = 4732
    esriSRGeoCS_WakeIsland1952 = 4733
    esriSRGeoCS_Anna1_1965 = 4708
    esriSRGeoCS_Gan1970 = 4684
    esriSRGeoCS_ISTS073_1969 = 4724
    esriSRGeoCS_KerguelenIsland1949 = 4698
    esriSRGeoCS_Reunion = 4626
    esriSRGeoCS_AscensionIsland1958 = 4712
    esriSRGeoCS_DOS71_4 = 4710
    esriSRGeoCS_CapeCanaveral = 4717
    esriSRGeoCS_FortThomas1955 = 37240
    esriSRGeoCS_Graciosa1948 = 37241
    esriSRGeoCS_ISTS061_1968 = 4722
    esriSRGeoCS_LC5_1961 = 37243
    esriSRGeoCS_Montserrat1958 = 4604
    esriSRGeoCS_ObservMeteor1939 = 37245
    esriSRGeoCS_PicodeLasNieves = 4728
    esriSRGeoCS_PortoSanto1936 = 4615
    esriSRGeoCS_PuertoRico = 4139
    esriSRGeoCS_SaoBraz = 37249
    esriSRGeoCS_SelvagemGrande1938 = 4616
    esriSRGeoCS_Tristan1968 = 4734
    esriSRGeoCS_Samoa1962 = 4169
    esriSRGeoCS_CampArea = 4715
    esriSRGeoCS_DeceptionIsland = 4736
    esriSRGeoCS_GunungSegara = 4613
    esriSRGeoCS_Indian1960 = 4131
    esriSRGeoCS_S_42Hungary = 37257
    esriSRGeoCS_S_JTSK = 4156
    esriSRGeoCS_AlaskanIslands = 37260

class esriSRGeoCS2Type(Enumeration):
    __slots__ = ['esriSRGeoCS_S_JTSK_FERRO',
                 'esriSRGeoCS_Estonia1937',
                 'esriSRGeoCS_Hermannskogel',
                 'esriSRGeoCS_SierraLeone1960',
                 'esriSRGeoCS_HongKong1980',
                 'esriSRGeoCS_LisboaBessel',
                 'esriSRGeoCS_LisboaHayford',
                 'esriSRGeoCS_RGF1993',
                 'esriSRGeoCS_NZGD_2000',
                 'esriSRGeoCS_Clarke1866AuthalicSphere',
                 'esriSRGeoCS_Voirol1879',
                 'esriSRGeoCS_Voirol1879Paris',
                 'esriSRGeoCS_SIRGAS2000',
                 'esriSRGeoCS_Vientiane1982',
                 'esriSRGeoCS_Lao1993',
                 'esriSRGeoCS_Lao1997',
                 'esriSRGeoCS_Jouik1961',
                 'esriSRGeoCS_Nouakchott1965',
                 'esriSRGeoCS_Mauritania1999',
                 'esriSRGeoCS_Gulshan303',
                 'esriSRGeoCS_D48',
                 'esriSRGeoCS_Ocotepeque1935',
                 'esriSRGeoCS_JAD2001',
                 'esriSRGeoCS_MONREF1997',
                 'esriSRGeoCS_MSK1942',
                 'esriSRGeoCS_PRJ1992',
                 'esriSRGeoCS_MAGNA',
                 'esriSRGeoCS_RGPF',
                 'esriSRGeoCS_FatuIva1972',
                 'esriSRGeoCS_IGN63HivaOa',
                 'esriSRGeoCS_Tahiti1979',
                 'esriSRGeoCS_Moorea1987',
                 'esriSRGeoCS_Maupiti1983',
                 'esriSRGeoCS_Nakhl_e_Ghanem',
                 'esriSRGeoCS_POSGAR94',
                 'esriSRGeoCS_Katanga1955',
                 'esriSRGeoCS_Kasai1953',
                 'esriSRGeoCS_IGC1962_6th_Parallel_S',
                 'esriSRGeoCS_IGCB1955',
                 'esriSRGeoCS_MHAST1951',
                 'esriSRGeoCS_MHAST_Onshore',
                 'esriSRGeoCS_MHAST_Offshore',
                 'esriSRGeoCS_EgyptGulfSuez_S650TL',
                 'esriSRGeoCS_Fiji1986',
                 'esriSRGeoCS_Fiji1956',
                 'esriSRGeoCS_GrandCayman1959',
                 'esriSRGeoCS_LittleCayman1961',
                 'esriSRGeoCS_Korea2000',
                 'esriSRGeoCS_HongKong1963_67',
                 'esriSRGeoCS_GDM2000',
                 'esriSRGeoCS_TWD1967',
                 'esriSRGeoCS_TWD1997',
                 'esriSRGeoCS_EverestAdj1937',
                 'esriSRGeoCS_AuthalicSphere_GRS1980',
                 'esriSRGeoCS_AuthalicSphere_Intl1924',
                 'esriSRGeoCS_Hughes1980',
                 'esriSRGeoCS_NAD1983_CSRS',
                 'esriSRGeoCS_LePouce1934',
                 'esriSRGeoCS_IGNAstro1960',
                 'esriSRGeoCS_Solomon1968',
                 'esriSRGeoCS_PZ1990',
                 'esriSRGeoCS_FD1954',
                 'esriSRGeoCS_Karbala1979Polservice',
                 'esriSRGeoCS_Nahrwan1934',
                 'esriSRGeoCS_Rauenberg1983',
                 'esriSRGeoCS_Potsdam1983',
                 'esriSRGeoCS_Greenland1996',
                 'esriSRGeoCS_VanuaLevu1915',
                 'esriSRGeoCS_RGNC1991_93',
                 'esriSRGeoCS_fk89',
                 'esriSRGeoCS_LGD2006',
                 'esriSRGeoCS_DGN1995',
                 'esriSRGeoCS_VN2000',
                 'esriSRGeoCS_SVY21',
                 'esriSRGeoCS_NAD1983_NSRS2007',
                 'esriSRGeoCS_ITRF2005',
                 'esriSRGeoCS_MajorAuxSphere_WGS1984']
    esriSRGeoCS_S_JTSK_FERRO = 4818
    esriSRGeoCS_Estonia1937 = 104101
    esriSRGeoCS_Hermannskogel = 104102
    esriSRGeoCS_SierraLeone1960 = 104103
    esriSRGeoCS_HongKong1980 = 4611
    esriSRGeoCS_LisboaBessel = 104105
    esriSRGeoCS_LisboaHayford = 104106
    esriSRGeoCS_RGF1993 = 4171
    esriSRGeoCS_NZGD_2000 = 4167
    esriSRGeoCS_Clarke1866AuthalicSphere = 4052
    esriSRGeoCS_Voirol1879 = 4671
    esriSRGeoCS_Voirol1879Paris = 4821
    esriSRGeoCS_SIRGAS2000 = 4674
    esriSRGeoCS_Vientiane1982 = 4676
    esriSRGeoCS_Lao1993 = 4677
    esriSRGeoCS_Lao1997 = 4678
    esriSRGeoCS_Jouik1961 = 4679
    esriSRGeoCS_Nouakchott1965 = 4680
    esriSRGeoCS_Mauritania1999 = 4702
    esriSRGeoCS_Gulshan303 = 4682
    esriSRGeoCS_D48 = 104131
    esriSRGeoCS_Ocotepeque1935 = 5451
    esriSRGeoCS_JAD2001 = 4758
    esriSRGeoCS_MONREF1997 = 104134
    esriSRGeoCS_MSK1942 = 104135
    esriSRGeoCS_PRJ1992 = 4683
    esriSRGeoCS_MAGNA = 4686
    esriSRGeoCS_RGPF = 4687
    esriSRGeoCS_FatuIva1972 = 4688
    esriSRGeoCS_IGN63HivaOa = 4689
    esriSRGeoCS_Tahiti1979 = 4690
    esriSRGeoCS_Moorea1987 = 4691
    esriSRGeoCS_Maupiti1983 = 4692
    esriSRGeoCS_Nakhl_e_Ghanem = 4693
    esriSRGeoCS_POSGAR94 = 4694
    esriSRGeoCS_Katanga1955 = 4695
    esriSRGeoCS_Kasai1953 = 4696
    esriSRGeoCS_IGC1962_6th_Parallel_S = 4697
    esriSRGeoCS_IGCB1955 = 4701
    esriSRGeoCS_MHAST1951 = 4703
    esriSRGeoCS_MHAST_Onshore = 4704
    esriSRGeoCS_MHAST_Offshore = 4705
    esriSRGeoCS_EgyptGulfSuez_S650TL = 4706
    esriSRGeoCS_Fiji1986 = 4720
    esriSRGeoCS_Fiji1956 = 4721
    esriSRGeoCS_GrandCayman1959 = 4723
    esriSRGeoCS_LittleCayman1961 = 4726
    esriSRGeoCS_Korea2000 = 4737
    esriSRGeoCS_HongKong1963_67 = 4739
    esriSRGeoCS_GDM2000 = 4742
    esriSRGeoCS_TWD1967 = 3821
    esriSRGeoCS_TWD1997 = 3824
    esriSRGeoCS_EverestAdj1937 = 4015
    esriSRGeoCS_AuthalicSphere_GRS1980 = 4047
    esriSRGeoCS_AuthalicSphere_Intl1924 = 4053
    esriSRGeoCS_Hughes1980 = 4054
    esriSRGeoCS_NAD1983_CSRS = 4617
    esriSRGeoCS_LePouce1934 = 4699
    esriSRGeoCS_IGNAstro1960 = 4700
    esriSRGeoCS_Solomon1968 = 4718
    esriSRGeoCS_PZ1990 = 4740
    esriSRGeoCS_FD1954 = 4741
    esriSRGeoCS_Karbala1979Polservice = 4743
    esriSRGeoCS_Nahrwan1934 = 4744
    esriSRGeoCS_Rauenberg1983 = 4745
    esriSRGeoCS_Potsdam1983 = 4746
    esriSRGeoCS_Greenland1996 = 4747
    esriSRGeoCS_VanuaLevu1915 = 4748
    esriSRGeoCS_RGNC1991_93 = 4749
    esriSRGeoCS_fk89 = 4753
    esriSRGeoCS_LGD2006 = 4754
    esriSRGeoCS_DGN1995 = 4755
    esriSRGeoCS_VN2000 = 4756
    esriSRGeoCS_SVY21 = 4757
    esriSRGeoCS_NAD1983_NSRS2007 = 4759
    esriSRGeoCS_ITRF2005 = 104896
    esriSRGeoCS_MajorAuxSphere_WGS1984 = 4055

class esriSRProjCSType(Enumeration):
    __slots__ = ['esriSRProjCS_WGS1984N_PoleStereographic',
                 'esriSRProjCS_WGS1984S_PoleStereographic',
                 'esriSRProjCS_WGS1984N_PoleAziEqui',
                 'esriSRProjCS_WGS1984S_PoleAziEqui',
                 'esriSRProjCS_WGS1984N_PoleLambertAzi',
                 'esriSRProjCS_WGS1984S_PoleLambertAzi',
                 'esriSRProjCS_NAD1983CanadaAlbers',
                 'esriSRProjCS_NAD1983CanadaLambert',
                 'esriSRProjCS_NAD1983USA_Albers',
                 'esriSRProjCS_NAD1983USA_Lambert',
                 'esriSRProjCS_NAD1983USA_EquiConic',
                 'esriSRProjCS_NAD1983N_AmericaAlbers',
                 'esriSRProjCS_NAD1983N_AmericaLambert',
                 'esriSRProjCS_NAD1983N_AmericaEquiConic',
                 'esriSRProjCS_NAD1983AlaskaAlbers',
                 'esriSRProjCS_NAD1983HawaiiAlbers',
                 'esriSRProjCS_WGS1984AfricaSinusoidal',
                 'esriSRProjCS_WGS1984AfricaAlbers',
                 'esriSRProjCS_WGS1984AfricaEquiConic',
                 'esriSRProjCS_WGS1984AfricaLambert',
                 'esriSRProjCS_WGS1984AsiaLambert',
                 'esriSRProjCS_WGS1984N_AsiaAlbers',
                 'esriSRProjCS_WGS1984N_AsiaEquiConic',
                 'esriSRProjCS_WGS1984N_AsiaLambert',
                 'esriSRProjCS_WGS1984S_AsiaAlbers',
                 'esriSRProjCS_WGS1984S_AsiaEquiConic',
                 'esriSRProjCS_WGS1984S_AsiaLambert',
                 'esriSRProjCS_ED1950EuropeAlbers',
                 'esriSRProjCS_ED1950EuropeEquiConic',
                 'esriSRProjCS_ED1950EuropeLambert',
                 'esriSRProjCS_SAD1969S_AmericaAlbers',
                 'esriSRProjCS_SAD1969S_AmericaEquiConic',
                 'esriSRProjCS_SAD1969S_AmericaLambert',
                 'esriSRProjCS_World_PlateCarree',
                 'esriSRProjCS_World_EquidistantCylindrical',
                 'esriSRProjCS_World_MillerCylindrical',
                 'esriSRProjCS_World_Mercator',
                 'esriSRProjCS_World_Sinusoidal',
                 'esriSRProjCS_World_Mollweide',
                 'esriSRProjCS_World_EckertVI',
                 'esriSRProjCS_World_EckertV',
                 'esriSRProjCS_World_EckertIV',
                 'esriSRProjCS_World_EckertIII',
                 'esriSRProjCS_World_EckertII',
                 'esriSRProjCS_World_EckertI',
                 'esriSRProjCS_World_GallStereographic',
                 'esriSRProjCS_World_Behrmann',
                 'esriSRProjCS_World_WinkelI',
                 'esriSRProjCS_World_WinkelII',
                 'esriSRProjCS_World_Polyconic',
                 'esriSRProjCS_World_QuarticAuthalic',
                 'esriSRProjCS_World_Loximuthal',
                 'esriSRProjCS_World_Bonne',
                 'esriSRProjCS_World_Hotine',
                 'esriSRProjCS_World_Stereographic',
                 'esriSRProjCS_World_EquidistantConic',
                 'esriSRProjCS_World_Cassini',
                 'esriSRProjCS_World_VanderGrintenI',
                 'esriSRProjCS_World_Robinson',
                 'esriSRProjCS_World_TwoPointEquidistant',
                 'esriSRProjCS_World_AzimuthalEquidistant',
                 'esriSRProjCS_Sphere_PlateCarree',
                 'esriSRProjCS_Sphere_EquidistantCylindrical',
                 'esriSRProjCS_Sphere_MillerCylindrical',
                 'esriSRProjCS_Sphere_Mercator',
                 'esriSRProjCS_Sphere_Sinusoidal',
                 'esriSRProjCS_Sphere_Mollweide',
                 'esriSRProjCS_Sphere_EckertVI',
                 'esriSRProjCS_Sphere_EckertV',
                 'esriSRProjCS_Sphere_EckertIV',
                 'esriSRProjCS_Sphere_EckertIII',
                 'esriSRProjCS_Sphere_EckertII',
                 'esriSRProjCS_Sphere_EckertI',
                 'esriSRProjCS_Sphere_GallStereographic',
                 'esriSRProjCS_Sphere_Behrmann',
                 'esriSRProjCS_Sphere_WinkelI',
                 'esriSRProjCS_Sphere_WinkelII',
                 'esriSRProjCS_Sphere_Polyconic',
                 'esriSRProjCS_Sphere_QuarticAuthalic',
                 'esriSRProjCS_Sphere_Loximuthal',
                 'esriSRProjCS_Sphere_Bonne',
                 'esriSRProjCS_Sphere_Hotine',
                 'esriSRProjCS_Sphere_Stereographic',
                 'esriSRProjCS_Sphere_EquidistantConic',
                 'esriSRProjCS_Sphere_Cassini',
                 'esriSRProjCS_Sphere_VanderGrintenI',
                 'esriSRProjCS_Sphere_Robinson',
                 'esriSRProjCS_Sphere_TwoPointEquidistant',
                 'esriSRProjCS_Sphere_AzimuthalEquidistant',
                 'esriSRProjCS_WGS1984UTM_1N',
                 'esriSRProjCS_WGS1984UTM_2N',
                 'esriSRProjCS_WGS1984UTM_3N',
                 'esriSRProjCS_WGS1984UTM_4N',
                 'esriSRProjCS_WGS1984UTM_5N',
                 'esriSRProjCS_WGS1984UTM_6N',
                 'esriSRProjCS_WGS1984UTM_7N',
                 'esriSRProjCS_WGS1984UTM_8N',
                 'esriSRProjCS_WGS1984UTM_9N',
                 'esriSRProjCS_WGS1984UTM_10N',
                 'esriSRProjCS_WGS1984UTM_11N',
                 'esriSRProjCS_WGS1984UTM_12N',
                 'esriSRProjCS_WGS1984UTM_13N',
                 'esriSRProjCS_WGS1984UTM_14N',
                 'esriSRProjCS_WGS1984UTM_15N',
                 'esriSRProjCS_WGS1984UTM_16N',
                 'esriSRProjCS_WGS1984UTM_17N',
                 'esriSRProjCS_WGS1984UTM_18N',
                 'esriSRProjCS_WGS1984UTM_19N',
                 'esriSRProjCS_WGS1984UTM_20N',
                 'esriSRProjCS_WGS1984UTM_21N',
                 'esriSRProjCS_WGS1984UTM_22N',
                 'esriSRProjCS_WGS1984UTM_23N',
                 'esriSRProjCS_WGS1984UTM_24N',
                 'esriSRProjCS_WGS1984UTM_25N',
                 'esriSRProjCS_WGS1984UTM_26N',
                 'esriSRProjCS_WGS1984UTM_27N',
                 'esriSRProjCS_WGS1984UTM_28N',
                 'esriSRProjCS_WGS1984UTM_29N',
                 'esriSRProjCS_WGS1984UTM_30N',
                 'esriSRProjCS_WGS1984UTM_31N',
                 'esriSRProjCS_WGS1984UTM_32N',
                 'esriSRProjCS_WGS1984UTM_33N',
                 'esriSRProjCS_WGS1984UTM_34N',
                 'esriSRProjCS_WGS1984UTM_35N',
                 'esriSRProjCS_WGS1984UTM_36N',
                 'esriSRProjCS_WGS1984UTM_37N',
                 'esriSRProjCS_WGS1984UTM_38N',
                 'esriSRProjCS_WGS1984UTM_39N',
                 'esriSRProjCS_WGS1984UTM_40N',
                 'esriSRProjCS_WGS1984UTM_41N',
                 'esriSRProjCS_WGS1984UTM_42N',
                 'esriSRProjCS_WGS1984UTM_43N',
                 'esriSRProjCS_WGS1984UTM_44N',
                 'esriSRProjCS_WGS1984UTM_45N',
                 'esriSRProjCS_WGS1984UTM_46N',
                 'esriSRProjCS_WGS1984UTM_47N',
                 'esriSRProjCS_WGS1984UTM_48N',
                 'esriSRProjCS_WGS1984UTM_49N',
                 'esriSRProjCS_WGS1984UTM_50N',
                 'esriSRProjCS_WGS1984UTM_51N',
                 'esriSRProjCS_WGS1984UTM_52N',
                 'esriSRProjCS_WGS1984UTM_53N',
                 'esriSRProjCS_WGS1984UTM_54N',
                 'esriSRProjCS_WGS1984UTM_55N',
                 'esriSRProjCS_WGS1984UTM_56N',
                 'esriSRProjCS_WGS1984UTM_57N',
                 'esriSRProjCS_WGS1984UTM_58N',
                 'esriSRProjCS_WGS1984UTM_59N',
                 'esriSRProjCS_WGS1984UTM_60N',
                 'esriSRProjCS_WGS1984UTM_1S',
                 'esriSRProjCS_WGS1984UTM_2S',
                 'esriSRProjCS_WGS1984UTM_3S',
                 'esriSRProjCS_WGS1984UTM_4S',
                 'esriSRProjCS_WGS1984UTM_5S',
                 'esriSRProjCS_WGS1984UTM_6S',
                 'esriSRProjCS_WGS1984UTM_7S',
                 'esriSRProjCS_WGS1984UTM_8S',
                 'esriSRProjCS_WGS1984UTM_9S',
                 'esriSRProjCS_WGS1984UTM_10S',
                 'esriSRProjCS_WGS1984UTM_11S',
                 'esriSRProjCS_WGS1984UTM_12S',
                 'esriSRProjCS_WGS1984UTM_13S',
                 'esriSRProjCS_WGS1984UTM_14S',
                 'esriSRProjCS_WGS1984UTM_15S',
                 'esriSRProjCS_WGS1984UTM_16S',
                 'esriSRProjCS_WGS1984UTM_17S',
                 'esriSRProjCS_WGS1984UTM_18S',
                 'esriSRProjCS_WGS1984UTM_19S',
                 'esriSRProjCS_WGS1984UTM_20S',
                 'esriSRProjCS_WGS1984UTM_21S',
                 'esriSRProjCS_WGS1984UTM_22S',
                 'esriSRProjCS_WGS1984UTM_23S',
                 'esriSRProjCS_WGS1984UTM_24S',
                 'esriSRProjCS_WGS1984UTM_25S',
                 'esriSRProjCS_WGS1984UTM_26S',
                 'esriSRProjCS_WGS1984UTM_27S',
                 'esriSRProjCS_WGS1984UTM_28S',
                 'esriSRProjCS_WGS1984UTM_29S',
                 'esriSRProjCS_WGS1984UTM_30S',
                 'esriSRProjCS_WGS1984UTM_31S',
                 'esriSRProjCS_WGS1984UTM_32S',
                 'esriSRProjCS_WGS1984UTM_33S',
                 'esriSRProjCS_WGS1984UTM_34S',
                 'esriSRProjCS_WGS1984UTM_35S',
                 'esriSRProjCS_WGS1984UTM_36S',
                 'esriSRProjCS_WGS1984UTM_37S',
                 'esriSRProjCS_WGS1984UTM_38S',
                 'esriSRProjCS_WGS1984UTM_39S',
                 'esriSRProjCS_WGS1984UTM_40S',
                 'esriSRProjCS_WGS1984UTM_41S',
                 'esriSRProjCS_WGS1984UTM_42S',
                 'esriSRProjCS_WGS1984UTM_43S',
                 'esriSRProjCS_WGS1984UTM_44S',
                 'esriSRProjCS_WGS1984UTM_45S',
                 'esriSRProjCS_WGS1984UTM_46S',
                 'esriSRProjCS_WGS1984UTM_47S',
                 'esriSRProjCS_WGS1984UTM_48S',
                 'esriSRProjCS_WGS1984UTM_49S',
                 'esriSRProjCS_WGS1984UTM_50S',
                 'esriSRProjCS_WGS1984UTM_51S',
                 'esriSRProjCS_WGS1984UTM_52S',
                 'esriSRProjCS_WGS1984UTM_53S',
                 'esriSRProjCS_WGS1984UTM_54S',
                 'esriSRProjCS_WGS1984UTM_55S',
                 'esriSRProjCS_WGS1984UTM_56S',
                 'esriSRProjCS_WGS1984UTM_57S',
                 'esriSRProjCS_WGS1984UTM_58S',
                 'esriSRProjCS_WGS1984UTM_59S',
                 'esriSRProjCS_WGS1984UTM_60S',
                 'esriSRProjCS_WGS1972UTM_1N',
                 'esriSRProjCS_WGS1972UTM_2N',
                 'esriSRProjCS_WGS1972UTM_3N',
                 'esriSRProjCS_WGS1972UTM_4N',
                 'esriSRProjCS_WGS1972UTM_5N',
                 'esriSRProjCS_WGS1972UTM_6N',
                 'esriSRProjCS_WGS1972UTM_7N',
                 'esriSRProjCS_WGS1972UTM_8N',
                 'esriSRProjCS_WGS1972UTM_9N',
                 'esriSRProjCS_WGS1972UTM_10N',
                 'esriSRProjCS_WGS1972UTM_11N',
                 'esriSRProjCS_WGS1972UTM_12N',
                 'esriSRProjCS_WGS1972UTM_13N',
                 'esriSRProjCS_WGS1972UTM_14N',
                 'esriSRProjCS_WGS1972UTM_15N',
                 'esriSRProjCS_WGS1972UTM_16N',
                 'esriSRProjCS_WGS1972UTM_17N',
                 'esriSRProjCS_WGS1972UTM_18N',
                 'esriSRProjCS_WGS1972UTM_19N',
                 'esriSRProjCS_WGS1972UTM_20N',
                 'esriSRProjCS_WGS1972UTM_21N',
                 'esriSRProjCS_WGS1972UTM_22N',
                 'esriSRProjCS_WGS1972UTM_23N',
                 'esriSRProjCS_WGS1972UTM_24N',
                 'esriSRProjCS_WGS1972UTM_25N',
                 'esriSRProjCS_WGS1972UTM_26N',
                 'esriSRProjCS_WGS1972UTM_27N',
                 'esriSRProjCS_WGS1972UTM_28N',
                 'esriSRProjCS_WGS1972UTM_29N',
                 'esriSRProjCS_WGS1972UTM_30N',
                 'esriSRProjCS_WGS1972UTM_31N',
                 'esriSRProjCS_WGS1972UTM_32N',
                 'esriSRProjCS_WGS1972UTM_33N',
                 'esriSRProjCS_WGS1972UTM_34N',
                 'esriSRProjCS_WGS1972UTM_35N',
                 'esriSRProjCS_WGS1972UTM_36N',
                 'esriSRProjCS_WGS1972UTM_37N',
                 'esriSRProjCS_WGS1972UTM_38N',
                 'esriSRProjCS_WGS1972UTM_39N',
                 'esriSRProjCS_WGS1972UTM_40N',
                 'esriSRProjCS_WGS1972UTM_41N',
                 'esriSRProjCS_WGS1972UTM_42N',
                 'esriSRProjCS_WGS1972UTM_43N',
                 'esriSRProjCS_WGS1972UTM_44N',
                 'esriSRProjCS_WGS1972UTM_45N',
                 'esriSRProjCS_WGS1972UTM_46N',
                 'esriSRProjCS_WGS1972UTM_47N',
                 'esriSRProjCS_WGS1972UTM_48N',
                 'esriSRProjCS_WGS1972UTM_49N',
                 'esriSRProjCS_WGS1972UTM_50N',
                 'esriSRProjCS_WGS1972UTM_51N',
                 'esriSRProjCS_WGS1972UTM_52N',
                 'esriSRProjCS_WGS1972UTM_53N',
                 'esriSRProjCS_WGS1972UTM_54N',
                 'esriSRProjCS_WGS1972UTM_55N',
                 'esriSRProjCS_WGS1972UTM_56N',
                 'esriSRProjCS_WGS1972UTM_57N',
                 'esriSRProjCS_WGS1972UTM_58N',
                 'esriSRProjCS_WGS1972UTM_59N',
                 'esriSRProjCS_WGS1972UTM_60N',
                 'esriSRProjCS_WGS1972UTM_1S',
                 'esriSRProjCS_WGS1972UTM_2S',
                 'esriSRProjCS_WGS1972UTM_3S',
                 'esriSRProjCS_WGS1972UTM_4S',
                 'esriSRProjCS_WGS1972UTM_5S',
                 'esriSRProjCS_WGS1972UTM_6S',
                 'esriSRProjCS_WGS1972UTM_7S',
                 'esriSRProjCS_WGS1972UTM_8S',
                 'esriSRProjCS_WGS1972UTM_9S',
                 'esriSRProjCS_WGS1972UTM_10S',
                 'esriSRProjCS_WGS1972UTM_11S',
                 'esriSRProjCS_WGS1972UTM_12S',
                 'esriSRProjCS_WGS1972UTM_13S',
                 'esriSRProjCS_WGS1972UTM_14S',
                 'esriSRProjCS_WGS1972UTM_15S',
                 'esriSRProjCS_WGS1972UTM_16S',
                 'esriSRProjCS_WGS1972UTM_17S',
                 'esriSRProjCS_WGS1972UTM_18S',
                 'esriSRProjCS_WGS1972UTM_19S',
                 'esriSRProjCS_WGS1972UTM_20S',
                 'esriSRProjCS_WGS1972UTM_21S',
                 'esriSRProjCS_WGS1972UTM_22S',
                 'esriSRProjCS_WGS1972UTM_23S',
                 'esriSRProjCS_WGS1972UTM_24S',
                 'esriSRProjCS_WGS1972UTM_25S',
                 'esriSRProjCS_WGS1972UTM_26S',
                 'esriSRProjCS_WGS1972UTM_27S',
                 'esriSRProjCS_WGS1972UTM_28S',
                 'esriSRProjCS_WGS1972UTM_29S',
                 'esriSRProjCS_WGS1972UTM_30S',
                 'esriSRProjCS_WGS1972UTM_31S',
                 'esriSRProjCS_WGS1972UTM_32S',
                 'esriSRProjCS_WGS1972UTM_33S',
                 'esriSRProjCS_WGS1972UTM_34S',
                 'esriSRProjCS_WGS1972UTM_35S',
                 'esriSRProjCS_WGS1972UTM_36S',
                 'esriSRProjCS_WGS1972UTM_37S',
                 'esriSRProjCS_WGS1972UTM_38S',
                 'esriSRProjCS_WGS1972UTM_39S',
                 'esriSRProjCS_WGS1972UTM_40S',
                 'esriSRProjCS_WGS1972UTM_41S',
                 'esriSRProjCS_WGS1972UTM_42S',
                 'esriSRProjCS_WGS1972UTM_43S',
                 'esriSRProjCS_WGS1972UTM_44S',
                 'esriSRProjCS_WGS1972UTM_45S',
                 'esriSRProjCS_WGS1972UTM_46S',
                 'esriSRProjCS_WGS1972UTM_47S',
                 'esriSRProjCS_WGS1972UTM_48S',
                 'esriSRProjCS_WGS1972UTM_49S',
                 'esriSRProjCS_WGS1972UTM_50S',
                 'esriSRProjCS_WGS1972UTM_51S',
                 'esriSRProjCS_WGS1972UTM_52S',
                 'esriSRProjCS_WGS1972UTM_53S',
                 'esriSRProjCS_WGS1972UTM_54S',
                 'esriSRProjCS_WGS1972UTM_55S',
                 'esriSRProjCS_WGS1972UTM_56S',
                 'esriSRProjCS_WGS1972UTM_57S',
                 'esriSRProjCS_WGS1972UTM_58S',
                 'esriSRProjCS_WGS1972UTM_59S',
                 'esriSRProjCS_WGS1972UTM_60S',
                 'esriSRProjCS_NAD1927BLM_14N',
                 'esriSRProjCS_NAD1927BLM_15N',
                 'esriSRProjCS_NAD1927BLM_16N',
                 'esriSRProjCS_NAD1927BLM_17N',
                 'esriSRProjCS_NAD1927UTM_3N',
                 'esriSRProjCS_NAD1927UTM_4N',
                 'esriSRProjCS_NAD1927UTM_5N',
                 'esriSRProjCS_NAD1927UTM_6N',
                 'esriSRProjCS_NAD1927UTM_7N',
                 'esriSRProjCS_NAD1927UTM_8N',
                 'esriSRProjCS_NAD1927UTM_9N',
                 'esriSRProjCS_NAD1927UTM_10N',
                 'esriSRProjCS_NAD1927UTM_11N',
                 'esriSRProjCS_NAD1927UTM_12N',
                 'esriSRProjCS_NAD1927UTM_13N',
                 'esriSRProjCS_NAD1927UTM_14N',
                 'esriSRProjCS_NAD1927UTM_15N',
                 'esriSRProjCS_NAD1927UTM_16N',
                 'esriSRProjCS_NAD1927UTM_17N',
                 'esriSRProjCS_NAD1927UTM_18N',
                 'esriSRProjCS_NAD1927UTM_19N',
                 'esriSRProjCS_NAD1927UTM_20N',
                 'esriSRProjCS_NAD1927UTM_21N',
                 'esriSRProjCS_NAD1927UTM_22N',
                 'esriSRProjCS_NAD1983UTM_3N',
                 'esriSRProjCS_NAD1983UTM_4N',
                 'esriSRProjCS_NAD1983UTM_5N',
                 'esriSRProjCS_NAD1983UTM_6N',
                 'esriSRProjCS_NAD1983UTM_7N',
                 'esriSRProjCS_NAD1983UTM_8N',
                 'esriSRProjCS_NAD1983UTM_9N',
                 'esriSRProjCS_NAD1983UTM_10N',
                 'esriSRProjCS_NAD1983UTM_11N',
                 'esriSRProjCS_NAD1983UTM_12N',
                 'esriSRProjCS_NAD1983UTM_13N',
                 'esriSRProjCS_NAD1983UTM_14N',
                 'esriSRProjCS_NAD1983UTM_15N',
                 'esriSRProjCS_NAD1983UTM_16N',
                 'esriSRProjCS_NAD1983UTM_17N',
                 'esriSRProjCS_NAD1983UTM_18N',
                 'esriSRProjCS_NAD1983UTM_19N',
                 'esriSRProjCS_NAD1983UTM_20N',
                 'esriSRProjCS_NAD1983UTM_21N',
                 'esriSRProjCS_NAD1983UTM_22N',
                 'esriSRProjCS_NAD1983UTM_23N',
                 'esriSRProjCS_ETRF1989UTM_28N',
                 'esriSRProjCS_ETRF1989UTM_29N',
                 'esriSRProjCS_ETRF1989UTM_30N',
                 'esriSRProjCS_ETRF1989UTM_31N',
                 'esriSRProjCS_ETRF1989UTM_32N',
                 'esriSRProjCS_ETRF1989UTM_33N',
                 'esriSRProjCS_ETRF1989UTM_34N',
                 'esriSRProjCS_ETRF1989UTM_35N',
                 'esriSRProjCS_ETRF1989UTM_36N',
                 'esriSRProjCS_ETRF1989UTM_37N',
                 'esriSRProjCS_ETRF1989UTM_38N',
                 'esriSRProjCS_Pulkovo1942GK_2',
                 'esriSRProjCS_Pulkovo1942GK_3',
                 'esriSRProjCS_Pulkovo1942GK_4',
                 'esriSRProjCS_Pulkovo1942GK_5',
                 'esriSRProjCS_Pulkovo1942GK_6',
                 'esriSRProjCS_Pulkovo1942GK_7',
                 'esriSRProjCS_Pulkovo1942GK_8',
                 'esriSRProjCS_Pulkovo1942GK_9',
                 'esriSRProjCS_Pulkovo1942GK_10',
                 'esriSRProjCS_Pulkovo1942GK_11',
                 'esriSRProjCS_Pulkovo1942GK_12',
                 'esriSRProjCS_Pulkovo1942GK_13',
                 'esriSRProjCS_Pulkovo1942GK_14',
                 'esriSRProjCS_Pulkovo1942GK_15',
                 'esriSRProjCS_Pulkovo1942GK_16',
                 'esriSRProjCS_Pulkovo1942GK_17',
                 'esriSRProjCS_Pulkovo1942GK_18',
                 'esriSRProjCS_Pulkovo1942GK_19',
                 'esriSRProjCS_Pulkovo1942GK_20',
                 'esriSRProjCS_Pulkovo1942GK_21',
                 'esriSRProjCS_Pulkovo1942GK_22',
                 'esriSRProjCS_Pulkovo1942GK_23',
                 'esriSRProjCS_Pulkovo1942GK_24',
                 'esriSRProjCS_Pulkovo1942GK_25',
                 'esriSRProjCS_Pulkovo1942GK_26',
                 'esriSRProjCS_Pulkovo1942GK_27',
                 'esriSRProjCS_Pulkovo1942GK_28',
                 'esriSRProjCS_Pulkovo1942GK_29',
                 'esriSRProjCS_Pulkovo1942GK_30',
                 'esriSRProjCS_Pulkovo1942GK_31',
                 'esriSRProjCS_Pulkovo1942GK_32',
                 'esriSRProjCS_Pulkovo1942GK_2N',
                 'esriSRProjCS_Pulkovo1942GK_3N',
                 'esriSRProjCS_Pulkovo1942GK_4N',
                 'esriSRProjCS_Pulkovo1942GK_5N',
                 'esriSRProjCS_Pulkovo1942GK_6N',
                 'esriSRProjCS_Pulkovo1942GK_7N',
                 'esriSRProjCS_Pulkovo1942GK_8N',
                 'esriSRProjCS_Pulkovo1942GK_9N',
                 'esriSRProjCS_Pulkovo1942GK_10N',
                 'esriSRProjCS_Pulkovo1942GK_11N',
                 'esriSRProjCS_Pulkovo1942GK_12N',
                 'esriSRProjCS_Pulkovo1942GK_13N',
                 'esriSRProjCS_Pulkovo1942GK_14N',
                 'esriSRProjCS_Pulkovo1942GK_15N',
                 'esriSRProjCS_Pulkovo1942GK_16N',
                 'esriSRProjCS_Pulkovo1942GK_17N',
                 'esriSRProjCS_Pulkovo1942GK_18N',
                 'esriSRProjCS_Pulkovo1942GK_19N',
                 'esriSRProjCS_Pulkovo1942GK_20N',
                 'esriSRProjCS_Pulkovo1942GK_21N',
                 'esriSRProjCS_Pulkovo1942GK_22N',
                 'esriSRProjCS_Pulkovo1942GK_23N',
                 'esriSRProjCS_Pulkovo1942GK_24N',
                 'esriSRProjCS_Pulkovo1942GK_25N',
                 'esriSRProjCS_Pulkovo1942GK_26N',
                 'esriSRProjCS_Pulkovo1942GK_27N',
                 'esriSRProjCS_Pulkovo1942GK_28N',
                 'esriSRProjCS_Pulkovo1942GK_29N',
                 'esriSRProjCS_Pulkovo1942GK_30N',
                 'esriSRProjCS_Pulkovo1942GK_31N',
                 'esriSRProjCS_Pulkovo1942GK_32N',
                 'esriSRProjCS_Pulkovo1995GK_2',
                 'esriSRProjCS_Pulkovo1995GK_3',
                 'esriSRProjCS_Pulkovo1995GK_4',
                 'esriSRProjCS_Pulkovo1995GK_5',
                 'esriSRProjCS_Pulkovo1995GK_6',
                 'esriSRProjCS_Pulkovo1995GK_7',
                 'esriSRProjCS_Pulkovo1995GK_8',
                 'esriSRProjCS_Pulkovo1995GK_9',
                 'esriSRProjCS_Pulkovo1995GK_10',
                 'esriSRProjCS_Pulkovo1995GK_11',
                 'esriSRProjCS_Pulkovo1995GK_12',
                 'esriSRProjCS_Pulkovo1995GK_13',
                 'esriSRProjCS_Pulkovo1995GK_14',
                 'esriSRProjCS_Pulkovo1995GK_15',
                 'esriSRProjCS_Pulkovo1995GK_16',
                 'esriSRProjCS_Pulkovo1995GK_17',
                 'esriSRProjCS_Pulkovo1995GK_18',
                 'esriSRProjCS_Pulkovo1995GK_19',
                 'esriSRProjCS_Pulkovo1995GK_20',
                 'esriSRProjCS_Pulkovo1995GK_21',
                 'esriSRProjCS_Pulkovo1995GK_22',
                 'esriSRProjCS_Pulkovo1995GK_23',
                 'esriSRProjCS_Pulkovo1995GK_24',
                 'esriSRProjCS_Pulkovo1995GK_25',
                 'esriSRProjCS_Pulkovo1995GK_26',
                 'esriSRProjCS_Pulkovo1995GK_27',
                 'esriSRProjCS_Pulkovo1995GK_28',
                 'esriSRProjCS_Pulkovo1995GK_29',
                 'esriSRProjCS_Pulkovo1995GK_30',
                 'esriSRProjCS_Pulkovo1995GK_31',
                 'esriSRProjCS_Pulkovo1995GK_32',
                 'esriSRProjCS_Pulkovo1995GK_2N',
                 'esriSRProjCS_Pulkovo1995GK_3N',
                 'esriSRProjCS_Pulkovo1995GK_4N',
                 'esriSRProjCS_Pulkovo1995GK_5N',
                 'esriSRProjCS_Pulkovo1995GK_6N',
                 'esriSRProjCS_Pulkovo1995GK_7N',
                 'esriSRProjCS_Pulkovo1995GK_8N',
                 'esriSRProjCS_Pulkovo1995GK_9N',
                 'esriSRProjCS_Pulkovo1995GK_10N',
                 'esriSRProjCS_Pulkovo1995GK_11N',
                 'esriSRProjCS_Pulkovo1995GK_12N',
                 'esriSRProjCS_Pulkovo1995GK_13N',
                 'esriSRProjCS_Pulkovo1995GK_14N',
                 'esriSRProjCS_Pulkovo1995GK_15N',
                 'esriSRProjCS_Pulkovo1995GK_16N',
                 'esriSRProjCS_Pulkovo1995GK_17N',
                 'esriSRProjCS_Pulkovo1995GK_18N',
                 'esriSRProjCS_Pulkovo1995GK_19N',
                 'esriSRProjCS_Pulkovo1995GK_20N',
                 'esriSRProjCS_Pulkovo1995GK_21N',
                 'esriSRProjCS_Pulkovo1995GK_22N',
                 'esriSRProjCS_Pulkovo1995GK_23N',
                 'esriSRProjCS_Pulkovo1995GK_24N',
                 'esriSRProjCS_Pulkovo1995GK_25N',
                 'esriSRProjCS_Pulkovo1995GK_26N',
                 'esriSRProjCS_Pulkovo1995GK_27N',
                 'esriSRProjCS_Pulkovo1995GK_28N',
                 'esriSRProjCS_Pulkovo1995GK_29N',
                 'esriSRProjCS_Pulkovo1995GK_30N',
                 'esriSRProjCS_Pulkovo1995GK_31N',
                 'esriSRProjCS_Pulkovo1995GK_32N',
                 'esriSRProjCS_Beijing1954GK_13',
                 'esriSRProjCS_Beijing1954GK_14',
                 'esriSRProjCS_Beijing1954GK_15',
                 'esriSRProjCS_Beijing1954GK_16',
                 'esriSRProjCS_Beijing1954GK_17',
                 'esriSRProjCS_Beijing1954GK_18',
                 'esriSRProjCS_Beijing1954GK_19',
                 'esriSRProjCS_Beijing1954GK_20',
                 'esriSRProjCS_Beijing1954GK_21',
                 'esriSRProjCS_Beijing1954GK_22',
                 'esriSRProjCS_Beijing1954GK_23',
                 'esriSRProjCS_Beijing1954GK_13N',
                 'esriSRProjCS_Beijing1954GK_14N',
                 'esriSRProjCS_Beijing1954GK_15N',
                 'esriSRProjCS_Beijing1954GK_16N',
                 'esriSRProjCS_Beijing1954GK_17N',
                 'esriSRProjCS_Beijing1954GK_18N',
                 'esriSRProjCS_Beijing1954GK_19N',
                 'esriSRProjCS_Beijing1954GK_20N',
                 'esriSRProjCS_Beijing1954GK_21N',
                 'esriSRProjCS_Beijing1954GK_22N',
                 'esriSRProjCS_Beijing1954GK_23N',
                 'esriSRProjCS_ED_1950_UTM_28N',
                 'esriSRProjCS_ED_1950_UTM_29N',
                 'esriSRProjCS_ED_1950_UTM_30N',
                 'esriSRProjCS_ED_1950_UTM_31N',
                 'esriSRProjCS_ED_1950_UTM_32N',
                 'esriSRProjCS_ED_1950_UTM_33N',
                 'esriSRProjCS_ED_1950_UTM_34N',
                 'esriSRProjCS_ED_1950_UTM_35N',
                 'esriSRProjCS_ED_1950_UTM_36N',
                 'esriSRProjCS_ED_1950_UTM_37N',
                 'esriSRProjCS_ED_1950_UTM_38N',
                 'esriSRProjCS_ATS1977UTM_19N',
                 'esriSRProjCS_ATS1977UTM_20N',
                 'esriSRProjCS_Finland_1',
                 'esriSRProjCS_Finland_2',
                 'esriSRProjCS_Finland_3',
                 'esriSRProjCS_Finland_4',
                 'esriSRProjCS_SouthAmerican1969UTM_18N',
                 'esriSRProjCS_SouthAmerican1969UTM_19N',
                 'esriSRProjCS_SouthAmerican1969UTM_20N',
                 'esriSRProjCS_SouthAmerican1969UTM_21N',
                 'esriSRProjCS_SouthAmerican1969UTM_22N',
                 'esriSRProjCS_SouthAmerican1969UTM_17S',
                 'esriSRProjCS_SouthAmerican1969UTM_18S',
                 'esriSRProjCS_SouthAmerican1969UTM_19S',
                 'esriSRProjCS_SouthAmerican1969UTM_20S',
                 'esriSRProjCS_SouthAmerican1969UTM_21S',
                 'esriSRProjCS_SouthAmerican1969UTM_22S',
                 'esriSRProjCS_SouthAmerican1969UTM_23S',
                 'esriSRProjCS_SouthAmerican1969UTM_24S',
                 'esriSRProjCS_SouthAmerican1969UTM_25S',
                 'esriSRProjCS_AGD1966AMG_48',
                 'esriSRProjCS_AGD1966AMG_49',
                 'esriSRProjCS_AGD1966AMG_50',
                 'esriSRProjCS_AGD1966AMG_51',
                 'esriSRProjCS_AGD1966AMG_52',
                 'esriSRProjCS_AGD1966AMG_53',
                 'esriSRProjCS_AGD1966AMG_54',
                 'esriSRProjCS_AGD1966AMG_55',
                 'esriSRProjCS_AGD1966AMG_56',
                 'esriSRProjCS_AGD1966AMG_57',
                 'esriSRProjCS_AGD1966AMG_58',
                 'esriSRProjCS_AGD1984AMG_48',
                 'esriSRProjCS_AGD1984AMG_49',
                 'esriSRProjCS_AGD1984AMG_50',
                 'esriSRProjCS_AGD1984AMG_51',
                 'esriSRProjCS_AGD1984AMG_52',
                 'esriSRProjCS_AGD1984AMG_53',
                 'esriSRProjCS_AGD1984AMG_54',
                 'esriSRProjCS_AGD1984AMG_55',
                 'esriSRProjCS_AGD1984AMG_56',
                 'esriSRProjCS_AGD1984AMG_57',
                 'esriSRProjCS_AGD1984AMG_58',
                 'esriSRProjCS_GDA1994MGA_48',
                 'esriSRProjCS_GDA1994MGA_49',
                 'esriSRProjCS_GDA1994MGA_50',
                 'esriSRProjCS_GDA1994MGA_51',
                 'esriSRProjCS_GDA1994MGA_52',
                 'esriSRProjCS_GDA1994MGA_53',
                 'esriSRProjCS_GDA1994MGA_54',
                 'esriSRProjCS_GDA1994MGA_55',
                 'esriSRProjCS_GDA1994MGA_56',
                 'esriSRProjCS_GDA1994MGA_57',
                 'esriSRProjCS_GDA1994MGA_58',
                 'esriSRProjCS_NAD1927SPCS_ALEast',
                 'esriSRProjCS_NAD1927SPCS_ALWest',
                 'esriSRProjCS_NAD1927SPCS_AK1',
                 'esriSRProjCS_NAD1927SPCS_AK2',
                 'esriSRProjCS_NAD1927SPCS_AK3',
                 'esriSRProjCS_NAD1927SPCS_AK4',
                 'esriSRProjCS_NAD1927SPCS_AK5',
                 'esriSRProjCS_NAD1927SPCS_AK6',
                 'esriSRProjCS_NAD1927SPCS_AK7',
                 'esriSRProjCS_NAD1927SPCS_AK8',
                 'esriSRProjCS_NAD1927SPCS_AK9',
                 'esriSRProjCS_NAD1927SPCS_AK10',
                 'esriSRProjCS_NAD1927SPCS_AZEast',
                 'esriSRProjCS_NAD1927SPCS_AZCentral',
                 'esriSRProjCS_NAD1927SPCS_AZWest',
                 'esriSRProjCS_NAD1927SPCS_ARNorth',
                 'esriSRProjCS_NAD1927SPCS_ARSouth',
                 'esriSRProjCS_NAD1927SPCS_CAI',
                 'esriSRProjCS_NAD1927SPCS_CAII',
                 'esriSRProjCS_NAD1927SPCS_CAIII',
                 'esriSRProjCS_NAD1927SPCS_CAIV',
                 'esriSRProjCS_NAD1927SPCS_CAV',
                 'esriSRProjCS_NAD1927SPCS_CAVI',
                 'esriSRProjCS_NAD1927SPCS_CAVII',
                 'esriSRProjCS_NAD1927SPCS_CONorth',
                 'esriSRProjCS_NAD1927SPCS_COCentral',
                 'esriSRProjCS_NAD1927SPCS_COSouth',
                 'esriSRProjCS_NAD1927SPCS_CT',
                 'esriSRProjCS_NAD1927SPCS_DE',
                 'esriSRProjCS_NAD1927SPCS_FLEast',
                 'esriSRProjCS_NAD1927SPCS_FLWest',
                 'esriSRProjCS_NAD1927SPCS_FLNorth',
                 'esriSRProjCS_NAD1927SPCS_GAEast',
                 'esriSRProjCS_NAD1927SPCS_GAWest',
                 'esriSRProjCS_NAD1927SPCS_HI1',
                 'esriSRProjCS_NAD1927SPCS_HI2',
                 'esriSRProjCS_NAD1927SPCS_HI3',
                 'esriSRProjCS_NAD1927SPCS_HI4',
                 'esriSRProjCS_NAD1927SPCS_HI5',
                 'esriSRProjCS_NAD1927SPCS_IDEast',
                 'esriSRProjCS_NAD1927SPCS_IDCentral',
                 'esriSRProjCS_NAD1927SPCS_IDWest',
                 'esriSRProjCS_NAD1927SPCS_ILEast',
                 'esriSRProjCS_NAD1927SPCS_ILWest',
                 'esriSRProjCS_NAD1927SPCS_INEast',
                 'esriSRProjCS_NAD1927SPCS_INWest',
                 'esriSRProjCS_NAD1927SPCS_IANorth',
                 'esriSRProjCS_NAD1927SPCS_IASouth',
                 'esriSRProjCS_NAD1927SPCS_KSNorth',
                 'esriSRProjCS_NAD1927SPCS_KSSouth',
                 'esriSRProjCS_NAD1927SPCS_KYNorth',
                 'esriSRProjCS_NAD1927SPCS_KYSouth',
                 'esriSRProjCS_NAD1927SPCS_LANorth',
                 'esriSRProjCS_NAD1927SPCS_LASouth',
                 'esriSRProjCS_NAD1927SPCS_MEEast',
                 'esriSRProjCS_NAD1927SPCS_MEWest',
                 'esriSRProjCS_NAD1927SPCS_MD',
                 'esriSRProjCS_NAD1927SPCS_MAMainland',
                 'esriSRProjCS_NAD1927SPCS_MAIsland',
                 'esriSRProjCS_NAD1927SPCS_MINorth',
                 'esriSRProjCS_NAD1927SPCS_MICentral',
                 'esriSRProjCS_NAD1927SPCS_MISouth',
                 'esriSRProjCS_NAD1927SPCS_MNNorth',
                 'esriSRProjCS_NAD1927SPCS_MNCentral',
                 'esriSRProjCS_NAD1927SPCS_MNSouth',
                 'esriSRProjCS_NAD1927SPCS_MSEast',
                 'esriSRProjCS_NAD1927SPCS_MSWest',
                 'esriSRProjCS_NAD1927SPCS_MOEast',
                 'esriSRProjCS_NAD1927SPCS_MOCentral',
                 'esriSRProjCS_NAD1927SPCS_MOWest',
                 'esriSRProjCS_NAD1927SPCS_MTNorth',
                 'esriSRProjCS_NAD1927SPCS_MTCentral',
                 'esriSRProjCS_NAD1927SPCS_MTSouth',
                 'esriSRProjCS_NAD1927SPCS_NENorth',
                 'esriSRProjCS_NAD1927SPCS_NESouth',
                 'esriSRProjCS_NAD1927SPCS_NVEast',
                 'esriSRProjCS_NAD1927SPCS_NVCentral',
                 'esriSRProjCS_NAD1927SPCS_NVWest',
                 'esriSRProjCS_NAD1927SPCS_NH',
                 'esriSRProjCS_NAD1927SPCS_NJ',
                 'esriSRProjCS_NAD1927SPCS_NMEast',
                 'esriSRProjCS_NAD1927SPCS_NMCentral',
                 'esriSRProjCS_NAD1927SPCS_NMWest',
                 'esriSRProjCS_NAD1927SPCS_NYEast',
                 'esriSRProjCS_NAD1927SPCS_NYCentral',
                 'esriSRProjCS_NAD1927SPCS_NYWest',
                 'esriSRProjCS_NAD1927SPCS_NYLongIsland',
                 'esriSRProjCS_NAD1927SPCS_NC',
                 'esriSRProjCS_NAD1927SPCS_NDNorth',
                 'esriSRProjCS_NAD1927SPCS_NDSouth',
                 'esriSRProjCS_NAD1927SPCS_OHNorth',
                 'esriSRProjCS_NAD1927SPCS_OHSouth',
                 'esriSRProjCS_NAD1927SPCS_OKNorth',
                 'esriSRProjCS_NAD1927SPCS_OKSouth',
                 'esriSRProjCS_NAD1927SPCS_ORNorth',
                 'esriSRProjCS_NAD1927SPCS_ORSouth',
                 'esriSRProjCS_NAD1927SPCS_PANorth',
                 'esriSRProjCS_NAD1927SPCS_PASouth',
                 'esriSRProjCS_NAD1927SPCS_RI',
                 'esriSRProjCS_NAD1927SPCS_SCNorth',
                 'esriSRProjCS_NAD1927SPCS_SCSouth',
                 'esriSRProjCS_NAD1927SPCS_SDNorth',
                 'esriSRProjCS_NAD1927SPCS_SDSouth',
                 'esriSRProjCS_NAD1927SPCS_TN',
                 'esriSRProjCS_NAD1927SPCS_TXNorth',
                 'esriSRProjCS_NAD1927SPCS_TXNorthCentral',
                 'esriSRProjCS_NAD1927SPCS_TXCentral',
                 'esriSRProjCS_NAD1927SPCS_TXSouthCentral',
                 'esriSRProjCS_NAD1927SPCS_TXSouth',
                 'esriSRProjCS_NAD1927SPCS_UTNorth',
                 'esriSRProjCS_NAD1927SPCS_UTCentral',
                 'esriSRProjCS_NAD1927SPCS_UTSouth',
                 'esriSRProjCS_NAD1927SPCS_VT',
                 'esriSRProjCS_NAD1927SPCS_VANorth',
                 'esriSRProjCS_NAD1927SPCS_VASouth',
                 'esriSRProjCS_NAD1927SPCS_WANorth',
                 'esriSRProjCS_NAD1927SPCS_WASouth',
                 'esriSRProjCS_NAD1927SPCS_WVNorth',
                 'esriSRProjCS_NAD1927SPCS_WVSouth',
                 'esriSRProjCS_NAD1927SPCS_WINorth',
                 'esriSRProjCS_NAD1927SPCS_WICentral',
                 'esriSRProjCS_NAD1927SPCS_WISouth',
                 'esriSRProjCS_NAD1927SPCS_WYEast',
                 'esriSRProjCS_NAD1927SPCS_WYEastCentral',
                 'esriSRProjCS_NAD1927SPCS_WYWestCentral',
                 'esriSRProjCS_NAD1927SPCS_WYWest',
                 'esriSRProjCS_NAD1927SPCS_PuertoRico',
                 'esriSRProjCS_NAD1927SPCS_StCroix',
                 'esriSRProjCS_NAD1927SPCS_Guam',
                 'esriSRProjCS_NAD1983SPCS_ALEast',
                 'esriSRProjCS_NAD1983SPCS_ALWest',
                 'esriSRProjCS_NAD1983SPCS_AK1',
                 'esriSRProjCS_NAD1983SPCS_AK2',
                 'esriSRProjCS_NAD1983SPCS_AK3',
                 'esriSRProjCS_NAD1983SPCS_AK4',
                 'esriSRProjCS_NAD1983SPCS_AK5',
                 'esriSRProjCS_NAD1983SPCS_AK6',
                 'esriSRProjCS_NAD1983SPCS_AK7',
                 'esriSRProjCS_NAD1983SPCS_AK8',
                 'esriSRProjCS_NAD1983SPCS_AK9',
                 'esriSRProjCS_NAD1983SPCS_AK10',
                 'esriSRProjCS_NAD1983SPCS_AZEast',
                 'esriSRProjCS_NAD1983SPCS_AZCentral',
                 'esriSRProjCS_NAD1983SPCS_AZWest',
                 'esriSRProjCS_NAD1983SPCS_AKNorth',
                 'esriSRProjCS_NAD1983SPCS_AKSouth',
                 'esriSRProjCS_NAD1983SPCS_CAI',
                 'esriSRProjCS_NAD1983SPCS_CAII',
                 'esriSRProjCS_NAD1983SPCS_CAIII',
                 'esriSRProjCS_NAD1983SPCS_CAIV',
                 'esriSRProjCS_NAD1983SPCS_CAV',
                 'esriSRProjCS_NAD1983SPCS_CAVI',
                 'esriSRProjCS_NAD1983SPCS_CONorth',
                 'esriSRProjCS_NAD1983SPCS_COCentral',
                 'esriSRProjCS_NAD1983SPCS_COSouth',
                 'esriSRProjCS_NAD1983SPCS_CT',
                 'esriSRProjCS_NAD1983SPCS_DE',
                 'esriSRProjCS_NAD1983SPCS_FLEast',
                 'esriSRProjCS_NAD1983SPCS_FLWest',
                 'esriSRProjCS_NAD1983SPCS_FLNorth',
                 'esriSRProjCS_NAD1983SPCS_GAEast',
                 'esriSRProjCS_NAD1983SPCS_GAWest',
                 'esriSRProjCS_NAD1983SPCS_HI_1',
                 'esriSRProjCS_NAD1983SPCS_HI_2',
                 'esriSRProjCS_NAD1983SPCS_HI_3',
                 'esriSRProjCS_NAD1983SPCS_HI_4',
                 'esriSRProjCS_NAD1983SPCS_HI_5',
                 'esriSRProjCS_NAD1983SPCS_IDEast',
                 'esriSRProjCS_NAD1983SPCS_IDCentral',
                 'esriSRProjCS_NAD1983SPCS_IDWest',
                 'esriSRProjCS_NAD1983SPCS_ILEast',
                 'esriSRProjCS_NAD1983SPCS_ILWest',
                 'esriSRProjCS_NAD1983SPCS_INEast',
                 'esriSRProjCS_NAD1983SPCS_INWest',
                 'esriSRProjCS_NAD1983SPCS_IANorth',
                 'esriSRProjCS_NAD1983SPCS_IASouth',
                 'esriSRProjCS_NAD1983SPCS_KSNorth',
                 'esriSRProjCS_NAD1983SPCS_KSSouth',
                 'esriSRProjCS_NAD1983SPCS_KYNorth',
                 'esriSRProjCS_NAD1983SPCS_KYSouth',
                 'esriSRProjCS_NAD1983SPCS_LANorth',
                 'esriSRProjCS_NAD1983SPCS_LASouth',
                 'esriSRProjCS_NAD1983SPCS_MEEast',
                 'esriSRProjCS_NAD1983SPCS_MEWest',
                 'esriSRProjCS_NAD1983SPCS_MD',
                 'esriSRProjCS_NAD1983SPCS_MAMainland',
                 'esriSRProjCS_NAD1983SPCS_MAIsland',
                 'esriSRProjCS_NAD1983SPCS_MINorth',
                 'esriSRProjCS_NAD1983SPCS_MICentral',
                 'esriSRProjCS_NAD1983SPCS_MISouth',
                 'esriSRProjCS_NAD1983SPCS_MNNorth',
                 'esriSRProjCS_NAD1983SPCS_MNCentral',
                 'esriSRProjCS_NAD1983SPCS_MNSouth',
                 'esriSRProjCS_NAD1983SPCS_MSEast',
                 'esriSRProjCS_NAD1983SPCS_MSWest',
                 'esriSRProjCS_NAD1983SPCS_MOEast',
                 'esriSRProjCS_NAD1983SPCS_MOCentral',
                 'esriSRProjCS_NAD1983SPCS_MOWest',
                 'esriSRProjCS_NAD1983SPCS_MT',
                 'esriSRProjCS_NAD1983SPCS_NE',
                 'esriSRProjCS_NAD1983SPCS_NVEast',
                 'esriSRProjCS_NAD1983SPCS_NVCentral',
                 'esriSRProjCS_NAD1983SPCS_NVWest',
                 'esriSRProjCS_NAD1983SPCS_NH',
                 'esriSRProjCS_NAD1983SPCS_NJ',
                 'esriSRProjCS_NAD1983SPCS_NMEast',
                 'esriSRProjCS_NAD1983SPCS_NMCentral',
                 'esriSRProjCS_NAD1983SPCS_NMWest',
                 'esriSRProjCS_NAD1983SPCS_NYEast',
                 'esriSRProjCS_NAD1983SPCS_NYCentral',
                 'esriSRProjCS_NAD1983SPCS_NYWest',
                 'esriSRProjCS_NAD1983SPCS_NYLongIsland',
                 'esriSRProjCS_NAD1983SPCS_NC',
                 'esriSRProjCS_NAD1983SPCS_NDNorth',
                 'esriSRProjCS_NAD1983SPCS_NDSouth',
                 'esriSRProjCS_NAD1983SPCS_OHNorth',
                 'esriSRProjCS_NAD1983SPCS_OHSouth',
                 'esriSRProjCS_NAD1983SPCS_OKNorth',
                 'esriSRProjCS_NAD1983SPCS_OKSouth',
                 'esriSRProjCS_NAD1983SPCS_ORNorth',
                 'esriSRProjCS_NAD1983SPCS_ORSouth',
                 'esriSRProjCS_NAD1983SPCS_PANorth',
                 'esriSRProjCS_NAD1983SPCS_PASouth',
                 'esriSRProjCS_NAD1983SPCS_RI',
                 'esriSRProjCS_NAD1983SPCS_SC',
                 'esriSRProjCS_NAD1983SPCS_SDNorth',
                 'esriSRProjCS_NAD1983SPCS_SDSouth',
                 'esriSRProjCS_NAD1983SPCS_TN',
                 'esriSRProjCS_NAD1983SPCS_TXNorth',
                 'esriSRProjCS_NAD1983SPCS_TXNorthCentral',
                 'esriSRProjCS_NAD1983SPCS_TXCentral',
                 'esriSRProjCS_NAD1983SPCS_TXSouthCentral',
                 'esriSRProjCS_NAD1983SPCS_TXSouth',
                 'esriSRProjCS_NAD1983SPCS_UTNorth',
                 'esriSRProjCS_NAD1983SPCS_UTCentral',
                 'esriSRProjCS_NAD1983SPCS_UTSouth',
                 'esriSRProjCS_NAD1983SPCS_VT',
                 'esriSRProjCS_NAD1983SPCS_VANorth',
                 'esriSRProjCS_NAD1983SPCS_VASouth',
                 'esriSRProjCS_NAD1983SPCS_WANorth',
                 'esriSRProjCS_NAD1983SPCS_WASouth',
                 'esriSRProjCS_NAD1983SPCS_WVNorth',
                 'esriSRProjCS_NAD1983SPCS_WVSouth',
                 'esriSRProjCS_NAD1983SPCS_WINorth',
                 'esriSRProjCS_NAD1983SPCS_WICentral',
                 'esriSRProjCS_NAD1983SPCS_WISouth',
                 'esriSRProjCS_NAD1983SPCS_WYEast',
                 'esriSRProjCS_NAD1983SPCS_WYEastCentral',
                 'esriSRProjCS_NAD1983SPCS_WYWestCentral',
                 'esriSRProjCS_NAD1983SPCS_WYWest',
                 'esriSRProjCS_NAD1983SPCS_PRStCroix',
                 'esriSRProjCS_NAD1983SPCS_Guam',
                 'esriSRProjCS_NADMichSPCS_MINorth',
                 'esriSRProjCS_NADMichSPCS_MICentral',
                 'esriSRProjCS_NADMichSPCS_MISouth',
                 'esriSRProjCS_NADMichSPCS_MIEastOld',
                 'esriSRProjCS_NADMichSPCS_MICentralOld',
                 'esriSRProjCS_NADMichSPCS_MIWestOld',
                 'esriSRProjCS_NAD1983HARNSPCS_ALEast',
                 'esriSRProjCS_NAD1983HARNSPCS_ALWest',
                 'esriSRProjCS_NAD1983HARNSPCS_AZEast',
                 'esriSRProjCS_NAD1983HARNSPCS_AZCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_AZWest',
                 'esriSRProjCS_NAD1983HARNSPCS_CAI',
                 'esriSRProjCS_NAD1983HARNSPCS_CAII',
                 'esriSRProjCS_NAD1983HARNSPCS_CAIII',
                 'esriSRProjCS_NAD1983HARNSPCS_CAIV',
                 'esriSRProjCS_NAD1983HARNSPCS_CAV',
                 'esriSRProjCS_NAD1983HARNSPCS_CAVI',
                 'esriSRProjCS_NAD1983HARNSPCS_CONorth',
                 'esriSRProjCS_NAD1983HARNSPCS_COCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_COSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_CT',
                 'esriSRProjCS_NAD1983HARNSPCS_DE',
                 'esriSRProjCS_NAD1983HARNSPCS_FLEast',
                 'esriSRProjCS_NAD1983HARNSPCS_FLWest',
                 'esriSRProjCS_NAD1983HARNSPCS_FLNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_GAEast',
                 'esriSRProjCS_NAD1983HARNSPCS_GAWest',
                 'esriSRProjCS_NAD1983HARNSPCS_HI_1',
                 'esriSRProjCS_NAD1983HARNSPCS_HI_2',
                 'esriSRProjCS_NAD1983HARNSPCS_HI_3',
                 'esriSRProjCS_NAD1983HARNSPCS_HI_4',
                 'esriSRProjCS_NAD1983HARNSPCS_HI_5',
                 'esriSRProjCS_NAD1983HARNSPCS_IDEast',
                 'esriSRProjCS_NAD1983HARNSPCS_IDCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_IDWest',
                 'esriSRProjCS_NAD1983HARNSPCS_ILWest',
                 'esriSRProjCS_NAD1983HARNSPCS_ILEast',
                 'esriSRProjCS_NAD1983HARNSPCS_INWest',
                 'esriSRProjCS_NAD1983HARNSPCS_INEast',
                 'esriSRProjCS_NAD1983HARNSPCS_KSNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_KSSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_KYNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_KYSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_LANorth',
                 'esriSRProjCS_NAD1983HARNSPCS_LASouth',
                 'esriSRProjCS_NAD1983HARNSPCS_MEEast',
                 'esriSRProjCS_NAD1983HARNSPCS_MEWest',
                 'esriSRProjCS_NAD1983HARNSPCS_MD',
                 'esriSRProjCS_NAD1983HARNSPCS_MAMainland',
                 'esriSRProjCS_NAD1983HARNSPCS_MAIsland',
                 'esriSRProjCS_NAD1983HARNSPCS_MINorth',
                 'esriSRProjCS_NAD1983HARNSPCS_MICentral',
                 'esriSRProjCS_NAD1983HARNSPCS_MISouth',
                 'esriSRProjCS_NAD1983HARNSPCS_MSEast',
                 'esriSRProjCS_NAD1983HARNSPCS_MSWest',
                 'esriSRProjCS_NAD1983HARNSPCS_MT',
                 'esriSRProjCS_NAD1983HARNSPCS_NE',
                 'esriSRProjCS_NAD1983HARNSPCS_NVEast',
                 'esriSRProjCS_NAD1983HARNSPCS_NVCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_NVWest',
                 'esriSRProjCS_NAD1983HARNSPCS_NH',
                 'esriSRProjCS_NAD1983HARNSPCS_NMEast',
                 'esriSRProjCS_NAD1983HARNSPCS_NMCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_NMWest',
                 'esriSRProjCS_NAD1983HARNSPCS_NYEast',
                 'esriSRProjCS_NAD1983HARNSPCS_NYCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_NYWest',
                 'esriSRProjCS_NAD1983HARNSPCS_NYLongIsland',
                 'esriSRProjCS_NAD1983HARNSPCS_NDNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_NDSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_OHNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_OHSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_OKNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_OKSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_ORNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_ORSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_RI',
                 'esriSRProjCS_NAD1983HARNSPCS_SDNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_SDSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_TN',
                 'esriSRProjCS_NAD1983HARNSPCS_TXNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_TXNorthCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_TXCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_TXSouthCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_TXSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_UTNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_UTCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_UTSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_VT',
                 'esriSRProjCS_NAD1983HARNSPCS_VANorth',
                 'esriSRProjCS_NAD1983HARNSPCS_VASouth',
                 'esriSRProjCS_NAD1983HARNSPCS_WANorth',
                 'esriSRProjCS_NAD1983HARNSPCS_WASouth',
                 'esriSRProjCS_NAD1983HARNSPCS_WVNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_WVSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_WINorth',
                 'esriSRProjCS_NAD1983HARNSPCS_WICentral',
                 'esriSRProjCS_NAD1983HARNSPCS_WISouth',
                 'esriSRProjCS_NAD1983HARNSPCS_WYEast',
                 'esriSRProjCS_NAD1983HARNSPCS_WYEastCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_WYWestCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_WYWest',
                 'esriSRProjCS_NAD1983HARNSPCS_PRStCroix',
                 'esriSRProjCS_NAD1983SPCS_ALEastFT',
                 'esriSRProjCS_NAD1983SPCS_ALWestFT',
                 'esriSRProjCS_NAD1983SPCS_AK1FT',
                 'esriSRProjCS_NAD1983SPCS_AK2FT',
                 'esriSRProjCS_NAD1983SPCS_AK3FT',
                 'esriSRProjCS_NAD1983SPCS_AK4FT',
                 'esriSRProjCS_NAD1983SPCS_AK5FT',
                 'esriSRProjCS_NAD1983SPCS_AK6FT',
                 'esriSRProjCS_NAD1983SPCS_AK7FT',
                 'esriSRProjCS_NAD1983SPCS_AK8FT',
                 'esriSRProjCS_NAD1983SPCS_AK9FT',
                 'esriSRProjCS_NAD1983SPCS_AK10FT',
                 'esriSRProjCS_NAD1983SPCS_AZEastFT',
                 'esriSRProjCS_NAD1983SPCS_AZCentralFT',
                 'esriSRProjCS_NAD1983SPCS_AZWestFT',
                 'esriSRProjCS_NAD1983SPCS_ARNorthFT',
                 'esriSRProjCS_NAD1983SPCS_ARSouthFT',
                 'esriSRProjCS_NAD1983SPCS_CAIFT',
                 'esriSRProjCS_NAD1983SPCS_CAIIFT',
                 'esriSRProjCS_NAD1983SPCS_CAIIIFT',
                 'esriSRProjCS_NAD1983SPCS_CAIVFT',
                 'esriSRProjCS_NAD1983SPCS_CAVFT',
                 'esriSRProjCS_NAD1983SPCS_CAVIFT',
                 'esriSRProjCS_NAD1983SPCS_CONorthFT',
                 'esriSRProjCS_NAD1983SPCS_COCentFT',
                 'esriSRProjCS_NAD1983SPCS_COSouthFT',
                 'esriSRProjCS_NAD1983SPCS_CTFT',
                 'esriSRProjCS_NAD1983SPCS_DEFT',
                 'esriSRProjCS_NAD1983SPCS_FLEastFT',
                 'esriSRProjCS_NAD1983SPCS_FLWestFT',
                 'esriSRProjCS_NAD1983SPCS_FLNorthFT',
                 'esriSRProjCS_NAD1983SPCS_GAEastFT',
                 'esriSRProjCS_NAD1983SPCS_GAWestFT',
                 'esriSRProjCS_NAD1983SPCS_HI_1FT',
                 'esriSRProjCS_NAD1983SPCS_HI_2FT',
                 'esriSRProjCS_NAD1983SPCS_HI_3FT',
                 'esriSRProjCS_NAD1983SPCS_HI_4FT',
                 'esriSRProjCS_NAD1983SPCS_HI_5FT',
                 'esriSRProjCS_NAD1983SPCS_IDEastFT',
                 'esriSRProjCS_NAD1983SPCS_IDCentralFT',
                 'esriSRProjCS_NAD1983SPCS_IDWestFT',
                 'esriSRProjCS_NAD1983SPCS_ILEastFT',
                 'esriSRProjCS_NAD1983SPCS_ILWestFT',
                 'esriSRProjCS_NAD1983SPCS_INEastFT',
                 'esriSRProjCS_NAD1983SPCS_INWestFT',
                 'esriSRProjCS_NAD1983SPCS_IANorthFT',
                 'esriSRProjCS_NAD1983SPCS_IASouthFT',
                 'esriSRProjCS_NAD1983SPCS_KSNorthFT',
                 'esriSRProjCS_NAD1983SPCS_KSSouthFT',
                 'esriSRProjCS_NAD1983SPCS_KYNorthFT',
                 'esriSRProjCS_NAD1983SPCS_KYSouthFT',
                 'esriSRProjCS_NAD1983SPCS_LANorthFT',
                 'esriSRProjCS_NAD1983SPCS_LASouthFT',
                 'esriSRProjCS_NAD1983SPCS_MEEastFT',
                 'esriSRProjCS_NAD1983SPCS_MEWestFT',
                 'esriSRProjCS_NAD1983SPCS_MDFT',
                 'esriSRProjCS_NAD1983SPCS_MAMainlandFT',
                 'esriSRProjCS_NAD1983SPCS_MAIslandFT',
                 'esriSRProjCS_NAD1983SPCS_MINorthFT',
                 'esriSRProjCS_NAD1983SPCS_MICentralFT',
                 'esriSRProjCS_NAD1983SPCS_MISouthFT',
                 'esriSRProjCS_NAD1983SPCS_MNNorthFT',
                 'esriSRProjCS_NAD1983SPCS_MNCentralFT',
                 'esriSRProjCS_NAD1983SPCS_MNSouthFT',
                 'esriSRProjCS_NAD1983SPCS_MSEastFT',
                 'esriSRProjCS_NAD1983SPCS_MSWestFT',
                 'esriSRProjCS_NAD1983SPCS_MOEastFT',
                 'esriSRProjCS_NAD1983SPCS_MOCentralFT',
                 'esriSRProjCS_NAD1983SPCS_MOWestFT',
                 'esriSRProjCS_NAD1983SPCS_MTFT',
                 'esriSRProjCS_NAD1983SPCS_NEFT',
                 'esriSRProjCS_NAD1983SPCS_NVEastFT',
                 'esriSRProjCS_NAD1983SPCS_NVCentralFT',
                 'esriSRProjCS_NAD1983SPCS_NVWestFT',
                 'esriSRProjCS_NAD1983SPCS_NHFT',
                 'esriSRProjCS_NAD1983SPCS_NJFT',
                 'esriSRProjCS_NAD1983SPCS_NMEastFT',
                 'esriSRProjCS_NAD1983SPCS_NMCentralFT',
                 'esriSRProjCS_NAD1983SPCS_NMWestFT',
                 'esriSRProjCS_NAD1983SPCS_NYEastFT',
                 'esriSRProjCS_NAD1983SPCS_NYCentralFT',
                 'esriSRProjCS_NAD1983SPCS_NYWestFT',
                 'esriSRProjCS_NAD1983SPCS_NYLongIslFT',
                 'esriSRProjCS_NAD1983SPCS_NCFT',
                 'esriSRProjCS_NAD1983SPCS_NDNorthFT',
                 'esriSRProjCS_NAD1983SPCS_NDSouthFT',
                 'esriSRProjCS_NAD1983SPCS_OHNorthFT',
                 'esriSRProjCS_NAD1983SPCS_OHSouthFT',
                 'esriSRProjCS_NAD1983SPCS_OKNorthFT',
                 'esriSRProjCS_NAD1983SPCS_OKSouthFT',
                 'esriSRProjCS_NAD1983SPCS_ORNorthFT',
                 'esriSRProjCS_NAD1983SPCS_ORSouthFT',
                 'esriSRProjCS_NAD1983SPCS_PANorthFT',
                 'esriSRProjCS_NAD1983SPCS_PASouthFT',
                 'esriSRProjCS_NAD1983SPCS_RIFT',
                 'esriSRProjCS_NAD1983SPCS_SCFT',
                 'esriSRProjCS_NAD1983SPCS_SDNorthFT',
                 'esriSRProjCS_NAD1983SPCS_SDSouthFT',
                 'esriSRProjCS_NAD1983SPCS_TNFT',
                 'esriSRProjCS_NAD1983SPCS_TXNorthFT',
                 'esriSRProjCS_NAD1983SPCS_TXNorthCentFT',
                 'esriSRProjCS_NAD1983SPCS_TXCentralFT',
                 'esriSRProjCS_NAD1983SPCS_TXSouthCentFT',
                 'esriSRProjCS_NAD1983SPCS_TXSouthFT',
                 'esriSRProjCS_NAD1983SPCS_UTNorthFT',
                 'esriSRProjCS_NAD1983SPCS_UTCentralFT',
                 'esriSRProjCS_NAD1983SPCS_UTSouthFT',
                 'esriSRProjCS_NAD1983SPCS_VTFT',
                 'esriSRProjCS_NAD1983SPCS_VANorthFT',
                 'esriSRProjCS_NAD1983SPCS_VASouthFT',
                 'esriSRProjCS_NAD1983SPCS_WANorthFT',
                 'esriSRProjCS_NAD1983SPCS_WASouthFT',
                 'esriSRProjCS_NAD1983SPCS_WVNorthFT',
                 'esriSRProjCS_NAD1983SPCS_WVSouthFT',
                 'esriSRProjCS_NAD1983SPCS_WINorthFT',
                 'esriSRProjCS_NAD1983SPCS_WICentralFT',
                 'esriSRProjCS_NAD1983SPCS_WISouthFT',
                 'esriSRProjCS_NAD1983SPCS_WYEastFT',
                 'esriSRProjCS_NAD1983SPCS_WYEastCentralFT',
                 'esriSRProjCS_NAD1983SPCS_WYWestCentralFT',
                 'esriSRProjCS_NAD1983SPCS_WYWestFT',
                 'esriSRProjCS_NAD1983SPCS_PRStCroixFT',
                 'esriSRProjCS_NAD1983SPCS_GuamFT',
                 'esriSRProjCS_AdindanUTM_37N',
                 'esriSRProjCS_AdindanUTM_38N',
                 'esriSRProjCS_AfgooyeUTM_38N',
                 'esriSRProjCS_AfgooyeUTM_39N',
                 'esriSRProjCS_AinElAbd1970UTM_37N',
                 'esriSRProjCS_AinElAbd1970UTM_38N',
                 'esriSRProjCS_AinElAbd1970UTM_39N',
                 'esriSRProjCS_AratuUTM_22S',
                 'esriSRProjCS_AratuUTM_23S',
                 'esriSRProjCS_AratuUTM_24S',
                 'esriSRProjCS_BataviaUTM_48S',
                 'esriSRProjCS_BataviaUTM_49S',
                 'esriSRProjCS_BataviaUTM_50S',
                 'esriSRProjCS_BogotaUTM_17N',
                 'esriSRProjCS_BogotaUTM_18N',
                 'esriSRProjCS_CamacupaUTM_32S',
                 'esriSRProjCS_CamacupaUTM_33S',
                 'esriSRProjCS_CarthageUTM_32N',
                 'esriSRProjCS_CorregoAlegreUTM_23S',
                 'esriSRProjCS_CorregoAlegreUTM_24S',
                 'esriSRProjCS_Datum73UTM_29N',
                 'esriSRProjCS_DoualaUTM_32N',
                 'esriSRProjCS_FahudUTM_39N',
                 'esriSRProjCS_FahudUTM_40N',
                 'esriSRProjCS_GarouaUTM_33N',
                 'esriSRProjCS_GreekGrid',
                 'esriSRProjCS_Indonesia1974UTM_46N',
                 'esriSRProjCS_Indonesia1974UTM_47N',
                 'esriSRProjCS_Indonesia1974UTM_48N',
                 'esriSRProjCS_Indonesia1974UTM_49N',
                 'esriSRProjCS_Indonesia1974UTM_50N',
                 'esriSRProjCS_Indonesia1974UTM_51N',
                 'esriSRProjCS_Indonesia1974UTM_52N',
                 'esriSRProjCS_Indonesia1974UTM_53N',
                 'esriSRProjCS_Indonesia1974UTM_46S',
                 'esriSRProjCS_Indonesia1974UTM_47S',
                 'esriSRProjCS_Indonesia1974UTM_48S',
                 'esriSRProjCS_Indonesia1974UTM_49S',
                 'esriSRProjCS_Indonesia1974UTM_50S',
                 'esriSRProjCS_Indonesia1974UTM_51S',
                 'esriSRProjCS_Indonesia1974UTM_52S',
                 'esriSRProjCS_Indonesia1974UTM_53S',
                 'esriSRProjCS_Indonesia1974UTM_54S',
                 'esriSRProjCS_Indian1954UTM_47N',
                 'esriSRProjCS_Indian1954UTM_48N',
                 'esriSRProjCS_Indian1975UTM_47N',
                 'esriSRProjCS_Indian1975UTM_48N',
                 'esriSRProjCS_KertauUTM_47N',
                 'esriSRProjCS_KertauUTM_48N',
                 'esriSRProjCS_LaCanoaUTM_18N',
                 'esriSRProjCS_LaCanoaUTM_19N',
                 'esriSRProjCS_LaCanoaUTM_20N',
                 'esriSRProjCS_LaCanoaUTM_21N',
                 'esriSRProjCS_LomeUTM_31N',
                 'esriSRProjCS_MPoralokoUTM_32N',
                 'esriSRProjCS_MPoralokoUTM_32S',
                 'esriSRProjCS_Malongo1987UTM_32S',
                 'esriSRProjCS_MassawaUTM_37N',
                 'esriSRProjCS_MhastUTM_32S',
                 'esriSRProjCS_MinnaUTM_31N',
                 'esriSRProjCS_MinnaUTM_32N',
                 'esriSRProjCS_Nahrwan1967UTM_38N',
                 'esriSRProjCS_Nahrwan1967UTM_39N',
                 'esriSRProjCS_Nahrwan1967UTM_40N',
                 'esriSRProjCS_NGNUTM_38N',
                 'esriSRProjCS_NGNUTM_39N',
                 'esriSRProjCS_NordSahara1959UTM_29N',
                 'esriSRProjCS_NordSahara1959UTM_30N',
                 'esriSRProjCS_NordSahara1959UTM_31N',
                 'esriSRProjCS_NordSahara1959UTM_32N',
                 'esriSRProjCS_Naparima1972UTM_20N',
                 'esriSRProjCS_PointeNoireUTM_32S',
                 'esriSRProjCS_PSADUTM_18N',
                 'esriSRProjCS_PSADUTM_19N',
                 'esriSRProjCS_PSADUTM_20N',
                 'esriSRProjCS_PSADUTM_21N',
                 'esriSRProjCS_PSADUTM_17S',
                 'esriSRProjCS_PSADUTM_18S',
                 'esriSRProjCS_PSADUTM_19S',
                 'esriSRProjCS_PSADUTM_20S',
                 'esriSRProjCS_PSADUTM_22S',
                 'esriSRProjCS_SapperHill1943UTM_20S',
                 'esriSRProjCS_SapperHill1943UTM_21S',
                 'esriSRProjCS_SchwarzeckUTM_33S',
                 'esriSRProjCS_SudanUTM_35N',
                 'esriSRProjCS_SudanUTM_36N',
                 'esriSRProjCS_Tananarive1925UTM_38S',
                 'esriSRProjCS_Tananarive1925UTM_39S',
                 'esriSRProjCS_TrucialCoast1948UTM_39N',
                 'esriSRProjCS_TrucialCoast1948UTM_40N',
                 'esriSRProjCS_Timbalai1948UTM_49N',
                 'esriSRProjCS_Timbalai1948UTM_50N',
                 'esriSRProjCS_Yoff1972UTM_28N',
                 'esriSRProjCS_Zanderij1972UTM_21N',
                 'esriSRProjCS_ATS1977NewBrunswick',
                 'esriSRProjCS_ATS1977PrinceEdwardIs',
                 'esriSRProjCS_NAD1983CSRS98NewBrunswick',
                 'esriSRProjCS_NAD1983CSRS98UTM_19N',
                 'esriSRProjCS_NAD1983CSRS98UTM_20N',
                 'esriSRProjCS_NAD1983QuebecLambert',
                 'esriSRProjCS_ATS1977MTM_4NS',
                 'esriSRProjCS_ATS1977MTM_5NS',
                 'esriSRProjCS_AmersfoortRD_Old',
                 'esriSRProjCS_AmersfoortRD_New',
                 'esriSRProjCS_KuwaitUtilityKTM',
                 'esriSRProjCS_Philippines_I',
                 'esriSRProjCS_Philippines_II',
                 'esriSRProjCS_Philippines_III',
                 'esriSRProjCS_Philippines_IV',
                 'esriSRProjCS_Philippines_V',
                 'esriSRProjCS_AustriaFerroWest',
                 'esriSRProjCS_AustriaFerroCentral',
                 'esriSRProjCS_AustriaFerroEast',
                 'esriSRProjCS_MGI_M28',
                 'esriSRProjCS_MGI_M31',
                 'esriSRProjCS_MGI_M34',
                 'esriSRProjCS_MGIAustriaLambert',
                 'esriSRProjCS_MonteMarioRomeItaly1',
                 'esriSRProjCS_MonteMarioRomeItaly2',
                 'esriSRProjCS_MonteMarioItaly1',
                 'esriSRProjCS_MonteMarioItaly2',
                 'esriSRProjCS_Argentina_1',
                 'esriSRProjCS_Argentina_2',
                 'esriSRProjCS_Argentina_3',
                 'esriSRProjCS_Argentina_4',
                 'esriSRProjCS_Argentina_5',
                 'esriSRProjCS_Argentina_6',
                 'esriSRProjCS_Argentina_7',
                 'esriSRProjCS_Germany_1',
                 'esriSRProjCS_Germany_2',
                 'esriSRProjCS_Germany_3',
                 'esriSRProjCS_Germany_4',
                 'esriSRProjCS_Germany_5',
                 'esriSRProjCS_BahrainStateGrid',
                 'esriSRProjCS_ColombiaWest',
                 'esriSRProjCS_ColombiaBogota',
                 'esriSRProjCS_ColombiaECentral',
                 'esriSRProjCS_ColombiaEast',
                 'esriSRProjCS_EgyptBlueBelt',
                 'esriSRProjCS_EgyptRedBelt',
                 'esriSRProjCS_EgyptPurpleBelt',
                 'esriSRProjCS_EgyptExtendedPurpleBelt',
                 'esriSRProjCS_GhanaMetreGrid',
                 'esriSRProjCS_IrishNationalGrid',
                 'esriSRProjCS_NZGD1949NorthIsland',
                 'esriSRProjCS_NZGD1949SouthIsland',
                 'esriSRProjCS_NigeriaWestBelt',
                 'esriSRProjCS_NigeriaMidBelt',
                 'esriSRProjCS_NigeriaEastBelt',
                 'esriSRProjCS_PeruWest',
                 'esriSRProjCS_PeruCentral',
                 'esriSRProjCS_PeruEast',
                 'esriSRProjCS_LisbonPortugueseGrid',
                 'esriSRProjCS_QatarNationalGrid',
                 'esriSRProjCS_BritishNationalGrid',
                 'esriSRProjCS_SwedishNationalGrid',
                 'esriSRProjCS_VoirolNordAlgerieAncienne',
                 'esriSRProjCS_VoirolSudAlgerieAncienne',
                 'esriSRProjCS_VoirolNordAlgerie',
                 'esriSRProjCS_VoirolSudAlgerie',
                 'esriSRProjCS_NorddeGuerre',
                 'esriSRProjCS_FranceI',
                 'esriSRProjCS_FranceII',
                 'esriSRProjCS_FranceIII',
                 'esriSRProjCS_FranceIV',
                 'esriSRProjCS_NordFrance',
                 'esriSRProjCS_CentreFrance',
                 'esriSRProjCS_SudFrance',
                 'esriSRProjCS_Corse',
                 'esriSRProjCS_Kalianpur1880India_0',
                 'esriSRProjCS_Kalianpur1880India_I',
                 'esriSRProjCS_Kalianpur1880India_IIa',
                 'esriSRProjCS_Kalianpur1880India_IIb',
                 'esriSRProjCS_Kalianpur1880India_III',
                 'esriSRProjCS_Kalianpur1880India_IV',
                 'esriSRProjCS_Kalianpur1937India_IIb',
                 'esriSRProjCS_Kalianpur1962India_I',
                 'esriSRProjCS_Kalianpur1962India_IIa',
                 'esriSRProjCS_Kalianpur1975India_I',
                 'esriSRProjCS_Kalianpur1975India_IIa',
                 'esriSRProjCS_Kalianpur1975India_IIb',
                 'esriSRProjCS_Kalianpur1975India_III',
                 'esriSRProjCS_Kalianpur1975India_IV',
                 'esriSRProjCS_Kalianpur1937_UTM45N',
                 'esriSRProjCS_Kalianpur1937_UTM46N',
                 'esriSRProjCS_Kalianpur1962_UTM41N',
                 'esriSRProjCS_Kalianpur1962_UTM42N',
                 'esriSRProjCS_Kalianpur1962_UTM43N',
                 'esriSRProjCS_Kalianpur1975_UTM42N',
                 'esriSRProjCS_Kalianpur1975_UTM43N',
                 'esriSRProjCS_Kalianpur1975_UTM44N',
                 'esriSRProjCS_Kalianpur1975_UTM45N',
                 'esriSRProjCS_Kalianpur1975_UTM46N',
                 'esriSRProjCS_Kalianpur1975_UTM47N',
                 'esriSRProjCS_Jamaica1875OldGrid',
                 'esriSRProjCS_JAD1969JamaicaGrid',
                 'esriSRProjCS_MerchichNordMaroc',
                 'esriSRProjCS_MerchichSudMaroc',
                 'esriSRProjCS_MerchichSahara',
                 'esriSRProjCS_CarthageNordTunisie',
                 'esriSRProjCS_CarthageSudTunisie',
                 'esriSRProjCS_KOC_Lambert',
                 'esriSRProjCS_BelgeLambert1950',
                 'esriSRProjCS_DealulPisculuiStereo1933',
                 'esriSRProjCS_DealulPisculuiStereo1970',
                 'esriSRProjCS_WGS1984UPS_North',
                 'esriSRProjCS_WGS1984UPS_South',
                 'esriSRProjCS_WGS1984TM36_SE',
                 'esriSRProjCS_NAD1983MTM_1',
                 'esriSRProjCS_NAD1983MTM_2',
                 'esriSRProjCS_NAD1983MTM_2SCoPQ',
                 'esriSRProjCS_NAD1983MTM_3',
                 'esriSRProjCS_NAD1983MTM_4',
                 'esriSRProjCS_NAD1983MTM_5',
                 'esriSRProjCS_NAD1983MTM_6',
                 'esriSRProjCS_NAD1983MTM_7',
                 'esriSRProjCS_NAD1983MTM_8',
                 'esriSRProjCS_NAD1983MTM_9',
                 'esriSRProjCS_NAD1983MTM_10',
                 'esriSRProjCS_NAD1983MTM_11',
                 'esriSRProjCS_NAD1983MTM_12',
                 'esriSRProjCS_NAD1983MTM_13',
                 'esriSRProjCS_NAD1983MTM_14',
                 'esriSRProjCS_NAD1983MTM_15',
                 'esriSRProjCS_NAD1983MTM_16',
                 'esriSRProjCS_NAD1983MTM_17',
                 'esriSRProjCS_NAD1927MTM_1',
                 'esriSRProjCS_NAD1927MTM_2',
                 'esriSRProjCS_NAD1927MTM_3',
                 'esriSRProjCS_NAD1927MTM_4',
                 'esriSRProjCS_NAD1927MTM_5',
                 'esriSRProjCS_NAD1927MTM_6',
                 'esriSRProjCS_Madrid1870MadridSpain',
                 'esriSRProjCS_RT90_25GonWest',
                 'esriSRProjCS_SingaporeGrid',
                 'esriSRProjCS_CamacupaTM11_30SE',
                 'esriSRProjCS_CamacupaTM12_SE',
                 'esriSRProjCS_ED1950TM0_N',
                 'esriSRProjCS_ED1950TM5_NE',
                 'esriSRProjCS_FD1958Iraq',
                 'esriSRProjCS_Indian1960TM_106NE',
                 'esriSRProjCS_Indian1960UTM_48N',
                 'esriSRProjCS_Indian1960UTM_49N',
                 'esriSRProjCS_LKS1994',
                 'esriSRProjCS_MoznetUTM_36S',
                 'esriSRProjCS_MoznetUTM_37S',
                 'esriSRProjCS_SambojaUTM_50S',
                 'esriSRProjCS_TeteUTM_36S',
                 'esriSRProjCS_TeteUTM_37S',
                 'esriSRProjCS_OldHawaiian_HI1',
                 'esriSRProjCS_OldHawaiian_HI2',
                 'esriSRProjCS_OldHawaiian_HI3',
                 'esriSRProjCS_OldHawaiian_HI4',
                 'esriSRProjCS_OldHawaiian_HI5',
                 'esriSRProjCS_TokyoJapan1',
                 'esriSRProjCS_TokyoJapan2',
                 'esriSRProjCS_TokyoJapan3',
                 'esriSRProjCS_TokyoJapan4',
                 'esriSRProjCS_TokyoJapan5',
                 'esriSRProjCS_TokyoJapan6',
                 'esriSRProjCS_TokyoJapan7',
                 'esriSRProjCS_TokyoJapan8',
                 'esriSRProjCS_TokyoJapan9',
                 'esriSRProjCS_TokyoJapan10',
                 'esriSRProjCS_TokyoJapan11',
                 'esriSRProjCS_TokyoJapan12',
                 'esriSRProjCS_TokyoJapan13',
                 'esriSRProjCS_TokyoJapan14',
                 'esriSRProjCS_TokyoJapan15',
                 'esriSRProjCS_TokyoJapan16',
                 'esriSRProjCS_TokyoJapan17',
                 'esriSRProjCS_TokyoJapan18',
                 'esriSRProjCS_TokyoJapan19',
                 'esriSRProjCS_PuertoRicoSPCS_PR',
                 'esriSRProjCS_PuertoRicoSPCS_VI',
                 'esriSRProjCS_EstonianCS1992',
                 'esriSRProjCS_Palestine1923PalestineGrid',
                 'esriSRProjCS_Palestine1923IsraelCSGrid',
                 'esriSRProjCS_IsraelIsraelTMGrid',
                 'esriSRProjCS_SAD1969PalestineGrid',
                 'esriSRProjCS_PDO1993UTM_39N',
                 'esriSRProjCS_PDO1993UTM_40N',
                 'esriSRProjCS_PuertoRicoUTM_20N',
                 'esriSRProjCS_Palestine1923PalestineBelt',
                 'esriSRProjCS_ETRF1989TM_Baltic1993',
                 'esriSRProjCS_Anguilla1957BritishWIndies',
                 'esriSRProjCS_Antigua1943BritishWIndies',
                 'esriSRProjCS_Barbados1938BritishWIndies',
                 'esriSRProjCS_Barbados1938BarbadosGrid',
                 'esriSRProjCS_Dominica1945BritishWIndies',
                 'esriSRProjCS_Grenada1953BritishWIndies',
                 'esriSRProjCS_Montserrat1958BritishWIndies',
                 'esriSRProjCS_StKitts1955BritishWIndies',
                 'esriSRProjCS_StLucia1955BritishWIndies',
                 'esriSRProjCS_StVincent1945BritishWIndies',
                 'esriSRProjCS_NAD1927CGQ77MTM_2SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_3SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_4SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_5SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_6SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_7SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_8SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_9SCoPQ',
                 'esriSRProjCS_NAD1927CGQ77MTM_10SCoPQ',
                 'esriSRProjCS_NAD1927Def1976MTM_8',
                 'esriSRProjCS_NAD1927Def1976MTM_9',
                 'esriSRProjCS_NAD1927Def1976MTM_10',
                 'esriSRProjCS_NAD1927Def1976MTM_11',
                 'esriSRProjCS_NAD1927Def1976MTM_12',
                 'esriSRProjCS_NAD1927Def1976MTM_13',
                 'esriSRProjCS_NAD1927Def1976MTM_14',
                 'esriSRProjCS_NAD1927Def1976MTM_15',
                 'esriSRProjCS_NAD1927Def1976MTM_16',
                 'esriSRProjCS_NAD1927Def1976MTM_17',
                 'esriSRProjCS_NAD1927Def1976UTM_15N',
                 'esriSRProjCS_NAD1927Def1976UTM_16N',
                 'esriSRProjCS_NAD1927Def1976UTM_17N',
                 'esriSRProjCS_NAD1927Def1976UTM_18N',
                 'esriSRProjCS_NAD1927CGQ77UTM_17N',
                 'esriSRProjCS_NAD1927CGQ77UTM_18N',
                 'esriSRProjCS_NAD1927CGQ77UTM_19N',
                 'esriSRProjCS_NAD1927CGQ77UTM_20N',
                 'esriSRProjCS_NAD1927CGQ77UTM_21N',
                 'esriSRProjCS_NGO1948Norway1',
                 'esriSRProjCS_NGO1948Norway2',
                 'esriSRProjCS_NGO1948Norway3',
                 'esriSRProjCS_NGO1948Norway4',
                 'esriSRProjCS_NGO1948Norway5',
                 'esriSRProjCS_NGO1948Norway6',
                 'esriSRProjCS_NGO1948Norway7',
                 'esriSRProjCS_NGO1948Norway8',
                 'esriSRProjCS_NGO1948OsloNorway1',
                 'esriSRProjCS_NGO1948OsloNorway2',
                 'esriSRProjCS_NGO1948OsloNorway3',
                 'esriSRProjCS_NGO1948OsloNorway4',
                 'esriSRProjCS_NGO1948OsloNorway5',
                 'esriSRProjCS_NGO1948OsloNorway6',
                 'esriSRProjCS_NGO1948OsloNorway7',
                 'esriSRProjCS_NGO1948OsloNorway8',
                 'esriSRProjCS_OldHawaiianUTM4N',
                 'esriSRProjCS_OldHawaiianUTM5N',
                 'esriSRProjCS_NAD1927MichiganGeoRef',
                 'esriSRProjCS_NAD1983MichiganGeoRef',
                 'esriSRProjCS_NGO1948UTM32N',
                 'esriSRProjCS_NGO1948UTM33N',
                 'esriSRProjCS_NGO1948UTM34N',
                 'esriSRProjCS_NGO1948UTM35N',
                 'esriSRProjCS_ED1950_ED77_UTM_38N',
                 'esriSRProjCS_ED1950_ED77_UTM_39N',
                 'esriSRProjCS_ED1950_ED77_UTM_40N',
                 'esriSRProjCS_ED1950_ED77_UTM_41N',
                 'esriSRProjCS_Abidjan1987UTM_29N',
                 'esriSRProjCS_Abidjan1987UTM_30N',
                 'esriSRProjCS_Locodjo1965UTM_29N',
                 'esriSRProjCS_Locodjo1965UTM_30N',
                 'esriSRProjCS_Hanoi1972GK_18',
                 'esriSRProjCS_Hanoi1972GK_19',
                 'esriSRProjCS_NAD1927GuatemalaNorte',
                 'esriSRProjCS_NAD1927GuatemalaSur',
                 'esriSRProjCS_Trinidad1903TrinidadGrid',
                 'esriSRProjCS_DeirEzZorLevant',
                 'esriSRProjCS_DeirEzZorSyria',
                 'esriSRProjCS_MerchichDegreeNordMaroc',
                 'esriSRProjCS_MerchichDegreeSudMaroc',
                 'esriSRProjCS_MerchichDegreeSahara',
                 'esriSRProjCS_VoirolDegreeNAlgerieAncienne',
                 'esriSRProjCS_VoirolDegreeSAlgerieAncienne',
                 'esriSRProjCS_VoirolUnifieDegreeNAlgerie',
                 'esriSRProjCS_VoirolUnifieDegreeSAlgerie']
    esriSRProjCS_WGS1984N_PoleStereographic = 102018
    esriSRProjCS_WGS1984S_PoleStereographic = 102021
    esriSRProjCS_WGS1984N_PoleAziEqui = 102016
    esriSRProjCS_WGS1984S_PoleAziEqui = 102019
    esriSRProjCS_WGS1984N_PoleLambertAzi = 102017
    esriSRProjCS_WGS1984S_PoleLambertAzi = 102020
    esriSRProjCS_NAD1983CanadaAlbers = 102001
    esriSRProjCS_NAD1983CanadaLambert = 102002
    esriSRProjCS_NAD1983USA_Albers = 102003
    esriSRProjCS_NAD1983USA_Lambert = 102004
    esriSRProjCS_NAD1983USA_EquiConic = 102005
    esriSRProjCS_NAD1983N_AmericaAlbers = 102008
    esriSRProjCS_NAD1983N_AmericaLambert = 102009
    esriSRProjCS_NAD1983N_AmericaEquiConic = 102010
    esriSRProjCS_NAD1983AlaskaAlbers = 3338
    esriSRProjCS_NAD1983HawaiiAlbers = 102007
    esriSRProjCS_WGS1984AfricaSinusoidal = 102011
    esriSRProjCS_WGS1984AfricaAlbers = 102022
    esriSRProjCS_WGS1984AfricaEquiConic = 102023
    esriSRProjCS_WGS1984AfricaLambert = 102024
    esriSRProjCS_WGS1984AsiaLambert = 102012
    esriSRProjCS_WGS1984N_AsiaAlbers = 102025
    esriSRProjCS_WGS1984N_AsiaEquiConic = 102026
    esriSRProjCS_WGS1984N_AsiaLambert = 102027
    esriSRProjCS_WGS1984S_AsiaAlbers = 102028
    esriSRProjCS_WGS1984S_AsiaEquiConic = 102029
    esriSRProjCS_WGS1984S_AsiaLambert = 102030
    esriSRProjCS_ED1950EuropeAlbers = 102013
    esriSRProjCS_ED1950EuropeEquiConic = 102031
    esriSRProjCS_ED1950EuropeLambert = 102014
    esriSRProjCS_SAD1969S_AmericaAlbers = 102033
    esriSRProjCS_SAD1969S_AmericaEquiConic = 102032
    esriSRProjCS_SAD1969S_AmericaLambert = 102015
    esriSRProjCS_World_PlateCarree = 54001
    esriSRProjCS_World_EquidistantCylindrical = 54002
    esriSRProjCS_World_MillerCylindrical = 54003
    esriSRProjCS_World_Mercator = 54004
    esriSRProjCS_World_Sinusoidal = 54008
    esriSRProjCS_World_Mollweide = 54009
    esriSRProjCS_World_EckertVI = 54010
    esriSRProjCS_World_EckertV = 54011
    esriSRProjCS_World_EckertIV = 54012
    esriSRProjCS_World_EckertIII = 54013
    esriSRProjCS_World_EckertII = 54014
    esriSRProjCS_World_EckertI = 54015
    esriSRProjCS_World_GallStereographic = 54016
    esriSRProjCS_World_Behrmann = 54017
    esriSRProjCS_World_WinkelI = 54018
    esriSRProjCS_World_WinkelII = 54019
    esriSRProjCS_World_Polyconic = 54021
    esriSRProjCS_World_QuarticAuthalic = 54022
    esriSRProjCS_World_Loximuthal = 54023
    esriSRProjCS_World_Bonne = 54024
    esriSRProjCS_World_Hotine = 54025
    esriSRProjCS_World_Stereographic = 54026
    esriSRProjCS_World_EquidistantConic = 54027
    esriSRProjCS_World_Cassini = 54028
    esriSRProjCS_World_VanderGrintenI = 54029
    esriSRProjCS_World_Robinson = 54030
    esriSRProjCS_World_TwoPointEquidistant = 54031
    esriSRProjCS_World_AzimuthalEquidistant = 54032
    esriSRProjCS_Sphere_PlateCarree = 53001
    esriSRProjCS_Sphere_EquidistantCylindrical = 53002
    esriSRProjCS_Sphere_MillerCylindrical = 53003
    esriSRProjCS_Sphere_Mercator = 53004
    esriSRProjCS_Sphere_Sinusoidal = 53008
    esriSRProjCS_Sphere_Mollweide = 53009
    esriSRProjCS_Sphere_EckertVI = 53010
    esriSRProjCS_Sphere_EckertV = 53011
    esriSRProjCS_Sphere_EckertIV = 53012
    esriSRProjCS_Sphere_EckertIII = 53013
    esriSRProjCS_Sphere_EckertII = 53014
    esriSRProjCS_Sphere_EckertI = 53015
    esriSRProjCS_Sphere_GallStereographic = 53016
    esriSRProjCS_Sphere_Behrmann = 53017
    esriSRProjCS_Sphere_WinkelI = 53018
    esriSRProjCS_Sphere_WinkelII = 53019
    esriSRProjCS_Sphere_Polyconic = 53021
    esriSRProjCS_Sphere_QuarticAuthalic = 53022
    esriSRProjCS_Sphere_Loximuthal = 53023
    esriSRProjCS_Sphere_Bonne = 53024
    esriSRProjCS_Sphere_Hotine = 53025
    esriSRProjCS_Sphere_Stereographic = 53026
    esriSRProjCS_Sphere_EquidistantConic = 53027
    esriSRProjCS_Sphere_Cassini = 53028
    esriSRProjCS_Sphere_VanderGrintenI = 53029
    esriSRProjCS_Sphere_Robinson = 53030
    esriSRProjCS_Sphere_TwoPointEquidistant = 53031
    esriSRProjCS_Sphere_AzimuthalEquidistant = 53032
    esriSRProjCS_WGS1984UTM_1N = 32601
    esriSRProjCS_WGS1984UTM_2N = 32602
    esriSRProjCS_WGS1984UTM_3N = 32603
    esriSRProjCS_WGS1984UTM_4N = 32604
    esriSRProjCS_WGS1984UTM_5N = 32605
    esriSRProjCS_WGS1984UTM_6N = 32606
    esriSRProjCS_WGS1984UTM_7N = 32607
    esriSRProjCS_WGS1984UTM_8N = 32608
    esriSRProjCS_WGS1984UTM_9N = 32609
    esriSRProjCS_WGS1984UTM_10N = 32610
    esriSRProjCS_WGS1984UTM_11N = 32611
    esriSRProjCS_WGS1984UTM_12N = 32612
    esriSRProjCS_WGS1984UTM_13N = 32613
    esriSRProjCS_WGS1984UTM_14N = 32614
    esriSRProjCS_WGS1984UTM_15N = 32615
    esriSRProjCS_WGS1984UTM_16N = 32616
    esriSRProjCS_WGS1984UTM_17N = 32617
    esriSRProjCS_WGS1984UTM_18N = 32618
    esriSRProjCS_WGS1984UTM_19N = 32619
    esriSRProjCS_WGS1984UTM_20N = 32620
    esriSRProjCS_WGS1984UTM_21N = 32621
    esriSRProjCS_WGS1984UTM_22N = 32622
    esriSRProjCS_WGS1984UTM_23N = 32623
    esriSRProjCS_WGS1984UTM_24N = 32624
    esriSRProjCS_WGS1984UTM_25N = 32625
    esriSRProjCS_WGS1984UTM_26N = 32626
    esriSRProjCS_WGS1984UTM_27N = 32627
    esriSRProjCS_WGS1984UTM_28N = 32628
    esriSRProjCS_WGS1984UTM_29N = 32629
    esriSRProjCS_WGS1984UTM_30N = 32630
    esriSRProjCS_WGS1984UTM_31N = 32631
    esriSRProjCS_WGS1984UTM_32N = 32632
    esriSRProjCS_WGS1984UTM_33N = 32633
    esriSRProjCS_WGS1984UTM_34N = 32634
    esriSRProjCS_WGS1984UTM_35N = 32635
    esriSRProjCS_WGS1984UTM_36N = 32636
    esriSRProjCS_WGS1984UTM_37N = 32637
    esriSRProjCS_WGS1984UTM_38N = 32638
    esriSRProjCS_WGS1984UTM_39N = 32639
    esriSRProjCS_WGS1984UTM_40N = 32640
    esriSRProjCS_WGS1984UTM_41N = 32641
    esriSRProjCS_WGS1984UTM_42N = 32642
    esriSRProjCS_WGS1984UTM_43N = 32643
    esriSRProjCS_WGS1984UTM_44N = 32644
    esriSRProjCS_WGS1984UTM_45N = 32645
    esriSRProjCS_WGS1984UTM_46N = 32646
    esriSRProjCS_WGS1984UTM_47N = 32647
    esriSRProjCS_WGS1984UTM_48N = 32648
    esriSRProjCS_WGS1984UTM_49N = 32649
    esriSRProjCS_WGS1984UTM_50N = 32650
    esriSRProjCS_WGS1984UTM_51N = 32651
    esriSRProjCS_WGS1984UTM_52N = 32652
    esriSRProjCS_WGS1984UTM_53N = 32653
    esriSRProjCS_WGS1984UTM_54N = 32654
    esriSRProjCS_WGS1984UTM_55N = 32655
    esriSRProjCS_WGS1984UTM_56N = 32656
    esriSRProjCS_WGS1984UTM_57N = 32657
    esriSRProjCS_WGS1984UTM_58N = 32658
    esriSRProjCS_WGS1984UTM_59N = 32659
    esriSRProjCS_WGS1984UTM_60N = 32660
    esriSRProjCS_WGS1984UTM_1S = 32701
    esriSRProjCS_WGS1984UTM_2S = 32702
    esriSRProjCS_WGS1984UTM_3S = 32703
    esriSRProjCS_WGS1984UTM_4S = 32704
    esriSRProjCS_WGS1984UTM_5S = 32705
    esriSRProjCS_WGS1984UTM_6S = 32706
    esriSRProjCS_WGS1984UTM_7S = 32707
    esriSRProjCS_WGS1984UTM_8S = 32708
    esriSRProjCS_WGS1984UTM_9S = 32709
    esriSRProjCS_WGS1984UTM_10S = 32710
    esriSRProjCS_WGS1984UTM_11S = 32711
    esriSRProjCS_WGS1984UTM_12S = 32712
    esriSRProjCS_WGS1984UTM_13S = 32713
    esriSRProjCS_WGS1984UTM_14S = 32714
    esriSRProjCS_WGS1984UTM_15S = 32715
    esriSRProjCS_WGS1984UTM_16S = 32716
    esriSRProjCS_WGS1984UTM_17S = 32717
    esriSRProjCS_WGS1984UTM_18S = 32718
    esriSRProjCS_WGS1984UTM_19S = 32719
    esriSRProjCS_WGS1984UTM_20S = 32720
    esriSRProjCS_WGS1984UTM_21S = 32721
    esriSRProjCS_WGS1984UTM_22S = 32722
    esriSRProjCS_WGS1984UTM_23S = 32723
    esriSRProjCS_WGS1984UTM_24S = 32724
    esriSRProjCS_WGS1984UTM_25S = 32725
    esriSRProjCS_WGS1984UTM_26S = 32726
    esriSRProjCS_WGS1984UTM_27S = 32727
    esriSRProjCS_WGS1984UTM_28S = 32728
    esriSRProjCS_WGS1984UTM_29S = 32729
    esriSRProjCS_WGS1984UTM_30S = 32730
    esriSRProjCS_WGS1984UTM_31S = 32731
    esriSRProjCS_WGS1984UTM_32S = 32732
    esriSRProjCS_WGS1984UTM_33S = 32733
    esriSRProjCS_WGS1984UTM_34S = 32734
    esriSRProjCS_WGS1984UTM_35S = 32735
    esriSRProjCS_WGS1984UTM_36S = 32736
    esriSRProjCS_WGS1984UTM_37S = 32737
    esriSRProjCS_WGS1984UTM_38S = 32738
    esriSRProjCS_WGS1984UTM_39S = 32739
    esriSRProjCS_WGS1984UTM_40S = 32740
    esriSRProjCS_WGS1984UTM_41S = 32741
    esriSRProjCS_WGS1984UTM_42S = 32742
    esriSRProjCS_WGS1984UTM_43S = 32743
    esriSRProjCS_WGS1984UTM_44S = 32744
    esriSRProjCS_WGS1984UTM_45S = 32745
    esriSRProjCS_WGS1984UTM_46S = 32746
    esriSRProjCS_WGS1984UTM_47S = 32747
    esriSRProjCS_WGS1984UTM_48S = 32748
    esriSRProjCS_WGS1984UTM_49S = 32749
    esriSRProjCS_WGS1984UTM_50S = 32750
    esriSRProjCS_WGS1984UTM_51S = 32751
    esriSRProjCS_WGS1984UTM_52S = 32752
    esriSRProjCS_WGS1984UTM_53S = 32753
    esriSRProjCS_WGS1984UTM_54S = 32754
    esriSRProjCS_WGS1984UTM_55S = 32755
    esriSRProjCS_WGS1984UTM_56S = 32756
    esriSRProjCS_WGS1984UTM_57S = 32757
    esriSRProjCS_WGS1984UTM_58S = 32758
    esriSRProjCS_WGS1984UTM_59S = 32759
    esriSRProjCS_WGS1984UTM_60S = 32760
    esriSRProjCS_WGS1972UTM_1N = 32201
    esriSRProjCS_WGS1972UTM_2N = 32202
    esriSRProjCS_WGS1972UTM_3N = 32203
    esriSRProjCS_WGS1972UTM_4N = 32204
    esriSRProjCS_WGS1972UTM_5N = 32205
    esriSRProjCS_WGS1972UTM_6N = 32206
    esriSRProjCS_WGS1972UTM_7N = 32207
    esriSRProjCS_WGS1972UTM_8N = 32208
    esriSRProjCS_WGS1972UTM_9N = 32209
    esriSRProjCS_WGS1972UTM_10N = 32210
    esriSRProjCS_WGS1972UTM_11N = 32211
    esriSRProjCS_WGS1972UTM_12N = 32212
    esriSRProjCS_WGS1972UTM_13N = 32213
    esriSRProjCS_WGS1972UTM_14N = 32214
    esriSRProjCS_WGS1972UTM_15N = 32215
    esriSRProjCS_WGS1972UTM_16N = 32216
    esriSRProjCS_WGS1972UTM_17N = 32217
    esriSRProjCS_WGS1972UTM_18N = 32218
    esriSRProjCS_WGS1972UTM_19N = 32219
    esriSRProjCS_WGS1972UTM_20N = 32220
    esriSRProjCS_WGS1972UTM_21N = 32221
    esriSRProjCS_WGS1972UTM_22N = 32222
    esriSRProjCS_WGS1972UTM_23N = 32223
    esriSRProjCS_WGS1972UTM_24N = 32224
    esriSRProjCS_WGS1972UTM_25N = 32225
    esriSRProjCS_WGS1972UTM_26N = 32226
    esriSRProjCS_WGS1972UTM_27N = 32227
    esriSRProjCS_WGS1972UTM_28N = 32228
    esriSRProjCS_WGS1972UTM_29N = 32229
    esriSRProjCS_WGS1972UTM_30N = 32230
    esriSRProjCS_WGS1972UTM_31N = 32231
    esriSRProjCS_WGS1972UTM_32N = 32232
    esriSRProjCS_WGS1972UTM_33N = 32233
    esriSRProjCS_WGS1972UTM_34N = 32234
    esriSRProjCS_WGS1972UTM_35N = 32235
    esriSRProjCS_WGS1972UTM_36N = 32236
    esriSRProjCS_WGS1972UTM_37N = 32237
    esriSRProjCS_WGS1972UTM_38N = 32238
    esriSRProjCS_WGS1972UTM_39N = 32239
    esriSRProjCS_WGS1972UTM_40N = 32240
    esriSRProjCS_WGS1972UTM_41N = 32241
    esriSRProjCS_WGS1972UTM_42N = 32242
    esriSRProjCS_WGS1972UTM_43N = 32243
    esriSRProjCS_WGS1972UTM_44N = 32244
    esriSRProjCS_WGS1972UTM_45N = 32245
    esriSRProjCS_WGS1972UTM_46N = 32246
    esriSRProjCS_WGS1972UTM_47N = 32247
    esriSRProjCS_WGS1972UTM_48N = 32248
    esriSRProjCS_WGS1972UTM_49N = 32249
    esriSRProjCS_WGS1972UTM_50N = 32250
    esriSRProjCS_WGS1972UTM_51N = 32251
    esriSRProjCS_WGS1972UTM_52N = 32252
    esriSRProjCS_WGS1972UTM_53N = 32253
    esriSRProjCS_WGS1972UTM_54N = 32254
    esriSRProjCS_WGS1972UTM_55N = 32255
    esriSRProjCS_WGS1972UTM_56N = 32256
    esriSRProjCS_WGS1972UTM_57N = 32257
    esriSRProjCS_WGS1972UTM_58N = 32258
    esriSRProjCS_WGS1972UTM_59N = 32259
    esriSRProjCS_WGS1972UTM_60N = 32260
    esriSRProjCS_WGS1972UTM_1S = 32301
    esriSRProjCS_WGS1972UTM_2S = 32302
    esriSRProjCS_WGS1972UTM_3S = 32303
    esriSRProjCS_WGS1972UTM_4S = 32304
    esriSRProjCS_WGS1972UTM_5S = 32305
    esriSRProjCS_WGS1972UTM_6S = 32306
    esriSRProjCS_WGS1972UTM_7S = 32307
    esriSRProjCS_WGS1972UTM_8S = 32308
    esriSRProjCS_WGS1972UTM_9S = 32309
    esriSRProjCS_WGS1972UTM_10S = 32310
    esriSRProjCS_WGS1972UTM_11S = 32311
    esriSRProjCS_WGS1972UTM_12S = 32312
    esriSRProjCS_WGS1972UTM_13S = 32313
    esriSRProjCS_WGS1972UTM_14S = 32314
    esriSRProjCS_WGS1972UTM_15S = 32315
    esriSRProjCS_WGS1972UTM_16S = 32316
    esriSRProjCS_WGS1972UTM_17S = 32317
    esriSRProjCS_WGS1972UTM_18S = 32318
    esriSRProjCS_WGS1972UTM_19S = 32319
    esriSRProjCS_WGS1972UTM_20S = 32320
    esriSRProjCS_WGS1972UTM_21S = 32321
    esriSRProjCS_WGS1972UTM_22S = 32322
    esriSRProjCS_WGS1972UTM_23S = 32323
    esriSRProjCS_WGS1972UTM_24S = 32324
    esriSRProjCS_WGS1972UTM_25S = 32325
    esriSRProjCS_WGS1972UTM_26S = 32326
    esriSRProjCS_WGS1972UTM_27S = 32327
    esriSRProjCS_WGS1972UTM_28S = 32328
    esriSRProjCS_WGS1972UTM_29S = 32329
    esriSRProjCS_WGS1972UTM_30S = 32330
    esriSRProjCS_WGS1972UTM_31S = 32331
    esriSRProjCS_WGS1972UTM_32S = 32332
    esriSRProjCS_WGS1972UTM_33S = 32333
    esriSRProjCS_WGS1972UTM_34S = 32334
    esriSRProjCS_WGS1972UTM_35S = 32335
    esriSRProjCS_WGS1972UTM_36S = 32336
    esriSRProjCS_WGS1972UTM_37S = 32337
    esriSRProjCS_WGS1972UTM_38S = 32338
    esriSRProjCS_WGS1972UTM_39S = 32339
    esriSRProjCS_WGS1972UTM_40S = 32340
    esriSRProjCS_WGS1972UTM_41S = 32341
    esriSRProjCS_WGS1972UTM_42S = 32342
    esriSRProjCS_WGS1972UTM_43S = 32343
    esriSRProjCS_WGS1972UTM_44S = 32344
    esriSRProjCS_WGS1972UTM_45S = 32345
    esriSRProjCS_WGS1972UTM_46S = 32346
    esriSRProjCS_WGS1972UTM_47S = 32347
    esriSRProjCS_WGS1972UTM_48S = 32348
    esriSRProjCS_WGS1972UTM_49S = 32349
    esriSRProjCS_WGS1972UTM_50S = 32350
    esriSRProjCS_WGS1972UTM_51S = 32351
    esriSRProjCS_WGS1972UTM_52S = 32352
    esriSRProjCS_WGS1972UTM_53S = 32353
    esriSRProjCS_WGS1972UTM_54S = 32354
    esriSRProjCS_WGS1972UTM_55S = 32355
    esriSRProjCS_WGS1972UTM_56S = 32356
    esriSRProjCS_WGS1972UTM_57S = 32357
    esriSRProjCS_WGS1972UTM_58S = 32358
    esriSRProjCS_WGS1972UTM_59S = 32359
    esriSRProjCS_WGS1972UTM_60S = 32360
    esriSRProjCS_NAD1927BLM_14N = 32064
    esriSRProjCS_NAD1927BLM_15N = 32065
    esriSRProjCS_NAD1927BLM_16N = 32066
    esriSRProjCS_NAD1927BLM_17N = 32067
    esriSRProjCS_NAD1927UTM_3N = 26703
    esriSRProjCS_NAD1927UTM_4N = 26704
    esriSRProjCS_NAD1927UTM_5N = 26705
    esriSRProjCS_NAD1927UTM_6N = 26706
    esriSRProjCS_NAD1927UTM_7N = 26707
    esriSRProjCS_NAD1927UTM_8N = 26708
    esriSRProjCS_NAD1927UTM_9N = 26709
    esriSRProjCS_NAD1927UTM_10N = 26710
    esriSRProjCS_NAD1927UTM_11N = 26711
    esriSRProjCS_NAD1927UTM_12N = 26712
    esriSRProjCS_NAD1927UTM_13N = 26713
    esriSRProjCS_NAD1927UTM_14N = 26714
    esriSRProjCS_NAD1927UTM_15N = 26715
    esriSRProjCS_NAD1927UTM_16N = 26716
    esriSRProjCS_NAD1927UTM_17N = 26717
    esriSRProjCS_NAD1927UTM_18N = 26718
    esriSRProjCS_NAD1927UTM_19N = 26719
    esriSRProjCS_NAD1927UTM_20N = 26720
    esriSRProjCS_NAD1927UTM_21N = 26721
    esriSRProjCS_NAD1927UTM_22N = 26722
    esriSRProjCS_NAD1983UTM_3N = 26903
    esriSRProjCS_NAD1983UTM_4N = 26904
    esriSRProjCS_NAD1983UTM_5N = 26905
    esriSRProjCS_NAD1983UTM_6N = 26906
    esriSRProjCS_NAD1983UTM_7N = 26907
    esriSRProjCS_NAD1983UTM_8N = 26908
    esriSRProjCS_NAD1983UTM_9N = 26909
    esriSRProjCS_NAD1983UTM_10N = 26910
    esriSRProjCS_NAD1983UTM_11N = 26911
    esriSRProjCS_NAD1983UTM_12N = 26912
    esriSRProjCS_NAD1983UTM_13N = 26913
    esriSRProjCS_NAD1983UTM_14N = 26914
    esriSRProjCS_NAD1983UTM_15N = 26915
    esriSRProjCS_NAD1983UTM_16N = 26916
    esriSRProjCS_NAD1983UTM_17N = 26917
    esriSRProjCS_NAD1983UTM_18N = 26918
    esriSRProjCS_NAD1983UTM_19N = 26919
    esriSRProjCS_NAD1983UTM_20N = 26920
    esriSRProjCS_NAD1983UTM_21N = 26921
    esriSRProjCS_NAD1983UTM_22N = 26922
    esriSRProjCS_NAD1983UTM_23N = 26923
    esriSRProjCS_ETRF1989UTM_28N = 103528
    esriSRProjCS_ETRF1989UTM_29N = 103529
    esriSRProjCS_ETRF1989UTM_30N = 103530
    esriSRProjCS_ETRF1989UTM_31N = 103531
    esriSRProjCS_ETRF1989UTM_32N = 103532
    esriSRProjCS_ETRF1989UTM_33N = 103533
    esriSRProjCS_ETRF1989UTM_34N = 103534
    esriSRProjCS_ETRF1989UTM_35N = 103535
    esriSRProjCS_ETRF1989UTM_36N = 103536
    esriSRProjCS_ETRF1989UTM_37N = 103537
    esriSRProjCS_ETRF1989UTM_38N = 103538
    esriSRProjCS_Pulkovo1942GK_2 = 28402
    esriSRProjCS_Pulkovo1942GK_3 = 28403
    esriSRProjCS_Pulkovo1942GK_4 = 28404
    esriSRProjCS_Pulkovo1942GK_5 = 28405
    esriSRProjCS_Pulkovo1942GK_6 = 28406
    esriSRProjCS_Pulkovo1942GK_7 = 28407
    esriSRProjCS_Pulkovo1942GK_8 = 28408
    esriSRProjCS_Pulkovo1942GK_9 = 28409
    esriSRProjCS_Pulkovo1942GK_10 = 28410
    esriSRProjCS_Pulkovo1942GK_11 = 28411
    esriSRProjCS_Pulkovo1942GK_12 = 28412
    esriSRProjCS_Pulkovo1942GK_13 = 28413
    esriSRProjCS_Pulkovo1942GK_14 = 28414
    esriSRProjCS_Pulkovo1942GK_15 = 28415
    esriSRProjCS_Pulkovo1942GK_16 = 28416
    esriSRProjCS_Pulkovo1942GK_17 = 28417
    esriSRProjCS_Pulkovo1942GK_18 = 28418
    esriSRProjCS_Pulkovo1942GK_19 = 28419
    esriSRProjCS_Pulkovo1942GK_20 = 28420
    esriSRProjCS_Pulkovo1942GK_21 = 28421
    esriSRProjCS_Pulkovo1942GK_22 = 28422
    esriSRProjCS_Pulkovo1942GK_23 = 28423
    esriSRProjCS_Pulkovo1942GK_24 = 28424
    esriSRProjCS_Pulkovo1942GK_25 = 28425
    esriSRProjCS_Pulkovo1942GK_26 = 28426
    esriSRProjCS_Pulkovo1942GK_27 = 28427
    esriSRProjCS_Pulkovo1942GK_28 = 28428
    esriSRProjCS_Pulkovo1942GK_29 = 28429
    esriSRProjCS_Pulkovo1942GK_30 = 28430
    esriSRProjCS_Pulkovo1942GK_31 = 28431
    esriSRProjCS_Pulkovo1942GK_32 = 28432
    esriSRProjCS_Pulkovo1942GK_2N = 28462
    esriSRProjCS_Pulkovo1942GK_3N = 28463
    esriSRProjCS_Pulkovo1942GK_4N = 28464
    esriSRProjCS_Pulkovo1942GK_5N = 28465
    esriSRProjCS_Pulkovo1942GK_6N = 28466
    esriSRProjCS_Pulkovo1942GK_7N = 28467
    esriSRProjCS_Pulkovo1942GK_8N = 28468
    esriSRProjCS_Pulkovo1942GK_9N = 28469
    esriSRProjCS_Pulkovo1942GK_10N = 28470
    esriSRProjCS_Pulkovo1942GK_11N = 28471
    esriSRProjCS_Pulkovo1942GK_12N = 28472
    esriSRProjCS_Pulkovo1942GK_13N = 28473
    esriSRProjCS_Pulkovo1942GK_14N = 28474
    esriSRProjCS_Pulkovo1942GK_15N = 28475
    esriSRProjCS_Pulkovo1942GK_16N = 28476
    esriSRProjCS_Pulkovo1942GK_17N = 28477
    esriSRProjCS_Pulkovo1942GK_18N = 28478
    esriSRProjCS_Pulkovo1942GK_19N = 28479
    esriSRProjCS_Pulkovo1942GK_20N = 28480
    esriSRProjCS_Pulkovo1942GK_21N = 28481
    esriSRProjCS_Pulkovo1942GK_22N = 28482
    esriSRProjCS_Pulkovo1942GK_23N = 28483
    esriSRProjCS_Pulkovo1942GK_24N = 28484
    esriSRProjCS_Pulkovo1942GK_25N = 28485
    esriSRProjCS_Pulkovo1942GK_26N = 28486
    esriSRProjCS_Pulkovo1942GK_27N = 28487
    esriSRProjCS_Pulkovo1942GK_28N = 28488
    esriSRProjCS_Pulkovo1942GK_29N = 28489
    esriSRProjCS_Pulkovo1942GK_30N = 28490
    esriSRProjCS_Pulkovo1942GK_31N = 28491
    esriSRProjCS_Pulkovo1942GK_32N = 28492
    esriSRProjCS_Pulkovo1995GK_2 = 20002
    esriSRProjCS_Pulkovo1995GK_3 = 20003
    esriSRProjCS_Pulkovo1995GK_4 = 20004
    esriSRProjCS_Pulkovo1995GK_5 = 20005
    esriSRProjCS_Pulkovo1995GK_6 = 20006
    esriSRProjCS_Pulkovo1995GK_7 = 20007
    esriSRProjCS_Pulkovo1995GK_8 = 20008
    esriSRProjCS_Pulkovo1995GK_9 = 20009
    esriSRProjCS_Pulkovo1995GK_10 = 20010
    esriSRProjCS_Pulkovo1995GK_11 = 20011
    esriSRProjCS_Pulkovo1995GK_12 = 20012
    esriSRProjCS_Pulkovo1995GK_13 = 20013
    esriSRProjCS_Pulkovo1995GK_14 = 20014
    esriSRProjCS_Pulkovo1995GK_15 = 20015
    esriSRProjCS_Pulkovo1995GK_16 = 20016
    esriSRProjCS_Pulkovo1995GK_17 = 20017
    esriSRProjCS_Pulkovo1995GK_18 = 20018
    esriSRProjCS_Pulkovo1995GK_19 = 20019
    esriSRProjCS_Pulkovo1995GK_20 = 20020
    esriSRProjCS_Pulkovo1995GK_21 = 20021
    esriSRProjCS_Pulkovo1995GK_22 = 20022
    esriSRProjCS_Pulkovo1995GK_23 = 20023
    esriSRProjCS_Pulkovo1995GK_24 = 20024
    esriSRProjCS_Pulkovo1995GK_25 = 20025
    esriSRProjCS_Pulkovo1995GK_26 = 20026
    esriSRProjCS_Pulkovo1995GK_27 = 20027
    esriSRProjCS_Pulkovo1995GK_28 = 20028
    esriSRProjCS_Pulkovo1995GK_29 = 20029
    esriSRProjCS_Pulkovo1995GK_30 = 20030
    esriSRProjCS_Pulkovo1995GK_31 = 20031
    esriSRProjCS_Pulkovo1995GK_32 = 20032
    esriSRProjCS_Pulkovo1995GK_2N = 20062
    esriSRProjCS_Pulkovo1995GK_3N = 20063
    esriSRProjCS_Pulkovo1995GK_4N = 20064
    esriSRProjCS_Pulkovo1995GK_5N = 20065
    esriSRProjCS_Pulkovo1995GK_6N = 20066
    esriSRProjCS_Pulkovo1995GK_7N = 20067
    esriSRProjCS_Pulkovo1995GK_8N = 20068
    esriSRProjCS_Pulkovo1995GK_9N = 20069
    esriSRProjCS_Pulkovo1995GK_10N = 20070
    esriSRProjCS_Pulkovo1995GK_11N = 20071
    esriSRProjCS_Pulkovo1995GK_12N = 20072
    esriSRProjCS_Pulkovo1995GK_13N = 20073
    esriSRProjCS_Pulkovo1995GK_14N = 20074
    esriSRProjCS_Pulkovo1995GK_15N = 20075
    esriSRProjCS_Pulkovo1995GK_16N = 20076
    esriSRProjCS_Pulkovo1995GK_17N = 20077
    esriSRProjCS_Pulkovo1995GK_18N = 20078
    esriSRProjCS_Pulkovo1995GK_19N = 20079
    esriSRProjCS_Pulkovo1995GK_20N = 20080
    esriSRProjCS_Pulkovo1995GK_21N = 20081
    esriSRProjCS_Pulkovo1995GK_22N = 20082
    esriSRProjCS_Pulkovo1995GK_23N = 20083
    esriSRProjCS_Pulkovo1995GK_24N = 20084
    esriSRProjCS_Pulkovo1995GK_25N = 20085
    esriSRProjCS_Pulkovo1995GK_26N = 20086
    esriSRProjCS_Pulkovo1995GK_27N = 20087
    esriSRProjCS_Pulkovo1995GK_28N = 20088
    esriSRProjCS_Pulkovo1995GK_29N = 20089
    esriSRProjCS_Pulkovo1995GK_30N = 20090
    esriSRProjCS_Pulkovo1995GK_31N = 20091
    esriSRProjCS_Pulkovo1995GK_32N = 20092
    esriSRProjCS_Beijing1954GK_13 = 21413
    esriSRProjCS_Beijing1954GK_14 = 21414
    esriSRProjCS_Beijing1954GK_15 = 21415
    esriSRProjCS_Beijing1954GK_16 = 21416
    esriSRProjCS_Beijing1954GK_17 = 21417
    esriSRProjCS_Beijing1954GK_18 = 21418
    esriSRProjCS_Beijing1954GK_19 = 21419
    esriSRProjCS_Beijing1954GK_20 = 21420
    esriSRProjCS_Beijing1954GK_21 = 21421
    esriSRProjCS_Beijing1954GK_22 = 21422
    esriSRProjCS_Beijing1954GK_23 = 21423
    esriSRProjCS_Beijing1954GK_13N = 21473
    esriSRProjCS_Beijing1954GK_14N = 21474
    esriSRProjCS_Beijing1954GK_15N = 21475
    esriSRProjCS_Beijing1954GK_16N = 21476
    esriSRProjCS_Beijing1954GK_17N = 21477
    esriSRProjCS_Beijing1954GK_18N = 21478
    esriSRProjCS_Beijing1954GK_19N = 21479
    esriSRProjCS_Beijing1954GK_20N = 21480
    esriSRProjCS_Beijing1954GK_21N = 21481
    esriSRProjCS_Beijing1954GK_22N = 21482
    esriSRProjCS_Beijing1954GK_23N = 21483
    esriSRProjCS_ED_1950_UTM_28N = 23028
    esriSRProjCS_ED_1950_UTM_29N = 23029
    esriSRProjCS_ED_1950_UTM_30N = 23030
    esriSRProjCS_ED_1950_UTM_31N = 23031
    esriSRProjCS_ED_1950_UTM_32N = 23032
    esriSRProjCS_ED_1950_UTM_33N = 23033
    esriSRProjCS_ED_1950_UTM_34N = 23034
    esriSRProjCS_ED_1950_UTM_35N = 23035
    esriSRProjCS_ED_1950_UTM_36N = 23036
    esriSRProjCS_ED_1950_UTM_37N = 23037
    esriSRProjCS_ED_1950_UTM_38N = 23038
    esriSRProjCS_ATS1977UTM_19N = 2219
    esriSRProjCS_ATS1977UTM_20N = 2220
    esriSRProjCS_Finland_1 = 2391
    esriSRProjCS_Finland_2 = 2392
    esriSRProjCS_Finland_3 = 2393
    esriSRProjCS_Finland_4 = 2394
    esriSRProjCS_SouthAmerican1969UTM_18N = 29168
    esriSRProjCS_SouthAmerican1969UTM_19N = 29169
    esriSRProjCS_SouthAmerican1969UTM_20N = 29170
    esriSRProjCS_SouthAmerican1969UTM_21N = 29171
    esriSRProjCS_SouthAmerican1969UTM_22N = 29172
    esriSRProjCS_SouthAmerican1969UTM_17S = 29187
    esriSRProjCS_SouthAmerican1969UTM_18S = 29188
    esriSRProjCS_SouthAmerican1969UTM_19S = 29189
    esriSRProjCS_SouthAmerican1969UTM_20S = 29190
    esriSRProjCS_SouthAmerican1969UTM_21S = 29191
    esriSRProjCS_SouthAmerican1969UTM_22S = 29192
    esriSRProjCS_SouthAmerican1969UTM_23S = 29193
    esriSRProjCS_SouthAmerican1969UTM_24S = 29194
    esriSRProjCS_SouthAmerican1969UTM_25S = 29195
    esriSRProjCS_AGD1966AMG_48 = 20248
    esriSRProjCS_AGD1966AMG_49 = 20249
    esriSRProjCS_AGD1966AMG_50 = 20250
    esriSRProjCS_AGD1966AMG_51 = 20251
    esriSRProjCS_AGD1966AMG_52 = 20252
    esriSRProjCS_AGD1966AMG_53 = 20253
    esriSRProjCS_AGD1966AMG_54 = 20254
    esriSRProjCS_AGD1966AMG_55 = 20255
    esriSRProjCS_AGD1966AMG_56 = 20256
    esriSRProjCS_AGD1966AMG_57 = 20257
    esriSRProjCS_AGD1966AMG_58 = 20258
    esriSRProjCS_AGD1984AMG_48 = 20348
    esriSRProjCS_AGD1984AMG_49 = 20349
    esriSRProjCS_AGD1984AMG_50 = 20350
    esriSRProjCS_AGD1984AMG_51 = 20351
    esriSRProjCS_AGD1984AMG_52 = 20352
    esriSRProjCS_AGD1984AMG_53 = 20353
    esriSRProjCS_AGD1984AMG_54 = 20354
    esriSRProjCS_AGD1984AMG_55 = 20355
    esriSRProjCS_AGD1984AMG_56 = 20356
    esriSRProjCS_AGD1984AMG_57 = 20357
    esriSRProjCS_AGD1984AMG_58 = 20358
    esriSRProjCS_GDA1994MGA_48 = 28348
    esriSRProjCS_GDA1994MGA_49 = 28349
    esriSRProjCS_GDA1994MGA_50 = 28350
    esriSRProjCS_GDA1994MGA_51 = 28351
    esriSRProjCS_GDA1994MGA_52 = 28352
    esriSRProjCS_GDA1994MGA_53 = 28353
    esriSRProjCS_GDA1994MGA_54 = 28354
    esriSRProjCS_GDA1994MGA_55 = 28355
    esriSRProjCS_GDA1994MGA_56 = 28356
    esriSRProjCS_GDA1994MGA_57 = 28357
    esriSRProjCS_GDA1994MGA_58 = 28358
    esriSRProjCS_NAD1927SPCS_ALEast = 26729
    esriSRProjCS_NAD1927SPCS_ALWest = 26730
    esriSRProjCS_NAD1927SPCS_AK1 = 26731
    esriSRProjCS_NAD1927SPCS_AK2 = 26732
    esriSRProjCS_NAD1927SPCS_AK3 = 26733
    esriSRProjCS_NAD1927SPCS_AK4 = 26734
    esriSRProjCS_NAD1927SPCS_AK5 = 26735
    esriSRProjCS_NAD1927SPCS_AK6 = 26736
    esriSRProjCS_NAD1927SPCS_AK7 = 26737
    esriSRProjCS_NAD1927SPCS_AK8 = 26738
    esriSRProjCS_NAD1927SPCS_AK9 = 26739
    esriSRProjCS_NAD1927SPCS_AK10 = 26740
    esriSRProjCS_NAD1927SPCS_AZEast = 26748
    esriSRProjCS_NAD1927SPCS_AZCentral = 26749
    esriSRProjCS_NAD1927SPCS_AZWest = 26750
    esriSRProjCS_NAD1927SPCS_ARNorth = 26751
    esriSRProjCS_NAD1927SPCS_ARSouth = 26752
    esriSRProjCS_NAD1927SPCS_CAI = 26741
    esriSRProjCS_NAD1927SPCS_CAII = 26742
    esriSRProjCS_NAD1927SPCS_CAIII = 26743
    esriSRProjCS_NAD1927SPCS_CAIV = 26744
    esriSRProjCS_NAD1927SPCS_CAV = 26745
    esriSRProjCS_NAD1927SPCS_CAVI = 26746
    esriSRProjCS_NAD1927SPCS_CAVII = 26799
    esriSRProjCS_NAD1927SPCS_CONorth = 26753
    esriSRProjCS_NAD1927SPCS_COCentral = 26754
    esriSRProjCS_NAD1927SPCS_COSouth = 26755
    esriSRProjCS_NAD1927SPCS_CT = 26756
    esriSRProjCS_NAD1927SPCS_DE = 26757
    esriSRProjCS_NAD1927SPCS_FLEast = 26758
    esriSRProjCS_NAD1927SPCS_FLWest = 26759
    esriSRProjCS_NAD1927SPCS_FLNorth = 26760
    esriSRProjCS_NAD1927SPCS_GAEast = 26766
    esriSRProjCS_NAD1927SPCS_GAWest = 26767
    esriSRProjCS_NAD1927SPCS_HI1 = 26761
    esriSRProjCS_NAD1927SPCS_HI2 = 26762
    esriSRProjCS_NAD1927SPCS_HI3 = 26763
    esriSRProjCS_NAD1927SPCS_HI4 = 26764
    esriSRProjCS_NAD1927SPCS_HI5 = 26765
    esriSRProjCS_NAD1927SPCS_IDEast = 26768
    esriSRProjCS_NAD1927SPCS_IDCentral = 26769
    esriSRProjCS_NAD1927SPCS_IDWest = 26770
    esriSRProjCS_NAD1927SPCS_ILEast = 26771
    esriSRProjCS_NAD1927SPCS_ILWest = 26772
    esriSRProjCS_NAD1927SPCS_INEast = 26773
    esriSRProjCS_NAD1927SPCS_INWest = 26774
    esriSRProjCS_NAD1927SPCS_IANorth = 26775
    esriSRProjCS_NAD1927SPCS_IASouth = 26776
    esriSRProjCS_NAD1927SPCS_KSNorth = 26777
    esriSRProjCS_NAD1927SPCS_KSSouth = 26778
    esriSRProjCS_NAD1927SPCS_KYNorth = 26779
    esriSRProjCS_NAD1927SPCS_KYSouth = 26780
    esriSRProjCS_NAD1927SPCS_LANorth = 26781
    esriSRProjCS_NAD1927SPCS_LASouth = 26782
    esriSRProjCS_NAD1927SPCS_MEEast = 26783
    esriSRProjCS_NAD1927SPCS_MEWest = 26784
    esriSRProjCS_NAD1927SPCS_MD = 26785
    esriSRProjCS_NAD1927SPCS_MAMainland = 26786
    esriSRProjCS_NAD1927SPCS_MAIsland = 26787
    esriSRProjCS_NAD1927SPCS_MINorth = 26788
    esriSRProjCS_NAD1927SPCS_MICentral = 26789
    esriSRProjCS_NAD1927SPCS_MISouth = 26790
    esriSRProjCS_NAD1927SPCS_MNNorth = 26791
    esriSRProjCS_NAD1927SPCS_MNCentral = 26792
    esriSRProjCS_NAD1927SPCS_MNSouth = 26793
    esriSRProjCS_NAD1927SPCS_MSEast = 26794
    esriSRProjCS_NAD1927SPCS_MSWest = 26795
    esriSRProjCS_NAD1927SPCS_MOEast = 26796
    esriSRProjCS_NAD1927SPCS_MOCentral = 26797
    esriSRProjCS_NAD1927SPCS_MOWest = 26798
    esriSRProjCS_NAD1927SPCS_MTNorth = 32001
    esriSRProjCS_NAD1927SPCS_MTCentral = 32002
    esriSRProjCS_NAD1927SPCS_MTSouth = 32003
    esriSRProjCS_NAD1927SPCS_NENorth = 32005
    esriSRProjCS_NAD1927SPCS_NESouth = 32006
    esriSRProjCS_NAD1927SPCS_NVEast = 32007
    esriSRProjCS_NAD1927SPCS_NVCentral = 32008
    esriSRProjCS_NAD1927SPCS_NVWest = 32009
    esriSRProjCS_NAD1927SPCS_NH = 32010
    esriSRProjCS_NAD1927SPCS_NJ = 32011
    esriSRProjCS_NAD1927SPCS_NMEast = 32012
    esriSRProjCS_NAD1927SPCS_NMCentral = 32013
    esriSRProjCS_NAD1927SPCS_NMWest = 32014
    esriSRProjCS_NAD1927SPCS_NYEast = 32015
    esriSRProjCS_NAD1927SPCS_NYCentral = 32016
    esriSRProjCS_NAD1927SPCS_NYWest = 32017
    esriSRProjCS_NAD1927SPCS_NYLongIsland = 4456
    esriSRProjCS_NAD1927SPCS_NC = 32019
    esriSRProjCS_NAD1927SPCS_NDNorth = 32020
    esriSRProjCS_NAD1927SPCS_NDSouth = 32021
    esriSRProjCS_NAD1927SPCS_OHNorth = 32022
    esriSRProjCS_NAD1927SPCS_OHSouth = 32023
    esriSRProjCS_NAD1927SPCS_OKNorth = 32024
    esriSRProjCS_NAD1927SPCS_OKSouth = 32025
    esriSRProjCS_NAD1927SPCS_ORNorth = 32026
    esriSRProjCS_NAD1927SPCS_ORSouth = 32027
    esriSRProjCS_NAD1927SPCS_PANorth = 32028
    esriSRProjCS_NAD1927SPCS_PASouth = 4455
    esriSRProjCS_NAD1927SPCS_RI = 32030
    esriSRProjCS_NAD1927SPCS_SCNorth = 32031
    esriSRProjCS_NAD1927SPCS_SCSouth = 32033
    esriSRProjCS_NAD1927SPCS_SDNorth = 32034
    esriSRProjCS_NAD1927SPCS_SDSouth = 32035
    esriSRProjCS_NAD1927SPCS_TN = 2204
    esriSRProjCS_NAD1927SPCS_TXNorth = 32037
    esriSRProjCS_NAD1927SPCS_TXNorthCentral = 32038
    esriSRProjCS_NAD1927SPCS_TXCentral = 32039
    esriSRProjCS_NAD1927SPCS_TXSouthCentral = 32040
    esriSRProjCS_NAD1927SPCS_TXSouth = 32041
    esriSRProjCS_NAD1927SPCS_UTNorth = 32042
    esriSRProjCS_NAD1927SPCS_UTCentral = 32043
    esriSRProjCS_NAD1927SPCS_UTSouth = 32044
    esriSRProjCS_NAD1927SPCS_VT = 32045
    esriSRProjCS_NAD1927SPCS_VANorth = 32046
    esriSRProjCS_NAD1927SPCS_VASouth = 32047
    esriSRProjCS_NAD1927SPCS_WANorth = 32048
    esriSRProjCS_NAD1927SPCS_WASouth = 32049
    esriSRProjCS_NAD1927SPCS_WVNorth = 32050
    esriSRProjCS_NAD1927SPCS_WVSouth = 32051
    esriSRProjCS_NAD1927SPCS_WINorth = 32052
    esriSRProjCS_NAD1927SPCS_WICentral = 32053
    esriSRProjCS_NAD1927SPCS_WISouth = 32054
    esriSRProjCS_NAD1927SPCS_WYEast = 32055
    esriSRProjCS_NAD1927SPCS_WYEastCentral = 32056
    esriSRProjCS_NAD1927SPCS_WYWestCentral = 32057
    esriSRProjCS_NAD1927SPCS_WYWest = 32058
    esriSRProjCS_NAD1927SPCS_PuertoRico = 32059
    esriSRProjCS_NAD1927SPCS_StCroix = 32060
    esriSRProjCS_NAD1927SPCS_Guam = 65061
    esriSRProjCS_NAD1983SPCS_ALEast = 26929
    esriSRProjCS_NAD1983SPCS_ALWest = 26930
    esriSRProjCS_NAD1983SPCS_AK1 = 26931
    esriSRProjCS_NAD1983SPCS_AK2 = 26932
    esriSRProjCS_NAD1983SPCS_AK3 = 26933
    esriSRProjCS_NAD1983SPCS_AK4 = 26934
    esriSRProjCS_NAD1983SPCS_AK5 = 26935
    esriSRProjCS_NAD1983SPCS_AK6 = 26936
    esriSRProjCS_NAD1983SPCS_AK7 = 26937
    esriSRProjCS_NAD1983SPCS_AK8 = 26938
    esriSRProjCS_NAD1983SPCS_AK9 = 26939
    esriSRProjCS_NAD1983SPCS_AK10 = 26940
    esriSRProjCS_NAD1983SPCS_AZEast = 26948
    esriSRProjCS_NAD1983SPCS_AZCentral = 26949
    esriSRProjCS_NAD1983SPCS_AZWest = 26950
    esriSRProjCS_NAD1983SPCS_AKNorth = 26951
    esriSRProjCS_NAD1983SPCS_AKSouth = 26952
    esriSRProjCS_NAD1983SPCS_CAI = 26941
    esriSRProjCS_NAD1983SPCS_CAII = 26942
    esriSRProjCS_NAD1983SPCS_CAIII = 26943
    esriSRProjCS_NAD1983SPCS_CAIV = 26944
    esriSRProjCS_NAD1983SPCS_CAV = 26945
    esriSRProjCS_NAD1983SPCS_CAVI = 26946
    esriSRProjCS_NAD1983SPCS_CONorth = 26953
    esriSRProjCS_NAD1983SPCS_COCentral = 26954
    esriSRProjCS_NAD1983SPCS_COSouth = 26955
    esriSRProjCS_NAD1983SPCS_CT = 26956
    esriSRProjCS_NAD1983SPCS_DE = 26957
    esriSRProjCS_NAD1983SPCS_FLEast = 26958
    esriSRProjCS_NAD1983SPCS_FLWest = 26959
    esriSRProjCS_NAD1983SPCS_FLNorth = 26960
    esriSRProjCS_NAD1983SPCS_GAEast = 26966
    esriSRProjCS_NAD1983SPCS_GAWest = 26967
    esriSRProjCS_NAD1983SPCS_HI_1 = 26961
    esriSRProjCS_NAD1983SPCS_HI_2 = 26962
    esriSRProjCS_NAD1983SPCS_HI_3 = 26963
    esriSRProjCS_NAD1983SPCS_HI_4 = 26964
    esriSRProjCS_NAD1983SPCS_HI_5 = 26965
    esriSRProjCS_NAD1983SPCS_IDEast = 26968
    esriSRProjCS_NAD1983SPCS_IDCentral = 26969
    esriSRProjCS_NAD1983SPCS_IDWest = 26970
    esriSRProjCS_NAD1983SPCS_ILEast = 26971
    esriSRProjCS_NAD1983SPCS_ILWest = 26972
    esriSRProjCS_NAD1983SPCS_INEast = 26973
    esriSRProjCS_NAD1983SPCS_INWest = 26974
    esriSRProjCS_NAD1983SPCS_IANorth = 26975
    esriSRProjCS_NAD1983SPCS_IASouth = 26976
    esriSRProjCS_NAD1983SPCS_KSNorth = 26977
    esriSRProjCS_NAD1983SPCS_KSSouth = 26978
    esriSRProjCS_NAD1983SPCS_KYNorth = 2205
    esriSRProjCS_NAD1983SPCS_KYSouth = 26980
    esriSRProjCS_NAD1983SPCS_LANorth = 26981
    esriSRProjCS_NAD1983SPCS_LASouth = 26982
    esriSRProjCS_NAD1983SPCS_MEEast = 26983
    esriSRProjCS_NAD1983SPCS_MEWest = 26984
    esriSRProjCS_NAD1983SPCS_MD = 26985
    esriSRProjCS_NAD1983SPCS_MAMainland = 26986
    esriSRProjCS_NAD1983SPCS_MAIsland = 26987
    esriSRProjCS_NAD1983SPCS_MINorth = 26988
    esriSRProjCS_NAD1983SPCS_MICentral = 26989
    esriSRProjCS_NAD1983SPCS_MISouth = 26990
    esriSRProjCS_NAD1983SPCS_MNNorth = 26991
    esriSRProjCS_NAD1983SPCS_MNCentral = 26992
    esriSRProjCS_NAD1983SPCS_MNSouth = 26993
    esriSRProjCS_NAD1983SPCS_MSEast = 26994
    esriSRProjCS_NAD1983SPCS_MSWest = 26995
    esriSRProjCS_NAD1983SPCS_MOEast = 26996
    esriSRProjCS_NAD1983SPCS_MOCentral = 26997
    esriSRProjCS_NAD1983SPCS_MOWest = 26998
    esriSRProjCS_NAD1983SPCS_MT = 32100
    esriSRProjCS_NAD1983SPCS_NE = 32104
    esriSRProjCS_NAD1983SPCS_NVEast = 32107
    esriSRProjCS_NAD1983SPCS_NVCentral = 32108
    esriSRProjCS_NAD1983SPCS_NVWest = 32109
    esriSRProjCS_NAD1983SPCS_NH = 32110
    esriSRProjCS_NAD1983SPCS_NJ = 32111
    esriSRProjCS_NAD1983SPCS_NMEast = 32112
    esriSRProjCS_NAD1983SPCS_NMCentral = 32113
    esriSRProjCS_NAD1983SPCS_NMWest = 32114
    esriSRProjCS_NAD1983SPCS_NYEast = 32115
    esriSRProjCS_NAD1983SPCS_NYCentral = 32116
    esriSRProjCS_NAD1983SPCS_NYWest = 32117
    esriSRProjCS_NAD1983SPCS_NYLongIsland = 32118
    esriSRProjCS_NAD1983SPCS_NC = 32119
    esriSRProjCS_NAD1983SPCS_NDNorth = 32120
    esriSRProjCS_NAD1983SPCS_NDSouth = 32121
    esriSRProjCS_NAD1983SPCS_OHNorth = 32122
    esriSRProjCS_NAD1983SPCS_OHSouth = 32123
    esriSRProjCS_NAD1983SPCS_OKNorth = 32124
    esriSRProjCS_NAD1983SPCS_OKSouth = 32125
    esriSRProjCS_NAD1983SPCS_ORNorth = 32126
    esriSRProjCS_NAD1983SPCS_ORSouth = 32127
    esriSRProjCS_NAD1983SPCS_PANorth = 32128
    esriSRProjCS_NAD1983SPCS_PASouth = 32129
    esriSRProjCS_NAD1983SPCS_RI = 32130
    esriSRProjCS_NAD1983SPCS_SC = 32133
    esriSRProjCS_NAD1983SPCS_SDNorth = 32134
    esriSRProjCS_NAD1983SPCS_SDSouth = 32135
    esriSRProjCS_NAD1983SPCS_TN = 32136
    esriSRProjCS_NAD1983SPCS_TXNorth = 32137
    esriSRProjCS_NAD1983SPCS_TXNorthCentral = 32138
    esriSRProjCS_NAD1983SPCS_TXCentral = 32139
    esriSRProjCS_NAD1983SPCS_TXSouthCentral = 32140
    esriSRProjCS_NAD1983SPCS_TXSouth = 32141
    esriSRProjCS_NAD1983SPCS_UTNorth = 32142
    esriSRProjCS_NAD1983SPCS_UTCentral = 32143
    esriSRProjCS_NAD1983SPCS_UTSouth = 32144
    esriSRProjCS_NAD1983SPCS_VT = 32145
    esriSRProjCS_NAD1983SPCS_VANorth = 32146
    esriSRProjCS_NAD1983SPCS_VASouth = 32147
    esriSRProjCS_NAD1983SPCS_WANorth = 32148
    esriSRProjCS_NAD1983SPCS_WASouth = 32149
    esriSRProjCS_NAD1983SPCS_WVNorth = 32150
    esriSRProjCS_NAD1983SPCS_WVSouth = 32151
    esriSRProjCS_NAD1983SPCS_WINorth = 32152
    esriSRProjCS_NAD1983SPCS_WICentral = 32153
    esriSRProjCS_NAD1983SPCS_WISouth = 32154
    esriSRProjCS_NAD1983SPCS_WYEast = 32155
    esriSRProjCS_NAD1983SPCS_WYEastCentral = 32156
    esriSRProjCS_NAD1983SPCS_WYWestCentral = 32157
    esriSRProjCS_NAD1983SPCS_WYWest = 32158
    esriSRProjCS_NAD1983SPCS_PRStCroix = 32161
    esriSRProjCS_NAD1983SPCS_Guam = 65161
    esriSRProjCS_NADMichSPCS_MINorth = 26811
    esriSRProjCS_NADMichSPCS_MICentral = 26812
    esriSRProjCS_NADMichSPCS_MISouth = 26813
    esriSRProjCS_NADMichSPCS_MIEastOld = 26801
    esriSRProjCS_NADMichSPCS_MICentralOld = 26802
    esriSRProjCS_NADMichSPCS_MIWestOld = 26803
    esriSRProjCS_NAD1983HARNSPCS_ALEast = 2759
    esriSRProjCS_NAD1983HARNSPCS_ALWest = 2760
    esriSRProjCS_NAD1983HARNSPCS_AZEast = 2761
    esriSRProjCS_NAD1983HARNSPCS_AZCentral = 2762
    esriSRProjCS_NAD1983HARNSPCS_AZWest = 2763
    esriSRProjCS_NAD1983HARNSPCS_CAI = 2766
    esriSRProjCS_NAD1983HARNSPCS_CAII = 2767
    esriSRProjCS_NAD1983HARNSPCS_CAIII = 2768
    esriSRProjCS_NAD1983HARNSPCS_CAIV = 2769
    esriSRProjCS_NAD1983HARNSPCS_CAV = 2770
    esriSRProjCS_NAD1983HARNSPCS_CAVI = 2771
    esriSRProjCS_NAD1983HARNSPCS_CONorth = 2772
    esriSRProjCS_NAD1983HARNSPCS_COCentral = 2773
    esriSRProjCS_NAD1983HARNSPCS_COSouth = 2774
    esriSRProjCS_NAD1983HARNSPCS_CT = 2775
    esriSRProjCS_NAD1983HARNSPCS_DE = 2776
    esriSRProjCS_NAD1983HARNSPCS_FLEast = 2777
    esriSRProjCS_NAD1983HARNSPCS_FLWest = 2778
    esriSRProjCS_NAD1983HARNSPCS_FLNorth = 2779
    esriSRProjCS_NAD1983HARNSPCS_GAEast = 2780
    esriSRProjCS_NAD1983HARNSPCS_GAWest = 2781
    esriSRProjCS_NAD1983HARNSPCS_HI_1 = 2782
    esriSRProjCS_NAD1983HARNSPCS_HI_2 = 2783
    esriSRProjCS_NAD1983HARNSPCS_HI_3 = 2784
    esriSRProjCS_NAD1983HARNSPCS_HI_4 = 2785
    esriSRProjCS_NAD1983HARNSPCS_HI_5 = 2786
    esriSRProjCS_NAD1983HARNSPCS_IDEast = 2787
    esriSRProjCS_NAD1983HARNSPCS_IDCentral = 2788
    esriSRProjCS_NAD1983HARNSPCS_IDWest = 2789
    esriSRProjCS_NAD1983HARNSPCS_ILWest = 2791
    esriSRProjCS_NAD1983HARNSPCS_ILEast = 2790
    esriSRProjCS_NAD1983HARNSPCS_INWest = 2793
    esriSRProjCS_NAD1983HARNSPCS_INEast = 2792
    esriSRProjCS_NAD1983HARNSPCS_KSNorth = 2796
    esriSRProjCS_NAD1983HARNSPCS_KSSouth = 2797
    esriSRProjCS_NAD1983HARNSPCS_KYNorth = 2798
    esriSRProjCS_NAD1983HARNSPCS_KYSouth = 2799
    esriSRProjCS_NAD1983HARNSPCS_LANorth = 2800
    esriSRProjCS_NAD1983HARNSPCS_LASouth = 2801
    esriSRProjCS_NAD1983HARNSPCS_MEEast = 2802
    esriSRProjCS_NAD1983HARNSPCS_MEWest = 2803
    esriSRProjCS_NAD1983HARNSPCS_MD = 2804
    esriSRProjCS_NAD1983HARNSPCS_MAMainland = 2805
    esriSRProjCS_NAD1983HARNSPCS_MAIsland = 2806
    esriSRProjCS_NAD1983HARNSPCS_MINorth = 2807
    esriSRProjCS_NAD1983HARNSPCS_MICentral = 2808
    esriSRProjCS_NAD1983HARNSPCS_MISouth = 2809
    esriSRProjCS_NAD1983HARNSPCS_MSEast = 2813
    esriSRProjCS_NAD1983HARNSPCS_MSWest = 2814
    esriSRProjCS_NAD1983HARNSPCS_MT = 2818
    esriSRProjCS_NAD1983HARNSPCS_NE = 2819
    esriSRProjCS_NAD1983HARNSPCS_NVEast = 2820
    esriSRProjCS_NAD1983HARNSPCS_NVCentral = 2821
    esriSRProjCS_NAD1983HARNSPCS_NVWest = 2822
    esriSRProjCS_NAD1983HARNSPCS_NH = 2823
    esriSRProjCS_NAD1983HARNSPCS_NMEast = 2825
    esriSRProjCS_NAD1983HARNSPCS_NMCentral = 2826
    esriSRProjCS_NAD1983HARNSPCS_NMWest = 2827
    esriSRProjCS_NAD1983HARNSPCS_NYEast = 2828
    esriSRProjCS_NAD1983HARNSPCS_NYCentral = 2829
    esriSRProjCS_NAD1983HARNSPCS_NYWest = 2830
    esriSRProjCS_NAD1983HARNSPCS_NYLongIsland = 2831
    esriSRProjCS_NAD1983HARNSPCS_NDNorth = 2832
    esriSRProjCS_NAD1983HARNSPCS_NDSouth = 2833
    esriSRProjCS_NAD1983HARNSPCS_OHNorth = 2834
    esriSRProjCS_NAD1983HARNSPCS_OHSouth = 2835
    esriSRProjCS_NAD1983HARNSPCS_OKNorth = 2836
    esriSRProjCS_NAD1983HARNSPCS_OKSouth = 2837
    esriSRProjCS_NAD1983HARNSPCS_ORNorth = 2838
    esriSRProjCS_NAD1983HARNSPCS_ORSouth = 2839
    esriSRProjCS_NAD1983HARNSPCS_RI = 2840
    esriSRProjCS_NAD1983HARNSPCS_SDNorth = 2841
    esriSRProjCS_NAD1983HARNSPCS_SDSouth = 2842
    esriSRProjCS_NAD1983HARNSPCS_TN = 2843
    esriSRProjCS_NAD1983HARNSPCS_TXNorth = 2844
    esriSRProjCS_NAD1983HARNSPCS_TXNorthCentral = 2845
    esriSRProjCS_NAD1983HARNSPCS_TXCentral = 2846
    esriSRProjCS_NAD1983HARNSPCS_TXSouthCentral = 2847
    esriSRProjCS_NAD1983HARNSPCS_TXSouth = 2848
    esriSRProjCS_NAD1983HARNSPCS_UTNorth = 2849
    esriSRProjCS_NAD1983HARNSPCS_UTCentral = 2850
    esriSRProjCS_NAD1983HARNSPCS_UTSouth = 2851
    esriSRProjCS_NAD1983HARNSPCS_VT = 2852
    esriSRProjCS_NAD1983HARNSPCS_VANorth = 2853
    esriSRProjCS_NAD1983HARNSPCS_VASouth = 2854
    esriSRProjCS_NAD1983HARNSPCS_WANorth = 2855
    esriSRProjCS_NAD1983HARNSPCS_WASouth = 2856
    esriSRProjCS_NAD1983HARNSPCS_WVNorth = 2857
    esriSRProjCS_NAD1983HARNSPCS_WVSouth = 2858
    esriSRProjCS_NAD1983HARNSPCS_WINorth = 2859
    esriSRProjCS_NAD1983HARNSPCS_WICentral = 2860
    esriSRProjCS_NAD1983HARNSPCS_WISouth = 2861
    esriSRProjCS_NAD1983HARNSPCS_WYEast = 2862
    esriSRProjCS_NAD1983HARNSPCS_WYEastCentral = 2863
    esriSRProjCS_NAD1983HARNSPCS_WYWestCentral = 2864
    esriSRProjCS_NAD1983HARNSPCS_WYWest = 2865
    esriSRProjCS_NAD1983HARNSPCS_PRStCroix = 2866
    esriSRProjCS_NAD1983SPCS_ALEastFT = 102629
    esriSRProjCS_NAD1983SPCS_ALWestFT = 102630
    esriSRProjCS_NAD1983SPCS_AK1FT = 102631
    esriSRProjCS_NAD1983SPCS_AK2FT = 102632
    esriSRProjCS_NAD1983SPCS_AK3FT = 102633
    esriSRProjCS_NAD1983SPCS_AK4FT = 102634
    esriSRProjCS_NAD1983SPCS_AK5FT = 102635
    esriSRProjCS_NAD1983SPCS_AK6FT = 102636
    esriSRProjCS_NAD1983SPCS_AK7FT = 102637
    esriSRProjCS_NAD1983SPCS_AK8FT = 102638
    esriSRProjCS_NAD1983SPCS_AK9FT = 102639
    esriSRProjCS_NAD1983SPCS_AK10FT = 102640
    esriSRProjCS_NAD1983SPCS_AZEastFT = 102648
    esriSRProjCS_NAD1983SPCS_AZCentralFT = 102649
    esriSRProjCS_NAD1983SPCS_AZWestFT = 102650
    esriSRProjCS_NAD1983SPCS_ARNorthFT = 3433
    esriSRProjCS_NAD1983SPCS_ARSouthFT = 3434
    esriSRProjCS_NAD1983SPCS_CAIFT = 2225
    esriSRProjCS_NAD1983SPCS_CAIIFT = 2226
    esriSRProjCS_NAD1983SPCS_CAIIIFT = 2227
    esriSRProjCS_NAD1983SPCS_CAIVFT = 2228
    esriSRProjCS_NAD1983SPCS_CAVFT = 2229
    esriSRProjCS_NAD1983SPCS_CAVIFT = 2230
    esriSRProjCS_NAD1983SPCS_CONorthFT = 2231
    esriSRProjCS_NAD1983SPCS_COCentFT = 2232
    esriSRProjCS_NAD1983SPCS_COSouthFT = 2233
    esriSRProjCS_NAD1983SPCS_CTFT = 2234
    esriSRProjCS_NAD1983SPCS_DEFT = 2235
    esriSRProjCS_NAD1983SPCS_FLEastFT = 2236
    esriSRProjCS_NAD1983SPCS_FLWestFT = 2237
    esriSRProjCS_NAD1983SPCS_FLNorthFT = 2238
    esriSRProjCS_NAD1983SPCS_GAEastFT = 2239
    esriSRProjCS_NAD1983SPCS_GAWestFT = 2240
    esriSRProjCS_NAD1983SPCS_HI_1FT = 102661
    esriSRProjCS_NAD1983SPCS_HI_2FT = 102662
    esriSRProjCS_NAD1983SPCS_HI_3FT = 3759
    esriSRProjCS_NAD1983SPCS_HI_4FT = 102664
    esriSRProjCS_NAD1983SPCS_HI_5FT = 102665
    esriSRProjCS_NAD1983SPCS_IDEastFT = 2241
    esriSRProjCS_NAD1983SPCS_IDCentralFT = 2242
    esriSRProjCS_NAD1983SPCS_IDWestFT = 2243
    esriSRProjCS_NAD1983SPCS_ILEastFT = 3435
    esriSRProjCS_NAD1983SPCS_ILWestFT = 3436
    esriSRProjCS_NAD1983SPCS_INEastFT = 2965
    esriSRProjCS_NAD1983SPCS_INWestFT = 2966
    esriSRProjCS_NAD1983SPCS_IANorthFT = 3417
    esriSRProjCS_NAD1983SPCS_IASouthFT = 3418
    esriSRProjCS_NAD1983SPCS_KSNorthFT = 3419
    esriSRProjCS_NAD1983SPCS_KSSouthFT = 3420
    esriSRProjCS_NAD1983SPCS_KYNorthFT = 2246
    esriSRProjCS_NAD1983SPCS_KYSouthFT = 2247
    esriSRProjCS_NAD1983SPCS_LANorthFT = 3451
    esriSRProjCS_NAD1983SPCS_LASouthFT = 3452
    esriSRProjCS_NAD1983SPCS_MEEastFT = 26847
    esriSRProjCS_NAD1983SPCS_MEWestFT = 26848
    esriSRProjCS_NAD1983SPCS_MDFT = 2248
    esriSRProjCS_NAD1983SPCS_MAMainlandFT = 2249
    esriSRProjCS_NAD1983SPCS_MAIslandFT = 2250
    esriSRProjCS_NAD1983SPCS_MINorthFT = 102688
    esriSRProjCS_NAD1983SPCS_MICentralFT = 102689
    esriSRProjCS_NAD1983SPCS_MISouthFT = 102690
    esriSRProjCS_NAD1983SPCS_MNNorthFT = 26849
    esriSRProjCS_NAD1983SPCS_MNCentralFT = 26850
    esriSRProjCS_NAD1983SPCS_MNSouthFT = 26851
    esriSRProjCS_NAD1983SPCS_MSEastFT = 2254
    esriSRProjCS_NAD1983SPCS_MSWestFT = 2255
    esriSRProjCS_NAD1983SPCS_MOEastFT = 102696
    esriSRProjCS_NAD1983SPCS_MOCentralFT = 102697
    esriSRProjCS_NAD1983SPCS_MOWestFT = 102698
    esriSRProjCS_NAD1983SPCS_MTFT = 102700
    esriSRProjCS_NAD1983SPCS_NEFT = 26852
    esriSRProjCS_NAD1983SPCS_NVEastFT = 3421
    esriSRProjCS_NAD1983SPCS_NVCentralFT = 3422
    esriSRProjCS_NAD1983SPCS_NVWestFT = 3423
    esriSRProjCS_NAD1983SPCS_NHFT = 3437
    esriSRProjCS_NAD1983SPCS_NJFT = 3424
    esriSRProjCS_NAD1983SPCS_NMEastFT = 2257
    esriSRProjCS_NAD1983SPCS_NMCentralFT = 2258
    esriSRProjCS_NAD1983SPCS_NMWestFT = 2259
    esriSRProjCS_NAD1983SPCS_NYEastFT = 2260
    esriSRProjCS_NAD1983SPCS_NYCentralFT = 2261
    esriSRProjCS_NAD1983SPCS_NYWestFT = 2262
    esriSRProjCS_NAD1983SPCS_NYLongIslFT = 2263
    esriSRProjCS_NAD1983SPCS_NCFT = 2264
    esriSRProjCS_NAD1983SPCS_NDNorthFT = 102720
    esriSRProjCS_NAD1983SPCS_NDSouthFT = 102721
    esriSRProjCS_NAD1983SPCS_OHNorthFT = 3734
    esriSRProjCS_NAD1983SPCS_OHSouthFT = 3735
    esriSRProjCS_NAD1983SPCS_OKNorthFT = 2267
    esriSRProjCS_NAD1983SPCS_OKSouthFT = 2268
    esriSRProjCS_NAD1983SPCS_ORNorthFT = 102726
    esriSRProjCS_NAD1983SPCS_ORSouthFT = 102727
    esriSRProjCS_NAD1983SPCS_PANorthFT = 2271
    esriSRProjCS_NAD1983SPCS_PASouthFT = 2272
    esriSRProjCS_NAD1983SPCS_RIFT = 3438
    esriSRProjCS_NAD1983SPCS_SCFT = 102733
    esriSRProjCS_NAD1983SPCS_SDNorthFT = 4457
    esriSRProjCS_NAD1983SPCS_SDSouthFT = 3455
    esriSRProjCS_NAD1983SPCS_TNFT = 2274
    esriSRProjCS_NAD1983SPCS_TXNorthFT = 2275
    esriSRProjCS_NAD1983SPCS_TXNorthCentFT = 2276
    esriSRProjCS_NAD1983SPCS_TXCentralFT = 2277
    esriSRProjCS_NAD1983SPCS_TXSouthCentFT = 2278
    esriSRProjCS_NAD1983SPCS_TXSouthFT = 2279
    esriSRProjCS_NAD1983SPCS_UTNorthFT = 3560
    esriSRProjCS_NAD1983SPCS_UTCentralFT = 3566
    esriSRProjCS_NAD1983SPCS_UTSouthFT = 3567
    esriSRProjCS_NAD1983SPCS_VTFT = 5646
    esriSRProjCS_NAD1983SPCS_VANorthFT = 2283
    esriSRProjCS_NAD1983SPCS_VASouthFT = 2284
    esriSRProjCS_NAD1983SPCS_WANorthFT = 2285
    esriSRProjCS_NAD1983SPCS_WASouthFT = 2286
    esriSRProjCS_NAD1983SPCS_WVNorthFT = 26853
    esriSRProjCS_NAD1983SPCS_WVSouthFT = 26854
    esriSRProjCS_NAD1983SPCS_WINorthFT = 2287
    esriSRProjCS_NAD1983SPCS_WICentralFT = 2288
    esriSRProjCS_NAD1983SPCS_WISouthFT = 2289
    esriSRProjCS_NAD1983SPCS_WYEastFT = 3736
    esriSRProjCS_NAD1983SPCS_WYEastCentralFT = 3737
    esriSRProjCS_NAD1983SPCS_WYWestCentralFT = 3738
    esriSRProjCS_NAD1983SPCS_WYWestFT = 3739
    esriSRProjCS_NAD1983SPCS_PRStCroixFT = 102761
    esriSRProjCS_NAD1983SPCS_GuamFT = 102766
    esriSRProjCS_AdindanUTM_37N = 20137
    esriSRProjCS_AdindanUTM_38N = 20138
    esriSRProjCS_AfgooyeUTM_38N = 20538
    esriSRProjCS_AfgooyeUTM_39N = 20539
    esriSRProjCS_AinElAbd1970UTM_37N = 20437
    esriSRProjCS_AinElAbd1970UTM_38N = 20438
    esriSRProjCS_AinElAbd1970UTM_39N = 20439
    esriSRProjCS_AratuUTM_22S = 20822
    esriSRProjCS_AratuUTM_23S = 20823
    esriSRProjCS_AratuUTM_24S = 20824
    esriSRProjCS_BataviaUTM_48S = 21148
    esriSRProjCS_BataviaUTM_49S = 21149
    esriSRProjCS_BataviaUTM_50S = 21150
    esriSRProjCS_BogotaUTM_17N = 21817
    esriSRProjCS_BogotaUTM_18N = 21818
    esriSRProjCS_CamacupaUTM_32S = 22032
    esriSRProjCS_CamacupaUTM_33S = 22033
    esriSRProjCS_CarthageUTM_32N = 22332
    esriSRProjCS_CorregoAlegreUTM_23S = 22523
    esriSRProjCS_CorregoAlegreUTM_24S = 22524
    esriSRProjCS_Datum73UTM_29N = 27429
    esriSRProjCS_DoualaUTM_32N = 22832
    esriSRProjCS_FahudUTM_39N = 23239
    esriSRProjCS_FahudUTM_40N = 23240
    esriSRProjCS_GarouaUTM_33N = 2312
    esriSRProjCS_GreekGrid = 2100
    esriSRProjCS_Indonesia1974UTM_46N = 23846
    esriSRProjCS_Indonesia1974UTM_47N = 23847
    esriSRProjCS_Indonesia1974UTM_48N = 23848
    esriSRProjCS_Indonesia1974UTM_49N = 23849
    esriSRProjCS_Indonesia1974UTM_50N = 23850
    esriSRProjCS_Indonesia1974UTM_51N = 23851
    esriSRProjCS_Indonesia1974UTM_52N = 23852
    esriSRProjCS_Indonesia1974UTM_53N = 23853
    esriSRProjCS_Indonesia1974UTM_46S = 23886
    esriSRProjCS_Indonesia1974UTM_47S = 23887
    esriSRProjCS_Indonesia1974UTM_48S = 23888
    esriSRProjCS_Indonesia1974UTM_49S = 23889
    esriSRProjCS_Indonesia1974UTM_50S = 23890
    esriSRProjCS_Indonesia1974UTM_51S = 23891
    esriSRProjCS_Indonesia1974UTM_52S = 23892
    esriSRProjCS_Indonesia1974UTM_53S = 23893
    esriSRProjCS_Indonesia1974UTM_54S = 23894
    esriSRProjCS_Indian1954UTM_47N = 23947
    esriSRProjCS_Indian1954UTM_48N = 23948
    esriSRProjCS_Indian1975UTM_47N = 24047
    esriSRProjCS_Indian1975UTM_48N = 24048
    esriSRProjCS_KertauUTM_47N = 24547
    esriSRProjCS_KertauUTM_48N = 24548
    esriSRProjCS_LaCanoaUTM_18N = 24718
    esriSRProjCS_LaCanoaUTM_19N = 24719
    esriSRProjCS_LaCanoaUTM_20N = 24720
    esriSRProjCS_LaCanoaUTM_21N = 24721
    esriSRProjCS_LomeUTM_31N = 25231
    esriSRProjCS_MPoralokoUTM_32N = 26632
    esriSRProjCS_MPoralokoUTM_32S = 26692
    esriSRProjCS_Malongo1987UTM_32S = 25932
    esriSRProjCS_MassawaUTM_37N = 26237
    esriSRProjCS_MhastUTM_32S = 26432
    esriSRProjCS_MinnaUTM_31N = 26331
    esriSRProjCS_MinnaUTM_32N = 26332
    esriSRProjCS_Nahrwan1967UTM_38N = 27038
    esriSRProjCS_Nahrwan1967UTM_39N = 27039
    esriSRProjCS_Nahrwan1967UTM_40N = 27040
    esriSRProjCS_NGNUTM_38N = 31838
    esriSRProjCS_NGNUTM_39N = 31839
    esriSRProjCS_NordSahara1959UTM_29N = 30729
    esriSRProjCS_NordSahara1959UTM_30N = 30730
    esriSRProjCS_NordSahara1959UTM_31N = 30731
    esriSRProjCS_NordSahara1959UTM_32N = 30732
    esriSRProjCS_Naparima1972UTM_20N = 27120
    esriSRProjCS_PointeNoireUTM_32S = 28232
    esriSRProjCS_PSADUTM_18N = 24818
    esriSRProjCS_PSADUTM_19N = 24819
    esriSRProjCS_PSADUTM_20N = 24820
    esriSRProjCS_PSADUTM_21N = 24821
    esriSRProjCS_PSADUTM_17S = 24877
    esriSRProjCS_PSADUTM_18S = 24878
    esriSRProjCS_PSADUTM_19S = 24879
    esriSRProjCS_PSADUTM_20S = 24880
    esriSRProjCS_PSADUTM_22S = 24882
    esriSRProjCS_SapperHill1943UTM_20S = 29220
    esriSRProjCS_SapperHill1943UTM_21S = 29221
    esriSRProjCS_SchwarzeckUTM_33S = 29333
    esriSRProjCS_SudanUTM_35N = 29635
    esriSRProjCS_SudanUTM_36N = 29636
    esriSRProjCS_Tananarive1925UTM_38S = 29738
    esriSRProjCS_Tananarive1925UTM_39S = 29739
    esriSRProjCS_TrucialCoast1948UTM_39N = 30339
    esriSRProjCS_TrucialCoast1948UTM_40N = 30340
    esriSRProjCS_Timbalai1948UTM_49N = 29849
    esriSRProjCS_Timbalai1948UTM_50N = 29850
    esriSRProjCS_Yoff1972UTM_28N = 31028
    esriSRProjCS_Zanderij1972UTM_21N = 31121
    esriSRProjCS_ATS1977NewBrunswick = 2200
    esriSRProjCS_ATS1977PrinceEdwardIs = 2290
    esriSRProjCS_NAD1983CSRS98NewBrunswick = 2953
    esriSRProjCS_NAD1983CSRS98UTM_19N = 2960
    esriSRProjCS_NAD1983CSRS98UTM_20N = 2961
    esriSRProjCS_NAD1983QuebecLambert = 32198
    esriSRProjCS_ATS1977MTM_4NS = 2294
    esriSRProjCS_ATS1977MTM_5NS = 2295
    esriSRProjCS_AmersfoortRD_Old = 28991
    esriSRProjCS_AmersfoortRD_New = 28992
    esriSRProjCS_KuwaitUtilityKTM = 31901
    esriSRProjCS_Philippines_I = 25391
    esriSRProjCS_Philippines_II = 25392
    esriSRProjCS_Philippines_III = 25393
    esriSRProjCS_Philippines_IV = 25394
    esriSRProjCS_Philippines_V = 25395
    esriSRProjCS_AustriaFerroWest = 31281
    esriSRProjCS_AustriaFerroCentral = 31282
    esriSRProjCS_AustriaFerroEast = 31283
    esriSRProjCS_MGI_M28 = 31284
    esriSRProjCS_MGI_M31 = 31285
    esriSRProjCS_MGI_M34 = 31286
    esriSRProjCS_MGIAustriaLambert = 31287
    esriSRProjCS_MonteMarioRomeItaly1 = 26591
    esriSRProjCS_MonteMarioRomeItaly2 = 26592
    esriSRProjCS_MonteMarioItaly1 = 3003
    esriSRProjCS_MonteMarioItaly2 = 3004
    esriSRProjCS_Argentina_1 = 22191
    esriSRProjCS_Argentina_2 = 22192
    esriSRProjCS_Argentina_3 = 22193
    esriSRProjCS_Argentina_4 = 22194
    esriSRProjCS_Argentina_5 = 22195
    esriSRProjCS_Argentina_6 = 22196
    esriSRProjCS_Argentina_7 = 22197
    esriSRProjCS_Germany_1 = 31491
    esriSRProjCS_Germany_2 = 31492
    esriSRProjCS_Germany_3 = 31493
    esriSRProjCS_Germany_4 = 31494
    esriSRProjCS_Germany_5 = 31495
    esriSRProjCS_BahrainStateGrid = 20499
    esriSRProjCS_ColombiaWest = 21896
    esriSRProjCS_ColombiaBogota = 21897
    esriSRProjCS_ColombiaECentral = 21898
    esriSRProjCS_ColombiaEast = 21899
    esriSRProjCS_EgyptBlueBelt = 22991
    esriSRProjCS_EgyptRedBelt = 22992
    esriSRProjCS_EgyptPurpleBelt = 22993
    esriSRProjCS_EgyptExtendedPurpleBelt = 22994
    esriSRProjCS_GhanaMetreGrid = 25000
    esriSRProjCS_IrishNationalGrid = 29902
    esriSRProjCS_NZGD1949NorthIsland = 27291
    esriSRProjCS_NZGD1949SouthIsland = 27292
    esriSRProjCS_NigeriaWestBelt = 26391
    esriSRProjCS_NigeriaMidBelt = 26392
    esriSRProjCS_NigeriaEastBelt = 26393
    esriSRProjCS_PeruWest = 24891
    esriSRProjCS_PeruCentral = 24892
    esriSRProjCS_PeruEast = 24893
    esriSRProjCS_LisbonPortugueseGrid = 20790
    esriSRProjCS_QatarNationalGrid = 28600
    esriSRProjCS_BritishNationalGrid = 27700
    esriSRProjCS_SwedishNationalGrid = 30800
    esriSRProjCS_VoirolNordAlgerieAncienne = 30491
    esriSRProjCS_VoirolSudAlgerieAncienne = 30492
    esriSRProjCS_VoirolNordAlgerie = 30591
    esriSRProjCS_VoirolSudAlgerie = 30592
    esriSRProjCS_NorddeGuerre = 27500
    esriSRProjCS_FranceI = 27581
    esriSRProjCS_FranceII = 27582
    esriSRProjCS_FranceIII = 27583
    esriSRProjCS_FranceIV = 27584
    esriSRProjCS_NordFrance = 27591
    esriSRProjCS_CentreFrance = 27592
    esriSRProjCS_SudFrance = 27593
    esriSRProjCS_Corse = 27594
    esriSRProjCS_Kalianpur1880India_0 = 24370
    esriSRProjCS_Kalianpur1880India_I = 24371
    esriSRProjCS_Kalianpur1880India_IIa = 24372
    esriSRProjCS_Kalianpur1880India_IIb = 24382
    esriSRProjCS_Kalianpur1880India_III = 24373
    esriSRProjCS_Kalianpur1880India_IV = 24374
    esriSRProjCS_Kalianpur1937India_IIb = 24375
    esriSRProjCS_Kalianpur1962India_I = 24376
    esriSRProjCS_Kalianpur1962India_IIa = 24377
    esriSRProjCS_Kalianpur1975India_I = 24378
    esriSRProjCS_Kalianpur1975India_IIa = 24379
    esriSRProjCS_Kalianpur1975India_IIb = 24380
    esriSRProjCS_Kalianpur1975India_III = 24381
    esriSRProjCS_Kalianpur1975India_IV = 24383
    esriSRProjCS_Kalianpur1937_UTM45N = 24305
    esriSRProjCS_Kalianpur1937_UTM46N = 24306
    esriSRProjCS_Kalianpur1962_UTM41N = 24311
    esriSRProjCS_Kalianpur1962_UTM42N = 24312
    esriSRProjCS_Kalianpur1962_UTM43N = 24313
    esriSRProjCS_Kalianpur1975_UTM42N = 24342
    esriSRProjCS_Kalianpur1975_UTM43N = 24343
    esriSRProjCS_Kalianpur1975_UTM44N = 24344
    esriSRProjCS_Kalianpur1975_UTM45N = 24345
    esriSRProjCS_Kalianpur1975_UTM46N = 24346
    esriSRProjCS_Kalianpur1975_UTM47N = 24347
    esriSRProjCS_Jamaica1875OldGrid = 24100
    esriSRProjCS_JAD1969JamaicaGrid = 24200
    esriSRProjCS_MerchichNordMaroc = 26191
    esriSRProjCS_MerchichSudMaroc = 26192
    esriSRProjCS_MerchichSahara = 26193
    esriSRProjCS_CarthageNordTunisie = 22391
    esriSRProjCS_CarthageSudTunisie = 22392
    esriSRProjCS_KOC_Lambert = 24600
    esriSRProjCS_BelgeLambert1950 = 21500
    esriSRProjCS_DealulPisculuiStereo1933 = 31600
    esriSRProjCS_DealulPisculuiStereo1970 = 31700
    esriSRProjCS_WGS1984UPS_North = 32661
    esriSRProjCS_WGS1984UPS_South = 32761
    esriSRProjCS_WGS1984TM36_SE = 32766
    esriSRProjCS_NAD1983MTM_1 = 32181
    esriSRProjCS_NAD1983MTM_2 = 32182
    esriSRProjCS_NAD1983MTM_2SCoPQ = 32180
    esriSRProjCS_NAD1983MTM_3 = 32183
    esriSRProjCS_NAD1983MTM_4 = 32184
    esriSRProjCS_NAD1983MTM_5 = 32185
    esriSRProjCS_NAD1983MTM_6 = 32186
    esriSRProjCS_NAD1983MTM_7 = 32187
    esriSRProjCS_NAD1983MTM_8 = 32188
    esriSRProjCS_NAD1983MTM_9 = 32189
    esriSRProjCS_NAD1983MTM_10 = 32190
    esriSRProjCS_NAD1983MTM_11 = 32191
    esriSRProjCS_NAD1983MTM_12 = 32192
    esriSRProjCS_NAD1983MTM_13 = 32193
    esriSRProjCS_NAD1983MTM_14 = 32194
    esriSRProjCS_NAD1983MTM_15 = 32195
    esriSRProjCS_NAD1983MTM_16 = 32196
    esriSRProjCS_NAD1983MTM_17 = 32197
    esriSRProjCS_NAD1927MTM_1 = 32081
    esriSRProjCS_NAD1927MTM_2 = 32082
    esriSRProjCS_NAD1927MTM_3 = 32083
    esriSRProjCS_NAD1927MTM_4 = 32084
    esriSRProjCS_NAD1927MTM_5 = 32085
    esriSRProjCS_NAD1927MTM_6 = 32086
    esriSRProjCS_Madrid1870MadridSpain = 2062
    esriSRProjCS_RT90_25GonWest = 2400
    esriSRProjCS_SingaporeGrid = 24500
    esriSRProjCS_CamacupaTM11_30SE = 22091
    esriSRProjCS_CamacupaTM12_SE = 22092
    esriSRProjCS_ED1950TM0_N = 23090
    esriSRProjCS_ED1950TM5_NE = 23095
    esriSRProjCS_FD1958Iraq = 3200
    esriSRProjCS_Indian1960TM_106NE = 3176
    esriSRProjCS_Indian1960UTM_48N = 3148
    esriSRProjCS_Indian1960UTM_49N = 3149
    esriSRProjCS_LKS1994 = 3346
    esriSRProjCS_MoznetUTM_36S = 3036
    esriSRProjCS_MoznetUTM_37S = 3037
    esriSRProjCS_SambojaUTM_50S = 2550
    esriSRProjCS_TeteUTM_36S = 2736
    esriSRProjCS_TeteUTM_37S = 2737
    esriSRProjCS_OldHawaiian_HI1 = 3561
    esriSRProjCS_OldHawaiian_HI2 = 3562
    esriSRProjCS_OldHawaiian_HI3 = 3563
    esriSRProjCS_OldHawaiian_HI4 = 3564
    esriSRProjCS_OldHawaiian_HI5 = 3565
    esriSRProjCS_TokyoJapan1 = 30161
    esriSRProjCS_TokyoJapan2 = 30162
    esriSRProjCS_TokyoJapan3 = 30163
    esriSRProjCS_TokyoJapan4 = 30164
    esriSRProjCS_TokyoJapan5 = 30165
    esriSRProjCS_TokyoJapan6 = 30166
    esriSRProjCS_TokyoJapan7 = 30167
    esriSRProjCS_TokyoJapan8 = 30168
    esriSRProjCS_TokyoJapan9 = 30169
    esriSRProjCS_TokyoJapan10 = 30170
    esriSRProjCS_TokyoJapan11 = 30171
    esriSRProjCS_TokyoJapan12 = 30172
    esriSRProjCS_TokyoJapan13 = 30173
    esriSRProjCS_TokyoJapan14 = 30174
    esriSRProjCS_TokyoJapan15 = 30175
    esriSRProjCS_TokyoJapan16 = 30176
    esriSRProjCS_TokyoJapan17 = 30177
    esriSRProjCS_TokyoJapan18 = 30178
    esriSRProjCS_TokyoJapan19 = 30179
    esriSRProjCS_PuertoRicoSPCS_PR = 3991
    esriSRProjCS_PuertoRicoSPCS_VI = 3992
    esriSRProjCS_EstonianCS1992 = 3300
    esriSRProjCS_Palestine1923PalestineGrid = 28191
    esriSRProjCS_Palestine1923IsraelCSGrid = 28193
    esriSRProjCS_IsraelIsraelTMGrid = 2039
    esriSRProjCS_SAD1969PalestineGrid = 29101
    esriSRProjCS_PDO1993UTM_39N = 3439
    esriSRProjCS_PDO1993UTM_40N = 3440
    esriSRProjCS_PuertoRicoUTM_20N = 3920
    esriSRProjCS_Palestine1923PalestineBelt = 28192
    esriSRProjCS_ETRF1989TM_Baltic1993 = 103584
    esriSRProjCS_Anguilla1957BritishWIndies = 2000
    esriSRProjCS_Antigua1943BritishWIndies = 2001
    esriSRProjCS_Barbados1938BritishWIndies = 21291
    esriSRProjCS_Barbados1938BarbadosGrid = 21292
    esriSRProjCS_Dominica1945BritishWIndies = 2002
    esriSRProjCS_Grenada1953BritishWIndies = 2003
    esriSRProjCS_Montserrat1958BritishWIndies = 2004
    esriSRProjCS_StKitts1955BritishWIndies = 2005
    esriSRProjCS_StLucia1955BritishWIndies = 2006
    esriSRProjCS_StVincent1945BritishWIndies = 2007
    esriSRProjCS_NAD1927CGQ77MTM_2SCoPQ = 2008
    esriSRProjCS_NAD1927CGQ77MTM_3SCoPQ = 2009
    esriSRProjCS_NAD1927CGQ77MTM_4SCoPQ = 2010
    esriSRProjCS_NAD1927CGQ77MTM_5SCoPQ = 2011
    esriSRProjCS_NAD1927CGQ77MTM_6SCoPQ = 2012
    esriSRProjCS_NAD1927CGQ77MTM_7SCoPQ = 2013
    esriSRProjCS_NAD1927CGQ77MTM_8SCoPQ = 2014
    esriSRProjCS_NAD1927CGQ77MTM_9SCoPQ = 2015
    esriSRProjCS_NAD1927CGQ77MTM_10SCoPQ = 2016
    esriSRProjCS_NAD1927Def1976MTM_8 = 2017
    esriSRProjCS_NAD1927Def1976MTM_9 = 2018
    esriSRProjCS_NAD1927Def1976MTM_10 = 2019
    esriSRProjCS_NAD1927Def1976MTM_11 = 2020
    esriSRProjCS_NAD1927Def1976MTM_12 = 2021
    esriSRProjCS_NAD1927Def1976MTM_13 = 2022
    esriSRProjCS_NAD1927Def1976MTM_14 = 2023
    esriSRProjCS_NAD1927Def1976MTM_15 = 2024
    esriSRProjCS_NAD1927Def1976MTM_16 = 2025
    esriSRProjCS_NAD1927Def1976MTM_17 = 2026
    esriSRProjCS_NAD1927Def1976UTM_15N = 2027
    esriSRProjCS_NAD1927Def1976UTM_16N = 2028
    esriSRProjCS_NAD1927Def1976UTM_17N = 2029
    esriSRProjCS_NAD1927Def1976UTM_18N = 2030
    esriSRProjCS_NAD1927CGQ77UTM_17N = 2031
    esriSRProjCS_NAD1927CGQ77UTM_18N = 2032
    esriSRProjCS_NAD1927CGQ77UTM_19N = 2033
    esriSRProjCS_NAD1927CGQ77UTM_20N = 2034
    esriSRProjCS_NAD1927CGQ77UTM_21N = 2035
    esriSRProjCS_NGO1948Norway1 = 102101
    esriSRProjCS_NGO1948Norway2 = 102102
    esriSRProjCS_NGO1948Norway3 = 102103
    esriSRProjCS_NGO1948Norway4 = 102104
    esriSRProjCS_NGO1948Norway5 = 102105
    esriSRProjCS_NGO1948Norway6 = 102106
    esriSRProjCS_NGO1948Norway7 = 102107
    esriSRProjCS_NGO1948Norway8 = 102108
    esriSRProjCS_NGO1948OsloNorway1 = 27391
    esriSRProjCS_NGO1948OsloNorway2 = 27392
    esriSRProjCS_NGO1948OsloNorway3 = 27393
    esriSRProjCS_NGO1948OsloNorway4 = 27394
    esriSRProjCS_NGO1948OsloNorway5 = 27395
    esriSRProjCS_NGO1948OsloNorway6 = 27396
    esriSRProjCS_NGO1948OsloNorway7 = 27397
    esriSRProjCS_NGO1948OsloNorway8 = 27398
    esriSRProjCS_OldHawaiianUTM4N = 102114
    esriSRProjCS_OldHawaiianUTM5N = 102115
    esriSRProjCS_NAD1927MichiganGeoRef = 102120
    esriSRProjCS_NAD1983MichiganGeoRef = 102121
    esriSRProjCS_NGO1948UTM32N = 102132
    esriSRProjCS_NGO1948UTM33N = 102133
    esriSRProjCS_NGO1948UTM34N = 102134
    esriSRProjCS_NGO1948UTM35N = 102135
    esriSRProjCS_ED1950_ED77_UTM_38N = 2058
    esriSRProjCS_ED1950_ED77_UTM_39N = 2059
    esriSRProjCS_ED1950_ED77_UTM_40N = 2060
    esriSRProjCS_ED1950_ED77_UTM_41N = 2061
    esriSRProjCS_Abidjan1987UTM_29N = 2043
    esriSRProjCS_Abidjan1987UTM_30N = 2041
    esriSRProjCS_Locodjo1965UTM_29N = 2042
    esriSRProjCS_Locodjo1965UTM_30N = 2040
    esriSRProjCS_Hanoi1972GK_18 = 2044
    esriSRProjCS_Hanoi1972GK_19 = 2045
    esriSRProjCS_NAD1927GuatemalaNorte = 32061
    esriSRProjCS_NAD1927GuatemalaSur = 32062
    esriSRProjCS_Trinidad1903TrinidadGrid = 30200
    esriSRProjCS_DeirEzZorLevant = 22700
    esriSRProjCS_DeirEzZorSyria = 22770
    esriSRProjCS_MerchichDegreeNordMaroc = 102191
    esriSRProjCS_MerchichDegreeSudMaroc = 102192
    esriSRProjCS_MerchichDegreeSahara = 102193
    esriSRProjCS_VoirolDegreeNAlgerieAncienne = 102491
    esriSRProjCS_VoirolDegreeSAlgerieAncienne = 102492
    esriSRProjCS_VoirolUnifieDegreeNAlgerie = 102591
    esriSRProjCS_VoirolUnifieDegreeSAlgerie = 102592

class esriSRProjCS2Type(Enumeration):
    __slots__ = ['esriSRProjCS_SJTSK_FERRO_KROVAK',
                 'esriSRProjCS_SJTSK_KROVAK',
                 'esriSRProjCS_SJTSK_FERRO_KROVAK_EN',
                 'esriSRProjCS_SJTSK_KROVAK_EN',
                 'esriSRProjCS_NAD1983HARNSPCS_ARNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_ARSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_MNNorth',
                 'esriSRProjCS_NAD1983HARNSPCS_MNCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_MNSouth',
                 'esriSRProjCS_NAD1983HARNSPCS_MOEast',
                 'esriSRProjCS_NAD1983HARNSPCS_MOCentral',
                 'esriSRProjCS_NAD1983HARNSPCS_MOWest',
                 'esriSRProjCS_NZGD1949NewZealandMapGrid',
                 'esriSRProjCS_FranceIDegrees',
                 'esriSRProjCS_FranceIIDegrees',
                 'esriSRProjCS_FranceIIIDegrees',
                 'esriSRProjCS_FranceIVDegrees',
                 'esriSRProjCS_BelgeLambert1972',
                 'esriSRProjCS_Hungarian1972_EOV',
                 'esriSRProjCS_CH1903_LV03',
                 'esriSRProjCS_CH1903Plus_LV95',
                 'esriSRProjCS_RGF1993_Lambert93',
                 'esriSRProjCS_NAD1927MichiganGeoRef_m',
                 'esriSRProjCS_NAD1983MichiganGeoRef_m',
                 'esriSRProjCS_HongKong1980Grid',
                 'esriSRProjCS_HongKong1980_UTM49N',
                 'esriSRProjCS_HongKong1980_UTM50N',
                 'esriSRProjCS_Tokyo_UTM51N',
                 'esriSRProjCS_Tokyo_UTM52N',
                 'esriSRProjCS_Tokyo_UTM53N',
                 'esriSRProjCS_Tokyo_UTM54N',
                 'esriSRProjCS_Tokyo_UTM55N',
                 'esriSRProjCS_Tokyo_UTM56N',
                 'esriSRProjCS_Datum73HayfordGaussIGEOE',
                 'esriSRProjCS_Datum73HayfordGaussIPCC',
                 'esriSRProjCS_Graciosa1948_UTM26N',
                 'esriSRProjCS_LisboaBesselBonne',
                 'esriSRProjCS_LisboaHayfordGaussIGEOE',
                 'esriSRProjCS_LisboaHayfordGaussIPCC',
                 'esriSRProjCS_ObservMeteor1939_UTM25N',
                 'esriSRProjCS_PortoSanto1936_UTM28N',
                 'esriSRProjCS_SaoBraz_UTM26N',
                 'esriSRProjCS_SelvagemGrande1938_UTM28N',
                 'esriSRProjCS_NAD1983HARNSPCS_NJ',
                 'esriSRProjCS_AmericanSamoa1962SPCS_AS',
                 'esriSRProjCS_Pulkovo1942_58_PolandZone1',
                 'esriSRProjCS_Pulkovo1942_58_PolandZone2',
                 'esriSRProjCS_Pulkovo1942_58_PolandZone3',
                 'esriSRProjCS_Pulkovo1942_58_PolandZone4',
                 'esriSRProjCS_Pulkovo1942_58_PolandZone5',
                 'esriSRProjCS_AzoresOccidental1939_UTMZone25N',
                 'esriSRProjCS_AzoresCentral1948_UTMZone26N',
                 'esriSRProjCS_AzoresOriental1940_UTMZone26N',
                 'esriSRProjCS_Fiji1956_UTMZone60S',
                 'esriSRProjCS_Fiji1956_UTMZone1S',
                 'esriSRProjCS_NAD1983BCEnvAlbers',
                 'esriSRProjCS_NAD1983CSRS_UTMZone7N',
                 'esriSRProjCS_NAD1983CSRS_UTMZone8N',
                 'esriSRProjCS_NAD1983CSRS_UTMZone9N',
                 'esriSRProjCS_NAD1983CSRS_UTMZone10N',
                 'esriSRProjCS_NAD1983OntarioMNRLambert',
                 'esriSRProjCS_NAD1983CSRSOntarioMNRLambert',
                 'esriSRProjCS_RGNC1991_93LambertNewCaledonia',
                 'esriSRProjCS_NEA74NoumeaLambert',
                 'esriSRProjCS_NEA74NoumeaLambert2',
                 'esriSRProjCS_RGNC1991_93_UTMZone57S',
                 'esriSRProjCS_RGNC1991_93_UTMZone58S',
                 'esriSRProjCS_RGNC1991_93_UTMZone59S',
                 'esriSRProjCS_IGN53Mare_UTMzone59S',
                 'esriSRProjCS_NAD1983GreatLakesAlbers',
                 'esriSRProjCS_NAD1983GreatLakesStLawrenceAlbers',
                 'esriSRProjCS_LGD2006LibyaTM',
                 'esriSRProjCS_Greenland1996_UTMZone18N',
                 'esriSRProjCS_Greenland1996_UTMZone19N',
                 'esriSRProjCS_Greenland1996_UTMZone20N',
                 'esriSRProjCS_Greenland1996_UTMZone21N',
                 'esriSRProjCS_Greenland1996_UTMZone22N',
                 'esriSRProjCS_Greenland1996_UTMZone23N',
                 'esriSRProjCS_Greenland1996_UTMZone24N',
                 'esriSRProjCS_Greenland1996_UTMZone25N',
                 'esriSRProjCS_Greenland1996_UTMZone26N',
                 'esriSRProjCS_Greenland1996_UTMZone27N',
                 'esriSRProjCS_Greenland1996_UTMZone28N',
                 'esriSRProjCS_Greenland1996_UTMZone29N',
                 'esriSRProjCS_LGD2006LibyaTMZone5',
                 'esriSRProjCS_LGD2006LibyaTMZone6',
                 'esriSRProjCS_LGD2006LibyaTMZone7',
                 'esriSRProjCS_LGD2006LibyaTMZone8',
                 'esriSRProjCS_LGD2006LibyaTMZone9',
                 'esriSRProjCS_LGD2006LibyaTMZone10',
                 'esriSRProjCS_LGD2006LibyaTMZone11',
                 'esriSRProjCS_LGD2006LibyaTMZone12',
                 'esriSRProjCS_LGD2006LibyaTMZone13',
                 'esriSRProjCS_LGD2006_UTMZone32N',
                 'esriSRProjCS_LGD2006_UTMZone33N',
                 'esriSRProjCS_LGD2006_UTMZone34N',
                 'esriSRProjCS_LGD2006_UTMZone35N',
                 'esriSRProjCS_LePouce1934MauritiusGrid',
                 'esriSRProjCS_NAD1983CSRS_StatsCanadaLambert',
                 'esriSRProjCS_IGNAstro1960_UTMZone28N',
                 'esriSRProjCS_IGNAstro1960_UTMZone29N',
                 'esriSRProjCS_IGNAstro1960_UTMZone30N',
                 'esriSRProjCS_FD1954_UTMZone29N',
                 'esriSRProjCS_Finland_0',
                 'esriSRProjCS_Finland_5',
                 'esriSRProjCS_Pulkovo1942CaspianSeaMercator',
                 'esriSRProjCS_Karbala1979Polsvc_UTMZone37N',
                 'esriSRProjCS_Karbala1979Polsvc_UTMZone38N',
                 'esriSRProjCS_Karbala1979Polsvc_UTMZone39N',
                 'esriSRProjCS_Nahrwan1934IraqZone',
                 'esriSRProjCS_WGS1984WorldMercator',
                 'esriSRProjCS_PD1983_GKZone3',
                 'esriSRProjCS_PD1983_GKZone4',
                 'esriSRProjCS_RD1983_GKZone4',
                 'esriSRProjCS_RD1983_GKZone5',
                 'esriSRProjCS_NAD1983CSRS10TM_AEPForest',
                 'esriSRProjCS_NAD1983CSRS10TM_AEPResource',
                 'esriSRProjCS_VN2000_UTMZone48N',
                 'esriSRProjCS_VN2000_UTMZone49N',
                 'esriSRProjCS_NSIDC_EASEGridNorth',
                 'esriSRProjCS_NSIDC_EASEGridSouth',
                 'esriSRProjCS_NSIDC_EASEGridGlobal',
                 'esriSRProjCS_NSIDC_SeaIcePolarStereoN',
                 'esriSRProjCS_NSIDC_SeaIcePolarStereoS',
                 'esriSRProjCS_WGS1984NSIDC_SeaIcePolarStereoN',
                 'esriSRProjCS_SVY21',
                 'esriSRProjCS_WGS1972BE_SouthChinaSeaLambert',
                 'esriSRProjCS_ETRS1989AustriaLambert',
                 'esriSRProjCS_NAD1983HARNSPCS_IANorthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_IASouthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_KSNorthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_KSSouthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_NVEastFT',
                 'esriSRProjCS_NAD1983HARNSPCS_NVCentralFT',
                 'esriSRProjCS_NAD1983HARNSPCS_NVWestFT',
                 'esriSRProjCS_NAD1983HARNSPCS_NJFT',
                 'esriSRProjCS_NAD1983HARNSPCS_ARNorthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_ARSouthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_ILEastFT',
                 'esriSRProjCS_NAD1983HARNSPCS_ILWestFT',
                 'esriSRProjCS_NAD1983HARNSPCS_NHFT',
                 'esriSRProjCS_NAD1983HARNSPCS_RIFT',
                 'esriSRProjCS_ETRS1989BelgeLambert2005',
                 'esriSRProjCS_ETRS1989BelgeLambert2008',
                 'esriSRProjCS_JAD2001_UTMZone17N',
                 'esriSRProjCS_JAD2001_UTMZone18N',
                 'esriSRProjCS_NAD1983SPCS_LAOffshoreFT',
                 'esriSRProjCS_NAD1983HARNSPCS_LANorthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_LASouthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_SDNorthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_SDSouthFT',
                 'esriSRProjCS_Fiji1986MapGrid',
                 'esriSRProjCS_NAD1983HARNSPCS_UTNorthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_UTCentralFT',
                 'esriSRProjCS_NAD1983HARNSPCS_UTSouthFT',
                 'esriSRProjCS_WGS1984NPoleLAEABeringSea',
                 'esriSRProjCS_WGS1984NPoleLAEAAlaska',
                 'esriSRProjCS_WGS1984NPoleLAEACanada',
                 'esriSRProjCS_WGS1984NPoleLAEAAtlantic',
                 'esriSRProjCS_WGS1984NPoleLAEAEurope',
                 'esriSRProjCS_WGS1984NPoleLAEARussia',
                 'esriSRProjCS_GDA1994AustraliaAlbers',
                 'esriSRProjCS_NAD1983YukonAlbers',
                 'esriSRProjCS_NAD1983CSRSYukonAlbers',
                 'esriSRProjCS_NAD1983NWTLambert',
                 'esriSRProjCS_NAD1983CSRSNWTLambert',
                 'esriSRProjCS_NAD1983HARNSPCS_OHNorthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_OHSouthFT',
                 'esriSRProjCS_NAD1983HARNSPCS_WYEastFT',
                 'esriSRProjCS_NAD1983HARNSPCS_WYECFT',
                 'esriSRProjCS_NAD1983HARNSPCS_WYWCFT',
                 'esriSRProjCS_NAD1983HARNSPCS_WYWestFT',
                 'esriSRProjCS_NAD1983CSRS_UTMZone22N',
                 'esriSRProjCS_WGS1984SouthGeorgiaLambert',
                 'esriSRProjCS_ETRS1989PortugalTM06',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone46_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone47_1',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone47_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone48_1',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone48_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone49_1',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone49_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone50_1',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone50_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone51_1',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone51_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone52_1',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone52_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone53_1',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone53_2',
                 'esriSRProjCS_DGN1995IndonesiaTM3Zone54_1',
                 'esriSRProjCS_DGN1995_UTMZone46N',
                 'esriSRProjCS_DGN1995_UTMZone47N',
                 'esriSRProjCS_DGN1995_UTMZone48N',
                 'esriSRProjCS_DGN1995_UTMZone49N',
                 'esriSRProjCS_DGN1995_UTMZone50N',
                 'esriSRProjCS_DGN1995_UTMZone51N',
                 'esriSRProjCS_DGN1995_UTMZone52N',
                 'esriSRProjCS_DGN1995_UTMZone47S',
                 'esriSRProjCS_DGN1995_UTMZone48S',
                 'esriSRProjCS_DGN1995_UTMZone49S',
                 'esriSRProjCS_DGN1995_UTMZone50S',
                 'esriSRProjCS_DGN1995_UTMZone51S',
                 'esriSRProjCS_DGN1995_UTMZone52S',
                 'esriSRProjCS_DGN1995_UTMZone53S',
                 'esriSRProjCS_DGN1995_UTMZone54S',
                 'esriSRProjCS_Nahrwan1967_UTMZone37N',
                 'esriSRProjCS_NTFParis_LambertNordFrance',
                 'esriSRProjCS_NTFParis_LambertCentreFrance',
                 'esriSRProjCS_NTFParis_LambertSudFrance',
                 'esriSRProjCS_NTFParis_LambertCorse',
                 'esriSRProjCS_NTFParis_LambertZoneI',
                 'esriSRProjCS_NTFParis_LambertZoneII',
                 'esriSRProjCS_NTFParis_LambertZoneIII',
                 'esriSRProjCS_NTFParis_LambertZoneIV',
                 'esriSRProjCS_NordSahara1959VoirolUnifieNord',
                 'esriSRProjCS_NordSahara1959VoirolUnifieSud',
                 'esriSRProjCS_MGIFerro_AustriaGKWest',
                 'esriSRProjCS_MGIFerro_AustriaGKCentral',
                 'esriSRProjCS_MGIFerro_AustriaGKEast',
                 'esriSRProjCS_MGIAustriaGKWest',
                 'esriSRProjCS_MGIAustriaGKCentral',
                 'esriSRProjCS_MGIAustriaGKEast',
                 'esriSRProjCS_MGIAustriaGKM28',
                 'esriSRProjCS_MGIAustriaGKM31',
                 'esriSRProjCS_MGIAustriaGKM34',
                 'esriSRProjCS_MGIFerro_GKM28',
                 'esriSRProjCS_MGIFerro_GKM31',
                 'esriSRProjCS_MGIFerro_GKM34',
                 'esriSRProjCS_NAD1927SPCS_LAOffshore',
                 'esriSRProjCS_NAD1983BLMZone14NftUS',
                 'esriSRProjCS_NAD1983BLMZone15NftUS',
                 'esriSRProjCS_NAD1983BLMZone16NftUS',
                 'esriSRProjCS_NAD1983BLMZone17NftUS',
                 'esriSRProjCS_NAD1983SPCS_LAOffshore',
                 'esriSRProjCS_WGS1984PlateCarree',
                 'esriSRProjCS_WGS1984BLMZone14NftUS',
                 'esriSRProjCS_WGS1984BLMZone15NftUS',
                 'esriSRProjCS_WGS1984BLMZone16NftUS',
                 'esriSRProjCS_WGS1984BLMZone17NftUS',
                 'esriSRProjCS_ETRS1989SloveniaTM',
                 'esriSRProjCS_NAD1983USFS_R6Albers',
                 'esriSRProjCS_NAD1983HARN_MS_TM',
                 'esriSRProjCS_WGS1984SphereWebMercator',
                 'esriSRProjCS_NAD1983HARN_WISCRSAdamsM',
                 'esriSRProjCS_NAD1983HARN_WISCRSAshlandM',
                 'esriSRProjCS_NAD1983HARN_WISCRSBarronM',
                 'esriSRProjCS_NAD1983HARN_WISCRSBrownM',
                 'esriSRProjCS_NAD1983HARN_WISCRSBuffaloM',
                 'esriSRProjCS_NAD1983HARN_WISCRSCalumetM',
                 'esriSRProjCS_NAD1983HARN_WISCRSClarkM',
                 'esriSRProjCS_NAD1983HARN_WISCRSDodgeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSDoorM',
                 'esriSRProjCS_NAD1983HARN_WISCRSDouglasM',
                 'esriSRProjCS_NAD1983HARN_WISCRSDunnM',
                 'esriSRProjCS_NAD1983HARN_WISCRSFlorenceM',
                 'esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacM',
                 'esriSRProjCS_NAD1983HARN_WISCRSForestM',
                 'esriSRProjCS_NAD1983HARN_WISCRSGrantM',
                 'esriSRProjCS_NAD1983HARN_WISCRSIowaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSIronM',
                 'esriSRProjCS_NAD1983HARN_WISCRSJacksonM',
                 'esriSRProjCS_NAD1983HARN_WISCRSJeffersonM',
                 'esriSRProjCS_NAD1983HARN_WISCRSJuneauM',
                 'esriSRProjCS_NAD1983HARN_WISCRSKenoshaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSKewauneeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSLaCrosseM',
                 'esriSRProjCS_NAD1983HARN_WISCRSLincolnM',
                 'esriSRProjCS_NAD1983HARN_WISCRSManitowocM',
                 'esriSRProjCS_NAD1983HARN_WISCRSMarinetteM',
                 'esriSRProjCS_NAD1983HARN_WISCRSMenomineeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSOcontoM',
                 'esriSRProjCS_NAD1983HARN_WISCRSOutagamieM',
                 'esriSRProjCS_NAD1983HARN_WISCRSOzaukeeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSPolkM',
                 'esriSRProjCS_NAD1983HARN_WISCRSPriceM',
                 'esriSRProjCS_NAD1983HARN_WISCRSRacineM',
                 'esriSRProjCS_NAD1983HARN_WISCRSRockM',
                 'esriSRProjCS_NAD1983HARN_WISCRSRuskM',
                 'esriSRProjCS_NAD1983HARN_WISCRSSaukM',
                 'esriSRProjCS_NAD1983HARN_WISCRSShawanoM',
                 'esriSRProjCS_NAD1983HARN_WISCRSSheboyganM',
                 'esriSRProjCS_NAD1983HARN_WISCRSSt_CroixM',
                 'esriSRProjCS_NAD1983HARN_WISCRSTrempealeauM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWashingtonM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWaukeshaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWaupacaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWinnebagoM',
                 'esriSRProjCS_NAD1983HARN_WISCRSBayfieldM',
                 'esriSRProjCS_NAD1983HARN_WISCRSBurnettM',
                 'esriSRProjCS_NAD1983HARN_WISCRSChippewaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSColumbiaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSCrawfordM',
                 'esriSRProjCS_NAD1983HARN_WISCRSDaneM',
                 'esriSRProjCS_NAD1983HARN_WISCRSEauClaireM',
                 'esriSRProjCS_NAD1983HARN_WISCRSGreenM',
                 'esriSRProjCS_NAD1983HARN_WISCRSGreenLakeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSLafayetteM',
                 'esriSRProjCS_NAD1983HARN_WISCRSLangladeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSMarathonM',
                 'esriSRProjCS_NAD1983HARN_WISCRSMarquetteM',
                 'esriSRProjCS_NAD1983HARN_WISCRSMonroeM',
                 'esriSRProjCS_NAD1983HARN_WISCRSOneidaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSPepinM',
                 'esriSRProjCS_NAD1983HARN_WISCRSPierceM',
                 'esriSRProjCS_NAD1983HARN_WISCRSPortageM',
                 'esriSRProjCS_NAD1983HARN_WISCRSRichlandM',
                 'esriSRProjCS_NAD1983HARN_WISCRSSawyerM',
                 'esriSRProjCS_NAD1983HARN_WISCRSTaylorM',
                 'esriSRProjCS_NAD1983HARN_WISCRSVernonM',
                 'esriSRProjCS_NAD1983HARN_WISCRSVilasM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWalworthM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWashburnM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWausharaM',
                 'esriSRProjCS_NAD1983HARN_WISCRSWoodM',
                 'esriSRProjCS_NAD1983HARN_WISCRSAdamsFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSAshlandFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSBarronFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSBrownFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSBuffaloFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSCalumetFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSClarkFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSDodgeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSDoorFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSDouglasFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSDunnFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSFlorenceFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSForestFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSGrantFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSIowaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSIronFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSJacksonFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSJeffersonFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSJuneauFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSKenoshaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSKewauneeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSLaCrosseFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSLincolnFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSManitowocFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSMarinetteFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSMenomineeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSOcontoFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSOutagamieFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSOzaukeeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSPolkFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSPriceFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSRacineFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSRockFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSRuskFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSSaukFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSShawanoFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSSheboyganFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSSt_CroixFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSTrempealeauFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWashingtonFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWaukeshaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWaupacaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWinnebagoFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSBayfieldFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSBurnettFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSChippewaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSColumbiaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSCrawfordFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSDaneFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSEauClaireFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSGreenFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSGreenLakeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSLafayetteFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSLangladeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSMarathonFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSMarquetteFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSMonroeFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSOneidaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSPepinFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSPierceFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSPortageFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSRichlandFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSSawyerFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSTaylorFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSVernonFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSVilasFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWalworthFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWashburnFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWausharaFtUS',
                 'esriSRProjCS_NAD1983HARN_WISCRSWoodFtUS',
                 'esriSRProjCS_Tahiti1952_UTMZone6S',
                 'esriSRProjCS_Tahaa1954_UTMZone5S',
                 'esriSRProjCS_Douala1948AEFWest',
                 'esriSRProjCS_LKS1994LithuaniaTM',
                 'esriSRProjCS_Dabola1981_UTMZone28N',
                 'esriSRProjCS_Dabola1981_UTMZone29N',
                 'esriSRProjCS_Reunion1947_TM']
    esriSRProjCS_SJTSK_FERRO_KROVAK = 2065
    esriSRProjCS_SJTSK_KROVAK = 5513
    esriSRProjCS_SJTSK_FERRO_KROVAK_EN = 5221
    esriSRProjCS_SJTSK_KROVAK_EN = 5514
    esriSRProjCS_NAD1983HARNSPCS_ARNorth = 2764
    esriSRProjCS_NAD1983HARNSPCS_ARSouth = 2765
    esriSRProjCS_NAD1983HARNSPCS_MNNorth = 2810
    esriSRProjCS_NAD1983HARNSPCS_MNCentral = 2811
    esriSRProjCS_NAD1983HARNSPCS_MNSouth = 2812
    esriSRProjCS_NAD1983HARNSPCS_MOEast = 2815
    esriSRProjCS_NAD1983HARNSPCS_MOCentral = 2816
    esriSRProjCS_NAD1983HARNSPCS_MOWest = 2817
    esriSRProjCS_NZGD1949NewZealandMapGrid = 27200
    esriSRProjCS_FranceIDegrees = 102581
    esriSRProjCS_FranceIIDegrees = 102582
    esriSRProjCS_FranceIIIDegrees = 102583
    esriSRProjCS_FranceIVDegrees = 102584
    esriSRProjCS_BelgeLambert1972 = 31370
    esriSRProjCS_Hungarian1972_EOV = 23700
    esriSRProjCS_CH1903_LV03 = 21781
    esriSRProjCS_CH1903Plus_LV95 = 2056
    esriSRProjCS_RGF1993_Lambert93 = 2154
    esriSRProjCS_NAD1927MichiganGeoRef_m = 102122
    esriSRProjCS_NAD1983MichiganGeoRef_m = 3078
    esriSRProjCS_HongKong1980Grid = 2326
    esriSRProjCS_HongKong1980_UTM49N = 102141
    esriSRProjCS_HongKong1980_UTM50N = 102142
    esriSRProjCS_Tokyo_UTM51N = 3092
    esriSRProjCS_Tokyo_UTM52N = 3093
    esriSRProjCS_Tokyo_UTM53N = 3094
    esriSRProjCS_Tokyo_UTM54N = 3095
    esriSRProjCS_Tokyo_UTM55N = 3096
    esriSRProjCS_Tokyo_UTM56N = 102156
    esriSRProjCS_Datum73HayfordGaussIGEOE = 102160
    esriSRProjCS_Datum73HayfordGaussIPCC = 102161
    esriSRProjCS_Graciosa1948_UTM26N = 102162
    esriSRProjCS_LisboaBesselBonne = 102163
    esriSRProjCS_LisboaHayfordGaussIGEOE = 102164
    esriSRProjCS_LisboaHayfordGaussIPCC = 102165
    esriSRProjCS_ObservMeteor1939_UTM25N = 102166
    esriSRProjCS_PortoSanto1936_UTM28N = 2942
    esriSRProjCS_SaoBraz_UTM26N = 102168
    esriSRProjCS_SelvagemGrande1938_UTM28N = 2943
    esriSRProjCS_NAD1983HARNSPCS_NJ = 2824
    esriSRProjCS_AmericanSamoa1962SPCS_AS = 65062
    esriSRProjCS_Pulkovo1942_58_PolandZone1 = 3120
    esriSRProjCS_Pulkovo1942_58_PolandZone2 = 2172
    esriSRProjCS_Pulkovo1942_58_PolandZone3 = 2173
    esriSRProjCS_Pulkovo1942_58_PolandZone4 = 2174
    esriSRProjCS_Pulkovo1942_58_PolandZone5 = 2175
    esriSRProjCS_AzoresOccidental1939_UTMZone25N = 2188
    esriSRProjCS_AzoresCentral1948_UTMZone26N = 2189
    esriSRProjCS_AzoresOriental1940_UTMZone26N = 2190
    esriSRProjCS_Fiji1956_UTMZone60S = 3141
    esriSRProjCS_Fiji1956_UTMZone1S = 3142
    esriSRProjCS_NAD1983BCEnvAlbers = 3153
    esriSRProjCS_NAD1983CSRS_UTMZone7N = 3154
    esriSRProjCS_NAD1983CSRS_UTMZone8N = 3155
    esriSRProjCS_NAD1983CSRS_UTMZone9N = 3156
    esriSRProjCS_NAD1983CSRS_UTMZone10N = 3157
    esriSRProjCS_NAD1983OntarioMNRLambert = 3161
    esriSRProjCS_NAD1983CSRSOntarioMNRLambert = 3162
    esriSRProjCS_RGNC1991_93LambertNewCaledonia = 3163
    esriSRProjCS_NEA74NoumeaLambert = 3165
    esriSRProjCS_NEA74NoumeaLambert2 = 3166
    esriSRProjCS_RGNC1991_93_UTMZone57S = 3169
    esriSRProjCS_RGNC1991_93_UTMZone58S = 3170
    esriSRProjCS_RGNC1991_93_UTMZone59S = 3171
    esriSRProjCS_IGN53Mare_UTMzone59S = 3172
    esriSRProjCS_NAD1983GreatLakesAlbers = 3174
    esriSRProjCS_NAD1983GreatLakesStLawrenceAlbers = 3175
    esriSRProjCS_LGD2006LibyaTM = 3177
    esriSRProjCS_Greenland1996_UTMZone18N = 3178
    esriSRProjCS_Greenland1996_UTMZone19N = 3179
    esriSRProjCS_Greenland1996_UTMZone20N = 3180
    esriSRProjCS_Greenland1996_UTMZone21N = 3181
    esriSRProjCS_Greenland1996_UTMZone22N = 3182
    esriSRProjCS_Greenland1996_UTMZone23N = 3183
    esriSRProjCS_Greenland1996_UTMZone24N = 3184
    esriSRProjCS_Greenland1996_UTMZone25N = 3185
    esriSRProjCS_Greenland1996_UTMZone26N = 3186
    esriSRProjCS_Greenland1996_UTMZone27N = 3187
    esriSRProjCS_Greenland1996_UTMZone28N = 3188
    esriSRProjCS_Greenland1996_UTMZone29N = 3189
    esriSRProjCS_LGD2006LibyaTMZone5 = 3190
    esriSRProjCS_LGD2006LibyaTMZone6 = 3191
    esriSRProjCS_LGD2006LibyaTMZone7 = 3192
    esriSRProjCS_LGD2006LibyaTMZone8 = 3193
    esriSRProjCS_LGD2006LibyaTMZone9 = 3194
    esriSRProjCS_LGD2006LibyaTMZone10 = 3195
    esriSRProjCS_LGD2006LibyaTMZone11 = 3196
    esriSRProjCS_LGD2006LibyaTMZone12 = 3197
    esriSRProjCS_LGD2006LibyaTMZone13 = 3198
    esriSRProjCS_LGD2006_UTMZone32N = 3199
    esriSRProjCS_LGD2006_UTMZone33N = 3201
    esriSRProjCS_LGD2006_UTMZone34N = 3202
    esriSRProjCS_LGD2006_UTMZone35N = 3203
    esriSRProjCS_LePouce1934MauritiusGrid = 3337
    esriSRProjCS_NAD1983CSRS_StatsCanadaLambert = 3348
    esriSRProjCS_IGNAstro1960_UTMZone28N = 3367
    esriSRProjCS_IGNAstro1960_UTMZone29N = 3368
    esriSRProjCS_IGNAstro1960_UTMZone30N = 3369
    esriSRProjCS_FD1954_UTMZone29N = 3374
    esriSRProjCS_Finland_0 = 3386
    esriSRProjCS_Finland_5 = 3387
    esriSRProjCS_Pulkovo1942CaspianSeaMercator = 3388
    esriSRProjCS_Karbala1979Polsvc_UTMZone37N = 3391
    esriSRProjCS_Karbala1979Polsvc_UTMZone38N = 3392
    esriSRProjCS_Karbala1979Polsvc_UTMZone39N = 3393
    esriSRProjCS_Nahrwan1934IraqZone = 3394
    esriSRProjCS_WGS1984WorldMercator = 3395
    esriSRProjCS_PD1983_GKZone3 = 3396
    esriSRProjCS_PD1983_GKZone4 = 3397
    esriSRProjCS_RD1983_GKZone4 = 3398
    esriSRProjCS_RD1983_GKZone5 = 3399
    esriSRProjCS_NAD1983CSRS10TM_AEPForest = 3402
    esriSRProjCS_NAD1983CSRS10TM_AEPResource = 3403
    esriSRProjCS_VN2000_UTMZone48N = 3405
    esriSRProjCS_VN2000_UTMZone49N = 3406
    esriSRProjCS_NSIDC_EASEGridNorth = 3408
    esriSRProjCS_NSIDC_EASEGridSouth = 3409
    esriSRProjCS_NSIDC_EASEGridGlobal = 3410
    esriSRProjCS_NSIDC_SeaIcePolarStereoN = 3411
    esriSRProjCS_NSIDC_SeaIcePolarStereoS = 3412
    esriSRProjCS_WGS1984NSIDC_SeaIcePolarStereoN = 3413
    esriSRProjCS_SVY21 = 3414
    esriSRProjCS_WGS1972BE_SouthChinaSeaLambert = 3415
    esriSRProjCS_ETRS1989AustriaLambert = 3416
    esriSRProjCS_NAD1983HARNSPCS_IANorthFT = 3425
    esriSRProjCS_NAD1983HARNSPCS_IASouthFT = 3426
    esriSRProjCS_NAD1983HARNSPCS_KSNorthFT = 3427
    esriSRProjCS_NAD1983HARNSPCS_KSSouthFT = 3428
    esriSRProjCS_NAD1983HARNSPCS_NVEastFT = 3429
    esriSRProjCS_NAD1983HARNSPCS_NVCentralFT = 3430
    esriSRProjCS_NAD1983HARNSPCS_NVWestFT = 3431
    esriSRProjCS_NAD1983HARNSPCS_NJFT = 3432
    esriSRProjCS_NAD1983HARNSPCS_ARNorthFT = 3441
    esriSRProjCS_NAD1983HARNSPCS_ARSouthFT = 3442
    esriSRProjCS_NAD1983HARNSPCS_ILEastFT = 3443
    esriSRProjCS_NAD1983HARNSPCS_ILWestFT = 3444
    esriSRProjCS_NAD1983HARNSPCS_NHFT = 3445
    esriSRProjCS_NAD1983HARNSPCS_RIFT = 3446
    esriSRProjCS_ETRS1989BelgeLambert2005 = 3447
    esriSRProjCS_ETRS1989BelgeLambert2008 = 3812
    esriSRProjCS_JAD2001_UTMZone17N = 3449
    esriSRProjCS_JAD2001_UTMZone18N = 3450
    esriSRProjCS_NAD1983SPCS_LAOffshoreFT = 3453
    esriSRProjCS_NAD1983HARNSPCS_LANorthFT = 3456
    esriSRProjCS_NAD1983HARNSPCS_LASouthFT = 3457
    esriSRProjCS_NAD1983HARNSPCS_SDNorthFT = 3458
    esriSRProjCS_NAD1983HARNSPCS_SDSouthFT = 3459
    esriSRProjCS_Fiji1986MapGrid = 3460
    esriSRProjCS_NAD1983HARNSPCS_UTNorthFT = 3568
    esriSRProjCS_NAD1983HARNSPCS_UTCentralFT = 3569
    esriSRProjCS_NAD1983HARNSPCS_UTSouthFT = 3570
    esriSRProjCS_WGS1984NPoleLAEABeringSea = 3571
    esriSRProjCS_WGS1984NPoleLAEAAlaska = 3572
    esriSRProjCS_WGS1984NPoleLAEACanada = 3573
    esriSRProjCS_WGS1984NPoleLAEAAtlantic = 3574
    esriSRProjCS_WGS1984NPoleLAEAEurope = 3575
    esriSRProjCS_WGS1984NPoleLAEARussia = 3576
    esriSRProjCS_GDA1994AustraliaAlbers = 3577
    esriSRProjCS_NAD1983YukonAlbers = 3578
    esriSRProjCS_NAD1983CSRSYukonAlbers = 3579
    esriSRProjCS_NAD1983NWTLambert = 3580
    esriSRProjCS_NAD1983CSRSNWTLambert = 3581
    esriSRProjCS_NAD1983HARNSPCS_OHNorthFT = 3753
    esriSRProjCS_NAD1983HARNSPCS_OHSouthFT = 3754
    esriSRProjCS_NAD1983HARNSPCS_WYEastFT = 3755
    esriSRProjCS_NAD1983HARNSPCS_WYECFT = 3756
    esriSRProjCS_NAD1983HARNSPCS_WYWCFT = 3757
    esriSRProjCS_NAD1983HARNSPCS_WYWestFT = 3758
    esriSRProjCS_NAD1983CSRS_UTMZone22N = 3761
    esriSRProjCS_WGS1984SouthGeorgiaLambert = 3762
    esriSRProjCS_ETRS1989PortugalTM06 = 3763
    esriSRProjCS_DGN1995IndonesiaTM3Zone46_2 = 23830
    esriSRProjCS_DGN1995IndonesiaTM3Zone47_1 = 23831
    esriSRProjCS_DGN1995IndonesiaTM3Zone47_2 = 23832
    esriSRProjCS_DGN1995IndonesiaTM3Zone48_1 = 23833
    esriSRProjCS_DGN1995IndonesiaTM3Zone48_2 = 23834
    esriSRProjCS_DGN1995IndonesiaTM3Zone49_1 = 23835
    esriSRProjCS_DGN1995IndonesiaTM3Zone49_2 = 23836
    esriSRProjCS_DGN1995IndonesiaTM3Zone50_1 = 23837
    esriSRProjCS_DGN1995IndonesiaTM3Zone50_2 = 23838
    esriSRProjCS_DGN1995IndonesiaTM3Zone51_1 = 23839
    esriSRProjCS_DGN1995IndonesiaTM3Zone51_2 = 23840
    esriSRProjCS_DGN1995IndonesiaTM3Zone52_1 = 23841
    esriSRProjCS_DGN1995IndonesiaTM3Zone52_2 = 23842
    esriSRProjCS_DGN1995IndonesiaTM3Zone53_1 = 23843
    esriSRProjCS_DGN1995IndonesiaTM3Zone53_2 = 23844
    esriSRProjCS_DGN1995IndonesiaTM3Zone54_1 = 23845
    esriSRProjCS_DGN1995_UTMZone46N = 23866
    esriSRProjCS_DGN1995_UTMZone47N = 23867
    esriSRProjCS_DGN1995_UTMZone48N = 23868
    esriSRProjCS_DGN1995_UTMZone49N = 23869
    esriSRProjCS_DGN1995_UTMZone50N = 23870
    esriSRProjCS_DGN1995_UTMZone51N = 23871
    esriSRProjCS_DGN1995_UTMZone52N = 23872
    esriSRProjCS_DGN1995_UTMZone47S = 23877
    esriSRProjCS_DGN1995_UTMZone48S = 23878
    esriSRProjCS_DGN1995_UTMZone49S = 23879
    esriSRProjCS_DGN1995_UTMZone50S = 23880
    esriSRProjCS_DGN1995_UTMZone51S = 23881
    esriSRProjCS_DGN1995_UTMZone52S = 23882
    esriSRProjCS_DGN1995_UTMZone53S = 23883
    esriSRProjCS_DGN1995_UTMZone54S = 23884
    esriSRProjCS_Nahrwan1967_UTMZone37N = 27037
    esriSRProjCS_NTFParis_LambertNordFrance = 27561
    esriSRProjCS_NTFParis_LambertCentreFrance = 27562
    esriSRProjCS_NTFParis_LambertSudFrance = 27563
    esriSRProjCS_NTFParis_LambertCorse = 27564
    esriSRProjCS_NTFParis_LambertZoneI = 27571
    esriSRProjCS_NTFParis_LambertZoneII = 27572
    esriSRProjCS_NTFParis_LambertZoneIII = 27573
    esriSRProjCS_NTFParis_LambertZoneIV = 27574
    esriSRProjCS_NordSahara1959VoirolUnifieNord = 30791
    esriSRProjCS_NordSahara1959VoirolUnifieSud = 30792
    esriSRProjCS_MGIFerro_AustriaGKWest = 31251
    esriSRProjCS_MGIFerro_AustriaGKCentral = 31252
    esriSRProjCS_MGIFerro_AustriaGKEast = 31253
    esriSRProjCS_MGIAustriaGKWest = 31254
    esriSRProjCS_MGIAustriaGKCentral = 31255
    esriSRProjCS_MGIAustriaGKEast = 31256
    esriSRProjCS_MGIAustriaGKM28 = 31257
    esriSRProjCS_MGIAustriaGKM31 = 31258
    esriSRProjCS_MGIAustriaGKM34 = 31259
    esriSRProjCS_MGIFerro_GKM28 = 31288
    esriSRProjCS_MGIFerro_GKM31 = 31289
    esriSRProjCS_MGIFerro_GKM34 = 31290
    esriSRProjCS_NAD1927SPCS_LAOffshore = 32099
    esriSRProjCS_NAD1983BLMZone14NftUS = 32164
    esriSRProjCS_NAD1983BLMZone15NftUS = 32165
    esriSRProjCS_NAD1983BLMZone16NftUS = 32166
    esriSRProjCS_NAD1983BLMZone17NftUS = 32167
    esriSRProjCS_NAD1983SPCS_LAOffshore = 32199
    esriSRProjCS_WGS1984PlateCarree = 32662
    esriSRProjCS_WGS1984BLMZone14NftUS = 32664
    esriSRProjCS_WGS1984BLMZone15NftUS = 32665
    esriSRProjCS_WGS1984BLMZone16NftUS = 32666
    esriSRProjCS_WGS1984BLMZone17NftUS = 32667
    esriSRProjCS_ETRS1989SloveniaTM = 102109
    esriSRProjCS_NAD1983USFS_R6Albers = 102218
    esriSRProjCS_NAD1983HARN_MS_TM = 3815
    esriSRProjCS_WGS1984SphereWebMercator = 3785
    esriSRProjCS_NAD1983HARN_WISCRSAdamsM = 103300
    esriSRProjCS_NAD1983HARN_WISCRSAshlandM = 103301
    esriSRProjCS_NAD1983HARN_WISCRSBarronM = 103302
    esriSRProjCS_NAD1983HARN_WISCRSBrownM = 103304
    esriSRProjCS_NAD1983HARN_WISCRSBuffaloM = 103305
    esriSRProjCS_NAD1983HARN_WISCRSCalumetM = 103307
    esriSRProjCS_NAD1983HARN_WISCRSClarkM = 103309
    esriSRProjCS_NAD1983HARN_WISCRSDodgeM = 103313
    esriSRProjCS_NAD1983HARN_WISCRSDoorM = 103314
    esriSRProjCS_NAD1983HARN_WISCRSDouglasM = 103315
    esriSRProjCS_NAD1983HARN_WISCRSDunnM = 103316
    esriSRProjCS_NAD1983HARN_WISCRSFlorenceM = 103318
    esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacM = 103319
    esriSRProjCS_NAD1983HARN_WISCRSForestM = 103320
    esriSRProjCS_NAD1983HARN_WISCRSGrantM = 103321
    esriSRProjCS_NAD1983HARN_WISCRSIowaM = 103324
    esriSRProjCS_NAD1983HARN_WISCRSIronM = 103325
    esriSRProjCS_NAD1983HARN_WISCRSJacksonM = 103326
    esriSRProjCS_NAD1983HARN_WISCRSJeffersonM = 103327
    esriSRProjCS_NAD1983HARN_WISCRSJuneauM = 103328
    esriSRProjCS_NAD1983HARN_WISCRSKenoshaM = 103329
    esriSRProjCS_NAD1983HARN_WISCRSKewauneeM = 103330
    esriSRProjCS_NAD1983HARN_WISCRSLaCrosseM = 103331
    esriSRProjCS_NAD1983HARN_WISCRSLincolnM = 103334
    esriSRProjCS_NAD1983HARN_WISCRSManitowocM = 103335
    esriSRProjCS_NAD1983HARN_WISCRSMarinetteM = 103337
    esriSRProjCS_NAD1983HARN_WISCRSMenomineeM = 103339
    esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeM = 103340
    esriSRProjCS_NAD1983HARN_WISCRSOcontoM = 103342
    esriSRProjCS_NAD1983HARN_WISCRSOutagamieM = 103344
    esriSRProjCS_NAD1983HARN_WISCRSOzaukeeM = 103345
    esriSRProjCS_NAD1983HARN_WISCRSPolkM = 103348
    esriSRProjCS_NAD1983HARN_WISCRSPriceM = 103350
    esriSRProjCS_NAD1983HARN_WISCRSRacineM = 103351
    esriSRProjCS_NAD1983HARN_WISCRSRockM = 103353
    esriSRProjCS_NAD1983HARN_WISCRSRuskM = 103354
    esriSRProjCS_NAD1983HARN_WISCRSSaukM = 103355
    esriSRProjCS_NAD1983HARN_WISCRSShawanoM = 103357
    esriSRProjCS_NAD1983HARN_WISCRSSheboyganM = 103358
    esriSRProjCS_NAD1983HARN_WISCRSSt_CroixM = 103359
    esriSRProjCS_NAD1983HARN_WISCRSTrempealeauM = 103361
    esriSRProjCS_NAD1983HARN_WISCRSWashingtonM = 103366
    esriSRProjCS_NAD1983HARN_WISCRSWaukeshaM = 103367
    esriSRProjCS_NAD1983HARN_WISCRSWaupacaM = 103368
    esriSRProjCS_NAD1983HARN_WISCRSWinnebagoM = 103370
    esriSRProjCS_NAD1983HARN_WISCRSBayfieldM = 103303
    esriSRProjCS_NAD1983HARN_WISCRSBurnettM = 103306
    esriSRProjCS_NAD1983HARN_WISCRSChippewaM = 103308
    esriSRProjCS_NAD1983HARN_WISCRSColumbiaM = 103310
    esriSRProjCS_NAD1983HARN_WISCRSCrawfordM = 103311
    esriSRProjCS_NAD1983HARN_WISCRSDaneM = 103312
    esriSRProjCS_NAD1983HARN_WISCRSEauClaireM = 103317
    esriSRProjCS_NAD1983HARN_WISCRSGreenM = 103322
    esriSRProjCS_NAD1983HARN_WISCRSGreenLakeM = 103323
    esriSRProjCS_NAD1983HARN_WISCRSLafayetteM = 103332
    esriSRProjCS_NAD1983HARN_WISCRSLangladeM = 103333
    esriSRProjCS_NAD1983HARN_WISCRSMarathonM = 103336
    esriSRProjCS_NAD1983HARN_WISCRSMarquetteM = 103338
    esriSRProjCS_NAD1983HARN_WISCRSMonroeM = 103341
    esriSRProjCS_NAD1983HARN_WISCRSOneidaM = 103343
    esriSRProjCS_NAD1983HARN_WISCRSPepinM = 103346
    esriSRProjCS_NAD1983HARN_WISCRSPierceM = 103347
    esriSRProjCS_NAD1983HARN_WISCRSPortageM = 103349
    esriSRProjCS_NAD1983HARN_WISCRSRichlandM = 103352
    esriSRProjCS_NAD1983HARN_WISCRSSawyerM = 103356
    esriSRProjCS_NAD1983HARN_WISCRSTaylorM = 103360
    esriSRProjCS_NAD1983HARN_WISCRSVernonM = 103362
    esriSRProjCS_NAD1983HARN_WISCRSVilasM = 103363
    esriSRProjCS_NAD1983HARN_WISCRSWalworthM = 103364
    esriSRProjCS_NAD1983HARN_WISCRSWashburnM = 103365
    esriSRProjCS_NAD1983HARN_WISCRSWausharaM = 103369
    esriSRProjCS_NAD1983HARN_WISCRSWoodM = 103371
    esriSRProjCS_NAD1983HARN_WISCRSAdamsFtUS = 103400
    esriSRProjCS_NAD1983HARN_WISCRSAshlandFtUS = 103401
    esriSRProjCS_NAD1983HARN_WISCRSBarronFtUS = 103402
    esriSRProjCS_NAD1983HARN_WISCRSBrownFtUS = 103404
    esriSRProjCS_NAD1983HARN_WISCRSBuffaloFtUS = 103405
    esriSRProjCS_NAD1983HARN_WISCRSCalumetFtUS = 103407
    esriSRProjCS_NAD1983HARN_WISCRSClarkFtUS = 103409
    esriSRProjCS_NAD1983HARN_WISCRSDodgeFtUS = 103413
    esriSRProjCS_NAD1983HARN_WISCRSDoorFtUS = 103414
    esriSRProjCS_NAD1983HARN_WISCRSDouglasFtUS = 103415
    esriSRProjCS_NAD1983HARN_WISCRSDunnFtUS = 103416
    esriSRProjCS_NAD1983HARN_WISCRSFlorenceFtUS = 103418
    esriSRProjCS_NAD1983HARN_WISCRSFond_du_LacFtUS = 103419
    esriSRProjCS_NAD1983HARN_WISCRSForestFtUS = 103420
    esriSRProjCS_NAD1983HARN_WISCRSGrantFtUS = 103421
    esriSRProjCS_NAD1983HARN_WISCRSIowaFtUS = 103424
    esriSRProjCS_NAD1983HARN_WISCRSIronFtUS = 103425
    esriSRProjCS_NAD1983HARN_WISCRSJacksonFtUS = 103426
    esriSRProjCS_NAD1983HARN_WISCRSJeffersonFtUS = 103427
    esriSRProjCS_NAD1983HARN_WISCRSJuneauFtUS = 103428
    esriSRProjCS_NAD1983HARN_WISCRSKenoshaFtUS = 103429
    esriSRProjCS_NAD1983HARN_WISCRSKewauneeFtUS = 103430
    esriSRProjCS_NAD1983HARN_WISCRSLaCrosseFtUS = 103431
    esriSRProjCS_NAD1983HARN_WISCRSLincolnFtUS = 103434
    esriSRProjCS_NAD1983HARN_WISCRSManitowocFtUS = 103435
    esriSRProjCS_NAD1983HARN_WISCRSMarinetteFtUS = 103437
    esriSRProjCS_NAD1983HARN_WISCRSMenomineeFtUS = 103439
    esriSRProjCS_NAD1983HARN_WISCRSMilwaukeeFtUS = 103440
    esriSRProjCS_NAD1983HARN_WISCRSOcontoFtUS = 103442
    esriSRProjCS_NAD1983HARN_WISCRSOutagamieFtUS = 103444
    esriSRProjCS_NAD1983HARN_WISCRSOzaukeeFtUS = 103445
    esriSRProjCS_NAD1983HARN_WISCRSPolkFtUS = 103448
    esriSRProjCS_NAD1983HARN_WISCRSPriceFtUS = 103450
    esriSRProjCS_NAD1983HARN_WISCRSRacineFtUS = 103451
    esriSRProjCS_NAD1983HARN_WISCRSRockFtUS = 103453
    esriSRProjCS_NAD1983HARN_WISCRSRuskFtUS = 103454
    esriSRProjCS_NAD1983HARN_WISCRSSaukFtUS = 103455
    esriSRProjCS_NAD1983HARN_WISCRSShawanoFtUS = 103457
    esriSRProjCS_NAD1983HARN_WISCRSSheboyganFtUS = 103458
    esriSRProjCS_NAD1983HARN_WISCRSSt_CroixFtUS = 103459
    esriSRProjCS_NAD1983HARN_WISCRSTrempealeauFtUS = 103461
    esriSRProjCS_NAD1983HARN_WISCRSWashingtonFtUS = 103466
    esriSRProjCS_NAD1983HARN_WISCRSWaukeshaFtUS = 103467
    esriSRProjCS_NAD1983HARN_WISCRSWaupacaFtUS = 103468
    esriSRProjCS_NAD1983HARN_WISCRSWinnebagoFtUS = 103470
    esriSRProjCS_NAD1983HARN_WISCRSBayfieldFtUS = 103403
    esriSRProjCS_NAD1983HARN_WISCRSBurnettFtUS = 103406
    esriSRProjCS_NAD1983HARN_WISCRSChippewaFtUS = 103408
    esriSRProjCS_NAD1983HARN_WISCRSColumbiaFtUS = 103410
    esriSRProjCS_NAD1983HARN_WISCRSCrawfordFtUS = 103411
    esriSRProjCS_NAD1983HARN_WISCRSDaneFtUS = 103412
    esriSRProjCS_NAD1983HARN_WISCRSEauClaireFtUS = 103417
    esriSRProjCS_NAD1983HARN_WISCRSGreenFtUS = 103422
    esriSRProjCS_NAD1983HARN_WISCRSGreenLakeFtUS = 103423
    esriSRProjCS_NAD1983HARN_WISCRSLafayetteFtUS = 103432
    esriSRProjCS_NAD1983HARN_WISCRSLangladeFtUS = 103433
    esriSRProjCS_NAD1983HARN_WISCRSMarathonFtUS = 103436
    esriSRProjCS_NAD1983HARN_WISCRSMarquetteFtUS = 103438
    esriSRProjCS_NAD1983HARN_WISCRSMonroeFtUS = 103441
    esriSRProjCS_NAD1983HARN_WISCRSOneidaFtUS = 103443
    esriSRProjCS_NAD1983HARN_WISCRSPepinFtUS = 103446
    esriSRProjCS_NAD1983HARN_WISCRSPierceFtUS = 103447
    esriSRProjCS_NAD1983HARN_WISCRSPortageFtUS = 103449
    esriSRProjCS_NAD1983HARN_WISCRSRichlandFtUS = 103452
    esriSRProjCS_NAD1983HARN_WISCRSSawyerFtUS = 103456
    esriSRProjCS_NAD1983HARN_WISCRSTaylorFtUS = 103460
    esriSRProjCS_NAD1983HARN_WISCRSVernonFtUS = 103462
    esriSRProjCS_NAD1983HARN_WISCRSVilasFtUS = 103463
    esriSRProjCS_NAD1983HARN_WISCRSWalworthFtUS = 103464
    esriSRProjCS_NAD1983HARN_WISCRSWashburnFtUS = 103465
    esriSRProjCS_NAD1983HARN_WISCRSWausharaFtUS = 103469
    esriSRProjCS_NAD1983HARN_WISCRSWoodFtUS = 103471
    esriSRProjCS_Tahiti1952_UTMZone6S = 2976
    esriSRProjCS_Tahaa1954_UTMZone5S = 2977
    esriSRProjCS_Douala1948AEFWest = 3119
    esriSRProjCS_LKS1994LithuaniaTM = 3346
    esriSRProjCS_Dabola1981_UTMZone28N = 3461
    esriSRProjCS_Dabola1981_UTMZone29N = 3462
    esriSRProjCS_Reunion1947_TM = 3727

class esriSRProjCS3Type(Enumeration):
    __slots__ = ['esriSRProjCS_World_Aitoff',
                 'esriSRProjCS_World_CrasterParabolic',
                 'esriSRProjCS_World_FlatPolarQuartic',
                 'esriSRProjCS_World_HammerAitoff',
                 'esriSRProjCS_World_Times',
                 'esriSRProjCS_World_VerticalPerspective',
                 'esriSRProjCS_World_WinkelTripelNGS',
                 'esriSRProjCS_Sphere_Aitoff',
                 'esriSRProjCS_Sphere_CrasterParabolic',
                 'esriSRProjCS_Sphere_FlatPolarQuartic',
                 'esriSRProjCS_Sphere_HammerAitoff',
                 'esriSRProjCS_Sphere_Times',
                 'esriSRProjCS_Sphere_VerticalPerspective',
                 'esriSRProjCS_Sphere_WinkelTripelNGS',
                 'esriSRProjCS_WGS1984_NPoleGnomonic',
                 'esriSRProjCS_WGS1984_SPoleGnomonic',
                 'esriSRProjCS_WGS1984_NPoleOrthographic',
                 'esriSRProjCS_WGS1984_SPoleOrthographic',
                 'esriSRProjCS_TheWorldFromSpace',
                 'esriSRProjCS_USNatlAtlasLambertAziEqualArea',
                 'esriSRProjCS_Pulkovo1942_CS63zoneA1',
                 'esriSRProjCS_Pulkovo1942_CS63zoneA2',
                 'esriSRProjCS_Pulkovo1942_CS63zoneA3',
                 'esriSRProjCS_Pulkovo1942_CS63zoneA4',
                 'esriSRProjCS_Pulkovo1942_CS63zoneK2',
                 'esriSRProjCS_Pulkovo1942_CS63zoneK3',
                 'esriSRProjCS_Pulkovo1942_CS63zoneK4',
                 'esriSRProjCS_ED1950JordanTM',
                 'esriSRProjCS_DHDN_SoldnerBerlin',
                 'esriSRProjCS_NAD1927WisconsinTM',
                 'esriSRProjCS_NAD1983WisconsinTM',
                 'esriSRProjCS_NAD1983HARNWisconsinTM',
                 'esriSRProjCS_NAD1983HARNMichiganGeoRef_Meters',
                 'esriSRProjCS_NAD1983TexasCentricMappingSystemLambert',
                 'esriSRProjCS_NAD1983TexasCentricMappingSystemAlbers',
                 'esriSRProjCS_NAD1983FloridaGDLAlbers',
                 'esriSRProjCS_NAD1983HARNFloridaGDLAlbers',
                 'esriSRProjCS_NAD1983HARN_SPCSKentucky_USFeet',
                 'esriSRProjCS_Mauritania1999UTMZone28N',
                 'esriSRProjCS_Mauritania1999UTMZone29N',
                 'esriSRProjCS_Mauritania1999UTMZone30N',
                 'esriSRProjCS_Gulshan303BangladeshTM',
                 'esriSRProjCS_Voirol1879NordAlgerieAncienne',
                 'esriSRProjCS_Voirol1879SudAlgerieAncienne',
                 'esriSRProjCS_D48SloveniaTM',
                 'esriSRProjCS_JAD2001JamaicaGrid',
                 'esriSRProjCS_BabSouth_PalauAziEquidist',
                 'esriSRProjCS_CostaRicaNorte',
                 'esriSRProjCS_CostaRicaSur',
                 'esriSRProjCS_CostaRicaTM90',
                 'esriSRProjCS_MONREF1997UTMZone47N',
                 'esriSRProjCS_MONREF1997UTMZone48N',
                 'esriSRProjCS_MONREF1997UTMZone49N',
                 'esriSRProjCS_MONREF1997UTMZone50N',
                 'esriSRProjCS_ColombiaWestWestZone',
                 'esriSRProjCS_BogotaCiudadBogota',
                 'esriSRProjCS_MAGNACiudadBogota',
                 'esriSRProjCS_MAGNAColombiaOesteOeste',
                 'esriSRProjCS_MAGNAColombiaOeste',
                 'esriSRProjCS_MAGNAColombiaBogota',
                 'esriSRProjCS_MAGNAColombiaEste',
                 'esriSRProjCS_MAGNAColombiaEsteEste',
                 'esriSRProjCS_Guam1963TNet',
                 'esriSRProjCS_Guam1993Net',
                 'esriSRProjCS_PohnpeiAzimEquidist1971',
                 'esriSRProjCS_SaipanAzimEquidist1969',
                 'esriSRProjCS_NAD1983HARN_SPCSMinnesotaNorth_USFeet',
                 'esriSRProjCS_NAD1983HARN_SPCSMinnesotaCentral_USFeet',
                 'esriSRProjCS_NAD1983HARN_SPCSMinnesotaSouth_USFeet',
                 'esriSRProjCS_BeduaramTM13NE',
                 'esriSRProjCS_GunungSegaraUTMZone50S',
                 'esriSRProjCS_QND1995QatarNationalGrid',
                 'esriSRProjCS_ETRS1989GuernseyGrid',
                 'esriSRProjCS_ETRS1989JerseyTM',
                 'esriSRProjCS_GDA1994GeoscienceAustraliaLambert',
                 'esriSRProjCS_GDA1994BCSG02',
                 'esriSRProjCS_PRS1992PhilippinesZoneI',
                 'esriSRProjCS_PRS1992PhilippinesZoneII',
                 'esriSRProjCS_PRS1992PhilippinesZoneIII',
                 'esriSRProjCS_PRS1992PhilippinesZoneIV',
                 'esriSRProjCS_PRS1992PhilippinesZoneV',
                 'esriSRProjCS_ETRS1989ETRS_GK19FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK20FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK21FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK22FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK23FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK24FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK25FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK26FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK27FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK28FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK29FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK30FIN',
                 'esriSRProjCS_ETRS1989ETRS_GK31FIN',
                 'esriSRProjCS_WGS1984USGSTransantarcticMtns',
                 'esriSRProjCS_RGPFUTMZone5S',
                 'esriSRProjCS_RGPFUTMZone6S',
                 'esriSRProjCS_RGPFUTMZone7S',
                 'esriSRProjCS_RGPFUTMZone8S',
                 'esriSRProjCS_IGN63HivaOaUTMZone7S',
                 'esriSRProjCS_FatuIva1972UTMZone7S',
                 'esriSRProjCS_Tahiti1979UTMZone6S',
                 'esriSRProjCS_Moorea1987UTMZone6S',
                 'esriSRProjCS_Maupiti1983UTMZone5S',
                 'esriSRProjCS_Nakhl_e_GhanemUTMZone39N',
                 'esriSRProjCS_GDA1994NSW_Lambert',
                 'esriSRProjCS_NAD1927CaliforniaTealeAlbers',
                 'esriSRProjCS_NAD1983CaliforniaTealeAlbers',
                 'esriSRProjCS_NAD1983HARNCaliforniaTealeAlbers',
                 'esriSRProjCS_CSG1967UTMZone21N',
                 'esriSRProjCS_RGFG1995UTMZone21N',
                 'esriSRProjCS_Katanga1955KatangaLambert',
                 'esriSRProjCS_Katanga1955KatangaTM',
                 'esriSRProjCS_Kasai1953CongoTMZone22',
                 'esriSRProjCS_Kasai1953CongoTMZone24',
                 'esriSRProjCS_IGC1962CongoTMZone12',
                 'esriSRProjCS_IGC1962CongoTMZone14',
                 'esriSRProjCS_IGC1962CongoTMZone16',
                 'esriSRProjCS_IGC1962CongoTMZone18',
                 'esriSRProjCS_IGC1962CongoTMZone20',
                 'esriSRProjCS_IGC1962CongoTMZone22',
                 'esriSRProjCS_IGC1962CongoTMZone24',
                 'esriSRProjCS_IGC1962CongoTMZone26',
                 'esriSRProjCS_IGC1962CongoTMZone28',
                 'esriSRProjCS_IGC1962CongoTMZone30',
                 'esriSRProjCS_Pulkovo1942_58GUGiK80',
                 'esriSRProjCS_Pulkovo1942_58_3DegGKZone5',
                 'esriSRProjCS_Pulkovo1942_58_3DegGKZone6',
                 'esriSRProjCS_Pulkovo1942_58_3DegGKZone7',
                 'esriSRProjCS_Pulkovo1942_58_3DegGKZone8',
                 'esriSRProjCS_Pulkovo1942_58GKZone3',
                 'esriSRProjCS_Pulkovo1942_58GKZone4',
                 'esriSRProjCS_Pulkovo1942_58GKZone5',
                 'esriSRProjCS_KerguelanIsland1949UTMZone42S',
                 'esriSRProjCS_IGCB1955CongoTMZone12',
                 'esriSRProjCS_IGCB1955CongoTMZone14',
                 'esriSRProjCS_IGCB1955CongoTMZone16',
                 'esriSRProjCS_IGCB1955CongoUTMZone33S',
                 'esriSRProjCS_NAD1983StatsCanadaLambert',
                 'esriSRProjCS_WGS1984PDCMercator',
                 'esriSRProjCS_Pulkovo1942CS63ZoneC0',
                 'esriSRProjCS_Pulkovo1942CS63ZoneC1',
                 'esriSRProjCS_Pulkovo1942CS63ZoneC2',
                 'esriSRProjCS_Mhast_onshore_UTMZone32S',
                 'esriSRProjCS_Mhast_offshore_UTMZone32S',
                 'esriSRProjCS_EgyptGulfOfSuez_S650TLRedBelt',
                 'esriSRProjCS_GrandCayman1959UTMZone17N',
                 'esriSRProjCS_LittleCayman1961UTMZone17N',
                 'esriSRProjCS_NAD1983HARNSPCSNorthCarolina',
                 'esriSRProjCS_NAD1983HARNSPCSNorthCarolinaUSFt',
                 'esriSRProjCS_NAD1983HARNSPCSSouthCarolina',
                 'esriSRProjCS_NAD1983HARNSPCSSouthCarolinaIntlFt',
                 'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorth',
                 'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorthUSFt',
                 'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouth',
                 'esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouthUSFt',
                 'esriSRProjCS_HongKong1963GridSystem',
                 'esriSRProjCS_MalaysiaGDM2000MRSO',
                 'esriSRProjCS_MalaysiaGDM2000BRS0',
                 'esriSRProjCS_GDM2000Johor',
                 'esriSRProjCS_GDM2000NegeriSembilan_Melaka',
                 'esriSRProjCS_GDM2000Pahang',
                 'esriSRProjCS_GDM2000Selangor',
                 'esriSRProjCS_GDM2000Terengganu',
                 'esriSRProjCS_GDM2000PulauPinang_SeberangPerai',
                 'esriSRProjCS_GDM2000Kedah_Perlis',
                 'esriSRProjCS_GDM2000Perak',
                 'esriSRProjCS_GDM2000Kelantan',
                 'esriSRProjCS_AdindanUTMZone35N',
                 'esriSRProjCS_AdindanUTMZone36N',
                 'esriSRProjCS_AinElAbd1970UTMZone36N',
                 'esriSRProjCS_AinElAbd1970UTMZone40N',
                 'esriSRProjCS_POSGAR98ArgentinaZone1',
                 'esriSRProjCS_POSGAR98ArgentinaZone2',
                 'esriSRProjCS_POSGAR98ArgentinaZone3',
                 'esriSRProjCS_POSGAR98ArgentinaZone4',
                 'esriSRProjCS_POSGAR98ArgentinaZone5',
                 'esriSRProjCS_POSGAR98ArgentinaZone6',
                 'esriSRProjCS_POSGAR98ArgentinaZone7',
                 'esriSRProjCS_POSGAR94ArgentinaZone1',
                 'esriSRProjCS_POSGAR94ArgentinaZone2',
                 'esriSRProjCS_POSGAR94ArgentinaZone3',
                 'esriSRProjCS_POSGAR94ArgentinaZone4',
                 'esriSRProjCS_POSGAR94ArgentinaZone5',
                 'esriSRProjCS_POSGAR94ArgentinaZone6',
                 'esriSRProjCS_POSGAR94ArgentinaZone7',
                 'esriSRProjCS_CorregoAlegreUTMZone21S',
                 'esriSRProjCS_CorregoAlegreUTMZone22S',
                 'esriSRProjCS_CorregoAlegreUTMZone25S',
                 'esriSRProjCS_ProvSAmerDatumUTMZone17N',
                 'esriSRProjCS_ProvSAmerDatumUTMZone21S',
                 'esriSRProjCS_MerchichSaharaNord',
                 'esriSRProjCS_MerchichSaharaSud',
                 'esriSRProjCS_Datum73ModifiedPortugueseGrid',
                 'esriSRProjCS_SIRGAS2000UTMZone17N',
                 'esriSRProjCS_SIRGAS2000UTMZone18N',
                 'esriSRProjCS_SIRGAS2000UTMZone19N',
                 'esriSRProjCS_SIRGAS2000UTMZone20N',
                 'esriSRProjCS_SIRGAS2000UTMZone21N',
                 'esriSRProjCS_SIRGAS2000UTMZone22N',
                 'esriSRProjCS_SIRGAS2000UTMZone17S',
                 'esriSRProjCS_SIRGAS2000UTMZone18S',
                 'esriSRProjCS_SIRGAS2000UTMZone19S',
                 'esriSRProjCS_SIRGAS2000UTMZone20S',
                 'esriSRProjCS_SIRGAS2000UTMZone21S',
                 'esriSRProjCS_SIRGAS2000UTMZone22S',
                 'esriSRProjCS_SIRGAS2000UTMZone23S',
                 'esriSRProjCS_SIRGAS2000UTMZone24S',
                 'esriSRProjCS_SIRGAS2000UTMZone25S',
                 'esriSRProjCS_GoodeHomolosineLand',
                 'esriSRProjCS_GoodeHomolosineOcean',
                 'esriSRProjCS_QND1995UTMZone39N',
                 'esriSRProjCS_Merchich_degrees_UTMZone28N',
                 'esriSRProjCS_ETRS1989KosovoGrid',
                 'esriSRProjCS_NAD1983WisconsinTM_USFt',
                 'esriSRProjCS_NAD1983HARNWisconsinTM_USFt',
                 'esriSRProjCS_MONREF1997UTMZone46N',
                 'esriSRProjCS_WGS84ARC_SystemZone1',
                 'esriSRProjCS_WGS84ARC_SystemZone2',
                 'esriSRProjCS_WGS84ARC_SystemZone3',
                 'esriSRProjCS_WGS84ARC_SystemZone4',
                 'esriSRProjCS_WGS84ARC_SystemZone5',
                 'esriSRProjCS_WGS84ARC_SystemZone6',
                 'esriSRProjCS_WGS84ARC_SystemZone7',
                 'esriSRProjCS_WGS84ARC_SystemZone8',
                 'esriSRProjCS_WGS84ARC_SystemZone9',
                 'esriSRProjCS_WGS84ARC_SystemZone10',
                 'esriSRProjCS_WGS84ARC_SystemZone11',
                 'esriSRProjCS_WGS84ARC_SystemZone12',
                 'esriSRProjCS_WGS84ARC_SystemZone13',
                 'esriSRProjCS_WGS84ARC_SystemZone14',
                 'esriSRProjCS_WGS84ARC_SystemZone15',
                 'esriSRProjCS_WGS84ARCSystemZone16',
                 'esriSRProjCS_WGS84ARCSystemZone17',
                 'esriSRProjCS_WGS84ARCSystemZone18',
                 'esriSRProjCS_LKS1992LatviaTM_FN_0',
                 'esriSRProjCS_TWD1967TM_Taiwan',
                 'esriSRProjCS_TWD1967TMPenghu',
                 'esriSRProjCS_TWD1997TM_Taiwan',
                 'esriSRProjCS_TWD1997TMPenghu',
                 'esriSRProjCS_NAD1983MississippiTM',
                 'esriSRProjCS_NAD1983TexasStatewide',
                 'esriSRProjCS_Indian1954UTMZone46N',
                 'esriSRProjCS_WGS1984WebMercatorMajorAuxSphere',
                 'esriSRProjCS_NAD83_CSRS_UTM_14N',
                 'esriSRProjCS_NAD83_CSRS_UTM_15N',
                 'esriSRProjCS_NAD83_CSRS_UTM_16N',
                 'esriSRProjCS_NAD83_CSRS98_UTM_14N',
                 'esriSRProjCS_NAD83_CSRS98_UTM_15N',
                 'esriSRProjCS_NAD83_CSRS98_UTM_16N']
    esriSRProjCS_World_Aitoff = 54043
    esriSRProjCS_World_CrasterParabolic = 54046
    esriSRProjCS_World_FlatPolarQuartic = 54045
    esriSRProjCS_World_HammerAitoff = 54044
    esriSRProjCS_World_Times = 54048
    esriSRProjCS_World_VerticalPerspective = 54049
    esriSRProjCS_World_WinkelTripelNGS = 54042
    esriSRProjCS_Sphere_Aitoff = 53043
    esriSRProjCS_Sphere_CrasterParabolic = 53046
    esriSRProjCS_Sphere_FlatPolarQuartic = 53045
    esriSRProjCS_Sphere_HammerAitoff = 53044
    esriSRProjCS_Sphere_Times = 53048
    esriSRProjCS_Sphere_VerticalPerspective = 53049
    esriSRProjCS_Sphere_WinkelTripelNGS = 53042
    esriSRProjCS_WGS1984_NPoleGnomonic = 102034
    esriSRProjCS_WGS1984_SPoleGnomonic = 102036
    esriSRProjCS_WGS1984_NPoleOrthographic = 102035
    esriSRProjCS_WGS1984_SPoleOrthographic = 102037
    esriSRProjCS_TheWorldFromSpace = 102038
    esriSRProjCS_USNatlAtlasLambertAziEqualArea = 2163
    esriSRProjCS_Pulkovo1942_CS63zoneA1 = 2935
    esriSRProjCS_Pulkovo1942_CS63zoneA2 = 2936
    esriSRProjCS_Pulkovo1942_CS63zoneA3 = 2937
    esriSRProjCS_Pulkovo1942_CS63zoneA4 = 2938
    esriSRProjCS_Pulkovo1942_CS63zoneK2 = 2939
    esriSRProjCS_Pulkovo1942_CS63zoneK3 = 2940
    esriSRProjCS_Pulkovo1942_CS63zoneK4 = 2941
    esriSRProjCS_ED1950JordanTM = 3066
    esriSRProjCS_DHDN_SoldnerBerlin = 3068
    esriSRProjCS_NAD1927WisconsinTM = 3069
    esriSRProjCS_NAD1983WisconsinTM = 3070
    esriSRProjCS_NAD1983HARNWisconsinTM = 3071
    esriSRProjCS_NAD1983HARNMichiganGeoRef_Meters = 3079
    esriSRProjCS_NAD1983TexasCentricMappingSystemLambert = 3084
    esriSRProjCS_NAD1983TexasCentricMappingSystemAlbers = 3085
    esriSRProjCS_NAD1983FloridaGDLAlbers = 3086
    esriSRProjCS_NAD1983HARNFloridaGDLAlbers = 3087
    esriSRProjCS_NAD1983HARN_SPCSKentucky_USFeet = 3091
    esriSRProjCS_Mauritania1999UTMZone28N = 3343
    esriSRProjCS_Mauritania1999UTMZone29N = 3344
    esriSRProjCS_Mauritania1999UTMZone30N = 3345
    esriSRProjCS_Gulshan303BangladeshTM = 3106
    esriSRProjCS_Voirol1879NordAlgerieAncienne = 30493
    esriSRProjCS_Voirol1879SudAlgerieAncienne = 30494
    esriSRProjCS_D48SloveniaTM = 102060
    esriSRProjCS_JAD2001JamaicaGrid = 3448
    esriSRProjCS_BabSouth_PalauAziEquidist = 102096
    esriSRProjCS_CostaRicaNorte = 102221
    esriSRProjCS_CostaRicaSur = 102222
    esriSRProjCS_CostaRicaTM90 = 102223
    esriSRProjCS_MONREF1997UTMZone47N = 102225
    esriSRProjCS_MONREF1997UTMZone48N = 102226
    esriSRProjCS_MONREF1997UTMZone49N = 102227
    esriSRProjCS_MONREF1997UTMZone50N = 102228
    esriSRProjCS_ColombiaWestWestZone = 102231
    esriSRProjCS_BogotaCiudadBogota = 102232
    esriSRProjCS_MAGNACiudadBogota = 102233
    esriSRProjCS_MAGNAColombiaOesteOeste = 3114
    esriSRProjCS_MAGNAColombiaOeste = 3115
    esriSRProjCS_MAGNAColombiaBogota = 3116
    esriSRProjCS_MAGNAColombiaEste = 3117
    esriSRProjCS_MAGNAColombiaEsteEste = 3118
    esriSRProjCS_Guam1963TNet = 102239
    esriSRProjCS_Guam1993Net = 102240
    esriSRProjCS_PohnpeiAzimEquidist1971 = 102237
    esriSRProjCS_SaipanAzimEquidist1969 = 102238
    esriSRProjCS_NAD1983HARN_SPCSMinnesotaNorth_USFeet = 26857
    esriSRProjCS_NAD1983HARN_SPCSMinnesotaCentral_USFeet = 26858
    esriSRProjCS_NAD1983HARN_SPCSMinnesotaSouth_USFeet = 26859
    esriSRProjCS_BeduaramTM13NE = 2931
    esriSRProjCS_GunungSegaraUTMZone50S = 2933
    esriSRProjCS_QND1995QatarNationalGrid = 2932
    esriSRProjCS_ETRS1989GuernseyGrid = 3108
    esriSRProjCS_ETRS1989JerseyTM = 3109
    esriSRProjCS_GDA1994GeoscienceAustraliaLambert = 3112
    esriSRProjCS_GDA1994BCSG02 = 3113
    esriSRProjCS_PRS1992PhilippinesZoneI = 3121
    esriSRProjCS_PRS1992PhilippinesZoneII = 3122
    esriSRProjCS_PRS1992PhilippinesZoneIII = 3123
    esriSRProjCS_PRS1992PhilippinesZoneIV = 3124
    esriSRProjCS_PRS1992PhilippinesZoneV = 3125
    esriSRProjCS_ETRS1989ETRS_GK19FIN = 3126
    esriSRProjCS_ETRS1989ETRS_GK20FIN = 3127
    esriSRProjCS_ETRS1989ETRS_GK21FIN = 3128
    esriSRProjCS_ETRS1989ETRS_GK22FIN = 3129
    esriSRProjCS_ETRS1989ETRS_GK23FIN = 3130
    esriSRProjCS_ETRS1989ETRS_GK24FIN = 3131
    esriSRProjCS_ETRS1989ETRS_GK25FIN = 3132
    esriSRProjCS_ETRS1989ETRS_GK26FIN = 3133
    esriSRProjCS_ETRS1989ETRS_GK27FIN = 3134
    esriSRProjCS_ETRS1989ETRS_GK28FIN = 3135
    esriSRProjCS_ETRS1989ETRS_GK29FIN = 3136
    esriSRProjCS_ETRS1989ETRS_GK30FIN = 3137
    esriSRProjCS_ETRS1989ETRS_GK31FIN = 3138
    esriSRProjCS_WGS1984USGSTransantarcticMtns = 3294
    esriSRProjCS_RGPFUTMZone5S = 3296
    esriSRProjCS_RGPFUTMZone6S = 3297
    esriSRProjCS_RGPFUTMZone7S = 3298
    esriSRProjCS_RGPFUTMZone8S = 3299
    esriSRProjCS_IGN63HivaOaUTMZone7S = 3302
    esriSRProjCS_FatuIva1972UTMZone7S = 3303
    esriSRProjCS_Tahiti1979UTMZone6S = 3304
    esriSRProjCS_Moorea1987UTMZone6S = 3305
    esriSRProjCS_Maupiti1983UTMZone5S = 3306
    esriSRProjCS_Nakhl_e_GhanemUTMZone39N = 3307
    esriSRProjCS_GDA1994NSW_Lambert = 3308
    esriSRProjCS_NAD1927CaliforniaTealeAlbers = 3309
    esriSRProjCS_NAD1983CaliforniaTealeAlbers = 3310
    esriSRProjCS_NAD1983HARNCaliforniaTealeAlbers = 3311
    esriSRProjCS_CSG1967UTMZone21N = 3312
    esriSRProjCS_RGFG1995UTMZone21N = 3313
    esriSRProjCS_Katanga1955KatangaLambert = 4415
    esriSRProjCS_Katanga1955KatangaTM = 3315
    esriSRProjCS_Kasai1953CongoTMZone22 = 3316
    esriSRProjCS_Kasai1953CongoTMZone24 = 3317
    esriSRProjCS_IGC1962CongoTMZone12 = 3318
    esriSRProjCS_IGC1962CongoTMZone14 = 3319
    esriSRProjCS_IGC1962CongoTMZone16 = 3320
    esriSRProjCS_IGC1962CongoTMZone18 = 3321
    esriSRProjCS_IGC1962CongoTMZone20 = 3322
    esriSRProjCS_IGC1962CongoTMZone22 = 3323
    esriSRProjCS_IGC1962CongoTMZone24 = 3324
    esriSRProjCS_IGC1962CongoTMZone26 = 3325
    esriSRProjCS_IGC1962CongoTMZone28 = 3326
    esriSRProjCS_IGC1962CongoTMZone30 = 3327
    esriSRProjCS_Pulkovo1942_58GUGiK80 = 3328
    esriSRProjCS_Pulkovo1942_58_3DegGKZone5 = 3329
    esriSRProjCS_Pulkovo1942_58_3DegGKZone6 = 3330
    esriSRProjCS_Pulkovo1942_58_3DegGKZone7 = 3331
    esriSRProjCS_Pulkovo1942_58_3DegGKZone8 = 3332
    esriSRProjCS_Pulkovo1942_58GKZone3 = 3333
    esriSRProjCS_Pulkovo1942_58GKZone4 = 3334
    esriSRProjCS_Pulkovo1942_58GKZone5 = 3335
    esriSRProjCS_KerguelanIsland1949UTMZone42S = 3336
    esriSRProjCS_IGCB1955CongoTMZone12 = 3339
    esriSRProjCS_IGCB1955CongoTMZone14 = 3340
    esriSRProjCS_IGCB1955CongoTMZone16 = 3341
    esriSRProjCS_IGCB1955CongoUTMZone33S = 3342
    esriSRProjCS_NAD1983StatsCanadaLambert = 3347
    esriSRProjCS_WGS1984PDCMercator = 3832
    esriSRProjCS_Pulkovo1942CS63ZoneC0 = 3350
    esriSRProjCS_Pulkovo1942CS63ZoneC1 = 3351
    esriSRProjCS_Pulkovo1942CS63ZoneC2 = 3352
    esriSRProjCS_Mhast_onshore_UTMZone32S = 3353
    esriSRProjCS_Mhast_offshore_UTMZone32S = 3354
    esriSRProjCS_EgyptGulfOfSuez_S650TLRedBelt = 3355
    esriSRProjCS_GrandCayman1959UTMZone17N = 3356
    esriSRProjCS_LittleCayman1961UTMZone17N = 3357
    esriSRProjCS_NAD1983HARNSPCSNorthCarolina = 3358
    esriSRProjCS_NAD1983HARNSPCSNorthCarolinaUSFt = 3404
    esriSRProjCS_NAD1983HARNSPCSSouthCarolina = 3360
    esriSRProjCS_NAD1983HARNSPCSSouthCarolinaIntlFt = 3361
    esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorth = 3362
    esriSRProjCS_NAD1983HARNSPCSPennsylvaniaNorthUSFt = 3363
    esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouth = 3364
    esriSRProjCS_NAD1983HARNSPCSPennsylvaniaSouthUSFt = 3365
    esriSRProjCS_HongKong1963GridSystem = 3407
    esriSRProjCS_MalaysiaGDM2000MRSO = 3375
    esriSRProjCS_MalaysiaGDM2000BRS0 = 3376
    esriSRProjCS_GDM2000Johor = 3377
    esriSRProjCS_GDM2000NegeriSembilan_Melaka = 3378
    esriSRProjCS_GDM2000Pahang = 3379
    esriSRProjCS_GDM2000Selangor = 3380
    esriSRProjCS_GDM2000Terengganu = 3381
    esriSRProjCS_GDM2000PulauPinang_SeberangPerai = 3382
    esriSRProjCS_GDM2000Kedah_Perlis = 3383
    esriSRProjCS_GDM2000Perak = 3384
    esriSRProjCS_GDM2000Kelantan = 3385
    esriSRProjCS_AdindanUTMZone35N = 20135
    esriSRProjCS_AdindanUTMZone36N = 20136
    esriSRProjCS_AinElAbd1970UTMZone36N = 20436
    esriSRProjCS_AinElAbd1970UTMZone40N = 20440
    esriSRProjCS_POSGAR98ArgentinaZone1 = 22171
    esriSRProjCS_POSGAR98ArgentinaZone2 = 22172
    esriSRProjCS_POSGAR98ArgentinaZone3 = 22173
    esriSRProjCS_POSGAR98ArgentinaZone4 = 22174
    esriSRProjCS_POSGAR98ArgentinaZone5 = 22175
    esriSRProjCS_POSGAR98ArgentinaZone6 = 22176
    esriSRProjCS_POSGAR98ArgentinaZone7 = 22177
    esriSRProjCS_POSGAR94ArgentinaZone1 = 22181
    esriSRProjCS_POSGAR94ArgentinaZone2 = 22182
    esriSRProjCS_POSGAR94ArgentinaZone3 = 22183
    esriSRProjCS_POSGAR94ArgentinaZone4 = 22184
    esriSRProjCS_POSGAR94ArgentinaZone5 = 22185
    esriSRProjCS_POSGAR94ArgentinaZone6 = 22186
    esriSRProjCS_POSGAR94ArgentinaZone7 = 22187
    esriSRProjCS_CorregoAlegreUTMZone21S = 22521
    esriSRProjCS_CorregoAlegreUTMZone22S = 22522
    esriSRProjCS_CorregoAlegreUTMZone25S = 22525
    esriSRProjCS_ProvSAmerDatumUTMZone17N = 24817
    esriSRProjCS_ProvSAmerDatumUTMZone21S = 24881
    esriSRProjCS_MerchichSaharaNord = 26194
    esriSRProjCS_MerchichSaharaSud = 26195
    esriSRProjCS_Datum73ModifiedPortugueseGrid = 27493
    esriSRProjCS_SIRGAS2000UTMZone17N = 31971
    esriSRProjCS_SIRGAS2000UTMZone18N = 31972
    esriSRProjCS_SIRGAS2000UTMZone19N = 31973
    esriSRProjCS_SIRGAS2000UTMZone20N = 31974
    esriSRProjCS_SIRGAS2000UTMZone21N = 31975
    esriSRProjCS_SIRGAS2000UTMZone22N = 31976
    esriSRProjCS_SIRGAS2000UTMZone17S = 31977
    esriSRProjCS_SIRGAS2000UTMZone18S = 31978
    esriSRProjCS_SIRGAS2000UTMZone19S = 31979
    esriSRProjCS_SIRGAS2000UTMZone20S = 31980
    esriSRProjCS_SIRGAS2000UTMZone21S = 31981
    esriSRProjCS_SIRGAS2000UTMZone22S = 31982
    esriSRProjCS_SIRGAS2000UTMZone23S = 31983
    esriSRProjCS_SIRGAS2000UTMZone24S = 31984
    esriSRProjCS_SIRGAS2000UTMZone25S = 31985
    esriSRProjCS_GoodeHomolosineLand = 54052
    esriSRProjCS_GoodeHomolosineOcean = 54053
    esriSRProjCS_QND1995UTMZone39N = 102143
    esriSRProjCS_Merchich_degrees_UTMZone28N = 102144
    esriSRProjCS_ETRS1989KosovoGrid = 102157
    esriSRProjCS_NAD1983WisconsinTM_USFt = 102219
    esriSRProjCS_NAD1983HARNWisconsinTM_USFt = 102220
    esriSRProjCS_MONREF1997UTMZone46N = 102224
    esriSRProjCS_WGS84ARC_SystemZone1 = 102421
    esriSRProjCS_WGS84ARC_SystemZone2 = 102422
    esriSRProjCS_WGS84ARC_SystemZone3 = 102423
    esriSRProjCS_WGS84ARC_SystemZone4 = 102424
    esriSRProjCS_WGS84ARC_SystemZone5 = 102425
    esriSRProjCS_WGS84ARC_SystemZone6 = 102426
    esriSRProjCS_WGS84ARC_SystemZone7 = 102427
    esriSRProjCS_WGS84ARC_SystemZone8 = 102428
    esriSRProjCS_WGS84ARC_SystemZone9 = 102429
    esriSRProjCS_WGS84ARC_SystemZone10 = 102430
    esriSRProjCS_WGS84ARC_SystemZone11 = 102431
    esriSRProjCS_WGS84ARC_SystemZone12 = 102432
    esriSRProjCS_WGS84ARC_SystemZone13 = 102433
    esriSRProjCS_WGS84ARC_SystemZone14 = 102434
    esriSRProjCS_WGS84ARC_SystemZone15 = 102435
    esriSRProjCS_WGS84ARCSystemZone16 = 102436
    esriSRProjCS_WGS84ARCSystemZone17 = 102437
    esriSRProjCS_WGS84ARCSystemZone18 = 102438
    esriSRProjCS_LKS1992LatviaTM_FN_0 = 102440
    esriSRProjCS_TWD1967TM_Taiwan = 3828
    esriSRProjCS_TWD1967TMPenghu = 3827
    esriSRProjCS_TWD1997TM_Taiwan = 3826
    esriSRProjCS_TWD1997TMPenghu = 3825
    esriSRProjCS_NAD1983MississippiTM = 3814
    esriSRProjCS_NAD1983TexasStatewide = 3081
    esriSRProjCS_Indian1954UTMZone46N = 23946
    esriSRProjCS_WGS1984WebMercatorMajorAuxSphere = 3857
    esriSRProjCS_NAD83_CSRS_UTM_14N = 3158
    esriSRProjCS_NAD83_CSRS_UTM_15N = 3159
    esriSRProjCS_NAD83_CSRS_UTM_16N = 3160
    esriSRProjCS_NAD83_CSRS98_UTM_14N = 3158
    esriSRProjCS_NAD83_CSRS98_UTM_15N = 3159
    esriSRProjCS_NAD83_CSRS98_UTM_16N = 3160

class esriSRGeoTransformationType(Enumeration):
    __slots__ = ['esriSRGeoTransformation_Amersfoort_To_WGS1984',
                 'esriSRGeoTransformation_ETRF1989_To_WGS1984',
                 'esriSRGeoTransformation_GDA1994_To_WGS1984',
                 'esriSRGeoTransformation_ED1987_To_WGS1984_1',
                 'esriSRGeoTransformation_ED1950_To_ED1987_2',
                 'esriSRGeoTransformation_WGS1972_To_WGS1984_1',
                 'esriSRGeoTransformation_WGS1972_To_WGS1984_2',
                 'esriSRGeoTransformation_AGD1984_To_WGS1984_2',
                 'esriSRGeoTransformation_Adindan_To_WGS1984_1',
                 'esriSRGeoTransformation_Adindan_To_WGS1984_2',
                 'esriSRGeoTransformation_Adindan_To_WGS1984_3',
                 'esriSRGeoTransformation_Adindan_To_WGS1984_4',
                 'esriSRGeoTransformation_Adindan_To_WGS1984_5',
                 'esriSRGeoTransformation_Adindan_To_WGS1984_6',
                 'esriSRGeoTransformation_Adindan_To_WGS1984_7',
                 'esriSRGeoTransformation_Afgooye_To_WGS1984',
                 'esriSRGeoTransformation_AGD1966_To_WGS1984',
                 'esriSRGeoTransformation_AGD1984_To_WGS1984_1',
                 'esriSRGeoTransformation_AinElAbd_To_WGS1984_1',
                 'esriSRGeoTransformation_AinElAbd_To_WGS1984_2',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_1',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_2',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_3',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_4',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_5',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_6',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_7',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_8',
                 'esriSRGeoTransformation_Arc1950_To_WGS1984_9',
                 'esriSRGeoTransformation_Arc1960_To_WGS1984',
                 'esriSRGeoTransformation_Batavia_To_WGS1984',
                 'esriSRGeoTransformation_Bermuda1957_To_WGS1984',
                 'esriSRGeoTransformation_Bogota_to_WGS1984',
                 'esriSRGeoTransformation_BukitRimpah_To_WGS1984',
                 'esriSRGeoTransformation_CampoInchauspe_To_WGS1984',
                 'esriSRGeoTransformation_Cape_To_WGS1984_1',
                 'esriSRGeoTransformation_Cape_To_WGS1984_2',
                 'esriSRGeoTransformation_Carthage_To_WGS1984',
                 'esriSRGeoTransformation_Chua_To_WGS1984',
                 'esriSRGeoTransformation_CorregoAlegre_To_WGS1984',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_1',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_2',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_3',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_4',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_5',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_6',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_7',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_8',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_9',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_10',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_11',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_12',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_13',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_16',
                 'esriSRGeoTransformation_Egypt1907_To_WGS1984',
                 'esriSRGeoTransformation_GGRS1987_To_WGS1984',
                 'esriSRGeoTransformation_Hungarian1972_To_ETRF1989_1',
                 'esriSRGeoTransformation_NZGD1949_To_WGS1984',
                 'esriSRGeoTransformation_HuTzuShan_To_WGS1984',
                 'esriSRGeoTransformation_Indian1954_To_WGS1984',
                 'esriSRGeoTransformation_Indian1975_To_WGS1984',
                 'esriSRGeoTransformation_Kandawala_To_WGS1984',
                 'esriSRGeoTransformation_Kertau_To_WGS1984',
                 'esriSRGeoTransformation_Leigon_To_WGS1984',
                 'esriSRGeoTransformation_Liberia1964_To_WGS1984',
                 'esriSRGeoTransformation_Luzon1911_To_WGS1984_1',
                 'esriSRGeoTransformation_Luzon1911_To_WGS1984_2',
                 'esriSRGeoTransformation_MPoraloko_To_WGS1984',
                 'esriSRGeoTransformation_Mahe1971_To_WGS1984',
                 'esriSRGeoTransformation_Massawa_To_WGS1984',
                 'esriSRGeoTransformation_Merchich_To_WGS1984',
                 'esriSRGeoTransformation_Minna_To_WGS1984_1',
                 'esriSRGeoTransformation_Minna_To_WGS1984_2',
                 'esriSRGeoTransformation_MonteMario_To_WGS1984',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_1',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_2',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_3',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_4',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_5',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_6',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_7',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_8',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_9',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_10',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_11',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_12',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_13',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_14',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_15',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_16',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_17',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_18',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_21',
                 'esriSRGeoTransformation_NAD1927_To_WGS1984_22',
                 'esriSRGeoTransformation_NAD1983_To_WGS1984_1',
                 'esriSRGeoTransformation_NAD1983_To_WGS1984_2',
                 'esriSRGeoTransformation_NAD1983_To_WGS1984_3',
                 'esriSRGeoTransformation_Nahrwan1967_To_WGS1984_1',
                 'esriSRGeoTransformation_Nahrwan1967_To_WGS1984_2',
                 'esriSRGeoTransformation_Nahrwan1967_To_WGS1984_3',
                 'esriSRGeoTransformation_Naparima1972_To_WGS1984',
                 'esriSRGeoTransformation_NTF_To_WGS1984',
                 'esriSRGeoTransformation_OSGB1936_To_WGS1984_1',
                 'esriSRGeoTransformation_OSGB1936_To_WGS1984_2',
                 'esriSRGeoTransformation_OSGB1936_To_WGS1984_3',
                 'esriSRGeoTransformation_OSGB1936_To_WGS1984_4',
                 'esriSRGeoTransformation_OSGB1936_To_WGS1984_5',
                 'esriSRGeoTransformation_PointeNoire_To_WGS1984',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_1',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_2',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_3',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_4',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_5',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_6',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_7',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_8',
                 'esriSRGeoTransformation_PSAD1956_To_WGS1984_9',
                 'esriSRGeoTransformation_Qatar_To_WGS1984',
                 'esriSRGeoTransformation_QORNOQ_To_WGS1984',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_1',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_2',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_3',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_4',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_5',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_6',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_7',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_8',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_9',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_10',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_11',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_12',
                 'esriSRGeoTransformation_SAD1969_To_WGS1984_13',
                 'esriSRGeoTransformation_SapperHill1943_To_WGS1984',
                 'esriSRGeoTransformation_Schwarzeck_To_WGS1984',
                 'esriSRGeoTransformation_Schwarzeck_To_WGS1984_2',
                 'esriSRGeoTransformation_Tananarive1925_To_WGS1984',
                 'esriSRGeoTransformation_Timbalai1948_To_WGS1984',
                 'esriSRGeoTransformation_TM65_To_WGS1984',
                 'esriSRGeoTransformation_Tokyo_To_WGS1984_1',
                 'esriSRGeoTransformation_Tokyo_To_WGS1984_2',
                 'esriSRGeoTransformation_Tokyo_To_WGS1984_3',
                 'esriSRGeoTransformation_Tokyo_To_WGS1984_4',
                 'esriSRGeoTransformation_Yacare_To_WGS1984',
                 'esriSRGeoTransformation_Zanderij_To_WGS1984',
                 'esriSRGeoTransformation_Fahud_To_WGS1984',
                 'esriSRGeoTransformation_HeratNorth_To_WGS1984',
                 'esriSRGeoTransformation_Indonesian1974_To_WGS1984',
                 'esriSRGeoTransformation_NordSahara1959_To_WGS1984',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984',
                 'esriSRGeoTransformation_VoirolUnifie1960_To_WGS1984',
                 'esriSRGeoTransformation_BataviaJakarta_To_WGS1984',
                 'esriSRGeoTransformation_BogotaBogota_To_WGS1984',
                 'esriSRGeoTransformation_MonteMarioRome_To_WGS1984',
                 'esriSRGeoTransformation_NTFParis_To_ED1950',
                 'esriSRGeoTransformation_NTFParis_To_WGS1972',
                 'esriSRGeoTransformation_NTFParis_To_WGS1984',
                 'esriSRGeoTransformation_Tananarive1925Paris_To_WGS1984',
                 'esriSRGeoTransformation_Voirol1875Paris_To_WGS1984',
                 'esriSRGeoTransformation_VoirolUnifieParis_To_WGS1984',
                 'esriSRGeoTransformation_AGD1966_To_GDA1994',
                 'esriSRGeoTransformation_AGD1984_To_GDA1994',
                 'esriSRGeoTransformation_Arc1960_To_WGS1984_2',
                 'esriSRGeoTransformation_Arc1960_To_WGS1984_3',
                 'esriSRGeoTransformation_Camacupa_To_WGS1972BE_1',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_1',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_2',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_4',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_5',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_6',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_7',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_8',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_10',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_17',
                 'esriSRGeoTransformation_Indian1975_To_WGS1984_2',
                 'esriSRGeoTransformation_LKS1994_To_WGS1984',
                 'esriSRGeoTransformation_Malongo1987_To_Mhast_1',
                 'esriSRGeoTransformation_Manoca_To_WGS1984_1',
                 'esriSRGeoTransformation_MGI_To_WGS1984',
                 'esriSRGeoTransformation_Mhast_To_WGS1984_1',
                 'esriSRGeoTransformation_Malongo1987_To_WGS1984_1',
                 'esriSRGeoTransformation_Naparima1972_To_WGS1984_2',
                 'esriSRGeoTransformation_Naparima1972_To_WGS1984_3',
                 'esriSRGeoTransformation_NTF_To_ED1950',
                 'esriSRGeoTransformation_NTF_To_WGS1972',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_3',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_4',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_5',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_6',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_7',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_8',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_9',
                 'esriSRGeoTransformation_Samboja_To_WGS1984',
                 'esriSRGeoTransformation_Segora_To_WGS1984',
                 'esriSRGeoTransformation_Tokyo_To_WGS1984_5',
                 'esriSRGeoTransformation_Trinidad1903_To_WGS1984',
                 'esriSRGeoTransformation_Voirol1875_To_WGS1984',
                 'esriSRGeoTransformation_AGD1984_To_GDA1994_2',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_3',
                 'esriSRGeoTransformation_Camacupa_To_WGS1984_9',
                 'esriSRGeoTransformation_DHDN_To_ETRF1989',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_18',
                 'esriSRGeoTransformation_Moznet_To_WGS1984',
                 'esriSRGeoTransformation_NAD1983_To_WGS1984_4',
                 'esriSRGeoTransformation_NGO1948_To_WGS1984',
                 'esriSRGeoTransformation_OSGB1936_To_ED1950UKOOA',
                 'esriSRGeoTransformation_OSGB1936_To_WGS1984Petrol',
                 'esriSRGeoTransformation_Pulkovo1942_To_ETRF1989',
                 'esriSRGeoTransformation_Pulkovo1942_To_LKS1994',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_10',
                 'esriSRGeoTransformation_RT90_To_WGS1984',
                 'esriSRGeoTransformation_Tete_To_Moznet_1',
                 'esriSRGeoTransformation_Tete_To_Moznet_2',
                 'esriSRGeoTransformation_Tete_To_Moznet_3',
                 'esriSRGeoTransformation_Tete_To_Moznet_4',
                 'esriSRGeoTransformation_Tete_To_Moznet_5',
                 'esriSRGeoTransformation_Antigua1943_To_WGS1984',
                 'esriSRGeoTransformation_Dominica1945_To_WGS1984',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_19',
                 'esriSRGeoTransformation_Grenada1953_To_WGS1984',
                 'esriSRGeoTransformation_MGIFerro_To_WGS1984',
                 'esriSRGeoTransformation_Montserrat1958_To_WGS1984',
                 'esriSRGeoTransformation_StKitts1955_To_WGS1984',
                 'esriSRGeoTransformation_StLucia1955_To_WGS1984',
                 'esriSRGeoTransformation_Estonia1992_To_WGS1984',
                 'esriSRGeoTransformation_Estonia1992_To_ETRF1989',
                 'esriSRGeoTransformation_Fahud_To_WGS1984_2',
                 'esriSRGeoTransformation_PDF1993_To_WGS1984',
                 'esriSRGeoTransformation_Pulkovo1942_To_Estonia1992',
                 'esriSRGeoTransformation_Pulkovo1942_To_WGS1984_12',
                 'esriSRGeoTransformation_AGD1966_To_GDA1994_2',
                 'esriSRGeoTransformation_AGD1966_To_GDA1994_3',
                 'esriSRGeoTransformation_AGD1966_To_GDA1994_4',
                 'esriSRGeoTransformation_Kalianpur1937_To_WGS1984_1',
                 'esriSRGeoTransformation_Kalianpur1962_To_WGS1984_1',
                 'esriSRGeoTransformation_Kalianpur1975_To_WGS1984_1',
                 'esriSRGeoTransformation_Abidjan1987_To_WGS1984',
                 'esriSRGeoTransformation_Cape_To_Hartebeesthoek94',
                 'esriSRGeoTransformation_CH1903Plus_To_CHTRF_1995',
                 'esriSRGeoTransformation_CH1903_To_WGS1984_2',
                 'esriSRGeoTransformation_CHTRF1995_To_WGS1984',
                 'esriSRGeoTransformation_FD1958_To_WGS1984',
                 'esriSRGeoTransformation_Hartebeesthoek94_To_WGS1984',
                 'esriSRGeoTransformation_LaCanoa_To_WGS1984',
                 'esriSRGeoTransformation_Locodjo1965_To_WGS1984',
                 'esriSRGeoTransformation_NAD1983_CSRS98_To_WGS1984',
                 'esriSRGeoTransformation_Rassadiran_To_WGS1984',
                 'esriSRGeoTransformation_CH1903_To_WGS1984_1',
                 'esriSRGeoTransformation_ED1950_ED77_To_WGS1984',
                 'esriSRGeoTransformation_MGI_To_WGS1984_2',
                 'esriSRGeoTransformation_NAD1983_To_WGS1984_5',
                 'esriSRGeoTransformation_OldHawaiian_To_WGS1984_1',
                 'esriSRGeoTransformation_OldHawaiian_To_WGS1984_2',
                 'esriSRGeoTransformation_OldHawaiian_To_WGS1984_3',
                 'esriSRGeoTransformation_OldHawaiian_To_WGS1984_4',
                 'esriSRGeoTransformation_OldHawaiian_To_WGS1984_5',
                 'esriSRGeoTransformation_ITRF_2000_To_ITRF_2005_1',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_87',
                 'esriSRGeoTransformation_Le_Pouce_1934_To_WGS_1984_1',
                 'esriSRGeoTransformation_Solomon_1968_To_WGS_1984_1',
                 'esriSRGeoTransformation_Solomon_1968_To_WGS_1984_2',
                 'esriSRGeoTransformation_PZ_1990_To_WGS_1984_1',
                 'esriSRGeoTransformation_Mauritania_1999_To_WGS_1984_1',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_85',
                 'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_16',
                 'esriSRGeoTransformation_FD_1954_To_ED_1950_1',
                 'esriSRGeoTransformation_PD83_To_ETRS_1989_1',
                 'esriSRGeoTransformation_RD83_To_ETRS_1989_1',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_3',
                 'esriSRGeoTransformation_Jouik_1961_To_WGS_1984_1',
                 'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_6',
                 'esriSRGeoTransformation_Karbala_1979_Polservice_To_WGS_1984_1',
                 'esriSRGeoTransformation_Douala_1948_To_WGS_1984_1',
                 'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_7',
                 'esriSRGeoTransformation_Fiji_1956_To_WGS_1984_1',
                 'esriSRGeoTransformation_Fiji_1986_To_WGS_1984_1',
                 'esriSRGeoTransformation_Fiji_1986_To_WGS_1984_2',
                 'esriSRGeoTransformation_Vanua_Levu_1915_To_WGS_1984_1',
                 'esriSRGeoTransformation_Greenland_1996_To_WGS_1984_1',
                 'esriSRGeoTransformation_RGNC_1991_93_To_WGS_1984_1',
                 'esriSRGeoTransformation_ST87_Ouvea_To_WGS_1984_2',
                 'esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_1',
                 'esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_1',
                 'esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_1',
                 'esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_1',
                 'esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_1',
                 'esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_2',
                 'esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_3',
                 'esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_2',
                 'esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_2',
                 'esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_2',
                 'esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_2',
                 'esriSRGeoTransformation_ST84_Ile_des_Pins_To_RGNC_1991_93_1',
                 'esriSRGeoTransformation_SIRGAS_2000_To_WGS_1984_1',
                 'esriSRGeoTransformation_Scoresbysund_1952_To_Greenland_1996_1',
                 'esriSRGeoTransformation_Ammassalik_1958_To_Greenland_1996_1',
                 'esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_3',
                 'esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_3',
                 'esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_3',
                 'esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_2',
                 'esriSRGeoTransformation_LGD2006_To_WGS_1984_1',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_8',
                 'esriSRGeoTransformation_Indonesian_1974_To_DGN_1995_1',
                 'esriSRGeoTransformation_DGN_1995_To_WGS_1984_1',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_86',
                 'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_1',
                 'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_2',
                 'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_3',
                 'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_4',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_9',
                 'esriSRGeoTransformation_ELD_1979_To_LGD2006_1',
                 'esriSRGeoTransformation_Jamaica_1969_To_JAD_2001_1',
                 'esriSRGeoTransformation_NAD_1983_HARN_To_NAD_1983_NSRS2007_1',
                 'esriSRGeoTransformation_NAD_1983_NSRS2007_To_WGS_1984_1',
                 'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_5',
                 'esriSRGeoTransformation_Beijing_1954_To_WGS_1984_6',
                 'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_7',
                 'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_8',
                 'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_9',
                 'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_10',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_79_CONUS',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_83',
                 'esriSRGeoTransformation_AGD_1984_To_WGS_1984_9_NTv2',
                 'esriSRGeoTransformation_AGD_1966_To_WGS_1984_17_NTv2',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_12_NTv2_Spain_v2',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_41_NTv2_Spain_v2',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989_8_NTv2',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_4_NTv2',
                 'esriSRGeoTransformation_RD83_To_WGS_1984_1_NTv2',
                 'esriSRGeoTransformation_PD83_To_WGS_1984_1_NTv2',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_2007',
                 'esriSRGeoTransformation_D48_To_WGS_1984_2007',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Zahodna_Slovenia',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Zahodna_Slovenia',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Severovzhodna_Slovenia',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Severovzhodna_Slovenia',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Jugovzhodna_Slovenia',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Jugovzhodna_Slovenia',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Stajerska',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Stajerska',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Gorenjska',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Gorenjska',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Osrednja_Slovenia',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Osrednja_Slovenia',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Dolenjska',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Dolenjska',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Juzna_Slovenia',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Juzna_Slovenia',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Primorska',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Primorska',
                 'esriSRGeoTransformation_D48_To_ETRS_1989_Pomurje',
                 'esriSRGeoTransformation_D48_To_WGS_1984_Pomurje',
                 'esriSRGeoTransformation_Pulkovo1942_To_ETRS1989',
                 'esriSRGeoTransformation_Estonia1992_To_ETRS1989',
                 'esriSRGeoTransformation_Qatar1974_To_WGS1984_1',
                 'esriSRGeoTransformation_NZGD1949_To_NZGD2000_1_3PAR',
                 'esriSRGeoTransformation_NZGD1949_To_NZGD2000_3_NTv2',
                 'esriSRGeoTransformation_NZGD1949_To_NZGD2000_2_7PAR',
                 'esriSRGeoTransformation_AGD1984_To_GDA1994_4_NTv2_WestAus',
                 'esriSRGeoTransformation_AGD1966_To_GDA1994_10_NTv2_NSW_Vic',
                 'esriSRGeoTransformation_NGO1948_To_WGS1984_1',
                 'esriSRGeoTransformation_NAD1927_CGQ77_To_NAD1983_CSRS',
                 'esriSRGeoTransformation_Tahaa1954_To_WGS1984_1',
                 'esriSRGeoTransformation_Tahiti1952_To_WGS1984_1',
                 'esriSRGeoTransformation_LittleCayman1961_To_WGS1984_2',
                 'esriSRGeoTransformation_Pulkovo1942_To_PZ1990_1',
                 'esriSRGeoTransformation_Amersfoort_To_WGS1984_3',
                 'esriSRGeoTransformation_Amersfoort_To_WGS1984_4X',
                 'esriSRGeoTransformation_PZ1990_To_WGS1984_GOST',
                 'esriSRGeoTransformation_Pulkovo1995_To_PZ1990_GOST',
                 'esriSRGeoTransformation_NAD1983_To_HARN_OR_WA']
    esriSRGeoTransformation_Amersfoort_To_WGS1984 = 1112
    esriSRGeoTransformation_ETRF1989_To_WGS1984 = 108195
    esriSRGeoTransformation_GDA1994_To_WGS1984 = 1150
    esriSRGeoTransformation_ED1987_To_WGS1984_1 = 1146
    esriSRGeoTransformation_ED1950_To_ED1987_2 = 1147
    esriSRGeoTransformation_WGS1972_To_WGS1984_1 = 1237
    esriSRGeoTransformation_WGS1972_To_WGS1984_2 = 1238
    esriSRGeoTransformation_AGD1984_To_WGS1984_2 = 1236
    esriSRGeoTransformation_Adindan_To_WGS1984_1 = 1100
    esriSRGeoTransformation_Adindan_To_WGS1984_2 = 1101
    esriSRGeoTransformation_Adindan_To_WGS1984_3 = 1102
    esriSRGeoTransformation_Adindan_To_WGS1984_4 = 1103
    esriSRGeoTransformation_Adindan_To_WGS1984_5 = 1104
    esriSRGeoTransformation_Adindan_To_WGS1984_6 = 1105
    esriSRGeoTransformation_Adindan_To_WGS1984_7 = 1106
    esriSRGeoTransformation_Afgooye_To_WGS1984 = 1107
    esriSRGeoTransformation_AGD1966_To_WGS1984 = 1108
    esriSRGeoTransformation_AGD1984_To_WGS1984_1 = 1109
    esriSRGeoTransformation_AinElAbd_To_WGS1984_1 = 1110
    esriSRGeoTransformation_AinElAbd_To_WGS1984_2 = 1111
    esriSRGeoTransformation_Arc1950_To_WGS1984_1 = 1113
    esriSRGeoTransformation_Arc1950_To_WGS1984_2 = 1114
    esriSRGeoTransformation_Arc1950_To_WGS1984_3 = 1115
    esriSRGeoTransformation_Arc1950_To_WGS1984_4 = 1116
    esriSRGeoTransformation_Arc1950_To_WGS1984_5 = 1117
    esriSRGeoTransformation_Arc1950_To_WGS1984_6 = 1118
    esriSRGeoTransformation_Arc1950_To_WGS1984_7 = 1119
    esriSRGeoTransformation_Arc1950_To_WGS1984_8 = 1120
    esriSRGeoTransformation_Arc1950_To_WGS1984_9 = 1121
    esriSRGeoTransformation_Arc1960_To_WGS1984 = 1122
    esriSRGeoTransformation_Batavia_To_WGS1984 = 1123
    esriSRGeoTransformation_Bermuda1957_To_WGS1984 = 1124
    esriSRGeoTransformation_Bogota_to_WGS1984 = 1125
    esriSRGeoTransformation_BukitRimpah_To_WGS1984 = 1126
    esriSRGeoTransformation_CampoInchauspe_To_WGS1984 = 1127
    esriSRGeoTransformation_Cape_To_WGS1984_1 = 1128
    esriSRGeoTransformation_Cape_To_WGS1984_2 = 1129
    esriSRGeoTransformation_Carthage_To_WGS1984 = 1130
    esriSRGeoTransformation_Chua_To_WGS1984 = 1131
    esriSRGeoTransformation_CorregoAlegre_To_WGS1984 = 1132
    esriSRGeoTransformation_ED1950_To_WGS1984_1 = 1133
    esriSRGeoTransformation_ED1950_To_WGS1984_2 = 1134
    esriSRGeoTransformation_ED1950_To_WGS1984_3 = 1135
    esriSRGeoTransformation_ED1950_To_WGS1984_4 = 1136
    esriSRGeoTransformation_ED1950_To_WGS1984_5 = 1137
    esriSRGeoTransformation_ED1950_To_WGS1984_6 = 1138
    esriSRGeoTransformation_ED1950_To_WGS1984_7 = 1139
    esriSRGeoTransformation_ED1950_To_WGS1984_8 = 1140
    esriSRGeoTransformation_ED1950_To_WGS1984_9 = 108275
    esriSRGeoTransformation_ED1950_To_WGS1984_10 = 1142
    esriSRGeoTransformation_ED1950_To_WGS1984_11 = 1143
    esriSRGeoTransformation_ED1950_To_WGS1984_12 = 1144
    esriSRGeoTransformation_ED1950_To_WGS1984_13 = 1145
    esriSRGeoTransformation_ED1950_To_WGS1984_16 = 1245
    esriSRGeoTransformation_Egypt1907_To_WGS1984 = 1148
    esriSRGeoTransformation_GGRS1987_To_WGS1984 = 1272
    esriSRGeoTransformation_Hungarian1972_To_ETRF1989_1 = 108196
    esriSRGeoTransformation_NZGD1949_To_WGS1984 = 1151
    esriSRGeoTransformation_HuTzuShan_To_WGS1984 = 1152
    esriSRGeoTransformation_Indian1954_To_WGS1984 = 1153
    esriSRGeoTransformation_Indian1975_To_WGS1984 = 1154
    esriSRGeoTransformation_Kandawala_To_WGS1984 = 1157
    esriSRGeoTransformation_Kertau_To_WGS1984 = 1158
    esriSRGeoTransformation_Leigon_To_WGS1984 = 1159
    esriSRGeoTransformation_Liberia1964_To_WGS1984 = 1160
    esriSRGeoTransformation_Luzon1911_To_WGS1984_1 = 1161
    esriSRGeoTransformation_Luzon1911_To_WGS1984_2 = 1162
    esriSRGeoTransformation_MPoraloko_To_WGS1984 = 1163
    esriSRGeoTransformation_Mahe1971_To_WGS1984 = 1164
    esriSRGeoTransformation_Massawa_To_WGS1984 = 1165
    esriSRGeoTransformation_Merchich_To_WGS1984 = 1166
    esriSRGeoTransformation_Minna_To_WGS1984_1 = 1167
    esriSRGeoTransformation_Minna_To_WGS1984_2 = 1168
    esriSRGeoTransformation_MonteMario_To_WGS1984 = 1169
    esriSRGeoTransformation_NAD1927_To_WGS1984_1 = 1170
    esriSRGeoTransformation_NAD1927_To_WGS1984_2 = 1171
    esriSRGeoTransformation_NAD1927_To_WGS1984_3 = 1172
    esriSRGeoTransformation_NAD1927_To_WGS1984_4 = 1173
    esriSRGeoTransformation_NAD1927_To_WGS1984_5 = 1174
    esriSRGeoTransformation_NAD1927_To_WGS1984_6 = 1175
    esriSRGeoTransformation_NAD1927_To_WGS1984_7 = 1176
    esriSRGeoTransformation_NAD1927_To_WGS1984_8 = 1177
    esriSRGeoTransformation_NAD1927_To_WGS1984_9 = 1178
    esriSRGeoTransformation_NAD1927_To_WGS1984_10 = 1179
    esriSRGeoTransformation_NAD1927_To_WGS1984_11 = 1180
    esriSRGeoTransformation_NAD1927_To_WGS1984_12 = 1181
    esriSRGeoTransformation_NAD1927_To_WGS1984_13 = 1182
    esriSRGeoTransformation_NAD1927_To_WGS1984_14 = 1183
    esriSRGeoTransformation_NAD1927_To_WGS1984_15 = 1184
    esriSRGeoTransformation_NAD1927_To_WGS1984_16 = 1185
    esriSRGeoTransformation_NAD1927_To_WGS1984_17 = 1186
    esriSRGeoTransformation_NAD1927_To_WGS1984_18 = 1187
    esriSRGeoTransformation_NAD1927_To_WGS1984_21 = 1249
    esriSRGeoTransformation_NAD1927_To_WGS1984_22 = 1250
    esriSRGeoTransformation_NAD1983_To_WGS1984_1 = 1188
    esriSRGeoTransformation_NAD1983_To_WGS1984_2 = 1251
    esriSRGeoTransformation_NAD1983_To_WGS1984_3 = 1252
    esriSRGeoTransformation_Nahrwan1967_To_WGS1984_1 = 1189
    esriSRGeoTransformation_Nahrwan1967_To_WGS1984_2 = 1190
    esriSRGeoTransformation_Nahrwan1967_To_WGS1984_3 = 1191
    esriSRGeoTransformation_Naparima1972_To_WGS1984 = 1192
    esriSRGeoTransformation_NTF_To_WGS1984 = 1193
    esriSRGeoTransformation_OSGB1936_To_WGS1984_1 = 1195
    esriSRGeoTransformation_OSGB1936_To_WGS1984_2 = 1196
    esriSRGeoTransformation_OSGB1936_To_WGS1984_3 = 1197
    esriSRGeoTransformation_OSGB1936_To_WGS1984_4 = 1198
    esriSRGeoTransformation_OSGB1936_To_WGS1984_5 = 1199
    esriSRGeoTransformation_PointeNoire_To_WGS1984 = 1200
    esriSRGeoTransformation_PSAD1956_To_WGS1984_1 = 1201
    esriSRGeoTransformation_PSAD1956_To_WGS1984_2 = 1202
    esriSRGeoTransformation_PSAD1956_To_WGS1984_3 = 1203
    esriSRGeoTransformation_PSAD1956_To_WGS1984_4 = 1204
    esriSRGeoTransformation_PSAD1956_To_WGS1984_5 = 1205
    esriSRGeoTransformation_PSAD1956_To_WGS1984_6 = 1206
    esriSRGeoTransformation_PSAD1956_To_WGS1984_7 = 1207
    esriSRGeoTransformation_PSAD1956_To_WGS1984_8 = 1208
    esriSRGeoTransformation_PSAD1956_To_WGS1984_9 = 1209
    esriSRGeoTransformation_Qatar_To_WGS1984 = 1561
    esriSRGeoTransformation_QORNOQ_To_WGS1984 = 8111
    esriSRGeoTransformation_SAD1969_To_WGS1984_1 = 1864
    esriSRGeoTransformation_SAD1969_To_WGS1984_2 = 1865
    esriSRGeoTransformation_SAD1969_To_WGS1984_3 = 1866
    esriSRGeoTransformation_SAD1969_To_WGS1984_4 = 1867
    esriSRGeoTransformation_SAD1969_To_WGS1984_5 = 1868
    esriSRGeoTransformation_SAD1969_To_WGS1984_6 = 1869
    esriSRGeoTransformation_SAD1969_To_WGS1984_7 = 1870
    esriSRGeoTransformation_SAD1969_To_WGS1984_8 = 1871
    esriSRGeoTransformation_SAD1969_To_WGS1984_9 = 1872
    esriSRGeoTransformation_SAD1969_To_WGS1984_10 = 1873
    esriSRGeoTransformation_SAD1969_To_WGS1984_11 = 1874
    esriSRGeoTransformation_SAD1969_To_WGS1984_12 = 1875
    esriSRGeoTransformation_SAD1969_To_WGS1984_13 = 1876
    esriSRGeoTransformation_SapperHill1943_To_WGS1984 = 1225
    esriSRGeoTransformation_Schwarzeck_To_WGS1984 = 1226
    esriSRGeoTransformation_Schwarzeck_To_WGS1984_2 = 1271
    esriSRGeoTransformation_Tananarive1925_To_WGS1984 = 1227
    esriSRGeoTransformation_Timbalai1948_To_WGS1984 = 1228
    esriSRGeoTransformation_TM65_To_WGS1984 = 1229
    esriSRGeoTransformation_Tokyo_To_WGS1984_1 = 1230
    esriSRGeoTransformation_Tokyo_To_WGS1984_2 = 1231
    esriSRGeoTransformation_Tokyo_To_WGS1984_3 = 1232
    esriSRGeoTransformation_Tokyo_To_WGS1984_4 = 1233
    esriSRGeoTransformation_Yacare_To_WGS1984 = 1234
    esriSRGeoTransformation_Zanderij_To_WGS1984 = 1235
    esriSRGeoTransformation_Fahud_To_WGS1984 = 1256
    esriSRGeoTransformation_HeratNorth_To_WGS1984 = 1246
    esriSRGeoTransformation_Indonesian1974_To_WGS1984 = 1248
    esriSRGeoTransformation_NordSahara1959_To_WGS1984 = 1253
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984 = 1254
    esriSRGeoTransformation_VoirolUnifie1960_To_WGS1984 = 8158
    esriSRGeoTransformation_BataviaJakarta_To_WGS1984 = 8178
    esriSRGeoTransformation_BogotaBogota_To_WGS1984 = 8174
    esriSRGeoTransformation_MonteMarioRome_To_WGS1984 = 8175
    esriSRGeoTransformation_NTFParis_To_ED1950 = 8186
    esriSRGeoTransformation_NTFParis_To_WGS1972 = 8188
    esriSRGeoTransformation_NTFParis_To_WGS1984 = 8094
    esriSRGeoTransformation_Tananarive1925Paris_To_WGS1984 = 8176
    esriSRGeoTransformation_Voirol1875Paris_To_WGS1984 = 8211
    esriSRGeoTransformation_VoirolUnifieParis_To_WGS1984 = 8177
    esriSRGeoTransformation_AGD1966_To_GDA1994 = 1278
    esriSRGeoTransformation_AGD1984_To_GDA1994 = 1279
    esriSRGeoTransformation_Arc1960_To_WGS1984_2 = 1284
    esriSRGeoTransformation_Arc1960_To_WGS1984_3 = 1285
    esriSRGeoTransformation_Camacupa_To_WGS1972BE_1 = 1317
    esriSRGeoTransformation_Camacupa_To_WGS1984_1 = 1318
    esriSRGeoTransformation_Camacupa_To_WGS1984_2 = 1319
    esriSRGeoTransformation_Camacupa_To_WGS1984_4 = 1321
    esriSRGeoTransformation_Camacupa_To_WGS1984_5 = 1322
    esriSRGeoTransformation_Camacupa_To_WGS1984_6 = 1323
    esriSRGeoTransformation_Camacupa_To_WGS1984_7 = 1324
    esriSRGeoTransformation_Camacupa_To_WGS1984_8 = 1325
    esriSRGeoTransformation_Camacupa_To_WGS1984_10 = 1327
    esriSRGeoTransformation_ED1950_To_WGS1984_17 = 1275
    esriSRGeoTransformation_Indian1975_To_WGS1984_2 = 1304
    esriSRGeoTransformation_LKS1994_To_WGS1984 = 1283
    esriSRGeoTransformation_Malongo1987_To_Mhast_1 = 1328
    esriSRGeoTransformation_Manoca_To_WGS1984_1 = 1316
    esriSRGeoTransformation_MGI_To_WGS1984 = 1306
    esriSRGeoTransformation_Mhast_To_WGS1984_1 = 1329
    esriSRGeoTransformation_Malongo1987_To_WGS1984_1 = 1330
    esriSRGeoTransformation_Naparima1972_To_WGS1984_2 = 8212
    esriSRGeoTransformation_Naparima1972_To_WGS1984_3 = 1307
    esriSRGeoTransformation_NTF_To_ED1950 = 1276
    esriSRGeoTransformation_NTF_To_WGS1972 = 1277
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_3 = 1287
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_4 = 1288
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_5 = 1289
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_6 = 1290
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_7 = 1291
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_8 = 1292
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_9 = 1293
    esriSRGeoTransformation_Samboja_To_WGS1984 = 1282
    esriSRGeoTransformation_Segora_To_WGS1984 = 1286
    esriSRGeoTransformation_Tokyo_To_WGS1984_5 = 1305
    esriSRGeoTransformation_Trinidad1903_To_WGS1984 = 1296
    esriSRGeoTransformation_Voirol1875_To_WGS1984 = 1294
    esriSRGeoTransformation_AGD1984_To_GDA1994_2 = 1280
    esriSRGeoTransformation_Camacupa_To_WGS1984_3 = 1320
    esriSRGeoTransformation_Camacupa_To_WGS1984_9 = 1326
    esriSRGeoTransformation_DHDN_To_ETRF1989 = 108192
    esriSRGeoTransformation_ED1950_To_WGS1984_18 = 1311
    esriSRGeoTransformation_Moznet_To_WGS1984 = 1302
    esriSRGeoTransformation_NAD1983_To_WGS1984_4 = 1308
    esriSRGeoTransformation_NGO1948_To_WGS1984 = 108201
    esriSRGeoTransformation_OSGB1936_To_ED1950UKOOA = 1315
    esriSRGeoTransformation_OSGB1936_To_WGS1984Petrol = 1314
    esriSRGeoTransformation_Pulkovo1942_To_ETRF1989 = 108198
    esriSRGeoTransformation_Pulkovo1942_To_LKS1994 = 1274
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_10 = 1303
    esriSRGeoTransformation_RT90_To_WGS1984 = 1680
    esriSRGeoTransformation_Tete_To_Moznet_1 = 1297
    esriSRGeoTransformation_Tete_To_Moznet_2 = 1298
    esriSRGeoTransformation_Tete_To_Moznet_3 = 1299
    esriSRGeoTransformation_Tete_To_Moznet_4 = 1300
    esriSRGeoTransformation_Tete_To_Moznet_5 = 1301
    esriSRGeoTransformation_Antigua1943_To_WGS1984 = 1441
    esriSRGeoTransformation_Dominica1945_To_WGS1984 = 1442
    esriSRGeoTransformation_ED1950_To_WGS1984_19 = 1440
    esriSRGeoTransformation_Grenada1953_To_WGS1984 = 1443
    esriSRGeoTransformation_MGIFerro_To_WGS1984 = 8263
    esriSRGeoTransformation_Montserrat1958_To_WGS1984 = 1444
    esriSRGeoTransformation_StKitts1955_To_WGS1984 = 1445
    esriSRGeoTransformation_StLucia1955_To_WGS1984 = 1446
    esriSRGeoTransformation_Estonia1992_To_WGS1984 = 1333
    esriSRGeoTransformation_Estonia1992_To_ETRF1989 = 108194
    esriSRGeoTransformation_Fahud_To_WGS1984_2 = 1438
    esriSRGeoTransformation_PDF1993_To_WGS1984 = 1439
    esriSRGeoTransformation_Pulkovo1942_To_Estonia1992 = 1332
    esriSRGeoTransformation_Pulkovo1942_To_WGS1984_12 = 1334
    esriSRGeoTransformation_AGD1966_To_GDA1994_2 = 1458
    esriSRGeoTransformation_AGD1966_To_GDA1994_3 = 1459
    esriSRGeoTransformation_AGD1966_To_GDA1994_4 = 1460
    esriSRGeoTransformation_Kalianpur1937_To_WGS1984_1 = 1155
    esriSRGeoTransformation_Kalianpur1962_To_WGS1984_1 = 1247
    esriSRGeoTransformation_Kalianpur1975_To_WGS1984_1 = 1156
    esriSRGeoTransformation_Abidjan1987_To_WGS1984 = 1470
    esriSRGeoTransformation_Cape_To_Hartebeesthoek94 = 1504
    esriSRGeoTransformation_CH1903Plus_To_CHTRF_1995 = 1509
    esriSRGeoTransformation_CH1903_To_WGS1984_2 = 1766
    esriSRGeoTransformation_CHTRF1995_To_WGS1984 = 1511
    esriSRGeoTransformation_FD1958_To_WGS1984 = 1513
    esriSRGeoTransformation_Hartebeesthoek94_To_WGS1984 = 1505
    esriSRGeoTransformation_LaCanoa_To_WGS1984 = 1516
    esriSRGeoTransformation_Locodjo1965_To_WGS1984 = 1469
    esriSRGeoTransformation_NAD1983_CSRS98_To_WGS1984 = 1473
    esriSRGeoTransformation_Rassadiran_To_WGS1984 = 1512
    esriSRGeoTransformation_CH1903_To_WGS1984_1 = 1753
    esriSRGeoTransformation_ED1950_ED77_To_WGS1984 = 1514
    esriSRGeoTransformation_MGI_To_WGS1984_2 = 8415
    esriSRGeoTransformation_NAD1983_To_WGS1984_5 = 1515
    esriSRGeoTransformation_OldHawaiian_To_WGS1984_1 = 15824
    esriSRGeoTransformation_OldHawaiian_To_WGS1984_2 = 15825
    esriSRGeoTransformation_OldHawaiian_To_WGS1984_3 = 15826
    esriSRGeoTransformation_OldHawaiian_To_WGS1984_4 = 15827
    esriSRGeoTransformation_OldHawaiian_To_WGS1984_5 = 15828
    esriSRGeoTransformation_ITRF_2000_To_ITRF_2005_1 = 15698
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_87 = 15699
    esriSRGeoTransformation_Le_Pouce_1934_To_WGS_1984_1 = 15784
    esriSRGeoTransformation_Solomon_1968_To_WGS_1984_1 = 15805
    esriSRGeoTransformation_Solomon_1968_To_WGS_1984_2 = 15807
    esriSRGeoTransformation_PZ_1990_To_WGS_1984_1 = 15843
    esriSRGeoTransformation_Mauritania_1999_To_WGS_1984_1 = 15860
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_85 = 15864
    esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_16 = 15865
    esriSRGeoTransformation_FD_1954_To_ED_1950_1 = 15866
    esriSRGeoTransformation_PD83_To_ETRS_1989_1 = 15867
    esriSRGeoTransformation_RD83_To_ETRS_1989_1 = 15868
    esriSRGeoTransformation_DHDN_To_WGS_1984_3 = 15869
    esriSRGeoTransformation_Jouik_1961_To_WGS_1984_1 = 15870
    esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_6 = 15871
    esriSRGeoTransformation_Karbala_1979_Polservice_To_WGS_1984_1 = 15872
    esriSRGeoTransformation_Douala_1948_To_WGS_1984_1 = 15873
    esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_7 = 15874
    esriSRGeoTransformation_Fiji_1956_To_WGS_1984_1 = 15875
    esriSRGeoTransformation_Fiji_1986_To_WGS_1984_1 = 15876
    esriSRGeoTransformation_Fiji_1986_To_WGS_1984_2 = 15877
    esriSRGeoTransformation_Vanua_Levu_1915_To_WGS_1984_1 = 15878
    esriSRGeoTransformation_Greenland_1996_To_WGS_1984_1 = 15879
    esriSRGeoTransformation_RGNC_1991_93_To_WGS_1984_1 = 15880
    esriSRGeoTransformation_ST87_Ouvea_To_WGS_1984_2 = 15881
    esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_1 = 15882
    esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_1 = 15883
    esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_1 = 15884
    esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_1 = 15885
    esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_1 = 15886
    esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_2 = 15887
    esriSRGeoTransformation_IGN72_Grande_Terre_To_RGNC_1991_93_3 = 15888
    esriSRGeoTransformation_NEA74_Noumea_To_RGNC_1991_93_2 = 15889
    esriSRGeoTransformation_IGN56_Lifou_To_RGNC_1991_93_2 = 15890
    esriSRGeoTransformation_IGN53_Mare_To_RGNC_1991_93_2 = 15891
    esriSRGeoTransformation_ST87_Ouvea_To_RGNC_1991_93_2 = 15892
    esriSRGeoTransformation_ST84_Ile_des_Pins_To_RGNC_1991_93_1 = 15893
    esriSRGeoTransformation_SIRGAS_2000_To_WGS_1984_1 = 15894
    esriSRGeoTransformation_Scoresbysund_1952_To_Greenland_1996_1 = 15899
    esriSRGeoTransformation_Ammassalik_1958_To_Greenland_1996_1 = 15900
    esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_3 = 15901
    esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_3 = 15902
    esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_3 = 15903
    esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_2 = 15904
    esriSRGeoTransformation_LGD2006_To_WGS_1984_1 = 15908
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_8 = 15909
    esriSRGeoTransformation_Indonesian_1974_To_DGN_1995_1 = 15911
    esriSRGeoTransformation_DGN_1995_To_WGS_1984_1 = 15912
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_86 = 15913
    esriSRGeoTransformation_Beijing_1954_To_WGS_1984_1 = 15918
    esriSRGeoTransformation_Beijing_1954_To_WGS_1984_2 = 15919
    esriSRGeoTransformation_Beijing_1954_To_WGS_1984_3 = 15920
    esriSRGeoTransformation_Beijing_1954_To_WGS_1984_4 = 15921
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_9 = 15923
    esriSRGeoTransformation_ELD_1979_To_LGD2006_1 = 15924
    esriSRGeoTransformation_Jamaica_1969_To_JAD_2001_1 = 15926
    esriSRGeoTransformation_NAD_1983_HARN_To_NAD_1983_NSRS2007_1 = 4461
    esriSRGeoTransformation_NAD_1983_NSRS2007_To_WGS_1984_1 = 15931
    esriSRGeoTransformation_Beijing_1954_To_WGS_1984_5 = 15935
    esriSRGeoTransformation_Beijing_1954_To_WGS_1984_6 = 15936
    esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_7 = 15937
    esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_8 = 15938
    esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_9 = 15952
    esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_10 = 15953
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_79_CONUS = 15851
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_83 = 15855
    esriSRGeoTransformation_AGD_1984_To_WGS_1984_9_NTv2 = 15785
    esriSRGeoTransformation_AGD_1966_To_WGS_1984_17_NTv2 = 15786
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_12_NTv2_Spain_v2 = 15932
    esriSRGeoTransformation_ED_1950_To_WGS_1984_41_NTv2_Spain_v2 = 15933
    esriSRGeoTransformation_DHDN_To_ETRS_1989_8_NTv2 = 15948
    esriSRGeoTransformation_DHDN_To_WGS_1984_4_NTv2 = 15949
    esriSRGeoTransformation_RD83_To_WGS_1984_1_NTv2 = 15954
    esriSRGeoTransformation_PD83_To_WGS_1984_1_NTv2 = 15955
    esriSRGeoTransformation_D48_To_ETRS_1989_2007 = 108308
    esriSRGeoTransformation_D48_To_WGS_1984_2007 = 108309
    esriSRGeoTransformation_D48_To_ETRS_1989_Zahodna_Slovenia = 108310
    esriSRGeoTransformation_D48_To_WGS_1984_Zahodna_Slovenia = 108311
    esriSRGeoTransformation_D48_To_ETRS_1989_Severovzhodna_Slovenia = 108312
    esriSRGeoTransformation_D48_To_WGS_1984_Severovzhodna_Slovenia = 108313
    esriSRGeoTransformation_D48_To_ETRS_1989_Jugovzhodna_Slovenia = 108314
    esriSRGeoTransformation_D48_To_WGS_1984_Jugovzhodna_Slovenia = 108315
    esriSRGeoTransformation_D48_To_ETRS_1989_Stajerska = 108316
    esriSRGeoTransformation_D48_To_WGS_1984_Stajerska = 108317
    esriSRGeoTransformation_D48_To_ETRS_1989_Gorenjska = 108318
    esriSRGeoTransformation_D48_To_WGS_1984_Gorenjska = 108319
    esriSRGeoTransformation_D48_To_ETRS_1989_Osrednja_Slovenia = 108320
    esriSRGeoTransformation_D48_To_WGS_1984_Osrednja_Slovenia = 108321
    esriSRGeoTransformation_D48_To_ETRS_1989_Dolenjska = 108322
    esriSRGeoTransformation_D48_To_WGS_1984_Dolenjska = 108323
    esriSRGeoTransformation_D48_To_ETRS_1989_Juzna_Slovenia = 108324
    esriSRGeoTransformation_D48_To_WGS_1984_Juzna_Slovenia = 108325
    esriSRGeoTransformation_D48_To_ETRS_1989_Primorska = 108326
    esriSRGeoTransformation_D48_To_WGS_1984_Primorska = 108327
    esriSRGeoTransformation_D48_To_ETRS_1989_Pomurje = 108328
    esriSRGeoTransformation_D48_To_WGS_1984_Pomurje = 108329
    esriSRGeoTransformation_Pulkovo1942_To_ETRS1989 = 1310
    esriSRGeoTransformation_Estonia1992_To_ETRS1989 = 1331
    esriSRGeoTransformation_Qatar1974_To_WGS1984_1 = 1561
    esriSRGeoTransformation_NZGD1949_To_NZGD2000_1_3PAR = 1566
    esriSRGeoTransformation_NZGD1949_To_NZGD2000_3_NTv2 = 1568
    esriSRGeoTransformation_NZGD1949_To_NZGD2000_2_7PAR = 1701
    esriSRGeoTransformation_AGD1984_To_GDA1994_4_NTv2_WestAus = 1593
    esriSRGeoTransformation_AGD1966_To_GDA1994_10_NTv2_NSW_Vic = 1596
    esriSRGeoTransformation_NGO1948_To_WGS1984_1 = 1654
    esriSRGeoTransformation_NAD1927_CGQ77_To_NAD1983_CSRS = 1845
    esriSRGeoTransformation_Tahaa1954_To_WGS1984_1 = 1913
    esriSRGeoTransformation_Tahiti1952_To_WGS1984_1 = 1924
    esriSRGeoTransformation_LittleCayman1961_To_WGS1984_2 = 15829
    esriSRGeoTransformation_Pulkovo1942_To_PZ1990_1 = 15844
    esriSRGeoTransformation_Amersfoort_To_WGS1984_3 = 15934
    esriSRGeoTransformation_Amersfoort_To_WGS1984_4X = 108237
    esriSRGeoTransformation_PZ1990_To_WGS1984_GOST = 1244
    esriSRGeoTransformation_Pulkovo1995_To_PZ1990_GOST = 1257
    esriSRGeoTransformation_NAD1983_To_HARN_OR_WA = 108291

class esriSRGeoTransformation2Type(Enumeration):
    __slots__ = ['esriSRGeoTransformation_Batavia_Jakarta_To_Batavia',
                 'esriSRGeoTransformation_Belge_1950_Brussels_To_Belge_1950',
                 'esriSRGeoTransformation_Bogota_Bogota_To_Bogota',
                 'esriSRGeoTransformation_Greek_Athens_To_Greek',
                 'esriSRGeoTransformation_Lisbon_Lisbon_To_Lisbon',
                 'esriSRGeoTransformation_Makassar_Jakarta_To_Makassar',
                 'esriSRGeoTransformation_MGI_Ferro_TO_MGI',
                 'esriSRGeoTransformation_Monte_Mario_Rome_To_Monte_Mario',
                 'esriSRGeoTransformation_NGO_1948_Oslo_To_NGO_1948',
                 'esriSRGeoTransformation_NTF_Paris_To_NTF',
                 'esriSRGeoTransformation_PAdang_1884_Jakarta_To_Padang_1884',
                 'esriSRGeoTransformation_RT38_Stockholm_TO_RT38',
                 'esriSRGeoTransformation_Tananarive_1925_Paris_To_Tananarive_1925',
                 'esriSRGeoTransformation_Voirol_1875_Paris_To_Voirol_1875',
                 'esriSRGeoTransformation_Voirol_Unifie_1960_Paris_To_Voirol_Unifie_1960',
                 'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NADCON',
                 'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_AK',
                 'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_PRVI',
                 'esriSRGeoTransformation_OldHawaiian_TO_NAD_1983',
                 'esriSRGeoTransformation_StGeorge_TO_NAD_1983',
                 'esriSRGeoTransformation_StLawrence_TO_NAD_1983',
                 'esriSRGeoTransformation_StPaul_TO_NAD_1983',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_AL',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_AR',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_AZ',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_CN',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_CS',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_CO',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_GA',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_FL',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_HI',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_IL',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_IN',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_KS',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_KY',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_LA',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_MD',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_ME',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_MI',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_MN',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_MS',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_MO',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_EM',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_WM',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_NB',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_NV',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_NE',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_NJ',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_NM',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_NY',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_ND',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_OH',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_OK',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_PV',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_SD',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_TN',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_ET',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_WT',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_VA',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_UT',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_WO',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_WV',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_WI',
                 'esriSRGeoTransformation_NAD_1983_TO_HARN_WY',
                 'esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NTV2_Canada',
                 'esriSRGeoTransformation_NAD27_DEF1976_TO_NAD83_NTV2_Ontario',
                 'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Victoria',
                 'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Tasmania',
                 'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Northern_Territory',
                 'esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Queensland',
                 'esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Western_Australia',
                 'esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_SEAustralia',
                 'esriSRGeoTransformation_NZGD1949_TO_NZGD2000_NTV2',
                 'esriSRGeoTransformation_Jamaica1969_To_WGS1984_1',
                 'esriSRGeoTransformation_Datum73_To_WGS1984_1',
                 'esriSRGeoTransformation_Datum73_To_WGS1984_2',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_PT3',
                 'esriSRGeoTransformation_ED1950_To_WGS1984_PT7',
                 'esriSRGeoTransformation_Graciosa1948_To_WGS1984_1',
                 'esriSRGeoTransformation_Graciosa1948_To_WGS1984_2',
                 'esriSRGeoTransformation_LisaboaBessel_To_WGS1984_1',
                 'esriSRGeoTransformation_LisaboaBessel_To_WGS1984_2',
                 'esriSRGeoTransformation_LisaboaHayford_To_WGS1984_1',
                 'esriSRGeoTransformation_LisaboaHayford_To_WGS1984_2',
                 'esriSRGeoTransformation_PortoSanto1936_To_WGS1984_1',
                 'esriSRGeoTransformation_PortoSanto1936_To_WGS1984_2',
                 'esriSRGeoTransformation_ObservMeteor1939_To_WGS1984_1',
                 'esriSRGeoTransformation_SaoBraz_To_WGS1984_1',
                 'esriSRGeoTransformation_SaoBraz_To_WGS1984_2',
                 'esriSRGeoTransformation_NTF_To_RGF1993_1',
                 'esriSRGeoTransformation_NZGD1949_To_NZGD2000_3Parm',
                 'esriSRGeoTransformation_NZGD1949_To_NZGD2000_7Parm',
                 'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2',
                 'esriSRGeoTransformation_Trinidad_1903_To_WGS_1984_2',
                 'esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_1',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_5',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_6',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_7',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_8',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_9',
                 'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_2',
                 'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_3',
                 'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_4',
                 'esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_5',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_12',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_13',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_6',
                 'esriSRGeoTransformation_PRS_1992_To_WGS_1984_1',
                 'esriSRGeoTransformation_Nouakchott_1965_To_WGS_1984',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_10',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_11',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_12',
                 'esriSRGeoTransformation_Gan_1970_To_WGS_1984_1',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_1_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_1_CF',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_2_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_2_CF',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_3_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_3_CF',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_4_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_4_CF',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_5_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_5_CF',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_6_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_6_CF',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_7_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_7_CF',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_region_8_CF',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_region_8_CF',
                 'esriSRGeoTransformation_MAGNA_To_WGS_1984_1',
                 'esriSRGeoTransformation_Amersfoort_To_ETRS_1989_3',
                 'esriSRGeoTransformation_Amersfoort_To_ETRS_1989_4',
                 'esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_5',
                 'esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_6',
                 'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_6',
                 'esriSRGeoTransformation_Nakhl_e_Ghanem_To_WGS_1984_6',
                 'esriSRGeoTransformation_Belge_1972_To_ETRS_1989_2',
                 'esriSRGeoTransformation_Belge_1972_To_WGS_1984_3',
                 'esriSRGeoTransformation_St_Kitts_1955_To_WGS_1984_2',
                 'esriSRGeoTransformation_Reunion_1947_To_WGS_1984_2',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_14',
                 'esriSRGeoTransformation_Tahiti_1979_To_RGPF_1',
                 'esriSRGeoTransformation_Moorea_1987_To_RGPF_1',
                 'esriSRGeoTransformation_Tahaa_1954_To_RGPF_1',
                 'esriSRGeoTransformation_Maupiti_1983_To_RGPF_1',
                 'esriSRGeoTransformation_Fatu_Iva_1972_To_RGPF_1',
                 'esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_1',
                 'esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_2',
                 'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_1',
                 'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_2',
                 'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_3',
                 'esriSRGeoTransformation_Tahiti_1979_To_WGS_1984_1',
                 'esriSRGeoTransformation_Moorea_1987_To_WGS_1984_1',
                 'esriSRGeoTransformation_Tahaa_1954_To_WGS_1984_2',
                 'esriSRGeoTransformation_Maupiti_1983_To_WGS_1984_1',
                 'esriSRGeoTransformation_Fatu_Iva_1972_To_WGS_1984_1',
                 'esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_1',
                 'esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_2',
                 'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_2',
                 'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_3',
                 'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_4',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_7',
                 'esriSRGeoTransformation_Gulshan_303_To_WGS_1984_1',
                 'esriSRGeoTransformation_POSGAR_1994_To_WGS_1984_1',
                 'esriSRGeoTransformation_Campo_Inchauspe_To_POSGAR_1994_1',
                 'esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_2',
                 'esriSRGeoTransformation_IGCB_1955_To_WGS_1984_1',
                 'esriSRGeoTransformation_AGD_1966_To_WGS_1984_16',
                 'esriSRGeoTransformation_AGD_1984_To_WGS_1984_8',
                 'esriSRGeoTransformation_MHAST_Offshore_To_WGS_1972_BE_1',
                 'esriSRGeoTransformation_Malongo_1987_To_WGS_1984_3',
                 'esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1972_BE_1',
                 'esriSRGeoTransformation_Barbados_1938_To_WGS_1984_1',
                 'esriSRGeoTransformation_Little_Cayman_1961_To_WGS_1984_1',
                 'esriSRGeoTransformation_Grand_Cayman_1959_To_WGS_1984_1',
                 'esriSRGeoTransformation_Korea_2000_To_WGS_1984_1',
                 'esriSRGeoTransformation_RGPF_To_WGS_1984_1',
                 'esriSRGeoTransformation_RGPF_To_WGS_1984_2',
                 'esriSRGeoTransformation_Hong_Kong_1963_67_To_WGS_1984_1',
                 'esriSRGeoTransformation_Pampa_del_Castillo_To_WGS_1984_1',
                 'esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1984_2',
                 'esriSRGeoTransformation_MOP78_To_WGS_1984_2',
                 'esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_2',
                 'esriSRGeoTransformation_Beduaram_To_WGS_1984_2',
                 'esriSRGeoTransformation_Kerguelen_Island_1949_To_WGS_1984_1',
                 'esriSRGeoTransformation_Merchich_degrees_To_WGS_1984',
                 'esriSRGeoTransformation_NAD_1983_HARN_PACP00_MARP00_To_WGS_1984',
                 'esriSRGeoTransformation_AGD_1966_To_WGS_1984_12',
                 'esriSRGeoTransformation_AGD_1966_To_WGS_1984_13',
                 'esriSRGeoTransformation_AGD_1966_To_WGS_1984_14',
                 'esriSRGeoTransformation_AGD_1966_To_WGS_1984_15',
                 'esriSRGeoTransformation_AGD_1984_To_WGS_1984_7',
                 'esriSRGeoTransformation_Amersfoort_To_WGS_1984_2',
                 'esriSRGeoTransformation_Ammassalik_1958_To_WGS_1984_1',
                 'esriSRGeoTransformation_Australian_Antarctic_1998_To_WGS_1984_1',
                 'esriSRGeoTransformation_Azores_Central_1948_To_WGS_1984_1',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_10',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_11',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_2',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_3',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_4',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_5',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_6',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_7',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_8',
                 'esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_9',
                 'esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_1',
                 'esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_2',
                 'esriSRGeoTransformation_Azores_Oriental_1940_To_WGS_1984_1',
                 'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_2',
                 'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_3',
                 'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_4',
                 'esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_5',
                 'esriSRGeoTransformation_Batavia_To_WGS_1984_2',
                 'esriSRGeoTransformation_Batavia_To_WGS_1984_3',
                 'esriSRGeoTransformation_Beduaram_To_WGS_1972_BE_1',
                 'esriSRGeoTransformation_Belge_1972_To_ETRS_1989_1',
                 'esriSRGeoTransformation_CH1903_Plus_To_ETRS_1989_1',
                 'esriSRGeoTransformation_CH1903_Plus_To_WGS_1984_1',
                 'esriSRGeoTransformation_CH1903_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Combani_1950_To_WGS_1984_1',
                 'esriSRGeoTransformation_CSG_1967_To_RGFG_1995_1',
                 'esriSRGeoTransformation_CSG_1967_To_WGS_1984_1',
                 'esriSRGeoTransformation_Datum_73_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Datum_73_To_ETRS_1989_3',
                 'esriSRGeoTransformation_Datum_73_To_WGS_1984_3',
                 'esriSRGeoTransformation_Datum_73_To_WGS_1984_4',
                 'esriSRGeoTransformation_Dealul_Piscului_1933_To_WGS_1984_1',
                 'esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_1',
                 'esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_2',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989_2',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989_3',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989_4',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989_5',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989_6',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989_7',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_1',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_2',
                 'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_3',
                 'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_4',
                 'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_5',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_10',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_4',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_5',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_6',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_7',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_8',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_9',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_25',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_26',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_27',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_28',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_29',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_30',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_31',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_32',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_33',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_34',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_36',
                 'esriSRGeoTransformation_ED_1987_To_WGS_1984_2',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_1',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_2',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_3',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_4',
                 'esriSRGeoTransformation_ELD_1979_To_WGS_1984_5',
                 'esriSRGeoTransformation_Estonia_1997_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Estonia_1997_To_WGS_1984_1',
                 'esriSRGeoTransformation_FD_1958_To_WGS_1984_2',
                 'esriSRGeoTransformation_FD_1958_To_WGS_1984_3',
                 'esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_1',
                 'esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_2',
                 'esriSRGeoTransformation_Fort_Marigot_To_WGS_1984_1',
                 'esriSRGeoTransformation_Garoua_To_WGS_1972_BE_1',
                 'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_1',
                 'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_2',
                 'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_3',
                 'esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_4',
                 'esriSRGeoTransformation_Helle_1954_To_WGS_1984_1',
                 'esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984_2',
                 'esriSRGeoTransformation_Hong_Kong_1980_To_WGS_1984_1',
                 'esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_1',
                 'esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_2',
                 'esriSRGeoTransformation_IGM_1995_To_ETRS_1989_1',
                 'esriSRGeoTransformation_IGM_1995_To_WGS_1984_1',
                 'esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_1',
                 'esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_1',
                 'esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_2',
                 'esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_1',
                 'esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_2',
                 'esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_1',
                 'esriSRGeoTransformation_IKBD_1992_To_WGS_1984_1',
                 'esriSRGeoTransformation_Indian_1975_To_WGS_1984_4',
                 'esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_2',
                 'esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_3',
                 'esriSRGeoTransformation_IRENET95_To_WGS_1984_1',
                 'esriSRGeoTransformation_ISN_1993_To_WGS_1984_1',
                 'esriSRGeoTransformation_ITRF_1988_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1989_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1990_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1991_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1992_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1993_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1994_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1996_To_ITRF_2000_1',
                 'esriSRGeoTransformation_ITRF_1997_To_ITRF_2000_1',
                 'esriSRGeoTransformation_JGD_2000_To_WGS_1984_1',
                 'esriSRGeoTransformation_KKJ_To_ETRS_1989_1',
                 'esriSRGeoTransformation_KKJ_To_WGS_1984_1',
                 'esriSRGeoTransformation_Kousseri_To_WGS_1972_BE_1',
                 'esriSRGeoTransformation_La_Canoa_To_REGVEN_1',
                 'esriSRGeoTransformation_La_Canoa_To_WGS_1984_2',
                 'esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_1',
                 'esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_2',
                 'esriSRGeoTransformation_Lisbon_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Lisbon_To_ETRS_1989_2',
                 'esriSRGeoTransformation_Lisbon_To_WGS_1984_2',
                 'esriSRGeoTransformation_Lisbon_To_WGS_1984_3',
                 'esriSRGeoTransformation_Lisbon_To_WGS_1984_4',
                 'esriSRGeoTransformation_LKS_1992_To_WGS_1984_1',
                 'esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_1',
                 'esriSRGeoTransformation_Makassar_To_WGS_1984_1',
                 'esriSRGeoTransformation_Manoca_1962_To_WGS_1972_BE_1',
                 'esriSRGeoTransformation_Manoca_1962_To_WGS_1984_1',
                 'esriSRGeoTransformation_MGI_To_ETRS_1989_1',
                 'esriSRGeoTransformation_MGI_To_ETRS_1989_2',
                 'esriSRGeoTransformation_MGI_To_ETRS_1989_3',
                 'esriSRGeoTransformation_MGI_To_WGS_1984_4',
                 'esriSRGeoTransformation_MGI_To_WGS_1984_5',
                 'esriSRGeoTransformation_MGI_To_WGS_1984_6',
                 'esriSRGeoTransformation_MGI_To_WGS_1984_7',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_10',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_4',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_6',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_7',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_8',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_9',
                 'esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_2',
                 'esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_3',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_2',
                 'esriSRGeoTransformation_Campo_Inchauspe_To_WGS_1984_2',
                 'esriSRGeoTransformation_Carthage_To_WGS_1984_2',
                 'esriSRGeoTransformation_ETRS_1989_To_WGS_1984',
                 'esriSRGeoTransformation_MPoraloko_To_WGS_1984_2',
                 'esriSRGeoTransformation_RGF_1993_To_ETRF_1989_1',
                 'esriSRGeoTransformation_RGF_1993_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Guam_1963_To_WGS_1984_2',
                 'esriSRGeoTransformation_Samoa_1962_To_WGS_1984_3',
                 'esriSRGeoTransformation_Samoa_1962_To_WGS_1984_2',
                 'esriSRGeoTransformation_St_George_To_WGS_1984_1',
                 'esriSRGeoTransformation_St_Lawrence_To_WGS_1984_1',
                 'esriSRGeoTransformation_St_Paul_To_WGS_1984_1',
                 'esriSRGeoTransformation_NAD_1983_To_HARN_NC',
                 'esriSRGeoTransformation_NAD_1983_To_HARN_PA',
                 'esriSRGeoTransformation_NAD_1983_To_HARN_SC',
                 'esriSRGeoTransformation_Old_Hawaiian_To_WGS_1984_8',
                 'esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_4',
                 'esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Saipan',
                 'esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Rota',
                 'esriSRGeoTransformation_Old_Hawaiian_To_NAD_1983_HARN_HI',
                 'esriSRGeoTransformation_ATS_1977_To_WGS_1984_1',
                 'esriSRGeoTransformation_ATS_1977_To_WGS_1984_2',
                 'esriSRGeoTransformation_NAD_1927_def_1976_To_WGS_1984_1',
                 'esriSRGeoTransformation_NAD_1927_CGQ77_To_WGS_1984_3',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_34',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_33',
                 'esriSRGeoTransformation_NAD_1983_To_WGS_1984_6',
                 'esriSRGeoTransformation_NAD_1983_To_WGS_1984_7',
                 'esriSRGeoTransformation_NAD_1983_To_WGS_1984_8',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_32',
                 'esriSRGeoTransformation_ATS_1977_To_WGS_1984_3',
                 'esriSRGeoTransformation_WGS_1984_To_NTF_NTV2']
    esriSRGeoTransformation_Batavia_Jakarta_To_Batavia = 1759
    esriSRGeoTransformation_Belge_1950_Brussels_To_Belge_1950 = 1264
    esriSRGeoTransformation_Bogota_Bogota_To_Bogota = 1755
    esriSRGeoTransformation_Greek_Athens_To_Greek = 1761
    esriSRGeoTransformation_Lisbon_Lisbon_To_Lisbon = 1756
    esriSRGeoTransformation_Makassar_Jakarta_To_Makassar = 1260
    esriSRGeoTransformation_MGI_Ferro_TO_MGI = 3895
    esriSRGeoTransformation_Monte_Mario_Rome_To_Monte_Mario = 1262
    esriSRGeoTransformation_NGO_1948_Oslo_To_NGO_1948 = 1762
    esriSRGeoTransformation_NTF_Paris_To_NTF = 1763
    esriSRGeoTransformation_PAdang_1884_Jakarta_To_Padang_1884 = 1758
    esriSRGeoTransformation_RT38_Stockholm_TO_RT38 = 1760
    esriSRGeoTransformation_Tananarive_1925_Paris_To_Tananarive_1925 = 1265
    esriSRGeoTransformation_Voirol_1875_Paris_To_Voirol_1875 = 1266
    esriSRGeoTransformation_Voirol_Unifie_1960_Paris_To_Voirol_Unifie_1960 = 8171
    esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NADCON = 1241
    esriSRGeoTransformation_NAD_1927_TO_NAD_1983_AK = 1243
    esriSRGeoTransformation_NAD_1927_TO_NAD_1983_PRVI = 108003
    esriSRGeoTransformation_OldHawaiian_TO_NAD_1983 = 1454
    esriSRGeoTransformation_StGeorge_TO_NAD_1983 = 1457
    esriSRGeoTransformation_StLawrence_TO_NAD_1983 = 1455
    esriSRGeoTransformation_StPaul_TO_NAD_1983 = 1456
    esriSRGeoTransformation_NAD_1983_TO_HARN_AL = 1474
    esriSRGeoTransformation_NAD_1983_TO_HARN_AR = 1704
    esriSRGeoTransformation_NAD_1983_TO_HARN_AZ = 1475
    esriSRGeoTransformation_NAD_1983_TO_HARN_CN = 1476
    esriSRGeoTransformation_NAD_1983_TO_HARN_CS = 1477
    esriSRGeoTransformation_NAD_1983_TO_HARN_CO = 1478
    esriSRGeoTransformation_NAD_1983_TO_HARN_GA = 1479
    esriSRGeoTransformation_NAD_1983_TO_HARN_FL = 1480
    esriSRGeoTransformation_NAD_1983_TO_HARN_HI = 1520
    esriSRGeoTransformation_NAD_1983_TO_HARN_IL = 1553
    esriSRGeoTransformation_NAD_1983_TO_HARN_IN = 1521
    esriSRGeoTransformation_NAD_1983_TO_HARN_KS = 1522
    esriSRGeoTransformation_NAD_1983_TO_HARN_KY = 1483
    esriSRGeoTransformation_NAD_1983_TO_HARN_LA = 1484
    esriSRGeoTransformation_NAD_1983_TO_HARN_MD = 1485
    esriSRGeoTransformation_NAD_1983_TO_HARN_ME = 1486
    esriSRGeoTransformation_NAD_1983_TO_HARN_MI = 1487
    esriSRGeoTransformation_NAD_1983_TO_HARN_MN = 1706
    esriSRGeoTransformation_NAD_1983_TO_HARN_MS = 1488
    esriSRGeoTransformation_NAD_1983_TO_HARN_MO = 1707
    esriSRGeoTransformation_NAD_1983_TO_HARN_EM = 1481
    esriSRGeoTransformation_NAD_1983_TO_HARN_WM = 1482
    esriSRGeoTransformation_NAD_1983_TO_HARN_NB = 1489
    esriSRGeoTransformation_NAD_1983_TO_HARN_NV = 1523
    esriSRGeoTransformation_NAD_1983_TO_HARN_NE = 1490
    esriSRGeoTransformation_NAD_1983_TO_HARN_NJ = 1554
    esriSRGeoTransformation_NAD_1983_TO_HARN_NM = 1491
    esriSRGeoTransformation_NAD_1983_TO_HARN_NY = 1492
    esriSRGeoTransformation_NAD_1983_TO_HARN_ND = 1493
    esriSRGeoTransformation_NAD_1983_TO_HARN_OH = 1524
    esriSRGeoTransformation_NAD_1983_TO_HARN_OK = 1494
    esriSRGeoTransformation_NAD_1983_TO_HARN_PV = 1495
    esriSRGeoTransformation_NAD_1983_TO_HARN_SD = 1496
    esriSRGeoTransformation_NAD_1983_TO_HARN_TN = 1497
    esriSRGeoTransformation_NAD_1983_TO_HARN_ET = 1498
    esriSRGeoTransformation_NAD_1983_TO_HARN_WT = 1499
    esriSRGeoTransformation_NAD_1983_TO_HARN_VA = 1500
    esriSRGeoTransformation_NAD_1983_TO_HARN_UT = 1525
    esriSRGeoTransformation_NAD_1983_TO_HARN_WO = 1501
    esriSRGeoTransformation_NAD_1983_TO_HARN_WV = 1526
    esriSRGeoTransformation_NAD_1983_TO_HARN_WI = 1502
    esriSRGeoTransformation_NAD_1983_TO_HARN_WY = 1503
    esriSRGeoTransformation_NAD_1927_TO_NAD_1983_NTV2_Canada = 1313
    esriSRGeoTransformation_NAD27_DEF1976_TO_NAD83_NTV2_Ontario = 1463
    esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Victoria = 1464
    esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Tasmania = 1506
    esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_Northern_Territory = 1507
    esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Queensland = 108453
    esriSRGeoTransformation_AGD84_TO_GDA94_NTV2_Western_Australia = 1593
    esriSRGeoTransformation_AGD66_TO_GDA94_NTV2_SEAustralia = 1596
    esriSRGeoTransformation_NZGD1949_TO_NZGD2000_NTV2 = 1568
    esriSRGeoTransformation_Jamaica1969_To_WGS1984_1 = 1084
    esriSRGeoTransformation_Datum73_To_WGS1984_1 = 108110
    esriSRGeoTransformation_Datum73_To_WGS1984_2 = 108120
    esriSRGeoTransformation_ED1950_To_WGS1984_PT3 = 108111
    esriSRGeoTransformation_ED1950_To_WGS1984_PT7 = 108121
    esriSRGeoTransformation_Graciosa1948_To_WGS1984_1 = 108112
    esriSRGeoTransformation_Graciosa1948_To_WGS1984_2 = 108122
    esriSRGeoTransformation_LisaboaBessel_To_WGS1984_1 = 108113
    esriSRGeoTransformation_LisaboaBessel_To_WGS1984_2 = 108123
    esriSRGeoTransformation_LisaboaHayford_To_WGS1984_1 = 108114
    esriSRGeoTransformation_LisaboaHayford_To_WGS1984_2 = 108124
    esriSRGeoTransformation_PortoSanto1936_To_WGS1984_1 = 108115
    esriSRGeoTransformation_PortoSanto1936_To_WGS1984_2 = 108125
    esriSRGeoTransformation_ObservMeteor1939_To_WGS1984_1 = 108116
    esriSRGeoTransformation_SaoBraz_To_WGS1984_1 = 108117
    esriSRGeoTransformation_SaoBraz_To_WGS1984_2 = 108127
    esriSRGeoTransformation_NTF_To_RGF1993_1 = 108130
    esriSRGeoTransformation_NZGD1949_To_NZGD2000_3Parm = 1566
    esriSRGeoTransformation_NZGD1949_To_NZGD2000_7Parm = 1701
    esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2 = 8650
    esriSRGeoTransformation_Trinidad_1903_To_WGS_1984_2 = 10085
    esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_1 = 10086
    esriSRGeoTransformation_Aratu_To_WGS_1984_5 = 10089
    esriSRGeoTransformation_Aratu_To_WGS_1984_6 = 10090
    esriSRGeoTransformation_Aratu_To_WGS_1984_7 = 10091
    esriSRGeoTransformation_Aratu_To_WGS_1984_8 = 10092
    esriSRGeoTransformation_Aratu_To_WGS_1984_9 = 10093
    esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_2 = 15701
    esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_3 = 15702
    esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_4 = 15703
    esriSRGeoTransformation_Kalianpur_1962_To_WGS_1984_5 = 15704
    esriSRGeoTransformation_Minna_To_WGS_1984_12 = 15705
    esriSRGeoTransformation_Minna_To_WGS_1984_13 = 15706
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_6 = 15707
    esriSRGeoTransformation_PRS_1992_To_WGS_1984_1 = 15708
    esriSRGeoTransformation_Nouakchott_1965_To_WGS_1984 = 15709
    esriSRGeoTransformation_Aratu_To_WGS_1984_10 = 15710
    esriSRGeoTransformation_Aratu_To_WGS_1984_11 = 15711
    esriSRGeoTransformation_Aratu_To_WGS_1984_12 = 15712
    esriSRGeoTransformation_Gan_1970_To_WGS_1984_1 = 15713
    esriSRGeoTransformation_Bogota_To_MAGNA_region_1_CF = 15714
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_1_CF = 15715
    esriSRGeoTransformation_Bogota_To_MAGNA_region_2_CF = 15716
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_2_CF = 15717
    esriSRGeoTransformation_Bogota_To_MAGNA_region_3_CF = 15718
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_3_CF = 15719
    esriSRGeoTransformation_Bogota_To_MAGNA_region_4_CF = 15720
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_4_CF = 15721
    esriSRGeoTransformation_Bogota_To_MAGNA_region_5_CF = 15722
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_5_CF = 15723
    esriSRGeoTransformation_Bogota_To_MAGNA_region_6_CF = 15724
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_6_CF = 15725
    esriSRGeoTransformation_Bogota_To_MAGNA_region_7_CF = 15726
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_7_CF = 15727
    esriSRGeoTransformation_Bogota_To_MAGNA_region_8_CF = 15728
    esriSRGeoTransformation_Bogota_To_WGS_1984_region_8_CF = 15729
    esriSRGeoTransformation_MAGNA_To_WGS_1984_1 = 15738
    esriSRGeoTransformation_Amersfoort_To_ETRS_1989_3 = 15739
    esriSRGeoTransformation_Amersfoort_To_ETRS_1989_4 = 15740
    esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_5 = 15742
    esriSRGeoTransformation_Deir_ez_Zor_To_WGS_1984_6 = 15743
    esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_6 = 15745
    esriSRGeoTransformation_Nakhl_e_Ghanem_To_WGS_1984_6 = 15746
    esriSRGeoTransformation_Belge_1972_To_ETRS_1989_2 = 15928
    esriSRGeoTransformation_Belge_1972_To_WGS_1984_3 = 15929
    esriSRGeoTransformation_St_Kitts_1955_To_WGS_1984_2 = 15750
    esriSRGeoTransformation_Reunion_1947_To_WGS_1984_2 = 15751
    esriSRGeoTransformation_Minna_To_WGS_1984_14 = 15755
    esriSRGeoTransformation_Tahiti_1979_To_RGPF_1 = 15756
    esriSRGeoTransformation_Moorea_1987_To_RGPF_1 = 15757
    esriSRGeoTransformation_Tahaa_1954_To_RGPF_1 = 15758
    esriSRGeoTransformation_Maupiti_1983_To_RGPF_1 = 15759
    esriSRGeoTransformation_Fatu_Iva_1972_To_RGPF_1 = 15760
    esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_1 = 15761
    esriSRGeoTransformation_IGN63_Hiva_Oa_To_RGPF_2 = 15762
    esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_1 = 15763
    esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_2 = 15764
    esriSRGeoTransformation_IGN72_Nuku_Hiva_To_RGPF_3 = 15765
    esriSRGeoTransformation_Tahiti_1979_To_WGS_1984_1 = 4835
    esriSRGeoTransformation_Moorea_1987_To_WGS_1984_1 = 15769
    esriSRGeoTransformation_Tahaa_1954_To_WGS_1984_2 = 15770
    esriSRGeoTransformation_Maupiti_1983_To_WGS_1984_1 = 15771
    esriSRGeoTransformation_Fatu_Iva_1972_To_WGS_1984_1 = 15772
    esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_1 = 15773
    esriSRGeoTransformation_IGN63_Hiva_Oa_To_WGS_1984_2 = 15774
    esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_2 = 15775
    esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_3 = 15776
    esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_4 = 15777
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_7 = 15778
    esriSRGeoTransformation_Gulshan_303_To_WGS_1984_1 = 15779
    esriSRGeoTransformation_POSGAR_1994_To_WGS_1984_1 = 1210
    esriSRGeoTransformation_Campo_Inchauspe_To_POSGAR_1994_1 = 15782
    esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_2 = 15783
    esriSRGeoTransformation_IGCB_1955_To_WGS_1984_1 = 15787
    esriSRGeoTransformation_AGD_1966_To_WGS_1984_16 = 15788
    esriSRGeoTransformation_AGD_1984_To_WGS_1984_8 = 15789
    esriSRGeoTransformation_MHAST_Offshore_To_WGS_1972_BE_1 = 15790
    esriSRGeoTransformation_Malongo_1987_To_WGS_1984_3 = 15791
    esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1972_BE_1 = 15792
    esriSRGeoTransformation_Barbados_1938_To_WGS_1984_1 = 15793
    esriSRGeoTransformation_Little_Cayman_1961_To_WGS_1984_1 = 15814
    esriSRGeoTransformation_Grand_Cayman_1959_To_WGS_1984_1 = 15830
    esriSRGeoTransformation_Korea_2000_To_WGS_1984_1 = 15831
    esriSRGeoTransformation_RGPF_To_WGS_1984_1 = 15832
    esriSRGeoTransformation_RGPF_To_WGS_1984_2 = 15833
    esriSRGeoTransformation_Hong_Kong_1963_67_To_WGS_1984_1 = 15842
    esriSRGeoTransformation_Pampa_del_Castillo_To_WGS_1984_1 = 15845
    esriSRGeoTransformation_Egypt_Gulf_Suez_S_650_TL_To_WGS_1984_2 = 15846
    esriSRGeoTransformation_MOP78_To_WGS_1984_2 = 15847
    esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_2 = 15848
    esriSRGeoTransformation_Beduaram_To_WGS_1984_2 = 15849
    esriSRGeoTransformation_Kerguelen_Island_1949_To_WGS_1984_1 = 15850
    esriSRGeoTransformation_Merchich_degrees_To_WGS_1984 = 108279
    esriSRGeoTransformation_NAD_1983_HARN_PACP00_MARP00_To_WGS_1984 = 108307
    esriSRGeoTransformation_AGD_1966_To_WGS_1984_12 = 1665
    esriSRGeoTransformation_AGD_1966_To_WGS_1984_13 = 1666
    esriSRGeoTransformation_AGD_1966_To_WGS_1984_14 = 1667
    esriSRGeoTransformation_AGD_1966_To_WGS_1984_15 = 1668
    esriSRGeoTransformation_AGD_1984_To_WGS_1984_7 = 1669
    esriSRGeoTransformation_Amersfoort_To_WGS_1984_2 = 1672
    esriSRGeoTransformation_Ammassalik_1958_To_WGS_1984_1 = 1800
    esriSRGeoTransformation_Australian_Antarctic_1998_To_WGS_1984_1 = 1890
    esriSRGeoTransformation_Azores_Central_1948_To_WGS_1984_1 = 1886
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_10 = 1980
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_11 = 1981
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_2 = 1972
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_3 = 1973
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_4 = 1974
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_5 = 1975
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_6 = 1976
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_7 = 1977
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_8 = 1978
    esriSRGeoTransformation_Azores_Central_1995_To_WGS_1984_9 = 1979
    esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_1 = 1887
    esriSRGeoTransformation_Azores_Occidental_1939_To_WGS_1984_2 = 1982
    esriSRGeoTransformation_Azores_Oriental_1940_To_WGS_1984_1 = 1885
    esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_2 = 1968
    esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_3 = 1969
    esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_4 = 1970
    esriSRGeoTransformation_Azores_Oriental_1995_To_WGS_1984_5 = 1971
    esriSRGeoTransformation_Batavia_To_WGS_1984_2 = 1813
    esriSRGeoTransformation_Batavia_To_WGS_1984_3 = 1814
    esriSRGeoTransformation_Beduaram_To_WGS_1972_BE_1 = 1839
    esriSRGeoTransformation_Belge_1972_To_ETRS_1989_1 = 1652
    esriSRGeoTransformation_CH1903_Plus_To_ETRS_1989_1 = 1647
    esriSRGeoTransformation_CH1903_Plus_To_WGS_1984_1 = 1676
    esriSRGeoTransformation_CH1903_To_ETRS_1989_1 = 1646
    esriSRGeoTransformation_Combani_1950_To_WGS_1984_1 = 1916
    esriSRGeoTransformation_CSG_1967_To_RGFG_1995_1 = 1908
    esriSRGeoTransformation_CSG_1967_To_WGS_1984_1 = 1906
    esriSRGeoTransformation_Datum_73_To_ETRS_1989_1 = 1657
    esriSRGeoTransformation_Datum_73_To_ETRS_1989_3 = 1992
    esriSRGeoTransformation_Datum_73_To_WGS_1984_3 = 1983
    esriSRGeoTransformation_Datum_73_To_WGS_1984_4 = 1987
    esriSRGeoTransformation_Dealul_Piscului_1933_To_WGS_1984_1 = 1995
    esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_1 = 1996
    esriSRGeoTransformation_Dealul_Piscului_1970_To_WGS_1984_2 = 1097
    esriSRGeoTransformation_DHDN_To_ETRS_1989_2 = 1776
    esriSRGeoTransformation_DHDN_To_ETRS_1989_3 = 1778
    esriSRGeoTransformation_DHDN_To_ETRS_1989_4 = 1779
    esriSRGeoTransformation_DHDN_To_ETRS_1989_5 = 1780
    esriSRGeoTransformation_DHDN_To_ETRS_1989_6 = 1781
    esriSRGeoTransformation_DHDN_To_ETRS_1989_7 = 1782
    esriSRGeoTransformation_DHDN_To_WGS_1984_1 = 1673
    esriSRGeoTransformation_DHDN_To_WGS_1984_2 = 1777
    esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_3 = 1856
    esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_4 = 1857
    esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_5 = 1858
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_10 = 1650
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_4 = 1626
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_5 = 1628
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_6 = 1630
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_7 = 1632
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_8 = 1634
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_9 = 1783
    esriSRGeoTransformation_ED_1950_To_WGS_1984_25 = 1627
    esriSRGeoTransformation_ED_1950_To_WGS_1984_26 = 1629
    esriSRGeoTransformation_ED_1950_To_WGS_1984_27 = 1631
    esriSRGeoTransformation_ED_1950_To_WGS_1984_28 = 1633
    esriSRGeoTransformation_ED_1950_To_WGS_1984_29 = 1635
    esriSRGeoTransformation_ED_1950_To_WGS_1984_30 = 1784
    esriSRGeoTransformation_ED_1950_To_WGS_1984_31 = 1810
    esriSRGeoTransformation_ED_1950_To_WGS_1984_32 = 3904
    esriSRGeoTransformation_ED_1950_To_WGS_1984_33 = 1985
    esriSRGeoTransformation_ED_1950_To_WGS_1984_34 = 1989
    esriSRGeoTransformation_ED_1950_To_WGS_1984_36 = 1998
    esriSRGeoTransformation_ED_1987_To_WGS_1984_2 = 3905
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_1 = 1859
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_2 = 1860
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_3 = 1861
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_4 = 1862
    esriSRGeoTransformation_ELD_1979_To_WGS_1984_5 = 1863
    esriSRGeoTransformation_Estonia_1997_To_ETRS_1989_1 = 1648
    esriSRGeoTransformation_Estonia_1997_To_WGS_1984_1 = 1649
    esriSRGeoTransformation_FD_1958_To_WGS_1984_2 = 1854
    esriSRGeoTransformation_FD_1958_To_WGS_1984_3 = 1855
    esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_1 = 1909
    esriSRGeoTransformation_Fort_Desaix_To_WGS_1984_2 = 1910
    esriSRGeoTransformation_Fort_Marigot_To_WGS_1984_1 = 1903
    esriSRGeoTransformation_Garoua_To_WGS_1972_BE_1 = 1805
    esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_1 = 1897
    esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_2 = 1898
    esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_3 = 1899
    esriSRGeoTransformation_Gunung_Segara_To_WGS_1984_4 = 1838
    esriSRGeoTransformation_Helle_1954_To_WGS_1984_1 = 1957
    esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984_2 = 1892
    esriSRGeoTransformation_Hong_Kong_1980_To_WGS_1984_1 = 1825
    esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_1 = 1830
    esriSRGeoTransformation_Hungarian_1972_To_WGS_1984_2 = 1831
    esriSRGeoTransformation_IGM_1995_To_ETRS_1989_1 = 1098
    esriSRGeoTransformation_IGM_1995_To_WGS_1984_1 = 1099
    esriSRGeoTransformation_IGN53_Mare_To_WGS_1984_1 = 1928
    esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_1 = 1917
    esriSRGeoTransformation_IGN56_Lifou_To_WGS_1984_2 = 1927
    esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_1 = 1962
    esriSRGeoTransformation_IGN72_Grande_Terre_To_WGS_1984_2 = 1963
    esriSRGeoTransformation_IGN72_Nuku_Hiva_To_WGS_1984_1 = 1914
    esriSRGeoTransformation_IKBD_1992_To_WGS_1984_1 = 1993
    esriSRGeoTransformation_Indian_1975_To_WGS_1984_4 = 1812
    esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_2 = 1832
    esriSRGeoTransformation_Indonesian_1974_To_WGS_1984_3 = 1833
    esriSRGeoTransformation_IRENET95_To_WGS_1984_1 = 1678
    esriSRGeoTransformation_ISN_1993_To_WGS_1984_1 = 1952
    esriSRGeoTransformation_ITRF_1988_To_ITRF_2000_1 = 1943
    esriSRGeoTransformation_ITRF_1989_To_ITRF_2000_1 = 1942
    esriSRGeoTransformation_ITRF_1990_To_ITRF_2000_1 = 1941
    esriSRGeoTransformation_ITRF_1991_To_ITRF_2000_1 = 1940
    esriSRGeoTransformation_ITRF_1992_To_ITRF_2000_1 = 1939
    esriSRGeoTransformation_ITRF_1993_To_ITRF_2000_1 = 1938
    esriSRGeoTransformation_ITRF_1994_To_ITRF_2000_1 = 1937
    esriSRGeoTransformation_ITRF_1996_To_ITRF_2000_1 = 1936
    esriSRGeoTransformation_ITRF_1997_To_ITRF_2000_1 = 1935
    esriSRGeoTransformation_JGD_2000_To_WGS_1984_1 = 1826
    esriSRGeoTransformation_KKJ_To_ETRS_1989_1 = 1638
    esriSRGeoTransformation_KKJ_To_WGS_1984_1 = 1639
    esriSRGeoTransformation_Kousseri_To_WGS_1972_BE_1 = 1806
    esriSRGeoTransformation_La_Canoa_To_REGVEN_1 = 1771
    esriSRGeoTransformation_La_Canoa_To_WGS_1984_2 = 1096
    esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_1 = 1986
    esriSRGeoTransformation_Lisbon_1890_To_WGS_1984_2 = 1990
    esriSRGeoTransformation_Lisbon_To_ETRS_1989_1 = 1655
    esriSRGeoTransformation_Lisbon_To_ETRS_1989_2 = 1997
    esriSRGeoTransformation_Lisbon_To_WGS_1984_2 = 1944
    esriSRGeoTransformation_Lisbon_To_WGS_1984_3 = 1984
    esriSRGeoTransformation_Lisbon_To_WGS_1984_4 = 1988
    esriSRGeoTransformation_LKS_1992_To_WGS_1984_1 = 1958
    esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_1 = 1642
    esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_1 = 1643
    esriSRGeoTransformation_Makassar_To_WGS_1984_1 = 1837
    esriSRGeoTransformation_Manoca_1962_To_WGS_1972_BE_1 = 1902
    esriSRGeoTransformation_Manoca_1962_To_WGS_1984_1 = 1796
    esriSRGeoTransformation_MGI_To_ETRS_1989_1 = 1619
    esriSRGeoTransformation_MGI_To_ETRS_1989_2 = 1620
    esriSRGeoTransformation_MGI_To_ETRS_1989_3 = 1785
    esriSRGeoTransformation_MGI_To_WGS_1984_4 = 1621
    esriSRGeoTransformation_MGI_To_WGS_1984_5 = 1786
    esriSRGeoTransformation_MGI_To_WGS_1984_6 = 1794
    esriSRGeoTransformation_MGI_To_WGS_1984_7 = 1795
    esriSRGeoTransformation_Minna_To_WGS_1984_10 = 1824
    esriSRGeoTransformation_Minna_To_WGS_1984_4 = 1818
    esriSRGeoTransformation_Minna_To_WGS_1984_6 = 1820
    esriSRGeoTransformation_Minna_To_WGS_1984_7 = 1821
    esriSRGeoTransformation_Minna_To_WGS_1984_8 = 1822
    esriSRGeoTransformation_Minna_To_WGS_1984_9 = 1823
    esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_1 = 1659
    esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_2 = 1661
    esriSRGeoTransformation_Monte_Mario_To_ETRS_1989_3 = 1663
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_2 = 1662
    esriSRGeoTransformation_Campo_Inchauspe_To_WGS_1984_2 = 1527
    esriSRGeoTransformation_Carthage_To_WGS_1984_2 = 1538
    esriSRGeoTransformation_ETRS_1989_To_WGS_1984 = 1149
    esriSRGeoTransformation_MPoraloko_To_WGS_1984_2 = 1532
    esriSRGeoTransformation_RGF_1993_To_ETRF_1989_1 = 108199
    esriSRGeoTransformation_RGF_1993_To_ETRS_1989_1 = 1591
    esriSRGeoTransformation_Guam_1963_To_WGS_1984_2 = 1069
    esriSRGeoTransformation_Samoa_1962_To_WGS_1984_3 = 1695
    esriSRGeoTransformation_Samoa_1962_To_WGS_1984_2 = 1694
    esriSRGeoTransformation_St_George_To_WGS_1984_1 = 1698
    esriSRGeoTransformation_St_Lawrence_To_WGS_1984_1 = 1699
    esriSRGeoTransformation_St_Paul_To_WGS_1984_1 = 1700
    esriSRGeoTransformation_NAD_1983_To_HARN_NC = 15834
    esriSRGeoTransformation_NAD_1983_To_HARN_PA = 15838
    esriSRGeoTransformation_NAD_1983_To_HARN_SC = 15836
    esriSRGeoTransformation_Old_Hawaiian_To_WGS_1984_8 = 15840
    esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_4 = 15841
    esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Saipan = 108304
    esriSRGeoTransformation_Guam_1963_To_NAD_1983_HARN_Rota = 108305
    esriSRGeoTransformation_Old_Hawaiian_To_NAD_1983_HARN_HI = 108306
    esriSRGeoTransformation_ATS_1977_To_WGS_1984_1 = 1688
    esriSRGeoTransformation_ATS_1977_To_WGS_1984_2 = 1689
    esriSRGeoTransformation_NAD_1927_def_1976_To_WGS_1984_1 = 1690
    esriSRGeoTransformation_NAD_1927_CGQ77_To_WGS_1984_3 = 1691
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_34 = 1692
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_33 = 1693
    esriSRGeoTransformation_NAD_1983_To_WGS_1984_6 = 1696
    esriSRGeoTransformation_NAD_1983_To_WGS_1984_7 = 1697
    esriSRGeoTransformation_NAD_1983_To_WGS_1984_8 = 1702
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_32 = 1703
    esriSRGeoTransformation_ATS_1977_To_WGS_1984_3 = 1851
    esriSRGeoTransformation_WGS_1984_To_NTF_NTV2 = 15960

class esriSRUnit2Type(Enumeration):
    __slots__ = ['esriSRUnit_British1936Foot',
                 'esriSRUnit_GoldCoastFoot',
                 'esriSRUnit_InternationalChain',
                 'esriSRUnit_InternationalLink',
                 'esriSRUnit_InternationalYard',
                 'esriSRUnit_StatuteMile',
                 'esriSRUnit_SurveyYard',
                 'esriSRUnit_50KilometerLength',
                 'esriSRUnit_150KilometerLength',
                 'esriSRUnit_Decimeter',
                 'esriSRUnit_Centimeter',
                 'esriSRUnit_Millimeter',
                 'esriSRUnit_InternationalInch',
                 'esriSRUnit_USsurveyInch',
                 'esriSRUnit_InternationalRod',
                 'esriSRUnit_USsurveyRod',
                 'esriSRUnit_USNauticalMile',
                 'esriSRUnit_UKNauticalMile']
    esriSRUnit_British1936Foot = 9095
    esriSRUnit_GoldCoastFoot = 9094
    esriSRUnit_InternationalChain = 9097
    esriSRUnit_InternationalLink = 9098
    esriSRUnit_InternationalYard = 9096
    esriSRUnit_StatuteMile = 9093
    esriSRUnit_SurveyYard = 109002
    esriSRUnit_50KilometerLength = 109030
    esriSRUnit_150KilometerLength = 109031
    esriSRUnit_Decimeter = 109005
    esriSRUnit_Centimeter = 109006
    esriSRUnit_Millimeter = 109007
    esriSRUnit_InternationalInch = 109008
    esriSRUnit_USsurveyInch = 109009
    esriSRUnit_InternationalRod = 109010
    esriSRUnit_USsurveyRod = 109011
    esriSRUnit_USNauticalMile = 109012
    esriSRUnit_UKNauticalMile = 109013

class esriSRSpheroid2Type(Enumeration):
    __slots__ = ['esriSRSpheroid_SphereGRS1980_Authalic',
                 'esriSRSpheroid_Xian1980',
                 'esriSRSpheroid_SphereEMEP',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaAnoka',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaBecker',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiNorth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiSouth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaBenton',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaBigStone',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaBlueEarth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaBrown',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCarlton',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCarver',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCassNorth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCassSouth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaChippewa',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaChisago',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCookNorth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCookSouth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCottonwood',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaCrowWing',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaDakota',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaDodge',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaDouglas',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaFaribault',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaFillmore',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaFreeborn',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaGoodhue',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaGrant',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaHennepin',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaHouston',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaIsanti',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaItascaNorth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaItascaSouth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaJackson',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaKanabec',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaKandiyohi',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaKittson',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaKoochiching',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaLacQuiParle',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsNorth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsSouth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaLeSueur',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaLincoln',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaLyon',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMcLeod',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMahnomen',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMarshall',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMartin',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMeeker',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMorrison',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMower',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaMurray',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaNicollet',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaNobles',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaNorman',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaOlmsted',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaOttertail',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaPennington',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaPine',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaPipestone',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaPolk',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaPope',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaRamsey',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaRedLake',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaRedwood',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaRenville',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaRice',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaRock',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaRoseau',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaStLouisNorth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaStLouisCentral',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaStLouisSouth',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaScott',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaSherburne',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaSibley',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaStearns',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaSteele',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaStevens',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaSwift',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaTodd',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaTraverse',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaWabasha',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaWadena',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaWaseca',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaWatonwan',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaWinona',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaWright',
                 'esriSRSpheroid_GRS1980Adj_MinnesotaYellowMedicine',
                 'esriSRSpheroid_GRS1980Adj_WisconsinAshland',
                 'esriSRSpheroid_GRS1980Adj_WisconsinBarron',
                 'esriSRSpheroid_GRS1980Adj_WisconsinBayfield',
                 'esriSRSpheroid_GRS1980Adj_WisconsinBrown',
                 'esriSRSpheroid_GRS1980Adj_WisconsinBuffalo',
                 'esriSRSpheroid_GRS1980Adj_WisconsinBurnett',
                 'esriSRSpheroid_GRS1980Adj_WisconsinChippewa',
                 'esriSRSpheroid_GRS1980Adj_WisconsinClark',
                 'esriSRSpheroid_GRS1980Adj_WisconsinColumbia',
                 'esriSRSpheroid_GRS1980Adj_WisconsinCrawford',
                 'esriSRSpheroid_GRS1980Adj_WisconsinDane',
                 'esriSRSpheroid_GRS1980Adj_WisconsinDoor',
                 'esriSRSpheroid_GRS1980Adj_WisconsinDouglas',
                 'esriSRSpheroid_GRS1980Adj_WisconsinDunn',
                 'esriSRSpheroid_GRS1980Adj_WisconsinEauClaire',
                 'esriSRSpheroid_GRS1980Adj_WisconsinFlorence',
                 'esriSRSpheroid_GRS1980Adj_WisconsinForest',
                 'esriSRSpheroid_GRS1980Adj_WisconsinGrant',
                 'esriSRSpheroid_GRS1980Adj_WisconsinIowa',
                 'esriSRSpheroid_GRS1980Adj_WisconsinIron',
                 'esriSRSpheroid_GRS1980Adj_WisconsinJackson',
                 'esriSRSpheroid_GRS1980Adj_WisconsinLaCrosse',
                 'esriSRSpheroid_GRS1980Adj_WisconsinLanglade',
                 'esriSRSpheroid_GRS1980Adj_WisconsinLincoln',
                 'esriSRSpheroid_GRS1980Adj_WisconsinMarathon',
                 'esriSRSpheroid_GRS1980Adj_WisconsinMarinette',
                 'esriSRSpheroid_GRS1980Adj_WisconsinMenominee',
                 'esriSRSpheroid_GRS1980Adj_WisconsinMonroe',
                 'esriSRSpheroid_GRS1980Adj_WisconsinOconto',
                 'esriSRSpheroid_GRS1980Adj_WisconsinOneida',
                 'esriSRSpheroid_GRS1980Adj_WisconsinPolk',
                 'esriSRSpheroid_GRS1980Adj_WisconsinPortage',
                 'esriSRSpheroid_GRS1980Adj_WisconsinPrice',
                 'esriSRSpheroid_GRS1980Adj_WisconsinRichland',
                 'esriSRSpheroid_GRS1980Adj_WisconsinRock',
                 'esriSRSpheroid_GRS1980Adj_WisconsinRusk',
                 'esriSRSpheroid_GRS1980Adj_WisconsinStCroix',
                 'esriSRSpheroid_GRS1980Adj_WisconsinSauk',
                 'esriSRSpheroid_GRS1980Adj_WisconsinSawyer',
                 'esriSRSpheroid_GRS1980Adj_WisconsinShawano',
                 'esriSRSpheroid_GRS1980Adj_WisconsinTaylor',
                 'esriSRSpheroid_GRS1980Adj_WisconsinTrempealeau',
                 'esriSRSpheroid_GRS1980Adj_WisconsinVernon',
                 'esriSRSpheroid_GRS1980Adj_WisconsinVilas',
                 'esriSRSpheroid_GRS1980Adj_WisconsinWalworth',
                 'esriSRSpheroid_GRS1980Adj_WisconsinWashburn',
                 'esriSRSpheroid_GRS1980Adj_WisconsinWashington',
                 'esriSRSpheroid_GRS1980Adj_WisconsinWaukesha',
                 'esriSRSpheroid_GRS1980Adj_WisconsinWaupaca',
                 'esriSRSpheroid_GRS1980Adj_WisconsinWaushara',
                 'esriSRSpheroid_GRS1980Adj_WisconsinWood',
                 'esriSRSpheroid_GRS1980Adj_WisconsinAdamsJuneau',
                 'esriSRSpheroid_GRS1980Adj_WisconsinGreenLafayette',
                 'esriSRSpheroid_GRS1980Adj_WisconsinGreenLakeMarquette',
                 'esriSRSpheroid_GRS1980Adj_WisconsinDodgeJefferson',
                 'esriSRSpheroid_GRS1980Adj_WisconsinPepinPierce',
                 'esriSRSpheroid_GRS1980Adj_WICalumetFondduLacOutagamieWinnebago',
                 'esriSRSpheroid_GRS1980Adj_WIKenoshaMilwaukeeOzaukeeRacine',
                 'esriSRSpheroid_GRS1980Adj_WIKewauneeManitowocSheboygan',
                 'esriSRSpheroid_Mercury',
                 'esriSRSpheroid_Venus1985',
                 'esriSRSpheroid_Venus2000',
                 'esriSRSpheroid_TheMoon',
                 'esriSRSpheroid_Mars1979',
                 'esriSRSpheroid_Mars2000',
                 'esriSRSpheroid_MarsDeimos',
                 'esriSRSpheroid_MarsPhobos',
                 'esriSRSpheroid_Jupiter',
                 'esriSRSpheroid_JupiterAdrastea',
                 'esriSRSpheroid_JupiterAmalthea',
                 'esriSRSpheroid_JupiterAnanke',
                 'esriSRSpheroid_JupiterCallisto',
                 'esriSRSpheroid_JupiterCarme',
                 'esriSRSpheroid_JupiterElara',
                 'esriSRSpheroid_JupiterEuropa',
                 'esriSRSpheroid_JupiterGanymede',
                 'esriSRSpheroid_JupiterHimalia',
                 'esriSRSpheroid_JupiterIo',
                 'esriSRSpheroid_JupiterLeda',
                 'esriSRSpheroid_JupiterLysithea',
                 'esriSRSpheroid_JupiterMetis',
                 'esriSRSpheroid_JupiterPasiphae',
                 'esriSRSpheroid_JupiterSinope',
                 'esriSRSpheroid_JupiterThebe',
                 'esriSRSpheroid_Saturn',
                 'esriSRSpheroid_SaturnAtlas',
                 'esriSRSpheroid_SaturnCalypso',
                 'esriSRSpheroid_SaturnDione',
                 'esriSRSpheroid_SaturnEnceladus',
                 'esriSRSpheroid_SaturnEpimetheus',
                 'esriSRSpheroid_SaturnHelene',
                 'esriSRSpheroid_SaturnHyperion',
                 'esriSRSpheroid_SaturnIapetus',
                 'esriSRSpheroid_SaturnJanus',
                 'esriSRSpheroid_SaturnMimas',
                 'esriSRSpheroid_SaturnPan',
                 'esriSRSpheroid_SaturnPandora',
                 'esriSRSpheroid_SaturnPhoebe',
                 'esriSRSpheroid_SaturnPrometheus',
                 'esriSRSpheroid_SaturnRhea',
                 'esriSRSpheroid_SaturnTelesto',
                 'esriSRSpheroid_SaturnTethys',
                 'esriSRSpheroid_SaturnTitan',
                 'esriSRSpheroid_Uranus',
                 'esriSRSpheroid_UranusAriel',
                 'esriSRSpheroid_UranusBelinda',
                 'esriSRSpheroid_UranusBianca',
                 'esriSRSpheroid_UranusCordelia',
                 'esriSRSpheroid_UranusCressida',
                 'esriSRSpheroid_UranusDesdemona',
                 'esriSRSpheroid_UranusJuliet',
                 'esriSRSpheroid_UranusMiranda',
                 'esriSRSpheroid_UranusOberon',
                 'esriSRSpheroid_UranusOphelia',
                 'esriSRSpheroid_UranusPortia',
                 'esriSRSpheroid_UranusPuck',
                 'esriSRSpheroid_UranusRosalind',
                 'esriSRSpheroid_UranusTitania',
                 'esriSRSpheroid_UranusUmbriel',
                 'esriSRSpheroid_Neptune',
                 'esriSRSpheroid_NeptuneDespina',
                 'esriSRSpheroid_NeptuneGalatea',
                 'esriSRSpheroid_NeptuneLarissa',
                 'esriSRSpheroid_NeptuneNaiad',
                 'esriSRSpheroid_NeptuneNereid',
                 'esriSRSpheroid_NeptuneProteus',
                 'esriSRSpheroid_NeptuneThalassa',
                 'esriSRSpheroid_NeptuneTriton',
                 'esriSRSpheroid_Pluto',
                 'esriSRSpheroid_PlutoCharon']
    esriSRSpheroid_SphereGRS1980_Authalic = 7048
    esriSRSpheroid_Xian1980 = 7049
    esriSRSpheroid_SphereEMEP = 107009
    esriSRSpheroid_GRS1980Adj_MinnesotaAnoka = 107700
    esriSRSpheroid_GRS1980Adj_MinnesotaBecker = 107701
    esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiNorth = 107702
    esriSRSpheroid_GRS1980Adj_MinnesotaBeltramiSouth = 107703
    esriSRSpheroid_GRS1980Adj_MinnesotaBenton = 107704
    esriSRSpheroid_GRS1980Adj_MinnesotaBigStone = 107705
    esriSRSpheroid_GRS1980Adj_MinnesotaBlueEarth = 107706
    esriSRSpheroid_GRS1980Adj_MinnesotaBrown = 107707
    esriSRSpheroid_GRS1980Adj_MinnesotaCarlton = 107708
    esriSRSpheroid_GRS1980Adj_MinnesotaCarver = 107709
    esriSRSpheroid_GRS1980Adj_MinnesotaCassNorth = 107710
    esriSRSpheroid_GRS1980Adj_MinnesotaCassSouth = 107711
    esriSRSpheroid_GRS1980Adj_MinnesotaChippewa = 107712
    esriSRSpheroid_GRS1980Adj_MinnesotaChisago = 107713
    esriSRSpheroid_GRS1980Adj_MinnesotaCookNorth = 107714
    esriSRSpheroid_GRS1980Adj_MinnesotaCookSouth = 107715
    esriSRSpheroid_GRS1980Adj_MinnesotaCottonwood = 107716
    esriSRSpheroid_GRS1980Adj_MinnesotaCrowWing = 107717
    esriSRSpheroid_GRS1980Adj_MinnesotaDakota = 107718
    esriSRSpheroid_GRS1980Adj_MinnesotaDodge = 107719
    esriSRSpheroid_GRS1980Adj_MinnesotaDouglas = 107720
    esriSRSpheroid_GRS1980Adj_MinnesotaFaribault = 107721
    esriSRSpheroid_GRS1980Adj_MinnesotaFillmore = 107722
    esriSRSpheroid_GRS1980Adj_MinnesotaFreeborn = 107723
    esriSRSpheroid_GRS1980Adj_MinnesotaGoodhue = 107724
    esriSRSpheroid_GRS1980Adj_MinnesotaGrant = 107725
    esriSRSpheroid_GRS1980Adj_MinnesotaHennepin = 107726
    esriSRSpheroid_GRS1980Adj_MinnesotaHouston = 107727
    esriSRSpheroid_GRS1980Adj_MinnesotaIsanti = 107728
    esriSRSpheroid_GRS1980Adj_MinnesotaItascaNorth = 107729
    esriSRSpheroid_GRS1980Adj_MinnesotaItascaSouth = 107730
    esriSRSpheroid_GRS1980Adj_MinnesotaJackson = 107731
    esriSRSpheroid_GRS1980Adj_MinnesotaKanabec = 107732
    esriSRSpheroid_GRS1980Adj_MinnesotaKandiyohi = 107733
    esriSRSpheroid_GRS1980Adj_MinnesotaKittson = 107734
    esriSRSpheroid_GRS1980Adj_MinnesotaKoochiching = 107735
    esriSRSpheroid_GRS1980Adj_MinnesotaLacQuiParle = 107736
    esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsNorth = 107737
    esriSRSpheroid_GRS1980Adj_MinnesotaLake_of_theWoodsSouth = 107738
    esriSRSpheroid_GRS1980Adj_MinnesotaLeSueur = 107739
    esriSRSpheroid_GRS1980Adj_MinnesotaLincoln = 107740
    esriSRSpheroid_GRS1980Adj_MinnesotaLyon = 107741
    esriSRSpheroid_GRS1980Adj_MinnesotaMcLeod = 107742
    esriSRSpheroid_GRS1980Adj_MinnesotaMahnomen = 107743
    esriSRSpheroid_GRS1980Adj_MinnesotaMarshall = 107744
    esriSRSpheroid_GRS1980Adj_MinnesotaMartin = 107745
    esriSRSpheroid_GRS1980Adj_MinnesotaMeeker = 107746
    esriSRSpheroid_GRS1980Adj_MinnesotaMorrison = 107747
    esriSRSpheroid_GRS1980Adj_MinnesotaMower = 107748
    esriSRSpheroid_GRS1980Adj_MinnesotaMurray = 107749
    esriSRSpheroid_GRS1980Adj_MinnesotaNicollet = 107750
    esriSRSpheroid_GRS1980Adj_MinnesotaNobles = 107751
    esriSRSpheroid_GRS1980Adj_MinnesotaNorman = 107752
    esriSRSpheroid_GRS1980Adj_MinnesotaOlmsted = 107753
    esriSRSpheroid_GRS1980Adj_MinnesotaOttertail = 107754
    esriSRSpheroid_GRS1980Adj_MinnesotaPennington = 107755
    esriSRSpheroid_GRS1980Adj_MinnesotaPine = 107756
    esriSRSpheroid_GRS1980Adj_MinnesotaPipestone = 107757
    esriSRSpheroid_GRS1980Adj_MinnesotaPolk = 107758
    esriSRSpheroid_GRS1980Adj_MinnesotaPope = 107759
    esriSRSpheroid_GRS1980Adj_MinnesotaRamsey = 107760
    esriSRSpheroid_GRS1980Adj_MinnesotaRedLake = 107761
    esriSRSpheroid_GRS1980Adj_MinnesotaRedwood = 107762
    esriSRSpheroid_GRS1980Adj_MinnesotaRenville = 107763
    esriSRSpheroid_GRS1980Adj_MinnesotaRice = 107764
    esriSRSpheroid_GRS1980Adj_MinnesotaRock = 107765
    esriSRSpheroid_GRS1980Adj_MinnesotaRoseau = 107766
    esriSRSpheroid_GRS1980Adj_MinnesotaStLouisNorth = 107767
    esriSRSpheroid_GRS1980Adj_MinnesotaStLouisCentral = 107768
    esriSRSpheroid_GRS1980Adj_MinnesotaStLouisSouth = 107769
    esriSRSpheroid_GRS1980Adj_MinnesotaScott = 107770
    esriSRSpheroid_GRS1980Adj_MinnesotaSherburne = 107771
    esriSRSpheroid_GRS1980Adj_MinnesotaSibley = 107772
    esriSRSpheroid_GRS1980Adj_MinnesotaStearns = 107773
    esriSRSpheroid_GRS1980Adj_MinnesotaSteele = 107774
    esriSRSpheroid_GRS1980Adj_MinnesotaStevens = 107775
    esriSRSpheroid_GRS1980Adj_MinnesotaSwift = 107776
    esriSRSpheroid_GRS1980Adj_MinnesotaTodd = 107777
    esriSRSpheroid_GRS1980Adj_MinnesotaTraverse = 107778
    esriSRSpheroid_GRS1980Adj_MinnesotaWabasha = 107779
    esriSRSpheroid_GRS1980Adj_MinnesotaWadena = 107780
    esriSRSpheroid_GRS1980Adj_MinnesotaWaseca = 107781
    esriSRSpheroid_GRS1980Adj_MinnesotaWatonwan = 107782
    esriSRSpheroid_GRS1980Adj_MinnesotaWinona = 107783
    esriSRSpheroid_GRS1980Adj_MinnesotaWright = 107784
    esriSRSpheroid_GRS1980Adj_MinnesotaYellowMedicine = 107785
    esriSRSpheroid_GRS1980Adj_WisconsinAshland = 107800
    esriSRSpheroid_GRS1980Adj_WisconsinBarron = 107801
    esriSRSpheroid_GRS1980Adj_WisconsinBayfield = 107802
    esriSRSpheroid_GRS1980Adj_WisconsinBrown = 107803
    esriSRSpheroid_GRS1980Adj_WisconsinBuffalo = 107804
    esriSRSpheroid_GRS1980Adj_WisconsinBurnett = 107805
    esriSRSpheroid_GRS1980Adj_WisconsinChippewa = 107806
    esriSRSpheroid_GRS1980Adj_WisconsinClark = 107807
    esriSRSpheroid_GRS1980Adj_WisconsinColumbia = 107808
    esriSRSpheroid_GRS1980Adj_WisconsinCrawford = 107809
    esriSRSpheroid_GRS1980Adj_WisconsinDane = 107810
    esriSRSpheroid_GRS1980Adj_WisconsinDoor = 107811
    esriSRSpheroid_GRS1980Adj_WisconsinDouglas = 107812
    esriSRSpheroid_GRS1980Adj_WisconsinDunn = 107813
    esriSRSpheroid_GRS1980Adj_WisconsinEauClaire = 107814
    esriSRSpheroid_GRS1980Adj_WisconsinFlorence = 107815
    esriSRSpheroid_GRS1980Adj_WisconsinForest = 107816
    esriSRSpheroid_GRS1980Adj_WisconsinGrant = 107817
    esriSRSpheroid_GRS1980Adj_WisconsinIowa = 107818
    esriSRSpheroid_GRS1980Adj_WisconsinIron = 107819
    esriSRSpheroid_GRS1980Adj_WisconsinJackson = 107820
    esriSRSpheroid_GRS1980Adj_WisconsinLaCrosse = 107821
    esriSRSpheroid_GRS1980Adj_WisconsinLanglade = 107822
    esriSRSpheroid_GRS1980Adj_WisconsinLincoln = 107823
    esriSRSpheroid_GRS1980Adj_WisconsinMarathon = 107824
    esriSRSpheroid_GRS1980Adj_WisconsinMarinette = 107825
    esriSRSpheroid_GRS1980Adj_WisconsinMenominee = 107826
    esriSRSpheroid_GRS1980Adj_WisconsinMonroe = 107827
    esriSRSpheroid_GRS1980Adj_WisconsinOconto = 107828
    esriSRSpheroid_GRS1980Adj_WisconsinOneida = 107829
    esriSRSpheroid_GRS1980Adj_WisconsinPolk = 107830
    esriSRSpheroid_GRS1980Adj_WisconsinPortage = 107831
    esriSRSpheroid_GRS1980Adj_WisconsinPrice = 107832
    esriSRSpheroid_GRS1980Adj_WisconsinRichland = 107833
    esriSRSpheroid_GRS1980Adj_WisconsinRock = 107834
    esriSRSpheroid_GRS1980Adj_WisconsinRusk = 107835
    esriSRSpheroid_GRS1980Adj_WisconsinStCroix = 107836
    esriSRSpheroid_GRS1980Adj_WisconsinSauk = 107837
    esriSRSpheroid_GRS1980Adj_WisconsinSawyer = 107838
    esriSRSpheroid_GRS1980Adj_WisconsinShawano = 107839
    esriSRSpheroid_GRS1980Adj_WisconsinTaylor = 107840
    esriSRSpheroid_GRS1980Adj_WisconsinTrempealeau = 107841
    esriSRSpheroid_GRS1980Adj_WisconsinVernon = 107842
    esriSRSpheroid_GRS1980Adj_WisconsinVilas = 107843
    esriSRSpheroid_GRS1980Adj_WisconsinWalworth = 107844
    esriSRSpheroid_GRS1980Adj_WisconsinWashburn = 107845
    esriSRSpheroid_GRS1980Adj_WisconsinWashington = 107846
    esriSRSpheroid_GRS1980Adj_WisconsinWaukesha = 107847
    esriSRSpheroid_GRS1980Adj_WisconsinWaupaca = 107848
    esriSRSpheroid_GRS1980Adj_WisconsinWaushara = 107849
    esriSRSpheroid_GRS1980Adj_WisconsinWood = 107850
    esriSRSpheroid_GRS1980Adj_WisconsinAdamsJuneau = 107851
    esriSRSpheroid_GRS1980Adj_WisconsinGreenLafayette = 107852
    esriSRSpheroid_GRS1980Adj_WisconsinGreenLakeMarquette = 107853
    esriSRSpheroid_GRS1980Adj_WisconsinDodgeJefferson = 107854
    esriSRSpheroid_GRS1980Adj_WisconsinPepinPierce = 107855
    esriSRSpheroid_GRS1980Adj_WICalumetFondduLacOutagamieWinnebago = 107856
    esriSRSpheroid_GRS1980Adj_WIKenoshaMilwaukeeOzaukeeRacine = 107857
    esriSRSpheroid_GRS1980Adj_WIKewauneeManitowocSheboygan = 107858
    esriSRSpheroid_Mercury = 107900
    esriSRSpheroid_Venus1985 = 107901
    esriSRSpheroid_Venus2000 = 107902
    esriSRSpheroid_TheMoon = 107903
    esriSRSpheroid_Mars1979 = 107904
    esriSRSpheroid_Mars2000 = 107905
    esriSRSpheroid_MarsDeimos = 107906
    esriSRSpheroid_MarsPhobos = 107907
    esriSRSpheroid_Jupiter = 107908
    esriSRSpheroid_JupiterAdrastea = 107909
    esriSRSpheroid_JupiterAmalthea = 107910
    esriSRSpheroid_JupiterAnanke = 107911
    esriSRSpheroid_JupiterCallisto = 107912
    esriSRSpheroid_JupiterCarme = 107913
    esriSRSpheroid_JupiterElara = 107914
    esriSRSpheroid_JupiterEuropa = 107915
    esriSRSpheroid_JupiterGanymede = 107916
    esriSRSpheroid_JupiterHimalia = 107917
    esriSRSpheroid_JupiterIo = 107918
    esriSRSpheroid_JupiterLeda = 107919
    esriSRSpheroid_JupiterLysithea = 107920
    esriSRSpheroid_JupiterMetis = 107921
    esriSRSpheroid_JupiterPasiphae = 107922
    esriSRSpheroid_JupiterSinope = 107923
    esriSRSpheroid_JupiterThebe = 107924
    esriSRSpheroid_Saturn = 107925
    esriSRSpheroid_SaturnAtlas = 107926
    esriSRSpheroid_SaturnCalypso = 107927
    esriSRSpheroid_SaturnDione = 107928
    esriSRSpheroid_SaturnEnceladus = 107929
    esriSRSpheroid_SaturnEpimetheus = 107930
    esriSRSpheroid_SaturnHelene = 107931
    esriSRSpheroid_SaturnHyperion = 107932
    esriSRSpheroid_SaturnIapetus = 107933
    esriSRSpheroid_SaturnJanus = 107934
    esriSRSpheroid_SaturnMimas = 107935
    esriSRSpheroid_SaturnPan = 107936
    esriSRSpheroid_SaturnPandora = 107937
    esriSRSpheroid_SaturnPhoebe = 107938
    esriSRSpheroid_SaturnPrometheus = 107939
    esriSRSpheroid_SaturnRhea = 107940
    esriSRSpheroid_SaturnTelesto = 107941
    esriSRSpheroid_SaturnTethys = 107942
    esriSRSpheroid_SaturnTitan = 107943
    esriSRSpheroid_Uranus = 107944
    esriSRSpheroid_UranusAriel = 107945
    esriSRSpheroid_UranusBelinda = 107946
    esriSRSpheroid_UranusBianca = 107947
    esriSRSpheroid_UranusCordelia = 107948
    esriSRSpheroid_UranusCressida = 107949
    esriSRSpheroid_UranusDesdemona = 107950
    esriSRSpheroid_UranusJuliet = 107951
    esriSRSpheroid_UranusMiranda = 107952
    esriSRSpheroid_UranusOberon = 107953
    esriSRSpheroid_UranusOphelia = 107954
    esriSRSpheroid_UranusPortia = 107955
    esriSRSpheroid_UranusPuck = 107956
    esriSRSpheroid_UranusRosalind = 107957
    esriSRSpheroid_UranusTitania = 107958
    esriSRSpheroid_UranusUmbriel = 107959
    esriSRSpheroid_Neptune = 107960
    esriSRSpheroid_NeptuneDespina = 107961
    esriSRSpheroid_NeptuneGalatea = 107962
    esriSRSpheroid_NeptuneLarissa = 107963
    esriSRSpheroid_NeptuneNaiad = 107964
    esriSRSpheroid_NeptuneNereid = 107965
    esriSRSpheroid_NeptuneProteus = 107966
    esriSRSpheroid_NeptuneThalassa = 107967
    esriSRSpheroid_NeptuneTriton = 107968
    esriSRSpheroid_Pluto = 107969
    esriSRSpheroid_PlutoCharon = 107970

class esriSRDatum3Type(Enumeration):
    __slots__ = ['esriSRDatum_Albanian1987',
                 'esriSRDatum_Ammassalik1958',
                 'esriSRDatum_AutralianAntarctic1998',
                 'esriSRDatum_AzoresCentralIslands1948',
                 'esriSRDatum_AzoresCentralIslands1995',
                 'esriSRDatum_AzoresOccidentalIslands1939',
                 'esriSRDatum_AzoresOrientalIslands1940',
                 'esriSRDatum_AzoresOrientalIslands1995',
                 'esriSRDatum_Combani1950',
                 'esriSRDatum_CentreSpatialGuyanais1967',
                 'esriSRDatum_Douala1948',
                 'esriSRDatum_Egypt1930',
                 'esriSRDatum_Estonia1997',
                 'esriSRDatum_EuropeanTerrestrialRefSystem1989',
                 'esriSRDatum_FortDesaix',
                 'esriSRDatum_FortMarigot',
                 'esriSRDatum_GrandComoros',
                 'esriSRDatum_Helle1954',
                 'esriSRDatum_IGM1995',
                 'esriSRDatum_IGN53Mare',
                 'esriSRDatum_IGN56Lifou',
                 'esriSRDatum_IGN72GrandeTerre',
                 'esriSRDatum_IGN72NukuHiva',
                 'esriSRDatum_IraqKuwaitBoundaryDatum1992',
                 'esriSRDatum_IslandsNetwork1993',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1988',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1989',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1990',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1991',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1992',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1993',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1994',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1996',
                 'esriSRDatum_IERSTerrestrialReferenceFrame1997',
                 'esriSRDatum_IERSTerrestrialReferenceFrame2000',
                 'esriSRDatum_K0_1949',
                 'esriSRDatum_Kousseri',
                 'esriSRDatum_Latvia1992',
                 'esriSRDatum_Lisbon1890',
                 'esriSRDatum_Luxembourg1930',
                 'esriSRDatum_Madeira1936',
                 'esriSRDatum_Manoca1962',
                 'esriSRDatum_MOP78',
                 'esriSRDatum_NEA74Noumea',
                 'esriSRDatum_OSNI_1952',
                 'esriSRDatum_Petrels1972',
                 'esriSRDatum_Piton_des_Neiges',
                 'esriSRDatum_PointeGeologiePerroud1950',
                 'esriSRDatum_PortoSanto1995',
                 'esriSRDatum_POSGAR1998',
                 'esriSRDatum_Pulkovo1942_adj58',
                 'esriSRDatum_Pulkovo1942_adj83',
                 'esriSRDatum_QatarNationalDatum1995',
                 'esriSRDatum_Qornoq1927',
                 'esriSRDatum_Reykjavik1900',
                 'esriSRDatum_ReseauGeodesiqueFrancaisGuyane1995',
                 'esriSRDatum_ReseauGeodesiqueNouvelleCaledonie1991',
                 'esriSRDatum_ReseauGeodesique_de_la_Reunion1992',
                 'esriSRDatum_Reseau_de_Reference_des_AntillesFrancaises1991',
                 'esriSRDatum_SainteAnne',
                 'esriSRDatum_SaintPierre_et_Miquelon1950',
                 'esriSRDatum_Scoresbysund1952',
                 'esriSRDatum_ST71Belep',
                 'esriSRDatum_ST84_Ile_des_Pins',
                 'esriSRDatum_ST87Ouvea',
                 'esriSRDatum_SWEREF99',
                 'esriSRDatum_Tahaa',
                 'esriSRDatum_Tahiti',
                 'esriSRDatum_Xian1980',
                 'esriSRDatum_Bermuda2000',
                 'esriSRDatum_ChathamIslands1979',
                 'esriSRDatum_ObservatorioMeteorologico1965',
                 'esriSRDatum_Roma1940',
                 'esriSRDatum_EMEP',
                 'esriSRDatum_Jordan',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaAnoka',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaBecker',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiNorth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiSouth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaBenton',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaBigStone',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaBlueEarth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaBrown',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCarlton',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCarver',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCassNorth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCassSouth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaChippewa',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaChisago',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCookNorth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCookSouth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCottonwood',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaCrowWing',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaDakota',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaDodge',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaDouglas',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaFaribault',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaFillmore',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaFreeborn',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaGoodhue',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaGrant',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaHennepin',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaHouston',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaIsanti',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaItascaNorth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaItascaSouth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaJackson',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaKanabec',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaKandiyohi',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaKittson',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaKoochiching',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaLacQuiParle',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaLeSueur',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaLincoln',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaLyon',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMcLeod',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMahnomen',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMarshall',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMartin',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMeeker',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMorrison',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMower',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaMurray',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaNicollet',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaNobles',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaNorman',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaOlmsted',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaOttertail',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaPennington',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaPine',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaPipestone',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaPolk',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaPope',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaRamsey',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaRedLake',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaRedwood',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaRenville',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaRice',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaRock',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaRoseau',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisNorth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisCentral',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisSouth',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaScott',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaSherburne',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaSibley',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaStearns',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaSteele',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaStevens',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaSwift',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaTodd',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaTraverse',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaWabasha',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaWadena',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaWaseca',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaWatonwan',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaWinona',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaWright',
                 'esriSRDatum_NAD1983HARNAdj_MinnesotaYellowMedicine',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinAshland',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinBarron',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinBayfield',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinBrown',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinBuffalo',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinBurnett',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinChippewa',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinClark',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinColumbia',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinCrawford',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinDane',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinDoor',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinDouglas',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinDunn',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinEauClaire',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinFlorence',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinForest',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinGrant',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinIowa',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinIron',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinJackson',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinLaCrosse',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinLanglade',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinLincoln',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinMarathon',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinMarinette',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinMenominee',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinMonroe',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinOconto',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinOneida',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinPolk',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinPortage',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinPrice',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinRichland',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinRock',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinRusk',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinStCroix',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinSauk',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinSawyer',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinShawano',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinTaylor',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinTrempealeau',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinVernon',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinVilas',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinWalworth',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinWashburn',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinWashington',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinWaukesha',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinWaupaca',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinWaushara',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinWood',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinAdamsJuneau',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinGreenLafayette',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinGreenLakeMarquette',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinDodgeJefferson',
                 'esriSRDatum_NAD1983HARNAdj_WisconsinPepinPierce',
                 'esriSRDatum_NAD1983HARNAdj_WICalumetFondduLacOutagamieWinnebago',
                 'esriSRDatum_NAD1983HARNAdj_WIKenoshaMilwaukeeOzaukeeRacine',
                 'esriSRDatum_NAD1983HARNAdj_WIKewauneeManitowocSheboygan',
                 'esriSRDatum_Mercury',
                 'esriSRDatum_Venus1985',
                 'esriSRDatum_Venus2000',
                 'esriSRDatum_TheMoon',
                 'esriSRDatum_Mars1979',
                 'esriSRDatum_Mars2000',
                 'esriSRDatum_MarsDeimos',
                 'esriSRDatum_MarsPhobos',
                 'esriSRDatum_Jupiter',
                 'esriSRDatum_JupiterAdrastea',
                 'esriSRDatum_JupiterAmalthea',
                 'esriSRDatum_JupiterAnanke',
                 'esriSRDatum_JupiterCallisto',
                 'esriSRDatum_JupiterCarme',
                 'esriSRDatum_JupiterElara',
                 'esriSRDatum_JupiterEuropa',
                 'esriSRDatum_JupiterGanymede',
                 'esriSRDatum_JupiterHimalia',
                 'esriSRDatum_JupiterIo',
                 'esriSRDatum_JupiterLeda',
                 'esriSRDatum_JupiterLysithea',
                 'esriSRDatum_JupiterMetis',
                 'esriSRDatum_JupiterPasiphae',
                 'esriSRDatum_JupiterSinope',
                 'esriSRDatum_JupiterThebe',
                 'esriSRDatum_Saturn',
                 'esriSRDatum_SaturnAtlas',
                 'esriSRDatum_SaturnCalypso',
                 'esriSRDatum_SaturnDione',
                 'esriSRDatum_SaturnEnceladus',
                 'esriSRDatum_SaturnEpimetheus',
                 'esriSRDatum_SaturnHelene',
                 'esriSRDatum_SaturnHyperion',
                 'esriSRDatum_SaturnIapetus',
                 'esriSRDatum_SaturnJanus',
                 'esriSRDatum_SaturnMimas',
                 'esriSRDatum_SaturnPan',
                 'esriSRDatum_SaturnPandora',
                 'esriSRDatum_SaturnPhoebe',
                 'esriSRDatum_SaturnPrometheus',
                 'esriSRDatum_SaturnRhea',
                 'esriSRDatum_SaturnTelesto',
                 'esriSRDatum_SaturnTethys',
                 'esriSRDatum_SaturnTitan',
                 'esriSRDatum_Uranus',
                 'esriSRDatum_UranusAriel',
                 'esriSRDatum_UranusBelinda',
                 'esriSRDatum_UranusBianca',
                 'esriSRDatum_UranusCordelia',
                 'esriSRDatum_UranusCressida',
                 'esriSRDatum_UranusDesdemona',
                 'esriSRDatum_UranusJuliet',
                 'esriSRDatum_UranusMiranda',
                 'esriSRDatum_UranusOberon',
                 'esriSRDatum_UranusOphelia',
                 'esriSRDatum_UranusPortia',
                 'esriSRDatum_UranusPuck',
                 'esriSRDatum_UranusRosalind',
                 'esriSRDatum_UranusTitania',
                 'esriSRDatum_UranusUmbriel',
                 'esriSRDatum_Neptune',
                 'esriSRDatum_NeptuneDespina',
                 'esriSRDatum_NeptuneGalatea',
                 'esriSRDatum_NeptuneLarissa',
                 'esriSRDatum_NeptuneNaiad',
                 'esriSRDatum_NeptuneNereid',
                 'esriSRDatum_NeptuneProteus',
                 'esriSRDatum_NeptuneThalassa',
                 'esriSRDatum_NeptuneTriton',
                 'esriSRDatum_Pluto',
                 'esriSRDatum_PlutoCharon',
                 'esriSRDatum_Accra',
                 'esriSRDatum_ChosMalal1914',
                 'esriSRDatum_EuropeanLibyanDatum1979',
                 'esriSRDatum_IRENET95',
                 'esriSRDatum_KoreanDatum1985',
                 'esriSRDatum_KoreanDatum1995',
                 'esriSRDatum_MountDillon',
                 'esriSRDatum_Naparima1955',
                 'esriSRDatum_PampadelCastillo',
                 'esriSRDatum_PosicionesGeodesicasArgentinas',
                 'esriSRDatum_SierraLeone1924',
                 'esriSRDatum_SierraLeone1968',
                 'esriSRDatum_SIRGAS',
                 'esriSRDatum_SouthYemen',
                 'esriSRDatum_YemenNGN1996',
                 'esriSRDatum_Pohnpei',
                 'esriSRDatum_REGVEN',
                 'esriSRDatum_JapanGeodeticDatum2000',
                 'esriSRDatum_BabSouthAstro',
                 'esriSRDatum_Majuro']
    esriSRDatum_Albanian1987 = 6191
    esriSRDatum_Ammassalik1958 = 6196
    esriSRDatum_AutralianAntarctic1998 = 6176
    esriSRDatum_AzoresCentralIslands1948 = 6183
    esriSRDatum_AzoresCentralIslands1995 = 6665
    esriSRDatum_AzoresOccidentalIslands1939 = 6182
    esriSRDatum_AzoresOrientalIslands1940 = 6184
    esriSRDatum_AzoresOrientalIslands1995 = 6664
    esriSRDatum_Combani1950 = 6632
    esriSRDatum_CentreSpatialGuyanais1967 = 6623
    esriSRDatum_Douala1948 = 6192
    esriSRDatum_Egypt1930 = 6199
    esriSRDatum_Estonia1997 = 6180
    esriSRDatum_EuropeanTerrestrialRefSystem1989 = 6258
    esriSRDatum_FortDesaix = 6625
    esriSRDatum_FortMarigot = 6621
    esriSRDatum_GrandComoros = 6646
    esriSRDatum_Helle1954 = 6660
    esriSRDatum_IGM1995 = 6670
    esriSRDatum_IGN53Mare = 6641
    esriSRDatum_IGN56Lifou = 6633
    esriSRDatum_IGN72GrandeTerre = 6634
    esriSRDatum_IGN72NukuHiva = 6630
    esriSRDatum_IraqKuwaitBoundaryDatum1992 = 6667
    esriSRDatum_IslandsNetwork1993 = 6659
    esriSRDatum_IERSTerrestrialReferenceFrame1988 = 6647
    esriSRDatum_IERSTerrestrialReferenceFrame1989 = 6648
    esriSRDatum_IERSTerrestrialReferenceFrame1990 = 6649
    esriSRDatum_IERSTerrestrialReferenceFrame1991 = 6650
    esriSRDatum_IERSTerrestrialReferenceFrame1992 = 6651
    esriSRDatum_IERSTerrestrialReferenceFrame1993 = 6652
    esriSRDatum_IERSTerrestrialReferenceFrame1994 = 6653
    esriSRDatum_IERSTerrestrialReferenceFrame1996 = 6654
    esriSRDatum_IERSTerrestrialReferenceFrame1997 = 6655
    esriSRDatum_IERSTerrestrialReferenceFrame2000 = 6656
    esriSRDatum_K0_1949 = 6698
    esriSRDatum_Kousseri = 6198
    esriSRDatum_Latvia1992 = 6661
    esriSRDatum_Lisbon1890 = 6666
    esriSRDatum_Luxembourg1930 = 6181
    esriSRDatum_Madeira1936 = 6185
    esriSRDatum_Manoca1962 = 6193
    esriSRDatum_MOP78 = 6639
    esriSRDatum_NEA74Noumea = 6644
    esriSRDatum_OSNI_1952 = 6188
    esriSRDatum_Petrels1972 = 6636
    esriSRDatum_Piton_des_Neiges = 6626
    esriSRDatum_PointeGeologiePerroud1950 = 6637
    esriSRDatum_PortoSanto1995 = 6663
    esriSRDatum_POSGAR1998 = 6190
    esriSRDatum_Pulkovo1942_adj58 = 6179
    esriSRDatum_Pulkovo1942_adj83 = 6178
    esriSRDatum_QatarNationalDatum1995 = 6614
    esriSRDatum_Qornoq1927 = 6194
    esriSRDatum_Reykjavik1900 = 6657
    esriSRDatum_ReseauGeodesiqueFrancaisGuyane1995 = 6624
    esriSRDatum_ReseauGeodesiqueNouvelleCaledonie1991 = 6645
    esriSRDatum_ReseauGeodesique_de_la_Reunion1992 = 6627
    esriSRDatum_Reseau_de_Reference_des_AntillesFrancaises1991 = 1047
    esriSRDatum_SainteAnne = 6622
    esriSRDatum_SaintPierre_et_Miquelon1950 = 6638
    esriSRDatum_Scoresbysund1952 = 6195
    esriSRDatum_ST71Belep = 6643
    esriSRDatum_ST84_Ile_des_Pins = 6642
    esriSRDatum_ST87Ouvea = 6750
    esriSRDatum_SWEREF99 = 6619
    esriSRDatum_Tahaa = 6629
    esriSRDatum_Tahiti = 6628
    esriSRDatum_Xian1980 = 6610
    esriSRDatum_Bermuda2000 = 6762
    esriSRDatum_ChathamIslands1979 = 6673
    esriSRDatum_ObservatorioMeteorologico1965 = 106274
    esriSRDatum_Roma1940 = 106275
    esriSRDatum_EMEP = 106276
    esriSRDatum_Jordan = 106277
    esriSRDatum_NAD1983HARNAdj_MinnesotaAnoka = 106700
    esriSRDatum_NAD1983HARNAdj_MinnesotaBecker = 106701
    esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiNorth = 106702
    esriSRDatum_NAD1983HARNAdj_MinnesotaBeltramiSouth = 106703
    esriSRDatum_NAD1983HARNAdj_MinnesotaBenton = 106704
    esriSRDatum_NAD1983HARNAdj_MinnesotaBigStone = 106705
    esriSRDatum_NAD1983HARNAdj_MinnesotaBlueEarth = 106706
    esriSRDatum_NAD1983HARNAdj_MinnesotaBrown = 106707
    esriSRDatum_NAD1983HARNAdj_MinnesotaCarlton = 106708
    esriSRDatum_NAD1983HARNAdj_MinnesotaCarver = 106709
    esriSRDatum_NAD1983HARNAdj_MinnesotaCassNorth = 106710
    esriSRDatum_NAD1983HARNAdj_MinnesotaCassSouth = 106711
    esriSRDatum_NAD1983HARNAdj_MinnesotaChippewa = 106712
    esriSRDatum_NAD1983HARNAdj_MinnesotaChisago = 106713
    esriSRDatum_NAD1983HARNAdj_MinnesotaCookNorth = 106714
    esriSRDatum_NAD1983HARNAdj_MinnesotaCookSouth = 106715
    esriSRDatum_NAD1983HARNAdj_MinnesotaCottonwood = 106716
    esriSRDatum_NAD1983HARNAdj_MinnesotaCrowWing = 106717
    esriSRDatum_NAD1983HARNAdj_MinnesotaDakota = 106718
    esriSRDatum_NAD1983HARNAdj_MinnesotaDodge = 106719
    esriSRDatum_NAD1983HARNAdj_MinnesotaDouglas = 106720
    esriSRDatum_NAD1983HARNAdj_MinnesotaFaribault = 106721
    esriSRDatum_NAD1983HARNAdj_MinnesotaFillmore = 106722
    esriSRDatum_NAD1983HARNAdj_MinnesotaFreeborn = 106723
    esriSRDatum_NAD1983HARNAdj_MinnesotaGoodhue = 106724
    esriSRDatum_NAD1983HARNAdj_MinnesotaGrant = 106725
    esriSRDatum_NAD1983HARNAdj_MinnesotaHennepin = 106726
    esriSRDatum_NAD1983HARNAdj_MinnesotaHouston = 106727
    esriSRDatum_NAD1983HARNAdj_MinnesotaIsanti = 106728
    esriSRDatum_NAD1983HARNAdj_MinnesotaItascaNorth = 106729
    esriSRDatum_NAD1983HARNAdj_MinnesotaItascaSouth = 106730
    esriSRDatum_NAD1983HARNAdj_MinnesotaJackson = 106731
    esriSRDatum_NAD1983HARNAdj_MinnesotaKanabec = 106732
    esriSRDatum_NAD1983HARNAdj_MinnesotaKandiyohi = 106733
    esriSRDatum_NAD1983HARNAdj_MinnesotaKittson = 106734
    esriSRDatum_NAD1983HARNAdj_MinnesotaKoochiching = 106735
    esriSRDatum_NAD1983HARNAdj_MinnesotaLacQuiParle = 106736
    esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth = 106737
    esriSRDatum_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth = 106738
    esriSRDatum_NAD1983HARNAdj_MinnesotaLeSueur = 106739
    esriSRDatum_NAD1983HARNAdj_MinnesotaLincoln = 106740
    esriSRDatum_NAD1983HARNAdj_MinnesotaLyon = 106741
    esriSRDatum_NAD1983HARNAdj_MinnesotaMcLeod = 106742
    esriSRDatum_NAD1983HARNAdj_MinnesotaMahnomen = 106743
    esriSRDatum_NAD1983HARNAdj_MinnesotaMarshall = 106744
    esriSRDatum_NAD1983HARNAdj_MinnesotaMartin = 106745
    esriSRDatum_NAD1983HARNAdj_MinnesotaMeeker = 106746
    esriSRDatum_NAD1983HARNAdj_MinnesotaMorrison = 106747
    esriSRDatum_NAD1983HARNAdj_MinnesotaMower = 106748
    esriSRDatum_NAD1983HARNAdj_MinnesotaMurray = 106749
    esriSRDatum_NAD1983HARNAdj_MinnesotaNicollet = 106750
    esriSRDatum_NAD1983HARNAdj_MinnesotaNobles = 106751
    esriSRDatum_NAD1983HARNAdj_MinnesotaNorman = 106752
    esriSRDatum_NAD1983HARNAdj_MinnesotaOlmsted = 106753
    esriSRDatum_NAD1983HARNAdj_MinnesotaOttertail = 106754
    esriSRDatum_NAD1983HARNAdj_MinnesotaPennington = 106755
    esriSRDatum_NAD1983HARNAdj_MinnesotaPine = 106756
    esriSRDatum_NAD1983HARNAdj_MinnesotaPipestone = 106757
    esriSRDatum_NAD1983HARNAdj_MinnesotaPolk = 106758
    esriSRDatum_NAD1983HARNAdj_MinnesotaPope = 106759
    esriSRDatum_NAD1983HARNAdj_MinnesotaRamsey = 106760
    esriSRDatum_NAD1983HARNAdj_MinnesotaRedLake = 106761
    esriSRDatum_NAD1983HARNAdj_MinnesotaRedwood = 106762
    esriSRDatum_NAD1983HARNAdj_MinnesotaRenville = 106763
    esriSRDatum_NAD1983HARNAdj_MinnesotaRice = 106764
    esriSRDatum_NAD1983HARNAdj_MinnesotaRock = 106765
    esriSRDatum_NAD1983HARNAdj_MinnesotaRoseau = 106766
    esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisNorth = 106767
    esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisCentral = 106768
    esriSRDatum_NAD1983HARNAdj_MinnesotaStLouisSouth = 106769
    esriSRDatum_NAD1983HARNAdj_MinnesotaScott = 106770
    esriSRDatum_NAD1983HARNAdj_MinnesotaSherburne = 106771
    esriSRDatum_NAD1983HARNAdj_MinnesotaSibley = 106772
    esriSRDatum_NAD1983HARNAdj_MinnesotaStearns = 106773
    esriSRDatum_NAD1983HARNAdj_MinnesotaSteele = 106774
    esriSRDatum_NAD1983HARNAdj_MinnesotaStevens = 106775
    esriSRDatum_NAD1983HARNAdj_MinnesotaSwift = 106776
    esriSRDatum_NAD1983HARNAdj_MinnesotaTodd = 106777
    esriSRDatum_NAD1983HARNAdj_MinnesotaTraverse = 106778
    esriSRDatum_NAD1983HARNAdj_MinnesotaWabasha = 106779
    esriSRDatum_NAD1983HARNAdj_MinnesotaWadena = 106780
    esriSRDatum_NAD1983HARNAdj_MinnesotaWaseca = 106781
    esriSRDatum_NAD1983HARNAdj_MinnesotaWatonwan = 106782
    esriSRDatum_NAD1983HARNAdj_MinnesotaWinona = 106783
    esriSRDatum_NAD1983HARNAdj_MinnesotaWright = 106784
    esriSRDatum_NAD1983HARNAdj_MinnesotaYellowMedicine = 106785
    esriSRDatum_NAD1983HARNAdj_WisconsinAshland = 106800
    esriSRDatum_NAD1983HARNAdj_WisconsinBarron = 106801
    esriSRDatum_NAD1983HARNAdj_WisconsinBayfield = 106802
    esriSRDatum_NAD1983HARNAdj_WisconsinBrown = 106803
    esriSRDatum_NAD1983HARNAdj_WisconsinBuffalo = 106804
    esriSRDatum_NAD1983HARNAdj_WisconsinBurnett = 106805
    esriSRDatum_NAD1983HARNAdj_WisconsinChippewa = 106806
    esriSRDatum_NAD1983HARNAdj_WisconsinClark = 106807
    esriSRDatum_NAD1983HARNAdj_WisconsinColumbia = 106808
    esriSRDatum_NAD1983HARNAdj_WisconsinCrawford = 106809
    esriSRDatum_NAD1983HARNAdj_WisconsinDane = 106810
    esriSRDatum_NAD1983HARNAdj_WisconsinDoor = 106811
    esriSRDatum_NAD1983HARNAdj_WisconsinDouglas = 106812
    esriSRDatum_NAD1983HARNAdj_WisconsinDunn = 106813
    esriSRDatum_NAD1983HARNAdj_WisconsinEauClaire = 106814
    esriSRDatum_NAD1983HARNAdj_WisconsinFlorence = 106815
    esriSRDatum_NAD1983HARNAdj_WisconsinForest = 106816
    esriSRDatum_NAD1983HARNAdj_WisconsinGrant = 106817
    esriSRDatum_NAD1983HARNAdj_WisconsinIowa = 106818
    esriSRDatum_NAD1983HARNAdj_WisconsinIron = 106819
    esriSRDatum_NAD1983HARNAdj_WisconsinJackson = 106820
    esriSRDatum_NAD1983HARNAdj_WisconsinLaCrosse = 106821
    esriSRDatum_NAD1983HARNAdj_WisconsinLanglade = 106822
    esriSRDatum_NAD1983HARNAdj_WisconsinLincoln = 106823
    esriSRDatum_NAD1983HARNAdj_WisconsinMarathon = 106824
    esriSRDatum_NAD1983HARNAdj_WisconsinMarinette = 106825
    esriSRDatum_NAD1983HARNAdj_WisconsinMenominee = 106826
    esriSRDatum_NAD1983HARNAdj_WisconsinMonroe = 106827
    esriSRDatum_NAD1983HARNAdj_WisconsinOconto = 106828
    esriSRDatum_NAD1983HARNAdj_WisconsinOneida = 106829
    esriSRDatum_NAD1983HARNAdj_WisconsinPolk = 106830
    esriSRDatum_NAD1983HARNAdj_WisconsinPortage = 106831
    esriSRDatum_NAD1983HARNAdj_WisconsinPrice = 106832
    esriSRDatum_NAD1983HARNAdj_WisconsinRichland = 106833
    esriSRDatum_NAD1983HARNAdj_WisconsinRock = 106834
    esriSRDatum_NAD1983HARNAdj_WisconsinRusk = 106835
    esriSRDatum_NAD1983HARNAdj_WisconsinStCroix = 106836
    esriSRDatum_NAD1983HARNAdj_WisconsinSauk = 106837
    esriSRDatum_NAD1983HARNAdj_WisconsinSawyer = 106838
    esriSRDatum_NAD1983HARNAdj_WisconsinShawano = 106839
    esriSRDatum_NAD1983HARNAdj_WisconsinTaylor = 106840
    esriSRDatum_NAD1983HARNAdj_WisconsinTrempealeau = 106841
    esriSRDatum_NAD1983HARNAdj_WisconsinVernon = 106842
    esriSRDatum_NAD1983HARNAdj_WisconsinVilas = 106843
    esriSRDatum_NAD1983HARNAdj_WisconsinWalworth = 106844
    esriSRDatum_NAD1983HARNAdj_WisconsinWashburn = 106845
    esriSRDatum_NAD1983HARNAdj_WisconsinWashington = 106846
    esriSRDatum_NAD1983HARNAdj_WisconsinWaukesha = 106847
    esriSRDatum_NAD1983HARNAdj_WisconsinWaupaca = 106848
    esriSRDatum_NAD1983HARNAdj_WisconsinWaushara = 106849
    esriSRDatum_NAD1983HARNAdj_WisconsinWood = 106850
    esriSRDatum_NAD1983HARNAdj_WisconsinAdamsJuneau = 106851
    esriSRDatum_NAD1983HARNAdj_WisconsinGreenLafayette = 106852
    esriSRDatum_NAD1983HARNAdj_WisconsinGreenLakeMarquette = 106853
    esriSRDatum_NAD1983HARNAdj_WisconsinDodgeJefferson = 106854
    esriSRDatum_NAD1983HARNAdj_WisconsinPepinPierce = 106855
    esriSRDatum_NAD1983HARNAdj_WICalumetFondduLacOutagamieWinnebago = 106856
    esriSRDatum_NAD1983HARNAdj_WIKenoshaMilwaukeeOzaukeeRacine = 106857
    esriSRDatum_NAD1983HARNAdj_WIKewauneeManitowocSheboygan = 106858
    esriSRDatum_Mercury = 106900
    esriSRDatum_Venus1985 = 106901
    esriSRDatum_Venus2000 = 106902
    esriSRDatum_TheMoon = 106903
    esriSRDatum_Mars1979 = 106904
    esriSRDatum_Mars2000 = 106905
    esriSRDatum_MarsDeimos = 106906
    esriSRDatum_MarsPhobos = 106907
    esriSRDatum_Jupiter = 106908
    esriSRDatum_JupiterAdrastea = 106909
    esriSRDatum_JupiterAmalthea = 106910
    esriSRDatum_JupiterAnanke = 106911
    esriSRDatum_JupiterCallisto = 106912
    esriSRDatum_JupiterCarme = 106913
    esriSRDatum_JupiterElara = 106914
    esriSRDatum_JupiterEuropa = 106915
    esriSRDatum_JupiterGanymede = 106916
    esriSRDatum_JupiterHimalia = 106917
    esriSRDatum_JupiterIo = 106918
    esriSRDatum_JupiterLeda = 106919
    esriSRDatum_JupiterLysithea = 106920
    esriSRDatum_JupiterMetis = 106921
    esriSRDatum_JupiterPasiphae = 106922
    esriSRDatum_JupiterSinope = 106923
    esriSRDatum_JupiterThebe = 106924
    esriSRDatum_Saturn = 106925
    esriSRDatum_SaturnAtlas = 106926
    esriSRDatum_SaturnCalypso = 106927
    esriSRDatum_SaturnDione = 106928
    esriSRDatum_SaturnEnceladus = 106929
    esriSRDatum_SaturnEpimetheus = 106930
    esriSRDatum_SaturnHelene = 106931
    esriSRDatum_SaturnHyperion = 106932
    esriSRDatum_SaturnIapetus = 106933
    esriSRDatum_SaturnJanus = 106934
    esriSRDatum_SaturnMimas = 106935
    esriSRDatum_SaturnPan = 106936
    esriSRDatum_SaturnPandora = 106937
    esriSRDatum_SaturnPhoebe = 106938
    esriSRDatum_SaturnPrometheus = 106939
    esriSRDatum_SaturnRhea = 106940
    esriSRDatum_SaturnTelesto = 106941
    esriSRDatum_SaturnTethys = 106942
    esriSRDatum_SaturnTitan = 106943
    esriSRDatum_Uranus = 106944
    esriSRDatum_UranusAriel = 106945
    esriSRDatum_UranusBelinda = 106946
    esriSRDatum_UranusBianca = 106947
    esriSRDatum_UranusCordelia = 106948
    esriSRDatum_UranusCressida = 106949
    esriSRDatum_UranusDesdemona = 106950
    esriSRDatum_UranusJuliet = 106951
    esriSRDatum_UranusMiranda = 106952
    esriSRDatum_UranusOberon = 106953
    esriSRDatum_UranusOphelia = 106954
    esriSRDatum_UranusPortia = 106955
    esriSRDatum_UranusPuck = 106956
    esriSRDatum_UranusRosalind = 106957
    esriSRDatum_UranusTitania = 106958
    esriSRDatum_UranusUmbriel = 106959
    esriSRDatum_Neptune = 106960
    esriSRDatum_NeptuneDespina = 106961
    esriSRDatum_NeptuneGalatea = 106962
    esriSRDatum_NeptuneLarissa = 106963
    esriSRDatum_NeptuneNaiad = 106964
    esriSRDatum_NeptuneNereid = 106965
    esriSRDatum_NeptuneProteus = 106966
    esriSRDatum_NeptuneThalassa = 106967
    esriSRDatum_NeptuneTriton = 106968
    esriSRDatum_Pluto = 106969
    esriSRDatum_PlutoCharon = 106970
    esriSRDatum_Accra = 6168
    esriSRDatum_ChosMalal1914 = 6160
    esriSRDatum_EuropeanLibyanDatum1979 = 6159
    esriSRDatum_IRENET95 = 6173
    esriSRDatum_KoreanDatum1985 = 6162
    esriSRDatum_KoreanDatum1995 = 6166
    esriSRDatum_MountDillon = 6157
    esriSRDatum_Naparima1955 = 6158
    esriSRDatum_PampadelCastillo = 6161
    esriSRDatum_PosicionesGeodesicasArgentinas = 6172
    esriSRDatum_SierraLeone1924 = 6174
    esriSRDatum_SierraLeone1968 = 6175
    esriSRDatum_SIRGAS = 6170
    esriSRDatum_SouthYemen = 6164
    esriSRDatum_YemenNGN1996 = 6163
    esriSRDatum_Pohnpei = 106266
    esriSRDatum_REGVEN = 6189
    esriSRDatum_JapanGeodeticDatum2000 = 6612
    esriSRDatum_BabSouthAstro = 106269
    esriSRDatum_Majuro = 106270

class esriSRPrimeM2Type(Enumeration):
    __slots__ = ['esriSRPrimeM_ReferenceMeridian']
    esriSRPrimeM_ReferenceMeridian = 108900

class esriSRProjection4Type(Enumeration):
    __slots__ = ['esriSRProjection_Cube',
                 'esriSRProjection_Fuller',
                 'esriSRProjection_Local',
                 'esriSRProjection_RobinsonArcInfo',
                 'esriSRProjection_RSO_NaturalOrigin',
                 'esriSRProjection_RSO_Center',
                 'esriSRProjection_TransverseMercatorComplex',
                 'esriSRProjection_StereographicNorthPole',
                 'esriSRProjection_StereographicSouthPole',
                 'esriSRProjection_GoodeHomolosine']
    esriSRProjection_Cube = 43055
    esriSRProjection_Fuller = 43052
    esriSRProjection_Local = 43058
    esriSRProjection_RobinsonArcInfo = 43057
    esriSRProjection_RSO_NaturalOrigin = 43053
    esriSRProjection_RSO_Center = 43054
    esriSRProjection_TransverseMercatorComplex = 43056
    esriSRProjection_StereographicNorthPole = 43050
    esriSRProjection_StereographicSouthPole = 43051
    esriSRProjection_GoodeHomolosine = 43059

class esriSRParameter4Type(Enumeration):
    __slots__ = ['esriSRParameter_Option',
                 'esriSRParameter_X_CoordinateOfRotationOrigin',
                 'esriSRParameter_Y_CoordinateOfRotationOrigin',
                 'esriSRParameter_Z_CoordinateOfRotationOrigin']
    esriSRParameter_Option = 100036
    esriSRParameter_X_CoordinateOfRotationOrigin = 100048
    esriSRParameter_Y_CoordinateOfRotationOrigin = 100049
    esriSRParameter_Z_CoordinateOfRotationOrigin = 100050

class esriSRGeoCS3Type(Enumeration):
    __slots__ = ['esriSRGeoCS_Albanian1987',
                 'esriSRGeoCS_Ammassalik1958',
                 'esriSRGeoCS_AutralianAntarctic1998',
                 'esriSRGeoCS_AzoresCentralIslands1948',
                 'esriSRGeoCS_AzoresCentralIslands1995',
                 'esriSRGeoCS_AzoresOccidentalIslands1939',
                 'esriSRGeoCS_AzoresOrientalIslands1940',
                 'esriSRGeoCS_AzoresOrientalIslands1995',
                 'esriSRGeoCS_Combani1950',
                 'esriSRGeoCS_CentreSpatialGuyanais1967',
                 'esriSRGeoCS_Douala1948',
                 'esriSRGeoCS_Egypt1930',
                 'esriSRGeoCS_Estonia1997',
                 'esriSRGeoCS_ETRS1989',
                 'esriSRGeoCS_FortDesaix',
                 'esriSRGeoCS_FortMarigot',
                 'esriSRGeoCS_GrandComoros',
                 'esriSRGeoCS_GunungSegara_Jakarta',
                 'esriSRGeoCS_Helle1954',
                 'esriSRGeoCS_IGM1995',
                 'esriSRGeoCS_IGN53Mare',
                 'esriSRGeoCS_IGN56Lifou',
                 'esriSRGeoCS_IGN72GrandeTerre',
                 'esriSRGeoCS_IGN72NukuHiva',
                 'esriSRGeoCS_IraqKuwaitBoundaryDatum1992',
                 'esriSRGeoCS_IslandsNetwork1993',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1988',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1989',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1990',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1991',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1992',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1993',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1994',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1996',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame1997',
                 'esriSRGeoCS_IERSTerrestrialReferenceFrame2000',
                 'esriSRGeoCS_K0_1949',
                 'esriSRGeoCS_Kousseri',
                 'esriSRGeoCS_Latvia1992',
                 'esriSRGeoCS_Lisbon1890',
                 'esriSRGeoCS_Lisbon1890_Lisbon',
                 'esriSRGeoCS_Luxembourg1930',
                 'esriSRGeoCS_Madeira1936',
                 'esriSRGeoCS_Manoca1962',
                 'esriSRGeoCS_MOP78',
                 'esriSRGeoCS_NEA74Noumea',
                 'esriSRGeoCS_NordSahara1959_Paris',
                 'esriSRGeoCS_OSNI_1952',
                 'esriSRGeoCS_Petrels1972',
                 'esriSRGeoCS_Piton_des_Neiges',
                 'esriSRGeoCS_PointeGeologiePerroud1950',
                 'esriSRGeoCS_PortoSanto1995',
                 'esriSRGeoCS_POSGAR1998',
                 'esriSRGeoCS_Pulkovo1942_adj58',
                 'esriSRGeoCS_Pulkovo1942_adj83',
                 'esriSRGeoCS_QatarNationalDatum1995',
                 'esriSRGeoCS_Qornoq1927',
                 'esriSRGeoCS_Reykjavik1900',
                 'esriSRGeoCS_ReseauGeodesiqueFrancaisGuyane1995',
                 'esriSRGeoCS_ReseauGeodesiqueNouvelleCaledonie1991',
                 'esriSRGeoCS_ReseauGeodesique_de_la_Reunion1992',
                 'esriSRGeoCS_Reseau_de_Reference_des_AntillesFrancaises1991',
                 'esriSRGeoCS_SainteAnne',
                 'esriSRGeoCS_SaintPierre_et_Miquelon1950',
                 'esriSRGeoCS_Scoresbysund1952',
                 'esriSRGeoCS_ST71Belep',
                 'esriSRGeoCS_ST84_Ile_des_Pins',
                 'esriSRGeoCS_ST87Ouvea',
                 'esriSRGeoCS_SWEREF99',
                 'esriSRGeoCS_Tahaa',
                 'esriSRGeoCS_Tahiti',
                 'esriSRGeoCS_Xian1980',
                 'esriSRGeoCS_Bermuda2000',
                 'esriSRGeoCS_ChathamIslands1979',
                 'esriSRGeoCS_ObservatorioMeteorologico1965',
                 'esriSRGeoCS_Roma1940',
                 'esriSRGeoCS_EMEP',
                 'esriSRGeoCS_EUREF_FIN',
                 'esriSRGeoCS_Jordan',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaAnoka',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBecker',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiNorth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiSouth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBenton',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBigStone',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBlueEarth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaBrown',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarlton',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarver',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassNorth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassSouth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaChippewa',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaChisago',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookNorth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookSouth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCottonwood',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaCrowWing',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaDakota',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaDodge',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaDouglas',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaFaribault',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaFillmore',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaFreeborn',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaGoodhue',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaGrant',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaHennepin',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaHouston',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaIsanti',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaNorth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaSouth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaJackson',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKanabec',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKandiyohi',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKittson',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaKoochiching',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLacQuiParle',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLeSueur',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLincoln',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaLyon',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMcLeod',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMahnomen',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMarshall',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMartin',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMeeker',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMorrison',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMower',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaMurray',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaNicollet',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaNobles',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaNorman',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaOlmsted',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaOttertail',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPennington',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPine',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPipestone',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPolk',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaPope',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRamsey',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedLake',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedwood',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRenville',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRice',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRock',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaRoseau',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisNorth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisCentral',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisSouth',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaScott',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSherburne',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSibley',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStearns',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSteele',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaStevens',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaSwift',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaTodd',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaTraverse',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWabasha',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWadena',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWaseca',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWatonwan',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWinona',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaWright',
                 'esriSRGeoCS_NAD1983HARNAdj_MinnesotaYellowMedicine',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinAshland',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinBarron',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinBayfield',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinBrown',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinBuffalo',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinBurnett',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinChippewa',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinClark',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinColumbia',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinCrawford',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinDane',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinDoor',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinDouglas',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinDunn',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinEauClaire',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinFlorence',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinForest',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinGrant',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinIowa',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinIron',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinJackson',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinLaCrosse',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinLanglade',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinLincoln',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinMarathon',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinMarinette',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinMenominee',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinMonroe',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinOconto',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinOneida',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinPolk',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinPortage',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinPrice',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinRichland',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinRock',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinRusk',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinStCroix',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinSauk',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinSawyer',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinShawano',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinTaylor',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinTrempealeau',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinVernon',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinVilas',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWalworth',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWashburn',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWashington',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWaukesha',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWaupaca',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWaushara',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWood',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinAdams',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinJuneau',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinGreen',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinLafayette',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinGreenLake',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinMarquette',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinDodge',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinJefferson',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinPepin',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinPierce',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinCalumet',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinFondduLac',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinOutagamie',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinWinnebago',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinKenosha',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinMilwaukee',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinOzaukee',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinRacine',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinKewaunee',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinManitowoc',
                 'esriSRGeoCS_NAD1983HARNAdj_WisconsinSheboygan',
                 'esriSRGeoCS_Mercury',
                 'esriSRGeoCS_Venus1985',
                 'esriSRGeoCS_Venus2000',
                 'esriSRGeoCS_TheMoon',
                 'esriSRGeoCS_Mars1979',
                 'esriSRGeoCS_Mars2000',
                 'esriSRGeoCS_MarsDeimos',
                 'esriSRGeoCS_MarsPhobos',
                 'esriSRGeoCS_Jupiter',
                 'esriSRGeoCS_JupiterAdrastea',
                 'esriSRGeoCS_JupiterAmalthea',
                 'esriSRGeoCS_JupiterAnanke',
                 'esriSRGeoCS_JupiterCallisto',
                 'esriSRGeoCS_JupiterCarme',
                 'esriSRGeoCS_JupiterElara',
                 'esriSRGeoCS_JupiterEuropa',
                 'esriSRGeoCS_JupiterGanymede',
                 'esriSRGeoCS_JupiterHimalia',
                 'esriSRGeoCS_JupiterIo',
                 'esriSRGeoCS_JupiterLeda',
                 'esriSRGeoCS_JupiterLysithea',
                 'esriSRGeoCS_JupiterMetis',
                 'esriSRGeoCS_JupiterPasiphae',
                 'esriSRGeoCS_JupiterSinope',
                 'esriSRGeoCS_JupiterThebe',
                 'esriSRGeoCS_Saturn',
                 'esriSRGeoCS_SaturnAtlas',
                 'esriSRGeoCS_SaturnCalypso',
                 'esriSRGeoCS_SaturnDione',
                 'esriSRGeoCS_SaturnEnceladus',
                 'esriSRGeoCS_SaturnEpimetheus',
                 'esriSRGeoCS_SaturnHelene',
                 'esriSRGeoCS_SaturnHyperion',
                 'esriSRGeoCS_SaturnIapetus',
                 'esriSRGeoCS_SaturnJanus',
                 'esriSRGeoCS_SaturnMimas',
                 'esriSRGeoCS_SaturnPan',
                 'esriSRGeoCS_SaturnPandora',
                 'esriSRGeoCS_SaturnPhoebe',
                 'esriSRGeoCS_SaturnPrometheus',
                 'esriSRGeoCS_SaturnRhea',
                 'esriSRGeoCS_SaturnTelesto',
                 'esriSRGeoCS_SaturnTethys',
                 'esriSRGeoCS_SaturnTitan',
                 'esriSRGeoCS_Uranus',
                 'esriSRGeoCS_UranusAriel',
                 'esriSRGeoCS_UranusBelinda',
                 'esriSRGeoCS_UranusBianca',
                 'esriSRGeoCS_UranusCordelia',
                 'esriSRGeoCS_UranusCressida',
                 'esriSRGeoCS_UranusDesdemona',
                 'esriSRGeoCS_UranusJuliet',
                 'esriSRGeoCS_UranusMiranda',
                 'esriSRGeoCS_UranusOberon',
                 'esriSRGeoCS_UranusOphelia',
                 'esriSRGeoCS_UranusPortia',
                 'esriSRGeoCS_UranusPuck',
                 'esriSRGeoCS_UranusRosalind',
                 'esriSRGeoCS_UranusTitania',
                 'esriSRGeoCS_UranusUmbriel',
                 'esriSRGeoCS_Neptune',
                 'esriSRGeoCS_NeptuneDespina',
                 'esriSRGeoCS_NeptuneGalatea',
                 'esriSRGeoCS_NeptuneLarissa',
                 'esriSRGeoCS_NeptuneNaiad',
                 'esriSRGeoCS_NeptuneNereid',
                 'esriSRGeoCS_NeptuneProteus',
                 'esriSRGeoCS_NeptuneThalassa',
                 'esriSRGeoCS_NeptuneTriton',
                 'esriSRGeoCS_Pluto',
                 'esriSRGeoCS_PlutoCharon',
                 'esriSRGeoCS_Accra',
                 'esriSRGeoCS_ChosMalal1914',
                 'esriSRGeoCS_EuropeanLibyanDatum1979',
                 'esriSRGeoCS_IRENET95',
                 'esriSRGeoCS_KoreanDatum1985',
                 'esriSRGeoCS_KoreanDatum1995',
                 'esriSRGeoCS_MountDillon',
                 'esriSRGeoCS_Naparima1955',
                 'esriSRGeoCS_PampadelCastillo',
                 'esriSRGeoCS_PosicionesGeodesicasArgentinas',
                 'esriSRGeoCS_SierraLeone1924',
                 'esriSRGeoCS_SierraLeone1968',
                 'esriSRGeoCS_SIRGAS',
                 'esriSRGeoCS_SouthYemen',
                 'esriSRGeoCS_YemenNGN1996',
                 'esriSRGeoCS_Pohnpei',
                 'esriSRGeoCS_Carthage_Degrees',
                 'esriSRGeoCS_REGVEN',
                 'esriSRGeoCS_JapanGeodeticDatum2000',
                 'esriSRGeoCS_BabSouthAstro',
                 'esriSRGeoCS_Majuro']
    esriSRGeoCS_Albanian1987 = 4191
    esriSRGeoCS_Ammassalik1958 = 4196
    esriSRGeoCS_AutralianAntarctic1998 = 4176
    esriSRGeoCS_AzoresCentralIslands1948 = 4183
    esriSRGeoCS_AzoresCentralIslands1995 = 4665
    esriSRGeoCS_AzoresOccidentalIslands1939 = 4182
    esriSRGeoCS_AzoresOrientalIslands1940 = 4184
    esriSRGeoCS_AzoresOrientalIslands1995 = 4664
    esriSRGeoCS_Combani1950 = 4632
    esriSRGeoCS_CentreSpatialGuyanais1967 = 4623
    esriSRGeoCS_Douala1948 = 4192
    esriSRGeoCS_Egypt1930 = 4199
    esriSRGeoCS_Estonia1997 = 4180
    esriSRGeoCS_ETRS1989 = 4258
    esriSRGeoCS_FortDesaix = 4625
    esriSRGeoCS_FortMarigot = 4621
    esriSRGeoCS_GrandComoros = 4646
    esriSRGeoCS_GunungSegara_Jakarta = 4820
    esriSRGeoCS_Helle1954 = 4660
    esriSRGeoCS_IGM1995 = 4670
    esriSRGeoCS_IGN53Mare = 4641
    esriSRGeoCS_IGN56Lifou = 4633
    esriSRGeoCS_IGN72GrandeTerre = 4662
    esriSRGeoCS_IGN72NukuHiva = 4630
    esriSRGeoCS_IraqKuwaitBoundaryDatum1992 = 4667
    esriSRGeoCS_IslandsNetwork1993 = 4659
    esriSRGeoCS_IERSTerrestrialReferenceFrame1988 = 104115
    esriSRGeoCS_IERSTerrestrialReferenceFrame1989 = 104116
    esriSRGeoCS_IERSTerrestrialReferenceFrame1990 = 104117
    esriSRGeoCS_IERSTerrestrialReferenceFrame1991 = 104118
    esriSRGeoCS_IERSTerrestrialReferenceFrame1992 = 104119
    esriSRGeoCS_IERSTerrestrialReferenceFrame1993 = 104120
    esriSRGeoCS_IERSTerrestrialReferenceFrame1994 = 104121
    esriSRGeoCS_IERSTerrestrialReferenceFrame1996 = 104122
    esriSRGeoCS_IERSTerrestrialReferenceFrame1997 = 104123
    esriSRGeoCS_IERSTerrestrialReferenceFrame2000 = 104124
    esriSRGeoCS_K0_1949 = 4698
    esriSRGeoCS_Kousseri = 4198
    esriSRGeoCS_Latvia1992 = 4661
    esriSRGeoCS_Lisbon1890 = 4666
    esriSRGeoCS_Lisbon1890_Lisbon = 4904
    esriSRGeoCS_Luxembourg1930 = 4181
    esriSRGeoCS_Madeira1936 = 4185
    esriSRGeoCS_Manoca1962 = 4193
    esriSRGeoCS_MOP78 = 4639
    esriSRGeoCS_NEA74Noumea = 4644
    esriSRGeoCS_NordSahara1959_Paris = 4819
    esriSRGeoCS_OSNI_1952 = 4188
    esriSRGeoCS_Petrels1972 = 4636
    esriSRGeoCS_Piton_des_Neiges = 4626
    esriSRGeoCS_PointeGeologiePerroud1950 = 4637
    esriSRGeoCS_PortoSanto1995 = 4663
    esriSRGeoCS_POSGAR1998 = 4190
    esriSRGeoCS_Pulkovo1942_adj58 = 4179
    esriSRGeoCS_Pulkovo1942_adj83 = 4178
    esriSRGeoCS_QatarNationalDatum1995 = 4614
    esriSRGeoCS_Qornoq1927 = 4194
    esriSRGeoCS_Reykjavik1900 = 4657
    esriSRGeoCS_ReseauGeodesiqueFrancaisGuyane1995 = 4624
    esriSRGeoCS_ReseauGeodesiqueNouvelleCaledonie1991 = 4645
    esriSRGeoCS_ReseauGeodesique_de_la_Reunion1992 = 4627
    esriSRGeoCS_Reseau_de_Reference_des_AntillesFrancaises1991 = 4558
    esriSRGeoCS_SainteAnne = 4622
    esriSRGeoCS_SaintPierre_et_Miquelon1950 = 4638
    esriSRGeoCS_Scoresbysund1952 = 4195
    esriSRGeoCS_ST71Belep = 4643
    esriSRGeoCS_ST84_Ile_des_Pins = 4642
    esriSRGeoCS_ST87Ouvea = 4750
    esriSRGeoCS_SWEREF99 = 4619
    esriSRGeoCS_Tahaa = 4629
    esriSRGeoCS_Tahiti = 4628
    esriSRGeoCS_Xian1980 = 4610
    esriSRGeoCS_Bermuda2000 = 4762
    esriSRGeoCS_ChathamIslands1979 = 4673
    esriSRGeoCS_ObservatorioMeteorologico1965 = 104126
    esriSRGeoCS_Roma1940 = 104127
    esriSRGeoCS_EMEP = 104128
    esriSRGeoCS_EUREF_FIN = 104129
    esriSRGeoCS_Jordan = 104130
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaAnoka = 104700
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaBecker = 104701
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiNorth = 104702
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaBeltramiSouth = 104703
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaBenton = 104704
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaBigStone = 104705
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaBlueEarth = 104706
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaBrown = 104707
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarlton = 104708
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCarver = 104709
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassNorth = 104710
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCassSouth = 104711
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaChippewa = 104712
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaChisago = 104713
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookNorth = 104714
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCookSouth = 104715
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCottonwood = 104716
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaCrowWing = 104717
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaDakota = 104718
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaDodge = 104719
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaDouglas = 104720
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaFaribault = 104721
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaFillmore = 104722
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaFreeborn = 104723
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaGoodhue = 104724
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaGrant = 104725
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaHennepin = 104726
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaHouston = 104727
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaIsanti = 104728
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaNorth = 104729
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaItascaSouth = 104730
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaJackson = 104731
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaKanabec = 104732
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaKandiyohi = 104733
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaKittson = 104734
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaKoochiching = 104735
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaLacQuiParle = 104736
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsNorth = 104737
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaLake_of_theWoodsSouth = 104738
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaLeSueur = 104739
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaLincoln = 104740
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaLyon = 104741
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMcLeod = 104742
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMahnomen = 104743
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMarshall = 104744
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMartin = 104745
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMeeker = 104746
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMorrison = 104747
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMower = 104748
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaMurray = 104749
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaNicollet = 104750
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaNobles = 104751
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaNorman = 104752
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaOlmsted = 104753
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaOttertail = 104754
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaPennington = 104755
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaPine = 104756
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaPipestone = 104757
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaPolk = 104758
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaPope = 104759
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaRamsey = 104760
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedLake = 104761
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaRedwood = 104762
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaRenville = 104763
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaRice = 104764
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaRock = 104765
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaRoseau = 104766
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisNorth = 104767
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisCentral = 104768
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaStLouisSouth = 104769
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaScott = 104770
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaSherburne = 104771
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaSibley = 104772
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaStearns = 104773
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaSteele = 104774
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaStevens = 104775
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaSwift = 104776
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaTodd = 104777
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaTraverse = 104778
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaWabasha = 104779
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaWadena = 104780
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaWaseca = 104781
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaWatonwan = 104782
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaWinona = 104783
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaWright = 104784
    esriSRGeoCS_NAD1983HARNAdj_MinnesotaYellowMedicine = 104785
    esriSRGeoCS_NAD1983HARNAdj_WisconsinAshland = 104801
    esriSRGeoCS_NAD1983HARNAdj_WisconsinBarron = 104802
    esriSRGeoCS_NAD1983HARNAdj_WisconsinBayfield = 104803
    esriSRGeoCS_NAD1983HARNAdj_WisconsinBrown = 104804
    esriSRGeoCS_NAD1983HARNAdj_WisconsinBuffalo = 104805
    esriSRGeoCS_NAD1983HARNAdj_WisconsinBurnett = 104806
    esriSRGeoCS_NAD1983HARNAdj_WisconsinChippewa = 104808
    esriSRGeoCS_NAD1983HARNAdj_WisconsinClark = 104809
    esriSRGeoCS_NAD1983HARNAdj_WisconsinColumbia = 104810
    esriSRGeoCS_NAD1983HARNAdj_WisconsinCrawford = 104811
    esriSRGeoCS_NAD1983HARNAdj_WisconsinDane = 104812
    esriSRGeoCS_NAD1983HARNAdj_WisconsinDoor = 104814
    esriSRGeoCS_NAD1983HARNAdj_WisconsinDouglas = 104815
    esriSRGeoCS_NAD1983HARNAdj_WisconsinDunn = 104816
    esriSRGeoCS_NAD1983HARNAdj_WisconsinEauClaire = 104817
    esriSRGeoCS_NAD1983HARNAdj_WisconsinFlorence = 104818
    esriSRGeoCS_NAD1983HARNAdj_WisconsinForest = 104820
    esriSRGeoCS_NAD1983HARNAdj_WisconsinGrant = 104821
    esriSRGeoCS_NAD1983HARNAdj_WisconsinIowa = 104824
    esriSRGeoCS_NAD1983HARNAdj_WisconsinIron = 104825
    esriSRGeoCS_NAD1983HARNAdj_WisconsinJackson = 104826
    esriSRGeoCS_NAD1983HARNAdj_WisconsinLaCrosse = 104831
    esriSRGeoCS_NAD1983HARNAdj_WisconsinLanglade = 104833
    esriSRGeoCS_NAD1983HARNAdj_WisconsinLincoln = 104834
    esriSRGeoCS_NAD1983HARNAdj_WisconsinMarathon = 104836
    esriSRGeoCS_NAD1983HARNAdj_WisconsinMarinette = 104837
    esriSRGeoCS_NAD1983HARNAdj_WisconsinMenominee = 104839
    esriSRGeoCS_NAD1983HARNAdj_WisconsinMonroe = 104841
    esriSRGeoCS_NAD1983HARNAdj_WisconsinOconto = 104842
    esriSRGeoCS_NAD1983HARNAdj_WisconsinOneida = 104843
    esriSRGeoCS_NAD1983HARNAdj_WisconsinPolk = 104848
    esriSRGeoCS_NAD1983HARNAdj_WisconsinPortage = 104849
    esriSRGeoCS_NAD1983HARNAdj_WisconsinPrice = 104850
    esriSRGeoCS_NAD1983HARNAdj_WisconsinRichland = 104852
    esriSRGeoCS_NAD1983HARNAdj_WisconsinRock = 104853
    esriSRGeoCS_NAD1983HARNAdj_WisconsinRusk = 104854
    esriSRGeoCS_NAD1983HARNAdj_WisconsinStCroix = 104855
    esriSRGeoCS_NAD1983HARNAdj_WisconsinSauk = 104856
    esriSRGeoCS_NAD1983HARNAdj_WisconsinSawyer = 104857
    esriSRGeoCS_NAD1983HARNAdj_WisconsinShawano = 104858
    esriSRGeoCS_NAD1983HARNAdj_WisconsinTaylor = 104860
    esriSRGeoCS_NAD1983HARNAdj_WisconsinTrempealeau = 104861
    esriSRGeoCS_NAD1983HARNAdj_WisconsinVernon = 104862
    esriSRGeoCS_NAD1983HARNAdj_WisconsinVilas = 104863
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWalworth = 104864
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWashburn = 104865
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWashington = 104866
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWaukesha = 104867
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWaupaca = 104868
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWaushara = 104869
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWood = 104871
    esriSRGeoCS_NAD1983HARNAdj_WisconsinAdams = 104800
    esriSRGeoCS_NAD1983HARNAdj_WisconsinJuneau = 104828
    esriSRGeoCS_NAD1983HARNAdj_WisconsinGreen = 104822
    esriSRGeoCS_NAD1983HARNAdj_WisconsinLafayette = 104832
    esriSRGeoCS_NAD1983HARNAdj_WisconsinGreenLake = 104823
    esriSRGeoCS_NAD1983HARNAdj_WisconsinMarquette = 104838
    esriSRGeoCS_NAD1983HARNAdj_WisconsinDodge = 104813
    esriSRGeoCS_NAD1983HARNAdj_WisconsinJefferson = 104827
    esriSRGeoCS_NAD1983HARNAdj_WisconsinPepin = 104846
    esriSRGeoCS_NAD1983HARNAdj_WisconsinPierce = 104847
    esriSRGeoCS_NAD1983HARNAdj_WisconsinCalumet = 104807
    esriSRGeoCS_NAD1983HARNAdj_WisconsinFondduLac = 104819
    esriSRGeoCS_NAD1983HARNAdj_WisconsinOutagamie = 104844
    esriSRGeoCS_NAD1983HARNAdj_WisconsinWinnebago = 104870
    esriSRGeoCS_NAD1983HARNAdj_WisconsinKenosha = 104829
    esriSRGeoCS_NAD1983HARNAdj_WisconsinMilwaukee = 104840
    esriSRGeoCS_NAD1983HARNAdj_WisconsinOzaukee = 104845
    esriSRGeoCS_NAD1983HARNAdj_WisconsinRacine = 104851
    esriSRGeoCS_NAD1983HARNAdj_WisconsinKewaunee = 104830
    esriSRGeoCS_NAD1983HARNAdj_WisconsinManitowoc = 104835
    esriSRGeoCS_NAD1983HARNAdj_WisconsinSheboygan = 104859
    esriSRGeoCS_Mercury = 104900
    esriSRGeoCS_Venus1985 = 104901
    esriSRGeoCS_Venus2000 = 104902
    esriSRGeoCS_TheMoon = 104903
    esriSRGeoCS_Mars1979 = 104904
    esriSRGeoCS_Mars2000 = 104905
    esriSRGeoCS_MarsDeimos = 104906
    esriSRGeoCS_MarsPhobos = 104907
    esriSRGeoCS_Jupiter = 104908
    esriSRGeoCS_JupiterAdrastea = 104909
    esriSRGeoCS_JupiterAmalthea = 104910
    esriSRGeoCS_JupiterAnanke = 104911
    esriSRGeoCS_JupiterCallisto = 104912
    esriSRGeoCS_JupiterCarme = 104913
    esriSRGeoCS_JupiterElara = 104914
    esriSRGeoCS_JupiterEuropa = 104915
    esriSRGeoCS_JupiterGanymede = 104916
    esriSRGeoCS_JupiterHimalia = 104917
    esriSRGeoCS_JupiterIo = 104918
    esriSRGeoCS_JupiterLeda = 104919
    esriSRGeoCS_JupiterLysithea = 104920
    esriSRGeoCS_JupiterMetis = 104921
    esriSRGeoCS_JupiterPasiphae = 104922
    esriSRGeoCS_JupiterSinope = 104923
    esriSRGeoCS_JupiterThebe = 104924
    esriSRGeoCS_Saturn = 104925
    esriSRGeoCS_SaturnAtlas = 104926
    esriSRGeoCS_SaturnCalypso = 104927
    esriSRGeoCS_SaturnDione = 104928
    esriSRGeoCS_SaturnEnceladus = 104929
    esriSRGeoCS_SaturnEpimetheus = 104930
    esriSRGeoCS_SaturnHelene = 104931
    esriSRGeoCS_SaturnHyperion = 104932
    esriSRGeoCS_SaturnIapetus = 104933
    esriSRGeoCS_SaturnJanus = 104934
    esriSRGeoCS_SaturnMimas = 104935
    esriSRGeoCS_SaturnPan = 104936
    esriSRGeoCS_SaturnPandora = 104937
    esriSRGeoCS_SaturnPhoebe = 104938
    esriSRGeoCS_SaturnPrometheus = 104939
    esriSRGeoCS_SaturnRhea = 104940
    esriSRGeoCS_SaturnTelesto = 104941
    esriSRGeoCS_SaturnTethys = 104942
    esriSRGeoCS_SaturnTitan = 104943
    esriSRGeoCS_Uranus = 104944
    esriSRGeoCS_UranusAriel = 104945
    esriSRGeoCS_UranusBelinda = 104946
    esriSRGeoCS_UranusBianca = 104947
    esriSRGeoCS_UranusCordelia = 104948
    esriSRGeoCS_UranusCressida = 104949
    esriSRGeoCS_UranusDesdemona = 104950
    esriSRGeoCS_UranusJuliet = 104951
    esriSRGeoCS_UranusMiranda = 104952
    esriSRGeoCS_UranusOberon = 104953
    esriSRGeoCS_UranusOphelia = 104954
    esriSRGeoCS_UranusPortia = 104955
    esriSRGeoCS_UranusPuck = 104956
    esriSRGeoCS_UranusRosalind = 104957
    esriSRGeoCS_UranusTitania = 104958
    esriSRGeoCS_UranusUmbriel = 104959
    esriSRGeoCS_Neptune = 104960
    esriSRGeoCS_NeptuneDespina = 104961
    esriSRGeoCS_NeptuneGalatea = 104962
    esriSRGeoCS_NeptuneLarissa = 104963
    esriSRGeoCS_NeptuneNaiad = 104964
    esriSRGeoCS_NeptuneNereid = 104965
    esriSRGeoCS_NeptuneProteus = 104966
    esriSRGeoCS_NeptuneThalassa = 104967
    esriSRGeoCS_NeptuneTriton = 104968
    esriSRGeoCS_Pluto = 104969
    esriSRGeoCS_PlutoCharon = 104970
    esriSRGeoCS_Accra = 4168
    esriSRGeoCS_ChosMalal1914 = 4160
    esriSRGeoCS_EuropeanLibyanDatum1979 = 4159
    esriSRGeoCS_IRENET95 = 4173
    esriSRGeoCS_KoreanDatum1985 = 4162
    esriSRGeoCS_KoreanDatum1995 = 4166
    esriSRGeoCS_MountDillon = 4157
    esriSRGeoCS_Naparima1955 = 4158
    esriSRGeoCS_PampadelCastillo = 4161
    esriSRGeoCS_PosicionesGeodesicasArgentinas = 4172
    esriSRGeoCS_SierraLeone1924 = 4174
    esriSRGeoCS_SierraLeone1968 = 4175
    esriSRGeoCS_SIRGAS = 4170
    esriSRGeoCS_SouthYemen = 4164
    esriSRGeoCS_YemenNGN1996 = 4163
    esriSRGeoCS_Pohnpei = 104109
    esriSRGeoCS_Carthage_Degrees = 4223
    esriSRGeoCS_REGVEN = 4189
    esriSRGeoCS_JapanGeodeticDatum2000 = 4612
    esriSRGeoCS_BabSouthAstro = 104112
    esriSRGeoCS_Majuro = 104113

class esriSRProjCS4Type(Enumeration):
    __slots__ = ['esriSRProjCS_Abidjan1987_TM_5_NW',
                 'esriSRProjCS_Accra_Ghana_Grid',
                 'esriSRProjCS_Accra_TM_1_NW',
                 'esriSRProjCS_AGD1966_ACT_Grid_AGC_Zone',
                 'esriSRProjCS_AGD1966_ISG_54_2',
                 'esriSRProjCS_AGD1966_ISG_54_3',
                 'esriSRProjCS_AGD1966_ISG_55_1',
                 'esriSRProjCS_AGD1966_ISG_55_2',
                 'esriSRProjCS_AGD1966_ISG_55_3',
                 'esriSRProjCS_AGD1966_ISG_56_1',
                 'esriSRProjCS_AGD1966_ISG_56_2',
                 'esriSRProjCS_AGD1966_ISG_56_3',
                 'esriSRProjCS_AGD1966_VICGRID',
                 'esriSRProjCS_Ain_el_Abd_Aramco_Lambert',
                 'esriSRProjCS_Albanian1987_GK_Zone_4',
                 'esriSRProjCS_Arc1950_UTM_Zone_34S',
                 'esriSRProjCS_Arc1950_UTM_Zone_35S',
                 'esriSRProjCS_Arc1950_UTM_Zone_36S',
                 'esriSRProjCS_Arc1960_UTM_Zone_35N',
                 'esriSRProjCS_Arc1960_UTM_Zone_35S',
                 'esriSRProjCS_Arc1960_UTM_Zone_36N',
                 'esriSRProjCS_Arc1960_UTM_Zone_36S',
                 'esriSRProjCS_Arc1960_UTM_Zone_37N',
                 'esriSRProjCS_Arc1960_UTM_Zone_37S',
                 'esriSRProjCS_AzoresCentral1995_UTM_Zone_26N',
                 'esriSRProjCS_AzoresOriental1995_UTM_Zone_26N',
                 'esriSRProjCS_Batavia_NEIEZ',
                 'esriSRProjCS_Batavia_TM_109_SE',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_102E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_105E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_108E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_111E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_114E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_117E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_120E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_123E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_126E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_129E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_132E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_135E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_25',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_26',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_27',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_28',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_29',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_30',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_31',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_32',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_33',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_34',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_35',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_36',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_37',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_38',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_39',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_40',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_41',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_42',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_43',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_44',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_Zone_45',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_75E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_78E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_81E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_84E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_87E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_90E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_93E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_96E',
                 'esriSRProjCS_Beijing1954_3_Degree_GK_CM_99E',
                 'esriSRProjCS_Bermuda_2000_National_Grid',
                 'esriSRProjCS_Bern_1898_Bern_LV03C',
                 'esriSRProjCS_Bissau_UTM_Zone_28N',
                 'esriSRProjCS_CampoInchauspe_UTM_Zone_19S',
                 'esriSRProjCS_CampoInchauspe_UTM_Zone_20S',
                 'esriSRProjCS_Cape_UTM_Zone_34S',
                 'esriSRProjCS_Cape_UTM_Zone_35S',
                 'esriSRProjCS_Cape_UTM_Zone_36S',
                 'esriSRProjCS_Carthage_TM_11_NE',
                 'esriSRProjCS_ChathamIslands1979_Map_Grid',
                 'esriSRProjCS_ChosMalal1914_Argentina_2',
                 'esriSRProjCS_Combani_1950_UTM_38S',
                 'esriSRProjCS_Conakry1905_UTM_Zone_28N',
                 'esriSRProjCS_Conakry1905_UTM_Zone_29N',
                 'esriSRProjCS_CSG1967_UTM_22N',
                 'esriSRProjCS_Dabola_UTM_Zone_28N',
                 'esriSRProjCS_Dabola_UTM_Zone_29N',
                 'esriSRProjCS_DeirEzZorLevantStereographic',
                 'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_1',
                 'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_2',
                 'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_3',
                 'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_4',
                 'esriSRProjCS_DHDN_3_Degree_Gauss_Zone_5',
                 'esriSRProjCS_Douala_1948_AOF_West',
                 'esriSRProjCS_ED1950_3_Degree_GK_Zone_10',
                 'esriSRProjCS_ED1950_3_Degree_GK_Zone_11',
                 'esriSRProjCS_ED1950_3_Degree_GK_Zone_12',
                 'esriSRProjCS_ED1950_3_Degree_GK_Zone_13',
                 'esriSRProjCS_ED1950_3_Degree_GK_Zone_14',
                 'esriSRProjCS_ED1950_3_Degree_GK_Zone_15',
                 'esriSRProjCS_ED1950_3_Degree_GK_Zone_9',
                 'esriSRProjCS_ED1950_France_EuroLambert',
                 'esriSRProjCS_ED1950_TM27',
                 'esriSRProjCS_ED1950_TM30',
                 'esriSRProjCS_ED1950_TM33',
                 'esriSRProjCS_ED1950_TM36',
                 'esriSRProjCS_ED1950_TM39',
                 'esriSRProjCS_ED1950_TM42',
                 'esriSRProjCS_ED1950_TM45',
                 'esriSRProjCS_ED1950_Turkey_10',
                 'esriSRProjCS_ED1950_Turkey_11',
                 'esriSRProjCS_ED1950_Turkey_12',
                 'esriSRProjCS_ED1950_Turkey_13',
                 'esriSRProjCS_ED1950_Turkey_14',
                 'esriSRProjCS_ED1950_Turkey_15',
                 'esriSRProjCS_ED1950_Turkey_9',
                 'esriSRProjCS_ELD1979_Libya_10',
                 'esriSRProjCS_ELD1979_Libya_11',
                 'esriSRProjCS_ELD1979_Libya_12',
                 'esriSRProjCS_ELD1979_Libya_13',
                 'esriSRProjCS_ELD1979_Libya_5',
                 'esriSRProjCS_ELD1979_Libya_6',
                 'esriSRProjCS_ELD1979_Libya_7',
                 'esriSRProjCS_ELD1979_Libya_8',
                 'esriSRProjCS_ELD1979_Libya_9',
                 'esriSRProjCS_ELD1979_TM_12_NE',
                 'esriSRProjCS_ELD1979_UTM_Zone_32N',
                 'esriSRProjCS_ELD1979_UTM_Zone_33N',
                 'esriSRProjCS_ELD1979_UTM_Zone_34N',
                 'esriSRProjCS_ELD1979_UTM_Zone_35N',
                 'esriSRProjCS_EMEP_50KM_Grid',
                 'esriSRProjCS_EMEP_150KM_Grid',
                 'esriSRProjCS_Estonia1997_Estonia_National_Grid',
                 'esriSRProjCS_ETRS1989_Kp2000_Bornholm',
                 'esriSRProjCS_ETRS1989_Kp2000_Jutland',
                 'esriSRProjCS_ETRS1989_Kp2000_Zealand',
                 'esriSRProjCS_ETRS1989_LAEA',
                 'esriSRProjCS_ETRS1989_LCC',
                 'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_5',
                 'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_6',
                 'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_7',
                 'esriSRProjCS_ETRS1989_Poland_CS2000_Zone_8',
                 'esriSRProjCS_ETRS1989_Poland_CS92',
                 'esriSRProjCS_ETRS1989_TM_30_NE',
                 'esriSRProjCS_ETRS1989_TM_Baltic_1993',
                 'esriSRProjCS_ETRS1989_UTM_Zone_26N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_27N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_28N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_29N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_30N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_31N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_32N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_33N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_34N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_35N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_36N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_37N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_38N',
                 'esriSRProjCS_ETRS1989_UTM_Zone_39N',
                 'esriSRProjCS_ETRS1989_UWPP_1992',
                 'esriSRProjCS_ETRS1989_UWPP_2000_PAS_5',
                 'esriSRProjCS_ETRS1989_UWPP_2000_PAS_6',
                 'esriSRProjCS_ETRS1989_UWPP_2000_PAS_7',
                 'esriSRProjCS_ETRS1989_UWPP_2000_PAS_8',
                 'esriSRProjCS_EUREF_FIN_TM35FIN',
                 'esriSRProjCS_EverestModified1969_RSO_Malaya_Meters',
                 'esriSRProjCS_FortDesaix_UTM_20N',
                 'esriSRProjCS_FortMarigot_UTM_20N',
                 'esriSRProjCS_GDA1994_South_Australia_Lambert',
                 'esriSRProjCS_GDA1994_VICGRID94',
                 'esriSRProjCS_GrandComoros_UTM_38S',
                 'esriSRProjCS_Guernsey_Grid',
                 'esriSRProjCS_GunungSegara_NEIEZ',
                 'esriSRProjCS_Hanoi1972_GK_106_NE',
                 'esriSRProjCS_Helle1954_Jan_Mayen_Grid',
                 'esriSRProjCS_Hito_XVIII_1963_Argentina_2',
                 'esriSRProjCS_Hito_XVIII_1963_UTM_19S',
                 'esriSRProjCS_Hjorsey1955_UTM_Zone_26N',
                 'esriSRProjCS_Hjorsey1955_UTM_Zone_27N',
                 'esriSRProjCS_Hjorsey1955_UTM_Zone_28N',
                 'esriSRProjCS_IGM1995_UTM_Zone_32N',
                 'esriSRProjCS_IGM1995_UTM_Zone_33N',
                 'esriSRProjCS_IGN53_Mare_UTM_58S',
                 'esriSRProjCS_IGN56_Lifou_UTM_58S',
                 'esriSRProjCS_IGN72_GrandeTerre_UTM_58S',
                 'esriSRProjCS_IGN72_NukuHiva_UTM_7S',
                 'esriSRProjCS_IRENET95_Irish_Transverse_Mercator',
                 'esriSRProjCS_IRENET95_UTM_Zone_29N',
                 'esriSRProjCS_ISN1993_Lambert_1993',
                 'esriSRProjCS_JGD2000_Japan_Zone_1',
                 'esriSRProjCS_JGD2000_Japan_Zone_10',
                 'esriSRProjCS_JGD2000_Japan_Zone_11',
                 'esriSRProjCS_JGD2000_Japan_Zone_12',
                 'esriSRProjCS_JGD2000_Japan_Zone_13',
                 'esriSRProjCS_JGD2000_Japan_Zone_14',
                 'esriSRProjCS_JGD2000_Japan_Zone_15',
                 'esriSRProjCS_JGD2000_Japan_Zone_16',
                 'esriSRProjCS_JGD2000_Japan_Zone_17',
                 'esriSRProjCS_JGD2000_Japan_Zone_18',
                 'esriSRProjCS_JGD2000_Japan_Zone_19',
                 'esriSRProjCS_JGD2000_Japan_Zone_2',
                 'esriSRProjCS_JGD2000_Japan_Zone_3',
                 'esriSRProjCS_JGD2000_Japan_Zone_4',
                 'esriSRProjCS_JGD2000_Japan_Zone_5',
                 'esriSRProjCS_JGD2000_Japan_Zone_6',
                 'esriSRProjCS_JGD2000_Japan_Zone_7',
                 'esriSRProjCS_JGD2000_Japan_Zone_8',
                 'esriSRProjCS_JGD2000_Japan_Zone_9',
                 'esriSRProjCS_JGD2000_UTM_Zone_51N',
                 'esriSRProjCS_JGD2000_UTM_Zone_52N',
                 'esriSRProjCS_JGD2000_UTM_Zone_53N',
                 'esriSRProjCS_JGD2000_UTM_Zone_54N',
                 'esriSRProjCS_JGD2000_UTM_Zone_55N',
                 'esriSRProjCS_JGD2000_UTM_Zone_56N',
                 'esriSRProjCS_Jordan_JTM',
                 'esriSRProjCS_K0_1949_UTM_42S',
                 'esriSRProjCS_Kandawala_Ceylon_Belt_Meters',
                 'esriSRProjCS_Kandawala_Ceylon_Belt_Indian_Yards_1937',
                 'esriSRProjCS_Kertau_RSO_Malaya_Chains',
                 'esriSRProjCS_Kertau_RSO_Malaya_Meters',
                 'esriSRProjCS_Kertau_Singapore_Grid',
                 'esriSRProjCS_Korean1985_Korea_Central_Belt',
                 'esriSRProjCS_Korean1985_Korea_East_Belt',
                 'esriSRProjCS_Korean1985_Korea_West_Belt',
                 'esriSRProjCS_Kousseri_UTM_Zone_33N',
                 'esriSRProjCS_LakeMaracaibo_Grid',
                 'esriSRProjCS_LakeMaracaibo_La_Rosa_Grid',
                 'esriSRProjCS_LakeMaracaibo_Grid_M1',
                 'esriSRProjCS_LakeMaracaibo_Grid_M3',
                 'esriSRProjCS_LKS1992_Latvia_TM',
                 'esriSRProjCS_Locodjo1965_TM_5_NW',
                 'esriSRProjCS_Luxembourg1930_Gauss',
                 'esriSRProjCS_Makassar_NEIEZ',
                 'esriSRProjCS_Manoca1962_UTM_Zone_32N',
                 'esriSRProjCS_MGI_3_Degree_Gauss_Zone_5',
                 'esriSRProjCS_MGI_3_Degree_Gauss_Zone_6',
                 'esriSRProjCS_MGI_3_Degree_Gauss_Zone_7',
                 'esriSRProjCS_MGI_3_Degree_Gauss_Zone_8',
                 'esriSRProjCS_MGI_Balkans_5',
                 'esriSRProjCS_MGI_Balkans_6',
                 'esriSRProjCS_MGI_Balkans_7',
                 'esriSRProjCS_MGI_Balkans_8',
                 'esriSRProjCS_MGI_Slovenia_Grid',
                 'esriSRProjCS_MOP78_UTM_1S',
                 'esriSRProjCS_MountDillon_Tobago_Grid',
                 'esriSRProjCS_NAD1927_10TM_AEP_Forest',
                 'esriSRProjCS_NAD1927_10TM_AEP_Resource',
                 'esriSRProjCS_NAD1927_3TM_111',
                 'esriSRProjCS_NAD1927_3TM_114',
                 'esriSRProjCS_NAD1927_3TM_117',
                 'esriSRProjCS_NAD1927_3TM_120',
                 'esriSRProjCS_NAD1927_Alaska_Albers_Feet',
                 'esriSRProjCS_NAD1927_Alaska_Albers_Meters',
                 'esriSRProjCS_NAD1927_CGQ77_Quebec_Lambert',
                 'esriSRProjCS_NAD1927_Cuba_Norte',
                 'esriSRProjCS_NAD1927_Cuba_Sur',
                 'esriSRProjCS_NAD1927_Georgia_Statewide_Albers',
                 'esriSRProjCS_NAD1927_Quebec_Lambert',
                 'esriSRProjCS_NAD1927_Texas_Statewide_Mapping_System',
                 'esriSRProjCS_NAD1927_UTM_Zone_1N',
                 'esriSRProjCS_NAD1927_UTM_Zone_2N',
                 'esriSRProjCS_NAD1927_UTM_Zone_59N',
                 'esriSRProjCS_NAD1927_UTM_Zone_60N',
                 'esriSRProjCS_NAD1983_10TM_AEP_Forest',
                 'esriSRProjCS_NAD1983_10TM_AEP_Resource',
                 'esriSRProjCS_NAD1983_3TM_111',
                 'esriSRProjCS_NAD1983_3TM_114',
                 'esriSRProjCS_NAD1983_3TM_117',
                 'esriSRProjCS_NAD1983_3TM_120',
                 'esriSRProjCS_NAD1983_USGS_USA_Albers',
                 'esriSRProjCS_NAD1983_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Arizona_East_FIPS_0201_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Arizona_West_FIPS_0203_Feet_Intl',
                 'esriSRProjCS_NAD1983_BC_Environment_Albers',
                 'esriSRProjCS_NAD1983_CRS98_MTM_10',
                 'esriSRProjCS_NAD1983_CSRS98_MTM_2_SCoPQ',
                 'esriSRProjCS_NAD1983_CRS98_MTM_3',
                 'esriSRProjCS_NAD1983_CRS98_MTM_4',
                 'esriSRProjCS_NAD1983_CRS98_MTM_5',
                 'esriSRProjCS_NAD1983_CRS98_MTM_6',
                 'esriSRProjCS_NAD1983_CRS98_MTM_7',
                 'esriSRProjCS_NAD1983_CRS98_MTM_8',
                 'esriSRProjCS_NAD1983_CRS98_MTM_9',
                 'esriSRProjCS_NAD1983_CSRS98_Prince_Edward_Island',
                 'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_11N',
                 'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_12N',
                 'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_13N',
                 'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_17N',
                 'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_18N',
                 'esriSRProjCS_NAD1983_CSRS98_UTM_Zone_21N',
                 'esriSRProjCS_NAD1983_Georgia_Statewide_Lambert',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Door_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Door_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Green_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Green_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Price_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Price_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Meters',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Feet',
                 'esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Meters',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Arizona_East_FIPS_0201_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Arizona_West_FIPS_0203_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_California_III_FIPS_0403_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_California_II_FIPS_0402_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_California_IV_FIPS_0404_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_California_I_FIPS_0401_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_California_VI_FIPS_0406_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_California_V_FIPS_0405_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Colorado_Central_FIPS_0502_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Colorado_North_FIPS_0501_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Colorado_South_FIPS_0503_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Connecticut_FIPS_0600_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Delaware_FIPS_0700_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Florida_East_FIPS_0901_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Florida_North_FIPS_0903_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Florida_West_FIPS_0902_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Georgia_East_FIPS_1001_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Georgia_West_FIPS_1002_Ft',
                 'esriSRProjCS_NAD1983HARN_Guam_Map_Grid',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_1_FIPS_5101_Feet',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_2_FIPS_5102_Feet',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_3_FIPS_5103_Feet',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_4_FIPS_5104_Feet',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_5_FIPS_5105_Feet',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Iowa_North_FIPS_1401',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Iowa_South_FIPS_1402',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Idaho_Central_FIPS_1102_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Idaho_East_FIPS_1101_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Idaho_West_FIPS_1103_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Indiana_East_FIPS_1301_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Indiana_West_FIPS_1302_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_FIPS_1600',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_North_FIPS_1601_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_South_FIPS_1602_Ft',
                 'esriSRProjCS_NAD1983HARN_Maine_2000_Central_Zone',
                 'esriSRProjCS_NAD1983HARN_Maine_2000_East_Zone',
                 'esriSRProjCS_NAD1983HARN_Maine_2000_West_Zone',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Island_FIPS_2002_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Mainland_FIPS_2001_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Maryland_FIPS_1900_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Michigan_North_FIPS_2111_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Michigan_South_FIPS_2113_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_East_FIPS_2301_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_West_FIPS_2302_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Montana_FIPS_2500_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_North_FIPS_3301_Ft_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_South_FIPS_3302_Ft_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_Central_FIPS_3002_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_East_FIPS_3001_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_West_FIPS_3003_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_New_York_Central_FIPS_3102_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_New_York_East_FIPS_3101_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_New_York_Long_Island_FIPS_3104_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_New_York_West_FIPS_3103_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_North_FIPS_3501_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_South_FIPS_3502_Ft',
                 'esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert',
                 'esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Oregon_North_FIPS_3601_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Oregon_South_FIPS_3602_Feet_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Tennessee_FIPS_4100_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Texas_Central_FIPS_4203_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_Central_FIPS_4202_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_FIPS_4201_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_Central_FIPS_4204_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_FIPS_4205_Ft',
                 'esriSRProjCS_NAD1983HARN_UTM_Zone_11N',
                 'esriSRProjCS_NAD1983HARN_UTM_Zone_12N',
                 'esriSRProjCS_NAD1983HARN_UTM_Zone_13N',
                 'esriSRProjCS_NAD1983HARN_UTM_Zone_18N',
                 'esriSRProjCS_NAD1983HARN_UTM_Zone_2S',
                 'esriSRProjCS_NAD1983HARN_UTM_Zone_4N',
                 'esriSRProjCS_NAD1983HARN_UTM_Zone_5N',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Utah_Central_FIPS_4302_Ft_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Utah_North_FIPS_4301_Ft_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Utah_South_FIPS_4303_Ft_Intl',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Virginia_North_FIPS_4501_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Virginia_South_FIPS_4502_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Washington_North_FIPS_4601_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Washington_South_FIPS_4602_Ft',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_Central_FIPS_4802_Feet',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_North_FIPS_4801_Feet',
                 'esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_South_FIPS_4803_Feet',
                 'esriSRProjCS_NAD1983_Idaho_TM',
                 'esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600',
                 'esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600_Feet',
                 'esriSRProjCS_NAD1983_Maine_2000_East_Zone',
                 'esriSRProjCS_NAD1983_Maine_2000_Central_Zone',
                 'esriSRProjCS_NAD1983_Maine_2000_West_Zone',
                 'esriSRProjCS_NAD1983_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Michigan_North_FIPS_2111_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Michigan_South_FIPS_2113_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Montana_FIPS_2500_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_North_Dakota_North_FIPS_3301_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_North_Dakota_South_FIPS_3302_Feet_Intl',
                 'esriSRProjCS_NAD1983_Oregon_Statewide_Lambert',
                 'esriSRProjCS_NAD1983_Oregon_Statewide_Lambert_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Oregon_North_FIPS_3601_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Oregon_South_FIPS_3602_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_South_Carolina_FIPS_3900_Feet_Intl',
                 'esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Albers',
                 'esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Lambert',
                 'esriSRProjCS_NAD1983_UTM_Zone_1N',
                 'esriSRProjCS_NAD1983_UTM_Zone_2N',
                 'esriSRProjCS_NAD1983_UTM_Zone_59N',
                 'esriSRProjCS_NAD1983_UTM_Zone_60N',
                 'esriSRProjCS_NAD1983_StatePlane_Utah_Central_FIPS_4302_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Utah_North_FIPS_4301_Feet_Intl',
                 'esriSRProjCS_NAD1983_StatePlane_Utah_South_FIPS_4303_Feet_Intl',
                 'esriSRProjCS_Naparima_1955_UTM_Zone_20N',
                 'esriSRProjCS_NEA74_Noumea_UTM_58S',
                 'esriSRProjCS_NGO1948_Baerum_Kommune',
                 'esriSRProjCS_NGO1948_Bergenhalvoen',
                 'esriSRProjCS_NGO1948_Oslo_Kommune',
                 'esriSRProjCS_NZGD1949_Amuri_Circuit',
                 'esriSRProjCS_NZGD1949_Bay_of_Plenty_Circuit',
                 'esriSRProjCS_NZGD1949_Bluff_Circuit',
                 'esriSRProjCS_NZGD1949_Buller_Circuit',
                 'esriSRProjCS_NZGD1949_Collingwood_Circuit',
                 'esriSRProjCS_NZGD1949_Gawler_Circuit',
                 'esriSRProjCS_NZGD1949_Grey_Circuit',
                 'esriSRProjCS_NZGD1949_Hawkes_Bay_Circuit',
                 'esriSRProjCS_NZGD1949_Hokitika_Circuit',
                 'esriSRProjCS_NZGD1949_Jacksons_Bay_Circuit',
                 'esriSRProjCS_NZGD1949_Karamea_Circuit',
                 'esriSRProjCS_NZGD1949_Lindis_Peak_Circuit',
                 'esriSRProjCS_NZGD1949_Marlborough_Circuit',
                 'esriSRProjCS_NZGD1949_Mount_Eden_Circuit',
                 'esriSRProjCS_NZGD1949_Mount_Nicholas_Circuit',
                 'esriSRProjCS_NZGD1949_Mount_Pleasant_Circuit',
                 'esriSRProjCS_NZGD1949_Mount_York_Circuit',
                 'esriSRProjCS_NZGD1949_Nelson_Circuit',
                 'esriSRProjCS_NZGD1949_North_Taieri_Circuit',
                 'esriSRProjCS_NZGD1949_Observation_Point_Circuit',
                 'esriSRProjCS_NZGD1949_Okarito_Circuit',
                 'esriSRProjCS_NZGD1949_Poverty_Bay_Circuit',
                 'esriSRProjCS_NZGD1949_Taranaki_Circuit',
                 'esriSRProjCS_NZGD1949_Timaru_Circuit',
                 'esriSRProjCS_NZGD1949_Tuhirangi_Circuit',
                 'esriSRProjCS_NZGD1949_UTM_Zone_58S',
                 'esriSRProjCS_NZGD1949_UTM_Zone_59S',
                 'esriSRProjCS_NZGD1949_UTM_Zone_60S',
                 'esriSRProjCS_NZGD1949_Wairarapa_Circuit',
                 'esriSRProjCS_NZGD1949_Wanganui_Circuit',
                 'esriSRProjCS_NZGD1949_Wellington_Circuit',
                 'esriSRProjCS_NZGD2000_Amuri_Circuit',
                 'esriSRProjCS_NZGD2000_Bay_of_Plenty_Circuit',
                 'esriSRProjCS_NZGD2000_Bluff_Circuit',
                 'esriSRProjCS_NZGD2000_Buller_Circuit',
                 'esriSRProjCS_NZGD2000_Chatham_Island_Circuit',
                 'esriSRProjCS_NZGD2000_Collingwood_Circuit',
                 'esriSRProjCS_NZGD2000_Gawler_Circuit',
                 'esriSRProjCS_NZGD2000_Grey_Circuit',
                 'esriSRProjCS_NZGD2000_Hawkes_Bay_Circuit',
                 'esriSRProjCS_NZGD2000_Hokitika_Circuit',
                 'esriSRProjCS_NZGD2000_Jacksons_Bay_Circuit',
                 'esriSRProjCS_NZGD2000_Karamea_Circuit',
                 'esriSRProjCS_NZGD2000_Lindis_Peak_Circuit',
                 'esriSRProjCS_NZGD2000_Marlborough_Circuit',
                 'esriSRProjCS_NZGD2000_Mount_Eden_Circuit',
                 'esriSRProjCS_NZGD2000_Mount_Nicholas_Circuit',
                 'esriSRProjCS_NZGD2000_Mount_Pleasant_Circuit',
                 'esriSRProjCS_NZGD2000_Mount_York_Circuit',
                 'esriSRProjCS_NZGD2000_Nelson_Circuit',
                 'esriSRProjCS_NZGD2000_North_Taieri_Circuit',
                 'esriSRProjCS_NZGD2000_Observation_Point_Circuit',
                 'esriSRProjCS_NZGD2000_Okarito_Circuit',
                 'esriSRProjCS_NZGD2000_Poverty_Bay_Circuit',
                 'esriSRProjCS_NZGD2000_Taranaki_Circuit',
                 'esriSRProjCS_NZGD2000_Timaru_Circuit',
                 'esriSRProjCS_NZGD2000_New_Zealand_Transverse_Mercator',
                 'esriSRProjCS_NZGD2000_Tuhirangi_Circuit',
                 'esriSRProjCS_NZGD2000_UTM_Zone_58S',
                 'esriSRProjCS_NZGD2000_UTM_Zone_59S',
                 'esriSRProjCS_NZGD2000_UTM_Zone_60S',
                 'esriSRProjCS_NZGD2000_Wairarapa_Circuit',
                 'esriSRProjCS_NZGD2000_Wanganui_Circuit',
                 'esriSRProjCS_NZGD2000_Wellington_Circuit',
                 'esriSRProjCS_ObservatorioMeteorologico1965_Macau_Grid',
                 'esriSRProjCS_OSNI1952_Irish_National_Grid',
                 'esriSRProjCS_Pampa_del_Castillo_Argentina_2',
                 'esriSRProjCS_Perroud1950_Terre_Adelie_Polar_Stereographic',
                 'esriSRProjCS_Petrels1972_Terre_Adelie_Polar_Stereographic',
                 'esriSRProjCS_Piton_des_Neiges_TM_Reunion',
                 'esriSRProjCS_PortoSanto1995_UTM_Zone_28N',
                 'esriSRProjCS_PSAD1956_ICN_Regional',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_10',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_102E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_105E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_108E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_11',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_111E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_114E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_117E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_12',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_120E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_123E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_126E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_129E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_13',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_132E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_135E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_138E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_14',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_141E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_144E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_147E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_15',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_150E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_153E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_156E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_159E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_16',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_162E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_165E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168W',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_17',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171W',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174W',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177W',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_18',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_180E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_19',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_20',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_21',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_21E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_22',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_23',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_24',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_24E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_25',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_26',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_27',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_27E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_28',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_29',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_30',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_30E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_31',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_32',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_33',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_33E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_34',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_35',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_36',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_36E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_37',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_38',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_39',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_39E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_40',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_41',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_42',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_42E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_43',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_44',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_45',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_45E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_46',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_47',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_48',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_48E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_49',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_50',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_51',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_51E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_52',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_53',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_54',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_54E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_55',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_56',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_57',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_57E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_58',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_59',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_60',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_60E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_61',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_62',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_63',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_63E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_64',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_66E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_69E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_7',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_72E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_75E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_78E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_8',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_81E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_84E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_87E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_9',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_90E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_93E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_96E',
                 'esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_99E',
                 'esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_3',
                 'esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_4',
                 'esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_5',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_10',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_102E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_105E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_108E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_11',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_111E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_114E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_117E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_12',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_120E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_123E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_126E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_129E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_13',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_132E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_135E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_138E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_14',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_141E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_144E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_147E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_15',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_150E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_153E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_156E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_159E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_16',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_162E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_165E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168W',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_17',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171W',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174W',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177W',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_18',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_180E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_19',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_20',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_21',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_21E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_22',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_23',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_24',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_24E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_25',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_26',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_27',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_27E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_28',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_29',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_30',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_30E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_31',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_32',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_33',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_33E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_34',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_35',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_36',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_36E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_37',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_38',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_39',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_39E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_40',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_41',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_42',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_42E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_43',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_44',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_45',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_45E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_46',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_47',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_48',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_48E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_49',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_50',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_51',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_51E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_52',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_53',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_54',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_54E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_55',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_56',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_57',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_57E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_58',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_59',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_60',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_60E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_61',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_62',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_63',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_63E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_64',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_66E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_69E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_7',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_72E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_75E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_78E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_8',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_81E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_84E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_87E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_9',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_90E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_93E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_96E',
                 'esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_99E',
                 'esriSRProjCS_Qatar1948_Qatar_Grid',
                 'esriSRProjCS_Qornoq1927_UTM_Zone_22',
                 'esriSRProjCS_Qornoq1927_UTM_Zone_23',
                 'esriSRProjCS_Rassadiran_Nakhl_e_Taqi',
                 'esriSRProjCS_REGVEN_UTM_Zone_18',
                 'esriSRProjCS_REGVEN_UTM_Zone_19',
                 'esriSRProjCS_REGVEN_UTM_Zone_20',
                 'esriSRProjCS_RGFG1995_UTM_22N',
                 'esriSRProjCS_RGNC1991_Lambert_New_Caledonia',
                 'esriSRProjCS_RGR1992_UTM_40S',
                 'esriSRProjCS_Roma1940_Gauss_Boaga_Est',
                 'esriSRProjCS_Roma1940_Gauss_Boaga_Ovest',
                 'esriSRProjCS_RRAF1991_UTM_20N',
                 'esriSRProjCS_RT38_0_gon',
                 'esriSRProjCS_RT38_25_gon_O',
                 'esriSRProjCS_RT38_25_gon_V',
                 'esriSRProjCS_RT38_5_gon_O',
                 'esriSRProjCS_RT38_5_gon_V',
                 'esriSRProjCS_RT38_75_gon_V',
                 'esriSRProjCS_RT90_0_gon',
                 'esriSRProjCS_RT90_25_gon_O',
                 'esriSRProjCS_RT90_25_gon_V',
                 'esriSRProjCS_RT90_25_gon_W',
                 'esriSRProjCS_RT90_5_gon_O',
                 'esriSRProjCS_RT90_5_gon_V',
                 'esriSRProjCS_RT90_75_gon_V',
                 'esriSRProjCS_SAD1969_Brazil_Polyconic',
                 'esriSRProjCS_SainteAnne_UTM_20N',
                 'esriSRProjCS_SaintPierre_et_Miquelon_1950_UTM_21N',
                 'esriSRProjCS_Samoa1962_Samoa_Lambert',
                 'esriSRProjCS_AmericanSamoa1962_UTM_Zone_2S',
                 'esriSRProjCS_SierraLeone1924_New_Colony_Grid',
                 'esriSRProjCS_SierraLeone1924_New_War_Office_Grid',
                 'esriSRProjCS_SierraLeone1968_UTM_Zone_28N',
                 'esriSRProjCS_SierraLeone1968_UTM_Zone_29N',
                 'esriSRProjCS_SIRGAS_UTM_Zone_17N',
                 'esriSRProjCS_SIRGAS_UTM_Zone_17S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_18N',
                 'esriSRProjCS_SIRGAS_UTM_Zone_18S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_19N',
                 'esriSRProjCS_SIRGAS_UTM_Zone_19S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_20N',
                 'esriSRProjCS_SIRGAS_UTM_Zone_20S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_21N',
                 'esriSRProjCS_SIRGAS_UTM_Zone_21S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_22N',
                 'esriSRProjCS_SIRGAS_UTM_Zone_22S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_23S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_24S',
                 'esriSRProjCS_SIRGAS_UTM_Zone_25S',
                 'esriSRProjCS_South_Yemen_GK_Zone_8',
                 'esriSRProjCS_South_Yemen_GK_Zone_9',
                 'esriSRProjCS_Sphere_Cylindrical_Equal_Area',
                 'esriSRProjCS_ST71_Belep_UTM_58S',
                 'esriSRProjCS_ST84_Ile_des_Pins_UTM_58S',
                 'esriSRProjCS_ST87_Ouvea_UTM_58S',
                 'esriSRProjCS_SWEREF99_12_00',
                 'esriSRProjCS_SWEREF99_13_30',
                 'esriSRProjCS_SWEREF99_14_15',
                 'esriSRProjCS_SWEREF99_15_00',
                 'esriSRProjCS_SWEREF99_15_45',
                 'esriSRProjCS_SWEREF99_16_30',
                 'esriSRProjCS_SWEREF99_17_15',
                 'esriSRProjCS_SWEREF99_18_00',
                 'esriSRProjCS_SWEREF99_18_45',
                 'esriSRProjCS_SWEREF99_20_15',
                 'esriSRProjCS_SWEREF99_21_45',
                 'esriSRProjCS_SWEREF99_23_15',
                 'esriSRProjCS_SWEREF99_TM',
                 'esriSRProjCS_S_JTSK_Ferro_Krovak',
                 'esriSRProjCS_S_JTSK_Ferro_Krovak_East_North',
                 'esriSRProjCS_S_JTSK_Krovak',
                 'esriSRProjCS_S_JTSK_Krovak_East_North',
                 'esriSRProjCS_Tahaa_UTM_5S',
                 'esriSRProjCS_Tahiti_UTM_6S',
                 'esriSRProjCS_Timbalai1948_RSO_Borneo_Chains',
                 'esriSRProjCS_Timbalai1948_RSO_Borneo_Feet',
                 'esriSRProjCS_Timbalai1948_RSO_Borneo_Meters',
                 'esriSRProjCS_TM75_Irish_Grid',
                 'esriSRProjCS_Trinidad1903_Trinidad_Grid_Feet_Clarke',
                 'esriSRProjCS_UWPP_1992',
                 'esriSRProjCS_UWPP_2000_PAS_5',
                 'esriSRProjCS_UWPP_2000_PAS_6',
                 'esriSRProjCS_UWPP_2000_PAS_7',
                 'esriSRProjCS_UWPP_2000_PAS_8',
                 'esriSRProjCS_NordAlgerie_Ancienne_Degree',
                 'esriSRProjCS_SudAlgerie_Ancienne_Degree',
                 'esriSRProjCS_WGS1972_BE_TM_106_NE',
                 'esriSRProjCS_WGS1984_Antarctic_Polar_Stereographic',
                 'esriSRProjCS_WGS1984_Australian_Antarctic_Lambert',
                 'esriSRProjCS_WGS1984_Australian_Antarctic_Polar_Stereographic',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_20N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_21N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_22N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_23N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_24N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_25N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_26N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_27N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_28N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_29N',
                 'esriSRProjCS_WGS1984_Complex_UTM_Zone_30N',
                 'esriSRProjCS_WGS1984_TM_116_SE',
                 'esriSRProjCS_WGS1984_TM_132_SE',
                 'esriSRProjCS_WGS1984_TM_6_NE',
                 'esriSRProjCS_WorldAzimuthalEquidistant',
                 'esriSRProjCS_WorldCube',
                 'esriSRProjCS_WorldCylindricalEqualArea',
                 'esriSRProjCS_WorldFuller',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_102E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_105E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_108E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_111E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_114E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_117E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_120E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_123E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_126E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_129E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_132E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_135E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_25',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_26',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_27',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_28',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_29',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_30',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_31',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_32',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_33',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_34',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_35',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_36',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_37',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_38',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_39',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_40',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_41',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_42',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_43',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_44',
                 'esriSRProjCS_Xian1980_3_Degree_GK_Zone_45',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_75E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_78E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_81E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_84E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_87E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_90E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_93E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_96E',
                 'esriSRProjCS_Xian1980_3_Degree_GK_CM_99E',
                 'esriSRProjCS_Xian1980_GK_CM_105E',
                 'esriSRProjCS_Xian1980_GK_CM_111E',
                 'esriSRProjCS_Xian1980_GK_CM_117E',
                 'esriSRProjCS_Xian1980_GK_CM_123E',
                 'esriSRProjCS_Xian1980_GK_CM_129E',
                 'esriSRProjCS_Xian1980_GK_Zone_13',
                 'esriSRProjCS_Xian1980_GK_CM_135E',
                 'esriSRProjCS_Xian1980_GK_Zone_14',
                 'esriSRProjCS_Xian1980_GK_Zone_15',
                 'esriSRProjCS_Xian1980_GK_Zone_16',
                 'esriSRProjCS_Xian1980_GK_Zone_17',
                 'esriSRProjCS_Xian1980_GK_Zone_18',
                 'esriSRProjCS_Xian1980_GK_Zone_19',
                 'esriSRProjCS_Xian1980_GK_Zone_20',
                 'esriSRProjCS_Xian1980_GK_Zone_21',
                 'esriSRProjCS_Xian1980_GK_Zone_22',
                 'esriSRProjCS_Xian1980_GK_Zone_23',
                 'esriSRProjCS_Xian1980_GK_CM_75E',
                 'esriSRProjCS_Xian1980_GK_CM_81E',
                 'esriSRProjCS_Xian1980_GK_CM_87E',
                 'esriSRProjCS_Xian1980_GK_CM_93E',
                 'esriSRProjCS_Xian1980_GK_CM_99E',
                 'esriSRProjCS_Yemen_NGN_1996_UTM_Zone_38N',
                 'esriSRProjCS_Yemen_NGN_1996_UTM_Zone_39N',
                 'esriSRProjCS_Zanderij_Suriname_Old_TM',
                 'esriSRProjCS_Zanderij_Suriname_TM',
                 'esriSRProjCS_Zanderij_TM_54_NW']
    esriSRProjCS_Abidjan1987_TM_5_NW = 2165
    esriSRProjCS_Accra_Ghana_Grid = 2136
    esriSRProjCS_Accra_TM_1_NW = 2137
    esriSRProjCS_AGD1966_ACT_Grid_AGC_Zone = 102071
    esriSRProjCS_AGD1966_ISG_54_2 = 102072
    esriSRProjCS_AGD1966_ISG_54_3 = 102073
    esriSRProjCS_AGD1966_ISG_55_1 = 102074
    esriSRProjCS_AGD1966_ISG_55_2 = 102075
    esriSRProjCS_AGD1966_ISG_55_3 = 102076
    esriSRProjCS_AGD1966_ISG_56_1 = 102077
    esriSRProjCS_AGD1966_ISG_56_2 = 102078
    esriSRProjCS_AGD1966_ISG_56_3 = 102079
    esriSRProjCS_AGD1966_VICGRID = 3110
    esriSRProjCS_Ain_el_Abd_Aramco_Lambert = 2318
    esriSRProjCS_Albanian1987_GK_Zone_4 = 2462
    esriSRProjCS_Arc1950_UTM_Zone_34S = 20934
    esriSRProjCS_Arc1950_UTM_Zone_35S = 20935
    esriSRProjCS_Arc1950_UTM_Zone_36S = 20936
    esriSRProjCS_Arc1960_UTM_Zone_35N = 21095
    esriSRProjCS_Arc1960_UTM_Zone_35S = 21035
    esriSRProjCS_Arc1960_UTM_Zone_36N = 21096
    esriSRProjCS_Arc1960_UTM_Zone_36S = 21036
    esriSRProjCS_Arc1960_UTM_Zone_37N = 21097
    esriSRProjCS_Arc1960_UTM_Zone_37S = 21037
    esriSRProjCS_AzoresCentral1995_UTM_Zone_26N = 3063
    esriSRProjCS_AzoresOriental1995_UTM_Zone_26N = 3062
    esriSRProjCS_Batavia_NEIEZ = 3001
    esriSRProjCS_Batavia_TM_109_SE = 2308
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_102E = 2431
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_105E = 2432
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_108E = 2433
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_111E = 2434
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_114E = 2435
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_117E = 2436
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_120E = 2437
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_123E = 2438
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_126E = 2439
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_129E = 2440
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_132E = 2441
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_135E = 2442
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_25 = 2401
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_26 = 2402
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_27 = 2403
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_28 = 2404
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_29 = 2405
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_30 = 2406
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_31 = 2407
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_32 = 2408
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_33 = 2409
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_34 = 2410
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_35 = 2411
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_36 = 2412
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_37 = 2413
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_38 = 2414
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_39 = 2415
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_40 = 2416
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_41 = 2417
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_42 = 2418
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_43 = 2419
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_44 = 2420
    esriSRProjCS_Beijing1954_3_Degree_GK_Zone_45 = 2421
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_75E = 2422
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_78E = 2423
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_81E = 2424
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_84E = 2425
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_87E = 2426
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_90E = 2427
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_93E = 2428
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_96E = 2429
    esriSRProjCS_Beijing1954_3_Degree_GK_CM_99E = 2430
    esriSRProjCS_Bermuda_2000_National_Grid = 3770
    esriSRProjCS_Bern_1898_Bern_LV03C = 21780
    esriSRProjCS_Bissau_UTM_Zone_28N = 2095
    esriSRProjCS_CampoInchauspe_UTM_Zone_19S = 2315
    esriSRProjCS_CampoInchauspe_UTM_Zone_20S = 2316
    esriSRProjCS_Cape_UTM_Zone_34S = 22234
    esriSRProjCS_Cape_UTM_Zone_35S = 22235
    esriSRProjCS_Cape_UTM_Zone_36S = 22236
    esriSRProjCS_Carthage_TM_11_NE = 2088
    esriSRProjCS_ChathamIslands1979_Map_Grid = 5519
    esriSRProjCS_ChosMalal1914_Argentina_2 = 2081
    esriSRProjCS_Combani_1950_UTM_38S = 2980
    esriSRProjCS_Conakry1905_UTM_Zone_28N = 31528
    esriSRProjCS_Conakry1905_UTM_Zone_29N = 31529
    esriSRProjCS_CSG1967_UTM_22N = 2971
    esriSRProjCS_Dabola_UTM_Zone_28N = 3461
    esriSRProjCS_Dabola_UTM_Zone_29N = 3462
    esriSRProjCS_DeirEzZorLevantStereographic = 22780
    esriSRProjCS_DHDN_3_Degree_Gauss_Zone_1 = 5520
    esriSRProjCS_DHDN_3_Degree_Gauss_Zone_2 = 31466
    esriSRProjCS_DHDN_3_Degree_Gauss_Zone_3 = 31467
    esriSRProjCS_DHDN_3_Degree_Gauss_Zone_4 = 31468
    esriSRProjCS_DHDN_3_Degree_Gauss_Zone_5 = 31469
    esriSRProjCS_Douala_1948_AOF_West = 3119
    esriSRProjCS_ED1950_3_Degree_GK_Zone_10 = 2207
    esriSRProjCS_ED1950_3_Degree_GK_Zone_11 = 2208
    esriSRProjCS_ED1950_3_Degree_GK_Zone_12 = 2209
    esriSRProjCS_ED1950_3_Degree_GK_Zone_13 = 2210
    esriSRProjCS_ED1950_3_Degree_GK_Zone_14 = 2211
    esriSRProjCS_ED1950_3_Degree_GK_Zone_15 = 2212
    esriSRProjCS_ED1950_3_Degree_GK_Zone_9 = 2206
    esriSRProjCS_ED1950_France_EuroLambert = 2192
    esriSRProjCS_ED1950_TM27 = 2319
    esriSRProjCS_ED1950_TM30 = 2320
    esriSRProjCS_ED1950_TM33 = 2321
    esriSRProjCS_ED1950_TM36 = 2322
    esriSRProjCS_ED1950_TM39 = 2323
    esriSRProjCS_ED1950_TM42 = 2324
    esriSRProjCS_ED1950_TM45 = 2325
    esriSRProjCS_ED1950_Turkey_10 = 2182
    esriSRProjCS_ED1950_Turkey_11 = 2183
    esriSRProjCS_ED1950_Turkey_12 = 2184
    esriSRProjCS_ED1950_Turkey_13 = 2185
    esriSRProjCS_ED1950_Turkey_14 = 2186
    esriSRProjCS_ED1950_Turkey_15 = 2187
    esriSRProjCS_ED1950_Turkey_9 = 2181
    esriSRProjCS_ELD1979_Libya_10 = 2073
    esriSRProjCS_ELD1979_Libya_11 = 2074
    esriSRProjCS_ELD1979_Libya_12 = 2075
    esriSRProjCS_ELD1979_Libya_13 = 2076
    esriSRProjCS_ELD1979_Libya_5 = 2068
    esriSRProjCS_ELD1979_Libya_6 = 2069
    esriSRProjCS_ELD1979_Libya_7 = 2070
    esriSRProjCS_ELD1979_Libya_8 = 2071
    esriSRProjCS_ELD1979_Libya_9 = 2072
    esriSRProjCS_ELD1979_TM_12_NE = 2087
    esriSRProjCS_ELD1979_UTM_Zone_32N = 2077
    esriSRProjCS_ELD1979_UTM_Zone_33N = 2078
    esriSRProjCS_ELD1979_UTM_Zone_34N = 2079
    esriSRProjCS_ELD1979_UTM_Zone_35N = 2080
    esriSRProjCS_EMEP_50KM_Grid = 102068
    esriSRProjCS_EMEP_150KM_Grid = 102069
    esriSRProjCS_Estonia1997_Estonia_National_Grid = 3301
    esriSRProjCS_ETRS1989_Kp2000_Bornholm = 2198
    esriSRProjCS_ETRS1989_Kp2000_Jutland = 2196
    esriSRProjCS_ETRS1989_Kp2000_Zealand = 2197
    esriSRProjCS_ETRS1989_LAEA = 3035
    esriSRProjCS_ETRS1989_LCC = 3034
    esriSRProjCS_ETRS1989_Poland_CS2000_Zone_5 = 2176
    esriSRProjCS_ETRS1989_Poland_CS2000_Zone_6 = 2177
    esriSRProjCS_ETRS1989_Poland_CS2000_Zone_7 = 2178
    esriSRProjCS_ETRS1989_Poland_CS2000_Zone_8 = 2179
    esriSRProjCS_ETRS1989_Poland_CS92 = 2180
    esriSRProjCS_ETRS1989_TM_30_NE = 2213
    esriSRProjCS_ETRS1989_TM_Baltic_1993 = 25884
    esriSRProjCS_ETRS1989_UTM_Zone_26N = 102097
    esriSRProjCS_ETRS1989_UTM_Zone_27N = 102098
    esriSRProjCS_ETRS1989_UTM_Zone_28N = 25828
    esriSRProjCS_ETRS1989_UTM_Zone_29N = 25829
    esriSRProjCS_ETRS1989_UTM_Zone_30N = 25830
    esriSRProjCS_ETRS1989_UTM_Zone_31N = 25831
    esriSRProjCS_ETRS1989_UTM_Zone_32N = 25832
    esriSRProjCS_ETRS1989_UTM_Zone_33N = 25833
    esriSRProjCS_ETRS1989_UTM_Zone_34N = 25834
    esriSRProjCS_ETRS1989_UTM_Zone_35N = 25835
    esriSRProjCS_ETRS1989_UTM_Zone_36N = 25836
    esriSRProjCS_ETRS1989_UTM_Zone_37N = 25837
    esriSRProjCS_ETRS1989_UTM_Zone_38N = 25838
    esriSRProjCS_ETRS1989_UTM_Zone_39N = 102099
    esriSRProjCS_ETRS1989_UWPP_1992 = 102173
    esriSRProjCS_ETRS1989_UWPP_2000_PAS_5 = 102174
    esriSRProjCS_ETRS1989_UWPP_2000_PAS_6 = 102175
    esriSRProjCS_ETRS1989_UWPP_2000_PAS_7 = 102176
    esriSRProjCS_ETRS1989_UWPP_2000_PAS_8 = 102177
    esriSRProjCS_EUREF_FIN_TM35FIN = 3067
    esriSRProjCS_EverestModified1969_RSO_Malaya_Meters = 102061
    esriSRProjCS_FortDesaix_UTM_20N = 2973
    esriSRProjCS_FortMarigot_UTM_20N = 2969
    esriSRProjCS_GDA1994_South_Australia_Lambert = 3107
    esriSRProjCS_GDA1994_VICGRID94 = 3111
    esriSRProjCS_GrandComoros_UTM_38S = 2999
    esriSRProjCS_Guernsey_Grid = 102070
    esriSRProjCS_GunungSegara_NEIEZ = 3000
    esriSRProjCS_Hanoi1972_GK_106_NE = 2093
    esriSRProjCS_Helle1954_Jan_Mayen_Grid = 3058
    esriSRProjCS_Hito_XVIII_1963_Argentina_2 = 2083
    esriSRProjCS_Hito_XVIII_1963_UTM_19S = 2084
    esriSRProjCS_Hjorsey1955_UTM_Zone_26N = 3054
    esriSRProjCS_Hjorsey1955_UTM_Zone_27N = 3055
    esriSRProjCS_Hjorsey1955_UTM_Zone_28N = 3056
    esriSRProjCS_IGM1995_UTM_Zone_32N = 3064
    esriSRProjCS_IGM1995_UTM_Zone_33N = 3065
    esriSRProjCS_IGN53_Mare_UTM_58S = 2995
    esriSRProjCS_IGN56_Lifou_UTM_58S = 2981
    esriSRProjCS_IGN72_GrandeTerre_UTM_58S = 3060
    esriSRProjCS_IGN72_NukuHiva_UTM_7S = 2978
    esriSRProjCS_IRENET95_Irish_Transverse_Mercator = 2157
    esriSRProjCS_IRENET95_UTM_Zone_29N = 2158
    esriSRProjCS_ISN1993_Lambert_1993 = 3057
    esriSRProjCS_JGD2000_Japan_Zone_1 = 2443
    esriSRProjCS_JGD2000_Japan_Zone_10 = 2452
    esriSRProjCS_JGD2000_Japan_Zone_11 = 2453
    esriSRProjCS_JGD2000_Japan_Zone_12 = 2454
    esriSRProjCS_JGD2000_Japan_Zone_13 = 2455
    esriSRProjCS_JGD2000_Japan_Zone_14 = 2456
    esriSRProjCS_JGD2000_Japan_Zone_15 = 2457
    esriSRProjCS_JGD2000_Japan_Zone_16 = 2458
    esriSRProjCS_JGD2000_Japan_Zone_17 = 2459
    esriSRProjCS_JGD2000_Japan_Zone_18 = 2460
    esriSRProjCS_JGD2000_Japan_Zone_19 = 2461
    esriSRProjCS_JGD2000_Japan_Zone_2 = 2444
    esriSRProjCS_JGD2000_Japan_Zone_3 = 2445
    esriSRProjCS_JGD2000_Japan_Zone_4 = 2446
    esriSRProjCS_JGD2000_Japan_Zone_5 = 2447
    esriSRProjCS_JGD2000_Japan_Zone_6 = 2448
    esriSRProjCS_JGD2000_Japan_Zone_7 = 2449
    esriSRProjCS_JGD2000_Japan_Zone_8 = 2450
    esriSRProjCS_JGD2000_Japan_Zone_9 = 2451
    esriSRProjCS_JGD2000_UTM_Zone_51N = 3097
    esriSRProjCS_JGD2000_UTM_Zone_52N = 3098
    esriSRProjCS_JGD2000_UTM_Zone_53N = 3099
    esriSRProjCS_JGD2000_UTM_Zone_54N = 3100
    esriSRProjCS_JGD2000_UTM_Zone_55N = 3101
    esriSRProjCS_JGD2000_UTM_Zone_56N = 102150
    esriSRProjCS_Jordan_JTM = 102158
    esriSRProjCS_K0_1949_UTM_42S = 3336
    esriSRProjCS_Kandawala_Ceylon_Belt_Meters = 102063
    esriSRProjCS_Kandawala_Ceylon_Belt_Indian_Yards_1937 = 102064
    esriSRProjCS_Kertau_RSO_Malaya_Chains = 24571
    esriSRProjCS_Kertau_RSO_Malaya_Meters = 102062
    esriSRProjCS_Kertau_Singapore_Grid = 24500
    esriSRProjCS_Korean1985_Korea_Central_Belt = 2097
    esriSRProjCS_Korean1985_Korea_East_Belt = 2096
    esriSRProjCS_Korean1985_Korea_West_Belt = 2098
    esriSRProjCS_Kousseri_UTM_Zone_33N = 2313
    esriSRProjCS_LakeMaracaibo_Grid = 2102
    esriSRProjCS_LakeMaracaibo_La_Rosa_Grid = 2104
    esriSRProjCS_LakeMaracaibo_Grid_M1 = 2101
    esriSRProjCS_LakeMaracaibo_Grid_M3 = 2103
    esriSRProjCS_LKS1992_Latvia_TM = 3059
    esriSRProjCS_Locodjo1965_TM_5_NW = 2164
    esriSRProjCS_Luxembourg1930_Gauss = 2169
    esriSRProjCS_Makassar_NEIEZ = 3002
    esriSRProjCS_Manoca1962_UTM_Zone_32N = 2215
    esriSRProjCS_MGI_3_Degree_Gauss_Zone_5 = 31265
    esriSRProjCS_MGI_3_Degree_Gauss_Zone_6 = 31266
    esriSRProjCS_MGI_3_Degree_Gauss_Zone_7 = 31267
    esriSRProjCS_MGI_3_Degree_Gauss_Zone_8 = 31268
    esriSRProjCS_MGI_Balkans_5 = 31275
    esriSRProjCS_MGI_Balkans_6 = 31276
    esriSRProjCS_MGI_Balkans_7 = 31277
    esriSRProjCS_MGI_Balkans_8 = 31279
    esriSRProjCS_MGI_Slovenia_Grid = 2170
    esriSRProjCS_MOP78_UTM_1S = 2988
    esriSRProjCS_MountDillon_Tobago_Grid = 2066
    esriSRProjCS_NAD1927_10TM_AEP_Forest = 102178
    esriSRProjCS_NAD1927_10TM_AEP_Resource = 102179
    esriSRProjCS_NAD1927_3TM_111 = 3771
    esriSRProjCS_NAD1927_3TM_114 = 3772
    esriSRProjCS_NAD1927_3TM_117 = 3773
    esriSRProjCS_NAD1927_3TM_120 = 3800
    esriSRProjCS_NAD1927_Alaska_Albers_Feet = 2964
    esriSRProjCS_NAD1927_Alaska_Albers_Meters = 102117
    esriSRProjCS_NAD1927_CGQ77_Quebec_Lambert = 2138
    esriSRProjCS_NAD1927_Cuba_Norte = 2085
    esriSRProjCS_NAD1927_Cuba_Sur = 2086
    esriSRProjCS_NAD1927_Georgia_Statewide_Albers = 102118
    esriSRProjCS_NAD1927_Quebec_Lambert = 32098
    esriSRProjCS_NAD1927_Texas_Statewide_Mapping_System = 3080
    esriSRProjCS_NAD1927_UTM_Zone_1N = 26701
    esriSRProjCS_NAD1927_UTM_Zone_2N = 26702
    esriSRProjCS_NAD1927_UTM_Zone_59N = 3370
    esriSRProjCS_NAD1927_UTM_Zone_60N = 3371
    esriSRProjCS_NAD1983_10TM_AEP_Forest = 3400
    esriSRProjCS_NAD1983_10TM_AEP_Resource = 3401
    esriSRProjCS_NAD1983_3TM_111 = 3775
    esriSRProjCS_NAD1983_3TM_114 = 3776
    esriSRProjCS_NAD1983_3TM_117 = 3777
    esriSRProjCS_NAD1983_3TM_120 = 3801
    esriSRProjCS_NAD1983_USGS_USA_Albers = 102039
    esriSRProjCS_NAD1983_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl = 2223
    esriSRProjCS_NAD1983_StatePlane_Arizona_East_FIPS_0201_Feet_Intl = 2222
    esriSRProjCS_NAD1983_StatePlane_Arizona_West_FIPS_0203_Feet_Intl = 2224
    esriSRProjCS_NAD1983_BC_Environment_Albers = 3005
    esriSRProjCS_NAD1983_CRS98_MTM_10 = 2952
    esriSRProjCS_NAD1983_CSRS98_MTM_2_SCoPQ = 2944
    esriSRProjCS_NAD1983_CRS98_MTM_3 = 2945
    esriSRProjCS_NAD1983_CRS98_MTM_4 = 2946
    esriSRProjCS_NAD1983_CRS98_MTM_5 = 2947
    esriSRProjCS_NAD1983_CRS98_MTM_6 = 2948
    esriSRProjCS_NAD1983_CRS98_MTM_7 = 2949
    esriSRProjCS_NAD1983_CRS98_MTM_8 = 2950
    esriSRProjCS_NAD1983_CRS98_MTM_9 = 2951
    esriSRProjCS_NAD1983_CSRS98_Prince_Edward_Island = 2954
    esriSRProjCS_NAD1983_CSRS98_UTM_Zone_11N = 2955
    esriSRProjCS_NAD1983_CSRS98_UTM_Zone_12N = 2956
    esriSRProjCS_NAD1983_CSRS98_UTM_Zone_13N = 2957
    esriSRProjCS_NAD1983_CSRS98_UTM_Zone_17N = 2958
    esriSRProjCS_NAD1983_CSRS98_UTM_Zone_18N = 2959
    esriSRProjCS_NAD1983_CSRS98_UTM_Zone_21N = 2962
    esriSRProjCS_NAD1983_Georgia_Statewide_Lambert = 102604
    esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Feet = 103700
    esriSRProjCS_NAD1983HARN_Adj_MN_Aitkin_Meters = 103600
    esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Feet = 103708
    esriSRProjCS_NAD1983HARN_Adj_MN_Anoka_Meters = 103608
    esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Feet = 103709
    esriSRProjCS_NAD1983HARN_Adj_MN_Becker_Meters = 103609
    esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Feet = 103710
    esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_North_Meters = 103610
    esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Feet = 103711
    esriSRProjCS_NAD1983HARN_Adj_MN_Beltrami_South_Meters = 103611
    esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Feet = 103712
    esriSRProjCS_NAD1983HARN_Adj_MN_Benton_Meters = 103612
    esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Feet = 103713
    esriSRProjCS_NAD1983HARN_Adj_MN_Big_Stone_Meters = 103613
    esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Feet = 103714
    esriSRProjCS_NAD1983HARN_Adj_MN_Blue_Earth_Meters = 103614
    esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Feet = 103715
    esriSRProjCS_NAD1983HARN_Adj_MN_Brown_Meters = 103615
    esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Feet = 103716
    esriSRProjCS_NAD1983HARN_Adj_MN_Carlton_Meters = 103616
    esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Feet = 103717
    esriSRProjCS_NAD1983HARN_Adj_MN_Carver_Meters = 103617
    esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Feet = 103718
    esriSRProjCS_NAD1983HARN_Adj_MN_Cass_North_Meters = 103618
    esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Feet = 103719
    esriSRProjCS_NAD1983HARN_Adj_MN_Cass_South_Meters = 103619
    esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Feet = 103720
    esriSRProjCS_NAD1983HARN_Adj_MN_Chippewa_Meters = 103620
    esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Feet = 103721
    esriSRProjCS_NAD1983HARN_Adj_MN_Chisago_Meters = 103621
    esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Feet = 103701
    esriSRProjCS_NAD1983HARN_Adj_MN_Clay_Meters = 103601
    esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Feet = 103702
    esriSRProjCS_NAD1983HARN_Adj_MN_Clearwater_Meters = 103602
    esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Feet = 103722
    esriSRProjCS_NAD1983HARN_Adj_MN_Cook_North_Meters = 103622
    esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Feet = 103723
    esriSRProjCS_NAD1983HARN_Adj_MN_Cook_South_Meters = 103623
    esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Feet = 103724
    esriSRProjCS_NAD1983HARN_Adj_MN_Cottonwood_Meters = 103624
    esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Feet = 103725
    esriSRProjCS_NAD1983HARN_Adj_MN_Crow_Wing_Meters = 103625
    esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Feet = 103726
    esriSRProjCS_NAD1983HARN_Adj_MN_Dakota_Meters = 103626
    esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Feet = 103727
    esriSRProjCS_NAD1983HARN_Adj_MN_Dodge_Meters = 103627
    esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Feet = 103728
    esriSRProjCS_NAD1983HARN_Adj_MN_Douglas_Meters = 103628
    esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Feet = 103729
    esriSRProjCS_NAD1983HARN_Adj_MN_Faribault_Meters = 103629
    esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Feet = 103730
    esriSRProjCS_NAD1983HARN_Adj_MN_Fillmore_Meters = 103630
    esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Feet = 103731
    esriSRProjCS_NAD1983HARN_Adj_MN_Freeborn_Meters = 103631
    esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Feet = 103732
    esriSRProjCS_NAD1983HARN_Adj_MN_Goodhue_Meters = 103632
    esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Feet = 103733
    esriSRProjCS_NAD1983HARN_Adj_MN_Grant_Meters = 103633
    esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Feet = 103734
    esriSRProjCS_NAD1983HARN_Adj_MN_Hennepin_Meters = 103634
    esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Feet = 103735
    esriSRProjCS_NAD1983HARN_Adj_MN_Houston_Meters = 103635
    esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Feet = 103703
    esriSRProjCS_NAD1983HARN_Adj_MN_Hubbard_Meters = 103603
    esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Feet = 103736
    esriSRProjCS_NAD1983HARN_Adj_MN_Isanti_Meters = 103636
    esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Feet = 103737
    esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_North_Meters = 103637
    esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Feet = 103738
    esriSRProjCS_NAD1983HARN_Adj_MN_Itasca_South_Meters = 103638
    esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Feet = 103739
    esriSRProjCS_NAD1983HARN_Adj_MN_Jackson_Meters = 103639
    esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Feet = 103740
    esriSRProjCS_NAD1983HARN_Adj_MN_Kanabec_Meters = 103640
    esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Feet = 103741
    esriSRProjCS_NAD1983HARN_Adj_MN_Kandiyohi_Meters = 103641
    esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Feet = 103742
    esriSRProjCS_NAD1983HARN_Adj_MN_Kittson_Meters = 103642
    esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Feet = 103743
    esriSRProjCS_NAD1983HARN_Adj_MN_Koochiching_Meters = 103643
    esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Feet = 103744
    esriSRProjCS_NAD1983HARN_Adj_MN_Lac_Qui_Parle_Meters = 103644
    esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Feet = 103704
    esriSRProjCS_NAD1983HARN_Adj_MN_Lake_Meters = 103604
    esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Feet = 103745
    esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_North_Meters = 103645
    esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Feet = 103746
    esriSRProjCS_NAD1983HARN_Adj_MN_Lake_of_the_Woods_South_Meters = 103646
    esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Feet = 103747
    esriSRProjCS_NAD1983HARN_Adj_MN_Le_Sueur_Meters = 103647
    esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Feet = 103748
    esriSRProjCS_NAD1983HARN_Adj_MN_Lincoln_Meters = 103648
    esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Feet = 103749
    esriSRProjCS_NAD1983HARN_Adj_MN_Lyon_Meters = 103649
    esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Feet = 103751
    esriSRProjCS_NAD1983HARN_Adj_MN_Mahnomen_Meters = 103651
    esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Feet = 103752
    esriSRProjCS_NAD1983HARN_Adj_MN_Marshall_Meters = 103652
    esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Feet = 103753
    esriSRProjCS_NAD1983HARN_Adj_MN_Martin_Meters = 103653
    esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Feet = 103750
    esriSRProjCS_NAD1983HARN_Adj_MN_McLeod_Meters = 103650
    esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Feet = 103754
    esriSRProjCS_NAD1983HARN_Adj_MN_Meeker_Meters = 103654
    esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Feet = 103705
    esriSRProjCS_NAD1983HARN_Adj_MN_Mille_Lacs_Meters = 103605
    esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Feet = 103755
    esriSRProjCS_NAD1983HARN_Adj_MN_Morrison_Meters = 103655
    esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Feet = 103756
    esriSRProjCS_NAD1983HARN_Adj_MN_Mower_Meters = 103656
    esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Feet = 103757
    esriSRProjCS_NAD1983HARN_Adj_MN_Murray_Meters = 103657
    esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Feet = 103758
    esriSRProjCS_NAD1983HARN_Adj_MN_Nicollet_Meters = 103658
    esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Feet = 103759
    esriSRProjCS_NAD1983HARN_Adj_MN_Nobles_Meters = 103659
    esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Feet = 103760
    esriSRProjCS_NAD1983HARN_Adj_MN_Norman_Meters = 103660
    esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Feet = 103761
    esriSRProjCS_NAD1983HARN_Adj_MN_Olmsted_Meters = 103661
    esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Feet = 103762
    esriSRProjCS_NAD1983HARN_Adj_MN_Ottertail_Meters = 103662
    esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Feet = 103763
    esriSRProjCS_NAD1983HARN_Adj_MN_Pennington_Meters = 103663
    esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Feet = 103764
    esriSRProjCS_NAD1983HARN_Adj_MN_Pine_Meters = 103664
    esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Feet = 103765
    esriSRProjCS_NAD1983HARN_Adj_MN_Pipestone_Meters = 103665
    esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Feet = 103766
    esriSRProjCS_NAD1983HARN_Adj_MN_Polk_Meters = 103666
    esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Feet = 103767
    esriSRProjCS_NAD1983HARN_Adj_MN_Pope_Meters = 103667
    esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Feet = 103768
    esriSRProjCS_NAD1983HARN_Adj_MN_Ramsey_Meters = 103668
    esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Feet = 103770
    esriSRProjCS_NAD1983HARN_Adj_MN_Redwood_Meters = 103670
    esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Feet = 103769
    esriSRProjCS_NAD1983HARN_Adj_MN_Red_Lake_Meters = 103669
    esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Feet = 103771
    esriSRProjCS_NAD1983HARN_Adj_MN_Renville_Meters = 103671
    esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Feet = 103772
    esriSRProjCS_NAD1983HARN_Adj_MN_Rice_Meters = 103672
    esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Feet = 103773
    esriSRProjCS_NAD1983HARN_Adj_MN_Rock_Meters = 103673
    esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Feet = 103774
    esriSRProjCS_NAD1983HARN_Adj_MN_Roseau_Meters = 103674
    esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Feet = 103778
    esriSRProjCS_NAD1983HARN_Adj_MN_Scott_Meters = 103678
    esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Feet = 103779
    esriSRProjCS_NAD1983HARN_Adj_MN_Sherburne_Meters = 103679
    esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Feet = 103780
    esriSRProjCS_NAD1983HARN_Adj_MN_Sibley_Meters = 103680
    esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Feet = 103781
    esriSRProjCS_NAD1983HARN_Adj_MN_Stearns_Meters = 103681
    esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Feet = 103782
    esriSRProjCS_NAD1983HARN_Adj_MN_Steele_Meters = 103682
    esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Feet = 103783
    esriSRProjCS_NAD1983HARN_Adj_MN_Stevens_Meters = 103683
    esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Feet = 103776
    esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_Central_Meters = 103676
    esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Feet = 103775
    esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_North_Meters = 103675
    esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Feet = 103777
    esriSRProjCS_NAD1983HARN_Adj_MN_St_Louis_South_Meters = 103677
    esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Feet = 103784
    esriSRProjCS_NAD1983HARN_Adj_MN_Swift_Meters = 103684
    esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Feet = 103785
    esriSRProjCS_NAD1983HARN_Adj_MN_Todd_Meters = 103685
    esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Feet = 103786
    esriSRProjCS_NAD1983HARN_Adj_MN_Traverse_Meters = 103686
    esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Feet = 103787
    esriSRProjCS_NAD1983HARN_Adj_MN_Wabasha_Meters = 103687
    esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Feet = 103788
    esriSRProjCS_NAD1983HARN_Adj_MN_Wadena_Meters = 103688
    esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Feet = 103789
    esriSRProjCS_NAD1983HARN_Adj_MN_Waseca_Meters = 103689
    esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Feet = 103706
    esriSRProjCS_NAD1983HARN_Adj_MN_Washington_Meters = 103606
    esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Feet = 103790
    esriSRProjCS_NAD1983HARN_Adj_MN_Watonwan_Meters = 103690
    esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Feet = 103707
    esriSRProjCS_NAD1983HARN_Adj_MN_Wilkin_Meters = 103607
    esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Feet = 103791
    esriSRProjCS_NAD1983HARN_Adj_MN_Winona_Meters = 103691
    esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Feet = 103792
    esriSRProjCS_NAD1983HARN_Adj_MN_Wright_Meters = 103692
    esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Feet = 103793
    esriSRProjCS_NAD1983HARN_Adj_MN_Yellow_Medicine_Meters = 103693
    esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Feet = 103900
    esriSRProjCS_NAD1983HARN_Adj_WI_Adams_Meters = 103800
    esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Feet = 103901
    esriSRProjCS_NAD1983HARN_Adj_WI_Ashland_Meters = 103801
    esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Feet = 103902
    esriSRProjCS_NAD1983HARN_Adj_WI_Barron_Meters = 103802
    esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Feet = 103944
    esriSRProjCS_NAD1983HARN_Adj_WI_Bayfield_Meters = 103844
    esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Feet = 103945
    esriSRProjCS_NAD1983HARN_Adj_WI_Burnett_Meters = 103845
    esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Feet = 103903
    esriSRProjCS_NAD1983HARN_Adj_WI_Brown_Meters = 103803
    esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Feet = 103904
    esriSRProjCS_NAD1983HARN_Adj_WI_Buffalo_Meters = 103804
    esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Feet = 103906
    esriSRProjCS_NAD1983HARN_Adj_WI_Clark_Meters = 103806
    esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Feet = 103905
    esriSRProjCS_NAD1983HARN_Adj_WI_Calumet_Meters = 103805
    esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Feet = 103947
    esriSRProjCS_NAD1983HARN_Adj_WI_Columbia_Meters = 103847
    esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Feet = 103946
    esriSRProjCS_NAD1983HARN_Adj_WI_Chippewa_Meters = 103846
    esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Feet = 103948
    esriSRProjCS_NAD1983HARN_Adj_WI_Crawford_Meters = 103848
    esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Feet = 103907
    esriSRProjCS_NAD1983HARN_Adj_WI_Dodge_Meters = 103807
    esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Feet = 103909
    esriSRProjCS_NAD1983HARN_Adj_WI_Douglas_Meters = 103809
    esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Feet = 103949
    esriSRProjCS_NAD1983HARN_Adj_WI_Dane_Meters = 103849
    esriSRProjCS_NAD1983HARN_Adj_WI_Door_Feet = 103908
    esriSRProjCS_NAD1983HARN_Adj_WI_Door_Meters = 103808
    esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Feet = 103910
    esriSRProjCS_NAD1983HARN_Adj_WI_Dunn_Meters = 103810
    esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Feet = 103950
    esriSRProjCS_NAD1983HARN_Adj_WI_EauClaire_Meters = 103850
    esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Feet = 103912
    esriSRProjCS_NAD1983HARN_Adj_WI_Fond_du_Lac_Meters = 103812
    esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Feet = 103911
    esriSRProjCS_NAD1983HARN_Adj_WI_Florence_Meters = 103811
    esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Feet = 103913
    esriSRProjCS_NAD1983HARN_Adj_WI_Forest_Meters = 103813
    esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Feet = 103952
    esriSRProjCS_NAD1983HARN_Adj_WI_GreenLake_Meters = 103852
    esriSRProjCS_NAD1983HARN_Adj_WI_Green_Feet = 103951
    esriSRProjCS_NAD1983HARN_Adj_WI_Green_Meters = 103851
    esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Feet = 103914
    esriSRProjCS_NAD1983HARN_Adj_WI_Grant_Meters = 103814
    esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Feet = 103915
    esriSRProjCS_NAD1983HARN_Adj_WI_Iowa_Meters = 103815
    esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Feet = 103916
    esriSRProjCS_NAD1983HARN_Adj_WI_Iron_Meters = 103816
    esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Feet = 103953
    esriSRProjCS_NAD1983HARN_Adj_WI_Jackson_Meters = 103853
    esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Feet = 103917
    esriSRProjCS_NAD1983HARN_Adj_WI_Jefferson_Meters = 103817
    esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Feet = 103918
    esriSRProjCS_NAD1983HARN_Adj_WI_Juneau_Meters = 103818
    esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Feet = 103919
    esriSRProjCS_NAD1983HARN_Adj_WI_Kenosha_Meters = 103819
    esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Feet = 103920
    esriSRProjCS_NAD1983HARN_Adj_WI_Kewaunee_Meters = 103820
    esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Feet = 103921
    esriSRProjCS_NAD1983HARN_Adj_WI_LaCrosse_Meters = 103821
    esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Feet = 103954
    esriSRProjCS_NAD1983HARN_Adj_WI_Lafayette_Meters = 103854
    esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Feet = 103955
    esriSRProjCS_NAD1983HARN_Adj_WI_Langlade_Meters = 103855
    esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Feet = 103922
    esriSRProjCS_NAD1983HARN_Adj_WI_Lincoln_Meters = 103822
    esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Feet = 103956
    esriSRProjCS_NAD1983HARN_Adj_WI_Marathon_Meters = 103856
    esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Feet = 103925
    esriSRProjCS_NAD1983HARN_Adj_WI_Menominee_Meters = 103825
    esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Feet = 103924
    esriSRProjCS_NAD1983HARN_Adj_WI_Marinette_Meters = 103824
    esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Feet = 103957
    esriSRProjCS_NAD1983HARN_Adj_WI_Marquette_Meters = 103857
    esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Feet = 103958
    esriSRProjCS_NAD1983HARN_Adj_WI_Monroe_Meters = 103858
    esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Feet = 103923
    esriSRProjCS_NAD1983HARN_Adj_WI_Manitowoc_Meters = 103823
    esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Feet = 103926
    esriSRProjCS_NAD1983HARN_Adj_WI_Milwaukee_Meters = 103826
    esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Feet = 103927
    esriSRProjCS_NAD1983HARN_Adj_WI_Oconto_Meters = 103827
    esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Feet = 103928
    esriSRProjCS_NAD1983HARN_Adj_WI_Outagamie_Meters = 103828
    esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Feet = 103959
    esriSRProjCS_NAD1983HARN_Adj_WI_Oneida_Meters = 103859
    esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Feet = 103929
    esriSRProjCS_NAD1983HARN_Adj_WI_Ozaukee_Meters = 103829
    esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Feet = 103961
    esriSRProjCS_NAD1983HARN_Adj_WI_Pierce_Meters = 103861
    esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Feet = 103930
    esriSRProjCS_NAD1983HARN_Adj_WI_Polk_Meters = 103830
    esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Feet = 103960
    esriSRProjCS_NAD1983HARN_Adj_WI_Pepin_Meters = 103860
    esriSRProjCS_NAD1983HARN_Adj_WI_Price_Feet = 103931
    esriSRProjCS_NAD1983HARN_Adj_WI_Price_Meters = 103831
    esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Feet = 103962
    esriSRProjCS_NAD1983HARN_Adj_WI_Portage_Meters = 103862
    esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Feet = 103932
    esriSRProjCS_NAD1983HARN_Adj_WI_Racine_Meters = 103832
    esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Feet = 103963
    esriSRProjCS_NAD1983HARN_Adj_WI_Richland_Meters = 103863
    esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Feet = 103933
    esriSRProjCS_NAD1983HARN_Adj_WI_Rock_Meters = 103833
    esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Feet = 103934
    esriSRProjCS_NAD1983HARN_Adj_WI_Rusk_Meters = 103834
    esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Feet = 103935
    esriSRProjCS_NAD1983HARN_Adj_WI_St_Croix_Meters = 103835
    esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Feet = 103938
    esriSRProjCS_NAD1983HARN_Adj_WI_Sheboygan_Meters = 103838
    esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Feet = 103937
    esriSRProjCS_NAD1983HARN_Adj_WI_Shawano_Meters = 103837
    esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Feet = 103936
    esriSRProjCS_NAD1983HARN_Adj_WI_Sauk_Meters = 103836
    esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Feet = 103964
    esriSRProjCS_NAD1983HARN_Adj_WI_Sawyer_Meters = 103864
    esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Feet = 103965
    esriSRProjCS_NAD1983HARN_Adj_WI_Taylor_Meters = 103865
    esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Feet = 103939
    esriSRProjCS_NAD1983HARN_Adj_WI_Trempealeau_Meters = 103839
    esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Feet = 103967
    esriSRProjCS_NAD1983HARN_Adj_WI_Vilas_Meters = 103867
    esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Feet = 103966
    esriSRProjCS_NAD1983HARN_Adj_WI_Vernon_Meters = 103866
    esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Feet = 103940
    esriSRProjCS_NAD1983HARN_Adj_WI_Washington_Meters = 103840
    esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Feet = 103969
    esriSRProjCS_NAD1983HARN_Adj_WI_Washburn_Meters = 103869
    esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Feet = 103971
    esriSRProjCS_NAD1983HARN_Adj_WI_Wood_Meters = 103871
    esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Feet = 103941
    esriSRProjCS_NAD1983HARN_Adj_WI_Waukesha_Meters = 103841
    esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Feet = 103943
    esriSRProjCS_NAD1983HARN_Adj_WI_Winnebago_Meters = 103843
    esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Feet = 103942
    esriSRProjCS_NAD1983HARN_Adj_WI_Waupaca_Meters = 103842
    esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Feet = 103970
    esriSRProjCS_NAD1983HARN_Adj_WI_Waushara_Meters = 103870
    esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Feet = 103968
    esriSRProjCS_NAD1983HARN_Adj_WI_Walworth_Meters = 103868
    esriSRProjCS_NAD1983HARN_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl = 2868
    esriSRProjCS_NAD1983HARN_StatePlane_Arizona_East_FIPS_0201_Feet_Intl = 2867
    esriSRProjCS_NAD1983HARN_StatePlane_Arizona_West_FIPS_0203_Feet_Intl = 2869
    esriSRProjCS_NAD1983HARN_StatePlane_California_III_FIPS_0403_Ft = 2872
    esriSRProjCS_NAD1983HARN_StatePlane_California_II_FIPS_0402_Ft = 2871
    esriSRProjCS_NAD1983HARN_StatePlane_California_IV_FIPS_0404_Ft = 2873
    esriSRProjCS_NAD1983HARN_StatePlane_California_I_FIPS_0401_Ft = 2870
    esriSRProjCS_NAD1983HARN_StatePlane_California_VI_FIPS_0406_Ft = 2875
    esriSRProjCS_NAD1983HARN_StatePlane_California_V_FIPS_0405_Ft = 2874
    esriSRProjCS_NAD1983HARN_StatePlane_Colorado_Central_FIPS_0502_Ft = 2877
    esriSRProjCS_NAD1983HARN_StatePlane_Colorado_North_FIPS_0501_Ft = 2876
    esriSRProjCS_NAD1983HARN_StatePlane_Colorado_South_FIPS_0503_Ft = 2878
    esriSRProjCS_NAD1983HARN_StatePlane_Connecticut_FIPS_0600_Ft = 2879
    esriSRProjCS_NAD1983HARN_StatePlane_Delaware_FIPS_0700_Ft = 2880
    esriSRProjCS_NAD1983HARN_StatePlane_Florida_East_FIPS_0901_Ft = 2881
    esriSRProjCS_NAD1983HARN_StatePlane_Florida_North_FIPS_0903_Ft = 2883
    esriSRProjCS_NAD1983HARN_StatePlane_Florida_West_FIPS_0902_Ft = 2882
    esriSRProjCS_NAD1983HARN_StatePlane_Georgia_East_FIPS_1001_Ft = 2884
    esriSRProjCS_NAD1983HARN_StatePlane_Georgia_West_FIPS_1002_Ft = 2885
    esriSRProjCS_NAD1983HARN_Guam_Map_Grid = 4414
    esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_1_FIPS_5101_Feet = 102461
    esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_2_FIPS_5102_Feet = 102462
    esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_3_FIPS_5103_Feet = 3760
    esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_4_FIPS_5104_Feet = 102464
    esriSRProjCS_NAD1983HARN_StatePlane_Hawaii_5_FIPS_5105_Feet = 102465
    esriSRProjCS_NAD1983HARN_StatePlane_Iowa_North_FIPS_1401 = 2794
    esriSRProjCS_NAD1983HARN_StatePlane_Iowa_South_FIPS_1402 = 2795
    esriSRProjCS_NAD1983HARN_StatePlane_Idaho_Central_FIPS_1102_Ft = 2887
    esriSRProjCS_NAD1983HARN_StatePlane_Idaho_East_FIPS_1101_Ft = 2886
    esriSRProjCS_NAD1983HARN_StatePlane_Idaho_West_FIPS_1103_Ft = 2888
    esriSRProjCS_NAD1983HARN_StatePlane_Indiana_East_FIPS_1301_Ft = 2967
    esriSRProjCS_NAD1983HARN_StatePlane_Indiana_West_FIPS_1302_Ft = 2968
    esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_FIPS_1600 = 3090
    esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_North_FIPS_1601_Ft = 2891
    esriSRProjCS_NAD1983HARN_StatePlane_Kentucky_South_FIPS_1602_Ft = 2892
    esriSRProjCS_NAD1983HARN_Maine_2000_Central_Zone = 3464
    esriSRProjCS_NAD1983HARN_Maine_2000_East_Zone = 3075
    esriSRProjCS_NAD1983HARN_Maine_2000_West_Zone = 3077
    esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Island_FIPS_2002_Ft = 2895
    esriSRProjCS_NAD1983HARN_StatePlane_Massachusetts_Mainland_FIPS_2001_Ft = 2894
    esriSRProjCS_NAD1983HARN_StatePlane_Maryland_FIPS_1900_Ft = 2893
    esriSRProjCS_NAD1983HARN_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl = 2897
    esriSRProjCS_NAD1983HARN_StatePlane_Michigan_North_FIPS_2111_Feet_Intl = 2896
    esriSRProjCS_NAD1983HARN_StatePlane_Michigan_South_FIPS_2113_Feet_Intl = 2898
    esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_East_FIPS_2301_Ft = 2899
    esriSRProjCS_NAD1983HARN_StatePlane_Mississippi_West_FIPS_2302_Ft = 2900
    esriSRProjCS_NAD1983HARN_StatePlane_Montana_FIPS_2500_Feet_Intl = 2901
    esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_North_FIPS_3301_Ft_Intl = 2909
    esriSRProjCS_NAD1983HARN_StatePlane_North_Dakota_South_FIPS_3302_Ft_Intl = 2910
    esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_Central_FIPS_3002_Ft = 2903
    esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_East_FIPS_3001_Ft = 2902
    esriSRProjCS_NAD1983HARN_StatePlane_New_Mexico_West_FIPS_3003_Ft = 2904
    esriSRProjCS_NAD1983HARN_StatePlane_New_York_Central_FIPS_3102_Ft = 2906
    esriSRProjCS_NAD1983HARN_StatePlane_New_York_East_FIPS_3101_Ft = 2905
    esriSRProjCS_NAD1983HARN_StatePlane_New_York_Long_Island_FIPS_3104_Ft = 2908
    esriSRProjCS_NAD1983HARN_StatePlane_New_York_West_FIPS_3103_Ft = 2907
    esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_North_FIPS_3501_Ft = 2911
    esriSRProjCS_NAD1983HARN_StatePlane_Oklahoma_South_FIPS_3502_Ft = 2912
    esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert = 2993
    esriSRProjCS_NAD1983HARN_Oregon_Statewide_Lambert_Feet_Intl = 2994
    esriSRProjCS_NAD1983HARN_StatePlane_Oregon_North_FIPS_3601_Feet_Intl = 2913
    esriSRProjCS_NAD1983HARN_StatePlane_Oregon_South_FIPS_3602_Feet_Intl = 2914
    esriSRProjCS_NAD1983HARN_StatePlane_Tennessee_FIPS_4100_Ft = 2915
    esriSRProjCS_NAD1983HARN_StatePlane_Texas_Central_FIPS_4203_Ft = 2918
    esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_Central_FIPS_4202_Ft = 2917
    esriSRProjCS_NAD1983HARN_StatePlane_Texas_North_FIPS_4201_Ft = 2916
    esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_Central_FIPS_4204_Ft = 2919
    esriSRProjCS_NAD1983HARN_StatePlane_Texas_South_FIPS_4205_Ft = 2920
    esriSRProjCS_NAD1983HARN_UTM_Zone_11N = 3741
    esriSRProjCS_NAD1983HARN_UTM_Zone_12N = 3742
    esriSRProjCS_NAD1983HARN_UTM_Zone_13N = 3743
    esriSRProjCS_NAD1983HARN_UTM_Zone_18N = 3748
    esriSRProjCS_NAD1983HARN_UTM_Zone_2S = 2195
    esriSRProjCS_NAD1983HARN_UTM_Zone_4N = 3750
    esriSRProjCS_NAD1983HARN_UTM_Zone_5N = 3751
    esriSRProjCS_NAD1983HARN_StatePlane_Utah_Central_FIPS_4302_Ft_Intl = 2922
    esriSRProjCS_NAD1983HARN_StatePlane_Utah_North_FIPS_4301_Ft_Intl = 2921
    esriSRProjCS_NAD1983HARN_StatePlane_Utah_South_FIPS_4303_Ft_Intl = 2923
    esriSRProjCS_NAD1983HARN_StatePlane_Virginia_North_FIPS_4501_Ft = 2924
    esriSRProjCS_NAD1983HARN_StatePlane_Virginia_South_FIPS_4502_Ft = 2925
    esriSRProjCS_NAD1983HARN_StatePlane_Washington_North_FIPS_4601_Ft = 2926
    esriSRProjCS_NAD1983HARN_StatePlane_Washington_South_FIPS_4602_Ft = 2927
    esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_Central_FIPS_4802_Feet = 2929
    esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_North_FIPS_4801_Feet = 2928
    esriSRProjCS_NAD1983HARN_StatePlane_Wisconsin_South_FIPS_4803_Feet = 2930
    esriSRProjCS_NAD1983_Idaho_TM = 102605
    esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600 = 3088
    esriSRProjCS_NAD1983_StatePlane_Kentucky_FIPS_1600_Feet = 3089
    esriSRProjCS_NAD1983_Maine_2000_East_Zone = 3072
    esriSRProjCS_NAD1983_Maine_2000_Central_Zone = 3463
    esriSRProjCS_NAD1983_Maine_2000_West_Zone = 3074
    esriSRProjCS_NAD1983_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl = 2252
    esriSRProjCS_NAD1983_StatePlane_Michigan_North_FIPS_2111_Feet_Intl = 2251
    esriSRProjCS_NAD1983_StatePlane_Michigan_South_FIPS_2113_Feet_Intl = 2253
    esriSRProjCS_NAD1983_StatePlane_Montana_FIPS_2500_Feet_Intl = 2256
    esriSRProjCS_NAD1983_StatePlane_North_Dakota_North_FIPS_3301_Feet_Intl = 2265
    esriSRProjCS_NAD1983_StatePlane_North_Dakota_South_FIPS_3302_Feet_Intl = 2266
    esriSRProjCS_NAD1983_Oregon_Statewide_Lambert = 2991
    esriSRProjCS_NAD1983_Oregon_Statewide_Lambert_Feet_Intl = 2992
    esriSRProjCS_NAD1983_StatePlane_Oregon_North_FIPS_3601_Feet_Intl = 2269
    esriSRProjCS_NAD1983_StatePlane_Oregon_South_FIPS_3602_Feet_Intl = 2270
    esriSRProjCS_NAD1983_StatePlane_South_Carolina_FIPS_3900_Feet_Intl = 2273
    esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Albers = 3083
    esriSRProjCS_NAD1983_Texas_Centric_Mapping_System_Lambert = 3082
    esriSRProjCS_NAD1983_UTM_Zone_1N = 26901
    esriSRProjCS_NAD1983_UTM_Zone_2N = 26902
    esriSRProjCS_NAD1983_UTM_Zone_59N = 3372
    esriSRProjCS_NAD1983_UTM_Zone_60N = 3373
    esriSRProjCS_NAD1983_StatePlane_Utah_Central_FIPS_4302_Feet_Intl = 2281
    esriSRProjCS_NAD1983_StatePlane_Utah_North_FIPS_4301_Feet_Intl = 2280
    esriSRProjCS_NAD1983_StatePlane_Utah_South_FIPS_4303_Feet_Intl = 2282
    esriSRProjCS_Naparima_1955_UTM_Zone_20N = 2067
    esriSRProjCS_NEA74_Noumea_UTM_58S = 2998
    esriSRProjCS_NGO1948_Baerum_Kommune = 102136
    esriSRProjCS_NGO1948_Bergenhalvoen = 102137
    esriSRProjCS_NGO1948_Oslo_Kommune = 102138
    esriSRProjCS_NZGD1949_Amuri_Circuit = 27219
    esriSRProjCS_NZGD1949_Bay_of_Plenty_Circuit = 27206
    esriSRProjCS_NZGD1949_Bluff_Circuit = 27232
    esriSRProjCS_NZGD1949_Buller_Circuit = 27217
    esriSRProjCS_NZGD1949_Collingwood_Circuit = 27214
    esriSRProjCS_NZGD1949_Gawler_Circuit = 27225
    esriSRProjCS_NZGD1949_Grey_Circuit = 27218
    esriSRProjCS_NZGD1949_Hawkes_Bay_Circuit = 27208
    esriSRProjCS_NZGD1949_Hokitika_Circuit = 27221
    esriSRProjCS_NZGD1949_Jacksons_Bay_Circuit = 27223
    esriSRProjCS_NZGD1949_Karamea_Circuit = 27216
    esriSRProjCS_NZGD1949_Lindis_Peak_Circuit = 27227
    esriSRProjCS_NZGD1949_Marlborough_Circuit = 27220
    esriSRProjCS_NZGD1949_Mount_Eden_Circuit = 27205
    esriSRProjCS_NZGD1949_Mount_Nicholas_Circuit = 27228
    esriSRProjCS_NZGD1949_Mount_Pleasant_Circuit = 27224
    esriSRProjCS_NZGD1949_Mount_York_Circuit = 27229
    esriSRProjCS_NZGD1949_Nelson_Circuit = 27215
    esriSRProjCS_NZGD1949_North_Taieri_Circuit = 27231
    esriSRProjCS_NZGD1949_Observation_Point_Circuit = 27230
    esriSRProjCS_NZGD1949_Okarito_Circuit = 27222
    esriSRProjCS_NZGD1949_Poverty_Bay_Circuit = 27207
    esriSRProjCS_NZGD1949_Taranaki_Circuit = 27209
    esriSRProjCS_NZGD1949_Timaru_Circuit = 27226
    esriSRProjCS_NZGD1949_Tuhirangi_Circuit = 27210
    esriSRProjCS_NZGD1949_UTM_Zone_58S = 27258
    esriSRProjCS_NZGD1949_UTM_Zone_59S = 27259
    esriSRProjCS_NZGD1949_UTM_Zone_60S = 27260
    esriSRProjCS_NZGD1949_Wairarapa_Circuit = 27212
    esriSRProjCS_NZGD1949_Wanganui_Circuit = 27211
    esriSRProjCS_NZGD1949_Wellington_Circuit = 27213
    esriSRProjCS_NZGD2000_Amuri_Circuit = 2119
    esriSRProjCS_NZGD2000_Bay_of_Plenty_Circuit = 2106
    esriSRProjCS_NZGD2000_Bluff_Circuit = 2132
    esriSRProjCS_NZGD2000_Buller_Circuit = 2117
    esriSRProjCS_NZGD2000_Chatham_Island_Circuit = 3764
    esriSRProjCS_NZGD2000_Collingwood_Circuit = 2114
    esriSRProjCS_NZGD2000_Gawler_Circuit = 2125
    esriSRProjCS_NZGD2000_Grey_Circuit = 2118
    esriSRProjCS_NZGD2000_Hawkes_Bay_Circuit = 2108
    esriSRProjCS_NZGD2000_Hokitika_Circuit = 2121
    esriSRProjCS_NZGD2000_Jacksons_Bay_Circuit = 2123
    esriSRProjCS_NZGD2000_Karamea_Circuit = 2116
    esriSRProjCS_NZGD2000_Lindis_Peak_Circuit = 2127
    esriSRProjCS_NZGD2000_Marlborough_Circuit = 2120
    esriSRProjCS_NZGD2000_Mount_Eden_Circuit = 2105
    esriSRProjCS_NZGD2000_Mount_Nicholas_Circuit = 2128
    esriSRProjCS_NZGD2000_Mount_Pleasant_Circuit = 2124
    esriSRProjCS_NZGD2000_Mount_York_Circuit = 2129
    esriSRProjCS_NZGD2000_Nelson_Circuit = 2115
    esriSRProjCS_NZGD2000_North_Taieri_Circuit = 2131
    esriSRProjCS_NZGD2000_Observation_Point_Circuit = 2130
    esriSRProjCS_NZGD2000_Okarito_Circuit = 2122
    esriSRProjCS_NZGD2000_Poverty_Bay_Circuit = 2107
    esriSRProjCS_NZGD2000_Taranaki_Circuit = 2109
    esriSRProjCS_NZGD2000_Timaru_Circuit = 2126
    esriSRProjCS_NZGD2000_New_Zealand_Transverse_Mercator = 2193
    esriSRProjCS_NZGD2000_Tuhirangi_Circuit = 2110
    esriSRProjCS_NZGD2000_UTM_Zone_58S = 2133
    esriSRProjCS_NZGD2000_UTM_Zone_59S = 2134
    esriSRProjCS_NZGD2000_UTM_Zone_60S = 2135
    esriSRProjCS_NZGD2000_Wairarapa_Circuit = 2112
    esriSRProjCS_NZGD2000_Wanganui_Circuit = 2111
    esriSRProjCS_NZGD2000_Wellington_Circuit = 2113
    esriSRProjCS_ObservatorioMeteorologico1965_Macau_Grid = 102159
    esriSRProjCS_OSNI1952_Irish_National_Grid = 29901
    esriSRProjCS_Pampa_del_Castillo_Argentina_2 = 2082
    esriSRProjCS_Perroud1950_Terre_Adelie_Polar_Stereographic = 2986
    esriSRProjCS_Petrels1972_Terre_Adelie_Polar_Stereographic = 2985
    esriSRProjCS_Piton_des_Neiges_TM_Reunion = 3727
    esriSRProjCS_PortoSanto1995_UTM_Zone_28N = 3061
    esriSRProjCS_PSAD1956_ICN_Regional = 2317
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_10 = 2526
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_102E = 2610
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_105E = 2611
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_108E = 2612
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_11 = 2527
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_111E = 2613
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_114E = 2614
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_117E = 2615
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_12 = 2528
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_120E = 2616
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_123E = 2617
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_126E = 2618
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_129E = 2619
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_13 = 2529
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_132E = 2620
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_135E = 2621
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_138E = 2622
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_14 = 2530
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_141E = 2623
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_144E = 2624
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_147E = 2625
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_15 = 2531
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_150E = 2626
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_153E = 2627
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_156E = 2628
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_159E = 2629
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_16 = 2532
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_162E = 2630
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_165E = 2631
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168E = 2632
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_168W = 2640
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_17 = 2533
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171E = 2633
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_171W = 2639
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174E = 2634
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_174W = 2638
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177E = 2635
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_177W = 2637
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_18 = 2534
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_180E = 2636
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_19 = 2535
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_20 = 2536
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_21 = 2537
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_21E = 2582
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_22 = 2538
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_23 = 2539
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_24 = 2540
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_24E = 2583
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_25 = 2541
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_26 = 2542
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_27 = 2543
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_27E = 2584
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_28 = 2544
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_29 = 2545
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_30 = 2546
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_30E = 2585
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_31 = 2547
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_32 = 2548
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_33 = 2549
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_33E = 2586
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_34 = 2551
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_35 = 2552
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_36 = 2553
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_36E = 2587
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_37 = 2554
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_38 = 2555
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_39 = 2556
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_39E = 2588
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_40 = 2557
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_41 = 2558
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_42 = 2559
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_42E = 2589
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_43 = 2560
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_44 = 2561
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_45 = 2562
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_45E = 2590
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_46 = 2563
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_47 = 2564
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_48 = 2565
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_48E = 2591
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_49 = 2566
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_50 = 2567
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_51 = 2568
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_51E = 2592
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_52 = 2569
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_53 = 2570
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_54 = 2571
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_54E = 2593
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_55 = 2572
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_56 = 2573
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_57 = 2574
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_57E = 2594
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_58 = 2575
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_59 = 2576
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_60 = 3389
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_60E = 2595
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_61 = 2578
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_62 = 2579
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_63 = 2580
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_63E = 2596
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_64 = 2581
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_66E = 2597
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_69E = 2598
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_7 = 2523
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_72E = 2599
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_75E = 2601
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_78E = 2602
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_8 = 2524
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_81E = 2603
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_84E = 2604
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_87E = 2605
    esriSRProjCS_Pulkovo1942_3_Degree_GK_Zone_9 = 2525
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_90E = 2606
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_93E = 2607
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_96E = 2608
    esriSRProjCS_Pulkovo1942_3_Degree_GK_CM_99E = 2609
    esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_3 = 2397
    esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_4 = 2398
    esriSRProjCS_Pulkovo1942_Adj_1983_3_Degree_GK_Zone_5 = 2399
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_10 = 2644
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_102E = 2726
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_105E = 2727
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_108E = 2728
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_11 = 2645
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_111E = 2729
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_114E = 2730
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_117E = 2731
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_12 = 2646
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_120E = 2732
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_123E = 2733
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_126E = 2734
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_129E = 2735
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_13 = 2647
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_132E = 2738
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_135E = 2739
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_138E = 2740
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_14 = 2648
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_141E = 2741
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_144E = 2742
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_147E = 2743
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_15 = 2649
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_150E = 2744
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_153E = 2745
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_156E = 2746
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_159E = 2747
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_16 = 2650
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_162E = 2748
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_165E = 2749
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168E = 2750
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_168W = 2758
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_17 = 2651
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171E = 2751
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_171W = 2757
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174E = 2752
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_174W = 2756
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177E = 2753
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_177W = 2755
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_18 = 2652
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_180E = 2754
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_19 = 2653
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_20 = 2654
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_21 = 2655
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_21E = 2699
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_22 = 2656
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_23 = 2657
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_24 = 2658
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_24E = 2700
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_25 = 2659
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_26 = 2660
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_27 = 2661
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_27E = 2701
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_28 = 2662
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_29 = 2663
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_30 = 2664
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_30E = 2702
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_31 = 2665
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_32 = 2666
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_33 = 2667
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_33E = 2703
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_34 = 2668
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_35 = 2669
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_36 = 2670
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_36E = 2704
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_37 = 2671
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_38 = 2672
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_39 = 2673
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_39E = 2705
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_40 = 2674
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_41 = 2675
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_42 = 2676
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_42E = 2706
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_43 = 2677
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_44 = 2678
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_45 = 2679
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_45E = 2707
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_46 = 2680
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_47 = 2681
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_48 = 2682
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_48E = 2708
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_49 = 2683
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_50 = 2684
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_51 = 2685
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_51E = 2709
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_52 = 2686
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_53 = 2687
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_54 = 2688
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_54E = 2710
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_55 = 2689
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_56 = 2690
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_57 = 2691
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_57E = 2711
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_58 = 2692
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_59 = 2693
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_60 = 3390
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_60E = 2712
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_61 = 2695
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_62 = 2696
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_63 = 2697
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_63E = 2713
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_64 = 2698
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_66E = 2714
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_69E = 2715
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_7 = 2641
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_72E = 2716
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_75E = 2717
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_78E = 2718
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_8 = 2642
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_81E = 2719
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_84E = 2720
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_87E = 2721
    esriSRProjCS_Pulkovo1995_3_Degree_GK_Zone_9 = 2643
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_90E = 2722
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_93E = 2723
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_96E = 2724
    esriSRProjCS_Pulkovo1995_3_Degree_GK_CM_99E = 2725
    esriSRProjCS_Qatar1948_Qatar_Grid = 2099
    esriSRProjCS_Qornoq1927_UTM_Zone_22 = 2216
    esriSRProjCS_Qornoq1927_UTM_Zone_23 = 2217
    esriSRProjCS_Rassadiran_Nakhl_e_Taqi = 2057
    esriSRProjCS_REGVEN_UTM_Zone_18 = 2201
    esriSRProjCS_REGVEN_UTM_Zone_19 = 2202
    esriSRProjCS_REGVEN_UTM_Zone_20 = 2203
    esriSRProjCS_RGFG1995_UTM_22N = 2972
    esriSRProjCS_RGNC1991_Lambert_New_Caledonia = 2984
    esriSRProjCS_RGR1992_UTM_40S = 2975
    esriSRProjCS_Roma1940_Gauss_Boaga_Est = 102093
    esriSRProjCS_Roma1940_Gauss_Boaga_Ovest = 102094
    esriSRProjCS_RRAF1991_UTM_20N = 4559
    esriSRProjCS_RT38_0_gon = 3028
    esriSRProjCS_RT38_25_gon_O = 3029
    esriSRProjCS_RT38_25_gon_V = 3027
    esriSRProjCS_RT38_5_gon_O = 3030
    esriSRProjCS_RT38_5_gon_V = 3026
    esriSRProjCS_RT38_75_gon_V = 3025
    esriSRProjCS_RT90_0_gon = 3022
    esriSRProjCS_RT90_25_gon_O = 3023
    esriSRProjCS_RT90_25_gon_V = 3021
    esriSRProjCS_RT90_25_gon_W = 2400
    esriSRProjCS_RT90_5_gon_O = 3024
    esriSRProjCS_RT90_5_gon_V = 3020
    esriSRProjCS_RT90_75_gon_V = 3019
    esriSRProjCS_SAD1969_Brazil_Polyconic = 29101
    esriSRProjCS_SainteAnne_UTM_20N = 2970
    esriSRProjCS_SaintPierre_et_Miquelon_1950_UTM_21N = 2987
    esriSRProjCS_Samoa1962_Samoa_Lambert = 3102
    esriSRProjCS_AmericanSamoa1962_UTM_Zone_2S = 102116
    esriSRProjCS_SierraLeone1924_New_Colony_Grid = 2159
    esriSRProjCS_SierraLeone1924_New_War_Office_Grid = 2160
    esriSRProjCS_SierraLeone1968_UTM_Zone_28N = 2161
    esriSRProjCS_SierraLeone1968_UTM_Zone_29N = 2162
    esriSRProjCS_SIRGAS_UTM_Zone_17N = 31986
    esriSRProjCS_SIRGAS_UTM_Zone_17S = 31992
    esriSRProjCS_SIRGAS_UTM_Zone_18N = 31987
    esriSRProjCS_SIRGAS_UTM_Zone_18S = 31993
    esriSRProjCS_SIRGAS_UTM_Zone_19N = 31988
    esriSRProjCS_SIRGAS_UTM_Zone_19S = 31994
    esriSRProjCS_SIRGAS_UTM_Zone_20N = 31989
    esriSRProjCS_SIRGAS_UTM_Zone_20S = 31995
    esriSRProjCS_SIRGAS_UTM_Zone_21N = 31990
    esriSRProjCS_SIRGAS_UTM_Zone_21S = 31996
    esriSRProjCS_SIRGAS_UTM_Zone_22N = 31991
    esriSRProjCS_SIRGAS_UTM_Zone_22S = 31997
    esriSRProjCS_SIRGAS_UTM_Zone_23S = 31998
    esriSRProjCS_SIRGAS_UTM_Zone_24S = 31999
    esriSRProjCS_SIRGAS_UTM_Zone_25S = 32000
    esriSRProjCS_South_Yemen_GK_Zone_8 = 2395
    esriSRProjCS_South_Yemen_GK_Zone_9 = 2396
    esriSRProjCS_Sphere_Cylindrical_Equal_Area = 53034
    esriSRProjCS_ST71_Belep_UTM_58S = 2997
    esriSRProjCS_ST84_Ile_des_Pins_UTM_58S = 2996
    esriSRProjCS_ST87_Ouvea_UTM_58S = 3164
    esriSRProjCS_SWEREF99_12_00 = 3007
    esriSRProjCS_SWEREF99_13_30 = 3008
    esriSRProjCS_SWEREF99_14_15 = 3012
    esriSRProjCS_SWEREF99_15_00 = 3009
    esriSRProjCS_SWEREF99_15_45 = 3013
    esriSRProjCS_SWEREF99_16_30 = 3010
    esriSRProjCS_SWEREF99_17_15 = 3014
    esriSRProjCS_SWEREF99_18_00 = 3011
    esriSRProjCS_SWEREF99_18_45 = 3015
    esriSRProjCS_SWEREF99_20_15 = 3016
    esriSRProjCS_SWEREF99_21_45 = 3017
    esriSRProjCS_SWEREF99_23_15 = 3018
    esriSRProjCS_SWEREF99_TM = 3006
    esriSRProjCS_S_JTSK_Ferro_Krovak = 2065
    esriSRProjCS_S_JTSK_Ferro_Krovak_East_North = 5221
    esriSRProjCS_S_JTSK_Krovak = 5513
    esriSRProjCS_S_JTSK_Krovak_East_North = 5514
    esriSRProjCS_Tahaa_UTM_5S = 2977
    esriSRProjCS_Tahiti_UTM_6S = 2976
    esriSRProjCS_Timbalai1948_RSO_Borneo_Chains = 29871
    esriSRProjCS_Timbalai1948_RSO_Borneo_Feet = 29872
    esriSRProjCS_Timbalai1948_RSO_Borneo_Meters = 29873
    esriSRProjCS_TM75_Irish_Grid = 29903
    esriSRProjCS_Trinidad1903_Trinidad_Grid_Feet_Clarke = 2314
    esriSRProjCS_UWPP_1992 = 102194
    esriSRProjCS_UWPP_2000_PAS_5 = 102195
    esriSRProjCS_UWPP_2000_PAS_6 = 102196
    esriSRProjCS_UWPP_2000_PAS_7 = 102197
    esriSRProjCS_UWPP_2000_PAS_8 = 102198
    esriSRProjCS_NordAlgerie_Ancienne_Degree = 102491
    esriSRProjCS_SudAlgerie_Ancienne_Degree = 102492
    esriSRProjCS_WGS1972_BE_TM_106_NE = 2094
    esriSRProjCS_WGS1984_Antarctic_Polar_Stereographic = 3031
    esriSRProjCS_WGS1984_Australian_Antarctic_Lambert = 3033
    esriSRProjCS_WGS1984_Australian_Antarctic_Polar_Stereographic = 3032
    esriSRProjCS_WGS1984_Complex_UTM_Zone_20N = 102570
    esriSRProjCS_WGS1984_Complex_UTM_Zone_21N = 102571
    esriSRProjCS_WGS1984_Complex_UTM_Zone_22N = 102572
    esriSRProjCS_WGS1984_Complex_UTM_Zone_23N = 102573
    esriSRProjCS_WGS1984_Complex_UTM_Zone_24N = 102574
    esriSRProjCS_WGS1984_Complex_UTM_Zone_25N = 102575
    esriSRProjCS_WGS1984_Complex_UTM_Zone_26N = 102576
    esriSRProjCS_WGS1984_Complex_UTM_Zone_27N = 102577
    esriSRProjCS_WGS1984_Complex_UTM_Zone_28N = 102578
    esriSRProjCS_WGS1984_Complex_UTM_Zone_29N = 102579
    esriSRProjCS_WGS1984_Complex_UTM_Zone_30N = 102580
    esriSRProjCS_WGS1984_TM_116_SE = 2309
    esriSRProjCS_WGS1984_TM_132_SE = 2310
    esriSRProjCS_WGS1984_TM_6_NE = 2311
    esriSRProjCS_WorldAzimuthalEquidistant = 54032
    esriSRProjCS_WorldCube = 54051
    esriSRProjCS_WorldCylindricalEqualArea = 54034
    esriSRProjCS_WorldFuller = 54050
    esriSRProjCS_Xian1980_3_Degree_GK_CM_102E = 2379
    esriSRProjCS_Xian1980_3_Degree_GK_CM_105E = 2380
    esriSRProjCS_Xian1980_3_Degree_GK_CM_108E = 2381
    esriSRProjCS_Xian1980_3_Degree_GK_CM_111E = 2382
    esriSRProjCS_Xian1980_3_Degree_GK_CM_114E = 2383
    esriSRProjCS_Xian1980_3_Degree_GK_CM_117E = 2384
    esriSRProjCS_Xian1980_3_Degree_GK_CM_120E = 2385
    esriSRProjCS_Xian1980_3_Degree_GK_CM_123E = 2386
    esriSRProjCS_Xian1980_3_Degree_GK_CM_126E = 2387
    esriSRProjCS_Xian1980_3_Degree_GK_CM_129E = 2388
    esriSRProjCS_Xian1980_3_Degree_GK_CM_132E = 2389
    esriSRProjCS_Xian1980_3_Degree_GK_CM_135E = 2390
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_25 = 2349
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_26 = 2350
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_27 = 2351
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_28 = 2352
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_29 = 2353
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_30 = 2354
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_31 = 2355
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_32 = 2356
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_33 = 2357
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_34 = 2358
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_35 = 2359
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_36 = 2360
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_37 = 2361
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_38 = 2362
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_39 = 2363
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_40 = 2364
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_41 = 2365
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_42 = 2366
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_43 = 2367
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_44 = 2368
    esriSRProjCS_Xian1980_3_Degree_GK_Zone_45 = 2369
    esriSRProjCS_Xian1980_3_Degree_GK_CM_75E = 2370
    esriSRProjCS_Xian1980_3_Degree_GK_CM_78E = 2371
    esriSRProjCS_Xian1980_3_Degree_GK_CM_81E = 2372
    esriSRProjCS_Xian1980_3_Degree_GK_CM_84E = 2373
    esriSRProjCS_Xian1980_3_Degree_GK_CM_87E = 2374
    esriSRProjCS_Xian1980_3_Degree_GK_CM_90E = 2375
    esriSRProjCS_Xian1980_3_Degree_GK_CM_93E = 2376
    esriSRProjCS_Xian1980_3_Degree_GK_CM_96E = 2377
    esriSRProjCS_Xian1980_3_Degree_GK_CM_99E = 2378
    esriSRProjCS_Xian1980_GK_CM_105E = 2343
    esriSRProjCS_Xian1980_GK_CM_111E = 2344
    esriSRProjCS_Xian1980_GK_CM_117E = 2345
    esriSRProjCS_Xian1980_GK_CM_123E = 2346
    esriSRProjCS_Xian1980_GK_CM_129E = 2347
    esriSRProjCS_Xian1980_GK_Zone_13 = 2327
    esriSRProjCS_Xian1980_GK_CM_135E = 2348
    esriSRProjCS_Xian1980_GK_Zone_14 = 2328
    esriSRProjCS_Xian1980_GK_Zone_15 = 2329
    esriSRProjCS_Xian1980_GK_Zone_16 = 2330
    esriSRProjCS_Xian1980_GK_Zone_17 = 2331
    esriSRProjCS_Xian1980_GK_Zone_18 = 2332
    esriSRProjCS_Xian1980_GK_Zone_19 = 2333
    esriSRProjCS_Xian1980_GK_Zone_20 = 2334
    esriSRProjCS_Xian1980_GK_Zone_21 = 2335
    esriSRProjCS_Xian1980_GK_Zone_22 = 2336
    esriSRProjCS_Xian1980_GK_Zone_23 = 2337
    esriSRProjCS_Xian1980_GK_CM_75E = 2338
    esriSRProjCS_Xian1980_GK_CM_81E = 2339
    esriSRProjCS_Xian1980_GK_CM_87E = 2340
    esriSRProjCS_Xian1980_GK_CM_93E = 2341
    esriSRProjCS_Xian1980_GK_CM_99E = 2342
    esriSRProjCS_Yemen_NGN_1996_UTM_Zone_38N = 2089
    esriSRProjCS_Yemen_NGN_1996_UTM_Zone_39N = 2090
    esriSRProjCS_Zanderij_Suriname_Old_TM = 31170
    esriSRProjCS_Zanderij_Suriname_TM = 31171
    esriSRProjCS_Zanderij_TM_54_NW = 31154

class esriSRGeoTransformation3Type(Enumeration):
    __slots__ = ['esriSRGeoTransformation_Monte_Mario_To_WGS_1984_3',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_4',
                 'esriSRGeoTransformation_MOP78_To_WGS_1984_1',
                 'esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_1',
                 'esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_2',
                 'esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_2',
                 'esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_3',
                 'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_4',
                 'esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_1',
                 'esriSRGeoTransformation_NGO_1948_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_4',
                 'esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_5',
                 'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_6',
                 'esriSRGeoTransformation_NTF_To_ETRS_1989_1',
                 'esriSRGeoTransformation_OSNI_1952_To_WGS_1984_1',
                 'esriSRGeoTransformation_petrels_1972_To_WGS_1984_1',
                 'esriSRGeoTransformation_Piton_des_Neiges_To_RGR_1992_1',
                 'esriSRGeoTransformation_Piton_des_Neiges_To_WGS_1984_1',
                 'esriSRGeoTransformation_Point58_To_WGS_1984_1',
                 'esriSRGeoTransformation_Pointe_Geologie_Perroud_1950_To_WGS_1984_1',
                 'esriSRGeoTransformation_Pointe_noire_To_WGS_1984_2',
                 'esriSRGeoTransformation_Pointe_noire_To_WGS_1984_3',
                 'esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_2',
                 'esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_3',
                 'esriSRGeoTransformation_POSGAR_1998_To_SIRGAS_1',
                 'esriSRGeoTransformation_POSGAR_1998_To_WGS_1984_1',
                 'esriSRGeoTransformation_PSAD_1956_To_REGVEN_1',
                 'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_12',
                 'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_13',
                 'esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_3',
                 'esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_WGS_1984_1',
                 'esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_2',
                 'esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_WGS_1984_1',
                 'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_13',
                 'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_14',
                 'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_15',
                 'esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_2',
                 'esriSRGeoTransformation_QND_1995_To_WGS_1984_1',
                 'esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_1',
                 'esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_2',
                 'esriSRGeoTransformation_REGVEN_To_WGS_1984_1',
                 'esriSRGeoTransformation_Reykjavik_1900_To_WGS_1984_1',
                 'esriSRGeoTransformation_RGFG_1995_To_WGS_1984_1',
                 'esriSRGeoTransformation_RGF_1993_To_WGS_1984_1',
                 'esriSRGeoTransformation_RGNC_1991_To_WGS_1984_1',
                 'esriSRGeoTransformation_RGR_1992_To_Piton_des_Neiges_1',
                 'esriSRGeoTransformation_RGR_1992_To_WGS_1984_1',
                 'esriSRGeoTransformation_RRAF_1991_To_WGS_1984_1',
                 'esriSRGeoTransformation_RT90_To_ETRS_1989_2',
                 'esriSRGeoTransformation_RT90_To_WGS_1984_2',
                 'esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_1',
                 'esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_2',
                 'esriSRGeoTransformation_Saint_Pierre_et_Miquelon_1950_To_WGS_1984_1',
                 'esriSRGeoTransformation_Scoresbysund_1952_To_WGS_1984_1',
                 'esriSRGeoTransformation_Selvagem_Grande_1938_To_WGS_1984_1',
                 'esriSRGeoTransformation_South_Yemen_To_WGS_1984_1',
                 'esriSRGeoTransformation_ST71_Belep_To_WGS_1984_1',
                 'esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_1',
                 'esriSRGeoTransformation_St_Vincent_1945_To_WGS_1984_1',
                 'esriSRGeoTransformation_SWEREF99_To_ETRS_1989_1',
                 'esriSRGeoTransformation_SWEREF99_To_WGS_1984_1',
                 'esriSRGeoTransformation_S_JTSK_To_ETRS_1989_1',
                 'esriSRGeoTransformation_S_JTSK_To_ETRS_1989_2',
                 'esriSRGeoTransformation_S_JTSK_To_WGS_1984_1',
                 'esriSRGeoTransformation_S_JTSK_To_WGS_1984_2',
                 'esriSRGeoTransformation_Tahaa_To_WGS_1984_1',
                 'esriSRGeoTransformation_Tahiti_To_WGS_1984_1',
                 'esriSRGeoTransformation_Tete_To_WGS_1984_1',
                 'esriSRGeoTransformation_Tete_To_WGS_1984_2',
                 'esriSRGeoTransformation_Tete_To_WGS_1984_3',
                 'esriSRGeoTransformation_Tete_To_WGS_1984_4',
                 'esriSRGeoTransformation_Tete_To_WGS_1984_5',
                 'esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_4',
                 'esriSRGeoTransformation_TM65_To_ETRS_1989_1',
                 'esriSRGeoTransformation_TM65_To_WGS_1984_2',
                 'esriSRGeoTransformation_TM75_To_ETRS_1989_2',
                 'esriSRGeoTransformation_TM75_To_WGS_1984_2',
                 'esriSRGeoTransformation_TM75_To_WGS_1984_3',
                 'esriSRGeoTransformation_Yoff_To_WGS_1972_1',
                 'esriSRGeoTransformation_Amersfoort_To_ETRS_1989_mb',
                 'esriSRGeoTransformation_Chatham_Islands_1979_To_NZGD_2000_1',
                 'esriSRGeoTransformation_Chatham_Islands_1979_To_WGS_1984_1',
                 'esriSRGeoTransformation_Chatham_Island_1971_To_WGS_1984',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_3x',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_4x',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_5x',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_6x',
                 'esriSRGeoTransformation_DHDN_To_WGS_1984_7x',
                 'esriSRGeoTransformation_EUREF_FIN_To_ETRS_1989',
                 'esriSRGeoTransformation_EUREF_FIN_To_WGS_1984',
                 'esriSRGeoTransformation_Israel_To_WGS_1984',
                 'esriSRGeoTransformation_JGD_2000_To_WGS_1984',
                 'esriSRGeoTransformation_KKJ_To_ETRS_1989_2',
                 'esriSRGeoTransformation_KKJ_To_EUREF_FIN',
                 'esriSRGeoTransformation_KKJ_To_WGS_1984_2',
                 'esriSRGeoTransformation_Jordan_To_WGS_1984',
                 'esriSRGeoTransformation_La_Canoa_To_SIRGAS',
                 'esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_1',
                 'esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_2',
                 'esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_1',
                 'esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_2',
                 'esriSRGeoTransformation_Midway_1961_To_WGS_1984',
                 'esriSRGeoTransformation_Midway_1961_To_WGS_1984_old',
                 'esriSRGeoTransformation_Observ_Meteor_1965_To_WGS_1984_1',
                 'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1x',
                 'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2x',
                 'esriSRGeoTransformation_SWEREF99_To_RT90',
                 'esriSRGeoTransformation_S_JTSK_To_Pulkovo_1942',
                 'esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965',
                 'esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965_2',
                 'esriSRGeoTransformation_WGS_1984_To_RT90',
                 'esriSRGeoTransformation_Accra_To_WGS_1972_BE',
                 'esriSRGeoTransformation_Accra_To_WGS_1984',
                 'esriSRGeoTransformation_AGD_1966_To_GDA_1994_8',
                 'esriSRGeoTransformation_AGD_1966_To_GDA_1994_9',
                 'esriSRGeoTransformation_Amersfoort_To_ETRS_1989',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_1',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_2',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_3',
                 'esriSRGeoTransformation_Aratu_To_WGS_1984_4',
                 'esriSRGeoTransformation_Belge_1972_To_WGS_1984_1',
                 'esriSRGeoTransformation_Belge_1972_To_WGS_1984_2',
                 'esriSRGeoTransformation_Bissau_To_WGS_1984',
                 'esriSRGeoTransformation_Bogota_Bogota_To_WGS_1984',
                 'esriSRGeoTransformation_Bogota_To_WGS_1984_2',
                 'esriSRGeoTransformation_Chos_Malal_1914_To_Campo_Inchauspe',
                 'esriSRGeoTransformation_Chos_Malal_1914_To_WGS_1984',
                 'esriSRGeoTransformation_Conakry_1905_To_WGS_1984',
                 'esriSRGeoTransformation_Dabola_1981_To_WGS_1984',
                 'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1972_BE',
                 'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_2',
                 'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_3',
                 'esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_4',
                 'esriSRGeoTransformation_DHDN_To_ETRS_1989',
                 'esriSRGeoTransformation_ED_1950_To_ETRS_1989_1',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_23',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_24',
                 'esriSRGeoTransformation_Egypt_1907_To_WGS_1972',
                 'esriSRGeoTransformation_Egypt_1907_To_WGS_1984_3',
                 'esriSRGeoTransformation_Hanoi_1972_To_WGS_1984',
                 'esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984',
                 'esriSRGeoTransformation_Hungarian_1972_To_ETRS_1989_1',
                 'esriSRGeoTransformation_Indian_1960_To_WGS_1972_BE',
                 'esriSRGeoTransformation_Indian_1960_To_WGS_1984_1',
                 'esriSRGeoTransformation_Indian_1960_To_WGS_1984_2',
                 'esriSRGeoTransformation_Indian_1960_To_WGS_1984_3',
                 'esriSRGeoTransformation_Indian_1975_To_WGS_1984_3',
                 'esriSRGeoTransformation_IRENET95_To_ETRS_1989',
                 'esriSRGeoTransformation_Kalianpur_1937_To_WGS_1984_2',
                 'esriSRGeoTransformation_Korean_1995_To_WGS_1984_1',
                 'esriSRGeoTransformation_Malongo_1987_To_WGS_1984_2',
                 'esriSRGeoTransformation_MGI_To_WGS_1984_3',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_3',
                 'esriSRGeoTransformation_Monte_Mario_Rome_To_WGS_1984',
                 'esriSRGeoTransformation_NAD_1927_To_WGS_1984_30',
                 'esriSRGeoTransformation_NAD_1983_harn_To_WGS_1984',
                 'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_4',
                 'esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_5',
                 'esriSRGeoTransformation_Naparima_1955_To_WGS_1984_2',
                 'esriSRGeoTransformation_Naparima_1955_To_WGS_1984_3',
                 'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1972_BE',
                 'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_3',
                 'esriSRGeoTransformation_NZGDd_1949_To_WGS_1984_2',
                 'esriSRGeoTransformation_NZGD_2000_To_WGS_1984_1',
                 'esriSRGeoTransformation_PDO_1993_To_WGS_1972',
                 'esriSRGeoTransformation_PDO_1993_To_WGS_1984_3',
                 'esriSRGeoTransformation_POSGAR_To_WGS_1984_1',
                 'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_10',
                 'esriSRGeoTransformation_PSAD_1956_To_WGS_1984_11',
                 'esriSRGeoTransformation_Qatar_1974_To_WGS_1984_2',
                 'esriSRGeoTransformation_Qatar_1974_To_WGS_1984_3',
                 'esriSRGeoTransformation_SAD_1969_To_WGS_1984_14',
                 'esriSRGeoTransformation_Samoa_1962_To_WGS_1984',
                 'esriSRGeoTransformation_Sierra_Leone_1968_To_WGS_1984',
                 'esriSRGeoTransformation_SIRGAS_To_WGS_1984_1',
                 'esriSRGeoTransformation_South_Yemen_To_Yemen_NGN_1996',
                 'esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_2',
                 'esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_3',
                 'esriSRGeoTransformation_Yemen_NGN_1996_To_WGS_1984',
                 'esriSRGeoTransformation_NTF_Paris_To_RGF_1993_1',
                 'esriSRGeoTransformation_Tokyo_To_JGD_2000_1',
                 'esriSRGeoTransformation_REGVEN_To_SIRGAS_1',
                 'esriSRGeoTransformation_Hjorsey_1955_To_WGS_1984',
                 'esriSRGeoTransformation_Tokyo_To_WGS_1984_2001',
                 'esriSRGeoTransformation_Pohnpei_To_NAD_1983',
                 'esriSRGeoTransformation_Bab_South_To_NAD_1983',
                 'esriSRGeoTransformation_Majuro_To_NAD_1983',
                 'esriSRGeoTransformation_Guam_1963_To_HARN_Rota',
                 'esriSRGeoTransformation_Guam_1963_To_HARN_Saipan',
                 'esriSRGeoTransformation_Guam_1963_To_HARN_Tinian_Sguijan',
                 'esriSRGeoTransformation_NGO_1948_To_WGS_1984',
                 'esriSRGeoTransformation_Carthage_Paris_To_Carthage',
                 'esriSRGeoTransformation_Gunung_Segara_Jakarta_To_Gunung_Segara',
                 'esriSRGeoTransformation_Lisbon_1890_Lisbon_To_Lisbon_1890',
                 'esriSRGeoTransformation_Nord_Sahara_1959_Paris_To_Nord_Sahara_1959',
                 'esriSRGeoTransformation_S_JTSK_Ferro_To_S_JTSK',
                 'esriSRGeoTransformation_Bern_1898_Bern_To_CH1903',
                 'esriSRGeoTransformation_Puerto_Rico_To_NAD_1983',
                 'esriSRGeoTransformation_NAD_1983_To_HARN_Iowa',
                 'esriSRGeoTransformation_Samoa_1962_To_HARN_EastSamoa',
                 'esriSRGeoTransformation_Samoa_1962_To_HARN_WestSamoa',
                 'esriSRGeoTransformation_Guam_1963_To_HARN_Guam',
                 'esriSRGeoTransformation_AGD_1966_To_GDA_1994_11_NTv2',
                 'esriSRGeoTransformation_AGD_1984_To_GDA_1994_5_NTv2',
                 'esriSRGeoTransformation_NZGD_1949_To_WGS_1984_3_NTv2',
                 'esriSRGeoTransformation_RGF_1993_To_NTF_NTv2',
                 'esriSRGeoTransformation_RGNC_1991_To_IGN72_Grande_Terre_NTv2',
                 'esriSRGeoTransformation_RGNC_1991_To_NEA74_Noumea_NTv2',
                 'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NewBrunswick',
                 'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_2',
                 'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_PEI',
                 'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NovaScotia',
                 'esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_Maritimes',
                 'esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_2',
                 'esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_CSRS98',
                 'esriSRGeoTransformation_NAD_1927_To_NAD_1983_6',
                 'esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_1',
                 'esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_2',
                 'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_1',
                 'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_2',
                 'esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_3',
                 'esriSRGeoTransformation_AGD_1984_To_GDA_1994_3',
                 'esriSRGeoTransformation_Ain_el_Abd_To_WGS_1984_3',
                 'esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_4',
                 'esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_5',
                 'esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_6',
                 'esriSRGeoTransformation_KOC_To_WGS_1984_1',
                 'esriSRGeoTransformation_NGN_To_WGS_1984_1',
                 'esriSRGeoTransformation_KUDAMS_To_WGS_1984_1',
                 'esriSRGeoTransformation_KUDAMS_To_WGS_1984_2',
                 'esriSRGeoTransformation_Vientiane_1982_To_Lao_1997_1',
                 'esriSRGeoTransformation_Lao_1993_To_Lao_1997_1',
                 'esriSRGeoTransformation_Lao_1997_To_WGS_1984_1',
                 'esriSRGeoTransformation_Minna_To_WGS_1984_11',
                 'esriSRGeoTransformation_Guam_1963_To_WGS_1984_1',
                 'esriSRGeoTransformation_Palestine_1923_To_Israel_1',
                 'esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_38',
                 'esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_2',
                 'esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_2',
                 'esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_2',
                 'esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_2',
                 'esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_3',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_37',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_5',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_6',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_7',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_8',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_9',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_10',
                 'esriSRGeoTransformation_Monte_Mario_To_WGS_1984_11',
                 'esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_2',
                 'esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_2',
                 'esriSRGeoTransformation_WGS_1972_BE_To_WGS_1972_1',
                 'esriSRGeoTransformation_WGS_1972_BE_To_WGS_1984_1',
                 'esriSRGeoTransformation_RT90_To_ETRS_1989_1',
                 'esriSRGeoTransformation_ED_1950_To_WGS_1984_39',
                 'esriSRGeoTransformation_Porto_Santo_1936_To_WGS_1984_1',
                 'esriSRGeoTransformation_Anna_1_1965_To_WGS_1984',
                 'esriSRGeoTransformation_Antigua_1943_To_WGS_1984_NGA',
                 'esriSRGeoTransformation_Ascension_Island_1958_To_WGS_1984',
                 'esriSRGeoTransformation_Astro_1952_To_WGS_1984',
                 'esriSRGeoTransformation_Ayabelle_To_WGS_1984',
                 'esriSRGeoTransformation_Beacon_E_1945_To_WGS_1984',
                 'esriSRGeoTransformation_Bellevue_IGN_To_WGS_1984',
                 'esriSRGeoTransformation_Camp_Area_To_WGS_1984',
                 'esriSRGeoTransformation_Canton_1966_To_WGS_1984',
                 'esriSRGeoTransformation_Cape_Canaveral_To_WGS_1984',
                 'esriSRGeoTransformation_Deception_Island_To_WGS_1984',
                 'esriSRGeoTransformation_DOS_1968_To_WGS_1984',
                 'esriSRGeoTransformation_DOS_71_4_To_WGS_1984',
                 'esriSRGeoTransformation_Easter_Island_1967_To_WGS_1984',
                 'esriSRGeoTransformation_Estonia_1937_To_WGS_1984_NGA',
                 'esriSRGeoTransformation_European_1979_To_WGS_1984',
                 'esriSRGeoTransformation_Fort_Thomas_1955_To_WGS_1984',
                 'esriSRGeoTransformation_GUX_1_To_WGS_1984',
                 'esriSRGeoTransformation_Hermannskogel_To_WGS_1984',
                 'esriSRGeoTransformation_ISTS_061_1968_To_WGS_1984',
                 'esriSRGeoTransformation_ISTS_073_1969_To_WGS_1984',
                 'esriSRGeoTransformation_Johnston_Island_1961_To_WGS_1984',
                 'esriSRGeoTransformation_Kusaie_1951_To_WGS_1984',
                 'esriSRGeoTransformation_LC5_1961_To_WGS_1984',
                 'esriSRGeoTransformation_Pico_de_Las_Nieves_To_WGS_1984',
                 'esriSRGeoTransformation_Pitcairn_1967_To_WGS_1984',
                 'esriSRGeoTransformation_Reunion_To_WGS_1984_NGA',
                 'esriSRGeoTransformation_Santo_DOS_1965_To_WGS_1984',
                 'esriSRGeoTransformation_South_Asia_Singapore_To_WGS_1984',
                 'esriSRGeoTransformation_S_JTSK_To_WGS_1984_NGA',
                 'esriSRGeoTransformation_Tern_Island_1961_To_WGS_1984',
                 'esriSRGeoTransformation_Tristan_1968_To_WGS_1984',
                 'esriSRGeoTransformation_Viti_Levu_1916_To_WGS_1984',
                 'esriSRGeoTransformation_Wake_Eniwetok_1960_To_WGS_1984',
                 'esriSRGeoTransformation_Wake_Island_1952_To_WGS_1984',
                 'esriSRGeoTransformation_Estonia_1937_To_ETRS_1989',
                 'esriSRGeoTransformation_D48_To_ETRS_1989',
                 'esriSRGeoTransformation_D48_To_WGS_1984',
                 'esriSRGeoTransformation_ITRF_2000_To_WGS_1984',
                 'esriSRGeoTransformation_ITRF_2000_To_NAD_1983_HARN',
                 'esriSRGeoTransformation_WGS_1984_ITRF00_To_NAD_1983_HARN',
                 'esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_RN',
                 'esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_3PAR',
                 'esriSRGeoTransformation_JAD_2001_To_WGS_1984',
                 'esriSRGeoTransformation_MONREF_1997_To_MSK_1942_1',
                 'esriSRGeoTransformation_MONREF_1997_To_MSK_1942_2',
                 'esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_1',
                 'esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_2',
                 'esriSRGeoTransformation_MAGNA_To_SIRGAS',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_1_MB',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_2_MB',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_3_MB',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_4_MB',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_5_MB',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_6_MB',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_7_MB',
                 'esriSRGeoTransformation_Bogota_To_MAGNA_Region_8_MB',
                 'esriSRGeoTransformation_Guam_1963_To_WGS_1984_Saipan',
                 'esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_Saipan',
                 'esriSRGeoTransformation_Pohnpei_To_WGS_1984']
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_3 = 1664
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_4 = 1660
    esriSRGeoTransformation_MOP78_To_WGS_1984_1 = 1925
    esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_1 = 1842
    esriSRGeoTransformation_NAD_1983_CSRS98_To_WGS_1984_2 = 1946
    esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_2 = 1900
    esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_3 = 1901
    esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_4 = 1950
    esriSRGeoTransformation_NEA74_Noumea_To_WGS_1984_1 = 1932
    esriSRGeoTransformation_NGO_1948_To_ETRS_1989_1 = 1653
    esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_4 = 1815
    esriSRGeoTransformation_Nord_sahara_1959_To_WGS_1984_5 = 1816
    esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_6 = 1817
    esriSRGeoTransformation_NTF_To_ETRS_1989_1 = 1651
    esriSRGeoTransformation_OSNI_1952_To_WGS_1984_1 = 1955
    esriSRGeoTransformation_petrels_1972_To_WGS_1984_1 = 1921
    esriSRGeoTransformation_Piton_des_Neiges_To_RGR_1992_1 = 1926
    esriSRGeoTransformation_Piton_des_Neiges_To_WGS_1984_1 = 1911
    esriSRGeoTransformation_Point58_To_WGS_1984_1 = 1880
    esriSRGeoTransformation_Pointe_Geologie_Perroud_1950_To_WGS_1984_1 = 1922
    esriSRGeoTransformation_Pointe_noire_To_WGS_1984_2 = 1801
    esriSRGeoTransformation_Pointe_noire_To_WGS_1984_3 = 1802
    esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_2 = 1966
    esriSRGeoTransformation_Porto_santo_1995_To_WGS_1984_3 = 1967
    esriSRGeoTransformation_POSGAR_1998_To_SIRGAS_1 = 1774
    esriSRGeoTransformation_POSGAR_1998_To_WGS_1984_1 = 1773
    esriSRGeoTransformation_PSAD_1956_To_REGVEN_1 = 1769
    esriSRGeoTransformation_PSAD_1956_To_WGS_1984_12 = 1811
    esriSRGeoTransformation_PSAD_1956_To_WGS_1984_13 = 1095
    esriSRGeoTransformation_Puerto_Rico_To_WGS_1984_3 = 1893
    esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_ETRS_1989_1 = 1644
    esriSRGeoTransformation_Pulkovo_1942_adj_1958_To_WGS_1984_1 = 1645
    esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_1 = 1674
    esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_ETRS_1989_2 = 1775
    esriSRGeoTransformation_Pulkovo_1942_adj_1983_To_WGS_1984_1 = 1675
    esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_13 = 1807
    esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_14 = 1808
    esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_15 = 1809
    esriSRGeoTransformation_Pulkovo_1942_To_WGS_1984_2 = 1679
    esriSRGeoTransformation_QND_1995_To_WGS_1984_1 = 1840
    esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_1 = 1797
    esriSRGeoTransformation_Qornoq_1927_To_WGS_1984_2 = 1798
    esriSRGeoTransformation_REGVEN_To_WGS_1984_1 = 1768
    esriSRGeoTransformation_Reykjavik_1900_To_WGS_1984_1 = 1994
    esriSRGeoTransformation_RGFG_1995_To_WGS_1984_1 = 1907
    esriSRGeoTransformation_RGF_1993_To_WGS_1984_1 = 1671
    esriSRGeoTransformation_RGNC_1991_To_WGS_1984_1 = 1920
    esriSRGeoTransformation_RGR_1992_To_Piton_des_Neiges_1 = 1964
    esriSRGeoTransformation_RGR_1992_To_WGS_1984_1 = 1912
    esriSRGeoTransformation_RRAF_1991_To_WGS_1984_1 = 4560
    esriSRGeoTransformation_RT90_To_ETRS_1989_2 = 1787
    esriSRGeoTransformation_RT90_To_WGS_1984_2 = 1896
    esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_1 = 1904
    esriSRGeoTransformation_Sainte_Anne_To_WGS_1984_2 = 1905
    esriSRGeoTransformation_Saint_Pierre_et_Miquelon_1950_To_WGS_1984_1 = 1923
    esriSRGeoTransformation_Scoresbysund_1952_To_WGS_1984_1 = 1799
    esriSRGeoTransformation_Selvagem_Grande_1938_To_WGS_1984_1 = 1965
    esriSRGeoTransformation_South_Yemen_To_WGS_1984_1 = 1682
    esriSRGeoTransformation_ST71_Belep_To_WGS_1984_1 = 1931
    esriSRGeoTransformation_ST84_Ile_des_Pins_To_WGS_1984_1 = 1930
    esriSRGeoTransformation_St_Vincent_1945_To_WGS_1984_1 = 1959
    esriSRGeoTransformation_SWEREF99_To_ETRS_1989_1 = 1878
    esriSRGeoTransformation_SWEREF99_To_WGS_1984_1 = 1879
    esriSRGeoTransformation_S_JTSK_To_ETRS_1989_1 = 1622
    esriSRGeoTransformation_S_JTSK_To_ETRS_1989_2 = 1624
    esriSRGeoTransformation_S_JTSK_To_WGS_1984_1 = 1623
    esriSRGeoTransformation_S_JTSK_To_WGS_1984_2 = 1625
    esriSRGeoTransformation_Tahaa_To_WGS_1984_1 = 1913
    esriSRGeoTransformation_Tahiti_To_WGS_1984_1 = 1924
    esriSRGeoTransformation_Tete_To_WGS_1984_1 = 1683
    esriSRGeoTransformation_Tete_To_WGS_1984_2 = 1684
    esriSRGeoTransformation_Tete_To_WGS_1984_3 = 1685
    esriSRGeoTransformation_Tete_To_WGS_1984_4 = 1686
    esriSRGeoTransformation_Tete_To_WGS_1984_5 = 1687
    esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_4 = 1852
    esriSRGeoTransformation_TM65_To_ETRS_1989_1 = 1640
    esriSRGeoTransformation_TM65_To_WGS_1984_2 = 1641
    esriSRGeoTransformation_TM75_To_ETRS_1989_2 = 1953
    esriSRGeoTransformation_TM75_To_WGS_1984_2 = 1954
    esriSRGeoTransformation_TM75_To_WGS_1984_3 = 1956
    esriSRGeoTransformation_Yoff_To_WGS_1972_1 = 1828
    esriSRGeoTransformation_Amersfoort_To_ETRS_1989_mb = 1066
    esriSRGeoTransformation_Chatham_Islands_1979_To_NZGD_2000_1 = 1082
    esriSRGeoTransformation_Chatham_Islands_1979_To_WGS_1984_1 = 1081
    esriSRGeoTransformation_Chatham_Island_1971_To_WGS_1984 = 1080
    esriSRGeoTransformation_DHDN_To_WGS_1984_3x = 108206
    esriSRGeoTransformation_DHDN_To_WGS_1984_4x = 108207
    esriSRGeoTransformation_DHDN_To_WGS_1984_5x = 108208
    esriSRGeoTransformation_DHDN_To_WGS_1984_6x = 108209
    esriSRGeoTransformation_DHDN_To_WGS_1984_7x = 108210
    esriSRGeoTransformation_EUREF_FIN_To_ETRS_1989 = 108226
    esriSRGeoTransformation_EUREF_FIN_To_WGS_1984 = 108227
    esriSRGeoTransformation_Israel_To_WGS_1984 = 1073
    esriSRGeoTransformation_JGD_2000_To_WGS_1984 = 108107
    esriSRGeoTransformation_KKJ_To_ETRS_1989_2 = 10098
    esriSRGeoTransformation_KKJ_To_EUREF_FIN = 108229
    esriSRGeoTransformation_KKJ_To_WGS_1984_2 = 10099
    esriSRGeoTransformation_Jordan_To_WGS_1984 = 108233
    esriSRGeoTransformation_La_Canoa_To_SIRGAS = 108217
    esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_1 = 108222
    esriSRGeoTransformation_Lisboa_Hayford_To_Datum_73_2 = 108223
    esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_1 = 108224
    esriSRGeoTransformation_Lisboa_Hayford_To_Lisboa_Bessel_2 = 108225
    esriSRGeoTransformation_Midway_1961_To_WGS_1984 = 15818
    esriSRGeoTransformation_Midway_1961_To_WGS_1984_old = 15817
    esriSRGeoTransformation_Observ_Meteor_1965_To_WGS_1984_1 = 108234
    esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1x = 108220
    esriSRGeoTransformation_Palestine_1923_To_WGS_1984_2x = 108232
    esriSRGeoTransformation_SWEREF99_To_RT90 = 108212
    esriSRGeoTransformation_S_JTSK_To_Pulkovo_1942 = 108202
    esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965 = 108211
    esriSRGeoTransformation_WGS_1984_To_Observ_Meteor_1965_2 = 108235
    esriSRGeoTransformation_WGS_1984_To_RT90 = 108213
    esriSRGeoTransformation_Accra_To_WGS_1972_BE = 1570
    esriSRGeoTransformation_Accra_To_WGS_1984 = 1569
    esriSRGeoTransformation_AGD_1966_To_GDA_1994_8 = 1594
    esriSRGeoTransformation_AGD_1966_To_GDA_1994_9 = 1595
    esriSRGeoTransformation_Amersfoort_To_ETRS_1989 = 1751
    esriSRGeoTransformation_Aratu_To_WGS_1984_1 = 15754
    esriSRGeoTransformation_Aratu_To_WGS_1984_2 = 1550
    esriSRGeoTransformation_Aratu_To_WGS_1984_3 = 1551
    esriSRGeoTransformation_Aratu_To_WGS_1984_4 = 1552
    esriSRGeoTransformation_Belge_1972_To_WGS_1984_1 = 1609
    esriSRGeoTransformation_Belge_1972_To_WGS_1984_2 = 1610
    esriSRGeoTransformation_Bissau_To_WGS_1984 = 1547
    esriSRGeoTransformation_Bogota_Bogota_To_WGS_1984 = 8174
    esriSRGeoTransformation_Bogota_To_WGS_1984_2 = 1597
    esriSRGeoTransformation_Chos_Malal_1914_To_Campo_Inchauspe = 1528
    esriSRGeoTransformation_Chos_Malal_1914_To_WGS_1984 = 8517
    esriSRGeoTransformation_Conakry_1905_To_WGS_1984 = 1517
    esriSRGeoTransformation_Dabola_1981_To_WGS_1984 = 1518
    esriSRGeoTransformation_Deir_ez_zor_To_WGS_1972_BE = 1584
    esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_2 = 15741
    esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_3 = 1586
    esriSRGeoTransformation_Deir_ez_zor_To_WGS_1984_4 = 1587
    esriSRGeoTransformation_DHDN_To_ETRS_1989 = 1309
    esriSRGeoTransformation_ED_1950_To_ETRS_1989_1 = 1588
    esriSRGeoTransformation_ED_1950_To_WGS_1984_23 = 1612
    esriSRGeoTransformation_ED_1950_To_WGS_1984_24 = 1613
    esriSRGeoTransformation_Egypt_1907_To_WGS_1972 = 1545
    esriSRGeoTransformation_Egypt_1907_To_WGS_1984_3 = 1546
    esriSRGeoTransformation_Hanoi_1972_To_WGS_1984 = 1544
    esriSRGeoTransformation_Hito_XVIII_1963_To_WGS_1984 = 1529
    esriSRGeoTransformation_Hungarian_1972_To_ETRS_1989_1 = 1829
    esriSRGeoTransformation_Indian_1960_To_WGS_1972_BE = 1541
    esriSRGeoTransformation_Indian_1960_To_WGS_1984_1 = 8532
    esriSRGeoTransformation_Indian_1960_To_WGS_1984_2 = 1542
    esriSRGeoTransformation_Indian_1960_To_WGS_1984_3 = 1543
    esriSRGeoTransformation_Indian_1975_To_WGS_1984_3 = 1537
    esriSRGeoTransformation_IRENET95_To_ETRS_1989 = 1611
    esriSRGeoTransformation_Kalianpur_1937_To_WGS_1984_2 = 1533
    esriSRGeoTransformation_Korean_1995_To_WGS_1984_1 = 1558
    esriSRGeoTransformation_Malongo_1987_To_WGS_1984_2 = 1557
    esriSRGeoTransformation_MGI_To_WGS_1984_3 = 1618
    esriSRGeoTransformation_Minna_To_WGS_1984_3 = 1754
    esriSRGeoTransformation_Monte_Mario_Rome_To_WGS_1984 = 8175
    esriSRGeoTransformation_NAD_1927_To_WGS_1984_30 = 1530
    esriSRGeoTransformation_NAD_1983_harn_To_WGS_1984 = 1580
    esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_4 = 1531
    esriSRGeoTransformation_Nahrwan_1967_To_WGS_1984_5 = 1536
    esriSRGeoTransformation_Naparima_1955_To_WGS_1984_2 = 1555
    esriSRGeoTransformation_Naparima_1955_To_WGS_1984_3 = 1556
    esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1972_BE = 1560
    esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_3 = 8562
    esriSRGeoTransformation_NZGDd_1949_To_WGS_1984_2 = 1564
    esriSRGeoTransformation_NZGD_2000_To_WGS_1984_1 = 1565
    esriSRGeoTransformation_PDO_1993_To_WGS_1972 = 1616
    esriSRGeoTransformation_PDO_1993_To_WGS_1984_3 = 1617
    esriSRGeoTransformation_POSGAR_To_WGS_1984_1 = 1598
    esriSRGeoTransformation_PSAD_1956_To_WGS_1984_10 = 1582
    esriSRGeoTransformation_PSAD_1956_To_WGS_1984_11 = 1583
    esriSRGeoTransformation_Qatar_1974_To_WGS_1984_2 = 1562
    esriSRGeoTransformation_Qatar_1974_To_WGS_1984_3 = 1563
    esriSRGeoTransformation_SAD_1969_To_WGS_1984_14 = 1877
    esriSRGeoTransformation_Samoa_1962_To_WGS_1984 = 1577
    esriSRGeoTransformation_Sierra_Leone_1968_To_WGS_1984 = 1614
    esriSRGeoTransformation_SIRGAS_To_WGS_1984_1 = 1581
    esriSRGeoTransformation_South_Yemen_To_Yemen_NGN_1996 = 1539
    esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_2 = 1592
    esriSRGeoTransformation_Timbalai_1948_To_WGS_1984_3 = 1615
    esriSRGeoTransformation_Yemen_NGN_1996_To_WGS_1984 = 1540
    esriSRGeoTransformation_NTF_Paris_To_RGF_1993_1 = 108102
    esriSRGeoTransformation_Tokyo_To_JGD_2000_1 = 15483
    esriSRGeoTransformation_REGVEN_To_SIRGAS_1 = 1767
    esriSRGeoTransformation_Hjorsey_1955_To_WGS_1984 = 1951
    esriSRGeoTransformation_Tokyo_To_WGS_1984_2001 = 108106
    esriSRGeoTransformation_Pohnpei_To_NAD_1983 = 108133
    esriSRGeoTransformation_Bab_South_To_NAD_1983 = 108134
    esriSRGeoTransformation_Majuro_To_NAD_1983 = 108135
    esriSRGeoTransformation_Guam_1963_To_HARN_Rota = 108137
    esriSRGeoTransformation_Guam_1963_To_HARN_Saipan = 108138
    esriSRGeoTransformation_Guam_1963_To_HARN_Tinian_Sguijan = 108139
    esriSRGeoTransformation_NGO_1948_To_WGS_1984 = 108201
    esriSRGeoTransformation_Carthage_Paris_To_Carthage = 1881
    esriSRGeoTransformation_Gunung_Segara_Jakarta_To_Gunung_Segara = 1883
    esriSRGeoTransformation_Lisbon_1890_Lisbon_To_Lisbon_1890 = 1991
    esriSRGeoTransformation_Nord_Sahara_1959_Paris_To_Nord_Sahara_1959 = 1882
    esriSRGeoTransformation_S_JTSK_Ferro_To_S_JTSK = 1884
    esriSRGeoTransformation_Bern_1898_Bern_To_CH1903 = 1765
    esriSRGeoTransformation_Puerto_Rico_To_NAD_1983 = 1461
    esriSRGeoTransformation_NAD_1983_To_HARN_Iowa = 1705
    esriSRGeoTransformation_Samoa_1962_To_HARN_EastSamoa = 1579
    esriSRGeoTransformation_Samoa_1962_To_HARN_WestSamoa = 1578
    esriSRGeoTransformation_Guam_1963_To_HARN_Guam = 1068
    esriSRGeoTransformation_AGD_1966_To_GDA_1994_11_NTv2 = 1803
    esriSRGeoTransformation_AGD_1984_To_GDA_1994_5_NTv2 = 1804
    esriSRGeoTransformation_NZGD_1949_To_WGS_1984_3_NTv2 = 1670
    esriSRGeoTransformation_RGF_1993_To_NTF_NTv2 = 15958
    esriSRGeoTransformation_RGNC_1991_To_IGN72_Grande_Terre_NTv2 = 108471
    esriSRGeoTransformation_RGNC_1991_To_NEA74_Noumea_NTv2 = 108472
    esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NewBrunswick = 1841
    esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_2 = 1846
    esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_PEI = 1846
    esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_NovaScotia = 1850
    esriSRGeoTransformation_ATS_1977_To_NAD_1983_CSRS98_NTv2_Maritimes = 108302
    esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_2 = 1575
    esriSRGeoTransformation_NAD_1927_CGQ77_To_NAD_1983_CSRS98 = 1845
    esriSRGeoTransformation_NAD_1927_To_NAD_1983_6 = 1573
    esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_1 = 1844
    esriSRGeoTransformation_NAD_1927_To_NAD_1983_CSRS98_2 = 1847
    esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_1 = 1843
    esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_2 = 1848
    esriSRGeoTransformation_NAD_1983_To_NAD_1983_CSRS98_3 = 1849
    esriSRGeoTransformation_AGD_1984_To_GDA_1994_3 = 1559
    esriSRGeoTransformation_Ain_el_Abd_To_WGS_1984_3 = 1055
    esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_4 = 1056
    esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_5 = 1057
    esriSRGeoTransformation_Ain_El_Abd_To_WGS_1984_6 = 1058
    esriSRGeoTransformation_KOC_To_WGS_1984_1 = 1059
    esriSRGeoTransformation_NGN_To_WGS_1984_1 = 1060
    esriSRGeoTransformation_KUDAMS_To_WGS_1984_1 = 1061
    esriSRGeoTransformation_KUDAMS_To_WGS_1984_2 = 1062
    esriSRGeoTransformation_Vientiane_1982_To_Lao_1997_1 = 1063
    esriSRGeoTransformation_Lao_1993_To_Lao_1997_1 = 1064
    esriSRGeoTransformation_Lao_1997_To_WGS_1984_1 = 1065
    esriSRGeoTransformation_Minna_To_WGS_1984_11 = 1067
    esriSRGeoTransformation_Guam_1963_To_WGS_1984_1 = 1070
    esriSRGeoTransformation_Palestine_1923_To_Israel_1 = 1071
    esriSRGeoTransformation_Palestine_1923_To_WGS_1984_1 = 1074
    esriSRGeoTransformation_ED_1950_To_WGS_1984_38 = 1075
    esriSRGeoTransformation_Luxembourg_1930_To_ETRS_1989_2 = 1078
    esriSRGeoTransformation_Luxembourg_1930_To_WGS_1984_2 = 1079
    esriSRGeoTransformation_Jamaica_1969_To_WGS_1972_2 = 1083
    esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_2 = 1085
    esriSRGeoTransformation_Jamaica_1969_To_WGS_1984_3 = 15927
    esriSRGeoTransformation_ED_1950_To_WGS_1984_37 = 1087
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_5 = 1088
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_6 = 1089
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_7 = 1090
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_8 = 1091
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_9 = 1092
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_10 = 1093
    esriSRGeoTransformation_Monte_Mario_To_WGS_1984_11 = 1094
    esriSRGeoTransformation_ED_1950_ED77_To_WGS_1984_2 = 1141
    esriSRGeoTransformation_Nord_Sahara_1959_To_WGS_1984_2 = 1255
    esriSRGeoTransformation_WGS_1972_BE_To_WGS_1972_1 = 1239
    esriSRGeoTransformation_WGS_1972_BE_To_WGS_1984_1 = 1240
    esriSRGeoTransformation_RT90_To_ETRS_1989_1 = 1437
    esriSRGeoTransformation_ED_1950_To_WGS_1984_39 = 1853
    esriSRGeoTransformation_Porto_Santo_1936_To_WGS_1984_1 = 1888
    esriSRGeoTransformation_Anna_1_1965_To_WGS_1984 = 15794
    esriSRGeoTransformation_Antigua_1943_To_WGS_1984_NGA = 15811
    esriSRGeoTransformation_Ascension_Island_1958_To_WGS_1984 = 15797
    esriSRGeoTransformation_Astro_1952_To_WGS_1984 = 15799
    esriSRGeoTransformation_Ayabelle_To_WGS_1984 = 15800
    esriSRGeoTransformation_Beacon_E_1945_To_WGS_1984 = 15796
    esriSRGeoTransformation_Bellevue_IGN_To_WGS_1984 = 15801
    esriSRGeoTransformation_Camp_Area_To_WGS_1984 = 15802
    esriSRGeoTransformation_Canton_1966_To_WGS_1984 = 15803
    esriSRGeoTransformation_Cape_Canaveral_To_WGS_1984 = 15804
    esriSRGeoTransformation_Deception_Island_To_WGS_1984 = 15812
    esriSRGeoTransformation_DOS_1968_To_WGS_1984 = 108259
    esriSRGeoTransformation_DOS_71_4_To_WGS_1984 = 15798
    esriSRGeoTransformation_Easter_Island_1967_To_WGS_1984 = 15806
    esriSRGeoTransformation_Estonia_1937_To_WGS_1984_NGA = 108261
    esriSRGeoTransformation_European_1979_To_WGS_1984 = 15752
    esriSRGeoTransformation_Fort_Thomas_1955_To_WGS_1984 = 108262
    esriSRGeoTransformation_GUX_1_To_WGS_1984 = 108263
    esriSRGeoTransformation_Hermannskogel_To_WGS_1984 = 108264
    esriSRGeoTransformation_ISTS_061_1968_To_WGS_1984 = 15813
    esriSRGeoTransformation_ISTS_073_1969_To_WGS_1984 = 15808
    esriSRGeoTransformation_Johnston_Island_1961_To_WGS_1984 = 15809
    esriSRGeoTransformation_Kusaie_1951_To_WGS_1984 = 15810
    esriSRGeoTransformation_LC5_1961_To_WGS_1984 = 108268
    esriSRGeoTransformation_Pico_de_Las_Nieves_To_WGS_1984 = 15815
    esriSRGeoTransformation_Pitcairn_1967_To_WGS_1984 = 15819
    esriSRGeoTransformation_Reunion_To_WGS_1984_NGA = 15751
    esriSRGeoTransformation_Santo_DOS_1965_To_WGS_1984 = 15820
    esriSRGeoTransformation_South_Asia_Singapore_To_WGS_1984 = 108269
    esriSRGeoTransformation_S_JTSK_To_WGS_1984_NGA = 15965
    esriSRGeoTransformation_Tern_Island_1961_To_WGS_1984 = 15795
    esriSRGeoTransformation_Tristan_1968_To_WGS_1984 = 15816
    esriSRGeoTransformation_Viti_Levu_1916_To_WGS_1984 = 15821
    esriSRGeoTransformation_Wake_Eniwetok_1960_To_WGS_1984 = 15822
    esriSRGeoTransformation_Wake_Island_1952_To_WGS_1984 = 15823
    esriSRGeoTransformation_Estonia_1937_To_ETRS_1989 = 108272
    esriSRGeoTransformation_D48_To_ETRS_1989 = 108276
    esriSRGeoTransformation_D48_To_WGS_1984 = 108277
    esriSRGeoTransformation_ITRF_2000_To_WGS_1984 = 108280
    esriSRGeoTransformation_ITRF_2000_To_NAD_1983_HARN = 108281
    esriSRGeoTransformation_WGS_1984_ITRF00_To_NAD_1983_HARN = 108282
    esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_RN = 108283
    esriSRGeoTransformation_Ocotepeque_1935_To_WGS_1984_3PAR = 108284
    esriSRGeoTransformation_JAD_2001_To_WGS_1984 = 15925
    esriSRGeoTransformation_MONREF_1997_To_MSK_1942_1 = 108286
    esriSRGeoTransformation_MONREF_1997_To_MSK_1942_2 = 108287
    esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_1 = 108288
    esriSRGeoTransformation_MONREF_1997_To_Pulkovo_1942_2 = 108289
    esriSRGeoTransformation_MAGNA_To_SIRGAS = 108290
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_1_MB = 15730
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_2_MB = 15731
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_3_MB = 15732
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_4_MB = 15733
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_5_MB = 15734
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_6_MB = 15735
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_7_MB = 15736
    esriSRGeoTransformation_Bogota_To_MAGNA_Region_8_MB = 15737
    esriSRGeoTransformation_Guam_1963_To_WGS_1984_Saipan = 108299
    esriSRGeoTransformation_NAD_1983_HARN_To_WGS_1984_Saipan = 108300
    esriSRGeoTransformation_Pohnpei_To_WGS_1984 = 108303

class esriSRVerticalCSType(Enumeration):
    __slots__ = ['esriSRVertCS_AIOC95depths',
                 'esriSRVertCS_Alicante',
                 'esriSRVertCS_Antalya',
                 'esriSRVertCS_Auckland',
                 'esriSRVertCS_AustralianHeightDatum',
                 'esriSRVertCS_AHD_Tasmania',
                 'esriSRVertCS_Baltic',
                 'esriSRVertCS_Baltic1982',
                 'esriSRVertCS_BandarAbbas',
                 'esriSRVertCS_Belfast',
                 'esriSRVertCS_BlackSea',
                 'esriSRVertCS_Bluff',
                 'esriSRVertCS_CVD_1928',
                 'esriSRVertCS_Cascais',
                 'esriSRVertCS_Caspian',
                 'esriSRVertCS_ChathamIsland',
                 'esriSRVertCS_Constanta',
                 'esriSRVertCS_DanskNormalNul',
                 'esriSRVertCS_DHHN1985',
                 'esriSRVertCS_DHHN1992',
                 'esriSRVertCS_Douglas',
                 'esriSRVertCS_Dunedin',
                 'esriSRVertCS_Durres',
                 'esriSRVertCS_EGM96Geoid',
                 'esriSRVertCS_Baltic1980',
                 'esriSRVertCS_EVRS2000',
                 'esriSRVertCS_FahudHeightDatum1993',
                 'esriSRVertCS_FairIsle',
                 'esriSRVertCS_Fao',
                 'esriSRVertCS_FlannanIsles',
                 'esriSRVertCS_Foula',
                 'esriSRVertCS_GHA',
                 'esriSRVertCS_Gisborne',
                 'esriSRVertCS_HaTien1960',
                 'esriSRVertCS_HongKongChartDatum',
                 'esriSRVertCS_HongKongPrincipalDatum',
                 'esriSRVertCS_HonDau1992',
                 'esriSRVertCS_IGN1987',
                 'esriSRVertCS_IGN1988',
                 'esriSRVertCS_IGN1989',
                 'esriSRVertCS_JapaneseStandardLevellingDatum',
                 'esriSRVertCS_KOCConstructionDatum',
                 'esriSRVertCS_KOCWellDatum',
                 'esriSRVertCS_KuwaitPWD',
                 'esriSRVertCS_Landeshohennetz1995',
                 'esriSRVertCS_Landesnivellement1902',
                 'esriSRVertCS_Lerwick',
                 'esriSRVertCS_Lyttleton',
                 'esriSRVertCS_MalinHead',
                 'esriSRVertCS_Maputo',
                 'esriSRVertCS_MSL_depth',
                 'esriSRVertCS_MSL_height',
                 'esriSRVertCS_Moturiki',
                 'esriSRVertCS_N60',
                 'esriSRVertCS_NormaalAmsterdamsPeil',
                 'esriSRVertCS_Napier',
                 'esriSRVertCS_NAVD1988',
                 'esriSRVertCS_Nelson',
                 'esriSRVertCS_Newlyn',
                 'esriSRVertCS_Newlyn_OrkneyIsles',
                 'esriSRVertCS_NGF_IGN69',
                 'esriSRVertCS_NGF_IGN78',
                 'esriSRVertCS_NGF_Lallemand',
                 'esriSRVertCS_NGG1977',
                 'esriSRVertCS_NGNC',
                 'esriSRVertCS_NGVD1929',
                 'esriSRVertCS_NG_L',
                 'esriSRVertCS_NorwayNormalNul1954',
                 'esriSRVertCS_NorthRona',
                 'esriSRVertCS_NVN1999',
                 'esriSRVertCS_OneTreePoint',
                 'esriSRVertCS_Oostende',
                 'esriSRVertCS_PDOHeightDatum1993',
                 'esriSRVertCS_Piraeus',
                 'esriSRVertCS_Poolbeg',
                 'esriSRVertCS_RH70',
                 'esriSRVertCS_SNN76',
                 'esriSRVertCS_StewartIsland',
                 'esriSRVertCS_Stornoway',
                 'esriSRVertCS_St_Kilda',
                 'esriSRVertCS_St_Marys',
                 'esriSRVertCS_SuleSkerry',
                 'esriSRVertCS_Taranaki',
                 'esriSRVertCS_Tararu',
                 'esriSRVertCS_Wellington',
                 'esriSRVertCS_YellowSea1956',
                 'esriSRVertCS_YellowSea1985',
                 'esriSRVertCS_DangerIsland1950',
                 'esriSRVertCS_Guadeloupe1951',
                 'esriSRVertCS_Lagos1955',
                 'esriSRVertCS_Martinique1955',
                 'esriSRVertCS_Mayotte1950',
                 'esriSRVertCS_NGC1948',
                 'esriSRVertCS_WGS1984Geoid',
                 'esriSRVertCS_WGS1984',
                 'esriSRVertCS_ETRS1989',
                 'esriSRVertCS_NAD1983',
                 'esriSRVertCS_NGPF',
                 'esriSRVertCS_IGN1966',
                 'esriSRVertCS_MooreaSAU1981',
                 'esriSRVertCS_RaiateaSAU2001',
                 'esriSRVertCS_MaupitiSAU2001',
                 'esriSRVertCS_HuahineSAU2001',
                 'esriSRVertCS_TahaaSAU2001',
                 'esriSRVertCS_BoraBoraSAU2001',
                 'esriSRVertCS_IGLD1955',
                 'esriSRVertCS_IGLD1985',
                 'esriSRVertCS_AIOC95_heights',
                 'esriSRVertCS_EGM84Geoid',
                 'esriSRVertCS_DVR90',
                 'esriSRVertCS_RH2000']
    esriSRVertCS_AIOC95depths = 5734
    esriSRVertCS_Alicante = 5782
    esriSRVertCS_Antalya = 5775
    esriSRVertCS_Auckland = 5759
    esriSRVertCS_AustralianHeightDatum = 5711
    esriSRVertCS_AHD_Tasmania = 5712
    esriSRVertCS_Baltic = 5705
    esriSRVertCS_Baltic1982 = 5786
    esriSRVertCS_BandarAbbas = 5752
    esriSRVertCS_Belfast = 5732
    esriSRVertCS_BlackSea = 5735
    esriSRVertCS_Bluff = 5760
    esriSRVertCS_CVD_1928 = 5713
    esriSRVertCS_Cascais = 5780
    esriSRVertCS_Caspian = 5706
    esriSRVertCS_ChathamIsland = 5771
    esriSRVertCS_Constanta = 5781
    esriSRVertCS_DanskNormalNul = 5733
    esriSRVertCS_DHHN1985 = 5784
    esriSRVertCS_DHHN1992 = 5783
    esriSRVertCS_Douglas = 5750
    esriSRVertCS_Dunedin = 5761
    esriSRVertCS_Durres = 5777
    esriSRVertCS_EGM96Geoid = 5773
    esriSRVertCS_Baltic1980 = 5787
    esriSRVertCS_EVRS2000 = 5730
    esriSRVertCS_FahudHeightDatum1993 = 5725
    esriSRVertCS_FairIsle = 5741
    esriSRVertCS_Fao = 5751
    esriSRVertCS_FlannanIsles = 5748
    esriSRVertCS_Foula = 5743
    esriSRVertCS_GHA = 5778
    esriSRVertCS_Gisborne = 5762
    esriSRVertCS_HaTien1960 = 5726
    esriSRVertCS_HongKongChartDatum = 5739
    esriSRVertCS_HongKongPrincipalDatum = 5738
    esriSRVertCS_HonDau1992 = 5727
    esriSRVertCS_IGN1987 = 5756
    esriSRVertCS_IGN1988 = 5757
    esriSRVertCS_IGN1989 = 5758
    esriSRVertCS_JapaneseStandardLevellingDatum = 5723
    esriSRVertCS_KOCConstructionDatum = 5790
    esriSRVertCS_KOCWellDatum = 5789
    esriSRVertCS_KuwaitPWD = 5788
    esriSRVertCS_Landeshohennetz1995 = 5729
    esriSRVertCS_Landesnivellement1902 = 5728
    esriSRVertCS_Lerwick = 5742
    esriSRVertCS_Lyttleton = 5763
    esriSRVertCS_MalinHead = 5731
    esriSRVertCS_Maputo = 5722
    esriSRVertCS_MSL_depth = 5715
    esriSRVertCS_MSL_height = 5714
    esriSRVertCS_Moturiki = 5764
    esriSRVertCS_N60 = 5717
    esriSRVertCS_NormaalAmsterdamsPeil = 5709
    esriSRVertCS_Napier = 5765
    esriSRVertCS_NAVD1988 = 5703
    esriSRVertCS_Nelson = 5766
    esriSRVertCS_Newlyn = 5701
    esriSRVertCS_Newlyn_OrkneyIsles = 5740
    esriSRVertCS_NGF_IGN69 = 5720
    esriSRVertCS_NGF_IGN78 = 5721
    esriSRVertCS_NGF_Lallemand = 5719
    esriSRVertCS_NGG1977 = 5755
    esriSRVertCS_NGNC = 5753
    esriSRVertCS_NGVD1929 = 5702
    esriSRVertCS_NG_L = 5774
    esriSRVertCS_NorwayNormalNul1954 = 5776
    esriSRVertCS_NorthRona = 5745
    esriSRVertCS_NVN1999 = 5779
    esriSRVertCS_OneTreePoint = 5767
    esriSRVertCS_Oostende = 5710
    esriSRVertCS_PDOHeightDatum1993 = 5724
    esriSRVertCS_Piraeus = 5716
    esriSRVertCS_Poolbeg = 5754
    esriSRVertCS_RH70 = 5718
    esriSRVertCS_SNN76 = 5785
    esriSRVertCS_StewartIsland = 5772
    esriSRVertCS_Stornoway = 5746
    esriSRVertCS_St_Kilda = 5747
    esriSRVertCS_St_Marys = 5749
    esriSRVertCS_SuleSkerry = 5744
    esriSRVertCS_Taranaki = 5769
    esriSRVertCS_Tararu = 5768
    esriSRVertCS_Wellington = 5770
    esriSRVertCS_YellowSea1956 = 5736
    esriSRVertCS_YellowSea1985 = 5737
    esriSRVertCS_DangerIsland1950 = 5792
    esriSRVertCS_Guadeloupe1951 = 5795
    esriSRVertCS_Lagos1955 = 5796
    esriSRVertCS_Martinique1955 = 5794
    esriSRVertCS_Mayotte1950 = 5793
    esriSRVertCS_NGC1948 = 5791
    esriSRVertCS_WGS1984Geoid = 105700
    esriSRVertCS_WGS1984 = 115700
    esriSRVertCS_ETRS1989 = 115701
    esriSRVertCS_NAD1983 = 115702
    esriSRVertCS_NGPF = 5600
    esriSRVertCS_IGN1966 = 5601
    esriSRVertCS_MooreaSAU1981 = 5602
    esriSRVertCS_RaiateaSAU2001 = 5603
    esriSRVertCS_MaupitiSAU2001 = 5604
    esriSRVertCS_HuahineSAU2001 = 5605
    esriSRVertCS_TahaaSAU2001 = 5606
    esriSRVertCS_BoraBoraSAU2001 = 5607
    esriSRVertCS_IGLD1955 = 5608
    esriSRVertCS_IGLD1985 = 5609
    esriSRVertCS_AIOC95_heights = 5797
    esriSRVertCS_EGM84Geoid = 5798
    esriSRVertCS_DVR90 = 5799
    esriSRVertCS_RH2000 = 5613

class esriSRVerticalDatumType(Enumeration):
    __slots__ = ['esriSRVertDatum_AHD',
                 'esriSRVertDatum_AHD_Tasmania',
                 'esriSRVertDatum_AIOC1995',
                 'esriSRVertDatum_Alicante',
                 'esriSRVertDatum_Antalya',
                 'esriSRVertDatum_Auckland',
                 'esriSRVertDatum_Baltic1980',
                 'esriSRVertDatum_Baltic1982',
                 'esriSRVertDatum_BalticSea',
                 'esriSRVertDatum_BandarAbbas',
                 'esriSRVertDatum_Belfast',
                 'esriSRVertDatum_BlackSea',
                 'esriSRVertDatum_Bluff',
                 'esriSRVertDatum_Cascais',
                 'esriSRVertDatum_CaspianSea',
                 'esriSRVertDatum_ChathamIsland',
                 'esriSRVertDatum_Constanta',
                 'esriSRVertDatum_CVD1928',
                 'esriSRVertDatum_DanskNormalNul',
                 'esriSRVertDatum_DHHN1985',
                 'esriSRVertDatum_DHHN1992',
                 'esriSRVertDatum_Douglas',
                 'esriSRVertDatum_Dunedin',
                 'esriSRVertDatum_Durres',
                 'esriSRVertDatum_EGM96Geoid',
                 'esriSRVertDatum_EVRF2000',
                 'esriSRVertDatum_FahudHeightDatum',
                 'esriSRVertDatum_FairIsle',
                 'esriSRVertDatum_Fao',
                 'esriSRVertDatum_FlannanIsles',
                 'esriSRVertDatum_Foula',
                 'esriSRVertDatum_GebrauchshohenAdria',
                 'esriSRVertDatum_Gisborne',
                 'esriSRVertDatum_HaTien1960',
                 'esriSRVertDatum_Helsinki1960',
                 'esriSRVertDatum_HongKongChartDatum',
                 'esriSRVertDatum_HongKongPrincipalDatum',
                 'esriSRVertDatum_HonDau1992',
                 'esriSRVertDatum_IGN1987',
                 'esriSRVertDatum_IGN1988',
                 'esriSRVertDatum_IGN1989',
                 'esriSRVertDatum_JapaneseStandardLevellingDatum1949',
                 'esriSRVertDatum_KOCConstructionDatum',
                 'esriSRVertDatum_KOCWellDatum',
                 'esriSRVertDatum_KuwaitPWD',
                 'esriSRVertDatum_Landeshohennetz1995',
                 'esriSRVertDatum_Landesnivellement1902',
                 'esriSRVertDatum_Lerwick',
                 'esriSRVertDatum_Lyttleton',
                 'esriSRVertDatum_MalinHead',
                 'esriSRVertDatum_Maputo',
                 'esriSRVertDatum_MeanSeaLevel',
                 'esriSRVertDatum_Moturiki',
                 'esriSRVertDatum_Napier',
                 'esriSRVertDatum_NationalVerticalNetwork1999',
                 'esriSRVertDatum_NAVD1988',
                 'esriSRVertDatum_Nelson',
                 'esriSRVertDatum_NGF_IGN69',
                 'esriSRVertDatum_NGF_IGN78',
                 'esriSRVertDatum_NGF_Lalle',
                 'esriSRVertDatum_NGG1977',
                 'esriSRVertDatum_NGNC',
                 'esriSRVertDatum_NGVD1929',
                 'esriSRVertDatum_NivellementGeneralDuLuxembourg',
                 'esriSRVertDatum_NormaalAmsterdamsPeil',
                 'esriSRVertDatum_NorthRona',
                 'esriSRVertDatum_NorwayNormalNul1954',
                 'esriSRVertDatum_Newlyn_OrkneyIsles',
                 'esriSRVertDatum_OneTreePoint',
                 'esriSRVertDatum_Oostende',
                 'esriSRVertDatum_OrdnanceDatumNewlyn',
                 'esriSRVertDatum_PDOHeightDatum1993',
                 'esriSRVertDatum_PiraeusHarbour1986',
                 'esriSRVertDatum_Poolbeg',
                 'esriSRVertDatum_Riketshoghtsystem1970',
                 'esriSRVertDatum_SeaLevel',
                 'esriSRVertDatum_SNN76',
                 'esriSRVertDatum_StewartIsland',
                 'esriSRVertDatum_Stornoway',
                 'esriSRVertDatum_St_Kilda',
                 'esriSRVertDatum_St_Marys',
                 'esriSRVertDatum_SuleSkerry',
                 'esriSRVertDatum_Taranaki',
                 'esriSRVertDatum_Tararu',
                 'esriSRVertDatum_Wellington',
                 'esriSRVertDatum_YellowSea1956',
                 'esriSRVertDatum_YellowSea1985',
                 'esriSRVertDatum_DangerIsland1950',
                 'esriSRVertDatum_Guadeloupe1951',
                 'esriSRVertDatum_Lagos1955',
                 'esriSRVertDatum_Martinique1955',
                 'esriSRVertDatum_Mayotte1950',
                 'esriSRVertDatum_NGC1948',
                 'esriSRVertDatum_WGS1984Geoid',
                 'esriSRVertDatum_NGPF',
                 'esriSRVertDatum_IGN1966',
                 'esriSRVertDatum_MooreaSAU1981',
                 'esriSRVertDatum_RaiateaSAU2001',
                 'esriSRVertDatum_MaupitiSAU2001',
                 'esriSRVertDatum_HuahineSAU2001',
                 'esriSRVertDatum_TahaaSAU2001',
                 'esriSRVertDatum_BoraBoraSAU2001',
                 'esriSRVertDatum_IGLD1955',
                 'esriSRVertDatum_IGLD1985',
                 'esriSRVertDatum_EGM84Geoid',
                 'esriSRVertDatum_DVR90',
                 'esriSRVertDatum_RH2000']
    esriSRVertDatum_AHD = 5111
    esriSRVertDatum_AHD_Tasmania = 5112
    esriSRVertDatum_AIOC1995 = 5133
    esriSRVertDatum_Alicante = 5180
    esriSRVertDatum_Antalya = 5173
    esriSRVertDatum_Auckland = 5157
    esriSRVertDatum_Baltic1980 = 5185
    esriSRVertDatum_Baltic1982 = 5184
    esriSRVertDatum_BalticSea = 5105
    esriSRVertDatum_BandarAbbas = 5150
    esriSRVertDatum_Belfast = 5131
    esriSRVertDatum_BlackSea = 5134
    esriSRVertDatum_Bluff = 5158
    esriSRVertDatum_Cascais = 5178
    esriSRVertDatum_CaspianSea = 5106
    esriSRVertDatum_ChathamIsland = 5169
    esriSRVertDatum_Constanta = 5179
    esriSRVertDatum_CVD1928 = 5114
    esriSRVertDatum_DanskNormalNul = 5132
    esriSRVertDatum_DHHN1985 = 5182
    esriSRVertDatum_DHHN1992 = 5181
    esriSRVertDatum_Douglas = 5148
    esriSRVertDatum_Dunedin = 5159
    esriSRVertDatum_Durres = 5175
    esriSRVertDatum_EGM96Geoid = 5171
    esriSRVertDatum_EVRF2000 = 5129
    esriSRVertDatum_FahudHeightDatum = 5124
    esriSRVertDatum_FairIsle = 5139
    esriSRVertDatum_Fao = 5149
    esriSRVertDatum_FlannanIsles = 5146
    esriSRVertDatum_Foula = 5141
    esriSRVertDatum_GebrauchshohenAdria = 5176
    esriSRVertDatum_Gisborne = 5160
    esriSRVertDatum_HaTien1960 = 5125
    esriSRVertDatum_Helsinki1960 = 5116
    esriSRVertDatum_HongKongChartDatum = 5136
    esriSRVertDatum_HongKongPrincipalDatum = 5135
    esriSRVertDatum_HonDau1992 = 5126
    esriSRVertDatum_IGN1987 = 5154
    esriSRVertDatum_IGN1988 = 5155
    esriSRVertDatum_IGN1989 = 5156
    esriSRVertDatum_JapaneseStandardLevellingDatum1949 = 5122
    esriSRVertDatum_KOCConstructionDatum = 5188
    esriSRVertDatum_KOCWellDatum = 5187
    esriSRVertDatum_KuwaitPWD = 5186
    esriSRVertDatum_Landeshohennetz1995 = 5128
    esriSRVertDatum_Landesnivellement1902 = 5127
    esriSRVertDatum_Lerwick = 5140
    esriSRVertDatum_Lyttleton = 5161
    esriSRVertDatum_MalinHead = 5130
    esriSRVertDatum_Maputo = 5121
    esriSRVertDatum_MeanSeaLevel = 5100
    esriSRVertDatum_Moturiki = 5162
    esriSRVertDatum_Napier = 5163
    esriSRVertDatum_NationalVerticalNetwork1999 = 5177
    esriSRVertDatum_NAVD1988 = 5103
    esriSRVertDatum_Nelson = 5164
    esriSRVertDatum_NGF_IGN69 = 5119
    esriSRVertDatum_NGF_IGN78 = 5120
    esriSRVertDatum_NGF_Lalle = 5118
    esriSRVertDatum_NGG1977 = 5153
    esriSRVertDatum_NGNC = 5151
    esriSRVertDatum_NGVD1929 = 5102
    esriSRVertDatum_NivellementGeneralDuLuxembourg = 5172
    esriSRVertDatum_NormaalAmsterdamsPeil = 5109
    esriSRVertDatum_NorthRona = 5143
    esriSRVertDatum_NorwayNormalNul1954 = 5174
    esriSRVertDatum_Newlyn_OrkneyIsles = 5138
    esriSRVertDatum_OneTreePoint = 5165
    esriSRVertDatum_Oostende = 5110
    esriSRVertDatum_OrdnanceDatumNewlyn = 5101
    esriSRVertDatum_PDOHeightDatum1993 = 5123
    esriSRVertDatum_PiraeusHarbour1986 = 5115
    esriSRVertDatum_Poolbeg = 5152
    esriSRVertDatum_Riketshoghtsystem1970 = 5117
    esriSRVertDatum_SeaLevel = 5113
    esriSRVertDatum_SNN76 = 5183
    esriSRVertDatum_StewartIsland = 5170
    esriSRVertDatum_Stornoway = 5144
    esriSRVertDatum_St_Kilda = 5145
    esriSRVertDatum_St_Marys = 5147
    esriSRVertDatum_SuleSkerry = 5142
    esriSRVertDatum_Taranaki = 5167
    esriSRVertDatum_Tararu = 5166
    esriSRVertDatum_Wellington = 5168
    esriSRVertDatum_YellowSea1956 = 5104
    esriSRVertDatum_YellowSea1985 = 5137
    esriSRVertDatum_DangerIsland1950 = 5190
    esriSRVertDatum_Guadeloupe1951 = 5193
    esriSRVertDatum_Lagos1955 = 5194
    esriSRVertDatum_Martinique1955 = 5192
    esriSRVertDatum_Mayotte1950 = 5191
    esriSRVertDatum_NGC1948 = 5189
    esriSRVertDatum_WGS1984Geoid = 105100
    esriSRVertDatum_NGPF = 5195
    esriSRVertDatum_IGN1966 = 5196
    esriSRVertDatum_MooreaSAU1981 = 5197
    esriSRVertDatum_RaiateaSAU2001 = 5198
    esriSRVertDatum_MaupitiSAU2001 = 5199
    esriSRVertDatum_HuahineSAU2001 = 5200
    esriSRVertDatum_TahaaSAU2001 = 5201
    esriSRVertDatum_BoraBoraSAU2001 = 5202
    esriSRVertDatum_IGLD1955 = 5204
    esriSRVertDatum_IGLD1985 = 5205
    esriSRVertDatum_EGM84Geoid = 5203
    esriSRVertDatum_DVR90 = 5206
    esriSRVertDatum_RH2000 = 5208

class esriShapeType(Enumeration):
    __slots__ = ['esriShapeNull',
                 'esriShapePoint',
                 'esriShapePointM',
                 'esriShapePointZM',
                 'esriShapePointZ',
                 'esriShapeMultipoint',
                 'esriShapeMultipointM',
                 'esriShapeMultipointZM',
                 'esriShapeMultipointZ',
                 'esriShapePolyline',
                 'esriShapePolylineM',
                 'esriShapePolylineZM',
                 'esriShapePolylineZ',
                 'esriShapePolygon',
                 'esriShapePolygonM',
                 'esriShapePolygonZM',
                 'esriShapePolygonZ',
                 'esriShapeMultiPatchM',
                 'esriShapeMultiPatch',
                 'esriShapeGeneralPolyline',
                 'esriShapeGeneralPolygon',
                 'esriShapeGeneralPoint',
                 'esriShapeGeneralMultipoint',
                 'esriShapeGeneralMultiPatch',
                 'esriShapeTypeLast']
    esriShapeNull = 0
    esriShapePoint = 1
    esriShapePointM = 21
    esriShapePointZM = 11
    esriShapePointZ = 9
    esriShapeMultipoint = 8
    esriShapeMultipointM = 28
    esriShapeMultipointZM = 18
    esriShapeMultipointZ = 20
    esriShapePolyline = 3
    esriShapePolylineM = 23
    esriShapePolylineZM = 13
    esriShapePolylineZ = 10
    esriShapePolygon = 5
    esriShapePolygonM = 25
    esriShapePolygonZM = 15
    esriShapePolygonZ = 19
    esriShapeMultiPatchM = 31
    esriShapeMultiPatch = 32
    esriShapeGeneralPolyline = 50
    esriShapeGeneralPolygon = 51
    esriShapeGeneralPoint = 52
    esriShapeGeneralMultipoint = 53
    esriShapeGeneralMultiPatch = 54
    esriShapeTypeLast = 55

class esriShapeModifiers(Enumeration):
    __slots__ = ['esriShapeHasZs',
                 'esriShapeHasMs',
                 'esriShapeHasCurves',
                 'esriShapeHasIDs',
                 'esriShapeHasNormals',
                 'esriShapeHasTextures',
                 'esriShapeHasPartIDs',
                 'esriShapeHasMaterials',
                 'esriShapeIsCompressed',
                 'esriShapeModifierMask',
                 'esriShapeMultiPatchModifierMask',
                 'esriShapeBasicTypeMask',
                 'esriShapeBasicModifierMask',
                 'esriShapeNonBasicModifierMask',
                 'esriShapeExtendedModifierMask']
    esriShapeHasZs = 80000000
    esriShapeHasMs = 1073741824
    esriShapeHasCurves = 536870912
    esriShapeHasIDs = 268435456
    esriShapeHasNormals = 134217728
    esriShapeHasTextures = 67108864
    esriShapeHasPartIDs = 33554432
    esriShapeHasMaterials = 16777216
    esriShapeIsCompressed = 8388608
    esriShapeModifierMask = -16777216
    esriShapeMultiPatchModifierMask = 15728640
    esriShapeBasicTypeMask = 255
    esriShapeBasicModifierMask = -1073741824
    esriShapeNonBasicModifierMask = 1056964608
    esriShapeExtendedModifierMask = -587202560

class esriCurveIteratorEnum(Enumeration):
    __slots__ = ['esriCurveIteratorNoStop',
                 'esriCurveIteratorStopAtPartFrom',
                 'esriCurveIteratorStopAtPartTo',
                 'esriCurveIteratorStopAtPartEndPoints',
                 'esriCurveIteratorStopAtCurveEnd']
    esriCurveIteratorNoStop = 0
    esriCurveIteratorStopAtPartFrom = 1
    esriCurveIteratorStopAtPartTo = 2
    esriCurveIteratorStopAtPartEndPoints = 3
    esriCurveIteratorStopAtCurveEnd = 4

class esriArcOrientation(Enumeration):
    __slots__ = ['esriArcClockwise',
                 'esriArcCounterClockwise',
                 'esriArcMinor',
                 'esriArcMajor']
    esriArcClockwise = 0
    esriArcCounterClockwise = 1
    esriArcMinor = 2
    esriArcMajor = 3

class esriMultiPatchRingType(Enumeration):
    __slots__ = ['esriMultiPatchInvalidRing',
                 'esriMultiPatchUndefinedRing',
                 'esriMultiPatchFirstRing',
                 'esriMultiPatchRing',
                 'esriMultiPatchOuterRing',
                 'esriMultiPatchInnerRing',
                 'esriMultiPatchBeginningRingMask',
                 'esriMultiPatchFollowingRingMask',
                 'esriMultiPatchProblemCaseRingMask']
    esriMultiPatchInvalidRing = 1
    esriMultiPatchUndefinedRing = 2
    esriMultiPatchFirstRing = 4
    esriMultiPatchRing = 8
    esriMultiPatchOuterRing = 16
    esriMultiPatchInnerRing = 32
    esriMultiPatchBeginningRingMask = 28
    esriMultiPatchFollowingRingMask = 40
    esriMultiPatchProblemCaseRingMask = 3

class esriGeodeticType(Enumeration):
    __slots__ = ['esriGeodeticTypeGeodesic',
                 'esriGeodeticTypeLoxodrome',
                 'esriGeodeticTypeGreatElliptic',
                 'esriGeodeticTypeNormalSection']
    esriGeodeticTypeGeodesic = 0
    esriGeodeticTypeLoxodrome = 1
    esriGeodeticTypeGreatElliptic = 2
    esriGeodeticTypeNormalSection = 3

class esriCurveDensifyMethod(Enumeration):
    __slots__ = ['esriCurveDensifyByLength',
                 'esriCurveDensifyByAngle',
                 'esriCurveDensifyByDeviation']
    esriCurveDensifyByLength = 0
    esriCurveDensifyByAngle = 1
    esriCurveDensifyByDeviation = 2

class esriGeometryHitPartType(Enumeration):
    __slots__ = ['esriGeometryPartNone',
                 'esriGeometryPartVertex',
                 'esriGeometryPartBoundary',
                 'esriGeometryPartMidpoint',
                 'esriGeometryPartCentroid',
                 'esriGeometryPartEndpoint',
                 'esriGeometryPartSurface']
    esriGeometryPartNone = 0
    esriGeometryPartVertex = 1
    esriGeometryPartBoundary = 4
    esriGeometryPartMidpoint = 8
    esriGeometryPartCentroid = 32
    esriGeometryPartEndpoint = 16
    esriGeometryPartSurface = 64

class esriSegmentType(Enumeration):
    __slots__ = ['esriSegmentArc',
                 'esriSegmentLine',
                 'esriSegmentSpiral',
                 'esriSegmentBezier3Curve',
                 'esriSegmentEllipticArc']
    esriSegmentArc = 1
    esriSegmentLine = 2
    esriSegmentSpiral = 3
    esriSegmentBezier3Curve = 4
    esriSegmentEllipticArc = 5

class esriMonotinicityEnum(Enumeration):
    __slots__ = ['esriValueIncreases',
                 'esriValueLevel',
                 'esriValueDecreases',
                 'esriValuesEmpty']
    esriValueIncreases = 1
    esriValueLevel = 2
    esriValueDecreases = 4
    esriValuesEmpty = 8

class esriShapeExportFlags(Enumeration):
    __slots__ = ['esriShapeExportDefaults',
                 'esriShapeExportNoSwap',
                 'esriShapeExportAngularDensify',
                 'esriShapeExportDistanceDensify',
                 'esriShapeExportTrueNaNs',
                 'esriShapeExportStripZs',
                 'esriShapeExportStripMs',
                 'esriShapeExportStripIDs',
                 'esriShapeExportStripTextures',
                 'esriShapeExportStripNormals',
                 'esriShapeExportStripMaterials',
                 'esriShapeExportNewArcFormat',
                 'esriShapeExportNoCompress']
    esriShapeExportDefaults = 0
    esriShapeExportNoSwap = 1
    esriShapeExportAngularDensify = 2
    esriShapeExportDistanceDensify = 4
    esriShapeExportTrueNaNs = 8
    esriShapeExportStripZs = 16
    esriShapeExportStripMs = 32
    esriShapeExportStripIDs = 64
    esriShapeExportStripTextures = 128
    esriShapeExportStripNormals = 256
    esriShapeExportStripMaterials = 512
    esriShapeExportNewArcFormat = 1024
    esriShapeExportNoCompress = 2048

class esriShapeImportFlags(Enumeration):
    __slots__ = ['esriShapeImportDefaults',
                 'esriShapeImportNoSwap',
                 'esriShapeImportNonTrusted',
                 'esriShapeImportAttach']
    esriShapeImportDefaults = 0
    esriShapeImportNoSwap = 1
    esriShapeImportNonTrusted = 2
    esriShapeImportAttach = 4

class wkbGeometryType(Enumeration):
    __slots__ = ['wkbPoint',
                 'wkbLinestring',
                 'wkbPolygon',
                 'wkbMultiPoint',
                 'wkbMultiLinestring',
                 'wkbMultiPolygon',
                 'wkbGeometryCollection',
                 'wkbMultiPatch']
    wkbPoint = 1
    wkbLinestring = 2
    wkbPolygon = 3
    wkbMultiPoint = 4
    wkbMultiLinestring = 5
    wkbMultiPolygon = 6
    wkbGeometryCollection = 7
    wkbMultiPatch = 8

class esriGeometryEmbeddingDimension(Enumeration):
    __slots__ = ['esriGeometry2DEmbeddingDimension',
                 'esriGeometry3DEmbeddingDimension']
    esriGeometry2DEmbeddingDimension = 1
    esriGeometry3DEmbeddingDimension = 2

class esriEnvelopeVertex(Enumeration):
    __slots__ = ['esriEnvelopeVertexLL',
                 'esriEnvelopeVertexUL',
                 'esriEnvelopeVertexUR',
                 'esriEnvelopeVertexLR']
    esriEnvelopeVertexLL = 0
    esriEnvelopeVertexUL = 1
    esriEnvelopeVertexUR = 2
    esriEnvelopeVertexLR = 3

class esriPatchType(Enumeration):
    __slots__ = ['esriPatchTypeTriangleStrip',
                 'esriPatchTypeTriangleFan',
                 'esriPatchTypeOuterRing',
                 'esriPatchTypeInnerRing',
                 'esriPatchTypeFirstRing',
                 'esriPatchTypeRing',
                 'esriPatchTypeTriangles']
    esriPatchTypeTriangleStrip = 0
    esriPatchTypeTriangleFan = 1
    esriPatchTypeOuterRing = 2
    esriPatchTypeInnerRing = 3
    esriPatchTypeFirstRing = 4
    esriPatchTypeRing = 5
    esriPatchTypeTriangles = 6

class esriCurveExtension(Enumeration):
    __slots__ = ['esriDefaultCurveExtension',
                 'esriRelocateEnds',
                 'esriKeepEndAttributes',
                 'esriNoEndAttributes',
                 'esriNoExtendAtFrom',
                 'esriNoExtendAtTo']
    esriDefaultCurveExtension = 0
    esriRelocateEnds = 1
    esriKeepEndAttributes = 2
    esriNoEndAttributes = 4
    esriNoExtendAtFrom = 8
    esriNoExtendAtTo = 16

class esriGeometryUpdateMEnum(Enumeration):
    __slots__ = ['esriGeometryInterpolate',
                 'esriGeometryExtrapolateBefore',
                 'esriGeometryExtrapolateAfter']
    esriGeometryInterpolate = 1
    esriGeometryExtrapolateBefore = 2
    esriGeometryExtrapolateAfter = 4

class esriExtrapolationEnum(Enumeration):
    __slots__ = ['esriExtrapolateBefore',
                 'esriExtrapolateBoth',
                 'esriExtrapolateAfter']
    esriExtrapolateBefore = -1
    esriExtrapolateBoth = 0
    esriExtrapolateAfter = 1

class esriMCurveRelationEnum(Enumeration):
    __slots__ = ['esriMRelationUndetermined',
                 'esriMBetweenMinMax',
                 'esriMBelowMin',
                 'esriMAboveMax',
                 'esriMRelationCurveEmpty',
                 'esriMRelationCurveHasNoMs',
                 'esriMRelationMIsNaN',
                 'esriMRelationBasicMask',
                 'esriMRelationUndeterminedDetailsMask']
    esriMRelationUndetermined = 0
    esriMBetweenMinMax = 1
    esriMBelowMin = 2
    esriMAboveMax = 3
    esriMRelationCurveEmpty = 16
    esriMRelationCurveHasNoMs = 32
    esriMRelationMIsNaN = 48
    esriMRelationBasicMask = 3
    esriMRelationUndeterminedDetailsMask = 48

class esriTurnDirectionEnum(Enumeration):
    __slots__ = ['esriNoTurn',
                 'esriUTurn',
                 'esriLeftTurn',
                 'esriRightTurn']
    esriNoTurn = 1
    esriUTurn = 2
    esriLeftTurn = 4
    esriRightTurn = 8

class esriSpatialRelationEnum(Enumeration):
    __slots__ = ['esriSpatialRelationDisjoint',
                 'esriSpatialRelationIntersection',
                 'esriSpatialRelationInteriorIntersection',
                 'esriSpatialRelationIn',
                 'esriSpatialRelationWithin',
                 'esriSpatialRelationPointTouch',
                 'esriSpatialRelationLineTouch',
                 'esriSpatialRelationTouch',
                 'esriSpatialRelationLineCoincidence',
                 'esriSpatialRelationCross',
                 'esriSpatialRelationOverlap',
                 'esriSpatialRelationRelation']
    esriSpatialRelationDisjoint = 0
    esriSpatialRelationIntersection = 1
    esriSpatialRelationInteriorIntersection = 2
    esriSpatialRelationIn = 3
    esriSpatialRelationWithin = 4
    esriSpatialRelationPointTouch = 5
    esriSpatialRelationLineTouch = 6
    esriSpatialRelationTouch = 7
    esriSpatialRelationLineCoincidence = 8
    esriSpatialRelationCross = 9
    esriSpatialRelationOverlap = 10
    esriSpatialRelationRelation = 11

class esriSpatialRelationExEnum(Enumeration):
    __slots__ = ['esriSpatialRelationExBoundary',
                 'esriSpatialRelationExClementini',
                 'esriSpatialRelationExProper']
    esriSpatialRelationExBoundary = 0
    esriSpatialRelationExClementini = 1
    esriSpatialRelationExProper = 2

class esriBufferConstructionSideEnum(Enumeration):
    __slots__ = ['esriBufferLeft',
                 'esriBufferRight',
                 'esriBufferFull']
    esriBufferLeft = 0
    esriBufferRight = 1
    esriBufferFull = 2

class esriBufferConstructionEndEnum(Enumeration):
    __slots__ = ['esriBufferFlat',
                 'esriBufferRound']
    esriBufferFlat = 0
    esriBufferRound = 1

class esriGeometryError(Enumeration):
    __slots__ = ['S_GEOMETRY_OK',
                 'S_GEOMETRY_DEGENERATE',
                 'S_GEOMETRY_HAS_NL_SEGMENTS',
                 'S_GEOMETRY_DATUMCONVERSIONATTEMPTED',
                 'S_GEOMETRY_EMPTY_GEOMETRY',
                 'S_GEOMETRY_GEOMETRY_NOT_PROJECTED',
                 'S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_ONLY',
                 'S_GEOMETRY_PROJECTION_HINT_CLIP_GCS_ONLY',
                 'S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_AND_GCS',
                 'E_GEOMETRY_EMPTYGEOMETRY',
                 'E_GEOMETRY_INCONSISTANT_PARAMS',
                 'E_GEOMETRY_INVALID_RADIUS',
                 'E_GEOMETRY_INVALID_CHORD',
                 'E_GEOMETRY_NONENVELOPE',
                 'E_GEOMETRY_NONPART',
                 'E_GEOMETRY_ROTATEENVELOPE',
                 'E_GEOMETRY_TRANSFORMENVELOPE',
                 'E_GEOMETRY_WRONGTYPE',
                 'E_GEOMETRY_UNKNOWNTYPE',
                 'E_GEOMETRY_UNDERCONSTRAINED',
                 'E_GEOMETRY_INVALID_ANGLE',
                 'E_GEOMETRY_NONPATH',
                 'E_GEOMETRY_NONSEGMENT',
                 'E_GEOMETRY_NONPOINT',
                 'E_GEOMETRY_INCONSISTANT_SPATIAL_REFERENCE',
                 'E_GEOMETRY_PARTNOTFOUND',
                 'E_GEOMETRY_NOTSIMPLE',
                 'E_GEOMETRY_INTERIORPART',
                 'E_GEOMETRY_BAD_SPLIT_DISTANCE',
                 'E_GEOMETRY_NULL',
                 'E_GEOMETRY_CANT_RESHAPE',
                 'E_GEOMETRY_NONPOLYGON',
                 'E_GEOMETRY_NONPOLYLINE',
                 'E_GEOMETRY_NONGEOMETRY',
                 'E_GEOMETRY_EQUAL_VERTEX_ATTRIBUTES',
                 'E_GEOMETRY_CANT_QUERY_ON_VERTEX_ATTRIBUTES',
                 'E_GEOMETRY_NO_VALID_VERTEX_ATTRIBUTES',
                 'E_GEOMETRY_UNDEFINED_SPATIAL_REFERENCE',
                 'E_GEOMETRY_INCONSISTANT_DIMENSIONS',
                 'E_GEOMETRY_SIMPLIFYFAILED',
                 'E_GEOMETRY_PROJECTDATUM',
                 'E_GEOMETRY_FILLET_FAILED',
                 'E_GEOMETRY_INVALID_AXES',
                 'E_GEOMETRY_CANT_CUT_POLYGON',
                 'E_GEOMETRY_BADRELATION',
                 'E_GEOMETRY_NOT_Z_AWARE',
                 'E_GEOMETRY_NOT_M_AWARE',
                 'E_GEOMETRY_SEGMENTGRAPH_CANTLOAD',
                 'E_GEOMETRY_SEGMENTGRAPH_CONSTRUCTERROR',
                 'E_GEOMETRY_OUT_OF_BOUNDS',
                 'E_GEOMETRY_INTERNALERROR',
                 'E_GEOMETRY_TOOMANYPOINTS',
                 'E_GEOMETRY_BUFFEROUTOFBOUNDS',
                 'E_GEOMETRY_OUTOFMEMORY',
                 'E_GEOMETRY_RELATIONSYNTAXERROR',
                 'E_GEOMETRY_UNKNOWNERROR',
                 'E_GEOMETRY_NOPENDINGMOVETO',
                 'E_GEOMETRY_NOT_ID_AWARE',
                 'E_GEOMETRY_ILLEGALWIN32EXPORT',
                 'E_GEOMETRY_CONSTRUCTPOINTUNION',
                 'E_GEOMETRY_BEZIER_EXTEND_EMBEDDED',
                 'E_GEOMETRY_NOT_Z_SIMPLE',
                 'E_GEOMETRY_NOT_M_SIMPLE',
                 'E_GEOMETRY_INVALIDCONSTRUCTION',
                 'E_GEOMETRY_NONMULTIPATCH',
                 'E_GEOMETRY_UNDEFINEDRING',
                 'E_GEOMETRY_INVALIDRINGTYPE',
                 'E_GEOMETRY_AMBIGUOUSPARTTYPE',
                 'E_GEOMETRY_INVALIDRINGORDER',
                 'E_GEOMETRY_INVALIDCOUNT',
                 'E_GEOMETRY_EXTERIORPART',
                 'E_GEOMETRY_NONTRIANGLESTRIP',
                 'E_GEOMETRY_NONTRIANGLEFAN',
                 'E_GEOMETRY_NONVECTOR3D',
                 'E_GEOMETRY_DEGENERATEGEOMETRY',
                 'E_GEOMETRY_DUPLICATESEGMENTPOINTER',
                 'E_GEOMETRY_INSUFFICIENT_CONTROLPOINTS',
                 'E_GEOMETRY_NOT_BEZIERCURVES',
                 'E_GEOMETRY_TRANSFORMATION_UNDEFINED',
                 'E_GEOMETRY_SR_Z_MISMATCH',
                 'E_GEOMETRY_SR_M_MISMATCH',
                 'E_GEOMETRY_INPUT_TYPE_MISMATCH',
                 'E_GEOMETRY_INPUT_TYPE_INCORRECT',
                 'E_GEOMETRY_EDITED_REGIONS_OVERLAP',
                 'E_GEOMETRY_PART_ZS_ARE_NAN',
                 'E_GEOMETRY_CANNOT_EXTRAPOLATE_BY_SEGMENT',
                 'E_GEOMETRY_EDITS_OVERLAP',
                 'E_GEOMETRY_UNIT_CONVERSION',
                 'E_GEOMETRY_BUFFER_DISTANCES',
                 'E_GEOMETRY_OPERATION_CANCELLED',
                 'E_GEOMETRY_WRONG_RELATION_AND_TYPE',
                 'E_GEOMETRY_BUFFERCONSTRUCTION_INUSE',
                 'E_GEOMETRY_BUFFERFAILURE',
                 'E_GEOMETRY_TOLERANCE_TOO_LARGE_FOR_EXTENT',
                 'E_GEOMETRY_BUFFER_INVALID_SIDE_OPTION',
                 'E_GEOMETRY_BUFFER_INVALID_END_OPTION',
                 'E_GEOMETRY_BUFFER_INVALID_BUFFER_DISTANCE',
                 'E_GEOMETRY_AUTHORITY_TOO_LONG',
                 'E_GEOMETRY_WKT_TOO_LONG',
                 'E_GEOMETRY_PARAMETER_TOO_SMALL',
                 'E_GEOMETRY_ZM_OUT_OF_BOUNDS',
                 'E_GEOMETRY_Z_OUT_OF_BOUNDS',
                 'E_GEOMETRY_M_OUT_OF_BOUNDS',
                 'E_GEOMETRY_CANNOT_DO_3D_OPERATIONS_ON_CURVES',
                 'E_GEOMETRY_NOT_SINGLEPART',
                 'E_GEOMETRY_CANT_EVALUATE_RELATION_MATRIX',
                 'E_GEOMETRY_BUFFER_INVOLVES_BOTH_POLES',
                 'E_GEOMETRY_GEODESIC_BUFFER_COORD_OUT_OF_RANGE',
                 'E_GEOMETRY_NO_CURVES_IN_JSON',
                 'E_GEOMETRY_JSON_SYNTAX',
                 'E_GEOMETRY_BUFFER_NEGATIVE_DISTANCE',
                 'E_GEOMETRY_JSON_BAD_SHORTFORM_POINTS',
                 'E_GEOMETRY_BUFFER_DISTANCE_ZERO']
    S_GEOMETRY_OK = 0
    S_GEOMETRY_DEGENERATE = 513
    S_GEOMETRY_HAS_NL_SEGMENTS = 563
    S_GEOMETRY_DATUMCONVERSIONATTEMPTED = 583
    S_GEOMETRY_EMPTY_GEOMETRY = 584
    S_GEOMETRY_GEOMETRY_NOT_PROJECTED = 596
    S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_ONLY = 629
    S_GEOMETRY_PROJECTION_HINT_CLIP_GCS_ONLY = 630
    S_GEOMETRY_PROJECTION_HINT_CLIP_PCS_AND_GCS = 631
    E_GEOMETRY_EMPTYGEOMETRY = 514
    E_GEOMETRY_INCONSISTANT_PARAMS = 515
    E_GEOMETRY_INVALID_RADIUS = 516
    E_GEOMETRY_INVALID_CHORD = 517
    E_GEOMETRY_NONENVELOPE = 518
    E_GEOMETRY_NONPART = 519
    E_GEOMETRY_ROTATEENVELOPE = 520
    E_GEOMETRY_TRANSFORMENVELOPE = 521
    E_GEOMETRY_WRONGTYPE = 522
    E_GEOMETRY_UNKNOWNTYPE = 523
    E_GEOMETRY_UNDERCONSTRAINED = 524
    E_GEOMETRY_INVALID_ANGLE = 525
    E_GEOMETRY_NONPATH = 526
    E_GEOMETRY_NONSEGMENT = 527
    E_GEOMETRY_NONPOINT = 528
    E_GEOMETRY_INCONSISTANT_SPATIAL_REFERENCE = 533
    E_GEOMETRY_PARTNOTFOUND = 535
    E_GEOMETRY_NOTSIMPLE = 536
    E_GEOMETRY_INTERIORPART = 537
    E_GEOMETRY_BAD_SPLIT_DISTANCE = 540
    E_GEOMETRY_NULL = 541
    E_GEOMETRY_CANT_RESHAPE = 542
    E_GEOMETRY_NONPOLYGON = 543
    E_GEOMETRY_NONPOLYLINE = 544
    E_GEOMETRY_NONGEOMETRY = 545
    E_GEOMETRY_EQUAL_VERTEX_ATTRIBUTES = 547
    E_GEOMETRY_CANT_QUERY_ON_VERTEX_ATTRIBUTES = 549
    E_GEOMETRY_NO_VALID_VERTEX_ATTRIBUTES = 550
    E_GEOMETRY_UNDEFINED_SPATIAL_REFERENCE = 551
    E_GEOMETRY_INCONSISTANT_DIMENSIONS = 553
    E_GEOMETRY_SIMPLIFYFAILED = 556
    E_GEOMETRY_PROJECTDATUM = 558
    E_GEOMETRY_FILLET_FAILED = 559
    E_GEOMETRY_INVALID_AXES = 560
    E_GEOMETRY_CANT_CUT_POLYGON = 561
    E_GEOMETRY_BADRELATION = 562
    E_GEOMETRY_NOT_Z_AWARE = 564
    E_GEOMETRY_NOT_M_AWARE = 565
    E_GEOMETRY_SEGMENTGRAPH_CANTLOAD = 566
    E_GEOMETRY_SEGMENTGRAPH_CONSTRUCTERROR = 567
    E_GEOMETRY_OUT_OF_BOUNDS = 568
    E_GEOMETRY_INTERNALERROR = 569
    E_GEOMETRY_TOOMANYPOINTS = 570
    E_GEOMETRY_BUFFEROUTOFBOUNDS = 571
    E_GEOMETRY_OUTOFMEMORY = 572
    E_GEOMETRY_RELATIONSYNTAXERROR = 573
    E_GEOMETRY_UNKNOWNERROR = 574
    E_GEOMETRY_NOPENDINGMOVETO = 575
    E_GEOMETRY_NOT_ID_AWARE = 576
    E_GEOMETRY_ILLEGALWIN32EXPORT = 577
    E_GEOMETRY_CONSTRUCTPOINTUNION = 578
    E_GEOMETRY_BEZIER_EXTEND_EMBEDDED = 579
    E_GEOMETRY_NOT_Z_SIMPLE = 580
    E_GEOMETRY_NOT_M_SIMPLE = 581
    E_GEOMETRY_INVALIDCONSTRUCTION = 582
    E_GEOMETRY_NONMULTIPATCH = 585
    E_GEOMETRY_UNDEFINEDRING = 586
    E_GEOMETRY_INVALIDRINGTYPE = 587
    E_GEOMETRY_AMBIGUOUSPARTTYPE = 588
    E_GEOMETRY_INVALIDRINGORDER = 589
    E_GEOMETRY_INVALIDCOUNT = 590
    E_GEOMETRY_EXTERIORPART = 591
    E_GEOMETRY_NONTRIANGLESTRIP = 592
    E_GEOMETRY_NONTRIANGLEFAN = 593
    E_GEOMETRY_NONVECTOR3D = 594
    E_GEOMETRY_DEGENERATEGEOMETRY = 595
    E_GEOMETRY_DUPLICATESEGMENTPOINTER = 597
    E_GEOMETRY_INSUFFICIENT_CONTROLPOINTS = 598
    E_GEOMETRY_NOT_BEZIERCURVES = 599
    E_GEOMETRY_TRANSFORMATION_UNDEFINED = 600
    E_GEOMETRY_SR_Z_MISMATCH = 601
    E_GEOMETRY_SR_M_MISMATCH = 602
    E_GEOMETRY_INPUT_TYPE_MISMATCH = 603
    E_GEOMETRY_INPUT_TYPE_INCORRECT = 604
    E_GEOMETRY_EDITED_REGIONS_OVERLAP = 605
    E_GEOMETRY_PART_ZS_ARE_NAN = 606
    E_GEOMETRY_CANNOT_EXTRAPOLATE_BY_SEGMENT = 607
    E_GEOMETRY_EDITS_OVERLAP = 608
    E_GEOMETRY_UNIT_CONVERSION = 609
    E_GEOMETRY_BUFFER_DISTANCES = 610
    E_GEOMETRY_OPERATION_CANCELLED = 611
    E_GEOMETRY_WRONG_RELATION_AND_TYPE = 613
    E_GEOMETRY_BUFFERCONSTRUCTION_INUSE = 614
    E_GEOMETRY_BUFFERFAILURE = 615
    E_GEOMETRY_TOLERANCE_TOO_LARGE_FOR_EXTENT = 616
    E_GEOMETRY_BUFFER_INVALID_SIDE_OPTION = 617
    E_GEOMETRY_BUFFER_INVALID_END_OPTION = 618
    E_GEOMETRY_BUFFER_INVALID_BUFFER_DISTANCE = 619
    E_GEOMETRY_AUTHORITY_TOO_LONG = 620
    E_GEOMETRY_WKT_TOO_LONG = 621
    E_GEOMETRY_PARAMETER_TOO_SMALL = 622
    E_GEOMETRY_ZM_OUT_OF_BOUNDS = 623
    E_GEOMETRY_Z_OUT_OF_BOUNDS = 624
    E_GEOMETRY_M_OUT_OF_BOUNDS = 625
    E_GEOMETRY_CANNOT_DO_3D_OPERATIONS_ON_CURVES = 626
    E_GEOMETRY_NOT_SINGLEPART = 627
    E_GEOMETRY_CANT_EVALUATE_RELATION_MATRIX = 628
    E_GEOMETRY_BUFFER_INVOLVES_BOTH_POLES = 632
    E_GEOMETRY_GEODESIC_BUFFER_COORD_OUT_OF_RANGE = 633
    E_GEOMETRY_NO_CURVES_IN_JSON = 634
    E_GEOMETRY_JSON_SYNTAX = 635
    E_GEOMETRY_BUFFER_NEGATIVE_DISTANCE = 636
    E_GEOMETRY_JSON_BAD_SHORTFORM_POINTS = 637
    E_GEOMETRY_BUFFER_DISTANCE_ZERO = 638

class esriNonSimpleReasonEnum(Enumeration):
    __slots__ = ['esriNonSimpleOK',
                 'esriNonSimpleRingOrientation',
                 'esriNonSimpleSegmentOrientation',
                 'esriNonSimpleShortSegments',
                 'esriNonSimpleSelfIntersections',
                 'esriNonSimpleUnclosedRing',
                 'esriNonSimpleEmptyPart',
                 'esriNonSimpleMismatchedAttributes',
                 'esriNonSimpleDiscontinuousParts',
                 'esriNonSimpleEmptyZValues',
                 'esriNonSimpleDuplicateVertex']
    esriNonSimpleOK = 0
    esriNonSimpleRingOrientation = 1
    esriNonSimpleSegmentOrientation = 2
    esriNonSimpleShortSegments = 3
    esriNonSimpleSelfIntersections = 4
    esriNonSimpleUnclosedRing = 5
    esriNonSimpleEmptyPart = 6
    esriNonSimpleMismatchedAttributes = 7
    esriNonSimpleDiscontinuousParts = 8
    esriNonSimpleEmptyZValues = 9
    esriNonSimpleDuplicateVertex = 10

class esriGeometryServerMessageCodeEnum(Enumeration):
    __slots__ = ['esriGeometryServerMessageCode_Project',
                 'esriGeometryServerMessageCode_Buffer',
                 'esriGeometryServerMessageCode_Relation',
                 'esriGeometryServerMessageCode_Densify',
                 'esriGeometryServerMessageCode_Simplify',
                 'esriGeometryServerMessageCode_FindSRByWKID',
                 'esriGeometryServerMessageCode_FindSRByWKT',
                 'esriGeometryServerMessageCode_FindUnitsByWKID',
                 'esriGeometryServerMessageCode_FindUnitsByWKT',
                 'esriGeometryServerMessageCode_GetAreasAndLengths',
                 'esriGeometryServerMessageCode_GetLengths',
                 'esriGeometryServerMessageCode_GetLabelPoints',
                 'esriGeometryServerMessageCode_Construct',
                 'esriGeometryServerMessageCode_InvalidLicense',
                 'esriGeometryServerMessageCode_ConstructBegin',
                 'esriGeometryServerMessageCode_ConstructEnd',
                 'esriGeometryServerMessageCode_GetAreasAndLengths2',
                 'esriGeometryServerMessageCode_GetLengths2',
                 'esriGeometryServerMessageCode_DensifyGeodesic',
                 'esriGeometryServerMessageCode_GetLengthsGeodesic',
                 'esriGeometryServerMessageCode_GetAreasAndLengthsGeodesic',
                 'esriGeometryServerMessageCode_GetDistance',
                 'esriGeometryServerMessageCode_GetDistanceGeodesic',
                 'esriGeometryServerMessageCode_Union',
                 'esriGeometryServerMessageCode_Intersect',
                 'esriGeometryServerMessageCode_Difference',
                 'esriGeometryServerMessageCode_Cut',
                 'esriGeometryServerMessageCode_TrimExtend',
                 'esriGeometryServerMessageCode_Offset',
                 'esriGeometryServerMessageCode_Generalize',
                 'esriGeometryServerMessageCode_BufferGeodesic']
    esriGeometryServerMessageCode_Project = 60000
    esriGeometryServerMessageCode_Buffer = 60001
    esriGeometryServerMessageCode_Relation = 60002
    esriGeometryServerMessageCode_Densify = 60003
    esriGeometryServerMessageCode_Simplify = 60004
    esriGeometryServerMessageCode_FindSRByWKID = 60005
    esriGeometryServerMessageCode_FindSRByWKT = 60006
    esriGeometryServerMessageCode_FindUnitsByWKID = 60007
    esriGeometryServerMessageCode_FindUnitsByWKT = 60008
    esriGeometryServerMessageCode_GetAreasAndLengths = 60009
    esriGeometryServerMessageCode_GetLengths = 60010
    esriGeometryServerMessageCode_GetLabelPoints = 60011
    esriGeometryServerMessageCode_Construct = 60012
    esriGeometryServerMessageCode_InvalidLicense = 60013
    esriGeometryServerMessageCode_ConstructBegin = 60014
    esriGeometryServerMessageCode_ConstructEnd = 60015
    esriGeometryServerMessageCode_GetAreasAndLengths2 = 60016
    esriGeometryServerMessageCode_GetLengths2 = 60017
    esriGeometryServerMessageCode_DensifyGeodesic = 60018
    esriGeometryServerMessageCode_GetLengthsGeodesic = 60019
    esriGeometryServerMessageCode_GetAreasAndLengthsGeodesic = 60020
    esriGeometryServerMessageCode_GetDistance = 60021
    esriGeometryServerMessageCode_GetDistanceGeodesic = 60022
    esriGeometryServerMessageCode_Union = 60023
    esriGeometryServerMessageCode_Intersect = 60024
    esriGeometryServerMessageCode_Difference = 60025
    esriGeometryServerMessageCode_Cut = 60026
    esriGeometryServerMessageCode_TrimExtend = 60027
    esriGeometryServerMessageCode_Offset = 60028
    esriGeometryServerMessageCode_Generalize = 60029
    esriGeometryServerMessageCode_BufferGeodesic = 60030

class esriMMonotonicEnum(Enumeration):
    __slots__ = ['esriMNotMonotonic',
                 'esriMAscending',
                 'esriMDescending']
    esriMNotMonotonic = 0
    esriMAscending = 1
    esriMDescending = -1

class esriConstructOffsetEnum(Enumeration):
    __slots__ = ['esriConstructOffsetSimple',
                 'esriConstructOffsetMitered',
                 'esriConstructOffsetBevelled',
                 'esriConstructOffsetRounded']
    esriConstructOffsetSimple = 1
    esriConstructOffsetMitered = 2
    esriConstructOffsetBevelled = 4
    esriConstructOffsetRounded = 8

class esriConstructOffsetSimplifyEnum(Enumeration):
    __slots__ = ['esriConstructOffsetNoSimplify',
                 'esriConstructOffsetFastSimplify',
                 'esriConstructOffsetAccurateSimplify']
    esriConstructOffsetNoSimplify = 0
    esriConstructOffsetFastSimplify = 1
    esriConstructOffsetAccurateSimplify = 2

class esriConstructDivideEnum(Enumeration):
    __slots__ = ['esriDivideIntoSegments',
                 'esriDivideIntoParts',
                 'esriDivideIntoPolylines']
    esriDivideIntoSegments = 0
    esriDivideIntoParts = 1
    esriDivideIntoPolylines = 2

class SegmentOverlapEnum(Enumeration):
    __slots__ = ['SegmentOverlapEqual',
                 'SegmentOverlapRightAtBeginning',
                 'SegmentOverlapLeftAtBeginning',
                 'SegmentOverlapRightInMiddle',
                 'SegmentOverlapRightAtEnd',
                 'SegmentOverlapStaggered',
                 'SegmentOverlapMask',
                 'SegmentOverlapVertical']
    SegmentOverlapEqual = 1
    SegmentOverlapRightAtBeginning = 2
    SegmentOverlapLeftAtBeginning = 3
    SegmentOverlapRightInMiddle = 4
    SegmentOverlapRightAtEnd = 5
    SegmentOverlapStaggered = 6
    SegmentOverlapMask = 15
    SegmentOverlapVertical = 16

# Records
class WKSPointVA(_esriGeometry.WKSPointVA):

    def __init__(self, *args, **kw):
        super(WKSPointVA, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    m_x = property(_esriGeometry.WKSPointVA.get_m_x, _esriGeometry.WKSPointVA.put_m_x, None, u'double')
    m_y = property(_esriGeometry.WKSPointVA.get_m_y, _esriGeometry.WKSPointVA.put_m_y, None, u'double')
    m_z = property(_esriGeometry.WKSPointVA.get_m_z, _esriGeometry.WKSPointVA.put_m_z, None, u'double')
    m_m = property(_esriGeometry.WKSPointVA.get_m_m, _esriGeometry.WKSPointVA.put_m_m, None, u'double')
    m_id = property(_esriGeometry.WKSPointVA.get_m_id, _esriGeometry.WKSPointVA.put_m_id, None, u'long')
_RecordMap[u'WKSPointVA'] = WKSPointVA

class esriSegmentInfo(_esriGeometry.esriSegmentInfo):

    def __init__(self, *args, **kw):
        super(esriSegmentInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    iPart = property(_esriGeometry.esriSegmentInfo.get_iPart, _esriGeometry.esriSegmentInfo.put_iPart, None, u'long')
    iRelSegment = property(_esriGeometry.esriSegmentInfo.get_iRelSegment, _esriGeometry.esriSegmentInfo.put_iRelSegment, None, u'long')
    iAbsSegment = property(_esriGeometry.esriSegmentInfo.get_iAbsSegment, _esriGeometry.esriSegmentInfo.put_iAbsSegment, None, u'long')
    bLastInPart = property(_esriGeometry.esriSegmentInfo.get_bLastInPart, _esriGeometry.esriSegmentInfo.put_bLastInPart, None, u'VARIANT_BOOL')
    pSegment = property(_esriGeometry.esriSegmentInfo.get_pSegment, _esriGeometry.esriSegmentInfo.put_pSegment, None, u'struct ISegment *')
_RecordMap[u'esriSegmentInfo'] = esriSegmentInfo

