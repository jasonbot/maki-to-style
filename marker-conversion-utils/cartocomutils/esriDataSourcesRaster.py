'Type library'
__all__ = ['IERasterStatus', 'IRect', 'IBinFunction', 'IBinFunction2', 'IDescRow', 'IDescColumn', 'IDescTable', 'IRasterClassNames', 'IPixelBlock2', 'IPixelBlock3', 'IPixelBlock4', 'IRawPixels', 'IRasterTransaction', 'IXForm', 'IGeodeticProjection', 'IRasterMapModel', 'IFormatData', 'IFormatList', 'IFormatTest', 'IContrastTable', 'IRasterFormatControl', 'IRasterStatusEvent', 'IRasterStatusEvent2', 'IRasterStatus', 'IRasterStatus2', 'IRasterStatus3', 'IRasterDataManagementEvents', 'IImageFeaturePoint', 'IImageFeaturePoints', 'IImageMatchPoint', 'IImageMatchPoints', 'ITiePoint', 'ITiePointCollection', 'ITiePointOperation', 'IImageRegistration', 'IRasterHistogram', 'IPixelResampler', 'IRasterXformer', 'IRasterInfo', 'IRasterBandColormap', 'IRasterCollection', 'IRasterProps', 'IRasterDefaultProps', 'IRasterAnalysisProps', 'IRasterWorkspace3', 'IRasterCatalogTable', 'IWorldFileExport', 'IWorldFileExport2', 'IRasterEdit', 'IRasterPyramid', 'IRasterPyramid2', 'IRasterPyramid3', 'ITemporaryDataset', 'IRasterHistograms', 'IStatsHistogram', 'IStatsHistogram2', 'IRasterTable', 'IUniqueValues', 'IUniqueValues2', 'IUniqueStringValues', 'IUniqueMutliStringValues', 'IUniqueDoubleValues', 'IRasterCalcUniqueValues', 'IRasterCalcUniqueValues2', 'IRasterColormapToRGBConversion', 'IPixelBlockCursor', 'IRasterAttributeTableManager', 'IRaster2', 'IRasterColormap2', 'IRasterColormap3', 'IRasterColormap4', 'IRasterDatasetJukebox', 'IRasterResamplingControl', 'IMosaicOperator', 'IMosaicOperator2', 'IMosaicOperator3', 'IMosaicRaster', 'IMosaicRaster2', 'IRawBlocks', 'ICancelListener', 'IRasterKeyProperties', 'IRasterDatasetContainer', 'IGeoTransformationHelper', 'IRasterCommand', 'IRasterCommands', 'IRasterCommandResult', 'IRasterCommandResults', 'IPixelFilter', 'IPixelOperation', 'IRasterGeometryProc', 'IRasterGeometryProc2', 'IRasterGeometryProc3', 'IBasicRasterSdeConnection', 'IRasterSdeCatalog', 'IRasterSdeServerOperation', 'IRasterSdeServerOperation2', 'IRasterSdeStorage', 'IRasterSdeStorage2', 'IRasterDomainExtractor', 'IDEWCSCoverage', 'IDEWMSMap', 'IDEImageServer', 'IDEMosaicDataset', 'IDEMosaicDataset2', 'IItemPaths', 'IPixelFilter2', 'IPixelFilter3', 'IBackgroundFilter', 'IColormapFilter', 'ILutFilter', 'IPixelFilterCollection', 'IRasterConvolutionFilter', 'IStockConvolutionFilter', 'IMultibandFilter', 'IPansharpeningFilter', 'IPansharpeningFilter2', 'IRemapFilter', 'IClipFilter', 'IClipFilter2', 'INoDataFilter', 'IFocalMeanFilter', 'IFocalStatisticsFilter', 'IFocalStatisticsFilter2', 'ISpeckleFilter', 'IHistogramSpecification', 'IStockFrequencyDistributionHistogram', 'IRasterLoader', 'IRasterCatalogLoader', 'IDrLoader', 'ISimplePixelResampler', 'IRawPixelReader', 'IPixelReader', 'IPixelReader2', 'ISimplePixelReader', 'IRasterXformer2', 'IRasterXform', 'IRasterXform2', 'ISensorXform', 'IGeodataXform2', 'ICoordinateXform', 'ICoordinateXform2', 'IGeometricXform', 'ICompositeXform', 'IGCSShiftXform', 'IPolynomialXform', 'ISplineXform', 'IAdjustXform', 'IRPCXform', 'IApproximationXform', 'IGeodataXformApproximation', 'IRGB32PixelResampler', 'ICustomXform', 'IFrameXform', 'ILSRXform', 'IRasterXformHelper', 'ISPOT5Xform', 'IFormosat2Xform', 'ICSMXform', 'IProjectiveXform', 'IPushbroomUtilities', 'IRasterInfos', 'IRasterFunction', 'IRasterFunction2', 'IRasterFunction3', 'IRasterFunctionArguments', 'IRasterFunctionHelper', 'IRasterFunctionHelper2', 'IFunctionRasterDatasetName', 'IFunctionRasterDataset', 'IFunctionRasterDataset2', 'IGeometricFunction', 'IGeometricFunctionArguments', 'IPansharpeningFunctionArguments', 'IPansharpeningFunctionArguments2', 'IPanSharpenGramSchmidtFunctionArguments', 'IArithmeticFunctionArguments', 'IArithmeticFunctionArguments2', 'IColormapFunctionArguments', 'IMosaicLODInfos', 'IMosaicFunction', 'IMosaicFunction2', 'IMosaicFunction3', 'IMosaicFunctionArguments', 'IMosaicFunctionArguments2', 'IExtractBandFunctionArguments', 'IExtractBandFunctionArguments2', 'IStretchFunctionArguments', 'IStretchFunctionArguments2', 'IStatisticsFunctionArguments', 'IStatisticsFunctionArguments2', 'IConvolutionFunctionArguments', 'ISpeckleFunctionArguments', 'IRadarCalibrationFunctionArguments', 'IRasterFunctionTemplate', 'IRasterFunctionTemplate2', 'IRasterFunctionVariable', 'IClipFunctionArguments', 'IColorspaceConversionFunctionArguments', 'IHillshadeFunctionArguments', 'ISlopeScalingArguments', 'IReprojectFunctionArguments', 'IConstantFunctionArguments', 'IConstantFunctionArguments2', 'ISpectralConversionFunctionArguments', 'ISpectralConversionFunctionArguments2', 'ISlopeFunctionArguments', 'ITrendFunctionArguments', 'IGrayscaleFunctionArguments', 'IShadedReliefFunctionArguments', 'IRasterInfoFunctionArguments', 'IMaskFunctionArguments', 'IMaskFunctionArguments2', 'ISAIFunctionArguments', 'IScalar', 'IMosaicRastersFunctionArguments', 'IMergeRastersFunctionArguments', 'IFootprintFunctionArguments', 'INDVIFunctionArguments', 'INDVIFunctionArguments2', 'IExcludedAreaFunctionArguments', 'IRemapFunctionArguments', 'ITableFunctionArguments', 'IBandArithmeticFunctionArguments', 'IRasterItemFunctionArguments', 'ICachedRasterFunction', 'ICachedRasterFunctionArguments', 'IRasterCacheArguments', 'IContrastBrightnessFunctionArguments', 'IRenderedRasterFunctionArguments', 'IReflectanceFunctionArguments', 'IDownsampleFunctionArguments', 'IReflectanceFunctionArguments2', 'ILasToRasterFunctionArguments', 'ITerrainToRasterFunctionArguments', 'ILasDatasetToRasterFunctionArguments', 'IMosaicDataset', 'IItemTemplate', 'IItemURI', 'IItemURIArray', 'ICellSizeLevel', 'ICellSizeLevels', 'IDataSourceCrawler', 'IBuilderItem', 'IRasterBuilder', 'IItemURIFilter', 'IItemTemplateArray', 'IRasterType', 'IAddRastersParameters', 'IRasterThumbnailBuilder', 'ISynchronizeParameters', 'IRasterTypeOperation', 'IRasterTypeName', 'IDeleteMosaicDatasetParameters', 'IDataSourceCrawler2', 'IFileCrawler', 'IFolderSort', 'IFileCrawler2', 'ICsvCrawler', 'IRasterDatasetCrawler', 'ITableCrawler', 'ITableCrawler2', 'ITableCrawler3', 'IArrayCrawler', 'IGenericObjectCrawler', 'IItemURI2', 'IOverviewItemURI', 'IItemPathsOptions', 'IItemPaths2', 'IBuilderItem2', 'IBuilderItem3', 'IRasterBuilderInit', 'IRasterBuilderInit2', 'IItemTemplate2', 'ICompositeURIFilter', 'IRasterBuilder2', 'IRasterTypeProperties', 'IRasterTypeProperties2', 'IMosaicDataset2', 'IMosaicDatasetOperationParameters', 'IMosaicDatasetOperationParameters2', 'IThreadedOperationParameters', 'IThreadedOperationParameters2', 'ISelectionParameters', 'ICreateMosaicDatasetParameters', 'ICreateMosaicDatasetParameters2', 'ISynchronizeParameters2', 'IBuildPyramidsParameters', 'ICalculateStatisticsParameters', 'ICalculateCellSizeRangesParameters', 'IBuildBoundaryParameters', 'IBuildBoundaryParameters2', 'IRemoveSliversParameters', 'IOverviewTileParameters', 'IOverviewTileParameters2', 'IOverviewImageParameters', 'IDefineOverviewsParameters', 'IGenerateOverviewsParameters', 'IGenerateOverviewsParameters2', 'IRemoveItemsParameters', 'IRemoveItemsParameters2', 'IDefineNoDataParameters', 'IDefineNoDataParameters2', 'IComputeDirtyAreaParameters', 'IBuildFootprintsParameters', 'IBuildFootprintsParameters2', 'IBuildFootprintsByRadiometryParameters', 'IBuildFootprintsByGeometryParameters', 'IBuildFootprintsByShrinkingParameters', 'IFrameCameraParameters', 'IApplanixBuilder', 'IISATBuilder', 'ILasBuilder', 'ITerrainBuilder', 'ILasDatasetBuilder', 'IRadarBuilder', 'IMatchATBuilder', 'ISeamlineTaskInfo', 'ISeamlineTaskInfo2', 'ISeamlineModifier', 'ISeamlineModifierInit', 'IBuildSeamlinesParameters', 'IBuildSeamlinesParameters2', 'IQueryPathsParameters', 'IQueryPathsParameters2', 'IReplacePathsParameters', 'IReplacePathsParameters2', 'IImportGeometryParameters', 'IAnalyzeParameters', 'IAddNewerRastersParameters', 'IBuildSeamlinesParameters3', 'IMergeItemsParameters2', 'ICellSizeLevel2', 'IMosaicDatasetOperation', 'IMosaicDatasetOperation2', 'IRasterTypeHistory', 'IRasterTypeHistory2', 'IOverviewBuilder', 'IRasterTypeFactory', 'IRasterTypeFactory2', 'IRasterTypeEnvironment', 'IRasterTypeEnvironment2', 'IRasterTypeDataSourceHandlerParameters', 'IRasterTypeDataSourceHandlerParameters2', 'IRasterTypeDataSourceHandler', 'IRasterTypeDataSourceHandler2', 'IRasterTypeItemURI', 'IRasterTypeItemURI2', 'ICompositeItemURI', 'IIndexedItemURI', 'IFileItemURI', 'IRPFItemURI', 'IURIProductNameFilter', 'IURIPropertiesFilter', 'ITableBuilder', 'IMosaicWorkspaceExtension', 'IMosaicWorkspaceExtensionHelper', 'IRasterServiceHelper', 'IRasterServiceHelper2', 'IItemURICompare', 'IItemPathsQuery', 'IItemPathsQuery2', 'IMultiPartItemURI', 'IAISImageServerManager', 'IAngularMeasurement', 'IDistanceMeasurement', 'IHeightMeasurement', 'IMapPoint', 'IPointMeasurement', 'IPolygonMeasurement', 'IMensuration', 'IMensuration3D', 'IRasterBand', 'IRasterStatistics', 'IEnumRasterBand', 'IRasterBandEdit', 'IRasterBandEdit2', 'IRasterBandCollection', 'IRasterWorkspace', 'IRasterStatistics2', 'IStatsHistogram3', 'IRasterCalcStatsHistogram', 'IRasterCalcStatsHistogram2', 'IRasterCalcStatsHistogram3', 'IDERasterUtilities', 'IRasterInfo2', 'IAISImageServiceX', 'IAISClientObjectX', 'IAISImageService2X', 'IAISImageService3X', 'RasterWorkspaceFactory', 'FormatList', 'RasterClassNames', 'DblPnt', 'DblRect', 'RasterStatus', 'RasterStatusEventHelper', 'RasterStatusEvent2Helper', 'RasterDataManagementEventsHelper', 'DefaultRasterStatusEvent', 'ImageRegistration', 'ImageFeaturePoint', 'ImageFeaturePoints', 'ImageMatchPoint', 'ImageMatchPoints', 'TiePoint', 'TiePointCollection', 'RasterDataset', 'RasterBand', 'RasterCatalogTable', 'Raster', 'RasterWorkspace', 'RasterBands', 'RasterNativeType', 'PixelBlock', 'UniqueValues', 'StatsHistogram', 'RasterCalcStatsHistogram', 'RasterCalcUniqueValues', 'RasterColormapToRGBConverter', 'RasterCursor', 'PixelBlockCursor', 'RasterAttributeTableManager', 'CancelListener', 'RasterColormap', 'RasterStatistics', 'RasterHistogram', 'RasterHistograms', 'MosaicRaster', 'MeanMosaicker', 'BlendMosaicker', 'GeoTransformationHelper', 'RasterCommand', 'RasterCommandResult', 'RasterGeometryProc', 'RasterPicture', 'SdeRasterCatalogTable', 'BasicRasterSdeLoader', 'RasterDomainExtractor', 'DERasterUtilities', 'DEWCSCoverageType', 'DEWCSCoverage', 'DEWMSMapType', 'DEWMSMap', 'DEImageServerType', 'DEImageServer', 'DEMosaicDatasetType', 'DEMosaicDataset', 'SdeRasterTableName', 'BackgroundFilter', 'ColormapFilter', 'LutFilter', 'RasterConvolutionFilter', 'PixelFilterCollection', 'MultibandFilter', 'PansharpeningFilter', 'RemapFilter', 'ClipFilter', 'NoDataFilter', 'FocalMeanFilter', 'FocalStatisticsFilter', 'SpeckleFilter', 'HistogramSpecification', 'StockFrequencyDistributionHistogram', 'RasterLoader', 'RasterCatalogLoader', 'DrLoader', 'RasterXformer', 'IdentityXform', 'GeometricXform', 'CoordinateXform', 'PolynomialXform', 'SplineXform', 'CompositeXform', 'GCSShiftXform', 'AdjustXform', 'RPCXform', 'ApproximationXform', 'SimplePixelResampler', 'SimplePixelReader', 'RGB32PixelResampler', 'FrameXform', 'LSRXform', 'SPOT5Xform', 'Formosat2Xform', 'ProjectiveXform', 'RasterXformHelper', 'PushbroomUtilities', 'CSMXform', 'FunctionRasterDatasetName', 'FunctionRasterDataset', 'RasterInfo', 'RasterInfos', 'RasterFunctionHelper', 'RasterFunctionCollection', 'CompositeBandFunction', 'ExtractBandFunction', 'ExtractBandFunctionArguments', 'GeometricFunction', 'GeometricFunctionArguments', 'MosaicFunction', 'MosaicFunctionArguments', 'NDVIFunction', 'NDVIFunctionArguments', 'ColormapToRGBFunction', 'RGBToColormapFunction', 'PansharpeningFunction', 'PansharpeningFunctionArguments', 'PanSharpenGramSchmidtFunction', 'PanSharpenGramSchmidtFunctionArguments', 'IdentityFunction', 'ArithmeticFunction', 'ArithmeticFunctionArguments', 'ColormapFunction', 'ColormapFunctionArguments', 'RGB32Function', 'ComplexFunction', 'StretchFunction', 'StretchFunctionArguments', 'StatisticsFunction', 'StatisticsFunctionArguments', 'ConvolutionFunction', 'ConvolutionFunctionArguments', 'SpeckleFunction', 'SpeckleFunctionArguments', 'RadarCalibrationFunction', 'RadarCalibrationFunctionArguments', 'MosaicLODInfos', 'RasterFunctionTemplate', 'RasterFunctionVariable', 'ClipFunction', 'ClipFunctionArguments', 'ColorspaceConversionFunction', 'ColorspaceConversionFunctionArguments', 'HillshadeFunction', 'HillshadeFunctionArguments', 'ConstantFunction', 'ConstantFunctionArguments', 'SpectralConversionFunction', 'SpectralConversionFunctionArguments', 'SlopeFunction', 'SlopeFunctionArguments', 'AspectFunction', 'TrendFunction', 'TrendFunctionArguments', 'GrayscaleFunction', 'GrayscaleFunctionArguments', 'ShadedReliefFunction', 'ShadedReliefFunctionArguments', 'RasterInfoFunction', 'RasterInfoFunctionArguments', 'MaskFunction', 'MaskFunctionArguments', 'SAIFunction', 'SAIFunctionArguments', 'Scalar', 'MosaicRastersFunction', 'MergeRastersFunction', 'MosaicRastersFunctionArguments', 'MergeRastersFunctionArguments', 'RasterFunctionTemplateArguments', 'FootprintFunction', 'FootprintFunctionArguments', 'ExcludedAreaFunction', 'ExcludedAreaFunctionArguments', 'RGB32ToRGBFunction', 'RemapFunction', 'RemapFunctionArguments', 'TableFunction', 'TableFunctionArguments', 'BandArithmeticFunction', 'BandArithmeticFunctionArguments', 'RasterItemFunction', 'RasterItemFunctionArguments', 'CachedRasterFunction', 'CachedRasterFunctionArguments', 'ReflectanceFunction', 'ContrastBrightnessFunction', 'ContrastBrightnessFunctionArguments', 'ReprojectFunction', 'ReprojectFunctionArguments', 'RenderedRasterFunction', 'RenderedRasterFunctionArguments', 'ReflectanceFunctionArguments', 'KauthThomasFunction', 'DownsampleFunction', 'DownsampleFunctionArguments', 'FileCrawler', 'FolderCrawler', 'RasterDatasetCrawler', 'TableCrawler', 'ArrayCrawler', 'GenericObjectCrawler', 'ItemURI', 'ItemURIArray', 'BuilderItem', 'MosaicDataset', 'CellSizeLevel', 'OverviewItemURI', 'CellSizeLevels', 'RasterDatasetBuilder', 'NITFBuilder', 'RPFBuilder', 'PixFileBuilder', 'OverviewBuilder', 'RPDefBuilder', 'ISDefBuilder', 'QuickBirdBuilder', 'ItemTemplate', 'ItemTemplateArray', 'RasterType', 'RasterTypeItemURI', 'CompositeItemURI', 'IndexedItemURI', 'FileItemURI', 'RPFItemURI', 'TableBuilder', 'ApplanixBuilder', 'MatchATBuilder', 'ISATBuilder', 'KompsatBuilder', 'IkonosBuilder', 'LandsatBuilder', 'LandsatMSSBuilder', 'SpotBuilder', 'RapidEyeBuilder', 'LasBuilder', 'LasDatasetBuilder', 'RadarBuilder', 'TerrainBuilder', 'HREBuilder', 'RasterTypeEnvironment', 'CreateMosaicDatasetParameters', 'MosaicDatasetSelectionParameters', 'AddRastersParameters', 'SynchronizeParameters', 'CalculateCellSizeRangesParameters', 'BuildBoundaryParameters', 'RemoveItemsParameters', 'BuildFootprintsParameters', 'DefineOverviewsParameters', 'GenerateOverviewsParameters', 'BuildSeamlinesParameters', 'QueryPathsParameters', 'ReplacePathsParameters', 'DefineNoDataParameters', 'ComputeDirtyAreaParameters', 'CompositeURIFilter', 'URIProductNameFilter', 'SeamlineTaskInfo', 'ClipFootprintToMosaic', 'RasterRouteFinder', 'SeamlineByEdge', 'MosaicWorkspaceExtension', 'MosaicWorkspaceExtensionHelper', 'RasterTypeName', 'ImportGeometryParameters', 'AnalyzeParameters', 'RasterTypeFactory', 'CsvCrawler', 'URIPropertiesFilter', 'DeleteMosaicDatasetParameters', 'RasterTypeDataSourceHandlerParameters', 'ItemPathsOptions', 'QuickBirdFileCrawler', 'PixFileCrawler', 'IkonosFileCrawler', 'MultiPartItemURI', 'MergeItemsParameters', 'SplitMergedItemsParameters', 'DmciiBuilder', 'KompsatFileCrawler', 'SocetSetBuilder', 'PleiadesBuilder', 'PleiadesFileCrawler', 'AddNewerRastersParameters', 'SearchBuilder', 'SearchItemURI', 'Spot6FileCrawler', 'AISImageServerManager', 'CustomMensuration', 'Mensuration', 'AngularMeasurement', 'DistanceMeasurement', 'HeightMeasurement', 'MapPoint', 'PointMeasurement', 'PolygonMeasurement', 'IID_IERasterStatus', 'IID_IRect', 'IID_IBinFunction', 'IID_IBinFunction2', 'IID_IDescRow', 'IID_IDescColumn', 'IID_IDescTable', 'IID_IRasterClassNames', 'IID_IPixelBlock2', 'IID_IPixelBlock3', 'IID_IPixelBlock4', 'IID_IRawPixels', 'IID_IRasterTransaction', 'IID_IXForm', 'IID_IGeodeticProjection', 'IID_IRasterMapModel', 'IID_IFormatData', 'IID_IFormatList', 'IID_IFormatTest', 'IID_IContrastTable', 'IID_IRasterFormatControl', 'IID_IRasterStatusEvent', 'IID_IRasterStatusEvent2', 'IID_IRasterStatus', 'IID_IRasterStatus2', 'IID_IRasterStatus3', 'IID_IRasterDataManagementEvents', 'IID_IImageFeaturePoint', 'IID_IImageFeaturePoints', 'IID_IImageMatchPoint', 'IID_IImageMatchPoints', 'IID_ITiePoint', 'IID_ITiePointCollection', 'IID_ITiePointOperation', 'IID_IImageRegistration', 'IID_IRasterHistogram', 'IID_IPixelResampler', 'IID_IRasterXformer', 'IID_IRasterInfo', 'IID_IRasterBandColormap', 'IID_IRasterCollection', 'IID_IRasterProps', 'IID_IRasterDefaultProps', 'IID_IRasterAnalysisProps', 'IID_IRasterWorkspace3', 'IID_IRasterCatalogTable', 'IID_IWorldFileExport', 'IID_IWorldFileExport2', 'IID_IRasterEdit', 'IID_IRasterPyramid', 'IID_IRasterPyramid2', 'IID_IRasterPyramid3', 'IID_ITemporaryDataset', 'IID_IRasterHistograms', 'IID_IStatsHistogram', 'IID_IStatsHistogram2', 'IID_IRasterTable', 'IID_IUniqueValues', 'IID_IUniqueValues2', 'IID_IUniqueStringValues', 'IID_IUniqueMutliStringValues', 'IID_IUniqueDoubleValues', 'IID_IRasterCalcUniqueValues', 'IID_IRasterCalcUniqueValues2', 'IID_IRasterColormapToRGBConversion', 'IID_IPixelBlockCursor', 'IID_IRasterAttributeTableManager', 'IID_IRaster2', 'IID_IRasterColormap2', 'IID_IRasterColormap3', 'IID_IRasterColormap4', 'IID_IRasterDatasetJukebox', 'IID_IRasterResamplingControl', 'IID_IMosaicOperator', 'IID_IMosaicOperator2', 'IID_IMosaicOperator3', 'IID_IMosaicRaster', 'IID_IMosaicRaster2', 'IID_IRawBlocks', 'IID_ICancelListener', 'IID_IRasterKeyProperties', 'IID_IRasterDatasetContainer', 'IID_IGeoTransformationHelper', 'IID_IRasterCommand', 'IID_IRasterCommands', 'IID_IRasterCommandResult', 'IID_IRasterCommandResults', 'IID_IPixelFilter', 'IID_IPixelOperation', 'IID_IRasterGeometryProc', 'IID_IRasterGeometryProc2', 'IID_IRasterGeometryProc3', 'IID_IBasicRasterSdeConnection', 'IID_IRasterSdeCatalog', 'IID_IRasterSdeServerOperation', 'IID_IRasterSdeServerOperation2', 'IID_IRasterSdeStorage', 'IID_IRasterSdeStorage2', 'IID_IRasterDomainExtractor', 'IID_IDEWCSCoverage', 'IID_IDEWMSMap', 'IID_IDEImageServer', 'IID_IDEMosaicDataset', 'IID_IDEMosaicDataset2', 'IID_IItemPaths', 'IID_IPixelFilter2', 'IID_IPixelFilter3', 'IID_IBackgroundFilter', 'IID_IColormapFilter', 'IID_ILutFilter', 'IID_IPixelFilterCollection', 'IID_IRasterConvolutionFilter', 'IID_IStockConvolutionFilter', 'IID_IMultibandFilter', 'IID_IPansharpeningFilter', 'IID_IPansharpeningFilter2', 'IID_IRemapFilter', 'IID_IClipFilter', 'IID_IClipFilter2', 'IID_INoDataFilter', 'IID_IFocalMeanFilter', 'IID_IFocalStatisticsFilter', 'IID_IFocalStatisticsFilter2', 'IID_ISpeckleFilter', 'IID_IHistogramSpecification', 'IID_IStockFrequencyDistributionHistogram', 'IID_IRasterLoader', 'IID_IRasterCatalogLoader', 'IID_IDrLoader', 'IID_ISimplePixelResampler', 'IID_IRawPixelReader', 'IID_IPixelReader', 'IID_IPixelReader2', 'IID_ISimplePixelReader', 'IID_IRasterXformer2', 'IID_IRasterXform', 'IID_IRasterXform2', 'IID_ISensorXform', 'IID_IGeodataXform2', 'IID_ICoordinateXform', 'IID_ICoordinateXform2', 'IID_IGeometricXform', 'IID_ICompositeXform', 'IID_IGCSShiftXform', 'IID_IPolynomialXform', 'IID_ISplineXform', 'IID_IAdjustXform', 'IID_IRPCXform', 'IID_IApproximationXform', 'IID_IGeodataXformApproximation', 'IID_IRGB32PixelResampler', 'IID_ICustomXform', 'IID_IFrameXform', 'IID_ILSRXform', 'IID_IRasterXformHelper', 'IID_ISPOT5Xform', 'IID_IFormosat2Xform', 'IID_ICSMXform', 'IID_IProjectiveXform', 'IID_IPushbroomUtilities', 'IID_IRasterInfos', 'IID_IRasterFunction', 'IID_IRasterFunction2', 'IID_IRasterFunction3', 'IID_IRasterFunctionArguments', 'IID_IRasterFunctionHelper', 'IID_IRasterFunctionHelper2', 'IID_IFunctionRasterDatasetName', 'IID_IFunctionRasterDataset', 'IID_IFunctionRasterDataset2', 'IID_IGeometricFunction', 'IID_IGeometricFunctionArguments', 'IID_IPansharpeningFunctionArguments', 'IID_IPansharpeningFunctionArguments2', 'IID_IPanSharpenGramSchmidtFunctionArguments', 'IID_IArithmeticFunctionArguments', 'IID_IArithmeticFunctionArguments2', 'IID_IColormapFunctionArguments', 'IID_IMosaicLODInfos', 'IID_IMosaicFunction', 'IID_IMosaicFunction2', 'IID_IMosaicFunction3', 'IID_IMosaicFunctionArguments', 'IID_IMosaicFunctionArguments2', 'IID_IExtractBandFunctionArguments', 'IID_IExtractBandFunctionArguments2', 'IID_IStretchFunctionArguments', 'IID_IStretchFunctionArguments2', 'IID_IStatisticsFunctionArguments', 'IID_IStatisticsFunctionArguments2', 'IID_IConvolutionFunctionArguments', 'IID_ISpeckleFunctionArguments', 'IID_IRadarCalibrationFunctionArguments', 'IID_IRasterFunctionTemplate', 'IID_IRasterFunctionTemplate2', 'IID_IRasterFunctionVariable', 'IID_IClipFunctionArguments', 'IID_IColorspaceConversionFunctionArguments', 'IID_IHillshadeFunctionArguments', 'IID_ISlopeScalingArguments', 'IID_IReprojectFunctionArguments', 'IID_IConstantFunctionArguments', 'IID_IConstantFunctionArguments2', 'IID_ISpectralConversionFunctionArguments', 'IID_ISpectralConversionFunctionArguments2', 'IID_ISlopeFunctionArguments', 'IID_ITrendFunctionArguments', 'IID_IGrayscaleFunctionArguments', 'IID_IShadedReliefFunctionArguments', 'IID_IRasterInfoFunctionArguments', 'IID_IMaskFunctionArguments', 'IID_IMaskFunctionArguments2', 'IID_ISAIFunctionArguments', 'IID_IScalar', 'IID_IMosaicRastersFunctionArguments', 'IID_IMergeRastersFunctionArguments', 'IID_IFootprintFunctionArguments', 'IID_INDVIFunctionArguments', 'IID_INDVIFunctionArguments2', 'IID_IExcludedAreaFunctionArguments', 'IID_IRemapFunctionArguments', 'IID_ITableFunctionArguments', 'IID_IBandArithmeticFunctionArguments', 'IID_IRasterItemFunctionArguments', 'IID_ICachedRasterFunction', 'IID_ICachedRasterFunctionArguments', 'IID_IRasterCacheArguments', 'IID_IContrastBrightnessFunctionArguments', 'IID_IRenderedRasterFunctionArguments', 'IID_IReflectanceFunctionArguments', 'IID_IDownsampleFunctionArguments', 'IID_IReflectanceFunctionArguments2', 'IID_ILasToRasterFunctionArguments', 'IID_ITerrainToRasterFunctionArguments', 'IID_ILasDatasetToRasterFunctionArguments', 'IID_IMosaicDataset', 'IID_IItemTemplate', 'IID_IItemURI', 'IID_IItemURIArray', 'IID_ICellSizeLevel', 'IID_ICellSizeLevels', 'IID_IDataSourceCrawler', 'IID_IBuilderItem', 'IID_IRasterBuilder', 'IID_IItemURIFilter', 'IID_IItemTemplateArray', 'IID_IRasterType', 'IID_IAddRastersParameters', 'IID_IRasterThumbnailBuilder', 'IID_ISynchronizeParameters', 'IID_IRasterTypeOperation', 'IID_IRasterTypeName', 'IID_IDeleteMosaicDatasetParameters', 'IID_IDataSourceCrawler2', 'IID_IFileCrawler', 'IID_IFolderSort', 'IID_IFileCrawler2', 'IID_ICsvCrawler', 'IID_IRasterDatasetCrawler', 'IID_ITableCrawler', 'IID_ITableCrawler2', 'IID_ITableCrawler3', 'IID_IArrayCrawler', 'IID_IGenericObjectCrawler', 'IID_IItemURI2', 'IID_IOverviewItemURI', 'IID_IItemPathsOptions', 'IID_IItemPaths2', 'IID_IBuilderItem2', 'IID_IBuilderItem3', 'IID_IRasterBuilderInit', 'IID_IRasterBuilderInit2', 'IID_IItemTemplate2', 'IID_ICompositeURIFilter', 'IID_IRasterBuilder2', 'IID_IRasterTypeProperties', 'IID_IRasterTypeProperties2', 'IID_IMosaicDataset2', 'IID_IMosaicDatasetOperationParameters', 'IID_IMosaicDatasetOperationParameters2', 'IID_IThreadedOperationParameters', 'IID_IThreadedOperationParameters2', 'IID_ISelectionParameters', 'IID_ICreateMosaicDatasetParameters', 'IID_ICreateMosaicDatasetParameters2', 'IID_ISynchronizeParameters2', 'IID_IBuildPyramidsParameters', 'IID_ICalculateStatisticsParameters', 'IID_ICalculateCellSizeRangesParameters', 'IID_IBuildBoundaryParameters', 'IID_IBuildBoundaryParameters2', 'IID_IRemoveSliversParameters', 'IID_IOverviewTileParameters', 'IID_IOverviewTileParameters2', 'IID_IOverviewImageParameters', 'IID_IDefineOverviewsParameters', 'IID_IGenerateOverviewsParameters', 'IID_IGenerateOverviewsParameters2', 'IID_IRemoveItemsParameters', 'IID_IRemoveItemsParameters2', 'IID_IDefineNoDataParameters', 'IID_IDefineNoDataParameters2', 'IID_IComputeDirtyAreaParameters', 'IID_IBuildFootprintsParameters', 'IID_IBuildFootprintsParameters2', 'IID_IBuildFootprintsByRadiometryParameters', 'IID_IBuildFootprintsByGeometryParameters', 'IID_IBuildFootprintsByShrinkingParameters', 'IID_IFrameCameraParameters', 'IID_IApplanixBuilder', 'IID_IISATBuilder', 'IID_ILasBuilder', 'IID_ITerrainBuilder', 'IID_ILasDatasetBuilder', 'IID_IRadarBuilder', 'IID_IMatchATBuilder', 'IID_ISeamlineTaskInfo', 'IID_ISeamlineTaskInfo2', 'IID_ISeamlineModifier', 'IID_ISeamlineModifierInit', 'IID_IBuildSeamlinesParameters', 'IID_IBuildSeamlinesParameters2', 'IID_IQueryPathsParameters', 'IID_IQueryPathsParameters2', 'IID_IReplacePathsParameters', 'IID_IReplacePathsParameters2', 'IID_IImportGeometryParameters', 'IID_IAnalyzeParameters', 'IID_IAddNewerRastersParameters', 'IID_IBuildSeamlinesParameters3', 'IID_IMergeItemsParameters2', 'IID_ICellSizeLevel2', 'IID_IMosaicDatasetOperation', 'IID_IMosaicDatasetOperation2', 'IID_IRasterTypeHistory', 'IID_IRasterTypeHistory2', 'IID_IOverviewBuilder', 'IID_IRasterTypeFactory', 'IID_IRasterTypeFactory2', 'IID_IRasterTypeEnvironment', 'IID_IRasterTypeEnvironment2', 'IID_IRasterTypeDataSourceHandlerParameters', 'IID_IRasterTypeDataSourceHandlerParameters2', 'IID_IRasterTypeDataSourceHandler', 'IID_IRasterTypeDataSourceHandler2', 'IID_IRasterTypeItemURI', 'IID_IRasterTypeItemURI2', 'IID_ICompositeItemURI', 'IID_IIndexedItemURI', 'IID_IFileItemURI', 'IID_IRPFItemURI', 'IID_IURIProductNameFilter', 'IID_IURIPropertiesFilter', 'IID_ITableBuilder', 'IID_IMosaicWorkspaceExtension', 'IID_IMosaicWorkspaceExtensionHelper', 'IID_IRasterServiceHelper', 'IID_IRasterServiceHelper2', 'IID_IItemURICompare', 'IID_IItemPathsQuery', 'IID_IItemPathsQuery2', 'IID_IMultiPartItemURI', 'IID_IAISImageServerManager', 'IID_IAngularMeasurement', 'IID_IDistanceMeasurement', 'IID_IHeightMeasurement', 'IID_IMapPoint', 'IID_IPointMeasurement', 'IID_IPolygonMeasurement', 'IID_IMensuration', 'IID_IMensuration3D', 'IID_IRasterBand', 'IID_IRasterStatistics', 'IID_IEnumRasterBand', 'IID_IRasterBandEdit', 'IID_IRasterBandEdit2', 'IID_IRasterBandCollection', 'IID_IRasterWorkspace', 'IID_IRasterStatistics2', 'IID_IStatsHistogram3', 'IID_IRasterCalcStatsHistogram', 'IID_IRasterCalcStatsHistogram2', 'IID_IRasterCalcStatsHistogram3', 'IID_IDERasterUtilities', 'IID_IRasterInfo2', 'IID_IAISImageServiceX', 'IID_IAISClientObjectX', 'IID_IAISImageService2X', 'IID_IAISImageService3X', 'CLSID_RasterWorkspaceFactory', 'CLSID_FormatList', 'CLSID_RasterClassNames', 'CLSID_DblPnt', 'CLSID_DblRect', 'CLSID_RasterStatus', 'CLSID_RasterStatusEventHelper', 'CLSID_RasterStatusEvent2Helper', 'CLSID_RasterDataManagementEventsHelper', 'CLSID_DefaultRasterStatusEvent', 'CLSID_ImageRegistration', 'CLSID_ImageFeaturePoint', 'CLSID_ImageFeaturePoints', 'CLSID_ImageMatchPoint', 'CLSID_ImageMatchPoints', 'CLSID_TiePoint', 'CLSID_TiePointCollection', 'CLSID_RasterDataset', 'CLSID_RasterBand', 'CLSID_RasterCatalogTable', 'CLSID_Raster', 'CLSID_RasterWorkspace', 'CLSID_RasterBands', 'CLSID_RasterNativeType', 'CLSID_PixelBlock', 'CLSID_UniqueValues', 'CLSID_StatsHistogram', 'CLSID_RasterCalcStatsHistogram', 'CLSID_RasterCalcUniqueValues', 'CLSID_RasterColormapToRGBConverter', 'CLSID_RasterCursor', 'CLSID_PixelBlockCursor', 'CLSID_RasterAttributeTableManager', 'CLSID_CancelListener', 'CLSID_RasterColormap', 'CLSID_RasterStatistics', 'CLSID_RasterHistogram', 'CLSID_RasterHistograms', 'CLSID_MosaicRaster', 'CLSID_MeanMosaicker', 'CLSID_BlendMosaicker', 'CLSID_GeoTransformationHelper', 'CLSID_RasterCommand', 'CLSID_RasterCommandResult', 'CLSID_RasterGeometryProc', 'CLSID_RasterPicture', 'CLSID_SdeRasterCatalogTable', 'CLSID_BasicRasterSdeLoader', 'CLSID_RasterDomainExtractor', 'CLSID_DERasterUtilities', 'CLSID_DEWCSCoverageType', 'CLSID_DEWCSCoverage', 'CLSID_DEWMSMapType', 'CLSID_DEWMSMap', 'CLSID_DEImageServerType', 'CLSID_DEImageServer', 'CLSID_DEMosaicDatasetType', 'CLSID_DEMosaicDataset', 'CLSID_SdeRasterTableName', 'CLSID_BackgroundFilter', 'CLSID_ColormapFilter', 'CLSID_LutFilter', 'CLSID_RasterConvolutionFilter', 'CLSID_PixelFilterCollection', 'CLSID_MultibandFilter', 'CLSID_PansharpeningFilter', 'CLSID_RemapFilter', 'CLSID_ClipFilter', 'CLSID_NoDataFilter', 'CLSID_FocalMeanFilter', 'CLSID_FocalStatisticsFilter', 'CLSID_SpeckleFilter', 'CLSID_HistogramSpecification', 'CLSID_StockFrequencyDistributionHistogram', 'CLSID_RasterLoader', 'CLSID_RasterCatalogLoader', 'CLSID_DrLoader', 'CLSID_RasterXformer', 'CLSID_IdentityXform', 'CLSID_GeometricXform', 'CLSID_CoordinateXform', 'CLSID_PolynomialXform', 'CLSID_SplineXform', 'CLSID_CompositeXform', 'CLSID_GCSShiftXform', 'CLSID_AdjustXform', 'CLSID_RPCXform', 'CLSID_ApproximationXform', 'CLSID_SimplePixelResampler', 'CLSID_SimplePixelReader', 'CLSID_RGB32PixelResampler', 'CLSID_FrameXform', 'CLSID_LSRXform', 'CLSID_SPOT5Xform', 'CLSID_Formosat2Xform', 'CLSID_ProjectiveXform', 'CLSID_RasterXformHelper', 'CLSID_PushbroomUtilities', 'CLSID_CSMXform', 'CLSID_FunctionRasterDatasetName', 'CLSID_FunctionRasterDataset', 'CLSID_RasterInfo', 'CLSID_RasterInfos', 'CLSID_RasterFunctionHelper', 'CLSID_RasterFunctionCollection', 'CLSID_CompositeBandFunction', 'CLSID_ExtractBandFunction', 'CLSID_ExtractBandFunctionArguments', 'CLSID_GeometricFunction', 'CLSID_GeometricFunctionArguments', 'CLSID_MosaicFunction', 'CLSID_MosaicFunctionArguments', 'CLSID_NDVIFunction', 'CLSID_NDVIFunctionArguments', 'CLSID_ColormapToRGBFunction', 'CLSID_RGBToColormapFunction', 'CLSID_PansharpeningFunction', 'CLSID_PansharpeningFunctionArguments', 'CLSID_PanSharpenGramSchmidtFunction', 'CLSID_PanSharpenGramSchmidtFunctionArguments', 'CLSID_IdentityFunction', 'CLSID_ArithmeticFunction', 'CLSID_ArithmeticFunctionArguments', 'CLSID_ColormapFunction', 'CLSID_ColormapFunctionArguments', 'CLSID_RGB32Function', 'CLSID_ComplexFunction', 'CLSID_StretchFunction', 'CLSID_StretchFunctionArguments', 'CLSID_StatisticsFunction', 'CLSID_StatisticsFunctionArguments', 'CLSID_ConvolutionFunction', 'CLSID_ConvolutionFunctionArguments', 'CLSID_SpeckleFunction', 'CLSID_SpeckleFunctionArguments', 'CLSID_RadarCalibrationFunction', 'CLSID_RadarCalibrationFunctionArguments', 'CLSID_MosaicLODInfos', 'CLSID_RasterFunctionTemplate', 'CLSID_RasterFunctionVariable', 'CLSID_ClipFunction', 'CLSID_ClipFunctionArguments', 'CLSID_ColorspaceConversionFunction', 'CLSID_ColorspaceConversionFunctionArguments', 'CLSID_HillshadeFunction', 'CLSID_HillshadeFunctionArguments', 'CLSID_ConstantFunction', 'CLSID_ConstantFunctionArguments', 'CLSID_SpectralConversionFunction', 'CLSID_SpectralConversionFunctionArguments', 'CLSID_SlopeFunction', 'CLSID_SlopeFunctionArguments', 'CLSID_AspectFunction', 'CLSID_TrendFunction', 'CLSID_TrendFunctionArguments', 'CLSID_GrayscaleFunction', 'CLSID_GrayscaleFunctionArguments', 'CLSID_ShadedReliefFunction', 'CLSID_ShadedReliefFunctionArguments', 'CLSID_RasterInfoFunction', 'CLSID_RasterInfoFunctionArguments', 'CLSID_MaskFunction', 'CLSID_MaskFunctionArguments', 'CLSID_SAIFunction', 'CLSID_SAIFunctionArguments', 'CLSID_Scalar', 'CLSID_MosaicRastersFunction', 'CLSID_MergeRastersFunction', 'CLSID_MosaicRastersFunctionArguments', 'CLSID_MergeRastersFunctionArguments', 'CLSID_RasterFunctionTemplateArguments', 'CLSID_FootprintFunction', 'CLSID_FootprintFunctionArguments', 'CLSID_ExcludedAreaFunction', 'CLSID_ExcludedAreaFunctionArguments', 'CLSID_RGB32ToRGBFunction', 'CLSID_RemapFunction', 'CLSID_RemapFunctionArguments', 'CLSID_TableFunction', 'CLSID_TableFunctionArguments', 'CLSID_BandArithmeticFunction', 'CLSID_BandArithmeticFunctionArguments', 'CLSID_RasterItemFunction', 'CLSID_RasterItemFunctionArguments', 'CLSID_CachedRasterFunction', 'CLSID_CachedRasterFunctionArguments', 'CLSID_ReflectanceFunction', 'CLSID_ContrastBrightnessFunction', 'CLSID_ContrastBrightnessFunctionArguments', 'CLSID_ReprojectFunction', 'CLSID_ReprojectFunctionArguments', 'CLSID_RenderedRasterFunction', 'CLSID_RenderedRasterFunctionArguments', 'CLSID_ReflectanceFunctionArguments', 'CLSID_KauthThomasFunction', 'CLSID_DownsampleFunction', 'CLSID_DownsampleFunctionArguments', 'CLSID_FileCrawler', 'CLSID_FolderCrawler', 'CLSID_RasterDatasetCrawler', 'CLSID_TableCrawler', 'CLSID_ArrayCrawler', 'CLSID_GenericObjectCrawler', 'CLSID_ItemURI', 'CLSID_ItemURIArray', 'CLSID_BuilderItem', 'CLSID_MosaicDataset', 'CLSID_CellSizeLevel', 'CLSID_OverviewItemURI', 'CLSID_CellSizeLevels', 'CLSID_RasterDatasetBuilder', 'CLSID_NITFBuilder', 'CLSID_RPFBuilder', 'CLSID_PixFileBuilder', 'CLSID_OverviewBuilder', 'CLSID_RPDefBuilder', 'CLSID_ISDefBuilder', 'CLSID_QuickBirdBuilder', 'CLSID_ItemTemplate', 'CLSID_ItemTemplateArray', 'CLSID_RasterType', 'CLSID_RasterTypeItemURI', 'CLSID_CompositeItemURI', 'CLSID_IndexedItemURI', 'CLSID_FileItemURI', 'CLSID_RPFItemURI', 'CLSID_TableBuilder', 'CLSID_ApplanixBuilder', 'CLSID_MatchATBuilder', 'CLSID_ISATBuilder', 'CLSID_KompsatBuilder', 'CLSID_IkonosBuilder', 'CLSID_LandsatBuilder', 'CLSID_LandsatMSSBuilder', 'CLSID_SpotBuilder', 'CLSID_RapidEyeBuilder', 'CLSID_LasBuilder', 'CLSID_LasDatasetBuilder', 'CLSID_RadarBuilder', 'CLSID_TerrainBuilder', 'CLSID_HREBuilder', 'CLSID_RasterTypeEnvironment', 'CLSID_CreateMosaicDatasetParameters', 'CLSID_MosaicDatasetSelectionParameters', 'CLSID_AddRastersParameters', 'CLSID_SynchronizeParameters', 'CLSID_CalculateCellSizeRangesParameters', 'CLSID_BuildBoundaryParameters', 'CLSID_RemoveItemsParameters', 'CLSID_BuildFootprintsParameters', 'CLSID_DefineOverviewsParameters', 'CLSID_GenerateOverviewsParameters', 'CLSID_BuildSeamlinesParameters', 'CLSID_QueryPathsParameters', 'CLSID_ReplacePathsParameters', 'CLSID_DefineNoDataParameters', 'CLSID_ComputeDirtyAreaParameters', 'CLSID_CompositeURIFilter', 'CLSID_URIProductNameFilter', 'CLSID_SeamlineTaskInfo', 'CLSID_ClipFootprintToMosaic', 'CLSID_RasterRouteFinder', 'CLSID_SeamlineByEdge', 'CLSID_MosaicWorkspaceExtension', 'CLSID_MosaicWorkspaceExtensionHelper', 'CLSID_RasterTypeName', 'CLSID_ImportGeometryParameters', 'CLSID_AnalyzeParameters', 'CLSID_RasterTypeFactory', 'CLSID_CsvCrawler', 'CLSID_URIPropertiesFilter', 'CLSID_DeleteMosaicDatasetParameters', 'CLSID_RasterTypeDataSourceHandlerParameters', 'CLSID_ItemPathsOptions', 'CLSID_QuickBirdFileCrawler', 'CLSID_PixFileCrawler', 'CLSID_IkonosFileCrawler', 'CLSID_MultiPartItemURI', 'CLSID_MergeItemsParameters', 'CLSID_SplitMergedItemsParameters', 'CLSID_DmciiBuilder', 'CLSID_KompsatFileCrawler', 'CLSID_SocetSetBuilder', 'CLSID_PleiadesBuilder', 'CLSID_PleiadesFileCrawler', 'CLSID_AddNewerRastersParameters', 'CLSID_SearchBuilder', 'CLSID_SearchItemURI', 'CLSID_Spot6FileCrawler', 'CLSID_AISImageServerManager', 'CLSID_CustomMensuration', 'CLSID_Mensuration', 'CLSID_AngularMeasurement', 'CLSID_DistanceMeasurement', 'CLSID_HeightMeasurement', 'CLSID_MapPoint', 'CLSID_PointMeasurement', 'CLSID_PolygonMeasurement', 'esriRasterFormatSupportLevel', 'esriMatchPointRefinementType', 'esriImageBlockingType', 'esriImageAdjustmentType', 'rstRepresentationType', 'esriRasterError', 'esriGeoTransTypeEnum', 'esriRasterProperties', 'esriCellsizeType', 'esriExtentType', 'rstMosaicOperatorType', 'rstMosaicColormapMode', 'esriRasterColorInterpretation', 'esriNoDataInterpretation', 'esriBlendType', 'esriBlendWidthUnits', 'esriGeometrySimplificationMethod', 'esriTileState', 'esriRasterPrjMethodTypeEnum', 'esriRasterLoaderError', 'esriRasterSdePyramidOptEnum', 'esriSpeckleFilterType', 'esriSpeckleFilterKernel', 'esriSpeckleNoiseModel', 'esriRasterFilterTypeEnum', 'esriPansharpeningType', 'esriFocalStatisticType', 'esriRasterClippingType', 'esriRasterKonradyType', 'esriGeodataXformApplyMethod', 'esriRasterFunctionErrors', 'esriRasterStretchType', 'esriSlopeType', 'esriRadarCalibration', 'esriRasterArithmeticOperation', 'esriMosaicMethod', 'esriColorspaceConversionType', 'esriRasterBandArithmeticMethod', 'esriMissingBandAction', 'esriCachedRasterCompressionType', 'esriFunctionRasterDatasetProperty', 'esriRequestSizeType', 'esriRasterPaintMethod', 'esriRasterRemoveHazeMethod', 'esriRaster3DToRasterFunctionErrors', 'esriRasterLasReturnType', 'esriRasterLasClassType', 'esriRasterLasCellAggregationType', 'esriRasterLasDataType', 'esriRasterLasVoidFillMethod', 'esriRasterCatalogType', 'esriCrawlerDataSourceType', 'esriRasterCatalogItemCategory', 'esriDuplicateItemsAction', 'esriMosaicDatasetErrors', 'esriFrameCameraUnits', 'esriRadarPolarization', 'esriApplanixCameraModel', 'esriDistortionType', 'esriBuildFootprintsMethods', 'esriImportGeometryTarget', 'esriBuildSeamlinesMethod', 'esriMosaicDatasetSideTable', 'esriCellSizeLevelCategory', 'esriDisplayCoordUnitType', 'esriReferenceGeoidType']
from cartocomutils import _esriDataSourcesRaster
from cartocomutils._esriDataSourcesRaster import RasterWorkspaceFactory, FormatList, RasterClassNames, DblPnt, DblRect, RasterStatus, RasterStatusEventHelper, RasterStatusEvent2Helper, RasterDataManagementEventsHelper, DefaultRasterStatusEvent, ImageRegistration, ImageFeaturePoint, ImageFeaturePoints, ImageMatchPoint, ImageMatchPoints, TiePoint, TiePointCollection, RasterDataset, RasterBand, RasterCatalogTable, Raster, RasterWorkspace, RasterBands, RasterNativeType, PixelBlock, UniqueValues, StatsHistogram, RasterCalcStatsHistogram, RasterCalcUniqueValues, RasterColormapToRGBConverter, RasterCursor, PixelBlockCursor, RasterAttributeTableManager, CancelListener, RasterColormap, RasterStatistics, RasterHistogram, RasterHistograms, MosaicRaster, MeanMosaicker, BlendMosaicker, GeoTransformationHelper, RasterCommand, RasterCommandResult, RasterGeometryProc, RasterPicture, SdeRasterCatalogTable, BasicRasterSdeLoader, RasterDomainExtractor, DERasterUtilities, DEWCSCoverageType, DEWCSCoverage, DEWMSMapType, DEWMSMap, DEImageServerType, DEImageServer, DEMosaicDatasetType, DEMosaicDataset, SdeRasterTableName, BackgroundFilter, ColormapFilter, LutFilter, RasterConvolutionFilter, PixelFilterCollection, MultibandFilter, PansharpeningFilter, RemapFilter, ClipFilter, NoDataFilter, FocalMeanFilter, FocalStatisticsFilter, SpeckleFilter, HistogramSpecification, StockFrequencyDistributionHistogram, RasterLoader, RasterCatalogLoader, DrLoader, RasterXformer, IdentityXform, GeometricXform, CoordinateXform, PolynomialXform, SplineXform, CompositeXform, GCSShiftXform, AdjustXform, RPCXform, ApproximationXform, SimplePixelResampler, SimplePixelReader, RGB32PixelResampler, FrameXform, LSRXform, SPOT5Xform, Formosat2Xform, ProjectiveXform, RasterXformHelper, PushbroomUtilities, CSMXform, FunctionRasterDatasetName, FunctionRasterDataset, RasterInfo, RasterInfos, RasterFunctionHelper, RasterFunctionCollection, CompositeBandFunction, ExtractBandFunction, ExtractBandFunctionArguments, GeometricFunction, GeometricFunctionArguments, MosaicFunction, MosaicFunctionArguments, NDVIFunction, NDVIFunctionArguments, ColormapToRGBFunction, RGBToColormapFunction, PansharpeningFunction, PansharpeningFunctionArguments, PanSharpenGramSchmidtFunction, PanSharpenGramSchmidtFunctionArguments, IdentityFunction, ArithmeticFunction, ArithmeticFunctionArguments, ColormapFunction, ColormapFunctionArguments, RGB32Function, ComplexFunction, StretchFunction, StretchFunctionArguments, StatisticsFunction, StatisticsFunctionArguments, ConvolutionFunction, ConvolutionFunctionArguments, SpeckleFunction, SpeckleFunctionArguments, RadarCalibrationFunction, RadarCalibrationFunctionArguments, MosaicLODInfos, RasterFunctionTemplate, RasterFunctionVariable, ClipFunction, ClipFunctionArguments, ColorspaceConversionFunction, ColorspaceConversionFunctionArguments, HillshadeFunction, HillshadeFunctionArguments, ConstantFunction, ConstantFunctionArguments, SpectralConversionFunction, SpectralConversionFunctionArguments, SlopeFunction, SlopeFunctionArguments, AspectFunction, TrendFunction, TrendFunctionArguments, GrayscaleFunction, GrayscaleFunctionArguments, ShadedReliefFunction, ShadedReliefFunctionArguments, RasterInfoFunction, RasterInfoFunctionArguments, MaskFunction, MaskFunctionArguments, SAIFunction, SAIFunctionArguments, Scalar, MosaicRastersFunction, MergeRastersFunction, MosaicRastersFunctionArguments, MergeRastersFunctionArguments, RasterFunctionTemplateArguments, FootprintFunction, FootprintFunctionArguments, ExcludedAreaFunction, ExcludedAreaFunctionArguments, RGB32ToRGBFunction, RemapFunction, RemapFunctionArguments, TableFunction, TableFunctionArguments, BandArithmeticFunction, BandArithmeticFunctionArguments, RasterItemFunction, RasterItemFunctionArguments, CachedRasterFunction, CachedRasterFunctionArguments, ReflectanceFunction, ContrastBrightnessFunction, ContrastBrightnessFunctionArguments, ReprojectFunction, ReprojectFunctionArguments, RenderedRasterFunction, RenderedRasterFunctionArguments, ReflectanceFunctionArguments, KauthThomasFunction, DownsampleFunction, DownsampleFunctionArguments, FileCrawler, FolderCrawler, RasterDatasetCrawler, TableCrawler, ArrayCrawler, GenericObjectCrawler, ItemURI, ItemURIArray, BuilderItem, MosaicDataset, CellSizeLevel, OverviewItemURI, CellSizeLevels, RasterDatasetBuilder, NITFBuilder, RPFBuilder, PixFileBuilder, OverviewBuilder, RPDefBuilder, ISDefBuilder, QuickBirdBuilder, ItemTemplate, ItemTemplateArray, RasterType, RasterTypeItemURI, CompositeItemURI, IndexedItemURI, FileItemURI, RPFItemURI, TableBuilder, ApplanixBuilder, MatchATBuilder, ISATBuilder, KompsatBuilder, IkonosBuilder, LandsatBuilder, LandsatMSSBuilder, SpotBuilder, RapidEyeBuilder, LasBuilder, LasDatasetBuilder, RadarBuilder, TerrainBuilder, HREBuilder, RasterTypeEnvironment, CreateMosaicDatasetParameters, MosaicDatasetSelectionParameters, AddRastersParameters, SynchronizeParameters, CalculateCellSizeRangesParameters, BuildBoundaryParameters, RemoveItemsParameters, BuildFootprintsParameters, DefineOverviewsParameters, GenerateOverviewsParameters, BuildSeamlinesParameters, QueryPathsParameters, ReplacePathsParameters, DefineNoDataParameters, ComputeDirtyAreaParameters, CompositeURIFilter, URIProductNameFilter, SeamlineTaskInfo, ClipFootprintToMosaic, RasterRouteFinder, SeamlineByEdge, MosaicWorkspaceExtension, MosaicWorkspaceExtensionHelper, RasterTypeName, ImportGeometryParameters, AnalyzeParameters, RasterTypeFactory, CsvCrawler, URIPropertiesFilter, DeleteMosaicDatasetParameters, RasterTypeDataSourceHandlerParameters, ItemPathsOptions, QuickBirdFileCrawler, PixFileCrawler, IkonosFileCrawler, MultiPartItemURI, MergeItemsParameters, SplitMergedItemsParameters, DmciiBuilder, KompsatFileCrawler, SocetSetBuilder, PleiadesBuilder, PleiadesFileCrawler, AddNewerRastersParameters, SearchBuilder, SearchItemURI, Spot6FileCrawler, AISImageServerManager, CustomMensuration, Mensuration, AngularMeasurement, DistanceMeasurement, HeightMeasurement, MapPoint, PointMeasurement, PolygonMeasurement
from cartocomutils import Enumeration, IndexProperty, _IIDMap, _CLSIDMap, _RecordMap
import uuid


# Interfaces
class IERasterStatus(_esriDataSourcesRaster.IERasterStatus):
    _IID = uuid.UUID('ce4bcc80-2758-11d3-80ce-00500462e955')
    def UpdateTaskName(self, new_task):
        '''Method IERasterStatus.UpdateTaskName

           INPUT
            new_task            : BSTR'''
        return super(IERasterStatus, self).UpdateTaskName(new_task)
    def QueryCancel(self):
        '''Method IERasterStatus.QueryCancel

           OUTPUT
            give_up             : VARIANT_BOOL*'''
        return super(IERasterStatus, self).QueryCancel()
    def UpdateTaskStatus(self, taskname, percent_finished):
        '''Method IERasterStatus.UpdateTaskStatus

           INPUTS
            taskname            : BSTR
            percent_finished    : double'''
        return super(IERasterStatus, self).UpdateTaskStatus(taskname, percent_finished)
    def ResetCancel(self):
        '''Method IERasterStatus.ResetCancel'''
        return super(IERasterStatus, self).ResetCancel()

class IRect(_esriDataSourcesRaster.IRect):
    _IID = uuid.UUID('a10a39e8-b9ca-11d2-8e30-00a0249480f0')

    def __init__(self, *args, **kw):
        super(IRect, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_XMax(self):
        '''Method IRect.get_XMax

           OUTPUT
            pVal                : double*'''
        return super(IRect, self).get_XMax()
    def put_XMax(self, pVal):
        '''Method IRect.put_XMax

           INPUT
            pVal                : double'''
        return super(IRect, self).put_XMax(pVal)
    def get_XMin(self):
        '''Method IRect.get_XMin

           OUTPUT
            pVal                : double*'''
        return super(IRect, self).get_XMin()
    def put_XMin(self, pVal):
        '''Method IRect.put_XMin

           INPUT
            pVal                : double'''
        return super(IRect, self).put_XMin(pVal)
    def get_YMax(self):
        '''Method IRect.get_YMax

           OUTPUT
            pVal                : double*'''
        return super(IRect, self).get_YMax()
    def put_YMax(self, pVal):
        '''Method IRect.put_YMax

           INPUT
            pVal                : double'''
        return super(IRect, self).put_YMax(pVal)
    def get_YMin(self):
        '''Method IRect.get_YMin

           OUTPUT
            pVal                : double*'''
        return super(IRect, self).get_YMin()
    def put_YMin(self, pVal):
        '''Method IRect.put_YMin

           INPUT
            pVal                : double'''
        return super(IRect, self).put_YMin(pVal)
    def Set2Env(self, env):
        '''Method IRect.Set2Env

           INPUT
            env                 : IEnvelope*'''
        return super(IRect, self).Set2Env(env)
    def Convert2Env(self, env):
        '''Method IRect.Convert2Env

           INPUT
            env                 : IEnvelope*'''
        return super(IRect, self).Convert2Env(env)
    XMax = property(get_XMax, put_XMax, None)
    XMin = property(get_XMin, put_XMin, None)
    YMax = property(get_YMax, put_YMax, None)
    YMin = property(get_YMin, put_YMin, None)

class IBinFunction(_esriDataSourcesRaster.IBinFunction):
    _IID = uuid.UUID('07f78971-f990-11d2-80b0-00500462e955')
    def get_NumBins(self):
        '''Method IBinFunction.get_NumBins

           OUTPUT
            pVal                : long*'''
        return super(IBinFunction, self).get_NumBins()
    def ValueToIndex(self, pixval):
        '''Method IBinFunction.ValueToIndex

           INPUT
            pixval              : double

           OUTPUT
            row_index           : long*'''
        return super(IBinFunction, self).ValueToIndex(pixval)
    def Invert(self, Bin):
        '''Method IBinFunction.Invert

           INPUT
            Bin                 : long

           OUTPUTS
            upper               : double*
            lower               : double*'''
        return super(IBinFunction, self).Invert(Bin)
    def Title(self):
        '''Method IBinFunction.Title

           OUTPUT
            Title               : BSTR*'''
        return super(IBinFunction, self).Title()
    NumBins = property(get_NumBins, None, None)

class IBinFunction2(_esriDataSourcesRaster.IBinFunction2):
    _IID = uuid.UUID('b64bfd4c-672b-491e-a21c-f671de292deb')
    def get_NumBins(self):
        '''Method IBinFunction2.get_NumBins

           OUTPUT
            pVal                : long*'''
        return super(IBinFunction2, self).get_NumBins()
    def ValueToIndex(self, pixval):
        '''Method IBinFunction2.ValueToIndex

           INPUT
            pixval              : double

           OUTPUT
            row_index           : long*'''
        return super(IBinFunction2, self).ValueToIndex(pixval)
    def Invert(self, Bin):
        '''Method IBinFunction2.Invert

           INPUT
            Bin                 : long

           OUTPUTS
            upper               : double*
            lower               : double*'''
        return super(IBinFunction2, self).Invert(Bin)
    def Title(self):
        '''Method IBinFunction2.Title

           OUTPUT
            Title               : BSTR*'''
        return super(IBinFunction2, self).Title()
    def CreateFromTitle(self, Title, NumBins, psa):
        '''Method IBinFunction2.CreateFromTitle

           INPUTS
            Title               : BSTR
            NumBins             : long
            psa                 : SAFEARRAY**'''
        return super(IBinFunction2, self).CreateFromTitle(Title, NumBins, psa)
    NumBins = property(get_NumBins, None, None)

class IDescRow(_esriDataSourcesRaster.IDescRow):
    _IID = uuid.UUID('2a415fe2-f8f9-11d2-8ef2-00609770ad52')
    def get_NumFields(self):
        '''Method IDescRow.get_NumFields

           OUTPUT
            pVal                : long*'''
        return super(IDescRow, self).get_NumFields()
    def get_GetValue(self, index):
        '''Method IDescRow.get_GetValue

           INPUT
            index               : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IDescRow, self).get_GetValue(index)
    def get_PutValue(self, index, pVal):
        '''Method IDescRow.get_PutValue

           INPUTS
            index               : long
            pVal                : VARIANT*'''
        return super(IDescRow, self).get_PutValue(index, pVal)
    def get_FindField(self, strtofind):
        '''Method IDescRow.get_FindField

           INPUT
            strtofind           : BSTR

           OUTPUT
            index               : long*'''
        return super(IDescRow, self).get_FindField(strtofind)
    NumFields = property(get_NumFields, None, None)
    FindField = IndexProperty(get_FindField, None)
    GetValue = IndexProperty(get_GetValue, None)

class IDescColumn(_esriDataSourcesRaster.IDescColumn):
    _IID = uuid.UUID('2a415fe1-f8f9-11d2-8ef2-00609770ad52')

    def __init__(self, *args, **kw):
        super(IDescColumn, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IDescColumn.get_Name

           OUTPUT
            Name                : BSTR*'''
        return super(IDescColumn, self).get_Name()
    def put_Name(self, Name):
        '''Method IDescColumn.put_Name

           INPUT
            Name                : BSTR'''
        return super(IDescColumn, self).put_Name(Name)
    def get_Width(self):
        '''Method IDescColumn.get_Width

           OUTPUT
            Width               : long*'''
        return super(IDescColumn, self).get_Width()
    def Type(self):
        '''Method IDescColumn.Type

           OUTPUT
            Type                : short*'''
        return super(IDescColumn, self).Type()
    def Read(self, Start, Count):
        '''Method IDescColumn.Read

           INPUTS
            Start               : long
            Count               : long

           OUTPUT
            array               : VARIANT*'''
        return super(IDescColumn, self).Read(Start, Count)
    def Write(self, Start, Count, array):
        '''Method IDescColumn.Write

           INPUTS
            Start               : long
            Count               : long
            array               : VARIANT*'''
        return super(IDescColumn, self).Write(Start, Count, array)
    def ValueToIndex(self, pixval):
        '''Method IDescColumn.ValueToIndex

           INPUT
            pixval              : double

           OUTPUT
            row_index           : long*'''
        return super(IDescColumn, self).ValueToIndex(pixval)
    Name = property(get_Name, put_Name, None)
    Width = property(get_Width, None, None)

class IDescTable(_esriDataSourcesRaster.IDescTable):
    _IID = uuid.UUID('d777c1a0-f41a-11d2-80a7-00500462e955')
    def get_NumFields(self):
        '''Method IDescTable.get_NumFields

           OUTPUT
            pVal                : long*'''
        return super(IDescTable, self).get_NumFields()
    def FieldDesc(self, index):
        '''Method IDescTable.FieldDesc

           INPUT
            index               : long

           OUTPUTS
            Name                : BSTR*
            Type                : short*
            Width               : long*'''
        return super(IDescTable, self).FieldDesc(index)
    def get_BinFunction(self):
        '''Method IDescTable.get_BinFunction

           OUTPUT
            pVal                : IBinFunction**'''
        return super(IDescTable, self).get_BinFunction()
    def ValueToIndex(self, pixval):
        '''Method IDescTable.ValueToIndex

           INPUT
            pixval              : double

           OUTPUT
            row_index           : long*'''
        return super(IDescTable, self).ValueToIndex(pixval)
    def ReadRow(self, row_index):
        '''Method IDescTable.ReadRow

           INPUT
            row_index           : long

           OUTPUT
            Row                 : IDescRow**'''
        return super(IDescTable, self).ReadRow(row_index)
    def WriteRow(self, row_index, Row):
        '''Method IDescTable.WriteRow

           INPUTS
            row_index           : long
            Row                 : IDescRow*'''
        return super(IDescTable, self).WriteRow(row_index, Row)
    def ReadColumn(self, col_index):
        '''Method IDescTable.ReadColumn

           INPUT
            col_index           : long

           OUTPUT
            col                 : IDescColumn**'''
        return super(IDescTable, self).ReadColumn(col_index)
    def WriteColumn(self, col_index):
        '''Method IDescTable.WriteColumn

           INPUT
            col_index           : long

           OUTPUT
            col                 : IDescColumn**'''
        return super(IDescTable, self).WriteColumn(col_index)
    def FindField(self, strtofind):
        '''Method IDescTable.FindField

           INPUT
            strtofind           : BSTR

           OUTPUT
            pVal                : long*'''
        return super(IDescTable, self).FindField(strtofind)
    def AddColumn(self, col_index, col):
        '''Method IDescTable.AddColumn

           INPUTS
            col_index           : long
            col                 : IDescColumn*'''
        return super(IDescTable, self).AddColumn(col_index, col)
    def DeleteColumn(self, col_index):
        '''Method IDescTable.DeleteColumn

           INPUT
            col_index           : long'''
        return super(IDescTable, self).DeleteColumn(col_index)
    BinFunction = property(get_BinFunction, None, None)
    NumFields = property(get_NumFields, None, None)

class IRasterClassNames(_esriDataSourcesRaster.IRasterClassNames):
    _IID = uuid.UUID('a1f03e11-e88a-11d2-8ef1-00609770ad52')

    def __init__(self, *args, **kw):
        super(IRasterClassNames, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Create(self, numNames):
        '''Method IRasterClassNames.Create

           INPUT
            numNames            : int'''
        return super(IRasterClassNames, self).Create(numNames)
    def get_Size(self):
        '''Method IRasterClassNames.get_Size

           OUTPUT
            pNumNames           : int*'''
        return super(IRasterClassNames, self).get_Size()
    def put_ClassName(self, nEntry, pClassName):
        '''Method IRasterClassNames.put_ClassName

           INPUTS
            nEntry              : int
            pClassName          : BSTR'''
        return super(IRasterClassNames, self).put_ClassName(nEntry, pClassName)
    def get_ClassName(self, nEntry):
        '''Method IRasterClassNames.get_ClassName

           INPUT
            nEntry              : int

           OUTPUT
            pClassName          : BSTR*'''
        return super(IRasterClassNames, self).get_ClassName(nEntry)
    def Bin(self, pixval):
        '''Method IRasterClassNames.Bin

           INPUT
            pixval              : double

           OUTPUT
            pIndex              : long*'''
        return super(IRasterClassNames, self).Bin(pixval)
    def get_Names(self):
        '''Method IRasterClassNames.get_Names

           OUTPUT
            pNames              : VARIANT*'''
        return super(IRasterClassNames, self).get_Names()
    ClassName = property(None, put_ClassName, None)
    Names = property(get_Names, None, None)
    Size = property(get_Size, None, None)
    ClassName = IndexProperty(get_ClassName, None)

class IPixelBlock2(_esriDataSourcesRaster.IPixelBlock2):
    _IID = uuid.UUID('22dded84-d0a6-448e-95be-284503ac9cac')

    def __init__(self, *args, **kw):
        super(IPixelBlock2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Planes(self):
        '''Method IPixelBlock2.get_Planes

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock2, self).get_Planes()
    def get_Width(self):
        '''Method IPixelBlock2.get_Width

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock2, self).get_Width()
    def get_Height(self):
        '''Method IPixelBlock2.get_Height

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock2, self).get_Height()
    def get_PixelType(self, plane):
        '''Method IPixelBlock2.get_PixelType

           INPUT
            plane               : long

           OUTPUT
            pVal                : rstPixelType*'''
        return super(IPixelBlock2, self).get_PixelType(plane)
    def put_PixelType(self, plane, pVal):
        '''Method IPixelBlock2.put_PixelType

           INPUTS
            plane               : long
            pVal                : rstPixelType'''
        return super(IPixelBlock2, self).put_PixelType(plane, pVal)
    def get_BytesPerPixel(self):
        '''Method IPixelBlock2.get_BytesPerPixel

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock2, self).get_BytesPerPixel()
    def get_SafeArrayByRef(self, plane):
        '''Method IPixelBlock2.get_SafeArrayByRef

           INPUT
            plane               : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock2, self).get_SafeArrayByRef(plane)
    def GetVal(self, plane, x, y):
        '''Method IPixelBlock2.GetVal

           INPUTS
            plane               : long
            x                   : long
            y                   : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock2, self).GetVal(plane, x, y)
    BytesPerPixel = property(get_BytesPerPixel, None, None)
    Height = property(get_Height, None, None)
    PixelType = property(None, put_PixelType, None)
    Planes = property(get_Planes, None, None)
    Width = property(get_Width, None, None)
    PixelType = IndexProperty(get_PixelType, None)
    SafeArrayByRef = IndexProperty(get_SafeArrayByRef, None)

class IPixelBlock3(_esriDataSourcesRaster.IPixelBlock3):
    _IID = uuid.UUID('0ed55c8f-1ec2-4b40-a5d9-f3da548f1f40')

    def __init__(self, *args, **kw):
        super(IPixelBlock3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Planes(self):
        '''Method IPixelBlock3.get_Planes

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock3, self).get_Planes()
    def get_Width(self):
        '''Method IPixelBlock3.get_Width

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock3, self).get_Width()
    def get_Height(self):
        '''Method IPixelBlock3.get_Height

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock3, self).get_Height()
    def get_PixelType(self, plane):
        '''Method IPixelBlock3.get_PixelType

           INPUT
            plane               : long

           OUTPUT
            pVal                : rstPixelType*'''
        return super(IPixelBlock3, self).get_PixelType(plane)
    def put_PixelType(self, plane, pVal):
        '''Method IPixelBlock3.put_PixelType

           INPUTS
            plane               : long
            pVal                : rstPixelType'''
        return super(IPixelBlock3, self).put_PixelType(plane, pVal)
    def get_BytesPerPixel(self):
        '''Method IPixelBlock3.get_BytesPerPixel

           OUTPUT
            pVal                : long*'''
        return super(IPixelBlock3, self).get_BytesPerPixel()
    def get_PixelData(self, plane):
        '''Method IPixelBlock3.get_PixelData

           INPUT
            plane               : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock3, self).get_PixelData(plane)
    def put_PixelData(self, plane, pVal):
        '''Method IPixelBlock3.put_PixelData

           INPUTS
            plane               : long
            pVal                : VARIANT'''
        return super(IPixelBlock3, self).put_PixelData(plane, pVal)
    def get_PixelDataByRef(self, plane):
        '''Method IPixelBlock3.get_PixelDataByRef

           INPUT
            plane               : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock3, self).get_PixelDataByRef(plane)
    def GetVal(self, plane, x, y):
        '''Method IPixelBlock3.GetVal

           INPUTS
            plane               : long
            x                   : long
            y                   : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock3, self).GetVal(plane, x, y)
    def put_NoDataMask(self, plane, pVal):
        '''Method IPixelBlock3.put_NoDataMask

           INPUTS
            plane               : long
            pVal                : VARIANT'''
        return super(IPixelBlock3, self).put_NoDataMask(plane, pVal)
    def get_NoDataMask(self, plane):
        '''Method IPixelBlock3.get_NoDataMask

           INPUT
            plane               : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock3, self).get_NoDataMask(plane)
    def get_NoDataMaskByRef(self, plane):
        '''Method IPixelBlock3.get_NoDataMaskByRef

           INPUT
            plane               : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock3, self).get_NoDataMaskByRef(plane)
    def GetNoDataMaskVal(self, plane, x, y):
        '''Method IPixelBlock3.GetNoDataMaskVal

           INPUTS
            plane               : long
            x                   : long
            y                   : long

           OUTPUT
            pVal                : VARIANT*'''
        return super(IPixelBlock3, self).GetNoDataMaskVal(plane, x, y)
    def HasNoData(self, plane):
        '''Method IPixelBlock3.HasNoData

           INPUT
            plane               : long

           OUTPUT
            HasNoData           : VARIANT_BOOL*'''
        return super(IPixelBlock3, self).HasNoData(plane)
    def Clear(self, plane):
        '''Method IPixelBlock3.Clear

           INPUT
            plane               : long'''
        return super(IPixelBlock3, self).Clear(plane)
    def Mask(self, NoData):
        '''Method IPixelBlock3.Mask

           INPUT
            NoData              : VARIANT'''
        return super(IPixelBlock3, self).Mask(NoData)
    BytesPerPixel = property(get_BytesPerPixel, None, None)
    Height = property(get_Height, None, None)
    NoDataMask = property(None, put_NoDataMask, None)
    PixelData = property(None, put_PixelData, None)
    PixelType = property(None, put_PixelType, None)
    Planes = property(get_Planes, None, None)
    Width = property(get_Width, None, None)
    NoDataMask = IndexProperty(get_NoDataMask, None)
    NoDataMaskByRef = IndexProperty(get_NoDataMaskByRef, None)
    PixelData = IndexProperty(get_PixelData, None)
    PixelDataByRef = IndexProperty(get_PixelDataByRef, None)
    PixelType = IndexProperty(get_PixelType, None)

class IPixelBlock4(_esriDataSourcesRaster.IPixelBlock4):
    _IID = uuid.UUID('7007286c-be43-4c88-8db6-b6ee88bad01b')
    def Create(self, Planes, nCols, nRows, PixelType):
        '''Method IPixelBlock4.Create

           INPUTS
            Planes              : long
            nCols               : long
            nRows               : long
            PixelType           : rstPixelType'''
        return super(IPixelBlock4, self).Create(Planes, nCols, nRows, PixelType)
    def CreateFromPixelBlock(self, pBlock, NoData):
        '''Method IPixelBlock4.CreateFromPixelBlock

           INPUTS
            pBlock              : IPixelBlock*
            NoData              : VARIANT'''
        return super(IPixelBlock4, self).CreateFromPixelBlock(pBlock, NoData)
    def Clear(self):
        '''Method IPixelBlock4.Clear'''
        return super(IPixelBlock4, self).Clear()
    def ExportToBytes(self):
        '''Method IPixelBlock4.ExportToBytes

           OUTPUT
            pData               : SAFEARRAY**'''
        return super(IPixelBlock4, self).ExportToBytes()
    def HasNoData(self):
        '''Method IPixelBlock4.HasNoData

           OUTPUT
            pvbHasNoData        : VARIANT_BOOL*'''
        return super(IPixelBlock4, self).HasNoData()
    def HasData(self):
        '''Method IPixelBlock4.HasData

           OUTPUT
            pvbHasData          : VARIANT_BOOL*'''
        return super(IPixelBlock4, self).HasData()

class IRawPixels(_esriDataSourcesRaster.IRawPixels):
    _IID = uuid.UUID('5a2d94ae-190a-479c-93b9-d6645bb121e6')
    def CreatePixelBlock(self, Size):
        '''Method IRawPixels.CreatePixelBlock

           INPUT
            Size                : IPnt*

           OUTPUT
            pxls                : IPixelBlock**'''
        return super(IRawPixels, self).CreatePixelBlock(Size)
    def Read(self, tlc, pxls):
        '''Method IRawPixels.Read

           INPUTS
            tlc                 : IPnt*
            pxls                : IPixelBlock*'''
        return super(IRawPixels, self).Read(tlc, pxls)
    def Write(self, tlc, pxls):
        '''Method IRawPixels.Write

           INPUTS
            tlc                 : IPnt*
            pxls                : IPixelBlock*'''
        return super(IRawPixels, self).Write(tlc, pxls)
    def AcquireCache(self):
        '''Method IRawPixels.AcquireCache

           OUTPUT
            cache               : IUnknown**'''
        return super(IRawPixels, self).AcquireCache()
    def ReturnCache(self, cache):
        '''Method IRawPixels.ReturnCache

           INPUT
            cache               : IUnknown*

           OUTPUT
            num_refs            : long*'''
        return super(IRawPixels, self).ReturnCache(cache)
    def get_NumCacheRefs(self):
        '''Method IRawPixels.get_NumCacheRefs

           OUTPUT
            num_refs            : long*'''
        return super(IRawPixels, self).get_NumCacheRefs()
    NumCacheRefs = property(get_NumCacheRefs, None, None)

class IRasterTransaction(_esriDataSourcesRaster.IRasterTransaction):
    _IID = uuid.UUID('3be922f3-6934-40a5-a82e-c368cb13995b')

    def __init__(self, *args, **kw):
        super(IRasterTransaction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UndoLevels(self, num_undo):
        '''Method IRasterTransaction.put_UndoLevels

           INPUT
            num_undo            : long'''
        return super(IRasterTransaction, self).put_UndoLevels(num_undo)
    def Commit(self):
        '''Method IRasterTransaction.Commit'''
        return super(IRasterTransaction, self).Commit()
    def Start(self):
        '''Method IRasterTransaction.Start'''
        return super(IRasterTransaction, self).Start()
    def End(self):
        '''Method IRasterTransaction.End'''
        return super(IRasterTransaction, self).End()
    def Undo(self, N):
        '''Method IRasterTransaction.Undo

           INPUT
            N                   : long

           OUTPUT
            pending             : long*'''
        return super(IRasterTransaction, self).Undo(N)
    def get_UndoLevels(self):
        '''Method IRasterTransaction.get_UndoLevels

           OUTPUT
            num_undo            : long*'''
        return super(IRasterTransaction, self).get_UndoLevels()
    UndoLevels = property(get_UndoLevels, put_UndoLevels, None)

class IXForm(_esriDataSourcesRaster.IXForm):
    _IID = uuid.UUID('a10a39ee-b9ca-11d2-8e30-00a0249480f0')

    def __init__(self, *args, **kw):
        super(IXForm, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_InUnit(self):
        '''Method IXForm.get_InUnit

           OUTPUT
            pVal                : esriSRUnitType*'''
        return super(IXForm, self).get_InUnit()
    def put_InUnit(self, pVal):
        '''Method IXForm.put_InUnit

           INPUT
            pVal                : esriSRUnitType'''
        return super(IXForm, self).put_InUnit(pVal)
    def get_OutUnit(self):
        '''Method IXForm.get_OutUnit

           OUTPUT
            pVal                : esriSRUnitType*'''
        return super(IXForm, self).get_OutUnit()
    def put_OutUnit(self, pVal):
        '''Method IXForm.put_OutUnit

           INPUT
            pVal                : esriSRUnitType'''
        return super(IXForm, self).put_OutUnit(pVal)
    def Map(self, x):
        '''Method IXForm.Map

           INPUT
            x                   : IPnt*

           OUTPUT
            y                   : IPnt**'''
        return super(IXForm, self).Map(x)
    def Invert(self, y):
        '''Method IXForm.Invert

           INPUT
            y                   : IPnt*

           OUTPUT
            x                   : IPnt**'''
        return super(IXForm, self).Invert(y)
    def IsIdentity(self):
        '''Method IXForm.IsIdentity

           OUTPUT
            unity               : long*'''
        return super(IXForm, self).IsIdentity()
    InUnit = property(get_InUnit, put_InUnit, None)
    OutUnit = property(get_OutUnit, put_OutUnit, None)

class IGeodeticProjection(_esriDataSourcesRaster.IGeodeticProjection):
    _IID = uuid.UUID('559b8940-bab1-11d2-8e30-00a0249480f0')

    def __init__(self, *args, **kw):
        super(IGeodeticProjection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IGeodeticProjection.get_Name

           OUTPUT
            pVal                : BSTR*'''
        return super(IGeodeticProjection, self).get_Name()
    def get_Parameters(self):
        '''Method IGeodeticProjection.get_Parameters

           OUTPUT
            pVal                : VARIANT*'''
        return super(IGeodeticProjection, self).get_Parameters()
    def put_Parameters(self, pVal):
        '''Method IGeodeticProjection.put_Parameters

           INPUT
            pVal                : VARIANT'''
        return super(IGeodeticProjection, self).put_Parameters(pVal)
    def get_Spheroid(self):
        '''Method IGeodeticProjection.get_Spheroid

           OUTPUT
            pVal                : ISpheroid**'''
        return super(IGeodeticProjection, self).get_Spheroid()
    def put_Spheroid(self, pVal):
        '''Method IGeodeticProjection.put_Spheroid

           INPUT
            pVal                : ISpheroid*'''
        return super(IGeodeticProjection, self).put_Spheroid(pVal)
    def get_Datum(self):
        '''Method IGeodeticProjection.get_Datum

           OUTPUT
            pVal                : IDatum**'''
        return super(IGeodeticProjection, self).get_Datum()
    def put_Datum(self, pVal):
        '''Method IGeodeticProjection.put_Datum

           INPUT
            pVal                : IDatum*'''
        return super(IGeodeticProjection, self).put_Datum(pVal)
    def get_InUnit(self):
        '''Method IXForm.get_InUnit (from IXForm)

           OUTPUT
            pVal                : esriSRUnitType*'''
        return super(IGeodeticProjection, self).get_InUnit()
    def put_InUnit(self, pVal):
        '''Method IXForm.put_InUnit (from IXForm)

           INPUT
            pVal                : esriSRUnitType'''
        return super(IGeodeticProjection, self).put_InUnit(pVal)
    def get_OutUnit(self):
        '''Method IXForm.get_OutUnit (from IXForm)

           OUTPUT
            pVal                : esriSRUnitType*'''
        return super(IGeodeticProjection, self).get_OutUnit()
    def put_OutUnit(self, pVal):
        '''Method IXForm.put_OutUnit (from IXForm)

           INPUT
            pVal                : esriSRUnitType'''
        return super(IGeodeticProjection, self).put_OutUnit(pVal)
    def Map(self, x):
        '''Method IXForm.Map (from IXForm)

           INPUT
            x                   : IPnt*

           OUTPUT
            y                   : IPnt**'''
        return super(IGeodeticProjection, self).Map(x)
    def Invert(self, y):
        '''Method IXForm.Invert (from IXForm)

           INPUT
            y                   : IPnt*

           OUTPUT
            x                   : IPnt**'''
        return super(IGeodeticProjection, self).Invert(y)
    def IsIdentity(self):
        '''Method IXForm.IsIdentity (from IXForm)

           OUTPUT
            unity               : long*'''
        return super(IGeodeticProjection, self).IsIdentity()
    Datum = property(get_Datum, put_Datum, None)
    InUnit = property(get_InUnit, put_InUnit, None)
    Name = property(get_Name, None, None)
    OutUnit = property(get_OutUnit, put_OutUnit, None)
    Parameters = property(get_Parameters, put_Parameters, None)
    Spheroid = property(get_Spheroid, put_Spheroid, None)

class IRasterMapModel(_esriDataSourcesRaster.IRasterMapModel):
    _IID = uuid.UUID('a10a39e4-b9ca-11d2-8e30-00a0249480f0')

    def __init__(self, *args, **kw):
        super(IRasterMapModel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AngularUnit(self):
        '''Method IRasterMapModel.get_AngularUnit

           OUTPUT
            pVal                : esriSRUnitType*'''
        return super(IRasterMapModel, self).get_AngularUnit()
    def put_AngularUnit(self, pVal):
        '''Method IRasterMapModel.put_AngularUnit

           INPUT
            pVal                : esriSRUnitType'''
        return super(IRasterMapModel, self).put_AngularUnit(pVal)
    def get_LinearUnit(self):
        '''Method IRasterMapModel.get_LinearUnit

           OUTPUT
            pVal                : esriSRUnitType*'''
        return super(IRasterMapModel, self).get_LinearUnit()
    def put_LinearUnit(self, pVal):
        '''Method IRasterMapModel.put_LinearUnit

           INPUT
            pVal                : esriSRUnitType'''
        return super(IRasterMapModel, self).put_LinearUnit(pVal)
    def get_Spheroid(self):
        '''Method IRasterMapModel.get_Spheroid

           OUTPUT
            pVal                : ISpheroid**'''
        return super(IRasterMapModel, self).get_Spheroid()
    def put_Spheroid(self, pVal):
        '''Method IRasterMapModel.put_Spheroid

           INPUT
            pVal                : ISpheroid*'''
        return super(IRasterMapModel, self).put_Spheroid(pVal)
    def get_Datum(self):
        '''Method IRasterMapModel.get_Datum

           OUTPUT
            pVal                : IDatum**'''
        return super(IRasterMapModel, self).get_Datum()
    def put_Datum(self, pVal):
        '''Method IRasterMapModel.put_Datum

           INPUT
            pVal                : IDatum*'''
        return super(IRasterMapModel, self).put_Datum(pVal)
    def get_XForm(self):
        '''Method IRasterMapModel.get_XForm

           OUTPUT
            pVal                : IXForm**'''
        return super(IRasterMapModel, self).get_XForm()
    def put_XForm(self, pVal):
        '''Method IRasterMapModel.put_XForm

           INPUT
            pVal                : IXForm*'''
        return super(IRasterMapModel, self).put_XForm(pVal)
    def get_Extent(self):
        '''Method IRasterMapModel.get_Extent

           OUTPUT
            pVal                : IRect**'''
        return super(IRasterMapModel, self).get_Extent()
    def put_Extent(self, pVal):
        '''Method IRasterMapModel.put_Extent

           INPUT
            pVal                : IRect*'''
        return super(IRasterMapModel, self).put_Extent(pVal)
    def get_Projection(self):
        '''Method IRasterMapModel.get_Projection

           OUTPUT
            pVal                : IGeodeticProjection**'''
        return super(IRasterMapModel, self).get_Projection()
    def put_Projection(self, pVal):
        '''Method IRasterMapModel.put_Projection

           INPUT
            pVal                : IGeodeticProjection*'''
        return super(IRasterMapModel, self).put_Projection(pVal)
    def Convert2SR(self, factory):
        '''Method IRasterMapModel.Convert2SR

           INPUT
            factory             : ISpatialReferenceFactory*

           OUTPUT
            ppSR                : ISpatialReference**'''
        return super(IRasterMapModel, self).Convert2SR(factory)
    def Set2SR(self, pSR):
        '''Method IRasterMapModel.Set2SR

           INPUT
            pSR                 : ISpatialReference*'''
        return super(IRasterMapModel, self).Set2SR(pSR)
    def Touch(self, disp_id):
        '''Method IRasterMapModel.Touch

           INPUT
            disp_id             : long'''
        return super(IRasterMapModel, self).Touch(disp_id)
    AngularUnit = property(get_AngularUnit, put_AngularUnit, None)
    Datum = property(get_Datum, put_Datum, None)
    Extent = property(get_Extent, put_Extent, None)
    LinearUnit = property(get_LinearUnit, put_LinearUnit, None)
    Projection = property(get_Projection, put_Projection, None)
    Spheroid = property(get_Spheroid, put_Spheroid, None)
    XForm = property(get_XForm, put_XForm, None)

class IFormatData(_esriDataSourcesRaster.IFormatData):
    _IID = uuid.UUID('43e890d1-5ed9-11d3-80ea-00500462e955')
    def get_Title(self):
        '''Method IFormatData.get_Title

           OUTPUT
            pVal                : BSTR*'''
        return super(IFormatData, self).get_Title()
    def get_UITitle(self):
        '''Method IFormatData.get_UITitle

           OUTPUT
            pVal                : BSTR*'''
        return super(IFormatData, self).get_UITitle()
    def get_Order(self):
        '''Method IFormatData.get_Order

           OUTPUT
            pVal                : long*'''
        return super(IFormatData, self).get_Order()
    def get_Templ(self):
        '''Method IFormatData.get_Templ

           OUTPUT
            pVal                : BSTR*'''
        return super(IFormatData, self).get_Templ()
    def get_Pseudo(self):
        '''Method IFormatData.get_Pseudo

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IFormatData, self).get_Pseudo()
    def get_Extension(self):
        '''Method IFormatData.get_Extension

           OUTPUT
            pVal                : BSTR*'''
        return super(IFormatData, self).get_Extension()
    def get_ShortName(self):
        '''Method IFormatData.get_ShortName

           OUTPUT
            pVal                : BSTR*'''
        return super(IFormatData, self).get_ShortName()
    def get_Directory(self):
        '''Method IFormatData.get_Directory

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IFormatData, self).get_Directory()
    def get_Creatable(self):
        '''Method IFormatData.get_Creatable

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IFormatData, self).get_Creatable()
    def get_UserFile(self):
        '''Method IFormatData.get_UserFile

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IFormatData, self).get_UserFile()
    Creatable = property(get_Creatable, None, None)
    Directory = property(get_Directory, None, None)
    Extension = property(get_Extension, None, None)
    Order = property(get_Order, None, None)
    Pseudo = property(get_Pseudo, None, None)
    ShortName = property(get_ShortName, None, None)
    Templ = property(get_Templ, None, None)
    Title = property(get_Title, None, None)
    UITitle = property(get_UITitle, None, None)
    UserFile = property(get_UserFile, None, None)

class IFormatList(_esriDataSourcesRaster.IFormatList):
    _IID = uuid.UUID('34bd97e1-5ed8-11d3-80ea-00500462e955')

    def __init__(self, *args, **kw):
        super(IFormatList, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IFormatList.get_Count

           OUTPUT
            pVal                : long*'''
        return super(IFormatList, self).get_Count()
    def Item(self, index):
        '''Method IFormatList.Item

           INPUT
            index               : long

           OUTPUT
            fdata               : IFormatData**'''
        return super(IFormatList, self).Item(index)
    def get_CurrentRecord(self):
        '''Method IFormatList.get_CurrentRecord

           OUTPUT
            pVal                : long*'''
        return super(IFormatList, self).get_CurrentRecord()
    def put_CurrentRecord(self, pVal):
        '''Method IFormatList.put_CurrentRecord

           INPUT
            pVal                : long'''
        return super(IFormatList, self).put_CurrentRecord(pVal)
    Count = property(get_Count, None, None)
    CurrentRecord = property(get_CurrentRecord, put_CurrentRecord, None)

class IFormatTest(_esriDataSourcesRaster.IFormatTest):
    _IID = uuid.UUID('3d3e5180-6c5d-11d3-80ee-00500462e955')
    def FormatVerify(self, Path, Title):
        '''Method IFormatTest.FormatVerify

           INPUTS
            Path                : BSTR
            Title               : BSTR

           OUTPUT
            itis1               : VARIANT_BOOL*'''
        return super(IFormatTest, self).FormatVerify(Path, Title)
    def FormatIdentify(self, Path):
        '''Method IFormatTest.FormatIdentify

           INPUT
            Path                : BSTR

           OUTPUT
            Data                : IFormatData**'''
        return super(IFormatTest, self).FormatIdentify(Path)

class IContrastTable(_esriDataSourcesRaster.IContrastTable):
    _IID = uuid.UUID('7e7e6104-fa34-11d1-8d22-0000f8780535')

    def __init__(self, *args, **kw):
        super(IContrastTable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LUT(self):
        '''Method IContrastTable.get_LUT

           OUTPUT
            pVal                : VARIANT*'''
        return super(IContrastTable, self).get_LUT()
    def put_LUT(self, pVal):
        '''Method IContrastTable.put_LUT

           INPUT
            pVal                : VARIANT'''
        return super(IContrastTable, self).put_LUT(pVal)
    def TranslateValue(self, pixval):
        '''Method IContrastTable.TranslateValue

           INPUT
            pixval              : double

           OUTPUT
            contrast            : double*'''
        return super(IContrastTable, self).TranslateValue(pixval)
    def Bin(self, pixval):
        '''Method IContrastTable.Bin

           INPUT
            pixval              : double

           OUTPUT
            Bin                 : long*'''
        return super(IContrastTable, self).Bin(pixval)
    LUT = property(get_LUT, put_LUT, None)

class IRasterFormatControl(_esriDataSourcesRaster.IRasterFormatControl):
    _IID = uuid.UUID('07f9af37-9121-480b-82e9-760c96e16618')

    def __init__(self, *args, **kw):
        super(IRasterFormatControl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FormatSupportLevel(self):
        '''Method IRasterFormatControl.get_FormatSupportLevel

           OUTPUT
            pSupportLevel       : esriRasterFormatSupportLevel*'''
        return super(IRasterFormatControl, self).get_FormatSupportLevel()
    def put_FormatSupportLevel(self, pSupportLevel):
        '''Method IRasterFormatControl.put_FormatSupportLevel

           INPUT
            pSupportLevel       : esriRasterFormatSupportLevel'''
        return super(IRasterFormatControl, self).put_FormatSupportLevel(pSupportLevel)
    FormatSupportLevel = property(get_FormatSupportLevel, put_FormatSupportLevel, None)

class IRasterStatusEvent(_esriDataSourcesRaster.IRasterStatusEvent):
    _IID = uuid.UUID('3424b100-5836-11d4-8d9b-00c04f5b87b2')
    def Start(self, Step, Max):
        '''Method IRasterStatusEvent.Start

           INPUTS
            Step                : long
            Max                 : long'''
        return super(IRasterStatusEvent, self).Start(Step, Max)
    def Step(self, pos):
        '''Method IRasterStatusEvent.Step

           INPUT
            pos                 : long'''
        return super(IRasterStatusEvent, self).Step(pos)
    def Stop(self):
        '''Method IRasterStatusEvent.Stop'''
        return super(IRasterStatusEvent, self).Stop()

class IRasterStatusEvent2(_esriDataSourcesRaster.IRasterStatusEvent2):
    _IID = uuid.UUID('3872f080-b932-4a24-941d-21ec0d43f0b7')
    def Title(self, Title):
        '''Method IRasterStatusEvent2.Title

           INPUT
            Title               : BSTR'''
        return super(IRasterStatusEvent2, self).Title(Title)
    def Message(self, Message):
        '''Method IRasterStatusEvent2.Message

           INPUT
            Message             : BSTR'''
        return super(IRasterStatusEvent2, self).Message(Message)
    def Continue(self):
        '''Method IRasterStatusEvent2.Continue

           OUTPUT
            bContinue           : VARIANT_BOOL*'''
        return super(IRasterStatusEvent2, self).Continue()

class IRasterStatus(_esriDataSourcesRaster.IRasterStatus):
    _IID = uuid.UUID('6c58cb80-5834-11d4-8d9b-00c04f5b87b2')
    def FireStart(self, Min, Max):
        '''Method IRasterStatus.FireStart

           INPUTS
            Min                 : long
            Max                 : long'''
        return super(IRasterStatus, self).FireStart(Min, Max)
    def FireStep(self, pos):
        '''Method IRasterStatus.FireStep

           INPUT
            pos                 : long'''
        return super(IRasterStatus, self).FireStep(pos)
    def FireStop(self):
        '''Method IRasterStatus.FireStop'''
        return super(IRasterStatus, self).FireStop()

class IRasterStatus2(_esriDataSourcesRaster.IRasterStatus2):
    _IID = uuid.UUID('b3b4bcdd-b999-4dbe-8fec-7bcedce6daf3')
    def FireTitle(self, Title):
        '''Method IRasterStatus2.FireTitle

           INPUT
            Title               : BSTR'''
        return super(IRasterStatus2, self).FireTitle(Title)
    def FireMessage(self, Message):
        '''Method IRasterStatus2.FireMessage

           INPUT
            Message             : BSTR'''
        return super(IRasterStatus2, self).FireMessage(Message)
    def FireContinue(self):
        '''Method IRasterStatus2.FireContinue

           OUTPUT
            bContinue           : VARIANT_BOOL*'''
        return super(IRasterStatus2, self).FireContinue()

class IRasterStatus3(_esriDataSourcesRaster.IRasterStatus3):
    _IID = uuid.UUID('01c2b5dd-7586-42a6-984a-342a7a78fe8c')

    def __init__(self, *args, **kw):
        super(IRasterStatus3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Suspend(self, b):
        '''Method IRasterStatus3.put_Suspend

           INPUT
            b                   : VARIANT_BOOL'''
        return super(IRasterStatus3, self).put_Suspend(b)
    def get_Suspend(self):
        '''Method IRasterStatus3.get_Suspend

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterStatus3, self).get_Suspend()
    Suspend = property(get_Suspend, put_Suspend, None)

class IRasterDataManagementEvents(_esriDataSourcesRaster.IRasterDataManagementEvents):
    _IID = uuid.UUID('5901c657-d66f-4c40-8976-05b663cb38e2')
    def OnEvent(self, EventName, vParam):
        '''Method IRasterDataManagementEvents.OnEvent

           INPUTS
            EventName           : BSTR
            vParam              : VARIANT'''
        return super(IRasterDataManagementEvents, self).OnEvent(EventName, vParam)

class IImageFeaturePoint(_esriDataSourcesRaster.IImageFeaturePoint):
    _IID = uuid.UUID('313b1ac4-d7eb-4994-bebe-bd1ae67f8947')

    def __init__(self, *args, **kw):
        super(IImageFeaturePoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Location(self):
        '''Method IImageFeaturePoint.get_Location

           OUTPUT
            ppLocation          : IPoint**'''
        return super(IImageFeaturePoint, self).get_Location()
    def putref_Location(self, ppLocation):
        '''Method IImageFeaturePoint.putref_Location

           INPUT
            ppLocation          : IPoint*'''
        return super(IImageFeaturePoint, self).putref_Location(ppLocation)
    def get_Signature(self):
        '''Method IImageFeaturePoint.get_Signature

           OUTPUT
            pSignature          : VARIANT*'''
        return super(IImageFeaturePoint, self).get_Signature()
    def put_Signature(self, pSignature):
        '''Method IImageFeaturePoint.put_Signature

           INPUT
            pSignature          : VARIANT'''
        return super(IImageFeaturePoint, self).put_Signature(pSignature)
    Location = property(get_Location, putref_Location, None)
    Signature = property(get_Signature, put_Signature, None)

class IImageFeaturePoints(_esriDataSourcesRaster.IImageFeaturePoints):
    _IID = uuid.UUID('3fd7cb64-f18f-4380-b128-135206147e75')

    def __init__(self, *args, **kw):
        super(IImageFeaturePoints, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IImageFeaturePoints.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IImageFeaturePoints, self).get_Count()
    def get_Element(self, index):
        '''Method IImageFeaturePoints.get_Element

           INPUT
            index               : long

           OUTPUT
            ppFeaturePoint      : IImageFeaturePoint**'''
        return super(IImageFeaturePoints, self).get_Element(index)
    def Remove(self, index):
        '''Method IImageFeaturePoints.Remove

           INPUT
            index               : long'''
        return super(IImageFeaturePoints, self).Remove(index)
    def RemoveAll(self):
        '''Method IImageFeaturePoints.RemoveAll'''
        return super(IImageFeaturePoints, self).RemoveAll()
    def Add(self, pFeaturePoint):
        '''Method IImageFeaturePoints.Add

           INPUT
            pFeaturePoint       : IImageFeaturePoint*'''
        return super(IImageFeaturePoints, self).Add(pFeaturePoint)
    def Insert(self, index, pFeaturePoint):
        '''Method IImageFeaturePoints.Insert

           INPUTS
            index               : long
            pFeaturePoint       : IImageFeaturePoint*'''
        return super(IImageFeaturePoints, self).Insert(index, pFeaturePoint)
    def get_ImageID(self):
        '''Method IImageFeaturePoints.get_ImageID

           OUTPUT
            pImageID            : long*'''
        return super(IImageFeaturePoints, self).get_ImageID()
    def put_ImageID(self, pImageID):
        '''Method IImageFeaturePoints.put_ImageID

           INPUT
            pImageID            : long'''
        return super(IImageFeaturePoints, self).put_ImageID(pImageID)
    def get_Extent(self):
        '''Method IImageFeaturePoints.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IImageFeaturePoints, self).get_Extent()
    def put_Extent(self, ppExtent):
        '''Method IImageFeaturePoints.put_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IImageFeaturePoints, self).put_Extent(ppExtent)
    def get_CellSize(self):
        '''Method IImageFeaturePoints.get_CellSize

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IImageFeaturePoints, self).get_CellSize()
    def put_CellSize(self, ppCellsize):
        '''Method IImageFeaturePoints.put_CellSize

           INPUT
            ppCellsize          : IPnt*'''
        return super(IImageFeaturePoints, self).put_CellSize(ppCellsize)
    def MapToPixel(self, pFeaturePoint):
        '''Method IImageFeaturePoints.MapToPixel

           INPUT
            pFeaturePoint       : IImageFeaturePoint*

           OUTPUTS
            Column              : double*
            Row                 : double*'''
        return super(IImageFeaturePoints, self).MapToPixel(pFeaturePoint)
    def PixelToMap(self, Column, Row, pFeaturePoint):
        '''Method IImageFeaturePoints.PixelToMap

           INPUTS
            Column              : double
            Row                 : double
            pFeaturePoint       : IImageFeaturePoint*'''
        return super(IImageFeaturePoints, self).PixelToMap(Column, Row, pFeaturePoint)
    CellSize = property(get_CellSize, put_CellSize, None)
    Count = property(get_Count, None, None)
    Extent = property(get_Extent, put_Extent, None)
    ImageID = property(get_ImageID, put_ImageID, None)
    Element = IndexProperty(get_Element, None)

class IImageMatchPoint(_esriDataSourcesRaster.IImageMatchPoint):
    _IID = uuid.UUID('652a79e7-758a-4f83-b7a5-f3fc8507c9df')

    def __init__(self, *args, **kw):
        super(IImageMatchPoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_From(self):
        '''Method IImageMatchPoint.get_From

           OUTPUT
            ppFrom              : IImageFeaturePoint**'''
        return super(IImageMatchPoint, self).get_From()
    def putref_From(self, ppFrom):
        '''Method IImageMatchPoint.putref_From

           INPUT
            ppFrom              : IImageFeaturePoint*'''
        return super(IImageMatchPoint, self).putref_From(ppFrom)
    def get_To(self):
        '''Method IImageMatchPoint.get_To

           OUTPUT
            ppTo                : IImageFeaturePoint**'''
        return super(IImageMatchPoint, self).get_To()
    def putref_To(self, ppTo):
        '''Method IImageMatchPoint.putref_To

           INPUT
            ppTo                : IImageFeaturePoint*'''
        return super(IImageMatchPoint, self).putref_To(ppTo)
    def get_Score(self):
        '''Method IImageMatchPoint.get_Score

           OUTPUT
            pScore              : double*'''
        return super(IImageMatchPoint, self).get_Score()
    def put_Score(self, pScore):
        '''Method IImageMatchPoint.put_Score

           INPUT
            pScore              : double'''
        return super(IImageMatchPoint, self).put_Score(pScore)
    From = property(get_From, putref_From, None)
    Score = property(get_Score, put_Score, None)
    To = property(get_To, putref_To, None)

class IImageMatchPoints(_esriDataSourcesRaster.IImageMatchPoints):
    _IID = uuid.UUID('f690343b-abbd-418b-b135-0ef2602840fb')

    def __init__(self, *args, **kw):
        super(IImageMatchPoints, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method IImageMatchPoints.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IImageMatchPoints, self).get_Count()
    def get_Element(self, index):
        '''Method IImageMatchPoints.get_Element

           INPUT
            index               : long

           OUTPUT
            ppMatchPoint        : IImageMatchPoint**'''
        return super(IImageMatchPoints, self).get_Element(index)
    def Remove(self, index):
        '''Method IImageMatchPoints.Remove

           INPUT
            index               : long'''
        return super(IImageMatchPoints, self).Remove(index)
    def RemoveAll(self):
        '''Method IImageMatchPoints.RemoveAll'''
        return super(IImageMatchPoints, self).RemoveAll()
    def Add(self, pMatchPoint):
        '''Method IImageMatchPoints.Add

           INPUT
            pMatchPoint         : IImageMatchPoint*'''
        return super(IImageMatchPoints, self).Add(pMatchPoint)
    def Insert(self, index, pMatchPoint):
        '''Method IImageMatchPoints.Insert

           INPUTS
            index               : long
            pMatchPoint         : IImageMatchPoint*'''
        return super(IImageMatchPoints, self).Insert(index, pMatchPoint)
    def get_FromImageID(self):
        '''Method IImageMatchPoints.get_FromImageID

           OUTPUT
            pImageID            : long*'''
        return super(IImageMatchPoints, self).get_FromImageID()
    def put_FromImageID(self, pImageID):
        '''Method IImageMatchPoints.put_FromImageID

           INPUT
            pImageID            : long'''
        return super(IImageMatchPoints, self).put_FromImageID(pImageID)
    def get_ToImageID(self):
        '''Method IImageMatchPoints.get_ToImageID

           OUTPUT
            pImageID            : long*'''
        return super(IImageMatchPoints, self).get_ToImageID()
    def put_ToImageID(self, pImageID):
        '''Method IImageMatchPoints.put_ToImageID

           INPUT
            pImageID            : long'''
        return super(IImageMatchPoints, self).put_ToImageID(pImageID)
    Count = property(get_Count, None, None)
    FromImageID = property(get_FromImageID, put_FromImageID, None)
    ToImageID = property(get_ToImageID, put_ToImageID, None)
    Element = IndexProperty(get_Element, None)

class ITiePoint(_esriDataSourcesRaster.ITiePoint):
    _IID = uuid.UUID('d022064b-b03a-43f2-9a38-0378e16d7258')

    def __init__(self, *args, **kw):
        super(ITiePoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PointID(self):
        '''Method ITiePoint.get_PointID

           OUTPUT
            pPointID            : long*'''
        return super(ITiePoint, self).get_PointID()
    def put_PointID(self, pPointID):
        '''Method ITiePoint.put_PointID

           INPUT
            pPointID            : long'''
        return super(ITiePoint, self).put_PointID(pPointID)
    def get_ImageID(self):
        '''Method ITiePoint.get_ImageID

           OUTPUT
            pImageID            : long*'''
        return super(ITiePoint, self).get_ImageID()
    def put_ImageID(self, pImageID):
        '''Method ITiePoint.put_ImageID

           INPUT
            pImageID            : long'''
        return super(ITiePoint, self).put_ImageID(pImageID)
    def get_Location(self):
        '''Method ITiePoint.get_Location

           OUTPUT
            ppLocation          : IPoint**'''
        return super(ITiePoint, self).get_Location()
    def putref_Location(self, ppLocation):
        '''Method ITiePoint.putref_Location

           INPUT
            ppLocation          : IPoint*'''
        return super(ITiePoint, self).putref_Location(ppLocation)
    def get_Score(self):
        '''Method ITiePoint.get_Score

           OUTPUT
            pScore              : double*'''
        return super(ITiePoint, self).get_Score()
    def put_Score(self, pScore):
        '''Method ITiePoint.put_Score

           INPUT
            pScore              : double'''
        return super(ITiePoint, self).put_Score(pScore)
    def Equals(self, pTiePoint):
        '''Method ITiePoint.Equals

           INPUT
            pTiePoint           : ITiePoint*'''
        return super(ITiePoint, self).Equals(pTiePoint)
    ImageID = property(get_ImageID, put_ImageID, None)
    Location = property(get_Location, putref_Location, None)
    PointID = property(get_PointID, put_PointID, None)
    Score = property(get_Score, put_Score, None)

class ITiePointCollection(_esriDataSourcesRaster.ITiePointCollection):
    _IID = uuid.UUID('7467babc-08f2-4696-97ac-1c3a6798c2f4')
    def get_Count(self):
        '''Method ITiePointCollection.get_Count

           OUTPUT
            pCount              : long*'''
        return super(ITiePointCollection, self).get_Count()
    def get_Point(self, index):
        '''Method ITiePointCollection.get_Point

           INPUT
            index               : long

           OUTPUT
            ppPoint             : ITiePoint**'''
        return super(ITiePointCollection, self).get_Point(index)
    def Append(self, pPoint):
        '''Method ITiePointCollection.Append

           INPUT
            pPoint              : ITiePoint*'''
        return super(ITiePointCollection, self).Append(pPoint)
    def Replace(self, index, pPoint):
        '''Method ITiePointCollection.Replace

           INPUTS
            index               : long
            pPoint              : ITiePoint*'''
        return super(ITiePointCollection, self).Replace(index, pPoint)
    def Insert(self, index, pPoint):
        '''Method ITiePointCollection.Insert

           INPUTS
            index               : long
            pPoint              : ITiePoint*'''
        return super(ITiePointCollection, self).Insert(index, pPoint)
    def Remove(self, index):
        '''Method ITiePointCollection.Remove

           INPUT
            index               : long'''
        return super(ITiePointCollection, self).Remove(index)
    def RemoveAll(self):
        '''Method ITiePointCollection.RemoveAll'''
        return super(ITiePointCollection, self).RemoveAll()
    def Add(self, pPoint):
        '''Method ITiePointCollection.Add

           INPUT
            pPoint              : ITiePoint*'''
        return super(ITiePointCollection, self).Add(pPoint)
    Count = property(get_Count, None, None)
    Point = IndexProperty(get_Point, None)

class ITiePointOperation(_esriDataSourcesRaster.ITiePointOperation):
    _IID = uuid.UUID('3e402866-3f8d-4b54-add2-ab6d5bb0f0e8')
    def Init(self, pTiePoints):
        '''Method ITiePointOperation.Init

           INPUT
            pTiePoints          : ITable*'''
        return super(ITiePointOperation, self).Init(pTiePoints)
    def SaveTo(self, pTiePoints):
        '''Method ITiePointOperation.SaveTo

           INPUT
            pTiePoints          : ITable*'''
        return super(ITiePointOperation, self).SaveTo(pTiePoints)
    def AddPoints(self, pMatchPoints):
        '''Method ITiePointOperation.AddPoints

           INPUT
            pMatchPoints        : IImageMatchPoints*'''
        return super(ITiePointOperation, self).AddPoints(pMatchPoints)
    def Compute(self, pCatalog, pQueryFilter, pTiePoints):
        '''Method ITiePointOperation.Compute

           INPUTS
            pCatalog            : IUnknown*
            pQueryFilter        : IQueryFilter*
            pTiePoints          : ITable*'''
        return super(ITiePointOperation, self).Compute(pCatalog, pQueryFilter, pTiePoints)

class IImageRegistration(_esriDataSourcesRaster.IImageRegistration):
    _IID = uuid.UUID('ec48c884-ebeb-4d94-849e-f1533a0a32da')

    def __init__(self, *args, **kw):
        super(IImageRegistration, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Refinement(self):
        '''Method IImageRegistration.get_Refinement

           OUTPUT
            pRefinement         : esriMatchPointRefinementType*'''
        return super(IImageRegistration, self).get_Refinement()
    def put_Refinement(self, pRefinement):
        '''Method IImageRegistration.put_Refinement

           INPUT
            pRefinement         : esriMatchPointRefinementType'''
        return super(IImageRegistration, self).put_Refinement(pRefinement)
    def get_Parameters(self):
        '''Method IImageRegistration.get_Parameters

           OUTPUT
            ppParameters        : IPropertySet**'''
        return super(IImageRegistration, self).get_Parameters()
    def putref_Parameters(self, ppParameters):
        '''Method IImageRegistration.putref_Parameters

           INPUT
            ppParameters        : IPropertySet*'''
        return super(IImageRegistration, self).putref_Parameters(ppParameters)
    def GetParameter(self, Name):
        '''Method IImageRegistration.GetParameter

           INPUT
            Name                : BSTR

           OUTPUT
            pValue              : VARIANT*'''
        return super(IImageRegistration, self).GetParameter(Name)
    def SetParameter(self, Name, Value):
        '''Method IImageRegistration.SetParameter

           INPUTS
            Name                : BSTR
            Value               : VARIANT'''
        return super(IImageRegistration, self).SetParameter(Name, Value)
    def get_BlockingType(self):
        '''Method IImageRegistration.get_BlockingType

           OUTPUT
            pBlockingType       : esriImageBlockingType*'''
        return super(IImageRegistration, self).get_BlockingType()
    def put_BlockingType(self, pBlockingType):
        '''Method IImageRegistration.put_BlockingType

           INPUT
            pBlockingType       : esriImageBlockingType'''
        return super(IImageRegistration, self).put_BlockingType(pBlockingType)
    def get_ThreadCount(self):
        '''Method IImageRegistration.get_ThreadCount

           OUTPUT
            pThreadCount        : long*'''
        return super(IImageRegistration, self).get_ThreadCount()
    def put_ThreadCount(self, pThreadCount):
        '''Method IImageRegistration.put_ThreadCount

           INPUT
            pThreadCount        : long'''
        return super(IImageRegistration, self).put_ThreadCount(pThreadCount)
    def get_ServerObjectName(self):
        '''Method IImageRegistration.get_ServerObjectName

           OUTPUT
            ppName              : IName**'''
        return super(IImageRegistration, self).get_ServerObjectName()
    def putref_ServerObjectName(self, ppName):
        '''Method IImageRegistration.putref_ServerObjectName

           INPUT
            ppName              : IName*'''
        return super(IImageRegistration, self).putref_ServerObjectName(ppName)
    def ExtractFeaturePoints(self, pImage):
        '''Method IImageRegistration.ExtractFeaturePoints

           INPUT
            pImage              : IRaster*

           OUTPUT
            ppFeaturePoints     : IImageFeaturePoints**'''
        return super(IImageRegistration, self).ExtractFeaturePoints(pImage)
    def MatchFeaturePoints(self, pFeaturePoints, pOthers):
        '''Method IImageRegistration.MatchFeaturePoints

           INPUTS
            pFeaturePoints      : IImageFeaturePoints*
            pOthers             : IImageFeaturePoints*

           OUTPUT
            ppMatchPoints       : IImageMatchPoints**'''
        return super(IImageRegistration, self).MatchFeaturePoints(pFeaturePoints, pOthers)
    def ExtractMatchPoints(self, pImage, pRefImage):
        '''Method IImageRegistration.ExtractMatchPoints

           INPUTS
            pImage              : IRaster*
            pRefImage           : IRaster*

           OUTPUT
            ppMatchPoints       : IImageMatchPoints**'''
        return super(IImageRegistration, self).ExtractMatchPoints(pImage, pRefImage)
    def ExtractAllMatchPoints(self, pImage, pRefImages):
        '''Method IImageRegistration.ExtractAllMatchPoints

           INPUTS
            pImage              : IRaster*
            pRefImages          : IArray*

           OUTPUT
            ppMatchPoints       : IImageMatchPoints**'''
        return super(IImageRegistration, self).ExtractAllMatchPoints(pImage, pRefImages)
    def FindClosestFeaturePoint(self, pImage, pPoint):
        '''Method IImageRegistration.FindClosestFeaturePoint

           INPUTS
            pImage              : IRaster*
            pPoint              : IPoint*

           OUTPUT
            ppFeaturePoint      : IImageFeaturePoint**'''
        return super(IImageRegistration, self).FindClosestFeaturePoint(pImage, pPoint)
    def RefineMatchPoints(self, pImage, pRefImage):
        '''Method IImageRegistration.RefineMatchPoints

           INPUTS
            pImage              : IRaster*
            pRefImage           : IRaster*

           OUTPUT
            pMatchPoints        : IImageMatchPoints*'''
        return super(IImageRegistration, self).RefineMatchPoints(pImage, pRefImage)
    def CreateFeaturePointTable(self, pWorkspace, Name, pSpatialReference, configKeyword):
        '''Method IImageRegistration.CreateFeaturePointTable

           INPUTS
            pWorkspace          : IWorkspace*
            Name                : BSTR
            pSpatialReference   : ISpatialReference*
            configKeyword       : BSTR

           OUTPUT
            ppFeaturePointTable : ITable**'''
        return super(IImageRegistration, self).CreateFeaturePointTable(pWorkspace, Name, pSpatialReference, configKeyword)
    def CreateControlPointTable(self, pWorkspace, Name, pSpatialReference, configKeyword):
        '''Method IImageRegistration.CreateControlPointTable

           INPUTS
            pWorkspace          : IWorkspace*
            Name                : BSTR
            pSpatialReference   : ISpatialReference*
            configKeyword       : BSTR

           OUTPUT
            ppControlPointTable : ITable**'''
        return super(IImageRegistration, self).CreateControlPointTable(pWorkspace, Name, pSpatialReference, configKeyword)
    def CreateSolutionTable(self, pWorkspace, Name, pSpatialReference, configKeyword):
        '''Method IImageRegistration.CreateSolutionTable

           INPUTS
            pWorkspace          : IWorkspace*
            Name                : BSTR
            pSpatialReference   : ISpatialReference*
            configKeyword       : BSTR

           OUTPUT
            ppSolutionTable     : ITable**'''
        return super(IImageRegistration, self).CreateSolutionTable(pWorkspace, Name, pSpatialReference, configKeyword)
    def ComputeFeaturePoints(self, pCatalog, pQueryFilter, pAOI, pAOIQueryFilter, pFeaturePointTable, pTrackCancel):
        '''Method IImageRegistration.ComputeFeaturePoints

           INPUTS
            pCatalog            : IDataset*
            pQueryFilter        : IQueryFilter*
            pAOI                : ITable*
            pAOIQueryFilter     : IQueryFilter*
            pFeaturePointTable  : ITable*
            pTrackCancel        : ITrackCancel*'''
        return super(IImageRegistration, self).ComputeFeaturePoints(pCatalog, pQueryFilter, pAOI, pAOIQueryFilter, pFeaturePointTable, pTrackCancel)
    def ComputeTiePoints(self, pFeaturePointTable, pQueryFilter, pTiePointTable, pTrackCancel):
        '''Method IImageRegistration.ComputeTiePoints

           INPUTS
            pFeaturePointTable  : ITable*
            pQueryFilter        : IQueryFilter*
            pTiePointTable      : ITable*
            pTrackCancel        : ITrackCancel*'''
        return super(IImageRegistration, self).ComputeTiePoints(pFeaturePointTable, pQueryFilter, pTiePointTable, pTrackCancel)
    def ComputeLinks(self, pControlPointTable, pQueryFilter, pSolutionTable, pTrackCancel):
        '''Method IImageRegistration.ComputeLinks

           INPUTS
            pControlPointTable  : ITable*
            pQueryFilter        : IQueryFilter*
            pSolutionTable      : ITable*
            pTrackCancel        : ITrackCancel*'''
        return super(IImageRegistration, self).ComputeLinks(pControlPointTable, pQueryFilter, pSolutionTable, pTrackCancel)
    def ComputeAdjustments(self, pCatalog, pQueryFilter, pSolutionTable, Order, pTrackCancel):
        '''Method IImageRegistration.ComputeAdjustments

           INPUTS
            pCatalog            : IDataset*
            pQueryFilter        : IQueryFilter*
            pSolutionTable      : ITable*
            Order               : long
            pTrackCancel        : ITrackCancel*'''
        return super(IImageRegistration, self).ComputeAdjustments(pCatalog, pQueryFilter, pSolutionTable, Order, pTrackCancel)
    def Adjust(self, pCatalog, pQueryFilter, Type, pSolutionTable, pTrackCancel):
        '''Method IImageRegistration.Adjust

           INPUTS
            pCatalog            : IDataset*
            pQueryFilter        : IQueryFilter*
            Type                : esriImageAdjustmentType
            pSolutionTable      : ITable*
            pTrackCancel        : ITrackCancel*'''
        return super(IImageRegistration, self).Adjust(pCatalog, pQueryFilter, Type, pSolutionTable, pTrackCancel)
    BlockingType = property(get_BlockingType, put_BlockingType, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    Refinement = property(get_Refinement, put_Refinement, None)
    ServerObjectName = property(get_ServerObjectName, putref_ServerObjectName, None)
    ThreadCount = property(get_ThreadCount, put_ThreadCount, None)

class IRasterHistogram(_esriDataSourcesRaster.IRasterHistogram):
    _IID = uuid.UUID('7aca3d0b-0629-11d2-8d24-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRasterHistogram, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Counts(self):
        '''Method IRasterHistogram.get_Counts

           OUTPUT
            pVal                : VARIANT*'''
        return super(IRasterHistogram, self).get_Counts()
    def put_Counts(self, pVal):
        '''Method IRasterHistogram.put_Counts

           INPUT
            pVal                : VARIANT'''
        return super(IRasterHistogram, self).put_Counts(pVal)
    def Bin(self, pixval):
        '''Method IRasterHistogram.Bin

           INPUT
            pixval              : double

           OUTPUT
            Bin                 : long*'''
        return super(IRasterHistogram, self).Bin(pixval)
    def get_BinFunction(self):
        '''Method IRasterHistogram.get_BinFunction

           OUTPUT
            pVal                : IBinFunction**'''
        return super(IRasterHistogram, self).get_BinFunction()
    BinFunction = property(get_BinFunction, None, None)
    Counts = property(get_Counts, put_Counts, None)

class IPixelResampler(_esriDataSourcesRaster.IPixelResampler):
    _IID = uuid.UUID('25c98a24-1331-49a0-bcf2-4f5155e1e016')

    def __init__(self, *args, **kw):
        super(IPixelResampler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SupportLinearScaling(self):
        '''Method IPixelResampler.get_SupportLinearScaling

           OUTPUT
            pSupportLinearScaling: VARIANT_BOOL*'''
        return super(IPixelResampler, self).get_SupportLinearScaling()
    def get_LinearScaling(self):
        '''Method IPixelResampler.get_LinearScaling

           OUTPUT
            pLinearScaling      : VARIANT_BOOL*'''
        return super(IPixelResampler, self).get_LinearScaling()
    def put_LinearScaling(self, pLinearScaling):
        '''Method IPixelResampler.put_LinearScaling

           INPUT
            pLinearScaling      : VARIANT_BOOL'''
        return super(IPixelResampler, self).put_LinearScaling(pLinearScaling)
    def get_WindowSize(self):
        '''Method IPixelResampler.get_WindowSize

           OUTPUT
            pNumPixels          : long*'''
        return super(IPixelResampler, self).get_WindowSize()
    def get_DownSampling(self):
        '''Method IPixelResampler.get_DownSampling

           OUTPUT
            pDownSampling       : VARIANT_BOOL*'''
        return super(IPixelResampler, self).get_DownSampling()
    def Resample(self, iCol, iRow, nCols, nRows, points, ulx, uly, dx, dy, pSrcPixelBlock, pDstPixelBlock):
        '''Method IPixelResampler.Resample

           INPUTS
            iCol                : long
            iRow                : long
            nCols               : long
            nRows               : long
            points              : WKSPoint*
            ulx                 : double
            uly                 : double
            dx                  : double
            dy                  : double
            pSrcPixelBlock      : IPixelBlock*
            pDstPixelBlock      : IPixelBlock*'''
        return super(IPixelResampler, self).Resample(iCol, iRow, nCols, nRows, points, ulx, uly, dx, dy, pSrcPixelBlock, pDstPixelBlock)
    DownSampling = property(get_DownSampling, None, None)
    LinearScaling = property(get_LinearScaling, put_LinearScaling, None)
    SupportLinearScaling = property(get_SupportLinearScaling, None, None)
    WindowSize = property(get_WindowSize, None, None)

class IRasterXformer(_esriDataSourcesRaster.IRasterXformer):
    _IID = uuid.UUID('22803c42-60f8-46b6-9b2c-b0a282cd7324')

    def __init__(self, *args, **kw):
        super(IRasterXformer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ApproximationTolerance(self):
        '''Method IRasterXformer.get_ApproximationTolerance

           OUTPUT
            pNumPixels          : double*'''
        return super(IRasterXformer, self).get_ApproximationTolerance()
    def put_ApproximationTolerance(self, pNumPixels):
        '''Method IRasterXformer.put_ApproximationTolerance

           INPUT
            pNumPixels          : double'''
        return super(IRasterXformer, self).put_ApproximationTolerance(pNumPixels)
    def get_PixelResampler(self):
        '''Method IRasterXformer.get_PixelResampler

           OUTPUT
            ppResampler         : IPixelResampler**'''
        return super(IRasterXformer, self).get_PixelResampler()
    def putref_PixelResampler(self, ppResampler):
        '''Method IRasterXformer.putref_PixelResampler

           INPUT
            ppResampler         : IPixelResampler*'''
        return super(IRasterXformer, self).putref_PixelResampler(ppResampler)
    def put_Raster(self, _arg1):
        '''Method IRasterXformer.put_Raster

           INPUT
            _arg1               : IRaster*'''
        return super(IRasterXformer, self).put_Raster(_arg1)
    def Update(self, pRaster):
        '''Method IRasterXformer.Update

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterXformer, self).Update(pRaster)
    def Read(self, tlc, pPixelBlock):
        '''Method IRasterXformer.Read

           INPUTS
            tlc                 : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(IRasterXformer, self).Read(tlc, pPixelBlock)
    ApproximationTolerance = property(get_ApproximationTolerance, put_ApproximationTolerance, None)
    PixelResampler = property(get_PixelResampler, putref_PixelResampler, None)
    Raster = property(None, put_Raster, None)

class IRasterInfo(_esriDataSourcesRaster.IRasterInfo):
    _IID = uuid.UUID('94058b85-acf1-49ba-a2a7-a9ccc6f4c26a')

    def __init__(self, *args, **kw):
        super(IRasterInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Origin(self):
        '''Method IRasterInfo.get_Origin

           OUTPUT
            ppOrigin            : IPoint**'''
        return super(IRasterInfo, self).get_Origin()
    def putref_Origin(self, ppOrigin):
        '''Method IRasterInfo.putref_Origin

           INPUT
            ppOrigin            : IPoint*'''
        return super(IRasterInfo, self).putref_Origin(ppOrigin)
    def get_BlockWidth(self):
        '''Method IRasterInfo.get_BlockWidth

           OUTPUT
            pWidth              : long*'''
        return super(IRasterInfo, self).get_BlockWidth()
    def put_BlockWidth(self, pWidth):
        '''Method IRasterInfo.put_BlockWidth

           INPUT
            pWidth              : long'''
        return super(IRasterInfo, self).put_BlockWidth(pWidth)
    def get_BlockHeight(self):
        '''Method IRasterInfo.get_BlockHeight

           OUTPUT
            pHeight             : long*'''
        return super(IRasterInfo, self).get_BlockHeight()
    def put_BlockHeight(self, pHeight):
        '''Method IRasterInfo.put_BlockHeight

           INPUT
            pHeight             : long'''
        return super(IRasterInfo, self).put_BlockHeight(pHeight)
    def get_FirstPyramidLevel(self):
        '''Method IRasterInfo.get_FirstPyramidLevel

           OUTPUT
            pLevel              : long*'''
        return super(IRasterInfo, self).get_FirstPyramidLevel()
    def put_FirstPyramidLevel(self, pLevel):
        '''Method IRasterInfo.put_FirstPyramidLevel

           INPUT
            pLevel              : long'''
        return super(IRasterInfo, self).put_FirstPyramidLevel(pLevel)
    def get_MaximumPyramidLevel(self):
        '''Method IRasterInfo.get_MaximumPyramidLevel

           OUTPUT
            pLevel              : long*'''
        return super(IRasterInfo, self).get_MaximumPyramidLevel()
    def put_MaximumPyramidLevel(self, pLevel):
        '''Method IRasterInfo.put_MaximumPyramidLevel

           INPUT
            pLevel              : long'''
        return super(IRasterInfo, self).put_MaximumPyramidLevel(pLevel)
    def get_GeodataXform(self):
        '''Method IRasterInfo.get_GeodataXform

           OUTPUT
            ppXf                : IGeodataXform**'''
        return super(IRasterInfo, self).get_GeodataXform()
    def putref_GeodataXform(self, ppXf):
        '''Method IRasterInfo.putref_GeodataXform

           INPUT
            ppXf                : IGeodataXform*'''
        return super(IRasterInfo, self).putref_GeodataXform(ppXf)
    def get_SpatialReference(self):
        '''Method IRasterInfo.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IRasterInfo, self).get_SpatialReference()
    def get_Extent(self):
        '''Method IRasterInfo.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterInfo, self).get_Extent()
    def put_Extent(self, ppExtent):
        '''Method IRasterInfo.put_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IRasterInfo, self).put_Extent(ppExtent)
    def get_NativeSpatialReference(self):
        '''Method IRasterInfo.get_NativeSpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IRasterInfo, self).get_NativeSpatialReference()
    def putref_NativeSpatialReference(self, ppSpatialReference):
        '''Method IRasterInfo.putref_NativeSpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IRasterInfo, self).putref_NativeSpatialReference(ppSpatialReference)
    def get_NativeExtent(self):
        '''Method IRasterInfo.get_NativeExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterInfo, self).get_NativeExtent()
    def put_NativeExtent(self, ppExtent):
        '''Method IRasterInfo.put_NativeExtent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IRasterInfo, self).put_NativeExtent(ppExtent)
    def get_CellSize(self):
        '''Method IRasterInfo.get_CellSize

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IRasterInfo, self).get_CellSize()
    def put_CellSize(self, ppCellsize):
        '''Method IRasterInfo.put_CellSize

           INPUT
            ppCellsize          : IPnt*'''
        return super(IRasterInfo, self).put_CellSize(ppCellsize)
    def get_Width(self):
        '''Method IRasterInfo.get_Width

           OUTPUT
            pWidth              : long*'''
        return super(IRasterInfo, self).get_Width()
    def get_Height(self):
        '''Method IRasterInfo.get_Height

           OUTPUT
            pHeight             : long*'''
        return super(IRasterInfo, self).get_Height()
    def get_BandCount(self):
        '''Method IRasterInfo.get_BandCount

           OUTPUT
            pCount              : long*'''
        return super(IRasterInfo, self).get_BandCount()
    def put_BandCount(self, pCount):
        '''Method IRasterInfo.put_BandCount

           INPUT
            pCount              : long'''
        return super(IRasterInfo, self).put_BandCount(pCount)
    def get_PixelType(self):
        '''Method IRasterInfo.get_PixelType

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IRasterInfo, self).get_PixelType()
    def put_PixelType(self, pPixelType):
        '''Method IRasterInfo.put_PixelType

           INPUT
            pPixelType          : rstPixelType'''
        return super(IRasterInfo, self).put_PixelType(pPixelType)
    def get_NoData(self):
        '''Method IRasterInfo.get_NoData

           OUTPUT
            pvNoData            : VARIANT*'''
        return super(IRasterInfo, self).get_NoData()
    def put_NoData(self, pvNoData):
        '''Method IRasterInfo.put_NoData

           INPUT
            pvNoData            : VARIANT'''
        return super(IRasterInfo, self).put_NoData(pvNoData)
    def get_Resampling(self):
        '''Method IRasterInfo.get_Resampling

           OUTPUT
            pResampling         : VARIANT_BOOL*'''
        return super(IRasterInfo, self).get_Resampling()
    def put_Resampling(self, pResampling):
        '''Method IRasterInfo.put_Resampling

           INPUT
            pResampling         : VARIANT_BOOL'''
        return super(IRasterInfo, self).put_Resampling(pResampling)
    def get_SupportBandSelection(self):
        '''Method IRasterInfo.get_SupportBandSelection

           OUTPUT
            pSupportBandSelection: VARIANT_BOOL*'''
        return super(IRasterInfo, self).get_SupportBandSelection()
    def put_SupportBandSelection(self, pSupportBandSelection):
        '''Method IRasterInfo.put_SupportBandSelection

           INPUT
            pSupportBandSelection: VARIANT_BOOL'''
        return super(IRasterInfo, self).put_SupportBandSelection(pSupportBandSelection)
    def get_Format(self):
        '''Method IRasterInfo.get_Format

           OUTPUT
            pFormat             : BSTR*'''
        return super(IRasterInfo, self).get_Format()
    def put_Format(self, pFormat):
        '''Method IRasterInfo.put_Format

           INPUT
            pFormat             : BSTR'''
        return super(IRasterInfo, self).put_Format(pFormat)
    BandCount = property(get_BandCount, put_BandCount, None)
    BlockHeight = property(get_BlockHeight, put_BlockHeight, None)
    BlockWidth = property(get_BlockWidth, put_BlockWidth, None)
    CellSize = property(get_CellSize, put_CellSize, None)
    Extent = property(get_Extent, put_Extent, None)
    FirstPyramidLevel = property(get_FirstPyramidLevel, put_FirstPyramidLevel, None)
    Format = property(get_Format, put_Format, None)
    GeodataXform = property(get_GeodataXform, putref_GeodataXform, None)
    Height = property(get_Height, None, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, put_MaximumPyramidLevel, None)
    NativeExtent = property(get_NativeExtent, put_NativeExtent, None)
    NativeSpatialReference = property(get_NativeSpatialReference, putref_NativeSpatialReference, None)
    NoData = property(get_NoData, put_NoData, None)
    Origin = property(get_Origin, putref_Origin, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SpatialReference = property(get_SpatialReference, None, None)
    SupportBandSelection = property(get_SupportBandSelection, put_SupportBandSelection, None)
    Width = property(get_Width, None, None)

class IRasterBandColormap(_esriDataSourcesRaster.IRasterBandColormap):
    _IID = uuid.UUID('9d6c37ee-982a-4d99-8ba1-4ebdd6d772f8')

    def __init__(self, *args, **kw):
        super(IRasterBandColormap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def HasColormap(self):
        '''Method IRasterBandColormap.HasColormap

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterBandColormap, self).HasColormap()
    def get_Colormap(self):
        '''Method IRasterBandColormap.get_Colormap

           OUTPUT
            Colormap            : IRasterColormap**'''
        return super(IRasterBandColormap, self).get_Colormap()
    def put_Colormap(self, Colormap):
        '''Method IRasterBandColormap.put_Colormap

           INPUT
            Colormap            : IRasterColormap*'''
        return super(IRasterBandColormap, self).put_Colormap(Colormap)
    Colormap = property(get_Colormap, put_Colormap, None)

class IRasterCollection(_esriDataSourcesRaster.IRasterCollection):
    _IID = uuid.UUID('bd52f6e3-fc16-4c2c-9472-94cabf907fd0')
    def get_RasterCount(self):
        '''Method IRasterCollection.get_RasterCount

           OUTPUT
            Count               : long*'''
        return super(IRasterCollection, self).get_RasterCount()
    def Insert(self, index, pRaster):
        '''Method IRasterCollection.Insert

           INPUTS
            index               : long
            pRaster             : IRaster*'''
        return super(IRasterCollection, self).Insert(index, pRaster)
    def Append(self, pRaster):
        '''Method IRasterCollection.Append

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterCollection, self).Append(pRaster)
    def Remove(self, index):
        '''Method IRasterCollection.Remove

           INPUT
            index               : long'''
        return super(IRasterCollection, self).Remove(index)
    def Find(self, pRaster):
        '''Method IRasterCollection.Find

           INPUT
            pRaster             : IRaster*

           OUTPUT
            index               : long*'''
        return super(IRasterCollection, self).Find(pRaster)
    def Get(self, index):
        '''Method IRasterCollection.Get

           INPUT
            index               : long

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IRasterCollection, self).Get(index)
    def Set(self, index, pRaster):
        '''Method IRasterCollection.Set

           INPUTS
            index               : long
            pRaster             : IRaster*'''
        return super(IRasterCollection, self).Set(index, pRaster)
    def Empty(self):
        '''Method IRasterCollection.Empty'''
        return super(IRasterCollection, self).Empty()
    def Populate(self, pExtent):
        '''Method IRasterCollection.Populate

           INPUT
            pExtent             : IEnvelope*'''
        return super(IRasterCollection, self).Populate(pExtent)
    RasterCount = property(get_RasterCount, None, None)

class IRasterProps(_esriDataSourcesRaster.IRasterProps):
    _IID = uuid.UUID('4b7b1bd0-a705-11d2-8e30-00a0249480f0')

    def __init__(self, *args, **kw):
        super(IRasterProps, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Width(self):
        '''Method IRasterProps.get_Width

           OUTPUT
            pVal                : long*'''
        return super(IRasterProps, self).get_Width()
    def put_Width(self, pVal):
        '''Method IRasterProps.put_Width

           INPUT
            pVal                : long'''
        return super(IRasterProps, self).put_Width(pVal)
    def get_Height(self):
        '''Method IRasterProps.get_Height

           OUTPUT
            pVal                : long*'''
        return super(IRasterProps, self).get_Height()
    def put_Height(self, pVal):
        '''Method IRasterProps.put_Height

           INPUT
            pVal                : long'''
        return super(IRasterProps, self).put_Height(pVal)
    def get_PixelType(self):
        '''Method IRasterProps.get_PixelType

           OUTPUT
            pVal                : rstPixelType*'''
        return super(IRasterProps, self).get_PixelType()
    def put_PixelType(self, pVal):
        '''Method IRasterProps.put_PixelType

           INPUT
            pVal                : rstPixelType'''
        return super(IRasterProps, self).put_PixelType(pVal)
    def get_MapModel(self):
        '''Method IRasterProps.get_MapModel

           OUTPUT
            pVal                : IRasterMapModel**'''
        return super(IRasterProps, self).get_MapModel()
    def put_MapModel(self, pVal):
        '''Method IRasterProps.put_MapModel

           INPUT
            pVal                : IRasterMapModel*'''
        return super(IRasterProps, self).put_MapModel(pVal)
    def get_NoDataValue(self):
        '''Method IRasterProps.get_NoDataValue

           OUTPUT
            pVal                : VARIANT*'''
        return super(IRasterProps, self).get_NoDataValue()
    def put_NoDataValue(self, pVal):
        '''Method IRasterProps.put_NoDataValue

           INPUT
            pVal                : VARIANT'''
        return super(IRasterProps, self).put_NoDataValue(pVal)
    def MeanCellSize(self):
        '''Method IRasterProps.MeanCellSize

           OUTPUT
            pSize               : IPnt**'''
        return super(IRasterProps, self).MeanCellSize()
    def get_IsInteger(self):
        '''Method IRasterProps.get_IsInteger

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IRasterProps, self).get_IsInteger()
    def get_SpatialReference(self):
        '''Method IRasterProps.get_SpatialReference

           OUTPUT
            ppSpref             : ISpatialReference**'''
        return super(IRasterProps, self).get_SpatialReference()
    def put_SpatialReference(self, ppSpref):
        '''Method IRasterProps.put_SpatialReference

           INPUT
            ppSpref             : ISpatialReference*'''
        return super(IRasterProps, self).put_SpatialReference(ppSpref)
    def get_Extent(self):
        '''Method IRasterProps.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterProps, self).get_Extent()
    def put_Extent(self, ppExtent):
        '''Method IRasterProps.put_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IRasterProps, self).put_Extent(ppExtent)
    Extent = property(get_Extent, put_Extent, None)
    Height = property(get_Height, put_Height, None)
    IsInteger = property(get_IsInteger, None, None)
    MapModel = property(get_MapModel, put_MapModel, None)
    NoDataValue = property(get_NoDataValue, put_NoDataValue, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    SpatialReference = property(get_SpatialReference, put_SpatialReference, None)
    Width = property(get_Width, put_Width, None)

class IRasterDefaultProps(_esriDataSourcesRaster.IRasterDefaultProps):
    _IID = uuid.UUID('e3afbee0-2dad-11d3-a3f6-0004ac1b1d86')
    def get_DefaultPixelWidth(self):
        '''Method IRasterDefaultProps.get_DefaultPixelWidth

           OUTPUT
            Width               : double*'''
        return super(IRasterDefaultProps, self).get_DefaultPixelWidth()
    def get_DefaultPixelHeight(self):
        '''Method IRasterDefaultProps.get_DefaultPixelHeight

           OUTPUT
            Height              : double*'''
        return super(IRasterDefaultProps, self).get_DefaultPixelHeight()
    def get_DefaultUnionExtent(self):
        '''Method IRasterDefaultProps.get_DefaultUnionExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IRasterDefaultProps, self).get_DefaultUnionExtent()
    def get_DefaultIntersectExtent(self):
        '''Method IRasterDefaultProps.get_DefaultIntersectExtent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IRasterDefaultProps, self).get_DefaultIntersectExtent()
    def get_DefaultSpatialReference(self):
        '''Method IRasterDefaultProps.get_DefaultSpatialReference

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IRasterDefaultProps, self).get_DefaultSpatialReference()
    def ResetToDefault(self):
        '''Method IRasterDefaultProps.ResetToDefault'''
        return super(IRasterDefaultProps, self).ResetToDefault()
    DefaultIntersectExtent = property(get_DefaultIntersectExtent, None, None)
    DefaultPixelHeight = property(get_DefaultPixelHeight, None, None)
    DefaultPixelWidth = property(get_DefaultPixelWidth, None, None)
    DefaultSpatialReference = property(get_DefaultSpatialReference, None, None)
    DefaultUnionExtent = property(get_DefaultUnionExtent, None, None)

class IRasterAnalysisProps(_esriDataSourcesRaster.IRasterAnalysisProps):
    _IID = uuid.UUID('31e5ff30-2dad-11d3-a3f6-0004ac1b1d86')

    def __init__(self, *args, **kw):
        super(IRasterAnalysisProps, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PixelWidth(self, Width):
        '''Method IRasterAnalysisProps.put_PixelWidth

           INPUT
            Width               : double'''
        return super(IRasterAnalysisProps, self).put_PixelWidth(Width)
    def get_PixelWidth(self):
        '''Method IRasterAnalysisProps.get_PixelWidth

           OUTPUT
            Width               : double*'''
        return super(IRasterAnalysisProps, self).get_PixelWidth()
    def put_PixelHeight(self, Height):
        '''Method IRasterAnalysisProps.put_PixelHeight

           INPUT
            Height              : double'''
        return super(IRasterAnalysisProps, self).put_PixelHeight(Height)
    def get_PixelHeight(self):
        '''Method IRasterAnalysisProps.get_PixelHeight

           OUTPUT
            Height              : double*'''
        return super(IRasterAnalysisProps, self).get_PixelHeight()
    def get_AnalysisExtent(self):
        '''Method IRasterAnalysisProps.get_AnalysisExtent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterAnalysisProps, self).get_AnalysisExtent()
    def putref_AnalysisExtent(self, ppExtent):
        '''Method IRasterAnalysisProps.putref_AnalysisExtent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IRasterAnalysisProps, self).putref_AnalysisExtent(ppExtent)
    def get_RasterDataset(self):
        '''Method IRasterAnalysisProps.get_RasterDataset

           OUTPUT
            RasterDataset       : IRasterDataset**'''
        return super(IRasterAnalysisProps, self).get_RasterDataset()
    def MakePermanent(self):
        '''Method IRasterAnalysisProps.MakePermanent'''
        return super(IRasterAnalysisProps, self).MakePermanent()
    AnalysisExtent = property(get_AnalysisExtent, putref_AnalysisExtent, None)
    PixelHeight = property(get_PixelHeight, put_PixelHeight, None)
    PixelWidth = property(get_PixelWidth, put_PixelWidth, None)
    RasterDataset = property(get_RasterDataset, None, None)

class IRasterWorkspace3(_esriDataSourcesRaster.IRasterWorkspace3):
    _IID = uuid.UUID('8ff5ce38-bfe5-4cc7-a76c-da1564b560d1')
    def OpenRasterDatasetFromBytes(self, ppBytes, Copy):
        '''Method IRasterWorkspace3.OpenRasterDatasetFromBytes

           INPUTS
            ppBytes             : SAFEARRAY**
            Copy                : VARIANT_BOOL

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterWorkspace3, self).OpenRasterDatasetFromBytes(ppBytes, Copy)

class IRasterCatalogTable(_esriDataSourcesRaster.IRasterCatalogTable):
    _IID = uuid.UUID('ac0e9740-0742-11d4-8d75-00c04f5b87b2')

    def __init__(self, *args, **kw):
        super(IRasterCatalogTable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Table(self):
        '''Method IRasterCatalogTable.get_Table

           OUTPUT
            ppTable             : ITable**'''
        return super(IRasterCatalogTable, self).get_Table()
    def putref_Table(self, ppTable):
        '''Method IRasterCatalogTable.putref_Table

           INPUT
            ppTable             : ITable*'''
        return super(IRasterCatalogTable, self).putref_Table(ppTable)
    def Update(self):
        '''Method IRasterCatalogTable.Update'''
        return super(IRasterCatalogTable, self).Update()
    def get_Size(self):
        '''Method IRasterCatalogTable.get_Size

           OUTPUT
            pCount              : long*'''
        return super(IRasterCatalogTable, self).get_Size()
    def get_RasterExtent(self, idx):
        '''Method IRasterCatalogTable.get_RasterExtent

           INPUT
            idx                 : long

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterCatalogTable, self).get_RasterExtent(idx)
    def get_RasterName(self, idx):
        '''Method IRasterCatalogTable.get_RasterName

           INPUT
            idx                 : long

           OUTPUT
            Name                : BSTR*'''
        return super(IRasterCatalogTable, self).get_RasterName(idx)
    def get_RasterDataset(self, idx):
        '''Method IRasterCatalogTable.get_RasterDataset

           INPUT
            idx                 : long

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterCatalogTable, self).get_RasterDataset(idx)
    def get_FieldNameLocation(self):
        '''Method IRasterCatalogTable.get_FieldNameLocation

           OUTPUT
            pLocName            : long*'''
        return super(IRasterCatalogTable, self).get_FieldNameLocation()
    def get_FieldBoundsLocation(self):
        '''Method IRasterCatalogTable.get_FieldBoundsLocation

           OUTPUTS
            pLocXmin            : long*
            pLocYmin            : long*
            pLocXmax            : long*
            pLocYMax            : long*'''
        return super(IRasterCatalogTable, self).get_FieldBoundsLocation()
    def put_WhereClause(self, WhereClause):
        '''Method IRasterCatalogTable.put_WhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(IRasterCatalogTable, self).put_WhereClause(WhereClause)
    def get_WhereClause(self):
        '''Method IRasterCatalogTable.get_WhereClause

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IRasterCatalogTable, self).get_WhereClause()
    def get_OID(self, idx):
        '''Method IRasterCatalogTable.get_OID

           INPUT
            idx                 : long

           OUTPUT
            OID                 : long*'''
        return super(IRasterCatalogTable, self).get_OID(idx)
    FieldBoundsLocation = property(get_FieldBoundsLocation, None, None)
    FieldNameLocation = property(get_FieldNameLocation, None, None)
    Size = property(get_Size, None, None)
    Table = property(get_Table, putref_Table, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)
    OID = IndexProperty(get_OID, None)
    RasterDataset = IndexProperty(get_RasterDataset, None)
    RasterExtent = IndexProperty(get_RasterExtent, None)
    RasterName = IndexProperty(get_RasterName, None)

class IWorldFileExport(_esriDataSourcesRaster.IWorldFileExport):
    _IID = uuid.UUID('7d436852-ebea-11d4-b2b0-00508bcdc74b')
    def Write(self):
        '''Method IWorldFileExport.Write'''
        return super(IWorldFileExport, self).Write()

class IWorldFileExport2(_esriDataSourcesRaster.IWorldFileExport2):
    _IID = uuid.UUID('de7a3592-7add-4929-9773-27eba630ef35')
    def WriteBinaryAuxFile(self):
        '''Method IWorldFileExport2.WriteBinaryAuxFile'''
        return super(IWorldFileExport2, self).WriteBinaryAuxFile()

class IRasterEdit(_esriDataSourcesRaster.IRasterEdit):
    _IID = uuid.UUID('32656121-4df9-45f3-bdd1-507d481e9b49')
    def CanEdit(self):
        '''Method IRasterEdit.CanEdit

           OUTPUT
            CanEdit             : VARIANT_BOOL*'''
        return super(IRasterEdit, self).CanEdit()
    def Write(self, pTlc, pPixelBlock):
        '''Method IRasterEdit.Write

           INPUTS
            pTlc                : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(IRasterEdit, self).Write(pTlc, pPixelBlock)
    def Erase(self, pTlc, pPixelBlock):
        '''Method IRasterEdit.Erase

           INPUTS
            pTlc                : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(IRasterEdit, self).Erase(pTlc, pPixelBlock)
    def Refresh(self):
        '''Method IRasterEdit.Refresh'''
        return super(IRasterEdit, self).Refresh()

class IRasterPyramid(_esriDataSourcesRaster.IRasterPyramid):
    _IID = uuid.UUID('81bd0a10-6fb6-11d3-a407-0004ac1b1d86')

    def __init__(self, *args, **kw):
        super(IRasterPyramid, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Present(self):
        '''Method IRasterPyramid.get_Present

           OUTPUT
            Present             : VARIANT_BOOL*'''
        return super(IRasterPyramid, self).get_Present()
    def put_MinimumSize(self, ppVal):
        '''Method IRasterPyramid.put_MinimumSize

           INPUT
            ppVal               : IPnt*'''
        return super(IRasterPyramid, self).put_MinimumSize(ppVal)
    def get_MinimumSize(self):
        '''Method IRasterPyramid.get_MinimumSize

           OUTPUT
            ppVal               : IPnt**'''
        return super(IRasterPyramid, self).get_MinimumSize()
    def Create(self):
        '''Method IRasterPyramid.Create'''
        return super(IRasterPyramid, self).Create()
    MinimumSize = property(get_MinimumSize, put_MinimumSize, None)
    Present = property(get_Present, None, None)

class IRasterPyramid2(_esriDataSourcesRaster.IRasterPyramid2):
    _IID = uuid.UUID('f4e73742-71c1-425e-b889-e4fad1ea63d0')

    def __init__(self, *args, **kw):
        super(IRasterPyramid2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PyramidLevel(self):
        '''Method IRasterPyramid2.get_PyramidLevel

           OUTPUT
            Level               : long*'''
        return super(IRasterPyramid2, self).get_PyramidLevel()
    def get_PyramidResamplingMethod(self):
        '''Method IRasterPyramid2.get_PyramidResamplingMethod

           OUTPUT
            Method              : rstResamplingTypes*'''
        return super(IRasterPyramid2, self).get_PyramidResamplingMethod()
    def BuildPyramid(self, maxLevel, Method):
        '''Method IRasterPyramid2.BuildPyramid

           INPUTS
            maxLevel            : long
            Method              : rstResamplingTypes'''
        return super(IRasterPyramid2, self).BuildPyramid(maxLevel, Method)
    def get_Present(self):
        '''Method IRasterPyramid.get_Present (from IRasterPyramid)

           OUTPUT
            Present             : VARIANT_BOOL*'''
        return super(IRasterPyramid2, self).get_Present()
    def put_MinimumSize(self, ppVal):
        '''Method IRasterPyramid.put_MinimumSize (from IRasterPyramid)

           INPUT
            ppVal               : IPnt*'''
        return super(IRasterPyramid2, self).put_MinimumSize(ppVal)
    def get_MinimumSize(self):
        '''Method IRasterPyramid.get_MinimumSize (from IRasterPyramid)

           OUTPUT
            ppVal               : IPnt**'''
        return super(IRasterPyramid2, self).get_MinimumSize()
    def Create(self):
        '''Method IRasterPyramid.Create (from IRasterPyramid)'''
        return super(IRasterPyramid2, self).Create()
    MinimumSize = property(get_MinimumSize, put_MinimumSize, None)
    Present = property(get_Present, None, None)
    PyramidLevel = property(get_PyramidLevel, None, None)
    PyramidResamplingMethod = property(get_PyramidResamplingMethod, None, None)

class IRasterPyramid3(_esriDataSourcesRaster.IRasterPyramid3):
    _IID = uuid.UUID('31ed1fa3-3850-4ce2-9ce4-0d40701024d6')

    def __init__(self, *args, **kw):
        super(IRasterPyramid3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DeletePyramid(self):
        '''Method IRasterPyramid3.DeletePyramid'''
        return super(IRasterPyramid3, self).DeletePyramid()
    def get_PyramidLevel(self):
        '''Method IRasterPyramid2.get_PyramidLevel (from IRasterPyramid2)

           OUTPUT
            Level               : long*'''
        return super(IRasterPyramid3, self).get_PyramidLevel()
    def get_PyramidResamplingMethod(self):
        '''Method IRasterPyramid2.get_PyramidResamplingMethod (from IRasterPyramid2)

           OUTPUT
            Method              : rstResamplingTypes*'''
        return super(IRasterPyramid3, self).get_PyramidResamplingMethod()
    def BuildPyramid(self, maxLevel, Method):
        '''Method IRasterPyramid2.BuildPyramid (from IRasterPyramid2)

           INPUTS
            maxLevel            : long
            Method              : rstResamplingTypes'''
        return super(IRasterPyramid3, self).BuildPyramid(maxLevel, Method)
    def get_Present(self):
        '''Method IRasterPyramid.get_Present (from IRasterPyramid)

           OUTPUT
            Present             : VARIANT_BOOL*'''
        return super(IRasterPyramid3, self).get_Present()
    def put_MinimumSize(self, ppVal):
        '''Method IRasterPyramid.put_MinimumSize (from IRasterPyramid)

           INPUT
            ppVal               : IPnt*'''
        return super(IRasterPyramid3, self).put_MinimumSize(ppVal)
    def get_MinimumSize(self):
        '''Method IRasterPyramid.get_MinimumSize (from IRasterPyramid)

           OUTPUT
            ppVal               : IPnt**'''
        return super(IRasterPyramid3, self).get_MinimumSize()
    def Create(self):
        '''Method IRasterPyramid.Create (from IRasterPyramid)'''
        return super(IRasterPyramid3, self).Create()
    MinimumSize = property(get_MinimumSize, put_MinimumSize, None)
    Present = property(get_Present, None, None)
    PyramidLevel = property(get_PyramidLevel, None, None)
    PyramidResamplingMethod = property(get_PyramidResamplingMethod, None, None)

class ITemporaryDataset(_esriDataSourcesRaster.ITemporaryDataset):
    _IID = uuid.UUID('c9e5b7d0-3758-11d4-a421-0004ac1b1d86')
    def IsTemporary(self):
        '''Method ITemporaryDataset.IsTemporary

           OUTPUT
            temporary           : VARIANT_BOOL*'''
        return super(ITemporaryDataset, self).IsTemporary()
    def MakePermanent(self):
        '''Method ITemporaryDataset.MakePermanent'''
        return super(ITemporaryDataset, self).MakePermanent()
    def MakePermanentAs(self, new_name, Workspace, Format):
        '''Method ITemporaryDataset.MakePermanentAs

           INPUTS
            new_name            : BSTR
            Workspace           : IWorkspace*
            Format              : BSTR

           OUTPUT
            Dataset             : IDataset**'''
        return super(ITemporaryDataset, self).MakePermanentAs(new_name, Workspace, Format)

class IRasterHistograms(_esriDataSourcesRaster.IRasterHistograms):
    _IID = uuid.UUID('5bc31bb5-f7c3-4cad-9b8e-176cd7399d22')
    def get_Count(self):
        '''Method IRasterHistograms.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IRasterHistograms, self).get_Count()
    def get_Element(self, index):
        '''Method IRasterHistograms.get_Element

           INPUT
            index               : long

           OUTPUT
            pHistogram          : IRasterHistogram**'''
        return super(IRasterHistograms, self).get_Element(index)
    def Remove(self, index):
        '''Method IRasterHistograms.Remove

           INPUT
            index               : long'''
        return super(IRasterHistograms, self).Remove(index)
    def RemoveAll(self):
        '''Method IRasterHistograms.RemoveAll'''
        return super(IRasterHistograms, self).RemoveAll()
    def Add(self, pHistogram):
        '''Method IRasterHistograms.Add

           INPUT
            pHistogram          : IRasterHistogram*'''
        return super(IRasterHistograms, self).Add(pHistogram)
    def Insert(self, index, pHistogram):
        '''Method IRasterHistograms.Insert

           INPUTS
            index               : long
            pHistogram          : IRasterHistogram*'''
        return super(IRasterHistograms, self).Insert(index, pHistogram)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IStatsHistogram(_esriDataSourcesRaster.IStatsHistogram):
    _IID = uuid.UUID('2b9062e8-df44-4012-a0e4-cf0efaa21693')

    def __init__(self, *args, **kw):
        super(IStatsHistogram, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Min(self):
        '''Method IStatsHistogram.get_Min

           OUTPUT
            Min                 : double*'''
        return super(IStatsHistogram, self).get_Min()
    def put_Min(self, Min):
        '''Method IStatsHistogram.put_Min

           INPUT
            Min                 : double'''
        return super(IStatsHistogram, self).put_Min(Min)
    def get_Max(self):
        '''Method IStatsHistogram.get_Max

           OUTPUT
            Max                 : double*'''
        return super(IStatsHistogram, self).get_Max()
    def put_Max(self, Max):
        '''Method IStatsHistogram.put_Max

           INPUT
            Max                 : double'''
        return super(IStatsHistogram, self).put_Max(Max)
    def get_Mean(self):
        '''Method IStatsHistogram.get_Mean

           OUTPUT
            Mean                : double*'''
        return super(IStatsHistogram, self).get_Mean()
    def put_Mean(self, Mean):
        '''Method IStatsHistogram.put_Mean

           INPUT
            Mean                : double'''
        return super(IStatsHistogram, self).put_Mean(Mean)
    def get_StdDev(self):
        '''Method IStatsHistogram.get_StdDev

           OUTPUT
            StdDev              : double*'''
        return super(IStatsHistogram, self).get_StdDev()
    def put_StdDev(self, StdDev):
        '''Method IStatsHistogram.put_StdDev

           INPUT
            StdDev              : double'''
        return super(IStatsHistogram, self).put_StdDev(StdDev)
    def PutHistogramMinmax(self, Min, Max):
        '''Method IStatsHistogram.PutHistogramMinmax

           INPUTS
            Min                 : double
            Max                 : double'''
        return super(IStatsHistogram, self).PutHistogramMinmax(Min, Max)
    def QueryHistogramMinmax(self):
        '''Method IStatsHistogram.QueryHistogramMinmax

           OUTPUTS
            Min                 : double*
            Max                 : double*'''
        return super(IStatsHistogram, self).QueryHistogramMinmax()
    def get_Histogram(self):
        '''Method IStatsHistogram.get_Histogram

           OUTPUT
            Histogram           : VARIANT*'''
        return super(IStatsHistogram, self).get_Histogram()
    def put_Histogram(self, Histogram):
        '''Method IStatsHistogram.put_Histogram

           INPUT
            Histogram           : VARIANT'''
        return super(IStatsHistogram, self).put_Histogram(Histogram)
    def PutStats(self, Min, Max, Mean, StdDev):
        '''Method IStatsHistogram.PutStats

           INPUTS
            Min                 : double
            Max                 : double
            Mean                : double
            StdDev              : double'''
        return super(IStatsHistogram, self).PutStats(Min, Max, Mean, StdDev)
    def QueryStats(self):
        '''Method IStatsHistogram.QueryStats

           OUTPUTS
            Min                 : double*
            Max                 : double*
            Mean                : double*
            StdDev              : double*'''
        return super(IStatsHistogram, self).QueryStats()
    def Empty(self):
        '''Method IStatsHistogram.Empty'''
        return super(IStatsHistogram, self).Empty()
    def HasStats(self):
        '''Method IStatsHistogram.HasStats

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IStatsHistogram, self).HasStats()
    def HasHistogram(self):
        '''Method IStatsHistogram.HasHistogram

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IStatsHistogram, self).HasHistogram()
    def Accumulate(self, Value, Count):
        '''Method IStatsHistogram.Accumulate

           INPUTS
            Value               : double
            Count               : long'''
        return super(IStatsHistogram, self).Accumulate(Value, Count)
    def Update(self):
        '''Method IStatsHistogram.Update'''
        return super(IStatsHistogram, self).Update()
    Histogram = property(get_Histogram, put_Histogram, None)
    Max = property(get_Max, put_Max, None)
    Mean = property(get_Mean, put_Mean, None)
    Min = property(get_Min, put_Min, None)
    StdDev = property(get_StdDev, put_StdDev, None)

class IStatsHistogram2(_esriDataSourcesRaster.IStatsHistogram2):
    _IID = uuid.UUID('0a69bfa0-d411-468d-be27-3042e80a9cc0')

    def __init__(self, *args, **kw):
        super(IStatsHistogram2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PixelCount(self):
        '''Method IStatsHistogram2.get_PixelCount

           OUTPUT
            pNumPixels          : double*'''
        return super(IStatsHistogram2, self).get_PixelCount()
    def get_Min(self):
        '''Method IStatsHistogram.get_Min (from IStatsHistogram)

           OUTPUT
            Min                 : double*'''
        return super(IStatsHistogram2, self).get_Min()
    def put_Min(self, Min):
        '''Method IStatsHistogram.put_Min (from IStatsHistogram)

           INPUT
            Min                 : double'''
        return super(IStatsHistogram2, self).put_Min(Min)
    def get_Max(self):
        '''Method IStatsHistogram.get_Max (from IStatsHistogram)

           OUTPUT
            Max                 : double*'''
        return super(IStatsHistogram2, self).get_Max()
    def put_Max(self, Max):
        '''Method IStatsHistogram.put_Max (from IStatsHistogram)

           INPUT
            Max                 : double'''
        return super(IStatsHistogram2, self).put_Max(Max)
    def get_Mean(self):
        '''Method IStatsHistogram.get_Mean (from IStatsHistogram)

           OUTPUT
            Mean                : double*'''
        return super(IStatsHistogram2, self).get_Mean()
    def put_Mean(self, Mean):
        '''Method IStatsHistogram.put_Mean (from IStatsHistogram)

           INPUT
            Mean                : double'''
        return super(IStatsHistogram2, self).put_Mean(Mean)
    def get_StdDev(self):
        '''Method IStatsHistogram.get_StdDev (from IStatsHistogram)

           OUTPUT
            StdDev              : double*'''
        return super(IStatsHistogram2, self).get_StdDev()
    def put_StdDev(self, StdDev):
        '''Method IStatsHistogram.put_StdDev (from IStatsHistogram)

           INPUT
            StdDev              : double'''
        return super(IStatsHistogram2, self).put_StdDev(StdDev)
    def PutHistogramMinmax(self, Min, Max):
        '''Method IStatsHistogram.PutHistogramMinmax (from IStatsHistogram)

           INPUTS
            Min                 : double
            Max                 : double'''
        return super(IStatsHistogram2, self).PutHistogramMinmax(Min, Max)
    def QueryHistogramMinmax(self):
        '''Method IStatsHistogram.QueryHistogramMinmax (from IStatsHistogram)

           OUTPUTS
            Min                 : double*
            Max                 : double*'''
        return super(IStatsHistogram2, self).QueryHistogramMinmax()
    def get_Histogram(self):
        '''Method IStatsHistogram.get_Histogram (from IStatsHistogram)

           OUTPUT
            Histogram           : VARIANT*'''
        return super(IStatsHistogram2, self).get_Histogram()
    def put_Histogram(self, Histogram):
        '''Method IStatsHistogram.put_Histogram (from IStatsHistogram)

           INPUT
            Histogram           : VARIANT'''
        return super(IStatsHistogram2, self).put_Histogram(Histogram)
    def PutStats(self, Min, Max, Mean, StdDev):
        '''Method IStatsHistogram.PutStats (from IStatsHistogram)

           INPUTS
            Min                 : double
            Max                 : double
            Mean                : double
            StdDev              : double'''
        return super(IStatsHistogram2, self).PutStats(Min, Max, Mean, StdDev)
    def QueryStats(self):
        '''Method IStatsHistogram.QueryStats (from IStatsHistogram)

           OUTPUTS
            Min                 : double*
            Max                 : double*
            Mean                : double*
            StdDev              : double*'''
        return super(IStatsHistogram2, self).QueryStats()
    def Empty(self):
        '''Method IStatsHistogram.Empty (from IStatsHistogram)'''
        return super(IStatsHistogram2, self).Empty()
    def HasStats(self):
        '''Method IStatsHistogram.HasStats (from IStatsHistogram)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IStatsHistogram2, self).HasStats()
    def HasHistogram(self):
        '''Method IStatsHistogram.HasHistogram (from IStatsHistogram)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IStatsHistogram2, self).HasHistogram()
    def Accumulate(self, Value, Count):
        '''Method IStatsHistogram.Accumulate (from IStatsHistogram)

           INPUTS
            Value               : double
            Count               : long'''
        return super(IStatsHistogram2, self).Accumulate(Value, Count)
    def Update(self):
        '''Method IStatsHistogram.Update (from IStatsHistogram)'''
        return super(IStatsHistogram2, self).Update()
    Histogram = property(get_Histogram, put_Histogram, None)
    Max = property(get_Max, put_Max, None)
    Mean = property(get_Mean, put_Mean, None)
    Min = property(get_Min, put_Min, None)
    PixelCount = property(get_PixelCount, None, None)
    StdDev = property(get_StdDev, put_StdDev, None)

class IRasterTable(_esriDataSourcesRaster.IRasterTable):
    _IID = uuid.UUID('7aca3d04-0629-11d2-8d24-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRasterTable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_TableType(self):
        '''Method IRasterTable.get_TableType

           OUTPUT
            Type                : esriRasterTableTypeEnum*'''
        return super(IRasterTable, self).get_TableType()
    def get_PrimaryField(self):
        '''Method IRasterTable.get_PrimaryField

           OUTPUT
            fieldIndex          : long*'''
        return super(IRasterTable, self).get_PrimaryField()
    def put_PrimaryField(self, fieldIndex):
        '''Method IRasterTable.put_PrimaryField

           INPUT
            fieldIndex          : long'''
        return super(IRasterTable, self).put_PrimaryField(fieldIndex)
    PrimaryField = property(get_PrimaryField, put_PrimaryField, None)
    TableType = property(get_TableType, None, None)

class IUniqueValues(_esriDataSourcesRaster.IUniqueValues):
    _IID = uuid.UUID('b2768ab2-e583-4ccf-831d-36237c2f520a')
    def Lookup(self, Value):
        '''Method IUniqueValues.Lookup

           INPUT
            Value               : long

           OUTPUT
            index               : long*'''
        return super(IUniqueValues, self).Lookup(Value)
    def Add(self, Value, Count):
        '''Method IUniqueValues.Add

           INPUTS
            Value               : long
            Count               : long

           OUTPUT
            index               : long*'''
        return super(IUniqueValues, self).Add(Value, Count)
    def Delete(self, Value):
        '''Method IUniqueValues.Delete

           INPUT
            Value               : long'''
        return super(IUniqueValues, self).Delete(Value)
    def Empty(self):
        '''Method IUniqueValues.Empty'''
        return super(IUniqueValues, self).Empty()
    def get_UniqueValue(self, index):
        '''Method IUniqueValues.get_UniqueValue

           INPUT
            index               : long

           OUTPUT
            UniqueValue         : VARIANT*'''
        return super(IUniqueValues, self).get_UniqueValue(index)
    def get_UniqueCount(self, idnex):
        '''Method IUniqueValues.get_UniqueCount

           INPUT
            idnex               : long

           OUTPUT
            UniqueCount         : long*'''
        return super(IUniqueValues, self).get_UniqueCount(idnex)
    def get_Count(self):
        '''Method IUniqueValues.get_Count

           OUTPUT
            Count               : long*'''
        return super(IUniqueValues, self).get_Count()
    def get_Min(self):
        '''Method IUniqueValues.get_Min

           OUTPUT
            Min                 : long*'''
        return super(IUniqueValues, self).get_Min()
    def get_Max(self):
        '''Method IUniqueValues.get_Max

           OUTPUT
            Max                 : long*'''
        return super(IUniqueValues, self).get_Max()
    def GetHistogram(self):
        '''Method IUniqueValues.GetHistogram

           OUTPUTS
            pUniqueValues       : VARIANT*
            pCounts             : VARIANT*'''
        return super(IUniqueValues, self).GetHistogram()
    Count = property(get_Count, None, None)
    Max = property(get_Max, None, None)
    Min = property(get_Min, None, None)
    UniqueCount = IndexProperty(get_UniqueCount, None)
    UniqueValue = IndexProperty(get_UniqueValue, None)

class IUniqueValues2(_esriDataSourcesRaster.IUniqueValues2):
    _IID = uuid.UUID('bcf576fb-5e01-4b39-b062-d5b167a2e3e5')
    def get_LargeUniqueCount(self, idnex):
        '''Method IUniqueValues2.get_LargeUniqueCount

           INPUT
            idnex               : long

           OUTPUT
            UniqueCount         : double*'''
        return super(IUniqueValues2, self).get_LargeUniqueCount(idnex)
    def GetLargeHistogram(self):
        '''Method IUniqueValues2.GetLargeHistogram

           OUTPUTS
            pUniqueValues       : VARIANT*
            pCounts             : VARIANT*'''
        return super(IUniqueValues2, self).GetLargeHistogram()
    def Lookup(self, Value):
        '''Method IUniqueValues.Lookup (from IUniqueValues)

           INPUT
            Value               : long

           OUTPUT
            index               : long*'''
        return super(IUniqueValues2, self).Lookup(Value)
    def Add(self, Value, Count):
        '''Method IUniqueValues.Add (from IUniqueValues)

           INPUTS
            Value               : long
            Count               : long

           OUTPUT
            index               : long*'''
        return super(IUniqueValues2, self).Add(Value, Count)
    def Delete(self, Value):
        '''Method IUniqueValues.Delete (from IUniqueValues)

           INPUT
            Value               : long'''
        return super(IUniqueValues2, self).Delete(Value)
    def Empty(self):
        '''Method IUniqueValues.Empty (from IUniqueValues)'''
        return super(IUniqueValues2, self).Empty()
    def get_UniqueValue(self, index):
        '''Method IUniqueValues.get_UniqueValue (from IUniqueValues)

           INPUT
            index               : long

           OUTPUT
            UniqueValue         : VARIANT*'''
        return super(IUniqueValues2, self).get_UniqueValue(index)
    def get_UniqueCount(self, idnex):
        '''Method IUniqueValues.get_UniqueCount (from IUniqueValues)

           INPUT
            idnex               : long

           OUTPUT
            UniqueCount         : long*'''
        return super(IUniqueValues2, self).get_UniqueCount(idnex)
    def get_Count(self):
        '''Method IUniqueValues.get_Count (from IUniqueValues)

           OUTPUT
            Count               : long*'''
        return super(IUniqueValues2, self).get_Count()
    def get_Min(self):
        '''Method IUniqueValues.get_Min (from IUniqueValues)

           OUTPUT
            Min                 : long*'''
        return super(IUniqueValues2, self).get_Min()
    def get_Max(self):
        '''Method IUniqueValues.get_Max (from IUniqueValues)

           OUTPUT
            Max                 : long*'''
        return super(IUniqueValues2, self).get_Max()
    def GetHistogram(self):
        '''Method IUniqueValues.GetHistogram (from IUniqueValues)

           OUTPUTS
            pUniqueValues       : VARIANT*
            pCounts             : VARIANT*'''
        return super(IUniqueValues2, self).GetHistogram()
    Count = property(get_Count, None, None)
    Max = property(get_Max, None, None)
    Min = property(get_Min, None, None)
    LargeUniqueCount = IndexProperty(get_LargeUniqueCount, None)
    UniqueCount = IndexProperty(get_UniqueCount, None)
    UniqueValue = IndexProperty(get_UniqueValue, None)

class IUniqueStringValues(_esriDataSourcesRaster.IUniqueStringValues):
    _IID = uuid.UUID('b39479e3-ec24-49ce-b268-556375700b8a')
    def Lookup(self, Value):
        '''Method IUniqueStringValues.Lookup

           INPUT
            Value               : BSTR

           OUTPUT
            index               : long*'''
        return super(IUniqueStringValues, self).Lookup(Value)
    def Add(self, Value, Count):
        '''Method IUniqueStringValues.Add

           INPUTS
            Value               : BSTR
            Count               : long

           OUTPUT
            index               : long*'''
        return super(IUniqueStringValues, self).Add(Value, Count)
    def Delete(self, Value):
        '''Method IUniqueStringValues.Delete

           INPUT
            Value               : BSTR'''
        return super(IUniqueStringValues, self).Delete(Value)

class IUniqueMutliStringValues(_esriDataSourcesRaster.IUniqueMutliStringValues):
    _IID = uuid.UUID('f6a0372d-21fd-4167-ac40-270c7b2cfe56')
    def Add(self, stringArray, Count):
        '''Method IUniqueMutliStringValues.Add

           INPUTS
            stringArray         : VARIANT
            Count               : long

           OUTPUT
            index               : long*'''
        return super(IUniqueMutliStringValues, self).Add(stringArray, Count)
    def Delete(self, stringArray):
        '''Method IUniqueMutliStringValues.Delete

           INPUT
            stringArray         : VARIANT'''
        return super(IUniqueMutliStringValues, self).Delete(stringArray)

class IUniqueDoubleValues(_esriDataSourcesRaster.IUniqueDoubleValues):
    _IID = uuid.UUID('d8d8e1ef-d10f-45e9-804a-dd1994c9afe3')
    def Lookup(self, Value):
        '''Method IUniqueDoubleValues.Lookup

           INPUT
            Value               : double

           OUTPUT
            index               : long*'''
        return super(IUniqueDoubleValues, self).Lookup(Value)
    def Add(self, Value, Count):
        '''Method IUniqueDoubleValues.Add

           INPUTS
            Value               : double
            Count               : long

           OUTPUT
            index               : long*'''
        return super(IUniqueDoubleValues, self).Add(Value, Count)
    def Delete(self, Value):
        '''Method IUniqueDoubleValues.Delete

           INPUT
            Value               : double'''
        return super(IUniqueDoubleValues, self).Delete(Value)

class IRasterCalcUniqueValues(_esriDataSourcesRaster.IRasterCalcUniqueValues):
    _IID = uuid.UUID('b065f7f9-c202-466c-b111-f6a89c55ab29')
    def AddFromTable(self, pCursor, iValueField, iCountField, pUniqueValues):
        '''Method IRasterCalcUniqueValues.AddFromTable

           INPUTS
            pCursor             : ICursor*
            iValueField         : long
            iCountField         : long
            pUniqueValues       : IUniqueValues*'''
        return super(IRasterCalcUniqueValues, self).AddFromTable(pCursor, iValueField, iCountField, pUniqueValues)
    def AddFromRaster(self, pRaster, iBand, pUniqueValues):
        '''Method IRasterCalcUniqueValues.AddFromRaster

           INPUTS
            pRaster             : IRaster*
            iBand               : long
            pUniqueValues       : IUniqueValues*'''
        return super(IRasterCalcUniqueValues, self).AddFromRaster(pRaster, iBand, pUniqueValues)
    def AddFromRasterAsDecimal(self, pRaster, iBand, precision, pUniqueValues):
        '''Method IRasterCalcUniqueValues.AddFromRasterAsDecimal

           INPUTS
            pRaster             : IRaster*
            iBand               : long
            precision           : double
            pUniqueValues       : IUniqueValues*'''
        return super(IRasterCalcUniqueValues, self).AddFromRasterAsDecimal(pRaster, iBand, precision, pUniqueValues)

class IRasterCalcUniqueValues2(_esriDataSourcesRaster.IRasterCalcUniqueValues2):
    _IID = uuid.UUID('7c39b731-a6a8-4843-a734-ff607331e57a')

    def __init__(self, *args, **kw):
        super(IRasterCalcUniqueValues2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MaxUniqueValueCount(self):
        '''Method IRasterCalcUniqueValues2.get_MaxUniqueValueCount

           OUTPUT
            pMaxCount           : long*'''
        return super(IRasterCalcUniqueValues2, self).get_MaxUniqueValueCount()
    def put_MaxUniqueValueCount(self, pMaxCount):
        '''Method IRasterCalcUniqueValues2.put_MaxUniqueValueCount

           INPUT
            pMaxCount           : long'''
        return super(IRasterCalcUniqueValues2, self).put_MaxUniqueValueCount(pMaxCount)
    def AddFromTable(self, pCursor, iValueField, iCountField, pUniqueValues):
        '''Method IRasterCalcUniqueValues.AddFromTable (from IRasterCalcUniqueValues)

           INPUTS
            pCursor             : ICursor*
            iValueField         : long
            iCountField         : long
            pUniqueValues       : IUniqueValues*'''
        return super(IRasterCalcUniqueValues2, self).AddFromTable(pCursor, iValueField, iCountField, pUniqueValues)
    def AddFromRaster(self, pRaster, iBand, pUniqueValues):
        '''Method IRasterCalcUniqueValues.AddFromRaster (from IRasterCalcUniqueValues)

           INPUTS
            pRaster             : IRaster*
            iBand               : long
            pUniqueValues       : IUniqueValues*'''
        return super(IRasterCalcUniqueValues2, self).AddFromRaster(pRaster, iBand, pUniqueValues)
    def AddFromRasterAsDecimal(self, pRaster, iBand, precision, pUniqueValues):
        '''Method IRasterCalcUniqueValues.AddFromRasterAsDecimal (from IRasterCalcUniqueValues)

           INPUTS
            pRaster             : IRaster*
            iBand               : long
            precision           : double
            pUniqueValues       : IUniqueValues*'''
        return super(IRasterCalcUniqueValues2, self).AddFromRasterAsDecimal(pRaster, iBand, precision, pUniqueValues)
    MaxUniqueValueCount = property(get_MaxUniqueValueCount, put_MaxUniqueValueCount, None)

class IRasterColormapToRGBConversion(_esriDataSourcesRaster.IRasterColormapToRGBConversion):
    _IID = uuid.UUID('2b37acd6-314f-420b-a2e7-ca85465488fe')
    def RGBToColormap(self, pRasterDataset, pWorkspace, Name, Format):
        '''Method IRasterColormapToRGBConversion.RGBToColormap

           INPUTS
            pRasterDataset      : IRasterDataset*
            pWorkspace          : IWorkspace*
            Name                : BSTR
            Format              : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IRasterColormapToRGBConversion, self).RGBToColormap(pRasterDataset, pWorkspace, Name, Format)
    def RGBRasterToColormap(self, pRaster, pWorkspace, Name, Format):
        '''Method IRasterColormapToRGBConversion.RGBRasterToColormap

           INPUTS
            pRaster             : IRaster*
            pWorkspace          : IWorkspace*
            Name                : BSTR
            Format              : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IRasterColormapToRGBConversion, self).RGBRasterToColormap(pRaster, pWorkspace, Name, Format)
    def ColormapToRGB(self, pRasterDataset, pWorkspace, Name, Format):
        '''Method IRasterColormapToRGBConversion.ColormapToRGB

           INPUTS
            pRasterDataset      : IRasterDataset*
            pWorkspace          : IWorkspace*
            Name                : BSTR
            Format              : BSTR

           OUTPUT
            ppName              : IName**'''
        return super(IRasterColormapToRGBConversion, self).ColormapToRGB(pRasterDataset, pWorkspace, Name, Format)
    def CreateRGBRaster(self, pRasterDataset):
        '''Method IRasterColormapToRGBConversion.CreateRGBRaster

           INPUT
            pRasterDataset      : IRasterDataset*

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IRasterColormapToRGBConversion, self).CreateRGBRaster(pRasterDataset)

class IPixelBlockCursor(_esriDataSourcesRaster.IPixelBlockCursor):
    _IID = uuid.UUID('54dfc56a-bc14-46ac-a815-07dea8cb9cfb')

    def __init__(self, *args, **kw):
        super(IPixelBlockCursor, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def InitByRawPixels(self, pRowPixels, BlockSizeX, BlockSizeY):
        '''Method IPixelBlockCursor.InitByRawPixels

           INPUTS
            pRowPixels          : IRawPixels*
            BlockSizeX          : long
            BlockSizeY          : long'''
        return super(IPixelBlockCursor, self).InitByRawPixels(pRowPixels, BlockSizeX, BlockSizeY)
    def InitByRaster(self, pRaster):
        '''Method IPixelBlockCursor.InitByRaster

           INPUT
            pRaster             : IRaster*'''
        return super(IPixelBlockCursor, self).InitByRaster(pRaster)
    def UpdateBlockSize(self, BlockSizeX, BlockSizeY):
        '''Method IPixelBlockCursor.UpdateBlockSize

           INPUTS
            BlockSizeX          : long
            BlockSizeY          : long'''
        return super(IPixelBlockCursor, self).UpdateBlockSize(BlockSizeX, BlockSizeY)
    def GetBlockSize(self):
        '''Method IPixelBlockCursor.GetBlockSize

           OUTPUTS
            pBlockSizeX         : long*
            pBlockSizeY         : long*'''
        return super(IPixelBlockCursor, self).GetBlockSize()
    def put_ScanMode(self, _arg1):
        '''Method IPixelBlockCursor.put_ScanMode

           INPUT
            _arg1               : long'''
        return super(IPixelBlockCursor, self).put_ScanMode(_arg1)
    def NextBlock(self):
        '''Method IPixelBlockCursor.NextBlock

           OUTPUTS
            pLeft               : long*
            pTop                : long*
            pSizeX              : long*
            pSizeY              : long*
            ppPixelBlock        : IPixelBlock**'''
        return super(IPixelBlockCursor, self).NextBlock()
    ScanMode = property(None, put_ScanMode, None)

class IRasterAttributeTableManager(_esriDataSourcesRaster.IRasterAttributeTableManager):
    _IID = uuid.UUID('d2270488-5946-430e-a1b3-26454a7c1687')
    def FindGeoDataset(self, pVAT):
        '''Method IRasterAttributeTableManager.FindGeoDataset

           INPUT
            pVAT                : ITable*

           OUTPUT
            ppDataset           : IGeoDataset**'''
        return super(IRasterAttributeTableManager, self).FindGeoDataset(pVAT)

class IRaster2(_esriDataSourcesRaster.IRaster2):
    _IID = uuid.UUID('0d668d08-92c1-4999-9a77-490790821969')

    def __init__(self, *args, **kw):
        super(IRaster2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_GeodataXform(self):
        '''Method IRaster2.get_GeodataXform

           OUTPUT
            ppXform             : IGeodataXform**'''
        return super(IRaster2, self).get_GeodataXform()
    def put_GeodataXform(self, ppXform):
        '''Method IRaster2.put_GeodataXform

           INPUT
            ppXform             : IGeodataXform*'''
        return super(IRaster2, self).put_GeodataXform(ppXform)
    def putref_GeoTransformations(self, ppGeoXforms):
        '''Method IRaster2.putref_GeoTransformations

           INPUT
            ppGeoXforms         : IGeoTransformationOperationSet*'''
        return super(IRaster2, self).putref_GeoTransformations(ppGeoXforms)
    def get_GeoTransformations(self):
        '''Method IRaster2.get_GeoTransformations

           OUTPUT
            ppGeoXforms         : IGeoTransformationOperationSet**'''
        return super(IRaster2, self).get_GeoTransformations()
    def get_AttributeTable(self):
        '''Method IRaster2.get_AttributeTable

           OUTPUT
            ppVAT               : ITable**'''
        return super(IRaster2, self).get_AttributeTable()
    def putref_AttributeTable(self, ppVAT):
        '''Method IRaster2.putref_AttributeTable

           INPUT
            ppVAT               : ITable*'''
        return super(IRaster2, self).putref_AttributeTable(ppVAT)
    def get_Colormap(self):
        '''Method IRaster2.get_Colormap

           OUTPUT
            ppColormap          : IRasterColormap**'''
        return super(IRaster2, self).get_Colormap()
    def putref_Colormap(self, ppColormap):
        '''Method IRaster2.putref_Colormap

           INPUT
            ppColormap          : IRasterColormap*'''
        return super(IRaster2, self).putref_Colormap(ppColormap)
    def get_RasterDataset(self):
        '''Method IRaster2.get_RasterDataset

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRaster2, self).get_RasterDataset()
    def CreateCursorEx(self, pBlockSize):
        '''Method IRaster2.CreateCursorEx

           INPUT
            pBlockSize          : IPnt*

           OUTPUT
            ppCursor            : IRasterCursor**'''
        return super(IRaster2, self).CreateCursorEx(pBlockSize)
    def get_RasterXformer(self):
        '''Method IRaster2.get_RasterXformer

           OUTPUT
            ppXformer           : IRasterXformer**'''
        return super(IRaster2, self).get_RasterXformer()
    def MapToPixel(self, x, y):
        '''Method IRaster2.MapToPixel

           INPUTS
            x                   : double
            y                   : double

           OUTPUTS
            pColumn             : long*
            pRow                : long*'''
        return super(IRaster2, self).MapToPixel(x, y)
    def PixelToMap(self, iColumn, iRow):
        '''Method IRaster2.PixelToMap

           INPUTS
            iColumn             : long
            iRow                : long

           OUTPUTS
            pX                  : double*
            pY                  : double*'''
        return super(IRaster2, self).PixelToMap(iColumn, iRow)
    def ToPixelColumn(self, x):
        '''Method IRaster2.ToPixelColumn

           INPUT
            x                   : double

           OUTPUT
            pColumn             : long*'''
        return super(IRaster2, self).ToPixelColumn(x)
    def ToPixelRow(self, y):
        '''Method IRaster2.ToPixelRow

           INPUT
            y                   : double

           OUTPUT
            pRow                : long*'''
        return super(IRaster2, self).ToPixelRow(y)
    def ToMapX(self, iColumn):
        '''Method IRaster2.ToMapX

           INPUT
            iColumn             : long

           OUTPUT
            pX                  : double*'''
        return super(IRaster2, self).ToMapX(iColumn)
    def ToMapY(self, iRow):
        '''Method IRaster2.ToMapY

           INPUT
            iRow                : long

           OUTPUT
            pY                  : double*'''
        return super(IRaster2, self).ToMapY(iRow)
    def GetPixelValue(self, iBand, iColumn, iRow):
        '''Method IRaster2.GetPixelValue

           INPUTS
            iBand               : long
            iColumn             : long
            iRow                : long

           OUTPUT
            pPixelValue         : VARIANT*'''
        return super(IRaster2, self).GetPixelValue(iBand, iColumn, iRow)
    AttributeTable = property(get_AttributeTable, putref_AttributeTable, None)
    Colormap = property(get_Colormap, putref_Colormap, None)
    GeoTransformations = property(get_GeoTransformations, putref_GeoTransformations, None)
    GeodataXform = property(get_GeodataXform, put_GeodataXform, None)
    RasterDataset = property(get_RasterDataset, None, None)
    RasterXformer = property(get_RasterXformer, None, None)

class IRasterColormap2(_esriDataSourcesRaster.IRasterColormap2):
    _IID = uuid.UUID('a4d0d354-b981-4088-9384-2f82a19783a6')

    def __init__(self, *args, **kw):
        super(IRasterColormap2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_LUT(self, _arg1):
        '''Method IRasterColormap2.put_LUT

           INPUT
            _arg1               : ITable*'''
        return super(IRasterColormap2, self).put_LUT(_arg1)
    def get_RemappedColors(self):
        '''Method IRasterColormap2.get_RemappedColors

           OUTPUT
            pColors             : VARIANT*'''
        return super(IRasterColormap2, self).get_RemappedColors()
    def get_RemappedRedValues(self):
        '''Method IRasterColormap2.get_RemappedRedValues

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap2, self).get_RemappedRedValues()
    def get_RemappedGreenValues(self):
        '''Method IRasterColormap2.get_RemappedGreenValues

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap2, self).get_RemappedGreenValues()
    def get_RemappedBlueValues(self):
        '''Method IRasterColormap2.get_RemappedBlueValues

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap2, self).get_RemappedBlueValues()
    def get_BinFunction(self):
        '''Method IRasterColormap2.get_BinFunction

           OUTPUT
            ppBinFunction       : IBinFunction**'''
        return super(IRasterColormap2, self).get_BinFunction()
    def get_RedValues(self):
        '''Method IRasterColormap.get_RedValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap2, self).get_RedValues()
    def put_RedValues(self, val):
        '''Method IRasterColormap.put_RedValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap2, self).put_RedValues(val)
    def get_GreenValues(self):
        '''Method IRasterColormap.get_GreenValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap2, self).get_GreenValues()
    def put_GreenValues(self, val):
        '''Method IRasterColormap.put_GreenValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap2, self).put_GreenValues(val)
    def get_BlueValues(self):
        '''Method IRasterColormap.get_BlueValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap2, self).get_BlueValues()
    def put_BlueValues(self, val):
        '''Method IRasterColormap.put_BlueValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap2, self).put_BlueValues(val)
    def get_Colors(self):
        '''Method IRasterColormap.get_Colors (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap2, self).get_Colors()
    def put_Colors(self, val):
        '''Method IRasterColormap.put_Colors (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap2, self).put_Colors(val)
    def Bin(self, pixval):
        '''Method IRasterColormap.Bin (from IRasterColormap)

           INPUT
            pixval              : double

           OUTPUT
            Bin                 : long*'''
        return super(IRasterColormap2, self).Bin(pixval)
    BinFunction = property(get_BinFunction, None, None)
    BlueValues = property(get_BlueValues, put_BlueValues, None)
    Colors = property(get_Colors, put_Colors, None)
    GreenValues = property(get_GreenValues, put_GreenValues, None)
    LUT = property(None, put_LUT, None)
    RedValues = property(get_RedValues, put_RedValues, None)
    RemappedBlueValues = property(get_RemappedBlueValues, None, None)
    RemappedColors = property(get_RemappedColors, None, None)
    RemappedGreenValues = property(get_RemappedGreenValues, None, None)
    RemappedRedValues = property(get_RemappedRedValues, None, None)

class IRasterColormap3(_esriDataSourcesRaster.IRasterColormap3):
    _IID = uuid.UUID('0ead5a24-a135-46ee-acc2-2cb6181f1c2b')

    def __init__(self, *args, **kw):
        super(IRasterColormap3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def LoadFrom(self, colormapFileName):
        '''Method IRasterColormap3.LoadFrom

           INPUT
            colormapFileName    : BSTR'''
        return super(IRasterColormap3, self).LoadFrom(colormapFileName)
    def SaveTo(self, colormapFileName):
        '''Method IRasterColormap3.SaveTo

           INPUT
            colormapFileName    : BSTR'''
        return super(IRasterColormap3, self).SaveTo(colormapFileName)
    def put_LUT(self, _arg1):
        '''Method IRasterColormap2.put_LUT (from IRasterColormap2)

           INPUT
            _arg1               : ITable*'''
        return super(IRasterColormap3, self).put_LUT(_arg1)
    def get_RemappedColors(self):
        '''Method IRasterColormap2.get_RemappedColors (from IRasterColormap2)

           OUTPUT
            pColors             : VARIANT*'''
        return super(IRasterColormap3, self).get_RemappedColors()
    def get_RemappedRedValues(self):
        '''Method IRasterColormap2.get_RemappedRedValues (from IRasterColormap2)

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap3, self).get_RemappedRedValues()
    def get_RemappedGreenValues(self):
        '''Method IRasterColormap2.get_RemappedGreenValues (from IRasterColormap2)

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap3, self).get_RemappedGreenValues()
    def get_RemappedBlueValues(self):
        '''Method IRasterColormap2.get_RemappedBlueValues (from IRasterColormap2)

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap3, self).get_RemappedBlueValues()
    def get_BinFunction(self):
        '''Method IRasterColormap2.get_BinFunction (from IRasterColormap2)

           OUTPUT
            ppBinFunction       : IBinFunction**'''
        return super(IRasterColormap3, self).get_BinFunction()
    def get_RedValues(self):
        '''Method IRasterColormap.get_RedValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap3, self).get_RedValues()
    def put_RedValues(self, val):
        '''Method IRasterColormap.put_RedValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap3, self).put_RedValues(val)
    def get_GreenValues(self):
        '''Method IRasterColormap.get_GreenValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap3, self).get_GreenValues()
    def put_GreenValues(self, val):
        '''Method IRasterColormap.put_GreenValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap3, self).put_GreenValues(val)
    def get_BlueValues(self):
        '''Method IRasterColormap.get_BlueValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap3, self).get_BlueValues()
    def put_BlueValues(self, val):
        '''Method IRasterColormap.put_BlueValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap3, self).put_BlueValues(val)
    def get_Colors(self):
        '''Method IRasterColormap.get_Colors (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap3, self).get_Colors()
    def put_Colors(self, val):
        '''Method IRasterColormap.put_Colors (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap3, self).put_Colors(val)
    def Bin(self, pixval):
        '''Method IRasterColormap.Bin (from IRasterColormap)

           INPUT
            pixval              : double

           OUTPUT
            Bin                 : long*'''
        return super(IRasterColormap3, self).Bin(pixval)
    BinFunction = property(get_BinFunction, None, None)
    BlueValues = property(get_BlueValues, put_BlueValues, None)
    Colors = property(get_Colors, put_Colors, None)
    GreenValues = property(get_GreenValues, put_GreenValues, None)
    LUT = property(None, put_LUT, None)
    RedValues = property(get_RedValues, put_RedValues, None)
    RemappedBlueValues = property(get_RemappedBlueValues, None, None)
    RemappedColors = property(get_RemappedColors, None, None)
    RemappedGreenValues = property(get_RemappedGreenValues, None, None)
    RemappedRedValues = property(get_RemappedRedValues, None, None)

class IRasterColormap4(_esriDataSourcesRaster.IRasterColormap4):
    _IID = uuid.UUID('706f687a-ae96-416f-aeeb-bd234bbb7dc9')

    def __init__(self, *args, **kw):
        super(IRasterColormap4, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Values(self):
        '''Method IRasterColormap4.get_Values

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap4, self).get_Values()
    def put_Values(self, pValues):
        '''Method IRasterColormap4.put_Values

           INPUT
            pValues             : VARIANT'''
        return super(IRasterColormap4, self).put_Values(pValues)
    def QueryMinMax(self):
        '''Method IRasterColormap4.QueryMinMax

           OUTPUTS
            Min                 : long*
            Max                 : long*'''
        return super(IRasterColormap4, self).QueryMinMax()
    def LoadFromString(self, colormapDefinition):
        '''Method IRasterColormap4.LoadFromString

           INPUT
            colormapDefinition  : BSTR'''
        return super(IRasterColormap4, self).LoadFromString(colormapDefinition)
    def get_Size(self):
        '''Method IRasterColormap4.get_Size

           OUTPUT
            Size                : long*'''
        return super(IRasterColormap4, self).get_Size()
    def LoadFrom(self, colormapFileName):
        '''Method IRasterColormap3.LoadFrom (from IRasterColormap3)

           INPUT
            colormapFileName    : BSTR'''
        return super(IRasterColormap4, self).LoadFrom(colormapFileName)
    def SaveTo(self, colormapFileName):
        '''Method IRasterColormap3.SaveTo (from IRasterColormap3)

           INPUT
            colormapFileName    : BSTR'''
        return super(IRasterColormap4, self).SaveTo(colormapFileName)
    def put_LUT(self, _arg1):
        '''Method IRasterColormap2.put_LUT (from IRasterColormap2)

           INPUT
            _arg1               : ITable*'''
        return super(IRasterColormap4, self).put_LUT(_arg1)
    def get_RemappedColors(self):
        '''Method IRasterColormap2.get_RemappedColors (from IRasterColormap2)

           OUTPUT
            pColors             : VARIANT*'''
        return super(IRasterColormap4, self).get_RemappedColors()
    def get_RemappedRedValues(self):
        '''Method IRasterColormap2.get_RemappedRedValues (from IRasterColormap2)

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap4, self).get_RemappedRedValues()
    def get_RemappedGreenValues(self):
        '''Method IRasterColormap2.get_RemappedGreenValues (from IRasterColormap2)

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap4, self).get_RemappedGreenValues()
    def get_RemappedBlueValues(self):
        '''Method IRasterColormap2.get_RemappedBlueValues (from IRasterColormap2)

           OUTPUT
            pValues             : VARIANT*'''
        return super(IRasterColormap4, self).get_RemappedBlueValues()
    def get_BinFunction(self):
        '''Method IRasterColormap2.get_BinFunction (from IRasterColormap2)

           OUTPUT
            ppBinFunction       : IBinFunction**'''
        return super(IRasterColormap4, self).get_BinFunction()
    def get_RedValues(self):
        '''Method IRasterColormap.get_RedValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap4, self).get_RedValues()
    def put_RedValues(self, val):
        '''Method IRasterColormap.put_RedValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap4, self).put_RedValues(val)
    def get_GreenValues(self):
        '''Method IRasterColormap.get_GreenValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap4, self).get_GreenValues()
    def put_GreenValues(self, val):
        '''Method IRasterColormap.put_GreenValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap4, self).put_GreenValues(val)
    def get_BlueValues(self):
        '''Method IRasterColormap.get_BlueValues (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap4, self).get_BlueValues()
    def put_BlueValues(self, val):
        '''Method IRasterColormap.put_BlueValues (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap4, self).put_BlueValues(val)
    def get_Colors(self):
        '''Method IRasterColormap.get_Colors (from IRasterColormap)

           OUTPUT
            val                 : VARIANT*'''
        return super(IRasterColormap4, self).get_Colors()
    def put_Colors(self, val):
        '''Method IRasterColormap.put_Colors (from IRasterColormap)

           INPUT
            val                 : VARIANT'''
        return super(IRasterColormap4, self).put_Colors(val)
    def Bin(self, pixval):
        '''Method IRasterColormap.Bin (from IRasterColormap)

           INPUT
            pixval              : double

           OUTPUT
            Bin                 : long*'''
        return super(IRasterColormap4, self).Bin(pixval)
    BinFunction = property(get_BinFunction, None, None)
    BlueValues = property(get_BlueValues, put_BlueValues, None)
    Colors = property(get_Colors, put_Colors, None)
    GreenValues = property(get_GreenValues, put_GreenValues, None)
    LUT = property(None, put_LUT, None)
    RedValues = property(get_RedValues, put_RedValues, None)
    RemappedBlueValues = property(get_RemappedBlueValues, None, None)
    RemappedColors = property(get_RemappedColors, None, None)
    RemappedGreenValues = property(get_RemappedGreenValues, None, None)
    RemappedRedValues = property(get_RemappedRedValues, None, None)
    Size = property(get_Size, None, None)
    Values = property(get_Values, put_Values, None)

class IRasterDatasetJukebox(_esriDataSourcesRaster.IRasterDatasetJukebox):
    _IID = uuid.UUID('93607a44-e66b-4e6f-bd9b-e34cb8de213e')

    def __init__(self, *args, **kw):
        super(IRasterDatasetJukebox, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_SubdatasetCount(self):
        '''Method IRasterDatasetJukebox.get_SubdatasetCount

           OUTPUT
            pCount              : long*'''
        return super(IRasterDatasetJukebox, self).get_SubdatasetCount()
    def get_Subdataset(self):
        '''Method IRasterDatasetJukebox.get_Subdataset

           OUTPUT
            pSubdatasetID       : long*'''
        return super(IRasterDatasetJukebox, self).get_Subdataset()
    def put_Subdataset(self, pSubdatasetID):
        '''Method IRasterDatasetJukebox.put_Subdataset

           INPUT
            pSubdatasetID       : long'''
        return super(IRasterDatasetJukebox, self).put_Subdataset(pSubdatasetID)
    def get_SubdatasetName(self, SubdatasetID):
        '''Method IRasterDatasetJukebox.get_SubdatasetName

           INPUT
            SubdatasetID        : long

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterDatasetJukebox, self).get_SubdatasetName(SubdatasetID)
    def get_SubdatasetDescription(self, SubdatasetID):
        '''Method IRasterDatasetJukebox.get_SubdatasetDescription

           INPUT
            SubdatasetID        : long

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRasterDatasetJukebox, self).get_SubdatasetDescription(SubdatasetID)
    Subdataset = property(get_Subdataset, put_Subdataset, None)
    SubdatasetCount = property(get_SubdatasetCount, None, None)
    SubdatasetDescription = IndexProperty(get_SubdatasetDescription, None)
    SubdatasetName = IndexProperty(get_SubdatasetName, None)

class IRasterResamplingControl(_esriDataSourcesRaster.IRasterResamplingControl):
    _IID = uuid.UUID('dfef659c-012d-41ae-965d-5e1ec4841add')

    def __init__(self, *args, **kw):
        super(IRasterResamplingControl, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ResamplingHint(self):
        '''Method IRasterResamplingControl.get_ResamplingHint

           OUTPUT
            pHint               : esriRasterResamplingHint*'''
        return super(IRasterResamplingControl, self).get_ResamplingHint()
    def put_ResamplingHint(self, pHint):
        '''Method IRasterResamplingControl.put_ResamplingHint

           INPUT
            pHint               : esriRasterResamplingHint'''
        return super(IRasterResamplingControl, self).put_ResamplingHint(pHint)
    ResamplingHint = property(get_ResamplingHint, put_ResamplingHint, None)

class IMosaicOperator(_esriDataSourcesRaster.IMosaicOperator):
    _IID = uuid.UUID('7d94e2c9-cd9a-41a6-bb5b-64ef0e7f784d')

    def __init__(self, *args, **kw):
        super(IMosaicOperator, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Properties(self):
        '''Method IMosaicOperator.get_Properties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IMosaicOperator, self).get_Properties()
    def put_Properties(self, ppProperties):
        '''Method IMosaicOperator.put_Properties

           INPUT
            ppProperties        : IPropertySet*'''
        return super(IMosaicOperator, self).put_Properties(ppProperties)
    def Init(self, nBands, nBlockCols, nBlockRows):
        '''Method IMosaicOperator.Init

           INPUTS
            nBands              : long
            nBlockCols          : long
            nBlockRows          : long'''
        return super(IMosaicOperator, self).Init(nBands, nBlockCols, nBlockRows)
    def put_CurrentBand(self, _arg1):
        '''Method IMosaicOperator.put_CurrentBand

           INPUT
            _arg1               : long'''
        return super(IMosaicOperator, self).put_CurrentBand(_arg1)
    def Operate(self, x, y, v1):
        '''Method IMosaicOperator.Operate

           INPUTS
            x                   : long
            y                   : long
            v1                  : long

           OUTPUT
            v2                  : long*'''
        return super(IMosaicOperator, self).Operate(x, y, v1)
    CurrentBand = property(None, put_CurrentBand, None)
    Properties = property(get_Properties, put_Properties, None)

class IMosaicOperator2(_esriDataSourcesRaster.IMosaicOperator2):
    _IID = uuid.UUID('54c7ec1d-afe2-40ec-87cd-8136364eead6')
    def Operate(self, x, y, v1):
        '''Method IMosaicOperator2.Operate

           INPUTS
            x                   : long
            y                   : long
            v1                  : double

           OUTPUT
            v2                  : double*'''
        return super(IMosaicOperator2, self).Operate(x, y, v1)

class IMosaicOperator3(_esriDataSourcesRaster.IMosaicOperator3):
    _IID = uuid.UUID('7a7d028c-c5d4-450c-9460-8ad92008c235')
    def Init(self, iCol, iRow, pBlock, pMosaicBlock):
        '''Method IMosaicOperator3.Init

           INPUTS
            iCol                : long
            iRow                : long
            pBlock              : IPixelBlock*
            pMosaicBlock        : IPixelBlock*'''
        return super(IMosaicOperator3, self).Init(iCol, iRow, pBlock, pMosaicBlock)

class IMosaicRaster(_esriDataSourcesRaster.IMosaicRaster):
    _IID = uuid.UUID('6ccd314b-1153-42b5-a5f1-aa56e070159c')

    def __init__(self, *args, **kw):
        super(IMosaicRaster, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterCatalog(self):
        '''Method IMosaicRaster.get_RasterCatalog

           OUTPUT
            ppCatalog           : IRasterCatalog**'''
        return super(IMosaicRaster, self).get_RasterCatalog()
    def putref_RasterCatalog(self, ppCatalog):
        '''Method IMosaicRaster.putref_RasterCatalog

           INPUT
            ppCatalog           : IRasterCatalog*'''
        return super(IMosaicRaster, self).putref_RasterCatalog(ppCatalog)
    def get_WhereClause(self):
        '''Method IMosaicRaster.get_WhereClause

           OUTPUT
            WhereClause         : BSTR*'''
        return super(IMosaicRaster, self).get_WhereClause()
    def put_WhereClause(self, WhereClause):
        '''Method IMosaicRaster.put_WhereClause

           INPUT
            WhereClause         : BSTR'''
        return super(IMosaicRaster, self).put_WhereClause(WhereClause)
    def get_OrderByField(self):
        '''Method IMosaicRaster.get_OrderByField

           OUTPUT
            OrderByField        : BSTR*'''
        return super(IMosaicRaster, self).get_OrderByField()
    def put_OrderByField(self, OrderByField):
        '''Method IMosaicRaster.put_OrderByField

           INPUT
            OrderByField        : BSTR'''
        return super(IMosaicRaster, self).put_OrderByField(OrderByField)
    def get_Ascending(self):
        '''Method IMosaicRaster.get_Ascending

           OUTPUT
            Ascending           : VARIANT_BOOL*'''
        return super(IMosaicRaster, self).get_Ascending()
    def put_Ascending(self, Ascending):
        '''Method IMosaicRaster.put_Ascending

           INPUT
            Ascending           : VARIANT_BOOL'''
        return super(IMosaicRaster, self).put_Ascending(Ascending)
    def get_MosaicOperatorType(self):
        '''Method IMosaicRaster.get_MosaicOperatorType

           OUTPUT
            Type                : rstMosaicOperatorType*'''
        return super(IMosaicRaster, self).get_MosaicOperatorType()
    def put_MosaicOperatorType(self, Type):
        '''Method IMosaicRaster.put_MosaicOperatorType

           INPUT
            Type                : rstMosaicOperatorType'''
        return super(IMosaicRaster, self).put_MosaicOperatorType(Type)
    def get_MosaicOperator(self):
        '''Method IMosaicRaster.get_MosaicOperator

           OUTPUT
            op                  : IMosaicOperator**'''
        return super(IMosaicRaster, self).get_MosaicOperator()
    def putref_MosaicOperator(self, op):
        '''Method IMosaicRaster.putref_MosaicOperator

           INPUT
            op                  : IMosaicOperator*'''
        return super(IMosaicRaster, self).putref_MosaicOperator(op)
    def get_MosaicColormapMode(self):
        '''Method IMosaicRaster.get_MosaicColormapMode

           OUTPUT
            Mode                : rstMosaicColormapMode*'''
        return super(IMosaicRaster, self).get_MosaicColormapMode()
    def put_MosaicColormapMode(self, Mode):
        '''Method IMosaicRaster.put_MosaicColormapMode

           INPUT
            Mode                : rstMosaicColormapMode'''
        return super(IMosaicRaster, self).put_MosaicColormapMode(Mode)
    def get_Colormap(self):
        '''Method IMosaicRaster.get_Colormap

           OUTPUT
            ppColormap          : IRasterColormap**'''
        return super(IMosaicRaster, self).get_Colormap()
    def put_Colormap(self, ppColormap):
        '''Method IMosaicRaster.put_Colormap

           INPUT
            ppColormap          : IRasterColormap*'''
        return super(IMosaicRaster, self).put_Colormap(ppColormap)
    Ascending = property(get_Ascending, put_Ascending, None)
    Colormap = property(get_Colormap, put_Colormap, None)
    MosaicColormapMode = property(get_MosaicColormapMode, put_MosaicColormapMode, None)
    MosaicOperator = property(get_MosaicOperator, putref_MosaicOperator, None)
    MosaicOperatorType = property(get_MosaicOperatorType, put_MosaicOperatorType, None)
    OrderByField = property(get_OrderByField, put_OrderByField, None)
    RasterCatalog = property(get_RasterCatalog, putref_RasterCatalog, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IMosaicRaster2(_esriDataSourcesRaster.IMosaicRaster2):
    _IID = uuid.UUID('77d428cf-3f55-497d-bd5c-9fb7b2d708a9')

    def __init__(self, *args, **kw):
        super(IMosaicRaster2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterCatalogTable(self):
        '''Method IMosaicRaster2.get_RasterCatalogTable

           OUTPUT
            ppCatalogTable      : IRasterCatalogTable**'''
        return super(IMosaicRaster2, self).get_RasterCatalogTable()
    def putref_RasterCatalogTable(self, ppCatalogTable):
        '''Method IMosaicRaster2.putref_RasterCatalogTable

           INPUT
            ppCatalogTable      : IRasterCatalogTable*'''
        return super(IMosaicRaster2, self).putref_RasterCatalogTable(ppCatalogTable)
    def RecalculateCellsize(self, Type):
        '''Method IMosaicRaster2.RecalculateCellsize

           INPUT
            Type                : esriCellsizeType'''
        return super(IMosaicRaster2, self).RecalculateCellsize(Type)
    RasterCatalogTable = property(get_RasterCatalogTable, putref_RasterCatalogTable, None)

class IRawBlocks(_esriDataSourcesRaster.IRawBlocks):
    _IID = uuid.UUID('f20ff8ff-643a-4669-a465-e14a5095e7dd')
    def get_RasterInfo(self):
        '''Method IRawBlocks.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IRawBlocks, self).get_RasterInfo()
    def CreatePixelBlock(self):
        '''Method IRawBlocks.CreatePixelBlock

           OUTPUT
            ppPixelBlock        : IPixelBlock**'''
        return super(IRawBlocks, self).CreatePixelBlock()
    def ReadBlock(self, tx, ty, Level, pPixelBlock):
        '''Method IRawBlocks.ReadBlock

           INPUTS
            tx                  : long
            ty                  : long
            Level               : long
            pPixelBlock         : IPixelBlock*'''
        return super(IRawBlocks, self).ReadBlock(tx, ty, Level, pPixelBlock)
    def WriteBlock(self, tx, ty, Level, pPixelBlock):
        '''Method IRawBlocks.WriteBlock

           INPUTS
            tx                  : long
            ty                  : long
            Level               : long
            pPixelBlock         : IPixelBlock*'''
        return super(IRawBlocks, self).WriteBlock(tx, ty, Level, pPixelBlock)
    def Flush(self):
        '''Method IRawBlocks.Flush'''
        return super(IRawBlocks, self).Flush()
    RasterInfo = property(get_RasterInfo, None, None)

class ICancelListener(_esriDataSourcesRaster.ICancelListener):
    _IID = uuid.UUID('5ab22d9c-392d-4a9e-873a-3a67abdaa9a7')

    def __init__(self, *args, **kw):
        super(ICancelListener, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CancelTracker(self):
        '''Method ICancelListener.get_CancelTracker

           OUTPUT
            ppCancel            : ITrackCancel**'''
        return super(ICancelListener, self).get_CancelTracker()
    def putref_CancelTracker(self, ppCancel):
        '''Method ICancelListener.putref_CancelTracker

           INPUT
            ppCancel            : ITrackCancel*'''
        return super(ICancelListener, self).putref_CancelTracker(ppCancel)
    CancelTracker = property(get_CancelTracker, putref_CancelTracker, None)

class IRasterKeyProperties(_esriDataSourcesRaster.IRasterKeyProperties):
    _IID = uuid.UUID('01002227-f833-40aa-a0c9-429ea383c51f')
    def GetProperty(self, sName):
        '''Method IRasterKeyProperties.GetProperty

           INPUT
            sName               : BSTR

           OUTPUT
            pvtValue            : VARIANT*'''
        return super(IRasterKeyProperties, self).GetProperty(sName)
    def SetProperty(self, sName, vtValue):
        '''Method IRasterKeyProperties.SetProperty

           INPUTS
            sName               : BSTR
            vtValue             : VARIANT'''
        return super(IRasterKeyProperties, self).SetProperty(sName, vtValue)
    def RemoveProperty(self, sName):
        '''Method IRasterKeyProperties.RemoveProperty

           INPUT
            sName               : BSTR'''
        return super(IRasterKeyProperties, self).RemoveProperty(sName)
    def GetAllProperties(self):
        '''Method IRasterKeyProperties.GetAllProperties

           OUTPUTS
            ppNames             : IStringArray**
            ppValues            : IVariantArray**'''
        return super(IRasterKeyProperties, self).GetAllProperties()
    def GetBandProperty(self, sName, BandIndex):
        '''Method IRasterKeyProperties.GetBandProperty

           INPUTS
            sName               : BSTR
            BandIndex           : long

           OUTPUT
            pvtValue            : VARIANT*'''
        return super(IRasterKeyProperties, self).GetBandProperty(sName, BandIndex)
    def SetBandProperty(self, sName, BandIndex, vtValue):
        '''Method IRasterKeyProperties.SetBandProperty

           INPUTS
            sName               : BSTR
            BandIndex           : long
            vtValue             : VARIANT'''
        return super(IRasterKeyProperties, self).SetBandProperty(sName, BandIndex, vtValue)
    def RemoveBandProperty(self, sName, BandIndex):
        '''Method IRasterKeyProperties.RemoveBandProperty

           INPUTS
            sName               : BSTR
            BandIndex           : long'''
        return super(IRasterKeyProperties, self).RemoveBandProperty(sName, BandIndex)
    def GetAllBandProperties(self, BandIndex):
        '''Method IRasterKeyProperties.GetAllBandProperties

           INPUT
            BandIndex           : long

           OUTPUTS
            ppNames             : IStringArray**
            ppValues            : IVariantArray**'''
        return super(IRasterKeyProperties, self).GetAllBandProperties(BandIndex)

class IRasterDatasetContainer(_esriDataSourcesRaster.IRasterDatasetContainer):
    _IID = uuid.UUID('eff39177-b690-40a3-bf51-59cea71fd197')
    def get_IsDynamic(self):
        '''Method IRasterDatasetContainer.get_IsDynamic

           OUTPUT
            pIsDynamic          : VARIANT_BOOL*'''
        return super(IRasterDatasetContainer, self).get_IsDynamic()
    def GetSubRasterDatasetCount(self):
        '''Method IRasterDatasetContainer.GetSubRasterDatasetCount

           OUTPUT
            pCount              : long*'''
        return super(IRasterDatasetContainer, self).GetSubRasterDatasetCount()
    def GetSubRasterDatasetName(self, SubdatasetID):
        '''Method IRasterDatasetContainer.GetSubRasterDatasetName

           INPUT
            SubdatasetID        : long

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterDatasetContainer, self).GetSubRasterDatasetName(SubdatasetID)
    def GetSubRasterDatasetCompleteName(self, SubdatasetID):
        '''Method IRasterDatasetContainer.GetSubRasterDatasetCompleteName

           INPUT
            SubdatasetID        : long

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterDatasetContainer, self).GetSubRasterDatasetCompleteName(SubdatasetID)
    def GetSubRasterDatasetFullName(self, SubdatasetID):
        '''Method IRasterDatasetContainer.GetSubRasterDatasetFullName

           INPUT
            SubdatasetID        : long

           OUTPUT
            ppName              : IName**'''
        return super(IRasterDatasetContainer, self).GetSubRasterDatasetFullName(SubdatasetID)
    def GetSubRasterDatasetByID(self, SubdatasetID):
        '''Method IRasterDatasetContainer.GetSubRasterDatasetByID

           INPUT
            SubdatasetID        : long

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterDatasetContainer, self).GetSubRasterDatasetByID(SubdatasetID)
    def GetSubRasterDatasetByName(self, SubdatasetName):
        '''Method IRasterDatasetContainer.GetSubRasterDatasetByName

           INPUT
            SubdatasetName      : BSTR

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterDatasetContainer, self).GetSubRasterDatasetByName(SubdatasetName)
    IsDynamic = property(get_IsDynamic, None, None)

class IGeoTransformationHelper(_esriDataSourcesRaster.IGeoTransformationHelper):
    _IID = uuid.UUID('1e0bd206-6370-4a39-b79a-cae98f94640b')

    def __init__(self, *args, **kw):
        super(IGeoTransformationHelper, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, pGTs, pCompositionGCS):
        '''Method IGeoTransformationHelper.Init

           INPUTS
            pGTs                : IGeoTransformationOperationSet*
            pCompositionGCS     : IGeographicCoordinateSystem*'''
        return super(IGeoTransformationHelper, self).Init(pGTs, pCompositionGCS)
    def Install(self, pSourceSR, pTargetSR, bAddNew):
        '''Method IGeoTransformationHelper.Install

           INPUTS
            pSourceSR           : ISpatialReference*
            pTargetSR           : ISpatialReference*
            bAddNew             : VARIANT_BOOL'''
        return super(IGeoTransformationHelper, self).Install(pSourceSR, pTargetSR, bAddNew)
    def RemoveAll(self):
        '''Method IGeoTransformationHelper.RemoveAll'''
        return super(IGeoTransformationHelper, self).RemoveAll()
    def putref_DefaultTargetCoordinateSystems(self, ppDefaultTargetCoordinateSystems):
        '''Method IGeoTransformationHelper.putref_DefaultTargetCoordinateSystems

           INPUT
            ppDefaultTargetCoordinateSystems: IArray*'''
        return super(IGeoTransformationHelper, self).putref_DefaultTargetCoordinateSystems(ppDefaultTargetCoordinateSystems)
    def get_DefaultTargetCoordinateSystems(self):
        '''Method IGeoTransformationHelper.get_DefaultTargetCoordinateSystems

           OUTPUT
            ppDefaultTargetCoordinateSystems: IArray**'''
        return super(IGeoTransformationHelper, self).get_DefaultTargetCoordinateSystems()
    def Set(self, direction, pGT, bAddNew):
        '''Method IGeoTransformationHelper.Set

           INPUTS
            direction           : esriTransformDirection
            pGT                 : IGeoTransformation*
            bAddNew             : VARIANT_BOOL'''
        return super(IGeoTransformationHelper, self).Set(direction, pGT, bAddNew)
    DefaultTargetCoordinateSystems = property(get_DefaultTargetCoordinateSystems, putref_DefaultTargetCoordinateSystems, None)

class IRasterCommand(_esriDataSourcesRaster.IRasterCommand):
    _IID = uuid.UUID('7015c99d-2f08-44f9-88f0-8f85a766cb2b')
    def get_Name(self):
        '''Method IRasterCommand.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterCommand, self).get_Name()
    def get_ID(self):
        '''Method IRasterCommand.get_ID

           OUTPUT
            pID                 : long*'''
        return super(IRasterCommand, self).get_ID()
    def get_Argument(self):
        '''Method IRasterCommand.get_Argument

           OUTPUT
            pArgument           : VARIANT*'''
        return super(IRasterCommand, self).get_Argument()
    def Init(self, Name, ID, Argument):
        '''Method IRasterCommand.Init

           INPUTS
            Name                : BSTR
            ID                  : long
            Argument            : VARIANT'''
        return super(IRasterCommand, self).Init(Name, ID, Argument)
    Argument = property(get_Argument, None, None)
    ID = property(get_ID, None, None)
    Name = property(get_Name, None, None)

class IRasterCommands(_esriDataSourcesRaster.IRasterCommands):
    _IID = uuid.UUID('80729c30-3e01-4b32-8075-55c1cc4ab070')
    def Next(self):
        '''Method IRasterCommands.Next

           OUTPUT
            pCommand            : IRasterCommand**'''
        return super(IRasterCommands, self).Next()
    def __iter__(self):
        try:
            val = super(IRasterCommands, self).Next()
            while val:
                yield val
                val = super(IRasterCommands, self).Next()
        except:
            pass

class IRasterCommandResult(_esriDataSourcesRaster.IRasterCommandResult):
    _IID = uuid.UUID('33c156e6-9808-4dda-accb-9a698751c970')
    def get_Command(self):
        '''Method IRasterCommandResult.get_Command

           OUTPUT
            ppCommand           : IRasterCommand**'''
        return super(IRasterCommandResult, self).get_Command()
    def get_Value(self):
        '''Method IRasterCommandResult.get_Value

           OUTPUT
            pValue              : VARIANT*'''
        return super(IRasterCommandResult, self).get_Value()
    def get_Status(self):
        '''Method IRasterCommandResult.get_Status

           OUTPUT
            pStatus             : HRESULT*'''
        return super(IRasterCommandResult, self).get_Status()
    def Init(self, pCommand, Value, Status):
        '''Method IRasterCommandResult.Init

           INPUTS
            pCommand            : IRasterCommand*
            Value               : VARIANT
            Status              : HRESULT'''
        return super(IRasterCommandResult, self).Init(pCommand, Value, Status)
    Command = property(get_Command, None, None)
    Status = property(get_Status, None, None)
    Value = property(get_Value, None, None)

class IRasterCommandResults(_esriDataSourcesRaster.IRasterCommandResults):
    _IID = uuid.UUID('a2a402a8-db1e-4943-a887-243b83fae327')
    def Next(self):
        '''Method IRasterCommandResults.Next

           OUTPUT
            pResult             : IRasterCommandResult**'''
        return super(IRasterCommandResults, self).Next()
    def __iter__(self):
        try:
            val = super(IRasterCommandResults, self).Next()
            while val:
                yield val
                val = super(IRasterCommandResults, self).Next()
        except:
            pass

class IPixelFilter(_esriDataSourcesRaster.IPixelFilter):
    _IID = uuid.UUID('90e3de9d-4fff-4575-b833-3ad29a57eeca')
    def GetSize(self):
        '''Method IPixelFilter.GetSize

           OUTPUTS
            Columns             : long*
            Rows                : long*'''
        return super(IPixelFilter, self).GetSize()
    def GetCenterPosition(self):
        '''Method IPixelFilter.GetCenterPosition

           OUTPUTS
            atColumn            : long*
            atRow               : long*'''
        return super(IPixelFilter, self).GetCenterPosition()
    def Filter(self, pBlock):
        '''Method IPixelFilter.Filter

           INPUT
            pBlock              : IPixelBlock*'''
        return super(IPixelFilter, self).Filter(pBlock)

class IPixelOperation(_esriDataSourcesRaster.IPixelOperation):
    _IID = uuid.UUID('467f7216-8ac1-4aac-98bb-e656c135567a')

    def __init__(self, *args, **kw):
        super(IPixelOperation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PixelFilter(self):
        '''Method IPixelOperation.get_PixelFilter

           OUTPUT
            ppFilter            : IPixelFilter**'''
        return super(IPixelOperation, self).get_PixelFilter()
    def putref_PixelFilter(self, ppFilter):
        '''Method IPixelOperation.putref_PixelFilter

           INPUT
            ppFilter            : IPixelFilter*'''
        return super(IPixelOperation, self).putref_PixelFilter(ppFilter)
    PixelFilter = property(get_PixelFilter, putref_PixelFilter, None)

class IRasterGeometryProc(_esriDataSourcesRaster.IRasterGeometryProc):
    _IID = uuid.UUID('2b473c3c-b18e-11d3-a650-0008c7df88a8')
    def Flip(self, pRaster):
        '''Method IRasterGeometryProc.Flip

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Flip(pRaster)
    def Mirror(self, pRaster):
        '''Method IRasterGeometryProc.Mirror

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Mirror(pRaster)
    def Shift(self, deltaX, deltaY, pRaster):
        '''Method IRasterGeometryProc.Shift

           INPUTS
            deltaX              : double
            deltaY              : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Shift(deltaX, deltaY, pRaster)
    def ReScale(self, xScale, yScale, pRaster):
        '''Method IRasterGeometryProc.ReScale

           INPUTS
            xScale              : double
            yScale              : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).ReScale(xScale, yScale, pRaster)
    def Rotate(self, pPivotPoint, rotateAngle, pRaster):
        '''Method IRasterGeometryProc.Rotate

           INPUTS
            pPivotPoint         : IPoint*
            rotateAngle         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Rotate(pPivotPoint, rotateAngle, pRaster)
    def Warp(self, sourceControlPoints, targetControlPoints, transformType, pRaster):
        '''Method IRasterGeometryProc.Warp

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            transformType       : esriGeoTransTypeEnum
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Warp(sourceControlPoints, targetControlPoints, transformType, pRaster)
    def TwoPointsAdjust(self, sourceControlPoints, targetControlPoints, pRaster):
        '''Method IRasterGeometryProc.TwoPointsAdjust

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).TwoPointsAdjust(sourceControlPoints, targetControlPoints, pRaster)
    def PointsTransform(self, inPoints, isForward, pRaster):
        '''Method IRasterGeometryProc.PointsTransform

           INPUTS
            inPoints            : IPointCollection*
            isForward           : VARIANT_BOOL
            pRaster             : IRaster*

           OUTPUT
            outPoints           : IPointCollection**'''
        return super(IRasterGeometryProc, self).PointsTransform(inPoints, isForward, pRaster)
    def LeastSquareFit(self, sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef):
        '''Method IRasterGeometryProc.LeastSquareFit

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            transformType       : esriGeoTransTypeEnum
            forwardTransformation: VARIANT_BOOL
            returnTransformationCoef: VARIANT_BOOL

           OUTPUT
            pVar                : VARIANT*'''
        return super(IRasterGeometryProc, self).LeastSquareFit(sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef)
    def Reset(self, pRaster):
        '''Method IRasterGeometryProc.Reset

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Reset(pRaster)
    def Rectify(self, saveas_name, Format, pRaster):
        '''Method IRasterGeometryProc.Rectify

           INPUTS
            saveas_name         : BSTR
            Format              : BSTR
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Rectify(saveas_name, Format, pRaster)
    def Register(self, pRaster):
        '''Method IRasterGeometryProc.Register

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Register(pRaster)
    def Clip(self, ipRectangle, pRaster):
        '''Method IRasterGeometryProc.Clip

           INPUTS
            ipRectangle         : IEnvelope*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Clip(ipRectangle, pRaster)
    def ProjectFast(self, pNewSR, resampleType, pCellsize, pRaster):
        '''Method IRasterGeometryProc.ProjectFast

           INPUTS
            pNewSR              : ISpatialReference*
            resampleType        : rstResamplingTypes
            pCellsize           : VARIANT*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).ProjectFast(pNewSR, resampleType, pCellsize, pRaster)
    def Project(self, pNewSR, PrjMethodType, resampleType, newCellsize, pRaster):
        '''Method IRasterGeometryProc.Project

           INPUTS
            pNewSR              : ISpatialReference*
            PrjMethodType       : esriRasterPrjMethodTypeEnum
            resampleType        : rstResamplingTypes
            newCellsize         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Project(pNewSR, PrjMethodType, resampleType, newCellsize, pRaster)
    def Merge(self, saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster):
        '''Method IRasterGeometryProc.Merge

           INPUTS
            saveas_name         : BSTR
            ipWorkspace         : IWorkspace*
            outRasterFormat     : BSTR
            CellSize            : double
            ipSR                : ISpatialReference*
            pRaster             : IRaster*

           OUTPUT
            ippOutRaster        : IRaster**'''
        return super(IRasterGeometryProc, self).Merge(saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster)
    def Mosaic(self, saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster):
        '''Method IRasterGeometryProc.Mosaic

           INPUTS
            saveas_name         : BSTR
            pWorkspace          : IWorkspace*
            outRasterFormat     : BSTR
            CellSize            : double
            pSR                 : ISpatialReference*
            pRaster             : IRaster*

           OUTPUT
            ppOutRaster         : IRaster**'''
        return super(IRasterGeometryProc, self).Mosaic(saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster)
    def Resample(self, resampleType, newCellsize, pRaster):
        '''Method IRasterGeometryProc.Resample

           INPUTS
            resampleType        : rstResamplingTypes
            newCellsize         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc, self).Resample(resampleType, newCellsize, pRaster)
    def get_IsPixelToMapTransSimple(self, pRaster):
        '''Method IRasterGeometryProc.get_IsPixelToMapTransSimple

           INPUT
            pRaster             : IRaster*

           OUTPUT
            isSimple            : VARIANT_BOOL*'''
        return super(IRasterGeometryProc, self).get_IsPixelToMapTransSimple(pRaster)
    IsPixelToMapTransSimple = IndexProperty(get_IsPixelToMapTransSimple, None)

class IRasterGeometryProc2(_esriDataSourcesRaster.IRasterGeometryProc2):
    _IID = uuid.UUID('9092c7c1-5c8f-4ce8-bb2c-5a98e2574ee7')
    def Flip(self, pRaster):
        '''Method IRasterGeometryProc2.Flip

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Flip(pRaster)
    def Mirror(self, pRaster):
        '''Method IRasterGeometryProc2.Mirror

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Mirror(pRaster)
    def Shift(self, deltaX, deltaY, pRaster):
        '''Method IRasterGeometryProc2.Shift

           INPUTS
            deltaX              : double
            deltaY              : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Shift(deltaX, deltaY, pRaster)
    def ReScale(self, xScale, yScale, pRaster):
        '''Method IRasterGeometryProc2.ReScale

           INPUTS
            xScale              : double
            yScale              : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).ReScale(xScale, yScale, pRaster)
    def Rotate(self, ipPivotPoint, rotateAngle, pRaster):
        '''Method IRasterGeometryProc2.Rotate

           INPUTS
            ipPivotPoint        : IPoint*
            rotateAngle         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Rotate(ipPivotPoint, rotateAngle, pRaster)
    def Warp(self, sourceControlPoints, targetControlPoints, transformType, pRaster):
        '''Method IRasterGeometryProc2.Warp

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            transformType       : esriGeoTransTypeEnum
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Warp(sourceControlPoints, targetControlPoints, transformType, pRaster)
    def TwoPointsAdjust(self, sourceControlPoints, targetControlPoints, pRaster):
        '''Method IRasterGeometryProc2.TwoPointsAdjust

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).TwoPointsAdjust(sourceControlPoints, targetControlPoints, pRaster)
    def PointsTransform(self, inPoints, isForward, pRaster):
        '''Method IRasterGeometryProc2.PointsTransform

           INPUTS
            inPoints            : IPointCollection*
            isForward           : VARIANT_BOOL
            pRaster             : IRaster*

           OUTPUT
            outPoints           : IPointCollection**'''
        return super(IRasterGeometryProc2, self).PointsTransform(inPoints, isForward, pRaster)
    def LeastSquareFit(self, sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef):
        '''Method IRasterGeometryProc2.LeastSquareFit

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            transformType       : esriGeoTransTypeEnum
            forwardTransformation: VARIANT_BOOL
            returnTransformationCoef: VARIANT_BOOL

           OUTPUT
            pVar                : VARIANT*'''
        return super(IRasterGeometryProc2, self).LeastSquareFit(sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef)
    def Reset(self, pRaster):
        '''Method IRasterGeometryProc2.Reset

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Reset(pRaster)
    def Rectify(self, saveas_name, Format, pRaster):
        '''Method IRasterGeometryProc2.Rectify

           INPUTS
            saveas_name         : BSTR
            Format              : BSTR
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Rectify(saveas_name, Format, pRaster)
    def Register(self, pRaster):
        '''Method IRasterGeometryProc2.Register

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Register(pRaster)
    def Clip(self, ipRectangle, pRaster):
        '''Method IRasterGeometryProc2.Clip

           INPUTS
            ipRectangle         : IEnvelope*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Clip(ipRectangle, pRaster)
    def ProjectFast(self, pNewSR, resampleType, CellSize, pRaster):
        '''Method IRasterGeometryProc2.ProjectFast

           INPUTS
            pNewSR              : ISpatialReference*
            resampleType        : rstResamplingTypes
            CellSize            : VARIANT*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).ProjectFast(pNewSR, resampleType, CellSize, pRaster)
    def Project(self, ipNewSR, PrjMethodType, resampleType, newCellsize, pRaster):
        '''Method IRasterGeometryProc2.Project

           INPUTS
            ipNewSR             : ISpatialReference*
            PrjMethodType       : esriRasterPrjMethodTypeEnum
            resampleType        : rstResamplingTypes
            newCellsize         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Project(ipNewSR, PrjMethodType, resampleType, newCellsize, pRaster)
    def Merge(self, saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster):
        '''Method IRasterGeometryProc2.Merge

           INPUTS
            saveas_name         : BSTR
            ipWorkspace         : IWorkspace*
            outRasterFormat     : BSTR
            CellSize            : double
            ipSR                : ISpatialReference*
            pRaster             : IRaster*

           OUTPUT
            ippOutRaster        : IRaster**'''
        return super(IRasterGeometryProc2, self).Merge(saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster)
    def Mosaic(self, saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster):
        '''Method IRasterGeometryProc2.Mosaic

           INPUTS
            saveas_name         : BSTR
            ipWorkspace         : IWorkspace*
            outRasterFormat     : BSTR
            CellSize            : double
            ipSR                : ISpatialReference*
            pRaster             : IRaster*

           OUTPUT
            ippOutRaster        : IRaster**'''
        return super(IRasterGeometryProc2, self).Mosaic(saveas_name, ipWorkspace, outRasterFormat, CellSize, ipSR, pRaster)
    def Resample(self, resampleType, newCellsize, pRaster):
        '''Method IRasterGeometryProc2.Resample

           INPUTS
            resampleType        : rstResamplingTypes
            newCellsize         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc2, self).Resample(resampleType, newCellsize, pRaster)
    def get_IsPixelToMapTransSimple(self, pRaster):
        '''Method IRasterGeometryProc2.get_IsPixelToMapTransSimple

           INPUT
            pRaster             : IRaster*

           OUTPUT
            isSimple            : VARIANT_BOOL*'''
        return super(IRasterGeometryProc2, self).get_IsPixelToMapTransSimple(pRaster)
    def GetRasterXFormCount(self, pRaster, band):
        '''Method IRasterGeometryProc2.GetRasterXFormCount

           INPUTS
            pRaster             : IRaster*
            band                : long

           OUTPUT
            XFormCount          : long*'''
        return super(IRasterGeometryProc2, self).GetRasterXFormCount(pRaster, band)
    def GetRasterXFormOrderByIndex(self, pRaster, band, index):
        '''Method IRasterGeometryProc2.GetRasterXFormOrderByIndex

           INPUTS
            pRaster             : IRaster*
            band                : long
            index               : long

           OUTPUT
            Order               : esriGeoTransTypeEnum*'''
        return super(IRasterGeometryProc2, self).GetRasterXFormOrderByIndex(pRaster, band, index)
    def GetRasterXFormByIndex(self, pRaster, band, forward, index):
        '''Method IRasterGeometryProc2.GetRasterXFormByIndex

           INPUTS
            pRaster             : IRaster*
            band                : long
            forward             : VARIANT_BOOL
            index               : long

           OUTPUTS
            Order               : esriGeoTransTypeEnum*
            pVar                : VARIANT*'''
        return super(IRasterGeometryProc2, self).GetRasterXFormByIndex(pRaster, band, forward, index)
    def PutRasterXForm(self, pRaster, clean, Order, pVar):
        '''Method IRasterGeometryProc2.PutRasterXForm

           INPUTS
            pRaster             : IRaster*
            clean               : VARIANT_BOOL
            Order               : esriGeoTransTypeEnum
            pVar                : VARIANT*'''
        return super(IRasterGeometryProc2, self).PutRasterXForm(pRaster, clean, Order, pVar)
    def WKSPointsMap2PixelTransform(self, pointsCount, inPoints, isForward, pRaster):
        '''Method IRasterGeometryProc2.WKSPointsMap2PixelTransform

           INPUTS
            pointsCount         : long
            inPoints            : WKSPoint*
            isForward           : VARIANT_BOOL
            pRaster             : IRaster*

           OUTPUT
            outPoints           : WKSPoint*'''
        return super(IRasterGeometryProc2, self).WKSPointsMap2PixelTransform(pointsCount, inPoints, isForward, pRaster)
    IsPixelToMapTransSimple = IndexProperty(get_IsPixelToMapTransSimple, None)

class IRasterGeometryProc3(_esriDataSourcesRaster.IRasterGeometryProc3):
    _IID = uuid.UUID('ded6b7b3-5158-4f28-a970-86529c5d0696')
    def Flip(self, pRaster):
        '''Method IRasterGeometryProc3.Flip

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Flip(pRaster)
    def Mirror(self, pRaster):
        '''Method IRasterGeometryProc3.Mirror

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Mirror(pRaster)
    def Shift(self, deltaX, deltaY, pRaster):
        '''Method IRasterGeometryProc3.Shift

           INPUTS
            deltaX              : double
            deltaY              : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Shift(deltaX, deltaY, pRaster)
    def ReScale(self, xScale, yScale, pRaster):
        '''Method IRasterGeometryProc3.ReScale

           INPUTS
            xScale              : double
            yScale              : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).ReScale(xScale, yScale, pRaster)
    def Rotate(self, ipPivotPoint, rotateAngle, pRaster):
        '''Method IRasterGeometryProc3.Rotate

           INPUTS
            ipPivotPoint        : IPoint*
            rotateAngle         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Rotate(ipPivotPoint, rotateAngle, pRaster)
    def Warp(self, sourceControlPoints, targetControlPoints, transformType, pRaster):
        '''Method IRasterGeometryProc3.Warp

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            transformType       : esriGeoTransTypeEnum
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Warp(sourceControlPoints, targetControlPoints, transformType, pRaster)
    def TwoPointsAdjust(self, sourceControlPoints, targetControlPoints, pRaster):
        '''Method IRasterGeometryProc3.TwoPointsAdjust

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).TwoPointsAdjust(sourceControlPoints, targetControlPoints, pRaster)
    def PointsTransform(self, inPoints, isForward, pRaster):
        '''Method IRasterGeometryProc3.PointsTransform

           INPUTS
            inPoints            : IPointCollection*
            isForward           : VARIANT_BOOL
            pRaster             : IRaster*

           OUTPUT
            outPoints           : IPointCollection**'''
        return super(IRasterGeometryProc3, self).PointsTransform(inPoints, isForward, pRaster)
    def LeastSquareFit(self, sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef):
        '''Method IRasterGeometryProc3.LeastSquareFit

           INPUTS
            sourceControlPoints : IPointCollection*
            targetControlPoints : IPointCollection*
            transformType       : esriGeoTransTypeEnum
            forwardTransformation: VARIANT_BOOL
            returnTransformationCoef: VARIANT_BOOL

           OUTPUT
            pVar                : VARIANT*'''
        return super(IRasterGeometryProc3, self).LeastSquareFit(sourceControlPoints, targetControlPoints, transformType, forwardTransformation, returnTransformationCoef)
    def Reset(self, pRaster):
        '''Method IRasterGeometryProc3.Reset

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Reset(pRaster)
    def Rectify(self, saveas_name, Format, pRaster):
        '''Method IRasterGeometryProc3.Rectify

           INPUTS
            saveas_name         : BSTR
            Format              : BSTR
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Rectify(saveas_name, Format, pRaster)
    def Register(self, pRaster):
        '''Method IRasterGeometryProc3.Register

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Register(pRaster)
    def Clip(self, pRectangle, pRaster):
        '''Method IRasterGeometryProc3.Clip

           INPUTS
            pRectangle          : IEnvelope*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Clip(pRectangle, pRaster)
    def ProjectFast(self, pNewSR, resampleType, CellSize, pRaster):
        '''Method IRasterGeometryProc3.ProjectFast

           INPUTS
            pNewSR              : ISpatialReference*
            resampleType        : rstResamplingTypes
            CellSize            : VARIANT*
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).ProjectFast(pNewSR, resampleType, CellSize, pRaster)
    def Project(self, pNewSR, PrjMethodType, resampleType, newCellsize, pRaster):
        '''Method IRasterGeometryProc3.Project

           INPUTS
            pNewSR              : ISpatialReference*
            PrjMethodType       : esriRasterPrjMethodTypeEnum
            resampleType        : rstResamplingTypes
            newCellsize         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Project(pNewSR, PrjMethodType, resampleType, newCellsize, pRaster)
    def Merge(self, saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster):
        '''Method IRasterGeometryProc3.Merge

           INPUTS
            saveas_name         : BSTR
            pWorkspace          : IWorkspace*
            outRasterFormat     : BSTR
            CellSize            : double
            pSR                 : ISpatialReference*
            pRaster             : IRaster*

           OUTPUT
            ppOutRaster         : IRaster**'''
        return super(IRasterGeometryProc3, self).Merge(saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster)
    def Mosaic(self, saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster):
        '''Method IRasterGeometryProc3.Mosaic

           INPUTS
            saveas_name         : BSTR
            pWorkspace          : IWorkspace*
            outRasterFormat     : BSTR
            CellSize            : double
            pSR                 : ISpatialReference*
            pRaster             : IRaster*

           OUTPUT
            ppOutRaster         : IRaster**'''
        return super(IRasterGeometryProc3, self).Mosaic(saveas_name, pWorkspace, outRasterFormat, CellSize, pSR, pRaster)
    def Resample(self, resampleType, newCellsize, pRaster):
        '''Method IRasterGeometryProc3.Resample

           INPUTS
            resampleType        : rstResamplingTypes
            newCellsize         : double
            pRaster             : IRaster*'''
        return super(IRasterGeometryProc3, self).Resample(resampleType, newCellsize, pRaster)
    def get_IsPixelToMapTransSimple(self, pRaster):
        '''Method IRasterGeometryProc3.get_IsPixelToMapTransSimple

           INPUT
            pRaster             : IRaster*

           OUTPUT
            isSimple            : VARIANT_BOOL*'''
        return super(IRasterGeometryProc3, self).get_IsPixelToMapTransSimple(pRaster)
    def GetRasterXFormCount(self, pRaster, band):
        '''Method IRasterGeometryProc3.GetRasterXFormCount

           INPUTS
            pRaster             : IRaster*
            band                : long

           OUTPUT
            XFormCount          : long*'''
        return super(IRasterGeometryProc3, self).GetRasterXFormCount(pRaster, band)
    def GetRasterXFormOrderByIndex(self, pRaster, band, index):
        '''Method IRasterGeometryProc3.GetRasterXFormOrderByIndex

           INPUTS
            pRaster             : IRaster*
            band                : long
            index               : long

           OUTPUT
            Order               : esriGeoTransTypeEnum*'''
        return super(IRasterGeometryProc3, self).GetRasterXFormOrderByIndex(pRaster, band, index)
    def GetRasterXFormByIndex(self, pRaster, band, forward, index):
        '''Method IRasterGeometryProc3.GetRasterXFormByIndex

           INPUTS
            pRaster             : IRaster*
            band                : long
            forward             : VARIANT_BOOL
            index               : long

           OUTPUTS
            Order               : esriGeoTransTypeEnum*
            pVar                : VARIANT*'''
        return super(IRasterGeometryProc3, self).GetRasterXFormByIndex(pRaster, band, forward, index)
    def PutRasterXForm(self, pRaster, clean, Order, pVar):
        '''Method IRasterGeometryProc3.PutRasterXForm

           INPUTS
            pRaster             : IRaster*
            clean               : VARIANT_BOOL
            Order               : esriGeoTransTypeEnum
            pVar                : VARIANT*'''
        return super(IRasterGeometryProc3, self).PutRasterXForm(pRaster, clean, Order, pVar)
    def PointsMap2PixelTransform(self, pInPoints, isForward, pRaster):
        '''Method IRasterGeometryProc3.PointsMap2PixelTransform

           INPUTS
            pInPoints           : IPointCollection*
            isForward           : VARIANT_BOOL
            pRaster             : IRaster*

           OUTPUT
            ppOutPoints         : IPointCollection**'''
        return super(IRasterGeometryProc3, self).PointsMap2PixelTransform(pInPoints, isForward, pRaster)
    IsPixelToMapTransSimple = IndexProperty(get_IsPixelToMapTransSimple, None)

class IBasicRasterSdeConnection(_esriDataSourcesRaster.IBasicRasterSdeConnection):
    _IID = uuid.UUID('055452c1-0582-4863-b73e-1185095c2cc9')

    def __init__(self, *args, **kw):
        super(IBasicRasterSdeConnection, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ServerName(self, Name):
        '''Method IBasicRasterSdeConnection.put_ServerName

           INPUT
            Name                : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_ServerName(Name)
    def get_ServerName(self):
        '''Method IBasicRasterSdeConnection.get_ServerName

           OUTPUT
            Name                : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_ServerName()
    def put_Instance(self, Name):
        '''Method IBasicRasterSdeConnection.put_Instance

           INPUT
            Name                : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_Instance(Name)
    def get_Instance(self):
        '''Method IBasicRasterSdeConnection.get_Instance

           OUTPUT
            Name                : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_Instance()
    def put_Database(self, databaseName):
        '''Method IBasicRasterSdeConnection.put_Database

           INPUT
            databaseName        : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_Database(databaseName)
    def get_Database(self):
        '''Method IBasicRasterSdeConnection.get_Database

           OUTPUT
            databaseName        : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_Database()
    def put_SdeRasterName(self, outputName):
        '''Method IBasicRasterSdeConnection.put_SdeRasterName

           INPUT
            outputName          : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_SdeRasterName(outputName)
    def get_SdeRasterName(self):
        '''Method IBasicRasterSdeConnection.get_SdeRasterName

           OUTPUT
            outputName          : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_SdeRasterName()
    def put_UserName(self, UserName):
        '''Method IBasicRasterSdeConnection.put_UserName

           INPUT
            UserName            : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_UserName(UserName)
    def get_UserName(self):
        '''Method IBasicRasterSdeConnection.get_UserName

           OUTPUT
            UserName            : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_UserName()
    def put_Password(self, Password):
        '''Method IBasicRasterSdeConnection.put_Password

           INPUT
            Password            : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_Password(Password)
    def get_Password(self):
        '''Method IBasicRasterSdeConnection.get_Password

           OUTPUT
            Password            : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_Password()
    def put_InputRasterName(self, inputName):
        '''Method IBasicRasterSdeConnection.put_InputRasterName

           INPUT
            inputName           : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_InputRasterName(inputName)
    def get_InputRasterName(self):
        '''Method IBasicRasterSdeConnection.get_InputRasterName

           OUTPUT
            inputName           : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_InputRasterName()
    def put_InputBitMaskName(self, bitMaskName):
        '''Method IBasicRasterSdeConnection.put_InputBitMaskName

           INPUT
            bitMaskName         : BSTR'''
        return super(IBasicRasterSdeConnection, self).put_InputBitMaskName(bitMaskName)
    def get_InputBitMaskName(self):
        '''Method IBasicRasterSdeConnection.get_InputBitMaskName

           OUTPUT
            bitMaskName         : BSTR*'''
        return super(IBasicRasterSdeConnection, self).get_InputBitMaskName()
    def put_SdeWorkspaceName(self, _arg1):
        '''Method IBasicRasterSdeConnection.put_SdeWorkspaceName

           INPUT
            _arg1               : IWorkspaceName*'''
        return super(IBasicRasterSdeConnection, self).put_SdeWorkspaceName(_arg1)
    def get_Raster(self):
        '''Method IBasicRasterSdeConnection.get_Raster

           OUTPUT
            Raster              : IRaster**'''
        return super(IBasicRasterSdeConnection, self).get_Raster()
    def putref_Raster(self, Raster):
        '''Method IBasicRasterSdeConnection.putref_Raster

           INPUT
            Raster              : IRaster*'''
        return super(IBasicRasterSdeConnection, self).putref_Raster(Raster)
    def get_MaskRaster(self):
        '''Method IBasicRasterSdeConnection.get_MaskRaster

           OUTPUT
            MaskRaster          : IRaster**'''
        return super(IBasicRasterSdeConnection, self).get_MaskRaster()
    def putref_MaskRaster(self, MaskRaster):
        '''Method IBasicRasterSdeConnection.putref_MaskRaster

           INPUT
            MaskRaster          : IRaster*'''
        return super(IBasicRasterSdeConnection, self).putref_MaskRaster(MaskRaster)
    Database = property(get_Database, put_Database, None)
    InputBitMaskName = property(get_InputBitMaskName, put_InputBitMaskName, None)
    InputRasterName = property(get_InputRasterName, put_InputRasterName, None)
    Instance = property(get_Instance, put_Instance, None)
    MaskRaster = property(get_MaskRaster, putref_MaskRaster, None)
    Password = property(get_Password, put_Password, None)
    Raster = property(get_Raster, putref_Raster, None)
    SdeRasterName = property(get_SdeRasterName, put_SdeRasterName, None)
    SdeWorkspaceName = property(None, put_SdeWorkspaceName, None)
    ServerName = property(get_ServerName, put_ServerName, None)
    UserName = property(get_UserName, put_UserName, None)

class IRasterSdeCatalog(_esriDataSourcesRaster.IRasterSdeCatalog):
    _IID = uuid.UUID('37a7af98-cbdc-4e5f-b1b5-7706804de6b0')

    def __init__(self, *args, **kw):
        super(IRasterSdeCatalog, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CatalogName(self, catalogElementName):
        '''Method IRasterSdeCatalog.put_CatalogName

           INPUT
            catalogElementName  : BSTR'''
        return super(IRasterSdeCatalog, self).put_CatalogName(catalogElementName)
    def get_CatalogName(self):
        '''Method IRasterSdeCatalog.get_CatalogName

           OUTPUT
            catalogElementName  : BSTR*'''
        return super(IRasterSdeCatalog, self).get_CatalogName()
    def put_RasterName(self, RasterName):
        '''Method IRasterSdeCatalog.put_RasterName

           INPUT
            RasterName          : BSTR'''
        return super(IRasterSdeCatalog, self).put_RasterName(RasterName)
    def get_RasterName(self):
        '''Method IRasterSdeCatalog.get_RasterName

           OUTPUT
            RasterName          : BSTR*'''
        return super(IRasterSdeCatalog, self).get_RasterName()
    CatalogName = property(get_CatalogName, put_CatalogName, None)
    RasterName = property(get_RasterName, put_RasterName, None)

class IRasterSdeServerOperation(_esriDataSourcesRaster.IRasterSdeServerOperation):
    _IID = uuid.UUID('867a268a-0ed0-406b-955d-81eb20d806ea')
    def Create(self):
        '''Method IRasterSdeServerOperation.Create'''
        return super(IRasterSdeServerOperation, self).Create()
    def Update(self):
        '''Method IRasterSdeServerOperation.Update'''
        return super(IRasterSdeServerOperation, self).Update()
    def Delete(self):
        '''Method IRasterSdeServerOperation.Delete'''
        return super(IRasterSdeServerOperation, self).Delete()
    def Mosaic(self):
        '''Method IRasterSdeServerOperation.Mosaic'''
        return super(IRasterSdeServerOperation, self).Mosaic()
    def BuildPyramids(self):
        '''Method IRasterSdeServerOperation.BuildPyramids'''
        return super(IRasterSdeServerOperation, self).BuildPyramids()
    def ComputeStatistics(self):
        '''Method IRasterSdeServerOperation.ComputeStatistics'''
        return super(IRasterSdeServerOperation, self).ComputeStatistics()

class IRasterSdeServerOperation2(_esriDataSourcesRaster.IRasterSdeServerOperation2):
    _IID = uuid.UUID('01540ba6-b1fd-43c7-ab8c-aa04389ad031')
    def Create(self):
        '''Method IRasterSdeServerOperation2.Create'''
        return super(IRasterSdeServerOperation2, self).Create()
    def Update(self):
        '''Method IRasterSdeServerOperation2.Update'''
        return super(IRasterSdeServerOperation2, self).Update()
    def Delete(self):
        '''Method IRasterSdeServerOperation2.Delete'''
        return super(IRasterSdeServerOperation2, self).Delete()
    def Mosaic(self):
        '''Method IRasterSdeServerOperation2.Mosaic'''
        return super(IRasterSdeServerOperation2, self).Mosaic()
    def BuildPyramids(self):
        '''Method IRasterSdeServerOperation2.BuildPyramids'''
        return super(IRasterSdeServerOperation2, self).BuildPyramids()
    def ComputeStatistics(self):
        '''Method IRasterSdeServerOperation2.ComputeStatistics'''
        return super(IRasterSdeServerOperation2, self).ComputeStatistics()
    def Insert(self):
        '''Method IRasterSdeServerOperation2.Insert'''
        return super(IRasterSdeServerOperation2, self).Insert()

class IRasterSdeStorage(_esriDataSourcesRaster.IRasterSdeStorage):
    _IID = uuid.UUID('b4153f6e-fe14-11d3-b2bf-00c04f8edeff')

    def __init__(self, *args, **kw):
        super(IRasterSdeStorage, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TileWidth(self, Width):
        '''Method IRasterSdeStorage.put_TileWidth

           INPUT
            Width               : long'''
        return super(IRasterSdeStorage, self).put_TileWidth(Width)
    def get_TileWidth(self):
        '''Method IRasterSdeStorage.get_TileWidth

           OUTPUT
            Width               : long*'''
        return super(IRasterSdeStorage, self).get_TileWidth()
    def put_TileHeight(self, Height):
        '''Method IRasterSdeStorage.put_TileHeight

           INPUT
            Height              : long'''
        return super(IRasterSdeStorage, self).put_TileHeight(Height)
    def get_TileHeight(self):
        '''Method IRasterSdeStorage.get_TileHeight

           OUTPUT
            Height              : long*'''
        return super(IRasterSdeStorage, self).get_TileHeight()
    def put_PyramidResampleType(self, Method):
        '''Method IRasterSdeStorage.put_PyramidResampleType

           INPUT
            Method              : rstResamplingTypes'''
        return super(IRasterSdeStorage, self).put_PyramidResampleType(Method)
    def get_PyramidResampleType(self):
        '''Method IRasterSdeStorage.get_PyramidResampleType

           OUTPUT
            Method              : rstResamplingTypes*'''
        return super(IRasterSdeStorage, self).get_PyramidResampleType()
    def get_SpatialReference(self):
        '''Method IRasterSdeStorage.get_SpatialReference

           OUTPUT
            spRef               : ISpatialReference**'''
        return super(IRasterSdeStorage, self).get_SpatialReference()
    def putref_SpatialReference(self, spRef):
        '''Method IRasterSdeStorage.putref_SpatialReference

           INPUT
            spRef               : ISpatialReference*'''
        return super(IRasterSdeStorage, self).putref_SpatialReference(spRef)
    def put_PyramidOption(self, option):
        '''Method IRasterSdeStorage.put_PyramidOption

           INPUT
            option              : esriRasterSdePyramidOptEnum'''
        return super(IRasterSdeStorage, self).put_PyramidOption(option)
    def get_PyramidOption(self):
        '''Method IRasterSdeStorage.get_PyramidOption

           OUTPUT
            option              : esriRasterSdePyramidOptEnum*'''
        return super(IRasterSdeStorage, self).get_PyramidOption()
    def put_CompressionType(self, Type):
        '''Method IRasterSdeStorage.put_CompressionType

           INPUT
            Type                : esriRasterSdeCompressionTypeEnum'''
        return super(IRasterSdeStorage, self).put_CompressionType(Type)
    def get_CompressionType(self):
        '''Method IRasterSdeStorage.get_CompressionType

           OUTPUT
            Type                : esriRasterSdeCompressionTypeEnum*'''
        return super(IRasterSdeStorage, self).get_CompressionType()
    def put_Keyword(self, Keyword):
        '''Method IRasterSdeStorage.put_Keyword

           INPUT
            Keyword             : BSTR'''
        return super(IRasterSdeStorage, self).put_Keyword(Keyword)
    def get_Keyword(self):
        '''Method IRasterSdeStorage.get_Keyword

           OUTPUT
            Keyword             : BSTR*'''
        return super(IRasterSdeStorage, self).get_Keyword()
    def put_MosaicingTolerance(self, _arg1):
        '''Method IRasterSdeStorage.put_MosaicingTolerance

           INPUT
            _arg1               : IPoint*'''
        return super(IRasterSdeStorage, self).put_MosaicingTolerance(_arg1)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    Keyword = property(get_Keyword, put_Keyword, None)
    MosaicingTolerance = property(None, put_MosaicingTolerance, None)
    PyramidOption = property(get_PyramidOption, put_PyramidOption, None)
    PyramidResampleType = property(get_PyramidResampleType, put_PyramidResampleType, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TileHeight = property(get_TileHeight, put_TileHeight, None)
    TileWidth = property(get_TileWidth, put_TileWidth, None)

class IRasterSdeStorage2(_esriDataSourcesRaster.IRasterSdeStorage2):
    _IID = uuid.UUID('ddc9c0c4-0556-47b6-80e8-0ca036745441')

    def __init__(self, *args, **kw):
        super(IRasterSdeStorage2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TileWidth(self, Width):
        '''Method IRasterSdeStorage2.put_TileWidth

           INPUT
            Width               : long'''
        return super(IRasterSdeStorage2, self).put_TileWidth(Width)
    def get_TileWidth(self):
        '''Method IRasterSdeStorage2.get_TileWidth

           OUTPUT
            Width               : long*'''
        return super(IRasterSdeStorage2, self).get_TileWidth()
    def put_TileHeight(self, Height):
        '''Method IRasterSdeStorage2.put_TileHeight

           INPUT
            Height              : long'''
        return super(IRasterSdeStorage2, self).put_TileHeight(Height)
    def get_TileHeight(self):
        '''Method IRasterSdeStorage2.get_TileHeight

           OUTPUT
            Height              : long*'''
        return super(IRasterSdeStorage2, self).get_TileHeight()
    def put_PyramidResampleType(self, Method):
        '''Method IRasterSdeStorage2.put_PyramidResampleType

           INPUT
            Method              : rstResamplingTypes'''
        return super(IRasterSdeStorage2, self).put_PyramidResampleType(Method)
    def get_PyramidResampleType(self):
        '''Method IRasterSdeStorage2.get_PyramidResampleType

           OUTPUT
            Method              : rstResamplingTypes*'''
        return super(IRasterSdeStorage2, self).get_PyramidResampleType()
    def get_SpatialReference(self):
        '''Method IRasterSdeStorage2.get_SpatialReference

           OUTPUT
            spRef               : ISpatialReference**'''
        return super(IRasterSdeStorage2, self).get_SpatialReference()
    def putref_SpatialReference(self, spRef):
        '''Method IRasterSdeStorage2.putref_SpatialReference

           INPUT
            spRef               : ISpatialReference*'''
        return super(IRasterSdeStorage2, self).putref_SpatialReference(spRef)
    def put_PyramidOption(self, option):
        '''Method IRasterSdeStorage2.put_PyramidOption

           INPUT
            option              : esriRasterSdePyramidOptEnum'''
        return super(IRasterSdeStorage2, self).put_PyramidOption(option)
    def get_PyramidOption(self):
        '''Method IRasterSdeStorage2.get_PyramidOption

           OUTPUT
            option              : esriRasterSdePyramidOptEnum*'''
        return super(IRasterSdeStorage2, self).get_PyramidOption()
    def put_CompressionType(self, Type):
        '''Method IRasterSdeStorage2.put_CompressionType

           INPUT
            Type                : esriRasterSdeCompressionTypeEnum'''
        return super(IRasterSdeStorage2, self).put_CompressionType(Type)
    def get_CompressionType(self):
        '''Method IRasterSdeStorage2.get_CompressionType

           OUTPUT
            Type                : esriRasterSdeCompressionTypeEnum*'''
        return super(IRasterSdeStorage2, self).get_CompressionType()
    def put_Keyword(self, Keyword):
        '''Method IRasterSdeStorage2.put_Keyword

           INPUT
            Keyword             : BSTR'''
        return super(IRasterSdeStorage2, self).put_Keyword(Keyword)
    def get_Keyword(self):
        '''Method IRasterSdeStorage2.get_Keyword

           OUTPUT
            Keyword             : BSTR*'''
        return super(IRasterSdeStorage2, self).get_Keyword()
    def put_MosaicingTolerance(self, _arg1):
        '''Method IRasterSdeStorage2.put_MosaicingTolerance

           INPUT
            _arg1               : IPoint*'''
        return super(IRasterSdeStorage2, self).put_MosaicingTolerance(_arg1)
    def put_CompressionQuality(self, Value):
        '''Method IRasterSdeStorage2.put_CompressionQuality

           INPUT
            Value               : long'''
        return super(IRasterSdeStorage2, self).put_CompressionQuality(Value)
    def get_CompressionQuality(self):
        '''Method IRasterSdeStorage2.get_CompressionQuality

           OUTPUT
            Value               : long*'''
        return super(IRasterSdeStorage2, self).get_CompressionQuality()
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    Keyword = property(get_Keyword, put_Keyword, None)
    MosaicingTolerance = property(None, put_MosaicingTolerance, None)
    PyramidOption = property(get_PyramidOption, put_PyramidOption, None)
    PyramidResampleType = property(get_PyramidResampleType, put_PyramidResampleType, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TileHeight = property(get_TileHeight, put_TileHeight, None)
    TileWidth = property(get_TileWidth, put_TileWidth, None)

class IRasterDomainExtractor(_esriDataSourcesRaster.IRasterDomainExtractor):
    _IID = uuid.UUID('140bee32-ec2f-11d4-b2b1-00508bcdc74b')
    def ExtractDomain(self, pRaster, bPixelCenterBased):
        '''Method IRasterDomainExtractor.ExtractDomain

           INPUTS
            pRaster             : IRaster*
            bPixelCenterBased   : VARIANT_BOOL

           OUTPUT
            domainPolygon       : IPolygon**'''
        return super(IRasterDomainExtractor, self).ExtractDomain(pRaster, bPixelCenterBased)

class IDEWCSCoverage(_esriDataSourcesRaster.IDEWCSCoverage):
    _IID = uuid.UUID('db9431b1-b871-44d0-a8b9-8aa0e07dbc0d')

    def __init__(self, *args, **kw):
        super(IDEWCSCoverage, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Extent(self):
        '''Method IDEWCSCoverage.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IDEWCSCoverage, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IDEWCSCoverage.putref_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IDEWCSCoverage, self).putref_Extent(Extent)
    def get_SpatialReference(self):
        '''Method IDEWCSCoverage.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IDEWCSCoverage, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IDEWCSCoverage.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IDEWCSCoverage, self).putref_SpatialReference(SpatialReference)
    def get_BandCount(self):
        '''Method IDEWCSCoverage.get_BandCount

           OUTPUT
            Count               : long*'''
        return super(IDEWCSCoverage, self).get_BandCount()
    def put_BandCount(self, Count):
        '''Method IDEWCSCoverage.put_BandCount

           INPUT
            Count               : long'''
        return super(IDEWCSCoverage, self).put_BandCount(Count)
    BandCount = property(get_BandCount, put_BandCount, None)
    Extent = property(get_Extent, putref_Extent, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IDEWMSMap(_esriDataSourcesRaster.IDEWMSMap):
    _IID = uuid.UUID('6b0b1818-47d6-4551-ba69-6f595df5ec81')

    def __init__(self, *args, **kw):
        super(IDEWMSMap, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Extent(self):
        '''Method IDEWMSMap.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IDEWMSMap, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IDEWMSMap.putref_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IDEWMSMap, self).putref_Extent(Extent)
    def get_SpatialReference(self):
        '''Method IDEWMSMap.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IDEWMSMap, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IDEWMSMap.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IDEWMSMap, self).putref_SpatialReference(SpatialReference)
    def get_BandCount(self):
        '''Method IDEWMSMap.get_BandCount

           OUTPUT
            Count               : long*'''
        return super(IDEWMSMap, self).get_BandCount()
    def put_BandCount(self, Count):
        '''Method IDEWMSMap.put_BandCount

           INPUT
            Count               : long'''
        return super(IDEWMSMap, self).put_BandCount(Count)
    def get_Name(self):
        '''Method IDEWMSMap.get_Name

           OUTPUT
            ppWMSConnectionName : IName**'''
        return super(IDEWMSMap, self).get_Name()
    def putref_Name(self, ppWMSConnectionName):
        '''Method IDEWMSMap.putref_Name

           INPUT
            ppWMSConnectionName : IName*'''
        return super(IDEWMSMap, self).putref_Name(ppWMSConnectionName)
    BandCount = property(get_BandCount, put_BandCount, None)
    Extent = property(get_Extent, putref_Extent, None)
    Name = property(get_Name, putref_Name, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IDEImageServer(_esriDataSourcesRaster.IDEImageServer):
    _IID = uuid.UUID('9b872fb3-190a-400f-adbc-759712f27c39')

    def __init__(self, *args, **kw):
        super(IDEImageServer, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Extent(self):
        '''Method IDEImageServer.get_Extent

           OUTPUT
            Extent              : IEnvelope**'''
        return super(IDEImageServer, self).get_Extent()
    def putref_Extent(self, Extent):
        '''Method IDEImageServer.putref_Extent

           INPUT
            Extent              : IEnvelope*'''
        return super(IDEImageServer, self).putref_Extent(Extent)
    def get_SpatialReference(self):
        '''Method IDEImageServer.get_SpatialReference

           OUTPUT
            SpatialReference    : ISpatialReference**'''
        return super(IDEImageServer, self).get_SpatialReference()
    def putref_SpatialReference(self, SpatialReference):
        '''Method IDEImageServer.putref_SpatialReference

           INPUT
            SpatialReference    : ISpatialReference*'''
        return super(IDEImageServer, self).putref_SpatialReference(SpatialReference)
    def get_BandCount(self):
        '''Method IDEImageServer.get_BandCount

           OUTPUT
            Count               : long*'''
        return super(IDEImageServer, self).get_BandCount()
    def put_BandCount(self, Count):
        '''Method IDEImageServer.put_BandCount

           INPUT
            Count               : long'''
        return super(IDEImageServer, self).put_BandCount(Count)
    def get_MosaicProps(self):
        '''Method IDEImageServer.get_MosaicProps

           OUTPUT
            Mosaic              : BSTR*'''
        return super(IDEImageServer, self).get_MosaicProps()
    def put_MosaicProps(self, Mosaic):
        '''Method IDEImageServer.put_MosaicProps

           INPUT
            Mosaic              : BSTR'''
        return super(IDEImageServer, self).put_MosaicProps(Mosaic)
    def get_ClientXADefProps(self):
        '''Method IDEImageServer.get_ClientXADefProps

           OUTPUT
            ClientXADef         : BSTR*'''
        return super(IDEImageServer, self).get_ClientXADefProps()
    def put_ClientXADefProps(self, ClientXADef):
        '''Method IDEImageServer.put_ClientXADefProps

           INPUT
            ClientXADef         : BSTR'''
        return super(IDEImageServer, self).put_ClientXADefProps(ClientXADef)
    BandCount = property(get_BandCount, put_BandCount, None)
    ClientXADefProps = property(get_ClientXADefProps, put_ClientXADefProps, None)
    Extent = property(get_Extent, putref_Extent, None)
    MosaicProps = property(get_MosaicProps, put_MosaicProps, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IDEMosaicDataset(_esriDataSourcesRaster.IDEMosaicDataset):
    _IID = uuid.UUID('b29e01e9-f293-4b0f-9f1a-3bdafc647ea4')

    def __init__(self, *args, **kw):
        super(IDEMosaicDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Content(self):
        '''Method IDEMosaicDataset.get_Content

           OUTPUT
            pContent            : VARIANT*'''
        return super(IDEMosaicDataset, self).get_Content()
    def put_Content(self, pContent):
        '''Method IDEMosaicDataset.put_Content

           INPUT
            pContent            : VARIANT'''
        return super(IDEMosaicDataset, self).put_Content(pContent)
    def get_Referenced(self):
        '''Method IDEMosaicDataset.get_Referenced

           OUTPUT
            pReferenced         : VARIANT_BOOL*'''
        return super(IDEMosaicDataset, self).get_Referenced()
    def put_Referenced(self, pReferenced):
        '''Method IDEMosaicDataset.put_Referenced

           INPUT
            pReferenced         : VARIANT_BOOL'''
        return super(IDEMosaicDataset, self).put_Referenced(pReferenced)
    def get_ChildrenNames(self):
        '''Method IDEMosaicDataset.get_ChildrenNames

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IDEMosaicDataset, self).get_ChildrenNames()
    def putref_ChildrenNames(self, ppNames):
        '''Method IDEMosaicDataset.putref_ChildrenNames

           INPUT
            ppNames             : IStringArray*'''
        return super(IDEMosaicDataset, self).putref_ChildrenNames(ppNames)
    def get_DERasterCatalog(self):
        '''Method IDEMosaicDataset.get_DERasterCatalog

           OUTPUT
            ppDECatalog         : IDERasterCatalog**'''
        return super(IDEMosaicDataset, self).get_DERasterCatalog()
    def putref_DERasterCatalog(self, ppDECatalog):
        '''Method IDEMosaicDataset.putref_DERasterCatalog

           INPUT
            ppDECatalog         : IDERasterCatalog*'''
        return super(IDEMosaicDataset, self).putref_DERasterCatalog(ppDECatalog)
    def get_DefinitionQuery(self):
        '''Method IDEMosaicDataset.get_DefinitionQuery

           OUTPUT
            pQuery              : BSTR*'''
        return super(IDEMosaicDataset, self).get_DefinitionQuery()
    def put_DefinitionQuery(self, pQuery):
        '''Method IDEMosaicDataset.put_DefinitionQuery

           INPUT
            pQuery              : BSTR'''
        return super(IDEMosaicDataset, self).put_DefinitionQuery(pQuery)
    def get_Parameters(self):
        '''Method IDEMosaicDataset.get_Parameters

           OUTPUT
            ppParameters        : IPropertySet**'''
        return super(IDEMosaicDataset, self).get_Parameters()
    def putref_Parameters(self, ppParameters):
        '''Method IDEMosaicDataset.putref_Parameters

           INPUT
            ppParameters        : IPropertySet*'''
        return super(IDEMosaicDataset, self).putref_Parameters(ppParameters)
    ChildrenNames = property(get_ChildrenNames, putref_ChildrenNames, None)
    Content = property(get_Content, put_Content, None)
    DERasterCatalog = property(get_DERasterCatalog, putref_DERasterCatalog, None)
    DefinitionQuery = property(get_DefinitionQuery, put_DefinitionQuery, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    Referenced = property(get_Referenced, put_Referenced, None)

class IDEMosaicDataset2(_esriDataSourcesRaster.IDEMosaicDataset2):
    _IID = uuid.UUID('661474e7-4926-4bcb-b655-052c890ee010')

    def __init__(self, *args, **kw):
        super(IDEMosaicDataset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DERasterAttributeTable(self):
        '''Method IDEMosaicDataset2.get_DERasterAttributeTable

           OUTPUT
            ppTable             : IDETable**'''
        return super(IDEMosaicDataset2, self).get_DERasterAttributeTable()
    def putref_DERasterAttributeTable(self, ppTable):
        '''Method IDEMosaicDataset2.putref_DERasterAttributeTable

           INPUT
            ppTable             : IDETable*'''
        return super(IDEMosaicDataset2, self).putref_DERasterAttributeTable(ppTable)
    def get_Content(self):
        '''Method IDEMosaicDataset.get_Content (from IDEMosaicDataset)

           OUTPUT
            pContent            : VARIANT*'''
        return super(IDEMosaicDataset2, self).get_Content()
    def put_Content(self, pContent):
        '''Method IDEMosaicDataset.put_Content (from IDEMosaicDataset)

           INPUT
            pContent            : VARIANT'''
        return super(IDEMosaicDataset2, self).put_Content(pContent)
    def get_Referenced(self):
        '''Method IDEMosaicDataset.get_Referenced (from IDEMosaicDataset)

           OUTPUT
            pReferenced         : VARIANT_BOOL*'''
        return super(IDEMosaicDataset2, self).get_Referenced()
    def put_Referenced(self, pReferenced):
        '''Method IDEMosaicDataset.put_Referenced (from IDEMosaicDataset)

           INPUT
            pReferenced         : VARIANT_BOOL'''
        return super(IDEMosaicDataset2, self).put_Referenced(pReferenced)
    def get_ChildrenNames(self):
        '''Method IDEMosaicDataset.get_ChildrenNames (from IDEMosaicDataset)

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IDEMosaicDataset2, self).get_ChildrenNames()
    def putref_ChildrenNames(self, ppNames):
        '''Method IDEMosaicDataset.putref_ChildrenNames (from IDEMosaicDataset)

           INPUT
            ppNames             : IStringArray*'''
        return super(IDEMosaicDataset2, self).putref_ChildrenNames(ppNames)
    def get_DERasterCatalog(self):
        '''Method IDEMosaicDataset.get_DERasterCatalog (from IDEMosaicDataset)

           OUTPUT
            ppDECatalog         : IDERasterCatalog**'''
        return super(IDEMosaicDataset2, self).get_DERasterCatalog()
    def putref_DERasterCatalog(self, ppDECatalog):
        '''Method IDEMosaicDataset.putref_DERasterCatalog (from IDEMosaicDataset)

           INPUT
            ppDECatalog         : IDERasterCatalog*'''
        return super(IDEMosaicDataset2, self).putref_DERasterCatalog(ppDECatalog)
    def get_DefinitionQuery(self):
        '''Method IDEMosaicDataset.get_DefinitionQuery (from IDEMosaicDataset)

           OUTPUT
            pQuery              : BSTR*'''
        return super(IDEMosaicDataset2, self).get_DefinitionQuery()
    def put_DefinitionQuery(self, pQuery):
        '''Method IDEMosaicDataset.put_DefinitionQuery (from IDEMosaicDataset)

           INPUT
            pQuery              : BSTR'''
        return super(IDEMosaicDataset2, self).put_DefinitionQuery(pQuery)
    def get_Parameters(self):
        '''Method IDEMosaicDataset.get_Parameters (from IDEMosaicDataset)

           OUTPUT
            ppParameters        : IPropertySet**'''
        return super(IDEMosaicDataset2, self).get_Parameters()
    def putref_Parameters(self, ppParameters):
        '''Method IDEMosaicDataset.putref_Parameters (from IDEMosaicDataset)

           INPUT
            ppParameters        : IPropertySet*'''
        return super(IDEMosaicDataset2, self).putref_Parameters(ppParameters)
    ChildrenNames = property(get_ChildrenNames, putref_ChildrenNames, None)
    Content = property(get_Content, put_Content, None)
    DERasterAttributeTable = property(get_DERasterAttributeTable, putref_DERasterAttributeTable, None)
    DERasterCatalog = property(get_DERasterCatalog, putref_DERasterCatalog, None)
    DefinitionQuery = property(get_DefinitionQuery, put_DefinitionQuery, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    Referenced = property(get_Referenced, put_Referenced, None)

class IItemPaths(_esriDataSourcesRaster.IItemPaths):
    _IID = uuid.UUID('cafd4e87-0672-43e0-b92d-175306c1a309')
    def GetPaths(self):
        '''Method IItemPaths.GetPaths

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IItemPaths, self).GetPaths()
    def ReplacePaths(self, pOldPaths, pNewPaths):
        '''Method IItemPaths.ReplacePaths

           INPUTS
            pOldPaths           : IStringArray*
            pNewPaths           : IStringArray*'''
        return super(IItemPaths, self).ReplacePaths(pOldPaths, pNewPaths)

class IPixelFilter2(_esriDataSourcesRaster.IPixelFilter2):
    _IID = uuid.UUID('ed30705b-437a-4ff4-93b3-f1947c70668b')
    def Init(self, nCols, nRows, pExtent):
        '''Method IPixelFilter2.Init

           INPUTS
            nCols               : long
            nRows               : long
            pExtent             : IEnvelope*'''
        return super(IPixelFilter2, self).Init(nCols, nRows, pExtent)
    def InitBlock(self, pTopLeft, nBlkCols, nBlkRows):
        '''Method IPixelFilter2.InitBlock

           INPUTS
            pTopLeft            : IPnt*
            nBlkCols            : long
            nBlkRows            : long'''
        return super(IPixelFilter2, self).InitBlock(pTopLeft, nBlkCols, nBlkRows)

class IPixelFilter3(_esriDataSourcesRaster.IPixelFilter3):
    _IID = uuid.UUID('0ed41a27-9699-4b09-b3af-7cffd9f57c28')
    def Synchronize(self, pRaster):
        '''Method IPixelFilter3.Synchronize

           INPUT
            pRaster             : IRaster*'''
        return super(IPixelFilter3, self).Synchronize(pRaster)

class IBackgroundFilter(_esriDataSourcesRaster.IBackgroundFilter):
    _IID = uuid.UUID('b0aacb96-c31c-49b6-be07-a013bbc454e4')

    def __init__(self, *args, **kw):
        super(IBackgroundFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Background(self):
        '''Method IBackgroundFilter.get_Background

           OUTPUT
            Value               : VARIANT*'''
        return super(IBackgroundFilter, self).get_Background()
    def put_Background(self, Value):
        '''Method IBackgroundFilter.put_Background

           INPUT
            Value               : VARIANT'''
        return super(IBackgroundFilter, self).put_Background(Value)
    Background = property(get_Background, put_Background, None)

class IColormapFilter(_esriDataSourcesRaster.IColormapFilter):
    _IID = uuid.UUID('09d1a037-40ef-42b0-85a6-96c0f4641f19')
    def Match(self, cm1, cm2, ncolors):
        '''Method IColormapFilter.Match

           INPUTS
            cm1                 : IRasterColormap*
            cm2                 : IRasterColormap*
            ncolors             : long'''
        return super(IColormapFilter, self).Match(cm1, cm2, ncolors)

class ILutFilter(_esriDataSourcesRaster.ILutFilter):
    _IID = uuid.UUID('d6358c16-c5f9-46c9-8283-952d79f3c2d5')

    def __init__(self, *args, **kw):
        super(ILutFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Min(self):
        '''Method ILutFilter.get_Min

           OUTPUT
            Value               : long*'''
        return super(ILutFilter, self).get_Min()
    def put_Min(self, Value):
        '''Method ILutFilter.put_Min

           INPUT
            Value               : long'''
        return super(ILutFilter, self).put_Min(Value)
    def get_Size(self):
        '''Method ILutFilter.get_Size

           OUTPUT
            Size                : long*'''
        return super(ILutFilter, self).get_Size()
    def put_Size(self, Size):
        '''Method ILutFilter.put_Size

           INPUT
            Size                : long'''
        return super(ILutFilter, self).put_Size(Size)
    def Get(self, v1):
        '''Method ILutFilter.Get

           INPUT
            v1                  : long

           OUTPUT
            v2                  : long*'''
        return super(ILutFilter, self).Get(v1)
    def Set(self, v1, v2):
        '''Method ILutFilter.Set

           INPUTS
            v1                  : long
            v2                  : long'''
        return super(ILutFilter, self).Set(v1, v2)
    Min = property(get_Min, put_Min, None)
    Size = property(get_Size, put_Size, None)

class IPixelFilterCollection(_esriDataSourcesRaster.IPixelFilterCollection):
    _IID = uuid.UUID('9e73cb76-57e8-4d93-bb45-1f4552a9c8de')
    def get_FilterCount(self):
        '''Method IPixelFilterCollection.get_FilterCount

           OUTPUT
            Count               : long*'''
        return super(IPixelFilterCollection, self).get_FilterCount()
    def Insert(self, index, pFilter):
        '''Method IPixelFilterCollection.Insert

           INPUTS
            index               : long
            pFilter             : IPixelFilter*'''
        return super(IPixelFilterCollection, self).Insert(index, pFilter)
    def Append(self, pFilter):
        '''Method IPixelFilterCollection.Append

           INPUT
            pFilter             : IPixelFilter*'''
        return super(IPixelFilterCollection, self).Append(pFilter)
    def Remove(self, index):
        '''Method IPixelFilterCollection.Remove

           INPUT
            index               : long'''
        return super(IPixelFilterCollection, self).Remove(index)
    def Find(self, pFilter):
        '''Method IPixelFilterCollection.Find

           INPUT
            pFilter             : IPixelFilter*

           OUTPUT
            index               : long*'''
        return super(IPixelFilterCollection, self).Find(pFilter)
    def Get(self, index):
        '''Method IPixelFilterCollection.Get

           INPUT
            index               : long

           OUTPUT
            ppFilter            : IPixelFilter**'''
        return super(IPixelFilterCollection, self).Get(index)
    def Set(self, index, pFilter):
        '''Method IPixelFilterCollection.Set

           INPUTS
            index               : long
            pFilter             : IPixelFilter*'''
        return super(IPixelFilterCollection, self).Set(index, pFilter)
    def Empty(self):
        '''Method IPixelFilterCollection.Empty'''
        return super(IPixelFilterCollection, self).Empty()
    FilterCount = property(get_FilterCount, None, None)

class IRasterConvolutionFilter(_esriDataSourcesRaster.IRasterConvolutionFilter):
    _IID = uuid.UUID('64db07df-fc21-4c9a-8441-7cb9791855ea')

    def __init__(self, *args, **kw):
        super(IRasterConvolutionFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def SetSize(self, nColumns, nRows):
        '''Method IRasterConvolutionFilter.SetSize

           INPUTS
            nColumns            : long
            nRows               : long'''
        return super(IRasterConvolutionFilter, self).SetSize(nColumns, nRows)
    def GetSize(self):
        '''Method IRasterConvolutionFilter.GetSize

           OUTPUTS
            nColumns            : long*
            nRows               : long*'''
        return super(IRasterConvolutionFilter, self).GetSize()
    def SetCenterPosition(self, atColumn, atRow):
        '''Method IRasterConvolutionFilter.SetCenterPosition

           INPUTS
            atColumn            : long
            atRow               : long'''
        return super(IRasterConvolutionFilter, self).SetCenterPosition(atColumn, atRow)
    def GetCenterPosition(self):
        '''Method IRasterConvolutionFilter.GetCenterPosition

           OUTPUTS
            atColumn            : long*
            atRow               : long*'''
        return super(IRasterConvolutionFilter, self).GetCenterPosition()
    def PutCoefficients(self):
        '''Method IRasterConvolutionFilter.PutCoefficients

           OUTPUT
            coefList            : SAFEARRAY**'''
        return super(IRasterConvolutionFilter, self).PutCoefficients()
    def QueryCoefficients(self):
        '''Method IRasterConvolutionFilter.QueryCoefficients

           OUTPUT
            coefList            : SAFEARRAY**'''
        return super(IRasterConvolutionFilter, self).QueryCoefficients()
    def put_GainFactor(self, GainFactor):
        '''Method IRasterConvolutionFilter.put_GainFactor

           INPUT
            GainFactor          : double'''
        return super(IRasterConvolutionFilter, self).put_GainFactor(GainFactor)
    def get_GainFactor(self):
        '''Method IRasterConvolutionFilter.get_GainFactor

           OUTPUT
            GainFactor          : double*'''
        return super(IRasterConvolutionFilter, self).get_GainFactor()
    def put_Recursive(self, Recursive):
        '''Method IRasterConvolutionFilter.put_Recursive

           INPUT
            Recursive           : VARIANT_BOOL'''
        return super(IRasterConvolutionFilter, self).put_Recursive(Recursive)
    def get_Recursive(self):
        '''Method IRasterConvolutionFilter.get_Recursive

           OUTPUT
            Recursive           : VARIANT_BOOL*'''
        return super(IRasterConvolutionFilter, self).get_Recursive()
    def Normalize(self):
        '''Method IRasterConvolutionFilter.Normalize'''
        return super(IRasterConvolutionFilter, self).Normalize()
    def get_IsNormalized(self):
        '''Method IRasterConvolutionFilter.get_IsNormalized

           OUTPUT
            normalized          : VARIANT_BOOL*'''
        return super(IRasterConvolutionFilter, self).get_IsNormalized()
    def ScaleBy(self, scaleFactor):
        '''Method IRasterConvolutionFilter.ScaleBy

           INPUT
            scaleFactor         : double'''
        return super(IRasterConvolutionFilter, self).ScaleBy(scaleFactor)
    GainFactor = property(get_GainFactor, put_GainFactor, None)
    IsNormalized = property(get_IsNormalized, None, None)
    Recursive = property(get_Recursive, put_Recursive, None)

class IStockConvolutionFilter(_esriDataSourcesRaster.IStockConvolutionFilter):
    _IID = uuid.UUID('4b0cc599-d839-46fd-9865-33bdb167cdc6')

    def __init__(self, *args, **kw):
        super(IStockConvolutionFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Type(self, FilterType):
        '''Method IStockConvolutionFilter.put_Type

           INPUT
            FilterType          : esriRasterFilterTypeEnum'''
        return super(IStockConvolutionFilter, self).put_Type(FilterType)
    def get_Type(self):
        '''Method IStockConvolutionFilter.get_Type

           OUTPUT
            FilterType          : esriRasterFilterTypeEnum*'''
        return super(IStockConvolutionFilter, self).get_Type()
    Type = property(get_Type, put_Type, None)

class IMultibandFilter(_esriDataSourcesRaster.IMultibandFilter):
    _IID = uuid.UUID('b6c6883c-5487-4b5a-9162-ac8e2da34f5a')
    def GetFilter(self, iBand):
        '''Method IMultibandFilter.GetFilter

           INPUT
            iBand               : long

           OUTPUT
            ppFilter            : IPixelFilter**'''
        return super(IMultibandFilter, self).GetFilter(iBand)

class IPansharpeningFilter(_esriDataSourcesRaster.IPansharpeningFilter):
    _IID = uuid.UUID('a9d01e68-5e2e-4dbd-b878-4ec48f565120')

    def __init__(self, *args, **kw):
        super(IPansharpeningFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PanImage(self):
        '''Method IPansharpeningFilter.get_PanImage

           OUTPUT
            ppPanImage          : IRaster**'''
        return super(IPansharpeningFilter, self).get_PanImage()
    def putref_PanImage(self, ppPanImage):
        '''Method IPansharpeningFilter.putref_PanImage

           INPUT
            ppPanImage          : IRaster*'''
        return super(IPansharpeningFilter, self).putref_PanImage(ppPanImage)
    def get_PansharpeningType(self):
        '''Method IPansharpeningFilter.get_PansharpeningType

           OUTPUT
            pSharpeningType     : esriPansharpeningType*'''
        return super(IPansharpeningFilter, self).get_PansharpeningType()
    def put_PansharpeningType(self, pSharpeningType):
        '''Method IPansharpeningFilter.put_PansharpeningType

           INPUT
            pSharpeningType     : esriPansharpeningType'''
        return super(IPansharpeningFilter, self).put_PansharpeningType(pSharpeningType)
    def QueryWeights(self):
        '''Method IPansharpeningFilter.QueryWeights

           OUTPUTS
            pRW                 : double*
            pGW                 : double*
            pBW                 : double*
            pIW                 : double*'''
        return super(IPansharpeningFilter, self).QueryWeights()
    def PutWeights(self, RW, GW, BW, IW):
        '''Method IPansharpeningFilter.PutWeights

           INPUTS
            RW                  : double
            GW                  : double
            BW                  : double
            IW                  : double'''
        return super(IPansharpeningFilter, self).PutWeights(RW, GW, BW, IW)
    def get_InfraredImage(self):
        '''Method IPansharpeningFilter.get_InfraredImage

           OUTPUT
            ppInfraredImage     : IRaster**'''
        return super(IPansharpeningFilter, self).get_InfraredImage()
    def putref_InfraredImage(self, ppInfraredImage):
        '''Method IPansharpeningFilter.putref_InfraredImage

           INPUT
            ppInfraredImage     : IRaster*'''
        return super(IPansharpeningFilter, self).putref_InfraredImage(ppInfraredImage)
    InfraredImage = property(get_InfraredImage, putref_InfraredImage, None)
    PanImage = property(get_PanImage, putref_PanImage, None)
    PansharpeningType = property(get_PansharpeningType, put_PansharpeningType, None)

class IPansharpeningFilter2(_esriDataSourcesRaster.IPansharpeningFilter2):
    _IID = uuid.UUID('64fa96ad-e00f-4aa1-82f7-b7ea95648b18')

    def __init__(self, *args, **kw):
        super(IPansharpeningFilter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Sharpen(self, P):
        '''Method IPansharpeningFilter2.Sharpen

           INPUT
            P                   : double

           OUTPUTS
            R                   : double*
            G                   : double*
            b                   : double*
            I                   : double*'''
        return super(IPansharpeningFilter2, self).Sharpen(P)
    def get_MaximumPansharpeningCellsize(self):
        '''Method IPansharpeningFilter2.get_MaximumPansharpeningCellsize

           OUTPUT
            CellSize            : double*'''
        return super(IPansharpeningFilter2, self).get_MaximumPansharpeningCellsize()
    def put_MaximumPansharpeningCellsize(self, CellSize):
        '''Method IPansharpeningFilter2.put_MaximumPansharpeningCellsize

           INPUT
            CellSize            : double'''
        return super(IPansharpeningFilter2, self).put_MaximumPansharpeningCellsize(CellSize)
    def get_PanImage(self):
        '''Method IPansharpeningFilter.get_PanImage (from IPansharpeningFilter)

           OUTPUT
            ppPanImage          : IRaster**'''
        return super(IPansharpeningFilter2, self).get_PanImage()
    def putref_PanImage(self, ppPanImage):
        '''Method IPansharpeningFilter.putref_PanImage (from IPansharpeningFilter)

           INPUT
            ppPanImage          : IRaster*'''
        return super(IPansharpeningFilter2, self).putref_PanImage(ppPanImage)
    def get_PansharpeningType(self):
        '''Method IPansharpeningFilter.get_PansharpeningType (from IPansharpeningFilter)

           OUTPUT
            pSharpeningType     : esriPansharpeningType*'''
        return super(IPansharpeningFilter2, self).get_PansharpeningType()
    def put_PansharpeningType(self, pSharpeningType):
        '''Method IPansharpeningFilter.put_PansharpeningType (from IPansharpeningFilter)

           INPUT
            pSharpeningType     : esriPansharpeningType'''
        return super(IPansharpeningFilter2, self).put_PansharpeningType(pSharpeningType)
    def QueryWeights(self):
        '''Method IPansharpeningFilter.QueryWeights (from IPansharpeningFilter)

           OUTPUTS
            pRW                 : double*
            pGW                 : double*
            pBW                 : double*
            pIW                 : double*'''
        return super(IPansharpeningFilter2, self).QueryWeights()
    def PutWeights(self, RW, GW, BW, IW):
        '''Method IPansharpeningFilter.PutWeights (from IPansharpeningFilter)

           INPUTS
            RW                  : double
            GW                  : double
            BW                  : double
            IW                  : double'''
        return super(IPansharpeningFilter2, self).PutWeights(RW, GW, BW, IW)
    def get_InfraredImage(self):
        '''Method IPansharpeningFilter.get_InfraredImage (from IPansharpeningFilter)

           OUTPUT
            ppInfraredImage     : IRaster**'''
        return super(IPansharpeningFilter2, self).get_InfraredImage()
    def putref_InfraredImage(self, ppInfraredImage):
        '''Method IPansharpeningFilter.putref_InfraredImage (from IPansharpeningFilter)

           INPUT
            ppInfraredImage     : IRaster*'''
        return super(IPansharpeningFilter2, self).putref_InfraredImage(ppInfraredImage)
    InfraredImage = property(get_InfraredImage, putref_InfraredImage, None)
    MaximumPansharpeningCellsize = property(get_MaximumPansharpeningCellsize, put_MaximumPansharpeningCellsize, None)
    PanImage = property(get_PanImage, putref_PanImage, None)
    PansharpeningType = property(get_PansharpeningType, put_PansharpeningType, None)

class IRemapFilter(_esriDataSourcesRaster.IRemapFilter):
    _IID = uuid.UUID('2f07be89-35d7-4cf3-be0d-2f13e56948f0')

    def __init__(self, *args, **kw):
        super(IRemapFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClassCount(self):
        '''Method IRemapFilter.get_ClassCount

           OUTPUT
            pCount              : long*'''
        return super(IRemapFilter, self).get_ClassCount()
    def AddClass(self, minvalue, maxvalue, newvalue):
        '''Method IRemapFilter.AddClass

           INPUTS
            minvalue            : double
            maxvalue            : double
            newvalue            : double'''
        return super(IRemapFilter, self).AddClass(minvalue, maxvalue, newvalue)
    def AddNoDataClass(self, minvalue, maxvalue):
        '''Method IRemapFilter.AddNoDataClass

           INPUTS
            minvalue            : double
            maxvalue            : double'''
        return super(IRemapFilter, self).AddNoDataClass(minvalue, maxvalue)
    def QueryClass(self, index):
        '''Method IRemapFilter.QueryClass

           INPUT
            index               : long

           OUTPUTS
            minvalue            : double*
            maxvalue            : double*
            newvalue            : double*'''
        return super(IRemapFilter, self).QueryClass(index)
    def PutClass(self, index, minvalue, maxvalue, newvalue):
        '''Method IRemapFilter.PutClass

           INPUTS
            index               : long
            minvalue            : double
            maxvalue            : double
            newvalue            : double'''
        return super(IRemapFilter, self).PutClass(index, minvalue, maxvalue, newvalue)
    def Empty(self):
        '''Method IRemapFilter.Empty'''
        return super(IRemapFilter, self).Empty()
    def get_AllowUnmatched(self):
        '''Method IRemapFilter.get_AllowUnmatched

           OUTPUT
            pAllowUnmatched     : VARIANT_BOOL*'''
        return super(IRemapFilter, self).get_AllowUnmatched()
    def put_AllowUnmatched(self, pAllowUnmatched):
        '''Method IRemapFilter.put_AllowUnmatched

           INPUT
            pAllowUnmatched     : VARIANT_BOOL'''
        return super(IRemapFilter, self).put_AllowUnmatched(pAllowUnmatched)
    AllowUnmatched = property(get_AllowUnmatched, put_AllowUnmatched, None)
    ClassCount = property(get_ClassCount, None, None)

class IClipFilter(_esriDataSourcesRaster.IClipFilter):
    _IID = uuid.UUID('37be075c-faea-43ee-9314-16140d101f8d')
    def Add(self, pClippingGeometry):
        '''Method IClipFilter.Add

           INPUT
            pClippingGeometry   : IGeometry*'''
        return super(IClipFilter, self).Add(pClippingGeometry)
    def Empty(self):
        '''Method IClipFilter.Empty'''
        return super(IClipFilter, self).Empty()

class IClipFilter2(_esriDataSourcesRaster.IClipFilter2):
    _IID = uuid.UUID('d7d83c7a-a9f0-4a47-bedb-f4fe8bd45907')

    def __init__(self, *args, **kw):
        super(IClipFilter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClippingType(self):
        '''Method IClipFilter2.get_ClippingType

           OUTPUT
            pClippingType       : esriRasterClippingType*'''
        return super(IClipFilter2, self).get_ClippingType()
    def put_ClippingType(self, pClippingType):
        '''Method IClipFilter2.put_ClippingType

           INPUT
            pClippingType       : esriRasterClippingType'''
        return super(IClipFilter2, self).put_ClippingType(pClippingType)
    def Add(self, pClippingGeometry):
        '''Method IClipFilter.Add (from IClipFilter)

           INPUT
            pClippingGeometry   : IGeometry*'''
        return super(IClipFilter2, self).Add(pClippingGeometry)
    def Empty(self):
        '''Method IClipFilter.Empty (from IClipFilter)'''
        return super(IClipFilter2, self).Empty()
    ClippingType = property(get_ClippingType, put_ClippingType, None)

class INoDataFilter(_esriDataSourcesRaster.INoDataFilter):
    _IID = uuid.UUID('a373b8b2-b46a-4f62-88f8-b75bcfb55757')

    def __init__(self, *args, **kw):
        super(INoDataFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NoDataToPixelValue(self):
        '''Method INoDataFilter.get_NoDataToPixelValue

           OUTPUT
            pValue              : double*'''
        return super(INoDataFilter, self).get_NoDataToPixelValue()
    def put_NoDataToPixelValue(self, pValue):
        '''Method INoDataFilter.put_NoDataToPixelValue

           INPUT
            pValue              : double'''
        return super(INoDataFilter, self).put_NoDataToPixelValue(pValue)
    NoDataToPixelValue = property(get_NoDataToPixelValue, put_NoDataToPixelValue, None)

class IFocalMeanFilter(_esriDataSourcesRaster.IFocalMeanFilter):
    _IID = uuid.UUID('170014ce-9272-4400-b94f-3cdf7b396253')
    def SetSize(self, nColumns, nRows):
        '''Method IFocalMeanFilter.SetSize

           INPUTS
            nColumns            : long
            nRows               : long'''
        return super(IFocalMeanFilter, self).SetSize(nColumns, nRows)

class IFocalStatisticsFilter(_esriDataSourcesRaster.IFocalStatisticsFilter):
    _IID = uuid.UUID('d08fd5fb-e3ba-4858-ae1d-d0423827dbbc')

    def __init__(self, *args, **kw):
        super(IFocalStatisticsFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Type(self):
        '''Method IFocalStatisticsFilter.get_Type

           OUTPUT
            pType               : esriFocalStatisticType*'''
        return super(IFocalStatisticsFilter, self).get_Type()
    def put_Type(self, pType):
        '''Method IFocalStatisticsFilter.put_Type

           INPUT
            pType               : esriFocalStatisticType'''
        return super(IFocalStatisticsFilter, self).put_Type(pType)
    def SetSize(self, nColumns, nRows):
        '''Method IFocalStatisticsFilter.SetSize

           INPUTS
            nColumns            : long
            nRows               : long'''
        return super(IFocalStatisticsFilter, self).SetSize(nColumns, nRows)
    Type = property(get_Type, put_Type, None)

class IFocalStatisticsFilter2(_esriDataSourcesRaster.IFocalStatisticsFilter2):
    _IID = uuid.UUID('831bcc6a-9bcd-4285-a9ee-adbc296d93ff')

    def __init__(self, *args, **kw):
        super(IFocalStatisticsFilter2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FillNoDataOnly(self):
        '''Method IFocalStatisticsFilter2.get_FillNoDataOnly

           OUTPUT
            pFillNoData         : VARIANT_BOOL*'''
        return super(IFocalStatisticsFilter2, self).get_FillNoDataOnly()
    def put_FillNoDataOnly(self, pFillNoData):
        '''Method IFocalStatisticsFilter2.put_FillNoDataOnly

           INPUT
            pFillNoData         : VARIANT_BOOL'''
        return super(IFocalStatisticsFilter2, self).put_FillNoDataOnly(pFillNoData)
    def get_Type(self):
        '''Method IFocalStatisticsFilter.get_Type (from IFocalStatisticsFilter)

           OUTPUT
            pType               : esriFocalStatisticType*'''
        return super(IFocalStatisticsFilter2, self).get_Type()
    def put_Type(self, pType):
        '''Method IFocalStatisticsFilter.put_Type (from IFocalStatisticsFilter)

           INPUT
            pType               : esriFocalStatisticType'''
        return super(IFocalStatisticsFilter2, self).put_Type(pType)
    def SetSize(self, nColumns, nRows):
        '''Method IFocalStatisticsFilter.SetSize (from IFocalStatisticsFilter)

           INPUTS
            nColumns            : long
            nRows               : long'''
        return super(IFocalStatisticsFilter2, self).SetSize(nColumns, nRows)
    FillNoDataOnly = property(get_FillNoDataOnly, put_FillNoDataOnly, None)
    Type = property(get_Type, put_Type, None)

class ISpeckleFilter(_esriDataSourcesRaster.ISpeckleFilter):
    _IID = uuid.UUID('ce529581-0814-4970-8d0b-3f48f760ff24')

    def __init__(self, *args, **kw):
        super(ISpeckleFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FilterType(self):
        '''Method ISpeckleFilter.get_FilterType

           OUTPUT
            pType               : esriSpeckleFilterType*'''
        return super(ISpeckleFilter, self).get_FilterType()
    def put_FilterType(self, pType):
        '''Method ISpeckleFilter.put_FilterType

           INPUT
            pType               : esriSpeckleFilterType'''
        return super(ISpeckleFilter, self).put_FilterType(pType)
    def SetSize(self, nColumns, nRows):
        '''Method ISpeckleFilter.SetSize

           INPUTS
            nColumns            : long
            nRows               : long'''
        return super(ISpeckleFilter, self).SetSize(nColumns, nRows)
    def GetSize(self):
        '''Method ISpeckleFilter.GetSize

           OUTPUTS
            nColumns            : long*
            nRows               : long*'''
        return super(ISpeckleFilter, self).GetSize()
    def GetCenterPosition(self):
        '''Method ISpeckleFilter.GetCenterPosition

           OUTPUTS
            atColumn            : long*
            atRow               : long*'''
        return super(ISpeckleFilter, self).GetCenterPosition()
    def get_NoiseModel(self):
        '''Method ISpeckleFilter.get_NoiseModel

           OUTPUT
            pType               : esriSpeckleNoiseModel*'''
        return super(ISpeckleFilter, self).get_NoiseModel()
    def put_NoiseModel(self, pType):
        '''Method ISpeckleFilter.put_NoiseModel

           INPUT
            pType               : esriSpeckleNoiseModel'''
        return super(ISpeckleFilter, self).put_NoiseModel(pType)
    def put_NoiseVariance(self, noiseVar):
        '''Method ISpeckleFilter.put_NoiseVariance

           INPUT
            noiseVar            : double'''
        return super(ISpeckleFilter, self).put_NoiseVariance(noiseVar)
    def get_NoiseVariance(self):
        '''Method ISpeckleFilter.get_NoiseVariance

           OUTPUT
            noiseVar            : double*'''
        return super(ISpeckleFilter, self).get_NoiseVariance()
    def put_AdditiveNoiseMean(self, addNoiseMean):
        '''Method ISpeckleFilter.put_AdditiveNoiseMean

           INPUT
            addNoiseMean        : double'''
        return super(ISpeckleFilter, self).put_AdditiveNoiseMean(addNoiseMean)
    def get_AdditiveNoiseMean(self):
        '''Method ISpeckleFilter.get_AdditiveNoiseMean

           OUTPUT
            addNoiseMean        : double*'''
        return super(ISpeckleFilter, self).get_AdditiveNoiseMean()
    def put_MultiplicativeNoiseMean(self, mulNoiseMean):
        '''Method ISpeckleFilter.put_MultiplicativeNoiseMean

           INPUT
            mulNoiseMean        : double'''
        return super(ISpeckleFilter, self).put_MultiplicativeNoiseMean(mulNoiseMean)
    def get_MultiplicativeNoiseMean(self):
        '''Method ISpeckleFilter.get_MultiplicativeNoiseMean

           OUTPUT
            mulNoiseMean        : double*'''
        return super(ISpeckleFilter, self).get_MultiplicativeNoiseMean()
    def put_NLooks(self, NLooks):
        '''Method ISpeckleFilter.put_NLooks

           INPUT
            NLooks              : long'''
        return super(ISpeckleFilter, self).put_NLooks(NLooks)
    def get_NLooks(self):
        '''Method ISpeckleFilter.get_NLooks

           OUTPUT
            NLooks              : long*'''
        return super(ISpeckleFilter, self).get_NLooks()
    def put_DampFactor(self, DampFactor):
        '''Method ISpeckleFilter.put_DampFactor

           INPUT
            DampFactor          : double'''
        return super(ISpeckleFilter, self).put_DampFactor(DampFactor)
    def get_DampFactor(self):
        '''Method ISpeckleFilter.get_DampFactor

           OUTPUT
            DampFactor          : double*'''
        return super(ISpeckleFilter, self).get_DampFactor()
    AdditiveNoiseMean = property(get_AdditiveNoiseMean, put_AdditiveNoiseMean, None)
    DampFactor = property(get_DampFactor, put_DampFactor, None)
    FilterType = property(get_FilterType, put_FilterType, None)
    MultiplicativeNoiseMean = property(get_MultiplicativeNoiseMean, put_MultiplicativeNoiseMean, None)
    NLooks = property(get_NLooks, put_NLooks, None)
    NoiseModel = property(get_NoiseModel, put_NoiseModel, None)
    NoiseVariance = property(get_NoiseVariance, put_NoiseVariance, None)

class IHistogramSpecification(_esriDataSourcesRaster.IHistogramSpecification):
    _IID = uuid.UUID('978bbc66-4461-44bc-a068-0572a7f2d828')

    def __init__(self, *args, **kw):
        super(IHistogramSpecification, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_InputHistogram(self, ppInputHistograms):
        '''Method IHistogramSpecification.putref_InputHistogram

           INPUT
            ppInputHistograms   : IArray*'''
        return super(IHistogramSpecification, self).putref_InputHistogram(ppInputHistograms)
    def get_InputHistogram(self):
        '''Method IHistogramSpecification.get_InputHistogram

           OUTPUT
            ppInputHistograms   : IArray**'''
        return super(IHistogramSpecification, self).get_InputHistogram()
    def putref_TargetHistogram(self, ppTargetHistograms):
        '''Method IHistogramSpecification.putref_TargetHistogram

           INPUT
            ppTargetHistograms  : IArray*'''
        return super(IHistogramSpecification, self).putref_TargetHistogram(ppTargetHistograms)
    def get_TargetHistogram(self):
        '''Method IHistogramSpecification.get_TargetHistogram

           OUTPUT
            ppTargetHistograms  : IArray**'''
        return super(IHistogramSpecification, self).get_TargetHistogram()
    def Update(self):
        '''Method IHistogramSpecification.Update'''
        return super(IHistogramSpecification, self).Update()
    def GetLookup(self, iBand):
        '''Method IHistogramSpecification.GetLookup

           INPUT
            iBand               : long

           OUTPUT
            pvtLookup           : VARIANT*'''
        return super(IHistogramSpecification, self).GetLookup(iBand)
    InputHistogram = property(get_InputHistogram, putref_InputHistogram, None)
    TargetHistogram = property(get_TargetHistogram, putref_TargetHistogram, None)

class IStockFrequencyDistributionHistogram(_esriDataSourcesRaster.IStockFrequencyDistributionHistogram):
    _IID = uuid.UUID('ea83381d-c3a8-4677-931e-62671af63b19')
    def GetNormalDistribution(self, nBins, Mean, StdDev):
        '''Method IStockFrequencyDistributionHistogram.GetNormalDistribution

           INPUTS
            nBins               : long
            Mean                : double
            StdDev              : double

           OUTPUT
            ppHistogram         : IRasterHistogram**'''
        return super(IStockFrequencyDistributionHistogram, self).GetNormalDistribution(nBins, Mean, StdDev)
    def GetUniformDistribution(self, nBins):
        '''Method IStockFrequencyDistributionHistogram.GetUniformDistribution

           INPUT
            nBins               : long

           OUTPUT
            ppHistogram         : IRasterHistogram**'''
        return super(IStockFrequencyDistributionHistogram, self).GetUniformDistribution(nBins)

class IRasterLoader(_esriDataSourcesRaster.IRasterLoader):
    _IID = uuid.UUID('ddaf901c-90e5-4cd5-845e-7b19cc57b629')

    def __init__(self, *args, **kw):
        super(IRasterLoader, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PixelAlignmentTolerance(self):
        '''Method IRasterLoader.get_PixelAlignmentTolerance

           OUTPUT
            Tolerance           : double*'''
        return super(IRasterLoader, self).get_PixelAlignmentTolerance()
    def put_PixelAlignmentTolerance(self, Tolerance):
        '''Method IRasterLoader.put_PixelAlignmentTolerance

           INPUT
            Tolerance           : double'''
        return super(IRasterLoader, self).put_PixelAlignmentTolerance(Tolerance)
    def get_Background(self):
        '''Method IRasterLoader.get_Background

           OUTPUT
            Background          : VARIANT*'''
        return super(IRasterLoader, self).get_Background()
    def put_Background(self, Background):
        '''Method IRasterLoader.put_Background

           INPUT
            Background          : VARIANT'''
        return super(IRasterLoader, self).put_Background(Background)
    def get_Foreground(self):
        '''Method IRasterLoader.get_Foreground

           OUTPUT
            Foreground          : VARIANT*'''
        return super(IRasterLoader, self).get_Foreground()
    def put_Foreground(self, Foreground):
        '''Method IRasterLoader.put_Foreground

           INPUT
            Foreground          : VARIANT'''
        return super(IRasterLoader, self).put_Foreground(Foreground)
    def get_MosaicColormapMode(self):
        '''Method IRasterLoader.get_MosaicColormapMode

           OUTPUT
            Mode                : rstMosaicColormapMode*'''
        return super(IRasterLoader, self).get_MosaicColormapMode()
    def put_MosaicColormapMode(self, Mode):
        '''Method IRasterLoader.put_MosaicColormapMode

           INPUT
            Mode                : rstMosaicColormapMode'''
        return super(IRasterLoader, self).put_MosaicColormapMode(Mode)
    def Load(self, pDataset, Raster):
        '''Method IRasterLoader.Load

           INPUTS
            pDataset            : IRasterDataset*
            Raster              : IRaster*'''
        return super(IRasterLoader, self).Load(pDataset, Raster)
    def LoadRasters(self, pDataset, Rasters):
        '''Method IRasterLoader.LoadRasters

           INPUTS
            pDataset            : IRasterDataset*
            Rasters             : IArray*'''
        return super(IRasterLoader, self).LoadRasters(pDataset, Rasters)
    Background = property(get_Background, put_Background, None)
    Foreground = property(get_Foreground, put_Foreground, None)
    MosaicColormapMode = property(get_MosaicColormapMode, put_MosaicColormapMode, None)
    PixelAlignmentTolerance = property(get_PixelAlignmentTolerance, put_PixelAlignmentTolerance, None)

class IRasterCatalogLoader(_esriDataSourcesRaster.IRasterCatalogLoader):
    _IID = uuid.UUID('c285b597-951b-4763-bb62-a7e2074fbac5')

    def __init__(self, *args, **kw):
        super(IRasterCatalogLoader, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConnectionProperties(self):
        '''Method IRasterCatalogLoader.get_ConnectionProperties

           OUTPUT
            ppConnectionProperties: IPropertySet**'''
        return super(IRasterCatalogLoader, self).get_ConnectionProperties()
    def putref_ConnectionProperties(self, ppConnectionProperties):
        '''Method IRasterCatalogLoader.putref_ConnectionProperties

           INPUT
            ppConnectionProperties: IPropertySet*'''
        return super(IRasterCatalogLoader, self).putref_ConnectionProperties(ppConnectionProperties)
    def get_Workspace(self):
        '''Method IRasterCatalogLoader.get_Workspace

           OUTPUT
            pWorkspace          : IWorkspace**'''
        return super(IRasterCatalogLoader, self).get_Workspace()
    def putref_Workspace(self, pWorkspace):
        '''Method IRasterCatalogLoader.putref_Workspace

           INPUT
            pWorkspace          : IWorkspace*'''
        return super(IRasterCatalogLoader, self).putref_Workspace(pWorkspace)
    def get_Background(self):
        '''Method IRasterCatalogLoader.get_Background

           OUTPUT
            Background          : VARIANT*'''
        return super(IRasterCatalogLoader, self).get_Background()
    def put_Background(self, Background):
        '''Method IRasterCatalogLoader.put_Background

           INPUT
            Background          : VARIANT'''
        return super(IRasterCatalogLoader, self).put_Background(Background)
    def get_Foreground(self):
        '''Method IRasterCatalogLoader.get_Foreground

           OUTPUT
            Foreground          : VARIANT*'''
        return super(IRasterCatalogLoader, self).get_Foreground()
    def put_Foreground(self, Foreground):
        '''Method IRasterCatalogLoader.put_Foreground

           INPUT
            Foreground          : VARIANT'''
        return super(IRasterCatalogLoader, self).put_Foreground(Foreground)
    def get_StorageDef(self):
        '''Method IRasterCatalogLoader.get_StorageDef

           OUTPUT
            ppStorageDef        : IRasterStorageDef**'''
        return super(IRasterCatalogLoader, self).get_StorageDef()
    def putref_StorageDef(self, ppStorageDef):
        '''Method IRasterCatalogLoader.putref_StorageDef

           INPUT
            ppStorageDef        : IRasterStorageDef*'''
        return super(IRasterCatalogLoader, self).putref_StorageDef(ppStorageDef)
    def get_Transformed(self):
        '''Method IRasterCatalogLoader.get_Transformed

           OUTPUT
            xformed             : VARIANT_BOOL*'''
        return super(IRasterCatalogLoader, self).get_Transformed()
    def put_Transformed(self, xformed):
        '''Method IRasterCatalogLoader.put_Transformed

           INPUT
            xformed             : VARIANT_BOOL'''
        return super(IRasterCatalogLoader, self).put_Transformed(xformed)
    def get_Projected(self):
        '''Method IRasterCatalogLoader.get_Projected

           OUTPUT
            Projected           : VARIANT_BOOL*'''
        return super(IRasterCatalogLoader, self).get_Projected()
    def put_Projected(self, Projected):
        '''Method IRasterCatalogLoader.put_Projected

           INPUT
            Projected           : VARIANT_BOOL'''
        return super(IRasterCatalogLoader, self).put_Projected(Projected)
    def get_EnableBuildStatistics(self):
        '''Method IRasterCatalogLoader.get_EnableBuildStatistics

           OUTPUT
            pEnableBuildStats   : VARIANT_BOOL*'''
        return super(IRasterCatalogLoader, self).get_EnableBuildStatistics()
    def put_EnableBuildStatistics(self, pEnableBuildStats):
        '''Method IRasterCatalogLoader.put_EnableBuildStatistics

           INPUT
            pEnableBuildStats   : VARIANT_BOOL'''
        return super(IRasterCatalogLoader, self).put_EnableBuildStatistics(pEnableBuildStats)
    def get_XSkipFactor(self):
        '''Method IRasterCatalogLoader.get_XSkipFactor

           OUTPUT
            XSkipFactor         : long*'''
        return super(IRasterCatalogLoader, self).get_XSkipFactor()
    def put_XSkipFactor(self, XSkipFactor):
        '''Method IRasterCatalogLoader.put_XSkipFactor

           INPUT
            XSkipFactor         : long'''
        return super(IRasterCatalogLoader, self).put_XSkipFactor(XSkipFactor)
    def get_YSkipFactor(self):
        '''Method IRasterCatalogLoader.get_YSkipFactor

           OUTPUT
            YSkipFactor         : long*'''
        return super(IRasterCatalogLoader, self).get_YSkipFactor()
    def put_YSkipFactor(self, YSkipFactor):
        '''Method IRasterCatalogLoader.put_YSkipFactor

           INPUT
            YSkipFactor         : long'''
        return super(IRasterCatalogLoader, self).put_YSkipFactor(YSkipFactor)
    def get_IgnoreValues(self):
        '''Method IRasterCatalogLoader.get_IgnoreValues

           OUTPUT
            vIgnoreValues       : VARIANT*'''
        return super(IRasterCatalogLoader, self).get_IgnoreValues()
    def put_IgnoreValues(self, vIgnoreValues):
        '''Method IRasterCatalogLoader.put_IgnoreValues

           INPUT
            vIgnoreValues       : VARIANT'''
        return super(IRasterCatalogLoader, self).put_IgnoreValues(vIgnoreValues)
    def Load(self, Catalog, Directory, pCancelTracker):
        '''Method IRasterCatalogLoader.Load

           INPUTS
            Catalog             : BSTR
            Directory           : BSTR
            pCancelTracker      : ITrackCancel*'''
        return super(IRasterCatalogLoader, self).Load(Catalog, Directory, pCancelTracker)
    def LoadDatasets(self, Catalog, namelist, pCancelTracker):
        '''Method IRasterCatalogLoader.LoadDatasets

           INPUTS
            Catalog             : BSTR
            namelist            : BSTR
            pCancelTracker      : ITrackCancel*'''
        return super(IRasterCatalogLoader, self).LoadDatasets(Catalog, namelist, pCancelTracker)
    def get_LastError(self):
        '''Method IRasterCatalogLoader.get_LastError

           OUTPUT
            ppErrorInfo         : IErrorInfo**'''
        return super(IRasterCatalogLoader, self).get_LastError()
    def get_InvalidDatasets(self):
        '''Method IRasterCatalogLoader.get_InvalidDatasets

           OUTPUT
            pInvalidDatasetNames: BSTR*'''
        return super(IRasterCatalogLoader, self).get_InvalidDatasets()
    def get_LastLoadedDataset(self):
        '''Method IRasterCatalogLoader.get_LastLoadedDataset

           OUTPUT
            pDatasetName        : BSTR*'''
        return super(IRasterCatalogLoader, self).get_LastLoadedDataset()
    Background = property(get_Background, put_Background, None)
    ConnectionProperties = property(get_ConnectionProperties, putref_ConnectionProperties, None)
    EnableBuildStatistics = property(get_EnableBuildStatistics, put_EnableBuildStatistics, None)
    Foreground = property(get_Foreground, put_Foreground, None)
    IgnoreValues = property(get_IgnoreValues, put_IgnoreValues, None)
    InvalidDatasets = property(get_InvalidDatasets, None, None)
    LastError = property(get_LastError, None, None)
    LastLoadedDataset = property(get_LastLoadedDataset, None, None)
    Projected = property(get_Projected, put_Projected, None)
    StorageDef = property(get_StorageDef, putref_StorageDef, None)
    Transformed = property(get_Transformed, put_Transformed, None)
    Workspace = property(get_Workspace, putref_Workspace, None)
    XSkipFactor = property(get_XSkipFactor, put_XSkipFactor, None)
    YSkipFactor = property(get_YSkipFactor, put_YSkipFactor, None)

class IDrLoader(_esriDataSourcesRaster.IDrLoader):
    _IID = uuid.UUID('5e1714cd-cbca-458e-88ce-06f0ca5cccdf')

    def __init__(self, *args, **kw):
        super(IDrLoader, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ServerName(self):
        '''Method IDrLoader.get_ServerName

           OUTPUT
            pServerName         : BSTR*'''
        return super(IDrLoader, self).get_ServerName()
    def put_ServerName(self, pServerName):
        '''Method IDrLoader.put_ServerName

           INPUT
            pServerName         : BSTR'''
        return super(IDrLoader, self).put_ServerName(pServerName)
    def get_RasterCatalogLoader(self):
        '''Method IDrLoader.get_RasterCatalogLoader

           OUTPUT
            ppLoader            : IRasterCatalogLoader**'''
        return super(IDrLoader, self).get_RasterCatalogLoader()
    def putref_RasterCatalogLoader(self, ppLoader):
        '''Method IDrLoader.putref_RasterCatalogLoader

           INPUT
            ppLoader            : IRasterCatalogLoader*'''
        return super(IDrLoader, self).putref_RasterCatalogLoader(ppLoader)
    def get_InvalidDatasets(self):
        '''Method IDrLoader.get_InvalidDatasets

           OUTPUT
            pInvalidDatasets    : BSTR*'''
        return super(IDrLoader, self).get_InvalidDatasets()
    def get_IsBusy(self):
        '''Method IDrLoader.get_IsBusy

           OUTPUT
            pIsBusy             : VARIANT_BOOL*'''
        return super(IDrLoader, self).get_IsBusy()
    def get_LastError(self):
        '''Method IDrLoader.get_LastError

           OUTPUT
            ppErrorInfo         : IErrorInfo**'''
        return super(IDrLoader, self).get_LastError()
    def Load(self, Catalog, Directory):
        '''Method IDrLoader.Load

           INPUTS
            Catalog             : BSTR
            Directory           : BSTR'''
        return super(IDrLoader, self).Load(Catalog, Directory)
    def LoadDatasets(self, Catalog, namelist):
        '''Method IDrLoader.LoadDatasets

           INPUTS
            Catalog             : BSTR
            namelist            : BSTR'''
        return super(IDrLoader, self).LoadDatasets(Catalog, namelist)
    def Cancel(self):
        '''Method IDrLoader.Cancel'''
        return super(IDrLoader, self).Cancel()
    def GetStats(self):
        '''Method IDrLoader.GetStats

           OUTPUTS
            pName               : BSTR*
            pMillis             : double*'''
        return super(IDrLoader, self).GetStats()
    def GetThreadHandle(self):
        '''Method IDrLoader.GetThreadHandle

           OUTPUT
            pHandle             : long*'''
        return super(IDrLoader, self).GetThreadHandle()
    InvalidDatasets = property(get_InvalidDatasets, None, None)
    IsBusy = property(get_IsBusy, None, None)
    LastError = property(get_LastError, None, None)
    RasterCatalogLoader = property(get_RasterCatalogLoader, putref_RasterCatalogLoader, None)
    ServerName = property(get_ServerName, put_ServerName, None)

class ISimplePixelResampler(_esriDataSourcesRaster.ISimplePixelResampler):
    _IID = uuid.UUID('ddb8b2ba-a3e9-40cd-8d69-1f720a4c8e7b')

    def __init__(self, *args, **kw):
        super(ISimplePixelResampler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ResamplingMethod(self):
        '''Method ISimplePixelResampler.get_ResamplingMethod

           OUTPUT
            pMethod             : rstResamplingTypes*'''
        return super(ISimplePixelResampler, self).get_ResamplingMethod()
    def put_ResamplingMethod(self, pMethod):
        '''Method ISimplePixelResampler.put_ResamplingMethod

           INPUT
            pMethod             : rstResamplingTypes'''
        return super(ISimplePixelResampler, self).put_ResamplingMethod(pMethod)
    def get_CubicConvolutionParameter(self):
        '''Method ISimplePixelResampler.get_CubicConvolutionParameter

           OUTPUT
            a                   : double*'''
        return super(ISimplePixelResampler, self).get_CubicConvolutionParameter()
    def put_CubicConvolutionParameter(self, a):
        '''Method ISimplePixelResampler.put_CubicConvolutionParameter

           INPUT
            a                   : double'''
        return super(ISimplePixelResampler, self).put_CubicConvolutionParameter(a)
    def put_MajorityWindowSize(self, _arg1):
        '''Method ISimplePixelResampler.put_MajorityWindowSize

           INPUT
            _arg1               : long'''
        return super(ISimplePixelResampler, self).put_MajorityWindowSize(_arg1)
    def get_SupportLinearScaling(self):
        '''Method IPixelResampler.get_SupportLinearScaling (from IPixelResampler)

           OUTPUT
            pSupportLinearScaling: VARIANT_BOOL*'''
        return super(ISimplePixelResampler, self).get_SupportLinearScaling()
    def get_LinearScaling(self):
        '''Method IPixelResampler.get_LinearScaling (from IPixelResampler)

           OUTPUT
            pLinearScaling      : VARIANT_BOOL*'''
        return super(ISimplePixelResampler, self).get_LinearScaling()
    def put_LinearScaling(self, pLinearScaling):
        '''Method IPixelResampler.put_LinearScaling (from IPixelResampler)

           INPUT
            pLinearScaling      : VARIANT_BOOL'''
        return super(ISimplePixelResampler, self).put_LinearScaling(pLinearScaling)
    def get_WindowSize(self):
        '''Method IPixelResampler.get_WindowSize (from IPixelResampler)

           OUTPUT
            pNumPixels          : long*'''
        return super(ISimplePixelResampler, self).get_WindowSize()
    def get_DownSampling(self):
        '''Method IPixelResampler.get_DownSampling (from IPixelResampler)

           OUTPUT
            pDownSampling       : VARIANT_BOOL*'''
        return super(ISimplePixelResampler, self).get_DownSampling()
    def Resample(self, iCol, iRow, nCols, nRows, points, ulx, uly, dx, dy, pSrcPixelBlock, pDstPixelBlock):
        '''Method IPixelResampler.Resample (from IPixelResampler)

           INPUTS
            iCol                : long
            iRow                : long
            nCols               : long
            nRows               : long
            points              : WKSPoint*
            ulx                 : double
            uly                 : double
            dx                  : double
            dy                  : double
            pSrcPixelBlock      : IPixelBlock*
            pDstPixelBlock      : IPixelBlock*'''
        return super(ISimplePixelResampler, self).Resample(iCol, iRow, nCols, nRows, points, ulx, uly, dx, dy, pSrcPixelBlock, pDstPixelBlock)
    CubicConvolutionParameter = property(get_CubicConvolutionParameter, put_CubicConvolutionParameter, None)
    DownSampling = property(get_DownSampling, None, None)
    LinearScaling = property(get_LinearScaling, put_LinearScaling, None)
    MajorityWindowSize = property(None, put_MajorityWindowSize, None)
    ResamplingMethod = property(get_ResamplingMethod, put_ResamplingMethod, None)
    SupportLinearScaling = property(get_SupportLinearScaling, None, None)
    WindowSize = property(get_WindowSize, None, None)

class IRawPixelReader(_esriDataSourcesRaster.IRawPixelReader):
    _IID = uuid.UUID('9d134e41-8f12-4ac6-bc02-d31676047631')
    def Read(self, tlc, pPixelBlock):
        '''Method IRawPixelReader.Read

           INPUTS
            tlc                 : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(IRawPixelReader, self).Read(tlc, pPixelBlock)

class IPixelReader(_esriDataSourcesRaster.IPixelReader):
    _IID = uuid.UUID('8a3b7c7c-4ace-4628-8c24-f67834fa2577')

    def __init__(self, *args, **kw):
        super(IPixelReader, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PixelType(self):
        '''Method IPixelReader.get_PixelType

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IPixelReader, self).get_PixelType()
    def get_BandCount(self):
        '''Method IPixelReader.get_BandCount

           OUTPUT
            pBandCount          : long*'''
        return super(IPixelReader, self).get_BandCount()
    def get_Extent(self):
        '''Method IPixelReader.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IPixelReader, self).get_Extent()
    def get_CellSize(self):
        '''Method IPixelReader.get_CellSize

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IPixelReader, self).get_CellSize()
    def get_MaximumPyramidLevel(self):
        '''Method IPixelReader.get_MaximumPyramidLevel

           OUTPUT
            pMaxLevel           : long*'''
        return super(IPixelReader, self).get_MaximumPyramidLevel()
    def get_FirstPyramidLevel(self):
        '''Method IPixelReader.get_FirstPyramidLevel

           OUTPUT
            pFirstLevel         : long*'''
        return super(IPixelReader, self).get_FirstPyramidLevel()
    def get_PyramidLevel(self):
        '''Method IPixelReader.get_PyramidLevel

           OUTPUT
            pLevel              : long*'''
        return super(IPixelReader, self).get_PyramidLevel()
    def put_PyramidLevel(self, pLevel):
        '''Method IPixelReader.put_PyramidLevel

           INPUT
            pLevel              : long'''
        return super(IPixelReader, self).put_PyramidLevel(pLevel)
    def Read(self, tlc, pPixelBlock):
        '''Method IPixelReader.Read

           INPUTS
            tlc                 : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(IPixelReader, self).Read(tlc, pPixelBlock)
    def Snap(self, dx, dy):
        '''Method IPixelReader.Snap

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            pLevel              : long*'''
        return super(IPixelReader, self).Snap(dx, dy)
    def GetResolution(self, Level):
        '''Method IPixelReader.GetResolution

           INPUT
            Level               : long

           OUTPUTS
            pXResolution        : double*
            pYResolution        : double*'''
        return super(IPixelReader, self).GetResolution(Level)
    BandCount = property(get_BandCount, None, None)
    CellSize = property(get_CellSize, None, None)
    Extent = property(get_Extent, None, None)
    FirstPyramidLevel = property(get_FirstPyramidLevel, None, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, None, None)
    PixelType = property(get_PixelType, None, None)
    PyramidLevel = property(get_PyramidLevel, put_PyramidLevel, None)

class IPixelReader2(_esriDataSourcesRaster.IPixelReader2):
    _IID = uuid.UUID('e0f724c5-5abe-4a4d-8916-702cda40eaa8')

    def __init__(self, *args, **kw):
        super(IPixelReader2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Snap2(self, dx, dy, hint):
        '''Method IPixelReader2.Snap2

           INPUTS
            dx                  : double
            dy                  : double
            hint                : esriRasterResamplingHint

           OUTPUT
            pLevel              : long*'''
        return super(IPixelReader2, self).Snap2(dx, dy, hint)
    def get_PixelType(self):
        '''Method IPixelReader.get_PixelType (from IPixelReader)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IPixelReader2, self).get_PixelType()
    def get_BandCount(self):
        '''Method IPixelReader.get_BandCount (from IPixelReader)

           OUTPUT
            pBandCount          : long*'''
        return super(IPixelReader2, self).get_BandCount()
    def get_Extent(self):
        '''Method IPixelReader.get_Extent (from IPixelReader)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IPixelReader2, self).get_Extent()
    def get_CellSize(self):
        '''Method IPixelReader.get_CellSize (from IPixelReader)

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IPixelReader2, self).get_CellSize()
    def get_MaximumPyramidLevel(self):
        '''Method IPixelReader.get_MaximumPyramidLevel (from IPixelReader)

           OUTPUT
            pMaxLevel           : long*'''
        return super(IPixelReader2, self).get_MaximumPyramidLevel()
    def get_FirstPyramidLevel(self):
        '''Method IPixelReader.get_FirstPyramidLevel (from IPixelReader)

           OUTPUT
            pFirstLevel         : long*'''
        return super(IPixelReader2, self).get_FirstPyramidLevel()
    def get_PyramidLevel(self):
        '''Method IPixelReader.get_PyramidLevel (from IPixelReader)

           OUTPUT
            pLevel              : long*'''
        return super(IPixelReader2, self).get_PyramidLevel()
    def put_PyramidLevel(self, pLevel):
        '''Method IPixelReader.put_PyramidLevel (from IPixelReader)

           INPUT
            pLevel              : long'''
        return super(IPixelReader2, self).put_PyramidLevel(pLevel)
    def Read(self, tlc, pPixelBlock):
        '''Method IPixelReader.Read (from IPixelReader)

           INPUTS
            tlc                 : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(IPixelReader2, self).Read(tlc, pPixelBlock)
    def Snap(self, dx, dy):
        '''Method IPixelReader.Snap (from IPixelReader)

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            pLevel              : long*'''
        return super(IPixelReader2, self).Snap(dx, dy)
    def GetResolution(self, Level):
        '''Method IPixelReader.GetResolution (from IPixelReader)

           INPUT
            Level               : long

           OUTPUTS
            pXResolution        : double*
            pYResolution        : double*'''
        return super(IPixelReader2, self).GetResolution(Level)
    BandCount = property(get_BandCount, None, None)
    CellSize = property(get_CellSize, None, None)
    Extent = property(get_Extent, None, None)
    FirstPyramidLevel = property(get_FirstPyramidLevel, None, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, None, None)
    PixelType = property(get_PixelType, None, None)
    PyramidLevel = property(get_PyramidLevel, put_PyramidLevel, None)

class ISimplePixelReader(_esriDataSourcesRaster.ISimplePixelReader):
    _IID = uuid.UUID('6d4be802-e5d0-4dad-b022-b58366952794')

    def __init__(self, *args, **kw):
        super(ISimplePixelReader, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PixelType(self, _arg1):
        '''Method ISimplePixelReader.put_PixelType

           INPUT
            _arg1               : rstPixelType'''
        return super(ISimplePixelReader, self).put_PixelType(_arg1)
    def put_BandCount(self, _arg1):
        '''Method ISimplePixelReader.put_BandCount

           INPUT
            _arg1               : long'''
        return super(ISimplePixelReader, self).put_BandCount(_arg1)
    def put_Extent(self, _arg1):
        '''Method ISimplePixelReader.put_Extent

           INPUT
            _arg1               : IEnvelope*'''
        return super(ISimplePixelReader, self).put_Extent(_arg1)
    def put_CellSize(self, _arg1):
        '''Method ISimplePixelReader.put_CellSize

           INPUT
            _arg1               : IPnt*'''
        return super(ISimplePixelReader, self).put_CellSize(_arg1)
    def put_MaximumPyramidLevel(self, _arg1):
        '''Method ISimplePixelReader.put_MaximumPyramidLevel

           INPUT
            _arg1               : long'''
        return super(ISimplePixelReader, self).put_MaximumPyramidLevel(_arg1)
    def put_FirstPyramidLevel(self, _arg1):
        '''Method ISimplePixelReader.put_FirstPyramidLevel

           INPUT
            _arg1               : long'''
        return super(ISimplePixelReader, self).put_FirstPyramidLevel(_arg1)
    def putref_RawPixelReader(self, _arg1):
        '''Method ISimplePixelReader.putref_RawPixelReader

           INPUT
            _arg1               : IRawPixelReader*'''
        return super(ISimplePixelReader, self).putref_RawPixelReader(_arg1)
    def putref_Raster(self, _arg1):
        '''Method ISimplePixelReader.putref_Raster

           INPUT
            _arg1               : IRaster*'''
        return super(ISimplePixelReader, self).putref_Raster(_arg1)
    def get_PixelType(self):
        '''Method IPixelReader.get_PixelType (from IPixelReader)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(ISimplePixelReader, self).get_PixelType()
    def get_BandCount(self):
        '''Method IPixelReader.get_BandCount (from IPixelReader)

           OUTPUT
            pBandCount          : long*'''
        return super(ISimplePixelReader, self).get_BandCount()
    def get_Extent(self):
        '''Method IPixelReader.get_Extent (from IPixelReader)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ISimplePixelReader, self).get_Extent()
    def get_CellSize(self):
        '''Method IPixelReader.get_CellSize (from IPixelReader)

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(ISimplePixelReader, self).get_CellSize()
    def get_MaximumPyramidLevel(self):
        '''Method IPixelReader.get_MaximumPyramidLevel (from IPixelReader)

           OUTPUT
            pMaxLevel           : long*'''
        return super(ISimplePixelReader, self).get_MaximumPyramidLevel()
    def get_FirstPyramidLevel(self):
        '''Method IPixelReader.get_FirstPyramidLevel (from IPixelReader)

           OUTPUT
            pFirstLevel         : long*'''
        return super(ISimplePixelReader, self).get_FirstPyramidLevel()
    def get_PyramidLevel(self):
        '''Method IPixelReader.get_PyramidLevel (from IPixelReader)

           OUTPUT
            pLevel              : long*'''
        return super(ISimplePixelReader, self).get_PyramidLevel()
    def put_PyramidLevel(self, pLevel):
        '''Method IPixelReader.put_PyramidLevel (from IPixelReader)

           INPUT
            pLevel              : long'''
        return super(ISimplePixelReader, self).put_PyramidLevel(pLevel)
    def Read(self, tlc, pPixelBlock):
        '''Method IPixelReader.Read (from IPixelReader)

           INPUTS
            tlc                 : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(ISimplePixelReader, self).Read(tlc, pPixelBlock)
    def Snap(self, dx, dy):
        '''Method IPixelReader.Snap (from IPixelReader)

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            pLevel              : long*'''
        return super(ISimplePixelReader, self).Snap(dx, dy)
    def GetResolution(self, Level):
        '''Method IPixelReader.GetResolution (from IPixelReader)

           INPUT
            Level               : long

           OUTPUTS
            pXResolution        : double*
            pYResolution        : double*'''
        return super(ISimplePixelReader, self).GetResolution(Level)
    BandCount = property(get_BandCount, put_BandCount, None)
    CellSize = property(get_CellSize, put_CellSize, None)
    Extent = property(get_Extent, put_Extent, None)
    FirstPyramidLevel = property(get_FirstPyramidLevel, put_FirstPyramidLevel, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, put_MaximumPyramidLevel, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    PyramidLevel = property(get_PyramidLevel, put_PyramidLevel, None)
    Raster = property(None, putref_Raster, None)
    RawPixelReader = property(None, putref_RawPixelReader, None)

class IRasterXformer2(_esriDataSourcesRaster.IRasterXformer2):
    _IID = uuid.UUID('9ddce4e9-d076-4dfc-b157-0924de623897')

    def __init__(self, *args, **kw):
        super(IRasterXformer2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Extent(self):
        '''Method IRasterXformer2.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterXformer2, self).get_Extent()
    def put_Extent(self, ppExtent):
        '''Method IRasterXformer2.put_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IRasterXformer2, self).put_Extent(ppExtent)
    def get_Width(self):
        '''Method IRasterXformer2.get_Width

           OUTPUT
            pWidth              : long*'''
        return super(IRasterXformer2, self).get_Width()
    def get_Height(self):
        '''Method IRasterXformer2.get_Height

           OUTPUT
            pHeight             : long*'''
        return super(IRasterXformer2, self).get_Height()
    def get_CellSize(self):
        '''Method IRasterXformer2.get_CellSize

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IRasterXformer2, self).get_CellSize()
    def put_CellSize(self, ppCellsize):
        '''Method IRasterXformer2.put_CellSize

           INPUT
            ppCellsize          : IPnt*'''
        return super(IRasterXformer2, self).put_CellSize(ppCellsize)
    def get_GeodataXform(self):
        '''Method IRasterXformer2.get_GeodataXform

           OUTPUT
            ppXform             : IGeodataXform**'''
        return super(IRasterXformer2, self).get_GeodataXform()
    def putref_GeodataXform(self, ppXform):
        '''Method IRasterXformer2.putref_GeodataXform

           INPUT
            ppXform             : IGeodataXform*'''
        return super(IRasterXformer2, self).putref_GeodataXform(ppXform)
    def get_PixelReader(self):
        '''Method IRasterXformer2.get_PixelReader

           OUTPUT
            ppReader            : IPixelReader**'''
        return super(IRasterXformer2, self).get_PixelReader()
    def putref_PixelReader(self, ppReader):
        '''Method IRasterXformer2.putref_PixelReader

           INPUT
            ppReader            : IPixelReader*'''
        return super(IRasterXformer2, self).putref_PixelReader(ppReader)
    def get_ApproximationTolerance(self):
        '''Method IRasterXformer.get_ApproximationTolerance (from IRasterXformer)

           OUTPUT
            pNumPixels          : double*'''
        return super(IRasterXformer2, self).get_ApproximationTolerance()
    def put_ApproximationTolerance(self, pNumPixels):
        '''Method IRasterXformer.put_ApproximationTolerance (from IRasterXformer)

           INPUT
            pNumPixels          : double'''
        return super(IRasterXformer2, self).put_ApproximationTolerance(pNumPixels)
    def get_PixelResampler(self):
        '''Method IRasterXformer.get_PixelResampler (from IRasterXformer)

           OUTPUT
            ppResampler         : IPixelResampler**'''
        return super(IRasterXformer2, self).get_PixelResampler()
    def putref_PixelResampler(self, ppResampler):
        '''Method IRasterXformer.putref_PixelResampler (from IRasterXformer)

           INPUT
            ppResampler         : IPixelResampler*'''
        return super(IRasterXformer2, self).putref_PixelResampler(ppResampler)
    def put_Raster(self, _arg1):
        '''Method IRasterXformer.put_Raster (from IRasterXformer)

           INPUT
            _arg1               : IRaster*'''
        return super(IRasterXformer2, self).put_Raster(_arg1)
    def Update(self, pRaster):
        '''Method IRasterXformer.Update (from IRasterXformer)

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterXformer2, self).Update(pRaster)
    def Read(self, tlc, pPixelBlock):
        '''Method IRasterXformer.Read (from IRasterXformer)

           INPUTS
            tlc                 : IPnt*
            pPixelBlock         : IPixelBlock*'''
        return super(IRasterXformer2, self).Read(tlc, pPixelBlock)
    ApproximationTolerance = property(get_ApproximationTolerance, put_ApproximationTolerance, None)
    CellSize = property(get_CellSize, put_CellSize, None)
    Extent = property(get_Extent, put_Extent, None)
    GeodataXform = property(get_GeodataXform, putref_GeodataXform, None)
    Height = property(get_Height, None, None)
    PixelReader = property(get_PixelReader, putref_PixelReader, None)
    PixelResampler = property(get_PixelResampler, putref_PixelResampler, None)
    Raster = property(None, put_Raster, None)
    Width = property(get_Width, None, None)

class IRasterXform(_esriDataSourcesRaster.IRasterXform):
    _IID = uuid.UUID('45b14f29-01b8-489a-9f55-cd21ea84fd7f')

    def __init__(self, *args, **kw):
        super(IRasterXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_FullExtent(self):
        '''Method IRasterXform.get_FullExtent

           OUTPUT
            ppFullExtent        : IEnvelope**'''
        return super(IRasterXform, self).get_FullExtent()
    def put_FullExtent(self, ppFullExtent):
        '''Method IRasterXform.put_FullExtent

           INPUT
            ppFullExtent        : IEnvelope*'''
        return super(IRasterXform, self).put_FullExtent(ppFullExtent)
    def Prepare(self, iDomain, dx, dy, pExtent):
        '''Method IRasterXform.Prepare

           INPUTS
            iDomain             : long
            dx                  : double
            dy                  : double
            pExtent             : IEnvelope*'''
        return super(IRasterXform, self).Prepare(iDomain, dx, dy, pExtent)
    FullExtent = property(get_FullExtent, put_FullExtent, None)

class IRasterXform2(_esriDataSourcesRaster.IRasterXform2):
    _IID = uuid.UUID('8b498cf9-34c7-4a68-bf7c-989cdbdc1ab9')

    def __init__(self, *args, **kw):
        super(IRasterXform2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Finish(self):
        '''Method IRasterXform2.Finish'''
        return super(IRasterXform2, self).Finish()
    def get_FullExtent(self):
        '''Method IRasterXform.get_FullExtent (from IRasterXform)

           OUTPUT
            ppFullExtent        : IEnvelope**'''
        return super(IRasterXform2, self).get_FullExtent()
    def put_FullExtent(self, ppFullExtent):
        '''Method IRasterXform.put_FullExtent (from IRasterXform)

           INPUT
            ppFullExtent        : IEnvelope*'''
        return super(IRasterXform2, self).put_FullExtent(ppFullExtent)
    def Prepare(self, iDomain, dx, dy, pExtent):
        '''Method IRasterXform.Prepare (from IRasterXform)

           INPUTS
            iDomain             : long
            dx                  : double
            dy                  : double
            pExtent             : IEnvelope*'''
        return super(IRasterXform2, self).Prepare(iDomain, dx, dy, pExtent)
    FullExtent = property(get_FullExtent, put_FullExtent, None)

class ISensorXform(_esriDataSourcesRaster.ISensorXform):
    _IID = uuid.UUID('4fc73b78-d994-457a-90ee-a6d0015b6548')

    def __init__(self, *args, **kw):
        super(ISensorXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ConstantZ(self):
        '''Method ISensorXform.get_ConstantZ

           OUTPUT
            z                   : double*'''
        return super(ISensorXform, self).get_ConstantZ()
    def put_ConstantZ(self, z):
        '''Method ISensorXform.put_ConstantZ

           INPUT
            z                   : double'''
        return super(ISensorXform, self).put_ConstantZ(z)
    def get_ZFactor(self):
        '''Method ISensorXform.get_ZFactor

           OUTPUT
            ZFactor             : double*'''
        return super(ISensorXform, self).get_ZFactor()
    def put_ZFactor(self, ZFactor):
        '''Method ISensorXform.put_ZFactor

           INPUT
            ZFactor             : double'''
        return super(ISensorXform, self).put_ZFactor(ZFactor)
    def get_ZOffset(self):
        '''Method ISensorXform.get_ZOffset

           OUTPUT
            ZOffset             : double*'''
        return super(ISensorXform, self).get_ZOffset()
    def put_ZOffset(self, ZOffset):
        '''Method ISensorXform.put_ZOffset

           INPUT
            ZOffset             : double'''
        return super(ISensorXform, self).put_ZOffset(ZOffset)
    def get_DEM(self):
        '''Method ISensorXform.get_DEM

           OUTPUT
            ppDEM               : IRaster**'''
        return super(ISensorXform, self).get_DEM()
    def putref_DEM(self, ppDEM):
        '''Method ISensorXform.putref_DEM

           INPUT
            ppDEM               : IRaster*'''
        return super(ISensorXform, self).putref_DEM(ppDEM)
    def get_RequireDEM(self):
        '''Method ISensorXform.get_RequireDEM

           OUTPUT
            pRequireDEM         : VARIANT_BOOL*'''
        return super(ISensorXform, self).get_RequireDEM()
    def put_RequireDEM(self, pRequireDEM):
        '''Method ISensorXform.put_RequireDEM

           INPUT
            pRequireDEM         : VARIANT_BOOL'''
        return super(ISensorXform, self).put_RequireDEM(pRequireDEM)
    def get_CorrectGeoid(self):
        '''Method ISensorXform.get_CorrectGeoid

           OUTPUT
            pCorrection         : VARIANT_BOOL*'''
        return super(ISensorXform, self).get_CorrectGeoid()
    def put_CorrectGeoid(self, pCorrection):
        '''Method ISensorXform.put_CorrectGeoid

           INPUT
            pCorrection         : VARIANT_BOOL'''
        return super(ISensorXform, self).put_CorrectGeoid(pCorrection)
    ConstantZ = property(get_ConstantZ, put_ConstantZ, None)
    CorrectGeoid = property(get_CorrectGeoid, put_CorrectGeoid, None)
    DEM = property(get_DEM, putref_DEM, None)
    RequireDEM = property(get_RequireDEM, put_RequireDEM, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)
    ZOffset = property(get_ZOffset, put_ZOffset, None)

class IGeodataXform2(_esriDataSourcesRaster.IGeodataXform2):
    _IID = uuid.UUID('a079ee4b-9e92-40ce-b83d-6bd811e33a1c')
    def Transform3D(self, direction, npoints):
        '''Method IGeodataXform2.Transform3D

           INPUTS
            direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPointZ*'''
        return super(IGeodataXform2, self).Transform3D(direction, npoints)
    def Transform3DPoints(self, direction):
        '''Method IGeodataXform2.Transform3DPoints

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            pPoints             : IPointCollection*'''
        return super(IGeodataXform2, self).Transform3DPoints(direction)
    def ComputeFootprint(self, direction, pExtent, MaximumVertices):
        '''Method IGeodataXform2.ComputeFootprint

           INPUTS
            direction           : esriTransformDirection
            pExtent             : IGeometry*
            MaximumVertices     : long

           OUTPUT
            ppFootprint         : IGeometry**'''
        return super(IGeodataXform2, self).ComputeFootprint(direction, pExtent, MaximumVertices)
    def GetZ(self, x, y):
        '''Method IGeodataXform2.GetZ

           INPUTS
            x                   : double
            y                   : double

           OUTPUT
            z                   : double*'''
        return super(IGeodataXform2, self).GetZ(x, y)
    def Simplify(self):
        '''Method IGeodataXform2.Simplify

           OUTPUT
            ppNewXf             : IGeodataXform**'''
        return super(IGeodataXform2, self).Simplify()

class ICoordinateXform(_esriDataSourcesRaster.ICoordinateXform):
    _IID = uuid.UUID('64f70678-9cc7-48db-acd1-faa7e9e8e5c7')

    def __init__(self, *args, **kw):
        super(ICoordinateXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_GeoTransformations(self, ppGeoXforms):
        '''Method ICoordinateXform.putref_GeoTransformations

           INPUT
            ppGeoXforms         : IGeoTransformationOperationSet*'''
        return super(ICoordinateXform, self).putref_GeoTransformations(ppGeoXforms)
    def get_GeoTransformations(self):
        '''Method ICoordinateXform.get_GeoTransformations

           OUTPUT
            ppGeoXforms         : IGeoTransformationOperationSet**'''
        return super(ICoordinateXform, self).get_GeoTransformations()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(ICoordinateXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(ICoordinateXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(ICoordinateXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(ICoordinateXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(ICoordinateXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(ICoordinateXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(ICoordinateXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(ICoordinateXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    GeoTransformations = property(get_GeoTransformations, putref_GeoTransformations, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class ICoordinateXform2(_esriDataSourcesRaster.ICoordinateXform2):
    _IID = uuid.UUID('71abcacf-b2ac-4074-a99b-f6ae0264f293')

    def __init__(self, *args, **kw):
        super(ICoordinateXform2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_InputSpatialReference(self, ppSpatialRefence):
        '''Method ICoordinateXform2.putref_InputSpatialReference

           INPUT
            ppSpatialRefence    : ISpatialReference*'''
        return super(ICoordinateXform2, self).putref_InputSpatialReference(ppSpatialRefence)
    def get_InputSpatialReference(self):
        '''Method ICoordinateXform2.get_InputSpatialReference

           OUTPUT
            ppSpatialRefence    : ISpatialReference**'''
        return super(ICoordinateXform2, self).get_InputSpatialReference()
    def putref_GeoTransformations(self, ppGeoXforms):
        '''Method ICoordinateXform.putref_GeoTransformations (from ICoordinateXform)

           INPUT
            ppGeoXforms         : IGeoTransformationOperationSet*'''
        return super(ICoordinateXform2, self).putref_GeoTransformations(ppGeoXforms)
    def get_GeoTransformations(self):
        '''Method ICoordinateXform.get_GeoTransformations (from ICoordinateXform)

           OUTPUT
            ppGeoXforms         : IGeoTransformationOperationSet**'''
        return super(ICoordinateXform2, self).get_GeoTransformations()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(ICoordinateXform2, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(ICoordinateXform2, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(ICoordinateXform2, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(ICoordinateXform2, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(ICoordinateXform2, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(ICoordinateXform2, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(ICoordinateXform2, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(ICoordinateXform2, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    GeoTransformations = property(get_GeoTransformations, putref_GeoTransformations, None)
    InputSpatialReference = property(get_InputSpatialReference, putref_InputSpatialReference, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGeometricXform(_esriDataSourcesRaster.IGeometricXform):
    _IID = uuid.UUID('e6924fcb-4067-491b-a731-c175917a4af7')

    def __init__(self, *args, **kw):
        super(IGeometricXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Domains(self, _arg1):
        '''Method IGeometricXform.putref_Domains

           INPUT
            _arg1               : IGeometryCollection*'''
        return super(IGeometricXform, self).putref_Domains(_arg1)
    def get_Transformation(self):
        '''Method IGeometricXform.get_Transformation

           OUTPUT
            ppTransformation    : ITransformation**'''
        return super(IGeometricXform, self).get_Transformation()
    def putref_Transformation(self, ppTransformation):
        '''Method IGeometricXform.putref_Transformation

           INPUT
            ppTransformation    : ITransformation*'''
        return super(IGeometricXform, self).putref_Transformation(ppTransformation)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IGeometricXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IGeometricXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IGeometricXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IGeometricXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IGeometricXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IGeometricXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IGeometricXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IGeometricXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, putref_Domains, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    Transformation = property(get_Transformation, putref_Transformation, None)

class ICompositeXform(_esriDataSourcesRaster.ICompositeXform):
    _IID = uuid.UUID('17ac03ff-547d-4714-af19-c474e1f1c153')

    def __init__(self, *args, **kw):
        super(ICompositeXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Count(self):
        '''Method ICompositeXform.get_Count

           OUTPUT
            pCount              : long*'''
        return super(ICompositeXform, self).get_Count()
    def get_GeodataXform(self, index):
        '''Method ICompositeXform.get_GeodataXform

           INPUT
            index               : long

           OUTPUT
            ppXform             : IGeodataXform**'''
        return super(ICompositeXform, self).get_GeodataXform(index)
    def get_FirstXform(self):
        '''Method ICompositeXform.get_FirstXform

           OUTPUT
            ppXform             : IGeodataXform**'''
        return super(ICompositeXform, self).get_FirstXform()
    def get_LastXform(self):
        '''Method ICompositeXform.get_LastXform

           OUTPUT
            ppXform             : IGeodataXform**'''
        return super(ICompositeXform, self).get_LastXform()
    def Add(self, pXform):
        '''Method ICompositeXform.Add

           INPUT
            pXform              : IGeodataXform*'''
        return super(ICompositeXform, self).Add(pXform)
    def Insert(self, index, pXform):
        '''Method ICompositeXform.Insert

           INPUTS
            index               : long
            pXform              : IGeodataXform*'''
        return super(ICompositeXform, self).Insert(index, pXform)
    def Remove(self, index):
        '''Method ICompositeXform.Remove

           INPUT
            index               : long'''
        return super(ICompositeXform, self).Remove(index)
    def Empty(self):
        '''Method ICompositeXform.Empty'''
        return super(ICompositeXform, self).Empty()
    def Validate(self):
        '''Method ICompositeXform.Validate'''
        return super(ICompositeXform, self).Validate()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(ICompositeXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(ICompositeXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(ICompositeXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(ICompositeXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(ICompositeXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(ICompositeXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(ICompositeXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(ICompositeXform, self).TransformPoints(Direction)
    Count = property(get_Count, None, None)
    Domains = property(get_Domains, None, None)
    FirstXform = property(get_FirstXform, None, None)
    IsIdentity = property(get_IsIdentity, None, None)
    LastXform = property(get_LastXform, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    GeodataXform = IndexProperty(get_GeodataXform, None)

class IGCSShiftXform(_esriDataSourcesRaster.IGCSShiftXform):
    _IID = uuid.UUID('cc0593ef-718f-46c4-b278-b7fbb3c12cf4')

    def __init__(self, *args, **kw):
        super(IGCSShiftXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LeftLongitude(self):
        '''Method IGCSShiftXform.get_LeftLongitude

           OUTPUT
            pLon                : double*'''
        return super(IGCSShiftXform, self).get_LeftLongitude()
    def put_LeftLongitude(self, pLon):
        '''Method IGCSShiftXform.put_LeftLongitude

           INPUT
            pLon                : double'''
        return super(IGCSShiftXform, self).put_LeftLongitude(pLon)
    def get_ReverseShift(self):
        '''Method IGCSShiftXform.get_ReverseShift

           OUTPUT
            pReverseShift       : VARIANT_BOOL*'''
        return super(IGCSShiftXform, self).get_ReverseShift()
    def put_ReverseShift(self, pReverseShift):
        '''Method IGCSShiftXform.put_ReverseShift

           INPUT
            pReverseShift       : VARIANT_BOOL'''
        return super(IGCSShiftXform, self).put_ReverseShift(pReverseShift)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IGCSShiftXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IGCSShiftXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IGCSShiftXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IGCSShiftXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IGCSShiftXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IGCSShiftXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IGCSShiftXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IGCSShiftXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    IsIdentity = property(get_IsIdentity, None, None)
    LeftLongitude = property(get_LeftLongitude, put_LeftLongitude, None)
    ReverseShift = property(get_ReverseShift, put_ReverseShift, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IPolynomialXform(_esriDataSourcesRaster.IPolynomialXform):
    _IID = uuid.UUID('b8a34db7-e73b-4a09-8815-a7b729e33504')

    def __init__(self, *args, **kw):
        super(IPolynomialXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DefineFromControlPoints(self, pSrcPoints, pTarPoints, Order):
        '''Method IPolynomialXform.DefineFromControlPoints

           INPUTS
            pSrcPoints          : IPointCollection*
            pTarPoints          : IPointCollection*
            Order               : long'''
        return super(IPolynomialXform, self).DefineFromControlPoints(pSrcPoints, pTarPoints, Order)
    def DefineFromCoefficients(self, pForwardPolyCoef, pReversePolyCoef, Order):
        '''Method IPolynomialXform.DefineFromCoefficients

           INPUTS
            pForwardPolyCoef    : VARIANT*
            pReversePolyCoef    : VARIANT*
            Order               : long'''
        return super(IPolynomialXform, self).DefineFromCoefficients(pForwardPolyCoef, pReversePolyCoef, Order)
    def GetControlPoints(self):
        '''Method IPolynomialXform.GetControlPoints

           OUTPUTS
            ppSrcPoints         : IPointCollection**
            ppTarPoints         : IPointCollection**'''
        return super(IPolynomialXform, self).GetControlPoints()
    def get_Order(self):
        '''Method IPolynomialXform.get_Order

           OUTPUT
            Order               : long*'''
        return super(IPolynomialXform, self).get_Order()
    def GetCoefficients(self, direction):
        '''Method IPolynomialXform.GetCoefficients

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            pPolyCoef           : VARIANT*'''
        return super(IPolynomialXform, self).GetCoefficients(direction)
    def GetSystemResidual(self, direction):
        '''Method IPolynomialXform.GetSystemResidual

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            pResidual           : VARIANT*'''
        return super(IPolynomialXform, self).GetSystemResidual(direction)
    def GetSystemRMS(self, direction):
        '''Method IPolynomialXform.GetSystemRMS

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            rms                 : double*'''
        return super(IPolynomialXform, self).GetSystemRMS(direction)
    def CheckResidualRMS(self, CheckingsSurcePoints, CheckingsTargetPoints, direction):
        '''Method IPolynomialXform.CheckResidualRMS

           INPUTS
            CheckingsSurcePoints: IPointCollection*
            CheckingsTargetPoints: IPointCollection*
            direction           : esriTransformDirection

           OUTPUTS
            pResidual           : VARIANT*
            rms                 : double*'''
        return super(IPolynomialXform, self).CheckResidualRMS(CheckingsSurcePoints, CheckingsTargetPoints, direction)
    def ApplyRotation(self, direction, pPivotPoint, degree):
        '''Method IPolynomialXform.ApplyRotation

           INPUTS
            direction           : esriTransformDirection
            pPivotPoint         : IPoint*
            degree              : double'''
        return super(IPolynomialXform, self).ApplyRotation(direction, pPivotPoint, degree)
    def ApplyShift(self, direction, shiftX, shiftY):
        '''Method IPolynomialXform.ApplyShift

           INPUTS
            direction           : esriTransformDirection
            shiftX              : double
            shiftY              : double'''
        return super(IPolynomialXform, self).ApplyShift(direction, shiftX, shiftY)
    def ApplyScale(self, direction, scaleX, scaleY):
        '''Method IPolynomialXform.ApplyScale

           INPUTS
            direction           : esriTransformDirection
            scaleX              : double
            scaleY              : double'''
        return super(IPolynomialXform, self).ApplyScale(direction, scaleX, scaleY)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IPolynomialXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IPolynomialXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IPolynomialXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IPolynomialXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IPolynomialXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IPolynomialXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IPolynomialXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IPolynomialXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    IsIdentity = property(get_IsIdentity, None, None)
    Order = property(get_Order, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class ISplineXform(_esriDataSourcesRaster.ISplineXform):
    _IID = uuid.UUID('b5e683ca-8651-4f27-b987-5f391adcb366')

    def __init__(self, *args, **kw):
        super(ISplineXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DefineFromControlPoints(self, pSrcGCPs, pDstGCPs):
        '''Method ISplineXform.DefineFromControlPoints

           INPUTS
            pSrcGCPs            : IPointCollection*
            pDstGCPs            : IPointCollection*'''
        return super(ISplineXform, self).DefineFromControlPoints(pSrcGCPs, pDstGCPs)
    def GetControlPoints(self):
        '''Method ISplineXform.GetControlPoints

           OUTPUTS
            ppSrcGCPs           : IPointCollection**
            ppDstGCPs           : IPointCollection**'''
        return super(ISplineXform, self).GetControlPoints()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(ISplineXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(ISplineXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(ISplineXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(ISplineXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(ISplineXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(ISplineXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(ISplineXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(ISplineXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IAdjustXform(_esriDataSourcesRaster.IAdjustXform):
    _IID = uuid.UUID('8a26d9ef-f002-4124-8939-9ca7a25f484c')

    def __init__(self, *args, **kw):
        super(IAdjustXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DefineFromControlPoints(self, pSrcGCPs, pDstGCPs):
        '''Method IAdjustXform.DefineFromControlPoints

           INPUTS
            pSrcGCPs            : IPointCollection*
            pDstGCPs            : IPointCollection*'''
        return super(IAdjustXform, self).DefineFromControlPoints(pSrcGCPs, pDstGCPs)
    def GetControlPoints(self):
        '''Method IAdjustXform.GetControlPoints

           OUTPUTS
            ppSrcGCPs           : IPointCollection**
            ppDstGCPs           : IPointCollection**'''
        return super(IAdjustXform, self).GetControlPoints()
    def get_NaturalNeighbor(self):
        '''Method IAdjustXform.get_NaturalNeighbor

           OUTPUT
            pNaturalNeighbor    : VARIANT_BOOL*'''
        return super(IAdjustXform, self).get_NaturalNeighbor()
    def put_NaturalNeighbor(self, pNaturalNeighbor):
        '''Method IAdjustXform.put_NaturalNeighbor

           INPUT
            pNaturalNeighbor    : VARIANT_BOOL'''
        return super(IAdjustXform, self).put_NaturalNeighbor(pNaturalNeighbor)
    def get_PolynomialApproximation(self):
        '''Method IAdjustXform.get_PolynomialApproximation

           OUTPUT
            pOrder              : long*'''
        return super(IAdjustXform, self).get_PolynomialApproximation()
    def put_PolynomialApproximation(self, pOrder):
        '''Method IAdjustXform.put_PolynomialApproximation

           INPUT
            pOrder              : long'''
        return super(IAdjustXform, self).put_PolynomialApproximation(pOrder)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IAdjustXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IAdjustXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IAdjustXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IAdjustXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IAdjustXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IAdjustXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IAdjustXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IAdjustXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    IsIdentity = property(get_IsIdentity, None, None)
    NaturalNeighbor = property(get_NaturalNeighbor, put_NaturalNeighbor, None)
    PolynomialApproximation = property(get_PolynomialApproximation, put_PolynomialApproximation, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IRPCXform(_esriDataSourcesRaster.IRPCXform):
    _IID = uuid.UUID('fbfc2eea-2177-48e2-b79b-5451fb6fd123')

    def __init__(self, *args, **kw):
        super(IRPCXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ForwardXform(self):
        '''Method IRPCXform.get_ForwardXform

           OUTPUT
            ppXf                : IGeodataXform**'''
        return super(IRPCXform, self).get_ForwardXform()
    def putref_ForwardXform(self, ppXf):
        '''Method IRPCXform.putref_ForwardXform

           INPUT
            ppXf                : IGeodataXform*'''
        return super(IRPCXform, self).putref_ForwardXform(ppXf)
    def DefineFromCoefficients(self, pRPC):
        '''Method IRPCXform.DefineFromCoefficients

           INPUT
            pRPC                : VARIANT*'''
        return super(IRPCXform, self).DefineFromCoefficients(pRPC)
    def GetCoefficients(self):
        '''Method IRPCXform.GetCoefficients

           OUTPUT
            pRPC                : VARIANT*'''
        return super(IRPCXform, self).GetCoefficients()
    def PutCoefficients(self, RPC):
        '''Method IRPCXform.PutCoefficients

           INPUT
            RPC                 : double*'''
        return super(IRPCXform, self).PutCoefficients(RPC)
    def QueryCoefficients(self, RPC):
        '''Method IRPCXform.QueryCoefficients

           INPUT
            RPC                 : double*'''
        return super(IRPCXform, self).QueryCoefficients(RPC)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IRPCXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IRPCXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IRPCXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IRPCXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IRPCXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IRPCXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IRPCXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IRPCXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    ForwardXform = property(get_ForwardXform, putref_ForwardXform, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IApproximationXform(_esriDataSourcesRaster.IApproximationXform):
    _IID = uuid.UUID('59b8596f-2c6a-4dfd-bb63-d413b4703851')

    def __init__(self, *args, **kw):
        super(IApproximationXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_GeodataXform(self, ppXform):
        '''Method IApproximationXform.putref_GeodataXform

           INPUT
            ppXform             : IGeodataXform*'''
        return super(IApproximationXform, self).putref_GeodataXform(ppXform)
    def get_GeodataXform(self):
        '''Method IApproximationXform.get_GeodataXform

           OUTPUT
            ppXform             : IGeodataXform**'''
        return super(IApproximationXform, self).get_GeodataXform()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IApproximationXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IApproximationXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IApproximationXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IApproximationXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IApproximationXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IApproximationXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IApproximationXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IApproximationXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    GeodataXform = property(get_GeodataXform, putref_GeodataXform, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IGeodataXformApproximation(_esriDataSourcesRaster.IGeodataXformApproximation):
    _IID = uuid.UUID('f533cf88-29bd-4d4b-88d0-050622a46c3a')

    def __init__(self, *args, **kw):
        super(IGeodataXformApproximation, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Tolerance(self, pTolerance):
        '''Method IGeodataXformApproximation.put_Tolerance

           INPUT
            pTolerance          : double'''
        return super(IGeodataXformApproximation, self).put_Tolerance(pTolerance)
    def get_Tolerance(self):
        '''Method IGeodataXformApproximation.get_Tolerance

           OUTPUT
            pTolerance          : double*'''
        return super(IGeodataXformApproximation, self).get_Tolerance()
    def put_GridSize(self, pSize):
        '''Method IGeodataXformApproximation.put_GridSize

           INPUT
            pSize               : long'''
        return super(IGeodataXformApproximation, self).put_GridSize(pSize)
    def get_GridSize(self):
        '''Method IGeodataXformApproximation.get_GridSize

           OUTPUT
            pSize               : long*'''
        return super(IGeodataXformApproximation, self).get_GridSize()
    def put_RecalculateTolerance(self, pRecalculateTolerance):
        '''Method IGeodataXformApproximation.put_RecalculateTolerance

           INPUT
            pRecalculateTolerance: VARIANT_BOOL'''
        return super(IGeodataXformApproximation, self).put_RecalculateTolerance(pRecalculateTolerance)
    def get_RecalculateTolerance(self):
        '''Method IGeodataXformApproximation.get_RecalculateTolerance

           OUTPUT
            pRecalculateTolerance: VARIANT_BOOL*'''
        return super(IGeodataXformApproximation, self).get_RecalculateTolerance()
    def get_Approximation(self):
        '''Method IGeodataXformApproximation.get_Approximation

           OUTPUT
            pApproximation      : VARIANT_BOOL*'''
        return super(IGeodataXformApproximation, self).get_Approximation()
    def put_Approximation(self, pApproximation):
        '''Method IGeodataXformApproximation.put_Approximation

           INPUT
            pApproximation      : VARIANT_BOOL'''
        return super(IGeodataXformApproximation, self).put_Approximation(pApproximation)
    Approximation = property(get_Approximation, put_Approximation, None)
    GridSize = property(get_GridSize, put_GridSize, None)
    RecalculateTolerance = property(get_RecalculateTolerance, put_RecalculateTolerance, None)
    Tolerance = property(get_Tolerance, put_Tolerance, None)

class IRGB32PixelResampler(_esriDataSourcesRaster.IRGB32PixelResampler):
    _IID = uuid.UUID('7b45924f-d423-446a-bc51-2338dd853e23')

    def __init__(self, *args, **kw):
        super(IRGB32PixelResampler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ResamplingMethod(self):
        '''Method IRGB32PixelResampler.get_ResamplingMethod

           OUTPUT
            pMethod             : rstResamplingTypes*'''
        return super(IRGB32PixelResampler, self).get_ResamplingMethod()
    def put_ResamplingMethod(self, pMethod):
        '''Method IRGB32PixelResampler.put_ResamplingMethod

           INPUT
            pMethod             : rstResamplingTypes'''
        return super(IRGB32PixelResampler, self).put_ResamplingMethod(pMethod)
    def get_Background(self):
        '''Method IRGB32PixelResampler.get_Background

           OUTPUT
            pBackground         : VARIANT*'''
        return super(IRGB32PixelResampler, self).get_Background()
    def put_Background(self, pBackground):
        '''Method IRGB32PixelResampler.put_Background

           INPUT
            pBackground         : VARIANT'''
        return super(IRGB32PixelResampler, self).put_Background(pBackground)
    def get_SupportLinearScaling(self):
        '''Method IPixelResampler.get_SupportLinearScaling (from IPixelResampler)

           OUTPUT
            pSupportLinearScaling: VARIANT_BOOL*'''
        return super(IRGB32PixelResampler, self).get_SupportLinearScaling()
    def get_LinearScaling(self):
        '''Method IPixelResampler.get_LinearScaling (from IPixelResampler)

           OUTPUT
            pLinearScaling      : VARIANT_BOOL*'''
        return super(IRGB32PixelResampler, self).get_LinearScaling()
    def put_LinearScaling(self, pLinearScaling):
        '''Method IPixelResampler.put_LinearScaling (from IPixelResampler)

           INPUT
            pLinearScaling      : VARIANT_BOOL'''
        return super(IRGB32PixelResampler, self).put_LinearScaling(pLinearScaling)
    def get_WindowSize(self):
        '''Method IPixelResampler.get_WindowSize (from IPixelResampler)

           OUTPUT
            pNumPixels          : long*'''
        return super(IRGB32PixelResampler, self).get_WindowSize()
    def get_DownSampling(self):
        '''Method IPixelResampler.get_DownSampling (from IPixelResampler)

           OUTPUT
            pDownSampling       : VARIANT_BOOL*'''
        return super(IRGB32PixelResampler, self).get_DownSampling()
    def Resample(self, iCol, iRow, nCols, nRows, points, ulx, uly, dx, dy, pSrcPixelBlock, pDstPixelBlock):
        '''Method IPixelResampler.Resample (from IPixelResampler)

           INPUTS
            iCol                : long
            iRow                : long
            nCols               : long
            nRows               : long
            points              : WKSPoint*
            ulx                 : double
            uly                 : double
            dx                  : double
            dy                  : double
            pSrcPixelBlock      : IPixelBlock*
            pDstPixelBlock      : IPixelBlock*'''
        return super(IRGB32PixelResampler, self).Resample(iCol, iRow, nCols, nRows, points, ulx, uly, dx, dy, pSrcPixelBlock, pDstPixelBlock)
    Background = property(get_Background, put_Background, None)
    DownSampling = property(get_DownSampling, None, None)
    LinearScaling = property(get_LinearScaling, put_LinearScaling, None)
    ResamplingMethod = property(get_ResamplingMethod, put_ResamplingMethod, None)
    SupportLinearScaling = property(get_SupportLinearScaling, None, None)
    WindowSize = property(get_WindowSize, None, None)

class ICustomXform(_esriDataSourcesRaster.ICustomXform):
    _IID = uuid.UUID('7506a3ed-4146-4268-92f5-c342ef1f6905')
    def Initialize(self, filename, Data):
        '''Method ICustomXform.Initialize

           INPUTS
            filename            : BSTR
            Data                : BSTR'''
        return super(ICustomXform, self).Initialize(filename, Data)
    def get_Approximation(self):
        '''Method ICustomXform.get_Approximation

           OUTPUT
            pApproximation      : VARIANT_BOOL*'''
        return super(ICustomXform, self).get_Approximation()
    Approximation = property(get_Approximation, None, None)

class IFrameXform(_esriDataSourcesRaster.IFrameXform):
    _IID = uuid.UUID('68f50e4b-6e2d-4950-bd52-d9646acc8a97')

    def __init__(self, *args, **kw):
        super(IFrameXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_InteriorOrientation(self):
        '''Method IFrameXform.get_InteriorOrientation

           OUTPUT
            ppAffine            : IGeodataXform**'''
        return super(IFrameXform, self).get_InteriorOrientation()
    def putref_InteriorOrientation(self, ppAffine):
        '''Method IFrameXform.putref_InteriorOrientation

           INPUT
            ppAffine            : IGeodataXform*'''
        return super(IFrameXform, self).putref_InteriorOrientation(ppAffine)
    def get_EnableKonrady(self):
        '''Method IFrameXform.get_EnableKonrady

           OUTPUT
            pK                  : VARIANT_BOOL*'''
        return super(IFrameXform, self).get_EnableKonrady()
    def put_EnableKonrady(self, pK):
        '''Method IFrameXform.put_EnableKonrady

           INPUT
            pK                  : VARIANT_BOOL'''
        return super(IFrameXform, self).put_EnableKonrady(pK)
    def get_KonradyParameters(self):
        '''Method IFrameXform.get_KonradyParameters

           OUTPUT
            pK                  : VARIANT*'''
        return super(IFrameXform, self).get_KonradyParameters()
    def put_KonradyParameters(self, pK):
        '''Method IFrameXform.put_KonradyParameters

           INPUT
            pK                  : VARIANT'''
        return super(IFrameXform, self).put_KonradyParameters(pK)
    def get_KonradyType(self):
        '''Method IFrameXform.get_KonradyType

           OUTPUT
            pType               : esriRasterKonradyType*'''
        return super(IFrameXform, self).get_KonradyType()
    def put_KonradyType(self, pType):
        '''Method IFrameXform.put_KonradyType

           INPUT
            pType               : esriRasterKonradyType'''
        return super(IFrameXform, self).put_KonradyType(pType)
    def QueryKonradyParameters(self, pK):
        '''Method IFrameXform.QueryKonradyParameters

           INPUT
            pK                  : double*'''
        return super(IFrameXform, self).QueryKonradyParameters(pK)
    def get_ApplyCurvatureAndRefraction(self):
        '''Method IFrameXform.get_ApplyCurvatureAndRefraction

           OUTPUT
            pApplyCurvatureAndRefraction: VARIANT_BOOL*'''
        return super(IFrameXform, self).get_ApplyCurvatureAndRefraction()
    def put_ApplyCurvatureAndRefraction(self, pApplyCurvatureAndRefraction):
        '''Method IFrameXform.put_ApplyCurvatureAndRefraction

           INPUT
            pApplyCurvatureAndRefraction: VARIANT_BOOL'''
        return super(IFrameXform, self).put_ApplyCurvatureAndRefraction(pApplyCurvatureAndRefraction)
    def get_EarthRadius(self):
        '''Method IFrameXform.get_EarthRadius

           OUTPUT
            radius              : double*'''
        return super(IFrameXform, self).get_EarthRadius()
    def put_EarthRadius(self, radius):
        '''Method IFrameXform.put_EarthRadius

           INPUT
            radius              : double'''
        return super(IFrameXform, self).put_EarthRadius(radius)
    def get_AverageZ(self):
        '''Method IFrameXform.get_AverageZ

           OUTPUT
            AverageZ            : double*'''
        return super(IFrameXform, self).get_AverageZ()
    def put_AverageZ(self, AverageZ):
        '''Method IFrameXform.put_AverageZ

           INPUT
            AverageZ            : double'''
        return super(IFrameXform, self).put_AverageZ(AverageZ)
    def get_PrincipalPoint(self):
        '''Method IFrameXform.get_PrincipalPoint

           OUTPUT
            pp                  : IPoint**'''
        return super(IFrameXform, self).get_PrincipalPoint()
    def putref_PrincipalPoint(self, pp):
        '''Method IFrameXform.putref_PrincipalPoint

           INPUT
            pp                  : IPoint*'''
        return super(IFrameXform, self).putref_PrincipalPoint(pp)
    def get_PerspectiveMatrix(self):
        '''Method IFrameXform.get_PerspectiveMatrix

           OUTPUT
            pMatrix             : VARIANT*'''
        return super(IFrameXform, self).get_PerspectiveMatrix()
    def put_PerspectiveMatrix(self, pMatrix):
        '''Method IFrameXform.put_PerspectiveMatrix

           INPUT
            pMatrix             : VARIANT'''
        return super(IFrameXform, self).put_PerspectiveMatrix(pMatrix)
    def QueryPerspectiveMatrix(self, pMatrix):
        '''Method IFrameXform.QueryPerspectiveMatrix

           INPUT
            pMatrix             : double*'''
        return super(IFrameXform, self).QueryPerspectiveMatrix(pMatrix)
    def get_PerspectiveCenter(self):
        '''Method IFrameXform.get_PerspectiveCenter

           OUTPUT
            sp                  : IPoint**'''
        return super(IFrameXform, self).get_PerspectiveCenter()
    def putref_PerspectiveCenter(self, sp):
        '''Method IFrameXform.putref_PerspectiveCenter

           INPUT
            sp                  : IPoint*'''
        return super(IFrameXform, self).putref_PerspectiveCenter(sp)
    def get_PerspectivePolarity(self):
        '''Method IFrameXform.get_PerspectivePolarity

           OUTPUT
            polarity            : long*'''
        return super(IFrameXform, self).get_PerspectivePolarity()
    def put_PerspectivePolarity(self, polarity):
        '''Method IFrameXform.put_PerspectivePolarity

           INPUT
            polarity            : long'''
        return super(IFrameXform, self).put_PerspectivePolarity(polarity)
    def get_FocalLength(self):
        '''Method IFrameXform.get_FocalLength

           OUTPUT
            length              : double*'''
        return super(IFrameXform, self).get_FocalLength()
    def put_FocalLength(self, length):
        '''Method IFrameXform.put_FocalLength

           INPUT
            length              : double'''
        return super(IFrameXform, self).put_FocalLength(length)
    def PutInteriorOrientationParameters(self, direction, Parameters):
        '''Method IFrameXform.PutInteriorOrientationParameters

           INPUTS
            direction           : esriTransformDirection
            Parameters          : VARIANT'''
        return super(IFrameXform, self).PutInteriorOrientationParameters(direction, Parameters)
    def PutPerspectiveAngles(self, omega, phi, kappa, clockwise):
        '''Method IFrameXform.PutPerspectiveAngles

           INPUTS
            omega               : double
            phi                 : double
            kappa               : double
            clockwise           : VARIANT_BOOL'''
        return super(IFrameXform, self).PutPerspectiveAngles(omega, phi, kappa, clockwise)
    def QueryPerspectiveAngles(self):
        '''Method IFrameXform.QueryPerspectiveAngles

           OUTPUTS
            pOmega              : double*
            pPhi                : double*
            pKappa              : double*
            pClockwise          : VARIANT_BOOL*'''
        return super(IFrameXform, self).QueryPerspectiveAngles()
    def putref_LSR(self, ppLSR):
        '''Method IFrameXform.putref_LSR

           INPUT
            ppLSR               : IGeodataXform*'''
        return super(IFrameXform, self).putref_LSR(ppLSR)
    def get_LSR(self):
        '''Method IFrameXform.get_LSR

           OUTPUT
            ppLSR               : IGeodataXform**'''
        return super(IFrameXform, self).get_LSR()
    def PutDistortionTable(self, pDistanceInMillimeters, pDistortionInMicrons):
        '''Method IFrameXform.PutDistortionTable

           INPUTS
            pDistanceInMillimeters: IDoubleArray*
            pDistortionInMicrons: IDoubleArray*'''
        return super(IFrameXform, self).PutDistortionTable(pDistanceInMillimeters, pDistortionInMicrons)
    def GetDistortionTable(self):
        '''Method IFrameXform.GetDistortionTable

           OUTPUTS
            ppDistanceInMillimeters: IDoubleArray**
            ppDistortionInMicrons: IDoubleArray**'''
        return super(IFrameXform, self).GetDistortionTable()
    def get_Residuals(self):
        '''Method IFrameXform.get_Residuals

           OUTPUT
            ppResidualsInMicrons: IDoubleArray**'''
        return super(IFrameXform, self).get_Residuals()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IFrameXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IFrameXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IFrameXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IFrameXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IFrameXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IFrameXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IFrameXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IFrameXform, self).TransformPoints(Direction)
    ApplyCurvatureAndRefraction = property(get_ApplyCurvatureAndRefraction, put_ApplyCurvatureAndRefraction, None)
    AverageZ = property(get_AverageZ, put_AverageZ, None)
    Domains = property(get_Domains, None, None)
    EarthRadius = property(get_EarthRadius, put_EarthRadius, None)
    EnableKonrady = property(get_EnableKonrady, put_EnableKonrady, None)
    FocalLength = property(get_FocalLength, put_FocalLength, None)
    InteriorOrientation = property(get_InteriorOrientation, putref_InteriorOrientation, None)
    IsIdentity = property(get_IsIdentity, None, None)
    KonradyParameters = property(get_KonradyParameters, put_KonradyParameters, None)
    KonradyType = property(get_KonradyType, put_KonradyType, None)
    LSR = property(get_LSR, putref_LSR, None)
    PerspectiveCenter = property(get_PerspectiveCenter, putref_PerspectiveCenter, None)
    PerspectiveMatrix = property(get_PerspectiveMatrix, put_PerspectiveMatrix, None)
    PerspectivePolarity = property(get_PerspectivePolarity, put_PerspectivePolarity, None)
    PrincipalPoint = property(get_PrincipalPoint, putref_PrincipalPoint, None)
    Residuals = property(get_Residuals, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class ILSRXform(_esriDataSourcesRaster.ILSRXform):
    _IID = uuid.UUID('deb5e788-ad75-43fb-97e5-1155aa717203')

    def __init__(self, *args, **kw):
        super(ILSRXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PerspectiveCenter(self):
        '''Method ILSRXform.get_PerspectiveCenter

           OUTPUT
            ppCenter            : IPoint**'''
        return super(ILSRXform, self).get_PerspectiveCenter()
    def putref_PerspectiveCenter(self, ppCenter):
        '''Method ILSRXform.putref_PerspectiveCenter

           INPUT
            ppCenter            : IPoint*'''
        return super(ILSRXform, self).putref_PerspectiveCenter(ppCenter)
    def get_RotationMatrix(self):
        '''Method ILSRXform.get_RotationMatrix

           OUTPUT
            pMatrix             : VARIANT*'''
        return super(ILSRXform, self).get_RotationMatrix()
    def put_RotationMatrix(self, pMatrix):
        '''Method ILSRXform.put_RotationMatrix

           INPUT
            pMatrix             : VARIANT'''
        return super(ILSRXform, self).put_RotationMatrix(pMatrix)
    def get_Flattening(self):
        '''Method ILSRXform.get_Flattening

           OUTPUT
            pFlattening         : double*'''
        return super(ILSRXform, self).get_Flattening()
    def put_Flattening(self, pFlattening):
        '''Method ILSRXform.put_Flattening

           INPUT
            pFlattening         : double'''
        return super(ILSRXform, self).put_Flattening(pFlattening)
    def get_EquatorialRadius(self):
        '''Method ILSRXform.get_EquatorialRadius

           OUTPUT
            pRadius             : double*'''
        return super(ILSRXform, self).get_EquatorialRadius()
    def put_EquatorialRadius(self, pRadius):
        '''Method ILSRXform.put_EquatorialRadius

           INPUT
            pRadius             : double'''
        return super(ILSRXform, self).put_EquatorialRadius(pRadius)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(ILSRXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(ILSRXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(ILSRXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(ILSRXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(ILSRXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(ILSRXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(ILSRXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(ILSRXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    EquatorialRadius = property(get_EquatorialRadius, put_EquatorialRadius, None)
    Flattening = property(get_Flattening, put_Flattening, None)
    IsIdentity = property(get_IsIdentity, None, None)
    PerspectiveCenter = property(get_PerspectiveCenter, putref_PerspectiveCenter, None)
    RotationMatrix = property(get_RotationMatrix, put_RotationMatrix, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IRasterXformHelper(_esriDataSourcesRaster.IRasterXformHelper):
    _IID = uuid.UUID('a17ed9eb-23d8-48b4-8f05-a6e55bdffed7')
    def Transform3D(self, ipXf, direction, npts, pPoints):
        '''Method IRasterXformHelper.Transform3D

           INPUTS
            ipXf                : IGeodataXform*
            direction           : esriTransformDirection
            npts                : long
            pPoints             : WKSPointZ*'''
        return super(IRasterXformHelper, self).Transform3D(ipXf, direction, npts, pPoints)
    def Transform3DPoints(self, ipXf, direction, pPoints):
        '''Method IRasterXformHelper.Transform3DPoints

           INPUTS
            ipXf                : IGeodataXform*
            direction           : esriTransformDirection
            pPoints             : IPointCollection*'''
        return super(IRasterXformHelper, self).Transform3DPoints(ipXf, direction, pPoints)

class ISPOT5Xform(_esriDataSourcesRaster.ISPOT5Xform):
    _IID = uuid.UUID('4a303832-7ee4-491c-8434-84521e353589')

    def __init__(self, *args, **kw):
        super(ISPOT5Xform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Columns(self):
        '''Method ISPOT5Xform.get_Columns

           OUTPUT
            Columns             : long*'''
        return super(ISPOT5Xform, self).get_Columns()
    def get_Rows(self):
        '''Method ISPOT5Xform.get_Rows

           OUTPUT
            Rows                : long*'''
        return super(ISPOT5Xform, self).get_Rows()
    def get_SunAzimuth(self):
        '''Method ISPOT5Xform.get_SunAzimuth

           OUTPUT
            SunAzimuth          : double*'''
        return super(ISPOT5Xform, self).get_SunAzimuth()
    def get_SunElevation(self):
        '''Method ISPOT5Xform.get_SunElevation

           OUTPUT
            SunElevation        : double*'''
        return super(ISPOT5Xform, self).get_SunElevation()
    def get_MaxIterations(self):
        '''Method ISPOT5Xform.get_MaxIterations

           OUTPUT
            MaxIterations       : long*'''
        return super(ISPOT5Xform, self).get_MaxIterations()
    def put_MaxIterations(self, MaxIterations):
        '''Method ISPOT5Xform.put_MaxIterations

           INPUT
            MaxIterations       : long'''
        return super(ISPOT5Xform, self).put_MaxIterations(MaxIterations)
    def get_InterpolationThreshold(self):
        '''Method ISPOT5Xform.get_InterpolationThreshold

           OUTPUT
            interpThreshold     : double*'''
        return super(ISPOT5Xform, self).get_InterpolationThreshold()
    def put_InterpolationThreshold(self, interpThreshold):
        '''Method ISPOT5Xform.put_InterpolationThreshold

           INPUT
            interpThreshold     : double'''
        return super(ISPOT5Xform, self).put_InterpolationThreshold(interpThreshold)
    def get_Parameters(self):
        '''Method ISPOT5Xform.get_Parameters

           OUTPUT
            ppParameters        : IVariantArray**'''
        return super(ISPOT5Xform, self).get_Parameters()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(ISPOT5Xform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(ISPOT5Xform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(ISPOT5Xform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(ISPOT5Xform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(ISPOT5Xform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(ISPOT5Xform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(ISPOT5Xform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(ISPOT5Xform, self).TransformPoints(Direction)
    Columns = property(get_Columns, None, None)
    Domains = property(get_Domains, None, None)
    InterpolationThreshold = property(get_InterpolationThreshold, put_InterpolationThreshold, None)
    IsIdentity = property(get_IsIdentity, None, None)
    MaxIterations = property(get_MaxIterations, put_MaxIterations, None)
    Parameters = property(get_Parameters, None, None)
    Rows = property(get_Rows, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    SunAzimuth = property(get_SunAzimuth, None, None)
    SunElevation = property(get_SunElevation, None, None)

class IFormosat2Xform(_esriDataSourcesRaster.IFormosat2Xform):
    _IID = uuid.UUID('3d66c2c5-ff27-40f0-aaf6-faf18bc07bd5')

    def __init__(self, *args, **kw):
        super(IFormosat2Xform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Columns(self):
        '''Method IFormosat2Xform.get_Columns

           OUTPUT
            Columns             : long*'''
        return super(IFormosat2Xform, self).get_Columns()
    def get_Rows(self):
        '''Method IFormosat2Xform.get_Rows

           OUTPUT
            Rows                : long*'''
        return super(IFormosat2Xform, self).get_Rows()
    def get_SunAzimuth(self):
        '''Method IFormosat2Xform.get_SunAzimuth

           OUTPUT
            SunAzimuth          : double*'''
        return super(IFormosat2Xform, self).get_SunAzimuth()
    def get_SunElevation(self):
        '''Method IFormosat2Xform.get_SunElevation

           OUTPUT
            SunElevation        : double*'''
        return super(IFormosat2Xform, self).get_SunElevation()
    def get_MaxIterations(self):
        '''Method IFormosat2Xform.get_MaxIterations

           OUTPUT
            MaxIterations       : long*'''
        return super(IFormosat2Xform, self).get_MaxIterations()
    def put_MaxIterations(self, MaxIterations):
        '''Method IFormosat2Xform.put_MaxIterations

           INPUT
            MaxIterations       : long'''
        return super(IFormosat2Xform, self).put_MaxIterations(MaxIterations)
    def get_InterpolationThreshold(self):
        '''Method IFormosat2Xform.get_InterpolationThreshold

           OUTPUT
            interpThreshold     : double*'''
        return super(IFormosat2Xform, self).get_InterpolationThreshold()
    def put_InterpolationThreshold(self, interpThreshold):
        '''Method IFormosat2Xform.put_InterpolationThreshold

           INPUT
            interpThreshold     : double'''
        return super(IFormosat2Xform, self).put_InterpolationThreshold(interpThreshold)
    def get_Parameters(self):
        '''Method IFormosat2Xform.get_Parameters

           OUTPUT
            ppParameters        : IVariantArray**'''
        return super(IFormosat2Xform, self).get_Parameters()
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IFormosat2Xform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IFormosat2Xform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IFormosat2Xform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IFormosat2Xform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IFormosat2Xform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IFormosat2Xform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IFormosat2Xform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IFormosat2Xform, self).TransformPoints(Direction)
    Columns = property(get_Columns, None, None)
    Domains = property(get_Domains, None, None)
    InterpolationThreshold = property(get_InterpolationThreshold, put_InterpolationThreshold, None)
    IsIdentity = property(get_IsIdentity, None, None)
    MaxIterations = property(get_MaxIterations, put_MaxIterations, None)
    Parameters = property(get_Parameters, None, None)
    Rows = property(get_Rows, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    SunAzimuth = property(get_SunAzimuth, None, None)
    SunElevation = property(get_SunElevation, None, None)

class ICSMXform(_esriDataSourcesRaster.ICSMXform):
    _IID = uuid.UUID('df60c06e-da9f-4b13-9a9a-35701d9e5b75')

    def __init__(self, *args, **kw):
        super(ICSMXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetSensorModelProperty(self, propertyName):
        '''Method ICSMXform.GetSensorModelProperty

           INPUT
            propertyName        : BSTR

           OUTPUT
            pPropertyValue      : VARIANT*'''
        return super(ICSMXform, self).GetSensorModelProperty(propertyName)
    def get_ImageFile(self):
        '''Method ICSMXform.get_ImageFile

           OUTPUT
            pNITFImageFile      : BSTR*'''
        return super(ICSMXform, self).get_ImageFile()
    def put_ImageFile(self, pNITFImageFile):
        '''Method ICSMXform.put_ImageFile

           INPUT
            pNITFImageFile      : BSTR'''
        return super(ICSMXform, self).put_ImageFile(pNITFImageFile)
    def get_IterPrecision(self):
        '''Method ICSMXform.get_IterPrecision

           OUTPUT
            pPrecision          : double*'''
        return super(ICSMXform, self).get_IterPrecision()
    def put_IterPrecision(self, pPrecision):
        '''Method ICSMXform.put_IterPrecision

           INPUT
            pPrecision          : double'''
        return super(ICSMXform, self).put_IterPrecision(pPrecision)
    def PutSensorModelProperty(self, propertyKey, propertyValue):
        '''Method ICSMXform.PutSensorModelProperty

           INPUTS
            propertyKey         : BSTR
            propertyValue       : BSTR'''
        return super(ICSMXform, self).PutSensorModelProperty(propertyKey, propertyValue)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(ICSMXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(ICSMXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(ICSMXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(ICSMXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(ICSMXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(ICSMXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(ICSMXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(ICSMXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    ImageFile = property(get_ImageFile, put_ImageFile, None)
    IsIdentity = property(get_IsIdentity, None, None)
    IterPrecision = property(get_IterPrecision, put_IterPrecision, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IProjectiveXform(_esriDataSourcesRaster.IProjectiveXform):
    _IID = uuid.UUID('e2fa80d1-ee50-43fa-834f-50d056aae150')

    def __init__(self, *args, **kw):
        super(IProjectiveXform, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def DefineFromControlPoints(self, pSrcPoints, pTarPoints):
        '''Method IProjectiveXform.DefineFromControlPoints

           INPUTS
            pSrcPoints          : IPointCollection*
            pTarPoints          : IPointCollection*'''
        return super(IProjectiveXform, self).DefineFromControlPoints(pSrcPoints, pTarPoints)
    def DefineFromCoefficients(self, direction, pCoef):
        '''Method IProjectiveXform.DefineFromCoefficients

           INPUTS
            direction           : esriTransformDirection
            pCoef               : VARIANT*'''
        return super(IProjectiveXform, self).DefineFromCoefficients(direction, pCoef)
    def GetControlPoints(self):
        '''Method IProjectiveXform.GetControlPoints

           OUTPUTS
            ppSrcPoints         : IPointCollection**
            ppTarPoints         : IPointCollection**'''
        return super(IProjectiveXform, self).GetControlPoints()
    def GetCoefficients(self, direction):
        '''Method IProjectiveXform.GetCoefficients

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            pPolyCoef           : VARIANT*'''
        return super(IProjectiveXform, self).GetCoefficients(direction)
    def GetSystemResidual(self, direction):
        '''Method IProjectiveXform.GetSystemResidual

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            pResidual           : VARIANT*'''
        return super(IProjectiveXform, self).GetSystemResidual(direction)
    def GetSystemRMS(self, direction):
        '''Method IProjectiveXform.GetSystemRMS

           INPUT
            direction           : esriTransformDirection

           OUTPUT
            rms                 : double*'''
        return super(IProjectiveXform, self).GetSystemRMS(direction)
    def get_SpatialReference(self):
        '''Method IGeodataXform.get_SpatialReference (from IGeodataXform)

           OUTPUT
            spatialRefence      : ISpatialReference**'''
        return super(IProjectiveXform, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRefence):
        '''Method IGeodataXform.putref_SpatialReference (from IGeodataXform)

           INPUT
            spatialRefence      : ISpatialReference*'''
        return super(IProjectiveXform, self).putref_SpatialReference(spatialRefence)
    def get_Domains(self):
        '''Method IGeodataXform.get_Domains (from IGeodataXform)

           OUTPUT
            Domains             : IGeometryCollection**'''
        return super(IProjectiveXform, self).get_Domains()
    def get_IsIdentity(self):
        '''Method IGeodataXform.get_IsIdentity (from IGeodataXform)

           OUTPUT
            IsIdentity          : VARIANT_BOOL*'''
        return super(IProjectiveXform, self).get_IsIdentity()
    def Transform(self, Direction, npoints):
        '''Method IGeodataXform.Transform (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            npoints             : long

           OUTPUT
            points              : WKSPoint*'''
        return super(IProjectiveXform, self).Transform(Direction, npoints)
    def TransformCellsize(self, Direction, AreaOfInterest):
        '''Method IGeodataXform.TransformCellsize (from IGeodataXform)

           INPUTS
            Direction           : esriTransformDirection
            AreaOfInterest      : IEnvelope*

           OUTPUTS
            dx                  : double*
            dy                  : double*'''
        return super(IProjectiveXform, self).TransformCellsize(Direction, AreaOfInterest)
    def TransformExtent(self, Direction):
        '''Method IGeodataXform.TransformExtent (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            Extent              : IEnvelope*'''
        return super(IProjectiveXform, self).TransformExtent(Direction)
    def TransformPoints(self, Direction):
        '''Method IGeodataXform.TransformPoints (from IGeodataXform)

           INPUT
            Direction           : esriTransformDirection

           OUTPUT
            points              : IPointCollection*'''
        return super(IProjectiveXform, self).TransformPoints(Direction)
    Domains = property(get_Domains, None, None)
    IsIdentity = property(get_IsIdentity, None, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)

class IPushbroomUtilities(_esriDataSourcesRaster.IPushbroomUtilities):
    _IID = uuid.UUID('bfefedb3-12cb-42c9-b59b-1092998414bb')
    def VectorNormalize(self, v1):
        '''Method IPushbroomUtilities.VectorNormalize

           INPUT
            v1                  : double*

           OUTPUT
            v2                  : double*'''
        return super(IPushbroomUtilities, self).VectorNormalize(v1)
    def VectorCross(self, v1, v2):
        '''Method IPushbroomUtilities.VectorCross

           INPUTS
            v1                  : double*
            v2                  : double*

           OUTPUT
            vResult             : double*'''
        return super(IPushbroomUtilities, self).VectorCross(v1, v2)
    def VectorDirection(self, v, lon, lat):
        '''Method IPushbroomUtilities.VectorDirection

           INPUTS
            v                   : double*
            lon                 : double*
            lat                 : double*'''
        return super(IPushbroomUtilities, self).VectorDirection(v, lon, lat)
    def VectorIntersectEllipsoid(self, vP, vU3, htAboveEllipsoid):
        '''Method IPushbroomUtilities.VectorIntersectEllipsoid

           INPUTS
            vP                  : double*
            vU3                 : double*
            htAboveEllipsoid    : double

           OUTPUTS
            lon                 : double*
            lat                 : double*'''
        return super(IPushbroomUtilities, self).VectorIntersectEllipsoid(vP, vU3, htAboveEllipsoid)
    def VectorRotate3Axes(self, vIn, xRot, yRot, zRot):
        '''Method IPushbroomUtilities.VectorRotate3Axes

           INPUTS
            vIn                 : double*
            xRot                : double
            yRot                : double
            zRot                : double

           OUTPUT
            vOut                : double*'''
        return super(IPushbroomUtilities, self).VectorRotate3Axes(vIn, xRot, yRot, zRot)
    def convertLonLatToECEF(self, lon, lat, elev):
        '''Method IPushbroomUtilities.convertLonLatToECEF

           INPUTS
            lon                 : double
            lat                 : double
            elev                : double

           OUTPUTS
            x                   : double*
            y                   : double*
            z                   : double*'''
        return super(IPushbroomUtilities, self).convertLonLatToECEF(lon, lat, elev)
    def convertECEFtoLonLat(self, x, y, z):
        '''Method IPushbroomUtilities.convertECEFtoLonLat

           INPUTS
            x                   : double
            y                   : double
            z                   : double

           OUTPUTS
            lon                 : double*
            lat                 : double*
            elev                : double*'''
        return super(IPushbroomUtilities, self).convertECEFtoLonLat(x, y, z)
    def evalDIMAPTimeString(self, time_str):
        '''Method IPushbroomUtilities.evalDIMAPTimeString

           INPUT
            time_str            : char*

           OUTPUTS
            jDayPtr             : long*
            fraction            : double*'''
        return super(IPushbroomUtilities, self).evalDIMAPTimeString(time_str)

class IRasterInfos(_esriDataSourcesRaster.IRasterInfos):
    _IID = uuid.UUID('8fe2a546-c990-4ae3-ba5f-2e6737944414')
    def get_Count(self):
        '''Method IRasterInfos.get_Count

           OUTPUT
            pCount              : long*'''
        return super(IRasterInfos, self).get_Count()
    def get_Element(self, index):
        '''Method IRasterInfos.get_Element

           INPUT
            index               : long

           OUTPUT
            pRasterInfo         : IRasterInfo**'''
        return super(IRasterInfos, self).get_Element(index)
    def Remove(self, index):
        '''Method IRasterInfos.Remove

           INPUT
            index               : long'''
        return super(IRasterInfos, self).Remove(index)
    def RemoveAll(self):
        '''Method IRasterInfos.RemoveAll'''
        return super(IRasterInfos, self).RemoveAll()
    def Add(self, pRasterInfo):
        '''Method IRasterInfos.Add

           INPUT
            pRasterInfo         : IRasterInfo*'''
        return super(IRasterInfos, self).Add(pRasterInfo)
    def Insert(self, index, pRasterInfo):
        '''Method IRasterInfos.Insert

           INPUTS
            index               : long
            pRasterInfo         : IRasterInfo*'''
        return super(IRasterInfos, self).Insert(index, pRasterInfo)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IRasterFunction(_esriDataSourcesRaster.IRasterFunction):
    _IID = uuid.UUID('cf7b7f99-3698-4f1f-aff8-e3430e106b1e')

    def __init__(self, *args, **kw):
        super(IRasterFunction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IRasterFunction.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterFunction, self).get_Name()
    def put_Name(self, pName):
        '''Method IRasterFunction.put_Name

           INPUT
            pName               : BSTR'''
        return super(IRasterFunction, self).put_Name(pName)
    def get_Description(self):
        '''Method IRasterFunction.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRasterFunction, self).get_Description()
    def put_Description(self, pDescription):
        '''Method IRasterFunction.put_Description

           INPUT
            pDescription        : BSTR'''
        return super(IRasterFunction, self).put_Description(pDescription)
    def get_PixelType(self):
        '''Method IRasterFunction.get_PixelType

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IRasterFunction, self).get_PixelType()
    def put_PixelType(self, pPixelType):
        '''Method IRasterFunction.put_PixelType

           INPUT
            pPixelType          : rstPixelType'''
        return super(IRasterFunction, self).put_PixelType(pPixelType)
    def Bind(self, pArguments):
        '''Method IRasterFunction.Bind

           INPUT
            pArguments          : IUnknown*'''
        return super(IRasterFunction, self).Bind(pArguments)
    def get_Valid(self):
        '''Method IRasterFunction.get_Valid

           OUTPUT
            pValid              : VARIANT_BOOL*'''
        return super(IRasterFunction, self).get_Valid()
    def Update(self):
        '''Method IRasterFunction.Update'''
        return super(IRasterFunction, self).Update()
    def get_RasterInfo(self):
        '''Method IRasterFunction.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IRasterFunction, self).get_RasterInfo()
    def Read(self, pTlc, pRaster, pPixelBlock):
        '''Method IRasterFunction.Read

           INPUTS
            pTlc                : IPnt*
            pRaster             : IRaster*
            pPixelBlock         : IPixelBlock*'''
        return super(IRasterFunction, self).Read(pTlc, pRaster, pPixelBlock)
    Description = property(get_Description, put_Description, None)
    Name = property(get_Name, put_Name, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    RasterInfo = property(get_RasterInfo, None, None)
    Valid = property(get_Valid, None, None)

class IRasterFunction2(_esriDataSourcesRaster.IRasterFunction2):
    _IID = uuid.UUID('cb7476d9-8621-4a5e-a693-adba10f25308')

    def __init__(self, *args, **kw):
        super(IRasterFunction2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ComputeFootprint(self, MaximumVertices):
        '''Method IRasterFunction2.ComputeFootprint

           INPUT
            MaximumVertices     : long

           OUTPUT
            ppFootprint         : IGeometry**'''
        return super(IRasterFunction2, self).ComputeFootprint(MaximumVertices)
    def RefreshCache(self):
        '''Method IRasterFunction2.RefreshCache'''
        return super(IRasterFunction2, self).RefreshCache()
    def ClearCache(self, pArguments):
        '''Method IRasterFunction2.ClearCache

           INPUT
            pArguments          : IUnknown*'''
        return super(IRasterFunction2, self).ClearCache(pArguments)
    def GetFiles(self, pGeometry, ppFiles):
        '''Method IRasterFunction2.GetFiles

           INPUTS
            pGeometry           : IGeometry*
            ppFiles             : IStringArray**'''
        return super(IRasterFunction2, self).GetFiles(pGeometry, ppFiles)
    def get_ProcessingCost(self, pProcessingCost):
        '''Method IRasterFunction2.get_ProcessingCost

           INPUT
            pProcessingCost     : double*'''
        return super(IRasterFunction2, self).get_ProcessingCost(pProcessingCost)
    def get_IsCacheStale(self):
        '''Method IRasterFunction2.get_IsCacheStale

           OUTPUT
            pIsStale            : VARIANT_BOOL*'''
        return super(IRasterFunction2, self).get_IsCacheStale()
    def get_IsActive(self):
        '''Method IRasterFunction2.get_IsActive

           OUTPUT
            pIsActive           : VARIANT_BOOL*'''
        return super(IRasterFunction2, self).get_IsActive()
    def get_InvalidDatasetProperties(self):
        '''Method IRasterFunction2.get_InvalidDatasetProperties

           OUTPUT
            pDatasetProperties  : long*'''
        return super(IRasterFunction2, self).get_InvalidDatasetProperties()
    def put_InvalidDatasetProperties(self, pDatasetProperties):
        '''Method IRasterFunction2.put_InvalidDatasetProperties

           INPUT
            pDatasetProperties  : long'''
        return super(IRasterFunction2, self).put_InvalidDatasetProperties(pDatasetProperties)
    InvalidDatasetProperties = property(get_InvalidDatasetProperties, put_InvalidDatasetProperties, None)
    IsActive = property(get_IsActive, None, None)
    IsCacheStale = property(get_IsCacheStale, None, None)

class IRasterFunction3(_esriDataSourcesRaster.IRasterFunction3):
    _IID = uuid.UUID('1b2c9c83-514c-4e5c-b9cf-7ee517de43aa')

    def __init__(self, *args, **kw):
        super(IRasterFunction3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ApplyMask(self):
        '''Method IRasterFunction3.get_ApplyMask

           OUTPUT
            pbApplyMask         : VARIANT_BOOL*'''
        return super(IRasterFunction3, self).get_ApplyMask()
    def put_ApplyMask(self, pbApplyMask):
        '''Method IRasterFunction3.put_ApplyMask

           INPUT
            pbApplyMask         : VARIANT_BOOL'''
        return super(IRasterFunction3, self).put_ApplyMask(pbApplyMask)
    ApplyMask = property(get_ApplyMask, put_ApplyMask, None)

class IRasterFunctionArguments(_esriDataSourcesRaster.IRasterFunctionArguments):
    _IID = uuid.UUID('04aa081e-28b0-47e4-b375-f367046da924')
    def GetValue(self, Name):
        '''Method IRasterFunctionArguments.GetValue

           INPUT
            Name                : BSTR

           OUTPUT
            pValue              : VARIANT*'''
        return super(IRasterFunctionArguments, self).GetValue(Name)
    def PutValue(self, Name, Value):
        '''Method IRasterFunctionArguments.PutValue

           INPUTS
            Name                : BSTR
            Value               : VARIANT'''
        return super(IRasterFunctionArguments, self).PutValue(Name, Value)
    def Remove(self, Name):
        '''Method IRasterFunctionArguments.Remove

           INPUT
            Name                : BSTR'''
        return super(IRasterFunctionArguments, self).Remove(Name)
    def RemoveAll(self):
        '''Method IRasterFunctionArguments.RemoveAll'''
        return super(IRasterFunctionArguments, self).RemoveAll()
    def get_Names(self):
        '''Method IRasterFunctionArguments.get_Names

           OUTPUT
            ppNames             : IStringArray**'''
        return super(IRasterFunctionArguments, self).get_Names()
    def get_Values(self):
        '''Method IRasterFunctionArguments.get_Values

           OUTPUT
            ppArguments         : IVariantArray**'''
        return super(IRasterFunctionArguments, self).get_Values()
    def get_FileList(self):
        '''Method IRasterFunctionArguments.get_FileList

           OUTPUT
            ppFiles             : IStringArray**'''
        return super(IRasterFunctionArguments, self).get_FileList()
    def Resolve(self, pRow, pPropertySet):
        '''Method IRasterFunctionArguments.Resolve

           INPUTS
            pRow                : IRow*
            pPropertySet        : IPropertySet*'''
        return super(IRasterFunctionArguments, self).Resolve(pRow, pPropertySet)
    def Update(self, pRow, pPropertySet, pTemplateArguments):
        '''Method IRasterFunctionArguments.Update

           INPUTS
            pRow                : IRow*
            pPropertySet        : IPropertySet*
            pTemplateArguments  : IRasterFunctionArguments*'''
        return super(IRasterFunctionArguments, self).Update(pRow, pPropertySet, pTemplateArguments)
    FileList = property(get_FileList, None, None)
    Names = property(get_Names, None, None)
    Values = property(get_Values, None, None)

class IRasterFunctionHelper(_esriDataSourcesRaster.IRasterFunctionHelper):
    _IID = uuid.UUID('d6deb4c8-8d59-4cca-8174-8c7c95a5707a')

    def __init__(self, *args, **kw):
        super(IRasterFunctionHelper, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Bind(self, pArguments):
        '''Method IRasterFunctionHelper.Bind

           INPUT
            pArguments          : IUnknown*'''
        return super(IRasterFunctionHelper, self).Bind(pArguments)
    def get_RasterInfo(self):
        '''Method IRasterFunctionHelper.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IRasterFunctionHelper, self).get_RasterInfo()
    def Read(self, pTlc, pRaster, pReferenceRaster, pPixelBlock):
        '''Method IRasterFunctionHelper.Read

           INPUTS
            pTlc                : IPnt*
            pRaster             : IRaster*
            pReferenceRaster    : IRaster*
            pPixelBlock         : IPixelBlock*'''
        return super(IRasterFunctionHelper, self).Read(pTlc, pRaster, pReferenceRaster, pPixelBlock)
    def get_Resampling(self):
        '''Method IRasterFunctionHelper.get_Resampling

           OUTPUT
            pResampling         : VARIANT_BOOL*'''
        return super(IRasterFunctionHelper, self).get_Resampling()
    def put_Resampling(self, pResampling):
        '''Method IRasterFunctionHelper.put_Resampling

           INPUT
            pResampling         : VARIANT_BOOL'''
        return super(IRasterFunctionHelper, self).put_Resampling(pResampling)
    def get_ReferenceProperties(self):
        '''Method IRasterFunctionHelper.get_ReferenceProperties

           OUTPUT
            pReferenceProperties: long*'''
        return super(IRasterFunctionHelper, self).get_ReferenceProperties()
    def put_ReferenceProperties(self, pReferenceProperties):
        '''Method IRasterFunctionHelper.put_ReferenceProperties

           INPUT
            pReferenceProperties: long'''
        return super(IRasterFunctionHelper, self).put_ReferenceProperties(pReferenceProperties)
    def get_SupportBandSelection(self):
        '''Method IRasterFunctionHelper.get_SupportBandSelection

           OUTPUT
            pSupportBandSelection: VARIANT_BOOL*'''
        return super(IRasterFunctionHelper, self).get_SupportBandSelection()
    def put_SupportBandSelection(self, pSupportBandSelection):
        '''Method IRasterFunctionHelper.put_SupportBandSelection

           INPUT
            pSupportBandSelection: VARIANT_BOOL'''
        return super(IRasterFunctionHelper, self).put_SupportBandSelection(pSupportBandSelection)
    def CreateRaster(self, pRaster, pReferenceRaster):
        '''Method IRasterFunctionHelper.CreateRaster

           INPUTS
            pRaster             : IRaster*
            pReferenceRaster    : IRaster*

           OUTPUTS
            ppBandIDs           : ILongArray**
            ppNewRaster         : IRaster**'''
        return super(IRasterFunctionHelper, self).CreateRaster(pRaster, pReferenceRaster)
    def get_Raster(self):
        '''Method IRasterFunctionHelper.get_Raster

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IRasterFunctionHelper, self).get_Raster()
    Raster = property(get_Raster, None, None)
    RasterInfo = property(get_RasterInfo, None, None)
    ReferenceProperties = property(get_ReferenceProperties, put_ReferenceProperties, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SupportBandSelection = property(get_SupportBandSelection, put_SupportBandSelection, None)

class IRasterFunctionHelper2(_esriDataSourcesRaster.IRasterFunctionHelper2):
    _IID = uuid.UUID('eb3aa1a6-1fa8-4f1b-9a4a-653a5d553212')

    def __init__(self, *args, **kw):
        super(IRasterFunctionHelper2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Clear(self):
        '''Method IRasterFunctionHelper2.Clear'''
        return super(IRasterFunctionHelper2, self).Clear()
    def Bind(self, pArguments):
        '''Method IRasterFunctionHelper.Bind (from IRasterFunctionHelper)

           INPUT
            pArguments          : IUnknown*'''
        return super(IRasterFunctionHelper2, self).Bind(pArguments)
    def get_RasterInfo(self):
        '''Method IRasterFunctionHelper.get_RasterInfo (from IRasterFunctionHelper)

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IRasterFunctionHelper2, self).get_RasterInfo()
    def Read(self, pTlc, pRaster, pReferenceRaster, pPixelBlock):
        '''Method IRasterFunctionHelper.Read (from IRasterFunctionHelper)

           INPUTS
            pTlc                : IPnt*
            pRaster             : IRaster*
            pReferenceRaster    : IRaster*
            pPixelBlock         : IPixelBlock*'''
        return super(IRasterFunctionHelper2, self).Read(pTlc, pRaster, pReferenceRaster, pPixelBlock)
    def get_Resampling(self):
        '''Method IRasterFunctionHelper.get_Resampling (from IRasterFunctionHelper)

           OUTPUT
            pResampling         : VARIANT_BOOL*'''
        return super(IRasterFunctionHelper2, self).get_Resampling()
    def put_Resampling(self, pResampling):
        '''Method IRasterFunctionHelper.put_Resampling (from IRasterFunctionHelper)

           INPUT
            pResampling         : VARIANT_BOOL'''
        return super(IRasterFunctionHelper2, self).put_Resampling(pResampling)
    def get_ReferenceProperties(self):
        '''Method IRasterFunctionHelper.get_ReferenceProperties (from IRasterFunctionHelper)

           OUTPUT
            pReferenceProperties: long*'''
        return super(IRasterFunctionHelper2, self).get_ReferenceProperties()
    def put_ReferenceProperties(self, pReferenceProperties):
        '''Method IRasterFunctionHelper.put_ReferenceProperties (from IRasterFunctionHelper)

           INPUT
            pReferenceProperties: long'''
        return super(IRasterFunctionHelper2, self).put_ReferenceProperties(pReferenceProperties)
    def get_SupportBandSelection(self):
        '''Method IRasterFunctionHelper.get_SupportBandSelection (from IRasterFunctionHelper)

           OUTPUT
            pSupportBandSelection: VARIANT_BOOL*'''
        return super(IRasterFunctionHelper2, self).get_SupportBandSelection()
    def put_SupportBandSelection(self, pSupportBandSelection):
        '''Method IRasterFunctionHelper.put_SupportBandSelection (from IRasterFunctionHelper)

           INPUT
            pSupportBandSelection: VARIANT_BOOL'''
        return super(IRasterFunctionHelper2, self).put_SupportBandSelection(pSupportBandSelection)
    def CreateRaster(self, pRaster, pReferenceRaster):
        '''Method IRasterFunctionHelper.CreateRaster (from IRasterFunctionHelper)

           INPUTS
            pRaster             : IRaster*
            pReferenceRaster    : IRaster*

           OUTPUTS
            ppBandIDs           : ILongArray**
            ppNewRaster         : IRaster**'''
        return super(IRasterFunctionHelper2, self).CreateRaster(pRaster, pReferenceRaster)
    def get_Raster(self):
        '''Method IRasterFunctionHelper.get_Raster (from IRasterFunctionHelper)

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IRasterFunctionHelper2, self).get_Raster()
    Raster = property(get_Raster, None, None)
    RasterInfo = property(get_RasterInfo, None, None)
    ReferenceProperties = property(get_ReferenceProperties, put_ReferenceProperties, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SupportBandSelection = property(get_SupportBandSelection, put_SupportBandSelection, None)

class IFunctionRasterDatasetName(_esriDataSourcesRaster.IFunctionRasterDatasetName):
    _IID = uuid.UUID('5769d656-8973-4d0c-81cb-acf0ac035ac2')

    def __init__(self, *args, **kw):
        super(IFunctionRasterDatasetName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FullName(self, pName):
        '''Method IFunctionRasterDatasetName.put_FullName

           INPUT
            pName               : BSTR'''
        return super(IFunctionRasterDatasetName, self).put_FullName(pName)
    def get_FullName(self):
        '''Method IFunctionRasterDatasetName.get_FullName

           OUTPUT
            pName               : BSTR*'''
        return super(IFunctionRasterDatasetName, self).get_FullName()
    def get_Function(self):
        '''Method IFunctionRasterDatasetName.get_Function

           OUTPUT
            ppFunction          : IRasterFunction**'''
        return super(IFunctionRasterDatasetName, self).get_Function()
    def putref_Function(self, ppFunction):
        '''Method IFunctionRasterDatasetName.putref_Function

           INPUT
            ppFunction          : IRasterFunction*'''
        return super(IFunctionRasterDatasetName, self).putref_Function(ppFunction)
    def get_Arguments(self):
        '''Method IFunctionRasterDatasetName.get_Arguments

           OUTPUT
            ppArguments         : IUnknown**'''
        return super(IFunctionRasterDatasetName, self).get_Arguments()
    def putref_Arguments(self, ppArguments):
        '''Method IFunctionRasterDatasetName.putref_Arguments

           INPUT
            ppArguments         : IUnknown*'''
        return super(IFunctionRasterDatasetName, self).putref_Arguments(ppArguments)
    def putref_Properties(self, ppProperties):
        '''Method IFunctionRasterDatasetName.putref_Properties

           INPUT
            ppProperties        : IPropertySet*'''
        return super(IFunctionRasterDatasetName, self).putref_Properties(ppProperties)
    def get_Properties(self):
        '''Method IFunctionRasterDatasetName.get_Properties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IFunctionRasterDatasetName, self).get_Properties()
    def put_BrowseName(self, pName):
        '''Method IFunctionRasterDatasetName.put_BrowseName

           INPUT
            pName               : BSTR'''
        return super(IFunctionRasterDatasetName, self).put_BrowseName(pName)
    def get_BrowseName(self):
        '''Method IFunctionRasterDatasetName.get_BrowseName

           OUTPUT
            pName               : BSTR*'''
        return super(IFunctionRasterDatasetName, self).get_BrowseName()
    Arguments = property(get_Arguments, putref_Arguments, None)
    BrowseName = property(get_BrowseName, put_BrowseName, None)
    FullName = property(get_FullName, put_FullName, None)
    Function = property(get_Function, putref_Function, None)
    Properties = property(get_Properties, putref_Properties, None)

class IFunctionRasterDataset(_esriDataSourcesRaster.IFunctionRasterDataset):
    _IID = uuid.UUID('8accd1a4-1f81-42a8-ac88-b27564eb84dd')

    def __init__(self, *args, **kw):
        super(IFunctionRasterDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FullName(self, _arg1):
        '''Method IFunctionRasterDataset.putref_FullName

           INPUT
            _arg1               : IName*'''
        return super(IFunctionRasterDataset, self).putref_FullName(_arg1)
    def Init(self, pFunction, pArguments):
        '''Method IFunctionRasterDataset.Init

           INPUTS
            pFunction           : IRasterFunction*
            pArguments          : IUnknown*'''
        return super(IFunctionRasterDataset, self).Init(pFunction, pArguments)
    def get_Function(self):
        '''Method IFunctionRasterDataset.get_Function

           OUTPUT
            ppFunction          : IRasterFunction**'''
        return super(IFunctionRasterDataset, self).get_Function()
    def putref_Function(self, ppFunction):
        '''Method IFunctionRasterDataset.putref_Function

           INPUT
            ppFunction          : IRasterFunction*'''
        return super(IFunctionRasterDataset, self).putref_Function(ppFunction)
    def get_Arguments(self):
        '''Method IFunctionRasterDataset.get_Arguments

           OUTPUT
            ppArguments         : IUnknown**'''
        return super(IFunctionRasterDataset, self).get_Arguments()
    def putref_Arguments(self, ppArguments):
        '''Method IFunctionRasterDataset.putref_Arguments

           INPUT
            ppArguments         : IUnknown*'''
        return super(IFunctionRasterDataset, self).putref_Arguments(ppArguments)
    def get_Properties(self):
        '''Method IFunctionRasterDataset.get_Properties

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IFunctionRasterDataset, self).get_Properties()
    def putref_Properties(self, ppProperties):
        '''Method IFunctionRasterDataset.putref_Properties

           INPUT
            ppProperties        : IPropertySet*'''
        return super(IFunctionRasterDataset, self).putref_Properties(ppProperties)
    def get_RasterInfo(self):
        '''Method IFunctionRasterDataset.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IFunctionRasterDataset, self).get_RasterInfo()
    def AlterDefinition(self):
        '''Method IFunctionRasterDataset.AlterDefinition'''
        return super(IFunctionRasterDataset, self).AlterDefinition()
    def get_MemberRasterDatasets(self):
        '''Method IFunctionRasterDataset.get_MemberRasterDatasets

           OUTPUT
            ppRasterDatasets    : IArray**'''
        return super(IFunctionRasterDataset, self).get_MemberRasterDatasets()
    def get_MemberDatasetNames(self):
        '''Method IFunctionRasterDataset.get_MemberDatasetNames

           OUTPUT
            ppDatasetNames      : IArray**'''
        return super(IFunctionRasterDataset, self).get_MemberDatasetNames()
    def FindMemberFunctionsByCLSID(self, rasterFunctionCLSID):
        '''Method IFunctionRasterDataset.FindMemberFunctionsByCLSID

           INPUT
            rasterFunctionCLSID : IUID*

           OUTPUT
            ppMatchingRasterFunctions: IArray**'''
        return super(IFunctionRasterDataset, self).FindMemberFunctionsByCLSID(rasterFunctionCLSID)
    def FindMemberFunctionsByName(self, rasterFunctionName):
        '''Method IFunctionRasterDataset.FindMemberFunctionsByName

           INPUT
            rasterFunctionName  : BSTR

           OUTPUT
            ppMatchingRasterFunctions: IArray**'''
        return super(IFunctionRasterDataset, self).FindMemberFunctionsByName(rasterFunctionName)
    def FindMemberFunctionsArgumentsByCLSID(self, functionArgumentsCLSID, ppMatchingFunctionArguments):
        '''Method IFunctionRasterDataset.FindMemberFunctionsArgumentsByCLSID

           INPUTS
            functionArgumentsCLSID: IUID*
            ppMatchingFunctionArguments: IArray**'''
        return super(IFunctionRasterDataset, self).FindMemberFunctionsArgumentsByCLSID(functionArgumentsCLSID, ppMatchingFunctionArguments)
    def Simplify(self):
        '''Method IFunctionRasterDataset.Simplify'''
        return super(IFunctionRasterDataset, self).Simplify()
    Arguments = property(get_Arguments, putref_Arguments, None)
    FullName = property(None, putref_FullName, None)
    Function = property(get_Function, putref_Function, None)
    MemberDatasetNames = property(get_MemberDatasetNames, None, None)
    MemberRasterDatasets = property(get_MemberRasterDatasets, None, None)
    Properties = property(get_Properties, putref_Properties, None)
    RasterInfo = property(get_RasterInfo, None, None)

class IFunctionRasterDataset2(_esriDataSourcesRaster.IFunctionRasterDataset2):
    _IID = uuid.UUID('07c65bf7-d69a-41f6-bfb4-d3c79c4ac50d')

    def __init__(self, *args, **kw):
        super(IFunctionRasterDataset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def ComputeFootprint(self, MaximumVertices):
        '''Method IFunctionRasterDataset2.ComputeFootprint

           INPUT
            MaximumVertices     : long

           OUTPUT
            ppFootprint         : IGeometry**'''
        return super(IFunctionRasterDataset2, self).ComputeFootprint(MaximumVertices)
    def RefreshCache(self):
        '''Method IFunctionRasterDataset2.RefreshCache'''
        return super(IFunctionRasterDataset2, self).RefreshCache()
    def ClearCache(self):
        '''Method IFunctionRasterDataset2.ClearCache'''
        return super(IFunctionRasterDataset2, self).ClearCache()
    def get_IsCacheStale(self):
        '''Method IFunctionRasterDataset2.get_IsCacheStale

           OUTPUT
            pIsStale            : VARIANT_BOOL*'''
        return super(IFunctionRasterDataset2, self).get_IsCacheStale()
    def GetFiles(self, pGeometry, ppFiles):
        '''Method IFunctionRasterDataset2.GetFiles

           INPUTS
            pGeometry           : IGeometry*
            ppFiles             : IStringArray**'''
        return super(IFunctionRasterDataset2, self).GetFiles(pGeometry, ppFiles)
    def Synchronize(self):
        '''Method IFunctionRasterDataset2.Synchronize'''
        return super(IFunctionRasterDataset2, self).Synchronize()
    def putref_FullName(self, _arg1):
        '''Method IFunctionRasterDataset.putref_FullName (from IFunctionRasterDataset)

           INPUT
            _arg1               : IName*'''
        return super(IFunctionRasterDataset2, self).putref_FullName(_arg1)
    def Init(self, pFunction, pArguments):
        '''Method IFunctionRasterDataset.Init (from IFunctionRasterDataset)

           INPUTS
            pFunction           : IRasterFunction*
            pArguments          : IUnknown*'''
        return super(IFunctionRasterDataset2, self).Init(pFunction, pArguments)
    def get_Function(self):
        '''Method IFunctionRasterDataset.get_Function (from IFunctionRasterDataset)

           OUTPUT
            ppFunction          : IRasterFunction**'''
        return super(IFunctionRasterDataset2, self).get_Function()
    def putref_Function(self, ppFunction):
        '''Method IFunctionRasterDataset.putref_Function (from IFunctionRasterDataset)

           INPUT
            ppFunction          : IRasterFunction*'''
        return super(IFunctionRasterDataset2, self).putref_Function(ppFunction)
    def get_Arguments(self):
        '''Method IFunctionRasterDataset.get_Arguments (from IFunctionRasterDataset)

           OUTPUT
            ppArguments         : IUnknown**'''
        return super(IFunctionRasterDataset2, self).get_Arguments()
    def putref_Arguments(self, ppArguments):
        '''Method IFunctionRasterDataset.putref_Arguments (from IFunctionRasterDataset)

           INPUT
            ppArguments         : IUnknown*'''
        return super(IFunctionRasterDataset2, self).putref_Arguments(ppArguments)
    def get_Properties(self):
        '''Method IFunctionRasterDataset.get_Properties (from IFunctionRasterDataset)

           OUTPUT
            ppProperties        : IPropertySet**'''
        return super(IFunctionRasterDataset2, self).get_Properties()
    def putref_Properties(self, ppProperties):
        '''Method IFunctionRasterDataset.putref_Properties (from IFunctionRasterDataset)

           INPUT
            ppProperties        : IPropertySet*'''
        return super(IFunctionRasterDataset2, self).putref_Properties(ppProperties)
    def get_RasterInfo(self):
        '''Method IFunctionRasterDataset.get_RasterInfo (from IFunctionRasterDataset)

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IFunctionRasterDataset2, self).get_RasterInfo()
    def AlterDefinition(self):
        '''Method IFunctionRasterDataset.AlterDefinition (from IFunctionRasterDataset)'''
        return super(IFunctionRasterDataset2, self).AlterDefinition()
    def get_MemberRasterDatasets(self):
        '''Method IFunctionRasterDataset.get_MemberRasterDatasets (from IFunctionRasterDataset)

           OUTPUT
            ppRasterDatasets    : IArray**'''
        return super(IFunctionRasterDataset2, self).get_MemberRasterDatasets()
    def get_MemberDatasetNames(self):
        '''Method IFunctionRasterDataset.get_MemberDatasetNames (from IFunctionRasterDataset)

           OUTPUT
            ppDatasetNames      : IArray**'''
        return super(IFunctionRasterDataset2, self).get_MemberDatasetNames()
    def FindMemberFunctionsByCLSID(self, rasterFunctionCLSID):
        '''Method IFunctionRasterDataset.FindMemberFunctionsByCLSID (from IFunctionRasterDataset)

           INPUT
            rasterFunctionCLSID : IUID*

           OUTPUT
            ppMatchingRasterFunctions: IArray**'''
        return super(IFunctionRasterDataset2, self).FindMemberFunctionsByCLSID(rasterFunctionCLSID)
    def FindMemberFunctionsByName(self, rasterFunctionName):
        '''Method IFunctionRasterDataset.FindMemberFunctionsByName (from IFunctionRasterDataset)

           INPUT
            rasterFunctionName  : BSTR

           OUTPUT
            ppMatchingRasterFunctions: IArray**'''
        return super(IFunctionRasterDataset2, self).FindMemberFunctionsByName(rasterFunctionName)
    def FindMemberFunctionsArgumentsByCLSID(self, functionArgumentsCLSID, ppMatchingFunctionArguments):
        '''Method IFunctionRasterDataset.FindMemberFunctionsArgumentsByCLSID (from IFunctionRasterDataset)

           INPUTS
            functionArgumentsCLSID: IUID*
            ppMatchingFunctionArguments: IArray**'''
        return super(IFunctionRasterDataset2, self).FindMemberFunctionsArgumentsByCLSID(functionArgumentsCLSID, ppMatchingFunctionArguments)
    def Simplify(self):
        '''Method IFunctionRasterDataset.Simplify (from IFunctionRasterDataset)'''
        return super(IFunctionRasterDataset2, self).Simplify()
    Arguments = property(get_Arguments, putref_Arguments, None)
    FullName = property(None, putref_FullName, None)
    Function = property(get_Function, putref_Function, None)
    IsCacheStale = property(get_IsCacheStale, None, None)
    MemberDatasetNames = property(get_MemberDatasetNames, None, None)
    MemberRasterDatasets = property(get_MemberRasterDatasets, None, None)
    Properties = property(get_Properties, putref_Properties, None)
    RasterInfo = property(get_RasterInfo, None, None)

class IGeometricFunction(_esriDataSourcesRaster.IGeometricFunction):
    _IID = uuid.UUID('381ace7d-b284-4494-bc7a-0ddcfe466f24')

    def __init__(self, *args, **kw):
        super(IGeometricFunction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Resampling(self):
        '''Method IGeometricFunction.get_Resampling

           OUTPUT
            pResampling         : VARIANT_BOOL*'''
        return super(IGeometricFunction, self).get_Resampling()
    def put_Resampling(self, pResampling):
        '''Method IGeometricFunction.put_Resampling

           INPUT
            pResampling         : VARIANT_BOOL'''
        return super(IGeometricFunction, self).put_Resampling(pResampling)
    Resampling = property(get_Resampling, put_Resampling, None)

class IGeometricFunctionArguments(_esriDataSourcesRaster.IGeometricFunctionArguments):
    _IID = uuid.UUID('ee17ff50-4762-46b4-a1d0-e111fd7ffde1')

    def __init__(self, *args, **kw):
        super(IGeometricFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IGeometricFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IGeometricFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IGeometricFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IGeometricFunctionArguments, self).putref_Raster(ppRaster)
    def get_DEM(self):
        '''Method IGeometricFunctionArguments.get_DEM

           OUTPUT
            ppDEM               : IUnknown**'''
        return super(IGeometricFunctionArguments, self).get_DEM()
    def putref_DEM(self, ppDEM):
        '''Method IGeometricFunctionArguments.putref_DEM

           INPUT
            ppDEM               : IUnknown*'''
        return super(IGeometricFunctionArguments, self).putref_DEM(ppDEM)
    def get_ConstantZ(self):
        '''Method IGeometricFunctionArguments.get_ConstantZ

           OUTPUT
            z                   : double*'''
        return super(IGeometricFunctionArguments, self).get_ConstantZ()
    def put_ConstantZ(self, z):
        '''Method IGeometricFunctionArguments.put_ConstantZ

           INPUT
            z                   : double'''
        return super(IGeometricFunctionArguments, self).put_ConstantZ(z)
    def get_ZFactor(self):
        '''Method IGeometricFunctionArguments.get_ZFactor

           OUTPUT
            ZFactor             : double*'''
        return super(IGeometricFunctionArguments, self).get_ZFactor()
    def put_ZFactor(self, ZFactor):
        '''Method IGeometricFunctionArguments.put_ZFactor

           INPUT
            ZFactor             : double'''
        return super(IGeometricFunctionArguments, self).put_ZFactor(ZFactor)
    def get_ZOffset(self):
        '''Method IGeometricFunctionArguments.get_ZOffset

           OUTPUT
            ZOffset             : double*'''
        return super(IGeometricFunctionArguments, self).get_ZOffset()
    def put_ZOffset(self, ZOffset):
        '''Method IGeometricFunctionArguments.put_ZOffset

           INPUT
            ZOffset             : double'''
        return super(IGeometricFunctionArguments, self).put_ZOffset(ZOffset)
    def get_CorrectGeoid(self):
        '''Method IGeometricFunctionArguments.get_CorrectGeoid

           OUTPUT
            pCorrection         : VARIANT_BOOL*'''
        return super(IGeometricFunctionArguments, self).get_CorrectGeoid()
    def put_CorrectGeoid(self, pCorrection):
        '''Method IGeometricFunctionArguments.put_CorrectGeoid

           INPUT
            pCorrection         : VARIANT_BOOL'''
        return super(IGeometricFunctionArguments, self).put_CorrectGeoid(pCorrection)
    def get_GeodataXform(self):
        '''Method IGeometricFunctionArguments.get_GeodataXform

           OUTPUT
            ppXf                : IGeodataXform**'''
        return super(IGeometricFunctionArguments, self).get_GeodataXform()
    def putref_GeodataXform(self, ppXf):
        '''Method IGeometricFunctionArguments.putref_GeodataXform

           INPUT
            ppXf                : IGeodataXform*'''
        return super(IGeometricFunctionArguments, self).putref_GeodataXform(ppXf)
    def get_AppendGeodataXform(self):
        '''Method IGeometricFunctionArguments.get_AppendGeodataXform

           OUTPUT
            pAppendXform        : VARIANT_BOOL*'''
        return super(IGeometricFunctionArguments, self).get_AppendGeodataXform()
    def put_AppendGeodataXform(self, pAppendXform):
        '''Method IGeometricFunctionArguments.put_AppendGeodataXform

           INPUT
            pAppendXform        : VARIANT_BOOL'''
        return super(IGeometricFunctionArguments, self).put_AppendGeodataXform(pAppendXform)
    AppendGeodataXform = property(get_AppendGeodataXform, put_AppendGeodataXform, None)
    ConstantZ = property(get_ConstantZ, put_ConstantZ, None)
    CorrectGeoid = property(get_CorrectGeoid, put_CorrectGeoid, None)
    DEM = property(get_DEM, putref_DEM, None)
    GeodataXform = property(get_GeodataXform, putref_GeodataXform, None)
    Raster = property(get_Raster, putref_Raster, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)
    ZOffset = property(get_ZOffset, put_ZOffset, None)

class IPansharpeningFunctionArguments(_esriDataSourcesRaster.IPansharpeningFunctionArguments):
    _IID = uuid.UUID('152f5add-6a59-4a06-b826-a949e2cef3df')

    def __init__(self, *args, **kw):
        super(IPansharpeningFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MSImage(self):
        '''Method IPansharpeningFunctionArguments.get_MSImage

           OUTPUT
            ppMSImage           : IUnknown**'''
        return super(IPansharpeningFunctionArguments, self).get_MSImage()
    def putref_MSImage(self, ppMSImage):
        '''Method IPansharpeningFunctionArguments.putref_MSImage

           INPUT
            ppMSImage           : IUnknown*'''
        return super(IPansharpeningFunctionArguments, self).putref_MSImage(ppMSImage)
    def get_PanImage(self):
        '''Method IPansharpeningFunctionArguments.get_PanImage

           OUTPUT
            ppPanImage          : IUnknown**'''
        return super(IPansharpeningFunctionArguments, self).get_PanImage()
    def putref_PanImage(self, ppPanImage):
        '''Method IPansharpeningFunctionArguments.putref_PanImage

           INPUT
            ppPanImage          : IUnknown*'''
        return super(IPansharpeningFunctionArguments, self).putref_PanImage(ppPanImage)
    def get_InfraredImage(self):
        '''Method IPansharpeningFunctionArguments.get_InfraredImage

           OUTPUT
            ppInfraredImage     : IUnknown**'''
        return super(IPansharpeningFunctionArguments, self).get_InfraredImage()
    def putref_InfraredImage(self, ppInfraredImage):
        '''Method IPansharpeningFunctionArguments.putref_InfraredImage

           INPUT
            ppInfraredImage     : IUnknown*'''
        return super(IPansharpeningFunctionArguments, self).putref_InfraredImage(ppInfraredImage)
    def get_PansharpeningType(self):
        '''Method IPansharpeningFunctionArguments.get_PansharpeningType

           OUTPUT
            pSharpeningType     : esriPansharpeningType*'''
        return super(IPansharpeningFunctionArguments, self).get_PansharpeningType()
    def put_PansharpeningType(self, pSharpeningType):
        '''Method IPansharpeningFunctionArguments.put_PansharpeningType

           INPUT
            pSharpeningType     : esriPansharpeningType'''
        return super(IPansharpeningFunctionArguments, self).put_PansharpeningType(pSharpeningType)
    def get_Weights(self):
        '''Method IPansharpeningFunctionArguments.get_Weights

           OUTPUT
            ppWeights           : IDoubleArray**'''
        return super(IPansharpeningFunctionArguments, self).get_Weights()
    def putref_Weights(self, ppWeights):
        '''Method IPansharpeningFunctionArguments.putref_Weights

           INPUT
            ppWeights           : IDoubleArray*'''
        return super(IPansharpeningFunctionArguments, self).putref_Weights(ppWeights)
    InfraredImage = property(get_InfraredImage, putref_InfraredImage, None)
    MSImage = property(get_MSImage, putref_MSImage, None)
    PanImage = property(get_PanImage, putref_PanImage, None)
    PansharpeningType = property(get_PansharpeningType, put_PansharpeningType, None)
    Weights = property(get_Weights, putref_Weights, None)

class IPansharpeningFunctionArguments2(_esriDataSourcesRaster.IPansharpeningFunctionArguments2):
    _IID = uuid.UUID('cf0a1f4e-5a42-4dfb-a80f-92b6c3369e37')

    def __init__(self, *args, **kw):
        super(IPansharpeningFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_KeepStatsHistogram(self):
        '''Method IPansharpeningFunctionArguments2.get_KeepStatsHistogram

           OUTPUT
            pKeep               : VARIANT_BOOL*'''
        return super(IPansharpeningFunctionArguments2, self).get_KeepStatsHistogram()
    def put_KeepStatsHistogram(self, pKeep):
        '''Method IPansharpeningFunctionArguments2.put_KeepStatsHistogram

           INPUT
            pKeep               : VARIANT_BOOL'''
        return super(IPansharpeningFunctionArguments2, self).put_KeepStatsHistogram(pKeep)
    def get_MaximumPansharpeningCellsize(self):
        '''Method IPansharpeningFunctionArguments2.get_MaximumPansharpeningCellsize

           OUTPUT
            CellSize            : double*'''
        return super(IPansharpeningFunctionArguments2, self).get_MaximumPansharpeningCellsize()
    def put_MaximumPansharpeningCellsize(self, CellSize):
        '''Method IPansharpeningFunctionArguments2.put_MaximumPansharpeningCellsize

           INPUT
            CellSize            : double'''
        return super(IPansharpeningFunctionArguments2, self).put_MaximumPansharpeningCellsize(CellSize)
    def get_MSImage(self):
        '''Method IPansharpeningFunctionArguments.get_MSImage (from IPansharpeningFunctionArguments)

           OUTPUT
            ppMSImage           : IUnknown**'''
        return super(IPansharpeningFunctionArguments2, self).get_MSImage()
    def putref_MSImage(self, ppMSImage):
        '''Method IPansharpeningFunctionArguments.putref_MSImage (from IPansharpeningFunctionArguments)

           INPUT
            ppMSImage           : IUnknown*'''
        return super(IPansharpeningFunctionArguments2, self).putref_MSImage(ppMSImage)
    def get_PanImage(self):
        '''Method IPansharpeningFunctionArguments.get_PanImage (from IPansharpeningFunctionArguments)

           OUTPUT
            ppPanImage          : IUnknown**'''
        return super(IPansharpeningFunctionArguments2, self).get_PanImage()
    def putref_PanImage(self, ppPanImage):
        '''Method IPansharpeningFunctionArguments.putref_PanImage (from IPansharpeningFunctionArguments)

           INPUT
            ppPanImage          : IUnknown*'''
        return super(IPansharpeningFunctionArguments2, self).putref_PanImage(ppPanImage)
    def get_InfraredImage(self):
        '''Method IPansharpeningFunctionArguments.get_InfraredImage (from IPansharpeningFunctionArguments)

           OUTPUT
            ppInfraredImage     : IUnknown**'''
        return super(IPansharpeningFunctionArguments2, self).get_InfraredImage()
    def putref_InfraredImage(self, ppInfraredImage):
        '''Method IPansharpeningFunctionArguments.putref_InfraredImage (from IPansharpeningFunctionArguments)

           INPUT
            ppInfraredImage     : IUnknown*'''
        return super(IPansharpeningFunctionArguments2, self).putref_InfraredImage(ppInfraredImage)
    def get_PansharpeningType(self):
        '''Method IPansharpeningFunctionArguments.get_PansharpeningType (from IPansharpeningFunctionArguments)

           OUTPUT
            pSharpeningType     : esriPansharpeningType*'''
        return super(IPansharpeningFunctionArguments2, self).get_PansharpeningType()
    def put_PansharpeningType(self, pSharpeningType):
        '''Method IPansharpeningFunctionArguments.put_PansharpeningType (from IPansharpeningFunctionArguments)

           INPUT
            pSharpeningType     : esriPansharpeningType'''
        return super(IPansharpeningFunctionArguments2, self).put_PansharpeningType(pSharpeningType)
    def get_Weights(self):
        '''Method IPansharpeningFunctionArguments.get_Weights (from IPansharpeningFunctionArguments)

           OUTPUT
            ppWeights           : IDoubleArray**'''
        return super(IPansharpeningFunctionArguments2, self).get_Weights()
    def putref_Weights(self, ppWeights):
        '''Method IPansharpeningFunctionArguments.putref_Weights (from IPansharpeningFunctionArguments)

           INPUT
            ppWeights           : IDoubleArray*'''
        return super(IPansharpeningFunctionArguments2, self).putref_Weights(ppWeights)
    InfraredImage = property(get_InfraredImage, putref_InfraredImage, None)
    KeepStatsHistogram = property(get_KeepStatsHistogram, put_KeepStatsHistogram, None)
    MSImage = property(get_MSImage, putref_MSImage, None)
    MaximumPansharpeningCellsize = property(get_MaximumPansharpeningCellsize, put_MaximumPansharpeningCellsize, None)
    PanImage = property(get_PanImage, putref_PanImage, None)
    PansharpeningType = property(get_PansharpeningType, put_PansharpeningType, None)
    Weights = property(get_Weights, putref_Weights, None)

class IPanSharpenGramSchmidtFunctionArguments(_esriDataSourcesRaster.IPanSharpenGramSchmidtFunctionArguments):
    _IID = uuid.UUID('e6648351-91a2-4921-be82-76e8fa834026')

    def __init__(self, *args, **kw):
        super(IPanSharpenGramSchmidtFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MSImage(self):
        '''Method IPanSharpenGramSchmidtFunctionArguments.get_MSImage

           OUTPUT
            ppMSImage           : IUnknown**'''
        return super(IPanSharpenGramSchmidtFunctionArguments, self).get_MSImage()
    def putref_MSImage(self, ppMSImage):
        '''Method IPanSharpenGramSchmidtFunctionArguments.putref_MSImage

           INPUT
            ppMSImage           : IUnknown*'''
        return super(IPanSharpenGramSchmidtFunctionArguments, self).putref_MSImage(ppMSImage)
    def get_PanImage(self):
        '''Method IPanSharpenGramSchmidtFunctionArguments.get_PanImage

           OUTPUT
            ppPanImage          : IUnknown**'''
        return super(IPanSharpenGramSchmidtFunctionArguments, self).get_PanImage()
    def putref_PanImage(self, ppPanImage):
        '''Method IPanSharpenGramSchmidtFunctionArguments.putref_PanImage

           INPUT
            ppPanImage          : IUnknown*'''
        return super(IPanSharpenGramSchmidtFunctionArguments, self).putref_PanImage(ppPanImage)
    def get_Weights(self):
        '''Method IPanSharpenGramSchmidtFunctionArguments.get_Weights

           OUTPUT
            ppWeights           : IDoubleArray**'''
        return super(IPanSharpenGramSchmidtFunctionArguments, self).get_Weights()
    def putref_Weights(self, ppWeights):
        '''Method IPanSharpenGramSchmidtFunctionArguments.putref_Weights

           INPUT
            ppWeights           : IDoubleArray*'''
        return super(IPanSharpenGramSchmidtFunctionArguments, self).putref_Weights(ppWeights)
    MSImage = property(get_MSImage, putref_MSImage, None)
    PanImage = property(get_PanImage, putref_PanImage, None)
    Weights = property(get_Weights, putref_Weights, None)

class IArithmeticFunctionArguments(_esriDataSourcesRaster.IArithmeticFunctionArguments):
    _IID = uuid.UUID('f1a4a7af-bddd-43b8-89c0-6768675ddd0d')

    def __init__(self, *args, **kw):
        super(IArithmeticFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IArithmeticFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IArithmeticFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IArithmeticFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IArithmeticFunctionArguments, self).putref_Raster(ppRaster)
    def get_Raster2(self):
        '''Method IArithmeticFunctionArguments.get_Raster2

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IArithmeticFunctionArguments, self).get_Raster2()
    def putref_Raster2(self, ppRaster):
        '''Method IArithmeticFunctionArguments.putref_Raster2

           INPUT
            ppRaster            : IUnknown*'''
        return super(IArithmeticFunctionArguments, self).putref_Raster2(ppRaster)
    def put_Operation(self, pOperation):
        '''Method IArithmeticFunctionArguments.put_Operation

           INPUT
            pOperation          : esriRasterArithmeticOperation'''
        return super(IArithmeticFunctionArguments, self).put_Operation(pOperation)
    def get_Operation(self):
        '''Method IArithmeticFunctionArguments.get_Operation

           OUTPUT
            pOperation          : esriRasterArithmeticOperation*'''
        return super(IArithmeticFunctionArguments, self).get_Operation()
    Operation = property(get_Operation, put_Operation, None)
    Raster = property(get_Raster, putref_Raster, None)
    Raster2 = property(get_Raster2, putref_Raster2, None)

class IArithmeticFunctionArguments2(_esriDataSourcesRaster.IArithmeticFunctionArguments2):
    _IID = uuid.UUID('f2063a93-e7b8-4654-809d-9e045b3bedb7')

    def __init__(self, *args, **kw):
        super(IArithmeticFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ExtentType(self):
        '''Method IArithmeticFunctionArguments2.get_ExtentType

           OUTPUT
            pType               : esriExtentType*'''
        return super(IArithmeticFunctionArguments2, self).get_ExtentType()
    def put_ExtentType(self, pType):
        '''Method IArithmeticFunctionArguments2.put_ExtentType

           INPUT
            pType               : esriExtentType'''
        return super(IArithmeticFunctionArguments2, self).put_ExtentType(pType)
    def get_CellsizeType(self):
        '''Method IArithmeticFunctionArguments2.get_CellsizeType

           OUTPUT
            pType               : esriCellsizeType*'''
        return super(IArithmeticFunctionArguments2, self).get_CellsizeType()
    def put_CellsizeType(self, pType):
        '''Method IArithmeticFunctionArguments2.put_CellsizeType

           INPUT
            pType               : esriCellsizeType'''
        return super(IArithmeticFunctionArguments2, self).put_CellsizeType(pType)
    def get_Raster(self):
        '''Method IArithmeticFunctionArguments.get_Raster (from IArithmeticFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IArithmeticFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IArithmeticFunctionArguments.putref_Raster (from IArithmeticFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(IArithmeticFunctionArguments2, self).putref_Raster(ppRaster)
    def get_Raster2(self):
        '''Method IArithmeticFunctionArguments.get_Raster2 (from IArithmeticFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IArithmeticFunctionArguments2, self).get_Raster2()
    def putref_Raster2(self, ppRaster):
        '''Method IArithmeticFunctionArguments.putref_Raster2 (from IArithmeticFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(IArithmeticFunctionArguments2, self).putref_Raster2(ppRaster)
    def put_Operation(self, pOperation):
        '''Method IArithmeticFunctionArguments.put_Operation (from IArithmeticFunctionArguments)

           INPUT
            pOperation          : esriRasterArithmeticOperation'''
        return super(IArithmeticFunctionArguments2, self).put_Operation(pOperation)
    def get_Operation(self):
        '''Method IArithmeticFunctionArguments.get_Operation (from IArithmeticFunctionArguments)

           OUTPUT
            pOperation          : esriRasterArithmeticOperation*'''
        return super(IArithmeticFunctionArguments2, self).get_Operation()
    CellsizeType = property(get_CellsizeType, put_CellsizeType, None)
    ExtentType = property(get_ExtentType, put_ExtentType, None)
    Operation = property(get_Operation, put_Operation, None)
    Raster = property(get_Raster, putref_Raster, None)
    Raster2 = property(get_Raster2, putref_Raster2, None)

class IColormapFunctionArguments(_esriDataSourcesRaster.IColormapFunctionArguments):
    _IID = uuid.UUID('1dff6065-c6cc-4d45-9b06-d59e6caa6797')

    def __init__(self, *args, **kw):
        super(IColormapFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IColormapFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IColormapFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IColormapFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IColormapFunctionArguments, self).putref_Raster(ppRaster)
    def get_ColormapName(self):
        '''Method IColormapFunctionArguments.get_ColormapName

           OUTPUT
            pColormapName       : BSTR*'''
        return super(IColormapFunctionArguments, self).get_ColormapName()
    def put_ColormapName(self, pColormapName):
        '''Method IColormapFunctionArguments.put_ColormapName

           INPUT
            pColormapName       : BSTR'''
        return super(IColormapFunctionArguments, self).put_ColormapName(pColormapName)
    def get_Colormap(self):
        '''Method IColormapFunctionArguments.get_Colormap

           OUTPUT
            ppColormap          : IRasterColormap**'''
        return super(IColormapFunctionArguments, self).get_Colormap()
    def putref_Colormap(self, ppColormap):
        '''Method IColormapFunctionArguments.putref_Colormap

           INPUT
            ppColormap          : IRasterColormap*'''
        return super(IColormapFunctionArguments, self).putref_Colormap(ppColormap)
    def get_ColorRamp(self):
        '''Method IColormapFunctionArguments.get_ColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IColormapFunctionArguments, self).get_ColorRamp()
    def putref_ColorRamp(self, ppColorRamp):
        '''Method IColormapFunctionArguments.putref_ColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IColormapFunctionArguments, self).putref_ColorRamp(ppColorRamp)
    def LoadFrom(self, colormapFileName):
        '''Method IColormapFunctionArguments.LoadFrom

           INPUT
            colormapFileName    : BSTR'''
        return super(IColormapFunctionArguments, self).LoadFrom(colormapFileName)
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)
    Colormap = property(get_Colormap, putref_Colormap, None)
    ColormapName = property(get_ColormapName, put_ColormapName, None)
    Raster = property(get_Raster, putref_Raster, None)

class IMosaicLODInfos(_esriDataSourcesRaster.IMosaicLODInfos):
    _IID = uuid.UUID('dfd25c61-79f5-4735-8cbc-1606947acfde')

    def __init__(self, *args, **kw):
        super(IMosaicLODInfos, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NumLevels(self):
        '''Method IMosaicLODInfos.get_NumLevels

           OUTPUT
            pNumLevels          : long*'''
        return super(IMosaicLODInfos, self).get_NumLevels()
    def Add(self, resolution, LOD):
        '''Method IMosaicLODInfos.Add

           INPUTS
            resolution          : double
            LOD                 : double'''
        return super(IMosaicLODInfos, self).Add(resolution, LOD)
    def Get(self, index):
        '''Method IMosaicLODInfos.Get

           INPUT
            index               : long

           OUTPUTS
            pResolution         : double*
            pLOD                : double*'''
        return super(IMosaicLODInfos, self).Get(index)
    def Empty(self):
        '''Method IMosaicLODInfos.Empty'''
        return super(IMosaicLODInfos, self).Empty()
    def put_Dpi(self, pDpi):
        '''Method IMosaicLODInfos.put_Dpi

           INPUT
            pDpi                : double'''
        return super(IMosaicLODInfos, self).put_Dpi(pDpi)
    def get_Dpi(self):
        '''Method IMosaicLODInfos.get_Dpi

           OUTPUT
            pDpi                : double*'''
        return super(IMosaicLODInfos, self).get_Dpi()
    def put_DeviceDpi(self, pDpi):
        '''Method IMosaicLODInfos.put_DeviceDpi

           INPUT
            pDpi                : double'''
        return super(IMosaicLODInfos, self).put_DeviceDpi(pDpi)
    def get_DeviceDpi(self):
        '''Method IMosaicLODInfos.get_DeviceDpi

           OUTPUT
            pDpi                : double*'''
        return super(IMosaicLODInfos, self).get_DeviceDpi()
    def Snap(self, resolution, hint):
        '''Method IMosaicLODInfos.Snap

           INPUTS
            resolution          : double
            hint                : esriRasterResamplingHint

           OUTPUTS
            pResolution         : double*
            pLOD                : double*'''
        return super(IMosaicLODInfos, self).Snap(resolution, hint)
    DeviceDpi = property(get_DeviceDpi, put_DeviceDpi, None)
    Dpi = property(get_Dpi, put_Dpi, None)
    NumLevels = property(get_NumLevels, None, None)

class IMosaicFunction(_esriDataSourcesRaster.IMosaicFunction):
    _IID = uuid.UUID('2e7a3bb4-76e1-4b84-a359-68233d60450a')

    def __init__(self, *args, **kw):
        super(IMosaicFunction, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DefinitionExpression(self):
        '''Method IMosaicFunction.get_DefinitionExpression

           OUTPUT
            pExpression         : BSTR*'''
        return super(IMosaicFunction, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, pExpression):
        '''Method IMosaicFunction.put_DefinitionExpression

           INPUT
            pExpression         : BSTR'''
        return super(IMosaicFunction, self).put_DefinitionExpression(pExpression)
    def get_DefinitionGeometry(self):
        '''Method IMosaicFunction.get_DefinitionGeometry

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(IMosaicFunction, self).get_DefinitionGeometry()
    def putref_DefinitionGeometry(self, ppGeometry):
        '''Method IMosaicFunction.putref_DefinitionGeometry

           INPUT
            ppGeometry          : IGeometry*'''
        return super(IMosaicFunction, self).putref_DefinitionGeometry(ppGeometry)
    def putref_DefinitionFIDs(self, ppFIDs):
        '''Method IMosaicFunction.putref_DefinitionFIDs

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(IMosaicFunction, self).putref_DefinitionFIDs(ppFIDs)
    def get_DefinitionFIDs(self):
        '''Method IMosaicFunction.get_DefinitionFIDs

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(IMosaicFunction, self).get_DefinitionFIDs()
    def get_RasterFieldName(self):
        '''Method IMosaicFunction.get_RasterFieldName

           OUTPUT
            pRasterFieldName    : BSTR*'''
        return super(IMosaicFunction, self).get_RasterFieldName()
    def put_RasterFieldName(self, pRasterFieldName):
        '''Method IMosaicFunction.put_RasterFieldName

           INPUT
            pRasterFieldName    : BSTR'''
        return super(IMosaicFunction, self).put_RasterFieldName(pRasterFieldName)
    def get_CellsizeFieldName(self):
        '''Method IMosaicFunction.get_CellsizeFieldName

           OUTPUT
            pCellsizeFieldName  : BSTR*'''
        return super(IMosaicFunction, self).get_CellsizeFieldName()
    def put_CellsizeFieldName(self, pCellsizeFieldName):
        '''Method IMosaicFunction.put_CellsizeFieldName

           INPUT
            pCellsizeFieldName  : BSTR'''
        return super(IMosaicFunction, self).put_CellsizeFieldName(pCellsizeFieldName)
    def get_MinCellsizeFieldName(self):
        '''Method IMosaicFunction.get_MinCellsizeFieldName

           OUTPUT
            pMinCellsizeFieldName: BSTR*'''
        return super(IMosaicFunction, self).get_MinCellsizeFieldName()
    def put_MinCellsizeFieldName(self, pMinCellsizeFieldName):
        '''Method IMosaicFunction.put_MinCellsizeFieldName

           INPUT
            pMinCellsizeFieldName: BSTR'''
        return super(IMosaicFunction, self).put_MinCellsizeFieldName(pMinCellsizeFieldName)
    def get_MaxCellsizeFieldName(self):
        '''Method IMosaicFunction.get_MaxCellsizeFieldName

           OUTPUT
            pMaxCellsizeFieldName: BSTR*'''
        return super(IMosaicFunction, self).get_MaxCellsizeFieldName()
    def put_MaxCellsizeFieldName(self, pMaxCellsizeFieldName):
        '''Method IMosaicFunction.put_MaxCellsizeFieldName

           INPUT
            pMaxCellsizeFieldName: BSTR'''
        return super(IMosaicFunction, self).put_MaxCellsizeFieldName(pMaxCellsizeFieldName)
    def get_LODFieldName(self):
        '''Method IMosaicFunction.get_LODFieldName

           OUTPUT
            pLODFieldName       : BSTR*'''
        return super(IMosaicFunction, self).get_LODFieldName()
    def put_LODFieldName(self, pLODFieldName):
        '''Method IMosaicFunction.put_LODFieldName

           INPUT
            pLODFieldName       : BSTR'''
        return super(IMosaicFunction, self).put_LODFieldName(pLODFieldName)
    def get_LODInfos(self):
        '''Method IMosaicFunction.get_LODInfos

           OUTPUT
            ppLODInfos          : IMosaicLODInfos**'''
        return super(IMosaicFunction, self).get_LODInfos()
    def putref_LODInfos(self, ppLODInfos):
        '''Method IMosaicFunction.putref_LODInfos

           INPUT
            ppLODInfos          : IMosaicLODInfos*'''
        return super(IMosaicFunction, self).putref_LODInfos(ppLODInfos)
    def get_MaximumVisibleCellsize(self):
        '''Method IMosaicFunction.get_MaximumVisibleCellsize

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IMosaicFunction, self).get_MaximumVisibleCellsize()
    def put_MaximumVisibleCellsize(self, ppCellsize):
        '''Method IMosaicFunction.put_MaximumVisibleCellsize

           INPUT
            ppCellsize          : IPnt*'''
        return super(IMosaicFunction, self).put_MaximumVisibleCellsize(ppCellsize)
    def get_DrawFootprint(self):
        '''Method IMosaicFunction.get_DrawFootprint

           OUTPUT
            pDraw               : VARIANT_BOOL*'''
        return super(IMosaicFunction, self).get_DrawFootprint()
    def put_DrawFootprint(self, pDraw):
        '''Method IMosaicFunction.put_DrawFootprint

           INPUT
            pDraw               : VARIANT_BOOL'''
        return super(IMosaicFunction, self).put_DrawFootprint(pDraw)
    def get_FootprintSymbol(self):
        '''Method IMosaicFunction.get_FootprintSymbol

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IMosaicFunction, self).get_FootprintSymbol()
    def putref_FootprintSymbol(self, ppSymbol):
        '''Method IMosaicFunction.putref_FootprintSymbol

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IMosaicFunction, self).putref_FootprintSymbol(ppSymbol)
    def get_MosaicMethod(self):
        '''Method IMosaicFunction.get_MosaicMethod

           OUTPUT
            pMosaicMethod       : esriMosaicMethod*'''
        return super(IMosaicFunction, self).get_MosaicMethod()
    def put_MosaicMethod(self, pMosaicMethod):
        '''Method IMosaicFunction.put_MosaicMethod

           INPUT
            pMosaicMethod       : esriMosaicMethod'''
        return super(IMosaicFunction, self).put_MosaicMethod(pMosaicMethod)
    def get_OrderByFieldName(self):
        '''Method IMosaicFunction.get_OrderByFieldName

           OUTPUT
            pName               : BSTR*'''
        return super(IMosaicFunction, self).get_OrderByFieldName()
    def put_OrderByFieldName(self, pName):
        '''Method IMosaicFunction.put_OrderByFieldName

           INPUT
            pName               : BSTR'''
        return super(IMosaicFunction, self).put_OrderByFieldName(pName)
    def get_OrderByBaseValue(self):
        '''Method IMosaicFunction.get_OrderByBaseValue

           OUTPUT
            pValue              : VARIANT*'''
        return super(IMosaicFunction, self).get_OrderByBaseValue()
    def put_OrderByBaseValue(self, pValue):
        '''Method IMosaicFunction.put_OrderByBaseValue

           INPUT
            pValue              : VARIANT'''
        return super(IMosaicFunction, self).put_OrderByBaseValue(pValue)
    def get_LockRasterFieldName(self):
        '''Method IMosaicFunction.get_LockRasterFieldName

           OUTPUT
            pLockFieldName      : BSTR*'''
        return super(IMosaicFunction, self).get_LockRasterFieldName()
    def put_LockRasterFieldName(self, pLockFieldName):
        '''Method IMosaicFunction.put_LockRasterFieldName

           INPUT
            pLockFieldName      : BSTR'''
        return super(IMosaicFunction, self).put_LockRasterFieldName(pLockFieldName)
    def get_LockRasterID(self):
        '''Method IMosaicFunction.get_LockRasterID

           OUTPUT
            pRasterID           : BSTR*'''
        return super(IMosaicFunction, self).get_LockRasterID()
    def put_LockRasterID(self, pRasterID):
        '''Method IMosaicFunction.put_LockRasterID

           INPUT
            pRasterID           : BSTR'''
        return super(IMosaicFunction, self).put_LockRasterID(pRasterID)
    def get_Viewpoint(self):
        '''Method IMosaicFunction.get_Viewpoint

           OUTPUT
            ppViewpoint         : IPoint**'''
        return super(IMosaicFunction, self).get_Viewpoint()
    def putref_Viewpoint(self, ppViewpoint):
        '''Method IMosaicFunction.putref_Viewpoint

           INPUT
            ppViewpoint         : IPoint*'''
        return super(IMosaicFunction, self).putref_Viewpoint(ppViewpoint)
    def get_Ascending(self):
        '''Method IMosaicFunction.get_Ascending

           OUTPUT
            pAscending          : VARIANT_BOOL*'''
        return super(IMosaicFunction, self).get_Ascending()
    def put_Ascending(self, pAscending):
        '''Method IMosaicFunction.put_Ascending

           INPUT
            pAscending          : VARIANT_BOOL'''
        return super(IMosaicFunction, self).put_Ascending(pAscending)
    def get_MosaicOperatorType(self):
        '''Method IMosaicFunction.get_MosaicOperatorType

           OUTPUT
            Type                : rstMosaicOperatorType*'''
        return super(IMosaicFunction, self).get_MosaicOperatorType()
    def put_MosaicOperatorType(self, Type):
        '''Method IMosaicFunction.put_MosaicOperatorType

           INPUT
            Type                : rstMosaicOperatorType'''
        return super(IMosaicFunction, self).put_MosaicOperatorType(Type)
    def get_MosaicOperator(self):
        '''Method IMosaicFunction.get_MosaicOperator

           OUTPUT
            op                  : IMosaicOperator**'''
        return super(IMosaicFunction, self).get_MosaicOperator()
    def putref_MosaicOperator(self, op):
        '''Method IMosaicFunction.putref_MosaicOperator

           INPUT
            op                  : IMosaicOperator*'''
        return super(IMosaicFunction, self).putref_MosaicOperator(op)
    def get_WhereClause(self):
        '''Method IMosaicFunction.get_WhereClause

           OUTPUT
            pExpression         : BSTR*'''
        return super(IMosaicFunction, self).get_WhereClause()
    def put_WhereClause(self, pExpression):
        '''Method IMosaicFunction.put_WhereClause

           INPUT
            pExpression         : BSTR'''
        return super(IMosaicFunction, self).put_WhereClause(pExpression)
    def putref_FIDs(self, ppFIDs):
        '''Method IMosaicFunction.putref_FIDs

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(IMosaicFunction, self).putref_FIDs(ppFIDs)
    def get_FIDs(self):
        '''Method IMosaicFunction.get_FIDs

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(IMosaicFunction, self).get_FIDs()
    def LockCellsize(self, CellSize):
        '''Method IMosaicFunction.LockCellsize

           INPUT
            CellSize            : double'''
        return super(IMosaicFunction, self).LockCellsize(CellSize)
    def UnlockCellsize(self):
        '''Method IMosaicFunction.UnlockCellsize'''
        return super(IMosaicFunction, self).UnlockCellsize()
    def get_Catalog(self):
        '''Method IMosaicFunction.get_Catalog

           OUTPUT
            ppCatalog           : ITable**'''
        return super(IMosaicFunction, self).get_Catalog()
    def get_RasterFieldIndex(self):
        '''Method IMosaicFunction.get_RasterFieldIndex

           OUTPUT
            pRasterFieldIndex   : long*'''
        return super(IMosaicFunction, self).get_RasterFieldIndex()
    def get_MinCellsizeFieldIndex(self):
        '''Method IMosaicFunction.get_MinCellsizeFieldIndex

           OUTPUT
            pMinCellsizeFieldIndex: long*'''
        return super(IMosaicFunction, self).get_MinCellsizeFieldIndex()
    def get_MaxCellsizeFieldIndex(self):
        '''Method IMosaicFunction.get_MaxCellsizeFieldIndex

           OUTPUT
            pMaxCellsizeFieldIndex: long*'''
        return super(IMosaicFunction, self).get_MaxCellsizeFieldIndex()
    def IsVisible(self, dx, dy):
        '''Method IMosaicFunction.IsVisible

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            pvbVisible          : VARIANT_BOOL*'''
        return super(IMosaicFunction, self).IsVisible(dx, dy)
    def get_MaxMosaicImageCount(self):
        '''Method IMosaicFunction.get_MaxMosaicImageCount

           OUTPUT
            pCount              : long*'''
        return super(IMosaicFunction, self).get_MaxMosaicImageCount()
    def put_MaxMosaicImageCount(self, pCount):
        '''Method IMosaicFunction.put_MaxMosaicImageCount

           INPUT
            pCount              : long'''
        return super(IMosaicFunction, self).put_MaxMosaicImageCount(pCount)
    def get_ClipToFootprint(self):
        '''Method IMosaicFunction.get_ClipToFootprint

           OUTPUT
            pClipping           : VARIANT_BOOL*'''
        return super(IMosaicFunction, self).get_ClipToFootprint()
    def put_ClipToFootprint(self, pClipping):
        '''Method IMosaicFunction.put_ClipToFootprint

           INPUT
            pClipping           : VARIANT_BOOL'''
        return super(IMosaicFunction, self).put_ClipToFootprint(pClipping)
    def get_ApplyColorCorrection(self):
        '''Method IMosaicFunction.get_ApplyColorCorrection

           OUTPUT
            pApplyColorCorrection: VARIANT_BOOL*'''
        return super(IMosaicFunction, self).get_ApplyColorCorrection()
    def put_ApplyColorCorrection(self, pApplyColorCorrection):
        '''Method IMosaicFunction.put_ApplyColorCorrection

           INPUT
            pApplyColorCorrection: VARIANT_BOOL'''
        return super(IMosaicFunction, self).put_ApplyColorCorrection(pApplyColorCorrection)
    def ConstructQueryExpression(self, pCellsize):
        '''Method IMosaicFunction.ConstructQueryExpression

           INPUT
            pCellsize           : IPoint*

           OUTPUT
            pQueryExpression    : BSTR*'''
        return super(IMosaicFunction, self).ConstructQueryExpression(pCellsize)
    def Search(self, pQueryFilter, pCellsize):
        '''Method IMosaicFunction.Search

           INPUTS
            pQueryFilter        : IQueryFilter*
            pCellsize           : IPoint*

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IMosaicFunction, self).Search(pQueryFilter, pCellsize)
    ApplyColorCorrection = property(get_ApplyColorCorrection, put_ApplyColorCorrection, None)
    Ascending = property(get_Ascending, put_Ascending, None)
    Catalog = property(get_Catalog, None, None)
    CellsizeFieldName = property(get_CellsizeFieldName, put_CellsizeFieldName, None)
    ClipToFootprint = property(get_ClipToFootprint, put_ClipToFootprint, None)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    DefinitionFIDs = property(get_DefinitionFIDs, putref_DefinitionFIDs, None)
    DefinitionGeometry = property(get_DefinitionGeometry, putref_DefinitionGeometry, None)
    DrawFootprint = property(get_DrawFootprint, put_DrawFootprint, None)
    FIDs = property(get_FIDs, putref_FIDs, None)
    FootprintSymbol = property(get_FootprintSymbol, putref_FootprintSymbol, None)
    LODFieldName = property(get_LODFieldName, put_LODFieldName, None)
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    LockRasterFieldName = property(get_LockRasterFieldName, put_LockRasterFieldName, None)
    LockRasterID = property(get_LockRasterID, put_LockRasterID, None)
    MaxCellsizeFieldIndex = property(get_MaxCellsizeFieldIndex, None, None)
    MaxCellsizeFieldName = property(get_MaxCellsizeFieldName, put_MaxCellsizeFieldName, None)
    MaxMosaicImageCount = property(get_MaxMosaicImageCount, put_MaxMosaicImageCount, None)
    MaximumVisibleCellsize = property(get_MaximumVisibleCellsize, put_MaximumVisibleCellsize, None)
    MinCellsizeFieldIndex = property(get_MinCellsizeFieldIndex, None, None)
    MinCellsizeFieldName = property(get_MinCellsizeFieldName, put_MinCellsizeFieldName, None)
    MosaicMethod = property(get_MosaicMethod, put_MosaicMethod, None)
    MosaicOperator = property(get_MosaicOperator, putref_MosaicOperator, None)
    MosaicOperatorType = property(get_MosaicOperatorType, put_MosaicOperatorType, None)
    OrderByBaseValue = property(get_OrderByBaseValue, put_OrderByBaseValue, None)
    OrderByFieldName = property(get_OrderByFieldName, put_OrderByFieldName, None)
    RasterFieldIndex = property(get_RasterFieldIndex, None, None)
    RasterFieldName = property(get_RasterFieldName, put_RasterFieldName, None)
    Viewpoint = property(get_Viewpoint, putref_Viewpoint, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IMosaicFunction2(_esriDataSourcesRaster.IMosaicFunction2):
    _IID = uuid.UUID('9beaef50-906f-4bb9-a693-92c9a63baabc')

    def __init__(self, *args, **kw):
        super(IMosaicFunction2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ClipToBoundary(self):
        '''Method IMosaicFunction2.get_ClipToBoundary

           OUTPUT
            pClipping           : VARIANT_BOOL*'''
        return super(IMosaicFunction2, self).get_ClipToBoundary()
    def put_ClipToBoundary(self, pClipping):
        '''Method IMosaicFunction2.put_ClipToBoundary

           INPUT
            pClipping           : VARIANT_BOOL'''
        return super(IMosaicFunction2, self).put_ClipToBoundary(pClipping)
    def get_BackgroundRaster(self):
        '''Method IMosaicFunction2.get_BackgroundRaster

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IMosaicFunction2, self).get_BackgroundRaster()
    def putref_BackgroundRaster(self, ppRaster):
        '''Method IMosaicFunction2.putref_BackgroundRaster

           INPUT
            ppRaster            : IRaster*'''
        return super(IMosaicFunction2, self).putref_BackgroundRaster(ppRaster)
    def get_BlendingWidth(self):
        '''Method IMosaicFunction2.get_BlendingWidth

           OUTPUT
            pWidth              : long*'''
        return super(IMosaicFunction2, self).get_BlendingWidth()
    def put_BlendingWidth(self, pWidth):
        '''Method IMosaicFunction2.put_BlendingWidth

           INPUT
            pWidth              : long'''
        return super(IMosaicFunction2, self).put_BlendingWidth(pWidth)
    def get_FootprintMayContainNoData(self):
        '''Method IMosaicFunction2.get_FootprintMayContainNoData

           OUTPUT
            pbFootprintMayContainNoData: VARIANT_BOOL*'''
        return super(IMosaicFunction2, self).get_FootprintMayContainNoData()
    def put_FootprintMayContainNoData(self, pbFootprintMayContainNoData):
        '''Method IMosaicFunction2.put_FootprintMayContainNoData

           INPUT
            pbFootprintMayContainNoData: VARIANT_BOOL'''
        return super(IMosaicFunction2, self).put_FootprintMayContainNoData(pbFootprintMayContainNoData)
    def get_DefinitionExpression(self):
        '''Method IMosaicFunction.get_DefinitionExpression (from IMosaicFunction)

           OUTPUT
            pExpression         : BSTR*'''
        return super(IMosaicFunction2, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, pExpression):
        '''Method IMosaicFunction.put_DefinitionExpression (from IMosaicFunction)

           INPUT
            pExpression         : BSTR'''
        return super(IMosaicFunction2, self).put_DefinitionExpression(pExpression)
    def get_DefinitionGeometry(self):
        '''Method IMosaicFunction.get_DefinitionGeometry (from IMosaicFunction)

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(IMosaicFunction2, self).get_DefinitionGeometry()
    def putref_DefinitionGeometry(self, ppGeometry):
        '''Method IMosaicFunction.putref_DefinitionGeometry (from IMosaicFunction)

           INPUT
            ppGeometry          : IGeometry*'''
        return super(IMosaicFunction2, self).putref_DefinitionGeometry(ppGeometry)
    def putref_DefinitionFIDs(self, ppFIDs):
        '''Method IMosaicFunction.putref_DefinitionFIDs (from IMosaicFunction)

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(IMosaicFunction2, self).putref_DefinitionFIDs(ppFIDs)
    def get_DefinitionFIDs(self):
        '''Method IMosaicFunction.get_DefinitionFIDs (from IMosaicFunction)

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(IMosaicFunction2, self).get_DefinitionFIDs()
    def get_RasterFieldName(self):
        '''Method IMosaicFunction.get_RasterFieldName (from IMosaicFunction)

           OUTPUT
            pRasterFieldName    : BSTR*'''
        return super(IMosaicFunction2, self).get_RasterFieldName()
    def put_RasterFieldName(self, pRasterFieldName):
        '''Method IMosaicFunction.put_RasterFieldName (from IMosaicFunction)

           INPUT
            pRasterFieldName    : BSTR'''
        return super(IMosaicFunction2, self).put_RasterFieldName(pRasterFieldName)
    def get_CellsizeFieldName(self):
        '''Method IMosaicFunction.get_CellsizeFieldName (from IMosaicFunction)

           OUTPUT
            pCellsizeFieldName  : BSTR*'''
        return super(IMosaicFunction2, self).get_CellsizeFieldName()
    def put_CellsizeFieldName(self, pCellsizeFieldName):
        '''Method IMosaicFunction.put_CellsizeFieldName (from IMosaicFunction)

           INPUT
            pCellsizeFieldName  : BSTR'''
        return super(IMosaicFunction2, self).put_CellsizeFieldName(pCellsizeFieldName)
    def get_MinCellsizeFieldName(self):
        '''Method IMosaicFunction.get_MinCellsizeFieldName (from IMosaicFunction)

           OUTPUT
            pMinCellsizeFieldName: BSTR*'''
        return super(IMosaicFunction2, self).get_MinCellsizeFieldName()
    def put_MinCellsizeFieldName(self, pMinCellsizeFieldName):
        '''Method IMosaicFunction.put_MinCellsizeFieldName (from IMosaicFunction)

           INPUT
            pMinCellsizeFieldName: BSTR'''
        return super(IMosaicFunction2, self).put_MinCellsizeFieldName(pMinCellsizeFieldName)
    def get_MaxCellsizeFieldName(self):
        '''Method IMosaicFunction.get_MaxCellsizeFieldName (from IMosaicFunction)

           OUTPUT
            pMaxCellsizeFieldName: BSTR*'''
        return super(IMosaicFunction2, self).get_MaxCellsizeFieldName()
    def put_MaxCellsizeFieldName(self, pMaxCellsizeFieldName):
        '''Method IMosaicFunction.put_MaxCellsizeFieldName (from IMosaicFunction)

           INPUT
            pMaxCellsizeFieldName: BSTR'''
        return super(IMosaicFunction2, self).put_MaxCellsizeFieldName(pMaxCellsizeFieldName)
    def get_LODFieldName(self):
        '''Method IMosaicFunction.get_LODFieldName (from IMosaicFunction)

           OUTPUT
            pLODFieldName       : BSTR*'''
        return super(IMosaicFunction2, self).get_LODFieldName()
    def put_LODFieldName(self, pLODFieldName):
        '''Method IMosaicFunction.put_LODFieldName (from IMosaicFunction)

           INPUT
            pLODFieldName       : BSTR'''
        return super(IMosaicFunction2, self).put_LODFieldName(pLODFieldName)
    def get_LODInfos(self):
        '''Method IMosaicFunction.get_LODInfos (from IMosaicFunction)

           OUTPUT
            ppLODInfos          : IMosaicLODInfos**'''
        return super(IMosaicFunction2, self).get_LODInfos()
    def putref_LODInfos(self, ppLODInfos):
        '''Method IMosaicFunction.putref_LODInfos (from IMosaicFunction)

           INPUT
            ppLODInfos          : IMosaicLODInfos*'''
        return super(IMosaicFunction2, self).putref_LODInfos(ppLODInfos)
    def get_MaximumVisibleCellsize(self):
        '''Method IMosaicFunction.get_MaximumVisibleCellsize (from IMosaicFunction)

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IMosaicFunction2, self).get_MaximumVisibleCellsize()
    def put_MaximumVisibleCellsize(self, ppCellsize):
        '''Method IMosaicFunction.put_MaximumVisibleCellsize (from IMosaicFunction)

           INPUT
            ppCellsize          : IPnt*'''
        return super(IMosaicFunction2, self).put_MaximumVisibleCellsize(ppCellsize)
    def get_DrawFootprint(self):
        '''Method IMosaicFunction.get_DrawFootprint (from IMosaicFunction)

           OUTPUT
            pDraw               : VARIANT_BOOL*'''
        return super(IMosaicFunction2, self).get_DrawFootprint()
    def put_DrawFootprint(self, pDraw):
        '''Method IMosaicFunction.put_DrawFootprint (from IMosaicFunction)

           INPUT
            pDraw               : VARIANT_BOOL'''
        return super(IMosaicFunction2, self).put_DrawFootprint(pDraw)
    def get_FootprintSymbol(self):
        '''Method IMosaicFunction.get_FootprintSymbol (from IMosaicFunction)

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IMosaicFunction2, self).get_FootprintSymbol()
    def putref_FootprintSymbol(self, ppSymbol):
        '''Method IMosaicFunction.putref_FootprintSymbol (from IMosaicFunction)

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IMosaicFunction2, self).putref_FootprintSymbol(ppSymbol)
    def get_MosaicMethod(self):
        '''Method IMosaicFunction.get_MosaicMethod (from IMosaicFunction)

           OUTPUT
            pMosaicMethod       : esriMosaicMethod*'''
        return super(IMosaicFunction2, self).get_MosaicMethod()
    def put_MosaicMethod(self, pMosaicMethod):
        '''Method IMosaicFunction.put_MosaicMethod (from IMosaicFunction)

           INPUT
            pMosaicMethod       : esriMosaicMethod'''
        return super(IMosaicFunction2, self).put_MosaicMethod(pMosaicMethod)
    def get_OrderByFieldName(self):
        '''Method IMosaicFunction.get_OrderByFieldName (from IMosaicFunction)

           OUTPUT
            pName               : BSTR*'''
        return super(IMosaicFunction2, self).get_OrderByFieldName()
    def put_OrderByFieldName(self, pName):
        '''Method IMosaicFunction.put_OrderByFieldName (from IMosaicFunction)

           INPUT
            pName               : BSTR'''
        return super(IMosaicFunction2, self).put_OrderByFieldName(pName)
    def get_OrderByBaseValue(self):
        '''Method IMosaicFunction.get_OrderByBaseValue (from IMosaicFunction)

           OUTPUT
            pValue              : VARIANT*'''
        return super(IMosaicFunction2, self).get_OrderByBaseValue()
    def put_OrderByBaseValue(self, pValue):
        '''Method IMosaicFunction.put_OrderByBaseValue (from IMosaicFunction)

           INPUT
            pValue              : VARIANT'''
        return super(IMosaicFunction2, self).put_OrderByBaseValue(pValue)
    def get_LockRasterFieldName(self):
        '''Method IMosaicFunction.get_LockRasterFieldName (from IMosaicFunction)

           OUTPUT
            pLockFieldName      : BSTR*'''
        return super(IMosaicFunction2, self).get_LockRasterFieldName()
    def put_LockRasterFieldName(self, pLockFieldName):
        '''Method IMosaicFunction.put_LockRasterFieldName (from IMosaicFunction)

           INPUT
            pLockFieldName      : BSTR'''
        return super(IMosaicFunction2, self).put_LockRasterFieldName(pLockFieldName)
    def get_LockRasterID(self):
        '''Method IMosaicFunction.get_LockRasterID (from IMosaicFunction)

           OUTPUT
            pRasterID           : BSTR*'''
        return super(IMosaicFunction2, self).get_LockRasterID()
    def put_LockRasterID(self, pRasterID):
        '''Method IMosaicFunction.put_LockRasterID (from IMosaicFunction)

           INPUT
            pRasterID           : BSTR'''
        return super(IMosaicFunction2, self).put_LockRasterID(pRasterID)
    def get_Viewpoint(self):
        '''Method IMosaicFunction.get_Viewpoint (from IMosaicFunction)

           OUTPUT
            ppViewpoint         : IPoint**'''
        return super(IMosaicFunction2, self).get_Viewpoint()
    def putref_Viewpoint(self, ppViewpoint):
        '''Method IMosaicFunction.putref_Viewpoint (from IMosaicFunction)

           INPUT
            ppViewpoint         : IPoint*'''
        return super(IMosaicFunction2, self).putref_Viewpoint(ppViewpoint)
    def get_Ascending(self):
        '''Method IMosaicFunction.get_Ascending (from IMosaicFunction)

           OUTPUT
            pAscending          : VARIANT_BOOL*'''
        return super(IMosaicFunction2, self).get_Ascending()
    def put_Ascending(self, pAscending):
        '''Method IMosaicFunction.put_Ascending (from IMosaicFunction)

           INPUT
            pAscending          : VARIANT_BOOL'''
        return super(IMosaicFunction2, self).put_Ascending(pAscending)
    def get_MosaicOperatorType(self):
        '''Method IMosaicFunction.get_MosaicOperatorType (from IMosaicFunction)

           OUTPUT
            Type                : rstMosaicOperatorType*'''
        return super(IMosaicFunction2, self).get_MosaicOperatorType()
    def put_MosaicOperatorType(self, Type):
        '''Method IMosaicFunction.put_MosaicOperatorType (from IMosaicFunction)

           INPUT
            Type                : rstMosaicOperatorType'''
        return super(IMosaicFunction2, self).put_MosaicOperatorType(Type)
    def get_MosaicOperator(self):
        '''Method IMosaicFunction.get_MosaicOperator (from IMosaicFunction)

           OUTPUT
            op                  : IMosaicOperator**'''
        return super(IMosaicFunction2, self).get_MosaicOperator()
    def putref_MosaicOperator(self, op):
        '''Method IMosaicFunction.putref_MosaicOperator (from IMosaicFunction)

           INPUT
            op                  : IMosaicOperator*'''
        return super(IMosaicFunction2, self).putref_MosaicOperator(op)
    def get_WhereClause(self):
        '''Method IMosaicFunction.get_WhereClause (from IMosaicFunction)

           OUTPUT
            pExpression         : BSTR*'''
        return super(IMosaicFunction2, self).get_WhereClause()
    def put_WhereClause(self, pExpression):
        '''Method IMosaicFunction.put_WhereClause (from IMosaicFunction)

           INPUT
            pExpression         : BSTR'''
        return super(IMosaicFunction2, self).put_WhereClause(pExpression)
    def putref_FIDs(self, ppFIDs):
        '''Method IMosaicFunction.putref_FIDs (from IMosaicFunction)

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(IMosaicFunction2, self).putref_FIDs(ppFIDs)
    def get_FIDs(self):
        '''Method IMosaicFunction.get_FIDs (from IMosaicFunction)

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(IMosaicFunction2, self).get_FIDs()
    def LockCellsize(self, CellSize):
        '''Method IMosaicFunction.LockCellsize (from IMosaicFunction)

           INPUT
            CellSize            : double'''
        return super(IMosaicFunction2, self).LockCellsize(CellSize)
    def UnlockCellsize(self):
        '''Method IMosaicFunction.UnlockCellsize (from IMosaicFunction)'''
        return super(IMosaicFunction2, self).UnlockCellsize()
    def get_Catalog(self):
        '''Method IMosaicFunction.get_Catalog (from IMosaicFunction)

           OUTPUT
            ppCatalog           : ITable**'''
        return super(IMosaicFunction2, self).get_Catalog()
    def get_RasterFieldIndex(self):
        '''Method IMosaicFunction.get_RasterFieldIndex (from IMosaicFunction)

           OUTPUT
            pRasterFieldIndex   : long*'''
        return super(IMosaicFunction2, self).get_RasterFieldIndex()
    def get_MinCellsizeFieldIndex(self):
        '''Method IMosaicFunction.get_MinCellsizeFieldIndex (from IMosaicFunction)

           OUTPUT
            pMinCellsizeFieldIndex: long*'''
        return super(IMosaicFunction2, self).get_MinCellsizeFieldIndex()
    def get_MaxCellsizeFieldIndex(self):
        '''Method IMosaicFunction.get_MaxCellsizeFieldIndex (from IMosaicFunction)

           OUTPUT
            pMaxCellsizeFieldIndex: long*'''
        return super(IMosaicFunction2, self).get_MaxCellsizeFieldIndex()
    def IsVisible(self, dx, dy):
        '''Method IMosaicFunction.IsVisible (from IMosaicFunction)

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            pvbVisible          : VARIANT_BOOL*'''
        return super(IMosaicFunction2, self).IsVisible(dx, dy)
    def get_MaxMosaicImageCount(self):
        '''Method IMosaicFunction.get_MaxMosaicImageCount (from IMosaicFunction)

           OUTPUT
            pCount              : long*'''
        return super(IMosaicFunction2, self).get_MaxMosaicImageCount()
    def put_MaxMosaicImageCount(self, pCount):
        '''Method IMosaicFunction.put_MaxMosaicImageCount (from IMosaicFunction)

           INPUT
            pCount              : long'''
        return super(IMosaicFunction2, self).put_MaxMosaicImageCount(pCount)
    def get_ClipToFootprint(self):
        '''Method IMosaicFunction.get_ClipToFootprint (from IMosaicFunction)

           OUTPUT
            pClipping           : VARIANT_BOOL*'''
        return super(IMosaicFunction2, self).get_ClipToFootprint()
    def put_ClipToFootprint(self, pClipping):
        '''Method IMosaicFunction.put_ClipToFootprint (from IMosaicFunction)

           INPUT
            pClipping           : VARIANT_BOOL'''
        return super(IMosaicFunction2, self).put_ClipToFootprint(pClipping)
    def get_ApplyColorCorrection(self):
        '''Method IMosaicFunction.get_ApplyColorCorrection (from IMosaicFunction)

           OUTPUT
            pApplyColorCorrection: VARIANT_BOOL*'''
        return super(IMosaicFunction2, self).get_ApplyColorCorrection()
    def put_ApplyColorCorrection(self, pApplyColorCorrection):
        '''Method IMosaicFunction.put_ApplyColorCorrection (from IMosaicFunction)

           INPUT
            pApplyColorCorrection: VARIANT_BOOL'''
        return super(IMosaicFunction2, self).put_ApplyColorCorrection(pApplyColorCorrection)
    def ConstructQueryExpression(self, pCellsize):
        '''Method IMosaicFunction.ConstructQueryExpression (from IMosaicFunction)

           INPUT
            pCellsize           : IPoint*

           OUTPUT
            pQueryExpression    : BSTR*'''
        return super(IMosaicFunction2, self).ConstructQueryExpression(pCellsize)
    def Search(self, pQueryFilter, pCellsize):
        '''Method IMosaicFunction.Search (from IMosaicFunction)

           INPUTS
            pQueryFilter        : IQueryFilter*
            pCellsize           : IPoint*

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IMosaicFunction2, self).Search(pQueryFilter, pCellsize)
    ApplyColorCorrection = property(get_ApplyColorCorrection, put_ApplyColorCorrection, None)
    Ascending = property(get_Ascending, put_Ascending, None)
    BackgroundRaster = property(get_BackgroundRaster, putref_BackgroundRaster, None)
    BlendingWidth = property(get_BlendingWidth, put_BlendingWidth, None)
    Catalog = property(get_Catalog, None, None)
    CellsizeFieldName = property(get_CellsizeFieldName, put_CellsizeFieldName, None)
    ClipToBoundary = property(get_ClipToBoundary, put_ClipToBoundary, None)
    ClipToFootprint = property(get_ClipToFootprint, put_ClipToFootprint, None)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    DefinitionFIDs = property(get_DefinitionFIDs, putref_DefinitionFIDs, None)
    DefinitionGeometry = property(get_DefinitionGeometry, putref_DefinitionGeometry, None)
    DrawFootprint = property(get_DrawFootprint, put_DrawFootprint, None)
    FIDs = property(get_FIDs, putref_FIDs, None)
    FootprintMayContainNoData = property(get_FootprintMayContainNoData, put_FootprintMayContainNoData, None)
    FootprintSymbol = property(get_FootprintSymbol, putref_FootprintSymbol, None)
    LODFieldName = property(get_LODFieldName, put_LODFieldName, None)
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    LockRasterFieldName = property(get_LockRasterFieldName, put_LockRasterFieldName, None)
    LockRasterID = property(get_LockRasterID, put_LockRasterID, None)
    MaxCellsizeFieldIndex = property(get_MaxCellsizeFieldIndex, None, None)
    MaxCellsizeFieldName = property(get_MaxCellsizeFieldName, put_MaxCellsizeFieldName, None)
    MaxMosaicImageCount = property(get_MaxMosaicImageCount, put_MaxMosaicImageCount, None)
    MaximumVisibleCellsize = property(get_MaximumVisibleCellsize, put_MaximumVisibleCellsize, None)
    MinCellsizeFieldIndex = property(get_MinCellsizeFieldIndex, None, None)
    MinCellsizeFieldName = property(get_MinCellsizeFieldName, put_MinCellsizeFieldName, None)
    MosaicMethod = property(get_MosaicMethod, put_MosaicMethod, None)
    MosaicOperator = property(get_MosaicOperator, putref_MosaicOperator, None)
    MosaicOperatorType = property(get_MosaicOperatorType, put_MosaicOperatorType, None)
    OrderByBaseValue = property(get_OrderByBaseValue, put_OrderByBaseValue, None)
    OrderByFieldName = property(get_OrderByFieldName, put_OrderByFieldName, None)
    RasterFieldIndex = property(get_RasterFieldIndex, None, None)
    RasterFieldName = property(get_RasterFieldName, put_RasterFieldName, None)
    Viewpoint = property(get_Viewpoint, putref_Viewpoint, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IMosaicFunction3(_esriDataSourcesRaster.IMosaicFunction3):
    _IID = uuid.UUID('9a90a3d9-9ed9-4df3-87b1-f1f563928c98')

    def __init__(self, *args, **kw):
        super(IMosaicFunction3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BlendingWidth2(self):
        '''Method IMosaicFunction3.get_BlendingWidth2

           OUTPUT
            pWidth              : double*'''
        return super(IMosaicFunction3, self).get_BlendingWidth2()
    def put_BlendingWidth2(self, pWidth):
        '''Method IMosaicFunction3.put_BlendingWidth2

           INPUT
            pWidth              : double'''
        return super(IMosaicFunction3, self).put_BlendingWidth2(pWidth)
    def get_BlendingWidthUnits(self):
        '''Method IMosaicFunction3.get_BlendingWidthUnits

           OUTPUT
            units               : esriBlendWidthUnits*'''
        return super(IMosaicFunction3, self).get_BlendingWidthUnits()
    def put_BlendingWidthUnits(self, units):
        '''Method IMosaicFunction3.put_BlendingWidthUnits

           INPUT
            units               : esriBlendWidthUnits'''
        return super(IMosaicFunction3, self).put_BlendingWidthUnits(units)
    def get_ClipToBoundary(self):
        '''Method IMosaicFunction2.get_ClipToBoundary (from IMosaicFunction2)

           OUTPUT
            pClipping           : VARIANT_BOOL*'''
        return super(IMosaicFunction3, self).get_ClipToBoundary()
    def put_ClipToBoundary(self, pClipping):
        '''Method IMosaicFunction2.put_ClipToBoundary (from IMosaicFunction2)

           INPUT
            pClipping           : VARIANT_BOOL'''
        return super(IMosaicFunction3, self).put_ClipToBoundary(pClipping)
    def get_BackgroundRaster(self):
        '''Method IMosaicFunction2.get_BackgroundRaster (from IMosaicFunction2)

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IMosaicFunction3, self).get_BackgroundRaster()
    def putref_BackgroundRaster(self, ppRaster):
        '''Method IMosaicFunction2.putref_BackgroundRaster (from IMosaicFunction2)

           INPUT
            ppRaster            : IRaster*'''
        return super(IMosaicFunction3, self).putref_BackgroundRaster(ppRaster)
    def get_BlendingWidth(self):
        '''Method IMosaicFunction2.get_BlendingWidth (from IMosaicFunction2)

           OUTPUT
            pWidth              : long*'''
        return super(IMosaicFunction3, self).get_BlendingWidth()
    def put_BlendingWidth(self, pWidth):
        '''Method IMosaicFunction2.put_BlendingWidth (from IMosaicFunction2)

           INPUT
            pWidth              : long'''
        return super(IMosaicFunction3, self).put_BlendingWidth(pWidth)
    def get_FootprintMayContainNoData(self):
        '''Method IMosaicFunction2.get_FootprintMayContainNoData (from IMosaicFunction2)

           OUTPUT
            pbFootprintMayContainNoData: VARIANT_BOOL*'''
        return super(IMosaicFunction3, self).get_FootprintMayContainNoData()
    def put_FootprintMayContainNoData(self, pbFootprintMayContainNoData):
        '''Method IMosaicFunction2.put_FootprintMayContainNoData (from IMosaicFunction2)

           INPUT
            pbFootprintMayContainNoData: VARIANT_BOOL'''
        return super(IMosaicFunction3, self).put_FootprintMayContainNoData(pbFootprintMayContainNoData)
    def get_DefinitionExpression(self):
        '''Method IMosaicFunction.get_DefinitionExpression (from IMosaicFunction)

           OUTPUT
            pExpression         : BSTR*'''
        return super(IMosaicFunction3, self).get_DefinitionExpression()
    def put_DefinitionExpression(self, pExpression):
        '''Method IMosaicFunction.put_DefinitionExpression (from IMosaicFunction)

           INPUT
            pExpression         : BSTR'''
        return super(IMosaicFunction3, self).put_DefinitionExpression(pExpression)
    def get_DefinitionGeometry(self):
        '''Method IMosaicFunction.get_DefinitionGeometry (from IMosaicFunction)

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(IMosaicFunction3, self).get_DefinitionGeometry()
    def putref_DefinitionGeometry(self, ppGeometry):
        '''Method IMosaicFunction.putref_DefinitionGeometry (from IMosaicFunction)

           INPUT
            ppGeometry          : IGeometry*'''
        return super(IMosaicFunction3, self).putref_DefinitionGeometry(ppGeometry)
    def putref_DefinitionFIDs(self, ppFIDs):
        '''Method IMosaicFunction.putref_DefinitionFIDs (from IMosaicFunction)

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(IMosaicFunction3, self).putref_DefinitionFIDs(ppFIDs)
    def get_DefinitionFIDs(self):
        '''Method IMosaicFunction.get_DefinitionFIDs (from IMosaicFunction)

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(IMosaicFunction3, self).get_DefinitionFIDs()
    def get_RasterFieldName(self):
        '''Method IMosaicFunction.get_RasterFieldName (from IMosaicFunction)

           OUTPUT
            pRasterFieldName    : BSTR*'''
        return super(IMosaicFunction3, self).get_RasterFieldName()
    def put_RasterFieldName(self, pRasterFieldName):
        '''Method IMosaicFunction.put_RasterFieldName (from IMosaicFunction)

           INPUT
            pRasterFieldName    : BSTR'''
        return super(IMosaicFunction3, self).put_RasterFieldName(pRasterFieldName)
    def get_CellsizeFieldName(self):
        '''Method IMosaicFunction.get_CellsizeFieldName (from IMosaicFunction)

           OUTPUT
            pCellsizeFieldName  : BSTR*'''
        return super(IMosaicFunction3, self).get_CellsizeFieldName()
    def put_CellsizeFieldName(self, pCellsizeFieldName):
        '''Method IMosaicFunction.put_CellsizeFieldName (from IMosaicFunction)

           INPUT
            pCellsizeFieldName  : BSTR'''
        return super(IMosaicFunction3, self).put_CellsizeFieldName(pCellsizeFieldName)
    def get_MinCellsizeFieldName(self):
        '''Method IMosaicFunction.get_MinCellsizeFieldName (from IMosaicFunction)

           OUTPUT
            pMinCellsizeFieldName: BSTR*'''
        return super(IMosaicFunction3, self).get_MinCellsizeFieldName()
    def put_MinCellsizeFieldName(self, pMinCellsizeFieldName):
        '''Method IMosaicFunction.put_MinCellsizeFieldName (from IMosaicFunction)

           INPUT
            pMinCellsizeFieldName: BSTR'''
        return super(IMosaicFunction3, self).put_MinCellsizeFieldName(pMinCellsizeFieldName)
    def get_MaxCellsizeFieldName(self):
        '''Method IMosaicFunction.get_MaxCellsizeFieldName (from IMosaicFunction)

           OUTPUT
            pMaxCellsizeFieldName: BSTR*'''
        return super(IMosaicFunction3, self).get_MaxCellsizeFieldName()
    def put_MaxCellsizeFieldName(self, pMaxCellsizeFieldName):
        '''Method IMosaicFunction.put_MaxCellsizeFieldName (from IMosaicFunction)

           INPUT
            pMaxCellsizeFieldName: BSTR'''
        return super(IMosaicFunction3, self).put_MaxCellsizeFieldName(pMaxCellsizeFieldName)
    def get_LODFieldName(self):
        '''Method IMosaicFunction.get_LODFieldName (from IMosaicFunction)

           OUTPUT
            pLODFieldName       : BSTR*'''
        return super(IMosaicFunction3, self).get_LODFieldName()
    def put_LODFieldName(self, pLODFieldName):
        '''Method IMosaicFunction.put_LODFieldName (from IMosaicFunction)

           INPUT
            pLODFieldName       : BSTR'''
        return super(IMosaicFunction3, self).put_LODFieldName(pLODFieldName)
    def get_LODInfos(self):
        '''Method IMosaicFunction.get_LODInfos (from IMosaicFunction)

           OUTPUT
            ppLODInfos          : IMosaicLODInfos**'''
        return super(IMosaicFunction3, self).get_LODInfos()
    def putref_LODInfos(self, ppLODInfos):
        '''Method IMosaicFunction.putref_LODInfos (from IMosaicFunction)

           INPUT
            ppLODInfos          : IMosaicLODInfos*'''
        return super(IMosaicFunction3, self).putref_LODInfos(ppLODInfos)
    def get_MaximumVisibleCellsize(self):
        '''Method IMosaicFunction.get_MaximumVisibleCellsize (from IMosaicFunction)

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IMosaicFunction3, self).get_MaximumVisibleCellsize()
    def put_MaximumVisibleCellsize(self, ppCellsize):
        '''Method IMosaicFunction.put_MaximumVisibleCellsize (from IMosaicFunction)

           INPUT
            ppCellsize          : IPnt*'''
        return super(IMosaicFunction3, self).put_MaximumVisibleCellsize(ppCellsize)
    def get_DrawFootprint(self):
        '''Method IMosaicFunction.get_DrawFootprint (from IMosaicFunction)

           OUTPUT
            pDraw               : VARIANT_BOOL*'''
        return super(IMosaicFunction3, self).get_DrawFootprint()
    def put_DrawFootprint(self, pDraw):
        '''Method IMosaicFunction.put_DrawFootprint (from IMosaicFunction)

           INPUT
            pDraw               : VARIANT_BOOL'''
        return super(IMosaicFunction3, self).put_DrawFootprint(pDraw)
    def get_FootprintSymbol(self):
        '''Method IMosaicFunction.get_FootprintSymbol (from IMosaicFunction)

           OUTPUT
            ppSymbol            : ISymbol**'''
        return super(IMosaicFunction3, self).get_FootprintSymbol()
    def putref_FootprintSymbol(self, ppSymbol):
        '''Method IMosaicFunction.putref_FootprintSymbol (from IMosaicFunction)

           INPUT
            ppSymbol            : ISymbol*'''
        return super(IMosaicFunction3, self).putref_FootprintSymbol(ppSymbol)
    def get_MosaicMethod(self):
        '''Method IMosaicFunction.get_MosaicMethod (from IMosaicFunction)

           OUTPUT
            pMosaicMethod       : esriMosaicMethod*'''
        return super(IMosaicFunction3, self).get_MosaicMethod()
    def put_MosaicMethod(self, pMosaicMethod):
        '''Method IMosaicFunction.put_MosaicMethod (from IMosaicFunction)

           INPUT
            pMosaicMethod       : esriMosaicMethod'''
        return super(IMosaicFunction3, self).put_MosaicMethod(pMosaicMethod)
    def get_OrderByFieldName(self):
        '''Method IMosaicFunction.get_OrderByFieldName (from IMosaicFunction)

           OUTPUT
            pName               : BSTR*'''
        return super(IMosaicFunction3, self).get_OrderByFieldName()
    def put_OrderByFieldName(self, pName):
        '''Method IMosaicFunction.put_OrderByFieldName (from IMosaicFunction)

           INPUT
            pName               : BSTR'''
        return super(IMosaicFunction3, self).put_OrderByFieldName(pName)
    def get_OrderByBaseValue(self):
        '''Method IMosaicFunction.get_OrderByBaseValue (from IMosaicFunction)

           OUTPUT
            pValue              : VARIANT*'''
        return super(IMosaicFunction3, self).get_OrderByBaseValue()
    def put_OrderByBaseValue(self, pValue):
        '''Method IMosaicFunction.put_OrderByBaseValue (from IMosaicFunction)

           INPUT
            pValue              : VARIANT'''
        return super(IMosaicFunction3, self).put_OrderByBaseValue(pValue)
    def get_LockRasterFieldName(self):
        '''Method IMosaicFunction.get_LockRasterFieldName (from IMosaicFunction)

           OUTPUT
            pLockFieldName      : BSTR*'''
        return super(IMosaicFunction3, self).get_LockRasterFieldName()
    def put_LockRasterFieldName(self, pLockFieldName):
        '''Method IMosaicFunction.put_LockRasterFieldName (from IMosaicFunction)

           INPUT
            pLockFieldName      : BSTR'''
        return super(IMosaicFunction3, self).put_LockRasterFieldName(pLockFieldName)
    def get_LockRasterID(self):
        '''Method IMosaicFunction.get_LockRasterID (from IMosaicFunction)

           OUTPUT
            pRasterID           : BSTR*'''
        return super(IMosaicFunction3, self).get_LockRasterID()
    def put_LockRasterID(self, pRasterID):
        '''Method IMosaicFunction.put_LockRasterID (from IMosaicFunction)

           INPUT
            pRasterID           : BSTR'''
        return super(IMosaicFunction3, self).put_LockRasterID(pRasterID)
    def get_Viewpoint(self):
        '''Method IMosaicFunction.get_Viewpoint (from IMosaicFunction)

           OUTPUT
            ppViewpoint         : IPoint**'''
        return super(IMosaicFunction3, self).get_Viewpoint()
    def putref_Viewpoint(self, ppViewpoint):
        '''Method IMosaicFunction.putref_Viewpoint (from IMosaicFunction)

           INPUT
            ppViewpoint         : IPoint*'''
        return super(IMosaicFunction3, self).putref_Viewpoint(ppViewpoint)
    def get_Ascending(self):
        '''Method IMosaicFunction.get_Ascending (from IMosaicFunction)

           OUTPUT
            pAscending          : VARIANT_BOOL*'''
        return super(IMosaicFunction3, self).get_Ascending()
    def put_Ascending(self, pAscending):
        '''Method IMosaicFunction.put_Ascending (from IMosaicFunction)

           INPUT
            pAscending          : VARIANT_BOOL'''
        return super(IMosaicFunction3, self).put_Ascending(pAscending)
    def get_MosaicOperatorType(self):
        '''Method IMosaicFunction.get_MosaicOperatorType (from IMosaicFunction)

           OUTPUT
            Type                : rstMosaicOperatorType*'''
        return super(IMosaicFunction3, self).get_MosaicOperatorType()
    def put_MosaicOperatorType(self, Type):
        '''Method IMosaicFunction.put_MosaicOperatorType (from IMosaicFunction)

           INPUT
            Type                : rstMosaicOperatorType'''
        return super(IMosaicFunction3, self).put_MosaicOperatorType(Type)
    def get_MosaicOperator(self):
        '''Method IMosaicFunction.get_MosaicOperator (from IMosaicFunction)

           OUTPUT
            op                  : IMosaicOperator**'''
        return super(IMosaicFunction3, self).get_MosaicOperator()
    def putref_MosaicOperator(self, op):
        '''Method IMosaicFunction.putref_MosaicOperator (from IMosaicFunction)

           INPUT
            op                  : IMosaicOperator*'''
        return super(IMosaicFunction3, self).putref_MosaicOperator(op)
    def get_WhereClause(self):
        '''Method IMosaicFunction.get_WhereClause (from IMosaicFunction)

           OUTPUT
            pExpression         : BSTR*'''
        return super(IMosaicFunction3, self).get_WhereClause()
    def put_WhereClause(self, pExpression):
        '''Method IMosaicFunction.put_WhereClause (from IMosaicFunction)

           INPUT
            pExpression         : BSTR'''
        return super(IMosaicFunction3, self).put_WhereClause(pExpression)
    def putref_FIDs(self, ppFIDs):
        '''Method IMosaicFunction.putref_FIDs (from IMosaicFunction)

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(IMosaicFunction3, self).putref_FIDs(ppFIDs)
    def get_FIDs(self):
        '''Method IMosaicFunction.get_FIDs (from IMosaicFunction)

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(IMosaicFunction3, self).get_FIDs()
    def LockCellsize(self, CellSize):
        '''Method IMosaicFunction.LockCellsize (from IMosaicFunction)

           INPUT
            CellSize            : double'''
        return super(IMosaicFunction3, self).LockCellsize(CellSize)
    def UnlockCellsize(self):
        '''Method IMosaicFunction.UnlockCellsize (from IMosaicFunction)'''
        return super(IMosaicFunction3, self).UnlockCellsize()
    def get_Catalog(self):
        '''Method IMosaicFunction.get_Catalog (from IMosaicFunction)

           OUTPUT
            ppCatalog           : ITable**'''
        return super(IMosaicFunction3, self).get_Catalog()
    def get_RasterFieldIndex(self):
        '''Method IMosaicFunction.get_RasterFieldIndex (from IMosaicFunction)

           OUTPUT
            pRasterFieldIndex   : long*'''
        return super(IMosaicFunction3, self).get_RasterFieldIndex()
    def get_MinCellsizeFieldIndex(self):
        '''Method IMosaicFunction.get_MinCellsizeFieldIndex (from IMosaicFunction)

           OUTPUT
            pMinCellsizeFieldIndex: long*'''
        return super(IMosaicFunction3, self).get_MinCellsizeFieldIndex()
    def get_MaxCellsizeFieldIndex(self):
        '''Method IMosaicFunction.get_MaxCellsizeFieldIndex (from IMosaicFunction)

           OUTPUT
            pMaxCellsizeFieldIndex: long*'''
        return super(IMosaicFunction3, self).get_MaxCellsizeFieldIndex()
    def IsVisible(self, dx, dy):
        '''Method IMosaicFunction.IsVisible (from IMosaicFunction)

           INPUTS
            dx                  : double
            dy                  : double

           OUTPUT
            pvbVisible          : VARIANT_BOOL*'''
        return super(IMosaicFunction3, self).IsVisible(dx, dy)
    def get_MaxMosaicImageCount(self):
        '''Method IMosaicFunction.get_MaxMosaicImageCount (from IMosaicFunction)

           OUTPUT
            pCount              : long*'''
        return super(IMosaicFunction3, self).get_MaxMosaicImageCount()
    def put_MaxMosaicImageCount(self, pCount):
        '''Method IMosaicFunction.put_MaxMosaicImageCount (from IMosaicFunction)

           INPUT
            pCount              : long'''
        return super(IMosaicFunction3, self).put_MaxMosaicImageCount(pCount)
    def get_ClipToFootprint(self):
        '''Method IMosaicFunction.get_ClipToFootprint (from IMosaicFunction)

           OUTPUT
            pClipping           : VARIANT_BOOL*'''
        return super(IMosaicFunction3, self).get_ClipToFootprint()
    def put_ClipToFootprint(self, pClipping):
        '''Method IMosaicFunction.put_ClipToFootprint (from IMosaicFunction)

           INPUT
            pClipping           : VARIANT_BOOL'''
        return super(IMosaicFunction3, self).put_ClipToFootprint(pClipping)
    def get_ApplyColorCorrection(self):
        '''Method IMosaicFunction.get_ApplyColorCorrection (from IMosaicFunction)

           OUTPUT
            pApplyColorCorrection: VARIANT_BOOL*'''
        return super(IMosaicFunction3, self).get_ApplyColorCorrection()
    def put_ApplyColorCorrection(self, pApplyColorCorrection):
        '''Method IMosaicFunction.put_ApplyColorCorrection (from IMosaicFunction)

           INPUT
            pApplyColorCorrection: VARIANT_BOOL'''
        return super(IMosaicFunction3, self).put_ApplyColorCorrection(pApplyColorCorrection)
    def ConstructQueryExpression(self, pCellsize):
        '''Method IMosaicFunction.ConstructQueryExpression (from IMosaicFunction)

           INPUT
            pCellsize           : IPoint*

           OUTPUT
            pQueryExpression    : BSTR*'''
        return super(IMosaicFunction3, self).ConstructQueryExpression(pCellsize)
    def Search(self, pQueryFilter, pCellsize):
        '''Method IMosaicFunction.Search (from IMosaicFunction)

           INPUTS
            pQueryFilter        : IQueryFilter*
            pCellsize           : IPoint*

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IMosaicFunction3, self).Search(pQueryFilter, pCellsize)
    ApplyColorCorrection = property(get_ApplyColorCorrection, put_ApplyColorCorrection, None)
    Ascending = property(get_Ascending, put_Ascending, None)
    BackgroundRaster = property(get_BackgroundRaster, putref_BackgroundRaster, None)
    BlendingWidth = property(get_BlendingWidth, put_BlendingWidth, None)
    BlendingWidth2 = property(get_BlendingWidth2, put_BlendingWidth2, None)
    BlendingWidthUnits = property(get_BlendingWidthUnits, put_BlendingWidthUnits, None)
    Catalog = property(get_Catalog, None, None)
    CellsizeFieldName = property(get_CellsizeFieldName, put_CellsizeFieldName, None)
    ClipToBoundary = property(get_ClipToBoundary, put_ClipToBoundary, None)
    ClipToFootprint = property(get_ClipToFootprint, put_ClipToFootprint, None)
    DefinitionExpression = property(get_DefinitionExpression, put_DefinitionExpression, None)
    DefinitionFIDs = property(get_DefinitionFIDs, putref_DefinitionFIDs, None)
    DefinitionGeometry = property(get_DefinitionGeometry, putref_DefinitionGeometry, None)
    DrawFootprint = property(get_DrawFootprint, put_DrawFootprint, None)
    FIDs = property(get_FIDs, putref_FIDs, None)
    FootprintMayContainNoData = property(get_FootprintMayContainNoData, put_FootprintMayContainNoData, None)
    FootprintSymbol = property(get_FootprintSymbol, putref_FootprintSymbol, None)
    LODFieldName = property(get_LODFieldName, put_LODFieldName, None)
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    LockRasterFieldName = property(get_LockRasterFieldName, put_LockRasterFieldName, None)
    LockRasterID = property(get_LockRasterID, put_LockRasterID, None)
    MaxCellsizeFieldIndex = property(get_MaxCellsizeFieldIndex, None, None)
    MaxCellsizeFieldName = property(get_MaxCellsizeFieldName, put_MaxCellsizeFieldName, None)
    MaxMosaicImageCount = property(get_MaxMosaicImageCount, put_MaxMosaicImageCount, None)
    MaximumVisibleCellsize = property(get_MaximumVisibleCellsize, put_MaximumVisibleCellsize, None)
    MinCellsizeFieldIndex = property(get_MinCellsizeFieldIndex, None, None)
    MinCellsizeFieldName = property(get_MinCellsizeFieldName, put_MinCellsizeFieldName, None)
    MosaicMethod = property(get_MosaicMethod, put_MosaicMethod, None)
    MosaicOperator = property(get_MosaicOperator, putref_MosaicOperator, None)
    MosaicOperatorType = property(get_MosaicOperatorType, put_MosaicOperatorType, None)
    OrderByBaseValue = property(get_OrderByBaseValue, put_OrderByBaseValue, None)
    OrderByFieldName = property(get_OrderByFieldName, put_OrderByFieldName, None)
    RasterFieldIndex = property(get_RasterFieldIndex, None, None)
    RasterFieldName = property(get_RasterFieldName, put_RasterFieldName, None)
    Viewpoint = property(get_Viewpoint, putref_Viewpoint, None)
    WhereClause = property(get_WhereClause, put_WhereClause, None)

class IMosaicFunctionArguments(_esriDataSourcesRaster.IMosaicFunctionArguments):
    _IID = uuid.UUID('1a16c6f0-8f1c-498e-81af-26d50a8dddd3')

    def __init__(self, *args, **kw):
        super(IMosaicFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Catalog(self):
        '''Method IMosaicFunctionArguments.get_Catalog

           OUTPUT
            ppCatalog           : IUnknown**'''
        return super(IMosaicFunctionArguments, self).get_Catalog()
    def putref_Catalog(self, ppCatalog):
        '''Method IMosaicFunctionArguments.putref_Catalog

           INPUT
            ppCatalog           : IUnknown*'''
        return super(IMosaicFunctionArguments, self).putref_Catalog(ppCatalog)
    def get_Seamline(self):
        '''Method IMosaicFunctionArguments.get_Seamline

           OUTPUT
            ppSeamline          : IUnknown**'''
        return super(IMosaicFunctionArguments, self).get_Seamline()
    def putref_Seamline(self, ppSeamline):
        '''Method IMosaicFunctionArguments.putref_Seamline

           INPUT
            ppSeamline          : IUnknown*'''
        return super(IMosaicFunctionArguments, self).putref_Seamline(ppSeamline)
    def get_Boundary(self):
        '''Method IMosaicFunctionArguments.get_Boundary

           OUTPUT
            ppBoundary          : IUnknown**'''
        return super(IMosaicFunctionArguments, self).get_Boundary()
    def putref_Boundary(self, ppBoundary):
        '''Method IMosaicFunctionArguments.putref_Boundary

           INPUT
            ppBoundary          : IUnknown*'''
        return super(IMosaicFunctionArguments, self).putref_Boundary(ppBoundary)
    def get_DodgingTable(self):
        '''Method IMosaicFunctionArguments.get_DodgingTable

           OUTPUT
            ppDodgingTable      : IUnknown**'''
        return super(IMosaicFunctionArguments, self).get_DodgingTable()
    def putref_DodgingTable(self, ppDodgingTable):
        '''Method IMosaicFunctionArguments.putref_DodgingTable

           INPUT
            ppDodgingTable      : IUnknown*'''
        return super(IMosaicFunctionArguments, self).putref_DodgingTable(ppDodgingTable)
    def get_RasterInfo(self):
        '''Method IMosaicFunctionArguments.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IMosaicFunctionArguments, self).get_RasterInfo()
    def putref_RasterInfo(self, ppRasterInfo):
        '''Method IMosaicFunctionArguments.putref_RasterInfo

           INPUT
            ppRasterInfo        : IRasterInfo*'''
        return super(IMosaicFunctionArguments, self).putref_RasterInfo(ppRasterInfo)
    def get_StereoTable(self):
        '''Method IMosaicFunctionArguments.get_StereoTable

           OUTPUT
            ppStereoTable       : IUnknown**'''
        return super(IMosaicFunctionArguments, self).get_StereoTable()
    def putref_StereoTable(self, ppStereoTable):
        '''Method IMosaicFunctionArguments.putref_StereoTable

           INPUT
            ppStereoTable       : IUnknown*'''
        return super(IMosaicFunctionArguments, self).putref_StereoTable(ppStereoTable)
    Boundary = property(get_Boundary, putref_Boundary, None)
    Catalog = property(get_Catalog, putref_Catalog, None)
    DodgingTable = property(get_DodgingTable, putref_DodgingTable, None)
    RasterInfo = property(get_RasterInfo, putref_RasterInfo, None)
    Seamline = property(get_Seamline, putref_Seamline, None)
    StereoTable = property(get_StereoTable, putref_StereoTable, None)

class IMosaicFunctionArguments2(_esriDataSourcesRaster.IMosaicFunctionArguments2):
    _IID = uuid.UUID('fde976a9-5d17-45de-96b6-09be21077cae')

    def __init__(self, *args, **kw):
        super(IMosaicFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CellSizeTolerance(self, pCellSizeTolerance):
        '''Method IMosaicFunctionArguments2.put_CellSizeTolerance

           INPUT
            pCellSizeTolerance  : double'''
        return super(IMosaicFunctionArguments2, self).put_CellSizeTolerance(pCellSizeTolerance)
    def get_CellSizeTolerance(self):
        '''Method IMosaicFunctionArguments2.get_CellSizeTolerance

           OUTPUT
            pCellSizeTolerance  : double*'''
        return super(IMosaicFunctionArguments2, self).get_CellSizeTolerance()
    def get_Catalog(self):
        '''Method IMosaicFunctionArguments.get_Catalog (from IMosaicFunctionArguments)

           OUTPUT
            ppCatalog           : IUnknown**'''
        return super(IMosaicFunctionArguments2, self).get_Catalog()
    def putref_Catalog(self, ppCatalog):
        '''Method IMosaicFunctionArguments.putref_Catalog (from IMosaicFunctionArguments)

           INPUT
            ppCatalog           : IUnknown*'''
        return super(IMosaicFunctionArguments2, self).putref_Catalog(ppCatalog)
    def get_Seamline(self):
        '''Method IMosaicFunctionArguments.get_Seamline (from IMosaicFunctionArguments)

           OUTPUT
            ppSeamline          : IUnknown**'''
        return super(IMosaicFunctionArguments2, self).get_Seamline()
    def putref_Seamline(self, ppSeamline):
        '''Method IMosaicFunctionArguments.putref_Seamline (from IMosaicFunctionArguments)

           INPUT
            ppSeamline          : IUnknown*'''
        return super(IMosaicFunctionArguments2, self).putref_Seamline(ppSeamline)
    def get_Boundary(self):
        '''Method IMosaicFunctionArguments.get_Boundary (from IMosaicFunctionArguments)

           OUTPUT
            ppBoundary          : IUnknown**'''
        return super(IMosaicFunctionArguments2, self).get_Boundary()
    def putref_Boundary(self, ppBoundary):
        '''Method IMosaicFunctionArguments.putref_Boundary (from IMosaicFunctionArguments)

           INPUT
            ppBoundary          : IUnknown*'''
        return super(IMosaicFunctionArguments2, self).putref_Boundary(ppBoundary)
    def get_DodgingTable(self):
        '''Method IMosaicFunctionArguments.get_DodgingTable (from IMosaicFunctionArguments)

           OUTPUT
            ppDodgingTable      : IUnknown**'''
        return super(IMosaicFunctionArguments2, self).get_DodgingTable()
    def putref_DodgingTable(self, ppDodgingTable):
        '''Method IMosaicFunctionArguments.putref_DodgingTable (from IMosaicFunctionArguments)

           INPUT
            ppDodgingTable      : IUnknown*'''
        return super(IMosaicFunctionArguments2, self).putref_DodgingTable(ppDodgingTable)
    def get_RasterInfo(self):
        '''Method IMosaicFunctionArguments.get_RasterInfo (from IMosaicFunctionArguments)

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IMosaicFunctionArguments2, self).get_RasterInfo()
    def putref_RasterInfo(self, ppRasterInfo):
        '''Method IMosaicFunctionArguments.putref_RasterInfo (from IMosaicFunctionArguments)

           INPUT
            ppRasterInfo        : IRasterInfo*'''
        return super(IMosaicFunctionArguments2, self).putref_RasterInfo(ppRasterInfo)
    def get_StereoTable(self):
        '''Method IMosaicFunctionArguments.get_StereoTable (from IMosaicFunctionArguments)

           OUTPUT
            ppStereoTable       : IUnknown**'''
        return super(IMosaicFunctionArguments2, self).get_StereoTable()
    def putref_StereoTable(self, ppStereoTable):
        '''Method IMosaicFunctionArguments.putref_StereoTable (from IMosaicFunctionArguments)

           INPUT
            ppStereoTable       : IUnknown*'''
        return super(IMosaicFunctionArguments2, self).putref_StereoTable(ppStereoTable)
    Boundary = property(get_Boundary, putref_Boundary, None)
    Catalog = property(get_Catalog, putref_Catalog, None)
    CellSizeTolerance = property(get_CellSizeTolerance, put_CellSizeTolerance, None)
    DodgingTable = property(get_DodgingTable, putref_DodgingTable, None)
    RasterInfo = property(get_RasterInfo, putref_RasterInfo, None)
    Seamline = property(get_Seamline, putref_Seamline, None)
    StereoTable = property(get_StereoTable, putref_StereoTable, None)

class IExtractBandFunctionArguments(_esriDataSourcesRaster.IExtractBandFunctionArguments):
    _IID = uuid.UUID('8de0f45a-83d0-4b7b-87ad-69aca8c11080')

    def __init__(self, *args, **kw):
        super(IExtractBandFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IExtractBandFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IExtractBandFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IExtractBandFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IExtractBandFunctionArguments, self).putref_Raster(ppRaster)
    def get_BandIDs(self):
        '''Method IExtractBandFunctionArguments.get_BandIDs

           OUTPUT
            ppBandIDs           : ILongArray**'''
        return super(IExtractBandFunctionArguments, self).get_BandIDs()
    def putref_BandIDs(self, ppBandIDs):
        '''Method IExtractBandFunctionArguments.putref_BandIDs

           INPUT
            ppBandIDs           : ILongArray*'''
        return super(IExtractBandFunctionArguments, self).putref_BandIDs(ppBandIDs)
    BandIDs = property(get_BandIDs, putref_BandIDs, None)
    Raster = property(get_Raster, putref_Raster, None)

class IExtractBandFunctionArguments2(_esriDataSourcesRaster.IExtractBandFunctionArguments2):
    _IID = uuid.UUID('ee22afbb-419c-474b-bf29-457a4b9899d8')

    def __init__(self, *args, **kw):
        super(IExtractBandFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, sBandCombination):
        '''Method IExtractBandFunctionArguments2.Init

           INPUT
            sBandCombination    : BSTR'''
        return super(IExtractBandFunctionArguments2, self).Init(sBandCombination)
    def get_MissingBandAction(self):
        '''Method IExtractBandFunctionArguments2.get_MissingBandAction

           OUTPUT
            pMissingBandAction  : esriMissingBandAction*'''
        return super(IExtractBandFunctionArguments2, self).get_MissingBandAction()
    def put_MissingBandAction(self, pMissingBandAction):
        '''Method IExtractBandFunctionArguments2.put_MissingBandAction

           INPUT
            pMissingBandAction  : esriMissingBandAction'''
        return super(IExtractBandFunctionArguments2, self).put_MissingBandAction(pMissingBandAction)
    def get_WavelengthMatchTolerance(self):
        '''Method IExtractBandFunctionArguments2.get_WavelengthMatchTolerance

           OUTPUT
            pWavelengthMatchTolerance: double*'''
        return super(IExtractBandFunctionArguments2, self).get_WavelengthMatchTolerance()
    def put_WavelengthMatchTolerance(self, pWavelengthMatchTolerance):
        '''Method IExtractBandFunctionArguments2.put_WavelengthMatchTolerance

           INPUT
            pWavelengthMatchTolerance: double'''
        return super(IExtractBandFunctionArguments2, self).put_WavelengthMatchTolerance(pWavelengthMatchTolerance)
    def get_BandWavelengths(self):
        '''Method IExtractBandFunctionArguments2.get_BandWavelengths

           OUTPUT
            ppBandWavelengths   : IDoubleArray**'''
        return super(IExtractBandFunctionArguments2, self).get_BandWavelengths()
    def putref_BandWavelengths(self, ppBandWavelengths):
        '''Method IExtractBandFunctionArguments2.putref_BandWavelengths

           INPUT
            ppBandWavelengths   : IDoubleArray*'''
        return super(IExtractBandFunctionArguments2, self).putref_BandWavelengths(ppBandWavelengths)
    def get_BandNames(self):
        '''Method IExtractBandFunctionArguments2.get_BandNames

           OUTPUT
            ppBandNames         : IStringArray**'''
        return super(IExtractBandFunctionArguments2, self).get_BandNames()
    def putref_BandNames(self, ppBandNames):
        '''Method IExtractBandFunctionArguments2.putref_BandNames

           INPUT
            ppBandNames         : IStringArray*'''
        return super(IExtractBandFunctionArguments2, self).putref_BandNames(ppBandNames)
    def get_Raster(self):
        '''Method IExtractBandFunctionArguments.get_Raster (from IExtractBandFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IExtractBandFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IExtractBandFunctionArguments.putref_Raster (from IExtractBandFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(IExtractBandFunctionArguments2, self).putref_Raster(ppRaster)
    def get_BandIDs(self):
        '''Method IExtractBandFunctionArguments.get_BandIDs (from IExtractBandFunctionArguments)

           OUTPUT
            ppBandIDs           : ILongArray**'''
        return super(IExtractBandFunctionArguments2, self).get_BandIDs()
    def putref_BandIDs(self, ppBandIDs):
        '''Method IExtractBandFunctionArguments.putref_BandIDs (from IExtractBandFunctionArguments)

           INPUT
            ppBandIDs           : ILongArray*'''
        return super(IExtractBandFunctionArguments2, self).putref_BandIDs(ppBandIDs)
    BandIDs = property(get_BandIDs, putref_BandIDs, None)
    BandNames = property(get_BandNames, putref_BandNames, None)
    BandWavelengths = property(get_BandWavelengths, putref_BandWavelengths, None)
    MissingBandAction = property(get_MissingBandAction, put_MissingBandAction, None)
    Raster = property(get_Raster, putref_Raster, None)
    WavelengthMatchTolerance = property(get_WavelengthMatchTolerance, put_WavelengthMatchTolerance, None)

class IStretchFunctionArguments(_esriDataSourcesRaster.IStretchFunctionArguments):
    _IID = uuid.UUID('3e5a8ca3-6a10-4a3e-a49b-bbc4c86e23fe')

    def __init__(self, *args, **kw):
        super(IStretchFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IStretchFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IStretchFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IStretchFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IStretchFunctionArguments, self).putref_Raster(ppRaster)
    def get_StretchType(self):
        '''Method IStretchFunctionArguments.get_StretchType

           OUTPUT
            pStretchType        : esriRasterStretchType*'''
        return super(IStretchFunctionArguments, self).get_StretchType()
    def put_StretchType(self, pStretchType):
        '''Method IStretchFunctionArguments.put_StretchType

           INPUT
            pStretchType        : esriRasterStretchType'''
        return super(IStretchFunctionArguments, self).put_StretchType(pStretchType)
    def get_Gamma(self):
        '''Method IStretchFunctionArguments.get_Gamma

           OUTPUT
            ppGamma             : IDoubleArray**'''
        return super(IStretchFunctionArguments, self).get_Gamma()
    def putref_Gamma(self, ppGamma):
        '''Method IStretchFunctionArguments.putref_Gamma

           INPUT
            ppGamma             : IDoubleArray*'''
        return super(IStretchFunctionArguments, self).putref_Gamma(ppGamma)
    def get_Statistics(self):
        '''Method IStretchFunctionArguments.get_Statistics

           OUTPUT
            ppStats             : IArray**'''
        return super(IStretchFunctionArguments, self).get_Statistics()
    def putref_Statistics(self, ppStats):
        '''Method IStretchFunctionArguments.putref_Statistics

           INPUT
            ppStats             : IArray*'''
        return super(IStretchFunctionArguments, self).putref_Statistics(ppStats)
    def get_Histograms(self):
        '''Method IStretchFunctionArguments.get_Histograms

           OUTPUT
            ppHistograms        : IArray**'''
        return super(IStretchFunctionArguments, self).get_Histograms()
    def putref_Histograms(self, ppHistograms):
        '''Method IStretchFunctionArguments.putref_Histograms

           INPUT
            ppHistograms        : IArray*'''
        return super(IStretchFunctionArguments, self).putref_Histograms(ppHistograms)
    def put_NumberOfStandardDeviations(self, pNumStdDevs):
        '''Method IStretchFunctionArguments.put_NumberOfStandardDeviations

           INPUT
            pNumStdDevs         : double'''
        return super(IStretchFunctionArguments, self).put_NumberOfStandardDeviations(pNumStdDevs)
    def get_NumberOfStandardDeviations(self):
        '''Method IStretchFunctionArguments.get_NumberOfStandardDeviations

           OUTPUT
            pNumStdDevs         : double*'''
        return super(IStretchFunctionArguments, self).get_NumberOfStandardDeviations()
    def get_UseGamma(self):
        '''Method IStretchFunctionArguments.get_UseGamma

           OUTPUT
            pUseGamma           : VARIANT_BOOL*'''
        return super(IStretchFunctionArguments, self).get_UseGamma()
    def put_UseGamma(self, pUseGamma):
        '''Method IStretchFunctionArguments.put_UseGamma

           INPUT
            pUseGamma           : VARIANT_BOOL'''
        return super(IStretchFunctionArguments, self).put_UseGamma(pUseGamma)
    def get_Min(self):
        '''Method IStretchFunctionArguments.get_Min

           OUTPUT
            pMinValue           : double*'''
        return super(IStretchFunctionArguments, self).get_Min()
    def put_Min(self, pMinValue):
        '''Method IStretchFunctionArguments.put_Min

           INPUT
            pMinValue           : double'''
        return super(IStretchFunctionArguments, self).put_Min(pMinValue)
    def get_Max(self):
        '''Method IStretchFunctionArguments.get_Max

           OUTPUT
            pMaxValue           : double*'''
        return super(IStretchFunctionArguments, self).get_Max()
    def put_Max(self, pMaxValue):
        '''Method IStretchFunctionArguments.put_Max

           INPUT
            pMaxValue           : double'''
        return super(IStretchFunctionArguments, self).put_Max(pMaxValue)
    def get_MinPercent(self):
        '''Method IStretchFunctionArguments.get_MinPercent

           OUTPUT
            pPercent            : double*'''
        return super(IStretchFunctionArguments, self).get_MinPercent()
    def put_MinPercent(self, pPercent):
        '''Method IStretchFunctionArguments.put_MinPercent

           INPUT
            pPercent            : double'''
        return super(IStretchFunctionArguments, self).put_MinPercent(pPercent)
    def get_MaxPercent(self):
        '''Method IStretchFunctionArguments.get_MaxPercent

           OUTPUT
            pPercent            : double*'''
        return super(IStretchFunctionArguments, self).get_MaxPercent()
    def put_MaxPercent(self, pPercent):
        '''Method IStretchFunctionArguments.put_MaxPercent

           INPUT
            pPercent            : double'''
        return super(IStretchFunctionArguments, self).put_MaxPercent(pPercent)
    Gamma = property(get_Gamma, putref_Gamma, None)
    Histograms = property(get_Histograms, putref_Histograms, None)
    Max = property(get_Max, put_Max, None)
    MaxPercent = property(get_MaxPercent, put_MaxPercent, None)
    Min = property(get_Min, put_Min, None)
    MinPercent = property(get_MinPercent, put_MinPercent, None)
    NumberOfStandardDeviations = property(get_NumberOfStandardDeviations, put_NumberOfStandardDeviations, None)
    Raster = property(get_Raster, putref_Raster, None)
    Statistics = property(get_Statistics, putref_Statistics, None)
    StretchType = property(get_StretchType, put_StretchType, None)
    UseGamma = property(get_UseGamma, put_UseGamma, None)

class IStretchFunctionArguments2(_esriDataSourcesRaster.IStretchFunctionArguments2):
    _IID = uuid.UUID('248e30e5-b730-487d-822b-0e25e8bbcf1c')

    def __init__(self, *args, **kw):
        super(IStretchFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DRA(self):
        '''Method IStretchFunctionArguments2.get_DRA

           OUTPUT
            pDRA                : VARIANT_BOOL*'''
        return super(IStretchFunctionArguments2, self).get_DRA()
    def put_DRA(self, pDRA):
        '''Method IStretchFunctionArguments2.put_DRA

           INPUT
            pDRA                : VARIANT_BOOL'''
        return super(IStretchFunctionArguments2, self).put_DRA(pDRA)
    def get_EstimateStatsHistogram(self):
        '''Method IStretchFunctionArguments2.get_EstimateStatsHistogram

           OUTPUT
            pEstimateStatsHistogram: VARIANT_BOOL*'''
        return super(IStretchFunctionArguments2, self).get_EstimateStatsHistogram()
    def put_EstimateStatsHistogram(self, pEstimateStatsHistogram):
        '''Method IStretchFunctionArguments2.put_EstimateStatsHistogram

           INPUT
            pEstimateStatsHistogram: VARIANT_BOOL'''
        return super(IStretchFunctionArguments2, self).put_EstimateStatsHistogram(pEstimateStatsHistogram)
    def get_ComputeGamma(self):
        '''Method IStretchFunctionArguments2.get_ComputeGamma

           OUTPUT
            pComputeGamma       : VARIANT_BOOL*'''
        return super(IStretchFunctionArguments2, self).get_ComputeGamma()
    def put_ComputeGamma(self, pComputeGamma):
        '''Method IStretchFunctionArguments2.put_ComputeGamma

           INPUT
            pComputeGamma       : VARIANT_BOOL'''
        return super(IStretchFunctionArguments2, self).put_ComputeGamma(pComputeGamma)
    def get_Raster(self):
        '''Method IStretchFunctionArguments.get_Raster (from IStretchFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IStretchFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IStretchFunctionArguments.putref_Raster (from IStretchFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(IStretchFunctionArguments2, self).putref_Raster(ppRaster)
    def get_StretchType(self):
        '''Method IStretchFunctionArguments.get_StretchType (from IStretchFunctionArguments)

           OUTPUT
            pStretchType        : esriRasterStretchType*'''
        return super(IStretchFunctionArguments2, self).get_StretchType()
    def put_StretchType(self, pStretchType):
        '''Method IStretchFunctionArguments.put_StretchType (from IStretchFunctionArguments)

           INPUT
            pStretchType        : esriRasterStretchType'''
        return super(IStretchFunctionArguments2, self).put_StretchType(pStretchType)
    def get_Gamma(self):
        '''Method IStretchFunctionArguments.get_Gamma (from IStretchFunctionArguments)

           OUTPUT
            ppGamma             : IDoubleArray**'''
        return super(IStretchFunctionArguments2, self).get_Gamma()
    def putref_Gamma(self, ppGamma):
        '''Method IStretchFunctionArguments.putref_Gamma (from IStretchFunctionArguments)

           INPUT
            ppGamma             : IDoubleArray*'''
        return super(IStretchFunctionArguments2, self).putref_Gamma(ppGamma)
    def get_Statistics(self):
        '''Method IStretchFunctionArguments.get_Statistics (from IStretchFunctionArguments)

           OUTPUT
            ppStats             : IArray**'''
        return super(IStretchFunctionArguments2, self).get_Statistics()
    def putref_Statistics(self, ppStats):
        '''Method IStretchFunctionArguments.putref_Statistics (from IStretchFunctionArguments)

           INPUT
            ppStats             : IArray*'''
        return super(IStretchFunctionArguments2, self).putref_Statistics(ppStats)
    def get_Histograms(self):
        '''Method IStretchFunctionArguments.get_Histograms (from IStretchFunctionArguments)

           OUTPUT
            ppHistograms        : IArray**'''
        return super(IStretchFunctionArguments2, self).get_Histograms()
    def putref_Histograms(self, ppHistograms):
        '''Method IStretchFunctionArguments.putref_Histograms (from IStretchFunctionArguments)

           INPUT
            ppHistograms        : IArray*'''
        return super(IStretchFunctionArguments2, self).putref_Histograms(ppHistograms)
    def put_NumberOfStandardDeviations(self, pNumStdDevs):
        '''Method IStretchFunctionArguments.put_NumberOfStandardDeviations (from IStretchFunctionArguments)

           INPUT
            pNumStdDevs         : double'''
        return super(IStretchFunctionArguments2, self).put_NumberOfStandardDeviations(pNumStdDevs)
    def get_NumberOfStandardDeviations(self):
        '''Method IStretchFunctionArguments.get_NumberOfStandardDeviations (from IStretchFunctionArguments)

           OUTPUT
            pNumStdDevs         : double*'''
        return super(IStretchFunctionArguments2, self).get_NumberOfStandardDeviations()
    def get_UseGamma(self):
        '''Method IStretchFunctionArguments.get_UseGamma (from IStretchFunctionArguments)

           OUTPUT
            pUseGamma           : VARIANT_BOOL*'''
        return super(IStretchFunctionArguments2, self).get_UseGamma()
    def put_UseGamma(self, pUseGamma):
        '''Method IStretchFunctionArguments.put_UseGamma (from IStretchFunctionArguments)

           INPUT
            pUseGamma           : VARIANT_BOOL'''
        return super(IStretchFunctionArguments2, self).put_UseGamma(pUseGamma)
    def get_Min(self):
        '''Method IStretchFunctionArguments.get_Min (from IStretchFunctionArguments)

           OUTPUT
            pMinValue           : double*'''
        return super(IStretchFunctionArguments2, self).get_Min()
    def put_Min(self, pMinValue):
        '''Method IStretchFunctionArguments.put_Min (from IStretchFunctionArguments)

           INPUT
            pMinValue           : double'''
        return super(IStretchFunctionArguments2, self).put_Min(pMinValue)
    def get_Max(self):
        '''Method IStretchFunctionArguments.get_Max (from IStretchFunctionArguments)

           OUTPUT
            pMaxValue           : double*'''
        return super(IStretchFunctionArguments2, self).get_Max()
    def put_Max(self, pMaxValue):
        '''Method IStretchFunctionArguments.put_Max (from IStretchFunctionArguments)

           INPUT
            pMaxValue           : double'''
        return super(IStretchFunctionArguments2, self).put_Max(pMaxValue)
    def get_MinPercent(self):
        '''Method IStretchFunctionArguments.get_MinPercent (from IStretchFunctionArguments)

           OUTPUT
            pPercent            : double*'''
        return super(IStretchFunctionArguments2, self).get_MinPercent()
    def put_MinPercent(self, pPercent):
        '''Method IStretchFunctionArguments.put_MinPercent (from IStretchFunctionArguments)

           INPUT
            pPercent            : double'''
        return super(IStretchFunctionArguments2, self).put_MinPercent(pPercent)
    def get_MaxPercent(self):
        '''Method IStretchFunctionArguments.get_MaxPercent (from IStretchFunctionArguments)

           OUTPUT
            pPercent            : double*'''
        return super(IStretchFunctionArguments2, self).get_MaxPercent()
    def put_MaxPercent(self, pPercent):
        '''Method IStretchFunctionArguments.put_MaxPercent (from IStretchFunctionArguments)

           INPUT
            pPercent            : double'''
        return super(IStretchFunctionArguments2, self).put_MaxPercent(pPercent)
    ComputeGamma = property(get_ComputeGamma, put_ComputeGamma, None)
    DRA = property(get_DRA, put_DRA, None)
    EstimateStatsHistogram = property(get_EstimateStatsHistogram, put_EstimateStatsHistogram, None)
    Gamma = property(get_Gamma, putref_Gamma, None)
    Histograms = property(get_Histograms, putref_Histograms, None)
    Max = property(get_Max, put_Max, None)
    MaxPercent = property(get_MaxPercent, put_MaxPercent, None)
    Min = property(get_Min, put_Min, None)
    MinPercent = property(get_MinPercent, put_MinPercent, None)
    NumberOfStandardDeviations = property(get_NumberOfStandardDeviations, put_NumberOfStandardDeviations, None)
    Raster = property(get_Raster, putref_Raster, None)
    Statistics = property(get_Statistics, putref_Statistics, None)
    StretchType = property(get_StretchType, put_StretchType, None)
    UseGamma = property(get_UseGamma, put_UseGamma, None)

class IStatisticsFunctionArguments(_esriDataSourcesRaster.IStatisticsFunctionArguments):
    _IID = uuid.UUID('9d5d6cf6-1ed8-4d3a-b91f-b743444722c2')

    def __init__(self, *args, **kw):
        super(IStatisticsFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IStatisticsFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IStatisticsFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IStatisticsFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IStatisticsFunctionArguments, self).putref_Raster(ppRaster)
    def get_Type(self):
        '''Method IStatisticsFunctionArguments.get_Type

           OUTPUT
            pType               : esriFocalStatisticType*'''
        return super(IStatisticsFunctionArguments, self).get_Type()
    def put_Type(self, pType):
        '''Method IStatisticsFunctionArguments.put_Type

           INPUT
            pType               : esriFocalStatisticType'''
        return super(IStatisticsFunctionArguments, self).put_Type(pType)
    def put_Columns(self, pColumns):
        '''Method IStatisticsFunctionArguments.put_Columns

           INPUT
            pColumns            : long'''
        return super(IStatisticsFunctionArguments, self).put_Columns(pColumns)
    def get_Columns(self):
        '''Method IStatisticsFunctionArguments.get_Columns

           OUTPUT
            pColumns            : long*'''
        return super(IStatisticsFunctionArguments, self).get_Columns()
    def put_Rows(self, pRows):
        '''Method IStatisticsFunctionArguments.put_Rows

           INPUT
            pRows               : long'''
        return super(IStatisticsFunctionArguments, self).put_Rows(pRows)
    def get_Rows(self):
        '''Method IStatisticsFunctionArguments.get_Rows

           OUTPUT
            pRows               : long*'''
        return super(IStatisticsFunctionArguments, self).get_Rows()
    Columns = property(get_Columns, put_Columns, None)
    Raster = property(get_Raster, putref_Raster, None)
    Rows = property(get_Rows, put_Rows, None)
    Type = property(get_Type, put_Type, None)

class IStatisticsFunctionArguments2(_esriDataSourcesRaster.IStatisticsFunctionArguments2):
    _IID = uuid.UUID('2506bf76-253a-4262-8440-ed00db372a32')

    def __init__(self, *args, **kw):
        super(IStatisticsFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FillNoDataOnly(self, pbFillNoData):
        '''Method IStatisticsFunctionArguments2.put_FillNoDataOnly

           INPUT
            pbFillNoData        : VARIANT_BOOL'''
        return super(IStatisticsFunctionArguments2, self).put_FillNoDataOnly(pbFillNoData)
    def get_FillNoDataOnly(self):
        '''Method IStatisticsFunctionArguments2.get_FillNoDataOnly

           OUTPUT
            pbFillNoData        : VARIANT_BOOL*'''
        return super(IStatisticsFunctionArguments2, self).get_FillNoDataOnly()
    def get_Raster(self):
        '''Method IStatisticsFunctionArguments.get_Raster (from IStatisticsFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IStatisticsFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IStatisticsFunctionArguments.putref_Raster (from IStatisticsFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(IStatisticsFunctionArguments2, self).putref_Raster(ppRaster)
    def get_Type(self):
        '''Method IStatisticsFunctionArguments.get_Type (from IStatisticsFunctionArguments)

           OUTPUT
            pType               : esriFocalStatisticType*'''
        return super(IStatisticsFunctionArguments2, self).get_Type()
    def put_Type(self, pType):
        '''Method IStatisticsFunctionArguments.put_Type (from IStatisticsFunctionArguments)

           INPUT
            pType               : esriFocalStatisticType'''
        return super(IStatisticsFunctionArguments2, self).put_Type(pType)
    def put_Columns(self, pColumns):
        '''Method IStatisticsFunctionArguments.put_Columns (from IStatisticsFunctionArguments)

           INPUT
            pColumns            : long'''
        return super(IStatisticsFunctionArguments2, self).put_Columns(pColumns)
    def get_Columns(self):
        '''Method IStatisticsFunctionArguments.get_Columns (from IStatisticsFunctionArguments)

           OUTPUT
            pColumns            : long*'''
        return super(IStatisticsFunctionArguments2, self).get_Columns()
    def put_Rows(self, pRows):
        '''Method IStatisticsFunctionArguments.put_Rows (from IStatisticsFunctionArguments)

           INPUT
            pRows               : long'''
        return super(IStatisticsFunctionArguments2, self).put_Rows(pRows)
    def get_Rows(self):
        '''Method IStatisticsFunctionArguments.get_Rows (from IStatisticsFunctionArguments)

           OUTPUT
            pRows               : long*'''
        return super(IStatisticsFunctionArguments2, self).get_Rows()
    Columns = property(get_Columns, put_Columns, None)
    FillNoDataOnly = property(get_FillNoDataOnly, put_FillNoDataOnly, None)
    Raster = property(get_Raster, putref_Raster, None)
    Rows = property(get_Rows, put_Rows, None)
    Type = property(get_Type, put_Type, None)

class IConvolutionFunctionArguments(_esriDataSourcesRaster.IConvolutionFunctionArguments):
    _IID = uuid.UUID('c99e8c28-55ee-4c9c-8e6d-b6624b925878')

    def __init__(self, *args, **kw):
        super(IConvolutionFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IConvolutionFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IConvolutionFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IConvolutionFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IConvolutionFunctionArguments, self).putref_Raster(ppRaster)
    def put_Type(self, pType):
        '''Method IConvolutionFunctionArguments.put_Type

           INPUT
            pType               : esriRasterFilterTypeEnum'''
        return super(IConvolutionFunctionArguments, self).put_Type(pType)
    def get_Type(self):
        '''Method IConvolutionFunctionArguments.get_Type

           OUTPUT
            pType               : esriRasterFilterTypeEnum*'''
        return super(IConvolutionFunctionArguments, self).get_Type()
    def put_Columns(self, pColumns):
        '''Method IConvolutionFunctionArguments.put_Columns

           INPUT
            pColumns            : long'''
        return super(IConvolutionFunctionArguments, self).put_Columns(pColumns)
    def get_Columns(self):
        '''Method IConvolutionFunctionArguments.get_Columns

           OUTPUT
            pColumns            : long*'''
        return super(IConvolutionFunctionArguments, self).get_Columns()
    def put_Rows(self, pRows):
        '''Method IConvolutionFunctionArguments.put_Rows

           INPUT
            pRows               : long'''
        return super(IConvolutionFunctionArguments, self).put_Rows(pRows)
    def get_Rows(self):
        '''Method IConvolutionFunctionArguments.get_Rows

           OUTPUT
            pRows               : long*'''
        return super(IConvolutionFunctionArguments, self).get_Rows()
    def get_Kernel(self):
        '''Method IConvolutionFunctionArguments.get_Kernel

           OUTPUT
            ppKernel            : IDoubleArray**'''
        return super(IConvolutionFunctionArguments, self).get_Kernel()
    def put_Kernel(self, ppKernel):
        '''Method IConvolutionFunctionArguments.put_Kernel

           INPUT
            ppKernel            : IDoubleArray*'''
        return super(IConvolutionFunctionArguments, self).put_Kernel(ppKernel)
    Columns = property(get_Columns, put_Columns, None)
    Kernel = property(get_Kernel, put_Kernel, None)
    Raster = property(get_Raster, putref_Raster, None)
    Rows = property(get_Rows, put_Rows, None)
    Type = property(get_Type, put_Type, None)

class ISpeckleFunctionArguments(_esriDataSourcesRaster.ISpeckleFunctionArguments):
    _IID = uuid.UUID('b8099ff7-e990-4418-ad03-efbd626875d7')

    def __init__(self, *args, **kw):
        super(ISpeckleFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method ISpeckleFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(ISpeckleFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method ISpeckleFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(ISpeckleFunctionArguments, self).putref_Raster(ppRaster)
    def put_FilterType(self, pType):
        '''Method ISpeckleFunctionArguments.put_FilterType

           INPUT
            pType               : esriSpeckleFilterType'''
        return super(ISpeckleFunctionArguments, self).put_FilterType(pType)
    def get_FilterType(self):
        '''Method ISpeckleFunctionArguments.get_FilterType

           OUTPUT
            pType               : esriSpeckleFilterType*'''
        return super(ISpeckleFunctionArguments, self).get_FilterType()
    def put_FilterSize(self, pSize):
        '''Method ISpeckleFunctionArguments.put_FilterSize

           INPUT
            pSize               : esriSpeckleFilterKernel'''
        return super(ISpeckleFunctionArguments, self).put_FilterSize(pSize)
    def get_FilterSize(self):
        '''Method ISpeckleFunctionArguments.get_FilterSize

           OUTPUT
            pSize               : esriSpeckleFilterKernel*'''
        return super(ISpeckleFunctionArguments, self).get_FilterSize()
    def put_NoiseModel(self, Type):
        '''Method ISpeckleFunctionArguments.put_NoiseModel

           INPUT
            Type                : esriSpeckleNoiseModel'''
        return super(ISpeckleFunctionArguments, self).put_NoiseModel(Type)
    def get_NoiseModel(self):
        '''Method ISpeckleFunctionArguments.get_NoiseModel

           OUTPUT
            Type                : esriSpeckleNoiseModel*'''
        return super(ISpeckleFunctionArguments, self).get_NoiseModel()
    def put_NoiseVariance(self, noiseVar):
        '''Method ISpeckleFunctionArguments.put_NoiseVariance

           INPUT
            noiseVar            : double'''
        return super(ISpeckleFunctionArguments, self).put_NoiseVariance(noiseVar)
    def get_NoiseVariance(self):
        '''Method ISpeckleFunctionArguments.get_NoiseVariance

           OUTPUT
            noiseVar            : double*'''
        return super(ISpeckleFunctionArguments, self).get_NoiseVariance()
    def put_AdditiveNoiseMean(self, addNoiseMean):
        '''Method ISpeckleFunctionArguments.put_AdditiveNoiseMean

           INPUT
            addNoiseMean        : double'''
        return super(ISpeckleFunctionArguments, self).put_AdditiveNoiseMean(addNoiseMean)
    def get_AdditiveNoiseMean(self):
        '''Method ISpeckleFunctionArguments.get_AdditiveNoiseMean

           OUTPUT
            addNoiseMean        : double*'''
        return super(ISpeckleFunctionArguments, self).get_AdditiveNoiseMean()
    def put_MultiplicativeNoiseMean(self, mulNoiseMean):
        '''Method ISpeckleFunctionArguments.put_MultiplicativeNoiseMean

           INPUT
            mulNoiseMean        : double'''
        return super(ISpeckleFunctionArguments, self).put_MultiplicativeNoiseMean(mulNoiseMean)
    def get_MultiplicativeNoiseMean(self):
        '''Method ISpeckleFunctionArguments.get_MultiplicativeNoiseMean

           OUTPUT
            mulNoiseMean        : double*'''
        return super(ISpeckleFunctionArguments, self).get_MultiplicativeNoiseMean()
    def put_NLooks(self, NLooks):
        '''Method ISpeckleFunctionArguments.put_NLooks

           INPUT
            NLooks              : long'''
        return super(ISpeckleFunctionArguments, self).put_NLooks(NLooks)
    def get_NLooks(self):
        '''Method ISpeckleFunctionArguments.get_NLooks

           OUTPUT
            NLooks              : long*'''
        return super(ISpeckleFunctionArguments, self).get_NLooks()
    def put_DampFactor(self, DampFactor):
        '''Method ISpeckleFunctionArguments.put_DampFactor

           INPUT
            DampFactor          : double'''
        return super(ISpeckleFunctionArguments, self).put_DampFactor(DampFactor)
    def get_DampFactor(self):
        '''Method ISpeckleFunctionArguments.get_DampFactor

           OUTPUT
            DampFactor          : double*'''
        return super(ISpeckleFunctionArguments, self).get_DampFactor()
    AdditiveNoiseMean = property(get_AdditiveNoiseMean, put_AdditiveNoiseMean, None)
    DampFactor = property(get_DampFactor, put_DampFactor, None)
    FilterSize = property(get_FilterSize, put_FilterSize, None)
    FilterType = property(get_FilterType, put_FilterType, None)
    MultiplicativeNoiseMean = property(get_MultiplicativeNoiseMean, put_MultiplicativeNoiseMean, None)
    NLooks = property(get_NLooks, put_NLooks, None)
    NoiseModel = property(get_NoiseModel, put_NoiseModel, None)
    NoiseVariance = property(get_NoiseVariance, put_NoiseVariance, None)
    Raster = property(get_Raster, putref_Raster, None)

class IRadarCalibrationFunctionArguments(_esriDataSourcesRaster.IRadarCalibrationFunctionArguments):
    _IID = uuid.UUID('7c3d23e7-0f17-4eaf-a44b-9e7a97352fbd')

    def __init__(self, *args, **kw):
        super(IRadarCalibrationFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IRadarCalibrationFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IRadarCalibrationFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IRadarCalibrationFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IRadarCalibrationFunctionArguments, self).putref_Raster(ppRaster)
    def put_CalibrationType(self, pType):
        '''Method IRadarCalibrationFunctionArguments.put_CalibrationType

           INPUT
            pType               : esriRadarCalibration'''
        return super(IRadarCalibrationFunctionArguments, self).put_CalibrationType(pType)
    def get_CalibrationType(self):
        '''Method IRadarCalibrationFunctionArguments.get_CalibrationType

           OUTPUT
            pType               : esriRadarCalibration*'''
        return super(IRadarCalibrationFunctionArguments, self).get_CalibrationType()
    CalibrationType = property(get_CalibrationType, put_CalibrationType, None)
    Raster = property(get_Raster, putref_Raster, None)

class IRasterFunctionTemplate(_esriDataSourcesRaster.IRasterFunctionTemplate):
    _IID = uuid.UUID('c395d08b-7fc8-4a61-ac3f-c114d690be52')

    def __init__(self, *args, **kw):
        super(IRasterFunctionTemplate, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Function(self):
        '''Method IRasterFunctionTemplate.get_Function

           OUTPUT
            ppFunction          : IRasterFunction**'''
        return super(IRasterFunctionTemplate, self).get_Function()
    def putref_Function(self, ppFunction):
        '''Method IRasterFunctionTemplate.putref_Function

           INPUT
            ppFunction          : IRasterFunction*'''
        return super(IRasterFunctionTemplate, self).putref_Function(ppFunction)
    def putref_Arguments(self, ppArgumets):
        '''Method IRasterFunctionTemplate.putref_Arguments

           INPUT
            ppArgumets          : IUnknown*'''
        return super(IRasterFunctionTemplate, self).putref_Arguments(ppArgumets)
    def get_Arguments(self):
        '''Method IRasterFunctionTemplate.get_Arguments

           OUTPUT
            ppArgumets          : IUnknown**'''
        return super(IRasterFunctionTemplate, self).get_Arguments()
    def get_Variables(self):
        '''Method IRasterFunctionTemplate.get_Variables

           OUTPUT
            ppVariables         : IArray**'''
        return super(IRasterFunctionTemplate, self).get_Variables()
    Arguments = property(get_Arguments, putref_Arguments, None)
    Function = property(get_Function, putref_Function, None)
    Variables = property(get_Variables, None, None)

class IRasterFunctionTemplate2(_esriDataSourcesRaster.IRasterFunctionTemplate2):
    _IID = uuid.UUID('e312d8af-1b60-482b-ae13-b8e111cfc894')

    def __init__(self, *args, **kw):
        super(IRasterFunctionTemplate2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Help(self):
        '''Method IRasterFunctionTemplate2.get_Help

           OUTPUT
            pHelp               : BSTR*'''
        return super(IRasterFunctionTemplate2, self).get_Help()
    def put_Help(self, pHelp):
        '''Method IRasterFunctionTemplate2.put_Help

           INPUT
            pHelp               : BSTR'''
        return super(IRasterFunctionTemplate2, self).put_Help(pHelp)
    def get_Properties(self):
        '''Method IRasterFunctionTemplate2.get_Properties

           OUTPUT
            pProperties         : IPropertySet**'''
        return super(IRasterFunctionTemplate2, self).get_Properties()
    def putref_Properties(self, pProperties):
        '''Method IRasterFunctionTemplate2.putref_Properties

           INPUT
            pProperties         : IPropertySet*'''
        return super(IRasterFunctionTemplate2, self).putref_Properties(pProperties)
    def FindMemberFunctionsByCLSID(self, rasterFunctionCLSID):
        '''Method IRasterFunctionTemplate2.FindMemberFunctionsByCLSID

           INPUT
            rasterFunctionCLSID : IUID*

           OUTPUT
            ppMatchingRasterFunctions: IArray**'''
        return super(IRasterFunctionTemplate2, self).FindMemberFunctionsByCLSID(rasterFunctionCLSID)
    def FindMemberFunctionsByName(self, rasterFunctionName):
        '''Method IRasterFunctionTemplate2.FindMemberFunctionsByName

           INPUT
            rasterFunctionName  : BSTR

           OUTPUT
            ppMatchingRasterFunctions: IArray**'''
        return super(IRasterFunctionTemplate2, self).FindMemberFunctionsByName(rasterFunctionName)
    def FindMemberFunctionsArgumentsByCLSID(self, functionArgumentsCLSID, ppMatchingFunctionArguments):
        '''Method IRasterFunctionTemplate2.FindMemberFunctionsArgumentsByCLSID

           INPUTS
            functionArgumentsCLSID: IUID*
            ppMatchingFunctionArguments: IArray**'''
        return super(IRasterFunctionTemplate2, self).FindMemberFunctionsArgumentsByCLSID(functionArgumentsCLSID, ppMatchingFunctionArguments)
    def get_Function(self):
        '''Method IRasterFunctionTemplate.get_Function (from IRasterFunctionTemplate)

           OUTPUT
            ppFunction          : IRasterFunction**'''
        return super(IRasterFunctionTemplate2, self).get_Function()
    def putref_Function(self, ppFunction):
        '''Method IRasterFunctionTemplate.putref_Function (from IRasterFunctionTemplate)

           INPUT
            ppFunction          : IRasterFunction*'''
        return super(IRasterFunctionTemplate2, self).putref_Function(ppFunction)
    def putref_Arguments(self, ppArgumets):
        '''Method IRasterFunctionTemplate.putref_Arguments (from IRasterFunctionTemplate)

           INPUT
            ppArgumets          : IUnknown*'''
        return super(IRasterFunctionTemplate2, self).putref_Arguments(ppArgumets)
    def get_Arguments(self):
        '''Method IRasterFunctionTemplate.get_Arguments (from IRasterFunctionTemplate)

           OUTPUT
            ppArgumets          : IUnknown**'''
        return super(IRasterFunctionTemplate2, self).get_Arguments()
    def get_Variables(self):
        '''Method IRasterFunctionTemplate.get_Variables (from IRasterFunctionTemplate)

           OUTPUT
            ppVariables         : IArray**'''
        return super(IRasterFunctionTemplate2, self).get_Variables()
    Arguments = property(get_Arguments, putref_Arguments, None)
    Function = property(get_Function, putref_Function, None)
    Help = property(get_Help, put_Help, None)
    Properties = property(get_Properties, putref_Properties, None)
    Variables = property(get_Variables, None, None)

class IRasterFunctionVariable(_esriDataSourcesRaster.IRasterFunctionVariable):
    _IID = uuid.UUID('bf661e16-879d-4b7e-8a05-96e2476eef17')

    def __init__(self, *args, **kw):
        super(IRasterFunctionVariable, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Name(self):
        '''Method IRasterFunctionVariable.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterFunctionVariable, self).get_Name()
    def put_Name(self, pName):
        '''Method IRasterFunctionVariable.put_Name

           INPUT
            pName               : BSTR'''
        return super(IRasterFunctionVariable, self).put_Name(pName)
    def get_Value(self):
        '''Method IRasterFunctionVariable.get_Value

           OUTPUT
            pValue              : VARIANT*'''
        return super(IRasterFunctionVariable, self).get_Value()
    def put_Value(self, pValue):
        '''Method IRasterFunctionVariable.put_Value

           INPUT
            pValue              : VARIANT'''
        return super(IRasterFunctionVariable, self).put_Value(pValue)
    def Resolve(self, pArgumentValues):
        '''Method IRasterFunctionVariable.Resolve

           INPUT
            pArgumentValues     : IUnknown*'''
        return super(IRasterFunctionVariable, self).Resolve(pArgumentValues)
    def put_Description(self, pDescription):
        '''Method IRasterFunctionVariable.put_Description

           INPUT
            pDescription        : BSTR'''
        return super(IRasterFunctionVariable, self).put_Description(pDescription)
    def get_Description(self):
        '''Method IRasterFunctionVariable.get_Description

           OUTPUT
            pDescription        : BSTR*'''
        return super(IRasterFunctionVariable, self).get_Description()
    def putref_Aliases(self, ppAliases):
        '''Method IRasterFunctionVariable.putref_Aliases

           INPUT
            ppAliases           : IStringArray*'''
        return super(IRasterFunctionVariable, self).putref_Aliases(ppAliases)
    def get_Aliases(self):
        '''Method IRasterFunctionVariable.get_Aliases

           OUTPUT
            ppAliases           : IStringArray**'''
        return super(IRasterFunctionVariable, self).get_Aliases()
    def put_IsDataset(self, pbIsDataset):
        '''Method IRasterFunctionVariable.put_IsDataset

           INPUT
            pbIsDataset         : VARIANT_BOOL'''
        return super(IRasterFunctionVariable, self).put_IsDataset(pbIsDataset)
    def get_IsDataset(self):
        '''Method IRasterFunctionVariable.get_IsDataset

           OUTPUT
            pbIsDataset         : VARIANT_BOOL*'''
        return super(IRasterFunctionVariable, self).get_IsDataset()
    Aliases = property(get_Aliases, putref_Aliases, None)
    Description = property(get_Description, put_Description, None)
    IsDataset = property(get_IsDataset, put_IsDataset, None)
    Name = property(get_Name, put_Name, None)
    Value = property(get_Value, put_Value, None)

class IClipFunctionArguments(_esriDataSourcesRaster.IClipFunctionArguments):
    _IID = uuid.UUID('6c38e640-980e-4076-9751-abdbdb87d4b3')

    def __init__(self, *args, **kw):
        super(IClipFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IClipFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IClipFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IClipFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IClipFunctionArguments, self).putref_Raster(ppRaster)
    def get_ClippingGeometry(self):
        '''Method IClipFunctionArguments.get_ClippingGeometry

           OUTPUT
            ppClippingGeometry  : IGeometry**'''
        return super(IClipFunctionArguments, self).get_ClippingGeometry()
    def putref_ClippingGeometry(self, ppClippingGeometry):
        '''Method IClipFunctionArguments.putref_ClippingGeometry

           INPUT
            ppClippingGeometry  : IGeometry*'''
        return super(IClipFunctionArguments, self).putref_ClippingGeometry(ppClippingGeometry)
    def get_ClippingType(self):
        '''Method IClipFunctionArguments.get_ClippingType

           OUTPUT
            pClippingType       : esriRasterClippingType*'''
        return super(IClipFunctionArguments, self).get_ClippingType()
    def put_ClippingType(self, pClippingType):
        '''Method IClipFunctionArguments.put_ClippingType

           INPUT
            pClippingType       : esriRasterClippingType'''
        return super(IClipFunctionArguments, self).put_ClippingType(pClippingType)
    def get_Extent(self):
        '''Method IClipFunctionArguments.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IClipFunctionArguments, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method IClipFunctionArguments.putref_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IClipFunctionArguments, self).putref_Extent(ppExtent)
    ClippingGeometry = property(get_ClippingGeometry, putref_ClippingGeometry, None)
    ClippingType = property(get_ClippingType, put_ClippingType, None)
    Extent = property(get_Extent, putref_Extent, None)
    Raster = property(get_Raster, putref_Raster, None)

class IColorspaceConversionFunctionArguments(_esriDataSourcesRaster.IColorspaceConversionFunctionArguments):
    _IID = uuid.UUID('30a52a27-cc15-4185-bff7-58c7b3c99195')

    def __init__(self, *args, **kw):
        super(IColorspaceConversionFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IColorspaceConversionFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IColorspaceConversionFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IColorspaceConversionFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IColorspaceConversionFunctionArguments, self).putref_Raster(ppRaster)
    def get_ConversionType(self):
        '''Method IColorspaceConversionFunctionArguments.get_ConversionType

           OUTPUT
            pConversionType     : esriColorspaceConversionType*'''
        return super(IColorspaceConversionFunctionArguments, self).get_ConversionType()
    def put_ConversionType(self, pConversionType):
        '''Method IColorspaceConversionFunctionArguments.put_ConversionType

           INPUT
            pConversionType     : esriColorspaceConversionType'''
        return super(IColorspaceConversionFunctionArguments, self).put_ConversionType(pConversionType)
    ConversionType = property(get_ConversionType, put_ConversionType, None)
    Raster = property(get_Raster, putref_Raster, None)

class IHillshadeFunctionArguments(_esriDataSourcesRaster.IHillshadeFunctionArguments):
    _IID = uuid.UUID('14a88f3b-6bee-4f29-940b-f0d30d241d0d')

    def __init__(self, *args, **kw):
        super(IHillshadeFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DEM(self):
        '''Method IHillshadeFunctionArguments.get_DEM

           OUTPUT
            ppDEM               : IUnknown**'''
        return super(IHillshadeFunctionArguments, self).get_DEM()
    def putref_DEM(self, ppDEM):
        '''Method IHillshadeFunctionArguments.putref_DEM

           INPUT
            ppDEM               : IUnknown*'''
        return super(IHillshadeFunctionArguments, self).putref_DEM(ppDEM)
    def get_Azimuth(self):
        '''Method IHillshadeFunctionArguments.get_Azimuth

           OUTPUT
            pAzimuth            : double*'''
        return super(IHillshadeFunctionArguments, self).get_Azimuth()
    def put_Azimuth(self, pAzimuth):
        '''Method IHillshadeFunctionArguments.put_Azimuth

           INPUT
            pAzimuth            : double'''
        return super(IHillshadeFunctionArguments, self).put_Azimuth(pAzimuth)
    def get_Altitude(self):
        '''Method IHillshadeFunctionArguments.get_Altitude

           OUTPUT
            pAltitude           : double*'''
        return super(IHillshadeFunctionArguments, self).get_Altitude()
    def put_Altitude(self, pAltitude):
        '''Method IHillshadeFunctionArguments.put_Altitude

           INPUT
            pAltitude           : double'''
        return super(IHillshadeFunctionArguments, self).put_Altitude(pAltitude)
    def get_ZFactor(self):
        '''Method IHillshadeFunctionArguments.get_ZFactor

           OUTPUT
            pZfactor            : double*'''
        return super(IHillshadeFunctionArguments, self).get_ZFactor()
    def put_ZFactor(self, pZfactor):
        '''Method IHillshadeFunctionArguments.put_ZFactor

           INPUT
            pZfactor            : double'''
        return super(IHillshadeFunctionArguments, self).put_ZFactor(pZfactor)
    Altitude = property(get_Altitude, put_Altitude, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    DEM = property(get_DEM, putref_DEM, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ISlopeScalingArguments(_esriDataSourcesRaster.ISlopeScalingArguments):
    _IID = uuid.UUID('b2a1643a-41cd-4b9d-a568-6ca85b7e7031')

    def __init__(self, *args, **kw):
        super(ISlopeScalingArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_PixelSizePower(self):
        '''Method ISlopeScalingArguments.get_PixelSizePower

           OUTPUT
            psPower             : double*'''
        return super(ISlopeScalingArguments, self).get_PixelSizePower()
    def put_PixelSizePower(self, psPower):
        '''Method ISlopeScalingArguments.put_PixelSizePower

           INPUT
            psPower             : double'''
        return super(ISlopeScalingArguments, self).put_PixelSizePower(psPower)
    def get_PixelSizeFactor(self):
        '''Method ISlopeScalingArguments.get_PixelSizeFactor

           OUTPUT
            psZFactor           : double*'''
        return super(ISlopeScalingArguments, self).get_PixelSizeFactor()
    def put_PixelSizeFactor(self, psZFactor):
        '''Method ISlopeScalingArguments.put_PixelSizeFactor

           INPUT
            psZFactor           : double'''
        return super(ISlopeScalingArguments, self).put_PixelSizeFactor(psZFactor)
    def get_ScalingType(self):
        '''Method ISlopeScalingArguments.get_ScalingType

           OUTPUT
            ScalingType         : esriSlopeType*'''
        return super(ISlopeScalingArguments, self).get_ScalingType()
    def put_ScalingType(self, ScalingType):
        '''Method ISlopeScalingArguments.put_ScalingType

           INPUT
            ScalingType         : esriSlopeType'''
        return super(ISlopeScalingArguments, self).put_ScalingType(ScalingType)
    def get_RemoveEdgeEffect(self):
        '''Method ISlopeScalingArguments.get_RemoveEdgeEffect

           OUTPUT
            pRemoveEdgeEffect   : VARIANT_BOOL*'''
        return super(ISlopeScalingArguments, self).get_RemoveEdgeEffect()
    def put_RemoveEdgeEffect(self, pRemoveEdgeEffect):
        '''Method ISlopeScalingArguments.put_RemoveEdgeEffect

           INPUT
            pRemoveEdgeEffect   : VARIANT_BOOL'''
        return super(ISlopeScalingArguments, self).put_RemoveEdgeEffect(pRemoveEdgeEffect)
    PixelSizeFactor = property(get_PixelSizeFactor, put_PixelSizeFactor, None)
    PixelSizePower = property(get_PixelSizePower, put_PixelSizePower, None)
    RemoveEdgeEffect = property(get_RemoveEdgeEffect, put_RemoveEdgeEffect, None)
    ScalingType = property(get_ScalingType, put_ScalingType, None)

class IReprojectFunctionArguments(_esriDataSourcesRaster.IReprojectFunctionArguments):
    _IID = uuid.UUID('13b37f70-95d1-4add-93b8-d4ca83b0af66')

    def __init__(self, *args, **kw):
        super(IReprojectFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IReprojectFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IReprojectFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IReprojectFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IReprojectFunctionArguments, self).putref_Raster(ppRaster)
    def get_SpatialReference(self):
        '''Method IReprojectFunctionArguments.get_SpatialReference

           OUTPUT
            ppSRS               : IUnknown**'''
        return super(IReprojectFunctionArguments, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSRS):
        '''Method IReprojectFunctionArguments.putref_SpatialReference

           INPUT
            ppSRS               : IUnknown*'''
        return super(IReprojectFunctionArguments, self).putref_SpatialReference(ppSRS)
    def get_XCellsize(self):
        '''Method IReprojectFunctionArguments.get_XCellsize

           OUTPUT
            pXCellsize          : double*'''
        return super(IReprojectFunctionArguments, self).get_XCellsize()
    def put_XCellsize(self, pXCellsize):
        '''Method IReprojectFunctionArguments.put_XCellsize

           INPUT
            pXCellsize          : double'''
        return super(IReprojectFunctionArguments, self).put_XCellsize(pXCellsize)
    def get_YCellsize(self):
        '''Method IReprojectFunctionArguments.get_YCellsize

           OUTPUT
            pYCellsize          : double*'''
        return super(IReprojectFunctionArguments, self).get_YCellsize()
    def put_YCellsize(self, pYCellsize):
        '''Method IReprojectFunctionArguments.put_YCellsize

           INPUT
            pYCellsize          : double'''
        return super(IReprojectFunctionArguments, self).put_YCellsize(pYCellsize)
    def get_XOrigin(self):
        '''Method IReprojectFunctionArguments.get_XOrigin

           OUTPUT
            pXOrigin            : double*'''
        return super(IReprojectFunctionArguments, self).get_XOrigin()
    def put_XOrigin(self, pXOrigin):
        '''Method IReprojectFunctionArguments.put_XOrigin

           INPUT
            pXOrigin            : double'''
        return super(IReprojectFunctionArguments, self).put_XOrigin(pXOrigin)
    def get_YOrigin(self):
        '''Method IReprojectFunctionArguments.get_YOrigin

           OUTPUT
            pYOrigin            : double*'''
        return super(IReprojectFunctionArguments, self).get_YOrigin()
    def put_YOrigin(self, pYOrigin):
        '''Method IReprojectFunctionArguments.put_YOrigin

           INPUT
            pYOrigin            : double'''
        return super(IReprojectFunctionArguments, self).put_YOrigin(pYOrigin)
    Raster = property(get_Raster, putref_Raster, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    XCellsize = property(get_XCellsize, put_XCellsize, None)
    XOrigin = property(get_XOrigin, put_XOrigin, None)
    YCellsize = property(get_YCellsize, put_YCellsize, None)
    YOrigin = property(get_YOrigin, put_YOrigin, None)

class IConstantFunctionArguments(_esriDataSourcesRaster.IConstantFunctionArguments):
    _IID = uuid.UUID('0346ad7c-02da-48d1-ba9a-ce8cdb31e2ab')

    def __init__(self, *args, **kw):
        super(IConstantFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_RasterInfo(self):
        '''Method IConstantFunctionArguments.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IConstantFunctionArguments, self).get_RasterInfo()
    def putref_RasterInfo(self, ppRasterInfo):
        '''Method IConstantFunctionArguments.putref_RasterInfo

           INPUT
            ppRasterInfo        : IRasterInfo*'''
        return super(IConstantFunctionArguments, self).putref_RasterInfo(ppRasterInfo)
    def get_Constant(self):
        '''Method IConstantFunctionArguments.get_Constant

           OUTPUT
            pValue              : VARIANT*'''
        return super(IConstantFunctionArguments, self).get_Constant()
    def put_Constant(self, pValue):
        '''Method IConstantFunctionArguments.put_Constant

           INPUT
            pValue              : VARIANT'''
        return super(IConstantFunctionArguments, self).put_Constant(pValue)
    def Init(self, pRaster, Value):
        '''Method IConstantFunctionArguments.Init

           INPUTS
            pRaster             : IRaster*
            Value               : VARIANT'''
        return super(IConstantFunctionArguments, self).Init(pRaster, Value)
    Constant = property(get_Constant, put_Constant, None)
    RasterInfo = property(get_RasterInfo, putref_RasterInfo, None)

class IConstantFunctionArguments2(_esriDataSourcesRaster.IConstantFunctionArguments2):
    _IID = uuid.UUID('4738fa2c-1e23-4920-9859-6a86808350db')

    def __init__(self, *args, **kw):
        super(IConstantFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MinColor(self):
        '''Method IConstantFunctionArguments2.get_MinColor

           OUTPUT
            pMinValue           : VARIANT*'''
        return super(IConstantFunctionArguments2, self).get_MinColor()
    def put_MinColor(self, pMinValue):
        '''Method IConstantFunctionArguments2.put_MinColor

           INPUT
            pMinValue           : VARIANT'''
        return super(IConstantFunctionArguments2, self).put_MinColor(pMinValue)
    def get_MaxColor(self):
        '''Method IConstantFunctionArguments2.get_MaxColor

           OUTPUT
            pMaxValue           : VARIANT*'''
        return super(IConstantFunctionArguments2, self).get_MaxColor()
    def put_MaxColor(self, pMaxValue):
        '''Method IConstantFunctionArguments2.put_MaxColor

           INPUT
            pMaxValue           : VARIANT'''
        return super(IConstantFunctionArguments2, self).put_MaxColor(pMaxValue)
    def get_Method(self):
        '''Method IConstantFunctionArguments2.get_Method

           OUTPUT
            pMethod             : esriRasterPaintMethod*'''
        return super(IConstantFunctionArguments2, self).get_Method()
    def put_Method(self, pMethod):
        '''Method IConstantFunctionArguments2.put_Method

           INPUT
            pMethod             : esriRasterPaintMethod'''
        return super(IConstantFunctionArguments2, self).put_Method(pMethod)
    def get_RasterInfo(self):
        '''Method IConstantFunctionArguments.get_RasterInfo (from IConstantFunctionArguments)

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IConstantFunctionArguments2, self).get_RasterInfo()
    def putref_RasterInfo(self, ppRasterInfo):
        '''Method IConstantFunctionArguments.putref_RasterInfo (from IConstantFunctionArguments)

           INPUT
            ppRasterInfo        : IRasterInfo*'''
        return super(IConstantFunctionArguments2, self).putref_RasterInfo(ppRasterInfo)
    def get_Constant(self):
        '''Method IConstantFunctionArguments.get_Constant (from IConstantFunctionArguments)

           OUTPUT
            pValue              : VARIANT*'''
        return super(IConstantFunctionArguments2, self).get_Constant()
    def put_Constant(self, pValue):
        '''Method IConstantFunctionArguments.put_Constant (from IConstantFunctionArguments)

           INPUT
            pValue              : VARIANT'''
        return super(IConstantFunctionArguments2, self).put_Constant(pValue)
    def Init(self, pRaster, Value):
        '''Method IConstantFunctionArguments.Init (from IConstantFunctionArguments)

           INPUTS
            pRaster             : IRaster*
            Value               : VARIANT'''
        return super(IConstantFunctionArguments2, self).Init(pRaster, Value)
    Constant = property(get_Constant, put_Constant, None)
    MaxColor = property(get_MaxColor, put_MaxColor, None)
    Method = property(get_Method, put_Method, None)
    MinColor = property(get_MinColor, put_MinColor, None)
    RasterInfo = property(get_RasterInfo, putref_RasterInfo, None)

class ISpectralConversionFunctionArguments(_esriDataSourcesRaster.ISpectralConversionFunctionArguments):
    _IID = uuid.UUID('28b79fd7-9ab2-45c5-97d5-02e2a1eed116')

    def __init__(self, *args, **kw):
        super(ISpectralConversionFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method ISpectralConversionFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(ISpectralConversionFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method ISpectralConversionFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(ISpectralConversionFunctionArguments, self).putref_Raster(ppRaster)
    def get_ConversionMatrix(self):
        '''Method ISpectralConversionFunctionArguments.get_ConversionMatrix

           OUTPUT
            ppMatrix            : IDoubleArray**'''
        return super(ISpectralConversionFunctionArguments, self).get_ConversionMatrix()
    def putref_ConversionMatrix(self, ppMatrix):
        '''Method ISpectralConversionFunctionArguments.putref_ConversionMatrix

           INPUT
            ppMatrix            : IDoubleArray*'''
        return super(ISpectralConversionFunctionArguments, self).putref_ConversionMatrix(ppMatrix)
    ConversionMatrix = property(get_ConversionMatrix, putref_ConversionMatrix, None)
    Raster = property(get_Raster, putref_Raster, None)

class ISpectralConversionFunctionArguments2(_esriDataSourcesRaster.ISpectralConversionFunctionArguments2):
    _IID = uuid.UUID('071550ce-88c6-4510-86f2-b074139decc1')

    def __init__(self, *args, **kw):
        super(ISpectralConversionFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IsPseudoColorOutput(self):
        '''Method ISpectralConversionFunctionArguments2.get_IsPseudoColorOutput

           OUTPUT
            pbIsPseudoColorOutput: VARIANT_BOOL*'''
        return super(ISpectralConversionFunctionArguments2, self).get_IsPseudoColorOutput()
    def put_IsPseudoColorOutput(self, pbIsPseudoColorOutput):
        '''Method ISpectralConversionFunctionArguments2.put_IsPseudoColorOutput

           INPUT
            pbIsPseudoColorOutput: VARIANT_BOOL'''
        return super(ISpectralConversionFunctionArguments2, self).put_IsPseudoColorOutput(pbIsPseudoColorOutput)
    def get_Raster(self):
        '''Method ISpectralConversionFunctionArguments.get_Raster (from ISpectralConversionFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(ISpectralConversionFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method ISpectralConversionFunctionArguments.putref_Raster (from ISpectralConversionFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(ISpectralConversionFunctionArguments2, self).putref_Raster(ppRaster)
    def get_ConversionMatrix(self):
        '''Method ISpectralConversionFunctionArguments.get_ConversionMatrix (from ISpectralConversionFunctionArguments)

           OUTPUT
            ppMatrix            : IDoubleArray**'''
        return super(ISpectralConversionFunctionArguments2, self).get_ConversionMatrix()
    def putref_ConversionMatrix(self, ppMatrix):
        '''Method ISpectralConversionFunctionArguments.putref_ConversionMatrix (from ISpectralConversionFunctionArguments)

           INPUT
            ppMatrix            : IDoubleArray*'''
        return super(ISpectralConversionFunctionArguments2, self).putref_ConversionMatrix(ppMatrix)
    ConversionMatrix = property(get_ConversionMatrix, putref_ConversionMatrix, None)
    IsPseudoColorOutput = property(get_IsPseudoColorOutput, put_IsPseudoColorOutput, None)
    Raster = property(get_Raster, putref_Raster, None)

class ISlopeFunctionArguments(_esriDataSourcesRaster.ISlopeFunctionArguments):
    _IID = uuid.UUID('afa7c443-cb8a-4263-8fbf-927b38edf1b8')

    def __init__(self, *args, **kw):
        super(ISlopeFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DEM(self):
        '''Method ISlopeFunctionArguments.get_DEM

           OUTPUT
            ppDEM               : IUnknown**'''
        return super(ISlopeFunctionArguments, self).get_DEM()
    def putref_DEM(self, ppDEM):
        '''Method ISlopeFunctionArguments.putref_DEM

           INPUT
            ppDEM               : IUnknown*'''
        return super(ISlopeFunctionArguments, self).putref_DEM(ppDEM)
    def get_ZFactor(self):
        '''Method ISlopeFunctionArguments.get_ZFactor

           OUTPUT
            pZfactor            : double*'''
        return super(ISlopeFunctionArguments, self).get_ZFactor()
    def put_ZFactor(self, pZfactor):
        '''Method ISlopeFunctionArguments.put_ZFactor

           INPUT
            pZfactor            : double'''
        return super(ISlopeFunctionArguments, self).put_ZFactor(pZfactor)
    DEM = property(get_DEM, putref_DEM, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ITrendFunctionArguments(_esriDataSourcesRaster.ITrendFunctionArguments):
    _IID = uuid.UUID('1b183727-8275-436c-9227-baeef6e04bfb')

    def __init__(self, *args, **kw):
        super(ITrendFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method ITrendFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(ITrendFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method ITrendFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(ITrendFunctionArguments, self).putref_Raster(ppRaster)
    def get_PlaneParameters(self):
        '''Method ITrendFunctionArguments.get_PlaneParameters

           OUTPUT
            ppParameters        : IDoubleArray**'''
        return super(ITrendFunctionArguments, self).get_PlaneParameters()
    def putref_PlaneParameters(self, ppParameters):
        '''Method ITrendFunctionArguments.putref_PlaneParameters

           INPUT
            ppParameters        : IDoubleArray*'''
        return super(ITrendFunctionArguments, self).putref_PlaneParameters(ppParameters)
    def get_CurveParameters(self):
        '''Method ITrendFunctionArguments.get_CurveParameters

           OUTPUT
            ppParameters        : IDoubleArray**'''
        return super(ITrendFunctionArguments, self).get_CurveParameters()
    def putref_CurveParameters(self, ppParameters):
        '''Method ITrendFunctionArguments.putref_CurveParameters

           INPUT
            ppParameters        : IDoubleArray*'''
        return super(ITrendFunctionArguments, self).putref_CurveParameters(ppParameters)
    CurveParameters = property(get_CurveParameters, putref_CurveParameters, None)
    PlaneParameters = property(get_PlaneParameters, putref_PlaneParameters, None)
    Raster = property(get_Raster, putref_Raster, None)

class IGrayscaleFunctionArguments(_esriDataSourcesRaster.IGrayscaleFunctionArguments):
    _IID = uuid.UUID('8ce85547-6ad1-4748-bc50-446fe423aea3')

    def __init__(self, *args, **kw):
        super(IGrayscaleFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IGrayscaleFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IGrayscaleFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IGrayscaleFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IGrayscaleFunctionArguments, self).putref_Raster(ppRaster)
    def get_ConversionParameters(self):
        '''Method IGrayscaleFunctionArguments.get_ConversionParameters

           OUTPUT
            ppParameters        : IDoubleArray**'''
        return super(IGrayscaleFunctionArguments, self).get_ConversionParameters()
    def putref_ConversionParameters(self, ppParameters):
        '''Method IGrayscaleFunctionArguments.putref_ConversionParameters

           INPUT
            ppParameters        : IDoubleArray*'''
        return super(IGrayscaleFunctionArguments, self).putref_ConversionParameters(ppParameters)
    ConversionParameters = property(get_ConversionParameters, putref_ConversionParameters, None)
    Raster = property(get_Raster, putref_Raster, None)

class IShadedReliefFunctionArguments(_esriDataSourcesRaster.IShadedReliefFunctionArguments):
    _IID = uuid.UUID('9604bbdb-cea1-4f79-aa62-cea3a0a50853')

    def __init__(self, *args, **kw):
        super(IShadedReliefFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IShadedReliefFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IShadedReliefFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IShadedReliefFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IShadedReliefFunctionArguments, self).putref_Raster(ppRaster)
    def get_RGB(self):
        '''Method IShadedReliefFunctionArguments.get_RGB

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IShadedReliefFunctionArguments, self).get_RGB()
    def putref_RGB(self, ppRaster):
        '''Method IShadedReliefFunctionArguments.putref_RGB

           INPUT
            ppRaster            : IUnknown*'''
        return super(IShadedReliefFunctionArguments, self).putref_RGB(ppRaster)
    def get_ColorRamp(self):
        '''Method IShadedReliefFunctionArguments.get_ColorRamp

           OUTPUT
            ppColorRamp         : IColorRamp**'''
        return super(IShadedReliefFunctionArguments, self).get_ColorRamp()
    def putref_ColorRamp(self, ppColorRamp):
        '''Method IShadedReliefFunctionArguments.putref_ColorRamp

           INPUT
            ppColorRamp         : IColorRamp*'''
        return super(IShadedReliefFunctionArguments, self).putref_ColorRamp(ppColorRamp)
    def get_Colormap(self):
        '''Method IShadedReliefFunctionArguments.get_Colormap

           OUTPUT
            ppColormap          : IRasterColormap**'''
        return super(IShadedReliefFunctionArguments, self).get_Colormap()
    def putref_Colormap(self, ppColormap):
        '''Method IShadedReliefFunctionArguments.putref_Colormap

           INPUT
            ppColormap          : IRasterColormap*'''
        return super(IShadedReliefFunctionArguments, self).putref_Colormap(ppColormap)
    def get_ZFactor(self):
        '''Method IShadedReliefFunctionArguments.get_ZFactor

           OUTPUT
            pZfactor            : double*'''
        return super(IShadedReliefFunctionArguments, self).get_ZFactor()
    def put_ZFactor(self, pZfactor):
        '''Method IShadedReliefFunctionArguments.put_ZFactor

           INPUT
            pZfactor            : double'''
        return super(IShadedReliefFunctionArguments, self).put_ZFactor(pZfactor)
    def get_Azimuth(self):
        '''Method IShadedReliefFunctionArguments.get_Azimuth

           OUTPUT
            pAzimuth            : double*'''
        return super(IShadedReliefFunctionArguments, self).get_Azimuth()
    def put_Azimuth(self, pAzimuth):
        '''Method IShadedReliefFunctionArguments.put_Azimuth

           INPUT
            pAzimuth            : double'''
        return super(IShadedReliefFunctionArguments, self).put_Azimuth(pAzimuth)
    def get_Altitude(self):
        '''Method IShadedReliefFunctionArguments.get_Altitude

           OUTPUT
            pAltitude           : double*'''
        return super(IShadedReliefFunctionArguments, self).get_Altitude()
    def put_Altitude(self, pAltitude):
        '''Method IShadedReliefFunctionArguments.put_Altitude

           INPUT
            pAltitude           : double'''
        return super(IShadedReliefFunctionArguments, self).put_Altitude(pAltitude)
    Altitude = property(get_Altitude, put_Altitude, None)
    Azimuth = property(get_Azimuth, put_Azimuth, None)
    ColorRamp = property(get_ColorRamp, putref_ColorRamp, None)
    Colormap = property(get_Colormap, putref_Colormap, None)
    RGB = property(get_RGB, putref_RGB, None)
    Raster = property(get_Raster, putref_Raster, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class IRasterInfoFunctionArguments(_esriDataSourcesRaster.IRasterInfoFunctionArguments):
    _IID = uuid.UUID('43cd7ad2-77fd-4d83-a95b-4f015fcb9e87')

    def __init__(self, *args, **kw):
        super(IRasterInfoFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IRasterInfoFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IRasterInfoFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IRasterInfoFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IRasterInfoFunctionArguments, self).putref_Raster(ppRaster)
    def get_RasterInfo(self):
        '''Method IRasterInfoFunctionArguments.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IRasterInfoFunctionArguments, self).get_RasterInfo()
    def putref_RasterInfo(self, ppRasterInfo):
        '''Method IRasterInfoFunctionArguments.putref_RasterInfo

           INPUT
            ppRasterInfo        : IRasterInfo*'''
        return super(IRasterInfoFunctionArguments, self).putref_RasterInfo(ppRasterInfo)
    def get_Caching(self):
        '''Method IRasterInfoFunctionArguments.get_Caching

           OUTPUT
            pCaching            : VARIANT_BOOL*'''
        return super(IRasterInfoFunctionArguments, self).get_Caching()
    def put_Caching(self, pCaching):
        '''Method IRasterInfoFunctionArguments.put_Caching

           INPUT
            pCaching            : VARIANT_BOOL'''
        return super(IRasterInfoFunctionArguments, self).put_Caching(pCaching)
    Caching = property(get_Caching, put_Caching, None)
    Raster = property(get_Raster, putref_Raster, None)
    RasterInfo = property(get_RasterInfo, putref_RasterInfo, None)

class IMaskFunctionArguments(_esriDataSourcesRaster.IMaskFunctionArguments):
    _IID = uuid.UUID('0ceaeca7-5468-4124-b362-f65c7a49bccb')

    def __init__(self, *args, **kw):
        super(IMaskFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IMaskFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IMaskFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IMaskFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IMaskFunctionArguments, self).putref_Raster(ppRaster)
    def get_NoDataValues(self):
        '''Method IMaskFunctionArguments.get_NoDataValues

           OUTPUT
            ppValues            : IStringArray**'''
        return super(IMaskFunctionArguments, self).get_NoDataValues()
    def putref_NoDataValues(self, ppValues):
        '''Method IMaskFunctionArguments.putref_NoDataValues

           INPUT
            ppValues            : IStringArray*'''
        return super(IMaskFunctionArguments, self).putref_NoDataValues(ppValues)
    def get_IncludedRanges(self):
        '''Method IMaskFunctionArguments.get_IncludedRanges

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IMaskFunctionArguments, self).get_IncludedRanges()
    def putref_IncludedRanges(self, ppRanges):
        '''Method IMaskFunctionArguments.putref_IncludedRanges

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IMaskFunctionArguments, self).putref_IncludedRanges(ppRanges)
    IncludedRanges = property(get_IncludedRanges, putref_IncludedRanges, None)
    NoDataValues = property(get_NoDataValues, putref_NoDataValues, None)
    Raster = property(get_Raster, putref_Raster, None)

class IMaskFunctionArguments2(_esriDataSourcesRaster.IMaskFunctionArguments2):
    _IID = uuid.UUID('d726fd4b-bf1e-4447-ab48-4e357ef6f134')

    def __init__(self, *args, **kw):
        super(IMaskFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NoDataInterpretation(self):
        '''Method IMaskFunctionArguments2.get_NoDataInterpretation

           OUTPUT
            pNoDataInterpretation: esriNoDataInterpretation*'''
        return super(IMaskFunctionArguments2, self).get_NoDataInterpretation()
    def put_NoDataInterpretation(self, pNoDataInterpretation):
        '''Method IMaskFunctionArguments2.put_NoDataInterpretation

           INPUT
            pNoDataInterpretation: esriNoDataInterpretation'''
        return super(IMaskFunctionArguments2, self).put_NoDataInterpretation(pNoDataInterpretation)
    def get_Raster(self):
        '''Method IMaskFunctionArguments.get_Raster (from IMaskFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IMaskFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IMaskFunctionArguments.putref_Raster (from IMaskFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(IMaskFunctionArguments2, self).putref_Raster(ppRaster)
    def get_NoDataValues(self):
        '''Method IMaskFunctionArguments.get_NoDataValues (from IMaskFunctionArguments)

           OUTPUT
            ppValues            : IStringArray**'''
        return super(IMaskFunctionArguments2, self).get_NoDataValues()
    def putref_NoDataValues(self, ppValues):
        '''Method IMaskFunctionArguments.putref_NoDataValues (from IMaskFunctionArguments)

           INPUT
            ppValues            : IStringArray*'''
        return super(IMaskFunctionArguments2, self).putref_NoDataValues(ppValues)
    def get_IncludedRanges(self):
        '''Method IMaskFunctionArguments.get_IncludedRanges (from IMaskFunctionArguments)

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IMaskFunctionArguments2, self).get_IncludedRanges()
    def putref_IncludedRanges(self, ppRanges):
        '''Method IMaskFunctionArguments.putref_IncludedRanges (from IMaskFunctionArguments)

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IMaskFunctionArguments2, self).putref_IncludedRanges(ppRanges)
    IncludedRanges = property(get_IncludedRanges, putref_IncludedRanges, None)
    NoDataInterpretation = property(get_NoDataInterpretation, put_NoDataInterpretation, None)
    NoDataValues = property(get_NoDataValues, putref_NoDataValues, None)
    Raster = property(get_Raster, putref_Raster, None)

class ISAIFunctionArguments(_esriDataSourcesRaster.ISAIFunctionArguments):
    _IID = uuid.UUID('b1b58723-1fe1-4158-8afe-a77ec8ec8785')

    def __init__(self, *args, **kw):
        super(ISAIFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_DEM(self):
        '''Method ISAIFunctionArguments.get_DEM

           OUTPUT
            ppDEM               : IUnknown**'''
        return super(ISAIFunctionArguments, self).get_DEM()
    def putref_DEM(self, ppDEM):
        '''Method ISAIFunctionArguments.putref_DEM

           INPUT
            ppDEM               : IUnknown*'''
        return super(ISAIFunctionArguments, self).putref_DEM(ppDEM)
    def get_ZFactor(self):
        '''Method ISAIFunctionArguments.get_ZFactor

           OUTPUT
            pZfactor            : double*'''
        return super(ISAIFunctionArguments, self).get_ZFactor()
    def put_ZFactor(self, pZfactor):
        '''Method ISAIFunctionArguments.put_ZFactor

           INPUT
            pZfactor            : double'''
        return super(ISAIFunctionArguments, self).put_ZFactor(pZfactor)
    DEM = property(get_DEM, putref_DEM, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class IScalar(_esriDataSourcesRaster.IScalar):
    _IID = uuid.UUID('3f1df485-3892-4ee3-bc03-403c63460005')

    def __init__(self, *args, **kw):
        super(IScalar, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Value(self):
        '''Method IScalar.get_Value

           OUTPUT
            pValue              : VARIANT*'''
        return super(IScalar, self).get_Value()
    def put_Value(self, pValue):
        '''Method IScalar.put_Value

           INPUT
            pValue              : VARIANT'''
        return super(IScalar, self).put_Value(pValue)
    Value = property(get_Value, put_Value, None)

class IMosaicRastersFunctionArguments(_esriDataSourcesRaster.IMosaicRastersFunctionArguments):
    _IID = uuid.UUID('c67e338b-bdc7-4f41-9caa-854871c2be85')

    def __init__(self, *args, **kw):
        super(IMosaicRastersFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Rasters(self):
        '''Method IMosaicRastersFunctionArguments.get_Rasters

           OUTPUT
            ppRasters           : IUnknown**'''
        return super(IMosaicRastersFunctionArguments, self).get_Rasters()
    def putref_Rasters(self, ppRasters):
        '''Method IMosaicRastersFunctionArguments.putref_Rasters

           INPUT
            ppRasters           : IUnknown*'''
        return super(IMosaicRastersFunctionArguments, self).putref_Rasters(ppRasters)
    def get_MosaicType(self):
        '''Method IMosaicRastersFunctionArguments.get_MosaicType

           OUTPUT
            pMosaicType         : rstMosaicOperatorType*'''
        return super(IMosaicRastersFunctionArguments, self).get_MosaicType()
    def put_MosaicType(self, pMosaicType):
        '''Method IMosaicRastersFunctionArguments.put_MosaicType

           INPUT
            pMosaicType         : rstMosaicOperatorType'''
        return super(IMosaicRastersFunctionArguments, self).put_MosaicType(pMosaicType)
    MosaicType = property(get_MosaicType, put_MosaicType, None)
    Rasters = property(get_Rasters, putref_Rasters, None)

class IMergeRastersFunctionArguments(_esriDataSourcesRaster.IMergeRastersFunctionArguments):
    _IID = uuid.UUID('8223c812-31c2-4bfd-8c4e-d8e4d53f6a94')

    def __init__(self, *args, **kw):
        super(IMergeRastersFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Rasters(self):
        '''Method IMergeRastersFunctionArguments.get_Rasters

           OUTPUT
            ppRasters           : IUnknown**'''
        return super(IMergeRastersFunctionArguments, self).get_Rasters()
    def putref_Rasters(self, ppRasters):
        '''Method IMergeRastersFunctionArguments.putref_Rasters

           INPUT
            ppRasters           : IUnknown*'''
        return super(IMergeRastersFunctionArguments, self).putref_Rasters(ppRasters)
    def get_Footprints(self):
        '''Method IMergeRastersFunctionArguments.get_Footprints

           OUTPUT
            ppFootprintGeometries: IUnknown**'''
        return super(IMergeRastersFunctionArguments, self).get_Footprints()
    def putref_Footprints(self, ppFootprintGeometries):
        '''Method IMergeRastersFunctionArguments.putref_Footprints

           INPUT
            ppFootprintGeometries: IUnknown*'''
        return super(IMergeRastersFunctionArguments, self).putref_Footprints(ppFootprintGeometries)
    Footprints = property(get_Footprints, putref_Footprints, None)
    Rasters = property(get_Rasters, putref_Rasters, None)

class IFootprintFunctionArguments(_esriDataSourcesRaster.IFootprintFunctionArguments):
    _IID = uuid.UUID('8cece0c4-30f2-479b-97f0-3c0afb10fbe5')

    def __init__(self, *args, **kw):
        super(IFootprintFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IFootprintFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IFootprintFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IFootprintFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IFootprintFunctionArguments, self).putref_Raster(ppRaster)
    def get_IncludedRanges(self):
        '''Method IFootprintFunctionArguments.get_IncludedRanges

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IFootprintFunctionArguments, self).get_IncludedRanges()
    def putref_IncludedRanges(self, ppRanges):
        '''Method IFootprintFunctionArguments.putref_IncludedRanges

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IFootprintFunctionArguments, self).putref_IncludedRanges(ppRanges)
    IncludedRanges = property(get_IncludedRanges, putref_IncludedRanges, None)
    Raster = property(get_Raster, putref_Raster, None)

class INDVIFunctionArguments(_esriDataSourcesRaster.INDVIFunctionArguments):
    _IID = uuid.UUID('b8c15ba4-ed8c-4e85-9166-f4f149cc3170')

    def __init__(self, *args, **kw):
        super(INDVIFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method INDVIFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(INDVIFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method INDVIFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(INDVIFunctionArguments, self).putref_Raster(ppRaster)
    def get_VisibleBandID(self):
        '''Method INDVIFunctionArguments.get_VisibleBandID

           OUTPUT
            pVisibleBandID      : long*'''
        return super(INDVIFunctionArguments, self).get_VisibleBandID()
    def put_VisibleBandID(self, pVisibleBandID):
        '''Method INDVIFunctionArguments.put_VisibleBandID

           INPUT
            pVisibleBandID      : long'''
        return super(INDVIFunctionArguments, self).put_VisibleBandID(pVisibleBandID)
    def get_InfraredBandID(self):
        '''Method INDVIFunctionArguments.get_InfraredBandID

           OUTPUT
            pInfraredBandID     : long*'''
        return super(INDVIFunctionArguments, self).get_InfraredBandID()
    def put_InfraredBandID(self, pInfraredBandID):
        '''Method INDVIFunctionArguments.put_InfraredBandID

           INPUT
            pInfraredBandID     : long'''
        return super(INDVIFunctionArguments, self).put_InfraredBandID(pInfraredBandID)
    InfraredBandID = property(get_InfraredBandID, put_InfraredBandID, None)
    Raster = property(get_Raster, putref_Raster, None)
    VisibleBandID = property(get_VisibleBandID, put_VisibleBandID, None)

class INDVIFunctionArguments2(_esriDataSourcesRaster.INDVIFunctionArguments2):
    _IID = uuid.UUID('191462d1-d3f7-460c-9508-a5e1268e3d5f')

    def __init__(self, *args, **kw):
        super(INDVIFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_MissingBandAction(self):
        '''Method INDVIFunctionArguments2.get_MissingBandAction

           OUTPUT
            pMissingBandAction  : esriMissingBandAction*'''
        return super(INDVIFunctionArguments2, self).get_MissingBandAction()
    def put_MissingBandAction(self, pMissingBandAction):
        '''Method INDVIFunctionArguments2.put_MissingBandAction

           INPUT
            pMissingBandAction  : esriMissingBandAction'''
        return super(INDVIFunctionArguments2, self).put_MissingBandAction(pMissingBandAction)
    def get_WavelengthMatchTolerance(self):
        '''Method INDVIFunctionArguments2.get_WavelengthMatchTolerance

           OUTPUT
            pWavelengthMatchTolerance: double*'''
        return super(INDVIFunctionArguments2, self).get_WavelengthMatchTolerance()
    def put_WavelengthMatchTolerance(self, pWavelengthMatchTolerance):
        '''Method INDVIFunctionArguments2.put_WavelengthMatchTolerance

           INPUT
            pWavelengthMatchTolerance: double'''
        return super(INDVIFunctionArguments2, self).put_WavelengthMatchTolerance(pWavelengthMatchTolerance)
    def get_VisibleBandName(self):
        '''Method INDVIFunctionArguments2.get_VisibleBandName

           OUTPUT
            pVisibleBandName    : BSTR*'''
        return super(INDVIFunctionArguments2, self).get_VisibleBandName()
    def put_VisibleBandName(self, pVisibleBandName):
        '''Method INDVIFunctionArguments2.put_VisibleBandName

           INPUT
            pVisibleBandName    : BSTR'''
        return super(INDVIFunctionArguments2, self).put_VisibleBandName(pVisibleBandName)
    def get_InfraredBandName(self):
        '''Method INDVIFunctionArguments2.get_InfraredBandName

           OUTPUT
            pInfraredBandName   : BSTR*'''
        return super(INDVIFunctionArguments2, self).get_InfraredBandName()
    def put_InfraredBandName(self, pInfraredBandName):
        '''Method INDVIFunctionArguments2.put_InfraredBandName

           INPUT
            pInfraredBandName   : BSTR'''
        return super(INDVIFunctionArguments2, self).put_InfraredBandName(pInfraredBandName)
    def get_VisibleBandWavelength(self):
        '''Method INDVIFunctionArguments2.get_VisibleBandWavelength

           OUTPUT
            pVisibleBandWavelength: double*'''
        return super(INDVIFunctionArguments2, self).get_VisibleBandWavelength()
    def put_VisibleBandWavelength(self, pVisibleBandWavelength):
        '''Method INDVIFunctionArguments2.put_VisibleBandWavelength

           INPUT
            pVisibleBandWavelength: double'''
        return super(INDVIFunctionArguments2, self).put_VisibleBandWavelength(pVisibleBandWavelength)
    def get_InfraredBandWavelength(self):
        '''Method INDVIFunctionArguments2.get_InfraredBandWavelength

           OUTPUT
            pInfraredBandWavelength: double*'''
        return super(INDVIFunctionArguments2, self).get_InfraredBandWavelength()
    def put_InfraredBandWavelength(self, pInfraredBandWavelength):
        '''Method INDVIFunctionArguments2.put_InfraredBandWavelength

           INPUT
            pInfraredBandWavelength: double'''
        return super(INDVIFunctionArguments2, self).put_InfraredBandWavelength(pInfraredBandWavelength)
    def get_Raster(self):
        '''Method INDVIFunctionArguments.get_Raster (from INDVIFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(INDVIFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method INDVIFunctionArguments.putref_Raster (from INDVIFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(INDVIFunctionArguments2, self).putref_Raster(ppRaster)
    def get_VisibleBandID(self):
        '''Method INDVIFunctionArguments.get_VisibleBandID (from INDVIFunctionArguments)

           OUTPUT
            pVisibleBandID      : long*'''
        return super(INDVIFunctionArguments2, self).get_VisibleBandID()
    def put_VisibleBandID(self, pVisibleBandID):
        '''Method INDVIFunctionArguments.put_VisibleBandID (from INDVIFunctionArguments)

           INPUT
            pVisibleBandID      : long'''
        return super(INDVIFunctionArguments2, self).put_VisibleBandID(pVisibleBandID)
    def get_InfraredBandID(self):
        '''Method INDVIFunctionArguments.get_InfraredBandID (from INDVIFunctionArguments)

           OUTPUT
            pInfraredBandID     : long*'''
        return super(INDVIFunctionArguments2, self).get_InfraredBandID()
    def put_InfraredBandID(self, pInfraredBandID):
        '''Method INDVIFunctionArguments.put_InfraredBandID (from INDVIFunctionArguments)

           INPUT
            pInfraredBandID     : long'''
        return super(INDVIFunctionArguments2, self).put_InfraredBandID(pInfraredBandID)
    InfraredBandID = property(get_InfraredBandID, put_InfraredBandID, None)
    InfraredBandName = property(get_InfraredBandName, put_InfraredBandName, None)
    InfraredBandWavelength = property(get_InfraredBandWavelength, put_InfraredBandWavelength, None)
    MissingBandAction = property(get_MissingBandAction, put_MissingBandAction, None)
    Raster = property(get_Raster, putref_Raster, None)
    VisibleBandID = property(get_VisibleBandID, put_VisibleBandID, None)
    VisibleBandName = property(get_VisibleBandName, put_VisibleBandName, None)
    VisibleBandWavelength = property(get_VisibleBandWavelength, put_VisibleBandWavelength, None)
    WavelengthMatchTolerance = property(get_WavelengthMatchTolerance, put_WavelengthMatchTolerance, None)

class IExcludedAreaFunctionArguments(_esriDataSourcesRaster.IExcludedAreaFunctionArguments):
    _IID = uuid.UUID('dfff1d7c-bee4-4bf3-8781-f6092817fa98')

    def __init__(self, *args, **kw):
        super(IExcludedAreaFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IExcludedAreaFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IExcludedAreaFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IExcludedAreaFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IExcludedAreaFunctionArguments, self).putref_Raster(ppRaster)
    def get_WhiteThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_WhiteThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_WhiteThreshold()
    def put_WhiteThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_WhiteThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_WhiteThreshold(pValue)
    def get_BlackThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_BlackThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_BlackThreshold()
    def put_BlackThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_BlackThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_BlackThreshold(pValue)
    def get_RedThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_RedThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_RedThreshold()
    def put_RedThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_RedThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_RedThreshold(pValue)
    def get_GreenThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_GreenThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_GreenThreshold()
    def put_GreenThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_GreenThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_GreenThreshold(pValue)
    def get_BlueThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_BlueThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_BlueThreshold()
    def put_BlueThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_BlueThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_BlueThreshold(pValue)
    def get_CyanThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_CyanThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_CyanThreshold()
    def put_CyanThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_CyanThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_CyanThreshold(pValue)
    def get_MagitaThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_MagitaThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_MagitaThreshold()
    def put_MagitaThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_MagitaThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_MagitaThreshold(pValue)
    def get_YellowThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_YellowThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_YellowThreshold()
    def put_YellowThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_YellowThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_YellowThreshold(pValue)
    def get_LowHistogramThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_LowHistogramThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_LowHistogramThreshold()
    def put_LowHistogramThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_LowHistogramThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_LowHistogramThreshold(pValue)
    def get_HighHistogramThreshold(self):
        '''Method IExcludedAreaFunctionArguments.get_HighHistogramThreshold

           OUTPUT
            pValue              : double*'''
        return super(IExcludedAreaFunctionArguments, self).get_HighHistogramThreshold()
    def put_HighHistogramThreshold(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_HighHistogramThreshold

           INPUT
            pValue              : double'''
        return super(IExcludedAreaFunctionArguments, self).put_HighHistogramThreshold(pValue)
    def get_PixelBitDepth(self):
        '''Method IExcludedAreaFunctionArguments.get_PixelBitDepth

           OUTPUT
            pValue              : long*'''
        return super(IExcludedAreaFunctionArguments, self).get_PixelBitDepth()
    def put_PixelBitDepth(self, pValue):
        '''Method IExcludedAreaFunctionArguments.put_PixelBitDepth

           INPUT
            pValue              : long'''
        return super(IExcludedAreaFunctionArguments, self).put_PixelBitDepth(pValue)
    BlackThreshold = property(get_BlackThreshold, put_BlackThreshold, None)
    BlueThreshold = property(get_BlueThreshold, put_BlueThreshold, None)
    CyanThreshold = property(get_CyanThreshold, put_CyanThreshold, None)
    GreenThreshold = property(get_GreenThreshold, put_GreenThreshold, None)
    HighHistogramThreshold = property(get_HighHistogramThreshold, put_HighHistogramThreshold, None)
    LowHistogramThreshold = property(get_LowHistogramThreshold, put_LowHistogramThreshold, None)
    MagitaThreshold = property(get_MagitaThreshold, put_MagitaThreshold, None)
    PixelBitDepth = property(get_PixelBitDepth, put_PixelBitDepth, None)
    Raster = property(get_Raster, putref_Raster, None)
    RedThreshold = property(get_RedThreshold, put_RedThreshold, None)
    WhiteThreshold = property(get_WhiteThreshold, put_WhiteThreshold, None)
    YellowThreshold = property(get_YellowThreshold, put_YellowThreshold, None)

class IRemapFunctionArguments(_esriDataSourcesRaster.IRemapFunctionArguments):
    _IID = uuid.UUID('6997f806-48be-4f4b-afcc-f2d765541cdd')

    def __init__(self, *args, **kw):
        super(IRemapFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IRemapFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IRemapFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IRemapFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IRemapFunctionArguments, self).putref_Raster(ppRaster)
    def get_AllowUnmatched(self):
        '''Method IRemapFunctionArguments.get_AllowUnmatched

           OUTPUT
            pbAllowUnmatched    : VARIANT_BOOL*'''
        return super(IRemapFunctionArguments, self).get_AllowUnmatched()
    def put_AllowUnmatched(self, pbAllowUnmatched):
        '''Method IRemapFunctionArguments.put_AllowUnmatched

           INPUT
            pbAllowUnmatched    : VARIANT_BOOL'''
        return super(IRemapFunctionArguments, self).put_AllowUnmatched(pbAllowUnmatched)
    def get_UseTable(self):
        '''Method IRemapFunctionArguments.get_UseTable

           OUTPUT
            pbUseTable          : VARIANT_BOOL*'''
        return super(IRemapFunctionArguments, self).get_UseTable()
    def put_UseTable(self, pbUseTable):
        '''Method IRemapFunctionArguments.put_UseTable

           INPUT
            pbUseTable          : VARIANT_BOOL'''
        return super(IRemapFunctionArguments, self).put_UseTable(pbUseTable)
    def get_InputField(self):
        '''Method IRemapFunctionArguments.get_InputField

           OUTPUT
            pInputField         : BSTR*'''
        return super(IRemapFunctionArguments, self).get_InputField()
    def put_InputField(self, pInputField):
        '''Method IRemapFunctionArguments.put_InputField

           INPUT
            pInputField         : BSTR'''
        return super(IRemapFunctionArguments, self).put_InputField(pInputField)
    def get_OutputField(self):
        '''Method IRemapFunctionArguments.get_OutputField

           OUTPUT
            pOutputField        : BSTR*'''
        return super(IRemapFunctionArguments, self).get_OutputField()
    def put_OutputField(self, pOutputField):
        '''Method IRemapFunctionArguments.put_OutputField

           INPUT
            pOutputField        : BSTR'''
        return super(IRemapFunctionArguments, self).put_OutputField(pOutputField)
    def get_Table(self):
        '''Method IRemapFunctionArguments.get_Table

           OUTPUT
            ppTable             : ITable**'''
        return super(IRemapFunctionArguments, self).get_Table()
    def putref_Table(self, ppTable):
        '''Method IRemapFunctionArguments.putref_Table

           INPUT
            ppTable             : ITable*'''
        return super(IRemapFunctionArguments, self).putref_Table(ppTable)
    def get_InputRanges(self):
        '''Method IRemapFunctionArguments.get_InputRanges

           OUTPUT
            ppInputRanges       : IDoubleArray**'''
        return super(IRemapFunctionArguments, self).get_InputRanges()
    def putref_InputRanges(self, ppInputRanges):
        '''Method IRemapFunctionArguments.putref_InputRanges

           INPUT
            ppInputRanges       : IDoubleArray*'''
        return super(IRemapFunctionArguments, self).putref_InputRanges(ppInputRanges)
    def get_OutputValues(self):
        '''Method IRemapFunctionArguments.get_OutputValues

           OUTPUT
            ppOutputValues      : IDoubleArray**'''
        return super(IRemapFunctionArguments, self).get_OutputValues()
    def putref_OutputValues(self, ppOutputValues):
        '''Method IRemapFunctionArguments.putref_OutputValues

           INPUT
            ppOutputValues      : IDoubleArray*'''
        return super(IRemapFunctionArguments, self).putref_OutputValues(ppOutputValues)
    def get_NoDataRanges(self):
        '''Method IRemapFunctionArguments.get_NoDataRanges

           OUTPUT
            ppNoDataRanges      : IDoubleArray**'''
        return super(IRemapFunctionArguments, self).get_NoDataRanges()
    def putref_NoDataRanges(self, ppNoDataRanges):
        '''Method IRemapFunctionArguments.putref_NoDataRanges

           INPUT
            ppNoDataRanges      : IDoubleArray*'''
        return super(IRemapFunctionArguments, self).putref_NoDataRanges(ppNoDataRanges)
    AllowUnmatched = property(get_AllowUnmatched, put_AllowUnmatched, None)
    InputField = property(get_InputField, put_InputField, None)
    InputRanges = property(get_InputRanges, putref_InputRanges, None)
    NoDataRanges = property(get_NoDataRanges, putref_NoDataRanges, None)
    OutputField = property(get_OutputField, put_OutputField, None)
    OutputValues = property(get_OutputValues, putref_OutputValues, None)
    Raster = property(get_Raster, putref_Raster, None)
    Table = property(get_Table, putref_Table, None)
    UseTable = property(get_UseTable, put_UseTable, None)

class ITableFunctionArguments(_esriDataSourcesRaster.ITableFunctionArguments):
    _IID = uuid.UUID('02e11ca1-fa17-4be1-a31a-c7c91dbd031a')

    def __init__(self, *args, **kw):
        super(ITableFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method ITableFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(ITableFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method ITableFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(ITableFunctionArguments, self).putref_Raster(ppRaster)
    def get_AttributeTable(self):
        '''Method ITableFunctionArguments.get_AttributeTable

           OUTPUT
            ppRAT               : IUnknown**'''
        return super(ITableFunctionArguments, self).get_AttributeTable()
    def putref_AttributeTable(self, ppRAT):
        '''Method ITableFunctionArguments.putref_AttributeTable

           INPUT
            ppRAT               : IUnknown*'''
        return super(ITableFunctionArguments, self).putref_AttributeTable(ppRAT)
    AttributeTable = property(get_AttributeTable, putref_AttributeTable, None)
    Raster = property(get_Raster, putref_Raster, None)

class IBandArithmeticFunctionArguments(_esriDataSourcesRaster.IBandArithmeticFunctionArguments):
    _IID = uuid.UUID('9f61ee8e-8b7f-43ed-b59a-3d866bdf3f10')

    def __init__(self, *args, **kw):
        super(IBandArithmeticFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IBandArithmeticFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IBandArithmeticFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IBandArithmeticFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IBandArithmeticFunctionArguments, self).putref_Raster(ppRaster)
    def get_Method(self):
        '''Method IBandArithmeticFunctionArguments.get_Method

           OUTPUT
            pBandArithmeticMethod: esriRasterBandArithmeticMethod*'''
        return super(IBandArithmeticFunctionArguments, self).get_Method()
    def put_Method(self, pBandArithmeticMethod):
        '''Method IBandArithmeticFunctionArguments.put_Method

           INPUT
            pBandArithmeticMethod: esriRasterBandArithmeticMethod'''
        return super(IBandArithmeticFunctionArguments, self).put_Method(pBandArithmeticMethod)
    def get_BandIndexes(self):
        '''Method IBandArithmeticFunctionArguments.get_BandIndexes

           OUTPUT
            pBandIndexes        : BSTR*'''
        return super(IBandArithmeticFunctionArguments, self).get_BandIndexes()
    def put_BandIndexes(self, pBandIndexes):
        '''Method IBandArithmeticFunctionArguments.put_BandIndexes

           INPUT
            pBandIndexes        : BSTR'''
        return super(IBandArithmeticFunctionArguments, self).put_BandIndexes(pBandIndexes)
    BandIndexes = property(get_BandIndexes, put_BandIndexes, None)
    Method = property(get_Method, put_Method, None)
    Raster = property(get_Raster, putref_Raster, None)

class IRasterItemFunctionArguments(_esriDataSourcesRaster.IRasterItemFunctionArguments):
    _IID = uuid.UUID('28ca1646-8e41-45b1-aa40-97b2ab2cb02f')

    def __init__(self, *args, **kw):
        super(IRasterItemFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ImageService(self):
        '''Method IRasterItemFunctionArguments.get_ImageService

           OUTPUT
            ppImageService      : IUnknown**'''
        return super(IRasterItemFunctionArguments, self).get_ImageService()
    def putref_ImageService(self, ppImageService):
        '''Method IRasterItemFunctionArguments.putref_ImageService

           INPUT
            ppImageService      : IUnknown*'''
        return super(IRasterItemFunctionArguments, self).putref_ImageService(ppImageService)
    def get_URL(self):
        '''Method IRasterItemFunctionArguments.get_URL

           OUTPUT
            pURL                : BSTR*'''
        return super(IRasterItemFunctionArguments, self).get_URL()
    def put_URL(self, pURL):
        '''Method IRasterItemFunctionArguments.put_URL

           INPUT
            pURL                : BSTR'''
        return super(IRasterItemFunctionArguments, self).put_URL(pURL)
    def get_RasterID(self):
        '''Method IRasterItemFunctionArguments.get_RasterID

           OUTPUT
            pRID                : long*'''
        return super(IRasterItemFunctionArguments, self).get_RasterID()
    def put_RasterID(self, pRID):
        '''Method IRasterItemFunctionArguments.put_RasterID

           INPUT
            pRID                : long'''
        return super(IRasterItemFunctionArguments, self).put_RasterID(pRID)
    ImageService = property(get_ImageService, putref_ImageService, None)
    RasterID = property(get_RasterID, put_RasterID, None)
    URL = property(get_URL, put_URL, None)

class ICachedRasterFunction(_esriDataSourcesRaster.ICachedRasterFunction):
    _IID = uuid.UUID('d19975b1-d6d1-46c2-9bd4-f27f2d1e23ad')
    def get_CachedRasterFileName(self):
        '''Method ICachedRasterFunction.get_CachedRasterFileName

           OUTPUT
            pFileName           : BSTR*'''
        return super(ICachedRasterFunction, self).get_CachedRasterFileName()
    CachedRasterFileName = property(get_CachedRasterFileName, None, None)

class ICachedRasterFunctionArguments(_esriDataSourcesRaster.ICachedRasterFunctionArguments):
    _IID = uuid.UUID('3ccf7e76-79c5-4f18-b2e3-4b5e25d89912')

    def __init__(self, *args, **kw):
        super(ICachedRasterFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method ICachedRasterFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(ICachedRasterFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method ICachedRasterFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(ICachedRasterFunctionArguments, self).putref_Raster(ppRaster)
    def put_CompressionType(self, pType):
        '''Method ICachedRasterFunctionArguments.put_CompressionType

           INPUT
            pType               : esriCachedRasterCompressionType'''
        return super(ICachedRasterFunctionArguments, self).put_CompressionType(pType)
    def get_CompressionType(self):
        '''Method ICachedRasterFunctionArguments.get_CompressionType

           OUTPUT
            pType               : esriCachedRasterCompressionType*'''
        return super(ICachedRasterFunctionArguments, self).get_CompressionType()
    def put_CompressionQuality(self, Value):
        '''Method ICachedRasterFunctionArguments.put_CompressionQuality

           INPUT
            Value               : long'''
        return super(ICachedRasterFunctionArguments, self).put_CompressionQuality(Value)
    def get_CompressionQuality(self):
        '''Method ICachedRasterFunctionArguments.get_CompressionQuality

           OUTPUT
            Value               : long*'''
        return super(ICachedRasterFunctionArguments, self).get_CompressionQuality()
    def get_MaxAllowedInputCols(self):
        '''Method ICachedRasterFunctionArguments.get_MaxAllowedInputCols

           OUTPUT
            pCols               : long*'''
        return super(ICachedRasterFunctionArguments, self).get_MaxAllowedInputCols()
    def put_MaxAllowedInputCols(self, pCols):
        '''Method ICachedRasterFunctionArguments.put_MaxAllowedInputCols

           INPUT
            pCols               : long'''
        return super(ICachedRasterFunctionArguments, self).put_MaxAllowedInputCols(pCols)
    def get_MaxAllowedInputRows(self):
        '''Method ICachedRasterFunctionArguments.get_MaxAllowedInputRows

           OUTPUT
            pRows               : long*'''
        return super(ICachedRasterFunctionArguments, self).get_MaxAllowedInputRows()
    def put_MaxAllowedInputRows(self, pRows):
        '''Method ICachedRasterFunctionArguments.put_MaxAllowedInputRows

           INPUT
            pRows               : long'''
        return super(ICachedRasterFunctionArguments, self).put_MaxAllowedInputRows(pRows)
    def get_CacheBaseName(self):
        '''Method ICachedRasterFunctionArguments.get_CacheBaseName

           OUTPUT
            pCacheBaseName      : BSTR*'''
        return super(ICachedRasterFunctionArguments, self).get_CacheBaseName()
    def put_CacheBaseName(self, pCacheBaseName):
        '''Method ICachedRasterFunctionArguments.put_CacheBaseName

           INPUT
            pCacheBaseName      : BSTR'''
        return super(ICachedRasterFunctionArguments, self).put_CacheBaseName(pCacheBaseName)
    def get_ClippingGeometry(self):
        '''Method ICachedRasterFunctionArguments.get_ClippingGeometry

           OUTPUT
            ppClippingGeometry  : IGeometry**'''
        return super(ICachedRasterFunctionArguments, self).get_ClippingGeometry()
    def putref_ClippingGeometry(self, ppClippingGeometry):
        '''Method ICachedRasterFunctionArguments.putref_ClippingGeometry

           INPUT
            ppClippingGeometry  : IGeometry*'''
        return super(ICachedRasterFunctionArguments, self).putref_ClippingGeometry(ppClippingGeometry)
    def get_RequestSize(self):
        '''Method ICachedRasterFunctionArguments.get_RequestSize

           OUTPUT
            pRequestSize        : double*'''
        return super(ICachedRasterFunctionArguments, self).get_RequestSize()
    def put_RequestSize(self, pRequestSize):
        '''Method ICachedRasterFunctionArguments.put_RequestSize

           INPUT
            pRequestSize        : double'''
        return super(ICachedRasterFunctionArguments, self).put_RequestSize(pRequestSize)
    def get_RequestSizeType(self):
        '''Method ICachedRasterFunctionArguments.get_RequestSizeType

           OUTPUT
            pRequestSizeType    : esriRequestSizeType*'''
        return super(ICachedRasterFunctionArguments, self).get_RequestSizeType()
    def put_RequestSizeType(self, pRequestSizeType):
        '''Method ICachedRasterFunctionArguments.put_RequestSizeType

           INPUT
            pRequestSizeType    : esriRequestSizeType'''
        return super(ICachedRasterFunctionArguments, self).put_RequestSizeType(pRequestSizeType)
    CacheBaseName = property(get_CacheBaseName, put_CacheBaseName, None)
    ClippingGeometry = property(get_ClippingGeometry, putref_ClippingGeometry, None)
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    MaxAllowedInputCols = property(get_MaxAllowedInputCols, put_MaxAllowedInputCols, None)
    MaxAllowedInputRows = property(get_MaxAllowedInputRows, put_MaxAllowedInputRows, None)
    Raster = property(get_Raster, putref_Raster, None)
    RequestSize = property(get_RequestSize, put_RequestSize, None)
    RequestSizeType = property(get_RequestSizeType, put_RequestSizeType, None)

class IRasterCacheArguments(_esriDataSourcesRaster.IRasterCacheArguments):
    _IID = uuid.UUID('454319d6-468a-4143-9bbc-571f0e51e656')

    def __init__(self, *args, **kw):
        super(IRasterCacheArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CacheLocation(self):
        '''Method IRasterCacheArguments.get_CacheLocation

           OUTPUT
            ppName              : IName**'''
        return super(IRasterCacheArguments, self).get_CacheLocation()
    def putref_CacheLocation(self, ppName):
        '''Method IRasterCacheArguments.putref_CacheLocation

           INPUT
            ppName              : IName*'''
        return super(IRasterCacheArguments, self).putref_CacheLocation(ppName)
    CacheLocation = property(get_CacheLocation, putref_CacheLocation, None)

class IContrastBrightnessFunctionArguments(_esriDataSourcesRaster.IContrastBrightnessFunctionArguments):
    _IID = uuid.UUID('c00501c8-3cda-4d36-80c0-0d66634221ce')

    def __init__(self, *args, **kw):
        super(IContrastBrightnessFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IContrastBrightnessFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IContrastBrightnessFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IContrastBrightnessFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IContrastBrightnessFunctionArguments, self).putref_Raster(ppRaster)
    def put_ContrastOffset(self, pContrastOffset):
        '''Method IContrastBrightnessFunctionArguments.put_ContrastOffset

           INPUT
            pContrastOffset     : double'''
        return super(IContrastBrightnessFunctionArguments, self).put_ContrastOffset(pContrastOffset)
    def get_ContrastOffset(self):
        '''Method IContrastBrightnessFunctionArguments.get_ContrastOffset

           OUTPUT
            pContrastOffset     : double*'''
        return super(IContrastBrightnessFunctionArguments, self).get_ContrastOffset()
    def get_BrightnessOffset(self):
        '''Method IContrastBrightnessFunctionArguments.get_BrightnessOffset

           OUTPUT
            pBrightnessOffset   : double*'''
        return super(IContrastBrightnessFunctionArguments, self).get_BrightnessOffset()
    def put_BrightnessOffset(self, pBrightnessOffset):
        '''Method IContrastBrightnessFunctionArguments.put_BrightnessOffset

           INPUT
            pBrightnessOffset   : double'''
        return super(IContrastBrightnessFunctionArguments, self).put_BrightnessOffset(pBrightnessOffset)
    BrightnessOffset = property(get_BrightnessOffset, put_BrightnessOffset, None)
    ContrastOffset = property(get_ContrastOffset, put_ContrastOffset, None)
    Raster = property(get_Raster, putref_Raster, None)

class IRenderedRasterFunctionArguments(_esriDataSourcesRaster.IRenderedRasterFunctionArguments):
    _IID = uuid.UUID('d705a977-bd3c-4041-82b4-da006bc29cd1')

    def __init__(self, *args, **kw):
        super(IRenderedRasterFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IRenderedRasterFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IRenderedRasterFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IRenderedRasterFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IRenderedRasterFunctionArguments, self).putref_Raster(ppRaster)
    def get_RasterRenderer(self):
        '''Method IRenderedRasterFunctionArguments.get_RasterRenderer

           OUTPUT
            ppRasterRenderer    : IUnknown**'''
        return super(IRenderedRasterFunctionArguments, self).get_RasterRenderer()
    def putref_RasterRenderer(self, ppRasterRenderer):
        '''Method IRenderedRasterFunctionArguments.putref_RasterRenderer

           INPUT
            ppRasterRenderer    : IUnknown*'''
        return super(IRenderedRasterFunctionArguments, self).putref_RasterRenderer(ppRasterRenderer)
    Raster = property(get_Raster, putref_Raster, None)
    RasterRenderer = property(get_RasterRenderer, putref_RasterRenderer, None)

class IReflectanceFunctionArguments(_esriDataSourcesRaster.IReflectanceFunctionArguments):
    _IID = uuid.UUID('a8e7e036-d6f4-48c1-a201-487f3ec757ac')

    def __init__(self, *args, **kw):
        super(IReflectanceFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IReflectanceFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IReflectanceFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IReflectanceFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IReflectanceFunctionArguments, self).putref_Raster(ppRaster)
    def get_RadianceGainValues(self):
        '''Method IReflectanceFunctionArguments.get_RadianceGainValues

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IReflectanceFunctionArguments, self).get_RadianceGainValues()
    def putref_RadianceGainValues(self, ppRanges):
        '''Method IReflectanceFunctionArguments.putref_RadianceGainValues

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IReflectanceFunctionArguments, self).putref_RadianceGainValues(ppRanges)
    def get_RadianceBiasValues(self):
        '''Method IReflectanceFunctionArguments.get_RadianceBiasValues

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IReflectanceFunctionArguments, self).get_RadianceBiasValues()
    def putref_RadianceBiasValues(self, ppRanges):
        '''Method IReflectanceFunctionArguments.putref_RadianceBiasValues

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IReflectanceFunctionArguments, self).putref_RadianceBiasValues(ppRanges)
    def get_SunElevation(self):
        '''Method IReflectanceFunctionArguments.get_SunElevation

           OUTPUT
            pSunElevation       : double*'''
        return super(IReflectanceFunctionArguments, self).get_SunElevation()
    def put_SunElevation(self, pSunElevation):
        '''Method IReflectanceFunctionArguments.put_SunElevation

           INPUT
            pSunElevation       : double'''
        return super(IReflectanceFunctionArguments, self).put_SunElevation(pSunElevation)
    RadianceBiasValues = property(get_RadianceBiasValues, putref_RadianceBiasValues, None)
    RadianceGainValues = property(get_RadianceGainValues, putref_RadianceGainValues, None)
    Raster = property(get_Raster, putref_Raster, None)
    SunElevation = property(get_SunElevation, put_SunElevation, None)

class IDownsampleFunctionArguments(_esriDataSourcesRaster.IDownsampleFunctionArguments):
    _IID = uuid.UUID('1bf50257-9523-4587-95c3-c0ceaa34f0d0')

    def __init__(self, *args, **kw):
        super(IDownsampleFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Raster(self):
        '''Method IDownsampleFunctionArguments.get_Raster

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IDownsampleFunctionArguments, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IDownsampleFunctionArguments.putref_Raster

           INPUT
            ppRaster            : IUnknown*'''
        return super(IDownsampleFunctionArguments, self).putref_Raster(ppRaster)
    def get_ResamplingMethod(self):
        '''Method IDownsampleFunctionArguments.get_ResamplingMethod

           OUTPUT
            pResamplingMethod   : rstResamplingTypes*'''
        return super(IDownsampleFunctionArguments, self).get_ResamplingMethod()
    def put_ResamplingMethod(self, pResamplingMethod):
        '''Method IDownsampleFunctionArguments.put_ResamplingMethod

           INPUT
            pResamplingMethod   : rstResamplingTypes'''
        return super(IDownsampleFunctionArguments, self).put_ResamplingMethod(pResamplingMethod)
    def get_StartBlurAtScaleFactor(self):
        '''Method IDownsampleFunctionArguments.get_StartBlurAtScaleFactor

           OUTPUT
            pScaleFactor        : double*'''
        return super(IDownsampleFunctionArguments, self).get_StartBlurAtScaleFactor()
    def put_StartBlurAtScaleFactor(self, pScaleFactor):
        '''Method IDownsampleFunctionArguments.put_StartBlurAtScaleFactor

           INPUT
            pScaleFactor        : double'''
        return super(IDownsampleFunctionArguments, self).put_StartBlurAtScaleFactor(pScaleFactor)
    def get_StopBlurAllAtScaleFactor(self):
        '''Method IDownsampleFunctionArguments.get_StopBlurAllAtScaleFactor

           OUTPUT
            pScaleFactor        : double*'''
        return super(IDownsampleFunctionArguments, self).get_StopBlurAllAtScaleFactor()
    def put_StopBlurAllAtScaleFactor(self, pScaleFactor):
        '''Method IDownsampleFunctionArguments.put_StopBlurAllAtScaleFactor

           INPUT
            pScaleFactor        : double'''
        return super(IDownsampleFunctionArguments, self).put_StopBlurAllAtScaleFactor(pScaleFactor)
    Raster = property(get_Raster, putref_Raster, None)
    ResamplingMethod = property(get_ResamplingMethod, put_ResamplingMethod, None)
    StartBlurAtScaleFactor = property(get_StartBlurAtScaleFactor, put_StartBlurAtScaleFactor, None)
    StopBlurAllAtScaleFactor = property(get_StopBlurAllAtScaleFactor, put_StopBlurAllAtScaleFactor, None)

class IReflectanceFunctionArguments2(_esriDataSourcesRaster.IReflectanceFunctionArguments2):
    _IID = uuid.UUID('b94271da-7fee-4aa7-b695-44a77382c093')

    def __init__(self, *args, **kw):
        super(IReflectanceFunctionArguments2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Albedo(self):
        '''Method IReflectanceFunctionArguments2.get_Albedo

           OUTPUT
            pbDoAlbedo          : VARIANT_BOOL*'''
        return super(IReflectanceFunctionArguments2, self).get_Albedo()
    def put_Albedo(self, pbDoAlbedo):
        '''Method IReflectanceFunctionArguments2.put_Albedo

           INPUT
            pbDoAlbedo          : VARIANT_BOOL'''
        return super(IReflectanceFunctionArguments2, self).put_Albedo(pbDoAlbedo)
    def get_Raster(self):
        '''Method IReflectanceFunctionArguments.get_Raster (from IReflectanceFunctionArguments)

           OUTPUT
            ppRaster            : IUnknown**'''
        return super(IReflectanceFunctionArguments2, self).get_Raster()
    def putref_Raster(self, ppRaster):
        '''Method IReflectanceFunctionArguments.putref_Raster (from IReflectanceFunctionArguments)

           INPUT
            ppRaster            : IUnknown*'''
        return super(IReflectanceFunctionArguments2, self).putref_Raster(ppRaster)
    def get_RadianceGainValues(self):
        '''Method IReflectanceFunctionArguments.get_RadianceGainValues (from IReflectanceFunctionArguments)

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IReflectanceFunctionArguments2, self).get_RadianceGainValues()
    def putref_RadianceGainValues(self, ppRanges):
        '''Method IReflectanceFunctionArguments.putref_RadianceGainValues (from IReflectanceFunctionArguments)

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IReflectanceFunctionArguments2, self).putref_RadianceGainValues(ppRanges)
    def get_RadianceBiasValues(self):
        '''Method IReflectanceFunctionArguments.get_RadianceBiasValues (from IReflectanceFunctionArguments)

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IReflectanceFunctionArguments2, self).get_RadianceBiasValues()
    def putref_RadianceBiasValues(self, ppRanges):
        '''Method IReflectanceFunctionArguments.putref_RadianceBiasValues (from IReflectanceFunctionArguments)

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IReflectanceFunctionArguments2, self).putref_RadianceBiasValues(ppRanges)
    def get_SunElevation(self):
        '''Method IReflectanceFunctionArguments.get_SunElevation (from IReflectanceFunctionArguments)

           OUTPUT
            pSunElevation       : double*'''
        return super(IReflectanceFunctionArguments2, self).get_SunElevation()
    def put_SunElevation(self, pSunElevation):
        '''Method IReflectanceFunctionArguments.put_SunElevation (from IReflectanceFunctionArguments)

           INPUT
            pSunElevation       : double'''
        return super(IReflectanceFunctionArguments2, self).put_SunElevation(pSunElevation)
    Albedo = property(get_Albedo, put_Albedo, None)
    RadianceBiasValues = property(get_RadianceBiasValues, putref_RadianceBiasValues, None)
    RadianceGainValues = property(get_RadianceGainValues, putref_RadianceGainValues, None)
    Raster = property(get_Raster, putref_Raster, None)
    SunElevation = property(get_SunElevation, put_SunElevation, None)

class ILasToRasterFunctionArguments(_esriDataSourcesRaster.ILasToRasterFunctionArguments):
    _IID = uuid.UUID('38cffcfe-ba62-442f-a702-8f0d7f96e581')

    def __init__(self, *args, **kw):
        super(ILasToRasterFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Extent(self):
        '''Method ILasToRasterFunctionArguments.get_Extent

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(ILasToRasterFunctionArguments, self).get_Extent()
    def putref_Extent(self, ppExtent):
        '''Method ILasToRasterFunctionArguments.putref_Extent

           INPUT
            ppExtent            : IEnvelope*'''
        return super(ILasToRasterFunctionArguments, self).putref_Extent(ppExtent)
    def get_ReturnTypesSelected(self):
        '''Method ILasToRasterFunctionArguments.get_ReturnTypesSelected

           OUTPUT
            ppReturnTypesSelected: ILongArray**'''
        return super(ILasToRasterFunctionArguments, self).get_ReturnTypesSelected()
    def putref_ReturnTypesSelected(self, ppReturnTypesSelected):
        '''Method ILasToRasterFunctionArguments.putref_ReturnTypesSelected

           INPUT
            ppReturnTypesSelected: ILongArray*'''
        return super(ILasToRasterFunctionArguments, self).putref_ReturnTypesSelected(ppReturnTypesSelected)
    def get_ClassTypesSelected(self):
        '''Method ILasToRasterFunctionArguments.get_ClassTypesSelected

           OUTPUT
            ppClassTypesSelected: ILongArray**'''
        return super(ILasToRasterFunctionArguments, self).get_ClassTypesSelected()
    def putref_ClassTypesSelected(self, ppClassTypesSelected):
        '''Method ILasToRasterFunctionArguments.putref_ClassTypesSelected

           INPUT
            ppClassTypesSelected: ILongArray*'''
        return super(ILasToRasterFunctionArguments, self).putref_ClassTypesSelected(ppClassTypesSelected)
    def get_CellWidth(self):
        '''Method ILasToRasterFunctionArguments.get_CellWidth

           OUTPUT
            pCellWidth          : double*'''
        return super(ILasToRasterFunctionArguments, self).get_CellWidth()
    def put_CellWidth(self, pCellWidth):
        '''Method ILasToRasterFunctionArguments.put_CellWidth

           INPUT
            pCellWidth          : double'''
        return super(ILasToRasterFunctionArguments, self).put_CellWidth(pCellWidth)
    def get_UseTinning(self):
        '''Method ILasToRasterFunctionArguments.get_UseTinning

           OUTPUT
            pUseTinning         : VARIANT_BOOL*'''
        return super(ILasToRasterFunctionArguments, self).get_UseTinning()
    def put_UseTinning(self, pUseTinning):
        '''Method ILasToRasterFunctionArguments.put_UseTinning

           INPUT
            pUseTinning         : VARIANT_BOOL'''
        return super(ILasToRasterFunctionArguments, self).put_UseTinning(pUseTinning)
    def get_TinToRasterInterpolationType(self):
        '''Method ILasToRasterFunctionArguments.get_TinToRasterInterpolationType

           OUTPUT
            pType               : esriSurfaceInterpolationType*'''
        return super(ILasToRasterFunctionArguments, self).get_TinToRasterInterpolationType()
    def put_TinToRasterInterpolationType(self, pType):
        '''Method ILasToRasterFunctionArguments.put_TinToRasterInterpolationType

           INPUT
            pType               : esriSurfaceInterpolationType'''
        return super(ILasToRasterFunctionArguments, self).put_TinToRasterInterpolationType(pType)
    def get_CellAggregationType(self):
        '''Method ILasToRasterFunctionArguments.get_CellAggregationType

           OUTPUT
            pCellAggType        : esriRasterLasCellAggregationType*'''
        return super(ILasToRasterFunctionArguments, self).get_CellAggregationType()
    def put_CellAggregationType(self, pCellAggType):
        '''Method ILasToRasterFunctionArguments.put_CellAggregationType

           INPUT
            pCellAggType        : esriRasterLasCellAggregationType'''
        return super(ILasToRasterFunctionArguments, self).put_CellAggregationType(pCellAggType)
    def get_DataType(self):
        '''Method ILasToRasterFunctionArguments.get_DataType

           OUTPUT
            pDataType           : esriRasterLasDataType*'''
        return super(ILasToRasterFunctionArguments, self).get_DataType()
    def put_DataType(self, pDataType):
        '''Method ILasToRasterFunctionArguments.put_DataType

           INPUT
            pDataType           : esriRasterLasDataType'''
        return super(ILasToRasterFunctionArguments, self).put_DataType(pDataType)
    def get_VoidFillMethod(self):
        '''Method ILasToRasterFunctionArguments.get_VoidFillMethod

           OUTPUT
            pVoidFillMethod     : esriRasterLasVoidFillMethod*'''
        return super(ILasToRasterFunctionArguments, self).get_VoidFillMethod()
    def put_VoidFillMethod(self, pVoidFillMethod):
        '''Method ILasToRasterFunctionArguments.put_VoidFillMethod

           INPUT
            pVoidFillMethod     : esriRasterLasVoidFillMethod'''
        return super(ILasToRasterFunctionArguments, self).put_VoidFillMethod(pVoidFillMethod)
    def get_MaxHoleWidthFilled(self):
        '''Method ILasToRasterFunctionArguments.get_MaxHoleWidthFilled

           OUTPUT
            pMaxHoleWidth       : double*'''
        return super(ILasToRasterFunctionArguments, self).get_MaxHoleWidthFilled()
    def put_MaxHoleWidthFilled(self, pMaxHoleWidth):
        '''Method ILasToRasterFunctionArguments.put_MaxHoleWidthFilled

           INPUT
            pMaxHoleWidth       : double'''
        return super(ILasToRasterFunctionArguments, self).put_MaxHoleWidthFilled(pMaxHoleWidth)
    def get_SpatialReference(self):
        '''Method ILasToRasterFunctionArguments.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(ILasToRasterFunctionArguments, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method ILasToRasterFunctionArguments.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(ILasToRasterFunctionArguments, self).putref_SpatialReference(ppSpatialReference)
    def get_IgnoreSpatialReferenceInLasFiles(self):
        '''Method ILasToRasterFunctionArguments.get_IgnoreSpatialReferenceInLasFiles

           OUTPUT
            pIgnoreLasSR        : VARIANT_BOOL*'''
        return super(ILasToRasterFunctionArguments, self).get_IgnoreSpatialReferenceInLasFiles()
    def put_IgnoreSpatialReferenceInLasFiles(self, pIgnoreLasSR):
        '''Method ILasToRasterFunctionArguments.put_IgnoreSpatialReferenceInLasFiles

           INPUT
            pIgnoreLasSR        : VARIANT_BOOL'''
        return super(ILasToRasterFunctionArguments, self).put_IgnoreSpatialReferenceInLasFiles(pIgnoreLasSR)
    def get_CacheMaxNumSurfaces(self):
        '''Method ILasToRasterFunctionArguments.get_CacheMaxNumSurfaces

           OUTPUT
            pMaxNumSurfaces     : long*'''
        return super(ILasToRasterFunctionArguments, self).get_CacheMaxNumSurfaces()
    def put_CacheMaxNumSurfaces(self, pMaxNumSurfaces):
        '''Method ILasToRasterFunctionArguments.put_CacheMaxNumSurfaces

           INPUT
            pMaxNumSurfaces     : long'''
        return super(ILasToRasterFunctionArguments, self).put_CacheMaxNumSurfaces(pMaxNumSurfaces)
    def get_CacheRasterZTolerance(self):
        '''Method ILasToRasterFunctionArguments.get_CacheRasterZTolerance

           OUTPUT
            pZTolerance         : double*'''
        return super(ILasToRasterFunctionArguments, self).get_CacheRasterZTolerance()
    def put_CacheRasterZTolerance(self, pZTolerance):
        '''Method ILasToRasterFunctionArguments.put_CacheRasterZTolerance

           INPUT
            pZTolerance         : double'''
        return super(ILasToRasterFunctionArguments, self).put_CacheRasterZTolerance(pZTolerance)
    def get_LasFile(self):
        '''Method ILasToRasterFunctionArguments.get_LasFile

           OUTPUT
            filename            : BSTR*'''
        return super(ILasToRasterFunctionArguments, self).get_LasFile()
    def put_LasFile(self, filename):
        '''Method ILasToRasterFunctionArguments.put_LasFile

           INPUT
            filename            : BSTR'''
        return super(ILasToRasterFunctionArguments, self).put_LasFile(filename)
    def get_LasFolder(self):
        '''Method ILasToRasterFunctionArguments.get_LasFolder

           OUTPUT
            foldername          : BSTR*'''
        return super(ILasToRasterFunctionArguments, self).get_LasFolder()
    def put_LasFolder(self, foldername):
        '''Method ILasToRasterFunctionArguments.put_LasFolder

           INPUT
            foldername          : BSTR'''
        return super(ILasToRasterFunctionArguments, self).put_LasFolder(foldername)
    def get_LasFileVersion(self):
        '''Method ILasToRasterFunctionArguments.get_LasFileVersion

           OUTPUT
            LasFileVersion      : BSTR*'''
        return super(ILasToRasterFunctionArguments, self).get_LasFileVersion()
    def put_LasFileVersion(self, LasFileVersion):
        '''Method ILasToRasterFunctionArguments.put_LasFileVersion

           INPUT
            LasFileVersion      : BSTR'''
        return super(ILasToRasterFunctionArguments, self).put_LasFileVersion(LasFileVersion)
    def get_NumPointsTotal(self):
        '''Method ILasToRasterFunctionArguments.get_NumPointsTotal

           OUTPUT
            pNumPointsTotal     : double*'''
        return super(ILasToRasterFunctionArguments, self).get_NumPointsTotal()
    def put_NumPointsTotal(self, pNumPointsTotal):
        '''Method ILasToRasterFunctionArguments.put_NumPointsTotal

           INPUT
            pNumPointsTotal     : double'''
        return super(ILasToRasterFunctionArguments, self).put_NumPointsTotal(pNumPointsTotal)
    def get_AvgPointSpacing(self):
        '''Method ILasToRasterFunctionArguments.get_AvgPointSpacing

           OUTPUT
            pAvgPointSpacing    : double*'''
        return super(ILasToRasterFunctionArguments, self).get_AvgPointSpacing()
    def put_AvgPointSpacing(self, pAvgPointSpacing):
        '''Method ILasToRasterFunctionArguments.put_AvgPointSpacing

           INPUT
            pAvgPointSpacing    : double'''
        return super(ILasToRasterFunctionArguments, self).put_AvgPointSpacing(pAvgPointSpacing)
    def get_ZMin(self):
        '''Method ILasToRasterFunctionArguments.get_ZMin

           OUTPUT
            pZMin               : double*'''
        return super(ILasToRasterFunctionArguments, self).get_ZMin()
    def put_ZMin(self, pZMin):
        '''Method ILasToRasterFunctionArguments.put_ZMin

           INPUT
            pZMin               : double'''
        return super(ILasToRasterFunctionArguments, self).put_ZMin(pZMin)
    def get_ZMax(self):
        '''Method ILasToRasterFunctionArguments.get_ZMax

           OUTPUT
            pZMax               : double*'''
        return super(ILasToRasterFunctionArguments, self).get_ZMax()
    def put_ZMax(self, pZMax):
        '''Method ILasToRasterFunctionArguments.put_ZMax

           INPUT
            pZMax               : double'''
        return super(ILasToRasterFunctionArguments, self).put_ZMax(pZMax)
    AvgPointSpacing = property(get_AvgPointSpacing, put_AvgPointSpacing, None)
    CacheMaxNumSurfaces = property(get_CacheMaxNumSurfaces, put_CacheMaxNumSurfaces, None)
    CacheRasterZTolerance = property(get_CacheRasterZTolerance, put_CacheRasterZTolerance, None)
    CellAggregationType = property(get_CellAggregationType, put_CellAggregationType, None)
    CellWidth = property(get_CellWidth, put_CellWidth, None)
    ClassTypesSelected = property(get_ClassTypesSelected, putref_ClassTypesSelected, None)
    DataType = property(get_DataType, put_DataType, None)
    Extent = property(get_Extent, putref_Extent, None)
    IgnoreSpatialReferenceInLasFiles = property(get_IgnoreSpatialReferenceInLasFiles, put_IgnoreSpatialReferenceInLasFiles, None)
    LasFile = property(get_LasFile, put_LasFile, None)
    LasFileVersion = property(get_LasFileVersion, put_LasFileVersion, None)
    LasFolder = property(get_LasFolder, put_LasFolder, None)
    MaxHoleWidthFilled = property(get_MaxHoleWidthFilled, put_MaxHoleWidthFilled, None)
    NumPointsTotal = property(get_NumPointsTotal, put_NumPointsTotal, None)
    ReturnTypesSelected = property(get_ReturnTypesSelected, putref_ReturnTypesSelected, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TinToRasterInterpolationType = property(get_TinToRasterInterpolationType, put_TinToRasterInterpolationType, None)
    UseTinning = property(get_UseTinning, put_UseTinning, None)
    VoidFillMethod = property(get_VoidFillMethod, put_VoidFillMethod, None)
    ZMax = property(get_ZMax, put_ZMax, None)
    ZMin = property(get_ZMin, put_ZMin, None)

class ITerrainToRasterFunctionArguments(_esriDataSourcesRaster.ITerrainToRasterFunctionArguments):
    _IID = uuid.UUID('c21ec208-cc2f-4e31-a3ff-272d1812c9c1')

    def __init__(self, *args, **kw):
        super(ITerrainToRasterFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Terrain(self):
        '''Method ITerrainToRasterFunctionArguments.get_Terrain

           OUTPUT
            ppTerrain           : IUnknown**'''
        return super(ITerrainToRasterFunctionArguments, self).get_Terrain()
    def putref_Terrain(self, ppTerrain):
        '''Method ITerrainToRasterFunctionArguments.putref_Terrain

           INPUT
            ppTerrain           : IUnknown*'''
        return super(ITerrainToRasterFunctionArguments, self).putref_Terrain(ppTerrain)
    def get_CellWidth(self):
        '''Method ITerrainToRasterFunctionArguments.get_CellWidth

           OUTPUT
            pCellWidth          : double*'''
        return super(ITerrainToRasterFunctionArguments, self).get_CellWidth()
    def put_CellWidth(self, pCellWidth):
        '''Method ITerrainToRasterFunctionArguments.put_CellWidth

           INPUT
            pCellWidth          : double'''
        return super(ITerrainToRasterFunctionArguments, self).put_CellWidth(pCellWidth)
    def get_TinToRasterInterpolationType(self):
        '''Method ITerrainToRasterFunctionArguments.get_TinToRasterInterpolationType

           OUTPUT
            pType               : esriSurfaceInterpolationType*'''
        return super(ITerrainToRasterFunctionArguments, self).get_TinToRasterInterpolationType()
    def put_TinToRasterInterpolationType(self, pType):
        '''Method ITerrainToRasterFunctionArguments.put_TinToRasterInterpolationType

           INPUT
            pType               : esriSurfaceInterpolationType'''
        return super(ITerrainToRasterFunctionArguments, self).put_TinToRasterInterpolationType(pType)
    def get_CacheMaxNumSurfaces(self):
        '''Method ITerrainToRasterFunctionArguments.get_CacheMaxNumSurfaces

           OUTPUT
            pMaxNumSurfaces     : long*'''
        return super(ITerrainToRasterFunctionArguments, self).get_CacheMaxNumSurfaces()
    def put_CacheMaxNumSurfaces(self, pMaxNumSurfaces):
        '''Method ITerrainToRasterFunctionArguments.put_CacheMaxNumSurfaces

           INPUT
            pMaxNumSurfaces     : long'''
        return super(ITerrainToRasterFunctionArguments, self).put_CacheMaxNumSurfaces(pMaxNumSurfaces)
    def get_CacheRasterZTolerance(self):
        '''Method ITerrainToRasterFunctionArguments.get_CacheRasterZTolerance

           OUTPUT
            pZTolerance         : double*'''
        return super(ITerrainToRasterFunctionArguments, self).get_CacheRasterZTolerance()
    def put_CacheRasterZTolerance(self, pZTolerance):
        '''Method ITerrainToRasterFunctionArguments.put_CacheRasterZTolerance

           INPUT
            pZTolerance         : double'''
        return super(ITerrainToRasterFunctionArguments, self).put_CacheRasterZTolerance(pZTolerance)
    CacheMaxNumSurfaces = property(get_CacheMaxNumSurfaces, put_CacheMaxNumSurfaces, None)
    CacheRasterZTolerance = property(get_CacheRasterZTolerance, put_CacheRasterZTolerance, None)
    CellWidth = property(get_CellWidth, put_CellWidth, None)
    Terrain = property(get_Terrain, putref_Terrain, None)
    TinToRasterInterpolationType = property(get_TinToRasterInterpolationType, put_TinToRasterInterpolationType, None)

class ILasDatasetToRasterFunctionArguments(_esriDataSourcesRaster.ILasDatasetToRasterFunctionArguments):
    _IID = uuid.UUID('52a1576c-57f7-4d8f-bb44-a1abe8da34c1')

    def __init__(self, *args, **kw):
        super(ILasDatasetToRasterFunctionArguments, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_LasDataset(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_LasDataset

           OUTPUT
            ppLasDataset        : IUnknown**'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_LasDataset()
    def putref_LasDataset(self, ppLasDataset):
        '''Method ILasDatasetToRasterFunctionArguments.putref_LasDataset

           INPUT
            ppLasDataset        : IUnknown*'''
        return super(ILasDatasetToRasterFunctionArguments, self).putref_LasDataset(ppLasDataset)
    def get_ReturnTypesSelected(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_ReturnTypesSelected

           OUTPUT
            ppReturnTypesSelected: ILongArray**'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_ReturnTypesSelected()
    def putref_ReturnTypesSelected(self, ppReturnTypesSelected):
        '''Method ILasDatasetToRasterFunctionArguments.putref_ReturnTypesSelected

           INPUT
            ppReturnTypesSelected: ILongArray*'''
        return super(ILasDatasetToRasterFunctionArguments, self).putref_ReturnTypesSelected(ppReturnTypesSelected)
    def get_ClassTypesSelected(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_ClassTypesSelected

           OUTPUT
            ppClassTypesSelected: ILongArray**'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_ClassTypesSelected()
    def putref_ClassTypesSelected(self, ppClassTypesSelected):
        '''Method ILasDatasetToRasterFunctionArguments.putref_ClassTypesSelected

           INPUT
            ppClassTypesSelected: ILongArray*'''
        return super(ILasDatasetToRasterFunctionArguments, self).putref_ClassTypesSelected(ppClassTypesSelected)
    def get_CellWidth(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_CellWidth

           OUTPUT
            pCellWidth          : double*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_CellWidth()
    def put_CellWidth(self, pCellWidth):
        '''Method ILasDatasetToRasterFunctionArguments.put_CellWidth

           INPUT
            pCellWidth          : double'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_CellWidth(pCellWidth)
    def get_UseTinning(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_UseTinning

           OUTPUT
            pUseTinning         : VARIANT_BOOL*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_UseTinning()
    def put_UseTinning(self, pUseTinning):
        '''Method ILasDatasetToRasterFunctionArguments.put_UseTinning

           INPUT
            pUseTinning         : VARIANT_BOOL'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_UseTinning(pUseTinning)
    def get_TinToRasterInterpolationType(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_TinToRasterInterpolationType

           OUTPUT
            pType               : esriSurfaceInterpolationType*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_TinToRasterInterpolationType()
    def put_TinToRasterInterpolationType(self, pType):
        '''Method ILasDatasetToRasterFunctionArguments.put_TinToRasterInterpolationType

           INPUT
            pType               : esriSurfaceInterpolationType'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_TinToRasterInterpolationType(pType)
    def get_UseConstraints(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_UseConstraints

           OUTPUT
            pbUseConstraints    : VARIANT_BOOL*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_UseConstraints()
    def put_UseConstraints(self, pbUseConstraints):
        '''Method ILasDatasetToRasterFunctionArguments.put_UseConstraints

           INPUT
            pbUseConstraints    : VARIANT_BOOL'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_UseConstraints(pbUseConstraints)
    def get_CellAggregationType(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_CellAggregationType

           OUTPUT
            pCellAggType        : esriRasterLasCellAggregationType*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_CellAggregationType()
    def put_CellAggregationType(self, pCellAggType):
        '''Method ILasDatasetToRasterFunctionArguments.put_CellAggregationType

           INPUT
            pCellAggType        : esriRasterLasCellAggregationType'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_CellAggregationType(pCellAggType)
    def get_DataType(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_DataType

           OUTPUT
            pDataType           : esriRasterLasDataType*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_DataType()
    def put_DataType(self, pDataType):
        '''Method ILasDatasetToRasterFunctionArguments.put_DataType

           INPUT
            pDataType           : esriRasterLasDataType'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_DataType(pDataType)
    def get_VoidFillMethod(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_VoidFillMethod

           OUTPUT
            pVoidFillMethod     : esriRasterLasVoidFillMethod*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_VoidFillMethod()
    def put_VoidFillMethod(self, pVoidFillMethod):
        '''Method ILasDatasetToRasterFunctionArguments.put_VoidFillMethod

           INPUT
            pVoidFillMethod     : esriRasterLasVoidFillMethod'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_VoidFillMethod(pVoidFillMethod)
    def get_MaxHoleWidthFilled(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_MaxHoleWidthFilled

           OUTPUT
            pMaxHoleWidth       : double*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_MaxHoleWidthFilled()
    def put_MaxHoleWidthFilled(self, pMaxHoleWidth):
        '''Method ILasDatasetToRasterFunctionArguments.put_MaxHoleWidthFilled

           INPUT
            pMaxHoleWidth       : double'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_MaxHoleWidthFilled(pMaxHoleWidth)
    def get_SpatialReference(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_SpatialReference

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_SpatialReference()
    def putref_SpatialReference(self, ppSpatialReference):
        '''Method ILasDatasetToRasterFunctionArguments.putref_SpatialReference

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(ILasDatasetToRasterFunctionArguments, self).putref_SpatialReference(ppSpatialReference)
    def get_CacheMaxNumSurfaces(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_CacheMaxNumSurfaces

           OUTPUT
            pMaxNumSurfaces     : long*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_CacheMaxNumSurfaces()
    def put_CacheMaxNumSurfaces(self, pMaxNumSurfaces):
        '''Method ILasDatasetToRasterFunctionArguments.put_CacheMaxNumSurfaces

           INPUT
            pMaxNumSurfaces     : long'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_CacheMaxNumSurfaces(pMaxNumSurfaces)
    def get_CacheRasterZTolerance(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_CacheRasterZTolerance

           OUTPUT
            pZTolerance         : double*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_CacheRasterZTolerance()
    def put_CacheRasterZTolerance(self, pZTolerance):
        '''Method ILasDatasetToRasterFunctionArguments.put_CacheRasterZTolerance

           INPUT
            pZTolerance         : double'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_CacheRasterZTolerance(pZTolerance)
    def get_LasFileVersion(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_LasFileVersion

           OUTPUT
            LasFileVersion      : BSTR*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_LasFileVersion()
    def put_LasFileVersion(self, LasFileVersion):
        '''Method ILasDatasetToRasterFunctionArguments.put_LasFileVersion

           INPUT
            LasFileVersion      : BSTR'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_LasFileVersion(LasFileVersion)
    def get_NumPointsTotal(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_NumPointsTotal

           OUTPUT
            pNumPointsTotal     : double*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_NumPointsTotal()
    def put_NumPointsTotal(self, pNumPointsTotal):
        '''Method ILasDatasetToRasterFunctionArguments.put_NumPointsTotal

           INPUT
            pNumPointsTotal     : double'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_NumPointsTotal(pNumPointsTotal)
    def get_AvgPointSpacing(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_AvgPointSpacing

           OUTPUT
            pAvgPointSpacing    : double*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_AvgPointSpacing()
    def put_AvgPointSpacing(self, pAvgPointSpacing):
        '''Method ILasDatasetToRasterFunctionArguments.put_AvgPointSpacing

           INPUT
            pAvgPointSpacing    : double'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_AvgPointSpacing(pAvgPointSpacing)
    def get_ZMin(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_ZMin

           OUTPUT
            pZMin               : double*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_ZMin()
    def put_ZMin(self, pZMin):
        '''Method ILasDatasetToRasterFunctionArguments.put_ZMin

           INPUT
            pZMin               : double'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_ZMin(pZMin)
    def get_ZMax(self):
        '''Method ILasDatasetToRasterFunctionArguments.get_ZMax

           OUTPUT
            pZMax               : double*'''
        return super(ILasDatasetToRasterFunctionArguments, self).get_ZMax()
    def put_ZMax(self, pZMax):
        '''Method ILasDatasetToRasterFunctionArguments.put_ZMax

           INPUT
            pZMax               : double'''
        return super(ILasDatasetToRasterFunctionArguments, self).put_ZMax(pZMax)
    AvgPointSpacing = property(get_AvgPointSpacing, put_AvgPointSpacing, None)
    CacheMaxNumSurfaces = property(get_CacheMaxNumSurfaces, put_CacheMaxNumSurfaces, None)
    CacheRasterZTolerance = property(get_CacheRasterZTolerance, put_CacheRasterZTolerance, None)
    CellAggregationType = property(get_CellAggregationType, put_CellAggregationType, None)
    CellWidth = property(get_CellWidth, put_CellWidth, None)
    ClassTypesSelected = property(get_ClassTypesSelected, putref_ClassTypesSelected, None)
    DataType = property(get_DataType, put_DataType, None)
    LasDataset = property(get_LasDataset, putref_LasDataset, None)
    LasFileVersion = property(get_LasFileVersion, put_LasFileVersion, None)
    MaxHoleWidthFilled = property(get_MaxHoleWidthFilled, put_MaxHoleWidthFilled, None)
    NumPointsTotal = property(get_NumPointsTotal, put_NumPointsTotal, None)
    ReturnTypesSelected = property(get_ReturnTypesSelected, putref_ReturnTypesSelected, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    TinToRasterInterpolationType = property(get_TinToRasterInterpolationType, put_TinToRasterInterpolationType, None)
    UseConstraints = property(get_UseConstraints, put_UseConstraints, None)
    UseTinning = property(get_UseTinning, put_UseTinning, None)
    VoidFillMethod = property(get_VoidFillMethod, put_VoidFillMethod, None)
    ZMax = property(get_ZMax, put_ZMax, None)
    ZMin = property(get_ZMin, put_ZMin, None)

class IMosaicDataset(_esriDataSourcesRaster.IMosaicDataset):
    _IID = uuid.UUID('73b65b1d-3314-444d-a1e1-64bae578df7a')

    def __init__(self, *args, **kw):
        super(IMosaicDataset, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Catalog(self):
        '''Method IMosaicDataset.get_Catalog

           OUTPUT
            ppCatalog           : IFeatureClass**'''
        return super(IMosaicDataset, self).get_Catalog()
    def put_DeviceDpi(self, pDpi):
        '''Method IMosaicDataset.put_DeviceDpi

           INPUT
            pDpi                : double'''
        return super(IMosaicDataset, self).put_DeviceDpi(pDpi)
    def get_DeviceDpi(self):
        '''Method IMosaicDataset.get_DeviceDpi

           OUTPUT
            pDpi                : double*'''
        return super(IMosaicDataset, self).get_DeviceDpi()
    def get_Referenced(self):
        '''Method IMosaicDataset.get_Referenced

           OUTPUT
            pReferenced         : VARIANT_BOOL*'''
        return super(IMosaicDataset, self).get_Referenced()
    def put_Referenced(self, pReferenced):
        '''Method IMosaicDataset.put_Referenced

           INPUT
            pReferenced         : VARIANT_BOOL'''
        return super(IMosaicDataset, self).put_Referenced(pReferenced)
    def get_CatalogType(self):
        '''Method IMosaicDataset.get_CatalogType

           OUTPUT
            pRasterCatalogType  : esriRasterCatalogType*'''
        return super(IMosaicDataset, self).get_CatalogType()
    def get_Boundary(self):
        '''Method IMosaicDataset.get_Boundary

           OUTPUT
            ppBoundary          : IFeatureClass**'''
        return super(IMosaicDataset, self).get_Boundary()
    def get_BoundaryGeometry(self):
        '''Method IMosaicDataset.get_BoundaryGeometry

           OUTPUT
            ppBoundaryGeometry  : IGeometry**'''
        return super(IMosaicDataset, self).get_BoundaryGeometry()
    def get_Seamline(self):
        '''Method IMosaicDataset.get_Seamline

           OUTPUT
            ppSeamline          : IFeatureClass**'''
        return super(IMosaicDataset, self).get_Seamline()
    def get_StereoTable(self):
        '''Method IMosaicDataset.get_StereoTable

           OUTPUT
            ppStereoTable       : ITable**'''
        return super(IMosaicDataset, self).get_StereoTable()
    def get_DodgingTable(self):
        '''Method IMosaicDataset.get_DodgingTable

           OUTPUT
            ppDodgingTable      : ITable**'''
        return super(IMosaicDataset, self).get_DodgingTable()
    def get_RasterTypeTable(self):
        '''Method IMosaicDataset.get_RasterTypeTable

           OUTPUT
            ppRasterTypeTable   : ITable**'''
        return super(IMosaicDataset, self).get_RasterTypeTable()
    def putref_RasterTypeTable(self, ppRasterTypeTable):
        '''Method IMosaicDataset.putref_RasterTypeTable

           INPUT
            ppRasterTypeTable   : ITable*'''
        return super(IMosaicDataset, self).putref_RasterTypeTable(ppRasterTypeTable)
    def get_OverviewTable(self):
        '''Method IMosaicDataset.get_OverviewTable

           OUTPUT
            ppOverviewTable     : ITable**'''
        return super(IMosaicDataset, self).get_OverviewTable()
    def putref_OverviewTable(self, ppOverviewTable):
        '''Method IMosaicDataset.putref_OverviewTable

           INPUT
            ppOverviewTable     : ITable*'''
        return super(IMosaicDataset, self).putref_OverviewTable(ppOverviewTable)
    def get_LogTable(self):
        '''Method IMosaicDataset.get_LogTable

           OUTPUT
            ppLogTable          : ITable**'''
        return super(IMosaicDataset, self).get_LogTable()
    def putref_LogTable(self, ppLogTable):
        '''Method IMosaicDataset.putref_LogTable

           INPUT
            ppLogTable          : ITable*'''
        return super(IMosaicDataset, self).putref_LogTable(ppLogTable)
    def get_LevelsTable(self):
        '''Method IMosaicDataset.get_LevelsTable

           OUTPUT
            ppLevelsTable       : ITable**'''
        return super(IMosaicDataset, self).get_LevelsTable()
    def putref_LevelsTable(self, ppLevelsTable):
        '''Method IMosaicDataset.putref_LevelsTable

           INPUT
            ppLevelsTable       : ITable*'''
        return super(IMosaicDataset, self).putref_LevelsTable(ppLevelsTable)
    def get_VisibleFields(self):
        '''Method IMosaicDataset.get_VisibleFields

           OUTPUT
            pVisibleFields      : BSTR*'''
        return super(IMosaicDataset, self).get_VisibleFields()
    def get_Children(self):
        '''Method IMosaicDataset.get_Children

           OUTPUT
            ppNames             : IEnumName**'''
        return super(IMosaicDataset, self).get_Children()
    def get_MosaicFunction(self):
        '''Method IMosaicDataset.get_MosaicFunction

           OUTPUT
            ppFunction          : IMosaicFunction**'''
        return super(IMosaicDataset, self).get_MosaicFunction()
    def get_MosaicFunctionArguments(self):
        '''Method IMosaicDataset.get_MosaicFunctionArguments

           OUTPUT
            ppArguments         : IMosaicFunctionArguments**'''
        return super(IMosaicDataset, self).get_MosaicFunctionArguments()
    def ApplyFunction(self, pFunction, pArguments, Name):
        '''Method IMosaicDataset.ApplyFunction

           INPUTS
            pFunction           : IRasterFunction*
            pArguments          : IUnknown*
            Name                : BSTR'''
        return super(IMosaicDataset, self).ApplyFunction(pFunction, pArguments, Name)
    def ClearFunction(self):
        '''Method IMosaicDataset.ClearFunction'''
        return super(IMosaicDataset, self).ClearFunction()
    def get_RelativePath(self):
        '''Method IMosaicDataset.get_RelativePath

           OUTPUT
            pPath               : BSTR*'''
        return super(IMosaicDataset, self).get_RelativePath()
    def put_RelativePath(self, pPath):
        '''Method IMosaicDataset.put_RelativePath

           INPUT
            pPath               : BSTR'''
        return super(IMosaicDataset, self).put_RelativePath(pPath)
    Boundary = property(get_Boundary, None, None)
    BoundaryGeometry = property(get_BoundaryGeometry, None, None)
    Catalog = property(get_Catalog, None, None)
    CatalogType = property(get_CatalogType, None, None)
    Children = property(get_Children, None, None)
    DeviceDpi = property(get_DeviceDpi, put_DeviceDpi, None)
    DodgingTable = property(get_DodgingTable, None, None)
    LevelsTable = property(get_LevelsTable, putref_LevelsTable, None)
    LogTable = property(get_LogTable, putref_LogTable, None)
    MosaicFunction = property(get_MosaicFunction, None, None)
    MosaicFunctionArguments = property(get_MosaicFunctionArguments, None, None)
    OverviewTable = property(get_OverviewTable, putref_OverviewTable, None)
    RasterTypeTable = property(get_RasterTypeTable, putref_RasterTypeTable, None)
    Referenced = property(get_Referenced, put_Referenced, None)
    RelativePath = property(get_RelativePath, put_RelativePath, None)
    Seamline = property(get_Seamline, None, None)
    StereoTable = property(get_StereoTable, None, None)
    VisibleFields = property(get_VisibleFields, None, None)

class IItemTemplate(_esriDataSourcesRaster.IItemTemplate):
    _IID = uuid.UUID('205b20a1-3bc1-4270-acc9-6f73c1840007')

    def __init__(self, *args, **kw):
        super(IItemTemplate, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, pItemTemplateName):
        '''Method IItemTemplate.put_Name

           INPUT
            pItemTemplateName   : BSTR'''
        return super(IItemTemplate, self).put_Name(pItemTemplateName)
    def get_Name(self):
        '''Method IItemTemplate.get_Name

           OUTPUT
            pItemTemplateName   : BSTR*'''
        return super(IItemTemplate, self).get_Name()
    def put_Enabled(self, pbEnabled):
        '''Method IItemTemplate.put_Enabled

           INPUT
            pbEnabled           : VARIANT_BOOL'''
        return super(IItemTemplate, self).put_Enabled(pbEnabled)
    def get_Enabled(self):
        '''Method IItemTemplate.get_Enabled

           OUTPUT
            pbEnabled           : VARIANT_BOOL*'''
        return super(IItemTemplate, self).get_Enabled()
    def putref_RasterFunctionTemplate(self, ppFunctionTemplate):
        '''Method IItemTemplate.putref_RasterFunctionTemplate

           INPUT
            ppFunctionTemplate  : IRasterFunctionTemplate*'''
        return super(IItemTemplate, self).putref_RasterFunctionTemplate(ppFunctionTemplate)
    def get_RasterFunctionTemplate(self):
        '''Method IItemTemplate.get_RasterFunctionTemplate

           OUTPUT
            ppFunctionTemplate  : IRasterFunctionTemplate**'''
        return super(IItemTemplate, self).get_RasterFunctionTemplate()
    def put_OutputDatasetTag(self, pOutputDatasetTag):
        '''Method IItemTemplate.put_OutputDatasetTag

           INPUT
            pOutputDatasetTag   : BSTR'''
        return super(IItemTemplate, self).put_OutputDatasetTag(pOutputDatasetTag)
    def get_OutputDatasetTag(self):
        '''Method IItemTemplate.get_OutputDatasetTag

           OUTPUT
            pOutputDatasetTag   : BSTR*'''
        return super(IItemTemplate, self).get_OutputDatasetTag()
    def put_PrimaryInputDatasetTag(self, pPrimaryInputDatasetTag):
        '''Method IItemTemplate.put_PrimaryInputDatasetTag

           INPUT
            pPrimaryInputDatasetTag: BSTR'''
        return super(IItemTemplate, self).put_PrimaryInputDatasetTag(pPrimaryInputDatasetTag)
    def get_PrimaryInputDatasetTag(self):
        '''Method IItemTemplate.get_PrimaryInputDatasetTag

           OUTPUT
            pPrimaryInputDatasetTag: BSTR*'''
        return super(IItemTemplate, self).get_PrimaryInputDatasetTag()
    def put_IntersectFootprints(self, pbIntersectFootprints):
        '''Method IItemTemplate.put_IntersectFootprints

           INPUT
            pbIntersectFootprints: VARIANT_BOOL'''
        return super(IItemTemplate, self).put_IntersectFootprints(pbIntersectFootprints)
    def get_IntersectFootprints(self):
        '''Method IItemTemplate.get_IntersectFootprints

           OUTPUT
            pbIntersectFootprints: VARIANT_BOOL*'''
        return super(IItemTemplate, self).get_IntersectFootprints()
    Enabled = property(get_Enabled, put_Enabled, None)
    IntersectFootprints = property(get_IntersectFootprints, put_IntersectFootprints, None)
    Name = property(get_Name, put_Name, None)
    OutputDatasetTag = property(get_OutputDatasetTag, put_OutputDatasetTag, None)
    PrimaryInputDatasetTag = property(get_PrimaryInputDatasetTag, put_PrimaryInputDatasetTag, None)
    RasterFunctionTemplate = property(get_RasterFunctionTemplate, putref_RasterFunctionTemplate, None)

class IItemURI(_esriDataSourcesRaster.IItemURI):
    _IID = uuid.UUID('0fc1719b-b1aa-4d23-af07-932490a18075')

    def __init__(self, *args, **kw):
        super(IItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Key(self, pKeyString):
        '''Method IItemURI.put_Key

           INPUT
            pKeyString          : BSTR'''
        return super(IItemURI, self).put_Key(pKeyString)
    def get_Key(self):
        '''Method IItemURI.get_Key

           OUTPUT
            pKeyString          : BSTR*'''
        return super(IItemURI, self).get_Key()
    def put_Tag(self, pItemTag):
        '''Method IItemURI.put_Tag

           INPUT
            pItemTag            : BSTR'''
        return super(IItemURI, self).put_Tag(pItemTag)
    def get_Tag(self):
        '''Method IItemURI.get_Tag

           OUTPUT
            pItemTag            : BSTR*'''
        return super(IItemURI, self).get_Tag()
    def put_Group(self, pItemGroup):
        '''Method IItemURI.put_Group

           INPUT
            pItemGroup          : BSTR'''
        return super(IItemURI, self).put_Group(pItemGroup)
    def get_Group(self):
        '''Method IItemURI.get_Group

           OUTPUT
            pItemGroup          : BSTR*'''
        return super(IItemURI, self).get_Group()
    def put_DisplayName(self, pDisplayName):
        '''Method IItemURI.put_DisplayName

           INPUT
            pDisplayName        : BSTR'''
        return super(IItemURI, self).put_DisplayName(pDisplayName)
    def get_DisplayName(self):
        '''Method IItemURI.get_DisplayName

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(IItemURI, self).get_DisplayName()
    def put_ProductName(self, pProductName):
        '''Method IItemURI.put_ProductName

           INPUT
            pProductName        : BSTR'''
        return super(IItemURI, self).put_ProductName(pProductName)
    def get_ProductName(self):
        '''Method IItemURI.get_ProductName

           OUTPUT
            pProductName        : BSTR*'''
        return super(IItemURI, self).get_ProductName()
    def put_SourceTimeStamp(self, pSourceTimeStamp):
        '''Method IItemURI.put_SourceTimeStamp

           INPUT
            pSourceTimeStamp    : DATE'''
        return super(IItemURI, self).put_SourceTimeStamp(pSourceTimeStamp)
    def get_SourceTimeStamp(self):
        '''Method IItemURI.get_SourceTimeStamp

           OUTPUT
            pSourceTimeStamp    : DATE*'''
        return super(IItemURI, self).get_SourceTimeStamp()
    def putref_AuxiliaryPaths(self, ppAuxiliaryPaths):
        '''Method IItemURI.putref_AuxiliaryPaths

           INPUT
            ppAuxiliaryPaths    : IStringArray*'''
        return super(IItemURI, self).putref_AuxiliaryPaths(ppAuxiliaryPaths)
    def get_AuxiliaryPaths(self):
        '''Method IItemURI.get_AuxiliaryPaths

           OUTPUT
            ppAuxiliaryPaths    : IStringArray**'''
        return super(IItemURI, self).get_AuxiliaryPaths()
    AuxiliaryPaths = property(get_AuxiliaryPaths, putref_AuxiliaryPaths, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    Group = property(get_Group, put_Group, None)
    Key = property(get_Key, put_Key, None)
    ProductName = property(get_ProductName, put_ProductName, None)
    SourceTimeStamp = property(get_SourceTimeStamp, put_SourceTimeStamp, None)
    Tag = property(get_Tag, put_Tag, None)

class IItemURIArray(_esriDataSourcesRaster.IItemURIArray):
    _IID = uuid.UUID('84ae2bff-9ddf-4edd-9505-f86e83aaae23')
    def get_Count(self):
        '''Method IItemURIArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IItemURIArray, self).get_Count()
    def get_Element(self, index):
        '''Method IItemURIArray.get_Element

           INPUT
            index               : long

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IItemURIArray, self).get_Element(index)
    def Remove(self, index):
        '''Method IItemURIArray.Remove

           INPUT
            index               : long'''
        return super(IItemURIArray, self).Remove(index)
    def RemoveAll(self):
        '''Method IItemURIArray.RemoveAll'''
        return super(IItemURIArray, self).RemoveAll()
    def Add(self, pItemURI):
        '''Method IItemURIArray.Add

           INPUT
            pItemURI            : IItemURI*'''
        return super(IItemURIArray, self).Add(pItemURI)
    def Insert(self, index, pItemURI):
        '''Method IItemURIArray.Insert

           INPUTS
            index               : long
            pItemURI            : IItemURI*'''
        return super(IItemURIArray, self).Insert(index, pItemURI)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class ICellSizeLevel(_esriDataSourcesRaster.ICellSizeLevel):
    _IID = uuid.UUID('cb2f5079-e498-4d7c-aedc-f7ecb4deb021')

    def __init__(self, *args, **kw):
        super(ICellSizeLevel, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CellSize(self, pCellsize):
        '''Method ICellSizeLevel.put_CellSize

           INPUT
            pCellsize           : double'''
        return super(ICellSizeLevel, self).put_CellSize(pCellsize)
    def get_CellSize(self):
        '''Method ICellSizeLevel.get_CellSize

           OUTPUT
            pCellsize           : double*'''
        return super(ICellSizeLevel, self).get_CellSize()
    def putref_Geometry(self, ppLevelBoundary):
        '''Method ICellSizeLevel.putref_Geometry

           INPUT
            ppLevelBoundary     : IGeometry*'''
        return super(ICellSizeLevel, self).putref_Geometry(ppLevelBoundary)
    def get_Geometry(self):
        '''Method ICellSizeLevel.get_Geometry

           OUTPUT
            ppLevelBoundary     : IGeometry**'''
        return super(ICellSizeLevel, self).get_Geometry()
    def put_MinimumCellSize(self, pMinimumCellSize):
        '''Method ICellSizeLevel.put_MinimumCellSize

           INPUT
            pMinimumCellSize    : double'''
        return super(ICellSizeLevel, self).put_MinimumCellSize(pMinimumCellSize)
    def get_MinimumCellSize(self):
        '''Method ICellSizeLevel.get_MinimumCellSize

           OUTPUT
            pMinimumCellSize    : double*'''
        return super(ICellSizeLevel, self).get_MinimumCellSize()
    def put_MaximumCellSize(self, pMaximumCellSize):
        '''Method ICellSizeLevel.put_MaximumCellSize

           INPUT
            pMaximumCellSize    : double'''
        return super(ICellSizeLevel, self).put_MaximumCellSize(pMaximumCellSize)
    def get_MaximumCellSize(self):
        '''Method ICellSizeLevel.get_MaximumCellSize

           OUTPUT
            pMaximumCellSize    : double*'''
        return super(ICellSizeLevel, self).get_MaximumCellSize()
    def put_ID(self, pDescriptionID):
        '''Method ICellSizeLevel.put_ID

           INPUT
            pDescriptionID      : long'''
        return super(ICellSizeLevel, self).put_ID(pDescriptionID)
    def get_ID(self):
        '''Method ICellSizeLevel.get_ID

           OUTPUT
            pDescriptionID      : long*'''
        return super(ICellSizeLevel, self).get_ID()
    CellSize = property(get_CellSize, put_CellSize, None)
    Geometry = property(get_Geometry, putref_Geometry, None)
    ID = property(get_ID, put_ID, None)
    MaximumCellSize = property(get_MaximumCellSize, put_MaximumCellSize, None)
    MinimumCellSize = property(get_MinimumCellSize, put_MinimumCellSize, None)

class ICellSizeLevels(_esriDataSourcesRaster.ICellSizeLevels):
    _IID = uuid.UUID('f06297c0-c9ec-4a79-97c3-b487c6619081')
    def get_Count(self):
        '''Method ICellSizeLevels.get_Count

           OUTPUT
            Count               : long*'''
        return super(ICellSizeLevels, self).get_Count()
    def get_Element(self, index):
        '''Method ICellSizeLevels.get_Element

           INPUT
            index               : long

           OUTPUT
            ppCellSizeLevel     : ICellSizeLevel**'''
        return super(ICellSizeLevels, self).get_Element(index)
    def Remove(self, index):
        '''Method ICellSizeLevels.Remove

           INPUT
            index               : long'''
        return super(ICellSizeLevels, self).Remove(index)
    def RemoveAll(self):
        '''Method ICellSizeLevels.RemoveAll'''
        return super(ICellSizeLevels, self).RemoveAll()
    def Add(self, pCellSizeLevel):
        '''Method ICellSizeLevels.Add

           INPUT
            pCellSizeLevel      : ICellSizeLevel*'''
        return super(ICellSizeLevels, self).Add(pCellSizeLevel)
    def Insert(self, index, pCellSizeLevels):
        '''Method ICellSizeLevels.Insert

           INPUTS
            index               : long
            pCellSizeLevels     : ICellSizeLevel*'''
        return super(ICellSizeLevels, self).Insert(index, pCellSizeLevels)
    def Find(self, searchCellSize):
        '''Method ICellSizeLevels.Find

           INPUT
            searchCellSize      : double

           OUTPUT
            pCellSizeLevelItemIndex: long*'''
        return super(ICellSizeLevels, self).Find(searchCellSize)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IDataSourceCrawler(_esriDataSourcesRaster.IDataSourceCrawler):
    _IID = uuid.UUID('a1631439-6f80-4ac3-b559-0d1836f6b13a')

    def __init__(self, *args, **kw):
        super(IDataSourceCrawler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CrawlerItemType(self):
        '''Method IDataSourceCrawler.get_CrawlerItemType

           OUTPUT
            pCrawlerItemType    : esriCrawlerDataSourceType*'''
        return super(IDataSourceCrawler, self).get_CrawlerItemType()
    def Crawl(self, pTrackCancel):
        '''Method IDataSourceCrawler.Crawl

           INPUT
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppCrawlerItems      : IEnumVariantSimple**'''
        return super(IDataSourceCrawler, self).Crawl(pTrackCancel)
    def get_CanFilterByTime(self):
        '''Method IDataSourceCrawler.get_CanFilterByTime

           OUTPUT
            pbCanFilterByTime   : VARIANT_BOOL*'''
        return super(IDataSourceCrawler, self).get_CanFilterByTime()
    def putref_TimeExtent(self, ppTimeExtent):
        '''Method IDataSourceCrawler.putref_TimeExtent

           INPUT
            ppTimeExtent        : ITimeExtent*'''
        return super(IDataSourceCrawler, self).putref_TimeExtent(ppTimeExtent)
    def get_TimeExtent(self):
        '''Method IDataSourceCrawler.get_TimeExtent

           OUTPUT
            ppTimeExtent        : ITimeExtent**'''
        return super(IDataSourceCrawler, self).get_TimeExtent()
    def get_CanFilterByExpression(self):
        '''Method IDataSourceCrawler.get_CanFilterByExpression

           OUTPUT
            pbCanFilterByExpression: VARIANT_BOOL*'''
        return super(IDataSourceCrawler, self).get_CanFilterByExpression()
    def put_Filter(self, pFilter):
        '''Method IDataSourceCrawler.put_Filter

           INPUT
            pFilter             : BSTR'''
        return super(IDataSourceCrawler, self).put_Filter(pFilter)
    def get_Filter(self):
        '''Method IDataSourceCrawler.get_Filter

           OUTPUT
            pFilter             : BSTR*'''
        return super(IDataSourceCrawler, self).get_Filter()
    CanFilterByExpression = property(get_CanFilterByExpression, None, None)
    CanFilterByTime = property(get_CanFilterByTime, None, None)
    CrawlerItemType = property(get_CrawlerItemType, None, None)
    Filter = property(get_Filter, put_Filter, None)
    TimeExtent = property(get_TimeExtent, putref_TimeExtent, None)

class IBuilderItem(_esriDataSourcesRaster.IBuilderItem):
    _IID = uuid.UUID('49944736-3dd8-4e4e-b346-46868e0cf13f')

    def __init__(self, *args, **kw):
        super(IBuilderItem, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_URI(self, ppItemURI):
        '''Method IBuilderItem.putref_URI

           INPUT
            ppItemURI           : IItemURI*'''
        return super(IBuilderItem, self).putref_URI(ppItemURI)
    def get_URI(self):
        '''Method IBuilderItem.get_URI

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IBuilderItem, self).get_URI()
    def putref_Dataset(self, ppDataset):
        '''Method IBuilderItem.putref_Dataset

           INPUT
            ppDataset           : IFunctionRasterDataset*'''
        return super(IBuilderItem, self).putref_Dataset(ppDataset)
    def get_Dataset(self):
        '''Method IBuilderItem.get_Dataset

           OUTPUT
            ppDataset           : IFunctionRasterDataset**'''
        return super(IBuilderItem, self).get_Dataset()
    def get_Footprint(self):
        '''Method IBuilderItem.get_Footprint

           OUTPUT
            ppFootprint         : IGeometry**'''
        return super(IBuilderItem, self).get_Footprint()
    def putref_Footprint(self, ppFootprint):
        '''Method IBuilderItem.putref_Footprint

           INPUT
            ppFootprint         : IGeometry*'''
        return super(IBuilderItem, self).putref_Footprint(ppFootprint)
    def get_Seamline(self):
        '''Method IBuilderItem.get_Seamline

           OUTPUT
            ppSeamline          : IGeometry**'''
        return super(IBuilderItem, self).get_Seamline()
    def putref_Seamline(self, ppSeamline):
        '''Method IBuilderItem.putref_Seamline

           INPUT
            ppSeamline          : IGeometry*'''
        return super(IBuilderItem, self).putref_Seamline(ppSeamline)
    def put_StereoID(self, pStereoID):
        '''Method IBuilderItem.put_StereoID

           INPUT
            pStereoID           : BSTR'''
        return super(IBuilderItem, self).put_StereoID(pStereoID)
    def get_StereoID(self):
        '''Method IBuilderItem.get_StereoID

           OUTPUT
            pStereoID           : BSTR*'''
        return super(IBuilderItem, self).get_StereoID()
    def putref_StereoPairs(self, ppStereoPairs):
        '''Method IBuilderItem.putref_StereoPairs

           INPUT
            ppStereoPairs       : IStringArray*'''
        return super(IBuilderItem, self).putref_StereoPairs(ppStereoPairs)
    def get_StereoPairs(self):
        '''Method IBuilderItem.get_StereoPairs

           OUTPUT
            ppStereoPairs       : IStringArray**'''
        return super(IBuilderItem, self).get_StereoPairs()
    def putref_Variables(self, ppVariables):
        '''Method IBuilderItem.putref_Variables

           INPUT
            ppVariables         : IPropertySet*'''
        return super(IBuilderItem, self).putref_Variables(ppVariables)
    def get_Variables(self):
        '''Method IBuilderItem.get_Variables

           OUTPUT
            ppVariables         : IPropertySet**'''
        return super(IBuilderItem, self).get_Variables()
    def AddVariable(self, variableName, vtVariableValue, bPrefixWithTag):
        '''Method IBuilderItem.AddVariable

           INPUTS
            variableName        : BSTR
            vtVariableValue     : VARIANT
            bPrefixWithTag      : VARIANT_BOOL'''
        return super(IBuilderItem, self).AddVariable(variableName, vtVariableValue, bPrefixWithTag)
    def put_Category(self, pItemCategory):
        '''Method IBuilderItem.put_Category

           INPUT
            pItemCategory       : esriRasterCatalogItemCategory'''
        return super(IBuilderItem, self).put_Category(pItemCategory)
    def get_Category(self):
        '''Method IBuilderItem.get_Category

           OUTPUT
            pItemCategory       : esriRasterCatalogItemCategory*'''
        return super(IBuilderItem, self).get_Category()
    Category = property(get_Category, put_Category, None)
    Dataset = property(get_Dataset, putref_Dataset, None)
    Footprint = property(get_Footprint, putref_Footprint, None)
    Seamline = property(get_Seamline, putref_Seamline, None)
    StereoID = property(get_StereoID, put_StereoID, None)
    StereoPairs = property(get_StereoPairs, putref_StereoPairs, None)
    URI = property(get_URI, putref_URI, None)
    Variables = property(get_Variables, putref_Variables, None)

class IRasterBuilder(_esriDataSourcesRaster.IRasterBuilder):
    _IID = uuid.UUID('b2e3f2d4-5182-4299-aff5-41e5c9017d4f')

    def __init__(self, *args, **kw):
        super(IRasterBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetRecommendedCrawler(self, pDataSourceProperties):
        '''Method IRasterBuilder.GetRecommendedCrawler

           INPUT
            pDataSourceProperties: IPropertySet*

           OUTPUT
            ppRecommendedCrawler: IDataSourceCrawler**'''
        return super(IRasterBuilder, self).GetRecommendedCrawler(pDataSourceProperties)
    def BeginConstruction(self, pCrawler):
        '''Method IRasterBuilder.BeginConstruction

           INPUT
            pCrawler            : IDataSourceCrawler*'''
        return super(IRasterBuilder, self).BeginConstruction(pCrawler)
    def ConstructURIs(self, crawlerItem):
        '''Method IRasterBuilder.ConstructURIs

           INPUT
            crawlerItem         : VARIANT'''
        return super(IRasterBuilder, self).ConstructURIs(crawlerItem)
    def GetNextURI(self):
        '''Method IRasterBuilder.GetNextURI

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IRasterBuilder, self).GetNextURI()
    def EndConstruction(self):
        '''Method IRasterBuilder.EndConstruction

           OUTPUT
            ppRemainingItemURIs : IItemURIArray**'''
        return super(IRasterBuilder, self).EndConstruction()
    def IsStale(self, pItemURI):
        '''Method IRasterBuilder.IsStale

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            pIsStale            : VARIANT_BOOL*'''
        return super(IRasterBuilder, self).IsStale(pItemURI)
    def Build(self, pItemURI):
        '''Method IRasterBuilder.Build

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            ppBuilderItem       : IBuilderItem**'''
        return super(IRasterBuilder, self).Build(pItemURI)
    def putref_Properties(self, ppBuilderPoperties):
        '''Method IRasterBuilder.putref_Properties

           INPUT
            ppBuilderPoperties  : IPropertySet*'''
        return super(IRasterBuilder, self).putref_Properties(ppBuilderPoperties)
    def get_Properties(self):
        '''Method IRasterBuilder.get_Properties

           OUTPUT
            ppBuilderPoperties  : IPropertySet**'''
        return super(IRasterBuilder, self).get_Properties()
    def putref_AuxiliaryFields(self, ppAuxiliaryFields):
        '''Method IRasterBuilder.putref_AuxiliaryFields

           INPUT
            ppAuxiliaryFields   : IFields*'''
        return super(IRasterBuilder, self).putref_AuxiliaryFields(ppAuxiliaryFields)
    def get_AuxiliaryFields(self):
        '''Method IRasterBuilder.get_AuxiliaryFields

           OUTPUT
            ppAuxiliaryFields   : IFields**'''
        return super(IRasterBuilder, self).get_AuxiliaryFields()
    def putref_AuxiliaryFieldAlias(self, ppFieldNameMap):
        '''Method IRasterBuilder.putref_AuxiliaryFieldAlias

           INPUT
            ppFieldNameMap      : IPropertySet*'''
        return super(IRasterBuilder, self).putref_AuxiliaryFieldAlias(ppFieldNameMap)
    def get_AuxiliaryFieldAlias(self):
        '''Method IRasterBuilder.get_AuxiliaryFieldAlias

           OUTPUT
            ppFieldNameMap      : IPropertySet**'''
        return super(IRasterBuilder, self).get_AuxiliaryFieldAlias()
    def get_CanBuildInPlace(self):
        '''Method IRasterBuilder.get_CanBuildInPlace

           OUTPUT
            pbCanBuildInPlace   : VARIANT_BOOL*'''
        return super(IRasterBuilder, self).get_CanBuildInPlace()
    AuxiliaryFieldAlias = property(get_AuxiliaryFieldAlias, putref_AuxiliaryFieldAlias, None)
    AuxiliaryFields = property(get_AuxiliaryFields, putref_AuxiliaryFields, None)
    CanBuildInPlace = property(get_CanBuildInPlace, None, None)
    Properties = property(get_Properties, putref_Properties, None)

class IItemURIFilter(_esriDataSourcesRaster.IItemURIFilter):
    _IID = uuid.UUID('7aaf922e-a33f-4628-9040-ea408e7a747c')

    def __init__(self, *args, **kw):
        super(IItemURIFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, pFilterName):
        '''Method IItemURIFilter.put_Name

           INPUT
            pFilterName         : BSTR'''
        return super(IItemURIFilter, self).put_Name(pFilterName)
    def get_Name(self):
        '''Method IItemURIFilter.get_Name

           OUTPUT
            pFilterName         : BSTR*'''
        return super(IItemURIFilter, self).get_Name()
    def putref_SupportedTemplateNames(self, ppTemplateNames):
        '''Method IItemURIFilter.putref_SupportedTemplateNames

           INPUT
            ppTemplateNames     : IStringArray*'''
        return super(IItemURIFilter, self).putref_SupportedTemplateNames(ppTemplateNames)
    def get_SupportedTemplateNames(self):
        '''Method IItemURIFilter.get_SupportedTemplateNames

           OUTPUT
            ppTemplateNames     : IStringArray**'''
        return super(IItemURIFilter, self).get_SupportedTemplateNames()
    def put_SupportsOrthorectification(self, pbSupportsOrthorectification):
        '''Method IItemURIFilter.put_SupportsOrthorectification

           INPUT
            pbSupportsOrthorectification: VARIANT_BOOL'''
        return super(IItemURIFilter, self).put_SupportsOrthorectification(pbSupportsOrthorectification)
    def get_SupportsOrthorectification(self):
        '''Method IItemURIFilter.get_SupportsOrthorectification

           OUTPUT
            pbSupportsOrthorectification: VARIANT_BOOL*'''
        return super(IItemURIFilter, self).get_SupportsOrthorectification()
    def ApplyFilter(self, pItemURI):
        '''Method IItemURIFilter.ApplyFilter

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            pIncludeItemURI     : VARIANT_BOOL*'''
        return super(IItemURIFilter, self).ApplyFilter(pItemURI)
    Name = property(get_Name, put_Name, None)
    SupportedTemplateNames = property(get_SupportedTemplateNames, putref_SupportedTemplateNames, None)
    SupportsOrthorectification = property(get_SupportsOrthorectification, put_SupportsOrthorectification, None)

class IItemTemplateArray(_esriDataSourcesRaster.IItemTemplateArray):
    _IID = uuid.UUID('261be5cb-6940-4064-a07a-e3b826eb72f5')
    def get_Count(self):
        '''Method IItemTemplateArray.get_Count

           OUTPUT
            Count               : long*'''
        return super(IItemTemplateArray, self).get_Count()
    def get_Element(self, index):
        '''Method IItemTemplateArray.get_Element

           INPUT
            index               : long

           OUTPUT
            ppItemTemplate      : IItemTemplate**'''
        return super(IItemTemplateArray, self).get_Element(index)
    def Remove(self, index):
        '''Method IItemTemplateArray.Remove

           INPUT
            index               : long'''
        return super(IItemTemplateArray, self).Remove(index)
    def RemoveAll(self):
        '''Method IItemTemplateArray.RemoveAll'''
        return super(IItemTemplateArray, self).RemoveAll()
    def Add(self, pItemTemplate):
        '''Method IItemTemplateArray.Add

           INPUT
            pItemTemplate       : IItemTemplate*'''
        return super(IItemTemplateArray, self).Add(pItemTemplate)
    def Insert(self, index, pItemTemplate):
        '''Method IItemTemplateArray.Insert

           INPUTS
            index               : long
            pItemTemplate       : IItemTemplate*'''
        return super(IItemTemplateArray, self).Insert(index, pItemTemplate)
    Count = property(get_Count, None, None)
    Element = IndexProperty(get_Element, None)

class IRasterType(_esriDataSourcesRaster.IRasterType):
    _IID = uuid.UUID('e5eea64c-91c9-4dca-b16a-516af8a0ca0b')

    def __init__(self, *args, **kw):
        super(IRasterType, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FullName(self, ppRasterTypeName):
        '''Method IRasterType.putref_FullName

           INPUT
            ppRasterTypeName    : IName*'''
        return super(IRasterType, self).putref_FullName(ppRasterTypeName)
    def get_FullName(self):
        '''Method IRasterType.get_FullName

           OUTPUT
            ppRasterTypeName    : IName**'''
        return super(IRasterType, self).get_FullName()
    def putref_RasterBuilder(self, ppRasterBuilder):
        '''Method IRasterType.putref_RasterBuilder

           INPUT
            ppRasterBuilder     : IRasterBuilder*'''
        return super(IRasterType, self).putref_RasterBuilder(ppRasterBuilder)
    def get_RasterBuilder(self):
        '''Method IRasterType.get_RasterBuilder

           OUTPUT
            ppRasterBuilder     : IRasterBuilder**'''
        return super(IRasterType, self).get_RasterBuilder()
    def putref_URIFilter(self, ppItemURIFilter):
        '''Method IRasterType.putref_URIFilter

           INPUT
            ppItemURIFilter     : IItemURIFilter*'''
        return super(IRasterType, self).putref_URIFilter(ppItemURIFilter)
    def get_URIFilter(self):
        '''Method IRasterType.get_URIFilter

           OUTPUT
            ppItemURIFilter     : IItemURIFilter**'''
        return super(IRasterType, self).get_URIFilter()
    def putref_ItemTemplates(self, ppItemTemplateArray):
        '''Method IRasterType.putref_ItemTemplates

           INPUT
            ppItemTemplateArray : IItemTemplateArray*'''
        return super(IRasterType, self).putref_ItemTemplates(ppItemTemplateArray)
    def get_ItemTemplates(self):
        '''Method IRasterType.get_ItemTemplates

           OUTPUT
            ppItemTemplateArray : IItemTemplateArray**'''
        return super(IRasterType, self).get_ItemTemplates()
    def get_DefaultParameters(self):
        '''Method IRasterType.get_DefaultParameters

           OUTPUT
            ppDefaultParameters : IPropertySet**'''
        return super(IRasterType, self).get_DefaultParameters()
    def putref_Parameters(self, ppInputParameters):
        '''Method IRasterType.putref_Parameters

           INPUT
            ppInputParameters   : IPropertySet*'''
        return super(IRasterType, self).putref_Parameters(ppInputParameters)
    def get_Parameters(self):
        '''Method IRasterType.get_Parameters

           OUTPUT
            ppInputParameters   : IPropertySet**'''
        return super(IRasterType, self).get_Parameters()
    DefaultParameters = property(get_DefaultParameters, None, None)
    FullName = property(get_FullName, putref_FullName, None)
    ItemTemplates = property(get_ItemTemplates, putref_ItemTemplates, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    RasterBuilder = property(get_RasterBuilder, putref_RasterBuilder, None)
    URIFilter = property(get_URIFilter, putref_URIFilter, None)

class IAddRastersParameters(_esriDataSourcesRaster.IAddRastersParameters):
    _IID = uuid.UUID('88062d66-b095-4616-bbbe-5931b1fe1c4d')

    def __init__(self, *args, **kw):
        super(IAddRastersParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Crawler(self, ppCrawler):
        '''Method IAddRastersParameters.putref_Crawler

           INPUT
            ppCrawler           : IDataSourceCrawler*'''
        return super(IAddRastersParameters, self).putref_Crawler(ppCrawler)
    def get_Crawler(self):
        '''Method IAddRastersParameters.get_Crawler

           OUTPUT
            ppCrawler           : IDataSourceCrawler**'''
        return super(IAddRastersParameters, self).get_Crawler()
    def putref_RasterType(self, ppRasterType):
        '''Method IAddRastersParameters.putref_RasterType

           INPUT
            ppRasterType        : IRasterType*'''
        return super(IAddRastersParameters, self).putref_RasterType(ppRasterType)
    def get_RasterType(self):
        '''Method IAddRastersParameters.get_RasterType

           OUTPUT
            ppRasterType        : IRasterType**'''
        return super(IAddRastersParameters, self).get_RasterType()
    def put_DuplicateItemsAction(self, pAction):
        '''Method IAddRastersParameters.put_DuplicateItemsAction

           INPUT
            pAction             : esriDuplicateItemsAction'''
        return super(IAddRastersParameters, self).put_DuplicateItemsAction(pAction)
    def get_DuplicateItemsAction(self):
        '''Method IAddRastersParameters.get_DuplicateItemsAction

           OUTPUT
            pAction             : esriDuplicateItemsAction*'''
        return super(IAddRastersParameters, self).get_DuplicateItemsAction()
    def put_SynchronizeItems(self, pbSynchronizeItems):
        '''Method IAddRastersParameters.put_SynchronizeItems

           INPUT
            pbSynchronizeItems  : VARIANT_BOOL'''
        return super(IAddRastersParameters, self).put_SynchronizeItems(pbSynchronizeItems)
    def get_SynchronizeItems(self):
        '''Method IAddRastersParameters.get_SynchronizeItems

           OUTPUT
            pbSynchronizeItems  : VARIANT_BOOL*'''
        return super(IAddRastersParameters, self).get_SynchronizeItems()
    def put_AllowInPlaceSync(self, pbAllowInPlaceSync):
        '''Method IAddRastersParameters.put_AllowInPlaceSync

           INPUT
            pbAllowInPlaceSync  : VARIANT_BOOL'''
        return super(IAddRastersParameters, self).put_AllowInPlaceSync(pbAllowInPlaceSync)
    def get_AllowInPlaceSync(self):
        '''Method IAddRastersParameters.get_AllowInPlaceSync

           OUTPUT
            pbAllowInPlaceSync  : VARIANT_BOOL*'''
        return super(IAddRastersParameters, self).get_AllowInPlaceSync()
    def put_Filter(self, pFilter):
        '''Method IAddRastersParameters.put_Filter

           INPUT
            pFilter             : BSTR'''
        return super(IAddRastersParameters, self).put_Filter(pFilter)
    def get_Filter(self):
        '''Method IAddRastersParameters.get_Filter

           OUTPUT
            pFilter             : BSTR*'''
        return super(IAddRastersParameters, self).get_Filter()
    def putref_TimeExtent(self, ppTimeExtent):
        '''Method IAddRastersParameters.putref_TimeExtent

           INPUT
            ppTimeExtent        : ITimeExtent*'''
        return super(IAddRastersParameters, self).putref_TimeExtent(ppTimeExtent)
    def get_TimeExtent(self):
        '''Method IAddRastersParameters.get_TimeExtent

           OUTPUT
            ppTimeExtent        : ITimeExtent**'''
        return super(IAddRastersParameters, self).get_TimeExtent()
    AllowInPlaceSync = property(get_AllowInPlaceSync, put_AllowInPlaceSync, None)
    Crawler = property(get_Crawler, putref_Crawler, None)
    DuplicateItemsAction = property(get_DuplicateItemsAction, put_DuplicateItemsAction, None)
    Filter = property(get_Filter, put_Filter, None)
    RasterType = property(get_RasterType, putref_RasterType, None)
    SynchronizeItems = property(get_SynchronizeItems, put_SynchronizeItems, None)
    TimeExtent = property(get_TimeExtent, putref_TimeExtent, None)

class IRasterThumbnailBuilder(_esriDataSourcesRaster.IRasterThumbnailBuilder):
    _IID = uuid.UUID('8af44654-44c9-4cfa-9a27-c04a61d1e6ce')

    def __init__(self, *args, **kw):
        super(IRasterThumbnailBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ThumbnailFormat(self, pThumbnailFormat):
        '''Method IRasterThumbnailBuilder.put_ThumbnailFormat

           INPUT
            pThumbnailFormat    : BSTR'''
        return super(IRasterThumbnailBuilder, self).put_ThumbnailFormat(pThumbnailFormat)
    def get_ThumbnailFormat(self):
        '''Method IRasterThumbnailBuilder.get_ThumbnailFormat

           OUTPUT
            pThumbnailFormat    : BSTR*'''
        return super(IRasterThumbnailBuilder, self).get_ThumbnailFormat()
    def BuildThumbnail(self, pItemURI, pRaster):
        '''Method IRasterThumbnailBuilder.BuildThumbnail

           INPUTS
            pItemURI            : IItemURI*
            pRaster             : IRaster*

           OUTPUT
            ppThumbnailBytes    : SAFEARRAY**'''
        return super(IRasterThumbnailBuilder, self).BuildThumbnail(pItemURI, pRaster)
    ThumbnailFormat = property(get_ThumbnailFormat, put_ThumbnailFormat, None)

class ISynchronizeParameters(_esriDataSourcesRaster.ISynchronizeParameters):
    _IID = uuid.UUID('241b22c3-75ef-468b-a4a3-758fd9da08df')

    def __init__(self, *args, **kw):
        super(ISynchronizeParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DefaultSpatialReference(self, ppDefaultSrs):
        '''Method ISynchronizeParameters.putref_DefaultSpatialReference

           INPUT
            ppDefaultSrs        : ISpatialReference*'''
        return super(ISynchronizeParameters, self).putref_DefaultSpatialReference(ppDefaultSrs)
    def get_DefaultSpatialReference(self):
        '''Method ISynchronizeParameters.get_DefaultSpatialReference

           OUTPUT
            ppDefaultSrs        : ISpatialReference**'''
        return super(ISynchronizeParameters, self).get_DefaultSpatialReference()
    def put_SyncOnlyStaleItems(self, pbSyncOnlyStaleItems):
        '''Method ISynchronizeParameters.put_SyncOnlyStaleItems

           INPUT
            pbSyncOnlyStaleItems: VARIANT_BOOL'''
        return super(ISynchronizeParameters, self).put_SyncOnlyStaleItems(pbSyncOnlyStaleItems)
    def get_SyncOnlyStaleItems(self):
        '''Method ISynchronizeParameters.get_SyncOnlyStaleItems

           OUTPUT
            pbSyncOnlyStaleItems: VARIANT_BOOL*'''
        return super(ISynchronizeParameters, self).get_SyncOnlyStaleItems()
    def put_RemoveInvalidItems(self, pbRemoveInvalidItems):
        '''Method ISynchronizeParameters.put_RemoveInvalidItems

           INPUT
            pbRemoveInvalidItems: VARIANT_BOOL'''
        return super(ISynchronizeParameters, self).put_RemoveInvalidItems(pbRemoveInvalidItems)
    def get_RemoveInvalidItems(self):
        '''Method ISynchronizeParameters.get_RemoveInvalidItems

           OUTPUT
            pbRemoveInvalidItems: VARIANT_BOOL*'''
        return super(ISynchronizeParameters, self).get_RemoveInvalidItems()
    def put_MaximumPyramidLevel(self, pMaximumPyramidLevel):
        '''Method ISynchronizeParameters.put_MaximumPyramidLevel

           INPUT
            pMaximumPyramidLevel: long'''
        return super(ISynchronizeParameters, self).put_MaximumPyramidLevel(pMaximumPyramidLevel)
    def get_MaximumPyramidLevel(self):
        '''Method ISynchronizeParameters.get_MaximumPyramidLevel

           OUTPUT
            pMaximumPyramidLevel: long*'''
        return super(ISynchronizeParameters, self).get_MaximumPyramidLevel()
    def put_MinimumRows(self, pMinimumRows):
        '''Method ISynchronizeParameters.put_MinimumRows

           INPUT
            pMinimumRows        : long'''
        return super(ISynchronizeParameters, self).put_MinimumRows(pMinimumRows)
    def get_MinimumRows(self):
        '''Method ISynchronizeParameters.get_MinimumRows

           OUTPUT
            pMinimumRows        : long*'''
        return super(ISynchronizeParameters, self).get_MinimumRows()
    def put_MinimumColumns(self, pMinimumColumns):
        '''Method ISynchronizeParameters.put_MinimumColumns

           INPUT
            pMinimumColumns     : long'''
        return super(ISynchronizeParameters, self).put_MinimumColumns(pMinimumColumns)
    def get_MinimumColumns(self):
        '''Method ISynchronizeParameters.get_MinimumColumns

           OUTPUT
            pMinimumColumns     : long*'''
        return super(ISynchronizeParameters, self).get_MinimumColumns()
    def put_MaximumHighCellSize(self, pMaximumHighCellSize):
        '''Method ISynchronizeParameters.put_MaximumHighCellSize

           INPUT
            pMaximumHighCellSize: double'''
        return super(ISynchronizeParameters, self).put_MaximumHighCellSize(pMaximumHighCellSize)
    def get_MaximumHighCellSize(self):
        '''Method ISynchronizeParameters.get_MaximumHighCellSize

           OUTPUT
            pMaximumHighCellSize: double*'''
        return super(ISynchronizeParameters, self).get_MaximumHighCellSize()
    def put_ComputeStatistics(self, pbComputeStatistics):
        '''Method ISynchronizeParameters.put_ComputeStatistics

           INPUT
            pbComputeStatistics : VARIANT_BOOL'''
        return super(ISynchronizeParameters, self).put_ComputeStatistics(pbComputeStatistics)
    def get_ComputeStatistics(self):
        '''Method ISynchronizeParameters.get_ComputeStatistics

           OUTPUT
            pbComputeStatistics : VARIANT_BOOL*'''
        return super(ISynchronizeParameters, self).get_ComputeStatistics()
    def put_BuildPyramids(self, pbBuildPyramids):
        '''Method ISynchronizeParameters.put_BuildPyramids

           INPUT
            pbBuildPyramids     : VARIANT_BOOL'''
        return super(ISynchronizeParameters, self).put_BuildPyramids(pbBuildPyramids)
    def get_BuildPyramids(self):
        '''Method ISynchronizeParameters.get_BuildPyramids

           OUTPUT
            pbBuildPyramids     : VARIANT_BOOL*'''
        return super(ISynchronizeParameters, self).get_BuildPyramids()
    def put_BuildThumbnail(self, pbBuildThumbnail):
        '''Method ISynchronizeParameters.put_BuildThumbnail

           INPUT
            pbBuildThumbnail    : VARIANT_BOOL'''
        return super(ISynchronizeParameters, self).put_BuildThumbnail(pbBuildThumbnail)
    def get_BuildThumbnail(self):
        '''Method ISynchronizeParameters.get_BuildThumbnail

           OUTPUT
            pbBuildThumbnail    : VARIANT_BOOL*'''
        return super(ISynchronizeParameters, self).get_BuildThumbnail()
    def putref_ThumbnailBuilder(self, ppThumbnailBuilder):
        '''Method ISynchronizeParameters.putref_ThumbnailBuilder

           INPUT
            ppThumbnailBuilder  : IRasterThumbnailBuilder*'''
        return super(ISynchronizeParameters, self).putref_ThumbnailBuilder(ppThumbnailBuilder)
    def get_ThumbnailBuilder(self):
        '''Method ISynchronizeParameters.get_ThumbnailBuilder

           OUTPUT
            ppThumbnailBuilder  : IRasterThumbnailBuilder**'''
        return super(ISynchronizeParameters, self).get_ThumbnailBuilder()
    def put_DensificationFactor(self, pDensificationFactor):
        '''Method ISynchronizeParameters.put_DensificationFactor

           INPUT
            pDensificationFactor: double'''
        return super(ISynchronizeParameters, self).put_DensificationFactor(pDensificationFactor)
    def get_DensificationFactor(self):
        '''Method ISynchronizeParameters.get_DensificationFactor

           OUTPUT
            pDensificationFactor: double*'''
        return super(ISynchronizeParameters, self).get_DensificationFactor()
    def put_ResetVisibility(self, pbResetVisibility):
        '''Method ISynchronizeParameters.put_ResetVisibility

           INPUT
            pbResetVisibility   : VARIANT_BOOL'''
        return super(ISynchronizeParameters, self).put_ResetVisibility(pbResetVisibility)
    def get_ResetVisibility(self):
        '''Method ISynchronizeParameters.get_ResetVisibility

           OUTPUT
            pbResetVisibility   : VARIANT_BOOL*'''
        return super(ISynchronizeParameters, self).get_ResetVisibility()
    BuildPyramids = property(get_BuildPyramids, put_BuildPyramids, None)
    BuildThumbnail = property(get_BuildThumbnail, put_BuildThumbnail, None)
    ComputeStatistics = property(get_ComputeStatistics, put_ComputeStatistics, None)
    DefaultSpatialReference = property(get_DefaultSpatialReference, putref_DefaultSpatialReference, None)
    DensificationFactor = property(get_DensificationFactor, put_DensificationFactor, None)
    MaximumHighCellSize = property(get_MaximumHighCellSize, put_MaximumHighCellSize, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, put_MaximumPyramidLevel, None)
    MinimumColumns = property(get_MinimumColumns, put_MinimumColumns, None)
    MinimumRows = property(get_MinimumRows, put_MinimumRows, None)
    RemoveInvalidItems = property(get_RemoveInvalidItems, put_RemoveInvalidItems, None)
    ResetVisibility = property(get_ResetVisibility, put_ResetVisibility, None)
    SyncOnlyStaleItems = property(get_SyncOnlyStaleItems, put_SyncOnlyStaleItems, None)
    ThumbnailBuilder = property(get_ThumbnailBuilder, putref_ThumbnailBuilder, None)

class IRasterTypeOperation(_esriDataSourcesRaster.IRasterTypeOperation):
    _IID = uuid.UUID('2a83ce86-dc8d-4eb6-a6fd-bf3bafccd08e')
    def CreateBuilderItem(self, pItemURI, pDataset, eRasterCategory, pDefaultRasterSrs, pItemFootprint):
        '''Method IRasterTypeOperation.CreateBuilderItem

           INPUTS
            pItemURI            : IItemURI*
            pDataset            : IRasterDataset*
            eRasterCategory     : esriRasterCatalogItemCategory
            pDefaultRasterSrs   : ISpatialReference*
            pItemFootprint      : IGeometry*

           OUTPUT
            ppBuilderItem       : IBuilderItem**'''
        return super(IRasterTypeOperation, self).CreateBuilderItem(pItemURI, pDataset, eRasterCategory, pDefaultRasterSrs, pItemFootprint)
    def OpenRasterDataset(self, DataSource, pRasterInfo, overwrite):
        '''Method IRasterTypeOperation.OpenRasterDataset

           INPUTS
            DataSource          : BSTR
            pRasterInfo         : IRasterInfo*
            overwrite           : VARIANT_BOOL

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterTypeOperation, self).OpenRasterDataset(DataSource, pRasterInfo, overwrite)
    def ClipDatasetToItemFootprint(self, pBuilderItem):
        '''Method IRasterTypeOperation.ClipDatasetToItemFootprint

           INPUT
            pBuilderItem        : IBuilderItem*'''
        return super(IRasterTypeOperation, self).ClipDatasetToItemFootprint(pBuilderItem)
    def ProcessItem(self, pBuilderItem):
        '''Method IRasterTypeOperation.ProcessItem

           INPUT
            pBuilderItem        : IBuilderItem*'''
        return super(IRasterTypeOperation, self).ProcessItem(pBuilderItem)
    def ApplyOrthorectification(self, pDataset):
        '''Method IRasterTypeOperation.ApplyOrthorectification

           INPUT
            pDataset            : IFunctionRasterDataset*

           OUTPUT
            ppDataset           : IFunctionRasterDataset**'''
        return super(IRasterTypeOperation, self).ApplyOrthorectification(pDataset)

class IRasterTypeName(_esriDataSourcesRaster.IRasterTypeName):
    _IID = uuid.UUID('3de899f9-7c59-4d03-9afa-5f526398a6b5')

    def __init__(self, *args, **kw):
        super(IRasterTypeName, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, pName):
        '''Method IRasterTypeName.put_Name

           INPUT
            pName               : BSTR'''
        return super(IRasterTypeName, self).put_Name(pName)
    def get_Name(self):
        '''Method IRasterTypeName.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterTypeName, self).get_Name()
    def putref_MosaicDatasetName(self, ppMosaicDatasetName):
        '''Method IRasterTypeName.putref_MosaicDatasetName

           INPUT
            ppMosaicDatasetName : IMosaicDatasetName*'''
        return super(IRasterTypeName, self).putref_MosaicDatasetName(ppMosaicDatasetName)
    def get_MosaicDatasetName(self):
        '''Method IRasterTypeName.get_MosaicDatasetName

           OUTPUT
            ppMosaicDatasetName : IMosaicDatasetName**'''
        return super(IRasterTypeName, self).get_MosaicDatasetName()
    def put_InstanceID(self, pInstanceID):
        '''Method IRasterTypeName.put_InstanceID

           INPUT
            pInstanceID         : long'''
        return super(IRasterTypeName, self).put_InstanceID(pInstanceID)
    def get_InstanceID(self):
        '''Method IRasterTypeName.get_InstanceID

           OUTPUT
            pInstanceID         : long*'''
        return super(IRasterTypeName, self).get_InstanceID()
    InstanceID = property(get_InstanceID, put_InstanceID, None)
    MosaicDatasetName = property(get_MosaicDatasetName, putref_MosaicDatasetName, None)
    Name = property(get_Name, put_Name, None)

class IDeleteMosaicDatasetParameters(_esriDataSourcesRaster.IDeleteMosaicDatasetParameters):
    _IID = uuid.UUID('a2cb3f23-6154-4ed1-836d-131d64fbc764')

    def __init__(self, *args, **kw):
        super(IDeleteMosaicDatasetParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_DeleteOverviewImages(self, pbDeleteOverviewImages):
        '''Method IDeleteMosaicDatasetParameters.put_DeleteOverviewImages

           INPUT
            pbDeleteOverviewImages: VARIANT_BOOL'''
        return super(IDeleteMosaicDatasetParameters, self).put_DeleteOverviewImages(pbDeleteOverviewImages)
    def get_DeleteOverviewImages(self):
        '''Method IDeleteMosaicDatasetParameters.get_DeleteOverviewImages

           OUTPUT
            pbDeleteOverviewImages: VARIANT_BOOL*'''
        return super(IDeleteMosaicDatasetParameters, self).get_DeleteOverviewImages()
    def put_DeleteItemCache(self, pbDeleteItemCache):
        '''Method IDeleteMosaicDatasetParameters.put_DeleteItemCache

           INPUT
            pbDeleteItemCache   : VARIANT_BOOL'''
        return super(IDeleteMosaicDatasetParameters, self).put_DeleteItemCache(pbDeleteItemCache)
    def get_DeleteItemCache(self):
        '''Method IDeleteMosaicDatasetParameters.get_DeleteItemCache

           OUTPUT
            pbDeleteItemCache   : VARIANT_BOOL*'''
        return super(IDeleteMosaicDatasetParameters, self).get_DeleteItemCache()
    DeleteItemCache = property(get_DeleteItemCache, put_DeleteItemCache, None)
    DeleteOverviewImages = property(get_DeleteOverviewImages, put_DeleteOverviewImages, None)

class IDataSourceCrawler2(_esriDataSourcesRaster.IDataSourceCrawler2):
    _IID = uuid.UUID('6585fbde-358f-40a7-8748-79f99b374f5f')

    def __init__(self, *args, **kw):
        super(IDataSourceCrawler2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CanMergeItems(self):
        '''Method IDataSourceCrawler2.get_CanMergeItems

           OUTPUT
            pbCanMergeItems     : VARIANT_BOOL*'''
        return super(IDataSourceCrawler2, self).get_CanMergeItems()
    def get_MergeItems(self):
        '''Method IDataSourceCrawler2.get_MergeItems

           OUTPUT
            pbMergeItems        : VARIANT_BOOL*'''
        return super(IDataSourceCrawler2, self).get_MergeItems()
    def put_MergeItems(self, pbMergeItems):
        '''Method IDataSourceCrawler2.put_MergeItems

           INPUT
            pbMergeItems        : VARIANT_BOOL'''
        return super(IDataSourceCrawler2, self).put_MergeItems(pbMergeItems)
    def get_CrawlerItemType(self):
        '''Method IDataSourceCrawler.get_CrawlerItemType (from IDataSourceCrawler)

           OUTPUT
            pCrawlerItemType    : esriCrawlerDataSourceType*'''
        return super(IDataSourceCrawler2, self).get_CrawlerItemType()
    def Crawl(self, pTrackCancel):
        '''Method IDataSourceCrawler.Crawl (from IDataSourceCrawler)

           INPUT
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppCrawlerItems      : IEnumVariantSimple**'''
        return super(IDataSourceCrawler2, self).Crawl(pTrackCancel)
    def get_CanFilterByTime(self):
        '''Method IDataSourceCrawler.get_CanFilterByTime (from IDataSourceCrawler)

           OUTPUT
            pbCanFilterByTime   : VARIANT_BOOL*'''
        return super(IDataSourceCrawler2, self).get_CanFilterByTime()
    def putref_TimeExtent(self, ppTimeExtent):
        '''Method IDataSourceCrawler.putref_TimeExtent (from IDataSourceCrawler)

           INPUT
            ppTimeExtent        : ITimeExtent*'''
        return super(IDataSourceCrawler2, self).putref_TimeExtent(ppTimeExtent)
    def get_TimeExtent(self):
        '''Method IDataSourceCrawler.get_TimeExtent (from IDataSourceCrawler)

           OUTPUT
            ppTimeExtent        : ITimeExtent**'''
        return super(IDataSourceCrawler2, self).get_TimeExtent()
    def get_CanFilterByExpression(self):
        '''Method IDataSourceCrawler.get_CanFilterByExpression (from IDataSourceCrawler)

           OUTPUT
            pbCanFilterByExpression: VARIANT_BOOL*'''
        return super(IDataSourceCrawler2, self).get_CanFilterByExpression()
    def put_Filter(self, pFilter):
        '''Method IDataSourceCrawler.put_Filter (from IDataSourceCrawler)

           INPUT
            pFilter             : BSTR'''
        return super(IDataSourceCrawler2, self).put_Filter(pFilter)
    def get_Filter(self):
        '''Method IDataSourceCrawler.get_Filter (from IDataSourceCrawler)

           OUTPUT
            pFilter             : BSTR*'''
        return super(IDataSourceCrawler2, self).get_Filter()
    CanFilterByExpression = property(get_CanFilterByExpression, None, None)
    CanFilterByTime = property(get_CanFilterByTime, None, None)
    CanMergeItems = property(get_CanMergeItems, None, None)
    CrawlerItemType = property(get_CrawlerItemType, None, None)
    Filter = property(get_Filter, put_Filter, None)
    MergeItems = property(get_MergeItems, put_MergeItems, None)
    TimeExtent = property(get_TimeExtent, putref_TimeExtent, None)

class IFileCrawler(_esriDataSourcesRaster.IFileCrawler):
    _IID = uuid.UUID('f8c71017-2a6c-4156-a443-1c33791ccc0a')

    def __init__(self, *args, **kw):
        super(IFileCrawler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Path(self, pFileOrFolderPath):
        '''Method IFileCrawler.put_Path

           INPUT
            pFileOrFolderPath   : BSTR'''
        return super(IFileCrawler, self).put_Path(pFileOrFolderPath)
    def get_Path(self):
        '''Method IFileCrawler.get_Path

           OUTPUT
            pFileOrFolderPath   : BSTR*'''
        return super(IFileCrawler, self).get_Path()
    def put_Recurse(self, pbParseRecursively):
        '''Method IFileCrawler.put_Recurse

           INPUT
            pbParseRecursively  : VARIANT_BOOL'''
        return super(IFileCrawler, self).put_Recurse(pbParseRecursively)
    def get_Recurse(self):
        '''Method IFileCrawler.get_Recurse

           OUTPUT
            pbParseRecursively  : VARIANT_BOOL*'''
        return super(IFileCrawler, self).get_Recurse()
    Path = property(get_Path, put_Path, None)
    Recurse = property(get_Recurse, put_Recurse, None)

class IFolderSort(_esriDataSourcesRaster.IFolderSort):
    _IID = uuid.UUID('c4872b0f-1bfe-4d8c-905a-0e77eb600de7')
    def Sort(self, pFolderContents):
        '''Method IFolderSort.Sort

           INPUT
            pFolderContents     : IStringArray*'''
        return super(IFolderSort, self).Sort(pFolderContents)

class IFileCrawler2(_esriDataSourcesRaster.IFileCrawler2):
    _IID = uuid.UUID('a6abd342-be4e-4c34-8322-93f43009e667')

    def __init__(self, *args, **kw):
        super(IFileCrawler2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_FolderSort(self, ppFolderSort):
        '''Method IFileCrawler2.putref_FolderSort

           INPUT
            ppFolderSort        : IFolderSort*'''
        return super(IFileCrawler2, self).putref_FolderSort(ppFolderSort)
    def get_FolderSort(self):
        '''Method IFileCrawler2.get_FolderSort

           OUTPUT
            ppFolderSort        : IFolderSort**'''
        return super(IFileCrawler2, self).get_FolderSort()
    def put_Path(self, pFileOrFolderPath):
        '''Method IFileCrawler.put_Path (from IFileCrawler)

           INPUT
            pFileOrFolderPath   : BSTR'''
        return super(IFileCrawler2, self).put_Path(pFileOrFolderPath)
    def get_Path(self):
        '''Method IFileCrawler.get_Path (from IFileCrawler)

           OUTPUT
            pFileOrFolderPath   : BSTR*'''
        return super(IFileCrawler2, self).get_Path()
    def put_Recurse(self, pbParseRecursively):
        '''Method IFileCrawler.put_Recurse (from IFileCrawler)

           INPUT
            pbParseRecursively  : VARIANT_BOOL'''
        return super(IFileCrawler2, self).put_Recurse(pbParseRecursively)
    def get_Recurse(self):
        '''Method IFileCrawler.get_Recurse (from IFileCrawler)

           OUTPUT
            pbParseRecursively  : VARIANT_BOOL*'''
        return super(IFileCrawler2, self).get_Recurse()
    FolderSort = property(get_FolderSort, putref_FolderSort, None)
    Path = property(get_Path, put_Path, None)
    Recurse = property(get_Recurse, put_Recurse, None)

class ICsvCrawler(_esriDataSourcesRaster.ICsvCrawler):
    _IID = uuid.UUID('234790e2-c32a-425d-bafc-945e7cb1da8a')

    def __init__(self, *args, **kw):
        super(ICsvCrawler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Path(self, pCsvFilePath):
        '''Method ICsvCrawler.put_Path

           INPUT
            pCsvFilePath        : BSTR'''
        return super(ICsvCrawler, self).put_Path(pCsvFilePath)
    def get_Path(self):
        '''Method ICsvCrawler.get_Path

           OUTPUT
            pCsvFilePath        : BSTR*'''
        return super(ICsvCrawler, self).get_Path()
    def put_SourceField(self, pSourceField):
        '''Method ICsvCrawler.put_SourceField

           INPUT
            pSourceField        : BSTR'''
        return super(ICsvCrawler, self).put_SourceField(pSourceField)
    def get_SourceField(self):
        '''Method ICsvCrawler.get_SourceField

           OUTPUT
            pSourceField        : BSTR*'''
        return super(ICsvCrawler, self).get_SourceField()
    Path = property(get_Path, put_Path, None)
    SourceField = property(get_SourceField, put_SourceField, None)

class IRasterDatasetCrawler(_esriDataSourcesRaster.IRasterDatasetCrawler):
    _IID = uuid.UUID('31d3dce2-6908-44a1-bec5-0026ec05df76')

    def __init__(self, *args, **kw):
        super(IRasterDatasetCrawler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RasterDataset(self, ppRasterDataset):
        '''Method IRasterDatasetCrawler.putref_RasterDataset

           INPUT
            ppRasterDataset     : IRasterDataset*'''
        return super(IRasterDatasetCrawler, self).putref_RasterDataset(ppRasterDataset)
    def get_RasterDataset(self):
        '''Method IRasterDatasetCrawler.get_RasterDataset

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IRasterDatasetCrawler, self).get_RasterDataset()
    def putref_DatasetName(self, ppDatasetName):
        '''Method IRasterDatasetCrawler.putref_DatasetName

           INPUT
            ppDatasetName       : IName*'''
        return super(IRasterDatasetCrawler, self).putref_DatasetName(ppDatasetName)
    def get_DatasetName(self):
        '''Method IRasterDatasetCrawler.get_DatasetName

           OUTPUT
            ppDatasetName       : IName**'''
        return super(IRasterDatasetCrawler, self).get_DatasetName()
    DatasetName = property(get_DatasetName, putref_DatasetName, None)
    RasterDataset = property(get_RasterDataset, putref_RasterDataset, None)

class ITableCrawler(_esriDataSourcesRaster.ITableCrawler):
    _IID = uuid.UUID('6e943337-d364-4b76-94cc-f7432305a851')

    def __init__(self, *args, **kw):
        super(ITableCrawler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CrawlerItemType(self, _arg1):
        '''Method ITableCrawler.put_CrawlerItemType

           INPUT
            _arg1               : esriCrawlerDataSourceType'''
        return super(ITableCrawler, self).put_CrawlerItemType(_arg1)
    def putref_QueryFilter(self, ppQueryFilter):
        '''Method ITableCrawler.putref_QueryFilter

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(ITableCrawler, self).putref_QueryFilter(ppQueryFilter)
    def get_QueryFilter(self):
        '''Method ITableCrawler.get_QueryFilter

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(ITableCrawler, self).get_QueryFilter()
    def putref_SelectionSet(self, ppSelectionSet):
        '''Method ITableCrawler.putref_SelectionSet

           INPUT
            ppSelectionSet      : ISelectionSet*'''
        return super(ITableCrawler, self).putref_SelectionSet(ppSelectionSet)
    def get_SelectionSet(self):
        '''Method ITableCrawler.get_SelectionSet

           OUTPUT
            ppSelectionSet      : ISelectionSet**'''
        return super(ITableCrawler, self).get_SelectionSet()
    def putref_Table(self, ppTable):
        '''Method ITableCrawler.putref_Table

           INPUT
            ppTable             : ITable*'''
        return super(ITableCrawler, self).putref_Table(ppTable)
    def get_Table(self):
        '''Method ITableCrawler.get_Table

           OUTPUT
            ppTable             : ITable**'''
        return super(ITableCrawler, self).get_Table()
    def put_SourceField(self, pSourceField):
        '''Method ITableCrawler.put_SourceField

           INPUT
            pSourceField        : BSTR'''
        return super(ITableCrawler, self).put_SourceField(pSourceField)
    def get_SourceField(self):
        '''Method ITableCrawler.get_SourceField

           OUTPUT
            pSourceField        : BSTR*'''
        return super(ITableCrawler, self).get_SourceField()
    def put_GroupField(self, pGroupField):
        '''Method ITableCrawler.put_GroupField

           INPUT
            pGroupField         : BSTR'''
        return super(ITableCrawler, self).put_GroupField(pGroupField)
    def get_GroupField(self):
        '''Method ITableCrawler.get_GroupField

           OUTPUT
            pGroupField         : BSTR*'''
        return super(ITableCrawler, self).get_GroupField()
    def put_TimeStampField(self, pTimeStampField):
        '''Method ITableCrawler.put_TimeStampField

           INPUT
            pTimeStampField     : BSTR'''
        return super(ITableCrawler, self).put_TimeStampField(pTimeStampField)
    def get_TimeStampField(self):
        '''Method ITableCrawler.get_TimeStampField

           OUTPUT
            pTimeStampField     : BSTR*'''
        return super(ITableCrawler, self).get_TimeStampField()
    def put_OrderByGroup(self, pbOrderByGroup):
        '''Method ITableCrawler.put_OrderByGroup

           INPUT
            pbOrderByGroup      : VARIANT_BOOL'''
        return super(ITableCrawler, self).put_OrderByGroup(pbOrderByGroup)
    def get_OrderByGroup(self):
        '''Method ITableCrawler.get_OrderByGroup

           OUTPUT
            pbOrderByGroup      : VARIANT_BOOL*'''
        return super(ITableCrawler, self).get_OrderByGroup()
    CrawlerItemType = property(None, put_CrawlerItemType, None)
    GroupField = property(get_GroupField, put_GroupField, None)
    OrderByGroup = property(get_OrderByGroup, put_OrderByGroup, None)
    QueryFilter = property(get_QueryFilter, putref_QueryFilter, None)
    SelectionSet = property(get_SelectionSet, putref_SelectionSet, None)
    SourceField = property(get_SourceField, put_SourceField, None)
    Table = property(get_Table, putref_Table, None)
    TimeStampField = property(get_TimeStampField, put_TimeStampField, None)

class ITableCrawler2(_esriDataSourcesRaster.ITableCrawler2):
    _IID = uuid.UUID('c0463461-e1e9-46be-8006-0f6c1f49f8d1')

    def __init__(self, *args, **kw):
        super(ITableCrawler2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_BlockField(self, pBlockField):
        '''Method ITableCrawler2.put_BlockField

           INPUT
            pBlockField         : BSTR'''
        return super(ITableCrawler2, self).put_BlockField(pBlockField)
    def get_BlockField(self):
        '''Method ITableCrawler2.get_BlockField

           OUTPUT
            pBlockField         : BSTR*'''
        return super(ITableCrawler2, self).get_BlockField()
    def put_MaximumMergeItemsCount(self, pMaximumMergeItemsCount):
        '''Method ITableCrawler2.put_MaximumMergeItemsCount

           INPUT
            pMaximumMergeItemsCount: long'''
        return super(ITableCrawler2, self).put_MaximumMergeItemsCount(pMaximumMergeItemsCount)
    def get_MaximumMergeItemsCount(self):
        '''Method ITableCrawler2.get_MaximumMergeItemsCount

           OUTPUT
            pMaximumMergeItemsCount: long*'''
        return super(ITableCrawler2, self).get_MaximumMergeItemsCount()
    def putref_MosaicDataset(self, ppMosaicDataset):
        '''Method ITableCrawler2.putref_MosaicDataset

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(ITableCrawler2, self).putref_MosaicDataset(ppMosaicDataset)
    def get_MosaicDataset(self):
        '''Method ITableCrawler2.get_MosaicDataset

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(ITableCrawler2, self).get_MosaicDataset()
    def get_HasThumbnail(self):
        '''Method ITableCrawler2.get_HasThumbnail

           OUTPUT
            pbHasThumbnail      : VARIANT_BOOL*'''
        return super(ITableCrawler2, self).get_HasThumbnail()
    def put_CrawlerItemType(self, _arg1):
        '''Method ITableCrawler.put_CrawlerItemType (from ITableCrawler)

           INPUT
            _arg1               : esriCrawlerDataSourceType'''
        return super(ITableCrawler2, self).put_CrawlerItemType(_arg1)
    def putref_QueryFilter(self, ppQueryFilter):
        '''Method ITableCrawler.putref_QueryFilter (from ITableCrawler)

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(ITableCrawler2, self).putref_QueryFilter(ppQueryFilter)
    def get_QueryFilter(self):
        '''Method ITableCrawler.get_QueryFilter (from ITableCrawler)

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(ITableCrawler2, self).get_QueryFilter()
    def putref_SelectionSet(self, ppSelectionSet):
        '''Method ITableCrawler.putref_SelectionSet (from ITableCrawler)

           INPUT
            ppSelectionSet      : ISelectionSet*'''
        return super(ITableCrawler2, self).putref_SelectionSet(ppSelectionSet)
    def get_SelectionSet(self):
        '''Method ITableCrawler.get_SelectionSet (from ITableCrawler)

           OUTPUT
            ppSelectionSet      : ISelectionSet**'''
        return super(ITableCrawler2, self).get_SelectionSet()
    def putref_Table(self, ppTable):
        '''Method ITableCrawler.putref_Table (from ITableCrawler)

           INPUT
            ppTable             : ITable*'''
        return super(ITableCrawler2, self).putref_Table(ppTable)
    def get_Table(self):
        '''Method ITableCrawler.get_Table (from ITableCrawler)

           OUTPUT
            ppTable             : ITable**'''
        return super(ITableCrawler2, self).get_Table()
    def put_SourceField(self, pSourceField):
        '''Method ITableCrawler.put_SourceField (from ITableCrawler)

           INPUT
            pSourceField        : BSTR'''
        return super(ITableCrawler2, self).put_SourceField(pSourceField)
    def get_SourceField(self):
        '''Method ITableCrawler.get_SourceField (from ITableCrawler)

           OUTPUT
            pSourceField        : BSTR*'''
        return super(ITableCrawler2, self).get_SourceField()
    def put_GroupField(self, pGroupField):
        '''Method ITableCrawler.put_GroupField (from ITableCrawler)

           INPUT
            pGroupField         : BSTR'''
        return super(ITableCrawler2, self).put_GroupField(pGroupField)
    def get_GroupField(self):
        '''Method ITableCrawler.get_GroupField (from ITableCrawler)

           OUTPUT
            pGroupField         : BSTR*'''
        return super(ITableCrawler2, self).get_GroupField()
    def put_TimeStampField(self, pTimeStampField):
        '''Method ITableCrawler.put_TimeStampField (from ITableCrawler)

           INPUT
            pTimeStampField     : BSTR'''
        return super(ITableCrawler2, self).put_TimeStampField(pTimeStampField)
    def get_TimeStampField(self):
        '''Method ITableCrawler.get_TimeStampField (from ITableCrawler)

           OUTPUT
            pTimeStampField     : BSTR*'''
        return super(ITableCrawler2, self).get_TimeStampField()
    def put_OrderByGroup(self, pbOrderByGroup):
        '''Method ITableCrawler.put_OrderByGroup (from ITableCrawler)

           INPUT
            pbOrderByGroup      : VARIANT_BOOL'''
        return super(ITableCrawler2, self).put_OrderByGroup(pbOrderByGroup)
    def get_OrderByGroup(self):
        '''Method ITableCrawler.get_OrderByGroup (from ITableCrawler)

           OUTPUT
            pbOrderByGroup      : VARIANT_BOOL*'''
        return super(ITableCrawler2, self).get_OrderByGroup()
    BlockField = property(get_BlockField, put_BlockField, None)
    CrawlerItemType = property(None, put_CrawlerItemType, None)
    GroupField = property(get_GroupField, put_GroupField, None)
    HasThumbnail = property(get_HasThumbnail, None, None)
    MaximumMergeItemsCount = property(get_MaximumMergeItemsCount, put_MaximumMergeItemsCount, None)
    MosaicDataset = property(get_MosaicDataset, putref_MosaicDataset, None)
    OrderByGroup = property(get_OrderByGroup, put_OrderByGroup, None)
    QueryFilter = property(get_QueryFilter, putref_QueryFilter, None)
    SelectionSet = property(get_SelectionSet, putref_SelectionSet, None)
    SourceField = property(get_SourceField, put_SourceField, None)
    Table = property(get_Table, putref_Table, None)
    TimeStampField = property(get_TimeStampField, put_TimeStampField, None)

class ITableCrawler3(_esriDataSourcesRaster.ITableCrawler3):
    _IID = uuid.UUID('557a0ce7-5525-4ebf-87e4-cea03954bbae')

    def __init__(self, *args, **kw):
        super(ITableCrawler3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetRow(self, OID):
        '''Method ITableCrawler3.GetRow

           INPUT
            OID                 : long

           OUTPUT
            ppRow               : IRow**'''
        return super(ITableCrawler3, self).GetRow(OID)
    def put_BlockField(self, pBlockField):
        '''Method ITableCrawler2.put_BlockField (from ITableCrawler2)

           INPUT
            pBlockField         : BSTR'''
        return super(ITableCrawler3, self).put_BlockField(pBlockField)
    def get_BlockField(self):
        '''Method ITableCrawler2.get_BlockField (from ITableCrawler2)

           OUTPUT
            pBlockField         : BSTR*'''
        return super(ITableCrawler3, self).get_BlockField()
    def put_MaximumMergeItemsCount(self, pMaximumMergeItemsCount):
        '''Method ITableCrawler2.put_MaximumMergeItemsCount (from ITableCrawler2)

           INPUT
            pMaximumMergeItemsCount: long'''
        return super(ITableCrawler3, self).put_MaximumMergeItemsCount(pMaximumMergeItemsCount)
    def get_MaximumMergeItemsCount(self):
        '''Method ITableCrawler2.get_MaximumMergeItemsCount (from ITableCrawler2)

           OUTPUT
            pMaximumMergeItemsCount: long*'''
        return super(ITableCrawler3, self).get_MaximumMergeItemsCount()
    def putref_MosaicDataset(self, ppMosaicDataset):
        '''Method ITableCrawler2.putref_MosaicDataset (from ITableCrawler2)

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(ITableCrawler3, self).putref_MosaicDataset(ppMosaicDataset)
    def get_MosaicDataset(self):
        '''Method ITableCrawler2.get_MosaicDataset (from ITableCrawler2)

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(ITableCrawler3, self).get_MosaicDataset()
    def get_HasThumbnail(self):
        '''Method ITableCrawler2.get_HasThumbnail (from ITableCrawler2)

           OUTPUT
            pbHasThumbnail      : VARIANT_BOOL*'''
        return super(ITableCrawler3, self).get_HasThumbnail()
    def put_CrawlerItemType(self, _arg1):
        '''Method ITableCrawler.put_CrawlerItemType (from ITableCrawler)

           INPUT
            _arg1               : esriCrawlerDataSourceType'''
        return super(ITableCrawler3, self).put_CrawlerItemType(_arg1)
    def putref_QueryFilter(self, ppQueryFilter):
        '''Method ITableCrawler.putref_QueryFilter (from ITableCrawler)

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(ITableCrawler3, self).putref_QueryFilter(ppQueryFilter)
    def get_QueryFilter(self):
        '''Method ITableCrawler.get_QueryFilter (from ITableCrawler)

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(ITableCrawler3, self).get_QueryFilter()
    def putref_SelectionSet(self, ppSelectionSet):
        '''Method ITableCrawler.putref_SelectionSet (from ITableCrawler)

           INPUT
            ppSelectionSet      : ISelectionSet*'''
        return super(ITableCrawler3, self).putref_SelectionSet(ppSelectionSet)
    def get_SelectionSet(self):
        '''Method ITableCrawler.get_SelectionSet (from ITableCrawler)

           OUTPUT
            ppSelectionSet      : ISelectionSet**'''
        return super(ITableCrawler3, self).get_SelectionSet()
    def putref_Table(self, ppTable):
        '''Method ITableCrawler.putref_Table (from ITableCrawler)

           INPUT
            ppTable             : ITable*'''
        return super(ITableCrawler3, self).putref_Table(ppTable)
    def get_Table(self):
        '''Method ITableCrawler.get_Table (from ITableCrawler)

           OUTPUT
            ppTable             : ITable**'''
        return super(ITableCrawler3, self).get_Table()
    def put_SourceField(self, pSourceField):
        '''Method ITableCrawler.put_SourceField (from ITableCrawler)

           INPUT
            pSourceField        : BSTR'''
        return super(ITableCrawler3, self).put_SourceField(pSourceField)
    def get_SourceField(self):
        '''Method ITableCrawler.get_SourceField (from ITableCrawler)

           OUTPUT
            pSourceField        : BSTR*'''
        return super(ITableCrawler3, self).get_SourceField()
    def put_GroupField(self, pGroupField):
        '''Method ITableCrawler.put_GroupField (from ITableCrawler)

           INPUT
            pGroupField         : BSTR'''
        return super(ITableCrawler3, self).put_GroupField(pGroupField)
    def get_GroupField(self):
        '''Method ITableCrawler.get_GroupField (from ITableCrawler)

           OUTPUT
            pGroupField         : BSTR*'''
        return super(ITableCrawler3, self).get_GroupField()
    def put_TimeStampField(self, pTimeStampField):
        '''Method ITableCrawler.put_TimeStampField (from ITableCrawler)

           INPUT
            pTimeStampField     : BSTR'''
        return super(ITableCrawler3, self).put_TimeStampField(pTimeStampField)
    def get_TimeStampField(self):
        '''Method ITableCrawler.get_TimeStampField (from ITableCrawler)

           OUTPUT
            pTimeStampField     : BSTR*'''
        return super(ITableCrawler3, self).get_TimeStampField()
    def put_OrderByGroup(self, pbOrderByGroup):
        '''Method ITableCrawler.put_OrderByGroup (from ITableCrawler)

           INPUT
            pbOrderByGroup      : VARIANT_BOOL'''
        return super(ITableCrawler3, self).put_OrderByGroup(pbOrderByGroup)
    def get_OrderByGroup(self):
        '''Method ITableCrawler.get_OrderByGroup (from ITableCrawler)

           OUTPUT
            pbOrderByGroup      : VARIANT_BOOL*'''
        return super(ITableCrawler3, self).get_OrderByGroup()
    BlockField = property(get_BlockField, put_BlockField, None)
    CrawlerItemType = property(None, put_CrawlerItemType, None)
    GroupField = property(get_GroupField, put_GroupField, None)
    HasThumbnail = property(get_HasThumbnail, None, None)
    MaximumMergeItemsCount = property(get_MaximumMergeItemsCount, put_MaximumMergeItemsCount, None)
    MosaicDataset = property(get_MosaicDataset, putref_MosaicDataset, None)
    OrderByGroup = property(get_OrderByGroup, put_OrderByGroup, None)
    QueryFilter = property(get_QueryFilter, putref_QueryFilter, None)
    SelectionSet = property(get_SelectionSet, putref_SelectionSet, None)
    SourceField = property(get_SourceField, put_SourceField, None)
    Table = property(get_Table, putref_Table, None)
    TimeStampField = property(get_TimeStampField, put_TimeStampField, None)

class IArrayCrawler(_esriDataSourcesRaster.IArrayCrawler):
    _IID = uuid.UUID('a9bd38d7-5e0f-4608-b75c-2ed6ca429c08')

    def __init__(self, *args, **kw):
        super(IArrayCrawler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CrawlerItemType(self, _arg1):
        '''Method IArrayCrawler.put_CrawlerItemType

           INPUT
            _arg1               : esriCrawlerDataSourceType'''
        return super(IArrayCrawler, self).put_CrawlerItemType(_arg1)
    def putref_DataSourceItems(self, ppDataSourceItems):
        '''Method IArrayCrawler.putref_DataSourceItems

           INPUT
            ppDataSourceItems   : IStringArray*'''
        return super(IArrayCrawler, self).putref_DataSourceItems(ppDataSourceItems)
    def get_DataSourceItems(self):
        '''Method IArrayCrawler.get_DataSourceItems

           OUTPUT
            ppDataSourceItems   : IStringArray**'''
        return super(IArrayCrawler, self).get_DataSourceItems()
    CrawlerItemType = property(None, put_CrawlerItemType, None)
    DataSourceItems = property(get_DataSourceItems, putref_DataSourceItems, None)

class IGenericObjectCrawler(_esriDataSourcesRaster.IGenericObjectCrawler):
    _IID = uuid.UUID('1c43ccbb-7fdb-4e06-9583-5197a9cb2388')

    def __init__(self, *args, **kw):
        super(IGenericObjectCrawler, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CrawlerItemType(self, _arg1):
        '''Method IGenericObjectCrawler.put_CrawlerItemType

           INPUT
            _arg1               : esriCrawlerDataSourceType'''
        return super(IGenericObjectCrawler, self).put_CrawlerItemType(_arg1)
    def putref_Object(self, ppObject):
        '''Method IGenericObjectCrawler.putref_Object

           INPUT
            ppObject            : IUnknown*'''
        return super(IGenericObjectCrawler, self).putref_Object(ppObject)
    def get_Object(self):
        '''Method IGenericObjectCrawler.get_Object

           OUTPUT
            ppObject            : IUnknown**'''
        return super(IGenericObjectCrawler, self).get_Object()
    CrawlerItemType = property(None, put_CrawlerItemType, None)
    Object = property(get_Object, putref_Object, None)

class IItemURI2(_esriDataSourcesRaster.IItemURI2):
    _IID = uuid.UUID('441dbe58-23ee-4296-9a3b-fdb44027b828')

    def __init__(self, *args, **kw):
        super(IItemURI2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Properties(self, ppBuilderPoperties):
        '''Method IItemURI2.putref_Properties

           INPUT
            ppBuilderPoperties  : IPropertySet*'''
        return super(IItemURI2, self).putref_Properties(ppBuilderPoperties)
    def get_Properties(self):
        '''Method IItemURI2.get_Properties

           OUTPUT
            ppBuilderPoperties  : IPropertySet**'''
        return super(IItemURI2, self).get_Properties()
    def put_Key(self, pKeyString):
        '''Method IItemURI.put_Key (from IItemURI)

           INPUT
            pKeyString          : BSTR'''
        return super(IItemURI2, self).put_Key(pKeyString)
    def get_Key(self):
        '''Method IItemURI.get_Key (from IItemURI)

           OUTPUT
            pKeyString          : BSTR*'''
        return super(IItemURI2, self).get_Key()
    def put_Tag(self, pItemTag):
        '''Method IItemURI.put_Tag (from IItemURI)

           INPUT
            pItemTag            : BSTR'''
        return super(IItemURI2, self).put_Tag(pItemTag)
    def get_Tag(self):
        '''Method IItemURI.get_Tag (from IItemURI)

           OUTPUT
            pItemTag            : BSTR*'''
        return super(IItemURI2, self).get_Tag()
    def put_Group(self, pItemGroup):
        '''Method IItemURI.put_Group (from IItemURI)

           INPUT
            pItemGroup          : BSTR'''
        return super(IItemURI2, self).put_Group(pItemGroup)
    def get_Group(self):
        '''Method IItemURI.get_Group (from IItemURI)

           OUTPUT
            pItemGroup          : BSTR*'''
        return super(IItemURI2, self).get_Group()
    def put_DisplayName(self, pDisplayName):
        '''Method IItemURI.put_DisplayName (from IItemURI)

           INPUT
            pDisplayName        : BSTR'''
        return super(IItemURI2, self).put_DisplayName(pDisplayName)
    def get_DisplayName(self):
        '''Method IItemURI.get_DisplayName (from IItemURI)

           OUTPUT
            pDisplayName        : BSTR*'''
        return super(IItemURI2, self).get_DisplayName()
    def put_ProductName(self, pProductName):
        '''Method IItemURI.put_ProductName (from IItemURI)

           INPUT
            pProductName        : BSTR'''
        return super(IItemURI2, self).put_ProductName(pProductName)
    def get_ProductName(self):
        '''Method IItemURI.get_ProductName (from IItemURI)

           OUTPUT
            pProductName        : BSTR*'''
        return super(IItemURI2, self).get_ProductName()
    def put_SourceTimeStamp(self, pSourceTimeStamp):
        '''Method IItemURI.put_SourceTimeStamp (from IItemURI)

           INPUT
            pSourceTimeStamp    : DATE'''
        return super(IItemURI2, self).put_SourceTimeStamp(pSourceTimeStamp)
    def get_SourceTimeStamp(self):
        '''Method IItemURI.get_SourceTimeStamp (from IItemURI)

           OUTPUT
            pSourceTimeStamp    : DATE*'''
        return super(IItemURI2, self).get_SourceTimeStamp()
    def putref_AuxiliaryPaths(self, ppAuxiliaryPaths):
        '''Method IItemURI.putref_AuxiliaryPaths (from IItemURI)

           INPUT
            ppAuxiliaryPaths    : IStringArray*'''
        return super(IItemURI2, self).putref_AuxiliaryPaths(ppAuxiliaryPaths)
    def get_AuxiliaryPaths(self):
        '''Method IItemURI.get_AuxiliaryPaths (from IItemURI)

           OUTPUT
            ppAuxiliaryPaths    : IStringArray**'''
        return super(IItemURI2, self).get_AuxiliaryPaths()
    AuxiliaryPaths = property(get_AuxiliaryPaths, putref_AuxiliaryPaths, None)
    DisplayName = property(get_DisplayName, put_DisplayName, None)
    Group = property(get_Group, put_Group, None)
    Key = property(get_Key, put_Key, None)
    ProductName = property(get_ProductName, put_ProductName, None)
    Properties = property(get_Properties, putref_Properties, None)
    SourceTimeStamp = property(get_SourceTimeStamp, put_SourceTimeStamp, None)
    Tag = property(get_Tag, put_Tag, None)

class IOverviewItemURI(_esriDataSourcesRaster.IOverviewItemURI):
    _IID = uuid.UUID('7061751b-3279-4719-86df-bdff9c73c809')

    def __init__(self, *args, **kw):
        super(IOverviewItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ItemName(self, pItemName):
        '''Method IOverviewItemURI.put_ItemName

           INPUT
            pItemName           : BSTR'''
        return super(IOverviewItemURI, self).put_ItemName(pItemName)
    def get_ItemName(self):
        '''Method IOverviewItemURI.get_ItemName

           OUTPUT
            pItemName           : BSTR*'''
        return super(IOverviewItemURI, self).get_ItemName()
    def putref_StorageName(self, ppStorageName):
        '''Method IOverviewItemURI.putref_StorageName

           INPUT
            ppStorageName       : IName*'''
        return super(IOverviewItemURI, self).putref_StorageName(ppStorageName)
    def get_StorageName(self):
        '''Method IOverviewItemURI.get_StorageName

           OUTPUT
            ppStorageName       : IName**'''
        return super(IOverviewItemURI, self).get_StorageName()
    def get_DatasetExists(self):
        '''Method IOverviewItemURI.get_DatasetExists

           OUTPUT
            pbDatasetExists     : VARIANT_BOOL*'''
        return super(IOverviewItemURI, self).get_DatasetExists()
    def get_IsManagedDataset(self):
        '''Method IOverviewItemURI.get_IsManagedDataset

           OUTPUT
            pbIsManagedDataset  : VARIANT_BOOL*'''
        return super(IOverviewItemURI, self).get_IsManagedDataset()
    def DeleteDataset(self):
        '''Method IOverviewItemURI.DeleteDataset'''
        return super(IOverviewItemURI, self).DeleteDataset()
    def UpdateDataset(self, pRaster, imageFormatName, pRasterStorageDef):
        '''Method IOverviewItemURI.UpdateDataset

           INPUTS
            pRaster             : IRaster*
            imageFormatName     : BSTR
            pRasterStorageDef   : IRasterStorageDef*

           OUTPUT
            ppRasterDataset     : IRasterDataset**'''
        return super(IOverviewItemURI, self).UpdateDataset(pRaster, imageFormatName, pRasterStorageDef)
    def put_TileRowOffset(self, pTileRowOffset):
        '''Method IOverviewItemURI.put_TileRowOffset

           INPUT
            pTileRowOffset      : long'''
        return super(IOverviewItemURI, self).put_TileRowOffset(pTileRowOffset)
    def get_TileRowOffset(self):
        '''Method IOverviewItemURI.get_TileRowOffset

           OUTPUT
            pTileRowOffset      : long*'''
        return super(IOverviewItemURI, self).get_TileRowOffset()
    def put_TileColOffset(self, pTileColOffset):
        '''Method IOverviewItemURI.put_TileColOffset

           INPUT
            pTileColOffset      : long'''
        return super(IOverviewItemURI, self).put_TileColOffset(pTileColOffset)
    def get_TileColOffset(self):
        '''Method IOverviewItemURI.get_TileColOffset

           OUTPUT
            pTileColOffset      : long*'''
        return super(IOverviewItemURI, self).get_TileColOffset()
    def putref_NativeExtent(self, ppEnvelope):
        '''Method IOverviewItemURI.putref_NativeExtent

           INPUT
            ppEnvelope          : IEnvelope*'''
        return super(IOverviewItemURI, self).putref_NativeExtent(ppEnvelope)
    def get_NativeExtent(self):
        '''Method IOverviewItemURI.get_NativeExtent

           OUTPUT
            ppEnvelope          : IEnvelope**'''
        return super(IOverviewItemURI, self).get_NativeExtent()
    def putref_RasterInfo(self, ppRasterInfo):
        '''Method IOverviewItemURI.putref_RasterInfo

           INPUT
            ppRasterInfo        : IRasterInfo*'''
        return super(IOverviewItemURI, self).putref_RasterInfo(ppRasterInfo)
    def get_RasterInfo(self):
        '''Method IOverviewItemURI.get_RasterInfo

           OUTPUT
            ppRasterInfo        : IRasterInfo**'''
        return super(IOverviewItemURI, self).get_RasterInfo()
    DatasetExists = property(get_DatasetExists, None, None)
    IsManagedDataset = property(get_IsManagedDataset, None, None)
    ItemName = property(get_ItemName, put_ItemName, None)
    NativeExtent = property(get_NativeExtent, putref_NativeExtent, None)
    RasterInfo = property(get_RasterInfo, putref_RasterInfo, None)
    StorageName = property(get_StorageName, putref_StorageName, None)
    TileColOffset = property(get_TileColOffset, put_TileColOffset, None)
    TileRowOffset = property(get_TileRowOffset, put_TileRowOffset, None)

class IItemPathsOptions(_esriDataSourcesRaster.IItemPathsOptions):
    _IID = uuid.UUID('03ab09fc-cc80-4f8b-b09c-e0ac241e5912')

    def __init__(self, *args, **kw):
        super(IItemPathsOptions, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_BrokenPathsOnly(self, pbBrokenOnly):
        '''Method IItemPathsOptions.put_BrokenPathsOnly

           INPUT
            pbBrokenOnly        : VARIANT_BOOL'''
        return super(IItemPathsOptions, self).put_BrokenPathsOnly(pbBrokenOnly)
    def get_BrokenPathsOnly(self):
        '''Method IItemPathsOptions.get_BrokenPathsOnly

           OUTPUT
            pbBrokenOnly        : VARIANT_BOOL*'''
        return super(IItemPathsOptions, self).get_BrokenPathsOnly()
    def put_FoldersOnly(self, pbFoldersOnly):
        '''Method IItemPathsOptions.put_FoldersOnly

           INPUT
            pbFoldersOnly       : VARIANT_BOOL'''
        return super(IItemPathsOptions, self).put_FoldersOnly(pbFoldersOnly)
    def get_FoldersOnly(self):
        '''Method IItemPathsOptions.get_FoldersOnly

           OUTPUT
            pbFoldersOnly       : VARIANT_BOOL*'''
        return super(IItemPathsOptions, self).get_FoldersOnly()
    BrokenPathsOnly = property(get_BrokenPathsOnly, put_BrokenPathsOnly, None)
    FoldersOnly = property(get_FoldersOnly, put_FoldersOnly, None)

class IItemPaths2(_esriDataSourcesRaster.IItemPaths2):
    _IID = uuid.UUID('9c76b127-61ac-4e66-99b0-8c14a9a386ea')
    def GetPathsEx(self, pOptions):
        '''Method IItemPaths2.GetPathsEx

           INPUT
            pOptions            : IItemPathsOptions*

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IItemPaths2, self).GetPathsEx(pOptions)
    def GetPaths(self):
        '''Method IItemPaths.GetPaths (from IItemPaths)

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IItemPaths2, self).GetPaths()
    def ReplacePaths(self, pOldPaths, pNewPaths):
        '''Method IItemPaths.ReplacePaths (from IItemPaths)

           INPUTS
            pOldPaths           : IStringArray*
            pNewPaths           : IStringArray*'''
        return super(IItemPaths2, self).ReplacePaths(pOldPaths, pNewPaths)

class IBuilderItem2(_esriDataSourcesRaster.IBuilderItem2):
    _IID = uuid.UUID('607661ec-f105-4641-be8b-4f1cb0d6f48c')

    def __init__(self, *args, **kw):
        super(IBuilderItem2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DatasetName(self, ppDatasetName):
        '''Method IBuilderItem2.putref_DatasetName

           INPUT
            ppDatasetName       : IName*'''
        return super(IBuilderItem2, self).putref_DatasetName(ppDatasetName)
    def get_DatasetName(self):
        '''Method IBuilderItem2.get_DatasetName

           OUTPUT
            ppDatasetName       : IName**'''
        return super(IBuilderItem2, self).get_DatasetName()
    def putref_SeamlineProperties(self, ppPropertySet):
        '''Method IBuilderItem2.putref_SeamlineProperties

           INPUT
            ppPropertySet       : IPropertySet*'''
        return super(IBuilderItem2, self).putref_SeamlineProperties(ppPropertySet)
    def get_SeamlineProperties(self):
        '''Method IBuilderItem2.get_SeamlineProperties

           OUTPUT
            ppPropertySet       : IPropertySet**'''
        return super(IBuilderItem2, self).get_SeamlineProperties()
    def putref_ColorCorrectionProperties(self, ppPropertySet):
        '''Method IBuilderItem2.putref_ColorCorrectionProperties

           INPUT
            ppPropertySet       : IPropertySet*'''
        return super(IBuilderItem2, self).putref_ColorCorrectionProperties(ppPropertySet)
    def get_ColorCorrectionProperties(self):
        '''Method IBuilderItem2.get_ColorCorrectionProperties

           OUTPUT
            ppPropertySet       : IPropertySet**'''
        return super(IBuilderItem2, self).get_ColorCorrectionProperties()
    def get_HasThumbnail(self):
        '''Method IBuilderItem2.get_HasThumbnail

           OUTPUT
            pbHasThumbnail      : VARIANT_BOOL*'''
        return super(IBuilderItem2, self).get_HasThumbnail()
    def put_Thumbnail(self, pvtThumbnailBlob):
        '''Method IBuilderItem2.put_Thumbnail

           INPUT
            pvtThumbnailBlob    : VARIANT'''
        return super(IBuilderItem2, self).put_Thumbnail(pvtThumbnailBlob)
    def get_Thumbnail(self):
        '''Method IBuilderItem2.get_Thumbnail

           OUTPUT
            pvtThumbnailBlob    : VARIANT*'''
        return super(IBuilderItem2, self).get_Thumbnail()
    def putref_URI(self, ppItemURI):
        '''Method IBuilderItem.putref_URI (from IBuilderItem)

           INPUT
            ppItemURI           : IItemURI*'''
        return super(IBuilderItem2, self).putref_URI(ppItemURI)
    def get_URI(self):
        '''Method IBuilderItem.get_URI (from IBuilderItem)

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IBuilderItem2, self).get_URI()
    def putref_Dataset(self, ppDataset):
        '''Method IBuilderItem.putref_Dataset (from IBuilderItem)

           INPUT
            ppDataset           : IFunctionRasterDataset*'''
        return super(IBuilderItem2, self).putref_Dataset(ppDataset)
    def get_Dataset(self):
        '''Method IBuilderItem.get_Dataset (from IBuilderItem)

           OUTPUT
            ppDataset           : IFunctionRasterDataset**'''
        return super(IBuilderItem2, self).get_Dataset()
    def get_Footprint(self):
        '''Method IBuilderItem.get_Footprint (from IBuilderItem)

           OUTPUT
            ppFootprint         : IGeometry**'''
        return super(IBuilderItem2, self).get_Footprint()
    def putref_Footprint(self, ppFootprint):
        '''Method IBuilderItem.putref_Footprint (from IBuilderItem)

           INPUT
            ppFootprint         : IGeometry*'''
        return super(IBuilderItem2, self).putref_Footprint(ppFootprint)
    def get_Seamline(self):
        '''Method IBuilderItem.get_Seamline (from IBuilderItem)

           OUTPUT
            ppSeamline          : IGeometry**'''
        return super(IBuilderItem2, self).get_Seamline()
    def putref_Seamline(self, ppSeamline):
        '''Method IBuilderItem.putref_Seamline (from IBuilderItem)

           INPUT
            ppSeamline          : IGeometry*'''
        return super(IBuilderItem2, self).putref_Seamline(ppSeamline)
    def put_StereoID(self, pStereoID):
        '''Method IBuilderItem.put_StereoID (from IBuilderItem)

           INPUT
            pStereoID           : BSTR'''
        return super(IBuilderItem2, self).put_StereoID(pStereoID)
    def get_StereoID(self):
        '''Method IBuilderItem.get_StereoID (from IBuilderItem)

           OUTPUT
            pStereoID           : BSTR*'''
        return super(IBuilderItem2, self).get_StereoID()
    def putref_StereoPairs(self, ppStereoPairs):
        '''Method IBuilderItem.putref_StereoPairs (from IBuilderItem)

           INPUT
            ppStereoPairs       : IStringArray*'''
        return super(IBuilderItem2, self).putref_StereoPairs(ppStereoPairs)
    def get_StereoPairs(self):
        '''Method IBuilderItem.get_StereoPairs (from IBuilderItem)

           OUTPUT
            ppStereoPairs       : IStringArray**'''
        return super(IBuilderItem2, self).get_StereoPairs()
    def putref_Variables(self, ppVariables):
        '''Method IBuilderItem.putref_Variables (from IBuilderItem)

           INPUT
            ppVariables         : IPropertySet*'''
        return super(IBuilderItem2, self).putref_Variables(ppVariables)
    def get_Variables(self):
        '''Method IBuilderItem.get_Variables (from IBuilderItem)

           OUTPUT
            ppVariables         : IPropertySet**'''
        return super(IBuilderItem2, self).get_Variables()
    def AddVariable(self, variableName, vtVariableValue, bPrefixWithTag):
        '''Method IBuilderItem.AddVariable (from IBuilderItem)

           INPUTS
            variableName        : BSTR
            vtVariableValue     : VARIANT
            bPrefixWithTag      : VARIANT_BOOL'''
        return super(IBuilderItem2, self).AddVariable(variableName, vtVariableValue, bPrefixWithTag)
    def put_Category(self, pItemCategory):
        '''Method IBuilderItem.put_Category (from IBuilderItem)

           INPUT
            pItemCategory       : esriRasterCatalogItemCategory'''
        return super(IBuilderItem2, self).put_Category(pItemCategory)
    def get_Category(self):
        '''Method IBuilderItem.get_Category (from IBuilderItem)

           OUTPUT
            pItemCategory       : esriRasterCatalogItemCategory*'''
        return super(IBuilderItem2, self).get_Category()
    Category = property(get_Category, put_Category, None)
    ColorCorrectionProperties = property(get_ColorCorrectionProperties, putref_ColorCorrectionProperties, None)
    Dataset = property(get_Dataset, putref_Dataset, None)
    DatasetName = property(get_DatasetName, putref_DatasetName, None)
    Footprint = property(get_Footprint, putref_Footprint, None)
    HasThumbnail = property(get_HasThumbnail, None, None)
    Seamline = property(get_Seamline, putref_Seamline, None)
    SeamlineProperties = property(get_SeamlineProperties, putref_SeamlineProperties, None)
    StereoID = property(get_StereoID, put_StereoID, None)
    StereoPairs = property(get_StereoPairs, putref_StereoPairs, None)
    Thumbnail = property(get_Thumbnail, put_Thumbnail, None)
    URI = property(get_URI, putref_URI, None)
    Variables = property(get_Variables, putref_Variables, None)

class IBuilderItem3(_esriDataSourcesRaster.IBuilderItem3):
    _IID = uuid.UUID('e0e41c47-72ec-4e66-8d6c-c6a90f6d1c21')

    def __init__(self, *args, **kw):
        super(IBuilderItem3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_AuxiliaryFieldValues(self, ppAuxiliaryFieldValues):
        '''Method IBuilderItem3.putref_AuxiliaryFieldValues

           INPUT
            ppAuxiliaryFieldValues: IPropertySet*'''
        return super(IBuilderItem3, self).putref_AuxiliaryFieldValues(ppAuxiliaryFieldValues)
    def get_AuxiliaryFieldValues(self):
        '''Method IBuilderItem3.get_AuxiliaryFieldValues

           OUTPUT
            ppAuxiliaryFieldValues: IPropertySet**'''
        return super(IBuilderItem3, self).get_AuxiliaryFieldValues()
    def putref_DatasetName(self, ppDatasetName):
        '''Method IBuilderItem2.putref_DatasetName (from IBuilderItem2)

           INPUT
            ppDatasetName       : IName*'''
        return super(IBuilderItem3, self).putref_DatasetName(ppDatasetName)
    def get_DatasetName(self):
        '''Method IBuilderItem2.get_DatasetName (from IBuilderItem2)

           OUTPUT
            ppDatasetName       : IName**'''
        return super(IBuilderItem3, self).get_DatasetName()
    def putref_SeamlineProperties(self, ppPropertySet):
        '''Method IBuilderItem2.putref_SeamlineProperties (from IBuilderItem2)

           INPUT
            ppPropertySet       : IPropertySet*'''
        return super(IBuilderItem3, self).putref_SeamlineProperties(ppPropertySet)
    def get_SeamlineProperties(self):
        '''Method IBuilderItem2.get_SeamlineProperties (from IBuilderItem2)

           OUTPUT
            ppPropertySet       : IPropertySet**'''
        return super(IBuilderItem3, self).get_SeamlineProperties()
    def putref_ColorCorrectionProperties(self, ppPropertySet):
        '''Method IBuilderItem2.putref_ColorCorrectionProperties (from IBuilderItem2)

           INPUT
            ppPropertySet       : IPropertySet*'''
        return super(IBuilderItem3, self).putref_ColorCorrectionProperties(ppPropertySet)
    def get_ColorCorrectionProperties(self):
        '''Method IBuilderItem2.get_ColorCorrectionProperties (from IBuilderItem2)

           OUTPUT
            ppPropertySet       : IPropertySet**'''
        return super(IBuilderItem3, self).get_ColorCorrectionProperties()
    def get_HasThumbnail(self):
        '''Method IBuilderItem2.get_HasThumbnail (from IBuilderItem2)

           OUTPUT
            pbHasThumbnail      : VARIANT_BOOL*'''
        return super(IBuilderItem3, self).get_HasThumbnail()
    def put_Thumbnail(self, pvtThumbnailBlob):
        '''Method IBuilderItem2.put_Thumbnail (from IBuilderItem2)

           INPUT
            pvtThumbnailBlob    : VARIANT'''
        return super(IBuilderItem3, self).put_Thumbnail(pvtThumbnailBlob)
    def get_Thumbnail(self):
        '''Method IBuilderItem2.get_Thumbnail (from IBuilderItem2)

           OUTPUT
            pvtThumbnailBlob    : VARIANT*'''
        return super(IBuilderItem3, self).get_Thumbnail()
    def putref_URI(self, ppItemURI):
        '''Method IBuilderItem.putref_URI (from IBuilderItem)

           INPUT
            ppItemURI           : IItemURI*'''
        return super(IBuilderItem3, self).putref_URI(ppItemURI)
    def get_URI(self):
        '''Method IBuilderItem.get_URI (from IBuilderItem)

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IBuilderItem3, self).get_URI()
    def putref_Dataset(self, ppDataset):
        '''Method IBuilderItem.putref_Dataset (from IBuilderItem)

           INPUT
            ppDataset           : IFunctionRasterDataset*'''
        return super(IBuilderItem3, self).putref_Dataset(ppDataset)
    def get_Dataset(self):
        '''Method IBuilderItem.get_Dataset (from IBuilderItem)

           OUTPUT
            ppDataset           : IFunctionRasterDataset**'''
        return super(IBuilderItem3, self).get_Dataset()
    def get_Footprint(self):
        '''Method IBuilderItem.get_Footprint (from IBuilderItem)

           OUTPUT
            ppFootprint         : IGeometry**'''
        return super(IBuilderItem3, self).get_Footprint()
    def putref_Footprint(self, ppFootprint):
        '''Method IBuilderItem.putref_Footprint (from IBuilderItem)

           INPUT
            ppFootprint         : IGeometry*'''
        return super(IBuilderItem3, self).putref_Footprint(ppFootprint)
    def get_Seamline(self):
        '''Method IBuilderItem.get_Seamline (from IBuilderItem)

           OUTPUT
            ppSeamline          : IGeometry**'''
        return super(IBuilderItem3, self).get_Seamline()
    def putref_Seamline(self, ppSeamline):
        '''Method IBuilderItem.putref_Seamline (from IBuilderItem)

           INPUT
            ppSeamline          : IGeometry*'''
        return super(IBuilderItem3, self).putref_Seamline(ppSeamline)
    def put_StereoID(self, pStereoID):
        '''Method IBuilderItem.put_StereoID (from IBuilderItem)

           INPUT
            pStereoID           : BSTR'''
        return super(IBuilderItem3, self).put_StereoID(pStereoID)
    def get_StereoID(self):
        '''Method IBuilderItem.get_StereoID (from IBuilderItem)

           OUTPUT
            pStereoID           : BSTR*'''
        return super(IBuilderItem3, self).get_StereoID()
    def putref_StereoPairs(self, ppStereoPairs):
        '''Method IBuilderItem.putref_StereoPairs (from IBuilderItem)

           INPUT
            ppStereoPairs       : IStringArray*'''
        return super(IBuilderItem3, self).putref_StereoPairs(ppStereoPairs)
    def get_StereoPairs(self):
        '''Method IBuilderItem.get_StereoPairs (from IBuilderItem)

           OUTPUT
            ppStereoPairs       : IStringArray**'''
        return super(IBuilderItem3, self).get_StereoPairs()
    def putref_Variables(self, ppVariables):
        '''Method IBuilderItem.putref_Variables (from IBuilderItem)

           INPUT
            ppVariables         : IPropertySet*'''
        return super(IBuilderItem3, self).putref_Variables(ppVariables)
    def get_Variables(self):
        '''Method IBuilderItem.get_Variables (from IBuilderItem)

           OUTPUT
            ppVariables         : IPropertySet**'''
        return super(IBuilderItem3, self).get_Variables()
    def AddVariable(self, variableName, vtVariableValue, bPrefixWithTag):
        '''Method IBuilderItem.AddVariable (from IBuilderItem)

           INPUTS
            variableName        : BSTR
            vtVariableValue     : VARIANT
            bPrefixWithTag      : VARIANT_BOOL'''
        return super(IBuilderItem3, self).AddVariable(variableName, vtVariableValue, bPrefixWithTag)
    def put_Category(self, pItemCategory):
        '''Method IBuilderItem.put_Category (from IBuilderItem)

           INPUT
            pItemCategory       : esriRasterCatalogItemCategory'''
        return super(IBuilderItem3, self).put_Category(pItemCategory)
    def get_Category(self):
        '''Method IBuilderItem.get_Category (from IBuilderItem)

           OUTPUT
            pItemCategory       : esriRasterCatalogItemCategory*'''
        return super(IBuilderItem3, self).get_Category()
    AuxiliaryFieldValues = property(get_AuxiliaryFieldValues, putref_AuxiliaryFieldValues, None)
    Category = property(get_Category, put_Category, None)
    ColorCorrectionProperties = property(get_ColorCorrectionProperties, putref_ColorCorrectionProperties, None)
    Dataset = property(get_Dataset, putref_Dataset, None)
    DatasetName = property(get_DatasetName, putref_DatasetName, None)
    Footprint = property(get_Footprint, putref_Footprint, None)
    HasThumbnail = property(get_HasThumbnail, None, None)
    Seamline = property(get_Seamline, putref_Seamline, None)
    SeamlineProperties = property(get_SeamlineProperties, putref_SeamlineProperties, None)
    StereoID = property(get_StereoID, put_StereoID, None)
    StereoPairs = property(get_StereoPairs, putref_StereoPairs, None)
    Thumbnail = property(get_Thumbnail, put_Thumbnail, None)
    URI = property(get_URI, putref_URI, None)
    Variables = property(get_Variables, putref_Variables, None)

class IRasterBuilderInit(_esriDataSourcesRaster.IRasterBuilderInit):
    _IID = uuid.UUID('d8e71e5a-401b-43a8-a55d-46881c51134c')

    def __init__(self, *args, **kw):
        super(IRasterBuilderInit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_MosaicDataset(self, ppMosaicDataset):
        '''Method IRasterBuilderInit.putref_MosaicDataset

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(IRasterBuilderInit, self).putref_MosaicDataset(ppMosaicDataset)
    def get_MosaicDataset(self):
        '''Method IRasterBuilderInit.get_MosaicDataset

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IRasterBuilderInit, self).get_MosaicDataset()
    def putref_TrackCancel(self, ppTrackCancel):
        '''Method IRasterBuilderInit.putref_TrackCancel

           INPUT
            ppTrackCancel       : ITrackCancel*'''
        return super(IRasterBuilderInit, self).putref_TrackCancel(ppTrackCancel)
    def get_TrackCancel(self):
        '''Method IRasterBuilderInit.get_TrackCancel

           OUTPUT
            ppTrackCancel       : ITrackCancel**'''
        return super(IRasterBuilderInit, self).get_TrackCancel()
    def putref_DefaultSpatialReference(self, ppDefaultSrs):
        '''Method IRasterBuilderInit.putref_DefaultSpatialReference

           INPUT
            ppDefaultSrs        : ISpatialReference*'''
        return super(IRasterBuilderInit, self).putref_DefaultSpatialReference(ppDefaultSrs)
    def get_DefaultSpatialReference(self):
        '''Method IRasterBuilderInit.get_DefaultSpatialReference

           OUTPUT
            ppDefaultSrs        : ISpatialReference**'''
        return super(IRasterBuilderInit, self).get_DefaultSpatialReference()
    def putref_RasterTypeOperation(self, ppRasterTypeOperation):
        '''Method IRasterBuilderInit.putref_RasterTypeOperation

           INPUT
            ppRasterTypeOperation: IRasterTypeOperation*'''
        return super(IRasterBuilderInit, self).putref_RasterTypeOperation(ppRasterTypeOperation)
    def get_RasterTypeOperation(self):
        '''Method IRasterBuilderInit.get_RasterTypeOperation

           OUTPUT
            ppRasterTypeOperation: IRasterTypeOperation**'''
        return super(IRasterBuilderInit, self).get_RasterTypeOperation()
    DefaultSpatialReference = property(get_DefaultSpatialReference, putref_DefaultSpatialReference, None)
    MosaicDataset = property(get_MosaicDataset, putref_MosaicDataset, None)
    RasterTypeOperation = property(get_RasterTypeOperation, putref_RasterTypeOperation, None)
    TrackCancel = property(get_TrackCancel, putref_TrackCancel, None)

class IRasterBuilderInit2(_esriDataSourcesRaster.IRasterBuilderInit2):
    _IID = uuid.UUID('4d53f22d-3d94-41b8-9d5b-aca99d46ecd7')

    def __init__(self, *args, **kw):
        super(IRasterBuilderInit2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_GeoTransformationHelper(self, ppGeoTransformationHelper):
        '''Method IRasterBuilderInit2.putref_GeoTransformationHelper

           INPUT
            ppGeoTransformationHelper: IGeoTransformationHelper*'''
        return super(IRasterBuilderInit2, self).putref_GeoTransformationHelper(ppGeoTransformationHelper)
    def get_GeoTransformationHelper(self):
        '''Method IRasterBuilderInit2.get_GeoTransformationHelper

           OUTPUT
            ppGeoTransformationHelper: IGeoTransformationHelper**'''
        return super(IRasterBuilderInit2, self).get_GeoTransformationHelper()
    def putref_MosaicDataset(self, ppMosaicDataset):
        '''Method IRasterBuilderInit.putref_MosaicDataset (from IRasterBuilderInit)

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(IRasterBuilderInit2, self).putref_MosaicDataset(ppMosaicDataset)
    def get_MosaicDataset(self):
        '''Method IRasterBuilderInit.get_MosaicDataset (from IRasterBuilderInit)

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IRasterBuilderInit2, self).get_MosaicDataset()
    def putref_TrackCancel(self, ppTrackCancel):
        '''Method IRasterBuilderInit.putref_TrackCancel (from IRasterBuilderInit)

           INPUT
            ppTrackCancel       : ITrackCancel*'''
        return super(IRasterBuilderInit2, self).putref_TrackCancel(ppTrackCancel)
    def get_TrackCancel(self):
        '''Method IRasterBuilderInit.get_TrackCancel (from IRasterBuilderInit)

           OUTPUT
            ppTrackCancel       : ITrackCancel**'''
        return super(IRasterBuilderInit2, self).get_TrackCancel()
    def putref_DefaultSpatialReference(self, ppDefaultSrs):
        '''Method IRasterBuilderInit.putref_DefaultSpatialReference (from IRasterBuilderInit)

           INPUT
            ppDefaultSrs        : ISpatialReference*'''
        return super(IRasterBuilderInit2, self).putref_DefaultSpatialReference(ppDefaultSrs)
    def get_DefaultSpatialReference(self):
        '''Method IRasterBuilderInit.get_DefaultSpatialReference (from IRasterBuilderInit)

           OUTPUT
            ppDefaultSrs        : ISpatialReference**'''
        return super(IRasterBuilderInit2, self).get_DefaultSpatialReference()
    def putref_RasterTypeOperation(self, ppRasterTypeOperation):
        '''Method IRasterBuilderInit.putref_RasterTypeOperation (from IRasterBuilderInit)

           INPUT
            ppRasterTypeOperation: IRasterTypeOperation*'''
        return super(IRasterBuilderInit2, self).putref_RasterTypeOperation(ppRasterTypeOperation)
    def get_RasterTypeOperation(self):
        '''Method IRasterBuilderInit.get_RasterTypeOperation (from IRasterBuilderInit)

           OUTPUT
            ppRasterTypeOperation: IRasterTypeOperation**'''
        return super(IRasterBuilderInit2, self).get_RasterTypeOperation()
    DefaultSpatialReference = property(get_DefaultSpatialReference, putref_DefaultSpatialReference, None)
    GeoTransformationHelper = property(get_GeoTransformationHelper, putref_GeoTransformationHelper, None)
    MosaicDataset = property(get_MosaicDataset, putref_MosaicDataset, None)
    RasterTypeOperation = property(get_RasterTypeOperation, putref_RasterTypeOperation, None)
    TrackCancel = property(get_TrackCancel, putref_TrackCancel, None)

class IItemTemplate2(_esriDataSourcesRaster.IItemTemplate2):
    _IID = uuid.UUID('63215c2b-86b2-4b41-84fb-50283cad0a7a')

    def __init__(self, *args, **kw):
        super(IItemTemplate2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_SupportsEnhancement(self, pbSupportsEnhancement):
        '''Method IItemTemplate2.put_SupportsEnhancement

           INPUT
            pbSupportsEnhancement: VARIANT_BOOL'''
        return super(IItemTemplate2, self).put_SupportsEnhancement(pbSupportsEnhancement)
    def get_SupportsEnhancement(self):
        '''Method IItemTemplate2.get_SupportsEnhancement

           OUTPUT
            pbSupportsEnhancement: VARIANT_BOOL*'''
        return super(IItemTemplate2, self).get_SupportsEnhancement()
    def EnableEnhancement(self, bEnableEnhancement):
        '''Method IItemTemplate2.EnableEnhancement

           INPUT
            bEnableEnhancement  : VARIANT_BOOL'''
        return super(IItemTemplate2, self).EnableEnhancement(bEnableEnhancement)
    def get_IsEnhancementEnabled(self):
        '''Method IItemTemplate2.get_IsEnhancementEnabled

           OUTPUT
            pbEnable            : VARIANT_BOOL*'''
        return super(IItemTemplate2, self).get_IsEnhancementEnabled()
    def put_IsSensorTemplate(self, pbIsSensorTemplate):
        '''Method IItemTemplate2.put_IsSensorTemplate

           INPUT
            pbIsSensorTemplate  : VARIANT_BOOL'''
        return super(IItemTemplate2, self).put_IsSensorTemplate(pbIsSensorTemplate)
    def get_IsSensorTemplate(self):
        '''Method IItemTemplate2.get_IsSensorTemplate

           OUTPUT
            pbIsSensorTemplate  : VARIANT_BOOL*'''
        return super(IItemTemplate2, self).get_IsSensorTemplate()
    def putref_GeoTransformationHelper(self, ppGeoTransformationHelper):
        '''Method IItemTemplate2.putref_GeoTransformationHelper

           INPUT
            ppGeoTransformationHelper: IGeoTransformationHelper*'''
        return super(IItemTemplate2, self).putref_GeoTransformationHelper(ppGeoTransformationHelper)
    def get_GeoTransformationHelper(self):
        '''Method IItemTemplate2.get_GeoTransformationHelper

           OUTPUT
            ppGeoTransformationHelper: IGeoTransformationHelper**'''
        return super(IItemTemplate2, self).get_GeoTransformationHelper()
    def AddAncillaryDataset(self, sOutputDatasetTag, sFunctionTemplateName, sPrimaryChainConnectorVariable):
        '''Method IItemTemplate2.AddAncillaryDataset

           INPUTS
            sOutputDatasetTag   : BSTR
            sFunctionTemplateName: BSTR
            sPrimaryChainConnectorVariable: BSTR'''
        return super(IItemTemplate2, self).AddAncillaryDataset(sOutputDatasetTag, sFunctionTemplateName, sPrimaryChainConnectorVariable)
    def GetAncillaryDatasets(self):
        '''Method IItemTemplate2.GetAncillaryDatasets

           OUTPUTS
            ppOutputDatasetTags : IStringArray**
            ppFunctionTemplateNames: IStringArray**
            ppPrimaryChainConnectorVariables: IStringArray**'''
        return super(IItemTemplate2, self).GetAncillaryDatasets()
    def put_Name(self, pItemTemplateName):
        '''Method IItemTemplate.put_Name (from IItemTemplate)

           INPUT
            pItemTemplateName   : BSTR'''
        return super(IItemTemplate2, self).put_Name(pItemTemplateName)
    def get_Name(self):
        '''Method IItemTemplate.get_Name (from IItemTemplate)

           OUTPUT
            pItemTemplateName   : BSTR*'''
        return super(IItemTemplate2, self).get_Name()
    def put_Enabled(self, pbEnabled):
        '''Method IItemTemplate.put_Enabled (from IItemTemplate)

           INPUT
            pbEnabled           : VARIANT_BOOL'''
        return super(IItemTemplate2, self).put_Enabled(pbEnabled)
    def get_Enabled(self):
        '''Method IItemTemplate.get_Enabled (from IItemTemplate)

           OUTPUT
            pbEnabled           : VARIANT_BOOL*'''
        return super(IItemTemplate2, self).get_Enabled()
    def putref_RasterFunctionTemplate(self, ppFunctionTemplate):
        '''Method IItemTemplate.putref_RasterFunctionTemplate (from IItemTemplate)

           INPUT
            ppFunctionTemplate  : IRasterFunctionTemplate*'''
        return super(IItemTemplate2, self).putref_RasterFunctionTemplate(ppFunctionTemplate)
    def get_RasterFunctionTemplate(self):
        '''Method IItemTemplate.get_RasterFunctionTemplate (from IItemTemplate)

           OUTPUT
            ppFunctionTemplate  : IRasterFunctionTemplate**'''
        return super(IItemTemplate2, self).get_RasterFunctionTemplate()
    def put_OutputDatasetTag(self, pOutputDatasetTag):
        '''Method IItemTemplate.put_OutputDatasetTag (from IItemTemplate)

           INPUT
            pOutputDatasetTag   : BSTR'''
        return super(IItemTemplate2, self).put_OutputDatasetTag(pOutputDatasetTag)
    def get_OutputDatasetTag(self):
        '''Method IItemTemplate.get_OutputDatasetTag (from IItemTemplate)

           OUTPUT
            pOutputDatasetTag   : BSTR*'''
        return super(IItemTemplate2, self).get_OutputDatasetTag()
    def put_PrimaryInputDatasetTag(self, pPrimaryInputDatasetTag):
        '''Method IItemTemplate.put_PrimaryInputDatasetTag (from IItemTemplate)

           INPUT
            pPrimaryInputDatasetTag: BSTR'''
        return super(IItemTemplate2, self).put_PrimaryInputDatasetTag(pPrimaryInputDatasetTag)
    def get_PrimaryInputDatasetTag(self):
        '''Method IItemTemplate.get_PrimaryInputDatasetTag (from IItemTemplate)

           OUTPUT
            pPrimaryInputDatasetTag: BSTR*'''
        return super(IItemTemplate2, self).get_PrimaryInputDatasetTag()
    def put_IntersectFootprints(self, pbIntersectFootprints):
        '''Method IItemTemplate.put_IntersectFootprints (from IItemTemplate)

           INPUT
            pbIntersectFootprints: VARIANT_BOOL'''
        return super(IItemTemplate2, self).put_IntersectFootprints(pbIntersectFootprints)
    def get_IntersectFootprints(self):
        '''Method IItemTemplate.get_IntersectFootprints (from IItemTemplate)

           OUTPUT
            pbIntersectFootprints: VARIANT_BOOL*'''
        return super(IItemTemplate2, self).get_IntersectFootprints()
    Enabled = property(get_Enabled, put_Enabled, None)
    GeoTransformationHelper = property(get_GeoTransformationHelper, putref_GeoTransformationHelper, None)
    IntersectFootprints = property(get_IntersectFootprints, put_IntersectFootprints, None)
    IsEnhancementEnabled = property(get_IsEnhancementEnabled, None, None)
    IsSensorTemplate = property(get_IsSensorTemplate, put_IsSensorTemplate, None)
    Name = property(get_Name, put_Name, None)
    OutputDatasetTag = property(get_OutputDatasetTag, put_OutputDatasetTag, None)
    PrimaryInputDatasetTag = property(get_PrimaryInputDatasetTag, put_PrimaryInputDatasetTag, None)
    RasterFunctionTemplate = property(get_RasterFunctionTemplate, putref_RasterFunctionTemplate, None)
    SupportsEnhancement = property(get_SupportsEnhancement, put_SupportsEnhancement, None)

class ICompositeURIFilter(_esriDataSourcesRaster.ICompositeURIFilter):
    _IID = uuid.UUID('dba0e8e1-cb71-427f-bb01-7236315ed267')

    def __init__(self, *args, **kw):
        super(ICompositeURIFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_URIFilters(self, ppURIFilters):
        '''Method ICompositeURIFilter.putref_URIFilters

           INPUT
            ppURIFilters        : IArray*'''
        return super(ICompositeURIFilter, self).putref_URIFilters(ppURIFilters)
    def get_URIFilters(self):
        '''Method ICompositeURIFilter.get_URIFilters

           OUTPUT
            ppURIFilters        : IArray**'''
        return super(ICompositeURIFilter, self).get_URIFilters()
    URIFilters = property(get_URIFilters, putref_URIFilters, None)

class IRasterBuilder2(_esriDataSourcesRaster.IRasterBuilder2):
    _IID = uuid.UUID('ec840d20-97c0-40a6-b86a-05179c79a745')

    def __init__(self, *args, **kw):
        super(IRasterBuilder2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def CanBuild(self, vtDataSource):
        '''Method IRasterBuilder2.CanBuild

           INPUT
            vtDataSource        : VARIANT

           OUTPUT
            pbCanBuild          : VARIANT_BOOL*'''
        return super(IRasterBuilder2, self).CanBuild(vtDataSource)
    def Validate(self):
        '''Method IRasterBuilder2.Validate'''
        return super(IRasterBuilder2, self).Validate()
    def get_CanMergeItems(self):
        '''Method IRasterBuilder2.get_CanMergeItems

           OUTPUT
            pbCanMergeItems     : VARIANT_BOOL*'''
        return super(IRasterBuilder2, self).get_CanMergeItems()
    def get_MergeItems(self):
        '''Method IRasterBuilder2.get_MergeItems

           OUTPUT
            pbMergeItems        : VARIANT_BOOL*'''
        return super(IRasterBuilder2, self).get_MergeItems()
    def put_MergeItems(self, pbMergeItems):
        '''Method IRasterBuilder2.put_MergeItems

           INPUT
            pbMergeItems        : VARIANT_BOOL'''
        return super(IRasterBuilder2, self).put_MergeItems(pbMergeItems)
    def GetRecommendedCrawler(self, pDataSourceProperties):
        '''Method IRasterBuilder.GetRecommendedCrawler (from IRasterBuilder)

           INPUT
            pDataSourceProperties: IPropertySet*

           OUTPUT
            ppRecommendedCrawler: IDataSourceCrawler**'''
        return super(IRasterBuilder2, self).GetRecommendedCrawler(pDataSourceProperties)
    def BeginConstruction(self, pCrawler):
        '''Method IRasterBuilder.BeginConstruction (from IRasterBuilder)

           INPUT
            pCrawler            : IDataSourceCrawler*'''
        return super(IRasterBuilder2, self).BeginConstruction(pCrawler)
    def ConstructURIs(self, crawlerItem):
        '''Method IRasterBuilder.ConstructURIs (from IRasterBuilder)

           INPUT
            crawlerItem         : VARIANT'''
        return super(IRasterBuilder2, self).ConstructURIs(crawlerItem)
    def GetNextURI(self):
        '''Method IRasterBuilder.GetNextURI (from IRasterBuilder)

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IRasterBuilder2, self).GetNextURI()
    def EndConstruction(self):
        '''Method IRasterBuilder.EndConstruction (from IRasterBuilder)

           OUTPUT
            ppRemainingItemURIs : IItemURIArray**'''
        return super(IRasterBuilder2, self).EndConstruction()
    def IsStale(self, pItemURI):
        '''Method IRasterBuilder.IsStale (from IRasterBuilder)

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            pIsStale            : VARIANT_BOOL*'''
        return super(IRasterBuilder2, self).IsStale(pItemURI)
    def Build(self, pItemURI):
        '''Method IRasterBuilder.Build (from IRasterBuilder)

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            ppBuilderItem       : IBuilderItem**'''
        return super(IRasterBuilder2, self).Build(pItemURI)
    def putref_Properties(self, ppBuilderPoperties):
        '''Method IRasterBuilder.putref_Properties (from IRasterBuilder)

           INPUT
            ppBuilderPoperties  : IPropertySet*'''
        return super(IRasterBuilder2, self).putref_Properties(ppBuilderPoperties)
    def get_Properties(self):
        '''Method IRasterBuilder.get_Properties (from IRasterBuilder)

           OUTPUT
            ppBuilderPoperties  : IPropertySet**'''
        return super(IRasterBuilder2, self).get_Properties()
    def putref_AuxiliaryFields(self, ppAuxiliaryFields):
        '''Method IRasterBuilder.putref_AuxiliaryFields (from IRasterBuilder)

           INPUT
            ppAuxiliaryFields   : IFields*'''
        return super(IRasterBuilder2, self).putref_AuxiliaryFields(ppAuxiliaryFields)
    def get_AuxiliaryFields(self):
        '''Method IRasterBuilder.get_AuxiliaryFields (from IRasterBuilder)

           OUTPUT
            ppAuxiliaryFields   : IFields**'''
        return super(IRasterBuilder2, self).get_AuxiliaryFields()
    def putref_AuxiliaryFieldAlias(self, ppFieldNameMap):
        '''Method IRasterBuilder.putref_AuxiliaryFieldAlias (from IRasterBuilder)

           INPUT
            ppFieldNameMap      : IPropertySet*'''
        return super(IRasterBuilder2, self).putref_AuxiliaryFieldAlias(ppFieldNameMap)
    def get_AuxiliaryFieldAlias(self):
        '''Method IRasterBuilder.get_AuxiliaryFieldAlias (from IRasterBuilder)

           OUTPUT
            ppFieldNameMap      : IPropertySet**'''
        return super(IRasterBuilder2, self).get_AuxiliaryFieldAlias()
    def get_CanBuildInPlace(self):
        '''Method IRasterBuilder.get_CanBuildInPlace (from IRasterBuilder)

           OUTPUT
            pbCanBuildInPlace   : VARIANT_BOOL*'''
        return super(IRasterBuilder2, self).get_CanBuildInPlace()
    AuxiliaryFieldAlias = property(get_AuxiliaryFieldAlias, putref_AuxiliaryFieldAlias, None)
    AuxiliaryFields = property(get_AuxiliaryFields, putref_AuxiliaryFields, None)
    CanBuildInPlace = property(get_CanBuildInPlace, None, None)
    CanMergeItems = property(get_CanMergeItems, None, None)
    MergeItems = property(get_MergeItems, put_MergeItems, None)
    Properties = property(get_Properties, putref_Properties, None)

class IRasterTypeProperties(_esriDataSourcesRaster.IRasterTypeProperties):
    _IID = uuid.UUID('078c7800-66f2-46cf-a182-78e6c4aade53')

    def __init__(self, *args, **kw):
        super(IRasterTypeProperties, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Name(self, pRasterTypeName):
        '''Method IRasterTypeProperties.put_Name

           INPUT
            pRasterTypeName     : BSTR'''
        return super(IRasterTypeProperties, self).put_Name(pRasterTypeName)
    def get_Name(self):
        '''Method IRasterTypeProperties.get_Name

           OUTPUT
            pRasterTypeName     : BSTR*'''
        return super(IRasterTypeProperties, self).get_Name()
    def put_Description(self, pRasterTypeDescription):
        '''Method IRasterTypeProperties.put_Description

           INPUT
            pRasterTypeDescription: BSTR'''
        return super(IRasterTypeProperties, self).put_Description(pRasterTypeDescription)
    def get_Description(self):
        '''Method IRasterTypeProperties.get_Description

           OUTPUT
            pRasterTypeDescription: BSTR*'''
        return super(IRasterTypeProperties, self).get_Description()
    def put_InputDataSourceTypes(self, pInputDataSourceTypes):
        '''Method IRasterTypeProperties.put_InputDataSourceTypes

           INPUT
            pInputDataSourceTypes: long'''
        return super(IRasterTypeProperties, self).put_InputDataSourceTypes(pInputDataSourceTypes)
    def get_InputDataSourceTypes(self):
        '''Method IRasterTypeProperties.get_InputDataSourceTypes

           OUTPUT
            pInputDataSourceTypes: long*'''
        return super(IRasterTypeProperties, self).get_InputDataSourceTypes()
    def put_DataSourceFilter(self, pDataSourceFilter):
        '''Method IRasterTypeProperties.put_DataSourceFilter

           INPUT
            pDataSourceFilter   : BSTR'''
        return super(IRasterTypeProperties, self).put_DataSourceFilter(pDataSourceFilter)
    def get_DataSourceFilter(self):
        '''Method IRasterTypeProperties.get_DataSourceFilter

           OUTPUT
            pDataSourceFilter   : BSTR*'''
        return super(IRasterTypeProperties, self).get_DataSourceFilter()
    def putref_SupportedURIFilters(self, pppItemURIFilterArray):
        '''Method IRasterTypeProperties.putref_SupportedURIFilters

           INPUT
            pppItemURIFilterArray: IArray*'''
        return super(IRasterTypeProperties, self).putref_SupportedURIFilters(pppItemURIFilterArray)
    def get_SupportedURIFilters(self):
        '''Method IRasterTypeProperties.get_SupportedURIFilters

           OUTPUT
            pppItemURIFilterArray: IArray**'''
        return super(IRasterTypeProperties, self).get_SupportedURIFilters()
    def put_SupportsOrthorectification(self, pbSupportsOrthorectification):
        '''Method IRasterTypeProperties.put_SupportsOrthorectification

           INPUT
            pbSupportsOrthorectification: VARIANT_BOOL'''
        return super(IRasterTypeProperties, self).put_SupportsOrthorectification(pbSupportsOrthorectification)
    def get_SupportsOrthorectification(self):
        '''Method IRasterTypeProperties.get_SupportsOrthorectification

           OUTPUT
            pbSupportsOrthorectification: VARIANT_BOOL*'''
        return super(IRasterTypeProperties, self).get_SupportsOrthorectification()
    def put_SupportsStereo(self, pbSupportsStereo):
        '''Method IRasterTypeProperties.put_SupportsStereo

           INPUT
            pbSupportsStereo    : VARIANT_BOOL'''
        return super(IRasterTypeProperties, self).put_SupportsStereo(pbSupportsStereo)
    def get_SupportsStereo(self):
        '''Method IRasterTypeProperties.get_SupportsStereo

           OUTPUT
            pbSupportsStereo    : VARIANT_BOOL*'''
        return super(IRasterTypeProperties, self).get_SupportsStereo()
    def put_SupportsSeamline(self, pbSupportsSeamline):
        '''Method IRasterTypeProperties.put_SupportsSeamline

           INPUT
            pbSupportsSeamline  : VARIANT_BOOL'''
        return super(IRasterTypeProperties, self).put_SupportsSeamline(pbSupportsSeamline)
    def get_SupportsSeamline(self):
        '''Method IRasterTypeProperties.get_SupportsSeamline

           OUTPUT
            pbSupportsSeamline  : VARIANT_BOOL*'''
        return super(IRasterTypeProperties, self).get_SupportsSeamline()
    def put_EnableClipToFootprint(self, pbEnableClipToFootprint):
        '''Method IRasterTypeProperties.put_EnableClipToFootprint

           INPUT
            pbEnableClipToFootprint: VARIANT_BOOL'''
        return super(IRasterTypeProperties, self).put_EnableClipToFootprint(pbEnableClipToFootprint)
    def get_EnableClipToFootprint(self):
        '''Method IRasterTypeProperties.get_EnableClipToFootprint

           OUTPUT
            pbEnableClipToFootprint: VARIANT_BOOL*'''
        return super(IRasterTypeProperties, self).get_EnableClipToFootprint()
    def put_AddRastersParameters(self, ppAddRastersParameters):
        '''Method IRasterTypeProperties.put_AddRastersParameters

           INPUT
            ppAddRastersParameters: IAddRastersParameters*'''
        return super(IRasterTypeProperties, self).put_AddRastersParameters(ppAddRastersParameters)
    def get_AddRastersParameters(self):
        '''Method IRasterTypeProperties.get_AddRastersParameters

           OUTPUT
            ppAddRastersParameters: IAddRastersParameters**'''
        return super(IRasterTypeProperties, self).get_AddRastersParameters()
    def put_SynchronizeParameters(self, ppSynchronizeParameters):
        '''Method IRasterTypeProperties.put_SynchronizeParameters

           INPUT
            ppSynchronizeParameters: ISynchronizeParameters*'''
        return super(IRasterTypeProperties, self).put_SynchronizeParameters(ppSynchronizeParameters)
    def get_SynchronizeParameters(self):
        '''Method IRasterTypeProperties.get_SynchronizeParameters

           OUTPUT
            ppSynchronizeParameters: ISynchronizeParameters**'''
        return super(IRasterTypeProperties, self).get_SynchronizeParameters()
    def putref_OrthorectificationParameters(self, ppIGeometricFunctionArguments):
        '''Method IRasterTypeProperties.putref_OrthorectificationParameters

           INPUT
            ppIGeometricFunctionArguments: IGeometricFunctionArguments*'''
        return super(IRasterTypeProperties, self).putref_OrthorectificationParameters(ppIGeometricFunctionArguments)
    def get_OrthorectificationParameters(self):
        '''Method IRasterTypeProperties.get_OrthorectificationParameters

           OUTPUT
            ppIGeometricFunctionArguments: IGeometricFunctionArguments**'''
        return super(IRasterTypeProperties, self).get_OrthorectificationParameters()
    def put_FirstAddTimeStamp(self, pFirstAddTimeStamp):
        '''Method IRasterTypeProperties.put_FirstAddTimeStamp

           INPUT
            pFirstAddTimeStamp  : DATE'''
        return super(IRasterTypeProperties, self).put_FirstAddTimeStamp(pFirstAddTimeStamp)
    def get_FirstAddTimeStamp(self):
        '''Method IRasterTypeProperties.get_FirstAddTimeStamp

           OUTPUT
            pFirstAddTimeStamp  : DATE*'''
        return super(IRasterTypeProperties, self).get_FirstAddTimeStamp()
    def put_LastAddTimeStamp(self, pLastAddTimeStamp):
        '''Method IRasterTypeProperties.put_LastAddTimeStamp

           INPUT
            pLastAddTimeStamp   : DATE'''
        return super(IRasterTypeProperties, self).put_LastAddTimeStamp(pLastAddTimeStamp)
    def get_LastAddTimeStamp(self):
        '''Method IRasterTypeProperties.get_LastAddTimeStamp

           OUTPUT
            pLastAddTimeStamp   : DATE*'''
        return super(IRasterTypeProperties, self).get_LastAddTimeStamp()
    def put_LastSyncTimeStamp(self, pLastSyncTimeStamp):
        '''Method IRasterTypeProperties.put_LastSyncTimeStamp

           INPUT
            pLastSyncTimeStamp  : DATE'''
        return super(IRasterTypeProperties, self).put_LastSyncTimeStamp(pLastSyncTimeStamp)
    def get_LastSyncTimeStamp(self):
        '''Method IRasterTypeProperties.get_LastSyncTimeStamp

           OUTPUT
            pLastSyncTimeStamp  : DATE*'''
        return super(IRasterTypeProperties, self).get_LastSyncTimeStamp()
    def put_OperationDescription(self, pOperationDescription):
        '''Method IRasterTypeProperties.put_OperationDescription

           INPUT
            pOperationDescription: BSTR'''
        return super(IRasterTypeProperties, self).put_OperationDescription(pOperationDescription)
    def get_OperationDescription(self):
        '''Method IRasterTypeProperties.get_OperationDescription

           OUTPUT
            pOperationDescription: BSTR*'''
        return super(IRasterTypeProperties, self).get_OperationDescription()
    AddRastersParameters = property(get_AddRastersParameters, put_AddRastersParameters, None)
    DataSourceFilter = property(get_DataSourceFilter, put_DataSourceFilter, None)
    Description = property(get_Description, put_Description, None)
    EnableClipToFootprint = property(get_EnableClipToFootprint, put_EnableClipToFootprint, None)
    FirstAddTimeStamp = property(get_FirstAddTimeStamp, put_FirstAddTimeStamp, None)
    InputDataSourceTypes = property(get_InputDataSourceTypes, put_InputDataSourceTypes, None)
    LastAddTimeStamp = property(get_LastAddTimeStamp, put_LastAddTimeStamp, None)
    LastSyncTimeStamp = property(get_LastSyncTimeStamp, put_LastSyncTimeStamp, None)
    Name = property(get_Name, put_Name, None)
    OperationDescription = property(get_OperationDescription, put_OperationDescription, None)
    OrthorectificationParameters = property(get_OrthorectificationParameters, putref_OrthorectificationParameters, None)
    SupportedURIFilters = property(get_SupportedURIFilters, putref_SupportedURIFilters, None)
    SupportsOrthorectification = property(get_SupportsOrthorectification, put_SupportsOrthorectification, None)
    SupportsSeamline = property(get_SupportsSeamline, put_SupportsSeamline, None)
    SupportsStereo = property(get_SupportsStereo, put_SupportsStereo, None)
    SynchronizeParameters = property(get_SynchronizeParameters, put_SynchronizeParameters, None)

class IRasterTypeProperties2(_esriDataSourcesRaster.IRasterTypeProperties2):
    _IID = uuid.UUID('7bd60984-38d6-4c55-94ed-1ed74a839727')

    def __init__(self, *args, **kw):
        super(IRasterTypeProperties2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_IsSensorRasterType(self, pbIsSensorRasterType):
        '''Method IRasterTypeProperties2.put_IsSensorRasterType

           INPUT
            pbIsSensorRasterType: VARIANT_BOOL'''
        return super(IRasterTypeProperties2, self).put_IsSensorRasterType(pbIsSensorRasterType)
    def get_IsSensorRasterType(self):
        '''Method IRasterTypeProperties2.get_IsSensorRasterType

           OUTPUT
            pbIsSensorRasterType: VARIANT_BOOL*'''
        return super(IRasterTypeProperties2, self).get_IsSensorRasterType()
    def putref_Aliases(self, ppAliases):
        '''Method IRasterTypeProperties2.putref_Aliases

           INPUT
            ppAliases           : IStringArray*'''
        return super(IRasterTypeProperties2, self).putref_Aliases(ppAliases)
    def get_Aliases(self):
        '''Method IRasterTypeProperties2.get_Aliases

           OUTPUT
            ppAliases           : IStringArray**'''
        return super(IRasterTypeProperties2, self).get_Aliases()
    def put_AllowSimplification(self, pbAllowSimplification):
        '''Method IRasterTypeProperties2.put_AllowSimplification

           INPUT
            pbAllowSimplification: VARIANT_BOOL'''
        return super(IRasterTypeProperties2, self).put_AllowSimplification(pbAllowSimplification)
    def get_AllowSimplification(self):
        '''Method IRasterTypeProperties2.get_AllowSimplification

           OUTPUT
            pbAllowSimplification: VARIANT_BOOL*'''
        return super(IRasterTypeProperties2, self).get_AllowSimplification()
    def put_Version(self, pVersion):
        '''Method IRasterTypeProperties2.put_Version

           INPUT
            pVersion            : long'''
        return super(IRasterTypeProperties2, self).put_Version(pVersion)
    def get_Version(self):
        '''Method IRasterTypeProperties2.get_Version

           OUTPUT
            pVersion            : long*'''
        return super(IRasterTypeProperties2, self).get_Version()
    def get_MissingBandAction(self):
        '''Method IRasterTypeProperties2.get_MissingBandAction

           OUTPUT
            pMissingBandAction  : esriMissingBandAction*'''
        return super(IRasterTypeProperties2, self).get_MissingBandAction()
    def put_MissingBandAction(self, pMissingBandAction):
        '''Method IRasterTypeProperties2.put_MissingBandAction

           INPUT
            pMissingBandAction  : esriMissingBandAction'''
        return super(IRasterTypeProperties2, self).put_MissingBandAction(pMissingBandAction)
    def putref_FactoryCLSID(self, ppFactoryClsid):
        '''Method IRasterTypeProperties2.putref_FactoryCLSID

           INPUT
            ppFactoryClsid      : IUID*'''
        return super(IRasterTypeProperties2, self).putref_FactoryCLSID(ppFactoryClsid)
    def get_FactoryCLSID(self):
        '''Method IRasterTypeProperties2.get_FactoryCLSID

           OUTPUT
            ppFactoryClsid      : IUID**'''
        return super(IRasterTypeProperties2, self).get_FactoryCLSID()
    def put_SupportsColorCorrection(self, pbSupportsColorCorrection):
        '''Method IRasterTypeProperties2.put_SupportsColorCorrection

           INPUT
            pbSupportsColorCorrection: VARIANT_BOOL'''
        return super(IRasterTypeProperties2, self).put_SupportsColorCorrection(pbSupportsColorCorrection)
    def get_SupportsColorCorrection(self):
        '''Method IRasterTypeProperties2.get_SupportsColorCorrection

           OUTPUT
            pbSupportsColorCorrection: VARIANT_BOOL*'''
        return super(IRasterTypeProperties2, self).get_SupportsColorCorrection()
    def put_Name(self, pRasterTypeName):
        '''Method IRasterTypeProperties.put_Name (from IRasterTypeProperties)

           INPUT
            pRasterTypeName     : BSTR'''
        return super(IRasterTypeProperties2, self).put_Name(pRasterTypeName)
    def get_Name(self):
        '''Method IRasterTypeProperties.get_Name (from IRasterTypeProperties)

           OUTPUT
            pRasterTypeName     : BSTR*'''
        return super(IRasterTypeProperties2, self).get_Name()
    def put_Description(self, pRasterTypeDescription):
        '''Method IRasterTypeProperties.put_Description (from IRasterTypeProperties)

           INPUT
            pRasterTypeDescription: BSTR'''
        return super(IRasterTypeProperties2, self).put_Description(pRasterTypeDescription)
    def get_Description(self):
        '''Method IRasterTypeProperties.get_Description (from IRasterTypeProperties)

           OUTPUT
            pRasterTypeDescription: BSTR*'''
        return super(IRasterTypeProperties2, self).get_Description()
    def put_InputDataSourceTypes(self, pInputDataSourceTypes):
        '''Method IRasterTypeProperties.put_InputDataSourceTypes (from IRasterTypeProperties)

           INPUT
            pInputDataSourceTypes: long'''
        return super(IRasterTypeProperties2, self).put_InputDataSourceTypes(pInputDataSourceTypes)
    def get_InputDataSourceTypes(self):
        '''Method IRasterTypeProperties.get_InputDataSourceTypes (from IRasterTypeProperties)

           OUTPUT
            pInputDataSourceTypes: long*'''
        return super(IRasterTypeProperties2, self).get_InputDataSourceTypes()
    def put_DataSourceFilter(self, pDataSourceFilter):
        '''Method IRasterTypeProperties.put_DataSourceFilter (from IRasterTypeProperties)

           INPUT
            pDataSourceFilter   : BSTR'''
        return super(IRasterTypeProperties2, self).put_DataSourceFilter(pDataSourceFilter)
    def get_DataSourceFilter(self):
        '''Method IRasterTypeProperties.get_DataSourceFilter (from IRasterTypeProperties)

           OUTPUT
            pDataSourceFilter   : BSTR*'''
        return super(IRasterTypeProperties2, self).get_DataSourceFilter()
    def putref_SupportedURIFilters(self, pppItemURIFilterArray):
        '''Method IRasterTypeProperties.putref_SupportedURIFilters (from IRasterTypeProperties)

           INPUT
            pppItemURIFilterArray: IArray*'''
        return super(IRasterTypeProperties2, self).putref_SupportedURIFilters(pppItemURIFilterArray)
    def get_SupportedURIFilters(self):
        '''Method IRasterTypeProperties.get_SupportedURIFilters (from IRasterTypeProperties)

           OUTPUT
            pppItemURIFilterArray: IArray**'''
        return super(IRasterTypeProperties2, self).get_SupportedURIFilters()
    def put_SupportsOrthorectification(self, pbSupportsOrthorectification):
        '''Method IRasterTypeProperties.put_SupportsOrthorectification (from IRasterTypeProperties)

           INPUT
            pbSupportsOrthorectification: VARIANT_BOOL'''
        return super(IRasterTypeProperties2, self).put_SupportsOrthorectification(pbSupportsOrthorectification)
    def get_SupportsOrthorectification(self):
        '''Method IRasterTypeProperties.get_SupportsOrthorectification (from IRasterTypeProperties)

           OUTPUT
            pbSupportsOrthorectification: VARIANT_BOOL*'''
        return super(IRasterTypeProperties2, self).get_SupportsOrthorectification()
    def put_SupportsStereo(self, pbSupportsStereo):
        '''Method IRasterTypeProperties.put_SupportsStereo (from IRasterTypeProperties)

           INPUT
            pbSupportsStereo    : VARIANT_BOOL'''
        return super(IRasterTypeProperties2, self).put_SupportsStereo(pbSupportsStereo)
    def get_SupportsStereo(self):
        '''Method IRasterTypeProperties.get_SupportsStereo (from IRasterTypeProperties)

           OUTPUT
            pbSupportsStereo    : VARIANT_BOOL*'''
        return super(IRasterTypeProperties2, self).get_SupportsStereo()
    def put_SupportsSeamline(self, pbSupportsSeamline):
        '''Method IRasterTypeProperties.put_SupportsSeamline (from IRasterTypeProperties)

           INPUT
            pbSupportsSeamline  : VARIANT_BOOL'''
        return super(IRasterTypeProperties2, self).put_SupportsSeamline(pbSupportsSeamline)
    def get_SupportsSeamline(self):
        '''Method IRasterTypeProperties.get_SupportsSeamline (from IRasterTypeProperties)

           OUTPUT
            pbSupportsSeamline  : VARIANT_BOOL*'''
        return super(IRasterTypeProperties2, self).get_SupportsSeamline()
    def put_EnableClipToFootprint(self, pbEnableClipToFootprint):
        '''Method IRasterTypeProperties.put_EnableClipToFootprint (from IRasterTypeProperties)

           INPUT
            pbEnableClipToFootprint: VARIANT_BOOL'''
        return super(IRasterTypeProperties2, self).put_EnableClipToFootprint(pbEnableClipToFootprint)
    def get_EnableClipToFootprint(self):
        '''Method IRasterTypeProperties.get_EnableClipToFootprint (from IRasterTypeProperties)

           OUTPUT
            pbEnableClipToFootprint: VARIANT_BOOL*'''
        return super(IRasterTypeProperties2, self).get_EnableClipToFootprint()
    def put_AddRastersParameters(self, ppAddRastersParameters):
        '''Method IRasterTypeProperties.put_AddRastersParameters (from IRasterTypeProperties)

           INPUT
            ppAddRastersParameters: IAddRastersParameters*'''
        return super(IRasterTypeProperties2, self).put_AddRastersParameters(ppAddRastersParameters)
    def get_AddRastersParameters(self):
        '''Method IRasterTypeProperties.get_AddRastersParameters (from IRasterTypeProperties)

           OUTPUT
            ppAddRastersParameters: IAddRastersParameters**'''
        return super(IRasterTypeProperties2, self).get_AddRastersParameters()
    def put_SynchronizeParameters(self, ppSynchronizeParameters):
        '''Method IRasterTypeProperties.put_SynchronizeParameters (from IRasterTypeProperties)

           INPUT
            ppSynchronizeParameters: ISynchronizeParameters*'''
        return super(IRasterTypeProperties2, self).put_SynchronizeParameters(ppSynchronizeParameters)
    def get_SynchronizeParameters(self):
        '''Method IRasterTypeProperties.get_SynchronizeParameters (from IRasterTypeProperties)

           OUTPUT
            ppSynchronizeParameters: ISynchronizeParameters**'''
        return super(IRasterTypeProperties2, self).get_SynchronizeParameters()
    def putref_OrthorectificationParameters(self, ppIGeometricFunctionArguments):
        '''Method IRasterTypeProperties.putref_OrthorectificationParameters (from IRasterTypeProperties)

           INPUT
            ppIGeometricFunctionArguments: IGeometricFunctionArguments*'''
        return super(IRasterTypeProperties2, self).putref_OrthorectificationParameters(ppIGeometricFunctionArguments)
    def get_OrthorectificationParameters(self):
        '''Method IRasterTypeProperties.get_OrthorectificationParameters (from IRasterTypeProperties)

           OUTPUT
            ppIGeometricFunctionArguments: IGeometricFunctionArguments**'''
        return super(IRasterTypeProperties2, self).get_OrthorectificationParameters()
    def put_FirstAddTimeStamp(self, pFirstAddTimeStamp):
        '''Method IRasterTypeProperties.put_FirstAddTimeStamp (from IRasterTypeProperties)

           INPUT
            pFirstAddTimeStamp  : DATE'''
        return super(IRasterTypeProperties2, self).put_FirstAddTimeStamp(pFirstAddTimeStamp)
    def get_FirstAddTimeStamp(self):
        '''Method IRasterTypeProperties.get_FirstAddTimeStamp (from IRasterTypeProperties)

           OUTPUT
            pFirstAddTimeStamp  : DATE*'''
        return super(IRasterTypeProperties2, self).get_FirstAddTimeStamp()
    def put_LastAddTimeStamp(self, pLastAddTimeStamp):
        '''Method IRasterTypeProperties.put_LastAddTimeStamp (from IRasterTypeProperties)

           INPUT
            pLastAddTimeStamp   : DATE'''
        return super(IRasterTypeProperties2, self).put_LastAddTimeStamp(pLastAddTimeStamp)
    def get_LastAddTimeStamp(self):
        '''Method IRasterTypeProperties.get_LastAddTimeStamp (from IRasterTypeProperties)

           OUTPUT
            pLastAddTimeStamp   : DATE*'''
        return super(IRasterTypeProperties2, self).get_LastAddTimeStamp()
    def put_LastSyncTimeStamp(self, pLastSyncTimeStamp):
        '''Method IRasterTypeProperties.put_LastSyncTimeStamp (from IRasterTypeProperties)

           INPUT
            pLastSyncTimeStamp  : DATE'''
        return super(IRasterTypeProperties2, self).put_LastSyncTimeStamp(pLastSyncTimeStamp)
    def get_LastSyncTimeStamp(self):
        '''Method IRasterTypeProperties.get_LastSyncTimeStamp (from IRasterTypeProperties)

           OUTPUT
            pLastSyncTimeStamp  : DATE*'''
        return super(IRasterTypeProperties2, self).get_LastSyncTimeStamp()
    def put_OperationDescription(self, pOperationDescription):
        '''Method IRasterTypeProperties.put_OperationDescription (from IRasterTypeProperties)

           INPUT
            pOperationDescription: BSTR'''
        return super(IRasterTypeProperties2, self).put_OperationDescription(pOperationDescription)
    def get_OperationDescription(self):
        '''Method IRasterTypeProperties.get_OperationDescription (from IRasterTypeProperties)

           OUTPUT
            pOperationDescription: BSTR*'''
        return super(IRasterTypeProperties2, self).get_OperationDescription()
    AddRastersParameters = property(get_AddRastersParameters, put_AddRastersParameters, None)
    Aliases = property(get_Aliases, putref_Aliases, None)
    AllowSimplification = property(get_AllowSimplification, put_AllowSimplification, None)
    DataSourceFilter = property(get_DataSourceFilter, put_DataSourceFilter, None)
    Description = property(get_Description, put_Description, None)
    EnableClipToFootprint = property(get_EnableClipToFootprint, put_EnableClipToFootprint, None)
    FactoryCLSID = property(get_FactoryCLSID, putref_FactoryCLSID, None)
    FirstAddTimeStamp = property(get_FirstAddTimeStamp, put_FirstAddTimeStamp, None)
    InputDataSourceTypes = property(get_InputDataSourceTypes, put_InputDataSourceTypes, None)
    IsSensorRasterType = property(get_IsSensorRasterType, put_IsSensorRasterType, None)
    LastAddTimeStamp = property(get_LastAddTimeStamp, put_LastAddTimeStamp, None)
    LastSyncTimeStamp = property(get_LastSyncTimeStamp, put_LastSyncTimeStamp, None)
    MissingBandAction = property(get_MissingBandAction, put_MissingBandAction, None)
    Name = property(get_Name, put_Name, None)
    OperationDescription = property(get_OperationDescription, put_OperationDescription, None)
    OrthorectificationParameters = property(get_OrthorectificationParameters, putref_OrthorectificationParameters, None)
    SupportedURIFilters = property(get_SupportedURIFilters, putref_SupportedURIFilters, None)
    SupportsColorCorrection = property(get_SupportsColorCorrection, put_SupportsColorCorrection, None)
    SupportsOrthorectification = property(get_SupportsOrthorectification, put_SupportsOrthorectification, None)
    SupportsSeamline = property(get_SupportsSeamline, put_SupportsSeamline, None)
    SupportsStereo = property(get_SupportsStereo, put_SupportsStereo, None)
    SynchronizeParameters = property(get_SynchronizeParameters, put_SynchronizeParameters, None)
    Version = property(get_Version, put_Version, None)

class IMosaicDataset2(_esriDataSourcesRaster.IMosaicDataset2):
    _IID = uuid.UUID('63c4a7c3-a7dd-46a8-9e12-5ed568517fac')

    def __init__(self, *args, **kw):
        super(IMosaicDataset2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StatusTable(self):
        '''Method IMosaicDataset2.get_StatusTable

           OUTPUT
            ppStatusTable       : ITable**'''
        return super(IMosaicDataset2, self).get_StatusTable()
    def putref_StatusTable(self, ppStatusTable):
        '''Method IMosaicDataset2.putref_StatusTable

           INPUT
            ppStatusTable       : ITable*'''
        return super(IMosaicDataset2, self).putref_StatusTable(ppStatusTable)
    def get_AnalysisResults(self):
        '''Method IMosaicDataset2.get_AnalysisResults

           OUTPUT
            ppAnalysisResultsTable: ITable**'''
        return super(IMosaicDataset2, self).get_AnalysisResults()
    def putref_AnalysisResults(self, ppAnalysisResultsTable):
        '''Method IMosaicDataset2.putref_AnalysisResults

           INPUT
            ppAnalysisResultsTable: ITable*'''
        return super(IMosaicDataset2, self).putref_AnalysisResults(ppAnalysisResultsTable)
    def ComputeCellSizes(self):
        '''Method IMosaicDataset2.ComputeCellSizes

           OUTPUTS
            pLowCellSize        : double*
            pHighCellSize       : double*'''
        return super(IMosaicDataset2, self).ComputeCellSizes()
    def get_ViewTable(self):
        '''Method IMosaicDataset2.get_ViewTable

           OUTPUT
            ppViewTable         : ITable**'''
        return super(IMosaicDataset2, self).get_ViewTable()
    def putref_ViewTable(self, ppViewTable):
        '''Method IMosaicDataset2.putref_ViewTable

           INPUT
            ppViewTable         : ITable*'''
        return super(IMosaicDataset2, self).putref_ViewTable(ppViewTable)
    def get_CacheTable(self):
        '''Method IMosaicDataset2.get_CacheTable

           OUTPUT
            ppCacheTable        : ITable**'''
        return super(IMosaicDataset2, self).get_CacheTable()
    def putref_CacheTable(self, ppCacheTable):
        '''Method IMosaicDataset2.putref_CacheTable

           INPUT
            ppCacheTable        : ITable*'''
        return super(IMosaicDataset2, self).putref_CacheTable(ppCacheTable)
    def get_Catalog(self):
        '''Method IMosaicDataset.get_Catalog (from IMosaicDataset)

           OUTPUT
            ppCatalog           : IFeatureClass**'''
        return super(IMosaicDataset2, self).get_Catalog()
    def put_DeviceDpi(self, pDpi):
        '''Method IMosaicDataset.put_DeviceDpi (from IMosaicDataset)

           INPUT
            pDpi                : double'''
        return super(IMosaicDataset2, self).put_DeviceDpi(pDpi)
    def get_DeviceDpi(self):
        '''Method IMosaicDataset.get_DeviceDpi (from IMosaicDataset)

           OUTPUT
            pDpi                : double*'''
        return super(IMosaicDataset2, self).get_DeviceDpi()
    def get_Referenced(self):
        '''Method IMosaicDataset.get_Referenced (from IMosaicDataset)

           OUTPUT
            pReferenced         : VARIANT_BOOL*'''
        return super(IMosaicDataset2, self).get_Referenced()
    def put_Referenced(self, pReferenced):
        '''Method IMosaicDataset.put_Referenced (from IMosaicDataset)

           INPUT
            pReferenced         : VARIANT_BOOL'''
        return super(IMosaicDataset2, self).put_Referenced(pReferenced)
    def get_CatalogType(self):
        '''Method IMosaicDataset.get_CatalogType (from IMosaicDataset)

           OUTPUT
            pRasterCatalogType  : esriRasterCatalogType*'''
        return super(IMosaicDataset2, self).get_CatalogType()
    def get_Boundary(self):
        '''Method IMosaicDataset.get_Boundary (from IMosaicDataset)

           OUTPUT
            ppBoundary          : IFeatureClass**'''
        return super(IMosaicDataset2, self).get_Boundary()
    def get_BoundaryGeometry(self):
        '''Method IMosaicDataset.get_BoundaryGeometry (from IMosaicDataset)

           OUTPUT
            ppBoundaryGeometry  : IGeometry**'''
        return super(IMosaicDataset2, self).get_BoundaryGeometry()
    def get_Seamline(self):
        '''Method IMosaicDataset.get_Seamline (from IMosaicDataset)

           OUTPUT
            ppSeamline          : IFeatureClass**'''
        return super(IMosaicDataset2, self).get_Seamline()
    def get_StereoTable(self):
        '''Method IMosaicDataset.get_StereoTable (from IMosaicDataset)

           OUTPUT
            ppStereoTable       : ITable**'''
        return super(IMosaicDataset2, self).get_StereoTable()
    def get_DodgingTable(self):
        '''Method IMosaicDataset.get_DodgingTable (from IMosaicDataset)

           OUTPUT
            ppDodgingTable      : ITable**'''
        return super(IMosaicDataset2, self).get_DodgingTable()
    def get_RasterTypeTable(self):
        '''Method IMosaicDataset.get_RasterTypeTable (from IMosaicDataset)

           OUTPUT
            ppRasterTypeTable   : ITable**'''
        return super(IMosaicDataset2, self).get_RasterTypeTable()
    def putref_RasterTypeTable(self, ppRasterTypeTable):
        '''Method IMosaicDataset.putref_RasterTypeTable (from IMosaicDataset)

           INPUT
            ppRasterTypeTable   : ITable*'''
        return super(IMosaicDataset2, self).putref_RasterTypeTable(ppRasterTypeTable)
    def get_OverviewTable(self):
        '''Method IMosaicDataset.get_OverviewTable (from IMosaicDataset)

           OUTPUT
            ppOverviewTable     : ITable**'''
        return super(IMosaicDataset2, self).get_OverviewTable()
    def putref_OverviewTable(self, ppOverviewTable):
        '''Method IMosaicDataset.putref_OverviewTable (from IMosaicDataset)

           INPUT
            ppOverviewTable     : ITable*'''
        return super(IMosaicDataset2, self).putref_OverviewTable(ppOverviewTable)
    def get_LogTable(self):
        '''Method IMosaicDataset.get_LogTable (from IMosaicDataset)

           OUTPUT
            ppLogTable          : ITable**'''
        return super(IMosaicDataset2, self).get_LogTable()
    def putref_LogTable(self, ppLogTable):
        '''Method IMosaicDataset.putref_LogTable (from IMosaicDataset)

           INPUT
            ppLogTable          : ITable*'''
        return super(IMosaicDataset2, self).putref_LogTable(ppLogTable)
    def get_LevelsTable(self):
        '''Method IMosaicDataset.get_LevelsTable (from IMosaicDataset)

           OUTPUT
            ppLevelsTable       : ITable**'''
        return super(IMosaicDataset2, self).get_LevelsTable()
    def putref_LevelsTable(self, ppLevelsTable):
        '''Method IMosaicDataset.putref_LevelsTable (from IMosaicDataset)

           INPUT
            ppLevelsTable       : ITable*'''
        return super(IMosaicDataset2, self).putref_LevelsTable(ppLevelsTable)
    def get_VisibleFields(self):
        '''Method IMosaicDataset.get_VisibleFields (from IMosaicDataset)

           OUTPUT
            pVisibleFields      : BSTR*'''
        return super(IMosaicDataset2, self).get_VisibleFields()
    def get_Children(self):
        '''Method IMosaicDataset.get_Children (from IMosaicDataset)

           OUTPUT
            ppNames             : IEnumName**'''
        return super(IMosaicDataset2, self).get_Children()
    def get_MosaicFunction(self):
        '''Method IMosaicDataset.get_MosaicFunction (from IMosaicDataset)

           OUTPUT
            ppFunction          : IMosaicFunction**'''
        return super(IMosaicDataset2, self).get_MosaicFunction()
    def get_MosaicFunctionArguments(self):
        '''Method IMosaicDataset.get_MosaicFunctionArguments (from IMosaicDataset)

           OUTPUT
            ppArguments         : IMosaicFunctionArguments**'''
        return super(IMosaicDataset2, self).get_MosaicFunctionArguments()
    def ApplyFunction(self, pFunction, pArguments, Name):
        '''Method IMosaicDataset.ApplyFunction (from IMosaicDataset)

           INPUTS
            pFunction           : IRasterFunction*
            pArguments          : IUnknown*
            Name                : BSTR'''
        return super(IMosaicDataset2, self).ApplyFunction(pFunction, pArguments, Name)
    def ClearFunction(self):
        '''Method IMosaicDataset.ClearFunction (from IMosaicDataset)'''
        return super(IMosaicDataset2, self).ClearFunction()
    def get_RelativePath(self):
        '''Method IMosaicDataset.get_RelativePath (from IMosaicDataset)

           OUTPUT
            pPath               : BSTR*'''
        return super(IMosaicDataset2, self).get_RelativePath()
    def put_RelativePath(self, pPath):
        '''Method IMosaicDataset.put_RelativePath (from IMosaicDataset)

           INPUT
            pPath               : BSTR'''
        return super(IMosaicDataset2, self).put_RelativePath(pPath)
    AnalysisResults = property(get_AnalysisResults, putref_AnalysisResults, None)
    Boundary = property(get_Boundary, None, None)
    BoundaryGeometry = property(get_BoundaryGeometry, None, None)
    CacheTable = property(get_CacheTable, putref_CacheTable, None)
    Catalog = property(get_Catalog, None, None)
    CatalogType = property(get_CatalogType, None, None)
    Children = property(get_Children, None, None)
    DeviceDpi = property(get_DeviceDpi, put_DeviceDpi, None)
    DodgingTable = property(get_DodgingTable, None, None)
    LevelsTable = property(get_LevelsTable, putref_LevelsTable, None)
    LogTable = property(get_LogTable, putref_LogTable, None)
    MosaicFunction = property(get_MosaicFunction, None, None)
    MosaicFunctionArguments = property(get_MosaicFunctionArguments, None, None)
    OverviewTable = property(get_OverviewTable, putref_OverviewTable, None)
    RasterTypeTable = property(get_RasterTypeTable, putref_RasterTypeTable, None)
    Referenced = property(get_Referenced, put_Referenced, None)
    RelativePath = property(get_RelativePath, put_RelativePath, None)
    Seamline = property(get_Seamline, None, None)
    StatusTable = property(get_StatusTable, putref_StatusTable, None)
    StereoTable = property(get_StereoTable, None, None)
    ViewTable = property(get_ViewTable, putref_ViewTable, None)
    VisibleFields = property(get_VisibleFields, None, None)

class IMosaicDatasetOperationParameters(_esriDataSourcesRaster.IMosaicDatasetOperationParameters):
    _IID = uuid.UUID('379006f4-6f75-4c3b-b783-0c2e88a7b280')

    def __init__(self, *args, **kw):
        super(IMosaicDatasetOperationParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Parameters(self, ppAllParameters):
        '''Method IMosaicDatasetOperationParameters.putref_Parameters

           INPUT
            ppAllParameters     : IPropertySet*'''
        return super(IMosaicDatasetOperationParameters, self).putref_Parameters(ppAllParameters)
    def get_Parameters(self):
        '''Method IMosaicDatasetOperationParameters.get_Parameters

           OUTPUT
            ppAllParameters     : IPropertySet**'''
        return super(IMosaicDatasetOperationParameters, self).get_Parameters()
    def putref_Progressor(self, ppProgressor):
        '''Method IMosaicDatasetOperationParameters.putref_Progressor

           INPUT
            ppProgressor        : IProgressor*'''
        return super(IMosaicDatasetOperationParameters, self).putref_Progressor(ppProgressor)
    def get_Progressor(self):
        '''Method IMosaicDatasetOperationParameters.get_Progressor

           OUTPUT
            ppProgressor        : IProgressor**'''
        return super(IMosaicDatasetOperationParameters, self).get_Progressor()
    def put_IsDatasetReadOnly(self, pbIsDatasetReadOnly):
        '''Method IMosaicDatasetOperationParameters.put_IsDatasetReadOnly

           INPUT
            pbIsDatasetReadOnly : VARIANT_BOOL'''
        return super(IMosaicDatasetOperationParameters, self).put_IsDatasetReadOnly(pbIsDatasetReadOnly)
    def get_IsDatasetReadOnly(self):
        '''Method IMosaicDatasetOperationParameters.get_IsDatasetReadOnly

           OUTPUT
            pbIsDatasetReadOnly : VARIANT_BOOL*'''
        return super(IMosaicDatasetOperationParameters, self).get_IsDatasetReadOnly()
    def putref_Results(self, ppOperationResults):
        '''Method IMosaicDatasetOperationParameters.putref_Results

           INPUT
            ppOperationResults  : IPropertySet*'''
        return super(IMosaicDatasetOperationParameters, self).putref_Results(ppOperationResults)
    def get_Results(self):
        '''Method IMosaicDatasetOperationParameters.get_Results

           OUTPUT
            ppOperationResults  : IPropertySet**'''
        return super(IMosaicDatasetOperationParameters, self).get_Results()
    IsDatasetReadOnly = property(get_IsDatasetReadOnly, put_IsDatasetReadOnly, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    Progressor = property(get_Progressor, putref_Progressor, None)
    Results = property(get_Results, putref_Results, None)

class IMosaicDatasetOperationParameters2(_esriDataSourcesRaster.IMosaicDatasetOperationParameters2):
    _IID = uuid.UUID('38662eb1-a3ae-42ab-a7d6-1f87ef453b32')

    def __init__(self, *args, **kw):
        super(IMosaicDatasetOperationParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PrepareResults(self, pbPrepareResults):
        '''Method IMosaicDatasetOperationParameters2.put_PrepareResults

           INPUT
            pbPrepareResults    : VARIANT_BOOL'''
        return super(IMosaicDatasetOperationParameters2, self).put_PrepareResults(pbPrepareResults)
    def get_PrepareResults(self):
        '''Method IMosaicDatasetOperationParameters2.get_PrepareResults

           OUTPUT
            pbPrepareResults    : VARIANT_BOOL*'''
        return super(IMosaicDatasetOperationParameters2, self).get_PrepareResults()
    def putref_Parameters(self, ppAllParameters):
        '''Method IMosaicDatasetOperationParameters.putref_Parameters (from IMosaicDatasetOperationParameters)

           INPUT
            ppAllParameters     : IPropertySet*'''
        return super(IMosaicDatasetOperationParameters2, self).putref_Parameters(ppAllParameters)
    def get_Parameters(self):
        '''Method IMosaicDatasetOperationParameters.get_Parameters (from IMosaicDatasetOperationParameters)

           OUTPUT
            ppAllParameters     : IPropertySet**'''
        return super(IMosaicDatasetOperationParameters2, self).get_Parameters()
    def putref_Progressor(self, ppProgressor):
        '''Method IMosaicDatasetOperationParameters.putref_Progressor (from IMosaicDatasetOperationParameters)

           INPUT
            ppProgressor        : IProgressor*'''
        return super(IMosaicDatasetOperationParameters2, self).putref_Progressor(ppProgressor)
    def get_Progressor(self):
        '''Method IMosaicDatasetOperationParameters.get_Progressor (from IMosaicDatasetOperationParameters)

           OUTPUT
            ppProgressor        : IProgressor**'''
        return super(IMosaicDatasetOperationParameters2, self).get_Progressor()
    def put_IsDatasetReadOnly(self, pbIsDatasetReadOnly):
        '''Method IMosaicDatasetOperationParameters.put_IsDatasetReadOnly (from IMosaicDatasetOperationParameters)

           INPUT
            pbIsDatasetReadOnly : VARIANT_BOOL'''
        return super(IMosaicDatasetOperationParameters2, self).put_IsDatasetReadOnly(pbIsDatasetReadOnly)
    def get_IsDatasetReadOnly(self):
        '''Method IMosaicDatasetOperationParameters.get_IsDatasetReadOnly (from IMosaicDatasetOperationParameters)

           OUTPUT
            pbIsDatasetReadOnly : VARIANT_BOOL*'''
        return super(IMosaicDatasetOperationParameters2, self).get_IsDatasetReadOnly()
    def putref_Results(self, ppOperationResults):
        '''Method IMosaicDatasetOperationParameters.putref_Results (from IMosaicDatasetOperationParameters)

           INPUT
            ppOperationResults  : IPropertySet*'''
        return super(IMosaicDatasetOperationParameters2, self).putref_Results(ppOperationResults)
    def get_Results(self):
        '''Method IMosaicDatasetOperationParameters.get_Results (from IMosaicDatasetOperationParameters)

           OUTPUT
            ppOperationResults  : IPropertySet**'''
        return super(IMosaicDatasetOperationParameters2, self).get_Results()
    IsDatasetReadOnly = property(get_IsDatasetReadOnly, put_IsDatasetReadOnly, None)
    Parameters = property(get_Parameters, putref_Parameters, None)
    PrepareResults = property(get_PrepareResults, put_PrepareResults, None)
    Progressor = property(get_Progressor, putref_Progressor, None)
    Results = property(get_Results, putref_Results, None)

class IThreadedOperationParameters(_esriDataSourcesRaster.IThreadedOperationParameters):
    _IID = uuid.UUID('b4a72532-b2fd-41ee-9216-2fa2921af897')

    def __init__(self, *args, **kw):
        super(IThreadedOperationParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ServerName(self, pServerUrl):
        '''Method IThreadedOperationParameters.put_ServerName

           INPUT
            pServerUrl          : BSTR'''
        return super(IThreadedOperationParameters, self).put_ServerName(pServerUrl)
    def get_ServerName(self):
        '''Method IThreadedOperationParameters.get_ServerName

           OUTPUT
            pServerUrl          : BSTR*'''
        return super(IThreadedOperationParameters, self).get_ServerName()
    def put_NumThreads(self, pNumThreads):
        '''Method IThreadedOperationParameters.put_NumThreads

           INPUT
            pNumThreads         : long'''
        return super(IThreadedOperationParameters, self).put_NumThreads(pNumThreads)
    def get_NumThreads(self):
        '''Method IThreadedOperationParameters.get_NumThreads

           OUTPUT
            pNumThreads         : long*'''
        return super(IThreadedOperationParameters, self).get_NumThreads()
    def get_RecommendedNumThreads(self, pRecommendedNumThreads):
        '''Method IThreadedOperationParameters.get_RecommendedNumThreads

           INPUT
            pRecommendedNumThreads: long*'''
        return super(IThreadedOperationParameters, self).get_RecommendedNumThreads(pRecommendedNumThreads)
    NumThreads = property(get_NumThreads, put_NumThreads, None)
    ServerName = property(get_ServerName, put_ServerName, None)

class IThreadedOperationParameters2(_esriDataSourcesRaster.IThreadedOperationParameters2):
    _IID = uuid.UUID('75901a83-b135-4acc-8354-64dc9b945b6c')

    def __init__(self, *args, **kw):
        super(IThreadedOperationParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_ServerObjectName(self, ppName):
        '''Method IThreadedOperationParameters2.putref_ServerObjectName

           INPUT
            ppName              : IName*'''
        return super(IThreadedOperationParameters2, self).putref_ServerObjectName(ppName)
    def get_ServerObjectName(self):
        '''Method IThreadedOperationParameters2.get_ServerObjectName

           OUTPUT
            ppName              : IName**'''
        return super(IThreadedOperationParameters2, self).get_ServerObjectName()
    def put_ServerName(self, pServerUrl):
        '''Method IThreadedOperationParameters.put_ServerName (from IThreadedOperationParameters)

           INPUT
            pServerUrl          : BSTR'''
        return super(IThreadedOperationParameters2, self).put_ServerName(pServerUrl)
    def get_ServerName(self):
        '''Method IThreadedOperationParameters.get_ServerName (from IThreadedOperationParameters)

           OUTPUT
            pServerUrl          : BSTR*'''
        return super(IThreadedOperationParameters2, self).get_ServerName()
    def put_NumThreads(self, pNumThreads):
        '''Method IThreadedOperationParameters.put_NumThreads (from IThreadedOperationParameters)

           INPUT
            pNumThreads         : long'''
        return super(IThreadedOperationParameters2, self).put_NumThreads(pNumThreads)
    def get_NumThreads(self):
        '''Method IThreadedOperationParameters.get_NumThreads (from IThreadedOperationParameters)

           OUTPUT
            pNumThreads         : long*'''
        return super(IThreadedOperationParameters2, self).get_NumThreads()
    def get_RecommendedNumThreads(self, pRecommendedNumThreads):
        '''Method IThreadedOperationParameters.get_RecommendedNumThreads (from IThreadedOperationParameters)

           INPUT
            pRecommendedNumThreads: long*'''
        return super(IThreadedOperationParameters2, self).get_RecommendedNumThreads(pRecommendedNumThreads)
    NumThreads = property(get_NumThreads, put_NumThreads, None)
    ServerName = property(get_ServerName, put_ServerName, None)
    ServerObjectName = property(get_ServerObjectName, putref_ServerObjectName, None)

class ISelectionParameters(_esriDataSourcesRaster.ISelectionParameters):
    _IID = uuid.UUID('95627b93-1275-4714-94a7-a55df27e70a2')

    def __init__(self, *args, **kw):
        super(ISelectionParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_SelectionSet(self, ppSelectionSet):
        '''Method ISelectionParameters.putref_SelectionSet

           INPUT
            ppSelectionSet      : ISelectionSet*'''
        return super(ISelectionParameters, self).putref_SelectionSet(ppSelectionSet)
    def get_SelectionSet(self):
        '''Method ISelectionParameters.get_SelectionSet

           OUTPUT
            ppSelectionSet      : ISelectionSet**'''
        return super(ISelectionParameters, self).get_SelectionSet()
    def putref_QueryFilter(self, ppQueryFilter):
        '''Method ISelectionParameters.putref_QueryFilter

           INPUT
            ppQueryFilter       : IQueryFilter*'''
        return super(ISelectionParameters, self).putref_QueryFilter(ppQueryFilter)
    def get_QueryFilter(self):
        '''Method ISelectionParameters.get_QueryFilter

           OUTPUT
            ppQueryFilter       : IQueryFilter**'''
        return super(ISelectionParameters, self).get_QueryFilter()
    QueryFilter = property(get_QueryFilter, putref_QueryFilter, None)
    SelectionSet = property(get_SelectionSet, putref_SelectionSet, None)

class ICreateMosaicDatasetParameters(_esriDataSourcesRaster.ICreateMosaicDatasetParameters):
    _IID = uuid.UUID('be94ffc7-98f4-48d0-8fad-c3f1834c768f')

    def __init__(self, *args, **kw):
        super(ICreateMosaicDatasetParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DefinitionGeometry(self, ppGeometry):
        '''Method ICreateMosaicDatasetParameters.putref_DefinitionGeometry

           INPUT
            ppGeometry          : IGeometry*'''
        return super(ICreateMosaicDatasetParameters, self).putref_DefinitionGeometry(ppGeometry)
    def get_DefinitionGeometry(self):
        '''Method ICreateMosaicDatasetParameters.get_DefinitionGeometry

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(ICreateMosaicDatasetParameters, self).get_DefinitionGeometry()
    def put_MaximumVisibleCellsize(self, pCellsize):
        '''Method ICreateMosaicDatasetParameters.put_MaximumVisibleCellsize

           INPUT
            pCellsize           : double'''
        return super(ICreateMosaicDatasetParameters, self).put_MaximumVisibleCellsize(pCellsize)
    def get_MaximumVisibleCellsize(self):
        '''Method ICreateMosaicDatasetParameters.get_MaximumVisibleCellsize

           OUTPUT
            pCellsize           : double*'''
        return super(ICreateMosaicDatasetParameters, self).get_MaximumVisibleCellsize()
    def putref_LODInfos(self, ppLODInfos):
        '''Method ICreateMosaicDatasetParameters.putref_LODInfos

           INPUT
            ppLODInfos          : IMosaicLODInfos*'''
        return super(ICreateMosaicDatasetParameters, self).putref_LODInfos(ppLODInfos)
    def get_LODInfos(self):
        '''Method ICreateMosaicDatasetParameters.get_LODInfos

           OUTPUT
            ppLODInfos          : IMosaicLODInfos**'''
        return super(ICreateMosaicDatasetParameters, self).get_LODInfos()
    def put_PixelType(self, pPixelType):
        '''Method ICreateMosaicDatasetParameters.put_PixelType

           INPUT
            pPixelType          : rstPixelType'''
        return super(ICreateMosaicDatasetParameters, self).put_PixelType(pPixelType)
    def get_PixelType(self):
        '''Method ICreateMosaicDatasetParameters.get_PixelType

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(ICreateMosaicDatasetParameters, self).get_PixelType()
    def put_BandCount(self, pCount):
        '''Method ICreateMosaicDatasetParameters.put_BandCount

           INPUT
            pCount              : long'''
        return super(ICreateMosaicDatasetParameters, self).put_BandCount(pCount)
    def get_BandCount(self):
        '''Method ICreateMosaicDatasetParameters.get_BandCount

           OUTPUT
            pCount              : long*'''
        return super(ICreateMosaicDatasetParameters, self).get_BandCount()
    def put_MinCellsizeFieldName(self, pMinCellsizeFieldName):
        '''Method ICreateMosaicDatasetParameters.put_MinCellsizeFieldName

           INPUT
            pMinCellsizeFieldName: BSTR'''
        return super(ICreateMosaicDatasetParameters, self).put_MinCellsizeFieldName(pMinCellsizeFieldName)
    def get_MinCellsizeFieldName(self):
        '''Method ICreateMosaicDatasetParameters.get_MinCellsizeFieldName

           OUTPUT
            pMinCellsizeFieldName: BSTR*'''
        return super(ICreateMosaicDatasetParameters, self).get_MinCellsizeFieldName()
    def put_MaxCellsizeFieldName(self, pMaxCellsizeFieldName):
        '''Method ICreateMosaicDatasetParameters.put_MaxCellsizeFieldName

           INPUT
            pMaxCellsizeFieldName: BSTR'''
        return super(ICreateMosaicDatasetParameters, self).put_MaxCellsizeFieldName(pMaxCellsizeFieldName)
    def get_MaxCellsizeFieldName(self):
        '''Method ICreateMosaicDatasetParameters.get_MaxCellsizeFieldName

           OUTPUT
            pMaxCellsizeFieldName: BSTR*'''
        return super(ICreateMosaicDatasetParameters, self).get_MaxCellsizeFieldName()
    def put_LODFieldName(self, pLODFieldName):
        '''Method ICreateMosaicDatasetParameters.put_LODFieldName

           INPUT
            pLODFieldName       : BSTR'''
        return super(ICreateMosaicDatasetParameters, self).put_LODFieldName(pLODFieldName)
    def get_LODFieldName(self):
        '''Method ICreateMosaicDatasetParameters.get_LODFieldName

           OUTPUT
            pLODFieldName       : BSTR*'''
        return super(ICreateMosaicDatasetParameters, self).get_LODFieldName()
    def putref_DefinitionFIDs(self, ppFIDs):
        '''Method ICreateMosaicDatasetParameters.putref_DefinitionFIDs

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(ICreateMosaicDatasetParameters, self).putref_DefinitionFIDs(ppFIDs)
    def get_DefinitionFIDs(self):
        '''Method ICreateMosaicDatasetParameters.get_DefinitionFIDs

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(ICreateMosaicDatasetParameters, self).get_DefinitionFIDs()
    BandCount = property(get_BandCount, put_BandCount, None)
    DefinitionFIDs = property(get_DefinitionFIDs, putref_DefinitionFIDs, None)
    DefinitionGeometry = property(get_DefinitionGeometry, putref_DefinitionGeometry, None)
    LODFieldName = property(get_LODFieldName, put_LODFieldName, None)
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    MaxCellsizeFieldName = property(get_MaxCellsizeFieldName, put_MaxCellsizeFieldName, None)
    MaximumVisibleCellsize = property(get_MaximumVisibleCellsize, put_MaximumVisibleCellsize, None)
    MinCellsizeFieldName = property(get_MinCellsizeFieldName, put_MinCellsizeFieldName, None)
    PixelType = property(get_PixelType, put_PixelType, None)

class ICreateMosaicDatasetParameters2(_esriDataSourcesRaster.ICreateMosaicDatasetParameters2):
    _IID = uuid.UUID('98d47342-25e0-4fca-8a23-34d006e312ae')

    def __init__(self, *args, **kw):
        super(ICreateMosaicDatasetParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_TemplateMosaicDataset(self, ppMosaicDataset):
        '''Method ICreateMosaicDatasetParameters2.putref_TemplateMosaicDataset

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(ICreateMosaicDatasetParameters2, self).putref_TemplateMosaicDataset(ppMosaicDataset)
    def get_TemplateMosaicDataset(self):
        '''Method ICreateMosaicDatasetParameters2.get_TemplateMosaicDataset

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(ICreateMosaicDatasetParameters2, self).get_TemplateMosaicDataset()
    def put_BandDefinitionKeyword(self, pBandDefinitionKeyword):
        '''Method ICreateMosaicDatasetParameters2.put_BandDefinitionKeyword

           INPUT
            pBandDefinitionKeyword: BSTR'''
        return super(ICreateMosaicDatasetParameters2, self).put_BandDefinitionKeyword(pBandDefinitionKeyword)
    def get_BandDefinitionKeyword(self):
        '''Method ICreateMosaicDatasetParameters2.get_BandDefinitionKeyword

           OUTPUT
            pBandDefinitionKeyword: BSTR*'''
        return super(ICreateMosaicDatasetParameters2, self).get_BandDefinitionKeyword()
    def putref_BandProperties(self, ppArrayOfPropertySet):
        '''Method ICreateMosaicDatasetParameters2.putref_BandProperties

           INPUT
            ppArrayOfPropertySet: IArray*'''
        return super(ICreateMosaicDatasetParameters2, self).putref_BandProperties(ppArrayOfPropertySet)
    def get_BandProperties(self):
        '''Method ICreateMosaicDatasetParameters2.get_BandProperties

           OUTPUT
            ppArrayOfPropertySet: IArray**'''
        return super(ICreateMosaicDatasetParameters2, self).get_BandProperties()
    def putref_DefinitionGeometry(self, ppGeometry):
        '''Method ICreateMosaicDatasetParameters.putref_DefinitionGeometry (from ICreateMosaicDatasetParameters)

           INPUT
            ppGeometry          : IGeometry*'''
        return super(ICreateMosaicDatasetParameters2, self).putref_DefinitionGeometry(ppGeometry)
    def get_DefinitionGeometry(self):
        '''Method ICreateMosaicDatasetParameters.get_DefinitionGeometry (from ICreateMosaicDatasetParameters)

           OUTPUT
            ppGeometry          : IGeometry**'''
        return super(ICreateMosaicDatasetParameters2, self).get_DefinitionGeometry()
    def put_MaximumVisibleCellsize(self, pCellsize):
        '''Method ICreateMosaicDatasetParameters.put_MaximumVisibleCellsize (from ICreateMosaicDatasetParameters)

           INPUT
            pCellsize           : double'''
        return super(ICreateMosaicDatasetParameters2, self).put_MaximumVisibleCellsize(pCellsize)
    def get_MaximumVisibleCellsize(self):
        '''Method ICreateMosaicDatasetParameters.get_MaximumVisibleCellsize (from ICreateMosaicDatasetParameters)

           OUTPUT
            pCellsize           : double*'''
        return super(ICreateMosaicDatasetParameters2, self).get_MaximumVisibleCellsize()
    def putref_LODInfos(self, ppLODInfos):
        '''Method ICreateMosaicDatasetParameters.putref_LODInfos (from ICreateMosaicDatasetParameters)

           INPUT
            ppLODInfos          : IMosaicLODInfos*'''
        return super(ICreateMosaicDatasetParameters2, self).putref_LODInfos(ppLODInfos)
    def get_LODInfos(self):
        '''Method ICreateMosaicDatasetParameters.get_LODInfos (from ICreateMosaicDatasetParameters)

           OUTPUT
            ppLODInfos          : IMosaicLODInfos**'''
        return super(ICreateMosaicDatasetParameters2, self).get_LODInfos()
    def put_PixelType(self, pPixelType):
        '''Method ICreateMosaicDatasetParameters.put_PixelType (from ICreateMosaicDatasetParameters)

           INPUT
            pPixelType          : rstPixelType'''
        return super(ICreateMosaicDatasetParameters2, self).put_PixelType(pPixelType)
    def get_PixelType(self):
        '''Method ICreateMosaicDatasetParameters.get_PixelType (from ICreateMosaicDatasetParameters)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(ICreateMosaicDatasetParameters2, self).get_PixelType()
    def put_BandCount(self, pCount):
        '''Method ICreateMosaicDatasetParameters.put_BandCount (from ICreateMosaicDatasetParameters)

           INPUT
            pCount              : long'''
        return super(ICreateMosaicDatasetParameters2, self).put_BandCount(pCount)
    def get_BandCount(self):
        '''Method ICreateMosaicDatasetParameters.get_BandCount (from ICreateMosaicDatasetParameters)

           OUTPUT
            pCount              : long*'''
        return super(ICreateMosaicDatasetParameters2, self).get_BandCount()
    def put_MinCellsizeFieldName(self, pMinCellsizeFieldName):
        '''Method ICreateMosaicDatasetParameters.put_MinCellsizeFieldName (from ICreateMosaicDatasetParameters)

           INPUT
            pMinCellsizeFieldName: BSTR'''
        return super(ICreateMosaicDatasetParameters2, self).put_MinCellsizeFieldName(pMinCellsizeFieldName)
    def get_MinCellsizeFieldName(self):
        '''Method ICreateMosaicDatasetParameters.get_MinCellsizeFieldName (from ICreateMosaicDatasetParameters)

           OUTPUT
            pMinCellsizeFieldName: BSTR*'''
        return super(ICreateMosaicDatasetParameters2, self).get_MinCellsizeFieldName()
    def put_MaxCellsizeFieldName(self, pMaxCellsizeFieldName):
        '''Method ICreateMosaicDatasetParameters.put_MaxCellsizeFieldName (from ICreateMosaicDatasetParameters)

           INPUT
            pMaxCellsizeFieldName: BSTR'''
        return super(ICreateMosaicDatasetParameters2, self).put_MaxCellsizeFieldName(pMaxCellsizeFieldName)
    def get_MaxCellsizeFieldName(self):
        '''Method ICreateMosaicDatasetParameters.get_MaxCellsizeFieldName (from ICreateMosaicDatasetParameters)

           OUTPUT
            pMaxCellsizeFieldName: BSTR*'''
        return super(ICreateMosaicDatasetParameters2, self).get_MaxCellsizeFieldName()
    def put_LODFieldName(self, pLODFieldName):
        '''Method ICreateMosaicDatasetParameters.put_LODFieldName (from ICreateMosaicDatasetParameters)

           INPUT
            pLODFieldName       : BSTR'''
        return super(ICreateMosaicDatasetParameters2, self).put_LODFieldName(pLODFieldName)
    def get_LODFieldName(self):
        '''Method ICreateMosaicDatasetParameters.get_LODFieldName (from ICreateMosaicDatasetParameters)

           OUTPUT
            pLODFieldName       : BSTR*'''
        return super(ICreateMosaicDatasetParameters2, self).get_LODFieldName()
    def putref_DefinitionFIDs(self, ppFIDs):
        '''Method ICreateMosaicDatasetParameters.putref_DefinitionFIDs (from ICreateMosaicDatasetParameters)

           INPUT
            ppFIDs              : IFIDSet*'''
        return super(ICreateMosaicDatasetParameters2, self).putref_DefinitionFIDs(ppFIDs)
    def get_DefinitionFIDs(self):
        '''Method ICreateMosaicDatasetParameters.get_DefinitionFIDs (from ICreateMosaicDatasetParameters)

           OUTPUT
            ppFIDs              : IFIDSet**'''
        return super(ICreateMosaicDatasetParameters2, self).get_DefinitionFIDs()
    BandCount = property(get_BandCount, put_BandCount, None)
    BandDefinitionKeyword = property(get_BandDefinitionKeyword, put_BandDefinitionKeyword, None)
    BandProperties = property(get_BandProperties, putref_BandProperties, None)
    DefinitionFIDs = property(get_DefinitionFIDs, putref_DefinitionFIDs, None)
    DefinitionGeometry = property(get_DefinitionGeometry, putref_DefinitionGeometry, None)
    LODFieldName = property(get_LODFieldName, put_LODFieldName, None)
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    MaxCellsizeFieldName = property(get_MaxCellsizeFieldName, put_MaxCellsizeFieldName, None)
    MaximumVisibleCellsize = property(get_MaximumVisibleCellsize, put_MaximumVisibleCellsize, None)
    MinCellsizeFieldName = property(get_MinCellsizeFieldName, put_MinCellsizeFieldName, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    TemplateMosaicDataset = property(get_TemplateMosaicDataset, putref_TemplateMosaicDataset, None)

class ISynchronizeParameters2(_esriDataSourcesRaster.ISynchronizeParameters2):
    _IID = uuid.UUID('a1234642-e293-419a-b650-6ca72c69d9d7')

    def __init__(self, *args, **kw):
        super(ISynchronizeParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_AuxiliaryFieldValues(self, ppFieldValues):
        '''Method ISynchronizeParameters2.putref_AuxiliaryFieldValues

           INPUT
            ppFieldValues       : IPropertySet*'''
        return super(ISynchronizeParameters2, self).putref_AuxiliaryFieldValues(ppFieldValues)
    def get_AuxiliaryFieldValues(self):
        '''Method ISynchronizeParameters2.get_AuxiliaryFieldValues

           OUTPUT
            ppFieldValues       : IPropertySet**'''
        return super(ISynchronizeParameters2, self).get_AuxiliaryFieldValues()
    def get_MinimumCellSizeFactor(self):
        '''Method ISynchronizeParameters2.get_MinimumCellSizeFactor

           OUTPUT
            pMinCellSizeFactor  : double*'''
        return super(ISynchronizeParameters2, self).get_MinimumCellSizeFactor()
    def put_MinimumCellSizeFactor(self, pMinCellSizeFactor):
        '''Method ISynchronizeParameters2.put_MinimumCellSizeFactor

           INPUT
            pMinCellSizeFactor  : double'''
        return super(ISynchronizeParameters2, self).put_MinimumCellSizeFactor(pMinCellSizeFactor)
    def get_MaximumCellSizeFactor(self):
        '''Method ISynchronizeParameters2.get_MaximumCellSizeFactor

           OUTPUT
            pMaxCellSizeFactor  : double*'''
        return super(ISynchronizeParameters2, self).get_MaximumCellSizeFactor()
    def put_MaximumCellSizeFactor(self, pMaxCellSizeFactor):
        '''Method ISynchronizeParameters2.put_MaximumCellSizeFactor

           INPUT
            pMaxCellSizeFactor  : double'''
        return super(ISynchronizeParameters2, self).put_MaximumCellSizeFactor(pMaxCellSizeFactor)
    def put_RebuildDataSource(self, pbRebuildDataSource):
        '''Method ISynchronizeParameters2.put_RebuildDataSource

           INPUT
            pbRebuildDataSource : VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_RebuildDataSource(pbRebuildDataSource)
    def get_RebuildDataSource(self):
        '''Method ISynchronizeParameters2.get_RebuildDataSource

           OUTPUT
            pbRebuildDataSource : VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_RebuildDataSource()
    def putref_ExcludedFields(self, ppExcludedFields):
        '''Method ISynchronizeParameters2.putref_ExcludedFields

           INPUT
            ppExcludedFields    : IStringArray*'''
        return super(ISynchronizeParameters2, self).putref_ExcludedFields(ppExcludedFields)
    def get_ExcludedFields(self):
        '''Method ISynchronizeParameters2.get_ExcludedFields

           OUTPUT
            ppExcludedFields    : IStringArray**'''
        return super(ISynchronizeParameters2, self).get_ExcludedFields()
    def put_RefreshCache(self, pbRefreshCache):
        '''Method ISynchronizeParameters2.put_RefreshCache

           INPUT
            pbRefreshCache      : VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_RefreshCache(pbRefreshCache)
    def get_RefreshCache(self):
        '''Method ISynchronizeParameters2.get_RefreshCache

           OUTPUT
            pbRefreshCache      : VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_RefreshCache()
    def put_DefineCache(self, pbDefineCache):
        '''Method ISynchronizeParameters2.put_DefineCache

           INPUT
            pbDefineCache       : VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_DefineCache(pbDefineCache)
    def get_DefineCache(self):
        '''Method ISynchronizeParameters2.get_DefineCache

           OUTPUT
            pbDefineCache       : VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_DefineCache()
    def get_CacheParameters(self):
        '''Method ISynchronizeParameters2.get_CacheParameters

           OUTPUT
            ppParameters        : ICachedRasterFunctionArguments**'''
        return super(ISynchronizeParameters2, self).get_CacheParameters()
    def putref_CacheParameters(self, ppParameters):
        '''Method ISynchronizeParameters2.putref_CacheParameters

           INPUT
            ppParameters        : ICachedRasterFunctionArguments*'''
        return super(ISynchronizeParameters2, self).putref_CacheParameters(ppParameters)
    def get_GeodataXform(self):
        '''Method ISynchronizeParameters2.get_GeodataXform

           OUTPUT
            ppXf                : IGeodataXform**'''
        return super(ISynchronizeParameters2, self).get_GeodataXform()
    def putref_GeodataXform(self, ppXf):
        '''Method ISynchronizeParameters2.putref_GeodataXform

           INPUT
            ppXf                : IGeodataXform*'''
        return super(ISynchronizeParameters2, self).putref_GeodataXform(ppXf)
    def get_GeodataXformApplyMethod(self):
        '''Method ISynchronizeParameters2.get_GeodataXformApplyMethod

           OUTPUT
            pMethod             : esriGeodataXformApplyMethod*'''
        return super(ISynchronizeParameters2, self).get_GeodataXformApplyMethod()
    def put_GeodataXformApplyMethod(self, pMethod):
        '''Method ISynchronizeParameters2.put_GeodataXformApplyMethod

           INPUT
            pMethod             : esriGeodataXformApplyMethod'''
        return super(ISynchronizeParameters2, self).put_GeodataXformApplyMethod(pMethod)
    def put_ForceDefaultSpatialReference(self, pbForceDefaultSpatialReference):
        '''Method ISynchronizeParameters2.put_ForceDefaultSpatialReference

           INPUT
            pbForceDefaultSpatialReference: VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_ForceDefaultSpatialReference(pbForceDefaultSpatialReference)
    def get_ForceDefaultSpatialReference(self):
        '''Method ISynchronizeParameters2.get_ForceDefaultSpatialReference

           OUTPUT
            pbForceDefaultSpatialReference: VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_ForceDefaultSpatialReference()
    def put_UpdateExistingItems(self, pbUpdateExistingItems):
        '''Method ISynchronizeParameters2.put_UpdateExistingItems

           INPUT
            pbUpdateExistingItems: VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_UpdateExistingItems(pbUpdateExistingItems)
    def get_UpdateExistingItems(self):
        '''Method ISynchronizeParameters2.get_UpdateExistingItems

           OUTPUT
            pbUpdateExistingItems: VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_UpdateExistingItems()
    def putref_DefaultSpatialReference(self, ppDefaultSrs):
        '''Method ISynchronizeParameters.putref_DefaultSpatialReference (from ISynchronizeParameters)

           INPUT
            ppDefaultSrs        : ISpatialReference*'''
        return super(ISynchronizeParameters2, self).putref_DefaultSpatialReference(ppDefaultSrs)
    def get_DefaultSpatialReference(self):
        '''Method ISynchronizeParameters.get_DefaultSpatialReference (from ISynchronizeParameters)

           OUTPUT
            ppDefaultSrs        : ISpatialReference**'''
        return super(ISynchronizeParameters2, self).get_DefaultSpatialReference()
    def put_SyncOnlyStaleItems(self, pbSyncOnlyStaleItems):
        '''Method ISynchronizeParameters.put_SyncOnlyStaleItems (from ISynchronizeParameters)

           INPUT
            pbSyncOnlyStaleItems: VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_SyncOnlyStaleItems(pbSyncOnlyStaleItems)
    def get_SyncOnlyStaleItems(self):
        '''Method ISynchronizeParameters.get_SyncOnlyStaleItems (from ISynchronizeParameters)

           OUTPUT
            pbSyncOnlyStaleItems: VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_SyncOnlyStaleItems()
    def put_RemoveInvalidItems(self, pbRemoveInvalidItems):
        '''Method ISynchronizeParameters.put_RemoveInvalidItems (from ISynchronizeParameters)

           INPUT
            pbRemoveInvalidItems: VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_RemoveInvalidItems(pbRemoveInvalidItems)
    def get_RemoveInvalidItems(self):
        '''Method ISynchronizeParameters.get_RemoveInvalidItems (from ISynchronizeParameters)

           OUTPUT
            pbRemoveInvalidItems: VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_RemoveInvalidItems()
    def put_MaximumPyramidLevel(self, pMaximumPyramidLevel):
        '''Method ISynchronizeParameters.put_MaximumPyramidLevel (from ISynchronizeParameters)

           INPUT
            pMaximumPyramidLevel: long'''
        return super(ISynchronizeParameters2, self).put_MaximumPyramidLevel(pMaximumPyramidLevel)
    def get_MaximumPyramidLevel(self):
        '''Method ISynchronizeParameters.get_MaximumPyramidLevel (from ISynchronizeParameters)

           OUTPUT
            pMaximumPyramidLevel: long*'''
        return super(ISynchronizeParameters2, self).get_MaximumPyramidLevel()
    def put_MinimumRows(self, pMinimumRows):
        '''Method ISynchronizeParameters.put_MinimumRows (from ISynchronizeParameters)

           INPUT
            pMinimumRows        : long'''
        return super(ISynchronizeParameters2, self).put_MinimumRows(pMinimumRows)
    def get_MinimumRows(self):
        '''Method ISynchronizeParameters.get_MinimumRows (from ISynchronizeParameters)

           OUTPUT
            pMinimumRows        : long*'''
        return super(ISynchronizeParameters2, self).get_MinimumRows()
    def put_MinimumColumns(self, pMinimumColumns):
        '''Method ISynchronizeParameters.put_MinimumColumns (from ISynchronizeParameters)

           INPUT
            pMinimumColumns     : long'''
        return super(ISynchronizeParameters2, self).put_MinimumColumns(pMinimumColumns)
    def get_MinimumColumns(self):
        '''Method ISynchronizeParameters.get_MinimumColumns (from ISynchronizeParameters)

           OUTPUT
            pMinimumColumns     : long*'''
        return super(ISynchronizeParameters2, self).get_MinimumColumns()
    def put_MaximumHighCellSize(self, pMaximumHighCellSize):
        '''Method ISynchronizeParameters.put_MaximumHighCellSize (from ISynchronizeParameters)

           INPUT
            pMaximumHighCellSize: double'''
        return super(ISynchronizeParameters2, self).put_MaximumHighCellSize(pMaximumHighCellSize)
    def get_MaximumHighCellSize(self):
        '''Method ISynchronizeParameters.get_MaximumHighCellSize (from ISynchronizeParameters)

           OUTPUT
            pMaximumHighCellSize: double*'''
        return super(ISynchronizeParameters2, self).get_MaximumHighCellSize()
    def put_ComputeStatistics(self, pbComputeStatistics):
        '''Method ISynchronizeParameters.put_ComputeStatistics (from ISynchronizeParameters)

           INPUT
            pbComputeStatistics : VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_ComputeStatistics(pbComputeStatistics)
    def get_ComputeStatistics(self):
        '''Method ISynchronizeParameters.get_ComputeStatistics (from ISynchronizeParameters)

           OUTPUT
            pbComputeStatistics : VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_ComputeStatistics()
    def put_BuildPyramids(self, pbBuildPyramids):
        '''Method ISynchronizeParameters.put_BuildPyramids (from ISynchronizeParameters)

           INPUT
            pbBuildPyramids     : VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_BuildPyramids(pbBuildPyramids)
    def get_BuildPyramids(self):
        '''Method ISynchronizeParameters.get_BuildPyramids (from ISynchronizeParameters)

           OUTPUT
            pbBuildPyramids     : VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_BuildPyramids()
    def put_BuildThumbnail(self, pbBuildThumbnail):
        '''Method ISynchronizeParameters.put_BuildThumbnail (from ISynchronizeParameters)

           INPUT
            pbBuildThumbnail    : VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_BuildThumbnail(pbBuildThumbnail)
    def get_BuildThumbnail(self):
        '''Method ISynchronizeParameters.get_BuildThumbnail (from ISynchronizeParameters)

           OUTPUT
            pbBuildThumbnail    : VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_BuildThumbnail()
    def putref_ThumbnailBuilder(self, ppThumbnailBuilder):
        '''Method ISynchronizeParameters.putref_ThumbnailBuilder (from ISynchronizeParameters)

           INPUT
            ppThumbnailBuilder  : IRasterThumbnailBuilder*'''
        return super(ISynchronizeParameters2, self).putref_ThumbnailBuilder(ppThumbnailBuilder)
    def get_ThumbnailBuilder(self):
        '''Method ISynchronizeParameters.get_ThumbnailBuilder (from ISynchronizeParameters)

           OUTPUT
            ppThumbnailBuilder  : IRasterThumbnailBuilder**'''
        return super(ISynchronizeParameters2, self).get_ThumbnailBuilder()
    def put_DensificationFactor(self, pDensificationFactor):
        '''Method ISynchronizeParameters.put_DensificationFactor (from ISynchronizeParameters)

           INPUT
            pDensificationFactor: double'''
        return super(ISynchronizeParameters2, self).put_DensificationFactor(pDensificationFactor)
    def get_DensificationFactor(self):
        '''Method ISynchronizeParameters.get_DensificationFactor (from ISynchronizeParameters)

           OUTPUT
            pDensificationFactor: double*'''
        return super(ISynchronizeParameters2, self).get_DensificationFactor()
    def put_ResetVisibility(self, pbResetVisibility):
        '''Method ISynchronizeParameters.put_ResetVisibility (from ISynchronizeParameters)

           INPUT
            pbResetVisibility   : VARIANT_BOOL'''
        return super(ISynchronizeParameters2, self).put_ResetVisibility(pbResetVisibility)
    def get_ResetVisibility(self):
        '''Method ISynchronizeParameters.get_ResetVisibility (from ISynchronizeParameters)

           OUTPUT
            pbResetVisibility   : VARIANT_BOOL*'''
        return super(ISynchronizeParameters2, self).get_ResetVisibility()
    AuxiliaryFieldValues = property(get_AuxiliaryFieldValues, putref_AuxiliaryFieldValues, None)
    BuildPyramids = property(get_BuildPyramids, put_BuildPyramids, None)
    BuildThumbnail = property(get_BuildThumbnail, put_BuildThumbnail, None)
    CacheParameters = property(get_CacheParameters, putref_CacheParameters, None)
    ComputeStatistics = property(get_ComputeStatistics, put_ComputeStatistics, None)
    DefaultSpatialReference = property(get_DefaultSpatialReference, putref_DefaultSpatialReference, None)
    DefineCache = property(get_DefineCache, put_DefineCache, None)
    DensificationFactor = property(get_DensificationFactor, put_DensificationFactor, None)
    ExcludedFields = property(get_ExcludedFields, putref_ExcludedFields, None)
    ForceDefaultSpatialReference = property(get_ForceDefaultSpatialReference, put_ForceDefaultSpatialReference, None)
    GeodataXform = property(get_GeodataXform, putref_GeodataXform, None)
    GeodataXformApplyMethod = property(get_GeodataXformApplyMethod, put_GeodataXformApplyMethod, None)
    MaximumCellSizeFactor = property(get_MaximumCellSizeFactor, put_MaximumCellSizeFactor, None)
    MaximumHighCellSize = property(get_MaximumHighCellSize, put_MaximumHighCellSize, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, put_MaximumPyramidLevel, None)
    MinimumCellSizeFactor = property(get_MinimumCellSizeFactor, put_MinimumCellSizeFactor, None)
    MinimumColumns = property(get_MinimumColumns, put_MinimumColumns, None)
    MinimumRows = property(get_MinimumRows, put_MinimumRows, None)
    RebuildDataSource = property(get_RebuildDataSource, put_RebuildDataSource, None)
    RefreshCache = property(get_RefreshCache, put_RefreshCache, None)
    RemoveInvalidItems = property(get_RemoveInvalidItems, put_RemoveInvalidItems, None)
    ResetVisibility = property(get_ResetVisibility, put_ResetVisibility, None)
    SyncOnlyStaleItems = property(get_SyncOnlyStaleItems, put_SyncOnlyStaleItems, None)
    ThumbnailBuilder = property(get_ThumbnailBuilder, putref_ThumbnailBuilder, None)
    UpdateExistingItems = property(get_UpdateExistingItems, put_UpdateExistingItems, None)

class IBuildPyramidsParameters(_esriDataSourcesRaster.IBuildPyramidsParameters):
    _IID = uuid.UUID('a4a2e058-841d-43fc-a6b6-0783e5473a84')

    def __init__(self, *args, **kw):
        super(IBuildPyramidsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PyramidResampleType(self, pMethod):
        '''Method IBuildPyramidsParameters.put_PyramidResampleType

           INPUT
            pMethod             : rstResamplingTypes'''
        return super(IBuildPyramidsParameters, self).put_PyramidResampleType(pMethod)
    def get_PyramidResampleType(self):
        '''Method IBuildPyramidsParameters.get_PyramidResampleType

           OUTPUT
            pMethod             : rstResamplingTypes*'''
        return super(IBuildPyramidsParameters, self).get_PyramidResampleType()
    def put_PyramidLevel(self, pLevel):
        '''Method IBuildPyramidsParameters.put_PyramidLevel

           INPUT
            pLevel              : long'''
        return super(IBuildPyramidsParameters, self).put_PyramidLevel(pLevel)
    def get_PyramidLevel(self):
        '''Method IBuildPyramidsParameters.get_PyramidLevel

           OUTPUT
            pLevel              : long*'''
        return super(IBuildPyramidsParameters, self).get_PyramidLevel()
    def put_CompressionType(self, pType):
        '''Method IBuildPyramidsParameters.put_CompressionType

           INPUT
            pType               : esriRasterCompressionType'''
        return super(IBuildPyramidsParameters, self).put_CompressionType(pType)
    def get_CompressionType(self):
        '''Method IBuildPyramidsParameters.get_CompressionType

           OUTPUT
            pType               : esriRasterCompressionType*'''
        return super(IBuildPyramidsParameters, self).get_CompressionType()
    def put_CompressionQuality(self, Value):
        '''Method IBuildPyramidsParameters.put_CompressionQuality

           INPUT
            Value               : long'''
        return super(IBuildPyramidsParameters, self).put_CompressionQuality(Value)
    def get_CompressionQuality(self):
        '''Method IBuildPyramidsParameters.get_CompressionQuality

           OUTPUT
            Value               : long*'''
        return super(IBuildPyramidsParameters, self).get_CompressionQuality()
    CompressionQuality = property(get_CompressionQuality, put_CompressionQuality, None)
    CompressionType = property(get_CompressionType, put_CompressionType, None)
    PyramidLevel = property(get_PyramidLevel, put_PyramidLevel, None)
    PyramidResampleType = property(get_PyramidResampleType, put_PyramidResampleType, None)

class ICalculateStatisticsParameters(_esriDataSourcesRaster.ICalculateStatisticsParameters):
    _IID = uuid.UUID('ce8ed17c-1c4d-4eec-8259-77b784cd8de9')

    def __init__(self, *args, **kw):
        super(ICalculateStatisticsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_XSkipFactor(self):
        '''Method ICalculateStatisticsParameters.get_XSkipFactor

           OUTPUT
            XSkipFactor         : long*'''
        return super(ICalculateStatisticsParameters, self).get_XSkipFactor()
    def put_XSkipFactor(self, XSkipFactor):
        '''Method ICalculateStatisticsParameters.put_XSkipFactor

           INPUT
            XSkipFactor         : long'''
        return super(ICalculateStatisticsParameters, self).put_XSkipFactor(XSkipFactor)
    def get_YSkipFactor(self):
        '''Method ICalculateStatisticsParameters.get_YSkipFactor

           OUTPUT
            YSkipFactor         : long*'''
        return super(ICalculateStatisticsParameters, self).get_YSkipFactor()
    def put_YSkipFactor(self, YSkipFactor):
        '''Method ICalculateStatisticsParameters.put_YSkipFactor

           INPUT
            YSkipFactor         : long'''
        return super(ICalculateStatisticsParameters, self).put_YSkipFactor(YSkipFactor)
    def get_IgnoreValues(self):
        '''Method ICalculateStatisticsParameters.get_IgnoreValues

           OUTPUT
            vIgnoreValues       : VARIANT*'''
        return super(ICalculateStatisticsParameters, self).get_IgnoreValues()
    def put_IgnoreValues(self, vIgnoreValues):
        '''Method ICalculateStatisticsParameters.put_IgnoreValues

           INPUT
            vIgnoreValues       : VARIANT'''
        return super(ICalculateStatisticsParameters, self).put_IgnoreValues(vIgnoreValues)
    IgnoreValues = property(get_IgnoreValues, put_IgnoreValues, None)
    XSkipFactor = property(get_XSkipFactor, put_XSkipFactor, None)
    YSkipFactor = property(get_YSkipFactor, put_YSkipFactor, None)

class ICalculateCellSizeRangesParameters(_esriDataSourcesRaster.ICalculateCellSizeRangesParameters):
    _IID = uuid.UUID('6b9ceb1d-7c5f-4de3-a1a8-843851fa1904')

    def __init__(self, *args, **kw):
        super(ICalculateCellSizeRangesParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CalculateRasterMinCellSizes(self, pbDoCalculateMin):
        '''Method ICalculateCellSizeRangesParameters.put_CalculateRasterMinCellSizes

           INPUT
            pbDoCalculateMin    : VARIANT_BOOL'''
        return super(ICalculateCellSizeRangesParameters, self).put_CalculateRasterMinCellSizes(pbDoCalculateMin)
    def get_CalculateRasterMinCellSizes(self):
        '''Method ICalculateCellSizeRangesParameters.get_CalculateRasterMinCellSizes

           OUTPUT
            pbDoCalculateMin    : VARIANT_BOOL*'''
        return super(ICalculateCellSizeRangesParameters, self).get_CalculateRasterMinCellSizes()
    def put_CalculateRasterMaxCellSizes(self, pbDoCalculateMax):
        '''Method ICalculateCellSizeRangesParameters.put_CalculateRasterMaxCellSizes

           INPUT
            pbDoCalculateMax    : VARIANT_BOOL'''
        return super(ICalculateCellSizeRangesParameters, self).put_CalculateRasterMaxCellSizes(pbDoCalculateMax)
    def get_CalculateRasterMaxCellSizes(self):
        '''Method ICalculateCellSizeRangesParameters.get_CalculateRasterMaxCellSizes

           OUTPUT
            pbDoCalculateMax    : VARIANT_BOOL*'''
        return super(ICalculateCellSizeRangesParameters, self).get_CalculateRasterMaxCellSizes()
    def put_CalculateMosaicCellSizes(self, pbDoMosaicCellSizeRanges):
        '''Method ICalculateCellSizeRangesParameters.put_CalculateMosaicCellSizes

           INPUT
            pbDoMosaicCellSizeRanges: VARIANT_BOOL'''
        return super(ICalculateCellSizeRangesParameters, self).put_CalculateMosaicCellSizes(pbDoMosaicCellSizeRanges)
    def get_CalculateMosaicCellSizes(self):
        '''Method ICalculateCellSizeRangesParameters.get_CalculateMosaicCellSizes

           OUTPUT
            pbDoMosaicCellSizeRanges: VARIANT_BOOL*'''
        return super(ICalculateCellSizeRangesParameters, self).get_CalculateMosaicCellSizes()
    def put_CalculateLevels(self, pbCalculateLevels):
        '''Method ICalculateCellSizeRangesParameters.put_CalculateLevels

           INPUT
            pbCalculateLevels   : VARIANT_BOOL'''
        return super(ICalculateCellSizeRangesParameters, self).put_CalculateLevels(pbCalculateLevels)
    def get_CalculateLevels(self):
        '''Method ICalculateCellSizeRangesParameters.get_CalculateLevels

           OUTPUT
            pbCalculateLevels   : VARIANT_BOOL*'''
        return super(ICalculateCellSizeRangesParameters, self).get_CalculateLevels()
    def put_MaxRangeFactor(self, pMaxRangeFactor):
        '''Method ICalculateCellSizeRangesParameters.put_MaxRangeFactor

           INPUT
            pMaxRangeFactor     : double'''
        return super(ICalculateCellSizeRangesParameters, self).put_MaxRangeFactor(pMaxRangeFactor)
    def get_MaxRangeFactor(self):
        '''Method ICalculateCellSizeRangesParameters.get_MaxRangeFactor

           OUTPUT
            pMaxRangeFactor     : double*'''
        return super(ICalculateCellSizeRangesParameters, self).get_MaxRangeFactor()
    def put_MaxOverviewFactor(self, pMaxOverviewFactor):
        '''Method ICalculateCellSizeRangesParameters.put_MaxOverviewFactor

           INPUT
            pMaxOverviewFactor  : double'''
        return super(ICalculateCellSizeRangesParameters, self).put_MaxOverviewFactor(pMaxOverviewFactor)
    def get_MaxOverviewFactor(self):
        '''Method ICalculateCellSizeRangesParameters.get_MaxOverviewFactor

           OUTPUT
            pMaxOverviewFactor  : double*'''
        return super(ICalculateCellSizeRangesParameters, self).get_MaxOverviewFactor()
    def put_CellSizeClusterTolerance(self, pCellSizeClusterTolerance):
        '''Method ICalculateCellSizeRangesParameters.put_CellSizeClusterTolerance

           INPUT
            pCellSizeClusterTolerance: double'''
        return super(ICalculateCellSizeRangesParameters, self).put_CellSizeClusterTolerance(pCellSizeClusterTolerance)
    def get_CellSizeClusterTolerance(self):
        '''Method ICalculateCellSizeRangesParameters.get_CellSizeClusterTolerance

           OUTPUT
            pCellSizeClusterTolerance: double*'''
        return super(ICalculateCellSizeRangesParameters, self).get_CellSizeClusterTolerance()
    def put_UpdateMissingValuesOnly(self, pbUpdateMissingValuesOnly):
        '''Method ICalculateCellSizeRangesParameters.put_UpdateMissingValuesOnly

           INPUT
            pbUpdateMissingValuesOnly: VARIANT_BOOL'''
        return super(ICalculateCellSizeRangesParameters, self).put_UpdateMissingValuesOnly(pbUpdateMissingValuesOnly)
    def get_UpdateMissingValuesOnly(self):
        '''Method ICalculateCellSizeRangesParameters.get_UpdateMissingValuesOnly

           OUTPUT
            pbUpdateMissingValuesOnly: VARIANT_BOOL*'''
        return super(ICalculateCellSizeRangesParameters, self).get_UpdateMissingValuesOnly()
    CalculateLevels = property(get_CalculateLevels, put_CalculateLevels, None)
    CalculateMosaicCellSizes = property(get_CalculateMosaicCellSizes, put_CalculateMosaicCellSizes, None)
    CalculateRasterMaxCellSizes = property(get_CalculateRasterMaxCellSizes, put_CalculateRasterMaxCellSizes, None)
    CalculateRasterMinCellSizes = property(get_CalculateRasterMinCellSizes, put_CalculateRasterMinCellSizes, None)
    CellSizeClusterTolerance = property(get_CellSizeClusterTolerance, put_CellSizeClusterTolerance, None)
    MaxOverviewFactor = property(get_MaxOverviewFactor, put_MaxOverviewFactor, None)
    MaxRangeFactor = property(get_MaxRangeFactor, put_MaxRangeFactor, None)
    UpdateMissingValuesOnly = property(get_UpdateMissingValuesOnly, put_UpdateMissingValuesOnly, None)

class IBuildBoundaryParameters(_esriDataSourcesRaster.IBuildBoundaryParameters):
    _IID = uuid.UUID('b178f641-6536-4c94-9a99-20974850db45')

    def __init__(self, *args, **kw):
        super(IBuildBoundaryParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_AppendToExistingBoundary(self, pbAppendToExistingBoundary):
        '''Method IBuildBoundaryParameters.put_AppendToExistingBoundary

           INPUT
            pbAppendToExistingBoundary: VARIANT_BOOL'''
        return super(IBuildBoundaryParameters, self).put_AppendToExistingBoundary(pbAppendToExistingBoundary)
    def get_AppendToExistingBoundary(self):
        '''Method IBuildBoundaryParameters.get_AppendToExistingBoundary

           OUTPUT
            pbAppendToExistingBoundary: VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters, self).get_AppendToExistingBoundary()
    def put_PerformWeeding(self, pbPerformWeeding):
        '''Method IBuildBoundaryParameters.put_PerformWeeding

           INPUT
            pbPerformWeeding    : VARIANT_BOOL'''
        return super(IBuildBoundaryParameters, self).put_PerformWeeding(pbPerformWeeding)
    def get_PerformWeeding(self):
        '''Method IBuildBoundaryParameters.get_PerformWeeding

           OUTPUT
            pbPerformWeeding    : VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters, self).get_PerformWeeding()
    def put_WeedTolerance(self, pWeedTolerance):
        '''Method IBuildBoundaryParameters.put_WeedTolerance

           INPUT
            pWeedTolerance      : double'''
        return super(IBuildBoundaryParameters, self).put_WeedTolerance(pWeedTolerance)
    def get_WeedTolerance(self):
        '''Method IBuildBoundaryParameters.get_WeedTolerance

           OUTPUT
            pWeedTolerance      : double*'''
        return super(IBuildBoundaryParameters, self).get_WeedTolerance()
    def put_BufferDistanceFactor(self, pBufferDistanceFactor):
        '''Method IBuildBoundaryParameters.put_BufferDistanceFactor

           INPUT
            pBufferDistanceFactor: double'''
        return super(IBuildBoundaryParameters, self).put_BufferDistanceFactor(pBufferDistanceFactor)
    def get_BufferDistanceFactor(self):
        '''Method IBuildBoundaryParameters.get_BufferDistanceFactor

           OUTPUT
            pBufferDistanceFactor: double*'''
        return super(IBuildBoundaryParameters, self).get_BufferDistanceFactor()
    def put_RemoveSlivers(self, pbRemoveSlivers):
        '''Method IBuildBoundaryParameters.put_RemoveSlivers

           INPUT
            pbRemoveSlivers     : VARIANT_BOOL'''
        return super(IBuildBoundaryParameters, self).put_RemoveSlivers(pbRemoveSlivers)
    def get_RemoveSlivers(self):
        '''Method IBuildBoundaryParameters.get_RemoveSlivers

           OUTPUT
            pbRemoveSlivers     : VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters, self).get_RemoveSlivers()
    def put_UpdateBoundary(self, pbUpdateBoundary):
        '''Method IBuildBoundaryParameters.put_UpdateBoundary

           INPUT
            pbUpdateBoundary    : VARIANT_BOOL'''
        return super(IBuildBoundaryParameters, self).put_UpdateBoundary(pbUpdateBoundary)
    def get_UpdateBoundary(self):
        '''Method IBuildBoundaryParameters.get_UpdateBoundary

           OUTPUT
            pbUpdateBoundary    : VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters, self).get_UpdateBoundary()
    AppendToExistingBoundary = property(get_AppendToExistingBoundary, put_AppendToExistingBoundary, None)
    BufferDistanceFactor = property(get_BufferDistanceFactor, put_BufferDistanceFactor, None)
    PerformWeeding = property(get_PerformWeeding, put_PerformWeeding, None)
    RemoveSlivers = property(get_RemoveSlivers, put_RemoveSlivers, None)
    UpdateBoundary = property(get_UpdateBoundary, put_UpdateBoundary, None)
    WeedTolerance = property(get_WeedTolerance, put_WeedTolerance, None)

class IBuildBoundaryParameters2(_esriDataSourcesRaster.IBuildBoundaryParameters2):
    _IID = uuid.UUID('f7251e46-2901-4e68-9d46-51daf31c04bd')

    def __init__(self, *args, **kw):
        super(IBuildBoundaryParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BoundarySimplificationMethod(self):
        '''Method IBuildBoundaryParameters2.get_BoundarySimplificationMethod

           OUTPUT
            pSimplificationMethod: esriGeometrySimplificationMethod*'''
        return super(IBuildBoundaryParameters2, self).get_BoundarySimplificationMethod()
    def put_BoundarySimplificationMethod(self, pSimplificationMethod):
        '''Method IBuildBoundaryParameters2.put_BoundarySimplificationMethod

           INPUT
            pSimplificationMethod: esriGeometrySimplificationMethod'''
        return super(IBuildBoundaryParameters2, self).put_BoundarySimplificationMethod(pSimplificationMethod)
    def put_AppendToExistingBoundary(self, pbAppendToExistingBoundary):
        '''Method IBuildBoundaryParameters.put_AppendToExistingBoundary (from IBuildBoundaryParameters)

           INPUT
            pbAppendToExistingBoundary: VARIANT_BOOL'''
        return super(IBuildBoundaryParameters2, self).put_AppendToExistingBoundary(pbAppendToExistingBoundary)
    def get_AppendToExistingBoundary(self):
        '''Method IBuildBoundaryParameters.get_AppendToExistingBoundary (from IBuildBoundaryParameters)

           OUTPUT
            pbAppendToExistingBoundary: VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters2, self).get_AppendToExistingBoundary()
    def put_PerformWeeding(self, pbPerformWeeding):
        '''Method IBuildBoundaryParameters.put_PerformWeeding (from IBuildBoundaryParameters)

           INPUT
            pbPerformWeeding    : VARIANT_BOOL'''
        return super(IBuildBoundaryParameters2, self).put_PerformWeeding(pbPerformWeeding)
    def get_PerformWeeding(self):
        '''Method IBuildBoundaryParameters.get_PerformWeeding (from IBuildBoundaryParameters)

           OUTPUT
            pbPerformWeeding    : VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters2, self).get_PerformWeeding()
    def put_WeedTolerance(self, pWeedTolerance):
        '''Method IBuildBoundaryParameters.put_WeedTolerance (from IBuildBoundaryParameters)

           INPUT
            pWeedTolerance      : double'''
        return super(IBuildBoundaryParameters2, self).put_WeedTolerance(pWeedTolerance)
    def get_WeedTolerance(self):
        '''Method IBuildBoundaryParameters.get_WeedTolerance (from IBuildBoundaryParameters)

           OUTPUT
            pWeedTolerance      : double*'''
        return super(IBuildBoundaryParameters2, self).get_WeedTolerance()
    def put_BufferDistanceFactor(self, pBufferDistanceFactor):
        '''Method IBuildBoundaryParameters.put_BufferDistanceFactor (from IBuildBoundaryParameters)

           INPUT
            pBufferDistanceFactor: double'''
        return super(IBuildBoundaryParameters2, self).put_BufferDistanceFactor(pBufferDistanceFactor)
    def get_BufferDistanceFactor(self):
        '''Method IBuildBoundaryParameters.get_BufferDistanceFactor (from IBuildBoundaryParameters)

           OUTPUT
            pBufferDistanceFactor: double*'''
        return super(IBuildBoundaryParameters2, self).get_BufferDistanceFactor()
    def put_RemoveSlivers(self, pbRemoveSlivers):
        '''Method IBuildBoundaryParameters.put_RemoveSlivers (from IBuildBoundaryParameters)

           INPUT
            pbRemoveSlivers     : VARIANT_BOOL'''
        return super(IBuildBoundaryParameters2, self).put_RemoveSlivers(pbRemoveSlivers)
    def get_RemoveSlivers(self):
        '''Method IBuildBoundaryParameters.get_RemoveSlivers (from IBuildBoundaryParameters)

           OUTPUT
            pbRemoveSlivers     : VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters2, self).get_RemoveSlivers()
    def put_UpdateBoundary(self, pbUpdateBoundary):
        '''Method IBuildBoundaryParameters.put_UpdateBoundary (from IBuildBoundaryParameters)

           INPUT
            pbUpdateBoundary    : VARIANT_BOOL'''
        return super(IBuildBoundaryParameters2, self).put_UpdateBoundary(pbUpdateBoundary)
    def get_UpdateBoundary(self):
        '''Method IBuildBoundaryParameters.get_UpdateBoundary (from IBuildBoundaryParameters)

           OUTPUT
            pbUpdateBoundary    : VARIANT_BOOL*'''
        return super(IBuildBoundaryParameters2, self).get_UpdateBoundary()
    AppendToExistingBoundary = property(get_AppendToExistingBoundary, put_AppendToExistingBoundary, None)
    BoundarySimplificationMethod = property(get_BoundarySimplificationMethod, put_BoundarySimplificationMethod, None)
    BufferDistanceFactor = property(get_BufferDistanceFactor, put_BufferDistanceFactor, None)
    PerformWeeding = property(get_PerformWeeding, put_PerformWeeding, None)
    RemoveSlivers = property(get_RemoveSlivers, put_RemoveSlivers, None)
    UpdateBoundary = property(get_UpdateBoundary, put_UpdateBoundary, None)
    WeedTolerance = property(get_WeedTolerance, put_WeedTolerance, None)

class IRemoveSliversParameters(_esriDataSourcesRaster.IRemoveSliversParameters):
    _IID = uuid.UUID('cd210b62-ecf0-4429-95af-bddd8b404740')

    def __init__(self, *args, **kw):
        super(IRemoveSliversParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_MinPointsForElimination(self, pMinPointsForElimination):
        '''Method IRemoveSliversParameters.put_MinPointsForElimination

           INPUT
            pMinPointsForElimination: long'''
        return super(IRemoveSliversParameters, self).put_MinPointsForElimination(pMinPointsForElimination)
    def get_MinPointsForElimination(self):
        '''Method IRemoveSliversParameters.get_MinPointsForElimination

           OUTPUT
            pMinPointsForElimination: long*'''
        return super(IRemoveSliversParameters, self).get_MinPointsForElimination()
    def put_MinArea(self, pMinArea):
        '''Method IRemoveSliversParameters.put_MinArea

           INPUT
            pMinArea            : double'''
        return super(IRemoveSliversParameters, self).put_MinArea(pMinArea)
    def get_MinArea(self):
        '''Method IRemoveSliversParameters.get_MinArea

           OUTPUT
            pMinArea            : double*'''
        return super(IRemoveSliversParameters, self).get_MinArea()
    def put_MinCircularityRatio(self, pMinCircularityRatio):
        '''Method IRemoveSliversParameters.put_MinCircularityRatio

           INPUT
            pMinCircularityRatio: double'''
        return super(IRemoveSliversParameters, self).put_MinCircularityRatio(pMinCircularityRatio)
    def get_MinCircularityRatio(self):
        '''Method IRemoveSliversParameters.get_MinCircularityRatio

           OUTPUT
            pMinCircularityRatio: double*'''
        return super(IRemoveSliversParameters, self).get_MinCircularityRatio()
    MinArea = property(get_MinArea, put_MinArea, None)
    MinCircularityRatio = property(get_MinCircularityRatio, put_MinCircularityRatio, None)
    MinPointsForElimination = property(get_MinPointsForElimination, put_MinPointsForElimination, None)

class IOverviewTileParameters(_esriDataSourcesRaster.IOverviewTileParameters):
    _IID = uuid.UUID('5a70d2d7-2810-4a5b-8791-5db54aec9bcf')

    def __init__(self, *args, **kw):
        super(IOverviewTileParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_AoiGeometry(self, ppAoiGeometry):
        '''Method IOverviewTileParameters.putref_AoiGeometry

           INPUT
            ppAoiGeometry       : IGeometry*'''
        return super(IOverviewTileParameters, self).putref_AoiGeometry(ppAoiGeometry)
    def get_AoiGeometry(self):
        '''Method IOverviewTileParameters.get_AoiGeometry

           OUTPUT
            ppAoiGeometry       : IGeometry**'''
        return super(IOverviewTileParameters, self).get_AoiGeometry()
    def putref_Origin(self, ppOrigin):
        '''Method IOverviewTileParameters.putref_Origin

           INPUT
            ppOrigin            : IPoint*'''
        return super(IOverviewTileParameters, self).putref_Origin(ppOrigin)
    def get_Origin(self):
        '''Method IOverviewTileParameters.get_Origin

           OUTPUT
            ppOrigin            : IPoint**'''
        return super(IOverviewTileParameters, self).get_Origin()
    def put_CellSize(self, pCellsize):
        '''Method IOverviewTileParameters.put_CellSize

           INPUT
            pCellsize           : double'''
        return super(IOverviewTileParameters, self).put_CellSize(pCellsize)
    def get_CellSize(self):
        '''Method IOverviewTileParameters.get_CellSize

           OUTPUT
            pCellsize           : double*'''
        return super(IOverviewTileParameters, self).get_CellSize()
    def put_TileCols(self, pTileColPixels):
        '''Method IOverviewTileParameters.put_TileCols

           INPUT
            pTileColPixels      : long'''
        return super(IOverviewTileParameters, self).put_TileCols(pTileColPixels)
    def get_TileCols(self):
        '''Method IOverviewTileParameters.get_TileCols

           OUTPUT
            pTileColPixels      : long*'''
        return super(IOverviewTileParameters, self).get_TileCols()
    def put_TileRows(self, pTileRowPixels):
        '''Method IOverviewTileParameters.put_TileRows

           INPUT
            pTileRowPixels      : long'''
        return super(IOverviewTileParameters, self).put_TileRows(pTileRowPixels)
    def get_TileRows(self):
        '''Method IOverviewTileParameters.get_TileRows

           OUTPUT
            pTileRowPixels      : long*'''
        return super(IOverviewTileParameters, self).get_TileRows()
    def put_Levels(self, pLevels):
        '''Method IOverviewTileParameters.put_Levels

           INPUT
            pLevels             : long'''
        return super(IOverviewTileParameters, self).put_Levels(pLevels)
    def get_Levels(self):
        '''Method IOverviewTileParameters.get_Levels

           OUTPUT
            pLevels             : long*'''
        return super(IOverviewTileParameters, self).get_Levels()
    def put_OverviewFactor(self, pOverviewFactor):
        '''Method IOverviewTileParameters.put_OverviewFactor

           INPUT
            pOverviewFactor     : long'''
        return super(IOverviewTileParameters, self).put_OverviewFactor(pOverviewFactor)
    def get_OverviewFactor(self):
        '''Method IOverviewTileParameters.get_OverviewFactor

           OUTPUT
            pOverviewFactor     : long*'''
        return super(IOverviewTileParameters, self).get_OverviewFactor()
    def put_MaximumSizeOfTopmostOverview(self, pMaximumSizeOfTopmostOverview):
        '''Method IOverviewTileParameters.put_MaximumSizeOfTopmostOverview

           INPUT
            pMaximumSizeOfTopmostOverview: long'''
        return super(IOverviewTileParameters, self).put_MaximumSizeOfTopmostOverview(pMaximumSizeOfTopmostOverview)
    def get_MaximumSizeOfTopmostOverview(self):
        '''Method IOverviewTileParameters.get_MaximumSizeOfTopmostOverview

           OUTPUT
            pMaximumSizeOfTopmostOverview: long*'''
        return super(IOverviewTileParameters, self).get_MaximumSizeOfTopmostOverview()
    def putref_WorkspaceName(self, ppOverviewWorkspaceName):
        '''Method IOverviewTileParameters.putref_WorkspaceName

           INPUT
            ppOverviewWorkspaceName: IWorkspaceName*'''
        return super(IOverviewTileParameters, self).putref_WorkspaceName(ppOverviewWorkspaceName)
    def get_WorkspaceName(self):
        '''Method IOverviewTileParameters.get_WorkspaceName

           OUTPUT
            ppOverviewWorkspaceName: IWorkspaceName**'''
        return super(IOverviewTileParameters, self).get_WorkspaceName()
    AoiGeometry = property(get_AoiGeometry, putref_AoiGeometry, None)
    CellSize = property(get_CellSize, put_CellSize, None)
    Levels = property(get_Levels, put_Levels, None)
    MaximumSizeOfTopmostOverview = property(get_MaximumSizeOfTopmostOverview, put_MaximumSizeOfTopmostOverview, None)
    Origin = property(get_Origin, putref_Origin, None)
    OverviewFactor = property(get_OverviewFactor, put_OverviewFactor, None)
    TileCols = property(get_TileCols, put_TileCols, None)
    TileRows = property(get_TileRows, put_TileRows, None)
    WorkspaceName = property(get_WorkspaceName, putref_WorkspaceName, None)

class IOverviewTileParameters2(_esriDataSourcesRaster.IOverviewTileParameters2):
    _IID = uuid.UUID('9c4965ab-519a-4fbb-80fc-9f1965d06f3e')

    def __init__(self, *args, **kw):
        super(IOverviewTileParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_BaseCellSize(self, ppBaseCellSize):
        '''Method IOverviewTileParameters2.putref_BaseCellSize

           INPUT
            ppBaseCellSize      : IPoint*'''
        return super(IOverviewTileParameters2, self).putref_BaseCellSize(ppBaseCellSize)
    def get_BaseCellSize(self):
        '''Method IOverviewTileParameters2.get_BaseCellSize

           OUTPUT
            ppBaseCellSize      : IPoint**'''
        return super(IOverviewTileParameters2, self).get_BaseCellSize()
    def putref_AoiGeometry(self, ppAoiGeometry):
        '''Method IOverviewTileParameters.putref_AoiGeometry (from IOverviewTileParameters)

           INPUT
            ppAoiGeometry       : IGeometry*'''
        return super(IOverviewTileParameters2, self).putref_AoiGeometry(ppAoiGeometry)
    def get_AoiGeometry(self):
        '''Method IOverviewTileParameters.get_AoiGeometry (from IOverviewTileParameters)

           OUTPUT
            ppAoiGeometry       : IGeometry**'''
        return super(IOverviewTileParameters2, self).get_AoiGeometry()
    def putref_Origin(self, ppOrigin):
        '''Method IOverviewTileParameters.putref_Origin (from IOverviewTileParameters)

           INPUT
            ppOrigin            : IPoint*'''
        return super(IOverviewTileParameters2, self).putref_Origin(ppOrigin)
    def get_Origin(self):
        '''Method IOverviewTileParameters.get_Origin (from IOverviewTileParameters)

           OUTPUT
            ppOrigin            : IPoint**'''
        return super(IOverviewTileParameters2, self).get_Origin()
    def put_CellSize(self, pCellsize):
        '''Method IOverviewTileParameters.put_CellSize (from IOverviewTileParameters)

           INPUT
            pCellsize           : double'''
        return super(IOverviewTileParameters2, self).put_CellSize(pCellsize)
    def get_CellSize(self):
        '''Method IOverviewTileParameters.get_CellSize (from IOverviewTileParameters)

           OUTPUT
            pCellsize           : double*'''
        return super(IOverviewTileParameters2, self).get_CellSize()
    def put_TileCols(self, pTileColPixels):
        '''Method IOverviewTileParameters.put_TileCols (from IOverviewTileParameters)

           INPUT
            pTileColPixels      : long'''
        return super(IOverviewTileParameters2, self).put_TileCols(pTileColPixels)
    def get_TileCols(self):
        '''Method IOverviewTileParameters.get_TileCols (from IOverviewTileParameters)

           OUTPUT
            pTileColPixels      : long*'''
        return super(IOverviewTileParameters2, self).get_TileCols()
    def put_TileRows(self, pTileRowPixels):
        '''Method IOverviewTileParameters.put_TileRows (from IOverviewTileParameters)

           INPUT
            pTileRowPixels      : long'''
        return super(IOverviewTileParameters2, self).put_TileRows(pTileRowPixels)
    def get_TileRows(self):
        '''Method IOverviewTileParameters.get_TileRows (from IOverviewTileParameters)

           OUTPUT
            pTileRowPixels      : long*'''
        return super(IOverviewTileParameters2, self).get_TileRows()
    def put_Levels(self, pLevels):
        '''Method IOverviewTileParameters.put_Levels (from IOverviewTileParameters)

           INPUT
            pLevels             : long'''
        return super(IOverviewTileParameters2, self).put_Levels(pLevels)
    def get_Levels(self):
        '''Method IOverviewTileParameters.get_Levels (from IOverviewTileParameters)

           OUTPUT
            pLevels             : long*'''
        return super(IOverviewTileParameters2, self).get_Levels()
    def put_OverviewFactor(self, pOverviewFactor):
        '''Method IOverviewTileParameters.put_OverviewFactor (from IOverviewTileParameters)

           INPUT
            pOverviewFactor     : long'''
        return super(IOverviewTileParameters2, self).put_OverviewFactor(pOverviewFactor)
    def get_OverviewFactor(self):
        '''Method IOverviewTileParameters.get_OverviewFactor (from IOverviewTileParameters)

           OUTPUT
            pOverviewFactor     : long*'''
        return super(IOverviewTileParameters2, self).get_OverviewFactor()
    def put_MaximumSizeOfTopmostOverview(self, pMaximumSizeOfTopmostOverview):
        '''Method IOverviewTileParameters.put_MaximumSizeOfTopmostOverview (from IOverviewTileParameters)

           INPUT
            pMaximumSizeOfTopmostOverview: long'''
        return super(IOverviewTileParameters2, self).put_MaximumSizeOfTopmostOverview(pMaximumSizeOfTopmostOverview)
    def get_MaximumSizeOfTopmostOverview(self):
        '''Method IOverviewTileParameters.get_MaximumSizeOfTopmostOverview (from IOverviewTileParameters)

           OUTPUT
            pMaximumSizeOfTopmostOverview: long*'''
        return super(IOverviewTileParameters2, self).get_MaximumSizeOfTopmostOverview()
    def putref_WorkspaceName(self, ppOverviewWorkspaceName):
        '''Method IOverviewTileParameters.putref_WorkspaceName (from IOverviewTileParameters)

           INPUT
            ppOverviewWorkspaceName: IWorkspaceName*'''
        return super(IOverviewTileParameters2, self).putref_WorkspaceName(ppOverviewWorkspaceName)
    def get_WorkspaceName(self):
        '''Method IOverviewTileParameters.get_WorkspaceName (from IOverviewTileParameters)

           OUTPUT
            ppOverviewWorkspaceName: IWorkspaceName**'''
        return super(IOverviewTileParameters2, self).get_WorkspaceName()
    AoiGeometry = property(get_AoiGeometry, putref_AoiGeometry, None)
    BaseCellSize = property(get_BaseCellSize, putref_BaseCellSize, None)
    CellSize = property(get_CellSize, put_CellSize, None)
    Levels = property(get_Levels, put_Levels, None)
    MaximumSizeOfTopmostOverview = property(get_MaximumSizeOfTopmostOverview, put_MaximumSizeOfTopmostOverview, None)
    Origin = property(get_Origin, putref_Origin, None)
    OverviewFactor = property(get_OverviewFactor, put_OverviewFactor, None)
    TileCols = property(get_TileCols, put_TileCols, None)
    TileRows = property(get_TileRows, put_TileRows, None)
    WorkspaceName = property(get_WorkspaceName, putref_WorkspaceName, None)

class IOverviewImageParameters(_esriDataSourcesRaster.IOverviewImageParameters):
    _IID = uuid.UUID('de785fa7-36fa-4b0e-a26c-e04ec264973a')

    def __init__(self, *args, **kw):
        super(IOverviewImageParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_StorageDef(self):
        '''Method IOverviewImageParameters.get_StorageDef

           OUTPUT
            ppStorageDef        : IRasterStorageDef**'''
        return super(IOverviewImageParameters, self).get_StorageDef()
    def putref_StorageDef(self, ppStorageDef):
        '''Method IOverviewImageParameters.putref_StorageDef

           INPUT
            ppStorageDef        : IRasterStorageDef*'''
        return super(IOverviewImageParameters, self).putref_StorageDef(ppStorageDef)
    def put_ResamplingMethod(self, pSamplingMethod):
        '''Method IOverviewImageParameters.put_ResamplingMethod

           INPUT
            pSamplingMethod     : rstResamplingTypes'''
        return super(IOverviewImageParameters, self).put_ResamplingMethod(pSamplingMethod)
    def get_ResamplingMethod(self):
        '''Method IOverviewImageParameters.get_ResamplingMethod

           OUTPUT
            pSamplingMethod     : rstResamplingTypes*'''
        return super(IOverviewImageParameters, self).get_ResamplingMethod()
    ResamplingMethod = property(get_ResamplingMethod, put_ResamplingMethod, None)
    StorageDef = property(get_StorageDef, putref_StorageDef, None)

class IDefineOverviewsParameters(_esriDataSourcesRaster.IDefineOverviewsParameters):
    _IID = uuid.UUID('b22217ba-ef57-4f30-b2d4-337a1505a286')

    def __init__(self, *args, **kw):
        super(IDefineOverviewsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ForceOverviewTiles(self, pbForceOverviewTiles):
        '''Method IDefineOverviewsParameters.put_ForceOverviewTiles

           INPUT
            pbForceOverviewTiles: VARIANT_BOOL'''
        return super(IDefineOverviewsParameters, self).put_ForceOverviewTiles(pbForceOverviewTiles)
    def get_ForceOverviewTiles(self):
        '''Method IDefineOverviewsParameters.get_ForceOverviewTiles

           OUTPUT
            pbForceOverviewTiles: VARIANT_BOOL*'''
        return super(IDefineOverviewsParameters, self).get_ForceOverviewTiles()
    def put_InstanceID(self, pInstanceID):
        '''Method IDefineOverviewsParameters.put_InstanceID

           INPUT
            pInstanceID         : long'''
        return super(IDefineOverviewsParameters, self).put_InstanceID(pInstanceID)
    def get_InstanceID(self):
        '''Method IDefineOverviewsParameters.get_InstanceID

           OUTPUT
            pInstanceID         : long*'''
        return super(IDefineOverviewsParameters, self).get_InstanceID()
    def put_RefreshAllInstances(self, pbRefreshAllInstances):
        '''Method IDefineOverviewsParameters.put_RefreshAllInstances

           INPUT
            pbRefreshAllInstances: VARIANT_BOOL'''
        return super(IDefineOverviewsParameters, self).put_RefreshAllInstances(pbRefreshAllInstances)
    def get_RefreshAllInstances(self):
        '''Method IDefineOverviewsParameters.get_RefreshAllInstances

           OUTPUT
            pbRefreshAllInstances: VARIANT_BOOL*'''
        return super(IDefineOverviewsParameters, self).get_RefreshAllInstances()
    ForceOverviewTiles = property(get_ForceOverviewTiles, put_ForceOverviewTiles, None)
    InstanceID = property(get_InstanceID, put_InstanceID, None)
    RefreshAllInstances = property(get_RefreshAllInstances, put_RefreshAllInstances, None)

class IGenerateOverviewsParameters(_esriDataSourcesRaster.IGenerateOverviewsParameters):
    _IID = uuid.UUID('d1bcace5-6733-46aa-9680-add4d97a5e73')

    def __init__(self, *args, **kw):
        super(IGenerateOverviewsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_GenerateMissingImages(self, pbGenerateMissingImages):
        '''Method IGenerateOverviewsParameters.put_GenerateMissingImages

           INPUT
            pbGenerateMissingImages: VARIANT_BOOL'''
        return super(IGenerateOverviewsParameters, self).put_GenerateMissingImages(pbGenerateMissingImages)
    def get_GenerateMissingImages(self):
        '''Method IGenerateOverviewsParameters.get_GenerateMissingImages

           OUTPUT
            pbGenerateMissingImages: VARIANT_BOOL*'''
        return super(IGenerateOverviewsParameters, self).get_GenerateMissingImages()
    def put_GenerateStaleImages(self, pbGenerateStaleImages):
        '''Method IGenerateOverviewsParameters.put_GenerateStaleImages

           INPUT
            pbGenerateStaleImages: VARIANT_BOOL'''
        return super(IGenerateOverviewsParameters, self).put_GenerateStaleImages(pbGenerateStaleImages)
    def get_GenerateStaleImages(self):
        '''Method IGenerateOverviewsParameters.get_GenerateStaleImages

           OUTPUT
            pbGenerateStaleImages: VARIANT_BOOL*'''
        return super(IGenerateOverviewsParameters, self).get_GenerateStaleImages()
    GenerateMissingImages = property(get_GenerateMissingImages, put_GenerateMissingImages, None)
    GenerateStaleImages = property(get_GenerateStaleImages, put_GenerateStaleImages, None)

class IGenerateOverviewsParameters2(_esriDataSourcesRaster.IGenerateOverviewsParameters2):
    _IID = uuid.UUID('76253922-1edf-4e4d-9ec9-2ffadf75ebfb')

    def __init__(self, *args, **kw):
        super(IGenerateOverviewsParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ComputeStatistics(self, pbComputeStatistics):
        '''Method IGenerateOverviewsParameters2.put_ComputeStatistics

           INPUT
            pbComputeStatistics : VARIANT_BOOL'''
        return super(IGenerateOverviewsParameters2, self).put_ComputeStatistics(pbComputeStatistics)
    def get_ComputeStatistics(self):
        '''Method IGenerateOverviewsParameters2.get_ComputeStatistics

           OUTPUT
            pbComputeStatistics : VARIANT_BOOL*'''
        return super(IGenerateOverviewsParameters2, self).get_ComputeStatistics()
    def put_GenerateMissingImages(self, pbGenerateMissingImages):
        '''Method IGenerateOverviewsParameters.put_GenerateMissingImages (from IGenerateOverviewsParameters)

           INPUT
            pbGenerateMissingImages: VARIANT_BOOL'''
        return super(IGenerateOverviewsParameters2, self).put_GenerateMissingImages(pbGenerateMissingImages)
    def get_GenerateMissingImages(self):
        '''Method IGenerateOverviewsParameters.get_GenerateMissingImages (from IGenerateOverviewsParameters)

           OUTPUT
            pbGenerateMissingImages: VARIANT_BOOL*'''
        return super(IGenerateOverviewsParameters2, self).get_GenerateMissingImages()
    def put_GenerateStaleImages(self, pbGenerateStaleImages):
        '''Method IGenerateOverviewsParameters.put_GenerateStaleImages (from IGenerateOverviewsParameters)

           INPUT
            pbGenerateStaleImages: VARIANT_BOOL'''
        return super(IGenerateOverviewsParameters2, self).put_GenerateStaleImages(pbGenerateStaleImages)
    def get_GenerateStaleImages(self):
        '''Method IGenerateOverviewsParameters.get_GenerateStaleImages (from IGenerateOverviewsParameters)

           OUTPUT
            pbGenerateStaleImages: VARIANT_BOOL*'''
        return super(IGenerateOverviewsParameters2, self).get_GenerateStaleImages()
    ComputeStatistics = property(get_ComputeStatistics, put_ComputeStatistics, None)
    GenerateMissingImages = property(get_GenerateMissingImages, put_GenerateMissingImages, None)
    GenerateStaleImages = property(get_GenerateStaleImages, put_GenerateStaleImages, None)

class IRemoveItemsParameters(_esriDataSourcesRaster.IRemoveItemsParameters):
    _IID = uuid.UUID('a907cb6a-6cfc-4fb5-8d80-93ea185416d7')

    def __init__(self, *args, **kw):
        super(IRemoveItemsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_DeleteOverviewImages(self, pbDeleteOverviewImages):
        '''Method IRemoveItemsParameters.put_DeleteOverviewImages

           INPUT
            pbDeleteOverviewImages: VARIANT_BOOL'''
        return super(IRemoveItemsParameters, self).put_DeleteOverviewImages(pbDeleteOverviewImages)
    def get_DeleteOverviewImages(self):
        '''Method IRemoveItemsParameters.get_DeleteOverviewImages

           OUTPUT
            pbDeleteOverviewImages: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters, self).get_DeleteOverviewImages()
    def put_RemoveUnreferencedInstances(self, pbRemoveUnreferencedInstances):
        '''Method IRemoveItemsParameters.put_RemoveUnreferencedInstances

           INPUT
            pbRemoveUnreferencedInstances: VARIANT_BOOL'''
        return super(IRemoveItemsParameters, self).put_RemoveUnreferencedInstances(pbRemoveUnreferencedInstances)
    def get_RemoveUnreferencedInstances(self):
        '''Method IRemoveItemsParameters.get_RemoveUnreferencedInstances

           OUTPUT
            pbRemoveUnreferencedInstances: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters, self).get_RemoveUnreferencedInstances()
    def put_TouchAffectedOverviewItems(self, pbTouchAffectedOverviewItems):
        '''Method IRemoveItemsParameters.put_TouchAffectedOverviewItems

           INPUT
            pbTouchAffectedOverviewItems: VARIANT_BOOL'''
        return super(IRemoveItemsParameters, self).put_TouchAffectedOverviewItems(pbTouchAffectedOverviewItems)
    def get_TouchAffectedOverviewItems(self):
        '''Method IRemoveItemsParameters.get_TouchAffectedOverviewItems

           OUTPUT
            pbTouchAffectedOverviewItems: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters, self).get_TouchAffectedOverviewItems()
    def put_RemoveBrokenItemsOnly(self, pbRemoveBrokenItemsOnly):
        '''Method IRemoveItemsParameters.put_RemoveBrokenItemsOnly

           INPUT
            pbRemoveBrokenItemsOnly: VARIANT_BOOL'''
        return super(IRemoveItemsParameters, self).put_RemoveBrokenItemsOnly(pbRemoveBrokenItemsOnly)
    def get_RemoveBrokenItemsOnly(self):
        '''Method IRemoveItemsParameters.get_RemoveBrokenItemsOnly

           OUTPUT
            pbRemoveBrokenItemsOnly: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters, self).get_RemoveBrokenItemsOnly()
    DeleteOverviewImages = property(get_DeleteOverviewImages, put_DeleteOverviewImages, None)
    RemoveBrokenItemsOnly = property(get_RemoveBrokenItemsOnly, put_RemoveBrokenItemsOnly, None)
    RemoveUnreferencedInstances = property(get_RemoveUnreferencedInstances, put_RemoveUnreferencedInstances, None)
    TouchAffectedOverviewItems = property(get_TouchAffectedOverviewItems, put_TouchAffectedOverviewItems, None)

class IRemoveItemsParameters2(_esriDataSourcesRaster.IRemoveItemsParameters2):
    _IID = uuid.UUID('1392ac33-0be8-4c56-93b8-ae0644297c68')

    def __init__(self, *args, **kw):
        super(IRemoveItemsParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_DeleteItemCache(self, pbDeleteItemCache):
        '''Method IRemoveItemsParameters2.put_DeleteItemCache

           INPUT
            pbDeleteItemCache   : VARIANT_BOOL'''
        return super(IRemoveItemsParameters2, self).put_DeleteItemCache(pbDeleteItemCache)
    def get_DeleteItemCache(self):
        '''Method IRemoveItemsParameters2.get_DeleteItemCache

           OUTPUT
            pbDeleteItemCache   : VARIANT_BOOL*'''
        return super(IRemoveItemsParameters2, self).get_DeleteItemCache()
    def put_RemoveItem(self, pbRemoveItem):
        '''Method IRemoveItemsParameters2.put_RemoveItem

           INPUT
            pbRemoveItem        : VARIANT_BOOL'''
        return super(IRemoveItemsParameters2, self).put_RemoveItem(pbRemoveItem)
    def get_RemoveItem(self):
        '''Method IRemoveItemsParameters2.get_RemoveItem

           OUTPUT
            pbRemoveItem        : VARIANT_BOOL*'''
        return super(IRemoveItemsParameters2, self).get_RemoveItem()
    def put_DeleteOverviewImages(self, pbDeleteOverviewImages):
        '''Method IRemoveItemsParameters.put_DeleteOverviewImages (from IRemoveItemsParameters)

           INPUT
            pbDeleteOverviewImages: VARIANT_BOOL'''
        return super(IRemoveItemsParameters2, self).put_DeleteOverviewImages(pbDeleteOverviewImages)
    def get_DeleteOverviewImages(self):
        '''Method IRemoveItemsParameters.get_DeleteOverviewImages (from IRemoveItemsParameters)

           OUTPUT
            pbDeleteOverviewImages: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters2, self).get_DeleteOverviewImages()
    def put_RemoveUnreferencedInstances(self, pbRemoveUnreferencedInstances):
        '''Method IRemoveItemsParameters.put_RemoveUnreferencedInstances (from IRemoveItemsParameters)

           INPUT
            pbRemoveUnreferencedInstances: VARIANT_BOOL'''
        return super(IRemoveItemsParameters2, self).put_RemoveUnreferencedInstances(pbRemoveUnreferencedInstances)
    def get_RemoveUnreferencedInstances(self):
        '''Method IRemoveItemsParameters.get_RemoveUnreferencedInstances (from IRemoveItemsParameters)

           OUTPUT
            pbRemoveUnreferencedInstances: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters2, self).get_RemoveUnreferencedInstances()
    def put_TouchAffectedOverviewItems(self, pbTouchAffectedOverviewItems):
        '''Method IRemoveItemsParameters.put_TouchAffectedOverviewItems (from IRemoveItemsParameters)

           INPUT
            pbTouchAffectedOverviewItems: VARIANT_BOOL'''
        return super(IRemoveItemsParameters2, self).put_TouchAffectedOverviewItems(pbTouchAffectedOverviewItems)
    def get_TouchAffectedOverviewItems(self):
        '''Method IRemoveItemsParameters.get_TouchAffectedOverviewItems (from IRemoveItemsParameters)

           OUTPUT
            pbTouchAffectedOverviewItems: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters2, self).get_TouchAffectedOverviewItems()
    def put_RemoveBrokenItemsOnly(self, pbRemoveBrokenItemsOnly):
        '''Method IRemoveItemsParameters.put_RemoveBrokenItemsOnly (from IRemoveItemsParameters)

           INPUT
            pbRemoveBrokenItemsOnly: VARIANT_BOOL'''
        return super(IRemoveItemsParameters2, self).put_RemoveBrokenItemsOnly(pbRemoveBrokenItemsOnly)
    def get_RemoveBrokenItemsOnly(self):
        '''Method IRemoveItemsParameters.get_RemoveBrokenItemsOnly (from IRemoveItemsParameters)

           OUTPUT
            pbRemoveBrokenItemsOnly: VARIANT_BOOL*'''
        return super(IRemoveItemsParameters2, self).get_RemoveBrokenItemsOnly()
    DeleteItemCache = property(get_DeleteItemCache, put_DeleteItemCache, None)
    DeleteOverviewImages = property(get_DeleteOverviewImages, put_DeleteOverviewImages, None)
    RemoveBrokenItemsOnly = property(get_RemoveBrokenItemsOnly, put_RemoveBrokenItemsOnly, None)
    RemoveItem = property(get_RemoveItem, put_RemoveItem, None)
    RemoveUnreferencedInstances = property(get_RemoveUnreferencedInstances, put_RemoveUnreferencedInstances, None)
    TouchAffectedOverviewItems = property(get_TouchAffectedOverviewItems, put_TouchAffectedOverviewItems, None)

class IDefineNoDataParameters(_esriDataSourcesRaster.IDefineNoDataParameters):
    _IID = uuid.UUID('9cfc869f-0be0-485c-9e5a-9d4bdea0cc4f')

    def __init__(self, *args, **kw):
        super(IDefineNoDataParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_IncludedRanges(self):
        '''Method IDefineNoDataParameters.get_IncludedRanges

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IDefineNoDataParameters, self).get_IncludedRanges()
    def putref_IncludedRanges(self, ppRanges):
        '''Method IDefineNoDataParameters.putref_IncludedRanges

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IDefineNoDataParameters, self).putref_IncludedRanges(ppRanges)
    def get_NoDataValues(self):
        '''Method IDefineNoDataParameters.get_NoDataValues

           OUTPUT
            ppValues            : IStringArray**'''
        return super(IDefineNoDataParameters, self).get_NoDataValues()
    def putref_NoDataValues(self, ppValues):
        '''Method IDefineNoDataParameters.putref_NoDataValues

           INPUT
            ppValues            : IStringArray*'''
        return super(IDefineNoDataParameters, self).putref_NoDataValues(ppValues)
    IncludedRanges = property(get_IncludedRanges, putref_IncludedRanges, None)
    NoDataValues = property(get_NoDataValues, putref_NoDataValues, None)

class IDefineNoDataParameters2(_esriDataSourcesRaster.IDefineNoDataParameters2):
    _IID = uuid.UUID('46e8419e-07ab-40cc-8a5d-8566f8c8918d')

    def __init__(self, *args, **kw):
        super(IDefineNoDataParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_NoDataInterpretation(self):
        '''Method IDefineNoDataParameters2.get_NoDataInterpretation

           OUTPUT
            pNoDataInterpretation: esriNoDataInterpretation*'''
        return super(IDefineNoDataParameters2, self).get_NoDataInterpretation()
    def put_NoDataInterpretation(self, pNoDataInterpretation):
        '''Method IDefineNoDataParameters2.put_NoDataInterpretation

           INPUT
            pNoDataInterpretation: esriNoDataInterpretation'''
        return super(IDefineNoDataParameters2, self).put_NoDataInterpretation(pNoDataInterpretation)
    def get_IncludedRanges(self):
        '''Method IDefineNoDataParameters.get_IncludedRanges (from IDefineNoDataParameters)

           OUTPUT
            ppRanges            : IDoubleArray**'''
        return super(IDefineNoDataParameters2, self).get_IncludedRanges()
    def putref_IncludedRanges(self, ppRanges):
        '''Method IDefineNoDataParameters.putref_IncludedRanges (from IDefineNoDataParameters)

           INPUT
            ppRanges            : IDoubleArray*'''
        return super(IDefineNoDataParameters2, self).putref_IncludedRanges(ppRanges)
    def get_NoDataValues(self):
        '''Method IDefineNoDataParameters.get_NoDataValues (from IDefineNoDataParameters)

           OUTPUT
            ppValues            : IStringArray**'''
        return super(IDefineNoDataParameters2, self).get_NoDataValues()
    def putref_NoDataValues(self, ppValues):
        '''Method IDefineNoDataParameters.putref_NoDataValues (from IDefineNoDataParameters)

           INPUT
            ppValues            : IStringArray*'''
        return super(IDefineNoDataParameters2, self).putref_NoDataValues(ppValues)
    IncludedRanges = property(get_IncludedRanges, putref_IncludedRanges, None)
    NoDataInterpretation = property(get_NoDataInterpretation, put_NoDataInterpretation, None)
    NoDataValues = property(get_NoDataValues, putref_NoDataValues, None)

class IComputeDirtyAreaParameters(_esriDataSourcesRaster.IComputeDirtyAreaParameters):
    _IID = uuid.UUID('8952c566-4515-4e70-b6ab-4abab0c633f1')

    def __init__(self, *args, **kw):
        super(IComputeDirtyAreaParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_TimeStamp(self, pTimeStamp):
        '''Method IComputeDirtyAreaParameters.put_TimeStamp

           INPUT
            pTimeStamp          : DATE'''
        return super(IComputeDirtyAreaParameters, self).put_TimeStamp(pTimeStamp)
    def get_TimeStamp(self):
        '''Method IComputeDirtyAreaParameters.get_TimeStamp

           OUTPUT
            pTimeStamp          : DATE*'''
        return super(IComputeDirtyAreaParameters, self).get_TimeStamp()
    def putref_ComputedDirtyArea(self, ppComputedDirtyArea):
        '''Method IComputeDirtyAreaParameters.putref_ComputedDirtyArea

           INPUT
            ppComputedDirtyArea : IGeometry*'''
        return super(IComputeDirtyAreaParameters, self).putref_ComputedDirtyArea(ppComputedDirtyArea)
    def get_ComputedDirtyArea(self):
        '''Method IComputeDirtyAreaParameters.get_ComputedDirtyArea

           OUTPUT
            ppComputedDirtyArea : IGeometry**'''
        return super(IComputeDirtyAreaParameters, self).get_ComputedDirtyArea()
    ComputedDirtyArea = property(get_ComputedDirtyArea, putref_ComputedDirtyArea, None)
    TimeStamp = property(get_TimeStamp, put_TimeStamp, None)

class IBuildFootprintsParameters(_esriDataSourcesRaster.IBuildFootprintsParameters):
    _IID = uuid.UUID('9f80035d-a4e5-4d7e-af00-9bf94ed5c4b2')

    def __init__(self, *args, **kw):
        super(IBuildFootprintsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Method(self, Method):
        '''Method IBuildFootprintsParameters.put_Method

           INPUT
            Method              : esriBuildFootprintsMethods'''
        return super(IBuildFootprintsParameters, self).put_Method(Method)
    def get_Method(self):
        '''Method IBuildFootprintsParameters.get_Method

           OUTPUT
            Method              : esriBuildFootprintsMethods*'''
        return super(IBuildFootprintsParameters, self).get_Method()
    Method = property(get_Method, put_Method, None)

class IBuildFootprintsParameters2(_esriDataSourcesRaster.IBuildFootprintsParameters2):
    _IID = uuid.UUID('74648190-ba1d-499b-97e1-7bad62ae4357')

    def __init__(self, *args, **kw):
        super(IBuildFootprintsParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FootprintSimplificationMethod(self, pSimplificationMethod):
        '''Method IBuildFootprintsParameters2.put_FootprintSimplificationMethod

           INPUT
            pSimplificationMethod: esriGeometrySimplificationMethod'''
        return super(IBuildFootprintsParameters2, self).put_FootprintSimplificationMethod(pSimplificationMethod)
    def get_FootprintSimplificationMethod(self):
        '''Method IBuildFootprintsParameters2.get_FootprintSimplificationMethod

           OUTPUT
            pSimplificationMethod: esriGeometrySimplificationMethod*'''
        return super(IBuildFootprintsParameters2, self).get_FootprintSimplificationMethod()
    def put_Method(self, Method):
        '''Method IBuildFootprintsParameters.put_Method (from IBuildFootprintsParameters)

           INPUT
            Method              : esriBuildFootprintsMethods'''
        return super(IBuildFootprintsParameters2, self).put_Method(Method)
    def get_Method(self):
        '''Method IBuildFootprintsParameters.get_Method (from IBuildFootprintsParameters)

           OUTPUT
            Method              : esriBuildFootprintsMethods*'''
        return super(IBuildFootprintsParameters2, self).get_Method()
    FootprintSimplificationMethod = property(get_FootprintSimplificationMethod, put_FootprintSimplificationMethod, None)
    Method = property(get_Method, put_Method, None)

class IBuildFootprintsByRadiometryParameters(_esriDataSourcesRaster.IBuildFootprintsByRadiometryParameters):
    _IID = uuid.UUID('a32544a5-baba-47d6-b3a8-ed87afe334f6')

    def __init__(self, *args, **kw):
        super(IBuildFootprintsByRadiometryParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_MinimumValidDataValue(self, pMinimumDataValue):
        '''Method IBuildFootprintsByRadiometryParameters.put_MinimumValidDataValue

           INPUT
            pMinimumDataValue   : double'''
        return super(IBuildFootprintsByRadiometryParameters, self).put_MinimumValidDataValue(pMinimumDataValue)
    def get_MinimumValidDataValue(self):
        '''Method IBuildFootprintsByRadiometryParameters.get_MinimumValidDataValue

           OUTPUT
            pMinimumDataValue   : double*'''
        return super(IBuildFootprintsByRadiometryParameters, self).get_MinimumValidDataValue()
    def put_MaximumValidDataValue(self, pMaximumDataValue):
        '''Method IBuildFootprintsByRadiometryParameters.put_MaximumValidDataValue

           INPUT
            pMaximumDataValue   : double'''
        return super(IBuildFootprintsByRadiometryParameters, self).put_MaximumValidDataValue(pMaximumDataValue)
    def get_MaximumValidDataValue(self):
        '''Method IBuildFootprintsByRadiometryParameters.get_MaximumValidDataValue

           OUTPUT
            pMaximumDataValue   : double*'''
        return super(IBuildFootprintsByRadiometryParameters, self).get_MaximumValidDataValue()
    def put_RequestSize(self, pRequestSize):
        '''Method IBuildFootprintsByRadiometryParameters.put_RequestSize

           INPUT
            pRequestSize        : long'''
        return super(IBuildFootprintsByRadiometryParameters, self).put_RequestSize(pRequestSize)
    def get_RequestSize(self):
        '''Method IBuildFootprintsByRadiometryParameters.get_RequestSize

           OUTPUT
            pRequestSize        : long*'''
        return super(IBuildFootprintsByRadiometryParameters, self).get_RequestSize()
    def put_MaximumVertices(self, pMaximumVertices):
        '''Method IBuildFootprintsByRadiometryParameters.put_MaximumVertices

           INPUT
            pMaximumVertices    : long'''
        return super(IBuildFootprintsByRadiometryParameters, self).put_MaximumVertices(pMaximumVertices)
    def get_MaximumVertices(self):
        '''Method IBuildFootprintsByRadiometryParameters.get_MaximumVertices

           OUTPUT
            pMaximumVertices    : long*'''
        return super(IBuildFootprintsByRadiometryParameters, self).get_MaximumVertices()
    def put_MinimumRegionSize(self, pMinimumRegionSize):
        '''Method IBuildFootprintsByRadiometryParameters.put_MinimumRegionSize

           INPUT
            pMinimumRegionSize  : long'''
        return super(IBuildFootprintsByRadiometryParameters, self).put_MinimumRegionSize(pMinimumRegionSize)
    def get_MinimumRegionSize(self):
        '''Method IBuildFootprintsByRadiometryParameters.get_MinimumRegionSize

           OUTPUT
            pMinimumRegionSize  : long*'''
        return super(IBuildFootprintsByRadiometryParameters, self).get_MinimumRegionSize()
    MaximumValidDataValue = property(get_MaximumValidDataValue, put_MaximumValidDataValue, None)
    MaximumVertices = property(get_MaximumVertices, put_MaximumVertices, None)
    MinimumRegionSize = property(get_MinimumRegionSize, put_MinimumRegionSize, None)
    MinimumValidDataValue = property(get_MinimumValidDataValue, put_MinimumValidDataValue, None)
    RequestSize = property(get_RequestSize, put_RequestSize, None)

class IBuildFootprintsByGeometryParameters(_esriDataSourcesRaster.IBuildFootprintsByGeometryParameters):
    _IID = uuid.UUID('79d6fe35-a7f6-4975-84ec-ea08d359864d')

    def __init__(self, *args, **kw):
        super(IBuildFootprintsByGeometryParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_MaximumVertices(self, pMaximumVertices):
        '''Method IBuildFootprintsByGeometryParameters.put_MaximumVertices

           INPUT
            pMaximumVertices    : long'''
        return super(IBuildFootprintsByGeometryParameters, self).put_MaximumVertices(pMaximumVertices)
    def get_MaximumVertices(self):
        '''Method IBuildFootprintsByGeometryParameters.get_MaximumVertices

           OUTPUT
            pMaximumVertices    : long*'''
        return super(IBuildFootprintsByGeometryParameters, self).get_MaximumVertices()
    MaximumVertices = property(get_MaximumVertices, put_MaximumVertices, None)

class IBuildFootprintsByShrinkingParameters(_esriDataSourcesRaster.IBuildFootprintsByShrinkingParameters):
    _IID = uuid.UUID('61988965-736b-42c2-86c8-0d989995e82f')

    def __init__(self, *args, **kw):
        super(IBuildFootprintsByShrinkingParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ShrinkDistance(self, pShrinkDistance):
        '''Method IBuildFootprintsByShrinkingParameters.put_ShrinkDistance

           INPUT
            pShrinkDistance     : double'''
        return super(IBuildFootprintsByShrinkingParameters, self).put_ShrinkDistance(pShrinkDistance)
    def get_ShrinkDistance(self):
        '''Method IBuildFootprintsByShrinkingParameters.get_ShrinkDistance

           OUTPUT
            pShrinkDistance     : double*'''
        return super(IBuildFootprintsByShrinkingParameters, self).get_ShrinkDistance()
    def put_SnapEdgesTolerance(self, pTolerance):
        '''Method IBuildFootprintsByShrinkingParameters.put_SnapEdgesTolerance

           INPUT
            pTolerance          : double'''
        return super(IBuildFootprintsByShrinkingParameters, self).put_SnapEdgesTolerance(pTolerance)
    def get_SnapEdgesTolerance(self):
        '''Method IBuildFootprintsByShrinkingParameters.get_SnapEdgesTolerance

           OUTPUT
            pTolerance          : double*'''
        return super(IBuildFootprintsByShrinkingParameters, self).get_SnapEdgesTolerance()
    def put_SnapEdgesToleranceInPixels(self, pToleranceInPixels):
        '''Method IBuildFootprintsByShrinkingParameters.put_SnapEdgesToleranceInPixels

           INPUT
            pToleranceInPixels  : long'''
        return super(IBuildFootprintsByShrinkingParameters, self).put_SnapEdgesToleranceInPixels(pToleranceInPixels)
    def get_SnapEdgesToleranceInPixels(self):
        '''Method IBuildFootprintsByShrinkingParameters.get_SnapEdgesToleranceInPixels

           OUTPUT
            pToleranceInPixels  : long*'''
        return super(IBuildFootprintsByShrinkingParameters, self).get_SnapEdgesToleranceInPixels()
    ShrinkDistance = property(get_ShrinkDistance, put_ShrinkDistance, None)
    SnapEdgesTolerance = property(get_SnapEdgesTolerance, put_SnapEdgesTolerance, None)
    SnapEdgesToleranceInPixels = property(get_SnapEdgesToleranceInPixels, put_SnapEdgesToleranceInPixels, None)

class IFrameCameraParameters(_esriDataSourcesRaster.IFrameCameraParameters):
    _IID = uuid.UUID('3527133d-1c63-4211-80c9-8444b1669c47')

    def __init__(self, *args, **kw):
        super(IFrameCameraParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CameraModel(self, pVal):
        '''Method IFrameCameraParameters.put_CameraModel

           INPUT
            pVal                : esriApplanixCameraModel'''
        return super(IFrameCameraParameters, self).put_CameraModel(pVal)
    def get_CameraModel(self):
        '''Method IFrameCameraParameters.get_CameraModel

           OUTPUT
            pVal                : esriApplanixCameraModel*'''
        return super(IFrameCameraParameters, self).get_CameraModel()
    def put_FocalLength(self, pFocalLength):
        '''Method IFrameCameraParameters.put_FocalLength

           INPUT
            pFocalLength        : double'''
        return super(IFrameCameraParameters, self).put_FocalLength(pFocalLength)
    def get_FocalLength(self):
        '''Method IFrameCameraParameters.get_FocalLength

           OUTPUT
            pFocalLength        : double*'''
        return super(IFrameCameraParameters, self).get_FocalLength()
    def put_FocalLengthUnits(self, pVal):
        '''Method IFrameCameraParameters.put_FocalLengthUnits

           INPUT
            pVal                : esriFrameCameraUnits'''
        return super(IFrameCameraParameters, self).put_FocalLengthUnits(pVal)
    def get_FocalLengthUnits(self):
        '''Method IFrameCameraParameters.get_FocalLengthUnits

           OUTPUT
            pVal                : esriFrameCameraUnits*'''
        return super(IFrameCameraParameters, self).get_FocalLengthUnits()
    def put_PPAX(self, pPpax):
        '''Method IFrameCameraParameters.put_PPAX

           INPUT
            pPpax               : double'''
        return super(IFrameCameraParameters, self).put_PPAX(pPpax)
    def get_PPAX(self):
        '''Method IFrameCameraParameters.get_PPAX

           OUTPUT
            pPpax               : double*'''
        return super(IFrameCameraParameters, self).get_PPAX()
    def put_PPAXUnits(self, pVal):
        '''Method IFrameCameraParameters.put_PPAXUnits

           INPUT
            pVal                : esriFrameCameraUnits'''
        return super(IFrameCameraParameters, self).put_PPAXUnits(pVal)
    def get_PPAXUnits(self):
        '''Method IFrameCameraParameters.get_PPAXUnits

           OUTPUT
            pVal                : esriFrameCameraUnits*'''
        return super(IFrameCameraParameters, self).get_PPAXUnits()
    def put_PPAY(self, pPpay):
        '''Method IFrameCameraParameters.put_PPAY

           INPUT
            pPpay               : double'''
        return super(IFrameCameraParameters, self).put_PPAY(pPpay)
    def get_PPAY(self):
        '''Method IFrameCameraParameters.get_PPAY

           OUTPUT
            pPpay               : double*'''
        return super(IFrameCameraParameters, self).get_PPAY()
    def put_PPAYUnits(self, pVal):
        '''Method IFrameCameraParameters.put_PPAYUnits

           INPUT
            pVal                : esriFrameCameraUnits'''
        return super(IFrameCameraParameters, self).put_PPAYUnits(pVal)
    def get_PPAYUnits(self):
        '''Method IFrameCameraParameters.get_PPAYUnits

           OUTPUT
            pVal                : esriFrameCameraUnits*'''
        return super(IFrameCameraParameters, self).get_PPAYUnits()
    def put_DistortionType(self, pVal):
        '''Method IFrameCameraParameters.put_DistortionType

           INPUT
            pVal                : esriDistortionType'''
        return super(IFrameCameraParameters, self).put_DistortionType(pVal)
    def get_DistortionType(self):
        '''Method IFrameCameraParameters.get_DistortionType

           OUTPUT
            pVal                : esriDistortionType*'''
        return super(IFrameCameraParameters, self).get_DistortionType()
    def put_DistortionMethod(self, pVal):
        '''Method IFrameCameraParameters.put_DistortionMethod

           INPUT
            pVal                : esriRasterKonradyType'''
        return super(IFrameCameraParameters, self).put_DistortionMethod(pVal)
    def get_DistortionMethod(self):
        '''Method IFrameCameraParameters.get_DistortionMethod

           OUTPUT
            pVal                : esriRasterKonradyType*'''
        return super(IFrameCameraParameters, self).get_DistortionMethod()
    def put_K0(self, pK0):
        '''Method IFrameCameraParameters.put_K0

           INPUT
            pK0                 : double'''
        return super(IFrameCameraParameters, self).put_K0(pK0)
    def get_K0(self):
        '''Method IFrameCameraParameters.get_K0

           OUTPUT
            pK0                 : double*'''
        return super(IFrameCameraParameters, self).get_K0()
    def put_K1(self, pK1):
        '''Method IFrameCameraParameters.put_K1

           INPUT
            pK1                 : double'''
        return super(IFrameCameraParameters, self).put_K1(pK1)
    def get_K1(self):
        '''Method IFrameCameraParameters.get_K1

           OUTPUT
            pK1                 : double*'''
        return super(IFrameCameraParameters, self).get_K1()
    def put_K2(self, pK2):
        '''Method IFrameCameraParameters.put_K2

           INPUT
            pK2                 : double'''
        return super(IFrameCameraParameters, self).put_K2(pK2)
    def get_K2(self):
        '''Method IFrameCameraParameters.get_K2

           OUTPUT
            pK2                 : double*'''
        return super(IFrameCameraParameters, self).get_K2()
    def putref_RadialDistances(self, pDistances):
        '''Method IFrameCameraParameters.putref_RadialDistances

           INPUT
            pDistances          : IDoubleArray*'''
        return super(IFrameCameraParameters, self).putref_RadialDistances(pDistances)
    def get_RadialDistances(self):
        '''Method IFrameCameraParameters.get_RadialDistances

           OUTPUT
            pDistances          : IDoubleArray**'''
        return super(IFrameCameraParameters, self).get_RadialDistances()
    def putref_RadialDistortions(self, pDistortions):
        '''Method IFrameCameraParameters.putref_RadialDistortions

           INPUT
            pDistortions        : IDoubleArray*'''
        return super(IFrameCameraParameters, self).putref_RadialDistortions(pDistortions)
    def get_RadialDistortions(self):
        '''Method IFrameCameraParameters.get_RadialDistortions

           OUTPUT
            pDistortions        : IDoubleArray**'''
        return super(IFrameCameraParameters, self).get_RadialDistortions()
    def put_Columns(self, pCols):
        '''Method IFrameCameraParameters.put_Columns

           INPUT
            pCols               : long'''
        return super(IFrameCameraParameters, self).put_Columns(pCols)
    def get_Columns(self):
        '''Method IFrameCameraParameters.get_Columns

           OUTPUT
            pCols               : long*'''
        return super(IFrameCameraParameters, self).get_Columns()
    def put_Rows(self, pRows):
        '''Method IFrameCameraParameters.put_Rows

           INPUT
            pRows               : long'''
        return super(IFrameCameraParameters, self).put_Rows(pRows)
    def get_Rows(self):
        '''Method IFrameCameraParameters.get_Rows

           OUTPUT
            pRows               : long*'''
        return super(IFrameCameraParameters, self).get_Rows()
    def put_PixelSize(self, pPixelSize):
        '''Method IFrameCameraParameters.put_PixelSize

           INPUT
            pPixelSize          : double'''
        return super(IFrameCameraParameters, self).put_PixelSize(pPixelSize)
    def get_PixelSize(self):
        '''Method IFrameCameraParameters.get_PixelSize

           OUTPUT
            pPixelSize          : double*'''
        return super(IFrameCameraParameters, self).get_PixelSize()
    CameraModel = property(get_CameraModel, put_CameraModel, None)
    Columns = property(get_Columns, put_Columns, None)
    DistortionMethod = property(get_DistortionMethod, put_DistortionMethod, None)
    DistortionType = property(get_DistortionType, put_DistortionType, None)
    FocalLength = property(get_FocalLength, put_FocalLength, None)
    FocalLengthUnits = property(get_FocalLengthUnits, put_FocalLengthUnits, None)
    K0 = property(get_K0, put_K0, None)
    K1 = property(get_K1, put_K1, None)
    K2 = property(get_K2, put_K2, None)
    PPAX = property(get_PPAX, put_PPAX, None)
    PPAXUnits = property(get_PPAXUnits, put_PPAXUnits, None)
    PPAY = property(get_PPAY, put_PPAY, None)
    PPAYUnits = property(get_PPAYUnits, put_PPAYUnits, None)
    PixelSize = property(get_PixelSize, put_PixelSize, None)
    RadialDistances = property(get_RadialDistances, putref_RadialDistances, None)
    RadialDistortions = property(get_RadialDistortions, putref_RadialDistortions, None)
    Rows = property(get_Rows, put_Rows, None)

class IApplanixBuilder(_esriDataSourcesRaster.IApplanixBuilder):
    _IID = uuid.UUID('646616cf-75ce-48dc-85e6-b1da9f76be9f')

    def __init__(self, *args, **kw):
        super(IApplanixBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ImageFolder(self, pImageFolder):
        '''Method IApplanixBuilder.put_ImageFolder

           INPUT
            pImageFolder        : BSTR'''
        return super(IApplanixBuilder, self).put_ImageFolder(pImageFolder)
    def get_ImageFolder(self):
        '''Method IApplanixBuilder.get_ImageFolder

           OUTPUT
            pImageFolder        : BSTR*'''
        return super(IApplanixBuilder, self).get_ImageFolder()
    ImageFolder = property(get_ImageFolder, put_ImageFolder, None)

class IISATBuilder(_esriDataSourcesRaster.IISATBuilder):
    _IID = uuid.UUID('b99c3340-573b-4b45-9f27-6671c4f5517f')

    def __init__(self, *args, **kw):
        super(IISATBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_PhotoFile(self, ppPhFilePath):
        '''Method IISATBuilder.put_PhotoFile

           INPUT
            ppPhFilePath        : BSTR'''
        return super(IISATBuilder, self).put_PhotoFile(ppPhFilePath)
    def get_PhotoFile(self):
        '''Method IISATBuilder.get_PhotoFile

           OUTPUT
            ppPhFilePath        : BSTR*'''
        return super(IISATBuilder, self).get_PhotoFile()
    def put_CameraFile(self, ppCamFilePath):
        '''Method IISATBuilder.put_CameraFile

           INPUT
            ppCamFilePath       : BSTR'''
        return super(IISATBuilder, self).put_CameraFile(ppCamFilePath)
    def get_CameraFile(self):
        '''Method IISATBuilder.get_CameraFile

           OUTPUT
            ppCamFilePath       : BSTR*'''
        return super(IISATBuilder, self).get_CameraFile()
    CameraFile = property(get_CameraFile, put_CameraFile, None)
    PhotoFile = property(get_PhotoFile, put_PhotoFile, None)

class ILasBuilder(_esriDataSourcesRaster.ILasBuilder):
    _IID = uuid.UUID('a30db5db-fb72-40a9-8ff0-f493d09ce949')

    def __init__(self, *args, **kw):
        super(ILasBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FolderAsDataset(self, pbFolderAsDataset):
        '''Method ILasBuilder.put_FolderAsDataset

           INPUT
            pbFolderAsDataset   : VARIANT_BOOL'''
        return super(ILasBuilder, self).put_FolderAsDataset(pbFolderAsDataset)
    def get_FolderAsDataset(self):
        '''Method ILasBuilder.get_FolderAsDataset

           OUTPUT
            pbFolderAsDataset   : VARIANT_BOOL*'''
        return super(ILasBuilder, self).get_FolderAsDataset()
    def put_ZFactor(self, pZfactor):
        '''Method ILasBuilder.put_ZFactor

           INPUT
            pZfactor            : double'''
        return super(ILasBuilder, self).put_ZFactor(pZfactor)
    def get_ZFactor(self):
        '''Method ILasBuilder.get_ZFactor

           OUTPUT
            pZfactor            : double*'''
        return super(ILasBuilder, self).get_ZFactor()
    def putref_LasToRasterArguments(self, ppLasToRasterFunctionArgs):
        '''Method ILasBuilder.putref_LasToRasterArguments

           INPUT
            ppLasToRasterFunctionArgs: ILasToRasterFunctionArguments*'''
        return super(ILasBuilder, self).putref_LasToRasterArguments(ppLasToRasterFunctionArgs)
    def get_LasToRasterArguments(self):
        '''Method ILasBuilder.get_LasToRasterArguments

           OUTPUT
            ppLasToRasterFunctionArgs: ILasToRasterFunctionArguments**'''
        return super(ILasBuilder, self).get_LasToRasterArguments()
    FolderAsDataset = property(get_FolderAsDataset, put_FolderAsDataset, None)
    LasToRasterArguments = property(get_LasToRasterArguments, putref_LasToRasterArguments, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class ITerrainBuilder(_esriDataSourcesRaster.ITerrainBuilder):
    _IID = uuid.UUID('4feaf55c-10cb-4b34-81af-d5788f231ec0')

    def __init__(self, *args, **kw):
        super(ITerrainBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_TerrainToRasterArguments(self, ppTerrainToRasterFunctionArgs):
        '''Method ITerrainBuilder.putref_TerrainToRasterArguments

           INPUT
            ppTerrainToRasterFunctionArgs: ITerrainToRasterFunctionArguments*'''
        return super(ITerrainBuilder, self).putref_TerrainToRasterArguments(ppTerrainToRasterFunctionArgs)
    def get_TerrainToRasterArguments(self):
        '''Method ITerrainBuilder.get_TerrainToRasterArguments

           OUTPUT
            ppTerrainToRasterFunctionArgs: ITerrainToRasterFunctionArguments**'''
        return super(ITerrainBuilder, self).get_TerrainToRasterArguments()
    TerrainToRasterArguments = property(get_TerrainToRasterArguments, putref_TerrainToRasterArguments, None)

class ILasDatasetBuilder(_esriDataSourcesRaster.ILasDatasetBuilder):
    _IID = uuid.UUID('7cf3433e-74bd-454a-b613-296361833acc')

    def __init__(self, *args, **kw):
        super(ILasDatasetBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ZFactor(self, pZfactor):
        '''Method ILasDatasetBuilder.put_ZFactor

           INPUT
            pZfactor            : double'''
        return super(ILasDatasetBuilder, self).put_ZFactor(pZfactor)
    def get_ZFactor(self):
        '''Method ILasDatasetBuilder.get_ZFactor

           OUTPUT
            pZfactor            : double*'''
        return super(ILasDatasetBuilder, self).get_ZFactor()
    def putref_LasDatasetToRasterArguments(self, ppLasDSToRasterFunctionArgs):
        '''Method ILasDatasetBuilder.putref_LasDatasetToRasterArguments

           INPUT
            ppLasDSToRasterFunctionArgs: ILasDatasetToRasterFunctionArguments*'''
        return super(ILasDatasetBuilder, self).putref_LasDatasetToRasterArguments(ppLasDSToRasterFunctionArgs)
    def get_LasDatasetToRasterArguments(self):
        '''Method ILasDatasetBuilder.get_LasDatasetToRasterArguments

           OUTPUT
            ppLasDSToRasterFunctionArgs: ILasDatasetToRasterFunctionArguments**'''
        return super(ILasDatasetBuilder, self).get_LasDatasetToRasterArguments()
    LasDatasetToRasterArguments = property(get_LasDatasetToRasterArguments, putref_LasDatasetToRasterArguments, None)
    ZFactor = property(get_ZFactor, put_ZFactor, None)

class IRadarBuilder(_esriDataSourcesRaster.IRadarBuilder):
    _IID = uuid.UUID('2f61da6d-5e2f-40a4-aec1-6992166eeaf4')

    def __init__(self, *args, **kw):
        super(IRadarBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_RadarCalibration(self, bCalibration):
        '''Method IRadarBuilder.put_RadarCalibration

           INPUT
            bCalibration        : esriRadarCalibration'''
        return super(IRadarBuilder, self).put_RadarCalibration(bCalibration)
    def get_RadarCalibration(self):
        '''Method IRadarBuilder.get_RadarCalibration

           OUTPUT
            bCalibration        : esriRadarCalibration*'''
        return super(IRadarBuilder, self).get_RadarCalibration()
    def put_RadarPolarization(self, bPolarization):
        '''Method IRadarBuilder.put_RadarPolarization

           INPUT
            bPolarization       : esriRadarPolarization'''
        return super(IRadarBuilder, self).put_RadarPolarization(bPolarization)
    def get_RadarPolarization(self):
        '''Method IRadarBuilder.get_RadarPolarization

           OUTPUT
            bPolarization       : esriRadarPolarization*'''
        return super(IRadarBuilder, self).get_RadarPolarization()
    RadarCalibration = property(get_RadarCalibration, put_RadarCalibration, None)
    RadarPolarization = property(get_RadarPolarization, put_RadarPolarization, None)

class IMatchATBuilder(_esriDataSourcesRaster.IMatchATBuilder):
    _IID = uuid.UUID('9f667b8f-b097-4f07-a99d-0b244e4994e1')

    def __init__(self, *args, **kw):
        super(IMatchATBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_CameraFile(self, ppCamFilePath):
        '''Method IMatchATBuilder.put_CameraFile

           INPUT
            ppCamFilePath       : BSTR'''
        return super(IMatchATBuilder, self).put_CameraFile(ppCamFilePath)
    def get_CameraFile(self):
        '''Method IMatchATBuilder.get_CameraFile

           OUTPUT
            ppCamFilePath       : BSTR*'''
        return super(IMatchATBuilder, self).get_CameraFile()
    CameraFile = property(get_CameraFile, put_CameraFile, None)

class ISeamlineTaskInfo(_esriDataSourcesRaster.ISeamlineTaskInfo):
    _IID = uuid.UUID('528269bf-e314-4fc5-adcc-2d6dbb812411')

    def __init__(self, *args, **kw):
        super(ISeamlineTaskInfo, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_ItemGeometry(self, ppItemGeometry):
        '''Method ISeamlineTaskInfo.putref_ItemGeometry

           INPUT
            ppItemGeometry      : IGeometry*'''
        return super(ISeamlineTaskInfo, self).putref_ItemGeometry(ppItemGeometry)
    def get_ItemGeometry(self):
        '''Method ISeamlineTaskInfo.get_ItemGeometry

           OUTPUT
            ppItemGeometry      : IGeometry**'''
        return super(ISeamlineTaskInfo, self).get_ItemGeometry()
    def put_ItemID(self, pItemID):
        '''Method ISeamlineTaskInfo.put_ItemID

           INPUT
            pItemID             : long'''
        return super(ISeamlineTaskInfo, self).put_ItemID(pItemID)
    def get_ItemID(self):
        '''Method ISeamlineTaskInfo.get_ItemID

           OUTPUT
            pItemID             : long*'''
        return super(ISeamlineTaskInfo, self).get_ItemID()
    def putref_CellSize(self, ppCellsize):
        '''Method ISeamlineTaskInfo.putref_CellSize

           INPUT
            ppCellsize          : IPoint*'''
        return super(ISeamlineTaskInfo, self).putref_CellSize(ppCellsize)
    def get_CellSize(self):
        '''Method ISeamlineTaskInfo.get_CellSize

           OUTPUT
            ppCellsize          : IPoint**'''
        return super(ISeamlineTaskInfo, self).get_CellSize()
    def putref_MosaicGeometry(self, ppMosaicGeometry):
        '''Method ISeamlineTaskInfo.putref_MosaicGeometry

           INPUT
            ppMosaicGeometry    : IGeometry*'''
        return super(ISeamlineTaskInfo, self).putref_MosaicGeometry(ppMosaicGeometry)
    def get_MosaicGeometry(self):
        '''Method ISeamlineTaskInfo.get_MosaicGeometry

           OUTPUT
            ppMosaicGeometry    : IGeometry**'''
        return super(ISeamlineTaskInfo, self).get_MosaicGeometry()
    def putref_MosaicItemIDs(self, ppMosaicItemIDs):
        '''Method ISeamlineTaskInfo.putref_MosaicItemIDs

           INPUT
            ppMosaicItemIDs     : IFIDSet*'''
        return super(ISeamlineTaskInfo, self).putref_MosaicItemIDs(ppMosaicItemIDs)
    def get_MosaicItemIDs(self):
        '''Method ISeamlineTaskInfo.get_MosaicItemIDs

           OUTPUT
            ppMosaicItemIDs     : IFIDSet**'''
        return super(ISeamlineTaskInfo, self).get_MosaicItemIDs()
    def putref_MosaicFunction(self, ppMosaicFunction):
        '''Method ISeamlineTaskInfo.putref_MosaicFunction

           INPUT
            ppMosaicFunction    : IMosaicFunction*'''
        return super(ISeamlineTaskInfo, self).putref_MosaicFunction(ppMosaicFunction)
    def get_MosaicFunction(self):
        '''Method ISeamlineTaskInfo.get_MosaicFunction

           OUTPUT
            ppMosaicFunction    : IMosaicFunction**'''
        return super(ISeamlineTaskInfo, self).get_MosaicFunction()
    def putref_DifferenceRaster(self, ppDifferenceRaster):
        '''Method ISeamlineTaskInfo.putref_DifferenceRaster

           INPUT
            ppDifferenceRaster  : IRaster*'''
        return super(ISeamlineTaskInfo, self).putref_DifferenceRaster(ppDifferenceRaster)
    def get_DifferenceRaster(self):
        '''Method ISeamlineTaskInfo.get_DifferenceRaster

           OUTPUT
            ppDifferenceRaster  : IRaster**'''
        return super(ISeamlineTaskInfo, self).get_DifferenceRaster()
    def putref_StartPoint(self, ppStartPoint):
        '''Method ISeamlineTaskInfo.putref_StartPoint

           INPUT
            ppStartPoint        : IPoint*'''
        return super(ISeamlineTaskInfo, self).putref_StartPoint(ppStartPoint)
    def get_StartPoint(self):
        '''Method ISeamlineTaskInfo.get_StartPoint

           OUTPUT
            ppStartPoint        : IPoint**'''
        return super(ISeamlineTaskInfo, self).get_StartPoint()
    def putref_EndPoint(self, ppEndPoint):
        '''Method ISeamlineTaskInfo.putref_EndPoint

           INPUT
            ppEndPoint          : IPoint*'''
        return super(ISeamlineTaskInfo, self).putref_EndPoint(ppEndPoint)
    def get_EndPoint(self):
        '''Method ISeamlineTaskInfo.get_EndPoint

           OUTPUT
            ppEndPoint          : IPoint**'''
        return super(ISeamlineTaskInfo, self).get_EndPoint()
    def get_RequestSize(self):
        '''Method ISeamlineTaskInfo.get_RequestSize

           OUTPUT
            pRequestSize        : long*'''
        return super(ISeamlineTaskInfo, self).get_RequestSize()
    def put_RequestSize(self, pRequestSize):
        '''Method ISeamlineTaskInfo.put_RequestSize

           INPUT
            pRequestSize        : long'''
        return super(ISeamlineTaskInfo, self).put_RequestSize(pRequestSize)
    CellSize = property(get_CellSize, putref_CellSize, None)
    DifferenceRaster = property(get_DifferenceRaster, putref_DifferenceRaster, None)
    EndPoint = property(get_EndPoint, putref_EndPoint, None)
    ItemGeometry = property(get_ItemGeometry, putref_ItemGeometry, None)
    ItemID = property(get_ItemID, put_ItemID, None)
    MosaicFunction = property(get_MosaicFunction, putref_MosaicFunction, None)
    MosaicGeometry = property(get_MosaicGeometry, putref_MosaicGeometry, None)
    MosaicItemIDs = property(get_MosaicItemIDs, putref_MosaicItemIDs, None)
    RequestSize = property(get_RequestSize, put_RequestSize, None)
    StartPoint = property(get_StartPoint, putref_StartPoint, None)

class ISeamlineTaskInfo2(_esriDataSourcesRaster.ISeamlineTaskInfo2):
    _IID = uuid.UUID('fa85970c-6c4c-43d6-800d-38cefcf8e842')

    def __init__(self, *args, **kw):
        super(ISeamlineTaskInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_ItemRaster(self, ppItemRaster):
        '''Method ISeamlineTaskInfo2.putref_ItemRaster

           INPUT
            ppItemRaster        : IRaster*'''
        return super(ISeamlineTaskInfo2, self).putref_ItemRaster(ppItemRaster)
    def get_ItemRaster(self):
        '''Method ISeamlineTaskInfo2.get_ItemRaster

           OUTPUT
            ppItemRaster        : IRaster**'''
        return super(ISeamlineTaskInfo2, self).get_ItemRaster()
    def putref_MosaicRaster(self, ppMosaicRaster):
        '''Method ISeamlineTaskInfo2.putref_MosaicRaster

           INPUT
            ppMosaicRaster      : IRaster*'''
        return super(ISeamlineTaskInfo2, self).putref_MosaicRaster(ppMosaicRaster)
    def get_MosaicRaster(self):
        '''Method ISeamlineTaskInfo2.get_MosaicRaster

           OUTPUT
            ppMosaicRaster      : IRaster**'''
        return super(ISeamlineTaskInfo2, self).get_MosaicRaster()
    def get_RequestSizeType(self):
        '''Method ISeamlineTaskInfo2.get_RequestSizeType

           OUTPUT
            pRequestSizeType    : esriRequestSizeType*'''
        return super(ISeamlineTaskInfo2, self).get_RequestSizeType()
    def put_RequestSizeType(self, pRequestSizeType):
        '''Method ISeamlineTaskInfo2.put_RequestSizeType

           INPUT
            pRequestSizeType    : esriRequestSizeType'''
        return super(ISeamlineTaskInfo2, self).put_RequestSizeType(pRequestSizeType)
    def putref_ItemGeometry(self, ppItemGeometry):
        '''Method ISeamlineTaskInfo.putref_ItemGeometry (from ISeamlineTaskInfo)

           INPUT
            ppItemGeometry      : IGeometry*'''
        return super(ISeamlineTaskInfo2, self).putref_ItemGeometry(ppItemGeometry)
    def get_ItemGeometry(self):
        '''Method ISeamlineTaskInfo.get_ItemGeometry (from ISeamlineTaskInfo)

           OUTPUT
            ppItemGeometry      : IGeometry**'''
        return super(ISeamlineTaskInfo2, self).get_ItemGeometry()
    def put_ItemID(self, pItemID):
        '''Method ISeamlineTaskInfo.put_ItemID (from ISeamlineTaskInfo)

           INPUT
            pItemID             : long'''
        return super(ISeamlineTaskInfo2, self).put_ItemID(pItemID)
    def get_ItemID(self):
        '''Method ISeamlineTaskInfo.get_ItemID (from ISeamlineTaskInfo)

           OUTPUT
            pItemID             : long*'''
        return super(ISeamlineTaskInfo2, self).get_ItemID()
    def putref_CellSize(self, ppCellsize):
        '''Method ISeamlineTaskInfo.putref_CellSize (from ISeamlineTaskInfo)

           INPUT
            ppCellsize          : IPoint*'''
        return super(ISeamlineTaskInfo2, self).putref_CellSize(ppCellsize)
    def get_CellSize(self):
        '''Method ISeamlineTaskInfo.get_CellSize (from ISeamlineTaskInfo)

           OUTPUT
            ppCellsize          : IPoint**'''
        return super(ISeamlineTaskInfo2, self).get_CellSize()
    def putref_MosaicGeometry(self, ppMosaicGeometry):
        '''Method ISeamlineTaskInfo.putref_MosaicGeometry (from ISeamlineTaskInfo)

           INPUT
            ppMosaicGeometry    : IGeometry*'''
        return super(ISeamlineTaskInfo2, self).putref_MosaicGeometry(ppMosaicGeometry)
    def get_MosaicGeometry(self):
        '''Method ISeamlineTaskInfo.get_MosaicGeometry (from ISeamlineTaskInfo)

           OUTPUT
            ppMosaicGeometry    : IGeometry**'''
        return super(ISeamlineTaskInfo2, self).get_MosaicGeometry()
    def putref_MosaicItemIDs(self, ppMosaicItemIDs):
        '''Method ISeamlineTaskInfo.putref_MosaicItemIDs (from ISeamlineTaskInfo)

           INPUT
            ppMosaicItemIDs     : IFIDSet*'''
        return super(ISeamlineTaskInfo2, self).putref_MosaicItemIDs(ppMosaicItemIDs)
    def get_MosaicItemIDs(self):
        '''Method ISeamlineTaskInfo.get_MosaicItemIDs (from ISeamlineTaskInfo)

           OUTPUT
            ppMosaicItemIDs     : IFIDSet**'''
        return super(ISeamlineTaskInfo2, self).get_MosaicItemIDs()
    def putref_MosaicFunction(self, ppMosaicFunction):
        '''Method ISeamlineTaskInfo.putref_MosaicFunction (from ISeamlineTaskInfo)

           INPUT
            ppMosaicFunction    : IMosaicFunction*'''
        return super(ISeamlineTaskInfo2, self).putref_MosaicFunction(ppMosaicFunction)
    def get_MosaicFunction(self):
        '''Method ISeamlineTaskInfo.get_MosaicFunction (from ISeamlineTaskInfo)

           OUTPUT
            ppMosaicFunction    : IMosaicFunction**'''
        return super(ISeamlineTaskInfo2, self).get_MosaicFunction()
    def putref_DifferenceRaster(self, ppDifferenceRaster):
        '''Method ISeamlineTaskInfo.putref_DifferenceRaster (from ISeamlineTaskInfo)

           INPUT
            ppDifferenceRaster  : IRaster*'''
        return super(ISeamlineTaskInfo2, self).putref_DifferenceRaster(ppDifferenceRaster)
    def get_DifferenceRaster(self):
        '''Method ISeamlineTaskInfo.get_DifferenceRaster (from ISeamlineTaskInfo)

           OUTPUT
            ppDifferenceRaster  : IRaster**'''
        return super(ISeamlineTaskInfo2, self).get_DifferenceRaster()
    def putref_StartPoint(self, ppStartPoint):
        '''Method ISeamlineTaskInfo.putref_StartPoint (from ISeamlineTaskInfo)

           INPUT
            ppStartPoint        : IPoint*'''
        return super(ISeamlineTaskInfo2, self).putref_StartPoint(ppStartPoint)
    def get_StartPoint(self):
        '''Method ISeamlineTaskInfo.get_StartPoint (from ISeamlineTaskInfo)

           OUTPUT
            ppStartPoint        : IPoint**'''
        return super(ISeamlineTaskInfo2, self).get_StartPoint()
    def putref_EndPoint(self, ppEndPoint):
        '''Method ISeamlineTaskInfo.putref_EndPoint (from ISeamlineTaskInfo)

           INPUT
            ppEndPoint          : IPoint*'''
        return super(ISeamlineTaskInfo2, self).putref_EndPoint(ppEndPoint)
    def get_EndPoint(self):
        '''Method ISeamlineTaskInfo.get_EndPoint (from ISeamlineTaskInfo)

           OUTPUT
            ppEndPoint          : IPoint**'''
        return super(ISeamlineTaskInfo2, self).get_EndPoint()
    def get_RequestSize(self):
        '''Method ISeamlineTaskInfo.get_RequestSize (from ISeamlineTaskInfo)

           OUTPUT
            pRequestSize        : long*'''
        return super(ISeamlineTaskInfo2, self).get_RequestSize()
    def put_RequestSize(self, pRequestSize):
        '''Method ISeamlineTaskInfo.put_RequestSize (from ISeamlineTaskInfo)

           INPUT
            pRequestSize        : long'''
        return super(ISeamlineTaskInfo2, self).put_RequestSize(pRequestSize)
    CellSize = property(get_CellSize, putref_CellSize, None)
    DifferenceRaster = property(get_DifferenceRaster, putref_DifferenceRaster, None)
    EndPoint = property(get_EndPoint, putref_EndPoint, None)
    ItemGeometry = property(get_ItemGeometry, putref_ItemGeometry, None)
    ItemID = property(get_ItemID, put_ItemID, None)
    ItemRaster = property(get_ItemRaster, putref_ItemRaster, None)
    MosaicFunction = property(get_MosaicFunction, putref_MosaicFunction, None)
    MosaicGeometry = property(get_MosaicGeometry, putref_MosaicGeometry, None)
    MosaicItemIDs = property(get_MosaicItemIDs, putref_MosaicItemIDs, None)
    MosaicRaster = property(get_MosaicRaster, putref_MosaicRaster, None)
    RequestSize = property(get_RequestSize, put_RequestSize, None)
    RequestSizeType = property(get_RequestSizeType, put_RequestSizeType, None)
    StartPoint = property(get_StartPoint, putref_StartPoint, None)

class ISeamlineModifier(_esriDataSourcesRaster.ISeamlineModifier):
    _IID = uuid.UUID('655e1cf3-c906-4ec9-8e92-289b9b256cb5')
    def Update(self, pSeamlineTaskInfo, pTrackCancel):
        '''Method ISeamlineModifier.Update

           INPUTS
            pSeamlineTaskInfo   : ISeamlineTaskInfo*
            pTrackCancel        : ITrackCancel*

           OUTPUT
            ppSeamlinePolygon   : IGeometry**'''
        return super(ISeamlineModifier, self).Update(pSeamlineTaskInfo, pTrackCancel)

class ISeamlineModifierInit(_esriDataSourcesRaster.ISeamlineModifierInit):
    _IID = uuid.UUID('edb2353c-3627-41bc-85c1-7436f98f3c21')

    def __init__(self, *args, **kw):
        super(ISeamlineModifierInit, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_MosaicDataset(self, ppMosaicDataset):
        '''Method ISeamlineModifierInit.putref_MosaicDataset

           INPUT
            ppMosaicDataset     : IMosaicDataset*'''
        return super(ISeamlineModifierInit, self).putref_MosaicDataset(ppMosaicDataset)
    def get_MosaicDataset(self):
        '''Method ISeamlineModifierInit.get_MosaicDataset

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(ISeamlineModifierInit, self).get_MosaicDataset()
    MosaicDataset = property(get_MosaicDataset, putref_MosaicDataset, None)

class IBuildSeamlinesParameters(_esriDataSourcesRaster.IBuildSeamlinesParameters):
    _IID = uuid.UUID('2448f092-cd7f-4629-9d60-1a33a2dd6ea5')

    def __init__(self, *args, **kw):
        super(IBuildSeamlinesParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_UpdateSeamlineOrder(self, pbUpdateSeamlineOrder):
        '''Method IBuildSeamlinesParameters.put_UpdateSeamlineOrder

           INPUT
            pbUpdateSeamlineOrder: VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters, self).put_UpdateSeamlineOrder(pbUpdateSeamlineOrder)
    def get_UpdateSeamlineOrder(self):
        '''Method IBuildSeamlinesParameters.get_UpdateSeamlineOrder

           OUTPUT
            pbUpdateSeamlineOrder: VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters, self).get_UpdateSeamlineOrder()
    def put_ModifySeamlines(self, pbModifySeamlines):
        '''Method IBuildSeamlinesParameters.put_ModifySeamlines

           INPUT
            pbModifySeamlines   : VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters, self).put_ModifySeamlines(pbModifySeamlines)
    def get_ModifySeamlines(self):
        '''Method IBuildSeamlinesParameters.get_ModifySeamlines

           OUTPUT
            pbModifySeamlines   : VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters, self).get_ModifySeamlines()
    def put_CellSizeClusterTolerance(self, pCellSizeClusterTolerance):
        '''Method IBuildSeamlinesParameters.put_CellSizeClusterTolerance

           INPUT
            pCellSizeClusterTolerance: double'''
        return super(IBuildSeamlinesParameters, self).put_CellSizeClusterTolerance(pCellSizeClusterTolerance)
    def get_CellSizeClusterTolerance(self):
        '''Method IBuildSeamlinesParameters.get_CellSizeClusterTolerance

           OUTPUT
            pCellSizeClusterTolerance: double*'''
        return super(IBuildSeamlinesParameters, self).get_CellSizeClusterTolerance()
    def putref_Cursor(self, pInputCursor):
        '''Method IBuildSeamlinesParameters.putref_Cursor

           INPUT
            pInputCursor        : ICursor*'''
        return super(IBuildSeamlinesParameters, self).putref_Cursor(pInputCursor)
    def get_Cursor(self):
        '''Method IBuildSeamlinesParameters.get_Cursor

           OUTPUT
            pInputCursor        : ICursor**'''
        return super(IBuildSeamlinesParameters, self).get_Cursor()
    def putref_DifferenceFunctionTemplate(self, ppDifferenceFunction):
        '''Method IBuildSeamlinesParameters.putref_DifferenceFunctionTemplate

           INPUT
            ppDifferenceFunction: IRasterFunctionTemplate*'''
        return super(IBuildSeamlinesParameters, self).putref_DifferenceFunctionTemplate(ppDifferenceFunction)
    def get_DifferenceFunctionTemplate(self):
        '''Method IBuildSeamlinesParameters.get_DifferenceFunctionTemplate

           OUTPUT
            ppDifferenceFunction: IRasterFunctionTemplate**'''
        return super(IBuildSeamlinesParameters, self).get_DifferenceFunctionTemplate()
    def putref_SeamlineModifier(self, ppSeamlineModifier):
        '''Method IBuildSeamlinesParameters.putref_SeamlineModifier

           INPUT
            ppSeamlineModifier  : ISeamlineModifier*'''
        return super(IBuildSeamlinesParameters, self).putref_SeamlineModifier(ppSeamlineModifier)
    def get_SeamlineModifier(self):
        '''Method IBuildSeamlinesParameters.get_SeamlineModifier

           OUTPUT
            ppSeamlineModifier  : ISeamlineModifier**'''
        return super(IBuildSeamlinesParameters, self).get_SeamlineModifier()
    CellSizeClusterTolerance = property(get_CellSizeClusterTolerance, put_CellSizeClusterTolerance, None)
    Cursor = property(get_Cursor, putref_Cursor, None)
    DifferenceFunctionTemplate = property(get_DifferenceFunctionTemplate, putref_DifferenceFunctionTemplate, None)
    ModifySeamlines = property(get_ModifySeamlines, put_ModifySeamlines, None)
    SeamlineModifier = property(get_SeamlineModifier, putref_SeamlineModifier, None)
    UpdateSeamlineOrder = property(get_UpdateSeamlineOrder, put_UpdateSeamlineOrder, None)

class IBuildSeamlinesParameters2(_esriDataSourcesRaster.IBuildSeamlinesParameters2):
    _IID = uuid.UUID('cb6dbc1b-4664-4748-a408-d2e5f8309873')

    def __init__(self, *args, **kw):
        super(IBuildSeamlinesParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_CellSizes(self, ppCellSizes):
        '''Method IBuildSeamlinesParameters2.putref_CellSizes

           INPUT
            ppCellSizes         : IDoubleArray*'''
        return super(IBuildSeamlinesParameters2, self).putref_CellSizes(ppCellSizes)
    def get_CellSizes(self):
        '''Method IBuildSeamlinesParameters2.get_CellSizes

           OUTPUT
            ppCellSizes         : IDoubleArray**'''
        return super(IBuildSeamlinesParameters2, self).get_CellSizes()
    def put_Method(self, pBuildSealineMethod):
        '''Method IBuildSeamlinesParameters2.put_Method

           INPUT
            pBuildSealineMethod : esriBuildSeamlinesMethod'''
        return super(IBuildSeamlinesParameters2, self).put_Method(pBuildSealineMethod)
    def get_Method(self):
        '''Method IBuildSeamlinesParameters2.get_Method

           OUTPUT
            pBuildSealineMethod : esriBuildSeamlinesMethod*'''
        return super(IBuildSeamlinesParameters2, self).get_Method()
    def put_SortMethod(self, pBuildSealineMethod):
        '''Method IBuildSeamlinesParameters2.put_SortMethod

           INPUT
            pBuildSealineMethod : esriMosaicMethod'''
        return super(IBuildSeamlinesParameters2, self).put_SortMethod(pBuildSealineMethod)
    def get_SortMethod(self):
        '''Method IBuildSeamlinesParameters2.get_SortMethod

           OUTPUT
            pBuildSealineMethod : esriMosaicMethod*'''
        return super(IBuildSeamlinesParameters2, self).get_SortMethod()
    def get_OrderByFieldName(self):
        '''Method IBuildSeamlinesParameters2.get_OrderByFieldName

           OUTPUT
            pName               : BSTR*'''
        return super(IBuildSeamlinesParameters2, self).get_OrderByFieldName()
    def put_OrderByFieldName(self, pName):
        '''Method IBuildSeamlinesParameters2.put_OrderByFieldName

           INPUT
            pName               : BSTR'''
        return super(IBuildSeamlinesParameters2, self).put_OrderByFieldName(pName)
    def get_OrderByBaseValue(self):
        '''Method IBuildSeamlinesParameters2.get_OrderByBaseValue

           OUTPUT
            pValue              : VARIANT*'''
        return super(IBuildSeamlinesParameters2, self).get_OrderByBaseValue()
    def put_OrderByBaseValue(self, pValue):
        '''Method IBuildSeamlinesParameters2.put_OrderByBaseValue

           INPUT
            pValue              : VARIANT'''
        return super(IBuildSeamlinesParameters2, self).put_OrderByBaseValue(pValue)
    def get_Ascending(self):
        '''Method IBuildSeamlinesParameters2.get_Ascending

           OUTPUT
            pAscending          : VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters2, self).get_Ascending()
    def put_Ascending(self, pAscending):
        '''Method IBuildSeamlinesParameters2.put_Ascending

           INPUT
            pAscending          : VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters2, self).put_Ascending(pAscending)
    def get_Viewpoint(self):
        '''Method IBuildSeamlinesParameters2.get_Viewpoint

           OUTPUT
            ppViewpoint         : IPoint**'''
        return super(IBuildSeamlinesParameters2, self).get_Viewpoint()
    def putref_Viewpoint(self, ppViewpoint):
        '''Method IBuildSeamlinesParameters2.putref_Viewpoint

           INPUT
            ppViewpoint         : IPoint*'''
        return super(IBuildSeamlinesParameters2, self).putref_Viewpoint(ppViewpoint)
    def get_BlendWidth(self):
        '''Method IBuildSeamlinesParameters2.get_BlendWidth

           OUTPUT
            pBlendWidth         : double*'''
        return super(IBuildSeamlinesParameters2, self).get_BlendWidth()
    def put_BlendWidth(self, pBlendWidth):
        '''Method IBuildSeamlinesParameters2.put_BlendWidth

           INPUT
            pBlendWidth         : double'''
        return super(IBuildSeamlinesParameters2, self).put_BlendWidth(pBlendWidth)
    def get_BlendType(self):
        '''Method IBuildSeamlinesParameters2.get_BlendType

           OUTPUT
            pBlendType          : esriBlendType*'''
        return super(IBuildSeamlinesParameters2, self).get_BlendType()
    def put_BlendType(self, pBlendType):
        '''Method IBuildSeamlinesParameters2.put_BlendType

           INPUT
            pBlendType          : esriBlendType'''
        return super(IBuildSeamlinesParameters2, self).put_BlendType(pBlendType)
    def get_RequestSize(self):
        '''Method IBuildSeamlinesParameters2.get_RequestSize

           OUTPUT
            pRequestSize        : long*'''
        return super(IBuildSeamlinesParameters2, self).get_RequestSize()
    def put_RequestSize(self, pRequestSize):
        '''Method IBuildSeamlinesParameters2.put_RequestSize

           INPUT
            pRequestSize        : long'''
        return super(IBuildSeamlinesParameters2, self).put_RequestSize(pRequestSize)
    def get_RequestSizeType(self):
        '''Method IBuildSeamlinesParameters2.get_RequestSizeType

           OUTPUT
            pRequestSizeType    : esriRequestSizeType*'''
        return super(IBuildSeamlinesParameters2, self).get_RequestSizeType()
    def put_RequestSizeType(self, pRequestSizeType):
        '''Method IBuildSeamlinesParameters2.put_RequestSizeType

           INPUT
            pRequestSizeType    : esriRequestSizeType'''
        return super(IBuildSeamlinesParameters2, self).put_RequestSizeType(pRequestSizeType)
    def put_UpdateSeamlineOrder(self, pbUpdateSeamlineOrder):
        '''Method IBuildSeamlinesParameters.put_UpdateSeamlineOrder (from IBuildSeamlinesParameters)

           INPUT
            pbUpdateSeamlineOrder: VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters2, self).put_UpdateSeamlineOrder(pbUpdateSeamlineOrder)
    def get_UpdateSeamlineOrder(self):
        '''Method IBuildSeamlinesParameters.get_UpdateSeamlineOrder (from IBuildSeamlinesParameters)

           OUTPUT
            pbUpdateSeamlineOrder: VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters2, self).get_UpdateSeamlineOrder()
    def put_ModifySeamlines(self, pbModifySeamlines):
        '''Method IBuildSeamlinesParameters.put_ModifySeamlines (from IBuildSeamlinesParameters)

           INPUT
            pbModifySeamlines   : VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters2, self).put_ModifySeamlines(pbModifySeamlines)
    def get_ModifySeamlines(self):
        '''Method IBuildSeamlinesParameters.get_ModifySeamlines (from IBuildSeamlinesParameters)

           OUTPUT
            pbModifySeamlines   : VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters2, self).get_ModifySeamlines()
    def put_CellSizeClusterTolerance(self, pCellSizeClusterTolerance):
        '''Method IBuildSeamlinesParameters.put_CellSizeClusterTolerance (from IBuildSeamlinesParameters)

           INPUT
            pCellSizeClusterTolerance: double'''
        return super(IBuildSeamlinesParameters2, self).put_CellSizeClusterTolerance(pCellSizeClusterTolerance)
    def get_CellSizeClusterTolerance(self):
        '''Method IBuildSeamlinesParameters.get_CellSizeClusterTolerance (from IBuildSeamlinesParameters)

           OUTPUT
            pCellSizeClusterTolerance: double*'''
        return super(IBuildSeamlinesParameters2, self).get_CellSizeClusterTolerance()
    def putref_Cursor(self, pInputCursor):
        '''Method IBuildSeamlinesParameters.putref_Cursor (from IBuildSeamlinesParameters)

           INPUT
            pInputCursor        : ICursor*'''
        return super(IBuildSeamlinesParameters2, self).putref_Cursor(pInputCursor)
    def get_Cursor(self):
        '''Method IBuildSeamlinesParameters.get_Cursor (from IBuildSeamlinesParameters)

           OUTPUT
            pInputCursor        : ICursor**'''
        return super(IBuildSeamlinesParameters2, self).get_Cursor()
    def putref_DifferenceFunctionTemplate(self, ppDifferenceFunction):
        '''Method IBuildSeamlinesParameters.putref_DifferenceFunctionTemplate (from IBuildSeamlinesParameters)

           INPUT
            ppDifferenceFunction: IRasterFunctionTemplate*'''
        return super(IBuildSeamlinesParameters2, self).putref_DifferenceFunctionTemplate(ppDifferenceFunction)
    def get_DifferenceFunctionTemplate(self):
        '''Method IBuildSeamlinesParameters.get_DifferenceFunctionTemplate (from IBuildSeamlinesParameters)

           OUTPUT
            ppDifferenceFunction: IRasterFunctionTemplate**'''
        return super(IBuildSeamlinesParameters2, self).get_DifferenceFunctionTemplate()
    def putref_SeamlineModifier(self, ppSeamlineModifier):
        '''Method IBuildSeamlinesParameters.putref_SeamlineModifier (from IBuildSeamlinesParameters)

           INPUT
            ppSeamlineModifier  : ISeamlineModifier*'''
        return super(IBuildSeamlinesParameters2, self).putref_SeamlineModifier(ppSeamlineModifier)
    def get_SeamlineModifier(self):
        '''Method IBuildSeamlinesParameters.get_SeamlineModifier (from IBuildSeamlinesParameters)

           OUTPUT
            ppSeamlineModifier  : ISeamlineModifier**'''
        return super(IBuildSeamlinesParameters2, self).get_SeamlineModifier()
    Ascending = property(get_Ascending, put_Ascending, None)
    BlendType = property(get_BlendType, put_BlendType, None)
    BlendWidth = property(get_BlendWidth, put_BlendWidth, None)
    CellSizeClusterTolerance = property(get_CellSizeClusterTolerance, put_CellSizeClusterTolerance, None)
    CellSizes = property(get_CellSizes, putref_CellSizes, None)
    Cursor = property(get_Cursor, putref_Cursor, None)
    DifferenceFunctionTemplate = property(get_DifferenceFunctionTemplate, putref_DifferenceFunctionTemplate, None)
    Method = property(get_Method, put_Method, None)
    ModifySeamlines = property(get_ModifySeamlines, put_ModifySeamlines, None)
    OrderByBaseValue = property(get_OrderByBaseValue, put_OrderByBaseValue, None)
    OrderByFieldName = property(get_OrderByFieldName, put_OrderByFieldName, None)
    RequestSize = property(get_RequestSize, put_RequestSize, None)
    RequestSizeType = property(get_RequestSizeType, put_RequestSizeType, None)
    SeamlineModifier = property(get_SeamlineModifier, putref_SeamlineModifier, None)
    SortMethod = property(get_SortMethod, put_SortMethod, None)
    UpdateSeamlineOrder = property(get_UpdateSeamlineOrder, put_UpdateSeamlineOrder, None)
    Viewpoint = property(get_Viewpoint, putref_Viewpoint, None)

class IQueryPathsParameters(_esriDataSourcesRaster.IQueryPathsParameters):
    _IID = uuid.UUID('437435d9-ef2e-4018-ae93-21d3a29643dd')

    def __init__(self, *args, **kw):
        super(IQueryPathsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_QueryDatasetPaths(self, pbQueryDatasetPaths):
        '''Method IQueryPathsParameters.put_QueryDatasetPaths

           INPUT
            pbQueryDatasetPaths : VARIANT_BOOL'''
        return super(IQueryPathsParameters, self).put_QueryDatasetPaths(pbQueryDatasetPaths)
    def get_QueryDatasetPaths(self):
        '''Method IQueryPathsParameters.get_QueryDatasetPaths

           OUTPUT
            pbQueryDatasetPaths : VARIANT_BOOL*'''
        return super(IQueryPathsParameters, self).get_QueryDatasetPaths()
    def put_QueryItemURIPaths(self, pbQueryURIPaths):
        '''Method IQueryPathsParameters.put_QueryItemURIPaths

           INPUT
            pbQueryURIPaths     : VARIANT_BOOL'''
        return super(IQueryPathsParameters, self).put_QueryItemURIPaths(pbQueryURIPaths)
    def get_QueryItemURIPaths(self):
        '''Method IQueryPathsParameters.get_QueryItemURIPaths

           OUTPUT
            pbQueryURIPaths     : VARIANT_BOOL*'''
        return super(IQueryPathsParameters, self).get_QueryItemURIPaths()
    def put_BrokenPathsOnly(self, pbBrokenOnly):
        '''Method IQueryPathsParameters.put_BrokenPathsOnly

           INPUT
            pbBrokenOnly        : VARIANT_BOOL'''
        return super(IQueryPathsParameters, self).put_BrokenPathsOnly(pbBrokenOnly)
    def get_BrokenPathsOnly(self):
        '''Method IQueryPathsParameters.get_BrokenPathsOnly

           OUTPUT
            pbBrokenOnly        : VARIANT_BOOL*'''
        return super(IQueryPathsParameters, self).get_BrokenPathsOnly()
    def put_FoldersOnly(self, pbFoldersOnly):
        '''Method IQueryPathsParameters.put_FoldersOnly

           INPUT
            pbFoldersOnly       : VARIANT_BOOL'''
        return super(IQueryPathsParameters, self).put_FoldersOnly(pbFoldersOnly)
    def get_FoldersOnly(self):
        '''Method IQueryPathsParameters.get_FoldersOnly

           OUTPUT
            pbFoldersOnly       : VARIANT_BOOL*'''
        return super(IQueryPathsParameters, self).get_FoldersOnly()
    def put_PathDepth(self, pPathDepth):
        '''Method IQueryPathsParameters.put_PathDepth

           INPUT
            pPathDepth          : long'''
        return super(IQueryPathsParameters, self).put_PathDepth(pPathDepth)
    def get_PathDepth(self):
        '''Method IQueryPathsParameters.get_PathDepth

           OUTPUT
            pPathDepth          : long*'''
        return super(IQueryPathsParameters, self).get_PathDepth()
    BrokenPathsOnly = property(get_BrokenPathsOnly, put_BrokenPathsOnly, None)
    FoldersOnly = property(get_FoldersOnly, put_FoldersOnly, None)
    PathDepth = property(get_PathDepth, put_PathDepth, None)
    QueryDatasetPaths = property(get_QueryDatasetPaths, put_QueryDatasetPaths, None)
    QueryItemURIPaths = property(get_QueryItemURIPaths, put_QueryItemURIPaths, None)

class IQueryPathsParameters2(_esriDataSourcesRaster.IQueryPathsParameters2):
    _IID = uuid.UUID('204481d8-b38b-4b7b-897a-c33d112f5574')

    def __init__(self, *args, **kw):
        super(IQueryPathsParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_QueryRasterTypePaths(self, pbQueryRasterTypePaths):
        '''Method IQueryPathsParameters2.put_QueryRasterTypePaths

           INPUT
            pbQueryRasterTypePaths: VARIANT_BOOL'''
        return super(IQueryPathsParameters2, self).put_QueryRasterTypePaths(pbQueryRasterTypePaths)
    def get_QueryRasterTypePaths(self):
        '''Method IQueryPathsParameters2.get_QueryRasterTypePaths

           OUTPUT
            pbQueryRasterTypePaths: VARIANT_BOOL*'''
        return super(IQueryPathsParameters2, self).get_QueryRasterTypePaths()
    def put_QueryCachePaths(self, pbQueryCachePaths):
        '''Method IQueryPathsParameters2.put_QueryCachePaths

           INPUT
            pbQueryCachePaths   : VARIANT_BOOL'''
        return super(IQueryPathsParameters2, self).put_QueryCachePaths(pbQueryCachePaths)
    def get_QueryCachePaths(self):
        '''Method IQueryPathsParameters2.get_QueryCachePaths

           OUTPUT
            pbQueryCachePaths   : VARIANT_BOOL*'''
        return super(IQueryPathsParameters2, self).get_QueryCachePaths()
    def put_QueryDatasetPaths(self, pbQueryDatasetPaths):
        '''Method IQueryPathsParameters.put_QueryDatasetPaths (from IQueryPathsParameters)

           INPUT
            pbQueryDatasetPaths : VARIANT_BOOL'''
        return super(IQueryPathsParameters2, self).put_QueryDatasetPaths(pbQueryDatasetPaths)
    def get_QueryDatasetPaths(self):
        '''Method IQueryPathsParameters.get_QueryDatasetPaths (from IQueryPathsParameters)

           OUTPUT
            pbQueryDatasetPaths : VARIANT_BOOL*'''
        return super(IQueryPathsParameters2, self).get_QueryDatasetPaths()
    def put_QueryItemURIPaths(self, pbQueryURIPaths):
        '''Method IQueryPathsParameters.put_QueryItemURIPaths (from IQueryPathsParameters)

           INPUT
            pbQueryURIPaths     : VARIANT_BOOL'''
        return super(IQueryPathsParameters2, self).put_QueryItemURIPaths(pbQueryURIPaths)
    def get_QueryItemURIPaths(self):
        '''Method IQueryPathsParameters.get_QueryItemURIPaths (from IQueryPathsParameters)

           OUTPUT
            pbQueryURIPaths     : VARIANT_BOOL*'''
        return super(IQueryPathsParameters2, self).get_QueryItemURIPaths()
    def put_BrokenPathsOnly(self, pbBrokenOnly):
        '''Method IQueryPathsParameters.put_BrokenPathsOnly (from IQueryPathsParameters)

           INPUT
            pbBrokenOnly        : VARIANT_BOOL'''
        return super(IQueryPathsParameters2, self).put_BrokenPathsOnly(pbBrokenOnly)
    def get_BrokenPathsOnly(self):
        '''Method IQueryPathsParameters.get_BrokenPathsOnly (from IQueryPathsParameters)

           OUTPUT
            pbBrokenOnly        : VARIANT_BOOL*'''
        return super(IQueryPathsParameters2, self).get_BrokenPathsOnly()
    def put_FoldersOnly(self, pbFoldersOnly):
        '''Method IQueryPathsParameters.put_FoldersOnly (from IQueryPathsParameters)

           INPUT
            pbFoldersOnly       : VARIANT_BOOL'''
        return super(IQueryPathsParameters2, self).put_FoldersOnly(pbFoldersOnly)
    def get_FoldersOnly(self):
        '''Method IQueryPathsParameters.get_FoldersOnly (from IQueryPathsParameters)

           OUTPUT
            pbFoldersOnly       : VARIANT_BOOL*'''
        return super(IQueryPathsParameters2, self).get_FoldersOnly()
    def put_PathDepth(self, pPathDepth):
        '''Method IQueryPathsParameters.put_PathDepth (from IQueryPathsParameters)

           INPUT
            pPathDepth          : long'''
        return super(IQueryPathsParameters2, self).put_PathDepth(pPathDepth)
    def get_PathDepth(self):
        '''Method IQueryPathsParameters.get_PathDepth (from IQueryPathsParameters)

           OUTPUT
            pPathDepth          : long*'''
        return super(IQueryPathsParameters2, self).get_PathDepth()
    BrokenPathsOnly = property(get_BrokenPathsOnly, put_BrokenPathsOnly, None)
    FoldersOnly = property(get_FoldersOnly, put_FoldersOnly, None)
    PathDepth = property(get_PathDepth, put_PathDepth, None)
    QueryCachePaths = property(get_QueryCachePaths, put_QueryCachePaths, None)
    QueryDatasetPaths = property(get_QueryDatasetPaths, put_QueryDatasetPaths, None)
    QueryItemURIPaths = property(get_QueryItemURIPaths, put_QueryItemURIPaths, None)
    QueryRasterTypePaths = property(get_QueryRasterTypePaths, put_QueryRasterTypePaths, None)

class IReplacePathsParameters(_esriDataSourcesRaster.IReplacePathsParameters):
    _IID = uuid.UUID('d9179edc-c88a-4b6f-818f-f53d83a05519')

    def __init__(self, *args, **kw):
        super(IReplacePathsParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ReplaceMosaicDatasetPaths(self, pbReplaceMosaicPaths):
        '''Method IReplacePathsParameters.put_ReplaceMosaicDatasetPaths

           INPUT
            pbReplaceMosaicPaths: VARIANT_BOOL'''
        return super(IReplacePathsParameters, self).put_ReplaceMosaicDatasetPaths(pbReplaceMosaicPaths)
    def get_ReplaceMosaicDatasetPaths(self):
        '''Method IReplacePathsParameters.get_ReplaceMosaicDatasetPaths

           OUTPUT
            pbReplaceMosaicPaths: VARIANT_BOOL*'''
        return super(IReplacePathsParameters, self).get_ReplaceMosaicDatasetPaths()
    def put_ReplaceCatalogItemPaths(self, pbReplaceCatalogPaths):
        '''Method IReplacePathsParameters.put_ReplaceCatalogItemPaths

           INPUT
            pbReplaceCatalogPaths: VARIANT_BOOL'''
        return super(IReplacePathsParameters, self).put_ReplaceCatalogItemPaths(pbReplaceCatalogPaths)
    def get_ReplaceCatalogItemPaths(self):
        '''Method IReplacePathsParameters.get_ReplaceCatalogItemPaths

           OUTPUT
            pbReplaceCatalogPaths: VARIANT_BOOL*'''
        return super(IReplacePathsParameters, self).get_ReplaceCatalogItemPaths()
    def put_ReplaceItemURIPaths(self, pbReplaceURIPaths):
        '''Method IReplacePathsParameters.put_ReplaceItemURIPaths

           INPUT
            pbReplaceURIPaths   : VARIANT_BOOL'''
        return super(IReplacePathsParameters, self).put_ReplaceItemURIPaths(pbReplaceURIPaths)
    def get_ReplaceItemURIPaths(self):
        '''Method IReplacePathsParameters.get_ReplaceItemURIPaths

           OUTPUT
            pbReplaceURIPaths   : VARIANT_BOOL*'''
        return super(IReplacePathsParameters, self).get_ReplaceItemURIPaths()
    def putref_OldPaths(self, ppPaths):
        '''Method IReplacePathsParameters.putref_OldPaths

           INPUT
            ppPaths             : IStringArray*'''
        return super(IReplacePathsParameters, self).putref_OldPaths(ppPaths)
    def get_OldPaths(self):
        '''Method IReplacePathsParameters.get_OldPaths

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IReplacePathsParameters, self).get_OldPaths()
    def putref_NewPaths(self, ppPaths):
        '''Method IReplacePathsParameters.putref_NewPaths

           INPUT
            ppPaths             : IStringArray*'''
        return super(IReplacePathsParameters, self).putref_NewPaths(ppPaths)
    def get_NewPaths(self):
        '''Method IReplacePathsParameters.get_NewPaths

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IReplacePathsParameters, self).get_NewPaths()
    NewPaths = property(get_NewPaths, putref_NewPaths, None)
    OldPaths = property(get_OldPaths, putref_OldPaths, None)
    ReplaceCatalogItemPaths = property(get_ReplaceCatalogItemPaths, put_ReplaceCatalogItemPaths, None)
    ReplaceItemURIPaths = property(get_ReplaceItemURIPaths, put_ReplaceItemURIPaths, None)
    ReplaceMosaicDatasetPaths = property(get_ReplaceMosaicDatasetPaths, put_ReplaceMosaicDatasetPaths, None)

class IReplacePathsParameters2(_esriDataSourcesRaster.IReplacePathsParameters2):
    _IID = uuid.UUID('8d43cb3f-8856-440c-a182-46e78843d80e')

    def __init__(self, *args, **kw):
        super(IReplacePathsParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ReplaceRasterTypePaths(self, pbReplaceRasterTypePaths):
        '''Method IReplacePathsParameters2.put_ReplaceRasterTypePaths

           INPUT
            pbReplaceRasterTypePaths: VARIANT_BOOL'''
        return super(IReplacePathsParameters2, self).put_ReplaceRasterTypePaths(pbReplaceRasterTypePaths)
    def get_ReplaceRasterTypePaths(self):
        '''Method IReplacePathsParameters2.get_ReplaceRasterTypePaths

           OUTPUT
            pbReplaceRasterTypePaths: VARIANT_BOOL*'''
        return super(IReplacePathsParameters2, self).get_ReplaceRasterTypePaths()
    def putref_RasterTypeInstanceIDs(self, ppRasterTypeInstanceIDs):
        '''Method IReplacePathsParameters2.putref_RasterTypeInstanceIDs

           INPUT
            ppRasterTypeInstanceIDs: IFIDSet*'''
        return super(IReplacePathsParameters2, self).putref_RasterTypeInstanceIDs(ppRasterTypeInstanceIDs)
    def get_RasterTypeInstanceIDs(self):
        '''Method IReplacePathsParameters2.get_RasterTypeInstanceIDs

           OUTPUT
            ppRasterTypeInstanceIDs: IFIDSet**'''
        return super(IReplacePathsParameters2, self).get_RasterTypeInstanceIDs()
    def put_ReplaceCachePaths(self, pbReplaceCachePaths):
        '''Method IReplacePathsParameters2.put_ReplaceCachePaths

           INPUT
            pbReplaceCachePaths : VARIANT_BOOL'''
        return super(IReplacePathsParameters2, self).put_ReplaceCachePaths(pbReplaceCachePaths)
    def get_ReplaceCachePaths(self):
        '''Method IReplacePathsParameters2.get_ReplaceCachePaths

           OUTPUT
            pbReplaceCachePaths : VARIANT_BOOL*'''
        return super(IReplacePathsParameters2, self).get_ReplaceCachePaths()
    def put_ReplaceMosaicDatasetPaths(self, pbReplaceMosaicPaths):
        '''Method IReplacePathsParameters.put_ReplaceMosaicDatasetPaths (from IReplacePathsParameters)

           INPUT
            pbReplaceMosaicPaths: VARIANT_BOOL'''
        return super(IReplacePathsParameters2, self).put_ReplaceMosaicDatasetPaths(pbReplaceMosaicPaths)
    def get_ReplaceMosaicDatasetPaths(self):
        '''Method IReplacePathsParameters.get_ReplaceMosaicDatasetPaths (from IReplacePathsParameters)

           OUTPUT
            pbReplaceMosaicPaths: VARIANT_BOOL*'''
        return super(IReplacePathsParameters2, self).get_ReplaceMosaicDatasetPaths()
    def put_ReplaceCatalogItemPaths(self, pbReplaceCatalogPaths):
        '''Method IReplacePathsParameters.put_ReplaceCatalogItemPaths (from IReplacePathsParameters)

           INPUT
            pbReplaceCatalogPaths: VARIANT_BOOL'''
        return super(IReplacePathsParameters2, self).put_ReplaceCatalogItemPaths(pbReplaceCatalogPaths)
    def get_ReplaceCatalogItemPaths(self):
        '''Method IReplacePathsParameters.get_ReplaceCatalogItemPaths (from IReplacePathsParameters)

           OUTPUT
            pbReplaceCatalogPaths: VARIANT_BOOL*'''
        return super(IReplacePathsParameters2, self).get_ReplaceCatalogItemPaths()
    def put_ReplaceItemURIPaths(self, pbReplaceURIPaths):
        '''Method IReplacePathsParameters.put_ReplaceItemURIPaths (from IReplacePathsParameters)

           INPUT
            pbReplaceURIPaths   : VARIANT_BOOL'''
        return super(IReplacePathsParameters2, self).put_ReplaceItemURIPaths(pbReplaceURIPaths)
    def get_ReplaceItemURIPaths(self):
        '''Method IReplacePathsParameters.get_ReplaceItemURIPaths (from IReplacePathsParameters)

           OUTPUT
            pbReplaceURIPaths   : VARIANT_BOOL*'''
        return super(IReplacePathsParameters2, self).get_ReplaceItemURIPaths()
    def putref_OldPaths(self, ppPaths):
        '''Method IReplacePathsParameters.putref_OldPaths (from IReplacePathsParameters)

           INPUT
            ppPaths             : IStringArray*'''
        return super(IReplacePathsParameters2, self).putref_OldPaths(ppPaths)
    def get_OldPaths(self):
        '''Method IReplacePathsParameters.get_OldPaths (from IReplacePathsParameters)

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IReplacePathsParameters2, self).get_OldPaths()
    def putref_NewPaths(self, ppPaths):
        '''Method IReplacePathsParameters.putref_NewPaths (from IReplacePathsParameters)

           INPUT
            ppPaths             : IStringArray*'''
        return super(IReplacePathsParameters2, self).putref_NewPaths(ppPaths)
    def get_NewPaths(self):
        '''Method IReplacePathsParameters.get_NewPaths (from IReplacePathsParameters)

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IReplacePathsParameters2, self).get_NewPaths()
    NewPaths = property(get_NewPaths, putref_NewPaths, None)
    OldPaths = property(get_OldPaths, putref_OldPaths, None)
    RasterTypeInstanceIDs = property(get_RasterTypeInstanceIDs, putref_RasterTypeInstanceIDs, None)
    ReplaceCachePaths = property(get_ReplaceCachePaths, put_ReplaceCachePaths, None)
    ReplaceCatalogItemPaths = property(get_ReplaceCatalogItemPaths, put_ReplaceCatalogItemPaths, None)
    ReplaceItemURIPaths = property(get_ReplaceItemURIPaths, put_ReplaceItemURIPaths, None)
    ReplaceMosaicDatasetPaths = property(get_ReplaceMosaicDatasetPaths, put_ReplaceMosaicDatasetPaths, None)
    ReplaceRasterTypePaths = property(get_ReplaceRasterTypePaths, put_ReplaceRasterTypePaths, None)

class IImportGeometryParameters(_esriDataSourcesRaster.IImportGeometryParameters):
    _IID = uuid.UUID('a63cc4b0-375b-4cf1-96d2-76b8eb882749')

    def __init__(self, *args, **kw):
        super(IImportGeometryParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Target(self, pImportTarget):
        '''Method IImportGeometryParameters.put_Target

           INPUT
            pImportTarget       : esriImportGeometryTarget'''
        return super(IImportGeometryParameters, self).put_Target(pImportTarget)
    def get_Target(self):
        '''Method IImportGeometryParameters.get_Target

           OUTPUT
            pImportTarget       : esriImportGeometryTarget*'''
        return super(IImportGeometryParameters, self).get_Target()
    def put_TargetJoinField(self, pTargetJoinField):
        '''Method IImportGeometryParameters.put_TargetJoinField

           INPUT
            pTargetJoinField    : BSTR'''
        return super(IImportGeometryParameters, self).put_TargetJoinField(pTargetJoinField)
    def get_TargetJoinField(self):
        '''Method IImportGeometryParameters.get_TargetJoinField

           OUTPUT
            pTargetJoinField    : BSTR*'''
        return super(IImportGeometryParameters, self).get_TargetJoinField()
    def putref_SourceTable(self, ppSourceTable):
        '''Method IImportGeometryParameters.putref_SourceTable

           INPUT
            ppSourceTable       : IFeatureClass*'''
        return super(IImportGeometryParameters, self).putref_SourceTable(ppSourceTable)
    def get_SourceTable(self):
        '''Method IImportGeometryParameters.get_SourceTable

           OUTPUT
            ppSourceTable       : IFeatureClass**'''
        return super(IImportGeometryParameters, self).get_SourceTable()
    def put_SourceJoinField(self, pSourceJoinField):
        '''Method IImportGeometryParameters.put_SourceJoinField

           INPUT
            pSourceJoinField    : BSTR'''
        return super(IImportGeometryParameters, self).put_SourceJoinField(pSourceJoinField)
    def get_SourceJoinField(self):
        '''Method IImportGeometryParameters.get_SourceJoinField

           OUTPUT
            pSourceJoinField    : BSTR*'''
        return super(IImportGeometryParameters, self).get_SourceJoinField()
    SourceJoinField = property(get_SourceJoinField, put_SourceJoinField, None)
    SourceTable = property(get_SourceTable, putref_SourceTable, None)
    Target = property(get_Target, put_Target, None)
    TargetJoinField = property(get_TargetJoinField, put_TargetJoinField, None)

class IAnalyzeParameters(_esriDataSourcesRaster.IAnalyzeParameters):
    _IID = uuid.UUID('176ce686-ab2e-47db-b520-37c81f517b6c')

    def __init__(self, *args, **kw):
        super(IAnalyzeParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ClearErrors(self, pbClearErrors):
        '''Method IAnalyzeParameters.put_ClearErrors

           INPUT
            pbClearErrors       : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_ClearErrors(pbClearErrors)
    def get_ClearErrors(self):
        '''Method IAnalyzeParameters.get_ClearErrors

           OUTPUT
            pbClearErrors       : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_ClearErrors()
    def put_AnalyzeFootprints(self, pbAnalyzeFootprints):
        '''Method IAnalyzeParameters.put_AnalyzeFootprints

           INPUT
            pbAnalyzeFootprints : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeFootprints(pbAnalyzeFootprints)
    def get_AnalyzeFootprints(self):
        '''Method IAnalyzeParameters.get_AnalyzeFootprints

           OUTPUT
            pbAnalyzeFootprints : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeFootprints()
    def put_AnalyzeDatasetPaths(self, pbAnalyzeDatasetPaths):
        '''Method IAnalyzeParameters.put_AnalyzeDatasetPaths

           INPUT
            pbAnalyzeDatasetPaths: VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeDatasetPaths(pbAnalyzeDatasetPaths)
    def get_AnalyzeDatasetPaths(self):
        '''Method IAnalyzeParameters.get_AnalyzeDatasetPaths

           OUTPUT
            pbAnalyzeDatasetPaths: VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeDatasetPaths()
    def put_AnalyzeDatasets(self, pbAnalyzeDatasets):
        '''Method IAnalyzeParameters.put_AnalyzeDatasets

           INPUT
            pbAnalyzeDatasets   : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeDatasets(pbAnalyzeDatasets)
    def get_AnalyzeDatasets(self):
        '''Method IAnalyzeParameters.get_AnalyzeDatasets

           OUTPUT
            pbAnalyzeDatasets   : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeDatasets()
    def put_AnalyzeFunctions(self, pbAnalyzeFunctions):
        '''Method IAnalyzeParameters.put_AnalyzeFunctions

           INPUT
            pbAnalyzeFunctions  : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeFunctions(pbAnalyzeFunctions)
    def get_AnalyzeFunctions(self):
        '''Method IAnalyzeParameters.get_AnalyzeFunctions

           OUTPUT
            pbAnalyzeFunctions  : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeFunctions()
    def put_AnalyzeVisibility(self, pbAnalyzeVisibility):
        '''Method IAnalyzeParameters.put_AnalyzeVisibility

           INPUT
            pbAnalyzeVisibility : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeVisibility(pbAnalyzeVisibility)
    def get_AnalyzeVisibility(self):
        '''Method IAnalyzeParameters.get_AnalyzeVisibility

           OUTPUT
            pbAnalyzeVisibility : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeVisibility()
    def put_CollectStatistics(self, pbCollectStatistics):
        '''Method IAnalyzeParameters.put_CollectStatistics

           INPUT
            pbCollectStatistics : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_CollectStatistics(pbCollectStatistics)
    def get_CollectStatistics(self):
        '''Method IAnalyzeParameters.get_CollectStatistics

           OUTPUT
            pbCollectStatistics : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_CollectStatistics()
    def put_AnalyzePerformance(self, pbAnalyzePerformance):
        '''Method IAnalyzeParameters.put_AnalyzePerformance

           INPUT
            pbAnalyzePerformance: VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzePerformance(pbAnalyzePerformance)
    def get_AnalyzePerformance(self):
        '''Method IAnalyzeParameters.get_AnalyzePerformance

           OUTPUT
            pbAnalyzePerformance: VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzePerformance()
    def put_AnalyzeStaleItems(self, pbAnalyzeStaleItems):
        '''Method IAnalyzeParameters.put_AnalyzeStaleItems

           INPUT
            pbAnalyzeStaleItems : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeStaleItems(pbAnalyzeStaleItems)
    def get_AnalyzeStaleItems(self):
        '''Method IAnalyzeParameters.get_AnalyzeStaleItems

           OUTPUT
            pbAnalyzeStaleItems : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeStaleItems()
    def put_AnalyzeStatistics(self, pbAnalyzeStatistics):
        '''Method IAnalyzeParameters.put_AnalyzeStatistics

           INPUT
            pbAnalyzeStatistics : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeStatistics(pbAnalyzeStatistics)
    def get_AnalyzeStatistics(self):
        '''Method IAnalyzeParameters.get_AnalyzeStatistics

           OUTPUT
            pbAnalyzeStatistics : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeStatistics()
    def put_AnalyzePyramids(self, pbAnalyzePyramids):
        '''Method IAnalyzeParameters.put_AnalyzePyramids

           INPUT
            pbAnalyzePyramids   : VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzePyramids(pbAnalyzePyramids)
    def get_AnalyzePyramids(self):
        '''Method IAnalyzeParameters.get_AnalyzePyramids

           OUTPUT
            pbAnalyzePyramids   : VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzePyramids()
    def put_AnalyzeKeyProperties(self, pbAnalyzeKeyProperties):
        '''Method IAnalyzeParameters.put_AnalyzeKeyProperties

           INPUT
            pbAnalyzeKeyProperties: VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeKeyProperties(pbAnalyzeKeyProperties)
    def get_AnalyzeKeyProperties(self):
        '''Method IAnalyzeParameters.get_AnalyzeKeyProperties

           OUTPUT
            pbAnalyzeKeyProperties: VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeKeyProperties()
    def put_AnalyzeDataSourceValidity(self, pbAnalyzeDataSourceValidity):
        '''Method IAnalyzeParameters.put_AnalyzeDataSourceValidity

           INPUT
            pbAnalyzeDataSourceValidity: VARIANT_BOOL'''
        return super(IAnalyzeParameters, self).put_AnalyzeDataSourceValidity(pbAnalyzeDataSourceValidity)
    def get_AnalyzeDataSourceValidity(self):
        '''Method IAnalyzeParameters.get_AnalyzeDataSourceValidity

           OUTPUT
            pbAnalyzeDataSourceValidity: VARIANT_BOOL*'''
        return super(IAnalyzeParameters, self).get_AnalyzeDataSourceValidity()
    AnalyzeDataSourceValidity = property(get_AnalyzeDataSourceValidity, put_AnalyzeDataSourceValidity, None)
    AnalyzeDatasetPaths = property(get_AnalyzeDatasetPaths, put_AnalyzeDatasetPaths, None)
    AnalyzeDatasets = property(get_AnalyzeDatasets, put_AnalyzeDatasets, None)
    AnalyzeFootprints = property(get_AnalyzeFootprints, put_AnalyzeFootprints, None)
    AnalyzeFunctions = property(get_AnalyzeFunctions, put_AnalyzeFunctions, None)
    AnalyzeKeyProperties = property(get_AnalyzeKeyProperties, put_AnalyzeKeyProperties, None)
    AnalyzePerformance = property(get_AnalyzePerformance, put_AnalyzePerformance, None)
    AnalyzePyramids = property(get_AnalyzePyramids, put_AnalyzePyramids, None)
    AnalyzeStaleItems = property(get_AnalyzeStaleItems, put_AnalyzeStaleItems, None)
    AnalyzeStatistics = property(get_AnalyzeStatistics, put_AnalyzeStatistics, None)
    AnalyzeVisibility = property(get_AnalyzeVisibility, put_AnalyzeVisibility, None)
    ClearErrors = property(get_ClearErrors, put_ClearErrors, None)
    CollectStatistics = property(get_CollectStatistics, put_CollectStatistics, None)

class IAddNewerRastersParameters(_esriDataSourcesRaster.IAddNewerRastersParameters):
    _IID = uuid.UUID('17fecf8d-d46c-4739-a25c-3c678a4beb16')

    def __init__(self, *args, **kw):
        super(IAddNewerRastersParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_OverwriteExisting(self, pbOverwriteExisting):
        '''Method IAddNewerRastersParameters.put_OverwriteExisting

           INPUT
            pbOverwriteExisting : VARIANT_BOOL'''
        return super(IAddNewerRastersParameters, self).put_OverwriteExisting(pbOverwriteExisting)
    def get_OverwriteExisting(self):
        '''Method IAddNewerRastersParameters.get_OverwriteExisting

           OUTPUT
            pbOverwriteExisting : VARIANT_BOOL*'''
        return super(IAddNewerRastersParameters, self).get_OverwriteExisting()
    OverwriteExisting = property(get_OverwriteExisting, put_OverwriteExisting, None)

class IBuildSeamlinesParameters3(_esriDataSourcesRaster.IBuildSeamlinesParameters3):
    _IID = uuid.UUID('041fae1f-f36b-4540-a699-7d40a9698e1a')

    def __init__(self, *args, **kw):
        super(IBuildSeamlinesParameters3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_BlendWidthUnits(self):
        '''Method IBuildSeamlinesParameters3.get_BlendWidthUnits

           OUTPUT
            pBlendWidthUnits    : esriBlendWidthUnits*'''
        return super(IBuildSeamlinesParameters3, self).get_BlendWidthUnits()
    def put_BlendWidthUnits(self, pBlendWidthUnits):
        '''Method IBuildSeamlinesParameters3.put_BlendWidthUnits

           INPUT
            pBlendWidthUnits    : esriBlendWidthUnits'''
        return super(IBuildSeamlinesParameters3, self).put_BlendWidthUnits(pBlendWidthUnits)
    def putref_CellSizes(self, ppCellSizes):
        '''Method IBuildSeamlinesParameters2.putref_CellSizes (from IBuildSeamlinesParameters2)

           INPUT
            ppCellSizes         : IDoubleArray*'''
        return super(IBuildSeamlinesParameters3, self).putref_CellSizes(ppCellSizes)
    def get_CellSizes(self):
        '''Method IBuildSeamlinesParameters2.get_CellSizes (from IBuildSeamlinesParameters2)

           OUTPUT
            ppCellSizes         : IDoubleArray**'''
        return super(IBuildSeamlinesParameters3, self).get_CellSizes()
    def put_Method(self, pBuildSealineMethod):
        '''Method IBuildSeamlinesParameters2.put_Method (from IBuildSeamlinesParameters2)

           INPUT
            pBuildSealineMethod : esriBuildSeamlinesMethod'''
        return super(IBuildSeamlinesParameters3, self).put_Method(pBuildSealineMethod)
    def get_Method(self):
        '''Method IBuildSeamlinesParameters2.get_Method (from IBuildSeamlinesParameters2)

           OUTPUT
            pBuildSealineMethod : esriBuildSeamlinesMethod*'''
        return super(IBuildSeamlinesParameters3, self).get_Method()
    def put_SortMethod(self, pBuildSealineMethod):
        '''Method IBuildSeamlinesParameters2.put_SortMethod (from IBuildSeamlinesParameters2)

           INPUT
            pBuildSealineMethod : esriMosaicMethod'''
        return super(IBuildSeamlinesParameters3, self).put_SortMethod(pBuildSealineMethod)
    def get_SortMethod(self):
        '''Method IBuildSeamlinesParameters2.get_SortMethod (from IBuildSeamlinesParameters2)

           OUTPUT
            pBuildSealineMethod : esriMosaicMethod*'''
        return super(IBuildSeamlinesParameters3, self).get_SortMethod()
    def get_OrderByFieldName(self):
        '''Method IBuildSeamlinesParameters2.get_OrderByFieldName (from IBuildSeamlinesParameters2)

           OUTPUT
            pName               : BSTR*'''
        return super(IBuildSeamlinesParameters3, self).get_OrderByFieldName()
    def put_OrderByFieldName(self, pName):
        '''Method IBuildSeamlinesParameters2.put_OrderByFieldName (from IBuildSeamlinesParameters2)

           INPUT
            pName               : BSTR'''
        return super(IBuildSeamlinesParameters3, self).put_OrderByFieldName(pName)
    def get_OrderByBaseValue(self):
        '''Method IBuildSeamlinesParameters2.get_OrderByBaseValue (from IBuildSeamlinesParameters2)

           OUTPUT
            pValue              : VARIANT*'''
        return super(IBuildSeamlinesParameters3, self).get_OrderByBaseValue()
    def put_OrderByBaseValue(self, pValue):
        '''Method IBuildSeamlinesParameters2.put_OrderByBaseValue (from IBuildSeamlinesParameters2)

           INPUT
            pValue              : VARIANT'''
        return super(IBuildSeamlinesParameters3, self).put_OrderByBaseValue(pValue)
    def get_Ascending(self):
        '''Method IBuildSeamlinesParameters2.get_Ascending (from IBuildSeamlinesParameters2)

           OUTPUT
            pAscending          : VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters3, self).get_Ascending()
    def put_Ascending(self, pAscending):
        '''Method IBuildSeamlinesParameters2.put_Ascending (from IBuildSeamlinesParameters2)

           INPUT
            pAscending          : VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters3, self).put_Ascending(pAscending)
    def get_Viewpoint(self):
        '''Method IBuildSeamlinesParameters2.get_Viewpoint (from IBuildSeamlinesParameters2)

           OUTPUT
            ppViewpoint         : IPoint**'''
        return super(IBuildSeamlinesParameters3, self).get_Viewpoint()
    def putref_Viewpoint(self, ppViewpoint):
        '''Method IBuildSeamlinesParameters2.putref_Viewpoint (from IBuildSeamlinesParameters2)

           INPUT
            ppViewpoint         : IPoint*'''
        return super(IBuildSeamlinesParameters3, self).putref_Viewpoint(ppViewpoint)
    def get_BlendWidth(self):
        '''Method IBuildSeamlinesParameters2.get_BlendWidth (from IBuildSeamlinesParameters2)

           OUTPUT
            pBlendWidth         : double*'''
        return super(IBuildSeamlinesParameters3, self).get_BlendWidth()
    def put_BlendWidth(self, pBlendWidth):
        '''Method IBuildSeamlinesParameters2.put_BlendWidth (from IBuildSeamlinesParameters2)

           INPUT
            pBlendWidth         : double'''
        return super(IBuildSeamlinesParameters3, self).put_BlendWidth(pBlendWidth)
    def get_BlendType(self):
        '''Method IBuildSeamlinesParameters2.get_BlendType (from IBuildSeamlinesParameters2)

           OUTPUT
            pBlendType          : esriBlendType*'''
        return super(IBuildSeamlinesParameters3, self).get_BlendType()
    def put_BlendType(self, pBlendType):
        '''Method IBuildSeamlinesParameters2.put_BlendType (from IBuildSeamlinesParameters2)

           INPUT
            pBlendType          : esriBlendType'''
        return super(IBuildSeamlinesParameters3, self).put_BlendType(pBlendType)
    def get_RequestSize(self):
        '''Method IBuildSeamlinesParameters2.get_RequestSize (from IBuildSeamlinesParameters2)

           OUTPUT
            pRequestSize        : long*'''
        return super(IBuildSeamlinesParameters3, self).get_RequestSize()
    def put_RequestSize(self, pRequestSize):
        '''Method IBuildSeamlinesParameters2.put_RequestSize (from IBuildSeamlinesParameters2)

           INPUT
            pRequestSize        : long'''
        return super(IBuildSeamlinesParameters3, self).put_RequestSize(pRequestSize)
    def get_RequestSizeType(self):
        '''Method IBuildSeamlinesParameters2.get_RequestSizeType (from IBuildSeamlinesParameters2)

           OUTPUT
            pRequestSizeType    : esriRequestSizeType*'''
        return super(IBuildSeamlinesParameters3, self).get_RequestSizeType()
    def put_RequestSizeType(self, pRequestSizeType):
        '''Method IBuildSeamlinesParameters2.put_RequestSizeType (from IBuildSeamlinesParameters2)

           INPUT
            pRequestSizeType    : esriRequestSizeType'''
        return super(IBuildSeamlinesParameters3, self).put_RequestSizeType(pRequestSizeType)
    def put_UpdateSeamlineOrder(self, pbUpdateSeamlineOrder):
        '''Method IBuildSeamlinesParameters.put_UpdateSeamlineOrder (from IBuildSeamlinesParameters)

           INPUT
            pbUpdateSeamlineOrder: VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters3, self).put_UpdateSeamlineOrder(pbUpdateSeamlineOrder)
    def get_UpdateSeamlineOrder(self):
        '''Method IBuildSeamlinesParameters.get_UpdateSeamlineOrder (from IBuildSeamlinesParameters)

           OUTPUT
            pbUpdateSeamlineOrder: VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters3, self).get_UpdateSeamlineOrder()
    def put_ModifySeamlines(self, pbModifySeamlines):
        '''Method IBuildSeamlinesParameters.put_ModifySeamlines (from IBuildSeamlinesParameters)

           INPUT
            pbModifySeamlines   : VARIANT_BOOL'''
        return super(IBuildSeamlinesParameters3, self).put_ModifySeamlines(pbModifySeamlines)
    def get_ModifySeamlines(self):
        '''Method IBuildSeamlinesParameters.get_ModifySeamlines (from IBuildSeamlinesParameters)

           OUTPUT
            pbModifySeamlines   : VARIANT_BOOL*'''
        return super(IBuildSeamlinesParameters3, self).get_ModifySeamlines()
    def put_CellSizeClusterTolerance(self, pCellSizeClusterTolerance):
        '''Method IBuildSeamlinesParameters.put_CellSizeClusterTolerance (from IBuildSeamlinesParameters)

           INPUT
            pCellSizeClusterTolerance: double'''
        return super(IBuildSeamlinesParameters3, self).put_CellSizeClusterTolerance(pCellSizeClusterTolerance)
    def get_CellSizeClusterTolerance(self):
        '''Method IBuildSeamlinesParameters.get_CellSizeClusterTolerance (from IBuildSeamlinesParameters)

           OUTPUT
            pCellSizeClusterTolerance: double*'''
        return super(IBuildSeamlinesParameters3, self).get_CellSizeClusterTolerance()
    def putref_Cursor(self, pInputCursor):
        '''Method IBuildSeamlinesParameters.putref_Cursor (from IBuildSeamlinesParameters)

           INPUT
            pInputCursor        : ICursor*'''
        return super(IBuildSeamlinesParameters3, self).putref_Cursor(pInputCursor)
    def get_Cursor(self):
        '''Method IBuildSeamlinesParameters.get_Cursor (from IBuildSeamlinesParameters)

           OUTPUT
            pInputCursor        : ICursor**'''
        return super(IBuildSeamlinesParameters3, self).get_Cursor()
    def putref_DifferenceFunctionTemplate(self, ppDifferenceFunction):
        '''Method IBuildSeamlinesParameters.putref_DifferenceFunctionTemplate (from IBuildSeamlinesParameters)

           INPUT
            ppDifferenceFunction: IRasterFunctionTemplate*'''
        return super(IBuildSeamlinesParameters3, self).putref_DifferenceFunctionTemplate(ppDifferenceFunction)
    def get_DifferenceFunctionTemplate(self):
        '''Method IBuildSeamlinesParameters.get_DifferenceFunctionTemplate (from IBuildSeamlinesParameters)

           OUTPUT
            ppDifferenceFunction: IRasterFunctionTemplate**'''
        return super(IBuildSeamlinesParameters3, self).get_DifferenceFunctionTemplate()
    def putref_SeamlineModifier(self, ppSeamlineModifier):
        '''Method IBuildSeamlinesParameters.putref_SeamlineModifier (from IBuildSeamlinesParameters)

           INPUT
            ppSeamlineModifier  : ISeamlineModifier*'''
        return super(IBuildSeamlinesParameters3, self).putref_SeamlineModifier(ppSeamlineModifier)
    def get_SeamlineModifier(self):
        '''Method IBuildSeamlinesParameters.get_SeamlineModifier (from IBuildSeamlinesParameters)

           OUTPUT
            ppSeamlineModifier  : ISeamlineModifier**'''
        return super(IBuildSeamlinesParameters3, self).get_SeamlineModifier()
    Ascending = property(get_Ascending, put_Ascending, None)
    BlendType = property(get_BlendType, put_BlendType, None)
    BlendWidth = property(get_BlendWidth, put_BlendWidth, None)
    BlendWidthUnits = property(get_BlendWidthUnits, put_BlendWidthUnits, None)
    CellSizeClusterTolerance = property(get_CellSizeClusterTolerance, put_CellSizeClusterTolerance, None)
    CellSizes = property(get_CellSizes, putref_CellSizes, None)
    Cursor = property(get_Cursor, putref_Cursor, None)
    DifferenceFunctionTemplate = property(get_DifferenceFunctionTemplate, putref_DifferenceFunctionTemplate, None)
    Method = property(get_Method, put_Method, None)
    ModifySeamlines = property(get_ModifySeamlines, put_ModifySeamlines, None)
    OrderByBaseValue = property(get_OrderByBaseValue, put_OrderByBaseValue, None)
    OrderByFieldName = property(get_OrderByFieldName, put_OrderByFieldName, None)
    RequestSize = property(get_RequestSize, put_RequestSize, None)
    RequestSizeType = property(get_RequestSizeType, put_RequestSizeType, None)
    SeamlineModifier = property(get_SeamlineModifier, putref_SeamlineModifier, None)
    SortMethod = property(get_SortMethod, put_SortMethod, None)
    UpdateSeamlineOrder = property(get_UpdateSeamlineOrder, put_UpdateSeamlineOrder, None)
    Viewpoint = property(get_Viewpoint, putref_Viewpoint, None)

class IMergeItemsParameters2(_esriDataSourcesRaster.IMergeItemsParameters2):
    _IID = uuid.UUID('3d80f4a6-43cb-4e2c-b7b4-92233ce04018')

    def __init__(self, *args, **kw):
        super(IMergeItemsParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_BlockField(self, pBlockField):
        '''Method IMergeItemsParameters2.put_BlockField

           INPUT
            pBlockField         : BSTR'''
        return super(IMergeItemsParameters2, self).put_BlockField(pBlockField)
    def get_BlockField(self):
        '''Method IMergeItemsParameters2.get_BlockField

           OUTPUT
            pBlockField         : BSTR*'''
        return super(IMergeItemsParameters2, self).get_BlockField()
    def put_MaximumMergeItemsCount(self, pMaximumMergeItemsCount):
        '''Method IMergeItemsParameters2.put_MaximumMergeItemsCount

           INPUT
            pMaximumMergeItemsCount: long'''
        return super(IMergeItemsParameters2, self).put_MaximumMergeItemsCount(pMaximumMergeItemsCount)
    def get_MaximumMergeItemsCount(self):
        '''Method IMergeItemsParameters2.get_MaximumMergeItemsCount

           OUTPUT
            pMaximumMergeItemsCount: long*'''
        return super(IMergeItemsParameters2, self).get_MaximumMergeItemsCount()
    BlockField = property(get_BlockField, put_BlockField, None)
    MaximumMergeItemsCount = property(get_MaximumMergeItemsCount, put_MaximumMergeItemsCount, None)

class ICellSizeLevel2(_esriDataSourcesRaster.ICellSizeLevel2):
    _IID = uuid.UUID('a5c2a545-736d-493f-a981-f0f23531d3d2')

    def __init__(self, *args, **kw):
        super(ICellSizeLevel2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_Category(self, pCategory):
        '''Method ICellSizeLevel2.put_Category

           INPUT
            pCategory           : esriCellSizeLevelCategory'''
        return super(ICellSizeLevel2, self).put_Category(pCategory)
    def get_Category(self):
        '''Method ICellSizeLevel2.get_Category

           OUTPUT
            pCategory           : esriCellSizeLevelCategory*'''
        return super(ICellSizeLevel2, self).get_Category()
    def put_CellSize(self, pCellsize):
        '''Method ICellSizeLevel.put_CellSize (from ICellSizeLevel)

           INPUT
            pCellsize           : double'''
        return super(ICellSizeLevel2, self).put_CellSize(pCellsize)
    def get_CellSize(self):
        '''Method ICellSizeLevel.get_CellSize (from ICellSizeLevel)

           OUTPUT
            pCellsize           : double*'''
        return super(ICellSizeLevel2, self).get_CellSize()
    def putref_Geometry(self, ppLevelBoundary):
        '''Method ICellSizeLevel.putref_Geometry (from ICellSizeLevel)

           INPUT
            ppLevelBoundary     : IGeometry*'''
        return super(ICellSizeLevel2, self).putref_Geometry(ppLevelBoundary)
    def get_Geometry(self):
        '''Method ICellSizeLevel.get_Geometry (from ICellSizeLevel)

           OUTPUT
            ppLevelBoundary     : IGeometry**'''
        return super(ICellSizeLevel2, self).get_Geometry()
    def put_MinimumCellSize(self, pMinimumCellSize):
        '''Method ICellSizeLevel.put_MinimumCellSize (from ICellSizeLevel)

           INPUT
            pMinimumCellSize    : double'''
        return super(ICellSizeLevel2, self).put_MinimumCellSize(pMinimumCellSize)
    def get_MinimumCellSize(self):
        '''Method ICellSizeLevel.get_MinimumCellSize (from ICellSizeLevel)

           OUTPUT
            pMinimumCellSize    : double*'''
        return super(ICellSizeLevel2, self).get_MinimumCellSize()
    def put_MaximumCellSize(self, pMaximumCellSize):
        '''Method ICellSizeLevel.put_MaximumCellSize (from ICellSizeLevel)

           INPUT
            pMaximumCellSize    : double'''
        return super(ICellSizeLevel2, self).put_MaximumCellSize(pMaximumCellSize)
    def get_MaximumCellSize(self):
        '''Method ICellSizeLevel.get_MaximumCellSize (from ICellSizeLevel)

           OUTPUT
            pMaximumCellSize    : double*'''
        return super(ICellSizeLevel2, self).get_MaximumCellSize()
    def put_ID(self, pDescriptionID):
        '''Method ICellSizeLevel.put_ID (from ICellSizeLevel)

           INPUT
            pDescriptionID      : long'''
        return super(ICellSizeLevel2, self).put_ID(pDescriptionID)
    def get_ID(self):
        '''Method ICellSizeLevel.get_ID (from ICellSizeLevel)

           OUTPUT
            pDescriptionID      : long*'''
        return super(ICellSizeLevel2, self).get_ID()
    Category = property(get_Category, put_Category, None)
    CellSize = property(get_CellSize, put_CellSize, None)
    Geometry = property(get_Geometry, putref_Geometry, None)
    ID = property(get_ID, put_ID, None)
    MaximumCellSize = property(get_MaximumCellSize, put_MaximumCellSize, None)
    MinimumCellSize = property(get_MinimumCellSize, put_MinimumCellSize, None)

class IMosaicDatasetOperation(_esriDataSourcesRaster.IMosaicDatasetOperation):
    _IID = uuid.UUID('ff02cbc0-bc6e-4f16-8652-bed3f04ca23f')
    def AddRasters(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.AddRasters

           INPUTS
            pParameters         : IAddRastersParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).AddRasters(pParameters, pTrackCancel)
    def Synchronize(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.Synchronize

           INPUTS
            pParameters         : ISynchronizeParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).Synchronize(pParameters, pTrackCancel)
    def CalculateCellSizeRanges(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.CalculateCellSizeRanges

           INPUTS
            pParameters         : ICalculateCellSizeRangesParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).CalculateCellSizeRanges(pParameters, pTrackCancel)
    def BuildBoundary(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.BuildBoundary

           INPUTS
            pParameters         : IBuildBoundaryParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).BuildBoundary(pParameters, pTrackCancel)
    def DefineOverviews(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.DefineOverviews

           INPUTS
            pParameters         : IDefineOverviewsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).DefineOverviews(pParameters, pTrackCancel)
    def GenerateOverviews(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.GenerateOverviews

           INPUTS
            pParameters         : IGenerateOverviewsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).GenerateOverviews(pParameters, pTrackCancel)
    def RemoveItems(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.RemoveItems

           INPUTS
            pParameters         : IRemoveItemsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).RemoveItems(pParameters, pTrackCancel)
    def BuildFootprints(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.BuildFootprints

           INPUTS
            pParameters         : IBuildFootprintsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).BuildFootprints(pParameters, pTrackCancel)
    def BuildSeamlines(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.BuildSeamlines

           INPUTS
            pParameters         : IBuildSeamlinesParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).BuildSeamlines(pParameters, pTrackCancel)
    def ReplacePaths(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.ReplacePaths

           INPUTS
            pParameters         : IReplacePathsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).ReplacePaths(pParameters, pTrackCancel)
    def DefineNoData(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.DefineNoData

           INPUTS
            pParameters         : IDefineNoDataParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).DefineNoData(pParameters, pTrackCancel)
    def ComputeDirtyArea(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.ComputeDirtyArea

           INPUTS
            pParameters         : IComputeDirtyAreaParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).ComputeDirtyArea(pParameters, pTrackCancel)
    def QuerySpatialIndex(self):
        '''Method IMosaicDatasetOperation.QuerySpatialIndex

           OUTPUTS
            ppSpatialIndex      : IIndex**
            pGridSize1          : double*
            pGridSize2          : double*
            pGridSize3          : double*'''
        return super(IMosaicDatasetOperation, self).QuerySpatialIndex()
    def ResetSpatialIndex(self, gridSize1, gridSize2, gridSize3):
        '''Method IMosaicDatasetOperation.ResetSpatialIndex

           INPUTS
            gridSize1           : double
            gridSize2           : double
            gridSize3           : double'''
        return super(IMosaicDatasetOperation, self).ResetSpatialIndex(gridSize1, gridSize2, gridSize3)
    def UpdateTimeStamp(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.UpdateTimeStamp

           INPUTS
            pParameters         : ISelectionParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).UpdateTimeStamp(pParameters, pTrackCancel)
    def ImportGeometry(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.ImportGeometry

           INPUTS
            pParameters         : IImportGeometryParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).ImportGeometry(pParameters, pTrackCancel)
    def get_DefaultOverviewWorkspace(self):
        '''Method IMosaicDatasetOperation.get_DefaultOverviewWorkspace

           OUTPUT
            ppDefaultOverviewWorkspaceName: IWorkspaceName**'''
        return super(IMosaicDatasetOperation, self).get_DefaultOverviewWorkspace()
    def Search(self, pParameters, pAdditionalQuery):
        '''Method IMosaicDatasetOperation.Search

           INPUTS
            pParameters         : ISelectionParameters*
            pAdditionalQuery    : IQueryFilter*

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IMosaicDatasetOperation, self).Search(pParameters, pAdditionalQuery)
    def AddNewerRasters(self, pSelectionParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.AddNewerRasters

           INPUTS
            pSelectionParameters: ISelectionParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation, self).AddNewerRasters(pSelectionParameters, pTrackCancel)
    def GetCellSizeLevels(self, InstanceID):
        '''Method IMosaicDatasetOperation.GetCellSizeLevels

           INPUT
            InstanceID          : long

           OUTPUT
            ppCellSizeLevels    : ICellSizeLevels**'''
        return super(IMosaicDatasetOperation, self).GetCellSizeLevels(InstanceID)
    def UpdateCellSizeLevels(self, InstanceID, pCellSizeLevels):
        '''Method IMosaicDatasetOperation.UpdateCellSizeLevels

           INPUTS
            InstanceID          : long
            pCellSizeLevels     : ICellSizeLevels*'''
        return super(IMosaicDatasetOperation, self).UpdateCellSizeLevels(InstanceID, pCellSizeLevels)
    DefaultOverviewWorkspace = property(get_DefaultOverviewWorkspace, None, None)

class IMosaicDatasetOperation2(_esriDataSourcesRaster.IMosaicDatasetOperation2):
    _IID = uuid.UUID('99ecf2dd-1b1f-4432-8c5b-192b5ff1dc5a')
    def Analyze(self, pAnalyzeParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation2.Analyze

           INPUTS
            pAnalyzeParameters  : IAnalyzeParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).Analyze(pAnalyzeParameters, pTrackCancel)
    def PrepareSchema(self, sideTables, pRasterTypeNameObjects):
        '''Method IMosaicDatasetOperation2.PrepareSchema

           INPUTS
            sideTables          : esriMosaicDatasetSideTable
            pRasterTypeNameObjects: IArray*'''
        return super(IMosaicDatasetOperation2, self).PrepareSchema(sideTables, pRasterTypeNameObjects)
    def get_DefaultCacheWorkspace(self):
        '''Method IMosaicDatasetOperation2.get_DefaultCacheWorkspace

           OUTPUT
            ppDefaultCacheWorkspaceName: IWorkspaceName**'''
        return super(IMosaicDatasetOperation2, self).get_DefaultCacheWorkspace()
    def IsStale(self, pRow):
        '''Method IMosaicDatasetOperation2.IsStale

           INPUT
            pRow                : IRow*

           OUTPUT
            pbIsStale           : VARIANT_BOOL*'''
        return super(IMosaicDatasetOperation2, self).IsStale(pRow)
    def DeleteMosaicDataset(self, pMDDeleteParams, pTrackCancel):
        '''Method IMosaicDatasetOperation2.DeleteMosaicDataset

           INPUTS
            pMDDeleteParams     : IDeleteMosaicDatasetParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).DeleteMosaicDataset(pMDDeleteParams, pTrackCancel)
    def get_RecommendedRasterType(self):
        '''Method IMosaicDatasetOperation2.get_RecommendedRasterType

           OUTPUT
            ppDefaultRasterType : IRasterType**'''
        return super(IMosaicDatasetOperation2, self).get_RecommendedRasterType()
    def MergeItems(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation2.MergeItems

           INPUTS
            pParameters         : IMergeItemsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).MergeItems(pParameters, pTrackCancel)
    def SplitMergedItems(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation2.SplitMergedItems

           INPUTS
            pParameters         : ISplitMergedItemsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).SplitMergedItems(pParameters, pTrackCancel)
    def UpdateBoundary(self, pBoundaryGeometry):
        '''Method IMosaicDatasetOperation2.UpdateBoundary

           INPUT
            pBoundaryGeometry   : IGeometry*'''
        return super(IMosaicDatasetOperation2, self).UpdateBoundary(pBoundaryGeometry)
    def RepairReferencedSideTables(self, pTargetCatalogOrMosaicDataset):
        '''Method IMosaicDatasetOperation2.RepairReferencedSideTables

           INPUT
            pTargetCatalogOrMosaicDataset: IUnknown*'''
        return super(IMosaicDatasetOperation2, self).RepairReferencedSideTables(pTargetCatalogOrMosaicDataset)
    def RepairManagedOverviews(self, pTrackCancel):
        '''Method IMosaicDatasetOperation2.RepairManagedOverviews

           INPUT
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).RepairManagedOverviews(pTrackCancel)
    def AddRasters(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.AddRasters (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IAddRastersParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).AddRasters(pParameters, pTrackCancel)
    def Synchronize(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.Synchronize (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : ISynchronizeParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).Synchronize(pParameters, pTrackCancel)
    def CalculateCellSizeRanges(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.CalculateCellSizeRanges (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : ICalculateCellSizeRangesParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).CalculateCellSizeRanges(pParameters, pTrackCancel)
    def BuildBoundary(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.BuildBoundary (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IBuildBoundaryParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).BuildBoundary(pParameters, pTrackCancel)
    def DefineOverviews(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.DefineOverviews (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IDefineOverviewsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).DefineOverviews(pParameters, pTrackCancel)
    def GenerateOverviews(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.GenerateOverviews (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IGenerateOverviewsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).GenerateOverviews(pParameters, pTrackCancel)
    def RemoveItems(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.RemoveItems (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IRemoveItemsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).RemoveItems(pParameters, pTrackCancel)
    def BuildFootprints(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.BuildFootprints (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IBuildFootprintsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).BuildFootprints(pParameters, pTrackCancel)
    def BuildSeamlines(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.BuildSeamlines (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IBuildSeamlinesParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).BuildSeamlines(pParameters, pTrackCancel)
    def ReplacePaths(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.ReplacePaths (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IReplacePathsParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).ReplacePaths(pParameters, pTrackCancel)
    def DefineNoData(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.DefineNoData (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IDefineNoDataParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).DefineNoData(pParameters, pTrackCancel)
    def ComputeDirtyArea(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.ComputeDirtyArea (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IComputeDirtyAreaParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).ComputeDirtyArea(pParameters, pTrackCancel)
    def QuerySpatialIndex(self):
        '''Method IMosaicDatasetOperation.QuerySpatialIndex (from IMosaicDatasetOperation)

           OUTPUTS
            ppSpatialIndex      : IIndex**
            pGridSize1          : double*
            pGridSize2          : double*
            pGridSize3          : double*'''
        return super(IMosaicDatasetOperation2, self).QuerySpatialIndex()
    def ResetSpatialIndex(self, gridSize1, gridSize2, gridSize3):
        '''Method IMosaicDatasetOperation.ResetSpatialIndex (from IMosaicDatasetOperation)

           INPUTS
            gridSize1           : double
            gridSize2           : double
            gridSize3           : double'''
        return super(IMosaicDatasetOperation2, self).ResetSpatialIndex(gridSize1, gridSize2, gridSize3)
    def UpdateTimeStamp(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.UpdateTimeStamp (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : ISelectionParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).UpdateTimeStamp(pParameters, pTrackCancel)
    def ImportGeometry(self, pParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.ImportGeometry (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : IImportGeometryParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).ImportGeometry(pParameters, pTrackCancel)
    def get_DefaultOverviewWorkspace(self):
        '''Method IMosaicDatasetOperation.get_DefaultOverviewWorkspace (from IMosaicDatasetOperation)

           OUTPUT
            ppDefaultOverviewWorkspaceName: IWorkspaceName**'''
        return super(IMosaicDatasetOperation2, self).get_DefaultOverviewWorkspace()
    def Search(self, pParameters, pAdditionalQuery):
        '''Method IMosaicDatasetOperation.Search (from IMosaicDatasetOperation)

           INPUTS
            pParameters         : ISelectionParameters*
            pAdditionalQuery    : IQueryFilter*

           OUTPUT
            ppCursor            : ICursor**'''
        return super(IMosaicDatasetOperation2, self).Search(pParameters, pAdditionalQuery)
    def AddNewerRasters(self, pSelectionParameters, pTrackCancel):
        '''Method IMosaicDatasetOperation.AddNewerRasters (from IMosaicDatasetOperation)

           INPUTS
            pSelectionParameters: ISelectionParameters*
            pTrackCancel        : ITrackCancel*'''
        return super(IMosaicDatasetOperation2, self).AddNewerRasters(pSelectionParameters, pTrackCancel)
    def GetCellSizeLevels(self, InstanceID):
        '''Method IMosaicDatasetOperation.GetCellSizeLevels (from IMosaicDatasetOperation)

           INPUT
            InstanceID          : long

           OUTPUT
            ppCellSizeLevels    : ICellSizeLevels**'''
        return super(IMosaicDatasetOperation2, self).GetCellSizeLevels(InstanceID)
    def UpdateCellSizeLevels(self, InstanceID, pCellSizeLevels):
        '''Method IMosaicDatasetOperation.UpdateCellSizeLevels (from IMosaicDatasetOperation)

           INPUTS
            InstanceID          : long
            pCellSizeLevels     : ICellSizeLevels*'''
        return super(IMosaicDatasetOperation2, self).UpdateCellSizeLevels(InstanceID, pCellSizeLevels)
    DefaultCacheWorkspace = property(get_DefaultCacheWorkspace, None, None)
    DefaultOverviewWorkspace = property(get_DefaultOverviewWorkspace, None, None)
    RecommendedRasterType = property(get_RecommendedRasterType, None, None)

class IRasterTypeHistory(_esriDataSourcesRaster.IRasterTypeHistory):
    _IID = uuid.UUID('0f0862a7-c315-4e51-8f20-be91d2d13bbd')
    def GetRasterTypeInstance(self, InstanceID):
        '''Method IRasterTypeHistory.GetRasterTypeInstance

           INPUT
            InstanceID          : long

           OUTPUT
            ppRasterTypeInstance: IRasterType**'''
        return super(IRasterTypeHistory, self).GetRasterTypeInstance(InstanceID)
    def GetAllRasterTypeInstances(self):
        '''Method IRasterTypeHistory.GetAllRasterTypeInstances

           OUTPUT
            ppRasterTypeInstanceArray: IArray**'''
        return super(IRasterTypeHistory, self).GetAllRasterTypeInstances()
    def GetOverviewInstances(self):
        '''Method IRasterTypeHistory.GetOverviewInstances

           OUTPUT
            ppOverviewRasterTypeInstances: IArray**'''
        return super(IRasterTypeHistory, self).GetOverviewInstances()
    def UpdateRasterTypeInstance(self, pRasterTypeInstance):
        '''Method IRasterTypeHistory.UpdateRasterTypeInstance

           INPUT
            pRasterTypeInstance : IRasterType*

           OUTPUT
            pInstanceID         : long*'''
        return super(IRasterTypeHistory, self).UpdateRasterTypeInstance(pRasterTypeInstance)
    def GetSelectedRasterTypeInstances(self, pSelectionParameters):
        '''Method IRasterTypeHistory.GetSelectedRasterTypeInstances

           INPUT
            pSelectionParameters: ISelectionParameters*

           OUTPUT
            ppRasterTypeInstanceArray: IArray**'''
        return super(IRasterTypeHistory, self).GetSelectedRasterTypeInstances(pSelectionParameters)

class IRasterTypeHistory2(_esriDataSourcesRaster.IRasterTypeHistory2):
    _IID = uuid.UUID('fdf0e9fc-b966-41b1-8e3b-fb396f44396d')
    def GetAllRasterTypeInstanceIDs(self):
        '''Method IRasterTypeHistory2.GetAllRasterTypeInstanceIDs

           OUTPUT
            ppInstanceIDs       : IFIDSet**'''
        return super(IRasterTypeHistory2, self).GetAllRasterTypeInstanceIDs()
    def GetRasterTypeInstance(self, InstanceID):
        '''Method IRasterTypeHistory.GetRasterTypeInstance (from IRasterTypeHistory)

           INPUT
            InstanceID          : long

           OUTPUT
            ppRasterTypeInstance: IRasterType**'''
        return super(IRasterTypeHistory2, self).GetRasterTypeInstance(InstanceID)
    def GetAllRasterTypeInstances(self):
        '''Method IRasterTypeHistory.GetAllRasterTypeInstances (from IRasterTypeHistory)

           OUTPUT
            ppRasterTypeInstanceArray: IArray**'''
        return super(IRasterTypeHistory2, self).GetAllRasterTypeInstances()
    def GetOverviewInstances(self):
        '''Method IRasterTypeHistory.GetOverviewInstances (from IRasterTypeHistory)

           OUTPUT
            ppOverviewRasterTypeInstances: IArray**'''
        return super(IRasterTypeHistory2, self).GetOverviewInstances()
    def UpdateRasterTypeInstance(self, pRasterTypeInstance):
        '''Method IRasterTypeHistory.UpdateRasterTypeInstance (from IRasterTypeHistory)

           INPUT
            pRasterTypeInstance : IRasterType*

           OUTPUT
            pInstanceID         : long*'''
        return super(IRasterTypeHistory2, self).UpdateRasterTypeInstance(pRasterTypeInstance)
    def GetSelectedRasterTypeInstances(self, pSelectionParameters):
        '''Method IRasterTypeHistory.GetSelectedRasterTypeInstances (from IRasterTypeHistory)

           INPUT
            pSelectionParameters: ISelectionParameters*

           OUTPUT
            ppRasterTypeInstanceArray: IArray**'''
        return super(IRasterTypeHistory2, self).GetSelectedRasterTypeInstances(pSelectionParameters)

class IOverviewBuilder(_esriDataSourcesRaster.IOverviewBuilder):
    _IID = uuid.UUID('82fdd302-43c6-4f56-8e8e-5f11bbf920eb')

    def __init__(self, *args, **kw):
        super(IOverviewBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_OverviewParameters(self, ppParameters):
        '''Method IOverviewBuilder.putref_OverviewParameters

           INPUT
            ppParameters        : IDefineOverviewsParameters*'''
        return super(IOverviewBuilder, self).putref_OverviewParameters(ppParameters)
    def get_OverviewParameters(self):
        '''Method IOverviewBuilder.get_OverviewParameters

           OUTPUT
            ppParameters        : IDefineOverviewsParameters**'''
        return super(IOverviewBuilder, self).get_OverviewParameters()
    def putref_CellSizeLevels(self, ppCellSizeLevels):
        '''Method IOverviewBuilder.putref_CellSizeLevels

           INPUT
            ppCellSizeLevels    : ICellSizeLevels*'''
        return super(IOverviewBuilder, self).putref_CellSizeLevels(ppCellSizeLevels)
    def get_CellSizeLevels(self):
        '''Method IOverviewBuilder.get_CellSizeLevels

           OUTPUT
            ppCellSizeLevels    : ICellSizeLevels**'''
        return super(IOverviewBuilder, self).get_CellSizeLevels()
    def GenerateImage(self, pItemURI):
        '''Method IOverviewBuilder.GenerateImage

           INPUT
            pItemURI            : IOverviewItemURI*

           OUTPUT
            pbAllParticipantsOK : VARIANT_BOOL*'''
        return super(IOverviewBuilder, self).GenerateImage(pItemURI)
    CellSizeLevels = property(get_CellSizeLevels, putref_CellSizeLevels, None)
    OverviewParameters = property(get_OverviewParameters, putref_OverviewParameters, None)

class IRasterTypeFactory(_esriDataSourcesRaster.IRasterTypeFactory):
    _IID = uuid.UUID('0ed63556-60d8-4492-9424-7951f0f62c57')
    def get_Name(self):
        '''Method IRasterTypeFactory.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterTypeFactory, self).get_Name()
    def get_CLSID(self):
        '''Method IRasterTypeFactory.get_CLSID

           OUTPUT
            ppCLSID             : IUID**'''
        return super(IRasterTypeFactory, self).get_CLSID()
    def get_RasterTypeNames(self):
        '''Method IRasterTypeFactory.get_RasterTypeNames

           OUTPUT
            ppRasterTypeNames   : IStringArray**'''
        return super(IRasterTypeFactory, self).get_RasterTypeNames()
    def CreateRasterType(self, RasterTypeName):
        '''Method IRasterTypeFactory.CreateRasterType

           INPUT
            RasterTypeName      : BSTR

           OUTPUT
            ppRasterType        : IRasterType**'''
        return super(IRasterTypeFactory, self).CreateRasterType(RasterTypeName)
    CLSID = property(get_CLSID, None, None)
    Name = property(get_Name, None, None)
    RasterTypeNames = property(get_RasterTypeNames, None, None)

class IRasterTypeFactory2(_esriDataSourcesRaster.IRasterTypeFactory2):
    _IID = uuid.UUID('db9be81c-0bb0-4661-a2b4-66b7627421ba')
    def UpdateRasterTypeDefaults(self, pRasterType, pMosaicDataset, pCrawler):
        '''Method IRasterTypeFactory2.UpdateRasterTypeDefaults

           INPUTS
            pRasterType         : IRasterType*
            pMosaicDataset      : IMosaicDataset*
            pCrawler            : IDataSourceCrawler*'''
        return super(IRasterTypeFactory2, self).UpdateRasterTypeDefaults(pRasterType, pMosaicDataset, pCrawler)
    def get_Name(self):
        '''Method IRasterTypeFactory.get_Name (from IRasterTypeFactory)

           OUTPUT
            pName               : BSTR*'''
        return super(IRasterTypeFactory2, self).get_Name()
    def get_CLSID(self):
        '''Method IRasterTypeFactory.get_CLSID (from IRasterTypeFactory)

           OUTPUT
            ppCLSID             : IUID**'''
        return super(IRasterTypeFactory2, self).get_CLSID()
    def get_RasterTypeNames(self):
        '''Method IRasterTypeFactory.get_RasterTypeNames (from IRasterTypeFactory)

           OUTPUT
            ppRasterTypeNames   : IStringArray**'''
        return super(IRasterTypeFactory2, self).get_RasterTypeNames()
    def CreateRasterType(self, RasterTypeName):
        '''Method IRasterTypeFactory.CreateRasterType (from IRasterTypeFactory)

           INPUT
            RasterTypeName      : BSTR

           OUTPUT
            ppRasterType        : IRasterType**'''
        return super(IRasterTypeFactory2, self).CreateRasterType(RasterTypeName)
    CLSID = property(get_CLSID, None, None)
    Name = property(get_Name, None, None)
    RasterTypeNames = property(get_RasterTypeNames, None, None)

class IRasterTypeEnvironment(_esriDataSourcesRaster.IRasterTypeEnvironment):
    _IID = uuid.UUID('3eca95bb-3dd3-4f8b-8bb0-cb47071c456b')
    def get_RasterTypeNames(self):
        '''Method IRasterTypeEnvironment.get_RasterTypeNames

           OUTPUT
            ppRasterTypeNames   : IStringArray**'''
        return super(IRasterTypeEnvironment, self).get_RasterTypeNames()
    def LoadItemURI(self, pBlob):
        '''Method IRasterTypeEnvironment.LoadItemURI

           INPUT
            pBlob               : IMemoryBlobStream*

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IRasterTypeEnvironment, self).LoadItemURI(pBlob)
    def SaveItemURI(self, pItemURI):
        '''Method IRasterTypeEnvironment.SaveItemURI

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            ppBlob              : IMemoryBlobStream**'''
        return super(IRasterTypeEnvironment, self).SaveItemURI(pItemURI)
    def LoadRasterType(self, pBlob):
        '''Method IRasterTypeEnvironment.LoadRasterType

           INPUT
            pBlob               : IMemoryBlobStream*

           OUTPUT
            ppRasterType        : IRasterType**'''
        return super(IRasterTypeEnvironment, self).LoadRasterType(pBlob)
    def SaveRasterType(self, pRasterType):
        '''Method IRasterTypeEnvironment.SaveRasterType

           INPUT
            pRasterType         : IRasterType*

           OUTPUT
            ppBlob              : IMemoryBlobStream**'''
        return super(IRasterTypeEnvironment, self).SaveRasterType(pRasterType)
    def GetTimeStamp(self, FilePath):
        '''Method IRasterTypeEnvironment.GetTimeStamp

           INPUT
            FilePath            : BSTR

           OUTPUT
            pTimeStamp          : DATE*'''
        return super(IRasterTypeEnvironment, self).GetTimeStamp(FilePath)
    def ReplacePath(self, pOldPaths, pNewPaths, inputPath):
        '''Method IRasterTypeEnvironment.ReplacePath

           INPUTS
            pOldPaths           : IStringArray*
            pNewPaths           : IStringArray*
            inputPath           : BSTR

           OUTPUT
            pOutputPath         : BSTR*'''
        return super(IRasterTypeEnvironment, self).ReplacePath(pOldPaths, pNewPaths, inputPath)
    RasterTypeNames = property(get_RasterTypeNames, None, None)

class IRasterTypeEnvironment2(_esriDataSourcesRaster.IRasterTypeEnvironment2):
    _IID = uuid.UUID('fbefe2cd-7605-48b6-9663-e0588776e120')
    def UpdateRasterTypeDefaults(self, pRasterType, pMosaicDataset, pCrawler):
        '''Method IRasterTypeEnvironment2.UpdateRasterTypeDefaults

           INPUTS
            pRasterType         : IRasterType*
            pMosaicDataset      : IMosaicDataset*
            pCrawler            : IDataSourceCrawler*'''
        return super(IRasterTypeEnvironment2, self).UpdateRasterTypeDefaults(pRasterType, pMosaicDataset, pCrawler)
    def get_RasterTypeNames(self):
        '''Method IRasterTypeEnvironment.get_RasterTypeNames (from IRasterTypeEnvironment)

           OUTPUT
            ppRasterTypeNames   : IStringArray**'''
        return super(IRasterTypeEnvironment2, self).get_RasterTypeNames()
    def LoadItemURI(self, pBlob):
        '''Method IRasterTypeEnvironment.LoadItemURI (from IRasterTypeEnvironment)

           INPUT
            pBlob               : IMemoryBlobStream*

           OUTPUT
            ppItemURI           : IItemURI**'''
        return super(IRasterTypeEnvironment2, self).LoadItemURI(pBlob)
    def SaveItemURI(self, pItemURI):
        '''Method IRasterTypeEnvironment.SaveItemURI (from IRasterTypeEnvironment)

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            ppBlob              : IMemoryBlobStream**'''
        return super(IRasterTypeEnvironment2, self).SaveItemURI(pItemURI)
    def LoadRasterType(self, pBlob):
        '''Method IRasterTypeEnvironment.LoadRasterType (from IRasterTypeEnvironment)

           INPUT
            pBlob               : IMemoryBlobStream*

           OUTPUT
            ppRasterType        : IRasterType**'''
        return super(IRasterTypeEnvironment2, self).LoadRasterType(pBlob)
    def SaveRasterType(self, pRasterType):
        '''Method IRasterTypeEnvironment.SaveRasterType (from IRasterTypeEnvironment)

           INPUT
            pRasterType         : IRasterType*

           OUTPUT
            ppBlob              : IMemoryBlobStream**'''
        return super(IRasterTypeEnvironment2, self).SaveRasterType(pRasterType)
    def GetTimeStamp(self, FilePath):
        '''Method IRasterTypeEnvironment.GetTimeStamp (from IRasterTypeEnvironment)

           INPUT
            FilePath            : BSTR

           OUTPUT
            pTimeStamp          : DATE*'''
        return super(IRasterTypeEnvironment2, self).GetTimeStamp(FilePath)
    def ReplacePath(self, pOldPaths, pNewPaths, inputPath):
        '''Method IRasterTypeEnvironment.ReplacePath (from IRasterTypeEnvironment)

           INPUTS
            pOldPaths           : IStringArray*
            pNewPaths           : IStringArray*
            inputPath           : BSTR

           OUTPUT
            pOutputPath         : BSTR*'''
        return super(IRasterTypeEnvironment2, self).ReplacePath(pOldPaths, pNewPaths, inputPath)
    RasterTypeNames = property(get_RasterTypeNames, None, None)

class IRasterTypeDataSourceHandlerParameters(_esriDataSourcesRaster.IRasterTypeDataSourceHandlerParameters):
    _IID = uuid.UUID('5f88e212-6325-4c5a-bb8f-eeae77a56f87')

    def __init__(self, *args, **kw):
        super(IRasterTypeDataSourceHandlerParameters, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_DataSource(self, pvtDataSource):
        '''Method IRasterTypeDataSourceHandlerParameters.put_DataSource

           INPUT
            pvtDataSource       : VARIANT'''
        return super(IRasterTypeDataSourceHandlerParameters, self).put_DataSource(pvtDataSource)
    def get_DataSource(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_DataSource

           OUTPUT
            pvtDataSource       : VARIANT*'''
        return super(IRasterTypeDataSourceHandlerParameters, self).get_DataSource()
    def putref_RasterTypes(self, ppRasterTypes):
        '''Method IRasterTypeDataSourceHandlerParameters.putref_RasterTypes

           INPUT
            ppRasterTypes       : IArray*'''
        return super(IRasterTypeDataSourceHandlerParameters, self).putref_RasterTypes(ppRasterTypes)
    def get_RasterTypes(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_RasterTypes

           OUTPUT
            ppRasterTypes       : IArray**'''
        return super(IRasterTypeDataSourceHandlerParameters, self).get_RasterTypes()
    def putref_TrackCancel(self, ppTrackCancel):
        '''Method IRasterTypeDataSourceHandlerParameters.putref_TrackCancel

           INPUT
            ppTrackCancel       : ITrackCancel*'''
        return super(IRasterTypeDataSourceHandlerParameters, self).putref_TrackCancel(ppTrackCancel)
    def get_TrackCancel(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_TrackCancel

           OUTPUT
            ppTrackCancel       : ITrackCancel**'''
        return super(IRasterTypeDataSourceHandlerParameters, self).get_TrackCancel()
    def put_TryQuickCheckOnly(self, pbTryQuickCheckOnly):
        '''Method IRasterTypeDataSourceHandlerParameters.put_TryQuickCheckOnly

           INPUT
            pbTryQuickCheckOnly : VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters, self).put_TryQuickCheckOnly(pbTryQuickCheckOnly)
    def get_TryQuickCheckOnly(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_TryQuickCheckOnly

           OUTPUT
            pbTryQuickCheckOnly : VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters, self).get_TryQuickCheckOnly()
    def put_StopAtFirstFind(self, pbStopAtFirstFind):
        '''Method IRasterTypeDataSourceHandlerParameters.put_StopAtFirstFind

           INPUT
            pbStopAtFirstFind   : VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters, self).put_StopAtFirstFind(pbStopAtFirstFind)
    def get_StopAtFirstFind(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_StopAtFirstFind

           OUTPUT
            pbStopAtFirstFind   : VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters, self).get_StopAtFirstFind()
    def put_AllowAncillaryDatasets(self, pbAllowAncillaryDatasets):
        '''Method IRasterTypeDataSourceHandlerParameters.put_AllowAncillaryDatasets

           INPUT
            pbAllowAncillaryDatasets: VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters, self).put_AllowAncillaryDatasets(pbAllowAncillaryDatasets)
    def get_AllowAncillaryDatasets(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_AllowAncillaryDatasets

           OUTPUT
            pbAllowAncillaryDatasets: VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters, self).get_AllowAncillaryDatasets()
    AllowAncillaryDatasets = property(get_AllowAncillaryDatasets, put_AllowAncillaryDatasets, None)
    DataSource = property(get_DataSource, put_DataSource, None)
    RasterTypes = property(get_RasterTypes, putref_RasterTypes, None)
    StopAtFirstFind = property(get_StopAtFirstFind, put_StopAtFirstFind, None)
    TrackCancel = property(get_TrackCancel, putref_TrackCancel, None)
    TryQuickCheckOnly = property(get_TryQuickCheckOnly, put_TryQuickCheckOnly, None)

class IRasterTypeDataSourceHandlerParameters2(_esriDataSourcesRaster.IRasterTypeDataSourceHandlerParameters2):
    _IID = uuid.UUID('2127d1ae-1e6f-4b55-8295-ec0d343e5893')

    def __init__(self, *args, **kw):
        super(IRasterTypeDataSourceHandlerParameters2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_RasterTypeParameters(self, ppRasterTypeParameters):
        '''Method IRasterTypeDataSourceHandlerParameters2.putref_RasterTypeParameters

           INPUT
            ppRasterTypeParameters: IPropertySet*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).putref_RasterTypeParameters(ppRasterTypeParameters)
    def get_RasterTypeParameters(self):
        '''Method IRasterTypeDataSourceHandlerParameters2.get_RasterTypeParameters

           OUTPUT
            ppRasterTypeParameters: IPropertySet**'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_RasterTypeParameters()
    def put_AllowBuilderItems(self, pbAllowBuilderItems):
        '''Method IRasterTypeDataSourceHandlerParameters2.put_AllowBuilderItems

           INPUT
            pbAllowBuilderItems : VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).put_AllowBuilderItems(pbAllowBuilderItems)
    def get_AllowBuilderItems(self):
        '''Method IRasterTypeDataSourceHandlerParameters2.get_AllowBuilderItems

           OUTPUT
            pbAllowBuilderItems : VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_AllowBuilderItems()
    def put_AllowRasterDatasets(self, pbAllowRasterDatasets):
        '''Method IRasterTypeDataSourceHandlerParameters2.put_AllowRasterDatasets

           INPUT
            pbAllowRasterDatasets: VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).put_AllowRasterDatasets(pbAllowRasterDatasets)
    def get_AllowRasterDatasets(self):
        '''Method IRasterTypeDataSourceHandlerParameters2.get_AllowRasterDatasets

           OUTPUT
            pbAllowRasterDatasets: VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_AllowRasterDatasets()
    def put_AllowQuickOpen(self, pbAllowQuickOpen):
        '''Method IRasterTypeDataSourceHandlerParameters2.put_AllowQuickOpen

           INPUT
            pbAllowQuickOpen    : VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).put_AllowQuickOpen(pbAllowQuickOpen)
    def get_AllowQuickOpen(self):
        '''Method IRasterTypeDataSourceHandlerParameters2.get_AllowQuickOpen

           OUTPUT
            pbAllowQuickOpen    : VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_AllowQuickOpen()
    def put_DataSource(self, pvtDataSource):
        '''Method IRasterTypeDataSourceHandlerParameters.put_DataSource (from IRasterTypeDataSourceHandlerParameters)

           INPUT
            pvtDataSource       : VARIANT'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).put_DataSource(pvtDataSource)
    def get_DataSource(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_DataSource (from IRasterTypeDataSourceHandlerParameters)

           OUTPUT
            pvtDataSource       : VARIANT*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_DataSource()
    def putref_RasterTypes(self, ppRasterTypes):
        '''Method IRasterTypeDataSourceHandlerParameters.putref_RasterTypes (from IRasterTypeDataSourceHandlerParameters)

           INPUT
            ppRasterTypes       : IArray*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).putref_RasterTypes(ppRasterTypes)
    def get_RasterTypes(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_RasterTypes (from IRasterTypeDataSourceHandlerParameters)

           OUTPUT
            ppRasterTypes       : IArray**'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_RasterTypes()
    def putref_TrackCancel(self, ppTrackCancel):
        '''Method IRasterTypeDataSourceHandlerParameters.putref_TrackCancel (from IRasterTypeDataSourceHandlerParameters)

           INPUT
            ppTrackCancel       : ITrackCancel*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).putref_TrackCancel(ppTrackCancel)
    def get_TrackCancel(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_TrackCancel (from IRasterTypeDataSourceHandlerParameters)

           OUTPUT
            ppTrackCancel       : ITrackCancel**'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_TrackCancel()
    def put_TryQuickCheckOnly(self, pbTryQuickCheckOnly):
        '''Method IRasterTypeDataSourceHandlerParameters.put_TryQuickCheckOnly (from IRasterTypeDataSourceHandlerParameters)

           INPUT
            pbTryQuickCheckOnly : VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).put_TryQuickCheckOnly(pbTryQuickCheckOnly)
    def get_TryQuickCheckOnly(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_TryQuickCheckOnly (from IRasterTypeDataSourceHandlerParameters)

           OUTPUT
            pbTryQuickCheckOnly : VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_TryQuickCheckOnly()
    def put_StopAtFirstFind(self, pbStopAtFirstFind):
        '''Method IRasterTypeDataSourceHandlerParameters.put_StopAtFirstFind (from IRasterTypeDataSourceHandlerParameters)

           INPUT
            pbStopAtFirstFind   : VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).put_StopAtFirstFind(pbStopAtFirstFind)
    def get_StopAtFirstFind(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_StopAtFirstFind (from IRasterTypeDataSourceHandlerParameters)

           OUTPUT
            pbStopAtFirstFind   : VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_StopAtFirstFind()
    def put_AllowAncillaryDatasets(self, pbAllowAncillaryDatasets):
        '''Method IRasterTypeDataSourceHandlerParameters.put_AllowAncillaryDatasets (from IRasterTypeDataSourceHandlerParameters)

           INPUT
            pbAllowAncillaryDatasets: VARIANT_BOOL'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).put_AllowAncillaryDatasets(pbAllowAncillaryDatasets)
    def get_AllowAncillaryDatasets(self):
        '''Method IRasterTypeDataSourceHandlerParameters.get_AllowAncillaryDatasets (from IRasterTypeDataSourceHandlerParameters)

           OUTPUT
            pbAllowAncillaryDatasets: VARIANT_BOOL*'''
        return super(IRasterTypeDataSourceHandlerParameters2, self).get_AllowAncillaryDatasets()
    AllowAncillaryDatasets = property(get_AllowAncillaryDatasets, put_AllowAncillaryDatasets, None)
    AllowBuilderItems = property(get_AllowBuilderItems, put_AllowBuilderItems, None)
    AllowQuickOpen = property(get_AllowQuickOpen, put_AllowQuickOpen, None)
    AllowRasterDatasets = property(get_AllowRasterDatasets, put_AllowRasterDatasets, None)
    DataSource = property(get_DataSource, put_DataSource, None)
    RasterTypeParameters = property(get_RasterTypeParameters, putref_RasterTypeParameters, None)
    RasterTypes = property(get_RasterTypes, putref_RasterTypes, None)
    StopAtFirstFind = property(get_StopAtFirstFind, put_StopAtFirstFind, None)
    TrackCancel = property(get_TrackCancel, putref_TrackCancel, None)
    TryQuickCheckOnly = property(get_TryQuickCheckOnly, put_TryQuickCheckOnly, None)

class IRasterTypeDataSourceHandler(_esriDataSourcesRaster.IRasterTypeDataSourceHandler):
    _IID = uuid.UUID('ca1d1ab9-63cc-40e6-ac24-5a69d2bbde4d')
    def CanOpen(self, pParameters):
        '''Method IRasterTypeDataSourceHandler.CanOpen

           INPUT
            pParameters         : IRasterTypeDataSourceHandlerParameters*

           OUTPUT
            ppEligibleRasterTypes: IArray**'''
        return super(IRasterTypeDataSourceHandler, self).CanOpen(pParameters)
    def QuerySupportedFilesInFolder(self, pParameters):
        '''Method IRasterTypeDataSourceHandler.QuerySupportedFilesInFolder

           INPUT
            pParameters         : IRasterTypeDataSourceHandlerParameters*

           OUTPUTS
            ppSupportedFilePaths: IStringArray**
            ppAssociatedRasterTypes: IArray**'''
        return super(IRasterTypeDataSourceHandler, self).QuerySupportedFilesInFolder(pParameters)
    def Open(self, pParameters):
        '''Method IRasterTypeDataSourceHandler.Open

           INPUT
            pParameters         : IRasterTypeDataSourceHandlerParameters*

           OUTPUT
            ppBuilderItem       : IBuilderItem**'''
        return super(IRasterTypeDataSourceHandler, self).Open(pParameters)

class IRasterTypeDataSourceHandler2(_esriDataSourcesRaster.IRasterTypeDataSourceHandler2):
    _IID = uuid.UUID('d14b8350-b7ce-4f80-b61d-5e93fa4adbdb')
    def OpenEx(self, pParameters):
        '''Method IRasterTypeDataSourceHandler2.OpenEx

           INPUT
            pParameters         : IRasterTypeDataSourceHandlerParameters*

           OUTPUT
            ppDatasetsOrItems   : IArray**'''
        return super(IRasterTypeDataSourceHandler2, self).OpenEx(pParameters)
    def CanOpen(self, pParameters):
        '''Method IRasterTypeDataSourceHandler.CanOpen (from IRasterTypeDataSourceHandler)

           INPUT
            pParameters         : IRasterTypeDataSourceHandlerParameters*

           OUTPUT
            ppEligibleRasterTypes: IArray**'''
        return super(IRasterTypeDataSourceHandler2, self).CanOpen(pParameters)
    def QuerySupportedFilesInFolder(self, pParameters):
        '''Method IRasterTypeDataSourceHandler.QuerySupportedFilesInFolder (from IRasterTypeDataSourceHandler)

           INPUT
            pParameters         : IRasterTypeDataSourceHandlerParameters*

           OUTPUTS
            ppSupportedFilePaths: IStringArray**
            ppAssociatedRasterTypes: IArray**'''
        return super(IRasterTypeDataSourceHandler2, self).QuerySupportedFilesInFolder(pParameters)
    def Open(self, pParameters):
        '''Method IRasterTypeDataSourceHandler.Open (from IRasterTypeDataSourceHandler)

           INPUT
            pParameters         : IRasterTypeDataSourceHandlerParameters*

           OUTPUT
            ppBuilderItem       : IBuilderItem**'''
        return super(IRasterTypeDataSourceHandler2, self).Open(pParameters)

class IRasterTypeItemURI(_esriDataSourcesRaster.IRasterTypeItemURI):
    _IID = uuid.UUID('28c1476a-cc64-4254-9082-44a9893b54d3')

    def __init__(self, *args, **kw):
        super(IRasterTypeItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Items(self, ppItemURIArray):
        '''Method IRasterTypeItemURI.putref_Items

           INPUT
            ppItemURIArray      : IItemURIArray*'''
        return super(IRasterTypeItemURI, self).putref_Items(ppItemURIArray)
    def get_Items(self):
        '''Method IRasterTypeItemURI.get_Items

           OUTPUT
            ppItemURIArray      : IItemURIArray**'''
        return super(IRasterTypeItemURI, self).get_Items()
    def put_ItemTemplateIndex(self, pTemplateIndex):
        '''Method IRasterTypeItemURI.put_ItemTemplateIndex

           INPUT
            pTemplateIndex      : long'''
        return super(IRasterTypeItemURI, self).put_ItemTemplateIndex(pTemplateIndex)
    def get_ItemTemplateIndex(self):
        '''Method IRasterTypeItemURI.get_ItemTemplateIndex

           OUTPUT
            pTemplateIndex      : long*'''
        return super(IRasterTypeItemURI, self).get_ItemTemplateIndex()
    ItemTemplateIndex = property(get_ItemTemplateIndex, put_ItemTemplateIndex, None)
    Items = property(get_Items, putref_Items, None)

class IRasterTypeItemURI2(_esriDataSourcesRaster.IRasterTypeItemURI2):
    _IID = uuid.UUID('fe3640c8-162c-4396-b40a-97f0f4ede0f6')

    def __init__(self, *args, **kw):
        super(IRasterTypeItemURI2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ItemTemplateTag(self, pItemTemplateTag):
        '''Method IRasterTypeItemURI2.put_ItemTemplateTag

           INPUT
            pItemTemplateTag    : BSTR'''
        return super(IRasterTypeItemURI2, self).put_ItemTemplateTag(pItemTemplateTag)
    def get_ItemTemplateTag(self):
        '''Method IRasterTypeItemURI2.get_ItemTemplateTag

           OUTPUT
            pItemTemplateTag    : BSTR*'''
        return super(IRasterTypeItemURI2, self).get_ItemTemplateTag()
    def put_FunctionTemplateName(self, pFunctionTemplateName):
        '''Method IRasterTypeItemURI2.put_FunctionTemplateName

           INPUT
            pFunctionTemplateName: BSTR'''
        return super(IRasterTypeItemURI2, self).put_FunctionTemplateName(pFunctionTemplateName)
    def get_FunctionTemplateName(self):
        '''Method IRasterTypeItemURI2.get_FunctionTemplateName

           OUTPUT
            pFunctionTemplateName: BSTR*'''
        return super(IRasterTypeItemURI2, self).get_FunctionTemplateName()
    def put_PrimaryChainConnector(self, pPrimaryChainConnector):
        '''Method IRasterTypeItemURI2.put_PrimaryChainConnector

           INPUT
            pPrimaryChainConnector: BSTR'''
        return super(IRasterTypeItemURI2, self).put_PrimaryChainConnector(pPrimaryChainConnector)
    def get_PrimaryChainConnector(self):
        '''Method IRasterTypeItemURI2.get_PrimaryChainConnector

           OUTPUT
            pPrimaryChainConnector: BSTR*'''
        return super(IRasterTypeItemURI2, self).get_PrimaryChainConnector()
    def putref_Items(self, ppItemURIArray):
        '''Method IRasterTypeItemURI.putref_Items (from IRasterTypeItemURI)

           INPUT
            ppItemURIArray      : IItemURIArray*'''
        return super(IRasterTypeItemURI2, self).putref_Items(ppItemURIArray)
    def get_Items(self):
        '''Method IRasterTypeItemURI.get_Items (from IRasterTypeItemURI)

           OUTPUT
            ppItemURIArray      : IItemURIArray**'''
        return super(IRasterTypeItemURI2, self).get_Items()
    def put_ItemTemplateIndex(self, pTemplateIndex):
        '''Method IRasterTypeItemURI.put_ItemTemplateIndex (from IRasterTypeItemURI)

           INPUT
            pTemplateIndex      : long'''
        return super(IRasterTypeItemURI2, self).put_ItemTemplateIndex(pTemplateIndex)
    def get_ItemTemplateIndex(self):
        '''Method IRasterTypeItemURI.get_ItemTemplateIndex (from IRasterTypeItemURI)

           OUTPUT
            pTemplateIndex      : long*'''
        return super(IRasterTypeItemURI2, self).get_ItemTemplateIndex()
    FunctionTemplateName = property(get_FunctionTemplateName, put_FunctionTemplateName, None)
    ItemTemplateIndex = property(get_ItemTemplateIndex, put_ItemTemplateIndex, None)
    ItemTemplateTag = property(get_ItemTemplateTag, put_ItemTemplateTag, None)
    Items = property(get_Items, putref_Items, None)
    PrimaryChainConnector = property(get_PrimaryChainConnector, put_PrimaryChainConnector, None)

class ICompositeItemURI(_esriDataSourcesRaster.ICompositeItemURI):
    _IID = uuid.UUID('511ce406-16c6-4c8d-8bd4-d4b00fafb9f1')

    def __init__(self, *args, **kw):
        super(ICompositeItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_KeyPartNames(self, ppKeyPartNames):
        '''Method ICompositeItemURI.putref_KeyPartNames

           INPUT
            ppKeyPartNames      : IStringArray*'''
        return super(ICompositeItemURI, self).putref_KeyPartNames(ppKeyPartNames)
    def get_KeyPartNames(self):
        '''Method ICompositeItemURI.get_KeyPartNames

           OUTPUT
            ppKeyPartNames      : IStringArray**'''
        return super(ICompositeItemURI, self).get_KeyPartNames()
    def putref_AuxiliaryPartNames(self, ppAuxPartNames):
        '''Method ICompositeItemURI.putref_AuxiliaryPartNames

           INPUT
            ppAuxPartNames      : IStringArray*'''
        return super(ICompositeItemURI, self).putref_AuxiliaryPartNames(ppAuxPartNames)
    def get_AuxiliaryPartNames(self):
        '''Method ICompositeItemURI.get_AuxiliaryPartNames

           OUTPUT
            ppAuxPartNames      : IStringArray**'''
        return super(ICompositeItemURI, self).get_AuxiliaryPartNames()
    AuxiliaryPartNames = property(get_AuxiliaryPartNames, putref_AuxiliaryPartNames, None)
    KeyPartNames = property(get_KeyPartNames, putref_KeyPartNames, None)

class IIndexedItemURI(_esriDataSourcesRaster.IIndexedItemURI):
    _IID = uuid.UUID('8b7f1a06-3a1f-4802-a5f7-5379750e5884')

    def __init__(self, *args, **kw):
        super(IIndexedItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_DatasetName(self, ppDatasetName):
        '''Method IIndexedItemURI.putref_DatasetName

           INPUT
            ppDatasetName       : IName*'''
        return super(IIndexedItemURI, self).putref_DatasetName(ppDatasetName)
    def get_DatasetName(self):
        '''Method IIndexedItemURI.get_DatasetName

           OUTPUT
            ppDatasetName       : IName**'''
        return super(IIndexedItemURI, self).get_DatasetName()
    def put_ItemID(self, pItemID):
        '''Method IIndexedItemURI.put_ItemID

           INPUT
            pItemID             : long'''
        return super(IIndexedItemURI, self).put_ItemID(pItemID)
    def get_ItemID(self):
        '''Method IIndexedItemURI.get_ItemID

           OUTPUT
            pItemID             : long*'''
        return super(IIndexedItemURI, self).get_ItemID()
    DatasetName = property(get_DatasetName, putref_DatasetName, None)
    ItemID = property(get_ItemID, put_ItemID, None)

class IFileItemURI(_esriDataSourcesRaster.IFileItemURI):
    _IID = uuid.UUID('522e65b4-ff5e-4e61-ac22-a5ba51a73f12')

    def __init__(self, *args, **kw):
        super(IFileItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_FilePath(self, pFilePath):
        '''Method IFileItemURI.put_FilePath

           INPUT
            pFilePath           : BSTR'''
        return super(IFileItemURI, self).put_FilePath(pFilePath)
    def get_FilePath(self):
        '''Method IFileItemURI.get_FilePath

           OUTPUT
            pFilePath           : BSTR*'''
        return super(IFileItemURI, self).get_FilePath()
    FilePath = property(get_FilePath, put_FilePath, None)

class IRPFItemURI(_esriDataSourcesRaster.IRPFItemURI):
    _IID = uuid.UUID('011b6933-85c1-408b-9a2e-d7e676936063')

    def __init__(self, *args, **kw):
        super(IRPFItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_ProductionDate(self, pProductionDate):
        '''Method IRPFItemURI.put_ProductionDate

           INPUT
            pProductionDate     : BSTR'''
        return super(IRPFItemURI, self).put_ProductionDate(pProductionDate)
    def get_ProductionDate(self):
        '''Method IRPFItemURI.get_ProductionDate

           OUTPUT
            pProductionDate     : BSTR*'''
        return super(IRPFItemURI, self).get_ProductionDate()
    def get_DTEDEdition(self):
        '''Method IRPFItemURI.get_DTEDEdition

           OUTPUT
            pEdition            : BSTR*'''
        return super(IRPFItemURI, self).get_DTEDEdition()
    def put_DTEDEdition(self, pEdition):
        '''Method IRPFItemURI.put_DTEDEdition

           INPUT
            pEdition            : BSTR'''
        return super(IRPFItemURI, self).put_DTEDEdition(pEdition)
    def put_Version(self, pVersion):
        '''Method IRPFItemURI.put_Version

           INPUT
            pVersion            : BSTR'''
        return super(IRPFItemURI, self).put_Version(pVersion)
    def get_Version(self):
        '''Method IRPFItemURI.get_Version

           OUTPUT
            pVersion            : BSTR*'''
        return super(IRPFItemURI, self).get_Version()
    def put_CompilationDate(self, pCompilationDate):
        '''Method IRPFItemURI.put_CompilationDate

           INPUT
            pCompilationDate    : BSTR'''
        return super(IRPFItemURI, self).put_CompilationDate(pCompilationDate)
    def get_CompilationDate(self):
        '''Method IRPFItemURI.get_CompilationDate

           OUTPUT
            pCompilationDate    : BSTR*'''
        return super(IRPFItemURI, self).get_CompilationDate()
    def put_MaintenanceDate(self, pMaintenanceDate):
        '''Method IRPFItemURI.put_MaintenanceDate

           INPUT
            pMaintenanceDate    : BSTR'''
        return super(IRPFItemURI, self).put_MaintenanceDate(pMaintenanceDate)
    def get_MaintenanceDate(self):
        '''Method IRPFItemURI.get_MaintenanceDate

           OUTPUT
            pMaintenanceDate    : BSTR*'''
        return super(IRPFItemURI, self).get_MaintenanceDate()
    def put_Latitude(self, pLatitude):
        '''Method IRPFItemURI.put_Latitude

           INPUT
            pLatitude           : BSTR'''
        return super(IRPFItemURI, self).put_Latitude(pLatitude)
    def get_Latitude(self):
        '''Method IRPFItemURI.get_Latitude

           OUTPUT
            pLatitude           : BSTR*'''
        return super(IRPFItemURI, self).get_Latitude()
    def put_Longitude(self, pLongitude):
        '''Method IRPFItemURI.put_Longitude

           INPUT
            pLongitude          : BSTR'''
        return super(IRPFItemURI, self).put_Longitude(pLongitude)
    def get_Longitude(self):
        '''Method IRPFItemURI.get_Longitude

           OUTPUT
            pLongitude          : BSTR*'''
        return super(IRPFItemURI, self).get_Longitude()
    CompilationDate = property(get_CompilationDate, put_CompilationDate, None)
    DTEDEdition = property(get_DTEDEdition, put_DTEDEdition, None)
    Latitude = property(get_Latitude, put_Latitude, None)
    Longitude = property(get_Longitude, put_Longitude, None)
    MaintenanceDate = property(get_MaintenanceDate, put_MaintenanceDate, None)
    ProductionDate = property(get_ProductionDate, put_ProductionDate, None)
    Version = property(get_Version, put_Version, None)

class IURIProductNameFilter(_esriDataSourcesRaster.IURIProductNameFilter):
    _IID = uuid.UUID('b137cf0d-5ebe-44ab-8a6d-1634c043d342')

    def __init__(self, *args, **kw):
        super(IURIProductNameFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_ProductNames(self, ppProductNames):
        '''Method IURIProductNameFilter.putref_ProductNames

           INPUT
            ppProductNames      : IStringArray*'''
        return super(IURIProductNameFilter, self).putref_ProductNames(ppProductNames)
    def get_ProductNames(self):
        '''Method IURIProductNameFilter.get_ProductNames

           OUTPUT
            ppProductNames      : IStringArray**'''
        return super(IURIProductNameFilter, self).get_ProductNames()
    ProductNames = property(get_ProductNames, putref_ProductNames, None)

class IURIPropertiesFilter(_esriDataSourcesRaster.IURIPropertiesFilter):
    _IID = uuid.UUID('9556e694-eff8-41d6-9d4a-cd7f8a490722')

    def __init__(self, *args, **kw):
        super(IURIPropertiesFilter, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Values(self, ppValues):
        '''Method IURIPropertiesFilter.putref_Values

           INPUT
            ppValues            : IPropertySet*'''
        return super(IURIPropertiesFilter, self).putref_Values(ppValues)
    def get_Values(self):
        '''Method IURIPropertiesFilter.get_Values

           OUTPUT
            ppValues            : IPropertySet**'''
        return super(IURIPropertiesFilter, self).get_Values()
    Values = property(get_Values, putref_Values, None)

class ITableBuilder(_esriDataSourcesRaster.ITableBuilder):
    _IID = uuid.UUID('30e5ab73-f4fd-4baf-a47f-25928f13e76d')

    def __init__(self, *args, **kw):
        super(ITableBuilder, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def put_NameField(self, pNameField):
        '''Method ITableBuilder.put_NameField

           INPUT
            pNameField          : BSTR'''
        return super(ITableBuilder, self).put_NameField(pNameField)
    def get_NameField(self):
        '''Method ITableBuilder.get_NameField

           OUTPUT
            pNameField          : BSTR*'''
        return super(ITableBuilder, self).get_NameField()
    def put_RasterField(self, pRasterField):
        '''Method ITableBuilder.put_RasterField

           INPUT
            pRasterField        : BSTR'''
        return super(ITableBuilder, self).put_RasterField(pRasterField)
    def get_RasterField(self):
        '''Method ITableBuilder.get_RasterField

           OUTPUT
            pRasterField        : BSTR*'''
        return super(ITableBuilder, self).get_RasterField()
    def put_GroupField(self, pGroupField):
        '''Method ITableBuilder.put_GroupField

           INPUT
            pGroupField         : BSTR'''
        return super(ITableBuilder, self).put_GroupField(pGroupField)
    def get_GroupField(self):
        '''Method ITableBuilder.get_GroupField

           OUTPUT
            pGroupField         : BSTR*'''
        return super(ITableBuilder, self).get_GroupField()
    def put_TagField(self, pTagField):
        '''Method ITableBuilder.put_TagField

           INPUT
            pTagField           : BSTR'''
        return super(ITableBuilder, self).put_TagField(pTagField)
    def get_TagField(self):
        '''Method ITableBuilder.get_TagField

           OUTPUT
            pTagField           : BSTR*'''
        return super(ITableBuilder, self).get_TagField()
    GroupField = property(get_GroupField, put_GroupField, None)
    NameField = property(get_NameField, put_NameField, None)
    RasterField = property(get_RasterField, put_RasterField, None)
    TagField = property(get_TagField, put_TagField, None)

class IMosaicWorkspaceExtension(_esriDataSourcesRaster.IMosaicWorkspaceExtension):
    _IID = uuid.UUID('6c2cc1c8-88e9-41b6-9dfc-28b477a4bf7d')
    def CreateMosaicDataset(self, Name, pSpatialReference, pParameters, configurationKeyword):
        '''Method IMosaicWorkspaceExtension.CreateMosaicDataset

           INPUTS
            Name                : BSTR
            pSpatialReference   : ISpatialReference*
            pParameters         : ICreateMosaicDatasetParameters*
            configurationKeyword: BSTR

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IMosaicWorkspaceExtension, self).CreateMosaicDataset(Name, pSpatialReference, pParameters, configurationKeyword)
    def CreateReferencedMosaicDataset(self, Name, pSpatialReference, pExternalCatalog, DefinitionQuery, pParameters, configurationKeyword):
        '''Method IMosaicWorkspaceExtension.CreateReferencedMosaicDataset

           INPUTS
            Name                : BSTR
            pSpatialReference   : ISpatialReference*
            pExternalCatalog    : IRasterCatalog*
            DefinitionQuery     : BSTR
            pParameters         : ICreateMosaicDatasetParameters*
            configurationKeyword: BSTR

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IMosaicWorkspaceExtension, self).CreateReferencedMosaicDataset(Name, pSpatialReference, pExternalCatalog, DefinitionQuery, pParameters, configurationKeyword)
    def OpenMosaicDataset(self, Name):
        '''Method IMosaicWorkspaceExtension.OpenMosaicDataset

           INPUT
            Name                : BSTR

           OUTPUT
            ppMosaicDataset     : IMosaicDataset**'''
        return super(IMosaicWorkspaceExtension, self).OpenMosaicDataset(Name)
    def DeleteMosaicDataset(self, Name):
        '''Method IMosaicWorkspaceExtension.DeleteMosaicDataset

           INPUT
            Name                : BSTR'''
        return super(IMosaicWorkspaceExtension, self).DeleteMosaicDataset(Name)

class IMosaicWorkspaceExtensionHelper(_esriDataSourcesRaster.IMosaicWorkspaceExtensionHelper):
    _IID = uuid.UUID('80f8593e-099c-4b2a-b0a7-cc4ccebce522')
    def FindExtension(self, pWorkspace):
        '''Method IMosaicWorkspaceExtensionHelper.FindExtension

           INPUT
            pWorkspace          : IWorkspace*

           OUTPUT
            ppExtension         : IMosaicWorkspaceExtension**'''
        return super(IMosaicWorkspaceExtensionHelper, self).FindExtension(pWorkspace)

class IRasterServiceHelper(_esriDataSourcesRaster.IRasterServiceHelper):
    _IID = uuid.UUID('57326724-e6ca-4162-9de3-11510201cc30')
    def Open(self, pName):
        '''Method IRasterServiceHelper.Open

           INPUT
            pName               : IName*

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterServiceHelper, self).Open(pName)
    def OpenFromFile(self, urlString):
        '''Method IRasterServiceHelper.OpenFromFile

           INPUT
            urlString           : BSTR

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterServiceHelper, self).OpenFromFile(urlString)

class IRasterServiceHelper2(_esriDataSourcesRaster.IRasterServiceHelper2):
    _IID = uuid.UUID('6ee84cb4-696c-4cba-b544-5a153e1a20eb')
    def OpenWMSConnection(self, pName, pConnectionProperties, pWMSParameters):
        '''Method IRasterServiceHelper2.OpenWMSConnection

           INPUTS
            pName               : IName*
            pConnectionProperties: IPropertySet*
            pWMSParameters      : IPropertySet*

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterServiceHelper2, self).OpenWMSConnection(pName, pConnectionProperties, pWMSParameters)
    def OpenFromURL(self, URL, RasterTypeName, pWMSParameters):
        '''Method IRasterServiceHelper2.OpenFromURL

           INPUTS
            URL                 : BSTR
            RasterTypeName      : BSTR
            pWMSParameters      : IPropertySet*

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterServiceHelper2, self).OpenFromURL(URL, RasterTypeName, pWMSParameters)
    def GetLayerPropertiesFromURL(self, URL):
        '''Method IRasterServiceHelper2.GetLayerPropertiesFromURL

           INPUT
            URL                 : BSTR

           OUTPUT
            ppLayerProps        : IPropertySet**'''
        return super(IRasterServiceHelper2, self).GetLayerPropertiesFromURL(URL)
    def Open(self, pName):
        '''Method IRasterServiceHelper.Open (from IRasterServiceHelper)

           INPUT
            pName               : IName*

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterServiceHelper2, self).Open(pName)
    def OpenFromFile(self, urlString):
        '''Method IRasterServiceHelper.OpenFromFile (from IRasterServiceHelper)

           INPUT
            urlString           : BSTR

           OUTPUT
            ppDataset           : IRasterDataset**'''
        return super(IRasterServiceHelper2, self).OpenFromFile(urlString)

class IItemURICompare(_esriDataSourcesRaster.IItemURICompare):
    _IID = uuid.UUID('ce980784-6e16-46da-a51a-d973e93d18ae')
    def Compare(self, pItemURI):
        '''Method IItemURICompare.Compare

           INPUT
            pItemURI            : IItemURI*

           OUTPUT
            pResult             : long*'''
        return super(IItemURICompare, self).Compare(pItemURI)

class IItemPathsQuery(_esriDataSourcesRaster.IItemPathsQuery):
    _IID = uuid.UUID('bbb69b14-c57a-47e4-9416-35cfd44f6d93')

    def __init__(self, *args, **kw):
        super(IItemPathsQuery, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_QueryPathsParameters(self):
        '''Method IItemPathsQuery.get_QueryPathsParameters

           OUTPUT
            ppQueryPathsParameters: IQueryPathsParameters**'''
        return super(IItemPathsQuery, self).get_QueryPathsParameters()
    def putref_QueryPathsParameters(self, ppQueryPathsParameters):
        '''Method IItemPathsQuery.putref_QueryPathsParameters

           INPUT
            ppQueryPathsParameters: IQueryPathsParameters*'''
        return super(IItemPathsQuery, self).putref_QueryPathsParameters(ppQueryPathsParameters)
    def get_MosaicDatasetPaths(self):
        '''Method IItemPathsQuery.get_MosaicDatasetPaths

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IItemPathsQuery, self).get_MosaicDatasetPaths()
    def GetItemPaths(self, pRow):
        '''Method IItemPathsQuery.GetItemPaths

           INPUT
            pRow                : IRow*

           OUTPUT
            ppItemPaths         : IStringArray**'''
        return super(IItemPathsQuery, self).GetItemPaths(pRow)
    def ExportPaths(self, bQueryMosaicPaths, bQueryCatalogItemPaths, exportTableName, pWorkspace, configurationKeyword, pTrackCancel):
        '''Method IItemPathsQuery.ExportPaths

           INPUTS
            bQueryMosaicPaths   : VARIANT_BOOL
            bQueryCatalogItemPaths: VARIANT_BOOL
            exportTableName     : BSTR
            pWorkspace          : IWorkspace*
            configurationKeyword: BSTR
            pTrackCancel        : ITrackCancel*'''
        return super(IItemPathsQuery, self).ExportPaths(bQueryMosaicPaths, bQueryCatalogItemPaths, exportTableName, pWorkspace, configurationKeyword, pTrackCancel)
    MosaicDatasetPaths = property(get_MosaicDatasetPaths, None, None)
    QueryPathsParameters = property(get_QueryPathsParameters, putref_QueryPathsParameters, None)

class IItemPathsQuery2(_esriDataSourcesRaster.IItemPathsQuery2):
    _IID = uuid.UUID('e85a7589-1ad8-4acc-9dcd-f7c32f4239e7')

    def __init__(self, *args, **kw):
        super(IItemPathsQuery2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetRasterTypePaths(self, pRasterType):
        '''Method IItemPathsQuery2.GetRasterTypePaths

           INPUT
            pRasterType         : IRasterType*

           OUTPUT
            ppRasterTypePaths   : IStringArray**'''
        return super(IItemPathsQuery2, self).GetRasterTypePaths(pRasterType)
    def get_QueryPathsParameters(self):
        '''Method IItemPathsQuery.get_QueryPathsParameters (from IItemPathsQuery)

           OUTPUT
            ppQueryPathsParameters: IQueryPathsParameters**'''
        return super(IItemPathsQuery2, self).get_QueryPathsParameters()
    def putref_QueryPathsParameters(self, ppQueryPathsParameters):
        '''Method IItemPathsQuery.putref_QueryPathsParameters (from IItemPathsQuery)

           INPUT
            ppQueryPathsParameters: IQueryPathsParameters*'''
        return super(IItemPathsQuery2, self).putref_QueryPathsParameters(ppQueryPathsParameters)
    def get_MosaicDatasetPaths(self):
        '''Method IItemPathsQuery.get_MosaicDatasetPaths (from IItemPathsQuery)

           OUTPUT
            ppPaths             : IStringArray**'''
        return super(IItemPathsQuery2, self).get_MosaicDatasetPaths()
    def GetItemPaths(self, pRow):
        '''Method IItemPathsQuery.GetItemPaths (from IItemPathsQuery)

           INPUT
            pRow                : IRow*

           OUTPUT
            ppItemPaths         : IStringArray**'''
        return super(IItemPathsQuery2, self).GetItemPaths(pRow)
    def ExportPaths(self, bQueryMosaicPaths, bQueryCatalogItemPaths, exportTableName, pWorkspace, configurationKeyword, pTrackCancel):
        '''Method IItemPathsQuery.ExportPaths (from IItemPathsQuery)

           INPUTS
            bQueryMosaicPaths   : VARIANT_BOOL
            bQueryCatalogItemPaths: VARIANT_BOOL
            exportTableName     : BSTR
            pWorkspace          : IWorkspace*
            configurationKeyword: BSTR
            pTrackCancel        : ITrackCancel*'''
        return super(IItemPathsQuery2, self).ExportPaths(bQueryMosaicPaths, bQueryCatalogItemPaths, exportTableName, pWorkspace, configurationKeyword, pTrackCancel)
    MosaicDatasetPaths = property(get_MosaicDatasetPaths, None, None)
    QueryPathsParameters = property(get_QueryPathsParameters, putref_QueryPathsParameters, None)

class IMultiPartItemURI(_esriDataSourcesRaster.IMultiPartItemURI):
    _IID = uuid.UUID('be8282f6-a3b2-4b38-ad61-54444bc1809f')

    def __init__(self, *args, **kw):
        super(IMultiPartItemURI, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def putref_Parts(self, ppItemURIArray):
        '''Method IMultiPartItemURI.putref_Parts

           INPUT
            ppItemURIArray      : IItemURIArray*'''
        return super(IMultiPartItemURI, self).putref_Parts(ppItemURIArray)
    def get_Parts(self):
        '''Method IMultiPartItemURI.get_Parts

           OUTPUT
            ppItemURIArray      : IItemURIArray**'''
        return super(IMultiPartItemURI, self).get_Parts()
    Parts = property(get_Parts, putref_Parts, None)

class IAISImageServerManager(_esriDataSourcesRaster.IAISImageServerManager):
    _IID = uuid.UUID('386959af-5544-4846-ba4b-934e1408008b')
    def Connect(self, serverHost, serverPort):
        '''Method IAISImageServerManager.Connect

           INPUTS
            serverHost          : BSTR
            serverPort          : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).Connect(serverHost, serverPort)
    def StartServer(self, serverHost):
        '''Method IAISImageServerManager.StartServer

           INPUT
            serverHost          : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).StartServer(serverHost)
    def StopServer(self):
        '''Method IAISImageServerManager.StopServer

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).StopServer()
    def GetServerInfo(self):
        '''Method IAISImageServerManager.GetServerInfo

           OUTPUT
            serverInfo          : BSTR*'''
        return super(IAISImageServerManager, self).GetServerInfo()
    def GetServerConfiguration(self):
        '''Method IAISImageServerManager.GetServerConfiguration

           OUTPUT
            serverConfigXml     : BSTR*'''
        return super(IAISImageServerManager, self).GetServerConfiguration()
    def UpdateServerConfiguration(self, serverConfigXml):
        '''Method IAISImageServerManager.UpdateServerConfiguration

           INPUT
            serverConfigXml     : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).UpdateServerConfiguration(serverConfigXml)
    def GetServiceProviderConfiguration(self, ispName):
        '''Method IAISImageServerManager.GetServiceProviderConfiguration

           INPUT
            ispName             : BSTR

           OUTPUT
            configXml           : BSTR*'''
        return super(IAISImageServerManager, self).GetServiceProviderConfiguration(ispName)
    def UpdateServiceProviderConfiguration(self, ispName, ispConfigXml):
        '''Method IAISImageServerManager.UpdateServiceProviderConfiguration

           INPUTS
            ispName             : BSTR
            ispConfigXml        : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).UpdateServiceProviderConfiguration(ispName, ispConfigXml)
    def StartServiceProvider(self, ispName):
        '''Method IAISImageServerManager.StartServiceProvider

           INPUT
            ispName             : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).StartServiceProvider(ispName)
    def StopServiceProvider(self, ispName):
        '''Method IAISImageServerManager.StopServiceProvider

           INPUT
            ispName             : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).StopServiceProvider(ispName)
    def AddServiceProvider(self, ispName, ispHostMachine, ispHostPort):
        '''Method IAISImageServerManager.AddServiceProvider

           INPUTS
            ispName             : BSTR
            ispHostMachine      : BSTR
            ispHostPort         : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).AddServiceProvider(ispName, ispHostMachine, ispHostPort)
    def RemoveServiceProvider(self, ispName):
        '''Method IAISImageServerManager.RemoveServiceProvider

           INPUT
            ispName             : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).RemoveServiceProvider(ispName)
    def GetServiceConfiguration(self):
        '''Method IAISImageServerManager.GetServiceConfiguration

           OUTPUT
            serviceConfigXml    : BSTR*'''
        return super(IAISImageServerManager, self).GetServiceConfiguration()
    def UpdateServiceConfiguration(self, serviceConfigXml):
        '''Method IAISImageServerManager.UpdateServiceConfiguration

           INPUT
            serviceConfigXml    : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).UpdateServiceConfiguration(serviceConfigXml)
    def StartService(self, serviceName):
        '''Method IAISImageServerManager.StartService

           INPUT
            serviceName         : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).StartService(serviceName)
    def StopService(self, serviceName):
        '''Method IAISImageServerManager.StopService

           INPUT
            serviceName         : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).StopService(serviceName)
    def RemoveService(self, serviceName, ispNames):
        '''Method IAISImageServerManager.RemoveService

           INPUTS
            serviceName         : BSTR
            ispNames            : SAFEARRAY**

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).RemoveService(serviceName, ispNames)
    def AddService(self, servicePath, serviceName, ServiceProperties, ispNames):
        '''Method IAISImageServerManager.AddService

           INPUTS
            servicePath         : BSTR
            serviceName         : BSTR
            ServiceProperties   : BSTR
            ispNames            : SAFEARRAY**

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).AddService(servicePath, serviceName, ServiceProperties, ispNames)
    def GetServiceDefinitionName(self, servicePath):
        '''Method IAISImageServerManager.GetServiceDefinitionName

           INPUT
            servicePath         : BSTR

           OUTPUT
            serviceName         : BSTR*'''
        return super(IAISImageServerManager, self).GetServiceDefinitionName(servicePath)
    def RefreshService(self, serviceName):
        '''Method IAISImageServerManager.RefreshService

           INPUT
            serviceName         : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).RefreshService(serviceName)
    def RefreshAllServices(self, retStatus):
        '''Method IAISImageServerManager.RefreshAllServices

           INPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).RefreshAllServices(retStatus)
    def RegisterToSOM(self, SOMHost, serverHost, serverPort):
        '''Method IAISImageServerManager.RegisterToSOM

           INPUTS
            SOMHost             : BSTR
            serverHost          : BSTR
            serverPort          : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).RegisterToSOM(SOMHost, serverHost, serverPort)
    def GetSOMRegisteredServer(self, SOMHost):
        '''Method IAISImageServerManager.GetSOMRegisteredServer

           INPUT
            SOMHost             : BSTR

           OUTPUTS
            serverHost          : BSTR*
            serverPort          : BSTR*
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServerManager, self).GetSOMRegisteredServer(SOMHost)
    def GetStatus(self):
        '''Method IAISImageServerManager.GetStatus

           OUTPUT
            serverStatusXml     : BSTR*'''
        return super(IAISImageServerManager, self).GetStatus()

class IAngularMeasurement(_esriDataSourcesRaster.IAngularMeasurement):
    _IID = uuid.UUID('cdfe6612-d2d4-475e-a682-54033c62f93a')

    def __init__(self, *args, **kw):
        super(IAngularMeasurement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AngleMeasurement(self):
        '''Method IAngularMeasurement.get_AngleMeasurement

           OUTPUT
            pAngleMeasurement   : double*'''
        return super(IAngularMeasurement, self).get_AngleMeasurement()
    def put_AngleMeasurement(self, pAngleMeasurement):
        '''Method IAngularMeasurement.put_AngleMeasurement

           INPUT
            pAngleMeasurement   : double'''
        return super(IAngularMeasurement, self).put_AngleMeasurement(pAngleMeasurement)
    def get_AngleUncertainty(self):
        '''Method IAngularMeasurement.get_AngleUncertainty

           OUTPUT
            pAngleUncertainty   : double*'''
        return super(IAngularMeasurement, self).get_AngleUncertainty()
    def put_AngleUncertainty(self, pAngleUncertainty):
        '''Method IAngularMeasurement.put_AngleUncertainty

           INPUT
            pAngleUncertainty   : double'''
        return super(IAngularMeasurement, self).put_AngleUncertainty(pAngleUncertainty)
    def get_AngularUnit(self):
        '''Method IAngularMeasurement.get_AngularUnit

           OUTPUT
            pAngularUnit        : BSTR*'''
        return super(IAngularMeasurement, self).get_AngularUnit()
    def put_AngularUnit(self, pAngularUnit):
        '''Method IAngularMeasurement.put_AngularUnit

           INPUT
            pAngularUnit        : BSTR'''
        return super(IAngularMeasurement, self).put_AngularUnit(pAngularUnit)
    def get_HeightAtPoint1(self):
        '''Method IAngularMeasurement.get_HeightAtPoint1

           OUTPUT
            pHeightAtPoint1     : double*'''
        return super(IAngularMeasurement, self).get_HeightAtPoint1()
    def put_HeightAtPoint1(self, pHeightAtPoint1):
        '''Method IAngularMeasurement.put_HeightAtPoint1

           INPUT
            pHeightAtPoint1     : double'''
        return super(IAngularMeasurement, self).put_HeightAtPoint1(pHeightAtPoint1)
    def get_HeightAtPoint2(self):
        '''Method IAngularMeasurement.get_HeightAtPoint2

           OUTPUT
            pHeightAtPoint2     : double*'''
        return super(IAngularMeasurement, self).get_HeightAtPoint2()
    def put_HeightAtPoint2(self, pHeightAtPoint2):
        '''Method IAngularMeasurement.put_HeightAtPoint2

           INPUT
            pHeightAtPoint2     : double'''
        return super(IAngularMeasurement, self).put_HeightAtPoint2(pHeightAtPoint2)
    def get_LinearUnit(self):
        '''Method IAngularMeasurement.get_LinearUnit

           OUTPUT
            pLinearUnit         : BSTR*'''
        return super(IAngularMeasurement, self).get_LinearUnit()
    def put_LinearUnit(self, pLinearUnit):
        '''Method IAngularMeasurement.put_LinearUnit

           INPUT
            pLinearUnit         : BSTR'''
        return super(IAngularMeasurement, self).put_LinearUnit(pLinearUnit)
    def Reset(self):
        '''Method IAngularMeasurement.Reset'''
        return super(IAngularMeasurement, self).Reset()
    AngleMeasurement = property(get_AngleMeasurement, put_AngleMeasurement, None)
    AngleUncertainty = property(get_AngleUncertainty, put_AngleUncertainty, None)
    AngularUnit = property(get_AngularUnit, put_AngularUnit, None)
    HeightAtPoint1 = property(get_HeightAtPoint1, put_HeightAtPoint1, None)
    HeightAtPoint2 = property(get_HeightAtPoint2, put_HeightAtPoint2, None)
    LinearUnit = property(get_LinearUnit, put_LinearUnit, None)

class IDistanceMeasurement(_esriDataSourcesRaster.IDistanceMeasurement):
    _IID = uuid.UUID('c997d6a9-2b49-42da-97dd-34eb32a14a02')

    def __init__(self, *args, **kw):
        super(IDistanceMeasurement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AngularUnit(self):
        '''Method IDistanceMeasurement.get_AngularUnit

           OUTPUT
            pAngularUnit        : BSTR*'''
        return super(IDistanceMeasurement, self).get_AngularUnit()
    def put_AngularUnit(self, pAngularUnit):
        '''Method IDistanceMeasurement.put_AngularUnit

           INPUT
            pAngularUnit        : BSTR'''
        return super(IDistanceMeasurement, self).put_AngularUnit(pAngularUnit)
    def get_AzimuthAngle(self):
        '''Method IDistanceMeasurement.get_AzimuthAngle

           OUTPUT
            pAzimuthAngle       : double*'''
        return super(IDistanceMeasurement, self).get_AzimuthAngle()
    def put_AzimuthAngle(self, pAzimuthAngle):
        '''Method IDistanceMeasurement.put_AzimuthAngle

           INPUT
            pAzimuthAngle       : double'''
        return super(IDistanceMeasurement, self).put_AzimuthAngle(pAzimuthAngle)
    def get_AzimuthAngleUncertainty(self):
        '''Method IDistanceMeasurement.get_AzimuthAngleUncertainty

           OUTPUT
            pAzAngleUncertainty : double*'''
        return super(IDistanceMeasurement, self).get_AzimuthAngleUncertainty()
    def put_AzimuthAngleUncertainty(self, pAzAngleUncertainty):
        '''Method IDistanceMeasurement.put_AzimuthAngleUncertainty

           INPUT
            pAzAngleUncertainty : double'''
        return super(IDistanceMeasurement, self).put_AzimuthAngleUncertainty(pAzAngleUncertainty)
    def get_DistanceMeasurement(self):
        '''Method IDistanceMeasurement.get_DistanceMeasurement

           OUTPUT
            pDistMeasurement    : double*'''
        return super(IDistanceMeasurement, self).get_DistanceMeasurement()
    def put_DistanceMeasurement(self, pDistMeasurement):
        '''Method IDistanceMeasurement.put_DistanceMeasurement

           INPUT
            pDistMeasurement    : double'''
        return super(IDistanceMeasurement, self).put_DistanceMeasurement(pDistMeasurement)
    def get_DistanceUncertainty(self):
        '''Method IDistanceMeasurement.get_DistanceUncertainty

           OUTPUT
            pDistUncertainty    : double*'''
        return super(IDistanceMeasurement, self).get_DistanceUncertainty()
    def put_DistanceUncertainty(self, pDistUncertainty):
        '''Method IDistanceMeasurement.put_DistanceUncertainty

           INPUT
            pDistUncertainty    : double'''
        return super(IDistanceMeasurement, self).put_DistanceUncertainty(pDistUncertainty)
    def get_ElevationAngle(self):
        '''Method IDistanceMeasurement.get_ElevationAngle

           OUTPUT
            pElevationAngle     : double*'''
        return super(IDistanceMeasurement, self).get_ElevationAngle()
    def put_ElevationAngle(self, pElevationAngle):
        '''Method IDistanceMeasurement.put_ElevationAngle

           INPUT
            pElevationAngle     : double'''
        return super(IDistanceMeasurement, self).put_ElevationAngle(pElevationAngle)
    def get_ElevationAngleUncertainty(self):
        '''Method IDistanceMeasurement.get_ElevationAngleUncertainty

           OUTPUT
            pElevAngleUncertainty: double*'''
        return super(IDistanceMeasurement, self).get_ElevationAngleUncertainty()
    def put_ElevationAngleUncertainty(self, pElevAngleUncertainty):
        '''Method IDistanceMeasurement.put_ElevationAngleUncertainty

           INPUT
            pElevAngleUncertainty: double'''
        return super(IDistanceMeasurement, self).put_ElevationAngleUncertainty(pElevAngleUncertainty)
    def get_HeightAtPoint1(self):
        '''Method IDistanceMeasurement.get_HeightAtPoint1

           OUTPUT
            pHeightAtPoint1     : double*'''
        return super(IDistanceMeasurement, self).get_HeightAtPoint1()
    def put_HeightAtPoint1(self, pHeightAtPoint1):
        '''Method IDistanceMeasurement.put_HeightAtPoint1

           INPUT
            pHeightAtPoint1     : double'''
        return super(IDistanceMeasurement, self).put_HeightAtPoint1(pHeightAtPoint1)
    def get_HeightAtPoint2(self):
        '''Method IDistanceMeasurement.get_HeightAtPoint2

           OUTPUT
            pHeightAtPoint2     : double*'''
        return super(IDistanceMeasurement, self).get_HeightAtPoint2()
    def put_HeightAtPoint2(self, pHeightAtPoint2):
        '''Method IDistanceMeasurement.put_HeightAtPoint2

           INPUT
            pHeightAtPoint2     : double'''
        return super(IDistanceMeasurement, self).put_HeightAtPoint2(pHeightAtPoint2)
    def get_HorizontalDistanceMeasurement(self):
        '''Method IDistanceMeasurement.get_HorizontalDistanceMeasurement

           OUTPUT
            pHorizDistMeasurement: double*'''
        return super(IDistanceMeasurement, self).get_HorizontalDistanceMeasurement()
    def put_HorizontalDistanceMeasurement(self, pHorizDistMeasurement):
        '''Method IDistanceMeasurement.put_HorizontalDistanceMeasurement

           INPUT
            pHorizDistMeasurement: double'''
        return super(IDistanceMeasurement, self).put_HorizontalDistanceMeasurement(pHorizDistMeasurement)
    def get_HorizontalDistanceUncertainty(self):
        '''Method IDistanceMeasurement.get_HorizontalDistanceUncertainty

           OUTPUT
            pHorizDistUncertainty: double*'''
        return super(IDistanceMeasurement, self).get_HorizontalDistanceUncertainty()
    def put_HorizontalDistanceUncertainty(self, pHorizDistUncertainty):
        '''Method IDistanceMeasurement.put_HorizontalDistanceUncertainty

           INPUT
            pHorizDistUncertainty: double'''
        return super(IDistanceMeasurement, self).put_HorizontalDistanceUncertainty(pHorizDistUncertainty)
    def get_LinearUnit(self):
        '''Method IDistanceMeasurement.get_LinearUnit

           OUTPUT
            pLinearUnit         : BSTR*'''
        return super(IDistanceMeasurement, self).get_LinearUnit()
    def put_LinearUnit(self, pLinearUnit):
        '''Method IDistanceMeasurement.put_LinearUnit

           INPUT
            pLinearUnit         : BSTR'''
        return super(IDistanceMeasurement, self).put_LinearUnit(pLinearUnit)
    def Reset(self):
        '''Method IDistanceMeasurement.Reset'''
        return super(IDistanceMeasurement, self).Reset()
    def get_VerticalDistanceMeasurement(self):
        '''Method IDistanceMeasurement.get_VerticalDistanceMeasurement

           OUTPUT
            pVertDistMeasurement: double*'''
        return super(IDistanceMeasurement, self).get_VerticalDistanceMeasurement()
    def put_VerticalDistanceMeasurement(self, pVertDistMeasurement):
        '''Method IDistanceMeasurement.put_VerticalDistanceMeasurement

           INPUT
            pVertDistMeasurement: double'''
        return super(IDistanceMeasurement, self).put_VerticalDistanceMeasurement(pVertDistMeasurement)
    def get_VerticalDistanceUncertainty(self):
        '''Method IDistanceMeasurement.get_VerticalDistanceUncertainty

           OUTPUT
            pVertDistUncertainty: double*'''
        return super(IDistanceMeasurement, self).get_VerticalDistanceUncertainty()
    def put_VerticalDistanceUncertainty(self, pVertDistUncertainty):
        '''Method IDistanceMeasurement.put_VerticalDistanceUncertainty

           INPUT
            pVertDistUncertainty: double'''
        return super(IDistanceMeasurement, self).put_VerticalDistanceUncertainty(pVertDistUncertainty)
    AngularUnit = property(get_AngularUnit, put_AngularUnit, None)
    AzimuthAngle = property(get_AzimuthAngle, put_AzimuthAngle, None)
    AzimuthAngleUncertainty = property(get_AzimuthAngleUncertainty, put_AzimuthAngleUncertainty, None)
    DistanceMeasurement = property(get_DistanceMeasurement, put_DistanceMeasurement, None)
    DistanceUncertainty = property(get_DistanceUncertainty, put_DistanceUncertainty, None)
    ElevationAngle = property(get_ElevationAngle, put_ElevationAngle, None)
    ElevationAngleUncertainty = property(get_ElevationAngleUncertainty, put_ElevationAngleUncertainty, None)
    HeightAtPoint1 = property(get_HeightAtPoint1, put_HeightAtPoint1, None)
    HeightAtPoint2 = property(get_HeightAtPoint2, put_HeightAtPoint2, None)
    HorizontalDistanceMeasurement = property(get_HorizontalDistanceMeasurement, put_HorizontalDistanceMeasurement, None)
    HorizontalDistanceUncertainty = property(get_HorizontalDistanceUncertainty, put_HorizontalDistanceUncertainty, None)
    LinearUnit = property(get_LinearUnit, put_LinearUnit, None)
    VerticalDistanceMeasurement = property(get_VerticalDistanceMeasurement, put_VerticalDistanceMeasurement, None)
    VerticalDistanceUncertainty = property(get_VerticalDistanceUncertainty, put_VerticalDistanceUncertainty, None)

class IHeightMeasurement(_esriDataSourcesRaster.IHeightMeasurement):
    _IID = uuid.UUID('02f7a546-a7fb-4859-a4c2-9c6a4b298d9f')

    def __init__(self, *args, **kw):
        super(IHeightMeasurement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AngularUnit(self):
        '''Method IHeightMeasurement.get_AngularUnit

           OUTPUT
            pAngularUnit        : BSTR*'''
        return super(IHeightMeasurement, self).get_AngularUnit()
    def put_AngularUnit(self, pAngularUnit):
        '''Method IHeightMeasurement.put_AngularUnit

           INPUT
            pAngularUnit        : BSTR'''
        return super(IHeightMeasurement, self).put_AngularUnit(pAngularUnit)
    def get_AzimuthAngleAtBase(self):
        '''Method IHeightMeasurement.get_AzimuthAngleAtBase

           OUTPUT
            pAzimuthAngleAtBase : double*'''
        return super(IHeightMeasurement, self).get_AzimuthAngleAtBase()
    def put_AzimuthAngleAtBase(self, pAzimuthAngleAtBase):
        '''Method IHeightMeasurement.put_AzimuthAngleAtBase

           INPUT
            pAzimuthAngleAtBase : double'''
        return super(IHeightMeasurement, self).put_AzimuthAngleAtBase(pAzimuthAngleAtBase)
    def get_AzimuthAngleAtTop(self):
        '''Method IHeightMeasurement.get_AzimuthAngleAtTop

           OUTPUT
            pAzimuthAngleAtTop  : double*'''
        return super(IHeightMeasurement, self).get_AzimuthAngleAtTop()
    def put_AzimuthAngleAtTop(self, pAzimuthAngleAtTop):
        '''Method IHeightMeasurement.put_AzimuthAngleAtTop

           INPUT
            pAzimuthAngleAtTop  : double'''
        return super(IHeightMeasurement, self).put_AzimuthAngleAtTop(pAzimuthAngleAtTop)
    def get_GroundProjectedAzimuthAngle(self):
        '''Method IHeightMeasurement.get_GroundProjectedAzimuthAngle

           OUTPUT
            pGroundPrjAzimuthAngle: double*'''
        return super(IHeightMeasurement, self).get_GroundProjectedAzimuthAngle()
    def put_GroundProjectedAzimuthAngle(self, pGroundPrjAzimuthAngle):
        '''Method IHeightMeasurement.put_GroundProjectedAzimuthAngle

           INPUT
            pGroundPrjAzimuthAngle: double'''
        return super(IHeightMeasurement, self).put_GroundProjectedAzimuthAngle(pGroundPrjAzimuthAngle)
    def get_HeightMeasurement(self):
        '''Method IHeightMeasurement.get_HeightMeasurement

           OUTPUT
            pHeightMeasurement  : double*'''
        return super(IHeightMeasurement, self).get_HeightMeasurement()
    def put_HeightMeasurement(self, pHeightMeasurement):
        '''Method IHeightMeasurement.put_HeightMeasurement

           INPUT
            pHeightMeasurement  : double'''
        return super(IHeightMeasurement, self).put_HeightMeasurement(pHeightMeasurement)
    def get_HeightUncertainty(self):
        '''Method IHeightMeasurement.get_HeightUncertainty

           OUTPUT
            pHeightUncertainty  : double*'''
        return super(IHeightMeasurement, self).get_HeightUncertainty()
    def put_HeightUncertainty(self, pHeightUncertainty):
        '''Method IHeightMeasurement.put_HeightUncertainty

           INPUT
            pHeightUncertainty  : double'''
        return super(IHeightMeasurement, self).put_HeightUncertainty(pHeightUncertainty)
    def get_LinearUnit(self):
        '''Method IHeightMeasurement.get_LinearUnit

           OUTPUT
            pLinearUnit         : BSTR*'''
        return super(IHeightMeasurement, self).get_LinearUnit()
    def put_LinearUnit(self, pLinearUnit):
        '''Method IHeightMeasurement.put_LinearUnit

           INPUT
            pLinearUnit         : BSTR'''
        return super(IHeightMeasurement, self).put_LinearUnit(pLinearUnit)
    def get_MinimumDistance(self):
        '''Method IHeightMeasurement.get_MinimumDistance

           OUTPUT
            pMinimumDistance    : double*'''
        return super(IHeightMeasurement, self).get_MinimumDistance()
    def put_MinimumDistance(self, pMinimumDistance):
        '''Method IHeightMeasurement.put_MinimumDistance

           INPUT
            pMinimumDistance    : double'''
        return super(IHeightMeasurement, self).put_MinimumDistance(pMinimumDistance)
    def Reset(self):
        '''Method IHeightMeasurement.Reset'''
        return super(IHeightMeasurement, self).Reset()
    def get_ShadowAzimuthAngle(self):
        '''Method IHeightMeasurement.get_ShadowAzimuthAngle

           OUTPUT
            pShadowAzimuthAngle : double*'''
        return super(IHeightMeasurement, self).get_ShadowAzimuthAngle()
    def put_ShadowAzimuthAngle(self, pShadowAzimuthAngle):
        '''Method IHeightMeasurement.put_ShadowAzimuthAngle

           INPUT
            pShadowAzimuthAngle : double'''
        return super(IHeightMeasurement, self).put_ShadowAzimuthAngle(pShadowAzimuthAngle)
    AngularUnit = property(get_AngularUnit, put_AngularUnit, None)
    AzimuthAngleAtBase = property(get_AzimuthAngleAtBase, put_AzimuthAngleAtBase, None)
    AzimuthAngleAtTop = property(get_AzimuthAngleAtTop, put_AzimuthAngleAtTop, None)
    GroundProjectedAzimuthAngle = property(get_GroundProjectedAzimuthAngle, put_GroundProjectedAzimuthAngle, None)
    HeightMeasurement = property(get_HeightMeasurement, put_HeightMeasurement, None)
    HeightUncertainty = property(get_HeightUncertainty, put_HeightUncertainty, None)
    LinearUnit = property(get_LinearUnit, put_LinearUnit, None)
    MinimumDistance = property(get_MinimumDistance, put_MinimumDistance, None)
    ShadowAzimuthAngle = property(get_ShadowAzimuthAngle, put_ShadowAzimuthAngle, None)

class IMapPoint(_esriDataSourcesRaster.IMapPoint):
    _IID = uuid.UUID('5f3a89c1-3ed5-4f56-bdf5-22008d23b143')

    def __init__(self, *args, **kw):
        super(IMapPoint, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ImageID(self):
        '''Method IMapPoint.get_ImageID

           OUTPUT
            pImageID            : BSTR*'''
        return super(IMapPoint, self).get_ImageID()
    def put_ImageID(self, pImageID):
        '''Method IMapPoint.put_ImageID

           INPUT
            pImageID            : BSTR'''
        return super(IMapPoint, self).put_ImageID(pImageID)
    def get_MapPointID(self):
        '''Method IMapPoint.get_MapPointID

           OUTPUT
            pMapPointID         : BSTR*'''
        return super(IMapPoint, self).get_MapPointID()
    def put_MapPointID(self, pMapPointID):
        '''Method IMapPoint.put_MapPointID

           INPUT
            pMapPointID         : BSTR'''
        return super(IMapPoint, self).put_MapPointID(pMapPointID)
    def get_PointingErrorCovarianceMatrix(self):
        '''Method IMapPoint.get_PointingErrorCovarianceMatrix

           OUTPUT
            ppPointingErrCovMatrix: IDoubleArray**'''
        return super(IMapPoint, self).get_PointingErrorCovarianceMatrix()
    def put_PointingErrorCovarianceMatrix(self, ppPointingErrCovMatrix):
        '''Method IMapPoint.put_PointingErrorCovarianceMatrix

           INPUT
            ppPointingErrCovMatrix: IDoubleArray*'''
        return super(IMapPoint, self).put_PointingErrorCovarianceMatrix(ppPointingErrCovMatrix)
    def QueryCoords(self):
        '''Method IPoint.QueryCoords (from IPoint)

           OUTPUTS
            X                   : double*
            Y                   : double*'''
        return super(IMapPoint, self).QueryCoords()
    def PutCoords(self, X, Y):
        '''Method IPoint.PutCoords (from IPoint)

           INPUTS
            X                   : double
            Y                   : double'''
        return super(IMapPoint, self).PutCoords(X, Y)
    def get_X(self):
        '''Method IPoint.get_X (from IPoint)

           OUTPUT
            X                   : double*'''
        return super(IMapPoint, self).get_X()
    def put_X(self, X):
        '''Method IPoint.put_X (from IPoint)

           INPUT
            X                   : double'''
        return super(IMapPoint, self).put_X(X)
    def get_Y(self):
        '''Method IPoint.get_Y (from IPoint)

           OUTPUT
            Y                   : double*'''
        return super(IMapPoint, self).get_Y()
    def put_Y(self, Y):
        '''Method IPoint.put_Y (from IPoint)

           INPUT
            Y                   : double'''
        return super(IMapPoint, self).put_Y(Y)
    def get_Z(self):
        '''Method IPoint.get_Z (from IPoint)

           OUTPUT
            Z                   : double*'''
        return super(IMapPoint, self).get_Z()
    def put_Z(self, Z):
        '''Method IPoint.put_Z (from IPoint)

           INPUT
            Z                   : double'''
        return super(IMapPoint, self).put_Z(Z)
    def get_M(self):
        '''Method IPoint.get_M (from IPoint)

           OUTPUT
            M                   : double*'''
        return super(IMapPoint, self).get_M()
    def put_M(self, M):
        '''Method IPoint.put_M (from IPoint)

           INPUT
            M                   : double'''
        return super(IMapPoint, self).put_M(M)
    def get_ID(self):
        '''Method IPoint.get_ID (from IPoint)

           OUTPUT
            pointID             : long*'''
        return super(IMapPoint, self).get_ID()
    def put_ID(self, pointID):
        '''Method IPoint.put_ID (from IPoint)

           INPUT
            pointID             : long'''
        return super(IMapPoint, self).put_ID(pointID)
    def get_VertexAttribute(self, attributeType):
        '''Method IPoint.get_VertexAttribute (from IPoint)

           INPUT
            attributeType       : esriGeometryAttributes

           OUTPUT
            attributeValue      : double*'''
        return super(IMapPoint, self).get_VertexAttribute(attributeType)
    def put_VertexAttribute(self, attributeType, attributeValue):
        '''Method IPoint.put_VertexAttribute (from IPoint)

           INPUTS
            attributeType       : esriGeometryAttributes
            attributeValue      : double'''
        return super(IMapPoint, self).put_VertexAttribute(attributeType, attributeValue)
    def ConstrainDistance(self, constraintRadius, anchor):
        '''Method IPoint.ConstrainDistance (from IPoint)

           INPUTS
            constraintRadius    : double
            anchor              : IPoint*'''
        return super(IMapPoint, self).ConstrainDistance(constraintRadius, anchor)
    def ConstrainAngle(self, constraintAngle, anchor, allowOpposite):
        '''Method IPoint.ConstrainAngle (from IPoint)

           INPUTS
            constraintAngle     : double
            anchor              : IPoint*
            allowOpposite       : VARIANT_BOOL'''
        return super(IMapPoint, self).ConstrainAngle(constraintAngle, anchor, allowOpposite)
    def Compare(self, otherPoint):
        '''Method IPoint.Compare (from IPoint)

           INPUT
            otherPoint          : IPoint*

           OUTPUT
            result              : int*'''
        return super(IMapPoint, self).Compare(otherPoint)
    def get_GeometryType(self):
        '''Method IGeometry.get_GeometryType (from IGeometry)

           OUTPUT
            shapeType           : esriGeometryType*'''
        return super(IMapPoint, self).get_GeometryType()
    def get_Dimension(self):
        '''Method IGeometry.get_Dimension (from IGeometry)

           OUTPUT
            Dimension           : esriGeometryDimension*'''
        return super(IMapPoint, self).get_Dimension()
    def get_SpatialReference(self):
        '''Method IGeometry.get_SpatialReference (from IGeometry)

           OUTPUT
            spatialRef          : ISpatialReference**'''
        return super(IMapPoint, self).get_SpatialReference()
    def putref_SpatialReference(self, spatialRef):
        '''Method IGeometry.putref_SpatialReference (from IGeometry)

           INPUT
            spatialRef          : ISpatialReference*'''
        return super(IMapPoint, self).putref_SpatialReference(spatialRef)
    def get_IsEmpty(self):
        '''Method IGeometry.get_IsEmpty (from IGeometry)

           OUTPUT
            IsEmpty             : VARIANT_BOOL*'''
        return super(IMapPoint, self).get_IsEmpty()
    def SetEmpty(self):
        '''Method IGeometry.SetEmpty (from IGeometry)'''
        return super(IMapPoint, self).SetEmpty()
    def QueryEnvelope(self, outEnvelope):
        '''Method IGeometry.QueryEnvelope (from IGeometry)

           INPUT
            outEnvelope         : IEnvelope*'''
        return super(IMapPoint, self).QueryEnvelope(outEnvelope)
    def get_Envelope(self):
        '''Method IGeometry.get_Envelope (from IGeometry)

           OUTPUT
            newEnvelope         : IEnvelope**'''
        return super(IMapPoint, self).get_Envelope()
    def Project(self, newReferenceSystem):
        '''Method IGeometry.Project (from IGeometry)

           INPUT
            newReferenceSystem  : ISpatialReference*'''
        return super(IMapPoint, self).Project(newReferenceSystem)
    def SnapToSpatialReference(self):
        '''Method IGeometry.SnapToSpatialReference (from IGeometry)'''
        return super(IMapPoint, self).SnapToSpatialReference()
    def GeoNormalize(self):
        '''Method IGeometry.GeoNormalize (from IGeometry)'''
        return super(IMapPoint, self).GeoNormalize()
    def GeoNormalizeFromLongitude(self, Longitude):
        '''Method IGeometry.GeoNormalizeFromLongitude (from IGeometry)

           INPUT
            Longitude           : double'''
        return super(IMapPoint, self).GeoNormalizeFromLongitude(Longitude)
    Dimension = property(get_Dimension, None, None)
    Envelope = property(get_Envelope, None, None)
    GeometryType = property(get_GeometryType, None, None)
    ID = property(get_ID, put_ID, None)
    ImageID = property(get_ImageID, put_ImageID, None)
    IsEmpty = property(get_IsEmpty, None, None)
    M = property(get_M, put_M, None)
    MapPointID = property(get_MapPointID, put_MapPointID, None)
    PointingErrorCovarianceMatrix = property(get_PointingErrorCovarianceMatrix, put_PointingErrorCovarianceMatrix, None)
    SpatialReference = property(get_SpatialReference, putref_SpatialReference, None)
    VertexAttribute = property(None, put_VertexAttribute, None)
    X = property(get_X, put_X, None)
    Y = property(get_Y, put_Y, None)
    Z = property(get_Z, put_Z, None)
    VertexAttribute = IndexProperty(get_VertexAttribute, None)

class IPointMeasurement(_esriDataSourcesRaster.IPointMeasurement):
    _IID = uuid.UUID('24610a3b-3ad6-43e7-bcc0-8c40139ee416')

    def __init__(self, *args, **kw):
        super(IPointMeasurement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_ErrorCovarianceMatrix(self):
        '''Method IPointMeasurement.get_ErrorCovarianceMatrix

           OUTPUT
            ppErrorCovMatrix    : IDoubleArray**'''
        return super(IPointMeasurement, self).get_ErrorCovarianceMatrix()
    def put_ErrorCovarianceMatrix(self, ppErrorCovMatrix):
        '''Method IPointMeasurement.put_ErrorCovarianceMatrix

           INPUT
            ppErrorCovMatrix    : IDoubleArray*'''
        return super(IPointMeasurement, self).put_ErrorCovarianceMatrix(ppErrorCovMatrix)
    def get_HorizontalUnit(self):
        '''Method IPointMeasurement.get_HorizontalUnit

           OUTPUT
            pHorizontalUnit     : BSTR*'''
        return super(IPointMeasurement, self).get_HorizontalUnit()
    def put_HorizontalUnit(self, pHorizontalUnit):
        '''Method IPointMeasurement.put_HorizontalUnit

           INPUT
            pHorizontalUnit     : BSTR'''
        return super(IPointMeasurement, self).put_HorizontalUnit(pHorizontalUnit)
    def get_IsHorizontalUnitLinear(self):
        '''Method IPointMeasurement.get_IsHorizontalUnitLinear

           OUTPUT
            pIsLinearUnit       : VARIANT_BOOL*'''
        return super(IPointMeasurement, self).get_IsHorizontalUnitLinear()
    def Reset(self):
        '''Method IPointMeasurement.Reset'''
        return super(IPointMeasurement, self).Reset()
    def get_VerticalUnit(self):
        '''Method IPointMeasurement.get_VerticalUnit

           OUTPUT
            pVeritcalUnit       : BSTR*'''
        return super(IPointMeasurement, self).get_VerticalUnit()
    def put_VerticalUnit(self, pVeritcalUnit):
        '''Method IPointMeasurement.put_VerticalUnit

           INPUT
            pVeritcalUnit       : BSTR'''
        return super(IPointMeasurement, self).put_VerticalUnit(pVeritcalUnit)
    def get_XCoordinate(self):
        '''Method IPointMeasurement.get_XCoordinate

           OUTPUT
            pXCoordinate        : double*'''
        return super(IPointMeasurement, self).get_XCoordinate()
    def put_XCoordinate(self, pXCoordinate):
        '''Method IPointMeasurement.put_XCoordinate

           INPUT
            pXCoordinate        : double'''
        return super(IPointMeasurement, self).put_XCoordinate(pXCoordinate)
    def get_YCoordinate(self):
        '''Method IPointMeasurement.get_YCoordinate

           OUTPUT
            pYCoordinate        : double*'''
        return super(IPointMeasurement, self).get_YCoordinate()
    def put_YCoordinate(self, pYCoordinate):
        '''Method IPointMeasurement.put_YCoordinate

           INPUT
            pYCoordinate        : double'''
        return super(IPointMeasurement, self).put_YCoordinate(pYCoordinate)
    def get_ZCoordinate(self):
        '''Method IPointMeasurement.get_ZCoordinate

           OUTPUT
            pZCoordinate        : double*'''
        return super(IPointMeasurement, self).get_ZCoordinate()
    def put_ZCoordinate(self, pZCoordinate):
        '''Method IPointMeasurement.put_ZCoordinate

           INPUT
            pZCoordinate        : double'''
        return super(IPointMeasurement, self).put_ZCoordinate(pZCoordinate)
    ErrorCovarianceMatrix = property(get_ErrorCovarianceMatrix, put_ErrorCovarianceMatrix, None)
    HorizontalUnit = property(get_HorizontalUnit, put_HorizontalUnit, None)
    IsHorizontalUnitLinear = property(get_IsHorizontalUnitLinear, None, None)
    VerticalUnit = property(get_VerticalUnit, put_VerticalUnit, None)
    XCoordinate = property(get_XCoordinate, put_XCoordinate, None)
    YCoordinate = property(get_YCoordinate, put_YCoordinate, None)
    ZCoordinate = property(get_ZCoordinate, put_ZCoordinate, None)

class IPolygonMeasurement(_esriDataSourcesRaster.IPolygonMeasurement):
    _IID = uuid.UUID('61a5e367-f808-433c-a274-cdd12879a513')

    def __init__(self, *args, **kw):
        super(IPolygonMeasurement, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_AreaMeasurement(self):
        '''Method IPolygonMeasurement.get_AreaMeasurement

           OUTPUT
            AreaMeasurement     : double*'''
        return super(IPolygonMeasurement, self).get_AreaMeasurement()
    def put_AreaMeasurement(self, AreaMeasurement):
        '''Method IPolygonMeasurement.put_AreaMeasurement

           INPUT
            AreaMeasurement     : double'''
        return super(IPolygonMeasurement, self).put_AreaMeasurement(AreaMeasurement)
    def get_AreaUncertainty(self):
        '''Method IPolygonMeasurement.get_AreaUncertainty

           OUTPUT
            AreaUncertainty     : double*'''
        return super(IPolygonMeasurement, self).get_AreaUncertainty()
    def put_AreaUncertainty(self, AreaUncertainty):
        '''Method IPolygonMeasurement.put_AreaUncertainty

           INPUT
            AreaUncertainty     : double'''
        return super(IPolygonMeasurement, self).put_AreaUncertainty(AreaUncertainty)
    def get_LinearUnit(self):
        '''Method IPolygonMeasurement.get_LinearUnit

           OUTPUT
            pLinearUnit         : BSTR*'''
        return super(IPolygonMeasurement, self).get_LinearUnit()
    def put_LinearUnit(self, pLinearUnit):
        '''Method IPolygonMeasurement.put_LinearUnit

           INPUT
            pLinearUnit         : BSTR'''
        return super(IPolygonMeasurement, self).put_LinearUnit(pLinearUnit)
    def get_PerimeterMeasurement(self):
        '''Method IPolygonMeasurement.get_PerimeterMeasurement

           OUTPUT
            PerimeterMeasurement: double*'''
        return super(IPolygonMeasurement, self).get_PerimeterMeasurement()
    def put_PerimeterMeasurement(self, PerimeterMeasurement):
        '''Method IPolygonMeasurement.put_PerimeterMeasurement

           INPUT
            PerimeterMeasurement: double'''
        return super(IPolygonMeasurement, self).put_PerimeterMeasurement(PerimeterMeasurement)
    def get_PerimeterUncertainty(self):
        '''Method IPolygonMeasurement.get_PerimeterUncertainty

           OUTPUT
            PerimeterUncertainty: double*'''
        return super(IPolygonMeasurement, self).get_PerimeterUncertainty()
    def put_PerimeterUncertainty(self, PerimeterUncertainty):
        '''Method IPolygonMeasurement.put_PerimeterUncertainty

           INPUT
            PerimeterUncertainty: double'''
        return super(IPolygonMeasurement, self).put_PerimeterUncertainty(PerimeterUncertainty)
    def Reset(self):
        '''Method IPolygonMeasurement.Reset'''
        return super(IPolygonMeasurement, self).Reset()
    AreaMeasurement = property(get_AreaMeasurement, put_AreaMeasurement, None)
    AreaUncertainty = property(get_AreaUncertainty, put_AreaUncertainty, None)
    LinearUnit = property(get_LinearUnit, put_LinearUnit, None)
    PerimeterMeasurement = property(get_PerimeterMeasurement, put_PerimeterMeasurement, None)
    PerimeterUncertainty = property(get_PerimeterUncertainty, put_PerimeterUncertainty, None)

class IMensuration(_esriDataSourcesRaster.IMensuration):
    _IID = uuid.UUID('63ae4f70-bf55-480e-b2e0-49c5528bc4f2')

    def __init__(self, *args, **kw):
        super(IMensuration, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_CanErrorPropagate(self):
        '''Method IMensuration.get_CanErrorPropagate

           OUTPUT
            pErrorPropagationCapable: VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanErrorPropagate()
    def get_CanMeasure(self):
        '''Method IMensuration.get_CanMeasure

           OUTPUT
            pMensurationCapable : VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanMeasure()
    def get_CanMeasureHeightBaseToTop(self):
        '''Method IMensuration.get_CanMeasureHeightBaseToTop

           OUTPUT
            pHeightMensurationCapable: VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanMeasureHeightBaseToTop()
    def get_CanMeasureMonoscopic(self):
        '''Method IMensuration.get_CanMeasureMonoscopic

           OUTPUT
            pMonoscopicMensurationCapable: VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanMeasureMonoscopic()
    def get_CanMeasureMultiImages(self):
        '''Method IMensuration.get_CanMeasureMultiImages

           OUTPUT
            pMultiImageMensurationCapable: VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanMeasureMultiImages()
    def get_CanMeasureHeightTopToTopShadow(self):
        '''Method IMensuration.get_CanMeasureHeightTopToTopShadow

           OUTPUT
            pShadowMensurationCapable: VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanMeasureHeightTopToTopShadow()
    def get_CanMeasureHeightBaseToTopShadow(self):
        '''Method IMensuration.get_CanMeasureHeightBaseToTopShadow

           OUTPUT
            pShadowMensurationCapable: VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanMeasureHeightBaseToTopShadow()
    def get_CanMeasureStereoscopic(self):
        '''Method IMensuration.get_CanMeasureStereoscopic

           OUTPUT
            pStereoscopicMensurationCapable: VARIANT_BOOL*'''
        return super(IMensuration, self).get_CanMeasureStereoscopic()
    def ConvertAngular(self, fromUnit, toUnit, inputValue):
        '''Method IMensuration.ConvertAngular

           INPUTS
            fromUnit            : esriDirectionUnits
            toUnit              : esriDirectionUnits
            inputValue          : double

           OUTPUT
            pOutputValue        : double*'''
        return super(IMensuration, self).ConvertAngular(fromUnit, toUnit, inputValue)
    def ConvertArea(self, fromUnit, toUnit, inputValue):
        '''Method IMensuration.ConvertArea

           INPUTS
            fromUnit            : esriAreaUnits
            toUnit              : esriAreaUnits
            inputValue          : double

           OUTPUT
            pOutputValue        : double*'''
        return super(IMensuration, self).ConvertArea(fromUnit, toUnit, inputValue)
    def ConvertDisplayCoordUnit(self, desiredDisplayUnit, pGeographicPt):
        '''Method IMensuration.ConvertDisplayCoordUnit

           INPUTS
            desiredDisplayUnit  : esriDisplayCoordUnitType
            pGeographicPt       : IPoint*

           OUTPUT
            pDisplayUnit        : BSTR*'''
        return super(IMensuration, self).ConvertDisplayCoordUnit(desiredDisplayUnit, pGeographicPt)
    def ConvertLinear(self, fromUnit, toUnit, inputValue):
        '''Method IMensuration.ConvertLinear

           INPUTS
            fromUnit            : esriUnits
            toUnit              : esriUnits
            inputValue          : double

           OUTPUT
            pOutputValue        : double*'''
        return super(IMensuration, self).ConvertLinear(fromUnit, toUnit, inputValue)
    def ConvertErrCovarianceUnits(self, inHorizAngularUnit, outHorizAngularUnit, inHorizLinearUnit, outHorizLinearUnit, inVertUnit, outVertUnit, horizontalUnitType, pCovariance):
        '''Method IMensuration.ConvertErrCovarianceUnits

           INPUTS
            inHorizAngularUnit  : esriDirectionUnits
            outHorizAngularUnit : esriDirectionUnits
            inHorizLinearUnit   : esriUnits
            outHorizLinearUnit  : esriUnits
            inVertUnit          : esriUnits
            outVertUnit         : esriUnits
            horizontalUnitType  : int
            pCovariance         : IDoubleArray*'''
        return super(IMensuration, self).ConvertErrCovarianceUnits(inHorizAngularUnit, outHorizAngularUnit, inHorizLinearUnit, outHorizLinearUnit, inVertUnit, outVertUnit, horizontalUnitType, pCovariance)
    def get_DefaultPointingErrCovariance(self):
        '''Method IMensuration.get_DefaultPointingErrCovariance

           OUTPUT
            ppPointingErrCovMatrix: IDoubleArray**'''
        return super(IMensuration, self).get_DefaultPointingErrCovariance()
    def put_DefaultPointingErrCovariance(self, ppPointingErrCovMatrix):
        '''Method IMensuration.put_DefaultPointingErrCovariance

           INPUT
            ppPointingErrCovMatrix: IDoubleArray*'''
        return super(IMensuration, self).put_DefaultPointingErrCovariance(ppPointingErrCovMatrix)
    def get_DEM(self):
        '''Method IMensuration.get_DEM

           OUTPUT
            ppRaster            : IRaster**'''
        return super(IMensuration, self).get_DEM()
    def putref_DEM(self, ppRaster):
        '''Method IMensuration.putref_DEM

           INPUT
            ppRaster            : IRaster*'''
        return super(IMensuration, self).putref_DEM(ppRaster)
    def get_DesiredPrecision(self):
        '''Method IMensuration.get_DesiredPrecision

           OUTPUT
            pPrecision          : double*'''
        return super(IMensuration, self).get_DesiredPrecision()
    def put_DesiredPrecision(self, pPrecision):
        '''Method IMensuration.put_DesiredPrecision

           INPUT
            pPrecision          : double'''
        return super(IMensuration, self).put_DesiredPrecision(pPrecision)
    def GetAreaAndPerimeter(self, pPolygon):
        '''Method IMensuration.GetAreaAndPerimeter

           INPUT
            pPolygon            : IPolygon*

           OUTPUT
            ppPolygonMeasurement: IPolygonMeasurement**'''
        return super(IMensuration, self).GetAreaAndPerimeter(pPolygon)
    def GetAzimuthAngle(self, pFirstPoint, pSecondPoint):
        '''Method IMensuration.GetAzimuthAngle

           INPUTS
            pFirstPoint         : IPoint*
            pSecondPoint        : IPoint*

           OUTPUT
            ppAngleMeasurement  : IAngularMeasurement**'''
        return super(IMensuration, self).GetAzimuthAngle(pFirstPoint, pSecondPoint)
    def GetCentroid(self, pPolygon):
        '''Method IMensuration.GetCentroid

           INPUT
            pPolygon            : IPolygon*

           OUTPUT
            ppPointMeasurement  : IPointMeasurement**'''
        return super(IMensuration, self).GetCentroid(pPolygon)
    def GetDistance(self, pFirstPoint, pSecondPoint):
        '''Method IMensuration.GetDistance

           INPUTS
            pFirstPoint         : IPoint*
            pSecondPoint        : IPoint*

           OUTPUT
            ppDistMeasurement   : IDistanceMeasurement**'''
        return super(IMensuration, self).GetDistance(pFirstPoint, pSecondPoint)
    def GetHeightFromBaseAndTop(self, pBaseOfObject, pTopOfObject):
        '''Method IMensuration.GetHeightFromBaseAndTop

           INPUTS
            pBaseOfObject       : IPoint*
            pTopOfObject        : IPoint*

           OUTPUT
            ppHtMeasurement     : IHeightMeasurement**'''
        return super(IMensuration, self).GetHeightFromBaseAndTop(pBaseOfObject, pTopOfObject)
    def GetHeightFromBaseAndTopShadow(self, pBaseOfObject, pTopShadowOfObject):
        '''Method IMensuration.GetHeightFromBaseAndTopShadow

           INPUTS
            pBaseOfObject       : IPoint*
            pTopShadowOfObject  : IPoint*

           OUTPUT
            ppHtMeasurement     : IHeightMeasurement**'''
        return super(IMensuration, self).GetHeightFromBaseAndTopShadow(pBaseOfObject, pTopShadowOfObject)
    def GetHeightFromTopAndTopShadow(self, pTopOfObject, pTopShadowOfObject):
        '''Method IMensuration.GetHeightFromTopAndTopShadow

           INPUTS
            pTopOfObject        : IPoint*
            pTopShadowOfObject  : IPoint*

           OUTPUT
            ppHtMeasurement     : IHeightMeasurement**'''
        return super(IMensuration, self).GetHeightFromTopAndTopShadow(pTopOfObject, pTopShadowOfObject)
    def GetPoint(self, pPoint):
        '''Method IMensuration.GetPoint

           INPUT
            pPoint              : IPoint*

           OUTPUT
            ppPointMeasurement  : IPointMeasurement**'''
        return super(IMensuration, self).GetPoint(pPoint)
    def GetSensorModelProperty(self, propertyName):
        '''Method IMensuration.GetSensorModelProperty

           INPUT
            propertyName        : BSTR

           OUTPUT
            pPropertyValue      : VARIANT*'''
        return super(IMensuration, self).GetSensorModelProperty(propertyName)
    def get_Name(self):
        '''Method IMensuration.get_Name

           OUTPUT
            pName               : BSTR*'''
        return super(IMensuration, self).get_Name()
    def PutSensorModelProperty(self, propertyKey, propertyValue):
        '''Method IMensuration.PutSensorModelProperty

           INPUTS
            propertyKey         : BSTR
            propertyValue       : BSTR'''
        return super(IMensuration, self).PutSensorModelProperty(propertyKey, propertyValue)
    def PutTerrainParameters(self, terrainModelDataSrc, terrainModelName):
        '''Method IMensuration.PutTerrainParameters

           INPUTS
            terrainModelDataSrc : BSTR
            terrainModelName    : BSTR'''
        return super(IMensuration, self).PutTerrainParameters(terrainModelDataSrc, terrainModelName)
    def putref_Raster(self, _arg1):
        '''Method IMensuration.putref_Raster

           INPUT
            _arg1               : IRaster*'''
        return super(IMensuration, self).putref_Raster(_arg1)
    def get_SensorModel(self):
        '''Method IMensuration.get_SensorModel

           OUTPUT
            pSensorModelName    : BSTR*'''
        return super(IMensuration, self).get_SensorModel()
    def get_SensorModelProperties(self):
        '''Method IMensuration.get_SensorModelProperties

           OUTPUT
            ppSensorModelProperties: IPropertySet**'''
        return super(IMensuration, self).get_SensorModelProperties()
    def SignificantFigures(self, measurementValue, uncertainty):
        '''Method IMensuration.SignificantFigures

           INPUTS
            measurementValue    : double
            uncertainty         : double

           OUTPUTS
            pMeasurement        : BSTR*
            pUncertainty        : BSTR*'''
        return super(IMensuration, self).SignificantFigures(measurementValue, uncertainty)
    def get_TMName(self):
        '''Method IMensuration.get_TMName

           OUTPUT
            pTerrainModelName   : BSTR*'''
        return super(IMensuration, self).get_TMName()
    def get_Valid(self):
        '''Method IMensuration.get_Valid

           OUTPUT
            pSysInitialized     : VARIANT_BOOL*'''
        return super(IMensuration, self).get_Valid()
    def get_Version(self):
        '''Method IMensuration.get_Version

           OUTPUT
            pServiceVersion     : BSTR*'''
        return super(IMensuration, self).get_Version()
    CanErrorPropagate = property(get_CanErrorPropagate, None, None)
    CanMeasure = property(get_CanMeasure, None, None)
    CanMeasureHeightBaseToTop = property(get_CanMeasureHeightBaseToTop, None, None)
    CanMeasureHeightBaseToTopShadow = property(get_CanMeasureHeightBaseToTopShadow, None, None)
    CanMeasureHeightTopToTopShadow = property(get_CanMeasureHeightTopToTopShadow, None, None)
    CanMeasureMonoscopic = property(get_CanMeasureMonoscopic, None, None)
    CanMeasureMultiImages = property(get_CanMeasureMultiImages, None, None)
    CanMeasureStereoscopic = property(get_CanMeasureStereoscopic, None, None)
    DEM = property(get_DEM, putref_DEM, None)
    DefaultPointingErrCovariance = property(get_DefaultPointingErrCovariance, put_DefaultPointingErrCovariance, None)
    DesiredPrecision = property(get_DesiredPrecision, put_DesiredPrecision, None)
    Name = property(get_Name, None, None)
    Raster = property(None, putref_Raster, None)
    SensorModel = property(get_SensorModel, None, None)
    SensorModelProperties = property(get_SensorModelProperties, None, None)
    TMName = property(get_TMName, None, None)
    Valid = property(get_Valid, None, None)
    Version = property(get_Version, None, None)

class IMensuration3D(_esriDataSourcesRaster.IMensuration3D):
    _IID = uuid.UUID('829a4f6b-a404-4590-ae37-1196af7ff6a0')
    def get_CanMeasure3D(self):
        '''Method IMensuration3D.get_CanMeasure3D

           OUTPUT
            p3DMensurationCapable: VARIANT_BOOL*'''
        return super(IMensuration3D, self).get_CanMeasure3D()
    def GetPoint3D(self, pInPoint):
        '''Method IMensuration3D.GetPoint3D

           INPUT
            pInPoint            : IPoint*

           OUTPUT
            ppPointMeasurement  : IPointMeasurement**'''
        return super(IMensuration3D, self).GetPoint3D(pInPoint)
    def GetCentroid3D(self, pPolygon):
        '''Method IMensuration3D.GetCentroid3D

           INPUT
            pPolygon            : IPolygon*

           OUTPUT
            ppPointMeasurement  : IPointMeasurement**'''
        return super(IMensuration3D, self).GetCentroid3D(pPolygon)
    def GetDistance3D(self, pFirstPoint, pSecondPoint):
        '''Method IMensuration3D.GetDistance3D

           INPUTS
            pFirstPoint         : IPoint*
            pSecondPoint        : IPoint*

           OUTPUT
            ppDistMeasurement   : IDistanceMeasurement**'''
        return super(IMensuration3D, self).GetDistance3D(pFirstPoint, pSecondPoint)
    def GetAngle3D(self, pFirstPoint, pSecondPoint):
        '''Method IMensuration3D.GetAngle3D

           INPUTS
            pFirstPoint         : IPoint*
            pSecondPoint        : IPoint*

           OUTPUTS
            ppAzimuthAngle      : IAngularMeasurement**
            ppElevationAngle    : IAngularMeasurement**'''
        return super(IMensuration3D, self).GetAngle3D(pFirstPoint, pSecondPoint)
    def GetAreaAndPerimeter3D(self, pPolygon):
        '''Method IMensuration3D.GetAreaAndPerimeter3D

           INPUT
            pPolygon            : IPolygon*

           OUTPUT
            ppPolygonMeasurement: IPolygonMeasurement**'''
        return super(IMensuration3D, self).GetAreaAndPerimeter3D(pPolygon)
    CanMeasure3D = property(get_CanMeasure3D, None, None)

class IRasterBand(_esriDataSourcesRaster.IRasterBand):
    _IID = uuid.UUID('31e6c041-ec46-11d1-8d21-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRasterBand, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def HasTable(self):
        '''Method IRasterBand.HasTable

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterBand, self).HasTable()
    def HasStatistics(self):
        '''Method IRasterBand.HasStatistics

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterBand, self).HasStatistics()
    def HasColormap(self):
        '''Method IRasterBand.HasColormap

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IRasterBand, self).HasColormap()
    def get_Statistics(self):
        '''Method IRasterBand.get_Statistics

           OUTPUT
            Statistics          : IRasterStatistics**'''
        return super(IRasterBand, self).get_Statistics()
    def ComputeStatsAndHist(self):
        '''Method IRasterBand.ComputeStatsAndHist'''
        return super(IRasterBand, self).ComputeStatsAndHist()
    def get_Histogram(self):
        '''Method IRasterBand.get_Histogram

           OUTPUT
            Histogram           : IRasterHistogram**'''
        return super(IRasterBand, self).get_Histogram()
    def get_Colormap(self):
        '''Method IRasterBand.get_Colormap

           OUTPUT
            Colormap            : IRasterColormap**'''
        return super(IRasterBand, self).get_Colormap()
    def get_AttributeTable(self):
        '''Method IRasterBand.get_AttributeTable

           OUTPUT
            Table               : ITable**'''
        return super(IRasterBand, self).get_AttributeTable()
    def get_DescriptorTable(self):
        '''Method IRasterBand.get_DescriptorTable

           OUTPUT
            ppTable             : IDescTable**'''
        return super(IRasterBand, self).get_DescriptorTable()
    def get_ClassNames(self):
        '''Method IRasterBand.get_ClassNames

           OUTPUT
            ppClassNames        : IRasterClassNames**'''
        return super(IRasterBand, self).get_ClassNames()
    def get_RasterDataset(self):
        '''Method IRasterBand.get_RasterDataset

           OUTPUT
            Dataset             : IRasterDataset**'''
        return super(IRasterBand, self).get_RasterDataset()
    def get_RepresentationType(self):
        '''Method IRasterBand.get_RepresentationType

           OUTPUT
            pVal                : rstRepresentationType*'''
        return super(IRasterBand, self).get_RepresentationType()
    def put_RepresentationType(self, pVal):
        '''Method IRasterBand.put_RepresentationType

           INPUT
            pVal                : rstRepresentationType'''
        return super(IRasterBand, self).put_RepresentationType(pVal)
    def get_ContrastTable(self):
        '''Method IRasterBand.get_ContrastTable

           OUTPUT
            cont                : IContrastTable**'''
        return super(IRasterBand, self).get_ContrastTable()
    def put_ContrastTable(self, cont):
        '''Method IRasterBand.put_ContrastTable

           INPUT
            cont                : IContrastTable*'''
        return super(IRasterBand, self).put_ContrastTable(cont)
    def CanCopy(self):
        '''Method IRasterBand.CanCopy

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IRasterBand, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IRasterBand.Copy

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            copyDataset         : IDataset**'''
        return super(IRasterBand, self).Copy(copyName, copyWorkspace)
    def get_Bandname(self):
        '''Method IRasterBand.get_Bandname

           OUTPUT
            Bandname            : BSTR*'''
        return super(IRasterBand, self).get_Bandname()
    def put_DirectlyOpened(self, bDirectlyOpened):
        '''Method IRasterBand.put_DirectlyOpened

           INPUT
            bDirectlyOpened     : VARIANT_BOOL'''
        return super(IRasterBand, self).put_DirectlyOpened(bDirectlyOpened)
    def get_DirectlyOpened(self):
        '''Method IRasterBand.get_DirectlyOpened

           OUTPUT
            bDirectlyOpened     : VARIANT_BOOL*'''
        return super(IRasterBand, self).get_DirectlyOpened()
    AttributeTable = property(get_AttributeTable, None, None)
    Bandname = property(get_Bandname, None, None)
    ClassNames = property(get_ClassNames, None, None)
    Colormap = property(get_Colormap, None, None)
    ContrastTable = property(get_ContrastTable, put_ContrastTable, None)
    DescriptorTable = property(get_DescriptorTable, None, None)
    DirectlyOpened = property(get_DirectlyOpened, put_DirectlyOpened, None)
    Histogram = property(get_Histogram, None, None)
    RasterDataset = property(get_RasterDataset, None, None)
    RepresentationType = property(get_RepresentationType, put_RepresentationType, None)
    Statistics = property(get_Statistics, None, None)

class IRasterStatistics(_esriDataSourcesRaster.IRasterStatistics):
    _IID = uuid.UUID('7e7e6103-fa34-11d1-8d22-0000f8780535')

    def __init__(self, *args, **kw):
        super(IRasterStatistics, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Minimum(self):
        '''Method IRasterStatistics.get_Minimum

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics, self).get_Minimum()
    def put_Minimum(self, pVal):
        '''Method IRasterStatistics.put_Minimum

           INPUT
            pVal                : double'''
        return super(IRasterStatistics, self).put_Minimum(pVal)
    def get_Maximum(self):
        '''Method IRasterStatistics.get_Maximum

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics, self).get_Maximum()
    def put_Maximum(self, pVal):
        '''Method IRasterStatistics.put_Maximum

           INPUT
            pVal                : double'''
        return super(IRasterStatistics, self).put_Maximum(pVal)
    def get_Mean(self):
        '''Method IRasterStatistics.get_Mean

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics, self).get_Mean()
    def put_Mean(self, pVal):
        '''Method IRasterStatistics.put_Mean

           INPUT
            pVal                : double'''
        return super(IRasterStatistics, self).put_Mean(pVal)
    def get_StandardDeviation(self):
        '''Method IRasterStatistics.get_StandardDeviation

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics, self).get_StandardDeviation()
    def put_StandardDeviation(self, pVal):
        '''Method IRasterStatistics.put_StandardDeviation

           INPUT
            pVal                : double'''
        return super(IRasterStatistics, self).put_StandardDeviation(pVal)
    def get_Median(self):
        '''Method IRasterStatistics.get_Median

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics, self).get_Median()
    def get_Mode(self):
        '''Method IRasterStatistics.get_Mode

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics, self).get_Mode()
    def get_IsValid(self):
        '''Method IRasterStatistics.get_IsValid

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IRasterStatistics, self).get_IsValid()
    def put_IsValid(self, pVal):
        '''Method IRasterStatistics.put_IsValid

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IRasterStatistics, self).put_IsValid(pVal)
    def get_IgnoredValues(self):
        '''Method IRasterStatistics.get_IgnoredValues

           OUTPUT
            pVal                : VARIANT*'''
        return super(IRasterStatistics, self).get_IgnoredValues()
    def put_IgnoredValues(self, pVal):
        '''Method IRasterStatistics.put_IgnoredValues

           INPUT
            pVal                : VARIANT'''
        return super(IRasterStatistics, self).put_IgnoredValues(pVal)
    def get_SkipFactorX(self):
        '''Method IRasterStatistics.get_SkipFactorX

           OUTPUT
            pVal                : long*'''
        return super(IRasterStatistics, self).get_SkipFactorX()
    def put_SkipFactorX(self, pVal):
        '''Method IRasterStatistics.put_SkipFactorX

           INPUT
            pVal                : long'''
        return super(IRasterStatistics, self).put_SkipFactorX(pVal)
    def get_SkipFactorY(self):
        '''Method IRasterStatistics.get_SkipFactorY

           OUTPUT
            pVal                : long*'''
        return super(IRasterStatistics, self).get_SkipFactorY()
    def put_SkipFactorY(self, pVal):
        '''Method IRasterStatistics.put_SkipFactorY

           INPUT
            pVal                : long'''
        return super(IRasterStatistics, self).put_SkipFactorY(pVal)
    def put_RasterBand(self, _arg1):
        '''Method IRasterStatistics.put_RasterBand

           INPUT
            _arg1               : IRasterBand*'''
        return super(IRasterStatistics, self).put_RasterBand(_arg1)
    def Recalculate(self):
        '''Method IRasterStatistics.Recalculate'''
        return super(IRasterStatistics, self).Recalculate()
    IgnoredValues = property(get_IgnoredValues, put_IgnoredValues, None)
    IsValid = property(get_IsValid, put_IsValid, None)
    Maximum = property(get_Maximum, put_Maximum, None)
    Mean = property(get_Mean, put_Mean, None)
    Median = property(get_Median, None, None)
    Minimum = property(get_Minimum, put_Minimum, None)
    Mode = property(get_Mode, None, None)
    RasterBand = property(None, put_RasterBand, None)
    SkipFactorX = property(get_SkipFactorX, put_SkipFactorX, None)
    SkipFactorY = property(get_SkipFactorY, put_SkipFactorY, None)
    StandardDeviation = property(get_StandardDeviation, put_StandardDeviation, None)

class IEnumRasterBand(_esriDataSourcesRaster.IEnumRasterBand):
    _IID = uuid.UUID('7aca3d03-0629-11d2-8d24-0000f8780535')
    def Next(self):
        '''Method IEnumRasterBand.Next

           OUTPUT
            ppBand              : IRasterBand**'''
        return super(IEnumRasterBand, self).Next()
    def __iter__(self):
        try:
            super(IEnumRasterBand, self).Reset()
            val = super(IEnumRasterBand, self).Next()
            while val:
                yield val
                val = super(IEnumRasterBand, self).Next()
        except:
            pass
    def Reset(self):
        '''Method IEnumRasterBand.Reset'''
        return super(IEnumRasterBand, self).Reset()

class IRasterBandEdit(_esriDataSourcesRaster.IRasterBandEdit):
    _IID = uuid.UUID('0ab74c4d-7574-440e-b45a-2a36f22c57c8')
    def AlterStatistics(self, pStats):
        '''Method IRasterBandEdit.AlterStatistics

           INPUT
            pStats              : IRasterStatistics*'''
        return super(IRasterBandEdit, self).AlterStatistics(pStats)
    def AlterHistogram(self, pHistogram):
        '''Method IRasterBandEdit.AlterHistogram

           INPUT
            pHistogram          : IRasterHistogram*'''
        return super(IRasterBandEdit, self).AlterHistogram(pHistogram)
    def ComputeStatsHistogram(self, PyramidLevel):
        '''Method IRasterBandEdit.ComputeStatsHistogram

           INPUT
            PyramidLevel        : long'''
        return super(IRasterBandEdit, self).ComputeStatsHistogram(PyramidLevel)

class IRasterBandEdit2(_esriDataSourcesRaster.IRasterBandEdit2):
    _IID = uuid.UUID('400f6ddf-d613-4dd0-a803-e7504dcbacaf')
    def ComputeStatisticsHistogram(self, skipx, skipy, IgnoreValues, requireHistogram):
        '''Method IRasterBandEdit2.ComputeStatisticsHistogram

           INPUTS
            skipx               : long
            skipy               : long
            IgnoreValues        : VARIANT
            requireHistogram    : VARIANT_BOOL'''
        return super(IRasterBandEdit2, self).ComputeStatisticsHistogram(skipx, skipy, IgnoreValues, requireHistogram)
    def AlterStatistics(self, pStats):
        '''Method IRasterBandEdit.AlterStatistics (from IRasterBandEdit)

           INPUT
            pStats              : IRasterStatistics*'''
        return super(IRasterBandEdit2, self).AlterStatistics(pStats)
    def AlterHistogram(self, pHistogram):
        '''Method IRasterBandEdit.AlterHistogram (from IRasterBandEdit)

           INPUT
            pHistogram          : IRasterHistogram*'''
        return super(IRasterBandEdit2, self).AlterHistogram(pHistogram)
    def ComputeStatsHistogram(self, PyramidLevel):
        '''Method IRasterBandEdit.ComputeStatsHistogram (from IRasterBandEdit)

           INPUT
            PyramidLevel        : long'''
        return super(IRasterBandEdit2, self).ComputeStatsHistogram(PyramidLevel)

class IRasterBandCollection(_esriDataSourcesRaster.IRasterBandCollection):
    _IID = uuid.UUID('7aca3d10-0629-11d2-8d24-0000f8780535')
    def Add(self, Element, index):
        '''Method IRasterBandCollection.Add

           INPUTS
            Element             : IRasterBand*
            index               : long'''
        return super(IRasterBandCollection, self).Add(Element, index)
    def get_Count(self):
        '''Method IRasterBandCollection.get_Count

           OUTPUT
            Count               : long*'''
        return super(IRasterBandCollection, self).get_Count()
    def Clear(self):
        '''Method IRasterBandCollection.Clear'''
        return super(IRasterBandCollection, self).Clear()
    def Remove(self, index):
        '''Method IRasterBandCollection.Remove

           INPUT
            index               : long'''
        return super(IRasterBandCollection, self).Remove(index)
    def get_BandIndex(self, Name):
        '''Method IRasterBandCollection.get_BandIndex

           INPUT
            Name                : BSTR

           OUTPUT
            BandIndex           : long*'''
        return super(IRasterBandCollection, self).get_BandIndex(Name)
    def get_BandByName(self, Name):
        '''Method IRasterBandCollection.get_BandByName

           INPUT
            Name                : BSTR

           OUTPUT
            band                : IRasterBand**'''
        return super(IRasterBandCollection, self).get_BandByName(Name)
    def get_Bands(self):
        '''Method IRasterBandCollection.get_Bands

           OUTPUT
            Bands               : IEnumRasterBand**'''
        return super(IRasterBandCollection, self).get_Bands()
    def Item(self, BandIndex):
        '''Method IRasterBandCollection.Item

           INPUT
            BandIndex           : long

           OUTPUT
            band                : IRasterBand**'''
        return super(IRasterBandCollection, self).Item(BandIndex)
    def SaveAs(self, new_name, worksp, Format):
        '''Method IRasterBandCollection.SaveAs

           INPUTS
            new_name            : BSTR
            worksp              : IWorkspace*
            Format              : BSTR

           OUTPUT
            rds                 : IDataset**'''
        return super(IRasterBandCollection, self).SaveAs(new_name, worksp, Format)
    def AppendBand(self, Element):
        '''Method IRasterBandCollection.AppendBand

           INPUT
            Element             : IRasterBand*'''
        return super(IRasterBandCollection, self).AppendBand(Element)
    def AppendBands(self, Bands):
        '''Method IRasterBandCollection.AppendBands

           INPUT
            Bands               : IRasterBandCollection*'''
        return super(IRasterBandCollection, self).AppendBands(Bands)
    Bands = property(get_Bands, None, None)
    Count = property(get_Count, None, None)
    BandByName = IndexProperty(get_BandByName, None)
    BandIndex = IndexProperty(get_BandIndex, None)

class IRasterWorkspace(_esriDataSourcesRaster.IRasterWorkspace):
    _IID = uuid.UUID('aae25031-35fb-11d2-b1f2-00c04f8edeff')
    def OpenRasterDataset(self, Name):
        '''Method IRasterWorkspace.OpenRasterDataset

           INPUT
            Name                : BSTR

           OUTPUT
            RasterDataset       : IRasterDataset**'''
        return super(IRasterWorkspace, self).OpenRasterDataset(Name)
    def CreateRasterDataset(self, Name):
        '''Method IRasterWorkspace.CreateRasterDataset

           INPUT
            Name                : BSTR

           OUTPUT
            RasterDataset       : IRasterDataset**'''
        return super(IRasterWorkspace, self).CreateRasterDataset(Name)
    def OpenRasterBand(self, Name):
        '''Method IRasterWorkspace.OpenRasterBand

           INPUT
            Name                : BSTR

           OUTPUT
            RasterBand          : IRasterBand**'''
        return super(IRasterWorkspace, self).OpenRasterBand(Name)
    def CreateRasterBand(self, Name):
        '''Method IRasterWorkspace.CreateRasterBand

           INPUT
            Name                : BSTR

           OUTPUT
            RasterBand          : IRasterBand**'''
        return super(IRasterWorkspace, self).CreateRasterBand(Name)
    def IsWorkspace(self, Name):
        '''Method IRasterWorkspace.IsWorkspace

           INPUT
            Name                : BSTR

           OUTPUT
            IsWorkspace         : VARIANT_BOOL*'''
        return super(IRasterWorkspace, self).IsWorkspace(Name)
    def CanCopy(self):
        '''Method IRasterWorkspace.CanCopy

           OUTPUT
            CanCopy             : VARIANT_BOOL*'''
        return super(IRasterWorkspace, self).CanCopy()
    def Copy(self, copyName, copyWorkspace):
        '''Method IRasterWorkspace.Copy

           INPUTS
            copyName            : BSTR
            copyWorkspace       : IWorkspace*

           OUTPUT
            copyDataset         : IDataset**'''
        return super(IRasterWorkspace, self).Copy(copyName, copyWorkspace)

class IRasterStatistics2(_esriDataSourcesRaster.IRasterStatistics2):
    _IID = uuid.UUID('dc667a54-7969-4486-aa5a-f7ec40d4b707')

    def __init__(self, *args, **kw):
        super(IRasterStatistics2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def get_Covariances(self):
        '''Method IRasterStatistics2.get_Covariances

           OUTPUT
            pVal                : VARIANT*'''
        return super(IRasterStatistics2, self).get_Covariances()
    def put_Covariances(self, pVal):
        '''Method IRasterStatistics2.put_Covariances

           INPUT
            pVal                : VARIANT'''
        return super(IRasterStatistics2, self).put_Covariances(pVal)
    def get_Minimum(self):
        '''Method IRasterStatistics.get_Minimum (from IRasterStatistics)

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics2, self).get_Minimum()
    def put_Minimum(self, pVal):
        '''Method IRasterStatistics.put_Minimum (from IRasterStatistics)

           INPUT
            pVal                : double'''
        return super(IRasterStatistics2, self).put_Minimum(pVal)
    def get_Maximum(self):
        '''Method IRasterStatistics.get_Maximum (from IRasterStatistics)

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics2, self).get_Maximum()
    def put_Maximum(self, pVal):
        '''Method IRasterStatistics.put_Maximum (from IRasterStatistics)

           INPUT
            pVal                : double'''
        return super(IRasterStatistics2, self).put_Maximum(pVal)
    def get_Mean(self):
        '''Method IRasterStatistics.get_Mean (from IRasterStatistics)

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics2, self).get_Mean()
    def put_Mean(self, pVal):
        '''Method IRasterStatistics.put_Mean (from IRasterStatistics)

           INPUT
            pVal                : double'''
        return super(IRasterStatistics2, self).put_Mean(pVal)
    def get_StandardDeviation(self):
        '''Method IRasterStatistics.get_StandardDeviation (from IRasterStatistics)

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics2, self).get_StandardDeviation()
    def put_StandardDeviation(self, pVal):
        '''Method IRasterStatistics.put_StandardDeviation (from IRasterStatistics)

           INPUT
            pVal                : double'''
        return super(IRasterStatistics2, self).put_StandardDeviation(pVal)
    def get_Median(self):
        '''Method IRasterStatistics.get_Median (from IRasterStatistics)

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics2, self).get_Median()
    def get_Mode(self):
        '''Method IRasterStatistics.get_Mode (from IRasterStatistics)

           OUTPUT
            pVal                : double*'''
        return super(IRasterStatistics2, self).get_Mode()
    def get_IsValid(self):
        '''Method IRasterStatistics.get_IsValid (from IRasterStatistics)

           OUTPUT
            pVal                : VARIANT_BOOL*'''
        return super(IRasterStatistics2, self).get_IsValid()
    def put_IsValid(self, pVal):
        '''Method IRasterStatistics.put_IsValid (from IRasterStatistics)

           INPUT
            pVal                : VARIANT_BOOL'''
        return super(IRasterStatistics2, self).put_IsValid(pVal)
    def get_IgnoredValues(self):
        '''Method IRasterStatistics.get_IgnoredValues (from IRasterStatistics)

           OUTPUT
            pVal                : VARIANT*'''
        return super(IRasterStatistics2, self).get_IgnoredValues()
    def put_IgnoredValues(self, pVal):
        '''Method IRasterStatistics.put_IgnoredValues (from IRasterStatistics)

           INPUT
            pVal                : VARIANT'''
        return super(IRasterStatistics2, self).put_IgnoredValues(pVal)
    def get_SkipFactorX(self):
        '''Method IRasterStatistics.get_SkipFactorX (from IRasterStatistics)

           OUTPUT
            pVal                : long*'''
        return super(IRasterStatistics2, self).get_SkipFactorX()
    def put_SkipFactorX(self, pVal):
        '''Method IRasterStatistics.put_SkipFactorX (from IRasterStatistics)

           INPUT
            pVal                : long'''
        return super(IRasterStatistics2, self).put_SkipFactorX(pVal)
    def get_SkipFactorY(self):
        '''Method IRasterStatistics.get_SkipFactorY (from IRasterStatistics)

           OUTPUT
            pVal                : long*'''
        return super(IRasterStatistics2, self).get_SkipFactorY()
    def put_SkipFactorY(self, pVal):
        '''Method IRasterStatistics.put_SkipFactorY (from IRasterStatistics)

           INPUT
            pVal                : long'''
        return super(IRasterStatistics2, self).put_SkipFactorY(pVal)
    def put_RasterBand(self, _arg1):
        '''Method IRasterStatistics.put_RasterBand (from IRasterStatistics)

           INPUT
            _arg1               : IRasterBand*'''
        return super(IRasterStatistics2, self).put_RasterBand(_arg1)
    def Recalculate(self):
        '''Method IRasterStatistics.Recalculate (from IRasterStatistics)'''
        return super(IRasterStatistics2, self).Recalculate()
    Covariances = property(get_Covariances, put_Covariances, None)
    IgnoredValues = property(get_IgnoredValues, put_IgnoredValues, None)
    IsValid = property(get_IsValid, put_IsValid, None)
    Maximum = property(get_Maximum, put_Maximum, None)
    Mean = property(get_Mean, put_Mean, None)
    Median = property(get_Median, None, None)
    Minimum = property(get_Minimum, put_Minimum, None)
    Mode = property(get_Mode, None, None)
    RasterBand = property(None, put_RasterBand, None)
    SkipFactorX = property(get_SkipFactorX, put_SkipFactorX, None)
    SkipFactorY = property(get_SkipFactorY, put_SkipFactorY, None)
    StandardDeviation = property(get_StandardDeviation, put_StandardDeviation, None)

class IStatsHistogram3(_esriDataSourcesRaster.IStatsHistogram3):
    _IID = uuid.UUID('dbe269bf-6bde-43f2-9bfb-d90551d7efe3')

    def __init__(self, *args, **kw):
        super(IStatsHistogram3, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def PutHistogramInfo(self, Size, resolution, Min, Max):
        '''Method IStatsHistogram3.PutHistogramInfo

           INPUTS
            Size                : long
            resolution          : double
            Min                 : double
            Max                 : double'''
        return super(IStatsHistogram3, self).PutHistogramInfo(Size, resolution, Min, Max)
    def QueryHistogramInfo(self):
        '''Method IStatsHistogram3.QueryHistogramInfo

           OUTPUTS
            Size                : long*
            resolution          : double*
            Min                 : double*
            Max                 : double*'''
        return super(IStatsHistogram3, self).QueryHistogramInfo()
    def get_RasterStatistics(self):
        '''Method IStatsHistogram3.get_RasterStatistics

           OUTPUT
            ppStatistics        : IRasterStatistics**'''
        return super(IStatsHistogram3, self).get_RasterStatistics()
    def get_RasterHistogram(self):
        '''Method IStatsHistogram3.get_RasterHistogram

           OUTPUT
            ppHistogram         : IRasterHistogram**'''
        return super(IStatsHistogram3, self).get_RasterHistogram()
    def InitCovariances(self, nBands):
        '''Method IStatsHistogram3.InitCovariances

           INPUT
            nBands              : long'''
        return super(IStatsHistogram3, self).InitCovariances(nBands)
    def AccumulateCovariance(self, iBand, numValidPixel, xy, x, y):
        '''Method IStatsHistogram3.AccumulateCovariance

           INPUTS
            iBand               : long
            numValidPixel       : double
            xy                  : double
            x                   : double
            y                   : double'''
        return super(IStatsHistogram3, self).AccumulateCovariance(iBand, numValidPixel, xy, x, y)
    def UpdateCovariances(self):
        '''Method IStatsHistogram3.UpdateCovariances'''
        return super(IStatsHistogram3, self).UpdateCovariances()
    def get_Covariances(self):
        '''Method IStatsHistogram3.get_Covariances

           OUTPUT
            pVal                : VARIANT*'''
        return super(IStatsHistogram3, self).get_Covariances()
    def put_Covariances(self, pVal):
        '''Method IStatsHistogram3.put_Covariances

           INPUT
            pVal                : VARIANT'''
        return super(IStatsHistogram3, self).put_Covariances(pVal)
    def get_PixelCount(self):
        '''Method IStatsHistogram2.get_PixelCount (from IStatsHistogram2)

           OUTPUT
            pNumPixels          : double*'''
        return super(IStatsHistogram3, self).get_PixelCount()
    def get_Min(self):
        '''Method IStatsHistogram.get_Min (from IStatsHistogram)

           OUTPUT
            Min                 : double*'''
        return super(IStatsHistogram3, self).get_Min()
    def put_Min(self, Min):
        '''Method IStatsHistogram.put_Min (from IStatsHistogram)

           INPUT
            Min                 : double'''
        return super(IStatsHistogram3, self).put_Min(Min)
    def get_Max(self):
        '''Method IStatsHistogram.get_Max (from IStatsHistogram)

           OUTPUT
            Max                 : double*'''
        return super(IStatsHistogram3, self).get_Max()
    def put_Max(self, Max):
        '''Method IStatsHistogram.put_Max (from IStatsHistogram)

           INPUT
            Max                 : double'''
        return super(IStatsHistogram3, self).put_Max(Max)
    def get_Mean(self):
        '''Method IStatsHistogram.get_Mean (from IStatsHistogram)

           OUTPUT
            Mean                : double*'''
        return super(IStatsHistogram3, self).get_Mean()
    def put_Mean(self, Mean):
        '''Method IStatsHistogram.put_Mean (from IStatsHistogram)

           INPUT
            Mean                : double'''
        return super(IStatsHistogram3, self).put_Mean(Mean)
    def get_StdDev(self):
        '''Method IStatsHistogram.get_StdDev (from IStatsHistogram)

           OUTPUT
            StdDev              : double*'''
        return super(IStatsHistogram3, self).get_StdDev()
    def put_StdDev(self, StdDev):
        '''Method IStatsHistogram.put_StdDev (from IStatsHistogram)

           INPUT
            StdDev              : double'''
        return super(IStatsHistogram3, self).put_StdDev(StdDev)
    def PutHistogramMinmax(self, Min, Max):
        '''Method IStatsHistogram.PutHistogramMinmax (from IStatsHistogram)

           INPUTS
            Min                 : double
            Max                 : double'''
        return super(IStatsHistogram3, self).PutHistogramMinmax(Min, Max)
    def QueryHistogramMinmax(self):
        '''Method IStatsHistogram.QueryHistogramMinmax (from IStatsHistogram)

           OUTPUTS
            Min                 : double*
            Max                 : double*'''
        return super(IStatsHistogram3, self).QueryHistogramMinmax()
    def get_Histogram(self):
        '''Method IStatsHistogram.get_Histogram (from IStatsHistogram)

           OUTPUT
            Histogram           : VARIANT*'''
        return super(IStatsHistogram3, self).get_Histogram()
    def put_Histogram(self, Histogram):
        '''Method IStatsHistogram.put_Histogram (from IStatsHistogram)

           INPUT
            Histogram           : VARIANT'''
        return super(IStatsHistogram3, self).put_Histogram(Histogram)
    def PutStats(self, Min, Max, Mean, StdDev):
        '''Method IStatsHistogram.PutStats (from IStatsHistogram)

           INPUTS
            Min                 : double
            Max                 : double
            Mean                : double
            StdDev              : double'''
        return super(IStatsHistogram3, self).PutStats(Min, Max, Mean, StdDev)
    def QueryStats(self):
        '''Method IStatsHistogram.QueryStats (from IStatsHistogram)

           OUTPUTS
            Min                 : double*
            Max                 : double*
            Mean                : double*
            StdDev              : double*'''
        return super(IStatsHistogram3, self).QueryStats()
    def Empty(self):
        '''Method IStatsHistogram.Empty (from IStatsHistogram)'''
        return super(IStatsHistogram3, self).Empty()
    def HasStats(self):
        '''Method IStatsHistogram.HasStats (from IStatsHistogram)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IStatsHistogram3, self).HasStats()
    def HasHistogram(self):
        '''Method IStatsHistogram.HasHistogram (from IStatsHistogram)

           OUTPUT
            b                   : VARIANT_BOOL*'''
        return super(IStatsHistogram3, self).HasHistogram()
    def Accumulate(self, Value, Count):
        '''Method IStatsHistogram.Accumulate (from IStatsHistogram)

           INPUTS
            Value               : double
            Count               : long'''
        return super(IStatsHistogram3, self).Accumulate(Value, Count)
    def Update(self):
        '''Method IStatsHistogram.Update (from IStatsHistogram)'''
        return super(IStatsHistogram3, self).Update()
    Covariances = property(get_Covariances, put_Covariances, None)
    Histogram = property(get_Histogram, put_Histogram, None)
    Max = property(get_Max, put_Max, None)
    Mean = property(get_Mean, put_Mean, None)
    Min = property(get_Min, put_Min, None)
    PixelCount = property(get_PixelCount, None, None)
    RasterHistogram = property(get_RasterHistogram, None, None)
    RasterStatistics = property(get_RasterStatistics, None, None)
    StdDev = property(get_StdDev, put_StdDev, None)

class IRasterCalcStatsHistogram(_esriDataSourcesRaster.IRasterCalcStatsHistogram):
    _IID = uuid.UUID('04ddbb5f-dba3-4acc-8641-43e22e8de599')
    def ComputeFromRaster(self, pRaster, iBand, pStatsHistogram):
        '''Method IRasterCalcStatsHistogram.ComputeFromRaster

           INPUTS
            pRaster             : IRaster*
            iBand               : long
            pStatsHistogram     : IStatsHistogram*'''
        return super(IRasterCalcStatsHistogram, self).ComputeFromRaster(pRaster, iBand, pStatsHistogram)
    def LoadFromRasterBand(self, pBand, NoData, pStatsHistogram):
        '''Method IRasterCalcStatsHistogram.LoadFromRasterBand

           INPUTS
            pBand               : IRasterBand*
            NoData              : VARIANT
            pStatsHistogram     : IStatsHistogram*'''
        return super(IRasterCalcStatsHistogram, self).LoadFromRasterBand(pBand, NoData, pStatsHistogram)

class IRasterCalcStatsHistogram2(_esriDataSourcesRaster.IRasterCalcStatsHistogram2):
    _IID = uuid.UUID('5ea490ee-8638-4412-9df6-1fda5b9a8937')
    def ComputeAllFromRaster(self, pRaster, pStatsHistograms):
        '''Method IRasterCalcStatsHistogram2.ComputeAllFromRaster

           INPUTS
            pRaster             : IRaster*
            pStatsHistograms    : IArray*'''
        return super(IRasterCalcStatsHistogram2, self).ComputeAllFromRaster(pRaster, pStatsHistograms)
    def ComputeFromRaster(self, pRaster, iBand, pStatsHistogram):
        '''Method IRasterCalcStatsHistogram.ComputeFromRaster (from IRasterCalcStatsHistogram)

           INPUTS
            pRaster             : IRaster*
            iBand               : long
            pStatsHistogram     : IStatsHistogram*'''
        return super(IRasterCalcStatsHistogram2, self).ComputeFromRaster(pRaster, iBand, pStatsHistogram)
    def LoadFromRasterBand(self, pBand, NoData, pStatsHistogram):
        '''Method IRasterCalcStatsHistogram.LoadFromRasterBand (from IRasterCalcStatsHistogram)

           INPUTS
            pBand               : IRasterBand*
            NoData              : VARIANT
            pStatsHistogram     : IStatsHistogram*'''
        return super(IRasterCalcStatsHistogram2, self).LoadFromRasterBand(pBand, NoData, pStatsHistogram)

class IRasterCalcStatsHistogram3(_esriDataSourcesRaster.IRasterCalcStatsHistogram3):
    _IID = uuid.UUID('16ce5be0-f053-497c-a930-a68204949fee')
    def ComputeAllFromBlock(self, pBlock, pStatsHistograms):
        '''Method IRasterCalcStatsHistogram3.ComputeAllFromBlock

           INPUTS
            pBlock              : IPixelBlock*
            pStatsHistograms    : IArray*'''
        return super(IRasterCalcStatsHistogram3, self).ComputeAllFromBlock(pBlock, pStatsHistograms)
    def LoadFromRasterBandEx(self, pBand, NoData, Approximation, pStatsHistogram):
        '''Method IRasterCalcStatsHistogram3.LoadFromRasterBandEx

           INPUTS
            pBand               : IRasterBand*
            NoData              : VARIANT
            Approximation       : VARIANT_BOOL
            pStatsHistogram     : IStatsHistogram*'''
        return super(IRasterCalcStatsHistogram3, self).LoadFromRasterBandEx(pBand, NoData, Approximation, pStatsHistogram)
    def ComputeAllFromRaster(self, pRaster, pStatsHistograms):
        '''Method IRasterCalcStatsHistogram2.ComputeAllFromRaster (from IRasterCalcStatsHistogram2)

           INPUTS
            pRaster             : IRaster*
            pStatsHistograms    : IArray*'''
        return super(IRasterCalcStatsHistogram3, self).ComputeAllFromRaster(pRaster, pStatsHistograms)
    def ComputeFromRaster(self, pRaster, iBand, pStatsHistogram):
        '''Method IRasterCalcStatsHistogram.ComputeFromRaster (from IRasterCalcStatsHistogram)

           INPUTS
            pRaster             : IRaster*
            iBand               : long
            pStatsHistogram     : IStatsHistogram*'''
        return super(IRasterCalcStatsHistogram3, self).ComputeFromRaster(pRaster, iBand, pStatsHistogram)
    def LoadFromRasterBand(self, pBand, NoData, pStatsHistogram):
        '''Method IRasterCalcStatsHistogram.LoadFromRasterBand (from IRasterCalcStatsHistogram)

           INPUTS
            pBand               : IRasterBand*
            NoData              : VARIANT
            pStatsHistogram     : IStatsHistogram*'''
        return super(IRasterCalcStatsHistogram3, self).LoadFromRasterBand(pBand, NoData, pStatsHistogram)

class IDERasterUtilities(_esriDataSourcesRaster.IDERasterUtilities):
    _IID = uuid.UUID('0715b5c1-f163-4458-bc1b-effeeaa14b70')
    def AssignRasterDatasetProperties(self, pDataset, pDataElement):
        '''Method IDERasterUtilities.AssignRasterDatasetProperties

           INPUTS
            pDataset            : IRasterDataset*
            pDataElement        : IDataElement*'''
        return super(IDERasterUtilities, self).AssignRasterDatasetProperties(pDataset, pDataElement)
    def AssignRasterBandProperties(self, pDataset, pDataElement):
        '''Method IDERasterUtilities.AssignRasterBandProperties

           INPUTS
            pDataset            : IRasterBand*
            pDataElement        : IDataElement*'''
        return super(IDERasterUtilities, self).AssignRasterBandProperties(pDataset, pDataElement)

class IRasterInfo2(_esriDataSourcesRaster.IRasterInfo2):
    _IID = uuid.UUID('28e745a8-0617-4eb0-b8bd-272a945ed117')

    def __init__(self, *args, **kw):
        super(IRasterInfo2, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, pRaster):
        '''Method IRasterInfo2.Init

           INPUT
            pRaster             : IRaster*'''
        return super(IRasterInfo2, self).Init(pRaster)
    def RemoveStatsHistograms(self):
        '''Method IRasterInfo2.RemoveStatsHistograms'''
        return super(IRasterInfo2, self).RemoveStatsHistograms()
    def get_LODInfos(self):
        '''Method IRasterInfo2.get_LODInfos

           OUTPUT
            ppLODInfos          : IRasterLODInfos**'''
        return super(IRasterInfo2, self).get_LODInfos()
    def putref_LODInfos(self, ppLODInfos):
        '''Method IRasterInfo2.putref_LODInfos

           INPUT
            ppLODInfos          : IRasterLODInfos*'''
        return super(IRasterInfo2, self).putref_LODInfos(ppLODInfos)
    def get_Colormap(self):
        '''Method IRasterInfo2.get_Colormap

           OUTPUT
            ppColormap          : IRasterColormap**'''
        return super(IRasterInfo2, self).get_Colormap()
    def putref_Colormap(self, ppColormap):
        '''Method IRasterInfo2.putref_Colormap

           INPUT
            ppColormap          : IRasterColormap*'''
        return super(IRasterInfo2, self).putref_Colormap(ppColormap)
    def get_AttributeTable(self):
        '''Method IRasterInfo2.get_AttributeTable

           OUTPUT
            ppTable             : ITable**'''
        return super(IRasterInfo2, self).get_AttributeTable()
    def putref_AttributeTable(self, ppTable):
        '''Method IRasterInfo2.putref_AttributeTable

           INPUT
            ppTable             : ITable*'''
        return super(IRasterInfo2, self).putref_AttributeTable(ppTable)
    def get_Statistics(self, iBand):
        '''Method IRasterInfo2.get_Statistics

           INPUT
            iBand               : long

           OUTPUT
            ppStats             : IRasterStatistics**'''
        return super(IRasterInfo2, self).get_Statistics(iBand)
    def putref_Statistics(self, iBand, ppStats):
        '''Method IRasterInfo2.putref_Statistics

           INPUTS
            iBand               : long
            ppStats             : IRasterStatistics*'''
        return super(IRasterInfo2, self).putref_Statistics(iBand, ppStats)
    def get_Histogram(self, iBand):
        '''Method IRasterInfo2.get_Histogram

           INPUT
            iBand               : long

           OUTPUT
            ppHistogram         : IRasterHistogram**'''
        return super(IRasterInfo2, self).get_Histogram(iBand)
    def putref_Histogram(self, iBand, ppHistogram):
        '''Method IRasterInfo2.putref_Histogram

           INPUTS
            iBand               : long
            ppHistogram         : IRasterHistogram*'''
        return super(IRasterInfo2, self).putref_Histogram(iBand, ppHistogram)
    def get_PixelResampler(self):
        '''Method IRasterInfo2.get_PixelResampler

           OUTPUT
            ppResampler         : IPixelResampler**'''
        return super(IRasterInfo2, self).get_PixelResampler()
    def putref_PixelResampler(self, ppResampler):
        '''Method IRasterInfo2.putref_PixelResampler

           INPUT
            ppResampler         : IPixelResampler*'''
        return super(IRasterInfo2, self).putref_PixelResampler(ppResampler)
    def get_MaximumCellSize(self):
        '''Method IRasterInfo2.get_MaximumCellSize

           OUTPUT
            ppMaximumCellSize   : IPnt**'''
        return super(IRasterInfo2, self).get_MaximumCellSize()
    def put_MaximumCellSize(self, ppMaximumCellSize):
        '''Method IRasterInfo2.put_MaximumCellSize

           INPUT
            ppMaximumCellSize   : IPnt*'''
        return super(IRasterInfo2, self).put_MaximumCellSize(ppMaximumCellSize)
    def get_Origin(self):
        '''Method IRasterInfo.get_Origin (from IRasterInfo)

           OUTPUT
            ppOrigin            : IPoint**'''
        return super(IRasterInfo2, self).get_Origin()
    def putref_Origin(self, ppOrigin):
        '''Method IRasterInfo.putref_Origin (from IRasterInfo)

           INPUT
            ppOrigin            : IPoint*'''
        return super(IRasterInfo2, self).putref_Origin(ppOrigin)
    def get_BlockWidth(self):
        '''Method IRasterInfo.get_BlockWidth (from IRasterInfo)

           OUTPUT
            pWidth              : long*'''
        return super(IRasterInfo2, self).get_BlockWidth()
    def put_BlockWidth(self, pWidth):
        '''Method IRasterInfo.put_BlockWidth (from IRasterInfo)

           INPUT
            pWidth              : long'''
        return super(IRasterInfo2, self).put_BlockWidth(pWidth)
    def get_BlockHeight(self):
        '''Method IRasterInfo.get_BlockHeight (from IRasterInfo)

           OUTPUT
            pHeight             : long*'''
        return super(IRasterInfo2, self).get_BlockHeight()
    def put_BlockHeight(self, pHeight):
        '''Method IRasterInfo.put_BlockHeight (from IRasterInfo)

           INPUT
            pHeight             : long'''
        return super(IRasterInfo2, self).put_BlockHeight(pHeight)
    def get_FirstPyramidLevel(self):
        '''Method IRasterInfo.get_FirstPyramidLevel (from IRasterInfo)

           OUTPUT
            pLevel              : long*'''
        return super(IRasterInfo2, self).get_FirstPyramidLevel()
    def put_FirstPyramidLevel(self, pLevel):
        '''Method IRasterInfo.put_FirstPyramidLevel (from IRasterInfo)

           INPUT
            pLevel              : long'''
        return super(IRasterInfo2, self).put_FirstPyramidLevel(pLevel)
    def get_MaximumPyramidLevel(self):
        '''Method IRasterInfo.get_MaximumPyramidLevel (from IRasterInfo)

           OUTPUT
            pLevel              : long*'''
        return super(IRasterInfo2, self).get_MaximumPyramidLevel()
    def put_MaximumPyramidLevel(self, pLevel):
        '''Method IRasterInfo.put_MaximumPyramidLevel (from IRasterInfo)

           INPUT
            pLevel              : long'''
        return super(IRasterInfo2, self).put_MaximumPyramidLevel(pLevel)
    def get_GeodataXform(self):
        '''Method IRasterInfo.get_GeodataXform (from IRasterInfo)

           OUTPUT
            ppXf                : IGeodataXform**'''
        return super(IRasterInfo2, self).get_GeodataXform()
    def putref_GeodataXform(self, ppXf):
        '''Method IRasterInfo.putref_GeodataXform (from IRasterInfo)

           INPUT
            ppXf                : IGeodataXform*'''
        return super(IRasterInfo2, self).putref_GeodataXform(ppXf)
    def get_SpatialReference(self):
        '''Method IRasterInfo.get_SpatialReference (from IRasterInfo)

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IRasterInfo2, self).get_SpatialReference()
    def get_Extent(self):
        '''Method IRasterInfo.get_Extent (from IRasterInfo)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterInfo2, self).get_Extent()
    def put_Extent(self, ppExtent):
        '''Method IRasterInfo.put_Extent (from IRasterInfo)

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IRasterInfo2, self).put_Extent(ppExtent)
    def get_NativeSpatialReference(self):
        '''Method IRasterInfo.get_NativeSpatialReference (from IRasterInfo)

           OUTPUT
            ppSpatialReference  : ISpatialReference**'''
        return super(IRasterInfo2, self).get_NativeSpatialReference()
    def putref_NativeSpatialReference(self, ppSpatialReference):
        '''Method IRasterInfo.putref_NativeSpatialReference (from IRasterInfo)

           INPUT
            ppSpatialReference  : ISpatialReference*'''
        return super(IRasterInfo2, self).putref_NativeSpatialReference(ppSpatialReference)
    def get_NativeExtent(self):
        '''Method IRasterInfo.get_NativeExtent (from IRasterInfo)

           OUTPUT
            ppExtent            : IEnvelope**'''
        return super(IRasterInfo2, self).get_NativeExtent()
    def put_NativeExtent(self, ppExtent):
        '''Method IRasterInfo.put_NativeExtent (from IRasterInfo)

           INPUT
            ppExtent            : IEnvelope*'''
        return super(IRasterInfo2, self).put_NativeExtent(ppExtent)
    def get_CellSize(self):
        '''Method IRasterInfo.get_CellSize (from IRasterInfo)

           OUTPUT
            ppCellsize          : IPnt**'''
        return super(IRasterInfo2, self).get_CellSize()
    def put_CellSize(self, ppCellsize):
        '''Method IRasterInfo.put_CellSize (from IRasterInfo)

           INPUT
            ppCellsize          : IPnt*'''
        return super(IRasterInfo2, self).put_CellSize(ppCellsize)
    def get_Width(self):
        '''Method IRasterInfo.get_Width (from IRasterInfo)

           OUTPUT
            pWidth              : long*'''
        return super(IRasterInfo2, self).get_Width()
    def get_Height(self):
        '''Method IRasterInfo.get_Height (from IRasterInfo)

           OUTPUT
            pHeight             : long*'''
        return super(IRasterInfo2, self).get_Height()
    def get_BandCount(self):
        '''Method IRasterInfo.get_BandCount (from IRasterInfo)

           OUTPUT
            pCount              : long*'''
        return super(IRasterInfo2, self).get_BandCount()
    def put_BandCount(self, pCount):
        '''Method IRasterInfo.put_BandCount (from IRasterInfo)

           INPUT
            pCount              : long'''
        return super(IRasterInfo2, self).put_BandCount(pCount)
    def get_PixelType(self):
        '''Method IRasterInfo.get_PixelType (from IRasterInfo)

           OUTPUT
            pPixelType          : rstPixelType*'''
        return super(IRasterInfo2, self).get_PixelType()
    def put_PixelType(self, pPixelType):
        '''Method IRasterInfo.put_PixelType (from IRasterInfo)

           INPUT
            pPixelType          : rstPixelType'''
        return super(IRasterInfo2, self).put_PixelType(pPixelType)
    def get_NoData(self):
        '''Method IRasterInfo.get_NoData (from IRasterInfo)

           OUTPUT
            pvNoData            : VARIANT*'''
        return super(IRasterInfo2, self).get_NoData()
    def put_NoData(self, pvNoData):
        '''Method IRasterInfo.put_NoData (from IRasterInfo)

           INPUT
            pvNoData            : VARIANT'''
        return super(IRasterInfo2, self).put_NoData(pvNoData)
    def get_Resampling(self):
        '''Method IRasterInfo.get_Resampling (from IRasterInfo)

           OUTPUT
            pResampling         : VARIANT_BOOL*'''
        return super(IRasterInfo2, self).get_Resampling()
    def put_Resampling(self, pResampling):
        '''Method IRasterInfo.put_Resampling (from IRasterInfo)

           INPUT
            pResampling         : VARIANT_BOOL'''
        return super(IRasterInfo2, self).put_Resampling(pResampling)
    def get_SupportBandSelection(self):
        '''Method IRasterInfo.get_SupportBandSelection (from IRasterInfo)

           OUTPUT
            pSupportBandSelection: VARIANT_BOOL*'''
        return super(IRasterInfo2, self).get_SupportBandSelection()
    def put_SupportBandSelection(self, pSupportBandSelection):
        '''Method IRasterInfo.put_SupportBandSelection (from IRasterInfo)

           INPUT
            pSupportBandSelection: VARIANT_BOOL'''
        return super(IRasterInfo2, self).put_SupportBandSelection(pSupportBandSelection)
    def get_Format(self):
        '''Method IRasterInfo.get_Format (from IRasterInfo)

           OUTPUT
            pFormat             : BSTR*'''
        return super(IRasterInfo2, self).get_Format()
    def put_Format(self, pFormat):
        '''Method IRasterInfo.put_Format (from IRasterInfo)

           INPUT
            pFormat             : BSTR'''
        return super(IRasterInfo2, self).put_Format(pFormat)
    AttributeTable = property(get_AttributeTable, putref_AttributeTable, None)
    BandCount = property(get_BandCount, put_BandCount, None)
    BlockHeight = property(get_BlockHeight, put_BlockHeight, None)
    BlockWidth = property(get_BlockWidth, put_BlockWidth, None)
    CellSize = property(get_CellSize, put_CellSize, None)
    Colormap = property(get_Colormap, putref_Colormap, None)
    Extent = property(get_Extent, put_Extent, None)
    FirstPyramidLevel = property(get_FirstPyramidLevel, put_FirstPyramidLevel, None)
    Format = property(get_Format, put_Format, None)
    GeodataXform = property(get_GeodataXform, putref_GeodataXform, None)
    Height = property(get_Height, None, None)
    Histogram = property(None, putref_Histogram, None)
    LODInfos = property(get_LODInfos, putref_LODInfos, None)
    MaximumCellSize = property(get_MaximumCellSize, put_MaximumCellSize, None)
    MaximumPyramidLevel = property(get_MaximumPyramidLevel, put_MaximumPyramidLevel, None)
    NativeExtent = property(get_NativeExtent, put_NativeExtent, None)
    NativeSpatialReference = property(get_NativeSpatialReference, putref_NativeSpatialReference, None)
    NoData = property(get_NoData, put_NoData, None)
    Origin = property(get_Origin, putref_Origin, None)
    PixelResampler = property(get_PixelResampler, putref_PixelResampler, None)
    PixelType = property(get_PixelType, put_PixelType, None)
    Resampling = property(get_Resampling, put_Resampling, None)
    SpatialReference = property(get_SpatialReference, None, None)
    Statistics = property(None, putref_Statistics, None)
    SupportBandSelection = property(get_SupportBandSelection, put_SupportBandSelection, None)
    Width = property(get_Width, None, None)
    Histogram = IndexProperty(get_Histogram, None)
    Statistics = IndexProperty(get_Statistics, None)

class IAISImageServiceX(_esriDataSourcesRaster.IAISImageServiceX):
    _IID = uuid.UUID('e97d7801-6643-4529-b88f-9318a38206e6')

    def __init__(self, *args, **kw):
        super(IAISImageServiceX, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def Init(self, imageServiceSource, ServiceProperties, parentClientObject):
        '''Method IAISImageServiceX.Init

           INPUTS
            imageServiceSource  : BSTR
            ServiceProperties   : BSTR
            parentClientObject  : IAISClientObjectX*

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServiceX, self).Init(imageServiceSource, ServiceProperties, parentClientObject)
    def get_ServiceInfo(self):
        '''Method IAISImageServiceX.get_ServiceInfo

           OUTPUT
            serviceInfoXml      : BSTR*'''
        return super(IAISImageServiceX, self).get_ServiceInfo()
    def GetMetaData(self, requestString):
        '''Method IAISImageServiceX.GetMetaData

           INPUT
            requestString       : BSTR

           OUTPUT
            metadata            : BSTR*'''
        return super(IAISImageServiceX, self).GetMetaData(requestString)
    def get_ServiceProperties(self):
        '''Method IAISImageServiceX.get_ServiceProperties

           OUTPUT
            pVal                : BSTR*'''
        return super(IAISImageServiceX, self).get_ServiceProperties()
    def put_ServiceProperties(self, pVal):
        '''Method IAISImageServiceX.put_ServiceProperties

           INPUT
            pVal                : BSTR'''
        return super(IAISImageServiceX, self).put_ServiceProperties(pVal)
    def ApplyServiceProperties(self):
        '''Method IAISImageServiceX.ApplyServiceProperties

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServiceX, self).ApplyServiceProperties()
    def ExtractAoi(self, x1, y1, x2, y2, nCols, nRows):
        '''Method IAISImageServiceX.ExtractAoi

           INPUTS
            x1                  : double
            y1                  : double
            x2                  : double
            y2                  : double
            nCols               : long
            nRows               : long

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServiceX, self).ExtractAoi(x1, y1, x2, y2, nCols, nRows)
    def GetBufferSize(self):
        '''Method IAISImageServiceX.GetBufferSize

           OUTPUT
            bufferSize          : long*'''
        return super(IAISImageServiceX, self).GetBufferSize()
    def GetImageInBuffer(self, bufferPtr):
        '''Method IAISImageServiceX.GetImageInBuffer

           INPUT
            bufferPtr           : long

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServiceX, self).GetImageInBuffer(bufferPtr)
    def GetImageMetadata(self, levelOfDetail):
        '''Method IAISImageServiceX.GetImageMetadata

           INPUT
            levelOfDetail       : BSTR

           OUTPUT
            imageMetaData       : BSTR*'''
        return super(IAISImageServiceX, self).GetImageMetadata(levelOfDetail)
    def get_Status(self):
        '''Method IAISImageServiceX.get_Status

           OUTPUT
            pVal                : BSTR*'''
        return super(IAISImageServiceX, self).get_Status()
    def SetProperty(self, Name, Value):
        '''Method IAISImageServiceX.SetProperty

           INPUTS
            Name                : BSTR
            Value               : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageServiceX, self).SetProperty(Name, Value)
    def GetProperty(self, Name):
        '''Method IAISImageServiceX.GetProperty

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : BSTR*'''
        return super(IAISImageServiceX, self).GetProperty(Name)
    def Close(self):
        '''Method IAISImageServiceX.Close'''
        return super(IAISImageServiceX, self).Close()
    ServiceInfo = property(get_ServiceInfo, None, None)
    ServiceProperties = property(get_ServiceProperties, put_ServiceProperties, None)
    Status = property(get_Status, None, None)

class IAISClientObjectX(_esriDataSourcesRaster.IAISClientObjectX):
    _IID = uuid.UUID('5496a49e-d690-412e-ad57-adf29e49bfe5')
    def Init(self, iscConfig):
        '''Method IAISClientObjectX.Init

           INPUT
            iscConfig           : BSTR

           OUTPUT
            retVal              : VARIANT_BOOL*'''
        return super(IAISClientObjectX, self).Init(iscConfig)
    def Close(self):
        '''Method IAISClientObjectX.Close

           OUTPUT
            retVal              : VARIANT_BOOL*'''
        return super(IAISClientObjectX, self).Close()
    def GetVersion(self, serverHost, serverPort):
        '''Method IAISClientObjectX.GetVersion

           INPUTS
            serverHost          : BSTR
            serverPort          : BSTR

           OUTPUT
            Version             : float*'''
        return super(IAISClientObjectX, self).GetVersion(serverHost, serverPort)
    def GetServerInfo(self, requestString):
        '''Method IAISClientObjectX.GetServerInfo

           INPUT
            requestString       : BSTR

           OUTPUT
            serverInfo          : BSTR*'''
        return super(IAISClientObjectX, self).GetServerInfo(requestString)
    def OpenImageService(self, imageServiceSource, serviceInitializationProperties):
        '''Method IAISClientObjectX.OpenImageService

           INPUTS
            imageServiceSource  : BSTR
            serviceInitializationProperties: BSTR

           OUTPUT
            ImageService        : IAISImageServiceX**'''
        return super(IAISClientObjectX, self).OpenImageService(imageServiceSource, serviceInitializationProperties)
    def get_Status(self):
        '''Method IAISClientObjectX.get_Status

           OUTPUT
            Status              : BSTR*'''
        return super(IAISClientObjectX, self).get_Status()
    def Report(self, statusString):
        '''Method IAISClientObjectX.Report

           INPUT
            statusString        : BSTR'''
        return super(IAISClientObjectX, self).Report(statusString)
    Status = property(get_Status, None, None)

class IAISImageService2X(_esriDataSourcesRaster.IAISImageService2X):
    _IID = uuid.UUID('715c27db-b9d8-4425-85bc-ee730aa493db')

    def __init__(self, *args, **kw):
        super(IAISImageService2X, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def GetImageInfo(self):
        '''Method IAISImageService2X.GetImageInfo

           OUTPUTS
            XMin                : double*
            YMin                : double*
            XMax                : double*
            YMax                : double*
            nCols               : long*
            nRows               : long*'''
        return super(IAISImageService2X, self).GetImageInfo()
    def Init(self, imageServiceSource, ServiceProperties, parentClientObject):
        '''Method IAISImageServiceX.Init (from IAISImageServiceX)

           INPUTS
            imageServiceSource  : BSTR
            ServiceProperties   : BSTR
            parentClientObject  : IAISClientObjectX*

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService2X, self).Init(imageServiceSource, ServiceProperties, parentClientObject)
    def get_ServiceInfo(self):
        '''Method IAISImageServiceX.get_ServiceInfo (from IAISImageServiceX)

           OUTPUT
            serviceInfoXml      : BSTR*'''
        return super(IAISImageService2X, self).get_ServiceInfo()
    def GetMetaData(self, requestString):
        '''Method IAISImageServiceX.GetMetaData (from IAISImageServiceX)

           INPUT
            requestString       : BSTR

           OUTPUT
            metadata            : BSTR*'''
        return super(IAISImageService2X, self).GetMetaData(requestString)
    def get_ServiceProperties(self):
        '''Method IAISImageServiceX.get_ServiceProperties (from IAISImageServiceX)

           OUTPUT
            pVal                : BSTR*'''
        return super(IAISImageService2X, self).get_ServiceProperties()
    def put_ServiceProperties(self, pVal):
        '''Method IAISImageServiceX.put_ServiceProperties (from IAISImageServiceX)

           INPUT
            pVal                : BSTR'''
        return super(IAISImageService2X, self).put_ServiceProperties(pVal)
    def ApplyServiceProperties(self):
        '''Method IAISImageServiceX.ApplyServiceProperties (from IAISImageServiceX)

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService2X, self).ApplyServiceProperties()
    def ExtractAoi(self, x1, y1, x2, y2, nCols, nRows):
        '''Method IAISImageServiceX.ExtractAoi (from IAISImageServiceX)

           INPUTS
            x1                  : double
            y1                  : double
            x2                  : double
            y2                  : double
            nCols               : long
            nRows               : long

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService2X, self).ExtractAoi(x1, y1, x2, y2, nCols, nRows)
    def GetBufferSize(self):
        '''Method IAISImageServiceX.GetBufferSize (from IAISImageServiceX)

           OUTPUT
            bufferSize          : long*'''
        return super(IAISImageService2X, self).GetBufferSize()
    def GetImageInBuffer(self, bufferPtr):
        '''Method IAISImageServiceX.GetImageInBuffer (from IAISImageServiceX)

           INPUT
            bufferPtr           : long

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService2X, self).GetImageInBuffer(bufferPtr)
    def GetImageMetadata(self, levelOfDetail):
        '''Method IAISImageServiceX.GetImageMetadata (from IAISImageServiceX)

           INPUT
            levelOfDetail       : BSTR

           OUTPUT
            imageMetaData       : BSTR*'''
        return super(IAISImageService2X, self).GetImageMetadata(levelOfDetail)
    def get_Status(self):
        '''Method IAISImageServiceX.get_Status (from IAISImageServiceX)

           OUTPUT
            pVal                : BSTR*'''
        return super(IAISImageService2X, self).get_Status()
    def SetProperty(self, Name, Value):
        '''Method IAISImageServiceX.SetProperty (from IAISImageServiceX)

           INPUTS
            Name                : BSTR
            Value               : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService2X, self).SetProperty(Name, Value)
    def GetProperty(self, Name):
        '''Method IAISImageServiceX.GetProperty (from IAISImageServiceX)

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : BSTR*'''
        return super(IAISImageService2X, self).GetProperty(Name)
    def Close(self):
        '''Method IAISImageServiceX.Close (from IAISImageServiceX)'''
        return super(IAISImageService2X, self).Close()
    ServiceInfo = property(get_ServiceInfo, None, None)
    ServiceProperties = property(get_ServiceProperties, put_ServiceProperties, None)
    Status = property(get_Status, None, None)

class IAISImageService3X(_esriDataSourcesRaster.IAISImageService3X):
    _IID = uuid.UUID('afa68ca6-a23d-42f5-a69b-ae12e0899804')

    def __init__(self, *args, **kw):
        super(IAISImageService3X, self).__init__(*args)
        for k, a in kw.iteritems():
            setattr(self, k, a)

    def QueryImageData(self, pImageData):
        '''Method IAISImageService3X.QueryImageData

           INPUT
            pImageData          : SAFEARRAY**

           OUTPUT
            pRetStatus          : VARIANT_BOOL*'''
        return super(IAISImageService3X, self).QueryImageData(pImageData)
    def GetImageInfo(self):
        '''Method IAISImageService2X.GetImageInfo (from IAISImageService2X)

           OUTPUTS
            XMin                : double*
            YMin                : double*
            XMax                : double*
            YMax                : double*
            nCols               : long*
            nRows               : long*'''
        return super(IAISImageService3X, self).GetImageInfo()
    def Init(self, imageServiceSource, ServiceProperties, parentClientObject):
        '''Method IAISImageServiceX.Init (from IAISImageServiceX)

           INPUTS
            imageServiceSource  : BSTR
            ServiceProperties   : BSTR
            parentClientObject  : IAISClientObjectX*

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService3X, self).Init(imageServiceSource, ServiceProperties, parentClientObject)
    def get_ServiceInfo(self):
        '''Method IAISImageServiceX.get_ServiceInfo (from IAISImageServiceX)

           OUTPUT
            serviceInfoXml      : BSTR*'''
        return super(IAISImageService3X, self).get_ServiceInfo()
    def GetMetaData(self, requestString):
        '''Method IAISImageServiceX.GetMetaData (from IAISImageServiceX)

           INPUT
            requestString       : BSTR

           OUTPUT
            metadata            : BSTR*'''
        return super(IAISImageService3X, self).GetMetaData(requestString)
    def get_ServiceProperties(self):
        '''Method IAISImageServiceX.get_ServiceProperties (from IAISImageServiceX)

           OUTPUT
            pVal                : BSTR*'''
        return super(IAISImageService3X, self).get_ServiceProperties()
    def put_ServiceProperties(self, pVal):
        '''Method IAISImageServiceX.put_ServiceProperties (from IAISImageServiceX)

           INPUT
            pVal                : BSTR'''
        return super(IAISImageService3X, self).put_ServiceProperties(pVal)
    def ApplyServiceProperties(self):
        '''Method IAISImageServiceX.ApplyServiceProperties (from IAISImageServiceX)

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService3X, self).ApplyServiceProperties()
    def ExtractAoi(self, x1, y1, x2, y2, nCols, nRows):
        '''Method IAISImageServiceX.ExtractAoi (from IAISImageServiceX)

           INPUTS
            x1                  : double
            y1                  : double
            x2                  : double
            y2                  : double
            nCols               : long
            nRows               : long

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService3X, self).ExtractAoi(x1, y1, x2, y2, nCols, nRows)
    def GetBufferSize(self):
        '''Method IAISImageServiceX.GetBufferSize (from IAISImageServiceX)

           OUTPUT
            bufferSize          : long*'''
        return super(IAISImageService3X, self).GetBufferSize()
    def GetImageInBuffer(self, bufferPtr):
        '''Method IAISImageServiceX.GetImageInBuffer (from IAISImageServiceX)

           INPUT
            bufferPtr           : long

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService3X, self).GetImageInBuffer(bufferPtr)
    def GetImageMetadata(self, levelOfDetail):
        '''Method IAISImageServiceX.GetImageMetadata (from IAISImageServiceX)

           INPUT
            levelOfDetail       : BSTR

           OUTPUT
            imageMetaData       : BSTR*'''
        return super(IAISImageService3X, self).GetImageMetadata(levelOfDetail)
    def get_Status(self):
        '''Method IAISImageServiceX.get_Status (from IAISImageServiceX)

           OUTPUT
            pVal                : BSTR*'''
        return super(IAISImageService3X, self).get_Status()
    def SetProperty(self, Name, Value):
        '''Method IAISImageServiceX.SetProperty (from IAISImageServiceX)

           INPUTS
            Name                : BSTR
            Value               : BSTR

           OUTPUT
            retStatus           : VARIANT_BOOL*'''
        return super(IAISImageService3X, self).SetProperty(Name, Value)
    def GetProperty(self, Name):
        '''Method IAISImageServiceX.GetProperty (from IAISImageServiceX)

           INPUT
            Name                : BSTR

           OUTPUT
            Value               : BSTR*'''
        return super(IAISImageService3X, self).GetProperty(Name)
    def Close(self):
        '''Method IAISImageServiceX.Close (from IAISImageServiceX)'''
        return super(IAISImageService3X, self).Close()
    ServiceInfo = property(get_ServiceInfo, None, None)
    ServiceProperties = property(get_ServiceProperties, put_ServiceProperties, None)
    Status = property(get_Status, None, None)


# IIDs
IID_IERasterStatus = IERasterStatus._IID
IID_IRect = IRect._IID
IID_IBinFunction = IBinFunction._IID
IID_IBinFunction2 = IBinFunction2._IID
IID_IDescRow = IDescRow._IID
IID_IDescColumn = IDescColumn._IID
IID_IDescTable = IDescTable._IID
IID_IRasterClassNames = IRasterClassNames._IID
IID_IPixelBlock2 = IPixelBlock2._IID
IID_IPixelBlock3 = IPixelBlock3._IID
IID_IPixelBlock4 = IPixelBlock4._IID
IID_IRawPixels = IRawPixels._IID
IID_IRasterTransaction = IRasterTransaction._IID
IID_IXForm = IXForm._IID
IID_IGeodeticProjection = IGeodeticProjection._IID
IID_IRasterMapModel = IRasterMapModel._IID
IID_IFormatData = IFormatData._IID
IID_IFormatList = IFormatList._IID
IID_IFormatTest = IFormatTest._IID
IID_IContrastTable = IContrastTable._IID
IID_IRasterFormatControl = IRasterFormatControl._IID
IID_IRasterStatusEvent = IRasterStatusEvent._IID
IID_IRasterStatusEvent2 = IRasterStatusEvent2._IID
IID_IRasterStatus = IRasterStatus._IID
IID_IRasterStatus2 = IRasterStatus2._IID
IID_IRasterStatus3 = IRasterStatus3._IID
IID_IRasterDataManagementEvents = IRasterDataManagementEvents._IID
IID_IImageFeaturePoint = IImageFeaturePoint._IID
IID_IImageFeaturePoints = IImageFeaturePoints._IID
IID_IImageMatchPoint = IImageMatchPoint._IID
IID_IImageMatchPoints = IImageMatchPoints._IID
IID_ITiePoint = ITiePoint._IID
IID_ITiePointCollection = ITiePointCollection._IID
IID_ITiePointOperation = ITiePointOperation._IID
IID_IImageRegistration = IImageRegistration._IID
IID_IRasterHistogram = IRasterHistogram._IID
IID_IPixelResampler = IPixelResampler._IID
IID_IRasterXformer = IRasterXformer._IID
IID_IRasterInfo = IRasterInfo._IID
IID_IRasterBandColormap = IRasterBandColormap._IID
IID_IRasterCollection = IRasterCollection._IID
IID_IRasterProps = IRasterProps._IID
IID_IRasterDefaultProps = IRasterDefaultProps._IID
IID_IRasterAnalysisProps = IRasterAnalysisProps._IID
IID_IRasterWorkspace3 = IRasterWorkspace3._IID
IID_IRasterCatalogTable = IRasterCatalogTable._IID
IID_IWorldFileExport = IWorldFileExport._IID
IID_IWorldFileExport2 = IWorldFileExport2._IID
IID_IRasterEdit = IRasterEdit._IID
IID_IRasterPyramid = IRasterPyramid._IID
IID_IRasterPyramid2 = IRasterPyramid2._IID
IID_IRasterPyramid3 = IRasterPyramid3._IID
IID_ITemporaryDataset = ITemporaryDataset._IID
IID_IRasterHistograms = IRasterHistograms._IID
IID_IStatsHistogram = IStatsHistogram._IID
IID_IStatsHistogram2 = IStatsHistogram2._IID
IID_IRasterTable = IRasterTable._IID
IID_IUniqueValues = IUniqueValues._IID
IID_IUniqueValues2 = IUniqueValues2._IID
IID_IUniqueStringValues = IUniqueStringValues._IID
IID_IUniqueMutliStringValues = IUniqueMutliStringValues._IID
IID_IUniqueDoubleValues = IUniqueDoubleValues._IID
IID_IRasterCalcUniqueValues = IRasterCalcUniqueValues._IID
IID_IRasterCalcUniqueValues2 = IRasterCalcUniqueValues2._IID
IID_IRasterColormapToRGBConversion = IRasterColormapToRGBConversion._IID
IID_IPixelBlockCursor = IPixelBlockCursor._IID
IID_IRasterAttributeTableManager = IRasterAttributeTableManager._IID
IID_IRaster2 = IRaster2._IID
IID_IRasterColormap2 = IRasterColormap2._IID
IID_IRasterColormap3 = IRasterColormap3._IID
IID_IRasterColormap4 = IRasterColormap4._IID
IID_IRasterDatasetJukebox = IRasterDatasetJukebox._IID
IID_IRasterResamplingControl = IRasterResamplingControl._IID
IID_IMosaicOperator = IMosaicOperator._IID
IID_IMosaicOperator2 = IMosaicOperator2._IID
IID_IMosaicOperator3 = IMosaicOperator3._IID
IID_IMosaicRaster = IMosaicRaster._IID
IID_IMosaicRaster2 = IMosaicRaster2._IID
IID_IRawBlocks = IRawBlocks._IID
IID_ICancelListener = ICancelListener._IID
IID_IRasterKeyProperties = IRasterKeyProperties._IID
IID_IRasterDatasetContainer = IRasterDatasetContainer._IID
IID_IGeoTransformationHelper = IGeoTransformationHelper._IID
IID_IRasterCommand = IRasterCommand._IID
IID_IRasterCommands = IRasterCommands._IID
IID_IRasterCommandResult = IRasterCommandResult._IID
IID_IRasterCommandResults = IRasterCommandResults._IID
IID_IPixelFilter = IPixelFilter._IID
IID_IPixelOperation = IPixelOperation._IID
IID_IRasterGeometryProc = IRasterGeometryProc._IID
IID_IRasterGeometryProc2 = IRasterGeometryProc2._IID
IID_IRasterGeometryProc3 = IRasterGeometryProc3._IID
IID_IBasicRasterSdeConnection = IBasicRasterSdeConnection._IID
IID_IRasterSdeCatalog = IRasterSdeCatalog._IID
IID_IRasterSdeServerOperation = IRasterSdeServerOperation._IID
IID_IRasterSdeServerOperation2 = IRasterSdeServerOperation2._IID
IID_IRasterSdeStorage = IRasterSdeStorage._IID
IID_IRasterSdeStorage2 = IRasterSdeStorage2._IID
IID_IRasterDomainExtractor = IRasterDomainExtractor._IID
IID_IDEWCSCoverage = IDEWCSCoverage._IID
IID_IDEWMSMap = IDEWMSMap._IID
IID_IDEImageServer = IDEImageServer._IID
IID_IDEMosaicDataset = IDEMosaicDataset._IID
IID_IDEMosaicDataset2 = IDEMosaicDataset2._IID
IID_IItemPaths = IItemPaths._IID
IID_IPixelFilter2 = IPixelFilter2._IID
IID_IPixelFilter3 = IPixelFilter3._IID
IID_IBackgroundFilter = IBackgroundFilter._IID
IID_IColormapFilter = IColormapFilter._IID
IID_ILutFilter = ILutFilter._IID
IID_IPixelFilterCollection = IPixelFilterCollection._IID
IID_IRasterConvolutionFilter = IRasterConvolutionFilter._IID
IID_IStockConvolutionFilter = IStockConvolutionFilter._IID
IID_IMultibandFilter = IMultibandFilter._IID
IID_IPansharpeningFilter = IPansharpeningFilter._IID
IID_IPansharpeningFilter2 = IPansharpeningFilter2._IID
IID_IRemapFilter = IRemapFilter._IID
IID_IClipFilter = IClipFilter._IID
IID_IClipFilter2 = IClipFilter2._IID
IID_INoDataFilter = INoDataFilter._IID
IID_IFocalMeanFilter = IFocalMeanFilter._IID
IID_IFocalStatisticsFilter = IFocalStatisticsFilter._IID
IID_IFocalStatisticsFilter2 = IFocalStatisticsFilter2._IID
IID_ISpeckleFilter = ISpeckleFilter._IID
IID_IHistogramSpecification = IHistogramSpecification._IID
IID_IStockFrequencyDistributionHistogram = IStockFrequencyDistributionHistogram._IID
IID_IRasterLoader = IRasterLoader._IID
IID_IRasterCatalogLoader = IRasterCatalogLoader._IID
IID_IDrLoader = IDrLoader._IID
IID_ISimplePixelResampler = ISimplePixelResampler._IID
IID_IRawPixelReader = IRawPixelReader._IID
IID_IPixelReader = IPixelReader._IID
IID_IPixelReader2 = IPixelReader2._IID
IID_ISimplePixelReader = ISimplePixelReader._IID
IID_IRasterXformer2 = IRasterXformer2._IID
IID_IRasterXform = IRasterXform._IID
IID_IRasterXform2 = IRasterXform2._IID
IID_ISensorXform = ISensorXform._IID
IID_IGeodataXform2 = IGeodataXform2._IID
IID_ICoordinateXform = ICoordinateXform._IID
IID_ICoordinateXform2 = ICoordinateXform2._IID
IID_IGeometricXform = IGeometricXform._IID
IID_ICompositeXform = ICompositeXform._IID
IID_IGCSShiftXform = IGCSShiftXform._IID
IID_IPolynomialXform = IPolynomialXform._IID
IID_ISplineXform = ISplineXform._IID
IID_IAdjustXform = IAdjustXform._IID
IID_IRPCXform = IRPCXform._IID
IID_IApproximationXform = IApproximationXform._IID
IID_IGeodataXformApproximation = IGeodataXformApproximation._IID
IID_IRGB32PixelResampler = IRGB32PixelResampler._IID
IID_ICustomXform = ICustomXform._IID
IID_IFrameXform = IFrameXform._IID
IID_ILSRXform = ILSRXform._IID
IID_IRasterXformHelper = IRasterXformHelper._IID
IID_ISPOT5Xform = ISPOT5Xform._IID
IID_IFormosat2Xform = IFormosat2Xform._IID
IID_ICSMXform = ICSMXform._IID
IID_IProjectiveXform = IProjectiveXform._IID
IID_IPushbroomUtilities = IPushbroomUtilities._IID
IID_IRasterInfos = IRasterInfos._IID
IID_IRasterFunction = IRasterFunction._IID
IID_IRasterFunction2 = IRasterFunction2._IID
IID_IRasterFunction3 = IRasterFunction3._IID
IID_IRasterFunctionArguments = IRasterFunctionArguments._IID
IID_IRasterFunctionHelper = IRasterFunctionHelper._IID
IID_IRasterFunctionHelper2 = IRasterFunctionHelper2._IID
IID_IFunctionRasterDatasetName = IFunctionRasterDatasetName._IID
IID_IFunctionRasterDataset = IFunctionRasterDataset._IID
IID_IFunctionRasterDataset2 = IFunctionRasterDataset2._IID
IID_IGeometricFunction = IGeometricFunction._IID
IID_IGeometricFunctionArguments = IGeometricFunctionArguments._IID
IID_IPansharpeningFunctionArguments = IPansharpeningFunctionArguments._IID
IID_IPansharpeningFunctionArguments2 = IPansharpeningFunctionArguments2._IID
IID_IPanSharpenGramSchmidtFunctionArguments = IPanSharpenGramSchmidtFunctionArguments._IID
IID_IArithmeticFunctionArguments = IArithmeticFunctionArguments._IID
IID_IArithmeticFunctionArguments2 = IArithmeticFunctionArguments2._IID
IID_IColormapFunctionArguments = IColormapFunctionArguments._IID
IID_IMosaicLODInfos = IMosaicLODInfos._IID
IID_IMosaicFunction = IMosaicFunction._IID
IID_IMosaicFunction2 = IMosaicFunction2._IID
IID_IMosaicFunction3 = IMosaicFunction3._IID
IID_IMosaicFunctionArguments = IMosaicFunctionArguments._IID
IID_IMosaicFunctionArguments2 = IMosaicFunctionArguments2._IID
IID_IExtractBandFunctionArguments = IExtractBandFunctionArguments._IID
IID_IExtractBandFunctionArguments2 = IExtractBandFunctionArguments2._IID
IID_IStretchFunctionArguments = IStretchFunctionArguments._IID
IID_IStretchFunctionArguments2 = IStretchFunctionArguments2._IID
IID_IStatisticsFunctionArguments = IStatisticsFunctionArguments._IID
IID_IStatisticsFunctionArguments2 = IStatisticsFunctionArguments2._IID
IID_IConvolutionFunctionArguments = IConvolutionFunctionArguments._IID
IID_ISpeckleFunctionArguments = ISpeckleFunctionArguments._IID
IID_IRadarCalibrationFunctionArguments = IRadarCalibrationFunctionArguments._IID
IID_IRasterFunctionTemplate = IRasterFunctionTemplate._IID
IID_IRasterFunctionTemplate2 = IRasterFunctionTemplate2._IID
IID_IRasterFunctionVariable = IRasterFunctionVariable._IID
IID_IClipFunctionArguments = IClipFunctionArguments._IID
IID_IColorspaceConversionFunctionArguments = IColorspaceConversionFunctionArguments._IID
IID_IHillshadeFunctionArguments = IHillshadeFunctionArguments._IID
IID_ISlopeScalingArguments = ISlopeScalingArguments._IID
IID_IReprojectFunctionArguments = IReprojectFunctionArguments._IID
IID_IConstantFunctionArguments = IConstantFunctionArguments._IID
IID_IConstantFunctionArguments2 = IConstantFunctionArguments2._IID
IID_ISpectralConversionFunctionArguments = ISpectralConversionFunctionArguments._IID
IID_ISpectralConversionFunctionArguments2 = ISpectralConversionFunctionArguments2._IID
IID_ISlopeFunctionArguments = ISlopeFunctionArguments._IID
IID_ITrendFunctionArguments = ITrendFunctionArguments._IID
IID_IGrayscaleFunctionArguments = IGrayscaleFunctionArguments._IID
IID_IShadedReliefFunctionArguments = IShadedReliefFunctionArguments._IID
IID_IRasterInfoFunctionArguments = IRasterInfoFunctionArguments._IID
IID_IMaskFunctionArguments = IMaskFunctionArguments._IID
IID_IMaskFunctionArguments2 = IMaskFunctionArguments2._IID
IID_ISAIFunctionArguments = ISAIFunctionArguments._IID
IID_IScalar = IScalar._IID
IID_IMosaicRastersFunctionArguments = IMosaicRastersFunctionArguments._IID
IID_IMergeRastersFunctionArguments = IMergeRastersFunctionArguments._IID
IID_IFootprintFunctionArguments = IFootprintFunctionArguments._IID
IID_INDVIFunctionArguments = INDVIFunctionArguments._IID
IID_INDVIFunctionArguments2 = INDVIFunctionArguments2._IID
IID_IExcludedAreaFunctionArguments = IExcludedAreaFunctionArguments._IID
IID_IRemapFunctionArguments = IRemapFunctionArguments._IID
IID_ITableFunctionArguments = ITableFunctionArguments._IID
IID_IBandArithmeticFunctionArguments = IBandArithmeticFunctionArguments._IID
IID_IRasterItemFunctionArguments = IRasterItemFunctionArguments._IID
IID_ICachedRasterFunction = ICachedRasterFunction._IID
IID_ICachedRasterFunctionArguments = ICachedRasterFunctionArguments._IID
IID_IRasterCacheArguments = IRasterCacheArguments._IID
IID_IContrastBrightnessFunctionArguments = IContrastBrightnessFunctionArguments._IID
IID_IRenderedRasterFunctionArguments = IRenderedRasterFunctionArguments._IID
IID_IReflectanceFunctionArguments = IReflectanceFunctionArguments._IID
IID_IDownsampleFunctionArguments = IDownsampleFunctionArguments._IID
IID_IReflectanceFunctionArguments2 = IReflectanceFunctionArguments2._IID
IID_ILasToRasterFunctionArguments = ILasToRasterFunctionArguments._IID
IID_ITerrainToRasterFunctionArguments = ITerrainToRasterFunctionArguments._IID
IID_ILasDatasetToRasterFunctionArguments = ILasDatasetToRasterFunctionArguments._IID
IID_IMosaicDataset = IMosaicDataset._IID
IID_IItemTemplate = IItemTemplate._IID
IID_IItemURI = IItemURI._IID
IID_IItemURIArray = IItemURIArray._IID
IID_ICellSizeLevel = ICellSizeLevel._IID
IID_ICellSizeLevels = ICellSizeLevels._IID
IID_IDataSourceCrawler = IDataSourceCrawler._IID
IID_IBuilderItem = IBuilderItem._IID
IID_IRasterBuilder = IRasterBuilder._IID
IID_IItemURIFilter = IItemURIFilter._IID
IID_IItemTemplateArray = IItemTemplateArray._IID
IID_IRasterType = IRasterType._IID
IID_IAddRastersParameters = IAddRastersParameters._IID
IID_IRasterThumbnailBuilder = IRasterThumbnailBuilder._IID
IID_ISynchronizeParameters = ISynchronizeParameters._IID
IID_IRasterTypeOperation = IRasterTypeOperation._IID
IID_IRasterTypeName = IRasterTypeName._IID
IID_IDeleteMosaicDatasetParameters = IDeleteMosaicDatasetParameters._IID
IID_IDataSourceCrawler2 = IDataSourceCrawler2._IID
IID_IFileCrawler = IFileCrawler._IID
IID_IFolderSort = IFolderSort._IID
IID_IFileCrawler2 = IFileCrawler2._IID
IID_ICsvCrawler = ICsvCrawler._IID
IID_IRasterDatasetCrawler = IRasterDatasetCrawler._IID
IID_ITableCrawler = ITableCrawler._IID
IID_ITableCrawler2 = ITableCrawler2._IID
IID_ITableCrawler3 = ITableCrawler3._IID
IID_IArrayCrawler = IArrayCrawler._IID
IID_IGenericObjectCrawler = IGenericObjectCrawler._IID
IID_IItemURI2 = IItemURI2._IID
IID_IOverviewItemURI = IOverviewItemURI._IID
IID_IItemPathsOptions = IItemPathsOptions._IID
IID_IItemPaths2 = IItemPaths2._IID
IID_IBuilderItem2 = IBuilderItem2._IID
IID_IBuilderItem3 = IBuilderItem3._IID
IID_IRasterBuilderInit = IRasterBuilderInit._IID
IID_IRasterBuilderInit2 = IRasterBuilderInit2._IID
IID_IItemTemplate2 = IItemTemplate2._IID
IID_ICompositeURIFilter = ICompositeURIFilter._IID
IID_IRasterBuilder2 = IRasterBuilder2._IID
IID_IRasterTypeProperties = IRasterTypeProperties._IID
IID_IRasterTypeProperties2 = IRasterTypeProperties2._IID
IID_IMosaicDataset2 = IMosaicDataset2._IID
IID_IMosaicDatasetOperationParameters = IMosaicDatasetOperationParameters._IID
IID_IMosaicDatasetOperationParameters2 = IMosaicDatasetOperationParameters2._IID
IID_IThreadedOperationParameters = IThreadedOperationParameters._IID
IID_IThreadedOperationParameters2 = IThreadedOperationParameters2._IID
IID_ISelectionParameters = ISelectionParameters._IID
IID_ICreateMosaicDatasetParameters = ICreateMosaicDatasetParameters._IID
IID_ICreateMosaicDatasetParameters2 = ICreateMosaicDatasetParameters2._IID
IID_ISynchronizeParameters2 = ISynchronizeParameters2._IID
IID_IBuildPyramidsParameters = IBuildPyramidsParameters._IID
IID_ICalculateStatisticsParameters = ICalculateStatisticsParameters._IID
IID_ICalculateCellSizeRangesParameters = ICalculateCellSizeRangesParameters._IID
IID_IBuildBoundaryParameters = IBuildBoundaryParameters._IID
IID_IBuildBoundaryParameters2 = IBuildBoundaryParameters2._IID
IID_IRemoveSliversParameters = IRemoveSliversParameters._IID
IID_IOverviewTileParameters = IOverviewTileParameters._IID
IID_IOverviewTileParameters2 = IOverviewTileParameters2._IID
IID_IOverviewImageParameters = IOverviewImageParameters._IID
IID_IDefineOverviewsParameters = IDefineOverviewsParameters._IID
IID_IGenerateOverviewsParameters = IGenerateOverviewsParameters._IID
IID_IGenerateOverviewsParameters2 = IGenerateOverviewsParameters2._IID
IID_IRemoveItemsParameters = IRemoveItemsParameters._IID
IID_IRemoveItemsParameters2 = IRemoveItemsParameters2._IID
IID_IDefineNoDataParameters = IDefineNoDataParameters._IID
IID_IDefineNoDataParameters2 = IDefineNoDataParameters2._IID
IID_IComputeDirtyAreaParameters = IComputeDirtyAreaParameters._IID
IID_IBuildFootprintsParameters = IBuildFootprintsParameters._IID
IID_IBuildFootprintsParameters2 = IBuildFootprintsParameters2._IID
IID_IBuildFootprintsByRadiometryParameters = IBuildFootprintsByRadiometryParameters._IID
IID_IBuildFootprintsByGeometryParameters = IBuildFootprintsByGeometryParameters._IID
IID_IBuildFootprintsByShrinkingParameters = IBuildFootprintsByShrinkingParameters._IID
IID_IFrameCameraParameters = IFrameCameraParameters._IID
IID_IApplanixBuilder = IApplanixBuilder._IID
IID_IISATBuilder = IISATBuilder._IID
IID_ILasBuilder = ILasBuilder._IID
IID_ITerrainBuilder = ITerrainBuilder._IID
IID_ILasDatasetBuilder = ILasDatasetBuilder._IID
IID_IRadarBuilder = IRadarBuilder._IID
IID_IMatchATBuilder = IMatchATBuilder._IID
IID_ISeamlineTaskInfo = ISeamlineTaskInfo._IID
IID_ISeamlineTaskInfo2 = ISeamlineTaskInfo2._IID
IID_ISeamlineModifier = ISeamlineModifier._IID
IID_ISeamlineModifierInit = ISeamlineModifierInit._IID
IID_IBuildSeamlinesParameters = IBuildSeamlinesParameters._IID
IID_IBuildSeamlinesParameters2 = IBuildSeamlinesParameters2._IID
IID_IQueryPathsParameters = IQueryPathsParameters._IID
IID_IQueryPathsParameters2 = IQueryPathsParameters2._IID
IID_IReplacePathsParameters = IReplacePathsParameters._IID
IID_IReplacePathsParameters2 = IReplacePathsParameters2._IID
IID_IImportGeometryParameters = IImportGeometryParameters._IID
IID_IAnalyzeParameters = IAnalyzeParameters._IID
IID_IAddNewerRastersParameters = IAddNewerRastersParameters._IID
IID_IBuildSeamlinesParameters3 = IBuildSeamlinesParameters3._IID
IID_IMergeItemsParameters2 = IMergeItemsParameters2._IID
IID_ICellSizeLevel2 = ICellSizeLevel2._IID
IID_IMosaicDatasetOperation = IMosaicDatasetOperation._IID
IID_IMosaicDatasetOperation2 = IMosaicDatasetOperation2._IID
IID_IRasterTypeHistory = IRasterTypeHistory._IID
IID_IRasterTypeHistory2 = IRasterTypeHistory2._IID
IID_IOverviewBuilder = IOverviewBuilder._IID
IID_IRasterTypeFactory = IRasterTypeFactory._IID
IID_IRasterTypeFactory2 = IRasterTypeFactory2._IID
IID_IRasterTypeEnvironment = IRasterTypeEnvironment._IID
IID_IRasterTypeEnvironment2 = IRasterTypeEnvironment2._IID
IID_IRasterTypeDataSourceHandlerParameters = IRasterTypeDataSourceHandlerParameters._IID
IID_IRasterTypeDataSourceHandlerParameters2 = IRasterTypeDataSourceHandlerParameters2._IID
IID_IRasterTypeDataSourceHandler = IRasterTypeDataSourceHandler._IID
IID_IRasterTypeDataSourceHandler2 = IRasterTypeDataSourceHandler2._IID
IID_IRasterTypeItemURI = IRasterTypeItemURI._IID
IID_IRasterTypeItemURI2 = IRasterTypeItemURI2._IID
IID_ICompositeItemURI = ICompositeItemURI._IID
IID_IIndexedItemURI = IIndexedItemURI._IID
IID_IFileItemURI = IFileItemURI._IID
IID_IRPFItemURI = IRPFItemURI._IID
IID_IURIProductNameFilter = IURIProductNameFilter._IID
IID_IURIPropertiesFilter = IURIPropertiesFilter._IID
IID_ITableBuilder = ITableBuilder._IID
IID_IMosaicWorkspaceExtension = IMosaicWorkspaceExtension._IID
IID_IMosaicWorkspaceExtensionHelper = IMosaicWorkspaceExtensionHelper._IID
IID_IRasterServiceHelper = IRasterServiceHelper._IID
IID_IRasterServiceHelper2 = IRasterServiceHelper2._IID
IID_IItemURICompare = IItemURICompare._IID
IID_IItemPathsQuery = IItemPathsQuery._IID
IID_IItemPathsQuery2 = IItemPathsQuery2._IID
IID_IMultiPartItemURI = IMultiPartItemURI._IID
IID_IAISImageServerManager = IAISImageServerManager._IID
IID_IAngularMeasurement = IAngularMeasurement._IID
IID_IDistanceMeasurement = IDistanceMeasurement._IID
IID_IHeightMeasurement = IHeightMeasurement._IID
IID_IMapPoint = IMapPoint._IID
IID_IPointMeasurement = IPointMeasurement._IID
IID_IPolygonMeasurement = IPolygonMeasurement._IID
IID_IMensuration = IMensuration._IID
IID_IMensuration3D = IMensuration3D._IID
IID_IRasterBand = IRasterBand._IID
IID_IRasterStatistics = IRasterStatistics._IID
IID_IEnumRasterBand = IEnumRasterBand._IID
IID_IRasterBandEdit = IRasterBandEdit._IID
IID_IRasterBandEdit2 = IRasterBandEdit2._IID
IID_IRasterBandCollection = IRasterBandCollection._IID
IID_IRasterWorkspace = IRasterWorkspace._IID
IID_IRasterStatistics2 = IRasterStatistics2._IID
IID_IStatsHistogram3 = IStatsHistogram3._IID
IID_IRasterCalcStatsHistogram = IRasterCalcStatsHistogram._IID
IID_IRasterCalcStatsHistogram2 = IRasterCalcStatsHistogram2._IID
IID_IRasterCalcStatsHistogram3 = IRasterCalcStatsHistogram3._IID
IID_IDERasterUtilities = IDERasterUtilities._IID
IID_IRasterInfo2 = IRasterInfo2._IID
IID_IAISImageServiceX = IAISImageServiceX._IID
IID_IAISClientObjectX = IAISClientObjectX._IID
IID_IAISImageService2X = IAISImageService2X._IID
IID_IAISImageService3X = IAISImageService3X._IID
_IIDMap[IID_IERasterStatus] = IERasterStatus
_IIDMap[IID_IRect] = IRect
_IIDMap[IID_IBinFunction] = IBinFunction
_IIDMap[IID_IBinFunction2] = IBinFunction2
_IIDMap[IID_IDescRow] = IDescRow
_IIDMap[IID_IDescColumn] = IDescColumn
_IIDMap[IID_IDescTable] = IDescTable
_IIDMap[IID_IRasterClassNames] = IRasterClassNames
_IIDMap[IID_IPixelBlock2] = IPixelBlock2
_IIDMap[IID_IPixelBlock3] = IPixelBlock3
_IIDMap[IID_IPixelBlock4] = IPixelBlock4
_IIDMap[IID_IRawPixels] = IRawPixels
_IIDMap[IID_IRasterTransaction] = IRasterTransaction
_IIDMap[IID_IXForm] = IXForm
_IIDMap[IID_IGeodeticProjection] = IGeodeticProjection
_IIDMap[IID_IRasterMapModel] = IRasterMapModel
_IIDMap[IID_IFormatData] = IFormatData
_IIDMap[IID_IFormatList] = IFormatList
_IIDMap[IID_IFormatTest] = IFormatTest
_IIDMap[IID_IContrastTable] = IContrastTable
_IIDMap[IID_IRasterFormatControl] = IRasterFormatControl
_IIDMap[IID_IRasterStatusEvent] = IRasterStatusEvent
_IIDMap[IID_IRasterStatusEvent2] = IRasterStatusEvent2
_IIDMap[IID_IRasterStatus] = IRasterStatus
_IIDMap[IID_IRasterStatus2] = IRasterStatus2
_IIDMap[IID_IRasterStatus3] = IRasterStatus3
_IIDMap[IID_IRasterDataManagementEvents] = IRasterDataManagementEvents
_IIDMap[IID_IImageFeaturePoint] = IImageFeaturePoint
_IIDMap[IID_IImageFeaturePoints] = IImageFeaturePoints
_IIDMap[IID_IImageMatchPoint] = IImageMatchPoint
_IIDMap[IID_IImageMatchPoints] = IImageMatchPoints
_IIDMap[IID_ITiePoint] = ITiePoint
_IIDMap[IID_ITiePointCollection] = ITiePointCollection
_IIDMap[IID_ITiePointOperation] = ITiePointOperation
_IIDMap[IID_IImageRegistration] = IImageRegistration
_IIDMap[IID_IRasterHistogram] = IRasterHistogram
_IIDMap[IID_IPixelResampler] = IPixelResampler
_IIDMap[IID_IRasterXformer] = IRasterXformer
_IIDMap[IID_IRasterInfo] = IRasterInfo
_IIDMap[IID_IRasterBandColormap] = IRasterBandColormap
_IIDMap[IID_IRasterCollection] = IRasterCollection
_IIDMap[IID_IRasterProps] = IRasterProps
_IIDMap[IID_IRasterDefaultProps] = IRasterDefaultProps
_IIDMap[IID_IRasterAnalysisProps] = IRasterAnalysisProps
_IIDMap[IID_IRasterWorkspace3] = IRasterWorkspace3
_IIDMap[IID_IRasterCatalogTable] = IRasterCatalogTable
_IIDMap[IID_IWorldFileExport] = IWorldFileExport
_IIDMap[IID_IWorldFileExport2] = IWorldFileExport2
_IIDMap[IID_IRasterEdit] = IRasterEdit
_IIDMap[IID_IRasterPyramid] = IRasterPyramid
_IIDMap[IID_IRasterPyramid2] = IRasterPyramid2
_IIDMap[IID_IRasterPyramid3] = IRasterPyramid3
_IIDMap[IID_ITemporaryDataset] = ITemporaryDataset
_IIDMap[IID_IRasterHistograms] = IRasterHistograms
_IIDMap[IID_IStatsHistogram] = IStatsHistogram
_IIDMap[IID_IStatsHistogram2] = IStatsHistogram2
_IIDMap[IID_IRasterTable] = IRasterTable
_IIDMap[IID_IUniqueValues] = IUniqueValues
_IIDMap[IID_IUniqueValues2] = IUniqueValues2
_IIDMap[IID_IUniqueStringValues] = IUniqueStringValues
_IIDMap[IID_IUniqueMutliStringValues] = IUniqueMutliStringValues
_IIDMap[IID_IUniqueDoubleValues] = IUniqueDoubleValues
_IIDMap[IID_IRasterCalcUniqueValues] = IRasterCalcUniqueValues
_IIDMap[IID_IRasterCalcUniqueValues2] = IRasterCalcUniqueValues2
_IIDMap[IID_IRasterColormapToRGBConversion] = IRasterColormapToRGBConversion
_IIDMap[IID_IPixelBlockCursor] = IPixelBlockCursor
_IIDMap[IID_IRasterAttributeTableManager] = IRasterAttributeTableManager
_IIDMap[IID_IRaster2] = IRaster2
_IIDMap[IID_IRasterColormap2] = IRasterColormap2
_IIDMap[IID_IRasterColormap3] = IRasterColormap3
_IIDMap[IID_IRasterColormap4] = IRasterColormap4
_IIDMap[IID_IRasterDatasetJukebox] = IRasterDatasetJukebox
_IIDMap[IID_IRasterResamplingControl] = IRasterResamplingControl
_IIDMap[IID_IMosaicOperator] = IMosaicOperator
_IIDMap[IID_IMosaicOperator2] = IMosaicOperator2
_IIDMap[IID_IMosaicOperator3] = IMosaicOperator3
_IIDMap[IID_IMosaicRaster] = IMosaicRaster
_IIDMap[IID_IMosaicRaster2] = IMosaicRaster2
_IIDMap[IID_IRawBlocks] = IRawBlocks
_IIDMap[IID_ICancelListener] = ICancelListener
_IIDMap[IID_IRasterKeyProperties] = IRasterKeyProperties
_IIDMap[IID_IRasterDatasetContainer] = IRasterDatasetContainer
_IIDMap[IID_IGeoTransformationHelper] = IGeoTransformationHelper
_IIDMap[IID_IRasterCommand] = IRasterCommand
_IIDMap[IID_IRasterCommands] = IRasterCommands
_IIDMap[IID_IRasterCommandResult] = IRasterCommandResult
_IIDMap[IID_IRasterCommandResults] = IRasterCommandResults
_IIDMap[IID_IPixelFilter] = IPixelFilter
_IIDMap[IID_IPixelOperation] = IPixelOperation
_IIDMap[IID_IRasterGeometryProc] = IRasterGeometryProc
_IIDMap[IID_IRasterGeometryProc2] = IRasterGeometryProc2
_IIDMap[IID_IRasterGeometryProc3] = IRasterGeometryProc3
_IIDMap[IID_IBasicRasterSdeConnection] = IBasicRasterSdeConnection
_IIDMap[IID_IRasterSdeCatalog] = IRasterSdeCatalog
_IIDMap[IID_IRasterSdeServerOperation] = IRasterSdeServerOperation
_IIDMap[IID_IRasterSdeServerOperation2] = IRasterSdeServerOperation2
_IIDMap[IID_IRasterSdeStorage] = IRasterSdeStorage
_IIDMap[IID_IRasterSdeStorage2] = IRasterSdeStorage2
_IIDMap[IID_IRasterDomainExtractor] = IRasterDomainExtractor
_IIDMap[IID_IDEWCSCoverage] = IDEWCSCoverage
_IIDMap[IID_IDEWMSMap] = IDEWMSMap
_IIDMap[IID_IDEImageServer] = IDEImageServer
_IIDMap[IID_IDEMosaicDataset] = IDEMosaicDataset
_IIDMap[IID_IDEMosaicDataset2] = IDEMosaicDataset2
_IIDMap[IID_IItemPaths] = IItemPaths
_IIDMap[IID_IPixelFilter2] = IPixelFilter2
_IIDMap[IID_IPixelFilter3] = IPixelFilter3
_IIDMap[IID_IBackgroundFilter] = IBackgroundFilter
_IIDMap[IID_IColormapFilter] = IColormapFilter
_IIDMap[IID_ILutFilter] = ILutFilter
_IIDMap[IID_IPixelFilterCollection] = IPixelFilterCollection
_IIDMap[IID_IRasterConvolutionFilter] = IRasterConvolutionFilter
_IIDMap[IID_IStockConvolutionFilter] = IStockConvolutionFilter
_IIDMap[IID_IMultibandFilter] = IMultibandFilter
_IIDMap[IID_IPansharpeningFilter] = IPansharpeningFilter
_IIDMap[IID_IPansharpeningFilter2] = IPansharpeningFilter2
_IIDMap[IID_IRemapFilter] = IRemapFilter
_IIDMap[IID_IClipFilter] = IClipFilter
_IIDMap[IID_IClipFilter2] = IClipFilter2
_IIDMap[IID_INoDataFilter] = INoDataFilter
_IIDMap[IID_IFocalMeanFilter] = IFocalMeanFilter
_IIDMap[IID_IFocalStatisticsFilter] = IFocalStatisticsFilter
_IIDMap[IID_IFocalStatisticsFilter2] = IFocalStatisticsFilter2
_IIDMap[IID_ISpeckleFilter] = ISpeckleFilter
_IIDMap[IID_IHistogramSpecification] = IHistogramSpecification
_IIDMap[IID_IStockFrequencyDistributionHistogram] = IStockFrequencyDistributionHistogram
_IIDMap[IID_IRasterLoader] = IRasterLoader
_IIDMap[IID_IRasterCatalogLoader] = IRasterCatalogLoader
_IIDMap[IID_IDrLoader] = IDrLoader
_IIDMap[IID_ISimplePixelResampler] = ISimplePixelResampler
_IIDMap[IID_IRawPixelReader] = IRawPixelReader
_IIDMap[IID_IPixelReader] = IPixelReader
_IIDMap[IID_IPixelReader2] = IPixelReader2
_IIDMap[IID_ISimplePixelReader] = ISimplePixelReader
_IIDMap[IID_IRasterXformer2] = IRasterXformer2
_IIDMap[IID_IRasterXform] = IRasterXform
_IIDMap[IID_IRasterXform2] = IRasterXform2
_IIDMap[IID_ISensorXform] = ISensorXform
_IIDMap[IID_IGeodataXform2] = IGeodataXform2
_IIDMap[IID_ICoordinateXform] = ICoordinateXform
_IIDMap[IID_ICoordinateXform2] = ICoordinateXform2
_IIDMap[IID_IGeometricXform] = IGeometricXform
_IIDMap[IID_ICompositeXform] = ICompositeXform
_IIDMap[IID_IGCSShiftXform] = IGCSShiftXform
_IIDMap[IID_IPolynomialXform] = IPolynomialXform
_IIDMap[IID_ISplineXform] = ISplineXform
_IIDMap[IID_IAdjustXform] = IAdjustXform
_IIDMap[IID_IRPCXform] = IRPCXform
_IIDMap[IID_IApproximationXform] = IApproximationXform
_IIDMap[IID_IGeodataXformApproximation] = IGeodataXformApproximation
_IIDMap[IID_IRGB32PixelResampler] = IRGB32PixelResampler
_IIDMap[IID_ICustomXform] = ICustomXform
_IIDMap[IID_IFrameXform] = IFrameXform
_IIDMap[IID_ILSRXform] = ILSRXform
_IIDMap[IID_IRasterXformHelper] = IRasterXformHelper
_IIDMap[IID_ISPOT5Xform] = ISPOT5Xform
_IIDMap[IID_IFormosat2Xform] = IFormosat2Xform
_IIDMap[IID_ICSMXform] = ICSMXform
_IIDMap[IID_IProjectiveXform] = IProjectiveXform
_IIDMap[IID_IPushbroomUtilities] = IPushbroomUtilities
_IIDMap[IID_IRasterInfos] = IRasterInfos
_IIDMap[IID_IRasterFunction] = IRasterFunction
_IIDMap[IID_IRasterFunction2] = IRasterFunction2
_IIDMap[IID_IRasterFunction3] = IRasterFunction3
_IIDMap[IID_IRasterFunctionArguments] = IRasterFunctionArguments
_IIDMap[IID_IRasterFunctionHelper] = IRasterFunctionHelper
_IIDMap[IID_IRasterFunctionHelper2] = IRasterFunctionHelper2
_IIDMap[IID_IFunctionRasterDatasetName] = IFunctionRasterDatasetName
_IIDMap[IID_IFunctionRasterDataset] = IFunctionRasterDataset
_IIDMap[IID_IFunctionRasterDataset2] = IFunctionRasterDataset2
_IIDMap[IID_IGeometricFunction] = IGeometricFunction
_IIDMap[IID_IGeometricFunctionArguments] = IGeometricFunctionArguments
_IIDMap[IID_IPansharpeningFunctionArguments] = IPansharpeningFunctionArguments
_IIDMap[IID_IPansharpeningFunctionArguments2] = IPansharpeningFunctionArguments2
_IIDMap[IID_IPanSharpenGramSchmidtFunctionArguments] = IPanSharpenGramSchmidtFunctionArguments
_IIDMap[IID_IArithmeticFunctionArguments] = IArithmeticFunctionArguments
_IIDMap[IID_IArithmeticFunctionArguments2] = IArithmeticFunctionArguments2
_IIDMap[IID_IColormapFunctionArguments] = IColormapFunctionArguments
_IIDMap[IID_IMosaicLODInfos] = IMosaicLODInfos
_IIDMap[IID_IMosaicFunction] = IMosaicFunction
_IIDMap[IID_IMosaicFunction2] = IMosaicFunction2
_IIDMap[IID_IMosaicFunction3] = IMosaicFunction3
_IIDMap[IID_IMosaicFunctionArguments] = IMosaicFunctionArguments
_IIDMap[IID_IMosaicFunctionArguments2] = IMosaicFunctionArguments2
_IIDMap[IID_IExtractBandFunctionArguments] = IExtractBandFunctionArguments
_IIDMap[IID_IExtractBandFunctionArguments2] = IExtractBandFunctionArguments2
_IIDMap[IID_IStretchFunctionArguments] = IStretchFunctionArguments
_IIDMap[IID_IStretchFunctionArguments2] = IStretchFunctionArguments2
_IIDMap[IID_IStatisticsFunctionArguments] = IStatisticsFunctionArguments
_IIDMap[IID_IStatisticsFunctionArguments2] = IStatisticsFunctionArguments2
_IIDMap[IID_IConvolutionFunctionArguments] = IConvolutionFunctionArguments
_IIDMap[IID_ISpeckleFunctionArguments] = ISpeckleFunctionArguments
_IIDMap[IID_IRadarCalibrationFunctionArguments] = IRadarCalibrationFunctionArguments
_IIDMap[IID_IRasterFunctionTemplate] = IRasterFunctionTemplate
_IIDMap[IID_IRasterFunctionTemplate2] = IRasterFunctionTemplate2
_IIDMap[IID_IRasterFunctionVariable] = IRasterFunctionVariable
_IIDMap[IID_IClipFunctionArguments] = IClipFunctionArguments
_IIDMap[IID_IColorspaceConversionFunctionArguments] = IColorspaceConversionFunctionArguments
_IIDMap[IID_IHillshadeFunctionArguments] = IHillshadeFunctionArguments
_IIDMap[IID_ISlopeScalingArguments] = ISlopeScalingArguments
_IIDMap[IID_IReprojectFunctionArguments] = IReprojectFunctionArguments
_IIDMap[IID_IConstantFunctionArguments] = IConstantFunctionArguments
_IIDMap[IID_IConstantFunctionArguments2] = IConstantFunctionArguments2
_IIDMap[IID_ISpectralConversionFunctionArguments] = ISpectralConversionFunctionArguments
_IIDMap[IID_ISpectralConversionFunctionArguments2] = ISpectralConversionFunctionArguments2
_IIDMap[IID_ISlopeFunctionArguments] = ISlopeFunctionArguments
_IIDMap[IID_ITrendFunctionArguments] = ITrendFunctionArguments
_IIDMap[IID_IGrayscaleFunctionArguments] = IGrayscaleFunctionArguments
_IIDMap[IID_IShadedReliefFunctionArguments] = IShadedReliefFunctionArguments
_IIDMap[IID_IRasterInfoFunctionArguments] = IRasterInfoFunctionArguments
_IIDMap[IID_IMaskFunctionArguments] = IMaskFunctionArguments
_IIDMap[IID_IMaskFunctionArguments2] = IMaskFunctionArguments2
_IIDMap[IID_ISAIFunctionArguments] = ISAIFunctionArguments
_IIDMap[IID_IScalar] = IScalar
_IIDMap[IID_IMosaicRastersFunctionArguments] = IMosaicRastersFunctionArguments
_IIDMap[IID_IMergeRastersFunctionArguments] = IMergeRastersFunctionArguments
_IIDMap[IID_IFootprintFunctionArguments] = IFootprintFunctionArguments
_IIDMap[IID_INDVIFunctionArguments] = INDVIFunctionArguments
_IIDMap[IID_INDVIFunctionArguments2] = INDVIFunctionArguments2
_IIDMap[IID_IExcludedAreaFunctionArguments] = IExcludedAreaFunctionArguments
_IIDMap[IID_IRemapFunctionArguments] = IRemapFunctionArguments
_IIDMap[IID_ITableFunctionArguments] = ITableFunctionArguments
_IIDMap[IID_IBandArithmeticFunctionArguments] = IBandArithmeticFunctionArguments
_IIDMap[IID_IRasterItemFunctionArguments] = IRasterItemFunctionArguments
_IIDMap[IID_ICachedRasterFunction] = ICachedRasterFunction
_IIDMap[IID_ICachedRasterFunctionArguments] = ICachedRasterFunctionArguments
_IIDMap[IID_IRasterCacheArguments] = IRasterCacheArguments
_IIDMap[IID_IContrastBrightnessFunctionArguments] = IContrastBrightnessFunctionArguments
_IIDMap[IID_IRenderedRasterFunctionArguments] = IRenderedRasterFunctionArguments
_IIDMap[IID_IReflectanceFunctionArguments] = IReflectanceFunctionArguments
_IIDMap[IID_IDownsampleFunctionArguments] = IDownsampleFunctionArguments
_IIDMap[IID_IReflectanceFunctionArguments2] = IReflectanceFunctionArguments2
_IIDMap[IID_ILasToRasterFunctionArguments] = ILasToRasterFunctionArguments
_IIDMap[IID_ITerrainToRasterFunctionArguments] = ITerrainToRasterFunctionArguments
_IIDMap[IID_ILasDatasetToRasterFunctionArguments] = ILasDatasetToRasterFunctionArguments
_IIDMap[IID_IMosaicDataset] = IMosaicDataset
_IIDMap[IID_IItemTemplate] = IItemTemplate
_IIDMap[IID_IItemURI] = IItemURI
_IIDMap[IID_IItemURIArray] = IItemURIArray
_IIDMap[IID_ICellSizeLevel] = ICellSizeLevel
_IIDMap[IID_ICellSizeLevels] = ICellSizeLevels
_IIDMap[IID_IDataSourceCrawler] = IDataSourceCrawler
_IIDMap[IID_IBuilderItem] = IBuilderItem
_IIDMap[IID_IRasterBuilder] = IRasterBuilder
_IIDMap[IID_IItemURIFilter] = IItemURIFilter
_IIDMap[IID_IItemTemplateArray] = IItemTemplateArray
_IIDMap[IID_IRasterType] = IRasterType
_IIDMap[IID_IAddRastersParameters] = IAddRastersParameters
_IIDMap[IID_IRasterThumbnailBuilder] = IRasterThumbnailBuilder
_IIDMap[IID_ISynchronizeParameters] = ISynchronizeParameters
_IIDMap[IID_IRasterTypeOperation] = IRasterTypeOperation
_IIDMap[IID_IRasterTypeName] = IRasterTypeName
_IIDMap[IID_IDeleteMosaicDatasetParameters] = IDeleteMosaicDatasetParameters
_IIDMap[IID_IDataSourceCrawler2] = IDataSourceCrawler2
_IIDMap[IID_IFileCrawler] = IFileCrawler
_IIDMap[IID_IFolderSort] = IFolderSort
_IIDMap[IID_IFileCrawler2] = IFileCrawler2
_IIDMap[IID_ICsvCrawler] = ICsvCrawler
_IIDMap[IID_IRasterDatasetCrawler] = IRasterDatasetCrawler
_IIDMap[IID_ITableCrawler] = ITableCrawler
_IIDMap[IID_ITableCrawler2] = ITableCrawler2
_IIDMap[IID_ITableCrawler3] = ITableCrawler3
_IIDMap[IID_IArrayCrawler] = IArrayCrawler
_IIDMap[IID_IGenericObjectCrawler] = IGenericObjectCrawler
_IIDMap[IID_IItemURI2] = IItemURI2
_IIDMap[IID_IOverviewItemURI] = IOverviewItemURI
_IIDMap[IID_IItemPathsOptions] = IItemPathsOptions
_IIDMap[IID_IItemPaths2] = IItemPaths2
_IIDMap[IID_IBuilderItem2] = IBuilderItem2
_IIDMap[IID_IBuilderItem3] = IBuilderItem3
_IIDMap[IID_IRasterBuilderInit] = IRasterBuilderInit
_IIDMap[IID_IRasterBuilderInit2] = IRasterBuilderInit2
_IIDMap[IID_IItemTemplate2] = IItemTemplate2
_IIDMap[IID_ICompositeURIFilter] = ICompositeURIFilter
_IIDMap[IID_IRasterBuilder2] = IRasterBuilder2
_IIDMap[IID_IRasterTypeProperties] = IRasterTypeProperties
_IIDMap[IID_IRasterTypeProperties2] = IRasterTypeProperties2
_IIDMap[IID_IMosaicDataset2] = IMosaicDataset2
_IIDMap[IID_IMosaicDatasetOperationParameters] = IMosaicDatasetOperationParameters
_IIDMap[IID_IMosaicDatasetOperationParameters2] = IMosaicDatasetOperationParameters2
_IIDMap[IID_IThreadedOperationParameters] = IThreadedOperationParameters
_IIDMap[IID_IThreadedOperationParameters2] = IThreadedOperationParameters2
_IIDMap[IID_ISelectionParameters] = ISelectionParameters
_IIDMap[IID_ICreateMosaicDatasetParameters] = ICreateMosaicDatasetParameters
_IIDMap[IID_ICreateMosaicDatasetParameters2] = ICreateMosaicDatasetParameters2
_IIDMap[IID_ISynchronizeParameters2] = ISynchronizeParameters2
_IIDMap[IID_IBuildPyramidsParameters] = IBuildPyramidsParameters
_IIDMap[IID_ICalculateStatisticsParameters] = ICalculateStatisticsParameters
_IIDMap[IID_ICalculateCellSizeRangesParameters] = ICalculateCellSizeRangesParameters
_IIDMap[IID_IBuildBoundaryParameters] = IBuildBoundaryParameters
_IIDMap[IID_IBuildBoundaryParameters2] = IBuildBoundaryParameters2
_IIDMap[IID_IRemoveSliversParameters] = IRemoveSliversParameters
_IIDMap[IID_IOverviewTileParameters] = IOverviewTileParameters
_IIDMap[IID_IOverviewTileParameters2] = IOverviewTileParameters2
_IIDMap[IID_IOverviewImageParameters] = IOverviewImageParameters
_IIDMap[IID_IDefineOverviewsParameters] = IDefineOverviewsParameters
_IIDMap[IID_IGenerateOverviewsParameters] = IGenerateOverviewsParameters
_IIDMap[IID_IGenerateOverviewsParameters2] = IGenerateOverviewsParameters2
_IIDMap[IID_IRemoveItemsParameters] = IRemoveItemsParameters
_IIDMap[IID_IRemoveItemsParameters2] = IRemoveItemsParameters2
_IIDMap[IID_IDefineNoDataParameters] = IDefineNoDataParameters
_IIDMap[IID_IDefineNoDataParameters2] = IDefineNoDataParameters2
_IIDMap[IID_IComputeDirtyAreaParameters] = IComputeDirtyAreaParameters
_IIDMap[IID_IBuildFootprintsParameters] = IBuildFootprintsParameters
_IIDMap[IID_IBuildFootprintsParameters2] = IBuildFootprintsParameters2
_IIDMap[IID_IBuildFootprintsByRadiometryParameters] = IBuildFootprintsByRadiometryParameters
_IIDMap[IID_IBuildFootprintsByGeometryParameters] = IBuildFootprintsByGeometryParameters
_IIDMap[IID_IBuildFootprintsByShrinkingParameters] = IBuildFootprintsByShrinkingParameters
_IIDMap[IID_IFrameCameraParameters] = IFrameCameraParameters
_IIDMap[IID_IApplanixBuilder] = IApplanixBuilder
_IIDMap[IID_IISATBuilder] = IISATBuilder
_IIDMap[IID_ILasBuilder] = ILasBuilder
_IIDMap[IID_ITerrainBuilder] = ITerrainBuilder
_IIDMap[IID_ILasDatasetBuilder] = ILasDatasetBuilder
_IIDMap[IID_IRadarBuilder] = IRadarBuilder
_IIDMap[IID_IMatchATBuilder] = IMatchATBuilder
_IIDMap[IID_ISeamlineTaskInfo] = ISeamlineTaskInfo
_IIDMap[IID_ISeamlineTaskInfo2] = ISeamlineTaskInfo2
_IIDMap[IID_ISeamlineModifier] = ISeamlineModifier
_IIDMap[IID_ISeamlineModifierInit] = ISeamlineModifierInit
_IIDMap[IID_IBuildSeamlinesParameters] = IBuildSeamlinesParameters
_IIDMap[IID_IBuildSeamlinesParameters2] = IBuildSeamlinesParameters2
_IIDMap[IID_IQueryPathsParameters] = IQueryPathsParameters
_IIDMap[IID_IQueryPathsParameters2] = IQueryPathsParameters2
_IIDMap[IID_IReplacePathsParameters] = IReplacePathsParameters
_IIDMap[IID_IReplacePathsParameters2] = IReplacePathsParameters2
_IIDMap[IID_IImportGeometryParameters] = IImportGeometryParameters
_IIDMap[IID_IAnalyzeParameters] = IAnalyzeParameters
_IIDMap[IID_IAddNewerRastersParameters] = IAddNewerRastersParameters
_IIDMap[IID_IBuildSeamlinesParameters3] = IBuildSeamlinesParameters3
_IIDMap[IID_IMergeItemsParameters2] = IMergeItemsParameters2
_IIDMap[IID_ICellSizeLevel2] = ICellSizeLevel2
_IIDMap[IID_IMosaicDatasetOperation] = IMosaicDatasetOperation
_IIDMap[IID_IMosaicDatasetOperation2] = IMosaicDatasetOperation2
_IIDMap[IID_IRasterTypeHistory] = IRasterTypeHistory
_IIDMap[IID_IRasterTypeHistory2] = IRasterTypeHistory2
_IIDMap[IID_IOverviewBuilder] = IOverviewBuilder
_IIDMap[IID_IRasterTypeFactory] = IRasterTypeFactory
_IIDMap[IID_IRasterTypeFactory2] = IRasterTypeFactory2
_IIDMap[IID_IRasterTypeEnvironment] = IRasterTypeEnvironment
_IIDMap[IID_IRasterTypeEnvironment2] = IRasterTypeEnvironment2
_IIDMap[IID_IRasterTypeDataSourceHandlerParameters] = IRasterTypeDataSourceHandlerParameters
_IIDMap[IID_IRasterTypeDataSourceHandlerParameters2] = IRasterTypeDataSourceHandlerParameters2
_IIDMap[IID_IRasterTypeDataSourceHandler] = IRasterTypeDataSourceHandler
_IIDMap[IID_IRasterTypeDataSourceHandler2] = IRasterTypeDataSourceHandler2
_IIDMap[IID_IRasterTypeItemURI] = IRasterTypeItemURI
_IIDMap[IID_IRasterTypeItemURI2] = IRasterTypeItemURI2
_IIDMap[IID_ICompositeItemURI] = ICompositeItemURI
_IIDMap[IID_IIndexedItemURI] = IIndexedItemURI
_IIDMap[IID_IFileItemURI] = IFileItemURI
_IIDMap[IID_IRPFItemURI] = IRPFItemURI
_IIDMap[IID_IURIProductNameFilter] = IURIProductNameFilter
_IIDMap[IID_IURIPropertiesFilter] = IURIPropertiesFilter
_IIDMap[IID_ITableBuilder] = ITableBuilder
_IIDMap[IID_IMosaicWorkspaceExtension] = IMosaicWorkspaceExtension
_IIDMap[IID_IMosaicWorkspaceExtensionHelper] = IMosaicWorkspaceExtensionHelper
_IIDMap[IID_IRasterServiceHelper] = IRasterServiceHelper
_IIDMap[IID_IRasterServiceHelper2] = IRasterServiceHelper2
_IIDMap[IID_IItemURICompare] = IItemURICompare
_IIDMap[IID_IItemPathsQuery] = IItemPathsQuery
_IIDMap[IID_IItemPathsQuery2] = IItemPathsQuery2
_IIDMap[IID_IMultiPartItemURI] = IMultiPartItemURI
_IIDMap[IID_IAISImageServerManager] = IAISImageServerManager
_IIDMap[IID_IAngularMeasurement] = IAngularMeasurement
_IIDMap[IID_IDistanceMeasurement] = IDistanceMeasurement
_IIDMap[IID_IHeightMeasurement] = IHeightMeasurement
_IIDMap[IID_IMapPoint] = IMapPoint
_IIDMap[IID_IPointMeasurement] = IPointMeasurement
_IIDMap[IID_IPolygonMeasurement] = IPolygonMeasurement
_IIDMap[IID_IMensuration] = IMensuration
_IIDMap[IID_IMensuration3D] = IMensuration3D
_IIDMap[IID_IRasterBand] = IRasterBand
_IIDMap[IID_IRasterStatistics] = IRasterStatistics
_IIDMap[IID_IEnumRasterBand] = IEnumRasterBand
_IIDMap[IID_IRasterBandEdit] = IRasterBandEdit
_IIDMap[IID_IRasterBandEdit2] = IRasterBandEdit2
_IIDMap[IID_IRasterBandCollection] = IRasterBandCollection
_IIDMap[IID_IRasterWorkspace] = IRasterWorkspace
_IIDMap[IID_IRasterStatistics2] = IRasterStatistics2
_IIDMap[IID_IStatsHistogram3] = IStatsHistogram3
_IIDMap[IID_IRasterCalcStatsHistogram] = IRasterCalcStatsHistogram
_IIDMap[IID_IRasterCalcStatsHistogram2] = IRasterCalcStatsHistogram2
_IIDMap[IID_IRasterCalcStatsHistogram3] = IRasterCalcStatsHistogram3
_IIDMap[IID_IDERasterUtilities] = IDERasterUtilities
_IIDMap[IID_IRasterInfo2] = IRasterInfo2
_IIDMap[IID_IAISImageServiceX] = IAISImageServiceX
_IIDMap[IID_IAISClientObjectX] = IAISClientObjectX
_IIDMap[IID_IAISImageService2X] = IAISImageService2X
_IIDMap[IID_IAISImageService3X] = IAISImageService3X


# CLSIDs
CLSID_RasterWorkspaceFactory = uuid.UUID('4c91d963-3390-11d2-8d25-0000f8780535')
CLSID_FormatList = uuid.UUID('53b7c0b9-41fb-4b00-b51a-fa5cc5b785fe')
CLSID_RasterClassNames = uuid.UUID('ebfe248e-1409-4da9-b1b1-6434d0f47149')
CLSID_DblPnt = uuid.UUID('1f1a2725-6b9d-44a5-b75e-9e4cd9b9f90a')
CLSID_DblRect = uuid.UUID('4ea0bfbf-90cf-4983-9b3e-5c1f367e946b')
CLSID_RasterStatus = uuid.UUID('83220700-5844-11d4-8d9b-00c04f5b87b2')
CLSID_RasterStatusEventHelper = uuid.UUID('7131dac0-5836-11d4-8d9b-00c04f5b87b2')
CLSID_RasterStatusEvent2Helper = uuid.UUID('16c4b0d7-997d-48e1-ab0a-eb5866c4fa37')
CLSID_RasterDataManagementEventsHelper = uuid.UUID('0f57d4c3-bd86-4f4d-ac8d-0a0754d87c19')
CLSID_DefaultRasterStatusEvent = uuid.UUID('7a0a76a0-5836-11d4-8d9b-00c04f5b87b2')
CLSID_ImageRegistration = uuid.UUID('3688d80c-3154-4719-958c-68c7fd9d976d')
CLSID_ImageFeaturePoint = uuid.UUID('a5c64d18-a64a-4cf5-9aa2-f6925b291ddd')
CLSID_ImageFeaturePoints = uuid.UUID('3daebba2-fab8-4e11-a259-1ed658ad2146')
CLSID_ImageMatchPoint = uuid.UUID('0e2ab92a-b323-4b92-aa1e-7c2ba1c81cee')
CLSID_ImageMatchPoints = uuid.UUID('f4565965-ee18-46dd-a622-4cfbaf10d010')
CLSID_TiePoint = uuid.UUID('b7bad47d-91e4-4228-9457-e8d8ec47a283')
CLSID_TiePointCollection = uuid.UUID('a76f5ce9-6e37-4b4f-ae17-789ec6499c81')
CLSID_RasterDataset = uuid.UUID('7aca3d07-0629-11d2-8d24-0000f8780535')
CLSID_RasterBand = uuid.UUID('7aca3d08-0629-11d2-8d24-0000f8780535')
CLSID_RasterCatalogTable = uuid.UUID('358e55f5-8a1a-487d-884a-8226147b6499')
CLSID_Raster = uuid.UUID('c0a039ba-5329-11d2-aaad-00c04fa375fb')
CLSID_RasterWorkspace = uuid.UUID('aae25032-35fb-11d2-b1f2-00c04f8edeff')
CLSID_RasterBands = uuid.UUID('bc25e124-168b-11d2-8d25-0000f8780535')
CLSID_RasterNativeType = uuid.UUID('385ba7ae-3491-4aa7-8a5b-83dc6b6bb059')
CLSID_PixelBlock = uuid.UUID('ab1b6868-b08c-443a-b7ef-f6b2fdec434c')
CLSID_UniqueValues = uuid.UUID('9c81f1c7-792b-467e-ac80-069e4fdf4def')
CLSID_StatsHistogram = uuid.UUID('ba3027c1-49ca-4788-8b5a-3a6b387de78c')
CLSID_RasterCalcStatsHistogram = uuid.UUID('b6195cbe-dfc1-4797-a4e2-e9ddd408d323')
CLSID_RasterCalcUniqueValues = uuid.UUID('e218975b-e6a0-4eec-9716-06c10ed2359f')
CLSID_RasterColormapToRGBConverter = uuid.UUID('d0a4f887-3497-45e9-925d-c417b7eb6690')
CLSID_RasterCursor = uuid.UUID('887501b1-42d0-45d5-8234-e220482803ad')
CLSID_PixelBlockCursor = uuid.UUID('a0dc85b9-fb40-4839-b4fb-aa0ea4fb4229')
CLSID_RasterAttributeTableManager = uuid.UUID('fe143bf3-8d4e-415a-a7e9-a3ac29ab65a7')
CLSID_CancelListener = uuid.UUID('2585d67e-609b-4f43-b2f2-abba6cb27a6f')
CLSID_RasterColormap = uuid.UUID('92195722-5732-11d2-aaad-00c04fa375fb')
CLSID_RasterStatistics = uuid.UUID('8446eb83-3251-4f20-8b79-1d5421e39d4a')
CLSID_RasterHistogram = uuid.UUID('b01293ea-88d0-4e7d-af82-a0b10bac9b33')
CLSID_RasterHistograms = uuid.UUID('22185fbc-8aae-43df-bf15-9a0bd60ab0c4')
CLSID_MosaicRaster = uuid.UUID('1375c45e-1f1e-4687-a62f-13ea270772c5')
CLSID_MeanMosaicker = uuid.UUID('8b65a2e0-efb3-4e14-8b82-7499331b691a')
CLSID_BlendMosaicker = uuid.UUID('e94b7efb-45f9-4c1e-b9b2-ac31588733ba')
CLSID_GeoTransformationHelper = uuid.UUID('212f1227-8e51-4545-a7b9-18c5c1531e63')
CLSID_RasterCommand = uuid.UUID('069189e3-29f5-4f06-b1db-89fc4a56c731')
CLSID_RasterCommandResult = uuid.UUID('80432f64-dc41-4a7d-9c49-1aebe9266229')
CLSID_RasterGeometryProc = uuid.UUID('2b473c40-b18e-11d3-a650-0008c7df88a8')
CLSID_RasterPicture = uuid.UUID('8f7f5481-d5de-11d3-a414-0004ac1b1d86')
CLSID_SdeRasterCatalogTable = uuid.UUID('28eefdc0-074b-11d4-8d75-00c04f5b87b2')
CLSID_BasicRasterSdeLoader = uuid.UUID('84e88ac0-9639-4970-a039-ff7eb58ff15c')
CLSID_RasterDomainExtractor = uuid.UUID('a48a92b0-ec2f-11d4-b2b1-00508bcdc74b')
CLSID_DERasterUtilities = uuid.UUID('df5daf98-6e9d-4703-81b8-f543ac47faaf')
CLSID_DEWCSCoverageType = uuid.UUID('7d78e744-3499-4124-bd1b-369965ee500c')
CLSID_DEWCSCoverage = uuid.UUID('54e1883e-3f44-4fc7-b588-a299b68ca9d4')
CLSID_DEWMSMapType = uuid.UUID('3b36c081-2a17-4b08-bab1-b88acae72640')
CLSID_DEWMSMap = uuid.UUID('0957b24f-209d-4372-b29b-61a708249ca7')
CLSID_DEImageServerType = uuid.UUID('50fecfeb-6e65-4d46-aad9-66ca5e2d918e')
CLSID_DEImageServer = uuid.UUID('2da8815f-1c55-4791-ba69-7856af60f995')
CLSID_DEMosaicDatasetType = uuid.UUID('704b42cb-266c-4169-bb3e-f4ca3a3256a0')
CLSID_DEMosaicDataset = uuid.UUID('f5b0862d-3e81-45f7-9c79-52236743c95d')
CLSID_SdeRasterTableName = uuid.UUID('942ac1c0-fec4-11d3-8d6f-00c04f5b87b2')
CLSID_BackgroundFilter = uuid.UUID('9cd915d3-b580-4ec3-bbaf-360fac60f6c3')
CLSID_ColormapFilter = uuid.UUID('f4f73571-4b44-47f3-94fc-e0c81f8bac8b')
CLSID_LutFilter = uuid.UUID('e825fc58-151a-4bc6-8ab5-2cc1481fe403')
CLSID_RasterConvolutionFilter = uuid.UUID('040c1c88-9399-4990-ad7b-907fb45757be')
CLSID_PixelFilterCollection = uuid.UUID('e6db06fb-51bc-4cc4-b328-a3202b743e92')
CLSID_MultibandFilter = uuid.UUID('e09f6d8b-90a8-43fb-857a-9adc30f9a6e7')
CLSID_PansharpeningFilter = uuid.UUID('b58b1271-e6fb-4b27-8417-2b8d62d654b0')
CLSID_RemapFilter = uuid.UUID('2aa277e1-0772-4941-a322-f07b2b6ae782')
CLSID_ClipFilter = uuid.UUID('de8e0d02-0974-47d3-8a80-38ecb0069be5')
CLSID_NoDataFilter = uuid.UUID('57e02db1-85bd-454a-abb9-d16a7f8ae1d2')
CLSID_FocalMeanFilter = uuid.UUID('5156eea7-ec14-44af-b36e-6d1957218ae7')
CLSID_FocalStatisticsFilter = uuid.UUID('aa224ecd-aec2-4872-8cd2-135afc7f5e1c')
CLSID_SpeckleFilter = uuid.UUID('5fd8dd36-a4b1-484b-8eda-b3888cb7977d')
CLSID_HistogramSpecification = uuid.UUID('b66278b0-8352-499b-ad5c-5140c54ec52f')
CLSID_StockFrequencyDistributionHistogram = uuid.UUID('766c96dd-1896-442b-85fd-52591c7f28a6')
CLSID_RasterLoader = uuid.UUID('4a8e08b2-a38c-4cbe-8278-85b313a63fa7')
CLSID_RasterCatalogLoader = uuid.UUID('b34ad778-a8e9-4cab-8469-cf3c16cae0fa')
CLSID_DrLoader = uuid.UUID('70ab899a-af22-4230-b14f-127d8aecb833')
CLSID_RasterXformer = uuid.UUID('779bcaad-7557-4aae-a2a9-1a4b19573ad4')
CLSID_IdentityXform = uuid.UUID('c4709a2e-299e-4609-9904-6c595319b30f')
CLSID_GeometricXform = uuid.UUID('067c3b10-6091-4804-82ab-1e066f3151a6')
CLSID_CoordinateXform = uuid.UUID('a11af4ab-9861-4e86-ac25-775668372108')
CLSID_PolynomialXform = uuid.UUID('b3caa849-5523-4490-aa2d-780aca41e1dd')
CLSID_SplineXform = uuid.UUID('4c777d30-c7ae-45bf-9781-19af061a62e9')
CLSID_CompositeXform = uuid.UUID('44923ebb-d988-4847-9b29-11aa8e6e132c')
CLSID_GCSShiftXform = uuid.UUID('cf32be9a-58c6-4f36-ac65-9263fcfede88')
CLSID_AdjustXform = uuid.UUID('1610ee70-8d50-41e8-b2f3-9b3002be7baa')
CLSID_RPCXform = uuid.UUID('7485f1c6-398f-465a-910e-50f69c6f6f79')
CLSID_ApproximationXform = uuid.UUID('c072eae6-f85d-470f-abb5-7cad9657d16a')
CLSID_SimplePixelResampler = uuid.UUID('461e899b-f634-4be1-a45b-dc62a3e71b4b')
CLSID_SimplePixelReader = uuid.UUID('e7b8a209-1ea3-426e-83f7-77740a000e24')
CLSID_RGB32PixelResampler = uuid.UUID('fe5d7778-565c-449e-a194-1a35432cc156')
CLSID_FrameXform = uuid.UUID('d3e347ac-80e5-4a75-b4a8-1e7ac5d50710')
CLSID_LSRXform = uuid.UUID('15446949-7fd6-44b6-8bb2-1a66ff06837e')
CLSID_SPOT5Xform = uuid.UUID('bbc93ae5-459d-4d82-a95f-2fa49e9ae0c7')
CLSID_Formosat2Xform = uuid.UUID('a334516d-de73-43bd-9cc5-1cc324705ef8')
CLSID_ProjectiveXform = uuid.UUID('cb7dc226-5ad2-4a40-88f4-3cedb5d63bde')
CLSID_RasterXformHelper = uuid.UUID('001a7aad-3acf-4d06-86fb-f9f0e7ed2016')
CLSID_PushbroomUtilities = uuid.UUID('7612154f-6ee3-4f71-ada0-04b070fcbd03')
CLSID_CSMXform = uuid.UUID('5f801a53-8d2a-4a41-b933-feffcf0ccaf8')
CLSID_FunctionRasterDatasetName = uuid.UUID('eb07e8cc-ee78-438a-a2c1-ba80455acb02')
CLSID_FunctionRasterDataset = uuid.UUID('d0cc7770-aa1a-4fe3-bd82-1d8bb7b3781f')
CLSID_RasterInfo = uuid.UUID('4f1e5fca-2334-4280-b109-17b3caf9290e')
CLSID_RasterInfos = uuid.UUID('f01b2cc6-a685-456d-b23f-909596dfd9a2')
CLSID_RasterFunctionHelper = uuid.UUID('b55f1f83-3745-4c88-bbe1-4fc7a0273409')
CLSID_RasterFunctionCollection = uuid.UUID('1f120f8f-17aa-4b8e-8cd8-6007e0dedb80')
CLSID_CompositeBandFunction = uuid.UUID('b314f443-3d35-4e34-a389-c0822a187395')
CLSID_ExtractBandFunction = uuid.UUID('f9fe7bb2-8910-4b5a-bcb5-fe990bd3e517')
CLSID_ExtractBandFunctionArguments = uuid.UUID('e35f696d-dc8d-4274-b5a6-7a15fb0cf512')
CLSID_GeometricFunction = uuid.UUID('1013a267-0e0e-428f-8816-5551f450d711')
CLSID_GeometricFunctionArguments = uuid.UUID('562f6ff5-2351-42d1-b464-ba03de92e7ef')
CLSID_MosaicFunction = uuid.UUID('7406b10e-6009-4366-85ff-5a067b54b2ad')
CLSID_MosaicFunctionArguments = uuid.UUID('62c333ed-a776-4a2e-8062-1959c70d2704')
CLSID_NDVIFunction = uuid.UUID('1f3ac8e8-3011-4b87-8d4a-8150a81fdc58')
CLSID_NDVIFunctionArguments = uuid.UUID('f7871ddd-26cd-40d1-b86e-f5308e3828e2')
CLSID_ColormapToRGBFunction = uuid.UUID('6a8d5aae-8c8e-4b67-89b2-25e1e393557f')
CLSID_RGBToColormapFunction = uuid.UUID('465187c5-c8d4-462b-af85-2b375dd7d7e6')
CLSID_PansharpeningFunction = uuid.UUID('b54e8861-fcf0-4642-908a-360e1bf5ea79')
CLSID_PansharpeningFunctionArguments = uuid.UUID('09bf8db7-1a82-4ad2-a366-aee762487f75')
CLSID_PanSharpenGramSchmidtFunction = uuid.UUID('47775611-00dd-44dd-b771-a50932ebcd40')
CLSID_PanSharpenGramSchmidtFunctionArguments = uuid.UUID('767381ff-3ecc-4685-8997-4f2e0f523cec')
CLSID_IdentityFunction = uuid.UUID('dc71d132-e02e-4dff-852b-7e1f10024d9b')
CLSID_ArithmeticFunction = uuid.UUID('04e0f604-76f5-4a7a-a1c4-57f54b9cc4af')
CLSID_ArithmeticFunctionArguments = uuid.UUID('073c8688-949b-4483-9f34-8289ed1d1072')
CLSID_ColormapFunction = uuid.UUID('5a5b350d-c1f0-4e50-983c-358dbc9c40b5')
CLSID_ColormapFunctionArguments = uuid.UUID('caaf0682-8040-43d1-ae21-89f9684df9b4')
CLSID_RGB32Function = uuid.UUID('95cd2068-42a4-43ee-bf08-7b2e562a9b47')
CLSID_ComplexFunction = uuid.UUID('7f9b9795-6d98-4f8b-aeb8-71fc8fe92e49')
CLSID_StretchFunction = uuid.UUID('e0c3a6d6-8892-4076-b614-255717a5cfdf')
CLSID_StretchFunctionArguments = uuid.UUID('d8261e56-178a-4a52-915b-788f9393951c')
CLSID_StatisticsFunction = uuid.UUID('dd760853-675f-4770-b678-ad1600e6db5e')
CLSID_StatisticsFunctionArguments = uuid.UUID('c26aac72-5d86-482e-96d4-d56986ebf09c')
CLSID_ConvolutionFunction = uuid.UUID('35dbacdc-18e0-4c5b-a087-c6c5bb692289')
CLSID_ConvolutionFunctionArguments = uuid.UUID('78f85973-afd4-4dfa-9a65-246e40ea1ef9')
CLSID_SpeckleFunction = uuid.UUID('1c11c9e1-25f1-4042-b6e8-e9953d85392f')
CLSID_SpeckleFunctionArguments = uuid.UUID('e0a62507-3ab0-42e9-b3a0-a58cd1ff0d6e')
CLSID_RadarCalibrationFunction = uuid.UUID('8d9f5211-f745-45f8-94cf-205152875d87')
CLSID_RadarCalibrationFunctionArguments = uuid.UUID('a78dfa71-d2d3-4766-85dd-c70c17dbe6b3')
CLSID_MosaicLODInfos = uuid.UUID('e3f15e14-512a-49af-8078-ef31813d6eab')
CLSID_RasterFunctionTemplate = uuid.UUID('0b67bd89-4783-4a6f-be52-143db3660c11')
CLSID_RasterFunctionVariable = uuid.UUID('1799317a-c5ab-4aee-8c99-96a5cf1ba0e6')
CLSID_ClipFunction = uuid.UUID('dff0d3b8-fd42-4250-be65-842828dc8e99')
CLSID_ClipFunctionArguments = uuid.UUID('f72be5e4-fa3f-4626-95cf-4a78102f5f6e')
CLSID_ColorspaceConversionFunction = uuid.UUID('13b16685-ca39-478e-9b4c-02f12a73552e')
CLSID_ColorspaceConversionFunctionArguments = uuid.UUID('069b72cd-d41c-4c1f-8784-76609830ab8a')
CLSID_HillshadeFunction = uuid.UUID('77b291d1-4581-4b4f-a802-791de874bc89')
CLSID_HillshadeFunctionArguments = uuid.UUID('80186241-15df-4c3a-94da-50fa3f73fcb2')
CLSID_ConstantFunction = uuid.UUID('1423a723-2865-4b58-98ad-01928daf4ce8')
CLSID_ConstantFunctionArguments = uuid.UUID('4036254e-3cc0-460e-98be-8e9fb309f0a3')
CLSID_SpectralConversionFunction = uuid.UUID('35eead6e-d973-41ac-837d-f16f6023e256')
CLSID_SpectralConversionFunctionArguments = uuid.UUID('f5e78815-251e-4008-9c5b-f63abdb3799e')
CLSID_SlopeFunction = uuid.UUID('baf9a2de-8b1a-4dc5-aeae-138e2a7bcf3d')
CLSID_SlopeFunctionArguments = uuid.UUID('c39388b1-0eb2-4b50-97f6-47beb2c60d86')
CLSID_AspectFunction = uuid.UUID('d8730557-5a60-4b99-9e63-43f56cc1259a')
CLSID_TrendFunction = uuid.UUID('12038de4-0d34-4772-9f71-a1ea4d1ea83a')
CLSID_TrendFunctionArguments = uuid.UUID('954e5bb5-2892-49cb-9bf6-033f5a78705b')
CLSID_GrayscaleFunction = uuid.UUID('060cc78f-d651-4df3-aa47-95e1d0d1d311')
CLSID_GrayscaleFunctionArguments = uuid.UUID('cd0e53bf-6d15-48b6-a7c4-3971365813aa')
CLSID_ShadedReliefFunction = uuid.UUID('ecb818c5-bc4e-4359-b40a-d2ef9e6717c2')
CLSID_ShadedReliefFunctionArguments = uuid.UUID('c0c4f4db-7f2a-4050-a1e2-89cd7868c43a')
CLSID_RasterInfoFunction = uuid.UUID('d44242bf-18e8-4670-9f0a-132f0aa58b17')
CLSID_RasterInfoFunctionArguments = uuid.UUID('877bd868-ee05-4493-b586-bb71681f0665')
CLSID_MaskFunction = uuid.UUID('a5a0861f-1b50-420c-934b-53685732f07c')
CLSID_MaskFunctionArguments = uuid.UUID('350d8526-9fad-4842-a77d-b2a6ec143dbf')
CLSID_SAIFunction = uuid.UUID('0bdc2211-71c1-48da-9cf6-6903730e302d')
CLSID_SAIFunctionArguments = uuid.UUID('314e643b-44a2-43ad-9374-6f4eeade11e9')
CLSID_Scalar = uuid.UUID('a5b2bf59-7876-4bac-ab34-7c2f3684b95f')
CLSID_MosaicRastersFunction = uuid.UUID('33c422d8-b2e5-4ba3-bdd3-2d6000e49723')
CLSID_MergeRastersFunction = uuid.UUID('96e60d70-6bf9-4486-b9ed-c41181259f71')
CLSID_MosaicRastersFunctionArguments = uuid.UUID('94f10296-5868-4b2d-9596-e17bdd077e25')
CLSID_MergeRastersFunctionArguments = uuid.UUID('9a388281-b984-4bd3-b799-348d01a05605')
CLSID_RasterFunctionTemplateArguments = uuid.UUID('e7e9fa4f-fcc6-483d-9450-ff38b6a2c315')
CLSID_FootprintFunction = uuid.UUID('4861cc7d-5d08-4af2-b69b-49c8e90ca84b')
CLSID_FootprintFunctionArguments = uuid.UUID('80ff48a6-e886-4f70-8022-abf1b9275d31')
CLSID_ExcludedAreaFunction = uuid.UUID('fc9a46ce-e198-48db-aec2-08486d19e605')
CLSID_ExcludedAreaFunctionArguments = uuid.UUID('32248838-455a-42ca-98cd-f938e502f495')
CLSID_RGB32ToRGBFunction = uuid.UUID('ee26add9-f748-45cd-b0ae-795979090a79')
CLSID_RemapFunction = uuid.UUID('19156a32-b9a0-4ddf-b79f-61d74f367f93')
CLSID_RemapFunctionArguments = uuid.UUID('86acb7d5-a0e7-4345-9fbf-8bf59d5c87b2')
CLSID_TableFunction = uuid.UUID('a3da7ce4-0af9-4130-954c-ea3294f549ed')
CLSID_TableFunctionArguments = uuid.UUID('4c912271-d13a-43bf-adde-722902de115f')
CLSID_BandArithmeticFunction = uuid.UUID('d2455fd9-9a43-4630-b928-5cc89e52bf4c')
CLSID_BandArithmeticFunctionArguments = uuid.UUID('6f19d624-24fe-4eac-bf1f-a117928de308')
CLSID_RasterItemFunction = uuid.UUID('31e67a19-ed23-4825-bf1e-6a7d7b0ef190')
CLSID_RasterItemFunctionArguments = uuid.UUID('a2a534d3-d721-4c8c-bfaf-98c6d835daf2')
CLSID_CachedRasterFunction = uuid.UUID('aca03769-2d4e-484d-8e14-1bc4acb17a59')
CLSID_CachedRasterFunctionArguments = uuid.UUID('4d463957-3b81-46ba-aa8c-4654de7d94e5')
CLSID_ReflectanceFunction = uuid.UUID('5e5c1828-ecd1-4620-9ca1-970d2aa450de')
CLSID_ContrastBrightnessFunction = uuid.UUID('e5986c48-1f76-4914-ba6e-5ea65231d7df')
CLSID_ContrastBrightnessFunctionArguments = uuid.UUID('634cbd5d-bb9d-4372-a908-230fb8ba5355')
CLSID_ReprojectFunction = uuid.UUID('23d7cd5b-224b-42f3-945d-13adfbb71b9f')
CLSID_ReprojectFunctionArguments = uuid.UUID('453fbf56-ca41-410d-92cf-fb727cfdc1d1')
CLSID_RenderedRasterFunction = uuid.UUID('eed089c5-98f5-496d-903c-ce3f2a1956dc')
CLSID_RenderedRasterFunctionArguments = uuid.UUID('a6e9ca22-4c2b-4b4c-aea5-da37566c3130')
CLSID_ReflectanceFunctionArguments = uuid.UUID('082dc874-8acc-4fd8-a1d1-aeaf73ca899a')
CLSID_KauthThomasFunction = uuid.UUID('a19473ea-d62d-4610-833f-f2b3d4bcb8e4')
CLSID_DownsampleFunction = uuid.UUID('8790a923-ed71-45c4-94a7-bac1134304c2')
CLSID_DownsampleFunctionArguments = uuid.UUID('1cf1f1e0-c1e0-4f7b-aca7-4f53522310fa')
CLSID_FileCrawler = uuid.UUID('1b13f960-8914-4440-a2d5-08b1b16c916d')
CLSID_FolderCrawler = uuid.UUID('939d5a4f-0ab2-4aab-96a6-c66f481c118b')
CLSID_RasterDatasetCrawler = uuid.UUID('6a5bb65a-9cf2-4aa4-9eb1-d7e8de9a6dd6')
CLSID_TableCrawler = uuid.UUID('8b77c68d-71ba-4707-aa03-2fb6e4a2c52b')
CLSID_ArrayCrawler = uuid.UUID('4a5ff13e-95ae-411b-a8ae-3dfdcbbfbdec')
CLSID_GenericObjectCrawler = uuid.UUID('ffa21592-9238-4402-98f6-0253312512dd')
CLSID_ItemURI = uuid.UUID('fd27e0be-6d83-40df-a226-cfb614f7655d')
CLSID_ItemURIArray = uuid.UUID('cf04981c-4cee-43cd-aa52-86dcf456409b')
CLSID_BuilderItem = uuid.UUID('e9432ef9-9a04-4e89-a956-e3757dae3f5c')
CLSID_MosaicDataset = uuid.UUID('018ea77b-8f1b-4ff9-91c1-9e590d6fc0d6')
CLSID_CellSizeLevel = uuid.UUID('7fde6784-3e1f-416f-b801-67750e5baa1d')
CLSID_OverviewItemURI = uuid.UUID('550753de-479a-46ba-a1c7-6eb86070d89c')
CLSID_CellSizeLevels = uuid.UUID('44c50016-34c2-41c7-88db-498df3bff9e6')
CLSID_RasterDatasetBuilder = uuid.UUID('62f7d26f-0053-4514-b9f5-e58a1b0aab84')
CLSID_NITFBuilder = uuid.UUID('2c2351f9-9b7c-4208-8d17-34d7496007ee')
CLSID_RPFBuilder = uuid.UUID('a9965bfe-7862-4077-a76d-83c3a943d258')
CLSID_PixFileBuilder = uuid.UUID('c055b1ff-f26c-488c-b811-1f871b00f4a6')
CLSID_OverviewBuilder = uuid.UUID('24939700-ba0b-439d-954e-09d6f140cb71')
CLSID_RPDefBuilder = uuid.UUID('bc7c6260-c8fb-40ac-9845-8067f1185f92')
CLSID_ISDefBuilder = uuid.UUID('3f2555fa-4674-4685-b77c-be3d3ed75e5e')
CLSID_QuickBirdBuilder = uuid.UUID('bf0d25e4-b429-417a-9ea1-2abed24d106d')
CLSID_ItemTemplate = uuid.UUID('c61177d5-3626-44ad-b443-6a8308307cc3')
CLSID_ItemTemplateArray = uuid.UUID('1c88b823-c61b-4d18-b860-ad464de7e77a')
CLSID_RasterType = uuid.UUID('c7ee2957-e230-4be0-ae55-a459b9647e21')
CLSID_RasterTypeItemURI = uuid.UUID('3ef7be5b-961f-48b2-af26-439cc2271f57')
CLSID_CompositeItemURI = uuid.UUID('bab2b786-58cd-44d5-80d7-3057b4c444cb')
CLSID_IndexedItemURI = uuid.UUID('a5fd773e-7c6a-4b12-87a7-17020a76db66')
CLSID_FileItemURI = uuid.UUID('d637c34b-9edf-4af2-b44f-0c4b5de216d3')
CLSID_RPFItemURI = uuid.UUID('b619c7c1-05a3-429b-9126-15eeac97383d')
CLSID_TableBuilder = uuid.UUID('ea44519b-5080-4001-8054-cd5a93b761cb')
CLSID_ApplanixBuilder = uuid.UUID('0b5fc20f-59a7-46dc-8f75-c58ca4c8c9e1')
CLSID_MatchATBuilder = uuid.UUID('6e34d5d3-4ae1-43bc-afb3-0c12022184d6')
CLSID_ISATBuilder = uuid.UUID('32012433-8ddf-4aca-9686-31def28d0e28')
CLSID_KompsatBuilder = uuid.UUID('ca963330-4125-4d21-b05d-dfb766c79243')
CLSID_IkonosBuilder = uuid.UUID('badffa86-5c20-44b1-8a66-0abc611b8aae')
CLSID_LandsatBuilder = uuid.UUID('661cf6c7-cd79-4e72-a023-7df0a413041f')
CLSID_LandsatMSSBuilder = uuid.UUID('8e0a8dd6-df21-4e83-859f-64e53841981c')
CLSID_SpotBuilder = uuid.UUID('18453678-a175-4ef1-90fa-b793b1f33e6f')
CLSID_RapidEyeBuilder = uuid.UUID('df477dc1-4ad8-4e27-9ea1-2b971536ac36')
CLSID_LasBuilder = uuid.UUID('da19b110-389b-4300-9c8a-49687e41e4bd')
CLSID_LasDatasetBuilder = uuid.UUID('1e7b6221-2ac3-43d3-a5fb-0a986d25c99a')
CLSID_RadarBuilder = uuid.UUID('a3c4e211-e019-45b9-9709-e7c609bf82d8')
CLSID_TerrainBuilder = uuid.UUID('ea7603f9-a5b5-40c4-a96a-2044965279d8')
CLSID_HREBuilder = uuid.UUID('1e076602-a69e-4ff6-9c2c-e23f1ff2cd80')
CLSID_RasterTypeEnvironment = uuid.UUID('d7083778-3135-4bf9-a727-b37e5ddc3fe7')
CLSID_CreateMosaicDatasetParameters = uuid.UUID('9031f735-38d2-400b-a613-8bc0b511eed6')
CLSID_MosaicDatasetSelectionParameters = uuid.UUID('be17e20a-c88f-4871-891e-d15561818267')
CLSID_AddRastersParameters = uuid.UUID('50088aff-736a-4448-b00a-18eb0c4971ea')
CLSID_SynchronizeParameters = uuid.UUID('737c8139-853b-4c31-a58a-a1c4d7624e34')
CLSID_CalculateCellSizeRangesParameters = uuid.UUID('0b50d766-210d-4526-8919-c324ba171507')
CLSID_BuildBoundaryParameters = uuid.UUID('d54b5641-8abd-4f43-acf4-5278afb1d79d')
CLSID_RemoveItemsParameters = uuid.UUID('ce6af0dc-6ebd-4655-b287-c851d1c52ab6')
CLSID_BuildFootprintsParameters = uuid.UUID('eeb74063-1aad-4578-8131-ede565724f61')
CLSID_DefineOverviewsParameters = uuid.UUID('3c8017ce-5091-4b09-ba2e-62f15454589a')
CLSID_GenerateOverviewsParameters = uuid.UUID('34a5dcbe-b169-4a81-884d-db98ea237f82')
CLSID_BuildSeamlinesParameters = uuid.UUID('fdf16309-e5e2-421b-9ace-0d2360b13e96')
CLSID_QueryPathsParameters = uuid.UUID('950d3cd2-730b-46f9-90a1-81a73ff3441f')
CLSID_ReplacePathsParameters = uuid.UUID('9edf6058-1368-4a4b-9fa6-e437e24fc8ca')
CLSID_DefineNoDataParameters = uuid.UUID('b32bf91b-51ef-43dc-b74e-f686c30f23a1')
CLSID_ComputeDirtyAreaParameters = uuid.UUID('e9de847a-2888-4ff1-b384-be60ffdae6f6')
CLSID_CompositeURIFilter = uuid.UUID('56965c22-3ade-4a4a-b35a-523c21438921')
CLSID_URIProductNameFilter = uuid.UUID('227397d1-c518-4edb-addf-a07160aad029')
CLSID_SeamlineTaskInfo = uuid.UUID('de221c73-5c88-4a0d-b78e-13e3520e2061')
CLSID_ClipFootprintToMosaic = uuid.UUID('7b7beae1-093a-43b8-b283-d0d794b7af48')
CLSID_RasterRouteFinder = uuid.UUID('1192f4ad-7be9-4635-b800-62650a980704')
CLSID_SeamlineByEdge = uuid.UUID('97741fda-5211-4794-9d6e-8b23cb8fdfb8')
CLSID_MosaicWorkspaceExtension = uuid.UUID('4fc3b53d-ca2c-47fb-beb0-b3ebcd3d68f5')
CLSID_MosaicWorkspaceExtensionHelper = uuid.UUID('3ef24768-21df-4b44-8f25-b8a05eb867a5')
CLSID_RasterTypeName = uuid.UUID('507e980b-d338-4636-a729-a939bfcaa124')
CLSID_ImportGeometryParameters = uuid.UUID('a60416bb-87a4-483f-9fd6-239159c32a62')
CLSID_AnalyzeParameters = uuid.UUID('a411f679-9803-479d-885a-2318a4b373e9')
CLSID_RasterTypeFactory = uuid.UUID('8f2800f4-5842-47df-ad1d-2077a7966bbf')
CLSID_CsvCrawler = uuid.UUID('233d70dd-b202-4b84-8f0e-60f590bba259')
CLSID_URIPropertiesFilter = uuid.UUID('aa3e2f92-b23b-427b-8e2a-68c0eeca4dfa')
CLSID_DeleteMosaicDatasetParameters = uuid.UUID('6651dd88-26f4-4816-a431-87f65f01901c')
CLSID_RasterTypeDataSourceHandlerParameters = uuid.UUID('98ab60aa-951a-4835-94ca-2c45561b4c57')
CLSID_ItemPathsOptions = uuid.UUID('21a197db-67e1-4f40-88c4-fb8518f9ef6f')
CLSID_QuickBirdFileCrawler = uuid.UUID('6d09023d-535f-48fb-bd5f-bc500c451fea')
CLSID_PixFileCrawler = uuid.UUID('cd87c31a-cf00-49af-9dcf-561cf08e2001')
CLSID_IkonosFileCrawler = uuid.UUID('d796c3ce-7d3a-4bbd-8d43-74212b14e2b5')
CLSID_MultiPartItemURI = uuid.UUID('105a7798-3c02-4e2f-b543-f4b3098ace4e')
CLSID_MergeItemsParameters = uuid.UUID('61e87bba-aa07-44ad-8f1c-296c31d6ce9d')
CLSID_SplitMergedItemsParameters = uuid.UUID('a1cd9dbc-65e7-42e6-8412-eb9a1b2de168')
CLSID_DmciiBuilder = uuid.UUID('3ee0c703-e17d-49c3-adac-597cb7f24253')
CLSID_KompsatFileCrawler = uuid.UUID('846cdcaf-1c49-4ab5-8790-ad680ab4236d')
CLSID_SocetSetBuilder = uuid.UUID('479a6290-46b1-4c6b-ad93-58bd17c83fa1')
CLSID_PleiadesBuilder = uuid.UUID('a1c125df-5101-4914-abe7-5aef60f84161')
CLSID_PleiadesFileCrawler = uuid.UUID('eb095f2f-8093-41ed-a7c3-16faa4a4d122')
CLSID_AddNewerRastersParameters = uuid.UUID('49fe5008-7722-499b-8d7b-23c9234d99a4')
CLSID_SearchBuilder = uuid.UUID('c196379c-6fad-4cc0-82af-8dee2a62c635')
CLSID_SearchItemURI = uuid.UUID('44365024-e442-43dc-b0b6-864d23373420')
CLSID_Spot6FileCrawler = uuid.UUID('d28525c9-f74c-4b0c-af39-8c5b181c943e')
CLSID_AISImageServerManager = uuid.UUID('4e5daa92-6358-4b49-9239-04ab2ebd5d50')
CLSID_CustomMensuration = uuid.UUID('de6a4175-0b89-43c8-8a92-f3c943af1947')
CLSID_Mensuration = uuid.UUID('d23e855f-5d4d-4469-8c05-031e0169bcd9')
CLSID_AngularMeasurement = uuid.UUID('b2abc03e-5dbe-495d-a9cc-e429171e3892')
CLSID_DistanceMeasurement = uuid.UUID('7abc913a-a245-47b5-a306-d94626c004e4')
CLSID_HeightMeasurement = uuid.UUID('d368c7c7-d8f7-49c2-86ec-28c33356a6ea')
CLSID_MapPoint = uuid.UUID('30cc063f-cf45-402e-966b-e2fcb47efdca')
CLSID_PointMeasurement = uuid.UUID('73458106-ba07-42f8-b553-a93022530b17')
CLSID_PolygonMeasurement = uuid.UUID('4ccfa921-00dc-4846-a052-dd369a40cbfe')

# Enumerations
class esriRasterFormatSupportLevel(Enumeration):
    __slots__ = ['esriRasterFormatSupportCore',
                 'esriRasterFormatSupportImaging']
    esriRasterFormatSupportCore = 1
    esriRasterFormatSupportImaging = 2

class esriMatchPointRefinementType(Enumeration):
    __slots__ = ['esriNoneRefinement',
                 'esriLeastSquareRefinement',
                 'esriCrossCorrelationRefinement']
    esriNoneRefinement = 0
    esriLeastSquareRefinement = 1
    esriCrossCorrelationRefinement = 2

class esriImageBlockingType(Enumeration):
    __slots__ = ['esriCenterBlocking',
                 'esriRandomBlocking',
                 'esriRegularBlocking']
    esriCenterBlocking = 0
    esriRandomBlocking = 1
    esriRegularBlocking = 2

class esriImageAdjustmentType(Enumeration):
    __slots__ = ['esriImageAdjustmentAppend',
                 'esriImageAdjustmentReplace',
                 'esriImageAdjustmentReset']
    esriImageAdjustmentAppend = 0
    esriImageAdjustmentReplace = 1
    esriImageAdjustmentReset = 2

class rstRepresentationType(Enumeration):
    __slots__ = ['DT_THEMATIC',
                 'DT_ATHEMATIC',
                 'DT_EITHER']
    DT_THEMATIC = 0
    DT_ATHEMATIC = 1
    DT_EITHER = 2

class esriRasterError(Enumeration):
    __slots__ = ['E_RASTER_FILE_NOT_FOUND',
                 'E_RASTER_FILE_INVALID_EXTENSION',
                 'E_RASTER_RENDERER_INVALID_BAND_INDEX',
                 'E_RASTER_FILE_FAILED_TO_RENAME',
                 'E_RASTER_FILE_FAILED_TO_COPY',
                 'E_RASTER_FILE_LZW_FAILED',
                 'E_RASTER_ACCESS_IS_DENIED',
                 'E_RASTER_DATASET_EXIST',
                 'E_RASTER_FAILED_TO_OPEN_CONNECTION',
                 'E_RASTER_FAILED_TO_OPEN_WORKSPACE',
                 'E_RASTER_EMPTY_WORKSPACE',
                 'E_RASTER_FAILED_TO_CREATE_CATALOG_ITEM',
                 'E_RASTER_INVALID_RASTER_VALUE',
                 'E_RASTER_FAILED_TO_OPEN_CATALOG',
                 'E_RASTER_UNSUPPORTED_PCS',
                 'E_RASTER_CANNT_BUILD_VAT',
                 'E_RASTER_CANNT_ALTER_VAT',
                 'E_RASTER_FAILED_TO_CALC_STATS',
                 'E_RASTER_FAILED_TO_CALC_HISTOGRAM',
                 'E_RASTER_FAILED_TO_ALTER_STATS',
                 'E_RASTER_FAILED_TO_ALTER_HISTOGRAM',
                 'E_RASTER_FAILED_TO_CREATE_DATASET',
                 'E_RASTER_FAILED_TO_OPEN_DATASET',
                 'E_RASTER_FAILED_TO_COPY_DATASET',
                 'E_RASTER_FAILED_TO_RENAME_DATASET',
                 'E_RASTER_FAILED_TO_DELETE_DATASET',
                 'E_RASTER_FAILED_TO_ALTER_GEODATAXFORM',
                 'E_RASTER_FAILED_TO_BUILD_PYRAMID',
                 'E_RASTER_UNSUPPORTED_FORMAT',
                 'E_RASTER_TOO_MANY_UNIQUE_VALUES',
                 'E_RASTER_UNSUPPORTED_PIXEL_TYPE',
                 'E_RASTER_CANT_MOSAIC_COLORMAPED',
                 'E_RASTER_CANT_LOAD_FORMAT_DLL',
                 'E_RASTER_CANT_FIND_FORMAT_FUNCTION',
                 'E_RASTER_FAILED_TO_REGISTER_FORMAT',
                 'E_RASTER_INVALID_CELLSIZE',
                 'E_RASTER_OPERATION_CANCELED',
                 'E_RASTER_FAILED_TO_WRITE_AUX',
                 'E_RASTER_UNKNOWN_PIXELTYPE',
                 'E_RASTER_NO_WRITE_PERMISSION',
                 'E_RASTER_VAT_COUNT_TOO_LARGE',
                 'E_RASTER_BLOCKSIZE_TOO_LARGE',
                 'E_RASTER_TOO_MANY_DIRECTORIES',
                 'E_RASTER_COLORCORRECTION_NOT_LICENSED',
                 'E_RASTER_MOSAIC_NOT_LICENSED',
                 'E_RASTER_IN_LOAD_ONLY',
                 'E_ESIRGRID_FAILED_TOO_LONG',
                 'E_INVALID_RASTER_COMMAND',
                 'E_MISSING_RASTER',
                 'E_FAILED_TO_OPEN_RASTER_ITEM',
                 'E_RASTER_UNKNOWN_ERROR']
    E_RASTER_FILE_NOT_FOUND = -2147217407
    E_RASTER_FILE_INVALID_EXTENSION = -2147217406
    E_RASTER_RENDERER_INVALID_BAND_INDEX = -2147217405
    E_RASTER_FILE_FAILED_TO_RENAME = -2147217404
    E_RASTER_FILE_FAILED_TO_COPY = -2147217403
    E_RASTER_FILE_LZW_FAILED = -2147217402
    E_RASTER_ACCESS_IS_DENIED = -2147217401
    E_RASTER_DATASET_EXIST = -2147217400
    E_RASTER_FAILED_TO_OPEN_CONNECTION = -2147217398
    E_RASTER_FAILED_TO_OPEN_WORKSPACE = -2147217397
    E_RASTER_EMPTY_WORKSPACE = -2147217396
    E_RASTER_FAILED_TO_CREATE_CATALOG_ITEM = -2147217395
    E_RASTER_INVALID_RASTER_VALUE = -2147217394
    E_RASTER_FAILED_TO_OPEN_CATALOG = -2147217393
    E_RASTER_UNSUPPORTED_PCS = -2147217392
    E_RASTER_CANNT_BUILD_VAT = -2147217391
    E_RASTER_CANNT_ALTER_VAT = -2147217390
    E_RASTER_FAILED_TO_CALC_STATS = -2147217389
    E_RASTER_FAILED_TO_CALC_HISTOGRAM = -2147217388
    E_RASTER_FAILED_TO_ALTER_STATS = -2147217387
    E_RASTER_FAILED_TO_ALTER_HISTOGRAM = -2147217386
    E_RASTER_FAILED_TO_CREATE_DATASET = -2147217385
    E_RASTER_FAILED_TO_OPEN_DATASET = -2147217384
    E_RASTER_FAILED_TO_COPY_DATASET = -2147217383
    E_RASTER_FAILED_TO_RENAME_DATASET = -2147217382
    E_RASTER_FAILED_TO_DELETE_DATASET = -2147217381
    E_RASTER_FAILED_TO_ALTER_GEODATAXFORM = -2147217380
    E_RASTER_FAILED_TO_BUILD_PYRAMID = -2147217379
    E_RASTER_UNSUPPORTED_FORMAT = -2147217378
    E_RASTER_TOO_MANY_UNIQUE_VALUES = -2147217377
    E_RASTER_UNSUPPORTED_PIXEL_TYPE = -2147217376
    E_RASTER_CANT_MOSAIC_COLORMAPED = -2147217375
    E_RASTER_CANT_LOAD_FORMAT_DLL = -2147217374
    E_RASTER_CANT_FIND_FORMAT_FUNCTION = -2147217373
    E_RASTER_FAILED_TO_REGISTER_FORMAT = -2147217372
    E_RASTER_INVALID_CELLSIZE = -2147217371
    E_RASTER_OPERATION_CANCELED = -2147217370
    E_RASTER_FAILED_TO_WRITE_AUX = -2147217369
    E_RASTER_UNKNOWN_PIXELTYPE = -2147217368
    E_RASTER_NO_WRITE_PERMISSION = -2147217367
    E_RASTER_VAT_COUNT_TOO_LARGE = -2147217366
    E_RASTER_BLOCKSIZE_TOO_LARGE = -2147217365
    E_RASTER_TOO_MANY_DIRECTORIES = -2147217364
    E_RASTER_COLORCORRECTION_NOT_LICENSED = -2147217363
    E_RASTER_MOSAIC_NOT_LICENSED = -2147217362
    E_RASTER_IN_LOAD_ONLY = -2147217361
    E_ESIRGRID_FAILED_TOO_LONG = -2147217360
    E_INVALID_RASTER_COMMAND = -2147217359
    E_MISSING_RASTER = -2147217358
    E_FAILED_TO_OPEN_RASTER_ITEM = -2147217357
    E_RASTER_UNKNOWN_ERROR = -2147217408

class esriGeoTransTypeEnum(Enumeration):
    __slots__ = ['esriGeoTransProjective',
                 'esriGeoTransPolyOrder0',
                 'esriGeoTransRubberSheeting',
                 'esriGeoTransSpline',
                 'esriGeoTransPolyOrder1',
                 'esriGeoTransPolyOrder2',
                 'esriGeoTransPolyOrder3',
                 'esriGeoTransPolyOrderUndefined']
    esriGeoTransProjective = -3
    esriGeoTransPolyOrder0 = -2
    esriGeoTransRubberSheeting = -1
    esriGeoTransSpline = 0
    esriGeoTransPolyOrder1 = 1
    esriGeoTransPolyOrder2 = 2
    esriGeoTransPolyOrder3 = 3
    esriGeoTransPolyOrderUndefined = 4

class esriRasterProperties(Enumeration):
    __slots__ = ['esriRasterPixelType',
                 'esriRasterNoData',
                 'esriRasterDimension',
                 'esriRasterResamplingType',
                 'esriRasterBandID']
    esriRasterPixelType = 1
    esriRasterNoData = 2
    esriRasterDimension = 4
    esriRasterResamplingType = 8
    esriRasterBandID = 16

class esriCellsizeType(Enumeration):
    __slots__ = ['esriCellsizeFirstOf',
                 'esriCellsizeMinOf',
                 'esriCellsizeMaxOf',
                 'esriCellsizeMeanOf',
                 'esriCellsizeLastOf']
    esriCellsizeFirstOf = 0
    esriCellsizeMinOf = 1
    esriCellsizeMaxOf = 2
    esriCellsizeMeanOf = 3
    esriCellsizeLastOf = 4

class esriExtentType(Enumeration):
    __slots__ = ['esriExtentFirstOf',
                 'esriExtentIntersectionOf',
                 'esriExtentUnionOf',
                 'esriExtentLastOf']
    esriExtentFirstOf = 0
    esriExtentIntersectionOf = 1
    esriExtentUnionOf = 2
    esriExtentLastOf = 3

class rstMosaicOperatorType(Enumeration):
    __slots__ = ['MT_FIRST',
                 'MT_LAST',
                 'MT_MIN',
                 'MT_MAX',
                 'MT_MEAN',
                 'MT_BLEND',
                 'MT_SUM',
                 'MT_CUSTOM']
    MT_FIRST = 1
    MT_LAST = 2
    MT_MIN = 3
    MT_MAX = 4
    MT_MEAN = 5
    MT_BLEND = 6
    MT_SUM = 7
    MT_CUSTOM = 64

class rstMosaicColormapMode(Enumeration):
    __slots__ = ['MM_REJECT',
                 'MM_FIRST',
                 'MM_LAST',
                 'MM_MATCH']
    MM_REJECT = 0
    MM_FIRST = 1
    MM_LAST = 2
    MM_MATCH = 3

class esriRasterColorInterpretation(Enumeration):
    __slots__ = ['esriRasterCIUnknown',
                 'esriRasterCIGrayIndex',
                 'esriRasterCIPaletteIndex',
                 'esriRasterCIRedBand',
                 'esriRasterCIGreenBand',
                 'esriRasterCIBlueBand',
                 'esriRasterCIAlphaBand',
                 'esriRasterCIHueBand',
                 'esriRasterCISaturationBand',
                 'esriRasterCILightnessBand',
                 'esriRasterCICyanBand',
                 'esriRasterCIMagentaBand',
                 'esriRasterCIYellowBand',
                 'esriRasterCIBlackBand',
                 'esriRasterCIYCbCrYBand',
                 'esriRasterCIYCbCrCbBand',
                 'esriRasterCIYCbCrCrBand',
                 'esriRasterCIRGB32',
                 'esriRasterCISAI32']
    esriRasterCIUnknown = 0
    esriRasterCIGrayIndex = 1
    esriRasterCIPaletteIndex = 2
    esriRasterCIRedBand = 3
    esriRasterCIGreenBand = 4
    esriRasterCIBlueBand = 5
    esriRasterCIAlphaBand = 6
    esriRasterCIHueBand = 7
    esriRasterCISaturationBand = 8
    esriRasterCILightnessBand = 9
    esriRasterCICyanBand = 10
    esriRasterCIMagentaBand = 11
    esriRasterCIYellowBand = 12
    esriRasterCIBlackBand = 13
    esriRasterCIYCbCrYBand = 14
    esriRasterCIYCbCrCbBand = 15
    esriRasterCIYCbCrCrBand = 16
    esriRasterCIRGB32 = 32
    esriRasterCISAI32 = 33

class esriNoDataInterpretation(Enumeration):
    __slots__ = ['esriNoDataMatchAny',
                 'esriNoDataMatchAll']
    esriNoDataMatchAny = 0
    esriNoDataMatchAll = 1

class esriBlendType(Enumeration):
    __slots__ = ['esriBlendTypeBoth',
                 'esriBlendTypeInside',
                 'esriBlendTypeOutside']
    esriBlendTypeBoth = 1
    esriBlendTypeInside = 2
    esriBlendTypeOutside = 3

class esriBlendWidthUnits(Enumeration):
    __slots__ = ['esriBlendWidthUnitsPixels',
                 'esriBlendWidthUnitsGroundUnits']
    esriBlendWidthUnitsPixels = 1
    esriBlendWidthUnitsGroundUnits = 2

class esriGeometrySimplificationMethod(Enumeration):
    __slots__ = ['esriGeometrySimplificationMethodNone',
                 'esriGeometrySimplificationMethodConvexHull',
                 'esriGeometrySimplificationMethodEnvelope']
    esriGeometrySimplificationMethodNone = 0
    esriGeometrySimplificationMethodConvexHull = 1
    esriGeometrySimplificationMethodEnvelope = 2

class esriTileState(Enumeration):
    __slots__ = ['esriTileStateRegular',
                 'esriTileStateResampledOnNoData',
                 'esriTileStateResampledOnFailure']
    esriTileStateRegular = 0
    esriTileStateResampledOnNoData = 1
    esriTileStateResampledOnFailure = 2

class esriRasterPrjMethodTypeEnum(Enumeration):
    __slots__ = ['esriRasterPrjMethodGlobal',
                 'esriRasteraPrjMethodPieceWise1',
                 'esriRasterPrjMethodPieceWise2',
                 'esriRasterPrjMethodFull',
                 'esriRasterPrjMethodUserDefinedBlkSize']
    esriRasterPrjMethodGlobal = 0
    esriRasteraPrjMethodPieceWise1 = 1
    esriRasterPrjMethodPieceWise2 = 2
    esriRasterPrjMethodFull = 3
    esriRasterPrjMethodUserDefinedBlkSize = 4

class esriRasterLoaderError(Enumeration):
    __slots__ = ['E_RASTERLOADER_FAILED_TO_LOAD',
                 'E_RASTERLOADER_UNKNOWN_ERROR']
    E_RASTERLOADER_FAILED_TO_LOAD = -2147217407
    E_RASTERLOADER_UNKNOWN_ERROR = -2147217408

class esriRasterSdePyramidOptEnum(Enumeration):
    __slots__ = ['esriRasterSdePyramidDonotBuild',
                 'esriRasterSdePyramidBuildSkipFirstLevel',
                 'esriRasterSdePyramidBuildWithFirstLevel']
    esriRasterSdePyramidDonotBuild = 0
    esriRasterSdePyramidBuildSkipFirstLevel = 1
    esriRasterSdePyramidBuildWithFirstLevel = 2

class esriSpeckleFilterType(Enumeration):
    __slots__ = ['esriSpeckleFilterLee',
                 'esriSpeckleFilterEnhancedLee',
                 'esriSpeckleFilterFrost',
                 'esriSpeckleFilterKuan']
    esriSpeckleFilterLee = 0
    esriSpeckleFilterEnhancedLee = 1
    esriSpeckleFilterFrost = 2
    esriSpeckleFilterKuan = 3

class esriSpeckleFilterKernel(Enumeration):
    __slots__ = ['esriSpeckleFilterKernel3x3',
                 'esriSpeckleFilterKernel5x5',
                 'esriSpeckleFilterKernel7x7',
                 'esriSpeckleFilterKernel9x9',
                 'esriSpeckleFilterKernel11x11']
    esriSpeckleFilterKernel3x3 = 0
    esriSpeckleFilterKernel5x5 = 1
    esriSpeckleFilterKernel7x7 = 2
    esriSpeckleFilterKernel9x9 = 3
    esriSpeckleFilterKernel11x11 = 4

class esriSpeckleNoiseModel(Enumeration):
    __slots__ = ['esriSpeckleNoiseMultiplicative',
                 'esriSpeckleNoiseAdditive',
                 'esriSpeckleNoiseBoth']
    esriSpeckleNoiseMultiplicative = 0
    esriSpeckleNoiseAdditive = 1
    esriSpeckleNoiseBoth = 2

class esriRasterFilterTypeEnum(Enumeration):
    __slots__ = ['esriRasterFilterUserDefined',
                 'esriRasterFilterLineDetectionHorizontal',
                 'esriRasterFilterLineDetectionVertical',
                 'esriRasterFilterLineDetectionLeftDiagonal',
                 'esriRasterFilterLineDetectionRightDiagonal',
                 'esriRasterFilterGradientNorth',
                 'esriRasterFilterGradientWest',
                 'esriRasterFilterGradientEast',
                 'esriRasterFilterGradientSouth',
                 'esriRasterFilterGradientNorthEast',
                 'esriRasterFilterGradientNorthWest',
                 'esriRasterFilterSmoothArithmeticMean',
                 'esriRasterFilterSmoothing3x3',
                 'esriRasterFilterSmoothing5x5',
                 'esriRasterFilterSharpening3x3',
                 'esriRasterFilterSharpening5x5',
                 'esriRasterFilterLaplacian3x3',
                 'esriRasterFilterLaplacian5x5',
                 'esriRasterFilterSobelHorizontal',
                 'esriRasterFilterSobelVertical',
                 'esriRasterFilterSharpen',
                 'esriRasterFilterSharpen2',
                 'esriRasterFilterPointSpread',
                 'esriRasterFilterNone']
    esriRasterFilterUserDefined = -1
    esriRasterFilterLineDetectionHorizontal = 0
    esriRasterFilterLineDetectionVertical = 1
    esriRasterFilterLineDetectionLeftDiagonal = 2
    esriRasterFilterLineDetectionRightDiagonal = 3
    esriRasterFilterGradientNorth = 4
    esriRasterFilterGradientWest = 5
    esriRasterFilterGradientEast = 6
    esriRasterFilterGradientSouth = 7
    esriRasterFilterGradientNorthEast = 8
    esriRasterFilterGradientNorthWest = 9
    esriRasterFilterSmoothArithmeticMean = 10
    esriRasterFilterSmoothing3x3 = 11
    esriRasterFilterSmoothing5x5 = 12
    esriRasterFilterSharpening3x3 = 13
    esriRasterFilterSharpening5x5 = 14
    esriRasterFilterLaplacian3x3 = 15
    esriRasterFilterLaplacian5x5 = 16
    esriRasterFilterSobelHorizontal = 17
    esriRasterFilterSobelVertical = 18
    esriRasterFilterSharpen = 19
    esriRasterFilterSharpen2 = 20
    esriRasterFilterPointSpread = 21
    esriRasterFilterNone = 255

class esriPansharpeningType(Enumeration):
    __slots__ = ['esriPansharpeningIHS',
                 'esriPansharpeningBrovey',
                 'esriPansharpeningESRI',
                 'esriPansharpeningMean',
                 'esriPansharpeningGramSchmidt']
    esriPansharpeningIHS = 0
    esriPansharpeningBrovey = 1
    esriPansharpeningESRI = 2
    esriPansharpeningMean = 3
    esriPansharpeningGramSchmidt = 4

class esriFocalStatisticType(Enumeration):
    __slots__ = ['esriFocalStatisticMin',
                 'esriFocalStatisticMax',
                 'esriFocalStatisticMean',
                 'esriFocalStatisticStandardDeviation']
    esriFocalStatisticMin = 1
    esriFocalStatisticMax = 2
    esriFocalStatisticMean = 3
    esriFocalStatisticStandardDeviation = 4

class esriRasterClippingType(Enumeration):
    __slots__ = ['esriRasterClippingOutside',
                 'esriRasterClippingInside']
    esriRasterClippingOutside = 1
    esriRasterClippingInside = 2

class esriRasterKonradyType(Enumeration):
    __slots__ = ['esriRasterKonradyESRI',
                 'esriRasterKonradyUSGS']
    esriRasterKonradyESRI = 1
    esriRasterKonradyUSGS = 2

class esriGeodataXformApplyMethod(Enumeration):
    __slots__ = ['esriGeodataXformApplyAppend',
                 'esriGeodataXformApplyReplace',
                 'esriGeodataXformApplyOverwrite']
    esriGeodataXformApplyAppend = 0
    esriGeodataXformApplyReplace = 1
    esriGeodataXformApplyOverwrite = 2

class esriRasterFunctionErrors(Enumeration):
    __slots__ = ['E_FUNCTION_MISSING_BAND',
                 'E_FUNCTION_MISSING_BAND_WAVELENGTH_PROPERTIES',
                 'E_FUNCTION_MATCHING_BAND_WAVELENGTH_NOT_FOUND',
                 'E_FUNCTION_MISSING_BAND_IDS',
                 'E_FUNCTION_NBANDS_MISMATCH',
                 'E_FUNCTION_RASTERSIZE_EXCEEDS_LIMIT',
                 'E_FUNCTION_CANNOT_CREATE_CACHE_DIR',
                 'E_FUNCTION_MISSING_SPATIALREFERENCE']
    E_FUNCTION_MISSING_BAND = -2147209215
    E_FUNCTION_MISSING_BAND_WAVELENGTH_PROPERTIES = -2147209214
    E_FUNCTION_MATCHING_BAND_WAVELENGTH_NOT_FOUND = -2147209213
    E_FUNCTION_MISSING_BAND_IDS = -2147209212
    E_FUNCTION_NBANDS_MISMATCH = -2147209211
    E_FUNCTION_RASTERSIZE_EXCEEDS_LIMIT = -2147209210
    E_FUNCTION_CANNOT_CREATE_CACHE_DIR = -2147209209
    E_FUNCTION_MISSING_SPATIALREFERENCE = -2147209208

class esriRasterStretchType(Enumeration):
    __slots__ = ['esriRasterStretchNone',
                 'esriRasterStretchStandardDeviation',
                 'esriRasterStretchHistogramEqualization',
                 'esriRasterStretchMinimumMaximum',
                 'esriRasterStretchPercentMinimumMaximum',
                 'esriRasterStretchGaussian',
                 'esriRasterStretchHistogramSpecification']
    esriRasterStretchNone = 0
    esriRasterStretchStandardDeviation = 3
    esriRasterStretchHistogramEqualization = 4
    esriRasterStretchMinimumMaximum = 5
    esriRasterStretchPercentMinimumMaximum = 6
    esriRasterStretchGaussian = 7
    esriRasterStretchHistogramSpecification = 8

class esriSlopeType(Enumeration):
    __slots__ = ['esriSlopeDegree',
                 'esriSlopePercentRise',
                 'esriSlopeScaled']
    esriSlopeDegree = 1
    esriSlopePercentRise = 2
    esriSlopeScaled = 3

class esriRadarCalibration(Enumeration):
    __slots__ = ['esriRadarCalibrationBeta',
                 'esriRadarCalibrationSigma',
                 'esriRadarCalibrationGamma',
                 'esriRadarCalibrationNone']
    esriRadarCalibrationBeta = 0
    esriRadarCalibrationSigma = 1
    esriRadarCalibrationGamma = 2
    esriRadarCalibrationNone = 3

class esriRasterArithmeticOperation(Enumeration):
    __slots__ = ['esriRasterPlus',
                 'esriRasterMinus',
                 'esriRasterMultiply',
                 'esriRasterDivide',
                 'esriRasterPower',
                 'esriRasterMode']
    esriRasterPlus = 1
    esriRasterMinus = 2
    esriRasterMultiply = 3
    esriRasterDivide = 4
    esriRasterPower = 5
    esriRasterMode = 6

class esriMosaicMethod(Enumeration):
    __slots__ = ['esriMosaicNone',
                 'esriMosaicCenter',
                 'esriMosaicNadir',
                 'esriMosaicViewpoint',
                 'esriMosaicAttribute',
                 'esriMosaicLockRaster',
                 'esriMosaicNorthwest',
                 'esriMosaicSeamline']
    esriMosaicNone = 0
    esriMosaicCenter = 1
    esriMosaicNadir = 2
    esriMosaicViewpoint = 3
    esriMosaicAttribute = 4
    esriMosaicLockRaster = 5
    esriMosaicNorthwest = 6
    esriMosaicSeamline = 7

class esriColorspaceConversionType(Enumeration):
    __slots__ = ['esriColorspaceConversionRGBToHSV',
                 'esriColorspaceConversionHSVToRGB']
    esriColorspaceConversionRGBToHSV = 0
    esriColorspaceConversionHSVToRGB = 1

class esriRasterBandArithmeticMethod(Enumeration):
    __slots__ = ['esriBandArithmeticUserDefined',
                 'esriBandArithmeticNDVI',
                 'esriBandArithmeticSAVI',
                 'esriBandArithmeticTSAVI',
                 'esriBandArithmeticMSAVI',
                 'esriBandArithmeticGEMI',
                 'esriBandArithmeticPVI',
                 'esriBandArithmeticGVITM',
                 'esriBandArithmeticSultan']
    esriBandArithmeticUserDefined = 0
    esriBandArithmeticNDVI = 1
    esriBandArithmeticSAVI = 2
    esriBandArithmeticTSAVI = 3
    esriBandArithmeticMSAVI = 4
    esriBandArithmeticGEMI = 5
    esriBandArithmeticPVI = 6
    esriBandArithmeticGVITM = 7
    esriBandArithmeticSultan = 8

class esriMissingBandAction(Enumeration):
    __slots__ = ['esriMissingBandActionFindBestMatch',
                 'esriMissingBandActionFail']
    esriMissingBandActionFindBestMatch = 0
    esriMissingBandActionFail = 1

class esriCachedRasterCompressionType(Enumeration):
    __slots__ = ['esriCachedRasterCompressionNone',
                 'esriCachedRasterCompressionLossless',
                 'esriCachedRasterCompressionLossy']
    esriCachedRasterCompressionNone = 0
    esriCachedRasterCompressionLossless = 1
    esriCachedRasterCompressionLossy = 2

class esriFunctionRasterDatasetProperty(Enumeration):
    __slots__ = ['esriFunctionRasterDatasetPropertyGeodataXform',
                 'esriFunctionRasterDatasetPropertyStatistics',
                 'esriFunctionRasterDatasetPropertyHistograms']
    esriFunctionRasterDatasetPropertyGeodataXform = 1
    esriFunctionRasterDatasetPropertyStatistics = 2
    esriFunctionRasterDatasetPropertyHistograms = 4

class esriRequestSizeType(Enumeration):
    __slots__ = ['esriRequestSizeTypePixels',
                 'esriRequestSizeTypePixelSizeFactor',
                 'esriRequestSizeTypePixelSize']
    esriRequestSizeTypePixels = 1
    esriRequestSizeTypePixelSizeFactor = 2
    esriRequestSizeTypePixelSize = 3

class esriRasterPaintMethod(Enumeration):
    __slots__ = ['esriRasterPaintConstantColor',
                 'esriRasterPaintCheckerboard']
    esriRasterPaintConstantColor = 0
    esriRasterPaintCheckerboard = 1

class esriRasterRemoveHazeMethod(Enumeration):
    __slots__ = ['esriRasterRemoveHazeDarkPixel',
                 'esriRasterRemoveHazeDarkPixelSlide',
                 'esriRasterRemoveHazeDarkChannelPrior',
                 'esriRasterRemoveHazeHOT']
    esriRasterRemoveHazeDarkPixel = 0
    esriRasterRemoveHazeDarkPixelSlide = 1
    esriRasterRemoveHazeDarkChannelPrior = 2
    esriRasterRemoveHazeHOT = 3

class esriRaster3DToRasterFunctionErrors(Enumeration):
    __slots__ = ['E_3D_TO_RASTER_FUNCTIONS__MISSING_SPATIAL_REFERENCE',
                 'E_3D_TO_RASTER_FUNCTIONS__MISSING_3DANALYST_LICENSE',
                 'E_3D_TO_RASTER_FUNCTIONS__DIFFERENT_SPATIAL_REFERENCES',
                 'E_3D_TO_RASTER_FUNCTIONS__CELL_SIZE_TOO_SMALL_FOR_CACHING',
                 'E_3D_TO_RASTER_FUNCTIONS__SPATIAL_REFERENCE_IN_WKT_FORMAT_DETECTED']
    E_3D_TO_RASTER_FUNCTIONS__MISSING_SPATIAL_REFERENCE = -2147205119
    E_3D_TO_RASTER_FUNCTIONS__MISSING_3DANALYST_LICENSE = -2147205118
    E_3D_TO_RASTER_FUNCTIONS__DIFFERENT_SPATIAL_REFERENCES = -2147205117
    E_3D_TO_RASTER_FUNCTIONS__CELL_SIZE_TOO_SMALL_FOR_CACHING = -2147205116
    E_3D_TO_RASTER_FUNCTIONS__SPATIAL_REFERENCE_IN_WKT_FORMAT_DETECTED = -2147205115

class esriRasterLasReturnType(Enumeration):
    __slots__ = ['esriRasterLasReturnAny',
                 'esriRasterLasReturnFirst',
                 'esriRasterLasReturnSecond',
                 'esriRasterLasReturnThird',
                 'esriRasterLasReturnFourth',
                 'esriRasterLasReturnFifth',
                 'esriRasterLasReturnSixth',
                 'esriRasterLasReturnSeventh',
                 'esriRasterLasReturnEighth',
                 'esriRasterLasReturnNinth',
                 'esriRasterLasReturnTenth',
                 'esriRasterLasReturnEleventh',
                 'esriRasterLasReturnTwelfth',
                 'esriRasterLasReturnThirteenth',
                 'esriRasterLasReturnFourteenth',
                 'esriRasterLasReturnFifteenth',
                 'esriRasterLasReturnLast']
    esriRasterLasReturnAny = -1
    esriRasterLasReturnFirst = 1
    esriRasterLasReturnSecond = 2
    esriRasterLasReturnThird = 3
    esriRasterLasReturnFourth = 4
    esriRasterLasReturnFifth = 5
    esriRasterLasReturnSixth = 6
    esriRasterLasReturnSeventh = 7
    esriRasterLasReturnEighth = 8
    esriRasterLasReturnNinth = 9
    esriRasterLasReturnTenth = 10
    esriRasterLasReturnEleventh = 11
    esriRasterLasReturnTwelfth = 12
    esriRasterLasReturnThirteenth = 13
    esriRasterLasReturnFourteenth = 14
    esriRasterLasReturnFifteenth = 15
    esriRasterLasReturnLast = 256

class esriRasterLasClassType(Enumeration):
    __slots__ = ['esriRasterLasClassAny',
                 'esriRasterLasClassNeverClassified',
                 'esriRasterLasClassUnclassified',
                 'esriRasterLasClassGround',
                 'esriRasterLasClassLowVegetation',
                 'esriRasterLasClassMediumVegetation',
                 'esriRasterLasClassHighVegetation',
                 'esriRasterLasClassBuilding',
                 'esriRasterLasClassNoisyLowPoint',
                 'esriRasterLasClassModelKeyPoint',
                 'esriRasterLasClassWater',
                 'esriRasterLasClassRail',
                 'esriRasterLasClassRoadSurface',
                 'esriRasterLasClassReserved_12',
                 'esriRasterLasClassWireGuard',
                 'esriRasterLasClassWireConductor',
                 'esriRasterLasClassTransmissionTower',
                 'esriRasterLasClassWireStructureConnector',
                 'esriRasterLasClassBridgeDeck',
                 'esriRasterLasClassHighNoise']
    esriRasterLasClassAny = -1
    esriRasterLasClassNeverClassified = 0
    esriRasterLasClassUnclassified = 1
    esriRasterLasClassGround = 2
    esriRasterLasClassLowVegetation = 3
    esriRasterLasClassMediumVegetation = 4
    esriRasterLasClassHighVegetation = 5
    esriRasterLasClassBuilding = 6
    esriRasterLasClassNoisyLowPoint = 7
    esriRasterLasClassModelKeyPoint = 8
    esriRasterLasClassWater = 9
    esriRasterLasClassRail = 10
    esriRasterLasClassRoadSurface = 11
    esriRasterLasClassReserved_12 = 12
    esriRasterLasClassWireGuard = 13
    esriRasterLasClassWireConductor = 14
    esriRasterLasClassTransmissionTower = 15
    esriRasterLasClassWireStructureConnector = 16
    esriRasterLasClassBridgeDeck = 17
    esriRasterLasClassHighNoise = 18

class esriRasterLasCellAggregationType(Enumeration):
    __slots__ = ['esriRasterLasCellMin',
                 'esriRasterLasCellMax',
                 'esriRasterLasCellSum',
                 'esriRasterLasCellMean',
                 'esriRasterLasCellMeanDistanceWeighted']
    esriRasterLasCellMin = 0
    esriRasterLasCellMax = 1
    esriRasterLasCellSum = 2
    esriRasterLasCellMean = 3
    esriRasterLasCellMeanDistanceWeighted = 4

class esriRasterLasDataType(Enumeration):
    __slots__ = ['esriRasterLasDataZ',
                 'esriRasterLasDataI']
    esriRasterLasDataZ = 0
    esriRasterLasDataI = 1

class esriRasterLasVoidFillMethod(Enumeration):
    __slots__ = ['esriRasterLasVoidFillNone',
                 'esriRasterLasVoidFillSimple',
                 'esriRasterLasVoidFillPlaneIDW',
                 'esriRasterLasVoidFillTinLinear',
                 'esriRasterLasVoidFillTinNaturalNeighbor']
    esriRasterLasVoidFillNone = 0
    esriRasterLasVoidFillSimple = 1
    esriRasterLasVoidFillPlaneIDW = 2
    esriRasterLasVoidFillTinLinear = 3
    esriRasterLasVoidFillTinNaturalNeighbor = 4

class esriRasterCatalogType(Enumeration):
    __slots__ = ['esriRasterCatalogTypeRegular',
                 'esriRasterCatalogTypeMilitaryAnalyst',
                 'esriRasterCatalogTypeImageService']
    esriRasterCatalogTypeRegular = 0
    esriRasterCatalogTypeMilitaryAnalyst = 1
    esriRasterCatalogTypeImageService = 2

class esriCrawlerDataSourceType(Enumeration):
    __slots__ = ['esriCrawlerDataSourceTypeUnknown',
                 'esriCrawlerDataSourceTypeFile',
                 'esriCrawlerDataSourceTypeFolder',
                 'esriCrawlerDataSourceTypeString',
                 'esriCrawlerDataSourceTypeOverviewItem',
                 'esriCrawlerDataSourceTypeRow',
                 'esriCrawlerDataSourceTypeCatalogItem',
                 'esriCrawlerDataSourceTypeDatasetName',
                 'esriCrawlerDataSourceTypeRasterDataset',
                 'esriCrawlerDataSourceTypeImageService',
                 'esriCrawlerDataSourceTypeTerrain',
                 'esriCrawlerDataSourceTypeLasDataset',
                 'esriCrawlerDataSourceTypeSearchItem',
                 'esriCrawlerDataSourceTypeCustom']
    esriCrawlerDataSourceTypeUnknown = 0
    esriCrawlerDataSourceTypeFile = 1
    esriCrawlerDataSourceTypeFolder = 2
    esriCrawlerDataSourceTypeString = 4
    esriCrawlerDataSourceTypeOverviewItem = 8
    esriCrawlerDataSourceTypeRow = 16
    esriCrawlerDataSourceTypeCatalogItem = 32
    esriCrawlerDataSourceTypeDatasetName = 64
    esriCrawlerDataSourceTypeRasterDataset = 128
    esriCrawlerDataSourceTypeImageService = 256
    esriCrawlerDataSourceTypeTerrain = 512
    esriCrawlerDataSourceTypeLasDataset = 1024
    esriCrawlerDataSourceTypeSearchItem = 2048
    esriCrawlerDataSourceTypeCustom = 32768

class esriRasterCatalogItemCategory(Enumeration):
    __slots__ = ['esriRasterCatalogItemCategoryUnknown',
                 'esriRasterCatalogItemCategoryPrimary',
                 'esriRasterCatalogItemCategoryOverview',
                 'esriRasterCatalogItemCategoryUnprocessedOverview',
                 'esriRasterCatalogItemCategoryPartialOverview',
                 'esriRasterCatalogItemCategoryUploaded',
                 'esriRasterCatalogItemCategoryIncomplete',
                 'esriesriRasterCatalogItemCategoryCustom']
    esriRasterCatalogItemCategoryUnknown = 0
    esriRasterCatalogItemCategoryPrimary = 1
    esriRasterCatalogItemCategoryOverview = 2
    esriRasterCatalogItemCategoryUnprocessedOverview = 3
    esriRasterCatalogItemCategoryPartialOverview = 4
    esriRasterCatalogItemCategoryUploaded = 253
    esriRasterCatalogItemCategoryIncomplete = 254
    esriesriRasterCatalogItemCategoryCustom = 255

class esriDuplicateItemsAction(Enumeration):
    __slots__ = ['esriDuplicateItemsAllow',
                 'esriDuplicateItemsExclude',
                 'esriDuplicateItemsOverwrite']
    esriDuplicateItemsAllow = 1
    esriDuplicateItemsExclude = 2
    esriDuplicateItemsOverwrite = 3

class esriMosaicDatasetErrors(Enumeration):
    __slots__ = ['E_MOSAIC_ABORT',
                 'E_MOSAIC_CANNOT_ADD_DATASET',
                 'E_MOSAIC_CANNOT_COMPUTE_LOW_HIGH_CELL',
                 'E_MOSAIC_CANNOT_FILTERGEOMETRY',
                 'E_MOSAIC_CANNOT_GET_CATALOG_FIELDS',
                 'E_MOSAIC_CANNOT_GET_CATALOG_SRS',
                 'E_MOSAIC_CANNOT_GET_RASTER_DEF',
                 'E_MOSAIC_CANNOT_GET_RASTER_SRS',
                 'E_MOSAIC_CANNOT_GET_UNION',
                 'E_MOSAIC_CANNOT_UPDATE_RASTER_VALUE',
                 'E_MOSAIC_CANNOT_WEED',
                 'E_MOSAIC_COMPUTE_FOOTPRINT_FAILED',
                 'E_MOSAIC_CREATE_AUX_FIELDS',
                 'E_MOSAIC_CREATE_INSERT_CURSOR',
                 'E_MOSAIC_CREATE_ROW_BUFFER',
                 'E_MOSAIC_INSERT_ROW',
                 'E_MOSAIC_INVALID_RPDEF',
                 'E_MOSAIC_MISSING_DATASET_FOOTPRINT',
                 'E_MOSAIC_MISSING_ITEM_DATA_SOURCE',
                 'E_MOSAIC_MISSING_LINK_TO_VALID_RASTER_CATALOG',
                 'E_MOSAIC_MISSING_MOSAIC_FUNCTION',
                 'E_MOSAIC_NOTHING_SELECTED',
                 'E_MOSAIC_PREPARE_CANNOT_UPDATE_REFERENCED_DATASET',
                 'E_MOSAIC_ADD_CANNOT_BUILD_ITEM',
                 'E_MOSAIC_SYNC_CANNOT_BUILD_ITEM',
                 'E_MOSAIC_SYNC_CANNOT_UPDATE_ROW',
                 'E_MOSAIC_UNION_EMPTY',
                 'E_MOSAIC_NO_SHAPE_FIELD',
                 'E_MOSAIC_BAD_DATASET_ENVELOPE',
                 'E_MOSAIC_NO_ITEMS_SELECTED',
                 'E_MOSAIC_UNKNOWN_SRS',
                 'E_MOSAIC_NO_BOUNDARY_FEATURE_CLASS',
                 'E_MOSAIC_CANNOT_GENERATE_OVERVIEW_IMAGE',
                 'E_MOSAIC_MISSING_RASTERFIELD_FROM_TABLE',
                 'E_MOSAIC_DEFINE_NODATA_FAILED',
                 'E_MOSAIC_SYNC_CANNOT_UPDATE_CATALOG',
                 'E_MOSAIC_INVALID_OVERVIEW_WORKSPACE',
                 'E_MOSAIC_INVALID_CSV_FILE',
                 'E_MOSAIC_CANNOT_CREATE',
                 'E_MOSAIC_INVALID_FILE',
                 'E_MOSAIC_UPDATE_ROW',
                 'E_MOSAIC_CANNOT_BUILD_ISDEF_ITEM',
                 'E_MOSAIC_CANNOT_CONVERT_RASTER_PROCESS',
                 'E_MOSAIC_UNPROCESSED_OVERVIEWS_FOUND',
                 'E_MOSAIC_TOO_MANY_ITEMS_SELECTED',
                 'E_MOSAIC_CANNOT_UPDATE_ITEM_SEAMLINE',
                 'E_MOSAIC_IN_LOAD_ONLY',
                 'E_MOSAIC_NO_FRAMES',
                 'E_MOSAIC_NO_IMAGEFOLDER',
                 'E_MOSAIC_NO_FOCALLENGTH',
                 'E_MOSAIC_NO_COLUMNS',
                 'E_MOSAIC_NO_ROWS',
                 'E_MOSAIC_NO_PIXELSIZE',
                 'E_MOSAIC_NO_AVERAGEZ',
                 'E_MOSAIC_CAMFILE_NOTEXISTS',
                 'E_MOSAIC_NO_CAMINFO',
                 'E_MOSAIC_NO_CAMFILE',
                 'E_MOSAIC_NO_PHFILE',
                 'E_MOSAIC_PHFILE_NOTEXISTS',
                 'E_MOSAIC_CANNOT_EDIT_REFERENCED_DATASET',
                 'E_MOSAIC_RPDEF_INVALID_RASTER_ID',
                 'E_MOSAIC_CANNOT_RECOMMEND_CRAWLER',
                 'E_MOSAIC_FAILED_TO_OPEN_DATASET',
                 'E_MOSAIC_CANNOT_PREPARE_SCHEMA',
                 'E_MOSAIC_VALIDATION_FAILED',
                 'E_MOSAIC_VALIDATION_LIDAR_CELLSIZE',
                 'E_MOSAIC_RASTER_TYPE_NON_PERSISTENT',
                 'E_MOSAIC_CANT_DISABLE_SINDEX',
                 'E_MOSAIC_DATASET_MISSING_BAND_KEY_PROPERTIES',
                 'E_MOSAIC_UNRECOGNIZED_SENSOR_NAME',
                 'E_MOSAIC_VALIDATION_TERRAIN_CELLSIZE',
                 'E_MOSAIC_INVALID_FOOTPRINT_GEOMETRY',
                 'E_MOSAIC_CANNOT_OPEN_OVERVIEW_STORAGE',
                 'E_MOSAIC_TABLE_CRAWLER_MISSING_TABLE',
                 'E_MOSAIC_SYNC_FAILED_FOR_CURRENT_RASTER_TYPE',
                 'E_MOSAIC_VALIDATION_LASDATASET_CELLSIZE',
                 'E_MOSAIC_BOUNDARY_OUTSIDE_HORIZON',
                 'E_MOSAIC_FOOTPRINT_OUTSIDE_HORIZON',
                 'E_MOSAIC_INCOMPATIBLE_VERSION',
                 'E_MOSAIC_NOT_OWNER',
                 'E_MOSAIC_MISSING_DATASET_SR',
                 'E_MOSAIC_MISSING_FOOTPRINT_SR',
                 'E_MOSAIC_CAN_BUILD_MISSING_IN_SENSOR_TYPE',
                 'E_MOSAIC_NO_ITEMS_TO_SPLIT',
                 'E_MOSAIC_CANNOT_PROJECT_TO_MD_SR',
                 'E_MOSAIC_CANNOT_GROUP_ITEMS_FOR_MERGING',
                 'E_MOSAIC_CANNOT_REFRESH_CACHE',
                 'E_MOSAIC_CANNOT_UPDATE_ITEM_COLOR_CORRECTION',
                 'E_MOSAIC_CANNOT_SYNC_MERGED_ITEM',
                 'E_MOSAIC_CANNOT_PROCESS_BUILT_ITEMS',
                 'E_MOSAIC_CANNOT_PROCESS_UPDATED_ITEMS',
                 'E_MOSAIC_INVALID_RASTER_COMMAND_RESULT',
                 'E_MOSAIC_ERRORS_BUILDING_BOUNDARY',
                 'E_MOSAIC_UNBUILDABLE_ITEMS',
                 'E_MOSAIC_NO_ITEM_ADDED',
                 'E_MOSAIC_LEVELS_CATEGORY_NOT_COMPUTED',
                 'E_MOSAIC_LEVELS_TABLE_SCHEMA_NOT_UPGRADED',
                 'E_MOSAIC_SYNC_CANNOT_SIMPLIFY_ITEM',
                 'E_MOSAIC_SYNC_CANNOT_BUILD_THUMBNAIL',
                 'E_MOSAIC_CANNOT_PROCESS_OVERVIEW_ITEM',
                 'E_MOSAIC_CANNOT_PROCESS_ANALYSIS_RESULTS',
                 'E_MOSAIC_CANNOT_CREATE_FOLDER',
                 'E_MOSAIC_INVALID_OVERVIEW_CELL_SIZE',
                 'E_MOSAIC_DISJOINT_OVERVIEW_TILE',
                 'E_MOSAIC_CANNOT_PROCESS_SEAMLINE_ITEM',
                 'E_MOSAIC_SYNC_CANNOT_VALIDATE_FOOTPRINT',
                 'E_MOSAIC_INVALID_OVERVIEW_ITEM_FIELD_VALUES',
                 'E_MOSAIC_CANNOT_PROCESS_ITEM',
                 'E_MOSAIC_RASTER_TYPE_UNSUPPORTED_PIXEL_TYPE',
                 'E_MOSAIC_RASTER_TYPE_HIGH_RADIOMETRIC_RANGE',
                 'E_MOSAIC_CANNOT_INIT_PARALLEL_PROCESSING',
                 'E_MOSAIC_INVALID_WHERE_CLAUSE',
                 'E_MOSAIC_CANNOT_PROCESS_EMPTY_SEAMLINE',
                 'E_MOSAIC_SYNC_CANNOT_UPDATE_STEREO_TABLE',
                 'E_MOSAIC_OVERVIEW_SLIVER',
                 'E_MOSAIC_LEVELS_MISSING',
                 'E_MOSAIC_NON_CACHED_MAPSERVICE',
                 'E_MOSAIC_INVALID_SEARCH_CRAWLER',
                 'E_MOSAIC_BUILDER_INIT_CRAWLER',
                 'E_MOSAIC_UNKNOWN']
    E_MOSAIC_ABORT = -2147213311
    E_MOSAIC_CANNOT_ADD_DATASET = -2147213310
    E_MOSAIC_CANNOT_COMPUTE_LOW_HIGH_CELL = -2147213309
    E_MOSAIC_CANNOT_FILTERGEOMETRY = -2147213308
    E_MOSAIC_CANNOT_GET_CATALOG_FIELDS = -2147213307
    E_MOSAIC_CANNOT_GET_CATALOG_SRS = -2147213306
    E_MOSAIC_CANNOT_GET_RASTER_DEF = -2147213305
    E_MOSAIC_CANNOT_GET_RASTER_SRS = -2147213304
    E_MOSAIC_CANNOT_GET_UNION = -2147213303
    E_MOSAIC_CANNOT_UPDATE_RASTER_VALUE = -2147213302
    E_MOSAIC_CANNOT_WEED = -2147213301
    E_MOSAIC_COMPUTE_FOOTPRINT_FAILED = -2147213300
    E_MOSAIC_CREATE_AUX_FIELDS = -2147213299
    E_MOSAIC_CREATE_INSERT_CURSOR = -2147213298
    E_MOSAIC_CREATE_ROW_BUFFER = -2147213297
    E_MOSAIC_INSERT_ROW = -2147213296
    E_MOSAIC_INVALID_RPDEF = -2147213295
    E_MOSAIC_MISSING_DATASET_FOOTPRINT = -2147213294
    E_MOSAIC_MISSING_ITEM_DATA_SOURCE = -2147213293
    E_MOSAIC_MISSING_LINK_TO_VALID_RASTER_CATALOG = -2147213292
    E_MOSAIC_MISSING_MOSAIC_FUNCTION = -2147213291
    E_MOSAIC_NOTHING_SELECTED = -2147213290
    E_MOSAIC_PREPARE_CANNOT_UPDATE_REFERENCED_DATASET = -2147213289
    E_MOSAIC_ADD_CANNOT_BUILD_ITEM = -2147213288
    E_MOSAIC_SYNC_CANNOT_BUILD_ITEM = -2147213287
    E_MOSAIC_SYNC_CANNOT_UPDATE_ROW = -2147213286
    E_MOSAIC_UNION_EMPTY = -2147213285
    E_MOSAIC_NO_SHAPE_FIELD = -2147213284
    E_MOSAIC_BAD_DATASET_ENVELOPE = -2147213283
    E_MOSAIC_NO_ITEMS_SELECTED = -2147213282
    E_MOSAIC_UNKNOWN_SRS = -2147213281
    E_MOSAIC_NO_BOUNDARY_FEATURE_CLASS = -2147213280
    E_MOSAIC_CANNOT_GENERATE_OVERVIEW_IMAGE = -2147213279
    E_MOSAIC_MISSING_RASTERFIELD_FROM_TABLE = -2147213278
    E_MOSAIC_DEFINE_NODATA_FAILED = -2147213277
    E_MOSAIC_SYNC_CANNOT_UPDATE_CATALOG = -2147213276
    E_MOSAIC_INVALID_OVERVIEW_WORKSPACE = -2147213275
    E_MOSAIC_INVALID_CSV_FILE = -2147213274
    E_MOSAIC_CANNOT_CREATE = -2147213273
    E_MOSAIC_INVALID_FILE = -2147213272
    E_MOSAIC_UPDATE_ROW = -2147213271
    E_MOSAIC_CANNOT_BUILD_ISDEF_ITEM = -2147213270
    E_MOSAIC_CANNOT_CONVERT_RASTER_PROCESS = -2147213269
    E_MOSAIC_UNPROCESSED_OVERVIEWS_FOUND = -2147213268
    E_MOSAIC_TOO_MANY_ITEMS_SELECTED = -2147213267
    E_MOSAIC_CANNOT_UPDATE_ITEM_SEAMLINE = -2147213266
    E_MOSAIC_IN_LOAD_ONLY = -2147213265
    E_MOSAIC_NO_FRAMES = -2147213264
    E_MOSAIC_NO_IMAGEFOLDER = -2147213263
    E_MOSAIC_NO_FOCALLENGTH = -2147213262
    E_MOSAIC_NO_COLUMNS = -2147213261
    E_MOSAIC_NO_ROWS = -2147213260
    E_MOSAIC_NO_PIXELSIZE = -2147213259
    E_MOSAIC_NO_AVERAGEZ = -2147213258
    E_MOSAIC_CAMFILE_NOTEXISTS = -2147213257
    E_MOSAIC_NO_CAMINFO = -2147213256
    E_MOSAIC_NO_CAMFILE = -2147213255
    E_MOSAIC_NO_PHFILE = -2147213254
    E_MOSAIC_PHFILE_NOTEXISTS = -2147213253
    E_MOSAIC_CANNOT_EDIT_REFERENCED_DATASET = -2147213252
    E_MOSAIC_RPDEF_INVALID_RASTER_ID = -2147213251
    E_MOSAIC_CANNOT_RECOMMEND_CRAWLER = -2147213250
    E_MOSAIC_FAILED_TO_OPEN_DATASET = -2147213249
    E_MOSAIC_CANNOT_PREPARE_SCHEMA = -2147213248
    E_MOSAIC_VALIDATION_FAILED = -2147213247
    E_MOSAIC_VALIDATION_LIDAR_CELLSIZE = -2147213246
    E_MOSAIC_RASTER_TYPE_NON_PERSISTENT = -2147213245
    E_MOSAIC_CANT_DISABLE_SINDEX = -2147213244
    E_MOSAIC_DATASET_MISSING_BAND_KEY_PROPERTIES = -2147213243
    E_MOSAIC_UNRECOGNIZED_SENSOR_NAME = -2147213242
    E_MOSAIC_VALIDATION_TERRAIN_CELLSIZE = -2147213241
    E_MOSAIC_INVALID_FOOTPRINT_GEOMETRY = -2147213240
    E_MOSAIC_CANNOT_OPEN_OVERVIEW_STORAGE = -2147213239
    E_MOSAIC_TABLE_CRAWLER_MISSING_TABLE = -2147213238
    E_MOSAIC_SYNC_FAILED_FOR_CURRENT_RASTER_TYPE = -2147213237
    E_MOSAIC_VALIDATION_LASDATASET_CELLSIZE = -2147213236
    E_MOSAIC_BOUNDARY_OUTSIDE_HORIZON = -2147213235
    E_MOSAIC_FOOTPRINT_OUTSIDE_HORIZON = -2147213234
    E_MOSAIC_INCOMPATIBLE_VERSION = -2147213233
    E_MOSAIC_NOT_OWNER = -2147213232
    E_MOSAIC_MISSING_DATASET_SR = -2147213231
    E_MOSAIC_MISSING_FOOTPRINT_SR = -2147213230
    E_MOSAIC_CAN_BUILD_MISSING_IN_SENSOR_TYPE = -2147213229
    E_MOSAIC_NO_ITEMS_TO_SPLIT = -2147213228
    E_MOSAIC_CANNOT_PROJECT_TO_MD_SR = -2147213227
    E_MOSAIC_CANNOT_GROUP_ITEMS_FOR_MERGING = -2147213226
    E_MOSAIC_CANNOT_REFRESH_CACHE = -2147213225
    E_MOSAIC_CANNOT_UPDATE_ITEM_COLOR_CORRECTION = -2147213224
    E_MOSAIC_CANNOT_SYNC_MERGED_ITEM = -2147213223
    E_MOSAIC_CANNOT_PROCESS_BUILT_ITEMS = -2147213222
    E_MOSAIC_CANNOT_PROCESS_UPDATED_ITEMS = -2147213221
    E_MOSAIC_INVALID_RASTER_COMMAND_RESULT = -2147213220
    E_MOSAIC_ERRORS_BUILDING_BOUNDARY = -2147213219
    E_MOSAIC_UNBUILDABLE_ITEMS = -2147213218
    E_MOSAIC_NO_ITEM_ADDED = -2147213217
    E_MOSAIC_LEVELS_CATEGORY_NOT_COMPUTED = -2147213216
    E_MOSAIC_LEVELS_TABLE_SCHEMA_NOT_UPGRADED = -2147213215
    E_MOSAIC_SYNC_CANNOT_SIMPLIFY_ITEM = -2147213214
    E_MOSAIC_SYNC_CANNOT_BUILD_THUMBNAIL = -2147213213
    E_MOSAIC_CANNOT_PROCESS_OVERVIEW_ITEM = -2147213212
    E_MOSAIC_CANNOT_PROCESS_ANALYSIS_RESULTS = -2147213211
    E_MOSAIC_CANNOT_CREATE_FOLDER = -2147213210
    E_MOSAIC_INVALID_OVERVIEW_CELL_SIZE = -2147213209
    E_MOSAIC_DISJOINT_OVERVIEW_TILE = -2147213208
    E_MOSAIC_CANNOT_PROCESS_SEAMLINE_ITEM = -2147213207
    E_MOSAIC_SYNC_CANNOT_VALIDATE_FOOTPRINT = -2147213206
    E_MOSAIC_INVALID_OVERVIEW_ITEM_FIELD_VALUES = -2147213205
    E_MOSAIC_CANNOT_PROCESS_ITEM = -2147213204
    E_MOSAIC_RASTER_TYPE_UNSUPPORTED_PIXEL_TYPE = -2147213203
    E_MOSAIC_RASTER_TYPE_HIGH_RADIOMETRIC_RANGE = -2147213202
    E_MOSAIC_CANNOT_INIT_PARALLEL_PROCESSING = -2147213201
    E_MOSAIC_INVALID_WHERE_CLAUSE = -2147213200
    E_MOSAIC_CANNOT_PROCESS_EMPTY_SEAMLINE = -2147213199
    E_MOSAIC_SYNC_CANNOT_UPDATE_STEREO_TABLE = -2147213198
    E_MOSAIC_OVERVIEW_SLIVER = -2147213197
    E_MOSAIC_LEVELS_MISSING = -2147213196
    E_MOSAIC_NON_CACHED_MAPSERVICE = -2147213195
    E_MOSAIC_INVALID_SEARCH_CRAWLER = -2147213194
    E_MOSAIC_BUILDER_INIT_CRAWLER = -2147213193
    E_MOSAIC_UNKNOWN = -2147209217

class esriFrameCameraUnits(Enumeration):
    __slots__ = ['esriFrameCameraUnitsCentimeters',
                 'esriFrameCameraUnitsDecimeters',
                 'esriFrameCameraUnitsMillimeters',
                 'esriFrameCameraUnitsMicrons']
    esriFrameCameraUnitsCentimeters = 0
    esriFrameCameraUnitsDecimeters = 1
    esriFrameCameraUnitsMillimeters = 2
    esriFrameCameraUnitsMicrons = 3

class esriRadarPolarization(Enumeration):
    __slots__ = ['esriRadarPolarizationAll',
                 'esriRadarPolarizationHH',
                 'esriRadarPolarizationVV',
                 'esriRadarPolarizationHV',
                 'esriRadarPolarizationVH',
                 'esriRadarPolarizationHH_HV',
                 'esriRadarPolarizationVV_VH',
                 'esriRadarPolarizationHH_VV_HV_VH']
    esriRadarPolarizationAll = 0
    esriRadarPolarizationHH = 1
    esriRadarPolarizationVV = 2
    esriRadarPolarizationHV = 3
    esriRadarPolarizationVH = 4
    esriRadarPolarizationHH_HV = 5
    esriRadarPolarizationVV_VH = 6
    esriRadarPolarizationHH_VV_HV_VH = 7

class esriApplanixCameraModel(Enumeration):
    __slots__ = ['esriApplanixCameraModelDSS322',
                 'esriApplanixCameraModelDSS439']
    esriApplanixCameraModelDSS322 = 0
    esriApplanixCameraModelDSS439 = 1

class esriDistortionType(Enumeration):
    __slots__ = ['esriDistortionTypeKonrady',
                 'esriDistortionTypeRadial']
    esriDistortionTypeKonrady = 0
    esriDistortionTypeRadial = 1

class esriBuildFootprintsMethods(Enumeration):
    __slots__ = ['esriBuildFootprintsByGeometry',
                 'esriBuildFootprintsByRadiometry',
                 'esriBuildFootprintsByShrinking',
                 'esriBuildFootprintsByCopyToSiblings']
    esriBuildFootprintsByGeometry = 0
    esriBuildFootprintsByRadiometry = 1
    esriBuildFootprintsByShrinking = 2
    esriBuildFootprintsByCopyToSiblings = 3

class esriImportGeometryTarget(Enumeration):
    __slots__ = ['esriImportGeometryTargetFootprint',
                 'esriImportGeometryTargetBoundary',
                 'esriImportGeometryTargetSeamline']
    esriImportGeometryTargetFootprint = 1
    esriImportGeometryTargetBoundary = 2
    esriImportGeometryTargetSeamline = 3

class esriBuildSeamlinesMethod(Enumeration):
    __slots__ = ['esriBuildSeamlinesByGeometry',
                 'esriBuildSeamlinesByRadiometry',
                 'esriBuildSeamlinesByCopyFootprint',
                 'esriBuildSeamlinesByCopyToSiblings',
                 'esriBuildSeamlinesByEdgeDetection']
    esriBuildSeamlinesByGeometry = 1
    esriBuildSeamlinesByRadiometry = 2
    esriBuildSeamlinesByCopyFootprint = 3
    esriBuildSeamlinesByCopyToSiblings = 4
    esriBuildSeamlinesByEdgeDetection = 5

class esriMosaicDatasetSideTable(Enumeration):
    __slots__ = ['esriMosaicDatasetSideTableCatalog',
                 'esriMosaicDatasetSideTableBoundary',
                 'esriMosaicDatasetSideTableRasterType',
                 'esriMosaicDatasetSideTableLevels',
                 'esriMosaicDatasetSideTableLog',
                 'esriMosaicDatasetSideTableOverview',
                 'esriMosaicDatasetSideTableSeamline',
                 'esriMosaicDatasetSideTableDodging',
                 'esriMosaicDatasetSideTableStereo',
                 'esriMosaicDatasetSideTableAnalysis',
                 'esriMosaicDatasetSideTableStatus',
                 'esriMosaicDatasetSideTableView',
                 'esriMosaicDatasetSideTableCache']
    esriMosaicDatasetSideTableCatalog = 1
    esriMosaicDatasetSideTableBoundary = 2
    esriMosaicDatasetSideTableRasterType = 4
    esriMosaicDatasetSideTableLevels = 8
    esriMosaicDatasetSideTableLog = 16
    esriMosaicDatasetSideTableOverview = 32
    esriMosaicDatasetSideTableSeamline = 64
    esriMosaicDatasetSideTableDodging = 128
    esriMosaicDatasetSideTableStereo = 256
    esriMosaicDatasetSideTableAnalysis = 512
    esriMosaicDatasetSideTableStatus = 1024
    esriMosaicDatasetSideTableView = 2048
    esriMosaicDatasetSideTableCache = 4096

class esriCellSizeLevelCategory(Enumeration):
    __slots__ = ['esriCellSizeLevelCategoryUnknown',
                 'esriCellSizeLevelCategoryPrimary',
                 'esriCellSizeLevelCategoryOverview',
                 'esriCellSizeLevelCategorySeamline']
    esriCellSizeLevelCategoryUnknown = 0
    esriCellSizeLevelCategoryPrimary = 1
    esriCellSizeLevelCategoryOverview = 2
    esriCellSizeLevelCategorySeamline = 4

class esriDisplayCoordUnitType(Enumeration):
    __slots__ = ['esriDisplayCUTypeUnknown',
                 'esriDCUTypeDecimalDegrees',
                 'esriDCUTypeDegreesDecimalMinutes',
                 'esriDCUTypeDegreesMinutesSeconds',
                 'esriDCUTypeMGRS',
                 'esriDCUTypeUSNationalGrid',
                 'esriDCUTypeUTM']
    esriDisplayCUTypeUnknown = -1
    esriDCUTypeDecimalDegrees = 0
    esriDCUTypeDegreesDecimalMinutes = 1
    esriDCUTypeDegreesMinutesSeconds = 2
    esriDCUTypeMGRS = 3
    esriDCUTypeUSNationalGrid = 4
    esriDCUTypeUTM = 5

class esriReferenceGeoidType(Enumeration):
    __slots__ = ['esriGeoidTypeUnknown',
                 'esriGeoidTypeWGS84EGM96']
    esriGeoidTypeUnknown = -1
    esriGeoidTypeWGS84EGM96 = 0

